// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50120 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5780 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 56483 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 56483 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16757 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16757 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16757 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16757 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1610
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1451: LD_ADDR_VAR 0 1
1455: PUSH
1456: LD_EXP 43
1460: PPUSH
1461: LD_INT 25
1463: PUSH
1464: LD_INT 2
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 72
1475: ST_TO_ADDR
// if not tmp then
1476: LD_VAR 0 1
1480: NOT
1481: IFFALSE 1485
// exit ;
1483: GO 1610
// wait ( 0 0$5 ) ;
1485: LD_INT 175
1487: PPUSH
1488: CALL_OW 67
// ComExit ( tmp ) ;
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL 53826 0 1
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1501: LD_VAR 0 1
1505: PPUSH
1506: LD_INT 2
1508: PPUSH
1509: LD_INT 113
1511: PPUSH
1512: LD_INT 113
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1522: LD_INT 83
1524: PPUSH
1525: LD_INT 46
1527: PPUSH
1528: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1532: LD_INT 83
1534: PPUSH
1535: LD_INT 47
1537: PPUSH
1538: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1542: LD_INT 83
1544: PPUSH
1545: LD_INT 48
1547: PPUSH
1548: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1552: LD_VAR 0 1
1556: PPUSH
1557: LD_INT 26
1559: PPUSH
1560: LD_INT 116
1562: PPUSH
1563: LD_INT 98
1565: PPUSH
1566: LD_INT 0
1568: PPUSH
1569: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1573: LD_INT 35
1575: PPUSH
1576: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1580: LD_VAR 0 1
1584: PPUSH
1585: LD_INT 60
1587: PUSH
1588: EMPTY
1589: LIST
1590: PPUSH
1591: CALL_OW 72
1595: NOT
1596: IFFALSE 1573
// ComEnterUnit ( tmp , kirov ) ;
1598: LD_VAR 0 1
1602: PPUSH
1603: LD_INT 71
1605: PPUSH
1606: CALL_OW 120
// end ;
1610: PPOPN 1
1612: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1613: LD_INT 0
1615: PPUSH
1616: PPUSH
1617: PPUSH
1618: PPUSH
1619: PPUSH
1620: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1621: LD_ADDR_VAR 0 3
1625: PUSH
1626: LD_INT 22
1628: PUSH
1629: LD_INT 6
1631: PUSH
1632: EMPTY
1633: LIST
1634: LIST
1635: PUSH
1636: LD_INT 21
1638: PUSH
1639: LD_INT 2
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: PUSH
1646: EMPTY
1647: LIST
1648: LIST
1649: PPUSH
1650: CALL_OW 69
1654: ST_TO_ADDR
// if not belkovTank then
1655: LD_VAR 0 3
1659: NOT
1660: IFFALSE 1753
// begin uc_side := 6 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 6
1669: ST_TO_ADDR
// uc_nation := 3 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 3
1677: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1678: LD_INT 21
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_INT 42
1689: PPUSH
1690: LD_INT 100
1692: PPUSH
1693: CALL 21621 0 5
// belkovTank := CreateVehicle ;
1697: LD_ADDR_VAR 0 3
1701: PUSH
1702: CALL_OW 45
1706: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1707: LD_VAR 0 3
1711: PPUSH
1712: LD_INT 5
1714: PPUSH
1715: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1719: LD_VAR 0 3
1723: PPUSH
1724: LD_INT 127
1726: PPUSH
1727: LD_INT 118
1729: PPUSH
1730: LD_INT 0
1732: PPUSH
1733: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1737: LD_EXP 36
1741: PPUSH
1742: LD_VAR 0 3
1746: PPUSH
1747: CALL_OW 120
// end else
1751: GO 1767
// begin belkovTank := belkovTank [ 1 ] ;
1753: LD_ADDR_VAR 0 3
1757: PUSH
1758: LD_VAR 0 3
1762: PUSH
1763: LD_INT 1
1765: ARRAY
1766: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 71
1774: PPUSH
1775: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 71
1786: PPUSH
1787: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1791: LD_VAR 0 3
1795: PPUSH
1796: CALL_OW 256
1800: PUSH
1801: LD_INT 1000
1803: LESS
1804: IFFALSE 1917
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1806: LD_ADDR_VAR 0 4
1810: PUSH
1811: LD_EXP 43
1815: PPUSH
1816: LD_INT 25
1818: PUSH
1819: LD_INT 3
1821: PUSH
1822: EMPTY
1823: LIST
1824: LIST
1825: PPUSH
1826: CALL_OW 72
1830: ST_TO_ADDR
// if not mech then
1831: LD_VAR 0 4
1835: NOT
1836: IFFALSE 1852
// SetLives ( belkovTank , 1000 ) else
1838: LD_VAR 0 3
1842: PPUSH
1843: LD_INT 1000
1845: PPUSH
1846: CALL_OW 234
1850: GO 1917
// begin ComExit ( mech ) ;
1852: LD_VAR 0 4
1856: PPUSH
1857: CALL 53826 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1861: LD_VAR 0 4
1865: PPUSH
1866: LD_VAR 0 3
1870: PPUSH
1871: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1875: LD_VAR 0 4
1879: PPUSH
1880: LD_INT 22
1882: PUSH
1883: LD_INT 6
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: PUSH
1890: LD_INT 30
1892: PUSH
1893: LD_INT 2
1895: PUSH
1896: EMPTY
1897: LIST
1898: LIST
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: PPUSH
1904: CALL_OW 69
1908: PUSH
1909: LD_INT 1
1911: ARRAY
1912: PPUSH
1913: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1917: LD_INT 70
1919: PPUSH
1920: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1924: LD_VAR 0 3
1928: PPUSH
1929: CALL_OW 256
1933: PUSH
1934: LD_INT 1000
1936: EQUAL
1937: IFFALSE 1917
// if mech then
1939: LD_VAR 0 4
1943: IFFALSE 1987
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1945: LD_VAR 0 4
1949: PPUSH
1950: LD_INT 22
1952: PUSH
1953: LD_INT 6
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: LD_INT 30
1962: PUSH
1963: LD_INT 2
1965: PUSH
1966: EMPTY
1967: LIST
1968: LIST
1969: PUSH
1970: EMPTY
1971: LIST
1972: LIST
1973: PPUSH
1974: CALL_OW 69
1978: PUSH
1979: LD_INT 1
1981: ARRAY
1982: PPUSH
1983: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
1987: LD_EXP 36
1991: PPUSH
1992: LD_INT 107
1994: PPUSH
1995: LD_INT 104
1997: PPUSH
1998: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2002: LD_EXP 36
2006: PPUSH
2007: LD_INT 95
2009: PPUSH
2010: LD_INT 101
2012: PPUSH
2013: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2017: LD_EXP 36
2021: PPUSH
2022: LD_INT 89
2024: PPUSH
2025: LD_INT 100
2027: PPUSH
2028: CALL_OW 171
// wait ( 0 0$2 ) ;
2032: LD_INT 70
2034: PPUSH
2035: CALL_OW 67
// for i in belkovTeam do
2039: LD_ADDR_VAR 0 2
2043: PUSH
2044: LD_EXP 45
2048: PUSH
2049: FOR_IN
2050: IFFALSE 2078
// begin ComExit ( i ) ;
2052: LD_VAR 0 2
2056: PPUSH
2057: CALL 53826 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2061: LD_VAR 0 2
2065: PPUSH
2066: LD_INT 89
2068: PPUSH
2069: LD_INT 100
2071: PPUSH
2072: CALL_OW 171
// end ;
2076: GO 2049
2078: POP
2079: POP
// tmp := Belkov union belkovTeam ;
2080: LD_ADDR_VAR 0 5
2084: PUSH
2085: LD_EXP 36
2089: PUSH
2090: LD_EXP 45
2094: UNION
2095: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2096: LD_INT 35
2098: PPUSH
2099: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2103: LD_VAR 0 5
2107: PPUSH
2108: LD_INT 60
2110: PUSH
2111: EMPTY
2112: LIST
2113: PPUSH
2114: CALL_OW 72
2118: NOT
2119: IFFALSE 2096
// ComMoveXY ( tmp , 71 , 65 ) ;
2121: LD_VAR 0 5
2125: PPUSH
2126: LD_INT 71
2128: PPUSH
2129: LD_INT 65
2131: PPUSH
2132: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2136: LD_VAR 0 5
2140: PPUSH
2141: LD_INT 61
2143: PPUSH
2144: LD_INT 37
2146: PPUSH
2147: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2151: LD_VAR 0 5
2155: PPUSH
2156: LD_INT 67
2158: PPUSH
2159: LD_INT 17
2161: PPUSH
2162: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2166: LD_VAR 0 5
2170: PPUSH
2171: LD_INT 70
2173: PPUSH
2174: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2178: LD_EXP 36
2182: PPUSH
2183: LD_INT 63
2185: PPUSH
2186: LD_INT 8
2188: PPUSH
2189: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2193: LD_EXP 36
2197: PPUSH
2198: LD_INT 105
2200: PPUSH
2201: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2205: LD_EXP 36
2209: PPUSH
2210: LD_INT 86
2212: PPUSH
2213: LD_INT 37
2215: PPUSH
2216: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2220: LD_EXP 36
2224: PPUSH
2225: LD_INT 105
2227: PPUSH
2228: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2232: LD_VAR 0 5
2236: PPUSH
2237: LD_INT 88
2239: PPUSH
2240: LD_INT 29
2242: PPUSH
2243: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2247: LD_INT 35
2249: PPUSH
2250: CALL_OW 67
// for i in tmp do
2254: LD_ADDR_VAR 0 2
2258: PUSH
2259: LD_VAR 0 5
2263: PUSH
2264: FOR_IN
2265: IFFALSE 2296
// if not HasTask ( i ) then
2267: LD_VAR 0 2
2271: PPUSH
2272: CALL_OW 314
2276: NOT
2277: IFFALSE 2294
// AddComMoveXY ( tmp , 88 , 29 ) ;
2279: LD_VAR 0 5
2283: PPUSH
2284: LD_INT 88
2286: PPUSH
2287: LD_INT 29
2289: PPUSH
2290: CALL_OW 171
2294: GO 2264
2296: POP
2297: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2298: LD_VAR 0 5
2302: PPUSH
2303: LD_INT 95
2305: PUSH
2306: LD_INT 6
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PPUSH
2313: CALL_OW 72
2317: IFFALSE 2411
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2319: LD_ADDR_VAR 0 2
2323: PUSH
2324: LD_VAR 0 5
2328: PPUSH
2329: LD_INT 95
2331: PUSH
2332: LD_INT 6
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PPUSH
2339: CALL_OW 72
2343: PUSH
2344: FOR_IN
2345: IFFALSE 2409
// begin if i = Belkov then
2347: LD_VAR 0 2
2351: PUSH
2352: LD_EXP 36
2356: EQUAL
2357: IFFALSE 2398
// begin belkovTank := IsInUnit ( Belkov ) ;
2359: LD_ADDR_VAR 0 3
2363: PUSH
2364: LD_EXP 36
2368: PPUSH
2369: CALL_OW 310
2373: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2374: LD_ADDR_VAR 0 6
2378: PUSH
2379: LD_VAR 0 3
2383: PPUSH
2384: CALL_OW 261
2388: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2389: LD_VAR 0 3
2393: PPUSH
2394: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2398: LD_VAR 0 2
2402: PPUSH
2403: CALL_OW 64
// end ;
2407: GO 2344
2409: POP
2410: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2411: LD_VAR 0 5
2415: PPUSH
2416: LD_INT 52
2418: PUSH
2419: EMPTY
2420: LIST
2421: PPUSH
2422: CALL_OW 72
2426: NOT
2427: IFFALSE 2247
// wait ( 1 1$20 ) ;
2429: LD_INT 2800
2431: PPUSH
2432: CALL_OW 67
// if fuel < 50 then
2436: LD_VAR 0 6
2440: PUSH
2441: LD_INT 50
2443: LESS
2444: IFFALSE 2454
// fuel := 50 ;
2446: LD_ADDR_VAR 0 6
2450: PUSH
2451: LD_INT 50
2453: ST_TO_ADDR
// uc_side := 6 ;
2454: LD_ADDR_OWVAR 20
2458: PUSH
2459: LD_INT 6
2461: ST_TO_ADDR
// uc_nation := 3 ;
2462: LD_ADDR_OWVAR 21
2466: PUSH
2467: LD_INT 3
2469: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2470: LD_INT 21
2472: PPUSH
2473: LD_INT 1
2475: PPUSH
2476: LD_INT 1
2478: PPUSH
2479: LD_INT 42
2481: PPUSH
2482: LD_VAR 0 6
2486: PUSH
2487: LD_INT 5
2489: MINUS
2490: PPUSH
2491: CALL 21621 0 5
// belkovTank := CreateVehicle ;
2495: LD_ADDR_VAR 0 3
2499: PUSH
2500: CALL_OW 45
2504: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2505: LD_VAR 0 3
2509: PPUSH
2510: LD_INT 2
2512: PPUSH
2513: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2517: LD_VAR 0 3
2521: PPUSH
2522: LD_INT 60
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2535: LD_EXP 36
2539: PPUSH
2540: LD_VAR 0 3
2544: PPUSH
2545: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2549: LD_EXP 36
2553: PPUSH
2554: LD_INT 72
2556: PPUSH
2557: LD_INT 26
2559: PPUSH
2560: CALL_OW 111
// wait ( 0 0$2 ) ;
2564: LD_INT 70
2566: PPUSH
2567: CALL_OW 67
// for i in belkovTeam do
2571: LD_ADDR_VAR 0 2
2575: PUSH
2576: LD_EXP 45
2580: PUSH
2581: FOR_IN
2582: IFFALSE 2626
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2584: LD_VAR 0 2
2588: PPUSH
2589: LD_INT 60
2591: PPUSH
2592: LD_INT 3
2594: PPUSH
2595: LD_INT 0
2597: PPUSH
2598: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 65
2609: PPUSH
2610: LD_INT 18
2612: PPUSH
2613: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2617: LD_INT 28
2619: PPUSH
2620: CALL_OW 67
// end ;
2624: GO 2581
2626: POP
2627: POP
// repeat wait ( 0 0$1 ) ;
2628: LD_INT 35
2630: PPUSH
2631: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2635: LD_EXP 14
2639: PUSH
2640: LD_EXP 45
2644: PPUSH
2645: LD_INT 60
2647: PUSH
2648: EMPTY
2649: LIST
2650: PPUSH
2651: CALL_OW 72
2655: NOT
2656: AND
2657: IFFALSE 2628
// americanTrap := true ;
2659: LD_ADDR_EXP 17
2663: PUSH
2664: LD_INT 1
2666: ST_TO_ADDR
// end ;
2667: LD_VAR 0 1
2671: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2672: LD_EXP 4
2676: PUSH
2677: LD_EXP 40
2681: PPUSH
2682: CALL_OW 302
2686: AND
2687: IFFALSE 3007
2689: GO 2691
2691: DISABLE
2692: LD_INT 0
2694: PPUSH
2695: PPUSH
2696: PPUSH
2697: PPUSH
// begin enable ;
2698: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2699: LD_EXP 8
2703: PUSH
2704: LD_INT 0
2706: GREATER
2707: PUSH
2708: LD_EXP 40
2712: PPUSH
2713: CALL_OW 314
2717: NOT
2718: AND
2719: IFFALSE 2888
// begin dir := rand ( 0 , 5 ) ;
2721: LD_ADDR_VAR 0 4
2725: PUSH
2726: LD_INT 0
2728: PPUSH
2729: LD_INT 5
2731: PPUSH
2732: CALL_OW 12
2736: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2737: LD_ADDR_VAR 0 1
2741: PUSH
2742: LD_EXP 40
2746: PPUSH
2747: CALL_OW 250
2751: PPUSH
2752: LD_VAR 0 4
2756: PPUSH
2757: LD_INT 5
2759: PPUSH
2760: CALL_OW 272
2764: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2765: LD_ADDR_VAR 0 2
2769: PUSH
2770: LD_EXP 40
2774: PPUSH
2775: CALL_OW 251
2779: PPUSH
2780: LD_VAR 0 4
2784: PPUSH
2785: LD_INT 5
2787: PPUSH
2788: CALL_OW 273
2792: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2793: LD_VAR 0 1
2797: PPUSH
2798: LD_VAR 0 2
2802: PPUSH
2803: CALL_OW 488
2807: PUSH
2808: LD_INT 106
2810: PPUSH
2811: LD_VAR 0 1
2815: PPUSH
2816: LD_VAR 0 2
2820: PPUSH
2821: CALL_OW 297
2825: PUSH
2826: LD_INT 26
2828: LESS
2829: AND
2830: IFFALSE 2853
// AddComMoveXY ( Platonov , x , y ) else
2832: LD_EXP 40
2836: PPUSH
2837: LD_VAR 0 1
2841: PPUSH
2842: LD_VAR 0 2
2846: PPUSH
2847: CALL_OW 171
2851: GO 2868
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2853: LD_EXP 40
2857: PPUSH
2858: LD_INT 64
2860: PPUSH
2861: LD_INT 96
2863: PPUSH
2864: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2868: LD_EXP 40
2872: PPUSH
2873: LD_INT 105
2875: PPUSH
2876: LD_INT 315
2878: PPUSH
2879: CALL_OW 12
2883: PPUSH
2884: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2888: LD_EXP 8
2892: PUSH
2893: LD_INT 0
2895: LESSEQUAL
2896: IFFALSE 2942
// begin if not IsAt ( Platonov , 64 , 96 ) then
2898: LD_EXP 40
2902: PPUSH
2903: LD_INT 64
2905: PPUSH
2906: LD_INT 96
2908: PPUSH
2909: CALL_OW 307
2913: NOT
2914: IFFALSE 2940
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2916: LD_EXP 40
2920: PPUSH
2921: LD_INT 64
2923: PPUSH
2924: LD_INT 96
2926: PPUSH
2927: CALL_OW 111
// AddComHold ( Platonov ) ;
2931: LD_EXP 40
2935: PPUSH
2936: CALL_OW 200
// end ; end else
2940: GO 3007
// if tick mod 0 0$75 = 0 0$00 then
2942: LD_OWVAR 1
2946: PUSH
2947: LD_INT 2625
2949: MOD
2950: PUSH
2951: LD_INT 0
2953: EQUAL
2954: IFFALSE 3007
// begin amount := rand ( 2 , 5 ) ;
2956: LD_ADDR_VAR 0 3
2960: PUSH
2961: LD_INT 2
2963: PPUSH
2964: LD_INT 5
2966: PPUSH
2967: CALL_OW 12
2971: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
2972: LD_ADDR_EXP 8
2976: PUSH
2977: LD_EXP 8
2981: PUSH
2982: LD_VAR 0 3
2986: PUSH
2987: LD_INT 10
2989: MUL
2990: MINUS
2991: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
2992: LD_VAR 0 3
2996: PPUSH
2997: LD_INT 5
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: CALL_OW 55
// end ; end ;
3007: PPOPN 4
3009: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3010: LD_INT 106
3012: PPUSH
3013: CALL_OW 274
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: CALL_OW 275
3025: PUSH
3026: LD_INT 30
3028: LESS
3029: IFFALSE 3239
3031: GO 3033
3033: DISABLE
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3038: LD_ADDR_VAR 0 2
3042: PUSH
3043: LD_EXP 43
3047: PPUSH
3048: LD_INT 3
3050: PUSH
3051: LD_INT 60
3053: PUSH
3054: EMPTY
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PUSH
3061: LD_INT 25
3063: PUSH
3064: LD_INT 2
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PPUSH
3075: CALL_OW 72
3079: ST_TO_ADDR
// if not eng then
3080: LD_VAR 0 2
3084: NOT
3085: IFFALSE 3089
// exit ;
3087: GO 3239
// ComExit ( eng ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: CALL 53826 0 1
// i := 5 ;
3098: LD_ADDR_VAR 0 1
3102: PUSH
3103: LD_INT 5
3105: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3106: LD_INT 35
3108: PPUSH
3109: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 60
3120: PUSH
3121: EMPTY
3122: LIST
3123: PPUSH
3124: CALL_OW 72
3128: NOT
3129: PUSH
3130: LD_VAR 0 2
3134: AND
3135: IFFALSE 3205
// begin ComTransport ( eng , kirov , mat_oil ) ;
3137: LD_VAR 0 2
3141: PPUSH
3142: LD_INT 71
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3152: LD_VAR 0 2
3156: PPUSH
3157: LD_INT 67
3159: PPUSH
3160: LD_INT 99
3162: PPUSH
3163: CALL_OW 171
// AddComUnload ( eng ) ;
3167: LD_VAR 0 2
3171: PPUSH
3172: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 107
3183: PPUSH
3184: LD_INT 104
3186: PPUSH
3187: CALL_OW 171
// i := i - 1 ;
3191: LD_ADDR_VAR 0 1
3195: PUSH
3196: LD_VAR 0 1
3200: PUSH
3201: LD_INT 1
3203: MINUS
3204: ST_TO_ADDR
// end ; until i = 0 ;
3205: LD_VAR 0 1
3209: PUSH
3210: LD_INT 0
3212: EQUAL
3213: IFFALSE 3106
// AddComMoveUnit ( eng , kirov ) ;
3215: LD_VAR 0 2
3219: PPUSH
3220: LD_INT 71
3222: PPUSH
3223: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: LD_INT 71
3234: PPUSH
3235: CALL_OW 180
// end ;
3239: PPOPN 2
3241: END
// export function SendReinforcements ; var i ; begin
3242: LD_INT 0
3244: PPUSH
3245: PPUSH
// reinforcementsGained := true ;
3246: LD_ADDR_EXP 25
3250: PUSH
3251: LD_INT 1
3253: ST_TO_ADDR
// for i := 1 to 2 do
3254: LD_ADDR_VAR 0 2
3258: PUSH
3259: DOUBLE
3260: LD_INT 1
3262: DEC
3263: ST_TO_ADDR
3264: LD_INT 2
3266: PUSH
3267: FOR_TO
3268: IFFALSE 3350
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3270: LD_EXP 44
3274: PUSH
3275: LD_VAR 0 2
3279: ARRAY
3280: PPUSH
3281: CALL 53826 0 1
3285: IFFALSE 3294
// wait ( 0 0$0.3 ) ;
3287: LD_INT 10
3289: PPUSH
3290: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3294: LD_EXP 44
3298: PUSH
3299: LD_VAR 0 2
3303: ARRAY
3304: PPUSH
3305: LD_INT 75
3307: PPUSH
3308: LD_INT 84
3310: PPUSH
3311: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3315: LD_EXP 44
3319: PUSH
3320: LD_VAR 0 2
3324: ARRAY
3325: PPUSH
3326: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: LD_INT 3
3343: PPUSH
3344: CALL_OW 235
// end ;
3348: GO 3267
3350: POP
3351: POP
// end ;
3352: LD_VAR 0 1
3356: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3357: LD_EXP 21
3361: PUSH
3362: LD_EXP 18
3366: AND
3367: PUSH
3368: LD_EXP 43
3372: PPUSH
3373: LD_INT 25
3375: PUSH
3376: LD_INT 3
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PPUSH
3383: CALL_OW 72
3387: AND
3388: IFFALSE 3545
3390: GO 3392
3392: DISABLE
3393: LD_INT 0
3395: PPUSH
3396: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3397: LD_ADDR_VAR 0 1
3401: PUSH
3402: LD_EXP 43
3406: PPUSH
3407: LD_INT 25
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: PPUSH
3417: CALL_OW 72
3421: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3422: LD_ADDR_VAR 0 2
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 6
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 30
3439: PUSH
3440: LD_INT 2
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PPUSH
3451: CALL_OW 69
3455: ST_TO_ADDR
// if not fac then
3456: LD_VAR 0 2
3460: NOT
3461: IFFALSE 3465
// exit ;
3463: GO 3545
// fac := fac [ 1 ] ;
3465: LD_ADDR_VAR 0 2
3469: PUSH
3470: LD_VAR 0 2
3474: PUSH
3475: LD_INT 1
3477: ARRAY
3478: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3479: LD_VAR 0 2
3483: PPUSH
3484: CALL_OW 313
3488: PUSH
3489: LD_INT 0
3491: EQUAL
3492: IFFALSE 3524
// begin ComExit ( mech ) ;
3494: LD_VAR 0 1
3498: PPUSH
3499: CALL 53826 0 1
// wait ( 3 ) ;
3503: LD_INT 3
3505: PPUSH
3506: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_VAR 0 2
3519: PPUSH
3520: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3524: LD_VAR 0 2
3528: PPUSH
3529: LD_INT 21
3531: PPUSH
3532: LD_INT 1
3534: PPUSH
3535: LD_INT 1
3537: PPUSH
3538: LD_INT 42
3540: PPUSH
3541: CALL_OW 125
// end ;
3545: PPOPN 2
3547: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3548: LD_INT 0
3550: PPUSH
3551: PPUSH
3552: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3553: LD_VAR 0 1
3557: PPUSH
3558: LD_INT 90
3560: PPUSH
3561: LD_INT 100
3563: PPUSH
3564: CALL_OW 111
// wait ( 0 0$10 ) ;
3568: LD_INT 350
3570: PPUSH
3571: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3575: LD_VAR 0 1
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3594: LD_ADDR_VAR 0 4
3598: PUSH
3599: LD_VAR 0 1
3603: PPUSH
3604: CALL_OW 110
3608: ST_TO_ADDR
// if tag = 0 then
3609: LD_VAR 0 4
3613: PUSH
3614: LD_INT 0
3616: EQUAL
3617: IFFALSE 3688
// begin if not HasTask ( vehicle ) then
3619: LD_VAR 0 1
3623: PPUSH
3624: CALL_OW 314
3628: NOT
3629: IFFALSE 3646
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3631: LD_VAR 0 1
3635: PPUSH
3636: LD_INT 83
3638: PPUSH
3639: LD_INT 68
3641: PPUSH
3642: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3646: LD_VAR 0 1
3650: PPUSH
3651: CALL_OW 256
3655: PUSH
3656: LD_INT 750
3658: LESS
3659: IFFALSE 3688
// begin SetTag ( vehicle , 1 ) ;
3661: LD_VAR 0 1
3665: PPUSH
3666: LD_INT 1
3668: PPUSH
3669: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3673: LD_VAR 0 1
3677: PPUSH
3678: LD_INT 93
3680: PPUSH
3681: LD_INT 102
3683: PPUSH
3684: CALL_OW 111
// end ; end ; if tag = 1 then
3688: LD_VAR 0 4
3692: PUSH
3693: LD_INT 1
3695: EQUAL
3696: IFFALSE 3786
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3698: LD_VAR 0 1
3702: PPUSH
3703: LD_INT 113
3705: PPUSH
3706: LD_INT 106
3708: PPUSH
3709: CALL_OW 307
3713: NOT
3714: PUSH
3715: LD_VAR 0 1
3719: PPUSH
3720: CALL_OW 314
3724: NOT
3725: AND
3726: IFFALSE 3743
// ComMoveXY ( vehicle , 113 , 106 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 113
3735: PPUSH
3736: LD_INT 106
3738: PPUSH
3739: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3743: LD_VAR 0 1
3747: PPUSH
3748: LD_INT 113
3750: PPUSH
3751: LD_INT 106
3753: PPUSH
3754: CALL_OW 307
3758: IFFALSE 3786
// begin SetTag ( vehicle , 2 ) ;
3760: LD_VAR 0 1
3764: PPUSH
3765: LD_INT 2
3767: PPUSH
3768: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3772: LD_VAR 0 1
3776: PPUSH
3777: CALL_OW 311
3781: PPUSH
3782: CALL 55130 0 1
// end ; end ; if tag = 2 then
3786: LD_VAR 0 4
3790: PUSH
3791: LD_INT 2
3793: EQUAL
3794: IFFALSE 3858
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3796: LD_VAR 0 1
3800: PPUSH
3801: CALL_OW 256
3805: PUSH
3806: LD_INT 1000
3808: EQUAL
3809: PUSH
3810: LD_VAR 0 1
3814: PPUSH
3815: CALL_OW 311
3819: AND
3820: IFFALSE 3858
// begin ComMoveUnit ( vehicle , kirov ) ;
3822: LD_VAR 0 1
3826: PPUSH
3827: LD_INT 71
3829: PPUSH
3830: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3834: LD_VAR 0 1
3838: PPUSH
3839: LD_INT 71
3841: PPUSH
3842: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3846: LD_VAR 0 1
3850: PPUSH
3851: LD_INT 0
3853: PPUSH
3854: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3858: LD_VAR 0 1
3862: PPUSH
3863: CALL_OW 301
3867: PUSH
3868: LD_EXP 23
3872: OR
3873: IFFALSE 3587
// if eastOutpostDestroyed then
3875: LD_EXP 23
3879: IFFALSE 3896
// ComMoveXY ( vehicle , 111 , 105 ) ;
3881: LD_VAR 0 1
3885: PPUSH
3886: LD_INT 111
3888: PPUSH
3889: LD_INT 105
3891: PPUSH
3892: CALL_OW 111
// end ; end_of_file
3896: LD_VAR 0 2
3900: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3901: LD_INT 0
3903: PPUSH
3904: PPUSH
3905: PPUSH
3906: PPUSH
// uc_side := 1 ;
3907: LD_ADDR_OWVAR 20
3911: PUSH
3912: LD_INT 1
3914: ST_TO_ADDR
// uc_nation := 1 ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_INT 1
3922: ST_TO_ADDR
// usWestForces := [ ] ;
3923: LD_ADDR_EXP 46
3927: PUSH
3928: EMPTY
3929: ST_TO_ADDR
// usEastForces := [ ] ;
3930: LD_ADDR_EXP 47
3934: PUSH
3935: EMPTY
3936: ST_TO_ADDR
// bc_type := b_depot ;
3937: LD_ADDR_OWVAR 42
3941: PUSH
3942: LD_INT 0
3944: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
3945: LD_ADDR_OWVAR 43
3949: PUSH
3950: LD_OWVAR 67
3954: PUSH
3955: LD_INT 1
3957: MINUS
3958: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
3959: LD_INT 48
3961: PPUSH
3962: LD_INT 54
3964: PPUSH
3965: LD_INT 2
3967: PPUSH
3968: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
3972: LD_ADDR_VAR 0 4
3976: PUSH
3977: LD_INT 55
3979: PUSH
3980: LD_INT 55
3982: PUSH
3983: LD_INT 4
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: LIST
3990: PUSH
3991: LD_INT 59
3993: PUSH
3994: LD_INT 61
3996: PUSH
3997: LD_INT 4
3999: PUSH
4000: EMPTY
4001: LIST
4002: LIST
4003: LIST
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: ST_TO_ADDR
// if Difficulty > 1 then
4009: LD_OWVAR 67
4013: PUSH
4014: LD_INT 1
4016: GREATER
4017: IFFALSE 4053
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4019: LD_ADDR_VAR 0 4
4023: PUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: LD_VAR 0 4
4033: PPUSH
4034: LD_INT 46
4036: PUSH
4037: LD_INT 64
4039: PUSH
4040: LD_INT 0
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: LIST
4047: PPUSH
4048: CALL_OW 2
4052: ST_TO_ADDR
// if Difficulty > 2 then
4053: LD_OWVAR 67
4057: PUSH
4058: LD_INT 2
4060: GREATER
4061: IFFALSE 4097
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 4
4077: PPUSH
4078: LD_INT 36
4080: PUSH
4081: LD_INT 48
4083: PUSH
4084: LD_INT 3
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 2
4096: ST_TO_ADDR
// bc_type := b_breastwork ;
4097: LD_ADDR_OWVAR 42
4101: PUSH
4102: LD_INT 31
4104: ST_TO_ADDR
// InitHC_All ( ) ;
4105: CALL_OW 584
// for i in tmp do
4109: LD_ADDR_VAR 0 2
4113: PUSH
4114: LD_VAR 0 4
4118: PUSH
4119: FOR_IN
4120: IFFALSE 4264
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4122: LD_VAR 0 2
4126: PUSH
4127: LD_INT 1
4129: ARRAY
4130: PPUSH
4131: LD_VAR 0 2
4135: PUSH
4136: LD_INT 2
4138: ARRAY
4139: PPUSH
4140: LD_VAR 0 2
4144: PUSH
4145: LD_INT 3
4147: ARRAY
4148: PPUSH
4149: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4153: LD_INT 0
4155: PPUSH
4156: LD_OWVAR 67
4160: PPUSH
4161: CALL_OW 381
// un := CreateHuman ;
4165: LD_ADDR_VAR 0 3
4169: PUSH
4170: CALL_OW 44
4174: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4175: LD_ADDR_EXP 46
4179: PUSH
4180: LD_EXP 46
4184: PPUSH
4185: LD_EXP 46
4189: PUSH
4190: LD_INT 1
4192: PLUS
4193: PPUSH
4194: LD_VAR 0 3
4198: PPUSH
4199: CALL_OW 1
4203: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4204: LD_VAR 0 3
4208: PPUSH
4209: LD_VAR 0 2
4213: PUSH
4214: LD_INT 3
4216: ARRAY
4217: PUSH
4218: LD_INT 3
4220: PLUS
4221: PUSH
4222: LD_INT 6
4224: MOD
4225: PPUSH
4226: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4230: LD_VAR 0 3
4234: PPUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: PPUSH
4244: LD_VAR 0 2
4248: PUSH
4249: LD_INT 2
4251: ARRAY
4252: PPUSH
4253: CALL_OW 428
4257: PPUSH
4258: CALL_OW 52
// end ;
4262: GO 4119
4264: POP
4265: POP
// for i := 1 to 2 do
4266: LD_ADDR_VAR 0 2
4270: PUSH
4271: DOUBLE
4272: LD_INT 1
4274: DEC
4275: ST_TO_ADDR
4276: LD_INT 2
4278: PUSH
4279: FOR_TO
4280: IFFALSE 4356
// begin PrepareEngineer ( false , Difficulty ) ;
4282: LD_INT 0
4284: PPUSH
4285: LD_OWVAR 67
4289: PPUSH
4290: CALL_OW 382
// un := CreateHuman ;
4294: LD_ADDR_VAR 0 3
4298: PUSH
4299: CALL_OW 44
4303: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4304: LD_ADDR_EXP 46
4308: PUSH
4309: LD_EXP 46
4313: PPUSH
4314: LD_EXP 46
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: LD_VAR 0 3
4327: PPUSH
4328: CALL_OW 1
4332: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4333: LD_VAR 0 3
4337: PPUSH
4338: LD_INT 54
4340: PPUSH
4341: LD_INT 58
4343: PPUSH
4344: LD_INT 2
4346: PPUSH
4347: LD_INT 0
4349: PPUSH
4350: CALL_OW 50
// end ;
4354: GO 4279
4356: POP
4357: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4358: LD_ADDR_VAR 0 4
4362: PUSH
4363: LD_INT 87
4365: PUSH
4366: LD_INT 62
4368: PUSH
4369: LD_INT 1
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: LIST
4376: PUSH
4377: LD_INT 89
4379: PUSH
4380: LD_INT 67
4382: PUSH
4383: LD_INT 1
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: ST_TO_ADDR
// if Difficulty > 2 then
4395: LD_OWVAR 67
4399: PUSH
4400: LD_INT 2
4402: GREATER
4403: IFFALSE 4439
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4405: LD_ADDR_VAR 0 4
4409: PUSH
4410: LD_VAR 0 4
4414: PPUSH
4415: LD_VAR 0 4
4419: PPUSH
4420: LD_INT 88
4422: PUSH
4423: LD_INT 53
4425: PUSH
4426: LD_INT 2
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: LIST
4433: PPUSH
4434: CALL_OW 2
4438: ST_TO_ADDR
// bc_type := b_breastwork ;
4439: LD_ADDR_OWVAR 42
4443: PUSH
4444: LD_INT 31
4446: ST_TO_ADDR
// for i in tmp do
4447: LD_ADDR_VAR 0 2
4451: PUSH
4452: LD_VAR 0 4
4456: PUSH
4457: FOR_IN
4458: IFFALSE 4602
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4460: LD_VAR 0 2
4464: PUSH
4465: LD_INT 1
4467: ARRAY
4468: PPUSH
4469: LD_VAR 0 2
4473: PUSH
4474: LD_INT 2
4476: ARRAY
4477: PPUSH
4478: LD_VAR 0 2
4482: PUSH
4483: LD_INT 3
4485: ARRAY
4486: PPUSH
4487: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4491: LD_INT 0
4493: PPUSH
4494: LD_OWVAR 67
4498: PPUSH
4499: CALL_OW 381
// un := CreateHuman ;
4503: LD_ADDR_VAR 0 3
4507: PUSH
4508: CALL_OW 44
4512: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4513: LD_ADDR_EXP 47
4517: PUSH
4518: LD_EXP 47
4522: PPUSH
4523: LD_EXP 47
4527: PUSH
4528: LD_INT 1
4530: PLUS
4531: PPUSH
4532: LD_VAR 0 3
4536: PPUSH
4537: CALL_OW 1
4541: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4542: LD_VAR 0 3
4546: PPUSH
4547: LD_VAR 0 2
4551: PUSH
4552: LD_INT 3
4554: ARRAY
4555: PUSH
4556: LD_INT 3
4558: PLUS
4559: PUSH
4560: LD_INT 6
4562: MOD
4563: PPUSH
4564: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4568: LD_VAR 0 3
4572: PPUSH
4573: LD_VAR 0 2
4577: PUSH
4578: LD_INT 1
4580: ARRAY
4581: PPUSH
4582: LD_VAR 0 2
4586: PUSH
4587: LD_INT 2
4589: ARRAY
4590: PPUSH
4591: CALL_OW 428
4595: PPUSH
4596: CALL_OW 52
// end ;
4600: GO 4457
4602: POP
4603: POP
// for i := 1 to 2 do
4604: LD_ADDR_VAR 0 2
4608: PUSH
4609: DOUBLE
4610: LD_INT 1
4612: DEC
4613: ST_TO_ADDR
4614: LD_INT 2
4616: PUSH
4617: FOR_TO
4618: IFFALSE 4694
// begin PrepareEngineer ( false , Difficulty ) ;
4620: LD_INT 0
4622: PPUSH
4623: LD_OWVAR 67
4627: PPUSH
4628: CALL_OW 382
// un := CreateHuman ;
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: CALL_OW 44
4641: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4642: LD_ADDR_EXP 47
4646: PUSH
4647: LD_EXP 47
4651: PPUSH
4652: LD_EXP 47
4656: PUSH
4657: LD_INT 1
4659: PLUS
4660: PPUSH
4661: LD_VAR 0 3
4665: PPUSH
4666: CALL_OW 1
4670: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4671: LD_VAR 0 3
4675: PPUSH
4676: LD_INT 95
4678: PPUSH
4679: LD_INT 65
4681: PPUSH
4682: LD_INT 2
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: CALL_OW 50
// end ;
4692: GO 4617
4694: POP
4695: POP
// end ;
4696: LD_VAR 0 1
4700: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4701: LD_INT 0
4703: PPUSH
4704: PPUSH
4705: PPUSH
// usTrapForces := [ ] ;
4706: LD_ADDR_EXP 48
4710: PUSH
4711: EMPTY
4712: ST_TO_ADDR
// uc_side := 1 ;
4713: LD_ADDR_OWVAR 20
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// uc_nation := 1 ;
4721: LD_ADDR_OWVAR 21
4725: PUSH
4726: LD_INT 1
4728: ST_TO_ADDR
// InitHC_All ( ) ;
4729: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4733: LD_INT 1
4735: PPUSH
4736: LD_OWVAR 67
4740: PPUSH
4741: CALL_OW 381
// un := CreateHuman ;
4745: LD_ADDR_VAR 0 3
4749: PUSH
4750: CALL_OW 44
4754: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4755: LD_ADDR_EXP 48
4759: PUSH
4760: LD_EXP 48
4764: PPUSH
4765: LD_VAR 0 3
4769: PPUSH
4770: CALL 53438 0 2
4774: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4775: LD_ADDR_VAR 0 2
4779: PUSH
4780: DOUBLE
4781: LD_INT 1
4783: DEC
4784: ST_TO_ADDR
4785: LD_INT 5
4787: PUSH
4788: LD_INT 6
4790: PUSH
4791: LD_INT 7
4793: PUSH
4794: LD_INT 8
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: LD_OWVAR 67
4807: ARRAY
4808: PUSH
4809: FOR_TO
4810: IFFALSE 4856
// begin PrepareSoldier ( false , Difficulty ) ;
4812: LD_INT 0
4814: PPUSH
4815: LD_OWVAR 67
4819: PPUSH
4820: CALL_OW 381
// un := CreateHuman ;
4824: LD_ADDR_VAR 0 3
4828: PUSH
4829: CALL_OW 44
4833: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4834: LD_ADDR_EXP 48
4838: PUSH
4839: LD_EXP 48
4843: PPUSH
4844: LD_VAR 0 3
4848: PPUSH
4849: CALL 53438 0 2
4853: ST_TO_ADDR
// end ;
4854: GO 4809
4856: POP
4857: POP
// for i := 1 to 2 do
4858: LD_ADDR_VAR 0 2
4862: PUSH
4863: DOUBLE
4864: LD_INT 1
4866: DEC
4867: ST_TO_ADDR
4868: LD_INT 2
4870: PUSH
4871: FOR_TO
4872: IFFALSE 4918
// begin PrepareScientist ( false , Difficulty ) ;
4874: LD_INT 0
4876: PPUSH
4877: LD_OWVAR 67
4881: PPUSH
4882: CALL_OW 384
// un := CreateHuman ;
4886: LD_ADDR_VAR 0 3
4890: PUSH
4891: CALL_OW 44
4895: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4896: LD_ADDR_EXP 48
4900: PUSH
4901: LD_EXP 48
4905: PPUSH
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL 53438 0 2
4915: ST_TO_ADDR
// end ;
4916: GO 4871
4918: POP
4919: POP
// end ;
4920: LD_VAR 0 1
4924: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4925: LD_EXP 46
4929: IFFALSE 5499
4931: GO 4933
4933: DISABLE
4934: LD_INT 0
4936: PPUSH
4937: PPUSH
4938: PPUSH
4939: PPUSH
4940: PPUSH
// begin enable ;
4941: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4942: LD_ADDR_VAR 0 3
4946: PUSH
4947: LD_INT 8
4949: PPUSH
4950: LD_INT 22
4952: PUSH
4953: LD_INT 1
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 21
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PPUSH
4974: CALL_OW 70
4978: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
4979: LD_ADDR_VAR 0 4
4983: PUSH
4984: LD_EXP 46
4988: PPUSH
4989: LD_INT 25
4991: PUSH
4992: LD_INT 2
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: PPUSH
4999: CALL_OW 72
5003: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5004: LD_ADDR_VAR 0 5
5008: PUSH
5009: LD_EXP 46
5013: PPUSH
5014: LD_INT 25
5016: PUSH
5017: LD_INT 1
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 72
5028: ST_TO_ADDR
// if eng then
5029: LD_VAR 0 4
5033: IFFALSE 5227
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_INT 3
5042: PUSH
5043: LD_INT 24
5045: PUSH
5046: LD_INT 1000
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PPUSH
5057: CALL_OW 72
5061: IFFALSE 5173
// begin for i in eng do
5063: LD_ADDR_VAR 0 1
5067: PUSH
5068: LD_VAR 0 4
5072: PUSH
5073: FOR_IN
5074: IFFALSE 5169
// if IsInUnit ( i ) then
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 310
5085: IFFALSE 5098
// ComExit ( i ) else
5087: LD_VAR 0 1
5091: PPUSH
5092: CALL 53826 0 1
5096: GO 5167
// if IsOk ( i ) and not HasTask ( i ) then
5098: LD_VAR 0 1
5102: PPUSH
5103: CALL_OW 302
5107: PUSH
5108: LD_VAR 0 1
5112: PPUSH
5113: CALL_OW 314
5117: NOT
5118: AND
5119: IFFALSE 5167
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5121: LD_VAR 0 1
5125: PPUSH
5126: LD_VAR 0 3
5130: PPUSH
5131: LD_INT 3
5133: PUSH
5134: LD_INT 24
5136: PUSH
5137: LD_INT 1000
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PPUSH
5148: CALL_OW 72
5152: PPUSH
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 74
5162: PPUSH
5163: CALL_OW 130
5167: GO 5073
5169: POP
5170: POP
// end else
5171: GO 5227
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5173: LD_VAR 0 3
5177: PPUSH
5178: LD_INT 30
5180: PUSH
5181: LD_INT 0
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PPUSH
5188: CALL_OW 72
5192: IFFALSE 5227
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5194: LD_VAR 0 4
5198: PPUSH
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 30
5206: PUSH
5207: LD_INT 0
5209: PUSH
5210: EMPTY
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: PUSH
5219: LD_INT 1
5221: ARRAY
5222: PPUSH
5223: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5227: LD_VAR 0 5
5231: PPUSH
5232: LD_INT 50
5234: PUSH
5235: EMPTY
5236: LIST
5237: PPUSH
5238: CALL_OW 72
5242: PUSH
5243: LD_INT 18
5245: PPUSH
5246: LD_INT 81
5248: PUSH
5249: LD_INT 1
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PPUSH
5256: CALL_OW 70
5260: PUSH
5261: LD_INT 1
5263: GREATER
5264: AND
5265: PUSH
5266: LD_INT 18
5268: PPUSH
5269: LD_INT 22
5271: PUSH
5272: LD_INT 1
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PPUSH
5279: CALL_OW 70
5283: NOT
5284: AND
5285: IFFALSE 5339
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5287: LD_ADDR_VAR 0 1
5291: PUSH
5292: LD_VAR 0 5
5296: PPUSH
5297: LD_INT 50
5299: PUSH
5300: EMPTY
5301: LIST
5302: PPUSH
5303: CALL_OW 72
5307: PUSH
5308: FOR_IN
5309: IFFALSE 5337
// begin ComExit ( i ) ;
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 53826 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_INT 46
5327: PPUSH
5328: LD_INT 62
5330: PPUSH
5331: CALL_OW 174
// end ;
5335: GO 5308
5337: POP
5338: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5339: LD_INT 18
5341: PPUSH
5342: LD_INT 81
5344: PUSH
5345: LD_INT 1
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PPUSH
5352: CALL_OW 70
5356: NOT
5357: PUSH
5358: LD_VAR 0 5
5362: PPUSH
5363: LD_INT 3
5365: PUSH
5366: LD_INT 54
5368: PUSH
5369: EMPTY
5370: LIST
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PUSH
5376: LD_INT 50
5378: PUSH
5379: EMPTY
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 72
5390: AND
5391: PUSH
5392: LD_VAR 0 3
5396: PPUSH
5397: LD_INT 30
5399: PUSH
5400: LD_INT 31
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PUSH
5407: LD_INT 58
5409: PUSH
5410: EMPTY
5411: LIST
5412: PUSH
5413: EMPTY
5414: LIST
5415: LIST
5416: PPUSH
5417: CALL_OW 72
5421: AND
5422: IFFALSE 5499
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5424: LD_VAR 0 5
5428: PPUSH
5429: LD_INT 3
5431: PUSH
5432: LD_INT 54
5434: PUSH
5435: EMPTY
5436: LIST
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: LD_INT 50
5444: PUSH
5445: EMPTY
5446: LIST
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 72
5456: PUSH
5457: LD_INT 1
5459: ARRAY
5460: PPUSH
5461: LD_VAR 0 3
5465: PPUSH
5466: LD_INT 30
5468: PUSH
5469: LD_INT 31
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 58
5478: PUSH
5479: EMPTY
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PPUSH
5486: CALL_OW 72
5490: PUSH
5491: LD_INT 1
5493: ARRAY
5494: PPUSH
5495: CALL_OW 120
// end ;
5499: PPOPN 5
5501: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5502: LD_EXP 47
5506: IFFALSE 5777
5508: GO 5510
5510: DISABLE
5511: LD_INT 0
5513: PPUSH
5514: PPUSH
5515: PPUSH
// begin enable ;
5516: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5517: LD_ADDR_VAR 0 2
5521: PUSH
5522: LD_INT 15
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 3
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PPUSH
5549: CALL_OW 70
5553: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5554: LD_ADDR_VAR 0 3
5558: PUSH
5559: LD_EXP 47
5563: PPUSH
5564: LD_INT 25
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: PPUSH
5574: CALL_OW 72
5578: ST_TO_ADDR
// if eng then
5579: LD_VAR 0 3
5583: IFFALSE 5777
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5585: LD_VAR 0 2
5589: PPUSH
5590: LD_INT 3
5592: PUSH
5593: LD_INT 24
5595: PUSH
5596: LD_INT 1000
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 72
5611: IFFALSE 5723
// begin for i in eng do
5613: LD_ADDR_VAR 0 1
5617: PUSH
5618: LD_VAR 0 3
5622: PUSH
5623: FOR_IN
5624: IFFALSE 5719
// if IsInUnit ( i ) then
5626: LD_VAR 0 1
5630: PPUSH
5631: CALL_OW 310
5635: IFFALSE 5648
// ComExit ( i ) else
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL 53826 0 1
5646: GO 5717
// if IsOk ( i ) and not HasTask ( i ) then
5648: LD_VAR 0 1
5652: PPUSH
5653: CALL_OW 302
5657: PUSH
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 314
5667: NOT
5668: AND
5669: IFFALSE 5717
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5671: LD_VAR 0 1
5675: PPUSH
5676: LD_VAR 0 2
5680: PPUSH
5681: LD_INT 3
5683: PUSH
5684: LD_INT 24
5686: PUSH
5687: LD_INT 1000
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PPUSH
5698: CALL_OW 72
5702: PPUSH
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 74
5712: PPUSH
5713: CALL_OW 130
5717: GO 5623
5719: POP
5720: POP
// end else
5721: GO 5777
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5723: LD_VAR 0 2
5727: PPUSH
5728: LD_INT 30
5730: PUSH
5731: LD_INT 0
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PPUSH
5738: CALL_OW 72
5742: IFFALSE 5777
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5744: LD_VAR 0 3
5748: PPUSH
5749: LD_VAR 0 2
5753: PPUSH
5754: LD_INT 30
5756: PUSH
5757: LD_INT 0
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PPUSH
5764: CALL_OW 72
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: CALL_OW 120
// end ; end_of_file
5777: PPOPN 3
5779: END
// export function Action ; var i , tmp ; begin
5780: LD_INT 0
5782: PPUSH
5783: PPUSH
5784: PPUSH
// InGameOn ;
5785: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5789: LD_INT 112
5791: PPUSH
5792: LD_INT 107
5794: PPUSH
5795: LD_INT 3
5797: PPUSH
5798: LD_INT 12
5800: NEG
5801: PPUSH
5802: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5806: LD_INT 121
5808: PPUSH
5809: LD_INT 113
5811: PPUSH
5812: CALL_OW 86
// tmp := PrepareBurlak ;
5816: LD_ADDR_VAR 0 3
5820: PUSH
5821: CALL 1244 0 0
5825: ST_TO_ADDR
// for i in tmp do
5826: LD_ADDR_VAR 0 2
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5890
// begin SetDir ( i , 5 ) ;
5839: LD_VAR 0 2
5843: PPUSH
5844: LD_INT 5
5846: PPUSH
5847: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5851: LD_VAR 0 2
5855: PPUSH
5856: LD_INT 3
5858: PPUSH
5859: LD_INT 0
5861: PPUSH
5862: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5866: LD_VAR 0 2
5870: PPUSH
5871: LD_INT 121
5873: PPUSH
5874: LD_INT 111
5876: PPUSH
5877: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5881: LD_INT 28
5883: PPUSH
5884: CALL_OW 67
// end ;
5888: GO 5836
5890: POP
5891: POP
// CenterOnUnits ( Kurin ) ;
5892: LD_EXP 38
5896: PPUSH
5897: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5901: LD_EXP 34
5905: PPUSH
5906: LD_EXP 38
5910: PPUSH
5911: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5915: LD_INT 35
5917: PPUSH
5918: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5922: LD_EXP 34
5926: PPUSH
5927: LD_EXP 38
5931: PPUSH
5932: CALL_OW 296
5936: PUSH
5937: LD_INT 6
5939: LESS
5940: IFFALSE 5915
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5942: LD_EXP 34
5946: PUSH
5947: LD_EXP 35
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PPUSH
5956: LD_EXP 38
5960: PPUSH
5961: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
5965: LD_ADDR_VAR 0 2
5969: PUSH
5970: LD_VAR 0 3
5974: PUSH
5975: LD_EXP 34
5979: PUSH
5980: LD_EXP 35
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: DIFF
5989: PUSH
5990: FOR_IN
5991: IFFALSE 6057
// if GetClass ( i ) = class_soldier then
5993: LD_VAR 0 2
5997: PPUSH
5998: CALL_OW 257
6002: PUSH
6003: LD_INT 1
6005: EQUAL
6006: IFFALSE 6043
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6008: LD_VAR 0 2
6012: PPUSH
6013: LD_INT 95
6015: PUSH
6016: LD_INT 209
6018: PUSH
6019: EMPTY
6020: LIST
6021: LIST
6022: PUSH
6023: LD_VAR 0 2
6027: PUSH
6028: LD_INT 2
6030: MOD
6031: PUSH
6032: LD_INT 1
6034: PLUS
6035: ARRAY
6036: PPUSH
6037: CALL_OW 120
6041: GO 6055
// ComEnterUnit ( i , ru_lab ) ;
6043: LD_VAR 0 2
6047: PPUSH
6048: LD_INT 83
6050: PPUSH
6051: CALL_OW 120
6055: GO 5990
6057: POP
6058: POP
// Say ( Kurin , D1-Kur-1 ) ;
6059: LD_EXP 38
6063: PPUSH
6064: LD_STRING D1-Kur-1
6066: PPUSH
6067: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6071: LD_EXP 34
6075: PPUSH
6076: LD_STRING D1-Bur-1
6078: PPUSH
6079: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6083: LD_INT 10
6085: PPUSH
6086: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6090: LD_EXP 38
6094: PPUSH
6095: LD_STRING D1-Kur-2
6097: PPUSH
6098: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6102: LD_EXP 39
6106: PPUSH
6107: CALL 53826 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6111: LD_EXP 39
6115: PPUSH
6116: LD_INT 115
6118: PPUSH
6119: LD_INT 108
6121: PPUSH
6122: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6126: LD_EXP 39
6130: PPUSH
6131: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6135: LD_EXP 34
6139: PPUSH
6140: LD_STRING D1-Bur-2
6142: PPUSH
6143: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6147: LD_EXP 38
6151: PPUSH
6152: LD_STRING D1-Kur-3
6154: PPUSH
6155: CALL_OW 88
// if Gnyevko then
6159: LD_EXP 35
6163: IFFALSE 6177
// Say ( Kurin , D1-Kur-3a ) ;
6165: LD_EXP 38
6169: PPUSH
6170: LD_STRING D1-Kur-3a
6172: PPUSH
6173: CALL_OW 88
// InGameOff ;
6177: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6181: LD_STRING M1
6183: PPUSH
6184: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6188: LD_INT 112
6190: PPUSH
6191: LD_INT 107
6193: PPUSH
6194: LD_INT 3
6196: PPUSH
6197: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6201: LD_INT 66
6203: PPUSH
6204: LD_INT 99
6206: PPUSH
6207: LD_INT 3
6209: PPUSH
6210: LD_INT 7
6212: NEG
6213: PPUSH
6214: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6218: LD_INT 66
6220: PPUSH
6221: LD_INT 99
6223: PPUSH
6224: LD_INT 3
6226: PPUSH
6227: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6231: LD_EXP 39
6235: PPUSH
6236: LD_INT 3
6238: PPUSH
6239: CALL_OW 235
// if Gnyevko then
6243: LD_EXP 35
6247: IFFALSE 6261
// SetSide ( Gnyevko , 3 ) ;
6249: LD_EXP 35
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 235
// SaveForQuickRestart ;
6261: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6265: LD_EXP 38
6269: PPUSH
6270: LD_INT 71
6272: PPUSH
6273: CALL_OW 120
// wait ( 0 0$2 ) ;
6277: LD_INT 70
6279: PPUSH
6280: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6284: LD_EXP 43
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PPUSH
6293: CALL 53826 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6297: LD_EXP 43
6301: PUSH
6302: LD_INT 2
6304: ARRAY
6305: PPUSH
6306: LD_INT 98
6308: PPUSH
6309: LD_INT 98
6311: PPUSH
6312: CALL_OW 428
6316: PPUSH
6317: CALL_OW 180
// wait ( 0 0$12 ) ;
6321: LD_INT 420
6323: PPUSH
6324: CALL_OW 67
// kurinDontWannaTalk := true ;
6328: LD_ADDR_EXP 5
6332: PUSH
6333: LD_INT 1
6335: ST_TO_ADDR
// end ;
6336: LD_VAR 0 1
6340: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6341: LD_EXP 5
6345: PUSH
6346: LD_INT 22
6348: PUSH
6349: LD_INT 3
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 91
6358: PUSH
6359: LD_INT 71
6361: PUSH
6362: LD_INT 8
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PPUSH
6374: CALL_OW 69
6378: AND
6379: IFFALSE 6566
6381: GO 6383
6383: DISABLE
6384: LD_INT 0
6386: PPUSH
6387: PPUSH
// begin enable ;
6388: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 3
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PUSH
6404: LD_INT 91
6406: PUSH
6407: LD_INT 71
6409: PUSH
6410: LD_INT 14
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PPUSH
6422: CALL_OW 69
6426: ST_TO_ADDR
// InGameOn ;
6427: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6431: LD_INT 116
6433: PPUSH
6434: LD_INT 107
6436: PPUSH
6437: LD_INT 3
6439: PPUSH
6440: LD_INT 3
6442: PPUSH
6443: CALL_OW 330
// ComExit ( Kurin ) ;
6447: LD_EXP 38
6451: PPUSH
6452: CALL 53826 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6456: LD_EXP 38
6460: PPUSH
6461: LD_VAR 0 2
6465: PUSH
6466: LD_INT 1
6468: ARRAY
6469: PPUSH
6470: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6474: LD_EXP 38
6478: PPUSH
6479: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6483: LD_VAR 0 2
6487: PPUSH
6488: LD_INT 87
6490: PPUSH
6491: LD_INT 99
6493: PPUSH
6494: CALL_OW 111
// if kirovHasTank then
6498: LD_EXP 6
6502: IFFALSE 6518
// Say ( Kurin , D1a-Kur-1a ) else
6504: LD_EXP 38
6508: PPUSH
6509: LD_STRING D1a-Kur-1a
6511: PPUSH
6512: CALL_OW 88
6516: GO 6530
// Say ( Kurin , D1a-Kur-1 ) ;
6518: LD_EXP 38
6522: PPUSH
6523: LD_STRING D1a-Kur-1
6525: PPUSH
6526: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6530: LD_EXP 38
6534: PPUSH
6535: LD_INT 71
6537: PPUSH
6538: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6542: LD_INT 116
6544: PPUSH
6545: LD_INT 107
6547: PPUSH
6548: LD_INT 3
6550: PPUSH
6551: CALL_OW 331
// wait ( 0 0$3 ) ;
6555: LD_INT 105
6557: PPUSH
6558: CALL_OW 67
// InGameOff ;
6562: CALL_OW 9
// end ;
6566: PPOPN 2
6568: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6569: LD_INT 22
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: LD_INT 95
6581: PUSH
6582: LD_INT 4
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PPUSH
6593: CALL_OW 69
6597: PUSH
6598: LD_EXP 7
6602: AND
6603: IFFALSE 6942
6605: GO 6607
6607: DISABLE
6608: LD_INT 0
6610: PPUSH
6611: PPUSH
6612: PPUSH
6613: PPUSH
6614: PPUSH
// begin enable ;
6615: ENABLE
// blockNorth := false ;
6616: LD_ADDR_EXP 7
6620: PUSH
6621: LD_INT 0
6623: ST_TO_ADDR
// InGameOn ;
6624: CALL_OW 8
// DialogueOn ;
6628: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 3
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 95
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PPUSH
6661: CALL_OW 69
6665: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6666: LD_EXP 39
6670: PUSH
6671: LD_VAR 0 2
6675: IN
6676: PUSH
6677: LD_EXP 39
6681: PPUSH
6682: CALL_OW 302
6686: AND
6687: IFFALSE 6703
// Say ( Kovalyuk , D1b-Kov-1 ) else
6689: LD_EXP 39
6693: PPUSH
6694: LD_STRING D1b-Kov-1
6696: PPUSH
6697: CALL_OW 88
6701: GO 6738
// if Burlak in tmp and IsOk ( Burlak ) then
6703: LD_EXP 34
6707: PUSH
6708: LD_VAR 0 2
6712: IN
6713: PUSH
6714: LD_EXP 34
6718: PPUSH
6719: CALL_OW 302
6723: AND
6724: IFFALSE 6738
// Say ( Burlak , D1b-Bur-1 ) ;
6726: LD_EXP 34
6730: PPUSH
6731: LD_STRING D1b-Bur-1
6733: PPUSH
6734: CALL_OW 88
// DialogueOff ;
6738: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6742: LD_INT 22
6744: PUSH
6745: LD_INT 3
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: LD_INT 3
6754: PUSH
6755: LD_INT 21
6757: PUSH
6758: LD_INT 3
6760: PUSH
6761: EMPTY
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: PPUSH
6778: CALL_OW 141
// for i in tmp do
6782: LD_ADDR_VAR 0 1
6786: PUSH
6787: LD_VAR 0 2
6791: PUSH
6792: FOR_IN
6793: IFFALSE 6921
// begin d := rand ( 2 , 3 ) ;
6795: LD_ADDR_VAR 0 5
6799: PUSH
6800: LD_INT 2
6802: PPUSH
6803: LD_INT 3
6805: PPUSH
6806: CALL_OW 12
6810: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_VAR 0 1
6820: PPUSH
6821: CALL_OW 250
6825: PPUSH
6826: LD_VAR 0 5
6830: PPUSH
6831: LD_INT 6
6833: PPUSH
6834: CALL_OW 272
6838: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6839: LD_ADDR_VAR 0 4
6843: PUSH
6844: LD_VAR 0 1
6848: PPUSH
6849: CALL_OW 251
6853: PPUSH
6854: LD_VAR 0 5
6858: PPUSH
6859: LD_INT 6
6861: PPUSH
6862: CALL_OW 273
6866: ST_TO_ADDR
// if ValidHex ( x , y ) then
6867: LD_VAR 0 3
6871: PPUSH
6872: LD_VAR 0 4
6876: PPUSH
6877: CALL_OW 488
6881: IFFALSE 6904
// ComMoveXY ( i , x , y ) else
6883: LD_VAR 0 1
6887: PPUSH
6888: LD_VAR 0 3
6892: PPUSH
6893: LD_VAR 0 4
6897: PPUSH
6898: CALL_OW 111
6902: GO 6919
// ComMoveXY ( i , 79 , 85 ) ;
6904: LD_VAR 0 1
6908: PPUSH
6909: LD_INT 79
6911: PPUSH
6912: LD_INT 85
6914: PPUSH
6915: CALL_OW 111
// end ;
6919: GO 6792
6921: POP
6922: POP
// wait ( 0 0$5 ) ;
6923: LD_INT 175
6925: PPUSH
6926: CALL_OW 67
// InGameOff ;
6930: CALL_OW 9
// blockNorth := true ;
6934: LD_ADDR_EXP 7
6938: PUSH
6939: LD_INT 1
6941: ST_TO_ADDR
// end ;
6942: PPOPN 5
6944: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
6945: LD_EXP 44
6949: PPUSH
6950: LD_INT 101
6952: PUSH
6953: LD_INT 3
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PPUSH
6960: CALL_OW 72
6964: PUSH
6965: LD_EXP 4
6969: NOT
6970: AND
6971: IFFALSE 7373
6973: GO 6975
6975: DISABLE
6976: LD_INT 0
6978: PPUSH
6979: PPUSH
6980: PPUSH
6981: PPUSH
6982: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
6983: LD_ADDR_VAR 0 5
6987: PUSH
6988: LD_EXP 44
6992: PPUSH
6993: LD_EXP 34
6997: PPUSH
6998: CALL_OW 74
7002: ST_TO_ADDR
// InGameOn ;
7003: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7007: LD_VAR 0 5
7011: PPUSH
7012: CALL_OW 250
7016: PPUSH
7017: LD_VAR 0 5
7021: PPUSH
7022: CALL_OW 251
7026: PPUSH
7027: LD_INT 3
7029: PPUSH
7030: LD_INT 6
7032: PPUSH
7033: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7037: LD_VAR 0 5
7041: PPUSH
7042: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7046: LD_VAR 0 5
7050: PPUSH
7051: LD_EXP 34
7055: PPUSH
7056: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7060: LD_VAR 0 5
7064: PPUSH
7065: LD_STRING D2-RSol1-1
7067: PPUSH
7068: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 250
7086: PPUSH
7087: LD_VAR 0 5
7091: PPUSH
7092: CALL_OW 254
7096: PPUSH
7097: LD_INT 3
7099: PPUSH
7100: CALL_OW 272
7104: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7105: LD_ADDR_VAR 0 4
7109: PUSH
7110: LD_VAR 0 5
7114: PPUSH
7115: CALL_OW 251
7119: PPUSH
7120: LD_VAR 0 5
7124: PPUSH
7125: CALL_OW 254
7129: PPUSH
7130: LD_INT 3
7132: PPUSH
7133: CALL_OW 273
7137: ST_TO_ADDR
// if ValidHex ( x , y ) then
7138: LD_VAR 0 3
7142: PPUSH
7143: LD_VAR 0 4
7147: PPUSH
7148: CALL_OW 488
7152: IFFALSE 7184
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7154: LD_EXP 35
7158: PUSH
7159: LD_EXP 39
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: LD_VAR 0 3
7172: PPUSH
7173: LD_VAR 0 4
7177: PPUSH
7178: CALL_OW 111
7182: GO 7207
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7184: LD_EXP 35
7188: PUSH
7189: LD_EXP 39
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PPUSH
7198: LD_VAR 0 5
7202: PPUSH
7203: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7207: LD_EXP 34
7211: PPUSH
7212: LD_VAR 0 5
7216: PPUSH
7217: CALL_OW 112
// p := 0 ;
7221: LD_ADDR_VAR 0 2
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7229: LD_INT 35
7231: PPUSH
7232: CALL_OW 67
// p := p + 1 ;
7236: LD_ADDR_VAR 0 2
7240: PUSH
7241: LD_VAR 0 2
7245: PUSH
7246: LD_INT 1
7248: PLUS
7249: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7250: LD_VAR 0 2
7254: PUSH
7255: LD_INT 10
7257: GREATER
7258: PUSH
7259: LD_EXP 34
7263: PPUSH
7264: LD_VAR 0 5
7268: PPUSH
7269: CALL_OW 296
7273: PUSH
7274: LD_INT 6
7276: LESS
7277: OR
7278: IFFALSE 7229
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7280: LD_EXP 34
7284: PUSH
7285: LD_EXP 35
7289: PUSH
7290: LD_EXP 39
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: LD_VAR 0 5
7304: PPUSH
7305: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7309: LD_EXP 34
7313: PPUSH
7314: LD_STRING D2-Bur-1
7316: PPUSH
7317: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7321: LD_VAR 0 5
7325: PPUSH
7326: LD_STRING D2-RSol1-2
7328: PPUSH
7329: CALL_OW 88
// ComHold ( nearestGuard ) ;
7333: LD_VAR 0 5
7337: PPUSH
7338: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7342: LD_VAR 0 5
7346: PPUSH
7347: CALL_OW 250
7351: PPUSH
7352: LD_VAR 0 5
7356: PPUSH
7357: CALL_OW 251
7361: PPUSH
7362: LD_INT 3
7364: PPUSH
7365: CALL_OW 331
// InGameOff ;
7369: CALL_OW 9
// end ;
7373: PPOPN 5
7375: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7376: LD_EXP 34
7380: PPUSH
7381: LD_EXP 40
7385: PPUSH
7386: CALL_OW 296
7390: PUSH
7391: LD_INT 10
7393: LESS
7394: PUSH
7395: LD_INT 3
7397: PPUSH
7398: LD_EXP 40
7402: PPUSH
7403: CALL_OW 292
7407: AND
7408: IFFALSE 7764
7410: GO 7412
7412: DISABLE
7413: LD_INT 0
7415: PPUSH
// begin InGameOn ;
7416: CALL_OW 8
// beriaVisited := true ;
7420: LD_ADDR_EXP 4
7424: PUSH
7425: LD_INT 1
7427: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7428: LD_EXP 34
7432: PPUSH
7433: LD_EXP 40
7437: PPUSH
7438: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7442: LD_EXP 35
7446: PUSH
7447: LD_EXP 39
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: LD_INT 68
7458: PPUSH
7459: LD_INT 99
7461: PPUSH
7462: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7466: LD_EXP 40
7470: PPUSH
7471: LD_EXP 34
7475: PPUSH
7476: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7480: LD_EXP 40
7484: PPUSH
7485: LD_STRING D2-Pla-2
7487: PPUSH
7488: CALL_OW 88
// p := 0 ;
7492: LD_ADDR_VAR 0 1
7496: PUSH
7497: LD_INT 0
7499: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7500: LD_INT 35
7502: PPUSH
7503: CALL_OW 67
// p := p + 1 ;
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_INT 1
7519: PLUS
7520: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7521: LD_EXP 34
7525: PPUSH
7526: LD_EXP 40
7530: PPUSH
7531: CALL_OW 296
7535: PUSH
7536: LD_INT 6
7538: LESS
7539: PUSH
7540: LD_VAR 0 1
7544: PUSH
7545: LD_INT 8
7547: GREATER
7548: OR
7549: IFFALSE 7500
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7551: LD_EXP 34
7555: PUSH
7556: LD_EXP 35
7560: PUSH
7561: LD_EXP 39
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: LD_EXP 40
7575: PPUSH
7576: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7580: LD_EXP 34
7584: PPUSH
7585: LD_STRING D2-Bur-2
7587: PPUSH
7588: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7592: LD_INT 6
7594: PPUSH
7595: LD_INT 3
7597: PPUSH
7598: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7602: LD_EXP 40
7606: PPUSH
7607: LD_STRING D2-Pla-3
7609: PPUSH
7610: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7614: LD_EXP 34
7618: PPUSH
7619: LD_STRING D2-Bur-3
7621: PPUSH
7622: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7626: LD_EXP 40
7630: PPUSH
7631: LD_STRING D2-Pla-4
7633: PPUSH
7634: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7638: LD_EXP 34
7642: PPUSH
7643: LD_STRING D2-Bur-4
7645: PPUSH
7646: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7650: LD_EXP 40
7654: PPUSH
7655: LD_STRING D2-Pla-5
7657: PPUSH
7658: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7662: LD_INT 1
7664: PUSH
7665: LD_INT 2
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: PPUSH
7680: CALL 7767 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7684: LD_EXP 40
7688: PPUSH
7689: LD_STRING D3-Pla-1
7691: PPUSH
7692: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7696: LD_EXP 34
7700: PPUSH
7701: LD_STRING D3-Bur-1
7703: PPUSH
7704: CALL_OW 88
// InGameOff ;
7708: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7712: LD_STRING M2a
7714: PPUSH
7715: CALL_OW 337
// SetSide ( beria , 3 ) ;
7719: LD_INT 106
7721: PPUSH
7722: LD_INT 3
7724: PPUSH
7725: CALL_OW 235
// if not Gnyevko then
7729: LD_EXP 35
7733: NOT
7734: IFFALSE 7755
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7736: LD_INT 106
7738: PPUSH
7739: CALL_OW 313
7743: PUSH
7744: LD_INT 1
7746: ARRAY
7747: PPUSH
7748: LD_INT 3
7750: PPUSH
7751: CALL_OW 235
// ComFree ( Platonov ) ;
7755: LD_EXP 40
7759: PPUSH
7760: CALL_OW 139
// end ;
7764: PPOPN 1
7766: END
// function AskPlatonov ( questions ) ; var q ; begin
7767: LD_INT 0
7769: PPUSH
7770: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7771: LD_ADDR_VAR 0 3
7775: PUSH
7776: LD_STRING QMoreInfo
7778: PPUSH
7779: LD_VAR 0 1
7783: PPUSH
7784: CALL_OW 98
7788: ST_TO_ADDR
// case q of 1 :
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 1
7796: DOUBLE
7797: EQUAL
7798: IFTRUE 7802
7800: GO 7829
7802: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7803: LD_EXP 34
7807: PPUSH
7808: LD_STRING D2a-Bur-1
7810: PPUSH
7811: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7815: LD_EXP 40
7819: PPUSH
7820: LD_STRING D2a-Pla-1
7822: PPUSH
7823: CALL_OW 88
// end ; 2 :
7827: GO 7900
7829: LD_INT 2
7831: DOUBLE
7832: EQUAL
7833: IFTRUE 7837
7835: GO 7864
7837: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7838: LD_EXP 34
7842: PPUSH
7843: LD_STRING D2b-Bur-1
7845: PPUSH
7846: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7850: LD_EXP 40
7854: PPUSH
7855: LD_STRING D2b-Pla-1
7857: PPUSH
7858: CALL_OW 88
// end ; 3 :
7862: GO 7900
7864: LD_INT 3
7866: DOUBLE
7867: EQUAL
7868: IFTRUE 7872
7870: GO 7899
7872: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7873: LD_EXP 34
7877: PPUSH
7878: LD_STRING D2c-Bur-1
7880: PPUSH
7881: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7885: LD_EXP 40
7889: PPUSH
7890: LD_STRING D2c-Pla-1
7892: PPUSH
7893: CALL_OW 88
// end ; end ;
7897: GO 7900
7899: POP
// if q < 4 and questions > 2 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 4
7907: LESS
7908: PUSH
7909: LD_VAR 0 1
7913: PUSH
7914: LD_INT 2
7916: GREATER
7917: AND
7918: IFFALSE 7935
// AskPlatonov ( questions diff q ) ;
7920: LD_VAR 0 1
7924: PUSH
7925: LD_VAR 0 3
7929: DIFF
7930: PPUSH
7931: CALL 7767 0 1
// end ;
7935: LD_VAR 0 2
7939: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7940: LD_INT 0
7942: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7943: LD_EXP 40
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_VAR 0 2
7957: PPUSH
7958: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7962: LD_INT 35
7964: PPUSH
7965: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
7969: LD_EXP 40
7973: PPUSH
7974: LD_VAR 0 1
7978: PPUSH
7979: LD_VAR 0 2
7983: PPUSH
7984: CALL_OW 297
7988: PUSH
7989: LD_INT 5
7991: LESS
7992: PUSH
7993: LD_VAR 0 1
7997: PPUSH
7998: LD_VAR 0 2
8002: PPUSH
8003: CALL_OW 283
8007: PUSH
8008: LD_INT 1
8010: EQUAL
8011: AND
8012: IFFALSE 7962
// ComStop ( Platonov ) ;
8014: LD_EXP 40
8018: PPUSH
8019: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8023: LD_EXP 40
8027: PPUSH
8028: LD_STRING D4-Pla-1
8030: PPUSH
8031: CALL_OW 88
// end ;
8035: LD_VAR 0 3
8039: RET
// every 0 0$2 trigger hasLab do
8040: LD_EXP 9
8044: IFFALSE 8108
8046: GO 8048
8048: DISABLE
// begin DialogueOn ;
8049: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8053: LD_EXP 34
8057: PPUSH
8058: LD_STRING D5a-Bur-1
8060: PPUSH
8061: CALL_OW 88
// if hasWorkshop then
8065: LD_EXP 10
8069: IFFALSE 8085
// Say ( Platonov , D5a-Pla-1 ) else
8071: LD_EXP 40
8075: PPUSH
8076: LD_STRING D5a-Pla-1
8078: PPUSH
8079: CALL_OW 88
8083: GO 8097
// Say ( Platonov , D5a-Pla-1a ) ;
8085: LD_EXP 40
8089: PPUSH
8090: LD_STRING D5a-Pla-1a
8092: PPUSH
8093: CALL_OW 88
// DialogueOff ;
8097: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8101: LD_STRING M2b
8103: PPUSH
8104: CALL_OW 337
// end ;
8108: END
// every 0 0$2 trigger hasWorkshop do
8109: LD_EXP 10
8113: IFFALSE 8177
8115: GO 8117
8117: DISABLE
// begin DialogueOn ;
8118: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8122: LD_EXP 34
8126: PPUSH
8127: LD_STRING D5b-Bur-1
8129: PPUSH
8130: CALL_OW 88
// if hasLab then
8134: LD_EXP 9
8138: IFFALSE 8154
// Say ( Platonov , D5b-Pla-1 ) else
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5b-Pla-1
8147: PPUSH
8148: CALL_OW 88
8152: GO 8166
// Say ( Platonov , D5b-Pla-1a ) ;
8154: LD_EXP 40
8158: PPUSH
8159: LD_STRING D5b-Pla-1a
8161: PPUSH
8162: CALL_OW 88
// DialogueOff ;
8166: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8170: LD_STRING M2c
8172: PPUSH
8173: CALL_OW 337
// end ;
8177: END
// every 0 0$2 trigger hasLab and hasWorkshop do
8178: LD_EXP 9
8182: PUSH
8183: LD_EXP 10
8187: AND
8188: IFFALSE 8289
8190: GO 8192
8192: DISABLE
// begin wait ( 0 0$2 ) ;
8193: LD_INT 70
8195: PPUSH
8196: CALL_OW 67
// DialogueOn ;
8200: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8204: LD_INT 47
8206: PPUSH
8207: LD_INT 3
8209: PPUSH
8210: CALL_OW 321
8214: PUSH
8215: LD_INT 2
8217: EQUAL
8218: IFFALSE 8246
// begin Say ( Burlak , D7b-Bur-1 ) ;
8220: LD_EXP 34
8224: PPUSH
8225: LD_STRING D7b-Bur-1
8227: PPUSH
8228: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8232: LD_EXP 40
8236: PPUSH
8237: LD_STRING D7b-Pla-1
8239: PPUSH
8240: CALL_OW 88
// end else
8244: GO 8270
// begin Say ( Burlak , D7a-Bur-1 ) ;
8246: LD_EXP 34
8250: PPUSH
8251: LD_STRING D7a-Bur-1
8253: PPUSH
8254: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8258: LD_EXP 40
8262: PPUSH
8263: LD_STRING D7a-Pla-1
8265: PPUSH
8266: CALL_OW 88
// end ; DialogueOff ;
8270: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8274: LD_STRING M2
8276: PPUSH
8277: CALL_OW 337
// hasToBuildTank := true ;
8281: LD_ADDR_EXP 11
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// end ;
8289: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8290: LD_EXP 4
8294: PUSH
8295: LD_EXP 9
8299: NOT
8300: PUSH
8301: LD_EXP 10
8305: NOT
8306: OR
8307: PUSH
8308: LD_EXP 11
8312: OR
8313: AND
8314: PUSH
8315: LD_INT 22
8317: PUSH
8318: LD_INT 3
8320: PUSH
8321: EMPTY
8322: LIST
8323: LIST
8324: PUSH
8325: LD_INT 3
8327: PUSH
8328: LD_INT 91
8330: PUSH
8331: LD_INT 106
8333: PUSH
8334: LD_INT 32
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: LIST
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: EMPTY
8347: LIST
8348: LIST
8349: PPUSH
8350: CALL_OW 69
8354: AND
8355: IFFALSE 8464
8357: GO 8359
8359: DISABLE
8360: LD_INT 0
8362: PPUSH
// begin enable ;
8363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8364: LD_ADDR_VAR 0 1
8368: PUSH
8369: LD_INT 22
8371: PUSH
8372: LD_INT 3
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: LD_INT 91
8384: PUSH
8385: LD_INT 106
8387: PUSH
8388: LD_INT 32
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PUSH
8396: EMPTY
8397: LIST
8398: LIST
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: PPUSH
8404: CALL_OW 69
8408: ST_TO_ADDR
// InGameOn ;
8409: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8413: LD_VAR 0 1
8417: PUSH
8418: LD_INT 1
8420: ARRAY
8421: PPUSH
8422: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8426: LD_VAR 0 1
8430: PPUSH
8431: LD_INT 66
8433: PPUSH
8434: LD_INT 99
8436: PPUSH
8437: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8441: LD_EXP 40
8445: PPUSH
8446: LD_STRING D8-Pla-1
8448: PPUSH
8449: CALL_OW 88
// wait ( 0 0$3 ) ;
8453: LD_INT 105
8455: PPUSH
8456: CALL_OW 67
// InGameOff ;
8460: CALL_OW 9
// end ;
8464: PPOPN 1
8466: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8467: LD_INT 21
8469: PPUSH
8470: LD_INT 22
8472: PUSH
8473: LD_INT 3
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: LD_INT 23
8482: PUSH
8483: LD_INT 3
8485: PUSH
8486: EMPTY
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 2
8492: PUSH
8493: LD_INT 30
8495: PUSH
8496: LD_INT 4
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: LD_INT 30
8505: PUSH
8506: LD_INT 31
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: PUSH
8528: LD_EXP 31
8532: NOT
8533: AND
8534: IFFALSE 8745
8536: GO 8538
8538: DISABLE
8539: LD_INT 0
8541: PPUSH
// begin enable ;
8542: ENABLE
// InGameOn ;
8543: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 21
8554: PPUSH
8555: LD_INT 22
8557: PUSH
8558: LD_INT 3
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PUSH
8565: LD_INT 23
8567: PUSH
8568: LD_INT 3
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: PUSH
8575: LD_INT 2
8577: PUSH
8578: LD_INT 30
8580: PUSH
8581: LD_INT 4
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 30
8590: PUSH
8591: LD_INT 31
8593: PUSH
8594: EMPTY
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 70
8612: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8613: LD_EXP 40
8617: PPUSH
8618: LD_VAR 0 1
8622: PUSH
8623: LD_INT 1
8625: ARRAY
8626: PPUSH
8627: CALL_OW 112
// wait ( 0 0$2 ) ;
8631: LD_INT 70
8633: PPUSH
8634: CALL_OW 67
// ComHold ( Platonov ) ;
8638: LD_EXP 40
8642: PPUSH
8643: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8647: LD_EXP 40
8651: PPUSH
8652: LD_STRING D6-Pla-1
8654: PPUSH
8655: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8659: LD_EXP 34
8663: PPUSH
8664: LD_STRING D6-Bur-1
8666: PPUSH
8667: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8671: LD_VAR 0 1
8675: PUSH
8676: LD_INT 1
8678: ARRAY
8679: PPUSH
8680: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8684: LD_VAR 0 1
8688: PUSH
8689: LD_INT 1
8691: ARRAY
8692: PPUSH
8693: CALL_OW 266
8697: PUSH
8698: LD_INT 31
8700: EQUAL
8701: IFFALSE 8723
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8703: LD_INT 106
8705: PPUSH
8706: CALL_OW 274
8710: PPUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_INT 10
8716: PPUSH
8717: CALL_OW 276
8721: GO 8741
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8723: LD_INT 106
8725: PPUSH
8726: CALL_OW 274
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: LD_INT 30
8736: PPUSH
8737: CALL_OW 276
// InGameOff ;
8741: CALL_OW 9
// end ;
8745: PPOPN 1
8747: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8748: LD_EXP 4
8752: PUSH
8753: LD_INT 21
8755: PPUSH
8756: LD_INT 22
8758: PUSH
8759: LD_INT 3
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PUSH
8766: LD_INT 23
8768: PUSH
8769: LD_INT 3
8771: PUSH
8772: EMPTY
8773: LIST
8774: LIST
8775: PUSH
8776: LD_INT 21
8778: PUSH
8779: LD_INT 3
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: LIST
8790: PPUSH
8791: CALL_OW 71
8795: AND
8796: IFFALSE 9053
8798: GO 8800
8800: DISABLE
8801: LD_INT 0
8803: PPUSH
8804: PPUSH
// begin enable ;
8805: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8806: LD_ADDR_VAR 0 1
8810: PUSH
8811: LD_INT 21
8813: PPUSH
8814: LD_INT 22
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 23
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 21
8836: PUSH
8837: LD_INT 3
8839: PUSH
8840: EMPTY
8841: LIST
8842: LIST
8843: PUSH
8844: EMPTY
8845: LIST
8846: LIST
8847: LIST
8848: PPUSH
8849: CALL_OW 71
8853: PUSH
8854: LD_INT 1
8856: ARRAY
8857: ST_TO_ADDR
// InGameOn ;
8858: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8862: LD_EXP 40
8866: PPUSH
8867: LD_VAR 0 1
8871: PPUSH
8872: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8876: LD_EXP 40
8880: PPUSH
8881: LD_STRING DPlatAngry
8883: PPUSH
8884: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8888: LD_EXP 34
8892: PPUSH
8893: LD_STRING D6-Bur-1
8895: PPUSH
8896: CALL_OW 88
// RemoveUnit ( tmp ) ;
8900: LD_VAR 0 1
8904: PPUSH
8905: CALL_OW 64
// InGameOff ;
8909: CALL_OW 9
// amount := 0 ;
8913: LD_ADDR_VAR 0 2
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8921: LD_VAR 0 1
8925: PPUSH
8926: CALL_OW 266
8930: PUSH
8931: LD_INT 31
8933: DOUBLE
8934: EQUAL
8935: IFTRUE 8939
8937: GO 8950
8939: POP
// amount := 10 ; b_lab :
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_INT 10
8947: ST_TO_ADDR
8948: GO 9027
8950: LD_INT 6
8952: DOUBLE
8953: EQUAL
8954: IFTRUE 8958
8956: GO 8969
8958: POP
// amount := 20 ; b_armoury :
8959: LD_ADDR_VAR 0 2
8963: PUSH
8964: LD_INT 20
8966: ST_TO_ADDR
8967: GO 9027
8969: LD_INT 4
8971: DOUBLE
8972: EQUAL
8973: IFTRUE 8977
8975: GO 8988
8977: POP
// amount := 30 ; b_workshop :
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_INT 30
8985: ST_TO_ADDR
8986: GO 9027
8988: LD_INT 2
8990: DOUBLE
8991: EQUAL
8992: IFTRUE 8996
8994: GO 9007
8996: POP
// amount := 40 ; b_oil_power :
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_INT 40
9004: ST_TO_ADDR
9005: GO 9027
9007: LD_INT 26
9009: DOUBLE
9010: EQUAL
9011: IFTRUE 9015
9013: GO 9026
9015: POP
// amount := 20 ; end ;
9016: LD_ADDR_VAR 0 2
9020: PUSH
9021: LD_INT 20
9023: ST_TO_ADDR
9024: GO 9027
9026: POP
// if amount then
9027: LD_VAR 0 2
9031: IFFALSE 9053
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9033: LD_INT 106
9035: PPUSH
9036: CALL_OW 274
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 2
9048: PPUSH
9049: CALL_OW 276
// end ;
9053: PPOPN 2
9055: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9056: LD_INT 22
9058: PUSH
9059: LD_INT 3
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: PUSH
9066: LD_INT 92
9068: PUSH
9069: LD_INT 112
9071: PUSH
9072: LD_INT 155
9074: PUSH
9075: LD_INT 8
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: PUSH
9093: LD_INT 2
9095: LESS
9096: PUSH
9097: LD_EXP 34
9101: PPUSH
9102: LD_INT 112
9104: PPUSH
9105: LD_INT 155
9107: PPUSH
9108: CALL_OW 297
9112: PUSH
9113: LD_INT 8
9115: LESS
9116: AND
9117: IFFALSE 9351
9119: GO 9121
9121: DISABLE
9122: LD_INT 0
9124: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9125: LD_INT 112
9127: PPUSH
9128: LD_INT 155
9130: PPUSH
9131: LD_INT 3
9133: PPUSH
9134: LD_INT 4
9136: NEG
9137: PPUSH
9138: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9142: LD_INT 1
9144: PPUSH
9145: LD_EXP 34
9149: PPUSH
9150: CALL_OW 471
// uc_side := 1 ;
9154: LD_ADDR_OWVAR 20
9158: PUSH
9159: LD_INT 1
9161: ST_TO_ADDR
// uc_nation := 1 ;
9162: LD_ADDR_OWVAR 21
9166: PUSH
9167: LD_INT 1
9169: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9170: LD_ADDR_VAR 0 1
9174: PUSH
9175: LD_STRING Dickens
9177: PPUSH
9178: CALL_OW 25
9182: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9183: LD_VAR 0 1
9187: PPUSH
9188: LD_INT 112
9190: PPUSH
9191: LD_INT 155
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 48
// wait ( 0 0$2 ) ;
9201: LD_INT 70
9203: PPUSH
9204: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9208: LD_VAR 0 1
9212: PPUSH
9213: LD_EXP 34
9217: PPUSH
9218: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9222: LD_VAR 0 1
9226: PPUSH
9227: LD_STRING DUsSpawnSol
9229: PPUSH
9230: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9234: LD_INT 1
9236: PPUSH
9237: LD_EXP 34
9241: PPUSH
9242: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9246: LD_INT 112
9248: PPUSH
9249: LD_INT 155
9251: PPUSH
9252: LD_INT 3
9254: PPUSH
9255: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9259: LD_VAR 0 1
9263: PPUSH
9264: LD_INT 77
9266: PPUSH
9267: LD_INT 152
9269: PPUSH
9270: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9274: LD_INT 35
9276: PPUSH
9277: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 302
9290: NOT
9291: PUSH
9292: LD_VAR 0 1
9296: PPUSH
9297: LD_INT 77
9299: PPUSH
9300: LD_INT 152
9302: PPUSH
9303: CALL_OW 307
9307: OR
9308: IFFALSE 9274
// if not IsOk ( Dickens ) then
9310: LD_VAR 0 1
9314: PPUSH
9315: CALL_OW 302
9319: NOT
9320: IFFALSE 9324
// exit ;
9322: GO 9351
// RemoveUnit ( Dickens ) ;
9324: LD_VAR 0 1
9328: PPUSH
9329: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9333: LD_VAR 0 1
9337: PPUSH
9338: LD_EXP 3
9342: PUSH
9343: LD_STRING Dickens
9345: STR
9346: PPUSH
9347: CALL_OW 38
// end ;
9351: PPOPN 1
9353: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9354: LD_EXP 34
9358: PPUSH
9359: CALL_OW 256
9363: PUSH
9364: LD_INT 600
9366: LESS
9367: IFFALSE 9384
9369: GO 9371
9371: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9372: LD_EXP 34
9376: PPUSH
9377: LD_STRING DUsSpawnBur
9379: PPUSH
9380: CALL_OW 88
9384: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9385: LD_EXP 12
9389: IFFALSE 10355
9391: GO 9393
9393: DISABLE
9394: LD_INT 0
9396: PPUSH
9397: PPUSH
9398: PPUSH
9399: PPUSH
// begin hasToBuildTank := false ;
9400: LD_ADDR_EXP 11
9404: PUSH
9405: LD_INT 0
9407: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9408: LD_ADDR_EXP 5
9412: PUSH
9413: LD_INT 0
9415: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9416: LD_ADDR_VAR 0 2
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: PUSH
9431: LD_INT 21
9433: PUSH
9434: LD_INT 2
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PPUSH
9445: CALL_OW 69
9449: ST_TO_ADDR
// InGameOn ;
9450: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9454: LD_VAR 0 2
9458: PUSH
9459: LD_INT 1
9461: ARRAY
9462: PPUSH
9463: CALL_OW 85
// wait ( 0 0$1 ) ;
9467: LD_INT 35
9469: PPUSH
9470: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9474: LD_EXP 34
9478: PPUSH
9479: LD_STRING D9-Bur-1
9481: PPUSH
9482: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9486: LD_EXP 40
9490: PPUSH
9491: LD_VAR 0 2
9495: PUSH
9496: LD_INT 1
9498: ARRAY
9499: PPUSH
9500: CALL_OW 112
// p := 0 ;
9504: LD_ADDR_VAR 0 3
9508: PUSH
9509: LD_INT 0
9511: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9512: LD_INT 35
9514: PPUSH
9515: CALL_OW 67
// p := p + 1 ;
9519: LD_ADDR_VAR 0 3
9523: PUSH
9524: LD_VAR 0 3
9528: PUSH
9529: LD_INT 1
9531: PLUS
9532: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9533: LD_EXP 40
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_INT 1
9545: ARRAY
9546: PPUSH
9547: CALL_OW 296
9551: PUSH
9552: LD_INT 8
9554: LESS
9555: PUSH
9556: LD_VAR 0 3
9560: PUSH
9561: LD_INT 8
9563: GREATER
9564: OR
9565: IFFALSE 9512
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9567: LD_EXP 40
9571: PPUSH
9572: LD_VAR 0 2
9576: PUSH
9577: LD_INT 1
9579: ARRAY
9580: PPUSH
9581: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9585: LD_EXP 40
9589: PPUSH
9590: LD_STRING D9-Pla-1
9592: PPUSH
9593: CALL_OW 88
// ComFree ( Platonov ) ;
9597: LD_EXP 40
9601: PPUSH
9602: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9606: LD_EXP 40
9610: PPUSH
9611: LD_INT 64
9613: PPUSH
9614: LD_INT 98
9616: PPUSH
9617: CALL_OW 171
// InGameOff ;
9621: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9625: LD_STRING M3
9627: PPUSH
9628: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9632: LD_EXP 41
9636: PPUSH
9637: LD_INT 70
9639: PPUSH
9640: LD_INT 108
9642: PPUSH
9643: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9647: LD_EXP 41
9651: PPUSH
9652: CALL_OW 200
// wait ( 1 ) ;
9656: LD_INT 1
9658: PPUSH
9659: CALL_OW 67
// ComExit ( Belkov ) ;
9663: LD_EXP 36
9667: PPUSH
9668: CALL 53826 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9672: LD_EXP 36
9676: PPUSH
9677: LD_INT 113
9679: PPUSH
9680: LD_INT 104
9682: PPUSH
9683: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9687: LD_EXP 36
9691: PPUSH
9692: LD_INT 116
9694: PPUSH
9695: LD_INT 108
9697: PPUSH
9698: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9702: LD_INT 35
9704: PPUSH
9705: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9709: LD_INT 22
9711: PUSH
9712: LD_INT 3
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 21
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PUSH
9729: LD_INT 91
9731: PUSH
9732: LD_INT 71
9734: PUSH
9735: LD_INT 8
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: PPUSH
9748: CALL_OW 69
9752: IFFALSE 9702
// InGameOn ;
9754: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9758: LD_ADDR_VAR 0 2
9762: PUSH
9763: LD_INT 22
9765: PUSH
9766: LD_INT 3
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 21
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: EMPTY
9780: LIST
9781: LIST
9782: PUSH
9783: LD_INT 91
9785: PUSH
9786: LD_INT 71
9788: PUSH
9789: LD_INT 8
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: LIST
9801: PPUSH
9802: CALL_OW 69
9806: ST_TO_ADDR
// if belkovTeam < 3 then
9807: LD_EXP 45
9811: PUSH
9812: LD_INT 3
9814: LESS
9815: IFFALSE 9900
// begin for i := belkovTeam to 3 do
9817: LD_ADDR_VAR 0 1
9821: PUSH
9822: DOUBLE
9823: LD_EXP 45
9827: DEC
9828: ST_TO_ADDR
9829: LD_INT 3
9831: PUSH
9832: FOR_TO
9833: IFFALSE 9898
// begin un := kirovBaseSquad [ 1 ] ;
9835: LD_ADDR_VAR 0 4
9839: PUSH
9840: LD_EXP 43
9844: PUSH
9845: LD_INT 1
9847: ARRAY
9848: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9849: LD_ADDR_EXP 43
9853: PUSH
9854: LD_EXP 43
9858: PPUSH
9859: LD_INT 1
9861: PPUSH
9862: CALL_OW 3
9866: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9867: LD_ADDR_EXP 45
9871: PUSH
9872: LD_EXP 45
9876: PPUSH
9877: LD_EXP 45
9881: PUSH
9882: LD_INT 1
9884: PLUS
9885: PPUSH
9886: LD_VAR 0 4
9890: PPUSH
9891: CALL_OW 1
9895: ST_TO_ADDR
// end ;
9896: GO 9832
9898: POP
9899: POP
// end ; ComExit ( Kurin ) ;
9900: LD_EXP 38
9904: PPUSH
9905: CALL 53826 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
9909: LD_EXP 38
9913: PPUSH
9914: LD_VAR 0 2
9918: PUSH
9919: LD_INT 1
9921: ARRAY
9922: PPUSH
9923: CALL_OW 179
// wait ( 0 0$1 ) ;
9927: LD_INT 35
9929: PPUSH
9930: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
9934: LD_VAR 0 2
9938: PUSH
9939: LD_INT 1
9941: ARRAY
9942: PPUSH
9943: CALL_OW 141
// Say ( Kurin , D10-Kur-1 ) ;
9947: LD_EXP 38
9951: PPUSH
9952: LD_STRING D10-Kur-1
9954: PPUSH
9955: CALL_OW 88
// Say ( Belkov , D10-Bel-1 ) ;
9959: LD_EXP 36
9963: PPUSH
9964: LD_STRING D10-Bel-1
9966: PPUSH
9967: CALL_OW 88
// if belkovBrother then
9971: LD_EXP 32
9975: IFFALSE 10027
// begin Say ( Burlak , D10-Bur-1 ) ;
9977: LD_EXP 34
9981: PPUSH
9982: LD_STRING D10-Bur-1
9984: PPUSH
9985: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
9989: LD_EXP 36
9993: PPUSH
9994: LD_STRING D10-Bel-2
9996: PPUSH
9997: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10001: LD_EXP 34
10005: PPUSH
10006: LD_STRING D10-Bur-2
10008: PPUSH
10009: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10013: LD_EXP 38
10017: PPUSH
10018: LD_STRING D10-Kur-2a
10020: PPUSH
10021: CALL_OW 88
// end else
10025: GO 10039
// begin Say ( Kurin , D10-Kur-2 ) end ;
10027: LD_EXP 38
10031: PPUSH
10032: LD_STRING D10-Kur-2
10034: PPUSH
10035: CALL_OW 88
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10039: LD_ADDR_VAR 0 4
10043: PUSH
10044: LD_VAR 0 2
10048: PUSH
10049: LD_INT 1
10051: ARRAY
10052: PPUSH
10053: CALL_OW 311
10057: ST_TO_ADDR
// ComExit ( un ) ;
10058: LD_VAR 0 4
10062: PPUSH
10063: CALL 53826 0 1
// AddComTurnUnit ( un , Kurin ) ;
10067: LD_VAR 0 4
10071: PPUSH
10072: LD_EXP 38
10076: PPUSH
10077: CALL_OW 179
// wait ( 0 0$0.3 ) ;
10081: LD_INT 10
10083: PPUSH
10084: CALL_OW 67
// ComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10088: LD_EXP 36
10092: PPUSH
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 120
// wait ( 0 0$2 ) ;
10106: LD_INT 70
10108: PPUSH
10109: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10113: LD_EXP 38
10117: PPUSH
10118: LD_STRING D10-Kur-2b
10120: PPUSH
10121: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: LD_INT 66
10132: PPUSH
10133: LD_INT 97
10135: PPUSH
10136: CALL_OW 111
// wait ( 0 0$5 ) ;
10140: LD_INT 175
10142: PPUSH
10143: CALL_OW 67
// InGameOff ;
10147: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10151: LD_EXP 33
10155: PPUSH
10156: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10160: LD_STRING M4
10162: PPUSH
10163: CALL_OW 337
// wait ( 0 0$6 ) ;
10167: LD_INT 210
10169: PPUSH
10170: CALL_OW 67
// kurinDontWannaTalk := true ;
10174: LD_ADDR_EXP 5
10178: PUSH
10179: LD_INT 1
10181: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10182: LD_INT 140
10184: PPUSH
10185: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10189: LD_INT 35
10191: PPUSH
10192: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10196: LD_EXP 34
10200: PPUSH
10201: CALL_OW 310
10205: PUSH
10206: LD_EXP 34
10210: PPUSH
10211: LD_INT 106
10213: PPUSH
10214: CALL_OW 296
10218: PUSH
10219: LD_INT 12
10221: LESS
10222: OR
10223: IFFALSE 10189
// DialogueOn ;
10225: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10229: LD_EXP 40
10233: PPUSH
10234: LD_STRING D11-Pla-1
10236: PPUSH
10237: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10241: LD_EXP 34
10245: PPUSH
10246: LD_STRING D11-Bur-1
10248: PPUSH
10249: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10253: LD_INT 22
10255: PUSH
10256: LD_INT 3
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 21
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PPUSH
10277: CALL_OW 69
10281: PUSH
10282: LD_INT 1
10284: GREATER
10285: IFFALSE 10299
// Say ( Burlak , D11-Bur-1a ) ;
10287: LD_EXP 34
10291: PPUSH
10292: LD_STRING D11-Bur-1a
10294: PPUSH
10295: CALL_OW 88
// DialogueOff ;
10299: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10303: LD_ADDR_EXP 8
10307: PUSH
10308: LD_INT 160
10310: PUSH
10311: LD_INT 150
10313: PUSH
10314: LD_INT 140
10316: PUSH
10317: LD_INT 120
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_OWVAR 67
10330: ARRAY
10331: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10332: LD_STRING M5
10334: PPUSH
10335: CALL_OW 337
// kirovHasTank := true ;
10339: LD_ADDR_EXP 6
10343: PUSH
10344: LD_INT 1
10346: ST_TO_ADDR
// hasToBuildTank := true ;
10347: LD_ADDR_EXP 11
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// end ;
10355: PPOPN 4
10357: END
// every 0 0$2 trigger allianceAttacked do
10358: LD_EXP 13
10362: IFFALSE 10401
10364: GO 10366
10366: DISABLE
// begin DialogueOn ;
10367: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10371: LD_EXP 38
10375: PPUSH
10376: LD_STRING DArestKur
10378: PPUSH
10379: CALL_OW 88
// dwait ( 0 0$1 ) ;
10383: LD_INT 35
10385: PPUSH
10386: CALL_OW 68
// YouLost ( SelfAttack ) ;
10390: LD_STRING SelfAttack
10392: PPUSH
10393: CALL_OW 104
// DialogueOff ;
10397: CALL_OW 7
// end ;
10401: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10402: LD_INT 22
10404: PUSH
10405: LD_INT 3
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 2
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 22
10433: PUSH
10434: LD_INT 3
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 21
10443: PUSH
10444: LD_INT 1
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: GREATEREQUAL
10460: PUSH
10461: LD_EXP 6
10465: AND
10466: IFFALSE 10636
10468: GO 10470
10470: DISABLE
// begin hasToBuildTank := false ;
10471: LD_ADDR_EXP 11
10475: PUSH
10476: LD_INT 0
10478: ST_TO_ADDR
// blockNorth := false ;
10479: LD_ADDR_EXP 7
10483: PUSH
10484: LD_INT 0
10486: ST_TO_ADDR
// InGameOn ;
10487: CALL_OW 8
// wait ( 0 0$2 ) ;
10491: LD_INT 70
10493: PPUSH
10494: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10498: LD_INT 106
10500: PPUSH
10501: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10505: LD_EXP 40
10509: PPUSH
10510: LD_INT 65
10512: PPUSH
10513: LD_INT 97
10515: PPUSH
10516: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10520: LD_EXP 40
10524: PPUSH
10525: LD_EXP 34
10529: PPUSH
10530: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10534: LD_EXP 34
10538: PPUSH
10539: LD_STRING D12-Bur-1
10541: PPUSH
10542: CALL_OW 88
// wait ( 0 0$1 ) ;
10546: LD_INT 35
10548: PPUSH
10549: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10553: LD_EXP 40
10557: PPUSH
10558: LD_STRING D12-Pla-1
10560: PPUSH
10561: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10565: LD_EXP 34
10569: PPUSH
10570: LD_STRING D12-Bur-2
10572: PPUSH
10573: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10577: LD_EXP 40
10581: PPUSH
10582: LD_STRING D12-Pla-2
10584: PPUSH
10585: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10589: LD_EXP 34
10593: PPUSH
10594: LD_STRING D12-Bur-3
10596: PPUSH
10597: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10601: LD_EXP 40
10605: PPUSH
10606: LD_STRING D12-Pla-3
10608: PPUSH
10609: CALL_OW 88
// hasAllTanks := true ;
10613: LD_ADDR_EXP 14
10617: PUSH
10618: LD_INT 1
10620: ST_TO_ADDR
// InGameOff ;
10621: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10625: LD_STRING M6
10627: PPUSH
10628: CALL_OW 337
// PrepareAmerican ;
10632: CALL 3901 0 0
// end ;
10636: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10637: LD_EXP 17
10641: IFFALSE 12358
10643: GO 10645
10645: DISABLE
10646: LD_INT 0
10648: PPUSH
10649: PPUSH
10650: PPUSH
10651: PPUSH
10652: PPUSH
10653: PPUSH
10654: PPUSH
// begin PrepareAmericanTrap ;
10655: CALL 4701 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10659: LD_ADDR_VAR 0 2
10663: PUSH
10664: LD_EXP 48
10668: PPUSH
10669: LD_INT 26
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PPUSH
10679: CALL_OW 72
10683: PUSH
10684: LD_INT 1
10686: ARRAY
10687: ST_TO_ADDR
// InGameOn ;
10688: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10692: LD_INT 69
10694: PPUSH
10695: LD_INT 22
10697: PPUSH
10698: CALL_OW 86
// wait ( 0 0$1 ) ;
10702: LD_INT 35
10704: PPUSH
10705: CALL_OW 67
// DialogueOn ;
10709: CALL_OW 6
// game_speed := 4 ;
10713: LD_ADDR_OWVAR 65
10717: PUSH
10718: LD_INT 4
10720: ST_TO_ADDR
// SayRadio ( usSol , D13-Sol1-1 ) ;
10721: LD_VAR 0 2
10725: PPUSH
10726: LD_STRING D13-Sol1-1
10728: PPUSH
10729: CALL_OW 94
// SayRadio ( Belkov , D13-Bel-1 ) ;
10733: LD_EXP 36
10737: PPUSH
10738: LD_STRING D13-Bel-1
10740: PPUSH
10741: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10745: LD_EXP 38
10749: PPUSH
10750: LD_STRING D13-Kur-1
10752: PPUSH
10753: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10757: LD_INT 10
10759: PPUSH
10760: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10764: LD_EXP 36
10768: PPUSH
10769: LD_STRING D13-Bel-2
10771: PPUSH
10772: CALL_OW 94
// DialogueOff ;
10776: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10780: LD_EXP 36
10784: PPUSH
10785: LD_INT 76
10787: PPUSH
10788: LD_INT 20
10790: PPUSH
10791: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10795: LD_EXP 45
10799: PPUSH
10800: LD_INT 72
10802: PPUSH
10803: LD_INT 20
10805: PPUSH
10806: CALL_OW 111
// wait ( 0 0$2 ) ;
10810: LD_INT 70
10812: PPUSH
10813: CALL_OW 67
// for i in usTrapForces do
10817: LD_ADDR_VAR 0 1
10821: PUSH
10822: LD_EXP 48
10826: PUSH
10827: FOR_IN
10828: IFFALSE 10861
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
10830: LD_VAR 0 1
10834: PPUSH
10835: LD_INT 7
10837: PPUSH
10838: LD_INT 0
10840: PPUSH
10841: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
10845: LD_VAR 0 1
10849: PPUSH
10850: LD_EXP 36
10854: PPUSH
10855: CALL_OW 119
// end ;
10859: GO 10827
10861: POP
10862: POP
// wait ( 0 0$0.3 ) ;
10863: LD_INT 10
10865: PPUSH
10866: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
10870: LD_EXP 48
10874: PPUSH
10875: LD_INT 65
10877: PPUSH
10878: LD_INT 18
10880: PPUSH
10881: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
10885: LD_INT 70
10887: PPUSH
10888: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
10892: LD_EXP 48
10896: PPUSH
10897: LD_INT 101
10899: PUSH
10900: LD_INT 3
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: PPUSH
10907: CALL_OW 72
10911: PUSH
10912: LD_INT 3
10914: GREATER
10915: IFFALSE 10885
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
10917: LD_INT 65
10919: PPUSH
10920: LD_INT 18
10922: PPUSH
10923: LD_INT 3
10925: PPUSH
10926: LD_INT 26
10928: NEG
10929: PPUSH
10930: CALL_OW 330
// DialogueOn ;
10934: CALL_OW 6
// Say ( usSol , D14-Sol1-1 ) ;
10938: LD_VAR 0 2
10942: PPUSH
10943: LD_STRING D14-Sol1-1
10945: PPUSH
10946: CALL_OW 88
// Say ( Belkov , D14-Bel-1 ) ;
10950: LD_EXP 36
10954: PPUSH
10955: LD_STRING D14-Bel-1
10957: PPUSH
10958: CALL_OW 88
// DialogueOff ;
10962: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
10966: LD_INT 65
10968: PPUSH
10969: LD_INT 18
10971: PPUSH
10972: LD_INT 3
10974: PPUSH
10975: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
10979: LD_EXP 45
10983: PPUSH
10984: LD_INT 31
10986: PPUSH
10987: LD_INT 9
10989: PPUSH
10990: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
10994: LD_EXP 48
10998: PPUSH
10999: LD_INT 50
11001: PPUSH
11002: LD_INT 16
11004: PPUSH
11005: CALL_OW 174
// wait ( 0 0$2 ) ;
11009: LD_INT 70
11011: PPUSH
11012: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11016: LD_ADDR_VAR 0 6
11020: PUSH
11021: LD_EXP 36
11025: PPUSH
11026: CALL_OW 310
11030: ST_TO_ADDR
// if not belkovTank then
11031: LD_VAR 0 6
11035: NOT
11036: IFFALSE 11076
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11038: LD_ADDR_VAR 0 6
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 6
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 21
11055: PUSH
11056: LD_INT 2
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PPUSH
11067: CALL_OW 69
11071: PUSH
11072: LD_INT 1
11074: ARRAY
11075: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11076: LD_EXP 36
11080: PPUSH
11081: LD_INT 58
11083: PPUSH
11084: LD_INT 21
11086: PPUSH
11087: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11091: LD_EXP 36
11095: PPUSH
11096: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11100: LD_EXP 36
11104: PPUSH
11105: LD_INT 53
11107: PPUSH
11108: LD_INT 18
11110: PPUSH
11111: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11115: LD_EXP 36
11119: PPUSH
11120: LD_INT 31
11122: PPUSH
11123: LD_INT 9
11125: PPUSH
11126: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11130: LD_INT 35
11132: PPUSH
11133: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11137: LD_ADDR_VAR 0 1
11141: PUSH
11142: LD_EXP 36
11146: PUSH
11147: LD_EXP 45
11151: UNION
11152: PUSH
11153: LD_VAR 0 6
11157: UNION
11158: PUSH
11159: FOR_IN
11160: IFFALSE 11191
// if GetLives ( i ) < 800 then
11162: LD_VAR 0 1
11166: PPUSH
11167: CALL_OW 256
11171: PUSH
11172: LD_INT 800
11174: LESS
11175: IFFALSE 11189
// SetLives ( i , 800 ) ;
11177: LD_VAR 0 1
11181: PPUSH
11182: LD_INT 800
11184: PPUSH
11185: CALL_OW 234
11189: GO 11159
11191: POP
11192: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11193: LD_EXP 36
11197: PPUSH
11198: LD_INT 31
11200: PPUSH
11201: LD_INT 9
11203: PPUSH
11204: CALL_OW 297
11208: PUSH
11209: LD_INT 4
11211: LESS
11212: IFFALSE 11130
// for i := 1 to Difficulty do
11214: LD_ADDR_VAR 0 1
11218: PUSH
11219: DOUBLE
11220: LD_INT 1
11222: DEC
11223: ST_TO_ADDR
11224: LD_OWVAR 67
11228: PUSH
11229: FOR_TO
11230: IFFALSE 11272
// if i <= belkovTeam then
11232: LD_VAR 0 1
11236: PUSH
11237: LD_EXP 45
11241: LESSEQUAL
11242: IFFALSE 11270
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11244: LD_EXP 45
11248: PUSH
11249: LD_VAR 0 1
11253: ARRAY
11254: PPUSH
11255: LD_INT 600
11257: PPUSH
11258: LD_INT 800
11260: PPUSH
11261: CALL_OW 12
11265: PPUSH
11266: CALL_OW 234
11270: GO 11229
11272: POP
11273: POP
// SetLives ( Belkov , 820 ) ;
11274: LD_EXP 36
11278: PPUSH
11279: LD_INT 820
11281: PPUSH
11282: CALL_OW 234
// InGameOff ;
11286: CALL_OW 9
// DialogueOn ;
11290: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11294: LD_EXP 36
11298: PPUSH
11299: LD_STRING D14-Bel-1a
11301: PPUSH
11302: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11306: LD_EXP 38
11310: PPUSH
11311: LD_STRING D14-Kur-1
11313: PPUSH
11314: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11318: LD_EXP 36
11322: PPUSH
11323: LD_STRING D14-Bel-2
11325: PPUSH
11326: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11330: LD_EXP 38
11334: PPUSH
11335: LD_STRING D14-Kur-2
11337: PPUSH
11338: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11342: LD_EXP 34
11346: PPUSH
11347: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11351: LD_EXP 34
11355: PPUSH
11356: LD_STRING D14a-Bur-1
11358: PPUSH
11359: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11363: LD_EXP 40
11367: PPUSH
11368: LD_STRING D14a-Pla-1
11370: PPUSH
11371: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11375: LD_EXP 34
11379: PPUSH
11380: LD_STRING D14a-Bur-2
11382: PPUSH
11383: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11387: LD_EXP 40
11391: PPUSH
11392: LD_STRING D14a-Pla-2
11394: PPUSH
11395: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11399: LD_EXP 34
11403: PPUSH
11404: LD_STRING D14a-Bur-3
11406: PPUSH
11407: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11411: LD_EXP 40
11415: PPUSH
11416: LD_STRING D14a-Pla-3
11418: PPUSH
11419: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11423: LD_EXP 34
11427: PPUSH
11428: LD_STRING D14a-Bur-4
11430: PPUSH
11431: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11435: LD_EXP 40
11439: PPUSH
11440: LD_STRING D14a-Pla-4
11442: PPUSH
11443: CALL_OW 88
// DialogueOff ;
11447: CALL_OW 7
// belkovTrapped := true ;
11451: LD_ADDR_EXP 18
11455: PUSH
11456: LD_INT 1
11458: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11459: LD_EXP 48
11463: PPUSH
11464: LD_INT 68
11466: PPUSH
11467: LD_INT 16
11469: PPUSH
11470: CALL_OW 111
// if belkovTank then
11474: LD_VAR 0 6
11478: IFFALSE 11517
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11480: LD_EXP 48
11484: PUSH
11485: LD_INT 1
11487: ARRAY
11488: PPUSH
11489: LD_VAR 0 6
11493: PPUSH
11494: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11498: LD_EXP 48
11502: PUSH
11503: LD_INT 1
11505: ARRAY
11506: PPUSH
11507: LD_INT 69
11509: PPUSH
11510: LD_INT 20
11512: PPUSH
11513: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11517: LD_EXP 36
11521: PPUSH
11522: LD_INT 40
11524: PPUSH
11525: LD_INT 17
11527: PPUSH
11528: CALL_OW 111
// AddComHold ( Belkov ) ;
11532: LD_EXP 36
11536: PPUSH
11537: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11541: LD_ADDR_VAR 0 3
11545: PUSH
11546: LD_INT 44
11548: PUSH
11549: LD_INT 18
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 42
11558: PUSH
11559: LD_INT 16
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 40
11568: PUSH
11569: LD_INT 15
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: PUSH
11576: LD_INT 44
11578: PUSH
11579: LD_INT 20
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 42
11588: PUSH
11589: LD_INT 20
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: LD_INT 42
11598: PUSH
11599: LD_INT 12
11601: PUSH
11602: EMPTY
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 42
11608: PUSH
11609: LD_INT 8
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11625: LD_ADDR_VAR 0 1
11629: PUSH
11630: LD_EXP 45
11634: PPUSH
11635: LD_INT 25
11637: PUSH
11638: LD_INT 1
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PPUSH
11645: CALL_OW 72
11649: PUSH
11650: FOR_IN
11651: IFFALSE 11717
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11653: LD_VAR 0 1
11657: PPUSH
11658: LD_VAR 0 3
11662: PUSH
11663: LD_INT 1
11665: ARRAY
11666: PUSH
11667: LD_INT 1
11669: ARRAY
11670: PPUSH
11671: LD_VAR 0 3
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PUSH
11680: LD_INT 2
11682: ARRAY
11683: PPUSH
11684: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11688: LD_ADDR_VAR 0 3
11692: PUSH
11693: LD_VAR 0 3
11697: PPUSH
11698: LD_INT 1
11700: PPUSH
11701: CALL_OW 3
11705: ST_TO_ADDR
// AddComCrawl ( i ) ;
11706: LD_VAR 0 1
11710: PPUSH
11711: CALL_OW 197
// end ;
11715: GO 11650
11717: POP
11718: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11719: LD_EXP 45
11723: PPUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 4
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 72
11738: IFFALSE 11770
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11740: LD_EXP 45
11744: PPUSH
11745: LD_INT 25
11747: PUSH
11748: LD_INT 4
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PPUSH
11755: CALL_OW 72
11759: PPUSH
11760: LD_INT 38
11762: PPUSH
11763: LD_INT 18
11765: PPUSH
11766: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11770: LD_ADDR_VAR 0 7
11774: PUSH
11775: LD_INT 9450
11777: PUSH
11778: LD_INT 8400
11780: PUSH
11781: LD_INT 6650
11783: PUSH
11784: LD_INT 5250
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PUSH
11793: LD_OWVAR 67
11797: ARRAY
11798: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11799: LD_INT 35
11801: PPUSH
11802: CALL_OW 67
// timer := timer - 0 0$1 ;
11806: LD_ADDR_VAR 0 7
11810: PUSH
11811: LD_VAR 0 7
11815: PUSH
11816: LD_INT 35
11818: MINUS
11819: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
11820: LD_INT 19
11822: PPUSH
11823: LD_INT 22
11825: PUSH
11826: LD_INT 3
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 70
11837: IFFALSE 11847
// timer := 0 0$0 ;
11839: LD_ADDR_VAR 0 7
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// until timer <= 0 ;
11847: LD_VAR 0 7
11851: PUSH
11852: LD_INT 0
11854: LESSEQUAL
11855: IFFALSE 11799
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
11857: LD_EXP 48
11861: PPUSH
11862: LD_INT 50
11864: PUSH
11865: EMPTY
11866: LIST
11867: PPUSH
11868: CALL_OW 72
11872: NOT
11873: IFFALSE 11877
// exit ;
11875: GO 12358
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
11877: LD_ADDR_VAR 0 4
11881: PUSH
11882: LD_EXP 48
11886: PPUSH
11887: LD_INT 25
11889: PUSH
11890: LD_INT 1
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 3
11899: PUSH
11900: LD_INT 54
11902: PUSH
11903: EMPTY
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PPUSH
11914: CALL_OW 72
11918: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
11919: LD_ADDR_VAR 0 5
11923: PUSH
11924: LD_EXP 48
11928: PPUSH
11929: LD_INT 25
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 3
11941: PUSH
11942: LD_INT 54
11944: PUSH
11945: EMPTY
11946: LIST
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PPUSH
11956: CALL_OW 72
11960: ST_TO_ADDR
// for i in sol do
11961: LD_ADDR_VAR 0 1
11965: PUSH
11966: LD_VAR 0 4
11970: PUSH
11971: FOR_IN
11972: IFFALSE 11988
// SetTag ( i , 0 ) ;
11974: LD_VAR 0 1
11978: PPUSH
11979: LD_INT 0
11981: PPUSH
11982: CALL_OW 109
11986: GO 11971
11988: POP
11989: POP
// ComMoveXY ( sci , 60 , 8 ) ;
11990: LD_VAR 0 5
11994: PPUSH
11995: LD_INT 60
11997: PPUSH
11998: LD_INT 8
12000: PPUSH
12001: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12005: LD_INT 22
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 21
12017: PUSH
12018: LD_INT 2
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: IFFALSE 12074
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12035: LD_INT 22
12037: PUSH
12038: LD_INT 1
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 21
12047: PUSH
12048: LD_INT 2
12050: PUSH
12051: EMPTY
12052: LIST
12053: LIST
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: PPUSH
12059: CALL_OW 69
12063: PPUSH
12064: LD_INT 53
12066: PPUSH
12067: LD_INT 24
12069: PPUSH
12070: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12074: LD_INT 18
12076: PPUSH
12077: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12081: LD_ADDR_VAR 0 4
12085: PUSH
12086: LD_EXP 48
12090: PPUSH
12091: LD_INT 25
12093: PUSH
12094: LD_INT 1
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 50
12103: PUSH
12104: EMPTY
12105: LIST
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: LD_INT 54
12112: PUSH
12113: EMPTY
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: PPUSH
12125: CALL_OW 72
12129: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12130: LD_VAR 0 4
12134: PPUSH
12135: LD_INT 0
12137: PPUSH
12138: CALL 51012 0 2
12142: PUSH
12143: LD_VAR 0 4
12147: EQUAL
12148: IFFALSE 12187
// begin wait ( 0 0$3 ) ;
12150: LD_INT 105
12152: PPUSH
12153: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12157: LD_VAR 0 4
12161: PPUSH
12162: LD_INT 41
12164: PPUSH
12165: LD_INT 18
12167: PPUSH
12168: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12172: LD_VAR 0 5
12176: PPUSH
12177: LD_INT 60
12179: PPUSH
12180: LD_INT 8
12182: PPUSH
12183: CALL_OW 111
// end ; for i in sol do
12187: LD_ADDR_VAR 0 1
12191: PUSH
12192: LD_VAR 0 4
12196: PUSH
12197: FOR_IN
12198: IFFALSE 12273
// if GetLives ( i ) < 800 then
12200: LD_VAR 0 1
12204: PPUSH
12205: CALL_OW 256
12209: PUSH
12210: LD_INT 800
12212: LESS
12213: IFFALSE 12244
// begin SetTag ( i , 1 ) ;
12215: LD_VAR 0 1
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12227: LD_VAR 0 1
12231: PPUSH
12232: LD_INT 60
12234: PPUSH
12235: LD_INT 8
12237: PPUSH
12238: CALL_OW 111
// end else
12242: GO 12271
// if GetLives ( i ) = 1000 then
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 256
12253: PUSH
12254: LD_INT 1000
12256: EQUAL
12257: IFFALSE 12271
// SetTag ( i , 0 ) ;
12259: LD_VAR 0 1
12263: PPUSH
12264: LD_INT 0
12266: PPUSH
12267: CALL_OW 109
12271: GO 12197
12273: POP
12274: POP
// until belkovDied or not sol ;
12275: LD_EXP 19
12279: PUSH
12280: LD_VAR 0 4
12284: NOT
12285: OR
12286: IFFALSE 12074
// if not sol then
12288: LD_VAR 0 4
12292: NOT
12293: IFFALSE 12297
// exit ;
12295: GO 12358
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12297: LD_VAR 0 4
12301: PUSH
12302: LD_VAR 0 5
12306: ADD
12307: PPUSH
12308: LD_INT 56
12310: PPUSH
12311: LD_INT 25
12313: PPUSH
12314: CALL_OW 111
// wait ( 0 0$30 ) ;
12318: LD_INT 1050
12320: PPUSH
12321: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12325: LD_EXP 48
12329: PPUSH
12330: LD_INT 66
12332: PPUSH
12333: LD_INT 96
12335: PPUSH
12336: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12340: LD_VAR 0 5
12344: PPUSH
12345: LD_VAR 0 4
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: PPUSH
12354: CALL_OW 112
// end ;
12358: PPOPN 7
12360: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12361: LD_EXP 18
12365: PUSH
12366: LD_EXP 19
12370: NOT
12371: AND
12372: PUSH
12373: LD_INT 9
12375: PPUSH
12376: LD_INT 22
12378: PUSH
12379: LD_INT 3
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PPUSH
12386: CALL_OW 70
12390: AND
12391: IFFALSE 12711
12393: GO 12395
12395: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12396: LD_STRING QAttackAm
12398: PPUSH
12399: CALL_OW 97
12403: PUSH
12404: LD_INT 1
12406: DOUBLE
12407: EQUAL
12408: IFTRUE 12412
12410: GO 12479
12412: POP
// begin initiative := true ;
12413: LD_ADDR_EXP 31
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// DialogueOn ;
12421: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12425: LD_EXP 34
12429: PPUSH
12430: LD_STRING D17-Bur-1
12432: PPUSH
12433: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12437: LD_EXP 40
12441: PPUSH
12442: LD_STRING D17-Pla-1
12444: PPUSH
12445: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12449: LD_EXP 34
12453: PPUSH
12454: LD_STRING D17-Bur-2
12456: PPUSH
12457: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12461: LD_EXP 40
12465: PPUSH
12466: LD_STRING D17-Pla-2
12468: PPUSH
12469: CALL_OW 94
// DialogueOff ;
12473: CALL_OW 7
// end ; 2 :
12477: GO 12641
12479: LD_INT 2
12481: DOUBLE
12482: EQUAL
12483: IFTRUE 12487
12485: GO 12579
12487: POP
// begin initiative := true ;
12488: LD_ADDR_EXP 31
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// DialogueOn ;
12496: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12500: LD_EXP 34
12504: PPUSH
12505: LD_STRING D18-Bur-1
12507: PPUSH
12508: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12512: LD_EXP 40
12516: PPUSH
12517: LD_STRING D18-Pla-1
12519: PPUSH
12520: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12524: LD_EXP 34
12528: PPUSH
12529: LD_STRING D18-Bur-2
12531: PPUSH
12532: CALL_OW 88
// if not reinforcementsGained then
12536: LD_EXP 25
12540: NOT
12541: IFFALSE 12561
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12543: LD_EXP 40
12547: PPUSH
12548: LD_STRING D18-Pla-2
12550: PPUSH
12551: CALL_OW 94
// SendReinforcements ;
12555: CALL 3242 0 0
// end else
12559: GO 12573
// SayRadio ( Platonov , D22-Pla-1b ) ;
12561: LD_EXP 40
12565: PPUSH
12566: LD_STRING D22-Pla-1b
12568: PPUSH
12569: CALL_OW 94
// DialogueOff ;
12573: CALL_OW 7
// end ; 3 :
12577: GO 12641
12579: LD_INT 3
12581: DOUBLE
12582: EQUAL
12583: IFTRUE 12587
12585: GO 12640
12587: POP
// begin if IsOk ( Gnyevko ) then
12588: LD_EXP 35
12592: PPUSH
12593: CALL_OW 302
12597: IFFALSE 12613
// Say ( Gnyevko , D19A-Gny-1 ) else
12599: LD_EXP 35
12603: PPUSH
12604: LD_STRING D19A-Gny-1
12606: PPUSH
12607: CALL_OW 88
12611: GO 12636
// if IsOk ( Kovalyuk ) then
12613: LD_EXP 39
12617: PPUSH
12618: CALL_OW 302
12622: IFFALSE 12636
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12624: LD_EXP 39
12628: PPUSH
12629: LD_STRING D19A-Kov-1
12631: PPUSH
12632: CALL_OW 88
// exit ;
12636: GO 12711
// end ; end ;
12638: GO 12641
12640: POP
// if IsOk ( Gnyevko ) then
12641: LD_EXP 35
12645: PPUSH
12646: CALL_OW 302
12650: IFFALSE 12676
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12652: LD_EXP 35
12656: PPUSH
12657: LD_STRING D19-Gny-1
12659: PPUSH
12660: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12664: LD_EXP 34
12668: PPUSH
12669: LD_STRING D19-Bur-1
12671: PPUSH
12672: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12676: LD_EXP 39
12680: PPUSH
12681: CALL_OW 302
12685: IFFALSE 12711
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12687: LD_EXP 39
12691: PPUSH
12692: LD_STRING D19-Kov-1
12694: PPUSH
12695: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12699: LD_EXP 34
12703: PPUSH
12704: LD_STRING D19-Bur-2
12706: PPUSH
12707: CALL_OW 88
// end ; end ;
12711: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12712: LD_EXP 18
12716: PUSH
12717: LD_EXP 19
12721: NOT
12722: AND
12723: PUSH
12724: LD_INT 16
12726: PPUSH
12727: LD_INT 22
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 70
12741: AND
12742: IFFALSE 12970
12744: GO 12746
12746: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12747: LD_STRING QAttackBw
12749: PPUSH
12750: CALL_OW 97
12754: PUSH
12755: LD_INT 1
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 12806
12763: POP
// begin initiative := true ;
12764: LD_ADDR_EXP 31
12768: PUSH
12769: LD_INT 1
12771: ST_TO_ADDR
// DialogueOn ;
12772: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12776: LD_EXP 34
12780: PPUSH
12781: LD_STRING D21-Bur-1
12783: PPUSH
12784: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12788: LD_EXP 40
12792: PPUSH
12793: LD_STRING D21-Pla-1
12795: PPUSH
12796: CALL_OW 94
// DialogueOff ;
12800: CALL_OW 7
// end ; 2 :
12804: GO 12921
12806: LD_INT 2
12808: DOUBLE
12809: EQUAL
12810: IFTRUE 12814
12812: GO 12909
12814: POP
// begin initiative := true ;
12815: LD_ADDR_EXP 31
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// DialogueOn ;
12823: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12827: LD_EXP 34
12831: PPUSH
12832: LD_STRING D22-Bur-1
12834: PPUSH
12835: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
12839: LD_EXP 25
12843: NOT
12844: PUSH
12845: LD_EXP 22
12849: AND
12850: IFFALSE 12870
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
12852: LD_EXP 40
12856: PPUSH
12857: LD_STRING D22-Pla-1
12859: PPUSH
12860: CALL_OW 94
// SendReinforcements ;
12864: CALL 3242 0 0
// end else
12868: GO 12903
// if not westOutpostDestroyed then
12870: LD_EXP 22
12874: NOT
12875: IFFALSE 12891
// SayRadio ( Platonov , D22-Pla-1a ) else
12877: LD_EXP 40
12881: PPUSH
12882: LD_STRING D22-Pla-1a
12884: PPUSH
12885: CALL_OW 94
12889: GO 12903
// SayRadio ( Platonov , D22-Pla-1b ) ;
12891: LD_EXP 40
12895: PPUSH
12896: LD_STRING D22-Pla-1b
12898: PPUSH
12899: CALL_OW 94
// DialogueOff ;
12903: CALL_OW 7
// end ; 3 :
12907: GO 12921
12909: LD_INT 3
12911: DOUBLE
12912: EQUAL
12913: IFTRUE 12917
12915: GO 12920
12917: POP
// begin end ; end ;
12918: GO 12921
12920: POP
// ChangeMissionObjectives ( M9 ) ;
12921: LD_STRING M9
12923: PPUSH
12924: CALL_OW 337
// wait ( 0 0$1 ) ;
12928: LD_INT 35
12930: PPUSH
12931: CALL_OW 67
// if IsOk ( Gnyevko ) then
12935: LD_EXP 35
12939: PPUSH
12940: CALL_OW 302
12944: IFFALSE 12970
// begin Say ( Gnyevko , D23-Gny-1 ) ;
12946: LD_EXP 35
12950: PPUSH
12951: LD_STRING D23-Gny-1
12953: PPUSH
12954: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
12958: LD_EXP 34
12962: PPUSH
12963: LD_STRING D23-Bur-1
12965: PPUSH
12966: CALL_OW 88
// end ; end ;
12970: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
12971: LD_EXP 18
12975: PUSH
12976: LD_EXP 19
12980: AND
12981: PUSH
12982: LD_EXP 28
12986: NOT
12987: AND
12988: PUSH
12989: LD_EXP 45
12993: PPUSH
12994: LD_INT 91
12996: PUSH
12997: LD_EXP 34
13001: PUSH
13002: LD_INT 8
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: LIST
13009: PPUSH
13010: CALL_OW 72
13014: AND
13015: IFFALSE 13059
13017: GO 13019
13019: DISABLE
13020: LD_INT 0
13022: PPUSH
// begin for i in belkovTeam do
13023: LD_ADDR_VAR 0 1
13027: PUSH
13028: LD_EXP 45
13032: PUSH
13033: FOR_IN
13034: IFFALSE 13050
// SetSide ( i , 3 ) ;
13036: LD_VAR 0 1
13040: PPUSH
13041: LD_INT 3
13043: PPUSH
13044: CALL_OW 235
13048: GO 13033
13050: POP
13051: POP
// ChangeMissionObjectives ( M9a ) ;
13052: LD_STRING M9a
13054: PPUSH
13055: CALL_OW 337
// end ;
13059: PPOPN 1
13061: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_EXP 36
13071: PPUSH
13072: CALL_OW 296
13076: PUSH
13077: LD_INT 6
13079: LESS
13080: PUSH
13081: LD_EXP 18
13085: AND
13086: PUSH
13087: LD_EXP 36
13091: PPUSH
13092: CALL_OW 302
13096: AND
13097: PUSH
13098: LD_INT 3
13100: PPUSH
13101: CALL_OW 463
13105: NOT
13106: AND
13107: IFFALSE 13422
13109: GO 13111
13111: DISABLE
13112: LD_INT 0
13114: PPUSH
13115: PPUSH
// begin InGameOn ;
13116: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13120: LD_EXP 34
13124: PPUSH
13125: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13129: LD_EXP 34
13133: PPUSH
13134: LD_INT 37
13136: PPUSH
13137: LD_INT 17
13139: PPUSH
13140: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13144: LD_EXP 34
13148: PPUSH
13149: LD_EXP 36
13153: PPUSH
13154: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13158: LD_EXP 36
13162: PPUSH
13163: LD_EXP 34
13167: PPUSH
13168: CALL_OW 119
// p := 0 ;
13172: LD_ADDR_VAR 0 2
13176: PUSH
13177: LD_INT 0
13179: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13180: LD_INT 35
13182: PPUSH
13183: CALL_OW 67
// p := p + 1 ;
13187: LD_ADDR_VAR 0 2
13191: PUSH
13192: LD_VAR 0 2
13196: PUSH
13197: LD_INT 1
13199: PLUS
13200: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13201: LD_EXP 34
13205: PPUSH
13206: LD_EXP 36
13210: PPUSH
13211: CALL_OW 296
13215: PUSH
13216: LD_INT 4
13218: LESS
13219: PUSH
13220: LD_VAR 0 2
13224: PUSH
13225: LD_INT 6
13227: GREATER
13228: OR
13229: IFFALSE 13180
// ComTurnUnit ( Burlak , Belkov ) ;
13231: LD_EXP 34
13235: PPUSH
13236: LD_EXP 36
13240: PPUSH
13241: CALL_OW 119
// DialogueOn ;
13245: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13249: LD_EXP 36
13253: PPUSH
13254: LD_STRING D24-Bel-1
13256: PPUSH
13257: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13261: LD_EXP 34
13265: PPUSH
13266: LD_STRING D24-Bur-1
13268: PPUSH
13269: CALL_OW 88
// if belkovBrother then
13273: LD_EXP 32
13277: IFFALSE 13291
// Say ( Burlak , D24-Bur-1a ) ;
13279: LD_EXP 34
13283: PPUSH
13284: LD_STRING D24-Bur-1a
13286: PPUSH
13287: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13291: LD_EXP 36
13295: PPUSH
13296: LD_STRING D24-Bel-2
13298: PPUSH
13299: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13303: LD_EXP 34
13307: PPUSH
13308: LD_STRING D24-Bur-2
13310: PPUSH
13311: CALL_OW 88
// if vehCaptured then
13315: LD_EXP 16
13319: IFFALSE 13333
// Say ( Burlak , D24-Bur-2a ) ;
13321: LD_EXP 34
13325: PPUSH
13326: LD_STRING D24-Bur-2a
13328: PPUSH
13329: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13333: LD_EXP 40
13337: PPUSH
13338: LD_STRING D24-Pla-2
13340: PPUSH
13341: CALL_OW 94
// if not westOutpostDestroyed then
13345: LD_EXP 22
13349: NOT
13350: IFFALSE 13364
// SayRadio ( Platonov , D24-Pla-2a ) ;
13352: LD_EXP 40
13356: PPUSH
13357: LD_STRING D24-Pla-2a
13359: PPUSH
13360: CALL_OW 94
// DialogueOff ;
13364: CALL_OW 7
// InGameOff ;
13368: CALL_OW 9
// belkovSaved := true ;
13372: LD_ADDR_EXP 28
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13380: LD_ADDR_VAR 0 1
13384: PUSH
13385: LD_EXP 45
13389: PUSH
13390: LD_EXP 36
13394: UNION
13395: PUSH
13396: FOR_IN
13397: IFFALSE 13413
// SetSide ( i , 3 ) ;
13399: LD_VAR 0 1
13403: PPUSH
13404: LD_INT 3
13406: PPUSH
13407: CALL_OW 235
13411: GO 13396
13413: POP
13414: POP
// ChangeMissionObjectives ( M9a ) ;
13415: LD_STRING M9a
13417: PPUSH
13418: CALL_OW 337
// end ;
13422: PPOPN 2
13424: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13425: LD_INT 3
13427: PPUSH
13428: LD_INT 22
13430: PUSH
13431: LD_INT 1
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 95
13440: PUSH
13441: LD_INT 8
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PPUSH
13452: CALL_OW 69
13456: PPUSH
13457: CALL 56604 0 2
13461: IFFALSE 13646
13463: GO 13465
13465: DISABLE
// begin DialogueOn ;
13466: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13470: LD_INT 49
13472: PPUSH
13473: LD_INT 57
13475: PPUSH
13476: LD_INT 3
13478: PPUSH
13479: LD_INT 12
13481: NEG
13482: PPUSH
13483: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13487: LD_INT 49
13489: PPUSH
13490: LD_INT 57
13492: PPUSH
13493: LD_INT 3
13495: PPUSH
13496: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13500: LD_INT 49
13502: PPUSH
13503: LD_INT 57
13505: PPUSH
13506: CALL_OW 84
// if not eastOutpostDiscovered then
13510: LD_EXP 21
13514: NOT
13515: IFFALSE 13555
// begin Say ( Burlak , D15-Bur-1 ) ;
13517: LD_EXP 34
13521: PPUSH
13522: LD_STRING D15-Bur-1
13524: PPUSH
13525: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13529: LD_EXP 35
13533: PPUSH
13534: LD_STRING D15-Gny-1
13536: PPUSH
13537: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13541: LD_EXP 39
13545: PPUSH
13546: LD_STRING D15-Kov-1
13548: PPUSH
13549: CALL_OW 88
// end else
13553: GO 13591
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13555: LD_EXP 39
13559: PPUSH
13560: LD_STRING D16-Kov-1
13562: PPUSH
13563: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13567: LD_EXP 34
13571: PPUSH
13572: LD_STRING D16-Bur-1
13574: PPUSH
13575: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13579: LD_EXP 35
13583: PPUSH
13584: LD_STRING D16-Gny-1
13586: PPUSH
13587: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13591: LD_EXP 34
13595: PPUSH
13596: LD_STRING D15-Bur-2
13598: PPUSH
13599: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13603: LD_EXP 39
13607: PPUSH
13608: LD_STRING D15-Kov-2
13610: PPUSH
13611: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13615: LD_EXP 34
13619: PPUSH
13620: LD_STRING D15-Bur-3
13622: PPUSH
13623: CALL_OW 88
// DialogueOff ;
13627: CALL_OW 7
// westOutpostDiscovered := true ;
13631: LD_ADDR_EXP 20
13635: PUSH
13636: LD_INT 1
13638: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13639: LD_STRING M7
13641: PPUSH
13642: CALL_OW 337
// end ;
13646: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13647: LD_INT 3
13649: PPUSH
13650: LD_INT 22
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: PUSH
13660: LD_INT 95
13662: PUSH
13663: LD_INT 15
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PPUSH
13674: CALL_OW 69
13678: PPUSH
13679: CALL 56604 0 2
13683: IFFALSE 13824
13685: GO 13687
13687: DISABLE
// begin DialogueOn ;
13688: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13692: LD_INT 95
13694: PPUSH
13695: LD_INT 65
13697: PPUSH
13698: LD_INT 3
13700: PPUSH
13701: LD_INT 12
13703: NEG
13704: PPUSH
13705: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13709: LD_INT 95
13711: PPUSH
13712: LD_INT 65
13714: PPUSH
13715: LD_INT 3
13717: PPUSH
13718: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13722: LD_INT 95
13724: PPUSH
13725: LD_INT 65
13727: PPUSH
13728: CALL_OW 84
// if westOutpostDiscovered then
13732: LD_EXP 20
13736: IFFALSE 13776
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13738: LD_EXP 39
13742: PPUSH
13743: LD_STRING D16-Kov-1
13745: PPUSH
13746: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13750: LD_EXP 34
13754: PPUSH
13755: LD_STRING D16-Bur-1
13757: PPUSH
13758: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13762: LD_EXP 35
13766: PPUSH
13767: LD_STRING D16-Gny-1
13769: PPUSH
13770: CALL_OW 88
// end else
13774: GO 13812
// begin Say ( Burlak , D15-Bur-1 ) ;
13776: LD_EXP 34
13780: PPUSH
13781: LD_STRING D15-Bur-1
13783: PPUSH
13784: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13788: LD_EXP 35
13792: PPUSH
13793: LD_STRING D15-Gny-1
13795: PPUSH
13796: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13800: LD_EXP 39
13804: PPUSH
13805: LD_STRING D15-Kov-1
13807: PPUSH
13808: CALL_OW 88
// end ; DialogueOff ;
13812: CALL_OW 7
// eastOutpostDiscovered := true ;
13816: LD_ADDR_EXP 21
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// end ;
13824: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
13825: LD_INT 8
13827: PPUSH
13828: LD_INT 22
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: LD_INT 50
13840: PUSH
13841: EMPTY
13842: LIST
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PPUSH
13848: CALL_OW 70
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: PUSH
13857: LD_EXP 20
13861: AND
13862: IFFALSE 13906
13864: GO 13866
13866: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
13867: LD_EXP 34
13871: PPUSH
13872: LD_STRING D20-Bur-1
13874: PPUSH
13875: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13879: LD_EXP 40
13883: PPUSH
13884: LD_STRING D20-Pla-1
13886: PPUSH
13887: CALL_OW 94
// westOutpostDestroyed := true ;
13891: LD_ADDR_EXP 22
13895: PUSH
13896: LD_INT 1
13898: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
13899: LD_STRING M8
13901: PPUSH
13902: CALL_OW 337
// end ;
13906: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
13907: LD_INT 15
13909: PPUSH
13910: LD_INT 22
13912: PUSH
13913: LD_INT 1
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 50
13922: PUSH
13923: EMPTY
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 70
13934: PUSH
13935: LD_INT 0
13937: EQUAL
13938: PUSH
13939: LD_EXP 21
13943: AND
13944: IFFALSE 14074
13946: GO 13948
13948: DISABLE
13949: LD_INT 0
13951: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
13952: LD_EXP 34
13956: PPUSH
13957: LD_STRING D20-Bur-1
13959: PPUSH
13960: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13964: LD_EXP 40
13968: PPUSH
13969: LD_STRING D20-Pla-1
13971: PPUSH
13972: CALL_OW 94
// eastOutpostDestroyed := true ;
13976: LD_ADDR_EXP 23
13980: PUSH
13981: LD_INT 1
13983: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13984: LD_INT 35
13986: PPUSH
13987: CALL_OW 67
// stop_talking := true ;
13991: LD_ADDR_OWVAR 56
13995: PUSH
13996: LD_INT 1
13998: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_INT 3
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 23
14016: PUSH
14017: LD_INT 3
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: LD_INT 21
14026: PUSH
14027: LD_INT 1
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: PUSH
14044: FOR_IN
14045: IFFALSE 14064
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: LD_INT 1500
14057: PPUSH
14058: CALL_OW 591
14062: GO 14044
14064: POP
14065: POP
// stop_talking := false ;
14066: LD_ADDR_OWVAR 56
14070: PUSH
14071: LD_INT 0
14073: ST_TO_ADDR
// end ;
14074: PPOPN 1
14076: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14077: LD_INT 19
14079: PPUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 3
14085: PUSH
14086: EMPTY
14087: LIST
14088: LIST
14089: PUSH
14090: LD_INT 21
14092: PUSH
14093: LD_INT 2
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 70
14108: IFFALSE 14216
14110: GO 14112
14112: DISABLE
// begin DialogueOn ;
14113: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14117: LD_INT 19
14119: PPUSH
14120: LD_INT 22
14122: PUSH
14123: LD_INT 3
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PUSH
14130: LD_INT 21
14132: PUSH
14133: LD_INT 2
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PPUSH
14144: CALL_OW 70
14148: PPUSH
14149: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14153: LD_EXP 34
14157: PPUSH
14158: LD_STRING D26-Bur-1
14160: PPUSH
14161: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14165: LD_EXP 39
14169: PPUSH
14170: LD_STRING D26-Kov-1
14172: PPUSH
14173: CALL_OW 88
// if IsOk ( Gnyevko ) then
14177: LD_EXP 35
14181: PPUSH
14182: CALL_OW 302
14186: IFFALSE 14212
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14188: LD_EXP 35
14192: PPUSH
14193: LD_STRING D26-Gny-1
14195: PPUSH
14196: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14200: LD_EXP 34
14204: PPUSH
14205: LD_STRING D26-Bur-2
14207: PPUSH
14208: CALL_OW 88
// end ; DialogueOff ;
14212: CALL_OW 7
// end ;
14216: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14217: LD_EXP 21
14221: PUSH
14222: LD_EXP 23
14226: NOT
14227: AND
14228: PUSH
14229: LD_INT 17
14231: PPUSH
14232: LD_INT 22
14234: PUSH
14235: LD_INT 3
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: LD_INT 24
14247: PUSH
14248: LD_INT 1000
14250: PUSH
14251: EMPTY
14252: LIST
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PPUSH
14263: CALL_OW 70
14267: PUSH
14268: LD_INT 1
14270: GREATER
14271: AND
14272: IFFALSE 14335
14274: GO 14276
14276: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14277: LD_EXP 35
14281: PPUSH
14282: LD_STRING D16A-Gny-1
14284: PPUSH
14285: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14289: LD_EXP 39
14293: PPUSH
14294: LD_STRING D16A-Kov-1
14296: PPUSH
14297: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14301: LD_EXP 35
14305: PPUSH
14306: CALL_OW 302
14310: PUSH
14311: LD_EXP 39
14315: PPUSH
14316: CALL_OW 302
14320: OR
14321: IFFALSE 14335
// Say ( Burlak , D16A-Bur-1 ) ;
14323: LD_EXP 34
14327: PPUSH
14328: LD_STRING D16A-Bur-1
14330: PPUSH
14331: CALL_OW 88
// end ;
14335: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14336: LD_INT 3
14338: PPUSH
14339: LD_INT 9
14341: PPUSH
14342: CALL_OW 294
14346: IFFALSE 14359
14348: GO 14350
14350: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14351: LD_ADDR_EXP 24
14355: PUSH
14356: LD_INT 1
14358: ST_TO_ADDR
// end ;
14359: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14360: LD_INT 3
14362: PPUSH
14363: LD_INT 10
14365: PPUSH
14366: CALL_OW 294
14370: IFFALSE 14390
14372: GO 14374
14374: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14375: LD_ADDR_EXP 27
14379: PUSH
14380: LD_EXP 27
14384: PPUSH
14385: CALL 54791 0 1
14389: ST_TO_ADDR
14390: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14391: LD_INT 3
14393: PPUSH
14394: LD_INT 11
14396: PPUSH
14397: CALL_OW 294
14401: IFFALSE 14421
14403: GO 14405
14405: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14406: LD_ADDR_EXP 27
14410: PUSH
14411: LD_EXP 27
14415: PPUSH
14416: CALL 54791 0 1
14420: ST_TO_ADDR
14421: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14422: LD_INT 3
14424: PPUSH
14425: LD_INT 12
14427: PPUSH
14428: CALL_OW 294
14432: IFFALSE 14452
14434: GO 14436
14436: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14437: LD_ADDR_EXP 27
14441: PUSH
14442: LD_EXP 27
14446: PPUSH
14447: CALL 54791 0 1
14451: ST_TO_ADDR
14452: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14453: LD_INT 3
14455: PPUSH
14456: LD_INT 13
14458: PPUSH
14459: CALL_OW 294
14463: IFFALSE 14483
14465: GO 14467
14467: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14468: LD_ADDR_EXP 27
14472: PUSH
14473: LD_EXP 27
14477: PPUSH
14478: CALL 54791 0 1
14482: ST_TO_ADDR
14483: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14484: LD_INT 3
14486: PPUSH
14487: LD_INT 14
14489: PPUSH
14490: CALL_OW 294
14494: IFFALSE 14514
14496: GO 14498
14498: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14499: LD_ADDR_EXP 27
14503: PUSH
14504: LD_EXP 27
14508: PPUSH
14509: CALL 54791 0 1
14513: ST_TO_ADDR
14514: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14515: LD_EXP 27
14519: PUSH
14520: LD_INT 5
14522: GREATEREQUAL
14523: PUSH
14524: LD_EXP 14
14528: AND
14529: IFFALSE 14549
14531: GO 14533
14533: DISABLE
// begin allMapPointsSpotted := true ;
14534: LD_ADDR_EXP 26
14538: PUSH
14539: LD_INT 1
14541: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14542: LD_STRING M10
14544: PPUSH
14545: CALL_OW 337
// end ;
14549: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14550: LD_EXP 26
14554: PUSH
14555: LD_EXP 22
14559: AND
14560: IFFALSE 14572
14562: GO 14564
14564: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14565: LD_STRING M10a
14567: PPUSH
14568: CALL_OW 337
// end ;
14572: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14573: LD_EXP 14
14577: IFFALSE 15231
14579: GO 14581
14581: DISABLE
14582: LD_INT 0
14584: PPUSH
14585: PPUSH
14586: PPUSH
14587: PPUSH
14588: PPUSH
// begin wasOutsideBeria := false ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// wantToTalk := false ;
14597: LD_ADDR_VAR 0 2
14601: PUSH
14602: LD_INT 0
14604: ST_TO_ADDR
// westOutpostReported := false ;
14605: LD_ADDR_VAR 0 4
14609: PUSH
14610: LD_INT 0
14612: ST_TO_ADDR
// eastOutpostReported := false ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// timer := 0 0$0 ;
14621: LD_ADDR_VAR 0 1
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14629: LD_INT 70
14631: PPUSH
14632: CALL_OW 67
// timer := timer + 0 0$2 ;
14636: LD_ADDR_VAR 0 1
14640: PUSH
14641: LD_VAR 0 1
14645: PUSH
14646: LD_INT 70
14648: PLUS
14649: ST_TO_ADDR
// if timer >= 0 0$30 then
14650: LD_VAR 0 1
14654: PUSH
14655: LD_INT 1050
14657: GREATEREQUAL
14658: IFFALSE 14668
// wantToTalk := true ;
14660: LD_ADDR_VAR 0 2
14664: PUSH
14665: LD_INT 1
14667: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 30 ] ] ] ) then
14668: LD_INT 22
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: PUSH
14678: LD_INT 3
14680: PUSH
14681: LD_INT 91
14683: PUSH
14684: LD_INT 106
14686: PUSH
14687: LD_INT 30
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: EMPTY
14696: LIST
14697: LIST
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PPUSH
14703: CALL_OW 69
14707: IFFALSE 14717
// wasOutsideBeria := true ;
14709: LD_ADDR_VAR 0 3
14713: PUSH
14714: LD_INT 1
14716: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14717: LD_VAR 0 2
14721: PUSH
14722: LD_VAR 0 3
14726: AND
14727: PUSH
14728: LD_EXP 34
14732: PPUSH
14733: LD_EXP 40
14737: PPUSH
14738: CALL_OW 296
14742: PUSH
14743: LD_INT 8
14745: LESS
14746: PUSH
14747: LD_EXP 34
14751: PPUSH
14752: CALL_OW 310
14756: PPUSH
14757: LD_EXP 40
14761: PPUSH
14762: CALL_OW 296
14766: PUSH
14767: LD_INT 8
14769: LESS
14770: OR
14771: AND
14772: IFFALSE 15120
// begin timer := 0 0$0 ;
14774: LD_ADDR_VAR 0 1
14778: PUSH
14779: LD_INT 0
14781: ST_TO_ADDR
// wantToTalk := false ;
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// wasOutsideBeria := false ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 0
14797: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14798: LD_EXP 40
14802: PPUSH
14803: CALL_OW 87
// DialogueOn ;
14807: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14811: LD_EXP 40
14815: PPUSH
14816: LD_STRING D25-Pla-1
14818: PPUSH
14819: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14823: LD_VAR 0 4
14827: NOT
14828: PUSH
14829: LD_VAR 0 5
14833: NOT
14834: AND
14835: PUSH
14836: LD_EXP 20
14840: AND
14841: PUSH
14842: LD_EXP 21
14846: AND
14847: IFFALSE 14927
// begin westOutpostReported := true ;
14849: LD_ADDR_VAR 0 4
14853: PUSH
14854: LD_INT 1
14856: ST_TO_ADDR
// eastOutpostReported := true ;
14857: LD_ADDR_VAR 0 5
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
14865: LD_EXP 34
14869: PPUSH
14870: LD_STRING D25-Bur-1
14872: PPUSH
14873: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14877: LD_EXP 24
14881: PUSH
14882: LD_EXP 22
14886: NOT
14887: AND
14888: IFFALSE 14925
// begin Say ( Burlak , D25b-Bur-1 ) ;
14890: LD_EXP 34
14894: PPUSH
14895: LD_STRING D25b-Bur-1
14897: PPUSH
14898: CALL_OW 88
// if not reinforcementsGained then
14902: LD_EXP 25
14906: NOT
14907: IFFALSE 14925
// begin Say ( Platonov , D25b-Pla-1 ) ;
14909: LD_EXP 40
14913: PPUSH
14914: LD_STRING D25b-Pla-1
14916: PPUSH
14917: CALL_OW 88
// SendReinforcements ( ) ;
14921: CALL 3242 0 0
// end ; end ; end else
14925: GO 15116
// if not westOutpostReported and westOutpostDiscovered then
14927: LD_VAR 0 4
14931: NOT
14932: PUSH
14933: LD_EXP 20
14937: AND
14938: IFFALSE 15010
// begin westOutpostReported := true ;
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_INT 1
14947: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
14948: LD_EXP 34
14952: PPUSH
14953: LD_STRING D25a-Bur-1b
14955: PPUSH
14956: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14960: LD_EXP 24
14964: PUSH
14965: LD_EXP 22
14969: NOT
14970: AND
14971: IFFALSE 15008
// begin Say ( Burlak , D25b-Bur-1 ) ;
14973: LD_EXP 34
14977: PPUSH
14978: LD_STRING D25b-Bur-1
14980: PPUSH
14981: CALL_OW 88
// if not reinforcementsGained then
14985: LD_EXP 25
14989: NOT
14990: IFFALSE 15008
// begin Say ( Platonov , D25b-Pla-1 ) ;
14992: LD_EXP 40
14996: PPUSH
14997: LD_STRING D25b-Pla-1
14999: PPUSH
15000: CALL_OW 88
// SendReinforcements ( ) ;
15004: CALL 3242 0 0
// end ; end ; end else
15008: GO 15116
// if not eastOutpostReported and eastOutpostDiscovered then
15010: LD_VAR 0 5
15014: NOT
15015: PUSH
15016: LD_EXP 21
15020: AND
15021: IFFALSE 15045
// begin eastOutpostReported := true ;
15023: LD_ADDR_VAR 0 5
15027: PUSH
15028: LD_INT 1
15030: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15031: LD_EXP 34
15035: PPUSH
15036: LD_STRING D25a-Bur-1a
15038: PPUSH
15039: CALL_OW 88
// end else
15043: GO 15116
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15045: LD_EXP 20
15049: NOT
15050: PUSH
15051: LD_EXP 21
15055: NOT
15056: OR
15057: IFFALSE 15085
// begin Say ( Burlak , D25a-Bur-1 ) ;
15059: LD_EXP 34
15063: PPUSH
15064: LD_STRING D25a-Bur-1
15066: PPUSH
15067: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15071: LD_EXP 40
15075: PPUSH
15076: LD_STRING D25c-Pla-1
15078: PPUSH
15079: CALL_OW 88
// end else
15083: GO 15116
// if not allMapPointsSpotted then
15085: LD_EXP 26
15089: NOT
15090: IFFALSE 15116
// begin Say ( Burlak , D25a-Bur-1 ) ;
15092: LD_EXP 34
15096: PPUSH
15097: LD_STRING D25a-Bur-1
15099: PPUSH
15100: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15104: LD_EXP 40
15108: PPUSH
15109: LD_STRING D25c-Pla-1a
15111: PPUSH
15112: CALL_OW 88
// end ; DialogueOff ;
15116: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15120: LD_EXP 26
15124: PUSH
15125: LD_EXP 22
15129: AND
15130: IFFALSE 14629
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15132: LD_INT 22
15134: PUSH
15135: LD_INT 3
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 21
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 91
15154: PUSH
15155: LD_EXP 40
15159: PUSH
15160: LD_INT 10
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: LIST
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: LIST
15172: PPUSH
15173: CALL_OW 69
15177: IFFALSE 15220
// begin if not belkovDied and not belkovSaved then
15179: LD_EXP 19
15183: NOT
15184: PUSH
15185: LD_EXP 28
15189: NOT
15190: AND
15191: IFFALSE 15214
// begin if Query ( QContMission ) = 1 then
15193: LD_STRING QContMission
15195: PPUSH
15196: CALL_OW 97
15200: PUSH
15201: LD_INT 1
15203: EQUAL
15204: IFFALSE 15212
// begin EndMission ;
15206: CALL 15234 0 0
// exit ;
15210: GO 15231
// end ; end else
15212: GO 15220
// begin EndMission ;
15214: CALL 15234 0 0
// exit ;
15218: GO 15231
// end ; end ; wait ( 0 0$10 ) ;
15220: LD_INT 350
15222: PPUSH
15223: CALL_OW 67
// until false ;
15227: LD_INT 0
15229: IFFALSE 15132
// end ;
15231: PPOPN 5
15233: END
// function EndMission ; var i , tmp ; begin
15234: LD_INT 0
15236: PPUSH
15237: PPUSH
15238: PPUSH
// if initiative then
15239: LD_EXP 31
15243: IFFALSE 15257
// AddMedal ( Initiative , 1 ) else
15245: LD_STRING Initiative
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: CALL_OW 101
15255: GO 15288
// if not eastOutpostDestroyed then
15257: LD_EXP 23
15261: NOT
15262: IFFALSE 15277
// AddMedal ( Initiative , - 2 ) else
15264: LD_STRING Initiative
15266: PPUSH
15267: LD_INT 2
15269: NEG
15270: PPUSH
15271: CALL_OW 101
15275: GO 15288
// AddMedal ( Initiative , - 1 ) ;
15277: LD_STRING Initiative
15279: PPUSH
15280: LD_INT 1
15282: NEG
15283: PPUSH
15284: CALL_OW 101
// if not belkovDied and belkovSaved then
15288: LD_EXP 19
15292: NOT
15293: PUSH
15294: LD_EXP 28
15298: AND
15299: IFFALSE 15313
// AddMedal ( Belkov , 1 ) else
15301: LD_STRING Belkov
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: CALL_OW 101
15311: GO 15408
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15313: LD_EXP 45
15317: PPUSH
15318: LD_INT 22
15320: PUSH
15321: LD_INT 3
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PPUSH
15328: CALL_OW 72
15332: IFFALSE 15346
// AddMedal ( Belkov , 2 ) else
15334: LD_STRING Belkov
15336: PPUSH
15337: LD_INT 2
15339: PPUSH
15340: CALL_OW 101
15344: GO 15408
// if belkovDied then
15346: LD_EXP 19
15350: IFFALSE 15365
// AddMedal ( Belkov , - 1 ) else
15352: LD_STRING Belkov
15354: PPUSH
15355: LD_INT 1
15357: NEG
15358: PPUSH
15359: CALL_OW 101
15363: GO 15408
// if not belkovSaved then
15365: LD_EXP 28
15369: NOT
15370: IFFALSE 15385
// AddMedal ( Belkov , - 2 ) else
15372: LD_STRING Belkov
15374: PPUSH
15375: LD_INT 2
15377: NEG
15378: PPUSH
15379: CALL_OW 101
15383: GO 15408
// if belkovDied and belkovSaved then
15385: LD_EXP 19
15389: PUSH
15390: LD_EXP 28
15394: AND
15395: IFFALSE 15408
// AddMedal ( Belkov , - 3 ) ;
15397: LD_STRING Belkov
15399: PPUSH
15400: LD_INT 3
15402: NEG
15403: PPUSH
15404: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15408: LD_EXP 30
15412: PUSH
15413: LD_INT 0
15415: EQUAL
15416: IFFALSE 15430
// AddMedal ( NoLosses , 1 ) else
15418: LD_STRING NoLosses
15420: PPUSH
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 101
15428: GO 15441
// AddMedal ( NoLosses , - 1 ) ;
15430: LD_STRING NoLosses
15432: PPUSH
15433: LD_INT 1
15435: NEG
15436: PPUSH
15437: CALL_OW 101
// GiveMedals ( Main ) ;
15441: LD_STRING Main
15443: PPUSH
15444: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15448: LD_INT 22
15450: PUSH
15451: LD_INT 3
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 23
15460: PUSH
15461: LD_INT 3
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 21
15470: PUSH
15471: LD_INT 1
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: PPUSH
15488: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15492: LD_EXP 34
15496: PPUSH
15497: LD_EXP 3
15501: PUSH
15502: LD_STRING Burlak
15504: STR
15505: PPUSH
15506: CALL_OW 38
// if IsLive ( Gnyevko ) then
15510: LD_EXP 35
15514: PPUSH
15515: CALL_OW 300
15519: IFFALSE 15539
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15521: LD_EXP 35
15525: PPUSH
15526: LD_EXP 3
15530: PUSH
15531: LD_STRING Gnyevko
15533: STR
15534: PPUSH
15535: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15539: LD_EXP 39
15543: PPUSH
15544: CALL_OW 300
15548: IFFALSE 15568
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15550: LD_EXP 39
15554: PPUSH
15555: LD_EXP 3
15559: PUSH
15560: LD_STRING Kovalyuk
15562: STR
15563: PPUSH
15564: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15568: LD_EXP 36
15572: PPUSH
15573: CALL_OW 300
15577: PUSH
15578: LD_EXP 28
15582: AND
15583: IFFALSE 15603
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15585: LD_EXP 36
15589: PPUSH
15590: LD_EXP 3
15594: PUSH
15595: LD_STRING Belkov
15597: STR
15598: PPUSH
15599: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15603: LD_EXP 37
15607: PPUSH
15608: CALL_OW 300
15612: IFFALSE 15632
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15614: LD_EXP 37
15618: PPUSH
15619: LD_EXP 3
15623: PUSH
15624: LD_STRING Kirilenkova
15626: STR
15627: PPUSH
15628: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15632: LD_INT 22
15634: PUSH
15635: LD_INT 3
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: LD_INT 23
15644: PUSH
15645: LD_INT 3
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: LIST
15666: PPUSH
15667: CALL_OW 69
15671: PUSH
15672: LD_EXP 34
15676: PUSH
15677: LD_EXP 35
15681: PUSH
15682: LD_EXP 39
15686: PUSH
15687: LD_EXP 36
15691: PUSH
15692: LD_EXP 37
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: DIFF
15704: PPUSH
15705: LD_EXP 3
15709: PUSH
15710: LD_STRING burlakTeam
15712: STR
15713: PPUSH
15714: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15718: LD_INT 22
15720: PUSH
15721: LD_INT 6
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 23
15730: PUSH
15731: LD_INT 3
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: LD_INT 21
15740: PUSH
15741: LD_INT 1
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: LIST
15752: PPUSH
15753: CALL_OW 69
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_EXP 38
15767: PUSH
15768: LD_EXP 36
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_EXP 45
15782: UNION
15783: DIFF
15784: PPUSH
15785: LD_EXP 3
15789: PUSH
15790: LD_STRING kirovTeam
15792: STR
15793: PPUSH
15794: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15798: LD_EXP 23
15802: PPUSH
15803: LD_STRING 02_EasternOutpostDestroyed
15805: PPUSH
15806: CALL_OW 39
// tmp := [ ] ;
15810: LD_ADDR_VAR 0 3
15814: PUSH
15815: EMPTY
15816: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15817: LD_ADDR_VAR 0 2
15821: PUSH
15822: LD_INT 22
15824: PUSH
15825: LD_INT 3
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: LD_INT 21
15834: PUSH
15835: LD_INT 3
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PPUSH
15846: CALL_OW 69
15850: PUSH
15851: FOR_IN
15852: IFFALSE 15928
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15854: LD_ADDR_VAR 0 3
15858: PUSH
15859: LD_VAR 0 3
15863: PPUSH
15864: LD_VAR 0 2
15868: PPUSH
15869: CALL_OW 266
15873: PUSH
15874: LD_VAR 0 2
15878: PPUSH
15879: CALL_OW 267
15883: PUSH
15884: LD_VAR 0 2
15888: PPUSH
15889: CALL_OW 250
15893: PUSH
15894: LD_VAR 0 2
15898: PPUSH
15899: CALL_OW 251
15903: PUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL_OW 254
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: PPUSH
15921: CALL 53438 0 2
15925: ST_TO_ADDR
15926: GO 15851
15928: POP
15929: POP
// SaveVariable ( tmp , 02_Beria ) ;
15930: LD_VAR 0 3
15934: PPUSH
15935: LD_STRING 02_Beria
15937: PPUSH
15938: CALL_OW 39
// tmp := [ ] ;
15942: LD_ADDR_VAR 0 3
15946: PUSH
15947: EMPTY
15948: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
15949: LD_ADDR_VAR 0 2
15953: PUSH
15954: LD_INT 22
15956: PUSH
15957: LD_INT 6
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PPUSH
15978: CALL_OW 69
15982: PUSH
15983: FOR_IN
15984: IFFALSE 16060
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15986: LD_ADDR_VAR 0 3
15990: PUSH
15991: LD_VAR 0 3
15995: PPUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: CALL_OW 266
16005: PUSH
16006: LD_VAR 0 2
16010: PPUSH
16011: CALL_OW 267
16015: PUSH
16016: LD_VAR 0 2
16020: PPUSH
16021: CALL_OW 250
16025: PUSH
16026: LD_VAR 0 2
16030: PPUSH
16031: CALL_OW 251
16035: PUSH
16036: LD_VAR 0 2
16040: PPUSH
16041: CALL_OW 254
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PPUSH
16053: CALL 53438 0 2
16057: ST_TO_ADDR
16058: GO 15983
16060: POP
16061: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16062: LD_VAR 0 3
16066: PPUSH
16067: LD_STRING 02_Kirov
16069: PPUSH
16070: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16074: LD_INT 22
16076: PUSH
16077: LD_INT 3
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PUSH
16084: LD_INT 21
16086: PUSH
16087: LD_INT 2
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PPUSH
16098: CALL_OW 69
16102: PPUSH
16103: CALL 18859 0 1
16107: PPUSH
16108: LD_STRING 02_VehiclesCount
16110: PPUSH
16111: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16115: LD_INT 22
16117: PUSH
16118: LD_INT 6
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: LD_INT 21
16127: PUSH
16128: LD_INT 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PPUSH
16139: CALL_OW 69
16143: PPUSH
16144: CALL 18859 0 1
16148: PPUSH
16149: LD_STRING 02_KirovVehiclesCount
16151: PPUSH
16152: CALL_OW 39
// YouWin ;
16156: CALL_OW 103
// end ; end_of_file
16160: LD_VAR 0 1
16164: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16165: LD_INT 420
16167: PPUSH
16168: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16172: LD_VAR 0 2
16176: PPUSH
16177: LD_VAR 0 3
16181: PPUSH
16182: CALL 7940 0 2
// end ;
16186: PPOPN 5
16188: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16189: LD_VAR 0 1
16193: PPUSH
16194: CALL 71501 0 1
// if un = Burlak then
16198: LD_VAR 0 1
16202: PUSH
16203: LD_EXP 34
16207: EQUAL
16208: IFFALSE 16217
// YouLost ( Burlak ) ;
16210: LD_STRING Burlak
16212: PPUSH
16213: CALL_OW 104
// if un = Platonov then
16217: LD_VAR 0 1
16221: PUSH
16222: LD_EXP 40
16226: EQUAL
16227: IFFALSE 16236
// YouLost ( Platonov ) ;
16229: LD_STRING Platonov
16231: PPUSH
16232: CALL_OW 104
// if un = Kurin then
16236: LD_VAR 0 1
16240: PUSH
16241: LD_EXP 38
16245: EQUAL
16246: IFFALSE 16255
// YouLost ( Kurin ) ;
16248: LD_STRING Kurin
16250: PPUSH
16251: CALL_OW 104
// if un = Belkov then
16255: LD_VAR 0 1
16259: PUSH
16260: LD_EXP 36
16264: EQUAL
16265: IFFALSE 16275
// belkovDied := true ;
16267: LD_ADDR_EXP 19
16271: PUSH
16272: LD_INT 1
16274: ST_TO_ADDR
// if un in belkovTeam then
16275: LD_VAR 0 1
16279: PUSH
16280: LD_EXP 45
16284: IN
16285: IFFALSE 16318
// begin belkovTeam := belkovTeam diff un ;
16287: LD_ADDR_EXP 45
16291: PUSH
16292: LD_EXP 45
16296: PUSH
16297: LD_VAR 0 1
16301: DIFF
16302: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16303: LD_ADDR_EXP 29
16307: PUSH
16308: LD_EXP 29
16312: PPUSH
16313: CALL 54791 0 1
16317: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16318: LD_VAR 0 1
16322: PUSH
16323: LD_INT 22
16325: PUSH
16326: LD_INT 3
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 1
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: LD_INT 23
16345: PUSH
16346: LD_INT 3
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: LIST
16357: PPUSH
16358: CALL_OW 69
16362: IN
16363: IFFALSE 16380
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16365: LD_ADDR_EXP 30
16369: PUSH
16370: LD_EXP 30
16374: PPUSH
16375: CALL 54791 0 1
16379: ST_TO_ADDR
// if un in usWestForces then
16380: LD_VAR 0 1
16384: PUSH
16385: LD_EXP 46
16389: IN
16390: IFFALSE 16408
// usWestForces := usWestForces diff un ;
16392: LD_ADDR_EXP 46
16396: PUSH
16397: LD_EXP 46
16401: PUSH
16402: LD_VAR 0 1
16406: DIFF
16407: ST_TO_ADDR
// if un in usEastForces then
16408: LD_VAR 0 1
16412: PUSH
16413: LD_EXP 47
16417: IN
16418: IFFALSE 16436
// usEastForces := usEastForces diff un ;
16420: LD_ADDR_EXP 47
16424: PUSH
16425: LD_EXP 47
16429: PUSH
16430: LD_VAR 0 1
16434: DIFF
16435: ST_TO_ADDR
// end ;
16436: PPOPN 1
16438: END
// on BuildingComplete ( b ) do var mech ;
16439: LD_INT 0
16441: PPUSH
// begin if GetSide ( b ) = 3 then
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 255
16451: PUSH
16452: LD_INT 3
16454: EQUAL
16455: IFFALSE 16514
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 266
16466: PUSH
16467: LD_INT 6
16469: PUSH
16470: LD_INT 7
16472: PUSH
16473: LD_INT 8
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: IN
16481: IFFALSE 16491
// hasLab := true ;
16483: LD_ADDR_EXP 9
16487: PUSH
16488: LD_INT 1
16490: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16491: LD_VAR 0 1
16495: PPUSH
16496: CALL_OW 266
16500: PUSH
16501: LD_INT 2
16503: EQUAL
16504: IFFALSE 16514
// hasWorkshop := true ;
16506: LD_ADDR_EXP 10
16510: PUSH
16511: LD_INT 1
16513: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16514: LD_VAR 0 1
16518: PPUSH
16519: CALL_OW 255
16523: PUSH
16524: LD_INT 6
16526: EQUAL
16527: IFFALSE 16601
// begin if GetBType ( b ) = b_workshop then
16529: LD_VAR 0 1
16533: PPUSH
16534: CALL_OW 266
16538: PUSH
16539: LD_INT 2
16541: EQUAL
16542: IFFALSE 16601
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16544: LD_ADDR_VAR 0 2
16548: PUSH
16549: LD_EXP 43
16553: PPUSH
16554: LD_INT 25
16556: PUSH
16557: LD_INT 3
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PPUSH
16564: CALL_OW 72
16568: ST_TO_ADDR
// if not mech then
16569: LD_VAR 0 2
16573: NOT
16574: IFFALSE 16578
// exit ;
16576: GO 16601
// ComExit ( mech ) ;
16578: LD_VAR 0 2
16582: PPUSH
16583: CALL 53826 0 1
// AddComEnterUnit ( mech , b ) ;
16587: LD_VAR 0 2
16591: PPUSH
16592: LD_VAR 0 1
16596: PPUSH
16597: CALL_OW 180
// end ; end ; end ;
16601: PPOPN 2
16603: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16604: LD_VAR 0 1
16608: PPUSH
16609: LD_VAR 0 2
16613: PPUSH
16614: CALL 71623 0 2
// if GetSide ( vehicle ) = 3 then
16618: LD_VAR 0 1
16622: PPUSH
16623: CALL_OW 255
16627: PUSH
16628: LD_INT 3
16630: EQUAL
16631: IFFALSE 16656
// begin hasTank := true ;
16633: LD_ADDR_EXP 12
16637: PUSH
16638: LD_INT 1
16640: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16641: LD_ADDR_EXP 15
16645: PUSH
16646: LD_EXP 15
16650: PPUSH
16651: CALL 54791 0 1
16655: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 255
16665: PUSH
16666: LD_INT 6
16668: EQUAL
16669: IFFALSE 16680
// KirovAttack ( vehicle ) ;
16671: LD_VAR 0 1
16675: PPUSH
16676: CALL 3548 0 1
// end ;
16680: PPOPN 2
16682: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16683: LD_VAR 0 1
16687: PUSH
16688: LD_EXP 33
16692: EQUAL
16693: IFFALSE 16699
// BelkovAttackScript ;
16695: CALL 1613 0 0
// end ;
16699: PPOPN 1
16701: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16702: LD_INT 0
16704: PPUSH
// begin if side = 1 then
16705: LD_VAR 0 3
16709: PUSH
16710: LD_INT 1
16712: EQUAL
16713: IFFALSE 16723
// vehCaptured := true ;
16715: LD_ADDR_EXP 16
16719: PUSH
16720: LD_INT 1
16722: ST_TO_ADDR
// end ;
16723: PPOPN 5
16725: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16726: LD_VAR 0 1
16730: PUSH
16731: LD_INT 3
16733: EQUAL
16734: PUSH
16735: LD_VAR 0 2
16739: PUSH
16740: LD_INT 6
16742: EQUAL
16743: AND
16744: IFFALSE 16754
// allianceAttacked := true ;
16746: LD_ADDR_EXP 13
16750: PUSH
16751: LD_INT 1
16753: ST_TO_ADDR
// end ; end_of_file
16754: PPOPN 2
16756: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16757: LD_INT 0
16759: PPUSH
16760: PPUSH
// if exist_mode then
16761: LD_VAR 0 2
16765: IFFALSE 16790
// unit := CreateCharacter ( prefix & ident ) else
16767: LD_ADDR_VAR 0 5
16771: PUSH
16772: LD_VAR 0 3
16776: PUSH
16777: LD_VAR 0 1
16781: STR
16782: PPUSH
16783: CALL_OW 34
16787: ST_TO_ADDR
16788: GO 16805
// unit := NewCharacter ( ident ) ;
16790: LD_ADDR_VAR 0 5
16794: PUSH
16795: LD_VAR 0 1
16799: PPUSH
16800: CALL_OW 25
16804: ST_TO_ADDR
// result := unit ;
16805: LD_ADDR_VAR 0 4
16809: PUSH
16810: LD_VAR 0 5
16814: ST_TO_ADDR
// end ;
16815: LD_VAR 0 4
16819: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16820: LD_INT 0
16822: PPUSH
16823: PPUSH
// if not side or not nation then
16824: LD_VAR 0 1
16828: NOT
16829: PUSH
16830: LD_VAR 0 2
16834: NOT
16835: OR
16836: IFFALSE 16840
// exit ;
16838: GO 17608
// case nation of nation_american :
16840: LD_VAR 0 2
16844: PUSH
16845: LD_INT 1
16847: DOUBLE
16848: EQUAL
16849: IFTRUE 16853
16851: GO 17067
16853: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16854: LD_ADDR_VAR 0 4
16858: PUSH
16859: LD_INT 35
16861: PUSH
16862: LD_INT 45
16864: PUSH
16865: LD_INT 46
16867: PUSH
16868: LD_INT 47
16870: PUSH
16871: LD_INT 82
16873: PUSH
16874: LD_INT 83
16876: PUSH
16877: LD_INT 84
16879: PUSH
16880: LD_INT 85
16882: PUSH
16883: LD_INT 86
16885: PUSH
16886: LD_INT 1
16888: PUSH
16889: LD_INT 2
16891: PUSH
16892: LD_INT 6
16894: PUSH
16895: LD_INT 15
16897: PUSH
16898: LD_INT 16
16900: PUSH
16901: LD_INT 7
16903: PUSH
16904: LD_INT 12
16906: PUSH
16907: LD_INT 13
16909: PUSH
16910: LD_INT 10
16912: PUSH
16913: LD_INT 14
16915: PUSH
16916: LD_INT 20
16918: PUSH
16919: LD_INT 21
16921: PUSH
16922: LD_INT 22
16924: PUSH
16925: LD_INT 25
16927: PUSH
16928: LD_INT 32
16930: PUSH
16931: LD_INT 27
16933: PUSH
16934: LD_INT 36
16936: PUSH
16937: LD_INT 69
16939: PUSH
16940: LD_INT 39
16942: PUSH
16943: LD_INT 34
16945: PUSH
16946: LD_INT 40
16948: PUSH
16949: LD_INT 48
16951: PUSH
16952: LD_INT 49
16954: PUSH
16955: LD_INT 50
16957: PUSH
16958: LD_INT 51
16960: PUSH
16961: LD_INT 52
16963: PUSH
16964: LD_INT 53
16966: PUSH
16967: LD_INT 54
16969: PUSH
16970: LD_INT 55
16972: PUSH
16973: LD_INT 56
16975: PUSH
16976: LD_INT 57
16978: PUSH
16979: LD_INT 58
16981: PUSH
16982: LD_INT 59
16984: PUSH
16985: LD_INT 60
16987: PUSH
16988: LD_INT 61
16990: PUSH
16991: LD_INT 62
16993: PUSH
16994: LD_INT 80
16996: PUSH
16997: LD_INT 82
16999: PUSH
17000: LD_INT 83
17002: PUSH
17003: LD_INT 84
17005: PUSH
17006: LD_INT 85
17008: PUSH
17009: LD_INT 86
17011: PUSH
17012: EMPTY
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: ST_TO_ADDR
17065: GO 17532
17067: LD_INT 2
17069: DOUBLE
17070: EQUAL
17071: IFTRUE 17075
17073: GO 17301
17075: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17076: LD_ADDR_VAR 0 4
17080: PUSH
17081: LD_INT 35
17083: PUSH
17084: LD_INT 45
17086: PUSH
17087: LD_INT 46
17089: PUSH
17090: LD_INT 47
17092: PUSH
17093: LD_INT 82
17095: PUSH
17096: LD_INT 83
17098: PUSH
17099: LD_INT 84
17101: PUSH
17102: LD_INT 85
17104: PUSH
17105: LD_INT 87
17107: PUSH
17108: LD_INT 70
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: LD_INT 11
17116: PUSH
17117: LD_INT 3
17119: PUSH
17120: LD_INT 4
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 6
17128: PUSH
17129: LD_INT 15
17131: PUSH
17132: LD_INT 18
17134: PUSH
17135: LD_INT 7
17137: PUSH
17138: LD_INT 17
17140: PUSH
17141: LD_INT 8
17143: PUSH
17144: LD_INT 20
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 22
17152: PUSH
17153: LD_INT 72
17155: PUSH
17156: LD_INT 26
17158: PUSH
17159: LD_INT 69
17161: PUSH
17162: LD_INT 39
17164: PUSH
17165: LD_INT 40
17167: PUSH
17168: LD_INT 41
17170: PUSH
17171: LD_INT 42
17173: PUSH
17174: LD_INT 43
17176: PUSH
17177: LD_INT 48
17179: PUSH
17180: LD_INT 49
17182: PUSH
17183: LD_INT 50
17185: PUSH
17186: LD_INT 51
17188: PUSH
17189: LD_INT 52
17191: PUSH
17192: LD_INT 53
17194: PUSH
17195: LD_INT 54
17197: PUSH
17198: LD_INT 55
17200: PUSH
17201: LD_INT 56
17203: PUSH
17204: LD_INT 60
17206: PUSH
17207: LD_INT 61
17209: PUSH
17210: LD_INT 62
17212: PUSH
17213: LD_INT 66
17215: PUSH
17216: LD_INT 67
17218: PUSH
17219: LD_INT 68
17221: PUSH
17222: LD_INT 81
17224: PUSH
17225: LD_INT 82
17227: PUSH
17228: LD_INT 83
17230: PUSH
17231: LD_INT 84
17233: PUSH
17234: LD_INT 85
17236: PUSH
17237: LD_INT 87
17239: PUSH
17240: LD_INT 88
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: ST_TO_ADDR
17299: GO 17532
17301: LD_INT 3
17303: DOUBLE
17304: EQUAL
17305: IFTRUE 17309
17307: GO 17531
17309: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17310: LD_ADDR_VAR 0 4
17314: PUSH
17315: LD_INT 46
17317: PUSH
17318: LD_INT 47
17320: PUSH
17321: LD_INT 1
17323: PUSH
17324: LD_INT 2
17326: PUSH
17327: LD_INT 82
17329: PUSH
17330: LD_INT 83
17332: PUSH
17333: LD_INT 84
17335: PUSH
17336: LD_INT 85
17338: PUSH
17339: LD_INT 86
17341: PUSH
17342: LD_INT 11
17344: PUSH
17345: LD_INT 9
17347: PUSH
17348: LD_INT 20
17350: PUSH
17351: LD_INT 19
17353: PUSH
17354: LD_INT 21
17356: PUSH
17357: LD_INT 24
17359: PUSH
17360: LD_INT 22
17362: PUSH
17363: LD_INT 25
17365: PUSH
17366: LD_INT 28
17368: PUSH
17369: LD_INT 29
17371: PUSH
17372: LD_INT 30
17374: PUSH
17375: LD_INT 31
17377: PUSH
17378: LD_INT 37
17380: PUSH
17381: LD_INT 38
17383: PUSH
17384: LD_INT 32
17386: PUSH
17387: LD_INT 27
17389: PUSH
17390: LD_INT 33
17392: PUSH
17393: LD_INT 69
17395: PUSH
17396: LD_INT 39
17398: PUSH
17399: LD_INT 34
17401: PUSH
17402: LD_INT 40
17404: PUSH
17405: LD_INT 71
17407: PUSH
17408: LD_INT 23
17410: PUSH
17411: LD_INT 44
17413: PUSH
17414: LD_INT 48
17416: PUSH
17417: LD_INT 49
17419: PUSH
17420: LD_INT 50
17422: PUSH
17423: LD_INT 51
17425: PUSH
17426: LD_INT 52
17428: PUSH
17429: LD_INT 53
17431: PUSH
17432: LD_INT 54
17434: PUSH
17435: LD_INT 55
17437: PUSH
17438: LD_INT 56
17440: PUSH
17441: LD_INT 57
17443: PUSH
17444: LD_INT 58
17446: PUSH
17447: LD_INT 59
17449: PUSH
17450: LD_INT 63
17452: PUSH
17453: LD_INT 64
17455: PUSH
17456: LD_INT 65
17458: PUSH
17459: LD_INT 82
17461: PUSH
17462: LD_INT 83
17464: PUSH
17465: LD_INT 84
17467: PUSH
17468: LD_INT 85
17470: PUSH
17471: LD_INT 86
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: ST_TO_ADDR
17529: GO 17532
17531: POP
// if state > - 1 and state < 3 then
17532: LD_VAR 0 3
17536: PUSH
17537: LD_INT 1
17539: NEG
17540: GREATER
17541: PUSH
17542: LD_VAR 0 3
17546: PUSH
17547: LD_INT 3
17549: LESS
17550: AND
17551: IFFALSE 17608
// for i in result do
17553: LD_ADDR_VAR 0 5
17557: PUSH
17558: LD_VAR 0 4
17562: PUSH
17563: FOR_IN
17564: IFFALSE 17606
// if GetTech ( i , side ) <> state then
17566: LD_VAR 0 5
17570: PPUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 321
17580: PUSH
17581: LD_VAR 0 3
17585: NONEQUAL
17586: IFFALSE 17604
// result := result diff i ;
17588: LD_ADDR_VAR 0 4
17592: PUSH
17593: LD_VAR 0 4
17597: PUSH
17598: LD_VAR 0 5
17602: DIFF
17603: ST_TO_ADDR
17604: GO 17563
17606: POP
17607: POP
// end ;
17608: LD_VAR 0 4
17612: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17613: LD_INT 0
17615: PPUSH
17616: PPUSH
17617: PPUSH
// result := true ;
17618: LD_ADDR_VAR 0 3
17622: PUSH
17623: LD_INT 1
17625: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17626: LD_ADDR_VAR 0 5
17630: PUSH
17631: LD_VAR 0 2
17635: PPUSH
17636: CALL_OW 480
17640: ST_TO_ADDR
// if not tmp then
17641: LD_VAR 0 5
17645: NOT
17646: IFFALSE 17650
// exit ;
17648: GO 17699
// for i in tmp do
17650: LD_ADDR_VAR 0 4
17654: PUSH
17655: LD_VAR 0 5
17659: PUSH
17660: FOR_IN
17661: IFFALSE 17697
// if GetTech ( i , side ) <> state_researched then
17663: LD_VAR 0 4
17667: PPUSH
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 321
17677: PUSH
17678: LD_INT 2
17680: NONEQUAL
17681: IFFALSE 17695
// begin result := false ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 0
17690: ST_TO_ADDR
// exit ;
17691: POP
17692: POP
17693: GO 17699
// end ;
17695: GO 17660
17697: POP
17698: POP
// end ;
17699: LD_VAR 0 3
17703: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17704: LD_INT 0
17706: PPUSH
17707: PPUSH
17708: PPUSH
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
17713: PPUSH
17714: PPUSH
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17719: LD_VAR 0 1
17723: NOT
17724: PUSH
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 257
17734: PUSH
17735: LD_INT 9
17737: NONEQUAL
17738: OR
17739: IFFALSE 17743
// exit ;
17741: GO 18316
// side := GetSide ( unit ) ;
17743: LD_ADDR_VAR 0 9
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 255
17757: ST_TO_ADDR
// tech_space := tech_spacanom ;
17758: LD_ADDR_VAR 0 12
17762: PUSH
17763: LD_INT 29
17765: ST_TO_ADDR
// tech_time := tech_taurad ;
17766: LD_ADDR_VAR 0 13
17770: PUSH
17771: LD_INT 28
17773: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17774: LD_ADDR_VAR 0 11
17778: PUSH
17779: LD_VAR 0 1
17783: PPUSH
17784: CALL_OW 310
17788: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17789: LD_VAR 0 11
17793: PPUSH
17794: CALL_OW 247
17798: PUSH
17799: LD_INT 2
17801: EQUAL
17802: IFFALSE 17806
// exit ;
17804: GO 18316
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17806: LD_ADDR_VAR 0 8
17810: PUSH
17811: LD_INT 81
17813: PUSH
17814: LD_VAR 0 9
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 3
17825: PUSH
17826: LD_INT 21
17828: PUSH
17829: LD_INT 3
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PPUSH
17844: CALL_OW 69
17848: ST_TO_ADDR
// if not tmp then
17849: LD_VAR 0 8
17853: NOT
17854: IFFALSE 17858
// exit ;
17856: GO 18316
// if in_unit then
17858: LD_VAR 0 11
17862: IFFALSE 17886
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17864: LD_ADDR_VAR 0 10
17868: PUSH
17869: LD_VAR 0 8
17873: PPUSH
17874: LD_VAR 0 11
17878: PPUSH
17879: CALL_OW 74
17883: ST_TO_ADDR
17884: GO 17906
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17886: LD_ADDR_VAR 0 10
17890: PUSH
17891: LD_VAR 0 8
17895: PPUSH
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 74
17905: ST_TO_ADDR
// if not enemy then
17906: LD_VAR 0 10
17910: NOT
17911: IFFALSE 17915
// exit ;
17913: GO 18316
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17915: LD_VAR 0 11
17919: PUSH
17920: LD_VAR 0 11
17924: PPUSH
17925: LD_VAR 0 10
17929: PPUSH
17930: CALL_OW 296
17934: PUSH
17935: LD_INT 13
17937: GREATER
17938: AND
17939: PUSH
17940: LD_VAR 0 1
17944: PPUSH
17945: LD_VAR 0 10
17949: PPUSH
17950: CALL_OW 296
17954: PUSH
17955: LD_INT 12
17957: GREATER
17958: OR
17959: IFFALSE 17963
// exit ;
17961: GO 18316
// missile := [ 1 ] ;
17963: LD_ADDR_VAR 0 14
17967: PUSH
17968: LD_INT 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17974: LD_VAR 0 9
17978: PPUSH
17979: LD_VAR 0 12
17983: PPUSH
17984: CALL_OW 325
17988: IFFALSE 18017
// missile := Replace ( missile , missile + 1 , 2 ) ;
17990: LD_ADDR_VAR 0 14
17994: PUSH
17995: LD_VAR 0 14
17999: PPUSH
18000: LD_VAR 0 14
18004: PUSH
18005: LD_INT 1
18007: PLUS
18008: PPUSH
18009: LD_INT 2
18011: PPUSH
18012: CALL_OW 1
18016: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18017: LD_VAR 0 9
18021: PPUSH
18022: LD_VAR 0 13
18026: PPUSH
18027: CALL_OW 325
18031: PUSH
18032: LD_VAR 0 10
18036: PPUSH
18037: CALL_OW 255
18041: PPUSH
18042: LD_VAR 0 13
18046: PPUSH
18047: CALL_OW 325
18051: NOT
18052: AND
18053: IFFALSE 18082
// missile := Replace ( missile , missile + 1 , 3 ) ;
18055: LD_ADDR_VAR 0 14
18059: PUSH
18060: LD_VAR 0 14
18064: PPUSH
18065: LD_VAR 0 14
18069: PUSH
18070: LD_INT 1
18072: PLUS
18073: PPUSH
18074: LD_INT 3
18076: PPUSH
18077: CALL_OW 1
18081: ST_TO_ADDR
// if missile < 2 then
18082: LD_VAR 0 14
18086: PUSH
18087: LD_INT 2
18089: LESS
18090: IFFALSE 18094
// exit ;
18092: GO 18316
// x := GetX ( enemy ) ;
18094: LD_ADDR_VAR 0 4
18098: PUSH
18099: LD_VAR 0 10
18103: PPUSH
18104: CALL_OW 250
18108: ST_TO_ADDR
// y := GetY ( enemy ) ;
18109: LD_ADDR_VAR 0 5
18113: PUSH
18114: LD_VAR 0 10
18118: PPUSH
18119: CALL_OW 251
18123: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18124: LD_ADDR_VAR 0 6
18128: PUSH
18129: LD_VAR 0 4
18133: PUSH
18134: LD_INT 1
18136: NEG
18137: PPUSH
18138: LD_INT 1
18140: PPUSH
18141: CALL_OW 12
18145: PLUS
18146: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18147: LD_ADDR_VAR 0 7
18151: PUSH
18152: LD_VAR 0 5
18156: PUSH
18157: LD_INT 1
18159: NEG
18160: PPUSH
18161: LD_INT 1
18163: PPUSH
18164: CALL_OW 12
18168: PLUS
18169: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18170: LD_VAR 0 6
18174: PPUSH
18175: LD_VAR 0 7
18179: PPUSH
18180: CALL_OW 488
18184: NOT
18185: IFFALSE 18207
// begin _x := x ;
18187: LD_ADDR_VAR 0 6
18191: PUSH
18192: LD_VAR 0 4
18196: ST_TO_ADDR
// _y := y ;
18197: LD_ADDR_VAR 0 7
18201: PUSH
18202: LD_VAR 0 5
18206: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18207: LD_ADDR_VAR 0 3
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_VAR 0 14
18219: PPUSH
18220: CALL_OW 12
18224: ST_TO_ADDR
// case i of 1 :
18225: LD_VAR 0 3
18229: PUSH
18230: LD_INT 1
18232: DOUBLE
18233: EQUAL
18234: IFTRUE 18238
18236: GO 18255
18238: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18239: LD_VAR 0 1
18243: PPUSH
18244: LD_VAR 0 10
18248: PPUSH
18249: CALL_OW 115
18253: GO 18316
18255: LD_INT 2
18257: DOUBLE
18258: EQUAL
18259: IFTRUE 18263
18261: GO 18285
18263: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_VAR 0 6
18273: PPUSH
18274: LD_VAR 0 7
18278: PPUSH
18279: CALL_OW 153
18283: GO 18316
18285: LD_INT 3
18287: DOUBLE
18288: EQUAL
18289: IFTRUE 18293
18291: GO 18315
18293: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18294: LD_VAR 0 1
18298: PPUSH
18299: LD_VAR 0 6
18303: PPUSH
18304: LD_VAR 0 7
18308: PPUSH
18309: CALL_OW 154
18313: GO 18316
18315: POP
// end ;
18316: LD_VAR 0 2
18320: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18321: LD_INT 0
18323: PPUSH
18324: PPUSH
18325: PPUSH
18326: PPUSH
18327: PPUSH
18328: PPUSH
// if not unit or not building then
18329: LD_VAR 0 1
18333: NOT
18334: PUSH
18335: LD_VAR 0 2
18339: NOT
18340: OR
18341: IFFALSE 18345
// exit ;
18343: GO 18503
// x := GetX ( building ) ;
18345: LD_ADDR_VAR 0 5
18349: PUSH
18350: LD_VAR 0 2
18354: PPUSH
18355: CALL_OW 250
18359: ST_TO_ADDR
// y := GetY ( building ) ;
18360: LD_ADDR_VAR 0 6
18364: PUSH
18365: LD_VAR 0 2
18369: PPUSH
18370: CALL_OW 251
18374: ST_TO_ADDR
// for i = 0 to 5 do
18375: LD_ADDR_VAR 0 4
18379: PUSH
18380: DOUBLE
18381: LD_INT 0
18383: DEC
18384: ST_TO_ADDR
18385: LD_INT 5
18387: PUSH
18388: FOR_TO
18389: IFFALSE 18501
// begin _x := ShiftX ( x , i , 3 ) ;
18391: LD_ADDR_VAR 0 7
18395: PUSH
18396: LD_VAR 0 5
18400: PPUSH
18401: LD_VAR 0 4
18405: PPUSH
18406: LD_INT 3
18408: PPUSH
18409: CALL_OW 272
18413: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18414: LD_ADDR_VAR 0 8
18418: PUSH
18419: LD_VAR 0 6
18423: PPUSH
18424: LD_VAR 0 4
18428: PPUSH
18429: LD_INT 3
18431: PPUSH
18432: CALL_OW 273
18436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18437: LD_VAR 0 7
18441: PPUSH
18442: LD_VAR 0 8
18446: PPUSH
18447: CALL_OW 488
18451: NOT
18452: IFFALSE 18456
// continue ;
18454: GO 18388
// if HexInfo ( _x , _y ) = 0 then
18456: LD_VAR 0 7
18460: PPUSH
18461: LD_VAR 0 8
18465: PPUSH
18466: CALL_OW 428
18470: PUSH
18471: LD_INT 0
18473: EQUAL
18474: IFFALSE 18499
// begin ComMoveXY ( unit , _x , _y ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: LD_VAR 0 7
18485: PPUSH
18486: LD_VAR 0 8
18490: PPUSH
18491: CALL_OW 111
// exit ;
18495: POP
18496: POP
18497: GO 18503
// end ; end ;
18499: GO 18388
18501: POP
18502: POP
// end ;
18503: LD_VAR 0 3
18507: RET
// export function ScanBase ( side , base_area ) ; begin
18508: LD_INT 0
18510: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18511: LD_ADDR_VAR 0 3
18515: PUSH
18516: LD_VAR 0 2
18520: PPUSH
18521: LD_INT 81
18523: PUSH
18524: LD_VAR 0 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PPUSH
18533: CALL_OW 70
18537: ST_TO_ADDR
// end ;
18538: LD_VAR 0 3
18542: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18543: LD_INT 0
18545: PPUSH
18546: PPUSH
18547: PPUSH
18548: PPUSH
// result := false ;
18549: LD_ADDR_VAR 0 2
18553: PUSH
18554: LD_INT 0
18556: ST_TO_ADDR
// side := GetSide ( unit ) ;
18557: LD_ADDR_VAR 0 3
18561: PUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 255
18571: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18572: LD_ADDR_VAR 0 4
18576: PUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 248
18586: ST_TO_ADDR
// case nat of 1 :
18587: LD_VAR 0 4
18591: PUSH
18592: LD_INT 1
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18611
18600: POP
// tech := tech_lassight ; 2 :
18601: LD_ADDR_VAR 0 5
18605: PUSH
18606: LD_INT 12
18608: ST_TO_ADDR
18609: GO 18650
18611: LD_INT 2
18613: DOUBLE
18614: EQUAL
18615: IFTRUE 18619
18617: GO 18630
18619: POP
// tech := tech_mortar ; 3 :
18620: LD_ADDR_VAR 0 5
18624: PUSH
18625: LD_INT 41
18627: ST_TO_ADDR
18628: GO 18650
18630: LD_INT 3
18632: DOUBLE
18633: EQUAL
18634: IFTRUE 18638
18636: GO 18649
18638: POP
// tech := tech_bazooka ; end ;
18639: LD_ADDR_VAR 0 5
18643: PUSH
18644: LD_INT 44
18646: ST_TO_ADDR
18647: GO 18650
18649: POP
// if Researched ( side , tech ) then
18650: LD_VAR 0 3
18654: PPUSH
18655: LD_VAR 0 5
18659: PPUSH
18660: CALL_OW 325
18664: IFFALSE 18691
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18666: LD_ADDR_VAR 0 2
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: LD_INT 8
18676: PUSH
18677: LD_INT 9
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: PUSH
18685: LD_VAR 0 4
18689: ARRAY
18690: ST_TO_ADDR
// end ;
18691: LD_VAR 0 2
18695: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18696: LD_INT 0
18698: PPUSH
18699: PPUSH
18700: PPUSH
// if not mines then
18701: LD_VAR 0 2
18705: NOT
18706: IFFALSE 18710
// exit ;
18708: GO 18854
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18710: LD_ADDR_VAR 0 5
18714: PUSH
18715: LD_INT 81
18717: PUSH
18718: LD_VAR 0 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 3
18729: PUSH
18730: LD_INT 21
18732: PUSH
18733: LD_INT 3
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PPUSH
18748: CALL_OW 69
18752: ST_TO_ADDR
// for i in mines do
18753: LD_ADDR_VAR 0 4
18757: PUSH
18758: LD_VAR 0 2
18762: PUSH
18763: FOR_IN
18764: IFFALSE 18852
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18766: LD_VAR 0 4
18770: PUSH
18771: LD_INT 1
18773: ARRAY
18774: PPUSH
18775: LD_VAR 0 4
18779: PUSH
18780: LD_INT 2
18782: ARRAY
18783: PPUSH
18784: CALL_OW 458
18788: NOT
18789: IFFALSE 18793
// continue ;
18791: GO 18763
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18793: LD_VAR 0 4
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: LD_VAR 0 4
18806: PUSH
18807: LD_INT 2
18809: ARRAY
18810: PPUSH
18811: CALL_OW 428
18815: PUSH
18816: LD_VAR 0 5
18820: IN
18821: IFFALSE 18850
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18823: LD_VAR 0 4
18827: PUSH
18828: LD_INT 1
18830: ARRAY
18831: PPUSH
18832: LD_VAR 0 4
18836: PUSH
18837: LD_INT 2
18839: ARRAY
18840: PPUSH
18841: LD_VAR 0 1
18845: PPUSH
18846: CALL_OW 456
// end ;
18850: GO 18763
18852: POP
18853: POP
// end ;
18854: LD_VAR 0 3
18858: RET
// export function Count ( array ) ; var i ; begin
18859: LD_INT 0
18861: PPUSH
18862: PPUSH
// result := 0 ;
18863: LD_ADDR_VAR 0 2
18867: PUSH
18868: LD_INT 0
18870: ST_TO_ADDR
// for i in array do
18871: LD_ADDR_VAR 0 3
18875: PUSH
18876: LD_VAR 0 1
18880: PUSH
18881: FOR_IN
18882: IFFALSE 18906
// if i then
18884: LD_VAR 0 3
18888: IFFALSE 18904
// result := result + 1 ;
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: LD_VAR 0 2
18899: PUSH
18900: LD_INT 1
18902: PLUS
18903: ST_TO_ADDR
18904: GO 18881
18906: POP
18907: POP
// end ;
18908: LD_VAR 0 2
18912: RET
// export function IsEmpty ( building ) ; begin
18913: LD_INT 0
18915: PPUSH
// if not building then
18916: LD_VAR 0 1
18920: NOT
18921: IFFALSE 18925
// exit ;
18923: GO 18968
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18925: LD_ADDR_VAR 0 2
18929: PUSH
18930: LD_VAR 0 1
18934: PUSH
18935: LD_INT 22
18937: PUSH
18938: LD_VAR 0 1
18942: PPUSH
18943: CALL_OW 255
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 58
18954: PUSH
18955: EMPTY
18956: LIST
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PPUSH
18962: CALL_OW 69
18966: IN
18967: ST_TO_ADDR
// end ;
18968: LD_VAR 0 2
18972: RET
// export function IsNotFull ( building ) ; begin
18973: LD_INT 0
18975: PPUSH
// if not building then
18976: LD_VAR 0 1
18980: NOT
18981: IFFALSE 18985
// exit ;
18983: GO 19004
// result := UnitsInside ( building ) < 6 ;
18985: LD_ADDR_VAR 0 2
18989: PUSH
18990: LD_VAR 0 1
18994: PPUSH
18995: CALL_OW 313
18999: PUSH
19000: LD_INT 6
19002: LESS
19003: ST_TO_ADDR
// end ;
19004: LD_VAR 0 2
19008: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19009: LD_INT 0
19011: PPUSH
19012: PPUSH
19013: PPUSH
19014: PPUSH
// tmp := [ ] ;
19015: LD_ADDR_VAR 0 3
19019: PUSH
19020: EMPTY
19021: ST_TO_ADDR
// list := [ ] ;
19022: LD_ADDR_VAR 0 5
19026: PUSH
19027: EMPTY
19028: ST_TO_ADDR
// for i = 16 to 25 do
19029: LD_ADDR_VAR 0 4
19033: PUSH
19034: DOUBLE
19035: LD_INT 16
19037: DEC
19038: ST_TO_ADDR
19039: LD_INT 25
19041: PUSH
19042: FOR_TO
19043: IFFALSE 19116
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19045: LD_ADDR_VAR 0 3
19049: PUSH
19050: LD_VAR 0 3
19054: PUSH
19055: LD_INT 22
19057: PUSH
19058: LD_VAR 0 1
19062: PPUSH
19063: CALL_OW 255
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 91
19074: PUSH
19075: LD_VAR 0 1
19079: PUSH
19080: LD_INT 6
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: LD_VAR 0 4
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: PPUSH
19108: CALL_OW 69
19112: ADD
19113: ST_TO_ADDR
19114: GO 19042
19116: POP
19117: POP
// for i = 1 to tmp do
19118: LD_ADDR_VAR 0 4
19122: PUSH
19123: DOUBLE
19124: LD_INT 1
19126: DEC
19127: ST_TO_ADDR
19128: LD_VAR 0 3
19132: PUSH
19133: FOR_TO
19134: IFFALSE 19222
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19136: LD_ADDR_VAR 0 5
19140: PUSH
19141: LD_VAR 0 5
19145: PUSH
19146: LD_VAR 0 3
19150: PUSH
19151: LD_VAR 0 4
19155: ARRAY
19156: PPUSH
19157: CALL_OW 266
19161: PUSH
19162: LD_VAR 0 3
19166: PUSH
19167: LD_VAR 0 4
19171: ARRAY
19172: PPUSH
19173: CALL_OW 250
19177: PUSH
19178: LD_VAR 0 3
19182: PUSH
19183: LD_VAR 0 4
19187: ARRAY
19188: PPUSH
19189: CALL_OW 251
19193: PUSH
19194: LD_VAR 0 3
19198: PUSH
19199: LD_VAR 0 4
19203: ARRAY
19204: PPUSH
19205: CALL_OW 254
19209: PUSH
19210: EMPTY
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: ADD
19219: ST_TO_ADDR
19220: GO 19133
19222: POP
19223: POP
// result := list ;
19224: LD_ADDR_VAR 0 2
19228: PUSH
19229: LD_VAR 0 5
19233: ST_TO_ADDR
// end ;
19234: LD_VAR 0 2
19238: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19239: LD_INT 0
19241: PPUSH
19242: PPUSH
19243: PPUSH
19244: PPUSH
19245: PPUSH
19246: PPUSH
19247: PPUSH
// if not factory then
19248: LD_VAR 0 1
19252: NOT
19253: IFFALSE 19257
// exit ;
19255: GO 19850
// if control = control_apeman then
19257: LD_VAR 0 4
19261: PUSH
19262: LD_INT 5
19264: EQUAL
19265: IFFALSE 19374
// begin tmp := UnitsInside ( factory ) ;
19267: LD_ADDR_VAR 0 8
19271: PUSH
19272: LD_VAR 0 1
19276: PPUSH
19277: CALL_OW 313
19281: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19282: LD_VAR 0 8
19286: PPUSH
19287: LD_INT 25
19289: PUSH
19290: LD_INT 12
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PPUSH
19297: CALL_OW 72
19301: NOT
19302: IFFALSE 19312
// control := control_manual ;
19304: LD_ADDR_VAR 0 4
19308: PUSH
19309: LD_INT 1
19311: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19312: LD_ADDR_VAR 0 8
19316: PUSH
19317: LD_VAR 0 1
19321: PPUSH
19322: CALL 19009 0 1
19326: ST_TO_ADDR
// if tmp then
19327: LD_VAR 0 8
19331: IFFALSE 19374
// begin for i in tmp do
19333: LD_ADDR_VAR 0 7
19337: PUSH
19338: LD_VAR 0 8
19342: PUSH
19343: FOR_IN
19344: IFFALSE 19372
// if i [ 1 ] = b_ext_radio then
19346: LD_VAR 0 7
19350: PUSH
19351: LD_INT 1
19353: ARRAY
19354: PUSH
19355: LD_INT 22
19357: EQUAL
19358: IFFALSE 19370
// begin control := control_remote ;
19360: LD_ADDR_VAR 0 4
19364: PUSH
19365: LD_INT 2
19367: ST_TO_ADDR
// break ;
19368: GO 19372
// end ;
19370: GO 19343
19372: POP
19373: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19374: LD_VAR 0 1
19378: PPUSH
19379: LD_VAR 0 2
19383: PPUSH
19384: LD_VAR 0 3
19388: PPUSH
19389: LD_VAR 0 4
19393: PPUSH
19394: LD_VAR 0 5
19398: PPUSH
19399: CALL_OW 448
19403: IFFALSE 19438
// begin result := [ chassis , engine , control , weapon ] ;
19405: LD_ADDR_VAR 0 6
19409: PUSH
19410: LD_VAR 0 2
19414: PUSH
19415: LD_VAR 0 3
19419: PUSH
19420: LD_VAR 0 4
19424: PUSH
19425: LD_VAR 0 5
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: ST_TO_ADDR
// exit ;
19436: GO 19850
// end ; _chassis := AvailableChassisList ( factory ) ;
19438: LD_ADDR_VAR 0 9
19442: PUSH
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 475
19452: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19453: LD_ADDR_VAR 0 11
19457: PUSH
19458: LD_VAR 0 1
19462: PPUSH
19463: CALL_OW 476
19467: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19468: LD_ADDR_VAR 0 12
19472: PUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 477
19482: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19483: LD_ADDR_VAR 0 10
19487: PUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 478
19497: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19498: LD_VAR 0 9
19502: NOT
19503: PUSH
19504: LD_VAR 0 11
19508: NOT
19509: OR
19510: PUSH
19511: LD_VAR 0 12
19515: NOT
19516: OR
19517: PUSH
19518: LD_VAR 0 10
19522: NOT
19523: OR
19524: IFFALSE 19559
// begin result := [ chassis , engine , control , weapon ] ;
19526: LD_ADDR_VAR 0 6
19530: PUSH
19531: LD_VAR 0 2
19535: PUSH
19536: LD_VAR 0 3
19540: PUSH
19541: LD_VAR 0 4
19545: PUSH
19546: LD_VAR 0 5
19550: PUSH
19551: EMPTY
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: ST_TO_ADDR
// exit ;
19557: GO 19850
// end ; if not chassis in _chassis then
19559: LD_VAR 0 2
19563: PUSH
19564: LD_VAR 0 9
19568: IN
19569: NOT
19570: IFFALSE 19596
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19572: LD_ADDR_VAR 0 2
19576: PUSH
19577: LD_VAR 0 9
19581: PUSH
19582: LD_INT 1
19584: PPUSH
19585: LD_VAR 0 9
19589: PPUSH
19590: CALL_OW 12
19594: ARRAY
19595: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19596: LD_VAR 0 2
19600: PPUSH
19601: LD_VAR 0 3
19605: PPUSH
19606: CALL 19855 0 2
19610: NOT
19611: IFFALSE 19670
// repeat engine := _engine [ 1 ] ;
19613: LD_ADDR_VAR 0 3
19617: PUSH
19618: LD_VAR 0 11
19622: PUSH
19623: LD_INT 1
19625: ARRAY
19626: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19627: LD_ADDR_VAR 0 11
19631: PUSH
19632: LD_VAR 0 11
19636: PPUSH
19637: LD_INT 1
19639: PPUSH
19640: CALL_OW 3
19644: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19645: LD_VAR 0 2
19649: PPUSH
19650: LD_VAR 0 3
19654: PPUSH
19655: CALL 19855 0 2
19659: PUSH
19660: LD_VAR 0 11
19664: PUSH
19665: EMPTY
19666: EQUAL
19667: OR
19668: IFFALSE 19613
// if not control in _control then
19670: LD_VAR 0 4
19674: PUSH
19675: LD_VAR 0 12
19679: IN
19680: NOT
19681: IFFALSE 19707
// control := _control [ rand ( 1 , _control ) ] ;
19683: LD_ADDR_VAR 0 4
19687: PUSH
19688: LD_VAR 0 12
19692: PUSH
19693: LD_INT 1
19695: PPUSH
19696: LD_VAR 0 12
19700: PPUSH
19701: CALL_OW 12
19705: ARRAY
19706: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19707: LD_VAR 0 2
19711: PPUSH
19712: LD_VAR 0 5
19716: PPUSH
19717: CALL 20075 0 2
19721: NOT
19722: IFFALSE 19781
// repeat weapon := _weapon [ 1 ] ;
19724: LD_ADDR_VAR 0 5
19728: PUSH
19729: LD_VAR 0 10
19733: PUSH
19734: LD_INT 1
19736: ARRAY
19737: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19738: LD_ADDR_VAR 0 10
19742: PUSH
19743: LD_VAR 0 10
19747: PPUSH
19748: LD_INT 1
19750: PPUSH
19751: CALL_OW 3
19755: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19756: LD_VAR 0 2
19760: PPUSH
19761: LD_VAR 0 5
19765: PPUSH
19766: CALL 20075 0 2
19770: PUSH
19771: LD_VAR 0 10
19775: PUSH
19776: EMPTY
19777: EQUAL
19778: OR
19779: IFFALSE 19724
// result := [ ] ;
19781: LD_ADDR_VAR 0 6
19785: PUSH
19786: EMPTY
19787: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19788: LD_VAR 0 1
19792: PPUSH
19793: LD_VAR 0 2
19797: PPUSH
19798: LD_VAR 0 3
19802: PPUSH
19803: LD_VAR 0 4
19807: PPUSH
19808: LD_VAR 0 5
19812: PPUSH
19813: CALL_OW 448
19817: IFFALSE 19850
// result := [ chassis , engine , control , weapon ] ;
19819: LD_ADDR_VAR 0 6
19823: PUSH
19824: LD_VAR 0 2
19828: PUSH
19829: LD_VAR 0 3
19833: PUSH
19834: LD_VAR 0 4
19838: PUSH
19839: LD_VAR 0 5
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: ST_TO_ADDR
// end ;
19850: LD_VAR 0 6
19854: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19855: LD_INT 0
19857: PPUSH
// if not chassis or not engine then
19858: LD_VAR 0 1
19862: NOT
19863: PUSH
19864: LD_VAR 0 2
19868: NOT
19869: OR
19870: IFFALSE 19874
// exit ;
19872: GO 20070
// case engine of engine_solar :
19874: LD_VAR 0 2
19878: PUSH
19879: LD_INT 2
19881: DOUBLE
19882: EQUAL
19883: IFTRUE 19887
19885: GO 19925
19887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19888: LD_ADDR_VAR 0 3
19892: PUSH
19893: LD_INT 11
19895: PUSH
19896: LD_INT 12
19898: PUSH
19899: LD_INT 13
19901: PUSH
19902: LD_INT 14
19904: PUSH
19905: LD_INT 1
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: LD_INT 3
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: LIST
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: ST_TO_ADDR
19923: GO 20054
19925: LD_INT 1
19927: DOUBLE
19928: EQUAL
19929: IFTRUE 19933
19931: GO 19995
19933: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19934: LD_ADDR_VAR 0 3
19938: PUSH
19939: LD_INT 11
19941: PUSH
19942: LD_INT 12
19944: PUSH
19945: LD_INT 13
19947: PUSH
19948: LD_INT 14
19950: PUSH
19951: LD_INT 1
19953: PUSH
19954: LD_INT 2
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: LD_INT 4
19962: PUSH
19963: LD_INT 5
19965: PUSH
19966: LD_INT 21
19968: PUSH
19969: LD_INT 23
19971: PUSH
19972: LD_INT 22
19974: PUSH
19975: LD_INT 24
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: LIST
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: LIST
19992: ST_TO_ADDR
19993: GO 20054
19995: LD_INT 3
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20053
20003: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20004: LD_ADDR_VAR 0 3
20008: PUSH
20009: LD_INT 13
20011: PUSH
20012: LD_INT 14
20014: PUSH
20015: LD_INT 2
20017: PUSH
20018: LD_INT 3
20020: PUSH
20021: LD_INT 4
20023: PUSH
20024: LD_INT 5
20026: PUSH
20027: LD_INT 21
20029: PUSH
20030: LD_INT 22
20032: PUSH
20033: LD_INT 23
20035: PUSH
20036: LD_INT 24
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: LIST
20043: LIST
20044: LIST
20045: LIST
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: ST_TO_ADDR
20051: GO 20054
20053: POP
// result := ( chassis in result ) ;
20054: LD_ADDR_VAR 0 3
20058: PUSH
20059: LD_VAR 0 1
20063: PUSH
20064: LD_VAR 0 3
20068: IN
20069: ST_TO_ADDR
// end ;
20070: LD_VAR 0 3
20074: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20075: LD_INT 0
20077: PPUSH
// if not chassis or not weapon then
20078: LD_VAR 0 1
20082: NOT
20083: PUSH
20084: LD_VAR 0 2
20088: NOT
20089: OR
20090: IFFALSE 20094
// exit ;
20092: GO 21156
// case weapon of us_machine_gun :
20094: LD_VAR 0 2
20098: PUSH
20099: LD_INT 2
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20137
20107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_INT 1
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: LD_INT 3
20121: PUSH
20122: LD_INT 4
20124: PUSH
20125: LD_INT 5
20127: PUSH
20128: EMPTY
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: ST_TO_ADDR
20135: GO 21140
20137: LD_INT 3
20139: DOUBLE
20140: EQUAL
20141: IFTRUE 20145
20143: GO 20175
20145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20146: LD_ADDR_VAR 0 3
20150: PUSH
20151: LD_INT 1
20153: PUSH
20154: LD_INT 2
20156: PUSH
20157: LD_INT 3
20159: PUSH
20160: LD_INT 4
20162: PUSH
20163: LD_INT 5
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: ST_TO_ADDR
20173: GO 21140
20175: LD_INT 11
20177: DOUBLE
20178: EQUAL
20179: IFTRUE 20183
20181: GO 20213
20183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20184: LD_ADDR_VAR 0 3
20188: PUSH
20189: LD_INT 1
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: LD_INT 4
20200: PUSH
20201: LD_INT 5
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: ST_TO_ADDR
20211: GO 21140
20213: LD_INT 4
20215: DOUBLE
20216: EQUAL
20217: IFTRUE 20221
20219: GO 20247
20221: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20222: LD_ADDR_VAR 0 3
20226: PUSH
20227: LD_INT 2
20229: PUSH
20230: LD_INT 3
20232: PUSH
20233: LD_INT 4
20235: PUSH
20236: LD_INT 5
20238: PUSH
20239: EMPTY
20240: LIST
20241: LIST
20242: LIST
20243: LIST
20244: ST_TO_ADDR
20245: GO 21140
20247: LD_INT 5
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20281
20255: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_INT 2
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: LD_INT 4
20269: PUSH
20270: LD_INT 5
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: LIST
20277: LIST
20278: ST_TO_ADDR
20279: GO 21140
20281: LD_INT 9
20283: DOUBLE
20284: EQUAL
20285: IFTRUE 20289
20287: GO 20315
20289: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: LD_INT 2
20297: PUSH
20298: LD_INT 3
20300: PUSH
20301: LD_INT 4
20303: PUSH
20304: LD_INT 5
20306: PUSH
20307: EMPTY
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: ST_TO_ADDR
20313: GO 21140
20315: LD_INT 7
20317: DOUBLE
20318: EQUAL
20319: IFTRUE 20323
20321: GO 20349
20323: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20324: LD_ADDR_VAR 0 3
20328: PUSH
20329: LD_INT 2
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: LD_INT 4
20337: PUSH
20338: LD_INT 5
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: ST_TO_ADDR
20347: GO 21140
20349: LD_INT 12
20351: DOUBLE
20352: EQUAL
20353: IFTRUE 20357
20355: GO 20383
20357: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20358: LD_ADDR_VAR 0 3
20362: PUSH
20363: LD_INT 2
20365: PUSH
20366: LD_INT 3
20368: PUSH
20369: LD_INT 4
20371: PUSH
20372: LD_INT 5
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: ST_TO_ADDR
20381: GO 21140
20383: LD_INT 13
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20417
20391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20392: LD_ADDR_VAR 0 3
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 3
20402: PUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: ST_TO_ADDR
20415: GO 21140
20417: LD_INT 14
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20443
20425: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 4
20433: PUSH
20434: LD_INT 5
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: ST_TO_ADDR
20441: GO 21140
20443: LD_INT 6
20445: DOUBLE
20446: EQUAL
20447: IFTRUE 20451
20449: GO 20469
20451: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_INT 4
20459: PUSH
20460: LD_INT 5
20462: PUSH
20463: EMPTY
20464: LIST
20465: LIST
20466: ST_TO_ADDR
20467: GO 21140
20469: LD_INT 10
20471: DOUBLE
20472: EQUAL
20473: IFTRUE 20477
20475: GO 20495
20477: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20478: LD_ADDR_VAR 0 3
20482: PUSH
20483: LD_INT 4
20485: PUSH
20486: LD_INT 5
20488: PUSH
20489: EMPTY
20490: LIST
20491: LIST
20492: ST_TO_ADDR
20493: GO 21140
20495: LD_INT 22
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20529
20503: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20504: LD_ADDR_VAR 0 3
20508: PUSH
20509: LD_INT 11
20511: PUSH
20512: LD_INT 12
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: LD_INT 14
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
20527: GO 21140
20529: LD_INT 23
20531: DOUBLE
20532: EQUAL
20533: IFTRUE 20537
20535: GO 20563
20537: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20538: LD_ADDR_VAR 0 3
20542: PUSH
20543: LD_INT 11
20545: PUSH
20546: LD_INT 12
20548: PUSH
20549: LD_INT 13
20551: PUSH
20552: LD_INT 14
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: LIST
20560: ST_TO_ADDR
20561: GO 21140
20563: LD_INT 24
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20597
20571: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_INT 11
20579: PUSH
20580: LD_INT 12
20582: PUSH
20583: LD_INT 13
20585: PUSH
20586: LD_INT 14
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: LIST
20593: LIST
20594: ST_TO_ADDR
20595: GO 21140
20597: LD_INT 30
20599: DOUBLE
20600: EQUAL
20601: IFTRUE 20605
20603: GO 20631
20605: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20606: LD_ADDR_VAR 0 3
20610: PUSH
20611: LD_INT 11
20613: PUSH
20614: LD_INT 12
20616: PUSH
20617: LD_INT 13
20619: PUSH
20620: LD_INT 14
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: ST_TO_ADDR
20629: GO 21140
20631: LD_INT 25
20633: DOUBLE
20634: EQUAL
20635: IFTRUE 20639
20637: GO 20657
20639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20640: LD_ADDR_VAR 0 3
20644: PUSH
20645: LD_INT 13
20647: PUSH
20648: LD_INT 14
20650: PUSH
20651: EMPTY
20652: LIST
20653: LIST
20654: ST_TO_ADDR
20655: GO 21140
20657: LD_INT 27
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20683
20665: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20666: LD_ADDR_VAR 0 3
20670: PUSH
20671: LD_INT 13
20673: PUSH
20674: LD_INT 14
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: ST_TO_ADDR
20681: GO 21140
20683: LD_EXP 112
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20719
20693: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20694: LD_ADDR_VAR 0 3
20698: PUSH
20699: LD_INT 11
20701: PUSH
20702: LD_INT 12
20704: PUSH
20705: LD_INT 13
20707: PUSH
20708: LD_INT 14
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: ST_TO_ADDR
20717: GO 21140
20719: LD_INT 28
20721: DOUBLE
20722: EQUAL
20723: IFTRUE 20727
20725: GO 20745
20727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20728: LD_ADDR_VAR 0 3
20732: PUSH
20733: LD_INT 13
20735: PUSH
20736: LD_INT 14
20738: PUSH
20739: EMPTY
20740: LIST
20741: LIST
20742: ST_TO_ADDR
20743: GO 21140
20745: LD_INT 29
20747: DOUBLE
20748: EQUAL
20749: IFTRUE 20753
20751: GO 20771
20753: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20754: LD_ADDR_VAR 0 3
20758: PUSH
20759: LD_INT 13
20761: PUSH
20762: LD_INT 14
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: ST_TO_ADDR
20769: GO 21140
20771: LD_INT 31
20773: DOUBLE
20774: EQUAL
20775: IFTRUE 20779
20777: GO 20797
20779: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20780: LD_ADDR_VAR 0 3
20784: PUSH
20785: LD_INT 13
20787: PUSH
20788: LD_INT 14
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: ST_TO_ADDR
20795: GO 21140
20797: LD_INT 26
20799: DOUBLE
20800: EQUAL
20801: IFTRUE 20805
20803: GO 20823
20805: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 13
20813: PUSH
20814: LD_INT 14
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: ST_TO_ADDR
20821: GO 21140
20823: LD_INT 42
20825: DOUBLE
20826: EQUAL
20827: IFTRUE 20831
20829: GO 20857
20831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20832: LD_ADDR_VAR 0 3
20836: PUSH
20837: LD_INT 21
20839: PUSH
20840: LD_INT 22
20842: PUSH
20843: LD_INT 23
20845: PUSH
20846: LD_INT 24
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: LIST
20854: ST_TO_ADDR
20855: GO 21140
20857: LD_INT 43
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20891
20865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_INT 21
20873: PUSH
20874: LD_INT 22
20876: PUSH
20877: LD_INT 23
20879: PUSH
20880: LD_INT 24
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: ST_TO_ADDR
20889: GO 21140
20891: LD_INT 44
20893: DOUBLE
20894: EQUAL
20895: IFTRUE 20899
20897: GO 20925
20899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20900: LD_ADDR_VAR 0 3
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 22
20910: PUSH
20911: LD_INT 23
20913: PUSH
20914: LD_INT 24
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: ST_TO_ADDR
20923: GO 21140
20925: LD_INT 45
20927: DOUBLE
20928: EQUAL
20929: IFTRUE 20933
20931: GO 20959
20933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20934: LD_ADDR_VAR 0 3
20938: PUSH
20939: LD_INT 21
20941: PUSH
20942: LD_INT 22
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 24
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: ST_TO_ADDR
20957: GO 21140
20959: LD_INT 49
20961: DOUBLE
20962: EQUAL
20963: IFTRUE 20967
20965: GO 20993
20967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_INT 21
20975: PUSH
20976: LD_INT 22
20978: PUSH
20979: LD_INT 23
20981: PUSH
20982: LD_INT 24
20984: PUSH
20985: EMPTY
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 21140
20993: LD_INT 51
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21027
21001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_INT 21
21009: PUSH
21010: LD_INT 22
21012: PUSH
21013: LD_INT 23
21015: PUSH
21016: LD_INT 24
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: ST_TO_ADDR
21025: GO 21140
21027: LD_INT 52
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21061
21035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 22
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: LD_INT 24
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 21140
21061: LD_INT 53
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21087
21069: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_INT 23
21077: PUSH
21078: LD_INT 24
21080: PUSH
21081: EMPTY
21082: LIST
21083: LIST
21084: ST_TO_ADDR
21085: GO 21140
21087: LD_INT 46
21089: DOUBLE
21090: EQUAL
21091: IFTRUE 21095
21093: GO 21113
21095: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21096: LD_ADDR_VAR 0 3
21100: PUSH
21101: LD_INT 23
21103: PUSH
21104: LD_INT 24
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: ST_TO_ADDR
21111: GO 21140
21113: LD_INT 47
21115: DOUBLE
21116: EQUAL
21117: IFTRUE 21121
21119: GO 21139
21121: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21122: LD_ADDR_VAR 0 3
21126: PUSH
21127: LD_INT 23
21129: PUSH
21130: LD_INT 24
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: ST_TO_ADDR
21137: GO 21140
21139: POP
// result := ( chassis in result ) ;
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_VAR 0 1
21149: PUSH
21150: LD_VAR 0 3
21154: IN
21155: ST_TO_ADDR
// end ;
21156: LD_VAR 0 3
21160: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21161: LD_INT 0
21163: PPUSH
21164: PPUSH
21165: PPUSH
21166: PPUSH
21167: PPUSH
21168: PPUSH
21169: PPUSH
// result := array ;
21170: LD_ADDR_VAR 0 5
21174: PUSH
21175: LD_VAR 0 1
21179: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21180: LD_VAR 0 1
21184: NOT
21185: PUSH
21186: LD_VAR 0 2
21190: NOT
21191: OR
21192: PUSH
21193: LD_VAR 0 3
21197: NOT
21198: OR
21199: PUSH
21200: LD_VAR 0 2
21204: PUSH
21205: LD_VAR 0 1
21209: GREATER
21210: OR
21211: PUSH
21212: LD_VAR 0 3
21216: PUSH
21217: LD_VAR 0 1
21221: GREATER
21222: OR
21223: IFFALSE 21227
// exit ;
21225: GO 21523
// if direction then
21227: LD_VAR 0 4
21231: IFFALSE 21295
// begin d := 1 ;
21233: LD_ADDR_VAR 0 9
21237: PUSH
21238: LD_INT 1
21240: ST_TO_ADDR
// if i_from > i_to then
21241: LD_VAR 0 2
21245: PUSH
21246: LD_VAR 0 3
21250: GREATER
21251: IFFALSE 21277
// length := ( array - i_from ) + i_to else
21253: LD_ADDR_VAR 0 11
21257: PUSH
21258: LD_VAR 0 1
21262: PUSH
21263: LD_VAR 0 2
21267: MINUS
21268: PUSH
21269: LD_VAR 0 3
21273: PLUS
21274: ST_TO_ADDR
21275: GO 21293
// length := i_to - i_from ;
21277: LD_ADDR_VAR 0 11
21281: PUSH
21282: LD_VAR 0 3
21286: PUSH
21287: LD_VAR 0 2
21291: MINUS
21292: ST_TO_ADDR
// end else
21293: GO 21356
// begin d := - 1 ;
21295: LD_ADDR_VAR 0 9
21299: PUSH
21300: LD_INT 1
21302: NEG
21303: ST_TO_ADDR
// if i_from > i_to then
21304: LD_VAR 0 2
21308: PUSH
21309: LD_VAR 0 3
21313: GREATER
21314: IFFALSE 21334
// length := i_from - i_to else
21316: LD_ADDR_VAR 0 11
21320: PUSH
21321: LD_VAR 0 2
21325: PUSH
21326: LD_VAR 0 3
21330: MINUS
21331: ST_TO_ADDR
21332: GO 21356
// length := ( array - i_to ) + i_from ;
21334: LD_ADDR_VAR 0 11
21338: PUSH
21339: LD_VAR 0 1
21343: PUSH
21344: LD_VAR 0 3
21348: MINUS
21349: PUSH
21350: LD_VAR 0 2
21354: PLUS
21355: ST_TO_ADDR
// end ; if not length then
21356: LD_VAR 0 11
21360: NOT
21361: IFFALSE 21365
// exit ;
21363: GO 21523
// tmp := array ;
21365: LD_ADDR_VAR 0 10
21369: PUSH
21370: LD_VAR 0 1
21374: ST_TO_ADDR
// for i = 1 to length do
21375: LD_ADDR_VAR 0 6
21379: PUSH
21380: DOUBLE
21381: LD_INT 1
21383: DEC
21384: ST_TO_ADDR
21385: LD_VAR 0 11
21389: PUSH
21390: FOR_TO
21391: IFFALSE 21511
// begin for j = 1 to array do
21393: LD_ADDR_VAR 0 7
21397: PUSH
21398: DOUBLE
21399: LD_INT 1
21401: DEC
21402: ST_TO_ADDR
21403: LD_VAR 0 1
21407: PUSH
21408: FOR_TO
21409: IFFALSE 21497
// begin k := j + d ;
21411: LD_ADDR_VAR 0 8
21415: PUSH
21416: LD_VAR 0 7
21420: PUSH
21421: LD_VAR 0 9
21425: PLUS
21426: ST_TO_ADDR
// if k > array then
21427: LD_VAR 0 8
21431: PUSH
21432: LD_VAR 0 1
21436: GREATER
21437: IFFALSE 21447
// k := 1 ;
21439: LD_ADDR_VAR 0 8
21443: PUSH
21444: LD_INT 1
21446: ST_TO_ADDR
// if not k then
21447: LD_VAR 0 8
21451: NOT
21452: IFFALSE 21464
// k := array ;
21454: LD_ADDR_VAR 0 8
21458: PUSH
21459: LD_VAR 0 1
21463: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21464: LD_ADDR_VAR 0 10
21468: PUSH
21469: LD_VAR 0 10
21473: PPUSH
21474: LD_VAR 0 8
21478: PPUSH
21479: LD_VAR 0 1
21483: PUSH
21484: LD_VAR 0 7
21488: ARRAY
21489: PPUSH
21490: CALL_OW 1
21494: ST_TO_ADDR
// end ;
21495: GO 21408
21497: POP
21498: POP
// array := tmp ;
21499: LD_ADDR_VAR 0 1
21503: PUSH
21504: LD_VAR 0 10
21508: ST_TO_ADDR
// end ;
21509: GO 21390
21511: POP
21512: POP
// result := array ;
21513: LD_ADDR_VAR 0 5
21517: PUSH
21518: LD_VAR 0 1
21522: ST_TO_ADDR
// end ;
21523: LD_VAR 0 5
21527: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21528: LD_INT 0
21530: PPUSH
21531: PPUSH
// result := 0 ;
21532: LD_ADDR_VAR 0 3
21536: PUSH
21537: LD_INT 0
21539: ST_TO_ADDR
// if not array or not value in array then
21540: LD_VAR 0 1
21544: NOT
21545: PUSH
21546: LD_VAR 0 2
21550: PUSH
21551: LD_VAR 0 1
21555: IN
21556: NOT
21557: OR
21558: IFFALSE 21562
// exit ;
21560: GO 21616
// for i = 1 to array do
21562: LD_ADDR_VAR 0 4
21566: PUSH
21567: DOUBLE
21568: LD_INT 1
21570: DEC
21571: ST_TO_ADDR
21572: LD_VAR 0 1
21576: PUSH
21577: FOR_TO
21578: IFFALSE 21614
// if value = array [ i ] then
21580: LD_VAR 0 2
21584: PUSH
21585: LD_VAR 0 1
21589: PUSH
21590: LD_VAR 0 4
21594: ARRAY
21595: EQUAL
21596: IFFALSE 21612
// begin result := i ;
21598: LD_ADDR_VAR 0 3
21602: PUSH
21603: LD_VAR 0 4
21607: ST_TO_ADDR
// exit ;
21608: POP
21609: POP
21610: GO 21616
// end ;
21612: GO 21577
21614: POP
21615: POP
// end ;
21616: LD_VAR 0 3
21620: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21621: LD_INT 0
21623: PPUSH
// vc_chassis := chassis ;
21624: LD_ADDR_OWVAR 37
21628: PUSH
21629: LD_VAR 0 1
21633: ST_TO_ADDR
// vc_engine := engine ;
21634: LD_ADDR_OWVAR 39
21638: PUSH
21639: LD_VAR 0 2
21643: ST_TO_ADDR
// vc_control := control ;
21644: LD_ADDR_OWVAR 38
21648: PUSH
21649: LD_VAR 0 3
21653: ST_TO_ADDR
// vc_weapon := weapon ;
21654: LD_ADDR_OWVAR 40
21658: PUSH
21659: LD_VAR 0 4
21663: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21664: LD_ADDR_OWVAR 41
21668: PUSH
21669: LD_VAR 0 5
21673: ST_TO_ADDR
// end ;
21674: LD_VAR 0 6
21678: RET
// export function WantPlant ( unit ) ; var task ; begin
21679: LD_INT 0
21681: PPUSH
21682: PPUSH
// result := false ;
21683: LD_ADDR_VAR 0 2
21687: PUSH
21688: LD_INT 0
21690: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21691: LD_ADDR_VAR 0 3
21695: PUSH
21696: LD_VAR 0 1
21700: PPUSH
21701: CALL_OW 437
21705: ST_TO_ADDR
// if task then
21706: LD_VAR 0 3
21710: IFFALSE 21738
// if task [ 1 ] [ 1 ] = p then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 1
21719: ARRAY
21720: PUSH
21721: LD_INT 1
21723: ARRAY
21724: PUSH
21725: LD_STRING p
21727: EQUAL
21728: IFFALSE 21738
// result := true ;
21730: LD_ADDR_VAR 0 2
21734: PUSH
21735: LD_INT 1
21737: ST_TO_ADDR
// end ;
21738: LD_VAR 0 2
21742: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21743: LD_INT 0
21745: PPUSH
21746: PPUSH
21747: PPUSH
21748: PPUSH
// if pos < 1 then
21749: LD_VAR 0 2
21753: PUSH
21754: LD_INT 1
21756: LESS
21757: IFFALSE 21761
// exit ;
21759: GO 22064
// if pos = 1 then
21761: LD_VAR 0 2
21765: PUSH
21766: LD_INT 1
21768: EQUAL
21769: IFFALSE 21802
// result := Replace ( arr , pos [ 1 ] , value ) else
21771: LD_ADDR_VAR 0 4
21775: PUSH
21776: LD_VAR 0 1
21780: PPUSH
21781: LD_VAR 0 2
21785: PUSH
21786: LD_INT 1
21788: ARRAY
21789: PPUSH
21790: LD_VAR 0 3
21794: PPUSH
21795: CALL_OW 1
21799: ST_TO_ADDR
21800: GO 22064
// begin tmp := arr ;
21802: LD_ADDR_VAR 0 6
21806: PUSH
21807: LD_VAR 0 1
21811: ST_TO_ADDR
// s_arr := [ tmp ] ;
21812: LD_ADDR_VAR 0 7
21816: PUSH
21817: LD_VAR 0 6
21821: PUSH
21822: EMPTY
21823: LIST
21824: ST_TO_ADDR
// for i = 1 to pos - 1 do
21825: LD_ADDR_VAR 0 5
21829: PUSH
21830: DOUBLE
21831: LD_INT 1
21833: DEC
21834: ST_TO_ADDR
21835: LD_VAR 0 2
21839: PUSH
21840: LD_INT 1
21842: MINUS
21843: PUSH
21844: FOR_TO
21845: IFFALSE 21890
// begin tmp := tmp [ pos [ i ] ] ;
21847: LD_ADDR_VAR 0 6
21851: PUSH
21852: LD_VAR 0 6
21856: PUSH
21857: LD_VAR 0 2
21861: PUSH
21862: LD_VAR 0 5
21866: ARRAY
21867: ARRAY
21868: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21869: LD_ADDR_VAR 0 7
21873: PUSH
21874: LD_VAR 0 7
21878: PUSH
21879: LD_VAR 0 6
21883: PUSH
21884: EMPTY
21885: LIST
21886: ADD
21887: ST_TO_ADDR
// end ;
21888: GO 21844
21890: POP
21891: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21892: LD_ADDR_VAR 0 6
21896: PUSH
21897: LD_VAR 0 6
21901: PPUSH
21902: LD_VAR 0 2
21906: PUSH
21907: LD_VAR 0 2
21911: ARRAY
21912: PPUSH
21913: LD_VAR 0 3
21917: PPUSH
21918: CALL_OW 1
21922: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21923: LD_ADDR_VAR 0 7
21927: PUSH
21928: LD_VAR 0 7
21932: PPUSH
21933: LD_VAR 0 7
21937: PPUSH
21938: LD_VAR 0 6
21942: PPUSH
21943: CALL_OW 1
21947: ST_TO_ADDR
// for i = s_arr downto 2 do
21948: LD_ADDR_VAR 0 5
21952: PUSH
21953: DOUBLE
21954: LD_VAR 0 7
21958: INC
21959: ST_TO_ADDR
21960: LD_INT 2
21962: PUSH
21963: FOR_DOWNTO
21964: IFFALSE 22048
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21966: LD_ADDR_VAR 0 6
21970: PUSH
21971: LD_VAR 0 7
21975: PUSH
21976: LD_VAR 0 5
21980: PUSH
21981: LD_INT 1
21983: MINUS
21984: ARRAY
21985: PPUSH
21986: LD_VAR 0 2
21990: PUSH
21991: LD_VAR 0 5
21995: PUSH
21996: LD_INT 1
21998: MINUS
21999: ARRAY
22000: PPUSH
22001: LD_VAR 0 7
22005: PUSH
22006: LD_VAR 0 5
22010: ARRAY
22011: PPUSH
22012: CALL_OW 1
22016: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22017: LD_ADDR_VAR 0 7
22021: PUSH
22022: LD_VAR 0 7
22026: PPUSH
22027: LD_VAR 0 5
22031: PUSH
22032: LD_INT 1
22034: MINUS
22035: PPUSH
22036: LD_VAR 0 6
22040: PPUSH
22041: CALL_OW 1
22045: ST_TO_ADDR
// end ;
22046: GO 21963
22048: POP
22049: POP
// result := s_arr [ 1 ] ;
22050: LD_ADDR_VAR 0 4
22054: PUSH
22055: LD_VAR 0 7
22059: PUSH
22060: LD_INT 1
22062: ARRAY
22063: ST_TO_ADDR
// end ; end ;
22064: LD_VAR 0 4
22068: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22069: LD_INT 0
22071: PPUSH
22072: PPUSH
// if not list then
22073: LD_VAR 0 1
22077: NOT
22078: IFFALSE 22082
// exit ;
22080: GO 22173
// i := list [ pos1 ] ;
22082: LD_ADDR_VAR 0 5
22086: PUSH
22087: LD_VAR 0 1
22091: PUSH
22092: LD_VAR 0 2
22096: ARRAY
22097: ST_TO_ADDR
// if not i then
22098: LD_VAR 0 5
22102: NOT
22103: IFFALSE 22107
// exit ;
22105: GO 22173
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22107: LD_ADDR_VAR 0 1
22111: PUSH
22112: LD_VAR 0 1
22116: PPUSH
22117: LD_VAR 0 2
22121: PPUSH
22122: LD_VAR 0 1
22126: PUSH
22127: LD_VAR 0 3
22131: ARRAY
22132: PPUSH
22133: CALL_OW 1
22137: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22138: LD_ADDR_VAR 0 1
22142: PUSH
22143: LD_VAR 0 1
22147: PPUSH
22148: LD_VAR 0 3
22152: PPUSH
22153: LD_VAR 0 5
22157: PPUSH
22158: CALL_OW 1
22162: ST_TO_ADDR
// result := list ;
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: LD_VAR 0 1
22172: ST_TO_ADDR
// end ;
22173: LD_VAR 0 4
22177: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22178: LD_INT 0
22180: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22181: LD_ADDR_VAR 0 5
22185: PUSH
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 250
22195: PPUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 251
22205: PPUSH
22206: LD_VAR 0 2
22210: PPUSH
22211: LD_VAR 0 3
22215: PPUSH
22216: LD_VAR 0 4
22220: PPUSH
22221: CALL 22231 0 5
22225: ST_TO_ADDR
// end ;
22226: LD_VAR 0 5
22230: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22231: LD_INT 0
22233: PPUSH
22234: PPUSH
22235: PPUSH
22236: PPUSH
// if not list then
22237: LD_VAR 0 3
22241: NOT
22242: IFFALSE 22246
// exit ;
22244: GO 22634
// result := [ ] ;
22246: LD_ADDR_VAR 0 6
22250: PUSH
22251: EMPTY
22252: ST_TO_ADDR
// for i in list do
22253: LD_ADDR_VAR 0 7
22257: PUSH
22258: LD_VAR 0 3
22262: PUSH
22263: FOR_IN
22264: IFFALSE 22466
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22266: LD_ADDR_VAR 0 9
22270: PUSH
22271: LD_VAR 0 7
22275: PPUSH
22276: LD_VAR 0 1
22280: PPUSH
22281: LD_VAR 0 2
22285: PPUSH
22286: CALL_OW 297
22290: ST_TO_ADDR
// if not result then
22291: LD_VAR 0 6
22295: NOT
22296: IFFALSE 22322
// result := [ [ i , tmp ] ] else
22298: LD_ADDR_VAR 0 6
22302: PUSH
22303: LD_VAR 0 7
22307: PUSH
22308: LD_VAR 0 9
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: EMPTY
22318: LIST
22319: ST_TO_ADDR
22320: GO 22464
// begin if result [ result ] [ 2 ] < tmp then
22322: LD_VAR 0 6
22326: PUSH
22327: LD_VAR 0 6
22331: ARRAY
22332: PUSH
22333: LD_INT 2
22335: ARRAY
22336: PUSH
22337: LD_VAR 0 9
22341: LESS
22342: IFFALSE 22384
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22344: LD_ADDR_VAR 0 6
22348: PUSH
22349: LD_VAR 0 6
22353: PPUSH
22354: LD_VAR 0 6
22358: PUSH
22359: LD_INT 1
22361: PLUS
22362: PPUSH
22363: LD_VAR 0 7
22367: PUSH
22368: LD_VAR 0 9
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PPUSH
22377: CALL_OW 2
22381: ST_TO_ADDR
22382: GO 22464
// for j = 1 to result do
22384: LD_ADDR_VAR 0 8
22388: PUSH
22389: DOUBLE
22390: LD_INT 1
22392: DEC
22393: ST_TO_ADDR
22394: LD_VAR 0 6
22398: PUSH
22399: FOR_TO
22400: IFFALSE 22462
// begin if tmp < result [ j ] [ 2 ] then
22402: LD_VAR 0 9
22406: PUSH
22407: LD_VAR 0 6
22411: PUSH
22412: LD_VAR 0 8
22416: ARRAY
22417: PUSH
22418: LD_INT 2
22420: ARRAY
22421: LESS
22422: IFFALSE 22460
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22424: LD_ADDR_VAR 0 6
22428: PUSH
22429: LD_VAR 0 6
22433: PPUSH
22434: LD_VAR 0 8
22438: PPUSH
22439: LD_VAR 0 7
22443: PUSH
22444: LD_VAR 0 9
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: CALL_OW 2
22457: ST_TO_ADDR
// break ;
22458: GO 22462
// end ; end ;
22460: GO 22399
22462: POP
22463: POP
// end ; end ;
22464: GO 22263
22466: POP
22467: POP
// if result and not asc then
22468: LD_VAR 0 6
22472: PUSH
22473: LD_VAR 0 4
22477: NOT
22478: AND
22479: IFFALSE 22554
// begin tmp := result ;
22481: LD_ADDR_VAR 0 9
22485: PUSH
22486: LD_VAR 0 6
22490: ST_TO_ADDR
// for i = tmp downto 1 do
22491: LD_ADDR_VAR 0 7
22495: PUSH
22496: DOUBLE
22497: LD_VAR 0 9
22501: INC
22502: ST_TO_ADDR
22503: LD_INT 1
22505: PUSH
22506: FOR_DOWNTO
22507: IFFALSE 22552
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22509: LD_ADDR_VAR 0 6
22513: PUSH
22514: LD_VAR 0 6
22518: PPUSH
22519: LD_VAR 0 9
22523: PUSH
22524: LD_VAR 0 7
22528: MINUS
22529: PUSH
22530: LD_INT 1
22532: PLUS
22533: PPUSH
22534: LD_VAR 0 9
22538: PUSH
22539: LD_VAR 0 7
22543: ARRAY
22544: PPUSH
22545: CALL_OW 1
22549: ST_TO_ADDR
22550: GO 22506
22552: POP
22553: POP
// end ; tmp := [ ] ;
22554: LD_ADDR_VAR 0 9
22558: PUSH
22559: EMPTY
22560: ST_TO_ADDR
// if mode then
22561: LD_VAR 0 5
22565: IFFALSE 22634
// begin for i = 1 to result do
22567: LD_ADDR_VAR 0 7
22571: PUSH
22572: DOUBLE
22573: LD_INT 1
22575: DEC
22576: ST_TO_ADDR
22577: LD_VAR 0 6
22581: PUSH
22582: FOR_TO
22583: IFFALSE 22622
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22585: LD_ADDR_VAR 0 9
22589: PUSH
22590: LD_VAR 0 9
22594: PPUSH
22595: LD_VAR 0 7
22599: PPUSH
22600: LD_VAR 0 6
22604: PUSH
22605: LD_VAR 0 7
22609: ARRAY
22610: PUSH
22611: LD_INT 1
22613: ARRAY
22614: PPUSH
22615: CALL_OW 1
22619: ST_TO_ADDR
22620: GO 22582
22622: POP
22623: POP
// result := tmp ;
22624: LD_ADDR_VAR 0 6
22628: PUSH
22629: LD_VAR 0 9
22633: ST_TO_ADDR
// end ; end ;
22634: LD_VAR 0 6
22638: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22639: LD_INT 0
22641: PPUSH
22642: PPUSH
22643: PPUSH
22644: PPUSH
22645: PPUSH
22646: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22647: LD_ADDR_VAR 0 5
22651: PUSH
22652: LD_INT 0
22654: PUSH
22655: LD_INT 0
22657: PUSH
22658: LD_INT 0
22660: PUSH
22661: EMPTY
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: ST_TO_ADDR
// if not x or not y then
22669: LD_VAR 0 2
22673: NOT
22674: PUSH
22675: LD_VAR 0 3
22679: NOT
22680: OR
22681: IFFALSE 22685
// exit ;
22683: GO 24337
// if not range then
22685: LD_VAR 0 4
22689: NOT
22690: IFFALSE 22700
// range := 10 ;
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_INT 10
22699: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22700: LD_ADDR_VAR 0 8
22704: PUSH
22705: LD_INT 81
22707: PUSH
22708: LD_VAR 0 1
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PUSH
22717: LD_INT 92
22719: PUSH
22720: LD_VAR 0 2
22724: PUSH
22725: LD_VAR 0 3
22729: PUSH
22730: LD_VAR 0 4
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 3
22743: PUSH
22744: LD_INT 21
22746: PUSH
22747: LD_INT 3
22749: PUSH
22750: EMPTY
22751: LIST
22752: LIST
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: LIST
22762: PPUSH
22763: CALL_OW 69
22767: ST_TO_ADDR
// if not tmp then
22768: LD_VAR 0 8
22772: NOT
22773: IFFALSE 22777
// exit ;
22775: GO 24337
// for i in tmp do
22777: LD_ADDR_VAR 0 6
22781: PUSH
22782: LD_VAR 0 8
22786: PUSH
22787: FOR_IN
22788: IFFALSE 24312
// begin points := [ 0 , 0 , 0 ] ;
22790: LD_ADDR_VAR 0 9
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: LD_INT 0
22800: PUSH
22801: LD_INT 0
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: ST_TO_ADDR
// bpoints := 1 ;
22809: LD_ADDR_VAR 0 10
22813: PUSH
22814: LD_INT 1
22816: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22817: LD_VAR 0 6
22821: PPUSH
22822: CALL_OW 247
22826: PUSH
22827: LD_INT 1
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 23413
22835: POP
// begin if GetClass ( i ) = 1 then
22836: LD_VAR 0 6
22840: PPUSH
22841: CALL_OW 257
22845: PUSH
22846: LD_INT 1
22848: EQUAL
22849: IFFALSE 22870
// points := [ 10 , 5 , 3 ] ;
22851: LD_ADDR_VAR 0 9
22855: PUSH
22856: LD_INT 10
22858: PUSH
22859: LD_INT 5
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: LIST
22869: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22870: LD_VAR 0 6
22874: PPUSH
22875: CALL_OW 257
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: LD_INT 4
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: LIST
22893: IN
22894: IFFALSE 22915
// points := [ 3 , 2 , 1 ] ;
22896: LD_ADDR_VAR 0 9
22900: PUSH
22901: LD_INT 3
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: LIST
22914: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22915: LD_VAR 0 6
22919: PPUSH
22920: CALL_OW 257
22924: PUSH
22925: LD_INT 5
22927: EQUAL
22928: IFFALSE 22949
// points := [ 130 , 5 , 2 ] ;
22930: LD_ADDR_VAR 0 9
22934: PUSH
22935: LD_INT 130
22937: PUSH
22938: LD_INT 5
22940: PUSH
22941: LD_INT 2
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: LIST
22948: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22949: LD_VAR 0 6
22953: PPUSH
22954: CALL_OW 257
22958: PUSH
22959: LD_INT 8
22961: EQUAL
22962: IFFALSE 22983
// points := [ 35 , 35 , 30 ] ;
22964: LD_ADDR_VAR 0 9
22968: PUSH
22969: LD_INT 35
22971: PUSH
22972: LD_INT 35
22974: PUSH
22975: LD_INT 30
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22983: LD_VAR 0 6
22987: PPUSH
22988: CALL_OW 257
22992: PUSH
22993: LD_INT 9
22995: EQUAL
22996: IFFALSE 23017
// points := [ 20 , 55 , 40 ] ;
22998: LD_ADDR_VAR 0 9
23002: PUSH
23003: LD_INT 20
23005: PUSH
23006: LD_INT 55
23008: PUSH
23009: LD_INT 40
23011: PUSH
23012: EMPTY
23013: LIST
23014: LIST
23015: LIST
23016: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23017: LD_VAR 0 6
23021: PPUSH
23022: CALL_OW 257
23026: PUSH
23027: LD_INT 12
23029: PUSH
23030: LD_INT 16
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: IN
23037: IFFALSE 23058
// points := [ 5 , 3 , 2 ] ;
23039: LD_ADDR_VAR 0 9
23043: PUSH
23044: LD_INT 5
23046: PUSH
23047: LD_INT 3
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: LIST
23057: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23058: LD_VAR 0 6
23062: PPUSH
23063: CALL_OW 257
23067: PUSH
23068: LD_INT 17
23070: EQUAL
23071: IFFALSE 23092
// points := [ 100 , 50 , 75 ] ;
23073: LD_ADDR_VAR 0 9
23077: PUSH
23078: LD_INT 100
23080: PUSH
23081: LD_INT 50
23083: PUSH
23084: LD_INT 75
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23092: LD_VAR 0 6
23096: PPUSH
23097: CALL_OW 257
23101: PUSH
23102: LD_INT 15
23104: EQUAL
23105: IFFALSE 23126
// points := [ 10 , 5 , 3 ] ;
23107: LD_ADDR_VAR 0 9
23111: PUSH
23112: LD_INT 10
23114: PUSH
23115: LD_INT 5
23117: PUSH
23118: LD_INT 3
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23126: LD_VAR 0 6
23130: PPUSH
23131: CALL_OW 257
23135: PUSH
23136: LD_INT 14
23138: EQUAL
23139: IFFALSE 23160
// points := [ 10 , 0 , 0 ] ;
23141: LD_ADDR_VAR 0 9
23145: PUSH
23146: LD_INT 10
23148: PUSH
23149: LD_INT 0
23151: PUSH
23152: LD_INT 0
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: LIST
23159: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23160: LD_VAR 0 6
23164: PPUSH
23165: CALL_OW 257
23169: PUSH
23170: LD_INT 11
23172: EQUAL
23173: IFFALSE 23194
// points := [ 30 , 10 , 5 ] ;
23175: LD_ADDR_VAR 0 9
23179: PUSH
23180: LD_INT 30
23182: PUSH
23183: LD_INT 10
23185: PUSH
23186: LD_INT 5
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: LIST
23193: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23194: LD_VAR 0 1
23198: PPUSH
23199: LD_INT 5
23201: PPUSH
23202: CALL_OW 321
23206: PUSH
23207: LD_INT 2
23209: EQUAL
23210: IFFALSE 23227
// bpoints := bpoints * 1.8 ;
23212: LD_ADDR_VAR 0 10
23216: PUSH
23217: LD_VAR 0 10
23221: PUSH
23222: LD_REAL  1.80000000000000E+0000
23225: MUL
23226: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23227: LD_VAR 0 6
23231: PPUSH
23232: CALL_OW 257
23236: PUSH
23237: LD_INT 1
23239: PUSH
23240: LD_INT 2
23242: PUSH
23243: LD_INT 3
23245: PUSH
23246: LD_INT 4
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: IN
23255: PUSH
23256: LD_VAR 0 1
23260: PPUSH
23261: LD_INT 51
23263: PPUSH
23264: CALL_OW 321
23268: PUSH
23269: LD_INT 2
23271: EQUAL
23272: AND
23273: IFFALSE 23290
// bpoints := bpoints * 1.2 ;
23275: LD_ADDR_VAR 0 10
23279: PUSH
23280: LD_VAR 0 10
23284: PUSH
23285: LD_REAL  1.20000000000000E+0000
23288: MUL
23289: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23290: LD_VAR 0 6
23294: PPUSH
23295: CALL_OW 257
23299: PUSH
23300: LD_INT 5
23302: PUSH
23303: LD_INT 7
23305: PUSH
23306: LD_INT 9
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: LIST
23313: IN
23314: PUSH
23315: LD_VAR 0 1
23319: PPUSH
23320: LD_INT 52
23322: PPUSH
23323: CALL_OW 321
23327: PUSH
23328: LD_INT 2
23330: EQUAL
23331: AND
23332: IFFALSE 23349
// bpoints := bpoints * 1.5 ;
23334: LD_ADDR_VAR 0 10
23338: PUSH
23339: LD_VAR 0 10
23343: PUSH
23344: LD_REAL  1.50000000000000E+0000
23347: MUL
23348: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23349: LD_VAR 0 1
23353: PPUSH
23354: LD_INT 66
23356: PPUSH
23357: CALL_OW 321
23361: PUSH
23362: LD_INT 2
23364: EQUAL
23365: IFFALSE 23382
// bpoints := bpoints * 1.1 ;
23367: LD_ADDR_VAR 0 10
23371: PUSH
23372: LD_VAR 0 10
23376: PUSH
23377: LD_REAL  1.10000000000000E+0000
23380: MUL
23381: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23382: LD_ADDR_VAR 0 10
23386: PUSH
23387: LD_VAR 0 10
23391: PUSH
23392: LD_VAR 0 6
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 259
23404: PUSH
23405: LD_REAL  1.15000000000000E+0000
23408: MUL
23409: MUL
23410: ST_TO_ADDR
// end ; unit_vehicle :
23411: GO 24241
23413: LD_INT 2
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 24229
23421: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23422: LD_VAR 0 6
23426: PPUSH
23427: CALL_OW 264
23431: PUSH
23432: LD_INT 2
23434: PUSH
23435: LD_INT 42
23437: PUSH
23438: LD_INT 24
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: LIST
23445: IN
23446: IFFALSE 23467
// points := [ 25 , 5 , 3 ] ;
23448: LD_ADDR_VAR 0 9
23452: PUSH
23453: LD_INT 25
23455: PUSH
23456: LD_INT 5
23458: PUSH
23459: LD_INT 3
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: LIST
23466: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23467: LD_VAR 0 6
23471: PPUSH
23472: CALL_OW 264
23476: PUSH
23477: LD_INT 4
23479: PUSH
23480: LD_INT 43
23482: PUSH
23483: LD_INT 25
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: LIST
23490: IN
23491: IFFALSE 23512
// points := [ 40 , 15 , 5 ] ;
23493: LD_ADDR_VAR 0 9
23497: PUSH
23498: LD_INT 40
23500: PUSH
23501: LD_INT 15
23503: PUSH
23504: LD_INT 5
23506: PUSH
23507: EMPTY
23508: LIST
23509: LIST
23510: LIST
23511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23512: LD_VAR 0 6
23516: PPUSH
23517: CALL_OW 264
23521: PUSH
23522: LD_INT 3
23524: PUSH
23525: LD_INT 23
23527: PUSH
23528: EMPTY
23529: LIST
23530: LIST
23531: IN
23532: IFFALSE 23553
// points := [ 7 , 25 , 8 ] ;
23534: LD_ADDR_VAR 0 9
23538: PUSH
23539: LD_INT 7
23541: PUSH
23542: LD_INT 25
23544: PUSH
23545: LD_INT 8
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23553: LD_VAR 0 6
23557: PPUSH
23558: CALL_OW 264
23562: PUSH
23563: LD_INT 5
23565: PUSH
23566: LD_INT 27
23568: PUSH
23569: LD_INT 44
23571: PUSH
23572: EMPTY
23573: LIST
23574: LIST
23575: LIST
23576: IN
23577: IFFALSE 23598
// points := [ 14 , 50 , 16 ] ;
23579: LD_ADDR_VAR 0 9
23583: PUSH
23584: LD_INT 14
23586: PUSH
23587: LD_INT 50
23589: PUSH
23590: LD_INT 16
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: LIST
23597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23598: LD_VAR 0 6
23602: PPUSH
23603: CALL_OW 264
23607: PUSH
23608: LD_INT 6
23610: PUSH
23611: LD_INT 46
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: IN
23618: IFFALSE 23639
// points := [ 32 , 120 , 70 ] ;
23620: LD_ADDR_VAR 0 9
23624: PUSH
23625: LD_INT 32
23627: PUSH
23628: LD_INT 120
23630: PUSH
23631: LD_INT 70
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: LIST
23638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23639: LD_VAR 0 6
23643: PPUSH
23644: CALL_OW 264
23648: PUSH
23649: LD_INT 7
23651: PUSH
23652: LD_INT 28
23654: PUSH
23655: LD_INT 45
23657: PUSH
23658: LD_EXP 112
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: IN
23669: IFFALSE 23690
// points := [ 35 , 20 , 45 ] ;
23671: LD_ADDR_VAR 0 9
23675: PUSH
23676: LD_INT 35
23678: PUSH
23679: LD_INT 20
23681: PUSH
23682: LD_INT 45
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: LIST
23689: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23690: LD_VAR 0 6
23694: PPUSH
23695: CALL_OW 264
23699: PUSH
23700: LD_INT 47
23702: PUSH
23703: EMPTY
23704: LIST
23705: IN
23706: IFFALSE 23727
// points := [ 67 , 45 , 75 ] ;
23708: LD_ADDR_VAR 0 9
23712: PUSH
23713: LD_INT 67
23715: PUSH
23716: LD_INT 45
23718: PUSH
23719: LD_INT 75
23721: PUSH
23722: EMPTY
23723: LIST
23724: LIST
23725: LIST
23726: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23727: LD_VAR 0 6
23731: PPUSH
23732: CALL_OW 264
23736: PUSH
23737: LD_INT 26
23739: PUSH
23740: EMPTY
23741: LIST
23742: IN
23743: IFFALSE 23764
// points := [ 120 , 30 , 80 ] ;
23745: LD_ADDR_VAR 0 9
23749: PUSH
23750: LD_INT 120
23752: PUSH
23753: LD_INT 30
23755: PUSH
23756: LD_INT 80
23758: PUSH
23759: EMPTY
23760: LIST
23761: LIST
23762: LIST
23763: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23764: LD_VAR 0 6
23768: PPUSH
23769: CALL_OW 264
23773: PUSH
23774: LD_INT 22
23776: PUSH
23777: EMPTY
23778: LIST
23779: IN
23780: IFFALSE 23801
// points := [ 40 , 1 , 1 ] ;
23782: LD_ADDR_VAR 0 9
23786: PUSH
23787: LD_INT 40
23789: PUSH
23790: LD_INT 1
23792: PUSH
23793: LD_INT 1
23795: PUSH
23796: EMPTY
23797: LIST
23798: LIST
23799: LIST
23800: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23801: LD_VAR 0 6
23805: PPUSH
23806: CALL_OW 264
23810: PUSH
23811: LD_INT 29
23813: PUSH
23814: EMPTY
23815: LIST
23816: IN
23817: IFFALSE 23838
// points := [ 70 , 200 , 400 ] ;
23819: LD_ADDR_VAR 0 9
23823: PUSH
23824: LD_INT 70
23826: PUSH
23827: LD_INT 200
23829: PUSH
23830: LD_INT 400
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23838: LD_VAR 0 6
23842: PPUSH
23843: CALL_OW 264
23847: PUSH
23848: LD_INT 14
23850: PUSH
23851: LD_INT 53
23853: PUSH
23854: EMPTY
23855: LIST
23856: LIST
23857: IN
23858: IFFALSE 23879
// points := [ 40 , 10 , 20 ] ;
23860: LD_ADDR_VAR 0 9
23864: PUSH
23865: LD_INT 40
23867: PUSH
23868: LD_INT 10
23870: PUSH
23871: LD_INT 20
23873: PUSH
23874: EMPTY
23875: LIST
23876: LIST
23877: LIST
23878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23879: LD_VAR 0 6
23883: PPUSH
23884: CALL_OW 264
23888: PUSH
23889: LD_INT 9
23891: PUSH
23892: EMPTY
23893: LIST
23894: IN
23895: IFFALSE 23916
// points := [ 5 , 70 , 20 ] ;
23897: LD_ADDR_VAR 0 9
23901: PUSH
23902: LD_INT 5
23904: PUSH
23905: LD_INT 70
23907: PUSH
23908: LD_INT 20
23910: PUSH
23911: EMPTY
23912: LIST
23913: LIST
23914: LIST
23915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23916: LD_VAR 0 6
23920: PPUSH
23921: CALL_OW 264
23925: PUSH
23926: LD_INT 10
23928: PUSH
23929: EMPTY
23930: LIST
23931: IN
23932: IFFALSE 23953
// points := [ 35 , 110 , 70 ] ;
23934: LD_ADDR_VAR 0 9
23938: PUSH
23939: LD_INT 35
23941: PUSH
23942: LD_INT 110
23944: PUSH
23945: LD_INT 70
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23953: LD_VAR 0 6
23957: PPUSH
23958: CALL_OW 265
23962: PUSH
23963: LD_INT 25
23965: EQUAL
23966: IFFALSE 23987
// points := [ 80 , 65 , 100 ] ;
23968: LD_ADDR_VAR 0 9
23972: PUSH
23973: LD_INT 80
23975: PUSH
23976: LD_INT 65
23978: PUSH
23979: LD_INT 100
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: LIST
23986: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23987: LD_VAR 0 6
23991: PPUSH
23992: CALL_OW 263
23996: PUSH
23997: LD_INT 1
23999: EQUAL
24000: IFFALSE 24035
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24002: LD_ADDR_VAR 0 10
24006: PUSH
24007: LD_VAR 0 10
24011: PUSH
24012: LD_VAR 0 6
24016: PPUSH
24017: CALL_OW 311
24021: PPUSH
24022: LD_INT 3
24024: PPUSH
24025: CALL_OW 259
24029: PUSH
24030: LD_INT 4
24032: MUL
24033: MUL
24034: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24035: LD_VAR 0 6
24039: PPUSH
24040: CALL_OW 263
24044: PUSH
24045: LD_INT 2
24047: EQUAL
24048: IFFALSE 24099
// begin j := IsControledBy ( i ) ;
24050: LD_ADDR_VAR 0 7
24054: PUSH
24055: LD_VAR 0 6
24059: PPUSH
24060: CALL_OW 312
24064: ST_TO_ADDR
// if j then
24065: LD_VAR 0 7
24069: IFFALSE 24099
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24071: LD_ADDR_VAR 0 10
24075: PUSH
24076: LD_VAR 0 10
24080: PUSH
24081: LD_VAR 0 7
24085: PPUSH
24086: LD_INT 3
24088: PPUSH
24089: CALL_OW 259
24093: PUSH
24094: LD_INT 3
24096: MUL
24097: MUL
24098: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24099: LD_VAR 0 6
24103: PPUSH
24104: CALL_OW 264
24108: PUSH
24109: LD_INT 5
24111: PUSH
24112: LD_INT 6
24114: PUSH
24115: LD_INT 46
24117: PUSH
24118: LD_INT 44
24120: PUSH
24121: LD_INT 47
24123: PUSH
24124: LD_INT 45
24126: PUSH
24127: LD_INT 28
24129: PUSH
24130: LD_INT 7
24132: PUSH
24133: LD_INT 27
24135: PUSH
24136: LD_INT 29
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: IN
24151: PUSH
24152: LD_VAR 0 1
24156: PPUSH
24157: LD_INT 52
24159: PPUSH
24160: CALL_OW 321
24164: PUSH
24165: LD_INT 2
24167: EQUAL
24168: AND
24169: IFFALSE 24186
// bpoints := bpoints * 1.2 ;
24171: LD_ADDR_VAR 0 10
24175: PUSH
24176: LD_VAR 0 10
24180: PUSH
24181: LD_REAL  1.20000000000000E+0000
24184: MUL
24185: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24186: LD_VAR 0 6
24190: PPUSH
24191: CALL_OW 264
24195: PUSH
24196: LD_INT 6
24198: PUSH
24199: LD_INT 46
24201: PUSH
24202: LD_INT 47
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: LIST
24209: IN
24210: IFFALSE 24227
// bpoints := bpoints * 1.2 ;
24212: LD_ADDR_VAR 0 10
24216: PUSH
24217: LD_VAR 0 10
24221: PUSH
24222: LD_REAL  1.20000000000000E+0000
24225: MUL
24226: ST_TO_ADDR
// end ; unit_building :
24227: GO 24241
24229: LD_INT 3
24231: DOUBLE
24232: EQUAL
24233: IFTRUE 24237
24235: GO 24240
24237: POP
// ; end ;
24238: GO 24241
24240: POP
// for j = 1 to 3 do
24241: LD_ADDR_VAR 0 7
24245: PUSH
24246: DOUBLE
24247: LD_INT 1
24249: DEC
24250: ST_TO_ADDR
24251: LD_INT 3
24253: PUSH
24254: FOR_TO
24255: IFFALSE 24308
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24257: LD_ADDR_VAR 0 5
24261: PUSH
24262: LD_VAR 0 5
24266: PPUSH
24267: LD_VAR 0 7
24271: PPUSH
24272: LD_VAR 0 5
24276: PUSH
24277: LD_VAR 0 7
24281: ARRAY
24282: PUSH
24283: LD_VAR 0 9
24287: PUSH
24288: LD_VAR 0 7
24292: ARRAY
24293: PUSH
24294: LD_VAR 0 10
24298: MUL
24299: PLUS
24300: PPUSH
24301: CALL_OW 1
24305: ST_TO_ADDR
24306: GO 24254
24308: POP
24309: POP
// end ;
24310: GO 22787
24312: POP
24313: POP
// result := Replace ( result , 4 , tmp ) ;
24314: LD_ADDR_VAR 0 5
24318: PUSH
24319: LD_VAR 0 5
24323: PPUSH
24324: LD_INT 4
24326: PPUSH
24327: LD_VAR 0 8
24331: PPUSH
24332: CALL_OW 1
24336: ST_TO_ADDR
// end ;
24337: LD_VAR 0 5
24341: RET
// export function DangerAtRange ( unit , range ) ; begin
24342: LD_INT 0
24344: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 255
24359: PPUSH
24360: LD_VAR 0 1
24364: PPUSH
24365: CALL_OW 250
24369: PPUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 251
24379: PPUSH
24380: LD_VAR 0 2
24384: PPUSH
24385: CALL 22639 0 4
24389: ST_TO_ADDR
// end ;
24390: LD_VAR 0 3
24394: RET
// export function DangerInArea ( side , area ) ; begin
24395: LD_INT 0
24397: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_VAR 0 2
24407: PPUSH
24408: LD_INT 81
24410: PUSH
24411: LD_VAR 0 1
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PPUSH
24420: CALL_OW 70
24424: ST_TO_ADDR
// end ;
24425: LD_VAR 0 3
24429: RET
// export function IsExtension ( b ) ; begin
24430: LD_INT 0
24432: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_VAR 0 1
24442: PUSH
24443: LD_INT 23
24445: PUSH
24446: LD_INT 20
24448: PUSH
24449: LD_INT 22
24451: PUSH
24452: LD_INT 17
24454: PUSH
24455: LD_INT 24
24457: PUSH
24458: LD_INT 21
24460: PUSH
24461: LD_INT 19
24463: PUSH
24464: LD_INT 16
24466: PUSH
24467: LD_INT 25
24469: PUSH
24470: LD_INT 18
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: IN
24485: ST_TO_ADDR
// end ;
24486: LD_VAR 0 2
24490: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// result := [ ] ;
24496: LD_ADDR_VAR 0 4
24500: PUSH
24501: EMPTY
24502: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24503: LD_ADDR_VAR 0 5
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 3
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PPUSH
24523: CALL_OW 70
24527: ST_TO_ADDR
// if not tmp then
24528: LD_VAR 0 5
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24601
// if checkLink then
24537: LD_VAR 0 3
24541: IFFALSE 24591
// begin for i in tmp do
24543: LD_ADDR_VAR 0 6
24547: PUSH
24548: LD_VAR 0 5
24552: PUSH
24553: FOR_IN
24554: IFFALSE 24589
// if GetBase ( i ) <> base then
24556: LD_VAR 0 6
24560: PPUSH
24561: CALL_OW 274
24565: PUSH
24566: LD_VAR 0 1
24570: NONEQUAL
24571: IFFALSE 24587
// ComLinkToBase ( base , i ) ;
24573: LD_VAR 0 1
24577: PPUSH
24578: LD_VAR 0 6
24582: PPUSH
24583: CALL_OW 169
24587: GO 24553
24589: POP
24590: POP
// end ; result := tmp ;
24591: LD_ADDR_VAR 0 4
24595: PUSH
24596: LD_VAR 0 5
24600: ST_TO_ADDR
// end ;
24601: LD_VAR 0 4
24605: RET
// export function ComComplete ( units , b ) ; var i ; begin
24606: LD_INT 0
24608: PPUSH
24609: PPUSH
// if not units then
24610: LD_VAR 0 1
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24709
// for i in units do
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: LD_VAR 0 1
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24707
// if BuildingStatus ( b ) = bs_build then
24632: LD_VAR 0 2
24636: PPUSH
24637: CALL_OW 461
24641: PUSH
24642: LD_INT 1
24644: EQUAL
24645: IFFALSE 24705
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24647: LD_VAR 0 4
24651: PPUSH
24652: LD_STRING h
24654: PUSH
24655: LD_VAR 0 2
24659: PPUSH
24660: CALL_OW 250
24664: PUSH
24665: LD_VAR 0 2
24669: PPUSH
24670: CALL_OW 251
24674: PUSH
24675: LD_VAR 0 2
24679: PUSH
24680: LD_INT 0
24682: PUSH
24683: LD_INT 0
24685: PUSH
24686: LD_INT 0
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: PUSH
24698: EMPTY
24699: LIST
24700: PPUSH
24701: CALL_OW 446
24705: GO 24629
24707: POP
24708: POP
// end ;
24709: LD_VAR 0 3
24713: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24714: LD_INT 0
24716: PPUSH
24717: PPUSH
24718: PPUSH
24719: PPUSH
24720: PPUSH
24721: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24722: LD_VAR 0 1
24726: NOT
24727: PUSH
24728: LD_VAR 0 1
24732: PPUSH
24733: CALL_OW 263
24737: PUSH
24738: LD_INT 2
24740: NONEQUAL
24741: OR
24742: IFFALSE 24746
// exit ;
24744: GO 25062
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24746: LD_ADDR_VAR 0 6
24750: PUSH
24751: LD_INT 22
24753: PUSH
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 255
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: LD_INT 2
24770: PUSH
24771: LD_INT 30
24773: PUSH
24774: LD_INT 36
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: PUSH
24781: LD_INT 34
24783: PUSH
24784: LD_INT 31
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: EMPTY
24792: LIST
24793: LIST
24794: LIST
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: PPUSH
24800: CALL_OW 69
24804: ST_TO_ADDR
// if not tmp then
24805: LD_VAR 0 6
24809: NOT
24810: IFFALSE 24814
// exit ;
24812: GO 25062
// result := [ ] ;
24814: LD_ADDR_VAR 0 2
24818: PUSH
24819: EMPTY
24820: ST_TO_ADDR
// for i in tmp do
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: LD_VAR 0 6
24830: PUSH
24831: FOR_IN
24832: IFFALSE 24903
// begin t := UnitsInside ( i ) ;
24834: LD_ADDR_VAR 0 4
24838: PUSH
24839: LD_VAR 0 3
24843: PPUSH
24844: CALL_OW 313
24848: ST_TO_ADDR
// if t then
24849: LD_VAR 0 4
24853: IFFALSE 24901
// for j in t do
24855: LD_ADDR_VAR 0 7
24859: PUSH
24860: LD_VAR 0 4
24864: PUSH
24865: FOR_IN
24866: IFFALSE 24899
// result := Replace ( result , result + 1 , j ) ;
24868: LD_ADDR_VAR 0 2
24872: PUSH
24873: LD_VAR 0 2
24877: PPUSH
24878: LD_VAR 0 2
24882: PUSH
24883: LD_INT 1
24885: PLUS
24886: PPUSH
24887: LD_VAR 0 7
24891: PPUSH
24892: CALL_OW 1
24896: ST_TO_ADDR
24897: GO 24865
24899: POP
24900: POP
// end ;
24901: GO 24831
24903: POP
24904: POP
// if not result then
24905: LD_VAR 0 2
24909: NOT
24910: IFFALSE 24914
// exit ;
24912: GO 25062
// mech := result [ 1 ] ;
24914: LD_ADDR_VAR 0 5
24918: PUSH
24919: LD_VAR 0 2
24923: PUSH
24924: LD_INT 1
24926: ARRAY
24927: ST_TO_ADDR
// if result > 1 then
24928: LD_VAR 0 2
24932: PUSH
24933: LD_INT 1
24935: GREATER
24936: IFFALSE 25048
// begin for i = 2 to result do
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: DOUBLE
24944: LD_INT 2
24946: DEC
24947: ST_TO_ADDR
24948: LD_VAR 0 2
24952: PUSH
24953: FOR_TO
24954: IFFALSE 25046
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24956: LD_ADDR_VAR 0 4
24960: PUSH
24961: LD_VAR 0 2
24965: PUSH
24966: LD_VAR 0 3
24970: ARRAY
24971: PPUSH
24972: LD_INT 3
24974: PPUSH
24975: CALL_OW 259
24979: PUSH
24980: LD_VAR 0 2
24984: PUSH
24985: LD_VAR 0 3
24989: ARRAY
24990: PPUSH
24991: CALL_OW 432
24995: MINUS
24996: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24997: LD_VAR 0 4
25001: PUSH
25002: LD_VAR 0 5
25006: PPUSH
25007: LD_INT 3
25009: PPUSH
25010: CALL_OW 259
25014: PUSH
25015: LD_VAR 0 5
25019: PPUSH
25020: CALL_OW 432
25024: MINUS
25025: GREATEREQUAL
25026: IFFALSE 25044
// mech := result [ i ] ;
25028: LD_ADDR_VAR 0 5
25032: PUSH
25033: LD_VAR 0 2
25037: PUSH
25038: LD_VAR 0 3
25042: ARRAY
25043: ST_TO_ADDR
// end ;
25044: GO 24953
25046: POP
25047: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25048: LD_VAR 0 1
25052: PPUSH
25053: LD_VAR 0 5
25057: PPUSH
25058: CALL_OW 135
// end ;
25062: LD_VAR 0 2
25066: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25067: LD_INT 0
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
25073: PPUSH
25074: PPUSH
25075: PPUSH
25076: PPUSH
25077: PPUSH
25078: PPUSH
25079: PPUSH
25080: PPUSH
25081: PPUSH
// result := [ ] ;
25082: LD_ADDR_VAR 0 7
25086: PUSH
25087: EMPTY
25088: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 266
25098: PUSH
25099: LD_INT 0
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: IN
25109: NOT
25110: IFFALSE 25114
// exit ;
25112: GO 26748
// if name then
25114: LD_VAR 0 3
25118: IFFALSE 25134
// SetBName ( base_dep , name ) ;
25120: LD_VAR 0 1
25124: PPUSH
25125: LD_VAR 0 3
25129: PPUSH
25130: CALL_OW 500
// base := GetBase ( base_dep ) ;
25134: LD_ADDR_VAR 0 15
25138: PUSH
25139: LD_VAR 0 1
25143: PPUSH
25144: CALL_OW 274
25148: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25149: LD_ADDR_VAR 0 16
25153: PUSH
25154: LD_VAR 0 1
25158: PPUSH
25159: CALL_OW 255
25163: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25164: LD_ADDR_VAR 0 17
25168: PUSH
25169: LD_VAR 0 1
25173: PPUSH
25174: CALL_OW 248
25178: ST_TO_ADDR
// if sources then
25179: LD_VAR 0 5
25183: IFFALSE 25230
// for i = 1 to 3 do
25185: LD_ADDR_VAR 0 8
25189: PUSH
25190: DOUBLE
25191: LD_INT 1
25193: DEC
25194: ST_TO_ADDR
25195: LD_INT 3
25197: PUSH
25198: FOR_TO
25199: IFFALSE 25228
// AddResourceType ( base , i , sources [ i ] ) ;
25201: LD_VAR 0 15
25205: PPUSH
25206: LD_VAR 0 8
25210: PPUSH
25211: LD_VAR 0 5
25215: PUSH
25216: LD_VAR 0 8
25220: ARRAY
25221: PPUSH
25222: CALL_OW 276
25226: GO 25198
25228: POP
25229: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25230: LD_ADDR_VAR 0 18
25234: PUSH
25235: LD_VAR 0 15
25239: PPUSH
25240: LD_VAR 0 2
25244: PPUSH
25245: LD_INT 1
25247: PPUSH
25248: CALL 24491 0 3
25252: ST_TO_ADDR
// InitHc ;
25253: CALL_OW 19
// InitUc ;
25257: CALL_OW 18
// uc_side := side ;
25261: LD_ADDR_OWVAR 20
25265: PUSH
25266: LD_VAR 0 16
25270: ST_TO_ADDR
// uc_nation := nation ;
25271: LD_ADDR_OWVAR 21
25275: PUSH
25276: LD_VAR 0 17
25280: ST_TO_ADDR
// if buildings then
25281: LD_VAR 0 18
25285: IFFALSE 26607
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25287: LD_ADDR_VAR 0 19
25291: PUSH
25292: LD_VAR 0 18
25296: PPUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 30
25302: PUSH
25303: LD_INT 29
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: LD_INT 30
25312: PUSH
25313: LD_INT 30
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: EMPTY
25321: LIST
25322: LIST
25323: LIST
25324: PPUSH
25325: CALL_OW 72
25329: ST_TO_ADDR
// if tmp then
25330: LD_VAR 0 19
25334: IFFALSE 25382
// for i in tmp do
25336: LD_ADDR_VAR 0 8
25340: PUSH
25341: LD_VAR 0 19
25345: PUSH
25346: FOR_IN
25347: IFFALSE 25380
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25349: LD_VAR 0 8
25353: PPUSH
25354: CALL_OW 250
25358: PPUSH
25359: LD_VAR 0 8
25363: PPUSH
25364: CALL_OW 251
25368: PPUSH
25369: LD_VAR 0 16
25373: PPUSH
25374: CALL_OW 441
25378: GO 25346
25380: POP
25381: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25382: LD_VAR 0 18
25386: PPUSH
25387: LD_INT 2
25389: PUSH
25390: LD_INT 30
25392: PUSH
25393: LD_INT 32
25395: PUSH
25396: EMPTY
25397: LIST
25398: LIST
25399: PUSH
25400: LD_INT 30
25402: PUSH
25403: LD_INT 33
25405: PUSH
25406: EMPTY
25407: LIST
25408: LIST
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: PPUSH
25415: CALL_OW 72
25419: IFFALSE 25507
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25421: LD_ADDR_VAR 0 8
25425: PUSH
25426: LD_VAR 0 18
25430: PPUSH
25431: LD_INT 2
25433: PUSH
25434: LD_INT 30
25436: PUSH
25437: LD_INT 32
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: LD_INT 30
25446: PUSH
25447: LD_INT 33
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 72
25463: PUSH
25464: FOR_IN
25465: IFFALSE 25505
// begin if not GetBWeapon ( i ) then
25467: LD_VAR 0 8
25471: PPUSH
25472: CALL_OW 269
25476: NOT
25477: IFFALSE 25503
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25479: LD_VAR 0 8
25483: PPUSH
25484: LD_VAR 0 8
25488: PPUSH
25489: LD_VAR 0 2
25493: PPUSH
25494: CALL 26753 0 2
25498: PPUSH
25499: CALL_OW 431
// end ;
25503: GO 25464
25505: POP
25506: POP
// end ; for i = 1 to personel do
25507: LD_ADDR_VAR 0 8
25511: PUSH
25512: DOUBLE
25513: LD_INT 1
25515: DEC
25516: ST_TO_ADDR
25517: LD_VAR 0 6
25521: PUSH
25522: FOR_TO
25523: IFFALSE 26587
// begin if i > 4 then
25525: LD_VAR 0 8
25529: PUSH
25530: LD_INT 4
25532: GREATER
25533: IFFALSE 25537
// break ;
25535: GO 26587
// case i of 1 :
25537: LD_VAR 0 8
25541: PUSH
25542: LD_INT 1
25544: DOUBLE
25545: EQUAL
25546: IFTRUE 25550
25548: GO 25630
25550: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25551: LD_ADDR_VAR 0 12
25555: PUSH
25556: LD_VAR 0 18
25560: PPUSH
25561: LD_INT 22
25563: PUSH
25564: LD_VAR 0 16
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: PUSH
25573: LD_INT 58
25575: PUSH
25576: EMPTY
25577: LIST
25578: PUSH
25579: LD_INT 2
25581: PUSH
25582: LD_INT 30
25584: PUSH
25585: LD_INT 32
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PUSH
25592: LD_INT 30
25594: PUSH
25595: LD_INT 4
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 30
25604: PUSH
25605: LD_INT 5
25607: PUSH
25608: EMPTY
25609: LIST
25610: LIST
25611: PUSH
25612: EMPTY
25613: LIST
25614: LIST
25615: LIST
25616: LIST
25617: PUSH
25618: EMPTY
25619: LIST
25620: LIST
25621: LIST
25622: PPUSH
25623: CALL_OW 72
25627: ST_TO_ADDR
25628: GO 25852
25630: LD_INT 2
25632: DOUBLE
25633: EQUAL
25634: IFTRUE 25638
25636: GO 25700
25638: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25639: LD_ADDR_VAR 0 12
25643: PUSH
25644: LD_VAR 0 18
25648: PPUSH
25649: LD_INT 22
25651: PUSH
25652: LD_VAR 0 16
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: LD_INT 2
25663: PUSH
25664: LD_INT 30
25666: PUSH
25667: LD_INT 0
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PUSH
25674: LD_INT 30
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: LIST
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 72
25697: ST_TO_ADDR
25698: GO 25852
25700: LD_INT 3
25702: DOUBLE
25703: EQUAL
25704: IFTRUE 25708
25706: GO 25770
25708: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25709: LD_ADDR_VAR 0 12
25713: PUSH
25714: LD_VAR 0 18
25718: PPUSH
25719: LD_INT 22
25721: PUSH
25722: LD_VAR 0 16
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 30
25736: PUSH
25737: LD_INT 2
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: LD_INT 30
25746: PUSH
25747: LD_INT 3
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: LIST
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PPUSH
25763: CALL_OW 72
25767: ST_TO_ADDR
25768: GO 25852
25770: LD_INT 4
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25851
25778: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25779: LD_ADDR_VAR 0 12
25783: PUSH
25784: LD_VAR 0 18
25788: PPUSH
25789: LD_INT 22
25791: PUSH
25792: LD_VAR 0 16
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 2
25803: PUSH
25804: LD_INT 30
25806: PUSH
25807: LD_INT 6
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 30
25816: PUSH
25817: LD_INT 7
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 30
25826: PUSH
25827: LD_INT 8
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 72
25848: ST_TO_ADDR
25849: GO 25852
25851: POP
// if i = 1 then
25852: LD_VAR 0 8
25856: PUSH
25857: LD_INT 1
25859: EQUAL
25860: IFFALSE 25971
// begin tmp := [ ] ;
25862: LD_ADDR_VAR 0 19
25866: PUSH
25867: EMPTY
25868: ST_TO_ADDR
// for j in f do
25869: LD_ADDR_VAR 0 9
25873: PUSH
25874: LD_VAR 0 12
25878: PUSH
25879: FOR_IN
25880: IFFALSE 25953
// if GetBType ( j ) = b_bunker then
25882: LD_VAR 0 9
25886: PPUSH
25887: CALL_OW 266
25891: PUSH
25892: LD_INT 32
25894: EQUAL
25895: IFFALSE 25922
// tmp := Insert ( tmp , 1 , j ) else
25897: LD_ADDR_VAR 0 19
25901: PUSH
25902: LD_VAR 0 19
25906: PPUSH
25907: LD_INT 1
25909: PPUSH
25910: LD_VAR 0 9
25914: PPUSH
25915: CALL_OW 2
25919: ST_TO_ADDR
25920: GO 25951
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25922: LD_ADDR_VAR 0 19
25926: PUSH
25927: LD_VAR 0 19
25931: PPUSH
25932: LD_VAR 0 19
25936: PUSH
25937: LD_INT 1
25939: PLUS
25940: PPUSH
25941: LD_VAR 0 9
25945: PPUSH
25946: CALL_OW 2
25950: ST_TO_ADDR
25951: GO 25879
25953: POP
25954: POP
// if tmp then
25955: LD_VAR 0 19
25959: IFFALSE 25971
// f := tmp ;
25961: LD_ADDR_VAR 0 12
25965: PUSH
25966: LD_VAR 0 19
25970: ST_TO_ADDR
// end ; x := personel [ i ] ;
25971: LD_ADDR_VAR 0 13
25975: PUSH
25976: LD_VAR 0 6
25980: PUSH
25981: LD_VAR 0 8
25985: ARRAY
25986: ST_TO_ADDR
// if x = - 1 then
25987: LD_VAR 0 13
25991: PUSH
25992: LD_INT 1
25994: NEG
25995: EQUAL
25996: IFFALSE 26205
// begin for j in f do
25998: LD_ADDR_VAR 0 9
26002: PUSH
26003: LD_VAR 0 12
26007: PUSH
26008: FOR_IN
26009: IFFALSE 26201
// repeat InitHc ;
26011: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26015: LD_VAR 0 9
26019: PPUSH
26020: CALL_OW 266
26024: PUSH
26025: LD_INT 5
26027: EQUAL
26028: IFFALSE 26098
// begin if UnitsInside ( j ) < 3 then
26030: LD_VAR 0 9
26034: PPUSH
26035: CALL_OW 313
26039: PUSH
26040: LD_INT 3
26042: LESS
26043: IFFALSE 26079
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26045: LD_INT 0
26047: PPUSH
26048: LD_INT 5
26050: PUSH
26051: LD_INT 8
26053: PUSH
26054: LD_INT 9
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: LIST
26061: PUSH
26062: LD_VAR 0 17
26066: ARRAY
26067: PPUSH
26068: LD_VAR 0 4
26072: PPUSH
26073: CALL_OW 380
26077: GO 26096
// PrepareHuman ( false , i , skill ) ;
26079: LD_INT 0
26081: PPUSH
26082: LD_VAR 0 8
26086: PPUSH
26087: LD_VAR 0 4
26091: PPUSH
26092: CALL_OW 380
// end else
26096: GO 26115
// PrepareHuman ( false , i , skill ) ;
26098: LD_INT 0
26100: PPUSH
26101: LD_VAR 0 8
26105: PPUSH
26106: LD_VAR 0 4
26110: PPUSH
26111: CALL_OW 380
// un := CreateHuman ;
26115: LD_ADDR_VAR 0 14
26119: PUSH
26120: CALL_OW 44
26124: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26125: LD_ADDR_VAR 0 7
26129: PUSH
26130: LD_VAR 0 7
26134: PPUSH
26135: LD_INT 1
26137: PPUSH
26138: LD_VAR 0 14
26142: PPUSH
26143: CALL_OW 2
26147: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26148: LD_VAR 0 14
26152: PPUSH
26153: LD_VAR 0 9
26157: PPUSH
26158: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26162: LD_VAR 0 9
26166: PPUSH
26167: CALL_OW 313
26171: PUSH
26172: LD_INT 6
26174: EQUAL
26175: PUSH
26176: LD_VAR 0 9
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 32
26188: PUSH
26189: LD_INT 31
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: IN
26196: OR
26197: IFFALSE 26011
26199: GO 26008
26201: POP
26202: POP
// end else
26203: GO 26585
// for j = 1 to x do
26205: LD_ADDR_VAR 0 9
26209: PUSH
26210: DOUBLE
26211: LD_INT 1
26213: DEC
26214: ST_TO_ADDR
26215: LD_VAR 0 13
26219: PUSH
26220: FOR_TO
26221: IFFALSE 26583
// begin InitHc ;
26223: CALL_OW 19
// if not f then
26227: LD_VAR 0 12
26231: NOT
26232: IFFALSE 26321
// begin PrepareHuman ( false , i , skill ) ;
26234: LD_INT 0
26236: PPUSH
26237: LD_VAR 0 8
26241: PPUSH
26242: LD_VAR 0 4
26246: PPUSH
26247: CALL_OW 380
// un := CreateHuman ;
26251: LD_ADDR_VAR 0 14
26255: PUSH
26256: CALL_OW 44
26260: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26261: LD_ADDR_VAR 0 7
26265: PUSH
26266: LD_VAR 0 7
26270: PPUSH
26271: LD_INT 1
26273: PPUSH
26274: LD_VAR 0 14
26278: PPUSH
26279: CALL_OW 2
26283: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26284: LD_VAR 0 14
26288: PPUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 250
26298: PPUSH
26299: LD_VAR 0 1
26303: PPUSH
26304: CALL_OW 251
26308: PPUSH
26309: LD_INT 10
26311: PPUSH
26312: LD_INT 0
26314: PPUSH
26315: CALL_OW 50
// continue ;
26319: GO 26220
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26321: LD_VAR 0 12
26325: PUSH
26326: LD_INT 1
26328: ARRAY
26329: PPUSH
26330: CALL_OW 313
26334: PUSH
26335: LD_VAR 0 12
26339: PUSH
26340: LD_INT 1
26342: ARRAY
26343: PPUSH
26344: CALL_OW 266
26348: PUSH
26349: LD_INT 32
26351: PUSH
26352: LD_INT 31
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: IN
26359: AND
26360: PUSH
26361: LD_VAR 0 12
26365: PUSH
26366: LD_INT 1
26368: ARRAY
26369: PPUSH
26370: CALL_OW 313
26374: PUSH
26375: LD_INT 6
26377: EQUAL
26378: OR
26379: IFFALSE 26399
// f := Delete ( f , 1 ) ;
26381: LD_ADDR_VAR 0 12
26385: PUSH
26386: LD_VAR 0 12
26390: PPUSH
26391: LD_INT 1
26393: PPUSH
26394: CALL_OW 3
26398: ST_TO_ADDR
// if not f then
26399: LD_VAR 0 12
26403: NOT
26404: IFFALSE 26422
// begin x := x + 2 ;
26406: LD_ADDR_VAR 0 13
26410: PUSH
26411: LD_VAR 0 13
26415: PUSH
26416: LD_INT 2
26418: PLUS
26419: ST_TO_ADDR
// continue ;
26420: GO 26220
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26422: LD_VAR 0 12
26426: PUSH
26427: LD_INT 1
26429: ARRAY
26430: PPUSH
26431: CALL_OW 266
26435: PUSH
26436: LD_INT 5
26438: EQUAL
26439: IFFALSE 26513
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26441: LD_VAR 0 12
26445: PUSH
26446: LD_INT 1
26448: ARRAY
26449: PPUSH
26450: CALL_OW 313
26454: PUSH
26455: LD_INT 3
26457: LESS
26458: IFFALSE 26494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26460: LD_INT 0
26462: PPUSH
26463: LD_INT 5
26465: PUSH
26466: LD_INT 8
26468: PUSH
26469: LD_INT 9
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: LIST
26476: PUSH
26477: LD_VAR 0 17
26481: ARRAY
26482: PPUSH
26483: LD_VAR 0 4
26487: PPUSH
26488: CALL_OW 380
26492: GO 26511
// PrepareHuman ( false , i , skill ) ;
26494: LD_INT 0
26496: PPUSH
26497: LD_VAR 0 8
26501: PPUSH
26502: LD_VAR 0 4
26506: PPUSH
26507: CALL_OW 380
// end else
26511: GO 26530
// PrepareHuman ( false , i , skill ) ;
26513: LD_INT 0
26515: PPUSH
26516: LD_VAR 0 8
26520: PPUSH
26521: LD_VAR 0 4
26525: PPUSH
26526: CALL_OW 380
// un := CreateHuman ;
26530: LD_ADDR_VAR 0 14
26534: PUSH
26535: CALL_OW 44
26539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26540: LD_ADDR_VAR 0 7
26544: PUSH
26545: LD_VAR 0 7
26549: PPUSH
26550: LD_INT 1
26552: PPUSH
26553: LD_VAR 0 14
26557: PPUSH
26558: CALL_OW 2
26562: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26563: LD_VAR 0 14
26567: PPUSH
26568: LD_VAR 0 12
26572: PUSH
26573: LD_INT 1
26575: ARRAY
26576: PPUSH
26577: CALL_OW 52
// end ;
26581: GO 26220
26583: POP
26584: POP
// end ;
26585: GO 25522
26587: POP
26588: POP
// result := result ^ buildings ;
26589: LD_ADDR_VAR 0 7
26593: PUSH
26594: LD_VAR 0 7
26598: PUSH
26599: LD_VAR 0 18
26603: ADD
26604: ST_TO_ADDR
// end else
26605: GO 26748
// begin for i = 1 to personel do
26607: LD_ADDR_VAR 0 8
26611: PUSH
26612: DOUBLE
26613: LD_INT 1
26615: DEC
26616: ST_TO_ADDR
26617: LD_VAR 0 6
26621: PUSH
26622: FOR_TO
26623: IFFALSE 26746
// begin if i > 4 then
26625: LD_VAR 0 8
26629: PUSH
26630: LD_INT 4
26632: GREATER
26633: IFFALSE 26637
// break ;
26635: GO 26746
// x := personel [ i ] ;
26637: LD_ADDR_VAR 0 13
26641: PUSH
26642: LD_VAR 0 6
26646: PUSH
26647: LD_VAR 0 8
26651: ARRAY
26652: ST_TO_ADDR
// if x = - 1 then
26653: LD_VAR 0 13
26657: PUSH
26658: LD_INT 1
26660: NEG
26661: EQUAL
26662: IFFALSE 26666
// continue ;
26664: GO 26622
// PrepareHuman ( false , i , skill ) ;
26666: LD_INT 0
26668: PPUSH
26669: LD_VAR 0 8
26673: PPUSH
26674: LD_VAR 0 4
26678: PPUSH
26679: CALL_OW 380
// un := CreateHuman ;
26683: LD_ADDR_VAR 0 14
26687: PUSH
26688: CALL_OW 44
26692: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26693: LD_VAR 0 14
26697: PPUSH
26698: LD_VAR 0 1
26702: PPUSH
26703: CALL_OW 250
26707: PPUSH
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 251
26717: PPUSH
26718: LD_INT 10
26720: PPUSH
26721: LD_INT 0
26723: PPUSH
26724: CALL_OW 50
// result := result ^ un ;
26728: LD_ADDR_VAR 0 7
26732: PUSH
26733: LD_VAR 0 7
26737: PUSH
26738: LD_VAR 0 14
26742: ADD
26743: ST_TO_ADDR
// end ;
26744: GO 26622
26746: POP
26747: POP
// end ; end ;
26748: LD_VAR 0 7
26752: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26753: LD_INT 0
26755: PPUSH
26756: PPUSH
26757: PPUSH
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
26767: PPUSH
26768: PPUSH
26769: PPUSH
26770: PPUSH
// result := false ;
26771: LD_ADDR_VAR 0 3
26775: PUSH
26776: LD_INT 0
26778: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26779: LD_VAR 0 1
26783: NOT
26784: PUSH
26785: LD_VAR 0 1
26789: PPUSH
26790: CALL_OW 266
26794: PUSH
26795: LD_INT 32
26797: PUSH
26798: LD_INT 33
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: IN
26805: NOT
26806: OR
26807: IFFALSE 26811
// exit ;
26809: GO 27920
// nat := GetNation ( tower ) ;
26811: LD_ADDR_VAR 0 12
26815: PUSH
26816: LD_VAR 0 1
26820: PPUSH
26821: CALL_OW 248
26825: ST_TO_ADDR
// side := GetSide ( tower ) ;
26826: LD_ADDR_VAR 0 16
26830: PUSH
26831: LD_VAR 0 1
26835: PPUSH
26836: CALL_OW 255
26840: ST_TO_ADDR
// x := GetX ( tower ) ;
26841: LD_ADDR_VAR 0 10
26845: PUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 250
26855: ST_TO_ADDR
// y := GetY ( tower ) ;
26856: LD_ADDR_VAR 0 11
26860: PUSH
26861: LD_VAR 0 1
26865: PPUSH
26866: CALL_OW 251
26870: ST_TO_ADDR
// if not x or not y then
26871: LD_VAR 0 10
26875: NOT
26876: PUSH
26877: LD_VAR 0 11
26881: NOT
26882: OR
26883: IFFALSE 26887
// exit ;
26885: GO 27920
// weapon := 0 ;
26887: LD_ADDR_VAR 0 18
26891: PUSH
26892: LD_INT 0
26894: ST_TO_ADDR
// fac_list := [ ] ;
26895: LD_ADDR_VAR 0 17
26899: PUSH
26900: EMPTY
26901: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26902: LD_ADDR_VAR 0 6
26906: PUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 274
26916: PPUSH
26917: LD_VAR 0 2
26921: PPUSH
26922: LD_INT 0
26924: PPUSH
26925: CALL 24491 0 3
26929: PPUSH
26930: LD_INT 30
26932: PUSH
26933: LD_INT 3
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: PPUSH
26940: CALL_OW 72
26944: ST_TO_ADDR
// if not factories then
26945: LD_VAR 0 6
26949: NOT
26950: IFFALSE 26954
// exit ;
26952: GO 27920
// for i in factories do
26954: LD_ADDR_VAR 0 8
26958: PUSH
26959: LD_VAR 0 6
26963: PUSH
26964: FOR_IN
26965: IFFALSE 26990
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26967: LD_ADDR_VAR 0 17
26971: PUSH
26972: LD_VAR 0 17
26976: PUSH
26977: LD_VAR 0 8
26981: PPUSH
26982: CALL_OW 478
26986: UNION
26987: ST_TO_ADDR
26988: GO 26964
26990: POP
26991: POP
// if not fac_list then
26992: LD_VAR 0 17
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27920
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27001: LD_ADDR_VAR 0 5
27005: PUSH
27006: LD_INT 4
27008: PUSH
27009: LD_INT 5
27011: PUSH
27012: LD_INT 9
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 6
27020: PUSH
27021: LD_INT 7
27023: PUSH
27024: LD_INT 11
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 27
27038: PUSH
27039: LD_INT 28
27041: PUSH
27042: LD_INT 26
27044: PUSH
27045: LD_INT 30
27047: PUSH
27048: EMPTY
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 43
27056: PUSH
27057: LD_INT 44
27059: PUSH
27060: LD_INT 46
27062: PUSH
27063: LD_INT 45
27065: PUSH
27066: LD_INT 47
27068: PUSH
27069: LD_INT 49
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: PUSH
27080: EMPTY
27081: LIST
27082: LIST
27083: LIST
27084: PUSH
27085: LD_VAR 0 12
27089: ARRAY
27090: ST_TO_ADDR
// list := list isect fac_list ;
27091: LD_ADDR_VAR 0 5
27095: PUSH
27096: LD_VAR 0 5
27100: PUSH
27101: LD_VAR 0 17
27105: ISECT
27106: ST_TO_ADDR
// if not list then
27107: LD_VAR 0 5
27111: NOT
27112: IFFALSE 27116
// exit ;
27114: GO 27920
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27116: LD_VAR 0 12
27120: PUSH
27121: LD_INT 3
27123: EQUAL
27124: PUSH
27125: LD_INT 49
27127: PUSH
27128: LD_VAR 0 5
27132: IN
27133: AND
27134: PUSH
27135: LD_INT 31
27137: PPUSH
27138: LD_VAR 0 16
27142: PPUSH
27143: CALL_OW 321
27147: PUSH
27148: LD_INT 2
27150: EQUAL
27151: AND
27152: IFFALSE 27212
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27154: LD_INT 22
27156: PUSH
27157: LD_VAR 0 16
27161: PUSH
27162: EMPTY
27163: LIST
27164: LIST
27165: PUSH
27166: LD_INT 35
27168: PUSH
27169: LD_INT 49
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: PUSH
27176: LD_INT 91
27178: PUSH
27179: LD_VAR 0 1
27183: PUSH
27184: LD_INT 10
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: LIST
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: LIST
27196: PPUSH
27197: CALL_OW 69
27201: NOT
27202: IFFALSE 27212
// weapon := ru_time_lapser ;
27204: LD_ADDR_VAR 0 18
27208: PUSH
27209: LD_INT 49
27211: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27212: LD_VAR 0 12
27216: PUSH
27217: LD_INT 1
27219: PUSH
27220: LD_INT 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: IN
27227: PUSH
27228: LD_INT 11
27230: PUSH
27231: LD_VAR 0 5
27235: IN
27236: PUSH
27237: LD_INT 30
27239: PUSH
27240: LD_VAR 0 5
27244: IN
27245: OR
27246: AND
27247: PUSH
27248: LD_INT 6
27250: PPUSH
27251: LD_VAR 0 16
27255: PPUSH
27256: CALL_OW 321
27260: PUSH
27261: LD_INT 2
27263: EQUAL
27264: AND
27265: IFFALSE 27430
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27267: LD_INT 22
27269: PUSH
27270: LD_VAR 0 16
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 35
27284: PUSH
27285: LD_INT 11
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 35
27294: PUSH
27295: LD_INT 30
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 91
27309: PUSH
27310: LD_VAR 0 1
27314: PUSH
27315: LD_INT 18
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: LIST
27322: PUSH
27323: EMPTY
27324: LIST
27325: LIST
27326: LIST
27327: PPUSH
27328: CALL_OW 69
27332: NOT
27333: PUSH
27334: LD_INT 22
27336: PUSH
27337: LD_VAR 0 16
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 2
27348: PUSH
27349: LD_INT 30
27351: PUSH
27352: LD_INT 32
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 30
27361: PUSH
27362: LD_INT 33
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: LIST
27373: PUSH
27374: LD_INT 91
27376: PUSH
27377: LD_VAR 0 1
27381: PUSH
27382: LD_INT 12
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: LIST
27389: PUSH
27390: EMPTY
27391: LIST
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: PPUSH
27398: CALL_OW 69
27402: PUSH
27403: LD_INT 2
27405: GREATER
27406: AND
27407: IFFALSE 27430
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27409: LD_ADDR_VAR 0 18
27413: PUSH
27414: LD_INT 11
27416: PUSH
27417: LD_INT 30
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_VAR 0 12
27428: ARRAY
27429: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27430: LD_VAR 0 18
27434: NOT
27435: PUSH
27436: LD_INT 40
27438: PPUSH
27439: LD_VAR 0 16
27443: PPUSH
27444: CALL_OW 321
27448: PUSH
27449: LD_INT 2
27451: EQUAL
27452: AND
27453: PUSH
27454: LD_INT 7
27456: PUSH
27457: LD_VAR 0 5
27461: IN
27462: PUSH
27463: LD_INT 28
27465: PUSH
27466: LD_VAR 0 5
27470: IN
27471: OR
27472: PUSH
27473: LD_INT 45
27475: PUSH
27476: LD_VAR 0 5
27480: IN
27481: OR
27482: AND
27483: IFFALSE 27737
// begin hex := GetHexInfo ( x , y ) ;
27485: LD_ADDR_VAR 0 4
27489: PUSH
27490: LD_VAR 0 10
27494: PPUSH
27495: LD_VAR 0 11
27499: PPUSH
27500: CALL_OW 546
27504: ST_TO_ADDR
// if hex [ 1 ] then
27505: LD_VAR 0 4
27509: PUSH
27510: LD_INT 1
27512: ARRAY
27513: IFFALSE 27517
// exit ;
27515: GO 27920
// height := hex [ 2 ] ;
27517: LD_ADDR_VAR 0 15
27521: PUSH
27522: LD_VAR 0 4
27526: PUSH
27527: LD_INT 2
27529: ARRAY
27530: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27531: LD_ADDR_VAR 0 14
27535: PUSH
27536: LD_INT 0
27538: PUSH
27539: LD_INT 2
27541: PUSH
27542: LD_INT 3
27544: PUSH
27545: LD_INT 5
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: ST_TO_ADDR
// for i in tmp do
27554: LD_ADDR_VAR 0 8
27558: PUSH
27559: LD_VAR 0 14
27563: PUSH
27564: FOR_IN
27565: IFFALSE 27735
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27567: LD_ADDR_VAR 0 9
27571: PUSH
27572: LD_VAR 0 10
27576: PPUSH
27577: LD_VAR 0 8
27581: PPUSH
27582: LD_INT 5
27584: PPUSH
27585: CALL_OW 272
27589: PUSH
27590: LD_VAR 0 11
27594: PPUSH
27595: LD_VAR 0 8
27599: PPUSH
27600: LD_INT 5
27602: PPUSH
27603: CALL_OW 273
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27612: LD_VAR 0 9
27616: PUSH
27617: LD_INT 1
27619: ARRAY
27620: PPUSH
27621: LD_VAR 0 9
27625: PUSH
27626: LD_INT 2
27628: ARRAY
27629: PPUSH
27630: CALL_OW 488
27634: IFFALSE 27733
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27636: LD_ADDR_VAR 0 4
27640: PUSH
27641: LD_VAR 0 9
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: PPUSH
27650: LD_VAR 0 9
27654: PUSH
27655: LD_INT 2
27657: ARRAY
27658: PPUSH
27659: CALL_OW 546
27663: ST_TO_ADDR
// if hex [ 1 ] then
27664: LD_VAR 0 4
27668: PUSH
27669: LD_INT 1
27671: ARRAY
27672: IFFALSE 27676
// continue ;
27674: GO 27564
// h := hex [ 2 ] ;
27676: LD_ADDR_VAR 0 13
27680: PUSH
27681: LD_VAR 0 4
27685: PUSH
27686: LD_INT 2
27688: ARRAY
27689: ST_TO_ADDR
// if h + 7 < height then
27690: LD_VAR 0 13
27694: PUSH
27695: LD_INT 7
27697: PLUS
27698: PUSH
27699: LD_VAR 0 15
27703: LESS
27704: IFFALSE 27733
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27706: LD_ADDR_VAR 0 18
27710: PUSH
27711: LD_INT 7
27713: PUSH
27714: LD_INT 28
27716: PUSH
27717: LD_INT 45
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: PUSH
27725: LD_VAR 0 12
27729: ARRAY
27730: ST_TO_ADDR
// break ;
27731: GO 27735
// end ; end ; end ;
27733: GO 27564
27735: POP
27736: POP
// end ; if not weapon then
27737: LD_VAR 0 18
27741: NOT
27742: IFFALSE 27802
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27744: LD_ADDR_VAR 0 5
27748: PUSH
27749: LD_VAR 0 5
27753: PUSH
27754: LD_INT 11
27756: PUSH
27757: LD_INT 30
27759: PUSH
27760: LD_INT 49
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: LIST
27767: DIFF
27768: ST_TO_ADDR
// if not list then
27769: LD_VAR 0 5
27773: NOT
27774: IFFALSE 27778
// exit ;
27776: GO 27920
// weapon := list [ rand ( 1 , list ) ] ;
27778: LD_ADDR_VAR 0 18
27782: PUSH
27783: LD_VAR 0 5
27787: PUSH
27788: LD_INT 1
27790: PPUSH
27791: LD_VAR 0 5
27795: PPUSH
27796: CALL_OW 12
27800: ARRAY
27801: ST_TO_ADDR
// end ; if weapon then
27802: LD_VAR 0 18
27806: IFFALSE 27920
// begin tmp := CostOfWeapon ( weapon ) ;
27808: LD_ADDR_VAR 0 14
27812: PUSH
27813: LD_VAR 0 18
27817: PPUSH
27818: CALL_OW 451
27822: ST_TO_ADDR
// j := GetBase ( tower ) ;
27823: LD_ADDR_VAR 0 9
27827: PUSH
27828: LD_VAR 0 1
27832: PPUSH
27833: CALL_OW 274
27837: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27838: LD_VAR 0 9
27842: PPUSH
27843: LD_INT 1
27845: PPUSH
27846: CALL_OW 275
27850: PUSH
27851: LD_VAR 0 14
27855: PUSH
27856: LD_INT 1
27858: ARRAY
27859: GREATEREQUAL
27860: PUSH
27861: LD_VAR 0 9
27865: PPUSH
27866: LD_INT 2
27868: PPUSH
27869: CALL_OW 275
27873: PUSH
27874: LD_VAR 0 14
27878: PUSH
27879: LD_INT 2
27881: ARRAY
27882: GREATEREQUAL
27883: AND
27884: PUSH
27885: LD_VAR 0 9
27889: PPUSH
27890: LD_INT 3
27892: PPUSH
27893: CALL_OW 275
27897: PUSH
27898: LD_VAR 0 14
27902: PUSH
27903: LD_INT 3
27905: ARRAY
27906: GREATEREQUAL
27907: AND
27908: IFFALSE 27920
// result := weapon ;
27910: LD_ADDR_VAR 0 3
27914: PUSH
27915: LD_VAR 0 18
27919: ST_TO_ADDR
// end ; end ;
27920: LD_VAR 0 3
27924: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27925: LD_INT 0
27927: PPUSH
27928: PPUSH
// result := true ;
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 1
27936: ST_TO_ADDR
// if array1 = array2 then
27937: LD_VAR 0 1
27941: PUSH
27942: LD_VAR 0 2
27946: EQUAL
27947: IFFALSE 28007
// begin for i = 1 to array1 do
27949: LD_ADDR_VAR 0 4
27953: PUSH
27954: DOUBLE
27955: LD_INT 1
27957: DEC
27958: ST_TO_ADDR
27959: LD_VAR 0 1
27963: PUSH
27964: FOR_TO
27965: IFFALSE 28003
// if array1 [ i ] <> array2 [ i ] then
27967: LD_VAR 0 1
27971: PUSH
27972: LD_VAR 0 4
27976: ARRAY
27977: PUSH
27978: LD_VAR 0 2
27982: PUSH
27983: LD_VAR 0 4
27987: ARRAY
27988: NONEQUAL
27989: IFFALSE 28001
// begin result := false ;
27991: LD_ADDR_VAR 0 3
27995: PUSH
27996: LD_INT 0
27998: ST_TO_ADDR
// break ;
27999: GO 28003
// end ;
28001: GO 27964
28003: POP
28004: POP
// end else
28005: GO 28015
// result := false ;
28007: LD_ADDR_VAR 0 3
28011: PUSH
28012: LD_INT 0
28014: ST_TO_ADDR
// end ;
28015: LD_VAR 0 3
28019: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28020: LD_INT 0
28022: PPUSH
28023: PPUSH
// if not array1 or not array2 then
28024: LD_VAR 0 1
28028: NOT
28029: PUSH
28030: LD_VAR 0 2
28034: NOT
28035: OR
28036: IFFALSE 28040
// exit ;
28038: GO 28104
// result := true ;
28040: LD_ADDR_VAR 0 3
28044: PUSH
28045: LD_INT 1
28047: ST_TO_ADDR
// for i = 1 to array1 do
28048: LD_ADDR_VAR 0 4
28052: PUSH
28053: DOUBLE
28054: LD_INT 1
28056: DEC
28057: ST_TO_ADDR
28058: LD_VAR 0 1
28062: PUSH
28063: FOR_TO
28064: IFFALSE 28102
// if array1 [ i ] <> array2 [ i ] then
28066: LD_VAR 0 1
28070: PUSH
28071: LD_VAR 0 4
28075: ARRAY
28076: PUSH
28077: LD_VAR 0 2
28081: PUSH
28082: LD_VAR 0 4
28086: ARRAY
28087: NONEQUAL
28088: IFFALSE 28100
// begin result := false ;
28090: LD_ADDR_VAR 0 3
28094: PUSH
28095: LD_INT 0
28097: ST_TO_ADDR
// break ;
28098: GO 28102
// end ;
28100: GO 28063
28102: POP
28103: POP
// end ;
28104: LD_VAR 0 3
28108: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28109: LD_INT 0
28111: PPUSH
28112: PPUSH
28113: PPUSH
// pom := GetBase ( fac ) ;
28114: LD_ADDR_VAR 0 5
28118: PUSH
28119: LD_VAR 0 1
28123: PPUSH
28124: CALL_OW 274
28128: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28129: LD_ADDR_VAR 0 4
28133: PUSH
28134: LD_VAR 0 2
28138: PUSH
28139: LD_INT 1
28141: ARRAY
28142: PPUSH
28143: LD_VAR 0 2
28147: PUSH
28148: LD_INT 2
28150: ARRAY
28151: PPUSH
28152: LD_VAR 0 2
28156: PUSH
28157: LD_INT 3
28159: ARRAY
28160: PPUSH
28161: LD_VAR 0 2
28165: PUSH
28166: LD_INT 4
28168: ARRAY
28169: PPUSH
28170: CALL_OW 449
28174: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28175: LD_ADDR_VAR 0 3
28179: PUSH
28180: LD_VAR 0 5
28184: PPUSH
28185: LD_INT 1
28187: PPUSH
28188: CALL_OW 275
28192: PUSH
28193: LD_VAR 0 4
28197: PUSH
28198: LD_INT 1
28200: ARRAY
28201: GREATEREQUAL
28202: PUSH
28203: LD_VAR 0 5
28207: PPUSH
28208: LD_INT 2
28210: PPUSH
28211: CALL_OW 275
28215: PUSH
28216: LD_VAR 0 4
28220: PUSH
28221: LD_INT 2
28223: ARRAY
28224: GREATEREQUAL
28225: AND
28226: PUSH
28227: LD_VAR 0 5
28231: PPUSH
28232: LD_INT 3
28234: PPUSH
28235: CALL_OW 275
28239: PUSH
28240: LD_VAR 0 4
28244: PUSH
28245: LD_INT 3
28247: ARRAY
28248: GREATEREQUAL
28249: AND
28250: ST_TO_ADDR
// end ;
28251: LD_VAR 0 3
28255: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28256: LD_INT 0
28258: PPUSH
28259: PPUSH
28260: PPUSH
28261: PPUSH
// pom := GetBase ( building ) ;
28262: LD_ADDR_VAR 0 3
28266: PUSH
28267: LD_VAR 0 1
28271: PPUSH
28272: CALL_OW 274
28276: ST_TO_ADDR
// if not pom then
28277: LD_VAR 0 3
28281: NOT
28282: IFFALSE 28286
// exit ;
28284: GO 28456
// btype := GetBType ( building ) ;
28286: LD_ADDR_VAR 0 5
28290: PUSH
28291: LD_VAR 0 1
28295: PPUSH
28296: CALL_OW 266
28300: ST_TO_ADDR
// if btype = b_armoury then
28301: LD_VAR 0 5
28305: PUSH
28306: LD_INT 4
28308: EQUAL
28309: IFFALSE 28319
// btype := b_barracks ;
28311: LD_ADDR_VAR 0 5
28315: PUSH
28316: LD_INT 5
28318: ST_TO_ADDR
// if btype = b_depot then
28319: LD_VAR 0 5
28323: PUSH
28324: LD_INT 0
28326: EQUAL
28327: IFFALSE 28337
// btype := b_warehouse ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_INT 1
28336: ST_TO_ADDR
// if btype = b_workshop then
28337: LD_VAR 0 5
28341: PUSH
28342: LD_INT 2
28344: EQUAL
28345: IFFALSE 28355
// btype := b_factory ;
28347: LD_ADDR_VAR 0 5
28351: PUSH
28352: LD_INT 3
28354: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28355: LD_ADDR_VAR 0 4
28359: PUSH
28360: LD_VAR 0 5
28364: PPUSH
28365: LD_VAR 0 1
28369: PPUSH
28370: CALL_OW 248
28374: PPUSH
28375: CALL_OW 450
28379: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28380: LD_ADDR_VAR 0 2
28384: PUSH
28385: LD_VAR 0 3
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 275
28397: PUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_INT 1
28405: ARRAY
28406: GREATEREQUAL
28407: PUSH
28408: LD_VAR 0 3
28412: PPUSH
28413: LD_INT 2
28415: PPUSH
28416: CALL_OW 275
28420: PUSH
28421: LD_VAR 0 4
28425: PUSH
28426: LD_INT 2
28428: ARRAY
28429: GREATEREQUAL
28430: AND
28431: PUSH
28432: LD_VAR 0 3
28436: PPUSH
28437: LD_INT 3
28439: PPUSH
28440: CALL_OW 275
28444: PUSH
28445: LD_VAR 0 4
28449: PUSH
28450: LD_INT 3
28452: ARRAY
28453: GREATEREQUAL
28454: AND
28455: ST_TO_ADDR
// end ;
28456: LD_VAR 0 2
28460: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28461: LD_INT 0
28463: PPUSH
28464: PPUSH
28465: PPUSH
// pom := GetBase ( building ) ;
28466: LD_ADDR_VAR 0 4
28470: PUSH
28471: LD_VAR 0 1
28475: PPUSH
28476: CALL_OW 274
28480: ST_TO_ADDR
// if not pom then
28481: LD_VAR 0 4
28485: NOT
28486: IFFALSE 28490
// exit ;
28488: GO 28591
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28490: LD_ADDR_VAR 0 5
28494: PUSH
28495: LD_VAR 0 2
28499: PPUSH
28500: LD_VAR 0 1
28504: PPUSH
28505: CALL_OW 248
28509: PPUSH
28510: CALL_OW 450
28514: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28515: LD_ADDR_VAR 0 3
28519: PUSH
28520: LD_VAR 0 4
28524: PPUSH
28525: LD_INT 1
28527: PPUSH
28528: CALL_OW 275
28532: PUSH
28533: LD_VAR 0 5
28537: PUSH
28538: LD_INT 1
28540: ARRAY
28541: GREATEREQUAL
28542: PUSH
28543: LD_VAR 0 4
28547: PPUSH
28548: LD_INT 2
28550: PPUSH
28551: CALL_OW 275
28555: PUSH
28556: LD_VAR 0 5
28560: PUSH
28561: LD_INT 2
28563: ARRAY
28564: GREATEREQUAL
28565: AND
28566: PUSH
28567: LD_VAR 0 4
28571: PPUSH
28572: LD_INT 3
28574: PPUSH
28575: CALL_OW 275
28579: PUSH
28580: LD_VAR 0 5
28584: PUSH
28585: LD_INT 3
28587: ARRAY
28588: GREATEREQUAL
28589: AND
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 3
28595: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28596: LD_INT 0
28598: PPUSH
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
28605: PPUSH
28606: PPUSH
28607: PPUSH
28608: PPUSH
// result := false ;
28609: LD_ADDR_VAR 0 8
28613: PUSH
28614: LD_INT 0
28616: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28617: LD_VAR 0 5
28621: NOT
28622: PUSH
28623: LD_VAR 0 1
28627: NOT
28628: OR
28629: PUSH
28630: LD_VAR 0 2
28634: NOT
28635: OR
28636: PUSH
28637: LD_VAR 0 3
28641: NOT
28642: OR
28643: IFFALSE 28647
// exit ;
28645: GO 29461
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28647: LD_ADDR_VAR 0 14
28651: PUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: LD_VAR 0 2
28661: PPUSH
28662: LD_VAR 0 3
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_VAR 0 5
28676: PUSH
28677: LD_INT 1
28679: ARRAY
28680: PPUSH
28681: CALL_OW 248
28685: PPUSH
28686: LD_INT 0
28688: PPUSH
28689: CALL 30698 0 6
28693: ST_TO_ADDR
// if not hexes then
28694: LD_VAR 0 14
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 29461
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28703: LD_ADDR_VAR 0 17
28707: PUSH
28708: LD_VAR 0 5
28712: PPUSH
28713: LD_INT 22
28715: PUSH
28716: LD_VAR 0 13
28720: PPUSH
28721: CALL_OW 255
28725: PUSH
28726: EMPTY
28727: LIST
28728: LIST
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: LD_INT 30
28735: PUSH
28736: LD_INT 0
28738: PUSH
28739: EMPTY
28740: LIST
28741: LIST
28742: PUSH
28743: LD_INT 30
28745: PUSH
28746: LD_INT 1
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: LIST
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PPUSH
28762: CALL_OW 72
28766: ST_TO_ADDR
// for i = 1 to hexes do
28767: LD_ADDR_VAR 0 9
28771: PUSH
28772: DOUBLE
28773: LD_INT 1
28775: DEC
28776: ST_TO_ADDR
28777: LD_VAR 0 14
28781: PUSH
28782: FOR_TO
28783: IFFALSE 29459
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28785: LD_ADDR_VAR 0 13
28789: PUSH
28790: LD_VAR 0 14
28794: PUSH
28795: LD_VAR 0 9
28799: ARRAY
28800: PUSH
28801: LD_INT 1
28803: ARRAY
28804: PPUSH
28805: LD_VAR 0 14
28809: PUSH
28810: LD_VAR 0 9
28814: ARRAY
28815: PUSH
28816: LD_INT 2
28818: ARRAY
28819: PPUSH
28820: CALL_OW 428
28824: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28825: LD_VAR 0 14
28829: PUSH
28830: LD_VAR 0 9
28834: ARRAY
28835: PUSH
28836: LD_INT 1
28838: ARRAY
28839: PPUSH
28840: LD_VAR 0 14
28844: PUSH
28845: LD_VAR 0 9
28849: ARRAY
28850: PUSH
28851: LD_INT 2
28853: ARRAY
28854: PPUSH
28855: CALL_OW 351
28859: PUSH
28860: LD_VAR 0 14
28864: PUSH
28865: LD_VAR 0 9
28869: ARRAY
28870: PUSH
28871: LD_INT 1
28873: ARRAY
28874: PPUSH
28875: LD_VAR 0 14
28879: PUSH
28880: LD_VAR 0 9
28884: ARRAY
28885: PUSH
28886: LD_INT 2
28888: ARRAY
28889: PPUSH
28890: CALL_OW 488
28894: NOT
28895: OR
28896: PUSH
28897: LD_VAR 0 13
28901: PPUSH
28902: CALL_OW 247
28906: PUSH
28907: LD_INT 3
28909: EQUAL
28910: OR
28911: IFFALSE 28917
// exit ;
28913: POP
28914: POP
28915: GO 29461
// if not tmp then
28917: LD_VAR 0 13
28921: NOT
28922: IFFALSE 28926
// continue ;
28924: GO 28782
// result := true ;
28926: LD_ADDR_VAR 0 8
28930: PUSH
28931: LD_INT 1
28933: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28934: LD_VAR 0 6
28938: PUSH
28939: LD_VAR 0 13
28943: PPUSH
28944: CALL_OW 247
28948: PUSH
28949: LD_INT 2
28951: EQUAL
28952: AND
28953: PUSH
28954: LD_VAR 0 13
28958: PPUSH
28959: CALL_OW 263
28963: PUSH
28964: LD_INT 1
28966: EQUAL
28967: AND
28968: IFFALSE 29132
// begin if IsDrivenBy ( tmp ) then
28970: LD_VAR 0 13
28974: PPUSH
28975: CALL_OW 311
28979: IFFALSE 28983
// continue ;
28981: GO 28782
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28983: LD_VAR 0 6
28987: PPUSH
28988: LD_INT 3
28990: PUSH
28991: LD_INT 60
28993: PUSH
28994: EMPTY
28995: LIST
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 3
29003: PUSH
29004: LD_INT 55
29006: PUSH
29007: EMPTY
29008: LIST
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: PPUSH
29018: CALL_OW 72
29022: IFFALSE 29130
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29024: LD_ADDR_VAR 0 18
29028: PUSH
29029: LD_VAR 0 6
29033: PPUSH
29034: LD_INT 3
29036: PUSH
29037: LD_INT 60
29039: PUSH
29040: EMPTY
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 3
29049: PUSH
29050: LD_INT 55
29052: PUSH
29053: EMPTY
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PPUSH
29064: CALL_OW 72
29068: PUSH
29069: LD_INT 1
29071: ARRAY
29072: ST_TO_ADDR
// if IsInUnit ( driver ) then
29073: LD_VAR 0 18
29077: PPUSH
29078: CALL_OW 310
29082: IFFALSE 29093
// ComExit ( driver ) ;
29084: LD_VAR 0 18
29088: PPUSH
29089: CALL 53826 0 1
// AddComEnterUnit ( driver , tmp ) ;
29093: LD_VAR 0 18
29097: PPUSH
29098: LD_VAR 0 13
29102: PPUSH
29103: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29107: LD_VAR 0 18
29111: PPUSH
29112: LD_VAR 0 7
29116: PPUSH
29117: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29121: LD_VAR 0 18
29125: PPUSH
29126: CALL_OW 181
// end ; continue ;
29130: GO 28782
// end ; if not cleaners or not tmp in cleaners then
29132: LD_VAR 0 6
29136: NOT
29137: PUSH
29138: LD_VAR 0 13
29142: PUSH
29143: LD_VAR 0 6
29147: IN
29148: NOT
29149: OR
29150: IFFALSE 29457
// begin if dep then
29152: LD_VAR 0 17
29156: IFFALSE 29292
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29158: LD_ADDR_VAR 0 16
29162: PUSH
29163: LD_VAR 0 17
29167: PUSH
29168: LD_INT 1
29170: ARRAY
29171: PPUSH
29172: CALL_OW 250
29176: PPUSH
29177: LD_VAR 0 17
29181: PUSH
29182: LD_INT 1
29184: ARRAY
29185: PPUSH
29186: CALL_OW 254
29190: PPUSH
29191: LD_INT 5
29193: PPUSH
29194: CALL_OW 272
29198: PUSH
29199: LD_VAR 0 17
29203: PUSH
29204: LD_INT 1
29206: ARRAY
29207: PPUSH
29208: CALL_OW 251
29212: PPUSH
29213: LD_VAR 0 17
29217: PUSH
29218: LD_INT 1
29220: ARRAY
29221: PPUSH
29222: CALL_OW 254
29226: PPUSH
29227: LD_INT 5
29229: PPUSH
29230: CALL_OW 273
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29239: LD_VAR 0 16
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PPUSH
29248: LD_VAR 0 16
29252: PUSH
29253: LD_INT 2
29255: ARRAY
29256: PPUSH
29257: CALL_OW 488
29261: IFFALSE 29292
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29263: LD_VAR 0 13
29267: PPUSH
29268: LD_VAR 0 16
29272: PUSH
29273: LD_INT 1
29275: ARRAY
29276: PPUSH
29277: LD_VAR 0 16
29281: PUSH
29282: LD_INT 2
29284: ARRAY
29285: PPUSH
29286: CALL_OW 111
// continue ;
29290: GO 28782
// end ; end ; r := GetDir ( tmp ) ;
29292: LD_ADDR_VAR 0 15
29296: PUSH
29297: LD_VAR 0 13
29301: PPUSH
29302: CALL_OW 254
29306: ST_TO_ADDR
// if r = 5 then
29307: LD_VAR 0 15
29311: PUSH
29312: LD_INT 5
29314: EQUAL
29315: IFFALSE 29325
// r := 0 ;
29317: LD_ADDR_VAR 0 15
29321: PUSH
29322: LD_INT 0
29324: ST_TO_ADDR
// for j = r to 5 do
29325: LD_ADDR_VAR 0 10
29329: PUSH
29330: DOUBLE
29331: LD_VAR 0 15
29335: DEC
29336: ST_TO_ADDR
29337: LD_INT 5
29339: PUSH
29340: FOR_TO
29341: IFFALSE 29455
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29343: LD_ADDR_VAR 0 11
29347: PUSH
29348: LD_VAR 0 13
29352: PPUSH
29353: CALL_OW 250
29357: PPUSH
29358: LD_VAR 0 10
29362: PPUSH
29363: LD_INT 2
29365: PPUSH
29366: CALL_OW 272
29370: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29371: LD_ADDR_VAR 0 12
29375: PUSH
29376: LD_VAR 0 13
29380: PPUSH
29381: CALL_OW 251
29385: PPUSH
29386: LD_VAR 0 10
29390: PPUSH
29391: LD_INT 2
29393: PPUSH
29394: CALL_OW 273
29398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29399: LD_VAR 0 11
29403: PPUSH
29404: LD_VAR 0 12
29408: PPUSH
29409: CALL_OW 488
29413: PUSH
29414: LD_VAR 0 11
29418: PPUSH
29419: LD_VAR 0 12
29423: PPUSH
29424: CALL_OW 428
29428: NOT
29429: AND
29430: IFFALSE 29453
// begin ComMoveXY ( tmp , _x , _y ) ;
29432: LD_VAR 0 13
29436: PPUSH
29437: LD_VAR 0 11
29441: PPUSH
29442: LD_VAR 0 12
29446: PPUSH
29447: CALL_OW 111
// break ;
29451: GO 29455
// end ; end ;
29453: GO 29340
29455: POP
29456: POP
// end ; end ;
29457: GO 28782
29459: POP
29460: POP
// end ;
29461: LD_VAR 0 8
29465: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29466: LD_INT 0
29468: PPUSH
// result := true ;
29469: LD_ADDR_VAR 0 3
29473: PUSH
29474: LD_INT 1
29476: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29477: LD_VAR 0 2
29481: PUSH
29482: LD_INT 24
29484: DOUBLE
29485: EQUAL
29486: IFTRUE 29496
29488: LD_INT 33
29490: DOUBLE
29491: EQUAL
29492: IFTRUE 29496
29494: GO 29521
29496: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29497: LD_ADDR_VAR 0 3
29501: PUSH
29502: LD_INT 32
29504: PPUSH
29505: LD_VAR 0 1
29509: PPUSH
29510: CALL_OW 321
29514: PUSH
29515: LD_INT 2
29517: EQUAL
29518: ST_TO_ADDR
29519: GO 29841
29521: LD_INT 20
29523: DOUBLE
29524: EQUAL
29525: IFTRUE 29529
29527: GO 29554
29529: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29530: LD_ADDR_VAR 0 3
29534: PUSH
29535: LD_INT 6
29537: PPUSH
29538: LD_VAR 0 1
29542: PPUSH
29543: CALL_OW 321
29547: PUSH
29548: LD_INT 2
29550: EQUAL
29551: ST_TO_ADDR
29552: GO 29841
29554: LD_INT 22
29556: DOUBLE
29557: EQUAL
29558: IFTRUE 29568
29560: LD_INT 36
29562: DOUBLE
29563: EQUAL
29564: IFTRUE 29568
29566: GO 29593
29568: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29569: LD_ADDR_VAR 0 3
29573: PUSH
29574: LD_INT 15
29576: PPUSH
29577: LD_VAR 0 1
29581: PPUSH
29582: CALL_OW 321
29586: PUSH
29587: LD_INT 2
29589: EQUAL
29590: ST_TO_ADDR
29591: GO 29841
29593: LD_INT 30
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29601
29599: GO 29626
29601: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29602: LD_ADDR_VAR 0 3
29606: PUSH
29607: LD_INT 20
29609: PPUSH
29610: LD_VAR 0 1
29614: PPUSH
29615: CALL_OW 321
29619: PUSH
29620: LD_INT 2
29622: EQUAL
29623: ST_TO_ADDR
29624: GO 29841
29626: LD_INT 28
29628: DOUBLE
29629: EQUAL
29630: IFTRUE 29640
29632: LD_INT 21
29634: DOUBLE
29635: EQUAL
29636: IFTRUE 29640
29638: GO 29665
29640: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29641: LD_ADDR_VAR 0 3
29645: PUSH
29646: LD_INT 21
29648: PPUSH
29649: LD_VAR 0 1
29653: PPUSH
29654: CALL_OW 321
29658: PUSH
29659: LD_INT 2
29661: EQUAL
29662: ST_TO_ADDR
29663: GO 29841
29665: LD_INT 16
29667: DOUBLE
29668: EQUAL
29669: IFTRUE 29673
29671: GO 29700
29673: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29674: LD_ADDR_VAR 0 3
29678: PUSH
29679: LD_EXP 119
29683: PPUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 321
29693: PUSH
29694: LD_INT 2
29696: EQUAL
29697: ST_TO_ADDR
29698: GO 29841
29700: LD_INT 19
29702: DOUBLE
29703: EQUAL
29704: IFTRUE 29714
29706: LD_INT 23
29708: DOUBLE
29709: EQUAL
29710: IFTRUE 29714
29712: GO 29741
29714: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29715: LD_ADDR_VAR 0 3
29719: PUSH
29720: LD_EXP 118
29724: PPUSH
29725: LD_VAR 0 1
29729: PPUSH
29730: CALL_OW 321
29734: PUSH
29735: LD_INT 2
29737: EQUAL
29738: ST_TO_ADDR
29739: GO 29841
29741: LD_INT 17
29743: DOUBLE
29744: EQUAL
29745: IFTRUE 29749
29747: GO 29774
29749: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29750: LD_ADDR_VAR 0 3
29754: PUSH
29755: LD_INT 39
29757: PPUSH
29758: LD_VAR 0 1
29762: PPUSH
29763: CALL_OW 321
29767: PUSH
29768: LD_INT 2
29770: EQUAL
29771: ST_TO_ADDR
29772: GO 29841
29774: LD_INT 18
29776: DOUBLE
29777: EQUAL
29778: IFTRUE 29782
29780: GO 29807
29782: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29783: LD_ADDR_VAR 0 3
29787: PUSH
29788: LD_INT 40
29790: PPUSH
29791: LD_VAR 0 1
29795: PPUSH
29796: CALL_OW 321
29800: PUSH
29801: LD_INT 2
29803: EQUAL
29804: ST_TO_ADDR
29805: GO 29841
29807: LD_INT 27
29809: DOUBLE
29810: EQUAL
29811: IFTRUE 29815
29813: GO 29840
29815: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29816: LD_ADDR_VAR 0 3
29820: PUSH
29821: LD_INT 35
29823: PPUSH
29824: LD_VAR 0 1
29828: PPUSH
29829: CALL_OW 321
29833: PUSH
29834: LD_INT 2
29836: EQUAL
29837: ST_TO_ADDR
29838: GO 29841
29840: POP
// end ;
29841: LD_VAR 0 3
29845: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29846: LD_INT 0
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
29853: PPUSH
29854: PPUSH
29855: PPUSH
29856: PPUSH
29857: PPUSH
29858: PPUSH
// result := false ;
29859: LD_ADDR_VAR 0 6
29863: PUSH
29864: LD_INT 0
29866: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29867: LD_VAR 0 1
29871: NOT
29872: PUSH
29873: LD_VAR 0 1
29877: PPUSH
29878: CALL_OW 266
29882: PUSH
29883: LD_INT 0
29885: PUSH
29886: LD_INT 1
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: IN
29893: NOT
29894: OR
29895: PUSH
29896: LD_VAR 0 2
29900: NOT
29901: OR
29902: PUSH
29903: LD_VAR 0 5
29907: PUSH
29908: LD_INT 0
29910: PUSH
29911: LD_INT 1
29913: PUSH
29914: LD_INT 2
29916: PUSH
29917: LD_INT 3
29919: PUSH
29920: LD_INT 4
29922: PUSH
29923: LD_INT 5
29925: PUSH
29926: EMPTY
29927: LIST
29928: LIST
29929: LIST
29930: LIST
29931: LIST
29932: LIST
29933: IN
29934: NOT
29935: OR
29936: PUSH
29937: LD_VAR 0 3
29941: PPUSH
29942: LD_VAR 0 4
29946: PPUSH
29947: CALL_OW 488
29951: NOT
29952: OR
29953: IFFALSE 29957
// exit ;
29955: GO 30693
// side := GetSide ( depot ) ;
29957: LD_ADDR_VAR 0 9
29961: PUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 255
29971: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29972: LD_VAR 0 9
29976: PPUSH
29977: LD_VAR 0 2
29981: PPUSH
29982: CALL 29466 0 2
29986: NOT
29987: IFFALSE 29991
// exit ;
29989: GO 30693
// pom := GetBase ( depot ) ;
29991: LD_ADDR_VAR 0 10
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 274
30005: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30006: LD_ADDR_VAR 0 11
30010: PUSH
30011: LD_VAR 0 2
30015: PPUSH
30016: LD_VAR 0 1
30020: PPUSH
30021: CALL_OW 248
30025: PPUSH
30026: CALL_OW 450
30030: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30031: LD_VAR 0 10
30035: PPUSH
30036: LD_INT 1
30038: PPUSH
30039: CALL_OW 275
30043: PUSH
30044: LD_VAR 0 11
30048: PUSH
30049: LD_INT 1
30051: ARRAY
30052: GREATEREQUAL
30053: PUSH
30054: LD_VAR 0 10
30058: PPUSH
30059: LD_INT 2
30061: PPUSH
30062: CALL_OW 275
30066: PUSH
30067: LD_VAR 0 11
30071: PUSH
30072: LD_INT 2
30074: ARRAY
30075: GREATEREQUAL
30076: AND
30077: PUSH
30078: LD_VAR 0 10
30082: PPUSH
30083: LD_INT 3
30085: PPUSH
30086: CALL_OW 275
30090: PUSH
30091: LD_VAR 0 11
30095: PUSH
30096: LD_INT 3
30098: ARRAY
30099: GREATEREQUAL
30100: AND
30101: NOT
30102: IFFALSE 30106
// exit ;
30104: GO 30693
// if GetBType ( depot ) = b_depot then
30106: LD_VAR 0 1
30110: PPUSH
30111: CALL_OW 266
30115: PUSH
30116: LD_INT 0
30118: EQUAL
30119: IFFALSE 30131
// dist := 28 else
30121: LD_ADDR_VAR 0 14
30125: PUSH
30126: LD_INT 28
30128: ST_TO_ADDR
30129: GO 30139
// dist := 36 ;
30131: LD_ADDR_VAR 0 14
30135: PUSH
30136: LD_INT 36
30138: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30139: LD_VAR 0 1
30143: PPUSH
30144: LD_VAR 0 3
30148: PPUSH
30149: LD_VAR 0 4
30153: PPUSH
30154: CALL_OW 297
30158: PUSH
30159: LD_VAR 0 14
30163: GREATER
30164: IFFALSE 30168
// exit ;
30166: GO 30693
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30168: LD_ADDR_VAR 0 12
30172: PUSH
30173: LD_VAR 0 2
30177: PPUSH
30178: LD_VAR 0 3
30182: PPUSH
30183: LD_VAR 0 4
30187: PPUSH
30188: LD_VAR 0 5
30192: PPUSH
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 248
30202: PPUSH
30203: LD_INT 0
30205: PPUSH
30206: CALL 30698 0 6
30210: ST_TO_ADDR
// if not hexes then
30211: LD_VAR 0 12
30215: NOT
30216: IFFALSE 30220
// exit ;
30218: GO 30693
// hex := GetHexInfo ( x , y ) ;
30220: LD_ADDR_VAR 0 15
30224: PUSH
30225: LD_VAR 0 3
30229: PPUSH
30230: LD_VAR 0 4
30234: PPUSH
30235: CALL_OW 546
30239: ST_TO_ADDR
// if hex [ 1 ] then
30240: LD_VAR 0 15
30244: PUSH
30245: LD_INT 1
30247: ARRAY
30248: IFFALSE 30252
// exit ;
30250: GO 30693
// height := hex [ 2 ] ;
30252: LD_ADDR_VAR 0 13
30256: PUSH
30257: LD_VAR 0 15
30261: PUSH
30262: LD_INT 2
30264: ARRAY
30265: ST_TO_ADDR
// for i = 1 to hexes do
30266: LD_ADDR_VAR 0 7
30270: PUSH
30271: DOUBLE
30272: LD_INT 1
30274: DEC
30275: ST_TO_ADDR
30276: LD_VAR 0 12
30280: PUSH
30281: FOR_TO
30282: IFFALSE 30612
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30284: LD_VAR 0 12
30288: PUSH
30289: LD_VAR 0 7
30293: ARRAY
30294: PUSH
30295: LD_INT 1
30297: ARRAY
30298: PPUSH
30299: LD_VAR 0 12
30303: PUSH
30304: LD_VAR 0 7
30308: ARRAY
30309: PUSH
30310: LD_INT 2
30312: ARRAY
30313: PPUSH
30314: CALL_OW 488
30318: NOT
30319: PUSH
30320: LD_VAR 0 12
30324: PUSH
30325: LD_VAR 0 7
30329: ARRAY
30330: PUSH
30331: LD_INT 1
30333: ARRAY
30334: PPUSH
30335: LD_VAR 0 12
30339: PUSH
30340: LD_VAR 0 7
30344: ARRAY
30345: PUSH
30346: LD_INT 2
30348: ARRAY
30349: PPUSH
30350: CALL_OW 428
30354: PUSH
30355: LD_INT 0
30357: GREATER
30358: OR
30359: PUSH
30360: LD_VAR 0 12
30364: PUSH
30365: LD_VAR 0 7
30369: ARRAY
30370: PUSH
30371: LD_INT 1
30373: ARRAY
30374: PPUSH
30375: LD_VAR 0 12
30379: PUSH
30380: LD_VAR 0 7
30384: ARRAY
30385: PUSH
30386: LD_INT 2
30388: ARRAY
30389: PPUSH
30390: CALL_OW 351
30394: OR
30395: IFFALSE 30401
// exit ;
30397: POP
30398: POP
30399: GO 30693
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30401: LD_ADDR_VAR 0 8
30405: PUSH
30406: LD_VAR 0 12
30410: PUSH
30411: LD_VAR 0 7
30415: ARRAY
30416: PUSH
30417: LD_INT 1
30419: ARRAY
30420: PPUSH
30421: LD_VAR 0 12
30425: PUSH
30426: LD_VAR 0 7
30430: ARRAY
30431: PUSH
30432: LD_INT 2
30434: ARRAY
30435: PPUSH
30436: CALL_OW 546
30440: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30441: LD_VAR 0 8
30445: PUSH
30446: LD_INT 1
30448: ARRAY
30449: PUSH
30450: LD_VAR 0 8
30454: PUSH
30455: LD_INT 2
30457: ARRAY
30458: PUSH
30459: LD_VAR 0 13
30463: PUSH
30464: LD_INT 2
30466: PLUS
30467: GREATER
30468: OR
30469: PUSH
30470: LD_VAR 0 8
30474: PUSH
30475: LD_INT 2
30477: ARRAY
30478: PUSH
30479: LD_VAR 0 13
30483: PUSH
30484: LD_INT 2
30486: MINUS
30487: LESS
30488: OR
30489: PUSH
30490: LD_VAR 0 8
30494: PUSH
30495: LD_INT 3
30497: ARRAY
30498: PUSH
30499: LD_INT 0
30501: PUSH
30502: LD_INT 8
30504: PUSH
30505: LD_INT 9
30507: PUSH
30508: LD_INT 10
30510: PUSH
30511: LD_INT 11
30513: PUSH
30514: LD_INT 12
30516: PUSH
30517: LD_INT 13
30519: PUSH
30520: LD_INT 16
30522: PUSH
30523: LD_INT 17
30525: PUSH
30526: LD_INT 18
30528: PUSH
30529: LD_INT 19
30531: PUSH
30532: LD_INT 20
30534: PUSH
30535: LD_INT 21
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: LIST
30552: IN
30553: NOT
30554: OR
30555: PUSH
30556: LD_VAR 0 8
30560: PUSH
30561: LD_INT 5
30563: ARRAY
30564: NOT
30565: OR
30566: PUSH
30567: LD_VAR 0 8
30571: PUSH
30572: LD_INT 6
30574: ARRAY
30575: PUSH
30576: LD_INT 1
30578: PUSH
30579: LD_INT 2
30581: PUSH
30582: LD_INT 7
30584: PUSH
30585: LD_INT 9
30587: PUSH
30588: LD_INT 10
30590: PUSH
30591: LD_INT 11
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: LIST
30598: LIST
30599: LIST
30600: LIST
30601: IN
30602: NOT
30603: OR
30604: IFFALSE 30610
// exit ;
30606: POP
30607: POP
30608: GO 30693
// end ;
30610: GO 30281
30612: POP
30613: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30614: LD_VAR 0 9
30618: PPUSH
30619: LD_VAR 0 3
30623: PPUSH
30624: LD_VAR 0 4
30628: PPUSH
30629: LD_INT 20
30631: PPUSH
30632: CALL 22639 0 4
30636: PUSH
30637: LD_INT 4
30639: ARRAY
30640: IFFALSE 30644
// exit ;
30642: GO 30693
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30644: LD_VAR 0 2
30648: PUSH
30649: LD_INT 29
30651: PUSH
30652: LD_INT 30
30654: PUSH
30655: EMPTY
30656: LIST
30657: LIST
30658: IN
30659: PUSH
30660: LD_VAR 0 3
30664: PPUSH
30665: LD_VAR 0 4
30669: PPUSH
30670: LD_VAR 0 9
30674: PPUSH
30675: CALL_OW 440
30679: NOT
30680: AND
30681: IFFALSE 30685
// exit ;
30683: GO 30693
// result := true ;
30685: LD_ADDR_VAR 0 6
30689: PUSH
30690: LD_INT 1
30692: ST_TO_ADDR
// end ;
30693: LD_VAR 0 6
30697: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
30702: PPUSH
30703: PPUSH
30704: PPUSH
30705: PPUSH
30706: PPUSH
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
30711: PPUSH
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
30721: PPUSH
30722: PPUSH
30723: PPUSH
30724: PPUSH
30725: PPUSH
30726: PPUSH
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
30750: PPUSH
30751: PPUSH
30752: PPUSH
30753: PPUSH
30754: PPUSH
30755: PPUSH
30756: PPUSH
30757: PPUSH
// result = [ ] ;
30758: LD_ADDR_VAR 0 7
30762: PUSH
30763: EMPTY
30764: ST_TO_ADDR
// temp_list = [ ] ;
30765: LD_ADDR_VAR 0 9
30769: PUSH
30770: EMPTY
30771: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30772: LD_VAR 0 4
30776: PUSH
30777: LD_INT 0
30779: PUSH
30780: LD_INT 1
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 3
30788: PUSH
30789: LD_INT 4
30791: PUSH
30792: LD_INT 5
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: IN
30803: NOT
30804: PUSH
30805: LD_VAR 0 1
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 1
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: IN
30820: PUSH
30821: LD_VAR 0 5
30825: PUSH
30826: LD_INT 1
30828: PUSH
30829: LD_INT 2
30831: PUSH
30832: LD_INT 3
30834: PUSH
30835: EMPTY
30836: LIST
30837: LIST
30838: LIST
30839: IN
30840: NOT
30841: AND
30842: OR
30843: IFFALSE 30847
// exit ;
30845: GO 49238
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30847: LD_VAR 0 1
30851: PUSH
30852: LD_INT 6
30854: PUSH
30855: LD_INT 7
30857: PUSH
30858: LD_INT 8
30860: PUSH
30861: LD_INT 13
30863: PUSH
30864: LD_INT 12
30866: PUSH
30867: LD_INT 15
30869: PUSH
30870: LD_INT 11
30872: PUSH
30873: LD_INT 14
30875: PUSH
30876: LD_INT 10
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: IN
30890: IFFALSE 30900
// btype = b_lab ;
30892: LD_ADDR_VAR 0 1
30896: PUSH
30897: LD_INT 6
30899: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30900: LD_VAR 0 6
30904: PUSH
30905: LD_INT 0
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: LIST
30918: IN
30919: NOT
30920: PUSH
30921: LD_VAR 0 1
30925: PUSH
30926: LD_INT 0
30928: PUSH
30929: LD_INT 1
30931: PUSH
30932: LD_INT 2
30934: PUSH
30935: LD_INT 3
30937: PUSH
30938: LD_INT 6
30940: PUSH
30941: LD_INT 36
30943: PUSH
30944: LD_INT 4
30946: PUSH
30947: LD_INT 5
30949: PUSH
30950: LD_INT 31
30952: PUSH
30953: LD_INT 32
30955: PUSH
30956: LD_INT 33
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: IN
30972: NOT
30973: PUSH
30974: LD_VAR 0 6
30978: PUSH
30979: LD_INT 1
30981: EQUAL
30982: AND
30983: OR
30984: PUSH
30985: LD_VAR 0 1
30989: PUSH
30990: LD_INT 2
30992: PUSH
30993: LD_INT 3
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: IN
31000: NOT
31001: PUSH
31002: LD_VAR 0 6
31006: PUSH
31007: LD_INT 2
31009: EQUAL
31010: AND
31011: OR
31012: IFFALSE 31022
// mode = 0 ;
31014: LD_ADDR_VAR 0 6
31018: PUSH
31019: LD_INT 0
31021: ST_TO_ADDR
// case mode of 0 :
31022: LD_VAR 0 6
31026: PUSH
31027: LD_INT 0
31029: DOUBLE
31030: EQUAL
31031: IFTRUE 31035
31033: GO 42488
31035: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31036: LD_ADDR_VAR 0 11
31040: PUSH
31041: LD_INT 0
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 0
31053: PUSH
31054: LD_INT 1
31056: NEG
31057: PUSH
31058: EMPTY
31059: LIST
31060: LIST
31061: PUSH
31062: LD_INT 1
31064: PUSH
31065: LD_INT 0
31067: PUSH
31068: EMPTY
31069: LIST
31070: LIST
31071: PUSH
31072: LD_INT 1
31074: PUSH
31075: LD_INT 1
31077: PUSH
31078: EMPTY
31079: LIST
31080: LIST
31081: PUSH
31082: LD_INT 0
31084: PUSH
31085: LD_INT 1
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PUSH
31092: LD_INT 1
31094: NEG
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: LIST
31101: LIST
31102: PUSH
31103: LD_INT 1
31105: NEG
31106: PUSH
31107: LD_INT 1
31109: NEG
31110: PUSH
31111: EMPTY
31112: LIST
31113: LIST
31114: PUSH
31115: LD_INT 1
31117: NEG
31118: PUSH
31119: LD_INT 2
31121: NEG
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: LD_INT 2
31132: NEG
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 1
31140: PUSH
31141: LD_INT 1
31143: NEG
31144: PUSH
31145: EMPTY
31146: LIST
31147: LIST
31148: PUSH
31149: LD_INT 1
31151: PUSH
31152: LD_INT 2
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: PUSH
31159: LD_INT 0
31161: PUSH
31162: LD_INT 2
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: LD_INT 1
31175: PUSH
31176: EMPTY
31177: LIST
31178: LIST
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: LD_INT 3
31185: PUSH
31186: EMPTY
31187: LIST
31188: LIST
31189: PUSH
31190: LD_INT 0
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: NEG
31203: PUSH
31204: LD_INT 2
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31229: LD_ADDR_VAR 0 12
31233: PUSH
31234: LD_INT 0
31236: PUSH
31237: LD_INT 0
31239: PUSH
31240: EMPTY
31241: LIST
31242: LIST
31243: PUSH
31244: LD_INT 0
31246: PUSH
31247: LD_INT 1
31249: NEG
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: LD_INT 1
31270: PUSH
31271: EMPTY
31272: LIST
31273: LIST
31274: PUSH
31275: LD_INT 0
31277: PUSH
31278: LD_INT 1
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 0
31291: PUSH
31292: EMPTY
31293: LIST
31294: LIST
31295: PUSH
31296: LD_INT 1
31298: NEG
31299: PUSH
31300: LD_INT 1
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 2
31321: PUSH
31322: LD_INT 0
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 2
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 0
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: PUSH
31361: LD_INT 2
31363: NEG
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 2
31375: NEG
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 3
31386: NEG
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 3
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31425: LD_ADDR_VAR 0 13
31429: PUSH
31430: LD_INT 0
31432: PUSH
31433: LD_INT 0
31435: PUSH
31436: EMPTY
31437: LIST
31438: LIST
31439: PUSH
31440: LD_INT 0
31442: PUSH
31443: LD_INT 1
31445: NEG
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: LD_INT 0
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 1
31463: PUSH
31464: LD_INT 1
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 0
31473: PUSH
31474: LD_INT 1
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: LD_INT 0
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: PUSH
31492: LD_INT 1
31494: NEG
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: NEG
31507: PUSH
31508: LD_INT 2
31510: NEG
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: PUSH
31519: LD_INT 1
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 2
31528: PUSH
31529: LD_INT 2
31531: PUSH
31532: EMPTY
31533: LIST
31534: LIST
31535: PUSH
31536: LD_INT 1
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: LD_INT 2
31548: NEG
31549: PUSH
31550: LD_INT 1
31552: NEG
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: PUSH
31558: LD_INT 2
31560: NEG
31561: PUSH
31562: LD_INT 2
31564: NEG
31565: PUSH
31566: EMPTY
31567: LIST
31568: LIST
31569: PUSH
31570: LD_INT 2
31572: NEG
31573: PUSH
31574: LD_INT 3
31576: NEG
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 3
31584: NEG
31585: PUSH
31586: LD_INT 2
31588: NEG
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 3
31596: NEG
31597: PUSH
31598: LD_INT 3
31600: NEG
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31624: LD_ADDR_VAR 0 14
31628: PUSH
31629: LD_INT 0
31631: PUSH
31632: LD_INT 0
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 0
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 1
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 1
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: PUSH
31670: LD_INT 0
31672: PUSH
31673: LD_INT 1
31675: PUSH
31676: EMPTY
31677: LIST
31678: LIST
31679: PUSH
31680: LD_INT 1
31682: NEG
31683: PUSH
31684: LD_INT 0
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 1
31693: NEG
31694: PUSH
31695: LD_INT 1
31697: NEG
31698: PUSH
31699: EMPTY
31700: LIST
31701: LIST
31702: PUSH
31703: LD_INT 1
31705: NEG
31706: PUSH
31707: LD_INT 2
31709: NEG
31710: PUSH
31711: EMPTY
31712: LIST
31713: LIST
31714: PUSH
31715: LD_INT 0
31717: PUSH
31718: LD_INT 2
31720: NEG
31721: PUSH
31722: EMPTY
31723: LIST
31724: LIST
31725: PUSH
31726: LD_INT 1
31728: PUSH
31729: LD_INT 1
31731: NEG
31732: PUSH
31733: EMPTY
31734: LIST
31735: LIST
31736: PUSH
31737: LD_INT 1
31739: PUSH
31740: LD_INT 2
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 0
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 1
31759: NEG
31760: PUSH
31761: LD_INT 1
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 1
31770: NEG
31771: PUSH
31772: LD_INT 3
31774: NEG
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 0
31782: PUSH
31783: LD_INT 3
31785: NEG
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PUSH
31791: LD_INT 1
31793: PUSH
31794: LD_INT 2
31796: NEG
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: LIST
31816: LIST
31817: LIST
31818: LIST
31819: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31820: LD_ADDR_VAR 0 15
31824: PUSH
31825: LD_INT 0
31827: PUSH
31828: LD_INT 0
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 0
31837: PUSH
31838: LD_INT 1
31840: NEG
31841: PUSH
31842: EMPTY
31843: LIST
31844: LIST
31845: PUSH
31846: LD_INT 1
31848: PUSH
31849: LD_INT 0
31851: PUSH
31852: EMPTY
31853: LIST
31854: LIST
31855: PUSH
31856: LD_INT 1
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 0
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 1
31878: NEG
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: EMPTY
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 1
31889: NEG
31890: PUSH
31891: LD_INT 1
31893: NEG
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: LD_INT 1
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: LD_INT 0
31915: PUSH
31916: EMPTY
31917: LIST
31918: LIST
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: LD_INT 1
31925: PUSH
31926: EMPTY
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 1
31932: NEG
31933: PUSH
31934: LD_INT 1
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: LD_INT 0
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: PUSH
31952: LD_INT 2
31954: NEG
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: PUSH
31964: LD_INT 2
31966: PUSH
31967: LD_INT 1
31969: NEG
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: PUSH
31975: LD_INT 3
31977: PUSH
31978: LD_INT 0
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 3
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: EMPTY
31992: LIST
31993: LIST
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32013: LD_ADDR_VAR 0 16
32017: PUSH
32018: LD_INT 0
32020: PUSH
32021: LD_INT 0
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 1
32033: NEG
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: PUSH
32052: LD_INT 1
32054: PUSH
32055: EMPTY
32056: LIST
32057: LIST
32058: PUSH
32059: LD_INT 0
32061: PUSH
32062: LD_INT 1
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: NEG
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 1
32082: NEG
32083: PUSH
32084: LD_INT 1
32086: NEG
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: PUSH
32092: LD_INT 1
32094: NEG
32095: PUSH
32096: LD_INT 2
32098: NEG
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 2
32106: PUSH
32107: LD_INT 1
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 2
32119: PUSH
32120: EMPTY
32121: LIST
32122: LIST
32123: PUSH
32124: LD_INT 1
32126: PUSH
32127: LD_INT 2
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: NEG
32137: PUSH
32138: LD_INT 1
32140: NEG
32141: PUSH
32142: EMPTY
32143: LIST
32144: LIST
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: LD_INT 2
32152: NEG
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 3
32160: PUSH
32161: LD_INT 2
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 3
32170: PUSH
32171: LD_INT 3
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: LIST
32196: LIST
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32206: LD_ADDR_VAR 0 17
32210: PUSH
32211: LD_INT 0
32213: PUSH
32214: LD_INT 0
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: LD_INT 1
32226: NEG
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: LD_INT 0
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 1
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 0
32254: PUSH
32255: LD_INT 1
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 0
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 1
32275: NEG
32276: PUSH
32277: LD_INT 1
32279: NEG
32280: PUSH
32281: EMPTY
32282: LIST
32283: LIST
32284: PUSH
32285: LD_INT 1
32287: NEG
32288: PUSH
32289: LD_INT 2
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 0
32299: PUSH
32300: LD_INT 2
32302: NEG
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 1
32313: NEG
32314: PUSH
32315: EMPTY
32316: LIST
32317: LIST
32318: PUSH
32319: LD_INT 2
32321: PUSH
32322: LD_INT 0
32324: PUSH
32325: EMPTY
32326: LIST
32327: LIST
32328: PUSH
32329: LD_INT 2
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 1
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 0
32361: PUSH
32362: LD_INT 2
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: LD_INT 1
32371: NEG
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: NEG
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 2
32393: NEG
32394: PUSH
32395: LD_INT 1
32397: NEG
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: LD_INT 2
32409: NEG
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: EMPTY
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: LIST
32435: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32436: LD_ADDR_VAR 0 18
32440: PUSH
32441: LD_INT 0
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: LD_INT 1
32456: NEG
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: PUSH
32472: LD_INT 1
32474: PUSH
32475: LD_INT 1
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: PUSH
32482: LD_INT 0
32484: PUSH
32485: LD_INT 1
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: LD_INT 1
32505: NEG
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 1
32517: NEG
32518: PUSH
32519: LD_INT 2
32521: NEG
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 0
32529: PUSH
32530: LD_INT 2
32532: NEG
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: LD_INT 1
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: LD_INT 2
32551: PUSH
32552: LD_INT 0
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: PUSH
32559: LD_INT 2
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: EMPTY
32566: LIST
32567: LIST
32568: PUSH
32569: LD_INT 2
32571: PUSH
32572: LD_INT 2
32574: PUSH
32575: EMPTY
32576: LIST
32577: LIST
32578: PUSH
32579: LD_INT 1
32581: PUSH
32582: LD_INT 2
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 0
32591: PUSH
32592: LD_INT 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: PUSH
32606: EMPTY
32607: LIST
32608: LIST
32609: PUSH
32610: LD_INT 2
32612: NEG
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 2
32623: NEG
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 2
32635: NEG
32636: PUSH
32637: LD_INT 2
32639: NEG
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32666: LD_ADDR_VAR 0 19
32670: PUSH
32671: LD_INT 0
32673: PUSH
32674: LD_INT 0
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 1
32686: NEG
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 1
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 0
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 1
32724: NEG
32725: PUSH
32726: LD_INT 0
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 1
32739: NEG
32740: PUSH
32741: EMPTY
32742: LIST
32743: LIST
32744: PUSH
32745: LD_INT 1
32747: NEG
32748: PUSH
32749: LD_INT 2
32751: NEG
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PUSH
32757: LD_INT 0
32759: PUSH
32760: LD_INT 2
32762: NEG
32763: PUSH
32764: EMPTY
32765: LIST
32766: LIST
32767: PUSH
32768: LD_INT 1
32770: PUSH
32771: LD_INT 1
32773: NEG
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: LD_INT 2
32781: PUSH
32782: LD_INT 0
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 2
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 2
32801: PUSH
32802: LD_INT 2
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 1
32811: PUSH
32812: LD_INT 2
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 2
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 2
32842: NEG
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 2
32853: NEG
32854: PUSH
32855: LD_INT 1
32857: NEG
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: PUSH
32863: LD_INT 2
32865: NEG
32866: PUSH
32867: LD_INT 2
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32896: LD_ADDR_VAR 0 20
32900: PUSH
32901: LD_INT 0
32903: PUSH
32904: LD_INT 0
32906: PUSH
32907: EMPTY
32908: LIST
32909: LIST
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: LD_INT 1
32916: NEG
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: PUSH
32922: LD_INT 1
32924: PUSH
32925: LD_INT 0
32927: PUSH
32928: EMPTY
32929: LIST
32930: LIST
32931: PUSH
32932: LD_INT 1
32934: PUSH
32935: LD_INT 1
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 0
32944: PUSH
32945: LD_INT 1
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: LD_INT 1
32954: NEG
32955: PUSH
32956: LD_INT 0
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 1
32977: NEG
32978: PUSH
32979: LD_INT 2
32981: NEG
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: LD_INT 2
32992: NEG
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: LD_INT 1
33003: NEG
33004: PUSH
33005: EMPTY
33006: LIST
33007: LIST
33008: PUSH
33009: LD_INT 2
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 2
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: EMPTY
33026: LIST
33027: LIST
33028: PUSH
33029: LD_INT 2
33031: PUSH
33032: LD_INT 2
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PUSH
33039: LD_INT 1
33041: PUSH
33042: LD_INT 2
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 0
33051: PUSH
33052: LD_INT 2
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 1
33061: NEG
33062: PUSH
33063: LD_INT 1
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 2
33072: NEG
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 2
33083: NEG
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 2
33095: NEG
33096: PUSH
33097: LD_INT 2
33099: NEG
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33126: LD_ADDR_VAR 0 21
33130: PUSH
33131: LD_INT 0
33133: PUSH
33134: LD_INT 0
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: LD_INT 1
33146: NEG
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: LD_INT 0
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: LD_INT 1
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: LD_INT 1
33184: NEG
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: NEG
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: PUSH
33205: LD_INT 1
33207: NEG
33208: PUSH
33209: LD_INT 2
33211: NEG
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 2
33222: NEG
33223: PUSH
33224: EMPTY
33225: LIST
33226: LIST
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: LD_INT 1
33233: NEG
33234: PUSH
33235: EMPTY
33236: LIST
33237: LIST
33238: PUSH
33239: LD_INT 2
33241: PUSH
33242: LD_INT 0
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: LD_INT 1
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: LD_INT 2
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 1
33271: PUSH
33272: LD_INT 2
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 2
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PUSH
33289: LD_INT 1
33291: NEG
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 2
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 2
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 2
33325: NEG
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33356: LD_ADDR_VAR 0 22
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: LD_INT 0
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: PUSH
33371: LD_INT 0
33373: PUSH
33374: LD_INT 1
33376: NEG
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: LD_INT 1
33384: PUSH
33385: LD_INT 0
33387: PUSH
33388: EMPTY
33389: LIST
33390: LIST
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: LD_INT 1
33397: PUSH
33398: EMPTY
33399: LIST
33400: LIST
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: LD_INT 1
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 0
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: PUSH
33423: LD_INT 1
33425: NEG
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: LD_INT 2
33441: NEG
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 0
33449: PUSH
33450: LD_INT 2
33452: NEG
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 1
33463: NEG
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: PUSH
33472: LD_INT 0
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: PUSH
33482: LD_INT 1
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: PUSH
33489: LD_INT 2
33491: PUSH
33492: LD_INT 2
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: PUSH
33499: LD_INT 1
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: PUSH
33509: LD_INT 0
33511: PUSH
33512: LD_INT 2
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 1
33521: NEG
33522: PUSH
33523: LD_INT 1
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: NEG
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 2
33543: NEG
33544: PUSH
33545: LD_INT 1
33547: NEG
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: LD_INT 2
33555: NEG
33556: PUSH
33557: LD_INT 2
33559: NEG
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33586: LD_ADDR_VAR 0 23
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: LD_INT 0
33596: PUSH
33597: EMPTY
33598: LIST
33599: LIST
33600: PUSH
33601: LD_INT 0
33603: PUSH
33604: LD_INT 1
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 1
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 1
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: LD_INT 0
33634: PUSH
33635: LD_INT 1
33637: PUSH
33638: EMPTY
33639: LIST
33640: LIST
33641: PUSH
33642: LD_INT 1
33644: NEG
33645: PUSH
33646: LD_INT 0
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 1
33655: NEG
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: EMPTY
33662: LIST
33663: LIST
33664: PUSH
33665: LD_INT 1
33667: NEG
33668: PUSH
33669: LD_INT 2
33671: NEG
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 0
33679: PUSH
33680: LD_INT 2
33682: NEG
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: PUSH
33702: LD_INT 0
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 2
33711: PUSH
33712: LD_INT 1
33714: PUSH
33715: EMPTY
33716: LIST
33717: LIST
33718: PUSH
33719: LD_INT 2
33721: PUSH
33722: LD_INT 2
33724: PUSH
33725: EMPTY
33726: LIST
33727: LIST
33728: PUSH
33729: LD_INT 1
33731: PUSH
33732: LD_INT 2
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PUSH
33739: LD_INT 0
33741: PUSH
33742: LD_INT 2
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: LD_INT 1
33755: PUSH
33756: EMPTY
33757: LIST
33758: LIST
33759: PUSH
33760: LD_INT 2
33762: NEG
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 2
33773: NEG
33774: PUSH
33775: LD_INT 1
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 2
33785: NEG
33786: PUSH
33787: LD_INT 2
33789: NEG
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 2
33797: NEG
33798: PUSH
33799: LD_INT 3
33801: NEG
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: PUSH
33807: LD_INT 1
33809: NEG
33810: PUSH
33811: LD_INT 3
33813: NEG
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 1
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: PUSH
33833: LD_INT 1
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: LIST
33864: LIST
33865: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33866: LD_ADDR_VAR 0 24
33870: PUSH
33871: LD_INT 0
33873: PUSH
33874: LD_INT 0
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 0
33883: PUSH
33884: LD_INT 1
33886: NEG
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 1
33894: PUSH
33895: LD_INT 0
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: LD_INT 1
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: PUSH
33912: LD_INT 0
33914: PUSH
33915: LD_INT 1
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 0
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: LD_INT 1
33939: NEG
33940: PUSH
33941: EMPTY
33942: LIST
33943: LIST
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 0
33959: PUSH
33960: LD_INT 2
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 1
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: EMPTY
33976: LIST
33977: LIST
33978: PUSH
33979: LD_INT 2
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 2
33991: PUSH
33992: LD_INT 1
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: PUSH
33999: LD_INT 2
34001: PUSH
34002: LD_INT 2
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: PUSH
34009: LD_INT 1
34011: PUSH
34012: LD_INT 2
34014: PUSH
34015: EMPTY
34016: LIST
34017: LIST
34018: PUSH
34019: LD_INT 0
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: NEG
34032: PUSH
34033: LD_INT 1
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 2
34053: NEG
34054: PUSH
34055: LD_INT 1
34057: NEG
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: LD_INT 2
34069: NEG
34070: PUSH
34071: EMPTY
34072: LIST
34073: LIST
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: LD_INT 2
34080: NEG
34081: PUSH
34082: EMPTY
34083: LIST
34084: LIST
34085: PUSH
34086: LD_INT 2
34088: PUSH
34089: LD_INT 1
34091: NEG
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 3
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 3
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34142: LD_ADDR_VAR 0 25
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 0
34159: PUSH
34160: LD_INT 1
34162: NEG
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 1
34170: PUSH
34171: LD_INT 0
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: LD_INT 1
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: EMPTY
34185: LIST
34186: LIST
34187: PUSH
34188: LD_INT 0
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 1
34211: NEG
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: LD_INT 2
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 1
34249: NEG
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 2
34257: PUSH
34258: LD_INT 0
34260: PUSH
34261: EMPTY
34262: LIST
34263: LIST
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: PUSH
34278: LD_INT 2
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 1
34307: NEG
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: NEG
34330: PUSH
34331: LD_INT 1
34333: NEG
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 2
34341: NEG
34342: PUSH
34343: LD_INT 2
34345: NEG
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 3
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: EMPTY
34358: LIST
34359: LIST
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 2
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 2
34373: PUSH
34374: LD_INT 3
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 3
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34416: LD_ADDR_VAR 0 26
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 0
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 0
34433: PUSH
34434: LD_INT 1
34436: NEG
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 1
34444: PUSH
34445: LD_INT 0
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 1
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: LD_INT 0
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: EMPTY
34469: LIST
34470: LIST
34471: PUSH
34472: LD_INT 1
34474: NEG
34475: PUSH
34476: LD_INT 0
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: NEG
34490: PUSH
34491: EMPTY
34492: LIST
34493: LIST
34494: PUSH
34495: LD_INT 1
34497: NEG
34498: PUSH
34499: LD_INT 2
34501: NEG
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: LD_INT 0
34509: PUSH
34510: LD_INT 2
34512: NEG
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PUSH
34518: LD_INT 1
34520: PUSH
34521: LD_INT 1
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 2
34531: PUSH
34532: LD_INT 0
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: PUSH
34539: LD_INT 2
34541: PUSH
34542: LD_INT 1
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 1
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 1
34581: NEG
34582: PUSH
34583: LD_INT 1
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 2
34592: NEG
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: NEG
34604: PUSH
34605: LD_INT 1
34607: NEG
34608: PUSH
34609: EMPTY
34610: LIST
34611: LIST
34612: PUSH
34613: LD_INT 2
34615: NEG
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 2
34627: PUSH
34628: LD_INT 3
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: LD_INT 3
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 2
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: PUSH
34663: EMPTY
34664: LIST
34665: LIST
34666: PUSH
34667: EMPTY
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34692: LD_ADDR_VAR 0 27
34696: PUSH
34697: LD_INT 0
34699: PUSH
34700: LD_INT 0
34702: PUSH
34703: EMPTY
34704: LIST
34705: LIST
34706: PUSH
34707: LD_INT 0
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 0
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: PUSH
34731: LD_INT 1
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 0
34740: PUSH
34741: LD_INT 1
34743: PUSH
34744: EMPTY
34745: LIST
34746: LIST
34747: PUSH
34748: LD_INT 1
34750: NEG
34751: PUSH
34752: LD_INT 0
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: LD_INT 1
34761: NEG
34762: PUSH
34763: LD_INT 1
34765: NEG
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: LD_INT 2
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 0
34785: PUSH
34786: LD_INT 2
34788: NEG
34789: PUSH
34790: EMPTY
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 1
34796: PUSH
34797: LD_INT 1
34799: NEG
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: LD_INT 1
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: PUSH
34825: LD_INT 2
34827: PUSH
34828: LD_INT 2
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: PUSH
34835: LD_INT 1
34837: PUSH
34838: LD_INT 2
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 2
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: NEG
34858: PUSH
34859: LD_INT 1
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 2
34868: NEG
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: LD_INT 1
34883: NEG
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 2
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 1
34903: NEG
34904: PUSH
34905: LD_INT 2
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 2
34914: NEG
34915: PUSH
34916: LD_INT 1
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 3
34925: NEG
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34972: LD_ADDR_VAR 0 28
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: LD_INT 2
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: LD_INT 1
35141: PUSH
35142: EMPTY
35143: LIST
35144: LIST
35145: PUSH
35146: LD_INT 2
35148: NEG
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: NEG
35160: PUSH
35161: LD_INT 1
35163: NEG
35164: PUSH
35165: EMPTY
35166: LIST
35167: LIST
35168: PUSH
35169: LD_INT 2
35171: NEG
35172: PUSH
35173: LD_INT 2
35175: NEG
35176: PUSH
35177: EMPTY
35178: LIST
35179: LIST
35180: PUSH
35181: LD_INT 2
35183: NEG
35184: PUSH
35185: LD_INT 3
35187: NEG
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 1
35195: NEG
35196: PUSH
35197: LD_INT 3
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 3
35207: NEG
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 3
35219: NEG
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35254: LD_ADDR_VAR 0 29
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 0
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 1
35409: NEG
35410: PUSH
35411: LD_INT 1
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: LD_INT 1
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 2
35444: NEG
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: LD_INT 1
35459: NEG
35460: PUSH
35461: EMPTY
35462: LIST
35463: LIST
35464: PUSH
35465: LD_INT 3
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 1
35477: PUSH
35478: LD_INT 3
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 1
35487: NEG
35488: PUSH
35489: LD_INT 2
35491: PUSH
35492: EMPTY
35493: LIST
35494: LIST
35495: PUSH
35496: LD_INT 3
35498: NEG
35499: PUSH
35500: LD_INT 2
35502: NEG
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35533: LD_ADDR_VAR 0 30
35537: PUSH
35538: LD_INT 0
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: PUSH
35548: LD_INT 0
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 1
35561: PUSH
35562: LD_INT 0
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 1
35571: PUSH
35572: LD_INT 1
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 0
35581: PUSH
35582: LD_INT 1
35584: PUSH
35585: EMPTY
35586: LIST
35587: LIST
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: LD_INT 1
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: LD_INT 2
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 0
35626: PUSH
35627: LD_INT 2
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: LD_INT 1
35640: NEG
35641: PUSH
35642: EMPTY
35643: LIST
35644: LIST
35645: PUSH
35646: LD_INT 2
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 2
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 2
35668: PUSH
35669: LD_INT 2
35671: PUSH
35672: EMPTY
35673: LIST
35674: LIST
35675: PUSH
35676: LD_INT 1
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: LD_INT 1
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: PUSH
35697: LD_INT 2
35699: NEG
35700: PUSH
35701: LD_INT 0
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 2
35710: NEG
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: NEG
35723: PUSH
35724: LD_INT 3
35726: NEG
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: LD_INT 2
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 3
35745: PUSH
35746: LD_INT 2
35748: PUSH
35749: EMPTY
35750: LIST
35751: LIST
35752: PUSH
35753: LD_INT 2
35755: PUSH
35756: LD_INT 3
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: LD_INT 1
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 3
35776: NEG
35777: PUSH
35778: LD_INT 1
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35811: LD_ADDR_VAR 0 31
35815: PUSH
35816: LD_INT 0
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 0
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 1
35839: PUSH
35840: LD_INT 0
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 1
35849: PUSH
35850: LD_INT 1
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 0
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 2
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 1
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 1
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: LD_INT 1
35945: PUSH
35946: LD_INT 2
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: LD_INT 2
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 1
35965: NEG
35966: PUSH
35967: LD_INT 1
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: PUSH
35974: LD_INT 2
35976: NEG
35977: PUSH
35978: LD_INT 1
35980: NEG
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: LD_INT 2
35992: NEG
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: LD_INT 3
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 2
36012: PUSH
36013: LD_INT 1
36015: NEG
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 3
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: PUSH
36034: LD_INT 3
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 3
36054: NEG
36055: PUSH
36056: LD_INT 2
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36089: LD_ADDR_VAR 0 32
36093: PUSH
36094: LD_INT 0
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 0
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: LD_INT 0
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 1
36127: PUSH
36128: LD_INT 1
36130: PUSH
36131: EMPTY
36132: LIST
36133: LIST
36134: PUSH
36135: LD_INT 0
36137: PUSH
36138: LD_INT 1
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 1
36147: NEG
36148: PUSH
36149: LD_INT 0
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: NEG
36171: PUSH
36172: LD_INT 2
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 1
36196: NEG
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: LD_INT 2
36204: PUSH
36205: LD_INT 1
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PUSH
36212: LD_INT 2
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 1
36224: PUSH
36225: LD_INT 2
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 1
36244: NEG
36245: PUSH
36246: LD_INT 1
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: LD_INT 2
36255: NEG
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: LD_INT 1
36270: NEG
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PUSH
36276: LD_INT 1
36278: NEG
36279: PUSH
36280: LD_INT 3
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 2
36293: NEG
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: PUSH
36299: LD_INT 3
36301: PUSH
36302: LD_INT 2
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 2
36311: PUSH
36312: LD_INT 3
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: LD_INT 3
36332: NEG
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36367: LD_ADDR_VAR 0 33
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: LD_INT 0
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 1
36387: NEG
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PUSH
36393: LD_INT 1
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: LD_INT 1
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 1
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 2
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 2
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 1
36491: PUSH
36492: LD_INT 2
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 2
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 2
36522: NEG
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: NEG
36534: PUSH
36535: LD_INT 1
36537: NEG
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: NEG
36546: PUSH
36547: LD_INT 2
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 2
36557: NEG
36558: PUSH
36559: LD_INT 3
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 2
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: PUSH
36581: LD_INT 1
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: PUSH
36591: LD_INT 3
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 2
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 3
36611: NEG
36612: PUSH
36613: LD_INT 2
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36646: LD_ADDR_VAR 0 34
36650: PUSH
36651: LD_INT 0
36653: PUSH
36654: LD_INT 0
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 0
36663: PUSH
36664: LD_INT 1
36666: NEG
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: LD_INT 0
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: LD_INT 1
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: LD_INT 0
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 1
36704: NEG
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: LD_INT 2
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 0
36739: PUSH
36740: LD_INT 2
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 1
36750: PUSH
36751: LD_INT 1
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 1
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 1
36781: PUSH
36782: LD_INT 2
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 1
36791: NEG
36792: PUSH
36793: LD_INT 1
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: LD_INT 0
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: NEG
36814: PUSH
36815: LD_INT 1
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 2
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 1
36837: NEG
36838: PUSH
36839: LD_INT 3
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: LD_INT 1
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 3
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 2
36870: PUSH
36871: LD_INT 3
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: LD_INT 1
36895: NEG
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36926: LD_ADDR_VAR 0 35
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 2
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37038: LD_ADDR_VAR 0 36
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 0
37055: PUSH
37056: LD_INT 1
37058: NEG
37059: PUSH
37060: EMPTY
37061: LIST
37062: LIST
37063: PUSH
37064: LD_INT 1
37066: PUSH
37067: LD_INT 0
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: PUSH
37077: LD_INT 1
37079: PUSH
37080: EMPTY
37081: LIST
37082: LIST
37083: PUSH
37084: LD_INT 0
37086: PUSH
37087: LD_INT 1
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: NEG
37097: PUSH
37098: LD_INT 0
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 1
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 1
37119: NEG
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 1
37131: PUSH
37132: LD_INT 2
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37150: LD_ADDR_VAR 0 37
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 0
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 0
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 1
37188: PUSH
37189: LD_INT 1
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 0
37198: PUSH
37199: LD_INT 1
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PUSH
37206: LD_INT 1
37208: NEG
37209: PUSH
37210: LD_INT 0
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 1
37219: NEG
37220: PUSH
37221: LD_INT 1
37223: NEG
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: EMPTY
37237: LIST
37238: LIST
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37262: LD_ADDR_VAR 0 38
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 1
37290: PUSH
37291: LD_INT 0
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: LD_INT 1
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 0
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: PUSH
37318: LD_INT 1
37320: NEG
37321: PUSH
37322: LD_INT 0
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: LD_INT 1
37335: NEG
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 2
37353: NEG
37354: PUSH
37355: LD_INT 1
37357: NEG
37358: PUSH
37359: EMPTY
37360: LIST
37361: LIST
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37374: LD_ADDR_VAR 0 39
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: LD_INT 0
37384: PUSH
37385: EMPTY
37386: LIST
37387: LIST
37388: PUSH
37389: LD_INT 0
37391: PUSH
37392: LD_INT 1
37394: NEG
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: LD_INT 0
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 0
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: LD_INT 0
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 1
37443: NEG
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 2
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: PUSH
37468: LD_INT 2
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37486: LD_ADDR_VAR 0 40
37490: PUSH
37491: LD_INT 0
37493: PUSH
37494: LD_INT 0
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 1
37506: NEG
37507: PUSH
37508: EMPTY
37509: LIST
37510: LIST
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: PUSH
37525: LD_INT 1
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 1
37537: PUSH
37538: EMPTY
37539: LIST
37540: LIST
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: PUSH
37568: LD_INT 1
37570: NEG
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37598: LD_ADDR_VAR 0 41
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: LD_INT 0
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 0
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: PUSH
37637: LD_INT 1
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: PUSH
37644: LD_INT 0
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PUSH
37654: LD_INT 1
37656: NEG
37657: PUSH
37658: LD_INT 0
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: LD_INT 1
37671: NEG
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: LD_INT 2
37683: NEG
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: LD_INT 0
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: LD_INT 1
37715: PUSH
37716: EMPTY
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 2
37722: PUSH
37723: LD_INT 2
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 1
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: EMPTY
37737: LIST
37738: LIST
37739: PUSH
37740: LD_INT 1
37742: NEG
37743: PUSH
37744: LD_INT 1
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 2
37753: NEG
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 2
37764: NEG
37765: PUSH
37766: LD_INT 1
37768: NEG
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 2
37776: NEG
37777: PUSH
37778: LD_INT 2
37780: NEG
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 3
37792: NEG
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 3
37811: PUSH
37812: LD_INT 0
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: LD_INT 1
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PUSH
37829: LD_INT 3
37831: PUSH
37832: LD_INT 2
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 3
37841: PUSH
37842: LD_INT 3
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 2
37851: PUSH
37852: LD_INT 3
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 2
37861: NEG
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 3
37872: NEG
37873: PUSH
37874: LD_INT 0
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 3
37883: NEG
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 3
37895: NEG
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 3
37907: NEG
37908: PUSH
37909: LD_INT 3
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37948: LD_ADDR_VAR 0 42
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: LD_INT 0
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 1
37968: NEG
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 0
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 1
38006: NEG
38007: PUSH
38008: LD_INT 0
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 2
38044: NEG
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: LD_INT 1
38055: NEG
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: PUSH
38064: LD_INT 1
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: LD_INT 2
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 1
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 2
38126: NEG
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 2
38138: NEG
38139: PUSH
38140: LD_INT 3
38142: NEG
38143: PUSH
38144: EMPTY
38145: LIST
38146: LIST
38147: PUSH
38148: LD_INT 1
38150: NEG
38151: PUSH
38152: LD_INT 3
38154: NEG
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 3
38165: NEG
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: LD_INT 2
38176: NEG
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 3
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 3
38194: PUSH
38195: LD_INT 3
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: LD_INT 2
38204: PUSH
38205: LD_INT 3
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 1
38214: PUSH
38215: LD_INT 3
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 3
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 3
38245: NEG
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 3
38257: NEG
38258: PUSH
38259: LD_INT 3
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: LIST
38275: LIST
38276: LIST
38277: LIST
38278: LIST
38279: LIST
38280: LIST
38281: LIST
38282: LIST
38283: LIST
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38298: LD_ADDR_VAR 0 43
38302: PUSH
38303: LD_INT 0
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 0
38315: PUSH
38316: LD_INT 1
38318: NEG
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: LD_INT 0
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 1
38336: PUSH
38337: LD_INT 1
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 0
38346: PUSH
38347: LD_INT 1
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 1
38367: NEG
38368: PUSH
38369: LD_INT 1
38371: NEG
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 2
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 0
38416: PUSH
38417: EMPTY
38418: LIST
38419: LIST
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: LD_INT 2
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 0
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 1
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 2
38464: NEG
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 2
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 3
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 3
38532: PUSH
38533: LD_INT 0
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: LD_INT 3
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: PUSH
38550: LD_INT 1
38552: PUSH
38553: LD_INT 3
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 3
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: NEG
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 3
38594: NEG
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 3
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: EMPTY
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38646: LD_ADDR_VAR 0 44
38650: PUSH
38651: LD_INT 0
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 1
38684: PUSH
38685: LD_INT 1
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: LD_INT 1
38704: NEG
38705: PUSH
38706: LD_INT 0
38708: PUSH
38709: EMPTY
38710: LIST
38711: LIST
38712: PUSH
38713: LD_INT 1
38715: NEG
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: LD_INT 2
38731: NEG
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 2
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: PUSH
38761: LD_INT 1
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 2
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 3
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 3
38859: PUSH
38860: LD_INT 0
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 3
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 3
38879: PUSH
38880: LD_INT 2
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 3
38889: PUSH
38890: LD_INT 3
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 2
38899: PUSH
38900: LD_INT 3
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 2
38909: NEG
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 3
38920: NEG
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: EMPTY
38926: LIST
38927: LIST
38928: PUSH
38929: LD_INT 3
38931: NEG
38932: PUSH
38933: LD_INT 1
38935: NEG
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 3
38943: NEG
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 3
38955: NEG
38956: PUSH
38957: LD_INT 3
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38996: LD_ADDR_VAR 0 45
39000: PUSH
39001: LD_INT 0
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 0
39013: PUSH
39014: LD_INT 1
39016: NEG
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 1
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: LD_INT 1
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 1
39054: NEG
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 1
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 2
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: PUSH
39112: LD_INT 1
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 2
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 1
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 2
39162: NEG
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: NEG
39187: PUSH
39188: LD_INT 3
39190: NEG
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 3
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 0
39210: PUSH
39211: LD_INT 3
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 2
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 3
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 3
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: LD_INT 2
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 3
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: NEG
39283: PUSH
39284: LD_INT 2
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 3
39293: NEG
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 3
39305: NEG
39306: PUSH
39307: LD_INT 3
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39346: LD_ADDR_VAR 0 46
39350: PUSH
39351: LD_INT 0
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 1
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 1
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 1
39384: PUSH
39385: LD_INT 1
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 0
39394: PUSH
39395: LD_INT 1
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: NEG
39405: PUSH
39406: LD_INT 0
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 2
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 2
39461: PUSH
39462: LD_INT 0
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PUSH
39469: LD_INT 2
39471: PUSH
39472: LD_INT 1
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: LD_INT 2
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: LD_INT 0
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: NEG
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: LD_INT 3
39539: NEG
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: LD_INT 3
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 1
39558: PUSH
39559: LD_INT 2
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 3
39580: PUSH
39581: LD_INT 0
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: LD_INT 1
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 1
39600: PUSH
39601: LD_INT 3
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 3
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: NEG
39632: PUSH
39633: LD_INT 1
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 3
39653: NEG
39654: PUSH
39655: LD_INT 1
39657: NEG
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: LIST
39671: LIST
39672: LIST
39673: LIST
39674: LIST
39675: LIST
39676: LIST
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39694: LD_ADDR_VAR 0 47
39698: PUSH
39699: LD_INT 0
39701: PUSH
39702: LD_INT 0
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 1
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 1
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 0
39742: PUSH
39743: LD_INT 1
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 1
39763: NEG
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39845: LD_ADDR_VAR 0 48
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 1
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: LD_INT 1
39896: PUSH
39897: EMPTY
39898: LIST
39899: LIST
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 1
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 1
39926: NEG
39927: PUSH
39928: LD_INT 2
39930: NEG
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PUSH
39936: LD_INT 0
39938: PUSH
39939: LD_INT 2
39941: NEG
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 1
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 0
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: PUSH
39971: LD_INT 1
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39992: LD_ADDR_VAR 0 49
39996: PUSH
39997: LD_INT 0
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 2
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 2
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 2
40104: PUSH
40105: LD_INT 2
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: LD_INT 2
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: LIST
40133: LIST
40134: LIST
40135: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40136: LD_ADDR_VAR 0 50
40140: PUSH
40141: LD_INT 0
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 0
40153: PUSH
40154: LD_INT 1
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 1
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: NEG
40206: PUSH
40207: LD_INT 1
40209: NEG
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 2
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: LD_INT 2
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PUSH
40245: LD_INT 0
40247: PUSH
40248: LD_INT 2
40250: PUSH
40251: EMPTY
40252: LIST
40253: LIST
40254: PUSH
40255: LD_INT 1
40257: NEG
40258: PUSH
40259: LD_INT 1
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40280: LD_ADDR_VAR 0 51
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 0
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 1
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 0
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 1
40381: NEG
40382: PUSH
40383: LD_INT 1
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 2
40403: NEG
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40427: LD_ADDR_VAR 0 52
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: LD_INT 1
40447: NEG
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 1
40465: PUSH
40466: LD_INT 1
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 0
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 1
40485: NEG
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 2
40512: NEG
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: LD_INT 0
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: NEG
40555: PUSH
40556: LD_INT 2
40558: NEG
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40578: LD_ADDR_VAR 0 53
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 0
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 0
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: LD_INT 0
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 1
40743: NEG
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 2
40754: NEG
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 2
40777: NEG
40778: PUSH
40779: LD_INT 2
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40808: LD_ADDR_VAR 0 54
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 1
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 1
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 1
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 0
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: PUSH
40887: LD_INT 1
40889: NEG
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 2
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 2
40923: PUSH
40924: LD_INT 0
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 2
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 2
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 2
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 1
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: NEG
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: NEG
40996: PUSH
40997: LD_INT 1
40999: NEG
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 2
41007: NEG
41008: PUSH
41009: LD_INT 2
41011: NEG
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41038: LD_ADDR_VAR 0 55
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: LD_INT 0
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 1
41058: NEG
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 0
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 1
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 0
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: NEG
41097: PUSH
41098: LD_INT 0
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 1
41107: NEG
41108: PUSH
41109: LD_INT 1
41111: NEG
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 1
41119: NEG
41120: PUSH
41121: LD_INT 2
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: LD_INT 2
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: NEG
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 2
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: PUSH
41164: LD_INT 1
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 2
41173: PUSH
41174: LD_INT 2
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: LD_INT 2
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 2
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: NEG
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 2
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41268: LD_ADDR_VAR 0 56
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: PUSH
41297: LD_INT 0
41299: PUSH
41300: EMPTY
41301: LIST
41302: LIST
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: LD_INT 1
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 0
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: LD_INT 0
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: NEG
41338: PUSH
41339: LD_INT 1
41341: NEG
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: LD_INT 2
41353: NEG
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: PUSH
41359: LD_INT 0
41361: PUSH
41362: LD_INT 2
41364: NEG
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 1
41375: NEG
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 2
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 2
41393: PUSH
41394: LD_INT 1
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 2
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 2
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: NEG
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: NEG
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: NEG
41468: PUSH
41469: LD_INT 2
41471: NEG
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41498: LD_ADDR_VAR 0 57
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: LD_INT 0
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 1
41579: NEG
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: PUSH
41614: LD_INT 0
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 2
41623: PUSH
41624: LD_INT 1
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 2
41633: PUSH
41634: LD_INT 2
41636: PUSH
41637: EMPTY
41638: LIST
41639: LIST
41640: PUSH
41641: LD_INT 1
41643: PUSH
41644: LD_INT 2
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 2
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: NEG
41664: PUSH
41665: LD_INT 1
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: NEG
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: NEG
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 2
41697: NEG
41698: PUSH
41699: LD_INT 2
41701: NEG
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41728: LD_ADDR_VAR 0 58
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: LD_INT 0
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: EMPTY
41804: LIST
41805: LIST
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: LD_INT 2
41813: NEG
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 0
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 2
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 1
41893: NEG
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 2
41915: NEG
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 2
41927: NEG
41928: PUSH
41929: LD_INT 2
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41958: LD_ADDR_VAR 0 59
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: LD_INT 0
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 0
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 0
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: LD_INT 1
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42046: LD_ADDR_VAR 0 60
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 1
42074: PUSH
42075: LD_INT 0
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 0
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: LD_INT 0
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42134: LD_ADDR_VAR 0 61
42138: PUSH
42139: LD_INT 0
42141: PUSH
42142: LD_INT 0
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 0
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: NEG
42204: PUSH
42205: LD_INT 1
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42222: LD_ADDR_VAR 0 62
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 0
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 1
42250: PUSH
42251: LD_INT 0
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 0
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42310: LD_ADDR_VAR 0 63
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 0
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 1
42338: PUSH
42339: LD_INT 0
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 1
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: LD_INT 1
42383: NEG
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42398: LD_ADDR_VAR 0 64
42402: PUSH
42403: LD_INT 0
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: PUSH
42427: LD_INT 0
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 1
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: LD_INT 0
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: LD_INT 0
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: PUSH
42465: LD_INT 1
42467: NEG
42468: PUSH
42469: LD_INT 1
42471: NEG
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: ST_TO_ADDR
// end ; 1 :
42486: GO 48383
42488: LD_INT 1
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42496
42494: GO 45119
42496: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42497: LD_ADDR_VAR 0 11
42501: PUSH
42502: LD_INT 1
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: LD_INT 3
42519: NEG
42520: PUSH
42521: EMPTY
42522: LIST
42523: LIST
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: NEG
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: LIST
42540: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42541: LD_ADDR_VAR 0 12
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: LD_INT 1
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 3
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42582: LD_ADDR_VAR 0 13
42586: PUSH
42587: LD_INT 3
42589: PUSH
42590: LD_INT 2
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 3
42599: PUSH
42600: LD_INT 3
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 3
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42622: LD_ADDR_VAR 0 14
42626: PUSH
42627: LD_INT 1
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 0
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42663: LD_ADDR_VAR 0 15
42667: PUSH
42668: LD_INT 2
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 3
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42707: LD_ADDR_VAR 0 16
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: LD_INT 2
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 3
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: LIST
42752: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42753: LD_ADDR_VAR 0 17
42757: PUSH
42758: LD_INT 1
42760: NEG
42761: PUSH
42762: LD_INT 3
42764: NEG
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: PUSH
42770: LD_INT 0
42772: PUSH
42773: LD_INT 3
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 1
42783: PUSH
42784: LD_INT 2
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42797: LD_ADDR_VAR 0 18
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 3
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 3
42825: PUSH
42826: LD_INT 1
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: LIST
42837: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42838: LD_ADDR_VAR 0 19
42842: PUSH
42843: LD_INT 3
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 3
42855: PUSH
42856: LD_INT 3
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 2
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42878: LD_ADDR_VAR 0 20
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 3
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 3
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42919: LD_ADDR_VAR 0 21
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 3
42937: NEG
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 3
42948: NEG
42949: PUSH
42950: LD_INT 1
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42963: LD_ADDR_VAR 0 22
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: LD_INT 3
42974: NEG
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: LD_INT 2
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 3
42994: NEG
42995: PUSH
42996: LD_INT 3
42998: NEG
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43009: LD_ADDR_VAR 0 23
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 3
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: LD_INT 4
43031: NEG
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 1
43039: PUSH
43040: LD_INT 3
43042: NEG
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: LIST
43052: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43053: LD_ADDR_VAR 0 24
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: LD_INT 1
43073: NEG
43074: PUSH
43075: EMPTY
43076: LIST
43077: LIST
43078: PUSH
43079: LD_INT 4
43081: PUSH
43082: LD_INT 1
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: LIST
43093: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43094: LD_ADDR_VAR 0 25
43098: PUSH
43099: LD_INT 3
43101: PUSH
43102: LD_INT 3
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 4
43111: PUSH
43112: LD_INT 3
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 3
43121: PUSH
43122: LD_INT 4
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43134: LD_ADDR_VAR 0 26
43138: PUSH
43139: LD_INT 0
43141: PUSH
43142: LD_INT 3
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 4
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: LIST
43174: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43175: LD_ADDR_VAR 0 27
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 3
43193: NEG
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 4
43204: NEG
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: EMPTY
43211: LIST
43212: LIST
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: LIST
43218: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43219: LD_ADDR_VAR 0 28
43223: PUSH
43224: LD_INT 3
43226: NEG
43227: PUSH
43228: LD_INT 3
43230: NEG
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: NEG
43239: PUSH
43240: LD_INT 4
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 4
43250: NEG
43251: PUSH
43252: LD_INT 3
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43265: LD_ADDR_VAR 0 29
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: LD_INT 3
43276: NEG
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: LD_INT 3
43287: NEG
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: NEG
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: LD_INT 4
43310: NEG
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 0
43318: PUSH
43319: LD_INT 4
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: LD_INT 3
43332: NEG
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 5
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: LD_INT 5
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 4
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 6
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 6
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 5
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: EMPTY
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: LIST
43418: LIST
43419: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43420: LD_ADDR_VAR 0 30
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 3
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 4
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 4
43479: PUSH
43480: LD_INT 1
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 4
43489: PUSH
43490: LD_INT 1
43492: NEG
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 5
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 5
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 5
43520: PUSH
43521: LD_INT 1
43523: NEG
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 6
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 6
43541: PUSH
43542: LD_INT 1
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43563: LD_ADDR_VAR 0 31
43567: PUSH
43568: LD_INT 3
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: LD_INT 3
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 2
43590: PUSH
43591: LD_INT 3
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 4
43600: PUSH
43601: LD_INT 3
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 4
43610: PUSH
43611: LD_INT 4
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: LD_INT 4
43623: PUSH
43624: EMPTY
43625: LIST
43626: LIST
43627: PUSH
43628: LD_INT 5
43630: PUSH
43631: LD_INT 4
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 5
43640: PUSH
43641: LD_INT 5
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 4
43650: PUSH
43651: LD_INT 5
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 6
43660: PUSH
43661: LD_INT 5
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 6
43670: PUSH
43671: LD_INT 6
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: LD_INT 6
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43702: LD_ADDR_VAR 0 32
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 3
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: LD_INT 2
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 4
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 4
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 3
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: PUSH
43772: LD_INT 5
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: LD_INT 5
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: LD_INT 4
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 6
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: LD_INT 6
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 5
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43845: LD_ADDR_VAR 0 33
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: LD_INT 1
43856: PUSH
43857: EMPTY
43858: LIST
43859: LIST
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: LD_INT 1
43878: NEG
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 4
43897: NEG
43898: PUSH
43899: LD_INT 0
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 4
43908: NEG
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 4
43920: NEG
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 5
43931: NEG
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 5
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 5
43954: NEG
43955: PUSH
43956: LD_INT 1
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 6
43965: NEG
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 6
43976: NEG
43977: PUSH
43978: LD_INT 1
43980: NEG
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44000: LD_ADDR_VAR 0 34
44004: PUSH
44005: LD_INT 2
44007: NEG
44008: PUSH
44009: LD_INT 3
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 3
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 3
44031: NEG
44032: PUSH
44033: LD_INT 3
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 3
44043: NEG
44044: PUSH
44045: LD_INT 4
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 4
44055: NEG
44056: PUSH
44057: LD_INT 3
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 4
44067: NEG
44068: PUSH
44069: LD_INT 4
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 4
44079: NEG
44080: PUSH
44081: LD_INT 5
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 5
44091: NEG
44092: PUSH
44093: LD_INT 4
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 5
44103: NEG
44104: PUSH
44105: LD_INT 5
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 5
44115: NEG
44116: PUSH
44117: LD_INT 6
44119: NEG
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 6
44127: NEG
44128: PUSH
44129: LD_INT 5
44131: NEG
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 6
44139: NEG
44140: PUSH
44141: LD_INT 6
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44163: LD_ADDR_VAR 0 41
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 3
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 1
44193: PUSH
44194: LD_INT 2
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44207: LD_ADDR_VAR 0 42
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 2
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: LD_INT 1
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: LIST
44247: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44248: LD_ADDR_VAR 0 43
44252: PUSH
44253: LD_INT 2
44255: PUSH
44256: LD_INT 2
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 3
44265: PUSH
44266: LD_INT 2
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 3
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44288: LD_ADDR_VAR 0 44
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: NEG
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44329: LD_ADDR_VAR 0 45
44333: PUSH
44334: LD_INT 2
44336: NEG
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: LD_INT 2
44347: NEG
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: NEG
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: LIST
44372: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44373: LD_ADDR_VAR 0 46
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 3
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: LIST
44418: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44419: LD_ADDR_VAR 0 47
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 3
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 3
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44452: LD_ADDR_VAR 0 48
44456: PUSH
44457: LD_INT 1
44459: PUSH
44460: LD_INT 2
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 2
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44483: LD_ADDR_VAR 0 49
44487: PUSH
44488: LD_INT 3
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 3
44500: PUSH
44501: LD_INT 2
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44512: LD_ADDR_VAR 0 50
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 3
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 3
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44541: LD_ADDR_VAR 0 51
44545: PUSH
44546: LD_INT 1
44548: NEG
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 2
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44572: LD_ADDR_VAR 0 52
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 1
44583: NEG
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 3
44591: NEG
44592: PUSH
44593: LD_INT 2
44595: NEG
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44605: LD_ADDR_VAR 0 53
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: LD_INT 3
44616: NEG
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 0
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44649: LD_ADDR_VAR 0 54
44653: PUSH
44654: LD_INT 2
44656: PUSH
44657: LD_INT 1
44659: NEG
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 0
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 1
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: LIST
44689: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44690: LD_ADDR_VAR 0 55
44694: PUSH
44695: LD_INT 3
44697: PUSH
44698: LD_INT 2
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: PUSH
44708: LD_INT 3
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: LIST
44729: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44730: LD_ADDR_VAR 0 56
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 3
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: LD_INT 3
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: LD_INT 2
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: LIST
44770: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44771: LD_ADDR_VAR 0 57
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 1
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 3
44789: NEG
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 3
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: LIST
44814: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44815: LD_ADDR_VAR 0 58
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 3
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 3
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: LD_INT 3
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: LIST
44860: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44861: LD_ADDR_VAR 0 59
44865: PUSH
44866: LD_INT 1
44868: NEG
44869: PUSH
44870: LD_INT 2
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 1
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44905: LD_ADDR_VAR 0 60
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: LIST
44945: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44946: LD_ADDR_VAR 0 61
44950: PUSH
44951: LD_INT 2
44953: PUSH
44954: LD_INT 1
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: PUSH
44961: LD_INT 2
44963: PUSH
44964: LD_INT 2
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: LD_INT 2
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: EMPTY
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44986: LD_ADDR_VAR 0 62
44990: PUSH
44991: LD_INT 1
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: LIST
45026: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45027: LD_ADDR_VAR 0 63
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 2
45045: NEG
45046: PUSH
45047: LD_INT 0
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45071: LD_ADDR_VAR 0 64
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 2
45102: NEG
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: ST_TO_ADDR
// end ; 2 :
45117: GO 48383
45119: LD_INT 2
45121: DOUBLE
45122: EQUAL
45123: IFTRUE 45127
45125: GO 48382
45127: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45128: LD_ADDR_VAR 0 29
45132: PUSH
45133: LD_INT 4
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 4
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 5
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 5
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 4
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 3
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 3
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 3
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 5
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 3
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 4
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 4
45258: PUSH
45259: LD_INT 4
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 3
45268: PUSH
45269: LD_INT 4
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 3
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 4
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: LD_INT 4
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: LD_INT 4
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: LD_INT 3
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 4
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 5
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 5
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 4
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: LD_INT 5
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 2
45400: NEG
45401: PUSH
45402: LD_INT 3
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 3
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: NEG
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 3
45456: NEG
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 4
45467: NEG
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 4
45478: NEG
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 4
45490: NEG
45491: PUSH
45492: LD_INT 2
45494: NEG
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: LD_INT 2
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 4
45513: NEG
45514: PUSH
45515: LD_INT 4
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 4
45525: NEG
45526: PUSH
45527: LD_INT 5
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 3
45537: NEG
45538: PUSH
45539: LD_INT 4
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 3
45549: NEG
45550: PUSH
45551: LD_INT 3
45553: NEG
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 4
45561: NEG
45562: PUSH
45563: LD_INT 3
45565: NEG
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: PUSH
45571: LD_INT 5
45573: NEG
45574: PUSH
45575: LD_INT 4
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 5
45585: NEG
45586: PUSH
45587: LD_INT 5
45589: NEG
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 3
45597: NEG
45598: PUSH
45599: LD_INT 5
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 5
45609: NEG
45610: PUSH
45611: LD_INT 3
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45666: LD_ADDR_VAR 0 30
45670: PUSH
45671: LD_INT 4
45673: PUSH
45674: LD_INT 4
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 4
45683: PUSH
45684: LD_INT 3
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 5
45693: PUSH
45694: LD_INT 4
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 5
45703: PUSH
45704: LD_INT 5
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 4
45713: PUSH
45714: LD_INT 5
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 3
45723: PUSH
45724: LD_INT 4
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 3
45733: PUSH
45734: LD_INT 3
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 5
45743: PUSH
45744: LD_INT 3
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 3
45753: PUSH
45754: LD_INT 5
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 3
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: LD_INT 0
45773: PUSH
45774: LD_INT 2
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: PUSH
45794: LD_INT 4
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 0
45803: PUSH
45804: LD_INT 4
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 3
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: LD_INT 1
45824: NEG
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 4
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 2
45845: NEG
45846: PUSH
45847: LD_INT 2
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 4
45856: NEG
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 4
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 3
45879: NEG
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 4
45901: NEG
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 5
45912: NEG
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 5
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 5
45935: NEG
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 3
45947: NEG
45948: PUSH
45949: LD_INT 2
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 3
45958: NEG
45959: PUSH
45960: LD_INT 3
45962: NEG
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 3
45970: NEG
45971: PUSH
45972: LD_INT 4
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 3
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 3
46006: NEG
46007: PUSH
46008: LD_INT 2
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 4
46018: NEG
46019: PUSH
46020: LD_INT 3
46022: NEG
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 4
46030: NEG
46031: PUSH
46032: LD_INT 4
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 4
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 4
46054: NEG
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 4
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: LD_INT 5
46080: NEG
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: LD_INT 4
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: PUSH
46100: LD_INT 3
46102: NEG
46103: PUSH
46104: EMPTY
46105: LIST
46106: LIST
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 3
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 1
46121: NEG
46122: PUSH
46123: LD_INT 4
46125: NEG
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: LD_INT 5
46137: NEG
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 5
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46213: LD_ADDR_VAR 0 31
46217: PUSH
46218: LD_INT 0
46220: PUSH
46221: LD_INT 4
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 4
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: PUSH
46251: LD_INT 5
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 0
46260: PUSH
46261: LD_INT 5
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 1
46270: NEG
46271: PUSH
46272: LD_INT 4
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: LD_INT 1
46281: NEG
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: LD_INT 5
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: NEG
46303: PUSH
46304: LD_INT 3
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 3
46313: NEG
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: PUSH
46322: LD_INT 3
46324: NEG
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 2
46336: NEG
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 3
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 4
46369: NEG
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 4
46380: NEG
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 4
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: EMPTY
46410: LIST
46411: LIST
46412: PUSH
46413: LD_INT 4
46415: NEG
46416: PUSH
46417: LD_INT 4
46419: NEG
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 4
46427: NEG
46428: PUSH
46429: LD_INT 5
46431: NEG
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 3
46439: NEG
46440: PUSH
46441: LD_INT 4
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 4
46463: NEG
46464: PUSH
46465: LD_INT 3
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 5
46475: NEG
46476: PUSH
46477: LD_INT 4
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 5
46487: NEG
46488: PUSH
46489: LD_INT 5
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 5
46503: NEG
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 5
46511: NEG
46512: PUSH
46513: LD_INT 3
46515: NEG
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 4
46537: NEG
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: LD_INT 3
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: LD_INT 2
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 2
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 1
46578: NEG
46579: PUSH
46580: LD_INT 3
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 4
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 2
46605: NEG
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 4
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 4
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 4
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 5
46646: PUSH
46647: LD_INT 0
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 5
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 4
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 3
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 3
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 3
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 5
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46763: LD_ADDR_VAR 0 32
46767: PUSH
46768: LD_INT 4
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 4
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 3
46793: NEG
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: LD_INT 1
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 4
46815: NEG
46816: PUSH
46817: LD_INT 1
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 5
46826: NEG
46827: PUSH
46828: LD_INT 0
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 5
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: NEG
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 5
46849: NEG
46850: PUSH
46851: LD_INT 2
46853: NEG
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 3
46861: NEG
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 3
46872: NEG
46873: PUSH
46874: LD_INT 3
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 3
46884: NEG
46885: PUSH
46886: LD_INT 4
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 2
46896: NEG
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: NEG
46909: PUSH
46910: LD_INT 2
46912: NEG
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: LD_INT 2
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: LD_INT 4
46932: NEG
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 4
46944: NEG
46945: PUSH
46946: LD_INT 4
46948: NEG
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 4
46960: NEG
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 4
46968: NEG
46969: PUSH
46970: LD_INT 2
46972: NEG
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 4
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: LD_INT 5
46994: NEG
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 1
47002: PUSH
47003: LD_INT 4
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 3
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 3
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: NEG
47036: PUSH
47037: LD_INT 4
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: LD_INT 5
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 2
47059: PUSH
47060: LD_INT 3
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 5
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 4
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 4
47113: PUSH
47114: LD_INT 1
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 3
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 2
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 2
47154: PUSH
47155: LD_INT 2
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 4
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 4
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: LD_INT 3
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 5
47195: PUSH
47196: LD_INT 4
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 5
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 4
47215: PUSH
47216: LD_INT 5
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: LD_INT 4
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 5
47245: PUSH
47246: LD_INT 3
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 3
47255: PUSH
47256: LD_INT 5
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47310: LD_ADDR_VAR 0 33
47314: PUSH
47315: LD_INT 4
47317: NEG
47318: PUSH
47319: LD_INT 4
47321: NEG
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 4
47329: NEG
47330: PUSH
47331: LD_INT 5
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: LD_INT 4
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: NEG
47354: PUSH
47355: LD_INT 3
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 4
47365: NEG
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 5
47377: NEG
47378: PUSH
47379: LD_INT 4
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 5
47389: NEG
47390: PUSH
47391: LD_INT 5
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 3
47401: NEG
47402: PUSH
47403: LD_INT 5
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 5
47413: NEG
47414: PUSH
47415: LD_INT 3
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 0
47425: PUSH
47426: LD_INT 3
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 4
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 3
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 4
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 4
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 4
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 4
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 5
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 5
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 4
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 3
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 3
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 3
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 5
47610: PUSH
47611: LD_INT 2
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 3
47620: PUSH
47621: LD_INT 3
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 3
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 4
47640: PUSH
47641: LD_INT 3
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 4
47650: PUSH
47651: LD_INT 4
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 3
47660: PUSH
47661: LD_INT 4
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 3
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 4
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 2
47700: PUSH
47701: LD_INT 4
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 4
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: LD_INT 4
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 5
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 5
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: LD_INT 4
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 3
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: LD_INT 5
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 2
47792: NEG
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47848: LD_ADDR_VAR 0 34
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 4
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 5
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 0
47899: PUSH
47900: LD_INT 3
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 4
47914: NEG
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 5
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 2
47934: PUSH
47935: LD_INT 3
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: LD_INT 5
47949: NEG
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 3
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: LD_INT 3
47967: PUSH
47968: LD_INT 1
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 4
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 4
47988: PUSH
47989: LD_INT 1
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 2
48029: PUSH
48030: LD_INT 2
48032: NEG
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 4
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 4
48050: PUSH
48051: LD_INT 4
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 4
48060: PUSH
48061: LD_INT 3
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: LD_INT 4
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 4
48090: PUSH
48091: LD_INT 5
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 4
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 3
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: LD_INT 3
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 3
48130: PUSH
48131: LD_INT 5
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 3
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: LD_INT 2
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 3
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 4
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 4
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 3
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 4
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 4
48233: NEG
48234: PUSH
48235: LD_INT 0
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 4
48244: NEG
48245: PUSH
48246: LD_INT 1
48248: NEG
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 3
48256: NEG
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 3
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 4
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 5
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 5
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 5
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: ST_TO_ADDR
// end ; end ;
48380: GO 48383
48382: POP
// case btype of b_depot , b_warehouse :
48383: LD_VAR 0 1
48387: PUSH
48388: LD_INT 0
48390: DOUBLE
48391: EQUAL
48392: IFTRUE 48402
48394: LD_INT 1
48396: DOUBLE
48397: EQUAL
48398: IFTRUE 48402
48400: GO 48603
48402: POP
// case nation of nation_american :
48403: LD_VAR 0 5
48407: PUSH
48408: LD_INT 1
48410: DOUBLE
48411: EQUAL
48412: IFTRUE 48416
48414: GO 48472
48416: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48417: LD_ADDR_VAR 0 9
48421: PUSH
48422: LD_VAR 0 11
48426: PUSH
48427: LD_VAR 0 12
48431: PUSH
48432: LD_VAR 0 13
48436: PUSH
48437: LD_VAR 0 14
48441: PUSH
48442: LD_VAR 0 15
48446: PUSH
48447: LD_VAR 0 16
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: PUSH
48460: LD_VAR 0 4
48464: PUSH
48465: LD_INT 1
48467: PLUS
48468: ARRAY
48469: ST_TO_ADDR
48470: GO 48601
48472: LD_INT 2
48474: DOUBLE
48475: EQUAL
48476: IFTRUE 48480
48478: GO 48536
48480: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48481: LD_ADDR_VAR 0 9
48485: PUSH
48486: LD_VAR 0 17
48490: PUSH
48491: LD_VAR 0 18
48495: PUSH
48496: LD_VAR 0 19
48500: PUSH
48501: LD_VAR 0 20
48505: PUSH
48506: LD_VAR 0 21
48510: PUSH
48511: LD_VAR 0 22
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: PUSH
48524: LD_VAR 0 4
48528: PUSH
48529: LD_INT 1
48531: PLUS
48532: ARRAY
48533: ST_TO_ADDR
48534: GO 48601
48536: LD_INT 3
48538: DOUBLE
48539: EQUAL
48540: IFTRUE 48544
48542: GO 48600
48544: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48545: LD_ADDR_VAR 0 9
48549: PUSH
48550: LD_VAR 0 23
48554: PUSH
48555: LD_VAR 0 24
48559: PUSH
48560: LD_VAR 0 25
48564: PUSH
48565: LD_VAR 0 26
48569: PUSH
48570: LD_VAR 0 27
48574: PUSH
48575: LD_VAR 0 28
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: PUSH
48588: LD_VAR 0 4
48592: PUSH
48593: LD_INT 1
48595: PLUS
48596: ARRAY
48597: ST_TO_ADDR
48598: GO 48601
48600: POP
48601: GO 49156
48603: LD_INT 2
48605: DOUBLE
48606: EQUAL
48607: IFTRUE 48617
48609: LD_INT 3
48611: DOUBLE
48612: EQUAL
48613: IFTRUE 48617
48615: GO 48673
48617: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48618: LD_ADDR_VAR 0 9
48622: PUSH
48623: LD_VAR 0 29
48627: PUSH
48628: LD_VAR 0 30
48632: PUSH
48633: LD_VAR 0 31
48637: PUSH
48638: LD_VAR 0 32
48642: PUSH
48643: LD_VAR 0 33
48647: PUSH
48648: LD_VAR 0 34
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: PUSH
48661: LD_VAR 0 4
48665: PUSH
48666: LD_INT 1
48668: PLUS
48669: ARRAY
48670: ST_TO_ADDR
48671: GO 49156
48673: LD_INT 16
48675: DOUBLE
48676: EQUAL
48677: IFTRUE 48735
48679: LD_INT 17
48681: DOUBLE
48682: EQUAL
48683: IFTRUE 48735
48685: LD_INT 18
48687: DOUBLE
48688: EQUAL
48689: IFTRUE 48735
48691: LD_INT 19
48693: DOUBLE
48694: EQUAL
48695: IFTRUE 48735
48697: LD_INT 22
48699: DOUBLE
48700: EQUAL
48701: IFTRUE 48735
48703: LD_INT 20
48705: DOUBLE
48706: EQUAL
48707: IFTRUE 48735
48709: LD_INT 21
48711: DOUBLE
48712: EQUAL
48713: IFTRUE 48735
48715: LD_INT 23
48717: DOUBLE
48718: EQUAL
48719: IFTRUE 48735
48721: LD_INT 24
48723: DOUBLE
48724: EQUAL
48725: IFTRUE 48735
48727: LD_INT 25
48729: DOUBLE
48730: EQUAL
48731: IFTRUE 48735
48733: GO 48791
48735: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48736: LD_ADDR_VAR 0 9
48740: PUSH
48741: LD_VAR 0 35
48745: PUSH
48746: LD_VAR 0 36
48750: PUSH
48751: LD_VAR 0 37
48755: PUSH
48756: LD_VAR 0 38
48760: PUSH
48761: LD_VAR 0 39
48765: PUSH
48766: LD_VAR 0 40
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: PUSH
48779: LD_VAR 0 4
48783: PUSH
48784: LD_INT 1
48786: PLUS
48787: ARRAY
48788: ST_TO_ADDR
48789: GO 49156
48791: LD_INT 6
48793: DOUBLE
48794: EQUAL
48795: IFTRUE 48847
48797: LD_INT 7
48799: DOUBLE
48800: EQUAL
48801: IFTRUE 48847
48803: LD_INT 8
48805: DOUBLE
48806: EQUAL
48807: IFTRUE 48847
48809: LD_INT 13
48811: DOUBLE
48812: EQUAL
48813: IFTRUE 48847
48815: LD_INT 12
48817: DOUBLE
48818: EQUAL
48819: IFTRUE 48847
48821: LD_INT 15
48823: DOUBLE
48824: EQUAL
48825: IFTRUE 48847
48827: LD_INT 11
48829: DOUBLE
48830: EQUAL
48831: IFTRUE 48847
48833: LD_INT 14
48835: DOUBLE
48836: EQUAL
48837: IFTRUE 48847
48839: LD_INT 10
48841: DOUBLE
48842: EQUAL
48843: IFTRUE 48847
48845: GO 48903
48847: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48848: LD_ADDR_VAR 0 9
48852: PUSH
48853: LD_VAR 0 41
48857: PUSH
48858: LD_VAR 0 42
48862: PUSH
48863: LD_VAR 0 43
48867: PUSH
48868: LD_VAR 0 44
48872: PUSH
48873: LD_VAR 0 45
48877: PUSH
48878: LD_VAR 0 46
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: PUSH
48891: LD_VAR 0 4
48895: PUSH
48896: LD_INT 1
48898: PLUS
48899: ARRAY
48900: ST_TO_ADDR
48901: GO 49156
48903: LD_INT 36
48905: DOUBLE
48906: EQUAL
48907: IFTRUE 48911
48909: GO 48967
48911: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48912: LD_ADDR_VAR 0 9
48916: PUSH
48917: LD_VAR 0 47
48921: PUSH
48922: LD_VAR 0 48
48926: PUSH
48927: LD_VAR 0 49
48931: PUSH
48932: LD_VAR 0 50
48936: PUSH
48937: LD_VAR 0 51
48941: PUSH
48942: LD_VAR 0 52
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: PUSH
48955: LD_VAR 0 4
48959: PUSH
48960: LD_INT 1
48962: PLUS
48963: ARRAY
48964: ST_TO_ADDR
48965: GO 49156
48967: LD_INT 4
48969: DOUBLE
48970: EQUAL
48971: IFTRUE 48993
48973: LD_INT 5
48975: DOUBLE
48976: EQUAL
48977: IFTRUE 48993
48979: LD_INT 34
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 48993
48985: LD_INT 37
48987: DOUBLE
48988: EQUAL
48989: IFTRUE 48993
48991: GO 49049
48993: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48994: LD_ADDR_VAR 0 9
48998: PUSH
48999: LD_VAR 0 53
49003: PUSH
49004: LD_VAR 0 54
49008: PUSH
49009: LD_VAR 0 55
49013: PUSH
49014: LD_VAR 0 56
49018: PUSH
49019: LD_VAR 0 57
49023: PUSH
49024: LD_VAR 0 58
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: PUSH
49037: LD_VAR 0 4
49041: PUSH
49042: LD_INT 1
49044: PLUS
49045: ARRAY
49046: ST_TO_ADDR
49047: GO 49156
49049: LD_INT 31
49051: DOUBLE
49052: EQUAL
49053: IFTRUE 49099
49055: LD_INT 32
49057: DOUBLE
49058: EQUAL
49059: IFTRUE 49099
49061: LD_INT 33
49063: DOUBLE
49064: EQUAL
49065: IFTRUE 49099
49067: LD_INT 27
49069: DOUBLE
49070: EQUAL
49071: IFTRUE 49099
49073: LD_INT 26
49075: DOUBLE
49076: EQUAL
49077: IFTRUE 49099
49079: LD_INT 28
49081: DOUBLE
49082: EQUAL
49083: IFTRUE 49099
49085: LD_INT 29
49087: DOUBLE
49088: EQUAL
49089: IFTRUE 49099
49091: LD_INT 30
49093: DOUBLE
49094: EQUAL
49095: IFTRUE 49099
49097: GO 49155
49099: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49100: LD_ADDR_VAR 0 9
49104: PUSH
49105: LD_VAR 0 59
49109: PUSH
49110: LD_VAR 0 60
49114: PUSH
49115: LD_VAR 0 61
49119: PUSH
49120: LD_VAR 0 62
49124: PUSH
49125: LD_VAR 0 63
49129: PUSH
49130: LD_VAR 0 64
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: PUSH
49143: LD_VAR 0 4
49147: PUSH
49148: LD_INT 1
49150: PLUS
49151: ARRAY
49152: ST_TO_ADDR
49153: GO 49156
49155: POP
// temp_list2 = [ ] ;
49156: LD_ADDR_VAR 0 10
49160: PUSH
49161: EMPTY
49162: ST_TO_ADDR
// for i in temp_list do
49163: LD_ADDR_VAR 0 8
49167: PUSH
49168: LD_VAR 0 9
49172: PUSH
49173: FOR_IN
49174: IFFALSE 49226
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49176: LD_ADDR_VAR 0 10
49180: PUSH
49181: LD_VAR 0 10
49185: PUSH
49186: LD_VAR 0 8
49190: PUSH
49191: LD_INT 1
49193: ARRAY
49194: PUSH
49195: LD_VAR 0 2
49199: PLUS
49200: PUSH
49201: LD_VAR 0 8
49205: PUSH
49206: LD_INT 2
49208: ARRAY
49209: PUSH
49210: LD_VAR 0 3
49214: PLUS
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: ADD
49223: ST_TO_ADDR
49224: GO 49173
49226: POP
49227: POP
// result = temp_list2 ;
49228: LD_ADDR_VAR 0 7
49232: PUSH
49233: LD_VAR 0 10
49237: ST_TO_ADDR
// end ;
49238: LD_VAR 0 7
49242: RET
// export function EnemyInRange ( unit , dist ) ; begin
49243: LD_INT 0
49245: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49246: LD_ADDR_VAR 0 3
49250: PUSH
49251: LD_VAR 0 1
49255: PPUSH
49256: CALL_OW 255
49260: PPUSH
49261: LD_VAR 0 1
49265: PPUSH
49266: CALL_OW 250
49270: PPUSH
49271: LD_VAR 0 1
49275: PPUSH
49276: CALL_OW 251
49280: PPUSH
49281: LD_VAR 0 2
49285: PPUSH
49286: CALL 22639 0 4
49290: PUSH
49291: LD_INT 4
49293: ARRAY
49294: ST_TO_ADDR
// end ;
49295: LD_VAR 0 3
49299: RET
// export function PlayerSeeMe ( unit ) ; begin
49300: LD_INT 0
49302: PPUSH
// result := See ( your_side , unit ) ;
49303: LD_ADDR_VAR 0 2
49307: PUSH
49308: LD_OWVAR 2
49312: PPUSH
49313: LD_VAR 0 1
49317: PPUSH
49318: CALL_OW 292
49322: ST_TO_ADDR
// end ;
49323: LD_VAR 0 2
49327: RET
// export function ReverseDir ( unit ) ; begin
49328: LD_INT 0
49330: PPUSH
// if not unit then
49331: LD_VAR 0 1
49335: NOT
49336: IFFALSE 49340
// exit ;
49338: GO 49363
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49340: LD_ADDR_VAR 0 2
49344: PUSH
49345: LD_VAR 0 1
49349: PPUSH
49350: CALL_OW 254
49354: PUSH
49355: LD_INT 3
49357: PLUS
49358: PUSH
49359: LD_INT 6
49361: MOD
49362: ST_TO_ADDR
// end ;
49363: LD_VAR 0 2
49367: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49368: LD_INT 0
49370: PPUSH
49371: PPUSH
49372: PPUSH
49373: PPUSH
49374: PPUSH
// if not hexes then
49375: LD_VAR 0 2
49379: NOT
49380: IFFALSE 49384
// exit ;
49382: GO 49532
// dist := 9999 ;
49384: LD_ADDR_VAR 0 5
49388: PUSH
49389: LD_INT 9999
49391: ST_TO_ADDR
// for i = 1 to hexes do
49392: LD_ADDR_VAR 0 4
49396: PUSH
49397: DOUBLE
49398: LD_INT 1
49400: DEC
49401: ST_TO_ADDR
49402: LD_VAR 0 2
49406: PUSH
49407: FOR_TO
49408: IFFALSE 49520
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49410: LD_VAR 0 1
49414: PPUSH
49415: LD_VAR 0 2
49419: PUSH
49420: LD_VAR 0 4
49424: ARRAY
49425: PUSH
49426: LD_INT 1
49428: ARRAY
49429: PPUSH
49430: LD_VAR 0 2
49434: PUSH
49435: LD_VAR 0 4
49439: ARRAY
49440: PUSH
49441: LD_INT 2
49443: ARRAY
49444: PPUSH
49445: CALL_OW 297
49449: PUSH
49450: LD_VAR 0 5
49454: LESS
49455: IFFALSE 49518
// begin hex := hexes [ i ] ;
49457: LD_ADDR_VAR 0 7
49461: PUSH
49462: LD_VAR 0 2
49466: PUSH
49467: LD_VAR 0 4
49471: ARRAY
49472: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49473: LD_ADDR_VAR 0 5
49477: PUSH
49478: LD_VAR 0 1
49482: PPUSH
49483: LD_VAR 0 2
49487: PUSH
49488: LD_VAR 0 4
49492: ARRAY
49493: PUSH
49494: LD_INT 1
49496: ARRAY
49497: PPUSH
49498: LD_VAR 0 2
49502: PUSH
49503: LD_VAR 0 4
49507: ARRAY
49508: PUSH
49509: LD_INT 2
49511: ARRAY
49512: PPUSH
49513: CALL_OW 297
49517: ST_TO_ADDR
// end ; end ;
49518: GO 49407
49520: POP
49521: POP
// result := hex ;
49522: LD_ADDR_VAR 0 3
49526: PUSH
49527: LD_VAR 0 7
49531: ST_TO_ADDR
// end ;
49532: LD_VAR 0 3
49536: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49537: LD_INT 0
49539: PPUSH
49540: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49541: LD_VAR 0 1
49545: NOT
49546: PUSH
49547: LD_VAR 0 1
49551: PUSH
49552: LD_INT 21
49554: PUSH
49555: LD_INT 2
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 23
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PPUSH
49576: CALL_OW 69
49580: IN
49581: NOT
49582: OR
49583: IFFALSE 49587
// exit ;
49585: GO 49634
// for i = 1 to 3 do
49587: LD_ADDR_VAR 0 3
49591: PUSH
49592: DOUBLE
49593: LD_INT 1
49595: DEC
49596: ST_TO_ADDR
49597: LD_INT 3
49599: PUSH
49600: FOR_TO
49601: IFFALSE 49632
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49603: LD_VAR 0 1
49607: PPUSH
49608: CALL_OW 250
49612: PPUSH
49613: LD_VAR 0 1
49617: PPUSH
49618: CALL_OW 251
49622: PPUSH
49623: LD_INT 1
49625: PPUSH
49626: CALL_OW 453
49630: GO 49600
49632: POP
49633: POP
// end ;
49634: LD_VAR 0 2
49638: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49639: LD_INT 0
49641: PPUSH
49642: PPUSH
49643: PPUSH
49644: PPUSH
49645: PPUSH
49646: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49647: LD_VAR 0 1
49651: NOT
49652: PUSH
49653: LD_VAR 0 2
49657: NOT
49658: OR
49659: PUSH
49660: LD_VAR 0 1
49664: PPUSH
49665: CALL_OW 314
49669: OR
49670: IFFALSE 49674
// exit ;
49672: GO 50115
// x := GetX ( enemy_unit ) ;
49674: LD_ADDR_VAR 0 7
49678: PUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: CALL_OW 250
49688: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49689: LD_ADDR_VAR 0 8
49693: PUSH
49694: LD_VAR 0 2
49698: PPUSH
49699: CALL_OW 251
49703: ST_TO_ADDR
// if not x or not y then
49704: LD_VAR 0 7
49708: NOT
49709: PUSH
49710: LD_VAR 0 8
49714: NOT
49715: OR
49716: IFFALSE 49720
// exit ;
49718: GO 50115
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49720: LD_ADDR_VAR 0 6
49724: PUSH
49725: LD_VAR 0 7
49729: PPUSH
49730: LD_INT 0
49732: PPUSH
49733: LD_INT 4
49735: PPUSH
49736: CALL_OW 272
49740: PUSH
49741: LD_VAR 0 8
49745: PPUSH
49746: LD_INT 0
49748: PPUSH
49749: LD_INT 4
49751: PPUSH
49752: CALL_OW 273
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_VAR 0 7
49765: PPUSH
49766: LD_INT 1
49768: PPUSH
49769: LD_INT 4
49771: PPUSH
49772: CALL_OW 272
49776: PUSH
49777: LD_VAR 0 8
49781: PPUSH
49782: LD_INT 1
49784: PPUSH
49785: LD_INT 4
49787: PPUSH
49788: CALL_OW 273
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_VAR 0 7
49801: PPUSH
49802: LD_INT 2
49804: PPUSH
49805: LD_INT 4
49807: PPUSH
49808: CALL_OW 272
49812: PUSH
49813: LD_VAR 0 8
49817: PPUSH
49818: LD_INT 2
49820: PPUSH
49821: LD_INT 4
49823: PPUSH
49824: CALL_OW 273
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_VAR 0 7
49837: PPUSH
49838: LD_INT 3
49840: PPUSH
49841: LD_INT 4
49843: PPUSH
49844: CALL_OW 272
49848: PUSH
49849: LD_VAR 0 8
49853: PPUSH
49854: LD_INT 3
49856: PPUSH
49857: LD_INT 4
49859: PPUSH
49860: CALL_OW 273
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_VAR 0 7
49873: PPUSH
49874: LD_INT 4
49876: PPUSH
49877: LD_INT 4
49879: PPUSH
49880: CALL_OW 272
49884: PUSH
49885: LD_VAR 0 8
49889: PPUSH
49890: LD_INT 4
49892: PPUSH
49893: LD_INT 4
49895: PPUSH
49896: CALL_OW 273
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_VAR 0 7
49909: PPUSH
49910: LD_INT 5
49912: PPUSH
49913: LD_INT 4
49915: PPUSH
49916: CALL_OW 272
49920: PUSH
49921: LD_VAR 0 8
49925: PPUSH
49926: LD_INT 5
49928: PPUSH
49929: LD_INT 4
49931: PPUSH
49932: CALL_OW 273
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: ST_TO_ADDR
// for i = tmp downto 1 do
49949: LD_ADDR_VAR 0 4
49953: PUSH
49954: DOUBLE
49955: LD_VAR 0 6
49959: INC
49960: ST_TO_ADDR
49961: LD_INT 1
49963: PUSH
49964: FOR_DOWNTO
49965: IFFALSE 50066
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49967: LD_VAR 0 6
49971: PUSH
49972: LD_VAR 0 4
49976: ARRAY
49977: PUSH
49978: LD_INT 1
49980: ARRAY
49981: PPUSH
49982: LD_VAR 0 6
49986: PUSH
49987: LD_VAR 0 4
49991: ARRAY
49992: PUSH
49993: LD_INT 2
49995: ARRAY
49996: PPUSH
49997: CALL_OW 488
50001: NOT
50002: PUSH
50003: LD_VAR 0 6
50007: PUSH
50008: LD_VAR 0 4
50012: ARRAY
50013: PUSH
50014: LD_INT 1
50016: ARRAY
50017: PPUSH
50018: LD_VAR 0 6
50022: PUSH
50023: LD_VAR 0 4
50027: ARRAY
50028: PUSH
50029: LD_INT 2
50031: ARRAY
50032: PPUSH
50033: CALL_OW 428
50037: PUSH
50038: LD_INT 0
50040: NONEQUAL
50041: OR
50042: IFFALSE 50064
// tmp := Delete ( tmp , i ) ;
50044: LD_ADDR_VAR 0 6
50048: PUSH
50049: LD_VAR 0 6
50053: PPUSH
50054: LD_VAR 0 4
50058: PPUSH
50059: CALL_OW 3
50063: ST_TO_ADDR
50064: GO 49964
50066: POP
50067: POP
// j := GetClosestHex ( unit , tmp ) ;
50068: LD_ADDR_VAR 0 5
50072: PUSH
50073: LD_VAR 0 1
50077: PPUSH
50078: LD_VAR 0 6
50082: PPUSH
50083: CALL 49368 0 2
50087: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50088: LD_VAR 0 1
50092: PPUSH
50093: LD_VAR 0 5
50097: PUSH
50098: LD_INT 1
50100: ARRAY
50101: PPUSH
50102: LD_VAR 0 5
50106: PUSH
50107: LD_INT 2
50109: ARRAY
50110: PPUSH
50111: CALL_OW 111
// end ;
50115: LD_VAR 0 3
50119: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50120: LD_INT 0
50122: PPUSH
50123: PPUSH
50124: PPUSH
// uc_side = 0 ;
50125: LD_ADDR_OWVAR 20
50129: PUSH
50130: LD_INT 0
50132: ST_TO_ADDR
// uc_nation = 0 ;
50133: LD_ADDR_OWVAR 21
50137: PUSH
50138: LD_INT 0
50140: ST_TO_ADDR
// InitHc_All ( ) ;
50141: CALL_OW 584
// InitVc ;
50145: CALL_OW 20
// if mastodonts then
50149: LD_VAR 0 6
50153: IFFALSE 50220
// for i = 1 to mastodonts do
50155: LD_ADDR_VAR 0 11
50159: PUSH
50160: DOUBLE
50161: LD_INT 1
50163: DEC
50164: ST_TO_ADDR
50165: LD_VAR 0 6
50169: PUSH
50170: FOR_TO
50171: IFFALSE 50218
// begin vc_chassis := 31 ;
50173: LD_ADDR_OWVAR 37
50177: PUSH
50178: LD_INT 31
50180: ST_TO_ADDR
// vc_control := control_rider ;
50181: LD_ADDR_OWVAR 38
50185: PUSH
50186: LD_INT 4
50188: ST_TO_ADDR
// animal := CreateVehicle ;
50189: LD_ADDR_VAR 0 12
50193: PUSH
50194: CALL_OW 45
50198: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50199: LD_VAR 0 12
50203: PPUSH
50204: LD_VAR 0 8
50208: PPUSH
50209: LD_INT 0
50211: PPUSH
50212: CALL 52355 0 3
// end ;
50216: GO 50170
50218: POP
50219: POP
// if horses then
50220: LD_VAR 0 5
50224: IFFALSE 50291
// for i = 1 to horses do
50226: LD_ADDR_VAR 0 11
50230: PUSH
50231: DOUBLE
50232: LD_INT 1
50234: DEC
50235: ST_TO_ADDR
50236: LD_VAR 0 5
50240: PUSH
50241: FOR_TO
50242: IFFALSE 50289
// begin hc_class := 21 ;
50244: LD_ADDR_OWVAR 28
50248: PUSH
50249: LD_INT 21
50251: ST_TO_ADDR
// hc_gallery :=  ;
50252: LD_ADDR_OWVAR 33
50256: PUSH
50257: LD_STRING 
50259: ST_TO_ADDR
// animal := CreateHuman ;
50260: LD_ADDR_VAR 0 12
50264: PUSH
50265: CALL_OW 44
50269: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50270: LD_VAR 0 12
50274: PPUSH
50275: LD_VAR 0 8
50279: PPUSH
50280: LD_INT 0
50282: PPUSH
50283: CALL 52355 0 3
// end ;
50287: GO 50241
50289: POP
50290: POP
// if birds then
50291: LD_VAR 0 1
50295: IFFALSE 50362
// for i = 1 to birds do
50297: LD_ADDR_VAR 0 11
50301: PUSH
50302: DOUBLE
50303: LD_INT 1
50305: DEC
50306: ST_TO_ADDR
50307: LD_VAR 0 1
50311: PUSH
50312: FOR_TO
50313: IFFALSE 50360
// begin hc_class = 18 ;
50315: LD_ADDR_OWVAR 28
50319: PUSH
50320: LD_INT 18
50322: ST_TO_ADDR
// hc_gallery =  ;
50323: LD_ADDR_OWVAR 33
50327: PUSH
50328: LD_STRING 
50330: ST_TO_ADDR
// animal := CreateHuman ;
50331: LD_ADDR_VAR 0 12
50335: PUSH
50336: CALL_OW 44
50340: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50341: LD_VAR 0 12
50345: PPUSH
50346: LD_VAR 0 8
50350: PPUSH
50351: LD_INT 0
50353: PPUSH
50354: CALL 52355 0 3
// end ;
50358: GO 50312
50360: POP
50361: POP
// if tigers then
50362: LD_VAR 0 2
50366: IFFALSE 50450
// for i = 1 to tigers do
50368: LD_ADDR_VAR 0 11
50372: PUSH
50373: DOUBLE
50374: LD_INT 1
50376: DEC
50377: ST_TO_ADDR
50378: LD_VAR 0 2
50382: PUSH
50383: FOR_TO
50384: IFFALSE 50448
// begin hc_class = class_tiger ;
50386: LD_ADDR_OWVAR 28
50390: PUSH
50391: LD_INT 14
50393: ST_TO_ADDR
// hc_gallery =  ;
50394: LD_ADDR_OWVAR 33
50398: PUSH
50399: LD_STRING 
50401: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50402: LD_ADDR_OWVAR 35
50406: PUSH
50407: LD_INT 7
50409: NEG
50410: PPUSH
50411: LD_INT 7
50413: PPUSH
50414: CALL_OW 12
50418: ST_TO_ADDR
// animal := CreateHuman ;
50419: LD_ADDR_VAR 0 12
50423: PUSH
50424: CALL_OW 44
50428: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50429: LD_VAR 0 12
50433: PPUSH
50434: LD_VAR 0 8
50438: PPUSH
50439: LD_INT 0
50441: PPUSH
50442: CALL 52355 0 3
// end ;
50446: GO 50383
50448: POP
50449: POP
// if apemans then
50450: LD_VAR 0 3
50454: IFFALSE 50577
// for i = 1 to apemans do
50456: LD_ADDR_VAR 0 11
50460: PUSH
50461: DOUBLE
50462: LD_INT 1
50464: DEC
50465: ST_TO_ADDR
50466: LD_VAR 0 3
50470: PUSH
50471: FOR_TO
50472: IFFALSE 50575
// begin hc_class = class_apeman ;
50474: LD_ADDR_OWVAR 28
50478: PUSH
50479: LD_INT 12
50481: ST_TO_ADDR
// hc_gallery =  ;
50482: LD_ADDR_OWVAR 33
50486: PUSH
50487: LD_STRING 
50489: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50490: LD_ADDR_OWVAR 35
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PPUSH
50499: LD_INT 2
50501: PPUSH
50502: CALL_OW 12
50506: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50507: LD_ADDR_OWVAR 31
50511: PUSH
50512: LD_INT 1
50514: PPUSH
50515: LD_INT 3
50517: PPUSH
50518: CALL_OW 12
50522: PUSH
50523: LD_INT 1
50525: PPUSH
50526: LD_INT 3
50528: PPUSH
50529: CALL_OW 12
50533: PUSH
50534: LD_INT 0
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: ST_TO_ADDR
// animal := CreateHuman ;
50546: LD_ADDR_VAR 0 12
50550: PUSH
50551: CALL_OW 44
50555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50556: LD_VAR 0 12
50560: PPUSH
50561: LD_VAR 0 8
50565: PPUSH
50566: LD_INT 0
50568: PPUSH
50569: CALL 52355 0 3
// end ;
50573: GO 50471
50575: POP
50576: POP
// if enchidnas then
50577: LD_VAR 0 4
50581: IFFALSE 50648
// for i = 1 to enchidnas do
50583: LD_ADDR_VAR 0 11
50587: PUSH
50588: DOUBLE
50589: LD_INT 1
50591: DEC
50592: ST_TO_ADDR
50593: LD_VAR 0 4
50597: PUSH
50598: FOR_TO
50599: IFFALSE 50646
// begin hc_class = 13 ;
50601: LD_ADDR_OWVAR 28
50605: PUSH
50606: LD_INT 13
50608: ST_TO_ADDR
// hc_gallery =  ;
50609: LD_ADDR_OWVAR 33
50613: PUSH
50614: LD_STRING 
50616: ST_TO_ADDR
// animal := CreateHuman ;
50617: LD_ADDR_VAR 0 12
50621: PUSH
50622: CALL_OW 44
50626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50627: LD_VAR 0 12
50631: PPUSH
50632: LD_VAR 0 8
50636: PPUSH
50637: LD_INT 0
50639: PPUSH
50640: CALL 52355 0 3
// end ;
50644: GO 50598
50646: POP
50647: POP
// if fishes then
50648: LD_VAR 0 7
50652: IFFALSE 50719
// for i = 1 to fishes do
50654: LD_ADDR_VAR 0 11
50658: PUSH
50659: DOUBLE
50660: LD_INT 1
50662: DEC
50663: ST_TO_ADDR
50664: LD_VAR 0 7
50668: PUSH
50669: FOR_TO
50670: IFFALSE 50717
// begin hc_class = 20 ;
50672: LD_ADDR_OWVAR 28
50676: PUSH
50677: LD_INT 20
50679: ST_TO_ADDR
// hc_gallery =  ;
50680: LD_ADDR_OWVAR 33
50684: PUSH
50685: LD_STRING 
50687: ST_TO_ADDR
// animal := CreateHuman ;
50688: LD_ADDR_VAR 0 12
50692: PUSH
50693: CALL_OW 44
50697: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50698: LD_VAR 0 12
50702: PPUSH
50703: LD_VAR 0 9
50707: PPUSH
50708: LD_INT 0
50710: PPUSH
50711: CALL 52355 0 3
// end ;
50715: GO 50669
50717: POP
50718: POP
// end ;
50719: LD_VAR 0 10
50723: RET
// export function WantHeal ( sci , unit ) ; begin
50724: LD_INT 0
50726: PPUSH
// if GetTaskList ( sci ) > 0 then
50727: LD_VAR 0 1
50731: PPUSH
50732: CALL_OW 437
50736: PUSH
50737: LD_INT 0
50739: GREATER
50740: IFFALSE 50810
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50742: LD_VAR 0 1
50746: PPUSH
50747: CALL_OW 437
50751: PUSH
50752: LD_INT 1
50754: ARRAY
50755: PUSH
50756: LD_INT 1
50758: ARRAY
50759: PUSH
50760: LD_STRING l
50762: EQUAL
50763: PUSH
50764: LD_VAR 0 1
50768: PPUSH
50769: CALL_OW 437
50773: PUSH
50774: LD_INT 1
50776: ARRAY
50777: PUSH
50778: LD_INT 4
50780: ARRAY
50781: PUSH
50782: LD_VAR 0 2
50786: EQUAL
50787: AND
50788: IFFALSE 50800
// result := true else
50790: LD_ADDR_VAR 0 3
50794: PUSH
50795: LD_INT 1
50797: ST_TO_ADDR
50798: GO 50808
// result := false ;
50800: LD_ADDR_VAR 0 3
50804: PUSH
50805: LD_INT 0
50807: ST_TO_ADDR
// end else
50808: GO 50818
// result := false ;
50810: LD_ADDR_VAR 0 3
50814: PUSH
50815: LD_INT 0
50817: ST_TO_ADDR
// end ;
50818: LD_VAR 0 3
50822: RET
// export function HealTarget ( sci ) ; begin
50823: LD_INT 0
50825: PPUSH
// if not sci then
50826: LD_VAR 0 1
50830: NOT
50831: IFFALSE 50835
// exit ;
50833: GO 50900
// result := 0 ;
50835: LD_ADDR_VAR 0 2
50839: PUSH
50840: LD_INT 0
50842: ST_TO_ADDR
// if GetTaskList ( sci ) then
50843: LD_VAR 0 1
50847: PPUSH
50848: CALL_OW 437
50852: IFFALSE 50900
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50854: LD_VAR 0 1
50858: PPUSH
50859: CALL_OW 437
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: PUSH
50868: LD_INT 1
50870: ARRAY
50871: PUSH
50872: LD_STRING l
50874: EQUAL
50875: IFFALSE 50900
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50877: LD_ADDR_VAR 0 2
50881: PUSH
50882: LD_VAR 0 1
50886: PPUSH
50887: CALL_OW 437
50891: PUSH
50892: LD_INT 1
50894: ARRAY
50895: PUSH
50896: LD_INT 4
50898: ARRAY
50899: ST_TO_ADDR
// end ;
50900: LD_VAR 0 2
50904: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50905: LD_INT 0
50907: PPUSH
50908: PPUSH
50909: PPUSH
50910: PPUSH
// if not base_units then
50911: LD_VAR 0 1
50915: NOT
50916: IFFALSE 50920
// exit ;
50918: GO 51007
// result := false ;
50920: LD_ADDR_VAR 0 2
50924: PUSH
50925: LD_INT 0
50927: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50928: LD_ADDR_VAR 0 5
50932: PUSH
50933: LD_VAR 0 1
50937: PPUSH
50938: LD_INT 21
50940: PUSH
50941: LD_INT 3
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PPUSH
50948: CALL_OW 72
50952: ST_TO_ADDR
// if not tmp then
50953: LD_VAR 0 5
50957: NOT
50958: IFFALSE 50962
// exit ;
50960: GO 51007
// for i in tmp do
50962: LD_ADDR_VAR 0 3
50966: PUSH
50967: LD_VAR 0 5
50971: PUSH
50972: FOR_IN
50973: IFFALSE 51005
// begin result := EnemyInRange ( i , 22 ) ;
50975: LD_ADDR_VAR 0 2
50979: PUSH
50980: LD_VAR 0 3
50984: PPUSH
50985: LD_INT 22
50987: PPUSH
50988: CALL 49243 0 2
50992: ST_TO_ADDR
// if result then
50993: LD_VAR 0 2
50997: IFFALSE 51003
// exit ;
50999: POP
51000: POP
51001: GO 51007
// end ;
51003: GO 50972
51005: POP
51006: POP
// end ;
51007: LD_VAR 0 2
51011: RET
// export function FilterByTag ( units , tag ) ; begin
51012: LD_INT 0
51014: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51015: LD_ADDR_VAR 0 3
51019: PUSH
51020: LD_VAR 0 1
51024: PPUSH
51025: LD_INT 120
51027: PUSH
51028: LD_VAR 0 2
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PPUSH
51037: CALL_OW 72
51041: ST_TO_ADDR
// end ;
51042: LD_VAR 0 3
51046: RET
// export function IsDriver ( un ) ; begin
51047: LD_INT 0
51049: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51050: LD_ADDR_VAR 0 2
51054: PUSH
51055: LD_VAR 0 1
51059: PUSH
51060: LD_INT 55
51062: PUSH
51063: EMPTY
51064: LIST
51065: PPUSH
51066: CALL_OW 69
51070: IN
51071: ST_TO_ADDR
// end ;
51072: LD_VAR 0 2
51076: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51077: LD_INT 0
51079: PPUSH
51080: PPUSH
// list := [ ] ;
51081: LD_ADDR_VAR 0 5
51085: PUSH
51086: EMPTY
51087: ST_TO_ADDR
// case d of 0 :
51088: LD_VAR 0 3
51092: PUSH
51093: LD_INT 0
51095: DOUBLE
51096: EQUAL
51097: IFTRUE 51101
51099: GO 51234
51101: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51102: LD_ADDR_VAR 0 5
51106: PUSH
51107: LD_VAR 0 1
51111: PUSH
51112: LD_INT 4
51114: MINUS
51115: PUSH
51116: LD_VAR 0 2
51120: PUSH
51121: LD_INT 4
51123: MINUS
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: PUSH
51133: LD_VAR 0 1
51137: PUSH
51138: LD_INT 3
51140: MINUS
51141: PUSH
51142: LD_VAR 0 2
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: LIST
51154: PUSH
51155: LD_VAR 0 1
51159: PUSH
51160: LD_INT 4
51162: PLUS
51163: PUSH
51164: LD_VAR 0 2
51168: PUSH
51169: LD_INT 4
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: PUSH
51177: LD_VAR 0 1
51181: PUSH
51182: LD_INT 3
51184: PLUS
51185: PUSH
51186: LD_VAR 0 2
51190: PUSH
51191: LD_INT 3
51193: PLUS
51194: PUSH
51195: LD_INT 5
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: LIST
51202: PUSH
51203: LD_VAR 0 1
51207: PUSH
51208: LD_VAR 0 2
51212: PUSH
51213: LD_INT 4
51215: PLUS
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: LIST
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: ST_TO_ADDR
// end ; 1 :
51232: GO 51932
51234: LD_INT 1
51236: DOUBLE
51237: EQUAL
51238: IFTRUE 51242
51240: GO 51375
51242: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51243: LD_ADDR_VAR 0 5
51247: PUSH
51248: LD_VAR 0 1
51252: PUSH
51253: LD_VAR 0 2
51257: PUSH
51258: LD_INT 4
51260: MINUS
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: LIST
51269: PUSH
51270: LD_VAR 0 1
51274: PUSH
51275: LD_INT 3
51277: MINUS
51278: PUSH
51279: LD_VAR 0 2
51283: PUSH
51284: LD_INT 3
51286: MINUS
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: PUSH
51296: LD_VAR 0 1
51300: PUSH
51301: LD_INT 4
51303: MINUS
51304: PUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: LIST
51317: PUSH
51318: LD_VAR 0 1
51322: PUSH
51323: LD_VAR 0 2
51327: PUSH
51328: LD_INT 3
51330: PLUS
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: LIST
51339: PUSH
51340: LD_VAR 0 1
51344: PUSH
51345: LD_INT 4
51347: PLUS
51348: PUSH
51349: LD_VAR 0 2
51353: PUSH
51354: LD_INT 4
51356: PLUS
51357: PUSH
51358: LD_INT 5
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: LIST
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: ST_TO_ADDR
// end ; 2 :
51373: GO 51932
51375: LD_INT 2
51377: DOUBLE
51378: EQUAL
51379: IFTRUE 51383
51381: GO 51512
51383: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51384: LD_ADDR_VAR 0 5
51388: PUSH
51389: LD_VAR 0 1
51393: PUSH
51394: LD_VAR 0 2
51398: PUSH
51399: LD_INT 3
51401: MINUS
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: LIST
51410: PUSH
51411: LD_VAR 0 1
51415: PUSH
51416: LD_INT 4
51418: PLUS
51419: PUSH
51420: LD_VAR 0 2
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: LIST
51432: PUSH
51433: LD_VAR 0 1
51437: PUSH
51438: LD_VAR 0 2
51442: PUSH
51443: LD_INT 4
51445: PLUS
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: LIST
51454: PUSH
51455: LD_VAR 0 1
51459: PUSH
51460: LD_INT 3
51462: MINUS
51463: PUSH
51464: LD_VAR 0 2
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: LIST
51476: PUSH
51477: LD_VAR 0 1
51481: PUSH
51482: LD_INT 4
51484: MINUS
51485: PUSH
51486: LD_VAR 0 2
51490: PUSH
51491: LD_INT 4
51493: MINUS
51494: PUSH
51495: LD_INT 2
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: LIST
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// end ; 3 :
51510: GO 51932
51512: LD_INT 3
51514: DOUBLE
51515: EQUAL
51516: IFTRUE 51520
51518: GO 51653
51520: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_VAR 0 1
51530: PUSH
51531: LD_INT 3
51533: PLUS
51534: PUSH
51535: LD_VAR 0 2
51539: PUSH
51540: LD_INT 4
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: PUSH
51548: LD_VAR 0 1
51552: PUSH
51553: LD_INT 4
51555: PLUS
51556: PUSH
51557: LD_VAR 0 2
51561: PUSH
51562: LD_INT 4
51564: PLUS
51565: PUSH
51566: LD_INT 5
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: PUSH
51574: LD_VAR 0 1
51578: PUSH
51579: LD_INT 4
51581: MINUS
51582: PUSH
51583: LD_VAR 0 2
51587: PUSH
51588: LD_INT 1
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: LIST
51595: PUSH
51596: LD_VAR 0 1
51600: PUSH
51601: LD_VAR 0 2
51605: PUSH
51606: LD_INT 4
51608: MINUS
51609: PUSH
51610: LD_INT 3
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: LIST
51617: PUSH
51618: LD_VAR 0 1
51622: PUSH
51623: LD_INT 3
51625: MINUS
51626: PUSH
51627: LD_VAR 0 2
51631: PUSH
51632: LD_INT 3
51634: MINUS
51635: PUSH
51636: LD_INT 2
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: ST_TO_ADDR
// end ; 4 :
51651: GO 51932
51653: LD_INT 4
51655: DOUBLE
51656: EQUAL
51657: IFTRUE 51661
51659: GO 51794
51661: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51662: LD_ADDR_VAR 0 5
51666: PUSH
51667: LD_VAR 0 1
51671: PUSH
51672: LD_VAR 0 2
51676: PUSH
51677: LD_INT 4
51679: PLUS
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: LIST
51688: PUSH
51689: LD_VAR 0 1
51693: PUSH
51694: LD_INT 3
51696: PLUS
51697: PUSH
51698: LD_VAR 0 2
51702: PUSH
51703: LD_INT 3
51705: PLUS
51706: PUSH
51707: LD_INT 5
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: PUSH
51715: LD_VAR 0 1
51719: PUSH
51720: LD_INT 4
51722: PLUS
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_INT 4
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: LIST
51736: PUSH
51737: LD_VAR 0 1
51741: PUSH
51742: LD_VAR 0 2
51746: PUSH
51747: LD_INT 3
51749: MINUS
51750: PUSH
51751: LD_INT 3
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: LIST
51758: PUSH
51759: LD_VAR 0 1
51763: PUSH
51764: LD_INT 4
51766: MINUS
51767: PUSH
51768: LD_VAR 0 2
51772: PUSH
51773: LD_INT 4
51775: MINUS
51776: PUSH
51777: LD_INT 2
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: LIST
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// end ; 5 :
51792: GO 51932
51794: LD_INT 5
51796: DOUBLE
51797: EQUAL
51798: IFTRUE 51802
51800: GO 51931
51802: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51803: LD_ADDR_VAR 0 5
51807: PUSH
51808: LD_VAR 0 1
51812: PUSH
51813: LD_INT 4
51815: MINUS
51816: PUSH
51817: LD_VAR 0 2
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: LIST
51829: PUSH
51830: LD_VAR 0 1
51834: PUSH
51835: LD_VAR 0 2
51839: PUSH
51840: LD_INT 4
51842: MINUS
51843: PUSH
51844: LD_INT 3
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: LIST
51851: PUSH
51852: LD_VAR 0 1
51856: PUSH
51857: LD_INT 4
51859: PLUS
51860: PUSH
51861: LD_VAR 0 2
51865: PUSH
51866: LD_INT 4
51868: PLUS
51869: PUSH
51870: LD_INT 5
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: LIST
51877: PUSH
51878: LD_VAR 0 1
51882: PUSH
51883: LD_INT 3
51885: PLUS
51886: PUSH
51887: LD_VAR 0 2
51891: PUSH
51892: LD_INT 4
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: LIST
51899: PUSH
51900: LD_VAR 0 1
51904: PUSH
51905: LD_VAR 0 2
51909: PUSH
51910: LD_INT 3
51912: PLUS
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: LIST
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: ST_TO_ADDR
// end ; end ;
51929: GO 51932
51931: POP
// result := list ;
51932: LD_ADDR_VAR 0 4
51936: PUSH
51937: LD_VAR 0 5
51941: ST_TO_ADDR
// end ;
51942: LD_VAR 0 4
51946: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51947: LD_INT 0
51949: PPUSH
51950: PPUSH
51951: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51952: LD_VAR 0 1
51956: NOT
51957: PUSH
51958: LD_VAR 0 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: LD_INT 3
51971: PUSH
51972: LD_INT 4
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: IN
51981: NOT
51982: OR
51983: IFFALSE 51987
// exit ;
51985: GO 52079
// tmp := [ ] ;
51987: LD_ADDR_VAR 0 5
51991: PUSH
51992: EMPTY
51993: ST_TO_ADDR
// for i in units do
51994: LD_ADDR_VAR 0 4
51998: PUSH
51999: LD_VAR 0 1
52003: PUSH
52004: FOR_IN
52005: IFFALSE 52048
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52007: LD_ADDR_VAR 0 5
52011: PUSH
52012: LD_VAR 0 5
52016: PPUSH
52017: LD_VAR 0 5
52021: PUSH
52022: LD_INT 1
52024: PLUS
52025: PPUSH
52026: LD_VAR 0 4
52030: PPUSH
52031: LD_VAR 0 2
52035: PPUSH
52036: CALL_OW 259
52040: PPUSH
52041: CALL_OW 2
52045: ST_TO_ADDR
52046: GO 52004
52048: POP
52049: POP
// if not tmp then
52050: LD_VAR 0 5
52054: NOT
52055: IFFALSE 52059
// exit ;
52057: GO 52079
// result := SortListByListDesc ( units , tmp ) ;
52059: LD_ADDR_VAR 0 3
52063: PUSH
52064: LD_VAR 0 1
52068: PPUSH
52069: LD_VAR 0 5
52073: PPUSH
52074: CALL_OW 77
52078: ST_TO_ADDR
// end ;
52079: LD_VAR 0 3
52083: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52084: LD_INT 0
52086: PPUSH
52087: PPUSH
52088: PPUSH
// result := false ;
52089: LD_ADDR_VAR 0 3
52093: PUSH
52094: LD_INT 0
52096: ST_TO_ADDR
// x := GetX ( building ) ;
52097: LD_ADDR_VAR 0 4
52101: PUSH
52102: LD_VAR 0 2
52106: PPUSH
52107: CALL_OW 250
52111: ST_TO_ADDR
// y := GetY ( building ) ;
52112: LD_ADDR_VAR 0 5
52116: PUSH
52117: LD_VAR 0 2
52121: PPUSH
52122: CALL_OW 251
52126: ST_TO_ADDR
// if not building or not x or not y then
52127: LD_VAR 0 2
52131: NOT
52132: PUSH
52133: LD_VAR 0 4
52137: NOT
52138: OR
52139: PUSH
52140: LD_VAR 0 5
52144: NOT
52145: OR
52146: IFFALSE 52150
// exit ;
52148: GO 52242
// if GetTaskList ( unit ) then
52150: LD_VAR 0 1
52154: PPUSH
52155: CALL_OW 437
52159: IFFALSE 52242
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52161: LD_STRING e
52163: PUSH
52164: LD_VAR 0 1
52168: PPUSH
52169: CALL_OW 437
52173: PUSH
52174: LD_INT 1
52176: ARRAY
52177: PUSH
52178: LD_INT 1
52180: ARRAY
52181: EQUAL
52182: PUSH
52183: LD_VAR 0 4
52187: PUSH
52188: LD_VAR 0 1
52192: PPUSH
52193: CALL_OW 437
52197: PUSH
52198: LD_INT 1
52200: ARRAY
52201: PUSH
52202: LD_INT 2
52204: ARRAY
52205: EQUAL
52206: AND
52207: PUSH
52208: LD_VAR 0 5
52212: PUSH
52213: LD_VAR 0 1
52217: PPUSH
52218: CALL_OW 437
52222: PUSH
52223: LD_INT 1
52225: ARRAY
52226: PUSH
52227: LD_INT 3
52229: ARRAY
52230: EQUAL
52231: AND
52232: IFFALSE 52242
// result := true end ;
52234: LD_ADDR_VAR 0 3
52238: PUSH
52239: LD_INT 1
52241: ST_TO_ADDR
// end ;
52242: LD_VAR 0 3
52246: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52247: LD_INT 0
52249: PPUSH
// result := false ;
52250: LD_ADDR_VAR 0 4
52254: PUSH
52255: LD_INT 0
52257: ST_TO_ADDR
// if GetTaskList ( unit ) then
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL_OW 437
52267: IFFALSE 52350
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52269: LD_STRING M
52271: PUSH
52272: LD_VAR 0 1
52276: PPUSH
52277: CALL_OW 437
52281: PUSH
52282: LD_INT 1
52284: ARRAY
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: EQUAL
52290: PUSH
52291: LD_VAR 0 2
52295: PUSH
52296: LD_VAR 0 1
52300: PPUSH
52301: CALL_OW 437
52305: PUSH
52306: LD_INT 1
52308: ARRAY
52309: PUSH
52310: LD_INT 2
52312: ARRAY
52313: EQUAL
52314: AND
52315: PUSH
52316: LD_VAR 0 3
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: CALL_OW 437
52330: PUSH
52331: LD_INT 1
52333: ARRAY
52334: PUSH
52335: LD_INT 3
52337: ARRAY
52338: EQUAL
52339: AND
52340: IFFALSE 52350
// result := true ;
52342: LD_ADDR_VAR 0 4
52346: PUSH
52347: LD_INT 1
52349: ST_TO_ADDR
// end ; end ;
52350: LD_VAR 0 4
52354: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52355: LD_INT 0
52357: PPUSH
52358: PPUSH
52359: PPUSH
52360: PPUSH
// if not unit or not area then
52361: LD_VAR 0 1
52365: NOT
52366: PUSH
52367: LD_VAR 0 2
52371: NOT
52372: OR
52373: IFFALSE 52377
// exit ;
52375: GO 52541
// tmp := AreaToList ( area , i ) ;
52377: LD_ADDR_VAR 0 6
52381: PUSH
52382: LD_VAR 0 2
52386: PPUSH
52387: LD_VAR 0 5
52391: PPUSH
52392: CALL_OW 517
52396: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52397: LD_ADDR_VAR 0 5
52401: PUSH
52402: DOUBLE
52403: LD_INT 1
52405: DEC
52406: ST_TO_ADDR
52407: LD_VAR 0 6
52411: PUSH
52412: LD_INT 1
52414: ARRAY
52415: PUSH
52416: FOR_TO
52417: IFFALSE 52539
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52419: LD_ADDR_VAR 0 7
52423: PUSH
52424: LD_VAR 0 6
52428: PUSH
52429: LD_INT 1
52431: ARRAY
52432: PUSH
52433: LD_VAR 0 5
52437: ARRAY
52438: PUSH
52439: LD_VAR 0 6
52443: PUSH
52444: LD_INT 2
52446: ARRAY
52447: PUSH
52448: LD_VAR 0 5
52452: ARRAY
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52458: LD_VAR 0 7
52462: PUSH
52463: LD_INT 1
52465: ARRAY
52466: PPUSH
52467: LD_VAR 0 7
52471: PUSH
52472: LD_INT 2
52474: ARRAY
52475: PPUSH
52476: CALL_OW 428
52480: PUSH
52481: LD_INT 0
52483: EQUAL
52484: IFFALSE 52537
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52486: LD_VAR 0 1
52490: PPUSH
52491: LD_VAR 0 7
52495: PUSH
52496: LD_INT 1
52498: ARRAY
52499: PPUSH
52500: LD_VAR 0 7
52504: PUSH
52505: LD_INT 2
52507: ARRAY
52508: PPUSH
52509: LD_VAR 0 3
52513: PPUSH
52514: CALL_OW 48
// result := IsPlaced ( unit ) ;
52518: LD_ADDR_VAR 0 4
52522: PUSH
52523: LD_VAR 0 1
52527: PPUSH
52528: CALL_OW 305
52532: ST_TO_ADDR
// exit ;
52533: POP
52534: POP
52535: GO 52541
// end ; end ;
52537: GO 52416
52539: POP
52540: POP
// end ;
52541: LD_VAR 0 4
52545: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52546: LD_INT 0
52548: PPUSH
52549: PPUSH
52550: PPUSH
// if not side or side > 8 then
52551: LD_VAR 0 1
52555: NOT
52556: PUSH
52557: LD_VAR 0 1
52561: PUSH
52562: LD_INT 8
52564: GREATER
52565: OR
52566: IFFALSE 52570
// exit ;
52568: GO 52757
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52570: LD_ADDR_VAR 0 4
52574: PUSH
52575: LD_INT 22
52577: PUSH
52578: LD_VAR 0 1
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 21
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PPUSH
52601: CALL_OW 69
52605: ST_TO_ADDR
// if not tmp then
52606: LD_VAR 0 4
52610: NOT
52611: IFFALSE 52615
// exit ;
52613: GO 52757
// enable_addtolog := true ;
52615: LD_ADDR_OWVAR 81
52619: PUSH
52620: LD_INT 1
52622: ST_TO_ADDR
// AddToLog ( [ ) ;
52623: LD_STRING [
52625: PPUSH
52626: CALL_OW 561
// for i in tmp do
52630: LD_ADDR_VAR 0 3
52634: PUSH
52635: LD_VAR 0 4
52639: PUSH
52640: FOR_IN
52641: IFFALSE 52748
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52643: LD_STRING [
52645: PUSH
52646: LD_VAR 0 3
52650: PPUSH
52651: CALL_OW 266
52655: STR
52656: PUSH
52657: LD_STRING , 
52659: STR
52660: PUSH
52661: LD_VAR 0 3
52665: PPUSH
52666: CALL_OW 250
52670: STR
52671: PUSH
52672: LD_STRING , 
52674: STR
52675: PUSH
52676: LD_VAR 0 3
52680: PPUSH
52681: CALL_OW 251
52685: STR
52686: PUSH
52687: LD_STRING , 
52689: STR
52690: PUSH
52691: LD_VAR 0 3
52695: PPUSH
52696: CALL_OW 254
52700: STR
52701: PUSH
52702: LD_STRING , 
52704: STR
52705: PUSH
52706: LD_VAR 0 3
52710: PPUSH
52711: LD_INT 1
52713: PPUSH
52714: CALL_OW 268
52718: STR
52719: PUSH
52720: LD_STRING , 
52722: STR
52723: PUSH
52724: LD_VAR 0 3
52728: PPUSH
52729: LD_INT 2
52731: PPUSH
52732: CALL_OW 268
52736: STR
52737: PUSH
52738: LD_STRING ],
52740: STR
52741: PPUSH
52742: CALL_OW 561
// end ;
52746: GO 52640
52748: POP
52749: POP
// AddToLog ( ]; ) ;
52750: LD_STRING ];
52752: PPUSH
52753: CALL_OW 561
// end ;
52757: LD_VAR 0 2
52761: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52762: LD_INT 0
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
// if not area or not rate or not max then
52769: LD_VAR 0 1
52773: NOT
52774: PUSH
52775: LD_VAR 0 2
52779: NOT
52780: OR
52781: PUSH
52782: LD_VAR 0 4
52786: NOT
52787: OR
52788: IFFALSE 52792
// exit ;
52790: GO 52981
// while 1 do
52792: LD_INT 1
52794: IFFALSE 52981
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52796: LD_ADDR_VAR 0 9
52800: PUSH
52801: LD_VAR 0 1
52805: PPUSH
52806: LD_INT 1
52808: PPUSH
52809: CALL_OW 287
52813: PUSH
52814: LD_INT 10
52816: MUL
52817: ST_TO_ADDR
// r := rate / 10 ;
52818: LD_ADDR_VAR 0 7
52822: PUSH
52823: LD_VAR 0 2
52827: PUSH
52828: LD_INT 10
52830: DIVREAL
52831: ST_TO_ADDR
// time := 1 1$00 ;
52832: LD_ADDR_VAR 0 8
52836: PUSH
52837: LD_INT 2100
52839: ST_TO_ADDR
// if amount < min then
52840: LD_VAR 0 9
52844: PUSH
52845: LD_VAR 0 3
52849: LESS
52850: IFFALSE 52868
// r := r * 2 else
52852: LD_ADDR_VAR 0 7
52856: PUSH
52857: LD_VAR 0 7
52861: PUSH
52862: LD_INT 2
52864: MUL
52865: ST_TO_ADDR
52866: GO 52894
// if amount > max then
52868: LD_VAR 0 9
52872: PUSH
52873: LD_VAR 0 4
52877: GREATER
52878: IFFALSE 52894
// r := r / 2 ;
52880: LD_ADDR_VAR 0 7
52884: PUSH
52885: LD_VAR 0 7
52889: PUSH
52890: LD_INT 2
52892: DIVREAL
52893: ST_TO_ADDR
// time := time / r ;
52894: LD_ADDR_VAR 0 8
52898: PUSH
52899: LD_VAR 0 8
52903: PUSH
52904: LD_VAR 0 7
52908: DIVREAL
52909: ST_TO_ADDR
// if time < 0 then
52910: LD_VAR 0 8
52914: PUSH
52915: LD_INT 0
52917: LESS
52918: IFFALSE 52935
// time := time * - 1 ;
52920: LD_ADDR_VAR 0 8
52924: PUSH
52925: LD_VAR 0 8
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: MUL
52934: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
52935: LD_VAR 0 8
52939: PUSH
52940: LD_INT 35
52942: PPUSH
52943: LD_INT 875
52945: PPUSH
52946: CALL_OW 12
52950: PLUS
52951: PPUSH
52952: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52956: LD_INT 1
52958: PPUSH
52959: LD_INT 5
52961: PPUSH
52962: CALL_OW 12
52966: PPUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: LD_INT 1
52974: PPUSH
52975: CALL_OW 55
// end ;
52979: GO 52792
// end ;
52981: LD_VAR 0 5
52985: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52986: LD_INT 0
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
// if not turrets or not factories then
52996: LD_VAR 0 1
53000: NOT
53001: PUSH
53002: LD_VAR 0 2
53006: NOT
53007: OR
53008: IFFALSE 53012
// exit ;
53010: GO 53319
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53012: LD_ADDR_VAR 0 10
53016: PUSH
53017: LD_INT 5
53019: PUSH
53020: LD_INT 6
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 2
53029: PUSH
53030: LD_INT 4
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 3
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 24
53054: PUSH
53055: LD_INT 25
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 23
53064: PUSH
53065: LD_INT 27
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 42
53078: PUSH
53079: LD_INT 43
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 44
53088: PUSH
53089: LD_INT 46
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 45
53098: PUSH
53099: LD_INT 47
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: LIST
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: LIST
53115: ST_TO_ADDR
// result := [ ] ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: EMPTY
53122: ST_TO_ADDR
// for i in turrets do
53123: LD_ADDR_VAR 0 4
53127: PUSH
53128: LD_VAR 0 1
53132: PUSH
53133: FOR_IN
53134: IFFALSE 53317
// begin nat := GetNation ( i ) ;
53136: LD_ADDR_VAR 0 7
53140: PUSH
53141: LD_VAR 0 4
53145: PPUSH
53146: CALL_OW 248
53150: ST_TO_ADDR
// weapon := 0 ;
53151: LD_ADDR_VAR 0 8
53155: PUSH
53156: LD_INT 0
53158: ST_TO_ADDR
// if not nat then
53159: LD_VAR 0 7
53163: NOT
53164: IFFALSE 53168
// continue ;
53166: GO 53133
// for j in list [ nat ] do
53168: LD_ADDR_VAR 0 5
53172: PUSH
53173: LD_VAR 0 10
53177: PUSH
53178: LD_VAR 0 7
53182: ARRAY
53183: PUSH
53184: FOR_IN
53185: IFFALSE 53226
// if GetBWeapon ( i ) = j [ 1 ] then
53187: LD_VAR 0 4
53191: PPUSH
53192: CALL_OW 269
53196: PUSH
53197: LD_VAR 0 5
53201: PUSH
53202: LD_INT 1
53204: ARRAY
53205: EQUAL
53206: IFFALSE 53224
// begin weapon := j [ 2 ] ;
53208: LD_ADDR_VAR 0 8
53212: PUSH
53213: LD_VAR 0 5
53217: PUSH
53218: LD_INT 2
53220: ARRAY
53221: ST_TO_ADDR
// break ;
53222: GO 53226
// end ;
53224: GO 53184
53226: POP
53227: POP
// if not weapon then
53228: LD_VAR 0 8
53232: NOT
53233: IFFALSE 53237
// continue ;
53235: GO 53133
// for k in factories do
53237: LD_ADDR_VAR 0 6
53241: PUSH
53242: LD_VAR 0 2
53246: PUSH
53247: FOR_IN
53248: IFFALSE 53313
// begin weapons := AvailableWeaponList ( k ) ;
53250: LD_ADDR_VAR 0 9
53254: PUSH
53255: LD_VAR 0 6
53259: PPUSH
53260: CALL_OW 478
53264: ST_TO_ADDR
// if not weapons then
53265: LD_VAR 0 9
53269: NOT
53270: IFFALSE 53274
// continue ;
53272: GO 53247
// if weapon in weapons then
53274: LD_VAR 0 8
53278: PUSH
53279: LD_VAR 0 9
53283: IN
53284: IFFALSE 53311
// begin result := [ i , weapon ] ;
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: LD_VAR 0 4
53295: PUSH
53296: LD_VAR 0 8
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: ST_TO_ADDR
// exit ;
53305: POP
53306: POP
53307: POP
53308: POP
53309: GO 53319
// end ; end ;
53311: GO 53247
53313: POP
53314: POP
// end ;
53315: GO 53133
53317: POP
53318: POP
// end ;
53319: LD_VAR 0 3
53323: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53324: LD_INT 0
53326: PPUSH
// if not side or side > 8 then
53327: LD_VAR 0 3
53331: NOT
53332: PUSH
53333: LD_VAR 0 3
53337: PUSH
53338: LD_INT 8
53340: GREATER
53341: OR
53342: IFFALSE 53346
// exit ;
53344: GO 53405
// if not range then
53346: LD_VAR 0 4
53350: NOT
53351: IFFALSE 53362
// range := - 12 ;
53353: LD_ADDR_VAR 0 4
53357: PUSH
53358: LD_INT 12
53360: NEG
53361: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53362: LD_VAR 0 1
53366: PPUSH
53367: LD_VAR 0 2
53371: PPUSH
53372: LD_VAR 0 3
53376: PPUSH
53377: LD_VAR 0 4
53381: PPUSH
53382: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53386: LD_VAR 0 1
53390: PPUSH
53391: LD_VAR 0 2
53395: PPUSH
53396: LD_VAR 0 3
53400: PPUSH
53401: CALL_OW 331
// end ;
53405: LD_VAR 0 5
53409: RET
// export function Video ( mode ) ; begin
53410: LD_INT 0
53412: PPUSH
// ingame_video = mode ;
53413: LD_ADDR_OWVAR 52
53417: PUSH
53418: LD_VAR 0 1
53422: ST_TO_ADDR
// interface_hidden = mode ;
53423: LD_ADDR_OWVAR 54
53427: PUSH
53428: LD_VAR 0 1
53432: ST_TO_ADDR
// end ;
53433: LD_VAR 0 2
53437: RET
// export function Join ( array , element ) ; begin
53438: LD_INT 0
53440: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53441: LD_ADDR_VAR 0 3
53445: PUSH
53446: LD_VAR 0 1
53450: PPUSH
53451: LD_VAR 0 1
53455: PUSH
53456: LD_INT 1
53458: PLUS
53459: PPUSH
53460: LD_VAR 0 2
53464: PPUSH
53465: CALL_OW 1
53469: ST_TO_ADDR
// end ;
53470: LD_VAR 0 3
53474: RET
// export function JoinUnion ( array , element ) ; begin
53475: LD_INT 0
53477: PPUSH
// result := array union element ;
53478: LD_ADDR_VAR 0 3
53482: PUSH
53483: LD_VAR 0 1
53487: PUSH
53488: LD_VAR 0 2
53492: UNION
53493: ST_TO_ADDR
// end ;
53494: LD_VAR 0 3
53498: RET
// export function GetBehemoths ( side ) ; begin
53499: LD_INT 0
53501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53502: LD_ADDR_VAR 0 2
53506: PUSH
53507: LD_INT 22
53509: PUSH
53510: LD_VAR 0 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 31
53521: PUSH
53522: LD_INT 25
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PPUSH
53533: CALL_OW 69
53537: ST_TO_ADDR
// end ;
53538: LD_VAR 0 2
53542: RET
// export function Shuffle ( array ) ; var i , index ; begin
53543: LD_INT 0
53545: PPUSH
53546: PPUSH
53547: PPUSH
// result := [ ] ;
53548: LD_ADDR_VAR 0 2
53552: PUSH
53553: EMPTY
53554: ST_TO_ADDR
// if not array then
53555: LD_VAR 0 1
53559: NOT
53560: IFFALSE 53564
// exit ;
53562: GO 53663
// Randomize ;
53564: CALL_OW 10
// for i = array downto 1 do
53568: LD_ADDR_VAR 0 3
53572: PUSH
53573: DOUBLE
53574: LD_VAR 0 1
53578: INC
53579: ST_TO_ADDR
53580: LD_INT 1
53582: PUSH
53583: FOR_DOWNTO
53584: IFFALSE 53661
// begin index := rand ( 1 , array ) ;
53586: LD_ADDR_VAR 0 4
53590: PUSH
53591: LD_INT 1
53593: PPUSH
53594: LD_VAR 0 1
53598: PPUSH
53599: CALL_OW 12
53603: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53604: LD_ADDR_VAR 0 2
53608: PUSH
53609: LD_VAR 0 2
53613: PPUSH
53614: LD_VAR 0 2
53618: PUSH
53619: LD_INT 1
53621: PLUS
53622: PPUSH
53623: LD_VAR 0 1
53627: PUSH
53628: LD_VAR 0 4
53632: ARRAY
53633: PPUSH
53634: CALL_OW 2
53638: ST_TO_ADDR
// array := Delete ( array , index ) ;
53639: LD_ADDR_VAR 0 1
53643: PUSH
53644: LD_VAR 0 1
53648: PPUSH
53649: LD_VAR 0 4
53653: PPUSH
53654: CALL_OW 3
53658: ST_TO_ADDR
// end ;
53659: GO 53583
53661: POP
53662: POP
// end ;
53663: LD_VAR 0 2
53667: RET
// export function GetBaseMaterials ( base ) ; begin
53668: LD_INT 0
53670: PPUSH
// result := [ 0 , 0 , 0 ] ;
53671: LD_ADDR_VAR 0 2
53675: PUSH
53676: LD_INT 0
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// if not base then
53690: LD_VAR 0 1
53694: NOT
53695: IFFALSE 53699
// exit ;
53697: GO 53748
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53699: LD_ADDR_VAR 0 2
53703: PUSH
53704: LD_VAR 0 1
53708: PPUSH
53709: LD_INT 1
53711: PPUSH
53712: CALL_OW 275
53716: PUSH
53717: LD_VAR 0 1
53721: PPUSH
53722: LD_INT 2
53724: PPUSH
53725: CALL_OW 275
53729: PUSH
53730: LD_VAR 0 1
53734: PPUSH
53735: LD_INT 3
53737: PPUSH
53738: CALL_OW 275
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: LIST
53747: ST_TO_ADDR
// end ;
53748: LD_VAR 0 2
53752: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53753: LD_INT 0
53755: PPUSH
53756: PPUSH
// result := array ;
53757: LD_ADDR_VAR 0 3
53761: PUSH
53762: LD_VAR 0 1
53766: ST_TO_ADDR
// if size > 0 then
53767: LD_VAR 0 2
53771: PUSH
53772: LD_INT 0
53774: GREATER
53775: IFFALSE 53821
// for i := array downto size do
53777: LD_ADDR_VAR 0 4
53781: PUSH
53782: DOUBLE
53783: LD_VAR 0 1
53787: INC
53788: ST_TO_ADDR
53789: LD_VAR 0 2
53793: PUSH
53794: FOR_DOWNTO
53795: IFFALSE 53819
// result := Delete ( result , result ) ;
53797: LD_ADDR_VAR 0 3
53801: PUSH
53802: LD_VAR 0 3
53806: PPUSH
53807: LD_VAR 0 3
53811: PPUSH
53812: CALL_OW 3
53816: ST_TO_ADDR
53817: GO 53794
53819: POP
53820: POP
// end ;
53821: LD_VAR 0 3
53825: RET
// export function ComExit ( unit ) ; var tmp ; begin
53826: LD_INT 0
53828: PPUSH
53829: PPUSH
// if not IsInUnit ( unit ) then
53830: LD_VAR 0 1
53834: PPUSH
53835: CALL_OW 310
53839: NOT
53840: IFFALSE 53844
// exit ;
53842: GO 53904
// tmp := IsInUnit ( unit ) ;
53844: LD_ADDR_VAR 0 3
53848: PUSH
53849: LD_VAR 0 1
53853: PPUSH
53854: CALL_OW 310
53858: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53859: LD_VAR 0 3
53863: PPUSH
53864: CALL_OW 247
53868: PUSH
53869: LD_INT 2
53871: EQUAL
53872: IFFALSE 53885
// ComExitVehicle ( unit ) else
53874: LD_VAR 0 1
53878: PPUSH
53879: CALL_OW 121
53883: GO 53894
// ComExitBuilding ( unit ) ;
53885: LD_VAR 0 1
53889: PPUSH
53890: CALL_OW 122
// result := tmp ;
53894: LD_ADDR_VAR 0 2
53898: PUSH
53899: LD_VAR 0 3
53903: ST_TO_ADDR
// end ;
53904: LD_VAR 0 2
53908: RET
// export function ComExitAll ( units ) ; var i ; begin
53909: LD_INT 0
53911: PPUSH
53912: PPUSH
// if not units then
53913: LD_VAR 0 1
53917: NOT
53918: IFFALSE 53922
// exit ;
53920: GO 53948
// for i in units do
53922: LD_ADDR_VAR 0 3
53926: PUSH
53927: LD_VAR 0 1
53931: PUSH
53932: FOR_IN
53933: IFFALSE 53946
// ComExit ( i ) ;
53935: LD_VAR 0 3
53939: PPUSH
53940: CALL 53826 0 1
53944: GO 53932
53946: POP
53947: POP
// end ;
53948: LD_VAR 0 2
53952: RET
// export function ResetHc ; begin
53953: LD_INT 0
53955: PPUSH
// InitHc ;
53956: CALL_OW 19
// hc_importance := 0 ;
53960: LD_ADDR_OWVAR 32
53964: PUSH
53965: LD_INT 0
53967: ST_TO_ADDR
// end ;
53968: LD_VAR 0 1
53972: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53973: LD_INT 0
53975: PPUSH
53976: PPUSH
53977: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53978: LD_ADDR_VAR 0 6
53982: PUSH
53983: LD_VAR 0 1
53987: PUSH
53988: LD_VAR 0 3
53992: PLUS
53993: PUSH
53994: LD_INT 2
53996: DIV
53997: ST_TO_ADDR
// if _x < 0 then
53998: LD_VAR 0 6
54002: PUSH
54003: LD_INT 0
54005: LESS
54006: IFFALSE 54023
// _x := _x * - 1 ;
54008: LD_ADDR_VAR 0 6
54012: PUSH
54013: LD_VAR 0 6
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: MUL
54022: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54023: LD_ADDR_VAR 0 7
54027: PUSH
54028: LD_VAR 0 2
54032: PUSH
54033: LD_VAR 0 4
54037: PLUS
54038: PUSH
54039: LD_INT 2
54041: DIV
54042: ST_TO_ADDR
// if _y < 0 then
54043: LD_VAR 0 7
54047: PUSH
54048: LD_INT 0
54050: LESS
54051: IFFALSE 54068
// _y := _y * - 1 ;
54053: LD_ADDR_VAR 0 7
54057: PUSH
54058: LD_VAR 0 7
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: MUL
54067: ST_TO_ADDR
// result := [ _x , _y ] ;
54068: LD_ADDR_VAR 0 5
54072: PUSH
54073: LD_VAR 0 6
54077: PUSH
54078: LD_VAR 0 7
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// end ;
54087: LD_VAR 0 5
54091: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
// task := GetTaskList ( unit ) ;
54098: LD_ADDR_VAR 0 7
54102: PUSH
54103: LD_VAR 0 1
54107: PPUSH
54108: CALL_OW 437
54112: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54113: LD_VAR 0 7
54117: NOT
54118: PUSH
54119: LD_VAR 0 1
54123: PPUSH
54124: LD_VAR 0 2
54128: PPUSH
54129: CALL_OW 308
54133: NOT
54134: AND
54135: IFFALSE 54139
// exit ;
54137: GO 54257
// if IsInArea ( unit , area ) then
54139: LD_VAR 0 1
54143: PPUSH
54144: LD_VAR 0 2
54148: PPUSH
54149: CALL_OW 308
54153: IFFALSE 54171
// begin ComMoveToArea ( unit , goAway ) ;
54155: LD_VAR 0 1
54159: PPUSH
54160: LD_VAR 0 3
54164: PPUSH
54165: CALL_OW 113
// exit ;
54169: GO 54257
// end ; if task [ 1 ] [ 1 ] <> M then
54171: LD_VAR 0 7
54175: PUSH
54176: LD_INT 1
54178: ARRAY
54179: PUSH
54180: LD_INT 1
54182: ARRAY
54183: PUSH
54184: LD_STRING M
54186: NONEQUAL
54187: IFFALSE 54191
// exit ;
54189: GO 54257
// x := task [ 1 ] [ 2 ] ;
54191: LD_ADDR_VAR 0 5
54195: PUSH
54196: LD_VAR 0 7
54200: PUSH
54201: LD_INT 1
54203: ARRAY
54204: PUSH
54205: LD_INT 2
54207: ARRAY
54208: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54209: LD_ADDR_VAR 0 6
54213: PUSH
54214: LD_VAR 0 7
54218: PUSH
54219: LD_INT 1
54221: ARRAY
54222: PUSH
54223: LD_INT 3
54225: ARRAY
54226: ST_TO_ADDR
// if InArea ( x , y , area ) then
54227: LD_VAR 0 5
54231: PPUSH
54232: LD_VAR 0 6
54236: PPUSH
54237: LD_VAR 0 2
54241: PPUSH
54242: CALL_OW 309
54246: IFFALSE 54257
// ComStop ( unit ) ;
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 141
// end ;
54257: LD_VAR 0 4
54261: RET
// export function Abs ( value ) ; begin
54262: LD_INT 0
54264: PPUSH
// result := value ;
54265: LD_ADDR_VAR 0 2
54269: PUSH
54270: LD_VAR 0 1
54274: ST_TO_ADDR
// if value < 0 then
54275: LD_VAR 0 1
54279: PUSH
54280: LD_INT 0
54282: LESS
54283: IFFALSE 54300
// result := value * - 1 ;
54285: LD_ADDR_VAR 0 2
54289: PUSH
54290: LD_VAR 0 1
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: MUL
54299: ST_TO_ADDR
// end ;
54300: LD_VAR 0 2
54304: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
54309: PPUSH
54310: PPUSH
54311: PPUSH
54312: PPUSH
54313: PPUSH
54314: PPUSH
// if not unit or not building then
54315: LD_VAR 0 1
54319: NOT
54320: PUSH
54321: LD_VAR 0 2
54325: NOT
54326: OR
54327: IFFALSE 54331
// exit ;
54329: GO 54557
// x := GetX ( building ) ;
54331: LD_ADDR_VAR 0 4
54335: PUSH
54336: LD_VAR 0 2
54340: PPUSH
54341: CALL_OW 250
54345: ST_TO_ADDR
// y := GetY ( building ) ;
54346: LD_ADDR_VAR 0 6
54350: PUSH
54351: LD_VAR 0 2
54355: PPUSH
54356: CALL_OW 251
54360: ST_TO_ADDR
// d := GetDir ( building ) ;
54361: LD_ADDR_VAR 0 8
54365: PUSH
54366: LD_VAR 0 2
54370: PPUSH
54371: CALL_OW 254
54375: ST_TO_ADDR
// r := 4 ;
54376: LD_ADDR_VAR 0 9
54380: PUSH
54381: LD_INT 4
54383: ST_TO_ADDR
// for i := 1 to 5 do
54384: LD_ADDR_VAR 0 10
54388: PUSH
54389: DOUBLE
54390: LD_INT 1
54392: DEC
54393: ST_TO_ADDR
54394: LD_INT 5
54396: PUSH
54397: FOR_TO
54398: IFFALSE 54555
// begin _x := ShiftX ( x , d , r + i ) ;
54400: LD_ADDR_VAR 0 5
54404: PUSH
54405: LD_VAR 0 4
54409: PPUSH
54410: LD_VAR 0 8
54414: PPUSH
54415: LD_VAR 0 9
54419: PUSH
54420: LD_VAR 0 10
54424: PLUS
54425: PPUSH
54426: CALL_OW 272
54430: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54431: LD_ADDR_VAR 0 7
54435: PUSH
54436: LD_VAR 0 6
54440: PPUSH
54441: LD_VAR 0 8
54445: PPUSH
54446: LD_VAR 0 9
54450: PUSH
54451: LD_VAR 0 10
54455: PLUS
54456: PPUSH
54457: CALL_OW 273
54461: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54462: LD_VAR 0 5
54466: PPUSH
54467: LD_VAR 0 7
54471: PPUSH
54472: CALL_OW 488
54476: PUSH
54477: LD_VAR 0 5
54481: PPUSH
54482: LD_VAR 0 7
54486: PPUSH
54487: CALL_OW 428
54491: PPUSH
54492: CALL_OW 247
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 2
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: IN
54507: NOT
54508: AND
54509: IFFALSE 54553
// begin ComMoveXY ( unit , _x , _y ) ;
54511: LD_VAR 0 1
54515: PPUSH
54516: LD_VAR 0 5
54520: PPUSH
54521: LD_VAR 0 7
54525: PPUSH
54526: CALL_OW 111
// result := [ _x , _y ] ;
54530: LD_ADDR_VAR 0 3
54534: PUSH
54535: LD_VAR 0 5
54539: PUSH
54540: LD_VAR 0 7
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: ST_TO_ADDR
// exit ;
54549: POP
54550: POP
54551: GO 54557
// end ; end ;
54553: GO 54397
54555: POP
54556: POP
// end ;
54557: LD_VAR 0 3
54561: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54562: LD_INT 0
54564: PPUSH
54565: PPUSH
54566: PPUSH
// result := 0 ;
54567: LD_ADDR_VAR 0 3
54571: PUSH
54572: LD_INT 0
54574: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54575: LD_VAR 0 1
54579: PUSH
54580: LD_INT 0
54582: LESS
54583: PUSH
54584: LD_VAR 0 1
54588: PUSH
54589: LD_INT 8
54591: GREATER
54592: OR
54593: PUSH
54594: LD_VAR 0 2
54598: PUSH
54599: LD_INT 0
54601: LESS
54602: OR
54603: PUSH
54604: LD_VAR 0 2
54608: PUSH
54609: LD_INT 8
54611: GREATER
54612: OR
54613: IFFALSE 54617
// exit ;
54615: GO 54692
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54617: LD_ADDR_VAR 0 4
54621: PUSH
54622: LD_INT 22
54624: PUSH
54625: LD_VAR 0 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PPUSH
54634: CALL_OW 69
54638: PUSH
54639: FOR_IN
54640: IFFALSE 54690
// begin un := UnitShoot ( i ) ;
54642: LD_ADDR_VAR 0 5
54646: PUSH
54647: LD_VAR 0 4
54651: PPUSH
54652: CALL_OW 504
54656: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54657: LD_VAR 0 5
54661: PPUSH
54662: CALL_OW 255
54666: PUSH
54667: LD_VAR 0 1
54671: EQUAL
54672: IFFALSE 54688
// begin result := un ;
54674: LD_ADDR_VAR 0 3
54678: PUSH
54679: LD_VAR 0 5
54683: ST_TO_ADDR
// exit ;
54684: POP
54685: POP
54686: GO 54692
// end ; end ;
54688: GO 54639
54690: POP
54691: POP
// end ;
54692: LD_VAR 0 3
54696: RET
// export function GetCargoBay ( units ) ; begin
54697: LD_INT 0
54699: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54700: LD_ADDR_VAR 0 2
54704: PUSH
54705: LD_VAR 0 1
54709: PPUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 34
54715: PUSH
54716: LD_INT 12
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 34
54725: PUSH
54726: LD_INT 51
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 34
54735: PUSH
54736: LD_INT 32
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 34
54745: PUSH
54746: LD_EXP 108
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: PPUSH
54762: CALL_OW 72
54766: ST_TO_ADDR
// end ;
54767: LD_VAR 0 2
54771: RET
// export function Negate ( value ) ; begin
54772: LD_INT 0
54774: PPUSH
// result := not value ;
54775: LD_ADDR_VAR 0 2
54779: PUSH
54780: LD_VAR 0 1
54784: NOT
54785: ST_TO_ADDR
// end ;
54786: LD_VAR 0 2
54790: RET
// export function Inc ( value ) ; begin
54791: LD_INT 0
54793: PPUSH
// result := value + 1 ;
54794: LD_ADDR_VAR 0 2
54798: PUSH
54799: LD_VAR 0 1
54803: PUSH
54804: LD_INT 1
54806: PLUS
54807: ST_TO_ADDR
// end ;
54808: LD_VAR 0 2
54812: RET
// export function Dec ( value ) ; begin
54813: LD_INT 0
54815: PPUSH
// result := value - 1 ;
54816: LD_ADDR_VAR 0 2
54820: PUSH
54821: LD_VAR 0 1
54825: PUSH
54826: LD_INT 1
54828: MINUS
54829: ST_TO_ADDR
// end ;
54830: LD_VAR 0 2
54834: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54835: LD_INT 0
54837: PPUSH
54838: PPUSH
54839: PPUSH
54840: PPUSH
54841: PPUSH
54842: PPUSH
54843: PPUSH
54844: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54845: LD_VAR 0 1
54849: PPUSH
54850: LD_VAR 0 2
54854: PPUSH
54855: CALL_OW 488
54859: NOT
54860: PUSH
54861: LD_VAR 0 3
54865: PPUSH
54866: LD_VAR 0 4
54870: PPUSH
54871: CALL_OW 488
54875: NOT
54876: OR
54877: IFFALSE 54890
// begin result := - 1 ;
54879: LD_ADDR_VAR 0 5
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: ST_TO_ADDR
// exit ;
54888: GO 55125
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54890: LD_ADDR_VAR 0 12
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: LD_VAR 0 2
54904: PPUSH
54905: LD_VAR 0 3
54909: PPUSH
54910: LD_VAR 0 4
54914: PPUSH
54915: CALL 53973 0 4
54919: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54920: LD_ADDR_VAR 0 11
54924: PUSH
54925: LD_VAR 0 1
54929: PPUSH
54930: LD_VAR 0 2
54934: PPUSH
54935: LD_VAR 0 12
54939: PUSH
54940: LD_INT 1
54942: ARRAY
54943: PPUSH
54944: LD_VAR 0 12
54948: PUSH
54949: LD_INT 2
54951: ARRAY
54952: PPUSH
54953: CALL_OW 298
54957: ST_TO_ADDR
// distance := 9999 ;
54958: LD_ADDR_VAR 0 10
54962: PUSH
54963: LD_INT 9999
54965: ST_TO_ADDR
// for i := 0 to 5 do
54966: LD_ADDR_VAR 0 6
54970: PUSH
54971: DOUBLE
54972: LD_INT 0
54974: DEC
54975: ST_TO_ADDR
54976: LD_INT 5
54978: PUSH
54979: FOR_TO
54980: IFFALSE 55123
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54982: LD_ADDR_VAR 0 7
54986: PUSH
54987: LD_VAR 0 1
54991: PPUSH
54992: LD_VAR 0 6
54996: PPUSH
54997: LD_VAR 0 11
55001: PPUSH
55002: CALL_OW 272
55006: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55007: LD_ADDR_VAR 0 8
55011: PUSH
55012: LD_VAR 0 2
55016: PPUSH
55017: LD_VAR 0 6
55021: PPUSH
55022: LD_VAR 0 11
55026: PPUSH
55027: CALL_OW 273
55031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55032: LD_VAR 0 7
55036: PPUSH
55037: LD_VAR 0 8
55041: PPUSH
55042: CALL_OW 488
55046: NOT
55047: IFFALSE 55051
// continue ;
55049: GO 54979
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55051: LD_ADDR_VAR 0 9
55055: PUSH
55056: LD_VAR 0 12
55060: PUSH
55061: LD_INT 1
55063: ARRAY
55064: PPUSH
55065: LD_VAR 0 12
55069: PUSH
55070: LD_INT 2
55072: ARRAY
55073: PPUSH
55074: LD_VAR 0 7
55078: PPUSH
55079: LD_VAR 0 8
55083: PPUSH
55084: CALL_OW 298
55088: ST_TO_ADDR
// if tmp < distance then
55089: LD_VAR 0 9
55093: PUSH
55094: LD_VAR 0 10
55098: LESS
55099: IFFALSE 55121
// begin result := i ;
55101: LD_ADDR_VAR 0 5
55105: PUSH
55106: LD_VAR 0 6
55110: ST_TO_ADDR
// distance := tmp ;
55111: LD_ADDR_VAR 0 10
55115: PUSH
55116: LD_VAR 0 9
55120: ST_TO_ADDR
// end ; end ;
55121: GO 54979
55123: POP
55124: POP
// end ;
55125: LD_VAR 0 5
55129: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55130: LD_INT 0
55132: PPUSH
55133: PPUSH
// if not driver or not IsInUnit ( driver ) then
55134: LD_VAR 0 1
55138: NOT
55139: PUSH
55140: LD_VAR 0 1
55144: PPUSH
55145: CALL_OW 310
55149: NOT
55150: OR
55151: IFFALSE 55155
// exit ;
55153: GO 55245
// vehicle := IsInUnit ( driver ) ;
55155: LD_ADDR_VAR 0 3
55159: PUSH
55160: LD_VAR 0 1
55164: PPUSH
55165: CALL_OW 310
55169: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55170: LD_VAR 0 1
55174: PPUSH
55175: LD_STRING \
55177: PUSH
55178: LD_INT 0
55180: PUSH
55181: LD_INT 0
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: PUSH
55205: LD_STRING E
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_VAR 0 3
55218: PUSH
55219: LD_INT 0
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PPUSH
55241: CALL_OW 446
// end ;
55245: LD_VAR 0 2
55249: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55250: LD_INT 0
55252: PPUSH
55253: PPUSH
// if not driver or not IsInUnit ( driver ) then
55254: LD_VAR 0 1
55258: NOT
55259: PUSH
55260: LD_VAR 0 1
55264: PPUSH
55265: CALL_OW 310
55269: NOT
55270: OR
55271: IFFALSE 55275
// exit ;
55273: GO 55365
// vehicle := IsInUnit ( driver ) ;
55275: LD_ADDR_VAR 0 3
55279: PUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 310
55289: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55290: LD_VAR 0 1
55294: PPUSH
55295: LD_STRING \
55297: PUSH
55298: LD_INT 0
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: PUSH
55325: LD_STRING E
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_VAR 0 3
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PPUSH
55361: CALL_OW 447
// end ;
55365: LD_VAR 0 2
55369: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55370: LD_INT 0
55372: PPUSH
55373: PPUSH
55374: PPUSH
// tmp := [ ] ;
55375: LD_ADDR_VAR 0 5
55379: PUSH
55380: EMPTY
55381: ST_TO_ADDR
// for i in units do
55382: LD_ADDR_VAR 0 4
55386: PUSH
55387: LD_VAR 0 1
55391: PUSH
55392: FOR_IN
55393: IFFALSE 55431
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55395: LD_ADDR_VAR 0 5
55399: PUSH
55400: LD_VAR 0 5
55404: PPUSH
55405: LD_VAR 0 5
55409: PUSH
55410: LD_INT 1
55412: PLUS
55413: PPUSH
55414: LD_VAR 0 4
55418: PPUSH
55419: CALL_OW 256
55423: PPUSH
55424: CALL_OW 2
55428: ST_TO_ADDR
55429: GO 55392
55431: POP
55432: POP
// if not tmp then
55433: LD_VAR 0 5
55437: NOT
55438: IFFALSE 55442
// exit ;
55440: GO 55490
// if asc then
55442: LD_VAR 0 2
55446: IFFALSE 55470
// result := SortListByListAsc ( units , tmp ) else
55448: LD_ADDR_VAR 0 3
55452: PUSH
55453: LD_VAR 0 1
55457: PPUSH
55458: LD_VAR 0 5
55462: PPUSH
55463: CALL_OW 76
55467: ST_TO_ADDR
55468: GO 55490
// result := SortListByListDesc ( units , tmp ) ;
55470: LD_ADDR_VAR 0 3
55474: PUSH
55475: LD_VAR 0 1
55479: PPUSH
55480: LD_VAR 0 5
55484: PPUSH
55485: CALL_OW 77
55489: ST_TO_ADDR
// end ;
55490: LD_VAR 0 3
55494: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55495: LD_INT 0
55497: PPUSH
55498: PPUSH
// task := GetTaskList ( mech ) ;
55499: LD_ADDR_VAR 0 4
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 437
55513: ST_TO_ADDR
// if not task then
55514: LD_VAR 0 4
55518: NOT
55519: IFFALSE 55523
// exit ;
55521: GO 55565
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55523: LD_ADDR_VAR 0 3
55527: PUSH
55528: LD_VAR 0 4
55532: PUSH
55533: LD_INT 1
55535: ARRAY
55536: PUSH
55537: LD_INT 1
55539: ARRAY
55540: PUSH
55541: LD_STRING r
55543: EQUAL
55544: PUSH
55545: LD_VAR 0 4
55549: PUSH
55550: LD_INT 1
55552: ARRAY
55553: PUSH
55554: LD_INT 4
55556: ARRAY
55557: PUSH
55558: LD_VAR 0 2
55562: EQUAL
55563: AND
55564: ST_TO_ADDR
// end ;
55565: LD_VAR 0 3
55569: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55570: LD_INT 0
55572: PPUSH
// SetDir ( unit , d ) ;
55573: LD_VAR 0 1
55577: PPUSH
55578: LD_VAR 0 4
55582: PPUSH
55583: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55587: LD_VAR 0 1
55591: PPUSH
55592: LD_VAR 0 2
55596: PPUSH
55597: LD_VAR 0 3
55601: PPUSH
55602: LD_VAR 0 5
55606: PPUSH
55607: CALL_OW 48
// end ;
55611: LD_VAR 0 6
55615: RET
// export function ToNaturalNumber ( number ) ; begin
55616: LD_INT 0
55618: PPUSH
// result := number div 1 ;
55619: LD_ADDR_VAR 0 2
55623: PUSH
55624: LD_VAR 0 1
55628: PUSH
55629: LD_INT 1
55631: DIV
55632: ST_TO_ADDR
// if number < 0 then
55633: LD_VAR 0 1
55637: PUSH
55638: LD_INT 0
55640: LESS
55641: IFFALSE 55651
// result := 0 ;
55643: LD_ADDR_VAR 0 2
55647: PUSH
55648: LD_INT 0
55650: ST_TO_ADDR
// end ;
55651: LD_VAR 0 2
55655: RET
// export function SortByClass ( units , class ) ; var un ; begin
55656: LD_INT 0
55658: PPUSH
55659: PPUSH
// if not units or not class then
55660: LD_VAR 0 1
55664: NOT
55665: PUSH
55666: LD_VAR 0 2
55670: NOT
55671: OR
55672: IFFALSE 55676
// exit ;
55674: GO 55771
// result := [ ] ;
55676: LD_ADDR_VAR 0 3
55680: PUSH
55681: EMPTY
55682: ST_TO_ADDR
// for un in units do
55683: LD_ADDR_VAR 0 4
55687: PUSH
55688: LD_VAR 0 1
55692: PUSH
55693: FOR_IN
55694: IFFALSE 55769
// if GetClass ( un ) = class then
55696: LD_VAR 0 4
55700: PPUSH
55701: CALL_OW 257
55705: PUSH
55706: LD_VAR 0 2
55710: EQUAL
55711: IFFALSE 55738
// result := Insert ( result , 1 , un ) else
55713: LD_ADDR_VAR 0 3
55717: PUSH
55718: LD_VAR 0 3
55722: PPUSH
55723: LD_INT 1
55725: PPUSH
55726: LD_VAR 0 4
55730: PPUSH
55731: CALL_OW 2
55735: ST_TO_ADDR
55736: GO 55767
// result := Replace ( result , result + 1 , un ) ;
55738: LD_ADDR_VAR 0 3
55742: PUSH
55743: LD_VAR 0 3
55747: PPUSH
55748: LD_VAR 0 3
55752: PUSH
55753: LD_INT 1
55755: PLUS
55756: PPUSH
55757: LD_VAR 0 4
55761: PPUSH
55762: CALL_OW 1
55766: ST_TO_ADDR
55767: GO 55693
55769: POP
55770: POP
// end ;
55771: LD_VAR 0 3
55775: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55776: LD_INT 0
55778: PPUSH
55779: PPUSH
55780: PPUSH
55781: PPUSH
55782: PPUSH
55783: PPUSH
55784: PPUSH
// result := [ ] ;
55785: LD_ADDR_VAR 0 4
55789: PUSH
55790: EMPTY
55791: ST_TO_ADDR
// if x - r < 0 then
55792: LD_VAR 0 1
55796: PUSH
55797: LD_VAR 0 3
55801: MINUS
55802: PUSH
55803: LD_INT 0
55805: LESS
55806: IFFALSE 55818
// min_x := 0 else
55808: LD_ADDR_VAR 0 8
55812: PUSH
55813: LD_INT 0
55815: ST_TO_ADDR
55816: GO 55834
// min_x := x - r ;
55818: LD_ADDR_VAR 0 8
55822: PUSH
55823: LD_VAR 0 1
55827: PUSH
55828: LD_VAR 0 3
55832: MINUS
55833: ST_TO_ADDR
// if y - r < 0 then
55834: LD_VAR 0 2
55838: PUSH
55839: LD_VAR 0 3
55843: MINUS
55844: PUSH
55845: LD_INT 0
55847: LESS
55848: IFFALSE 55860
// min_y := 0 else
55850: LD_ADDR_VAR 0 7
55854: PUSH
55855: LD_INT 0
55857: ST_TO_ADDR
55858: GO 55876
// min_y := y - r ;
55860: LD_ADDR_VAR 0 7
55864: PUSH
55865: LD_VAR 0 2
55869: PUSH
55870: LD_VAR 0 3
55874: MINUS
55875: ST_TO_ADDR
// max_x := x + r ;
55876: LD_ADDR_VAR 0 9
55880: PUSH
55881: LD_VAR 0 1
55885: PUSH
55886: LD_VAR 0 3
55890: PLUS
55891: ST_TO_ADDR
// max_y := y + r ;
55892: LD_ADDR_VAR 0 10
55896: PUSH
55897: LD_VAR 0 2
55901: PUSH
55902: LD_VAR 0 3
55906: PLUS
55907: ST_TO_ADDR
// for _x = min_x to max_x do
55908: LD_ADDR_VAR 0 5
55912: PUSH
55913: DOUBLE
55914: LD_VAR 0 8
55918: DEC
55919: ST_TO_ADDR
55920: LD_VAR 0 9
55924: PUSH
55925: FOR_TO
55926: IFFALSE 56027
// for _y = min_y to max_y do
55928: LD_ADDR_VAR 0 6
55932: PUSH
55933: DOUBLE
55934: LD_VAR 0 7
55938: DEC
55939: ST_TO_ADDR
55940: LD_VAR 0 10
55944: PUSH
55945: FOR_TO
55946: IFFALSE 56023
// begin if not ValidHex ( _x , _y ) then
55948: LD_VAR 0 5
55952: PPUSH
55953: LD_VAR 0 6
55957: PPUSH
55958: CALL_OW 488
55962: NOT
55963: IFFALSE 55967
// continue ;
55965: GO 55945
// if GetResourceTypeXY ( _x , _y ) then
55967: LD_VAR 0 5
55971: PPUSH
55972: LD_VAR 0 6
55976: PPUSH
55977: CALL_OW 283
55981: IFFALSE 56021
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55983: LD_ADDR_VAR 0 4
55987: PUSH
55988: LD_VAR 0 4
55992: PPUSH
55993: LD_VAR 0 4
55997: PUSH
55998: LD_INT 1
56000: PLUS
56001: PPUSH
56002: LD_VAR 0 5
56006: PUSH
56007: LD_VAR 0 6
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PPUSH
56016: CALL_OW 1
56020: ST_TO_ADDR
// end ;
56021: GO 55945
56023: POP
56024: POP
56025: GO 55925
56027: POP
56028: POP
// end ;
56029: LD_VAR 0 4
56033: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56034: LD_INT 0
56036: PPUSH
56037: PPUSH
56038: PPUSH
56039: PPUSH
56040: PPUSH
56041: PPUSH
56042: PPUSH
56043: PPUSH
// if not units then
56044: LD_VAR 0 1
56048: NOT
56049: IFFALSE 56053
// exit ;
56051: GO 56478
// result := UnitFilter ( units , [ f_ok ] ) ;
56053: LD_ADDR_VAR 0 3
56057: PUSH
56058: LD_VAR 0 1
56062: PPUSH
56063: LD_INT 50
56065: PUSH
56066: EMPTY
56067: LIST
56068: PPUSH
56069: CALL_OW 72
56073: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56074: LD_ADDR_VAR 0 8
56078: PUSH
56079: LD_VAR 0 1
56083: PUSH
56084: LD_INT 1
56086: ARRAY
56087: PPUSH
56088: CALL_OW 255
56092: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
56093: LD_ADDR_VAR 0 10
56097: PUSH
56098: LD_INT 29
56100: PUSH
56101: LD_EXP 111
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: ST_TO_ADDR
// if not result then
56110: LD_VAR 0 3
56114: NOT
56115: IFFALSE 56119
// exit ;
56117: GO 56478
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56119: LD_ADDR_VAR 0 5
56123: PUSH
56124: LD_INT 81
56126: PUSH
56127: LD_VAR 0 8
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PPUSH
56136: CALL_OW 69
56140: ST_TO_ADDR
// for i in result do
56141: LD_ADDR_VAR 0 4
56145: PUSH
56146: LD_VAR 0 3
56150: PUSH
56151: FOR_IN
56152: IFFALSE 56476
// begin tag := GetTag ( i ) + 1 ;
56154: LD_ADDR_VAR 0 9
56158: PUSH
56159: LD_VAR 0 4
56163: PPUSH
56164: CALL_OW 110
56168: PUSH
56169: LD_INT 1
56171: PLUS
56172: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56173: LD_ADDR_VAR 0 7
56177: PUSH
56178: LD_VAR 0 4
56182: PPUSH
56183: CALL_OW 250
56187: PPUSH
56188: LD_VAR 0 4
56192: PPUSH
56193: CALL_OW 251
56197: PPUSH
56198: LD_INT 6
56200: PPUSH
56201: CALL 55776 0 3
56205: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56206: LD_VAR 0 7
56210: PUSH
56211: LD_VAR 0 4
56215: PPUSH
56216: CALL_OW 264
56220: PUSH
56221: LD_VAR 0 10
56225: IN
56226: NOT
56227: AND
56228: IFFALSE 56267
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56230: LD_VAR 0 4
56234: PPUSH
56235: LD_VAR 0 7
56239: PUSH
56240: LD_INT 1
56242: ARRAY
56243: PUSH
56244: LD_INT 1
56246: ARRAY
56247: PPUSH
56248: LD_VAR 0 7
56252: PUSH
56253: LD_INT 1
56255: ARRAY
56256: PUSH
56257: LD_INT 2
56259: ARRAY
56260: PPUSH
56261: CALL_OW 116
56265: GO 56474
// if path > tag then
56267: LD_VAR 0 2
56271: PUSH
56272: LD_VAR 0 9
56276: GREATER
56277: IFFALSE 56444
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
56279: LD_ADDR_VAR 0 6
56283: PUSH
56284: LD_VAR 0 5
56288: PPUSH
56289: LD_INT 91
56291: PUSH
56292: LD_VAR 0 4
56296: PUSH
56297: LD_INT 12
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: PPUSH
56305: CALL_OW 72
56309: ST_TO_ADDR
// if nearEnemy then
56310: LD_VAR 0 6
56314: IFFALSE 56342
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56316: LD_VAR 0 4
56320: PPUSH
56321: LD_VAR 0 6
56325: PPUSH
56326: LD_VAR 0 4
56330: PPUSH
56331: CALL_OW 74
56335: PPUSH
56336: CALL_OW 115
56340: GO 56442
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56342: LD_VAR 0 4
56346: PPUSH
56347: LD_VAR 0 2
56351: PUSH
56352: LD_VAR 0 9
56356: ARRAY
56357: PUSH
56358: LD_INT 1
56360: ARRAY
56361: PPUSH
56362: LD_VAR 0 2
56366: PUSH
56367: LD_VAR 0 9
56371: ARRAY
56372: PUSH
56373: LD_INT 2
56375: ARRAY
56376: PPUSH
56377: CALL_OW 297
56381: PUSH
56382: LD_INT 6
56384: GREATER
56385: IFFALSE 56428
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56387: LD_VAR 0 4
56391: PPUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_VAR 0 9
56401: ARRAY
56402: PUSH
56403: LD_INT 1
56405: ARRAY
56406: PPUSH
56407: LD_VAR 0 2
56411: PUSH
56412: LD_VAR 0 9
56416: ARRAY
56417: PUSH
56418: LD_INT 2
56420: ARRAY
56421: PPUSH
56422: CALL_OW 114
56426: GO 56442
// SetTag ( i , tag ) ;
56428: LD_VAR 0 4
56432: PPUSH
56433: LD_VAR 0 9
56437: PPUSH
56438: CALL_OW 109
// end else
56442: GO 56474
// if enemy then
56444: LD_VAR 0 5
56448: IFFALSE 56474
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56450: LD_VAR 0 4
56454: PPUSH
56455: LD_VAR 0 5
56459: PPUSH
56460: LD_VAR 0 4
56464: PPUSH
56465: CALL_OW 74
56469: PPUSH
56470: CALL_OW 115
// end ;
56474: GO 56151
56476: POP
56477: POP
// end ;
56478: LD_VAR 0 3
56482: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56483: LD_INT 0
56485: PPUSH
56486: PPUSH
56487: PPUSH
// if not unit or IsInUnit ( unit ) then
56488: LD_VAR 0 1
56492: NOT
56493: PUSH
56494: LD_VAR 0 1
56498: PPUSH
56499: CALL_OW 310
56503: OR
56504: IFFALSE 56508
// exit ;
56506: GO 56599
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56508: LD_ADDR_VAR 0 4
56512: PUSH
56513: LD_VAR 0 1
56517: PPUSH
56518: CALL_OW 250
56522: PPUSH
56523: LD_VAR 0 2
56527: PPUSH
56528: LD_INT 1
56530: PPUSH
56531: CALL_OW 272
56535: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56536: LD_ADDR_VAR 0 5
56540: PUSH
56541: LD_VAR 0 1
56545: PPUSH
56546: CALL_OW 251
56550: PPUSH
56551: LD_VAR 0 2
56555: PPUSH
56556: LD_INT 1
56558: PPUSH
56559: CALL_OW 273
56563: ST_TO_ADDR
// if ValidHex ( x , y ) then
56564: LD_VAR 0 4
56568: PPUSH
56569: LD_VAR 0 5
56573: PPUSH
56574: CALL_OW 488
56578: IFFALSE 56599
// ComTurnXY ( unit , x , y ) ;
56580: LD_VAR 0 1
56584: PPUSH
56585: LD_VAR 0 4
56589: PPUSH
56590: LD_VAR 0 5
56594: PPUSH
56595: CALL_OW 118
// end ;
56599: LD_VAR 0 3
56603: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56604: LD_INT 0
56606: PPUSH
56607: PPUSH
// result := false ;
56608: LD_ADDR_VAR 0 3
56612: PUSH
56613: LD_INT 0
56615: ST_TO_ADDR
// if not units then
56616: LD_VAR 0 2
56620: NOT
56621: IFFALSE 56625
// exit ;
56623: GO 56670
// for i in units do
56625: LD_ADDR_VAR 0 4
56629: PUSH
56630: LD_VAR 0 2
56634: PUSH
56635: FOR_IN
56636: IFFALSE 56668
// if See ( side , i ) then
56638: LD_VAR 0 1
56642: PPUSH
56643: LD_VAR 0 4
56647: PPUSH
56648: CALL_OW 292
56652: IFFALSE 56666
// begin result := true ;
56654: LD_ADDR_VAR 0 3
56658: PUSH
56659: LD_INT 1
56661: ST_TO_ADDR
// exit ;
56662: POP
56663: POP
56664: GO 56670
// end ;
56666: GO 56635
56668: POP
56669: POP
// end ;
56670: LD_VAR 0 3
56674: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56675: LD_INT 0
56677: PPUSH
56678: PPUSH
56679: PPUSH
56680: PPUSH
// if not unit or not points then
56681: LD_VAR 0 1
56685: NOT
56686: PUSH
56687: LD_VAR 0 2
56691: NOT
56692: OR
56693: IFFALSE 56697
// exit ;
56695: GO 56787
// dist := 99999 ;
56697: LD_ADDR_VAR 0 5
56701: PUSH
56702: LD_INT 99999
56704: ST_TO_ADDR
// for i in points do
56705: LD_ADDR_VAR 0 4
56709: PUSH
56710: LD_VAR 0 2
56714: PUSH
56715: FOR_IN
56716: IFFALSE 56785
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56718: LD_ADDR_VAR 0 6
56722: PUSH
56723: LD_VAR 0 1
56727: PPUSH
56728: LD_VAR 0 4
56732: PUSH
56733: LD_INT 1
56735: ARRAY
56736: PPUSH
56737: LD_VAR 0 4
56741: PUSH
56742: LD_INT 2
56744: ARRAY
56745: PPUSH
56746: CALL_OW 297
56750: ST_TO_ADDR
// if tmpDist < dist then
56751: LD_VAR 0 6
56755: PUSH
56756: LD_VAR 0 5
56760: LESS
56761: IFFALSE 56783
// begin result := i ;
56763: LD_ADDR_VAR 0 3
56767: PUSH
56768: LD_VAR 0 4
56772: ST_TO_ADDR
// dist := tmpDist ;
56773: LD_ADDR_VAR 0 5
56777: PUSH
56778: LD_VAR 0 6
56782: ST_TO_ADDR
// end ; end ;
56783: GO 56715
56785: POP
56786: POP
// end ; end_of_file
56787: LD_VAR 0 3
56791: RET
// every 0 0$1 do
56792: GO 56794
56794: DISABLE
// begin enable ;
56795: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
56796: LD_STRING updateTimer(
56798: PUSH
56799: LD_OWVAR 1
56803: STR
56804: PUSH
56805: LD_STRING );
56807: STR
56808: PPUSH
56809: CALL_OW 559
// end ;
56813: END
// export function SOS_MapStart ( ) ; begin
56814: LD_INT 0
56816: PPUSH
// if streamModeActive then
56817: LD_EXP 49
56821: IFFALSE 56830
// DefineStreamItems ( true ) ;
56823: LD_INT 1
56825: PPUSH
56826: CALL 58480 0 1
// UpdateFactoryWaypoints ( ) ;
56830: CALL 72439 0 0
// end ;
56834: LD_VAR 0 1
56838: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56839: LD_INT 0
56841: PPUSH
// if p2 = 100 then
56842: LD_VAR 0 2
56846: PUSH
56847: LD_INT 100
56849: EQUAL
56850: IFFALSE 57853
// begin if not StreamModeActive then
56852: LD_EXP 49
56856: NOT
56857: IFFALSE 56867
// StreamModeActive := true ;
56859: LD_ADDR_EXP 49
56863: PUSH
56864: LD_INT 1
56866: ST_TO_ADDR
// if p3 = 0 then
56867: LD_VAR 0 3
56871: PUSH
56872: LD_INT 0
56874: EQUAL
56875: IFFALSE 56881
// InitStreamMode ;
56877: CALL 58016 0 0
// if p3 = 1 then
56881: LD_VAR 0 3
56885: PUSH
56886: LD_INT 1
56888: EQUAL
56889: IFFALSE 56899
// sRocket := true ;
56891: LD_ADDR_EXP 54
56895: PUSH
56896: LD_INT 1
56898: ST_TO_ADDR
// if p3 = 2 then
56899: LD_VAR 0 3
56903: PUSH
56904: LD_INT 2
56906: EQUAL
56907: IFFALSE 56917
// sSpeed := true ;
56909: LD_ADDR_EXP 53
56913: PUSH
56914: LD_INT 1
56916: ST_TO_ADDR
// if p3 = 3 then
56917: LD_VAR 0 3
56921: PUSH
56922: LD_INT 3
56924: EQUAL
56925: IFFALSE 56935
// sEngine := true ;
56927: LD_ADDR_EXP 55
56931: PUSH
56932: LD_INT 1
56934: ST_TO_ADDR
// if p3 = 4 then
56935: LD_VAR 0 3
56939: PUSH
56940: LD_INT 4
56942: EQUAL
56943: IFFALSE 56953
// sSpec := true ;
56945: LD_ADDR_EXP 52
56949: PUSH
56950: LD_INT 1
56952: ST_TO_ADDR
// if p3 = 5 then
56953: LD_VAR 0 3
56957: PUSH
56958: LD_INT 5
56960: EQUAL
56961: IFFALSE 56971
// sLevel := true ;
56963: LD_ADDR_EXP 56
56967: PUSH
56968: LD_INT 1
56970: ST_TO_ADDR
// if p3 = 6 then
56971: LD_VAR 0 3
56975: PUSH
56976: LD_INT 6
56978: EQUAL
56979: IFFALSE 56989
// sArmoury := true ;
56981: LD_ADDR_EXP 57
56985: PUSH
56986: LD_INT 1
56988: ST_TO_ADDR
// if p3 = 7 then
56989: LD_VAR 0 3
56993: PUSH
56994: LD_INT 7
56996: EQUAL
56997: IFFALSE 57007
// sRadar := true ;
56999: LD_ADDR_EXP 58
57003: PUSH
57004: LD_INT 1
57006: ST_TO_ADDR
// if p3 = 8 then
57007: LD_VAR 0 3
57011: PUSH
57012: LD_INT 8
57014: EQUAL
57015: IFFALSE 57025
// sBunker := true ;
57017: LD_ADDR_EXP 59
57021: PUSH
57022: LD_INT 1
57024: ST_TO_ADDR
// if p3 = 9 then
57025: LD_VAR 0 3
57029: PUSH
57030: LD_INT 9
57032: EQUAL
57033: IFFALSE 57043
// sHack := true ;
57035: LD_ADDR_EXP 60
57039: PUSH
57040: LD_INT 1
57042: ST_TO_ADDR
// if p3 = 10 then
57043: LD_VAR 0 3
57047: PUSH
57048: LD_INT 10
57050: EQUAL
57051: IFFALSE 57061
// sFire := true ;
57053: LD_ADDR_EXP 61
57057: PUSH
57058: LD_INT 1
57060: ST_TO_ADDR
// if p3 = 11 then
57061: LD_VAR 0 3
57065: PUSH
57066: LD_INT 11
57068: EQUAL
57069: IFFALSE 57079
// sRefresh := true ;
57071: LD_ADDR_EXP 62
57075: PUSH
57076: LD_INT 1
57078: ST_TO_ADDR
// if p3 = 12 then
57079: LD_VAR 0 3
57083: PUSH
57084: LD_INT 12
57086: EQUAL
57087: IFFALSE 57097
// sExp := true ;
57089: LD_ADDR_EXP 63
57093: PUSH
57094: LD_INT 1
57096: ST_TO_ADDR
// if p3 = 13 then
57097: LD_VAR 0 3
57101: PUSH
57102: LD_INT 13
57104: EQUAL
57105: IFFALSE 57115
// sDepot := true ;
57107: LD_ADDR_EXP 64
57111: PUSH
57112: LD_INT 1
57114: ST_TO_ADDR
// if p3 = 14 then
57115: LD_VAR 0 3
57119: PUSH
57120: LD_INT 14
57122: EQUAL
57123: IFFALSE 57133
// sFlag := true ;
57125: LD_ADDR_EXP 65
57129: PUSH
57130: LD_INT 1
57132: ST_TO_ADDR
// if p3 = 15 then
57133: LD_VAR 0 3
57137: PUSH
57138: LD_INT 15
57140: EQUAL
57141: IFFALSE 57151
// sKamikadze := true ;
57143: LD_ADDR_EXP 73
57147: PUSH
57148: LD_INT 1
57150: ST_TO_ADDR
// if p3 = 16 then
57151: LD_VAR 0 3
57155: PUSH
57156: LD_INT 16
57158: EQUAL
57159: IFFALSE 57169
// sTroll := true ;
57161: LD_ADDR_EXP 74
57165: PUSH
57166: LD_INT 1
57168: ST_TO_ADDR
// if p3 = 17 then
57169: LD_VAR 0 3
57173: PUSH
57174: LD_INT 17
57176: EQUAL
57177: IFFALSE 57187
// sSlow := true ;
57179: LD_ADDR_EXP 75
57183: PUSH
57184: LD_INT 1
57186: ST_TO_ADDR
// if p3 = 18 then
57187: LD_VAR 0 3
57191: PUSH
57192: LD_INT 18
57194: EQUAL
57195: IFFALSE 57205
// sLack := true ;
57197: LD_ADDR_EXP 76
57201: PUSH
57202: LD_INT 1
57204: ST_TO_ADDR
// if p3 = 19 then
57205: LD_VAR 0 3
57209: PUSH
57210: LD_INT 19
57212: EQUAL
57213: IFFALSE 57223
// sTank := true ;
57215: LD_ADDR_EXP 78
57219: PUSH
57220: LD_INT 1
57222: ST_TO_ADDR
// if p3 = 20 then
57223: LD_VAR 0 3
57227: PUSH
57228: LD_INT 20
57230: EQUAL
57231: IFFALSE 57241
// sRemote := true ;
57233: LD_ADDR_EXP 79
57237: PUSH
57238: LD_INT 1
57240: ST_TO_ADDR
// if p3 = 21 then
57241: LD_VAR 0 3
57245: PUSH
57246: LD_INT 21
57248: EQUAL
57249: IFFALSE 57259
// sPowell := true ;
57251: LD_ADDR_EXP 80
57255: PUSH
57256: LD_INT 1
57258: ST_TO_ADDR
// if p3 = 22 then
57259: LD_VAR 0 3
57263: PUSH
57264: LD_INT 22
57266: EQUAL
57267: IFFALSE 57277
// sTeleport := true ;
57269: LD_ADDR_EXP 83
57273: PUSH
57274: LD_INT 1
57276: ST_TO_ADDR
// if p3 = 23 then
57277: LD_VAR 0 3
57281: PUSH
57282: LD_INT 23
57284: EQUAL
57285: IFFALSE 57295
// sOilTower := true ;
57287: LD_ADDR_EXP 85
57291: PUSH
57292: LD_INT 1
57294: ST_TO_ADDR
// if p3 = 24 then
57295: LD_VAR 0 3
57299: PUSH
57300: LD_INT 24
57302: EQUAL
57303: IFFALSE 57313
// sShovel := true ;
57305: LD_ADDR_EXP 86
57309: PUSH
57310: LD_INT 1
57312: ST_TO_ADDR
// if p3 = 25 then
57313: LD_VAR 0 3
57317: PUSH
57318: LD_INT 25
57320: EQUAL
57321: IFFALSE 57331
// sSheik := true ;
57323: LD_ADDR_EXP 87
57327: PUSH
57328: LD_INT 1
57330: ST_TO_ADDR
// if p3 = 26 then
57331: LD_VAR 0 3
57335: PUSH
57336: LD_INT 26
57338: EQUAL
57339: IFFALSE 57349
// sEarthquake := true ;
57341: LD_ADDR_EXP 89
57345: PUSH
57346: LD_INT 1
57348: ST_TO_ADDR
// if p3 = 27 then
57349: LD_VAR 0 3
57353: PUSH
57354: LD_INT 27
57356: EQUAL
57357: IFFALSE 57367
// sAI := true ;
57359: LD_ADDR_EXP 90
57363: PUSH
57364: LD_INT 1
57366: ST_TO_ADDR
// if p3 = 28 then
57367: LD_VAR 0 3
57371: PUSH
57372: LD_INT 28
57374: EQUAL
57375: IFFALSE 57385
// sCargo := true ;
57377: LD_ADDR_EXP 93
57381: PUSH
57382: LD_INT 1
57384: ST_TO_ADDR
// if p3 = 29 then
57385: LD_VAR 0 3
57389: PUSH
57390: LD_INT 29
57392: EQUAL
57393: IFFALSE 57403
// sDLaser := true ;
57395: LD_ADDR_EXP 94
57399: PUSH
57400: LD_INT 1
57402: ST_TO_ADDR
// if p3 = 30 then
57403: LD_VAR 0 3
57407: PUSH
57408: LD_INT 30
57410: EQUAL
57411: IFFALSE 57421
// sExchange := true ;
57413: LD_ADDR_EXP 95
57417: PUSH
57418: LD_INT 1
57420: ST_TO_ADDR
// if p3 = 31 then
57421: LD_VAR 0 3
57425: PUSH
57426: LD_INT 31
57428: EQUAL
57429: IFFALSE 57439
// sFac := true ;
57431: LD_ADDR_EXP 96
57435: PUSH
57436: LD_INT 1
57438: ST_TO_ADDR
// if p3 = 32 then
57439: LD_VAR 0 3
57443: PUSH
57444: LD_INT 32
57446: EQUAL
57447: IFFALSE 57457
// sPower := true ;
57449: LD_ADDR_EXP 97
57453: PUSH
57454: LD_INT 1
57456: ST_TO_ADDR
// if p3 = 33 then
57457: LD_VAR 0 3
57461: PUSH
57462: LD_INT 33
57464: EQUAL
57465: IFFALSE 57475
// sRandom := true ;
57467: LD_ADDR_EXP 98
57471: PUSH
57472: LD_INT 1
57474: ST_TO_ADDR
// if p3 = 34 then
57475: LD_VAR 0 3
57479: PUSH
57480: LD_INT 34
57482: EQUAL
57483: IFFALSE 57493
// sShield := true ;
57485: LD_ADDR_EXP 99
57489: PUSH
57490: LD_INT 1
57492: ST_TO_ADDR
// if p3 = 35 then
57493: LD_VAR 0 3
57497: PUSH
57498: LD_INT 35
57500: EQUAL
57501: IFFALSE 57511
// sTime := true ;
57503: LD_ADDR_EXP 100
57507: PUSH
57508: LD_INT 1
57510: ST_TO_ADDR
// if p3 = 36 then
57511: LD_VAR 0 3
57515: PUSH
57516: LD_INT 36
57518: EQUAL
57519: IFFALSE 57529
// sTools := true ;
57521: LD_ADDR_EXP 101
57525: PUSH
57526: LD_INT 1
57528: ST_TO_ADDR
// if p3 = 101 then
57529: LD_VAR 0 3
57533: PUSH
57534: LD_INT 101
57536: EQUAL
57537: IFFALSE 57547
// sSold := true ;
57539: LD_ADDR_EXP 66
57543: PUSH
57544: LD_INT 1
57546: ST_TO_ADDR
// if p3 = 102 then
57547: LD_VAR 0 3
57551: PUSH
57552: LD_INT 102
57554: EQUAL
57555: IFFALSE 57565
// sDiff := true ;
57557: LD_ADDR_EXP 67
57561: PUSH
57562: LD_INT 1
57564: ST_TO_ADDR
// if p3 = 103 then
57565: LD_VAR 0 3
57569: PUSH
57570: LD_INT 103
57572: EQUAL
57573: IFFALSE 57583
// sFog := true ;
57575: LD_ADDR_EXP 70
57579: PUSH
57580: LD_INT 1
57582: ST_TO_ADDR
// if p3 = 104 then
57583: LD_VAR 0 3
57587: PUSH
57588: LD_INT 104
57590: EQUAL
57591: IFFALSE 57601
// sReset := true ;
57593: LD_ADDR_EXP 71
57597: PUSH
57598: LD_INT 1
57600: ST_TO_ADDR
// if p3 = 105 then
57601: LD_VAR 0 3
57605: PUSH
57606: LD_INT 105
57608: EQUAL
57609: IFFALSE 57619
// sSun := true ;
57611: LD_ADDR_EXP 72
57615: PUSH
57616: LD_INT 1
57618: ST_TO_ADDR
// if p3 = 106 then
57619: LD_VAR 0 3
57623: PUSH
57624: LD_INT 106
57626: EQUAL
57627: IFFALSE 57637
// sTiger := true ;
57629: LD_ADDR_EXP 68
57633: PUSH
57634: LD_INT 1
57636: ST_TO_ADDR
// if p3 = 107 then
57637: LD_VAR 0 3
57641: PUSH
57642: LD_INT 107
57644: EQUAL
57645: IFFALSE 57655
// sBomb := true ;
57647: LD_ADDR_EXP 69
57651: PUSH
57652: LD_INT 1
57654: ST_TO_ADDR
// if p3 = 108 then
57655: LD_VAR 0 3
57659: PUSH
57660: LD_INT 108
57662: EQUAL
57663: IFFALSE 57673
// sWound := true ;
57665: LD_ADDR_EXP 77
57669: PUSH
57670: LD_INT 1
57672: ST_TO_ADDR
// if p3 = 109 then
57673: LD_VAR 0 3
57677: PUSH
57678: LD_INT 109
57680: EQUAL
57681: IFFALSE 57691
// sBetray := true ;
57683: LD_ADDR_EXP 81
57687: PUSH
57688: LD_INT 1
57690: ST_TO_ADDR
// if p3 = 110 then
57691: LD_VAR 0 3
57695: PUSH
57696: LD_INT 110
57698: EQUAL
57699: IFFALSE 57709
// sContamin := true ;
57701: LD_ADDR_EXP 82
57705: PUSH
57706: LD_INT 1
57708: ST_TO_ADDR
// if p3 = 111 then
57709: LD_VAR 0 3
57713: PUSH
57714: LD_INT 111
57716: EQUAL
57717: IFFALSE 57727
// sOil := true ;
57719: LD_ADDR_EXP 84
57723: PUSH
57724: LD_INT 1
57726: ST_TO_ADDR
// if p3 = 112 then
57727: LD_VAR 0 3
57731: PUSH
57732: LD_INT 112
57734: EQUAL
57735: IFFALSE 57745
// sStu := true ;
57737: LD_ADDR_EXP 88
57741: PUSH
57742: LD_INT 1
57744: ST_TO_ADDR
// if p3 = 113 then
57745: LD_VAR 0 3
57749: PUSH
57750: LD_INT 113
57752: EQUAL
57753: IFFALSE 57763
// sBazooka := true ;
57755: LD_ADDR_EXP 91
57759: PUSH
57760: LD_INT 1
57762: ST_TO_ADDR
// if p3 = 114 then
57763: LD_VAR 0 3
57767: PUSH
57768: LD_INT 114
57770: EQUAL
57771: IFFALSE 57781
// sMortar := true ;
57773: LD_ADDR_EXP 92
57777: PUSH
57778: LD_INT 1
57780: ST_TO_ADDR
// if p3 = 115 then
57781: LD_VAR 0 3
57785: PUSH
57786: LD_INT 115
57788: EQUAL
57789: IFFALSE 57799
// sRanger := true ;
57791: LD_ADDR_EXP 102
57795: PUSH
57796: LD_INT 1
57798: ST_TO_ADDR
// if p3 = 116 then
57799: LD_VAR 0 3
57803: PUSH
57804: LD_INT 116
57806: EQUAL
57807: IFFALSE 57817
// sComputer := true ;
57809: LD_ADDR_EXP 103
57813: PUSH
57814: LD_INT 1
57816: ST_TO_ADDR
// if p3 = 117 then
57817: LD_VAR 0 3
57821: PUSH
57822: LD_INT 117
57824: EQUAL
57825: IFFALSE 57835
// s30 := true ;
57827: LD_ADDR_EXP 104
57831: PUSH
57832: LD_INT 1
57834: ST_TO_ADDR
// if p3 = 118 then
57835: LD_VAR 0 3
57839: PUSH
57840: LD_INT 118
57842: EQUAL
57843: IFFALSE 57853
// s60 := true ;
57845: LD_ADDR_EXP 105
57849: PUSH
57850: LD_INT 1
57852: ST_TO_ADDR
// end ; if p2 = 101 then
57853: LD_VAR 0 2
57857: PUSH
57858: LD_INT 101
57860: EQUAL
57861: IFFALSE 57989
// begin case p3 of 1 :
57863: LD_VAR 0 3
57867: PUSH
57868: LD_INT 1
57870: DOUBLE
57871: EQUAL
57872: IFTRUE 57876
57874: GO 57883
57876: POP
// hHackUnlimitedResources ; 2 :
57877: CALL 70087 0 0
57881: GO 57989
57883: LD_INT 2
57885: DOUBLE
57886: EQUAL
57887: IFTRUE 57891
57889: GO 57898
57891: POP
// hHackSetLevel10 ; 3 :
57892: CALL 70220 0 0
57896: GO 57989
57898: LD_INT 3
57900: DOUBLE
57901: EQUAL
57902: IFTRUE 57906
57904: GO 57913
57906: POP
// hHackSetLevel10YourUnits ; 4 :
57907: CALL 70305 0 0
57911: GO 57989
57913: LD_INT 4
57915: DOUBLE
57916: EQUAL
57917: IFTRUE 57921
57919: GO 57928
57921: POP
// hHackInvincible ; 5 :
57922: CALL 70753 0 0
57926: GO 57989
57928: LD_INT 5
57930: DOUBLE
57931: EQUAL
57932: IFTRUE 57936
57934: GO 57943
57936: POP
// hHackInvisible ; 6 :
57937: CALL 70864 0 0
57941: GO 57989
57943: LD_INT 6
57945: DOUBLE
57946: EQUAL
57947: IFTRUE 57951
57949: GO 57958
57951: POP
// hHackChangeYourSide ; 7 :
57952: CALL 70921 0 0
57956: GO 57989
57958: LD_INT 7
57960: DOUBLE
57961: EQUAL
57962: IFTRUE 57966
57964: GO 57973
57966: POP
// hHackChangeUnitSide ; 8 :
57967: CALL 70963 0 0
57971: GO 57989
57973: LD_INT 8
57975: DOUBLE
57976: EQUAL
57977: IFTRUE 57981
57979: GO 57988
57981: POP
// hHackFog ; end ;
57982: CALL 71064 0 0
57986: GO 57989
57988: POP
// end ; end ;
57989: LD_VAR 0 7
57993: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
57994: GO 57996
57996: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
57997: LD_STRING initStreamRollete();
57999: PPUSH
58000: CALL_OW 559
// InitStreamMode ;
58004: CALL 58016 0 0
// DefineStreamItems ( false ) ;
58008: LD_INT 0
58010: PPUSH
58011: CALL 58480 0 1
// end ;
58015: END
// function InitStreamMode ; begin
58016: LD_INT 0
58018: PPUSH
// streamModeActive := false ;
58019: LD_ADDR_EXP 49
58023: PUSH
58024: LD_INT 0
58026: ST_TO_ADDR
// normalCounter := 36 ;
58027: LD_ADDR_EXP 50
58031: PUSH
58032: LD_INT 36
58034: ST_TO_ADDR
// hardcoreCounter := 18 ;
58035: LD_ADDR_EXP 51
58039: PUSH
58040: LD_INT 18
58042: ST_TO_ADDR
// sRocket := false ;
58043: LD_ADDR_EXP 54
58047: PUSH
58048: LD_INT 0
58050: ST_TO_ADDR
// sSpeed := false ;
58051: LD_ADDR_EXP 53
58055: PUSH
58056: LD_INT 0
58058: ST_TO_ADDR
// sEngine := false ;
58059: LD_ADDR_EXP 55
58063: PUSH
58064: LD_INT 0
58066: ST_TO_ADDR
// sSpec := false ;
58067: LD_ADDR_EXP 52
58071: PUSH
58072: LD_INT 0
58074: ST_TO_ADDR
// sLevel := false ;
58075: LD_ADDR_EXP 56
58079: PUSH
58080: LD_INT 0
58082: ST_TO_ADDR
// sArmoury := false ;
58083: LD_ADDR_EXP 57
58087: PUSH
58088: LD_INT 0
58090: ST_TO_ADDR
// sRadar := false ;
58091: LD_ADDR_EXP 58
58095: PUSH
58096: LD_INT 0
58098: ST_TO_ADDR
// sBunker := false ;
58099: LD_ADDR_EXP 59
58103: PUSH
58104: LD_INT 0
58106: ST_TO_ADDR
// sHack := false ;
58107: LD_ADDR_EXP 60
58111: PUSH
58112: LD_INT 0
58114: ST_TO_ADDR
// sFire := false ;
58115: LD_ADDR_EXP 61
58119: PUSH
58120: LD_INT 0
58122: ST_TO_ADDR
// sRefresh := false ;
58123: LD_ADDR_EXP 62
58127: PUSH
58128: LD_INT 0
58130: ST_TO_ADDR
// sExp := false ;
58131: LD_ADDR_EXP 63
58135: PUSH
58136: LD_INT 0
58138: ST_TO_ADDR
// sDepot := false ;
58139: LD_ADDR_EXP 64
58143: PUSH
58144: LD_INT 0
58146: ST_TO_ADDR
// sFlag := false ;
58147: LD_ADDR_EXP 65
58151: PUSH
58152: LD_INT 0
58154: ST_TO_ADDR
// sKamikadze := false ;
58155: LD_ADDR_EXP 73
58159: PUSH
58160: LD_INT 0
58162: ST_TO_ADDR
// sTroll := false ;
58163: LD_ADDR_EXP 74
58167: PUSH
58168: LD_INT 0
58170: ST_TO_ADDR
// sSlow := false ;
58171: LD_ADDR_EXP 75
58175: PUSH
58176: LD_INT 0
58178: ST_TO_ADDR
// sLack := false ;
58179: LD_ADDR_EXP 76
58183: PUSH
58184: LD_INT 0
58186: ST_TO_ADDR
// sTank := false ;
58187: LD_ADDR_EXP 78
58191: PUSH
58192: LD_INT 0
58194: ST_TO_ADDR
// sRemote := false ;
58195: LD_ADDR_EXP 79
58199: PUSH
58200: LD_INT 0
58202: ST_TO_ADDR
// sPowell := false ;
58203: LD_ADDR_EXP 80
58207: PUSH
58208: LD_INT 0
58210: ST_TO_ADDR
// sTeleport := false ;
58211: LD_ADDR_EXP 83
58215: PUSH
58216: LD_INT 0
58218: ST_TO_ADDR
// sOilTower := false ;
58219: LD_ADDR_EXP 85
58223: PUSH
58224: LD_INT 0
58226: ST_TO_ADDR
// sShovel := false ;
58227: LD_ADDR_EXP 86
58231: PUSH
58232: LD_INT 0
58234: ST_TO_ADDR
// sSheik := false ;
58235: LD_ADDR_EXP 87
58239: PUSH
58240: LD_INT 0
58242: ST_TO_ADDR
// sEarthquake := false ;
58243: LD_ADDR_EXP 89
58247: PUSH
58248: LD_INT 0
58250: ST_TO_ADDR
// sAI := false ;
58251: LD_ADDR_EXP 90
58255: PUSH
58256: LD_INT 0
58258: ST_TO_ADDR
// sCargo := false ;
58259: LD_ADDR_EXP 93
58263: PUSH
58264: LD_INT 0
58266: ST_TO_ADDR
// sDLaser := false ;
58267: LD_ADDR_EXP 94
58271: PUSH
58272: LD_INT 0
58274: ST_TO_ADDR
// sExchange := false ;
58275: LD_ADDR_EXP 95
58279: PUSH
58280: LD_INT 0
58282: ST_TO_ADDR
// sFac := false ;
58283: LD_ADDR_EXP 96
58287: PUSH
58288: LD_INT 0
58290: ST_TO_ADDR
// sPower := false ;
58291: LD_ADDR_EXP 97
58295: PUSH
58296: LD_INT 0
58298: ST_TO_ADDR
// sRandom := false ;
58299: LD_ADDR_EXP 98
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// sShield := false ;
58307: LD_ADDR_EXP 99
58311: PUSH
58312: LD_INT 0
58314: ST_TO_ADDR
// sTime := false ;
58315: LD_ADDR_EXP 100
58319: PUSH
58320: LD_INT 0
58322: ST_TO_ADDR
// sTools := false ;
58323: LD_ADDR_EXP 101
58327: PUSH
58328: LD_INT 0
58330: ST_TO_ADDR
// sSold := false ;
58331: LD_ADDR_EXP 66
58335: PUSH
58336: LD_INT 0
58338: ST_TO_ADDR
// sDiff := false ;
58339: LD_ADDR_EXP 67
58343: PUSH
58344: LD_INT 0
58346: ST_TO_ADDR
// sFog := false ;
58347: LD_ADDR_EXP 70
58351: PUSH
58352: LD_INT 0
58354: ST_TO_ADDR
// sReset := false ;
58355: LD_ADDR_EXP 71
58359: PUSH
58360: LD_INT 0
58362: ST_TO_ADDR
// sSun := false ;
58363: LD_ADDR_EXP 72
58367: PUSH
58368: LD_INT 0
58370: ST_TO_ADDR
// sTiger := false ;
58371: LD_ADDR_EXP 68
58375: PUSH
58376: LD_INT 0
58378: ST_TO_ADDR
// sBomb := false ;
58379: LD_ADDR_EXP 69
58383: PUSH
58384: LD_INT 0
58386: ST_TO_ADDR
// sWound := false ;
58387: LD_ADDR_EXP 77
58391: PUSH
58392: LD_INT 0
58394: ST_TO_ADDR
// sBetray := false ;
58395: LD_ADDR_EXP 81
58399: PUSH
58400: LD_INT 0
58402: ST_TO_ADDR
// sContamin := false ;
58403: LD_ADDR_EXP 82
58407: PUSH
58408: LD_INT 0
58410: ST_TO_ADDR
// sOil := false ;
58411: LD_ADDR_EXP 84
58415: PUSH
58416: LD_INT 0
58418: ST_TO_ADDR
// sStu := false ;
58419: LD_ADDR_EXP 88
58423: PUSH
58424: LD_INT 0
58426: ST_TO_ADDR
// sBazooka := false ;
58427: LD_ADDR_EXP 91
58431: PUSH
58432: LD_INT 0
58434: ST_TO_ADDR
// sMortar := false ;
58435: LD_ADDR_EXP 92
58439: PUSH
58440: LD_INT 0
58442: ST_TO_ADDR
// sRanger := false ;
58443: LD_ADDR_EXP 102
58447: PUSH
58448: LD_INT 0
58450: ST_TO_ADDR
// sComputer := false ;
58451: LD_ADDR_EXP 103
58455: PUSH
58456: LD_INT 0
58458: ST_TO_ADDR
// s30 := false ;
58459: LD_ADDR_EXP 104
58463: PUSH
58464: LD_INT 0
58466: ST_TO_ADDR
// s60 := false ;
58467: LD_ADDR_EXP 105
58471: PUSH
58472: LD_INT 0
58474: ST_TO_ADDR
// end ;
58475: LD_VAR 0 1
58479: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
58480: LD_INT 0
58482: PPUSH
58483: PPUSH
58484: PPUSH
58485: PPUSH
58486: PPUSH
58487: PPUSH
58488: PPUSH
// result := [ ] ;
58489: LD_ADDR_VAR 0 2
58493: PUSH
58494: EMPTY
58495: ST_TO_ADDR
// if campaign_id = 1 then
58496: LD_OWVAR 69
58500: PUSH
58501: LD_INT 1
58503: EQUAL
58504: IFFALSE 61670
// begin case mission_number of 1 :
58506: LD_OWVAR 70
58510: PUSH
58511: LD_INT 1
58513: DOUBLE
58514: EQUAL
58515: IFTRUE 58519
58517: GO 58595
58519: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
58520: LD_ADDR_VAR 0 2
58524: PUSH
58525: LD_INT 2
58527: PUSH
58528: LD_INT 4
58530: PUSH
58531: LD_INT 11
58533: PUSH
58534: LD_INT 12
58536: PUSH
58537: LD_INT 15
58539: PUSH
58540: LD_INT 16
58542: PUSH
58543: LD_INT 22
58545: PUSH
58546: LD_INT 23
58548: PUSH
58549: LD_INT 26
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 101
58565: PUSH
58566: LD_INT 102
58568: PUSH
58569: LD_INT 106
58571: PUSH
58572: LD_INT 116
58574: PUSH
58575: LD_INT 117
58577: PUSH
58578: LD_INT 118
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: ST_TO_ADDR
58593: GO 61668
58595: LD_INT 2
58597: DOUBLE
58598: EQUAL
58599: IFTRUE 58603
58601: GO 58687
58603: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58604: LD_ADDR_VAR 0 2
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: LD_INT 4
58614: PUSH
58615: LD_INT 11
58617: PUSH
58618: LD_INT 12
58620: PUSH
58621: LD_INT 15
58623: PUSH
58624: LD_INT 16
58626: PUSH
58627: LD_INT 22
58629: PUSH
58630: LD_INT 23
58632: PUSH
58633: LD_INT 26
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 101
58649: PUSH
58650: LD_INT 102
58652: PUSH
58653: LD_INT 105
58655: PUSH
58656: LD_INT 106
58658: PUSH
58659: LD_INT 108
58661: PUSH
58662: LD_INT 116
58664: PUSH
58665: LD_INT 117
58667: PUSH
58668: LD_INT 118
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: ST_TO_ADDR
58685: GO 61668
58687: LD_INT 3
58689: DOUBLE
58690: EQUAL
58691: IFTRUE 58695
58693: GO 58783
58695: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58696: LD_ADDR_VAR 0 2
58700: PUSH
58701: LD_INT 2
58703: PUSH
58704: LD_INT 4
58706: PUSH
58707: LD_INT 5
58709: PUSH
58710: LD_INT 11
58712: PUSH
58713: LD_INT 12
58715: PUSH
58716: LD_INT 15
58718: PUSH
58719: LD_INT 16
58721: PUSH
58722: LD_INT 22
58724: PUSH
58725: LD_INT 26
58727: PUSH
58728: LD_INT 36
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 101
58745: PUSH
58746: LD_INT 102
58748: PUSH
58749: LD_INT 105
58751: PUSH
58752: LD_INT 106
58754: PUSH
58755: LD_INT 108
58757: PUSH
58758: LD_INT 116
58760: PUSH
58761: LD_INT 117
58763: PUSH
58764: LD_INT 118
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: ST_TO_ADDR
58781: GO 61668
58783: LD_INT 4
58785: DOUBLE
58786: EQUAL
58787: IFTRUE 58791
58789: GO 58887
58791: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
58792: LD_ADDR_VAR 0 2
58796: PUSH
58797: LD_INT 2
58799: PUSH
58800: LD_INT 4
58802: PUSH
58803: LD_INT 5
58805: PUSH
58806: LD_INT 8
58808: PUSH
58809: LD_INT 11
58811: PUSH
58812: LD_INT 12
58814: PUSH
58815: LD_INT 15
58817: PUSH
58818: LD_INT 16
58820: PUSH
58821: LD_INT 22
58823: PUSH
58824: LD_INT 23
58826: PUSH
58827: LD_INT 26
58829: PUSH
58830: LD_INT 36
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 101
58849: PUSH
58850: LD_INT 102
58852: PUSH
58853: LD_INT 105
58855: PUSH
58856: LD_INT 106
58858: PUSH
58859: LD_INT 108
58861: PUSH
58862: LD_INT 116
58864: PUSH
58865: LD_INT 117
58867: PUSH
58868: LD_INT 118
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: ST_TO_ADDR
58885: GO 61668
58887: LD_INT 5
58889: DOUBLE
58890: EQUAL
58891: IFTRUE 58895
58893: GO 59007
58895: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
58896: LD_ADDR_VAR 0 2
58900: PUSH
58901: LD_INT 2
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: LD_INT 5
58909: PUSH
58910: LD_INT 6
58912: PUSH
58913: LD_INT 8
58915: PUSH
58916: LD_INT 11
58918: PUSH
58919: LD_INT 12
58921: PUSH
58922: LD_INT 15
58924: PUSH
58925: LD_INT 16
58927: PUSH
58928: LD_INT 22
58930: PUSH
58931: LD_INT 23
58933: PUSH
58934: LD_INT 25
58936: PUSH
58937: LD_INT 26
58939: PUSH
58940: LD_INT 36
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 101
58961: PUSH
58962: LD_INT 102
58964: PUSH
58965: LD_INT 105
58967: PUSH
58968: LD_INT 106
58970: PUSH
58971: LD_INT 108
58973: PUSH
58974: LD_INT 109
58976: PUSH
58977: LD_INT 112
58979: PUSH
58980: LD_INT 116
58982: PUSH
58983: LD_INT 117
58985: PUSH
58986: LD_INT 118
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: ST_TO_ADDR
59005: GO 61668
59007: LD_INT 6
59009: DOUBLE
59010: EQUAL
59011: IFTRUE 59015
59013: GO 59147
59015: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59016: LD_ADDR_VAR 0 2
59020: PUSH
59021: LD_INT 2
59023: PUSH
59024: LD_INT 4
59026: PUSH
59027: LD_INT 5
59029: PUSH
59030: LD_INT 6
59032: PUSH
59033: LD_INT 8
59035: PUSH
59036: LD_INT 11
59038: PUSH
59039: LD_INT 12
59041: PUSH
59042: LD_INT 15
59044: PUSH
59045: LD_INT 16
59047: PUSH
59048: LD_INT 20
59050: PUSH
59051: LD_INT 21
59053: PUSH
59054: LD_INT 22
59056: PUSH
59057: LD_INT 23
59059: PUSH
59060: LD_INT 25
59062: PUSH
59063: LD_INT 26
59065: PUSH
59066: LD_INT 30
59068: PUSH
59069: LD_INT 31
59071: PUSH
59072: LD_INT 32
59074: PUSH
59075: LD_INT 36
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 101
59101: PUSH
59102: LD_INT 102
59104: PUSH
59105: LD_INT 105
59107: PUSH
59108: LD_INT 106
59110: PUSH
59111: LD_INT 108
59113: PUSH
59114: LD_INT 109
59116: PUSH
59117: LD_INT 112
59119: PUSH
59120: LD_INT 116
59122: PUSH
59123: LD_INT 117
59125: PUSH
59126: LD_INT 118
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: ST_TO_ADDR
59145: GO 61668
59147: LD_INT 7
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59155
59153: GO 59267
59155: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59156: LD_ADDR_VAR 0 2
59160: PUSH
59161: LD_INT 2
59163: PUSH
59164: LD_INT 4
59166: PUSH
59167: LD_INT 5
59169: PUSH
59170: LD_INT 7
59172: PUSH
59173: LD_INT 11
59175: PUSH
59176: LD_INT 12
59178: PUSH
59179: LD_INT 15
59181: PUSH
59182: LD_INT 16
59184: PUSH
59185: LD_INT 20
59187: PUSH
59188: LD_INT 21
59190: PUSH
59191: LD_INT 22
59193: PUSH
59194: LD_INT 23
59196: PUSH
59197: LD_INT 25
59199: PUSH
59200: LD_INT 26
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 101
59221: PUSH
59222: LD_INT 102
59224: PUSH
59225: LD_INT 103
59227: PUSH
59228: LD_INT 105
59230: PUSH
59231: LD_INT 106
59233: PUSH
59234: LD_INT 108
59236: PUSH
59237: LD_INT 112
59239: PUSH
59240: LD_INT 116
59242: PUSH
59243: LD_INT 117
59245: PUSH
59246: LD_INT 118
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: ST_TO_ADDR
59265: GO 61668
59267: LD_INT 8
59269: DOUBLE
59270: EQUAL
59271: IFTRUE 59275
59273: GO 59415
59275: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59276: LD_ADDR_VAR 0 2
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: LD_INT 4
59286: PUSH
59287: LD_INT 5
59289: PUSH
59290: LD_INT 6
59292: PUSH
59293: LD_INT 7
59295: PUSH
59296: LD_INT 8
59298: PUSH
59299: LD_INT 11
59301: PUSH
59302: LD_INT 12
59304: PUSH
59305: LD_INT 15
59307: PUSH
59308: LD_INT 16
59310: PUSH
59311: LD_INT 20
59313: PUSH
59314: LD_INT 21
59316: PUSH
59317: LD_INT 22
59319: PUSH
59320: LD_INT 23
59322: PUSH
59323: LD_INT 25
59325: PUSH
59326: LD_INT 26
59328: PUSH
59329: LD_INT 30
59331: PUSH
59332: LD_INT 31
59334: PUSH
59335: LD_INT 32
59337: PUSH
59338: LD_INT 36
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 101
59365: PUSH
59366: LD_INT 102
59368: PUSH
59369: LD_INT 103
59371: PUSH
59372: LD_INT 105
59374: PUSH
59375: LD_INT 106
59377: PUSH
59378: LD_INT 108
59380: PUSH
59381: LD_INT 109
59383: PUSH
59384: LD_INT 112
59386: PUSH
59387: LD_INT 116
59389: PUSH
59390: LD_INT 117
59392: PUSH
59393: LD_INT 118
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: ST_TO_ADDR
59413: GO 61668
59415: LD_INT 9
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59423
59421: GO 59571
59423: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59424: LD_ADDR_VAR 0 2
59428: PUSH
59429: LD_INT 2
59431: PUSH
59432: LD_INT 4
59434: PUSH
59435: LD_INT 5
59437: PUSH
59438: LD_INT 6
59440: PUSH
59441: LD_INT 7
59443: PUSH
59444: LD_INT 8
59446: PUSH
59447: LD_INT 11
59449: PUSH
59450: LD_INT 12
59452: PUSH
59453: LD_INT 15
59455: PUSH
59456: LD_INT 16
59458: PUSH
59459: LD_INT 20
59461: PUSH
59462: LD_INT 21
59464: PUSH
59465: LD_INT 22
59467: PUSH
59468: LD_INT 23
59470: PUSH
59471: LD_INT 25
59473: PUSH
59474: LD_INT 26
59476: PUSH
59477: LD_INT 28
59479: PUSH
59480: LD_INT 30
59482: PUSH
59483: LD_INT 31
59485: PUSH
59486: LD_INT 32
59488: PUSH
59489: LD_INT 36
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: LIST
59496: LIST
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: PUSH
59515: LD_INT 101
59517: PUSH
59518: LD_INT 102
59520: PUSH
59521: LD_INT 103
59523: PUSH
59524: LD_INT 105
59526: PUSH
59527: LD_INT 106
59529: PUSH
59530: LD_INT 108
59532: PUSH
59533: LD_INT 109
59535: PUSH
59536: LD_INT 112
59538: PUSH
59539: LD_INT 114
59541: PUSH
59542: LD_INT 116
59544: PUSH
59545: LD_INT 117
59547: PUSH
59548: LD_INT 118
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: ST_TO_ADDR
59569: GO 61668
59571: LD_INT 10
59573: DOUBLE
59574: EQUAL
59575: IFTRUE 59579
59577: GO 59775
59579: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59580: LD_ADDR_VAR 0 2
59584: PUSH
59585: LD_INT 2
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: LD_INT 5
59593: PUSH
59594: LD_INT 6
59596: PUSH
59597: LD_INT 7
59599: PUSH
59600: LD_INT 8
59602: PUSH
59603: LD_INT 9
59605: PUSH
59606: LD_INT 10
59608: PUSH
59609: LD_INT 11
59611: PUSH
59612: LD_INT 12
59614: PUSH
59615: LD_INT 13
59617: PUSH
59618: LD_INT 14
59620: PUSH
59621: LD_INT 15
59623: PUSH
59624: LD_INT 16
59626: PUSH
59627: LD_INT 17
59629: PUSH
59630: LD_INT 18
59632: PUSH
59633: LD_INT 19
59635: PUSH
59636: LD_INT 20
59638: PUSH
59639: LD_INT 21
59641: PUSH
59642: LD_INT 22
59644: PUSH
59645: LD_INT 23
59647: PUSH
59648: LD_INT 24
59650: PUSH
59651: LD_INT 25
59653: PUSH
59654: LD_INT 26
59656: PUSH
59657: LD_INT 28
59659: PUSH
59660: LD_INT 30
59662: PUSH
59663: LD_INT 31
59665: PUSH
59666: LD_INT 32
59668: PUSH
59669: LD_INT 36
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 101
59705: PUSH
59706: LD_INT 102
59708: PUSH
59709: LD_INT 103
59711: PUSH
59712: LD_INT 104
59714: PUSH
59715: LD_INT 105
59717: PUSH
59718: LD_INT 106
59720: PUSH
59721: LD_INT 107
59723: PUSH
59724: LD_INT 108
59726: PUSH
59727: LD_INT 109
59729: PUSH
59730: LD_INT 110
59732: PUSH
59733: LD_INT 111
59735: PUSH
59736: LD_INT 112
59738: PUSH
59739: LD_INT 114
59741: PUSH
59742: LD_INT 116
59744: PUSH
59745: LD_INT 117
59747: PUSH
59748: LD_INT 118
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: ST_TO_ADDR
59773: GO 61668
59775: LD_INT 11
59777: DOUBLE
59778: EQUAL
59779: IFTRUE 59783
59781: GO 59987
59783: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
59784: LD_ADDR_VAR 0 2
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 3
59794: PUSH
59795: LD_INT 4
59797: PUSH
59798: LD_INT 5
59800: PUSH
59801: LD_INT 6
59803: PUSH
59804: LD_INT 7
59806: PUSH
59807: LD_INT 8
59809: PUSH
59810: LD_INT 9
59812: PUSH
59813: LD_INT 10
59815: PUSH
59816: LD_INT 11
59818: PUSH
59819: LD_INT 12
59821: PUSH
59822: LD_INT 13
59824: PUSH
59825: LD_INT 14
59827: PUSH
59828: LD_INT 15
59830: PUSH
59831: LD_INT 16
59833: PUSH
59834: LD_INT 17
59836: PUSH
59837: LD_INT 18
59839: PUSH
59840: LD_INT 19
59842: PUSH
59843: LD_INT 20
59845: PUSH
59846: LD_INT 21
59848: PUSH
59849: LD_INT 22
59851: PUSH
59852: LD_INT 23
59854: PUSH
59855: LD_INT 24
59857: PUSH
59858: LD_INT 25
59860: PUSH
59861: LD_INT 26
59863: PUSH
59864: LD_INT 28
59866: PUSH
59867: LD_INT 30
59869: PUSH
59870: LD_INT 31
59872: PUSH
59873: LD_INT 32
59875: PUSH
59876: LD_INT 34
59878: PUSH
59879: LD_INT 36
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 101
59917: PUSH
59918: LD_INT 102
59920: PUSH
59921: LD_INT 103
59923: PUSH
59924: LD_INT 104
59926: PUSH
59927: LD_INT 105
59929: PUSH
59930: LD_INT 106
59932: PUSH
59933: LD_INT 107
59935: PUSH
59936: LD_INT 108
59938: PUSH
59939: LD_INT 109
59941: PUSH
59942: LD_INT 110
59944: PUSH
59945: LD_INT 111
59947: PUSH
59948: LD_INT 112
59950: PUSH
59951: LD_INT 114
59953: PUSH
59954: LD_INT 116
59956: PUSH
59957: LD_INT 117
59959: PUSH
59960: LD_INT 118
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: ST_TO_ADDR
59985: GO 61668
59987: LD_INT 12
59989: DOUBLE
59990: EQUAL
59991: IFTRUE 59995
59993: GO 60215
59995: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
59996: LD_ADDR_VAR 0 2
60000: PUSH
60001: LD_INT 1
60003: PUSH
60004: LD_INT 2
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: LD_INT 4
60012: PUSH
60013: LD_INT 5
60015: PUSH
60016: LD_INT 6
60018: PUSH
60019: LD_INT 7
60021: PUSH
60022: LD_INT 8
60024: PUSH
60025: LD_INT 9
60027: PUSH
60028: LD_INT 10
60030: PUSH
60031: LD_INT 11
60033: PUSH
60034: LD_INT 12
60036: PUSH
60037: LD_INT 13
60039: PUSH
60040: LD_INT 14
60042: PUSH
60043: LD_INT 15
60045: PUSH
60046: LD_INT 16
60048: PUSH
60049: LD_INT 17
60051: PUSH
60052: LD_INT 18
60054: PUSH
60055: LD_INT 19
60057: PUSH
60058: LD_INT 20
60060: PUSH
60061: LD_INT 21
60063: PUSH
60064: LD_INT 22
60066: PUSH
60067: LD_INT 23
60069: PUSH
60070: LD_INT 24
60072: PUSH
60073: LD_INT 25
60075: PUSH
60076: LD_INT 26
60078: PUSH
60079: LD_INT 27
60081: PUSH
60082: LD_INT 28
60084: PUSH
60085: LD_INT 30
60087: PUSH
60088: LD_INT 31
60090: PUSH
60091: LD_INT 32
60093: PUSH
60094: LD_INT 33
60096: PUSH
60097: LD_INT 34
60099: PUSH
60100: LD_INT 36
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 101
60141: PUSH
60142: LD_INT 102
60144: PUSH
60145: LD_INT 103
60147: PUSH
60148: LD_INT 104
60150: PUSH
60151: LD_INT 105
60153: PUSH
60154: LD_INT 106
60156: PUSH
60157: LD_INT 107
60159: PUSH
60160: LD_INT 108
60162: PUSH
60163: LD_INT 109
60165: PUSH
60166: LD_INT 110
60168: PUSH
60169: LD_INT 111
60171: PUSH
60172: LD_INT 112
60174: PUSH
60175: LD_INT 113
60177: PUSH
60178: LD_INT 114
60180: PUSH
60181: LD_INT 116
60183: PUSH
60184: LD_INT 117
60186: PUSH
60187: LD_INT 118
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: LIST
60194: LIST
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: LIST
60205: LIST
60206: LIST
60207: LIST
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: ST_TO_ADDR
60213: GO 61668
60215: LD_INT 13
60217: DOUBLE
60218: EQUAL
60219: IFTRUE 60223
60221: GO 60431
60223: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60224: LD_ADDR_VAR 0 2
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 2
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 4
60240: PUSH
60241: LD_INT 5
60243: PUSH
60244: LD_INT 8
60246: PUSH
60247: LD_INT 9
60249: PUSH
60250: LD_INT 10
60252: PUSH
60253: LD_INT 11
60255: PUSH
60256: LD_INT 12
60258: PUSH
60259: LD_INT 14
60261: PUSH
60262: LD_INT 15
60264: PUSH
60265: LD_INT 16
60267: PUSH
60268: LD_INT 17
60270: PUSH
60271: LD_INT 18
60273: PUSH
60274: LD_INT 19
60276: PUSH
60277: LD_INT 20
60279: PUSH
60280: LD_INT 21
60282: PUSH
60283: LD_INT 22
60285: PUSH
60286: LD_INT 23
60288: PUSH
60289: LD_INT 24
60291: PUSH
60292: LD_INT 25
60294: PUSH
60295: LD_INT 26
60297: PUSH
60298: LD_INT 27
60300: PUSH
60301: LD_INT 28
60303: PUSH
60304: LD_INT 30
60306: PUSH
60307: LD_INT 31
60309: PUSH
60310: LD_INT 32
60312: PUSH
60313: LD_INT 33
60315: PUSH
60316: LD_INT 34
60318: PUSH
60319: LD_INT 36
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 101
60357: PUSH
60358: LD_INT 102
60360: PUSH
60361: LD_INT 103
60363: PUSH
60364: LD_INT 104
60366: PUSH
60367: LD_INT 105
60369: PUSH
60370: LD_INT 106
60372: PUSH
60373: LD_INT 107
60375: PUSH
60376: LD_INT 108
60378: PUSH
60379: LD_INT 109
60381: PUSH
60382: LD_INT 110
60384: PUSH
60385: LD_INT 111
60387: PUSH
60388: LD_INT 112
60390: PUSH
60391: LD_INT 113
60393: PUSH
60394: LD_INT 114
60396: PUSH
60397: LD_INT 116
60399: PUSH
60400: LD_INT 117
60402: PUSH
60403: LD_INT 118
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: ST_TO_ADDR
60429: GO 61668
60431: LD_INT 14
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60439
60437: GO 60663
60439: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60440: LD_ADDR_VAR 0 2
60444: PUSH
60445: LD_INT 1
60447: PUSH
60448: LD_INT 2
60450: PUSH
60451: LD_INT 3
60453: PUSH
60454: LD_INT 4
60456: PUSH
60457: LD_INT 5
60459: PUSH
60460: LD_INT 6
60462: PUSH
60463: LD_INT 7
60465: PUSH
60466: LD_INT 8
60468: PUSH
60469: LD_INT 9
60471: PUSH
60472: LD_INT 10
60474: PUSH
60475: LD_INT 11
60477: PUSH
60478: LD_INT 12
60480: PUSH
60481: LD_INT 13
60483: PUSH
60484: LD_INT 14
60486: PUSH
60487: LD_INT 15
60489: PUSH
60490: LD_INT 16
60492: PUSH
60493: LD_INT 17
60495: PUSH
60496: LD_INT 18
60498: PUSH
60499: LD_INT 19
60501: PUSH
60502: LD_INT 20
60504: PUSH
60505: LD_INT 21
60507: PUSH
60508: LD_INT 22
60510: PUSH
60511: LD_INT 23
60513: PUSH
60514: LD_INT 24
60516: PUSH
60517: LD_INT 25
60519: PUSH
60520: LD_INT 26
60522: PUSH
60523: LD_INT 27
60525: PUSH
60526: LD_INT 28
60528: PUSH
60529: LD_INT 29
60531: PUSH
60532: LD_INT 30
60534: PUSH
60535: LD_INT 31
60537: PUSH
60538: LD_INT 32
60540: PUSH
60541: LD_INT 33
60543: PUSH
60544: LD_INT 34
60546: PUSH
60547: LD_INT 36
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 101
60589: PUSH
60590: LD_INT 102
60592: PUSH
60593: LD_INT 103
60595: PUSH
60596: LD_INT 104
60598: PUSH
60599: LD_INT 105
60601: PUSH
60602: LD_INT 106
60604: PUSH
60605: LD_INT 107
60607: PUSH
60608: LD_INT 108
60610: PUSH
60611: LD_INT 109
60613: PUSH
60614: LD_INT 110
60616: PUSH
60617: LD_INT 111
60619: PUSH
60620: LD_INT 112
60622: PUSH
60623: LD_INT 113
60625: PUSH
60626: LD_INT 114
60628: PUSH
60629: LD_INT 116
60631: PUSH
60632: LD_INT 117
60634: PUSH
60635: LD_INT 118
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: ST_TO_ADDR
60661: GO 61668
60663: LD_INT 15
60665: DOUBLE
60666: EQUAL
60667: IFTRUE 60671
60669: GO 60895
60671: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60672: LD_ADDR_VAR 0 2
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 3
60685: PUSH
60686: LD_INT 4
60688: PUSH
60689: LD_INT 5
60691: PUSH
60692: LD_INT 6
60694: PUSH
60695: LD_INT 7
60697: PUSH
60698: LD_INT 8
60700: PUSH
60701: LD_INT 9
60703: PUSH
60704: LD_INT 10
60706: PUSH
60707: LD_INT 11
60709: PUSH
60710: LD_INT 12
60712: PUSH
60713: LD_INT 13
60715: PUSH
60716: LD_INT 14
60718: PUSH
60719: LD_INT 15
60721: PUSH
60722: LD_INT 16
60724: PUSH
60725: LD_INT 17
60727: PUSH
60728: LD_INT 18
60730: PUSH
60731: LD_INT 19
60733: PUSH
60734: LD_INT 20
60736: PUSH
60737: LD_INT 21
60739: PUSH
60740: LD_INT 22
60742: PUSH
60743: LD_INT 23
60745: PUSH
60746: LD_INT 24
60748: PUSH
60749: LD_INT 25
60751: PUSH
60752: LD_INT 26
60754: PUSH
60755: LD_INT 27
60757: PUSH
60758: LD_INT 28
60760: PUSH
60761: LD_INT 29
60763: PUSH
60764: LD_INT 30
60766: PUSH
60767: LD_INT 31
60769: PUSH
60770: LD_INT 32
60772: PUSH
60773: LD_INT 33
60775: PUSH
60776: LD_INT 34
60778: PUSH
60779: LD_INT 36
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 101
60821: PUSH
60822: LD_INT 102
60824: PUSH
60825: LD_INT 103
60827: PUSH
60828: LD_INT 104
60830: PUSH
60831: LD_INT 105
60833: PUSH
60834: LD_INT 106
60836: PUSH
60837: LD_INT 107
60839: PUSH
60840: LD_INT 108
60842: PUSH
60843: LD_INT 109
60845: PUSH
60846: LD_INT 110
60848: PUSH
60849: LD_INT 111
60851: PUSH
60852: LD_INT 112
60854: PUSH
60855: LD_INT 113
60857: PUSH
60858: LD_INT 114
60860: PUSH
60861: LD_INT 116
60863: PUSH
60864: LD_INT 117
60866: PUSH
60867: LD_INT 118
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: ST_TO_ADDR
60893: GO 61668
60895: LD_INT 16
60897: DOUBLE
60898: EQUAL
60899: IFTRUE 60903
60901: GO 61039
60903: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
60904: LD_ADDR_VAR 0 2
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: LD_INT 4
60914: PUSH
60915: LD_INT 5
60917: PUSH
60918: LD_INT 7
60920: PUSH
60921: LD_INT 11
60923: PUSH
60924: LD_INT 12
60926: PUSH
60927: LD_INT 15
60929: PUSH
60930: LD_INT 16
60932: PUSH
60933: LD_INT 20
60935: PUSH
60936: LD_INT 21
60938: PUSH
60939: LD_INT 22
60941: PUSH
60942: LD_INT 23
60944: PUSH
60945: LD_INT 25
60947: PUSH
60948: LD_INT 26
60950: PUSH
60951: LD_INT 30
60953: PUSH
60954: LD_INT 31
60956: PUSH
60957: LD_INT 32
60959: PUSH
60960: LD_INT 33
60962: PUSH
60963: LD_INT 34
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 101
60989: PUSH
60990: LD_INT 102
60992: PUSH
60993: LD_INT 103
60995: PUSH
60996: LD_INT 106
60998: PUSH
60999: LD_INT 108
61001: PUSH
61002: LD_INT 112
61004: PUSH
61005: LD_INT 113
61007: PUSH
61008: LD_INT 114
61010: PUSH
61011: LD_INT 116
61013: PUSH
61014: LD_INT 117
61016: PUSH
61017: LD_INT 118
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: ST_TO_ADDR
61037: GO 61668
61039: LD_INT 17
61041: DOUBLE
61042: EQUAL
61043: IFTRUE 61047
61045: GO 61271
61047: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61048: LD_ADDR_VAR 0 2
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 2
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: LD_INT 4
61064: PUSH
61065: LD_INT 5
61067: PUSH
61068: LD_INT 6
61070: PUSH
61071: LD_INT 7
61073: PUSH
61074: LD_INT 8
61076: PUSH
61077: LD_INT 9
61079: PUSH
61080: LD_INT 10
61082: PUSH
61083: LD_INT 11
61085: PUSH
61086: LD_INT 12
61088: PUSH
61089: LD_INT 13
61091: PUSH
61092: LD_INT 14
61094: PUSH
61095: LD_INT 15
61097: PUSH
61098: LD_INT 16
61100: PUSH
61101: LD_INT 17
61103: PUSH
61104: LD_INT 18
61106: PUSH
61107: LD_INT 19
61109: PUSH
61110: LD_INT 20
61112: PUSH
61113: LD_INT 21
61115: PUSH
61116: LD_INT 22
61118: PUSH
61119: LD_INT 23
61121: PUSH
61122: LD_INT 24
61124: PUSH
61125: LD_INT 25
61127: PUSH
61128: LD_INT 26
61130: PUSH
61131: LD_INT 27
61133: PUSH
61134: LD_INT 28
61136: PUSH
61137: LD_INT 29
61139: PUSH
61140: LD_INT 30
61142: PUSH
61143: LD_INT 31
61145: PUSH
61146: LD_INT 32
61148: PUSH
61149: LD_INT 33
61151: PUSH
61152: LD_INT 34
61154: PUSH
61155: LD_INT 36
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 101
61197: PUSH
61198: LD_INT 102
61200: PUSH
61201: LD_INT 103
61203: PUSH
61204: LD_INT 104
61206: PUSH
61207: LD_INT 105
61209: PUSH
61210: LD_INT 106
61212: PUSH
61213: LD_INT 107
61215: PUSH
61216: LD_INT 108
61218: PUSH
61219: LD_INT 109
61221: PUSH
61222: LD_INT 110
61224: PUSH
61225: LD_INT 111
61227: PUSH
61228: LD_INT 112
61230: PUSH
61231: LD_INT 113
61233: PUSH
61234: LD_INT 114
61236: PUSH
61237: LD_INT 116
61239: PUSH
61240: LD_INT 117
61242: PUSH
61243: LD_INT 118
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: ST_TO_ADDR
61269: GO 61668
61271: LD_INT 18
61273: DOUBLE
61274: EQUAL
61275: IFTRUE 61279
61277: GO 61427
61279: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61280: LD_ADDR_VAR 0 2
61284: PUSH
61285: LD_INT 2
61287: PUSH
61288: LD_INT 4
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: LD_INT 7
61296: PUSH
61297: LD_INT 11
61299: PUSH
61300: LD_INT 12
61302: PUSH
61303: LD_INT 15
61305: PUSH
61306: LD_INT 16
61308: PUSH
61309: LD_INT 20
61311: PUSH
61312: LD_INT 21
61314: PUSH
61315: LD_INT 22
61317: PUSH
61318: LD_INT 23
61320: PUSH
61321: LD_INT 25
61323: PUSH
61324: LD_INT 26
61326: PUSH
61327: LD_INT 30
61329: PUSH
61330: LD_INT 31
61332: PUSH
61333: LD_INT 32
61335: PUSH
61336: LD_INT 33
61338: PUSH
61339: LD_INT 34
61341: PUSH
61342: LD_INT 35
61344: PUSH
61345: LD_INT 36
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: PUSH
61371: LD_INT 101
61373: PUSH
61374: LD_INT 102
61376: PUSH
61377: LD_INT 103
61379: PUSH
61380: LD_INT 106
61382: PUSH
61383: LD_INT 108
61385: PUSH
61386: LD_INT 112
61388: PUSH
61389: LD_INT 113
61391: PUSH
61392: LD_INT 114
61394: PUSH
61395: LD_INT 115
61397: PUSH
61398: LD_INT 116
61400: PUSH
61401: LD_INT 117
61403: PUSH
61404: LD_INT 118
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: LIST
61415: LIST
61416: LIST
61417: LIST
61418: LIST
61419: LIST
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: ST_TO_ADDR
61425: GO 61668
61427: LD_INT 19
61429: DOUBLE
61430: EQUAL
61431: IFTRUE 61435
61433: GO 61667
61435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61436: LD_ADDR_VAR 0 2
61440: PUSH
61441: LD_INT 1
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 4
61452: PUSH
61453: LD_INT 5
61455: PUSH
61456: LD_INT 6
61458: PUSH
61459: LD_INT 7
61461: PUSH
61462: LD_INT 8
61464: PUSH
61465: LD_INT 9
61467: PUSH
61468: LD_INT 10
61470: PUSH
61471: LD_INT 11
61473: PUSH
61474: LD_INT 12
61476: PUSH
61477: LD_INT 13
61479: PUSH
61480: LD_INT 14
61482: PUSH
61483: LD_INT 15
61485: PUSH
61486: LD_INT 16
61488: PUSH
61489: LD_INT 17
61491: PUSH
61492: LD_INT 18
61494: PUSH
61495: LD_INT 19
61497: PUSH
61498: LD_INT 20
61500: PUSH
61501: LD_INT 21
61503: PUSH
61504: LD_INT 22
61506: PUSH
61507: LD_INT 23
61509: PUSH
61510: LD_INT 24
61512: PUSH
61513: LD_INT 25
61515: PUSH
61516: LD_INT 26
61518: PUSH
61519: LD_INT 27
61521: PUSH
61522: LD_INT 28
61524: PUSH
61525: LD_INT 29
61527: PUSH
61528: LD_INT 30
61530: PUSH
61531: LD_INT 31
61533: PUSH
61534: LD_INT 32
61536: PUSH
61537: LD_INT 33
61539: PUSH
61540: LD_INT 34
61542: PUSH
61543: LD_INT 35
61545: PUSH
61546: LD_INT 36
61548: PUSH
61549: EMPTY
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 101
61589: PUSH
61590: LD_INT 102
61592: PUSH
61593: LD_INT 103
61595: PUSH
61596: LD_INT 104
61598: PUSH
61599: LD_INT 105
61601: PUSH
61602: LD_INT 106
61604: PUSH
61605: LD_INT 107
61607: PUSH
61608: LD_INT 108
61610: PUSH
61611: LD_INT 109
61613: PUSH
61614: LD_INT 110
61616: PUSH
61617: LD_INT 111
61619: PUSH
61620: LD_INT 112
61622: PUSH
61623: LD_INT 113
61625: PUSH
61626: LD_INT 114
61628: PUSH
61629: LD_INT 115
61631: PUSH
61632: LD_INT 116
61634: PUSH
61635: LD_INT 117
61637: PUSH
61638: LD_INT 118
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: ST_TO_ADDR
61665: GO 61668
61667: POP
// end else
61668: GO 61899
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61670: LD_ADDR_VAR 0 2
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: LD_INT 3
61683: PUSH
61684: LD_INT 4
61686: PUSH
61687: LD_INT 5
61689: PUSH
61690: LD_INT 6
61692: PUSH
61693: LD_INT 7
61695: PUSH
61696: LD_INT 8
61698: PUSH
61699: LD_INT 9
61701: PUSH
61702: LD_INT 10
61704: PUSH
61705: LD_INT 11
61707: PUSH
61708: LD_INT 12
61710: PUSH
61711: LD_INT 13
61713: PUSH
61714: LD_INT 14
61716: PUSH
61717: LD_INT 15
61719: PUSH
61720: LD_INT 16
61722: PUSH
61723: LD_INT 17
61725: PUSH
61726: LD_INT 18
61728: PUSH
61729: LD_INT 19
61731: PUSH
61732: LD_INT 20
61734: PUSH
61735: LD_INT 21
61737: PUSH
61738: LD_INT 22
61740: PUSH
61741: LD_INT 23
61743: PUSH
61744: LD_INT 24
61746: PUSH
61747: LD_INT 25
61749: PUSH
61750: LD_INT 26
61752: PUSH
61753: LD_INT 27
61755: PUSH
61756: LD_INT 28
61758: PUSH
61759: LD_INT 29
61761: PUSH
61762: LD_INT 30
61764: PUSH
61765: LD_INT 31
61767: PUSH
61768: LD_INT 32
61770: PUSH
61771: LD_INT 33
61773: PUSH
61774: LD_INT 34
61776: PUSH
61777: LD_INT 35
61779: PUSH
61780: LD_INT 36
61782: PUSH
61783: EMPTY
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 101
61823: PUSH
61824: LD_INT 102
61826: PUSH
61827: LD_INT 103
61829: PUSH
61830: LD_INT 104
61832: PUSH
61833: LD_INT 105
61835: PUSH
61836: LD_INT 106
61838: PUSH
61839: LD_INT 107
61841: PUSH
61842: LD_INT 108
61844: PUSH
61845: LD_INT 109
61847: PUSH
61848: LD_INT 110
61850: PUSH
61851: LD_INT 111
61853: PUSH
61854: LD_INT 112
61856: PUSH
61857: LD_INT 113
61859: PUSH
61860: LD_INT 114
61862: PUSH
61863: LD_INT 115
61865: PUSH
61866: LD_INT 116
61868: PUSH
61869: LD_INT 117
61871: PUSH
61872: LD_INT 118
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: ST_TO_ADDR
// if result then
61899: LD_VAR 0 2
61903: IFFALSE 62689
// begin normal :=  ;
61905: LD_ADDR_VAR 0 5
61909: PUSH
61910: LD_STRING 
61912: ST_TO_ADDR
// hardcore :=  ;
61913: LD_ADDR_VAR 0 6
61917: PUSH
61918: LD_STRING 
61920: ST_TO_ADDR
// active :=  ;
61921: LD_ADDR_VAR 0 7
61925: PUSH
61926: LD_STRING 
61928: ST_TO_ADDR
// for i = 1 to normalCounter do
61929: LD_ADDR_VAR 0 8
61933: PUSH
61934: DOUBLE
61935: LD_INT 1
61937: DEC
61938: ST_TO_ADDR
61939: LD_EXP 50
61943: PUSH
61944: FOR_TO
61945: IFFALSE 62046
// begin tmp := 0 ;
61947: LD_ADDR_VAR 0 3
61951: PUSH
61952: LD_STRING 0
61954: ST_TO_ADDR
// if result [ 1 ] then
61955: LD_VAR 0 2
61959: PUSH
61960: LD_INT 1
61962: ARRAY
61963: IFFALSE 62028
// if result [ 1 ] [ 1 ] = i then
61965: LD_VAR 0 2
61969: PUSH
61970: LD_INT 1
61972: ARRAY
61973: PUSH
61974: LD_INT 1
61976: ARRAY
61977: PUSH
61978: LD_VAR 0 8
61982: EQUAL
61983: IFFALSE 62028
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61985: LD_ADDR_VAR 0 2
61989: PUSH
61990: LD_VAR 0 2
61994: PPUSH
61995: LD_INT 1
61997: PPUSH
61998: LD_VAR 0 2
62002: PUSH
62003: LD_INT 1
62005: ARRAY
62006: PPUSH
62007: LD_INT 1
62009: PPUSH
62010: CALL_OW 3
62014: PPUSH
62015: CALL_OW 1
62019: ST_TO_ADDR
// tmp := 1 ;
62020: LD_ADDR_VAR 0 3
62024: PUSH
62025: LD_STRING 1
62027: ST_TO_ADDR
// end ; normal := normal & tmp ;
62028: LD_ADDR_VAR 0 5
62032: PUSH
62033: LD_VAR 0 5
62037: PUSH
62038: LD_VAR 0 3
62042: STR
62043: ST_TO_ADDR
// end ;
62044: GO 61944
62046: POP
62047: POP
// for i = 1 to hardcoreCounter do
62048: LD_ADDR_VAR 0 8
62052: PUSH
62053: DOUBLE
62054: LD_INT 1
62056: DEC
62057: ST_TO_ADDR
62058: LD_EXP 51
62062: PUSH
62063: FOR_TO
62064: IFFALSE 62169
// begin tmp := 0 ;
62066: LD_ADDR_VAR 0 3
62070: PUSH
62071: LD_STRING 0
62073: ST_TO_ADDR
// if result [ 2 ] then
62074: LD_VAR 0 2
62078: PUSH
62079: LD_INT 2
62081: ARRAY
62082: IFFALSE 62151
// if result [ 2 ] [ 1 ] = 100 + i then
62084: LD_VAR 0 2
62088: PUSH
62089: LD_INT 2
62091: ARRAY
62092: PUSH
62093: LD_INT 1
62095: ARRAY
62096: PUSH
62097: LD_INT 100
62099: PUSH
62100: LD_VAR 0 8
62104: PLUS
62105: EQUAL
62106: IFFALSE 62151
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62108: LD_ADDR_VAR 0 2
62112: PUSH
62113: LD_VAR 0 2
62117: PPUSH
62118: LD_INT 2
62120: PPUSH
62121: LD_VAR 0 2
62125: PUSH
62126: LD_INT 2
62128: ARRAY
62129: PPUSH
62130: LD_INT 1
62132: PPUSH
62133: CALL_OW 3
62137: PPUSH
62138: CALL_OW 1
62142: ST_TO_ADDR
// tmp := 1 ;
62143: LD_ADDR_VAR 0 3
62147: PUSH
62148: LD_STRING 1
62150: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62151: LD_ADDR_VAR 0 6
62155: PUSH
62156: LD_VAR 0 6
62160: PUSH
62161: LD_VAR 0 3
62165: STR
62166: ST_TO_ADDR
// end ;
62167: GO 62063
62169: POP
62170: POP
// if isGameLoad then
62171: LD_VAR 0 1
62175: IFFALSE 62650
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62177: LD_ADDR_VAR 0 4
62181: PUSH
62182: LD_EXP 54
62186: PUSH
62187: LD_EXP 53
62191: PUSH
62192: LD_EXP 55
62196: PUSH
62197: LD_EXP 52
62201: PUSH
62202: LD_EXP 56
62206: PUSH
62207: LD_EXP 57
62211: PUSH
62212: LD_EXP 58
62216: PUSH
62217: LD_EXP 59
62221: PUSH
62222: LD_EXP 60
62226: PUSH
62227: LD_EXP 61
62231: PUSH
62232: LD_EXP 62
62236: PUSH
62237: LD_EXP 63
62241: PUSH
62242: LD_EXP 64
62246: PUSH
62247: LD_EXP 65
62251: PUSH
62252: LD_EXP 73
62256: PUSH
62257: LD_EXP 74
62261: PUSH
62262: LD_EXP 75
62266: PUSH
62267: LD_EXP 76
62271: PUSH
62272: LD_EXP 78
62276: PUSH
62277: LD_EXP 79
62281: PUSH
62282: LD_EXP 80
62286: PUSH
62287: LD_EXP 83
62291: PUSH
62292: LD_EXP 85
62296: PUSH
62297: LD_EXP 86
62301: PUSH
62302: LD_EXP 87
62306: PUSH
62307: LD_EXP 89
62311: PUSH
62312: LD_EXP 90
62316: PUSH
62317: LD_EXP 93
62321: PUSH
62322: LD_EXP 94
62326: PUSH
62327: LD_EXP 95
62331: PUSH
62332: LD_EXP 96
62336: PUSH
62337: LD_EXP 97
62341: PUSH
62342: LD_EXP 98
62346: PUSH
62347: LD_EXP 99
62351: PUSH
62352: LD_EXP 100
62356: PUSH
62357: LD_EXP 101
62361: PUSH
62362: LD_EXP 66
62366: PUSH
62367: LD_EXP 67
62371: PUSH
62372: LD_EXP 70
62376: PUSH
62377: LD_EXP 71
62381: PUSH
62382: LD_EXP 72
62386: PUSH
62387: LD_EXP 68
62391: PUSH
62392: LD_EXP 69
62396: PUSH
62397: LD_EXP 77
62401: PUSH
62402: LD_EXP 81
62406: PUSH
62407: LD_EXP 82
62411: PUSH
62412: LD_EXP 84
62416: PUSH
62417: LD_EXP 88
62421: PUSH
62422: LD_EXP 91
62426: PUSH
62427: LD_EXP 92
62431: PUSH
62432: LD_EXP 102
62436: PUSH
62437: LD_EXP 103
62441: PUSH
62442: LD_EXP 104
62446: PUSH
62447: LD_EXP 105
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: ST_TO_ADDR
// tmp :=  ;
62508: LD_ADDR_VAR 0 3
62512: PUSH
62513: LD_STRING 
62515: ST_TO_ADDR
// for i = 1 to normalCounter do
62516: LD_ADDR_VAR 0 8
62520: PUSH
62521: DOUBLE
62522: LD_INT 1
62524: DEC
62525: ST_TO_ADDR
62526: LD_EXP 50
62530: PUSH
62531: FOR_TO
62532: IFFALSE 62568
// begin if flags [ i ] then
62534: LD_VAR 0 4
62538: PUSH
62539: LD_VAR 0 8
62543: ARRAY
62544: IFFALSE 62566
// tmp := tmp & i & ; ;
62546: LD_ADDR_VAR 0 3
62550: PUSH
62551: LD_VAR 0 3
62555: PUSH
62556: LD_VAR 0 8
62560: STR
62561: PUSH
62562: LD_STRING ;
62564: STR
62565: ST_TO_ADDR
// end ;
62566: GO 62531
62568: POP
62569: POP
// for i = 1 to hardcoreCounter do
62570: LD_ADDR_VAR 0 8
62574: PUSH
62575: DOUBLE
62576: LD_INT 1
62578: DEC
62579: ST_TO_ADDR
62580: LD_EXP 51
62584: PUSH
62585: FOR_TO
62586: IFFALSE 62632
// begin if flags [ normalCounter + i ] then
62588: LD_VAR 0 4
62592: PUSH
62593: LD_EXP 50
62597: PUSH
62598: LD_VAR 0 8
62602: PLUS
62603: ARRAY
62604: IFFALSE 62630
// tmp := tmp & ( 100 + i ) & ; ;
62606: LD_ADDR_VAR 0 3
62610: PUSH
62611: LD_VAR 0 3
62615: PUSH
62616: LD_INT 100
62618: PUSH
62619: LD_VAR 0 8
62623: PLUS
62624: STR
62625: PUSH
62626: LD_STRING ;
62628: STR
62629: ST_TO_ADDR
// end ;
62630: GO 62585
62632: POP
62633: POP
// if tmp then
62634: LD_VAR 0 3
62638: IFFALSE 62650
// active := tmp ;
62640: LD_ADDR_VAR 0 7
62644: PUSH
62645: LD_VAR 0 3
62649: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
62650: LD_STRING getStreamItemsFromMission("
62652: PUSH
62653: LD_VAR 0 5
62657: STR
62658: PUSH
62659: LD_STRING ","
62661: STR
62662: PUSH
62663: LD_VAR 0 6
62667: STR
62668: PUSH
62669: LD_STRING ","
62671: STR
62672: PUSH
62673: LD_VAR 0 7
62677: STR
62678: PUSH
62679: LD_STRING ")
62681: STR
62682: PPUSH
62683: CALL_OW 559
// end else
62687: GO 62696
// ToLua ( getStreamItemsFromMission("","","") ) ;
62689: LD_STRING getStreamItemsFromMission("","","")
62691: PPUSH
62692: CALL_OW 559
// end ;
62696: LD_VAR 0 2
62700: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
62701: LD_EXP 49
62705: PUSH
62706: LD_EXP 54
62710: AND
62711: IFFALSE 62835
62713: GO 62715
62715: DISABLE
62716: LD_INT 0
62718: PPUSH
62719: PPUSH
// begin enable ;
62720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
62721: LD_ADDR_VAR 0 2
62725: PUSH
62726: LD_INT 22
62728: PUSH
62729: LD_OWVAR 2
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: LD_INT 34
62743: PUSH
62744: LD_INT 7
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 34
62753: PUSH
62754: LD_INT 45
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 34
62763: PUSH
62764: LD_INT 28
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 34
62773: PUSH
62774: LD_INT 47
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PPUSH
62792: CALL_OW 69
62796: ST_TO_ADDR
// if not tmp then
62797: LD_VAR 0 2
62801: NOT
62802: IFFALSE 62806
// exit ;
62804: GO 62835
// for i in tmp do
62806: LD_ADDR_VAR 0 1
62810: PUSH
62811: LD_VAR 0 2
62815: PUSH
62816: FOR_IN
62817: IFFALSE 62833
// begin SetLives ( i , 0 ) ;
62819: LD_VAR 0 1
62823: PPUSH
62824: LD_INT 0
62826: PPUSH
62827: CALL_OW 234
// end ;
62831: GO 62816
62833: POP
62834: POP
// end ;
62835: PPOPN 2
62837: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
62838: LD_EXP 49
62842: PUSH
62843: LD_EXP 55
62847: AND
62848: IFFALSE 62932
62850: GO 62852
62852: DISABLE
62853: LD_INT 0
62855: PPUSH
62856: PPUSH
// begin enable ;
62857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
62858: LD_ADDR_VAR 0 2
62862: PUSH
62863: LD_INT 22
62865: PUSH
62866: LD_OWVAR 2
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 32
62877: PUSH
62878: LD_INT 3
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PPUSH
62889: CALL_OW 69
62893: ST_TO_ADDR
// if not tmp then
62894: LD_VAR 0 2
62898: NOT
62899: IFFALSE 62903
// exit ;
62901: GO 62932
// for i in tmp do
62903: LD_ADDR_VAR 0 1
62907: PUSH
62908: LD_VAR 0 2
62912: PUSH
62913: FOR_IN
62914: IFFALSE 62930
// begin SetLives ( i , 0 ) ;
62916: LD_VAR 0 1
62920: PPUSH
62921: LD_INT 0
62923: PPUSH
62924: CALL_OW 234
// end ;
62928: GO 62913
62930: POP
62931: POP
// end ;
62932: PPOPN 2
62934: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
62935: LD_EXP 49
62939: PUSH
62940: LD_EXP 52
62944: AND
62945: IFFALSE 63038
62947: GO 62949
62949: DISABLE
62950: LD_INT 0
62952: PPUSH
// begin enable ;
62953: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
62954: LD_ADDR_VAR 0 1
62958: PUSH
62959: LD_INT 22
62961: PUSH
62962: LD_OWVAR 2
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 2
62973: PUSH
62974: LD_INT 25
62976: PUSH
62977: LD_INT 5
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 25
62986: PUSH
62987: LD_INT 9
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 25
62996: PUSH
62997: LD_INT 8
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PPUSH
63014: CALL_OW 69
63018: PUSH
63019: FOR_IN
63020: IFFALSE 63036
// begin SetClass ( i , 1 ) ;
63022: LD_VAR 0 1
63026: PPUSH
63027: LD_INT 1
63029: PPUSH
63030: CALL_OW 336
// end ;
63034: GO 63019
63036: POP
63037: POP
// end ;
63038: PPOPN 1
63040: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63041: LD_EXP 49
63045: PUSH
63046: LD_EXP 53
63050: AND
63051: PUSH
63052: LD_OWVAR 65
63056: PUSH
63057: LD_INT 7
63059: LESS
63060: AND
63061: IFFALSE 63075
63063: GO 63065
63065: DISABLE
// begin enable ;
63066: ENABLE
// game_speed := 7 ;
63067: LD_ADDR_OWVAR 65
63071: PUSH
63072: LD_INT 7
63074: ST_TO_ADDR
// end ;
63075: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63076: LD_EXP 49
63080: PUSH
63081: LD_EXP 56
63085: AND
63086: IFFALSE 63288
63088: GO 63090
63090: DISABLE
63091: LD_INT 0
63093: PPUSH
63094: PPUSH
63095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63096: LD_ADDR_VAR 0 3
63100: PUSH
63101: LD_INT 81
63103: PUSH
63104: LD_OWVAR 2
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 21
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PPUSH
63127: CALL_OW 69
63131: ST_TO_ADDR
// if not tmp then
63132: LD_VAR 0 3
63136: NOT
63137: IFFALSE 63141
// exit ;
63139: GO 63288
// if tmp > 5 then
63141: LD_VAR 0 3
63145: PUSH
63146: LD_INT 5
63148: GREATER
63149: IFFALSE 63161
// k := 5 else
63151: LD_ADDR_VAR 0 2
63155: PUSH
63156: LD_INT 5
63158: ST_TO_ADDR
63159: GO 63171
// k := tmp ;
63161: LD_ADDR_VAR 0 2
63165: PUSH
63166: LD_VAR 0 3
63170: ST_TO_ADDR
// for i := 1 to k do
63171: LD_ADDR_VAR 0 1
63175: PUSH
63176: DOUBLE
63177: LD_INT 1
63179: DEC
63180: ST_TO_ADDR
63181: LD_VAR 0 2
63185: PUSH
63186: FOR_TO
63187: IFFALSE 63286
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63189: LD_VAR 0 3
63193: PUSH
63194: LD_VAR 0 1
63198: ARRAY
63199: PPUSH
63200: LD_VAR 0 1
63204: PUSH
63205: LD_INT 4
63207: MOD
63208: PUSH
63209: LD_INT 1
63211: PLUS
63212: PPUSH
63213: CALL_OW 259
63217: PUSH
63218: LD_INT 10
63220: LESS
63221: IFFALSE 63284
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63223: LD_VAR 0 3
63227: PUSH
63228: LD_VAR 0 1
63232: ARRAY
63233: PPUSH
63234: LD_VAR 0 1
63238: PUSH
63239: LD_INT 4
63241: MOD
63242: PUSH
63243: LD_INT 1
63245: PLUS
63246: PPUSH
63247: LD_VAR 0 3
63251: PUSH
63252: LD_VAR 0 1
63256: ARRAY
63257: PPUSH
63258: LD_VAR 0 1
63262: PUSH
63263: LD_INT 4
63265: MOD
63266: PUSH
63267: LD_INT 1
63269: PLUS
63270: PPUSH
63271: CALL_OW 259
63275: PUSH
63276: LD_INT 1
63278: PLUS
63279: PPUSH
63280: CALL_OW 237
63284: GO 63186
63286: POP
63287: POP
// end ;
63288: PPOPN 3
63290: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63291: LD_EXP 49
63295: PUSH
63296: LD_EXP 57
63300: AND
63301: IFFALSE 63321
63303: GO 63305
63305: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63306: LD_INT 4
63308: PPUSH
63309: LD_OWVAR 2
63313: PPUSH
63314: LD_INT 0
63316: PPUSH
63317: CALL_OW 324
63321: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63322: LD_EXP 49
63326: PUSH
63327: LD_EXP 86
63331: AND
63332: IFFALSE 63352
63334: GO 63336
63336: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63337: LD_INT 19
63339: PPUSH
63340: LD_OWVAR 2
63344: PPUSH
63345: LD_INT 0
63347: PPUSH
63348: CALL_OW 324
63352: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63353: LD_EXP 49
63357: PUSH
63358: LD_EXP 58
63362: AND
63363: IFFALSE 63465
63365: GO 63367
63367: DISABLE
63368: LD_INT 0
63370: PPUSH
63371: PPUSH
// begin enable ;
63372: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63373: LD_ADDR_VAR 0 2
63377: PUSH
63378: LD_INT 22
63380: PUSH
63381: LD_OWVAR 2
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 2
63392: PUSH
63393: LD_INT 34
63395: PUSH
63396: LD_INT 11
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 34
63405: PUSH
63406: LD_INT 30
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: LIST
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PPUSH
63422: CALL_OW 69
63426: ST_TO_ADDR
// if not tmp then
63427: LD_VAR 0 2
63431: NOT
63432: IFFALSE 63436
// exit ;
63434: GO 63465
// for i in tmp do
63436: LD_ADDR_VAR 0 1
63440: PUSH
63441: LD_VAR 0 2
63445: PUSH
63446: FOR_IN
63447: IFFALSE 63463
// begin SetLives ( i , 0 ) ;
63449: LD_VAR 0 1
63453: PPUSH
63454: LD_INT 0
63456: PPUSH
63457: CALL_OW 234
// end ;
63461: GO 63446
63463: POP
63464: POP
// end ;
63465: PPOPN 2
63467: END
// every 0 0$1 trigger StreamModeActive and sBunker do
63468: LD_EXP 49
63472: PUSH
63473: LD_EXP 59
63477: AND
63478: IFFALSE 63498
63480: GO 63482
63482: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
63483: LD_INT 32
63485: PPUSH
63486: LD_OWVAR 2
63490: PPUSH
63491: LD_INT 0
63493: PPUSH
63494: CALL_OW 324
63498: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
63499: LD_EXP 49
63503: PUSH
63504: LD_EXP 60
63508: AND
63509: IFFALSE 63690
63511: GO 63513
63513: DISABLE
63514: LD_INT 0
63516: PPUSH
63517: PPUSH
63518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
63519: LD_ADDR_VAR 0 2
63523: PUSH
63524: LD_INT 22
63526: PUSH
63527: LD_OWVAR 2
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 33
63538: PUSH
63539: LD_INT 3
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PPUSH
63550: CALL_OW 69
63554: ST_TO_ADDR
// if not tmp then
63555: LD_VAR 0 2
63559: NOT
63560: IFFALSE 63564
// exit ;
63562: GO 63690
// side := 0 ;
63564: LD_ADDR_VAR 0 3
63568: PUSH
63569: LD_INT 0
63571: ST_TO_ADDR
// for i := 1 to 8 do
63572: LD_ADDR_VAR 0 1
63576: PUSH
63577: DOUBLE
63578: LD_INT 1
63580: DEC
63581: ST_TO_ADDR
63582: LD_INT 8
63584: PUSH
63585: FOR_TO
63586: IFFALSE 63634
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
63588: LD_OWVAR 2
63592: PUSH
63593: LD_VAR 0 1
63597: NONEQUAL
63598: PUSH
63599: LD_OWVAR 2
63603: PPUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: CALL_OW 81
63613: PUSH
63614: LD_INT 2
63616: EQUAL
63617: AND
63618: IFFALSE 63632
// begin side := i ;
63620: LD_ADDR_VAR 0 3
63624: PUSH
63625: LD_VAR 0 1
63629: ST_TO_ADDR
// break ;
63630: GO 63634
// end ;
63632: GO 63585
63634: POP
63635: POP
// if not side then
63636: LD_VAR 0 3
63640: NOT
63641: IFFALSE 63645
// exit ;
63643: GO 63690
// for i := 1 to tmp do
63645: LD_ADDR_VAR 0 1
63649: PUSH
63650: DOUBLE
63651: LD_INT 1
63653: DEC
63654: ST_TO_ADDR
63655: LD_VAR 0 2
63659: PUSH
63660: FOR_TO
63661: IFFALSE 63688
// if Prob ( 60 ) then
63663: LD_INT 60
63665: PPUSH
63666: CALL_OW 13
63670: IFFALSE 63686
// SetSide ( i , side ) ;
63672: LD_VAR 0 1
63676: PPUSH
63677: LD_VAR 0 3
63681: PPUSH
63682: CALL_OW 235
63686: GO 63660
63688: POP
63689: POP
// end ;
63690: PPOPN 3
63692: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
63693: LD_EXP 49
63697: PUSH
63698: LD_EXP 62
63702: AND
63703: IFFALSE 63822
63705: GO 63707
63707: DISABLE
63708: LD_INT 0
63710: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
63711: LD_ADDR_VAR 0 1
63715: PUSH
63716: LD_INT 22
63718: PUSH
63719: LD_OWVAR 2
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 21
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: PUSH
63741: LD_INT 23
63743: PUSH
63744: LD_INT 0
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: LIST
63759: PPUSH
63760: CALL_OW 69
63764: PUSH
63765: FOR_IN
63766: IFFALSE 63820
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
63768: LD_VAR 0 1
63772: PPUSH
63773: CALL_OW 257
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: LD_INT 2
63783: PUSH
63784: LD_INT 3
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: IN
63796: IFFALSE 63818
// SetClass ( un , rand ( 1 , 4 ) ) ;
63798: LD_VAR 0 1
63802: PPUSH
63803: LD_INT 1
63805: PPUSH
63806: LD_INT 4
63808: PPUSH
63809: CALL_OW 12
63813: PPUSH
63814: CALL_OW 336
63818: GO 63765
63820: POP
63821: POP
// end ;
63822: PPOPN 1
63824: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
63825: LD_EXP 49
63829: PUSH
63830: LD_EXP 61
63834: AND
63835: IFFALSE 63914
63837: GO 63839
63839: DISABLE
63840: LD_INT 0
63842: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63843: LD_ADDR_VAR 0 1
63847: PUSH
63848: LD_INT 22
63850: PUSH
63851: LD_OWVAR 2
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 21
63862: PUSH
63863: LD_INT 3
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PPUSH
63874: CALL_OW 69
63878: ST_TO_ADDR
// if not tmp then
63879: LD_VAR 0 1
63883: NOT
63884: IFFALSE 63888
// exit ;
63886: GO 63914
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
63888: LD_VAR 0 1
63892: PUSH
63893: LD_INT 1
63895: PPUSH
63896: LD_VAR 0 1
63900: PPUSH
63901: CALL_OW 12
63905: ARRAY
63906: PPUSH
63907: LD_INT 100
63909: PPUSH
63910: CALL_OW 234
// end ;
63914: PPOPN 1
63916: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
63917: LD_EXP 49
63921: PUSH
63922: LD_EXP 63
63926: AND
63927: IFFALSE 64025
63929: GO 63931
63931: DISABLE
63932: LD_INT 0
63934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63935: LD_ADDR_VAR 0 1
63939: PUSH
63940: LD_INT 22
63942: PUSH
63943: LD_OWVAR 2
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 21
63954: PUSH
63955: LD_INT 1
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PPUSH
63966: CALL_OW 69
63970: ST_TO_ADDR
// if not tmp then
63971: LD_VAR 0 1
63975: NOT
63976: IFFALSE 63980
// exit ;
63978: GO 64025
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
63980: LD_VAR 0 1
63984: PUSH
63985: LD_INT 1
63987: PPUSH
63988: LD_VAR 0 1
63992: PPUSH
63993: CALL_OW 12
63997: ARRAY
63998: PPUSH
63999: LD_INT 1
64001: PPUSH
64002: LD_INT 4
64004: PPUSH
64005: CALL_OW 12
64009: PPUSH
64010: LD_INT 3000
64012: PPUSH
64013: LD_INT 9000
64015: PPUSH
64016: CALL_OW 12
64020: PPUSH
64021: CALL_OW 492
// end ;
64025: PPOPN 1
64027: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64028: LD_EXP 49
64032: PUSH
64033: LD_EXP 64
64037: AND
64038: IFFALSE 64058
64040: GO 64042
64042: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64043: LD_INT 1
64045: PPUSH
64046: LD_OWVAR 2
64050: PPUSH
64051: LD_INT 0
64053: PPUSH
64054: CALL_OW 324
64058: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64059: LD_EXP 49
64063: PUSH
64064: LD_EXP 65
64068: AND
64069: IFFALSE 64152
64071: GO 64073
64073: DISABLE
64074: LD_INT 0
64076: PPUSH
64077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64078: LD_ADDR_VAR 0 2
64082: PUSH
64083: LD_INT 22
64085: PUSH
64086: LD_OWVAR 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 21
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PPUSH
64109: CALL_OW 69
64113: ST_TO_ADDR
// if not tmp then
64114: LD_VAR 0 2
64118: NOT
64119: IFFALSE 64123
// exit ;
64121: GO 64152
// for i in tmp do
64123: LD_ADDR_VAR 0 1
64127: PUSH
64128: LD_VAR 0 2
64132: PUSH
64133: FOR_IN
64134: IFFALSE 64150
// SetBLevel ( i , 10 ) ;
64136: LD_VAR 0 1
64140: PPUSH
64141: LD_INT 10
64143: PPUSH
64144: CALL_OW 241
64148: GO 64133
64150: POP
64151: POP
// end ;
64152: PPOPN 2
64154: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64155: LD_EXP 49
64159: PUSH
64160: LD_EXP 66
64164: AND
64165: IFFALSE 64276
64167: GO 64169
64169: DISABLE
64170: LD_INT 0
64172: PPUSH
64173: PPUSH
64174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_INT 22
64182: PUSH
64183: LD_OWVAR 2
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 25
64194: PUSH
64195: LD_INT 1
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PPUSH
64206: CALL_OW 69
64210: ST_TO_ADDR
// if not tmp then
64211: LD_VAR 0 3
64215: NOT
64216: IFFALSE 64220
// exit ;
64218: GO 64276
// un := tmp [ rand ( 1 , tmp ) ] ;
64220: LD_ADDR_VAR 0 2
64224: PUSH
64225: LD_VAR 0 3
64229: PUSH
64230: LD_INT 1
64232: PPUSH
64233: LD_VAR 0 3
64237: PPUSH
64238: CALL_OW 12
64242: ARRAY
64243: ST_TO_ADDR
// if Crawls ( un ) then
64244: LD_VAR 0 2
64248: PPUSH
64249: CALL_OW 318
64253: IFFALSE 64264
// ComWalk ( un ) ;
64255: LD_VAR 0 2
64259: PPUSH
64260: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64264: LD_VAR 0 2
64268: PPUSH
64269: LD_INT 5
64271: PPUSH
64272: CALL_OW 336
// end ;
64276: PPOPN 3
64278: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64279: LD_EXP 49
64283: PUSH
64284: LD_EXP 67
64288: AND
64289: PUSH
64290: LD_OWVAR 67
64294: PUSH
64295: LD_INT 4
64297: LESS
64298: AND
64299: IFFALSE 64318
64301: GO 64303
64303: DISABLE
// begin Difficulty := Difficulty + 1 ;
64304: LD_ADDR_OWVAR 67
64308: PUSH
64309: LD_OWVAR 67
64313: PUSH
64314: LD_INT 1
64316: PLUS
64317: ST_TO_ADDR
// end ;
64318: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64319: LD_EXP 49
64323: PUSH
64324: LD_EXP 68
64328: AND
64329: IFFALSE 64432
64331: GO 64333
64333: DISABLE
64334: LD_INT 0
64336: PPUSH
// begin for i := 1 to 5 do
64337: LD_ADDR_VAR 0 1
64341: PUSH
64342: DOUBLE
64343: LD_INT 1
64345: DEC
64346: ST_TO_ADDR
64347: LD_INT 5
64349: PUSH
64350: FOR_TO
64351: IFFALSE 64430
// begin uc_nation := nation_nature ;
64353: LD_ADDR_OWVAR 21
64357: PUSH
64358: LD_INT 0
64360: ST_TO_ADDR
// uc_side := 0 ;
64361: LD_ADDR_OWVAR 20
64365: PUSH
64366: LD_INT 0
64368: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64369: LD_ADDR_OWVAR 29
64373: PUSH
64374: LD_INT 12
64376: PUSH
64377: LD_INT 12
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: ST_TO_ADDR
// hc_agressivity := 20 ;
64384: LD_ADDR_OWVAR 35
64388: PUSH
64389: LD_INT 20
64391: ST_TO_ADDR
// hc_class := class_tiger ;
64392: LD_ADDR_OWVAR 28
64396: PUSH
64397: LD_INT 14
64399: ST_TO_ADDR
// hc_gallery :=  ;
64400: LD_ADDR_OWVAR 33
64404: PUSH
64405: LD_STRING 
64407: ST_TO_ADDR
// hc_name :=  ;
64408: LD_ADDR_OWVAR 26
64412: PUSH
64413: LD_STRING 
64415: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64416: CALL_OW 44
64420: PPUSH
64421: LD_INT 0
64423: PPUSH
64424: CALL_OW 51
// end ;
64428: GO 64350
64430: POP
64431: POP
// end ;
64432: PPOPN 1
64434: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64435: LD_EXP 49
64439: PUSH
64440: LD_EXP 69
64444: AND
64445: IFFALSE 64454
64447: GO 64449
64449: DISABLE
// StreamSibBomb ;
64450: CALL 64455 0 0
64454: END
// export function StreamSibBomb ; var i , x , y ; begin
64455: LD_INT 0
64457: PPUSH
64458: PPUSH
64459: PPUSH
64460: PPUSH
// result := false ;
64461: LD_ADDR_VAR 0 1
64465: PUSH
64466: LD_INT 0
64468: ST_TO_ADDR
// for i := 1 to 16 do
64469: LD_ADDR_VAR 0 2
64473: PUSH
64474: DOUBLE
64475: LD_INT 1
64477: DEC
64478: ST_TO_ADDR
64479: LD_INT 16
64481: PUSH
64482: FOR_TO
64483: IFFALSE 64682
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64485: LD_ADDR_VAR 0 3
64489: PUSH
64490: LD_INT 10
64492: PUSH
64493: LD_INT 20
64495: PUSH
64496: LD_INT 30
64498: PUSH
64499: LD_INT 40
64501: PUSH
64502: LD_INT 50
64504: PUSH
64505: LD_INT 60
64507: PUSH
64508: LD_INT 70
64510: PUSH
64511: LD_INT 80
64513: PUSH
64514: LD_INT 90
64516: PUSH
64517: LD_INT 100
64519: PUSH
64520: LD_INT 110
64522: PUSH
64523: LD_INT 120
64525: PUSH
64526: LD_INT 130
64528: PUSH
64529: LD_INT 140
64531: PUSH
64532: LD_INT 150
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PPUSH
64555: LD_INT 15
64557: PPUSH
64558: CALL_OW 12
64562: ARRAY
64563: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
64564: LD_ADDR_VAR 0 4
64568: PUSH
64569: LD_INT 10
64571: PUSH
64572: LD_INT 20
64574: PUSH
64575: LD_INT 30
64577: PUSH
64578: LD_INT 40
64580: PUSH
64581: LD_INT 50
64583: PUSH
64584: LD_INT 60
64586: PUSH
64587: LD_INT 70
64589: PUSH
64590: LD_INT 80
64592: PUSH
64593: LD_INT 90
64595: PUSH
64596: LD_INT 100
64598: PUSH
64599: LD_INT 110
64601: PUSH
64602: LD_INT 120
64604: PUSH
64605: LD_INT 130
64607: PUSH
64608: LD_INT 140
64610: PUSH
64611: LD_INT 150
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: LIST
64625: LIST
64626: LIST
64627: LIST
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 1
64633: PPUSH
64634: LD_INT 15
64636: PPUSH
64637: CALL_OW 12
64641: ARRAY
64642: ST_TO_ADDR
// if ValidHex ( x , y ) then
64643: LD_VAR 0 3
64647: PPUSH
64648: LD_VAR 0 4
64652: PPUSH
64653: CALL_OW 488
64657: IFFALSE 64680
// begin result := [ x , y ] ;
64659: LD_ADDR_VAR 0 1
64663: PUSH
64664: LD_VAR 0 3
64668: PUSH
64669: LD_VAR 0 4
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: ST_TO_ADDR
// break ;
64678: GO 64682
// end ; end ;
64680: GO 64482
64682: POP
64683: POP
// if result then
64684: LD_VAR 0 1
64688: IFFALSE 64748
// begin ToLua ( playSibBomb() ) ;
64690: LD_STRING playSibBomb()
64692: PPUSH
64693: CALL_OW 559
// wait ( 0 0$14 ) ;
64697: LD_INT 490
64699: PPUSH
64700: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
64704: LD_VAR 0 1
64708: PUSH
64709: LD_INT 1
64711: ARRAY
64712: PPUSH
64713: LD_VAR 0 1
64717: PUSH
64718: LD_INT 2
64720: ARRAY
64721: PPUSH
64722: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
64726: LD_VAR 0 1
64730: PUSH
64731: LD_INT 1
64733: ARRAY
64734: PPUSH
64735: LD_VAR 0 1
64739: PUSH
64740: LD_INT 2
64742: ARRAY
64743: PPUSH
64744: CALL_OW 429
// end ; end ;
64748: LD_VAR 0 1
64752: RET
// every 0 0$1 trigger StreamModeActive and sReset do
64753: LD_EXP 49
64757: PUSH
64758: LD_EXP 71
64762: AND
64763: IFFALSE 64775
64765: GO 64767
64767: DISABLE
// YouLost (  ) ;
64768: LD_STRING 
64770: PPUSH
64771: CALL_OW 104
64775: END
// every 0 0$1 trigger StreamModeActive and sFog do
64776: LD_EXP 49
64780: PUSH
64781: LD_EXP 70
64785: AND
64786: IFFALSE 64800
64788: GO 64790
64790: DISABLE
// FogOff ( your_side ) ;
64791: LD_OWVAR 2
64795: PPUSH
64796: CALL_OW 344
64800: END
// every 0 0$1 trigger StreamModeActive and sSun do
64801: LD_EXP 49
64805: PUSH
64806: LD_EXP 72
64810: AND
64811: IFFALSE 64839
64813: GO 64815
64815: DISABLE
// begin solar_recharge_percent := 0 ;
64816: LD_ADDR_OWVAR 79
64820: PUSH
64821: LD_INT 0
64823: ST_TO_ADDR
// wait ( 5 5$00 ) ;
64824: LD_INT 10500
64826: PPUSH
64827: CALL_OW 67
// solar_recharge_percent := 100 ;
64831: LD_ADDR_OWVAR 79
64835: PUSH
64836: LD_INT 100
64838: ST_TO_ADDR
// end ;
64839: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
64840: LD_EXP 49
64844: PUSH
64845: LD_EXP 73
64849: AND
64850: IFFALSE 65089
64852: GO 64854
64854: DISABLE
64855: LD_INT 0
64857: PPUSH
64858: PPUSH
64859: PPUSH
// begin tmp := [ ] ;
64860: LD_ADDR_VAR 0 3
64864: PUSH
64865: EMPTY
64866: ST_TO_ADDR
// for i := 1 to 6 do
64867: LD_ADDR_VAR 0 1
64871: PUSH
64872: DOUBLE
64873: LD_INT 1
64875: DEC
64876: ST_TO_ADDR
64877: LD_INT 6
64879: PUSH
64880: FOR_TO
64881: IFFALSE 64986
// begin uc_nation := nation_nature ;
64883: LD_ADDR_OWVAR 21
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// uc_side := 0 ;
64891: LD_ADDR_OWVAR 20
64895: PUSH
64896: LD_INT 0
64898: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64899: LD_ADDR_OWVAR 29
64903: PUSH
64904: LD_INT 12
64906: PUSH
64907: LD_INT 12
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: ST_TO_ADDR
// hc_agressivity := 20 ;
64914: LD_ADDR_OWVAR 35
64918: PUSH
64919: LD_INT 20
64921: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
64922: LD_ADDR_OWVAR 28
64926: PUSH
64927: LD_INT 17
64929: ST_TO_ADDR
// hc_gallery :=  ;
64930: LD_ADDR_OWVAR 33
64934: PUSH
64935: LD_STRING 
64937: ST_TO_ADDR
// hc_name :=  ;
64938: LD_ADDR_OWVAR 26
64942: PUSH
64943: LD_STRING 
64945: ST_TO_ADDR
// un := CreateHuman ;
64946: LD_ADDR_VAR 0 2
64950: PUSH
64951: CALL_OW 44
64955: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
64956: LD_VAR 0 2
64960: PPUSH
64961: LD_INT 1
64963: PPUSH
64964: CALL_OW 51
// tmp := tmp ^ un ;
64968: LD_ADDR_VAR 0 3
64972: PUSH
64973: LD_VAR 0 3
64977: PUSH
64978: LD_VAR 0 2
64982: ADD
64983: ST_TO_ADDR
// end ;
64984: GO 64880
64986: POP
64987: POP
// repeat wait ( 0 0$1 ) ;
64988: LD_INT 35
64990: PPUSH
64991: CALL_OW 67
// for un in tmp do
64995: LD_ADDR_VAR 0 2
64999: PUSH
65000: LD_VAR 0 3
65004: PUSH
65005: FOR_IN
65006: IFFALSE 65080
// begin if IsDead ( un ) then
65008: LD_VAR 0 2
65012: PPUSH
65013: CALL_OW 301
65017: IFFALSE 65037
// begin tmp := tmp diff un ;
65019: LD_ADDR_VAR 0 3
65023: PUSH
65024: LD_VAR 0 3
65028: PUSH
65029: LD_VAR 0 2
65033: DIFF
65034: ST_TO_ADDR
// continue ;
65035: GO 65005
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65037: LD_VAR 0 2
65041: PPUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 22
65047: PUSH
65048: LD_INT 0
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PPUSH
65059: CALL_OW 69
65063: PPUSH
65064: LD_VAR 0 2
65068: PPUSH
65069: CALL_OW 74
65073: PPUSH
65074: CALL_OW 115
// end ;
65078: GO 65005
65080: POP
65081: POP
// until not tmp ;
65082: LD_VAR 0 3
65086: NOT
65087: IFFALSE 64988
// end ;
65089: PPOPN 3
65091: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65092: LD_EXP 49
65096: PUSH
65097: LD_EXP 74
65101: AND
65102: IFFALSE 65156
65104: GO 65106
65106: DISABLE
// begin ToLua ( displayTroll(); ) ;
65107: LD_STRING displayTroll();
65109: PPUSH
65110: CALL_OW 559
// wait ( 3 3$00 ) ;
65114: LD_INT 6300
65116: PPUSH
65117: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65121: LD_STRING hideTroll();
65123: PPUSH
65124: CALL_OW 559
// wait ( 1 1$00 ) ;
65128: LD_INT 2100
65130: PPUSH
65131: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65135: LD_STRING displayTroll();
65137: PPUSH
65138: CALL_OW 559
// wait ( 1 1$00 ) ;
65142: LD_INT 2100
65144: PPUSH
65145: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65149: LD_STRING hideTroll();
65151: PPUSH
65152: CALL_OW 559
// end ;
65156: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65157: LD_EXP 49
65161: PUSH
65162: LD_EXP 75
65166: AND
65167: IFFALSE 65230
65169: GO 65171
65171: DISABLE
65172: LD_INT 0
65174: PPUSH
// begin p := 0 ;
65175: LD_ADDR_VAR 0 1
65179: PUSH
65180: LD_INT 0
65182: ST_TO_ADDR
// repeat game_speed := 1 ;
65183: LD_ADDR_OWVAR 65
65187: PUSH
65188: LD_INT 1
65190: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65191: LD_INT 35
65193: PPUSH
65194: CALL_OW 67
// p := p + 1 ;
65198: LD_ADDR_VAR 0 1
65202: PUSH
65203: LD_VAR 0 1
65207: PUSH
65208: LD_INT 1
65210: PLUS
65211: ST_TO_ADDR
// until p >= 60 ;
65212: LD_VAR 0 1
65216: PUSH
65217: LD_INT 60
65219: GREATEREQUAL
65220: IFFALSE 65183
// game_speed := 4 ;
65222: LD_ADDR_OWVAR 65
65226: PUSH
65227: LD_INT 4
65229: ST_TO_ADDR
// end ;
65230: PPOPN 1
65232: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65233: LD_EXP 49
65237: PUSH
65238: LD_EXP 76
65242: AND
65243: IFFALSE 65389
65245: GO 65247
65247: DISABLE
65248: LD_INT 0
65250: PPUSH
65251: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65252: LD_ADDR_VAR 0 1
65256: PUSH
65257: LD_INT 22
65259: PUSH
65260: LD_OWVAR 2
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: PUSH
65272: LD_INT 30
65274: PUSH
65275: LD_INT 0
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 30
65284: PUSH
65285: LD_INT 1
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PPUSH
65301: CALL_OW 69
65305: ST_TO_ADDR
// if not depot then
65306: LD_VAR 0 1
65310: NOT
65311: IFFALSE 65315
// exit ;
65313: GO 65389
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65315: LD_ADDR_VAR 0 2
65319: PUSH
65320: LD_VAR 0 1
65324: PUSH
65325: LD_INT 1
65327: PPUSH
65328: LD_VAR 0 1
65332: PPUSH
65333: CALL_OW 12
65337: ARRAY
65338: PPUSH
65339: CALL_OW 274
65343: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65344: LD_VAR 0 2
65348: PPUSH
65349: LD_INT 1
65351: PPUSH
65352: LD_INT 0
65354: PPUSH
65355: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65359: LD_VAR 0 2
65363: PPUSH
65364: LD_INT 2
65366: PPUSH
65367: LD_INT 0
65369: PPUSH
65370: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65374: LD_VAR 0 2
65378: PPUSH
65379: LD_INT 3
65381: PPUSH
65382: LD_INT 0
65384: PPUSH
65385: CALL_OW 277
// end ;
65389: PPOPN 2
65391: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65392: LD_EXP 49
65396: PUSH
65397: LD_EXP 77
65401: AND
65402: IFFALSE 65499
65404: GO 65406
65406: DISABLE
65407: LD_INT 0
65409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65410: LD_ADDR_VAR 0 1
65414: PUSH
65415: LD_INT 22
65417: PUSH
65418: LD_OWVAR 2
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: PUSH
65427: LD_INT 21
65429: PUSH
65430: LD_INT 1
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: PUSH
65437: LD_INT 3
65439: PUSH
65440: LD_INT 23
65442: PUSH
65443: LD_INT 0
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: LIST
65458: PPUSH
65459: CALL_OW 69
65463: ST_TO_ADDR
// if not tmp then
65464: LD_VAR 0 1
65468: NOT
65469: IFFALSE 65473
// exit ;
65471: GO 65499
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
65473: LD_VAR 0 1
65477: PUSH
65478: LD_INT 1
65480: PPUSH
65481: LD_VAR 0 1
65485: PPUSH
65486: CALL_OW 12
65490: ARRAY
65491: PPUSH
65492: LD_INT 200
65494: PPUSH
65495: CALL_OW 234
// end ;
65499: PPOPN 1
65501: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
65502: LD_EXP 49
65506: PUSH
65507: LD_EXP 78
65511: AND
65512: IFFALSE 65591
65514: GO 65516
65516: DISABLE
65517: LD_INT 0
65519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
65520: LD_ADDR_VAR 0 1
65524: PUSH
65525: LD_INT 22
65527: PUSH
65528: LD_OWVAR 2
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 21
65539: PUSH
65540: LD_INT 2
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: EMPTY
65548: LIST
65549: LIST
65550: PPUSH
65551: CALL_OW 69
65555: ST_TO_ADDR
// if not tmp then
65556: LD_VAR 0 1
65560: NOT
65561: IFFALSE 65565
// exit ;
65563: GO 65591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
65565: LD_VAR 0 1
65569: PUSH
65570: LD_INT 1
65572: PPUSH
65573: LD_VAR 0 1
65577: PPUSH
65578: CALL_OW 12
65582: ARRAY
65583: PPUSH
65584: LD_INT 60
65586: PPUSH
65587: CALL_OW 234
// end ;
65591: PPOPN 1
65593: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
65594: LD_EXP 49
65598: PUSH
65599: LD_EXP 79
65603: AND
65604: IFFALSE 65703
65606: GO 65608
65608: DISABLE
65609: LD_INT 0
65611: PPUSH
65612: PPUSH
// begin enable ;
65613: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
65614: LD_ADDR_VAR 0 1
65618: PUSH
65619: LD_INT 22
65621: PUSH
65622: LD_OWVAR 2
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: LD_INT 61
65633: PUSH
65634: EMPTY
65635: LIST
65636: PUSH
65637: LD_INT 33
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: LIST
65651: PPUSH
65652: CALL_OW 69
65656: ST_TO_ADDR
// if not tmp then
65657: LD_VAR 0 1
65661: NOT
65662: IFFALSE 65666
// exit ;
65664: GO 65703
// for i in tmp do
65666: LD_ADDR_VAR 0 2
65670: PUSH
65671: LD_VAR 0 1
65675: PUSH
65676: FOR_IN
65677: IFFALSE 65701
// if IsControledBy ( i ) then
65679: LD_VAR 0 2
65683: PPUSH
65684: CALL_OW 312
65688: IFFALSE 65699
// ComUnlink ( i ) ;
65690: LD_VAR 0 2
65694: PPUSH
65695: CALL_OW 136
65699: GO 65676
65701: POP
65702: POP
// end ;
65703: PPOPN 2
65705: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
65706: LD_EXP 49
65710: PUSH
65711: LD_EXP 80
65715: AND
65716: IFFALSE 65856
65718: GO 65720
65720: DISABLE
65721: LD_INT 0
65723: PPUSH
65724: PPUSH
// begin ToLua ( displayPowell(); ) ;
65725: LD_STRING displayPowell();
65727: PPUSH
65728: CALL_OW 559
// uc_side := 0 ;
65732: LD_ADDR_OWVAR 20
65736: PUSH
65737: LD_INT 0
65739: ST_TO_ADDR
// uc_nation := 2 ;
65740: LD_ADDR_OWVAR 21
65744: PUSH
65745: LD_INT 2
65747: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
65748: LD_ADDR_OWVAR 37
65752: PUSH
65753: LD_INT 14
65755: ST_TO_ADDR
// vc_engine := engine_siberite ;
65756: LD_ADDR_OWVAR 39
65760: PUSH
65761: LD_INT 3
65763: ST_TO_ADDR
// vc_control := control_apeman ;
65764: LD_ADDR_OWVAR 38
65768: PUSH
65769: LD_INT 5
65771: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
65772: LD_ADDR_OWVAR 40
65776: PUSH
65777: LD_INT 29
65779: ST_TO_ADDR
// un := CreateVehicle ;
65780: LD_ADDR_VAR 0 2
65784: PUSH
65785: CALL_OW 45
65789: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65790: LD_VAR 0 2
65794: PPUSH
65795: LD_INT 1
65797: PPUSH
65798: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65802: LD_INT 35
65804: PPUSH
65805: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65809: LD_VAR 0 2
65813: PPUSH
65814: LD_INT 22
65816: PUSH
65817: LD_OWVAR 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PPUSH
65826: CALL_OW 69
65830: PPUSH
65831: LD_VAR 0 2
65835: PPUSH
65836: CALL_OW 74
65840: PPUSH
65841: CALL_OW 115
// until IsDead ( un ) ;
65845: LD_VAR 0 2
65849: PPUSH
65850: CALL_OW 301
65854: IFFALSE 65802
// end ;
65856: PPOPN 2
65858: END
// every 0 0$1 trigger StreamModeActive and sStu do
65859: LD_EXP 49
65863: PUSH
65864: LD_EXP 88
65868: AND
65869: IFFALSE 65885
65871: GO 65873
65873: DISABLE
// begin ToLua ( displayStucuk(); ) ;
65874: LD_STRING displayStucuk();
65876: PPUSH
65877: CALL_OW 559
// ResetFog ;
65881: CALL_OW 335
// end ;
65885: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
65886: LD_EXP 49
65890: PUSH
65891: LD_EXP 81
65895: AND
65896: IFFALSE 66037
65898: GO 65900
65900: DISABLE
65901: LD_INT 0
65903: PPUSH
65904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65905: LD_ADDR_VAR 0 2
65909: PUSH
65910: LD_INT 22
65912: PUSH
65913: LD_OWVAR 2
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 21
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PPUSH
65936: CALL_OW 69
65940: ST_TO_ADDR
// if not tmp then
65941: LD_VAR 0 2
65945: NOT
65946: IFFALSE 65950
// exit ;
65948: GO 66037
// un := tmp [ rand ( 1 , tmp ) ] ;
65950: LD_ADDR_VAR 0 1
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: LD_INT 1
65962: PPUSH
65963: LD_VAR 0 2
65967: PPUSH
65968: CALL_OW 12
65972: ARRAY
65973: ST_TO_ADDR
// SetSide ( un , 0 ) ;
65974: LD_VAR 0 1
65978: PPUSH
65979: LD_INT 0
65981: PPUSH
65982: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
65986: LD_VAR 0 1
65990: PPUSH
65991: LD_OWVAR 3
65995: PUSH
65996: LD_VAR 0 1
66000: DIFF
66001: PPUSH
66002: LD_VAR 0 1
66006: PPUSH
66007: CALL_OW 74
66011: PPUSH
66012: CALL_OW 115
// wait ( 0 0$20 ) ;
66016: LD_INT 700
66018: PPUSH
66019: CALL_OW 67
// SetSide ( un , your_side ) ;
66023: LD_VAR 0 1
66027: PPUSH
66028: LD_OWVAR 2
66032: PPUSH
66033: CALL_OW 235
// end ;
66037: PPOPN 2
66039: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66040: LD_EXP 49
66044: PUSH
66045: LD_EXP 82
66049: AND
66050: IFFALSE 66156
66052: GO 66054
66054: DISABLE
66055: LD_INT 0
66057: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66058: LD_ADDR_VAR 0 1
66062: PUSH
66063: LD_INT 22
66065: PUSH
66066: LD_OWVAR 2
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: LD_INT 30
66080: PUSH
66081: LD_INT 0
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 30
66090: PUSH
66091: LD_INT 1
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: LIST
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PPUSH
66107: CALL_OW 69
66111: ST_TO_ADDR
// if not depot then
66112: LD_VAR 0 1
66116: NOT
66117: IFFALSE 66121
// exit ;
66119: GO 66156
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66121: LD_VAR 0 1
66125: PUSH
66126: LD_INT 1
66128: ARRAY
66129: PPUSH
66130: CALL_OW 250
66134: PPUSH
66135: LD_VAR 0 1
66139: PUSH
66140: LD_INT 1
66142: ARRAY
66143: PPUSH
66144: CALL_OW 251
66148: PPUSH
66149: LD_INT 70
66151: PPUSH
66152: CALL_OW 495
// end ;
66156: PPOPN 1
66158: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66159: LD_EXP 49
66163: PUSH
66164: LD_EXP 83
66168: AND
66169: IFFALSE 66380
66171: GO 66173
66173: DISABLE
66174: LD_INT 0
66176: PPUSH
66177: PPUSH
66178: PPUSH
66179: PPUSH
66180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66181: LD_ADDR_VAR 0 5
66185: PUSH
66186: LD_INT 22
66188: PUSH
66189: LD_OWVAR 2
66193: PUSH
66194: EMPTY
66195: LIST
66196: LIST
66197: PUSH
66198: LD_INT 21
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PPUSH
66212: CALL_OW 69
66216: ST_TO_ADDR
// if not tmp then
66217: LD_VAR 0 5
66221: NOT
66222: IFFALSE 66226
// exit ;
66224: GO 66380
// for i in tmp do
66226: LD_ADDR_VAR 0 1
66230: PUSH
66231: LD_VAR 0 5
66235: PUSH
66236: FOR_IN
66237: IFFALSE 66378
// begin d := rand ( 0 , 5 ) ;
66239: LD_ADDR_VAR 0 4
66243: PUSH
66244: LD_INT 0
66246: PPUSH
66247: LD_INT 5
66249: PPUSH
66250: CALL_OW 12
66254: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66255: LD_ADDR_VAR 0 2
66259: PUSH
66260: LD_VAR 0 1
66264: PPUSH
66265: CALL_OW 250
66269: PPUSH
66270: LD_VAR 0 4
66274: PPUSH
66275: LD_INT 3
66277: PPUSH
66278: LD_INT 12
66280: PPUSH
66281: CALL_OW 12
66285: PPUSH
66286: CALL_OW 272
66290: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66291: LD_ADDR_VAR 0 3
66295: PUSH
66296: LD_VAR 0 1
66300: PPUSH
66301: CALL_OW 251
66305: PPUSH
66306: LD_VAR 0 4
66310: PPUSH
66311: LD_INT 3
66313: PPUSH
66314: LD_INT 12
66316: PPUSH
66317: CALL_OW 12
66321: PPUSH
66322: CALL_OW 273
66326: ST_TO_ADDR
// if ValidHex ( x , y ) then
66327: LD_VAR 0 2
66331: PPUSH
66332: LD_VAR 0 3
66336: PPUSH
66337: CALL_OW 488
66341: IFFALSE 66376
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66343: LD_VAR 0 1
66347: PPUSH
66348: LD_VAR 0 2
66352: PPUSH
66353: LD_VAR 0 3
66357: PPUSH
66358: LD_INT 3
66360: PPUSH
66361: LD_INT 6
66363: PPUSH
66364: CALL_OW 12
66368: PPUSH
66369: LD_INT 1
66371: PPUSH
66372: CALL_OW 483
// end ;
66376: GO 66236
66378: POP
66379: POP
// end ;
66380: PPOPN 5
66382: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66383: LD_EXP 49
66387: PUSH
66388: LD_EXP 84
66392: AND
66393: IFFALSE 66487
66395: GO 66397
66397: DISABLE
66398: LD_INT 0
66400: PPUSH
66401: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66402: LD_ADDR_VAR 0 2
66406: PUSH
66407: LD_INT 22
66409: PUSH
66410: LD_OWVAR 2
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 32
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 21
66431: PUSH
66432: LD_INT 2
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: LIST
66443: PPUSH
66444: CALL_OW 69
66448: ST_TO_ADDR
// if not tmp then
66449: LD_VAR 0 2
66453: NOT
66454: IFFALSE 66458
// exit ;
66456: GO 66487
// for i in tmp do
66458: LD_ADDR_VAR 0 1
66462: PUSH
66463: LD_VAR 0 2
66467: PUSH
66468: FOR_IN
66469: IFFALSE 66485
// SetFuel ( i , 0 ) ;
66471: LD_VAR 0 1
66475: PPUSH
66476: LD_INT 0
66478: PPUSH
66479: CALL_OW 240
66483: GO 66468
66485: POP
66486: POP
// end ;
66487: PPOPN 2
66489: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
66490: LD_EXP 49
66494: PUSH
66495: LD_EXP 85
66499: AND
66500: IFFALSE 66566
66502: GO 66504
66504: DISABLE
66505: LD_INT 0
66507: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
66508: LD_ADDR_VAR 0 1
66512: PUSH
66513: LD_INT 22
66515: PUSH
66516: LD_OWVAR 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 30
66527: PUSH
66528: LD_INT 29
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PPUSH
66539: CALL_OW 69
66543: ST_TO_ADDR
// if not tmp then
66544: LD_VAR 0 1
66548: NOT
66549: IFFALSE 66553
// exit ;
66551: GO 66566
// DestroyUnit ( tmp [ 1 ] ) ;
66553: LD_VAR 0 1
66557: PUSH
66558: LD_INT 1
66560: ARRAY
66561: PPUSH
66562: CALL_OW 65
// end ;
66566: PPOPN 1
66568: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
66569: LD_EXP 49
66573: PUSH
66574: LD_EXP 87
66578: AND
66579: IFFALSE 66708
66581: GO 66583
66583: DISABLE
66584: LD_INT 0
66586: PPUSH
// begin uc_side := 0 ;
66587: LD_ADDR_OWVAR 20
66591: PUSH
66592: LD_INT 0
66594: ST_TO_ADDR
// uc_nation := nation_arabian ;
66595: LD_ADDR_OWVAR 21
66599: PUSH
66600: LD_INT 2
66602: ST_TO_ADDR
// hc_gallery :=  ;
66603: LD_ADDR_OWVAR 33
66607: PUSH
66608: LD_STRING 
66610: ST_TO_ADDR
// hc_name :=  ;
66611: LD_ADDR_OWVAR 26
66615: PUSH
66616: LD_STRING 
66618: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
66619: LD_INT 1
66621: PPUSH
66622: LD_INT 11
66624: PPUSH
66625: LD_INT 10
66627: PPUSH
66628: CALL_OW 380
// un := CreateHuman ;
66632: LD_ADDR_VAR 0 1
66636: PUSH
66637: CALL_OW 44
66641: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66642: LD_VAR 0 1
66646: PPUSH
66647: LD_INT 1
66649: PPUSH
66650: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66654: LD_INT 35
66656: PPUSH
66657: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66661: LD_VAR 0 1
66665: PPUSH
66666: LD_INT 22
66668: PUSH
66669: LD_OWVAR 2
66673: PUSH
66674: EMPTY
66675: LIST
66676: LIST
66677: PPUSH
66678: CALL_OW 69
66682: PPUSH
66683: LD_VAR 0 1
66687: PPUSH
66688: CALL_OW 74
66692: PPUSH
66693: CALL_OW 115
// until IsDead ( un ) ;
66697: LD_VAR 0 1
66701: PPUSH
66702: CALL_OW 301
66706: IFFALSE 66654
// end ;
66708: PPOPN 1
66710: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
66711: LD_EXP 49
66715: PUSH
66716: LD_EXP 89
66720: AND
66721: IFFALSE 66733
66723: GO 66725
66725: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
66726: LD_STRING earthquake(getX(game), 0, 32)
66728: PPUSH
66729: CALL_OW 559
66733: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
66734: LD_EXP 49
66738: PUSH
66739: LD_EXP 90
66743: AND
66744: IFFALSE 66835
66746: GO 66748
66748: DISABLE
66749: LD_INT 0
66751: PPUSH
// begin enable ;
66752: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
66753: LD_ADDR_VAR 0 1
66757: PUSH
66758: LD_INT 22
66760: PUSH
66761: LD_OWVAR 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 21
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 33
66782: PUSH
66783: LD_INT 3
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: PPUSH
66795: CALL_OW 69
66799: ST_TO_ADDR
// if not tmp then
66800: LD_VAR 0 1
66804: NOT
66805: IFFALSE 66809
// exit ;
66807: GO 66835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66809: LD_VAR 0 1
66813: PUSH
66814: LD_INT 1
66816: PPUSH
66817: LD_VAR 0 1
66821: PPUSH
66822: CALL_OW 12
66826: ARRAY
66827: PPUSH
66828: LD_INT 1
66830: PPUSH
66831: CALL_OW 234
// end ;
66835: PPOPN 1
66837: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
66838: LD_EXP 49
66842: PUSH
66843: LD_EXP 91
66847: AND
66848: IFFALSE 66989
66850: GO 66852
66852: DISABLE
66853: LD_INT 0
66855: PPUSH
66856: PPUSH
66857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66858: LD_ADDR_VAR 0 3
66862: PUSH
66863: LD_INT 22
66865: PUSH
66866: LD_OWVAR 2
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 25
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PPUSH
66889: CALL_OW 69
66893: ST_TO_ADDR
// if not tmp then
66894: LD_VAR 0 3
66898: NOT
66899: IFFALSE 66903
// exit ;
66901: GO 66989
// un := tmp [ rand ( 1 , tmp ) ] ;
66903: LD_ADDR_VAR 0 2
66907: PUSH
66908: LD_VAR 0 3
66912: PUSH
66913: LD_INT 1
66915: PPUSH
66916: LD_VAR 0 3
66920: PPUSH
66921: CALL_OW 12
66925: ARRAY
66926: ST_TO_ADDR
// if Crawls ( un ) then
66927: LD_VAR 0 2
66931: PPUSH
66932: CALL_OW 318
66936: IFFALSE 66947
// ComWalk ( un ) ;
66938: LD_VAR 0 2
66942: PPUSH
66943: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
66947: LD_VAR 0 2
66951: PPUSH
66952: LD_INT 9
66954: PPUSH
66955: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
66959: LD_INT 28
66961: PPUSH
66962: LD_OWVAR 2
66966: PPUSH
66967: LD_INT 2
66969: PPUSH
66970: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
66974: LD_INT 29
66976: PPUSH
66977: LD_OWVAR 2
66981: PPUSH
66982: LD_INT 2
66984: PPUSH
66985: CALL_OW 322
// end ;
66989: PPOPN 3
66991: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
66992: LD_EXP 49
66996: PUSH
66997: LD_EXP 92
67001: AND
67002: IFFALSE 67113
67004: GO 67006
67006: DISABLE
67007: LD_INT 0
67009: PPUSH
67010: PPUSH
67011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67012: LD_ADDR_VAR 0 3
67016: PUSH
67017: LD_INT 22
67019: PUSH
67020: LD_OWVAR 2
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 25
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PPUSH
67043: CALL_OW 69
67047: ST_TO_ADDR
// if not tmp then
67048: LD_VAR 0 3
67052: NOT
67053: IFFALSE 67057
// exit ;
67055: GO 67113
// un := tmp [ rand ( 1 , tmp ) ] ;
67057: LD_ADDR_VAR 0 2
67061: PUSH
67062: LD_VAR 0 3
67066: PUSH
67067: LD_INT 1
67069: PPUSH
67070: LD_VAR 0 3
67074: PPUSH
67075: CALL_OW 12
67079: ARRAY
67080: ST_TO_ADDR
// if Crawls ( un ) then
67081: LD_VAR 0 2
67085: PPUSH
67086: CALL_OW 318
67090: IFFALSE 67101
// ComWalk ( un ) ;
67092: LD_VAR 0 2
67096: PPUSH
67097: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67101: LD_VAR 0 2
67105: PPUSH
67106: LD_INT 8
67108: PPUSH
67109: CALL_OW 336
// end ;
67113: PPOPN 3
67115: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67116: LD_EXP 49
67120: PUSH
67121: LD_EXP 93
67125: AND
67126: IFFALSE 67270
67128: GO 67130
67130: DISABLE
67131: LD_INT 0
67133: PPUSH
67134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67135: LD_ADDR_VAR 0 2
67139: PUSH
67140: LD_INT 22
67142: PUSH
67143: LD_OWVAR 2
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 21
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 2
67164: PUSH
67165: LD_INT 34
67167: PUSH
67168: LD_INT 12
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 34
67177: PUSH
67178: LD_INT 51
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 34
67187: PUSH
67188: LD_INT 32
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: EMPTY
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: LIST
67205: PPUSH
67206: CALL_OW 69
67210: ST_TO_ADDR
// if not tmp then
67211: LD_VAR 0 2
67215: NOT
67216: IFFALSE 67220
// exit ;
67218: GO 67270
// for i in tmp do
67220: LD_ADDR_VAR 0 1
67224: PUSH
67225: LD_VAR 0 2
67229: PUSH
67230: FOR_IN
67231: IFFALSE 67268
// if GetCargo ( i , mat_artifact ) = 0 then
67233: LD_VAR 0 1
67237: PPUSH
67238: LD_INT 4
67240: PPUSH
67241: CALL_OW 289
67245: PUSH
67246: LD_INT 0
67248: EQUAL
67249: IFFALSE 67266
// SetCargo ( i , mat_siberit , 100 ) ;
67251: LD_VAR 0 1
67255: PPUSH
67256: LD_INT 3
67258: PPUSH
67259: LD_INT 100
67261: PPUSH
67262: CALL_OW 290
67266: GO 67230
67268: POP
67269: POP
// end ;
67270: PPOPN 2
67272: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67273: LD_EXP 49
67277: PUSH
67278: LD_EXP 94
67282: AND
67283: IFFALSE 67466
67285: GO 67287
67287: DISABLE
67288: LD_INT 0
67290: PPUSH
67291: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67292: LD_ADDR_VAR 0 2
67296: PUSH
67297: LD_INT 22
67299: PUSH
67300: LD_OWVAR 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PPUSH
67309: CALL_OW 69
67313: ST_TO_ADDR
// if not tmp then
67314: LD_VAR 0 2
67318: NOT
67319: IFFALSE 67323
// exit ;
67321: GO 67466
// for i := 1 to 2 do
67323: LD_ADDR_VAR 0 1
67327: PUSH
67328: DOUBLE
67329: LD_INT 1
67331: DEC
67332: ST_TO_ADDR
67333: LD_INT 2
67335: PUSH
67336: FOR_TO
67337: IFFALSE 67464
// begin uc_side := your_side ;
67339: LD_ADDR_OWVAR 20
67343: PUSH
67344: LD_OWVAR 2
67348: ST_TO_ADDR
// uc_nation := nation_american ;
67349: LD_ADDR_OWVAR 21
67353: PUSH
67354: LD_INT 1
67356: ST_TO_ADDR
// vc_chassis := us_morphling ;
67357: LD_ADDR_OWVAR 37
67361: PUSH
67362: LD_INT 5
67364: ST_TO_ADDR
// vc_engine := engine_siberite ;
67365: LD_ADDR_OWVAR 39
67369: PUSH
67370: LD_INT 3
67372: ST_TO_ADDR
// vc_control := control_computer ;
67373: LD_ADDR_OWVAR 38
67377: PUSH
67378: LD_INT 3
67380: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67381: LD_ADDR_OWVAR 40
67385: PUSH
67386: LD_INT 10
67388: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67389: LD_VAR 0 2
67393: PUSH
67394: LD_INT 1
67396: ARRAY
67397: PPUSH
67398: CALL_OW 310
67402: NOT
67403: IFFALSE 67450
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67405: CALL_OW 45
67409: PPUSH
67410: LD_VAR 0 2
67414: PUSH
67415: LD_INT 1
67417: ARRAY
67418: PPUSH
67419: CALL_OW 250
67423: PPUSH
67424: LD_VAR 0 2
67428: PUSH
67429: LD_INT 1
67431: ARRAY
67432: PPUSH
67433: CALL_OW 251
67437: PPUSH
67438: LD_INT 12
67440: PPUSH
67441: LD_INT 1
67443: PPUSH
67444: CALL_OW 50
67448: GO 67462
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
67450: CALL_OW 45
67454: PPUSH
67455: LD_INT 1
67457: PPUSH
67458: CALL_OW 51
// end ;
67462: GO 67336
67464: POP
67465: POP
// end ;
67466: PPOPN 2
67468: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
67469: LD_EXP 49
67473: PUSH
67474: LD_EXP 95
67478: AND
67479: IFFALSE 67701
67481: GO 67483
67483: DISABLE
67484: LD_INT 0
67486: PPUSH
67487: PPUSH
67488: PPUSH
67489: PPUSH
67490: PPUSH
67491: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67492: LD_ADDR_VAR 0 6
67496: PUSH
67497: LD_INT 22
67499: PUSH
67500: LD_OWVAR 2
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 21
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 3
67521: PUSH
67522: LD_INT 23
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: LIST
67540: PPUSH
67541: CALL_OW 69
67545: ST_TO_ADDR
// if not tmp then
67546: LD_VAR 0 6
67550: NOT
67551: IFFALSE 67555
// exit ;
67553: GO 67701
// s1 := rand ( 1 , 4 ) ;
67555: LD_ADDR_VAR 0 2
67559: PUSH
67560: LD_INT 1
67562: PPUSH
67563: LD_INT 4
67565: PPUSH
67566: CALL_OW 12
67570: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
67571: LD_ADDR_VAR 0 4
67575: PUSH
67576: LD_VAR 0 6
67580: PUSH
67581: LD_INT 1
67583: ARRAY
67584: PPUSH
67585: LD_VAR 0 2
67589: PPUSH
67590: CALL_OW 259
67594: ST_TO_ADDR
// if s1 = 1 then
67595: LD_VAR 0 2
67599: PUSH
67600: LD_INT 1
67602: EQUAL
67603: IFFALSE 67623
// s2 := rand ( 2 , 4 ) else
67605: LD_ADDR_VAR 0 3
67609: PUSH
67610: LD_INT 2
67612: PPUSH
67613: LD_INT 4
67615: PPUSH
67616: CALL_OW 12
67620: ST_TO_ADDR
67621: GO 67631
// s2 := 1 ;
67623: LD_ADDR_VAR 0 3
67627: PUSH
67628: LD_INT 1
67630: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
67631: LD_ADDR_VAR 0 5
67635: PUSH
67636: LD_VAR 0 6
67640: PUSH
67641: LD_INT 1
67643: ARRAY
67644: PPUSH
67645: LD_VAR 0 3
67649: PPUSH
67650: CALL_OW 259
67654: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
67655: LD_VAR 0 6
67659: PUSH
67660: LD_INT 1
67662: ARRAY
67663: PPUSH
67664: LD_VAR 0 2
67668: PPUSH
67669: LD_VAR 0 5
67673: PPUSH
67674: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
67678: LD_VAR 0 6
67682: PUSH
67683: LD_INT 1
67685: ARRAY
67686: PPUSH
67687: LD_VAR 0 3
67691: PPUSH
67692: LD_VAR 0 4
67696: PPUSH
67697: CALL_OW 237
// end ;
67701: PPOPN 6
67703: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
67704: LD_EXP 49
67708: PUSH
67709: LD_EXP 96
67713: AND
67714: IFFALSE 67793
67716: GO 67718
67718: DISABLE
67719: LD_INT 0
67721: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
67722: LD_ADDR_VAR 0 1
67726: PUSH
67727: LD_INT 22
67729: PUSH
67730: LD_OWVAR 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 30
67741: PUSH
67742: LD_INT 3
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PPUSH
67753: CALL_OW 69
67757: ST_TO_ADDR
// if not tmp then
67758: LD_VAR 0 1
67762: NOT
67763: IFFALSE 67767
// exit ;
67765: GO 67793
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67767: LD_VAR 0 1
67771: PUSH
67772: LD_INT 1
67774: PPUSH
67775: LD_VAR 0 1
67779: PPUSH
67780: CALL_OW 12
67784: ARRAY
67785: PPUSH
67786: LD_INT 1
67788: PPUSH
67789: CALL_OW 234
// end ;
67793: PPOPN 1
67795: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
67796: LD_EXP 49
67800: PUSH
67801: LD_EXP 97
67805: AND
67806: IFFALSE 67918
67808: GO 67810
67810: DISABLE
67811: LD_INT 0
67813: PPUSH
67814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
67815: LD_ADDR_VAR 0 2
67819: PUSH
67820: LD_INT 22
67822: PUSH
67823: LD_OWVAR 2
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: LD_INT 30
67837: PUSH
67838: LD_INT 27
67840: PUSH
67841: EMPTY
67842: LIST
67843: LIST
67844: PUSH
67845: LD_INT 30
67847: PUSH
67848: LD_INT 26
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 30
67857: PUSH
67858: LD_INT 28
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PPUSH
67875: CALL_OW 69
67879: ST_TO_ADDR
// if not tmp then
67880: LD_VAR 0 2
67884: NOT
67885: IFFALSE 67889
// exit ;
67887: GO 67918
// for i in tmp do
67889: LD_ADDR_VAR 0 1
67893: PUSH
67894: LD_VAR 0 2
67898: PUSH
67899: FOR_IN
67900: IFFALSE 67916
// SetLives ( i , 1 ) ;
67902: LD_VAR 0 1
67906: PPUSH
67907: LD_INT 1
67909: PPUSH
67910: CALL_OW 234
67914: GO 67899
67916: POP
67917: POP
// end ;
67918: PPOPN 2
67920: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
67921: LD_EXP 49
67925: PUSH
67926: LD_EXP 98
67930: AND
67931: IFFALSE 68218
67933: GO 67935
67935: DISABLE
67936: LD_INT 0
67938: PPUSH
67939: PPUSH
67940: PPUSH
// begin i := rand ( 1 , 7 ) ;
67941: LD_ADDR_VAR 0 1
67945: PUSH
67946: LD_INT 1
67948: PPUSH
67949: LD_INT 7
67951: PPUSH
67952: CALL_OW 12
67956: ST_TO_ADDR
// case i of 1 :
67957: LD_VAR 0 1
67961: PUSH
67962: LD_INT 1
67964: DOUBLE
67965: EQUAL
67966: IFTRUE 67970
67968: GO 67980
67970: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
67971: LD_STRING earthquake(getX(game), 0, 32)
67973: PPUSH
67974: CALL_OW 559
67978: GO 68218
67980: LD_INT 2
67982: DOUBLE
67983: EQUAL
67984: IFTRUE 67988
67986: GO 68002
67988: POP
// begin ToLua ( displayStucuk(); ) ;
67989: LD_STRING displayStucuk();
67991: PPUSH
67992: CALL_OW 559
// ResetFog ;
67996: CALL_OW 335
// end ; 3 :
68000: GO 68218
68002: LD_INT 3
68004: DOUBLE
68005: EQUAL
68006: IFTRUE 68010
68008: GO 68114
68010: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68011: LD_ADDR_VAR 0 2
68015: PUSH
68016: LD_INT 22
68018: PUSH
68019: LD_OWVAR 2
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 25
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PPUSH
68042: CALL_OW 69
68046: ST_TO_ADDR
// if not tmp then
68047: LD_VAR 0 2
68051: NOT
68052: IFFALSE 68056
// exit ;
68054: GO 68218
// un := tmp [ rand ( 1 , tmp ) ] ;
68056: LD_ADDR_VAR 0 3
68060: PUSH
68061: LD_VAR 0 2
68065: PUSH
68066: LD_INT 1
68068: PPUSH
68069: LD_VAR 0 2
68073: PPUSH
68074: CALL_OW 12
68078: ARRAY
68079: ST_TO_ADDR
// if Crawls ( un ) then
68080: LD_VAR 0 3
68084: PPUSH
68085: CALL_OW 318
68089: IFFALSE 68100
// ComWalk ( un ) ;
68091: LD_VAR 0 3
68095: PPUSH
68096: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68100: LD_VAR 0 3
68104: PPUSH
68105: LD_INT 8
68107: PPUSH
68108: CALL_OW 336
// end ; 4 :
68112: GO 68218
68114: LD_INT 4
68116: DOUBLE
68117: EQUAL
68118: IFTRUE 68122
68120: GO 68196
68122: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68123: LD_ADDR_VAR 0 2
68127: PUSH
68128: LD_INT 22
68130: PUSH
68131: LD_OWVAR 2
68135: PUSH
68136: EMPTY
68137: LIST
68138: LIST
68139: PUSH
68140: LD_INT 30
68142: PUSH
68143: LD_INT 29
68145: PUSH
68146: EMPTY
68147: LIST
68148: LIST
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PPUSH
68154: CALL_OW 69
68158: ST_TO_ADDR
// if not tmp then
68159: LD_VAR 0 2
68163: NOT
68164: IFFALSE 68168
// exit ;
68166: GO 68218
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68168: LD_VAR 0 2
68172: PUSH
68173: LD_INT 1
68175: ARRAY
68176: PPUSH
68177: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68181: LD_VAR 0 2
68185: PUSH
68186: LD_INT 1
68188: ARRAY
68189: PPUSH
68190: CALL_OW 65
// end ; 5 .. 7 :
68194: GO 68218
68196: LD_INT 5
68198: DOUBLE
68199: GREATEREQUAL
68200: IFFALSE 68208
68202: LD_INT 7
68204: DOUBLE
68205: LESSEQUAL
68206: IFTRUE 68210
68208: GO 68217
68210: POP
// StreamSibBomb ; end ;
68211: CALL 64455 0 0
68215: GO 68218
68217: POP
// end ;
68218: PPOPN 3
68220: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68221: LD_EXP 49
68225: PUSH
68226: LD_EXP 99
68230: AND
68231: IFFALSE 68387
68233: GO 68235
68235: DISABLE
68236: LD_INT 0
68238: PPUSH
68239: PPUSH
68240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68241: LD_ADDR_VAR 0 2
68245: PUSH
68246: LD_INT 81
68248: PUSH
68249: LD_OWVAR 2
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: LD_INT 21
68263: PUSH
68264: LD_INT 1
68266: PUSH
68267: EMPTY
68268: LIST
68269: LIST
68270: PUSH
68271: LD_INT 21
68273: PUSH
68274: LD_INT 2
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: LIST
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PPUSH
68290: CALL_OW 69
68294: ST_TO_ADDR
// if not tmp then
68295: LD_VAR 0 2
68299: NOT
68300: IFFALSE 68304
// exit ;
68302: GO 68387
// p := 0 ;
68304: LD_ADDR_VAR 0 3
68308: PUSH
68309: LD_INT 0
68311: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68312: LD_INT 35
68314: PPUSH
68315: CALL_OW 67
// p := p + 1 ;
68319: LD_ADDR_VAR 0 3
68323: PUSH
68324: LD_VAR 0 3
68328: PUSH
68329: LD_INT 1
68331: PLUS
68332: ST_TO_ADDR
// for i in tmp do
68333: LD_ADDR_VAR 0 1
68337: PUSH
68338: LD_VAR 0 2
68342: PUSH
68343: FOR_IN
68344: IFFALSE 68375
// if GetLives ( i ) < 1000 then
68346: LD_VAR 0 1
68350: PPUSH
68351: CALL_OW 256
68355: PUSH
68356: LD_INT 1000
68358: LESS
68359: IFFALSE 68373
// SetLives ( i , 1000 ) ;
68361: LD_VAR 0 1
68365: PPUSH
68366: LD_INT 1000
68368: PPUSH
68369: CALL_OW 234
68373: GO 68343
68375: POP
68376: POP
// until p > 20 ;
68377: LD_VAR 0 3
68381: PUSH
68382: LD_INT 20
68384: GREATER
68385: IFFALSE 68312
// end ;
68387: PPOPN 3
68389: END
// every 0 0$1 trigger StreamModeActive and sTime do
68390: LD_EXP 49
68394: PUSH
68395: LD_EXP 100
68399: AND
68400: IFFALSE 68435
68402: GO 68404
68404: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68405: LD_INT 28
68407: PPUSH
68408: LD_OWVAR 2
68412: PPUSH
68413: LD_INT 2
68415: PPUSH
68416: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68420: LD_INT 30
68422: PPUSH
68423: LD_OWVAR 2
68427: PPUSH
68428: LD_INT 2
68430: PPUSH
68431: CALL_OW 322
// end ;
68435: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68436: LD_EXP 49
68440: PUSH
68441: LD_EXP 101
68445: AND
68446: IFFALSE 68567
68448: GO 68450
68450: DISABLE
68451: LD_INT 0
68453: PPUSH
68454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68455: LD_ADDR_VAR 0 2
68459: PUSH
68460: LD_INT 22
68462: PUSH
68463: LD_OWVAR 2
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 21
68474: PUSH
68475: LD_INT 1
68477: PUSH
68478: EMPTY
68479: LIST
68480: LIST
68481: PUSH
68482: LD_INT 3
68484: PUSH
68485: LD_INT 23
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: LIST
68503: PPUSH
68504: CALL_OW 69
68508: ST_TO_ADDR
// if not tmp then
68509: LD_VAR 0 2
68513: NOT
68514: IFFALSE 68518
// exit ;
68516: GO 68567
// for i in tmp do
68518: LD_ADDR_VAR 0 1
68522: PUSH
68523: LD_VAR 0 2
68527: PUSH
68528: FOR_IN
68529: IFFALSE 68565
// begin if Crawls ( i ) then
68531: LD_VAR 0 1
68535: PPUSH
68536: CALL_OW 318
68540: IFFALSE 68551
// ComWalk ( i ) ;
68542: LD_VAR 0 1
68546: PPUSH
68547: CALL_OW 138
// SetClass ( i , 2 ) ;
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_INT 2
68558: PPUSH
68559: CALL_OW 336
// end ;
68563: GO 68528
68565: POP
68566: POP
// end ;
68567: PPOPN 2
68569: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
68570: LD_EXP 49
68574: PUSH
68575: LD_EXP 102
68579: AND
68580: IFFALSE 68868
68582: GO 68584
68584: DISABLE
68585: LD_INT 0
68587: PPUSH
68588: PPUSH
68589: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
68590: LD_OWVAR 2
68594: PPUSH
68595: LD_INT 9
68597: PPUSH
68598: LD_INT 1
68600: PPUSH
68601: LD_INT 1
68603: PPUSH
68604: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
68608: LD_INT 9
68610: PPUSH
68611: LD_OWVAR 2
68615: PPUSH
68616: CALL_OW 343
// uc_side := 9 ;
68620: LD_ADDR_OWVAR 20
68624: PUSH
68625: LD_INT 9
68627: ST_TO_ADDR
// uc_nation := 2 ;
68628: LD_ADDR_OWVAR 21
68632: PUSH
68633: LD_INT 2
68635: ST_TO_ADDR
// hc_name := Dark Warrior ;
68636: LD_ADDR_OWVAR 26
68640: PUSH
68641: LD_STRING Dark Warrior
68643: ST_TO_ADDR
// hc_gallery :=  ;
68644: LD_ADDR_OWVAR 33
68648: PUSH
68649: LD_STRING 
68651: ST_TO_ADDR
// hc_noskilllimit := true ;
68652: LD_ADDR_OWVAR 76
68656: PUSH
68657: LD_INT 1
68659: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
68660: LD_ADDR_OWVAR 31
68664: PUSH
68665: LD_INT 30
68667: PUSH
68668: LD_INT 30
68670: PUSH
68671: LD_INT 30
68673: PUSH
68674: LD_INT 30
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: ST_TO_ADDR
// un := CreateHuman ;
68683: LD_ADDR_VAR 0 3
68687: PUSH
68688: CALL_OW 44
68692: ST_TO_ADDR
// hc_noskilllimit := false ;
68693: LD_ADDR_OWVAR 76
68697: PUSH
68698: LD_INT 0
68700: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68701: LD_VAR 0 3
68705: PPUSH
68706: LD_INT 1
68708: PPUSH
68709: CALL_OW 51
// ToLua ( playRanger() ) ;
68713: LD_STRING playRanger()
68715: PPUSH
68716: CALL_OW 559
// p := 0 ;
68720: LD_ADDR_VAR 0 2
68724: PUSH
68725: LD_INT 0
68727: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68728: LD_INT 35
68730: PPUSH
68731: CALL_OW 67
// p := p + 1 ;
68735: LD_ADDR_VAR 0 2
68739: PUSH
68740: LD_VAR 0 2
68744: PUSH
68745: LD_INT 1
68747: PLUS
68748: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
68749: LD_VAR 0 3
68753: PPUSH
68754: CALL_OW 256
68758: PUSH
68759: LD_INT 1000
68761: LESS
68762: IFFALSE 68776
// SetLives ( un , 1000 ) ;
68764: LD_VAR 0 3
68768: PPUSH
68769: LD_INT 1000
68771: PPUSH
68772: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
68776: LD_VAR 0 3
68780: PPUSH
68781: LD_INT 81
68783: PUSH
68784: LD_OWVAR 2
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 91
68795: PUSH
68796: LD_VAR 0 3
68800: PUSH
68801: LD_INT 30
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: LIST
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PPUSH
68813: CALL_OW 69
68817: PPUSH
68818: LD_VAR 0 3
68822: PPUSH
68823: CALL_OW 74
68827: PPUSH
68828: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
68832: LD_VAR 0 2
68836: PUSH
68837: LD_INT 80
68839: GREATER
68840: PUSH
68841: LD_VAR 0 3
68845: PPUSH
68846: CALL_OW 301
68850: OR
68851: IFFALSE 68728
// if un then
68853: LD_VAR 0 3
68857: IFFALSE 68868
// RemoveUnit ( un ) ;
68859: LD_VAR 0 3
68863: PPUSH
68864: CALL_OW 64
// end ;
68868: PPOPN 3
68870: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
68871: LD_EXP 103
68875: IFFALSE 68991
68877: GO 68879
68879: DISABLE
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
68885: LD_ADDR_VAR 0 2
68889: PUSH
68890: LD_INT 81
68892: PUSH
68893: LD_OWVAR 2
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 21
68904: PUSH
68905: LD_INT 1
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PPUSH
68916: CALL_OW 69
68920: ST_TO_ADDR
// ToLua ( playComputer() ) ;
68921: LD_STRING playComputer()
68923: PPUSH
68924: CALL_OW 559
// if not tmp then
68928: LD_VAR 0 2
68932: NOT
68933: IFFALSE 68937
// exit ;
68935: GO 68991
// for i in tmp do
68937: LD_ADDR_VAR 0 1
68941: PUSH
68942: LD_VAR 0 2
68946: PUSH
68947: FOR_IN
68948: IFFALSE 68989
// for j := 1 to 4 do
68950: LD_ADDR_VAR 0 3
68954: PUSH
68955: DOUBLE
68956: LD_INT 1
68958: DEC
68959: ST_TO_ADDR
68960: LD_INT 4
68962: PUSH
68963: FOR_TO
68964: IFFALSE 68985
// SetSkill ( i , j , 10 ) ;
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 3
68975: PPUSH
68976: LD_INT 10
68978: PPUSH
68979: CALL_OW 237
68983: GO 68963
68985: POP
68986: POP
68987: GO 68947
68989: POP
68990: POP
// end ;
68991: PPOPN 3
68993: END
// every 0 0$1 trigger s30 do var i , tmp ;
68994: LD_EXP 104
68998: IFFALSE 69067
69000: GO 69002
69002: DISABLE
69003: LD_INT 0
69005: PPUSH
69006: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69007: LD_ADDR_VAR 0 2
69011: PUSH
69012: LD_INT 22
69014: PUSH
69015: LD_OWVAR 2
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PPUSH
69024: CALL_OW 69
69028: ST_TO_ADDR
// if not tmp then
69029: LD_VAR 0 2
69033: NOT
69034: IFFALSE 69038
// exit ;
69036: GO 69067
// for i in tmp do
69038: LD_ADDR_VAR 0 1
69042: PUSH
69043: LD_VAR 0 2
69047: PUSH
69048: FOR_IN
69049: IFFALSE 69065
// SetLives ( i , 300 ) ;
69051: LD_VAR 0 1
69055: PPUSH
69056: LD_INT 300
69058: PPUSH
69059: CALL_OW 234
69063: GO 69048
69065: POP
69066: POP
// end ;
69067: PPOPN 2
69069: END
// every 0 0$1 trigger s60 do var i , tmp ;
69070: LD_EXP 105
69074: IFFALSE 69143
69076: GO 69078
69078: DISABLE
69079: LD_INT 0
69081: PPUSH
69082: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69083: LD_ADDR_VAR 0 2
69087: PUSH
69088: LD_INT 22
69090: PUSH
69091: LD_OWVAR 2
69095: PUSH
69096: EMPTY
69097: LIST
69098: LIST
69099: PPUSH
69100: CALL_OW 69
69104: ST_TO_ADDR
// if not tmp then
69105: LD_VAR 0 2
69109: NOT
69110: IFFALSE 69114
// exit ;
69112: GO 69143
// for i in tmp do
69114: LD_ADDR_VAR 0 1
69118: PUSH
69119: LD_VAR 0 2
69123: PUSH
69124: FOR_IN
69125: IFFALSE 69141
// SetLives ( i , 600 ) ;
69127: LD_VAR 0 1
69131: PPUSH
69132: LD_INT 600
69134: PPUSH
69135: CALL_OW 234
69139: GO 69124
69141: POP
69142: POP
// end ;
69143: PPOPN 2
69145: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69146: LD_INT 0
69148: PPUSH
// case cmd of 301 :
69149: LD_VAR 0 1
69153: PUSH
69154: LD_INT 301
69156: DOUBLE
69157: EQUAL
69158: IFTRUE 69162
69160: GO 69194
69162: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69163: LD_VAR 0 6
69167: PPUSH
69168: LD_VAR 0 7
69172: PPUSH
69173: LD_VAR 0 8
69177: PPUSH
69178: LD_VAR 0 4
69182: PPUSH
69183: LD_VAR 0 5
69187: PPUSH
69188: CALL 70395 0 5
69192: GO 69315
69194: LD_INT 302
69196: DOUBLE
69197: EQUAL
69198: IFTRUE 69202
69200: GO 69239
69202: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69203: LD_VAR 0 6
69207: PPUSH
69208: LD_VAR 0 7
69212: PPUSH
69213: LD_VAR 0 8
69217: PPUSH
69218: LD_VAR 0 9
69222: PPUSH
69223: LD_VAR 0 4
69227: PPUSH
69228: LD_VAR 0 5
69232: PPUSH
69233: CALL 70486 0 6
69237: GO 69315
69239: LD_INT 303
69241: DOUBLE
69242: EQUAL
69243: IFTRUE 69247
69245: GO 69284
69247: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69248: LD_VAR 0 6
69252: PPUSH
69253: LD_VAR 0 7
69257: PPUSH
69258: LD_VAR 0 8
69262: PPUSH
69263: LD_VAR 0 9
69267: PPUSH
69268: LD_VAR 0 4
69272: PPUSH
69273: LD_VAR 0 5
69277: PPUSH
69278: CALL 69320 0 6
69282: GO 69315
69284: LD_INT 304
69286: DOUBLE
69287: EQUAL
69288: IFTRUE 69292
69290: GO 69314
69292: POP
// hHackTeleport ( unit , x , y ) ; end ;
69293: LD_VAR 0 2
69297: PPUSH
69298: LD_VAR 0 4
69302: PPUSH
69303: LD_VAR 0 5
69307: PPUSH
69308: CALL 71079 0 3
69312: GO 69315
69314: POP
// end ;
69315: LD_VAR 0 12
69319: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69320: LD_INT 0
69322: PPUSH
69323: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69324: LD_VAR 0 1
69328: PUSH
69329: LD_INT 1
69331: LESS
69332: PUSH
69333: LD_VAR 0 1
69337: PUSH
69338: LD_INT 3
69340: GREATER
69341: OR
69342: PUSH
69343: LD_VAR 0 5
69347: PPUSH
69348: LD_VAR 0 6
69352: PPUSH
69353: CALL_OW 428
69357: OR
69358: IFFALSE 69362
// exit ;
69360: GO 70082
// uc_side := your_side ;
69362: LD_ADDR_OWVAR 20
69366: PUSH
69367: LD_OWVAR 2
69371: ST_TO_ADDR
// uc_nation := nation ;
69372: LD_ADDR_OWVAR 21
69376: PUSH
69377: LD_VAR 0 1
69381: ST_TO_ADDR
// bc_level = 1 ;
69382: LD_ADDR_OWVAR 43
69386: PUSH
69387: LD_INT 1
69389: ST_TO_ADDR
// case btype of 1 :
69390: LD_VAR 0 2
69394: PUSH
69395: LD_INT 1
69397: DOUBLE
69398: EQUAL
69399: IFTRUE 69403
69401: GO 69414
69403: POP
// bc_type := b_depot ; 2 :
69404: LD_ADDR_OWVAR 42
69408: PUSH
69409: LD_INT 0
69411: ST_TO_ADDR
69412: GO 70026
69414: LD_INT 2
69416: DOUBLE
69417: EQUAL
69418: IFTRUE 69422
69420: GO 69433
69422: POP
// bc_type := b_warehouse ; 3 :
69423: LD_ADDR_OWVAR 42
69427: PUSH
69428: LD_INT 1
69430: ST_TO_ADDR
69431: GO 70026
69433: LD_INT 3
69435: DOUBLE
69436: EQUAL
69437: IFTRUE 69441
69439: GO 69452
69441: POP
// bc_type := b_lab ; 4 .. 9 :
69442: LD_ADDR_OWVAR 42
69446: PUSH
69447: LD_INT 6
69449: ST_TO_ADDR
69450: GO 70026
69452: LD_INT 4
69454: DOUBLE
69455: GREATEREQUAL
69456: IFFALSE 69464
69458: LD_INT 9
69460: DOUBLE
69461: LESSEQUAL
69462: IFTRUE 69466
69464: GO 69518
69466: POP
// begin bc_type := b_lab_half ;
69467: LD_ADDR_OWVAR 42
69471: PUSH
69472: LD_INT 7
69474: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
69475: LD_ADDR_OWVAR 44
69479: PUSH
69480: LD_INT 10
69482: PUSH
69483: LD_INT 11
69485: PUSH
69486: LD_INT 12
69488: PUSH
69489: LD_INT 15
69491: PUSH
69492: LD_INT 14
69494: PUSH
69495: LD_INT 13
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: LIST
69502: LIST
69503: LIST
69504: LIST
69505: PUSH
69506: LD_VAR 0 2
69510: PUSH
69511: LD_INT 3
69513: MINUS
69514: ARRAY
69515: ST_TO_ADDR
// end ; 10 .. 13 :
69516: GO 70026
69518: LD_INT 10
69520: DOUBLE
69521: GREATEREQUAL
69522: IFFALSE 69530
69524: LD_INT 13
69526: DOUBLE
69527: LESSEQUAL
69528: IFTRUE 69532
69530: GO 69609
69532: POP
// begin bc_type := b_lab_full ;
69533: LD_ADDR_OWVAR 42
69537: PUSH
69538: LD_INT 8
69540: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
69541: LD_ADDR_OWVAR 44
69545: PUSH
69546: LD_INT 10
69548: PUSH
69549: LD_INT 12
69551: PUSH
69552: LD_INT 14
69554: PUSH
69555: LD_INT 13
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: PUSH
69564: LD_VAR 0 2
69568: PUSH
69569: LD_INT 9
69571: MINUS
69572: ARRAY
69573: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
69574: LD_ADDR_OWVAR 45
69578: PUSH
69579: LD_INT 11
69581: PUSH
69582: LD_INT 15
69584: PUSH
69585: LD_INT 12
69587: PUSH
69588: LD_INT 15
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: PUSH
69597: LD_VAR 0 2
69601: PUSH
69602: LD_INT 9
69604: MINUS
69605: ARRAY
69606: ST_TO_ADDR
// end ; 14 :
69607: GO 70026
69609: LD_INT 14
69611: DOUBLE
69612: EQUAL
69613: IFTRUE 69617
69615: GO 69628
69617: POP
// bc_type := b_workshop ; 15 :
69618: LD_ADDR_OWVAR 42
69622: PUSH
69623: LD_INT 2
69625: ST_TO_ADDR
69626: GO 70026
69628: LD_INT 15
69630: DOUBLE
69631: EQUAL
69632: IFTRUE 69636
69634: GO 69647
69636: POP
// bc_type := b_factory ; 16 :
69637: LD_ADDR_OWVAR 42
69641: PUSH
69642: LD_INT 3
69644: ST_TO_ADDR
69645: GO 70026
69647: LD_INT 16
69649: DOUBLE
69650: EQUAL
69651: IFTRUE 69655
69653: GO 69666
69655: POP
// bc_type := b_ext_gun ; 17 :
69656: LD_ADDR_OWVAR 42
69660: PUSH
69661: LD_INT 17
69663: ST_TO_ADDR
69664: GO 70026
69666: LD_INT 17
69668: DOUBLE
69669: EQUAL
69670: IFTRUE 69674
69672: GO 69702
69674: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
69675: LD_ADDR_OWVAR 42
69679: PUSH
69680: LD_INT 19
69682: PUSH
69683: LD_INT 23
69685: PUSH
69686: LD_INT 19
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: LIST
69693: PUSH
69694: LD_VAR 0 1
69698: ARRAY
69699: ST_TO_ADDR
69700: GO 70026
69702: LD_INT 18
69704: DOUBLE
69705: EQUAL
69706: IFTRUE 69710
69708: GO 69721
69710: POP
// bc_type := b_ext_radar ; 19 :
69711: LD_ADDR_OWVAR 42
69715: PUSH
69716: LD_INT 20
69718: ST_TO_ADDR
69719: GO 70026
69721: LD_INT 19
69723: DOUBLE
69724: EQUAL
69725: IFTRUE 69729
69727: GO 69740
69729: POP
// bc_type := b_ext_radio ; 20 :
69730: LD_ADDR_OWVAR 42
69734: PUSH
69735: LD_INT 22
69737: ST_TO_ADDR
69738: GO 70026
69740: LD_INT 20
69742: DOUBLE
69743: EQUAL
69744: IFTRUE 69748
69746: GO 69759
69748: POP
// bc_type := b_ext_siberium ; 21 :
69749: LD_ADDR_OWVAR 42
69753: PUSH
69754: LD_INT 21
69756: ST_TO_ADDR
69757: GO 70026
69759: LD_INT 21
69761: DOUBLE
69762: EQUAL
69763: IFTRUE 69767
69765: GO 69778
69767: POP
// bc_type := b_ext_computer ; 22 :
69768: LD_ADDR_OWVAR 42
69772: PUSH
69773: LD_INT 24
69775: ST_TO_ADDR
69776: GO 70026
69778: LD_INT 22
69780: DOUBLE
69781: EQUAL
69782: IFTRUE 69786
69784: GO 69797
69786: POP
// bc_type := b_ext_track ; 23 :
69787: LD_ADDR_OWVAR 42
69791: PUSH
69792: LD_INT 16
69794: ST_TO_ADDR
69795: GO 70026
69797: LD_INT 23
69799: DOUBLE
69800: EQUAL
69801: IFTRUE 69805
69803: GO 69816
69805: POP
// bc_type := b_ext_laser ; 24 :
69806: LD_ADDR_OWVAR 42
69810: PUSH
69811: LD_INT 25
69813: ST_TO_ADDR
69814: GO 70026
69816: LD_INT 24
69818: DOUBLE
69819: EQUAL
69820: IFTRUE 69824
69822: GO 69835
69824: POP
// bc_type := b_control_tower ; 25 :
69825: LD_ADDR_OWVAR 42
69829: PUSH
69830: LD_INT 36
69832: ST_TO_ADDR
69833: GO 70026
69835: LD_INT 25
69837: DOUBLE
69838: EQUAL
69839: IFTRUE 69843
69841: GO 69854
69843: POP
// bc_type := b_breastwork ; 26 :
69844: LD_ADDR_OWVAR 42
69848: PUSH
69849: LD_INT 31
69851: ST_TO_ADDR
69852: GO 70026
69854: LD_INT 26
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69862
69860: GO 69873
69862: POP
// bc_type := b_bunker ; 27 :
69863: LD_ADDR_OWVAR 42
69867: PUSH
69868: LD_INT 32
69870: ST_TO_ADDR
69871: GO 70026
69873: LD_INT 27
69875: DOUBLE
69876: EQUAL
69877: IFTRUE 69881
69879: GO 69892
69881: POP
// bc_type := b_turret ; 28 :
69882: LD_ADDR_OWVAR 42
69886: PUSH
69887: LD_INT 33
69889: ST_TO_ADDR
69890: GO 70026
69892: LD_INT 28
69894: DOUBLE
69895: EQUAL
69896: IFTRUE 69900
69898: GO 69911
69900: POP
// bc_type := b_armoury ; 29 :
69901: LD_ADDR_OWVAR 42
69905: PUSH
69906: LD_INT 4
69908: ST_TO_ADDR
69909: GO 70026
69911: LD_INT 29
69913: DOUBLE
69914: EQUAL
69915: IFTRUE 69919
69917: GO 69930
69919: POP
// bc_type := b_barracks ; 30 :
69920: LD_ADDR_OWVAR 42
69924: PUSH
69925: LD_INT 5
69927: ST_TO_ADDR
69928: GO 70026
69930: LD_INT 30
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69938
69936: GO 69949
69938: POP
// bc_type := b_solar_power ; 31 :
69939: LD_ADDR_OWVAR 42
69943: PUSH
69944: LD_INT 27
69946: ST_TO_ADDR
69947: GO 70026
69949: LD_INT 31
69951: DOUBLE
69952: EQUAL
69953: IFTRUE 69957
69955: GO 69968
69957: POP
// bc_type := b_oil_power ; 32 :
69958: LD_ADDR_OWVAR 42
69962: PUSH
69963: LD_INT 26
69965: ST_TO_ADDR
69966: GO 70026
69968: LD_INT 32
69970: DOUBLE
69971: EQUAL
69972: IFTRUE 69976
69974: GO 69987
69976: POP
// bc_type := b_siberite_power ; 33 :
69977: LD_ADDR_OWVAR 42
69981: PUSH
69982: LD_INT 28
69984: ST_TO_ADDR
69985: GO 70026
69987: LD_INT 33
69989: DOUBLE
69990: EQUAL
69991: IFTRUE 69995
69993: GO 70006
69995: POP
// bc_type := b_oil_mine ; 34 :
69996: LD_ADDR_OWVAR 42
70000: PUSH
70001: LD_INT 29
70003: ST_TO_ADDR
70004: GO 70026
70006: LD_INT 34
70008: DOUBLE
70009: EQUAL
70010: IFTRUE 70014
70012: GO 70025
70014: POP
// bc_type := b_siberite_mine ; end ;
70015: LD_ADDR_OWVAR 42
70019: PUSH
70020: LD_INT 30
70022: ST_TO_ADDR
70023: GO 70026
70025: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70026: LD_ADDR_VAR 0 8
70030: PUSH
70031: LD_VAR 0 5
70035: PPUSH
70036: LD_VAR 0 6
70040: PPUSH
70041: LD_VAR 0 3
70045: PPUSH
70046: CALL_OW 47
70050: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70051: LD_OWVAR 42
70055: PUSH
70056: LD_INT 32
70058: PUSH
70059: LD_INT 33
70061: PUSH
70062: EMPTY
70063: LIST
70064: LIST
70065: IN
70066: IFFALSE 70082
// PlaceWeaponTurret ( b , weapon ) ;
70068: LD_VAR 0 8
70072: PPUSH
70073: LD_VAR 0 4
70077: PPUSH
70078: CALL_OW 431
// end ;
70082: LD_VAR 0 7
70086: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
70091: PPUSH
70092: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70093: LD_ADDR_VAR 0 4
70097: PUSH
70098: LD_INT 22
70100: PUSH
70101: LD_OWVAR 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 2
70112: PUSH
70113: LD_INT 30
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 30
70125: PUSH
70126: LD_INT 1
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: LIST
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PPUSH
70142: CALL_OW 69
70146: ST_TO_ADDR
// if not tmp then
70147: LD_VAR 0 4
70151: NOT
70152: IFFALSE 70156
// exit ;
70154: GO 70215
// for i in tmp do
70156: LD_ADDR_VAR 0 2
70160: PUSH
70161: LD_VAR 0 4
70165: PUSH
70166: FOR_IN
70167: IFFALSE 70213
// for j = 1 to 3 do
70169: LD_ADDR_VAR 0 3
70173: PUSH
70174: DOUBLE
70175: LD_INT 1
70177: DEC
70178: ST_TO_ADDR
70179: LD_INT 3
70181: PUSH
70182: FOR_TO
70183: IFFALSE 70209
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70185: LD_VAR 0 2
70189: PPUSH
70190: CALL_OW 274
70194: PPUSH
70195: LD_VAR 0 3
70199: PPUSH
70200: LD_INT 99999
70202: PPUSH
70203: CALL_OW 277
70207: GO 70182
70209: POP
70210: POP
70211: GO 70166
70213: POP
70214: POP
// end ;
70215: LD_VAR 0 1
70219: RET
// export function hHackSetLevel10 ; var i , j ; begin
70220: LD_INT 0
70222: PPUSH
70223: PPUSH
70224: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70225: LD_ADDR_VAR 0 2
70229: PUSH
70230: LD_INT 21
70232: PUSH
70233: LD_INT 1
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PPUSH
70240: CALL_OW 69
70244: PUSH
70245: FOR_IN
70246: IFFALSE 70298
// if IsSelected ( i ) then
70248: LD_VAR 0 2
70252: PPUSH
70253: CALL_OW 306
70257: IFFALSE 70296
// begin for j := 1 to 4 do
70259: LD_ADDR_VAR 0 3
70263: PUSH
70264: DOUBLE
70265: LD_INT 1
70267: DEC
70268: ST_TO_ADDR
70269: LD_INT 4
70271: PUSH
70272: FOR_TO
70273: IFFALSE 70294
// SetSkill ( i , j , 10 ) ;
70275: LD_VAR 0 2
70279: PPUSH
70280: LD_VAR 0 3
70284: PPUSH
70285: LD_INT 10
70287: PPUSH
70288: CALL_OW 237
70292: GO 70272
70294: POP
70295: POP
// end ;
70296: GO 70245
70298: POP
70299: POP
// end ;
70300: LD_VAR 0 1
70304: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70305: LD_INT 0
70307: PPUSH
70308: PPUSH
70309: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70310: LD_ADDR_VAR 0 2
70314: PUSH
70315: LD_INT 22
70317: PUSH
70318: LD_OWVAR 2
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 21
70329: PUSH
70330: LD_INT 1
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 69
70345: PUSH
70346: FOR_IN
70347: IFFALSE 70388
// begin for j := 1 to 4 do
70349: LD_ADDR_VAR 0 3
70353: PUSH
70354: DOUBLE
70355: LD_INT 1
70357: DEC
70358: ST_TO_ADDR
70359: LD_INT 4
70361: PUSH
70362: FOR_TO
70363: IFFALSE 70384
// SetSkill ( i , j , 10 ) ;
70365: LD_VAR 0 2
70369: PPUSH
70370: LD_VAR 0 3
70374: PPUSH
70375: LD_INT 10
70377: PPUSH
70378: CALL_OW 237
70382: GO 70362
70384: POP
70385: POP
// end ;
70386: GO 70346
70388: POP
70389: POP
// end ;
70390: LD_VAR 0 1
70394: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70395: LD_INT 0
70397: PPUSH
// uc_side := your_side ;
70398: LD_ADDR_OWVAR 20
70402: PUSH
70403: LD_OWVAR 2
70407: ST_TO_ADDR
// uc_nation := nation ;
70408: LD_ADDR_OWVAR 21
70412: PUSH
70413: LD_VAR 0 1
70417: ST_TO_ADDR
// InitHc ;
70418: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70422: LD_INT 0
70424: PPUSH
70425: LD_VAR 0 2
70429: PPUSH
70430: LD_VAR 0 3
70434: PPUSH
70435: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70439: LD_VAR 0 4
70443: PPUSH
70444: LD_VAR 0 5
70448: PPUSH
70449: CALL_OW 428
70453: PUSH
70454: LD_INT 0
70456: EQUAL
70457: IFFALSE 70481
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
70459: CALL_OW 44
70463: PPUSH
70464: LD_VAR 0 4
70468: PPUSH
70469: LD_VAR 0 5
70473: PPUSH
70474: LD_INT 1
70476: PPUSH
70477: CALL_OW 48
// end ;
70481: LD_VAR 0 6
70485: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
70486: LD_INT 0
70488: PPUSH
70489: PPUSH
// uc_side := your_side ;
70490: LD_ADDR_OWVAR 20
70494: PUSH
70495: LD_OWVAR 2
70499: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
70500: LD_VAR 0 1
70504: PUSH
70505: LD_INT 1
70507: PUSH
70508: LD_INT 2
70510: PUSH
70511: LD_INT 3
70513: PUSH
70514: LD_INT 4
70516: PUSH
70517: LD_INT 5
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: IN
70527: IFFALSE 70539
// uc_nation := nation_american else
70529: LD_ADDR_OWVAR 21
70533: PUSH
70534: LD_INT 1
70536: ST_TO_ADDR
70537: GO 70582
// if chassis in [ 11 , 12 , 13 , 14 ] then
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 11
70546: PUSH
70547: LD_INT 12
70549: PUSH
70550: LD_INT 13
70552: PUSH
70553: LD_INT 14
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: IN
70562: IFFALSE 70574
// uc_nation := nation_arabian else
70564: LD_ADDR_OWVAR 21
70568: PUSH
70569: LD_INT 2
70571: ST_TO_ADDR
70572: GO 70582
// uc_nation := nation_russian ;
70574: LD_ADDR_OWVAR 21
70578: PUSH
70579: LD_INT 3
70581: ST_TO_ADDR
// vc_chassis := chassis ;
70582: LD_ADDR_OWVAR 37
70586: PUSH
70587: LD_VAR 0 1
70591: ST_TO_ADDR
// vc_engine := engine ;
70592: LD_ADDR_OWVAR 39
70596: PUSH
70597: LD_VAR 0 2
70601: ST_TO_ADDR
// vc_control := control ;
70602: LD_ADDR_OWVAR 38
70606: PUSH
70607: LD_VAR 0 3
70611: ST_TO_ADDR
// vc_weapon := weapon ;
70612: LD_ADDR_OWVAR 40
70616: PUSH
70617: LD_VAR 0 4
70621: ST_TO_ADDR
// un := CreateVehicle ;
70622: LD_ADDR_VAR 0 8
70626: PUSH
70627: CALL_OW 45
70631: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
70632: LD_VAR 0 8
70636: PPUSH
70637: LD_INT 0
70639: PPUSH
70640: LD_INT 5
70642: PPUSH
70643: CALL_OW 12
70647: PPUSH
70648: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
70652: LD_VAR 0 8
70656: PPUSH
70657: LD_VAR 0 5
70661: PPUSH
70662: LD_VAR 0 6
70666: PPUSH
70667: LD_INT 1
70669: PPUSH
70670: CALL_OW 48
// end ;
70674: LD_VAR 0 7
70678: RET
// export hInvincible ; every 1 do
70679: GO 70681
70681: DISABLE
// hInvincible := [ ] ;
70682: LD_ADDR_EXP 106
70686: PUSH
70687: EMPTY
70688: ST_TO_ADDR
70689: END
// every 10 do var i ;
70690: GO 70692
70692: DISABLE
70693: LD_INT 0
70695: PPUSH
// begin enable ;
70696: ENABLE
// if not hInvincible then
70697: LD_EXP 106
70701: NOT
70702: IFFALSE 70706
// exit ;
70704: GO 70750
// for i in hInvincible do
70706: LD_ADDR_VAR 0 1
70710: PUSH
70711: LD_EXP 106
70715: PUSH
70716: FOR_IN
70717: IFFALSE 70748
// if GetLives ( i ) < 1000 then
70719: LD_VAR 0 1
70723: PPUSH
70724: CALL_OW 256
70728: PUSH
70729: LD_INT 1000
70731: LESS
70732: IFFALSE 70746
// SetLives ( i , 1000 ) ;
70734: LD_VAR 0 1
70738: PPUSH
70739: LD_INT 1000
70741: PPUSH
70742: CALL_OW 234
70746: GO 70716
70748: POP
70749: POP
// end ;
70750: PPOPN 1
70752: END
// export function hHackInvincible ; var i ; begin
70753: LD_INT 0
70755: PPUSH
70756: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
70757: LD_ADDR_VAR 0 2
70761: PUSH
70762: LD_INT 2
70764: PUSH
70765: LD_INT 21
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 21
70777: PUSH
70778: LD_INT 2
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: LIST
70789: PPUSH
70790: CALL_OW 69
70794: PUSH
70795: FOR_IN
70796: IFFALSE 70857
// if IsSelected ( i ) then
70798: LD_VAR 0 2
70802: PPUSH
70803: CALL_OW 306
70807: IFFALSE 70855
// begin if i in hInvincible then
70809: LD_VAR 0 2
70813: PUSH
70814: LD_EXP 106
70818: IN
70819: IFFALSE 70839
// hInvincible := hInvincible diff i else
70821: LD_ADDR_EXP 106
70825: PUSH
70826: LD_EXP 106
70830: PUSH
70831: LD_VAR 0 2
70835: DIFF
70836: ST_TO_ADDR
70837: GO 70855
// hInvincible := hInvincible union i ;
70839: LD_ADDR_EXP 106
70843: PUSH
70844: LD_EXP 106
70848: PUSH
70849: LD_VAR 0 2
70853: UNION
70854: ST_TO_ADDR
// end ;
70855: GO 70795
70857: POP
70858: POP
// end ;
70859: LD_VAR 0 1
70863: RET
// export function hHackInvisible ; var i , j ; begin
70864: LD_INT 0
70866: PPUSH
70867: PPUSH
70868: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70869: LD_ADDR_VAR 0 2
70873: PUSH
70874: LD_INT 21
70876: PUSH
70877: LD_INT 1
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: PPUSH
70884: CALL_OW 69
70888: PUSH
70889: FOR_IN
70890: IFFALSE 70914
// if IsSelected ( i ) then
70892: LD_VAR 0 2
70896: PPUSH
70897: CALL_OW 306
70901: IFFALSE 70912
// ComForceInvisible ( i ) ;
70903: LD_VAR 0 2
70907: PPUSH
70908: CALL_OW 496
70912: GO 70889
70914: POP
70915: POP
// end ;
70916: LD_VAR 0 1
70920: RET
// export function hHackChangeYourSide ; begin
70921: LD_INT 0
70923: PPUSH
// if your_side = 8 then
70924: LD_OWVAR 2
70928: PUSH
70929: LD_INT 8
70931: EQUAL
70932: IFFALSE 70944
// your_side := 0 else
70934: LD_ADDR_OWVAR 2
70938: PUSH
70939: LD_INT 0
70941: ST_TO_ADDR
70942: GO 70958
// your_side := your_side + 1 ;
70944: LD_ADDR_OWVAR 2
70948: PUSH
70949: LD_OWVAR 2
70953: PUSH
70954: LD_INT 1
70956: PLUS
70957: ST_TO_ADDR
// end ;
70958: LD_VAR 0 1
70962: RET
// export function hHackChangeUnitSide ; var i , j ; begin
70963: LD_INT 0
70965: PPUSH
70966: PPUSH
70967: PPUSH
// for i in all_units do
70968: LD_ADDR_VAR 0 2
70972: PUSH
70973: LD_OWVAR 3
70977: PUSH
70978: FOR_IN
70979: IFFALSE 71057
// if IsSelected ( i ) then
70981: LD_VAR 0 2
70985: PPUSH
70986: CALL_OW 306
70990: IFFALSE 71055
// begin j := GetSide ( i ) ;
70992: LD_ADDR_VAR 0 3
70996: PUSH
70997: LD_VAR 0 2
71001: PPUSH
71002: CALL_OW 255
71006: ST_TO_ADDR
// if j = 8 then
71007: LD_VAR 0 3
71011: PUSH
71012: LD_INT 8
71014: EQUAL
71015: IFFALSE 71027
// j := 0 else
71017: LD_ADDR_VAR 0 3
71021: PUSH
71022: LD_INT 0
71024: ST_TO_ADDR
71025: GO 71041
// j := j + 1 ;
71027: LD_ADDR_VAR 0 3
71031: PUSH
71032: LD_VAR 0 3
71036: PUSH
71037: LD_INT 1
71039: PLUS
71040: ST_TO_ADDR
// SetSide ( i , j ) ;
71041: LD_VAR 0 2
71045: PPUSH
71046: LD_VAR 0 3
71050: PPUSH
71051: CALL_OW 235
// end ;
71055: GO 70978
71057: POP
71058: POP
// end ;
71059: LD_VAR 0 1
71063: RET
// export function hHackFog ; begin
71064: LD_INT 0
71066: PPUSH
// FogOff ( true ) ;
71067: LD_INT 1
71069: PPUSH
71070: CALL_OW 344
// end ;
71074: LD_VAR 0 1
71078: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71079: LD_INT 0
71081: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_VAR 0 2
71091: PPUSH
71092: LD_VAR 0 3
71096: PPUSH
71097: LD_INT 1
71099: PPUSH
71100: LD_INT 1
71102: PPUSH
71103: CALL_OW 483
// CenterOnXY ( x , y ) ;
71107: LD_VAR 0 2
71111: PPUSH
71112: LD_VAR 0 3
71116: PPUSH
71117: CALL_OW 84
// end ; end_of_file
71121: LD_VAR 0 4
71125: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71126: LD_INT 0
71128: PPUSH
// ar_miner := 81 ;
71129: LD_ADDR_EXP 114
71133: PUSH
71134: LD_INT 81
71136: ST_TO_ADDR
// ar_crane := 88 ;
71137: LD_ADDR_EXP 113
71141: PUSH
71142: LD_INT 88
71144: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71145: LD_ADDR_EXP 108
71149: PUSH
71150: LD_INT 89
71152: ST_TO_ADDR
// us_hack := 99 ;
71153: LD_ADDR_EXP 109
71157: PUSH
71158: LD_INT 99
71160: ST_TO_ADDR
// us_artillery := 97 ;
71161: LD_ADDR_EXP 110
71165: PUSH
71166: LD_INT 97
71168: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71169: LD_ADDR_EXP 111
71173: PUSH
71174: LD_INT 91
71176: ST_TO_ADDR
// ar_mortar := 92 ;
71177: LD_ADDR_EXP 112
71181: PUSH
71182: LD_INT 92
71184: ST_TO_ADDR
// ru_radar := 98 ;
71185: LD_ADDR_EXP 107
71189: PUSH
71190: LD_INT 98
71192: ST_TO_ADDR
// tech_Artillery := 80 ;
71193: LD_ADDR_EXP 115
71197: PUSH
71198: LD_INT 80
71200: ST_TO_ADDR
// tech_RadMat := 81 ;
71201: LD_ADDR_EXP 116
71205: PUSH
71206: LD_INT 81
71208: ST_TO_ADDR
// tech_BasicTools := 82 ;
71209: LD_ADDR_EXP 117
71213: PUSH
71214: LD_INT 82
71216: ST_TO_ADDR
// tech_Cargo := 83 ;
71217: LD_ADDR_EXP 118
71221: PUSH
71222: LD_INT 83
71224: ST_TO_ADDR
// tech_Track := 84 ;
71225: LD_ADDR_EXP 119
71229: PUSH
71230: LD_INT 84
71232: ST_TO_ADDR
// tech_Crane := 85 ;
71233: LD_ADDR_EXP 120
71237: PUSH
71238: LD_INT 85
71240: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71241: LD_ADDR_EXP 121
71245: PUSH
71246: LD_INT 86
71248: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71249: LD_ADDR_EXP 122
71253: PUSH
71254: LD_INT 87
71256: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71257: LD_ADDR_EXP 123
71261: PUSH
71262: LD_INT 88
71264: ST_TO_ADDR
// class_mastodont := 31 ;
71265: LD_ADDR_EXP 124
71269: PUSH
71270: LD_INT 31
71272: ST_TO_ADDR
// class_horse := 21 ;
71273: LD_ADDR_EXP 125
71277: PUSH
71278: LD_INT 21
71280: ST_TO_ADDR
// end ;
71281: LD_VAR 0 1
71285: RET
// every 1 do
71286: GO 71288
71288: DISABLE
// InitGlobalVariables ; end_of_file
71289: CALL 71126 0 0
71293: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71294: LD_VAR 0 1
71298: PPUSH
71299: LD_VAR 0 2
71303: PPUSH
71304: LD_VAR 0 3
71308: PPUSH
71309: LD_VAR 0 4
71313: PPUSH
71314: LD_VAR 0 5
71318: PPUSH
71319: LD_VAR 0 6
71323: PPUSH
71324: CALL 56839 0 6
// end ;
71328: PPOPN 6
71330: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71331: CALL 56814 0 0
// end ; end_of_file
71335: PPOPN 1
71337: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71338: LD_VAR 0 1
71342: PUSH
71343: LD_INT 200
71345: DOUBLE
71346: GREATEREQUAL
71347: IFFALSE 71355
71349: LD_INT 299
71351: DOUBLE
71352: LESSEQUAL
71353: IFTRUE 71357
71355: GO 71389
71357: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71358: LD_VAR 0 1
71362: PPUSH
71363: LD_VAR 0 2
71367: PPUSH
71368: LD_VAR 0 3
71372: PPUSH
71373: LD_VAR 0 4
71377: PPUSH
71378: LD_VAR 0 5
71382: PPUSH
71383: CALL 71879 0 5
71387: GO 71466
71389: LD_INT 300
71391: DOUBLE
71392: GREATEREQUAL
71393: IFFALSE 71401
71395: LD_INT 399
71397: DOUBLE
71398: LESSEQUAL
71399: IFTRUE 71403
71401: GO 71465
71403: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71404: LD_VAR 0 1
71408: PPUSH
71409: LD_VAR 0 2
71413: PPUSH
71414: LD_VAR 0 3
71418: PPUSH
71419: LD_VAR 0 4
71423: PPUSH
71424: LD_VAR 0 5
71428: PPUSH
71429: LD_VAR 0 6
71433: PPUSH
71434: LD_VAR 0 7
71438: PPUSH
71439: LD_VAR 0 8
71443: PPUSH
71444: LD_VAR 0 9
71448: PPUSH
71449: LD_VAR 0 10
71453: PPUSH
71454: LD_VAR 0 11
71458: PPUSH
71459: CALL 69146 0 11
71463: GO 71466
71465: POP
// end ;
71466: PPOPN 11
71468: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71469: LD_VAR 0 1
71473: PPUSH
71474: LD_VAR 0 2
71478: PPUSH
71479: LD_VAR 0 3
71483: PPUSH
71484: LD_VAR 0 4
71488: PPUSH
71489: LD_VAR 0 5
71493: PPUSH
71494: CALL 71615 0 5
// end ; end_of_file
71498: PPOPN 5
71500: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
71501: LD_INT 0
71503: PPUSH
71504: PPUSH
71505: PPUSH
71506: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
71507: LD_VAR 0 1
71511: PPUSH
71512: CALL_OW 264
71516: PUSH
71517: LD_EXP 111
71521: EQUAL
71522: IFFALSE 71594
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71524: LD_INT 68
71526: PPUSH
71527: LD_VAR 0 1
71531: PPUSH
71532: CALL_OW 255
71536: PPUSH
71537: CALL_OW 321
71541: PUSH
71542: LD_INT 2
71544: EQUAL
71545: IFFALSE 71557
// eff := 70 else
71547: LD_ADDR_VAR 0 4
71551: PUSH
71552: LD_INT 70
71554: ST_TO_ADDR
71555: GO 71565
// eff := 30 ;
71557: LD_ADDR_VAR 0 4
71561: PUSH
71562: LD_INT 30
71564: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71565: LD_VAR 0 1
71569: PPUSH
71570: CALL_OW 250
71574: PPUSH
71575: LD_VAR 0 1
71579: PPUSH
71580: CALL_OW 251
71584: PPUSH
71585: LD_VAR 0 4
71589: PPUSH
71590: CALL_OW 495
// end ; end ;
71594: LD_VAR 0 2
71598: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
71599: LD_INT 0
71601: PPUSH
// end ;
71602: LD_VAR 0 4
71606: RET
// export function SOS_Command ( cmd ) ; begin
71607: LD_INT 0
71609: PPUSH
// end ;
71610: LD_VAR 0 2
71614: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
71615: LD_INT 0
71617: PPUSH
// end ;
71618: LD_VAR 0 6
71622: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
71623: LD_INT 0
71625: PPUSH
71626: PPUSH
// if not vehicle or not factory then
71627: LD_VAR 0 1
71631: NOT
71632: PUSH
71633: LD_VAR 0 2
71637: NOT
71638: OR
71639: IFFALSE 71643
// exit ;
71641: GO 71874
// if factoryWaypoints >= factory then
71643: LD_EXP 126
71647: PUSH
71648: LD_VAR 0 2
71652: GREATEREQUAL
71653: IFFALSE 71874
// if factoryWaypoints [ factory ] then
71655: LD_EXP 126
71659: PUSH
71660: LD_VAR 0 2
71664: ARRAY
71665: IFFALSE 71874
// begin if GetControl ( vehicle ) = control_manual then
71667: LD_VAR 0 1
71671: PPUSH
71672: CALL_OW 263
71676: PUSH
71677: LD_INT 1
71679: EQUAL
71680: IFFALSE 71761
// begin driver := IsDrivenBy ( vehicle ) ;
71682: LD_ADDR_VAR 0 4
71686: PUSH
71687: LD_VAR 0 1
71691: PPUSH
71692: CALL_OW 311
71696: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71697: LD_VAR 0 4
71701: PPUSH
71702: LD_EXP 126
71706: PUSH
71707: LD_VAR 0 2
71711: ARRAY
71712: PUSH
71713: LD_INT 3
71715: ARRAY
71716: PPUSH
71717: LD_EXP 126
71721: PUSH
71722: LD_VAR 0 2
71726: ARRAY
71727: PUSH
71728: LD_INT 4
71730: ARRAY
71731: PPUSH
71732: CALL_OW 171
// AddComExitVehicle ( driver ) ;
71736: LD_VAR 0 4
71740: PPUSH
71741: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
71745: LD_VAR 0 4
71749: PPUSH
71750: LD_VAR 0 2
71754: PPUSH
71755: CALL_OW 180
// end else
71759: GO 71874
// if GetControl ( vehicle ) = control_remote then
71761: LD_VAR 0 1
71765: PPUSH
71766: CALL_OW 263
71770: PUSH
71771: LD_INT 2
71773: EQUAL
71774: IFFALSE 71835
// begin wait ( 0 0$2 ) ;
71776: LD_INT 70
71778: PPUSH
71779: CALL_OW 67
// if Connect ( vehicle ) then
71783: LD_VAR 0 1
71787: PPUSH
71788: CALL 24714 0 1
71792: IFFALSE 71833
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71794: LD_VAR 0 1
71798: PPUSH
71799: LD_EXP 126
71803: PUSH
71804: LD_VAR 0 2
71808: ARRAY
71809: PUSH
71810: LD_INT 3
71812: ARRAY
71813: PPUSH
71814: LD_EXP 126
71818: PUSH
71819: LD_VAR 0 2
71823: ARRAY
71824: PUSH
71825: LD_INT 4
71827: ARRAY
71828: PPUSH
71829: CALL_OW 171
// end else
71833: GO 71874
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
71835: LD_VAR 0 1
71839: PPUSH
71840: LD_EXP 126
71844: PUSH
71845: LD_VAR 0 2
71849: ARRAY
71850: PUSH
71851: LD_INT 3
71853: ARRAY
71854: PPUSH
71855: LD_EXP 126
71859: PUSH
71860: LD_VAR 0 2
71864: ARRAY
71865: PUSH
71866: LD_INT 4
71868: ARRAY
71869: PPUSH
71870: CALL_OW 171
// end ; end ;
71874: LD_VAR 0 3
71878: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
71879: LD_INT 0
71881: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
71882: LD_VAR 0 1
71886: PUSH
71887: LD_INT 250
71889: EQUAL
71890: PUSH
71891: LD_VAR 0 2
71895: PPUSH
71896: CALL_OW 264
71900: PUSH
71901: LD_EXP 114
71905: EQUAL
71906: AND
71907: IFFALSE 71928
// MinerPlaceMine ( unit , x , y ) ;
71909: LD_VAR 0 2
71913: PPUSH
71914: LD_VAR 0 4
71918: PPUSH
71919: LD_VAR 0 5
71923: PPUSH
71924: CALL 74656 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
71928: LD_VAR 0 1
71932: PUSH
71933: LD_INT 251
71935: EQUAL
71936: PUSH
71937: LD_VAR 0 2
71941: PPUSH
71942: CALL_OW 264
71946: PUSH
71947: LD_EXP 114
71951: EQUAL
71952: AND
71953: IFFALSE 71974
// MinerDetonateMine ( unit , x , y ) ;
71955: LD_VAR 0 2
71959: PPUSH
71960: LD_VAR 0 4
71964: PPUSH
71965: LD_VAR 0 5
71969: PPUSH
71970: CALL 74933 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71974: LD_VAR 0 1
71978: PUSH
71979: LD_INT 252
71981: EQUAL
71982: PUSH
71983: LD_VAR 0 2
71987: PPUSH
71988: CALL_OW 264
71992: PUSH
71993: LD_EXP 114
71997: EQUAL
71998: AND
71999: IFFALSE 72020
// MinerCreateMinefield ( unit , x , y ) ;
72001: LD_VAR 0 2
72005: PPUSH
72006: LD_VAR 0 4
72010: PPUSH
72011: LD_VAR 0 5
72015: PPUSH
72016: CALL 75350 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72020: LD_VAR 0 1
72024: PUSH
72025: LD_INT 253
72027: EQUAL
72028: PUSH
72029: LD_VAR 0 2
72033: PPUSH
72034: CALL_OW 257
72038: PUSH
72039: LD_INT 5
72041: EQUAL
72042: AND
72043: IFFALSE 72064
// ComBinocular ( unit , x , y ) ;
72045: LD_VAR 0 2
72049: PPUSH
72050: LD_VAR 0 4
72054: PPUSH
72055: LD_VAR 0 5
72059: PPUSH
72060: CALL 75721 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72064: LD_VAR 0 1
72068: PUSH
72069: LD_INT 254
72071: EQUAL
72072: PUSH
72073: LD_VAR 0 2
72077: PPUSH
72078: CALL_OW 264
72082: PUSH
72083: LD_EXP 109
72087: EQUAL
72088: AND
72089: PUSH
72090: LD_VAR 0 3
72094: PPUSH
72095: CALL_OW 263
72099: PUSH
72100: LD_INT 3
72102: EQUAL
72103: AND
72104: IFFALSE 72120
// HackDestroyVehicle ( unit , selectedUnit ) ;
72106: LD_VAR 0 2
72110: PPUSH
72111: LD_VAR 0 3
72115: PPUSH
72116: CALL 74016 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72120: LD_VAR 0 1
72124: PUSH
72125: LD_INT 255
72127: EQUAL
72128: PUSH
72129: LD_VAR 0 2
72133: PPUSH
72134: CALL_OW 264
72138: PUSH
72139: LD_INT 14
72141: PUSH
72142: LD_INT 53
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: IN
72149: AND
72150: PUSH
72151: LD_VAR 0 4
72155: PPUSH
72156: LD_VAR 0 5
72160: PPUSH
72161: CALL_OW 488
72165: AND
72166: IFFALSE 72190
// CutTreeXYR ( unit , x , y , 12 ) ;
72168: LD_VAR 0 2
72172: PPUSH
72173: LD_VAR 0 4
72177: PPUSH
72178: LD_VAR 0 5
72182: PPUSH
72183: LD_INT 12
72185: PPUSH
72186: CALL 72582 0 4
// if cmd = 256 then
72190: LD_VAR 0 1
72194: PUSH
72195: LD_INT 256
72197: EQUAL
72198: IFFALSE 72219
// SetFactoryWaypoint ( unit , x , y ) ;
72200: LD_VAR 0 2
72204: PPUSH
72205: LD_VAR 0 4
72209: PPUSH
72210: LD_VAR 0 5
72214: PPUSH
72215: CALL 72224 0 3
// end ;
72219: LD_VAR 0 6
72223: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72224: LD_INT 0
72226: PPUSH
72227: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72228: LD_VAR 0 1
72232: NOT
72233: PUSH
72234: LD_VAR 0 2
72238: PPUSH
72239: LD_VAR 0 3
72243: PPUSH
72244: CALL_OW 488
72248: NOT
72249: OR
72250: PUSH
72251: LD_VAR 0 1
72255: PPUSH
72256: CALL_OW 266
72260: PUSH
72261: LD_INT 3
72263: NONEQUAL
72264: PUSH
72265: LD_VAR 0 1
72269: PPUSH
72270: CALL_OW 247
72274: PUSH
72275: LD_INT 1
72277: EQUAL
72278: NOT
72279: AND
72280: OR
72281: IFFALSE 72285
// exit ;
72283: GO 72434
// if GetType ( factory ) = unit_human then
72285: LD_VAR 0 1
72289: PPUSH
72290: CALL_OW 247
72294: PUSH
72295: LD_INT 1
72297: EQUAL
72298: IFFALSE 72315
// factory := IsInUnit ( factory ) ;
72300: LD_ADDR_VAR 0 1
72304: PUSH
72305: LD_VAR 0 1
72309: PPUSH
72310: CALL_OW 310
72314: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72315: LD_VAR 0 1
72319: PPUSH
72320: CALL_OW 266
72324: PUSH
72325: LD_INT 3
72327: NONEQUAL
72328: IFFALSE 72332
// exit ;
72330: GO 72434
// if HexInfo ( x , y ) = factory then
72332: LD_VAR 0 2
72336: PPUSH
72337: LD_VAR 0 3
72341: PPUSH
72342: CALL_OW 428
72346: PUSH
72347: LD_VAR 0 1
72351: EQUAL
72352: IFFALSE 72379
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
72354: LD_ADDR_EXP 126
72358: PUSH
72359: LD_EXP 126
72363: PPUSH
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_INT 0
72371: PPUSH
72372: CALL_OW 1
72376: ST_TO_ADDR
72377: GO 72430
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
72379: LD_ADDR_EXP 126
72383: PUSH
72384: LD_EXP 126
72388: PPUSH
72389: LD_VAR 0 1
72393: PPUSH
72394: LD_VAR 0 1
72398: PPUSH
72399: CALL_OW 255
72403: PUSH
72404: LD_VAR 0 1
72408: PUSH
72409: LD_VAR 0 2
72413: PUSH
72414: LD_VAR 0 3
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: LIST
72423: LIST
72424: PPUSH
72425: CALL_OW 1
72429: ST_TO_ADDR
// UpdateFactoryWaypoints ;
72430: CALL 72439 0 0
// end ;
72434: LD_VAR 0 4
72438: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
72439: LD_INT 0
72441: PPUSH
72442: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
72443: LD_STRING resetFactoryWaypoint();
72445: PPUSH
72446: CALL_OW 559
// if factoryWaypoints then
72450: LD_EXP 126
72454: IFFALSE 72577
// begin for i := 1 to factoryWaypoints do
72456: LD_ADDR_VAR 0 2
72460: PUSH
72461: DOUBLE
72462: LD_INT 1
72464: DEC
72465: ST_TO_ADDR
72466: LD_EXP 126
72470: PUSH
72471: FOR_TO
72472: IFFALSE 72575
// if factoryWaypoints [ i ] then
72474: LD_EXP 126
72478: PUSH
72479: LD_VAR 0 2
72483: ARRAY
72484: IFFALSE 72573
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
72486: LD_STRING setFactoryWaypointXY(
72488: PUSH
72489: LD_EXP 126
72493: PUSH
72494: LD_VAR 0 2
72498: ARRAY
72499: PUSH
72500: LD_INT 1
72502: ARRAY
72503: STR
72504: PUSH
72505: LD_STRING ,
72507: STR
72508: PUSH
72509: LD_EXP 126
72513: PUSH
72514: LD_VAR 0 2
72518: ARRAY
72519: PUSH
72520: LD_INT 2
72522: ARRAY
72523: STR
72524: PUSH
72525: LD_STRING ,
72527: STR
72528: PUSH
72529: LD_EXP 126
72533: PUSH
72534: LD_VAR 0 2
72538: ARRAY
72539: PUSH
72540: LD_INT 3
72542: ARRAY
72543: STR
72544: PUSH
72545: LD_STRING ,
72547: STR
72548: PUSH
72549: LD_EXP 126
72553: PUSH
72554: LD_VAR 0 2
72558: ARRAY
72559: PUSH
72560: LD_INT 4
72562: ARRAY
72563: STR
72564: PUSH
72565: LD_STRING )
72567: STR
72568: PPUSH
72569: CALL_OW 559
72573: GO 72471
72575: POP
72576: POP
// end ; end ;
72577: LD_VAR 0 1
72581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
72582: LD_INT 0
72584: PPUSH
72585: PPUSH
72586: PPUSH
72587: PPUSH
72588: PPUSH
72589: PPUSH
72590: PPUSH
72591: PPUSH
72592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
72593: LD_VAR 0 1
72597: NOT
72598: PUSH
72599: LD_VAR 0 2
72603: PPUSH
72604: LD_VAR 0 3
72608: PPUSH
72609: CALL_OW 488
72613: NOT
72614: OR
72615: PUSH
72616: LD_VAR 0 4
72620: NOT
72621: OR
72622: IFFALSE 72626
// exit ;
72624: GO 72966
// list := [ ] ;
72626: LD_ADDR_VAR 0 13
72630: PUSH
72631: EMPTY
72632: ST_TO_ADDR
// if x - r < 0 then
72633: LD_VAR 0 2
72637: PUSH
72638: LD_VAR 0 4
72642: MINUS
72643: PUSH
72644: LD_INT 0
72646: LESS
72647: IFFALSE 72659
// min_x := 0 else
72649: LD_ADDR_VAR 0 7
72653: PUSH
72654: LD_INT 0
72656: ST_TO_ADDR
72657: GO 72675
// min_x := x - r ;
72659: LD_ADDR_VAR 0 7
72663: PUSH
72664: LD_VAR 0 2
72668: PUSH
72669: LD_VAR 0 4
72673: MINUS
72674: ST_TO_ADDR
// if y - r < 0 then
72675: LD_VAR 0 3
72679: PUSH
72680: LD_VAR 0 4
72684: MINUS
72685: PUSH
72686: LD_INT 0
72688: LESS
72689: IFFALSE 72701
// min_y := 0 else
72691: LD_ADDR_VAR 0 8
72695: PUSH
72696: LD_INT 0
72698: ST_TO_ADDR
72699: GO 72717
// min_y := y - r ;
72701: LD_ADDR_VAR 0 8
72705: PUSH
72706: LD_VAR 0 3
72710: PUSH
72711: LD_VAR 0 4
72715: MINUS
72716: ST_TO_ADDR
// max_x := x + r ;
72717: LD_ADDR_VAR 0 9
72721: PUSH
72722: LD_VAR 0 2
72726: PUSH
72727: LD_VAR 0 4
72731: PLUS
72732: ST_TO_ADDR
// max_y := y + r ;
72733: LD_ADDR_VAR 0 10
72737: PUSH
72738: LD_VAR 0 3
72742: PUSH
72743: LD_VAR 0 4
72747: PLUS
72748: ST_TO_ADDR
// for _x = min_x to max_x do
72749: LD_ADDR_VAR 0 11
72753: PUSH
72754: DOUBLE
72755: LD_VAR 0 7
72759: DEC
72760: ST_TO_ADDR
72761: LD_VAR 0 9
72765: PUSH
72766: FOR_TO
72767: IFFALSE 72884
// for _y = min_y to max_y do
72769: LD_ADDR_VAR 0 12
72773: PUSH
72774: DOUBLE
72775: LD_VAR 0 8
72779: DEC
72780: ST_TO_ADDR
72781: LD_VAR 0 10
72785: PUSH
72786: FOR_TO
72787: IFFALSE 72880
// begin if not ValidHex ( _x , _y ) then
72789: LD_VAR 0 11
72793: PPUSH
72794: LD_VAR 0 12
72798: PPUSH
72799: CALL_OW 488
72803: NOT
72804: IFFALSE 72808
// continue ;
72806: GO 72786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72808: LD_VAR 0 11
72812: PPUSH
72813: LD_VAR 0 12
72817: PPUSH
72818: CALL_OW 351
72822: PUSH
72823: LD_VAR 0 11
72827: PPUSH
72828: LD_VAR 0 12
72832: PPUSH
72833: CALL_OW 554
72837: AND
72838: IFFALSE 72878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72840: LD_ADDR_VAR 0 13
72844: PUSH
72845: LD_VAR 0 13
72849: PPUSH
72850: LD_VAR 0 13
72854: PUSH
72855: LD_INT 1
72857: PLUS
72858: PPUSH
72859: LD_VAR 0 11
72863: PUSH
72864: LD_VAR 0 12
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PPUSH
72873: CALL_OW 2
72877: ST_TO_ADDR
// end ;
72878: GO 72786
72880: POP
72881: POP
72882: GO 72766
72884: POP
72885: POP
// if not list then
72886: LD_VAR 0 13
72890: NOT
72891: IFFALSE 72895
// exit ;
72893: GO 72966
// for i in list do
72895: LD_ADDR_VAR 0 6
72899: PUSH
72900: LD_VAR 0 13
72904: PUSH
72905: FOR_IN
72906: IFFALSE 72964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
72908: LD_VAR 0 1
72912: PPUSH
72913: LD_STRING M
72915: PUSH
72916: LD_VAR 0 6
72920: PUSH
72921: LD_INT 1
72923: ARRAY
72924: PUSH
72925: LD_VAR 0 6
72929: PUSH
72930: LD_INT 2
72932: ARRAY
72933: PUSH
72934: LD_INT 0
72936: PUSH
72937: LD_INT 0
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: LD_INT 0
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: PUSH
72955: EMPTY
72956: LIST
72957: PPUSH
72958: CALL_OW 447
72962: GO 72905
72964: POP
72965: POP
// end ;
72966: LD_VAR 0 5
72970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72971: LD_EXP 127
72975: NOT
72976: IFFALSE 73026
72978: GO 72980
72980: DISABLE
// begin initHack := true ;
72981: LD_ADDR_EXP 127
72985: PUSH
72986: LD_INT 1
72988: ST_TO_ADDR
// hackTanks := [ ] ;
72989: LD_ADDR_EXP 128
72993: PUSH
72994: EMPTY
72995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72996: LD_ADDR_EXP 129
73000: PUSH
73001: EMPTY
73002: ST_TO_ADDR
// hackLimit := 3 ;
73003: LD_ADDR_EXP 130
73007: PUSH
73008: LD_INT 3
73010: ST_TO_ADDR
// hackDist := 12 ;
73011: LD_ADDR_EXP 131
73015: PUSH
73016: LD_INT 12
73018: ST_TO_ADDR
// hackCounter := [ ] ;
73019: LD_ADDR_EXP 132
73023: PUSH
73024: EMPTY
73025: ST_TO_ADDR
// end ;
73026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
73027: LD_EXP 127
73031: PUSH
73032: LD_INT 34
73034: PUSH
73035: LD_EXP 109
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PPUSH
73044: CALL_OW 69
73048: AND
73049: IFFALSE 73304
73051: GO 73053
73053: DISABLE
73054: LD_INT 0
73056: PPUSH
73057: PPUSH
// begin enable ;
73058: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
73059: LD_ADDR_VAR 0 1
73063: PUSH
73064: LD_INT 34
73066: PUSH
73067: LD_EXP 109
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PPUSH
73076: CALL_OW 69
73080: PUSH
73081: FOR_IN
73082: IFFALSE 73302
// begin if not i in hackTanks then
73084: LD_VAR 0 1
73088: PUSH
73089: LD_EXP 128
73093: IN
73094: NOT
73095: IFFALSE 73178
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
73097: LD_ADDR_EXP 128
73101: PUSH
73102: LD_EXP 128
73106: PPUSH
73107: LD_EXP 128
73111: PUSH
73112: LD_INT 1
73114: PLUS
73115: PPUSH
73116: LD_VAR 0 1
73120: PPUSH
73121: CALL_OW 1
73125: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
73126: LD_ADDR_EXP 129
73130: PUSH
73131: LD_EXP 129
73135: PPUSH
73136: LD_EXP 129
73140: PUSH
73141: LD_INT 1
73143: PLUS
73144: PPUSH
73145: EMPTY
73146: PPUSH
73147: CALL_OW 1
73151: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
73152: LD_ADDR_EXP 132
73156: PUSH
73157: LD_EXP 132
73161: PPUSH
73162: LD_EXP 132
73166: PUSH
73167: LD_INT 1
73169: PLUS
73170: PPUSH
73171: EMPTY
73172: PPUSH
73173: CALL_OW 1
73177: ST_TO_ADDR
// end ; if not IsOk ( i ) then
73178: LD_VAR 0 1
73182: PPUSH
73183: CALL_OW 302
73187: NOT
73188: IFFALSE 73201
// begin HackUnlinkAll ( i ) ;
73190: LD_VAR 0 1
73194: PPUSH
73195: CALL 73307 0 1
// continue ;
73199: GO 73081
// end ; HackCheckCapturedStatus ( i ) ;
73201: LD_VAR 0 1
73205: PPUSH
73206: CALL 73750 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
73210: LD_ADDR_VAR 0 2
73214: PUSH
73215: LD_INT 81
73217: PUSH
73218: LD_VAR 0 1
73222: PPUSH
73223: CALL_OW 255
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 33
73234: PUSH
73235: LD_INT 3
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 91
73244: PUSH
73245: LD_VAR 0 1
73249: PUSH
73250: LD_EXP 131
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 50
73262: PUSH
73263: EMPTY
73264: LIST
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: LIST
73270: LIST
73271: PPUSH
73272: CALL_OW 69
73276: ST_TO_ADDR
// if not tmp then
73277: LD_VAR 0 2
73281: NOT
73282: IFFALSE 73286
// continue ;
73284: GO 73081
// HackLink ( i , tmp ) ;
73286: LD_VAR 0 1
73290: PPUSH
73291: LD_VAR 0 2
73295: PPUSH
73296: CALL 73443 0 2
// end ;
73300: GO 73081
73302: POP
73303: POP
// end ;
73304: PPOPN 2
73306: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
73307: LD_INT 0
73309: PPUSH
73310: PPUSH
73311: PPUSH
// if not hack in hackTanks then
73312: LD_VAR 0 1
73316: PUSH
73317: LD_EXP 128
73321: IN
73322: NOT
73323: IFFALSE 73327
// exit ;
73325: GO 73438
// index := GetElementIndex ( hackTanks , hack ) ;
73327: LD_ADDR_VAR 0 4
73331: PUSH
73332: LD_EXP 128
73336: PPUSH
73337: LD_VAR 0 1
73341: PPUSH
73342: CALL 21528 0 2
73346: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
73347: LD_EXP 129
73351: PUSH
73352: LD_VAR 0 4
73356: ARRAY
73357: IFFALSE 73438
// begin for i in hackTanksCaptured [ index ] do
73359: LD_ADDR_VAR 0 3
73363: PUSH
73364: LD_EXP 129
73368: PUSH
73369: LD_VAR 0 4
73373: ARRAY
73374: PUSH
73375: FOR_IN
73376: IFFALSE 73402
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
73378: LD_VAR 0 3
73382: PUSH
73383: LD_INT 1
73385: ARRAY
73386: PPUSH
73387: LD_VAR 0 3
73391: PUSH
73392: LD_INT 2
73394: ARRAY
73395: PPUSH
73396: CALL_OW 235
73400: GO 73375
73402: POP
73403: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
73404: LD_ADDR_EXP 129
73408: PUSH
73409: LD_EXP 129
73413: PPUSH
73414: LD_VAR 0 4
73418: PPUSH
73419: EMPTY
73420: PPUSH
73421: CALL_OW 1
73425: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
73426: LD_VAR 0 1
73430: PPUSH
73431: LD_INT 0
73433: PPUSH
73434: CALL_OW 505
// end ; end ;
73438: LD_VAR 0 2
73442: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
73443: LD_INT 0
73445: PPUSH
73446: PPUSH
73447: PPUSH
// if not hack in hackTanks or not vehicles then
73448: LD_VAR 0 1
73452: PUSH
73453: LD_EXP 128
73457: IN
73458: NOT
73459: PUSH
73460: LD_VAR 0 2
73464: NOT
73465: OR
73466: IFFALSE 73470
// exit ;
73468: GO 73745
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
73470: LD_ADDR_VAR 0 2
73474: PUSH
73475: LD_VAR 0 1
73479: PPUSH
73480: LD_VAR 0 2
73484: PPUSH
73485: LD_INT 1
73487: PPUSH
73488: LD_INT 1
73490: PPUSH
73491: CALL 22178 0 4
73495: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73496: LD_ADDR_VAR 0 5
73500: PUSH
73501: LD_EXP 128
73505: PPUSH
73506: LD_VAR 0 1
73510: PPUSH
73511: CALL 21528 0 2
73515: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73516: LD_EXP 129
73520: PUSH
73521: LD_VAR 0 5
73525: ARRAY
73526: PUSH
73527: LD_EXP 130
73531: LESS
73532: IFFALSE 73721
// begin for i := 1 to vehicles do
73534: LD_ADDR_VAR 0 4
73538: PUSH
73539: DOUBLE
73540: LD_INT 1
73542: DEC
73543: ST_TO_ADDR
73544: LD_VAR 0 2
73548: PUSH
73549: FOR_TO
73550: IFFALSE 73719
// begin if hackTanksCaptured [ index ] = hackLimit then
73552: LD_EXP 129
73556: PUSH
73557: LD_VAR 0 5
73561: ARRAY
73562: PUSH
73563: LD_EXP 130
73567: EQUAL
73568: IFFALSE 73572
// break ;
73570: GO 73719
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73572: LD_ADDR_EXP 132
73576: PUSH
73577: LD_EXP 132
73581: PPUSH
73582: LD_VAR 0 5
73586: PPUSH
73587: LD_EXP 132
73591: PUSH
73592: LD_VAR 0 5
73596: ARRAY
73597: PUSH
73598: LD_INT 1
73600: PLUS
73601: PPUSH
73602: CALL_OW 1
73606: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73607: LD_ADDR_EXP 129
73611: PUSH
73612: LD_EXP 129
73616: PPUSH
73617: LD_VAR 0 5
73621: PUSH
73622: LD_EXP 129
73626: PUSH
73627: LD_VAR 0 5
73631: ARRAY
73632: PUSH
73633: LD_INT 1
73635: PLUS
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PPUSH
73641: LD_VAR 0 2
73645: PUSH
73646: LD_VAR 0 4
73650: ARRAY
73651: PUSH
73652: LD_VAR 0 2
73656: PUSH
73657: LD_VAR 0 4
73661: ARRAY
73662: PPUSH
73663: CALL_OW 255
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PPUSH
73672: CALL 21743 0 3
73676: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73677: LD_VAR 0 2
73681: PUSH
73682: LD_VAR 0 4
73686: ARRAY
73687: PPUSH
73688: LD_VAR 0 1
73692: PPUSH
73693: CALL_OW 255
73697: PPUSH
73698: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73702: LD_VAR 0 2
73706: PUSH
73707: LD_VAR 0 4
73711: ARRAY
73712: PPUSH
73713: CALL_OW 141
// end ;
73717: GO 73549
73719: POP
73720: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73721: LD_VAR 0 1
73725: PPUSH
73726: LD_EXP 129
73730: PUSH
73731: LD_VAR 0 5
73735: ARRAY
73736: PUSH
73737: LD_INT 0
73739: PLUS
73740: PPUSH
73741: CALL_OW 505
// end ;
73745: LD_VAR 0 3
73749: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73750: LD_INT 0
73752: PPUSH
73753: PPUSH
73754: PPUSH
73755: PPUSH
// if not hack in hackTanks then
73756: LD_VAR 0 1
73760: PUSH
73761: LD_EXP 128
73765: IN
73766: NOT
73767: IFFALSE 73771
// exit ;
73769: GO 74011
// index := GetElementIndex ( hackTanks , hack ) ;
73771: LD_ADDR_VAR 0 4
73775: PUSH
73776: LD_EXP 128
73780: PPUSH
73781: LD_VAR 0 1
73785: PPUSH
73786: CALL 21528 0 2
73790: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73791: LD_ADDR_VAR 0 3
73795: PUSH
73796: DOUBLE
73797: LD_EXP 129
73801: PUSH
73802: LD_VAR 0 4
73806: ARRAY
73807: INC
73808: ST_TO_ADDR
73809: LD_INT 1
73811: PUSH
73812: FOR_DOWNTO
73813: IFFALSE 73985
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73815: LD_ADDR_VAR 0 5
73819: PUSH
73820: LD_EXP 129
73824: PUSH
73825: LD_VAR 0 4
73829: ARRAY
73830: PUSH
73831: LD_VAR 0 3
73835: ARRAY
73836: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73837: LD_VAR 0 5
73841: PUSH
73842: LD_INT 1
73844: ARRAY
73845: PPUSH
73846: CALL_OW 302
73850: NOT
73851: PUSH
73852: LD_VAR 0 5
73856: PUSH
73857: LD_INT 1
73859: ARRAY
73860: PPUSH
73861: CALL_OW 255
73865: PUSH
73866: LD_VAR 0 1
73870: PPUSH
73871: CALL_OW 255
73875: NONEQUAL
73876: OR
73877: IFFALSE 73983
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73879: LD_VAR 0 5
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: PPUSH
73888: CALL_OW 305
73892: PUSH
73893: LD_VAR 0 5
73897: PUSH
73898: LD_INT 1
73900: ARRAY
73901: PPUSH
73902: CALL_OW 255
73906: PUSH
73907: LD_VAR 0 1
73911: PPUSH
73912: CALL_OW 255
73916: EQUAL
73917: AND
73918: IFFALSE 73942
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73920: LD_VAR 0 5
73924: PUSH
73925: LD_INT 1
73927: ARRAY
73928: PPUSH
73929: LD_VAR 0 5
73933: PUSH
73934: LD_INT 2
73936: ARRAY
73937: PPUSH
73938: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73942: LD_ADDR_EXP 129
73946: PUSH
73947: LD_EXP 129
73951: PPUSH
73952: LD_VAR 0 4
73956: PPUSH
73957: LD_EXP 129
73961: PUSH
73962: LD_VAR 0 4
73966: ARRAY
73967: PPUSH
73968: LD_VAR 0 3
73972: PPUSH
73973: CALL_OW 3
73977: PPUSH
73978: CALL_OW 1
73982: ST_TO_ADDR
// end ; end ;
73983: GO 73812
73985: POP
73986: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73987: LD_VAR 0 1
73991: PPUSH
73992: LD_EXP 129
73996: PUSH
73997: LD_VAR 0 4
74001: ARRAY
74002: PUSH
74003: LD_INT 0
74005: PLUS
74006: PPUSH
74007: CALL_OW 505
// end ;
74011: LD_VAR 0 2
74015: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
74016: LD_INT 0
74018: PPUSH
74019: PPUSH
74020: PPUSH
74021: PPUSH
// if not hack in hackTanks then
74022: LD_VAR 0 1
74026: PUSH
74027: LD_EXP 128
74031: IN
74032: NOT
74033: IFFALSE 74037
// exit ;
74035: GO 74122
// index := GetElementIndex ( hackTanks , hack ) ;
74037: LD_ADDR_VAR 0 5
74041: PUSH
74042: LD_EXP 128
74046: PPUSH
74047: LD_VAR 0 1
74051: PPUSH
74052: CALL 21528 0 2
74056: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
74057: LD_ADDR_VAR 0 4
74061: PUSH
74062: DOUBLE
74063: LD_INT 1
74065: DEC
74066: ST_TO_ADDR
74067: LD_EXP 129
74071: PUSH
74072: LD_VAR 0 5
74076: ARRAY
74077: PUSH
74078: FOR_TO
74079: IFFALSE 74120
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
74081: LD_EXP 129
74085: PUSH
74086: LD_VAR 0 5
74090: ARRAY
74091: PUSH
74092: LD_VAR 0 4
74096: ARRAY
74097: PUSH
74098: LD_INT 1
74100: ARRAY
74101: PUSH
74102: LD_VAR 0 2
74106: EQUAL
74107: IFFALSE 74118
// KillUnit ( vehicle ) ;
74109: LD_VAR 0 2
74113: PPUSH
74114: CALL_OW 66
74118: GO 74078
74120: POP
74121: POP
// end ;
74122: LD_VAR 0 3
74126: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
74127: LD_EXP 133
74131: NOT
74132: IFFALSE 74167
74134: GO 74136
74136: DISABLE
// begin initMiner := true ;
74137: LD_ADDR_EXP 133
74141: PUSH
74142: LD_INT 1
74144: ST_TO_ADDR
// minersList := [ ] ;
74145: LD_ADDR_EXP 134
74149: PUSH
74150: EMPTY
74151: ST_TO_ADDR
// minerMinesList := [ ] ;
74152: LD_ADDR_EXP 135
74156: PUSH
74157: EMPTY
74158: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
74159: LD_ADDR_EXP 136
74163: PUSH
74164: LD_INT 5
74166: ST_TO_ADDR
// end ;
74167: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
74168: LD_EXP 133
74172: PUSH
74173: LD_INT 34
74175: PUSH
74176: LD_EXP 114
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PPUSH
74185: CALL_OW 69
74189: AND
74190: IFFALSE 74653
74192: GO 74194
74194: DISABLE
74195: LD_INT 0
74197: PPUSH
74198: PPUSH
74199: PPUSH
74200: PPUSH
// begin enable ;
74201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
74202: LD_ADDR_VAR 0 1
74206: PUSH
74207: LD_INT 34
74209: PUSH
74210: LD_EXP 114
74214: PUSH
74215: EMPTY
74216: LIST
74217: LIST
74218: PPUSH
74219: CALL_OW 69
74223: PUSH
74224: FOR_IN
74225: IFFALSE 74297
// begin if not i in minersList then
74227: LD_VAR 0 1
74231: PUSH
74232: LD_EXP 134
74236: IN
74237: NOT
74238: IFFALSE 74295
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
74240: LD_ADDR_EXP 134
74244: PUSH
74245: LD_EXP 134
74249: PPUSH
74250: LD_EXP 134
74254: PUSH
74255: LD_INT 1
74257: PLUS
74258: PPUSH
74259: LD_VAR 0 1
74263: PPUSH
74264: CALL_OW 1
74268: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
74269: LD_ADDR_EXP 135
74273: PUSH
74274: LD_EXP 135
74278: PPUSH
74279: LD_EXP 135
74283: PUSH
74284: LD_INT 1
74286: PLUS
74287: PPUSH
74288: EMPTY
74289: PPUSH
74290: CALL_OW 1
74294: ST_TO_ADDR
// end end ;
74295: GO 74224
74297: POP
74298: POP
// for i := minerMinesList downto 1 do
74299: LD_ADDR_VAR 0 1
74303: PUSH
74304: DOUBLE
74305: LD_EXP 135
74309: INC
74310: ST_TO_ADDR
74311: LD_INT 1
74313: PUSH
74314: FOR_DOWNTO
74315: IFFALSE 74651
// begin if IsLive ( minersList [ i ] ) then
74317: LD_EXP 134
74321: PUSH
74322: LD_VAR 0 1
74326: ARRAY
74327: PPUSH
74328: CALL_OW 300
74332: IFFALSE 74360
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
74334: LD_EXP 134
74338: PUSH
74339: LD_VAR 0 1
74343: ARRAY
74344: PPUSH
74345: LD_EXP 135
74349: PUSH
74350: LD_VAR 0 1
74354: ARRAY
74355: PPUSH
74356: CALL_OW 505
// if not minerMinesList [ i ] then
74360: LD_EXP 135
74364: PUSH
74365: LD_VAR 0 1
74369: ARRAY
74370: NOT
74371: IFFALSE 74375
// continue ;
74373: GO 74314
// for j := minerMinesList [ i ] downto 1 do
74375: LD_ADDR_VAR 0 2
74379: PUSH
74380: DOUBLE
74381: LD_EXP 135
74385: PUSH
74386: LD_VAR 0 1
74390: ARRAY
74391: INC
74392: ST_TO_ADDR
74393: LD_INT 1
74395: PUSH
74396: FOR_DOWNTO
74397: IFFALSE 74647
// begin side := GetSide ( minersList [ i ] ) ;
74399: LD_ADDR_VAR 0 3
74403: PUSH
74404: LD_EXP 134
74408: PUSH
74409: LD_VAR 0 1
74413: ARRAY
74414: PPUSH
74415: CALL_OW 255
74419: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74420: LD_ADDR_VAR 0 4
74424: PUSH
74425: LD_EXP 135
74429: PUSH
74430: LD_VAR 0 1
74434: ARRAY
74435: PUSH
74436: LD_VAR 0 2
74440: ARRAY
74441: PUSH
74442: LD_INT 1
74444: ARRAY
74445: PPUSH
74446: LD_EXP 135
74450: PUSH
74451: LD_VAR 0 1
74455: ARRAY
74456: PUSH
74457: LD_VAR 0 2
74461: ARRAY
74462: PUSH
74463: LD_INT 2
74465: ARRAY
74466: PPUSH
74467: CALL_OW 428
74471: ST_TO_ADDR
// if not tmp then
74472: LD_VAR 0 4
74476: NOT
74477: IFFALSE 74481
// continue ;
74479: GO 74396
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74481: LD_VAR 0 4
74485: PUSH
74486: LD_INT 81
74488: PUSH
74489: LD_VAR 0 3
74493: PUSH
74494: EMPTY
74495: LIST
74496: LIST
74497: PPUSH
74498: CALL_OW 69
74502: IN
74503: PUSH
74504: LD_EXP 135
74508: PUSH
74509: LD_VAR 0 1
74513: ARRAY
74514: PUSH
74515: LD_VAR 0 2
74519: ARRAY
74520: PUSH
74521: LD_INT 1
74523: ARRAY
74524: PPUSH
74525: LD_EXP 135
74529: PUSH
74530: LD_VAR 0 1
74534: ARRAY
74535: PUSH
74536: LD_VAR 0 2
74540: ARRAY
74541: PUSH
74542: LD_INT 2
74544: ARRAY
74545: PPUSH
74546: CALL_OW 458
74550: AND
74551: IFFALSE 74645
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74553: LD_EXP 135
74557: PUSH
74558: LD_VAR 0 1
74562: ARRAY
74563: PUSH
74564: LD_VAR 0 2
74568: ARRAY
74569: PUSH
74570: LD_INT 1
74572: ARRAY
74573: PPUSH
74574: LD_EXP 135
74578: PUSH
74579: LD_VAR 0 1
74583: ARRAY
74584: PUSH
74585: LD_VAR 0 2
74589: ARRAY
74590: PUSH
74591: LD_INT 2
74593: ARRAY
74594: PPUSH
74595: LD_VAR 0 3
74599: PPUSH
74600: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74604: LD_ADDR_EXP 135
74608: PUSH
74609: LD_EXP 135
74613: PPUSH
74614: LD_VAR 0 1
74618: PPUSH
74619: LD_EXP 135
74623: PUSH
74624: LD_VAR 0 1
74628: ARRAY
74629: PPUSH
74630: LD_VAR 0 2
74634: PPUSH
74635: CALL_OW 3
74639: PPUSH
74640: CALL_OW 1
74644: ST_TO_ADDR
// end ; end ;
74645: GO 74396
74647: POP
74648: POP
// end ;
74649: GO 74314
74651: POP
74652: POP
// end ;
74653: PPOPN 4
74655: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
74656: LD_INT 0
74658: PPUSH
74659: PPUSH
// result := false ;
74660: LD_ADDR_VAR 0 4
74664: PUSH
74665: LD_INT 0
74667: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74668: LD_VAR 0 1
74672: PPUSH
74673: CALL_OW 264
74677: PUSH
74678: LD_EXP 114
74682: EQUAL
74683: NOT
74684: IFFALSE 74688
// exit ;
74686: GO 74928
// index := GetElementIndex ( minersList , unit ) ;
74688: LD_ADDR_VAR 0 5
74692: PUSH
74693: LD_EXP 134
74697: PPUSH
74698: LD_VAR 0 1
74702: PPUSH
74703: CALL 21528 0 2
74707: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74708: LD_EXP 135
74712: PUSH
74713: LD_VAR 0 5
74717: ARRAY
74718: PUSH
74719: LD_EXP 136
74723: GREATEREQUAL
74724: IFFALSE 74728
// exit ;
74726: GO 74928
// ComMoveXY ( unit , x , y ) ;
74728: LD_VAR 0 1
74732: PPUSH
74733: LD_VAR 0 2
74737: PPUSH
74738: LD_VAR 0 3
74742: PPUSH
74743: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74747: LD_INT 35
74749: PPUSH
74750: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74754: LD_VAR 0 1
74758: PPUSH
74759: LD_VAR 0 2
74763: PPUSH
74764: LD_VAR 0 3
74768: PPUSH
74769: CALL 52247 0 3
74773: NOT
74774: PUSH
74775: LD_VAR 0 1
74779: PPUSH
74780: CALL_OW 314
74784: AND
74785: IFFALSE 74789
// exit ;
74787: GO 74928
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74789: LD_VAR 0 2
74793: PPUSH
74794: LD_VAR 0 3
74798: PPUSH
74799: CALL_OW 428
74803: PUSH
74804: LD_VAR 0 1
74808: EQUAL
74809: PUSH
74810: LD_VAR 0 1
74814: PPUSH
74815: CALL_OW 314
74819: NOT
74820: AND
74821: IFFALSE 74747
// PlaySoundXY ( x , y , PlantMine ) ;
74823: LD_VAR 0 2
74827: PPUSH
74828: LD_VAR 0 3
74832: PPUSH
74833: LD_STRING PlantMine
74835: PPUSH
74836: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
74840: LD_VAR 0 2
74844: PPUSH
74845: LD_VAR 0 3
74849: PPUSH
74850: LD_VAR 0 1
74854: PPUSH
74855: CALL_OW 255
74859: PPUSH
74860: LD_INT 0
74862: PPUSH
74863: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74867: LD_ADDR_EXP 135
74871: PUSH
74872: LD_EXP 135
74876: PPUSH
74877: LD_VAR 0 5
74881: PUSH
74882: LD_EXP 135
74886: PUSH
74887: LD_VAR 0 5
74891: ARRAY
74892: PUSH
74893: LD_INT 1
74895: PLUS
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: PPUSH
74901: LD_VAR 0 2
74905: PUSH
74906: LD_VAR 0 3
74910: PUSH
74911: EMPTY
74912: LIST
74913: LIST
74914: PPUSH
74915: CALL 21743 0 3
74919: ST_TO_ADDR
// result := true ;
74920: LD_ADDR_VAR 0 4
74924: PUSH
74925: LD_INT 1
74927: ST_TO_ADDR
// end ;
74928: LD_VAR 0 4
74932: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74933: LD_INT 0
74935: PPUSH
74936: PPUSH
74937: PPUSH
// if not unit in minersList then
74938: LD_VAR 0 1
74942: PUSH
74943: LD_EXP 134
74947: IN
74948: NOT
74949: IFFALSE 74953
// exit ;
74951: GO 75345
// index := GetElementIndex ( minersList , unit ) ;
74953: LD_ADDR_VAR 0 6
74957: PUSH
74958: LD_EXP 134
74962: PPUSH
74963: LD_VAR 0 1
74967: PPUSH
74968: CALL 21528 0 2
74972: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74973: LD_ADDR_VAR 0 5
74977: PUSH
74978: DOUBLE
74979: LD_EXP 135
74983: PUSH
74984: LD_VAR 0 6
74988: ARRAY
74989: INC
74990: ST_TO_ADDR
74991: LD_INT 1
74993: PUSH
74994: FOR_DOWNTO
74995: IFFALSE 75156
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
74997: LD_EXP 135
75001: PUSH
75002: LD_VAR 0 6
75006: ARRAY
75007: PUSH
75008: LD_VAR 0 5
75012: ARRAY
75013: PUSH
75014: LD_INT 1
75016: ARRAY
75017: PUSH
75018: LD_VAR 0 2
75022: EQUAL
75023: PUSH
75024: LD_EXP 135
75028: PUSH
75029: LD_VAR 0 6
75033: ARRAY
75034: PUSH
75035: LD_VAR 0 5
75039: ARRAY
75040: PUSH
75041: LD_INT 2
75043: ARRAY
75044: PUSH
75045: LD_VAR 0 3
75049: EQUAL
75050: AND
75051: IFFALSE 75154
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75053: LD_EXP 135
75057: PUSH
75058: LD_VAR 0 6
75062: ARRAY
75063: PUSH
75064: LD_VAR 0 5
75068: ARRAY
75069: PUSH
75070: LD_INT 1
75072: ARRAY
75073: PPUSH
75074: LD_EXP 135
75078: PUSH
75079: LD_VAR 0 6
75083: ARRAY
75084: PUSH
75085: LD_VAR 0 5
75089: ARRAY
75090: PUSH
75091: LD_INT 2
75093: ARRAY
75094: PPUSH
75095: LD_VAR 0 1
75099: PPUSH
75100: CALL_OW 255
75104: PPUSH
75105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75109: LD_ADDR_EXP 135
75113: PUSH
75114: LD_EXP 135
75118: PPUSH
75119: LD_VAR 0 6
75123: PPUSH
75124: LD_EXP 135
75128: PUSH
75129: LD_VAR 0 6
75133: ARRAY
75134: PPUSH
75135: LD_VAR 0 5
75139: PPUSH
75140: CALL_OW 3
75144: PPUSH
75145: CALL_OW 1
75149: ST_TO_ADDR
// exit ;
75150: POP
75151: POP
75152: GO 75345
// end ; end ;
75154: GO 74994
75156: POP
75157: POP
// for i := minerMinesList [ index ] downto 1 do
75158: LD_ADDR_VAR 0 5
75162: PUSH
75163: DOUBLE
75164: LD_EXP 135
75168: PUSH
75169: LD_VAR 0 6
75173: ARRAY
75174: INC
75175: ST_TO_ADDR
75176: LD_INT 1
75178: PUSH
75179: FOR_DOWNTO
75180: IFFALSE 75343
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
75182: LD_EXP 135
75186: PUSH
75187: LD_VAR 0 6
75191: ARRAY
75192: PUSH
75193: LD_VAR 0 5
75197: ARRAY
75198: PUSH
75199: LD_INT 1
75201: ARRAY
75202: PPUSH
75203: LD_EXP 135
75207: PUSH
75208: LD_VAR 0 6
75212: ARRAY
75213: PUSH
75214: LD_VAR 0 5
75218: ARRAY
75219: PUSH
75220: LD_INT 2
75222: ARRAY
75223: PPUSH
75224: LD_VAR 0 2
75228: PPUSH
75229: LD_VAR 0 3
75233: PPUSH
75234: CALL_OW 298
75238: PUSH
75239: LD_INT 6
75241: LESS
75242: IFFALSE 75341
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75244: LD_EXP 135
75248: PUSH
75249: LD_VAR 0 6
75253: ARRAY
75254: PUSH
75255: LD_VAR 0 5
75259: ARRAY
75260: PUSH
75261: LD_INT 1
75263: ARRAY
75264: PPUSH
75265: LD_EXP 135
75269: PUSH
75270: LD_VAR 0 6
75274: ARRAY
75275: PUSH
75276: LD_VAR 0 5
75280: ARRAY
75281: PUSH
75282: LD_INT 2
75284: ARRAY
75285: PPUSH
75286: LD_VAR 0 1
75290: PPUSH
75291: CALL_OW 255
75295: PPUSH
75296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75300: LD_ADDR_EXP 135
75304: PUSH
75305: LD_EXP 135
75309: PPUSH
75310: LD_VAR 0 6
75314: PPUSH
75315: LD_EXP 135
75319: PUSH
75320: LD_VAR 0 6
75324: ARRAY
75325: PPUSH
75326: LD_VAR 0 5
75330: PPUSH
75331: CALL_OW 3
75335: PPUSH
75336: CALL_OW 1
75340: ST_TO_ADDR
// end ; end ;
75341: GO 75179
75343: POP
75344: POP
// end ;
75345: LD_VAR 0 4
75349: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
75350: LD_INT 0
75352: PPUSH
75353: PPUSH
75354: PPUSH
75355: PPUSH
75356: PPUSH
75357: PPUSH
75358: PPUSH
75359: PPUSH
75360: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
75361: LD_VAR 0 1
75365: PPUSH
75366: CALL_OW 264
75370: PUSH
75371: LD_EXP 114
75375: EQUAL
75376: NOT
75377: PUSH
75378: LD_VAR 0 1
75382: PUSH
75383: LD_EXP 134
75387: IN
75388: NOT
75389: OR
75390: IFFALSE 75394
// exit ;
75392: GO 75716
// index := GetElementIndex ( minersList , unit ) ;
75394: LD_ADDR_VAR 0 6
75398: PUSH
75399: LD_EXP 134
75403: PPUSH
75404: LD_VAR 0 1
75408: PPUSH
75409: CALL 21528 0 2
75413: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
75414: LD_ADDR_VAR 0 8
75418: PUSH
75419: LD_EXP 136
75423: PUSH
75424: LD_EXP 135
75428: PUSH
75429: LD_VAR 0 6
75433: ARRAY
75434: MINUS
75435: ST_TO_ADDR
// if not minesFreeAmount then
75436: LD_VAR 0 8
75440: NOT
75441: IFFALSE 75445
// exit ;
75443: GO 75716
// tmp := [ ] ;
75445: LD_ADDR_VAR 0 7
75449: PUSH
75450: EMPTY
75451: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75452: LD_ADDR_VAR 0 5
75456: PUSH
75457: DOUBLE
75458: LD_INT 1
75460: DEC
75461: ST_TO_ADDR
75462: LD_VAR 0 8
75466: PUSH
75467: FOR_TO
75468: IFFALSE 75663
// begin _d := rand ( 0 , 5 ) ;
75470: LD_ADDR_VAR 0 11
75474: PUSH
75475: LD_INT 0
75477: PPUSH
75478: LD_INT 5
75480: PPUSH
75481: CALL_OW 12
75485: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75486: LD_ADDR_VAR 0 12
75490: PUSH
75491: LD_INT 2
75493: PPUSH
75494: LD_INT 6
75496: PPUSH
75497: CALL_OW 12
75501: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75502: LD_ADDR_VAR 0 9
75506: PUSH
75507: LD_VAR 0 2
75511: PPUSH
75512: LD_VAR 0 11
75516: PPUSH
75517: LD_VAR 0 12
75521: PPUSH
75522: CALL_OW 272
75526: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75527: LD_ADDR_VAR 0 10
75531: PUSH
75532: LD_VAR 0 3
75536: PPUSH
75537: LD_VAR 0 11
75541: PPUSH
75542: LD_VAR 0 12
75546: PPUSH
75547: CALL_OW 273
75551: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75552: LD_VAR 0 9
75556: PPUSH
75557: LD_VAR 0 10
75561: PPUSH
75562: CALL_OW 488
75566: PUSH
75567: LD_VAR 0 9
75571: PUSH
75572: LD_VAR 0 10
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PUSH
75581: LD_VAR 0 7
75585: IN
75586: NOT
75587: AND
75588: PUSH
75589: LD_VAR 0 9
75593: PPUSH
75594: LD_VAR 0 10
75598: PPUSH
75599: CALL_OW 458
75603: NOT
75604: AND
75605: IFFALSE 75647
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75607: LD_ADDR_VAR 0 7
75611: PUSH
75612: LD_VAR 0 7
75616: PPUSH
75617: LD_VAR 0 7
75621: PUSH
75622: LD_INT 1
75624: PLUS
75625: PPUSH
75626: LD_VAR 0 9
75630: PUSH
75631: LD_VAR 0 10
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PPUSH
75640: CALL_OW 1
75644: ST_TO_ADDR
75645: GO 75661
// i := i - 1 ;
75647: LD_ADDR_VAR 0 5
75651: PUSH
75652: LD_VAR 0 5
75656: PUSH
75657: LD_INT 1
75659: MINUS
75660: ST_TO_ADDR
// end ;
75661: GO 75467
75663: POP
75664: POP
// for i in tmp do
75665: LD_ADDR_VAR 0 5
75669: PUSH
75670: LD_VAR 0 7
75674: PUSH
75675: FOR_IN
75676: IFFALSE 75714
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75678: LD_VAR 0 1
75682: PPUSH
75683: LD_VAR 0 5
75687: PUSH
75688: LD_INT 1
75690: ARRAY
75691: PPUSH
75692: LD_VAR 0 5
75696: PUSH
75697: LD_INT 2
75699: ARRAY
75700: PPUSH
75701: CALL 74656 0 3
75705: NOT
75706: IFFALSE 75712
// exit ;
75708: POP
75709: POP
75710: GO 75716
75712: GO 75675
75714: POP
75715: POP
// end ;
75716: LD_VAR 0 4
75720: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
75721: LD_INT 0
75723: PPUSH
75724: PPUSH
75725: PPUSH
75726: PPUSH
75727: PPUSH
75728: PPUSH
75729: PPUSH
// if not GetClass ( unit ) = class_sniper then
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 257
75739: PUSH
75740: LD_INT 5
75742: EQUAL
75743: NOT
75744: IFFALSE 75748
// exit ;
75746: GO 76136
// dist := 8 ;
75748: LD_ADDR_VAR 0 5
75752: PUSH
75753: LD_INT 8
75755: ST_TO_ADDR
// viewRange := 12 ;
75756: LD_ADDR_VAR 0 7
75760: PUSH
75761: LD_INT 12
75763: ST_TO_ADDR
// side := GetSide ( unit ) ;
75764: LD_ADDR_VAR 0 6
75768: PUSH
75769: LD_VAR 0 1
75773: PPUSH
75774: CALL_OW 255
75778: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75779: LD_INT 61
75781: PPUSH
75782: LD_VAR 0 6
75786: PPUSH
75787: CALL_OW 321
75791: PUSH
75792: LD_INT 2
75794: EQUAL
75795: IFFALSE 75805
// viewRange := 16 ;
75797: LD_ADDR_VAR 0 7
75801: PUSH
75802: LD_INT 16
75804: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75805: LD_VAR 0 1
75809: PPUSH
75810: LD_VAR 0 2
75814: PPUSH
75815: LD_VAR 0 3
75819: PPUSH
75820: CALL_OW 297
75824: PUSH
75825: LD_VAR 0 5
75829: GREATER
75830: IFFALSE 75909
// begin ComMoveXY ( unit , x , y ) ;
75832: LD_VAR 0 1
75836: PPUSH
75837: LD_VAR 0 2
75841: PPUSH
75842: LD_VAR 0 3
75846: PPUSH
75847: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75851: LD_INT 35
75853: PPUSH
75854: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75858: LD_VAR 0 1
75862: PPUSH
75863: LD_VAR 0 2
75867: PPUSH
75868: LD_VAR 0 3
75872: PPUSH
75873: CALL 52247 0 3
75877: NOT
75878: IFFALSE 75882
// exit ;
75880: GO 76136
// until GetDistUnitXY ( unit , x , y ) < dist ;
75882: LD_VAR 0 1
75886: PPUSH
75887: LD_VAR 0 2
75891: PPUSH
75892: LD_VAR 0 3
75896: PPUSH
75897: CALL_OW 297
75901: PUSH
75902: LD_VAR 0 5
75906: LESS
75907: IFFALSE 75851
// end ; ComTurnXY ( unit , x , y ) ;
75909: LD_VAR 0 1
75913: PPUSH
75914: LD_VAR 0 2
75918: PPUSH
75919: LD_VAR 0 3
75923: PPUSH
75924: CALL_OW 118
// wait ( 5 ) ;
75928: LD_INT 5
75930: PPUSH
75931: CALL_OW 67
// _d := GetDir ( unit ) ;
75935: LD_ADDR_VAR 0 10
75939: PUSH
75940: LD_VAR 0 1
75944: PPUSH
75945: CALL_OW 254
75949: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
75950: LD_ADDR_VAR 0 8
75954: PUSH
75955: LD_VAR 0 1
75959: PPUSH
75960: CALL_OW 250
75964: PPUSH
75965: LD_VAR 0 10
75969: PPUSH
75970: LD_VAR 0 5
75974: PPUSH
75975: CALL_OW 272
75979: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
75980: LD_ADDR_VAR 0 9
75984: PUSH
75985: LD_VAR 0 1
75989: PPUSH
75990: CALL_OW 251
75994: PPUSH
75995: LD_VAR 0 10
75999: PPUSH
76000: LD_VAR 0 5
76004: PPUSH
76005: CALL_OW 273
76009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76010: LD_VAR 0 8
76014: PPUSH
76015: LD_VAR 0 9
76019: PPUSH
76020: CALL_OW 488
76024: NOT
76025: IFFALSE 76029
// exit ;
76027: GO 76136
// ComAnimCustom ( unit , 1 ) ;
76029: LD_VAR 0 1
76033: PPUSH
76034: LD_INT 1
76036: PPUSH
76037: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
76041: LD_VAR 0 8
76045: PPUSH
76046: LD_VAR 0 9
76050: PPUSH
76051: LD_VAR 0 6
76055: PPUSH
76056: LD_VAR 0 7
76060: PPUSH
76061: CALL_OW 330
// repeat wait ( 1 ) ;
76065: LD_INT 1
76067: PPUSH
76068: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
76072: LD_VAR 0 1
76076: PPUSH
76077: CALL_OW 316
76081: PUSH
76082: LD_VAR 0 1
76086: PPUSH
76087: CALL_OW 314
76091: OR
76092: PUSH
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 302
76102: NOT
76103: OR
76104: PUSH
76105: LD_VAR 0 1
76109: PPUSH
76110: CALL_OW 301
76114: OR
76115: IFFALSE 76065
// RemoveSeeing ( _x , _y , side ) ;
76117: LD_VAR 0 8
76121: PPUSH
76122: LD_VAR 0 9
76126: PPUSH
76127: LD_VAR 0 6
76131: PPUSH
76132: CALL_OW 331
// end ; end_of_file
76136: LD_VAR 0 4
76140: RET
