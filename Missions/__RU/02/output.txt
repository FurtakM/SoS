// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// CreateNature ;
  28: CALL 16511 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6871 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4030 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4030 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4030 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4030 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4030 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4030 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4030 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5269 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4882 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4030 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4030 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4030 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareTrap ;
2882: CALL 2895 0 0
// PrepareBunkiers ;
2886: CALL 3485 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = nation_american ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// bc_level = 1 ;
3507: LD_ADDR_OWVAR 43
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// bc_type = b_breastwork ;
3515: LD_ADDR_OWVAR 42
3519: PUSH
3520: LD_INT 31
3522: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 104
3530: PPUSH
3531: LD_INT 59
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 47
3541: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3542: LD_ADDR_EXP 82
3546: PUSH
3547: LD_EXP 82
3551: PUSH
3552: LD_VAR 0 4
3556: ADD
3557: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3558: LD_EXP 59
3562: PPUSH
3563: LD_VAR 0 4
3567: PPUSH
3568: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 101
3579: PPUSH
3580: LD_INT 55
3582: PPUSH
3583: LD_INT 4
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3591: LD_ADDR_EXP 82
3595: PUSH
3596: LD_EXP 82
3600: PUSH
3601: LD_VAR 0 4
3605: ADD
3606: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3607: LD_EXP 59
3611: PPUSH
3612: LD_VAR 0 4
3616: PPUSH
3617: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 132
3628: PPUSH
3629: LD_INT 62
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 47
3639: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3640: LD_ADDR_EXP 83
3644: PUSH
3645: LD_EXP 83
3649: PUSH
3650: LD_VAR 0 4
3654: ADD
3655: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3656: LD_EXP 59
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: CALL 5123 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 134
3677: PPUSH
3678: LD_INT 66
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: CALL_OW 47
3688: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3689: LD_ADDR_EXP 83
3693: PUSH
3694: LD_EXP 83
3698: PUSH
3699: LD_VAR 0 4
3703: ADD
3704: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3705: LD_EXP 59
3709: PPUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: CALL 5123 0 2
// bc_type = b_depot ;
3719: LD_ADDR_OWVAR 42
3723: PUSH
3724: LD_INT 0
3726: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3727: LD_ADDR_EXP 84
3731: PUSH
3732: LD_INT 92
3734: PPUSH
3735: LD_INT 51
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3746: LD_ADDR_EXP 85
3750: PUSH
3751: LD_INT 193
3753: ST_TO_ADDR
// amLeftEngs = [ ] ;
3754: LD_ADDR_EXP 86
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 1
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3891
// begin uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 2
3839: PPUSH
3840: LD_EXP 59
3844: PPUSH
3845: CALL_OW 380
// un = CreateHuman ;
3849: LD_ADDR_VAR 0 3
3853: PUSH
3854: CALL_OW 44
3858: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3859: LD_ADDR_EXP 86
3863: PUSH
3864: LD_EXP 86
3868: PUSH
3869: LD_VAR 0 3
3873: ADD
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_EXP 84
3884: PPUSH
3885: CALL_OW 52
// end ;
3889: GO 3799
3891: POP
3892: POP
// if Difficulty = 3 then
3893: LD_OWVAR 67
3897: PUSH
3898: LD_INT 3
3900: EQUAL
3901: IFFALSE 4025
// begin amRightEngs = [ ] ;
3903: LD_ADDR_EXP 87
3907: PUSH
3908: EMPTY
3909: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 12
3930: PUSH
3931: FOR_TO
3932: IFFALSE 4023
// begin uc_nation = 1 ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// uc_side = 1 ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_INT 1
3949: ST_TO_ADDR
// hc_gallery =  ;
3950: LD_ADDR_OWVAR 33
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// hc_name =  ;
3958: LD_ADDR_OWVAR 26
3962: PUSH
3963: LD_STRING 
3965: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3966: LD_INT 0
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_EXP 59
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 3
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3991: LD_ADDR_EXP 87
3995: PUSH
3996: LD_EXP 87
4000: PUSH
4001: LD_VAR 0 3
4005: ADD
4006: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_EXP 85
4016: PPUSH
4017: CALL_OW 52
// end ;
4021: GO 3931
4023: POP
4024: POP
// end ; end ; end_of_file
4025: LD_VAR 0 1
4029: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// if exist_mode then
4034: LD_VAR 0 2
4038: IFFALSE 4063
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_EXP 49
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 34
4060: ST_TO_ADDR
4061: GO 4078
// unit := NewCharacter ( ident ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 25
4077: ST_TO_ADDR
// result := unit ;
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_VAR 0 4
4087: ST_TO_ADDR
// end ;
4088: LD_VAR 0 3
4092: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
4097: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_VAR 0 1
4107: PUSH
4108: LD_EXP 62
4112: PUSH
4113: LD_EXP 63
4117: PUSH
4118: LD_EXP 64
4122: PUSH
4123: LD_EXP 65
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: DIFF
4134: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4135: LD_ADDR_VAR 0 7
4139: PUSH
4140: LD_VAR 0 1
4144: PUSH
4145: LD_INT 1
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 12
4157: ARRAY
4158: ST_TO_ADDR
// if radio then
4159: LD_VAR 0 4
4163: IFFALSE 4212
// begin if GetSex ( speaker ) = sex_male then
4165: LD_VAR 0 7
4169: PPUSH
4170: CALL_OW 258
4174: PUSH
4175: LD_INT 1
4177: EQUAL
4178: IFFALSE 4196
// SayRadio ( speaker , dialogMID ) else
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 94
4194: GO 4210
// SayRadio ( speaker , dialogFID ) ;
4196: LD_VAR 0 7
4200: PPUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: CALL_OW 94
// end else
4210: GO 4257
// begin if GetSex ( speaker ) = sex_male then
4212: LD_VAR 0 7
4216: PPUSH
4217: CALL_OW 258
4221: PUSH
4222: LD_INT 1
4224: EQUAL
4225: IFFALSE 4243
// Say ( speaker , dialogMID ) else
4227: LD_VAR 0 7
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: CALL_OW 88
4241: GO 4257
// Say ( speaker , dialogFID ) ;
4243: LD_VAR 0 7
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 88
// end ; result := speaker ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_VAR 0 7
4266: ST_TO_ADDR
// end ;
4267: LD_VAR 0 5
4271: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4272: LD_INT 0
4274: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 255
4284: PUSH
4285: LD_VAR 0 3
4289: EQUAL
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 302
4300: AND
4301: IFFALSE 4323
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_EXP 48
4312: PUSH
4313: LD_VAR 0 2
4317: STR
4318: PPUSH
4319: CALL_OW 38
// end ;
4323: LD_VAR 0 4
4327: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
// resultCharactersToSave = [ ] ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: EMPTY
4339: ST_TO_ADDR
// for unit in characters do
4340: LD_ADDR_VAR 0 5
4344: PUSH
4345: LD_VAR 0 1
4349: PUSH
4350: FOR_IN
4351: IFFALSE 4399
// if GetSide ( unit ) = side and IsOK ( unit ) then
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 255
4362: PUSH
4363: LD_VAR 0 3
4367: EQUAL
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 302
4378: AND
4379: IFFALSE 4397
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4381: LD_ADDR_VAR 0 6
4385: PUSH
4386: LD_VAR 0 6
4390: PUSH
4391: LD_VAR 0 5
4395: ADD
4396: ST_TO_ADDR
4397: GO 4350
4399: POP
4400: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4401: LD_VAR 0 6
4405: PPUSH
4406: LD_EXP 48
4410: PUSH
4411: LD_VAR 0 2
4415: STR
4416: PPUSH
4417: CALL_OW 38
// end ;
4421: LD_VAR 0 4
4425: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4426: LD_INT 0
4428: PPUSH
4429: PPUSH
4430: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4431: LD_ADDR_VAR 0 3
4435: PUSH
4436: LD_STRING QMoreInfo
4438: PPUSH
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL_OW 98
4448: ST_TO_ADDR
// case dec of 1 :
4449: LD_VAR 0 3
4453: PUSH
4454: LD_INT 1
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4522
4462: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4463: LD_EXP 62
4467: PPUSH
4468: LD_STRING D2a-Bur-1
4470: PPUSH
4471: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4475: LD_EXP 76
4479: PPUSH
4480: LD_STRING D2a-Pla-1
4482: PPUSH
4483: CALL_OW 88
// q1 = q diff 1 ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: DIFF
4500: ST_TO_ADDR
// if q1 >= 2 then
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 2
4508: GREATEREQUAL
4509: IFFALSE 4520
// Question1 ( q1 ) ;
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL 4426 0 1
// end ; 2 :
4520: GO 4659
4522: LD_INT 2
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4590
4530: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4531: LD_EXP 62
4535: PPUSH
4536: LD_STRING D2b-Bur-1
4538: PPUSH
4539: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4543: LD_EXP 76
4547: PPUSH
4548: LD_STRING D2b-Pla-1
4550: PPUSH
4551: CALL_OW 88
// q1 = q diff 2 ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_VAR 0 1
4564: PUSH
4565: LD_INT 2
4567: DIFF
4568: ST_TO_ADDR
// if q1 >= 2 then
4569: LD_VAR 0 4
4573: PUSH
4574: LD_INT 2
4576: GREATEREQUAL
4577: IFFALSE 4588
// Question1 ( q1 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL 4426 0 1
// end ; 3 :
4588: GO 4659
4590: LD_INT 3
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4658
4598: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4599: LD_EXP 62
4603: PPUSH
4604: LD_STRING D2c-Bur-1
4606: PPUSH
4607: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4611: LD_EXP 76
4615: PPUSH
4616: LD_STRING D2c-Pla-1
4618: PPUSH
4619: CALL_OW 88
// q1 = q diff 3 ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 3
4635: DIFF
4636: ST_TO_ADDR
// if q1 >= 2 then
4637: LD_VAR 0 4
4641: PUSH
4642: LD_INT 2
4644: GREATEREQUAL
4645: IFFALSE 4656
// Question1 ( q1 ) ;
4647: LD_VAR 0 4
4651: PPUSH
4652: CALL 4426 0 1
// end ; end ;
4656: GO 4659
4658: POP
// end ;
4659: LD_VAR 0 2
4663: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL_OW 302
4677: NOT
4678: PUSH
4679: LD_VAR 0 2
4683: PPUSH
4684: CALL_OW 302
4688: NOT
4689: OR
4690: PUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 302
4700: NOT
4701: OR
4702: PUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: CALL_OW 261
4712: PUSH
4713: LD_INT 100
4715: EQUAL
4716: OR
4717: PUSH
4718: LD_VAR 0 2
4722: PPUSH
4723: CALL_OW 266
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: IN
4738: NOT
4739: OR
4740: IFFALSE 4744
// exit ;
4742: GO 4877
// AddComTransport ( engineer , depot , mat_oil ) ;
4744: LD_VAR 0 1
4748: PPUSH
4749: LD_VAR 0 2
4753: PPUSH
4754: LD_INT 2
4756: PPUSH
4757: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4761: LD_INT 35
4763: PPUSH
4764: CALL_OW 67
// until Carry ( engineer ) ;
4768: LD_VAR 0 1
4772: PPUSH
4773: CALL_OW 281
4777: IFFALSE 4761
// RemoveTasks ( engineer ) ;
4779: LD_VAR 0 1
4783: PPUSH
4784: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4788: LD_VAR 0 1
4792: PPUSH
4793: LD_STRING O
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: LD_INT 0
4801: PUSH
4802: LD_VAR 0 3
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: EMPTY
4826: LIST
4827: PPUSH
4828: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4832: LD_INT 35
4834: PPUSH
4835: CALL_OW 67
// until not Carry ( engineer ) ;
4839: LD_VAR 0 1
4843: PPUSH
4844: CALL_OW 281
4848: NOT
4849: IFFALSE 4832
// SetFuel ( vehicle , 100 ) ;
4851: LD_VAR 0 3
4855: PPUSH
4856: LD_INT 100
4858: PPUSH
4859: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4863: LD_VAR 0 1
4867: PPUSH
4868: LD_VAR 0 2
4872: PPUSH
4873: CALL_OW 180
// end ;
4877: LD_VAR 0 4
4881: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4882: LD_INT 0
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4889: LD_ADDR_VAR 0 8
4893: PUSH
4894: LD_INT 48
4896: PUSH
4897: LD_INT 49
4899: PUSH
4900: LD_INT 50
4902: PUSH
4903: LD_INT 20
4905: PUSH
4906: LD_INT 1
4908: PUSH
4909: LD_INT 51
4911: PUSH
4912: LD_INT 52
4914: PUSH
4915: LD_INT 69
4917: PUSH
4918: LD_INT 39
4920: PUSH
4921: LD_INT 34
4923: PUSH
4924: LD_INT 40
4926: PUSH
4927: LD_INT 53
4929: PUSH
4930: LD_INT 71
4932: PUSH
4933: LD_INT 57
4935: PUSH
4936: LD_INT 58
4938: PUSH
4939: LD_INT 44
4941: PUSH
4942: LD_INT 32
4944: PUSH
4945: LD_INT 27
4947: PUSH
4948: LD_INT 23
4950: PUSH
4951: LD_INT 33
4953: PUSH
4954: LD_INT 59
4956: PUSH
4957: LD_INT 54
4959: PUSH
4960: LD_INT 55
4962: PUSH
4963: LD_INT 56
4965: PUSH
4966: LD_INT 63
4968: PUSH
4969: LD_INT 64
4971: PUSH
4972: LD_INT 65
4974: PUSH
4975: LD_INT 30
4977: PUSH
4978: LD_INT 31
4980: PUSH
4981: LD_INT 21
4983: PUSH
4984: LD_INT 22
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: LIST
4995: LIST
4996: LIST
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: LIST
5008: LIST
5009: LIST
5010: LIST
5011: LIST
5012: LIST
5013: LIST
5014: LIST
5015: LIST
5016: LIST
5017: LIST
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: LIST
5023: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5024: LD_ADDR_VAR 0 5
5028: PUSH
5029: DOUBLE
5030: LD_INT 1
5032: DEC
5033: ST_TO_ADDR
5034: LD_VAR 0 8
5038: PUSH
5039: FOR_TO
5040: IFFALSE 5116
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5042: LD_VAR 0 8
5046: PUSH
5047: LD_VAR 0 5
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 321
5062: PUSH
5063: LD_INT 1
5065: EQUAL
5066: PUSH
5067: LD_VAR 0 8
5071: PUSH
5072: LD_VAR 0 5
5076: ARRAY
5077: PPUSH
5078: LD_VAR 0 3
5082: PPUSH
5083: CALL_OW 482
5087: PUSH
5088: LD_INT 1
5090: EQUAL
5091: AND
5092: IFFALSE 5114
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5094: LD_VAR 0 2
5098: PPUSH
5099: LD_VAR 0 8
5103: PUSH
5104: LD_VAR 0 5
5108: ARRAY
5109: PPUSH
5110: CALL_OW 184
5114: GO 5039
5116: POP
5117: POP
// end ;
5118: LD_VAR 0 4
5122: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5123: LD_INT 0
5125: PPUSH
5126: PPUSH
5127: PPUSH
// uc_side := GetSide ( b ) ;
5128: LD_ADDR_OWVAR 20
5132: PUSH
5133: LD_VAR 0 2
5137: PPUSH
5138: CALL_OW 255
5142: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5143: LD_ADDR_OWVAR 21
5147: PUSH
5148: LD_VAR 0 2
5152: PPUSH
5153: CALL_OW 248
5157: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5158: LD_INT 0
5160: PPUSH
5161: LD_INT 1
5163: PPUSH
5164: LD_VAR 0 1
5168: PPUSH
5169: CALL_OW 380
// un = CreateHuman ;
5173: LD_ADDR_VAR 0 4
5177: PUSH
5178: CALL_OW 44
5182: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5183: LD_ADDR_VAR 0 5
5187: PUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: CALL_OW 254
5197: PUSH
5198: LD_INT 3
5200: MINUS
5201: ST_TO_ADDR
// if dir < 0 then
5202: LD_VAR 0 5
5206: PUSH
5207: LD_INT 0
5209: LESS
5210: IFFALSE 5226
// dir := 6 + dir ;
5212: LD_ADDR_VAR 0 5
5216: PUSH
5217: LD_INT 6
5219: PUSH
5220: LD_VAR 0 5
5224: PLUS
5225: ST_TO_ADDR
// SetDir ( un , dir ) ;
5226: LD_VAR 0 4
5230: PPUSH
5231: LD_VAR 0 5
5235: PPUSH
5236: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5240: LD_VAR 0 4
5244: PPUSH
5245: LD_VAR 0 2
5249: PPUSH
5250: CALL_OW 52
// result = un ;
5254: LD_ADDR_VAR 0 3
5258: PUSH
5259: LD_VAR 0 4
5263: ST_TO_ADDR
// end ;
5264: LD_VAR 0 3
5268: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5269: LD_INT 0
5271: PPUSH
5272: PPUSH
// dir := GetDir ( b ) - 3 ;
5273: LD_ADDR_VAR 0 4
5277: PUSH
5278: LD_VAR 0 2
5282: PPUSH
5283: CALL_OW 254
5287: PUSH
5288: LD_INT 3
5290: MINUS
5291: ST_TO_ADDR
// if dir < 0 then
5292: LD_VAR 0 4
5296: PUSH
5297: LD_INT 0
5299: LESS
5300: IFFALSE 5316
// dir := 6 + dir ;
5302: LD_ADDR_VAR 0 4
5306: PUSH
5307: LD_INT 6
5309: PUSH
5310: LD_VAR 0 4
5314: PLUS
5315: ST_TO_ADDR
// SetDir ( un , dir ) ;
5316: LD_VAR 0 1
5320: PPUSH
5321: LD_VAR 0 4
5325: PPUSH
5326: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5330: LD_VAR 0 1
5334: PPUSH
5335: LD_VAR 0 2
5339: PPUSH
5340: CALL_OW 52
// result = un ;
5344: LD_ADDR_VAR 0 3
5348: PUSH
5349: LD_VAR 0 1
5353: ST_TO_ADDR
// end ;
5354: LD_VAR 0 3
5358: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5359: LD_INT 0
5361: PPUSH
5362: PPUSH
5363: PPUSH
// tmp = [ ] ;
5364: LD_ADDR_VAR 0 5
5368: PUSH
5369: EMPTY
5370: ST_TO_ADDR
// if not vehicles then
5371: LD_VAR 0 1
5375: NOT
5376: IFFALSE 5380
// exit ;
5378: GO 5497
// for i in vehicles do
5380: LD_ADDR_VAR 0 4
5384: PUSH
5385: LD_VAR 0 1
5389: PUSH
5390: FOR_IN
5391: IFFALSE 5481
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5393: LD_ADDR_VAR 0 5
5397: PUSH
5398: LD_VAR 0 5
5402: PPUSH
5403: LD_INT 1
5405: PPUSH
5406: LD_VAR 0 4
5410: PPUSH
5411: CALL_OW 265
5415: PUSH
5416: LD_VAR 0 4
5420: PPUSH
5421: CALL_OW 262
5425: PUSH
5426: LD_VAR 0 4
5430: PPUSH
5431: CALL_OW 263
5435: PUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 264
5445: PUSH
5446: LD_VAR 0 4
5450: PPUSH
5451: CALL_OW 261
5455: PUSH
5456: LD_VAR 0 4
5460: PPUSH
5461: CALL_OW 256
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: LIST
5470: LIST
5471: LIST
5472: LIST
5473: PPUSH
5474: CALL_OW 2
5478: ST_TO_ADDR
5479: GO 5390
5481: POP
5482: POP
// SaveVariable ( tmp , ident ) ;
5483: LD_VAR 0 5
5487: PPUSH
5488: LD_VAR 0 2
5492: PPUSH
5493: CALL_OW 39
// end ;
5497: LD_VAR 0 3
5501: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5502: LD_INT 0
5504: PPUSH
5505: PPUSH
5506: PPUSH
// buildingsToSave = [ ] ;
5507: LD_ADDR_VAR 0 5
5511: PUSH
5512: EMPTY
5513: ST_TO_ADDR
// if not buildings then
5514: LD_VAR 0 1
5518: NOT
5519: IFFALSE 5523
// exit ;
5521: GO 6098
// for i in buildings do
5523: LD_ADDR_VAR 0 4
5527: PUSH
5528: LD_VAR 0 1
5532: PUSH
5533: FOR_IN
5534: IFFALSE 6082
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5536: LD_VAR 0 4
5540: PPUSH
5541: CALL_OW 266
5545: PUSH
5546: LD_INT 6
5548: PUSH
5549: LD_INT 7
5551: PUSH
5552: LD_INT 8
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: IN
5560: IFFALSE 5685
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5562: LD_ADDR_VAR 0 5
5566: PUSH
5567: LD_VAR 0 5
5571: PUSH
5572: LD_VAR 0 4
5576: PPUSH
5577: CALL_OW 266
5581: PUSH
5582: LD_VAR 0 4
5586: PPUSH
5587: CALL_OW 250
5591: PUSH
5592: LD_VAR 0 4
5596: PPUSH
5597: CALL_OW 251
5601: PUSH
5602: LD_VAR 0 4
5606: PPUSH
5607: CALL_OW 254
5611: PUSH
5612: LD_VAR 0 4
5616: PPUSH
5617: CALL_OW 267
5621: PUSH
5622: LD_VAR 0 4
5626: PPUSH
5627: CALL_OW 248
5631: PUSH
5632: LD_VAR 0 4
5636: PPUSH
5637: CALL_OW 256
5641: PUSH
5642: LD_VAR 0 4
5646: PPUSH
5647: LD_INT 1
5649: PPUSH
5650: CALL_OW 268
5654: PUSH
5655: LD_VAR 0 4
5659: PPUSH
5660: LD_INT 2
5662: PPUSH
5663: CALL_OW 268
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: LIST
5672: LIST
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: PUSH
5679: EMPTY
5680: LIST
5681: ADD
5682: ST_TO_ADDR
5683: GO 6080
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5685: LD_VAR 0 4
5689: PPUSH
5690: CALL_OW 266
5694: PUSH
5695: LD_INT 32
5697: PUSH
5698: LD_INT 33
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: IN
5705: IFFALSE 5813
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5707: LD_ADDR_VAR 0 5
5711: PUSH
5712: LD_VAR 0 5
5716: PUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: CALL_OW 266
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: CALL_OW 250
5736: PUSH
5737: LD_VAR 0 4
5741: PPUSH
5742: CALL_OW 251
5746: PUSH
5747: LD_VAR 0 4
5751: PPUSH
5752: CALL_OW 254
5756: PUSH
5757: LD_VAR 0 4
5761: PPUSH
5762: CALL_OW 267
5766: PUSH
5767: LD_VAR 0 4
5771: PPUSH
5772: CALL_OW 248
5776: PUSH
5777: LD_VAR 0 4
5781: PPUSH
5782: CALL_OW 256
5786: PUSH
5787: LD_VAR 0 4
5791: PPUSH
5792: CALL_OW 269
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: LIST
5803: LIST
5804: LIST
5805: LIST
5806: PUSH
5807: EMPTY
5808: LIST
5809: ADD
5810: ST_TO_ADDR
5811: GO 6080
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 266
5822: PUSH
5823: LD_INT 0
5825: PUSH
5826: LD_INT 1
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: IN
5833: IFFALSE 5987
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5835: LD_ADDR_VAR 0 5
5839: PUSH
5840: LD_VAR 0 5
5844: PUSH
5845: LD_VAR 0 4
5849: PPUSH
5850: CALL_OW 266
5854: PUSH
5855: LD_VAR 0 4
5859: PPUSH
5860: CALL_OW 250
5864: PUSH
5865: LD_VAR 0 4
5869: PPUSH
5870: CALL_OW 251
5874: PUSH
5875: LD_VAR 0 4
5879: PPUSH
5880: CALL_OW 254
5884: PUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 267
5894: PUSH
5895: LD_VAR 0 4
5899: PPUSH
5900: CALL_OW 248
5904: PUSH
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 256
5914: PUSH
5915: LD_VAR 0 4
5919: PPUSH
5920: CALL_OW 274
5924: PPUSH
5925: LD_INT 1
5927: PPUSH
5928: CALL_OW 275
5932: PUSH
5933: LD_VAR 0 4
5937: PPUSH
5938: CALL_OW 274
5942: PPUSH
5943: LD_INT 2
5945: PPUSH
5946: CALL_OW 275
5950: PUSH
5951: LD_VAR 0 4
5955: PPUSH
5956: CALL_OW 274
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL_OW 275
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: EMPTY
5982: LIST
5983: ADD
5984: ST_TO_ADDR
5985: GO 6080
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5987: LD_ADDR_VAR 0 5
5991: PUSH
5992: LD_VAR 0 5
5996: PUSH
5997: LD_VAR 0 4
6001: PPUSH
6002: CALL_OW 266
6006: PUSH
6007: LD_VAR 0 4
6011: PPUSH
6012: CALL_OW 250
6016: PUSH
6017: LD_VAR 0 4
6021: PPUSH
6022: CALL_OW 251
6026: PUSH
6027: LD_VAR 0 4
6031: PPUSH
6032: CALL_OW 254
6036: PUSH
6037: LD_VAR 0 4
6041: PPUSH
6042: CALL_OW 267
6046: PUSH
6047: LD_VAR 0 4
6051: PPUSH
6052: CALL_OW 248
6056: PUSH
6057: LD_VAR 0 4
6061: PPUSH
6062: CALL_OW 256
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: PUSH
6076: EMPTY
6077: LIST
6078: ADD
6079: ST_TO_ADDR
// end ;
6080: GO 5533
6082: POP
6083: POP
// SaveVariable ( buildingsToSave , ident ) ;
6084: LD_VAR 0 5
6088: PPUSH
6089: LD_VAR 0 2
6093: PPUSH
6094: CALL_OW 39
// end ;
6098: LD_VAR 0 3
6102: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6103: LD_INT 0
6105: PPUSH
6106: PPUSH
6107: PPUSH
6108: PPUSH
6109: PPUSH
// belkovTeam = [ ] ;
6110: LD_ADDR_EXP 73
6114: PUSH
6115: EMPTY
6116: ST_TO_ADDR
// if belkovReturn then
6117: LD_EXP 6
6121: IFFALSE 6139
// belkovTeam = belkovTeam ^ Belkov ;
6123: LD_ADDR_EXP 73
6127: PUSH
6128: LD_EXP 73
6132: PUSH
6133: LD_EXP 64
6137: ADD
6138: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6139: LD_ADDR_EXP 73
6143: PUSH
6144: LD_EXP 73
6148: PUSH
6149: LD_EXP 68
6153: ADD
6154: ST_TO_ADDR
// for unit in other_survivors do
6155: LD_ADDR_VAR 0 3
6159: PUSH
6160: LD_EXP 66
6164: PUSH
6165: FOR_IN
6166: IFFALSE 6207
// if IsOK ( unit ) and belkovTeam < 5 then
6168: LD_VAR 0 3
6172: PPUSH
6173: CALL_OW 302
6177: PUSH
6178: LD_EXP 73
6182: PUSH
6183: LD_INT 5
6185: LESS
6186: AND
6187: IFFALSE 6205
// belkovTeam = belkovTeam ^ unit ;
6189: LD_ADDR_EXP 73
6193: PUSH
6194: LD_EXP 73
6198: PUSH
6199: LD_VAR 0 3
6203: ADD
6204: ST_TO_ADDR
6205: GO 6165
6207: POP
6208: POP
// if belkovTeam < 5 then
6209: LD_EXP 73
6213: PUSH
6214: LD_INT 5
6216: LESS
6217: IFFALSE 6343
// begin restRandSolds = 5 - belkovTeam ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 5
6226: PUSH
6227: LD_EXP 73
6231: MINUS
6232: ST_TO_ADDR
// for i := 1 to restRandSolds do
6233: LD_ADDR_VAR 0 2
6237: PUSH
6238: DOUBLE
6239: LD_INT 1
6241: DEC
6242: ST_TO_ADDR
6243: LD_VAR 0 4
6247: PUSH
6248: FOR_TO
6249: IFFALSE 6341
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6251: LD_ADDR_VAR 0 3
6255: PUSH
6256: LD_EXP 69
6260: PPUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: EMPTY
6272: LIST
6273: PPUSH
6274: CALL_OW 72
6278: PUSH
6279: LD_EXP 67
6283: DIFF
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6337
// if not unit in belkovTeam then
6288: LD_VAR 0 3
6292: PUSH
6293: LD_EXP 73
6297: IN
6298: NOT
6299: IFFALSE 6335
// begin belkovTeam = belkovTeam ^ unit ;
6301: LD_ADDR_EXP 73
6305: PUSH
6306: LD_EXP 73
6310: PUSH
6311: LD_VAR 0 3
6315: ADD
6316: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6317: LD_ADDR_EXP 69
6321: PUSH
6322: LD_EXP 69
6326: PUSH
6327: LD_VAR 0 3
6331: DIFF
6332: ST_TO_ADDR
// break ;
6333: GO 6337
// end ;
6335: GO 6285
6337: POP
6338: POP
6339: GO 6248
6341: POP
6342: POP
// end ; tmp = belkovTeam diff Belkov ;
6343: LD_ADDR_VAR 0 5
6347: PUSH
6348: LD_EXP 73
6352: PUSH
6353: LD_EXP 64
6357: DIFF
6358: ST_TO_ADDR
// if tmp < 4 then
6359: LD_VAR 0 5
6363: PUSH
6364: LD_INT 4
6366: LESS
6367: IFFALSE 6451
// begin for i := 1 to 4 - tmp do
6369: LD_ADDR_VAR 0 2
6373: PUSH
6374: DOUBLE
6375: LD_INT 1
6377: DEC
6378: ST_TO_ADDR
6379: LD_INT 4
6381: PUSH
6382: LD_VAR 0 5
6386: MINUS
6387: PUSH
6388: FOR_TO
6389: IFFALSE 6449
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6391: LD_INT 0
6393: PPUSH
6394: LD_INT 1
6396: PPUSH
6397: LD_INT 2
6399: PPUSH
6400: CALL_OW 12
6404: PPUSH
6405: CALL_OW 381
// unit = CreateHuman ;
6409: LD_ADDR_VAR 0 3
6413: PUSH
6414: CALL_OW 44
6418: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6419: LD_ADDR_EXP 73
6423: PUSH
6424: LD_EXP 73
6428: PUSH
6429: LD_VAR 0 3
6433: ADD
6434: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6435: LD_VAR 0 3
6439: PPUSH
6440: LD_INT 209
6442: PPUSH
6443: CALL_OW 52
// end ;
6447: GO 6388
6449: POP
6450: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6451: LD_STRING 01_Kirilenkova
6453: PPUSH
6454: CALL_OW 28
6458: IFFALSE 6478
// belkovTeam = belkovTeam ^ Kirilenkova else
6460: LD_ADDR_EXP 73
6464: PUSH
6465: LD_EXP 73
6469: PUSH
6470: LD_EXP 65
6474: ADD
6475: ST_TO_ADDR
6476: GO 6554
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6478: LD_ADDR_EXP 73
6482: PUSH
6483: LD_EXP 73
6487: PUSH
6488: LD_EXP 69
6492: PPUSH
6493: LD_INT 25
6495: PUSH
6496: LD_INT 4
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: PPUSH
6506: CALL_OW 72
6510: PUSH
6511: LD_INT 1
6513: ARRAY
6514: ADD
6515: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6516: LD_ADDR_EXP 69
6520: PUSH
6521: LD_EXP 69
6525: PUSH
6526: LD_EXP 69
6530: PPUSH
6531: LD_INT 25
6533: PUSH
6534: LD_INT 4
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: EMPTY
6542: LIST
6543: PPUSH
6544: CALL_OW 72
6548: PUSH
6549: LD_INT 1
6551: ARRAY
6552: DIFF
6553: ST_TO_ADDR
// end ; end ;
6554: LD_VAR 0 1
6558: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6559: LD_INT 0
6561: PPUSH
6562: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6563: LD_EXP 78
6567: NOT
6568: PUSH
6569: LD_EXP 78
6573: PPUSH
6574: CALL_OW 302
6578: NOT
6579: OR
6580: IFFALSE 6683
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: LD_EXP 77
6591: PPUSH
6592: LD_INT 50
6594: PUSH
6595: EMPTY
6596: LIST
6597: PPUSH
6598: CALL_OW 72
6602: PUSH
6603: LD_EXP 79
6607: DIFF
6608: ST_TO_ADDR
// if soldsOK then
6609: LD_VAR 0 2
6613: IFFALSE 6683
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6615: LD_VAR 0 2
6619: PUSH
6620: LD_INT 1
6622: ARRAY
6623: PPUSH
6624: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6628: LD_VAR 0 2
6632: PUSH
6633: LD_INT 1
6635: ARRAY
6636: PPUSH
6637: LD_INT 112
6639: PPUSH
6640: LD_INT 96
6642: PPUSH
6643: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6647: LD_VAR 0 2
6651: PUSH
6652: LD_INT 1
6654: ARRAY
6655: PPUSH
6656: LD_INT 3
6658: PPUSH
6659: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6663: LD_ADDR_EXP 77
6667: PUSH
6668: LD_EXP 77
6672: PUSH
6673: LD_VAR 0 2
6677: PUSH
6678: LD_INT 1
6680: ARRAY
6681: DIFF
6682: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6683: LD_EXP 79
6687: NOT
6688: PUSH
6689: LD_EXP 79
6693: PPUSH
6694: CALL_OW 302
6698: NOT
6699: OR
6700: IFFALSE 6803
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6702: LD_ADDR_VAR 0 2
6706: PUSH
6707: LD_EXP 77
6711: PPUSH
6712: LD_INT 50
6714: PUSH
6715: EMPTY
6716: LIST
6717: PPUSH
6718: CALL_OW 72
6722: PUSH
6723: LD_EXP 78
6727: DIFF
6728: ST_TO_ADDR
// if soldsOK then
6729: LD_VAR 0 2
6733: IFFALSE 6803
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6735: LD_VAR 0 2
6739: PUSH
6740: LD_INT 1
6742: ARRAY
6743: PPUSH
6744: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6748: LD_VAR 0 2
6752: PUSH
6753: LD_INT 1
6755: ARRAY
6756: PPUSH
6757: LD_INT 112
6759: PPUSH
6760: LD_INT 96
6762: PPUSH
6763: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6767: LD_VAR 0 2
6771: PUSH
6772: LD_INT 1
6774: ARRAY
6775: PPUSH
6776: LD_INT 3
6778: PPUSH
6779: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6783: LD_ADDR_EXP 77
6787: PUSH
6788: LD_EXP 77
6792: PUSH
6793: LD_VAR 0 2
6797: PUSH
6798: LD_INT 1
6800: ARRAY
6801: DIFF
6802: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6803: LD_EXP 78
6807: PUSH
6808: LD_EXP 79
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6821: LD_EXP 78
6825: PUSH
6826: LD_EXP 79
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: LD_INT 112
6837: PPUSH
6838: LD_INT 96
6840: PPUSH
6841: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6845: LD_EXP 78
6849: PUSH
6850: LD_EXP 79
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PPUSH
6859: LD_INT 3
6861: PPUSH
6862: CALL_OW 235
// end ; end_of_file
6866: LD_VAR 0 1
6870: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6871: LD_INT 0
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6877: LD_EXP 62
6881: PPUSH
6882: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6886: LD_EXP 62
6890: PPUSH
6891: LD_INT 163
6893: PPUSH
6894: LD_INT 108
6896: PPUSH
6897: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6901: LD_EXP 62
6905: PPUSH
6906: LD_EXP 67
6910: PPUSH
6911: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6915: LD_ADDR_VAR 0 2
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 3
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: PUSH
6949: LD_EXP 62
6953: DIFF
6954: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6955: LD_ADDR_VAR 0 4
6959: PUSH
6960: DOUBLE
6961: LD_INT 1
6963: DEC
6964: ST_TO_ADDR
6965: LD_EXP 52
6969: PUSH
6970: FOR_TO
6971: IFFALSE 7089
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6973: LD_ADDR_VAR 0 3
6977: PUSH
6978: LD_VAR 0 2
6982: PPUSH
6983: LD_EXP 52
6987: PUSH
6988: LD_VAR 0 4
6992: ARRAY
6993: PUSH
6994: LD_INT 1
6996: ARRAY
6997: PPUSH
6998: LD_EXP 52
7002: PUSH
7003: LD_VAR 0 4
7007: ARRAY
7008: PUSH
7009: LD_INT 2
7011: ARRAY
7012: PPUSH
7013: CALL_OW 73
7017: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7018: LD_VAR 0 3
7022: PPUSH
7023: LD_EXP 52
7027: PUSH
7028: LD_VAR 0 4
7032: ARRAY
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_EXP 52
7042: PUSH
7043: LD_VAR 0 4
7047: ARRAY
7048: PUSH
7049: LD_INT 2
7051: ARRAY
7052: PPUSH
7053: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7057: LD_VAR 0 3
7061: PPUSH
7062: LD_EXP 67
7066: PPUSH
7067: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7071: LD_ADDR_VAR 0 2
7075: PUSH
7076: LD_VAR 0 2
7080: PUSH
7081: LD_VAR 0 3
7085: DIFF
7086: ST_TO_ADDR
// end ;
7087: GO 6970
7089: POP
7090: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7091: LD_EXP 62
7095: PPUSH
7096: CALL_OW 87
// wait ( 0 0$1 ) ;
7100: LD_INT 35
7102: PPUSH
7103: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7107: LD_EXP 62
7111: PPUSH
7112: LD_EXP 67
7116: PPUSH
7117: CALL_OW 296
7121: PUSH
7122: LD_INT 4
7124: LESS
7125: IFFALSE 7091
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7127: LD_EXP 62
7131: PUSH
7132: LD_EXP 67
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PPUSH
7141: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7145: LD_EXP 67
7149: PPUSH
7150: LD_EXP 62
7154: PPUSH
7155: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7159: LD_EXP 67
7163: PPUSH
7164: LD_STRING D1-Kur-1
7166: PPUSH
7167: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7171: LD_EXP 62
7175: PPUSH
7176: LD_STRING D1-Bur-1
7178: PPUSH
7179: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7183: LD_EXP 67
7187: PPUSH
7188: LD_STRING D1-Kur-2
7190: PPUSH
7191: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7195: LD_EXP 62
7199: PPUSH
7200: LD_STRING D1-Bur-2
7202: PPUSH
7203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7207: LD_EXP 67
7211: PPUSH
7212: LD_STRING D1-Kur-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Gnyevko ) then
7219: LD_EXP 63
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7242
// Say ( Kurin , D1-Kur-3a ) ;
7230: LD_EXP 67
7234: PPUSH
7235: LD_STRING D1-Kur-3a
7237: PPUSH
7238: CALL_OW 88
// InGameOff ;
7242: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7246: LD_INT 22
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 21
7258: PUSH
7259: LD_INT 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PUSH
7275: LD_EXP 62
7279: PUSH
7280: LD_EXP 63
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: DIFF
7289: PPUSH
7290: LD_INT 6
7292: PPUSH
7293: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7297: LD_EXP 70
7301: PPUSH
7302: LD_INT 3
7304: PPUSH
7305: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7309: LD_INT 9
7311: PPUSH
7312: LD_INT 22
7314: PUSH
7315: LD_INT 6
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 21
7324: PUSH
7325: LD_INT 1
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PPUSH
7336: CALL_OW 70
7340: PUSH
7341: LD_EXP 67
7345: DIFF
7346: PPUSH
7347: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7351: LD_EXP 66
7355: PPUSH
7356: LD_INT 95
7358: PPUSH
7359: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7363: LD_EXP 64
7367: PPUSH
7368: LD_INT 95
7370: PPUSH
7371: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7375: LD_EXP 65
7379: PPUSH
7380: CALL_OW 305
7384: IFFALSE 7398
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7386: LD_EXP 65
7390: PPUSH
7391: LD_INT 83
7393: PPUSH
7394: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7398: LD_STRING 01_Gnyevko
7400: PPUSH
7401: CALL_OW 28
7405: NOT
7406: IFFALSE 7420
// SetSide ( randomMech , 3 ) ;
7408: LD_EXP 71
7412: PPUSH
7413: LD_INT 3
7415: PPUSH
7416: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7420: LD_STRING M1
7422: PPUSH
7423: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7427: LD_INT 3
7429: PPUSH
7430: LD_INT 6
7432: PPUSH
7433: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7437: LD_INT 3
7439: PPUSH
7440: LD_INT 7
7442: PPUSH
7443: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7447: LD_INT 6
7449: PPUSH
7450: LD_INT 6
7452: PPUSH
7453: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7457: LD_INT 6
7459: PPUSH
7460: LD_INT 7
7462: PPUSH
7463: CALL_OW 334
// SaveForQuickRestart ;
7467: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7471: LD_EXP 66
7475: PPUSH
7476: LD_INT 95
7478: PPUSH
7479: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7483: LD_EXP 64
7487: PPUSH
7488: LD_INT 95
7490: PPUSH
7491: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7495: LD_EXP 65
7499: PPUSH
7500: CALL_OW 305
7504: IFFALSE 7518
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7506: LD_EXP 65
7510: PPUSH
7511: LD_INT 83
7513: PPUSH
7514: CALL_OW 120
// end ;
7518: LD_VAR 0 1
7522: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7523: LD_EXP 20
7527: NOT
7528: PUSH
7529: LD_INT 20
7531: PPUSH
7532: LD_INT 22
7534: PUSH
7535: LD_INT 3
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 2
7544: PUSH
7545: LD_INT 21
7547: PUSH
7548: LD_INT 1
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 21
7557: PUSH
7558: LD_INT 2
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PPUSH
7574: CALL_OW 70
7578: PUSH
7579: LD_INT 0
7581: GREATER
7582: AND
7583: IFFALSE 7957
7585: GO 7587
7587: DISABLE
7588: LD_INT 0
7590: PPUSH
// begin enable ;
7591: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7592: LD_ADDR_VAR 0 1
7596: PUSH
7597: LD_INT 20
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 2
7612: PUSH
7613: LD_INT 21
7615: PUSH
7616: LD_INT 1
7618: PUSH
7619: EMPTY
7620: LIST
7621: LIST
7622: PUSH
7623: LD_INT 21
7625: PUSH
7626: LD_INT 2
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PPUSH
7642: CALL_OW 70
7646: PUSH
7647: FOR_IN
7648: IFFALSE 7934
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7650: LD_VAR 0 1
7654: PPUSH
7655: LD_VAR 0 1
7659: PPUSH
7660: CALL_OW 250
7664: PPUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 251
7674: PUSH
7675: LD_INT 5
7677: PLUS
7678: PPUSH
7679: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7683: LD_EXP 7
7687: NOT
7688: PUSH
7689: LD_EXP 33
7693: NOT
7694: AND
7695: IFFALSE 7758
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7697: LD_VAR 0 1
7701: PUSH
7702: LD_EXP 62
7706: NONEQUAL
7707: PUSH
7708: LD_EXP 70
7712: PPUSH
7713: CALL_OW 302
7717: AND
7718: IFFALSE 7732
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7720: LD_EXP 70
7724: PPUSH
7725: LD_STRING D1b-Kov-1
7727: PPUSH
7728: CALL_OW 88
// if unit = Burlak then
7732: LD_VAR 0 1
7736: PUSH
7737: LD_EXP 62
7741: EQUAL
7742: IFFALSE 7756
// Say ( Burlak , D1b-Bur-1 ) ;
7744: LD_EXP 62
7748: PPUSH
7749: LD_STRING D1b-Bur-1
7751: PPUSH
7752: CALL_OW 88
// end else
7756: GO 7777
// if not dialogLoopBlocker then
7758: LD_EXP 33
7762: NOT
7763: IFFALSE 7777
// Say ( Platonov , D8-Pla-1 ) ;
7765: LD_EXP 76
7769: PPUSH
7770: LD_STRING D8-Pla-1
7772: PPUSH
7773: CALL_OW 88
// if not dialogLoopBlocker then
7777: LD_EXP 33
7781: NOT
7782: IFFALSE 7792
// dialogLoopBlocker = true ;
7784: LD_ADDR_EXP 33
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7792: LD_INT 20
7794: PPUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 3
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 2
7807: PUSH
7808: LD_INT 21
7810: PUSH
7811: LD_INT 1
7813: PUSH
7814: EMPTY
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 21
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PPUSH
7837: CALL_OW 70
7841: PPUSH
7842: LD_VAR 0 1
7846: PPUSH
7847: CALL_OW 250
7851: PPUSH
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 251
7861: PUSH
7862: LD_INT 5
7864: PLUS
7865: PPUSH
7866: CALL_OW 111
// wait ( 0 0$1 ) ;
7870: LD_INT 35
7872: PPUSH
7873: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7877: LD_INT 20
7879: PPUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 70
7926: PUSH
7927: LD_INT 0
7929: EQUAL
7930: IFFALSE 7792
// end ;
7932: GO 7647
7934: POP
7935: POP
// if dialogLoopBlocker then
7936: LD_EXP 33
7940: IFFALSE 7957
// begin wait ( 0 0$5 ) ;
7942: LD_INT 175
7944: PPUSH
7945: CALL_OW 67
// dialogLoopBlocker = false ;
7949: LD_ADDR_EXP 33
7953: PUSH
7954: LD_INT 0
7956: ST_TO_ADDR
// end ; end ;
7957: PPOPN 1
7959: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7960: LD_EXP 19
7964: NOT
7965: PUSH
7966: LD_INT 8
7968: PPUSH
7969: LD_INT 22
7971: PUSH
7972: LD_INT 3
7974: PUSH
7975: EMPTY
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 2
7981: PUSH
7982: LD_INT 21
7984: PUSH
7985: LD_INT 1
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: LD_INT 21
7994: PUSH
7995: LD_INT 2
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: LIST
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PPUSH
8011: CALL_OW 71
8015: PUSH
8016: LD_INT 0
8018: GREATER
8019: AND
8020: IFFALSE 8155
8022: GO 8024
8024: DISABLE
8025: LD_INT 0
8027: PPUSH
// begin enable ;
8028: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8029: LD_ADDR_VAR 0 1
8033: PUSH
8034: LD_INT 8
8036: PPUSH
8037: LD_INT 22
8039: PUSH
8040: LD_INT 3
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: LD_INT 21
8052: PUSH
8053: LD_INT 1
8055: PUSH
8056: EMPTY
8057: LIST
8058: LIST
8059: PUSH
8060: LD_INT 21
8062: PUSH
8063: LD_INT 2
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PPUSH
8079: CALL_OW 71
8083: PUSH
8084: FOR_IN
8085: IFFALSE 8138
// begin ComMoveXY ( unit , 114 , 98 ) ;
8087: LD_VAR 0 1
8091: PPUSH
8092: LD_INT 114
8094: PPUSH
8095: LD_INT 98
8097: PPUSH
8098: CALL_OW 111
// if dialogLoopBlocker then
8102: LD_EXP 33
8106: IFFALSE 8112
// exit ;
8108: POP
8109: POP
8110: GO 8155
// dialogLoopBlocker = true ;
8112: LD_ADDR_EXP 33
8116: PUSH
8117: LD_INT 1
8119: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8120: LD_EXP 76
8124: PPUSH
8125: LD_STRING D8-Pla-1
8127: PPUSH
8128: CALL_OW 88
// exit ;
8132: POP
8133: POP
8134: GO 8155
// end ;
8136: GO 8084
8138: POP
8139: POP
// wait ( 0 0$5 ) ;
8140: LD_INT 175
8142: PPUSH
8143: CALL_OW 67
// dialogLoopBlocker = false ;
8147: LD_ADDR_EXP 33
8151: PUSH
8152: LD_INT 0
8154: ST_TO_ADDR
// end ;
8155: PPOPN 1
8157: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8158: LD_EXP 7
8162: NOT
8163: PUSH
8164: LD_INT 9
8166: PPUSH
8167: LD_INT 22
8169: PUSH
8170: LD_INT 3
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 21
8179: PUSH
8180: LD_INT 1
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: EMPTY
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 70
8195: PUSH
8196: LD_INT 0
8198: GREATER
8199: AND
8200: IFFALSE 8217
8202: GO 8204
8204: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8205: LD_EXP 67
8209: PPUSH
8210: LD_STRING D1a-Kur-1
8212: PPUSH
8213: CALL_OW 88
8217: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8218: LD_EXP 7
8222: NOT
8223: PUSH
8224: LD_EXP 62
8228: PPUSH
8229: CALL_OW 302
8233: AND
8234: PUSH
8235: LD_INT 29
8237: PPUSH
8238: LD_INT 22
8240: PUSH
8241: LD_INT 3
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 21
8250: PUSH
8251: LD_INT 1
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PPUSH
8262: CALL_OW 70
8266: PUSH
8267: LD_INT 0
8269: GREATER
8270: AND
8271: IFFALSE 8898
8273: GO 8275
8275: DISABLE
8276: LD_INT 0
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin enable ;
8283: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8284: LD_ADDR_VAR 0 2
8288: PUSH
8289: LD_INT 22
8291: PUSH
8292: LD_INT 3
8294: PUSH
8295: EMPTY
8296: LIST
8297: LIST
8298: PUSH
8299: LD_INT 21
8301: PUSH
8302: LD_INT 1
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: PPUSH
8313: CALL_OW 69
8317: PUSH
8318: FOR_IN
8319: IFFALSE 8896
// if See ( 6 , unit ) then
8321: LD_INT 6
8323: PPUSH
8324: LD_VAR 0 2
8328: PPUSH
8329: CALL_OW 292
8333: IFFALSE 8894
// begin meetPlatonov = true ;
8335: LD_ADDR_EXP 7
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// InGameOn ;
8343: CALL_OW 8
// DialogueOn ;
8347: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8351: LD_ADDR_VAR 0 4
8355: PUSH
8356: LD_EXP 77
8360: PPUSH
8361: LD_INT 26
8363: PUSH
8364: LD_INT 1
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PPUSH
8371: CALL_OW 72
8375: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8376: LD_ADDR_VAR 0 4
8380: PUSH
8381: LD_VAR 0 4
8385: PUSH
8386: LD_INT 8
8388: PPUSH
8389: LD_INT 22
8391: PUSH
8392: LD_INT 6
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 21
8401: PUSH
8402: LD_INT 3
8404: PUSH
8405: EMPTY
8406: LIST
8407: LIST
8408: PUSH
8409: LD_INT 30
8411: PUSH
8412: LD_INT 31
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 3
8421: PUSH
8422: LD_INT 58
8424: PUSH
8425: EMPTY
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: LIST
8436: LIST
8437: PPUSH
8438: CALL_OW 70
8442: ADD
8443: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8444: LD_ADDR_VAR 0 5
8448: PUSH
8449: LD_VAR 0 4
8453: PPUSH
8454: LD_VAR 0 2
8458: PPUSH
8459: CALL_OW 74
8463: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8464: LD_VAR 0 5
8468: PPUSH
8469: CALL_OW 247
8473: PUSH
8474: LD_INT 3
8476: EQUAL
8477: IFFALSE 8498
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8479: LD_ADDR_VAR 0 5
8483: PUSH
8484: LD_VAR 0 5
8488: PPUSH
8489: CALL_OW 313
8493: PUSH
8494: LD_INT 1
8496: ARRAY
8497: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8498: LD_VAR 0 5
8502: PPUSH
8503: LD_STRING D2-RSol1-1
8505: PPUSH
8506: LD_STRING 
8508: PPUSH
8509: LD_INT 0
8511: PPUSH
8512: CALL 4093 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8516: LD_EXP 62
8520: PPUSH
8521: LD_STRING D2-Bur-1
8523: PPUSH
8524: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8528: LD_VAR 0 5
8532: PPUSH
8533: LD_STRING D2-RSol1-2
8535: PPUSH
8536: CALL_OW 88
// DialogueOff ;
8540: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8544: LD_ADDR_VAR 0 3
8548: PUSH
8549: LD_INT 22
8551: PUSH
8552: LD_INT 3
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 21
8561: PUSH
8562: LD_INT 1
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 50
8571: PUSH
8572: EMPTY
8573: LIST
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: LIST
8579: PPUSH
8580: CALL_OW 69
8584: ST_TO_ADDR
// for i := 1 to yourUnits do
8585: LD_ADDR_VAR 0 1
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_VAR 0 3
8599: PUSH
8600: FOR_TO
8601: IFFALSE 8670
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8603: LD_VAR 0 3
8607: PUSH
8608: LD_VAR 0 1
8612: ARRAY
8613: PPUSH
8614: LD_EXP 53
8618: PUSH
8619: LD_VAR 0 1
8623: ARRAY
8624: PUSH
8625: LD_INT 1
8627: ARRAY
8628: PPUSH
8629: LD_EXP 53
8633: PUSH
8634: LD_VAR 0 1
8638: ARRAY
8639: PUSH
8640: LD_INT 2
8642: ARRAY
8643: PPUSH
8644: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8648: LD_VAR 0 3
8652: PUSH
8653: LD_VAR 0 1
8657: ARRAY
8658: PPUSH
8659: LD_EXP 76
8663: PPUSH
8664: CALL_OW 179
// end ;
8668: GO 8600
8670: POP
8671: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8672: LD_EXP 62
8676: PPUSH
8677: CALL_OW 87
// wait ( 0 0$1 ) ;
8681: LD_INT 35
8683: PPUSH
8684: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8688: LD_EXP 62
8692: PPUSH
8693: LD_EXP 76
8697: PPUSH
8698: CALL_OW 296
8702: PUSH
8703: LD_INT 4
8705: LESS
8706: IFFALSE 8672
// ComTurnUnit ( Platonov , Burlak ) ;
8708: LD_EXP 76
8712: PPUSH
8713: LD_EXP 62
8717: PPUSH
8718: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8722: LD_EXP 76
8726: PPUSH
8727: LD_STRING D2-Pla-2
8729: PPUSH
8730: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8734: LD_EXP 62
8738: PPUSH
8739: LD_STRING D2-Bur-2
8741: PPUSH
8742: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8746: LD_EXP 76
8750: PPUSH
8751: LD_STRING D2-Pla-3
8753: PPUSH
8754: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8758: LD_EXP 62
8762: PPUSH
8763: LD_STRING D2-Bur-3
8765: PPUSH
8766: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8770: LD_EXP 76
8774: PPUSH
8775: LD_STRING D2-Pla-4
8777: PPUSH
8778: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8782: LD_EXP 62
8786: PPUSH
8787: LD_STRING D2-Bur-4
8789: PPUSH
8790: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8794: LD_EXP 76
8798: PPUSH
8799: LD_STRING D2-Pla-5
8801: PPUSH
8802: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8806: LD_INT 1
8808: PUSH
8809: LD_INT 2
8811: PUSH
8812: LD_INT 3
8814: PUSH
8815: LD_INT 4
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PPUSH
8824: CALL 4426 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8828: LD_EXP 76
8832: PPUSH
8833: LD_STRING D3-Pla-1
8835: PPUSH
8836: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8840: LD_EXP 62
8844: PPUSH
8845: LD_STRING D3-Bur-1
8847: PPUSH
8848: CALL_OW 88
// InGameOff ;
8852: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8856: LD_STRING M2a
8858: PPUSH
8859: CALL_OW 337
// ComFree ( Platonov ) ;
8863: LD_EXP 76
8867: PPUSH
8868: CALL_OW 139
// SetSide ( beria , 3 ) ;
8872: LD_INT 106
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 235
// canExitBase = false ;
8882: LD_ADDR_EXP 19
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// exit ;
8890: POP
8891: POP
8892: GO 8898
// end ;
8894: GO 8318
8896: POP
8897: POP
// end ;
8898: PPOPN 5
8900: END
// export function Dial_LabConstructed ; begin
8901: LD_INT 0
8903: PPUSH
// labConstructed = true ;
8904: LD_ADDR_EXP 8
8908: PUSH
8909: LD_INT 1
8911: ST_TO_ADDR
// DialogueOn ;
8912: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8916: LD_EXP 62
8920: PPUSH
8921: LD_STRING D5a-Bur-1
8923: PPUSH
8924: CALL_OW 88
// if workshopConstructed then
8928: LD_EXP 9
8932: IFFALSE 8948
// Say ( Platonov , D5a-Pla-1 ) else
8934: LD_EXP 76
8938: PPUSH
8939: LD_STRING D5a-Pla-1
8941: PPUSH
8942: CALL_OW 88
8946: GO 8960
// Say ( Platonov , D5a-Pla-1a ) ;
8948: LD_EXP 76
8952: PPUSH
8953: LD_STRING D5a-Pla-1a
8955: PPUSH
8956: CALL_OW 88
// DialogueOff ;
8960: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8964: LD_STRING M2b
8966: PPUSH
8967: CALL_OW 337
// end ;
8971: LD_VAR 0 1
8975: RET
// export function Dial_WorkshopConstructed ; begin
8976: LD_INT 0
8978: PPUSH
// workshopConstructed = true ;
8979: LD_ADDR_EXP 9
8983: PUSH
8984: LD_INT 1
8986: ST_TO_ADDR
// DialogueOn ;
8987: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8991: LD_EXP 62
8995: PPUSH
8996: LD_STRING D5b-Bur-1
8998: PPUSH
8999: CALL_OW 88
// if labConstructed then
9003: LD_EXP 8
9007: IFFALSE 9023
// Say ( Platonov , D5b-Pla-1 ) else
9009: LD_EXP 76
9013: PPUSH
9014: LD_STRING D5b-Pla-1
9016: PPUSH
9017: CALL_OW 88
9021: GO 9035
// Say ( Platonov , D5b-Pla-1a ) ;
9023: LD_EXP 76
9027: PPUSH
9028: LD_STRING D5b-Pla-1a
9030: PPUSH
9031: CALL_OW 88
// DialogueOff ;
9035: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9039: LD_STRING M2c
9041: PPUSH
9042: CALL_OW 337
// end ;
9046: LD_VAR 0 1
9050: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9051: LD_INT 0
9053: PPUSH
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9061: LD_VAR 0 1
9065: PPUSH
9066: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9070: LD_INT 22
9072: PUSH
9073: LD_INT 3
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: LD_INT 21
9082: PUSH
9083: LD_INT 1
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PPUSH
9094: CALL_OW 69
9098: PPUSH
9099: CALL_OW 141
// DialogueOn ;
9103: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9107: LD_EXP 76
9111: PPUSH
9112: LD_STRING D6-Pla-1
9114: PPUSH
9115: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9119: LD_EXP 62
9123: PPUSH
9124: LD_STRING D6-Bur-1
9126: PPUSH
9127: CALL_OW 88
// DialogueOff ;
9131: CALL_OW 7
// case GetBType ( building ) of b_lab :
9135: LD_VAR 0 1
9139: PPUSH
9140: CALL_OW 266
9144: PUSH
9145: LD_INT 6
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9193
9153: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9154: LD_INT 106
9156: PPUSH
9157: CALL_OW 274
9161: PPUSH
9162: LD_INT 1
9164: PPUSH
9165: LD_INT 106
9167: PPUSH
9168: CALL_OW 274
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 275
9180: PUSH
9181: LD_EXP 54
9185: PLUS
9186: PPUSH
9187: CALL_OW 277
9191: GO 9386
9193: LD_INT 2
9195: DOUBLE
9196: EQUAL
9197: IFTRUE 9201
9199: GO 9241
9201: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9202: LD_INT 106
9204: PPUSH
9205: CALL_OW 274
9209: PPUSH
9210: LD_INT 1
9212: PPUSH
9213: LD_INT 106
9215: PPUSH
9216: CALL_OW 274
9220: PPUSH
9221: LD_INT 1
9223: PPUSH
9224: CALL_OW 275
9228: PUSH
9229: LD_EXP 55
9233: PLUS
9234: PPUSH
9235: CALL_OW 277
9239: GO 9386
9241: LD_INT 26
9243: DOUBLE
9244: EQUAL
9245: IFTRUE 9249
9247: GO 9289
9249: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9250: LD_INT 106
9252: PPUSH
9253: CALL_OW 274
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: LD_INT 106
9263: PPUSH
9264: CALL_OW 274
9268: PPUSH
9269: LD_INT 1
9271: PPUSH
9272: CALL_OW 275
9276: PUSH
9277: LD_EXP 56
9281: PLUS
9282: PPUSH
9283: CALL_OW 277
9287: GO 9386
9289: LD_INT 4
9291: DOUBLE
9292: EQUAL
9293: IFTRUE 9297
9295: GO 9337
9297: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9298: LD_INT 106
9300: PPUSH
9301: CALL_OW 274
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: LD_INT 106
9311: PPUSH
9312: CALL_OW 274
9316: PPUSH
9317: LD_INT 1
9319: PPUSH
9320: CALL_OW 275
9324: PUSH
9325: LD_EXP 57
9329: PLUS
9330: PPUSH
9331: CALL_OW 277
9335: GO 9386
9337: LD_INT 31
9339: DOUBLE
9340: EQUAL
9341: IFTRUE 9345
9343: GO 9385
9345: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9346: LD_INT 106
9348: PPUSH
9349: CALL_OW 274
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 106
9359: PPUSH
9360: CALL_OW 274
9364: PPUSH
9365: LD_INT 1
9367: PPUSH
9368: CALL_OW 275
9372: PUSH
9373: LD_EXP 58
9377: PLUS
9378: PPUSH
9379: CALL_OW 277
9383: GO 9386
9385: POP
// RemoveUnit ( building ) ;
9386: LD_VAR 0 1
9390: PPUSH
9391: CALL_OW 64
// end ;
9395: LD_VAR 0 2
9399: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9400: LD_EXP 9
9404: PUSH
9405: LD_EXP 8
9409: AND
9410: IFFALSE 9519
9412: GO 9414
9414: DISABLE
// begin DialogueOn ;
9415: CALL_OW 6
// if engineResearched then
9419: LD_EXP 10
9423: IFFALSE 9451
// begin Say ( Burlak , D7b-Bur-1 ) ;
9425: LD_EXP 62
9429: PPUSH
9430: LD_STRING D7b-Bur-1
9432: PPUSH
9433: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9437: LD_EXP 76
9441: PPUSH
9442: LD_STRING D7b-Pla-1
9444: PPUSH
9445: CALL_OW 88
// end else
9449: GO 9475
// begin Say ( Burlak , D7a-Bur-1 ) ;
9451: LD_EXP 62
9455: PPUSH
9456: LD_STRING D7a-Bur-1
9458: PPUSH
9459: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9463: LD_EXP 76
9467: PPUSH
9468: LD_STRING D7a-Pla-1
9470: PPUSH
9471: CALL_OW 88
// end ; DialogueOff ;
9475: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9479: LD_STRING M2
9481: PPUSH
9482: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9486: LD_INT 3
9488: PPUSH
9489: LD_EXP 76
9493: PPUSH
9494: CALL_OW 250
9498: PPUSH
9499: LD_EXP 76
9503: PPUSH
9504: CALL_OW 251
9508: PPUSH
9509: LD_INT 5
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 56
// end ;
9519: END
// export function Dial_NewCrates ( x , y ) ; begin
9520: LD_INT 0
9522: PPUSH
// wait ( 0 0$18 ) ;
9523: LD_INT 630
9525: PPUSH
9526: CALL_OW 67
// if not spawnCrates then
9530: LD_EXP 21
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9570
// ComMoveXY ( Platonov , x , y ) ;
9539: LD_EXP 76
9543: PPUSH
9544: LD_VAR 0 1
9548: PPUSH
9549: LD_VAR 0 2
9553: PPUSH
9554: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9558: LD_EXP 76
9562: PPUSH
9563: LD_STRING D4-Pla-1
9565: PPUSH
9566: CALL_OW 88
// end ;
9570: LD_VAR 0 3
9574: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9575: LD_INT 0
9577: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9578: LD_ADDR_EXP 13
9582: PUSH
9583: LD_INT 22
9585: PUSH
9586: LD_INT 3
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 2
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 69
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: ST_TO_ADDR
// constructedFirstVehicle = true ;
9616: LD_ADDR_EXP 12
9620: PUSH
9621: LD_INT 1
9623: ST_TO_ADDR
// InGameOn ;
9624: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9628: LD_VAR 0 1
9632: PPUSH
9633: CALL_OW 87
// wait ( 0 0$3 ) ;
9637: LD_INT 105
9639: PPUSH
9640: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9644: LD_EXP 62
9648: PPUSH
9649: LD_STRING D9-Bur-1
9651: PPUSH
9652: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9656: LD_EXP 76
9660: PPUSH
9661: LD_EXP 13
9665: PPUSH
9666: CALL_OW 250
9670: PPUSH
9671: LD_EXP 13
9675: PPUSH
9676: CALL_OW 251
9680: PPUSH
9681: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9685: LD_INT 35
9687: PPUSH
9688: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9692: LD_EXP 76
9696: PPUSH
9697: LD_EXP 13
9701: PPUSH
9702: CALL_OW 296
9706: PUSH
9707: LD_INT 4
9709: LESS
9710: IFFALSE 9685
// ComTurnUnit ( Platonov , firstVeh ) ;
9712: LD_EXP 76
9716: PPUSH
9717: LD_EXP 13
9721: PPUSH
9722: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9726: LD_EXP 76
9730: PPUSH
9731: LD_STRING D9-Pla-1
9733: PPUSH
9734: CALL_OW 88
// InGameOff ;
9738: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9742: LD_STRING M3
9744: PPUSH
9745: CALL_OW 337
// canExitBase = true ;
9749: LD_ADDR_EXP 19
9753: PUSH
9754: LD_INT 1
9756: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9757: LD_EXP 76
9761: PPUSH
9762: LD_INT 112
9764: PPUSH
9765: LD_INT 97
9767: PPUSH
9768: CALL_OW 111
// end ;
9772: LD_VAR 0 2
9776: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9777: LD_EXP 13
9781: PPUSH
9782: LD_INT 9
9784: PPUSH
9785: CALL_OW 308
9789: PUSH
9790: LD_EXP 14
9794: NOT
9795: AND
9796: IFFALSE 10650
9798: GO 9800
9800: DISABLE
9801: LD_INT 0
9803: PPUSH
9804: PPUSH
9805: PPUSH
// begin vehicleForKurin = true ;
9806: LD_ADDR_EXP 14
9810: PUSH
9811: LD_INT 1
9813: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9814: LD_ADDR_VAR 0 2
9818: PUSH
9819: LD_EXP 69
9823: PPUSH
9824: LD_INT 25
9826: PUSH
9827: LD_INT 2
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: PPUSH
9834: CALL_OW 72
9838: PUSH
9839: LD_INT 1
9841: ARRAY
9842: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9843: LD_ADDR_VAR 0 3
9847: PUSH
9848: LD_EXP 69
9852: PPUSH
9853: LD_INT 25
9855: PUSH
9856: LD_INT 3
9858: PUSH
9859: EMPTY
9860: LIST
9861: LIST
9862: PPUSH
9863: CALL_OW 72
9867: PUSH
9868: LD_INT 1
9870: ARRAY
9871: ST_TO_ADDR
// InGameOn ;
9872: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9876: LD_EXP 67
9880: PPUSH
9881: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9885: LD_EXP 13
9889: PPUSH
9890: LD_EXP 67
9894: PPUSH
9895: CALL_OW 250
9899: PPUSH
9900: LD_EXP 67
9904: PPUSH
9905: CALL_OW 251
9909: PPUSH
9910: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9914: LD_EXP 67
9918: PPUSH
9919: LD_STRING D10-Kur-1
9921: PPUSH
9922: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9926: LD_INT 35
9928: PPUSH
9929: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9933: LD_EXP 13
9937: PPUSH
9938: LD_EXP 67
9942: PPUSH
9943: CALL_OW 250
9947: PPUSH
9948: LD_EXP 67
9952: PPUSH
9953: CALL_OW 251
9957: PPUSH
9958: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9962: LD_EXP 13
9966: PPUSH
9967: LD_EXP 67
9971: PPUSH
9972: CALL_OW 296
9976: PUSH
9977: LD_INT 9
9979: LESS
9980: IFFALSE 9926
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9982: LD_EXP 13
9986: PPUSH
9987: CALL_OW 313
9991: PPUSH
9992: CALL_OW 121
// wait ( 0 0$1 ) ;
9996: LD_INT 35
9998: PPUSH
9999: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10003: LD_EXP 13
10007: PPUSH
10008: CALL_OW 256
10012: PUSH
10013: LD_INT 1000
10015: LESS
10016: IFFALSE 10048
// begin ComExitBuilding ( mech ) ;
10018: LD_VAR 0 3
10022: PPUSH
10023: CALL_OW 122
// wait ( 0 0$1 ) ;
10027: LD_INT 35
10029: PPUSH
10030: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10034: LD_VAR 0 3
10038: PPUSH
10039: LD_EXP 13
10043: PPUSH
10044: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10048: LD_EXP 13
10052: PPUSH
10053: CALL_OW 261
10057: PUSH
10058: LD_INT 90
10060: LESS
10061: IFFALSE 10096
// begin ComExitBuilding ( eng ) ;
10063: LD_VAR 0 2
10067: PPUSH
10068: CALL_OW 122
// wait ( 0 0$1 ) ;
10072: LD_INT 35
10074: PPUSH
10075: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10079: LD_VAR 0 2
10083: PPUSH
10084: LD_INT 71
10086: PPUSH
10087: LD_EXP 13
10091: PPUSH
10092: CALL 4664 0 3
// end ; repeat wait ( 0 0$1 ) ;
10096: LD_INT 35
10098: PPUSH
10099: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10103: LD_EXP 13
10107: PPUSH
10108: CALL_OW 256
10112: PUSH
10113: LD_INT 1000
10115: EQUAL
10116: PUSH
10117: LD_EXP 13
10121: PPUSH
10122: CALL_OW 261
10126: PUSH
10127: LD_INT 90
10129: GREATER
10130: AND
10131: IFFALSE 10096
// if UnitsInside ( firstVeh ) then
10133: LD_EXP 13
10137: PPUSH
10138: CALL_OW 313
10142: IFFALSE 10162
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10144: LD_EXP 13
10148: PPUSH
10149: CALL_OW 313
10153: PUSH
10154: LD_INT 1
10156: ARRAY
10157: PPUSH
10158: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10162: LD_VAR 0 2
10166: PPUSH
10167: LD_INT 71
10169: PPUSH
10170: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10174: LD_EXP 13
10178: PPUSH
10179: LD_INT 6
10181: PPUSH
10182: CALL_OW 235
// if belkovReturn then
10186: LD_EXP 6
10190: IFFALSE 10276
// begin if IsInUnit ( Belkov ) then
10192: LD_EXP 64
10196: PPUSH
10197: CALL_OW 310
10201: IFFALSE 10212
// ComExitBuilding ( Belkov ) ;
10203: LD_EXP 64
10207: PPUSH
10208: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10219: LD_EXP 64
10223: PPUSH
10224: LD_EXP 13
10228: PPUSH
10229: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10233: LD_EXP 64
10237: PPUSH
10238: CALL_OW 310
10242: PUSH
10243: LD_EXP 13
10247: EQUAL
10248: IFFALSE 10212
// Say ( Belkov , D10-Bel-1 ) ;
10250: LD_EXP 64
10254: PPUSH
10255: LD_STRING D10-Bel-1
10257: PPUSH
10258: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10262: LD_EXP 67
10266: PPUSH
10267: LD_STRING D10-Kur-2
10269: PPUSH
10270: CALL_OW 88
// end else
10274: GO 10402
// begin if IsInUnit ( Belkov2 ) then
10276: LD_EXP 68
10280: PPUSH
10281: CALL_OW 310
10285: IFFALSE 10296
// ComExitBuilding ( Belkov2 ) ;
10287: LD_EXP 68
10291: PPUSH
10292: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10296: LD_INT 35
10298: PPUSH
10299: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10303: LD_EXP 68
10307: PPUSH
10308: LD_EXP 13
10312: PPUSH
10313: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10317: LD_EXP 68
10321: PPUSH
10322: CALL_OW 310
10326: PUSH
10327: LD_EXP 13
10331: EQUAL
10332: IFFALSE 10296
// meetBelkovBrother = true ;
10334: LD_ADDR_EXP 4
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10342: LD_EXP 68
10346: PPUSH
10347: LD_STRING D10-Bel-1
10349: PPUSH
10350: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10354: LD_EXP 62
10358: PPUSH
10359: LD_STRING D10-Bur-1
10361: PPUSH
10362: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10366: LD_EXP 68
10370: PPUSH
10371: LD_STRING D10-Bel-2
10373: PPUSH
10374: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10378: LD_EXP 62
10382: PPUSH
10383: LD_STRING D10-Bur-2
10385: PPUSH
10386: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10390: LD_EXP 67
10394: PPUSH
10395: LD_STRING D10-Kur-2a
10397: PPUSH
10398: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10402: LD_ADDR_EXP 74
10406: PUSH
10407: EMPTY
10408: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10409: LD_ADDR_EXP 75
10413: PUSH
10414: EMPTY
10415: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10416: LD_ADDR_EXP 22
10420: PUSH
10421: LD_INT 1
10423: ST_TO_ADDR
// CreateBelkovTeam ;
10424: CALL 6103 0 0
// ComExitBuilding ( belkovTeam ) ;
10428: LD_EXP 73
10432: PPUSH
10433: CALL_OW 122
// wait ( 0 0$1 ) ;
10437: LD_INT 35
10439: PPUSH
10440: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10444: LD_ADDR_EXP 72
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_INT 6
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: PUSH
10459: LD_INT 21
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: PPUSH
10473: CALL_OW 69
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10482: LD_ADDR_EXP 73
10486: PUSH
10487: LD_EXP 73
10491: PUSH
10492: LD_EXP 72
10496: ADD
10497: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10498: LD_EXP 73
10502: PPUSH
10503: LD_INT 147
10505: PPUSH
10506: LD_INT 102
10508: PPUSH
10509: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10513: LD_EXP 73
10517: PPUSH
10518: LD_INT 133
10520: PPUSH
10521: LD_INT 94
10523: PPUSH
10524: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10528: LD_EXP 73
10532: PPUSH
10533: LD_INT 123
10535: PPUSH
10536: LD_INT 74
10538: PPUSH
10539: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10543: LD_EXP 73
10547: PPUSH
10548: LD_INT 111
10550: PPUSH
10551: LD_INT 48
10553: PPUSH
10554: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10558: LD_EXP 73
10562: PPUSH
10563: LD_INT 122
10565: PPUSH
10566: LD_INT 43
10568: PPUSH
10569: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10573: LD_EXP 73
10577: PPUSH
10578: LD_INT 129
10580: PPUSH
10581: LD_INT 32
10583: PPUSH
10584: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10588: LD_EXP 73
10592: PPUSH
10593: LD_INT 132
10595: PPUSH
10596: LD_INT 22
10598: PPUSH
10599: CALL_OW 171
// wait ( 0 0$8 ) ;
10603: LD_INT 280
10605: PPUSH
10606: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10610: LD_EXP 67
10614: PPUSH
10615: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10619: LD_EXP 67
10623: PPUSH
10624: LD_STRING D10-Kur-2b
10626: PPUSH
10627: CALL_OW 88
// InGameOff ;
10631: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10635: LD_STRING M4
10637: PPUSH
10638: CALL_OW 337
// backToBeria1 = true ;
10642: LD_ADDR_EXP 15
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// end ;
10650: PPOPN 3
10652: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10653: LD_INT 9
10655: PPUSH
10656: LD_INT 22
10658: PUSH
10659: LD_INT 3
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 21
10668: PUSH
10669: LD_INT 2
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 70
10684: PUSH
10685: LD_EXP 14
10689: AND
10690: IFFALSE 10707
10692: GO 10694
10694: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10695: LD_EXP 67
10699: PPUSH
10700: LD_STRING D1a-Kur-1a
10702: PPUSH
10703: CALL_OW 88
10707: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10708: LD_EXP 22
10712: IFFALSE 11115
10714: GO 10716
10716: DISABLE
10717: LD_INT 0
10719: PPUSH
10720: PPUSH
// begin enable ;
10721: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10722: LD_INT 10
10724: PPUSH
10725: LD_INT 22
10727: PUSH
10728: LD_INT 6
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PPUSH
10735: CALL_OW 70
10739: PUSH
10740: LD_INT 0
10742: EQUAL
10743: IFFALSE 10747
// exit ;
10745: GO 11115
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10747: LD_ADDR_VAR 0 1
10751: PUSH
10752: LD_INT 10
10754: PPUSH
10755: LD_INT 22
10757: PUSH
10758: LD_INT 6
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: FOR_IN
10771: IFFALSE 11101
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10773: LD_VAR 0 1
10777: PPUSH
10778: CALL_OW 247
10782: PUSH
10783: LD_INT 1
10785: EQUAL
10786: PUSH
10787: LD_VAR 0 1
10791: PUSH
10792: LD_EXP 64
10796: EQUAL
10797: NOT
10798: PUSH
10799: LD_VAR 0 1
10803: PUSH
10804: LD_EXP 68
10808: EQUAL
10809: NOT
10810: AND
10811: PUSH
10812: LD_VAR 0 1
10816: PUSH
10817: LD_EXP 65
10821: EQUAL
10822: NOT
10823: AND
10824: AND
10825: IFFALSE 10866
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10827: LD_ADDR_EXP 23
10831: PUSH
10832: LD_EXP 23
10836: PUSH
10837: LD_INT 1
10839: PLUS
10840: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10841: LD_ADDR_EXP 74
10845: PUSH
10846: LD_EXP 74
10850: PUSH
10851: LD_VAR 0 1
10855: ADD
10856: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10857: LD_VAR 0 1
10861: PPUSH
10862: CALL_OW 64
// end ; if unit = Kirilenkova then
10866: LD_VAR 0 1
10870: PUSH
10871: LD_EXP 65
10875: EQUAL
10876: IFFALSE 10899
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10878: LD_EXP 65
10882: PPUSH
10883: LD_STRING 02_TmpKirilenkova
10885: PPUSH
10886: CALL_OW 38
// RemoveUnit ( unit ) ;
10890: LD_VAR 0 1
10894: PPUSH
10895: CALL_OW 64
// end ; if unit = Belkov2 then
10899: LD_VAR 0 1
10903: PUSH
10904: LD_EXP 68
10908: EQUAL
10909: IFFALSE 10932
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10911: LD_EXP 68
10915: PPUSH
10916: LD_STRING 02_TmpBelkov2
10918: PPUSH
10919: CALL_OW 38
// RemoveUnit ( unit ) ;
10923: LD_VAR 0 1
10927: PPUSH
10928: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10932: LD_VAR 0 1
10936: PPUSH
10937: CALL_OW 247
10941: PUSH
10942: LD_INT 2
10944: EQUAL
10945: IFFALSE 11099
// begin driver = UnitsInside ( unit ) ;
10947: LD_ADDR_VAR 0 2
10951: PUSH
10952: LD_VAR 0 1
10956: PPUSH
10957: CALL_OW 313
10961: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10962: LD_VAR 0 2
10966: PUSH
10967: LD_INT 1
10969: ARRAY
10970: PUSH
10971: LD_EXP 64
10975: EQUAL
10976: IFFALSE 11001
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10978: LD_EXP 64
10982: PPUSH
10983: LD_STRING 02_TmpBelkov
10985: PPUSH
10986: CALL_OW 38
// RemoveUnit ( unit ) ;
10990: LD_VAR 0 1
10994: PPUSH
10995: CALL_OW 64
// end else
10999: GO 11022
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11001: LD_EXP 68
11005: PPUSH
11006: LD_STRING 02_TmpBelkov2
11008: PPUSH
11009: CALL_OW 38
// RemoveUnit ( unit ) ;
11013: LD_VAR 0 1
11017: PPUSH
11018: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11022: LD_ADDR_EXP 75
11026: PUSH
11027: LD_EXP 75
11031: PUSH
11032: LD_VAR 0 1
11036: PPUSH
11037: CALL_OW 265
11041: PUSH
11042: LD_VAR 0 1
11046: PPUSH
11047: CALL_OW 262
11051: PUSH
11052: LD_VAR 0 1
11056: PPUSH
11057: CALL_OW 263
11061: PUSH
11062: LD_VAR 0 1
11066: PPUSH
11067: CALL_OW 264
11071: PUSH
11072: LD_VAR 0 1
11076: PPUSH
11077: CALL_OW 261
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: ADD
11089: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11090: LD_VAR 0 1
11094: PPUSH
11095: CALL_OW 64
// end ; end ;
11099: GO 10770
11101: POP
11102: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11103: LD_EXP 74
11107: PPUSH
11108: LD_STRING 02_TmpBelkovTeam
11110: PPUSH
11111: CALL_OW 38
// end ;
11115: PPOPN 2
11117: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11118: LD_INT 8
11120: PPUSH
11121: LD_INT 22
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 21
11133: PUSH
11134: LD_INT 1
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PPUSH
11145: CALL_OW 71
11149: PUSH
11150: LD_INT 0
11152: EQUAL
11153: PUSH
11154: LD_EXP 15
11158: AND
11159: IFFALSE 11366
11161: GO 11163
11163: DISABLE
11164: LD_INT 0
11166: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11167: LD_ADDR_VAR 0 1
11171: PUSH
11172: LD_EXP 69
11176: PPUSH
11177: LD_INT 25
11179: PUSH
11180: LD_INT 2
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 72
11191: ST_TO_ADDR
// backToBeria1 = false ;
11192: LD_ADDR_EXP 15
11196: PUSH
11197: LD_INT 0
11199: ST_TO_ADDR
// canExitBase = false ;
11200: LD_ADDR_EXP 19
11204: PUSH
11205: LD_INT 0
11207: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11208: LD_EXP 76
11212: PPUSH
11213: LD_STRING D11-Pla-1
11215: PPUSH
11216: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11220: LD_INT 22
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 21
11232: PUSH
11233: LD_INT 1
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: PUSH
11249: LD_INT 1
11251: GREATER
11252: IFFALSE 11268
// Say ( Burlak , D11-Bur-1a ) else
11254: LD_EXP 62
11258: PPUSH
11259: LD_STRING D11-Bur-1a
11261: PPUSH
11262: CALL_OW 88
11266: GO 11280
// Say ( Burlak , D11-Bur-1 ) ;
11268: LD_EXP 62
11272: PPUSH
11273: LD_STRING D11-Bur-1
11275: PPUSH
11276: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11280: LD_STRING M5
11282: PPUSH
11283: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11287: LD_INT 1
11289: PPUSH
11290: LD_INT 5
11292: PPUSH
11293: CALL_OW 12
11297: PPUSH
11298: LD_INT 26
11300: PPUSH
11301: LD_INT 1
11303: PPUSH
11304: CALL_OW 55
// construcMoreVehicles = true ;
11308: LD_ADDR_EXP 17
11312: PUSH
11313: LD_INT 1
11315: ST_TO_ADDR
// spawnCrates = true ;
11316: LD_ADDR_EXP 21
11320: PUSH
11321: LD_INT 1
11323: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_INT 2
11340: PPUSH
11341: LD_INT 159
11343: PPUSH
11344: LD_INT 112
11346: PPUSH
11347: LD_INT 0
11349: PPUSH
11350: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11354: LD_VAR 0 1
11358: PPUSH
11359: LD_INT 71
11361: PPUSH
11362: CALL_OW 180
// end ;
11366: PPOPN 1
11368: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11369: LD_EXP 18
11373: PUSH
11374: LD_INT 22
11376: PUSH
11377: LD_INT 3
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 21
11386: PUSH
11387: LD_INT 1
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PPUSH
11398: CALL_OW 69
11402: GREATEREQUAL
11403: IFFALSE 12531
11405: GO 11407
11407: DISABLE
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// begin canRemoveBelkovUnits = false ;
11412: LD_ADDR_EXP 22
11416: PUSH
11417: LD_INT 0
11419: ST_TO_ADDR
// spawnCrates = false ;
11420: LD_ADDR_EXP 21
11424: PUSH
11425: LD_INT 0
11427: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11428: LD_INT 22
11430: PUSH
11431: LD_INT 3
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: LD_INT 21
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 21
11453: PUSH
11454: LD_INT 2
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PPUSH
11470: CALL_OW 69
11474: PPUSH
11475: CALL_OW 141
// InGameOn ;
11479: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11483: LD_EXP 76
11487: PPUSH
11488: CALL_OW 85
// DialogueOn ;
11492: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11496: LD_EXP 62
11500: PPUSH
11501: LD_STRING D12-Bur-1
11503: PPUSH
11504: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11508: LD_EXP 76
11512: PPUSH
11513: LD_STRING D12-Pla-1
11515: PPUSH
11516: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11520: LD_EXP 62
11524: PPUSH
11525: LD_STRING D12-Bur-2
11527: PPUSH
11528: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11532: LD_EXP 76
11536: PPUSH
11537: LD_STRING D12-Pla-2
11539: PPUSH
11540: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11544: LD_EXP 62
11548: PPUSH
11549: LD_STRING D12-Bur-3
11551: PPUSH
11552: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11556: LD_EXP 76
11560: PPUSH
11561: LD_STRING D12-Pla-3
11563: PPUSH
11564: CALL_OW 88
// DialogueOff ;
11568: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11572: LD_INT 6
11574: PPUSH
11575: LD_INT 1
11577: PPUSH
11578: LD_INT 1
11580: PPUSH
11581: LD_INT 1
11583: PPUSH
11584: CALL_OW 80
// PrepareAmerican ;
11588: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11592: CALL 1132 0 0
// if IsOK ( Belkov ) then
11596: LD_EXP 64
11600: PPUSH
11601: CALL_OW 302
11605: IFFALSE 11619
// tmpBelkov = Belkov else
11607: LD_ADDR_VAR 0 1
11611: PUSH
11612: LD_EXP 64
11616: ST_TO_ADDR
11617: GO 11629
// tmpBelkov = Belkov2 ;
11619: LD_ADDR_VAR 0 1
11623: PUSH
11624: LD_EXP 68
11628: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11629: LD_EXP 72
11633: PPUSH
11634: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11638: LD_EXP 80
11642: PPUSH
11643: LD_STRING D13-Sol1-1
11645: PPUSH
11646: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11650: LD_VAR 0 1
11654: PPUSH
11655: LD_STRING D13-Bel-1
11657: PPUSH
11658: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11662: LD_EXP 67
11666: PPUSH
11667: LD_STRING D13-Kur-1
11669: PPUSH
11670: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_STRING D13-Bel-2
11681: PPUSH
11682: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11686: LD_EXP 73
11690: PPUSH
11691: LD_INT 121
11693: PPUSH
11694: LD_INT 29
11696: PPUSH
11697: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11701: LD_INT 35
11703: PPUSH
11704: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11708: LD_EXP 72
11712: PPUSH
11713: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11717: LD_ADDR_VAR 0 2
11721: PUSH
11722: LD_EXP 73
11726: PPUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 56
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: PPUSH
11752: LD_EXP 72
11756: PPUSH
11757: CALL_OW 74
11761: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11762: LD_EXP 72
11766: PPUSH
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 296
11776: PUSH
11777: LD_INT 5
11779: LESS
11780: IFFALSE 11793
// ComStop ( kirovVehicle ) else
11782: LD_EXP 72
11786: PPUSH
11787: CALL_OW 141
11791: GO 11808
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11793: LD_EXP 73
11797: PPUSH
11798: LD_INT 121
11800: PPUSH
11801: LD_INT 29
11803: PPUSH
11804: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11808: LD_EXP 73
11812: PPUSH
11813: LD_EXP 80
11817: PPUSH
11818: CALL_OW 74
11822: PPUSH
11823: LD_EXP 80
11827: PPUSH
11828: CALL_OW 296
11832: PUSH
11833: LD_INT 5
11835: LESS
11836: IFFALSE 11701
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11838: LD_EXP 72
11842: PUSH
11843: LD_EXP 80
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PPUSH
11852: CALL_OW 87
// ComWalk ( trapTeam ) ;
11856: LD_EXP 81
11860: PPUSH
11861: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11865: LD_EXP 81
11869: PPUSH
11870: LD_EXP 72
11874: PPUSH
11875: CALL_OW 179
// ComStop ( belkovTeam ) ;
11879: LD_EXP 73
11883: PPUSH
11884: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11888: LD_EXP 73
11892: PPUSH
11893: LD_EXP 80
11897: PPUSH
11898: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11902: LD_INT 25
11904: PPUSH
11905: LD_INT 22
11907: PUSH
11908: LD_INT 1
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 21
11917: PUSH
11918: LD_INT 1
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PPUSH
11929: CALL_OW 70
11933: PPUSH
11934: LD_INT 111
11936: PPUSH
11937: LD_INT 13
11939: PPUSH
11940: CALL_OW 171
// music_class = music_combat ;
11944: LD_ADDR_OWVAR 72
11948: PUSH
11949: LD_INT 1
11951: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11952: LD_INT 35
11954: PPUSH
11955: CALL_OW 67
// DialogueOn ;
11959: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11963: LD_EXP 80
11967: PPUSH
11968: LD_STRING D14-Sol1-1
11970: PPUSH
11971: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11975: LD_VAR 0 1
11979: PPUSH
11980: LD_STRING D14-Bel-1
11982: PPUSH
11983: CALL_OW 88
// DialogueOff ;
11987: CALL_OW 7
// immortalBelkovTeam = true ;
11991: LD_ADDR_EXP 24
11995: PUSH
11996: LD_INT 1
11998: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11999: LD_INT 6
12001: PPUSH
12002: LD_INT 1
12004: PPUSH
12005: LD_INT 2
12007: PPUSH
12008: LD_INT 1
12010: PPUSH
12011: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12015: LD_EXP 73
12019: PPUSH
12020: LD_INT 107
12022: PPUSH
12023: LD_INT 5
12025: PPUSH
12026: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12030: LD_EXP 72
12034: PPUSH
12035: LD_INT 107
12037: PPUSH
12038: LD_INT 5
12040: PPUSH
12041: CALL_OW 111
// wait ( 0 0$2 ) ;
12045: LD_INT 70
12047: PPUSH
12048: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12052: LD_EXP 73
12056: PPUSH
12057: LD_INT 101
12059: PPUSH
12060: LD_INT 19
12062: PPUSH
12063: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12067: LD_EXP 72
12071: PPUSH
12072: LD_INT 101
12074: PPUSH
12075: LD_INT 19
12077: PPUSH
12078: CALL_OW 111
// wait ( 0 0$2 ) ;
12082: LD_INT 70
12084: PPUSH
12085: CALL_OW 67
// immortalVehLive = 400 ;
12089: LD_ADDR_EXP 25
12093: PUSH
12094: LD_INT 400
12096: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12097: LD_EXP 72
12101: PPUSH
12102: LD_INT 500
12104: PPUSH
12105: CALL_OW 234
// wait ( 0 0$3 ) ;
12109: LD_INT 105
12111: PPUSH
12112: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12116: LD_VAR 0 1
12120: PPUSH
12121: CALL_OW 121
// wait ( 0 0$1 ) ;
12125: LD_INT 35
12127: PPUSH
12128: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12132: LD_EXP 80
12136: PPUSH
12137: LD_EXP 72
12141: PPUSH
12142: CALL_OW 120
// AddComHold ( trapTeam ) ;
12146: LD_EXP 81
12150: PPUSH
12151: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12155: LD_EXP 73
12159: PPUSH
12160: LD_INT 88
12162: PPUSH
12163: LD_INT 18
12165: PPUSH
12166: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12170: LD_INT 35
12172: PPUSH
12173: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12177: LD_VAR 0 1
12181: PPUSH
12182: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12186: LD_VAR 0 1
12190: PPUSH
12191: LD_INT 15
12193: PPUSH
12194: CALL_OW 308
12198: IFFALSE 12170
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12200: LD_ADDR_EXP 88
12204: PUSH
12205: LD_INT 22
12207: PUSH
12208: LD_INT 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 21
12217: PUSH
12218: LD_INT 2
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PPUSH
12229: CALL_OW 69
12233: PUSH
12234: LD_INT 1
12236: ARRAY
12237: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12238: LD_INT 28
12240: PPUSH
12241: LD_INT 22
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 21
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 70
12269: PPUSH
12270: LD_INT 113
12272: PPUSH
12273: LD_INT 29
12275: PPUSH
12276: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12280: LD_EXP 88
12284: PPUSH
12285: LD_INT 118
12287: PPUSH
12288: LD_INT 25
12290: PPUSH
12291: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12295: LD_VAR 0 1
12299: PPUSH
12300: LD_STRING D14-Bel-1a
12302: PPUSH
12303: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12307: LD_EXP 67
12311: PPUSH
12312: LD_STRING D14-Kur-1
12314: PPUSH
12315: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12319: LD_VAR 0 1
12323: PPUSH
12324: LD_STRING D14-Bel-2
12326: PPUSH
12327: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12331: LD_EXP 67
12335: PPUSH
12336: LD_STRING D14-Kur-2
12338: PPUSH
12339: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12343: LD_EXP 76
12347: PPUSH
12348: CALL_OW 85
// wait ( 0 0$2 ) ;
12352: LD_INT 70
12354: PPUSH
12355: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12359: LD_EXP 62
12363: PPUSH
12364: LD_STRING D14a-Bur-1
12366: PPUSH
12367: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12371: LD_EXP 76
12375: PPUSH
12376: LD_STRING D14a-Pla-1
12378: PPUSH
12379: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12383: LD_EXP 62
12387: PPUSH
12388: LD_STRING D14a-Bur-2
12390: PPUSH
12391: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12395: LD_EXP 76
12399: PPUSH
12400: LD_STRING D14a-Pla-2
12402: PPUSH
12403: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12407: LD_EXP 62
12411: PPUSH
12412: LD_STRING D14a-Bur-3
12414: PPUSH
12415: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12419: LD_EXP 76
12423: PPUSH
12424: LD_STRING D14a-Pla-3
12426: PPUSH
12427: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12431: LD_EXP 62
12435: PPUSH
12436: LD_STRING D14a-Bur-4
12438: PPUSH
12439: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12443: LD_EXP 76
12447: PPUSH
12448: LD_STRING D14a-Pla-4
12450: PPUSH
12451: CALL_OW 88
// InGameOff ;
12455: CALL_OW 9
// immortalBelkovTeam = false ;
12459: LD_ADDR_EXP 24
12463: PUSH
12464: LD_INT 0
12466: ST_TO_ADDR
// activateAMAI = true ;
12467: LD_ADDR_EXP 27
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// canExitBase = true ;
12475: LD_ADDR_EXP 19
12479: PUSH
12480: LD_INT 1
12482: ST_TO_ADDR
// canExploreMap = true ;
12483: LD_ADDR_EXP 20
12487: PUSH
12488: LD_INT 1
12490: ST_TO_ADDR
// construcMoreVehicles = false ;
12491: LD_ADDR_EXP 17
12495: PUSH
12496: LD_INT 0
12498: ST_TO_ADDR
// activateBelkovAI = true ;
12499: LD_ADDR_EXP 28
12503: PUSH
12504: LD_INT 1
12506: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12507: LD_STRING M6
12509: PPUSH
12510: CALL_OW 337
// music_class = 0 ;
12514: LD_ADDR_OWVAR 72
12518: PUSH
12519: LD_INT 0
12521: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12522: LD_EXP 81
12526: PPUSH
12527: CALL_OW 139
// end ;
12531: PPOPN 2
12533: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12534: LD_EXP 88
12538: PPUSH
12539: LD_INT 118
12541: PPUSH
12542: LD_INT 25
12544: PPUSH
12545: CALL_OW 297
12549: PUSH
12550: LD_INT 6
12552: LESS
12553: IFFALSE 12648
12555: GO 12557
12557: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12558: LD_EXP 80
12562: PPUSH
12563: CALL_OW 121
// uc_side = 1 ;
12567: LD_ADDR_OWVAR 20
12571: PUSH
12572: LD_INT 1
12574: ST_TO_ADDR
// uc_nation = 1 ;
12575: LD_ADDR_OWVAR 21
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12583: LD_INT 0
12585: PPUSH
12586: LD_EXP 59
12590: PPUSH
12591: CALL_OW 383
// amMech = CreateHuman ;
12595: LD_ADDR_EXP 89
12599: PUSH
12600: CALL_OW 44
12604: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12605: LD_EXP 89
12609: PPUSH
12610: LD_INT 27
12612: PPUSH
12613: LD_INT 0
12615: PPUSH
12616: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12620: LD_EXP 89
12624: PPUSH
12625: LD_EXP 88
12629: PPUSH
12630: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12634: LD_EXP 89
12638: PPUSH
12639: LD_EXP 88
12643: PPUSH
12644: CALL_OW 180
// end ;
12648: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12649: LD_EXP 89
12653: PPUSH
12654: CALL_OW 302
12658: PUSH
12659: LD_INT 22
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 21
12671: PUSH
12672: LD_INT 2
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: PUSH
12679: LD_INT 50
12681: PUSH
12682: EMPTY
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: AND
12695: IFFALSE 12948
12697: GO 12699
12699: DISABLE
12700: LD_INT 0
12702: PPUSH
// begin enable ;
12703: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_INT 22
12711: PUSH
12712: LD_INT 3
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 2
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 21
12734: PUSH
12735: LD_INT 2
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PPUSH
12751: CALL_OW 69
12755: PPUSH
12756: LD_EXP 89
12760: PPUSH
12761: CALL_OW 74
12765: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12766: LD_VAR 0 1
12770: PPUSH
12771: LD_EXP 89
12775: PPUSH
12776: CALL_OW 296
12780: PUSH
12781: LD_INT 13
12783: LESS
12784: IFFALSE 12837
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12786: LD_EXP 89
12790: PPUSH
12791: LD_INT 22
12793: PUSH
12794: LD_INT 1
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 50
12813: PUSH
12814: EMPTY
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 69
12826: PUSH
12827: LD_INT 1
12829: ARRAY
12830: PPUSH
12831: CALL_OW 120
12835: GO 12948
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12837: LD_INT 22
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 21
12849: PUSH
12850: LD_INT 2
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: EMPTY
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: PPUSH
12868: CALL_OW 69
12872: PUSH
12873: LD_INT 1
12875: ARRAY
12876: PPUSH
12877: CALL_OW 256
12881: PUSH
12882: LD_INT 1000
12884: EQUAL
12885: PUSH
12886: LD_EXP 89
12890: PPUSH
12891: CALL_OW 310
12895: NOT
12896: AND
12897: IFFALSE 12948
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12899: LD_EXP 89
12903: PPUSH
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 2
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 50
12926: PUSH
12927: EMPTY
12928: LIST
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: LIST
12934: PPUSH
12935: CALL_OW 69
12939: PUSH
12940: LD_INT 1
12942: ARRAY
12943: PPUSH
12944: CALL_OW 120
// end ; end ;
12948: PPOPN 1
12950: END
// every 0 0$1 trigger immortalBelkovTeam do
12951: LD_EXP 24
12955: IFFALSE 13042
12957: GO 12959
12959: DISABLE
// begin enable ;
12960: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
12961: LD_EXP 73
12965: PPUSH
12966: LD_INT 21
12968: PUSH
12969: LD_INT 1
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: PPUSH
12976: CALL_OW 72
12980: PPUSH
12981: LD_INT 1000
12983: PPUSH
12984: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
12988: LD_EXP 73
12992: PPUSH
12993: LD_INT 21
12995: PUSH
12996: LD_INT 2
12998: PUSH
12999: EMPTY
13000: LIST
13001: LIST
13002: PPUSH
13003: CALL_OW 72
13007: IFFALSE 13042
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13009: LD_EXP 73
13013: PPUSH
13014: LD_INT 21
13016: PUSH
13017: LD_INT 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 72
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_EXP 25
13037: PPUSH
13038: CALL_OW 234
// end ;
13042: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13043: LD_EXP 20
13047: PUSH
13048: LD_EXP 37
13052: NOT
13053: AND
13054: PUSH
13055: LD_EXP 61
13059: PUSH
13060: LD_INT 0
13062: GREATER
13063: AND
13064: IFFALSE 13084
13066: GO 13068
13068: DISABLE
// begin enable ;
13069: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13070: LD_ADDR_EXP 61
13074: PUSH
13075: LD_EXP 61
13079: PUSH
13080: LD_INT 35
13082: MINUS
13083: ST_TO_ADDR
// end ;
13084: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13085: LD_EXP 20
13089: IFFALSE 13173
13091: GO 13093
13093: DISABLE
13094: LD_INT 0
13096: PPUSH
13097: PPUSH
// begin tmp = trapTeam ;
13098: LD_ADDR_VAR 0 2
13102: PUSH
13103: LD_EXP 81
13107: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13108: LD_ADDR_VAR 0 2
13112: PUSH
13113: LD_VAR 0 2
13117: PUSH
13118: LD_EXP 80
13122: DIFF
13123: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13124: LD_ADDR_VAR 0 1
13128: PUSH
13129: DOUBLE
13130: LD_INT 1
13132: DEC
13133: ST_TO_ADDR
13134: LD_INT 2
13136: PPUSH
13137: LD_INT 3
13139: PPUSH
13140: CALL_OW 12
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13171
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13148: LD_VAR 0 2
13152: PUSH
13153: LD_VAR 0 1
13157: ARRAY
13158: PPUSH
13159: LD_INT 87
13161: PPUSH
13162: LD_INT 18
13164: PPUSH
13165: CALL_OW 114
13169: GO 13145
13171: POP
13172: POP
// end ;
13173: PPOPN 2
13175: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13176: LD_EXP 61
13180: PUSH
13181: LD_INT 70
13183: LESS
13184: PUSH
13185: LD_EXP 81
13189: AND
13190: IFFALSE 13219
13192: GO 13194
13194: DISABLE
// begin enable ;
13195: ENABLE
// activateBelkovAI = false ;
13196: LD_ADDR_EXP 28
13200: PUSH
13201: LD_INT 0
13203: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13204: LD_EXP 73
13208: PPUSH
13209: LD_INT 120
13211: PPUSH
13212: LD_INT 28
13214: PPUSH
13215: CALL_OW 114
// end ;
13219: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13220: LD_EXP 29
13224: NOT
13225: PUSH
13226: LD_EXP 30
13230: NOT
13231: OR
13232: PUSH
13233: LD_EXP 20
13237: AND
13238: IFFALSE 13700
13240: GO 13242
13242: DISABLE
13243: LD_INT 0
13245: PPUSH
// begin enable ;
13246: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13247: LD_ADDR_VAR 0 1
13251: PUSH
13252: LD_INT 22
13254: PUSH
13255: LD_INT 1
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 21
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 30
13274: PUSH
13275: LD_INT 31
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 69
13291: PUSH
13292: FOR_IN
13293: IFFALSE 13698
// begin if See ( 3 , bunker ) then
13295: LD_INT 3
13297: PPUSH
13298: LD_VAR 0 1
13302: PPUSH
13303: CALL_OW 292
13307: IFFALSE 13696
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13309: LD_VAR 0 1
13313: PUSH
13314: LD_EXP 82
13318: IN
13319: PUSH
13320: LD_EXP 29
13324: NOT
13325: AND
13326: PUSH
13327: LD_INT 18
13329: PPUSH
13330: LD_INT 22
13332: PUSH
13333: LD_INT 3
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: PPUSH
13343: CALL_OW 70
13347: NOT
13348: AND
13349: IFFALSE 13542
// begin sawLeftBunker = true ;
13351: LD_ADDR_EXP 29
13355: PUSH
13356: LD_INT 1
13358: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13359: LD_VAR 0 1
13363: PPUSH
13364: CALL_OW 85
// DialogueOn ;
13368: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13372: LD_EXP 62
13376: PPUSH
13377: LD_STRING D15-Bur-1
13379: PPUSH
13380: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13384: LD_EXP 63
13388: PPUSH
13389: CALL_OW 302
13393: PUSH
13394: LD_EXP 70
13398: PPUSH
13399: CALL_OW 302
13403: OR
13404: IFFALSE 13499
// begin if IsOK ( Gnyevko ) then
13406: LD_EXP 63
13410: PPUSH
13411: CALL_OW 302
13415: IFFALSE 13429
// Say ( Gnyevko , D15-Gny-1 ) ;
13417: LD_EXP 63
13421: PPUSH
13422: LD_STRING D15-Gny-1
13424: PPUSH
13425: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13429: LD_EXP 70
13433: PPUSH
13434: CALL_OW 302
13438: IFFALSE 13452
// Say ( Kovalyuk , D15-Kov-1 ) ;
13440: LD_EXP 70
13444: PPUSH
13445: LD_STRING D15-Kov-1
13447: PPUSH
13448: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13452: LD_EXP 62
13456: PPUSH
13457: LD_STRING D15-Bur-2
13459: PPUSH
13460: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13464: LD_EXP 70
13468: PPUSH
13469: CALL_OW 302
13473: IFFALSE 13487
// Say ( Kovalyuk , D15-Kov-2 ) ;
13475: LD_EXP 70
13479: PPUSH
13480: LD_STRING D15-Kov-2
13482: PPUSH
13483: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13487: LD_EXP 62
13491: PPUSH
13492: LD_STRING D15-Bur-3
13494: PPUSH
13495: CALL_OW 88
// end ; DialogueOff ;
13499: CALL_OW 7
// if raportForPlatonov = 2 then
13503: LD_EXP 39
13507: PUSH
13508: LD_INT 2
13510: EQUAL
13511: IFFALSE 13523
// raportForPlatonov = 1 else
13513: LD_ADDR_EXP 39
13517: PUSH
13518: LD_INT 1
13520: ST_TO_ADDR
13521: GO 13531
// raportForPlatonov = 3 ;
13523: LD_ADDR_EXP 39
13527: PUSH
13528: LD_INT 3
13530: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13531: LD_STRING M7
13533: PPUSH
13534: CALL_OW 337
// exit ;
13538: POP
13539: POP
13540: GO 13700
// end ; if bunker in rightBunkers and not sawRightBunker then
13542: LD_VAR 0 1
13546: PUSH
13547: LD_EXP 83
13551: IN
13552: PUSH
13553: LD_EXP 30
13557: NOT
13558: AND
13559: IFFALSE 13696
// begin sawRightBunker = true ;
13561: LD_ADDR_EXP 30
13565: PUSH
13566: LD_INT 1
13568: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13569: LD_VAR 0 1
13573: PPUSH
13574: CALL_OW 85
// DialogueOn ;
13578: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13582: LD_EXP 70
13586: PPUSH
13587: CALL_OW 302
13591: IFFALSE 13660
// begin if sawLeftBunker then
13593: LD_EXP 29
13597: IFFALSE 13613
// Say ( Kovalyuk , D16-Kov-1a ) else
13599: LD_EXP 70
13603: PPUSH
13604: LD_STRING D16-Kov-1a
13606: PPUSH
13607: CALL_OW 88
13611: GO 13625
// Say ( Kovalyuk , D16-Kov-1 ) ;
13613: LD_EXP 70
13617: PPUSH
13618: LD_STRING D16-Kov-1
13620: PPUSH
13621: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13625: LD_EXP 62
13629: PPUSH
13630: LD_STRING D16-Bur-1
13632: PPUSH
13633: CALL_OW 88
// if IsOK ( Gnyevko ) then
13637: LD_EXP 63
13641: PPUSH
13642: CALL_OW 302
13646: IFFALSE 13660
// Say ( Gnyevko , D16-Gny-1 ) ;
13648: LD_EXP 63
13652: PPUSH
13653: LD_STRING D16-Gny-1
13655: PPUSH
13656: CALL_OW 88
// end ; DialogueOff ;
13660: CALL_OW 7
// if raportForPlatonov = 3 then
13664: LD_EXP 39
13668: PUSH
13669: LD_INT 3
13671: EQUAL
13672: IFFALSE 13684
// raportForPlatonov = 1 else
13674: LD_ADDR_EXP 39
13678: PUSH
13679: LD_INT 1
13681: ST_TO_ADDR
13682: GO 13692
// raportForPlatonov = 2 ;
13684: LD_ADDR_EXP 39
13688: PUSH
13689: LD_INT 2
13691: ST_TO_ADDR
// exit ;
13692: POP
13693: POP
13694: GO 13700
// end ; end ; end ;
13696: GO 13292
13698: POP
13699: POP
// end ;
13700: PPOPN 1
13702: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13703: LD_EXP 32
13707: NOT
13708: PUSH
13709: LD_EXP 83
13713: AND
13714: PUSH
13715: LD_EXP 20
13719: AND
13720: PUSH
13721: LD_EXP 70
13725: PPUSH
13726: CALL_OW 302
13730: PUSH
13731: LD_EXP 63
13735: PPUSH
13736: CALL_OW 302
13740: OR
13741: AND
13742: IFFALSE 13930
13744: GO 13746
13746: DISABLE
13747: LD_INT 0
13749: PPUSH
// begin enable ;
13750: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13751: LD_ADDR_VAR 0 1
13755: PUSH
13756: LD_INT 22
13758: PUSH
13759: LD_INT 3
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 2
13768: PUSH
13769: LD_INT 21
13771: PUSH
13772: LD_INT 1
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 2
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: FOR_IN
13804: IFFALSE 13928
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 320
13815: PUSH
13816: LD_EXP 83
13820: PUSH
13821: LD_INT 1
13823: ARRAY
13824: EQUAL
13825: PUSH
13826: LD_VAR 0 1
13830: PPUSH
13831: CALL_OW 320
13835: PUSH
13836: LD_EXP 83
13840: PUSH
13841: LD_INT 2
13843: ARRAY
13844: EQUAL
13845: OR
13846: IFFALSE 13926
// begin dialogAttackRightBunkers = true ;
13848: LD_ADDR_EXP 32
13852: PUSH
13853: LD_INT 1
13855: ST_TO_ADDR
// DialogueOn ;
13856: CALL_OW 6
// if IsOK ( Gnyevko ) then
13860: LD_EXP 63
13864: PPUSH
13865: CALL_OW 302
13869: IFFALSE 13883
// Say ( Gnyevko , D16A-Gny-1 ) ;
13871: LD_EXP 63
13875: PPUSH
13876: LD_STRING D16A-Gny-1
13878: PPUSH
13879: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13883: LD_EXP 70
13887: PPUSH
13888: CALL_OW 302
13892: IFFALSE 13906
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13894: LD_EXP 70
13898: PPUSH
13899: LD_STRING D16A-Kov-1
13901: PPUSH
13902: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13906: LD_EXP 62
13910: PPUSH
13911: LD_STRING D16A-Bur-1
13913: PPUSH
13914: CALL_OW 88
// DialogueOff ;
13918: CALL_OW 7
// exit ;
13922: POP
13923: POP
13924: GO 13930
// end ; end ;
13926: GO 13803
13928: POP
13929: POP
// end ;
13930: PPOPN 1
13932: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
13933: LD_INT 18
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 3
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: EMPTY
13947: LIST
13948: PPUSH
13949: CALL_OW 70
13953: PUSH
13954: LD_EXP 29
13958: NOT
13959: AND
13960: IFFALSE 14343
13962: GO 13964
13964: DISABLE
13965: LD_INT 0
13967: PPUSH
// begin sawLeftBunker = true ;
13968: LD_ADDR_EXP 29
13972: PUSH
13973: LD_INT 1
13975: ST_TO_ADDR
// if playerGetSupport then
13976: LD_EXP 34
13980: IFFALSE 13999
// decsToChoose = [ 1 , 3 ] else
13982: LD_ADDR_VAR 0 1
13986: PUSH
13987: LD_INT 1
13989: PUSH
13990: LD_INT 3
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
13997: GO 14018
// decsToChoose = [ 1 , 2 , 3 ] ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: LD_INT 2
14009: PUSH
14010: LD_INT 3
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14018: LD_STRING QAttackBw
14020: PPUSH
14021: LD_VAR 0 1
14025: PPUSH
14026: CALL_OW 98
14030: PUSH
14031: LD_INT 1
14033: DOUBLE
14034: EQUAL
14035: IFTRUE 14039
14037: GO 14132
14039: POP
// begin DialogueOn ;
14040: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14044: LD_EXP 62
14048: PPUSH
14049: LD_STRING D17-Bur-1
14051: PPUSH
14052: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14056: LD_EXP 76
14060: PPUSH
14061: LD_STRING D17-Pla-1
14063: PPUSH
14064: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14068: LD_EXP 62
14072: PPUSH
14073: LD_STRING D17-Bur-2
14075: PPUSH
14076: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14080: LD_EXP 76
14084: PPUSH
14085: LD_STRING D17-Pla-2
14087: PPUSH
14088: CALL_OW 94
// DialogueOff ;
14092: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14096: LD_EXP 42
14100: PUSH
14101: LD_INT 2
14103: PUSH
14104: LD_INT 3
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: IN
14111: NOT
14112: IFFALSE 14130
// begin initiative = 1 ;
14114: LD_ADDR_EXP 42
14118: PUSH
14119: LD_INT 1
14121: ST_TO_ADDR
// platonovOpinion = 2 ;
14122: LD_ADDR_EXP 5
14126: PUSH
14127: LD_INT 2
14129: ST_TO_ADDR
// end ; end ; 2 :
14130: GO 14273
14132: LD_INT 2
14134: DOUBLE
14135: EQUAL
14136: IFTRUE 14140
14138: GO 14245
14140: POP
// begin DialogueOn ;
14141: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14145: LD_EXP 62
14149: PPUSH
14150: LD_STRING D18-Bur-1
14152: PPUSH
14153: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14157: LD_EXP 76
14161: PPUSH
14162: LD_STRING D18-Pla-1
14164: PPUSH
14165: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14169: LD_EXP 62
14173: PPUSH
14174: LD_STRING D18-Bur-2
14176: PPUSH
14177: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14181: LD_EXP 76
14185: PPUSH
14186: LD_STRING D18-Pla-2
14188: PPUSH
14189: CALL_OW 94
// DialogueOff ;
14193: CALL_OW 7
// playerGetSupport = true ;
14197: LD_ADDR_EXP 34
14201: PUSH
14202: LD_INT 1
14204: ST_TO_ADDR
// medalForGetSupport = false ;
14205: LD_ADDR_EXP 40
14209: PUSH
14210: LD_INT 0
14212: ST_TO_ADDR
// PlatonovSendSupport ;
14213: CALL 6559 0 0
// if initiative <> 3 then
14217: LD_EXP 42
14221: PUSH
14222: LD_INT 3
14224: NONEQUAL
14225: IFFALSE 14243
// begin initiative = 1 ;
14227: LD_ADDR_EXP 42
14231: PUSH
14232: LD_INT 1
14234: ST_TO_ADDR
// platonovOpinion = 2 ;
14235: LD_ADDR_EXP 5
14239: PUSH
14240: LD_INT 2
14242: ST_TO_ADDR
// end ; end ; 3 :
14243: GO 14273
14245: LD_INT 3
14247: DOUBLE
14248: EQUAL
14249: IFTRUE 14253
14251: GO 14272
14253: POP
// begin initiative = 3 ;
14254: LD_ADDR_EXP 42
14258: PUSH
14259: LD_INT 3
14261: ST_TO_ADDR
// platonovOpinion = 0 ;
14262: LD_ADDR_EXP 5
14266: PUSH
14267: LD_INT 0
14269: ST_TO_ADDR
// end ; end ;
14270: GO 14273
14272: POP
// if IsOK ( Gnyevko ) then
14273: LD_EXP 63
14277: PPUSH
14278: CALL_OW 302
14282: IFFALSE 14308
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14284: LD_EXP 63
14288: PPUSH
14289: LD_STRING D19-Gny-1
14291: PPUSH
14292: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14296: LD_EXP 62
14300: PPUSH
14301: LD_STRING D19-Bur-1
14303: PPUSH
14304: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14308: LD_EXP 70
14312: PPUSH
14313: CALL_OW 302
14317: IFFALSE 14343
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14319: LD_EXP 70
14323: PPUSH
14324: LD_STRING D19-Kov-1
14326: PPUSH
14327: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14331: LD_EXP 62
14335: PPUSH
14336: LD_STRING D19-Bur-2
14338: PPUSH
14339: CALL_OW 88
// end ; end ;
14343: PPOPN 1
14345: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14346: LD_EXP 31
14350: NOT
14351: PUSH
14352: LD_EXP 82
14356: AND
14357: PUSH
14358: LD_EXP 20
14362: AND
14363: PUSH
14364: LD_INT 18
14366: PPUSH
14367: LD_INT 22
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: PPUSH
14380: CALL_OW 70
14384: PUSH
14385: LD_INT 0
14387: EQUAL
14388: AND
14389: PUSH
14390: LD_EXP 70
14394: PPUSH
14395: CALL_OW 302
14399: PUSH
14400: LD_EXP 63
14404: PPUSH
14405: CALL_OW 302
14409: OR
14410: AND
14411: IFFALSE 14599
14413: GO 14415
14415: DISABLE
14416: LD_INT 0
14418: PPUSH
// begin enable ;
14419: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 3
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 2
14437: PUSH
14438: LD_INT 21
14440: PUSH
14441: LD_INT 1
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 21
14450: PUSH
14451: LD_INT 2
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 69
14471: PUSH
14472: FOR_IN
14473: IFFALSE 14597
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14475: LD_VAR 0 1
14479: PPUSH
14480: CALL_OW 320
14484: PUSH
14485: LD_EXP 82
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: EQUAL
14494: PUSH
14495: LD_VAR 0 1
14499: PPUSH
14500: CALL_OW 320
14504: PUSH
14505: LD_EXP 82
14509: PUSH
14510: LD_INT 2
14512: ARRAY
14513: EQUAL
14514: OR
14515: IFFALSE 14595
// begin dialogAttackLeftBunkers = true ;
14517: LD_ADDR_EXP 31
14521: PUSH
14522: LD_INT 1
14524: ST_TO_ADDR
// DialogueOn ;
14525: CALL_OW 6
// if IsOK ( Gnyevko ) then
14529: LD_EXP 63
14533: PPUSH
14534: CALL_OW 302
14538: IFFALSE 14552
// Say ( Gnyevko , D19A-Gny-1 ) ;
14540: LD_EXP 63
14544: PPUSH
14545: LD_STRING D19A-Gny-1
14547: PPUSH
14548: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14552: LD_EXP 70
14556: PPUSH
14557: CALL_OW 302
14561: IFFALSE 14575
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14563: LD_EXP 70
14567: PPUSH
14568: LD_STRING D19A-Kov-1
14570: PPUSH
14571: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14575: LD_EXP 62
14579: PPUSH
14580: LD_STRING D16A-Bur-1
14582: PPUSH
14583: CALL_OW 88
// DialogueOff ;
14587: CALL_OW 7
// exit ;
14591: POP
14592: POP
14593: GO 14599
// end ; end ;
14595: GO 14472
14597: POP
14598: POP
// end ;
14599: PPOPN 1
14601: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14602: LD_EXP 82
14606: NOT
14607: PUSH
14608: LD_INT 17
14610: PPUSH
14611: LD_INT 22
14613: PUSH
14614: LD_INT 1
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 21
14623: PUSH
14624: LD_INT 3
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 30
14633: PUSH
14634: LD_INT 31
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 50
14643: PUSH
14644: EMPTY
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PPUSH
14653: CALL_OW 70
14657: PUSH
14658: LD_INT 0
14660: EQUAL
14661: OR
14662: PUSH
14663: LD_EXP 20
14667: AND
14668: IFFALSE 14719
14670: GO 14672
14672: DISABLE
// begin leftBunkers = [ ] ;
14673: LD_ADDR_EXP 82
14677: PUSH
14678: EMPTY
14679: ST_TO_ADDR
// DialogueOn ;
14680: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14684: LD_EXP 62
14688: PPUSH
14689: LD_STRING D20-Bur-1
14691: PPUSH
14692: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14696: LD_EXP 76
14700: PPUSH
14701: LD_STRING D20-Pla-1
14703: PPUSH
14704: CALL_OW 88
// DialogueOff ;
14708: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14712: LD_STRING M8
14714: PPUSH
14715: CALL_OW 337
// end ;
14719: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14720: LD_EXP 83
14724: NOT
14725: PUSH
14726: LD_INT 16
14728: PPUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 1
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: LD_INT 21
14741: PUSH
14742: LD_INT 3
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PUSH
14749: LD_INT 30
14751: PUSH
14752: LD_INT 31
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: PPUSH
14771: CALL_OW 70
14775: PUSH
14776: LD_INT 0
14778: EQUAL
14779: OR
14780: PUSH
14781: LD_EXP 20
14785: AND
14786: IFFALSE 14830
14788: GO 14790
14790: DISABLE
// begin rightBunkers = [ ] ;
14791: LD_ADDR_EXP 83
14795: PUSH
14796: EMPTY
14797: ST_TO_ADDR
// DialogueOn ;
14798: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14802: LD_EXP 62
14806: PPUSH
14807: LD_STRING D20a-Bur-1
14809: PPUSH
14810: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14814: LD_EXP 76
14818: PPUSH
14819: LD_STRING D20a-Pla-1
14821: PPUSH
14822: CALL_OW 88
// DialogueOff ;
14826: CALL_OW 7
// end ;
14830: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14831: LD_EXP 35
14835: NOT
14836: PUSH
14837: LD_EXP 73
14841: AND
14842: IFFALSE 15337
14844: GO 14846
14846: DISABLE
14847: LD_INT 0
14849: PPUSH
14850: PPUSH
14851: PPUSH
// begin enable ;
14852: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14853: LD_ADDR_VAR 0 1
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_INT 3
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 2
14870: PUSH
14871: LD_INT 21
14873: PUSH
14874: LD_INT 1
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 21
14883: PUSH
14884: LD_INT 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: EMPTY
14897: LIST
14898: LIST
14899: PPUSH
14900: CALL_OW 69
14904: PUSH
14905: FOR_IN
14906: IFFALSE 15335
// for trapUnit in trapTeam do
14908: LD_ADDR_VAR 0 2
14912: PUSH
14913: LD_EXP 81
14917: PUSH
14918: FOR_IN
14919: IFFALSE 15331
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
14921: LD_VAR 0 1
14925: PPUSH
14926: LD_VAR 0 2
14930: PPUSH
14931: CALL_OW 296
14935: PUSH
14936: LD_INT 16
14938: LESS
14939: IFFALSE 15329
// begin saveBelkovDecision = true ;
14941: LD_ADDR_EXP 35
14945: PUSH
14946: LD_INT 1
14948: ST_TO_ADDR
// if playerGetSupport then
14949: LD_EXP 34
14953: IFFALSE 14972
// decsToChoose = [ 1 , 3 ] else
14955: LD_ADDR_VAR 0 3
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
14970: GO 14991
// decsToChoose = [ 1 , 2 , 3 ] ;
14972: LD_ADDR_VAR 0 3
14976: PUSH
14977: LD_INT 1
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: LIST
14990: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
14991: LD_STRING QAttackAm
14993: PPUSH
14994: LD_VAR 0 3
14998: PPUSH
14999: CALL_OW 98
15003: PUSH
15004: LD_INT 1
15006: DOUBLE
15007: EQUAL
15008: IFTRUE 15012
15010: GO 15081
15012: POP
// begin DialogueOn ;
15013: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15017: LD_EXP 62
15021: PPUSH
15022: LD_STRING D21-Bur-1
15024: PPUSH
15025: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15029: LD_EXP 76
15033: PPUSH
15034: LD_STRING D21-Pla-1
15036: PPUSH
15037: CALL_OW 94
// DialogueOff ;
15041: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15045: LD_EXP 42
15049: PUSH
15050: LD_INT 2
15052: PUSH
15053: LD_INT 3
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: IN
15060: NOT
15061: IFFALSE 15079
// begin initiative = 1 ;
15063: LD_ADDR_EXP 42
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// platonovOpinion = 2 ;
15071: LD_ADDR_EXP 5
15075: PUSH
15076: LD_INT 2
15078: ST_TO_ADDR
// end ; end ; 2 :
15079: GO 15273
15081: LD_INT 2
15083: DOUBLE
15084: EQUAL
15085: IFTRUE 15089
15087: GO 15245
15089: POP
// begin DialogueOn ;
15090: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15094: LD_EXP 62
15098: PPUSH
15099: LD_STRING D22-Bur-1
15101: PPUSH
15102: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15106: LD_EXP 34
15110: PUSH
15111: LD_EXP 82
15115: PUSH
15116: LD_INT 0
15118: EQUAL
15119: PUSH
15120: LD_EXP 83
15124: PUSH
15125: LD_INT 0
15127: EQUAL
15128: OR
15129: AND
15130: IFFALSE 15144
// Say ( Platonov , D22-Pla-1b ) ;
15132: LD_EXP 76
15136: PPUSH
15137: LD_STRING D22-Pla-1b
15139: PPUSH
15140: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15144: LD_EXP 34
15148: PUSH
15149: LD_EXP 82
15153: PUSH
15154: LD_EXP 83
15158: OR
15159: AND
15160: IFFALSE 15174
// Say ( Platonov , D22-Pla-1a ) ;
15162: LD_EXP 76
15166: PPUSH
15167: LD_STRING D22-Pla-1a
15169: PPUSH
15170: CALL_OW 88
// if not playerGetSupport then
15174: LD_EXP 34
15178: NOT
15179: IFFALSE 15213
// begin Say ( Platonov , D22-Pla-1 ) ;
15181: LD_EXP 76
15185: PPUSH
15186: LD_STRING D22-Pla-1
15188: PPUSH
15189: CALL_OW 88
// playerGetSupport = true ;
15193: LD_ADDR_EXP 34
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// medalForGetSupport = false ;
15201: LD_ADDR_EXP 40
15205: PUSH
15206: LD_INT 0
15208: ST_TO_ADDR
// PlatonovSendSupport ;
15209: CALL 6559 0 0
// end ; DialogueOff ;
15213: CALL_OW 7
// if initiative <> 3 then
15217: LD_EXP 42
15221: PUSH
15222: LD_INT 3
15224: NONEQUAL
15225: IFFALSE 15243
// begin initiative = 2 ;
15227: LD_ADDR_EXP 42
15231: PUSH
15232: LD_INT 2
15234: ST_TO_ADDR
// platonovOpinion = 1 ;
15235: LD_ADDR_EXP 5
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// end ; end ; 3 :
15243: GO 15273
15245: LD_INT 3
15247: DOUBLE
15248: EQUAL
15249: IFTRUE 15253
15251: GO 15272
15253: POP
// begin initiative = 3 ;
15254: LD_ADDR_EXP 42
15258: PUSH
15259: LD_INT 3
15261: ST_TO_ADDR
// platonovOpinion = 0 ;
15262: LD_ADDR_EXP 5
15266: PUSH
15267: LD_INT 0
15269: ST_TO_ADDR
// end ; end ;
15270: GO 15273
15272: POP
// if IsOK ( Gnyevko ) then
15273: LD_EXP 63
15277: PPUSH
15278: CALL_OW 302
15282: IFFALSE 15308
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15284: LD_EXP 63
15288: PPUSH
15289: LD_STRING D23-Gny-1
15291: PPUSH
15292: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15296: LD_EXP 62
15300: PPUSH
15301: LD_STRING D23-Bur-1
15303: PPUSH
15304: CALL_OW 88
// end ; saveBelkovObjective = true ;
15308: LD_ADDR_EXP 36
15312: PUSH
15313: LD_INT 1
15315: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15316: LD_STRING M9
15318: PPUSH
15319: CALL_OW 337
// exit ;
15323: POP
15324: POP
15325: POP
15326: POP
15327: GO 15337
// end ;
15329: GO 14918
15331: POP
15332: POP
15333: GO 14905
15335: POP
15336: POP
// end ;
15337: PPOPN 3
15339: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15340: LD_EXP 20
15344: PUSH
15345: LD_EXP 81
15349: NOT
15350: AND
15351: PUSH
15352: LD_EXP 37
15356: NOT
15357: AND
15358: IFFALSE 15398
15360: GO 15362
15362: DISABLE
// begin belkovSaved = true ;
15363: LD_ADDR_EXP 37
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// activateBelkovAI = false ;
15371: LD_ADDR_EXP 28
15375: PUSH
15376: LD_INT 0
15378: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15379: LD_EXP 73
15383: PPUSH
15384: LD_INT 3
15386: PPUSH
15387: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15391: LD_STRING M9a
15393: PPUSH
15394: CALL_OW 337
// end ;
15398: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15399: LD_EXP 35
15403: PUSH
15404: LD_EXP 64
15408: PPUSH
15409: CALL_OW 301
15413: PUSH
15414: LD_EXP 68
15418: PPUSH
15419: CALL_OW 301
15423: PUSH
15424: LD_EXP 64
15428: PPUSH
15429: CALL_OW 255
15433: PUSH
15434: LD_INT 6
15436: EQUAL
15437: PUSH
15438: LD_EXP 68
15442: PPUSH
15443: CALL_OW 255
15447: PUSH
15448: LD_INT 6
15450: EQUAL
15451: OR
15452: AND
15453: OR
15454: AND
15455: IFFALSE 15475
15457: GO 15459
15459: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15460: LD_STRING M9a
15462: PPUSH
15463: CALL_OW 337
// saveBelkovObjective = false ;
15467: LD_ADDR_EXP 36
15471: PUSH
15472: LD_INT 0
15474: ST_TO_ADDR
// end ;
15475: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15476: LD_EXP 37
15480: PUSH
15481: LD_EXP 62
15485: PPUSH
15486: LD_EXP 64
15490: PPUSH
15491: CALL_OW 296
15495: PUSH
15496: LD_INT 14
15498: LESS
15499: PUSH
15500: LD_EXP 6
15504: AND
15505: PUSH
15506: LD_EXP 62
15510: PPUSH
15511: LD_EXP 68
15515: PPUSH
15516: CALL_OW 296
15520: PUSH
15521: LD_INT 14
15523: LESS
15524: PUSH
15525: LD_EXP 6
15529: NOT
15530: AND
15531: OR
15532: AND
15533: IFFALSE 15829
15535: GO 15537
15537: DISABLE
// begin InGameOn ;
15538: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15542: LD_EXP 64
15546: PPUSH
15547: CALL_OW 302
15551: PUSH
15552: LD_EXP 6
15556: AND
15557: IFFALSE 15653
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15559: LD_EXP 62
15563: PUSH
15564: LD_EXP 64
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PPUSH
15573: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15577: LD_EXP 62
15581: PPUSH
15582: LD_EXP 64
15586: PPUSH
15587: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15591: LD_EXP 64
15595: PPUSH
15596: LD_EXP 62
15600: PPUSH
15601: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15605: LD_EXP 64
15609: PPUSH
15610: LD_STRING D24-Bel-1
15612: PPUSH
15613: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15617: LD_EXP 62
15621: PPUSH
15622: LD_STRING D24-Bur-1
15624: PPUSH
15625: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15629: LD_EXP 64
15633: PPUSH
15634: LD_STRING D24-Bel-2
15636: PPUSH
15637: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15641: LD_EXP 62
15645: PPUSH
15646: LD_STRING D24-Bur-2
15648: PPUSH
15649: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15653: LD_EXP 68
15657: PPUSH
15658: CALL_OW 302
15662: PUSH
15663: LD_EXP 6
15667: NOT
15668: AND
15669: IFFALSE 15777
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15671: LD_EXP 62
15675: PUSH
15676: LD_EXP 68
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15689: LD_EXP 62
15693: PPUSH
15694: LD_EXP 68
15698: PPUSH
15699: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15703: LD_EXP 68
15707: PPUSH
15708: LD_EXP 62
15712: PPUSH
15713: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15717: LD_EXP 68
15721: PPUSH
15722: LD_STRING D24-Bel-1
15724: PPUSH
15725: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15729: LD_EXP 62
15733: PPUSH
15734: LD_STRING D24-Bur-1
15736: PPUSH
15737: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15741: LD_EXP 62
15745: PPUSH
15746: LD_STRING D24-Bur-1a
15748: PPUSH
15749: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15753: LD_EXP 68
15757: PPUSH
15758: LD_STRING D24-Bel-2
15760: PPUSH
15761: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15765: LD_EXP 62
15769: PPUSH
15770: LD_STRING D24-Bur-2
15772: PPUSH
15773: CALL_OW 88
// end ; if captureBelkovVehicle then
15777: LD_EXP 38
15781: IFFALSE 15795
// Say ( Burlak , D24-Bur-2a ) ;
15783: LD_EXP 62
15787: PPUSH
15788: LD_STRING D24-Bur-2a
15790: PPUSH
15791: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15795: LD_EXP 76
15799: PPUSH
15800: LD_STRING D24-Pla-2
15802: PPUSH
15803: CALL_OW 94
// if leftBunkers then
15807: LD_EXP 82
15811: IFFALSE 15825
// SayRadio ( Platonov , D24-Pla-2a ) ;
15813: LD_EXP 76
15817: PPUSH
15818: LD_STRING D24-Pla-2a
15820: PPUSH
15821: CALL_OW 94
// InGameOff ;
15825: CALL_OW 9
// end ;
15829: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15830: LD_INT 22
15832: PPUSH
15833: LD_INT 22
15835: PUSH
15836: LD_INT 3
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 21
15845: PUSH
15846: LD_INT 2
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PPUSH
15857: CALL_OW 70
15861: PUSH
15862: LD_EXP 70
15866: PPUSH
15867: CALL_OW 302
15871: PUSH
15872: LD_EXP 63
15876: PPUSH
15877: CALL_OW 302
15881: OR
15882: AND
15883: IFFALSE 15966
15885: GO 15887
15887: DISABLE
// begin DialogueOn ;
15888: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15892: LD_EXP 62
15896: PPUSH
15897: LD_STRING D26-Bur-1
15899: PPUSH
15900: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15904: LD_EXP 70
15908: PPUSH
15909: CALL_OW 302
15913: IFFALSE 15927
// Say ( Kovalyuk , D26-Kov-1 ) ;
15915: LD_EXP 70
15919: PPUSH
15920: LD_STRING D26-Kov-1
15922: PPUSH
15923: CALL_OW 88
// if IsOk ( Gnyevko ) then
15927: LD_EXP 63
15931: PPUSH
15932: CALL_OW 302
15936: IFFALSE 15950
// Say ( Gnyevko , D26-Gny-1 ) ;
15938: LD_EXP 63
15942: PPUSH
15943: LD_STRING D26-Gny-1
15945: PPUSH
15946: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
15950: LD_EXP 62
15954: PPUSH
15955: LD_STRING D26-Bur-2
15957: PPUSH
15958: CALL_OW 88
// DialogueOff ;
15962: CALL_OW 7
// end ;
15966: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
15967: LD_EXP 20
15971: PUSH
15972: LD_EXP 62
15976: PPUSH
15977: LD_INT 8
15979: PPUSH
15980: CALL_OW 308
15984: NOT
15985: PUSH
15986: LD_EXP 62
15990: PPUSH
15991: CALL_OW 310
15995: PPUSH
15996: CALL_OW 310
16000: PPUSH
16001: LD_INT 8
16003: PPUSH
16004: CALL_OW 308
16008: NOT
16009: AND
16010: AND
16011: PUSH
16012: LD_EXP 39
16016: PUSH
16017: LD_INT 1
16019: NEG
16020: EQUAL
16021: AND
16022: IFFALSE 16036
16024: GO 16026
16026: DISABLE
// begin enable ;
16027: ENABLE
// raportForPlatonov = 0 ;
16028: LD_ADDR_EXP 39
16032: PUSH
16033: LD_INT 0
16035: ST_TO_ADDR
// end ;
16036: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16037: LD_EXP 20
16041: PUSH
16042: LD_EXP 39
16046: PUSH
16047: LD_INT 0
16049: GREATEREQUAL
16050: AND
16051: PUSH
16052: LD_EXP 16
16056: NOT
16057: AND
16058: PUSH
16059: LD_EXP 62
16063: PPUSH
16064: LD_INT 8
16066: PPUSH
16067: CALL_OW 308
16071: PUSH
16072: LD_EXP 62
16076: PPUSH
16077: CALL_OW 310
16081: PPUSH
16082: CALL_OW 310
16086: PPUSH
16087: LD_INT 8
16089: PPUSH
16090: CALL_OW 308
16094: PUSH
16095: LD_EXP 16
16099: NOT
16100: AND
16101: OR
16102: AND
16103: IFFALSE 16394
16105: GO 16107
16107: DISABLE
// begin enable ;
16108: ENABLE
// DialogueOn ;
16109: CALL_OW 6
// case raportForPlatonov of 0 :
16113: LD_EXP 39
16117: PUSH
16118: LD_INT 0
16120: DOUBLE
16121: EQUAL
16122: IFTRUE 16126
16124: GO 16153
16126: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16127: LD_EXP 76
16131: PPUSH
16132: LD_STRING D25a-Pla-1
16134: PPUSH
16135: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16139: LD_EXP 62
16143: PPUSH
16144: LD_STRING D25a-Bur-1
16146: PPUSH
16147: CALL_OW 88
// end ; 1 :
16151: GO 16369
16153: LD_INT 1
16155: DOUBLE
16156: EQUAL
16157: IFTRUE 16161
16159: GO 16224
16161: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16162: LD_EXP 76
16166: PPUSH
16167: LD_STRING D25-Pla-1
16169: PPUSH
16170: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16174: LD_EXP 62
16178: PPUSH
16179: LD_STRING D25-Bur-1
16181: PPUSH
16182: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16186: LD_EXP 62
16190: PPUSH
16191: LD_STRING D25b-Bur-1
16193: PPUSH
16194: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16198: LD_EXP 76
16202: PPUSH
16203: LD_STRING D25b-Pla-1
16205: PPUSH
16206: CALL_OW 88
// playerGetSupport = true ;
16210: LD_ADDR_EXP 34
16214: PUSH
16215: LD_INT 1
16217: ST_TO_ADDR
// PlatonovSendSupport ;
16218: CALL 6559 0 0
// end ; 2 :
16222: GO 16369
16224: LD_INT 2
16226: DOUBLE
16227: EQUAL
16228: IFTRUE 16232
16230: GO 16278
16232: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16233: LD_EXP 76
16237: PPUSH
16238: LD_STRING D25-Pla-1
16240: PPUSH
16241: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16245: LD_EXP 62
16249: PPUSH
16250: LD_STRING D25-Bur-1a
16252: PPUSH
16253: CALL_OW 88
// if not sawLeftBunker then
16257: LD_EXP 29
16261: NOT
16262: IFFALSE 16276
// Say ( Platonov , D25c-Pla-1 ) ;
16264: LD_EXP 76
16268: PPUSH
16269: LD_STRING D25c-Pla-1
16271: PPUSH
16272: CALL_OW 88
// end ; 3 :
16276: GO 16369
16278: LD_INT 3
16280: DOUBLE
16281: EQUAL
16282: IFTRUE 16286
16284: GO 16368
16286: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16287: LD_EXP 76
16291: PPUSH
16292: LD_STRING D25-Pla-1
16294: PPUSH
16295: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16299: LD_EXP 62
16303: PPUSH
16304: LD_STRING D25a-Bur-1b
16306: PPUSH
16307: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16311: LD_EXP 62
16315: PPUSH
16316: LD_STRING D25b-Bur-1
16318: PPUSH
16319: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16323: LD_EXP 76
16327: PPUSH
16328: LD_STRING D25b-Pla-1
16330: PPUSH
16331: CALL_OW 88
// playerGetSupport = true ;
16335: LD_ADDR_EXP 34
16339: PUSH
16340: LD_INT 1
16342: ST_TO_ADDR
// PlatonovSendSupport ;
16343: CALL 6559 0 0
// if not sawRightBunker then
16347: LD_EXP 30
16351: NOT
16352: IFFALSE 16366
// Say ( Platonov , D25c-Pla-1 ) ;
16354: LD_EXP 76
16358: PPUSH
16359: LD_STRING D25c-Pla-1
16361: PPUSH
16362: CALL_OW 88
// end ; end ;
16366: GO 16369
16368: POP
// raportForPlatonov = - 1 ;
16369: LD_ADDR_EXP 39
16373: PUSH
16374: LD_INT 1
16376: NEG
16377: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16378: LD_EXP 76
16382: PPUSH
16383: LD_STRING D25c-Pla-1a
16385: PPUSH
16386: CALL_OW 88
// DialogueOff ;
16390: CALL_OW 7
// end ;
16394: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16395: LD_INT 19
16397: PPUSH
16398: LD_INT 22
16400: PUSH
16401: LD_INT 3
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PUSH
16408: EMPTY
16409: LIST
16410: PPUSH
16411: CALL_OW 70
16415: PUSH
16416: LD_INT 0
16418: GREATER
16419: IFFALSE 16439
16421: GO 16423
16423: DISABLE
// begin northMapExplored = true ;
16424: LD_ADDR_EXP 41
16428: PUSH
16429: LD_INT 1
16431: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16432: LD_STRING M10
16434: PPUSH
16435: CALL_OW 337
// end ;
16439: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16440: LD_EXP 82
16444: NOT
16445: PUSH
16446: LD_EXP 41
16450: AND
16451: PUSH
16452: LD_EXP 37
16456: PUSH
16457: LD_EXP 36
16461: NOT
16462: OR
16463: AND
16464: IFFALSE 16484
16466: GO 16468
16468: DISABLE
// begin backToBeria2 = true ;
16469: LD_ADDR_EXP 16
16473: PUSH
16474: LD_INT 1
16476: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16477: LD_STRING M10a
16479: PPUSH
16480: CALL_OW 337
// end ;
16484: END
// every 0 0$1 do
16485: GO 16487
16487: DISABLE
// begin enable ;
16488: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16489: LD_EXP 67
16493: PUSH
16494: LD_EXP 76
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PPUSH
16503: LD_INT 1000
16505: PPUSH
16506: CALL_OW 234
// end ; end_of_file
16510: END
// export function CreateNature ; var i , un ; begin
16511: LD_INT 0
16513: PPUSH
16514: PPUSH
16515: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16516: LD_ADDR_VAR 0 2
16520: PUSH
16521: DOUBLE
16522: LD_INT 1
16524: DEC
16525: ST_TO_ADDR
16526: LD_EXP 45
16530: PUSH
16531: LD_INT 1
16533: ARRAY
16534: PUSH
16535: FOR_TO
16536: IFFALSE 16646
// begin uc_side = 0 ;
16538: LD_ADDR_OWVAR 20
16542: PUSH
16543: LD_INT 0
16545: ST_TO_ADDR
// uc_nation = nation_nature ;
16546: LD_ADDR_OWVAR 21
16550: PUSH
16551: LD_INT 0
16553: ST_TO_ADDR
// hc_class = class_apeman ;
16554: LD_ADDR_OWVAR 28
16558: PUSH
16559: LD_INT 12
16561: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16562: LD_ADDR_OWVAR 31
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_INT 1
16574: ARRAY
16575: PUSH
16576: LD_EXP 46
16580: PUSH
16581: LD_INT 2
16583: ARRAY
16584: PUSH
16585: LD_EXP 46
16589: PUSH
16590: LD_INT 3
16592: ARRAY
16593: PUSH
16594: LD_EXP 46
16598: PUSH
16599: LD_INT 4
16601: ARRAY
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16609: LD_ADDR_OWVAR 35
16613: PUSH
16614: LD_EXP 47
16618: ST_TO_ADDR
// un = CreateHuman ;
16619: LD_ADDR_VAR 0 3
16623: PUSH
16624: CALL_OW 44
16628: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16629: LD_VAR 0 3
16633: PPUSH
16634: LD_INT 21
16636: PPUSH
16637: LD_INT 0
16639: PPUSH
16640: CALL_OW 49
// end ;
16644: GO 16535
16646: POP
16647: POP
// for i := 1 to animalsAmount [ 2 ] do
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: DOUBLE
16654: LD_INT 1
16656: DEC
16657: ST_TO_ADDR
16658: LD_EXP 45
16662: PUSH
16663: LD_INT 2
16665: ARRAY
16666: PUSH
16667: FOR_TO
16668: IFFALSE 16778
// begin uc_side = 0 ;
16670: LD_ADDR_OWVAR 20
16674: PUSH
16675: LD_INT 0
16677: ST_TO_ADDR
// uc_nation = nation_nature ;
16678: LD_ADDR_OWVAR 21
16682: PUSH
16683: LD_INT 0
16685: ST_TO_ADDR
// hc_class = class_phororhacos ;
16686: LD_ADDR_OWVAR 28
16690: PUSH
16691: LD_INT 18
16693: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16694: LD_ADDR_OWVAR 31
16698: PUSH
16699: LD_EXP 46
16703: PUSH
16704: LD_INT 1
16706: ARRAY
16707: PUSH
16708: LD_EXP 46
16712: PUSH
16713: LD_INT 2
16715: ARRAY
16716: PUSH
16717: LD_EXP 46
16721: PUSH
16722: LD_INT 3
16724: ARRAY
16725: PUSH
16726: LD_EXP 46
16730: PUSH
16731: LD_INT 4
16733: ARRAY
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16741: LD_ADDR_OWVAR 35
16745: PUSH
16746: LD_EXP 47
16750: ST_TO_ADDR
// un = CreateHuman ;
16751: LD_ADDR_VAR 0 3
16755: PUSH
16756: CALL_OW 44
16760: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16761: LD_VAR 0 3
16765: PPUSH
16766: LD_INT 21
16768: PPUSH
16769: LD_INT 0
16771: PPUSH
16772: CALL_OW 49
// end ;
16776: GO 16667
16778: POP
16779: POP
// for i := 1 to animalsAmount [ 3 ] do
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: DOUBLE
16786: LD_INT 1
16788: DEC
16789: ST_TO_ADDR
16790: LD_EXP 45
16794: PUSH
16795: LD_INT 3
16797: ARRAY
16798: PUSH
16799: FOR_TO
16800: IFFALSE 16910
// begin uc_side = 0 ;
16802: LD_ADDR_OWVAR 20
16806: PUSH
16807: LD_INT 0
16809: ST_TO_ADDR
// uc_nation = nation_nature ;
16810: LD_ADDR_OWVAR 21
16814: PUSH
16815: LD_INT 0
16817: ST_TO_ADDR
// hc_class = class_tiger ;
16818: LD_ADDR_OWVAR 28
16822: PUSH
16823: LD_INT 14
16825: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16826: LD_ADDR_OWVAR 31
16830: PUSH
16831: LD_EXP 46
16835: PUSH
16836: LD_INT 1
16838: ARRAY
16839: PUSH
16840: LD_EXP 46
16844: PUSH
16845: LD_INT 2
16847: ARRAY
16848: PUSH
16849: LD_EXP 46
16853: PUSH
16854: LD_INT 3
16856: ARRAY
16857: PUSH
16858: LD_EXP 46
16862: PUSH
16863: LD_INT 4
16865: ARRAY
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16873: LD_ADDR_OWVAR 35
16877: PUSH
16878: LD_EXP 47
16882: ST_TO_ADDR
// un = CreateHuman ;
16883: LD_ADDR_VAR 0 3
16887: PUSH
16888: CALL_OW 44
16892: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16893: LD_VAR 0 3
16897: PPUSH
16898: LD_INT 21
16900: PPUSH
16901: LD_INT 0
16903: PPUSH
16904: CALL_OW 49
// end ;
16908: GO 16799
16910: POP
16911: POP
// for i := 1 to animalsAmount [ 4 ] do
16912: LD_ADDR_VAR 0 2
16916: PUSH
16917: DOUBLE
16918: LD_INT 1
16920: DEC
16921: ST_TO_ADDR
16922: LD_EXP 45
16926: PUSH
16927: LD_INT 4
16929: ARRAY
16930: PUSH
16931: FOR_TO
16932: IFFALSE 17042
// begin uc_side = 0 ;
16934: LD_ADDR_OWVAR 20
16938: PUSH
16939: LD_INT 0
16941: ST_TO_ADDR
// uc_nation = nation_nature ;
16942: LD_ADDR_OWVAR 21
16946: PUSH
16947: LD_INT 0
16949: ST_TO_ADDR
// hc_class = 21 ;
16950: LD_ADDR_OWVAR 28
16954: PUSH
16955: LD_INT 21
16957: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16958: LD_ADDR_OWVAR 31
16962: PUSH
16963: LD_EXP 46
16967: PUSH
16968: LD_INT 1
16970: ARRAY
16971: PUSH
16972: LD_EXP 46
16976: PUSH
16977: LD_INT 2
16979: ARRAY
16980: PUSH
16981: LD_EXP 46
16985: PUSH
16986: LD_INT 3
16988: ARRAY
16989: PUSH
16990: LD_EXP 46
16994: PUSH
16995: LD_INT 4
16997: ARRAY
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17005: LD_ADDR_OWVAR 35
17009: PUSH
17010: LD_EXP 47
17014: ST_TO_ADDR
// un = CreateHuman ;
17015: LD_ADDR_VAR 0 3
17019: PUSH
17020: CALL_OW 44
17024: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17025: LD_VAR 0 3
17029: PPUSH
17030: LD_INT 21
17032: PPUSH
17033: LD_INT 0
17035: PPUSH
17036: CALL_OW 49
// end ;
17040: GO 16931
17042: POP
17043: POP
// end ; end_of_file
17044: LD_VAR 0 1
17048: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17049: LD_EXP 21
17053: IFFALSE 17282
17055: GO 17057
17057: DISABLE
17058: LD_INT 0
17060: PPUSH
17061: PPUSH
17062: PPUSH
17063: PPUSH
17064: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17065: LD_ADDR_VAR 0 4
17069: PUSH
17070: LD_INT 22
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: EMPTY
17077: LIST
17078: LIST
17079: PUSH
17080: LD_INT 21
17082: PUSH
17083: LD_INT 1
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 25
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: LIST
17104: PPUSH
17105: CALL_OW 69
17109: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17110: LD_INT 700
17112: PPUSH
17113: CALL_OW 67
// carryCratesEngs = 0 ;
17117: LD_ADDR_VAR 0 3
17121: PUSH
17122: LD_INT 0
17124: ST_TO_ADDR
// for unit in playerEngs do
17125: LD_ADDR_VAR 0 2
17129: PUSH
17130: LD_VAR 0 4
17134: PUSH
17135: FOR_IN
17136: IFFALSE 17164
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17138: LD_ADDR_VAR 0 3
17142: PUSH
17143: LD_VAR 0 3
17147: PUSH
17148: LD_VAR 0 2
17152: PPUSH
17153: LD_INT 1
17155: PPUSH
17156: CALL_OW 289
17160: PLUS
17161: ST_TO_ADDR
17162: GO 17135
17164: POP
17165: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17166: LD_INT 106
17168: PPUSH
17169: CALL_OW 274
17173: PPUSH
17174: LD_INT 1
17176: PPUSH
17177: CALL_OW 275
17181: PUSH
17182: LD_INT 50
17184: LESS
17185: PUSH
17186: LD_INT 8
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 287
17196: PUSH
17197: LD_INT 10
17199: MUL
17200: PUSH
17201: LD_INT 106
17203: PPUSH
17204: CALL_OW 274
17208: PPUSH
17209: LD_INT 1
17211: PPUSH
17212: CALL_OW 275
17216: PLUS
17217: PUSH
17218: LD_VAR 0 3
17222: PLUS
17223: PUSH
17224: LD_INT 50
17226: LESS
17227: AND
17228: IFFALSE 17240
// spawnNextCrates = true else
17230: LD_ADDR_VAR 0 5
17234: PUSH
17235: LD_INT 1
17237: ST_TO_ADDR
17238: GO 17248
// spawnNextCrates = false ;
17240: LD_ADDR_VAR 0 5
17244: PUSH
17245: LD_INT 0
17247: ST_TO_ADDR
// if spawnNextCrates then
17248: LD_VAR 0 5
17252: IFFALSE 17275
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17254: LD_INT 1
17256: PPUSH
17257: LD_INT 5
17259: PPUSH
17260: CALL_OW 12
17264: PPUSH
17265: LD_INT 26
17267: PPUSH
17268: LD_INT 1
17270: PPUSH
17271: CALL_OW 55
// until not spawnCrates ;
17275: LD_EXP 21
17279: NOT
17280: IFFALSE 17065
// end ; end_of_file
17282: PPOPN 5
17284: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 266
17294: PUSH
17295: LD_INT 6
17297: EQUAL
17298: PUSH
17299: LD_INT 22
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: PUSH
17309: LD_INT 30
17311: PUSH
17312: LD_INT 6
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PPUSH
17323: CALL_OW 69
17327: PUSH
17328: LD_INT 1
17330: GREATER
17331: AND
17332: PUSH
17333: LD_EXP 11
17337: NOT
17338: AND
17339: IFFALSE 17350
// Dial_StopConstructAgainSameBuilding ( building ) ;
17341: LD_VAR 0 1
17345: PPUSH
17346: CALL 9051 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17350: LD_VAR 0 1
17354: PPUSH
17355: CALL_OW 266
17359: PUSH
17360: LD_INT 2
17362: EQUAL
17363: PUSH
17364: LD_INT 22
17366: PUSH
17367: LD_INT 3
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 30
17376: PUSH
17377: LD_INT 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PPUSH
17388: CALL_OW 69
17392: PUSH
17393: LD_INT 1
17395: GREATER
17396: AND
17397: PUSH
17398: LD_EXP 11
17402: NOT
17403: AND
17404: IFFALSE 17415
// Dial_StopConstructAgainSameBuilding ( building ) ;
17406: LD_VAR 0 1
17410: PPUSH
17411: CALL 9051 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17415: LD_VAR 0 1
17419: PPUSH
17420: CALL_OW 255
17424: PUSH
17425: LD_INT 3
17427: EQUAL
17428: PUSH
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 266
17438: PUSH
17439: LD_INT 26
17441: PUSH
17442: LD_INT 4
17444: PUSH
17445: LD_INT 31
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: IN
17453: AND
17454: PUSH
17455: LD_VAR 0 1
17459: PPUSH
17460: LD_INT 8
17462: PPUSH
17463: CALL_OW 308
17467: AND
17468: IFFALSE 17479
// Dial_StopConstructAgainSameBuilding ( building ) ;
17470: LD_VAR 0 1
17474: PPUSH
17475: CALL 9051 0 1
// end ;
17479: PPOPN 2
17481: END
// on BuildingComplete ( building ) do var sold , platSold ;
17482: LD_INT 0
17484: PPUSH
17485: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17486: LD_VAR 0 1
17490: PPUSH
17491: CALL_OW 255
17495: PUSH
17496: LD_INT 3
17498: EQUAL
17499: PUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 266
17509: PUSH
17510: LD_INT 6
17512: EQUAL
17513: AND
17514: PUSH
17515: LD_EXP 8
17519: NOT
17520: AND
17521: IFFALSE 17527
// Dial_LabConstructed ;
17523: CALL 8901 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17527: LD_VAR 0 1
17531: PPUSH
17532: CALL_OW 255
17536: PUSH
17537: LD_INT 3
17539: EQUAL
17540: PUSH
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 266
17550: PUSH
17551: LD_INT 2
17553: EQUAL
17554: AND
17555: PUSH
17556: LD_EXP 9
17560: NOT
17561: AND
17562: IFFALSE 17568
// Dial_WorkshopConstructed ;
17564: CALL 8976 0 0
// if GetSide ( building ) = 6 then
17568: LD_VAR 0 1
17572: PPUSH
17573: CALL_OW 255
17577: PUSH
17578: LD_INT 6
17580: EQUAL
17581: IFFALSE 17792
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17583: LD_VAR 0 1
17587: PPUSH
17588: CALL_OW 266
17592: PUSH
17593: LD_INT 31
17595: EQUAL
17596: PUSH
17597: LD_VAR 0 1
17601: PPUSH
17602: LD_INT 9
17604: PPUSH
17605: CALL_OW 308
17609: AND
17610: IFFALSE 17661
// begin if UnitsInside ( ru2_arm2 ) then
17612: LD_INT 209
17614: PPUSH
17615: CALL_OW 313
17619: IFFALSE 17661
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17621: LD_ADDR_VAR 0 2
17625: PUSH
17626: LD_INT 209
17628: PPUSH
17629: CALL_OW 313
17633: PUSH
17634: LD_INT 1
17636: ARRAY
17637: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17647: LD_VAR 0 2
17651: PPUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17661: LD_VAR 0 1
17665: PPUSH
17666: CALL_OW 266
17670: PUSH
17671: LD_INT 31
17673: EQUAL
17674: PUSH
17675: LD_VAR 0 1
17679: PPUSH
17680: LD_INT 8
17682: PPUSH
17683: CALL_OW 308
17687: AND
17688: IFFALSE 17724
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17690: LD_ADDR_VAR 0 2
17694: PUSH
17695: LD_EXP 77
17699: PPUSH
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 74
17709: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17710: LD_VAR 0 2
17714: PPUSH
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17724: LD_VAR 0 1
17728: PPUSH
17729: CALL_OW 266
17733: PUSH
17734: LD_INT 2
17736: EQUAL
17737: IFFALSE 17792
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17739: LD_EXP 69
17743: PPUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: CALL_OW 72
17758: PPUSH
17759: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17763: LD_EXP 69
17767: PPUSH
17768: LD_INT 25
17770: PUSH
17771: LD_INT 3
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 72
17782: PPUSH
17783: LD_VAR 0 1
17787: PPUSH
17788: CALL_OW 180
// end ; end ; end ;
17792: PPOPN 3
17794: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17795: LD_VAR 0 1
17799: PUSH
17800: LD_INT 47
17802: EQUAL
17803: PUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 255
17813: PUSH
17814: LD_INT 3
17816: EQUAL
17817: AND
17818: IFFALSE 17828
// engineResearched = true ;
17820: LD_ADDR_EXP 10
17824: PUSH
17825: LD_INT 1
17827: ST_TO_ADDR
// if tech = tech_Tech1 then
17828: LD_VAR 0 1
17832: PUSH
17833: LD_INT 48
17835: EQUAL
17836: IFFALSE 17858
// begin wait ( 0 0$5 ) ;
17838: LD_INT 175
17840: PPUSH
17841: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17845: LD_INT 83
17847: PPUSH
17848: LD_INT 1500
17850: PPUSH
17851: LD_INT 0
17853: PPUSH
17854: CALL_OW 486
// end ; end ;
17858: PPOPN 2
17860: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17861: LD_VAR 0 2
17865: PPUSH
17866: CALL_OW 255
17870: PUSH
17871: LD_OWVAR 2
17875: EQUAL
17876: PUSH
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 302
17886: AND
17887: PUSH
17888: LD_EXP 12
17892: NOT
17893: AND
17894: PUSH
17895: LD_EXP 17
17899: NOT
17900: AND
17901: IFFALSE 17912
// Dial_FirstVehConstructed ( factory ) ;
17903: LD_VAR 0 2
17907: PPUSH
17908: CALL 9575 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17912: LD_VAR 0 2
17916: PPUSH
17917: CALL_OW 255
17921: PUSH
17922: LD_OWVAR 2
17926: EQUAL
17927: PUSH
17928: LD_EXP 14
17932: NOT
17933: AND
17934: PUSH
17935: LD_EXP 13
17939: PPUSH
17940: CALL_OW 302
17944: NOT
17945: AND
17946: IFFALSE 17958
// firstVeh = vehicle ;
17948: LD_ADDR_EXP 13
17952: PUSH
17953: LD_VAR 0 1
17957: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 255
17967: PUSH
17968: LD_OWVAR 2
17972: EQUAL
17973: PUSH
17974: LD_VAR 0 2
17978: PPUSH
17979: CALL_OW 302
17983: AND
17984: PUSH
17985: LD_EXP 17
17989: AND
17990: IFFALSE 18006
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
17992: LD_ADDR_EXP 18
17996: PUSH
17997: LD_EXP 18
18001: PUSH
18002: LD_INT 1
18004: PLUS
18005: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 255
18015: PUSH
18016: LD_OWVAR 2
18020: EQUAL
18021: PUSH
18022: LD_VAR 0 2
18026: PPUSH
18027: CALL_OW 248
18031: PUSH
18032: LD_INT 3
18034: EQUAL
18035: AND
18036: IFFALSE 18052
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18038: LD_ADDR_EXP 44
18042: PUSH
18043: LD_EXP 44
18047: PUSH
18048: LD_INT 1
18050: PLUS
18051: ST_TO_ADDR
// end ;
18052: PPOPN 2
18054: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18055: LD_EXP 19
18059: NOT
18060: PUSH
18061: LD_VAR 0 5
18065: PUSH
18066: LD_INT 1
18068: EQUAL
18069: AND
18070: IFFALSE 18086
// Dial_NewCrates ( x , y ) ;
18072: LD_VAR 0 2
18076: PPUSH
18077: LD_VAR 0 3
18081: PPUSH
18082: CALL 9520 0 2
// end ;
18086: PPOPN 5
18088: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18089: LD_INT 0
18091: PPUSH
18092: PPUSH
18093: PPUSH
18094: PPUSH
18095: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18096: LD_ADDR_VAR 0 2
18100: PUSH
18101: LD_INT 22
18103: PUSH
18104: LD_INT 3
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: PUSH
18111: LD_INT 21
18113: PUSH
18114: LD_INT 1
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PUSH
18121: EMPTY
18122: LIST
18123: LIST
18124: PPUSH
18125: CALL_OW 69
18129: PUSH
18130: FOR_IN
18131: IFFALSE 18324
// if GetTaskList ( i ) > 0 then
18133: LD_VAR 0 2
18137: PPUSH
18138: CALL_OW 437
18142: PUSH
18143: LD_INT 0
18145: GREATER
18146: IFFALSE 18322
// for j = 1 to GetTaskList ( i ) do
18148: LD_ADDR_VAR 0 3
18152: PUSH
18153: DOUBLE
18154: LD_INT 1
18156: DEC
18157: ST_TO_ADDR
18158: LD_VAR 0 2
18162: PPUSH
18163: CALL_OW 437
18167: PUSH
18168: FOR_TO
18169: IFFALSE 18320
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18171: LD_ADDR_VAR 0 4
18175: PUSH
18176: LD_VAR 0 2
18180: PPUSH
18181: CALL_OW 437
18185: PUSH
18186: LD_VAR 0 3
18190: ARRAY
18191: PUSH
18192: LD_INT 4
18194: ARRAY
18195: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18196: LD_VAR 0 4
18200: PUSH
18201: LD_INT 71
18203: EQUAL
18204: PUSH
18205: LD_VAR 0 4
18209: PPUSH
18210: CALL_OW 255
18214: PUSH
18215: LD_INT 6
18217: EQUAL
18218: PUSH
18219: LD_VAR 0 2
18223: PPUSH
18224: CALL_OW 437
18228: PUSH
18229: LD_VAR 0 3
18233: ARRAY
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_STRING e
18241: EQUAL
18242: AND
18243: PUSH
18244: LD_VAR 0 4
18248: PPUSH
18249: CALL_OW 247
18253: PUSH
18254: LD_INT 2
18256: EQUAL
18257: AND
18258: OR
18259: IFFALSE 18272
// SetTaskList ( i , [ ] ) ;
18261: LD_VAR 0 2
18265: PPUSH
18266: EMPTY
18267: PPUSH
18268: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18272: LD_VAR 0 4
18276: PUSH
18277: LD_INT 106
18279: EQUAL
18280: PUSH
18281: LD_VAR 0 2
18285: PPUSH
18286: CALL_OW 437
18290: PUSH
18291: LD_VAR 0 3
18295: ARRAY
18296: PUSH
18297: LD_INT 1
18299: ARRAY
18300: PUSH
18301: LD_STRING Y
18303: EQUAL
18304: AND
18305: IFFALSE 18318
// SetTaskList ( i , [ ] ) ;
18307: LD_VAR 0 2
18311: PPUSH
18312: EMPTY
18313: PPUSH
18314: CALL_OW 446
// end ;
18318: GO 18168
18320: POP
18321: POP
18322: GO 18130
18324: POP
18325: POP
// end ;
18326: PPOPN 6
18328: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18329: LD_VAR 0 1
18333: PPUSH
18334: CALL_OW 255
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: PUSH
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 247
18352: PUSH
18353: LD_INT 1
18355: EQUAL
18356: AND
18357: IFFALSE 18415
// begin if unit in amLeftEngs then
18359: LD_VAR 0 1
18363: PUSH
18364: LD_EXP 86
18368: IN
18369: IFFALSE 18387
// amLeftEngs = amLeftEngs diff unit ;
18371: LD_ADDR_EXP 86
18375: PUSH
18376: LD_EXP 86
18380: PUSH
18381: LD_VAR 0 1
18385: DIFF
18386: ST_TO_ADDR
// if unit in amRightEngs then
18387: LD_VAR 0 1
18391: PUSH
18392: LD_EXP 87
18396: IN
18397: IFFALSE 18415
// amRightEngs = amRightEngs diff unit ;
18399: LD_ADDR_EXP 87
18403: PUSH
18404: LD_EXP 87
18408: PUSH
18409: LD_VAR 0 1
18413: DIFF
18414: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18415: LD_VAR 0 1
18419: PPUSH
18420: CALL_OW 255
18424: PUSH
18425: LD_INT 6
18427: EQUAL
18428: PUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 247
18438: PUSH
18439: LD_INT 1
18441: EQUAL
18442: AND
18443: IFFALSE 18473
// if unit in belkovTeam then
18445: LD_VAR 0 1
18449: PUSH
18450: LD_EXP 73
18454: IN
18455: IFFALSE 18473
// belkovTeam = belkovTeam diff unit ;
18457: LD_ADDR_EXP 73
18461: PUSH
18462: LD_EXP 73
18466: PUSH
18467: LD_VAR 0 1
18471: DIFF
18472: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18473: LD_VAR 0 1
18477: PPUSH
18478: CALL_OW 255
18482: PUSH
18483: LD_INT 3
18485: EQUAL
18486: PUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 247
18496: PUSH
18497: LD_INT 1
18499: EQUAL
18500: AND
18501: IFFALSE 18517
// lostComradesCounter = lostComradesCounter + 1 ;
18503: LD_ADDR_EXP 43
18507: PUSH
18508: LD_EXP 43
18512: PUSH
18513: LD_INT 1
18515: PLUS
18516: ST_TO_ADDR
// if unit = Burlak then
18517: LD_VAR 0 1
18521: PUSH
18522: LD_EXP 62
18526: EQUAL
18527: IFFALSE 18533
// BurlakIsDead ;
18529: CALL 19844 0 0
// if unit = Beria then
18533: LD_VAR 0 1
18537: PUSH
18538: LD_INT 106
18540: EQUAL
18541: IFFALSE 18547
// BaseDestroyed ;
18543: CALL 19874 0 0
// if unit in platSoldiers then
18547: LD_VAR 0 1
18551: PUSH
18552: LD_EXP 77
18556: IN
18557: IFFALSE 18575
// platSoldiers = platSoldiers diff unit ;
18559: LD_ADDR_EXP 77
18563: PUSH
18564: LD_EXP 77
18568: PUSH
18569: LD_VAR 0 1
18573: DIFF
18574: ST_TO_ADDR
// end ;
18575: PPOPN 1
18577: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 255
18587: PUSH
18588: LD_INT 1
18590: EQUAL
18591: PUSH
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 247
18601: PUSH
18602: LD_INT 3
18604: EQUAL
18605: AND
18606: IFFALSE 18664
// begin if unit in leftBunkers then
18608: LD_VAR 0 1
18612: PUSH
18613: LD_EXP 82
18617: IN
18618: IFFALSE 18636
// leftBunkers = leftBunkers diff unit ;
18620: LD_ADDR_EXP 82
18624: PUSH
18625: LD_EXP 82
18629: PUSH
18630: LD_VAR 0 1
18634: DIFF
18635: ST_TO_ADDR
// if unit in rightBunkers then
18636: LD_VAR 0 1
18640: PUSH
18641: LD_EXP 83
18645: IN
18646: IFFALSE 18664
// rightBunkers = rightBunkers diff unit ;
18648: LD_ADDR_EXP 83
18652: PUSH
18653: LD_EXP 83
18657: PUSH
18658: LD_VAR 0 1
18662: DIFF
18663: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18664: LD_VAR 0 1
18668: PPUSH
18669: CALL_OW 255
18673: PUSH
18674: LD_INT 1
18676: EQUAL
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 247
18687: PUSH
18688: LD_INT 1
18690: EQUAL
18691: AND
18692: IFFALSE 18722
// if unit in trapTeam then
18694: LD_VAR 0 1
18698: PUSH
18699: LD_EXP 81
18703: IN
18704: IFFALSE 18722
// trapTeam = trapTeam diff unit ;
18706: LD_ADDR_EXP 81
18710: PUSH
18711: LD_EXP 81
18715: PUSH
18716: LD_VAR 0 1
18720: DIFF
18721: ST_TO_ADDR
// end ;
18722: PPOPN 1
18724: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18725: LD_VAR 0 3
18729: PUSH
18730: LD_INT 1
18732: EQUAL
18733: IFFALSE 18743
// captureBelkovVehicle = true ;
18735: LD_ADDR_EXP 38
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// if original_side = 6 then
18743: LD_VAR 0 3
18747: PUSH
18748: LD_INT 6
18750: EQUAL
18751: IFFALSE 18795
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18753: LD_VAR 0 1
18757: PUSH
18758: LD_VAR 0 2
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: LD_INT 118
18769: PPUSH
18770: LD_INT 25
18772: PPUSH
18773: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18777: LD_VAR 0 1
18781: PUSH
18782: LD_VAR 0 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PPUSH
18791: CALL_OW 139
// end ; end ;
18795: PPOPN 4
18797: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18798: LD_VAR 0 1
18802: PUSH
18803: LD_INT 3
18805: EQUAL
18806: PUSH
18807: LD_VAR 0 2
18811: PUSH
18812: LD_INT 6
18814: EQUAL
18815: AND
18816: IFFALSE 18822
// AttackComrades ;
18818: CALL 19859 0 0
// end ;
18822: PPOPN 2
18824: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 6
18832: EQUAL
18833: IFFALSE 18847
// SetSide ( building , 3 ) ;
18835: LD_VAR 0 1
18839: PPUSH
18840: LD_INT 3
18842: PPUSH
18843: CALL_OW 235
// end ; end_of_file
18847: PPOPN 3
18849: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18850: LD_EXP 16
18854: PUSH
18855: LD_INT 8
18857: PPUSH
18858: LD_INT 22
18860: PUSH
18861: LD_INT 3
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 1
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: EMPTY
18879: LIST
18880: LIST
18881: PPUSH
18882: CALL_OW 71
18886: PUSH
18887: LD_INT 0
18889: EQUAL
18890: AND
18891: IFFALSE 18992
18893: GO 18895
18895: DISABLE
// begin enable ;
18896: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18897: LD_EXP 36
18901: NOT
18902: PUSH
18903: LD_EXP 64
18907: PPUSH
18908: CALL_OW 302
18912: PUSH
18913: LD_EXP 68
18917: PPUSH
18918: CALL_OW 302
18922: OR
18923: AND
18924: IFFALSE 18971
// begin case Query ( QContMission ) of 1 :
18926: LD_STRING QContMission
18928: PPUSH
18929: CALL_OW 97
18933: PUSH
18934: LD_INT 1
18936: DOUBLE
18937: EQUAL
18938: IFTRUE 18942
18940: GO 18949
18942: POP
// begin FinishMission ;
18943: CALL 18993 0 0
// end ; 2 :
18947: GO 18969
18949: LD_INT 2
18951: DOUBLE
18952: EQUAL
18953: IFTRUE 18957
18955: GO 18968
18957: POP
// begin saveBelkovObjective = true ;
18958: LD_ADDR_EXP 36
18962: PUSH
18963: LD_INT 1
18965: ST_TO_ADDR
// end ; end ;
18966: GO 18969
18968: POP
// end else
18969: GO 18982
// if not belkovSaved then
18971: LD_EXP 37
18975: NOT
18976: IFFALSE 18982
// FinishMission ;
18978: CALL 18993 0 0
// if belkovSaved then
18982: LD_EXP 37
18986: IFFALSE 18992
// FinishMission ;
18988: CALL 18993 0 0
// end ;
18992: END
// function FinishMission ; begin
18993: LD_INT 0
18995: PPUSH
// SetRewards ;
18996: CALL 19017 0 0
// SavePlayerCharacters ;
19000: CALL 19307 0 0
// SaveGlobalVariables ;
19004: CALL 19524 0 0
// YouWin ;
19008: CALL_OW 103
// end ;
19012: LD_VAR 0 1
19016: RET
// function SetRewards ; begin
19017: LD_INT 0
19019: PPUSH
// case initiative of 1 :
19020: LD_EXP 42
19024: PUSH
19025: LD_INT 1
19027: DOUBLE
19028: EQUAL
19029: IFTRUE 19033
19031: GO 19046
19033: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19034: LD_STRING Initiative
19036: PPUSH
19037: LD_INT 1
19039: PPUSH
19040: CALL_OW 101
19044: GO 19091
19046: LD_INT 2
19048: DOUBLE
19049: EQUAL
19050: IFTRUE 19054
19052: GO 19068
19054: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19055: LD_STRING Initiative
19057: PPUSH
19058: LD_INT 2
19060: NEG
19061: PPUSH
19062: CALL_OW 101
19066: GO 19091
19068: LD_INT 3
19070: DOUBLE
19071: EQUAL
19072: IFTRUE 19076
19074: GO 19090
19076: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19077: LD_STRING Initiative
19079: PPUSH
19080: LD_INT 1
19082: NEG
19083: PPUSH
19084: CALL_OW 101
19088: GO 19091
19090: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19091: LD_EXP 37
19095: PUSH
19096: LD_EXP 64
19100: PPUSH
19101: CALL_OW 302
19105: PUSH
19106: LD_EXP 68
19110: PPUSH
19111: CALL_OW 302
19115: OR
19116: AND
19117: IFFALSE 19129
// AddMedal ( Belkov , 1 ) ;
19119: LD_STRING Belkov
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19129: LD_EXP 37
19133: NOT
19134: PUSH
19135: LD_EXP 36
19139: NOT
19140: AND
19141: IFFALSE 19154
// AddMedal ( Belkov , - 1 ) ;
19143: LD_STRING Belkov
19145: PPUSH
19146: LD_INT 1
19148: NEG
19149: PPUSH
19150: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19154: LD_EXP 37
19158: NOT
19159: PUSH
19160: LD_EXP 36
19164: AND
19165: IFFALSE 19178
// AddMedal ( Belkov , - 2 ) ;
19167: LD_STRING Belkov
19169: PPUSH
19170: LD_INT 2
19172: NEG
19173: PPUSH
19174: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19178: LD_EXP 37
19182: PUSH
19183: LD_EXP 6
19187: PUSH
19188: LD_EXP 64
19192: PPUSH
19193: CALL_OW 301
19197: AND
19198: AND
19199: PUSH
19200: LD_EXP 6
19204: NOT
19205: PUSH
19206: LD_EXP 68
19210: PPUSH
19211: CALL_OW 301
19215: AND
19216: OR
19217: IFFALSE 19230
// AddMedal ( Belkov , - 2 ) ;
19219: LD_STRING Belkov
19221: PPUSH
19222: LD_INT 2
19224: NEG
19225: PPUSH
19226: CALL_OW 101
// if lostComradesCounter = 0 then
19230: LD_EXP 43
19234: PUSH
19235: LD_INT 0
19237: EQUAL
19238: IFFALSE 19252
// AddMedal ( NoLosses , 1 ) else
19240: LD_STRING NoLosses
19242: PPUSH
19243: LD_INT 1
19245: PPUSH
19246: CALL_OW 101
19250: GO 19262
// AddMedal ( NoLosses , 0 ) ;
19252: LD_STRING NoLosses
19254: PPUSH
19255: LD_INT 0
19257: PPUSH
19258: CALL_OW 101
// GiveMedals ( Main ) ;
19262: LD_STRING Main
19264: PPUSH
19265: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19269: LD_INT 22
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 1
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PPUSH
19293: CALL_OW 69
19297: PPUSH
19298: CALL_OW 43
// end ;
19302: LD_VAR 0 1
19306: RET
// function SavePlayerCharacters ; var othersYour ; begin
19307: LD_INT 0
19309: PPUSH
19310: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19311: LD_EXP 62
19315: PPUSH
19316: LD_STRING Burlak
19318: PPUSH
19319: LD_INT 3
19321: PPUSH
19322: CALL 4272 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19326: LD_EXP 63
19330: PPUSH
19331: LD_STRING Gnyevko
19333: PPUSH
19334: LD_INT 3
19336: PPUSH
19337: CALL 4272 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19341: LD_EXP 70
19345: PPUSH
19346: LD_STRING Kovalyuk
19348: PPUSH
19349: LD_INT 3
19351: PPUSH
19352: CALL 4272 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19356: LD_EXP 64
19360: PPUSH
19361: LD_STRING Belkov
19363: PPUSH
19364: LD_INT 3
19366: PPUSH
19367: CALL 4272 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19371: LD_EXP 68
19375: PPUSH
19376: LD_STRING Belkov2
19378: PPUSH
19379: LD_INT 3
19381: PPUSH
19382: CALL 4272 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19386: LD_EXP 65
19390: PPUSH
19391: LD_STRING Kirilenkova
19393: PPUSH
19394: LD_INT 3
19396: PPUSH
19397: CALL 4272 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19401: LD_ADDR_VAR 0 2
19405: PUSH
19406: LD_INT 22
19408: PUSH
19409: LD_INT 3
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PUSH
19416: LD_INT 21
19418: PUSH
19419: LD_INT 1
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PPUSH
19430: CALL_OW 69
19434: PUSH
19435: LD_EXP 62
19439: PUSH
19440: LD_EXP 63
19444: PUSH
19445: LD_EXP 64
19449: PUSH
19450: LD_EXP 68
19454: PUSH
19455: LD_EXP 70
19459: PUSH
19460: LD_EXP 65
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: LIST
19471: LIST
19472: DIFF
19473: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19474: LD_VAR 0 2
19478: PPUSH
19479: LD_STRING other_survivors
19481: PPUSH
19482: LD_INT 3
19484: PPUSH
19485: CALL 4328 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19489: LD_EXP 77
19493: PPUSH
19494: LD_STRING other_beria
19496: PPUSH
19497: LD_INT 6
19499: PPUSH
19500: CALL 4328 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19504: LD_EXP 69
19508: PPUSH
19509: LD_STRING other_kirov
19511: PPUSH
19512: LD_INT 6
19514: PPUSH
19515: CALL 4328 0 3
// end ;
19519: LD_VAR 0 1
19523: RET
// function SaveGlobalVariables ; var vehicles ; begin
19524: LD_INT 0
19526: PPUSH
19527: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19528: LD_ADDR_VAR 0 2
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_INT 3
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 2
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 50
19555: PUSH
19556: EMPTY
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: LIST
19563: PPUSH
19564: CALL_OW 69
19568: ST_TO_ADDR
// if vehicles then
19569: LD_VAR 0 2
19573: IFFALSE 19587
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19575: LD_VAR 0 2
19579: PPUSH
19580: LD_STRING 02_Vehicles_1
19582: PPUSH
19583: CALL 5359 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19587: LD_INT 8
19589: PPUSH
19590: LD_INT 21
19592: PUSH
19593: LD_INT 3
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: PUSH
19600: EMPTY
19601: LIST
19602: PPUSH
19603: CALL_OW 70
19607: PPUSH
19608: LD_STRING 02_BeriaBase_2
19610: PPUSH
19611: CALL 5502 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19615: LD_INT 9
19617: PPUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 6
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PPUSH
19642: CALL_OW 70
19646: PPUSH
19647: LD_STRING 02_KirovBase_3
19649: PPUSH
19650: CALL 5502 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19654: LD_INT 22
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 21
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 50
19676: PUSH
19677: EMPTY
19678: LIST
19679: PUSH
19680: LD_INT 3
19682: PUSH
19683: LD_INT 95
19685: PUSH
19686: LD_INT 8
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: EMPTY
19694: LIST
19695: LIST
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PPUSH
19703: CALL_OW 69
19707: PPUSH
19708: LD_STRING 02_OtherBuildings_4
19710: PPUSH
19711: CALL 5502 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19715: LD_INT 22
19717: PUSH
19718: LD_INT 1
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 50
19737: PUSH
19738: EMPTY
19739: LIST
19740: PUSH
19741: LD_INT 23
19743: PUSH
19744: LD_INT 1
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: LIST
19756: PPUSH
19757: CALL_OW 69
19761: PPUSH
19762: LD_STRING 02_AmericanBuildings_5
19764: PPUSH
19765: CALL 5502 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19769: LD_EXP 4
19773: PPUSH
19774: LD_STRING 02_MeetBelkovBrother_6
19776: PPUSH
19777: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19781: LD_INT 106
19783: PPUSH
19784: CALL_OW 274
19788: PPUSH
19789: LD_INT 1
19791: PPUSH
19792: CALL_OW 275
19796: PPUSH
19797: LD_STRING 02_BeriaResourceCrates_7
19799: PPUSH
19800: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19804: LD_INT 106
19806: PPUSH
19807: CALL_OW 274
19811: PPUSH
19812: LD_INT 2
19814: PPUSH
19815: CALL_OW 275
19819: PPUSH
19820: LD_STRING 02_BeriaResourceOil_8
19822: PPUSH
19823: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19827: LD_EXP 5
19831: PPUSH
19832: LD_STRING 02_PlatonovOpinion_9
19834: PPUSH
19835: CALL_OW 39
// end ; end_of_file
19839: LD_VAR 0 1
19843: RET
// export function BurlakIsDead ; begin
19844: LD_INT 0
19846: PPUSH
// YouLost ( Burlak ) ;
19847: LD_STRING Burlak
19849: PPUSH
19850: CALL_OW 104
// end ;
19854: LD_VAR 0 1
19858: RET
// export function AttackComrades ; begin
19859: LD_INT 0
19861: PPUSH
// YouLost ( SelfAttack ) ;
19862: LD_STRING SelfAttack
19864: PPUSH
19865: CALL_OW 104
// end ;
19869: LD_VAR 0 1
19873: RET
// export function BaseDestroyed ; begin
19874: LD_INT 0
19876: PPUSH
// YouLost ( Base ) ;
19877: LD_STRING Base
19879: PPUSH
19880: CALL_OW 104
// end ; end_of_file
19884: LD_VAR 0 1
19888: RET
// every 0 0$1 do var engs ;
19889: GO 19891
19891: DISABLE
19892: LD_INT 0
19894: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19895: LD_ADDR_VAR 0 1
19899: PUSH
19900: LD_EXP 69
19904: PPUSH
19905: LD_INT 25
19907: PUSH
19908: LD_INT 2
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PPUSH
19915: CALL_OW 72
19919: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 122
// wait ( 0 0$1 ) ;
19929: LD_INT 35
19931: PPUSH
19932: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
19936: LD_VAR 0 1
19940: PPUSH
19941: LD_INT 31
19943: PPUSH
19944: LD_INT 146
19946: PPUSH
19947: LD_INT 107
19949: PPUSH
19950: LD_INT 1
19952: PPUSH
19953: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
19957: LD_VAR 0 1
19961: PPUSH
19962: LD_INT 31
19964: PPUSH
19965: LD_INT 176
19967: PPUSH
19968: LD_INT 123
19970: PPUSH
19971: LD_INT 5
19973: PPUSH
19974: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_INT 31
19985: PPUSH
19986: LD_INT 170
19988: PPUSH
19989: LD_INT 102
19991: PPUSH
19992: LD_INT 4
19994: PPUSH
19995: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
19999: LD_VAR 0 1
20003: PPUSH
20004: LD_INT 31
20006: PPUSH
20007: LD_INT 173
20009: PPUSH
20010: LD_INT 105
20012: PPUSH
20013: LD_INT 4
20015: PPUSH
20016: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20020: LD_VAR 0 1
20024: PPUSH
20025: LD_INT 71
20027: PPUSH
20028: CALL_OW 180
// end ;
20032: PPOPN 1
20034: END
// every 0 0$1 trigger activateAMAI do
20035: LD_EXP 27
20039: IFFALSE 20063
20041: GO 20043
20043: DISABLE
// begin enable ;
20044: ENABLE
// RepairDamageLeftBunkers ;
20045: CALL 20064 0 0
// if Difficulty = 3 then
20049: LD_OWVAR 67
20053: PUSH
20054: LD_INT 3
20056: EQUAL
20057: IFFALSE 20063
// RepairDamageRightBunkers ;
20059: CALL 20272 0 0
// end ;
20063: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20064: LD_INT 0
20066: PPUSH
20067: PPUSH
20068: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20069: LD_EXP 86
20073: NOT
20074: PUSH
20075: LD_INT 17
20077: PPUSH
20078: LD_INT 22
20080: PUSH
20081: LD_INT 1
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: PUSH
20088: LD_INT 21
20090: PUSH
20091: LD_INT 3
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PUSH
20098: LD_INT 30
20100: PUSH
20101: LD_INT 31
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 3
20110: PUSH
20111: LD_INT 24
20113: PUSH
20114: LD_INT 1000
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: PPUSH
20131: CALL_OW 70
20135: PUSH
20136: LD_INT 0
20138: EQUAL
20139: OR
20140: IFFALSE 20144
// exit ;
20142: GO 20267
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20144: LD_EXP 86
20148: PPUSH
20149: LD_INT 3
20151: PUSH
20152: LD_INT 60
20154: PUSH
20155: EMPTY
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 72
20166: PPUSH
20167: CALL_OW 122
// for bunker in leftBunkers do
20171: LD_ADDR_VAR 0 3
20175: PUSH
20176: LD_EXP 82
20180: PUSH
20181: FOR_IN
20182: IFFALSE 20233
// if GetLives ( bunker ) < 1000 then
20184: LD_VAR 0 3
20188: PPUSH
20189: CALL_OW 256
20193: PUSH
20194: LD_INT 1000
20196: LESS
20197: IFFALSE 20231
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20199: LD_EXP 86
20203: PPUSH
20204: LD_INT 3
20206: PUSH
20207: LD_INT 60
20209: PUSH
20210: EMPTY
20211: LIST
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PPUSH
20217: CALL_OW 72
20221: PPUSH
20222: LD_VAR 0 3
20226: PPUSH
20227: CALL_OW 190
20231: GO 20181
20233: POP
20234: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20235: LD_EXP 86
20239: PPUSH
20240: LD_INT 3
20242: PUSH
20243: LD_INT 60
20245: PUSH
20246: EMPTY
20247: LIST
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: PPUSH
20253: CALL_OW 72
20257: PPUSH
20258: LD_EXP 84
20262: PPUSH
20263: CALL_OW 180
// end ;
20267: LD_VAR 0 1
20271: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20272: LD_INT 0
20274: PPUSH
20275: PPUSH
20276: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20277: LD_EXP 87
20281: NOT
20282: PUSH
20283: LD_INT 16
20285: PPUSH
20286: LD_INT 22
20288: PUSH
20289: LD_INT 1
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: PUSH
20296: LD_INT 21
20298: PUSH
20299: LD_INT 3
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 30
20308: PUSH
20309: LD_INT 31
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: LD_INT 24
20321: PUSH
20322: LD_INT 1000
20324: PUSH
20325: EMPTY
20326: LIST
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: EMPTY
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 70
20343: PUSH
20344: LD_INT 0
20346: EQUAL
20347: OR
20348: IFFALSE 20352
// exit ;
20350: GO 20475
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20352: LD_EXP 87
20356: PPUSH
20357: LD_INT 3
20359: PUSH
20360: LD_INT 60
20362: PUSH
20363: EMPTY
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 72
20374: PPUSH
20375: CALL_OW 122
// for bunker in rightBunkers do
20379: LD_ADDR_VAR 0 3
20383: PUSH
20384: LD_EXP 83
20388: PUSH
20389: FOR_IN
20390: IFFALSE 20441
// if GetLives ( bunker ) < 1000 then
20392: LD_VAR 0 3
20396: PPUSH
20397: CALL_OW 256
20401: PUSH
20402: LD_INT 1000
20404: LESS
20405: IFFALSE 20439
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20407: LD_EXP 87
20411: PPUSH
20412: LD_INT 3
20414: PUSH
20415: LD_INT 60
20417: PUSH
20418: EMPTY
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 72
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: CALL_OW 190
20439: GO 20389
20441: POP
20442: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20443: LD_EXP 87
20447: PPUSH
20448: LD_INT 3
20450: PUSH
20451: LD_INT 60
20453: PUSH
20454: EMPTY
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: PPUSH
20461: CALL_OW 72
20465: PPUSH
20466: LD_EXP 85
20470: PPUSH
20471: CALL_OW 180
// end ;
20475: LD_VAR 0 1
20479: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20480: LD_EXP 28
20484: PUSH
20485: LD_EXP 73
20489: AND
20490: IFFALSE 20627
20492: GO 20494
20494: DISABLE
20495: LD_INT 0
20497: PPUSH
20498: PPUSH
20499: PPUSH
// begin enable ;
20500: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20501: LD_ADDR_VAR 0 2
20505: PUSH
20506: LD_EXP 73
20510: PPUSH
20511: LD_INT 25
20513: PUSH
20514: LD_INT 4
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PPUSH
20521: CALL_OW 72
20525: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20526: LD_ADDR_VAR 0 3
20530: PUSH
20531: LD_EXP 73
20535: PPUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 24
20541: PUSH
20542: LD_INT 650
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 72
20557: ST_TO_ADDR
// if not damaged and med then
20558: LD_VAR 0 3
20562: NOT
20563: PUSH
20564: LD_VAR 0 2
20568: AND
20569: IFFALSE 20588
// ComMoveXY ( med , 83 , 17 ) else
20571: LD_VAR 0 2
20575: PPUSH
20576: LD_INT 83
20578: PPUSH
20579: LD_INT 17
20581: PPUSH
20582: CALL_OW 111
20586: GO 20627
// if med then
20588: LD_VAR 0 2
20592: IFFALSE 20627
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20594: LD_VAR 0 3
20598: PPUSH
20599: LD_INT 83
20601: PPUSH
20602: LD_INT 17
20604: PPUSH
20605: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20609: LD_VAR 0 2
20613: PPUSH
20614: LD_VAR 0 3
20618: PUSH
20619: LD_INT 1
20621: ARRAY
20622: PPUSH
20623: CALL_OW 128
// end ; end ; end_of_file
20627: PPOPN 3
20629: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20630: LD_INT 22
20632: PUSH
20633: LD_INT 3
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: LD_INT 23
20642: PUSH
20643: LD_INT 1
20645: PUSH
20646: EMPTY
20647: LIST
20648: LIST
20649: PUSH
20650: LD_INT 30
20652: PUSH
20653: LD_INT 0
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: LIST
20664: PPUSH
20665: CALL_OW 69
20669: PUSH
20670: LD_INT 2
20672: EQUAL
20673: IFFALSE 20685
20675: GO 20677
20677: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20678: LD_STRING ACH_DEPOT
20680: PPUSH
20681: CALL_OW 543
20685: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20686: LD_EXP 44
20690: PUSH
20691: LD_INT 5
20693: EQUAL
20694: IFFALSE 20706
20696: GO 20698
20698: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20699: LD_STRING ACH_WORKSHOP
20701: PPUSH
20702: CALL_OW 543
20706: END
// every 1 trigger captureBelkovVehicle do
20707: LD_EXP 38
20711: IFFALSE 20723
20713: GO 20715
20715: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20716: LD_STRING ACH_RETAKE
20718: PPUSH
20719: CALL_OW 543
20723: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
20724: LD_VAR 0 2
20728: PUSH
20729: LD_INT 100
20731: EQUAL
20732: IFFALSE 21681
// begin if not StreamModeActive then
20734: LD_EXP 90
20738: NOT
20739: IFFALSE 20749
// StreamModeActive := true ;
20741: LD_ADDR_EXP 90
20745: PUSH
20746: LD_INT 1
20748: ST_TO_ADDR
// if p3 = 0 then
20749: LD_VAR 0 3
20753: PUSH
20754: LD_INT 0
20756: EQUAL
20757: IFFALSE 20763
// InitStreamMode ;
20759: CALL 21839 0 0
// if p3 = 1 then
20763: LD_VAR 0 3
20767: PUSH
20768: LD_INT 1
20770: EQUAL
20771: IFFALSE 20781
// sRocket := true ;
20773: LD_ADDR_EXP 95
20777: PUSH
20778: LD_INT 1
20780: ST_TO_ADDR
// if p3 = 2 then
20781: LD_VAR 0 3
20785: PUSH
20786: LD_INT 2
20788: EQUAL
20789: IFFALSE 20799
// sSpeed := true ;
20791: LD_ADDR_EXP 94
20795: PUSH
20796: LD_INT 1
20798: ST_TO_ADDR
// if p3 = 3 then
20799: LD_VAR 0 3
20803: PUSH
20804: LD_INT 3
20806: EQUAL
20807: IFFALSE 20817
// sEngine := true ;
20809: LD_ADDR_EXP 96
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if p3 = 4 then
20817: LD_VAR 0 3
20821: PUSH
20822: LD_INT 4
20824: EQUAL
20825: IFFALSE 20835
// sSpec := true ;
20827: LD_ADDR_EXP 93
20831: PUSH
20832: LD_INT 1
20834: ST_TO_ADDR
// if p3 = 5 then
20835: LD_VAR 0 3
20839: PUSH
20840: LD_INT 5
20842: EQUAL
20843: IFFALSE 20853
// sLevel := true ;
20845: LD_ADDR_EXP 97
20849: PUSH
20850: LD_INT 1
20852: ST_TO_ADDR
// if p3 = 6 then
20853: LD_VAR 0 3
20857: PUSH
20858: LD_INT 6
20860: EQUAL
20861: IFFALSE 20871
// sArmoury := true ;
20863: LD_ADDR_EXP 98
20867: PUSH
20868: LD_INT 1
20870: ST_TO_ADDR
// if p3 = 7 then
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 7
20878: EQUAL
20879: IFFALSE 20889
// sRadar := true ;
20881: LD_ADDR_EXP 99
20885: PUSH
20886: LD_INT 1
20888: ST_TO_ADDR
// if p3 = 8 then
20889: LD_VAR 0 3
20893: PUSH
20894: LD_INT 8
20896: EQUAL
20897: IFFALSE 20907
// sBunker := true ;
20899: LD_ADDR_EXP 100
20903: PUSH
20904: LD_INT 1
20906: ST_TO_ADDR
// if p3 = 9 then
20907: LD_VAR 0 3
20911: PUSH
20912: LD_INT 9
20914: EQUAL
20915: IFFALSE 20925
// sHack := true ;
20917: LD_ADDR_EXP 101
20921: PUSH
20922: LD_INT 1
20924: ST_TO_ADDR
// if p3 = 10 then
20925: LD_VAR 0 3
20929: PUSH
20930: LD_INT 10
20932: EQUAL
20933: IFFALSE 20943
// sFire := true ;
20935: LD_ADDR_EXP 102
20939: PUSH
20940: LD_INT 1
20942: ST_TO_ADDR
// if p3 = 11 then
20943: LD_VAR 0 3
20947: PUSH
20948: LD_INT 11
20950: EQUAL
20951: IFFALSE 20961
// sRefresh := true ;
20953: LD_ADDR_EXP 103
20957: PUSH
20958: LD_INT 1
20960: ST_TO_ADDR
// if p3 = 12 then
20961: LD_VAR 0 3
20965: PUSH
20966: LD_INT 12
20968: EQUAL
20969: IFFALSE 20979
// sExp := true ;
20971: LD_ADDR_EXP 104
20975: PUSH
20976: LD_INT 1
20978: ST_TO_ADDR
// if p3 = 13 then
20979: LD_VAR 0 3
20983: PUSH
20984: LD_INT 13
20986: EQUAL
20987: IFFALSE 20997
// sDepot := true ;
20989: LD_ADDR_EXP 105
20993: PUSH
20994: LD_INT 1
20996: ST_TO_ADDR
// if p3 = 14 then
20997: LD_VAR 0 3
21001: PUSH
21002: LD_INT 14
21004: EQUAL
21005: IFFALSE 21015
// sFlag := true ;
21007: LD_ADDR_EXP 106
21011: PUSH
21012: LD_INT 1
21014: ST_TO_ADDR
// if p3 = 15 then
21015: LD_VAR 0 3
21019: PUSH
21020: LD_INT 15
21022: EQUAL
21023: IFFALSE 21033
// sKamikadze := true ;
21025: LD_ADDR_EXP 114
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// if p3 = 16 then
21033: LD_VAR 0 3
21037: PUSH
21038: LD_INT 16
21040: EQUAL
21041: IFFALSE 21051
// sTroll := true ;
21043: LD_ADDR_EXP 115
21047: PUSH
21048: LD_INT 1
21050: ST_TO_ADDR
// if p3 = 17 then
21051: LD_VAR 0 3
21055: PUSH
21056: LD_INT 17
21058: EQUAL
21059: IFFALSE 21069
// sSlow := true ;
21061: LD_ADDR_EXP 116
21065: PUSH
21066: LD_INT 1
21068: ST_TO_ADDR
// if p3 = 18 then
21069: LD_VAR 0 3
21073: PUSH
21074: LD_INT 18
21076: EQUAL
21077: IFFALSE 21087
// sLack := true ;
21079: LD_ADDR_EXP 117
21083: PUSH
21084: LD_INT 1
21086: ST_TO_ADDR
// if p3 = 19 then
21087: LD_VAR 0 3
21091: PUSH
21092: LD_INT 19
21094: EQUAL
21095: IFFALSE 21105
// sTank := true ;
21097: LD_ADDR_EXP 119
21101: PUSH
21102: LD_INT 1
21104: ST_TO_ADDR
// if p3 = 20 then
21105: LD_VAR 0 3
21109: PUSH
21110: LD_INT 20
21112: EQUAL
21113: IFFALSE 21123
// sRemote := true ;
21115: LD_ADDR_EXP 120
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
// if p3 = 21 then
21123: LD_VAR 0 3
21127: PUSH
21128: LD_INT 21
21130: EQUAL
21131: IFFALSE 21141
// sPowell := true ;
21133: LD_ADDR_EXP 121
21137: PUSH
21138: LD_INT 1
21140: ST_TO_ADDR
// if p3 = 22 then
21141: LD_VAR 0 3
21145: PUSH
21146: LD_INT 22
21148: EQUAL
21149: IFFALSE 21159
// sTeleport := true ;
21151: LD_ADDR_EXP 124
21155: PUSH
21156: LD_INT 1
21158: ST_TO_ADDR
// if p3 = 23 then
21159: LD_VAR 0 3
21163: PUSH
21164: LD_INT 23
21166: EQUAL
21167: IFFALSE 21177
// sOilTower := true ;
21169: LD_ADDR_EXP 126
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// if p3 = 24 then
21177: LD_VAR 0 3
21181: PUSH
21182: LD_INT 24
21184: EQUAL
21185: IFFALSE 21195
// sShovel := true ;
21187: LD_ADDR_EXP 127
21191: PUSH
21192: LD_INT 1
21194: ST_TO_ADDR
// if p3 = 25 then
21195: LD_VAR 0 3
21199: PUSH
21200: LD_INT 25
21202: EQUAL
21203: IFFALSE 21213
// sSheik := true ;
21205: LD_ADDR_EXP 128
21209: PUSH
21210: LD_INT 1
21212: ST_TO_ADDR
// if p3 = 26 then
21213: LD_VAR 0 3
21217: PUSH
21218: LD_INT 26
21220: EQUAL
21221: IFFALSE 21231
// sEarthquake := true ;
21223: LD_ADDR_EXP 130
21227: PUSH
21228: LD_INT 1
21230: ST_TO_ADDR
// if p3 = 27 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_INT 27
21238: EQUAL
21239: IFFALSE 21249
// sAI := true ;
21241: LD_ADDR_EXP 131
21245: PUSH
21246: LD_INT 1
21248: ST_TO_ADDR
// if p3 = 28 then
21249: LD_VAR 0 3
21253: PUSH
21254: LD_INT 28
21256: EQUAL
21257: IFFALSE 21267
// sCargo := true ;
21259: LD_ADDR_EXP 134
21263: PUSH
21264: LD_INT 1
21266: ST_TO_ADDR
// if p3 = 29 then
21267: LD_VAR 0 3
21271: PUSH
21272: LD_INT 29
21274: EQUAL
21275: IFFALSE 21285
// sDLaser := true ;
21277: LD_ADDR_EXP 135
21281: PUSH
21282: LD_INT 1
21284: ST_TO_ADDR
// if p3 = 30 then
21285: LD_VAR 0 3
21289: PUSH
21290: LD_INT 30
21292: EQUAL
21293: IFFALSE 21303
// sExchange := true ;
21295: LD_ADDR_EXP 136
21299: PUSH
21300: LD_INT 1
21302: ST_TO_ADDR
// if p3 = 31 then
21303: LD_VAR 0 3
21307: PUSH
21308: LD_INT 31
21310: EQUAL
21311: IFFALSE 21321
// sFac := true ;
21313: LD_ADDR_EXP 137
21317: PUSH
21318: LD_INT 1
21320: ST_TO_ADDR
// if p3 = 32 then
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 32
21328: EQUAL
21329: IFFALSE 21339
// sPower := true ;
21331: LD_ADDR_EXP 138
21335: PUSH
21336: LD_INT 1
21338: ST_TO_ADDR
// if p3 = 33 then
21339: LD_VAR 0 3
21343: PUSH
21344: LD_INT 33
21346: EQUAL
21347: IFFALSE 21357
// sRandom := true ;
21349: LD_ADDR_EXP 139
21353: PUSH
21354: LD_INT 1
21356: ST_TO_ADDR
// if p3 = 34 then
21357: LD_VAR 0 3
21361: PUSH
21362: LD_INT 34
21364: EQUAL
21365: IFFALSE 21375
// sShield := true ;
21367: LD_ADDR_EXP 140
21371: PUSH
21372: LD_INT 1
21374: ST_TO_ADDR
// if p3 = 35 then
21375: LD_VAR 0 3
21379: PUSH
21380: LD_INT 35
21382: EQUAL
21383: IFFALSE 21393
// sTime := true ;
21385: LD_ADDR_EXP 141
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// if p3 = 36 then
21393: LD_VAR 0 3
21397: PUSH
21398: LD_INT 36
21400: EQUAL
21401: IFFALSE 21411
// sTools := true ;
21403: LD_ADDR_EXP 142
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// if p3 = 101 then
21411: LD_VAR 0 3
21415: PUSH
21416: LD_INT 101
21418: EQUAL
21419: IFFALSE 21429
// sSold := true ;
21421: LD_ADDR_EXP 107
21425: PUSH
21426: LD_INT 1
21428: ST_TO_ADDR
// if p3 = 102 then
21429: LD_VAR 0 3
21433: PUSH
21434: LD_INT 102
21436: EQUAL
21437: IFFALSE 21447
// sDiff := true ;
21439: LD_ADDR_EXP 108
21443: PUSH
21444: LD_INT 1
21446: ST_TO_ADDR
// if p3 = 103 then
21447: LD_VAR 0 3
21451: PUSH
21452: LD_INT 103
21454: EQUAL
21455: IFFALSE 21465
// sFog := true ;
21457: LD_ADDR_EXP 111
21461: PUSH
21462: LD_INT 1
21464: ST_TO_ADDR
// if p3 = 104 then
21465: LD_VAR 0 3
21469: PUSH
21470: LD_INT 104
21472: EQUAL
21473: IFFALSE 21483
// sReset := true ;
21475: LD_ADDR_EXP 112
21479: PUSH
21480: LD_INT 1
21482: ST_TO_ADDR
// if p3 = 105 then
21483: LD_VAR 0 3
21487: PUSH
21488: LD_INT 105
21490: EQUAL
21491: IFFALSE 21501
// sSun := true ;
21493: LD_ADDR_EXP 113
21497: PUSH
21498: LD_INT 1
21500: ST_TO_ADDR
// if p3 = 106 then
21501: LD_VAR 0 3
21505: PUSH
21506: LD_INT 106
21508: EQUAL
21509: IFFALSE 21519
// sTiger := true ;
21511: LD_ADDR_EXP 109
21515: PUSH
21516: LD_INT 1
21518: ST_TO_ADDR
// if p3 = 107 then
21519: LD_VAR 0 3
21523: PUSH
21524: LD_INT 107
21526: EQUAL
21527: IFFALSE 21537
// sBomb := true ;
21529: LD_ADDR_EXP 110
21533: PUSH
21534: LD_INT 1
21536: ST_TO_ADDR
// if p3 = 108 then
21537: LD_VAR 0 3
21541: PUSH
21542: LD_INT 108
21544: EQUAL
21545: IFFALSE 21555
// sWound := true ;
21547: LD_ADDR_EXP 118
21551: PUSH
21552: LD_INT 1
21554: ST_TO_ADDR
// if p3 = 109 then
21555: LD_VAR 0 3
21559: PUSH
21560: LD_INT 109
21562: EQUAL
21563: IFFALSE 21573
// sBetray := true ;
21565: LD_ADDR_EXP 122
21569: PUSH
21570: LD_INT 1
21572: ST_TO_ADDR
// if p3 = 110 then
21573: LD_VAR 0 3
21577: PUSH
21578: LD_INT 110
21580: EQUAL
21581: IFFALSE 21591
// sContamin := true ;
21583: LD_ADDR_EXP 123
21587: PUSH
21588: LD_INT 1
21590: ST_TO_ADDR
// if p3 = 111 then
21591: LD_VAR 0 3
21595: PUSH
21596: LD_INT 111
21598: EQUAL
21599: IFFALSE 21609
// sOil := true ;
21601: LD_ADDR_EXP 125
21605: PUSH
21606: LD_INT 1
21608: ST_TO_ADDR
// if p3 = 112 then
21609: LD_VAR 0 3
21613: PUSH
21614: LD_INT 112
21616: EQUAL
21617: IFFALSE 21627
// sStu := true ;
21619: LD_ADDR_EXP 129
21623: PUSH
21624: LD_INT 1
21626: ST_TO_ADDR
// if p3 = 113 then
21627: LD_VAR 0 3
21631: PUSH
21632: LD_INT 113
21634: EQUAL
21635: IFFALSE 21645
// sBazooka := true ;
21637: LD_ADDR_EXP 132
21641: PUSH
21642: LD_INT 1
21644: ST_TO_ADDR
// if p3 = 114 then
21645: LD_VAR 0 3
21649: PUSH
21650: LD_INT 114
21652: EQUAL
21653: IFFALSE 21663
// sMortar := true ;
21655: LD_ADDR_EXP 133
21659: PUSH
21660: LD_INT 1
21662: ST_TO_ADDR
// if p3 = 115 then
21663: LD_VAR 0 3
21667: PUSH
21668: LD_INT 115
21670: EQUAL
21671: IFFALSE 21681
// sRanger := true ;
21673: LD_ADDR_EXP 143
21677: PUSH
21678: LD_INT 1
21680: ST_TO_ADDR
// end ; if p2 = 101 then
21681: LD_VAR 0 2
21685: PUSH
21686: LD_INT 101
21688: EQUAL
21689: IFFALSE 21817
// begin case p3 of 1 :
21691: LD_VAR 0 3
21695: PUSH
21696: LD_INT 1
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21711
21704: POP
// hHackUnlimitedResources ; 2 :
21705: CALL 32852 0 0
21709: GO 21817
21711: LD_INT 2
21713: DOUBLE
21714: EQUAL
21715: IFTRUE 21719
21717: GO 21726
21719: POP
// hHackSetLevel10 ; 3 :
21720: CALL 32985 0 0
21724: GO 21817
21726: LD_INT 3
21728: DOUBLE
21729: EQUAL
21730: IFTRUE 21734
21732: GO 21741
21734: POP
// hHackSetLevel10YourUnits ; 4 :
21735: CALL 33070 0 0
21739: GO 21817
21741: LD_INT 4
21743: DOUBLE
21744: EQUAL
21745: IFTRUE 21749
21747: GO 21756
21749: POP
// hHackInvincible ; 5 :
21750: CALL 33518 0 0
21754: GO 21817
21756: LD_INT 5
21758: DOUBLE
21759: EQUAL
21760: IFTRUE 21764
21762: GO 21771
21764: POP
// hHackInvisible ; 6 :
21765: CALL 33629 0 0
21769: GO 21817
21771: LD_INT 6
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21786
21779: POP
// hHackChangeYourSide ; 7 :
21780: CALL 33686 0 0
21784: GO 21817
21786: LD_INT 7
21788: DOUBLE
21789: EQUAL
21790: IFTRUE 21794
21792: GO 21801
21794: POP
// hHackChangeUnitSide ; 8 :
21795: CALL 33728 0 0
21799: GO 21817
21801: LD_INT 8
21803: DOUBLE
21804: EQUAL
21805: IFTRUE 21809
21807: GO 21816
21809: POP
// hHackFog ; end ;
21810: CALL 33829 0 0
21814: GO 21817
21816: POP
// end ; end ;
21817: PPOPN 6
21819: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21820: GO 21822
21822: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21823: LD_STRING initStreamRollete();
21825: PPUSH
21826: CALL_OW 559
// InitStreamMode ;
21830: CALL 21839 0 0
// DefineStreamItems ( ) ;
21834: CALL 22279 0 0
// end ;
21838: END
// function InitStreamMode ; begin
21839: LD_INT 0
21841: PPUSH
// streamModeActive := false ;
21842: LD_ADDR_EXP 90
21846: PUSH
21847: LD_INT 0
21849: ST_TO_ADDR
// normalCounter := 36 ;
21850: LD_ADDR_EXP 91
21854: PUSH
21855: LD_INT 36
21857: ST_TO_ADDR
// hardcoreCounter := 16 ;
21858: LD_ADDR_EXP 92
21862: PUSH
21863: LD_INT 16
21865: ST_TO_ADDR
// sRocket := false ;
21866: LD_ADDR_EXP 95
21870: PUSH
21871: LD_INT 0
21873: ST_TO_ADDR
// sSpeed := false ;
21874: LD_ADDR_EXP 94
21878: PUSH
21879: LD_INT 0
21881: ST_TO_ADDR
// sEngine := false ;
21882: LD_ADDR_EXP 96
21886: PUSH
21887: LD_INT 0
21889: ST_TO_ADDR
// sSpec := false ;
21890: LD_ADDR_EXP 93
21894: PUSH
21895: LD_INT 0
21897: ST_TO_ADDR
// sLevel := false ;
21898: LD_ADDR_EXP 97
21902: PUSH
21903: LD_INT 0
21905: ST_TO_ADDR
// sArmoury := false ;
21906: LD_ADDR_EXP 98
21910: PUSH
21911: LD_INT 0
21913: ST_TO_ADDR
// sRadar := false ;
21914: LD_ADDR_EXP 99
21918: PUSH
21919: LD_INT 0
21921: ST_TO_ADDR
// sBunker := false ;
21922: LD_ADDR_EXP 100
21926: PUSH
21927: LD_INT 0
21929: ST_TO_ADDR
// sHack := false ;
21930: LD_ADDR_EXP 101
21934: PUSH
21935: LD_INT 0
21937: ST_TO_ADDR
// sFire := false ;
21938: LD_ADDR_EXP 102
21942: PUSH
21943: LD_INT 0
21945: ST_TO_ADDR
// sRefresh := false ;
21946: LD_ADDR_EXP 103
21950: PUSH
21951: LD_INT 0
21953: ST_TO_ADDR
// sExp := false ;
21954: LD_ADDR_EXP 104
21958: PUSH
21959: LD_INT 0
21961: ST_TO_ADDR
// sDepot := false ;
21962: LD_ADDR_EXP 105
21966: PUSH
21967: LD_INT 0
21969: ST_TO_ADDR
// sFlag := false ;
21970: LD_ADDR_EXP 106
21974: PUSH
21975: LD_INT 0
21977: ST_TO_ADDR
// sKamikadze := false ;
21978: LD_ADDR_EXP 114
21982: PUSH
21983: LD_INT 0
21985: ST_TO_ADDR
// sTroll := false ;
21986: LD_ADDR_EXP 115
21990: PUSH
21991: LD_INT 0
21993: ST_TO_ADDR
// sSlow := false ;
21994: LD_ADDR_EXP 116
21998: PUSH
21999: LD_INT 0
22001: ST_TO_ADDR
// sLack := false ;
22002: LD_ADDR_EXP 117
22006: PUSH
22007: LD_INT 0
22009: ST_TO_ADDR
// sTank := false ;
22010: LD_ADDR_EXP 119
22014: PUSH
22015: LD_INT 0
22017: ST_TO_ADDR
// sRemote := false ;
22018: LD_ADDR_EXP 120
22022: PUSH
22023: LD_INT 0
22025: ST_TO_ADDR
// sPowell := false ;
22026: LD_ADDR_EXP 121
22030: PUSH
22031: LD_INT 0
22033: ST_TO_ADDR
// sTeleport := false ;
22034: LD_ADDR_EXP 124
22038: PUSH
22039: LD_INT 0
22041: ST_TO_ADDR
// sOilTower := false ;
22042: LD_ADDR_EXP 126
22046: PUSH
22047: LD_INT 0
22049: ST_TO_ADDR
// sShovel := false ;
22050: LD_ADDR_EXP 127
22054: PUSH
22055: LD_INT 0
22057: ST_TO_ADDR
// sSheik := false ;
22058: LD_ADDR_EXP 128
22062: PUSH
22063: LD_INT 0
22065: ST_TO_ADDR
// sEarthquake := false ;
22066: LD_ADDR_EXP 130
22070: PUSH
22071: LD_INT 0
22073: ST_TO_ADDR
// sAI := false ;
22074: LD_ADDR_EXP 131
22078: PUSH
22079: LD_INT 0
22081: ST_TO_ADDR
// sCargo := false ;
22082: LD_ADDR_EXP 134
22086: PUSH
22087: LD_INT 0
22089: ST_TO_ADDR
// sDLaser := false ;
22090: LD_ADDR_EXP 135
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// sExchange := false ;
22098: LD_ADDR_EXP 136
22102: PUSH
22103: LD_INT 0
22105: ST_TO_ADDR
// sFac := false ;
22106: LD_ADDR_EXP 137
22110: PUSH
22111: LD_INT 0
22113: ST_TO_ADDR
// sPower := false ;
22114: LD_ADDR_EXP 138
22118: PUSH
22119: LD_INT 0
22121: ST_TO_ADDR
// sRandom := false ;
22122: LD_ADDR_EXP 139
22126: PUSH
22127: LD_INT 0
22129: ST_TO_ADDR
// sShield := false ;
22130: LD_ADDR_EXP 140
22134: PUSH
22135: LD_INT 0
22137: ST_TO_ADDR
// sTime := false ;
22138: LD_ADDR_EXP 141
22142: PUSH
22143: LD_INT 0
22145: ST_TO_ADDR
// sTools := false ;
22146: LD_ADDR_EXP 142
22150: PUSH
22151: LD_INT 0
22153: ST_TO_ADDR
// sSold := false ;
22154: LD_ADDR_EXP 107
22158: PUSH
22159: LD_INT 0
22161: ST_TO_ADDR
// sDiff := false ;
22162: LD_ADDR_EXP 108
22166: PUSH
22167: LD_INT 0
22169: ST_TO_ADDR
// sFog := false ;
22170: LD_ADDR_EXP 111
22174: PUSH
22175: LD_INT 0
22177: ST_TO_ADDR
// sReset := false ;
22178: LD_ADDR_EXP 112
22182: PUSH
22183: LD_INT 0
22185: ST_TO_ADDR
// sSun := false ;
22186: LD_ADDR_EXP 113
22190: PUSH
22191: LD_INT 0
22193: ST_TO_ADDR
// sTiger := false ;
22194: LD_ADDR_EXP 109
22198: PUSH
22199: LD_INT 0
22201: ST_TO_ADDR
// sBomb := false ;
22202: LD_ADDR_EXP 110
22206: PUSH
22207: LD_INT 0
22209: ST_TO_ADDR
// sWound := false ;
22210: LD_ADDR_EXP 118
22214: PUSH
22215: LD_INT 0
22217: ST_TO_ADDR
// sBetray := false ;
22218: LD_ADDR_EXP 122
22222: PUSH
22223: LD_INT 0
22225: ST_TO_ADDR
// sContamin := false ;
22226: LD_ADDR_EXP 123
22230: PUSH
22231: LD_INT 0
22233: ST_TO_ADDR
// sOil := false ;
22234: LD_ADDR_EXP 125
22238: PUSH
22239: LD_INT 0
22241: ST_TO_ADDR
// sStu := false ;
22242: LD_ADDR_EXP 129
22246: PUSH
22247: LD_INT 0
22249: ST_TO_ADDR
// sBazooka := false ;
22250: LD_ADDR_EXP 132
22254: PUSH
22255: LD_INT 0
22257: ST_TO_ADDR
// sMortar := false ;
22258: LD_ADDR_EXP 133
22262: PUSH
22263: LD_INT 0
22265: ST_TO_ADDR
// sRanger := false ;
22266: LD_ADDR_EXP 143
22270: PUSH
22271: LD_INT 0
22273: ST_TO_ADDR
// end ;
22274: LD_VAR 0 1
22278: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22279: LD_INT 0
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
22285: PPUSH
// result := [ ] ;
22286: LD_ADDR_VAR 0 1
22290: PUSH
22291: EMPTY
22292: ST_TO_ADDR
// if campaign_id = 1 then
22293: LD_OWVAR 69
22297: PUSH
22298: LD_INT 1
22300: EQUAL
22301: IFFALSE 25239
// begin case mission_number of 1 :
22303: LD_OWVAR 70
22307: PUSH
22308: LD_INT 1
22310: DOUBLE
22311: EQUAL
22312: IFTRUE 22316
22314: GO 22380
22316: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22317: LD_ADDR_VAR 0 1
22321: PUSH
22322: LD_INT 2
22324: PUSH
22325: LD_INT 4
22327: PUSH
22328: LD_INT 11
22330: PUSH
22331: LD_INT 12
22333: PUSH
22334: LD_INT 15
22336: PUSH
22337: LD_INT 16
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 23
22345: PUSH
22346: LD_INT 26
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 101
22362: PUSH
22363: LD_INT 102
22365: PUSH
22366: LD_INT 106
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: ST_TO_ADDR
22378: GO 25237
22380: LD_INT 2
22382: DOUBLE
22383: EQUAL
22384: IFTRUE 22388
22386: GO 22460
22388: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22389: LD_ADDR_VAR 0 1
22393: PUSH
22394: LD_INT 2
22396: PUSH
22397: LD_INT 4
22399: PUSH
22400: LD_INT 11
22402: PUSH
22403: LD_INT 12
22405: PUSH
22406: LD_INT 15
22408: PUSH
22409: LD_INT 16
22411: PUSH
22412: LD_INT 22
22414: PUSH
22415: LD_INT 23
22417: PUSH
22418: LD_INT 26
22420: PUSH
22421: EMPTY
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 101
22434: PUSH
22435: LD_INT 102
22437: PUSH
22438: LD_INT 105
22440: PUSH
22441: LD_INT 106
22443: PUSH
22444: LD_INT 108
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: LIST
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: ST_TO_ADDR
22458: GO 25237
22460: LD_INT 3
22462: DOUBLE
22463: EQUAL
22464: IFTRUE 22468
22466: GO 22544
22468: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 4
22479: PUSH
22480: LD_INT 5
22482: PUSH
22483: LD_INT 11
22485: PUSH
22486: LD_INT 12
22488: PUSH
22489: LD_INT 15
22491: PUSH
22492: LD_INT 16
22494: PUSH
22495: LD_INT 22
22497: PUSH
22498: LD_INT 26
22500: PUSH
22501: LD_INT 36
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: PUSH
22516: LD_INT 101
22518: PUSH
22519: LD_INT 102
22521: PUSH
22522: LD_INT 105
22524: PUSH
22525: LD_INT 106
22527: PUSH
22528: LD_INT 108
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: ST_TO_ADDR
22542: GO 25237
22544: LD_INT 4
22546: DOUBLE
22547: EQUAL
22548: IFTRUE 22552
22550: GO 22636
22552: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22553: LD_ADDR_VAR 0 1
22557: PUSH
22558: LD_INT 2
22560: PUSH
22561: LD_INT 4
22563: PUSH
22564: LD_INT 5
22566: PUSH
22567: LD_INT 8
22569: PUSH
22570: LD_INT 11
22572: PUSH
22573: LD_INT 12
22575: PUSH
22576: LD_INT 15
22578: PUSH
22579: LD_INT 16
22581: PUSH
22582: LD_INT 22
22584: PUSH
22585: LD_INT 23
22587: PUSH
22588: LD_INT 26
22590: PUSH
22591: LD_INT 36
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: PUSH
22608: LD_INT 101
22610: PUSH
22611: LD_INT 102
22613: PUSH
22614: LD_INT 105
22616: PUSH
22617: LD_INT 106
22619: PUSH
22620: LD_INT 108
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: LIST
22628: LIST
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: ST_TO_ADDR
22634: GO 25237
22636: LD_INT 5
22638: DOUBLE
22639: EQUAL
22640: IFTRUE 22644
22642: GO 22744
22644: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22645: LD_ADDR_VAR 0 1
22649: PUSH
22650: LD_INT 2
22652: PUSH
22653: LD_INT 4
22655: PUSH
22656: LD_INT 5
22658: PUSH
22659: LD_INT 6
22661: PUSH
22662: LD_INT 8
22664: PUSH
22665: LD_INT 11
22667: PUSH
22668: LD_INT 12
22670: PUSH
22671: LD_INT 15
22673: PUSH
22674: LD_INT 16
22676: PUSH
22677: LD_INT 22
22679: PUSH
22680: LD_INT 23
22682: PUSH
22683: LD_INT 25
22685: PUSH
22686: LD_INT 26
22688: PUSH
22689: LD_INT 36
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 101
22710: PUSH
22711: LD_INT 102
22713: PUSH
22714: LD_INT 105
22716: PUSH
22717: LD_INT 106
22719: PUSH
22720: LD_INT 108
22722: PUSH
22723: LD_INT 109
22725: PUSH
22726: LD_INT 112
22728: PUSH
22729: EMPTY
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: ST_TO_ADDR
22742: GO 25237
22744: LD_INT 6
22746: DOUBLE
22747: EQUAL
22748: IFTRUE 22752
22750: GO 22872
22752: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22753: LD_ADDR_VAR 0 1
22757: PUSH
22758: LD_INT 2
22760: PUSH
22761: LD_INT 4
22763: PUSH
22764: LD_INT 5
22766: PUSH
22767: LD_INT 6
22769: PUSH
22770: LD_INT 8
22772: PUSH
22773: LD_INT 11
22775: PUSH
22776: LD_INT 12
22778: PUSH
22779: LD_INT 15
22781: PUSH
22782: LD_INT 16
22784: PUSH
22785: LD_INT 20
22787: PUSH
22788: LD_INT 21
22790: PUSH
22791: LD_INT 22
22793: PUSH
22794: LD_INT 23
22796: PUSH
22797: LD_INT 25
22799: PUSH
22800: LD_INT 26
22802: PUSH
22803: LD_INT 30
22805: PUSH
22806: LD_INT 31
22808: PUSH
22809: LD_INT 32
22811: PUSH
22812: LD_INT 36
22814: PUSH
22815: EMPTY
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: PUSH
22836: LD_INT 101
22838: PUSH
22839: LD_INT 102
22841: PUSH
22842: LD_INT 105
22844: PUSH
22845: LD_INT 106
22847: PUSH
22848: LD_INT 108
22850: PUSH
22851: LD_INT 109
22853: PUSH
22854: LD_INT 112
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: LIST
22864: LIST
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: ST_TO_ADDR
22870: GO 25237
22872: LD_INT 7
22874: DOUBLE
22875: EQUAL
22876: IFTRUE 22880
22878: GO 22980
22880: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22881: LD_ADDR_VAR 0 1
22885: PUSH
22886: LD_INT 2
22888: PUSH
22889: LD_INT 4
22891: PUSH
22892: LD_INT 5
22894: PUSH
22895: LD_INT 7
22897: PUSH
22898: LD_INT 11
22900: PUSH
22901: LD_INT 12
22903: PUSH
22904: LD_INT 15
22906: PUSH
22907: LD_INT 16
22909: PUSH
22910: LD_INT 20
22912: PUSH
22913: LD_INT 21
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_INT 23
22921: PUSH
22922: LD_INT 25
22924: PUSH
22925: LD_INT 26
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 101
22946: PUSH
22947: LD_INT 102
22949: PUSH
22950: LD_INT 103
22952: PUSH
22953: LD_INT 105
22955: PUSH
22956: LD_INT 106
22958: PUSH
22959: LD_INT 108
22961: PUSH
22962: LD_INT 112
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: ST_TO_ADDR
22978: GO 25237
22980: LD_INT 8
22982: DOUBLE
22983: EQUAL
22984: IFTRUE 22988
22986: GO 23116
22988: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
22989: LD_ADDR_VAR 0 1
22993: PUSH
22994: LD_INT 2
22996: PUSH
22997: LD_INT 4
22999: PUSH
23000: LD_INT 5
23002: PUSH
23003: LD_INT 6
23005: PUSH
23006: LD_INT 7
23008: PUSH
23009: LD_INT 8
23011: PUSH
23012: LD_INT 11
23014: PUSH
23015: LD_INT 12
23017: PUSH
23018: LD_INT 15
23020: PUSH
23021: LD_INT 16
23023: PUSH
23024: LD_INT 20
23026: PUSH
23027: LD_INT 21
23029: PUSH
23030: LD_INT 22
23032: PUSH
23033: LD_INT 23
23035: PUSH
23036: LD_INT 25
23038: PUSH
23039: LD_INT 26
23041: PUSH
23042: LD_INT 30
23044: PUSH
23045: LD_INT 31
23047: PUSH
23048: LD_INT 32
23050: PUSH
23051: LD_INT 36
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 101
23078: PUSH
23079: LD_INT 102
23081: PUSH
23082: LD_INT 103
23084: PUSH
23085: LD_INT 105
23087: PUSH
23088: LD_INT 106
23090: PUSH
23091: LD_INT 108
23093: PUSH
23094: LD_INT 109
23096: PUSH
23097: LD_INT 112
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: LIST
23108: LIST
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: ST_TO_ADDR
23114: GO 25237
23116: LD_INT 9
23118: DOUBLE
23119: EQUAL
23120: IFTRUE 23124
23122: GO 23260
23124: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23125: LD_ADDR_VAR 0 1
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 4
23135: PUSH
23136: LD_INT 5
23138: PUSH
23139: LD_INT 6
23141: PUSH
23142: LD_INT 7
23144: PUSH
23145: LD_INT 8
23147: PUSH
23148: LD_INT 11
23150: PUSH
23151: LD_INT 12
23153: PUSH
23154: LD_INT 15
23156: PUSH
23157: LD_INT 16
23159: PUSH
23160: LD_INT 20
23162: PUSH
23163: LD_INT 21
23165: PUSH
23166: LD_INT 22
23168: PUSH
23169: LD_INT 23
23171: PUSH
23172: LD_INT 25
23174: PUSH
23175: LD_INT 26
23177: PUSH
23178: LD_INT 28
23180: PUSH
23181: LD_INT 30
23183: PUSH
23184: LD_INT 31
23186: PUSH
23187: LD_INT 32
23189: PUSH
23190: LD_INT 36
23192: PUSH
23193: EMPTY
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: LD_INT 101
23218: PUSH
23219: LD_INT 102
23221: PUSH
23222: LD_INT 103
23224: PUSH
23225: LD_INT 105
23227: PUSH
23228: LD_INT 106
23230: PUSH
23231: LD_INT 108
23233: PUSH
23234: LD_INT 109
23236: PUSH
23237: LD_INT 112
23239: PUSH
23240: LD_INT 114
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: ST_TO_ADDR
23258: GO 25237
23260: LD_INT 10
23262: DOUBLE
23263: EQUAL
23264: IFTRUE 23268
23266: GO 23452
23268: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23269: LD_ADDR_VAR 0 1
23273: PUSH
23274: LD_INT 2
23276: PUSH
23277: LD_INT 4
23279: PUSH
23280: LD_INT 5
23282: PUSH
23283: LD_INT 6
23285: PUSH
23286: LD_INT 7
23288: PUSH
23289: LD_INT 8
23291: PUSH
23292: LD_INT 9
23294: PUSH
23295: LD_INT 10
23297: PUSH
23298: LD_INT 11
23300: PUSH
23301: LD_INT 12
23303: PUSH
23304: LD_INT 13
23306: PUSH
23307: LD_INT 14
23309: PUSH
23310: LD_INT 15
23312: PUSH
23313: LD_INT 16
23315: PUSH
23316: LD_INT 17
23318: PUSH
23319: LD_INT 18
23321: PUSH
23322: LD_INT 19
23324: PUSH
23325: LD_INT 20
23327: PUSH
23328: LD_INT 21
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_INT 23
23336: PUSH
23337: LD_INT 24
23339: PUSH
23340: LD_INT 25
23342: PUSH
23343: LD_INT 26
23345: PUSH
23346: LD_INT 28
23348: PUSH
23349: LD_INT 30
23351: PUSH
23352: LD_INT 31
23354: PUSH
23355: LD_INT 32
23357: PUSH
23358: LD_INT 36
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: PUSH
23392: LD_INT 101
23394: PUSH
23395: LD_INT 102
23397: PUSH
23398: LD_INT 103
23400: PUSH
23401: LD_INT 104
23403: PUSH
23404: LD_INT 105
23406: PUSH
23407: LD_INT 106
23409: PUSH
23410: LD_INT 107
23412: PUSH
23413: LD_INT 108
23415: PUSH
23416: LD_INT 109
23418: PUSH
23419: LD_INT 110
23421: PUSH
23422: LD_INT 111
23424: PUSH
23425: LD_INT 112
23427: PUSH
23428: LD_INT 114
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: ST_TO_ADDR
23450: GO 25237
23452: LD_INT 11
23454: DOUBLE
23455: EQUAL
23456: IFTRUE 23460
23458: GO 23652
23460: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23461: LD_ADDR_VAR 0 1
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: LD_INT 4
23474: PUSH
23475: LD_INT 5
23477: PUSH
23478: LD_INT 6
23480: PUSH
23481: LD_INT 7
23483: PUSH
23484: LD_INT 8
23486: PUSH
23487: LD_INT 9
23489: PUSH
23490: LD_INT 10
23492: PUSH
23493: LD_INT 11
23495: PUSH
23496: LD_INT 12
23498: PUSH
23499: LD_INT 13
23501: PUSH
23502: LD_INT 14
23504: PUSH
23505: LD_INT 15
23507: PUSH
23508: LD_INT 16
23510: PUSH
23511: LD_INT 17
23513: PUSH
23514: LD_INT 18
23516: PUSH
23517: LD_INT 19
23519: PUSH
23520: LD_INT 20
23522: PUSH
23523: LD_INT 21
23525: PUSH
23526: LD_INT 22
23528: PUSH
23529: LD_INT 23
23531: PUSH
23532: LD_INT 24
23534: PUSH
23535: LD_INT 25
23537: PUSH
23538: LD_INT 26
23540: PUSH
23541: LD_INT 28
23543: PUSH
23544: LD_INT 30
23546: PUSH
23547: LD_INT 31
23549: PUSH
23550: LD_INT 32
23552: PUSH
23553: LD_INT 34
23555: PUSH
23556: LD_INT 36
23558: PUSH
23559: EMPTY
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 101
23594: PUSH
23595: LD_INT 102
23597: PUSH
23598: LD_INT 103
23600: PUSH
23601: LD_INT 104
23603: PUSH
23604: LD_INT 105
23606: PUSH
23607: LD_INT 106
23609: PUSH
23610: LD_INT 107
23612: PUSH
23613: LD_INT 108
23615: PUSH
23616: LD_INT 109
23618: PUSH
23619: LD_INT 110
23621: PUSH
23622: LD_INT 111
23624: PUSH
23625: LD_INT 112
23627: PUSH
23628: LD_INT 114
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: LIST
23649: ST_TO_ADDR
23650: GO 25237
23652: LD_INT 12
23654: DOUBLE
23655: EQUAL
23656: IFTRUE 23660
23658: GO 23868
23660: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23661: LD_ADDR_VAR 0 1
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: LD_INT 3
23674: PUSH
23675: LD_INT 4
23677: PUSH
23678: LD_INT 5
23680: PUSH
23681: LD_INT 6
23683: PUSH
23684: LD_INT 7
23686: PUSH
23687: LD_INT 8
23689: PUSH
23690: LD_INT 9
23692: PUSH
23693: LD_INT 10
23695: PUSH
23696: LD_INT 11
23698: PUSH
23699: LD_INT 12
23701: PUSH
23702: LD_INT 13
23704: PUSH
23705: LD_INT 14
23707: PUSH
23708: LD_INT 15
23710: PUSH
23711: LD_INT 16
23713: PUSH
23714: LD_INT 17
23716: PUSH
23717: LD_INT 18
23719: PUSH
23720: LD_INT 19
23722: PUSH
23723: LD_INT 20
23725: PUSH
23726: LD_INT 21
23728: PUSH
23729: LD_INT 22
23731: PUSH
23732: LD_INT 23
23734: PUSH
23735: LD_INT 24
23737: PUSH
23738: LD_INT 25
23740: PUSH
23741: LD_INT 26
23743: PUSH
23744: LD_INT 27
23746: PUSH
23747: LD_INT 28
23749: PUSH
23750: LD_INT 30
23752: PUSH
23753: LD_INT 31
23755: PUSH
23756: LD_INT 32
23758: PUSH
23759: LD_INT 33
23761: PUSH
23762: LD_INT 34
23764: PUSH
23765: LD_INT 36
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: LIST
23791: LIST
23792: LIST
23793: LIST
23794: LIST
23795: LIST
23796: LIST
23797: LIST
23798: LIST
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: PUSH
23804: LD_INT 101
23806: PUSH
23807: LD_INT 102
23809: PUSH
23810: LD_INT 103
23812: PUSH
23813: LD_INT 104
23815: PUSH
23816: LD_INT 105
23818: PUSH
23819: LD_INT 106
23821: PUSH
23822: LD_INT 107
23824: PUSH
23825: LD_INT 108
23827: PUSH
23828: LD_INT 109
23830: PUSH
23831: LD_INT 110
23833: PUSH
23834: LD_INT 111
23836: PUSH
23837: LD_INT 112
23839: PUSH
23840: LD_INT 113
23842: PUSH
23843: LD_INT 114
23845: PUSH
23846: EMPTY
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: ST_TO_ADDR
23866: GO 25237
23868: LD_INT 13
23870: DOUBLE
23871: EQUAL
23872: IFTRUE 23876
23874: GO 24072
23876: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23877: LD_ADDR_VAR 0 1
23881: PUSH
23882: LD_INT 1
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: LD_INT 3
23890: PUSH
23891: LD_INT 4
23893: PUSH
23894: LD_INT 5
23896: PUSH
23897: LD_INT 8
23899: PUSH
23900: LD_INT 9
23902: PUSH
23903: LD_INT 10
23905: PUSH
23906: LD_INT 11
23908: PUSH
23909: LD_INT 12
23911: PUSH
23912: LD_INT 14
23914: PUSH
23915: LD_INT 15
23917: PUSH
23918: LD_INT 16
23920: PUSH
23921: LD_INT 17
23923: PUSH
23924: LD_INT 18
23926: PUSH
23927: LD_INT 19
23929: PUSH
23930: LD_INT 20
23932: PUSH
23933: LD_INT 21
23935: PUSH
23936: LD_INT 22
23938: PUSH
23939: LD_INT 23
23941: PUSH
23942: LD_INT 24
23944: PUSH
23945: LD_INT 25
23947: PUSH
23948: LD_INT 26
23950: PUSH
23951: LD_INT 27
23953: PUSH
23954: LD_INT 28
23956: PUSH
23957: LD_INT 30
23959: PUSH
23960: LD_INT 31
23962: PUSH
23963: LD_INT 32
23965: PUSH
23966: LD_INT 33
23968: PUSH
23969: LD_INT 34
23971: PUSH
23972: LD_INT 36
23974: PUSH
23975: EMPTY
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 101
24010: PUSH
24011: LD_INT 102
24013: PUSH
24014: LD_INT 103
24016: PUSH
24017: LD_INT 104
24019: PUSH
24020: LD_INT 105
24022: PUSH
24023: LD_INT 106
24025: PUSH
24026: LD_INT 107
24028: PUSH
24029: LD_INT 108
24031: PUSH
24032: LD_INT 109
24034: PUSH
24035: LD_INT 110
24037: PUSH
24038: LD_INT 111
24040: PUSH
24041: LD_INT 112
24043: PUSH
24044: LD_INT 113
24046: PUSH
24047: LD_INT 114
24049: PUSH
24050: EMPTY
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: ST_TO_ADDR
24070: GO 25237
24072: LD_INT 14
24074: DOUBLE
24075: EQUAL
24076: IFTRUE 24080
24078: GO 24292
24080: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24081: LD_ADDR_VAR 0 1
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: LD_INT 2
24091: PUSH
24092: LD_INT 3
24094: PUSH
24095: LD_INT 4
24097: PUSH
24098: LD_INT 5
24100: PUSH
24101: LD_INT 6
24103: PUSH
24104: LD_INT 7
24106: PUSH
24107: LD_INT 8
24109: PUSH
24110: LD_INT 9
24112: PUSH
24113: LD_INT 10
24115: PUSH
24116: LD_INT 11
24118: PUSH
24119: LD_INT 12
24121: PUSH
24122: LD_INT 13
24124: PUSH
24125: LD_INT 14
24127: PUSH
24128: LD_INT 15
24130: PUSH
24131: LD_INT 16
24133: PUSH
24134: LD_INT 17
24136: PUSH
24137: LD_INT 18
24139: PUSH
24140: LD_INT 19
24142: PUSH
24143: LD_INT 20
24145: PUSH
24146: LD_INT 21
24148: PUSH
24149: LD_INT 22
24151: PUSH
24152: LD_INT 23
24154: PUSH
24155: LD_INT 24
24157: PUSH
24158: LD_INT 25
24160: PUSH
24161: LD_INT 26
24163: PUSH
24164: LD_INT 27
24166: PUSH
24167: LD_INT 28
24169: PUSH
24170: LD_INT 29
24172: PUSH
24173: LD_INT 30
24175: PUSH
24176: LD_INT 31
24178: PUSH
24179: LD_INT 32
24181: PUSH
24182: LD_INT 33
24184: PUSH
24185: LD_INT 34
24187: PUSH
24188: LD_INT 36
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 101
24230: PUSH
24231: LD_INT 102
24233: PUSH
24234: LD_INT 103
24236: PUSH
24237: LD_INT 104
24239: PUSH
24240: LD_INT 105
24242: PUSH
24243: LD_INT 106
24245: PUSH
24246: LD_INT 107
24248: PUSH
24249: LD_INT 108
24251: PUSH
24252: LD_INT 109
24254: PUSH
24255: LD_INT 110
24257: PUSH
24258: LD_INT 111
24260: PUSH
24261: LD_INT 112
24263: PUSH
24264: LD_INT 113
24266: PUSH
24267: LD_INT 114
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: ST_TO_ADDR
24290: GO 25237
24292: LD_INT 15
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24512
24300: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24301: LD_ADDR_VAR 0 1
24305: PUSH
24306: LD_INT 1
24308: PUSH
24309: LD_INT 2
24311: PUSH
24312: LD_INT 3
24314: PUSH
24315: LD_INT 4
24317: PUSH
24318: LD_INT 5
24320: PUSH
24321: LD_INT 6
24323: PUSH
24324: LD_INT 7
24326: PUSH
24327: LD_INT 8
24329: PUSH
24330: LD_INT 9
24332: PUSH
24333: LD_INT 10
24335: PUSH
24336: LD_INT 11
24338: PUSH
24339: LD_INT 12
24341: PUSH
24342: LD_INT 13
24344: PUSH
24345: LD_INT 14
24347: PUSH
24348: LD_INT 15
24350: PUSH
24351: LD_INT 16
24353: PUSH
24354: LD_INT 17
24356: PUSH
24357: LD_INT 18
24359: PUSH
24360: LD_INT 19
24362: PUSH
24363: LD_INT 20
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 23
24374: PUSH
24375: LD_INT 24
24377: PUSH
24378: LD_INT 25
24380: PUSH
24381: LD_INT 26
24383: PUSH
24384: LD_INT 27
24386: PUSH
24387: LD_INT 28
24389: PUSH
24390: LD_INT 29
24392: PUSH
24393: LD_INT 30
24395: PUSH
24396: LD_INT 31
24398: PUSH
24399: LD_INT 32
24401: PUSH
24402: LD_INT 33
24404: PUSH
24405: LD_INT 34
24407: PUSH
24408: LD_INT 36
24410: PUSH
24411: EMPTY
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: PUSH
24448: LD_INT 101
24450: PUSH
24451: LD_INT 102
24453: PUSH
24454: LD_INT 103
24456: PUSH
24457: LD_INT 104
24459: PUSH
24460: LD_INT 105
24462: PUSH
24463: LD_INT 106
24465: PUSH
24466: LD_INT 107
24468: PUSH
24469: LD_INT 108
24471: PUSH
24472: LD_INT 109
24474: PUSH
24475: LD_INT 110
24477: PUSH
24478: LD_INT 111
24480: PUSH
24481: LD_INT 112
24483: PUSH
24484: LD_INT 113
24486: PUSH
24487: LD_INT 114
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: PUSH
24506: EMPTY
24507: LIST
24508: LIST
24509: ST_TO_ADDR
24510: GO 25237
24512: LD_INT 16
24514: DOUBLE
24515: EQUAL
24516: IFTRUE 24520
24518: GO 24644
24520: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24521: LD_ADDR_VAR 0 1
24525: PUSH
24526: LD_INT 2
24528: PUSH
24529: LD_INT 4
24531: PUSH
24532: LD_INT 5
24534: PUSH
24535: LD_INT 7
24537: PUSH
24538: LD_INT 11
24540: PUSH
24541: LD_INT 12
24543: PUSH
24544: LD_INT 15
24546: PUSH
24547: LD_INT 16
24549: PUSH
24550: LD_INT 20
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 22
24558: PUSH
24559: LD_INT 23
24561: PUSH
24562: LD_INT 25
24564: PUSH
24565: LD_INT 26
24567: PUSH
24568: LD_INT 30
24570: PUSH
24571: LD_INT 31
24573: PUSH
24574: LD_INT 32
24576: PUSH
24577: LD_INT 33
24579: PUSH
24580: LD_INT 34
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 101
24606: PUSH
24607: LD_INT 102
24609: PUSH
24610: LD_INT 103
24612: PUSH
24613: LD_INT 106
24615: PUSH
24616: LD_INT 108
24618: PUSH
24619: LD_INT 112
24621: PUSH
24622: LD_INT 113
24624: PUSH
24625: LD_INT 114
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: ST_TO_ADDR
24642: GO 25237
24644: LD_INT 17
24646: DOUBLE
24647: EQUAL
24648: IFTRUE 24652
24650: GO 24864
24652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24653: LD_ADDR_VAR 0 1
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: LD_INT 4
24669: PUSH
24670: LD_INT 5
24672: PUSH
24673: LD_INT 6
24675: PUSH
24676: LD_INT 7
24678: PUSH
24679: LD_INT 8
24681: PUSH
24682: LD_INT 9
24684: PUSH
24685: LD_INT 10
24687: PUSH
24688: LD_INT 11
24690: PUSH
24691: LD_INT 12
24693: PUSH
24694: LD_INT 13
24696: PUSH
24697: LD_INT 14
24699: PUSH
24700: LD_INT 15
24702: PUSH
24703: LD_INT 16
24705: PUSH
24706: LD_INT 17
24708: PUSH
24709: LD_INT 18
24711: PUSH
24712: LD_INT 19
24714: PUSH
24715: LD_INT 20
24717: PUSH
24718: LD_INT 21
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 23
24726: PUSH
24727: LD_INT 24
24729: PUSH
24730: LD_INT 25
24732: PUSH
24733: LD_INT 26
24735: PUSH
24736: LD_INT 27
24738: PUSH
24739: LD_INT 28
24741: PUSH
24742: LD_INT 29
24744: PUSH
24745: LD_INT 30
24747: PUSH
24748: LD_INT 31
24750: PUSH
24751: LD_INT 32
24753: PUSH
24754: LD_INT 33
24756: PUSH
24757: LD_INT 34
24759: PUSH
24760: LD_INT 36
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: PUSH
24800: LD_INT 101
24802: PUSH
24803: LD_INT 102
24805: PUSH
24806: LD_INT 103
24808: PUSH
24809: LD_INT 104
24811: PUSH
24812: LD_INT 105
24814: PUSH
24815: LD_INT 106
24817: PUSH
24818: LD_INT 107
24820: PUSH
24821: LD_INT 108
24823: PUSH
24824: LD_INT 109
24826: PUSH
24827: LD_INT 110
24829: PUSH
24830: LD_INT 111
24832: PUSH
24833: LD_INT 112
24835: PUSH
24836: LD_INT 113
24838: PUSH
24839: LD_INT 114
24841: PUSH
24842: EMPTY
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: ST_TO_ADDR
24862: GO 25237
24864: LD_INT 18
24866: DOUBLE
24867: EQUAL
24868: IFTRUE 24872
24870: GO 25008
24872: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24873: LD_ADDR_VAR 0 1
24877: PUSH
24878: LD_INT 2
24880: PUSH
24881: LD_INT 4
24883: PUSH
24884: LD_INT 5
24886: PUSH
24887: LD_INT 7
24889: PUSH
24890: LD_INT 11
24892: PUSH
24893: LD_INT 12
24895: PUSH
24896: LD_INT 15
24898: PUSH
24899: LD_INT 16
24901: PUSH
24902: LD_INT 20
24904: PUSH
24905: LD_INT 21
24907: PUSH
24908: LD_INT 22
24910: PUSH
24911: LD_INT 23
24913: PUSH
24914: LD_INT 25
24916: PUSH
24917: LD_INT 26
24919: PUSH
24920: LD_INT 30
24922: PUSH
24923: LD_INT 31
24925: PUSH
24926: LD_INT 32
24928: PUSH
24929: LD_INT 33
24931: PUSH
24932: LD_INT 34
24934: PUSH
24935: LD_INT 35
24937: PUSH
24938: LD_INT 36
24940: PUSH
24941: EMPTY
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: PUSH
24964: LD_INT 101
24966: PUSH
24967: LD_INT 102
24969: PUSH
24970: LD_INT 103
24972: PUSH
24973: LD_INT 106
24975: PUSH
24976: LD_INT 108
24978: PUSH
24979: LD_INT 112
24981: PUSH
24982: LD_INT 113
24984: PUSH
24985: LD_INT 114
24987: PUSH
24988: LD_INT 115
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: PUSH
25002: EMPTY
25003: LIST
25004: LIST
25005: ST_TO_ADDR
25006: GO 25237
25008: LD_INT 19
25010: DOUBLE
25011: EQUAL
25012: IFTRUE 25016
25014: GO 25236
25016: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25017: LD_ADDR_VAR 0 1
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 3
25030: PUSH
25031: LD_INT 4
25033: PUSH
25034: LD_INT 5
25036: PUSH
25037: LD_INT 6
25039: PUSH
25040: LD_INT 7
25042: PUSH
25043: LD_INT 8
25045: PUSH
25046: LD_INT 9
25048: PUSH
25049: LD_INT 10
25051: PUSH
25052: LD_INT 11
25054: PUSH
25055: LD_INT 12
25057: PUSH
25058: LD_INT 13
25060: PUSH
25061: LD_INT 14
25063: PUSH
25064: LD_INT 15
25066: PUSH
25067: LD_INT 16
25069: PUSH
25070: LD_INT 17
25072: PUSH
25073: LD_INT 18
25075: PUSH
25076: LD_INT 19
25078: PUSH
25079: LD_INT 20
25081: PUSH
25082: LD_INT 21
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_INT 23
25090: PUSH
25091: LD_INT 24
25093: PUSH
25094: LD_INT 25
25096: PUSH
25097: LD_INT 26
25099: PUSH
25100: LD_INT 27
25102: PUSH
25103: LD_INT 28
25105: PUSH
25106: LD_INT 29
25108: PUSH
25109: LD_INT 30
25111: PUSH
25112: LD_INT 31
25114: PUSH
25115: LD_INT 32
25117: PUSH
25118: LD_INT 33
25120: PUSH
25121: LD_INT 34
25123: PUSH
25124: LD_INT 35
25126: PUSH
25127: LD_INT 36
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: LIST
25142: LIST
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: LIST
25151: LIST
25152: LIST
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 101
25170: PUSH
25171: LD_INT 102
25173: PUSH
25174: LD_INT 103
25176: PUSH
25177: LD_INT 104
25179: PUSH
25180: LD_INT 105
25182: PUSH
25183: LD_INT 106
25185: PUSH
25186: LD_INT 107
25188: PUSH
25189: LD_INT 108
25191: PUSH
25192: LD_INT 109
25194: PUSH
25195: LD_INT 110
25197: PUSH
25198: LD_INT 111
25200: PUSH
25201: LD_INT 112
25203: PUSH
25204: LD_INT 113
25206: PUSH
25207: LD_INT 114
25209: PUSH
25210: LD_INT 115
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: ST_TO_ADDR
25234: GO 25237
25236: POP
// end else
25237: GO 25456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25239: LD_ADDR_VAR 0 1
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 2
25249: PUSH
25250: LD_INT 3
25252: PUSH
25253: LD_INT 4
25255: PUSH
25256: LD_INT 5
25258: PUSH
25259: LD_INT 6
25261: PUSH
25262: LD_INT 7
25264: PUSH
25265: LD_INT 8
25267: PUSH
25268: LD_INT 9
25270: PUSH
25271: LD_INT 10
25273: PUSH
25274: LD_INT 11
25276: PUSH
25277: LD_INT 12
25279: PUSH
25280: LD_INT 13
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: LD_INT 15
25288: PUSH
25289: LD_INT 16
25291: PUSH
25292: LD_INT 17
25294: PUSH
25295: LD_INT 18
25297: PUSH
25298: LD_INT 19
25300: PUSH
25301: LD_INT 20
25303: PUSH
25304: LD_INT 21
25306: PUSH
25307: LD_INT 22
25309: PUSH
25310: LD_INT 23
25312: PUSH
25313: LD_INT 24
25315: PUSH
25316: LD_INT 25
25318: PUSH
25319: LD_INT 26
25321: PUSH
25322: LD_INT 27
25324: PUSH
25325: LD_INT 28
25327: PUSH
25328: LD_INT 29
25330: PUSH
25331: LD_INT 30
25333: PUSH
25334: LD_INT 31
25336: PUSH
25337: LD_INT 32
25339: PUSH
25340: LD_INT 33
25342: PUSH
25343: LD_INT 34
25345: PUSH
25346: LD_INT 35
25348: PUSH
25349: LD_INT 36
25351: PUSH
25352: EMPTY
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: LIST
25372: LIST
25373: LIST
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: PUSH
25390: LD_INT 101
25392: PUSH
25393: LD_INT 102
25395: PUSH
25396: LD_INT 103
25398: PUSH
25399: LD_INT 104
25401: PUSH
25402: LD_INT 105
25404: PUSH
25405: LD_INT 106
25407: PUSH
25408: LD_INT 107
25410: PUSH
25411: LD_INT 108
25413: PUSH
25414: LD_INT 109
25416: PUSH
25417: LD_INT 110
25419: PUSH
25420: LD_INT 111
25422: PUSH
25423: LD_INT 112
25425: PUSH
25426: LD_INT 113
25428: PUSH
25429: LD_INT 114
25431: PUSH
25432: LD_INT 115
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: ST_TO_ADDR
// if result then
25456: LD_VAR 0 1
25460: IFFALSE 25749
// begin normal :=  ;
25462: LD_ADDR_VAR 0 3
25466: PUSH
25467: LD_STRING 
25469: ST_TO_ADDR
// hardcore :=  ;
25470: LD_ADDR_VAR 0 4
25474: PUSH
25475: LD_STRING 
25477: ST_TO_ADDR
// for i = 1 to normalCounter do
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: DOUBLE
25484: LD_INT 1
25486: DEC
25487: ST_TO_ADDR
25488: LD_EXP 91
25492: PUSH
25493: FOR_TO
25494: IFFALSE 25595
// begin tmp := 0 ;
25496: LD_ADDR_VAR 0 2
25500: PUSH
25501: LD_STRING 0
25503: ST_TO_ADDR
// if result [ 1 ] then
25504: LD_VAR 0 1
25508: PUSH
25509: LD_INT 1
25511: ARRAY
25512: IFFALSE 25577
// if result [ 1 ] [ 1 ] = i then
25514: LD_VAR 0 1
25518: PUSH
25519: LD_INT 1
25521: ARRAY
25522: PUSH
25523: LD_INT 1
25525: ARRAY
25526: PUSH
25527: LD_VAR 0 5
25531: EQUAL
25532: IFFALSE 25577
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25534: LD_ADDR_VAR 0 1
25538: PUSH
25539: LD_VAR 0 1
25543: PPUSH
25544: LD_INT 1
25546: PPUSH
25547: LD_VAR 0 1
25551: PUSH
25552: LD_INT 1
25554: ARRAY
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: CALL_OW 3
25563: PPUSH
25564: CALL_OW 1
25568: ST_TO_ADDR
// tmp := 1 ;
25569: LD_ADDR_VAR 0 2
25573: PUSH
25574: LD_STRING 1
25576: ST_TO_ADDR
// end ; normal := normal & tmp ;
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_VAR 0 3
25586: PUSH
25587: LD_VAR 0 2
25591: STR
25592: ST_TO_ADDR
// end ;
25593: GO 25493
25595: POP
25596: POP
// for i = 1 to hardcoreCounter do
25597: LD_ADDR_VAR 0 5
25601: PUSH
25602: DOUBLE
25603: LD_INT 1
25605: DEC
25606: ST_TO_ADDR
25607: LD_EXP 92
25611: PUSH
25612: FOR_TO
25613: IFFALSE 25718
// begin tmp := 0 ;
25615: LD_ADDR_VAR 0 2
25619: PUSH
25620: LD_STRING 0
25622: ST_TO_ADDR
// if result [ 2 ] then
25623: LD_VAR 0 1
25627: PUSH
25628: LD_INT 2
25630: ARRAY
25631: IFFALSE 25700
// if result [ 2 ] [ 1 ] = 100 + i then
25633: LD_VAR 0 1
25637: PUSH
25638: LD_INT 2
25640: ARRAY
25641: PUSH
25642: LD_INT 1
25644: ARRAY
25645: PUSH
25646: LD_INT 100
25648: PUSH
25649: LD_VAR 0 5
25653: PLUS
25654: EQUAL
25655: IFFALSE 25700
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25657: LD_ADDR_VAR 0 1
25661: PUSH
25662: LD_VAR 0 1
25666: PPUSH
25667: LD_INT 2
25669: PPUSH
25670: LD_VAR 0 1
25674: PUSH
25675: LD_INT 2
25677: ARRAY
25678: PPUSH
25679: LD_INT 1
25681: PPUSH
25682: CALL_OW 3
25686: PPUSH
25687: CALL_OW 1
25691: ST_TO_ADDR
// tmp := 1 ;
25692: LD_ADDR_VAR 0 2
25696: PUSH
25697: LD_STRING 1
25699: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25700: LD_ADDR_VAR 0 4
25704: PUSH
25705: LD_VAR 0 4
25709: PUSH
25710: LD_VAR 0 2
25714: STR
25715: ST_TO_ADDR
// end ;
25716: GO 25612
25718: POP
25719: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25720: LD_STRING getStreamItemsFromMission("
25722: PUSH
25723: LD_VAR 0 3
25727: STR
25728: PUSH
25729: LD_STRING ","
25731: STR
25732: PUSH
25733: LD_VAR 0 4
25737: STR
25738: PUSH
25739: LD_STRING ")
25741: STR
25742: PPUSH
25743: CALL_OW 559
// end else
25747: GO 25756
// ToLua ( getStreamItemsFromMission("","") ) ;
25749: LD_STRING getStreamItemsFromMission("","")
25751: PPUSH
25752: CALL_OW 559
// end ;
25756: LD_VAR 0 1
25760: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25761: LD_EXP 90
25765: PUSH
25766: LD_EXP 95
25770: AND
25771: IFFALSE 25895
25773: GO 25775
25775: DISABLE
25776: LD_INT 0
25778: PPUSH
25779: PPUSH
// begin enable ;
25780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_OWVAR 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 34
25803: PUSH
25804: LD_INT 7
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 45
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: LD_INT 34
25823: PUSH
25824: LD_INT 28
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 34
25833: PUSH
25834: LD_INT 47
25836: PUSH
25837: EMPTY
25838: LIST
25839: LIST
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: LIST
25845: LIST
25846: LIST
25847: PUSH
25848: EMPTY
25849: LIST
25850: LIST
25851: PPUSH
25852: CALL_OW 69
25856: ST_TO_ADDR
// if not tmp then
25857: LD_VAR 0 2
25861: NOT
25862: IFFALSE 25866
// exit ;
25864: GO 25895
// for i in tmp do
25866: LD_ADDR_VAR 0 1
25870: PUSH
25871: LD_VAR 0 2
25875: PUSH
25876: FOR_IN
25877: IFFALSE 25893
// begin SetLives ( i , 0 ) ;
25879: LD_VAR 0 1
25883: PPUSH
25884: LD_INT 0
25886: PPUSH
25887: CALL_OW 234
// end ;
25891: GO 25876
25893: POP
25894: POP
// end ;
25895: PPOPN 2
25897: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25898: LD_EXP 90
25902: PUSH
25903: LD_EXP 96
25907: AND
25908: IFFALSE 25992
25910: GO 25912
25912: DISABLE
25913: LD_INT 0
25915: PPUSH
25916: PPUSH
// begin enable ;
25917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25918: LD_ADDR_VAR 0 2
25922: PUSH
25923: LD_INT 22
25925: PUSH
25926: LD_OWVAR 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 32
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PPUSH
25949: CALL_OW 69
25953: ST_TO_ADDR
// if not tmp then
25954: LD_VAR 0 2
25958: NOT
25959: IFFALSE 25963
// exit ;
25961: GO 25992
// for i in tmp do
25963: LD_ADDR_VAR 0 1
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: FOR_IN
25974: IFFALSE 25990
// begin SetLives ( i , 0 ) ;
25976: LD_VAR 0 1
25980: PPUSH
25981: LD_INT 0
25983: PPUSH
25984: CALL_OW 234
// end ;
25988: GO 25973
25990: POP
25991: POP
// end ;
25992: PPOPN 2
25994: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25995: LD_EXP 90
25999: PUSH
26000: LD_EXP 93
26004: AND
26005: IFFALSE 26098
26007: GO 26009
26009: DISABLE
26010: LD_INT 0
26012: PPUSH
// begin enable ;
26013: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 25
26036: PUSH
26037: LD_INT 5
26039: PUSH
26040: EMPTY
26041: LIST
26042: LIST
26043: PUSH
26044: LD_INT 25
26046: PUSH
26047: LD_INT 9
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 25
26056: PUSH
26057: LD_INT 8
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: EMPTY
26065: LIST
26066: LIST
26067: LIST
26068: LIST
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PPUSH
26074: CALL_OW 69
26078: PUSH
26079: FOR_IN
26080: IFFALSE 26096
// begin SetClass ( i , 1 ) ;
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_INT 1
26089: PPUSH
26090: CALL_OW 336
// end ;
26094: GO 26079
26096: POP
26097: POP
// end ;
26098: PPOPN 1
26100: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26101: LD_EXP 90
26105: PUSH
26106: LD_EXP 94
26110: AND
26111: PUSH
26112: LD_OWVAR 65
26116: PUSH
26117: LD_INT 7
26119: LESS
26120: AND
26121: IFFALSE 26135
26123: GO 26125
26125: DISABLE
// begin enable ;
26126: ENABLE
// game_speed := 7 ;
26127: LD_ADDR_OWVAR 65
26131: PUSH
26132: LD_INT 7
26134: ST_TO_ADDR
// end ;
26135: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26136: LD_EXP 90
26140: PUSH
26141: LD_EXP 97
26145: AND
26146: IFFALSE 26348
26148: GO 26150
26150: DISABLE
26151: LD_INT 0
26153: PPUSH
26154: PPUSH
26155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26156: LD_ADDR_VAR 0 3
26160: PUSH
26161: LD_INT 81
26163: PUSH
26164: LD_OWVAR 2
26168: PUSH
26169: EMPTY
26170: LIST
26171: LIST
26172: PUSH
26173: LD_INT 21
26175: PUSH
26176: LD_INT 1
26178: PUSH
26179: EMPTY
26180: LIST
26181: LIST
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PPUSH
26187: CALL_OW 69
26191: ST_TO_ADDR
// if not tmp then
26192: LD_VAR 0 3
26196: NOT
26197: IFFALSE 26201
// exit ;
26199: GO 26348
// if tmp > 5 then
26201: LD_VAR 0 3
26205: PUSH
26206: LD_INT 5
26208: GREATER
26209: IFFALSE 26221
// k := 5 else
26211: LD_ADDR_VAR 0 2
26215: PUSH
26216: LD_INT 5
26218: ST_TO_ADDR
26219: GO 26231
// k := tmp ;
26221: LD_ADDR_VAR 0 2
26225: PUSH
26226: LD_VAR 0 3
26230: ST_TO_ADDR
// for i := 1 to k do
26231: LD_ADDR_VAR 0 1
26235: PUSH
26236: DOUBLE
26237: LD_INT 1
26239: DEC
26240: ST_TO_ADDR
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_TO
26247: IFFALSE 26346
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26249: LD_VAR 0 3
26253: PUSH
26254: LD_VAR 0 1
26258: ARRAY
26259: PPUSH
26260: LD_VAR 0 1
26264: PUSH
26265: LD_INT 4
26267: MOD
26268: PUSH
26269: LD_INT 1
26271: PLUS
26272: PPUSH
26273: CALL_OW 259
26277: PUSH
26278: LD_INT 10
26280: LESS
26281: IFFALSE 26344
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26283: LD_VAR 0 3
26287: PUSH
26288: LD_VAR 0 1
26292: ARRAY
26293: PPUSH
26294: LD_VAR 0 1
26298: PUSH
26299: LD_INT 4
26301: MOD
26302: PUSH
26303: LD_INT 1
26305: PLUS
26306: PPUSH
26307: LD_VAR 0 3
26311: PUSH
26312: LD_VAR 0 1
26316: ARRAY
26317: PPUSH
26318: LD_VAR 0 1
26322: PUSH
26323: LD_INT 4
26325: MOD
26326: PUSH
26327: LD_INT 1
26329: PLUS
26330: PPUSH
26331: CALL_OW 259
26335: PUSH
26336: LD_INT 1
26338: PLUS
26339: PPUSH
26340: CALL_OW 237
26344: GO 26246
26346: POP
26347: POP
// end ;
26348: PPOPN 3
26350: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26351: LD_EXP 90
26355: PUSH
26356: LD_EXP 98
26360: AND
26361: IFFALSE 26381
26363: GO 26365
26365: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26366: LD_INT 4
26368: PPUSH
26369: LD_OWVAR 2
26373: PPUSH
26374: LD_INT 0
26376: PPUSH
26377: CALL_OW 324
26381: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26382: LD_EXP 90
26386: PUSH
26387: LD_EXP 127
26391: AND
26392: IFFALSE 26412
26394: GO 26396
26396: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26397: LD_INT 19
26399: PPUSH
26400: LD_OWVAR 2
26404: PPUSH
26405: LD_INT 0
26407: PPUSH
26408: CALL_OW 324
26412: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26413: LD_EXP 90
26417: PUSH
26418: LD_EXP 99
26422: AND
26423: IFFALSE 26525
26425: GO 26427
26427: DISABLE
26428: LD_INT 0
26430: PPUSH
26431: PPUSH
// begin enable ;
26432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26433: LD_ADDR_VAR 0 2
26437: PUSH
26438: LD_INT 22
26440: PUSH
26441: LD_OWVAR 2
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 2
26452: PUSH
26453: LD_INT 34
26455: PUSH
26456: LD_INT 11
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 34
26465: PUSH
26466: LD_INT 30
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: LIST
26477: PUSH
26478: EMPTY
26479: LIST
26480: LIST
26481: PPUSH
26482: CALL_OW 69
26486: ST_TO_ADDR
// if not tmp then
26487: LD_VAR 0 2
26491: NOT
26492: IFFALSE 26496
// exit ;
26494: GO 26525
// for i in tmp do
26496: LD_ADDR_VAR 0 1
26500: PUSH
26501: LD_VAR 0 2
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26523
// begin SetLives ( i , 0 ) ;
26509: LD_VAR 0 1
26513: PPUSH
26514: LD_INT 0
26516: PPUSH
26517: CALL_OW 234
// end ;
26521: GO 26506
26523: POP
26524: POP
// end ;
26525: PPOPN 2
26527: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26528: LD_EXP 90
26532: PUSH
26533: LD_EXP 100
26537: AND
26538: IFFALSE 26558
26540: GO 26542
26542: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26543: LD_INT 32
26545: PPUSH
26546: LD_OWVAR 2
26550: PPUSH
26551: LD_INT 0
26553: PPUSH
26554: CALL_OW 324
26558: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26559: LD_EXP 90
26563: PUSH
26564: LD_EXP 101
26568: AND
26569: IFFALSE 26750
26571: GO 26573
26573: DISABLE
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
26578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26579: LD_ADDR_VAR 0 2
26583: PUSH
26584: LD_INT 22
26586: PUSH
26587: LD_OWVAR 2
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 33
26598: PUSH
26599: LD_INT 3
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PPUSH
26610: CALL_OW 69
26614: ST_TO_ADDR
// if not tmp then
26615: LD_VAR 0 2
26619: NOT
26620: IFFALSE 26624
// exit ;
26622: GO 26750
// side := 0 ;
26624: LD_ADDR_VAR 0 3
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
// for i := 1 to 8 do
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: DOUBLE
26638: LD_INT 1
26640: DEC
26641: ST_TO_ADDR
26642: LD_INT 8
26644: PUSH
26645: FOR_TO
26646: IFFALSE 26694
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26648: LD_OWVAR 2
26652: PUSH
26653: LD_VAR 0 1
26657: NONEQUAL
26658: PUSH
26659: LD_OWVAR 2
26663: PPUSH
26664: LD_VAR 0 1
26668: PPUSH
26669: CALL_OW 81
26673: PUSH
26674: LD_INT 2
26676: EQUAL
26677: AND
26678: IFFALSE 26692
// begin side := i ;
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: ST_TO_ADDR
// break ;
26690: GO 26694
// end ;
26692: GO 26645
26694: POP
26695: POP
// if not side then
26696: LD_VAR 0 3
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26750
// for i := 1 to tmp do
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: DOUBLE
26711: LD_INT 1
26713: DEC
26714: ST_TO_ADDR
26715: LD_VAR 0 2
26719: PUSH
26720: FOR_TO
26721: IFFALSE 26748
// if Prob ( 60 ) then
26723: LD_INT 60
26725: PPUSH
26726: CALL_OW 13
26730: IFFALSE 26746
// SetSide ( i , side ) ;
26732: LD_VAR 0 1
26736: PPUSH
26737: LD_VAR 0 3
26741: PPUSH
26742: CALL_OW 235
26746: GO 26720
26748: POP
26749: POP
// end ;
26750: PPOPN 3
26752: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26753: LD_EXP 90
26757: PUSH
26758: LD_EXP 103
26762: AND
26763: IFFALSE 26882
26765: GO 26767
26767: DISABLE
26768: LD_INT 0
26770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_OWVAR 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 3
26800: PUSH
26801: LD_INT 23
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: EMPTY
26816: LIST
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: PUSH
26825: FOR_IN
26826: IFFALSE 26880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 257
26837: PUSH
26838: LD_INT 1
26840: PUSH
26841: LD_INT 2
26843: PUSH
26844: LD_INT 3
26846: PUSH
26847: LD_INT 4
26849: PUSH
26850: EMPTY
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: IN
26856: IFFALSE 26878
// SetClass ( un , rand ( 1 , 4 ) ) ;
26858: LD_VAR 0 1
26862: PPUSH
26863: LD_INT 1
26865: PPUSH
26866: LD_INT 4
26868: PPUSH
26869: CALL_OW 12
26873: PPUSH
26874: CALL_OW 336
26878: GO 26825
26880: POP
26881: POP
// end ;
26882: PPOPN 1
26884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26885: LD_EXP 90
26889: PUSH
26890: LD_EXP 102
26894: AND
26895: IFFALSE 26974
26897: GO 26899
26899: DISABLE
26900: LD_INT 0
26902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26903: LD_ADDR_VAR 0 1
26907: PUSH
26908: LD_INT 22
26910: PUSH
26911: LD_OWVAR 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PUSH
26920: LD_INT 21
26922: PUSH
26923: LD_INT 3
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PPUSH
26934: CALL_OW 69
26938: ST_TO_ADDR
// if not tmp then
26939: LD_VAR 0 1
26943: NOT
26944: IFFALSE 26948
// exit ;
26946: GO 26974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26948: LD_VAR 0 1
26952: PUSH
26953: LD_INT 1
26955: PPUSH
26956: LD_VAR 0 1
26960: PPUSH
26961: CALL_OW 12
26965: ARRAY
26966: PPUSH
26967: LD_INT 100
26969: PPUSH
26970: CALL_OW 234
// end ;
26974: PPOPN 1
26976: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26977: LD_EXP 90
26981: PUSH
26982: LD_EXP 104
26986: AND
26987: IFFALSE 27085
26989: GO 26991
26991: DISABLE
26992: LD_INT 0
26994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26995: LD_ADDR_VAR 0 1
26999: PUSH
27000: LD_INT 22
27002: PUSH
27003: LD_OWVAR 2
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 21
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PPUSH
27026: CALL_OW 69
27030: ST_TO_ADDR
// if not tmp then
27031: LD_VAR 0 1
27035: NOT
27036: IFFALSE 27040
// exit ;
27038: GO 27085
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27040: LD_VAR 0 1
27044: PUSH
27045: LD_INT 1
27047: PPUSH
27048: LD_VAR 0 1
27052: PPUSH
27053: CALL_OW 12
27057: ARRAY
27058: PPUSH
27059: LD_INT 1
27061: PPUSH
27062: LD_INT 4
27064: PPUSH
27065: CALL_OW 12
27069: PPUSH
27070: LD_INT 3000
27072: PPUSH
27073: LD_INT 9000
27075: PPUSH
27076: CALL_OW 12
27080: PPUSH
27081: CALL_OW 492
// end ;
27085: PPOPN 1
27087: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27088: LD_EXP 90
27092: PUSH
27093: LD_EXP 105
27097: AND
27098: IFFALSE 27118
27100: GO 27102
27102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27103: LD_INT 1
27105: PPUSH
27106: LD_OWVAR 2
27110: PPUSH
27111: LD_INT 0
27113: PPUSH
27114: CALL_OW 324
27118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27119: LD_EXP 90
27123: PUSH
27124: LD_EXP 106
27128: AND
27129: IFFALSE 27212
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27138: LD_ADDR_VAR 0 2
27142: PUSH
27143: LD_INT 22
27145: PUSH
27146: LD_OWVAR 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 21
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PPUSH
27169: CALL_OW 69
27173: ST_TO_ADDR
// if not tmp then
27174: LD_VAR 0 2
27178: NOT
27179: IFFALSE 27183
// exit ;
27181: GO 27212
// for i in tmp do
27183: LD_ADDR_VAR 0 1
27187: PUSH
27188: LD_VAR 0 2
27192: PUSH
27193: FOR_IN
27194: IFFALSE 27210
// SetBLevel ( i , 10 ) ;
27196: LD_VAR 0 1
27200: PPUSH
27201: LD_INT 10
27203: PPUSH
27204: CALL_OW 241
27208: GO 27193
27210: POP
27211: POP
// end ;
27212: PPOPN 2
27214: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27215: LD_EXP 90
27219: PUSH
27220: LD_EXP 107
27224: AND
27225: IFFALSE 27336
27227: GO 27229
27229: DISABLE
27230: LD_INT 0
27232: PPUSH
27233: PPUSH
27234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_INT 22
27242: PUSH
27243: LD_OWVAR 2
27247: PUSH
27248: EMPTY
27249: LIST
27250: LIST
27251: PUSH
27252: LD_INT 25
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PPUSH
27266: CALL_OW 69
27270: ST_TO_ADDR
// if not tmp then
27271: LD_VAR 0 3
27275: NOT
27276: IFFALSE 27280
// exit ;
27278: GO 27336
// un := tmp [ rand ( 1 , tmp ) ] ;
27280: LD_ADDR_VAR 0 2
27284: PUSH
27285: LD_VAR 0 3
27289: PUSH
27290: LD_INT 1
27292: PPUSH
27293: LD_VAR 0 3
27297: PPUSH
27298: CALL_OW 12
27302: ARRAY
27303: ST_TO_ADDR
// if Crawls ( un ) then
27304: LD_VAR 0 2
27308: PPUSH
27309: CALL_OW 318
27313: IFFALSE 27324
// ComWalk ( un ) ;
27315: LD_VAR 0 2
27319: PPUSH
27320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27324: LD_VAR 0 2
27328: PPUSH
27329: LD_INT 5
27331: PPUSH
27332: CALL_OW 336
// end ;
27336: PPOPN 3
27338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27339: LD_EXP 90
27343: PUSH
27344: LD_EXP 108
27348: AND
27349: PUSH
27350: LD_OWVAR 67
27354: PUSH
27355: LD_INT 3
27357: LESS
27358: AND
27359: IFFALSE 27378
27361: GO 27363
27363: DISABLE
// Difficulty := Difficulty + 1 ;
27364: LD_ADDR_OWVAR 67
27368: PUSH
27369: LD_OWVAR 67
27373: PUSH
27374: LD_INT 1
27376: PLUS
27377: ST_TO_ADDR
27378: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27379: LD_EXP 90
27383: PUSH
27384: LD_EXP 109
27388: AND
27389: IFFALSE 27492
27391: GO 27393
27393: DISABLE
27394: LD_INT 0
27396: PPUSH
// begin for i := 1 to 5 do
27397: LD_ADDR_VAR 0 1
27401: PUSH
27402: DOUBLE
27403: LD_INT 1
27405: DEC
27406: ST_TO_ADDR
27407: LD_INT 5
27409: PUSH
27410: FOR_TO
27411: IFFALSE 27490
// begin uc_nation := nation_nature ;
27413: LD_ADDR_OWVAR 21
27417: PUSH
27418: LD_INT 0
27420: ST_TO_ADDR
// uc_side := 0 ;
27421: LD_ADDR_OWVAR 20
27425: PUSH
27426: LD_INT 0
27428: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27429: LD_ADDR_OWVAR 29
27433: PUSH
27434: LD_INT 12
27436: PUSH
27437: LD_INT 12
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: ST_TO_ADDR
// hc_agressivity := 20 ;
27444: LD_ADDR_OWVAR 35
27448: PUSH
27449: LD_INT 20
27451: ST_TO_ADDR
// hc_class := class_tiger ;
27452: LD_ADDR_OWVAR 28
27456: PUSH
27457: LD_INT 14
27459: ST_TO_ADDR
// hc_gallery :=  ;
27460: LD_ADDR_OWVAR 33
27464: PUSH
27465: LD_STRING 
27467: ST_TO_ADDR
// hc_name :=  ;
27468: LD_ADDR_OWVAR 26
27472: PUSH
27473: LD_STRING 
27475: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27476: CALL_OW 44
27480: PPUSH
27481: LD_INT 0
27483: PPUSH
27484: CALL_OW 51
// end ;
27488: GO 27410
27490: POP
27491: POP
// end ;
27492: PPOPN 1
27494: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27495: LD_EXP 90
27499: PUSH
27500: LD_EXP 110
27504: AND
27505: IFFALSE 27514
27507: GO 27509
27509: DISABLE
// StreamSibBomb ;
27510: CALL 27515 0 0
27514: END
// export function StreamSibBomb ; var i , x , y ; begin
27515: LD_INT 0
27517: PPUSH
27518: PPUSH
27519: PPUSH
27520: PPUSH
// result := false ;
27521: LD_ADDR_VAR 0 1
27525: PUSH
27526: LD_INT 0
27528: ST_TO_ADDR
// for i := 1 to 16 do
27529: LD_ADDR_VAR 0 2
27533: PUSH
27534: DOUBLE
27535: LD_INT 1
27537: DEC
27538: ST_TO_ADDR
27539: LD_INT 16
27541: PUSH
27542: FOR_TO
27543: IFFALSE 27742
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_INT 10
27552: PUSH
27553: LD_INT 20
27555: PUSH
27556: LD_INT 30
27558: PUSH
27559: LD_INT 40
27561: PUSH
27562: LD_INT 50
27564: PUSH
27565: LD_INT 60
27567: PUSH
27568: LD_INT 70
27570: PUSH
27571: LD_INT 80
27573: PUSH
27574: LD_INT 90
27576: PUSH
27577: LD_INT 100
27579: PUSH
27580: LD_INT 110
27582: PUSH
27583: LD_INT 120
27585: PUSH
27586: LD_INT 130
27588: PUSH
27589: LD_INT 140
27591: PUSH
27592: LD_INT 150
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: PUSH
27612: LD_INT 1
27614: PPUSH
27615: LD_INT 15
27617: PPUSH
27618: CALL_OW 12
27622: ARRAY
27623: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27624: LD_ADDR_VAR 0 4
27628: PUSH
27629: LD_INT 10
27631: PUSH
27632: LD_INT 20
27634: PUSH
27635: LD_INT 30
27637: PUSH
27638: LD_INT 40
27640: PUSH
27641: LD_INT 50
27643: PUSH
27644: LD_INT 60
27646: PUSH
27647: LD_INT 70
27649: PUSH
27650: LD_INT 80
27652: PUSH
27653: LD_INT 90
27655: PUSH
27656: LD_INT 100
27658: PUSH
27659: LD_INT 110
27661: PUSH
27662: LD_INT 120
27664: PUSH
27665: LD_INT 130
27667: PUSH
27668: LD_INT 140
27670: PUSH
27671: LD_INT 150
27673: PUSH
27674: EMPTY
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PPUSH
27694: LD_INT 15
27696: PPUSH
27697: CALL_OW 12
27701: ARRAY
27702: ST_TO_ADDR
// if ValidHex ( x , y ) then
27703: LD_VAR 0 3
27707: PPUSH
27708: LD_VAR 0 4
27712: PPUSH
27713: CALL_OW 488
27717: IFFALSE 27740
// begin result := [ x , y ] ;
27719: LD_ADDR_VAR 0 1
27723: PUSH
27724: LD_VAR 0 3
27728: PUSH
27729: LD_VAR 0 4
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: ST_TO_ADDR
// break ;
27738: GO 27742
// end ; end ;
27740: GO 27542
27742: POP
27743: POP
// if result then
27744: LD_VAR 0 1
27748: IFFALSE 27808
// begin ToLua ( playSibBomb() ) ;
27750: LD_STRING playSibBomb()
27752: PPUSH
27753: CALL_OW 559
// wait ( 0 0$14 ) ;
27757: LD_INT 490
27759: PPUSH
27760: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27764: LD_VAR 0 1
27768: PUSH
27769: LD_INT 1
27771: ARRAY
27772: PPUSH
27773: LD_VAR 0 1
27777: PUSH
27778: LD_INT 2
27780: ARRAY
27781: PPUSH
27782: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27786: LD_VAR 0 1
27790: PUSH
27791: LD_INT 1
27793: ARRAY
27794: PPUSH
27795: LD_VAR 0 1
27799: PUSH
27800: LD_INT 2
27802: ARRAY
27803: PPUSH
27804: CALL_OW 429
// end ; end ;
27808: LD_VAR 0 1
27812: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27813: LD_EXP 90
27817: PUSH
27818: LD_EXP 112
27822: AND
27823: IFFALSE 27835
27825: GO 27827
27827: DISABLE
// YouLost (  ) ;
27828: LD_STRING 
27830: PPUSH
27831: CALL_OW 104
27835: END
// every 0 0$1 trigger StreamModeActive and sFog do
27836: LD_EXP 90
27840: PUSH
27841: LD_EXP 111
27845: AND
27846: IFFALSE 27860
27848: GO 27850
27850: DISABLE
// FogOff ( your_side ) ;
27851: LD_OWVAR 2
27855: PPUSH
27856: CALL_OW 344
27860: END
// every 0 0$1 trigger StreamModeActive and sSun do
27861: LD_EXP 90
27865: PUSH
27866: LD_EXP 113
27870: AND
27871: IFFALSE 27899
27873: GO 27875
27875: DISABLE
// begin solar_recharge_percent := 0 ;
27876: LD_ADDR_OWVAR 79
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27884: LD_INT 10500
27886: PPUSH
27887: CALL_OW 67
// solar_recharge_percent := 100 ;
27891: LD_ADDR_OWVAR 79
27895: PUSH
27896: LD_INT 100
27898: ST_TO_ADDR
// end ;
27899: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27900: LD_EXP 90
27904: PUSH
27905: LD_EXP 114
27909: AND
27910: IFFALSE 28149
27912: GO 27914
27914: DISABLE
27915: LD_INT 0
27917: PPUSH
27918: PPUSH
27919: PPUSH
// begin tmp := [ ] ;
27920: LD_ADDR_VAR 0 3
27924: PUSH
27925: EMPTY
27926: ST_TO_ADDR
// for i := 1 to 6 do
27927: LD_ADDR_VAR 0 1
27931: PUSH
27932: DOUBLE
27933: LD_INT 1
27935: DEC
27936: ST_TO_ADDR
27937: LD_INT 6
27939: PUSH
27940: FOR_TO
27941: IFFALSE 28046
// begin uc_nation := nation_nature ;
27943: LD_ADDR_OWVAR 21
27947: PUSH
27948: LD_INT 0
27950: ST_TO_ADDR
// uc_side := 0 ;
27951: LD_ADDR_OWVAR 20
27955: PUSH
27956: LD_INT 0
27958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27959: LD_ADDR_OWVAR 29
27963: PUSH
27964: LD_INT 12
27966: PUSH
27967: LD_INT 12
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: ST_TO_ADDR
// hc_agressivity := 20 ;
27974: LD_ADDR_OWVAR 35
27978: PUSH
27979: LD_INT 20
27981: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27982: LD_ADDR_OWVAR 28
27986: PUSH
27987: LD_INT 17
27989: ST_TO_ADDR
// hc_gallery :=  ;
27990: LD_ADDR_OWVAR 33
27994: PUSH
27995: LD_STRING 
27997: ST_TO_ADDR
// hc_name :=  ;
27998: LD_ADDR_OWVAR 26
28002: PUSH
28003: LD_STRING 
28005: ST_TO_ADDR
// un := CreateHuman ;
28006: LD_ADDR_VAR 0 2
28010: PUSH
28011: CALL_OW 44
28015: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28016: LD_VAR 0 2
28020: PPUSH
28021: LD_INT 1
28023: PPUSH
28024: CALL_OW 51
// tmp := tmp ^ un ;
28028: LD_ADDR_VAR 0 3
28032: PUSH
28033: LD_VAR 0 3
28037: PUSH
28038: LD_VAR 0 2
28042: ADD
28043: ST_TO_ADDR
// end ;
28044: GO 27940
28046: POP
28047: POP
// repeat wait ( 0 0$1 ) ;
28048: LD_INT 35
28050: PPUSH
28051: CALL_OW 67
// for un in tmp do
28055: LD_ADDR_VAR 0 2
28059: PUSH
28060: LD_VAR 0 3
28064: PUSH
28065: FOR_IN
28066: IFFALSE 28140
// begin if IsDead ( un ) then
28068: LD_VAR 0 2
28072: PPUSH
28073: CALL_OW 301
28077: IFFALSE 28097
// begin tmp := tmp diff un ;
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_VAR 0 3
28088: PUSH
28089: LD_VAR 0 2
28093: DIFF
28094: ST_TO_ADDR
// continue ;
28095: GO 28065
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28097: LD_VAR 0 2
28101: PPUSH
28102: LD_INT 3
28104: PUSH
28105: LD_INT 22
28107: PUSH
28108: LD_INT 0
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PPUSH
28119: CALL_OW 69
28123: PPUSH
28124: LD_VAR 0 2
28128: PPUSH
28129: CALL_OW 74
28133: PPUSH
28134: CALL_OW 115
// end ;
28138: GO 28065
28140: POP
28141: POP
// until not tmp ;
28142: LD_VAR 0 3
28146: NOT
28147: IFFALSE 28048
// end ;
28149: PPOPN 3
28151: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28152: LD_EXP 90
28156: PUSH
28157: LD_EXP 115
28161: AND
28162: IFFALSE 28216
28164: GO 28166
28166: DISABLE
// begin ToLua ( displayTroll(); ) ;
28167: LD_STRING displayTroll();
28169: PPUSH
28170: CALL_OW 559
// wait ( 3 3$00 ) ;
28174: LD_INT 6300
28176: PPUSH
28177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28181: LD_STRING hideTroll();
28183: PPUSH
28184: CALL_OW 559
// wait ( 1 1$00 ) ;
28188: LD_INT 2100
28190: PPUSH
28191: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28195: LD_STRING displayTroll();
28197: PPUSH
28198: CALL_OW 559
// wait ( 1 1$00 ) ;
28202: LD_INT 2100
28204: PPUSH
28205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28209: LD_STRING hideTroll();
28211: PPUSH
28212: CALL_OW 559
// end ;
28216: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28217: LD_EXP 90
28221: PUSH
28222: LD_EXP 116
28226: AND
28227: IFFALSE 28290
28229: GO 28231
28231: DISABLE
28232: LD_INT 0
28234: PPUSH
// begin p := 0 ;
28235: LD_ADDR_VAR 0 1
28239: PUSH
28240: LD_INT 0
28242: ST_TO_ADDR
// repeat game_speed := 1 ;
28243: LD_ADDR_OWVAR 65
28247: PUSH
28248: LD_INT 1
28250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28251: LD_INT 35
28253: PPUSH
28254: CALL_OW 67
// p := p + 1 ;
28258: LD_ADDR_VAR 0 1
28262: PUSH
28263: LD_VAR 0 1
28267: PUSH
28268: LD_INT 1
28270: PLUS
28271: ST_TO_ADDR
// until p >= 60 ;
28272: LD_VAR 0 1
28276: PUSH
28277: LD_INT 60
28279: GREATEREQUAL
28280: IFFALSE 28243
// game_speed := 4 ;
28282: LD_ADDR_OWVAR 65
28286: PUSH
28287: LD_INT 4
28289: ST_TO_ADDR
// end ;
28290: PPOPN 1
28292: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28293: LD_EXP 90
28297: PUSH
28298: LD_EXP 117
28302: AND
28303: IFFALSE 28449
28305: GO 28307
28307: DISABLE
28308: LD_INT 0
28310: PPUSH
28311: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28312: LD_ADDR_VAR 0 1
28316: PUSH
28317: LD_INT 22
28319: PUSH
28320: LD_OWVAR 2
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: LD_INT 30
28334: PUSH
28335: LD_INT 0
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: LD_INT 30
28344: PUSH
28345: LD_INT 1
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 69
28365: ST_TO_ADDR
// if not depot then
28366: LD_VAR 0 1
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 28449
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28375: LD_ADDR_VAR 0 2
28379: PUSH
28380: LD_VAR 0 1
28384: PUSH
28385: LD_INT 1
28387: PPUSH
28388: LD_VAR 0 1
28392: PPUSH
28393: CALL_OW 12
28397: ARRAY
28398: PPUSH
28399: CALL_OW 274
28403: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28404: LD_VAR 0 2
28408: PPUSH
28409: LD_INT 1
28411: PPUSH
28412: LD_INT 0
28414: PPUSH
28415: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28419: LD_VAR 0 2
28423: PPUSH
28424: LD_INT 2
28426: PPUSH
28427: LD_INT 0
28429: PPUSH
28430: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28434: LD_VAR 0 2
28438: PPUSH
28439: LD_INT 3
28441: PPUSH
28442: LD_INT 0
28444: PPUSH
28445: CALL_OW 277
// end ;
28449: PPOPN 2
28451: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28452: LD_EXP 90
28456: PUSH
28457: LD_EXP 118
28461: AND
28462: IFFALSE 28559
28464: GO 28466
28466: DISABLE
28467: LD_INT 0
28469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28470: LD_ADDR_VAR 0 1
28474: PUSH
28475: LD_INT 22
28477: PUSH
28478: LD_OWVAR 2
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 21
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 3
28499: PUSH
28500: LD_INT 23
28502: PUSH
28503: LD_INT 0
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: LIST
28518: PPUSH
28519: CALL_OW 69
28523: ST_TO_ADDR
// if not tmp then
28524: LD_VAR 0 1
28528: NOT
28529: IFFALSE 28533
// exit ;
28531: GO 28559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28533: LD_VAR 0 1
28537: PUSH
28538: LD_INT 1
28540: PPUSH
28541: LD_VAR 0 1
28545: PPUSH
28546: CALL_OW 12
28550: ARRAY
28551: PPUSH
28552: LD_INT 200
28554: PPUSH
28555: CALL_OW 234
// end ;
28559: PPOPN 1
28561: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28562: LD_EXP 90
28566: PUSH
28567: LD_EXP 119
28571: AND
28572: IFFALSE 28651
28574: GO 28576
28576: DISABLE
28577: LD_INT 0
28579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28580: LD_ADDR_VAR 0 1
28584: PUSH
28585: LD_INT 22
28587: PUSH
28588: LD_OWVAR 2
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 21
28599: PUSH
28600: LD_INT 2
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PPUSH
28611: CALL_OW 69
28615: ST_TO_ADDR
// if not tmp then
28616: LD_VAR 0 1
28620: NOT
28621: IFFALSE 28625
// exit ;
28623: GO 28651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28625: LD_VAR 0 1
28629: PUSH
28630: LD_INT 1
28632: PPUSH
28633: LD_VAR 0 1
28637: PPUSH
28638: CALL_OW 12
28642: ARRAY
28643: PPUSH
28644: LD_INT 60
28646: PPUSH
28647: CALL_OW 234
// end ;
28651: PPOPN 1
28653: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28654: LD_EXP 90
28658: PUSH
28659: LD_EXP 120
28663: AND
28664: IFFALSE 28763
28666: GO 28668
28668: DISABLE
28669: LD_INT 0
28671: PPUSH
28672: PPUSH
// begin enable ;
28673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28674: LD_ADDR_VAR 0 1
28678: PUSH
28679: LD_INT 22
28681: PUSH
28682: LD_OWVAR 2
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 61
28693: PUSH
28694: EMPTY
28695: LIST
28696: PUSH
28697: LD_INT 33
28699: PUSH
28700: LD_INT 2
28702: PUSH
28703: EMPTY
28704: LIST
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: PPUSH
28712: CALL_OW 69
28716: ST_TO_ADDR
// if not tmp then
28717: LD_VAR 0 1
28721: NOT
28722: IFFALSE 28726
// exit ;
28724: GO 28763
// for i in tmp do
28726: LD_ADDR_VAR 0 2
28730: PUSH
28731: LD_VAR 0 1
28735: PUSH
28736: FOR_IN
28737: IFFALSE 28761
// if IsControledBy ( i ) then
28739: LD_VAR 0 2
28743: PPUSH
28744: CALL_OW 312
28748: IFFALSE 28759
// ComUnlink ( i ) ;
28750: LD_VAR 0 2
28754: PPUSH
28755: CALL_OW 136
28759: GO 28736
28761: POP
28762: POP
// end ;
28763: PPOPN 2
28765: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28766: LD_EXP 90
28770: PUSH
28771: LD_EXP 121
28775: AND
28776: IFFALSE 28916
28778: GO 28780
28780: DISABLE
28781: LD_INT 0
28783: PPUSH
28784: PPUSH
// begin ToLua ( displayPowell(); ) ;
28785: LD_STRING displayPowell();
28787: PPUSH
28788: CALL_OW 559
// uc_side := 0 ;
28792: LD_ADDR_OWVAR 20
28796: PUSH
28797: LD_INT 0
28799: ST_TO_ADDR
// uc_nation := 2 ;
28800: LD_ADDR_OWVAR 21
28804: PUSH
28805: LD_INT 2
28807: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28808: LD_ADDR_OWVAR 37
28812: PUSH
28813: LD_INT 14
28815: ST_TO_ADDR
// vc_engine := engine_siberite ;
28816: LD_ADDR_OWVAR 39
28820: PUSH
28821: LD_INT 3
28823: ST_TO_ADDR
// vc_control := control_apeman ;
28824: LD_ADDR_OWVAR 38
28828: PUSH
28829: LD_INT 5
28831: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28832: LD_ADDR_OWVAR 40
28836: PUSH
28837: LD_INT 29
28839: ST_TO_ADDR
// un := CreateVehicle ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: CALL_OW 45
28849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28850: LD_VAR 0 2
28854: PPUSH
28855: LD_INT 1
28857: PPUSH
28858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28862: LD_INT 35
28864: PPUSH
28865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28869: LD_VAR 0 2
28873: PPUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PPUSH
28886: CALL_OW 69
28890: PPUSH
28891: LD_VAR 0 2
28895: PPUSH
28896: CALL_OW 74
28900: PPUSH
28901: CALL_OW 115
// until IsDead ( un ) ;
28905: LD_VAR 0 2
28909: PPUSH
28910: CALL_OW 301
28914: IFFALSE 28862
// end ;
28916: PPOPN 2
28918: END
// every 0 0$1 trigger StreamModeActive and sStu do
28919: LD_EXP 90
28923: PUSH
28924: LD_EXP 129
28928: AND
28929: IFFALSE 28945
28931: GO 28933
28933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28934: LD_STRING displayStucuk();
28936: PPUSH
28937: CALL_OW 559
// ResetFog ;
28941: CALL_OW 335
// end ;
28945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28946: LD_EXP 90
28950: PUSH
28951: LD_EXP 122
28955: AND
28956: IFFALSE 29097
28958: GO 28960
28960: DISABLE
28961: LD_INT 0
28963: PPUSH
28964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28965: LD_ADDR_VAR 0 2
28969: PUSH
28970: LD_INT 22
28972: PUSH
28973: LD_OWVAR 2
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 21
28984: PUSH
28985: LD_INT 1
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PPUSH
28996: CALL_OW 69
29000: ST_TO_ADDR
// if not tmp then
29001: LD_VAR 0 2
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29097
// un := tmp [ rand ( 1 , tmp ) ] ;
29010: LD_ADDR_VAR 0 1
29014: PUSH
29015: LD_VAR 0 2
29019: PUSH
29020: LD_INT 1
29022: PPUSH
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 12
29032: ARRAY
29033: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29034: LD_VAR 0 1
29038: PPUSH
29039: LD_INT 0
29041: PPUSH
29042: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29046: LD_VAR 0 1
29050: PPUSH
29051: LD_OWVAR 3
29055: PUSH
29056: LD_VAR 0 1
29060: DIFF
29061: PPUSH
29062: LD_VAR 0 1
29066: PPUSH
29067: CALL_OW 74
29071: PPUSH
29072: CALL_OW 115
// wait ( 0 0$20 ) ;
29076: LD_INT 700
29078: PPUSH
29079: CALL_OW 67
// SetSide ( un , your_side ) ;
29083: LD_VAR 0 1
29087: PPUSH
29088: LD_OWVAR 2
29092: PPUSH
29093: CALL_OW 235
// end ;
29097: PPOPN 2
29099: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29100: LD_EXP 90
29104: PUSH
29105: LD_EXP 123
29109: AND
29110: IFFALSE 29216
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29118: LD_ADDR_VAR 0 1
29122: PUSH
29123: LD_INT 22
29125: PUSH
29126: LD_OWVAR 2
29130: PUSH
29131: EMPTY
29132: LIST
29133: LIST
29134: PUSH
29135: LD_INT 2
29137: PUSH
29138: LD_INT 30
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: EMPTY
29145: LIST
29146: LIST
29147: PUSH
29148: LD_INT 30
29150: PUSH
29151: LD_INT 1
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PUSH
29158: EMPTY
29159: LIST
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: PPUSH
29167: CALL_OW 69
29171: ST_TO_ADDR
// if not depot then
29172: LD_VAR 0 1
29176: NOT
29177: IFFALSE 29181
// exit ;
29179: GO 29216
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29181: LD_VAR 0 1
29185: PUSH
29186: LD_INT 1
29188: ARRAY
29189: PPUSH
29190: CALL_OW 250
29194: PPUSH
29195: LD_VAR 0 1
29199: PUSH
29200: LD_INT 1
29202: ARRAY
29203: PPUSH
29204: CALL_OW 251
29208: PPUSH
29209: LD_INT 70
29211: PPUSH
29212: CALL_OW 495
// end ;
29216: PPOPN 1
29218: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29219: LD_EXP 90
29223: PUSH
29224: LD_EXP 124
29228: AND
29229: IFFALSE 29440
29231: GO 29233
29233: DISABLE
29234: LD_INT 0
29236: PPUSH
29237: PPUSH
29238: PPUSH
29239: PPUSH
29240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29241: LD_ADDR_VAR 0 5
29245: PUSH
29246: LD_INT 22
29248: PUSH
29249: LD_OWVAR 2
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PUSH
29258: LD_INT 21
29260: PUSH
29261: LD_INT 1
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: PUSH
29268: EMPTY
29269: LIST
29270: LIST
29271: PPUSH
29272: CALL_OW 69
29276: ST_TO_ADDR
// if not tmp then
29277: LD_VAR 0 5
29281: NOT
29282: IFFALSE 29286
// exit ;
29284: GO 29440
// for i in tmp do
29286: LD_ADDR_VAR 0 1
29290: PUSH
29291: LD_VAR 0 5
29295: PUSH
29296: FOR_IN
29297: IFFALSE 29438
// begin d := rand ( 0 , 5 ) ;
29299: LD_ADDR_VAR 0 4
29303: PUSH
29304: LD_INT 0
29306: PPUSH
29307: LD_INT 5
29309: PPUSH
29310: CALL_OW 12
29314: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29315: LD_ADDR_VAR 0 2
29319: PUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 250
29329: PPUSH
29330: LD_VAR 0 4
29334: PPUSH
29335: LD_INT 3
29337: PPUSH
29338: LD_INT 12
29340: PPUSH
29341: CALL_OW 12
29345: PPUSH
29346: CALL_OW 272
29350: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29351: LD_ADDR_VAR 0 3
29355: PUSH
29356: LD_VAR 0 1
29360: PPUSH
29361: CALL_OW 251
29365: PPUSH
29366: LD_VAR 0 4
29370: PPUSH
29371: LD_INT 3
29373: PPUSH
29374: LD_INT 12
29376: PPUSH
29377: CALL_OW 12
29381: PPUSH
29382: CALL_OW 273
29386: ST_TO_ADDR
// if ValidHex ( x , y ) then
29387: LD_VAR 0 2
29391: PPUSH
29392: LD_VAR 0 3
29396: PPUSH
29397: CALL_OW 488
29401: IFFALSE 29436
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29403: LD_VAR 0 1
29407: PPUSH
29408: LD_VAR 0 2
29412: PPUSH
29413: LD_VAR 0 3
29417: PPUSH
29418: LD_INT 3
29420: PPUSH
29421: LD_INT 6
29423: PPUSH
29424: CALL_OW 12
29428: PPUSH
29429: LD_INT 1
29431: PPUSH
29432: CALL_OW 483
// end ;
29436: GO 29296
29438: POP
29439: POP
// end ;
29440: PPOPN 5
29442: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29443: LD_EXP 90
29447: PUSH
29448: LD_EXP 125
29452: AND
29453: IFFALSE 29547
29455: GO 29457
29457: DISABLE
29458: LD_INT 0
29460: PPUSH
29461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29462: LD_ADDR_VAR 0 2
29466: PUSH
29467: LD_INT 22
29469: PUSH
29470: LD_OWVAR 2
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 32
29481: PUSH
29482: LD_INT 1
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 21
29491: PUSH
29492: LD_INT 2
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: EMPTY
29500: LIST
29501: LIST
29502: LIST
29503: PPUSH
29504: CALL_OW 69
29508: ST_TO_ADDR
// if not tmp then
29509: LD_VAR 0 2
29513: NOT
29514: IFFALSE 29518
// exit ;
29516: GO 29547
// for i in tmp do
29518: LD_ADDR_VAR 0 1
29522: PUSH
29523: LD_VAR 0 2
29527: PUSH
29528: FOR_IN
29529: IFFALSE 29545
// SetFuel ( i , 0 ) ;
29531: LD_VAR 0 1
29535: PPUSH
29536: LD_INT 0
29538: PPUSH
29539: CALL_OW 240
29543: GO 29528
29545: POP
29546: POP
// end ;
29547: PPOPN 2
29549: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29550: LD_EXP 90
29554: PUSH
29555: LD_EXP 126
29559: AND
29560: IFFALSE 29626
29562: GO 29564
29564: DISABLE
29565: LD_INT 0
29567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29568: LD_ADDR_VAR 0 1
29572: PUSH
29573: LD_INT 22
29575: PUSH
29576: LD_OWVAR 2
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PUSH
29585: LD_INT 30
29587: PUSH
29588: LD_INT 29
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 69
29603: ST_TO_ADDR
// if not tmp then
29604: LD_VAR 0 1
29608: NOT
29609: IFFALSE 29613
// exit ;
29611: GO 29626
// DestroyUnit ( tmp [ 1 ] ) ;
29613: LD_VAR 0 1
29617: PUSH
29618: LD_INT 1
29620: ARRAY
29621: PPUSH
29622: CALL_OW 65
// end ;
29626: PPOPN 1
29628: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29629: LD_EXP 90
29633: PUSH
29634: LD_EXP 128
29638: AND
29639: IFFALSE 29768
29641: GO 29643
29643: DISABLE
29644: LD_INT 0
29646: PPUSH
// begin uc_side := 0 ;
29647: LD_ADDR_OWVAR 20
29651: PUSH
29652: LD_INT 0
29654: ST_TO_ADDR
// uc_nation := nation_arabian ;
29655: LD_ADDR_OWVAR 21
29659: PUSH
29660: LD_INT 2
29662: ST_TO_ADDR
// hc_gallery :=  ;
29663: LD_ADDR_OWVAR 33
29667: PUSH
29668: LD_STRING 
29670: ST_TO_ADDR
// hc_name :=  ;
29671: LD_ADDR_OWVAR 26
29675: PUSH
29676: LD_STRING 
29678: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29679: LD_INT 1
29681: PPUSH
29682: LD_INT 11
29684: PPUSH
29685: LD_INT 10
29687: PPUSH
29688: CALL_OW 380
// un := CreateHuman ;
29692: LD_ADDR_VAR 0 1
29696: PUSH
29697: CALL_OW 44
29701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29702: LD_VAR 0 1
29706: PPUSH
29707: LD_INT 1
29709: PPUSH
29710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29714: LD_INT 35
29716: PPUSH
29717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29721: LD_VAR 0 1
29725: PPUSH
29726: LD_INT 22
29728: PUSH
29729: LD_OWVAR 2
29733: PUSH
29734: EMPTY
29735: LIST
29736: LIST
29737: PPUSH
29738: CALL_OW 69
29742: PPUSH
29743: LD_VAR 0 1
29747: PPUSH
29748: CALL_OW 74
29752: PPUSH
29753: CALL_OW 115
// until IsDead ( un ) ;
29757: LD_VAR 0 1
29761: PPUSH
29762: CALL_OW 301
29766: IFFALSE 29714
// end ;
29768: PPOPN 1
29770: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29771: LD_EXP 90
29775: PUSH
29776: LD_EXP 130
29780: AND
29781: IFFALSE 29793
29783: GO 29785
29785: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29786: LD_STRING earthquake(getX(game), 0, 32)
29788: PPUSH
29789: CALL_OW 559
29793: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29794: LD_EXP 90
29798: PUSH
29799: LD_EXP 131
29803: AND
29804: IFFALSE 29895
29806: GO 29808
29808: DISABLE
29809: LD_INT 0
29811: PPUSH
// begin enable ;
29812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29813: LD_ADDR_VAR 0 1
29817: PUSH
29818: LD_INT 22
29820: PUSH
29821: LD_OWVAR 2
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: PUSH
29830: LD_INT 21
29832: PUSH
29833: LD_INT 2
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 33
29842: PUSH
29843: LD_INT 3
29845: PUSH
29846: EMPTY
29847: LIST
29848: LIST
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: PPUSH
29855: CALL_OW 69
29859: ST_TO_ADDR
// if not tmp then
29860: LD_VAR 0 1
29864: NOT
29865: IFFALSE 29869
// exit ;
29867: GO 29895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29869: LD_VAR 0 1
29873: PUSH
29874: LD_INT 1
29876: PPUSH
29877: LD_VAR 0 1
29881: PPUSH
29882: CALL_OW 12
29886: ARRAY
29887: PPUSH
29888: LD_INT 1
29890: PPUSH
29891: CALL_OW 234
// end ;
29895: PPOPN 1
29897: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29898: LD_EXP 90
29902: PUSH
29903: LD_EXP 132
29907: AND
29908: IFFALSE 30049
29910: GO 29912
29912: DISABLE
29913: LD_INT 0
29915: PPUSH
29916: PPUSH
29917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_INT 22
29925: PUSH
29926: LD_OWVAR 2
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 25
29937: PUSH
29938: LD_INT 1
29940: PUSH
29941: EMPTY
29942: LIST
29943: LIST
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PPUSH
29949: CALL_OW 69
29953: ST_TO_ADDR
// if not tmp then
29954: LD_VAR 0 3
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 30049
// un := tmp [ rand ( 1 , tmp ) ] ;
29963: LD_ADDR_VAR 0 2
29967: PUSH
29968: LD_VAR 0 3
29972: PUSH
29973: LD_INT 1
29975: PPUSH
29976: LD_VAR 0 3
29980: PPUSH
29981: CALL_OW 12
29985: ARRAY
29986: ST_TO_ADDR
// if Crawls ( un ) then
29987: LD_VAR 0 2
29991: PPUSH
29992: CALL_OW 318
29996: IFFALSE 30007
// ComWalk ( un ) ;
29998: LD_VAR 0 2
30002: PPUSH
30003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30007: LD_VAR 0 2
30011: PPUSH
30012: LD_INT 9
30014: PPUSH
30015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30019: LD_INT 28
30021: PPUSH
30022: LD_OWVAR 2
30026: PPUSH
30027: LD_INT 2
30029: PPUSH
30030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30034: LD_INT 29
30036: PPUSH
30037: LD_OWVAR 2
30041: PPUSH
30042: LD_INT 2
30044: PPUSH
30045: CALL_OW 322
// end ;
30049: PPOPN 3
30051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30052: LD_EXP 90
30056: PUSH
30057: LD_EXP 133
30061: AND
30062: IFFALSE 30173
30064: GO 30066
30066: DISABLE
30067: LD_INT 0
30069: PPUSH
30070: PPUSH
30071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30072: LD_ADDR_VAR 0 3
30076: PUSH
30077: LD_INT 22
30079: PUSH
30080: LD_OWVAR 2
30084: PUSH
30085: EMPTY
30086: LIST
30087: LIST
30088: PUSH
30089: LD_INT 25
30091: PUSH
30092: LD_INT 1
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: EMPTY
30100: LIST
30101: LIST
30102: PPUSH
30103: CALL_OW 69
30107: ST_TO_ADDR
// if not tmp then
30108: LD_VAR 0 3
30112: NOT
30113: IFFALSE 30117
// exit ;
30115: GO 30173
// un := tmp [ rand ( 1 , tmp ) ] ;
30117: LD_ADDR_VAR 0 2
30121: PUSH
30122: LD_VAR 0 3
30126: PUSH
30127: LD_INT 1
30129: PPUSH
30130: LD_VAR 0 3
30134: PPUSH
30135: CALL_OW 12
30139: ARRAY
30140: ST_TO_ADDR
// if Crawls ( un ) then
30141: LD_VAR 0 2
30145: PPUSH
30146: CALL_OW 318
30150: IFFALSE 30161
// ComWalk ( un ) ;
30152: LD_VAR 0 2
30156: PPUSH
30157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30161: LD_VAR 0 2
30165: PPUSH
30166: LD_INT 8
30168: PPUSH
30169: CALL_OW 336
// end ;
30173: PPOPN 3
30175: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30176: LD_EXP 90
30180: PUSH
30181: LD_EXP 134
30185: AND
30186: IFFALSE 30330
30188: GO 30190
30190: DISABLE
30191: LD_INT 0
30193: PPUSH
30194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30195: LD_ADDR_VAR 0 2
30199: PUSH
30200: LD_INT 22
30202: PUSH
30203: LD_OWVAR 2
30207: PUSH
30208: EMPTY
30209: LIST
30210: LIST
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 2
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 34
30227: PUSH
30228: LD_INT 12
30230: PUSH
30231: EMPTY
30232: LIST
30233: LIST
30234: PUSH
30235: LD_INT 34
30237: PUSH
30238: LD_INT 51
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 34
30247: PUSH
30248: LD_INT 32
30250: PUSH
30251: EMPTY
30252: LIST
30253: LIST
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 69
30270: ST_TO_ADDR
// if not tmp then
30271: LD_VAR 0 2
30275: NOT
30276: IFFALSE 30280
// exit ;
30278: GO 30330
// for i in tmp do
30280: LD_ADDR_VAR 0 1
30284: PUSH
30285: LD_VAR 0 2
30289: PUSH
30290: FOR_IN
30291: IFFALSE 30328
// if GetCargo ( i , mat_artifact ) = 0 then
30293: LD_VAR 0 1
30297: PPUSH
30298: LD_INT 4
30300: PPUSH
30301: CALL_OW 289
30305: PUSH
30306: LD_INT 0
30308: EQUAL
30309: IFFALSE 30326
// SetCargo ( i , mat_siberit , 100 ) ;
30311: LD_VAR 0 1
30315: PPUSH
30316: LD_INT 3
30318: PPUSH
30319: LD_INT 100
30321: PPUSH
30322: CALL_OW 290
30326: GO 30290
30328: POP
30329: POP
// end ;
30330: PPOPN 2
30332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30333: LD_EXP 90
30337: PUSH
30338: LD_EXP 135
30342: AND
30343: IFFALSE 30526
30345: GO 30347
30347: DISABLE
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30352: LD_ADDR_VAR 0 2
30356: PUSH
30357: LD_INT 22
30359: PUSH
30360: LD_OWVAR 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PPUSH
30369: CALL_OW 69
30373: ST_TO_ADDR
// if not tmp then
30374: LD_VAR 0 2
30378: NOT
30379: IFFALSE 30383
// exit ;
30381: GO 30526
// for i := 1 to 2 do
30383: LD_ADDR_VAR 0 1
30387: PUSH
30388: DOUBLE
30389: LD_INT 1
30391: DEC
30392: ST_TO_ADDR
30393: LD_INT 2
30395: PUSH
30396: FOR_TO
30397: IFFALSE 30524
// begin uc_side := your_side ;
30399: LD_ADDR_OWVAR 20
30403: PUSH
30404: LD_OWVAR 2
30408: ST_TO_ADDR
// uc_nation := nation_american ;
30409: LD_ADDR_OWVAR 21
30413: PUSH
30414: LD_INT 1
30416: ST_TO_ADDR
// vc_chassis := us_morphling ;
30417: LD_ADDR_OWVAR 37
30421: PUSH
30422: LD_INT 5
30424: ST_TO_ADDR
// vc_engine := engine_siberite ;
30425: LD_ADDR_OWVAR 39
30429: PUSH
30430: LD_INT 3
30432: ST_TO_ADDR
// vc_control := control_computer ;
30433: LD_ADDR_OWVAR 38
30437: PUSH
30438: LD_INT 3
30440: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30441: LD_ADDR_OWVAR 40
30445: PUSH
30446: LD_INT 10
30448: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30449: LD_VAR 0 2
30453: PUSH
30454: LD_INT 1
30456: ARRAY
30457: PPUSH
30458: CALL_OW 310
30462: NOT
30463: IFFALSE 30510
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30465: CALL_OW 45
30469: PPUSH
30470: LD_VAR 0 2
30474: PUSH
30475: LD_INT 1
30477: ARRAY
30478: PPUSH
30479: CALL_OW 250
30483: PPUSH
30484: LD_VAR 0 2
30488: PUSH
30489: LD_INT 1
30491: ARRAY
30492: PPUSH
30493: CALL_OW 251
30497: PPUSH
30498: LD_INT 12
30500: PPUSH
30501: LD_INT 1
30503: PPUSH
30504: CALL_OW 50
30508: GO 30522
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30510: CALL_OW 45
30514: PPUSH
30515: LD_INT 1
30517: PPUSH
30518: CALL_OW 51
// end ;
30522: GO 30396
30524: POP
30525: POP
// end ;
30526: PPOPN 2
30528: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30529: LD_EXP 90
30533: PUSH
30534: LD_EXP 136
30538: AND
30539: IFFALSE 30761
30541: GO 30543
30543: DISABLE
30544: LD_INT 0
30546: PPUSH
30547: PPUSH
30548: PPUSH
30549: PPUSH
30550: PPUSH
30551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30552: LD_ADDR_VAR 0 6
30556: PUSH
30557: LD_INT 22
30559: PUSH
30560: LD_OWVAR 2
30564: PUSH
30565: EMPTY
30566: LIST
30567: LIST
30568: PUSH
30569: LD_INT 21
30571: PUSH
30572: LD_INT 1
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 3
30581: PUSH
30582: LD_INT 23
30584: PUSH
30585: LD_INT 0
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: EMPTY
30593: LIST
30594: LIST
30595: PUSH
30596: EMPTY
30597: LIST
30598: LIST
30599: LIST
30600: PPUSH
30601: CALL_OW 69
30605: ST_TO_ADDR
// if not tmp then
30606: LD_VAR 0 6
30610: NOT
30611: IFFALSE 30615
// exit ;
30613: GO 30761
// s1 := rand ( 1 , 4 ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 1
30622: PPUSH
30623: LD_INT 4
30625: PPUSH
30626: CALL_OW 12
30630: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30631: LD_ADDR_VAR 0 4
30635: PUSH
30636: LD_VAR 0 6
30640: PUSH
30641: LD_INT 1
30643: ARRAY
30644: PPUSH
30645: LD_VAR 0 2
30649: PPUSH
30650: CALL_OW 259
30654: ST_TO_ADDR
// if s1 = 1 then
30655: LD_VAR 0 2
30659: PUSH
30660: LD_INT 1
30662: EQUAL
30663: IFFALSE 30683
// s2 := rand ( 2 , 4 ) else
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 2
30672: PPUSH
30673: LD_INT 4
30675: PPUSH
30676: CALL_OW 12
30680: ST_TO_ADDR
30681: GO 30691
// s2 := 1 ;
30683: LD_ADDR_VAR 0 3
30687: PUSH
30688: LD_INT 1
30690: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30691: LD_ADDR_VAR 0 5
30695: PUSH
30696: LD_VAR 0 6
30700: PUSH
30701: LD_INT 1
30703: ARRAY
30704: PPUSH
30705: LD_VAR 0 3
30709: PPUSH
30710: CALL_OW 259
30714: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30715: LD_VAR 0 6
30719: PUSH
30720: LD_INT 1
30722: ARRAY
30723: PPUSH
30724: LD_VAR 0 2
30728: PPUSH
30729: LD_VAR 0 5
30733: PPUSH
30734: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30738: LD_VAR 0 6
30742: PUSH
30743: LD_INT 1
30745: ARRAY
30746: PPUSH
30747: LD_VAR 0 3
30751: PPUSH
30752: LD_VAR 0 4
30756: PPUSH
30757: CALL_OW 237
// end ;
30761: PPOPN 6
30763: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30764: LD_EXP 90
30768: PUSH
30769: LD_EXP 137
30773: AND
30774: IFFALSE 30853
30776: GO 30778
30778: DISABLE
30779: LD_INT 0
30781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30782: LD_ADDR_VAR 0 1
30786: PUSH
30787: LD_INT 22
30789: PUSH
30790: LD_OWVAR 2
30794: PUSH
30795: EMPTY
30796: LIST
30797: LIST
30798: PUSH
30799: LD_INT 30
30801: PUSH
30802: LD_INT 3
30804: PUSH
30805: EMPTY
30806: LIST
30807: LIST
30808: PUSH
30809: EMPTY
30810: LIST
30811: LIST
30812: PPUSH
30813: CALL_OW 69
30817: ST_TO_ADDR
// if not tmp then
30818: LD_VAR 0 1
30822: NOT
30823: IFFALSE 30827
// exit ;
30825: GO 30853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30827: LD_VAR 0 1
30831: PUSH
30832: LD_INT 1
30834: PPUSH
30835: LD_VAR 0 1
30839: PPUSH
30840: CALL_OW 12
30844: ARRAY
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: CALL_OW 234
// end ;
30853: PPOPN 1
30855: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30856: LD_EXP 90
30860: PUSH
30861: LD_EXP 138
30865: AND
30866: IFFALSE 30978
30868: GO 30870
30870: DISABLE
30871: LD_INT 0
30873: PPUSH
30874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30875: LD_ADDR_VAR 0 2
30879: PUSH
30880: LD_INT 22
30882: PUSH
30883: LD_OWVAR 2
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: PUSH
30892: LD_INT 2
30894: PUSH
30895: LD_INT 30
30897: PUSH
30898: LD_INT 27
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 30
30907: PUSH
30908: LD_INT 26
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: PUSH
30915: LD_INT 30
30917: PUSH
30918: LD_INT 28
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PPUSH
30935: CALL_OW 69
30939: ST_TO_ADDR
// if not tmp then
30940: LD_VAR 0 2
30944: NOT
30945: IFFALSE 30949
// exit ;
30947: GO 30978
// for i in tmp do
30949: LD_ADDR_VAR 0 1
30953: PUSH
30954: LD_VAR 0 2
30958: PUSH
30959: FOR_IN
30960: IFFALSE 30976
// SetLives ( i , 1 ) ;
30962: LD_VAR 0 1
30966: PPUSH
30967: LD_INT 1
30969: PPUSH
30970: CALL_OW 234
30974: GO 30959
30976: POP
30977: POP
// end ;
30978: PPOPN 2
30980: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30981: LD_EXP 90
30985: PUSH
30986: LD_EXP 139
30990: AND
30991: IFFALSE 31265
30993: GO 30995
30995: DISABLE
30996: LD_INT 0
30998: PPUSH
30999: PPUSH
31000: PPUSH
// begin i := rand ( 1 , 7 ) ;
31001: LD_ADDR_VAR 0 1
31005: PUSH
31006: LD_INT 1
31008: PPUSH
31009: LD_INT 7
31011: PPUSH
31012: CALL_OW 12
31016: ST_TO_ADDR
// case i of 1 :
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 1
31024: DOUBLE
31025: EQUAL
31026: IFTRUE 31030
31028: GO 31040
31030: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31031: LD_STRING earthquake(getX(game), 0, 32)
31033: PPUSH
31034: CALL_OW 559
31038: GO 31265
31040: LD_INT 2
31042: DOUBLE
31043: EQUAL
31044: IFTRUE 31048
31046: GO 31062
31048: POP
// begin ToLua ( displayStucuk(); ) ;
31049: LD_STRING displayStucuk();
31051: PPUSH
31052: CALL_OW 559
// ResetFog ;
31056: CALL_OW 335
// end ; 3 :
31060: GO 31265
31062: LD_INT 3
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31174
31070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31071: LD_ADDR_VAR 0 2
31075: PUSH
31076: LD_INT 22
31078: PUSH
31079: LD_OWVAR 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 25
31090: PUSH
31091: LD_INT 1
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: EMPTY
31099: LIST
31100: LIST
31101: PPUSH
31102: CALL_OW 69
31106: ST_TO_ADDR
// if not tmp then
31107: LD_VAR 0 2
31111: NOT
31112: IFFALSE 31116
// exit ;
31114: GO 31265
// un := tmp [ rand ( 1 , tmp ) ] ;
31116: LD_ADDR_VAR 0 3
31120: PUSH
31121: LD_VAR 0 2
31125: PUSH
31126: LD_INT 1
31128: PPUSH
31129: LD_VAR 0 2
31133: PPUSH
31134: CALL_OW 12
31138: ARRAY
31139: ST_TO_ADDR
// if Crawls ( un ) then
31140: LD_VAR 0 3
31144: PPUSH
31145: CALL_OW 318
31149: IFFALSE 31160
// ComWalk ( un ) ;
31151: LD_VAR 0 3
31155: PPUSH
31156: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31160: LD_VAR 0 3
31164: PPUSH
31165: LD_INT 8
31167: PPUSH
31168: CALL_OW 336
// end ; 4 :
31172: GO 31265
31174: LD_INT 4
31176: DOUBLE
31177: EQUAL
31178: IFTRUE 31182
31180: GO 31243
31182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31183: LD_ADDR_VAR 0 2
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_OWVAR 2
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 30
31202: PUSH
31203: LD_INT 29
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 69
31218: ST_TO_ADDR
// if not tmp then
31219: LD_VAR 0 2
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31265
// DestroyUnit ( tmp [ 1 ] ) ;
31228: LD_VAR 0 2
31232: PUSH
31233: LD_INT 1
31235: ARRAY
31236: PPUSH
31237: CALL_OW 65
// end ; 5 .. 7 :
31241: GO 31265
31243: LD_INT 5
31245: DOUBLE
31246: GREATEREQUAL
31247: IFFALSE 31255
31249: LD_INT 7
31251: DOUBLE
31252: LESSEQUAL
31253: IFTRUE 31257
31255: GO 31264
31257: POP
// StreamSibBomb ; end ;
31258: CALL 27515 0 0
31262: GO 31265
31264: POP
// end ;
31265: PPOPN 3
31267: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31268: LD_EXP 90
31272: PUSH
31273: LD_EXP 140
31277: AND
31278: IFFALSE 31434
31280: GO 31282
31282: DISABLE
31283: LD_INT 0
31285: PPUSH
31286: PPUSH
31287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31288: LD_ADDR_VAR 0 2
31292: PUSH
31293: LD_INT 81
31295: PUSH
31296: LD_OWVAR 2
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 2
31307: PUSH
31308: LD_INT 21
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 21
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: LIST
31332: PUSH
31333: EMPTY
31334: LIST
31335: LIST
31336: PPUSH
31337: CALL_OW 69
31341: ST_TO_ADDR
// if not tmp then
31342: LD_VAR 0 2
31346: NOT
31347: IFFALSE 31351
// exit ;
31349: GO 31434
// p := 0 ;
31351: LD_ADDR_VAR 0 3
31355: PUSH
31356: LD_INT 0
31358: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31359: LD_INT 35
31361: PPUSH
31362: CALL_OW 67
// p := p + 1 ;
31366: LD_ADDR_VAR 0 3
31370: PUSH
31371: LD_VAR 0 3
31375: PUSH
31376: LD_INT 1
31378: PLUS
31379: ST_TO_ADDR
// for i in tmp do
31380: LD_ADDR_VAR 0 1
31384: PUSH
31385: LD_VAR 0 2
31389: PUSH
31390: FOR_IN
31391: IFFALSE 31422
// if GetLives ( i ) < 1000 then
31393: LD_VAR 0 1
31397: PPUSH
31398: CALL_OW 256
31402: PUSH
31403: LD_INT 1000
31405: LESS
31406: IFFALSE 31420
// SetLives ( i , 1000 ) ;
31408: LD_VAR 0 1
31412: PPUSH
31413: LD_INT 1000
31415: PPUSH
31416: CALL_OW 234
31420: GO 31390
31422: POP
31423: POP
// until p > 20 ;
31424: LD_VAR 0 3
31428: PUSH
31429: LD_INT 20
31431: GREATER
31432: IFFALSE 31359
// end ;
31434: PPOPN 3
31436: END
// every 0 0$1 trigger StreamModeActive and sTime do
31437: LD_EXP 90
31441: PUSH
31442: LD_EXP 141
31446: AND
31447: IFFALSE 31482
31449: GO 31451
31451: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31452: LD_INT 28
31454: PPUSH
31455: LD_OWVAR 2
31459: PPUSH
31460: LD_INT 2
31462: PPUSH
31463: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31467: LD_INT 30
31469: PPUSH
31470: LD_OWVAR 2
31474: PPUSH
31475: LD_INT 2
31477: PPUSH
31478: CALL_OW 322
// end ;
31482: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31483: LD_EXP 90
31487: PUSH
31488: LD_EXP 142
31492: AND
31493: IFFALSE 31614
31495: GO 31497
31497: DISABLE
31498: LD_INT 0
31500: PPUSH
31501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31502: LD_ADDR_VAR 0 2
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_OWVAR 2
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 21
31521: PUSH
31522: LD_INT 1
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 3
31531: PUSH
31532: LD_INT 23
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: PPUSH
31551: CALL_OW 69
31555: ST_TO_ADDR
// if not tmp then
31556: LD_VAR 0 2
31560: NOT
31561: IFFALSE 31565
// exit ;
31563: GO 31614
// for i in tmp do
31565: LD_ADDR_VAR 0 1
31569: PUSH
31570: LD_VAR 0 2
31574: PUSH
31575: FOR_IN
31576: IFFALSE 31612
// begin if Crawls ( i ) then
31578: LD_VAR 0 1
31582: PPUSH
31583: CALL_OW 318
31587: IFFALSE 31598
// ComWalk ( i ) ;
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 138
// SetClass ( i , 2 ) ;
31598: LD_VAR 0 1
31602: PPUSH
31603: LD_INT 2
31605: PPUSH
31606: CALL_OW 336
// end ;
31610: GO 31575
31612: POP
31613: POP
// end ;
31614: PPOPN 2
31616: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31617: LD_EXP 90
31621: PUSH
31622: LD_EXP 143
31626: AND
31627: IFFALSE 31908
31629: GO 31631
31631: DISABLE
31632: LD_INT 0
31634: PPUSH
31635: PPUSH
31636: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31637: LD_OWVAR 2
31641: PPUSH
31642: LD_INT 9
31644: PPUSH
31645: LD_INT 1
31647: PPUSH
31648: LD_INT 1
31650: PPUSH
31651: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31655: LD_INT 9
31657: PPUSH
31658: LD_OWVAR 2
31662: PPUSH
31663: CALL_OW 343
// uc_side := 9 ;
31667: LD_ADDR_OWVAR 20
31671: PUSH
31672: LD_INT 9
31674: ST_TO_ADDR
// uc_nation := 2 ;
31675: LD_ADDR_OWVAR 21
31679: PUSH
31680: LD_INT 2
31682: ST_TO_ADDR
// hc_name := Dark Warrior ;
31683: LD_ADDR_OWVAR 26
31687: PUSH
31688: LD_STRING Dark Warrior
31690: ST_TO_ADDR
// hc_gallery :=  ;
31691: LD_ADDR_OWVAR 33
31695: PUSH
31696: LD_STRING 
31698: ST_TO_ADDR
// hc_noskilllimit := true ;
31699: LD_ADDR_OWVAR 76
31703: PUSH
31704: LD_INT 1
31706: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31707: LD_ADDR_OWVAR 31
31711: PUSH
31712: LD_INT 30
31714: PUSH
31715: LD_INT 30
31717: PUSH
31718: LD_INT 30
31720: PUSH
31721: LD_INT 30
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: ST_TO_ADDR
// un := CreateHuman ;
31730: LD_ADDR_VAR 0 3
31734: PUSH
31735: CALL_OW 44
31739: ST_TO_ADDR
// hc_noskilllimit := false ;
31740: LD_ADDR_OWVAR 76
31744: PUSH
31745: LD_INT 0
31747: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31748: LD_VAR 0 3
31752: PPUSH
31753: LD_INT 1
31755: PPUSH
31756: CALL_OW 51
// p := 0 ;
31760: LD_ADDR_VAR 0 2
31764: PUSH
31765: LD_INT 0
31767: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31768: LD_INT 35
31770: PPUSH
31771: CALL_OW 67
// p := p + 1 ;
31775: LD_ADDR_VAR 0 2
31779: PUSH
31780: LD_VAR 0 2
31784: PUSH
31785: LD_INT 1
31787: PLUS
31788: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31789: LD_VAR 0 3
31793: PPUSH
31794: CALL_OW 256
31798: PUSH
31799: LD_INT 1000
31801: LESS
31802: IFFALSE 31816
// SetLives ( un , 1000 ) ;
31804: LD_VAR 0 3
31808: PPUSH
31809: LD_INT 1000
31811: PPUSH
31812: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31816: LD_VAR 0 3
31820: PPUSH
31821: LD_INT 81
31823: PUSH
31824: LD_OWVAR 2
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 91
31835: PUSH
31836: LD_VAR 0 3
31840: PUSH
31841: LD_INT 30
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: LIST
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PPUSH
31853: CALL_OW 69
31857: PPUSH
31858: LD_VAR 0 3
31862: PPUSH
31863: CALL_OW 74
31867: PPUSH
31868: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31872: LD_VAR 0 2
31876: PUSH
31877: LD_INT 60
31879: GREATER
31880: PUSH
31881: LD_VAR 0 3
31885: PPUSH
31886: CALL_OW 301
31890: OR
31891: IFFALSE 31768
// if un then
31893: LD_VAR 0 3
31897: IFFALSE 31908
// RemoveUnit ( un ) ;
31899: LD_VAR 0 3
31903: PPUSH
31904: CALL_OW 64
// end ;
31908: PPOPN 3
31910: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31911: LD_INT 0
31913: PPUSH
// case cmd of 301 :
31914: LD_VAR 0 1
31918: PUSH
31919: LD_INT 301
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 31959
31927: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31928: LD_VAR 0 6
31932: PPUSH
31933: LD_VAR 0 7
31937: PPUSH
31938: LD_VAR 0 8
31942: PPUSH
31943: LD_VAR 0 4
31947: PPUSH
31948: LD_VAR 0 5
31952: PPUSH
31953: CALL 33160 0 5
31957: GO 32080
31959: LD_INT 302
31961: DOUBLE
31962: EQUAL
31963: IFTRUE 31967
31965: GO 32004
31967: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31968: LD_VAR 0 6
31972: PPUSH
31973: LD_VAR 0 7
31977: PPUSH
31978: LD_VAR 0 8
31982: PPUSH
31983: LD_VAR 0 9
31987: PPUSH
31988: LD_VAR 0 4
31992: PPUSH
31993: LD_VAR 0 5
31997: PPUSH
31998: CALL 33251 0 6
32002: GO 32080
32004: LD_INT 303
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32049
32012: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32013: LD_VAR 0 6
32017: PPUSH
32018: LD_VAR 0 7
32022: PPUSH
32023: LD_VAR 0 8
32027: PPUSH
32028: LD_VAR 0 9
32032: PPUSH
32033: LD_VAR 0 4
32037: PPUSH
32038: LD_VAR 0 5
32042: PPUSH
32043: CALL 32085 0 6
32047: GO 32080
32049: LD_INT 304
32051: DOUBLE
32052: EQUAL
32053: IFTRUE 32057
32055: GO 32079
32057: POP
// hHackTeleport ( unit , x , y ) ; end ;
32058: LD_VAR 0 2
32062: PPUSH
32063: LD_VAR 0 4
32067: PPUSH
32068: LD_VAR 0 5
32072: PPUSH
32073: CALL 33844 0 3
32077: GO 32080
32079: POP
// end ;
32080: LD_VAR 0 12
32084: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32085: LD_INT 0
32087: PPUSH
32088: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32089: LD_VAR 0 1
32093: PUSH
32094: LD_INT 1
32096: LESS
32097: PUSH
32098: LD_VAR 0 1
32102: PUSH
32103: LD_INT 3
32105: GREATER
32106: OR
32107: PUSH
32108: LD_VAR 0 5
32112: PPUSH
32113: LD_VAR 0 6
32117: PPUSH
32118: CALL_OW 428
32122: OR
32123: IFFALSE 32127
// exit ;
32125: GO 32847
// uc_side := your_side ;
32127: LD_ADDR_OWVAR 20
32131: PUSH
32132: LD_OWVAR 2
32136: ST_TO_ADDR
// uc_nation := nation ;
32137: LD_ADDR_OWVAR 21
32141: PUSH
32142: LD_VAR 0 1
32146: ST_TO_ADDR
// bc_level = 1 ;
32147: LD_ADDR_OWVAR 43
32151: PUSH
32152: LD_INT 1
32154: ST_TO_ADDR
// case btype of 1 :
32155: LD_VAR 0 2
32159: PUSH
32160: LD_INT 1
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32179
32168: POP
// bc_type := b_depot ; 2 :
32169: LD_ADDR_OWVAR 42
32173: PUSH
32174: LD_INT 0
32176: ST_TO_ADDR
32177: GO 32791
32179: LD_INT 2
32181: DOUBLE
32182: EQUAL
32183: IFTRUE 32187
32185: GO 32198
32187: POP
// bc_type := b_warehouse ; 3 :
32188: LD_ADDR_OWVAR 42
32192: PUSH
32193: LD_INT 1
32195: ST_TO_ADDR
32196: GO 32791
32198: LD_INT 3
32200: DOUBLE
32201: EQUAL
32202: IFTRUE 32206
32204: GO 32217
32206: POP
// bc_type := b_lab ; 4 .. 9 :
32207: LD_ADDR_OWVAR 42
32211: PUSH
32212: LD_INT 6
32214: ST_TO_ADDR
32215: GO 32791
32217: LD_INT 4
32219: DOUBLE
32220: GREATEREQUAL
32221: IFFALSE 32229
32223: LD_INT 9
32225: DOUBLE
32226: LESSEQUAL
32227: IFTRUE 32231
32229: GO 32283
32231: POP
// begin bc_type := b_lab_half ;
32232: LD_ADDR_OWVAR 42
32236: PUSH
32237: LD_INT 7
32239: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32240: LD_ADDR_OWVAR 44
32244: PUSH
32245: LD_INT 10
32247: PUSH
32248: LD_INT 11
32250: PUSH
32251: LD_INT 12
32253: PUSH
32254: LD_INT 15
32256: PUSH
32257: LD_INT 14
32259: PUSH
32260: LD_INT 13
32262: PUSH
32263: EMPTY
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: PUSH
32271: LD_VAR 0 2
32275: PUSH
32276: LD_INT 3
32278: MINUS
32279: ARRAY
32280: ST_TO_ADDR
// end ; 10 .. 13 :
32281: GO 32791
32283: LD_INT 10
32285: DOUBLE
32286: GREATEREQUAL
32287: IFFALSE 32295
32289: LD_INT 13
32291: DOUBLE
32292: LESSEQUAL
32293: IFTRUE 32297
32295: GO 32374
32297: POP
// begin bc_type := b_lab_full ;
32298: LD_ADDR_OWVAR 42
32302: PUSH
32303: LD_INT 8
32305: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32306: LD_ADDR_OWVAR 44
32310: PUSH
32311: LD_INT 10
32313: PUSH
32314: LD_INT 12
32316: PUSH
32317: LD_INT 14
32319: PUSH
32320: LD_INT 13
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: PUSH
32329: LD_VAR 0 2
32333: PUSH
32334: LD_INT 9
32336: MINUS
32337: ARRAY
32338: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32339: LD_ADDR_OWVAR 45
32343: PUSH
32344: LD_INT 11
32346: PUSH
32347: LD_INT 15
32349: PUSH
32350: LD_INT 12
32352: PUSH
32353: LD_INT 15
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: PUSH
32362: LD_VAR 0 2
32366: PUSH
32367: LD_INT 9
32369: MINUS
32370: ARRAY
32371: ST_TO_ADDR
// end ; 14 :
32372: GO 32791
32374: LD_INT 14
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32393
32382: POP
// bc_type := b_workshop ; 15 :
32383: LD_ADDR_OWVAR 42
32387: PUSH
32388: LD_INT 2
32390: ST_TO_ADDR
32391: GO 32791
32393: LD_INT 15
32395: DOUBLE
32396: EQUAL
32397: IFTRUE 32401
32399: GO 32412
32401: POP
// bc_type := b_factory ; 16 :
32402: LD_ADDR_OWVAR 42
32406: PUSH
32407: LD_INT 3
32409: ST_TO_ADDR
32410: GO 32791
32412: LD_INT 16
32414: DOUBLE
32415: EQUAL
32416: IFTRUE 32420
32418: GO 32431
32420: POP
// bc_type := b_ext_gun ; 17 :
32421: LD_ADDR_OWVAR 42
32425: PUSH
32426: LD_INT 17
32428: ST_TO_ADDR
32429: GO 32791
32431: LD_INT 17
32433: DOUBLE
32434: EQUAL
32435: IFTRUE 32439
32437: GO 32467
32439: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32440: LD_ADDR_OWVAR 42
32444: PUSH
32445: LD_INT 19
32447: PUSH
32448: LD_INT 23
32450: PUSH
32451: LD_INT 19
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: LIST
32458: PUSH
32459: LD_VAR 0 1
32463: ARRAY
32464: ST_TO_ADDR
32465: GO 32791
32467: LD_INT 18
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32486
32475: POP
// bc_type := b_ext_radar ; 19 :
32476: LD_ADDR_OWVAR 42
32480: PUSH
32481: LD_INT 20
32483: ST_TO_ADDR
32484: GO 32791
32486: LD_INT 19
32488: DOUBLE
32489: EQUAL
32490: IFTRUE 32494
32492: GO 32505
32494: POP
// bc_type := b_ext_radio ; 20 :
32495: LD_ADDR_OWVAR 42
32499: PUSH
32500: LD_INT 22
32502: ST_TO_ADDR
32503: GO 32791
32505: LD_INT 20
32507: DOUBLE
32508: EQUAL
32509: IFTRUE 32513
32511: GO 32524
32513: POP
// bc_type := b_ext_siberium ; 21 :
32514: LD_ADDR_OWVAR 42
32518: PUSH
32519: LD_INT 21
32521: ST_TO_ADDR
32522: GO 32791
32524: LD_INT 21
32526: DOUBLE
32527: EQUAL
32528: IFTRUE 32532
32530: GO 32543
32532: POP
// bc_type := b_ext_computer ; 22 :
32533: LD_ADDR_OWVAR 42
32537: PUSH
32538: LD_INT 24
32540: ST_TO_ADDR
32541: GO 32791
32543: LD_INT 22
32545: DOUBLE
32546: EQUAL
32547: IFTRUE 32551
32549: GO 32562
32551: POP
// bc_type := b_ext_track ; 23 :
32552: LD_ADDR_OWVAR 42
32556: PUSH
32557: LD_INT 16
32559: ST_TO_ADDR
32560: GO 32791
32562: LD_INT 23
32564: DOUBLE
32565: EQUAL
32566: IFTRUE 32570
32568: GO 32581
32570: POP
// bc_type := b_ext_laser ; 24 :
32571: LD_ADDR_OWVAR 42
32575: PUSH
32576: LD_INT 25
32578: ST_TO_ADDR
32579: GO 32791
32581: LD_INT 24
32583: DOUBLE
32584: EQUAL
32585: IFTRUE 32589
32587: GO 32600
32589: POP
// bc_type := b_control_tower ; 25 :
32590: LD_ADDR_OWVAR 42
32594: PUSH
32595: LD_INT 36
32597: ST_TO_ADDR
32598: GO 32791
32600: LD_INT 25
32602: DOUBLE
32603: EQUAL
32604: IFTRUE 32608
32606: GO 32619
32608: POP
// bc_type := b_breastwork ; 26 :
32609: LD_ADDR_OWVAR 42
32613: PUSH
32614: LD_INT 31
32616: ST_TO_ADDR
32617: GO 32791
32619: LD_INT 26
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32638
32627: POP
// bc_type := b_bunker ; 27 :
32628: LD_ADDR_OWVAR 42
32632: PUSH
32633: LD_INT 32
32635: ST_TO_ADDR
32636: GO 32791
32638: LD_INT 27
32640: DOUBLE
32641: EQUAL
32642: IFTRUE 32646
32644: GO 32657
32646: POP
// bc_type := b_turret ; 28 :
32647: LD_ADDR_OWVAR 42
32651: PUSH
32652: LD_INT 33
32654: ST_TO_ADDR
32655: GO 32791
32657: LD_INT 28
32659: DOUBLE
32660: EQUAL
32661: IFTRUE 32665
32663: GO 32676
32665: POP
// bc_type := b_armoury ; 29 :
32666: LD_ADDR_OWVAR 42
32670: PUSH
32671: LD_INT 4
32673: ST_TO_ADDR
32674: GO 32791
32676: LD_INT 29
32678: DOUBLE
32679: EQUAL
32680: IFTRUE 32684
32682: GO 32695
32684: POP
// bc_type := b_barracks ; 30 :
32685: LD_ADDR_OWVAR 42
32689: PUSH
32690: LD_INT 5
32692: ST_TO_ADDR
32693: GO 32791
32695: LD_INT 30
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32714
32703: POP
// bc_type := b_solar_power ; 31 :
32704: LD_ADDR_OWVAR 42
32708: PUSH
32709: LD_INT 27
32711: ST_TO_ADDR
32712: GO 32791
32714: LD_INT 31
32716: DOUBLE
32717: EQUAL
32718: IFTRUE 32722
32720: GO 32733
32722: POP
// bc_type := b_oil_power ; 32 :
32723: LD_ADDR_OWVAR 42
32727: PUSH
32728: LD_INT 26
32730: ST_TO_ADDR
32731: GO 32791
32733: LD_INT 32
32735: DOUBLE
32736: EQUAL
32737: IFTRUE 32741
32739: GO 32752
32741: POP
// bc_type := b_siberite_power ; 33 :
32742: LD_ADDR_OWVAR 42
32746: PUSH
32747: LD_INT 28
32749: ST_TO_ADDR
32750: GO 32791
32752: LD_INT 33
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32771
32760: POP
// bc_type := b_oil_mine ; 34 :
32761: LD_ADDR_OWVAR 42
32765: PUSH
32766: LD_INT 29
32768: ST_TO_ADDR
32769: GO 32791
32771: LD_INT 34
32773: DOUBLE
32774: EQUAL
32775: IFTRUE 32779
32777: GO 32790
32779: POP
// bc_type := b_siberite_mine ; end ;
32780: LD_ADDR_OWVAR 42
32784: PUSH
32785: LD_INT 30
32787: ST_TO_ADDR
32788: GO 32791
32790: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32791: LD_ADDR_VAR 0 8
32795: PUSH
32796: LD_VAR 0 5
32800: PPUSH
32801: LD_VAR 0 6
32805: PPUSH
32806: LD_VAR 0 3
32810: PPUSH
32811: CALL_OW 47
32815: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32816: LD_OWVAR 42
32820: PUSH
32821: LD_INT 32
32823: PUSH
32824: LD_INT 33
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: IN
32831: IFFALSE 32847
// PlaceWeaponTurret ( b , weapon ) ;
32833: LD_VAR 0 8
32837: PPUSH
32838: LD_VAR 0 4
32842: PPUSH
32843: CALL_OW 431
// end ;
32847: LD_VAR 0 7
32851: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32852: LD_INT 0
32854: PPUSH
32855: PPUSH
32856: PPUSH
32857: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32858: LD_ADDR_VAR 0 4
32862: PUSH
32863: LD_INT 22
32865: PUSH
32866: LD_OWVAR 2
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 2
32877: PUSH
32878: LD_INT 30
32880: PUSH
32881: LD_INT 0
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 30
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: LIST
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: PPUSH
32907: CALL_OW 69
32911: ST_TO_ADDR
// if not tmp then
32912: LD_VAR 0 4
32916: NOT
32917: IFFALSE 32921
// exit ;
32919: GO 32980
// for i in tmp do
32921: LD_ADDR_VAR 0 2
32925: PUSH
32926: LD_VAR 0 4
32930: PUSH
32931: FOR_IN
32932: IFFALSE 32978
// for j = 1 to 3 do
32934: LD_ADDR_VAR 0 3
32938: PUSH
32939: DOUBLE
32940: LD_INT 1
32942: DEC
32943: ST_TO_ADDR
32944: LD_INT 3
32946: PUSH
32947: FOR_TO
32948: IFFALSE 32974
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32950: LD_VAR 0 2
32954: PPUSH
32955: CALL_OW 274
32959: PPUSH
32960: LD_VAR 0 3
32964: PPUSH
32965: LD_INT 99999
32967: PPUSH
32968: CALL_OW 277
32972: GO 32947
32974: POP
32975: POP
32976: GO 32931
32978: POP
32979: POP
// end ;
32980: LD_VAR 0 1
32984: RET
// export function hHackSetLevel10 ; var i , j ; begin
32985: LD_INT 0
32987: PPUSH
32988: PPUSH
32989: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32990: LD_ADDR_VAR 0 2
32994: PUSH
32995: LD_INT 21
32997: PUSH
32998: LD_INT 1
33000: PUSH
33001: EMPTY
33002: LIST
33003: LIST
33004: PPUSH
33005: CALL_OW 69
33009: PUSH
33010: FOR_IN
33011: IFFALSE 33063
// if IsSelected ( i ) then
33013: LD_VAR 0 2
33017: PPUSH
33018: CALL_OW 306
33022: IFFALSE 33061
// begin for j := 1 to 4 do
33024: LD_ADDR_VAR 0 3
33028: PUSH
33029: DOUBLE
33030: LD_INT 1
33032: DEC
33033: ST_TO_ADDR
33034: LD_INT 4
33036: PUSH
33037: FOR_TO
33038: IFFALSE 33059
// SetSkill ( i , j , 10 ) ;
33040: LD_VAR 0 2
33044: PPUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: LD_INT 10
33052: PPUSH
33053: CALL_OW 237
33057: GO 33037
33059: POP
33060: POP
// end ;
33061: GO 33010
33063: POP
33064: POP
// end ;
33065: LD_VAR 0 1
33069: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_INT 22
33082: PUSH
33083: LD_OWVAR 2
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 21
33094: PUSH
33095: LD_INT 1
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: PPUSH
33106: CALL_OW 69
33110: PUSH
33111: FOR_IN
33112: IFFALSE 33153
// begin for j := 1 to 4 do
33114: LD_ADDR_VAR 0 3
33118: PUSH
33119: DOUBLE
33120: LD_INT 1
33122: DEC
33123: ST_TO_ADDR
33124: LD_INT 4
33126: PUSH
33127: FOR_TO
33128: IFFALSE 33149
// SetSkill ( i , j , 10 ) ;
33130: LD_VAR 0 2
33134: PPUSH
33135: LD_VAR 0 3
33139: PPUSH
33140: LD_INT 10
33142: PPUSH
33143: CALL_OW 237
33147: GO 33127
33149: POP
33150: POP
// end ;
33151: GO 33111
33153: POP
33154: POP
// end ;
33155: LD_VAR 0 1
33159: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33160: LD_INT 0
33162: PPUSH
// uc_side := your_side ;
33163: LD_ADDR_OWVAR 20
33167: PUSH
33168: LD_OWVAR 2
33172: ST_TO_ADDR
// uc_nation := nation ;
33173: LD_ADDR_OWVAR 21
33177: PUSH
33178: LD_VAR 0 1
33182: ST_TO_ADDR
// InitHc ;
33183: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33187: LD_INT 0
33189: PPUSH
33190: LD_VAR 0 2
33194: PPUSH
33195: LD_VAR 0 3
33199: PPUSH
33200: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33204: LD_VAR 0 4
33208: PPUSH
33209: LD_VAR 0 5
33213: PPUSH
33214: CALL_OW 428
33218: PUSH
33219: LD_INT 0
33221: EQUAL
33222: IFFALSE 33246
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33224: CALL_OW 44
33228: PPUSH
33229: LD_VAR 0 4
33233: PPUSH
33234: LD_VAR 0 5
33238: PPUSH
33239: LD_INT 1
33241: PPUSH
33242: CALL_OW 48
// end ;
33246: LD_VAR 0 6
33250: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33251: LD_INT 0
33253: PPUSH
33254: PPUSH
// uc_side := your_side ;
33255: LD_ADDR_OWVAR 20
33259: PUSH
33260: LD_OWVAR 2
33264: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33265: LD_VAR 0 1
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: LD_INT 3
33278: PUSH
33279: LD_INT 4
33281: PUSH
33282: LD_INT 5
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: IN
33292: IFFALSE 33304
// uc_nation := nation_american else
33294: LD_ADDR_OWVAR 21
33298: PUSH
33299: LD_INT 1
33301: ST_TO_ADDR
33302: GO 33347
// if chassis in [ 11 , 12 , 13 , 14 ] then
33304: LD_VAR 0 1
33308: PUSH
33309: LD_INT 11
33311: PUSH
33312: LD_INT 12
33314: PUSH
33315: LD_INT 13
33317: PUSH
33318: LD_INT 14
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: IN
33327: IFFALSE 33339
// uc_nation := nation_arabian else
33329: LD_ADDR_OWVAR 21
33333: PUSH
33334: LD_INT 2
33336: ST_TO_ADDR
33337: GO 33347
// uc_nation := nation_russian ;
33339: LD_ADDR_OWVAR 21
33343: PUSH
33344: LD_INT 3
33346: ST_TO_ADDR
// vc_chassis := chassis ;
33347: LD_ADDR_OWVAR 37
33351: PUSH
33352: LD_VAR 0 1
33356: ST_TO_ADDR
// vc_engine := engine ;
33357: LD_ADDR_OWVAR 39
33361: PUSH
33362: LD_VAR 0 2
33366: ST_TO_ADDR
// vc_control := control ;
33367: LD_ADDR_OWVAR 38
33371: PUSH
33372: LD_VAR 0 3
33376: ST_TO_ADDR
// vc_weapon := weapon ;
33377: LD_ADDR_OWVAR 40
33381: PUSH
33382: LD_VAR 0 4
33386: ST_TO_ADDR
// un := CreateVehicle ;
33387: LD_ADDR_VAR 0 8
33391: PUSH
33392: CALL_OW 45
33396: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33397: LD_VAR 0 8
33401: PPUSH
33402: LD_INT 0
33404: PPUSH
33405: LD_INT 5
33407: PPUSH
33408: CALL_OW 12
33412: PPUSH
33413: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33417: LD_VAR 0 8
33421: PPUSH
33422: LD_VAR 0 5
33426: PPUSH
33427: LD_VAR 0 6
33431: PPUSH
33432: LD_INT 1
33434: PPUSH
33435: CALL_OW 48
// end ;
33439: LD_VAR 0 7
33443: RET
// export hInvincible ; every 1 do
33444: GO 33446
33446: DISABLE
// hInvincible := [ ] ;
33447: LD_ADDR_EXP 144
33451: PUSH
33452: EMPTY
33453: ST_TO_ADDR
33454: END
// every 10 do var i ;
33455: GO 33457
33457: DISABLE
33458: LD_INT 0
33460: PPUSH
// begin enable ;
33461: ENABLE
// if not hInvincible then
33462: LD_EXP 144
33466: NOT
33467: IFFALSE 33471
// exit ;
33469: GO 33515
// for i in hInvincible do
33471: LD_ADDR_VAR 0 1
33475: PUSH
33476: LD_EXP 144
33480: PUSH
33481: FOR_IN
33482: IFFALSE 33513
// if GetLives ( i ) < 1000 then
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 256
33493: PUSH
33494: LD_INT 1000
33496: LESS
33497: IFFALSE 33511
// SetLives ( i , 1000 ) ;
33499: LD_VAR 0 1
33503: PPUSH
33504: LD_INT 1000
33506: PPUSH
33507: CALL_OW 234
33511: GO 33481
33513: POP
33514: POP
// end ;
33515: PPOPN 1
33517: END
// export function hHackInvincible ; var i ; begin
33518: LD_INT 0
33520: PPUSH
33521: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33522: LD_ADDR_VAR 0 2
33526: PUSH
33527: LD_INT 2
33529: PUSH
33530: LD_INT 21
33532: PUSH
33533: LD_INT 1
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 21
33542: PUSH
33543: LD_INT 2
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: EMPTY
33551: LIST
33552: LIST
33553: LIST
33554: PPUSH
33555: CALL_OW 69
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33622
// if IsSelected ( i ) then
33563: LD_VAR 0 2
33567: PPUSH
33568: CALL_OW 306
33572: IFFALSE 33620
// begin if i in hInvincible then
33574: LD_VAR 0 2
33578: PUSH
33579: LD_EXP 144
33583: IN
33584: IFFALSE 33604
// hInvincible := hInvincible diff i else
33586: LD_ADDR_EXP 144
33590: PUSH
33591: LD_EXP 144
33595: PUSH
33596: LD_VAR 0 2
33600: DIFF
33601: ST_TO_ADDR
33602: GO 33620
// hInvincible := hInvincible union i ;
33604: LD_ADDR_EXP 144
33608: PUSH
33609: LD_EXP 144
33613: PUSH
33614: LD_VAR 0 2
33618: UNION
33619: ST_TO_ADDR
// end ;
33620: GO 33560
33622: POP
33623: POP
// end ;
33624: LD_VAR 0 1
33628: RET
// export function hHackInvisible ; var i , j ; begin
33629: LD_INT 0
33631: PPUSH
33632: PPUSH
33633: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33634: LD_ADDR_VAR 0 2
33638: PUSH
33639: LD_INT 21
33641: PUSH
33642: LD_INT 1
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PPUSH
33649: CALL_OW 69
33653: PUSH
33654: FOR_IN
33655: IFFALSE 33679
// if IsSelected ( i ) then
33657: LD_VAR 0 2
33661: PPUSH
33662: CALL_OW 306
33666: IFFALSE 33677
// ComForceInvisible ( i ) ;
33668: LD_VAR 0 2
33672: PPUSH
33673: CALL_OW 496
33677: GO 33654
33679: POP
33680: POP
// end ;
33681: LD_VAR 0 1
33685: RET
// export function hHackChangeYourSide ; begin
33686: LD_INT 0
33688: PPUSH
// if your_side = 8 then
33689: LD_OWVAR 2
33693: PUSH
33694: LD_INT 8
33696: EQUAL
33697: IFFALSE 33709
// your_side := 0 else
33699: LD_ADDR_OWVAR 2
33703: PUSH
33704: LD_INT 0
33706: ST_TO_ADDR
33707: GO 33723
// your_side := your_side + 1 ;
33709: LD_ADDR_OWVAR 2
33713: PUSH
33714: LD_OWVAR 2
33718: PUSH
33719: LD_INT 1
33721: PLUS
33722: ST_TO_ADDR
// end ;
33723: LD_VAR 0 1
33727: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33728: LD_INT 0
33730: PPUSH
33731: PPUSH
33732: PPUSH
// for i in all_units do
33733: LD_ADDR_VAR 0 2
33737: PUSH
33738: LD_OWVAR 3
33742: PUSH
33743: FOR_IN
33744: IFFALSE 33822
// if IsSelected ( i ) then
33746: LD_VAR 0 2
33750: PPUSH
33751: CALL_OW 306
33755: IFFALSE 33820
// begin j := GetSide ( i ) ;
33757: LD_ADDR_VAR 0 3
33761: PUSH
33762: LD_VAR 0 2
33766: PPUSH
33767: CALL_OW 255
33771: ST_TO_ADDR
// if j = 8 then
33772: LD_VAR 0 3
33776: PUSH
33777: LD_INT 8
33779: EQUAL
33780: IFFALSE 33792
// j := 0 else
33782: LD_ADDR_VAR 0 3
33786: PUSH
33787: LD_INT 0
33789: ST_TO_ADDR
33790: GO 33806
// j := j + 1 ;
33792: LD_ADDR_VAR 0 3
33796: PUSH
33797: LD_VAR 0 3
33801: PUSH
33802: LD_INT 1
33804: PLUS
33805: ST_TO_ADDR
// SetSide ( i , j ) ;
33806: LD_VAR 0 2
33810: PPUSH
33811: LD_VAR 0 3
33815: PPUSH
33816: CALL_OW 235
// end ;
33820: GO 33743
33822: POP
33823: POP
// end ;
33824: LD_VAR 0 1
33828: RET
// export function hHackFog ; begin
33829: LD_INT 0
33831: PPUSH
// FogOff ( true ) ;
33832: LD_INT 1
33834: PPUSH
33835: CALL_OW 344
// end ;
33839: LD_VAR 0 1
33843: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33844: LD_INT 0
33846: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33847: LD_VAR 0 1
33851: PPUSH
33852: LD_VAR 0 2
33856: PPUSH
33857: LD_VAR 0 3
33861: PPUSH
33862: LD_INT 1
33864: PPUSH
33865: LD_INT 1
33867: PPUSH
33868: CALL_OW 483
// CenterOnXY ( x , y ) ;
33872: LD_VAR 0 2
33876: PPUSH
33877: LD_VAR 0 3
33881: PPUSH
33882: CALL_OW 84
// end ; end_of_file
33886: LD_VAR 0 4
33890: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33891: LD_INT 0
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33897: LD_VAR 0 1
33901: PPUSH
33902: CALL_OW 264
33906: PUSH
33907: LD_EXP 155
33911: EQUAL
33912: IFFALSE 33984
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33914: LD_INT 68
33916: PPUSH
33917: LD_VAR 0 1
33921: PPUSH
33922: CALL_OW 255
33926: PPUSH
33927: CALL_OW 321
33931: PUSH
33932: LD_INT 2
33934: EQUAL
33935: IFFALSE 33947
// eff := 70 else
33937: LD_ADDR_VAR 0 4
33941: PUSH
33942: LD_INT 70
33944: ST_TO_ADDR
33945: GO 33955
// eff := 30 ;
33947: LD_ADDR_VAR 0 4
33951: PUSH
33952: LD_INT 30
33954: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 250
33964: PPUSH
33965: LD_VAR 0 1
33969: PPUSH
33970: CALL_OW 251
33974: PPUSH
33975: LD_VAR 0 4
33979: PPUSH
33980: CALL_OW 495
// end ; end ;
33984: LD_VAR 0 2
33988: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33989: LD_INT 0
33991: PPUSH
// end ;
33992: LD_VAR 0 4
33996: RET
// export function SOS_Command ( cmd ) ; begin
33997: LD_INT 0
33999: PPUSH
// end ;
34000: LD_VAR 0 2
34004: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34005: LD_INT 0
34007: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34008: LD_VAR 0 1
34012: PUSH
34013: LD_INT 254
34015: EQUAL
34016: PUSH
34017: LD_VAR 0 2
34021: PPUSH
34022: CALL_OW 264
34026: PUSH
34027: LD_EXP 153
34031: EQUAL
34032: AND
34033: PUSH
34034: LD_VAR 0 3
34038: PPUSH
34039: CALL_OW 263
34043: PUSH
34044: LD_INT 3
34046: EQUAL
34047: AND
34048: IFFALSE 34064
// HackDestroyVehicle ( unit , selectedUnit ) ;
34050: LD_VAR 0 2
34054: PPUSH
34055: LD_VAR 0 3
34059: PPUSH
34060: CALL 35573 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34064: LD_VAR 0 1
34068: PUSH
34069: LD_INT 255
34071: EQUAL
34072: PUSH
34073: LD_VAR 0 2
34077: PPUSH
34078: CALL_OW 264
34082: PUSH
34083: LD_INT 14
34085: PUSH
34086: LD_INT 53
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: IN
34093: AND
34094: PUSH
34095: LD_VAR 0 4
34099: PPUSH
34100: LD_VAR 0 5
34104: PPUSH
34105: CALL_OW 488
34109: AND
34110: IFFALSE 34134
// CutTreeXYR ( unit , x , y , 12 ) ;
34112: LD_VAR 0 2
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: LD_VAR 0 5
34126: PPUSH
34127: LD_INT 12
34129: PPUSH
34130: CALL 34139 0 4
// end ;
34134: LD_VAR 0 6
34138: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34139: LD_INT 0
34141: PPUSH
34142: PPUSH
34143: PPUSH
34144: PPUSH
34145: PPUSH
34146: PPUSH
34147: PPUSH
34148: PPUSH
34149: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34150: LD_VAR 0 1
34154: NOT
34155: PUSH
34156: LD_VAR 0 2
34160: PPUSH
34161: LD_VAR 0 3
34165: PPUSH
34166: CALL_OW 488
34170: NOT
34171: OR
34172: PUSH
34173: LD_VAR 0 4
34177: NOT
34178: OR
34179: IFFALSE 34183
// exit ;
34181: GO 34523
// list := [ ] ;
34183: LD_ADDR_VAR 0 13
34187: PUSH
34188: EMPTY
34189: ST_TO_ADDR
// if x - r < 0 then
34190: LD_VAR 0 2
34194: PUSH
34195: LD_VAR 0 4
34199: MINUS
34200: PUSH
34201: LD_INT 0
34203: LESS
34204: IFFALSE 34216
// min_x := 0 else
34206: LD_ADDR_VAR 0 7
34210: PUSH
34211: LD_INT 0
34213: ST_TO_ADDR
34214: GO 34232
// min_x := x - r ;
34216: LD_ADDR_VAR 0 7
34220: PUSH
34221: LD_VAR 0 2
34225: PUSH
34226: LD_VAR 0 4
34230: MINUS
34231: ST_TO_ADDR
// if y - r < 0 then
34232: LD_VAR 0 3
34236: PUSH
34237: LD_VAR 0 4
34241: MINUS
34242: PUSH
34243: LD_INT 0
34245: LESS
34246: IFFALSE 34258
// min_y := 0 else
34248: LD_ADDR_VAR 0 8
34252: PUSH
34253: LD_INT 0
34255: ST_TO_ADDR
34256: GO 34274
// min_y := y - r ;
34258: LD_ADDR_VAR 0 8
34262: PUSH
34263: LD_VAR 0 3
34267: PUSH
34268: LD_VAR 0 4
34272: MINUS
34273: ST_TO_ADDR
// max_x := x + r ;
34274: LD_ADDR_VAR 0 9
34278: PUSH
34279: LD_VAR 0 2
34283: PUSH
34284: LD_VAR 0 4
34288: PLUS
34289: ST_TO_ADDR
// max_y := y + r ;
34290: LD_ADDR_VAR 0 10
34294: PUSH
34295: LD_VAR 0 3
34299: PUSH
34300: LD_VAR 0 4
34304: PLUS
34305: ST_TO_ADDR
// for _x = min_x to max_x do
34306: LD_ADDR_VAR 0 11
34310: PUSH
34311: DOUBLE
34312: LD_VAR 0 7
34316: DEC
34317: ST_TO_ADDR
34318: LD_VAR 0 9
34322: PUSH
34323: FOR_TO
34324: IFFALSE 34441
// for _y = min_y to max_y do
34326: LD_ADDR_VAR 0 12
34330: PUSH
34331: DOUBLE
34332: LD_VAR 0 8
34336: DEC
34337: ST_TO_ADDR
34338: LD_VAR 0 10
34342: PUSH
34343: FOR_TO
34344: IFFALSE 34437
// begin if not ValidHex ( _x , _y ) then
34346: LD_VAR 0 11
34350: PPUSH
34351: LD_VAR 0 12
34355: PPUSH
34356: CALL_OW 488
34360: NOT
34361: IFFALSE 34365
// continue ;
34363: GO 34343
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34365: LD_VAR 0 11
34369: PPUSH
34370: LD_VAR 0 12
34374: PPUSH
34375: CALL_OW 351
34379: PUSH
34380: LD_VAR 0 11
34384: PPUSH
34385: LD_VAR 0 12
34389: PPUSH
34390: CALL_OW 554
34394: AND
34395: IFFALSE 34435
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34397: LD_ADDR_VAR 0 13
34401: PUSH
34402: LD_VAR 0 13
34406: PPUSH
34407: LD_VAR 0 13
34411: PUSH
34412: LD_INT 1
34414: PLUS
34415: PPUSH
34416: LD_VAR 0 11
34420: PUSH
34421: LD_VAR 0 12
34425: PUSH
34426: EMPTY
34427: LIST
34428: LIST
34429: PPUSH
34430: CALL_OW 2
34434: ST_TO_ADDR
// end ;
34435: GO 34343
34437: POP
34438: POP
34439: GO 34323
34441: POP
34442: POP
// if not list then
34443: LD_VAR 0 13
34447: NOT
34448: IFFALSE 34452
// exit ;
34450: GO 34523
// for i in list do
34452: LD_ADDR_VAR 0 6
34456: PUSH
34457: LD_VAR 0 13
34461: PUSH
34462: FOR_IN
34463: IFFALSE 34521
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34465: LD_VAR 0 1
34469: PPUSH
34470: LD_STRING M
34472: PUSH
34473: LD_VAR 0 6
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PUSH
34482: LD_VAR 0 6
34486: PUSH
34487: LD_INT 2
34489: ARRAY
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: LD_INT 0
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: PPUSH
34515: CALL_OW 447
34519: GO 34462
34521: POP
34522: POP
// end ;
34523: LD_VAR 0 5
34527: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34528: LD_EXP 145
34532: NOT
34533: IFFALSE 34583
34535: GO 34537
34537: DISABLE
// begin initHack := true ;
34538: LD_ADDR_EXP 145
34542: PUSH
34543: LD_INT 1
34545: ST_TO_ADDR
// hackTanks := [ ] ;
34546: LD_ADDR_EXP 146
34550: PUSH
34551: EMPTY
34552: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34553: LD_ADDR_EXP 147
34557: PUSH
34558: EMPTY
34559: ST_TO_ADDR
// hackLimit := 3 ;
34560: LD_ADDR_EXP 148
34564: PUSH
34565: LD_INT 3
34567: ST_TO_ADDR
// hackDist := 12 ;
34568: LD_ADDR_EXP 149
34572: PUSH
34573: LD_INT 12
34575: ST_TO_ADDR
// hackCounter := [ ] ;
34576: LD_ADDR_EXP 150
34580: PUSH
34581: EMPTY
34582: ST_TO_ADDR
// end ;
34583: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34584: LD_EXP 145
34588: PUSH
34589: LD_INT 34
34591: PUSH
34592: LD_EXP 153
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PPUSH
34601: CALL_OW 69
34605: AND
34606: IFFALSE 34861
34608: GO 34610
34610: DISABLE
34611: LD_INT 0
34613: PPUSH
34614: PPUSH
// begin enable ;
34615: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34616: LD_ADDR_VAR 0 1
34620: PUSH
34621: LD_INT 34
34623: PUSH
34624: LD_EXP 153
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PPUSH
34633: CALL_OW 69
34637: PUSH
34638: FOR_IN
34639: IFFALSE 34859
// begin if not i in hackTanks then
34641: LD_VAR 0 1
34645: PUSH
34646: LD_EXP 146
34650: IN
34651: NOT
34652: IFFALSE 34735
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34654: LD_ADDR_EXP 146
34658: PUSH
34659: LD_EXP 146
34663: PPUSH
34664: LD_EXP 146
34668: PUSH
34669: LD_INT 1
34671: PLUS
34672: PPUSH
34673: LD_VAR 0 1
34677: PPUSH
34678: CALL_OW 1
34682: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34683: LD_ADDR_EXP 147
34687: PUSH
34688: LD_EXP 147
34692: PPUSH
34693: LD_EXP 147
34697: PUSH
34698: LD_INT 1
34700: PLUS
34701: PPUSH
34702: EMPTY
34703: PPUSH
34704: CALL_OW 1
34708: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34709: LD_ADDR_EXP 150
34713: PUSH
34714: LD_EXP 150
34718: PPUSH
34719: LD_EXP 150
34723: PUSH
34724: LD_INT 1
34726: PLUS
34727: PPUSH
34728: EMPTY
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34735: LD_VAR 0 1
34739: PPUSH
34740: CALL_OW 302
34744: NOT
34745: IFFALSE 34758
// begin HackUnlinkAll ( i ) ;
34747: LD_VAR 0 1
34751: PPUSH
34752: CALL 34864 0 1
// continue ;
34756: GO 34638
// end ; HackCheckCapturedStatus ( i ) ;
34758: LD_VAR 0 1
34762: PPUSH
34763: CALL 35307 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34767: LD_ADDR_VAR 0 2
34771: PUSH
34772: LD_INT 81
34774: PUSH
34775: LD_VAR 0 1
34779: PPUSH
34780: CALL_OW 255
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 33
34791: PUSH
34792: LD_INT 3
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 91
34801: PUSH
34802: LD_VAR 0 1
34806: PUSH
34807: LD_EXP 149
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 50
34819: PUSH
34820: EMPTY
34821: LIST
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: PPUSH
34829: CALL_OW 69
34833: ST_TO_ADDR
// if not tmp then
34834: LD_VAR 0 2
34838: NOT
34839: IFFALSE 34843
// continue ;
34841: GO 34638
// HackLink ( i , tmp ) ;
34843: LD_VAR 0 1
34847: PPUSH
34848: LD_VAR 0 2
34852: PPUSH
34853: CALL 35000 0 2
// end ;
34857: GO 34638
34859: POP
34860: POP
// end ;
34861: PPOPN 2
34863: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34864: LD_INT 0
34866: PPUSH
34867: PPUSH
34868: PPUSH
// if not hack in hackTanks then
34869: LD_VAR 0 1
34873: PUSH
34874: LD_EXP 146
34878: IN
34879: NOT
34880: IFFALSE 34884
// exit ;
34882: GO 34995
// index := GetElementIndex ( hackTanks , hack ) ;
34884: LD_ADDR_VAR 0 4
34888: PUSH
34889: LD_EXP 146
34893: PPUSH
34894: LD_VAR 0 1
34898: PPUSH
34899: CALL 40551 0 2
34903: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34904: LD_EXP 147
34908: PUSH
34909: LD_VAR 0 4
34913: ARRAY
34914: IFFALSE 34995
// begin for i in hackTanksCaptured [ index ] do
34916: LD_ADDR_VAR 0 3
34920: PUSH
34921: LD_EXP 147
34925: PUSH
34926: LD_VAR 0 4
34930: ARRAY
34931: PUSH
34932: FOR_IN
34933: IFFALSE 34959
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
34935: LD_VAR 0 3
34939: PUSH
34940: LD_INT 1
34942: ARRAY
34943: PPUSH
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 2
34951: ARRAY
34952: PPUSH
34953: CALL_OW 235
34957: GO 34932
34959: POP
34960: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
34961: LD_ADDR_EXP 147
34965: PUSH
34966: LD_EXP 147
34970: PPUSH
34971: LD_VAR 0 4
34975: PPUSH
34976: EMPTY
34977: PPUSH
34978: CALL_OW 1
34982: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
34983: LD_VAR 0 1
34987: PPUSH
34988: LD_INT 0
34990: PPUSH
34991: CALL_OW 505
// end ; end ;
34995: LD_VAR 0 2
34999: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35000: LD_INT 0
35002: PPUSH
35003: PPUSH
35004: PPUSH
// if not hack in hackTanks or not vehicles then
35005: LD_VAR 0 1
35009: PUSH
35010: LD_EXP 146
35014: IN
35015: NOT
35016: PUSH
35017: LD_VAR 0 2
35021: NOT
35022: OR
35023: IFFALSE 35027
// exit ;
35025: GO 35302
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35027: LD_ADDR_VAR 0 2
35031: PUSH
35032: LD_VAR 0 1
35036: PPUSH
35037: LD_VAR 0 2
35041: PPUSH
35042: LD_INT 1
35044: PPUSH
35045: LD_INT 1
35047: PPUSH
35048: CALL 41201 0 4
35052: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35053: LD_ADDR_VAR 0 5
35057: PUSH
35058: LD_EXP 146
35062: PPUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL 40551 0 2
35072: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35073: LD_EXP 147
35077: PUSH
35078: LD_VAR 0 5
35082: ARRAY
35083: PUSH
35084: LD_EXP 148
35088: LESS
35089: IFFALSE 35278
// begin for i := 1 to vehicles do
35091: LD_ADDR_VAR 0 4
35095: PUSH
35096: DOUBLE
35097: LD_INT 1
35099: DEC
35100: ST_TO_ADDR
35101: LD_VAR 0 2
35105: PUSH
35106: FOR_TO
35107: IFFALSE 35276
// begin if hackTanksCaptured [ index ] = hackLimit then
35109: LD_EXP 147
35113: PUSH
35114: LD_VAR 0 5
35118: ARRAY
35119: PUSH
35120: LD_EXP 148
35124: EQUAL
35125: IFFALSE 35129
// break ;
35127: GO 35276
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35129: LD_ADDR_EXP 150
35133: PUSH
35134: LD_EXP 150
35138: PPUSH
35139: LD_VAR 0 5
35143: PPUSH
35144: LD_EXP 150
35148: PUSH
35149: LD_VAR 0 5
35153: ARRAY
35154: PUSH
35155: LD_INT 1
35157: PLUS
35158: PPUSH
35159: CALL_OW 1
35163: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35164: LD_ADDR_EXP 147
35168: PUSH
35169: LD_EXP 147
35173: PPUSH
35174: LD_VAR 0 5
35178: PUSH
35179: LD_EXP 147
35183: PUSH
35184: LD_VAR 0 5
35188: ARRAY
35189: PUSH
35190: LD_INT 1
35192: PLUS
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PPUSH
35198: LD_VAR 0 2
35202: PUSH
35203: LD_VAR 0 4
35207: ARRAY
35208: PUSH
35209: LD_VAR 0 2
35213: PUSH
35214: LD_VAR 0 4
35218: ARRAY
35219: PPUSH
35220: CALL_OW 255
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PPUSH
35229: CALL 40766 0 3
35233: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35234: LD_VAR 0 2
35238: PUSH
35239: LD_VAR 0 4
35243: ARRAY
35244: PPUSH
35245: LD_VAR 0 1
35249: PPUSH
35250: CALL_OW 255
35254: PPUSH
35255: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35259: LD_VAR 0 2
35263: PUSH
35264: LD_VAR 0 4
35268: ARRAY
35269: PPUSH
35270: CALL_OW 141
// end ;
35274: GO 35106
35276: POP
35277: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35278: LD_VAR 0 1
35282: PPUSH
35283: LD_EXP 147
35287: PUSH
35288: LD_VAR 0 5
35292: ARRAY
35293: PUSH
35294: LD_INT 0
35296: PLUS
35297: PPUSH
35298: CALL_OW 505
// end ;
35302: LD_VAR 0 3
35306: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35307: LD_INT 0
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
// if not hack in hackTanks then
35313: LD_VAR 0 1
35317: PUSH
35318: LD_EXP 146
35322: IN
35323: NOT
35324: IFFALSE 35328
// exit ;
35326: GO 35568
// index := GetElementIndex ( hackTanks , hack ) ;
35328: LD_ADDR_VAR 0 4
35332: PUSH
35333: LD_EXP 146
35337: PPUSH
35338: LD_VAR 0 1
35342: PPUSH
35343: CALL 40551 0 2
35347: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35348: LD_ADDR_VAR 0 3
35352: PUSH
35353: DOUBLE
35354: LD_EXP 147
35358: PUSH
35359: LD_VAR 0 4
35363: ARRAY
35364: INC
35365: ST_TO_ADDR
35366: LD_INT 1
35368: PUSH
35369: FOR_DOWNTO
35370: IFFALSE 35542
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35372: LD_ADDR_VAR 0 5
35376: PUSH
35377: LD_EXP 147
35381: PUSH
35382: LD_VAR 0 4
35386: ARRAY
35387: PUSH
35388: LD_VAR 0 3
35392: ARRAY
35393: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35394: LD_VAR 0 5
35398: PUSH
35399: LD_INT 1
35401: ARRAY
35402: PPUSH
35403: CALL_OW 302
35407: NOT
35408: PUSH
35409: LD_VAR 0 5
35413: PUSH
35414: LD_INT 1
35416: ARRAY
35417: PPUSH
35418: CALL_OW 255
35422: PUSH
35423: LD_VAR 0 1
35427: PPUSH
35428: CALL_OW 255
35432: NONEQUAL
35433: OR
35434: IFFALSE 35540
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35436: LD_VAR 0 5
35440: PUSH
35441: LD_INT 1
35443: ARRAY
35444: PPUSH
35445: CALL_OW 305
35449: PUSH
35450: LD_VAR 0 5
35454: PUSH
35455: LD_INT 1
35457: ARRAY
35458: PPUSH
35459: CALL_OW 255
35463: PUSH
35464: LD_VAR 0 1
35468: PPUSH
35469: CALL_OW 255
35473: EQUAL
35474: AND
35475: IFFALSE 35499
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35477: LD_VAR 0 5
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: PPUSH
35486: LD_VAR 0 5
35490: PUSH
35491: LD_INT 2
35493: ARRAY
35494: PPUSH
35495: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35499: LD_ADDR_EXP 147
35503: PUSH
35504: LD_EXP 147
35508: PPUSH
35509: LD_VAR 0 4
35513: PPUSH
35514: LD_EXP 147
35518: PUSH
35519: LD_VAR 0 4
35523: ARRAY
35524: PPUSH
35525: LD_VAR 0 3
35529: PPUSH
35530: CALL_OW 3
35534: PPUSH
35535: CALL_OW 1
35539: ST_TO_ADDR
// end ; end ;
35540: GO 35369
35542: POP
35543: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35544: LD_VAR 0 1
35548: PPUSH
35549: LD_EXP 147
35553: PUSH
35554: LD_VAR 0 4
35558: ARRAY
35559: PUSH
35560: LD_INT 0
35562: PLUS
35563: PPUSH
35564: CALL_OW 505
// end ;
35568: LD_VAR 0 2
35572: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35573: LD_INT 0
35575: PPUSH
35576: PPUSH
35577: PPUSH
35578: PPUSH
// if not hack in hackTanks then
35579: LD_VAR 0 1
35583: PUSH
35584: LD_EXP 146
35588: IN
35589: NOT
35590: IFFALSE 35594
// exit ;
35592: GO 35679
// index := GetElementIndex ( hackTanks , hack ) ;
35594: LD_ADDR_VAR 0 5
35598: PUSH
35599: LD_EXP 146
35603: PPUSH
35604: LD_VAR 0 1
35608: PPUSH
35609: CALL 40551 0 2
35613: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35614: LD_ADDR_VAR 0 4
35618: PUSH
35619: DOUBLE
35620: LD_INT 1
35622: DEC
35623: ST_TO_ADDR
35624: LD_EXP 147
35628: PUSH
35629: LD_VAR 0 5
35633: ARRAY
35634: PUSH
35635: FOR_TO
35636: IFFALSE 35677
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35638: LD_EXP 147
35642: PUSH
35643: LD_VAR 0 5
35647: ARRAY
35648: PUSH
35649: LD_VAR 0 4
35653: ARRAY
35654: PUSH
35655: LD_INT 1
35657: ARRAY
35658: PUSH
35659: LD_VAR 0 2
35663: EQUAL
35664: IFFALSE 35675
// KillUnit ( vehicle ) ;
35666: LD_VAR 0 2
35670: PPUSH
35671: CALL_OW 66
35675: GO 35635
35677: POP
35678: POP
// end ; end_of_file
35679: LD_VAR 0 3
35683: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
35684: LD_INT 0
35686: PPUSH
// ar_crane := 88 ;
35687: LD_ADDR_EXP 157
35691: PUSH
35692: LD_INT 88
35694: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35695: LD_ADDR_EXP 152
35699: PUSH
35700: LD_INT 89
35702: ST_TO_ADDR
// us_hack := 99 ;
35703: LD_ADDR_EXP 153
35707: PUSH
35708: LD_INT 99
35710: ST_TO_ADDR
// us_artillery := 97 ;
35711: LD_ADDR_EXP 154
35715: PUSH
35716: LD_INT 97
35718: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35719: LD_ADDR_EXP 155
35723: PUSH
35724: LD_INT 91
35726: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
35727: LD_ADDR_EXP 156
35731: PUSH
35732: LD_INT 92
35734: ST_TO_ADDR
// ru_radar := 98 ;
35735: LD_ADDR_EXP 151
35739: PUSH
35740: LD_INT 98
35742: ST_TO_ADDR
// tech_Artillery := 80 ;
35743: LD_ADDR_EXP 158
35747: PUSH
35748: LD_INT 80
35750: ST_TO_ADDR
// tech_RadMat := 81 ;
35751: LD_ADDR_EXP 159
35755: PUSH
35756: LD_INT 81
35758: ST_TO_ADDR
// tech_BasicTools := 82 ;
35759: LD_ADDR_EXP 160
35763: PUSH
35764: LD_INT 82
35766: ST_TO_ADDR
// tech_Cargo := 83 ;
35767: LD_ADDR_EXP 161
35771: PUSH
35772: LD_INT 83
35774: ST_TO_ADDR
// tech_Track := 84 ;
35775: LD_ADDR_EXP 162
35779: PUSH
35780: LD_INT 84
35782: ST_TO_ADDR
// tech_Crane := 85 ;
35783: LD_ADDR_EXP 163
35787: PUSH
35788: LD_INT 85
35790: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35791: LD_ADDR_EXP 164
35795: PUSH
35796: LD_INT 86
35798: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35799: LD_ADDR_EXP 165
35803: PUSH
35804: LD_INT 87
35806: ST_TO_ADDR
// end ;
35807: LD_VAR 0 1
35811: RET
// every 1 do
35812: GO 35814
35814: DISABLE
// InitGlobalVariables ; end_of_file
35815: CALL 35684 0 0
35819: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35820: LD_INT 0
35822: PPUSH
35823: PPUSH
// if exist_mode then
35824: LD_VAR 0 2
35828: IFFALSE 35853
// unit := CreateCharacter ( prefix & ident ) else
35830: LD_ADDR_VAR 0 5
35834: PUSH
35835: LD_VAR 0 3
35839: PUSH
35840: LD_VAR 0 1
35844: STR
35845: PPUSH
35846: CALL_OW 34
35850: ST_TO_ADDR
35851: GO 35868
// unit := NewCharacter ( ident ) ;
35853: LD_ADDR_VAR 0 5
35857: PUSH
35858: LD_VAR 0 1
35862: PPUSH
35863: CALL_OW 25
35867: ST_TO_ADDR
// result := unit ;
35868: LD_ADDR_VAR 0 4
35872: PUSH
35873: LD_VAR 0 5
35877: ST_TO_ADDR
// end ;
35878: LD_VAR 0 4
35882: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35883: LD_INT 0
35885: PPUSH
35886: PPUSH
// if not side or not nation then
35887: LD_VAR 0 1
35891: NOT
35892: PUSH
35893: LD_VAR 0 2
35897: NOT
35898: OR
35899: IFFALSE 35903
// exit ;
35901: GO 36667
// case nation of nation_american :
35903: LD_VAR 0 2
35907: PUSH
35908: LD_INT 1
35910: DOUBLE
35911: EQUAL
35912: IFTRUE 35916
35914: GO 36130
35916: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35917: LD_ADDR_VAR 0 4
35921: PUSH
35922: LD_INT 35
35924: PUSH
35925: LD_INT 45
35927: PUSH
35928: LD_INT 46
35930: PUSH
35931: LD_INT 47
35933: PUSH
35934: LD_INT 82
35936: PUSH
35937: LD_INT 83
35939: PUSH
35940: LD_INT 84
35942: PUSH
35943: LD_INT 85
35945: PUSH
35946: LD_INT 86
35948: PUSH
35949: LD_INT 1
35951: PUSH
35952: LD_INT 2
35954: PUSH
35955: LD_INT 6
35957: PUSH
35958: LD_INT 15
35960: PUSH
35961: LD_INT 16
35963: PUSH
35964: LD_INT 7
35966: PUSH
35967: LD_INT 12
35969: PUSH
35970: LD_INT 13
35972: PUSH
35973: LD_INT 10
35975: PUSH
35976: LD_INT 14
35978: PUSH
35979: LD_INT 20
35981: PUSH
35982: LD_INT 21
35984: PUSH
35985: LD_INT 22
35987: PUSH
35988: LD_INT 25
35990: PUSH
35991: LD_INT 32
35993: PUSH
35994: LD_INT 27
35996: PUSH
35997: LD_INT 36
35999: PUSH
36000: LD_INT 69
36002: PUSH
36003: LD_INT 39
36005: PUSH
36006: LD_INT 34
36008: PUSH
36009: LD_INT 40
36011: PUSH
36012: LD_INT 48
36014: PUSH
36015: LD_INT 49
36017: PUSH
36018: LD_INT 50
36020: PUSH
36021: LD_INT 51
36023: PUSH
36024: LD_INT 52
36026: PUSH
36027: LD_INT 53
36029: PUSH
36030: LD_INT 54
36032: PUSH
36033: LD_INT 55
36035: PUSH
36036: LD_INT 56
36038: PUSH
36039: LD_INT 57
36041: PUSH
36042: LD_INT 58
36044: PUSH
36045: LD_INT 59
36047: PUSH
36048: LD_INT 60
36050: PUSH
36051: LD_INT 61
36053: PUSH
36054: LD_INT 62
36056: PUSH
36057: LD_INT 80
36059: PUSH
36060: LD_INT 82
36062: PUSH
36063: LD_INT 83
36065: PUSH
36066: LD_INT 84
36068: PUSH
36069: LD_INT 85
36071: PUSH
36072: LD_INT 86
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: LIST
36085: LIST
36086: LIST
36087: LIST
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: ST_TO_ADDR
36128: GO 36591
36130: LD_INT 2
36132: DOUBLE
36133: EQUAL
36134: IFTRUE 36138
36136: GO 36360
36138: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36139: LD_ADDR_VAR 0 4
36143: PUSH
36144: LD_INT 35
36146: PUSH
36147: LD_INT 45
36149: PUSH
36150: LD_INT 46
36152: PUSH
36153: LD_INT 47
36155: PUSH
36156: LD_INT 82
36158: PUSH
36159: LD_INT 83
36161: PUSH
36162: LD_INT 84
36164: PUSH
36165: LD_INT 85
36167: PUSH
36168: LD_INT 87
36170: PUSH
36171: LD_INT 70
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 11
36179: PUSH
36180: LD_INT 3
36182: PUSH
36183: LD_INT 4
36185: PUSH
36186: LD_INT 5
36188: PUSH
36189: LD_INT 6
36191: PUSH
36192: LD_INT 15
36194: PUSH
36195: LD_INT 18
36197: PUSH
36198: LD_INT 7
36200: PUSH
36201: LD_INT 17
36203: PUSH
36204: LD_INT 8
36206: PUSH
36207: LD_INT 20
36209: PUSH
36210: LD_INT 21
36212: PUSH
36213: LD_INT 22
36215: PUSH
36216: LD_INT 72
36218: PUSH
36219: LD_INT 26
36221: PUSH
36222: LD_INT 69
36224: PUSH
36225: LD_INT 39
36227: PUSH
36228: LD_INT 40
36230: PUSH
36231: LD_INT 41
36233: PUSH
36234: LD_INT 42
36236: PUSH
36237: LD_INT 43
36239: PUSH
36240: LD_INT 48
36242: PUSH
36243: LD_INT 49
36245: PUSH
36246: LD_INT 50
36248: PUSH
36249: LD_INT 51
36251: PUSH
36252: LD_INT 52
36254: PUSH
36255: LD_INT 53
36257: PUSH
36258: LD_INT 54
36260: PUSH
36261: LD_INT 55
36263: PUSH
36264: LD_INT 56
36266: PUSH
36267: LD_INT 60
36269: PUSH
36270: LD_INT 61
36272: PUSH
36273: LD_INT 62
36275: PUSH
36276: LD_INT 66
36278: PUSH
36279: LD_INT 67
36281: PUSH
36282: LD_INT 68
36284: PUSH
36285: LD_INT 81
36287: PUSH
36288: LD_INT 82
36290: PUSH
36291: LD_INT 83
36293: PUSH
36294: LD_INT 84
36296: PUSH
36297: LD_INT 85
36299: PUSH
36300: LD_INT 87
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: LIST
36336: LIST
36337: LIST
36338: LIST
36339: LIST
36340: LIST
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: ST_TO_ADDR
36358: GO 36591
36360: LD_INT 3
36362: DOUBLE
36363: EQUAL
36364: IFTRUE 36368
36366: GO 36590
36368: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36369: LD_ADDR_VAR 0 4
36373: PUSH
36374: LD_INT 46
36376: PUSH
36377: LD_INT 47
36379: PUSH
36380: LD_INT 1
36382: PUSH
36383: LD_INT 2
36385: PUSH
36386: LD_INT 82
36388: PUSH
36389: LD_INT 83
36391: PUSH
36392: LD_INT 84
36394: PUSH
36395: LD_INT 85
36397: PUSH
36398: LD_INT 86
36400: PUSH
36401: LD_INT 11
36403: PUSH
36404: LD_INT 9
36406: PUSH
36407: LD_INT 20
36409: PUSH
36410: LD_INT 19
36412: PUSH
36413: LD_INT 21
36415: PUSH
36416: LD_INT 24
36418: PUSH
36419: LD_INT 22
36421: PUSH
36422: LD_INT 25
36424: PUSH
36425: LD_INT 28
36427: PUSH
36428: LD_INT 29
36430: PUSH
36431: LD_INT 30
36433: PUSH
36434: LD_INT 31
36436: PUSH
36437: LD_INT 37
36439: PUSH
36440: LD_INT 38
36442: PUSH
36443: LD_INT 32
36445: PUSH
36446: LD_INT 27
36448: PUSH
36449: LD_INT 33
36451: PUSH
36452: LD_INT 69
36454: PUSH
36455: LD_INT 39
36457: PUSH
36458: LD_INT 34
36460: PUSH
36461: LD_INT 40
36463: PUSH
36464: LD_INT 71
36466: PUSH
36467: LD_INT 23
36469: PUSH
36470: LD_INT 44
36472: PUSH
36473: LD_INT 48
36475: PUSH
36476: LD_INT 49
36478: PUSH
36479: LD_INT 50
36481: PUSH
36482: LD_INT 51
36484: PUSH
36485: LD_INT 52
36487: PUSH
36488: LD_INT 53
36490: PUSH
36491: LD_INT 54
36493: PUSH
36494: LD_INT 55
36496: PUSH
36497: LD_INT 56
36499: PUSH
36500: LD_INT 57
36502: PUSH
36503: LD_INT 58
36505: PUSH
36506: LD_INT 59
36508: PUSH
36509: LD_INT 63
36511: PUSH
36512: LD_INT 64
36514: PUSH
36515: LD_INT 65
36517: PUSH
36518: LD_INT 82
36520: PUSH
36521: LD_INT 83
36523: PUSH
36524: LD_INT 84
36526: PUSH
36527: LD_INT 85
36529: PUSH
36530: LD_INT 86
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: LIST
36558: LIST
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: LIST
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
36588: GO 36591
36590: POP
// if state > - 1 and state < 3 then
36591: LD_VAR 0 3
36595: PUSH
36596: LD_INT 1
36598: NEG
36599: GREATER
36600: PUSH
36601: LD_VAR 0 3
36605: PUSH
36606: LD_INT 3
36608: LESS
36609: AND
36610: IFFALSE 36667
// for i in result do
36612: LD_ADDR_VAR 0 5
36616: PUSH
36617: LD_VAR 0 4
36621: PUSH
36622: FOR_IN
36623: IFFALSE 36665
// if GetTech ( i , side ) <> state then
36625: LD_VAR 0 5
36629: PPUSH
36630: LD_VAR 0 1
36634: PPUSH
36635: CALL_OW 321
36639: PUSH
36640: LD_VAR 0 3
36644: NONEQUAL
36645: IFFALSE 36663
// result := result diff i ;
36647: LD_ADDR_VAR 0 4
36651: PUSH
36652: LD_VAR 0 4
36656: PUSH
36657: LD_VAR 0 5
36661: DIFF
36662: ST_TO_ADDR
36663: GO 36622
36665: POP
36666: POP
// end ;
36667: LD_VAR 0 4
36671: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36672: LD_INT 0
36674: PPUSH
36675: PPUSH
36676: PPUSH
// result := true ;
36677: LD_ADDR_VAR 0 3
36681: PUSH
36682: LD_INT 1
36684: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36685: LD_ADDR_VAR 0 5
36689: PUSH
36690: LD_VAR 0 2
36694: PPUSH
36695: CALL_OW 480
36699: ST_TO_ADDR
// if not tmp then
36700: LD_VAR 0 5
36704: NOT
36705: IFFALSE 36709
// exit ;
36707: GO 36758
// for i in tmp do
36709: LD_ADDR_VAR 0 4
36713: PUSH
36714: LD_VAR 0 5
36718: PUSH
36719: FOR_IN
36720: IFFALSE 36756
// if GetTech ( i , side ) <> state_researched then
36722: LD_VAR 0 4
36726: PPUSH
36727: LD_VAR 0 1
36731: PPUSH
36732: CALL_OW 321
36736: PUSH
36737: LD_INT 2
36739: NONEQUAL
36740: IFFALSE 36754
// begin result := false ;
36742: LD_ADDR_VAR 0 3
36746: PUSH
36747: LD_INT 0
36749: ST_TO_ADDR
// exit ;
36750: POP
36751: POP
36752: GO 36758
// end ;
36754: GO 36719
36756: POP
36757: POP
// end ;
36758: LD_VAR 0 3
36762: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36763: LD_INT 0
36765: PPUSH
36766: PPUSH
36767: PPUSH
36768: PPUSH
36769: PPUSH
36770: PPUSH
36771: PPUSH
36772: PPUSH
36773: PPUSH
36774: PPUSH
36775: PPUSH
36776: PPUSH
36777: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36778: LD_VAR 0 1
36782: NOT
36783: PUSH
36784: LD_VAR 0 1
36788: PPUSH
36789: CALL_OW 257
36793: PUSH
36794: LD_INT 9
36796: NONEQUAL
36797: OR
36798: IFFALSE 36802
// exit ;
36800: GO 37375
// side := GetSide ( unit ) ;
36802: LD_ADDR_VAR 0 9
36806: PUSH
36807: LD_VAR 0 1
36811: PPUSH
36812: CALL_OW 255
36816: ST_TO_ADDR
// tech_space := tech_spacanom ;
36817: LD_ADDR_VAR 0 12
36821: PUSH
36822: LD_INT 29
36824: ST_TO_ADDR
// tech_time := tech_taurad ;
36825: LD_ADDR_VAR 0 13
36829: PUSH
36830: LD_INT 28
36832: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36833: LD_ADDR_VAR 0 11
36837: PUSH
36838: LD_VAR 0 1
36842: PPUSH
36843: CALL_OW 310
36847: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36848: LD_VAR 0 11
36852: PPUSH
36853: CALL_OW 247
36857: PUSH
36858: LD_INT 2
36860: EQUAL
36861: IFFALSE 36865
// exit ;
36863: GO 37375
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36865: LD_ADDR_VAR 0 8
36869: PUSH
36870: LD_INT 81
36872: PUSH
36873: LD_VAR 0 9
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 3
36884: PUSH
36885: LD_INT 21
36887: PUSH
36888: LD_INT 3
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PPUSH
36903: CALL_OW 69
36907: ST_TO_ADDR
// if not tmp then
36908: LD_VAR 0 8
36912: NOT
36913: IFFALSE 36917
// exit ;
36915: GO 37375
// if in_unit then
36917: LD_VAR 0 11
36921: IFFALSE 36945
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36923: LD_ADDR_VAR 0 10
36927: PUSH
36928: LD_VAR 0 8
36932: PPUSH
36933: LD_VAR 0 11
36937: PPUSH
36938: CALL_OW 74
36942: ST_TO_ADDR
36943: GO 36965
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36945: LD_ADDR_VAR 0 10
36949: PUSH
36950: LD_VAR 0 8
36954: PPUSH
36955: LD_VAR 0 1
36959: PPUSH
36960: CALL_OW 74
36964: ST_TO_ADDR
// if not enemy then
36965: LD_VAR 0 10
36969: NOT
36970: IFFALSE 36974
// exit ;
36972: GO 37375
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36974: LD_VAR 0 11
36978: PUSH
36979: LD_VAR 0 11
36983: PPUSH
36984: LD_VAR 0 10
36988: PPUSH
36989: CALL_OW 296
36993: PUSH
36994: LD_INT 13
36996: GREATER
36997: AND
36998: PUSH
36999: LD_VAR 0 1
37003: PPUSH
37004: LD_VAR 0 10
37008: PPUSH
37009: CALL_OW 296
37013: PUSH
37014: LD_INT 12
37016: GREATER
37017: OR
37018: IFFALSE 37022
// exit ;
37020: GO 37375
// missile := [ 1 ] ;
37022: LD_ADDR_VAR 0 14
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: EMPTY
37031: LIST
37032: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37033: LD_VAR 0 9
37037: PPUSH
37038: LD_VAR 0 12
37042: PPUSH
37043: CALL_OW 325
37047: IFFALSE 37076
// missile := Insert ( missile , missile + 1 , 2 ) ;
37049: LD_ADDR_VAR 0 14
37053: PUSH
37054: LD_VAR 0 14
37058: PPUSH
37059: LD_VAR 0 14
37063: PUSH
37064: LD_INT 1
37066: PLUS
37067: PPUSH
37068: LD_INT 2
37070: PPUSH
37071: CALL_OW 2
37075: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37076: LD_VAR 0 9
37080: PPUSH
37081: LD_VAR 0 13
37085: PPUSH
37086: CALL_OW 325
37090: PUSH
37091: LD_VAR 0 10
37095: PPUSH
37096: CALL_OW 255
37100: PPUSH
37101: LD_VAR 0 13
37105: PPUSH
37106: CALL_OW 325
37110: NOT
37111: AND
37112: IFFALSE 37141
// missile := Insert ( missile , missile + 1 , 3 ) ;
37114: LD_ADDR_VAR 0 14
37118: PUSH
37119: LD_VAR 0 14
37123: PPUSH
37124: LD_VAR 0 14
37128: PUSH
37129: LD_INT 1
37131: PLUS
37132: PPUSH
37133: LD_INT 3
37135: PPUSH
37136: CALL_OW 2
37140: ST_TO_ADDR
// if missile < 2 then
37141: LD_VAR 0 14
37145: PUSH
37146: LD_INT 2
37148: LESS
37149: IFFALSE 37153
// exit ;
37151: GO 37375
// x := GetX ( enemy ) ;
37153: LD_ADDR_VAR 0 4
37157: PUSH
37158: LD_VAR 0 10
37162: PPUSH
37163: CALL_OW 250
37167: ST_TO_ADDR
// y := GetY ( enemy ) ;
37168: LD_ADDR_VAR 0 5
37172: PUSH
37173: LD_VAR 0 10
37177: PPUSH
37178: CALL_OW 251
37182: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37183: LD_ADDR_VAR 0 6
37187: PUSH
37188: LD_VAR 0 4
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PPUSH
37197: LD_INT 1
37199: PPUSH
37200: CALL_OW 12
37204: PLUS
37205: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37206: LD_ADDR_VAR 0 7
37210: PUSH
37211: LD_VAR 0 5
37215: PUSH
37216: LD_INT 1
37218: NEG
37219: PPUSH
37220: LD_INT 1
37222: PPUSH
37223: CALL_OW 12
37227: PLUS
37228: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37229: LD_VAR 0 6
37233: PPUSH
37234: LD_VAR 0 7
37238: PPUSH
37239: CALL_OW 488
37243: NOT
37244: IFFALSE 37266
// begin _x := x ;
37246: LD_ADDR_VAR 0 6
37250: PUSH
37251: LD_VAR 0 4
37255: ST_TO_ADDR
// _y := y ;
37256: LD_ADDR_VAR 0 7
37260: PUSH
37261: LD_VAR 0 5
37265: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37266: LD_ADDR_VAR 0 3
37270: PUSH
37271: LD_INT 1
37273: PPUSH
37274: LD_VAR 0 14
37278: PPUSH
37279: CALL_OW 12
37283: ST_TO_ADDR
// case i of 1 :
37284: LD_VAR 0 3
37288: PUSH
37289: LD_INT 1
37291: DOUBLE
37292: EQUAL
37293: IFTRUE 37297
37295: GO 37314
37297: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37298: LD_VAR 0 1
37302: PPUSH
37303: LD_VAR 0 10
37307: PPUSH
37308: CALL_OW 115
37312: GO 37375
37314: LD_INT 2
37316: DOUBLE
37317: EQUAL
37318: IFTRUE 37322
37320: GO 37344
37322: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37323: LD_VAR 0 1
37327: PPUSH
37328: LD_VAR 0 6
37332: PPUSH
37333: LD_VAR 0 7
37337: PPUSH
37338: CALL_OW 153
37342: GO 37375
37344: LD_INT 3
37346: DOUBLE
37347: EQUAL
37348: IFTRUE 37352
37350: GO 37374
37352: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37353: LD_VAR 0 1
37357: PPUSH
37358: LD_VAR 0 6
37362: PPUSH
37363: LD_VAR 0 7
37367: PPUSH
37368: CALL_OW 154
37372: GO 37375
37374: POP
// end ;
37375: LD_VAR 0 2
37379: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37380: LD_INT 0
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
// if not unit or not building then
37388: LD_VAR 0 1
37392: NOT
37393: PUSH
37394: LD_VAR 0 2
37398: NOT
37399: OR
37400: IFFALSE 37404
// exit ;
37402: GO 37562
// x := GetX ( building ) ;
37404: LD_ADDR_VAR 0 5
37408: PUSH
37409: LD_VAR 0 2
37413: PPUSH
37414: CALL_OW 250
37418: ST_TO_ADDR
// y := GetY ( building ) ;
37419: LD_ADDR_VAR 0 6
37423: PUSH
37424: LD_VAR 0 2
37428: PPUSH
37429: CALL_OW 251
37433: ST_TO_ADDR
// for i = 0 to 5 do
37434: LD_ADDR_VAR 0 4
37438: PUSH
37439: DOUBLE
37440: LD_INT 0
37442: DEC
37443: ST_TO_ADDR
37444: LD_INT 5
37446: PUSH
37447: FOR_TO
37448: IFFALSE 37560
// begin _x := ShiftX ( x , i , 3 ) ;
37450: LD_ADDR_VAR 0 7
37454: PUSH
37455: LD_VAR 0 5
37459: PPUSH
37460: LD_VAR 0 4
37464: PPUSH
37465: LD_INT 3
37467: PPUSH
37468: CALL_OW 272
37472: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37473: LD_ADDR_VAR 0 8
37477: PUSH
37478: LD_VAR 0 6
37482: PPUSH
37483: LD_VAR 0 4
37487: PPUSH
37488: LD_INT 3
37490: PPUSH
37491: CALL_OW 273
37495: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37496: LD_VAR 0 7
37500: PPUSH
37501: LD_VAR 0 8
37505: PPUSH
37506: CALL_OW 488
37510: NOT
37511: IFFALSE 37515
// continue ;
37513: GO 37447
// if HexInfo ( _x , _y ) = 0 then
37515: LD_VAR 0 7
37519: PPUSH
37520: LD_VAR 0 8
37524: PPUSH
37525: CALL_OW 428
37529: PUSH
37530: LD_INT 0
37532: EQUAL
37533: IFFALSE 37558
// begin ComMoveXY ( unit , _x , _y ) ;
37535: LD_VAR 0 1
37539: PPUSH
37540: LD_VAR 0 7
37544: PPUSH
37545: LD_VAR 0 8
37549: PPUSH
37550: CALL_OW 111
// exit ;
37554: POP
37555: POP
37556: GO 37562
// end ; end ;
37558: GO 37447
37560: POP
37561: POP
// end ;
37562: LD_VAR 0 3
37566: RET
// export function ScanBase ( side , base_area ) ; begin
37567: LD_INT 0
37569: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37570: LD_ADDR_VAR 0 3
37574: PUSH
37575: LD_VAR 0 2
37579: PPUSH
37580: LD_INT 81
37582: PUSH
37583: LD_VAR 0 1
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PPUSH
37592: CALL_OW 70
37596: ST_TO_ADDR
// end ;
37597: LD_VAR 0 3
37601: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37602: LD_INT 0
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
// result := false ;
37608: LD_ADDR_VAR 0 2
37612: PUSH
37613: LD_INT 0
37615: ST_TO_ADDR
// side := GetSide ( unit ) ;
37616: LD_ADDR_VAR 0 3
37620: PUSH
37621: LD_VAR 0 1
37625: PPUSH
37626: CALL_OW 255
37630: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37631: LD_ADDR_VAR 0 4
37635: PUSH
37636: LD_VAR 0 1
37640: PPUSH
37641: CALL_OW 248
37645: ST_TO_ADDR
// case nat of 1 :
37646: LD_VAR 0 4
37650: PUSH
37651: LD_INT 1
37653: DOUBLE
37654: EQUAL
37655: IFTRUE 37659
37657: GO 37670
37659: POP
// tech := tech_lassight ; 2 :
37660: LD_ADDR_VAR 0 5
37664: PUSH
37665: LD_INT 12
37667: ST_TO_ADDR
37668: GO 37709
37670: LD_INT 2
37672: DOUBLE
37673: EQUAL
37674: IFTRUE 37678
37676: GO 37689
37678: POP
// tech := tech_mortar ; 3 :
37679: LD_ADDR_VAR 0 5
37683: PUSH
37684: LD_INT 41
37686: ST_TO_ADDR
37687: GO 37709
37689: LD_INT 3
37691: DOUBLE
37692: EQUAL
37693: IFTRUE 37697
37695: GO 37708
37697: POP
// tech := tech_bazooka ; end ;
37698: LD_ADDR_VAR 0 5
37702: PUSH
37703: LD_INT 44
37705: ST_TO_ADDR
37706: GO 37709
37708: POP
// if Researched ( side , tech ) then
37709: LD_VAR 0 3
37713: PPUSH
37714: LD_VAR 0 5
37718: PPUSH
37719: CALL_OW 325
37723: IFFALSE 37750
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37725: LD_ADDR_VAR 0 2
37729: PUSH
37730: LD_INT 5
37732: PUSH
37733: LD_INT 8
37735: PUSH
37736: LD_INT 9
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: PUSH
37744: LD_VAR 0 4
37748: ARRAY
37749: ST_TO_ADDR
// end ;
37750: LD_VAR 0 2
37754: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37755: LD_INT 0
37757: PPUSH
37758: PPUSH
37759: PPUSH
// if not mines then
37760: LD_VAR 0 2
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 37913
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37769: LD_ADDR_VAR 0 5
37773: PUSH
37774: LD_INT 81
37776: PUSH
37777: LD_VAR 0 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 3
37788: PUSH
37789: LD_INT 21
37791: PUSH
37792: LD_INT 3
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PPUSH
37807: CALL_OW 69
37811: ST_TO_ADDR
// for i in mines do
37812: LD_ADDR_VAR 0 4
37816: PUSH
37817: LD_VAR 0 2
37821: PUSH
37822: FOR_IN
37823: IFFALSE 37911
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37825: LD_VAR 0 4
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PPUSH
37834: LD_VAR 0 4
37838: PUSH
37839: LD_INT 2
37841: ARRAY
37842: PPUSH
37843: CALL_OW 458
37847: NOT
37848: IFFALSE 37852
// continue ;
37850: GO 37822
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37852: LD_VAR 0 4
37856: PUSH
37857: LD_INT 1
37859: ARRAY
37860: PPUSH
37861: LD_VAR 0 4
37865: PUSH
37866: LD_INT 2
37868: ARRAY
37869: PPUSH
37870: CALL_OW 428
37874: PUSH
37875: LD_VAR 0 5
37879: IN
37880: IFFALSE 37909
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37882: LD_VAR 0 4
37886: PUSH
37887: LD_INT 1
37889: ARRAY
37890: PPUSH
37891: LD_VAR 0 4
37895: PUSH
37896: LD_INT 2
37898: ARRAY
37899: PPUSH
37900: LD_VAR 0 1
37904: PPUSH
37905: CALL_OW 456
// end ;
37909: GO 37822
37911: POP
37912: POP
// end ;
37913: LD_VAR 0 3
37917: RET
// export function Count ( array ) ; var i ; begin
37918: LD_INT 0
37920: PPUSH
37921: PPUSH
// result := 0 ;
37922: LD_ADDR_VAR 0 2
37926: PUSH
37927: LD_INT 0
37929: ST_TO_ADDR
// for i in array do
37930: LD_ADDR_VAR 0 3
37934: PUSH
37935: LD_VAR 0 1
37939: PUSH
37940: FOR_IN
37941: IFFALSE 37965
// if i then
37943: LD_VAR 0 3
37947: IFFALSE 37963
// result := result + 1 ;
37949: LD_ADDR_VAR 0 2
37953: PUSH
37954: LD_VAR 0 2
37958: PUSH
37959: LD_INT 1
37961: PLUS
37962: ST_TO_ADDR
37963: GO 37940
37965: POP
37966: POP
// end ;
37967: LD_VAR 0 2
37971: RET
// export function IsEmpty ( building ) ; begin
37972: LD_INT 0
37974: PPUSH
// if not building then
37975: LD_VAR 0 1
37979: NOT
37980: IFFALSE 37984
// exit ;
37982: GO 38027
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37984: LD_ADDR_VAR 0 2
37988: PUSH
37989: LD_VAR 0 1
37993: PUSH
37994: LD_INT 22
37996: PUSH
37997: LD_VAR 0 1
38001: PPUSH
38002: CALL_OW 255
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 58
38013: PUSH
38014: EMPTY
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: LIST
38020: PPUSH
38021: CALL_OW 69
38025: IN
38026: ST_TO_ADDR
// end ;
38027: LD_VAR 0 2
38031: RET
// export function IsNotFull ( building ) ; begin
38032: LD_INT 0
38034: PPUSH
// if not building then
38035: LD_VAR 0 1
38039: NOT
38040: IFFALSE 38044
// exit ;
38042: GO 38063
// result := UnitsInside ( building ) < 6 ;
38044: LD_ADDR_VAR 0 2
38048: PUSH
38049: LD_VAR 0 1
38053: PPUSH
38054: CALL_OW 313
38058: PUSH
38059: LD_INT 6
38061: LESS
38062: ST_TO_ADDR
// end ;
38063: LD_VAR 0 2
38067: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38068: LD_INT 0
38070: PPUSH
38071: PPUSH
38072: PPUSH
38073: PPUSH
// tmp := [ ] ;
38074: LD_ADDR_VAR 0 3
38078: PUSH
38079: EMPTY
38080: ST_TO_ADDR
// list := [ ] ;
38081: LD_ADDR_VAR 0 5
38085: PUSH
38086: EMPTY
38087: ST_TO_ADDR
// for i = 16 to 25 do
38088: LD_ADDR_VAR 0 4
38092: PUSH
38093: DOUBLE
38094: LD_INT 16
38096: DEC
38097: ST_TO_ADDR
38098: LD_INT 25
38100: PUSH
38101: FOR_TO
38102: IFFALSE 38175
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38104: LD_ADDR_VAR 0 3
38108: PUSH
38109: LD_VAR 0 3
38113: PUSH
38114: LD_INT 22
38116: PUSH
38117: LD_VAR 0 1
38121: PPUSH
38122: CALL_OW 255
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 91
38133: PUSH
38134: LD_VAR 0 1
38138: PUSH
38139: LD_INT 6
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_VAR 0 4
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: PUSH
38164: EMPTY
38165: LIST
38166: PPUSH
38167: CALL_OW 69
38171: ADD
38172: ST_TO_ADDR
38173: GO 38101
38175: POP
38176: POP
// for i = 1 to tmp do
38177: LD_ADDR_VAR 0 4
38181: PUSH
38182: DOUBLE
38183: LD_INT 1
38185: DEC
38186: ST_TO_ADDR
38187: LD_VAR 0 3
38191: PUSH
38192: FOR_TO
38193: IFFALSE 38281
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38195: LD_ADDR_VAR 0 5
38199: PUSH
38200: LD_VAR 0 5
38204: PUSH
38205: LD_VAR 0 3
38209: PUSH
38210: LD_VAR 0 4
38214: ARRAY
38215: PPUSH
38216: CALL_OW 266
38220: PUSH
38221: LD_VAR 0 3
38225: PUSH
38226: LD_VAR 0 4
38230: ARRAY
38231: PPUSH
38232: CALL_OW 250
38236: PUSH
38237: LD_VAR 0 3
38241: PUSH
38242: LD_VAR 0 4
38246: ARRAY
38247: PPUSH
38248: CALL_OW 251
38252: PUSH
38253: LD_VAR 0 3
38257: PUSH
38258: LD_VAR 0 4
38262: ARRAY
38263: PPUSH
38264: CALL_OW 254
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: ADD
38278: ST_TO_ADDR
38279: GO 38192
38281: POP
38282: POP
// result := list ;
38283: LD_ADDR_VAR 0 2
38287: PUSH
38288: LD_VAR 0 5
38292: ST_TO_ADDR
// end ;
38293: LD_VAR 0 2
38297: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38298: LD_INT 0
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
// if not factory then
38307: LD_VAR 0 1
38311: NOT
38312: IFFALSE 38316
// exit ;
38314: GO 38909
// if control = control_apeman then
38316: LD_VAR 0 4
38320: PUSH
38321: LD_INT 5
38323: EQUAL
38324: IFFALSE 38433
// begin tmp := UnitsInside ( factory ) ;
38326: LD_ADDR_VAR 0 8
38330: PUSH
38331: LD_VAR 0 1
38335: PPUSH
38336: CALL_OW 313
38340: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38341: LD_VAR 0 8
38345: PPUSH
38346: LD_INT 25
38348: PUSH
38349: LD_INT 12
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PPUSH
38356: CALL_OW 72
38360: NOT
38361: IFFALSE 38371
// control := control_manual ;
38363: LD_ADDR_VAR 0 4
38367: PUSH
38368: LD_INT 1
38370: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38371: LD_ADDR_VAR 0 8
38375: PUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: CALL 38068 0 1
38385: ST_TO_ADDR
// if tmp then
38386: LD_VAR 0 8
38390: IFFALSE 38433
// begin for i in tmp do
38392: LD_ADDR_VAR 0 7
38396: PUSH
38397: LD_VAR 0 8
38401: PUSH
38402: FOR_IN
38403: IFFALSE 38431
// if i [ 1 ] = b_ext_radio then
38405: LD_VAR 0 7
38409: PUSH
38410: LD_INT 1
38412: ARRAY
38413: PUSH
38414: LD_INT 22
38416: EQUAL
38417: IFFALSE 38429
// begin control := control_remote ;
38419: LD_ADDR_VAR 0 4
38423: PUSH
38424: LD_INT 2
38426: ST_TO_ADDR
// break ;
38427: GO 38431
// end ;
38429: GO 38402
38431: POP
38432: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38433: LD_VAR 0 1
38437: PPUSH
38438: LD_VAR 0 2
38442: PPUSH
38443: LD_VAR 0 3
38447: PPUSH
38448: LD_VAR 0 4
38452: PPUSH
38453: LD_VAR 0 5
38457: PPUSH
38458: CALL_OW 448
38462: IFFALSE 38497
// begin result := [ chassis , engine , control , weapon ] ;
38464: LD_ADDR_VAR 0 6
38468: PUSH
38469: LD_VAR 0 2
38473: PUSH
38474: LD_VAR 0 3
38478: PUSH
38479: LD_VAR 0 4
38483: PUSH
38484: LD_VAR 0 5
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: ST_TO_ADDR
// exit ;
38495: GO 38909
// end ; _chassis := AvailableChassisList ( factory ) ;
38497: LD_ADDR_VAR 0 9
38501: PUSH
38502: LD_VAR 0 1
38506: PPUSH
38507: CALL_OW 475
38511: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38512: LD_ADDR_VAR 0 11
38516: PUSH
38517: LD_VAR 0 1
38521: PPUSH
38522: CALL_OW 476
38526: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38527: LD_ADDR_VAR 0 12
38531: PUSH
38532: LD_VAR 0 1
38536: PPUSH
38537: CALL_OW 477
38541: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38542: LD_ADDR_VAR 0 10
38546: PUSH
38547: LD_VAR 0 1
38551: PPUSH
38552: CALL_OW 478
38556: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38557: LD_VAR 0 9
38561: NOT
38562: PUSH
38563: LD_VAR 0 11
38567: NOT
38568: OR
38569: PUSH
38570: LD_VAR 0 12
38574: NOT
38575: OR
38576: PUSH
38577: LD_VAR 0 10
38581: NOT
38582: OR
38583: IFFALSE 38618
// begin result := [ chassis , engine , control , weapon ] ;
38585: LD_ADDR_VAR 0 6
38589: PUSH
38590: LD_VAR 0 2
38594: PUSH
38595: LD_VAR 0 3
38599: PUSH
38600: LD_VAR 0 4
38604: PUSH
38605: LD_VAR 0 5
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: ST_TO_ADDR
// exit ;
38616: GO 38909
// end ; if not chassis in _chassis then
38618: LD_VAR 0 2
38622: PUSH
38623: LD_VAR 0 9
38627: IN
38628: NOT
38629: IFFALSE 38655
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38631: LD_ADDR_VAR 0 2
38635: PUSH
38636: LD_VAR 0 9
38640: PUSH
38641: LD_INT 1
38643: PPUSH
38644: LD_VAR 0 9
38648: PPUSH
38649: CALL_OW 12
38653: ARRAY
38654: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38655: LD_VAR 0 2
38659: PPUSH
38660: LD_VAR 0 3
38664: PPUSH
38665: CALL 38914 0 2
38669: NOT
38670: IFFALSE 38729
// repeat engine := _engine [ 1 ] ;
38672: LD_ADDR_VAR 0 3
38676: PUSH
38677: LD_VAR 0 11
38681: PUSH
38682: LD_INT 1
38684: ARRAY
38685: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38686: LD_ADDR_VAR 0 11
38690: PUSH
38691: LD_VAR 0 11
38695: PPUSH
38696: LD_INT 1
38698: PPUSH
38699: CALL_OW 3
38703: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38704: LD_VAR 0 2
38708: PPUSH
38709: LD_VAR 0 3
38713: PPUSH
38714: CALL 38914 0 2
38718: PUSH
38719: LD_VAR 0 11
38723: PUSH
38724: EMPTY
38725: EQUAL
38726: OR
38727: IFFALSE 38672
// if not control in _control then
38729: LD_VAR 0 4
38733: PUSH
38734: LD_VAR 0 12
38738: IN
38739: NOT
38740: IFFALSE 38766
// control := _control [ rand ( 1 , _control ) ] ;
38742: LD_ADDR_VAR 0 4
38746: PUSH
38747: LD_VAR 0 12
38751: PUSH
38752: LD_INT 1
38754: PPUSH
38755: LD_VAR 0 12
38759: PPUSH
38760: CALL_OW 12
38764: ARRAY
38765: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38766: LD_VAR 0 2
38770: PPUSH
38771: LD_VAR 0 5
38775: PPUSH
38776: CALL 39134 0 2
38780: NOT
38781: IFFALSE 38840
// repeat weapon := _weapon [ 1 ] ;
38783: LD_ADDR_VAR 0 5
38787: PUSH
38788: LD_VAR 0 10
38792: PUSH
38793: LD_INT 1
38795: ARRAY
38796: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38797: LD_ADDR_VAR 0 10
38801: PUSH
38802: LD_VAR 0 10
38806: PPUSH
38807: LD_INT 1
38809: PPUSH
38810: CALL_OW 3
38814: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38815: LD_VAR 0 2
38819: PPUSH
38820: LD_VAR 0 5
38824: PPUSH
38825: CALL 39134 0 2
38829: PUSH
38830: LD_VAR 0 10
38834: PUSH
38835: EMPTY
38836: EQUAL
38837: OR
38838: IFFALSE 38783
// result := [ ] ;
38840: LD_ADDR_VAR 0 6
38844: PUSH
38845: EMPTY
38846: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38847: LD_VAR 0 1
38851: PPUSH
38852: LD_VAR 0 2
38856: PPUSH
38857: LD_VAR 0 3
38861: PPUSH
38862: LD_VAR 0 4
38866: PPUSH
38867: LD_VAR 0 5
38871: PPUSH
38872: CALL_OW 448
38876: IFFALSE 38909
// result := [ chassis , engine , control , weapon ] ;
38878: LD_ADDR_VAR 0 6
38882: PUSH
38883: LD_VAR 0 2
38887: PUSH
38888: LD_VAR 0 3
38892: PUSH
38893: LD_VAR 0 4
38897: PUSH
38898: LD_VAR 0 5
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: ST_TO_ADDR
// end ;
38909: LD_VAR 0 6
38913: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38914: LD_INT 0
38916: PPUSH
// if not chassis or not engine then
38917: LD_VAR 0 1
38921: NOT
38922: PUSH
38923: LD_VAR 0 2
38927: NOT
38928: OR
38929: IFFALSE 38933
// exit ;
38931: GO 39129
// case engine of engine_solar :
38933: LD_VAR 0 2
38937: PUSH
38938: LD_INT 2
38940: DOUBLE
38941: EQUAL
38942: IFTRUE 38946
38944: GO 38984
38946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38947: LD_ADDR_VAR 0 3
38951: PUSH
38952: LD_INT 11
38954: PUSH
38955: LD_INT 12
38957: PUSH
38958: LD_INT 13
38960: PUSH
38961: LD_INT 14
38963: PUSH
38964: LD_INT 1
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: LD_INT 3
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: ST_TO_ADDR
38982: GO 39113
38984: LD_INT 1
38986: DOUBLE
38987: EQUAL
38988: IFTRUE 38992
38990: GO 39054
38992: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38993: LD_ADDR_VAR 0 3
38997: PUSH
38998: LD_INT 11
39000: PUSH
39001: LD_INT 12
39003: PUSH
39004: LD_INT 13
39006: PUSH
39007: LD_INT 14
39009: PUSH
39010: LD_INT 1
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: LD_INT 4
39021: PUSH
39022: LD_INT 5
39024: PUSH
39025: LD_INT 21
39027: PUSH
39028: LD_INT 23
39030: PUSH
39031: LD_INT 22
39033: PUSH
39034: LD_INT 24
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: ST_TO_ADDR
39052: GO 39113
39054: LD_INT 3
39056: DOUBLE
39057: EQUAL
39058: IFTRUE 39062
39060: GO 39112
39062: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39063: LD_ADDR_VAR 0 3
39067: PUSH
39068: LD_INT 13
39070: PUSH
39071: LD_INT 14
39073: PUSH
39074: LD_INT 2
39076: PUSH
39077: LD_INT 3
39079: PUSH
39080: LD_INT 4
39082: PUSH
39083: LD_INT 5
39085: PUSH
39086: LD_INT 21
39088: PUSH
39089: LD_INT 22
39091: PUSH
39092: LD_INT 23
39094: PUSH
39095: LD_INT 24
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: ST_TO_ADDR
39110: GO 39113
39112: POP
// result := ( chassis in result ) ;
39113: LD_ADDR_VAR 0 3
39117: PUSH
39118: LD_VAR 0 1
39122: PUSH
39123: LD_VAR 0 3
39127: IN
39128: ST_TO_ADDR
// end ;
39129: LD_VAR 0 3
39133: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39134: LD_INT 0
39136: PPUSH
// if not chassis or not weapon then
39137: LD_VAR 0 1
39141: NOT
39142: PUSH
39143: LD_VAR 0 2
39147: NOT
39148: OR
39149: IFFALSE 39153
// exit ;
39151: GO 40179
// case weapon of us_machine_gun :
39153: LD_VAR 0 2
39157: PUSH
39158: LD_INT 2
39160: DOUBLE
39161: EQUAL
39162: IFTRUE 39166
39164: GO 39196
39166: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39167: LD_ADDR_VAR 0 3
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 2
39177: PUSH
39178: LD_INT 3
39180: PUSH
39181: LD_INT 4
39183: PUSH
39184: LD_INT 5
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: ST_TO_ADDR
39194: GO 40163
39196: LD_INT 3
39198: DOUBLE
39199: EQUAL
39200: IFTRUE 39204
39202: GO 39234
39204: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39205: LD_ADDR_VAR 0 3
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 2
39215: PUSH
39216: LD_INT 3
39218: PUSH
39219: LD_INT 4
39221: PUSH
39222: LD_INT 5
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: ST_TO_ADDR
39232: GO 40163
39234: LD_INT 11
39236: DOUBLE
39237: EQUAL
39238: IFTRUE 39242
39240: GO 39272
39242: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39243: LD_ADDR_VAR 0 3
39247: PUSH
39248: LD_INT 1
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: LD_INT 4
39259: PUSH
39260: LD_INT 5
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
39270: GO 40163
39272: LD_INT 4
39274: DOUBLE
39275: EQUAL
39276: IFTRUE 39280
39278: GO 39306
39280: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: LD_INT 3
39291: PUSH
39292: LD_INT 4
39294: PUSH
39295: LD_INT 5
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: ST_TO_ADDR
39304: GO 40163
39306: LD_INT 5
39308: DOUBLE
39309: EQUAL
39310: IFTRUE 39314
39312: GO 39340
39314: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39315: LD_ADDR_VAR 0 3
39319: PUSH
39320: LD_INT 2
39322: PUSH
39323: LD_INT 3
39325: PUSH
39326: LD_INT 4
39328: PUSH
39329: LD_INT 5
39331: PUSH
39332: EMPTY
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: ST_TO_ADDR
39338: GO 40163
39340: LD_INT 9
39342: DOUBLE
39343: EQUAL
39344: IFTRUE 39348
39346: GO 39374
39348: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39349: LD_ADDR_VAR 0 3
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: LD_INT 3
39359: PUSH
39360: LD_INT 4
39362: PUSH
39363: LD_INT 5
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
39372: GO 40163
39374: LD_INT 7
39376: DOUBLE
39377: EQUAL
39378: IFTRUE 39382
39380: GO 39408
39382: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39383: LD_ADDR_VAR 0 3
39387: PUSH
39388: LD_INT 2
39390: PUSH
39391: LD_INT 3
39393: PUSH
39394: LD_INT 4
39396: PUSH
39397: LD_INT 5
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: ST_TO_ADDR
39406: GO 40163
39408: LD_INT 12
39410: DOUBLE
39411: EQUAL
39412: IFTRUE 39416
39414: GO 39442
39416: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39417: LD_ADDR_VAR 0 3
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 3
39427: PUSH
39428: LD_INT 4
39430: PUSH
39431: LD_INT 5
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: ST_TO_ADDR
39440: GO 40163
39442: LD_INT 13
39444: DOUBLE
39445: EQUAL
39446: IFTRUE 39450
39448: GO 39476
39450: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39451: LD_ADDR_VAR 0 3
39455: PUSH
39456: LD_INT 2
39458: PUSH
39459: LD_INT 3
39461: PUSH
39462: LD_INT 4
39464: PUSH
39465: LD_INT 5
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: ST_TO_ADDR
39474: GO 40163
39476: LD_INT 14
39478: DOUBLE
39479: EQUAL
39480: IFTRUE 39484
39482: GO 39502
39484: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39485: LD_ADDR_VAR 0 3
39489: PUSH
39490: LD_INT 4
39492: PUSH
39493: LD_INT 5
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: ST_TO_ADDR
39500: GO 40163
39502: LD_INT 6
39504: DOUBLE
39505: EQUAL
39506: IFTRUE 39510
39508: GO 39528
39510: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39511: LD_ADDR_VAR 0 3
39515: PUSH
39516: LD_INT 4
39518: PUSH
39519: LD_INT 5
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: ST_TO_ADDR
39526: GO 40163
39528: LD_INT 10
39530: DOUBLE
39531: EQUAL
39532: IFTRUE 39536
39534: GO 39554
39536: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39537: LD_ADDR_VAR 0 3
39541: PUSH
39542: LD_INT 4
39544: PUSH
39545: LD_INT 5
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: ST_TO_ADDR
39552: GO 40163
39554: LD_INT 22
39556: DOUBLE
39557: EQUAL
39558: IFTRUE 39562
39560: GO 39588
39562: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39563: LD_ADDR_VAR 0 3
39567: PUSH
39568: LD_INT 11
39570: PUSH
39571: LD_INT 12
39573: PUSH
39574: LD_INT 13
39576: PUSH
39577: LD_INT 14
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: ST_TO_ADDR
39586: GO 40163
39588: LD_INT 23
39590: DOUBLE
39591: EQUAL
39592: IFTRUE 39596
39594: GO 39622
39596: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39597: LD_ADDR_VAR 0 3
39601: PUSH
39602: LD_INT 11
39604: PUSH
39605: LD_INT 12
39607: PUSH
39608: LD_INT 13
39610: PUSH
39611: LD_INT 14
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
39620: GO 40163
39622: LD_INT 24
39624: DOUBLE
39625: EQUAL
39626: IFTRUE 39630
39628: GO 39656
39630: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39631: LD_ADDR_VAR 0 3
39635: PUSH
39636: LD_INT 11
39638: PUSH
39639: LD_INT 12
39641: PUSH
39642: LD_INT 13
39644: PUSH
39645: LD_INT 14
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: ST_TO_ADDR
39654: GO 40163
39656: LD_INT 30
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39690
39664: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39665: LD_ADDR_VAR 0 3
39669: PUSH
39670: LD_INT 11
39672: PUSH
39673: LD_INT 12
39675: PUSH
39676: LD_INT 13
39678: PUSH
39679: LD_INT 14
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: ST_TO_ADDR
39688: GO 40163
39690: LD_INT 25
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39698
39696: GO 39716
39698: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39699: LD_ADDR_VAR 0 3
39703: PUSH
39704: LD_INT 13
39706: PUSH
39707: LD_INT 14
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: ST_TO_ADDR
39714: GO 40163
39716: LD_INT 27
39718: DOUBLE
39719: EQUAL
39720: IFTRUE 39724
39722: GO 39742
39724: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39725: LD_ADDR_VAR 0 3
39729: PUSH
39730: LD_INT 13
39732: PUSH
39733: LD_INT 14
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: ST_TO_ADDR
39740: GO 40163
39742: LD_INT 28
39744: DOUBLE
39745: EQUAL
39746: IFTRUE 39750
39748: GO 39768
39750: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39751: LD_ADDR_VAR 0 3
39755: PUSH
39756: LD_INT 13
39758: PUSH
39759: LD_INT 14
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: ST_TO_ADDR
39766: GO 40163
39768: LD_INT 29
39770: DOUBLE
39771: EQUAL
39772: IFTRUE 39776
39774: GO 39794
39776: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39777: LD_ADDR_VAR 0 3
39781: PUSH
39782: LD_INT 13
39784: PUSH
39785: LD_INT 14
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: ST_TO_ADDR
39792: GO 40163
39794: LD_INT 31
39796: DOUBLE
39797: EQUAL
39798: IFTRUE 39802
39800: GO 39820
39802: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39803: LD_ADDR_VAR 0 3
39807: PUSH
39808: LD_INT 13
39810: PUSH
39811: LD_INT 14
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: ST_TO_ADDR
39818: GO 40163
39820: LD_INT 26
39822: DOUBLE
39823: EQUAL
39824: IFTRUE 39828
39826: GO 39846
39828: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39829: LD_ADDR_VAR 0 3
39833: PUSH
39834: LD_INT 13
39836: PUSH
39837: LD_INT 14
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: ST_TO_ADDR
39844: GO 40163
39846: LD_INT 42
39848: DOUBLE
39849: EQUAL
39850: IFTRUE 39854
39852: GO 39880
39854: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39855: LD_ADDR_VAR 0 3
39859: PUSH
39860: LD_INT 21
39862: PUSH
39863: LD_INT 22
39865: PUSH
39866: LD_INT 23
39868: PUSH
39869: LD_INT 24
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: ST_TO_ADDR
39878: GO 40163
39880: LD_INT 43
39882: DOUBLE
39883: EQUAL
39884: IFTRUE 39888
39886: GO 39914
39888: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39889: LD_ADDR_VAR 0 3
39893: PUSH
39894: LD_INT 21
39896: PUSH
39897: LD_INT 22
39899: PUSH
39900: LD_INT 23
39902: PUSH
39903: LD_INT 24
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: LIST
39910: LIST
39911: ST_TO_ADDR
39912: GO 40163
39914: LD_INT 44
39916: DOUBLE
39917: EQUAL
39918: IFTRUE 39922
39920: GO 39948
39922: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39923: LD_ADDR_VAR 0 3
39927: PUSH
39928: LD_INT 21
39930: PUSH
39931: LD_INT 22
39933: PUSH
39934: LD_INT 23
39936: PUSH
39937: LD_INT 24
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: ST_TO_ADDR
39946: GO 40163
39948: LD_INT 45
39950: DOUBLE
39951: EQUAL
39952: IFTRUE 39956
39954: GO 39982
39956: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39957: LD_ADDR_VAR 0 3
39961: PUSH
39962: LD_INT 21
39964: PUSH
39965: LD_INT 22
39967: PUSH
39968: LD_INT 23
39970: PUSH
39971: LD_INT 24
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
39980: GO 40163
39982: LD_INT 49
39984: DOUBLE
39985: EQUAL
39986: IFTRUE 39990
39988: GO 40016
39990: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_INT 21
39998: PUSH
39999: LD_INT 22
40001: PUSH
40002: LD_INT 23
40004: PUSH
40005: LD_INT 24
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: ST_TO_ADDR
40014: GO 40163
40016: LD_INT 51
40018: DOUBLE
40019: EQUAL
40020: IFTRUE 40024
40022: GO 40050
40024: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40025: LD_ADDR_VAR 0 3
40029: PUSH
40030: LD_INT 21
40032: PUSH
40033: LD_INT 22
40035: PUSH
40036: LD_INT 23
40038: PUSH
40039: LD_INT 24
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: ST_TO_ADDR
40048: GO 40163
40050: LD_INT 52
40052: DOUBLE
40053: EQUAL
40054: IFTRUE 40058
40056: GO 40084
40058: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40059: LD_ADDR_VAR 0 3
40063: PUSH
40064: LD_INT 21
40066: PUSH
40067: LD_INT 22
40069: PUSH
40070: LD_INT 23
40072: PUSH
40073: LD_INT 24
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: ST_TO_ADDR
40082: GO 40163
40084: LD_INT 53
40086: DOUBLE
40087: EQUAL
40088: IFTRUE 40092
40090: GO 40110
40092: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40093: LD_ADDR_VAR 0 3
40097: PUSH
40098: LD_INT 23
40100: PUSH
40101: LD_INT 24
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: ST_TO_ADDR
40108: GO 40163
40110: LD_INT 46
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40136
40118: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40119: LD_ADDR_VAR 0 3
40123: PUSH
40124: LD_INT 23
40126: PUSH
40127: LD_INT 24
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: ST_TO_ADDR
40134: GO 40163
40136: LD_INT 47
40138: DOUBLE
40139: EQUAL
40140: IFTRUE 40144
40142: GO 40162
40144: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40145: LD_ADDR_VAR 0 3
40149: PUSH
40150: LD_INT 23
40152: PUSH
40153: LD_INT 24
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: ST_TO_ADDR
40160: GO 40163
40162: POP
// result := ( chassis in result ) ;
40163: LD_ADDR_VAR 0 3
40167: PUSH
40168: LD_VAR 0 1
40172: PUSH
40173: LD_VAR 0 3
40177: IN
40178: ST_TO_ADDR
// end ;
40179: LD_VAR 0 3
40183: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40184: LD_INT 0
40186: PPUSH
40187: PPUSH
40188: PPUSH
40189: PPUSH
40190: PPUSH
40191: PPUSH
40192: PPUSH
// result := array ;
40193: LD_ADDR_VAR 0 5
40197: PUSH
40198: LD_VAR 0 1
40202: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40203: LD_VAR 0 1
40207: NOT
40208: PUSH
40209: LD_VAR 0 2
40213: NOT
40214: OR
40215: PUSH
40216: LD_VAR 0 3
40220: NOT
40221: OR
40222: PUSH
40223: LD_VAR 0 2
40227: PUSH
40228: LD_VAR 0 1
40232: GREATER
40233: OR
40234: PUSH
40235: LD_VAR 0 3
40239: PUSH
40240: LD_VAR 0 1
40244: GREATER
40245: OR
40246: IFFALSE 40250
// exit ;
40248: GO 40546
// if direction then
40250: LD_VAR 0 4
40254: IFFALSE 40318
// begin d := 1 ;
40256: LD_ADDR_VAR 0 9
40260: PUSH
40261: LD_INT 1
40263: ST_TO_ADDR
// if i_from > i_to then
40264: LD_VAR 0 2
40268: PUSH
40269: LD_VAR 0 3
40273: GREATER
40274: IFFALSE 40300
// length := ( array - i_from ) + i_to else
40276: LD_ADDR_VAR 0 11
40280: PUSH
40281: LD_VAR 0 1
40285: PUSH
40286: LD_VAR 0 2
40290: MINUS
40291: PUSH
40292: LD_VAR 0 3
40296: PLUS
40297: ST_TO_ADDR
40298: GO 40316
// length := i_to - i_from ;
40300: LD_ADDR_VAR 0 11
40304: PUSH
40305: LD_VAR 0 3
40309: PUSH
40310: LD_VAR 0 2
40314: MINUS
40315: ST_TO_ADDR
// end else
40316: GO 40379
// begin d := - 1 ;
40318: LD_ADDR_VAR 0 9
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: ST_TO_ADDR
// if i_from > i_to then
40327: LD_VAR 0 2
40331: PUSH
40332: LD_VAR 0 3
40336: GREATER
40337: IFFALSE 40357
// length := i_from - i_to else
40339: LD_ADDR_VAR 0 11
40343: PUSH
40344: LD_VAR 0 2
40348: PUSH
40349: LD_VAR 0 3
40353: MINUS
40354: ST_TO_ADDR
40355: GO 40379
// length := ( array - i_to ) + i_from ;
40357: LD_ADDR_VAR 0 11
40361: PUSH
40362: LD_VAR 0 1
40366: PUSH
40367: LD_VAR 0 3
40371: MINUS
40372: PUSH
40373: LD_VAR 0 2
40377: PLUS
40378: ST_TO_ADDR
// end ; if not length then
40379: LD_VAR 0 11
40383: NOT
40384: IFFALSE 40388
// exit ;
40386: GO 40546
// tmp := array ;
40388: LD_ADDR_VAR 0 10
40392: PUSH
40393: LD_VAR 0 1
40397: ST_TO_ADDR
// for i = 1 to length do
40398: LD_ADDR_VAR 0 6
40402: PUSH
40403: DOUBLE
40404: LD_INT 1
40406: DEC
40407: ST_TO_ADDR
40408: LD_VAR 0 11
40412: PUSH
40413: FOR_TO
40414: IFFALSE 40534
// begin for j = 1 to array do
40416: LD_ADDR_VAR 0 7
40420: PUSH
40421: DOUBLE
40422: LD_INT 1
40424: DEC
40425: ST_TO_ADDR
40426: LD_VAR 0 1
40430: PUSH
40431: FOR_TO
40432: IFFALSE 40520
// begin k := j + d ;
40434: LD_ADDR_VAR 0 8
40438: PUSH
40439: LD_VAR 0 7
40443: PUSH
40444: LD_VAR 0 9
40448: PLUS
40449: ST_TO_ADDR
// if k > array then
40450: LD_VAR 0 8
40454: PUSH
40455: LD_VAR 0 1
40459: GREATER
40460: IFFALSE 40470
// k := 1 ;
40462: LD_ADDR_VAR 0 8
40466: PUSH
40467: LD_INT 1
40469: ST_TO_ADDR
// if not k then
40470: LD_VAR 0 8
40474: NOT
40475: IFFALSE 40487
// k := array ;
40477: LD_ADDR_VAR 0 8
40481: PUSH
40482: LD_VAR 0 1
40486: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40487: LD_ADDR_VAR 0 10
40491: PUSH
40492: LD_VAR 0 10
40496: PPUSH
40497: LD_VAR 0 8
40501: PPUSH
40502: LD_VAR 0 1
40506: PUSH
40507: LD_VAR 0 7
40511: ARRAY
40512: PPUSH
40513: CALL_OW 1
40517: ST_TO_ADDR
// end ;
40518: GO 40431
40520: POP
40521: POP
// array := tmp ;
40522: LD_ADDR_VAR 0 1
40526: PUSH
40527: LD_VAR 0 10
40531: ST_TO_ADDR
// end ;
40532: GO 40413
40534: POP
40535: POP
// result := array ;
40536: LD_ADDR_VAR 0 5
40540: PUSH
40541: LD_VAR 0 1
40545: ST_TO_ADDR
// end ;
40546: LD_VAR 0 5
40550: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40551: LD_INT 0
40553: PPUSH
40554: PPUSH
// result := 0 ;
40555: LD_ADDR_VAR 0 3
40559: PUSH
40560: LD_INT 0
40562: ST_TO_ADDR
// if not array or not value in array then
40563: LD_VAR 0 1
40567: NOT
40568: PUSH
40569: LD_VAR 0 2
40573: PUSH
40574: LD_VAR 0 1
40578: IN
40579: NOT
40580: OR
40581: IFFALSE 40585
// exit ;
40583: GO 40639
// for i = 1 to array do
40585: LD_ADDR_VAR 0 4
40589: PUSH
40590: DOUBLE
40591: LD_INT 1
40593: DEC
40594: ST_TO_ADDR
40595: LD_VAR 0 1
40599: PUSH
40600: FOR_TO
40601: IFFALSE 40637
// if value = array [ i ] then
40603: LD_VAR 0 2
40607: PUSH
40608: LD_VAR 0 1
40612: PUSH
40613: LD_VAR 0 4
40617: ARRAY
40618: EQUAL
40619: IFFALSE 40635
// begin result := i ;
40621: LD_ADDR_VAR 0 3
40625: PUSH
40626: LD_VAR 0 4
40630: ST_TO_ADDR
// exit ;
40631: POP
40632: POP
40633: GO 40639
// end ;
40635: GO 40600
40637: POP
40638: POP
// end ;
40639: LD_VAR 0 3
40643: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40644: LD_INT 0
40646: PPUSH
// vc_chassis := chassis ;
40647: LD_ADDR_OWVAR 37
40651: PUSH
40652: LD_VAR 0 1
40656: ST_TO_ADDR
// vc_engine := engine ;
40657: LD_ADDR_OWVAR 39
40661: PUSH
40662: LD_VAR 0 2
40666: ST_TO_ADDR
// vc_control := control ;
40667: LD_ADDR_OWVAR 38
40671: PUSH
40672: LD_VAR 0 3
40676: ST_TO_ADDR
// vc_weapon := weapon ;
40677: LD_ADDR_OWVAR 40
40681: PUSH
40682: LD_VAR 0 4
40686: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40687: LD_ADDR_OWVAR 41
40691: PUSH
40692: LD_VAR 0 5
40696: ST_TO_ADDR
// end ;
40697: LD_VAR 0 6
40701: RET
// export function WantPlant ( unit ) ; var task ; begin
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
// result := false ;
40706: LD_ADDR_VAR 0 2
40710: PUSH
40711: LD_INT 0
40713: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40714: LD_ADDR_VAR 0 3
40718: PUSH
40719: LD_VAR 0 1
40723: PPUSH
40724: CALL_OW 437
40728: ST_TO_ADDR
// if task then
40729: LD_VAR 0 3
40733: IFFALSE 40761
// if task [ 1 ] [ 1 ] = p then
40735: LD_VAR 0 3
40739: PUSH
40740: LD_INT 1
40742: ARRAY
40743: PUSH
40744: LD_INT 1
40746: ARRAY
40747: PUSH
40748: LD_STRING p
40750: EQUAL
40751: IFFALSE 40761
// result := true ;
40753: LD_ADDR_VAR 0 2
40757: PUSH
40758: LD_INT 1
40760: ST_TO_ADDR
// end ;
40761: LD_VAR 0 2
40765: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40766: LD_INT 0
40768: PPUSH
40769: PPUSH
40770: PPUSH
40771: PPUSH
// if pos < 1 then
40772: LD_VAR 0 2
40776: PUSH
40777: LD_INT 1
40779: LESS
40780: IFFALSE 40784
// exit ;
40782: GO 41087
// if pos = 1 then
40784: LD_VAR 0 2
40788: PUSH
40789: LD_INT 1
40791: EQUAL
40792: IFFALSE 40825
// result := Replace ( arr , pos [ 1 ] , value ) else
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 1
40803: PPUSH
40804: LD_VAR 0 2
40808: PUSH
40809: LD_INT 1
40811: ARRAY
40812: PPUSH
40813: LD_VAR 0 3
40817: PPUSH
40818: CALL_OW 1
40822: ST_TO_ADDR
40823: GO 41087
// begin tmp := arr ;
40825: LD_ADDR_VAR 0 6
40829: PUSH
40830: LD_VAR 0 1
40834: ST_TO_ADDR
// s_arr := [ tmp ] ;
40835: LD_ADDR_VAR 0 7
40839: PUSH
40840: LD_VAR 0 6
40844: PUSH
40845: EMPTY
40846: LIST
40847: ST_TO_ADDR
// for i = 1 to pos - 1 do
40848: LD_ADDR_VAR 0 5
40852: PUSH
40853: DOUBLE
40854: LD_INT 1
40856: DEC
40857: ST_TO_ADDR
40858: LD_VAR 0 2
40862: PUSH
40863: LD_INT 1
40865: MINUS
40866: PUSH
40867: FOR_TO
40868: IFFALSE 40913
// begin tmp := tmp [ pos [ i ] ] ;
40870: LD_ADDR_VAR 0 6
40874: PUSH
40875: LD_VAR 0 6
40879: PUSH
40880: LD_VAR 0 2
40884: PUSH
40885: LD_VAR 0 5
40889: ARRAY
40890: ARRAY
40891: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40892: LD_ADDR_VAR 0 7
40896: PUSH
40897: LD_VAR 0 7
40901: PUSH
40902: LD_VAR 0 6
40906: PUSH
40907: EMPTY
40908: LIST
40909: ADD
40910: ST_TO_ADDR
// end ;
40911: GO 40867
40913: POP
40914: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40915: LD_ADDR_VAR 0 6
40919: PUSH
40920: LD_VAR 0 6
40924: PPUSH
40925: LD_VAR 0 2
40929: PUSH
40930: LD_VAR 0 2
40934: ARRAY
40935: PPUSH
40936: LD_VAR 0 3
40940: PPUSH
40941: CALL_OW 1
40945: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40946: LD_ADDR_VAR 0 7
40950: PUSH
40951: LD_VAR 0 7
40955: PPUSH
40956: LD_VAR 0 7
40960: PPUSH
40961: LD_VAR 0 6
40965: PPUSH
40966: CALL_OW 1
40970: ST_TO_ADDR
// for i = s_arr downto 2 do
40971: LD_ADDR_VAR 0 5
40975: PUSH
40976: DOUBLE
40977: LD_VAR 0 7
40981: INC
40982: ST_TO_ADDR
40983: LD_INT 2
40985: PUSH
40986: FOR_DOWNTO
40987: IFFALSE 41071
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40989: LD_ADDR_VAR 0 6
40993: PUSH
40994: LD_VAR 0 7
40998: PUSH
40999: LD_VAR 0 5
41003: PUSH
41004: LD_INT 1
41006: MINUS
41007: ARRAY
41008: PPUSH
41009: LD_VAR 0 2
41013: PUSH
41014: LD_VAR 0 5
41018: PUSH
41019: LD_INT 1
41021: MINUS
41022: ARRAY
41023: PPUSH
41024: LD_VAR 0 7
41028: PUSH
41029: LD_VAR 0 5
41033: ARRAY
41034: PPUSH
41035: CALL_OW 1
41039: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41040: LD_ADDR_VAR 0 7
41044: PUSH
41045: LD_VAR 0 7
41049: PPUSH
41050: LD_VAR 0 5
41054: PUSH
41055: LD_INT 1
41057: MINUS
41058: PPUSH
41059: LD_VAR 0 6
41063: PPUSH
41064: CALL_OW 1
41068: ST_TO_ADDR
// end ;
41069: GO 40986
41071: POP
41072: POP
// result := s_arr [ 1 ] ;
41073: LD_ADDR_VAR 0 4
41077: PUSH
41078: LD_VAR 0 7
41082: PUSH
41083: LD_INT 1
41085: ARRAY
41086: ST_TO_ADDR
// end ; end ;
41087: LD_VAR 0 4
41091: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41092: LD_INT 0
41094: PPUSH
41095: PPUSH
// if not list then
41096: LD_VAR 0 1
41100: NOT
41101: IFFALSE 41105
// exit ;
41103: GO 41196
// i := list [ pos1 ] ;
41105: LD_ADDR_VAR 0 5
41109: PUSH
41110: LD_VAR 0 1
41114: PUSH
41115: LD_VAR 0 2
41119: ARRAY
41120: ST_TO_ADDR
// if not i then
41121: LD_VAR 0 5
41125: NOT
41126: IFFALSE 41130
// exit ;
41128: GO 41196
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41130: LD_ADDR_VAR 0 1
41134: PUSH
41135: LD_VAR 0 1
41139: PPUSH
41140: LD_VAR 0 2
41144: PPUSH
41145: LD_VAR 0 1
41149: PUSH
41150: LD_VAR 0 3
41154: ARRAY
41155: PPUSH
41156: CALL_OW 1
41160: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41161: LD_ADDR_VAR 0 1
41165: PUSH
41166: LD_VAR 0 1
41170: PPUSH
41171: LD_VAR 0 3
41175: PPUSH
41176: LD_VAR 0 5
41180: PPUSH
41181: CALL_OW 1
41185: ST_TO_ADDR
// result := list ;
41186: LD_ADDR_VAR 0 4
41190: PUSH
41191: LD_VAR 0 1
41195: ST_TO_ADDR
// end ;
41196: LD_VAR 0 4
41200: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41201: LD_INT 0
41203: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41204: LD_ADDR_VAR 0 5
41208: PUSH
41209: LD_VAR 0 1
41213: PPUSH
41214: CALL_OW 250
41218: PPUSH
41219: LD_VAR 0 1
41223: PPUSH
41224: CALL_OW 251
41228: PPUSH
41229: LD_VAR 0 2
41233: PPUSH
41234: LD_VAR 0 3
41238: PPUSH
41239: LD_VAR 0 4
41243: PPUSH
41244: CALL 41254 0 5
41248: ST_TO_ADDR
// end ;
41249: LD_VAR 0 5
41253: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41254: LD_INT 0
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
// if not list then
41260: LD_VAR 0 3
41264: NOT
41265: IFFALSE 41269
// exit ;
41267: GO 41657
// result := [ ] ;
41269: LD_ADDR_VAR 0 6
41273: PUSH
41274: EMPTY
41275: ST_TO_ADDR
// for i in list do
41276: LD_ADDR_VAR 0 7
41280: PUSH
41281: LD_VAR 0 3
41285: PUSH
41286: FOR_IN
41287: IFFALSE 41489
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41289: LD_ADDR_VAR 0 9
41293: PUSH
41294: LD_VAR 0 7
41298: PPUSH
41299: LD_VAR 0 1
41303: PPUSH
41304: LD_VAR 0 2
41308: PPUSH
41309: CALL_OW 297
41313: ST_TO_ADDR
// if not result then
41314: LD_VAR 0 6
41318: NOT
41319: IFFALSE 41345
// result := [ [ i , tmp ] ] else
41321: LD_ADDR_VAR 0 6
41325: PUSH
41326: LD_VAR 0 7
41330: PUSH
41331: LD_VAR 0 9
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: ST_TO_ADDR
41343: GO 41487
// begin if result [ result ] [ 2 ] < tmp then
41345: LD_VAR 0 6
41349: PUSH
41350: LD_VAR 0 6
41354: ARRAY
41355: PUSH
41356: LD_INT 2
41358: ARRAY
41359: PUSH
41360: LD_VAR 0 9
41364: LESS
41365: IFFALSE 41407
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41367: LD_ADDR_VAR 0 6
41371: PUSH
41372: LD_VAR 0 6
41376: PPUSH
41377: LD_VAR 0 6
41381: PUSH
41382: LD_INT 1
41384: PLUS
41385: PPUSH
41386: LD_VAR 0 7
41390: PUSH
41391: LD_VAR 0 9
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PPUSH
41400: CALL_OW 2
41404: ST_TO_ADDR
41405: GO 41487
// for j = 1 to result do
41407: LD_ADDR_VAR 0 8
41411: PUSH
41412: DOUBLE
41413: LD_INT 1
41415: DEC
41416: ST_TO_ADDR
41417: LD_VAR 0 6
41421: PUSH
41422: FOR_TO
41423: IFFALSE 41485
// begin if tmp < result [ j ] [ 2 ] then
41425: LD_VAR 0 9
41429: PUSH
41430: LD_VAR 0 6
41434: PUSH
41435: LD_VAR 0 8
41439: ARRAY
41440: PUSH
41441: LD_INT 2
41443: ARRAY
41444: LESS
41445: IFFALSE 41483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41447: LD_ADDR_VAR 0 6
41451: PUSH
41452: LD_VAR 0 6
41456: PPUSH
41457: LD_VAR 0 8
41461: PPUSH
41462: LD_VAR 0 7
41466: PUSH
41467: LD_VAR 0 9
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PPUSH
41476: CALL_OW 2
41480: ST_TO_ADDR
// break ;
41481: GO 41485
// end ; end ;
41483: GO 41422
41485: POP
41486: POP
// end ; end ;
41487: GO 41286
41489: POP
41490: POP
// if result and not asc then
41491: LD_VAR 0 6
41495: PUSH
41496: LD_VAR 0 4
41500: NOT
41501: AND
41502: IFFALSE 41577
// begin tmp := result ;
41504: LD_ADDR_VAR 0 9
41508: PUSH
41509: LD_VAR 0 6
41513: ST_TO_ADDR
// for i = tmp downto 1 do
41514: LD_ADDR_VAR 0 7
41518: PUSH
41519: DOUBLE
41520: LD_VAR 0 9
41524: INC
41525: ST_TO_ADDR
41526: LD_INT 1
41528: PUSH
41529: FOR_DOWNTO
41530: IFFALSE 41575
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41532: LD_ADDR_VAR 0 6
41536: PUSH
41537: LD_VAR 0 6
41541: PPUSH
41542: LD_VAR 0 9
41546: PUSH
41547: LD_VAR 0 7
41551: MINUS
41552: PUSH
41553: LD_INT 1
41555: PLUS
41556: PPUSH
41557: LD_VAR 0 9
41561: PUSH
41562: LD_VAR 0 7
41566: ARRAY
41567: PPUSH
41568: CALL_OW 1
41572: ST_TO_ADDR
41573: GO 41529
41575: POP
41576: POP
// end ; tmp := [ ] ;
41577: LD_ADDR_VAR 0 9
41581: PUSH
41582: EMPTY
41583: ST_TO_ADDR
// if mode then
41584: LD_VAR 0 5
41588: IFFALSE 41657
// begin for i = 1 to result do
41590: LD_ADDR_VAR 0 7
41594: PUSH
41595: DOUBLE
41596: LD_INT 1
41598: DEC
41599: ST_TO_ADDR
41600: LD_VAR 0 6
41604: PUSH
41605: FOR_TO
41606: IFFALSE 41645
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41608: LD_ADDR_VAR 0 9
41612: PUSH
41613: LD_VAR 0 9
41617: PPUSH
41618: LD_VAR 0 7
41622: PPUSH
41623: LD_VAR 0 6
41627: PUSH
41628: LD_VAR 0 7
41632: ARRAY
41633: PUSH
41634: LD_INT 1
41636: ARRAY
41637: PPUSH
41638: CALL_OW 1
41642: ST_TO_ADDR
41643: GO 41605
41645: POP
41646: POP
// result := tmp ;
41647: LD_ADDR_VAR 0 6
41651: PUSH
41652: LD_VAR 0 9
41656: ST_TO_ADDR
// end ; end ;
41657: LD_VAR 0 6
41661: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41662: LD_INT 0
41664: PPUSH
41665: PPUSH
41666: PPUSH
41667: PPUSH
41668: PPUSH
41669: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41670: LD_ADDR_VAR 0 5
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: LD_INT 0
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: LIST
41690: LIST
41691: ST_TO_ADDR
// if not x or not y then
41692: LD_VAR 0 2
41696: NOT
41697: PUSH
41698: LD_VAR 0 3
41702: NOT
41703: OR
41704: IFFALSE 41708
// exit ;
41706: GO 43354
// if not range then
41708: LD_VAR 0 4
41712: NOT
41713: IFFALSE 41723
// range := 10 ;
41715: LD_ADDR_VAR 0 4
41719: PUSH
41720: LD_INT 10
41722: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41723: LD_ADDR_VAR 0 8
41727: PUSH
41728: LD_INT 81
41730: PUSH
41731: LD_VAR 0 1
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 92
41742: PUSH
41743: LD_VAR 0 2
41747: PUSH
41748: LD_VAR 0 3
41752: PUSH
41753: LD_VAR 0 4
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: LD_INT 21
41769: PUSH
41770: LD_INT 3
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: LIST
41785: PPUSH
41786: CALL_OW 69
41790: ST_TO_ADDR
// if not tmp then
41791: LD_VAR 0 8
41795: NOT
41796: IFFALSE 41800
// exit ;
41798: GO 43354
// for i in tmp do
41800: LD_ADDR_VAR 0 6
41804: PUSH
41805: LD_VAR 0 8
41809: PUSH
41810: FOR_IN
41811: IFFALSE 43329
// begin points := [ 0 , 0 , 0 ] ;
41813: LD_ADDR_VAR 0 9
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: LIST
41831: ST_TO_ADDR
// bpoints := 1 ;
41832: LD_ADDR_VAR 0 10
41836: PUSH
41837: LD_INT 1
41839: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41840: LD_VAR 0 6
41844: PPUSH
41845: CALL_OW 247
41849: PUSH
41850: LD_INT 1
41852: DOUBLE
41853: EQUAL
41854: IFTRUE 41858
41856: GO 42436
41858: POP
// begin if GetClass ( i ) = 1 then
41859: LD_VAR 0 6
41863: PPUSH
41864: CALL_OW 257
41868: PUSH
41869: LD_INT 1
41871: EQUAL
41872: IFFALSE 41893
// points := [ 10 , 5 , 3 ] ;
41874: LD_ADDR_VAR 0 9
41878: PUSH
41879: LD_INT 10
41881: PUSH
41882: LD_INT 5
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: LIST
41892: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41893: LD_VAR 0 6
41897: PPUSH
41898: CALL_OW 257
41902: PUSH
41903: LD_INT 2
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 4
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: IN
41917: IFFALSE 41938
// points := [ 3 , 2 , 1 ] ;
41919: LD_ADDR_VAR 0 9
41923: PUSH
41924: LD_INT 3
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 1
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41938: LD_VAR 0 6
41942: PPUSH
41943: CALL_OW 257
41947: PUSH
41948: LD_INT 5
41950: EQUAL
41951: IFFALSE 41972
// points := [ 130 , 5 , 2 ] ;
41953: LD_ADDR_VAR 0 9
41957: PUSH
41958: LD_INT 130
41960: PUSH
41961: LD_INT 5
41963: PUSH
41964: LD_INT 2
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41972: LD_VAR 0 6
41976: PPUSH
41977: CALL_OW 257
41981: PUSH
41982: LD_INT 8
41984: EQUAL
41985: IFFALSE 42006
// points := [ 35 , 35 , 30 ] ;
41987: LD_ADDR_VAR 0 9
41991: PUSH
41992: LD_INT 35
41994: PUSH
41995: LD_INT 35
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: LIST
42005: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42006: LD_VAR 0 6
42010: PPUSH
42011: CALL_OW 257
42015: PUSH
42016: LD_INT 9
42018: EQUAL
42019: IFFALSE 42040
// points := [ 20 , 55 , 40 ] ;
42021: LD_ADDR_VAR 0 9
42025: PUSH
42026: LD_INT 20
42028: PUSH
42029: LD_INT 55
42031: PUSH
42032: LD_INT 40
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42040: LD_VAR 0 6
42044: PPUSH
42045: CALL_OW 257
42049: PUSH
42050: LD_INT 12
42052: PUSH
42053: LD_INT 16
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: IN
42060: IFFALSE 42081
// points := [ 5 , 3 , 2 ] ;
42062: LD_ADDR_VAR 0 9
42066: PUSH
42067: LD_INT 5
42069: PUSH
42070: LD_INT 3
42072: PUSH
42073: LD_INT 2
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: LIST
42080: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42081: LD_VAR 0 6
42085: PPUSH
42086: CALL_OW 257
42090: PUSH
42091: LD_INT 17
42093: EQUAL
42094: IFFALSE 42115
// points := [ 100 , 50 , 75 ] ;
42096: LD_ADDR_VAR 0 9
42100: PUSH
42101: LD_INT 100
42103: PUSH
42104: LD_INT 50
42106: PUSH
42107: LD_INT 75
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42115: LD_VAR 0 6
42119: PPUSH
42120: CALL_OW 257
42124: PUSH
42125: LD_INT 15
42127: EQUAL
42128: IFFALSE 42149
// points := [ 10 , 5 , 3 ] ;
42130: LD_ADDR_VAR 0 9
42134: PUSH
42135: LD_INT 10
42137: PUSH
42138: LD_INT 5
42140: PUSH
42141: LD_INT 3
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: LIST
42148: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42149: LD_VAR 0 6
42153: PPUSH
42154: CALL_OW 257
42158: PUSH
42159: LD_INT 14
42161: EQUAL
42162: IFFALSE 42183
// points := [ 10 , 0 , 0 ] ;
42164: LD_ADDR_VAR 0 9
42168: PUSH
42169: LD_INT 10
42171: PUSH
42172: LD_INT 0
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42183: LD_VAR 0 6
42187: PPUSH
42188: CALL_OW 257
42192: PUSH
42193: LD_INT 11
42195: EQUAL
42196: IFFALSE 42217
// points := [ 30 , 10 , 5 ] ;
42198: LD_ADDR_VAR 0 9
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_INT 10
42208: PUSH
42209: LD_INT 5
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42217: LD_VAR 0 1
42221: PPUSH
42222: LD_INT 5
42224: PPUSH
42225: CALL_OW 321
42229: PUSH
42230: LD_INT 2
42232: EQUAL
42233: IFFALSE 42250
// bpoints := bpoints * 1.8 ;
42235: LD_ADDR_VAR 0 10
42239: PUSH
42240: LD_VAR 0 10
42244: PUSH
42245: LD_REAL  1.80000000000000E+0000
42248: MUL
42249: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42250: LD_VAR 0 6
42254: PPUSH
42255: CALL_OW 257
42259: PUSH
42260: LD_INT 1
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: LD_INT 3
42268: PUSH
42269: LD_INT 4
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: IN
42278: PUSH
42279: LD_VAR 0 1
42283: PPUSH
42284: LD_INT 51
42286: PPUSH
42287: CALL_OW 321
42291: PUSH
42292: LD_INT 2
42294: EQUAL
42295: AND
42296: IFFALSE 42313
// bpoints := bpoints * 1.2 ;
42298: LD_ADDR_VAR 0 10
42302: PUSH
42303: LD_VAR 0 10
42307: PUSH
42308: LD_REAL  1.20000000000000E+0000
42311: MUL
42312: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42313: LD_VAR 0 6
42317: PPUSH
42318: CALL_OW 257
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: LD_INT 7
42328: PUSH
42329: LD_INT 9
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: LIST
42336: IN
42337: PUSH
42338: LD_VAR 0 1
42342: PPUSH
42343: LD_INT 52
42345: PPUSH
42346: CALL_OW 321
42350: PUSH
42351: LD_INT 2
42353: EQUAL
42354: AND
42355: IFFALSE 42372
// bpoints := bpoints * 1.5 ;
42357: LD_ADDR_VAR 0 10
42361: PUSH
42362: LD_VAR 0 10
42366: PUSH
42367: LD_REAL  1.50000000000000E+0000
42370: MUL
42371: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42372: LD_VAR 0 1
42376: PPUSH
42377: LD_INT 66
42379: PPUSH
42380: CALL_OW 321
42384: PUSH
42385: LD_INT 2
42387: EQUAL
42388: IFFALSE 42405
// bpoints := bpoints * 1.1 ;
42390: LD_ADDR_VAR 0 10
42394: PUSH
42395: LD_VAR 0 10
42399: PUSH
42400: LD_REAL  1.10000000000000E+0000
42403: MUL
42404: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42405: LD_ADDR_VAR 0 10
42409: PUSH
42410: LD_VAR 0 10
42414: PUSH
42415: LD_VAR 0 6
42419: PPUSH
42420: LD_INT 1
42422: PPUSH
42423: CALL_OW 259
42427: PUSH
42428: LD_REAL  1.15000000000000E+0000
42431: MUL
42432: MUL
42433: ST_TO_ADDR
// end ; unit_vehicle :
42434: GO 43258
42436: LD_INT 2
42438: DOUBLE
42439: EQUAL
42440: IFTRUE 42444
42442: GO 43246
42444: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42445: LD_VAR 0 6
42449: PPUSH
42450: CALL_OW 264
42454: PUSH
42455: LD_INT 2
42457: PUSH
42458: LD_INT 42
42460: PUSH
42461: LD_INT 24
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: IN
42469: IFFALSE 42490
// points := [ 25 , 5 , 3 ] ;
42471: LD_ADDR_VAR 0 9
42475: PUSH
42476: LD_INT 25
42478: PUSH
42479: LD_INT 5
42481: PUSH
42482: LD_INT 3
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42490: LD_VAR 0 6
42494: PPUSH
42495: CALL_OW 264
42499: PUSH
42500: LD_INT 4
42502: PUSH
42503: LD_INT 43
42505: PUSH
42506: LD_INT 25
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: LIST
42513: IN
42514: IFFALSE 42535
// points := [ 40 , 15 , 5 ] ;
42516: LD_ADDR_VAR 0 9
42520: PUSH
42521: LD_INT 40
42523: PUSH
42524: LD_INT 15
42526: PUSH
42527: LD_INT 5
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: LIST
42534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42535: LD_VAR 0 6
42539: PPUSH
42540: CALL_OW 264
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 23
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: IN
42555: IFFALSE 42576
// points := [ 7 , 25 , 8 ] ;
42557: LD_ADDR_VAR 0 9
42561: PUSH
42562: LD_INT 7
42564: PUSH
42565: LD_INT 25
42567: PUSH
42568: LD_INT 8
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: LIST
42575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42576: LD_VAR 0 6
42580: PPUSH
42581: CALL_OW 264
42585: PUSH
42586: LD_INT 5
42588: PUSH
42589: LD_INT 27
42591: PUSH
42592: LD_INT 44
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: LIST
42599: IN
42600: IFFALSE 42621
// points := [ 14 , 50 , 16 ] ;
42602: LD_ADDR_VAR 0 9
42606: PUSH
42607: LD_INT 14
42609: PUSH
42610: LD_INT 50
42612: PUSH
42613: LD_INT 16
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: LIST
42620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42621: LD_VAR 0 6
42625: PPUSH
42626: CALL_OW 264
42630: PUSH
42631: LD_INT 6
42633: PUSH
42634: LD_INT 46
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: IN
42641: IFFALSE 42662
// points := [ 32 , 120 , 70 ] ;
42643: LD_ADDR_VAR 0 9
42647: PUSH
42648: LD_INT 32
42650: PUSH
42651: LD_INT 120
42653: PUSH
42654: LD_INT 70
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42662: LD_VAR 0 6
42666: PPUSH
42667: CALL_OW 264
42671: PUSH
42672: LD_INT 7
42674: PUSH
42675: LD_INT 28
42677: PUSH
42678: LD_INT 45
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: IN
42686: IFFALSE 42707
// points := [ 35 , 20 , 45 ] ;
42688: LD_ADDR_VAR 0 9
42692: PUSH
42693: LD_INT 35
42695: PUSH
42696: LD_INT 20
42698: PUSH
42699: LD_INT 45
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42707: LD_VAR 0 6
42711: PPUSH
42712: CALL_OW 264
42716: PUSH
42717: LD_INT 47
42719: PUSH
42720: EMPTY
42721: LIST
42722: IN
42723: IFFALSE 42744
// points := [ 67 , 45 , 75 ] ;
42725: LD_ADDR_VAR 0 9
42729: PUSH
42730: LD_INT 67
42732: PUSH
42733: LD_INT 45
42735: PUSH
42736: LD_INT 75
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: LIST
42743: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42744: LD_VAR 0 6
42748: PPUSH
42749: CALL_OW 264
42753: PUSH
42754: LD_INT 26
42756: PUSH
42757: EMPTY
42758: LIST
42759: IN
42760: IFFALSE 42781
// points := [ 120 , 30 , 80 ] ;
42762: LD_ADDR_VAR 0 9
42766: PUSH
42767: LD_INT 120
42769: PUSH
42770: LD_INT 30
42772: PUSH
42773: LD_INT 80
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: LIST
42780: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42781: LD_VAR 0 6
42785: PPUSH
42786: CALL_OW 264
42790: PUSH
42791: LD_INT 22
42793: PUSH
42794: EMPTY
42795: LIST
42796: IN
42797: IFFALSE 42818
// points := [ 40 , 1 , 1 ] ;
42799: LD_ADDR_VAR 0 9
42803: PUSH
42804: LD_INT 40
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42818: LD_VAR 0 6
42822: PPUSH
42823: CALL_OW 264
42827: PUSH
42828: LD_INT 29
42830: PUSH
42831: EMPTY
42832: LIST
42833: IN
42834: IFFALSE 42855
// points := [ 70 , 200 , 400 ] ;
42836: LD_ADDR_VAR 0 9
42840: PUSH
42841: LD_INT 70
42843: PUSH
42844: LD_INT 200
42846: PUSH
42847: LD_INT 400
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42855: LD_VAR 0 6
42859: PPUSH
42860: CALL_OW 264
42864: PUSH
42865: LD_INT 14
42867: PUSH
42868: LD_INT 53
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: IN
42875: IFFALSE 42896
// points := [ 40 , 10 , 20 ] ;
42877: LD_ADDR_VAR 0 9
42881: PUSH
42882: LD_INT 40
42884: PUSH
42885: LD_INT 10
42887: PUSH
42888: LD_INT 20
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: LIST
42895: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42896: LD_VAR 0 6
42900: PPUSH
42901: CALL_OW 264
42905: PUSH
42906: LD_INT 9
42908: PUSH
42909: EMPTY
42910: LIST
42911: IN
42912: IFFALSE 42933
// points := [ 5 , 70 , 20 ] ;
42914: LD_ADDR_VAR 0 9
42918: PUSH
42919: LD_INT 5
42921: PUSH
42922: LD_INT 70
42924: PUSH
42925: LD_INT 20
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: LIST
42932: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42933: LD_VAR 0 6
42937: PPUSH
42938: CALL_OW 264
42942: PUSH
42943: LD_INT 10
42945: PUSH
42946: EMPTY
42947: LIST
42948: IN
42949: IFFALSE 42970
// points := [ 35 , 110 , 70 ] ;
42951: LD_ADDR_VAR 0 9
42955: PUSH
42956: LD_INT 35
42958: PUSH
42959: LD_INT 110
42961: PUSH
42962: LD_INT 70
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42970: LD_VAR 0 6
42974: PPUSH
42975: CALL_OW 265
42979: PUSH
42980: LD_INT 25
42982: EQUAL
42983: IFFALSE 43004
// points := [ 80 , 65 , 100 ] ;
42985: LD_ADDR_VAR 0 9
42989: PUSH
42990: LD_INT 80
42992: PUSH
42993: LD_INT 65
42995: PUSH
42996: LD_INT 100
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: LIST
43003: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43004: LD_VAR 0 6
43008: PPUSH
43009: CALL_OW 263
43013: PUSH
43014: LD_INT 1
43016: EQUAL
43017: IFFALSE 43052
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43019: LD_ADDR_VAR 0 10
43023: PUSH
43024: LD_VAR 0 10
43028: PUSH
43029: LD_VAR 0 6
43033: PPUSH
43034: CALL_OW 311
43038: PPUSH
43039: LD_INT 3
43041: PPUSH
43042: CALL_OW 259
43046: PUSH
43047: LD_INT 4
43049: MUL
43050: MUL
43051: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43052: LD_VAR 0 6
43056: PPUSH
43057: CALL_OW 263
43061: PUSH
43062: LD_INT 2
43064: EQUAL
43065: IFFALSE 43116
// begin j := IsControledBy ( i ) ;
43067: LD_ADDR_VAR 0 7
43071: PUSH
43072: LD_VAR 0 6
43076: PPUSH
43077: CALL_OW 312
43081: ST_TO_ADDR
// if j then
43082: LD_VAR 0 7
43086: IFFALSE 43116
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43088: LD_ADDR_VAR 0 10
43092: PUSH
43093: LD_VAR 0 10
43097: PUSH
43098: LD_VAR 0 7
43102: PPUSH
43103: LD_INT 3
43105: PPUSH
43106: CALL_OW 259
43110: PUSH
43111: LD_INT 3
43113: MUL
43114: MUL
43115: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43116: LD_VAR 0 6
43120: PPUSH
43121: CALL_OW 264
43125: PUSH
43126: LD_INT 5
43128: PUSH
43129: LD_INT 6
43131: PUSH
43132: LD_INT 46
43134: PUSH
43135: LD_INT 44
43137: PUSH
43138: LD_INT 47
43140: PUSH
43141: LD_INT 45
43143: PUSH
43144: LD_INT 28
43146: PUSH
43147: LD_INT 7
43149: PUSH
43150: LD_INT 27
43152: PUSH
43153: LD_INT 29
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: IN
43168: PUSH
43169: LD_VAR 0 1
43173: PPUSH
43174: LD_INT 52
43176: PPUSH
43177: CALL_OW 321
43181: PUSH
43182: LD_INT 2
43184: EQUAL
43185: AND
43186: IFFALSE 43203
// bpoints := bpoints * 1.2 ;
43188: LD_ADDR_VAR 0 10
43192: PUSH
43193: LD_VAR 0 10
43197: PUSH
43198: LD_REAL  1.20000000000000E+0000
43201: MUL
43202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43203: LD_VAR 0 6
43207: PPUSH
43208: CALL_OW 264
43212: PUSH
43213: LD_INT 6
43215: PUSH
43216: LD_INT 46
43218: PUSH
43219: LD_INT 47
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: IN
43227: IFFALSE 43244
// bpoints := bpoints * 1.2 ;
43229: LD_ADDR_VAR 0 10
43233: PUSH
43234: LD_VAR 0 10
43238: PUSH
43239: LD_REAL  1.20000000000000E+0000
43242: MUL
43243: ST_TO_ADDR
// end ; unit_building :
43244: GO 43258
43246: LD_INT 3
43248: DOUBLE
43249: EQUAL
43250: IFTRUE 43254
43252: GO 43257
43254: POP
// ; end ;
43255: GO 43258
43257: POP
// for j = 1 to 3 do
43258: LD_ADDR_VAR 0 7
43262: PUSH
43263: DOUBLE
43264: LD_INT 1
43266: DEC
43267: ST_TO_ADDR
43268: LD_INT 3
43270: PUSH
43271: FOR_TO
43272: IFFALSE 43325
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43274: LD_ADDR_VAR 0 5
43278: PUSH
43279: LD_VAR 0 5
43283: PPUSH
43284: LD_VAR 0 7
43288: PPUSH
43289: LD_VAR 0 5
43293: PUSH
43294: LD_VAR 0 7
43298: ARRAY
43299: PUSH
43300: LD_VAR 0 9
43304: PUSH
43305: LD_VAR 0 7
43309: ARRAY
43310: PUSH
43311: LD_VAR 0 10
43315: MUL
43316: PLUS
43317: PPUSH
43318: CALL_OW 1
43322: ST_TO_ADDR
43323: GO 43271
43325: POP
43326: POP
// end ;
43327: GO 41810
43329: POP
43330: POP
// result := Replace ( result , 4 , tmp ) ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: LD_VAR 0 5
43340: PPUSH
43341: LD_INT 4
43343: PPUSH
43344: LD_VAR 0 8
43348: PPUSH
43349: CALL_OW 1
43353: ST_TO_ADDR
// end ;
43354: LD_VAR 0 5
43358: RET
// export function DangerAtRange ( unit , range ) ; begin
43359: LD_INT 0
43361: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43362: LD_ADDR_VAR 0 3
43366: PUSH
43367: LD_VAR 0 1
43371: PPUSH
43372: CALL_OW 255
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 250
43386: PPUSH
43387: LD_VAR 0 1
43391: PPUSH
43392: CALL_OW 251
43396: PPUSH
43397: LD_VAR 0 2
43401: PPUSH
43402: CALL 41662 0 4
43406: ST_TO_ADDR
// end ;
43407: LD_VAR 0 3
43411: RET
// export function DangerInArea ( side , area ) ; begin
43412: LD_INT 0
43414: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_VAR 0 2
43424: PPUSH
43425: LD_INT 81
43427: PUSH
43428: LD_VAR 0 1
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PPUSH
43437: CALL_OW 70
43441: ST_TO_ADDR
// end ;
43442: LD_VAR 0 3
43446: RET
// export function IsExtension ( b ) ; begin
43447: LD_INT 0
43449: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43450: LD_ADDR_VAR 0 2
43454: PUSH
43455: LD_VAR 0 1
43459: PUSH
43460: LD_INT 23
43462: PUSH
43463: LD_INT 20
43465: PUSH
43466: LD_INT 22
43468: PUSH
43469: LD_INT 17
43471: PUSH
43472: LD_INT 24
43474: PUSH
43475: LD_INT 21
43477: PUSH
43478: LD_INT 19
43480: PUSH
43481: LD_INT 16
43483: PUSH
43484: LD_INT 25
43486: PUSH
43487: LD_INT 18
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: IN
43502: ST_TO_ADDR
// end ;
43503: LD_VAR 0 2
43507: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43508: LD_INT 0
43510: PPUSH
43511: PPUSH
43512: PPUSH
// result := [ ] ;
43513: LD_ADDR_VAR 0 3
43517: PUSH
43518: EMPTY
43519: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: LD_VAR 0 2
43529: PPUSH
43530: LD_INT 21
43532: PUSH
43533: LD_INT 3
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PPUSH
43540: CALL_OW 70
43544: ST_TO_ADDR
// if not tmp then
43545: LD_VAR 0 4
43549: NOT
43550: IFFALSE 43554
// exit ;
43552: GO 43612
// for i in tmp do
43554: LD_ADDR_VAR 0 5
43558: PUSH
43559: LD_VAR 0 4
43563: PUSH
43564: FOR_IN
43565: IFFALSE 43600
// if GetBase ( i ) <> base then
43567: LD_VAR 0 5
43571: PPUSH
43572: CALL_OW 274
43576: PUSH
43577: LD_VAR 0 1
43581: NONEQUAL
43582: IFFALSE 43598
// ComLinkToBase ( base , i ) ;
43584: LD_VAR 0 1
43588: PPUSH
43589: LD_VAR 0 5
43593: PPUSH
43594: CALL_OW 169
43598: GO 43564
43600: POP
43601: POP
// result := tmp ;
43602: LD_ADDR_VAR 0 3
43606: PUSH
43607: LD_VAR 0 4
43611: ST_TO_ADDR
// end ;
43612: LD_VAR 0 3
43616: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43617: LD_INT 0
43619: PPUSH
43620: PPUSH
// if BuildingStatus ( b ) = bs_build then
43621: LD_VAR 0 2
43625: PPUSH
43626: CALL_OW 461
43630: PUSH
43631: LD_INT 1
43633: EQUAL
43634: IFFALSE 43694
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43636: LD_VAR 0 1
43640: PPUSH
43641: LD_STRING h
43643: PUSH
43644: LD_VAR 0 2
43648: PPUSH
43649: CALL_OW 250
43653: PUSH
43654: LD_VAR 0 2
43658: PPUSH
43659: CALL_OW 251
43663: PUSH
43664: LD_VAR 0 2
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: PUSH
43687: EMPTY
43688: LIST
43689: PPUSH
43690: CALL_OW 446
// end ;
43694: LD_VAR 0 3
43698: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43699: LD_INT 0
43701: PPUSH
43702: PPUSH
43703: PPUSH
43704: PPUSH
43705: PPUSH
43706: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43707: LD_VAR 0 1
43711: NOT
43712: PUSH
43713: LD_VAR 0 1
43717: PPUSH
43718: CALL_OW 263
43722: PUSH
43723: LD_INT 2
43725: EQUAL
43726: NOT
43727: OR
43728: IFFALSE 43732
// exit ;
43730: GO 44048
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43732: LD_ADDR_VAR 0 6
43736: PUSH
43737: LD_INT 22
43739: PUSH
43740: LD_VAR 0 1
43744: PPUSH
43745: CALL_OW 255
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 30
43759: PUSH
43760: LD_INT 36
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 34
43769: PUSH
43770: LD_INT 31
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: LIST
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PPUSH
43786: CALL_OW 69
43790: ST_TO_ADDR
// if not tmp then
43791: LD_VAR 0 6
43795: NOT
43796: IFFALSE 43800
// exit ;
43798: GO 44048
// result := [ ] ;
43800: LD_ADDR_VAR 0 2
43804: PUSH
43805: EMPTY
43806: ST_TO_ADDR
// for i in tmp do
43807: LD_ADDR_VAR 0 3
43811: PUSH
43812: LD_VAR 0 6
43816: PUSH
43817: FOR_IN
43818: IFFALSE 43889
// begin t := UnitsInside ( i ) ;
43820: LD_ADDR_VAR 0 4
43824: PUSH
43825: LD_VAR 0 3
43829: PPUSH
43830: CALL_OW 313
43834: ST_TO_ADDR
// if t then
43835: LD_VAR 0 4
43839: IFFALSE 43887
// for j in t do
43841: LD_ADDR_VAR 0 7
43845: PUSH
43846: LD_VAR 0 4
43850: PUSH
43851: FOR_IN
43852: IFFALSE 43885
// result := Insert ( result , result + 1 , j ) ;
43854: LD_ADDR_VAR 0 2
43858: PUSH
43859: LD_VAR 0 2
43863: PPUSH
43864: LD_VAR 0 2
43868: PUSH
43869: LD_INT 1
43871: PLUS
43872: PPUSH
43873: LD_VAR 0 7
43877: PPUSH
43878: CALL_OW 2
43882: ST_TO_ADDR
43883: GO 43851
43885: POP
43886: POP
// end ;
43887: GO 43817
43889: POP
43890: POP
// if not result then
43891: LD_VAR 0 2
43895: NOT
43896: IFFALSE 43900
// exit ;
43898: GO 44048
// mech := result [ 1 ] ;
43900: LD_ADDR_VAR 0 5
43904: PUSH
43905: LD_VAR 0 2
43909: PUSH
43910: LD_INT 1
43912: ARRAY
43913: ST_TO_ADDR
// if result > 1 then
43914: LD_VAR 0 2
43918: PUSH
43919: LD_INT 1
43921: GREATER
43922: IFFALSE 44034
// for i = 2 to result do
43924: LD_ADDR_VAR 0 3
43928: PUSH
43929: DOUBLE
43930: LD_INT 2
43932: DEC
43933: ST_TO_ADDR
43934: LD_VAR 0 2
43938: PUSH
43939: FOR_TO
43940: IFFALSE 44032
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43942: LD_ADDR_VAR 0 4
43946: PUSH
43947: LD_VAR 0 2
43951: PUSH
43952: LD_VAR 0 3
43956: ARRAY
43957: PPUSH
43958: LD_INT 3
43960: PPUSH
43961: CALL_OW 259
43965: PUSH
43966: LD_VAR 0 2
43970: PUSH
43971: LD_VAR 0 3
43975: ARRAY
43976: PPUSH
43977: CALL_OW 432
43981: MINUS
43982: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43983: LD_VAR 0 4
43987: PUSH
43988: LD_VAR 0 5
43992: PPUSH
43993: LD_INT 3
43995: PPUSH
43996: CALL_OW 259
44000: PUSH
44001: LD_VAR 0 5
44005: PPUSH
44006: CALL_OW 432
44010: MINUS
44011: GREATEREQUAL
44012: IFFALSE 44030
// mech := result [ i ] ;
44014: LD_ADDR_VAR 0 5
44018: PUSH
44019: LD_VAR 0 2
44023: PUSH
44024: LD_VAR 0 3
44028: ARRAY
44029: ST_TO_ADDR
// end ;
44030: GO 43939
44032: POP
44033: POP
// ComLinkTo ( vehicle , mech ) ;
44034: LD_VAR 0 1
44038: PPUSH
44039: LD_VAR 0 5
44043: PPUSH
44044: CALL_OW 135
// end ;
44048: LD_VAR 0 2
44052: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44053: LD_INT 0
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
// result := [ ] ;
44068: LD_ADDR_VAR 0 7
44072: PUSH
44073: EMPTY
44074: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44075: LD_VAR 0 1
44079: PPUSH
44080: CALL_OW 266
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: IN
44095: NOT
44096: IFFALSE 44100
// exit ;
44098: GO 45731
// if name then
44100: LD_VAR 0 3
44104: IFFALSE 44120
// SetBName ( base_dep , name ) ;
44106: LD_VAR 0 1
44110: PPUSH
44111: LD_VAR 0 3
44115: PPUSH
44116: CALL_OW 500
// base := GetBase ( base_dep ) ;
44120: LD_ADDR_VAR 0 15
44124: PUSH
44125: LD_VAR 0 1
44129: PPUSH
44130: CALL_OW 274
44134: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44135: LD_ADDR_VAR 0 16
44139: PUSH
44140: LD_VAR 0 1
44144: PPUSH
44145: CALL_OW 255
44149: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44150: LD_ADDR_VAR 0 17
44154: PUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: CALL_OW 248
44164: ST_TO_ADDR
// if sources then
44165: LD_VAR 0 5
44169: IFFALSE 44216
// for i = 1 to 3 do
44171: LD_ADDR_VAR 0 8
44175: PUSH
44176: DOUBLE
44177: LD_INT 1
44179: DEC
44180: ST_TO_ADDR
44181: LD_INT 3
44183: PUSH
44184: FOR_TO
44185: IFFALSE 44214
// AddResourceType ( base , i , sources [ i ] ) ;
44187: LD_VAR 0 15
44191: PPUSH
44192: LD_VAR 0 8
44196: PPUSH
44197: LD_VAR 0 5
44201: PUSH
44202: LD_VAR 0 8
44206: ARRAY
44207: PPUSH
44208: CALL_OW 276
44212: GO 44184
44214: POP
44215: POP
// buildings := GetBaseBuildings ( base , area ) ;
44216: LD_ADDR_VAR 0 18
44220: PUSH
44221: LD_VAR 0 15
44225: PPUSH
44226: LD_VAR 0 2
44230: PPUSH
44231: CALL 43508 0 2
44235: ST_TO_ADDR
// InitHc ;
44236: CALL_OW 19
// InitUc ;
44240: CALL_OW 18
// uc_side := side ;
44244: LD_ADDR_OWVAR 20
44248: PUSH
44249: LD_VAR 0 16
44253: ST_TO_ADDR
// uc_nation := nation ;
44254: LD_ADDR_OWVAR 21
44258: PUSH
44259: LD_VAR 0 17
44263: ST_TO_ADDR
// if buildings then
44264: LD_VAR 0 18
44268: IFFALSE 45590
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44270: LD_ADDR_VAR 0 19
44274: PUSH
44275: LD_VAR 0 18
44279: PPUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 30
44285: PUSH
44286: LD_INT 29
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 30
44295: PUSH
44296: LD_INT 30
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: LIST
44307: PPUSH
44308: CALL_OW 72
44312: ST_TO_ADDR
// if tmp then
44313: LD_VAR 0 19
44317: IFFALSE 44365
// for i in tmp do
44319: LD_ADDR_VAR 0 8
44323: PUSH
44324: LD_VAR 0 19
44328: PUSH
44329: FOR_IN
44330: IFFALSE 44363
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44332: LD_VAR 0 8
44336: PPUSH
44337: CALL_OW 250
44341: PPUSH
44342: LD_VAR 0 8
44346: PPUSH
44347: CALL_OW 251
44351: PPUSH
44352: LD_VAR 0 16
44356: PPUSH
44357: CALL_OW 441
44361: GO 44329
44363: POP
44364: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44365: LD_VAR 0 18
44369: PPUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 30
44375: PUSH
44376: LD_INT 32
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 30
44385: PUSH
44386: LD_INT 33
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: EMPTY
44394: LIST
44395: LIST
44396: LIST
44397: PPUSH
44398: CALL_OW 72
44402: IFFALSE 44490
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44404: LD_ADDR_VAR 0 8
44408: PUSH
44409: LD_VAR 0 18
44413: PPUSH
44414: LD_INT 2
44416: PUSH
44417: LD_INT 30
44419: PUSH
44420: LD_INT 32
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: LD_INT 33
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: PPUSH
44442: CALL_OW 72
44446: PUSH
44447: FOR_IN
44448: IFFALSE 44488
// begin if not GetBWeapon ( i ) then
44450: LD_VAR 0 8
44454: PPUSH
44455: CALL_OW 269
44459: NOT
44460: IFFALSE 44486
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44462: LD_VAR 0 8
44466: PPUSH
44467: LD_VAR 0 8
44471: PPUSH
44472: LD_VAR 0 2
44476: PPUSH
44477: CALL 45736 0 2
44481: PPUSH
44482: CALL_OW 431
// end ;
44486: GO 44447
44488: POP
44489: POP
// end ; for i = 1 to personel do
44490: LD_ADDR_VAR 0 8
44494: PUSH
44495: DOUBLE
44496: LD_INT 1
44498: DEC
44499: ST_TO_ADDR
44500: LD_VAR 0 6
44504: PUSH
44505: FOR_TO
44506: IFFALSE 45570
// begin if i > 4 then
44508: LD_VAR 0 8
44512: PUSH
44513: LD_INT 4
44515: GREATER
44516: IFFALSE 44520
// break ;
44518: GO 45570
// case i of 1 :
44520: LD_VAR 0 8
44524: PUSH
44525: LD_INT 1
44527: DOUBLE
44528: EQUAL
44529: IFTRUE 44533
44531: GO 44613
44533: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44534: LD_ADDR_VAR 0 12
44538: PUSH
44539: LD_VAR 0 18
44543: PPUSH
44544: LD_INT 22
44546: PUSH
44547: LD_VAR 0 16
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 58
44558: PUSH
44559: EMPTY
44560: LIST
44561: PUSH
44562: LD_INT 2
44564: PUSH
44565: LD_INT 30
44567: PUSH
44568: LD_INT 32
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 30
44577: PUSH
44578: LD_INT 4
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 30
44587: PUSH
44588: LD_INT 5
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: LIST
44605: PPUSH
44606: CALL_OW 72
44610: ST_TO_ADDR
44611: GO 44835
44613: LD_INT 2
44615: DOUBLE
44616: EQUAL
44617: IFTRUE 44621
44619: GO 44683
44621: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44622: LD_ADDR_VAR 0 12
44626: PUSH
44627: LD_VAR 0 18
44631: PPUSH
44632: LD_INT 22
44634: PUSH
44635: LD_VAR 0 16
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 2
44646: PUSH
44647: LD_INT 30
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 30
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: LIST
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PPUSH
44676: CALL_OW 72
44680: ST_TO_ADDR
44681: GO 44835
44683: LD_INT 3
44685: DOUBLE
44686: EQUAL
44687: IFTRUE 44691
44689: GO 44753
44691: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44692: LD_ADDR_VAR 0 12
44696: PUSH
44697: LD_VAR 0 18
44701: PPUSH
44702: LD_INT 22
44704: PUSH
44705: LD_VAR 0 16
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: PUSH
44717: LD_INT 30
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 30
44729: PUSH
44730: LD_INT 3
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PPUSH
44746: CALL_OW 72
44750: ST_TO_ADDR
44751: GO 44835
44753: LD_INT 4
44755: DOUBLE
44756: EQUAL
44757: IFTRUE 44761
44759: GO 44834
44761: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44762: LD_ADDR_VAR 0 12
44766: PUSH
44767: LD_VAR 0 18
44771: PPUSH
44772: LD_INT 22
44774: PUSH
44775: LD_VAR 0 16
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: LD_INT 30
44789: PUSH
44790: LD_INT 6
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: PUSH
44797: LD_INT 30
44799: PUSH
44800: LD_INT 7
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 30
44809: PUSH
44810: LD_INT 8
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: LIST
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PPUSH
44827: CALL_OW 72
44831: ST_TO_ADDR
44832: GO 44835
44834: POP
// if i = 1 then
44835: LD_VAR 0 8
44839: PUSH
44840: LD_INT 1
44842: EQUAL
44843: IFFALSE 44954
// begin tmp := [ ] ;
44845: LD_ADDR_VAR 0 19
44849: PUSH
44850: EMPTY
44851: ST_TO_ADDR
// for j in f do
44852: LD_ADDR_VAR 0 9
44856: PUSH
44857: LD_VAR 0 12
44861: PUSH
44862: FOR_IN
44863: IFFALSE 44936
// if GetBType ( j ) = b_bunker then
44865: LD_VAR 0 9
44869: PPUSH
44870: CALL_OW 266
44874: PUSH
44875: LD_INT 32
44877: EQUAL
44878: IFFALSE 44905
// tmp := Insert ( tmp , 1 , j ) else
44880: LD_ADDR_VAR 0 19
44884: PUSH
44885: LD_VAR 0 19
44889: PPUSH
44890: LD_INT 1
44892: PPUSH
44893: LD_VAR 0 9
44897: PPUSH
44898: CALL_OW 2
44902: ST_TO_ADDR
44903: GO 44934
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44905: LD_ADDR_VAR 0 19
44909: PUSH
44910: LD_VAR 0 19
44914: PPUSH
44915: LD_VAR 0 19
44919: PUSH
44920: LD_INT 1
44922: PLUS
44923: PPUSH
44924: LD_VAR 0 9
44928: PPUSH
44929: CALL_OW 2
44933: ST_TO_ADDR
44934: GO 44862
44936: POP
44937: POP
// if tmp then
44938: LD_VAR 0 19
44942: IFFALSE 44954
// f := tmp ;
44944: LD_ADDR_VAR 0 12
44948: PUSH
44949: LD_VAR 0 19
44953: ST_TO_ADDR
// end ; x := personel [ i ] ;
44954: LD_ADDR_VAR 0 13
44958: PUSH
44959: LD_VAR 0 6
44963: PUSH
44964: LD_VAR 0 8
44968: ARRAY
44969: ST_TO_ADDR
// if x = - 1 then
44970: LD_VAR 0 13
44974: PUSH
44975: LD_INT 1
44977: NEG
44978: EQUAL
44979: IFFALSE 45188
// begin for j in f do
44981: LD_ADDR_VAR 0 9
44985: PUSH
44986: LD_VAR 0 12
44990: PUSH
44991: FOR_IN
44992: IFFALSE 45184
// repeat InitHc ;
44994: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44998: LD_VAR 0 9
45002: PPUSH
45003: CALL_OW 266
45007: PUSH
45008: LD_INT 5
45010: EQUAL
45011: IFFALSE 45081
// begin if UnitsInside ( j ) < 3 then
45013: LD_VAR 0 9
45017: PPUSH
45018: CALL_OW 313
45022: PUSH
45023: LD_INT 3
45025: LESS
45026: IFFALSE 45062
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45028: LD_INT 0
45030: PPUSH
45031: LD_INT 5
45033: PUSH
45034: LD_INT 8
45036: PUSH
45037: LD_INT 9
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: PUSH
45045: LD_VAR 0 17
45049: ARRAY
45050: PPUSH
45051: LD_VAR 0 4
45055: PPUSH
45056: CALL_OW 380
45060: GO 45079
// PrepareHuman ( false , i , skill ) ;
45062: LD_INT 0
45064: PPUSH
45065: LD_VAR 0 8
45069: PPUSH
45070: LD_VAR 0 4
45074: PPUSH
45075: CALL_OW 380
// end else
45079: GO 45098
// PrepareHuman ( false , i , skill ) ;
45081: LD_INT 0
45083: PPUSH
45084: LD_VAR 0 8
45088: PPUSH
45089: LD_VAR 0 4
45093: PPUSH
45094: CALL_OW 380
// un := CreateHuman ;
45098: LD_ADDR_VAR 0 14
45102: PUSH
45103: CALL_OW 44
45107: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45108: LD_ADDR_VAR 0 7
45112: PUSH
45113: LD_VAR 0 7
45117: PPUSH
45118: LD_INT 1
45120: PPUSH
45121: LD_VAR 0 14
45125: PPUSH
45126: CALL_OW 2
45130: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45131: LD_VAR 0 14
45135: PPUSH
45136: LD_VAR 0 9
45140: PPUSH
45141: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45145: LD_VAR 0 9
45149: PPUSH
45150: CALL_OW 313
45154: PUSH
45155: LD_INT 6
45157: EQUAL
45158: PUSH
45159: LD_VAR 0 9
45163: PPUSH
45164: CALL_OW 266
45168: PUSH
45169: LD_INT 32
45171: PUSH
45172: LD_INT 31
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: IN
45179: OR
45180: IFFALSE 44994
45182: GO 44991
45184: POP
45185: POP
// end else
45186: GO 45568
// for j = 1 to x do
45188: LD_ADDR_VAR 0 9
45192: PUSH
45193: DOUBLE
45194: LD_INT 1
45196: DEC
45197: ST_TO_ADDR
45198: LD_VAR 0 13
45202: PUSH
45203: FOR_TO
45204: IFFALSE 45566
// begin InitHc ;
45206: CALL_OW 19
// if not f then
45210: LD_VAR 0 12
45214: NOT
45215: IFFALSE 45304
// begin PrepareHuman ( false , i , skill ) ;
45217: LD_INT 0
45219: PPUSH
45220: LD_VAR 0 8
45224: PPUSH
45225: LD_VAR 0 4
45229: PPUSH
45230: CALL_OW 380
// un := CreateHuman ;
45234: LD_ADDR_VAR 0 14
45238: PUSH
45239: CALL_OW 44
45243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45244: LD_ADDR_VAR 0 7
45248: PUSH
45249: LD_VAR 0 7
45253: PPUSH
45254: LD_INT 1
45256: PPUSH
45257: LD_VAR 0 14
45261: PPUSH
45262: CALL_OW 2
45266: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45267: LD_VAR 0 14
45271: PPUSH
45272: LD_VAR 0 1
45276: PPUSH
45277: CALL_OW 250
45281: PPUSH
45282: LD_VAR 0 1
45286: PPUSH
45287: CALL_OW 251
45291: PPUSH
45292: LD_INT 10
45294: PPUSH
45295: LD_INT 0
45297: PPUSH
45298: CALL_OW 50
// continue ;
45302: GO 45203
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45304: LD_VAR 0 12
45308: PUSH
45309: LD_INT 1
45311: ARRAY
45312: PPUSH
45313: CALL_OW 313
45317: PUSH
45318: LD_VAR 0 12
45322: PUSH
45323: LD_INT 1
45325: ARRAY
45326: PPUSH
45327: CALL_OW 266
45331: PUSH
45332: LD_INT 32
45334: PUSH
45335: LD_INT 31
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: IN
45342: AND
45343: PUSH
45344: LD_VAR 0 12
45348: PUSH
45349: LD_INT 1
45351: ARRAY
45352: PPUSH
45353: CALL_OW 313
45357: PUSH
45358: LD_INT 6
45360: EQUAL
45361: OR
45362: IFFALSE 45382
// f := Delete ( f , 1 ) ;
45364: LD_ADDR_VAR 0 12
45368: PUSH
45369: LD_VAR 0 12
45373: PPUSH
45374: LD_INT 1
45376: PPUSH
45377: CALL_OW 3
45381: ST_TO_ADDR
// if not f then
45382: LD_VAR 0 12
45386: NOT
45387: IFFALSE 45405
// begin x := x + 2 ;
45389: LD_ADDR_VAR 0 13
45393: PUSH
45394: LD_VAR 0 13
45398: PUSH
45399: LD_INT 2
45401: PLUS
45402: ST_TO_ADDR
// continue ;
45403: GO 45203
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45405: LD_VAR 0 12
45409: PUSH
45410: LD_INT 1
45412: ARRAY
45413: PPUSH
45414: CALL_OW 266
45418: PUSH
45419: LD_INT 5
45421: EQUAL
45422: IFFALSE 45496
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45424: LD_VAR 0 12
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: PPUSH
45433: CALL_OW 313
45437: PUSH
45438: LD_INT 3
45440: LESS
45441: IFFALSE 45477
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45443: LD_INT 0
45445: PPUSH
45446: LD_INT 5
45448: PUSH
45449: LD_INT 8
45451: PUSH
45452: LD_INT 9
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: LIST
45459: PUSH
45460: LD_VAR 0 17
45464: ARRAY
45465: PPUSH
45466: LD_VAR 0 4
45470: PPUSH
45471: CALL_OW 380
45475: GO 45494
// PrepareHuman ( false , i , skill ) ;
45477: LD_INT 0
45479: PPUSH
45480: LD_VAR 0 8
45484: PPUSH
45485: LD_VAR 0 4
45489: PPUSH
45490: CALL_OW 380
// end else
45494: GO 45513
// PrepareHuman ( false , i , skill ) ;
45496: LD_INT 0
45498: PPUSH
45499: LD_VAR 0 8
45503: PPUSH
45504: LD_VAR 0 4
45508: PPUSH
45509: CALL_OW 380
// un := CreateHuman ;
45513: LD_ADDR_VAR 0 14
45517: PUSH
45518: CALL_OW 44
45522: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45523: LD_ADDR_VAR 0 7
45527: PUSH
45528: LD_VAR 0 7
45532: PPUSH
45533: LD_INT 1
45535: PPUSH
45536: LD_VAR 0 14
45540: PPUSH
45541: CALL_OW 2
45545: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45546: LD_VAR 0 14
45550: PPUSH
45551: LD_VAR 0 12
45555: PUSH
45556: LD_INT 1
45558: ARRAY
45559: PPUSH
45560: CALL_OW 52
// end ;
45564: GO 45203
45566: POP
45567: POP
// end ;
45568: GO 44505
45570: POP
45571: POP
// result := result ^ buildings ;
45572: LD_ADDR_VAR 0 7
45576: PUSH
45577: LD_VAR 0 7
45581: PUSH
45582: LD_VAR 0 18
45586: ADD
45587: ST_TO_ADDR
// end else
45588: GO 45731
// begin for i = 1 to personel do
45590: LD_ADDR_VAR 0 8
45594: PUSH
45595: DOUBLE
45596: LD_INT 1
45598: DEC
45599: ST_TO_ADDR
45600: LD_VAR 0 6
45604: PUSH
45605: FOR_TO
45606: IFFALSE 45729
// begin if i > 4 then
45608: LD_VAR 0 8
45612: PUSH
45613: LD_INT 4
45615: GREATER
45616: IFFALSE 45620
// break ;
45618: GO 45729
// x := personel [ i ] ;
45620: LD_ADDR_VAR 0 13
45624: PUSH
45625: LD_VAR 0 6
45629: PUSH
45630: LD_VAR 0 8
45634: ARRAY
45635: ST_TO_ADDR
// if x = - 1 then
45636: LD_VAR 0 13
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: EQUAL
45645: IFFALSE 45649
// continue ;
45647: GO 45605
// PrepareHuman ( false , i , skill ) ;
45649: LD_INT 0
45651: PPUSH
45652: LD_VAR 0 8
45656: PPUSH
45657: LD_VAR 0 4
45661: PPUSH
45662: CALL_OW 380
// un := CreateHuman ;
45666: LD_ADDR_VAR 0 14
45670: PUSH
45671: CALL_OW 44
45675: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45676: LD_VAR 0 14
45680: PPUSH
45681: LD_VAR 0 1
45685: PPUSH
45686: CALL_OW 250
45690: PPUSH
45691: LD_VAR 0 1
45695: PPUSH
45696: CALL_OW 251
45700: PPUSH
45701: LD_INT 10
45703: PPUSH
45704: LD_INT 0
45706: PPUSH
45707: CALL_OW 50
// result := result ^ un ;
45711: LD_ADDR_VAR 0 7
45715: PUSH
45716: LD_VAR 0 7
45720: PUSH
45721: LD_VAR 0 14
45725: ADD
45726: ST_TO_ADDR
// end ;
45727: GO 45605
45729: POP
45730: POP
// end ; end ;
45731: LD_VAR 0 7
45735: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45736: LD_INT 0
45738: PPUSH
45739: PPUSH
45740: PPUSH
45741: PPUSH
45742: PPUSH
45743: PPUSH
45744: PPUSH
45745: PPUSH
45746: PPUSH
45747: PPUSH
45748: PPUSH
45749: PPUSH
45750: PPUSH
45751: PPUSH
45752: PPUSH
45753: PPUSH
// result := false ;
45754: LD_ADDR_VAR 0 3
45758: PUSH
45759: LD_INT 0
45761: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45762: LD_VAR 0 1
45766: NOT
45767: PUSH
45768: LD_VAR 0 1
45772: PPUSH
45773: CALL_OW 266
45777: PUSH
45778: LD_INT 32
45780: PUSH
45781: LD_INT 33
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: IN
45788: NOT
45789: OR
45790: IFFALSE 45794
// exit ;
45792: GO 46930
// nat := GetNation ( tower ) ;
45794: LD_ADDR_VAR 0 12
45798: PUSH
45799: LD_VAR 0 1
45803: PPUSH
45804: CALL_OW 248
45808: ST_TO_ADDR
// side := GetSide ( tower ) ;
45809: LD_ADDR_VAR 0 16
45813: PUSH
45814: LD_VAR 0 1
45818: PPUSH
45819: CALL_OW 255
45823: ST_TO_ADDR
// x := GetX ( tower ) ;
45824: LD_ADDR_VAR 0 10
45828: PUSH
45829: LD_VAR 0 1
45833: PPUSH
45834: CALL_OW 250
45838: ST_TO_ADDR
// y := GetY ( tower ) ;
45839: LD_ADDR_VAR 0 11
45843: PUSH
45844: LD_VAR 0 1
45848: PPUSH
45849: CALL_OW 251
45853: ST_TO_ADDR
// if not x or not y then
45854: LD_VAR 0 10
45858: NOT
45859: PUSH
45860: LD_VAR 0 11
45864: NOT
45865: OR
45866: IFFALSE 45870
// exit ;
45868: GO 46930
// weapon := 0 ;
45870: LD_ADDR_VAR 0 18
45874: PUSH
45875: LD_INT 0
45877: ST_TO_ADDR
// fac_list := [ ] ;
45878: LD_ADDR_VAR 0 17
45882: PUSH
45883: EMPTY
45884: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45885: LD_ADDR_VAR 0 6
45889: PUSH
45890: LD_VAR 0 1
45894: PPUSH
45895: CALL_OW 274
45899: PPUSH
45900: LD_VAR 0 2
45904: PPUSH
45905: CALL 43508 0 2
45909: PPUSH
45910: LD_INT 30
45912: PUSH
45913: LD_INT 3
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PPUSH
45920: CALL_OW 72
45924: ST_TO_ADDR
// if not factories then
45925: LD_VAR 0 6
45929: NOT
45930: IFFALSE 45934
// exit ;
45932: GO 46930
// for i in factories do
45934: LD_ADDR_VAR 0 8
45938: PUSH
45939: LD_VAR 0 6
45943: PUSH
45944: FOR_IN
45945: IFFALSE 45970
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45947: LD_ADDR_VAR 0 17
45951: PUSH
45952: LD_VAR 0 17
45956: PUSH
45957: LD_VAR 0 8
45961: PPUSH
45962: CALL_OW 478
45966: UNION
45967: ST_TO_ADDR
45968: GO 45944
45970: POP
45971: POP
// if not fac_list then
45972: LD_VAR 0 17
45976: NOT
45977: IFFALSE 45981
// exit ;
45979: GO 46930
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45981: LD_ADDR_VAR 0 5
45985: PUSH
45986: LD_INT 4
45988: PUSH
45989: LD_INT 5
45991: PUSH
45992: LD_INT 9
45994: PUSH
45995: LD_INT 10
45997: PUSH
45998: LD_INT 6
46000: PUSH
46001: LD_INT 7
46003: PUSH
46004: LD_INT 11
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 27
46018: PUSH
46019: LD_INT 28
46021: PUSH
46022: LD_INT 26
46024: PUSH
46025: LD_INT 30
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 43
46036: PUSH
46037: LD_INT 44
46039: PUSH
46040: LD_INT 46
46042: PUSH
46043: LD_INT 45
46045: PUSH
46046: LD_INT 47
46048: PUSH
46049: LD_INT 49
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: LIST
46064: PUSH
46065: LD_VAR 0 12
46069: ARRAY
46070: ST_TO_ADDR
// for i in list do
46071: LD_ADDR_VAR 0 8
46075: PUSH
46076: LD_VAR 0 5
46080: PUSH
46081: FOR_IN
46082: IFFALSE 46115
// if not i in fac_list then
46084: LD_VAR 0 8
46088: PUSH
46089: LD_VAR 0 17
46093: IN
46094: NOT
46095: IFFALSE 46113
// list := list diff i ;
46097: LD_ADDR_VAR 0 5
46101: PUSH
46102: LD_VAR 0 5
46106: PUSH
46107: LD_VAR 0 8
46111: DIFF
46112: ST_TO_ADDR
46113: GO 46081
46115: POP
46116: POP
// if not list then
46117: LD_VAR 0 5
46121: NOT
46122: IFFALSE 46126
// exit ;
46124: GO 46930
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46126: LD_VAR 0 12
46130: PUSH
46131: LD_INT 3
46133: EQUAL
46134: PUSH
46135: LD_INT 49
46137: PUSH
46138: LD_VAR 0 5
46142: IN
46143: AND
46144: PUSH
46145: LD_INT 31
46147: PPUSH
46148: LD_VAR 0 16
46152: PPUSH
46153: CALL_OW 321
46157: PUSH
46158: LD_INT 2
46160: EQUAL
46161: AND
46162: IFFALSE 46222
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46164: LD_INT 22
46166: PUSH
46167: LD_VAR 0 16
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 35
46178: PUSH
46179: LD_INT 49
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 91
46188: PUSH
46189: LD_VAR 0 1
46193: PUSH
46194: LD_INT 10
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: LIST
46206: PPUSH
46207: CALL_OW 69
46211: NOT
46212: IFFALSE 46222
// weapon := ru_time_lapser ;
46214: LD_ADDR_VAR 0 18
46218: PUSH
46219: LD_INT 49
46221: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46222: LD_VAR 0 12
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: IN
46237: PUSH
46238: LD_INT 11
46240: PUSH
46241: LD_VAR 0 5
46245: IN
46246: PUSH
46247: LD_INT 30
46249: PUSH
46250: LD_VAR 0 5
46254: IN
46255: OR
46256: AND
46257: PUSH
46258: LD_INT 6
46260: PPUSH
46261: LD_VAR 0 16
46265: PPUSH
46266: CALL_OW 321
46270: PUSH
46271: LD_INT 2
46273: EQUAL
46274: AND
46275: IFFALSE 46440
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46277: LD_INT 22
46279: PUSH
46280: LD_VAR 0 16
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 2
46291: PUSH
46292: LD_INT 35
46294: PUSH
46295: LD_INT 11
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 35
46304: PUSH
46305: LD_INT 30
46307: PUSH
46308: EMPTY
46309: LIST
46310: LIST
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 91
46319: PUSH
46320: LD_VAR 0 1
46324: PUSH
46325: LD_INT 18
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: PPUSH
46338: CALL_OW 69
46342: NOT
46343: PUSH
46344: LD_INT 22
46346: PUSH
46347: LD_VAR 0 16
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: PUSH
46359: LD_INT 30
46361: PUSH
46362: LD_INT 32
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 30
46371: PUSH
46372: LD_INT 33
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 91
46386: PUSH
46387: LD_VAR 0 1
46391: PUSH
46392: LD_INT 12
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: PPUSH
46408: CALL_OW 69
46412: PUSH
46413: LD_INT 2
46415: GREATER
46416: AND
46417: IFFALSE 46440
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46419: LD_ADDR_VAR 0 18
46423: PUSH
46424: LD_INT 11
46426: PUSH
46427: LD_INT 30
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_VAR 0 12
46438: ARRAY
46439: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46440: LD_VAR 0 18
46444: NOT
46445: PUSH
46446: LD_INT 40
46448: PPUSH
46449: LD_VAR 0 16
46453: PPUSH
46454: CALL_OW 321
46458: PUSH
46459: LD_INT 2
46461: EQUAL
46462: AND
46463: PUSH
46464: LD_INT 7
46466: PUSH
46467: LD_VAR 0 5
46471: IN
46472: PUSH
46473: LD_INT 28
46475: PUSH
46476: LD_VAR 0 5
46480: IN
46481: OR
46482: PUSH
46483: LD_INT 45
46485: PUSH
46486: LD_VAR 0 5
46490: IN
46491: OR
46492: AND
46493: IFFALSE 46747
// begin hex := GetHexInfo ( x , y ) ;
46495: LD_ADDR_VAR 0 4
46499: PUSH
46500: LD_VAR 0 10
46504: PPUSH
46505: LD_VAR 0 11
46509: PPUSH
46510: CALL_OW 546
46514: ST_TO_ADDR
// if hex [ 1 ] then
46515: LD_VAR 0 4
46519: PUSH
46520: LD_INT 1
46522: ARRAY
46523: IFFALSE 46527
// exit ;
46525: GO 46930
// height := hex [ 2 ] ;
46527: LD_ADDR_VAR 0 15
46531: PUSH
46532: LD_VAR 0 4
46536: PUSH
46537: LD_INT 2
46539: ARRAY
46540: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46541: LD_ADDR_VAR 0 14
46545: PUSH
46546: LD_INT 0
46548: PUSH
46549: LD_INT 2
46551: PUSH
46552: LD_INT 3
46554: PUSH
46555: LD_INT 5
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: ST_TO_ADDR
// for i in tmp do
46564: LD_ADDR_VAR 0 8
46568: PUSH
46569: LD_VAR 0 14
46573: PUSH
46574: FOR_IN
46575: IFFALSE 46745
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46577: LD_ADDR_VAR 0 9
46581: PUSH
46582: LD_VAR 0 10
46586: PPUSH
46587: LD_VAR 0 8
46591: PPUSH
46592: LD_INT 5
46594: PPUSH
46595: CALL_OW 272
46599: PUSH
46600: LD_VAR 0 11
46604: PPUSH
46605: LD_VAR 0 8
46609: PPUSH
46610: LD_INT 5
46612: PPUSH
46613: CALL_OW 273
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46622: LD_VAR 0 9
46626: PUSH
46627: LD_INT 1
46629: ARRAY
46630: PPUSH
46631: LD_VAR 0 9
46635: PUSH
46636: LD_INT 2
46638: ARRAY
46639: PPUSH
46640: CALL_OW 488
46644: IFFALSE 46743
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46646: LD_ADDR_VAR 0 4
46650: PUSH
46651: LD_VAR 0 9
46655: PUSH
46656: LD_INT 1
46658: ARRAY
46659: PPUSH
46660: LD_VAR 0 9
46664: PUSH
46665: LD_INT 2
46667: ARRAY
46668: PPUSH
46669: CALL_OW 546
46673: ST_TO_ADDR
// if hex [ 1 ] then
46674: LD_VAR 0 4
46678: PUSH
46679: LD_INT 1
46681: ARRAY
46682: IFFALSE 46686
// continue ;
46684: GO 46574
// h := hex [ 2 ] ;
46686: LD_ADDR_VAR 0 13
46690: PUSH
46691: LD_VAR 0 4
46695: PUSH
46696: LD_INT 2
46698: ARRAY
46699: ST_TO_ADDR
// if h + 7 < height then
46700: LD_VAR 0 13
46704: PUSH
46705: LD_INT 7
46707: PLUS
46708: PUSH
46709: LD_VAR 0 15
46713: LESS
46714: IFFALSE 46743
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46716: LD_ADDR_VAR 0 18
46720: PUSH
46721: LD_INT 7
46723: PUSH
46724: LD_INT 28
46726: PUSH
46727: LD_INT 45
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: PUSH
46735: LD_VAR 0 12
46739: ARRAY
46740: ST_TO_ADDR
// break ;
46741: GO 46745
// end ; end ; end ;
46743: GO 46574
46745: POP
46746: POP
// end ; if not weapon then
46747: LD_VAR 0 18
46751: NOT
46752: IFFALSE 46812
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46754: LD_ADDR_VAR 0 5
46758: PUSH
46759: LD_VAR 0 5
46763: PUSH
46764: LD_INT 11
46766: PUSH
46767: LD_INT 30
46769: PUSH
46770: LD_INT 49
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: LIST
46777: DIFF
46778: ST_TO_ADDR
// if not list then
46779: LD_VAR 0 5
46783: NOT
46784: IFFALSE 46788
// exit ;
46786: GO 46930
// weapon := list [ rand ( 1 , list ) ] ;
46788: LD_ADDR_VAR 0 18
46792: PUSH
46793: LD_VAR 0 5
46797: PUSH
46798: LD_INT 1
46800: PPUSH
46801: LD_VAR 0 5
46805: PPUSH
46806: CALL_OW 12
46810: ARRAY
46811: ST_TO_ADDR
// end ; if weapon then
46812: LD_VAR 0 18
46816: IFFALSE 46930
// begin tmp := CostOfWeapon ( weapon ) ;
46818: LD_ADDR_VAR 0 14
46822: PUSH
46823: LD_VAR 0 18
46827: PPUSH
46828: CALL_OW 451
46832: ST_TO_ADDR
// j := GetBase ( tower ) ;
46833: LD_ADDR_VAR 0 9
46837: PUSH
46838: LD_VAR 0 1
46842: PPUSH
46843: CALL_OW 274
46847: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46848: LD_VAR 0 9
46852: PPUSH
46853: LD_INT 1
46855: PPUSH
46856: CALL_OW 275
46860: PUSH
46861: LD_VAR 0 14
46865: PUSH
46866: LD_INT 1
46868: ARRAY
46869: GREATEREQUAL
46870: PUSH
46871: LD_VAR 0 9
46875: PPUSH
46876: LD_INT 2
46878: PPUSH
46879: CALL_OW 275
46883: PUSH
46884: LD_VAR 0 14
46888: PUSH
46889: LD_INT 2
46891: ARRAY
46892: GREATEREQUAL
46893: AND
46894: PUSH
46895: LD_VAR 0 9
46899: PPUSH
46900: LD_INT 3
46902: PPUSH
46903: CALL_OW 275
46907: PUSH
46908: LD_VAR 0 14
46912: PUSH
46913: LD_INT 3
46915: ARRAY
46916: GREATEREQUAL
46917: AND
46918: IFFALSE 46930
// result := weapon ;
46920: LD_ADDR_VAR 0 3
46924: PUSH
46925: LD_VAR 0 18
46929: ST_TO_ADDR
// end ; end ;
46930: LD_VAR 0 3
46934: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46935: LD_INT 0
46937: PPUSH
46938: PPUSH
// result := true ;
46939: LD_ADDR_VAR 0 3
46943: PUSH
46944: LD_INT 1
46946: ST_TO_ADDR
// if array1 = array2 then
46947: LD_VAR 0 1
46951: PUSH
46952: LD_VAR 0 2
46956: EQUAL
46957: IFFALSE 47017
// begin for i = 1 to array1 do
46959: LD_ADDR_VAR 0 4
46963: PUSH
46964: DOUBLE
46965: LD_INT 1
46967: DEC
46968: ST_TO_ADDR
46969: LD_VAR 0 1
46973: PUSH
46974: FOR_TO
46975: IFFALSE 47013
// if array1 [ i ] <> array2 [ i ] then
46977: LD_VAR 0 1
46981: PUSH
46982: LD_VAR 0 4
46986: ARRAY
46987: PUSH
46988: LD_VAR 0 2
46992: PUSH
46993: LD_VAR 0 4
46997: ARRAY
46998: NONEQUAL
46999: IFFALSE 47011
// begin result := false ;
47001: LD_ADDR_VAR 0 3
47005: PUSH
47006: LD_INT 0
47008: ST_TO_ADDR
// break ;
47009: GO 47013
// end ;
47011: GO 46974
47013: POP
47014: POP
// end else
47015: GO 47025
// result := false ;
47017: LD_ADDR_VAR 0 3
47021: PUSH
47022: LD_INT 0
47024: ST_TO_ADDR
// end ;
47025: LD_VAR 0 3
47029: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47030: LD_INT 0
47032: PPUSH
47033: PPUSH
47034: PPUSH
// pom := GetBase ( fac ) ;
47035: LD_ADDR_VAR 0 5
47039: PUSH
47040: LD_VAR 0 1
47044: PPUSH
47045: CALL_OW 274
47049: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47050: LD_ADDR_VAR 0 4
47054: PUSH
47055: LD_VAR 0 2
47059: PUSH
47060: LD_INT 1
47062: ARRAY
47063: PPUSH
47064: LD_VAR 0 2
47068: PUSH
47069: LD_INT 2
47071: ARRAY
47072: PPUSH
47073: LD_VAR 0 2
47077: PUSH
47078: LD_INT 3
47080: ARRAY
47081: PPUSH
47082: LD_VAR 0 2
47086: PUSH
47087: LD_INT 4
47089: ARRAY
47090: PPUSH
47091: CALL_OW 449
47095: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47096: LD_ADDR_VAR 0 3
47100: PUSH
47101: LD_VAR 0 5
47105: PPUSH
47106: LD_INT 1
47108: PPUSH
47109: CALL_OW 275
47113: PUSH
47114: LD_VAR 0 4
47118: PUSH
47119: LD_INT 1
47121: ARRAY
47122: GREATEREQUAL
47123: PUSH
47124: LD_VAR 0 5
47128: PPUSH
47129: LD_INT 2
47131: PPUSH
47132: CALL_OW 275
47136: PUSH
47137: LD_VAR 0 4
47141: PUSH
47142: LD_INT 2
47144: ARRAY
47145: GREATEREQUAL
47146: AND
47147: PUSH
47148: LD_VAR 0 5
47152: PPUSH
47153: LD_INT 3
47155: PPUSH
47156: CALL_OW 275
47160: PUSH
47161: LD_VAR 0 4
47165: PUSH
47166: LD_INT 3
47168: ARRAY
47169: GREATEREQUAL
47170: AND
47171: ST_TO_ADDR
// end ;
47172: LD_VAR 0 3
47176: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47177: LD_INT 0
47179: PPUSH
47180: PPUSH
47181: PPUSH
47182: PPUSH
// pom := GetBase ( building ) ;
47183: LD_ADDR_VAR 0 3
47187: PUSH
47188: LD_VAR 0 1
47192: PPUSH
47193: CALL_OW 274
47197: ST_TO_ADDR
// if not pom then
47198: LD_VAR 0 3
47202: NOT
47203: IFFALSE 47207
// exit ;
47205: GO 47377
// btype := GetBType ( building ) ;
47207: LD_ADDR_VAR 0 5
47211: PUSH
47212: LD_VAR 0 1
47216: PPUSH
47217: CALL_OW 266
47221: ST_TO_ADDR
// if btype = b_armoury then
47222: LD_VAR 0 5
47226: PUSH
47227: LD_INT 4
47229: EQUAL
47230: IFFALSE 47240
// btype := b_barracks ;
47232: LD_ADDR_VAR 0 5
47236: PUSH
47237: LD_INT 5
47239: ST_TO_ADDR
// if btype = b_depot then
47240: LD_VAR 0 5
47244: PUSH
47245: LD_INT 0
47247: EQUAL
47248: IFFALSE 47258
// btype := b_warehouse ;
47250: LD_ADDR_VAR 0 5
47254: PUSH
47255: LD_INT 1
47257: ST_TO_ADDR
// if btype = b_workshop then
47258: LD_VAR 0 5
47262: PUSH
47263: LD_INT 2
47265: EQUAL
47266: IFFALSE 47276
// btype := b_factory ;
47268: LD_ADDR_VAR 0 5
47272: PUSH
47273: LD_INT 3
47275: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47276: LD_ADDR_VAR 0 4
47280: PUSH
47281: LD_VAR 0 5
47285: PPUSH
47286: LD_VAR 0 1
47290: PPUSH
47291: CALL_OW 248
47295: PPUSH
47296: CALL_OW 450
47300: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47301: LD_ADDR_VAR 0 2
47305: PUSH
47306: LD_VAR 0 3
47310: PPUSH
47311: LD_INT 1
47313: PPUSH
47314: CALL_OW 275
47318: PUSH
47319: LD_VAR 0 4
47323: PUSH
47324: LD_INT 1
47326: ARRAY
47327: GREATEREQUAL
47328: PUSH
47329: LD_VAR 0 3
47333: PPUSH
47334: LD_INT 2
47336: PPUSH
47337: CALL_OW 275
47341: PUSH
47342: LD_VAR 0 4
47346: PUSH
47347: LD_INT 2
47349: ARRAY
47350: GREATEREQUAL
47351: AND
47352: PUSH
47353: LD_VAR 0 3
47357: PPUSH
47358: LD_INT 3
47360: PPUSH
47361: CALL_OW 275
47365: PUSH
47366: LD_VAR 0 4
47370: PUSH
47371: LD_INT 3
47373: ARRAY
47374: GREATEREQUAL
47375: AND
47376: ST_TO_ADDR
// end ;
47377: LD_VAR 0 2
47381: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47382: LD_INT 0
47384: PPUSH
47385: PPUSH
47386: PPUSH
// pom := GetBase ( building ) ;
47387: LD_ADDR_VAR 0 4
47391: PUSH
47392: LD_VAR 0 1
47396: PPUSH
47397: CALL_OW 274
47401: ST_TO_ADDR
// if not pom then
47402: LD_VAR 0 4
47406: NOT
47407: IFFALSE 47411
// exit ;
47409: GO 47512
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47411: LD_ADDR_VAR 0 5
47415: PUSH
47416: LD_VAR 0 2
47420: PPUSH
47421: LD_VAR 0 1
47425: PPUSH
47426: CALL_OW 248
47430: PPUSH
47431: CALL_OW 450
47435: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47436: LD_ADDR_VAR 0 3
47440: PUSH
47441: LD_VAR 0 4
47445: PPUSH
47446: LD_INT 1
47448: PPUSH
47449: CALL_OW 275
47453: PUSH
47454: LD_VAR 0 5
47458: PUSH
47459: LD_INT 1
47461: ARRAY
47462: GREATEREQUAL
47463: PUSH
47464: LD_VAR 0 4
47468: PPUSH
47469: LD_INT 2
47471: PPUSH
47472: CALL_OW 275
47476: PUSH
47477: LD_VAR 0 5
47481: PUSH
47482: LD_INT 2
47484: ARRAY
47485: GREATEREQUAL
47486: AND
47487: PUSH
47488: LD_VAR 0 4
47492: PPUSH
47493: LD_INT 3
47495: PPUSH
47496: CALL_OW 275
47500: PUSH
47501: LD_VAR 0 5
47505: PUSH
47506: LD_INT 3
47508: ARRAY
47509: GREATEREQUAL
47510: AND
47511: ST_TO_ADDR
// end ;
47512: LD_VAR 0 3
47516: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47517: LD_INT 0
47519: PPUSH
47520: PPUSH
47521: PPUSH
47522: PPUSH
47523: PPUSH
47524: PPUSH
47525: PPUSH
47526: PPUSH
47527: PPUSH
47528: PPUSH
// result := false ;
47529: LD_ADDR_VAR 0 6
47533: PUSH
47534: LD_INT 0
47536: ST_TO_ADDR
// if not base or not btype or not x or not y then
47537: LD_VAR 0 1
47541: NOT
47542: PUSH
47543: LD_VAR 0 2
47547: NOT
47548: OR
47549: PUSH
47550: LD_VAR 0 3
47554: NOT
47555: OR
47556: PUSH
47557: LD_VAR 0 4
47561: NOT
47562: OR
47563: IFFALSE 47567
// exit ;
47565: GO 48176
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47567: LD_ADDR_VAR 0 12
47571: PUSH
47572: LD_VAR 0 2
47576: PPUSH
47577: LD_VAR 0 3
47581: PPUSH
47582: LD_VAR 0 4
47586: PPUSH
47587: LD_VAR 0 5
47591: PPUSH
47592: LD_VAR 0 1
47596: PUSH
47597: LD_INT 1
47599: ARRAY
47600: PPUSH
47601: CALL_OW 248
47605: PPUSH
47606: LD_INT 0
47608: PPUSH
47609: CALL 49013 0 6
47613: ST_TO_ADDR
// if not hexes then
47614: LD_VAR 0 12
47618: NOT
47619: IFFALSE 47623
// exit ;
47621: GO 48176
// for i = 1 to hexes do
47623: LD_ADDR_VAR 0 7
47627: PUSH
47628: DOUBLE
47629: LD_INT 1
47631: DEC
47632: ST_TO_ADDR
47633: LD_VAR 0 12
47637: PUSH
47638: FOR_TO
47639: IFFALSE 48174
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47641: LD_ADDR_VAR 0 11
47645: PUSH
47646: LD_VAR 0 12
47650: PUSH
47651: LD_VAR 0 7
47655: ARRAY
47656: PUSH
47657: LD_INT 1
47659: ARRAY
47660: PPUSH
47661: LD_VAR 0 12
47665: PUSH
47666: LD_VAR 0 7
47670: ARRAY
47671: PUSH
47672: LD_INT 2
47674: ARRAY
47675: PPUSH
47676: CALL_OW 428
47680: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47681: LD_VAR 0 12
47685: PUSH
47686: LD_VAR 0 7
47690: ARRAY
47691: PUSH
47692: LD_INT 1
47694: ARRAY
47695: PPUSH
47696: LD_VAR 0 12
47700: PUSH
47701: LD_VAR 0 7
47705: ARRAY
47706: PUSH
47707: LD_INT 2
47709: ARRAY
47710: PPUSH
47711: CALL_OW 351
47715: PUSH
47716: LD_VAR 0 12
47720: PUSH
47721: LD_VAR 0 7
47725: ARRAY
47726: PUSH
47727: LD_INT 1
47729: ARRAY
47730: PPUSH
47731: LD_VAR 0 12
47735: PUSH
47736: LD_VAR 0 7
47740: ARRAY
47741: PUSH
47742: LD_INT 2
47744: ARRAY
47745: PPUSH
47746: CALL_OW 488
47750: NOT
47751: OR
47752: PUSH
47753: LD_VAR 0 11
47757: PPUSH
47758: CALL_OW 247
47762: PUSH
47763: LD_INT 3
47765: EQUAL
47766: OR
47767: IFFALSE 47773
// exit ;
47769: POP
47770: POP
47771: GO 48176
// if not tmp or not tmp in base then
47773: LD_VAR 0 11
47777: NOT
47778: PUSH
47779: LD_VAR 0 11
47783: PUSH
47784: LD_VAR 0 1
47788: IN
47789: NOT
47790: OR
47791: IFFALSE 47795
// continue ;
47793: GO 47638
// result := true ;
47795: LD_ADDR_VAR 0 6
47799: PUSH
47800: LD_INT 1
47802: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47803: LD_ADDR_VAR 0 15
47807: PUSH
47808: LD_VAR 0 1
47812: PPUSH
47813: LD_INT 22
47815: PUSH
47816: LD_VAR 0 11
47820: PPUSH
47821: CALL_OW 255
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 30
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 30
47845: PUSH
47846: LD_INT 1
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PPUSH
47862: CALL_OW 72
47866: ST_TO_ADDR
// if dep then
47867: LD_VAR 0 15
47871: IFFALSE 48007
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47873: LD_ADDR_VAR 0 14
47877: PUSH
47878: LD_VAR 0 15
47882: PUSH
47883: LD_INT 1
47885: ARRAY
47886: PPUSH
47887: CALL_OW 250
47891: PPUSH
47892: LD_VAR 0 15
47896: PUSH
47897: LD_INT 1
47899: ARRAY
47900: PPUSH
47901: CALL_OW 254
47905: PPUSH
47906: LD_INT 5
47908: PPUSH
47909: CALL_OW 272
47913: PUSH
47914: LD_VAR 0 15
47918: PUSH
47919: LD_INT 1
47921: ARRAY
47922: PPUSH
47923: CALL_OW 251
47927: PPUSH
47928: LD_VAR 0 15
47932: PUSH
47933: LD_INT 1
47935: ARRAY
47936: PPUSH
47937: CALL_OW 254
47941: PPUSH
47942: LD_INT 5
47944: PPUSH
47945: CALL_OW 273
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47954: LD_VAR 0 14
47958: PUSH
47959: LD_INT 1
47961: ARRAY
47962: PPUSH
47963: LD_VAR 0 14
47967: PUSH
47968: LD_INT 2
47970: ARRAY
47971: PPUSH
47972: CALL_OW 488
47976: IFFALSE 48007
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47978: LD_VAR 0 11
47982: PPUSH
47983: LD_VAR 0 14
47987: PUSH
47988: LD_INT 1
47990: ARRAY
47991: PPUSH
47992: LD_VAR 0 14
47996: PUSH
47997: LD_INT 2
47999: ARRAY
48000: PPUSH
48001: CALL_OW 111
// continue ;
48005: GO 47638
// end ; end ; r := GetDir ( tmp ) ;
48007: LD_ADDR_VAR 0 13
48011: PUSH
48012: LD_VAR 0 11
48016: PPUSH
48017: CALL_OW 254
48021: ST_TO_ADDR
// if r = 5 then
48022: LD_VAR 0 13
48026: PUSH
48027: LD_INT 5
48029: EQUAL
48030: IFFALSE 48040
// r := 0 ;
48032: LD_ADDR_VAR 0 13
48036: PUSH
48037: LD_INT 0
48039: ST_TO_ADDR
// for j = r to 5 do
48040: LD_ADDR_VAR 0 8
48044: PUSH
48045: DOUBLE
48046: LD_VAR 0 13
48050: DEC
48051: ST_TO_ADDR
48052: LD_INT 5
48054: PUSH
48055: FOR_TO
48056: IFFALSE 48170
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48058: LD_ADDR_VAR 0 9
48062: PUSH
48063: LD_VAR 0 11
48067: PPUSH
48068: CALL_OW 250
48072: PPUSH
48073: LD_VAR 0 8
48077: PPUSH
48078: LD_INT 2
48080: PPUSH
48081: CALL_OW 272
48085: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48086: LD_ADDR_VAR 0 10
48090: PUSH
48091: LD_VAR 0 11
48095: PPUSH
48096: CALL_OW 251
48100: PPUSH
48101: LD_VAR 0 8
48105: PPUSH
48106: LD_INT 2
48108: PPUSH
48109: CALL_OW 273
48113: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48114: LD_VAR 0 9
48118: PPUSH
48119: LD_VAR 0 10
48123: PPUSH
48124: CALL_OW 488
48128: PUSH
48129: LD_VAR 0 9
48133: PPUSH
48134: LD_VAR 0 10
48138: PPUSH
48139: CALL_OW 428
48143: NOT
48144: AND
48145: IFFALSE 48168
// begin ComMoveXY ( tmp , _x , _y ) ;
48147: LD_VAR 0 11
48151: PPUSH
48152: LD_VAR 0 9
48156: PPUSH
48157: LD_VAR 0 10
48161: PPUSH
48162: CALL_OW 111
// break ;
48166: GO 48170
// end ; end ;
48168: GO 48055
48170: POP
48171: POP
// end ;
48172: GO 47638
48174: POP
48175: POP
// end ;
48176: LD_VAR 0 6
48180: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
48187: PPUSH
48188: PPUSH
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
// result := false ;
48193: LD_ADDR_VAR 0 6
48197: PUSH
48198: LD_INT 0
48200: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48201: LD_VAR 0 1
48205: NOT
48206: PUSH
48207: LD_VAR 0 1
48211: PPUSH
48212: CALL_OW 266
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: IN
48227: NOT
48228: OR
48229: PUSH
48230: LD_VAR 0 2
48234: NOT
48235: OR
48236: PUSH
48237: LD_VAR 0 5
48241: PUSH
48242: LD_INT 0
48244: PUSH
48245: LD_INT 1
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 3
48253: PUSH
48254: LD_INT 4
48256: PUSH
48257: LD_INT 5
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: IN
48268: NOT
48269: OR
48270: PUSH
48271: LD_VAR 0 3
48275: PPUSH
48276: LD_VAR 0 4
48280: PPUSH
48281: CALL_OW 488
48285: NOT
48286: OR
48287: IFFALSE 48291
// exit ;
48289: GO 49008
// pom := GetBase ( depot ) ;
48291: LD_ADDR_VAR 0 10
48295: PUSH
48296: LD_VAR 0 1
48300: PPUSH
48301: CALL_OW 274
48305: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48306: LD_ADDR_VAR 0 11
48310: PUSH
48311: LD_VAR 0 2
48315: PPUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 248
48325: PPUSH
48326: CALL_OW 450
48330: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48331: LD_VAR 0 10
48335: PPUSH
48336: LD_INT 1
48338: PPUSH
48339: CALL_OW 275
48343: PUSH
48344: LD_VAR 0 11
48348: PUSH
48349: LD_INT 1
48351: ARRAY
48352: GREATEREQUAL
48353: PUSH
48354: LD_VAR 0 10
48358: PPUSH
48359: LD_INT 2
48361: PPUSH
48362: CALL_OW 275
48366: PUSH
48367: LD_VAR 0 11
48371: PUSH
48372: LD_INT 2
48374: ARRAY
48375: GREATEREQUAL
48376: AND
48377: PUSH
48378: LD_VAR 0 10
48382: PPUSH
48383: LD_INT 3
48385: PPUSH
48386: CALL_OW 275
48390: PUSH
48391: LD_VAR 0 11
48395: PUSH
48396: LD_INT 3
48398: ARRAY
48399: GREATEREQUAL
48400: AND
48401: NOT
48402: IFFALSE 48406
// exit ;
48404: GO 49008
// if GetBType ( depot ) = b_depot then
48406: LD_VAR 0 1
48410: PPUSH
48411: CALL_OW 266
48415: PUSH
48416: LD_INT 0
48418: EQUAL
48419: IFFALSE 48431
// dist := 28 else
48421: LD_ADDR_VAR 0 14
48425: PUSH
48426: LD_INT 28
48428: ST_TO_ADDR
48429: GO 48439
// dist := 36 ;
48431: LD_ADDR_VAR 0 14
48435: PUSH
48436: LD_INT 36
48438: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48439: LD_VAR 0 1
48443: PPUSH
48444: LD_VAR 0 3
48448: PPUSH
48449: LD_VAR 0 4
48453: PPUSH
48454: CALL_OW 297
48458: PUSH
48459: LD_VAR 0 14
48463: GREATER
48464: IFFALSE 48468
// exit ;
48466: GO 49008
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48468: LD_ADDR_VAR 0 12
48472: PUSH
48473: LD_VAR 0 2
48477: PPUSH
48478: LD_VAR 0 3
48482: PPUSH
48483: LD_VAR 0 4
48487: PPUSH
48488: LD_VAR 0 5
48492: PPUSH
48493: LD_VAR 0 1
48497: PPUSH
48498: CALL_OW 248
48502: PPUSH
48503: LD_INT 0
48505: PPUSH
48506: CALL 49013 0 6
48510: ST_TO_ADDR
// if not hexes then
48511: LD_VAR 0 12
48515: NOT
48516: IFFALSE 48520
// exit ;
48518: GO 49008
// hex := GetHexInfo ( x , y ) ;
48520: LD_ADDR_VAR 0 15
48524: PUSH
48525: LD_VAR 0 3
48529: PPUSH
48530: LD_VAR 0 4
48534: PPUSH
48535: CALL_OW 546
48539: ST_TO_ADDR
// if hex [ 1 ] then
48540: LD_VAR 0 15
48544: PUSH
48545: LD_INT 1
48547: ARRAY
48548: IFFALSE 48552
// exit ;
48550: GO 49008
// height := hex [ 2 ] ;
48552: LD_ADDR_VAR 0 13
48556: PUSH
48557: LD_VAR 0 15
48561: PUSH
48562: LD_INT 2
48564: ARRAY
48565: ST_TO_ADDR
// for i = 1 to hexes do
48566: LD_ADDR_VAR 0 7
48570: PUSH
48571: DOUBLE
48572: LD_INT 1
48574: DEC
48575: ST_TO_ADDR
48576: LD_VAR 0 12
48580: PUSH
48581: FOR_TO
48582: IFFALSE 48912
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48584: LD_VAR 0 12
48588: PUSH
48589: LD_VAR 0 7
48593: ARRAY
48594: PUSH
48595: LD_INT 1
48597: ARRAY
48598: PPUSH
48599: LD_VAR 0 12
48603: PUSH
48604: LD_VAR 0 7
48608: ARRAY
48609: PUSH
48610: LD_INT 2
48612: ARRAY
48613: PPUSH
48614: CALL_OW 488
48618: NOT
48619: PUSH
48620: LD_VAR 0 12
48624: PUSH
48625: LD_VAR 0 7
48629: ARRAY
48630: PUSH
48631: LD_INT 1
48633: ARRAY
48634: PPUSH
48635: LD_VAR 0 12
48639: PUSH
48640: LD_VAR 0 7
48644: ARRAY
48645: PUSH
48646: LD_INT 2
48648: ARRAY
48649: PPUSH
48650: CALL_OW 428
48654: PUSH
48655: LD_INT 0
48657: GREATER
48658: OR
48659: PUSH
48660: LD_VAR 0 12
48664: PUSH
48665: LD_VAR 0 7
48669: ARRAY
48670: PUSH
48671: LD_INT 1
48673: ARRAY
48674: PPUSH
48675: LD_VAR 0 12
48679: PUSH
48680: LD_VAR 0 7
48684: ARRAY
48685: PUSH
48686: LD_INT 2
48688: ARRAY
48689: PPUSH
48690: CALL_OW 351
48694: OR
48695: IFFALSE 48701
// exit ;
48697: POP
48698: POP
48699: GO 49008
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48701: LD_ADDR_VAR 0 8
48705: PUSH
48706: LD_VAR 0 12
48710: PUSH
48711: LD_VAR 0 7
48715: ARRAY
48716: PUSH
48717: LD_INT 1
48719: ARRAY
48720: PPUSH
48721: LD_VAR 0 12
48725: PUSH
48726: LD_VAR 0 7
48730: ARRAY
48731: PUSH
48732: LD_INT 2
48734: ARRAY
48735: PPUSH
48736: CALL_OW 546
48740: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48741: LD_VAR 0 8
48745: PUSH
48746: LD_INT 1
48748: ARRAY
48749: PUSH
48750: LD_VAR 0 8
48754: PUSH
48755: LD_INT 2
48757: ARRAY
48758: PUSH
48759: LD_VAR 0 13
48763: PUSH
48764: LD_INT 2
48766: PLUS
48767: GREATER
48768: OR
48769: PUSH
48770: LD_VAR 0 8
48774: PUSH
48775: LD_INT 2
48777: ARRAY
48778: PUSH
48779: LD_VAR 0 13
48783: PUSH
48784: LD_INT 2
48786: MINUS
48787: LESS
48788: OR
48789: PUSH
48790: LD_VAR 0 8
48794: PUSH
48795: LD_INT 3
48797: ARRAY
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 8
48804: PUSH
48805: LD_INT 9
48807: PUSH
48808: LD_INT 10
48810: PUSH
48811: LD_INT 11
48813: PUSH
48814: LD_INT 12
48816: PUSH
48817: LD_INT 13
48819: PUSH
48820: LD_INT 16
48822: PUSH
48823: LD_INT 17
48825: PUSH
48826: LD_INT 18
48828: PUSH
48829: LD_INT 19
48831: PUSH
48832: LD_INT 20
48834: PUSH
48835: LD_INT 21
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: IN
48853: NOT
48854: OR
48855: PUSH
48856: LD_VAR 0 8
48860: PUSH
48861: LD_INT 5
48863: ARRAY
48864: NOT
48865: OR
48866: PUSH
48867: LD_VAR 0 8
48871: PUSH
48872: LD_INT 6
48874: ARRAY
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: LD_INT 7
48884: PUSH
48885: LD_INT 9
48887: PUSH
48888: LD_INT 10
48890: PUSH
48891: LD_INT 11
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: IN
48902: NOT
48903: OR
48904: IFFALSE 48910
// exit ;
48906: POP
48907: POP
48908: GO 49008
// end ;
48910: GO 48581
48912: POP
48913: POP
// side := GetSide ( depot ) ;
48914: LD_ADDR_VAR 0 9
48918: PUSH
48919: LD_VAR 0 1
48923: PPUSH
48924: CALL_OW 255
48928: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48929: LD_VAR 0 9
48933: PPUSH
48934: LD_VAR 0 3
48938: PPUSH
48939: LD_VAR 0 4
48943: PPUSH
48944: LD_INT 20
48946: PPUSH
48947: CALL 41662 0 4
48951: PUSH
48952: LD_INT 4
48954: ARRAY
48955: IFFALSE 48959
// exit ;
48957: GO 49008
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48959: LD_VAR 0 2
48963: PUSH
48964: LD_INT 29
48966: PUSH
48967: LD_INT 30
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: IN
48974: PUSH
48975: LD_VAR 0 3
48979: PPUSH
48980: LD_VAR 0 4
48984: PPUSH
48985: LD_VAR 0 9
48989: PPUSH
48990: CALL_OW 440
48994: NOT
48995: AND
48996: IFFALSE 49000
// exit ;
48998: GO 49008
// result := true ;
49000: LD_ADDR_VAR 0 6
49004: PUSH
49005: LD_INT 1
49007: ST_TO_ADDR
// end ;
49008: LD_VAR 0 6
49012: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49013: LD_INT 0
49015: PPUSH
49016: PPUSH
49017: PPUSH
49018: PPUSH
49019: PPUSH
49020: PPUSH
49021: PPUSH
49022: PPUSH
49023: PPUSH
49024: PPUSH
49025: PPUSH
49026: PPUSH
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
49036: PPUSH
49037: PPUSH
49038: PPUSH
49039: PPUSH
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
49049: PPUSH
49050: PPUSH
49051: PPUSH
49052: PPUSH
49053: PPUSH
49054: PPUSH
49055: PPUSH
49056: PPUSH
49057: PPUSH
49058: PPUSH
49059: PPUSH
49060: PPUSH
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
// result = [ ] ;
49073: LD_ADDR_VAR 0 7
49077: PUSH
49078: EMPTY
49079: ST_TO_ADDR
// temp_list = [ ] ;
49080: LD_ADDR_VAR 0 9
49084: PUSH
49085: EMPTY
49086: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49087: LD_VAR 0 4
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: LD_INT 3
49103: PUSH
49104: LD_INT 4
49106: PUSH
49107: LD_INT 5
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: IN
49118: NOT
49119: PUSH
49120: LD_VAR 0 1
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: IN
49135: PUSH
49136: LD_VAR 0 5
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: LIST
49154: IN
49155: NOT
49156: AND
49157: OR
49158: IFFALSE 49162
// exit ;
49160: GO 67553
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49162: LD_VAR 0 1
49166: PUSH
49167: LD_INT 6
49169: PUSH
49170: LD_INT 7
49172: PUSH
49173: LD_INT 8
49175: PUSH
49176: LD_INT 13
49178: PUSH
49179: LD_INT 12
49181: PUSH
49182: LD_INT 15
49184: PUSH
49185: LD_INT 11
49187: PUSH
49188: LD_INT 14
49190: PUSH
49191: LD_INT 10
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: IN
49205: IFFALSE 49215
// btype = b_lab ;
49207: LD_ADDR_VAR 0 1
49211: PUSH
49212: LD_INT 6
49214: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49215: LD_VAR 0 6
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: LIST
49233: IN
49234: NOT
49235: PUSH
49236: LD_VAR 0 1
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: PUSH
49247: LD_INT 2
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: LD_INT 6
49255: PUSH
49256: LD_INT 36
49258: PUSH
49259: LD_INT 4
49261: PUSH
49262: LD_INT 5
49264: PUSH
49265: LD_INT 31
49267: PUSH
49268: LD_INT 32
49270: PUSH
49271: LD_INT 33
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: IN
49287: NOT
49288: PUSH
49289: LD_VAR 0 6
49293: PUSH
49294: LD_INT 1
49296: EQUAL
49297: AND
49298: OR
49299: PUSH
49300: LD_VAR 0 1
49304: PUSH
49305: LD_INT 2
49307: PUSH
49308: LD_INT 3
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: IN
49315: NOT
49316: PUSH
49317: LD_VAR 0 6
49321: PUSH
49322: LD_INT 2
49324: EQUAL
49325: AND
49326: OR
49327: IFFALSE 49337
// mode = 0 ;
49329: LD_ADDR_VAR 0 6
49333: PUSH
49334: LD_INT 0
49336: ST_TO_ADDR
// case mode of 0 :
49337: LD_VAR 0 6
49341: PUSH
49342: LD_INT 0
49344: DOUBLE
49345: EQUAL
49346: IFTRUE 49350
49348: GO 60803
49350: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49351: LD_ADDR_VAR 0 11
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 0
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 1
49486: NEG
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49544: LD_ADDR_VAR 0 12
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: LD_INT 0
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 1
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 0
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 1
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 1
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: NEG
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: NEG
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 0
49671: PUSH
49672: EMPTY
49673: LIST
49674: LIST
49675: PUSH
49676: LD_INT 2
49678: NEG
49679: PUSH
49680: LD_INT 1
49682: NEG
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: PUSH
49688: LD_INT 2
49690: NEG
49691: PUSH
49692: LD_INT 1
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 3
49712: NEG
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49740: LD_ADDR_VAR 0 13
49744: PUSH
49745: LD_INT 0
49747: PUSH
49748: LD_INT 0
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: NEG
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 1
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 2
49833: PUSH
49834: LD_INT 1
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 2
49843: PUSH
49844: LD_INT 2
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 2
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: NEG
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: LD_INT 3
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 3
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49939: LD_ADDR_VAR 0 14
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: LD_INT 0
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 0
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: LD_INT 0
49970: PUSH
49971: EMPTY
49972: LIST
49973: LIST
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 1
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: LD_INT 0
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 2
50035: NEG
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 0
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 1
50085: NEG
50086: PUSH
50087: LD_INT 3
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50135: LD_ADDR_VAR 0 15
50139: PUSH
50140: LD_INT 0
50142: PUSH
50143: LD_INT 0
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 1
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 3
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 3
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50328: LD_ADDR_VAR 0 16
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 2
50431: PUSH
50432: LD_INT 2
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 2
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 2
50451: NEG
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: LD_INT 2
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 3
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 3
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50521: LD_ADDR_VAR 0 17
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: LD_INT 0
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 1
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 1
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 2
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: LD_INT 1
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: LD_INT 2
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 2
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 1
50686: NEG
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 0
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 2
50708: NEG
50709: PUSH
50710: LD_INT 1
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: NEG
50721: PUSH
50722: LD_INT 2
50724: NEG
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50751: LD_ADDR_VAR 0 18
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 0
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 2
50847: NEG
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: PUSH
50897: LD_INT 2
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 2
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 1
50916: NEG
50917: PUSH
50918: LD_INT 1
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 2
50927: NEG
50928: PUSH
50929: LD_INT 0
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 2
50938: NEG
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 2
50950: NEG
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: LIST
50977: LIST
50978: LIST
50979: LIST
50980: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50981: LD_ADDR_VAR 0 19
50985: PUSH
50986: LD_INT 0
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 0
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 0
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: PUSH
51097: LD_INT 0
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: LD_INT 2
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: LD_INT 2
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: LD_INT 2
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 2
51157: NEG
51158: PUSH
51159: LD_INT 0
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: LD_INT 2
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: LIST
51197: LIST
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51211: LD_ADDR_VAR 0 20
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 1
51239: PUSH
51240: LD_INT 0
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: LD_INT 1
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 0
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: PUSH
51347: LD_INT 2
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: LD_INT 2
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 1
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 2
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 2
51410: NEG
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51441: LD_ADDR_VAR 0 21
51445: PUSH
51446: LD_INT 0
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 0
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 1
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 1
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 2
51556: PUSH
51557: LD_INT 0
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 2
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: EMPTY
51581: LIST
51582: LIST
51583: PUSH
51584: LD_INT 1
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: LD_INT 2
51644: NEG
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51671: LD_ADDR_VAR 0 22
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 0
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: LD_INT 1
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: NEG
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 2
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 2
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 2
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 2
51870: NEG
51871: PUSH
51872: LD_INT 2
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51901: LD_ADDR_VAR 0 23
51905: PUSH
51906: LD_INT 0
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: EMPTY
51944: LIST
51945: LIST
51946: PUSH
51947: LD_INT 0
51949: PUSH
51950: LD_INT 1
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 0
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 0
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 2
52036: PUSH
52037: LD_INT 2
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 2
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 1
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: NEG
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: NEG
52089: PUSH
52090: LD_INT 1
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 3
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 2
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52181: LD_ADDR_VAR 0 24
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 0
52198: PUSH
52199: LD_INT 1
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 1
52262: NEG
52263: PUSH
52264: LD_INT 2
52266: NEG
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: PUSH
52297: LD_INT 0
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 2
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: LD_INT 2
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 2
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 2
52395: NEG
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: PUSH
52404: LD_INT 1
52406: NEG
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 3
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: LIST
52451: LIST
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52457: LD_ADDR_VAR 0 25
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 0
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 1
52495: PUSH
52496: LD_INT 1
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 0
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: NEG
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 1
52538: NEG
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 0
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: EMPTY
52587: LIST
52588: LIST
52589: PUSH
52590: LD_INT 2
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 2
52633: NEG
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: NEG
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 2
52656: NEG
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 3
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 3
52678: PUSH
52679: LD_INT 2
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 3
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 3
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: LIST
52717: LIST
52718: LIST
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52731: LD_ADDR_VAR 0 26
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: LD_INT 0
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: LD_INT 1
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 1
52812: NEG
52813: PUSH
52814: LD_INT 2
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 2
52846: PUSH
52847: LD_INT 0
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 2
52866: PUSH
52867: LD_INT 2
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 2
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 0
52886: PUSH
52887: LD_INT 2
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: NEG
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 2
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: NEG
52931: PUSH
52932: LD_INT 2
52934: NEG
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: PUSH
52943: LD_INT 3
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 3
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53007: LD_ADDR_VAR 0 27
53011: PUSH
53012: LD_INT 0
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: PUSH
53036: LD_INT 0
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: LD_INT 1
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 0
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: NEG
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 0
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: NEG
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: LD_INT 1
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 2
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 2
53206: NEG
53207: PUSH
53208: LD_INT 2
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 2
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 1
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 3
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 3
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: LIST
53270: LIST
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: LIST
53278: LIST
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53287: LD_ADDR_VAR 0 28
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: LD_INT 1
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 1
53368: NEG
53369: PUSH
53370: LD_INT 2
53372: NEG
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 0
53380: PUSH
53381: LD_INT 2
53383: NEG
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: LD_INT 0
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 2
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: LD_INT 2
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 2
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: LD_INT 2
53490: NEG
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: LD_INT 3
53502: NEG
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: LD_INT 3
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 3
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: NEG
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 3
53534: NEG
53535: PUSH
53536: LD_INT 2
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53569: LD_ADDR_VAR 0 29
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 0
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 1
53589: NEG
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 1
53597: PUSH
53598: LD_INT 0
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: NEG
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: LD_INT 2
53665: NEG
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 2
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 1
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 2
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: NEG
53760: PUSH
53761: LD_INT 3
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 1
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 3
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 3
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53848: LD_ADDR_VAR 0 30
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: LD_INT 2
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 2
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54126: LD_ADDR_VAR 0 31
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 2
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 2
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: PUSH
54251: LD_INT 2
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 2
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 2
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 2
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: NEG
54316: PUSH
54317: LD_INT 3
54319: NEG
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 3
54338: PUSH
54339: LD_INT 1
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 3
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: NEG
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 3
54369: NEG
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54404: LD_ADDR_VAR 0 32
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 0
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 0
54452: PUSH
54453: LD_INT 1
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 0
54466: PUSH
54467: EMPTY
54468: LIST
54469: LIST
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: LD_INT 1
54477: NEG
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 1
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 2
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 2
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 1
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: LD_INT 0
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: NEG
54582: PUSH
54583: LD_INT 1
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: NEG
54594: PUSH
54595: LD_INT 3
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 3
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 3
54647: NEG
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54682: LD_ADDR_VAR 0 33
54686: PUSH
54687: LD_INT 0
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 0
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 1
54740: NEG
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 1
54751: NEG
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 1
54763: NEG
54764: PUSH
54765: LD_INT 2
54767: NEG
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 2
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 1
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: PUSH
54807: LD_INT 2
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: NEG
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 2
54848: NEG
54849: PUSH
54850: LD_INT 1
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 2
54860: NEG
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: NEG
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 2
54884: PUSH
54885: LD_INT 1
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 1
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: NEG
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: NEG
54927: PUSH
54928: LD_INT 2
54930: NEG
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54961: LD_ADDR_VAR 0 34
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: LD_INT 0
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 1
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: NEG
55020: PUSH
55021: LD_INT 0
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 1
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: LD_INT 2
55046: NEG
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 2
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: LD_INT 0
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 2
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 2
55167: NEG
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 3
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: LD_INT 3
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 3
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55241: LD_ADDR_VAR 0 35
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: NEG
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: NEG
55311: PUSH
55312: LD_INT 1
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 2
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55353: LD_ADDR_VAR 0 36
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 0
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 0
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: NEG
55435: PUSH
55436: LD_INT 2
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: LIST
55462: LIST
55463: LIST
55464: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55465: LD_ADDR_VAR 0 37
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 1
55503: PUSH
55504: LD_INT 1
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 0
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 1
55534: NEG
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55577: LD_ADDR_VAR 0 38
55581: PUSH
55582: LD_INT 0
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: LD_INT 1
55628: PUSH
55629: EMPTY
55630: LIST
55631: LIST
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: LD_INT 0
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: LD_INT 1
55650: NEG
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 2
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 2
55668: NEG
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55689: LD_ADDR_VAR 0 39
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 0
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 0
55706: PUSH
55707: LD_INT 1
55709: NEG
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 1
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: LD_INT 1
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 1
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: NEG
55771: PUSH
55772: LD_INT 2
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55801: LD_ADDR_VAR 0 40
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: LD_INT 0
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 1
55829: PUSH
55830: LD_INT 0
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: LD_INT 1
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 1
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55913: LD_ADDR_VAR 0 41
55917: PUSH
55918: LD_INT 0
55920: PUSH
55921: LD_INT 0
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: LD_INT 1
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 1
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: EMPTY
55946: LIST
55947: LIST
55948: PUSH
55949: LD_INT 1
55951: PUSH
55952: LD_INT 1
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: LD_INT 1
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 0
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 2
56068: NEG
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: LD_INT 3
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: LD_INT 1
56118: NEG
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 3
56146: PUSH
56147: LD_INT 2
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 3
56156: PUSH
56157: LD_INT 3
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 2
56166: PUSH
56167: LD_INT 3
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 1
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: LD_INT 0
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: NEG
56199: PUSH
56200: LD_INT 1
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 3
56210: NEG
56211: PUSH
56212: LD_INT 2
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: LD_INT 3
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56263: LD_ADDR_VAR 0 42
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 0
56280: PUSH
56281: LD_INT 1
56283: NEG
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 0
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: LD_INT 1
56370: NEG
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: NEG
56454: PUSH
56455: LD_INT 3
56457: NEG
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: LD_INT 3
56469: NEG
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 3
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: PUSH
56507: LD_INT 3
56509: PUSH
56510: LD_INT 3
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: PUSH
56520: LD_INT 3
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 3
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 3
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 3
56560: NEG
56561: PUSH
56562: LD_INT 2
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56613: LD_ADDR_VAR 0 43
56617: PUSH
56618: LD_INT 0
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: NEG
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 2
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: LD_INT 2
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 0
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: LD_INT 1
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 0
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 3
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: EMPTY
56862: LIST
56863: LIST
56864: PUSH
56865: LD_INT 1
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: LD_INT 3
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 2
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 3
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 3
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56961: LD_ADDR_VAR 0 44
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 0
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 0
56978: PUSH
56979: LD_INT 1
56981: NEG
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 1
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 1
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: EMPTY
57014: LIST
57015: LIST
57016: PUSH
57017: LD_INT 1
57019: NEG
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: LD_INT 2
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 1
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 2
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: LD_INT 2
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: LD_INT 2
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 2
57116: NEG
57117: PUSH
57118: LD_INT 0
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: NEG
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 2
57139: NEG
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 2
57151: NEG
57152: PUSH
57153: LD_INT 3
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 3
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 2
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: PUSH
57202: LD_INT 3
57204: PUSH
57205: LD_INT 3
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 3
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 3
57235: NEG
57236: PUSH
57237: LD_INT 0
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: PUSH
57244: LD_INT 3
57246: NEG
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 3
57258: NEG
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 3
57270: NEG
57271: PUSH
57272: LD_INT 3
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57311: LD_ADDR_VAR 0 45
57315: PUSH
57316: LD_INT 0
57318: PUSH
57319: LD_INT 0
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 0
57328: PUSH
57329: LD_INT 1
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 1
57349: PUSH
57350: LD_INT 1
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 0
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: PUSH
57367: LD_INT 1
57369: NEG
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 1
57380: NEG
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 1
57392: NEG
57393: PUSH
57394: LD_INT 2
57396: NEG
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 0
57404: PUSH
57405: LD_INT 2
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: LD_INT 1
57418: NEG
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 2
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 1
57446: PUSH
57447: LD_INT 2
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 2
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 1
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 2
57489: NEG
57490: PUSH
57491: LD_INT 2
57493: NEG
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 2
57501: NEG
57502: PUSH
57503: LD_INT 3
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 3
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 3
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 3
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 3
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 2
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: LD_INT 2
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57661: LD_ADDR_VAR 0 46
57665: PUSH
57666: LD_INT 0
57668: PUSH
57669: LD_INT 0
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 1
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: NEG
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 1
57730: NEG
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 2
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: LD_INT 2
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 1
57768: NEG
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: PUSH
57797: LD_INT 2
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 2
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: NEG
57817: PUSH
57818: LD_INT 1
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 0
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: NEG
57851: PUSH
57852: LD_INT 3
57854: NEG
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 3
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 2
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 1
57887: NEG
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 3
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 2
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 3
57957: NEG
57958: PUSH
57959: LD_INT 0
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 3
57968: NEG
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58009: LD_ADDR_VAR 0 47
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: LD_INT 0
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 0
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 0
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 1
58047: PUSH
58048: LD_INT 1
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 0
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 1
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 0
58102: PUSH
58103: LD_INT 2
58105: NEG
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 1
58116: NEG
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58160: LD_ADDR_VAR 0 48
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 0
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 0
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 0
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: NEG
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: LD_INT 1
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 0
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: PUSH
58265: LD_INT 1
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58307: LD_ADDR_VAR 0 49
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 0
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 1
58365: NEG
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 1
58376: NEG
58377: PUSH
58378: LD_INT 1
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 1
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: PUSH
58410: LD_INT 1
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: EMPTY
58434: LIST
58435: LIST
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58451: LD_ADDR_VAR 0 50
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 0
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 1
58471: NEG
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 0
58499: PUSH
58500: LD_INT 1
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: LD_INT 1
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 2
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 2
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: LD_INT 0
58562: PUSH
58563: LD_INT 2
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58595: LD_ADDR_VAR 0 51
58599: PUSH
58600: LD_INT 0
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: LD_INT 1
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 1
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: NEG
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 1
58664: NEG
58665: PUSH
58666: LD_INT 1
58668: NEG
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 0
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: LD_INT 1
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 2
58718: NEG
58719: PUSH
58720: LD_INT 1
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58742: LD_ADDR_VAR 0 52
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: PUSH
58781: LD_INT 1
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 0
58790: PUSH
58791: LD_INT 1
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: NEG
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: LD_INT 2
58827: NEG
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: NEG
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 2
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58893: LD_ADDR_VAR 0 53
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 0
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 0
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 1
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: NEG
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: LD_INT 1
58966: NEG
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 1
58974: NEG
58975: PUSH
58976: LD_INT 2
58978: NEG
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 0
58986: PUSH
58987: LD_INT 2
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: LD_INT 1
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: PUSH
59009: LD_INT 0
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: LD_INT 1
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: LD_INT 2
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: LD_INT 2
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 2
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 2
59069: NEG
59070: PUSH
59071: LD_INT 0
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 2
59080: NEG
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 2
59092: NEG
59093: PUSH
59094: LD_INT 2
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59123: LD_ADDR_VAR 0 54
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59353: LD_ADDR_VAR 0 55
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 0
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: LD_INT 0
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: LD_INT 1
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: PUSH
59399: LD_INT 0
59401: PUSH
59402: LD_INT 1
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: NEG
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: NEG
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: LD_INT 2
59438: NEG
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 2
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 2
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 2
59488: PUSH
59489: LD_INT 2
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 1
59518: NEG
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 2
59529: NEG
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 2
59540: NEG
59541: PUSH
59542: LD_INT 1
59544: NEG
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 2
59552: NEG
59553: PUSH
59554: LD_INT 2
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59583: LD_ADDR_VAR 0 56
59587: PUSH
59588: LD_INT 0
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 1
59621: PUSH
59622: LD_INT 1
59624: PUSH
59625: EMPTY
59626: LIST
59627: LIST
59628: PUSH
59629: LD_INT 0
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 1
59652: NEG
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: LD_INT 2
59668: NEG
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 0
59676: PUSH
59677: LD_INT 2
59679: NEG
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: PUSH
59688: LD_INT 1
59690: NEG
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 2
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 2
59708: PUSH
59709: LD_INT 1
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 2
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 1
59728: PUSH
59729: LD_INT 2
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 2
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 2
59759: NEG
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: LD_INT 1
59774: NEG
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 2
59782: NEG
59783: PUSH
59784: LD_INT 2
59786: NEG
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59813: LD_ADDR_VAR 0 57
59817: PUSH
59818: LD_INT 0
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: LD_INT 0
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: PUSH
59852: LD_INT 1
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: LD_INT 0
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 2
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 2
59938: PUSH
59939: LD_INT 1
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 2
59948: PUSH
59949: LD_INT 2
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 1
59978: NEG
59979: PUSH
59980: LD_INT 1
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 2
59989: NEG
59990: PUSH
59991: LD_INT 0
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: LD_INT 2
60000: NEG
60001: PUSH
60002: LD_INT 1
60004: NEG
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: LD_INT 2
60016: NEG
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60043: LD_ADDR_VAR 0 58
60047: PUSH
60048: LD_INT 0
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 0
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: EMPTY
60066: LIST
60067: LIST
60068: PUSH
60069: LD_INT 1
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: LD_INT 1
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: LD_INT 0
60091: PUSH
60092: LD_INT 1
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: NEG
60102: PUSH
60103: LD_INT 0
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 1
60112: NEG
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: LD_INT 2
60128: NEG
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 0
60136: PUSH
60137: LD_INT 2
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 2
60158: PUSH
60159: LD_INT 0
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 2
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 2
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 0
60198: PUSH
60199: LD_INT 2
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 1
60208: NEG
60209: PUSH
60210: LD_INT 1
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: NEG
60231: PUSH
60232: LD_INT 1
60234: NEG
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PUSH
60240: LD_INT 2
60242: NEG
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60273: LD_ADDR_VAR 0 59
60277: PUSH
60278: LD_INT 0
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 1
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 1
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 0
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 1
60342: NEG
60343: PUSH
60344: LD_INT 1
60346: NEG
60347: PUSH
60348: EMPTY
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60361: LD_ADDR_VAR 0 60
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: LD_INT 0
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: EMPTY
60384: LIST
60385: LIST
60386: PUSH
60387: LD_INT 1
60389: PUSH
60390: LD_INT 0
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: LD_INT 1
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 0
60409: PUSH
60410: LD_INT 1
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 1
60430: NEG
60431: PUSH
60432: LD_INT 1
60434: NEG
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60449: LD_ADDR_VAR 0 61
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: PUSH
60464: LD_INT 0
60466: PUSH
60467: LD_INT 1
60469: NEG
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 1
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: LD_INT 1
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 0
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 1
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 1
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60537: LD_ADDR_VAR 0 62
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: LD_INT 0
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 1
60557: NEG
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: LD_INT 1
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 0
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 1
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 1
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60625: LD_ADDR_VAR 0 63
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 0
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: LD_INT 0
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: LD_INT 1
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 0
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 1
60683: NEG
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: LIST
60712: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60713: LD_ADDR_VAR 0 64
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: EMPTY
60725: LIST
60726: LIST
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 1
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 1
60771: NEG
60772: PUSH
60773: LD_INT 0
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 1
60782: NEG
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: ST_TO_ADDR
// end ; 1 :
60801: GO 66698
60803: LD_INT 1
60805: DOUBLE
60806: EQUAL
60807: IFTRUE 60811
60809: GO 63434
60811: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60812: LD_ADDR_VAR 0 11
60816: PUSH
60817: LD_INT 1
60819: NEG
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 0
60831: PUSH
60832: LD_INT 3
60834: NEG
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: LIST
60855: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60856: LD_ADDR_VAR 0 12
60860: PUSH
60861: LD_INT 2
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 3
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60897: LD_ADDR_VAR 0 13
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 2
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 3
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 2
60924: PUSH
60925: LD_INT 3
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60937: LD_ADDR_VAR 0 14
60941: PUSH
60942: LD_INT 1
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 2
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: LIST
60977: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60978: LD_ADDR_VAR 0 15
60982: PUSH
60983: LD_INT 2
60985: NEG
60986: PUSH
60987: LD_INT 1
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61022: LD_ADDR_VAR 0 16
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: LD_INT 3
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 3
61041: NEG
61042: PUSH
61043: LD_INT 2
61045: NEG
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: LD_INT 3
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61068: LD_ADDR_VAR 0 17
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: LD_INT 3
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: PUSH
61099: LD_INT 2
61101: NEG
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: LIST
61111: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61112: LD_ADDR_VAR 0 18
61116: PUSH
61117: LD_INT 2
61119: PUSH
61120: LD_INT 1
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 3
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: PUSH
61141: LD_INT 1
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61153: LD_ADDR_VAR 0 19
61157: PUSH
61158: LD_INT 3
61160: PUSH
61161: LD_INT 2
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 3
61170: PUSH
61171: LD_INT 3
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 2
61180: PUSH
61181: LD_INT 3
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: LIST
61192: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61193: LD_ADDR_VAR 0 20
61197: PUSH
61198: LD_INT 1
61200: PUSH
61201: LD_INT 3
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 0
61210: PUSH
61211: LD_INT 3
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 1
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61234: LD_ADDR_VAR 0 21
61238: PUSH
61239: LD_INT 2
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: LD_INT 1
61267: NEG
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61278: LD_ADDR_VAR 0 22
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 3
61289: NEG
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: PUSH
61295: LD_INT 3
61297: NEG
61298: PUSH
61299: LD_INT 2
61301: NEG
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: LD_INT 3
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61324: LD_ADDR_VAR 0 23
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: LD_INT 1
61342: NEG
61343: PUSH
61344: LD_INT 4
61346: NEG
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: PUSH
61355: LD_INT 3
61357: NEG
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: EMPTY
61364: LIST
61365: LIST
61366: LIST
61367: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61368: LD_ADDR_VAR 0 24
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 4
61396: PUSH
61397: LD_INT 1
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61409: LD_ADDR_VAR 0 25
61413: PUSH
61414: LD_INT 3
61416: PUSH
61417: LD_INT 3
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: LD_INT 3
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: PUSH
61437: LD_INT 4
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: LIST
61448: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61449: LD_ADDR_VAR 0 26
61453: PUSH
61454: LD_INT 0
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: NEG
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61490: LD_ADDR_VAR 0 27
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 4
61519: NEG
61520: PUSH
61521: LD_INT 1
61523: NEG
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61534: LD_ADDR_VAR 0 28
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: LD_INT 4
61557: NEG
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: NEG
61566: PUSH
61567: LD_INT 3
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61580: LD_ADDR_VAR 0 29
61584: PUSH
61585: LD_INT 1
61587: NEG
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 2
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: NEG
61622: PUSH
61623: LD_INT 4
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 1
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: PUSH
61657: LD_INT 5
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 0
61667: PUSH
61668: LD_INT 5
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: LD_INT 1
61678: PUSH
61679: LD_INT 4
61681: NEG
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 1
61689: NEG
61690: PUSH
61691: LD_INT 6
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 0
61701: PUSH
61702: LD_INT 6
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 5
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61735: LD_ADDR_VAR 0 30
61739: PUSH
61740: LD_INT 2
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: LD_INT 3
61753: PUSH
61754: LD_INT 0
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 3
61763: PUSH
61764: LD_INT 1
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 3
61773: PUSH
61774: LD_INT 1
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 4
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 4
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 4
61804: PUSH
61805: LD_INT 1
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 5
61815: PUSH
61816: LD_INT 0
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 5
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 5
61835: PUSH
61836: LD_INT 1
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: LD_INT 6
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 6
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: EMPTY
61861: LIST
61862: LIST
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61878: LD_ADDR_VAR 0 31
61882: PUSH
61883: LD_INT 3
61885: PUSH
61886: LD_INT 2
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 3
61895: PUSH
61896: LD_INT 3
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 2
61905: PUSH
61906: LD_INT 3
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 4
61915: PUSH
61916: LD_INT 3
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 4
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 5
61945: PUSH
61946: LD_INT 4
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 5
61955: PUSH
61956: LD_INT 5
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 6
61975: PUSH
61976: LD_INT 5
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 6
61985: PUSH
61986: LD_INT 6
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 5
61995: PUSH
61996: LD_INT 6
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62017: LD_ADDR_VAR 0 32
62021: PUSH
62022: LD_INT 1
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 1
62044: NEG
62045: PUSH
62046: LD_INT 2
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 1
62055: PUSH
62056: LD_INT 4
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: LD_INT 4
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: NEG
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 1
62086: PUSH
62087: LD_INT 5
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: LD_INT 5
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: LD_INT 4
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: PUSH
62118: LD_INT 6
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: LD_INT 6
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: LD_INT 5
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62160: LD_ADDR_VAR 0 33
62164: PUSH
62165: LD_INT 2
62167: NEG
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 3
62178: NEG
62179: PUSH
62180: LD_INT 0
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: EMPTY
62196: LIST
62197: LIST
62198: PUSH
62199: LD_INT 3
62201: NEG
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 4
62212: NEG
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 4
62223: NEG
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 4
62235: NEG
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 5
62246: NEG
62247: PUSH
62248: LD_INT 0
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: LD_INT 5
62257: NEG
62258: PUSH
62259: LD_INT 1
62261: NEG
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 5
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 6
62280: NEG
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 6
62291: NEG
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62315: LD_ADDR_VAR 0 34
62319: PUSH
62320: LD_INT 2
62322: NEG
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 3
62334: NEG
62335: PUSH
62336: LD_INT 2
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 3
62346: NEG
62347: PUSH
62348: LD_INT 3
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 3
62358: NEG
62359: PUSH
62360: LD_INT 4
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 4
62370: NEG
62371: PUSH
62372: LD_INT 3
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 4
62382: NEG
62383: PUSH
62384: LD_INT 4
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 4
62394: NEG
62395: PUSH
62396: LD_INT 5
62398: NEG
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 5
62406: NEG
62407: PUSH
62408: LD_INT 4
62410: NEG
62411: PUSH
62412: EMPTY
62413: LIST
62414: LIST
62415: PUSH
62416: LD_INT 5
62418: NEG
62419: PUSH
62420: LD_INT 5
62422: NEG
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 5
62430: NEG
62431: PUSH
62432: LD_INT 6
62434: NEG
62435: PUSH
62436: EMPTY
62437: LIST
62438: LIST
62439: PUSH
62440: LD_INT 6
62442: NEG
62443: PUSH
62444: LD_INT 5
62446: NEG
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 6
62454: NEG
62455: PUSH
62456: LD_INT 6
62458: NEG
62459: PUSH
62460: EMPTY
62461: LIST
62462: LIST
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62478: LD_ADDR_VAR 0 41
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: LD_INT 3
62500: NEG
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: LIST
62521: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62522: LD_ADDR_VAR 0 42
62526: PUSH
62527: LD_INT 2
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 3
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62563: LD_ADDR_VAR 0 43
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 2
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 3
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 3
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62603: LD_ADDR_VAR 0 44
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: PUSH
62621: LD_INT 3
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 1
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62644: LD_ADDR_VAR 0 45
62648: PUSH
62649: LD_INT 2
62651: NEG
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 2
62662: NEG
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: NEG
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62688: LD_ADDR_VAR 0 46
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: LD_INT 2
62699: NEG
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 2
62707: NEG
62708: PUSH
62709: LD_INT 3
62711: NEG
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 2
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62734: LD_ADDR_VAR 0 47
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62767: LD_ADDR_VAR 0 48
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: LD_INT 2
62777: NEG
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 2
62785: PUSH
62786: LD_INT 1
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62798: LD_ADDR_VAR 0 49
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 1
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62827: LD_ADDR_VAR 0 50
62831: PUSH
62832: LD_INT 2
62834: PUSH
62835: LD_INT 3
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: LD_INT 3
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62856: LD_ADDR_VAR 0 51
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PUSH
62876: LD_INT 1
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62887: LD_ADDR_VAR 0 52
62891: PUSH
62892: LD_INT 3
62894: NEG
62895: PUSH
62896: LD_INT 1
62898: NEG
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 3
62906: NEG
62907: PUSH
62908: LD_INT 2
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62920: LD_ADDR_VAR 0 53
62924: PUSH
62925: LD_INT 1
62927: NEG
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 0
62939: PUSH
62940: LD_INT 3
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: LIST
62963: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62964: LD_ADDR_VAR 0 54
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 3
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63005: LD_ADDR_VAR 0 55
63009: PUSH
63010: LD_INT 3
63012: PUSH
63013: LD_INT 2
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 3
63022: PUSH
63023: LD_INT 3
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: LD_INT 3
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: LIST
63044: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63045: LD_ADDR_VAR 0 56
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 0
63062: PUSH
63063: LD_INT 3
63065: PUSH
63066: EMPTY
63067: LIST
63068: LIST
63069: PUSH
63070: LD_INT 1
63072: NEG
63073: PUSH
63074: LD_INT 2
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: LIST
63085: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63086: LD_ADDR_VAR 0 57
63090: PUSH
63091: LD_INT 2
63093: NEG
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 3
63104: NEG
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63130: LD_ADDR_VAR 0 58
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: LD_INT 3
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: NEG
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: LD_INT 3
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63176: LD_ADDR_VAR 0 59
63180: PUSH
63181: LD_INT 1
63183: NEG
63184: PUSH
63185: LD_INT 2
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 2
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: PUSH
63207: LD_INT 1
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: LIST
63219: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63220: LD_ADDR_VAR 0 60
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 1
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63261: LD_ADDR_VAR 0 61
63265: PUSH
63266: LD_INT 2
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: PUSH
63279: LD_INT 2
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 2
63291: PUSH
63292: EMPTY
63293: LIST
63294: LIST
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: LIST
63300: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63301: LD_ADDR_VAR 0 62
63305: PUSH
63306: LD_INT 1
63308: PUSH
63309: LD_INT 2
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 0
63318: PUSH
63319: LD_INT 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 1
63328: NEG
63329: PUSH
63330: LD_INT 1
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: LIST
63341: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63342: LD_ADDR_VAR 0 63
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 1
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63386: LD_ADDR_VAR 0 64
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: LD_INT 2
63397: NEG
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// end ; 2 :
63432: GO 66698
63434: LD_INT 2
63436: DOUBLE
63437: EQUAL
63438: IFTRUE 63442
63440: GO 66697
63442: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63443: LD_ADDR_VAR 0 29
63447: PUSH
63448: LD_INT 4
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 4
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 5
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 5
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 4
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 3
63501: PUSH
63502: LD_INT 0
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: PUSH
63509: LD_INT 3
63511: PUSH
63512: LD_INT 1
63514: NEG
63515: PUSH
63516: EMPTY
63517: LIST
63518: LIST
63519: PUSH
63520: LD_INT 3
63522: PUSH
63523: LD_INT 2
63525: NEG
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: PUSH
63531: LD_INT 5
63533: PUSH
63534: LD_INT 2
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 3
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 3
63553: PUSH
63554: LD_INT 2
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 4
63563: PUSH
63564: LD_INT 3
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 4
63573: PUSH
63574: LD_INT 4
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 3
63583: PUSH
63584: LD_INT 4
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: PUSH
63601: LD_INT 2
63603: PUSH
63604: LD_INT 2
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 4
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: LD_INT 2
63623: PUSH
63624: LD_INT 4
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 0
63633: PUSH
63634: LD_INT 4
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: LD_INT 3
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: LD_INT 5
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 0
63673: PUSH
63674: LD_INT 5
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: NEG
63684: PUSH
63685: LD_INT 4
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 1
63694: NEG
63695: PUSH
63696: LD_INT 3
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 3
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 3
63726: NEG
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: NEG
63738: PUSH
63739: LD_INT 1
63741: NEG
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 3
63771: NEG
63772: PUSH
63773: LD_INT 1
63775: PUSH
63776: EMPTY
63777: LIST
63778: LIST
63779: PUSH
63780: LD_INT 4
63782: NEG
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 4
63793: NEG
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 4
63805: NEG
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 2
63817: NEG
63818: PUSH
63819: LD_INT 2
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: LD_INT 4
63832: NEG
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: PUSH
63838: LD_INT 4
63840: NEG
63841: PUSH
63842: LD_INT 5
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 3
63852: NEG
63853: PUSH
63854: LD_INT 4
63856: NEG
63857: PUSH
63858: EMPTY
63859: LIST
63860: LIST
63861: PUSH
63862: LD_INT 3
63864: NEG
63865: PUSH
63866: LD_INT 3
63868: NEG
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 4
63876: NEG
63877: PUSH
63878: LD_INT 3
63880: NEG
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 5
63888: NEG
63889: PUSH
63890: LD_INT 4
63892: NEG
63893: PUSH
63894: EMPTY
63895: LIST
63896: LIST
63897: PUSH
63898: LD_INT 5
63900: NEG
63901: PUSH
63902: LD_INT 5
63904: NEG
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 3
63912: NEG
63913: PUSH
63914: LD_INT 5
63916: NEG
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 5
63924: NEG
63925: PUSH
63926: LD_INT 3
63928: NEG
63929: PUSH
63930: EMPTY
63931: LIST
63932: LIST
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63981: LD_ADDR_VAR 0 30
63985: PUSH
63986: LD_INT 4
63988: PUSH
63989: LD_INT 4
63991: PUSH
63992: EMPTY
63993: LIST
63994: LIST
63995: PUSH
63996: LD_INT 4
63998: PUSH
63999: LD_INT 3
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: PUSH
64006: LD_INT 5
64008: PUSH
64009: LD_INT 4
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: PUSH
64019: LD_INT 5
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 4
64028: PUSH
64029: LD_INT 5
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 3
64038: PUSH
64039: LD_INT 4
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: PUSH
64049: LD_INT 3
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 5
64058: PUSH
64059: LD_INT 3
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 5
64071: PUSH
64072: EMPTY
64073: LIST
64074: LIST
64075: PUSH
64076: LD_INT 0
64078: PUSH
64079: LD_INT 3
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 0
64088: PUSH
64089: LD_INT 2
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: PUSH
64099: LD_INT 3
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: LD_INT 4
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: LD_INT 4
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 1
64128: NEG
64129: PUSH
64130: LD_INT 3
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 1
64139: NEG
64140: PUSH
64141: LD_INT 2
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 2
64150: PUSH
64151: LD_INT 4
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 2
64164: PUSH
64165: EMPTY
64166: LIST
64167: LIST
64168: PUSH
64169: LD_INT 4
64171: NEG
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: NEG
64183: PUSH
64184: LD_INT 1
64186: NEG
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 3
64194: NEG
64195: PUSH
64196: LD_INT 0
64198: PUSH
64199: EMPTY
64200: LIST
64201: LIST
64202: PUSH
64203: LD_INT 3
64205: NEG
64206: PUSH
64207: LD_INT 1
64209: PUSH
64210: EMPTY
64211: LIST
64212: LIST
64213: PUSH
64214: LD_INT 4
64216: NEG
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: PUSH
64225: LD_INT 5
64227: NEG
64228: PUSH
64229: LD_INT 0
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 5
64238: NEG
64239: PUSH
64240: LD_INT 1
64242: NEG
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 5
64250: NEG
64251: PUSH
64252: LD_INT 2
64254: NEG
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 3
64262: NEG
64263: PUSH
64264: LD_INT 2
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 3
64273: NEG
64274: PUSH
64275: LD_INT 3
64277: NEG
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: LD_INT 4
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: NEG
64298: PUSH
64299: LD_INT 3
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 2
64309: NEG
64310: PUSH
64311: LD_INT 2
64313: NEG
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 3
64321: NEG
64322: PUSH
64323: LD_INT 2
64325: NEG
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: LD_INT 4
64333: NEG
64334: PUSH
64335: LD_INT 3
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 4
64345: NEG
64346: PUSH
64347: LD_INT 4
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 2
64357: NEG
64358: PUSH
64359: LD_INT 4
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 4
64369: NEG
64370: PUSH
64371: LD_INT 2
64373: NEG
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 0
64381: PUSH
64382: LD_INT 4
64384: NEG
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: LD_INT 5
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: PUSH
64404: LD_INT 4
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 1
64414: PUSH
64415: LD_INT 3
64417: NEG
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: LD_INT 0
64425: PUSH
64426: LD_INT 3
64428: NEG
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 1
64436: NEG
64437: PUSH
64438: LD_INT 4
64440: NEG
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 5
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 2
64460: PUSH
64461: LD_INT 3
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 2
64471: NEG
64472: PUSH
64473: LD_INT 5
64475: NEG
64476: PUSH
64477: EMPTY
64478: LIST
64479: LIST
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: LIST
64489: LIST
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64528: LD_ADDR_VAR 0 31
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 4
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 0
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: LD_INT 1
64555: PUSH
64556: LD_INT 4
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: LD_INT 5
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: LD_INT 5
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: NEG
64586: PUSH
64587: LD_INT 4
64589: PUSH
64590: EMPTY
64591: LIST
64592: LIST
64593: PUSH
64594: LD_INT 1
64596: NEG
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 2
64607: PUSH
64608: LD_INT 5
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 2
64617: NEG
64618: PUSH
64619: LD_INT 3
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 3
64628: NEG
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: LD_INT 3
64639: NEG
64640: PUSH
64641: LD_INT 1
64643: NEG
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 2
64651: NEG
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 2
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 3
64673: NEG
64674: PUSH
64675: LD_INT 1
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 4
64684: NEG
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 4
64695: NEG
64696: PUSH
64697: LD_INT 1
64699: NEG
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 4
64707: NEG
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 2
64719: NEG
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 4
64730: NEG
64731: PUSH
64732: LD_INT 4
64734: NEG
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 4
64742: NEG
64743: PUSH
64744: LD_INT 5
64746: NEG
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: NEG
64755: PUSH
64756: LD_INT 4
64758: NEG
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 3
64766: NEG
64767: PUSH
64768: LD_INT 3
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 4
64778: NEG
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 5
64790: NEG
64791: PUSH
64792: LD_INT 4
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 5
64802: NEG
64803: PUSH
64804: LD_INT 5
64806: NEG
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: NEG
64815: PUSH
64816: LD_INT 5
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 5
64826: NEG
64827: PUSH
64828: LD_INT 3
64830: NEG
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 0
64838: PUSH
64839: LD_INT 3
64841: NEG
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: LD_INT 4
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 1
64860: PUSH
64861: LD_INT 3
64863: NEG
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 1
64871: PUSH
64872: LD_INT 2
64874: NEG
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 0
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 1
64905: NEG
64906: PUSH
64907: LD_INT 4
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 2
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 2
64928: NEG
64929: PUSH
64930: LD_INT 4
64932: NEG
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 4
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 5
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 5
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 4
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 3
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: LD_INT 3
65001: PUSH
65002: LD_INT 1
65004: NEG
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: LD_INT 2
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 5
65023: PUSH
65024: LD_INT 2
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: LIST
65039: LIST
65040: LIST
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65078: LD_ADDR_VAR 0 32
65082: PUSH
65083: LD_INT 4
65085: NEG
65086: PUSH
65087: LD_INT 0
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 4
65096: NEG
65097: PUSH
65098: LD_INT 1
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 3
65108: NEG
65109: PUSH
65110: LD_INT 0
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 3
65119: NEG
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: PUSH
65128: LD_INT 4
65130: NEG
65131: PUSH
65132: LD_INT 1
65134: PUSH
65135: EMPTY
65136: LIST
65137: LIST
65138: PUSH
65139: LD_INT 5
65141: NEG
65142: PUSH
65143: LD_INT 0
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 5
65152: NEG
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 5
65164: NEG
65165: PUSH
65166: LD_INT 2
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 3
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 3
65187: NEG
65188: PUSH
65189: LD_INT 3
65191: NEG
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 3
65199: NEG
65200: PUSH
65201: LD_INT 4
65203: NEG
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 2
65211: NEG
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 2
65223: NEG
65224: PUSH
65225: LD_INT 2
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 3
65235: NEG
65236: PUSH
65237: LD_INT 2
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 4
65247: NEG
65248: PUSH
65249: LD_INT 3
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 4
65259: NEG
65260: PUSH
65261: LD_INT 4
65263: NEG
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 2
65271: NEG
65272: PUSH
65273: LD_INT 4
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: LD_INT 2
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 4
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 0
65306: PUSH
65307: LD_INT 5
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 1
65317: PUSH
65318: LD_INT 4
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: PUSH
65329: LD_INT 3
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 3
65342: NEG
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 4
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: LD_INT 5
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 2
65385: NEG
65386: PUSH
65387: LD_INT 5
65389: NEG
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 3
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 1
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: LD_INT 4
65418: PUSH
65419: LD_INT 0
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 4
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 2
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 4
65480: PUSH
65481: LD_INT 2
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 4
65490: PUSH
65491: LD_INT 4
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: LD_INT 3
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 5
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 5
65520: PUSH
65521: LD_INT 5
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: LD_INT 5
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 3
65540: PUSH
65541: LD_INT 4
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 3
65550: PUSH
65551: LD_INT 3
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 5
65560: PUSH
65561: LD_INT 3
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 3
65570: PUSH
65571: LD_INT 5
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: LIST
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65625: LD_ADDR_VAR 0 33
65629: PUSH
65630: LD_INT 4
65632: NEG
65633: PUSH
65634: LD_INT 4
65636: NEG
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: PUSH
65642: LD_INT 4
65644: NEG
65645: PUSH
65646: LD_INT 5
65648: NEG
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 3
65656: NEG
65657: PUSH
65658: LD_INT 4
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: LD_INT 3
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 4
65680: NEG
65681: PUSH
65682: LD_INT 3
65684: NEG
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 5
65692: NEG
65693: PUSH
65694: LD_INT 4
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 5
65704: NEG
65705: PUSH
65706: LD_INT 5
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: NEG
65717: PUSH
65718: LD_INT 5
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 5
65728: NEG
65729: PUSH
65730: LD_INT 3
65732: NEG
65733: PUSH
65734: EMPTY
65735: LIST
65736: LIST
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: LD_INT 3
65743: NEG
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PUSH
65749: LD_INT 0
65751: PUSH
65752: LD_INT 4
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 1
65762: PUSH
65763: LD_INT 3
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: LD_INT 2
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 0
65784: PUSH
65785: LD_INT 2
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: NEG
65796: PUSH
65797: LD_INT 3
65799: NEG
65800: PUSH
65801: EMPTY
65802: LIST
65803: LIST
65804: PUSH
65805: LD_INT 1
65807: NEG
65808: PUSH
65809: LD_INT 4
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 2
65830: NEG
65831: PUSH
65832: LD_INT 4
65834: NEG
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 4
65842: PUSH
65843: LD_INT 0
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 4
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 5
65863: PUSH
65864: LD_INT 0
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 5
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 4
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 3
65893: PUSH
65894: LD_INT 0
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 3
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 3
65914: PUSH
65915: LD_INT 2
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: LD_INT 2
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 3
65935: PUSH
65936: LD_INT 3
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 3
65945: PUSH
65946: LD_INT 2
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 4
65955: PUSH
65956: LD_INT 3
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 4
65965: PUSH
65966: LD_INT 4
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 3
65975: PUSH
65976: LD_INT 4
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 2
65985: PUSH
65986: LD_INT 3
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 2
65995: PUSH
65996: LD_INT 2
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 4
66005: PUSH
66006: LD_INT 2
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: PUSH
66016: LD_INT 4
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 0
66025: PUSH
66026: LD_INT 4
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: LD_INT 3
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: PUSH
66046: LD_INT 4
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 1
66055: PUSH
66056: LD_INT 5
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 0
66065: PUSH
66066: LD_INT 5
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: LD_INT 4
66079: PUSH
66080: EMPTY
66081: LIST
66082: LIST
66083: PUSH
66084: LD_INT 1
66086: NEG
66087: PUSH
66088: LD_INT 3
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: LD_INT 5
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 2
66107: NEG
66108: PUSH
66109: LD_INT 3
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66163: LD_ADDR_VAR 0 34
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 4
66173: NEG
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 5
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 1
66192: PUSH
66193: LD_INT 4
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: LD_INT 3
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: LD_INT 3
66217: NEG
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 4
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 5
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 2
66260: NEG
66261: PUSH
66262: LD_INT 5
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: LD_INT 0
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 3
66282: PUSH
66283: LD_INT 1
66285: NEG
66286: PUSH
66287: EMPTY
66288: LIST
66289: LIST
66290: PUSH
66291: LD_INT 4
66293: PUSH
66294: LD_INT 0
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 4
66303: PUSH
66304: LD_INT 1
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 3
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: EMPTY
66318: LIST
66319: LIST
66320: PUSH
66321: LD_INT 2
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 2
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 4
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 4
66365: PUSH
66366: LD_INT 4
66368: PUSH
66369: EMPTY
66370: LIST
66371: LIST
66372: PUSH
66373: LD_INT 4
66375: PUSH
66376: LD_INT 3
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: PUSH
66383: LD_INT 5
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 5
66395: PUSH
66396: LD_INT 5
66398: PUSH
66399: EMPTY
66400: LIST
66401: LIST
66402: PUSH
66403: LD_INT 4
66405: PUSH
66406: LD_INT 5
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: LD_INT 3
66415: PUSH
66416: LD_INT 4
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: PUSH
66426: LD_INT 3
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 5
66435: PUSH
66436: LD_INT 3
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: PUSH
66446: LD_INT 5
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 0
66465: PUSH
66466: LD_INT 2
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 4
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 4
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 3
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 2
66527: PUSH
66528: LD_INT 4
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 2
66537: NEG
66538: PUSH
66539: LD_INT 2
66541: PUSH
66542: EMPTY
66543: LIST
66544: LIST
66545: PUSH
66546: LD_INT 4
66548: NEG
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 4
66559: NEG
66560: PUSH
66561: LD_INT 1
66563: NEG
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: LD_INT 3
66571: NEG
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 3
66582: NEG
66583: PUSH
66584: LD_INT 1
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 4
66593: NEG
66594: PUSH
66595: LD_INT 1
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 5
66604: NEG
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: LD_INT 5
66615: NEG
66616: PUSH
66617: LD_INT 1
66619: NEG
66620: PUSH
66621: EMPTY
66622: LIST
66623: LIST
66624: PUSH
66625: LD_INT 5
66627: NEG
66628: PUSH
66629: LD_INT 2
66631: NEG
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 3
66639: NEG
66640: PUSH
66641: LD_INT 2
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: LIST
66652: LIST
66653: LIST
66654: LIST
66655: LIST
66656: LIST
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: LIST
66689: LIST
66690: LIST
66691: LIST
66692: LIST
66693: LIST
66694: ST_TO_ADDR
// end ; end ;
66695: GO 66698
66697: POP
// case btype of b_depot , b_warehouse :
66698: LD_VAR 0 1
66702: PUSH
66703: LD_INT 0
66705: DOUBLE
66706: EQUAL
66707: IFTRUE 66717
66709: LD_INT 1
66711: DOUBLE
66712: EQUAL
66713: IFTRUE 66717
66715: GO 66918
66717: POP
// case nation of nation_american :
66718: LD_VAR 0 5
66722: PUSH
66723: LD_INT 1
66725: DOUBLE
66726: EQUAL
66727: IFTRUE 66731
66729: GO 66787
66731: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66732: LD_ADDR_VAR 0 9
66736: PUSH
66737: LD_VAR 0 11
66741: PUSH
66742: LD_VAR 0 12
66746: PUSH
66747: LD_VAR 0 13
66751: PUSH
66752: LD_VAR 0 14
66756: PUSH
66757: LD_VAR 0 15
66761: PUSH
66762: LD_VAR 0 16
66766: PUSH
66767: EMPTY
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: PUSH
66775: LD_VAR 0 4
66779: PUSH
66780: LD_INT 1
66782: PLUS
66783: ARRAY
66784: ST_TO_ADDR
66785: GO 66916
66787: LD_INT 2
66789: DOUBLE
66790: EQUAL
66791: IFTRUE 66795
66793: GO 66851
66795: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66796: LD_ADDR_VAR 0 9
66800: PUSH
66801: LD_VAR 0 17
66805: PUSH
66806: LD_VAR 0 18
66810: PUSH
66811: LD_VAR 0 19
66815: PUSH
66816: LD_VAR 0 20
66820: PUSH
66821: LD_VAR 0 21
66825: PUSH
66826: LD_VAR 0 22
66830: PUSH
66831: EMPTY
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: PUSH
66839: LD_VAR 0 4
66843: PUSH
66844: LD_INT 1
66846: PLUS
66847: ARRAY
66848: ST_TO_ADDR
66849: GO 66916
66851: LD_INT 3
66853: DOUBLE
66854: EQUAL
66855: IFTRUE 66859
66857: GO 66915
66859: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66860: LD_ADDR_VAR 0 9
66864: PUSH
66865: LD_VAR 0 23
66869: PUSH
66870: LD_VAR 0 24
66874: PUSH
66875: LD_VAR 0 25
66879: PUSH
66880: LD_VAR 0 26
66884: PUSH
66885: LD_VAR 0 27
66889: PUSH
66890: LD_VAR 0 28
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: PUSH
66903: LD_VAR 0 4
66907: PUSH
66908: LD_INT 1
66910: PLUS
66911: ARRAY
66912: ST_TO_ADDR
66913: GO 66916
66915: POP
66916: GO 67471
66918: LD_INT 2
66920: DOUBLE
66921: EQUAL
66922: IFTRUE 66932
66924: LD_INT 3
66926: DOUBLE
66927: EQUAL
66928: IFTRUE 66932
66930: GO 66988
66932: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66933: LD_ADDR_VAR 0 9
66937: PUSH
66938: LD_VAR 0 29
66942: PUSH
66943: LD_VAR 0 30
66947: PUSH
66948: LD_VAR 0 31
66952: PUSH
66953: LD_VAR 0 32
66957: PUSH
66958: LD_VAR 0 33
66962: PUSH
66963: LD_VAR 0 34
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: LIST
66974: LIST
66975: PUSH
66976: LD_VAR 0 4
66980: PUSH
66981: LD_INT 1
66983: PLUS
66984: ARRAY
66985: ST_TO_ADDR
66986: GO 67471
66988: LD_INT 16
66990: DOUBLE
66991: EQUAL
66992: IFTRUE 67050
66994: LD_INT 17
66996: DOUBLE
66997: EQUAL
66998: IFTRUE 67050
67000: LD_INT 18
67002: DOUBLE
67003: EQUAL
67004: IFTRUE 67050
67006: LD_INT 19
67008: DOUBLE
67009: EQUAL
67010: IFTRUE 67050
67012: LD_INT 22
67014: DOUBLE
67015: EQUAL
67016: IFTRUE 67050
67018: LD_INT 20
67020: DOUBLE
67021: EQUAL
67022: IFTRUE 67050
67024: LD_INT 21
67026: DOUBLE
67027: EQUAL
67028: IFTRUE 67050
67030: LD_INT 23
67032: DOUBLE
67033: EQUAL
67034: IFTRUE 67050
67036: LD_INT 24
67038: DOUBLE
67039: EQUAL
67040: IFTRUE 67050
67042: LD_INT 25
67044: DOUBLE
67045: EQUAL
67046: IFTRUE 67050
67048: GO 67106
67050: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67051: LD_ADDR_VAR 0 9
67055: PUSH
67056: LD_VAR 0 35
67060: PUSH
67061: LD_VAR 0 36
67065: PUSH
67066: LD_VAR 0 37
67070: PUSH
67071: LD_VAR 0 38
67075: PUSH
67076: LD_VAR 0 39
67080: PUSH
67081: LD_VAR 0 40
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: PUSH
67094: LD_VAR 0 4
67098: PUSH
67099: LD_INT 1
67101: PLUS
67102: ARRAY
67103: ST_TO_ADDR
67104: GO 67471
67106: LD_INT 6
67108: DOUBLE
67109: EQUAL
67110: IFTRUE 67162
67112: LD_INT 7
67114: DOUBLE
67115: EQUAL
67116: IFTRUE 67162
67118: LD_INT 8
67120: DOUBLE
67121: EQUAL
67122: IFTRUE 67162
67124: LD_INT 13
67126: DOUBLE
67127: EQUAL
67128: IFTRUE 67162
67130: LD_INT 12
67132: DOUBLE
67133: EQUAL
67134: IFTRUE 67162
67136: LD_INT 15
67138: DOUBLE
67139: EQUAL
67140: IFTRUE 67162
67142: LD_INT 11
67144: DOUBLE
67145: EQUAL
67146: IFTRUE 67162
67148: LD_INT 14
67150: DOUBLE
67151: EQUAL
67152: IFTRUE 67162
67154: LD_INT 10
67156: DOUBLE
67157: EQUAL
67158: IFTRUE 67162
67160: GO 67218
67162: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67163: LD_ADDR_VAR 0 9
67167: PUSH
67168: LD_VAR 0 41
67172: PUSH
67173: LD_VAR 0 42
67177: PUSH
67178: LD_VAR 0 43
67182: PUSH
67183: LD_VAR 0 44
67187: PUSH
67188: LD_VAR 0 45
67192: PUSH
67193: LD_VAR 0 46
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: LIST
67202: LIST
67203: LIST
67204: LIST
67205: PUSH
67206: LD_VAR 0 4
67210: PUSH
67211: LD_INT 1
67213: PLUS
67214: ARRAY
67215: ST_TO_ADDR
67216: GO 67471
67218: LD_INT 36
67220: DOUBLE
67221: EQUAL
67222: IFTRUE 67226
67224: GO 67282
67226: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67227: LD_ADDR_VAR 0 9
67231: PUSH
67232: LD_VAR 0 47
67236: PUSH
67237: LD_VAR 0 48
67241: PUSH
67242: LD_VAR 0 49
67246: PUSH
67247: LD_VAR 0 50
67251: PUSH
67252: LD_VAR 0 51
67256: PUSH
67257: LD_VAR 0 52
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: PUSH
67270: LD_VAR 0 4
67274: PUSH
67275: LD_INT 1
67277: PLUS
67278: ARRAY
67279: ST_TO_ADDR
67280: GO 67471
67282: LD_INT 4
67284: DOUBLE
67285: EQUAL
67286: IFTRUE 67308
67288: LD_INT 5
67290: DOUBLE
67291: EQUAL
67292: IFTRUE 67308
67294: LD_INT 34
67296: DOUBLE
67297: EQUAL
67298: IFTRUE 67308
67300: LD_INT 37
67302: DOUBLE
67303: EQUAL
67304: IFTRUE 67308
67306: GO 67364
67308: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67309: LD_ADDR_VAR 0 9
67313: PUSH
67314: LD_VAR 0 53
67318: PUSH
67319: LD_VAR 0 54
67323: PUSH
67324: LD_VAR 0 55
67328: PUSH
67329: LD_VAR 0 56
67333: PUSH
67334: LD_VAR 0 57
67338: PUSH
67339: LD_VAR 0 58
67343: PUSH
67344: EMPTY
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: PUSH
67352: LD_VAR 0 4
67356: PUSH
67357: LD_INT 1
67359: PLUS
67360: ARRAY
67361: ST_TO_ADDR
67362: GO 67471
67364: LD_INT 31
67366: DOUBLE
67367: EQUAL
67368: IFTRUE 67414
67370: LD_INT 32
67372: DOUBLE
67373: EQUAL
67374: IFTRUE 67414
67376: LD_INT 33
67378: DOUBLE
67379: EQUAL
67380: IFTRUE 67414
67382: LD_INT 27
67384: DOUBLE
67385: EQUAL
67386: IFTRUE 67414
67388: LD_INT 26
67390: DOUBLE
67391: EQUAL
67392: IFTRUE 67414
67394: LD_INT 28
67396: DOUBLE
67397: EQUAL
67398: IFTRUE 67414
67400: LD_INT 29
67402: DOUBLE
67403: EQUAL
67404: IFTRUE 67414
67406: LD_INT 30
67408: DOUBLE
67409: EQUAL
67410: IFTRUE 67414
67412: GO 67470
67414: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67415: LD_ADDR_VAR 0 9
67419: PUSH
67420: LD_VAR 0 59
67424: PUSH
67425: LD_VAR 0 60
67429: PUSH
67430: LD_VAR 0 61
67434: PUSH
67435: LD_VAR 0 62
67439: PUSH
67440: LD_VAR 0 63
67444: PUSH
67445: LD_VAR 0 64
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: PUSH
67458: LD_VAR 0 4
67462: PUSH
67463: LD_INT 1
67465: PLUS
67466: ARRAY
67467: ST_TO_ADDR
67468: GO 67471
67470: POP
// temp_list2 = [ ] ;
67471: LD_ADDR_VAR 0 10
67475: PUSH
67476: EMPTY
67477: ST_TO_ADDR
// for i in temp_list do
67478: LD_ADDR_VAR 0 8
67482: PUSH
67483: LD_VAR 0 9
67487: PUSH
67488: FOR_IN
67489: IFFALSE 67541
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67491: LD_ADDR_VAR 0 10
67495: PUSH
67496: LD_VAR 0 10
67500: PUSH
67501: LD_VAR 0 8
67505: PUSH
67506: LD_INT 1
67508: ARRAY
67509: PUSH
67510: LD_VAR 0 2
67514: PLUS
67515: PUSH
67516: LD_VAR 0 8
67520: PUSH
67521: LD_INT 2
67523: ARRAY
67524: PUSH
67525: LD_VAR 0 3
67529: PLUS
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: EMPTY
67536: LIST
67537: ADD
67538: ST_TO_ADDR
67539: GO 67488
67541: POP
67542: POP
// result = temp_list2 ;
67543: LD_ADDR_VAR 0 7
67547: PUSH
67548: LD_VAR 0 10
67552: ST_TO_ADDR
// end ;
67553: LD_VAR 0 7
67557: RET
// export function EnemyInRange ( unit , dist ) ; begin
67558: LD_INT 0
67560: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67561: LD_ADDR_VAR 0 3
67565: PUSH
67566: LD_VAR 0 1
67570: PPUSH
67571: CALL_OW 255
67575: PPUSH
67576: LD_VAR 0 1
67580: PPUSH
67581: CALL_OW 250
67585: PPUSH
67586: LD_VAR 0 1
67590: PPUSH
67591: CALL_OW 251
67595: PPUSH
67596: LD_VAR 0 2
67600: PPUSH
67601: CALL 41662 0 4
67605: PUSH
67606: LD_INT 4
67608: ARRAY
67609: ST_TO_ADDR
// end ;
67610: LD_VAR 0 3
67614: RET
// export function PlayerSeeMe ( unit ) ; begin
67615: LD_INT 0
67617: PPUSH
// result := See ( your_side , unit ) ;
67618: LD_ADDR_VAR 0 2
67622: PUSH
67623: LD_OWVAR 2
67627: PPUSH
67628: LD_VAR 0 1
67632: PPUSH
67633: CALL_OW 292
67637: ST_TO_ADDR
// end ;
67638: LD_VAR 0 2
67642: RET
// export function ReverseDir ( unit ) ; begin
67643: LD_INT 0
67645: PPUSH
// if not unit then
67646: LD_VAR 0 1
67650: NOT
67651: IFFALSE 67655
// exit ;
67653: GO 67678
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67655: LD_ADDR_VAR 0 2
67659: PUSH
67660: LD_VAR 0 1
67664: PPUSH
67665: CALL_OW 254
67669: PUSH
67670: LD_INT 3
67672: PLUS
67673: PUSH
67674: LD_INT 6
67676: MOD
67677: ST_TO_ADDR
// end ;
67678: LD_VAR 0 2
67682: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67683: LD_INT 0
67685: PPUSH
67686: PPUSH
67687: PPUSH
67688: PPUSH
67689: PPUSH
// if not hexes then
67690: LD_VAR 0 2
67694: NOT
67695: IFFALSE 67699
// exit ;
67697: GO 67847
// dist := 9999 ;
67699: LD_ADDR_VAR 0 5
67703: PUSH
67704: LD_INT 9999
67706: ST_TO_ADDR
// for i = 1 to hexes do
67707: LD_ADDR_VAR 0 4
67711: PUSH
67712: DOUBLE
67713: LD_INT 1
67715: DEC
67716: ST_TO_ADDR
67717: LD_VAR 0 2
67721: PUSH
67722: FOR_TO
67723: IFFALSE 67835
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67725: LD_VAR 0 1
67729: PPUSH
67730: LD_VAR 0 2
67734: PUSH
67735: LD_VAR 0 4
67739: ARRAY
67740: PUSH
67741: LD_INT 1
67743: ARRAY
67744: PPUSH
67745: LD_VAR 0 2
67749: PUSH
67750: LD_VAR 0 4
67754: ARRAY
67755: PUSH
67756: LD_INT 2
67758: ARRAY
67759: PPUSH
67760: CALL_OW 297
67764: PUSH
67765: LD_VAR 0 5
67769: LESS
67770: IFFALSE 67833
// begin hex := hexes [ i ] ;
67772: LD_ADDR_VAR 0 7
67776: PUSH
67777: LD_VAR 0 2
67781: PUSH
67782: LD_VAR 0 4
67786: ARRAY
67787: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67788: LD_ADDR_VAR 0 5
67792: PUSH
67793: LD_VAR 0 1
67797: PPUSH
67798: LD_VAR 0 2
67802: PUSH
67803: LD_VAR 0 4
67807: ARRAY
67808: PUSH
67809: LD_INT 1
67811: ARRAY
67812: PPUSH
67813: LD_VAR 0 2
67817: PUSH
67818: LD_VAR 0 4
67822: ARRAY
67823: PUSH
67824: LD_INT 2
67826: ARRAY
67827: PPUSH
67828: CALL_OW 297
67832: ST_TO_ADDR
// end ; end ;
67833: GO 67722
67835: POP
67836: POP
// result := hex ;
67837: LD_ADDR_VAR 0 3
67841: PUSH
67842: LD_VAR 0 7
67846: ST_TO_ADDR
// end ;
67847: LD_VAR 0 3
67851: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67852: LD_INT 0
67854: PPUSH
67855: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67856: LD_VAR 0 1
67860: NOT
67861: PUSH
67862: LD_VAR 0 1
67866: PUSH
67867: LD_INT 21
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 23
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PPUSH
67891: CALL_OW 69
67895: IN
67896: NOT
67897: OR
67898: IFFALSE 67902
// exit ;
67900: GO 67949
// for i = 1 to 3 do
67902: LD_ADDR_VAR 0 3
67906: PUSH
67907: DOUBLE
67908: LD_INT 1
67910: DEC
67911: ST_TO_ADDR
67912: LD_INT 3
67914: PUSH
67915: FOR_TO
67916: IFFALSE 67947
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
67918: LD_VAR 0 1
67922: PPUSH
67923: CALL_OW 250
67927: PPUSH
67928: LD_VAR 0 1
67932: PPUSH
67933: CALL_OW 251
67937: PPUSH
67938: LD_INT 1
67940: PPUSH
67941: CALL_OW 453
67945: GO 67915
67947: POP
67948: POP
// end ;
67949: LD_VAR 0 2
67953: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67954: LD_INT 0
67956: PPUSH
67957: PPUSH
67958: PPUSH
67959: PPUSH
67960: PPUSH
67961: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67962: LD_VAR 0 1
67966: NOT
67967: PUSH
67968: LD_VAR 0 2
67972: NOT
67973: OR
67974: PUSH
67975: LD_VAR 0 1
67979: PPUSH
67980: CALL_OW 314
67984: OR
67985: IFFALSE 67989
// exit ;
67987: GO 68430
// x := GetX ( enemy_unit ) ;
67989: LD_ADDR_VAR 0 7
67993: PUSH
67994: LD_VAR 0 2
67998: PPUSH
67999: CALL_OW 250
68003: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68004: LD_ADDR_VAR 0 8
68008: PUSH
68009: LD_VAR 0 2
68013: PPUSH
68014: CALL_OW 251
68018: ST_TO_ADDR
// if not x or not y then
68019: LD_VAR 0 7
68023: NOT
68024: PUSH
68025: LD_VAR 0 8
68029: NOT
68030: OR
68031: IFFALSE 68035
// exit ;
68033: GO 68430
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68035: LD_ADDR_VAR 0 6
68039: PUSH
68040: LD_VAR 0 7
68044: PPUSH
68045: LD_INT 0
68047: PPUSH
68048: LD_INT 4
68050: PPUSH
68051: CALL_OW 272
68055: PUSH
68056: LD_VAR 0 8
68060: PPUSH
68061: LD_INT 0
68063: PPUSH
68064: LD_INT 4
68066: PPUSH
68067: CALL_OW 273
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_VAR 0 7
68080: PPUSH
68081: LD_INT 1
68083: PPUSH
68084: LD_INT 4
68086: PPUSH
68087: CALL_OW 272
68091: PUSH
68092: LD_VAR 0 8
68096: PPUSH
68097: LD_INT 1
68099: PPUSH
68100: LD_INT 4
68102: PPUSH
68103: CALL_OW 273
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_VAR 0 7
68116: PPUSH
68117: LD_INT 2
68119: PPUSH
68120: LD_INT 4
68122: PPUSH
68123: CALL_OW 272
68127: PUSH
68128: LD_VAR 0 8
68132: PPUSH
68133: LD_INT 2
68135: PPUSH
68136: LD_INT 4
68138: PPUSH
68139: CALL_OW 273
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_VAR 0 7
68152: PPUSH
68153: LD_INT 3
68155: PPUSH
68156: LD_INT 4
68158: PPUSH
68159: CALL_OW 272
68163: PUSH
68164: LD_VAR 0 8
68168: PPUSH
68169: LD_INT 3
68171: PPUSH
68172: LD_INT 4
68174: PPUSH
68175: CALL_OW 273
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_VAR 0 7
68188: PPUSH
68189: LD_INT 4
68191: PPUSH
68192: LD_INT 4
68194: PPUSH
68195: CALL_OW 272
68199: PUSH
68200: LD_VAR 0 8
68204: PPUSH
68205: LD_INT 4
68207: PPUSH
68208: LD_INT 4
68210: PPUSH
68211: CALL_OW 273
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_VAR 0 7
68224: PPUSH
68225: LD_INT 5
68227: PPUSH
68228: LD_INT 4
68230: PPUSH
68231: CALL_OW 272
68235: PUSH
68236: LD_VAR 0 8
68240: PPUSH
68241: LD_INT 5
68243: PPUSH
68244: LD_INT 4
68246: PPUSH
68247: CALL_OW 273
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: LIST
68262: LIST
68263: ST_TO_ADDR
// for i = tmp downto 1 do
68264: LD_ADDR_VAR 0 4
68268: PUSH
68269: DOUBLE
68270: LD_VAR 0 6
68274: INC
68275: ST_TO_ADDR
68276: LD_INT 1
68278: PUSH
68279: FOR_DOWNTO
68280: IFFALSE 68381
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68282: LD_VAR 0 6
68286: PUSH
68287: LD_VAR 0 4
68291: ARRAY
68292: PUSH
68293: LD_INT 1
68295: ARRAY
68296: PPUSH
68297: LD_VAR 0 6
68301: PUSH
68302: LD_VAR 0 4
68306: ARRAY
68307: PUSH
68308: LD_INT 2
68310: ARRAY
68311: PPUSH
68312: CALL_OW 488
68316: NOT
68317: PUSH
68318: LD_VAR 0 6
68322: PUSH
68323: LD_VAR 0 4
68327: ARRAY
68328: PUSH
68329: LD_INT 1
68331: ARRAY
68332: PPUSH
68333: LD_VAR 0 6
68337: PUSH
68338: LD_VAR 0 4
68342: ARRAY
68343: PUSH
68344: LD_INT 2
68346: ARRAY
68347: PPUSH
68348: CALL_OW 428
68352: PUSH
68353: LD_INT 0
68355: NONEQUAL
68356: OR
68357: IFFALSE 68379
// tmp := Delete ( tmp , i ) ;
68359: LD_ADDR_VAR 0 6
68363: PUSH
68364: LD_VAR 0 6
68368: PPUSH
68369: LD_VAR 0 4
68373: PPUSH
68374: CALL_OW 3
68378: ST_TO_ADDR
68379: GO 68279
68381: POP
68382: POP
// j := GetClosestHex ( unit , tmp ) ;
68383: LD_ADDR_VAR 0 5
68387: PUSH
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_VAR 0 6
68397: PPUSH
68398: CALL 67683 0 2
68402: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68403: LD_VAR 0 1
68407: PPUSH
68408: LD_VAR 0 5
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_VAR 0 5
68421: PUSH
68422: LD_INT 2
68424: ARRAY
68425: PPUSH
68426: CALL_OW 111
// end ;
68430: LD_VAR 0 3
68434: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68435: LD_INT 0
68437: PPUSH
68438: PPUSH
68439: PPUSH
// uc_side = 0 ;
68440: LD_ADDR_OWVAR 20
68444: PUSH
68445: LD_INT 0
68447: ST_TO_ADDR
// uc_nation = 0 ;
68448: LD_ADDR_OWVAR 21
68452: PUSH
68453: LD_INT 0
68455: ST_TO_ADDR
// InitHc ;
68456: CALL_OW 19
// InitVc ;
68460: CALL_OW 20
// if mastodonts then
68464: LD_VAR 0 6
68468: IFFALSE 68535
// for i = 1 to mastodonts do
68470: LD_ADDR_VAR 0 11
68474: PUSH
68475: DOUBLE
68476: LD_INT 1
68478: DEC
68479: ST_TO_ADDR
68480: LD_VAR 0 6
68484: PUSH
68485: FOR_TO
68486: IFFALSE 68533
// begin vc_chassis := 31 ;
68488: LD_ADDR_OWVAR 37
68492: PUSH
68493: LD_INT 31
68495: ST_TO_ADDR
// vc_control := control_rider ;
68496: LD_ADDR_OWVAR 38
68500: PUSH
68501: LD_INT 4
68503: ST_TO_ADDR
// animal := CreateVehicle ;
68504: LD_ADDR_VAR 0 12
68508: PUSH
68509: CALL_OW 45
68513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68514: LD_VAR 0 12
68518: PPUSH
68519: LD_VAR 0 8
68523: PPUSH
68524: LD_INT 0
68526: PPUSH
68527: CALL 70604 0 3
// end ;
68531: GO 68485
68533: POP
68534: POP
// if horses then
68535: LD_VAR 0 5
68539: IFFALSE 68606
// for i = 1 to horses do
68541: LD_ADDR_VAR 0 11
68545: PUSH
68546: DOUBLE
68547: LD_INT 1
68549: DEC
68550: ST_TO_ADDR
68551: LD_VAR 0 5
68555: PUSH
68556: FOR_TO
68557: IFFALSE 68604
// begin hc_class := 21 ;
68559: LD_ADDR_OWVAR 28
68563: PUSH
68564: LD_INT 21
68566: ST_TO_ADDR
// hc_gallery :=  ;
68567: LD_ADDR_OWVAR 33
68571: PUSH
68572: LD_STRING 
68574: ST_TO_ADDR
// animal := CreateHuman ;
68575: LD_ADDR_VAR 0 12
68579: PUSH
68580: CALL_OW 44
68584: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68585: LD_VAR 0 12
68589: PPUSH
68590: LD_VAR 0 8
68594: PPUSH
68595: LD_INT 0
68597: PPUSH
68598: CALL 70604 0 3
// end ;
68602: GO 68556
68604: POP
68605: POP
// if birds then
68606: LD_VAR 0 1
68610: IFFALSE 68677
// for i = 1 to birds do
68612: LD_ADDR_VAR 0 11
68616: PUSH
68617: DOUBLE
68618: LD_INT 1
68620: DEC
68621: ST_TO_ADDR
68622: LD_VAR 0 1
68626: PUSH
68627: FOR_TO
68628: IFFALSE 68675
// begin hc_class = 18 ;
68630: LD_ADDR_OWVAR 28
68634: PUSH
68635: LD_INT 18
68637: ST_TO_ADDR
// hc_gallery =  ;
68638: LD_ADDR_OWVAR 33
68642: PUSH
68643: LD_STRING 
68645: ST_TO_ADDR
// animal := CreateHuman ;
68646: LD_ADDR_VAR 0 12
68650: PUSH
68651: CALL_OW 44
68655: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68656: LD_VAR 0 12
68660: PPUSH
68661: LD_VAR 0 8
68665: PPUSH
68666: LD_INT 0
68668: PPUSH
68669: CALL 70604 0 3
// end ;
68673: GO 68627
68675: POP
68676: POP
// if tigers then
68677: LD_VAR 0 2
68681: IFFALSE 68765
// for i = 1 to tigers do
68683: LD_ADDR_VAR 0 11
68687: PUSH
68688: DOUBLE
68689: LD_INT 1
68691: DEC
68692: ST_TO_ADDR
68693: LD_VAR 0 2
68697: PUSH
68698: FOR_TO
68699: IFFALSE 68763
// begin hc_class = class_tiger ;
68701: LD_ADDR_OWVAR 28
68705: PUSH
68706: LD_INT 14
68708: ST_TO_ADDR
// hc_gallery =  ;
68709: LD_ADDR_OWVAR 33
68713: PUSH
68714: LD_STRING 
68716: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68717: LD_ADDR_OWVAR 35
68721: PUSH
68722: LD_INT 7
68724: NEG
68725: PPUSH
68726: LD_INT 7
68728: PPUSH
68729: CALL_OW 12
68733: ST_TO_ADDR
// animal := CreateHuman ;
68734: LD_ADDR_VAR 0 12
68738: PUSH
68739: CALL_OW 44
68743: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68744: LD_VAR 0 12
68748: PPUSH
68749: LD_VAR 0 8
68753: PPUSH
68754: LD_INT 0
68756: PPUSH
68757: CALL 70604 0 3
// end ;
68761: GO 68698
68763: POP
68764: POP
// if apemans then
68765: LD_VAR 0 3
68769: IFFALSE 68892
// for i = 1 to apemans do
68771: LD_ADDR_VAR 0 11
68775: PUSH
68776: DOUBLE
68777: LD_INT 1
68779: DEC
68780: ST_TO_ADDR
68781: LD_VAR 0 3
68785: PUSH
68786: FOR_TO
68787: IFFALSE 68890
// begin hc_class = class_apeman ;
68789: LD_ADDR_OWVAR 28
68793: PUSH
68794: LD_INT 12
68796: ST_TO_ADDR
// hc_gallery =  ;
68797: LD_ADDR_OWVAR 33
68801: PUSH
68802: LD_STRING 
68804: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68805: LD_ADDR_OWVAR 35
68809: PUSH
68810: LD_INT 5
68812: NEG
68813: PPUSH
68814: LD_INT 5
68816: PPUSH
68817: CALL_OW 12
68821: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68822: LD_ADDR_OWVAR 31
68826: PUSH
68827: LD_INT 1
68829: PPUSH
68830: LD_INT 3
68832: PPUSH
68833: CALL_OW 12
68837: PUSH
68838: LD_INT 1
68840: PPUSH
68841: LD_INT 3
68843: PPUSH
68844: CALL_OW 12
68848: PUSH
68849: LD_INT 0
68851: PUSH
68852: LD_INT 0
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: ST_TO_ADDR
// animal := CreateHuman ;
68861: LD_ADDR_VAR 0 12
68865: PUSH
68866: CALL_OW 44
68870: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68871: LD_VAR 0 12
68875: PPUSH
68876: LD_VAR 0 8
68880: PPUSH
68881: LD_INT 0
68883: PPUSH
68884: CALL 70604 0 3
// end ;
68888: GO 68786
68890: POP
68891: POP
// if enchidnas then
68892: LD_VAR 0 4
68896: IFFALSE 68963
// for i = 1 to enchidnas do
68898: LD_ADDR_VAR 0 11
68902: PUSH
68903: DOUBLE
68904: LD_INT 1
68906: DEC
68907: ST_TO_ADDR
68908: LD_VAR 0 4
68912: PUSH
68913: FOR_TO
68914: IFFALSE 68961
// begin hc_class = 13 ;
68916: LD_ADDR_OWVAR 28
68920: PUSH
68921: LD_INT 13
68923: ST_TO_ADDR
// hc_gallery =  ;
68924: LD_ADDR_OWVAR 33
68928: PUSH
68929: LD_STRING 
68931: ST_TO_ADDR
// animal := CreateHuman ;
68932: LD_ADDR_VAR 0 12
68936: PUSH
68937: CALL_OW 44
68941: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68942: LD_VAR 0 12
68946: PPUSH
68947: LD_VAR 0 8
68951: PPUSH
68952: LD_INT 0
68954: PPUSH
68955: CALL 70604 0 3
// end ;
68959: GO 68913
68961: POP
68962: POP
// if fishes then
68963: LD_VAR 0 7
68967: IFFALSE 69034
// for i = 1 to fishes do
68969: LD_ADDR_VAR 0 11
68973: PUSH
68974: DOUBLE
68975: LD_INT 1
68977: DEC
68978: ST_TO_ADDR
68979: LD_VAR 0 7
68983: PUSH
68984: FOR_TO
68985: IFFALSE 69032
// begin hc_class = 20 ;
68987: LD_ADDR_OWVAR 28
68991: PUSH
68992: LD_INT 20
68994: ST_TO_ADDR
// hc_gallery =  ;
68995: LD_ADDR_OWVAR 33
68999: PUSH
69000: LD_STRING 
69002: ST_TO_ADDR
// animal := CreateHuman ;
69003: LD_ADDR_VAR 0 12
69007: PUSH
69008: CALL_OW 44
69012: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69013: LD_VAR 0 12
69017: PPUSH
69018: LD_VAR 0 9
69022: PPUSH
69023: LD_INT 0
69025: PPUSH
69026: CALL 70604 0 3
// end ;
69030: GO 68984
69032: POP
69033: POP
// end ;
69034: LD_VAR 0 10
69038: RET
// export function WantHeal ( sci , unit ) ; begin
69039: LD_INT 0
69041: PPUSH
// if GetTaskList ( sci ) > 0 then
69042: LD_VAR 0 1
69046: PPUSH
69047: CALL_OW 437
69051: PUSH
69052: LD_INT 0
69054: GREATER
69055: IFFALSE 69125
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69057: LD_VAR 0 1
69061: PPUSH
69062: CALL_OW 437
69066: PUSH
69067: LD_INT 1
69069: ARRAY
69070: PUSH
69071: LD_INT 1
69073: ARRAY
69074: PUSH
69075: LD_STRING l
69077: EQUAL
69078: PUSH
69079: LD_VAR 0 1
69083: PPUSH
69084: CALL_OW 437
69088: PUSH
69089: LD_INT 1
69091: ARRAY
69092: PUSH
69093: LD_INT 4
69095: ARRAY
69096: PUSH
69097: LD_VAR 0 2
69101: EQUAL
69102: AND
69103: IFFALSE 69115
// result := true else
69105: LD_ADDR_VAR 0 3
69109: PUSH
69110: LD_INT 1
69112: ST_TO_ADDR
69113: GO 69123
// result := false ;
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: LD_INT 0
69122: ST_TO_ADDR
// end else
69123: GO 69133
// result := false ;
69125: LD_ADDR_VAR 0 3
69129: PUSH
69130: LD_INT 0
69132: ST_TO_ADDR
// end ;
69133: LD_VAR 0 3
69137: RET
// export function HealTarget ( sci ) ; begin
69138: LD_INT 0
69140: PPUSH
// if not sci then
69141: LD_VAR 0 1
69145: NOT
69146: IFFALSE 69150
// exit ;
69148: GO 69215
// result := 0 ;
69150: LD_ADDR_VAR 0 2
69154: PUSH
69155: LD_INT 0
69157: ST_TO_ADDR
// if GetTaskList ( sci ) then
69158: LD_VAR 0 1
69162: PPUSH
69163: CALL_OW 437
69167: IFFALSE 69215
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69169: LD_VAR 0 1
69173: PPUSH
69174: CALL_OW 437
69178: PUSH
69179: LD_INT 1
69181: ARRAY
69182: PUSH
69183: LD_INT 1
69185: ARRAY
69186: PUSH
69187: LD_STRING l
69189: EQUAL
69190: IFFALSE 69215
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69192: LD_ADDR_VAR 0 2
69196: PUSH
69197: LD_VAR 0 1
69201: PPUSH
69202: CALL_OW 437
69206: PUSH
69207: LD_INT 1
69209: ARRAY
69210: PUSH
69211: LD_INT 4
69213: ARRAY
69214: ST_TO_ADDR
// end ;
69215: LD_VAR 0 2
69219: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69220: LD_INT 0
69222: PPUSH
69223: PPUSH
69224: PPUSH
69225: PPUSH
// if not base_units then
69226: LD_VAR 0 1
69230: NOT
69231: IFFALSE 69235
// exit ;
69233: GO 69322
// result := false ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69243: LD_ADDR_VAR 0 5
69247: PUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: LD_INT 21
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PPUSH
69263: CALL_OW 72
69267: ST_TO_ADDR
// if not tmp then
69268: LD_VAR 0 5
69272: NOT
69273: IFFALSE 69277
// exit ;
69275: GO 69322
// for i in tmp do
69277: LD_ADDR_VAR 0 3
69281: PUSH
69282: LD_VAR 0 5
69286: PUSH
69287: FOR_IN
69288: IFFALSE 69320
// begin result := EnemyInRange ( i , 22 ) ;
69290: LD_ADDR_VAR 0 2
69294: PUSH
69295: LD_VAR 0 3
69299: PPUSH
69300: LD_INT 22
69302: PPUSH
69303: CALL 67558 0 2
69307: ST_TO_ADDR
// if result then
69308: LD_VAR 0 2
69312: IFFALSE 69318
// exit ;
69314: POP
69315: POP
69316: GO 69322
// end ;
69318: GO 69287
69320: POP
69321: POP
// end ;
69322: LD_VAR 0 2
69326: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69327: LD_INT 0
69329: PPUSH
69330: PPUSH
// if not units then
69331: LD_VAR 0 1
69335: NOT
69336: IFFALSE 69340
// exit ;
69338: GO 69410
// result := [ ] ;
69340: LD_ADDR_VAR 0 3
69344: PUSH
69345: EMPTY
69346: ST_TO_ADDR
// for i in units do
69347: LD_ADDR_VAR 0 4
69351: PUSH
69352: LD_VAR 0 1
69356: PUSH
69357: FOR_IN
69358: IFFALSE 69408
// if GetTag ( i ) = tag then
69360: LD_VAR 0 4
69364: PPUSH
69365: CALL_OW 110
69369: PUSH
69370: LD_VAR 0 2
69374: EQUAL
69375: IFFALSE 69406
// result := Insert ( result , result + 1 , i ) ;
69377: LD_ADDR_VAR 0 3
69381: PUSH
69382: LD_VAR 0 3
69386: PPUSH
69387: LD_VAR 0 3
69391: PUSH
69392: LD_INT 1
69394: PLUS
69395: PPUSH
69396: LD_VAR 0 4
69400: PPUSH
69401: CALL_OW 2
69405: ST_TO_ADDR
69406: GO 69357
69408: POP
69409: POP
// end ;
69410: LD_VAR 0 3
69414: RET
// export function IsDriver ( un ) ; begin
69415: LD_INT 0
69417: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69418: LD_ADDR_VAR 0 2
69422: PUSH
69423: LD_VAR 0 1
69427: PUSH
69428: LD_INT 55
69430: PUSH
69431: EMPTY
69432: LIST
69433: PPUSH
69434: CALL_OW 69
69438: IN
69439: ST_TO_ADDR
// end ;
69440: LD_VAR 0 2
69444: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69445: LD_INT 0
69447: PPUSH
69448: PPUSH
// list := [ ] ;
69449: LD_ADDR_VAR 0 5
69453: PUSH
69454: EMPTY
69455: ST_TO_ADDR
// case d of 0 :
69456: LD_VAR 0 3
69460: PUSH
69461: LD_INT 0
69463: DOUBLE
69464: EQUAL
69465: IFTRUE 69469
69467: GO 69602
69469: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69470: LD_ADDR_VAR 0 5
69474: PUSH
69475: LD_VAR 0 1
69479: PUSH
69480: LD_INT 4
69482: MINUS
69483: PUSH
69484: LD_VAR 0 2
69488: PUSH
69489: LD_INT 4
69491: MINUS
69492: PUSH
69493: LD_INT 2
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: LIST
69500: PUSH
69501: LD_VAR 0 1
69505: PUSH
69506: LD_INT 3
69508: MINUS
69509: PUSH
69510: LD_VAR 0 2
69514: PUSH
69515: LD_INT 1
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: PUSH
69523: LD_VAR 0 1
69527: PUSH
69528: LD_INT 4
69530: PLUS
69531: PUSH
69532: LD_VAR 0 2
69536: PUSH
69537: LD_INT 4
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: LD_VAR 0 1
69549: PUSH
69550: LD_INT 3
69552: PLUS
69553: PUSH
69554: LD_VAR 0 2
69558: PUSH
69559: LD_INT 3
69561: PLUS
69562: PUSH
69563: LD_INT 5
69565: PUSH
69566: EMPTY
69567: LIST
69568: LIST
69569: LIST
69570: PUSH
69571: LD_VAR 0 1
69575: PUSH
69576: LD_VAR 0 2
69580: PUSH
69581: LD_INT 4
69583: PLUS
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: LIST
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: ST_TO_ADDR
// end ; 1 :
69600: GO 70300
69602: LD_INT 1
69604: DOUBLE
69605: EQUAL
69606: IFTRUE 69610
69608: GO 69743
69610: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69611: LD_ADDR_VAR 0 5
69615: PUSH
69616: LD_VAR 0 1
69620: PUSH
69621: LD_VAR 0 2
69625: PUSH
69626: LD_INT 4
69628: MINUS
69629: PUSH
69630: LD_INT 3
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: LIST
69637: PUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_INT 3
69645: MINUS
69646: PUSH
69647: LD_VAR 0 2
69651: PUSH
69652: LD_INT 3
69654: MINUS
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: LIST
69663: PUSH
69664: LD_VAR 0 1
69668: PUSH
69669: LD_INT 4
69671: MINUS
69672: PUSH
69673: LD_VAR 0 2
69677: PUSH
69678: LD_INT 1
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: PUSH
69686: LD_VAR 0 1
69690: PUSH
69691: LD_VAR 0 2
69695: PUSH
69696: LD_INT 3
69698: PLUS
69699: PUSH
69700: LD_INT 0
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: PUSH
69708: LD_VAR 0 1
69712: PUSH
69713: LD_INT 4
69715: PLUS
69716: PUSH
69717: LD_VAR 0 2
69721: PUSH
69722: LD_INT 4
69724: PLUS
69725: PUSH
69726: LD_INT 5
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: LIST
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: ST_TO_ADDR
// end ; 2 :
69741: GO 70300
69743: LD_INT 2
69745: DOUBLE
69746: EQUAL
69747: IFTRUE 69751
69749: GO 69880
69751: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69752: LD_ADDR_VAR 0 5
69756: PUSH
69757: LD_VAR 0 1
69761: PUSH
69762: LD_VAR 0 2
69766: PUSH
69767: LD_INT 3
69769: MINUS
69770: PUSH
69771: LD_INT 3
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: LIST
69778: PUSH
69779: LD_VAR 0 1
69783: PUSH
69784: LD_INT 4
69786: PLUS
69787: PUSH
69788: LD_VAR 0 2
69792: PUSH
69793: LD_INT 4
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: LIST
69800: PUSH
69801: LD_VAR 0 1
69805: PUSH
69806: LD_VAR 0 2
69810: PUSH
69811: LD_INT 4
69813: PLUS
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: PUSH
69823: LD_VAR 0 1
69827: PUSH
69828: LD_INT 3
69830: MINUS
69831: PUSH
69832: LD_VAR 0 2
69836: PUSH
69837: LD_INT 1
69839: PUSH
69840: EMPTY
69841: LIST
69842: LIST
69843: LIST
69844: PUSH
69845: LD_VAR 0 1
69849: PUSH
69850: LD_INT 4
69852: MINUS
69853: PUSH
69854: LD_VAR 0 2
69858: PUSH
69859: LD_INT 4
69861: MINUS
69862: PUSH
69863: LD_INT 2
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: ST_TO_ADDR
// end ; 3 :
69878: GO 70300
69880: LD_INT 3
69882: DOUBLE
69883: EQUAL
69884: IFTRUE 69888
69886: GO 70021
69888: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69889: LD_ADDR_VAR 0 5
69893: PUSH
69894: LD_VAR 0 1
69898: PUSH
69899: LD_INT 3
69901: PLUS
69902: PUSH
69903: LD_VAR 0 2
69907: PUSH
69908: LD_INT 4
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: LIST
69915: PUSH
69916: LD_VAR 0 1
69920: PUSH
69921: LD_INT 4
69923: PLUS
69924: PUSH
69925: LD_VAR 0 2
69929: PUSH
69930: LD_INT 4
69932: PLUS
69933: PUSH
69934: LD_INT 5
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: LIST
69941: PUSH
69942: LD_VAR 0 1
69946: PUSH
69947: LD_INT 4
69949: MINUS
69950: PUSH
69951: LD_VAR 0 2
69955: PUSH
69956: LD_INT 1
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: LIST
69963: PUSH
69964: LD_VAR 0 1
69968: PUSH
69969: LD_VAR 0 2
69973: PUSH
69974: LD_INT 4
69976: MINUS
69977: PUSH
69978: LD_INT 3
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: LIST
69985: PUSH
69986: LD_VAR 0 1
69990: PUSH
69991: LD_INT 3
69993: MINUS
69994: PUSH
69995: LD_VAR 0 2
69999: PUSH
70000: LD_INT 3
70002: MINUS
70003: PUSH
70004: LD_INT 2
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: LIST
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: LIST
70016: LIST
70017: LIST
70018: ST_TO_ADDR
// end ; 4 :
70019: GO 70300
70021: LD_INT 4
70023: DOUBLE
70024: EQUAL
70025: IFTRUE 70029
70027: GO 70162
70029: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70030: LD_ADDR_VAR 0 5
70034: PUSH
70035: LD_VAR 0 1
70039: PUSH
70040: LD_VAR 0 2
70044: PUSH
70045: LD_INT 4
70047: PLUS
70048: PUSH
70049: LD_INT 0
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: LIST
70056: PUSH
70057: LD_VAR 0 1
70061: PUSH
70062: LD_INT 3
70064: PLUS
70065: PUSH
70066: LD_VAR 0 2
70070: PUSH
70071: LD_INT 3
70073: PLUS
70074: PUSH
70075: LD_INT 5
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: LIST
70082: PUSH
70083: LD_VAR 0 1
70087: PUSH
70088: LD_INT 4
70090: PLUS
70091: PUSH
70092: LD_VAR 0 2
70096: PUSH
70097: LD_INT 4
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: LIST
70104: PUSH
70105: LD_VAR 0 1
70109: PUSH
70110: LD_VAR 0 2
70114: PUSH
70115: LD_INT 3
70117: MINUS
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: LIST
70126: PUSH
70127: LD_VAR 0 1
70131: PUSH
70132: LD_INT 4
70134: MINUS
70135: PUSH
70136: LD_VAR 0 2
70140: PUSH
70141: LD_INT 4
70143: MINUS
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: LIST
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: LIST
70159: ST_TO_ADDR
// end ; 5 :
70160: GO 70300
70162: LD_INT 5
70164: DOUBLE
70165: EQUAL
70166: IFTRUE 70170
70168: GO 70299
70170: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70171: LD_ADDR_VAR 0 5
70175: PUSH
70176: LD_VAR 0 1
70180: PUSH
70181: LD_INT 4
70183: MINUS
70184: PUSH
70185: LD_VAR 0 2
70189: PUSH
70190: LD_INT 1
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: LIST
70197: PUSH
70198: LD_VAR 0 1
70202: PUSH
70203: LD_VAR 0 2
70207: PUSH
70208: LD_INT 4
70210: MINUS
70211: PUSH
70212: LD_INT 3
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: LIST
70219: PUSH
70220: LD_VAR 0 1
70224: PUSH
70225: LD_INT 4
70227: PLUS
70228: PUSH
70229: LD_VAR 0 2
70233: PUSH
70234: LD_INT 4
70236: PLUS
70237: PUSH
70238: LD_INT 5
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: LIST
70245: PUSH
70246: LD_VAR 0 1
70250: PUSH
70251: LD_INT 3
70253: PLUS
70254: PUSH
70255: LD_VAR 0 2
70259: PUSH
70260: LD_INT 4
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: LIST
70267: PUSH
70268: LD_VAR 0 1
70272: PUSH
70273: LD_VAR 0 2
70277: PUSH
70278: LD_INT 3
70280: PLUS
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: LIST
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: ST_TO_ADDR
// end ; end ;
70297: GO 70300
70299: POP
// result := list ;
70300: LD_ADDR_VAR 0 4
70304: PUSH
70305: LD_VAR 0 5
70309: ST_TO_ADDR
// end ;
70310: LD_VAR 0 4
70314: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70315: LD_INT 0
70317: PPUSH
70318: PPUSH
70319: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70320: LD_VAR 0 1
70324: NOT
70325: PUSH
70326: LD_VAR 0 2
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: LD_INT 2
70336: PUSH
70337: LD_INT 3
70339: PUSH
70340: LD_INT 4
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: IN
70349: NOT
70350: OR
70351: IFFALSE 70355
// exit ;
70353: GO 70447
// tmp := [ ] ;
70355: LD_ADDR_VAR 0 5
70359: PUSH
70360: EMPTY
70361: ST_TO_ADDR
// for i in units do
70362: LD_ADDR_VAR 0 4
70366: PUSH
70367: LD_VAR 0 1
70371: PUSH
70372: FOR_IN
70373: IFFALSE 70416
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70375: LD_ADDR_VAR 0 5
70379: PUSH
70380: LD_VAR 0 5
70384: PPUSH
70385: LD_VAR 0 5
70389: PUSH
70390: LD_INT 1
70392: PLUS
70393: PPUSH
70394: LD_VAR 0 4
70398: PPUSH
70399: LD_VAR 0 2
70403: PPUSH
70404: CALL_OW 259
70408: PPUSH
70409: CALL_OW 2
70413: ST_TO_ADDR
70414: GO 70372
70416: POP
70417: POP
// if not tmp then
70418: LD_VAR 0 5
70422: NOT
70423: IFFALSE 70427
// exit ;
70425: GO 70447
// result := SortListByListDesc ( units , tmp ) ;
70427: LD_ADDR_VAR 0 3
70431: PUSH
70432: LD_VAR 0 1
70436: PPUSH
70437: LD_VAR 0 5
70441: PPUSH
70442: CALL_OW 77
70446: ST_TO_ADDR
// end ;
70447: LD_VAR 0 3
70451: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70452: LD_INT 0
70454: PPUSH
70455: PPUSH
70456: PPUSH
// x := GetX ( building ) ;
70457: LD_ADDR_VAR 0 4
70461: PUSH
70462: LD_VAR 0 2
70466: PPUSH
70467: CALL_OW 250
70471: ST_TO_ADDR
// y := GetY ( building ) ;
70472: LD_ADDR_VAR 0 5
70476: PUSH
70477: LD_VAR 0 2
70481: PPUSH
70482: CALL_OW 251
70486: ST_TO_ADDR
// if GetTaskList ( unit ) then
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 437
70496: IFFALSE 70591
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70498: LD_STRING e
70500: PUSH
70501: LD_VAR 0 1
70505: PPUSH
70506: CALL_OW 437
70510: PUSH
70511: LD_INT 1
70513: ARRAY
70514: PUSH
70515: LD_INT 1
70517: ARRAY
70518: EQUAL
70519: PUSH
70520: LD_VAR 0 4
70524: PUSH
70525: LD_VAR 0 1
70529: PPUSH
70530: CALL_OW 437
70534: PUSH
70535: LD_INT 1
70537: ARRAY
70538: PUSH
70539: LD_INT 2
70541: ARRAY
70542: EQUAL
70543: AND
70544: PUSH
70545: LD_VAR 0 5
70549: PUSH
70550: LD_VAR 0 1
70554: PPUSH
70555: CALL_OW 437
70559: PUSH
70560: LD_INT 1
70562: ARRAY
70563: PUSH
70564: LD_INT 3
70566: ARRAY
70567: EQUAL
70568: AND
70569: IFFALSE 70581
// result := true else
70571: LD_ADDR_VAR 0 3
70575: PUSH
70576: LD_INT 1
70578: ST_TO_ADDR
70579: GO 70589
// result := false ;
70581: LD_ADDR_VAR 0 3
70585: PUSH
70586: LD_INT 0
70588: ST_TO_ADDR
// end else
70589: GO 70599
// result := false ;
70591: LD_ADDR_VAR 0 3
70595: PUSH
70596: LD_INT 0
70598: ST_TO_ADDR
// end ;
70599: LD_VAR 0 3
70603: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70604: LD_INT 0
70606: PPUSH
70607: PPUSH
70608: PPUSH
70609: PPUSH
// if not unit or not area then
70610: LD_VAR 0 1
70614: NOT
70615: PUSH
70616: LD_VAR 0 2
70620: NOT
70621: OR
70622: IFFALSE 70626
// exit ;
70624: GO 70790
// tmp := AreaToList ( area , i ) ;
70626: LD_ADDR_VAR 0 6
70630: PUSH
70631: LD_VAR 0 2
70635: PPUSH
70636: LD_VAR 0 5
70640: PPUSH
70641: CALL_OW 517
70645: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70646: LD_ADDR_VAR 0 5
70650: PUSH
70651: DOUBLE
70652: LD_INT 1
70654: DEC
70655: ST_TO_ADDR
70656: LD_VAR 0 6
70660: PUSH
70661: LD_INT 1
70663: ARRAY
70664: PUSH
70665: FOR_TO
70666: IFFALSE 70788
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70668: LD_ADDR_VAR 0 7
70672: PUSH
70673: LD_VAR 0 6
70677: PUSH
70678: LD_INT 1
70680: ARRAY
70681: PUSH
70682: LD_VAR 0 5
70686: ARRAY
70687: PUSH
70688: LD_VAR 0 6
70692: PUSH
70693: LD_INT 2
70695: ARRAY
70696: PUSH
70697: LD_VAR 0 5
70701: ARRAY
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70707: LD_VAR 0 7
70711: PUSH
70712: LD_INT 1
70714: ARRAY
70715: PPUSH
70716: LD_VAR 0 7
70720: PUSH
70721: LD_INT 2
70723: ARRAY
70724: PPUSH
70725: CALL_OW 428
70729: PUSH
70730: LD_INT 0
70732: EQUAL
70733: IFFALSE 70786
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70735: LD_VAR 0 1
70739: PPUSH
70740: LD_VAR 0 7
70744: PUSH
70745: LD_INT 1
70747: ARRAY
70748: PPUSH
70749: LD_VAR 0 7
70753: PUSH
70754: LD_INT 2
70756: ARRAY
70757: PPUSH
70758: LD_VAR 0 3
70762: PPUSH
70763: CALL_OW 48
// result := IsPlaced ( unit ) ;
70767: LD_ADDR_VAR 0 4
70771: PUSH
70772: LD_VAR 0 1
70776: PPUSH
70777: CALL_OW 305
70781: ST_TO_ADDR
// exit ;
70782: POP
70783: POP
70784: GO 70790
// end ; end ;
70786: GO 70665
70788: POP
70789: POP
// end ;
70790: LD_VAR 0 4
70794: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70795: LD_INT 0
70797: PPUSH
70798: PPUSH
70799: PPUSH
// if not side or side > 8 then
70800: LD_VAR 0 1
70804: NOT
70805: PUSH
70806: LD_VAR 0 1
70810: PUSH
70811: LD_INT 8
70813: GREATER
70814: OR
70815: IFFALSE 70819
// exit ;
70817: GO 71006
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70819: LD_ADDR_VAR 0 4
70823: PUSH
70824: LD_INT 22
70826: PUSH
70827: LD_VAR 0 1
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 21
70838: PUSH
70839: LD_INT 3
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PPUSH
70850: CALL_OW 69
70854: ST_TO_ADDR
// if not tmp then
70855: LD_VAR 0 4
70859: NOT
70860: IFFALSE 70864
// exit ;
70862: GO 71006
// enable_addtolog := true ;
70864: LD_ADDR_OWVAR 81
70868: PUSH
70869: LD_INT 1
70871: ST_TO_ADDR
// AddToLog ( [ ) ;
70872: LD_STRING [
70874: PPUSH
70875: CALL_OW 561
// for i in tmp do
70879: LD_ADDR_VAR 0 3
70883: PUSH
70884: LD_VAR 0 4
70888: PUSH
70889: FOR_IN
70890: IFFALSE 70997
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70892: LD_STRING [
70894: PUSH
70895: LD_VAR 0 3
70899: PPUSH
70900: CALL_OW 266
70904: STR
70905: PUSH
70906: LD_STRING , 
70908: STR
70909: PUSH
70910: LD_VAR 0 3
70914: PPUSH
70915: CALL_OW 250
70919: STR
70920: PUSH
70921: LD_STRING , 
70923: STR
70924: PUSH
70925: LD_VAR 0 3
70929: PPUSH
70930: CALL_OW 251
70934: STR
70935: PUSH
70936: LD_STRING , 
70938: STR
70939: PUSH
70940: LD_VAR 0 3
70944: PPUSH
70945: CALL_OW 254
70949: STR
70950: PUSH
70951: LD_STRING , 
70953: STR
70954: PUSH
70955: LD_VAR 0 3
70959: PPUSH
70960: LD_INT 1
70962: PPUSH
70963: CALL_OW 268
70967: STR
70968: PUSH
70969: LD_STRING , 
70971: STR
70972: PUSH
70973: LD_VAR 0 3
70977: PPUSH
70978: LD_INT 2
70980: PPUSH
70981: CALL_OW 268
70985: STR
70986: PUSH
70987: LD_STRING ],
70989: STR
70990: PPUSH
70991: CALL_OW 561
// end ;
70995: GO 70889
70997: POP
70998: POP
// AddToLog ( ]; ) ;
70999: LD_STRING ];
71001: PPUSH
71002: CALL_OW 561
// end ;
71006: LD_VAR 0 2
71010: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71011: LD_INT 0
71013: PPUSH
71014: PPUSH
71015: PPUSH
71016: PPUSH
71017: PPUSH
// if not area or not rate or not max then
71018: LD_VAR 0 1
71022: NOT
71023: PUSH
71024: LD_VAR 0 2
71028: NOT
71029: OR
71030: PUSH
71031: LD_VAR 0 4
71035: NOT
71036: OR
71037: IFFALSE 71041
// exit ;
71039: GO 71233
// while 1 do
71041: LD_INT 1
71043: IFFALSE 71233
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71045: LD_ADDR_VAR 0 9
71049: PUSH
71050: LD_VAR 0 1
71054: PPUSH
71055: LD_INT 1
71057: PPUSH
71058: CALL_OW 287
71062: PUSH
71063: LD_INT 10
71065: MUL
71066: ST_TO_ADDR
// r := rate / 10 ;
71067: LD_ADDR_VAR 0 7
71071: PUSH
71072: LD_VAR 0 2
71076: PUSH
71077: LD_INT 10
71079: DIVREAL
71080: ST_TO_ADDR
// time := 1 1$00 ;
71081: LD_ADDR_VAR 0 8
71085: PUSH
71086: LD_INT 2100
71088: ST_TO_ADDR
// if amount < min then
71089: LD_VAR 0 9
71093: PUSH
71094: LD_VAR 0 3
71098: LESS
71099: IFFALSE 71117
// r := r * 2 else
71101: LD_ADDR_VAR 0 7
71105: PUSH
71106: LD_VAR 0 7
71110: PUSH
71111: LD_INT 2
71113: MUL
71114: ST_TO_ADDR
71115: GO 71143
// if amount > max then
71117: LD_VAR 0 9
71121: PUSH
71122: LD_VAR 0 4
71126: GREATER
71127: IFFALSE 71143
// r := r / 2 ;
71129: LD_ADDR_VAR 0 7
71133: PUSH
71134: LD_VAR 0 7
71138: PUSH
71139: LD_INT 2
71141: DIVREAL
71142: ST_TO_ADDR
// time := time / r ;
71143: LD_ADDR_VAR 0 8
71147: PUSH
71148: LD_VAR 0 8
71152: PUSH
71153: LD_VAR 0 7
71157: DIVREAL
71158: ST_TO_ADDR
// if time < 0 then
71159: LD_VAR 0 8
71163: PUSH
71164: LD_INT 0
71166: LESS
71167: IFFALSE 71184
// time := time * - 1 ;
71169: LD_ADDR_VAR 0 8
71173: PUSH
71174: LD_VAR 0 8
71178: PUSH
71179: LD_INT 1
71181: NEG
71182: MUL
71183: ST_TO_ADDR
// wait ( time ) ;
71184: LD_VAR 0 8
71188: PPUSH
71189: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71193: LD_INT 35
71195: PPUSH
71196: LD_INT 875
71198: PPUSH
71199: CALL_OW 12
71203: PPUSH
71204: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71208: LD_INT 1
71210: PPUSH
71211: LD_INT 5
71213: PPUSH
71214: CALL_OW 12
71218: PPUSH
71219: LD_VAR 0 1
71223: PPUSH
71224: LD_INT 1
71226: PPUSH
71227: CALL_OW 55
// end ;
71231: GO 71041
// end ;
71233: LD_VAR 0 5
71237: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71238: LD_INT 0
71240: PPUSH
71241: PPUSH
71242: PPUSH
71243: PPUSH
71244: PPUSH
71245: PPUSH
71246: PPUSH
71247: PPUSH
// if not turrets or not factories then
71248: LD_VAR 0 1
71252: NOT
71253: PUSH
71254: LD_VAR 0 2
71258: NOT
71259: OR
71260: IFFALSE 71264
// exit ;
71262: GO 71571
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71264: LD_ADDR_VAR 0 10
71268: PUSH
71269: LD_INT 5
71271: PUSH
71272: LD_INT 6
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 2
71281: PUSH
71282: LD_INT 4
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 3
71291: PUSH
71292: LD_INT 5
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: EMPTY
71300: LIST
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 24
71306: PUSH
71307: LD_INT 25
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 23
71316: PUSH
71317: LD_INT 27
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: EMPTY
71325: LIST
71326: LIST
71327: PUSH
71328: LD_INT 42
71330: PUSH
71331: LD_INT 43
71333: PUSH
71334: EMPTY
71335: LIST
71336: LIST
71337: PUSH
71338: LD_INT 44
71340: PUSH
71341: LD_INT 46
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 45
71350: PUSH
71351: LD_INT 47
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: LIST
71367: ST_TO_ADDR
// result := [ ] ;
71368: LD_ADDR_VAR 0 3
71372: PUSH
71373: EMPTY
71374: ST_TO_ADDR
// for i in turrets do
71375: LD_ADDR_VAR 0 4
71379: PUSH
71380: LD_VAR 0 1
71384: PUSH
71385: FOR_IN
71386: IFFALSE 71569
// begin nat := GetNation ( i ) ;
71388: LD_ADDR_VAR 0 7
71392: PUSH
71393: LD_VAR 0 4
71397: PPUSH
71398: CALL_OW 248
71402: ST_TO_ADDR
// weapon := 0 ;
71403: LD_ADDR_VAR 0 8
71407: PUSH
71408: LD_INT 0
71410: ST_TO_ADDR
// if not nat then
71411: LD_VAR 0 7
71415: NOT
71416: IFFALSE 71420
// continue ;
71418: GO 71385
// for j in list [ nat ] do
71420: LD_ADDR_VAR 0 5
71424: PUSH
71425: LD_VAR 0 10
71429: PUSH
71430: LD_VAR 0 7
71434: ARRAY
71435: PUSH
71436: FOR_IN
71437: IFFALSE 71478
// if GetBWeapon ( i ) = j [ 1 ] then
71439: LD_VAR 0 4
71443: PPUSH
71444: CALL_OW 269
71448: PUSH
71449: LD_VAR 0 5
71453: PUSH
71454: LD_INT 1
71456: ARRAY
71457: EQUAL
71458: IFFALSE 71476
// begin weapon := j [ 2 ] ;
71460: LD_ADDR_VAR 0 8
71464: PUSH
71465: LD_VAR 0 5
71469: PUSH
71470: LD_INT 2
71472: ARRAY
71473: ST_TO_ADDR
// break ;
71474: GO 71478
// end ;
71476: GO 71436
71478: POP
71479: POP
// if not weapon then
71480: LD_VAR 0 8
71484: NOT
71485: IFFALSE 71489
// continue ;
71487: GO 71385
// for k in factories do
71489: LD_ADDR_VAR 0 6
71493: PUSH
71494: LD_VAR 0 2
71498: PUSH
71499: FOR_IN
71500: IFFALSE 71565
// begin weapons := AvailableWeaponList ( k ) ;
71502: LD_ADDR_VAR 0 9
71506: PUSH
71507: LD_VAR 0 6
71511: PPUSH
71512: CALL_OW 478
71516: ST_TO_ADDR
// if not weapons then
71517: LD_VAR 0 9
71521: NOT
71522: IFFALSE 71526
// continue ;
71524: GO 71499
// if weapon in weapons then
71526: LD_VAR 0 8
71530: PUSH
71531: LD_VAR 0 9
71535: IN
71536: IFFALSE 71563
// begin result := [ i , weapon ] ;
71538: LD_ADDR_VAR 0 3
71542: PUSH
71543: LD_VAR 0 4
71547: PUSH
71548: LD_VAR 0 8
71552: PUSH
71553: EMPTY
71554: LIST
71555: LIST
71556: ST_TO_ADDR
// exit ;
71557: POP
71558: POP
71559: POP
71560: POP
71561: GO 71571
// end ; end ;
71563: GO 71499
71565: POP
71566: POP
// end ;
71567: GO 71385
71569: POP
71570: POP
// end ;
71571: LD_VAR 0 3
71575: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71576: LD_INT 0
71578: PPUSH
// if not side or side > 8 then
71579: LD_VAR 0 3
71583: NOT
71584: PUSH
71585: LD_VAR 0 3
71589: PUSH
71590: LD_INT 8
71592: GREATER
71593: OR
71594: IFFALSE 71598
// exit ;
71596: GO 71657
// if not range then
71598: LD_VAR 0 4
71602: NOT
71603: IFFALSE 71614
// range := - 12 ;
71605: LD_ADDR_VAR 0 4
71609: PUSH
71610: LD_INT 12
71612: NEG
71613: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71614: LD_VAR 0 1
71618: PPUSH
71619: LD_VAR 0 2
71623: PPUSH
71624: LD_VAR 0 3
71628: PPUSH
71629: LD_VAR 0 4
71633: PPUSH
71634: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71638: LD_VAR 0 1
71642: PPUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 331
// end ;
71657: LD_VAR 0 5
71661: RET
// export function Video ( mode ) ; begin
71662: LD_INT 0
71664: PPUSH
// ingame_video = mode ;
71665: LD_ADDR_OWVAR 52
71669: PUSH
71670: LD_VAR 0 1
71674: ST_TO_ADDR
// interface_hidden = mode ;
71675: LD_ADDR_OWVAR 54
71679: PUSH
71680: LD_VAR 0 1
71684: ST_TO_ADDR
// end ;
71685: LD_VAR 0 2
71689: RET
// export function Join ( array , element ) ; begin
71690: LD_INT 0
71692: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71693: LD_ADDR_VAR 0 3
71697: PUSH
71698: LD_VAR 0 1
71702: PPUSH
71703: LD_VAR 0 1
71707: PUSH
71708: LD_INT 1
71710: PLUS
71711: PPUSH
71712: LD_VAR 0 2
71716: PPUSH
71717: CALL_OW 1
71721: ST_TO_ADDR
// end ;
71722: LD_VAR 0 3
71726: RET
// export function JoinUnion ( array , element ) ; begin
71727: LD_INT 0
71729: PPUSH
// result := array union element ;
71730: LD_ADDR_VAR 0 3
71734: PUSH
71735: LD_VAR 0 1
71739: PUSH
71740: LD_VAR 0 2
71744: UNION
71745: ST_TO_ADDR
// end ;
71746: LD_VAR 0 3
71750: RET
// export function GetBehemoths ( side ) ; begin
71751: LD_INT 0
71753: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71754: LD_ADDR_VAR 0 2
71758: PUSH
71759: LD_INT 22
71761: PUSH
71762: LD_VAR 0 1
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 31
71773: PUSH
71774: LD_INT 25
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PPUSH
71785: CALL_OW 69
71789: ST_TO_ADDR
// end ;
71790: LD_VAR 0 2
71794: RET
// export function Shuffle ( array ) ; var i , index ; begin
71795: LD_INT 0
71797: PPUSH
71798: PPUSH
71799: PPUSH
// result := [ ] ;
71800: LD_ADDR_VAR 0 2
71804: PUSH
71805: EMPTY
71806: ST_TO_ADDR
// if not array then
71807: LD_VAR 0 1
71811: NOT
71812: IFFALSE 71816
// exit ;
71814: GO 71915
// Randomize ;
71816: CALL_OW 10
// for i = array downto 1 do
71820: LD_ADDR_VAR 0 3
71824: PUSH
71825: DOUBLE
71826: LD_VAR 0 1
71830: INC
71831: ST_TO_ADDR
71832: LD_INT 1
71834: PUSH
71835: FOR_DOWNTO
71836: IFFALSE 71913
// begin index := rand ( 1 , array ) ;
71838: LD_ADDR_VAR 0 4
71842: PUSH
71843: LD_INT 1
71845: PPUSH
71846: LD_VAR 0 1
71850: PPUSH
71851: CALL_OW 12
71855: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71856: LD_ADDR_VAR 0 2
71860: PUSH
71861: LD_VAR 0 2
71865: PPUSH
71866: LD_VAR 0 2
71870: PUSH
71871: LD_INT 1
71873: PLUS
71874: PPUSH
71875: LD_VAR 0 1
71879: PUSH
71880: LD_VAR 0 4
71884: ARRAY
71885: PPUSH
71886: CALL_OW 2
71890: ST_TO_ADDR
// array := Delete ( array , index ) ;
71891: LD_ADDR_VAR 0 1
71895: PUSH
71896: LD_VAR 0 1
71900: PPUSH
71901: LD_VAR 0 4
71905: PPUSH
71906: CALL_OW 3
71910: ST_TO_ADDR
// end ;
71911: GO 71835
71913: POP
71914: POP
// end ;
71915: LD_VAR 0 2
71919: RET
// export function GetBaseMaterials ( base ) ; begin
71920: LD_INT 0
71922: PPUSH
// result := [ 0 , 0 , 0 ] ;
71923: LD_ADDR_VAR 0 2
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: LD_INT 0
71933: PUSH
71934: LD_INT 0
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: LIST
71941: ST_TO_ADDR
// if not base then
71942: LD_VAR 0 1
71946: NOT
71947: IFFALSE 71951
// exit ;
71949: GO 72000
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71951: LD_ADDR_VAR 0 2
71955: PUSH
71956: LD_VAR 0 1
71960: PPUSH
71961: LD_INT 1
71963: PPUSH
71964: CALL_OW 275
71968: PUSH
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_INT 2
71976: PPUSH
71977: CALL_OW 275
71981: PUSH
71982: LD_VAR 0 1
71986: PPUSH
71987: LD_INT 3
71989: PPUSH
71990: CALL_OW 275
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: LIST
71999: ST_TO_ADDR
// end ;
72000: LD_VAR 0 2
72004: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72005: LD_INT 0
72007: PPUSH
72008: PPUSH
// result := array ;
72009: LD_ADDR_VAR 0 3
72013: PUSH
72014: LD_VAR 0 1
72018: ST_TO_ADDR
// if size > 0 then
72019: LD_VAR 0 2
72023: PUSH
72024: LD_INT 0
72026: GREATER
72027: IFFALSE 72073
// for i := array downto size do
72029: LD_ADDR_VAR 0 4
72033: PUSH
72034: DOUBLE
72035: LD_VAR 0 1
72039: INC
72040: ST_TO_ADDR
72041: LD_VAR 0 2
72045: PUSH
72046: FOR_DOWNTO
72047: IFFALSE 72071
// result := Delete ( result , result ) ;
72049: LD_ADDR_VAR 0 3
72053: PUSH
72054: LD_VAR 0 3
72058: PPUSH
72059: LD_VAR 0 3
72063: PPUSH
72064: CALL_OW 3
72068: ST_TO_ADDR
72069: GO 72046
72071: POP
72072: POP
// end ;
72073: LD_VAR 0 3
72077: RET
// export function ComExit ( unit ) ; var tmp ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
// if not IsInUnit ( unit ) then
72082: LD_VAR 0 1
72086: PPUSH
72087: CALL_OW 310
72091: NOT
72092: IFFALSE 72096
// exit ;
72094: GO 72156
// tmp := IsInUnit ( unit ) ;
72096: LD_ADDR_VAR 0 3
72100: PUSH
72101: LD_VAR 0 1
72105: PPUSH
72106: CALL_OW 310
72110: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72111: LD_VAR 0 3
72115: PPUSH
72116: CALL_OW 247
72120: PUSH
72121: LD_INT 2
72123: EQUAL
72124: IFFALSE 72137
// ComExitVehicle ( unit ) else
72126: LD_VAR 0 1
72130: PPUSH
72131: CALL_OW 121
72135: GO 72146
// ComExitBuilding ( unit ) ;
72137: LD_VAR 0 1
72141: PPUSH
72142: CALL_OW 122
// result := tmp ;
72146: LD_ADDR_VAR 0 2
72150: PUSH
72151: LD_VAR 0 3
72155: ST_TO_ADDR
// end ;
72156: LD_VAR 0 2
72160: RET
// export function ResetHc ; begin
72161: LD_INT 0
72163: PPUSH
// InitHc ;
72164: CALL_OW 19
// hc_importance := 0 ;
72168: LD_ADDR_OWVAR 32
72172: PUSH
72173: LD_INT 0
72175: ST_TO_ADDR
// end ;
72176: LD_VAR 0 1
72180: RET
