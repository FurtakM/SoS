// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareAliance ;
   4: CALL 87 0 0
// Action ;
   8: CALL 1656 0 0
// end ;
  12: END
// export main_time , us_time , al_time , start_timer ; function PrepareTriggers ; begin
  13: LD_INT 0
  15: PPUSH
// main_time = 0 ;
  16: LD_ADDR_EXP 1
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// us_time = [ 9 9$00 , 7 7$00 , 5 5$00 ] [ Difficulty ] ;
  24: LD_ADDR_EXP 2
  28: PUSH
  29: LD_INT 18900
  31: PUSH
  32: LD_INT 14700
  34: PUSH
  35: LD_INT 10500
  37: PUSH
  38: EMPTY
  39: LIST
  40: LIST
  41: LIST
  42: PUSH
  43: LD_OWVAR 67
  47: ARRAY
  48: ST_TO_ADDR
// al_time = [ 42 42$00 , 46 46$00 , 50 50$00 ] [ Difficulty ] ;
  49: LD_ADDR_EXP 3
  53: PUSH
  54: LD_INT 88200
  56: PUSH
  57: LD_INT 96600
  59: PUSH
  60: LD_INT 105000
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: PUSH
  68: LD_OWVAR 67
  72: ARRAY
  73: ST_TO_ADDR
// start_timer = false ;
  74: LD_ADDR_EXP 4
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// end ; end_of_file
  82: LD_VAR 0 1
  86: RET
// export tim , kir , john , lee , mario , savil , oscar , valentin , tilly , ryan ; export veh_x_ready , vehx ; export function PrepareAliance ; var force , i , veh , tim_team , un ; begin
  87: LD_INT 0
  89: PPUSH
  90: PPUSH
  91: PPUSH
  92: PPUSH
  93: PPUSH
  94: PPUSH
// uc_side := 5 ;
  95: LD_ADDR_OWVAR 20
  99: PUSH
 100: LD_INT 5
 102: ST_TO_ADDR
// uc_nation = 1 ;
 103: LD_ADDR_OWVAR 21
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hc_sex := sex_male ;
 111: LD_ADDR_OWVAR 27
 115: PUSH
 116: LD_INT 1
 118: ST_TO_ADDR
// hc_gallery := sandal ;
 119: LD_ADDR_OWVAR 33
 123: PUSH
 124: LD_STRING sandal
 126: ST_TO_ADDR
// hc_face_number := 7 ;
 127: LD_ADDR_OWVAR 34
 131: PUSH
 132: LD_INT 7
 134: ST_TO_ADDR
// hc_class = 2 ;
 135: LD_ADDR_OWVAR 28
 139: PUSH
 140: LD_INT 2
 142: ST_TO_ADDR
// hc_skills = [ 4 , 8 , 6 , 3 ] ;
 143: LD_ADDR_OWVAR 31
 147: PUSH
 148: LD_INT 4
 150: PUSH
 151: LD_INT 8
 153: PUSH
 154: LD_INT 6
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: ST_TO_ADDR
// hc_name = Mario T. Buck ;
 166: LD_ADDR_OWVAR 26
 170: PUSH
 171: LD_STRING Mario T. Buck
 173: ST_TO_ADDR
// hc_attr = [ 11 , 10 ] ;
 174: LD_ADDR_OWVAR 29
 178: PUSH
 179: LD_INT 11
 181: PUSH
 182: LD_INT 10
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: ST_TO_ADDR
// mario := CreateHuman ;
 189: LD_ADDR_EXP 9
 193: PUSH
 194: CALL_OW 44
 198: ST_TO_ADDR
// PlaceUnitXY ( mario , 56 , 25 , false ) ;
 199: LD_EXP 9
 203: PPUSH
 204: LD_INT 56
 206: PPUSH
 207: LD_INT 25
 209: PPUSH
 210: LD_INT 0
 212: PPUSH
 213: CALL_OW 48
// hc_gallery := sandal ;
 217: LD_ADDR_OWVAR 33
 221: PUSH
 222: LD_STRING sandal
 224: ST_TO_ADDR
// hc_face_number := 8 ;
 225: LD_ADDR_OWVAR 34
 229: PUSH
 230: LD_INT 8
 232: ST_TO_ADDR
// hc_class = 4 ;
 233: LD_ADDR_OWVAR 28
 237: PUSH
 238: LD_INT 4
 240: ST_TO_ADDR
// hc_skills = [ 7 , 6 , 5 , 9 ] ;
 241: LD_ADDR_OWVAR 31
 245: PUSH
 246: LD_INT 7
 248: PUSH
 249: LD_INT 6
 251: PUSH
 252: LD_INT 5
 254: PUSH
 255: LD_INT 9
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// hc_name = Saville Marcil ;
 264: LD_ADDR_OWVAR 26
 268: PUSH
 269: LD_STRING Saville Marcil
 271: ST_TO_ADDR
// hc_attr = [ 10 , 10 ] ;
 272: LD_ADDR_OWVAR 29
 276: PUSH
 277: LD_INT 10
 279: PUSH
 280: LD_INT 10
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: ST_TO_ADDR
// savil := CreateHuman ;
 287: LD_ADDR_EXP 10
 291: PUSH
 292: CALL_OW 44
 296: ST_TO_ADDR
// PlaceUnitXY ( savil , 78 , 32 , false ) ;
 297: LD_EXP 10
 301: PPUSH
 302: LD_INT 78
 304: PPUSH
 305: LD_INT 32
 307: PPUSH
 308: LD_INT 0
 310: PPUSH
 311: CALL_OW 48
// hc_gallery := sandal ;
 315: LD_ADDR_OWVAR 33
 319: PUSH
 320: LD_STRING sandal
 322: ST_TO_ADDR
// hc_face_number := 6 ;
 323: LD_ADDR_OWVAR 34
 327: PUSH
 328: LD_INT 6
 330: ST_TO_ADDR
// hc_class = 1 ;
 331: LD_ADDR_OWVAR 28
 335: PUSH
 336: LD_INT 1
 338: ST_TO_ADDR
// hc_skills = [ 9 , 8 , 4 , 3 ] ;
 339: LD_ADDR_OWVAR 31
 343: PUSH
 344: LD_INT 9
 346: PUSH
 347: LD_INT 8
 349: PUSH
 350: LD_INT 4
 352: PUSH
 353: LD_INT 3
 355: PUSH
 356: EMPTY
 357: LIST
 358: LIST
 359: LIST
 360: LIST
 361: ST_TO_ADDR
// hc_name = Oscar Bradley ;
 362: LD_ADDR_OWVAR 26
 366: PUSH
 367: LD_STRING Oscar Bradley
 369: ST_TO_ADDR
// hc_attr = [ 12 , 11 ] ;
 370: LD_ADDR_OWVAR 29
 374: PUSH
 375: LD_INT 12
 377: PUSH
 378: LD_INT 11
 380: PUSH
 381: EMPTY
 382: LIST
 383: LIST
 384: ST_TO_ADDR
// oscar := CreateHuman ;
 385: LD_ADDR_EXP 11
 389: PUSH
 390: CALL_OW 44
 394: ST_TO_ADDR
// PlaceUnitXY ( oscar , 66 , 30 , false ) ;
 395: LD_EXP 11
 399: PPUSH
 400: LD_INT 66
 402: PPUSH
 403: LD_INT 30
 405: PPUSH
 406: LD_INT 0
 408: PPUSH
 409: CALL_OW 48
// uc_nation := nation_russian ;
 413: LD_ADDR_OWVAR 21
 417: PUSH
 418: LD_INT 3
 420: ST_TO_ADDR
// hc_gallery := sandal ;
 421: LD_ADDR_OWVAR 33
 425: PUSH
 426: LD_STRING sandal
 428: ST_TO_ADDR
// hc_face_number := 9 ;
 429: LD_ADDR_OWVAR 34
 433: PUSH
 434: LD_INT 9
 436: ST_TO_ADDR
// hc_class = 3 ;
 437: LD_ADDR_OWVAR 28
 441: PUSH
 442: LD_INT 3
 444: ST_TO_ADDR
// hc_skills = [ 4 , 7 , 8 , 8 ] ;
 445: LD_ADDR_OWVAR 31
 449: PUSH
 450: LD_INT 4
 452: PUSH
 453: LD_INT 7
 455: PUSH
 456: LD_INT 8
 458: PUSH
 459: LD_INT 8
 461: PUSH
 462: EMPTY
 463: LIST
 464: LIST
 465: LIST
 466: LIST
 467: ST_TO_ADDR
// hc_name = Valentine Pokrovskii ;
 468: LD_ADDR_OWVAR 26
 472: PUSH
 473: LD_STRING Valentine Pokrovskii
 475: ST_TO_ADDR
// hc_attr = [ 9 , 9 ] ;
 476: LD_ADDR_OWVAR 29
 480: PUSH
 481: LD_INT 9
 483: PUSH
 484: LD_INT 9
 486: PUSH
 487: EMPTY
 488: LIST
 489: LIST
 490: ST_TO_ADDR
// valentin := CreateHuman ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: CALL_OW 44
 500: ST_TO_ADDR
// PlaceUnitXY ( valentin , 47 , 18 , false ) ;
 501: LD_EXP 12
 505: PPUSH
 506: LD_INT 47
 508: PPUSH
 509: LD_INT 18
 511: PPUSH
 512: LD_INT 0
 514: PPUSH
 515: CALL_OW 48
// uc_nation := nation_american ;
 519: LD_ADDR_OWVAR 21
 523: PUSH
 524: LD_INT 1
 526: ST_TO_ADDR
// hc_sex := sex_female ;
 527: LD_ADDR_OWVAR 27
 531: PUSH
 532: LD_INT 2
 534: ST_TO_ADDR
// hc_gallery := sandal ;
 535: LD_ADDR_OWVAR 33
 539: PUSH
 540: LD_STRING sandal
 542: ST_TO_ADDR
// hc_face_number := 10 ;
 543: LD_ADDR_OWVAR 34
 547: PUSH
 548: LD_INT 10
 550: ST_TO_ADDR
// hc_class = 3 ;
 551: LD_ADDR_OWVAR 28
 555: PUSH
 556: LD_INT 3
 558: ST_TO_ADDR
// hc_skills = [ 7 , 5 , 10 , 4 ] ;
 559: LD_ADDR_OWVAR 31
 563: PUSH
 564: LD_INT 7
 566: PUSH
 567: LD_INT 5
 569: PUSH
 570: LD_INT 10
 572: PUSH
 573: LD_INT 4
 575: PUSH
 576: EMPTY
 577: LIST
 578: LIST
 579: LIST
 580: LIST
 581: ST_TO_ADDR
// hc_name = Tilly Fisher ;
 582: LD_ADDR_OWVAR 26
 586: PUSH
 587: LD_STRING Tilly Fisher
 589: ST_TO_ADDR
// hc_attr = [ 11 , 9 ] ;
 590: LD_ADDR_OWVAR 29
 594: PUSH
 595: LD_INT 11
 597: PUSH
 598: LD_INT 9
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: ST_TO_ADDR
// tilly := CreateHuman ;
 605: LD_ADDR_EXP 13
 609: PUSH
 610: CALL_OW 44
 614: ST_TO_ADDR
// PlaceUnitXY ( tilly , 68 , 28 , false ) ;
 615: LD_EXP 13
 619: PPUSH
 620: LD_INT 68
 622: PPUSH
 623: LD_INT 28
 625: PPUSH
 626: LD_INT 0
 628: PPUSH
 629: CALL_OW 48
// hc_gallery := sandal ;
 633: LD_ADDR_OWVAR 33
 637: PUSH
 638: LD_STRING sandal
 640: ST_TO_ADDR
// hc_face_number := 11 ;
 641: LD_ADDR_OWVAR 34
 645: PUSH
 646: LD_INT 11
 648: ST_TO_ADDR
// hc_class = 2 ;
 649: LD_ADDR_OWVAR 28
 653: PUSH
 654: LD_INT 2
 656: ST_TO_ADDR
// hc_skills = [ 7 , 9 , 5 , 6 ] ;
 657: LD_ADDR_OWVAR 31
 661: PUSH
 662: LD_INT 7
 664: PUSH
 665: LD_INT 9
 667: PUSH
 668: LD_INT 5
 670: PUSH
 671: LD_INT 6
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: ST_TO_ADDR
// hc_name = Bethany Ryan ;
 680: LD_ADDR_OWVAR 26
 684: PUSH
 685: LD_STRING Bethany Ryan
 687: ST_TO_ADDR
// hc_attr = [ 12 , 9 ] ;
 688: LD_ADDR_OWVAR 29
 692: PUSH
 693: LD_INT 12
 695: PUSH
 696: LD_INT 9
 698: PUSH
 699: EMPTY
 700: LIST
 701: LIST
 702: ST_TO_ADDR
// ryan := CreateHuman ;
 703: LD_ADDR_EXP 14
 707: PUSH
 708: CALL_OW 44
 712: ST_TO_ADDR
// PlaceUnitXY ( ryan , 64 , 24 , false ) ;
 713: LD_EXP 14
 717: PPUSH
 718: LD_INT 64
 720: PPUSH
 721: LD_INT 24
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 48
// SetSide ( FilterAllUnits ( [ f_side , 7 ] ) , 5 ) ;
 731: LD_INT 22
 733: PUSH
 734: LD_INT 7
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: PPUSH
 746: LD_INT 5
 748: PPUSH
 749: CALL_OW 235
// uc_side := 7 ;
 753: LD_ADDR_OWVAR 20
 757: PUSH
 758: LD_INT 7
 760: ST_TO_ADDR
// uc_nation := nation_american ;
 761: LD_ADDR_OWVAR 21
 765: PUSH
 766: LD_INT 1
 768: ST_TO_ADDR
// if TestCharacters ( lee ) then
 769: LD_STRING lee
 771: PPUSH
 772: CALL_OW 28
 776: IFFALSE 791
// lee := CreateCharacter ( lee ) ;
 778: LD_ADDR_EXP 8
 782: PUSH
 783: LD_STRING lee
 785: PPUSH
 786: CALL_OW 34
 790: ST_TO_ADDR
// if TestCharacters ( john ) then
 791: LD_STRING john
 793: PPUSH
 794: CALL_OW 28
 798: IFFALSE 813
// john := CreateCharacter ( john ) ;
 800: LD_ADDR_EXP 7
 804: PUSH
 805: LD_STRING john
 807: PPUSH
 808: CALL_OW 34
 812: ST_TO_ADDR
// uc_nation := nation_russian ;
 813: LD_ADDR_OWVAR 21
 817: PUSH
 818: LD_INT 3
 820: ST_TO_ADDR
// if TestCharacters ( tim ) then
 821: LD_STRING tim
 823: PPUSH
 824: CALL_OW 28
 828: IFFALSE 843
// tim := CreateCharacter ( tim ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING tim
 837: PPUSH
 838: CALL_OW 34
 842: ST_TO_ADDR
// if TestCharacters ( kir ) then
 843: LD_STRING kir
 845: PPUSH
 846: CALL_OW 28
 850: IFFALSE 865
// kir := CreateCharacter ( kir ) ;
 852: LD_ADDR_EXP 6
 856: PUSH
 857: LD_STRING kir
 859: PPUSH
 860: CALL_OW 34
 864: ST_TO_ADDR
// tim_team := [ tim , tim , kir , lee , john ] ;
 865: LD_ADDR_VAR 0 5
 869: PUSH
 870: LD_EXP 5
 874: PUSH
 875: LD_EXP 5
 879: PUSH
 880: LD_EXP 6
 884: PUSH
 885: LD_EXP 8
 889: PUSH
 890: LD_EXP 7
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: LIST
 899: LIST
 900: LIST
 901: ST_TO_ADDR
// veh_x_ready := LoadVariable ( hackveh-save , 0 ) ;
 902: LD_ADDR_EXP 15
 906: PUSH
 907: LD_STRING hackveh-save
 909: PPUSH
 910: LD_INT 0
 912: PPUSH
 913: CALL_OW 30
 917: ST_TO_ADDR
// uc_nation = nation_american ;
 918: LD_ADDR_OWVAR 21
 922: PUSH
 923: LD_INT 1
 925: ST_TO_ADDR
// if veh_x_ready = 0 then
 926: LD_EXP 15
 930: PUSH
 931: LD_INT 0
 933: EQUAL
 934: IFFALSE 993
// begin vc_chassis := us_morphling ;
 936: LD_ADDR_OWVAR 37
 940: PUSH
 941: LD_INT 5
 943: ST_TO_ADDR
// vc_engine := engine_siberite ;
 944: LD_ADDR_OWVAR 39
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// vc_control := control_computer ;
 952: LD_ADDR_OWVAR 38
 956: PUSH
 957: LD_INT 3
 959: ST_TO_ADDR
// vc_weapon := 99 ;
 960: LD_ADDR_OWVAR 40
 964: PUSH
 965: LD_INT 99
 967: ST_TO_ADDR
// vehx := CreateVehicle ;
 968: LD_ADDR_EXP 16
 972: PUSH
 973: CALL_OW 45
 977: ST_TO_ADDR
// PlaceUnitArea ( vehx , start_spawn_al , false ) ;
 978: LD_EXP 16
 982: PPUSH
 983: LD_INT 1
 985: PPUSH
 986: LD_INT 0
 988: PPUSH
 989: CALL_OW 49
// end ; vc_chassis := us_morphling ;
 993: LD_ADDR_OWVAR 37
 997: PUSH
 998: LD_INT 5
1000: ST_TO_ADDR
// vc_engine := engine_siberite ;
1001: LD_ADDR_OWVAR 39
1005: PUSH
1006: LD_INT 3
1008: ST_TO_ADDR
// vc_control := control_manual ;
1009: LD_ADDR_OWVAR 38
1013: PUSH
1014: LD_INT 1
1016: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
1017: LD_ADDR_OWVAR 40
1021: PUSH
1022: LD_INT 6
1024: ST_TO_ADDR
// for i = 1 to 2 do
1025: LD_ADDR_VAR 0 3
1029: PUSH
1030: DOUBLE
1031: LD_INT 1
1033: DEC
1034: ST_TO_ADDR
1035: LD_INT 2
1037: PUSH
1038: FOR_TO
1039: IFFALSE 1084
// begin veh := CreateVehicle ;
1041: LD_ADDR_VAR 0 4
1045: PUSH
1046: CALL_OW 45
1050: ST_TO_ADDR
// PlaceUnitArea ( veh , start_spawn_al , false ) ;
1051: LD_VAR 0 4
1055: PPUSH
1056: LD_INT 1
1058: PPUSH
1059: LD_INT 0
1061: PPUSH
1062: CALL_OW 49
// force := force ^ veh ;
1066: LD_ADDR_VAR 0 2
1070: PUSH
1071: LD_VAR 0 2
1075: PUSH
1076: LD_VAR 0 4
1080: ADD
1081: ST_TO_ADDR
// end ;
1082: GO 1038
1084: POP
1085: POP
// vc_weapon := us_bulldozer ;
1086: LD_ADDR_OWVAR 40
1090: PUSH
1091: LD_INT 14
1093: ST_TO_ADDR
// veh := CreateVehicle ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: CALL_OW 45
1103: ST_TO_ADDR
// PlaceUnitArea ( veh , start_spawn_al , false ) ;
1104: LD_VAR 0 4
1108: PPUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 0
1114: PPUSH
1115: CALL_OW 49
// force := force ^ veh ;
1119: LD_ADDR_VAR 0 2
1123: PUSH
1124: LD_VAR 0 2
1128: PUSH
1129: LD_VAR 0 4
1133: ADD
1134: ST_TO_ADDR
// uc_nation = nation_russian ;
1135: LD_ADDR_OWVAR 21
1139: PUSH
1140: LD_INT 3
1142: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
1143: LD_ADDR_OWVAR 37
1147: PUSH
1148: LD_INT 22
1150: ST_TO_ADDR
// vc_engine := engine_siberite ;
1151: LD_ADDR_OWVAR 39
1155: PUSH
1156: LD_INT 3
1158: ST_TO_ADDR
// vc_control := control_manual ;
1159: LD_ADDR_OWVAR 38
1163: PUSH
1164: LD_INT 1
1166: ST_TO_ADDR
// vc_weapon := ru_rocket_launcher ;
1167: LD_ADDR_OWVAR 40
1171: PUSH
1172: LD_INT 45
1174: ST_TO_ADDR
// veh := CreateVehicle ;
1175: LD_ADDR_VAR 0 4
1179: PUSH
1180: CALL_OW 45
1184: ST_TO_ADDR
// PlaceUnitArea ( veh , start_spawn_al , false ) ;
1185: LD_VAR 0 4
1189: PPUSH
1190: LD_INT 1
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// force := force ^ veh ;
1200: LD_ADDR_VAR 0 2
1204: PUSH
1205: LD_VAR 0 2
1209: PUSH
1210: LD_VAR 0 4
1214: ADD
1215: ST_TO_ADDR
// for i = 1 to 5 do
1216: LD_ADDR_VAR 0 3
1220: PUSH
1221: DOUBLE
1222: LD_INT 1
1224: DEC
1225: ST_TO_ADDR
1226: LD_INT 5
1228: PUSH
1229: FOR_TO
1230: IFFALSE 1260
// begin PlaceHumanInUnit ( tim_team [ i ] , force [ i ] ) ;
1232: LD_VAR 0 5
1236: PUSH
1237: LD_VAR 0 3
1241: ARRAY
1242: PPUSH
1243: LD_VAR 0 2
1247: PUSH
1248: LD_VAR 0 3
1252: ARRAY
1253: PPUSH
1254: CALL_OW 52
// end ;
1258: GO 1229
1260: POP
1261: POP
// end ;
1262: LD_VAR 0 1
1266: RET
// export function Build_Beta_Base ; begin
1267: LD_INT 0
1269: PPUSH
// ComBuild ( mario , b_depot , 60 , 19 , 2 ) ;
1270: LD_EXP 9
1274: PPUSH
1275: LD_INT 0
1277: PPUSH
1278: LD_INT 60
1280: PPUSH
1281: LD_INT 19
1283: PPUSH
1284: LD_INT 2
1286: PPUSH
1287: CALL_OW 145
// ComMoveXY ( ryan , 61 , 44 ) ;
1291: LD_EXP 14
1295: PPUSH
1296: LD_INT 61
1298: PPUSH
1299: LD_INT 44
1301: PPUSH
1302: CALL_OW 111
// AddComTurnXY ( ryan , 72 , 52 ) ;
1306: LD_EXP 14
1310: PPUSH
1311: LD_INT 72
1313: PPUSH
1314: LD_INT 52
1316: PPUSH
1317: CALL_OW 178
// Wait ( 0 0$08 ) ;
1321: LD_INT 280
1323: PPUSH
1324: CALL_OW 67
// ComMoveXY ( a_cr1 , 81 , 29 ) ;
1328: LD_INT 54
1330: PPUSH
1331: LD_INT 81
1333: PPUSH
1334: LD_INT 29
1336: PPUSH
1337: CALL_OW 111
// end ; end_of_file
1341: LD_VAR 0 1
1345: RET
// every 0 0$01 trigger vehx do
1346: LD_EXP 16
1350: IFFALSE 1359
1352: GO 1354
1354: DISABLE
// VehicleXCombatFunction ;
1355: CALL 1360 0 0
1359: END
// export old_side , vx_limit , vx_capture , vx_list ; function VehicleXCombatFunction ; begin
1360: LD_INT 0
1362: PPUSH
// vx_list = [ ] ;
1363: LD_ADDR_EXP 20
1367: PUSH
1368: EMPTY
1369: ST_TO_ADDR
// vx_limit = 3 ;
1370: LD_ADDR_EXP 18
1374: PUSH
1375: LD_INT 3
1377: ST_TO_ADDR
// vx_capture = 0 ;
1378: LD_ADDR_EXP 19
1382: PUSH
1383: LD_INT 0
1385: ST_TO_ADDR
// end ;
1386: LD_VAR 0 1
1390: RET
// every 0 0$01 trigger vehx do var i , enemy_veh ;
1391: LD_EXP 16
1395: IFFALSE 1564
1397: GO 1399
1399: DISABLE
1400: LD_INT 0
1402: PPUSH
1403: PPUSH
// begin enable ;
1404: ENABLE
// enemy_veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_computer ] ] ) ;
1405: LD_ADDR_VAR 0 2
1409: PUSH
1410: LD_INT 22
1412: PUSH
1413: LD_INT 2
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: PUSH
1420: LD_INT 33
1422: PUSH
1423: LD_INT 3
1425: PUSH
1426: EMPTY
1427: LIST
1428: LIST
1429: PUSH
1430: EMPTY
1431: LIST
1432: LIST
1433: PPUSH
1434: CALL_OW 69
1438: ST_TO_ADDR
// for i in enemy_veh do
1439: LD_ADDR_VAR 0 1
1443: PUSH
1444: LD_VAR 0 2
1448: PUSH
1449: FOR_IN
1450: IFFALSE 1562
// begin if GetDistUnits ( vehx , i ) <= 12 and vx_capture < 3 then
1452: LD_EXP 16
1456: PPUSH
1457: LD_VAR 0 1
1461: PPUSH
1462: CALL_OW 296
1466: PUSH
1467: LD_INT 12
1469: LESSEQUAL
1470: PUSH
1471: LD_EXP 19
1475: PUSH
1476: LD_INT 3
1478: LESS
1479: AND
1480: IFFALSE 1560
// begin old_side = GetSide ( i ) ;
1482: LD_ADDR_EXP 17
1486: PUSH
1487: LD_VAR 0 1
1491: PPUSH
1492: CALL_OW 255
1496: ST_TO_ADDR
// vx_capture = vx_capture + 1 ;
1497: LD_ADDR_EXP 19
1501: PUSH
1502: LD_EXP 19
1506: PUSH
1507: LD_INT 1
1509: PLUS
1510: ST_TO_ADDR
// SetSide ( i , GetSide ( vehx ) ) ;
1511: LD_VAR 0 1
1515: PPUSH
1516: LD_EXP 16
1520: PPUSH
1521: CALL_OW 255
1525: PPUSH
1526: CALL_OW 235
// SetUnitDisplayNumber ( vehx , vx_capture ) ;
1530: LD_EXP 16
1534: PPUSH
1535: LD_EXP 19
1539: PPUSH
1540: CALL_OW 505
// vx_list = vx_list ^ i ;
1544: LD_ADDR_EXP 20
1548: PUSH
1549: LD_EXP 20
1553: PUSH
1554: LD_VAR 0 1
1558: ADD
1559: ST_TO_ADDR
// end ; end ;
1560: GO 1449
1562: POP
1563: POP
// end ;
1564: PPOPN 2
1566: END
// on UnitDestroyed ( un ) do begin if un = vehx then
1567: LD_VAR 0 1
1571: PUSH
1572: LD_EXP 16
1576: EQUAL
1577: IFFALSE 1593
// begin SetSide ( vx_list , old_side ) ;
1579: LD_EXP 20
1583: PPUSH
1584: LD_EXP 17
1588: PPUSH
1589: CALL_OW 235
// end ; if un in vx_list then
1593: LD_VAR 0 1
1597: PUSH
1598: LD_EXP 20
1602: IN
1603: IFFALSE 1653
// begin vx_list = Delete ( vx_list , un ) ;
1605: LD_ADDR_EXP 20
1609: PUSH
1610: LD_EXP 20
1614: PPUSH
1615: LD_VAR 0 1
1619: PPUSH
1620: CALL_OW 3
1624: ST_TO_ADDR
// vx_capture = vx_capture - 1 ;
1625: LD_ADDR_EXP 19
1629: PUSH
1630: LD_EXP 19
1634: PUSH
1635: LD_INT 1
1637: MINUS
1638: ST_TO_ADDR
// SetUnitDisplayNumber ( vehx , vx_capture ) ;
1639: LD_EXP 16
1643: PPUSH
1644: LD_EXP 19
1648: PPUSH
1649: CALL_OW 505
// end ; end ; end_of_file
1653: PPOPN 1
1655: END
// export function Action ; begin
1656: LD_INT 0
1658: PPUSH
// ResetFog ;
1659: CALL_OW 335
// InGameOn ;
1663: CALL_OW 8
// CenterNowOnXY ( 100 , 112 ) ;
1667: LD_INT 100
1669: PPUSH
1670: LD_INT 112
1672: PPUSH
1673: CALL_OW 86
// Say ( tim , DT-1 ) ;
1677: LD_EXP 5
1681: PPUSH
1682: LD_STRING DT-1
1684: PPUSH
1685: CALL_OW 88
// Say ( lee , DL-1 ) ;
1689: LD_EXP 8
1693: PPUSH
1694: LD_STRING DL-1
1696: PPUSH
1697: CALL_OW 88
// InGameOff ;
1701: CALL_OW 9
// ChangeMissionObjectives ( GoToNorth ) ;
1705: LD_STRING GoToNorth
1707: PPUSH
1708: CALL_OW 337
// Build_Beta_Base ;
1712: CALL 1267 0 0
// end ;
1716: LD_VAR 0 1
1720: RET
// every 0 0$01 trigger See ( 5 , tim ) or FilterUnitsInArea ( beta_base , [ f_side , 7 ] ) > 3 do
1721: LD_INT 5
1723: PPUSH
1724: LD_EXP 5
1728: PPUSH
1729: CALL_OW 292
1733: PUSH
1734: LD_INT 2
1736: PPUSH
1737: LD_INT 22
1739: PUSH
1740: LD_INT 7
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PPUSH
1747: CALL_OW 70
1751: PUSH
1752: LD_INT 3
1754: GREATER
1755: OR
1756: IFFALSE 1974
1758: GO 1760
1760: DISABLE
// begin InGameOn ;
1761: CALL_OW 8
// ComExitVehicle ( tim ) ;
1765: LD_EXP 5
1769: PPUSH
1770: CALL_OW 121
// AddComMoveXY ( tim , 66 , 33 ) ;
1774: LD_EXP 5
1778: PPUSH
1779: LD_INT 66
1781: PPUSH
1782: LD_INT 33
1784: PPUSH
1785: CALL_OW 171
// AddComDoubleTurn ( tim , oscar ) ;
1789: LD_EXP 5
1793: PPUSH
1794: LD_EXP 11
1798: PPUSH
1799: CALL 2054 0 2
// Wait ( 0 0$02 ) ;
1803: LD_INT 70
1805: PPUSH
1806: CALL_OW 67
// Say ( oscar , DO-1 ) ;
1810: LD_EXP 11
1814: PPUSH
1815: LD_STRING DO-1
1817: PPUSH
1818: CALL_OW 88
// Say ( tim , DT-2 ) ;
1822: LD_EXP 5
1826: PPUSH
1827: LD_STRING DT-2
1829: PPUSH
1830: CALL_OW 88
// Say ( oscar , DO-2 ) ;
1834: LD_EXP 11
1838: PPUSH
1839: LD_STRING DO-2
1841: PPUSH
1842: CALL_OW 88
// ComMoveXY ( a_cr2 , 48 , 29 ) ;
1846: LD_INT 55
1848: PPUSH
1849: LD_INT 48
1851: PPUSH
1852: LD_INT 29
1854: PPUSH
1855: CALL_OW 111
// Say ( tim , DT-3 ) ;
1859: LD_EXP 5
1863: PPUSH
1864: LD_STRING DT-3
1866: PPUSH
1867: CALL_OW 88
// Say ( oscar , DO-3 ) ;
1871: LD_EXP 11
1875: PPUSH
1876: LD_STRING DO-3
1878: PPUSH
1879: CALL_OW 88
// Say ( tim , DT-4 ) ;
1883: LD_EXP 5
1887: PPUSH
1888: LD_STRING DT-4
1890: PPUSH
1891: CALL_OW 88
// ComDoubleTurn ( tim , mario ) ;
1895: LD_EXP 5
1899: PPUSH
1900: LD_EXP 9
1904: PPUSH
1905: CALL 2018 0 2
// Say ( mario , DM-1 ) ;
1909: LD_EXP 9
1913: PPUSH
1914: LD_STRING DM-1
1916: PPUSH
1917: CALL_OW 88
// Say ( tim , DT-5 ) ;
1921: LD_EXP 5
1925: PPUSH
1926: LD_STRING DT-5
1928: PPUSH
1929: CALL_OW 88
// InGameOff ;
1933: CALL_OW 9
// ChangeMissionObjectives ( Beta ) ;
1937: LD_STRING Beta
1939: PPUSH
1940: CALL_OW 337
// SetSide ( FilterAllUnits ( [ f_side , 5 ] ) , 7 ) ;
1944: LD_INT 22
1946: PUSH
1947: LD_INT 5
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PPUSH
1954: CALL_OW 69
1958: PPUSH
1959: LD_INT 7
1961: PPUSH
1962: CALL_OW 235
// start_timer = true ;
1966: LD_ADDR_EXP 4
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// end ;
1974: END
// every 0 0$01 trigger start_timer do
1975: LD_EXP 4
1979: IFFALSE 2017
1981: GO 1983
1983: DISABLE
// begin enable ;
1984: ENABLE
// us_time = us_time - 0 0$01 ;
1985: LD_ADDR_EXP 2
1989: PUSH
1990: LD_EXP 2
1994: PUSH
1995: LD_INT 35
1997: MINUS
1998: ST_TO_ADDR
// if us_time <= 0 then
1999: LD_EXP 2
2003: PUSH
2004: LD_INT 0
2006: LESSEQUAL
2007: IFFALSE 2017
// begin SendAttack ( 1 ) ;
2009: LD_INT 1
2011: PPUSH
2012: CALL 2090 0 1
// disable ;
2016: DISABLE
// end ; end ; end_of_file
2017: END
// export function ComDoubleTurn ( un1 , un2 ) ; begin
2018: LD_INT 0
2020: PPUSH
// ComTurnUnit ( un1 , un2 ) ;
2021: LD_VAR 0 1
2025: PPUSH
2026: LD_VAR 0 2
2030: PPUSH
2031: CALL_OW 119
// ComTurnUnit ( un2 , un1 ) ;
2035: LD_VAR 0 2
2039: PPUSH
2040: LD_VAR 0 1
2044: PPUSH
2045: CALL_OW 119
// end ;
2049: LD_VAR 0 3
2053: RET
// export function AddComDoubleTurn ( un1 , un2 ) ; begin
2054: LD_INT 0
2056: PPUSH
// AddComTurnUnit ( un1 , un2 ) ;
2057: LD_VAR 0 1
2061: PPUSH
2062: LD_VAR 0 2
2066: PPUSH
2067: CALL_OW 179
// AddComTurnUnit ( un2 , un1 ) ;
2071: LD_VAR 0 2
2075: PPUSH
2076: LD_VAR 0 1
2080: PPUSH
2081: CALL_OW 179
// end ; end_of_file
2085: LD_VAR 0 3
2089: RET
// export function SendAttack ( val ) ; var un , veh , weap , am ; begin
2090: LD_INT 0
2092: PPUSH
2093: PPUSH
2094: PPUSH
2095: PPUSH
2096: PPUSH
// uc_side = 1 ;
2097: LD_ADDR_OWVAR 20
2101: PUSH
2102: LD_INT 1
2104: ST_TO_ADDR
// uc_nation = nation_american ;
2105: LD_ADDR_OWVAR 21
2109: PUSH
2110: LD_INT 1
2112: ST_TO_ADDR
// end ;
2113: LD_VAR 0 2
2117: RET
