// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 65 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 52472 0 9
// PrepareRussian ;
  43: CALL 395 0 0
// Action ;
  47: CALL 6204 0 0
// if debug then
  51: LD_EXP 1
  55: IFFALSE 64
// FogOff ( 3 ) ;
  57: LD_INT 3
  59: PPUSH
  60: CALL_OW 344
// end ;
  64: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_STRING 01_
  83: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  84: LD_ADDR_EXP 3
  88: PUSH
  89: LD_STRING 02_
  91: ST_TO_ADDR
// beriaVisited := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kurinDontWannaTalk := false ;
 100: LD_ADDR_EXP 5
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// kirovHasTank := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// blockNorth := true ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// hasLab := false ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasWorkshop := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// hasToBuildTank := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// hasTank := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_INT 60
 163: ST_TO_ADDR
// allianceAttacked := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// hasAllTanks := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// vehCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// vehCaptured := false ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// americanTrap := false ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// belkovTrapped := false ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// belkovDied := false ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// belkovSaved := false ;
 220: LD_ADDR_EXP 28
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// westOutpostDiscovered := false ;
 228: LD_ADDR_EXP 20
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 236: LD_ADDR_EXP 21
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// westOutpostDestroyed := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 252: LD_ADDR_EXP 23
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 260: LD_ADDR_EXP 24
 264: PUSH
 265: LD_INT 0
 267: ST_TO_ADDR
// reinforcementsGained := false ;
 268: LD_ADDR_EXP 25
 272: PUSH
 273: LD_INT 0
 275: ST_TO_ADDR
// allMapPointsSpotted := false ;
 276: LD_ADDR_EXP 26
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// mapSpotCounter := 0 ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 292: LD_ADDR_EXP 29
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 300: LD_ADDR_EXP 30
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// initiative := false ;
 308: LD_ADDR_EXP 31
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// belkovBrother := false ;
 316: LD_ADDR_EXP 32
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 324: LD_ADDR_EXP 33
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 1
 336: RET
// every 0 0$1 trigger vehCounter >= 5 do
 337: LD_EXP 15
 341: PUSH
 342: LD_INT 5
 344: GREATEREQUAL
 345: IFFALSE 357
 347: GO 349
 349: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 350: LD_STRING ACH_WORKSHOP
 352: PPUSH
 353: CALL_OW 543
 357: END
// every 0 0$1 trigger vehCaptured do
 358: LD_EXP 16
 362: IFFALSE 374
 364: GO 366
 366: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 367: LD_STRING ACH_RETAKE
 369: PPUSH
 370: CALL_OW 543
 374: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 375: LD_INT 193
 377: PPUSH
 378: CALL_OW 301
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 387: LD_STRING ACH_DEPOT
 389: PPUSH
 390: CALL_OW 543
 394: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un , additional ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// uc_side := 6 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 6
 410: ST_TO_ADDR
// uc_nation := 3 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 419: LD_INT 71
 421: PPUSH
 422: LD_STRING kirov
 424: PPUSH
 425: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 429: LD_ADDR_EXP 38
 433: PUSH
 434: LD_STRING Kurin
 436: PPUSH
 437: CALL_OW 25
 441: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 442: LD_EXP 38
 446: PPUSH
 447: LD_INT 117
 449: PPUSH
 450: LD_INT 108
 452: PPUSH
 453: LD_INT 0
 455: PPUSH
 456: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 460: LD_EXP 38
 464: PPUSH
 465: LD_INT 2
 467: PPUSH
 468: CALL 59143 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 472: LD_ADDR_EXP 39
 476: PUSH
 477: LD_STRING Kovalyuk
 479: PPUSH
 480: CALL_OW 25
 484: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 485: LD_EXP 39
 489: PPUSH
 490: LD_INT 71
 492: PPUSH
 493: CALL_OW 52
// additional := ( 3 - Count ( CreateCharacterSet ( 01_belkovTeam ) ) ) ;
 497: LD_ADDR_VAR 0 6
 501: PUSH
 502: LD_INT 3
 504: PUSH
 505: LD_STRING 01_belkovTeam
 507: PPUSH
 508: CALL_OW 31
 512: PPUSH
 513: CALL 19845 0 1
 517: MINUS
 518: ST_TO_ADDR
// if additional < 0 then
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 0
 526: LESS
 527: IFFALSE 537
// additional := 0 ;
 529: LD_ADDR_VAR 0 6
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// tmp := [ [ ru2_arm1 , class_soldier , 2 + additional ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: LD_INT 95
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_VAR 0 6
 555: PLUS
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 209
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 83
 578: PUSH
 579: LD_INT 4
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 71
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// InitHC_All ( ) ;
 625: CALL_OW 584
// belkovBrother := false ;
 629: LD_ADDR_EXP 32
 633: PUSH
 634: LD_INT 0
 636: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 637: LD_EXP 2
 641: PUSH
 642: LD_STRING Belkov
 644: STR
 645: PPUSH
 646: CALL_OW 28
 650: NOT
 651: IFFALSE 660
 653: PUSH
 654: LD_EXP 1
 658: NOT
 659: AND
 660: IFFALSE 697
// begin Belkov := NewCharacter ( Belkov2 ) ;
 662: LD_ADDR_EXP 36
 666: PUSH
 667: LD_STRING Belkov2
 669: PPUSH
 670: CALL_OW 25
 674: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_INT 71
 682: PPUSH
 683: CALL_OW 52
// belkovBrother := true ;
 687: LD_ADDR_EXP 32
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// end else
 695: GO 763
// begin un := NewCharacter ( Belkov2 ) ;
 697: LD_ADDR_VAR 0 5
 701: PUSH
 702: LD_STRING Belkov2
 704: PPUSH
 705: CALL_OW 25
 709: ST_TO_ADDR
// SetTag ( un , tBelkov ) ;
 710: LD_VAR 0 5
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 109
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 722: LD_ADDR_EXP 43
 726: PUSH
 727: LD_EXP 43
 731: PPUSH
 732: LD_EXP 43
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_VAR 0 5
 745: PPUSH
 746: CALL_OW 1
 750: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 751: LD_VAR 0 5
 755: PPUSH
 756: LD_INT 209
 758: PPUSH
 759: CALL_OW 52
// end ; for i in tmp do
 763: LD_ADDR_VAR 0 2
 767: PUSH
 768: LD_VAR 0 4
 772: PUSH
 773: FOR_IN
 774: IFFALSE 880
// for j := 1 to i [ 3 ] do
 776: LD_ADDR_VAR 0 3
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 3
 793: ARRAY
 794: PUSH
 795: FOR_TO
 796: IFFALSE 876
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_VAR 0 2
 805: PUSH
 806: LD_INT 2
 808: ARRAY
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 380
// un := CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 827: LD_VAR 0 5
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 845: LD_ADDR_EXP 43
 849: PUSH
 850: LD_EXP 43
 854: PPUSH
 855: LD_EXP 43
 859: PUSH
 860: LD_INT 1
 862: PLUS
 863: PPUSH
 864: LD_VAR 0 5
 868: PPUSH
 869: CALL_OW 1
 873: ST_TO_ADDR
// end ;
 874: GO 795
 876: POP
 877: POP
 878: GO 773
 880: POP
 881: POP
// SetBName ( beria , beria ) ;
 882: LD_INT 106
 884: PPUSH
 885: LD_STRING beria
 887: PPUSH
 888: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 892: LD_ADDR_EXP 40
 896: PUSH
 897: LD_STRING Platonov
 899: PPUSH
 900: CALL_OW 25
 904: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 905: LD_EXP 40
 909: PPUSH
 910: LD_INT 66
 912: PPUSH
 913: LD_INT 99
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 923: LD_EXP 40
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL 59143 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 935: LD_ADDR_EXP 41
 939: PUSH
 940: LD_STRING Kuklajs
 942: PPUSH
 943: CALL_OW 25
 947: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 948: LD_ADDR_EXP 42
 952: PUSH
 953: LD_STRING Benko
 955: PPUSH
 956: CALL_OW 25
 960: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 961: LD_EXP 41
 965: PPUSH
 966: LD_INT 76
 968: PPUSH
 969: LD_INT 99
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 979: LD_EXP 42
 983: PPUSH
 984: LD_INT 68
 986: PPUSH
 987: LD_INT 88
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 997: LD_EXP 41
1001: PUSH
1002: LD_EXP 42
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
1015: LD_ADDR_EXP 44
1019: PUSH
1020: LD_EXP 44
1024: PPUSH
1025: LD_EXP 44
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: PPUSH
1034: LD_EXP 41
1038: PPUSH
1039: CALL_OW 1
1043: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
1044: LD_ADDR_EXP 44
1048: PUSH
1049: LD_EXP 44
1053: PPUSH
1054: LD_EXP 44
1058: PUSH
1059: LD_INT 1
1061: PLUS
1062: PPUSH
1063: LD_EXP 42
1067: PPUSH
1068: CALL_OW 1
1072: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: LD_INT 63
1080: PUSH
1081: LD_INT 86
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 74
1094: PUSH
1095: LD_INT 94
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 77
1108: PUSH
1109: LD_INT 103
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: ST_TO_ADDR
// for i in tmp do
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_VAR 0 4
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1263
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// un := CreateHuman ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 3
1194: ARRAY
1195: PPUSH
1196: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 2
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PPUSH
1223: CALL_OW 428
1227: PPUSH
1228: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1232: LD_ADDR_EXP 44
1236: PUSH
1237: LD_EXP 44
1241: PPUSH
1242: LD_EXP 44
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
// end ;
1261: GO 1135
1263: POP
1264: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1265: LD_EXP 2
1269: PUSH
1270: LD_STRING Gnyevko
1272: STR
1273: PPUSH
1274: CALL_OW 28
1278: NOT
1279: IFFALSE 1288
1281: PUSH
1282: LD_EXP 1
1286: NOT
1287: AND
1288: IFFALSE 1315
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 2
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1303: CALL_OW 44
1307: PPUSH
1308: LD_INT 106
1310: PPUSH
1311: CALL_OW 52
// end ; end ;
1315: LD_VAR 0 1
1319: RET
// export function PrepareBurlak ; var i ; begin
1320: LD_INT 0
1322: PPUSH
1323: PPUSH
// uc_side := 3 ;
1324: LD_ADDR_OWVAR 20
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// uc_nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1340: LD_ADDR_EXP 34
1344: PUSH
1345: LD_STRING Burlak
1347: PPUSH
1348: LD_EXP 1
1352: NOT
1353: PPUSH
1354: LD_EXP 2
1358: PPUSH
1359: CALL 17621 0 3
1363: ST_TO_ADDR
// uc_side := 6 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 6
1371: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1372: LD_ADDR_EXP 35
1376: PUSH
1377: LD_STRING Gnyevko
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 17621 0 3
1395: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1396: LD_ADDR_EXP 37
1400: PUSH
1401: LD_STRING Kirilenkova
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 17621 0 3
1419: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1420: LD_ADDR_EXP 36
1424: PUSH
1425: LD_STRING Belkov
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 17621 0 3
1443: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1444: LD_ADDR_EXP 45
1448: PUSH
1449: LD_STRING 01_belkovTeam
1451: PPUSH
1452: CALL_OW 31
1456: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1457: LD_ADDR_VAR 0 1
1461: PUSH
1462: LD_EXP 34
1466: PUSH
1467: LD_EXP 35
1471: PUSH
1472: LD_EXP 37
1476: PUSH
1477: LD_EXP 36
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_EXP 45
1492: UNION
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 1
1498: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1499: LD_EXP 4
1503: IFFALSE 1521
1505: PUSH
1506: LD_INT 47
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: CALL_OW 321
1516: PUSH
1517: LD_INT 2
1519: EQUAL
1520: AND
1521: IFFALSE 1748
1523: GO 1525
1525: DISABLE
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1530: LD_ADDR_VAR 0 1
1534: PUSH
1535: LD_EXP 43
1539: PPUSH
1540: LD_INT 25
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 72
1554: ST_TO_ADDR
// if not tmp then
1555: LD_VAR 0 1
1559: NOT
1560: IFFALSE 1564
// exit ;
1562: GO 1748
// wait ( 0 0$5 ) ;
1564: LD_INT 175
1566: PPUSH
1567: CALL_OW 67
// ComExit ( tmp ) ;
1571: LD_VAR 0 1
1575: PPUSH
1576: CALL 56219 0 1
// for i := 1 to 2 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 2
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1637
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 71
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1611: LD_VAR 0 1
1615: PPUSH
1616: LD_INT 121
1618: PPUSH
1619: LD_INT 111
1621: PPUSH
1622: CALL_OW 171
// AddComUnload ( tmp ) ;
1626: LD_VAR 0 1
1630: PPUSH
1631: CALL_OW 219
// end ;
1635: GO 1593
1637: POP
1638: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1639: LD_VAR 0 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: LD_INT 113
1649: PPUSH
1650: LD_INT 113
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1660: LD_INT 83
1662: PPUSH
1663: LD_INT 46
1665: PPUSH
1666: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1670: LD_INT 83
1672: PPUSH
1673: LD_INT 47
1675: PPUSH
1676: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1680: LD_INT 83
1682: PPUSH
1683: LD_INT 48
1685: PPUSH
1686: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1690: LD_VAR 0 1
1694: PPUSH
1695: LD_INT 26
1697: PPUSH
1698: LD_INT 116
1700: PPUSH
1701: LD_INT 98
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1711: LD_INT 35
1713: PPUSH
1714: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_INT 60
1725: PUSH
1726: EMPTY
1727: LIST
1728: PPUSH
1729: CALL_OW 72
1733: NOT
1734: IFFALSE 1711
// ComEnterUnit ( tmp , kirov ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_INT 71
1743: PPUSH
1744: CALL_OW 120
// end ;
1748: PPOPN 2
1750: END
// export function BelkovAttackScript ; var i , un , brother , belkovTank , mech , tmp , fuel ; begin
1751: LD_INT 0
1753: PPUSH
1754: PPUSH
1755: PPUSH
1756: PPUSH
1757: PPUSH
1758: PPUSH
1759: PPUSH
1760: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1761: LD_ADDR_VAR 0 5
1765: PUSH
1766: LD_INT 22
1768: PUSH
1769: LD_INT 6
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 21
1778: PUSH
1779: LD_INT 2
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: CALL_OW 69
1794: ST_TO_ADDR
// if not belkovTank then
1795: LD_VAR 0 5
1799: NOT
1800: IFFALSE 1893
// begin uc_side := 6 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 6
1809: ST_TO_ADDR
// uc_nation := 3 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 3
1817: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1818: LD_INT 21
1820: PPUSH
1821: LD_INT 1
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 42
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 22641 0 5
// belkovTank := CreateVehicle ;
1837: LD_ADDR_VAR 0 5
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1859: LD_VAR 0 5
1863: PPUSH
1864: LD_INT 127
1866: PPUSH
1867: LD_INT 118
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1877: LD_EXP 36
1881: PPUSH
1882: LD_VAR 0 5
1886: PPUSH
1887: CALL_OW 120
// end else
1891: GO 1907
// begin belkovTank := belkovTank [ 1 ] ;
1893: LD_ADDR_VAR 0 5
1897: PUSH
1898: LD_VAR 0 5
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1907: LD_VAR 0 5
1911: PPUSH
1912: LD_INT 71
1914: PPUSH
1915: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1919: LD_VAR 0 5
1923: PPUSH
1924: LD_INT 71
1926: PPUSH
1927: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1931: LD_VAR 0 5
1935: PPUSH
1936: CALL_OW 256
1940: PUSH
1941: LD_INT 1000
1943: LESS
1944: IFFALSE 2057
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_EXP 43
1955: PPUSH
1956: LD_INT 25
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: ST_TO_ADDR
// if not mech then
1971: LD_VAR 0 6
1975: NOT
1976: IFFALSE 1992
// SetLives ( belkovTank , 1000 ) else
1978: LD_VAR 0 5
1982: PPUSH
1983: LD_INT 1000
1985: PPUSH
1986: CALL_OW 234
1990: GO 2057
// begin ComExit ( mech ) ;
1992: LD_VAR 0 6
1996: PPUSH
1997: CALL 56219 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
2001: LD_VAR 0 6
2005: PPUSH
2006: LD_VAR 0 5
2010: PPUSH
2011: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_INT 22
2022: PUSH
2023: LD_INT 6
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
2057: LD_INT 70
2059: PPUSH
2060: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
2064: LD_VAR 0 5
2068: PPUSH
2069: CALL_OW 256
2073: PUSH
2074: LD_INT 1000
2076: EQUAL
2077: IFFALSE 2057
// if mech then
2079: LD_VAR 0 6
2083: IFFALSE 2127
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2085: LD_VAR 0 6
2089: PPUSH
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2127: LD_EXP 36
2131: PPUSH
2132: LD_INT 107
2134: PPUSH
2135: LD_INT 104
2137: PPUSH
2138: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2142: LD_EXP 36
2146: PPUSH
2147: LD_INT 95
2149: PPUSH
2150: LD_INT 101
2152: PPUSH
2153: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2157: LD_EXP 36
2161: PPUSH
2162: LD_INT 89
2164: PPUSH
2165: LD_INT 100
2167: PPUSH
2168: CALL_OW 171
// wait ( 0 0$2 ) ;
2172: LD_INT 70
2174: PPUSH
2175: CALL_OW 67
// brother := FilterAllUnits ( [ [ f_side , 6 ] , [ f_tag , tBelkov ] , [ f_class , class_soldier ] ] ) ;
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 6
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 120
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PPUSH
2219: CALL_OW 69
2223: ST_TO_ADDR
// if brother then
2224: LD_VAR 0 4
2228: IFFALSE 2271
// if not brother [ 1 ] in belkovTeam then
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PUSH
2239: LD_EXP 45
2243: IN
2244: NOT
2245: IFFALSE 2271
// belkovTeam := Join ( belkovTeam , brother [ 1 ] ) ;
2247: LD_ADDR_EXP 45
2251: PUSH
2252: LD_EXP 45
2256: PPUSH
2257: LD_VAR 0 4
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PPUSH
2266: CALL 55821 0 2
2270: ST_TO_ADDR
// if belkovTeam < 3 then
2271: LD_EXP 45
2275: PUSH
2276: LD_INT 3
2278: LESS
2279: IFFALSE 2364
// begin for i := belkovTeam to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_EXP 45
2291: DEC
2292: ST_TO_ADDR
2293: LD_INT 3
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2362
// begin un := kirovBaseSquad [ 1 ] ;
2299: LD_ADDR_VAR 0 3
2303: PUSH
2304: LD_EXP 43
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
2313: LD_ADDR_EXP 43
2317: PUSH
2318: LD_EXP 43
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: CALL_OW 3
2330: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
2331: LD_ADDR_EXP 45
2335: PUSH
2336: LD_EXP 45
2340: PPUSH
2341: LD_EXP 45
2345: PUSH
2346: LD_INT 1
2348: PLUS
2349: PPUSH
2350: LD_VAR 0 3
2354: PPUSH
2355: CALL_OW 1
2359: ST_TO_ADDR
// end ;
2360: GO 2296
2362: POP
2363: POP
// end ; if Kirilenkova then
2364: LD_EXP 37
2368: IFFALSE 2392
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
2370: LD_ADDR_EXP 45
2374: PUSH
2375: LD_EXP 45
2379: PPUSH
2380: LD_EXP 37
2384: PPUSH
2385: CALL 55821 0 2
2389: ST_TO_ADDR
2390: GO 2431
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
2392: LD_ADDR_EXP 45
2396: PUSH
2397: LD_EXP 45
2401: PPUSH
2402: LD_EXP 43
2406: PPUSH
2407: LD_INT 25
2409: PUSH
2410: LD_INT 4
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 72
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL 55821 0 2
2430: ST_TO_ADDR
// for i in belkovTeam do
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_EXP 45
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2470
// begin ComExit ( i ) ;
2444: LD_VAR 0 2
2448: PPUSH
2449: CALL 56219 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 89
2460: PPUSH
2461: LD_INT 100
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2441
2470: POP
2471: POP
// tmp := Belkov union belkovTeam ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_EXP 36
2481: PUSH
2482: LD_EXP 45
2486: UNION
2487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2488: LD_INT 35
2490: PPUSH
2491: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2495: LD_VAR 0 7
2499: PPUSH
2500: LD_INT 60
2502: PUSH
2503: EMPTY
2504: LIST
2505: PPUSH
2506: CALL_OW 72
2510: NOT
2511: IFFALSE 2488
// ComMoveXY ( tmp , 71 , 65 ) ;
2513: LD_VAR 0 7
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: LD_INT 65
2523: PPUSH
2524: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2528: LD_VAR 0 7
2532: PPUSH
2533: LD_INT 61
2535: PPUSH
2536: LD_INT 37
2538: PPUSH
2539: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2543: LD_VAR 0 7
2547: PPUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 17
2553: PPUSH
2554: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2558: LD_VAR 0 7
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2570: LD_EXP 36
2574: PPUSH
2575: LD_INT 63
2577: PPUSH
2578: LD_INT 8
2580: PPUSH
2581: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2585: LD_EXP 36
2589: PPUSH
2590: LD_INT 105
2592: PPUSH
2593: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2597: LD_EXP 36
2601: PPUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 37
2607: PPUSH
2608: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2612: LD_EXP 36
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2624: LD_VAR 0 7
2628: PPUSH
2629: LD_INT 88
2631: PPUSH
2632: LD_INT 29
2634: PPUSH
2635: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2639: LD_INT 35
2641: PPUSH
2642: CALL_OW 67
// for i in tmp do
2646: LD_ADDR_VAR 0 2
2650: PUSH
2651: LD_VAR 0 7
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2688
// if not HasTask ( i ) then
2659: LD_VAR 0 2
2663: PPUSH
2664: CALL_OW 314
2668: NOT
2669: IFFALSE 2686
// AddComMoveXY ( tmp , 88 , 29 ) ;
2671: LD_VAR 0 7
2675: PPUSH
2676: LD_INT 88
2678: PPUSH
2679: LD_INT 29
2681: PPUSH
2682: CALL_OW 171
2686: GO 2656
2688: POP
2689: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2690: LD_VAR 0 7
2694: PPUSH
2695: LD_INT 95
2697: PUSH
2698: LD_INT 6
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 72
2709: IFFALSE 2803
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_VAR 0 7
2720: PPUSH
2721: LD_INT 95
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 72
2735: PUSH
2736: FOR_IN
2737: IFFALSE 2801
// begin if i = Belkov then
2739: LD_VAR 0 2
2743: PUSH
2744: LD_EXP 36
2748: EQUAL
2749: IFFALSE 2790
// begin belkovTank := IsInUnit ( Belkov ) ;
2751: LD_ADDR_VAR 0 5
2755: PUSH
2756: LD_EXP 36
2760: PPUSH
2761: CALL_OW 310
2765: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2766: LD_ADDR_VAR 0 8
2770: PUSH
2771: LD_VAR 0 5
2775: PPUSH
2776: CALL_OW 261
2780: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2781: LD_VAR 0 5
2785: PPUSH
2786: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: CALL_OW 64
// end ;
2799: GO 2736
2801: POP
2802: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2803: LD_VAR 0 7
2807: PPUSH
2808: LD_INT 52
2810: PUSH
2811: EMPTY
2812: LIST
2813: PPUSH
2814: CALL_OW 72
2818: NOT
2819: IFFALSE 2639
// wait ( 1 1$20 ) ;
2821: LD_INT 2800
2823: PPUSH
2824: CALL_OW 67
// if fuel < 50 then
2828: LD_VAR 0 8
2832: PUSH
2833: LD_INT 50
2835: LESS
2836: IFFALSE 2846
// fuel := 50 ;
2838: LD_ADDR_VAR 0 8
2842: PUSH
2843: LD_INT 50
2845: ST_TO_ADDR
// uc_side := 6 ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_INT 6
2853: ST_TO_ADDR
// uc_nation := 3 ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_INT 3
2861: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2862: LD_INT 21
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 42
2873: PPUSH
2874: LD_VAR 0 8
2878: PUSH
2879: LD_INT 5
2881: MINUS
2882: PPUSH
2883: CALL 22641 0 5
// belkovTank := CreateVehicle ;
2887: LD_ADDR_VAR 0 5
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2897: LD_VAR 0 5
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2909: LD_VAR 0 5
2913: PPUSH
2914: LD_INT 60
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2927: LD_EXP 36
2931: PPUSH
2932: LD_VAR 0 5
2936: PPUSH
2937: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2941: LD_EXP 36
2945: PPUSH
2946: LD_INT 72
2948: PPUSH
2949: LD_INT 26
2951: PPUSH
2952: CALL_OW 111
// wait ( 0 0$2 ) ;
2956: LD_INT 70
2958: PPUSH
2959: CALL_OW 67
// for i in belkovTeam do
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_EXP 45
2972: PUSH
2973: FOR_IN
2974: IFFALSE 3018
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_INT 60
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_INT 65
3001: PPUSH
3002: LD_INT 18
3004: PPUSH
3005: CALL_OW 111
// wait ( 0 0$0.8 ) ;
3009: LD_INT 28
3011: PPUSH
3012: CALL_OW 67
// end ;
3016: GO 2973
3018: POP
3019: POP
// repeat wait ( 0 0$1 ) ;
3020: LD_INT 35
3022: PPUSH
3023: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
3027: LD_EXP 14
3031: IFFALSE 3051
3033: PUSH
3034: LD_EXP 45
3038: PPUSH
3039: LD_INT 60
3041: PUSH
3042: EMPTY
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: NOT
3050: AND
3051: IFFALSE 3020
// americanTrap := true ;
3053: LD_ADDR_EXP 17
3057: PUSH
3058: LD_INT 1
3060: ST_TO_ADDR
// end ;
3061: LD_VAR 0 1
3065: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
3066: LD_EXP 4
3070: IFFALSE 3083
3072: PUSH
3073: LD_EXP 40
3077: PPUSH
3078: CALL_OW 302
3082: AND
3083: IFFALSE 3407
3085: GO 3087
3087: DISABLE
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
3095: LD_EXP 8
3099: PUSH
3100: LD_INT 0
3102: GREATER
3103: IFFALSE 3117
3105: PUSH
3106: LD_EXP 40
3110: PPUSH
3111: CALL_OW 314
3115: NOT
3116: AND
3117: IFFALSE 3288
// begin dir := rand ( 0 , 5 ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 5
3129: PPUSH
3130: CALL_OW 12
3134: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_EXP 40
3144: PPUSH
3145: CALL_OW 250
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_INT 5
3157: PPUSH
3158: CALL_OW 272
3162: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 40
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: LD_INT 5
3185: PPUSH
3186: CALL_OW 273
3190: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
3191: LD_VAR 0 1
3195: PPUSH
3196: LD_VAR 0 2
3200: PPUSH
3201: CALL_OW 488
3205: IFFALSE 3230
3207: PUSH
3208: LD_INT 106
3210: PPUSH
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: CALL_OW 297
3225: PUSH
3226: LD_INT 26
3228: LESS
3229: AND
3230: IFFALSE 3253
// AddComMoveXY ( Platonov , x , y ) else
3232: LD_EXP 40
3236: PPUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 2
3246: PPUSH
3247: CALL_OW 171
3251: GO 3268
// AddComMoveXY ( Platonov , 64 , 96 ) ;
3253: LD_EXP 40
3257: PPUSH
3258: LD_INT 64
3260: PPUSH
3261: LD_INT 96
3263: PPUSH
3264: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
3268: LD_EXP 40
3272: PPUSH
3273: LD_INT 105
3275: PPUSH
3276: LD_INT 315
3278: PPUSH
3279: CALL_OW 12
3283: PPUSH
3284: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: LESSEQUAL
3296: IFFALSE 3342
// begin if not IsAt ( Platonov , 64 , 96 ) then
3298: LD_EXP 40
3302: PPUSH
3303: LD_INT 64
3305: PPUSH
3306: LD_INT 96
3308: PPUSH
3309: CALL_OW 307
3313: NOT
3314: IFFALSE 3340
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
3316: LD_EXP 40
3320: PPUSH
3321: LD_INT 64
3323: PPUSH
3324: LD_INT 96
3326: PPUSH
3327: CALL_OW 111
// AddComHold ( Platonov ) ;
3331: LD_EXP 40
3335: PPUSH
3336: CALL_OW 200
// end ; end else
3340: GO 3407
// if tick mod 0 0$75 = 0 0$00 then
3342: LD_OWVAR 1
3346: PUSH
3347: LD_INT 2625
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3407
// begin amount := rand ( 2 , 5 ) ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 5
3366: PPUSH
3367: CALL_OW 12
3371: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3372: LD_ADDR_EXP 8
3376: PUSH
3377: LD_EXP 8
3381: PUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_INT 10
3389: MUL
3390: MINUS
3391: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_INT 5
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 55
// end ; end ;
3407: PPOPN 4
3409: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3410: LD_INT 106
3412: PPUSH
3413: CALL_OW 274
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 275
3425: PUSH
3426: LD_INT 30
3428: LESS
3429: IFFALSE 3641
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 43
3447: PPUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 60
3453: PUSH
3454: EMPTY
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 72
3479: ST_TO_ADDR
// if not eng then
3480: LD_VAR 0 2
3484: NOT
3485: IFFALSE 3489
// exit ;
3487: GO 3641
// ComExit ( eng ) ;
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL 56219 0 1
// i := 5 ;
3498: LD_ADDR_VAR 0 1
3502: PUSH
3503: LD_INT 5
3505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3506: LD_INT 35
3508: PPUSH
3509: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 60
3520: PUSH
3521: EMPTY
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: NOT
3529: IFFALSE 3537
3531: PUSH
3532: LD_VAR 0 2
3536: AND
3537: IFFALSE 3607
// begin ComTransport ( eng , kirov , mat_oil ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 71
3546: PPUSH
3547: LD_INT 2
3549: PPUSH
3550: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3554: LD_VAR 0 2
3558: PPUSH
3559: LD_INT 67
3561: PPUSH
3562: LD_INT 99
3564: PPUSH
3565: CALL_OW 171
// AddComUnload ( eng ) ;
3569: LD_VAR 0 2
3573: PPUSH
3574: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_INT 107
3585: PPUSH
3586: LD_INT 104
3588: PPUSH
3589: CALL_OW 171
// i := i - 1 ;
3593: LD_ADDR_VAR 0 1
3597: PUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 1
3605: MINUS
3606: ST_TO_ADDR
// end ; until i = 0 ;
3607: LD_VAR 0 1
3611: PUSH
3612: LD_INT 0
3614: EQUAL
3615: IFFALSE 3506
// AddComMoveUnit ( eng , kirov ) ;
3617: LD_VAR 0 2
3621: PPUSH
3622: LD_INT 71
3624: PPUSH
3625: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_INT 71
3636: PPUSH
3637: CALL_OW 180
// end ;
3641: PPOPN 2
3643: END
// export function SendReinforcements ; var i ; begin
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
// reinforcementsGained := true ;
3648: LD_ADDR_EXP 25
3652: PUSH
3653: LD_INT 1
3655: ST_TO_ADDR
// for i := 1 to 2 do
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: DOUBLE
3662: LD_INT 1
3664: DEC
3665: ST_TO_ADDR
3666: LD_INT 2
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3752
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3672: LD_EXP 44
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PPUSH
3683: CALL 56219 0 1
3687: IFFALSE 3696
// wait ( 0 0$0.3 ) ;
3689: LD_INT 10
3691: PPUSH
3692: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3696: LD_EXP 44
3700: PUSH
3701: LD_VAR 0 2
3705: ARRAY
3706: PPUSH
3707: LD_INT 75
3709: PPUSH
3710: LD_INT 84
3712: PPUSH
3713: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3717: LD_EXP 44
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PPUSH
3728: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3732: LD_EXP 44
3736: PUSH
3737: LD_VAR 0 2
3741: ARRAY
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: CALL_OW 235
// end ;
3750: GO 3669
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 1
3758: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3759: LD_EXP 21
3763: IFFALSE 3771
3765: PUSH
3766: LD_EXP 18
3770: AND
3771: IFFALSE 3794
3773: PUSH
3774: LD_EXP 43
3778: PPUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 3
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 72
3793: AND
3794: IFFALSE 3951
3796: GO 3798
3798: DISABLE
3799: LD_INT 0
3801: PPUSH
3802: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_EXP 43
3812: PPUSH
3813: LD_INT 25
3815: PUSH
3816: LD_INT 3
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PPUSH
3823: CALL_OW 72
3827: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 30
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not fac then
3862: LD_VAR 0 2
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 3951
// fac := fac [ 1 ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 2
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3885: LD_VAR 0 2
3889: PPUSH
3890: CALL_OW 313
3894: PUSH
3895: LD_INT 0
3897: EQUAL
3898: IFFALSE 3930
// begin ComExit ( mech ) ;
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL 56219 0 1
// wait ( 3 ) ;
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_VAR 0 2
3925: PPUSH
3926: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3930: LD_VAR 0 2
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 42
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: PPOPN 2
3953: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
3958: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3959: LD_VAR 0 1
3963: PPUSH
3964: LD_INT 90
3966: PPUSH
3967: LD_INT 100
3969: PPUSH
3970: CALL_OW 111
// wait ( 0 0$10 ) ;
3974: LD_INT 350
3976: PPUSH
3977: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3981: LD_VAR 0 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// tag := GetTag ( vehicle ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 110
4014: ST_TO_ADDR
// if tag = 0 then
4015: LD_VAR 0 4
4019: PUSH
4020: LD_INT 0
4022: EQUAL
4023: IFFALSE 4094
// begin if not HasTask ( vehicle ) then
4025: LD_VAR 0 1
4029: PPUSH
4030: CALL_OW 314
4034: NOT
4035: IFFALSE 4052
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
4037: LD_VAR 0 1
4041: PPUSH
4042: LD_INT 83
4044: PPUSH
4045: LD_INT 68
4047: PPUSH
4048: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 256
4061: PUSH
4062: LD_INT 750
4064: LESS
4065: IFFALSE 4094
// begin SetTag ( vehicle , 1 ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
4079: LD_VAR 0 1
4083: PPUSH
4084: LD_INT 93
4086: PPUSH
4087: LD_INT 102
4089: PPUSH
4090: CALL_OW 111
// end ; end ; if tag = 1 then
4094: LD_VAR 0 4
4098: PUSH
4099: LD_INT 1
4101: EQUAL
4102: IFFALSE 4194
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
4104: LD_VAR 0 1
4108: PPUSH
4109: LD_INT 113
4111: PPUSH
4112: LD_INT 106
4114: PPUSH
4115: CALL_OW 307
4119: NOT
4120: IFFALSE 4134
4122: PUSH
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 314
4132: NOT
4133: AND
4134: IFFALSE 4151
// ComMoveXY ( vehicle , 113 , 106 ) ;
4136: LD_VAR 0 1
4140: PPUSH
4141: LD_INT 113
4143: PPUSH
4144: LD_INT 106
4146: PPUSH
4147: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 113
4158: PPUSH
4159: LD_INT 106
4161: PPUSH
4162: CALL_OW 307
4166: IFFALSE 4194
// begin SetTag ( vehicle , 2 ) ;
4168: LD_VAR 0 1
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 311
4189: PPUSH
4190: CALL 57535 0 1
// end ; end ; if tag = 2 then
4194: LD_VAR 0 4
4198: PUSH
4199: LD_INT 2
4201: EQUAL
4202: IFFALSE 4268
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 256
4213: PUSH
4214: LD_INT 1000
4216: EQUAL
4217: IFFALSE 4230
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 311
4229: AND
4230: IFFALSE 4268
// begin ComMoveUnit ( vehicle , kirov ) ;
4232: LD_VAR 0 1
4236: PPUSH
4237: LD_INT 71
4239: PPUSH
4240: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_INT 71
4251: PPUSH
4252: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 301
4277: IFTRUE 4285
4279: PUSH
4280: LD_EXP 23
4284: OR
4285: IFFALSE 3993
// if eastOutpostDestroyed then
4287: LD_EXP 23
4291: IFFALSE 4308
// ComMoveXY ( vehicle , 111 , 105 ) ;
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_INT 111
4300: PPUSH
4301: LD_INT 105
4303: PPUSH
4304: CALL_OW 111
// end ; end_of_file
4308: LD_VAR 0 2
4312: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
// uc_side := 1 ;
4319: LD_ADDR_OWVAR 20
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// uc_nation := 1 ;
4327: LD_ADDR_OWVAR 21
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// usWestForces := [ ] ;
4335: LD_ADDR_EXP 46
4339: PUSH
4340: EMPTY
4341: ST_TO_ADDR
// usEastForces := [ ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: EMPTY
4348: ST_TO_ADDR
// bc_type := b_depot ;
4349: LD_ADDR_OWVAR 42
4353: PUSH
4354: LD_INT 0
4356: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4357: LD_ADDR_OWVAR 43
4361: PUSH
4362: LD_OWVAR 67
4366: PUSH
4367: LD_INT 1
4369: MINUS
4370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4371: LD_INT 48
4373: PPUSH
4374: LD_INT 54
4376: PPUSH
4377: LD_INT 2
4379: PPUSH
4380: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4384: LD_ADDR_VAR 0 4
4388: PUSH
4389: LD_INT 55
4391: PUSH
4392: LD_INT 55
4394: PUSH
4395: LD_INT 4
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 59
4405: PUSH
4406: LD_INT 61
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// if Difficulty > 1 then
4421: LD_OWVAR 67
4425: PUSH
4426: LD_INT 1
4428: GREATER
4429: IFFALSE 4465
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 4
4445: PPUSH
4446: LD_INT 46
4448: PUSH
4449: LD_INT 64
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 2
4464: ST_TO_ADDR
// if Difficulty > 2 then
4465: LD_OWVAR 67
4469: PUSH
4470: LD_INT 2
4472: GREATER
4473: IFFALSE 4509
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4475: LD_ADDR_VAR 0 4
4479: PUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 4
4489: PPUSH
4490: LD_INT 36
4492: PUSH
4493: LD_INT 48
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 2
4508: ST_TO_ADDR
// bc_type := b_breastwork ;
4509: LD_ADDR_OWVAR 42
4513: PUSH
4514: LD_INT 31
4516: ST_TO_ADDR
// InitHC_All ( ) ;
4517: CALL_OW 584
// for i in tmp do
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: FOR_IN
4532: IFFALSE 4676
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: ARRAY
4551: PPUSH
4552: LD_VAR 0 2
4556: PUSH
4557: LD_INT 3
4559: ARRAY
4560: PPUSH
4561: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4565: LD_INT 0
4567: PPUSH
4568: LD_OWVAR 67
4572: PPUSH
4573: CALL_OW 381
// un := CreateHuman ;
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4587: LD_ADDR_EXP 46
4591: PUSH
4592: LD_EXP 46
4596: PPUSH
4597: LD_EXP 46
4601: PUSH
4602: LD_INT 1
4604: PLUS
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 2
4625: PUSH
4626: LD_INT 3
4628: ARRAY
4629: PUSH
4630: LD_INT 3
4632: PLUS
4633: PUSH
4634: LD_INT 6
4636: MOD
4637: PPUSH
4638: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_VAR 0 2
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: LD_VAR 0 2
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: CALL_OW 428
4669: PPUSH
4670: CALL_OW 52
// end ;
4674: GO 4531
4676: POP
4677: POP
// for i := 1 to 2 do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: DOUBLE
4684: LD_INT 1
4686: DEC
4687: ST_TO_ADDR
4688: LD_INT 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4768
// begin PrepareEngineer ( false , Difficulty ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_OWVAR 67
4701: PPUSH
4702: CALL_OW 382
// un := CreateHuman ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4716: LD_ADDR_EXP 46
4720: PUSH
4721: LD_EXP 46
4725: PPUSH
4726: LD_EXP 46
4730: PUSH
4731: LD_INT 1
4733: PLUS
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: CALL_OW 1
4744: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4745: LD_VAR 0 3
4749: PPUSH
4750: LD_INT 54
4752: PPUSH
4753: LD_INT 58
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: LD_INT 0
4761: PPUSH
4762: CALL_OW 50
// end ;
4766: GO 4691
4768: POP
4769: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4770: LD_ADDR_VAR 0 4
4774: PUSH
4775: LD_INT 87
4777: PUSH
4778: LD_INT 62
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 89
4791: PUSH
4792: LD_INT 67
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: ST_TO_ADDR
// if Difficulty > 2 then
4807: LD_OWVAR 67
4811: PUSH
4812: LD_INT 2
4814: GREATER
4815: IFFALSE 4851
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 4
4831: PPUSH
4832: LD_INT 88
4834: PUSH
4835: LD_INT 53
4837: PUSH
4838: LD_INT 2
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 2
4850: ST_TO_ADDR
// bc_type := b_breastwork ;
4851: LD_ADDR_OWVAR 42
4855: PUSH
4856: LD_INT 31
4858: ST_TO_ADDR
// for i in tmp do
4859: LD_ADDR_VAR 0 2
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: FOR_IN
4870: IFFALSE 5014
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4872: LD_VAR 0 2
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_INT 3
4897: ARRAY
4898: PPUSH
4899: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_OWVAR 67
4910: PPUSH
4911: CALL_OW 381
// un := CreateHuman ;
4915: LD_ADDR_VAR 0 3
4919: PUSH
4920: CALL_OW 44
4924: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4925: LD_ADDR_EXP 47
4929: PUSH
4930: LD_EXP 47
4934: PPUSH
4935: LD_EXP 47
4939: PUSH
4940: LD_INT 1
4942: PLUS
4943: PPUSH
4944: LD_VAR 0 3
4948: PPUSH
4949: CALL_OW 1
4953: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 3
4966: ARRAY
4967: PUSH
4968: LD_INT 3
4970: PLUS
4971: PUSH
4972: LD_INT 6
4974: MOD
4975: PPUSH
4976: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 428
5007: PPUSH
5008: CALL_OW 52
// end ;
5012: GO 4869
5014: POP
5015: POP
// for i := 1 to 2 do
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: DOUBLE
5022: LD_INT 1
5024: DEC
5025: ST_TO_ADDR
5026: LD_INT 2
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5106
// begin PrepareEngineer ( false , Difficulty ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_OWVAR 67
5039: PPUSH
5040: CALL_OW 382
// un := CreateHuman ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: CALL_OW 44
5053: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
5054: LD_ADDR_EXP 47
5058: PUSH
5059: LD_EXP 47
5063: PPUSH
5064: LD_EXP 47
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 1
5082: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
5083: LD_VAR 0 3
5087: PPUSH
5088: LD_INT 95
5090: PPUSH
5091: LD_INT 65
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: LD_INT 0
5099: PPUSH
5100: CALL_OW 50
// end ;
5104: GO 5029
5106: POP
5107: POP
// end ;
5108: LD_VAR 0 1
5112: RET
// export function PrepareAmericanTrap ; var i , un ; begin
5113: LD_INT 0
5115: PPUSH
5116: PPUSH
5117: PPUSH
// usTrapForces := [ ] ;
5118: LD_ADDR_EXP 48
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// uc_side := 1 ;
5125: LD_ADDR_OWVAR 20
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// uc_nation := 1 ;
5133: LD_ADDR_OWVAR 21
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// InitHC_All ( ) ;
5141: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_OWVAR 67
5152: PPUSH
5153: CALL_OW 381
// un := CreateHuman ;
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: CALL_OW 44
5166: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5167: LD_ADDR_EXP 48
5171: PUSH
5172: LD_EXP 48
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 55821 0 2
5186: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_INT 5
5199: PUSH
5200: LD_INT 6
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_OWVAR 67
5219: ARRAY
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5268
// begin PrepareSoldier ( false , Difficulty ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_OWVAR 67
5231: PPUSH
5232: CALL_OW 381
// un := CreateHuman ;
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: CALL_OW 44
5245: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5246: LD_ADDR_EXP 48
5250: PUSH
5251: LD_EXP 48
5255: PPUSH
5256: LD_VAR 0 3
5260: PPUSH
5261: CALL 55821 0 2
5265: ST_TO_ADDR
// end ;
5266: GO 5221
5268: POP
5269: POP
// for i := 1 to 2 do
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_INT 2
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5330
// begin PrepareScientist ( false , Difficulty ) ;
5286: LD_INT 0
5288: PPUSH
5289: LD_OWVAR 67
5293: PPUSH
5294: CALL_OW 384
// un := CreateHuman ;
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: CALL_OW 44
5307: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5308: LD_ADDR_EXP 48
5312: PUSH
5313: LD_EXP 48
5317: PPUSH
5318: LD_VAR 0 3
5322: PPUSH
5323: CALL 55821 0 2
5327: ST_TO_ADDR
// end ;
5328: GO 5283
5330: POP
5331: POP
// end ;
5332: LD_VAR 0 1
5336: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
5337: LD_EXP 46
5341: IFFALSE 5921
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
// begin enable ;
5353: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 8
5361: PPUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 70
5390: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_EXP 46
5400: PPUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PPUSH
5411: CALL_OW 72
5415: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5416: LD_ADDR_VAR 0 5
5420: PUSH
5421: LD_EXP 46
5425: PPUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 72
5440: ST_TO_ADDR
// if eng then
5441: LD_VAR 0 4
5445: IFFALSE 5641
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 24
5457: PUSH
5458: LD_INT 1000
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: IFFALSE 5587
// begin for i in eng do
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_VAR 0 4
5484: PUSH
5485: FOR_IN
5486: IFFALSE 5583
// if IsInUnit ( i ) then
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 310
5497: IFFALSE 5510
// ComExit ( i ) else
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL 56219 0 1
5508: GO 5581
// if IsOk ( i ) and not HasTask ( i ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: CALL_OW 302
5519: IFFALSE 5533
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 314
5531: NOT
5532: AND
5533: IFFALSE 5581
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5535: LD_VAR 0 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 72
5566: PPUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 74
5576: PPUSH
5577: CALL_OW 130
5581: GO 5485
5583: POP
5584: POP
// end else
5585: GO 5641
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5587: LD_VAR 0 3
5591: PPUSH
5592: LD_INT 30
5594: PUSH
5595: LD_INT 0
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 72
5606: IFFALSE 5641
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 30
5620: PUSH
5621: LD_INT 0
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL_OW 72
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5641: LD_VAR 0 5
5645: PPUSH
5646: LD_INT 50
5648: PUSH
5649: EMPTY
5650: LIST
5651: PPUSH
5652: CALL_OW 72
5656: IFFALSE 5681
5658: PUSH
5659: LD_INT 18
5661: PPUSH
5662: LD_INT 81
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 70
5676: PUSH
5677: LD_INT 1
5679: GREATER
5680: AND
5681: IFFALSE 5703
5683: PUSH
5684: LD_INT 18
5686: PPUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: NOT
5702: AND
5703: IFFALSE 5757
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5705: LD_ADDR_VAR 0 1
5709: PUSH
5710: LD_VAR 0 5
5714: PPUSH
5715: LD_INT 50
5717: PUSH
5718: EMPTY
5719: LIST
5720: PPUSH
5721: CALL_OW 72
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5755
// begin ComExit ( i ) ;
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL 56219 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: LD_INT 46
5745: PPUSH
5746: LD_INT 62
5748: PPUSH
5749: CALL_OW 174
// end ;
5753: GO 5726
5755: POP
5756: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5757: LD_INT 18
5759: PPUSH
5760: LD_INT 81
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 70
5774: NOT
5775: IFFALSE 5811
5777: PUSH
5778: LD_VAR 0 5
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 54
5788: PUSH
5789: EMPTY
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 72
5810: AND
5811: IFFALSE 5844
5813: PUSH
5814: LD_VAR 0 3
5818: PPUSH
5819: LD_INT 30
5821: PUSH
5822: LD_INT 31
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 58
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: AND
5844: IFFALSE 5921
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5846: LD_VAR 0 5
5850: PPUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 54
5856: PUSH
5857: EMPTY
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 50
5866: PUSH
5867: EMPTY
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 72
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_INT 30
5890: PUSH
5891: LD_INT 31
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 58
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 120
// end ;
5921: PPOPN 5
5923: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5924: LD_EXP 47
5928: IFFALSE 6201
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin enable ;
5938: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_INT 15
5946: PPUSH
5947: LD_INT 22
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 70
5975: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_EXP 47
5985: PPUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 72
6000: ST_TO_ADDR
// if eng then
6001: LD_VAR 0 3
6005: IFFALSE 6201
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 1000
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 72
6033: IFFALSE 6147
// begin for i in eng do
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_VAR 0 3
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6143
// if IsInUnit ( i ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 310
6057: IFFALSE 6070
// ComExit ( i ) else
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL 56219 0 1
6068: GO 6141
// if IsOk ( i ) and not HasTask ( i ) then
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6093
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 314
6091: NOT
6092: AND
6093: IFFALSE 6141
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 24
6110: PUSH
6111: LD_INT 1000
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PPUSH
6122: CALL_OW 72
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 74
6136: PPUSH
6137: CALL_OW 130
6141: GO 6045
6143: POP
6144: POP
// end else
6145: GO 6201
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 30
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: CALL_OW 72
6166: IFFALSE 6201
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_VAR 0 2
6177: PPUSH
6178: LD_INT 30
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 72
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: CALL_OW 120
// end ; end_of_file
6201: PPOPN 3
6203: END
// export function Action ; var i , tmp ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
// InGameOn ;
6209: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
6213: LD_INT 112
6215: PPUSH
6216: LD_INT 107
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 12
6224: NEG
6225: PPUSH
6226: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
6230: LD_INT 121
6232: PPUSH
6233: LD_INT 113
6235: PPUSH
6236: CALL_OW 86
// tmp := PrepareBurlak ;
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: CALL 1320 0 0
6249: ST_TO_ADDR
// for i in tmp do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6314
// begin SetDir ( i , 5 ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
6275: LD_VAR 0 2
6279: PPUSH
6280: LD_INT 3
6282: PPUSH
6283: LD_INT 0
6285: PPUSH
6286: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
6290: LD_VAR 0 2
6294: PPUSH
6295: LD_INT 121
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: CALL_OW 111
// wait ( 0 0$0.8 ) ;
6305: LD_INT 28
6307: PPUSH
6308: CALL_OW 67
// end ;
6312: GO 6260
6314: POP
6315: POP
// CenterOnUnits ( Kurin ) ;
6316: LD_EXP 38
6320: PPUSH
6321: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
6325: LD_EXP 34
6329: PPUSH
6330: LD_EXP 38
6334: PPUSH
6335: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
6339: LD_INT 35
6341: PPUSH
6342: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
6346: LD_EXP 34
6350: PPUSH
6351: LD_EXP 38
6355: PPUSH
6356: CALL_OW 296
6360: PUSH
6361: LD_INT 6
6363: LESS
6364: IFFALSE 6339
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6366: LD_EXP 34
6370: PUSH
6371: LD_EXP 35
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: LD_EXP 38
6384: PPUSH
6385: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_VAR 0 3
6398: PUSH
6399: LD_EXP 34
6403: PUSH
6404: LD_EXP 35
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: DIFF
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6481
// if GetClass ( i ) = class_soldier then
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 257
6426: PUSH
6427: LD_INT 1
6429: EQUAL
6430: IFFALSE 6467
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 95
6439: PUSH
6440: LD_INT 209
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: LD_INT 2
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: PPUSH
6461: CALL_OW 120
6465: GO 6479
// ComEnterUnit ( i , ru_lab ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 83
6474: PPUSH
6475: CALL_OW 120
6479: GO 6414
6481: POP
6482: POP
// Say ( Kurin , D1-Kur-1 ) ;
6483: LD_EXP 38
6487: PPUSH
6488: LD_STRING D1-Kur-1
6490: PPUSH
6491: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6495: LD_EXP 34
6499: PPUSH
6500: LD_STRING D1-Bur-1
6502: PPUSH
6503: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6507: LD_INT 10
6509: PPUSH
6510: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6514: LD_EXP 38
6518: PPUSH
6519: LD_STRING D1-Kur-2
6521: PPUSH
6522: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6526: LD_EXP 39
6530: PPUSH
6531: CALL 56219 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6535: LD_EXP 39
6539: PPUSH
6540: LD_INT 115
6542: PPUSH
6543: LD_INT 108
6545: PPUSH
6546: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6550: LD_EXP 39
6554: PPUSH
6555: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6559: LD_EXP 34
6563: PPUSH
6564: LD_STRING D1-Bur-2
6566: PPUSH
6567: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6571: LD_EXP 38
6575: PPUSH
6576: LD_STRING D1-Kur-3
6578: PPUSH
6579: CALL_OW 88
// if Gnyevko then
6583: LD_EXP 35
6587: IFFALSE 6601
// Say ( Kurin , D1-Kur-3a ) ;
6589: LD_EXP 38
6593: PPUSH
6594: LD_STRING D1-Kur-3a
6596: PPUSH
6597: CALL_OW 88
// InGameOff ;
6601: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6605: LD_STRING M1
6607: PPUSH
6608: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6612: LD_INT 112
6614: PPUSH
6615: LD_INT 107
6617: PPUSH
6618: LD_INT 3
6620: PPUSH
6621: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6625: LD_INT 66
6627: PPUSH
6628: LD_INT 99
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: LD_INT 7
6636: NEG
6637: PPUSH
6638: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6642: LD_INT 66
6644: PPUSH
6645: LD_INT 99
6647: PPUSH
6648: LD_INT 3
6650: PPUSH
6651: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6655: LD_EXP 39
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: CALL_OW 235
// if Gnyevko then
6667: LD_EXP 35
6671: IFFALSE 6685
// SetSide ( Gnyevko , 3 ) ;
6673: LD_EXP 35
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 235
// SaveForQuickRestart ;
6685: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6689: LD_EXP 38
6693: PPUSH
6694: LD_INT 71
6696: PPUSH
6697: CALL_OW 120
// wait ( 0 0$2 ) ;
6701: LD_INT 70
6703: PPUSH
6704: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6708: LD_EXP 43
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL 56219 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6721: LD_EXP 43
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_INT 98
6732: PPUSH
6733: LD_INT 98
6735: PPUSH
6736: CALL_OW 428
6740: PPUSH
6741: CALL_OW 180
// wait ( 0 0$12 ) ;
6745: LD_INT 420
6747: PPUSH
6748: CALL_OW 67
// kurinDontWannaTalk := true ;
6752: LD_ADDR_EXP 5
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 1
6764: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6765: LD_EXP 5
6769: IFFALSE 6805
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 91
6784: PUSH
6785: LD_INT 71
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: AND
6805: IFFALSE 6992
6807: GO 6809
6809: DISABLE
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 91
6832: PUSH
6833: LD_INT 71
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// InGameOn ;
6853: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6857: LD_INT 116
6859: PPUSH
6860: LD_INT 107
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: LD_INT 3
6868: PPUSH
6869: CALL_OW 330
// ComExit ( Kurin ) ;
6873: LD_EXP 38
6877: PPUSH
6878: CALL 56219 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6882: LD_EXP 38
6886: PPUSH
6887: LD_VAR 0 2
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6900: LD_EXP 38
6904: PPUSH
6905: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_INT 87
6916: PPUSH
6917: LD_INT 99
6919: PPUSH
6920: CALL_OW 111
// if kirovHasTank then
6924: LD_EXP 6
6928: IFFALSE 6944
// Say ( Kurin , D1a-Kur-1a ) else
6930: LD_EXP 38
6934: PPUSH
6935: LD_STRING D1a-Kur-1a
6937: PPUSH
6938: CALL_OW 88
6942: GO 6956
// Say ( Kurin , D1a-Kur-1 ) ;
6944: LD_EXP 38
6948: PPUSH
6949: LD_STRING D1a-Kur-1
6951: PPUSH
6952: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6956: LD_EXP 38
6960: PPUSH
6961: LD_INT 71
6963: PPUSH
6964: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6968: LD_INT 116
6970: PPUSH
6971: LD_INT 107
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: CALL_OW 331
// wait ( 0 0$3 ) ;
6981: LD_INT 105
6983: PPUSH
6984: CALL_OW 67
// InGameOff ;
6988: CALL_OW 9
// end ;
6992: PPOPN 2
6994: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6995: LD_INT 22
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 95
7007: PUSH
7008: LD_INT 4
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PPUSH
7019: CALL_OW 69
7023: IFFALSE 7031
7025: PUSH
7026: LD_EXP 7
7030: AND
7031: IFFALSE 7374
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin enable ;
7043: ENABLE
// blockNorth := false ;
7044: LD_ADDR_EXP 7
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// InGameOn ;
7052: CALL_OW 8
// DialogueOn ;
7056: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 95
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
7094: LD_EXP 39
7098: PUSH
7099: LD_VAR 0 2
7103: IN
7104: IFFALSE 7117
7106: PUSH
7107: LD_EXP 39
7111: PPUSH
7112: CALL_OW 302
7116: AND
7117: IFFALSE 7133
// Say ( Kovalyuk , D1b-Kov-1 ) else
7119: LD_EXP 39
7123: PPUSH
7124: LD_STRING D1b-Kov-1
7126: PPUSH
7127: CALL_OW 88
7131: GO 7170
// if Burlak in tmp and IsOk ( Burlak ) then
7133: LD_EXP 34
7137: PUSH
7138: LD_VAR 0 2
7142: IN
7143: IFFALSE 7156
7145: PUSH
7146: LD_EXP 34
7150: PPUSH
7151: CALL_OW 302
7155: AND
7156: IFFALSE 7170
// Say ( Burlak , D1b-Bur-1 ) ;
7158: LD_EXP 34
7162: PPUSH
7163: LD_STRING D1b-Bur-1
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
7174: LD_INT 22
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: CALL_OW 141
// for i in tmp do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: FOR_IN
7225: IFFALSE 7353
// begin d := rand ( 2 , 3 ) ;
7227: LD_ADDR_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 3
7237: PPUSH
7238: CALL_OW 12
7242: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
7243: LD_ADDR_VAR 0 3
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 250
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: LD_INT 6
7265: PPUSH
7266: CALL_OW 272
7270: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 251
7285: PPUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 273
7298: ST_TO_ADDR
// if ValidHex ( x , y ) then
7299: LD_VAR 0 3
7303: PPUSH
7304: LD_VAR 0 4
7308: PPUSH
7309: CALL_OW 488
7313: IFFALSE 7336
// ComMoveXY ( i , x , y ) else
7315: LD_VAR 0 1
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 111
7334: GO 7351
// ComMoveXY ( i , 79 , 85 ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 79
7343: PPUSH
7344: LD_INT 85
7346: PPUSH
7347: CALL_OW 111
// end ;
7351: GO 7224
7353: POP
7354: POP
// wait ( 0 0$5 ) ;
7355: LD_INT 175
7357: PPUSH
7358: CALL_OW 67
// InGameOff ;
7362: CALL_OW 9
// blockNorth := true ;
7366: LD_ADDR_EXP 7
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// end ;
7374: PPOPN 5
7376: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7377: LD_EXP 44
7381: PPUSH
7382: LD_INT 101
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: IFFALSE 7405
7398: PUSH
7399: LD_EXP 4
7403: NOT
7404: AND
7405: IFFALSE 7809
7407: GO 7409
7409: DISABLE
7410: LD_INT 0
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7417: LD_ADDR_VAR 0 5
7421: PUSH
7422: LD_EXP 44
7426: PPUSH
7427: LD_EXP 34
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// InGameOn ;
7437: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7441: LD_VAR 0 5
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 5
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 3
7463: PPUSH
7464: LD_INT 6
7466: PPUSH
7467: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7471: LD_VAR 0 5
7475: PPUSH
7476: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7480: LD_VAR 0 5
7484: PPUSH
7485: LD_EXP 34
7489: PPUSH
7490: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7494: LD_VAR 0 5
7498: PPUSH
7499: LD_STRING D2-RSol1-1
7501: PPUSH
7502: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 5
7525: PPUSH
7526: CALL_OW 254
7530: PPUSH
7531: LD_INT 3
7533: PPUSH
7534: CALL_OW 272
7538: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: LD_VAR 0 5
7548: PPUSH
7549: CALL_OW 251
7553: PPUSH
7554: LD_VAR 0 5
7558: PPUSH
7559: CALL_OW 254
7563: PPUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 273
7571: ST_TO_ADDR
// if ValidHex ( x , y ) then
7572: LD_VAR 0 3
7576: PPUSH
7577: LD_VAR 0 4
7581: PPUSH
7582: CALL_OW 488
7586: IFFALSE 7618
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7588: LD_EXP 35
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_VAR 0 4
7611: PPUSH
7612: CALL_OW 111
7616: GO 7641
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7618: LD_EXP 35
7622: PUSH
7623: LD_EXP 39
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: LD_VAR 0 5
7636: PPUSH
7637: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7641: LD_EXP 34
7645: PPUSH
7646: LD_VAR 0 5
7650: PPUSH
7651: CALL_OW 112
// p := 0 ;
7655: LD_ADDR_VAR 0 2
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// p := p + 1 ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 10
7691: GREATER
7692: IFTRUE 7714
7694: PUSH
7695: LD_EXP 34
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: CALL_OW 296
7709: PUSH
7710: LD_INT 6
7712: LESS
7713: OR
7714: IFFALSE 7663
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7716: LD_EXP 34
7720: PUSH
7721: LD_EXP 35
7725: PUSH
7726: LD_EXP 39
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7745: LD_EXP 34
7749: PPUSH
7750: LD_STRING D2-Bur-1
7752: PPUSH
7753: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7757: LD_VAR 0 5
7761: PPUSH
7762: LD_STRING D2-RSol1-2
7764: PPUSH
7765: CALL_OW 88
// ComHold ( nearestGuard ) ;
7769: LD_VAR 0 5
7773: PPUSH
7774: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7778: LD_VAR 0 5
7782: PPUSH
7783: CALL_OW 250
7787: PPUSH
7788: LD_VAR 0 5
7792: PPUSH
7793: CALL_OW 251
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 331
// InGameOff ;
7805: CALL_OW 9
// end ;
7809: PPOPN 5
7811: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7812: LD_EXP 34
7816: PPUSH
7817: LD_EXP 40
7821: PPUSH
7822: CALL_OW 296
7826: PUSH
7827: LD_INT 10
7829: LESS
7830: IFFALSE 7846
7832: PUSH
7833: LD_INT 3
7835: PPUSH
7836: LD_EXP 40
7840: PPUSH
7841: CALL_OW 292
7845: AND
7846: IFFALSE 8204
7848: GO 7850
7850: DISABLE
7851: LD_INT 0
7853: PPUSH
// begin InGameOn ;
7854: CALL_OW 8
// beriaVisited := true ;
7858: LD_ADDR_EXP 4
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7866: LD_EXP 34
7870: PPUSH
7871: LD_EXP 40
7875: PPUSH
7876: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7880: LD_EXP 35
7884: PUSH
7885: LD_EXP 39
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PPUSH
7894: LD_INT 68
7896: PPUSH
7897: LD_INT 99
7899: PPUSH
7900: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7904: LD_EXP 40
7908: PPUSH
7909: LD_EXP 34
7913: PPUSH
7914: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7918: LD_EXP 40
7922: PPUSH
7923: LD_STRING D2-Pla-2
7925: PPUSH
7926: CALL_OW 88
// p := 0 ;
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7938: LD_INT 35
7940: PPUSH
7941: CALL_OW 67
// p := p + 1 ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 1
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7959: LD_EXP 34
7963: PPUSH
7964: LD_EXP 40
7968: PPUSH
7969: CALL_OW 296
7973: PUSH
7974: LD_INT 6
7976: LESS
7977: IFTRUE 7989
7979: PUSH
7980: LD_VAR 0 1
7984: PUSH
7985: LD_INT 8
7987: GREATER
7988: OR
7989: IFFALSE 7938
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7991: LD_EXP 34
7995: PUSH
7996: LD_EXP 35
8000: PUSH
8001: LD_EXP 39
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PPUSH
8011: LD_EXP 40
8015: PPUSH
8016: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
8020: LD_EXP 34
8024: PPUSH
8025: LD_STRING D2-Bur-2
8027: PPUSH
8028: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
8032: LD_INT 6
8034: PPUSH
8035: LD_INT 3
8037: PPUSH
8038: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
8042: LD_EXP 40
8046: PPUSH
8047: LD_STRING D2-Pla-3
8049: PPUSH
8050: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8054: LD_EXP 34
8058: PPUSH
8059: LD_STRING D2-Bur-3
8061: PPUSH
8062: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8066: LD_EXP 40
8070: PPUSH
8071: LD_STRING D2-Pla-4
8073: PPUSH
8074: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8078: LD_EXP 34
8082: PPUSH
8083: LD_STRING D2-Bur-4
8085: PPUSH
8086: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8090: LD_EXP 40
8094: PPUSH
8095: LD_STRING D2-Pla-5
8097: PPUSH
8098: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
8102: LD_INT 1
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL 8207 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8124: LD_EXP 40
8128: PPUSH
8129: LD_STRING D3-Pla-1
8131: PPUSH
8132: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8136: LD_EXP 34
8140: PPUSH
8141: LD_STRING D3-Bur-1
8143: PPUSH
8144: CALL_OW 88
// InGameOff ;
8148: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8152: LD_STRING M2a
8154: PPUSH
8155: CALL_OW 337
// SetSide ( beria , 3 ) ;
8159: LD_INT 106
8161: PPUSH
8162: LD_INT 3
8164: PPUSH
8165: CALL_OW 235
// if not Gnyevko then
8169: LD_EXP 35
8173: NOT
8174: IFFALSE 8195
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
8176: LD_INT 106
8178: PPUSH
8179: CALL_OW 313
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_INT 3
8190: PPUSH
8191: CALL_OW 235
// ComFree ( Platonov ) ;
8195: LD_EXP 40
8199: PPUSH
8200: CALL_OW 139
// end ;
8204: PPOPN 1
8206: END
// function AskPlatonov ( questions ) ; var q ; begin
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_STRING QMoreInfo
8218: PPUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 98
8228: ST_TO_ADDR
// case q of 1 :
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: DOUBLE
8237: EQUAL
8238: IFTRUE 8242
8240: GO 8269
8242: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
8243: LD_EXP 34
8247: PPUSH
8248: LD_STRING D2a-Bur-1
8250: PPUSH
8251: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
8255: LD_EXP 40
8259: PPUSH
8260: LD_STRING D2a-Pla-1
8262: PPUSH
8263: CALL_OW 88
// end ; 2 :
8267: GO 8340
8269: LD_INT 2
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8304
8277: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
8278: LD_EXP 34
8282: PPUSH
8283: LD_STRING D2b-Bur-1
8285: PPUSH
8286: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
8290: LD_EXP 40
8294: PPUSH
8295: LD_STRING D2b-Pla-1
8297: PPUSH
8298: CALL_OW 88
// end ; 3 :
8302: GO 8340
8304: LD_INT 3
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8339
8312: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
8313: LD_EXP 34
8317: PPUSH
8318: LD_STRING D2c-Bur-1
8320: PPUSH
8321: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
8325: LD_EXP 40
8329: PPUSH
8330: LD_STRING D2c-Pla-1
8332: PPUSH
8333: CALL_OW 88
// end ; end ;
8337: GO 8340
8339: POP
// if q < 4 and questions > 2 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 4
8347: LESS
8348: IFFALSE 8360
8350: PUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_INT 2
8358: GREATER
8359: AND
8360: IFFALSE 8377
// AskPlatonov ( questions diff q ) ;
8362: LD_VAR 0 1
8366: PUSH
8367: LD_VAR 0 3
8371: DIFF
8372: PPUSH
8373: CALL 8207 0 1
// end ;
8377: LD_VAR 0 2
8381: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8382: LD_INT 0
8384: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8385: LD_EXP 40
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8404: LD_INT 35
8406: PPUSH
8407: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8411: LD_EXP 40
8415: PPUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 2
8425: PPUSH
8426: CALL_OW 297
8430: PUSH
8431: LD_INT 5
8433: LESS
8434: IFFALSE 8456
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 283
8451: PUSH
8452: LD_INT 1
8454: EQUAL
8455: AND
8456: IFFALSE 8404
// ComStop ( Platonov ) ;
8458: LD_EXP 40
8462: PPUSH
8463: CALL_OW 141
// if ingame_video then
8467: LD_OWVAR 52
8471: IFFALSE 8475
// exit ;
8473: GO 8496
// ComHold ( Platonov ) ;
8475: LD_EXP 40
8479: PPUSH
8480: CALL_OW 140
// Say ( Platonov , D4-Pla-1 ) ;
8484: LD_EXP 40
8488: PPUSH
8489: LD_STRING D4-Pla-1
8491: PPUSH
8492: CALL_OW 88
// end ;
8496: LD_VAR 0 3
8500: RET
// every 0 0$2 trigger hasLab do
8501: LD_EXP 9
8505: IFFALSE 8569
8507: GO 8509
8509: DISABLE
// begin DialogueOn ;
8510: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8514: LD_EXP 34
8518: PPUSH
8519: LD_STRING D5a-Bur-1
8521: PPUSH
8522: CALL_OW 88
// if hasWorkshop then
8526: LD_EXP 10
8530: IFFALSE 8546
// Say ( Platonov , D5a-Pla-1 ) else
8532: LD_EXP 40
8536: PPUSH
8537: LD_STRING D5a-Pla-1
8539: PPUSH
8540: CALL_OW 88
8544: GO 8558
// Say ( Platonov , D5a-Pla-1a ) ;
8546: LD_EXP 40
8550: PPUSH
8551: LD_STRING D5a-Pla-1a
8553: PPUSH
8554: CALL_OW 88
// DialogueOff ;
8558: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8562: LD_STRING M2b
8564: PPUSH
8565: CALL_OW 337
// end ;
8569: END
// every 0 0$2 trigger hasWorkshop do
8570: LD_EXP 10
8574: IFFALSE 8638
8576: GO 8578
8578: DISABLE
// begin DialogueOn ;
8579: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8583: LD_EXP 34
8587: PPUSH
8588: LD_STRING D5b-Bur-1
8590: PPUSH
8591: CALL_OW 88
// if hasLab then
8595: LD_EXP 9
8599: IFFALSE 8615
// Say ( Platonov , D5b-Pla-1 ) else
8601: LD_EXP 40
8605: PPUSH
8606: LD_STRING D5b-Pla-1
8608: PPUSH
8609: CALL_OW 88
8613: GO 8627
// Say ( Platonov , D5b-Pla-1a ) ;
8615: LD_EXP 40
8619: PPUSH
8620: LD_STRING D5b-Pla-1a
8622: PPUSH
8623: CALL_OW 88
// DialogueOff ;
8627: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8631: LD_STRING M2c
8633: PPUSH
8634: CALL_OW 337
// end ;
8638: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8639: LD_EXP 9
8643: IFFALSE 8651
8645: PUSH
8646: LD_EXP 10
8650: AND
8651: IFFALSE 8745
8653: GO 8655
8655: DISABLE
// begin DialogueOn ;
8656: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8660: LD_INT 47
8662: PPUSH
8663: LD_INT 3
8665: PPUSH
8666: CALL_OW 321
8670: PUSH
8671: LD_INT 2
8673: EQUAL
8674: IFFALSE 8702
// begin Say ( Burlak , D7b-Bur-1 ) ;
8676: LD_EXP 34
8680: PPUSH
8681: LD_STRING D7b-Bur-1
8683: PPUSH
8684: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8688: LD_EXP 40
8692: PPUSH
8693: LD_STRING D7b-Pla-1
8695: PPUSH
8696: CALL_OW 88
// end else
8700: GO 8726
// begin Say ( Burlak , D7a-Bur-1 ) ;
8702: LD_EXP 34
8706: PPUSH
8707: LD_STRING D7a-Bur-1
8709: PPUSH
8710: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8714: LD_EXP 40
8718: PPUSH
8719: LD_STRING D7a-Pla-1
8721: PPUSH
8722: CALL_OW 88
// end ; DialogueOff ;
8726: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8730: LD_STRING M2
8732: PPUSH
8733: CALL_OW 337
// hasToBuildTank := true ;
8737: LD_ADDR_EXP 11
8741: PUSH
8742: LD_INT 1
8744: ST_TO_ADDR
// end ;
8745: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8746: LD_EXP 4
8750: IFFALSE 8776
8752: PUSH
8753: LD_EXP 9
8757: NOT
8758: IFTRUE 8767
8760: PUSH
8761: LD_EXP 10
8765: NOT
8766: OR
8767: IFTRUE 8775
8769: PUSH
8770: LD_EXP 11
8774: OR
8775: AND
8776: IFFALSE 8819
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 3
8791: PUSH
8792: LD_INT 91
8794: PUSH
8795: LD_INT 106
8797: PUSH
8798: LD_INT 32
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PPUSH
8814: CALL_OW 69
8818: AND
8819: IFFALSE 8928
8821: GO 8823
8823: DISABLE
8824: LD_INT 0
8826: PPUSH
// begin enable ;
8827: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8828: LD_ADDR_VAR 0 1
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 3
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: LD_INT 91
8848: PUSH
8849: LD_INT 106
8851: PUSH
8852: LD_INT 32
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: PPUSH
8868: CALL_OW 69
8872: ST_TO_ADDR
// InGameOn ;
8873: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8877: LD_VAR 0 1
8881: PUSH
8882: LD_INT 1
8884: ARRAY
8885: PPUSH
8886: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8890: LD_VAR 0 1
8894: PPUSH
8895: LD_INT 66
8897: PPUSH
8898: LD_INT 99
8900: PPUSH
8901: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8905: LD_EXP 40
8909: PPUSH
8910: LD_STRING D8-Pla-1
8912: PPUSH
8913: CALL_OW 88
// wait ( 0 0$3 ) ;
8917: LD_INT 105
8919: PPUSH
8920: CALL_OW 67
// InGameOff ;
8924: CALL_OW 9
// end ;
8928: PPOPN 1
8930: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8931: LD_INT 21
8933: PPUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 23
8946: PUSH
8947: LD_INT 3
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: LD_INT 2
8956: PUSH
8957: LD_INT 30
8959: PUSH
8960: LD_INT 4
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PUSH
8967: LD_INT 30
8969: PUSH
8970: LD_INT 31
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: EMPTY
8978: LIST
8979: LIST
8980: LIST
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: LIST
8986: PPUSH
8987: CALL_OW 70
8991: IFFALSE 9000
8993: PUSH
8994: LD_EXP 31
8998: NOT
8999: AND
9000: IFFALSE 9251
9002: GO 9004
9004: DISABLE
9005: LD_INT 0
9007: PPUSH
// begin enable ;
9008: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) [ 1 ] ;
9009: LD_ADDR_VAR 0 1
9013: PUSH
9014: LD_INT 21
9016: PPUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 23
9029: PUSH
9030: LD_INT 3
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: LD_INT 2
9039: PUSH
9040: LD_INT 30
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 30
9052: PUSH
9053: LD_INT 31
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 70
9074: PUSH
9075: LD_INT 1
9077: ARRAY
9078: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9079: LD_EXP 40
9083: PPUSH
9084: LD_VAR 0 1
9088: PPUSH
9089: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9093: LD_INT 35
9095: PPUSH
9096: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9100: LD_EXP 40
9104: PPUSH
9105: LD_VAR 0 1
9109: PPUSH
9110: CALL_OW 296
9114: PUSH
9115: LD_INT 6
9117: LESS
9118: IFFALSE 9093
// InGameOn ;
9120: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9124: LD_EXP 40
9128: PPUSH
9129: LD_VAR 0 1
9133: PPUSH
9134: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9138: LD_EXP 34
9142: PPUSH
9143: LD_EXP 40
9147: PPUSH
9148: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
9152: LD_EXP 40
9156: PPUSH
9157: LD_STRING D6-Pla-1
9159: PPUSH
9160: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9164: LD_EXP 34
9168: PPUSH
9169: LD_STRING D6-Bur-1
9171: PPUSH
9172: CALL_OW 88
// RemoveUnit ( tmp ) ;
9176: LD_VAR 0 1
9180: PPUSH
9181: CALL_OW 64
// if GetBType ( tmp ) = b_breastwork then
9185: LD_VAR 0 1
9189: PPUSH
9190: CALL_OW 266
9194: PUSH
9195: LD_INT 31
9197: EQUAL
9198: IFFALSE 9220
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
9200: LD_INT 106
9202: PPUSH
9203: CALL_OW 274
9207: PPUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 10
9213: PPUSH
9214: CALL_OW 276
9218: GO 9238
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
9220: LD_INT 106
9222: PPUSH
9223: CALL_OW 274
9227: PPUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_INT 30
9233: PPUSH
9234: CALL_OW 276
// InGameOff ;
9238: CALL_OW 9
// ComFree ( Burlak ) ;
9242: LD_EXP 34
9246: PPUSH
9247: CALL_OW 139
// end ;
9251: PPOPN 1
9253: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
9254: LD_EXP 4
9258: IFFALSE 9304
9260: PUSH
9261: LD_INT 21
9263: PPUSH
9264: LD_INT 22
9266: PUSH
9267: LD_INT 3
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 23
9276: PUSH
9277: LD_INT 3
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: PUSH
9284: LD_INT 21
9286: PUSH
9287: LD_INT 3
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: PPUSH
9299: CALL_OW 71
9303: AND
9304: IFFALSE 9625
9306: GO 9308
9308: DISABLE
9309: LD_INT 0
9311: PPUSH
9312: PPUSH
// begin enable ;
9313: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
9314: LD_ADDR_VAR 0 1
9318: PUSH
9319: LD_INT 21
9321: PPUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 3
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PUSH
9332: LD_INT 23
9334: PUSH
9335: LD_INT 3
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 21
9344: PUSH
9345: LD_INT 3
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: PPUSH
9357: CALL_OW 71
9361: PUSH
9362: LD_INT 1
9364: ARRAY
9365: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9366: LD_EXP 40
9370: PPUSH
9371: LD_VAR 0 1
9375: PPUSH
9376: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9380: LD_INT 35
9382: PPUSH
9383: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9387: LD_EXP 40
9391: PPUSH
9392: LD_VAR 0 1
9396: PPUSH
9397: CALL_OW 296
9401: PUSH
9402: LD_INT 6
9404: LESS
9405: IFFALSE 9380
// InGameOn ;
9407: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9411: LD_EXP 40
9415: PPUSH
9416: LD_VAR 0 1
9420: PPUSH
9421: CALL_OW 119
// ComTurnUnit ( Burlak , Platonov ) ;
9425: LD_EXP 34
9429: PPUSH
9430: LD_EXP 40
9434: PPUSH
9435: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
9439: LD_EXP 40
9443: PPUSH
9444: LD_STRING DPlatAngry
9446: PPUSH
9447: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9451: LD_EXP 34
9455: PPUSH
9456: LD_STRING D6-Bur-1
9458: PPUSH
9459: CALL_OW 88
// RemoveUnit ( tmp ) ;
9463: LD_VAR 0 1
9467: PPUSH
9468: CALL_OW 64
// InGameOff ;
9472: CALL_OW 9
// ComFree ( Burlak ) ;
9476: LD_EXP 34
9480: PPUSH
9481: CALL_OW 139
// amount := 0 ;
9485: LD_ADDR_VAR 0 2
9489: PUSH
9490: LD_INT 0
9492: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9493: LD_VAR 0 1
9497: PPUSH
9498: CALL_OW 266
9502: PUSH
9503: LD_INT 31
9505: DOUBLE
9506: EQUAL
9507: IFTRUE 9511
9509: GO 9522
9511: POP
// amount := 10 ; b_lab :
9512: LD_ADDR_VAR 0 2
9516: PUSH
9517: LD_INT 10
9519: ST_TO_ADDR
9520: GO 9599
9522: LD_INT 6
9524: DOUBLE
9525: EQUAL
9526: IFTRUE 9530
9528: GO 9541
9530: POP
// amount := 20 ; b_armoury :
9531: LD_ADDR_VAR 0 2
9535: PUSH
9536: LD_INT 20
9538: ST_TO_ADDR
9539: GO 9599
9541: LD_INT 4
9543: DOUBLE
9544: EQUAL
9545: IFTRUE 9549
9547: GO 9560
9549: POP
// amount := 30 ; b_workshop :
9550: LD_ADDR_VAR 0 2
9554: PUSH
9555: LD_INT 30
9557: ST_TO_ADDR
9558: GO 9599
9560: LD_INT 2
9562: DOUBLE
9563: EQUAL
9564: IFTRUE 9568
9566: GO 9579
9568: POP
// amount := 40 ; b_oil_power :
9569: LD_ADDR_VAR 0 2
9573: PUSH
9574: LD_INT 40
9576: ST_TO_ADDR
9577: GO 9599
9579: LD_INT 26
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9598
9587: POP
// amount := 20 ; end ;
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 20
9595: ST_TO_ADDR
9596: GO 9599
9598: POP
// if amount then
9599: LD_VAR 0 2
9603: IFFALSE 9625
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9605: LD_INT 106
9607: PPUSH
9608: CALL_OW 274
9612: PPUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 2
9620: PPUSH
9621: CALL_OW 276
// end ;
9625: PPOPN 2
9627: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9628: LD_INT 22
9630: PUSH
9631: LD_INT 3
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 92
9640: PUSH
9641: LD_INT 112
9643: PUSH
9644: LD_INT 155
9646: PUSH
9647: LD_INT 8
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: PPUSH
9660: CALL_OW 69
9664: PUSH
9665: LD_INT 2
9667: LESS
9668: IFFALSE 9691
9670: PUSH
9671: LD_EXP 34
9675: PPUSH
9676: LD_INT 112
9678: PPUSH
9679: LD_INT 155
9681: PPUSH
9682: CALL_OW 297
9686: PUSH
9687: LD_INT 8
9689: LESS
9690: AND
9691: IFFALSE 9906
9693: GO 9695
9695: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9696: LD_INT 112
9698: PPUSH
9699: LD_INT 155
9701: PPUSH
9702: LD_INT 3
9704: PPUSH
9705: LD_INT 4
9707: NEG
9708: PPUSH
9709: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9713: LD_INT 1
9715: PPUSH
9716: LD_EXP 34
9720: PPUSH
9721: CALL_OW 471
// uc_side := 1 ;
9725: LD_ADDR_OWVAR 20
9729: PUSH
9730: LD_INT 1
9732: ST_TO_ADDR
// uc_nation := 1 ;
9733: LD_ADDR_OWVAR 21
9737: PUSH
9738: LD_INT 1
9740: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9741: LD_ADDR_EXP 49
9745: PUSH
9746: LD_STRING Dickens
9748: PPUSH
9749: CALL_OW 25
9753: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9754: LD_EXP 49
9758: PPUSH
9759: LD_INT 112
9761: PPUSH
9762: LD_INT 155
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 48
// wait ( 0 0$2 ) ;
9772: LD_INT 70
9774: PPUSH
9775: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9779: LD_EXP 49
9783: PPUSH
9784: LD_EXP 34
9788: PPUSH
9789: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9793: LD_EXP 49
9797: PPUSH
9798: LD_STRING DUsSpawnSol
9800: PPUSH
9801: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9805: LD_INT 1
9807: PPUSH
9808: LD_EXP 34
9812: PPUSH
9813: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9817: LD_INT 112
9819: PPUSH
9820: LD_INT 155
9822: PPUSH
9823: LD_INT 3
9825: PPUSH
9826: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9830: LD_EXP 49
9834: PPUSH
9835: LD_INT 77
9837: PPUSH
9838: LD_INT 152
9840: PPUSH
9841: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9845: LD_INT 35
9847: PPUSH
9848: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9852: LD_EXP 49
9856: PPUSH
9857: CALL_OW 302
9861: NOT
9862: IFTRUE 9881
9864: PUSH
9865: LD_EXP 49
9869: PPUSH
9870: LD_INT 77
9872: PPUSH
9873: LD_INT 152
9875: PPUSH
9876: CALL_OW 307
9880: OR
9881: IFFALSE 9845
// if not IsOk ( Dickens ) then
9883: LD_EXP 49
9887: PPUSH
9888: CALL_OW 302
9892: NOT
9893: IFFALSE 9897
// exit ;
9895: GO 9906
// RemoveUnit ( Dickens ) ;
9897: LD_EXP 49
9901: PPUSH
9902: CALL_OW 64
// end ;
9906: END
// every 0 0$2 trigger GetLives ( Burlak ) < 900 do
9907: LD_EXP 34
9911: PPUSH
9912: CALL_OW 256
9916: PUSH
9917: LD_INT 900
9919: LESS
9920: IFFALSE 9952
9922: GO 9924
9924: DISABLE
// begin if SideShoot ( Burlak ) = 1 then
9925: LD_EXP 34
9929: PPUSH
9930: CALL_OW 503
9934: PUSH
9935: LD_INT 1
9937: EQUAL
9938: IFFALSE 9952
// Say ( Burlak , DUsSpawnBur ) ;
9940: LD_EXP 34
9944: PPUSH
9945: LD_STRING DUsSpawnBur
9947: PPUSH
9948: CALL_OW 88
// end ;
9952: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9953: LD_EXP 12
9957: IFFALSE 10863
9959: GO 9961
9961: DISABLE
9962: LD_INT 0
9964: PPUSH
9965: PPUSH
9966: PPUSH
9967: PPUSH
// begin hasToBuildTank := false ;
9968: LD_ADDR_EXP 11
9972: PUSH
9973: LD_INT 0
9975: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9976: LD_ADDR_EXP 5
9980: PUSH
9981: LD_INT 0
9983: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9984: LD_ADDR_VAR 0 2
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 21
10001: PUSH
10002: LD_INT 2
10004: PUSH
10005: EMPTY
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PPUSH
10013: CALL_OW 69
10017: ST_TO_ADDR
// InGameOn ;
10018: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
10022: LD_VAR 0 2
10026: PUSH
10027: LD_INT 1
10029: ARRAY
10030: PPUSH
10031: CALL_OW 85
// wait ( 0 0$1 ) ;
10035: LD_INT 35
10037: PPUSH
10038: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
10042: LD_EXP 34
10046: PPUSH
10047: LD_STRING D9-Bur-1
10049: PPUSH
10050: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
10054: LD_EXP 40
10058: PPUSH
10059: LD_VAR 0 2
10063: PUSH
10064: LD_INT 1
10066: ARRAY
10067: PPUSH
10068: CALL_OW 112
// p := 0 ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 0
10079: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10080: LD_INT 35
10082: PPUSH
10083: CALL_OW 67
// p := p + 1 ;
10087: LD_ADDR_VAR 0 3
10091: PUSH
10092: LD_VAR 0 3
10096: PUSH
10097: LD_INT 1
10099: PLUS
10100: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
10101: LD_EXP 40
10105: PPUSH
10106: LD_VAR 0 2
10110: PUSH
10111: LD_INT 1
10113: ARRAY
10114: PPUSH
10115: CALL_OW 296
10119: PUSH
10120: LD_INT 8
10122: LESS
10123: IFTRUE 10135
10125: PUSH
10126: LD_VAR 0 3
10130: PUSH
10131: LD_INT 8
10133: GREATER
10134: OR
10135: IFFALSE 10080
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
10137: LD_EXP 40
10141: PPUSH
10142: LD_VAR 0 2
10146: PUSH
10147: LD_INT 1
10149: ARRAY
10150: PPUSH
10151: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
10155: LD_EXP 40
10159: PPUSH
10160: LD_STRING D9-Pla-1
10162: PPUSH
10163: CALL_OW 88
// ComFree ( Platonov ) ;
10167: LD_EXP 40
10171: PPUSH
10172: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
10176: LD_EXP 40
10180: PPUSH
10181: LD_INT 64
10183: PPUSH
10184: LD_INT 98
10186: PPUSH
10187: CALL_OW 171
// InGameOff ;
10191: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
10195: LD_STRING M3
10197: PPUSH
10198: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
10202: LD_EXP 41
10206: PPUSH
10207: LD_INT 70
10209: PPUSH
10210: LD_INT 108
10212: PPUSH
10213: CALL_OW 111
// AddComHold ( Kuklajs ) ;
10217: LD_EXP 41
10221: PPUSH
10222: CALL_OW 200
// wait ( 1 ) ;
10226: LD_INT 1
10228: PPUSH
10229: CALL_OW 67
// ComExit ( Belkov ) ;
10233: LD_EXP 36
10237: PPUSH
10238: CALL 56219 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
10242: LD_EXP 36
10246: PPUSH
10247: LD_INT 113
10249: PPUSH
10250: LD_INT 104
10252: PPUSH
10253: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
10257: LD_EXP 36
10261: PPUSH
10262: LD_INT 116
10264: PPUSH
10265: LD_INT 108
10267: PPUSH
10268: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
10272: LD_INT 35
10274: PPUSH
10275: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10279: LD_INT 22
10281: PUSH
10282: LD_INT 3
10284: PUSH
10285: EMPTY
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 21
10291: PUSH
10292: LD_INT 2
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 91
10301: PUSH
10302: LD_INT 71
10304: PUSH
10305: LD_INT 8
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: EMPTY
10314: LIST
10315: LIST
10316: LIST
10317: PPUSH
10318: CALL_OW 69
10322: IFFALSE 10272
// InGameOn ;
10324: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10328: LD_ADDR_VAR 0 2
10332: PUSH
10333: LD_INT 22
10335: PUSH
10336: LD_INT 3
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 21
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 91
10355: PUSH
10356: LD_INT 71
10358: PUSH
10359: LD_INT 8
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: ST_TO_ADDR
// ComExit ( Kurin ) ;
10377: LD_EXP 38
10381: PPUSH
10382: CALL 56219 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10386: LD_EXP 38
10390: PPUSH
10391: LD_VAR 0 2
10395: PUSH
10396: LD_INT 1
10398: ARRAY
10399: PPUSH
10400: CALL_OW 179
// wait ( 0 0$1 ) ;
10404: LD_INT 35
10406: PPUSH
10407: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10411: LD_VAR 0 2
10415: PUSH
10416: LD_INT 1
10418: ARRAY
10419: PPUSH
10420: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10424: LD_ADDR_VAR 0 4
10428: PUSH
10429: LD_VAR 0 2
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PPUSH
10438: CALL_OW 311
10442: ST_TO_ADDR
// ComExit ( un ) ;
10443: LD_VAR 0 4
10447: PPUSH
10448: CALL 56219 0 1
// wait ( 0 0$1 ) ;
10452: LD_INT 35
10454: PPUSH
10455: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10459: LD_VAR 0 4
10463: PPUSH
10464: LD_EXP 38
10468: PPUSH
10469: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10473: LD_EXP 36
10477: PPUSH
10478: LD_VAR 0 2
10482: PUSH
10483: LD_INT 1
10485: ARRAY
10486: PPUSH
10487: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10491: LD_INT 10
10493: PPUSH
10494: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10498: LD_EXP 38
10502: PPUSH
10503: LD_STRING D10-Kur-1
10505: PPUSH
10506: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10510: LD_EXP 36
10514: PPUSH
10515: LD_INT 122
10517: PPUSH
10518: LD_INT 112
10520: PPUSH
10521: CALL_OW 176
// wait ( 0 0$2 ) ;
10525: LD_INT 70
10527: PPUSH
10528: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10532: LD_EXP 36
10536: PPUSH
10537: LD_STRING D10-Bel-1
10539: PPUSH
10540: CALL_OW 88
// if belkovBrother then
10544: LD_EXP 32
10548: IFFALSE 10600
// begin Say ( Burlak , D10-Bur-1 ) ;
10550: LD_EXP 34
10554: PPUSH
10555: LD_STRING D10-Bur-1
10557: PPUSH
10558: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10562: LD_EXP 36
10566: PPUSH
10567: LD_STRING D10-Bel-2
10569: PPUSH
10570: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10574: LD_EXP 34
10578: PPUSH
10579: LD_STRING D10-Bur-2
10581: PPUSH
10582: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10586: LD_EXP 38
10590: PPUSH
10591: LD_STRING D10-Kur-2a
10593: PPUSH
10594: CALL_OW 88
// end else
10598: GO 10612
// begin Say ( Kurin , D10-Kur-2 ) end ;
10600: LD_EXP 38
10604: PPUSH
10605: LD_STRING D10-Kur-2
10607: PPUSH
10608: CALL_OW 88
// wait ( 0 0$2 ) ;
10612: LD_INT 70
10614: PPUSH
10615: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10619: LD_EXP 38
10623: PPUSH
10624: LD_STRING D10-Kur-2b
10626: PPUSH
10627: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10631: LD_VAR 0 4
10635: PPUSH
10636: LD_INT 66
10638: PPUSH
10639: LD_INT 97
10641: PPUSH
10642: CALL_OW 111
// wait ( 0 0$5 ) ;
10646: LD_INT 175
10648: PPUSH
10649: CALL_OW 67
// InGameOff ;
10653: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10657: LD_EXP 33
10661: PPUSH
10662: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10666: LD_STRING M4
10668: PPUSH
10669: CALL_OW 337
// wait ( 0 0$6 ) ;
10673: LD_INT 210
10675: PPUSH
10676: CALL_OW 67
// kurinDontWannaTalk := true ;
10680: LD_ADDR_EXP 5
10684: PUSH
10685: LD_INT 1
10687: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10688: LD_INT 140
10690: PPUSH
10691: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10695: LD_INT 35
10697: PPUSH
10698: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10702: LD_EXP 34
10706: PPUSH
10707: CALL_OW 310
10711: IFTRUE 10731
10713: PUSH
10714: LD_EXP 34
10718: PPUSH
10719: LD_INT 106
10721: PPUSH
10722: CALL_OW 296
10726: PUSH
10727: LD_INT 12
10729: LESS
10730: OR
10731: IFFALSE 10695
// DialogueOn ;
10733: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10737: LD_EXP 40
10741: PPUSH
10742: LD_STRING D11-Pla-1
10744: PPUSH
10745: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10749: LD_EXP 34
10753: PPUSH
10754: LD_STRING D11-Bur-1
10756: PPUSH
10757: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10761: LD_INT 22
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 21
10773: PUSH
10774: LD_INT 1
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: PPUSH
10785: CALL_OW 69
10789: PUSH
10790: LD_INT 1
10792: GREATER
10793: IFFALSE 10807
// Say ( Burlak , D11-Bur-1a ) ;
10795: LD_EXP 34
10799: PPUSH
10800: LD_STRING D11-Bur-1a
10802: PPUSH
10803: CALL_OW 88
// DialogueOff ;
10807: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10811: LD_ADDR_EXP 8
10815: PUSH
10816: LD_INT 160
10818: PUSH
10819: LD_INT 150
10821: PUSH
10822: LD_INT 140
10824: PUSH
10825: LD_INT 120
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: LIST
10832: LIST
10833: PUSH
10834: LD_OWVAR 67
10838: ARRAY
10839: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10840: LD_STRING M5
10842: PPUSH
10843: CALL_OW 337
// kirovHasTank := true ;
10847: LD_ADDR_EXP 6
10851: PUSH
10852: LD_INT 1
10854: ST_TO_ADDR
// hasToBuildTank := true ;
10855: LD_ADDR_EXP 11
10859: PUSH
10860: LD_INT 1
10862: ST_TO_ADDR
// end ;
10863: PPOPN 4
10865: END
// every 0 0$2 trigger allianceAttacked do
10866: LD_EXP 13
10870: IFFALSE 10909
10872: GO 10874
10874: DISABLE
// begin DialogueOn ;
10875: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10879: LD_EXP 38
10883: PPUSH
10884: LD_STRING DArestKur
10886: PPUSH
10887: CALL_OW 88
// dwait ( 0 0$1 ) ;
10891: LD_INT 35
10893: PPUSH
10894: CALL_OW 68
// YouLost ( SelfAttack ) ;
10898: LD_STRING SelfAttack
10900: PPUSH
10901: CALL_OW 104
// DialogueOff ;
10905: CALL_OW 7
// end ;
10909: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10910: LD_INT 22
10912: PUSH
10913: LD_INT 3
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 21
10922: PUSH
10923: LD_INT 2
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL_OW 69
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 21
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PPUSH
10963: CALL_OW 69
10967: GREATEREQUAL
10968: IFFALSE 10976
10970: PUSH
10971: LD_EXP 6
10975: AND
10976: IFFALSE 11146
10978: GO 10980
10980: DISABLE
// begin hasToBuildTank := false ;
10981: LD_ADDR_EXP 11
10985: PUSH
10986: LD_INT 0
10988: ST_TO_ADDR
// blockNorth := false ;
10989: LD_ADDR_EXP 7
10993: PUSH
10994: LD_INT 0
10996: ST_TO_ADDR
// InGameOn ;
10997: CALL_OW 8
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
11008: LD_INT 106
11010: PPUSH
11011: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
11015: LD_EXP 40
11019: PPUSH
11020: LD_INT 65
11022: PPUSH
11023: LD_INT 97
11025: PPUSH
11026: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
11030: LD_EXP 40
11034: PPUSH
11035: LD_EXP 34
11039: PPUSH
11040: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
11044: LD_EXP 34
11048: PPUSH
11049: LD_STRING D12-Bur-1
11051: PPUSH
11052: CALL_OW 88
// wait ( 0 0$1 ) ;
11056: LD_INT 35
11058: PPUSH
11059: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
11063: LD_EXP 40
11067: PPUSH
11068: LD_STRING D12-Pla-1
11070: PPUSH
11071: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11075: LD_EXP 34
11079: PPUSH
11080: LD_STRING D12-Bur-2
11082: PPUSH
11083: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11087: LD_EXP 40
11091: PPUSH
11092: LD_STRING D12-Pla-2
11094: PPUSH
11095: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11099: LD_EXP 34
11103: PPUSH
11104: LD_STRING D12-Bur-3
11106: PPUSH
11107: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11111: LD_EXP 40
11115: PPUSH
11116: LD_STRING D12-Pla-3
11118: PPUSH
11119: CALL_OW 88
// hasAllTanks := true ;
11123: LD_ADDR_EXP 14
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// InGameOff ;
11131: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
11135: LD_STRING M6
11137: PPUSH
11138: CALL_OW 337
// PrepareAmerican ;
11142: CALL 4313 0 0
// end ;
11146: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
11147: LD_EXP 17
11151: IFFALSE 12928
11153: GO 11155
11155: DISABLE
11156: LD_INT 0
11158: PPUSH
11159: PPUSH
11160: PPUSH
11161: PPUSH
11162: PPUSH
11163: PPUSH
11164: PPUSH
// begin PrepareAmericanTrap ;
11165: CALL 5113 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
11169: LD_ADDR_VAR 0 2
11173: PUSH
11174: LD_EXP 48
11178: PPUSH
11179: LD_INT 26
11181: PUSH
11182: LD_INT 1
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: PPUSH
11189: CALL_OW 72
11193: PUSH
11194: LD_INT 1
11196: ARRAY
11197: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
11198: LD_INT 22
11200: PUSH
11201: LD_INT 3
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: PUSH
11208: LD_INT 3
11210: PUSH
11211: LD_INT 21
11213: PUSH
11214: LD_INT 3
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 60
11227: PUSH
11228: EMPTY
11229: LIST
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 69
11240: PPUSH
11241: CALL_OW 141
// InGameOn ;
11245: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
11249: LD_INT 69
11251: PPUSH
11252: LD_INT 22
11254: PPUSH
11255: CALL_OW 86
// wait ( 0 0$1 ) ;
11259: LD_INT 35
11261: PPUSH
11262: CALL_OW 67
// DialogueOn ;
11266: CALL_OW 6
// game_speed := 4 ;
11270: LD_ADDR_OWVAR 65
11274: PUSH
11275: LD_INT 4
11277: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
11278: LD_VAR 0 2
11282: PPUSH
11283: LD_STRING D13-Sol1-1
11285: PPUSH
11286: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
11290: LD_EXP 36
11294: PPUSH
11295: LD_STRING D13-Bel-1
11297: PPUSH
11298: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11302: LD_EXP 38
11306: PPUSH
11307: LD_STRING D13-Kur-1
11309: PPUSH
11310: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
11314: LD_INT 10
11316: PPUSH
11317: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
11321: LD_EXP 36
11325: PPUSH
11326: LD_STRING D13-Bel-2
11328: PPUSH
11329: CALL_OW 94
// DialogueOff ;
11333: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11337: LD_EXP 36
11341: PPUSH
11342: LD_INT 76
11344: PPUSH
11345: LD_INT 20
11347: PPUSH
11348: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11352: LD_EXP 45
11356: PPUSH
11357: LD_INT 72
11359: PPUSH
11360: LD_INT 20
11362: PPUSH
11363: CALL_OW 111
// wait ( 0 0$2 ) ;
11367: LD_INT 70
11369: PPUSH
11370: CALL_OW 67
// for i in usTrapForces do
11374: LD_ADDR_VAR 0 1
11378: PUSH
11379: LD_EXP 48
11383: PUSH
11384: FOR_IN
11385: IFFALSE 11418
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11387: LD_VAR 0 1
11391: PPUSH
11392: LD_INT 7
11394: PPUSH
11395: LD_INT 0
11397: PPUSH
11398: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11402: LD_VAR 0 1
11406: PPUSH
11407: LD_EXP 36
11411: PPUSH
11412: CALL_OW 119
// end ;
11416: GO 11384
11418: POP
11419: POP
// wait ( 0 0$0.3 ) ;
11420: LD_INT 10
11422: PPUSH
11423: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11427: LD_EXP 48
11431: PPUSH
11432: LD_INT 65
11434: PPUSH
11435: LD_INT 18
11437: PPUSH
11438: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11442: LD_INT 70
11444: PPUSH
11445: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11449: LD_EXP 48
11453: PPUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 3
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PPUSH
11464: CALL_OW 72
11468: PUSH
11469: LD_INT 3
11471: GREATER
11472: IFFALSE 11442
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11474: LD_INT 65
11476: PPUSH
11477: LD_INT 18
11479: PPUSH
11480: LD_INT 3
11482: PPUSH
11483: LD_INT 26
11485: NEG
11486: PPUSH
11487: CALL_OW 330
// DialogueOn ;
11491: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11495: LD_VAR 0 2
11499: PPUSH
11500: LD_STRING D14-Sol1-1
11502: PPUSH
11503: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11507: LD_EXP 36
11511: PPUSH
11512: LD_STRING D14-Bel-1
11514: PPUSH
11515: CALL_OW 88
// DialogueOff ;
11519: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11523: LD_INT 65
11525: PPUSH
11526: LD_INT 18
11528: PPUSH
11529: LD_INT 3
11531: PPUSH
11532: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11536: LD_EXP 45
11540: PPUSH
11541: LD_INT 31
11543: PPUSH
11544: LD_INT 9
11546: PPUSH
11547: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11551: LD_EXP 48
11555: PPUSH
11556: LD_INT 50
11558: PPUSH
11559: LD_INT 16
11561: PPUSH
11562: CALL_OW 174
// wait ( 0 0$2 ) ;
11566: LD_INT 70
11568: PPUSH
11569: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11573: LD_ADDR_VAR 0 6
11577: PUSH
11578: LD_EXP 36
11582: PPUSH
11583: CALL_OW 310
11587: ST_TO_ADDR
// if not belkovTank then
11588: LD_VAR 0 6
11592: NOT
11593: IFFALSE 11633
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11595: LD_ADDR_VAR 0 6
11599: PUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 6
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 21
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: PUSH
11629: LD_INT 1
11631: ARRAY
11632: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11633: LD_EXP 36
11637: PPUSH
11638: LD_INT 58
11640: PPUSH
11641: LD_INT 21
11643: PPUSH
11644: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11648: LD_EXP 36
11652: PPUSH
11653: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11657: LD_EXP 36
11661: PPUSH
11662: LD_INT 53
11664: PPUSH
11665: LD_INT 18
11667: PPUSH
11668: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11672: LD_EXP 36
11676: PPUSH
11677: LD_INT 31
11679: PPUSH
11680: LD_INT 9
11682: PPUSH
11683: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11687: LD_INT 35
11689: PPUSH
11690: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11694: LD_ADDR_VAR 0 1
11698: PUSH
11699: LD_EXP 36
11703: PUSH
11704: LD_EXP 45
11708: UNION
11709: PUSH
11710: LD_VAR 0 6
11714: UNION
11715: PUSH
11716: FOR_IN
11717: IFFALSE 11748
// if GetLives ( i ) < 800 then
11719: LD_VAR 0 1
11723: PPUSH
11724: CALL_OW 256
11728: PUSH
11729: LD_INT 800
11731: LESS
11732: IFFALSE 11746
// SetLives ( i , 800 ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: LD_INT 800
11741: PPUSH
11742: CALL_OW 234
11746: GO 11716
11748: POP
11749: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11750: LD_EXP 36
11754: PPUSH
11755: LD_INT 31
11757: PPUSH
11758: LD_INT 9
11760: PPUSH
11761: CALL_OW 297
11765: PUSH
11766: LD_INT 4
11768: LESS
11769: IFFALSE 11687
// for i := 1 to Difficulty do
11771: LD_ADDR_VAR 0 1
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_OWVAR 67
11785: PUSH
11786: FOR_TO
11787: IFFALSE 11829
// if i <= belkovTeam then
11789: LD_VAR 0 1
11793: PUSH
11794: LD_EXP 45
11798: LESSEQUAL
11799: IFFALSE 11827
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11801: LD_EXP 45
11805: PUSH
11806: LD_VAR 0 1
11810: ARRAY
11811: PPUSH
11812: LD_INT 600
11814: PPUSH
11815: LD_INT 800
11817: PPUSH
11818: CALL_OW 12
11822: PPUSH
11823: CALL_OW 234
11827: GO 11786
11829: POP
11830: POP
// SetLives ( Belkov , 820 ) ;
11831: LD_EXP 36
11835: PPUSH
11836: LD_INT 820
11838: PPUSH
11839: CALL_OW 234
// InGameOff ;
11843: CALL_OW 9
// DialogueOn ;
11847: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11851: LD_EXP 36
11855: PPUSH
11856: LD_STRING D14-Bel-1a
11858: PPUSH
11859: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11863: LD_EXP 38
11867: PPUSH
11868: LD_STRING D14-Kur-1
11870: PPUSH
11871: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11875: LD_EXP 36
11879: PPUSH
11880: LD_STRING D14-Bel-2
11882: PPUSH
11883: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11887: LD_EXP 38
11891: PPUSH
11892: LD_STRING D14-Kur-2
11894: PPUSH
11895: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11899: LD_EXP 34
11903: PPUSH
11904: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11908: LD_EXP 34
11912: PPUSH
11913: LD_STRING D14a-Bur-1
11915: PPUSH
11916: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11920: LD_EXP 40
11924: PPUSH
11925: LD_STRING D14a-Pla-1
11927: PPUSH
11928: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11932: LD_EXP 34
11936: PPUSH
11937: LD_STRING D14a-Bur-2
11939: PPUSH
11940: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11944: LD_EXP 40
11948: PPUSH
11949: LD_STRING D14a-Pla-2
11951: PPUSH
11952: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11956: LD_EXP 34
11960: PPUSH
11961: LD_STRING D14a-Bur-3
11963: PPUSH
11964: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11968: LD_EXP 40
11972: PPUSH
11973: LD_STRING D14a-Pla-3
11975: PPUSH
11976: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11980: LD_EXP 34
11984: PPUSH
11985: LD_STRING D14a-Bur-4
11987: PPUSH
11988: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11992: LD_EXP 40
11996: PPUSH
11997: LD_STRING D14a-Pla-4
11999: PPUSH
12000: CALL_OW 88
// DialogueOff ;
12004: CALL_OW 7
// belkovTrapped := true ;
12008: LD_ADDR_EXP 18
12012: PUSH
12013: LD_INT 1
12015: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
12016: LD_EXP 48
12020: PPUSH
12021: LD_INT 68
12023: PPUSH
12024: LD_INT 16
12026: PPUSH
12027: CALL_OW 111
// if belkovTank then
12031: LD_VAR 0 6
12035: IFFALSE 12074
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
12037: LD_EXP 48
12041: PUSH
12042: LD_INT 1
12044: ARRAY
12045: PPUSH
12046: LD_VAR 0 6
12050: PPUSH
12051: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
12055: LD_EXP 48
12059: PUSH
12060: LD_INT 1
12062: ARRAY
12063: PPUSH
12064: LD_INT 69
12066: PPUSH
12067: LD_INT 20
12069: PPUSH
12070: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
12074: LD_EXP 36
12078: PPUSH
12079: LD_INT 40
12081: PPUSH
12082: LD_INT 17
12084: PPUSH
12085: CALL_OW 111
// AddComHold ( Belkov ) ;
12089: LD_EXP 36
12093: PPUSH
12094: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] , [ 41 , 16 ] ] ;
12098: LD_ADDR_VAR 0 3
12102: PUSH
12103: LD_INT 44
12105: PUSH
12106: LD_INT 18
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: LD_INT 42
12115: PUSH
12116: LD_INT 16
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: PUSH
12123: LD_INT 40
12125: PUSH
12126: LD_INT 15
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 44
12135: PUSH
12136: LD_INT 20
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 42
12145: PUSH
12146: LD_INT 20
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 42
12155: PUSH
12156: LD_INT 12
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PUSH
12163: LD_INT 42
12165: PUSH
12166: LD_INT 8
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 41
12175: PUSH
12176: LD_INT 16
12178: PUSH
12179: EMPTY
12180: LIST
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
12193: LD_ADDR_VAR 0 1
12197: PUSH
12198: LD_EXP 45
12202: PPUSH
12203: LD_INT 25
12205: PUSH
12206: LD_INT 1
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: PPUSH
12213: CALL_OW 72
12217: PUSH
12218: FOR_IN
12219: IFFALSE 12285
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
12221: LD_VAR 0 1
12225: PPUSH
12226: LD_VAR 0 3
12230: PUSH
12231: LD_INT 1
12233: ARRAY
12234: PUSH
12235: LD_INT 1
12237: ARRAY
12238: PPUSH
12239: LD_VAR 0 3
12243: PUSH
12244: LD_INT 1
12246: ARRAY
12247: PUSH
12248: LD_INT 2
12250: ARRAY
12251: PPUSH
12252: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
12256: LD_ADDR_VAR 0 3
12260: PUSH
12261: LD_VAR 0 3
12265: PPUSH
12266: LD_INT 1
12268: PPUSH
12269: CALL_OW 3
12273: ST_TO_ADDR
// AddComCrawl ( i ) ;
12274: LD_VAR 0 1
12278: PPUSH
12279: CALL_OW 197
// end ;
12283: GO 12218
12285: POP
12286: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
12287: LD_EXP 45
12291: PPUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 4
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PPUSH
12302: CALL_OW 72
12306: IFFALSE 12338
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
12308: LD_EXP 45
12312: PPUSH
12313: LD_INT 25
12315: PUSH
12316: LD_INT 4
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 72
12327: PPUSH
12328: LD_INT 38
12330: PPUSH
12331: LD_INT 18
12333: PPUSH
12334: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12338: LD_ADDR_VAR 0 7
12342: PUSH
12343: LD_INT 9450
12345: PUSH
12346: LD_INT 8400
12348: PUSH
12349: LD_INT 6650
12351: PUSH
12352: LD_INT 5250
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_OWVAR 67
12365: ARRAY
12366: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12367: LD_INT 35
12369: PPUSH
12370: CALL_OW 67
// timer := timer - 0 0$1 ;
12374: LD_ADDR_VAR 0 7
12378: PUSH
12379: LD_VAR 0 7
12383: PUSH
12384: LD_INT 35
12386: MINUS
12387: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12388: LD_INT 19
12390: PPUSH
12391: LD_INT 22
12393: PUSH
12394: LD_INT 3
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PPUSH
12401: CALL_OW 70
12405: IFFALSE 12415
// timer := 0 0$0 ;
12407: LD_ADDR_VAR 0 7
12411: PUSH
12412: LD_INT 0
12414: ST_TO_ADDR
// until timer <= 0 ;
12415: LD_VAR 0 7
12419: PUSH
12420: LD_INT 0
12422: LESSEQUAL
12423: IFFALSE 12367
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12425: LD_EXP 48
12429: PPUSH
12430: LD_INT 50
12432: PUSH
12433: EMPTY
12434: LIST
12435: PPUSH
12436: CALL_OW 72
12440: NOT
12441: IFFALSE 12445
// exit ;
12443: GO 12928
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12445: LD_ADDR_VAR 0 4
12449: PUSH
12450: LD_EXP 48
12454: PPUSH
12455: LD_INT 25
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: LD_INT 54
12470: PUSH
12471: EMPTY
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PPUSH
12482: CALL_OW 72
12486: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12487: LD_ADDR_VAR 0 5
12491: PUSH
12492: LD_EXP 48
12496: PPUSH
12497: LD_INT 25
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: LD_INT 54
12512: PUSH
12513: EMPTY
12514: LIST
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PPUSH
12524: CALL_OW 72
12528: ST_TO_ADDR
// for i in sol do
12529: LD_ADDR_VAR 0 1
12533: PUSH
12534: LD_VAR 0 4
12538: PUSH
12539: FOR_IN
12540: IFFALSE 12556
// SetTag ( i , 0 ) ;
12542: LD_VAR 0 1
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 109
12554: GO 12539
12556: POP
12557: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12558: LD_VAR 0 5
12562: PPUSH
12563: LD_INT 60
12565: PPUSH
12566: LD_INT 8
12568: PPUSH
12569: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12573: LD_INT 22
12575: PUSH
12576: LD_INT 1
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 21
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PUSH
12593: EMPTY
12594: LIST
12595: LIST
12596: PPUSH
12597: CALL_OW 69
12601: IFFALSE 12642
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12603: LD_INT 22
12605: PUSH
12606: LD_INT 1
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 21
12615: PUSH
12616: LD_INT 2
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PPUSH
12627: CALL_OW 69
12631: PPUSH
12632: LD_INT 53
12634: PPUSH
12635: LD_INT 24
12637: PPUSH
12638: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12642: LD_INT 18
12644: PPUSH
12645: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12649: LD_ADDR_VAR 0 4
12653: PUSH
12654: LD_EXP 48
12658: PPUSH
12659: LD_INT 25
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 50
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: LD_INT 54
12680: PUSH
12681: EMPTY
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: PPUSH
12693: CALL_OW 72
12697: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12698: LD_VAR 0 4
12702: PPUSH
12703: LD_INT 0
12705: PPUSH
12706: CALL 53366 0 2
12710: PUSH
12711: LD_VAR 0 4
12715: EQUAL
12716: IFFALSE 12755
// begin wait ( 0 0$3 ) ;
12718: LD_INT 105
12720: PPUSH
12721: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12725: LD_VAR 0 4
12729: PPUSH
12730: LD_INT 41
12732: PPUSH
12733: LD_INT 18
12735: PPUSH
12736: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12740: LD_VAR 0 5
12744: PPUSH
12745: LD_INT 60
12747: PPUSH
12748: LD_INT 8
12750: PPUSH
12751: CALL_OW 111
// end ; for i in sol do
12755: LD_ADDR_VAR 0 1
12759: PUSH
12760: LD_VAR 0 4
12764: PUSH
12765: FOR_IN
12766: IFFALSE 12841
// if GetLives ( i ) < 800 then
12768: LD_VAR 0 1
12772: PPUSH
12773: CALL_OW 256
12777: PUSH
12778: LD_INT 800
12780: LESS
12781: IFFALSE 12812
// begin SetTag ( i , 1 ) ;
12783: LD_VAR 0 1
12787: PPUSH
12788: LD_INT 1
12790: PPUSH
12791: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12795: LD_VAR 0 1
12799: PPUSH
12800: LD_INT 60
12802: PPUSH
12803: LD_INT 8
12805: PPUSH
12806: CALL_OW 111
// end else
12810: GO 12839
// if GetLives ( i ) = 1000 then
12812: LD_VAR 0 1
12816: PPUSH
12817: CALL_OW 256
12821: PUSH
12822: LD_INT 1000
12824: EQUAL
12825: IFFALSE 12839
// SetTag ( i , 0 ) ;
12827: LD_VAR 0 1
12831: PPUSH
12832: LD_INT 0
12834: PPUSH
12835: CALL_OW 109
12839: GO 12765
12841: POP
12842: POP
// until belkovDied or not sol ;
12843: LD_EXP 19
12847: IFTRUE 12856
12849: PUSH
12850: LD_VAR 0 4
12854: NOT
12855: OR
12856: IFFALSE 12642
// if not sol then
12858: LD_VAR 0 4
12862: NOT
12863: IFFALSE 12867
// exit ;
12865: GO 12928
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12867: LD_VAR 0 4
12871: PUSH
12872: LD_VAR 0 5
12876: ADD
12877: PPUSH
12878: LD_INT 56
12880: PPUSH
12881: LD_INT 25
12883: PPUSH
12884: CALL_OW 111
// wait ( 0 0$30 ) ;
12888: LD_INT 1050
12890: PPUSH
12891: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12895: LD_EXP 48
12899: PPUSH
12900: LD_INT 66
12902: PPUSH
12903: LD_INT 96
12905: PPUSH
12906: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12910: LD_VAR 0 5
12914: PPUSH
12915: LD_VAR 0 4
12919: PUSH
12920: LD_INT 1
12922: ARRAY
12923: PPUSH
12924: CALL_OW 112
// end ;
12928: PPOPN 7
12930: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12931: LD_EXP 18
12935: IFFALSE 12944
12937: PUSH
12938: LD_EXP 19
12942: NOT
12943: AND
12944: IFFALSE 12965
12946: PUSH
12947: LD_INT 9
12949: PPUSH
12950: LD_INT 22
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 70
12964: AND
12965: IFFALSE 13292
12967: GO 12969
12969: DISABLE
// begin if not initiative then
12970: LD_EXP 31
12974: NOT
12975: IFFALSE 13222
// begin case Query ( QAttackAm ) of 1 :
12977: LD_STRING QAttackAm
12979: PPUSH
12980: CALL_OW 97
12984: PUSH
12985: LD_INT 1
12987: DOUBLE
12988: EQUAL
12989: IFTRUE 12993
12991: GO 13060
12993: POP
// begin initiative := true ;
12994: LD_ADDR_EXP 31
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// DialogueOn ;
13002: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
13006: LD_EXP 34
13010: PPUSH
13011: LD_STRING D17-Bur-1
13013: PPUSH
13014: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13018: LD_EXP 40
13022: PPUSH
13023: LD_STRING D17-Pla-1
13025: PPUSH
13026: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13030: LD_EXP 34
13034: PPUSH
13035: LD_STRING D17-Bur-2
13037: PPUSH
13038: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13042: LD_EXP 40
13046: PPUSH
13047: LD_STRING D17-Pla-2
13049: PPUSH
13050: CALL_OW 94
// DialogueOff ;
13054: CALL_OW 7
// end ; 2 :
13058: GO 13222
13060: LD_INT 2
13062: DOUBLE
13063: EQUAL
13064: IFTRUE 13068
13066: GO 13160
13068: POP
// begin initiative := true ;
13069: LD_ADDR_EXP 31
13073: PUSH
13074: LD_INT 1
13076: ST_TO_ADDR
// DialogueOn ;
13077: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13081: LD_EXP 34
13085: PPUSH
13086: LD_STRING D18-Bur-1
13088: PPUSH
13089: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13093: LD_EXP 40
13097: PPUSH
13098: LD_STRING D18-Pla-1
13100: PPUSH
13101: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13105: LD_EXP 34
13109: PPUSH
13110: LD_STRING D18-Bur-2
13112: PPUSH
13113: CALL_OW 88
// if not reinforcementsGained then
13117: LD_EXP 25
13121: NOT
13122: IFFALSE 13142
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
13124: LD_EXP 40
13128: PPUSH
13129: LD_STRING D18-Pla-2
13131: PPUSH
13132: CALL_OW 94
// SendReinforcements ;
13136: CALL 3644 0 0
// end else
13140: GO 13154
// SayRadio ( Platonov , D22-Pla-1b ) ;
13142: LD_EXP 40
13146: PPUSH
13147: LD_STRING D22-Pla-1b
13149: PPUSH
13150: CALL_OW 94
// DialogueOff ;
13154: CALL_OW 7
// end ; 3 :
13158: GO 13222
13160: LD_INT 3
13162: DOUBLE
13163: EQUAL
13164: IFTRUE 13168
13166: GO 13221
13168: POP
// begin if IsOk ( Gnyevko ) then
13169: LD_EXP 35
13173: PPUSH
13174: CALL_OW 302
13178: IFFALSE 13194
// Say ( Gnyevko , D19A-Gny-1 ) else
13180: LD_EXP 35
13184: PPUSH
13185: LD_STRING D19A-Gny-1
13187: PPUSH
13188: CALL_OW 88
13192: GO 13217
// if IsOk ( Kovalyuk ) then
13194: LD_EXP 39
13198: PPUSH
13199: CALL_OW 302
13203: IFFALSE 13217
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13205: LD_EXP 39
13209: PPUSH
13210: LD_STRING D19A-Kov-1
13212: PPUSH
13213: CALL_OW 88
// exit ;
13217: GO 13292
// end ; end ;
13219: GO 13222
13221: POP
// end ; if IsOk ( Gnyevko ) then
13222: LD_EXP 35
13226: PPUSH
13227: CALL_OW 302
13231: IFFALSE 13257
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13233: LD_EXP 35
13237: PPUSH
13238: LD_STRING D19-Gny-1
13240: PPUSH
13241: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13245: LD_EXP 34
13249: PPUSH
13250: LD_STRING D19-Bur-1
13252: PPUSH
13253: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
13257: LD_EXP 39
13261: PPUSH
13262: CALL_OW 302
13266: IFFALSE 13292
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13268: LD_EXP 39
13272: PPUSH
13273: LD_STRING D19-Kov-1
13275: PPUSH
13276: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13280: LD_EXP 34
13284: PPUSH
13285: LD_STRING D19-Bur-2
13287: PPUSH
13288: CALL_OW 88
// end ; end ;
13292: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
13293: LD_EXP 18
13297: IFFALSE 13306
13299: PUSH
13300: LD_EXP 19
13304: NOT
13305: AND
13306: IFFALSE 13327
13308: PUSH
13309: LD_INT 16
13311: PPUSH
13312: LD_INT 22
13314: PUSH
13315: LD_INT 3
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PPUSH
13322: CALL_OW 70
13326: AND
13327: IFFALSE 13564
13329: GO 13331
13331: DISABLE
// begin if not initiative then
13332: LD_EXP 31
13336: NOT
13337: IFFALSE 13515
// begin case Query ( QAttackBw ) of 1 :
13339: LD_STRING QAttackBw
13341: PPUSH
13342: CALL_OW 97
13346: PUSH
13347: LD_INT 1
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13398
13355: POP
// begin initiative := true ;
13356: LD_ADDR_EXP 31
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// DialogueOn ;
13364: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13368: LD_EXP 34
13372: PPUSH
13373: LD_STRING D21-Bur-1
13375: PPUSH
13376: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13380: LD_EXP 40
13384: PPUSH
13385: LD_STRING D21-Pla-1
13387: PPUSH
13388: CALL_OW 94
// DialogueOff ;
13392: CALL_OW 7
// end ; 2 :
13396: GO 13515
13398: LD_INT 2
13400: DOUBLE
13401: EQUAL
13402: IFTRUE 13406
13404: GO 13503
13406: POP
// begin initiative := true ;
13407: LD_ADDR_EXP 31
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// DialogueOn ;
13415: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13419: LD_EXP 34
13423: PPUSH
13424: LD_STRING D22-Bur-1
13426: PPUSH
13427: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13431: LD_EXP 25
13435: NOT
13436: IFFALSE 13444
13438: PUSH
13439: LD_EXP 22
13443: AND
13444: IFFALSE 13464
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13446: LD_EXP 40
13450: PPUSH
13451: LD_STRING D22-Pla-1
13453: PPUSH
13454: CALL_OW 94
// SendReinforcements ;
13458: CALL 3644 0 0
// end else
13462: GO 13497
// if not westOutpostDestroyed then
13464: LD_EXP 22
13468: NOT
13469: IFFALSE 13485
// SayRadio ( Platonov , D22-Pla-1a ) else
13471: LD_EXP 40
13475: PPUSH
13476: LD_STRING D22-Pla-1a
13478: PPUSH
13479: CALL_OW 94
13483: GO 13497
// SayRadio ( Platonov , D22-Pla-1b ) ;
13485: LD_EXP 40
13489: PPUSH
13490: LD_STRING D22-Pla-1b
13492: PPUSH
13493: CALL_OW 94
// DialogueOff ;
13497: CALL_OW 7
// end ; 3 :
13501: GO 13515
13503: LD_INT 3
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13514
13511: POP
// begin end ; end ;
13512: GO 13515
13514: POP
// end ; ChangeMissionObjectives ( M9 ) ;
13515: LD_STRING M9
13517: PPUSH
13518: CALL_OW 337
// wait ( 0 0$1 ) ;
13522: LD_INT 35
13524: PPUSH
13525: CALL_OW 67
// if IsOk ( Gnyevko ) then
13529: LD_EXP 35
13533: PPUSH
13534: CALL_OW 302
13538: IFFALSE 13564
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13540: LD_EXP 35
13544: PPUSH
13545: LD_STRING D23-Gny-1
13547: PPUSH
13548: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13552: LD_EXP 34
13556: PPUSH
13557: LD_STRING D23-Bur-1
13559: PPUSH
13560: CALL_OW 88
// end ; end ;
13564: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13565: LD_EXP 18
13569: IFFALSE 13577
13571: PUSH
13572: LD_EXP 19
13576: AND
13577: IFFALSE 13586
13579: PUSH
13580: LD_EXP 28
13584: NOT
13585: AND
13586: IFFALSE 13615
13588: PUSH
13589: LD_EXP 45
13593: PPUSH
13594: LD_INT 91
13596: PUSH
13597: LD_EXP 34
13601: PUSH
13602: LD_INT 8
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 72
13614: AND
13615: IFFALSE 13659
13617: GO 13619
13619: DISABLE
13620: LD_INT 0
13622: PPUSH
// begin for i in belkovTeam do
13623: LD_ADDR_VAR 0 1
13627: PUSH
13628: LD_EXP 45
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13650
// SetSide ( i , 3 ) ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_INT 3
13643: PPUSH
13644: CALL_OW 235
13648: GO 13633
13650: POP
13651: POP
// ChangeMissionObjectives ( M9a ) ;
13652: LD_STRING M9a
13654: PPUSH
13655: CALL_OW 337
// end ;
13659: PPOPN 1
13661: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13662: LD_EXP 34
13666: PPUSH
13667: LD_EXP 36
13671: PPUSH
13672: CALL_OW 296
13676: PUSH
13677: LD_INT 6
13679: LESS
13680: IFFALSE 13688
13682: PUSH
13683: LD_EXP 18
13687: AND
13688: IFFALSE 13701
13690: PUSH
13691: LD_EXP 36
13695: PPUSH
13696: CALL_OW 302
13700: AND
13701: IFFALSE 13713
13703: PUSH
13704: LD_INT 3
13706: PPUSH
13707: CALL_OW 463
13711: NOT
13712: AND
13713: IFFALSE 14030
13715: GO 13717
13717: DISABLE
13718: LD_INT 0
13720: PPUSH
13721: PPUSH
// begin InGameOn ;
13722: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13726: LD_EXP 34
13730: PPUSH
13731: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13735: LD_EXP 34
13739: PPUSH
13740: LD_INT 37
13742: PPUSH
13743: LD_INT 17
13745: PPUSH
13746: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13750: LD_EXP 34
13754: PPUSH
13755: LD_EXP 36
13759: PPUSH
13760: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13764: LD_EXP 36
13768: PPUSH
13769: LD_EXP 34
13773: PPUSH
13774: CALL_OW 119
// p := 0 ;
13778: LD_ADDR_VAR 0 2
13782: PUSH
13783: LD_INT 0
13785: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13786: LD_INT 35
13788: PPUSH
13789: CALL_OW 67
// p := p + 1 ;
13793: LD_ADDR_VAR 0 2
13797: PUSH
13798: LD_VAR 0 2
13802: PUSH
13803: LD_INT 1
13805: PLUS
13806: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13807: LD_EXP 34
13811: PPUSH
13812: LD_EXP 36
13816: PPUSH
13817: CALL_OW 296
13821: PUSH
13822: LD_INT 4
13824: LESS
13825: IFTRUE 13837
13827: PUSH
13828: LD_VAR 0 2
13832: PUSH
13833: LD_INT 6
13835: GREATER
13836: OR
13837: IFFALSE 13786
// ComTurnUnit ( Burlak , Belkov ) ;
13839: LD_EXP 34
13843: PPUSH
13844: LD_EXP 36
13848: PPUSH
13849: CALL_OW 119
// DialogueOn ;
13853: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13857: LD_EXP 36
13861: PPUSH
13862: LD_STRING D24-Bel-1
13864: PPUSH
13865: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13869: LD_EXP 34
13873: PPUSH
13874: LD_STRING D24-Bur-1
13876: PPUSH
13877: CALL_OW 88
// if belkovBrother then
13881: LD_EXP 32
13885: IFFALSE 13899
// Say ( Burlak , D24-Bur-1a ) ;
13887: LD_EXP 34
13891: PPUSH
13892: LD_STRING D24-Bur-1a
13894: PPUSH
13895: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13899: LD_EXP 36
13903: PPUSH
13904: LD_STRING D24-Bel-2
13906: PPUSH
13907: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13911: LD_EXP 34
13915: PPUSH
13916: LD_STRING D24-Bur-2
13918: PPUSH
13919: CALL_OW 88
// if vehCaptured then
13923: LD_EXP 16
13927: IFFALSE 13941
// Say ( Burlak , D24-Bur-2a ) ;
13929: LD_EXP 34
13933: PPUSH
13934: LD_STRING D24-Bur-2a
13936: PPUSH
13937: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13941: LD_EXP 40
13945: PPUSH
13946: LD_STRING D24-Pla-2
13948: PPUSH
13949: CALL_OW 94
// if not westOutpostDestroyed then
13953: LD_EXP 22
13957: NOT
13958: IFFALSE 13972
// SayRadio ( Platonov , D24-Pla-2a ) ;
13960: LD_EXP 40
13964: PPUSH
13965: LD_STRING D24-Pla-2a
13967: PPUSH
13968: CALL_OW 94
// DialogueOff ;
13972: CALL_OW 7
// InGameOff ;
13976: CALL_OW 9
// belkovSaved := true ;
13980: LD_ADDR_EXP 28
13984: PUSH
13985: LD_INT 1
13987: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13988: LD_ADDR_VAR 0 1
13992: PUSH
13993: LD_EXP 45
13997: PUSH
13998: LD_EXP 36
14002: UNION
14003: PUSH
14004: FOR_IN
14005: IFFALSE 14021
// SetSide ( i , 3 ) ;
14007: LD_VAR 0 1
14011: PPUSH
14012: LD_INT 3
14014: PPUSH
14015: CALL_OW 235
14019: GO 14004
14021: POP
14022: POP
// ChangeMissionObjectives ( M9a ) ;
14023: LD_STRING M9a
14025: PPUSH
14026: CALL_OW 337
// end ;
14030: PPOPN 2
14032: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
14033: LD_INT 3
14035: PPUSH
14036: LD_INT 22
14038: PUSH
14039: LD_INT 1
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 95
14048: PUSH
14049: LD_INT 8
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 69
14064: PPUSH
14065: CALL 59266 0 2
14069: IFFALSE 14254
14071: GO 14073
14073: DISABLE
// begin DialogueOn ;
14074: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
14078: LD_INT 49
14080: PPUSH
14081: LD_INT 57
14083: PPUSH
14084: LD_INT 3
14086: PPUSH
14087: LD_INT 12
14089: NEG
14090: PPUSH
14091: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
14095: LD_INT 49
14097: PPUSH
14098: LD_INT 57
14100: PPUSH
14101: LD_INT 3
14103: PPUSH
14104: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
14108: LD_INT 49
14110: PPUSH
14111: LD_INT 57
14113: PPUSH
14114: CALL_OW 84
// if not eastOutpostDiscovered then
14118: LD_EXP 21
14122: NOT
14123: IFFALSE 14163
// begin Say ( Burlak , D15-Bur-1 ) ;
14125: LD_EXP 34
14129: PPUSH
14130: LD_STRING D15-Bur-1
14132: PPUSH
14133: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14137: LD_EXP 35
14141: PPUSH
14142: LD_STRING D15-Gny-1
14144: PPUSH
14145: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14149: LD_EXP 39
14153: PPUSH
14154: LD_STRING D15-Kov-1
14156: PPUSH
14157: CALL_OW 88
// end else
14161: GO 14199
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14163: LD_EXP 39
14167: PPUSH
14168: LD_STRING D16-Kov-1
14170: PPUSH
14171: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14175: LD_EXP 34
14179: PPUSH
14180: LD_STRING D16-Bur-1
14182: PPUSH
14183: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14187: LD_EXP 35
14191: PPUSH
14192: LD_STRING D16-Gny-1
14194: PPUSH
14195: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
14199: LD_EXP 34
14203: PPUSH
14204: LD_STRING D15-Bur-2
14206: PPUSH
14207: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
14211: LD_EXP 39
14215: PPUSH
14216: LD_STRING D15-Kov-2
14218: PPUSH
14219: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
14223: LD_EXP 34
14227: PPUSH
14228: LD_STRING D15-Bur-3
14230: PPUSH
14231: CALL_OW 88
// DialogueOff ;
14235: CALL_OW 7
// westOutpostDiscovered := true ;
14239: LD_ADDR_EXP 20
14243: PUSH
14244: LD_INT 1
14246: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
14247: LD_STRING M7
14249: PPUSH
14250: CALL_OW 337
// end ;
14254: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 22
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 95
14270: PUSH
14271: LD_INT 15
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PPUSH
14287: CALL 59266 0 2
14291: IFFALSE 14432
14293: GO 14295
14295: DISABLE
// begin DialogueOn ;
14296: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
14300: LD_INT 95
14302: PPUSH
14303: LD_INT 65
14305: PPUSH
14306: LD_INT 3
14308: PPUSH
14309: LD_INT 12
14311: NEG
14312: PPUSH
14313: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
14317: LD_INT 95
14319: PPUSH
14320: LD_INT 65
14322: PPUSH
14323: LD_INT 3
14325: PPUSH
14326: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
14330: LD_INT 95
14332: PPUSH
14333: LD_INT 65
14335: PPUSH
14336: CALL_OW 84
// if westOutpostDiscovered then
14340: LD_EXP 20
14344: IFFALSE 14384
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14346: LD_EXP 39
14350: PPUSH
14351: LD_STRING D16-Kov-1
14353: PPUSH
14354: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14358: LD_EXP 34
14362: PPUSH
14363: LD_STRING D16-Bur-1
14365: PPUSH
14366: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14370: LD_EXP 35
14374: PPUSH
14375: LD_STRING D16-Gny-1
14377: PPUSH
14378: CALL_OW 88
// end else
14382: GO 14420
// begin Say ( Burlak , D15-Bur-1 ) ;
14384: LD_EXP 34
14388: PPUSH
14389: LD_STRING D15-Bur-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14396: LD_EXP 35
14400: PPUSH
14401: LD_STRING D15-Gny-1
14403: PPUSH
14404: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14408: LD_EXP 39
14412: PPUSH
14413: LD_STRING D15-Kov-1
14415: PPUSH
14416: CALL_OW 88
// end ; DialogueOff ;
14420: CALL_OW 7
// eastOutpostDiscovered := true ;
14424: LD_ADDR_EXP 21
14428: PUSH
14429: LD_INT 1
14431: ST_TO_ADDR
// end ;
14432: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14433: LD_INT 8
14435: PPUSH
14436: LD_INT 22
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 50
14448: PUSH
14449: EMPTY
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PPUSH
14456: CALL_OW 70
14460: PUSH
14461: LD_INT 0
14463: EQUAL
14464: IFFALSE 14472
14466: PUSH
14467: LD_EXP 20
14471: AND
14472: IFFALSE 14516
14474: GO 14476
14476: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14477: LD_EXP 34
14481: PPUSH
14482: LD_STRING D20-Bur-1
14484: PPUSH
14485: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14489: LD_EXP 40
14493: PPUSH
14494: LD_STRING D20-Pla-1
14496: PPUSH
14497: CALL_OW 94
// westOutpostDestroyed := true ;
14501: LD_ADDR_EXP 22
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14509: LD_STRING M8
14511: PPUSH
14512: CALL_OW 337
// end ;
14516: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14517: LD_INT 15
14519: PPUSH
14520: LD_INT 22
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: LD_INT 50
14532: PUSH
14533: EMPTY
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: PPUSH
14540: CALL_OW 70
14544: PUSH
14545: LD_INT 0
14547: EQUAL
14548: IFFALSE 14556
14550: PUSH
14551: LD_EXP 21
14555: AND
14556: IFFALSE 14686
14558: GO 14560
14560: DISABLE
14561: LD_INT 0
14563: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14564: LD_EXP 34
14568: PPUSH
14569: LD_STRING D20-Bur-1
14571: PPUSH
14572: CALL_OW 88
// SayRadio ( Platonov , D20a-Pla-1 ) ;
14576: LD_EXP 40
14580: PPUSH
14581: LD_STRING D20a-Pla-1
14583: PPUSH
14584: CALL_OW 94
// eastOutpostDestroyed := true ;
14588: LD_ADDR_EXP 23
14592: PUSH
14593: LD_INT 1
14595: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14596: LD_INT 35
14598: PPUSH
14599: CALL_OW 67
// stop_talking := true ;
14603: LD_ADDR_OWVAR 56
14607: PUSH
14608: LD_INT 1
14610: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14611: LD_ADDR_VAR 0 1
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_INT 3
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 23
14628: PUSH
14629: LD_INT 3
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 21
14638: PUSH
14639: LD_INT 1
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: LIST
14650: PPUSH
14651: CALL_OW 69
14655: PUSH
14656: FOR_IN
14657: IFFALSE 14676
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14659: LD_VAR 0 1
14663: PPUSH
14664: LD_INT 1
14666: PPUSH
14667: LD_INT 1500
14669: PPUSH
14670: CALL_OW 591
14674: GO 14656
14676: POP
14677: POP
// stop_talking := false ;
14678: LD_ADDR_OWVAR 56
14682: PUSH
14683: LD_INT 0
14685: ST_TO_ADDR
// end ;
14686: PPOPN 1
14688: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14689: LD_INT 19
14691: PPUSH
14692: LD_INT 22
14694: PUSH
14695: LD_INT 3
14697: PUSH
14698: EMPTY
14699: LIST
14700: LIST
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 2
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PPUSH
14716: CALL_OW 70
14720: IFFALSE 14828
14722: GO 14724
14724: DISABLE
// begin DialogueOn ;
14725: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14729: LD_INT 19
14731: PPUSH
14732: LD_INT 22
14734: PUSH
14735: LD_INT 3
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: PUSH
14742: LD_INT 21
14744: PUSH
14745: LD_INT 2
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PPUSH
14756: CALL_OW 70
14760: PPUSH
14761: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14765: LD_EXP 34
14769: PPUSH
14770: LD_STRING D26-Bur-1
14772: PPUSH
14773: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14777: LD_EXP 39
14781: PPUSH
14782: LD_STRING D26-Kov-1
14784: PPUSH
14785: CALL_OW 88
// if IsOk ( Gnyevko ) then
14789: LD_EXP 35
14793: PPUSH
14794: CALL_OW 302
14798: IFFALSE 14824
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14800: LD_EXP 35
14804: PPUSH
14805: LD_STRING D26-Gny-1
14807: PPUSH
14808: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14812: LD_EXP 34
14816: PPUSH
14817: LD_STRING D26-Bur-2
14819: PPUSH
14820: CALL_OW 88
// end ; DialogueOff ;
14824: CALL_OW 7
// end ;
14828: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14829: LD_EXP 21
14833: IFFALSE 14842
14835: PUSH
14836: LD_EXP 23
14840: NOT
14841: AND
14842: IFFALSE 14888
14844: PUSH
14845: LD_INT 17
14847: PPUSH
14848: LD_INT 22
14850: PUSH
14851: LD_INT 3
14853: PUSH
14854: EMPTY
14855: LIST
14856: LIST
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: LD_INT 24
14863: PUSH
14864: LD_INT 1000
14866: PUSH
14867: EMPTY
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PPUSH
14879: CALL_OW 70
14883: PUSH
14884: LD_INT 1
14886: GREATER
14887: AND
14888: IFFALSE 14953
14890: GO 14892
14892: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14893: LD_EXP 35
14897: PPUSH
14898: LD_STRING D16A-Gny-1
14900: PPUSH
14901: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14905: LD_EXP 39
14909: PPUSH
14910: LD_STRING D16A-Kov-1
14912: PPUSH
14913: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14917: LD_EXP 35
14921: PPUSH
14922: CALL_OW 302
14926: IFTRUE 14939
14928: PUSH
14929: LD_EXP 39
14933: PPUSH
14934: CALL_OW 302
14938: OR
14939: IFFALSE 14953
// Say ( Burlak , D16A-Bur-1 ) ;
14941: LD_EXP 34
14945: PPUSH
14946: LD_STRING D16A-Bur-1
14948: PPUSH
14949: CALL_OW 88
// end ;
14953: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14954: LD_INT 3
14956: PPUSH
14957: LD_INT 9
14959: PPUSH
14960: CALL_OW 294
14964: IFFALSE 14977
14966: GO 14968
14968: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14969: LD_ADDR_EXP 24
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// end ;
14977: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14978: LD_INT 3
14980: PPUSH
14981: LD_INT 10
14983: PPUSH
14984: CALL_OW 294
14988: IFFALSE 15008
14990: GO 14992
14992: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14993: LD_ADDR_EXP 27
14997: PUSH
14998: LD_EXP 27
15002: PPUSH
15003: CALL 57194 0 1
15007: ST_TO_ADDR
15008: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
15009: LD_INT 3
15011: PPUSH
15012: LD_INT 11
15014: PPUSH
15015: CALL_OW 294
15019: IFFALSE 15039
15021: GO 15023
15023: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15024: LD_ADDR_EXP 27
15028: PUSH
15029: LD_EXP 27
15033: PPUSH
15034: CALL 57194 0 1
15038: ST_TO_ADDR
15039: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
15040: LD_INT 3
15042: PPUSH
15043: LD_INT 12
15045: PPUSH
15046: CALL_OW 294
15050: IFFALSE 15070
15052: GO 15054
15054: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15055: LD_ADDR_EXP 27
15059: PUSH
15060: LD_EXP 27
15064: PPUSH
15065: CALL 57194 0 1
15069: ST_TO_ADDR
15070: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
15071: LD_INT 3
15073: PPUSH
15074: LD_INT 13
15076: PPUSH
15077: CALL_OW 294
15081: IFFALSE 15101
15083: GO 15085
15085: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15086: LD_ADDR_EXP 27
15090: PUSH
15091: LD_EXP 27
15095: PPUSH
15096: CALL 57194 0 1
15100: ST_TO_ADDR
15101: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
15102: LD_INT 3
15104: PPUSH
15105: LD_INT 14
15107: PPUSH
15108: CALL_OW 294
15112: IFFALSE 15132
15114: GO 15116
15116: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15117: LD_ADDR_EXP 27
15121: PUSH
15122: LD_EXP 27
15126: PPUSH
15127: CALL 57194 0 1
15131: ST_TO_ADDR
15132: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
15133: LD_EXP 27
15137: PUSH
15138: LD_INT 5
15140: GREATEREQUAL
15141: IFFALSE 15149
15143: PUSH
15144: LD_EXP 14
15148: AND
15149: IFFALSE 15169
15151: GO 15153
15153: DISABLE
// begin allMapPointsSpotted := true ;
15154: LD_ADDR_EXP 26
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15162: LD_STRING M10
15164: PPUSH
15165: CALL_OW 337
// end ;
15169: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
15170: LD_EXP 26
15174: IFFALSE 15182
15176: PUSH
15177: LD_EXP 22
15181: AND
15182: IFFALSE 15194
15184: GO 15186
15186: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
15187: LD_STRING M10a
15189: PPUSH
15190: CALL_OW 337
// end ;
15194: END
// every 0 0$1 trigger hasAllTanks do var timer , tmp , burlakIsInsideBuilding , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
15195: LD_EXP 14
15199: IFFALSE 15924
15201: GO 15203
15203: DISABLE
15204: LD_INT 0
15206: PPUSH
15207: PPUSH
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
// begin wasOutsideBeria := false ;
15213: LD_ADDR_VAR 0 5
15217: PUSH
15218: LD_INT 0
15220: ST_TO_ADDR
// wantToTalk := false ;
15221: LD_ADDR_VAR 0 4
15225: PUSH
15226: LD_INT 0
15228: ST_TO_ADDR
// westOutpostReported := false ;
15229: LD_ADDR_VAR 0 6
15233: PUSH
15234: LD_INT 0
15236: ST_TO_ADDR
// eastOutpostReported := false ;
15237: LD_ADDR_VAR 0 7
15241: PUSH
15242: LD_INT 0
15244: ST_TO_ADDR
// timer := 0 0$0 ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 0
15252: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
15253: LD_INT 70
15255: PPUSH
15256: CALL_OW 67
// burlakIsInsideBuilding := false ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: LD_INT 0
15267: ST_TO_ADDR
// tmp := IsInUnit ( Burlak ) ;
15268: LD_ADDR_VAR 0 2
15272: PUSH
15273: LD_EXP 34
15277: PPUSH
15278: CALL_OW 310
15282: ST_TO_ADDR
// if tmp then
15283: LD_VAR 0 2
15287: IFFALSE 15308
// burlakIsInsideBuilding := GetType ( tmp ) = unit_building ;
15289: LD_ADDR_VAR 0 3
15293: PUSH
15294: LD_VAR 0 2
15298: PPUSH
15299: CALL_OW 247
15303: PUSH
15304: LD_INT 3
15306: EQUAL
15307: ST_TO_ADDR
// if not burlakIsInsideBuilding then
15308: LD_VAR 0 3
15312: NOT
15313: IFFALSE 15329
// timer := timer + 0 0$2 ;
15315: LD_ADDR_VAR 0 1
15319: PUSH
15320: LD_VAR 0 1
15324: PUSH
15325: LD_INT 70
15327: PLUS
15328: ST_TO_ADDR
// if timer >= 0 0$30 then
15329: LD_VAR 0 1
15333: PUSH
15334: LD_INT 1050
15336: GREATEREQUAL
15337: IFFALSE 15347
// wantToTalk := true ;
15339: LD_ADDR_VAR 0 4
15343: PUSH
15344: LD_INT 1
15346: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 and not burlakIsInsideBuilding then
15347: LD_EXP 34
15351: PPUSH
15352: LD_EXP 40
15356: PPUSH
15357: CALL_OW 296
15361: PUSH
15362: LD_INT 9
15364: GREATER
15365: IFFALSE 15374
15367: PUSH
15368: LD_VAR 0 3
15372: NOT
15373: AND
15374: IFFALSE 15384
// wasOutsideBeria := true ;
15376: LD_ADDR_VAR 0 5
15380: PUSH
15381: LD_INT 1
15383: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
15384: LD_VAR 0 4
15388: IFFALSE 15396
15390: PUSH
15391: LD_VAR 0 5
15395: AND
15396: IFFALSE 15445
15398: PUSH
15399: LD_EXP 34
15403: PPUSH
15404: LD_EXP 40
15408: PPUSH
15409: CALL_OW 296
15413: PUSH
15414: LD_INT 8
15416: LESS
15417: IFTRUE 15444
15419: PUSH
15420: LD_EXP 34
15424: PPUSH
15425: CALL_OW 310
15429: PPUSH
15430: LD_EXP 40
15434: PPUSH
15435: CALL_OW 296
15439: PUSH
15440: LD_INT 8
15442: LESS
15443: OR
15444: AND
15445: IFFALSE 15809
// begin timer := 0 0$0 ;
15447: LD_ADDR_VAR 0 1
15451: PUSH
15452: LD_INT 0
15454: ST_TO_ADDR
// wantToTalk := false ;
15455: LD_ADDR_VAR 0 4
15459: PUSH
15460: LD_INT 0
15462: ST_TO_ADDR
// wasOutsideBeria := false ;
15463: LD_ADDR_VAR 0 5
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15471: LD_EXP 40
15475: PPUSH
15476: CALL_OW 87
// DialogueOn ;
15480: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15484: LD_EXP 40
15488: PPUSH
15489: LD_STRING D25-Pla-1
15491: PPUSH
15492: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15496: LD_VAR 0 6
15500: NOT
15501: IFFALSE 15510
15503: PUSH
15504: LD_VAR 0 7
15508: NOT
15509: AND
15510: IFFALSE 15518
15512: PUSH
15513: LD_EXP 20
15517: AND
15518: IFFALSE 15526
15520: PUSH
15521: LD_EXP 21
15525: AND
15526: IFFALSE 15608
// begin westOutpostReported := true ;
15528: LD_ADDR_VAR 0 6
15532: PUSH
15533: LD_INT 1
15535: ST_TO_ADDR
// eastOutpostReported := true ;
15536: LD_ADDR_VAR 0 7
15540: PUSH
15541: LD_INT 1
15543: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15544: LD_EXP 34
15548: PPUSH
15549: LD_STRING D25-Bur-1
15551: PPUSH
15552: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15556: LD_EXP 24
15560: IFFALSE 15569
15562: PUSH
15563: LD_EXP 22
15567: NOT
15568: AND
15569: IFFALSE 15606
// begin Say ( Burlak , D25b-Bur-1 ) ;
15571: LD_EXP 34
15575: PPUSH
15576: LD_STRING D25b-Bur-1
15578: PPUSH
15579: CALL_OW 88
// if not reinforcementsGained then
15583: LD_EXP 25
15587: NOT
15588: IFFALSE 15606
// begin Say ( Platonov , D25b-Pla-1 ) ;
15590: LD_EXP 40
15594: PPUSH
15595: LD_STRING D25b-Pla-1
15597: PPUSH
15598: CALL_OW 88
// SendReinforcements ( ) ;
15602: CALL 3644 0 0
// end ; end ; end else
15606: GO 15805
// if not westOutpostReported and westOutpostDiscovered then
15608: LD_VAR 0 6
15612: NOT
15613: IFFALSE 15621
15615: PUSH
15616: LD_EXP 20
15620: AND
15621: IFFALSE 15695
// begin westOutpostReported := true ;
15623: LD_ADDR_VAR 0 6
15627: PUSH
15628: LD_INT 1
15630: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15631: LD_EXP 34
15635: PPUSH
15636: LD_STRING D25a-Bur-1b
15638: PPUSH
15639: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15643: LD_EXP 24
15647: IFFALSE 15656
15649: PUSH
15650: LD_EXP 22
15654: NOT
15655: AND
15656: IFFALSE 15693
// begin Say ( Burlak , D25b-Bur-1 ) ;
15658: LD_EXP 34
15662: PPUSH
15663: LD_STRING D25b-Bur-1
15665: PPUSH
15666: CALL_OW 88
// if not reinforcementsGained then
15670: LD_EXP 25
15674: NOT
15675: IFFALSE 15693
// begin Say ( Platonov , D25b-Pla-1 ) ;
15677: LD_EXP 40
15681: PPUSH
15682: LD_STRING D25b-Pla-1
15684: PPUSH
15685: CALL_OW 88
// SendReinforcements ( ) ;
15689: CALL 3644 0 0
// end ; end ; end else
15693: GO 15805
// if not eastOutpostReported and eastOutpostDiscovered then
15695: LD_VAR 0 7
15699: NOT
15700: IFFALSE 15708
15702: PUSH
15703: LD_EXP 21
15707: AND
15708: IFFALSE 15732
// begin eastOutpostReported := true ;
15710: LD_ADDR_VAR 0 7
15714: PUSH
15715: LD_INT 1
15717: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15718: LD_EXP 34
15722: PPUSH
15723: LD_STRING D25a-Bur-1a
15725: PPUSH
15726: CALL_OW 88
// end else
15730: GO 15805
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15732: LD_EXP 20
15736: NOT
15737: IFTRUE 15746
15739: PUSH
15740: LD_EXP 21
15744: NOT
15745: OR
15746: IFFALSE 15774
// begin Say ( Burlak , D25a-Bur-1 ) ;
15748: LD_EXP 34
15752: PPUSH
15753: LD_STRING D25a-Bur-1
15755: PPUSH
15756: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15760: LD_EXP 40
15764: PPUSH
15765: LD_STRING D25c-Pla-1
15767: PPUSH
15768: CALL_OW 88
// end else
15772: GO 15805
// if not allMapPointsSpotted then
15774: LD_EXP 26
15778: NOT
15779: IFFALSE 15805
// begin Say ( Burlak , D25a-Bur-1 ) ;
15781: LD_EXP 34
15785: PPUSH
15786: LD_STRING D25a-Bur-1
15788: PPUSH
15789: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15793: LD_EXP 40
15797: PPUSH
15798: LD_STRING D25c-Pla-1a
15800: PPUSH
15801: CALL_OW 88
// end ; DialogueOff ;
15805: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15809: LD_EXP 26
15813: IFFALSE 15821
15815: PUSH
15816: LD_EXP 22
15820: AND
15821: IFFALSE 15253
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15823: LD_INT 22
15825: PUSH
15826: LD_INT 3
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: PUSH
15833: LD_INT 21
15835: PUSH
15836: LD_INT 1
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: PUSH
15843: LD_INT 91
15845: PUSH
15846: LD_EXP 40
15850: PUSH
15851: LD_INT 10
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: IFFALSE 15913
// begin if not belkovDied and not belkovSaved then
15870: LD_EXP 19
15874: NOT
15875: IFFALSE 15884
15877: PUSH
15878: LD_EXP 28
15882: NOT
15883: AND
15884: IFFALSE 15907
// begin if Query ( QContMission ) = 1 then
15886: LD_STRING QContMission
15888: PPUSH
15889: CALL_OW 97
15893: PUSH
15894: LD_INT 1
15896: EQUAL
15897: IFFALSE 15905
// begin EndMission ;
15899: CALL 16009 0 0
// exit ;
15903: GO 15924
// end ; end else
15905: GO 15913
// begin EndMission ;
15907: CALL 16009 0 0
// exit ;
15911: GO 15924
// end ; end ; wait ( 0 0$10 ) ;
15913: LD_INT 350
15915: PPUSH
15916: CALL_OW 67
// until false ;
15920: LD_INT 0
15922: IFFALSE 15823
// end ;
15924: PPOPN 7
15926: END
// every 0 0$2 trigger not hasAllTanks do
15927: LD_EXP 14
15931: NOT
15932: IFFALSE 16008
15934: GO 15936
15936: DISABLE
// begin if IsOk ( Gnyevko ) then
15937: LD_EXP 35
15941: PPUSH
15942: CALL_OW 302
15946: IFFALSE 15972
// if SideShoot ( Gnyevko ) = 3 then
15948: LD_EXP 35
15952: PPUSH
15953: CALL_OW 503
15957: PUSH
15958: LD_INT 3
15960: EQUAL
15961: IFFALSE 15972
// begin YouLost ( SelfAttack ) ;
15963: LD_STRING SelfAttack
15965: PPUSH
15966: CALL_OW 104
// exit ;
15970: GO 16008
// end ; if IsOk ( Kovalyuk ) then
15972: LD_EXP 39
15976: PPUSH
15977: CALL_OW 302
15981: IFFALSE 16007
// if SideShoot ( Kovalyuk ) = 3 then
15983: LD_EXP 39
15987: PPUSH
15988: CALL_OW 503
15992: PUSH
15993: LD_INT 3
15995: EQUAL
15996: IFFALSE 16007
// begin YouLost ( SelfAttack ) ;
15998: LD_STRING SelfAttack
16000: PPUSH
16001: CALL_OW 104
// exit ;
16005: GO 16008
// end ; enable ;
16007: ENABLE
// end ;
16008: END
// function EndMission ; var i , tmp ; begin
16009: LD_INT 0
16011: PPUSH
16012: PPUSH
16013: PPUSH
// if initiative then
16014: LD_EXP 31
16018: IFFALSE 16032
// AddMedal ( Initiative , 1 ) else
16020: LD_STRING Initiative
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: CALL_OW 101
16030: GO 16073
// begin SaveVariable ( 1 , 02_Selfish ) ;
16032: LD_INT 1
16034: PPUSH
16035: LD_STRING 02_Selfish
16037: PPUSH
16038: CALL_OW 39
// if not eastOutpostDestroyed then
16042: LD_EXP 23
16046: NOT
16047: IFFALSE 16062
// AddMedal ( Initiative , - 2 ) else
16049: LD_STRING Initiative
16051: PPUSH
16052: LD_INT 2
16054: NEG
16055: PPUSH
16056: CALL_OW 101
16060: GO 16073
// AddMedal ( Initiative , - 1 ) ;
16062: LD_STRING Initiative
16064: PPUSH
16065: LD_INT 1
16067: NEG
16068: PPUSH
16069: CALL_OW 101
// end ; SaveVariable ( belkovSaved , 02_belkovSaved ) ;
16073: LD_EXP 28
16077: PPUSH
16078: LD_STRING 02_belkovSaved
16080: PPUSH
16081: CALL_OW 39
// if not belkovDied and belkovSaved then
16085: LD_EXP 19
16089: NOT
16090: IFFALSE 16098
16092: PUSH
16093: LD_EXP 28
16097: AND
16098: IFFALSE 16112
// AddMedal ( Belkov , 1 ) else
16100: LD_STRING Belkov
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 101
16110: GO 16209
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
16112: LD_EXP 45
16116: PPUSH
16117: LD_INT 22
16119: PUSH
16120: LD_INT 3
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PPUSH
16127: CALL_OW 72
16131: IFFALSE 16145
// AddMedal ( Belkov , 2 ) else
16133: LD_STRING Belkov
16135: PPUSH
16136: LD_INT 2
16138: PPUSH
16139: CALL_OW 101
16143: GO 16209
// if belkovDied then
16145: LD_EXP 19
16149: IFFALSE 16164
// AddMedal ( Belkov , - 1 ) else
16151: LD_STRING Belkov
16153: PPUSH
16154: LD_INT 1
16156: NEG
16157: PPUSH
16158: CALL_OW 101
16162: GO 16209
// if not belkovSaved then
16164: LD_EXP 28
16168: NOT
16169: IFFALSE 16184
// AddMedal ( Belkov , - 2 ) else
16171: LD_STRING Belkov
16173: PPUSH
16174: LD_INT 2
16176: NEG
16177: PPUSH
16178: CALL_OW 101
16182: GO 16209
// if belkovDied and belkovSaved then
16184: LD_EXP 19
16188: IFFALSE 16196
16190: PUSH
16191: LD_EXP 28
16195: AND
16196: IFFALSE 16209
// AddMedal ( Belkov , - 3 ) ;
16198: LD_STRING Belkov
16200: PPUSH
16201: LD_INT 3
16203: NEG
16204: PPUSH
16205: CALL_OW 101
// if playerTeamDeadCounter = 0 then
16209: LD_EXP 30
16213: PUSH
16214: LD_INT 0
16216: EQUAL
16217: IFFALSE 16231
// AddMedal ( NoLosses , 1 ) else
16219: LD_STRING NoLosses
16221: PPUSH
16222: LD_INT 1
16224: PPUSH
16225: CALL_OW 101
16229: GO 16242
// AddMedal ( NoLosses , - 1 ) ;
16231: LD_STRING NoLosses
16233: PPUSH
16234: LD_INT 1
16236: NEG
16237: PPUSH
16238: CALL_OW 101
// GiveMedals ( Main ) ;
16242: LD_STRING Main
16244: PPUSH
16245: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
16249: LD_INT 22
16251: PUSH
16252: LD_INT 3
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: LD_INT 23
16261: PUSH
16262: LD_INT 3
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 21
16271: PUSH
16272: LD_INT 1
16274: PUSH
16275: EMPTY
16276: LIST
16277: LIST
16278: PUSH
16279: EMPTY
16280: LIST
16281: LIST
16282: LIST
16283: PPUSH
16284: CALL_OW 69
16288: PPUSH
16289: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
16293: LD_EXP 34
16297: PPUSH
16298: LD_EXP 3
16302: PUSH
16303: LD_STRING Burlak
16305: STR
16306: PPUSH
16307: CALL_OW 38
// if IsLive ( Gnyevko ) then
16311: LD_EXP 35
16315: PPUSH
16316: CALL_OW 300
16320: IFFALSE 16340
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
16322: LD_EXP 35
16326: PPUSH
16327: LD_EXP 3
16331: PUSH
16332: LD_STRING Gnyevko
16334: STR
16335: PPUSH
16336: CALL_OW 38
// if IsLive ( Kovalyuk ) then
16340: LD_EXP 39
16344: PPUSH
16345: CALL_OW 300
16349: IFFALSE 16369
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
16351: LD_EXP 39
16355: PPUSH
16356: LD_EXP 3
16360: PUSH
16361: LD_STRING Kovalyuk
16363: STR
16364: PPUSH
16365: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
16369: LD_EXP 36
16373: PPUSH
16374: CALL_OW 300
16378: IFFALSE 16386
16380: PUSH
16381: LD_EXP 28
16385: AND
16386: IFFALSE 16406
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
16388: LD_EXP 36
16392: PPUSH
16393: LD_EXP 3
16397: PUSH
16398: LD_STRING Belkov
16400: STR
16401: PPUSH
16402: CALL_OW 38
// if IsLive ( Kirilenkova ) then
16406: LD_EXP 37
16410: PPUSH
16411: CALL_OW 300
16415: IFFALSE 16435
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
16417: LD_EXP 37
16421: PPUSH
16422: LD_EXP 3
16426: PUSH
16427: LD_STRING Kirilenkova
16429: STR
16430: PPUSH
16431: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
16435: LD_INT 22
16437: PUSH
16438: LD_INT 3
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 23
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 21
16457: PUSH
16458: LD_INT 1
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: PUSH
16475: LD_EXP 34
16479: PUSH
16480: LD_EXP 35
16484: PUSH
16485: LD_EXP 39
16489: PUSH
16490: LD_EXP 36
16494: PUSH
16495: LD_EXP 37
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: DIFF
16507: PPUSH
16508: LD_EXP 3
16512: PUSH
16513: LD_STRING burlakTeam
16515: STR
16516: PPUSH
16517: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
16521: LD_INT 22
16523: PUSH
16524: LD_INT 6
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 23
16533: PUSH
16534: LD_INT 3
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PUSH
16541: LD_INT 21
16543: PUSH
16544: LD_INT 1
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: PUSH
16561: LD_EXP 40
16565: PUSH
16566: LD_EXP 38
16570: PUSH
16571: LD_EXP 36
16575: PUSH
16576: EMPTY
16577: LIST
16578: LIST
16579: LIST
16580: PUSH
16581: LD_EXP 45
16585: UNION
16586: DIFF
16587: PPUSH
16588: LD_EXP 3
16592: PUSH
16593: LD_STRING kirovTeam
16595: STR
16596: PPUSH
16597: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16601: LD_EXP 23
16605: PPUSH
16606: LD_STRING 02_EasternOutpostDestroyed
16608: PPUSH
16609: CALL_OW 39
// tmp := [ ] ;
16613: LD_ADDR_VAR 0 3
16617: PUSH
16618: EMPTY
16619: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16620: LD_ADDR_VAR 0 2
16624: PUSH
16625: LD_INT 22
16627: PUSH
16628: LD_INT 3
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PUSH
16635: LD_INT 21
16637: PUSH
16638: LD_INT 3
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PPUSH
16649: CALL_OW 69
16653: PUSH
16654: FOR_IN
16655: IFFALSE 16742
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16657: LD_ADDR_VAR 0 3
16661: PUSH
16662: LD_VAR 0 3
16666: PPUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: CALL_OW 266
16676: PUSH
16677: LD_VAR 0 2
16681: PPUSH
16682: CALL_OW 248
16686: PUSH
16687: LD_VAR 0 2
16691: PPUSH
16692: CALL_OW 267
16696: PUSH
16697: LD_VAR 0 2
16701: PPUSH
16702: CALL_OW 250
16706: PUSH
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 251
16716: PUSH
16717: LD_VAR 0 2
16721: PPUSH
16722: CALL_OW 254
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: PPUSH
16735: CALL 55821 0 2
16739: ST_TO_ADDR
16740: GO 16654
16742: POP
16743: POP
// SaveVariable ( tmp , 02_Beria ) ;
16744: LD_VAR 0 3
16748: PPUSH
16749: LD_STRING 02_Beria
16751: PPUSH
16752: CALL_OW 39
// tmp := [ ] ;
16756: LD_ADDR_VAR 0 3
16760: PUSH
16761: EMPTY
16762: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16763: LD_ADDR_VAR 0 2
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 6
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 21
16780: PUSH
16781: LD_INT 3
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: PPUSH
16792: CALL_OW 69
16796: PUSH
16797: FOR_IN
16798: IFFALSE 16885
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16800: LD_ADDR_VAR 0 3
16804: PUSH
16805: LD_VAR 0 3
16809: PPUSH
16810: LD_VAR 0 2
16814: PPUSH
16815: CALL_OW 266
16819: PUSH
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL_OW 248
16829: PUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 267
16839: PUSH
16840: LD_VAR 0 2
16844: PPUSH
16845: CALL_OW 250
16849: PUSH
16850: LD_VAR 0 2
16854: PPUSH
16855: CALL_OW 251
16859: PUSH
16860: LD_VAR 0 2
16864: PPUSH
16865: CALL_OW 254
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: PPUSH
16878: CALL 55821 0 2
16882: ST_TO_ADDR
16883: GO 16797
16885: POP
16886: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16887: LD_VAR 0 3
16891: PPUSH
16892: LD_STRING 02_Kirov
16894: PPUSH
16895: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16899: LD_INT 22
16901: PUSH
16902: LD_INT 3
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 21
16911: PUSH
16912: LD_INT 2
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PPUSH
16923: CALL_OW 69
16927: PPUSH
16928: CALL 19845 0 1
16932: PPUSH
16933: LD_STRING 02_VehiclesCount
16935: PPUSH
16936: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16940: LD_INT 22
16942: PUSH
16943: LD_INT 6
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 21
16952: PUSH
16953: LD_INT 2
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PPUSH
16964: CALL_OW 69
16968: PPUSH
16969: CALL 19845 0 1
16973: PPUSH
16974: LD_STRING 02_KirovVehiclesCount
16976: PPUSH
16977: CALL_OW 39
// YouWin ;
16981: CALL_OW 103
// end ; end_of_file
16985: LD_VAR 0 1
16989: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not mode then
16990: LD_VAR 0 5
16994: NOT
16995: IFFALSE 16999
// exit ;
16997: GO 17020
// wait ( 0 0$12 ) ;
16999: LD_INT 420
17001: PPUSH
17002: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
17006: LD_VAR 0 2
17010: PPUSH
17011: LD_VAR 0 3
17015: PPUSH
17016: CALL 8382 0 2
// end ;
17020: PPOPN 5
17022: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL 77517 0 1
// if un = Burlak then
17032: LD_VAR 0 1
17036: PUSH
17037: LD_EXP 34
17041: EQUAL
17042: IFFALSE 17051
// YouLost ( Burlak ) ;
17044: LD_STRING Burlak
17046: PPUSH
17047: CALL_OW 104
// if un = Platonov then
17051: LD_VAR 0 1
17055: PUSH
17056: LD_EXP 40
17060: EQUAL
17061: IFFALSE 17070
// YouLost ( Platonov ) ;
17063: LD_STRING Platonov
17065: PPUSH
17066: CALL_OW 104
// if un = Kurin then
17070: LD_VAR 0 1
17074: PUSH
17075: LD_EXP 38
17079: EQUAL
17080: IFFALSE 17089
// YouLost ( Kurin ) ;
17082: LD_STRING Kurin
17084: PPUSH
17085: CALL_OW 104
// if un = Belkov then
17089: LD_VAR 0 1
17093: PUSH
17094: LD_EXP 36
17098: EQUAL
17099: IFFALSE 17109
// belkovDied := true ;
17101: LD_ADDR_EXP 19
17105: PUSH
17106: LD_INT 1
17108: ST_TO_ADDR
// if un in belkovTeam then
17109: LD_VAR 0 1
17113: PUSH
17114: LD_EXP 45
17118: IN
17119: IFFALSE 17152
// begin belkovTeam := belkovTeam diff un ;
17121: LD_ADDR_EXP 45
17125: PUSH
17126: LD_EXP 45
17130: PUSH
17131: LD_VAR 0 1
17135: DIFF
17136: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
17137: LD_ADDR_EXP 29
17141: PUSH
17142: LD_EXP 29
17146: PPUSH
17147: CALL 57194 0 1
17151: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
17152: LD_VAR 0 1
17156: PUSH
17157: LD_INT 22
17159: PUSH
17160: LD_INT 3
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 1
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 23
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: LIST
17191: PPUSH
17192: CALL_OW 69
17196: IN
17197: IFFALSE 17214
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
17199: LD_ADDR_EXP 30
17203: PUSH
17204: LD_EXP 30
17208: PPUSH
17209: CALL 57194 0 1
17213: ST_TO_ADDR
// if un in usWestForces then
17214: LD_VAR 0 1
17218: PUSH
17219: LD_EXP 46
17223: IN
17224: IFFALSE 17242
// usWestForces := usWestForces diff un ;
17226: LD_ADDR_EXP 46
17230: PUSH
17231: LD_EXP 46
17235: PUSH
17236: LD_VAR 0 1
17240: DIFF
17241: ST_TO_ADDR
// if un in usEastForces then
17242: LD_VAR 0 1
17246: PUSH
17247: LD_EXP 47
17251: IN
17252: IFFALSE 17270
// usEastForces := usEastForces diff un ;
17254: LD_ADDR_EXP 47
17258: PUSH
17259: LD_EXP 47
17263: PUSH
17264: LD_VAR 0 1
17268: DIFF
17269: ST_TO_ADDR
// if un = Dickens then
17270: LD_VAR 0 1
17274: PUSH
17275: LD_EXP 49
17279: EQUAL
17280: IFFALSE 17298
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
17282: LD_INT 1
17284: PPUSH
17285: LD_EXP 3
17289: PUSH
17290: LD_STRING DickensKilled
17292: STR
17293: PPUSH
17294: CALL_OW 39
// end ;
17298: PPOPN 1
17300: END
// on BuildingComplete ( b ) do var mech ;
17301: LD_INT 0
17303: PPUSH
// begin if GetSide ( b ) = 3 then
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 255
17313: PUSH
17314: LD_INT 3
17316: EQUAL
17317: IFFALSE 17376
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
17319: LD_VAR 0 1
17323: PPUSH
17324: CALL_OW 266
17328: PUSH
17329: LD_INT 6
17331: PUSH
17332: LD_INT 7
17334: PUSH
17335: LD_INT 8
17337: PUSH
17338: EMPTY
17339: LIST
17340: LIST
17341: LIST
17342: IN
17343: IFFALSE 17353
// hasLab := true ;
17345: LD_ADDR_EXP 9
17349: PUSH
17350: LD_INT 1
17352: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 266
17362: PUSH
17363: LD_INT 2
17365: EQUAL
17366: IFFALSE 17376
// hasWorkshop := true ;
17368: LD_ADDR_EXP 10
17372: PUSH
17373: LD_INT 1
17375: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
17376: LD_VAR 0 1
17380: PPUSH
17381: CALL_OW 255
17385: PUSH
17386: LD_INT 6
17388: EQUAL
17389: IFFALSE 17463
// begin if GetBType ( b ) = b_workshop then
17391: LD_VAR 0 1
17395: PPUSH
17396: CALL_OW 266
17400: PUSH
17401: LD_INT 2
17403: EQUAL
17404: IFFALSE 17463
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
17406: LD_ADDR_VAR 0 2
17410: PUSH
17411: LD_EXP 43
17415: PPUSH
17416: LD_INT 25
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: CALL_OW 72
17430: ST_TO_ADDR
// if not mech then
17431: LD_VAR 0 2
17435: NOT
17436: IFFALSE 17440
// exit ;
17438: GO 17463
// ComExit ( mech ) ;
17440: LD_VAR 0 2
17444: PPUSH
17445: CALL 56219 0 1
// AddComEnterUnit ( mech , b ) ;
17449: LD_VAR 0 2
17453: PPUSH
17454: LD_VAR 0 1
17458: PPUSH
17459: CALL_OW 180
// end ; end ; end ;
17463: PPOPN 2
17465: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_VAR 0 2
17475: PPUSH
17476: CALL 77575 0 2
// if GetSide ( vehicle ) = 3 then
17480: LD_VAR 0 1
17484: PPUSH
17485: CALL_OW 255
17489: PUSH
17490: LD_INT 3
17492: EQUAL
17493: IFFALSE 17518
// begin hasTank := true ;
17495: LD_ADDR_EXP 12
17499: PUSH
17500: LD_INT 1
17502: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
17503: LD_ADDR_EXP 15
17507: PUSH
17508: LD_EXP 15
17512: PPUSH
17513: CALL 57194 0 1
17517: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
17518: LD_VAR 0 1
17522: PPUSH
17523: CALL_OW 255
17527: PUSH
17528: LD_INT 6
17530: EQUAL
17531: IFFALSE 17542
// KirovAttack ( vehicle ) ;
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL 3954 0 1
// end ;
17542: PPOPN 2
17544: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
17545: LD_VAR 0 1
17549: PUSH
17550: LD_EXP 33
17554: EQUAL
17555: IFFALSE 17561
// BelkovAttackScript ;
17557: CALL 1751 0 0
// end ;
17561: PPOPN 1
17563: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
17564: LD_INT 0
17566: PPUSH
// begin if side = 1 then
17567: LD_VAR 0 3
17571: PUSH
17572: LD_INT 1
17574: EQUAL
17575: IFFALSE 17585
// vehCaptured := true ;
17577: LD_ADDR_EXP 16
17581: PUSH
17582: LD_INT 1
17584: ST_TO_ADDR
// end ;
17585: PPOPN 5
17587: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
17588: LD_VAR 0 1
17592: PUSH
17593: LD_INT 3
17595: EQUAL
17596: IFFALSE 17608
17598: PUSH
17599: LD_VAR 0 2
17603: PUSH
17604: LD_INT 6
17606: EQUAL
17607: AND
17608: IFFALSE 17618
// allianceAttacked := true ;
17610: LD_ADDR_EXP 13
17614: PUSH
17615: LD_INT 1
17617: ST_TO_ADDR
// end ; end_of_file
17618: PPOPN 2
17620: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17621: LD_INT 0
17623: PPUSH
17624: PPUSH
// if exist_mode then
17625: LD_VAR 0 2
17629: IFFALSE 17675
// begin unit := CreateCharacter ( prefix & ident ) ;
17631: LD_ADDR_VAR 0 5
17635: PUSH
17636: LD_VAR 0 3
17640: PUSH
17641: LD_VAR 0 1
17645: STR
17646: PPUSH
17647: CALL_OW 34
17651: ST_TO_ADDR
// if unit then
17652: LD_VAR 0 5
17656: IFFALSE 17673
// DeleteCharacters ( prefix & ident ) ;
17658: LD_VAR 0 3
17662: PUSH
17663: LD_VAR 0 1
17667: STR
17668: PPUSH
17669: CALL_OW 40
// end else
17673: GO 17690
// unit := NewCharacter ( ident ) ;
17675: LD_ADDR_VAR 0 5
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 25
17689: ST_TO_ADDR
// result := unit ;
17690: LD_ADDR_VAR 0 4
17694: PUSH
17695: LD_VAR 0 5
17699: ST_TO_ADDR
// end ;
17700: LD_VAR 0 4
17704: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17705: LD_INT 0
17707: PPUSH
17708: PPUSH
// if exist_mode then
17709: LD_VAR 0 2
17713: IFFALSE 17738
// unit := CreateCharacter ( prefix & ident ) else
17715: LD_ADDR_VAR 0 5
17719: PUSH
17720: LD_VAR 0 3
17724: PUSH
17725: LD_VAR 0 1
17729: STR
17730: PPUSH
17731: CALL_OW 34
17735: ST_TO_ADDR
17736: GO 17753
// unit := NewCharacter ( ident ) ;
17738: LD_ADDR_VAR 0 5
17742: PUSH
17743: LD_VAR 0 1
17747: PPUSH
17748: CALL_OW 25
17752: ST_TO_ADDR
// result := unit ;
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_VAR 0 5
17762: ST_TO_ADDR
// end ;
17763: LD_VAR 0 4
17767: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17768: LD_INT 0
17770: PPUSH
17771: PPUSH
// if not side or not nation then
17772: LD_VAR 0 1
17776: NOT
17777: IFTRUE 17786
17779: PUSH
17780: LD_VAR 0 2
17784: NOT
17785: OR
17786: IFFALSE 17790
// exit ;
17788: GO 18584
// case nation of nation_american :
17790: LD_VAR 0 2
17794: PUSH
17795: LD_INT 1
17797: DOUBLE
17798: EQUAL
17799: IFTRUE 17803
17801: GO 18025
17803: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
17804: LD_ADDR_VAR 0 4
17808: PUSH
17809: LD_INT 35
17811: PUSH
17812: LD_INT 45
17814: PUSH
17815: LD_INT 46
17817: PUSH
17818: LD_INT 47
17820: PUSH
17821: LD_INT 82
17823: PUSH
17824: LD_INT 83
17826: PUSH
17827: LD_INT 84
17829: PUSH
17830: LD_INT 85
17832: PUSH
17833: LD_INT 86
17835: PUSH
17836: LD_INT 1
17838: PUSH
17839: LD_INT 2
17841: PUSH
17842: LD_INT 6
17844: PUSH
17845: LD_INT 15
17847: PUSH
17848: LD_INT 16
17850: PUSH
17851: LD_INT 7
17853: PUSH
17854: LD_INT 12
17856: PUSH
17857: LD_INT 13
17859: PUSH
17860: LD_INT 10
17862: PUSH
17863: LD_INT 14
17865: PUSH
17866: LD_INT 20
17868: PUSH
17869: LD_INT 21
17871: PUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 25
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 27
17883: PUSH
17884: LD_INT 36
17886: PUSH
17887: LD_INT 69
17889: PUSH
17890: LD_INT 39
17892: PUSH
17893: LD_INT 34
17895: PUSH
17896: LD_INT 40
17898: PUSH
17899: LD_INT 48
17901: PUSH
17902: LD_INT 49
17904: PUSH
17905: LD_INT 50
17907: PUSH
17908: LD_INT 51
17910: PUSH
17911: LD_INT 52
17913: PUSH
17914: LD_INT 53
17916: PUSH
17917: LD_INT 54
17919: PUSH
17920: LD_INT 55
17922: PUSH
17923: LD_INT 56
17925: PUSH
17926: LD_INT 57
17928: PUSH
17929: LD_INT 58
17931: PUSH
17932: LD_INT 59
17934: PUSH
17935: LD_INT 60
17937: PUSH
17938: LD_INT 61
17940: PUSH
17941: LD_INT 62
17943: PUSH
17944: LD_INT 80
17946: PUSH
17947: LD_INT 82
17949: PUSH
17950: LD_INT 83
17952: PUSH
17953: LD_INT 84
17955: PUSH
17956: LD_INT 85
17958: PUSH
17959: LD_INT 86
17961: PUSH
17962: LD_INT 90
17964: PUSH
17965: LD_INT 93
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: ST_TO_ADDR
18023: GO 18506
18025: LD_INT 2
18027: DOUBLE
18028: EQUAL
18029: IFTRUE 18033
18031: GO 18267
18033: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
18034: LD_ADDR_VAR 0 4
18038: PUSH
18039: LD_INT 35
18041: PUSH
18042: LD_INT 45
18044: PUSH
18045: LD_INT 46
18047: PUSH
18048: LD_INT 47
18050: PUSH
18051: LD_INT 82
18053: PUSH
18054: LD_INT 83
18056: PUSH
18057: LD_INT 84
18059: PUSH
18060: LD_INT 85
18062: PUSH
18063: LD_INT 87
18065: PUSH
18066: LD_INT 70
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: LD_INT 11
18074: PUSH
18075: LD_INT 3
18077: PUSH
18078: LD_INT 4
18080: PUSH
18081: LD_INT 5
18083: PUSH
18084: LD_INT 6
18086: PUSH
18087: LD_INT 15
18089: PUSH
18090: LD_INT 18
18092: PUSH
18093: LD_INT 7
18095: PUSH
18096: LD_INT 17
18098: PUSH
18099: LD_INT 8
18101: PUSH
18102: LD_INT 20
18104: PUSH
18105: LD_INT 21
18107: PUSH
18108: LD_INT 22
18110: PUSH
18111: LD_INT 72
18113: PUSH
18114: LD_INT 26
18116: PUSH
18117: LD_INT 69
18119: PUSH
18120: LD_INT 39
18122: PUSH
18123: LD_INT 40
18125: PUSH
18126: LD_INT 41
18128: PUSH
18129: LD_INT 42
18131: PUSH
18132: LD_INT 43
18134: PUSH
18135: LD_INT 48
18137: PUSH
18138: LD_INT 49
18140: PUSH
18141: LD_INT 50
18143: PUSH
18144: LD_INT 51
18146: PUSH
18147: LD_INT 52
18149: PUSH
18150: LD_INT 53
18152: PUSH
18153: LD_INT 54
18155: PUSH
18156: LD_INT 55
18158: PUSH
18159: LD_INT 56
18161: PUSH
18162: LD_INT 60
18164: PUSH
18165: LD_INT 61
18167: PUSH
18168: LD_INT 62
18170: PUSH
18171: LD_INT 66
18173: PUSH
18174: LD_INT 67
18176: PUSH
18177: LD_INT 68
18179: PUSH
18180: LD_INT 81
18182: PUSH
18183: LD_INT 82
18185: PUSH
18186: LD_INT 83
18188: PUSH
18189: LD_INT 84
18191: PUSH
18192: LD_INT 85
18194: PUSH
18195: LD_INT 87
18197: PUSH
18198: LD_INT 88
18200: PUSH
18201: LD_INT 92
18203: PUSH
18204: LD_INT 94
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: ST_TO_ADDR
18265: GO 18506
18267: LD_INT 3
18269: DOUBLE
18270: EQUAL
18271: IFTRUE 18275
18273: GO 18505
18275: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
18276: LD_ADDR_VAR 0 4
18280: PUSH
18281: LD_INT 46
18283: PUSH
18284: LD_INT 47
18286: PUSH
18287: LD_INT 1
18289: PUSH
18290: LD_INT 2
18292: PUSH
18293: LD_INT 82
18295: PUSH
18296: LD_INT 83
18298: PUSH
18299: LD_INT 84
18301: PUSH
18302: LD_INT 85
18304: PUSH
18305: LD_INT 86
18307: PUSH
18308: LD_INT 11
18310: PUSH
18311: LD_INT 9
18313: PUSH
18314: LD_INT 20
18316: PUSH
18317: LD_INT 19
18319: PUSH
18320: LD_INT 21
18322: PUSH
18323: LD_INT 24
18325: PUSH
18326: LD_INT 22
18328: PUSH
18329: LD_INT 25
18331: PUSH
18332: LD_INT 28
18334: PUSH
18335: LD_INT 29
18337: PUSH
18338: LD_INT 30
18340: PUSH
18341: LD_INT 31
18343: PUSH
18344: LD_INT 37
18346: PUSH
18347: LD_INT 38
18349: PUSH
18350: LD_INT 32
18352: PUSH
18353: LD_INT 27
18355: PUSH
18356: LD_INT 33
18358: PUSH
18359: LD_INT 69
18361: PUSH
18362: LD_INT 39
18364: PUSH
18365: LD_INT 34
18367: PUSH
18368: LD_INT 40
18370: PUSH
18371: LD_INT 71
18373: PUSH
18374: LD_INT 23
18376: PUSH
18377: LD_INT 44
18379: PUSH
18380: LD_INT 48
18382: PUSH
18383: LD_INT 49
18385: PUSH
18386: LD_INT 50
18388: PUSH
18389: LD_INT 51
18391: PUSH
18392: LD_INT 52
18394: PUSH
18395: LD_INT 53
18397: PUSH
18398: LD_INT 54
18400: PUSH
18401: LD_INT 55
18403: PUSH
18404: LD_INT 56
18406: PUSH
18407: LD_INT 57
18409: PUSH
18410: LD_INT 58
18412: PUSH
18413: LD_INT 59
18415: PUSH
18416: LD_INT 63
18418: PUSH
18419: LD_INT 64
18421: PUSH
18422: LD_INT 65
18424: PUSH
18425: LD_INT 82
18427: PUSH
18428: LD_INT 83
18430: PUSH
18431: LD_INT 84
18433: PUSH
18434: LD_INT 85
18436: PUSH
18437: LD_INT 86
18439: PUSH
18440: LD_INT 89
18442: PUSH
18443: LD_INT 91
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: LIST
18502: ST_TO_ADDR
18503: GO 18506
18505: POP
// if state > - 1 and state < 3 then
18506: LD_VAR 0 3
18510: PUSH
18511: LD_INT 1
18513: NEG
18514: GREATER
18515: IFFALSE 18527
18517: PUSH
18518: LD_VAR 0 3
18522: PUSH
18523: LD_INT 3
18525: LESS
18526: AND
18527: IFFALSE 18584
// for i in result do
18529: LD_ADDR_VAR 0 5
18533: PUSH
18534: LD_VAR 0 4
18538: PUSH
18539: FOR_IN
18540: IFFALSE 18582
// if GetTech ( i , side ) <> state then
18542: LD_VAR 0 5
18546: PPUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 321
18556: PUSH
18557: LD_VAR 0 3
18561: NONEQUAL
18562: IFFALSE 18580
// result := result diff i ;
18564: LD_ADDR_VAR 0 4
18568: PUSH
18569: LD_VAR 0 4
18573: PUSH
18574: LD_VAR 0 5
18578: DIFF
18579: ST_TO_ADDR
18580: GO 18539
18582: POP
18583: POP
// end ;
18584: LD_VAR 0 4
18588: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
18593: PPUSH
// result := true ;
18594: LD_ADDR_VAR 0 3
18598: PUSH
18599: LD_INT 1
18601: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18602: LD_ADDR_VAR 0 5
18606: PUSH
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 480
18616: ST_TO_ADDR
// if not tmp then
18617: LD_VAR 0 5
18621: NOT
18622: IFFALSE 18626
// exit ;
18624: GO 18675
// for i in tmp do
18626: LD_ADDR_VAR 0 4
18630: PUSH
18631: LD_VAR 0 5
18635: PUSH
18636: FOR_IN
18637: IFFALSE 18673
// if GetTech ( i , side ) <> state_researched then
18639: LD_VAR 0 4
18643: PPUSH
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 321
18653: PUSH
18654: LD_INT 2
18656: NONEQUAL
18657: IFFALSE 18671
// begin result := false ;
18659: LD_ADDR_VAR 0 3
18663: PUSH
18664: LD_INT 0
18666: ST_TO_ADDR
// exit ;
18667: POP
18668: POP
18669: GO 18675
// end ;
18671: GO 18636
18673: POP
18674: POP
// end ;
18675: LD_VAR 0 3
18679: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18680: LD_INT 0
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
18687: PPUSH
18688: PPUSH
18689: PPUSH
18690: PPUSH
18691: PPUSH
18692: PPUSH
18693: PPUSH
18694: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18695: LD_VAR 0 1
18699: NOT
18700: IFTRUE 18717
18702: PUSH
18703: LD_VAR 0 1
18707: PPUSH
18708: CALL_OW 257
18712: PUSH
18713: LD_INT 9
18715: NONEQUAL
18716: OR
18717: IFFALSE 18721
// exit ;
18719: GO 19300
// side := GetSide ( unit ) ;
18721: LD_ADDR_VAR 0 9
18725: PUSH
18726: LD_VAR 0 1
18730: PPUSH
18731: CALL_OW 255
18735: ST_TO_ADDR
// tech_space := tech_spacanom ;
18736: LD_ADDR_VAR 0 12
18740: PUSH
18741: LD_INT 29
18743: ST_TO_ADDR
// tech_time := tech_taurad ;
18744: LD_ADDR_VAR 0 13
18748: PUSH
18749: LD_INT 28
18751: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18752: LD_ADDR_VAR 0 11
18756: PUSH
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 310
18766: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18767: LD_VAR 0 11
18771: PPUSH
18772: CALL_OW 247
18776: PUSH
18777: LD_INT 2
18779: EQUAL
18780: IFFALSE 18784
// exit ;
18782: GO 19300
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18784: LD_ADDR_VAR 0 8
18788: PUSH
18789: LD_INT 81
18791: PUSH
18792: LD_VAR 0 9
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: LD_INT 3
18803: PUSH
18804: LD_INT 21
18806: PUSH
18807: LD_INT 3
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PPUSH
18822: CALL_OW 69
18826: ST_TO_ADDR
// if not tmp then
18827: LD_VAR 0 8
18831: NOT
18832: IFFALSE 18836
// exit ;
18834: GO 19300
// if in_unit then
18836: LD_VAR 0 11
18840: IFFALSE 18864
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18842: LD_ADDR_VAR 0 10
18846: PUSH
18847: LD_VAR 0 8
18851: PPUSH
18852: LD_VAR 0 11
18856: PPUSH
18857: CALL_OW 74
18861: ST_TO_ADDR
18862: GO 18884
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18864: LD_ADDR_VAR 0 10
18868: PUSH
18869: LD_VAR 0 8
18873: PPUSH
18874: LD_VAR 0 1
18878: PPUSH
18879: CALL_OW 74
18883: ST_TO_ADDR
// if not enemy then
18884: LD_VAR 0 10
18888: NOT
18889: IFFALSE 18893
// exit ;
18891: GO 19300
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18893: LD_VAR 0 11
18897: IFFALSE 18919
18899: PUSH
18900: LD_VAR 0 11
18904: PPUSH
18905: LD_VAR 0 10
18909: PPUSH
18910: CALL_OW 296
18914: PUSH
18915: LD_INT 13
18917: GREATER
18918: AND
18919: IFTRUE 18941
18921: PUSH
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_VAR 0 10
18931: PPUSH
18932: CALL_OW 296
18936: PUSH
18937: LD_INT 12
18939: GREATER
18940: OR
18941: IFFALSE 18945
// exit ;
18943: GO 19300
// missile := [ 1 ] ;
18945: LD_ADDR_VAR 0 14
18949: PUSH
18950: LD_INT 1
18952: PUSH
18953: EMPTY
18954: LIST
18955: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18956: LD_VAR 0 9
18960: PPUSH
18961: LD_VAR 0 12
18965: PPUSH
18966: CALL_OW 325
18970: IFFALSE 18999
// missile := Replace ( missile , missile + 1 , 2 ) ;
18972: LD_ADDR_VAR 0 14
18976: PUSH
18977: LD_VAR 0 14
18981: PPUSH
18982: LD_VAR 0 14
18986: PUSH
18987: LD_INT 1
18989: PLUS
18990: PPUSH
18991: LD_INT 2
18993: PPUSH
18994: CALL_OW 1
18998: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18999: LD_VAR 0 9
19003: PPUSH
19004: LD_VAR 0 13
19008: PPUSH
19009: CALL_OW 325
19013: IFFALSE 19037
19015: PUSH
19016: LD_VAR 0 10
19020: PPUSH
19021: CALL_OW 255
19025: PPUSH
19026: LD_VAR 0 13
19030: PPUSH
19031: CALL_OW 325
19035: NOT
19036: AND
19037: IFFALSE 19066
// missile := Replace ( missile , missile + 1 , 3 ) ;
19039: LD_ADDR_VAR 0 14
19043: PUSH
19044: LD_VAR 0 14
19048: PPUSH
19049: LD_VAR 0 14
19053: PUSH
19054: LD_INT 1
19056: PLUS
19057: PPUSH
19058: LD_INT 3
19060: PPUSH
19061: CALL_OW 1
19065: ST_TO_ADDR
// if missile < 2 then
19066: LD_VAR 0 14
19070: PUSH
19071: LD_INT 2
19073: LESS
19074: IFFALSE 19078
// exit ;
19076: GO 19300
// x := GetX ( enemy ) ;
19078: LD_ADDR_VAR 0 4
19082: PUSH
19083: LD_VAR 0 10
19087: PPUSH
19088: CALL_OW 250
19092: ST_TO_ADDR
// y := GetY ( enemy ) ;
19093: LD_ADDR_VAR 0 5
19097: PUSH
19098: LD_VAR 0 10
19102: PPUSH
19103: CALL_OW 251
19107: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19108: LD_ADDR_VAR 0 6
19112: PUSH
19113: LD_VAR 0 4
19117: PUSH
19118: LD_INT 1
19120: NEG
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 12
19129: PLUS
19130: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19131: LD_ADDR_VAR 0 7
19135: PUSH
19136: LD_VAR 0 5
19140: PUSH
19141: LD_INT 1
19143: NEG
19144: PPUSH
19145: LD_INT 1
19147: PPUSH
19148: CALL_OW 12
19152: PLUS
19153: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19154: LD_VAR 0 6
19158: PPUSH
19159: LD_VAR 0 7
19163: PPUSH
19164: CALL_OW 488
19168: NOT
19169: IFFALSE 19191
// begin _x := x ;
19171: LD_ADDR_VAR 0 6
19175: PUSH
19176: LD_VAR 0 4
19180: ST_TO_ADDR
// _y := y ;
19181: LD_ADDR_VAR 0 7
19185: PUSH
19186: LD_VAR 0 5
19190: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19191: LD_ADDR_VAR 0 3
19195: PUSH
19196: LD_INT 1
19198: PPUSH
19199: LD_VAR 0 14
19203: PPUSH
19204: CALL_OW 12
19208: ST_TO_ADDR
// case i of 1 :
19209: LD_VAR 0 3
19213: PUSH
19214: LD_INT 1
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19239
19222: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19223: LD_VAR 0 1
19227: PPUSH
19228: LD_VAR 0 10
19232: PPUSH
19233: CALL_OW 115
19237: GO 19300
19239: LD_INT 2
19241: DOUBLE
19242: EQUAL
19243: IFTRUE 19247
19245: GO 19269
19247: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19248: LD_VAR 0 1
19252: PPUSH
19253: LD_VAR 0 6
19257: PPUSH
19258: LD_VAR 0 7
19262: PPUSH
19263: CALL_OW 153
19267: GO 19300
19269: LD_INT 3
19271: DOUBLE
19272: EQUAL
19273: IFTRUE 19277
19275: GO 19299
19277: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19278: LD_VAR 0 1
19282: PPUSH
19283: LD_VAR 0 6
19287: PPUSH
19288: LD_VAR 0 7
19292: PPUSH
19293: CALL_OW 154
19297: GO 19300
19299: POP
// end ;
19300: LD_VAR 0 2
19304: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19305: LD_INT 0
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
19311: PPUSH
19312: PPUSH
// if not unit or not building then
19313: LD_VAR 0 1
19317: NOT
19318: IFTRUE 19327
19320: PUSH
19321: LD_VAR 0 2
19325: NOT
19326: OR
19327: IFFALSE 19331
// exit ;
19329: GO 19489
// x := GetX ( building ) ;
19331: LD_ADDR_VAR 0 5
19335: PUSH
19336: LD_VAR 0 2
19340: PPUSH
19341: CALL_OW 250
19345: ST_TO_ADDR
// y := GetY ( building ) ;
19346: LD_ADDR_VAR 0 6
19350: PUSH
19351: LD_VAR 0 2
19355: PPUSH
19356: CALL_OW 251
19360: ST_TO_ADDR
// for i := 0 to 5 do
19361: LD_ADDR_VAR 0 4
19365: PUSH
19366: DOUBLE
19367: LD_INT 0
19369: DEC
19370: ST_TO_ADDR
19371: LD_INT 5
19373: PUSH
19374: FOR_TO
19375: IFFALSE 19487
// begin _x := ShiftX ( x , i , 3 ) ;
19377: LD_ADDR_VAR 0 7
19381: PUSH
19382: LD_VAR 0 5
19386: PPUSH
19387: LD_VAR 0 4
19391: PPUSH
19392: LD_INT 3
19394: PPUSH
19395: CALL_OW 272
19399: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19400: LD_ADDR_VAR 0 8
19404: PUSH
19405: LD_VAR 0 6
19409: PPUSH
19410: LD_VAR 0 4
19414: PPUSH
19415: LD_INT 3
19417: PPUSH
19418: CALL_OW 273
19422: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19423: LD_VAR 0 7
19427: PPUSH
19428: LD_VAR 0 8
19432: PPUSH
19433: CALL_OW 488
19437: NOT
19438: IFFALSE 19442
// continue ;
19440: GO 19374
// if HexInfo ( _x , _y ) = 0 then
19442: LD_VAR 0 7
19446: PPUSH
19447: LD_VAR 0 8
19451: PPUSH
19452: CALL_OW 428
19456: PUSH
19457: LD_INT 0
19459: EQUAL
19460: IFFALSE 19485
// begin ComMoveXY ( unit , _x , _y ) ;
19462: LD_VAR 0 1
19466: PPUSH
19467: LD_VAR 0 7
19471: PPUSH
19472: LD_VAR 0 8
19476: PPUSH
19477: CALL_OW 111
// exit ;
19481: POP
19482: POP
19483: GO 19489
// end ; end ;
19485: GO 19374
19487: POP
19488: POP
// end ;
19489: LD_VAR 0 3
19493: RET
// export function ScanBase ( side , base_area ) ; begin
19494: LD_INT 0
19496: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19497: LD_ADDR_VAR 0 3
19501: PUSH
19502: LD_VAR 0 2
19506: PPUSH
19507: LD_INT 81
19509: PUSH
19510: LD_VAR 0 1
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 70
19523: ST_TO_ADDR
// end ;
19524: LD_VAR 0 3
19528: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19529: LD_INT 0
19531: PPUSH
19532: PPUSH
19533: PPUSH
19534: PPUSH
// result := false ;
19535: LD_ADDR_VAR 0 2
19539: PUSH
19540: LD_INT 0
19542: ST_TO_ADDR
// side := GetSide ( unit ) ;
19543: LD_ADDR_VAR 0 3
19547: PUSH
19548: LD_VAR 0 1
19552: PPUSH
19553: CALL_OW 255
19557: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19558: LD_ADDR_VAR 0 4
19562: PUSH
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 248
19572: ST_TO_ADDR
// case nat of 1 :
19573: LD_VAR 0 4
19577: PUSH
19578: LD_INT 1
19580: DOUBLE
19581: EQUAL
19582: IFTRUE 19586
19584: GO 19597
19586: POP
// tech := tech_lassight ; 2 :
19587: LD_ADDR_VAR 0 5
19591: PUSH
19592: LD_INT 12
19594: ST_TO_ADDR
19595: GO 19636
19597: LD_INT 2
19599: DOUBLE
19600: EQUAL
19601: IFTRUE 19605
19603: GO 19616
19605: POP
// tech := tech_mortar ; 3 :
19606: LD_ADDR_VAR 0 5
19610: PUSH
19611: LD_INT 41
19613: ST_TO_ADDR
19614: GO 19636
19616: LD_INT 3
19618: DOUBLE
19619: EQUAL
19620: IFTRUE 19624
19622: GO 19635
19624: POP
// tech := tech_bazooka ; end ;
19625: LD_ADDR_VAR 0 5
19629: PUSH
19630: LD_INT 44
19632: ST_TO_ADDR
19633: GO 19636
19635: POP
// if Researched ( side , tech ) then
19636: LD_VAR 0 3
19640: PPUSH
19641: LD_VAR 0 5
19645: PPUSH
19646: CALL_OW 325
19650: IFFALSE 19677
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19652: LD_ADDR_VAR 0 2
19656: PUSH
19657: LD_INT 5
19659: PUSH
19660: LD_INT 8
19662: PUSH
19663: LD_INT 9
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: LIST
19670: PUSH
19671: LD_VAR 0 4
19675: ARRAY
19676: ST_TO_ADDR
// end ;
19677: LD_VAR 0 2
19681: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19682: LD_INT 0
19684: PPUSH
19685: PPUSH
19686: PPUSH
// if not mines then
19687: LD_VAR 0 2
19691: NOT
19692: IFFALSE 19696
// exit ;
19694: GO 19840
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19696: LD_ADDR_VAR 0 5
19700: PUSH
19701: LD_INT 81
19703: PUSH
19704: LD_VAR 0 1
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 3
19715: PUSH
19716: LD_INT 21
19718: PUSH
19719: LD_INT 3
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: EMPTY
19731: LIST
19732: LIST
19733: PPUSH
19734: CALL_OW 69
19738: ST_TO_ADDR
// for i in mines do
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_VAR 0 2
19748: PUSH
19749: FOR_IN
19750: IFFALSE 19838
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19752: LD_VAR 0 4
19756: PUSH
19757: LD_INT 1
19759: ARRAY
19760: PPUSH
19761: LD_VAR 0 4
19765: PUSH
19766: LD_INT 2
19768: ARRAY
19769: PPUSH
19770: CALL_OW 458
19774: NOT
19775: IFFALSE 19779
// continue ;
19777: GO 19749
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19779: LD_VAR 0 4
19783: PUSH
19784: LD_INT 1
19786: ARRAY
19787: PPUSH
19788: LD_VAR 0 4
19792: PUSH
19793: LD_INT 2
19795: ARRAY
19796: PPUSH
19797: CALL_OW 428
19801: PUSH
19802: LD_VAR 0 5
19806: IN
19807: IFFALSE 19836
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19809: LD_VAR 0 4
19813: PUSH
19814: LD_INT 1
19816: ARRAY
19817: PPUSH
19818: LD_VAR 0 4
19822: PUSH
19823: LD_INT 2
19825: ARRAY
19826: PPUSH
19827: LD_VAR 0 1
19831: PPUSH
19832: CALL_OW 456
// end ;
19836: GO 19749
19838: POP
19839: POP
// end ;
19840: LD_VAR 0 3
19844: RET
// export function Count ( array ) ; begin
19845: LD_INT 0
19847: PPUSH
// result := array + 0 ;
19848: LD_ADDR_VAR 0 2
19852: PUSH
19853: LD_VAR 0 1
19857: PUSH
19858: LD_INT 0
19860: PLUS
19861: ST_TO_ADDR
// end ;
19862: LD_VAR 0 2
19866: RET
// export function IsEmpty ( building ) ; begin
19867: LD_INT 0
19869: PPUSH
// if not building then
19870: LD_VAR 0 1
19874: NOT
19875: IFFALSE 19879
// exit ;
19877: GO 19922
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19879: LD_ADDR_VAR 0 2
19883: PUSH
19884: LD_VAR 0 1
19888: PUSH
19889: LD_INT 22
19891: PUSH
19892: LD_VAR 0 1
19896: PPUSH
19897: CALL_OW 255
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: PUSH
19906: LD_INT 58
19908: PUSH
19909: EMPTY
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: PPUSH
19916: CALL_OW 69
19920: IN
19921: ST_TO_ADDR
// end ;
19922: LD_VAR 0 2
19926: RET
// export function IsNotFull ( building ) ; var places ; begin
19927: LD_INT 0
19929: PPUSH
19930: PPUSH
// if not building then
19931: LD_VAR 0 1
19935: NOT
19936: IFFALSE 19940
// exit ;
19938: GO 19968
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19940: LD_ADDR_VAR 0 2
19944: PUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: LD_INT 3
19952: PUSH
19953: LD_INT 62
19955: PUSH
19956: EMPTY
19957: LIST
19958: PUSH
19959: EMPTY
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 72
19967: ST_TO_ADDR
// end ;
19968: LD_VAR 0 2
19972: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19973: LD_INT 0
19975: PPUSH
19976: PPUSH
19977: PPUSH
19978: PPUSH
// tmp := [ ] ;
19979: LD_ADDR_VAR 0 3
19983: PUSH
19984: EMPTY
19985: ST_TO_ADDR
// list := [ ] ;
19986: LD_ADDR_VAR 0 5
19990: PUSH
19991: EMPTY
19992: ST_TO_ADDR
// for i = 16 to 25 do
19993: LD_ADDR_VAR 0 4
19997: PUSH
19998: DOUBLE
19999: LD_INT 16
20001: DEC
20002: ST_TO_ADDR
20003: LD_INT 25
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20080
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
20009: LD_ADDR_VAR 0 3
20013: PUSH
20014: LD_VAR 0 3
20018: PUSH
20019: LD_INT 22
20021: PUSH
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 255
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 91
20038: PUSH
20039: LD_VAR 0 1
20043: PUSH
20044: LD_INT 6
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 30
20054: PUSH
20055: LD_VAR 0 4
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: PUSH
20069: EMPTY
20070: LIST
20071: PPUSH
20072: CALL_OW 69
20076: ADD
20077: ST_TO_ADDR
20078: GO 20006
20080: POP
20081: POP
// for i = 1 to tmp do
20082: LD_ADDR_VAR 0 4
20086: PUSH
20087: DOUBLE
20088: LD_INT 1
20090: DEC
20091: ST_TO_ADDR
20092: LD_VAR 0 3
20096: PUSH
20097: FOR_TO
20098: IFFALSE 20186
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20100: LD_ADDR_VAR 0 5
20104: PUSH
20105: LD_VAR 0 5
20109: PUSH
20110: LD_VAR 0 3
20114: PUSH
20115: LD_VAR 0 4
20119: ARRAY
20120: PPUSH
20121: CALL_OW 266
20125: PUSH
20126: LD_VAR 0 3
20130: PUSH
20131: LD_VAR 0 4
20135: ARRAY
20136: PPUSH
20137: CALL_OW 250
20141: PUSH
20142: LD_VAR 0 3
20146: PUSH
20147: LD_VAR 0 4
20151: ARRAY
20152: PPUSH
20153: CALL_OW 251
20157: PUSH
20158: LD_VAR 0 3
20162: PUSH
20163: LD_VAR 0 4
20167: ARRAY
20168: PPUSH
20169: CALL_OW 254
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: ADD
20183: ST_TO_ADDR
20184: GO 20097
20186: POP
20187: POP
// result := list ;
20188: LD_ADDR_VAR 0 2
20192: PUSH
20193: LD_VAR 0 5
20197: ST_TO_ADDR
// end ;
20198: LD_VAR 0 2
20202: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
20208: PPUSH
20209: PPUSH
20210: PPUSH
20211: PPUSH
// if not factory then
20212: LD_VAR 0 1
20216: NOT
20217: IFFALSE 20221
// exit ;
20219: GO 20824
// if control = control_apeman then
20221: LD_VAR 0 4
20225: PUSH
20226: LD_INT 5
20228: EQUAL
20229: IFFALSE 20338
// begin tmp := UnitsInside ( factory ) ;
20231: LD_ADDR_VAR 0 8
20235: PUSH
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 313
20245: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20246: LD_VAR 0 8
20250: PPUSH
20251: LD_INT 25
20253: PUSH
20254: LD_INT 12
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 72
20265: NOT
20266: IFFALSE 20276
// control := control_manual ;
20268: LD_ADDR_VAR 0 4
20272: PUSH
20273: LD_INT 1
20275: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20276: LD_ADDR_VAR 0 8
20280: PUSH
20281: LD_VAR 0 1
20285: PPUSH
20286: CALL 19973 0 1
20290: ST_TO_ADDR
// if tmp then
20291: LD_VAR 0 8
20295: IFFALSE 20338
// begin for i in tmp do
20297: LD_ADDR_VAR 0 7
20301: PUSH
20302: LD_VAR 0 8
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20336
// if i [ 1 ] = b_ext_radio then
20310: LD_VAR 0 7
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 22
20321: EQUAL
20322: IFFALSE 20334
// begin control := control_remote ;
20324: LD_ADDR_VAR 0 4
20328: PUSH
20329: LD_INT 2
20331: ST_TO_ADDR
// break ;
20332: GO 20336
// end ;
20334: GO 20307
20336: POP
20337: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20338: LD_VAR 0 1
20342: PPUSH
20343: LD_VAR 0 2
20347: PPUSH
20348: LD_VAR 0 3
20352: PPUSH
20353: LD_VAR 0 4
20357: PPUSH
20358: LD_VAR 0 5
20362: PPUSH
20363: CALL_OW 448
20367: IFFALSE 20402
// begin result := [ chassis , engine , control , weapon ] ;
20369: LD_ADDR_VAR 0 6
20373: PUSH
20374: LD_VAR 0 2
20378: PUSH
20379: LD_VAR 0 3
20383: PUSH
20384: LD_VAR 0 4
20388: PUSH
20389: LD_VAR 0 5
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: ST_TO_ADDR
// exit ;
20400: GO 20824
// end ; _chassis := AvailableChassisList ( factory ) ;
20402: LD_ADDR_VAR 0 9
20406: PUSH
20407: LD_VAR 0 1
20411: PPUSH
20412: CALL_OW 475
20416: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20417: LD_ADDR_VAR 0 11
20421: PUSH
20422: LD_VAR 0 1
20426: PPUSH
20427: CALL_OW 476
20431: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20432: LD_ADDR_VAR 0 12
20436: PUSH
20437: LD_VAR 0 1
20441: PPUSH
20442: CALL_OW 477
20446: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20447: LD_ADDR_VAR 0 10
20451: PUSH
20452: LD_VAR 0 1
20456: PPUSH
20457: CALL_OW 478
20461: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20462: LD_VAR 0 9
20466: NOT
20467: IFTRUE 20476
20469: PUSH
20470: LD_VAR 0 11
20474: NOT
20475: OR
20476: IFTRUE 20485
20478: PUSH
20479: LD_VAR 0 12
20483: NOT
20484: OR
20485: IFTRUE 20494
20487: PUSH
20488: LD_VAR 0 10
20492: NOT
20493: OR
20494: IFFALSE 20529
// begin result := [ chassis , engine , control , weapon ] ;
20496: LD_ADDR_VAR 0 6
20500: PUSH
20501: LD_VAR 0 2
20505: PUSH
20506: LD_VAR 0 3
20510: PUSH
20511: LD_VAR 0 4
20515: PUSH
20516: LD_VAR 0 5
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: ST_TO_ADDR
// exit ;
20527: GO 20824
// end ; if not chassis in _chassis then
20529: LD_VAR 0 2
20533: PUSH
20534: LD_VAR 0 9
20538: IN
20539: NOT
20540: IFFALSE 20566
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20542: LD_ADDR_VAR 0 2
20546: PUSH
20547: LD_VAR 0 9
20551: PUSH
20552: LD_INT 1
20554: PPUSH
20555: LD_VAR 0 9
20559: PPUSH
20560: CALL_OW 12
20564: ARRAY
20565: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20566: LD_VAR 0 2
20570: PPUSH
20571: LD_VAR 0 3
20575: PPUSH
20576: CALL 20829 0 2
20580: NOT
20581: IFFALSE 20642
// repeat engine := _engine [ 1 ] ;
20583: LD_ADDR_VAR 0 3
20587: PUSH
20588: LD_VAR 0 11
20592: PUSH
20593: LD_INT 1
20595: ARRAY
20596: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20597: LD_ADDR_VAR 0 11
20601: PUSH
20602: LD_VAR 0 11
20606: PPUSH
20607: LD_INT 1
20609: PPUSH
20610: CALL_OW 3
20614: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_VAR 0 3
20624: PPUSH
20625: CALL 20829 0 2
20629: IFTRUE 20640
20631: PUSH
20632: LD_VAR 0 11
20636: PUSH
20637: EMPTY
20638: EQUAL
20639: OR
20640: IFFALSE 20583
// if not control in _control then
20642: LD_VAR 0 4
20646: PUSH
20647: LD_VAR 0 12
20651: IN
20652: NOT
20653: IFFALSE 20679
// control := _control [ rand ( 1 , _control ) ] ;
20655: LD_ADDR_VAR 0 4
20659: PUSH
20660: LD_VAR 0 12
20664: PUSH
20665: LD_INT 1
20667: PPUSH
20668: LD_VAR 0 12
20672: PPUSH
20673: CALL_OW 12
20677: ARRAY
20678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20679: LD_VAR 0 2
20683: PPUSH
20684: LD_VAR 0 5
20688: PPUSH
20689: CALL 21051 0 2
20693: NOT
20694: IFFALSE 20755
// repeat weapon := _weapon [ 1 ] ;
20696: LD_ADDR_VAR 0 5
20700: PUSH
20701: LD_VAR 0 10
20705: PUSH
20706: LD_INT 1
20708: ARRAY
20709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20710: LD_ADDR_VAR 0 10
20714: PUSH
20715: LD_VAR 0 10
20719: PPUSH
20720: LD_INT 1
20722: PPUSH
20723: CALL_OW 3
20727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20728: LD_VAR 0 2
20732: PPUSH
20733: LD_VAR 0 5
20737: PPUSH
20738: CALL 21051 0 2
20742: IFTRUE 20753
20744: PUSH
20745: LD_VAR 0 10
20749: PUSH
20750: EMPTY
20751: EQUAL
20752: OR
20753: IFFALSE 20696
// result := [ ] ;
20755: LD_ADDR_VAR 0 6
20759: PUSH
20760: EMPTY
20761: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20762: LD_VAR 0 1
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_VAR 0 3
20776: PPUSH
20777: LD_VAR 0 4
20781: PPUSH
20782: LD_VAR 0 5
20786: PPUSH
20787: CALL_OW 448
20791: IFFALSE 20824
// result := [ chassis , engine , control , weapon ] ;
20793: LD_ADDR_VAR 0 6
20797: PUSH
20798: LD_VAR 0 2
20802: PUSH
20803: LD_VAR 0 3
20807: PUSH
20808: LD_VAR 0 4
20812: PUSH
20813: LD_VAR 0 5
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: ST_TO_ADDR
// end ;
20824: LD_VAR 0 6
20828: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20829: LD_INT 0
20831: PPUSH
// if not chassis or not engine then
20832: LD_VAR 0 1
20836: NOT
20837: IFTRUE 20846
20839: PUSH
20840: LD_VAR 0 2
20844: NOT
20845: OR
20846: IFFALSE 20850
// exit ;
20848: GO 21046
// case engine of engine_solar :
20850: LD_VAR 0 2
20854: PUSH
20855: LD_INT 2
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20901
20863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_INT 11
20871: PUSH
20872: LD_INT 12
20874: PUSH
20875: LD_INT 13
20877: PUSH
20878: LD_INT 14
20880: PUSH
20881: LD_INT 1
20883: PUSH
20884: LD_INT 2
20886: PUSH
20887: LD_INT 3
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: ST_TO_ADDR
20899: GO 21030
20901: LD_INT 1
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20971
20909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20910: LD_ADDR_VAR 0 3
20914: PUSH
20915: LD_INT 11
20917: PUSH
20918: LD_INT 12
20920: PUSH
20921: LD_INT 13
20923: PUSH
20924: LD_INT 14
20926: PUSH
20927: LD_INT 1
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: LD_INT 3
20935: PUSH
20936: LD_INT 4
20938: PUSH
20939: LD_INT 5
20941: PUSH
20942: LD_INT 21
20944: PUSH
20945: LD_INT 23
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_INT 24
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: ST_TO_ADDR
20969: GO 21030
20971: LD_INT 3
20973: DOUBLE
20974: EQUAL
20975: IFTRUE 20979
20977: GO 21029
20979: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20980: LD_ADDR_VAR 0 3
20984: PUSH
20985: LD_INT 13
20987: PUSH
20988: LD_INT 14
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: LD_INT 3
20996: PUSH
20997: LD_INT 4
20999: PUSH
21000: LD_INT 5
21002: PUSH
21003: LD_INT 21
21005: PUSH
21006: LD_INT 22
21008: PUSH
21009: LD_INT 23
21011: PUSH
21012: LD_INT 24
21014: PUSH
21015: EMPTY
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: ST_TO_ADDR
21027: GO 21030
21029: POP
// result := ( chassis in result ) ;
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_VAR 0 1
21039: PUSH
21040: LD_VAR 0 3
21044: IN
21045: ST_TO_ADDR
// end ;
21046: LD_VAR 0 3
21050: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
21051: LD_INT 0
21053: PPUSH
// if not chassis or not weapon then
21054: LD_VAR 0 1
21058: NOT
21059: IFTRUE 21068
21061: PUSH
21062: LD_VAR 0 2
21066: NOT
21067: OR
21068: IFFALSE 21072
// exit ;
21070: GO 22166
// case weapon of us_machine_gun :
21072: LD_VAR 0 2
21076: PUSH
21077: LD_INT 2
21079: DOUBLE
21080: EQUAL
21081: IFTRUE 21085
21083: GO 21115
21085: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21086: LD_ADDR_VAR 0 3
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: ST_TO_ADDR
21113: GO 22150
21115: LD_INT 3
21117: DOUBLE
21118: EQUAL
21119: IFTRUE 21123
21121: GO 21153
21123: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21124: LD_ADDR_VAR 0 3
21128: PUSH
21129: LD_INT 1
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 3
21137: PUSH
21138: LD_INT 4
21140: PUSH
21141: LD_INT 5
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: ST_TO_ADDR
21151: GO 22150
21153: LD_INT 11
21155: DOUBLE
21156: EQUAL
21157: IFTRUE 21161
21159: GO 21191
21161: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21162: LD_ADDR_VAR 0 3
21166: PUSH
21167: LD_INT 1
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 3
21175: PUSH
21176: LD_INT 4
21178: PUSH
21179: LD_INT 5
21181: PUSH
21182: EMPTY
21183: LIST
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 22150
21191: LD_INT 4
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21225
21199: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21200: LD_ADDR_VAR 0 3
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 3
21210: PUSH
21211: LD_INT 4
21213: PUSH
21214: LD_INT 5
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: ST_TO_ADDR
21223: GO 22150
21225: LD_INT 5
21227: DOUBLE
21228: EQUAL
21229: IFTRUE 21233
21231: GO 21259
21233: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21234: LD_ADDR_VAR 0 3
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: LD_INT 3
21244: PUSH
21245: LD_INT 4
21247: PUSH
21248: LD_INT 5
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: ST_TO_ADDR
21257: GO 22150
21259: LD_INT 9
21261: DOUBLE
21262: EQUAL
21263: IFTRUE 21267
21265: GO 21293
21267: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21268: LD_ADDR_VAR 0 3
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: LD_INT 3
21278: PUSH
21279: LD_INT 4
21281: PUSH
21282: LD_INT 5
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: ST_TO_ADDR
21291: GO 22150
21293: LD_INT 7
21295: DOUBLE
21296: EQUAL
21297: IFTRUE 21301
21299: GO 21327
21301: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21302: LD_ADDR_VAR 0 3
21306: PUSH
21307: LD_INT 2
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: LD_INT 4
21315: PUSH
21316: LD_INT 5
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: ST_TO_ADDR
21325: GO 22150
21327: LD_INT 12
21329: DOUBLE
21330: EQUAL
21331: IFTRUE 21335
21333: GO 21361
21335: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21336: LD_ADDR_VAR 0 3
21340: PUSH
21341: LD_INT 2
21343: PUSH
21344: LD_INT 3
21346: PUSH
21347: LD_INT 4
21349: PUSH
21350: LD_INT 5
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: ST_TO_ADDR
21359: GO 22150
21361: LD_INT 13
21363: DOUBLE
21364: EQUAL
21365: IFTRUE 21369
21367: GO 21395
21369: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21370: LD_ADDR_VAR 0 3
21374: PUSH
21375: LD_INT 2
21377: PUSH
21378: LD_INT 3
21380: PUSH
21381: LD_INT 4
21383: PUSH
21384: LD_INT 5
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 22150
21395: LD_INT 14
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21421
21403: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21404: LD_ADDR_VAR 0 3
21408: PUSH
21409: LD_INT 4
21411: PUSH
21412: LD_INT 5
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: ST_TO_ADDR
21419: GO 22150
21421: LD_INT 6
21423: DOUBLE
21424: EQUAL
21425: IFTRUE 21429
21427: GO 21447
21429: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_INT 4
21437: PUSH
21438: LD_INT 5
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: ST_TO_ADDR
21445: GO 22150
21447: LD_INT 10
21449: DOUBLE
21450: EQUAL
21451: IFTRUE 21455
21453: GO 21473
21455: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21456: LD_ADDR_VAR 0 3
21460: PUSH
21461: LD_INT 4
21463: PUSH
21464: LD_INT 5
21466: PUSH
21467: EMPTY
21468: LIST
21469: LIST
21470: ST_TO_ADDR
21471: GO 22150
21473: LD_INT 22
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21507
21481: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21482: LD_ADDR_VAR 0 3
21486: PUSH
21487: LD_INT 11
21489: PUSH
21490: LD_INT 12
21492: PUSH
21493: LD_INT 13
21495: PUSH
21496: LD_INT 14
21498: PUSH
21499: EMPTY
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: ST_TO_ADDR
21505: GO 22150
21507: LD_INT 23
21509: DOUBLE
21510: EQUAL
21511: IFTRUE 21515
21513: GO 21541
21515: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21516: LD_ADDR_VAR 0 3
21520: PUSH
21521: LD_INT 11
21523: PUSH
21524: LD_INT 12
21526: PUSH
21527: LD_INT 13
21529: PUSH
21530: LD_INT 14
21532: PUSH
21533: EMPTY
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: ST_TO_ADDR
21539: GO 22150
21541: LD_INT 24
21543: DOUBLE
21544: EQUAL
21545: IFTRUE 21549
21547: GO 21575
21549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21550: LD_ADDR_VAR 0 3
21554: PUSH
21555: LD_INT 11
21557: PUSH
21558: LD_INT 12
21560: PUSH
21561: LD_INT 13
21563: PUSH
21564: LD_INT 14
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: ST_TO_ADDR
21573: GO 22150
21575: LD_INT 30
21577: DOUBLE
21578: EQUAL
21579: IFTRUE 21583
21581: GO 21609
21583: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21584: LD_ADDR_VAR 0 3
21588: PUSH
21589: LD_INT 11
21591: PUSH
21592: LD_INT 12
21594: PUSH
21595: LD_INT 13
21597: PUSH
21598: LD_INT 14
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: ST_TO_ADDR
21607: GO 22150
21609: LD_INT 25
21611: DOUBLE
21612: EQUAL
21613: IFTRUE 21617
21615: GO 21635
21617: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21618: LD_ADDR_VAR 0 3
21622: PUSH
21623: LD_INT 13
21625: PUSH
21626: LD_INT 14
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: ST_TO_ADDR
21633: GO 22150
21635: LD_INT 27
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21661
21643: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21644: LD_ADDR_VAR 0 3
21648: PUSH
21649: LD_INT 13
21651: PUSH
21652: LD_INT 14
21654: PUSH
21655: EMPTY
21656: LIST
21657: LIST
21658: ST_TO_ADDR
21659: GO 22150
21661: LD_INT 92
21663: DOUBLE
21664: EQUAL
21665: IFTRUE 21669
21667: GO 21695
21669: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21670: LD_ADDR_VAR 0 3
21674: PUSH
21675: LD_INT 11
21677: PUSH
21678: LD_INT 12
21680: PUSH
21681: LD_INT 13
21683: PUSH
21684: LD_INT 14
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: ST_TO_ADDR
21693: GO 22150
21695: LD_INT 28
21697: DOUBLE
21698: EQUAL
21699: IFTRUE 21703
21701: GO 21721
21703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21704: LD_ADDR_VAR 0 3
21708: PUSH
21709: LD_INT 13
21711: PUSH
21712: LD_INT 14
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: ST_TO_ADDR
21719: GO 22150
21721: LD_INT 29
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21747
21729: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21730: LD_ADDR_VAR 0 3
21734: PUSH
21735: LD_INT 13
21737: PUSH
21738: LD_INT 14
21740: PUSH
21741: EMPTY
21742: LIST
21743: LIST
21744: ST_TO_ADDR
21745: GO 22150
21747: LD_INT 31
21749: DOUBLE
21750: EQUAL
21751: IFTRUE 21755
21753: GO 21773
21755: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21756: LD_ADDR_VAR 0 3
21760: PUSH
21761: LD_INT 13
21763: PUSH
21764: LD_INT 14
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: ST_TO_ADDR
21771: GO 22150
21773: LD_INT 26
21775: DOUBLE
21776: EQUAL
21777: IFTRUE 21781
21779: GO 21799
21781: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21782: LD_ADDR_VAR 0 3
21786: PUSH
21787: LD_INT 13
21789: PUSH
21790: LD_INT 14
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: ST_TO_ADDR
21797: GO 22150
21799: LD_INT 42
21801: DOUBLE
21802: EQUAL
21803: IFTRUE 21807
21805: GO 21833
21807: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21808: LD_ADDR_VAR 0 3
21812: PUSH
21813: LD_INT 21
21815: PUSH
21816: LD_INT 22
21818: PUSH
21819: LD_INT 23
21821: PUSH
21822: LD_INT 24
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: ST_TO_ADDR
21831: GO 22150
21833: LD_INT 43
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 21867
21841: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_INT 21
21849: PUSH
21850: LD_INT 22
21852: PUSH
21853: LD_INT 23
21855: PUSH
21856: LD_INT 24
21858: PUSH
21859: EMPTY
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: ST_TO_ADDR
21865: GO 22150
21867: LD_INT 44
21869: DOUBLE
21870: EQUAL
21871: IFTRUE 21875
21873: GO 21901
21875: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21876: LD_ADDR_VAR 0 3
21880: PUSH
21881: LD_INT 21
21883: PUSH
21884: LD_INT 22
21886: PUSH
21887: LD_INT 23
21889: PUSH
21890: LD_INT 24
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: ST_TO_ADDR
21899: GO 22150
21901: LD_INT 45
21903: DOUBLE
21904: EQUAL
21905: IFTRUE 21909
21907: GO 21935
21909: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21910: LD_ADDR_VAR 0 3
21914: PUSH
21915: LD_INT 21
21917: PUSH
21918: LD_INT 22
21920: PUSH
21921: LD_INT 23
21923: PUSH
21924: LD_INT 24
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: ST_TO_ADDR
21933: GO 22150
21935: LD_INT 49
21937: DOUBLE
21938: EQUAL
21939: IFTRUE 21943
21941: GO 21969
21943: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21944: LD_ADDR_VAR 0 3
21948: PUSH
21949: LD_INT 21
21951: PUSH
21952: LD_INT 22
21954: PUSH
21955: LD_INT 23
21957: PUSH
21958: LD_INT 24
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: ST_TO_ADDR
21967: GO 22150
21969: LD_INT 51
21971: DOUBLE
21972: EQUAL
21973: IFTRUE 21977
21975: GO 22003
21977: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21978: LD_ADDR_VAR 0 3
21982: PUSH
21983: LD_INT 21
21985: PUSH
21986: LD_INT 22
21988: PUSH
21989: LD_INT 23
21991: PUSH
21992: LD_INT 24
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: ST_TO_ADDR
22001: GO 22150
22003: LD_INT 52
22005: DOUBLE
22006: EQUAL
22007: IFTRUE 22011
22009: GO 22037
22011: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_INT 21
22019: PUSH
22020: LD_INT 22
22022: PUSH
22023: LD_INT 23
22025: PUSH
22026: LD_INT 24
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: ST_TO_ADDR
22035: GO 22150
22037: LD_INT 53
22039: DOUBLE
22040: EQUAL
22041: IFTRUE 22045
22043: GO 22063
22045: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
22046: LD_ADDR_VAR 0 3
22050: PUSH
22051: LD_INT 23
22053: PUSH
22054: LD_INT 24
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: ST_TO_ADDR
22061: GO 22150
22063: LD_INT 46
22065: DOUBLE
22066: EQUAL
22067: IFTRUE 22071
22069: GO 22089
22071: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
22072: LD_ADDR_VAR 0 3
22076: PUSH
22077: LD_INT 23
22079: PUSH
22080: LD_INT 24
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: ST_TO_ADDR
22087: GO 22150
22089: LD_INT 47
22091: DOUBLE
22092: EQUAL
22093: IFTRUE 22097
22095: GO 22115
22097: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: LD_INT 23
22105: PUSH
22106: LD_INT 24
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: ST_TO_ADDR
22113: GO 22150
22115: LD_INT 98
22117: DOUBLE
22118: EQUAL
22119: IFTRUE 22123
22121: GO 22149
22123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22124: LD_ADDR_VAR 0 3
22128: PUSH
22129: LD_INT 21
22131: PUSH
22132: LD_INT 22
22134: PUSH
22135: LD_INT 23
22137: PUSH
22138: LD_INT 24
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: ST_TO_ADDR
22147: GO 22150
22149: POP
// result := ( chassis in result ) ;
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: LD_VAR 0 1
22159: PUSH
22160: LD_VAR 0 3
22164: IN
22165: ST_TO_ADDR
// end ;
22166: LD_VAR 0 3
22170: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22171: LD_INT 0
22173: PPUSH
22174: PPUSH
22175: PPUSH
22176: PPUSH
22177: PPUSH
22178: PPUSH
22179: PPUSH
// result := array ;
22180: LD_ADDR_VAR 0 5
22184: PUSH
22185: LD_VAR 0 1
22189: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22190: LD_VAR 0 1
22194: NOT
22195: IFTRUE 22204
22197: PUSH
22198: LD_VAR 0 2
22202: NOT
22203: OR
22204: IFTRUE 22213
22206: PUSH
22207: LD_VAR 0 3
22211: NOT
22212: OR
22213: IFTRUE 22227
22215: PUSH
22216: LD_VAR 0 2
22220: PUSH
22221: LD_VAR 0 1
22225: GREATER
22226: OR
22227: IFTRUE 22241
22229: PUSH
22230: LD_VAR 0 3
22234: PUSH
22235: LD_VAR 0 1
22239: GREATER
22240: OR
22241: IFFALSE 22245
// exit ;
22243: GO 22541
// if direction then
22245: LD_VAR 0 4
22249: IFFALSE 22313
// begin d := 1 ;
22251: LD_ADDR_VAR 0 9
22255: PUSH
22256: LD_INT 1
22258: ST_TO_ADDR
// if i_from > i_to then
22259: LD_VAR 0 2
22263: PUSH
22264: LD_VAR 0 3
22268: GREATER
22269: IFFALSE 22295
// length := ( array - i_from ) + i_to else
22271: LD_ADDR_VAR 0 11
22275: PUSH
22276: LD_VAR 0 1
22280: PUSH
22281: LD_VAR 0 2
22285: MINUS
22286: PUSH
22287: LD_VAR 0 3
22291: PLUS
22292: ST_TO_ADDR
22293: GO 22311
// length := i_to - i_from ;
22295: LD_ADDR_VAR 0 11
22299: PUSH
22300: LD_VAR 0 3
22304: PUSH
22305: LD_VAR 0 2
22309: MINUS
22310: ST_TO_ADDR
// end else
22311: GO 22374
// begin d := - 1 ;
22313: LD_ADDR_VAR 0 9
22317: PUSH
22318: LD_INT 1
22320: NEG
22321: ST_TO_ADDR
// if i_from > i_to then
22322: LD_VAR 0 2
22326: PUSH
22327: LD_VAR 0 3
22331: GREATER
22332: IFFALSE 22352
// length := i_from - i_to else
22334: LD_ADDR_VAR 0 11
22338: PUSH
22339: LD_VAR 0 2
22343: PUSH
22344: LD_VAR 0 3
22348: MINUS
22349: ST_TO_ADDR
22350: GO 22374
// length := ( array - i_to ) + i_from ;
22352: LD_ADDR_VAR 0 11
22356: PUSH
22357: LD_VAR 0 1
22361: PUSH
22362: LD_VAR 0 3
22366: MINUS
22367: PUSH
22368: LD_VAR 0 2
22372: PLUS
22373: ST_TO_ADDR
// end ; if not length then
22374: LD_VAR 0 11
22378: NOT
22379: IFFALSE 22383
// exit ;
22381: GO 22541
// tmp := array ;
22383: LD_ADDR_VAR 0 10
22387: PUSH
22388: LD_VAR 0 1
22392: ST_TO_ADDR
// for i = 1 to length do
22393: LD_ADDR_VAR 0 6
22397: PUSH
22398: DOUBLE
22399: LD_INT 1
22401: DEC
22402: ST_TO_ADDR
22403: LD_VAR 0 11
22407: PUSH
22408: FOR_TO
22409: IFFALSE 22529
// begin for j = 1 to array do
22411: LD_ADDR_VAR 0 7
22415: PUSH
22416: DOUBLE
22417: LD_INT 1
22419: DEC
22420: ST_TO_ADDR
22421: LD_VAR 0 1
22425: PUSH
22426: FOR_TO
22427: IFFALSE 22515
// begin k := j + d ;
22429: LD_ADDR_VAR 0 8
22433: PUSH
22434: LD_VAR 0 7
22438: PUSH
22439: LD_VAR 0 9
22443: PLUS
22444: ST_TO_ADDR
// if k > array then
22445: LD_VAR 0 8
22449: PUSH
22450: LD_VAR 0 1
22454: GREATER
22455: IFFALSE 22465
// k := 1 ;
22457: LD_ADDR_VAR 0 8
22461: PUSH
22462: LD_INT 1
22464: ST_TO_ADDR
// if not k then
22465: LD_VAR 0 8
22469: NOT
22470: IFFALSE 22482
// k := array ;
22472: LD_ADDR_VAR 0 8
22476: PUSH
22477: LD_VAR 0 1
22481: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22482: LD_ADDR_VAR 0 10
22486: PUSH
22487: LD_VAR 0 10
22491: PPUSH
22492: LD_VAR 0 8
22496: PPUSH
22497: LD_VAR 0 1
22501: PUSH
22502: LD_VAR 0 7
22506: ARRAY
22507: PPUSH
22508: CALL_OW 1
22512: ST_TO_ADDR
// end ;
22513: GO 22426
22515: POP
22516: POP
// array := tmp ;
22517: LD_ADDR_VAR 0 1
22521: PUSH
22522: LD_VAR 0 10
22526: ST_TO_ADDR
// end ;
22527: GO 22408
22529: POP
22530: POP
// result := array ;
22531: LD_ADDR_VAR 0 5
22535: PUSH
22536: LD_VAR 0 1
22540: ST_TO_ADDR
// end ;
22541: LD_VAR 0 5
22545: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22546: LD_INT 0
22548: PPUSH
22549: PPUSH
// result := 0 ;
22550: LD_ADDR_VAR 0 3
22554: PUSH
22555: LD_INT 0
22557: ST_TO_ADDR
// if not array or not value in array then
22558: LD_VAR 0 1
22562: NOT
22563: IFTRUE 22578
22565: PUSH
22566: LD_VAR 0 2
22570: PUSH
22571: LD_VAR 0 1
22575: IN
22576: NOT
22577: OR
22578: IFFALSE 22582
// exit ;
22580: GO 22636
// for i = 1 to array do
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: DOUBLE
22588: LD_INT 1
22590: DEC
22591: ST_TO_ADDR
22592: LD_VAR 0 1
22596: PUSH
22597: FOR_TO
22598: IFFALSE 22634
// if value = array [ i ] then
22600: LD_VAR 0 2
22604: PUSH
22605: LD_VAR 0 1
22609: PUSH
22610: LD_VAR 0 4
22614: ARRAY
22615: EQUAL
22616: IFFALSE 22632
// begin result := i ;
22618: LD_ADDR_VAR 0 3
22622: PUSH
22623: LD_VAR 0 4
22627: ST_TO_ADDR
// exit ;
22628: POP
22629: POP
22630: GO 22636
// end ;
22632: GO 22597
22634: POP
22635: POP
// end ;
22636: LD_VAR 0 3
22640: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22641: LD_INT 0
22643: PPUSH
// vc_chassis := chassis ;
22644: LD_ADDR_OWVAR 37
22648: PUSH
22649: LD_VAR 0 1
22653: ST_TO_ADDR
// vc_engine := engine ;
22654: LD_ADDR_OWVAR 39
22658: PUSH
22659: LD_VAR 0 2
22663: ST_TO_ADDR
// vc_control := control ;
22664: LD_ADDR_OWVAR 38
22668: PUSH
22669: LD_VAR 0 3
22673: ST_TO_ADDR
// vc_weapon := weapon ;
22674: LD_ADDR_OWVAR 40
22678: PUSH
22679: LD_VAR 0 4
22683: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22684: LD_ADDR_OWVAR 41
22688: PUSH
22689: LD_VAR 0 5
22693: ST_TO_ADDR
// end ;
22694: LD_VAR 0 6
22698: RET
// export function WantPlant ( unit ) ; var task ; begin
22699: LD_INT 0
22701: PPUSH
22702: PPUSH
// result := false ;
22703: LD_ADDR_VAR 0 2
22707: PUSH
22708: LD_INT 0
22710: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22711: LD_ADDR_VAR 0 3
22715: PUSH
22716: LD_VAR 0 1
22720: PPUSH
22721: CALL_OW 437
22725: ST_TO_ADDR
// if task then
22726: LD_VAR 0 3
22730: IFFALSE 22758
// if task [ 1 ] [ 1 ] = p then
22732: LD_VAR 0 3
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PUSH
22741: LD_INT 1
22743: ARRAY
22744: PUSH
22745: LD_STRING p
22747: EQUAL
22748: IFFALSE 22758
// result := true ;
22750: LD_ADDR_VAR 0 2
22754: PUSH
22755: LD_INT 1
22757: ST_TO_ADDR
// end ;
22758: LD_VAR 0 2
22762: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22763: LD_INT 0
22765: PPUSH
22766: PPUSH
22767: PPUSH
22768: PPUSH
// if pos < 1 then
22769: LD_VAR 0 2
22773: PUSH
22774: LD_INT 1
22776: LESS
22777: IFFALSE 22781
// exit ;
22779: GO 23084
// if pos = 1 then
22781: LD_VAR 0 2
22785: PUSH
22786: LD_INT 1
22788: EQUAL
22789: IFFALSE 22822
// result := Replace ( arr , pos [ 1 ] , value ) else
22791: LD_ADDR_VAR 0 4
22795: PUSH
22796: LD_VAR 0 1
22800: PPUSH
22801: LD_VAR 0 2
22805: PUSH
22806: LD_INT 1
22808: ARRAY
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: CALL_OW 1
22819: ST_TO_ADDR
22820: GO 23084
// begin tmp := arr ;
22822: LD_ADDR_VAR 0 6
22826: PUSH
22827: LD_VAR 0 1
22831: ST_TO_ADDR
// s_arr := [ tmp ] ;
22832: LD_ADDR_VAR 0 7
22836: PUSH
22837: LD_VAR 0 6
22841: PUSH
22842: EMPTY
22843: LIST
22844: ST_TO_ADDR
// for i = 1 to pos - 1 do
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: DOUBLE
22851: LD_INT 1
22853: DEC
22854: ST_TO_ADDR
22855: LD_VAR 0 2
22859: PUSH
22860: LD_INT 1
22862: MINUS
22863: PUSH
22864: FOR_TO
22865: IFFALSE 22910
// begin tmp := tmp [ pos [ i ] ] ;
22867: LD_ADDR_VAR 0 6
22871: PUSH
22872: LD_VAR 0 6
22876: PUSH
22877: LD_VAR 0 2
22881: PUSH
22882: LD_VAR 0 5
22886: ARRAY
22887: ARRAY
22888: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22889: LD_ADDR_VAR 0 7
22893: PUSH
22894: LD_VAR 0 7
22898: PUSH
22899: LD_VAR 0 6
22903: PUSH
22904: EMPTY
22905: LIST
22906: ADD
22907: ST_TO_ADDR
// end ;
22908: GO 22864
22910: POP
22911: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22912: LD_ADDR_VAR 0 6
22916: PUSH
22917: LD_VAR 0 6
22921: PPUSH
22922: LD_VAR 0 2
22926: PUSH
22927: LD_VAR 0 2
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 3
22937: PPUSH
22938: CALL_OW 1
22942: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22943: LD_ADDR_VAR 0 7
22947: PUSH
22948: LD_VAR 0 7
22952: PPUSH
22953: LD_VAR 0 7
22957: PPUSH
22958: LD_VAR 0 6
22962: PPUSH
22963: CALL_OW 1
22967: ST_TO_ADDR
// for i = s_arr downto 2 do
22968: LD_ADDR_VAR 0 5
22972: PUSH
22973: DOUBLE
22974: LD_VAR 0 7
22978: INC
22979: ST_TO_ADDR
22980: LD_INT 2
22982: PUSH
22983: FOR_DOWNTO
22984: IFFALSE 23068
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22986: LD_ADDR_VAR 0 6
22990: PUSH
22991: LD_VAR 0 7
22995: PUSH
22996: LD_VAR 0 5
23000: PUSH
23001: LD_INT 1
23003: MINUS
23004: ARRAY
23005: PPUSH
23006: LD_VAR 0 2
23010: PUSH
23011: LD_VAR 0 5
23015: PUSH
23016: LD_INT 1
23018: MINUS
23019: ARRAY
23020: PPUSH
23021: LD_VAR 0 7
23025: PUSH
23026: LD_VAR 0 5
23030: ARRAY
23031: PPUSH
23032: CALL_OW 1
23036: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
23037: LD_ADDR_VAR 0 7
23041: PUSH
23042: LD_VAR 0 7
23046: PPUSH
23047: LD_VAR 0 5
23051: PUSH
23052: LD_INT 1
23054: MINUS
23055: PPUSH
23056: LD_VAR 0 6
23060: PPUSH
23061: CALL_OW 1
23065: ST_TO_ADDR
// end ;
23066: GO 22983
23068: POP
23069: POP
// result := s_arr [ 1 ] ;
23070: LD_ADDR_VAR 0 4
23074: PUSH
23075: LD_VAR 0 7
23079: PUSH
23080: LD_INT 1
23082: ARRAY
23083: ST_TO_ADDR
// end ; end ;
23084: LD_VAR 0 4
23088: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
// if not list then
23093: LD_VAR 0 1
23097: NOT
23098: IFFALSE 23102
// exit ;
23100: GO 23193
// i := list [ pos1 ] ;
23102: LD_ADDR_VAR 0 5
23106: PUSH
23107: LD_VAR 0 1
23111: PUSH
23112: LD_VAR 0 2
23116: ARRAY
23117: ST_TO_ADDR
// if not i then
23118: LD_VAR 0 5
23122: NOT
23123: IFFALSE 23127
// exit ;
23125: GO 23193
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23127: LD_ADDR_VAR 0 1
23131: PUSH
23132: LD_VAR 0 1
23136: PPUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: LD_VAR 0 1
23146: PUSH
23147: LD_VAR 0 3
23151: ARRAY
23152: PPUSH
23153: CALL_OW 1
23157: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23158: LD_ADDR_VAR 0 1
23162: PUSH
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_VAR 0 3
23172: PPUSH
23173: LD_VAR 0 5
23177: PPUSH
23178: CALL_OW 1
23182: ST_TO_ADDR
// result := list ;
23183: LD_ADDR_VAR 0 4
23187: PUSH
23188: LD_VAR 0 1
23192: ST_TO_ADDR
// end ;
23193: LD_VAR 0 4
23197: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23198: LD_INT 0
23200: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23201: LD_ADDR_VAR 0 5
23205: PUSH
23206: LD_VAR 0 1
23210: PPUSH
23211: CALL_OW 250
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 251
23225: PPUSH
23226: LD_VAR 0 2
23230: PPUSH
23231: LD_VAR 0 3
23235: PPUSH
23236: LD_VAR 0 4
23240: PPUSH
23241: CALL 23623 0 5
23245: ST_TO_ADDR
// end ;
23246: LD_VAR 0 5
23250: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23251: LD_INT 0
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
// if not list or not unit then
23257: LD_VAR 0 2
23261: NOT
23262: IFTRUE 23271
23264: PUSH
23265: LD_VAR 0 1
23269: NOT
23270: OR
23271: IFFALSE 23275
// exit ;
23273: GO 23618
// result := [ ] ;
23275: LD_ADDR_VAR 0 5
23279: PUSH
23280: EMPTY
23281: ST_TO_ADDR
// for i in list do
23282: LD_ADDR_VAR 0 6
23286: PUSH
23287: LD_VAR 0 2
23291: PUSH
23292: FOR_IN
23293: IFFALSE 23511
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23295: LD_ADDR_VAR 0 8
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: LD_VAR 0 6
23309: PUSH
23310: LD_INT 1
23312: ARRAY
23313: PPUSH
23314: LD_VAR 0 6
23318: PUSH
23319: LD_INT 2
23321: ARRAY
23322: PPUSH
23323: CALL_OW 297
23327: ST_TO_ADDR
// if not Count ( result ) then
23328: LD_VAR 0 5
23332: PPUSH
23333: CALL 19845 0 1
23337: NOT
23338: IFFALSE 23371
// begin result := Join ( result , [ i , tmp ] ) ;
23340: LD_ADDR_VAR 0 5
23344: PUSH
23345: LD_VAR 0 5
23349: PPUSH
23350: LD_VAR 0 6
23354: PUSH
23355: LD_VAR 0 8
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL 55821 0 2
23368: ST_TO_ADDR
// continue ;
23369: GO 23292
// end ; if result [ result ] [ 2 ] <= tmp then
23371: LD_VAR 0 5
23375: PUSH
23376: LD_VAR 0 5
23380: ARRAY
23381: PUSH
23382: LD_INT 2
23384: ARRAY
23385: PUSH
23386: LD_VAR 0 8
23390: LESSEQUAL
23391: IFFALSE 23424
// result := Join ( result , [ i , tmp ] ) else
23393: LD_ADDR_VAR 0 5
23397: PUSH
23398: LD_VAR 0 5
23402: PPUSH
23403: LD_VAR 0 6
23407: PUSH
23408: LD_VAR 0 8
23412: PUSH
23413: EMPTY
23414: LIST
23415: LIST
23416: PPUSH
23417: CALL 55821 0 2
23421: ST_TO_ADDR
23422: GO 23509
// begin for j := 1 to Count ( result ) do
23424: LD_ADDR_VAR 0 7
23428: PUSH
23429: DOUBLE
23430: LD_INT 1
23432: DEC
23433: ST_TO_ADDR
23434: LD_VAR 0 5
23438: PPUSH
23439: CALL 19845 0 1
23443: PUSH
23444: FOR_TO
23445: IFFALSE 23507
// begin if tmp < result [ j ] [ 2 ] then
23447: LD_VAR 0 8
23451: PUSH
23452: LD_VAR 0 5
23456: PUSH
23457: LD_VAR 0 7
23461: ARRAY
23462: PUSH
23463: LD_INT 2
23465: ARRAY
23466: LESS
23467: IFFALSE 23505
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23469: LD_ADDR_VAR 0 5
23473: PUSH
23474: LD_VAR 0 5
23478: PPUSH
23479: LD_VAR 0 7
23483: PPUSH
23484: LD_VAR 0 6
23488: PUSH
23489: LD_VAR 0 8
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 2
23502: ST_TO_ADDR
// break ;
23503: GO 23507
// end ; end ;
23505: GO 23444
23507: POP
23508: POP
// end ; end ;
23509: GO 23292
23511: POP
23512: POP
// if result and not asc then
23513: LD_VAR 0 5
23517: IFFALSE 23526
23519: PUSH
23520: LD_VAR 0 3
23524: NOT
23525: AND
23526: IFFALSE 23543
// result := ReverseArray ( result ) ;
23528: LD_ADDR_VAR 0 5
23532: PUSH
23533: LD_VAR 0 5
23537: PPUSH
23538: CALL 50901 0 1
23542: ST_TO_ADDR
// tmp := [ ] ;
23543: LD_ADDR_VAR 0 8
23547: PUSH
23548: EMPTY
23549: ST_TO_ADDR
// if mode then
23550: LD_VAR 0 4
23554: IFFALSE 23618
// begin for i := 1 to result do
23556: LD_ADDR_VAR 0 6
23560: PUSH
23561: DOUBLE
23562: LD_INT 1
23564: DEC
23565: ST_TO_ADDR
23566: LD_VAR 0 5
23570: PUSH
23571: FOR_TO
23572: IFFALSE 23606
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23574: LD_ADDR_VAR 0 8
23578: PUSH
23579: LD_VAR 0 8
23583: PPUSH
23584: LD_VAR 0 5
23588: PUSH
23589: LD_VAR 0 6
23593: ARRAY
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: PPUSH
23599: CALL 55821 0 2
23603: ST_TO_ADDR
23604: GO 23571
23606: POP
23607: POP
// result := tmp ;
23608: LD_ADDR_VAR 0 5
23612: PUSH
23613: LD_VAR 0 8
23617: ST_TO_ADDR
// end ; end ;
23618: LD_VAR 0 5
23622: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23623: LD_INT 0
23625: PPUSH
23626: PPUSH
23627: PPUSH
23628: PPUSH
// if not list then
23629: LD_VAR 0 3
23633: NOT
23634: IFFALSE 23638
// exit ;
23636: GO 24028
// result := [ ] ;
23638: LD_ADDR_VAR 0 6
23642: PUSH
23643: EMPTY
23644: ST_TO_ADDR
// for i in list do
23645: LD_ADDR_VAR 0 7
23649: PUSH
23650: LD_VAR 0 3
23654: PUSH
23655: FOR_IN
23656: IFFALSE 23858
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23658: LD_ADDR_VAR 0 9
23662: PUSH
23663: LD_VAR 0 7
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: CALL_OW 297
23682: ST_TO_ADDR
// if not result then
23683: LD_VAR 0 6
23687: NOT
23688: IFFALSE 23714
// result := [ [ i , tmp ] ] else
23690: LD_ADDR_VAR 0 6
23694: PUSH
23695: LD_VAR 0 7
23699: PUSH
23700: LD_VAR 0 9
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: EMPTY
23710: LIST
23711: ST_TO_ADDR
23712: GO 23856
// begin if result [ result ] [ 2 ] <= tmp then
23714: LD_VAR 0 6
23718: PUSH
23719: LD_VAR 0 6
23723: ARRAY
23724: PUSH
23725: LD_INT 2
23727: ARRAY
23728: PUSH
23729: LD_VAR 0 9
23733: LESSEQUAL
23734: IFFALSE 23776
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23736: LD_ADDR_VAR 0 6
23740: PUSH
23741: LD_VAR 0 6
23745: PPUSH
23746: LD_VAR 0 6
23750: PUSH
23751: LD_INT 1
23753: PLUS
23754: PPUSH
23755: LD_VAR 0 7
23759: PUSH
23760: LD_VAR 0 9
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 2
23773: ST_TO_ADDR
23774: GO 23856
// for j := 1 to result do
23776: LD_ADDR_VAR 0 8
23780: PUSH
23781: DOUBLE
23782: LD_INT 1
23784: DEC
23785: ST_TO_ADDR
23786: LD_VAR 0 6
23790: PUSH
23791: FOR_TO
23792: IFFALSE 23854
// begin if tmp < result [ j ] [ 2 ] then
23794: LD_VAR 0 9
23798: PUSH
23799: LD_VAR 0 6
23803: PUSH
23804: LD_VAR 0 8
23808: ARRAY
23809: PUSH
23810: LD_INT 2
23812: ARRAY
23813: LESS
23814: IFFALSE 23852
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23816: LD_ADDR_VAR 0 6
23820: PUSH
23821: LD_VAR 0 6
23825: PPUSH
23826: LD_VAR 0 8
23830: PPUSH
23831: LD_VAR 0 7
23835: PUSH
23836: LD_VAR 0 9
23840: PUSH
23841: EMPTY
23842: LIST
23843: LIST
23844: PPUSH
23845: CALL_OW 2
23849: ST_TO_ADDR
// break ;
23850: GO 23854
// end ; end ;
23852: GO 23791
23854: POP
23855: POP
// end ; end ;
23856: GO 23655
23858: POP
23859: POP
// if result and not asc then
23860: LD_VAR 0 6
23864: IFFALSE 23873
23866: PUSH
23867: LD_VAR 0 4
23871: NOT
23872: AND
23873: IFFALSE 23948
// begin tmp := result ;
23875: LD_ADDR_VAR 0 9
23879: PUSH
23880: LD_VAR 0 6
23884: ST_TO_ADDR
// for i = tmp downto 1 do
23885: LD_ADDR_VAR 0 7
23889: PUSH
23890: DOUBLE
23891: LD_VAR 0 9
23895: INC
23896: ST_TO_ADDR
23897: LD_INT 1
23899: PUSH
23900: FOR_DOWNTO
23901: IFFALSE 23946
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23903: LD_ADDR_VAR 0 6
23907: PUSH
23908: LD_VAR 0 6
23912: PPUSH
23913: LD_VAR 0 9
23917: PUSH
23918: LD_VAR 0 7
23922: MINUS
23923: PUSH
23924: LD_INT 1
23926: PLUS
23927: PPUSH
23928: LD_VAR 0 9
23932: PUSH
23933: LD_VAR 0 7
23937: ARRAY
23938: PPUSH
23939: CALL_OW 1
23943: ST_TO_ADDR
23944: GO 23900
23946: POP
23947: POP
// end ; tmp := [ ] ;
23948: LD_ADDR_VAR 0 9
23952: PUSH
23953: EMPTY
23954: ST_TO_ADDR
// if mode then
23955: LD_VAR 0 5
23959: IFFALSE 24028
// begin for i = 1 to result do
23961: LD_ADDR_VAR 0 7
23965: PUSH
23966: DOUBLE
23967: LD_INT 1
23969: DEC
23970: ST_TO_ADDR
23971: LD_VAR 0 6
23975: PUSH
23976: FOR_TO
23977: IFFALSE 24016
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23979: LD_ADDR_VAR 0 9
23983: PUSH
23984: LD_VAR 0 9
23988: PPUSH
23989: LD_VAR 0 7
23993: PPUSH
23994: LD_VAR 0 6
23998: PUSH
23999: LD_VAR 0 7
24003: ARRAY
24004: PUSH
24005: LD_INT 1
24007: ARRAY
24008: PPUSH
24009: CALL_OW 1
24013: ST_TO_ADDR
24014: GO 23976
24016: POP
24017: POP
// result := tmp ;
24018: LD_ADDR_VAR 0 6
24022: PUSH
24023: LD_VAR 0 9
24027: ST_TO_ADDR
// end ; end ;
24028: LD_VAR 0 6
24032: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
24033: LD_INT 0
24035: PPUSH
24036: PPUSH
24037: PPUSH
24038: PPUSH
24039: PPUSH
24040: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
24041: LD_ADDR_VAR 0 5
24045: PUSH
24046: LD_INT 0
24048: PUSH
24049: LD_INT 0
24051: PUSH
24052: LD_INT 0
24054: PUSH
24055: EMPTY
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: ST_TO_ADDR
// if not x or not y then
24063: LD_VAR 0 2
24067: NOT
24068: IFTRUE 24077
24070: PUSH
24071: LD_VAR 0 3
24075: NOT
24076: OR
24077: IFFALSE 24081
// exit ;
24079: GO 25737
// if not range then
24081: LD_VAR 0 4
24085: NOT
24086: IFFALSE 24096
// range := 10 ;
24088: LD_ADDR_VAR 0 4
24092: PUSH
24093: LD_INT 10
24095: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24096: LD_ADDR_VAR 0 8
24100: PUSH
24101: LD_INT 81
24103: PUSH
24104: LD_VAR 0 1
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 92
24115: PUSH
24116: LD_VAR 0 2
24120: PUSH
24121: LD_VAR 0 3
24125: PUSH
24126: LD_VAR 0 4
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: LD_INT 3
24139: PUSH
24140: LD_INT 21
24142: PUSH
24143: LD_INT 3
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: ST_TO_ADDR
// if not tmp then
24164: LD_VAR 0 8
24168: NOT
24169: IFFALSE 24173
// exit ;
24171: GO 25737
// for i in tmp do
24173: LD_ADDR_VAR 0 6
24177: PUSH
24178: LD_VAR 0 8
24182: PUSH
24183: FOR_IN
24184: IFFALSE 25712
// begin points := [ 0 , 0 , 0 ] ;
24186: LD_ADDR_VAR 0 9
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: LD_INT 0
24196: PUSH
24197: LD_INT 0
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: LIST
24204: ST_TO_ADDR
// bpoints := 1 ;
24205: LD_ADDR_VAR 0 10
24209: PUSH
24210: LD_INT 1
24212: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24213: LD_VAR 0 6
24217: PPUSH
24218: CALL_OW 247
24222: PUSH
24223: LD_INT 1
24225: DOUBLE
24226: EQUAL
24227: IFTRUE 24231
24229: GO 24813
24231: POP
// begin if GetClass ( i ) = 1 then
24232: LD_VAR 0 6
24236: PPUSH
24237: CALL_OW 257
24241: PUSH
24242: LD_INT 1
24244: EQUAL
24245: IFFALSE 24266
// points := [ 10 , 5 , 3 ] ;
24247: LD_ADDR_VAR 0 9
24251: PUSH
24252: LD_INT 10
24254: PUSH
24255: LD_INT 5
24257: PUSH
24258: LD_INT 3
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24266: LD_VAR 0 6
24270: PPUSH
24271: CALL_OW 257
24275: PUSH
24276: LD_INT 2
24278: PUSH
24279: LD_INT 3
24281: PUSH
24282: LD_INT 4
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: IN
24290: IFFALSE 24311
// points := [ 3 , 2 , 1 ] ;
24292: LD_ADDR_VAR 0 9
24296: PUSH
24297: LD_INT 3
24299: PUSH
24300: LD_INT 2
24302: PUSH
24303: LD_INT 1
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 257
24320: PUSH
24321: LD_INT 5
24323: EQUAL
24324: IFFALSE 24345
// points := [ 130 , 5 , 2 ] ;
24326: LD_ADDR_VAR 0 9
24330: PUSH
24331: LD_INT 130
24333: PUSH
24334: LD_INT 5
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24345: LD_VAR 0 6
24349: PPUSH
24350: CALL_OW 257
24354: PUSH
24355: LD_INT 8
24357: EQUAL
24358: IFFALSE 24379
// points := [ 35 , 35 , 30 ] ;
24360: LD_ADDR_VAR 0 9
24364: PUSH
24365: LD_INT 35
24367: PUSH
24368: LD_INT 35
24370: PUSH
24371: LD_INT 30
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24379: LD_VAR 0 6
24383: PPUSH
24384: CALL_OW 257
24388: PUSH
24389: LD_INT 9
24391: EQUAL
24392: IFFALSE 24413
// points := [ 20 , 55 , 40 ] ;
24394: LD_ADDR_VAR 0 9
24398: PUSH
24399: LD_INT 20
24401: PUSH
24402: LD_INT 55
24404: PUSH
24405: LD_INT 40
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24413: LD_VAR 0 6
24417: PPUSH
24418: CALL_OW 257
24422: PUSH
24423: LD_INT 12
24425: PUSH
24426: LD_INT 16
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: IN
24433: IFFALSE 24454
// points := [ 5 , 3 , 2 ] ;
24435: LD_ADDR_VAR 0 9
24439: PUSH
24440: LD_INT 5
24442: PUSH
24443: LD_INT 3
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24454: LD_VAR 0 6
24458: PPUSH
24459: CALL_OW 257
24463: PUSH
24464: LD_INT 17
24466: EQUAL
24467: IFFALSE 24488
// points := [ 100 , 50 , 75 ] ;
24469: LD_ADDR_VAR 0 9
24473: PUSH
24474: LD_INT 100
24476: PUSH
24477: LD_INT 50
24479: PUSH
24480: LD_INT 75
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24488: LD_VAR 0 6
24492: PPUSH
24493: CALL_OW 257
24497: PUSH
24498: LD_INT 15
24500: EQUAL
24501: IFFALSE 24522
// points := [ 10 , 5 , 3 ] ;
24503: LD_ADDR_VAR 0 9
24507: PUSH
24508: LD_INT 10
24510: PUSH
24511: LD_INT 5
24513: PUSH
24514: LD_INT 3
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: LIST
24521: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24522: LD_VAR 0 6
24526: PPUSH
24527: CALL_OW 257
24531: PUSH
24532: LD_INT 14
24534: EQUAL
24535: IFFALSE 24556
// points := [ 10 , 0 , 0 ] ;
24537: LD_ADDR_VAR 0 9
24541: PUSH
24542: LD_INT 10
24544: PUSH
24545: LD_INT 0
24547: PUSH
24548: LD_INT 0
24550: PUSH
24551: EMPTY
24552: LIST
24553: LIST
24554: LIST
24555: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24556: LD_VAR 0 6
24560: PPUSH
24561: CALL_OW 257
24565: PUSH
24566: LD_INT 11
24568: EQUAL
24569: IFFALSE 24590
// points := [ 30 , 10 , 5 ] ;
24571: LD_ADDR_VAR 0 9
24575: PUSH
24576: LD_INT 30
24578: PUSH
24579: LD_INT 10
24581: PUSH
24582: LD_INT 5
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24590: LD_VAR 0 1
24594: PPUSH
24595: LD_INT 5
24597: PPUSH
24598: CALL_OW 321
24602: PUSH
24603: LD_INT 2
24605: EQUAL
24606: IFFALSE 24623
// bpoints := bpoints * 1.8 ;
24608: LD_ADDR_VAR 0 10
24612: PUSH
24613: LD_VAR 0 10
24617: PUSH
24618: LD_REAL  1.80000000000000E+0000
24621: MUL
24622: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24623: LD_VAR 0 6
24627: PPUSH
24628: CALL_OW 257
24632: PUSH
24633: LD_INT 1
24635: PUSH
24636: LD_INT 2
24638: PUSH
24639: LD_INT 3
24641: PUSH
24642: LD_INT 4
24644: PUSH
24645: EMPTY
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: IN
24651: IFFALSE 24671
24653: PUSH
24654: LD_VAR 0 1
24658: PPUSH
24659: LD_INT 51
24661: PPUSH
24662: CALL_OW 321
24666: PUSH
24667: LD_INT 2
24669: EQUAL
24670: AND
24671: IFFALSE 24688
// bpoints := bpoints * 1.2 ;
24673: LD_ADDR_VAR 0 10
24677: PUSH
24678: LD_VAR 0 10
24682: PUSH
24683: LD_REAL  1.20000000000000E+0000
24686: MUL
24687: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24688: LD_VAR 0 6
24692: PPUSH
24693: CALL_OW 257
24697: PUSH
24698: LD_INT 5
24700: PUSH
24701: LD_INT 7
24703: PUSH
24704: LD_INT 9
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: LIST
24711: IN
24712: IFFALSE 24732
24714: PUSH
24715: LD_VAR 0 1
24719: PPUSH
24720: LD_INT 52
24722: PPUSH
24723: CALL_OW 321
24727: PUSH
24728: LD_INT 2
24730: EQUAL
24731: AND
24732: IFFALSE 24749
// bpoints := bpoints * 1.5 ;
24734: LD_ADDR_VAR 0 10
24738: PUSH
24739: LD_VAR 0 10
24743: PUSH
24744: LD_REAL  1.50000000000000E+0000
24747: MUL
24748: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24749: LD_VAR 0 1
24753: PPUSH
24754: LD_INT 66
24756: PPUSH
24757: CALL_OW 321
24761: PUSH
24762: LD_INT 2
24764: EQUAL
24765: IFFALSE 24782
// bpoints := bpoints * 1.1 ;
24767: LD_ADDR_VAR 0 10
24771: PUSH
24772: LD_VAR 0 10
24776: PUSH
24777: LD_REAL  1.10000000000000E+0000
24780: MUL
24781: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24782: LD_ADDR_VAR 0 10
24786: PUSH
24787: LD_VAR 0 10
24791: PUSH
24792: LD_VAR 0 6
24796: PPUSH
24797: LD_INT 1
24799: PPUSH
24800: CALL_OW 259
24804: PUSH
24805: LD_REAL  1.15000000000000E+0000
24808: MUL
24809: MUL
24810: ST_TO_ADDR
// end ; unit_vehicle :
24811: GO 25641
24813: LD_INT 2
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 25629
24821: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24822: LD_VAR 0 6
24826: PPUSH
24827: CALL_OW 264
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 42
24837: PUSH
24838: LD_INT 24
24840: PUSH
24841: EMPTY
24842: LIST
24843: LIST
24844: LIST
24845: IN
24846: IFFALSE 24867
// points := [ 25 , 5 , 3 ] ;
24848: LD_ADDR_VAR 0 9
24852: PUSH
24853: LD_INT 25
24855: PUSH
24856: LD_INT 5
24858: PUSH
24859: LD_INT 3
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: LIST
24866: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24867: LD_VAR 0 6
24871: PPUSH
24872: CALL_OW 264
24876: PUSH
24877: LD_INT 4
24879: PUSH
24880: LD_INT 43
24882: PUSH
24883: LD_INT 25
24885: PUSH
24886: EMPTY
24887: LIST
24888: LIST
24889: LIST
24890: IN
24891: IFFALSE 24912
// points := [ 40 , 15 , 5 ] ;
24893: LD_ADDR_VAR 0 9
24897: PUSH
24898: LD_INT 40
24900: PUSH
24901: LD_INT 15
24903: PUSH
24904: LD_INT 5
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24912: LD_VAR 0 6
24916: PPUSH
24917: CALL_OW 264
24921: PUSH
24922: LD_INT 3
24924: PUSH
24925: LD_INT 23
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: IN
24932: IFFALSE 24953
// points := [ 7 , 25 , 8 ] ;
24934: LD_ADDR_VAR 0 9
24938: PUSH
24939: LD_INT 7
24941: PUSH
24942: LD_INT 25
24944: PUSH
24945: LD_INT 8
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24953: LD_VAR 0 6
24957: PPUSH
24958: CALL_OW 264
24962: PUSH
24963: LD_INT 5
24965: PUSH
24966: LD_INT 27
24968: PUSH
24969: LD_INT 44
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: IN
24977: IFFALSE 24998
// points := [ 14 , 50 , 16 ] ;
24979: LD_ADDR_VAR 0 9
24983: PUSH
24984: LD_INT 14
24986: PUSH
24987: LD_INT 50
24989: PUSH
24990: LD_INT 16
24992: PUSH
24993: EMPTY
24994: LIST
24995: LIST
24996: LIST
24997: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24998: LD_VAR 0 6
25002: PPUSH
25003: CALL_OW 264
25007: PUSH
25008: LD_INT 6
25010: PUSH
25011: LD_INT 46
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: IN
25018: IFFALSE 25039
// points := [ 32 , 120 , 70 ] ;
25020: LD_ADDR_VAR 0 9
25024: PUSH
25025: LD_INT 32
25027: PUSH
25028: LD_INT 120
25030: PUSH
25031: LD_INT 70
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
25039: LD_VAR 0 6
25043: PPUSH
25044: CALL_OW 264
25048: PUSH
25049: LD_INT 7
25051: PUSH
25052: LD_INT 28
25054: PUSH
25055: LD_INT 45
25057: PUSH
25058: LD_INT 92
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: IN
25067: IFFALSE 25088
// points := [ 35 , 20 , 45 ] ;
25069: LD_ADDR_VAR 0 9
25073: PUSH
25074: LD_INT 35
25076: PUSH
25077: LD_INT 20
25079: PUSH
25080: LD_INT 45
25082: PUSH
25083: EMPTY
25084: LIST
25085: LIST
25086: LIST
25087: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
25088: LD_VAR 0 6
25092: PPUSH
25093: CALL_OW 264
25097: PUSH
25098: LD_INT 47
25100: PUSH
25101: EMPTY
25102: LIST
25103: IN
25104: IFFALSE 25125
// points := [ 67 , 45 , 75 ] ;
25106: LD_ADDR_VAR 0 9
25110: PUSH
25111: LD_INT 67
25113: PUSH
25114: LD_INT 45
25116: PUSH
25117: LD_INT 75
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25125: LD_VAR 0 6
25129: PPUSH
25130: CALL_OW 264
25134: PUSH
25135: LD_INT 26
25137: PUSH
25138: EMPTY
25139: LIST
25140: IN
25141: IFFALSE 25162
// points := [ 120 , 30 , 80 ] ;
25143: LD_ADDR_VAR 0 9
25147: PUSH
25148: LD_INT 120
25150: PUSH
25151: LD_INT 30
25153: PUSH
25154: LD_INT 80
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: LIST
25161: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25162: LD_VAR 0 6
25166: PPUSH
25167: CALL_OW 264
25171: PUSH
25172: LD_INT 22
25174: PUSH
25175: EMPTY
25176: LIST
25177: IN
25178: IFFALSE 25199
// points := [ 40 , 1 , 1 ] ;
25180: LD_ADDR_VAR 0 9
25184: PUSH
25185: LD_INT 40
25187: PUSH
25188: LD_INT 1
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: LIST
25198: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25199: LD_VAR 0 6
25203: PPUSH
25204: CALL_OW 264
25208: PUSH
25209: LD_INT 29
25211: PUSH
25212: EMPTY
25213: LIST
25214: IN
25215: IFFALSE 25236
// points := [ 70 , 200 , 400 ] ;
25217: LD_ADDR_VAR 0 9
25221: PUSH
25222: LD_INT 70
25224: PUSH
25225: LD_INT 200
25227: PUSH
25228: LD_INT 400
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25236: LD_VAR 0 6
25240: PPUSH
25241: CALL_OW 264
25245: PUSH
25246: LD_INT 14
25248: PUSH
25249: LD_INT 53
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: IN
25256: IFFALSE 25277
// points := [ 40 , 10 , 20 ] ;
25258: LD_ADDR_VAR 0 9
25262: PUSH
25263: LD_INT 40
25265: PUSH
25266: LD_INT 10
25268: PUSH
25269: LD_INT 20
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: LIST
25276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25277: LD_VAR 0 6
25281: PPUSH
25282: CALL_OW 264
25286: PUSH
25287: LD_INT 9
25289: PUSH
25290: EMPTY
25291: LIST
25292: IN
25293: IFFALSE 25314
// points := [ 5 , 70 , 20 ] ;
25295: LD_ADDR_VAR 0 9
25299: PUSH
25300: LD_INT 5
25302: PUSH
25303: LD_INT 70
25305: PUSH
25306: LD_INT 20
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25314: LD_VAR 0 6
25318: PPUSH
25319: CALL_OW 264
25323: PUSH
25324: LD_INT 10
25326: PUSH
25327: EMPTY
25328: LIST
25329: IN
25330: IFFALSE 25351
// points := [ 35 , 110 , 70 ] ;
25332: LD_ADDR_VAR 0 9
25336: PUSH
25337: LD_INT 35
25339: PUSH
25340: LD_INT 110
25342: PUSH
25343: LD_INT 70
25345: PUSH
25346: EMPTY
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25351: LD_VAR 0 6
25355: PPUSH
25356: CALL_OW 265
25360: PUSH
25361: LD_INT 25
25363: EQUAL
25364: IFFALSE 25385
// points := [ 80 , 65 , 100 ] ;
25366: LD_ADDR_VAR 0 9
25370: PUSH
25371: LD_INT 80
25373: PUSH
25374: LD_INT 65
25376: PUSH
25377: LD_INT 100
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25385: LD_VAR 0 6
25389: PPUSH
25390: CALL_OW 263
25394: PUSH
25395: LD_INT 1
25397: EQUAL
25398: IFFALSE 25433
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25400: LD_ADDR_VAR 0 10
25404: PUSH
25405: LD_VAR 0 10
25409: PUSH
25410: LD_VAR 0 6
25414: PPUSH
25415: CALL_OW 311
25419: PPUSH
25420: LD_INT 3
25422: PPUSH
25423: CALL_OW 259
25427: PUSH
25428: LD_INT 4
25430: MUL
25431: MUL
25432: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25433: LD_VAR 0 6
25437: PPUSH
25438: CALL_OW 263
25442: PUSH
25443: LD_INT 2
25445: EQUAL
25446: IFFALSE 25497
// begin j := IsControledBy ( i ) ;
25448: LD_ADDR_VAR 0 7
25452: PUSH
25453: LD_VAR 0 6
25457: PPUSH
25458: CALL_OW 312
25462: ST_TO_ADDR
// if j then
25463: LD_VAR 0 7
25467: IFFALSE 25497
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25469: LD_ADDR_VAR 0 10
25473: PUSH
25474: LD_VAR 0 10
25478: PUSH
25479: LD_VAR 0 7
25483: PPUSH
25484: LD_INT 3
25486: PPUSH
25487: CALL_OW 259
25491: PUSH
25492: LD_INT 3
25494: MUL
25495: MUL
25496: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25497: LD_VAR 0 6
25501: PPUSH
25502: CALL_OW 264
25506: PUSH
25507: LD_INT 5
25509: PUSH
25510: LD_INT 6
25512: PUSH
25513: LD_INT 46
25515: PUSH
25516: LD_INT 44
25518: PUSH
25519: LD_INT 47
25521: PUSH
25522: LD_INT 45
25524: PUSH
25525: LD_INT 28
25527: PUSH
25528: LD_INT 7
25530: PUSH
25531: LD_INT 27
25533: PUSH
25534: LD_INT 29
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: LIST
25541: LIST
25542: LIST
25543: LIST
25544: LIST
25545: LIST
25546: LIST
25547: LIST
25548: IN
25549: IFFALSE 25569
25551: PUSH
25552: LD_VAR 0 1
25556: PPUSH
25557: LD_INT 52
25559: PPUSH
25560: CALL_OW 321
25564: PUSH
25565: LD_INT 2
25567: EQUAL
25568: AND
25569: IFFALSE 25586
// bpoints := bpoints * 1.2 ;
25571: LD_ADDR_VAR 0 10
25575: PUSH
25576: LD_VAR 0 10
25580: PUSH
25581: LD_REAL  1.20000000000000E+0000
25584: MUL
25585: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25586: LD_VAR 0 6
25590: PPUSH
25591: CALL_OW 264
25595: PUSH
25596: LD_INT 6
25598: PUSH
25599: LD_INT 46
25601: PUSH
25602: LD_INT 47
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: LIST
25609: IN
25610: IFFALSE 25627
// bpoints := bpoints * 1.2 ;
25612: LD_ADDR_VAR 0 10
25616: PUSH
25617: LD_VAR 0 10
25621: PUSH
25622: LD_REAL  1.20000000000000E+0000
25625: MUL
25626: ST_TO_ADDR
// end ; unit_building :
25627: GO 25641
25629: LD_INT 3
25631: DOUBLE
25632: EQUAL
25633: IFTRUE 25637
25635: GO 25640
25637: POP
// ; end ;
25638: GO 25641
25640: POP
// for j = 1 to 3 do
25641: LD_ADDR_VAR 0 7
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_INT 3
25653: PUSH
25654: FOR_TO
25655: IFFALSE 25708
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25657: LD_ADDR_VAR 0 5
25661: PUSH
25662: LD_VAR 0 5
25666: PPUSH
25667: LD_VAR 0 7
25671: PPUSH
25672: LD_VAR 0 5
25676: PUSH
25677: LD_VAR 0 7
25681: ARRAY
25682: PUSH
25683: LD_VAR 0 9
25687: PUSH
25688: LD_VAR 0 7
25692: ARRAY
25693: PUSH
25694: LD_VAR 0 10
25698: MUL
25699: PLUS
25700: PPUSH
25701: CALL_OW 1
25705: ST_TO_ADDR
25706: GO 25654
25708: POP
25709: POP
// end ;
25710: GO 24183
25712: POP
25713: POP
// result := Replace ( result , 4 , tmp ) ;
25714: LD_ADDR_VAR 0 5
25718: PUSH
25719: LD_VAR 0 5
25723: PPUSH
25724: LD_INT 4
25726: PPUSH
25727: LD_VAR 0 8
25731: PPUSH
25732: CALL_OW 1
25736: ST_TO_ADDR
// end ;
25737: LD_VAR 0 5
25741: RET
// export function DangerAtRange ( unit , range ) ; begin
25742: LD_INT 0
25744: PPUSH
// if not unit then
25745: LD_VAR 0 1
25749: NOT
25750: IFFALSE 25754
// exit ;
25752: GO 25799
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25754: LD_ADDR_VAR 0 3
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 255
25768: PPUSH
25769: LD_VAR 0 1
25773: PPUSH
25774: CALL_OW 250
25778: PPUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 251
25788: PPUSH
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL 24033 0 4
25798: ST_TO_ADDR
// end ;
25799: LD_VAR 0 3
25803: RET
// export function DangerInArea ( side , area ) ; begin
25804: LD_INT 0
25806: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25807: LD_ADDR_VAR 0 3
25811: PUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: LD_INT 81
25819: PUSH
25820: LD_VAR 0 1
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PPUSH
25829: CALL_OW 70
25833: ST_TO_ADDR
// end ;
25834: LD_VAR 0 3
25838: RET
// export function IsExtension ( b ) ; begin
25839: LD_INT 0
25841: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25842: LD_ADDR_VAR 0 2
25846: PUSH
25847: LD_VAR 0 1
25851: PUSH
25852: LD_INT 23
25854: PUSH
25855: LD_INT 20
25857: PUSH
25858: LD_INT 22
25860: PUSH
25861: LD_INT 17
25863: PUSH
25864: LD_INT 24
25866: PUSH
25867: LD_INT 21
25869: PUSH
25870: LD_INT 19
25872: PUSH
25873: LD_INT 16
25875: PUSH
25876: LD_INT 25
25878: PUSH
25879: LD_INT 18
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: IN
25894: ST_TO_ADDR
// end ;
25895: LD_VAR 0 2
25899: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25900: LD_INT 0
25902: PPUSH
25903: PPUSH
25904: PPUSH
// result := [ ] ;
25905: LD_ADDR_VAR 0 4
25909: PUSH
25910: EMPTY
25911: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25912: LD_ADDR_VAR 0 5
25916: PUSH
25917: LD_VAR 0 2
25921: PPUSH
25922: LD_INT 21
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PPUSH
25932: CALL_OW 70
25936: ST_TO_ADDR
// if not tmp then
25937: LD_VAR 0 5
25941: NOT
25942: IFFALSE 25946
// exit ;
25944: GO 26010
// if checkLink then
25946: LD_VAR 0 3
25950: IFFALSE 26000
// begin for i in tmp do
25952: LD_ADDR_VAR 0 6
25956: PUSH
25957: LD_VAR 0 5
25961: PUSH
25962: FOR_IN
25963: IFFALSE 25998
// if GetBase ( i ) <> base then
25965: LD_VAR 0 6
25969: PPUSH
25970: CALL_OW 274
25974: PUSH
25975: LD_VAR 0 1
25979: NONEQUAL
25980: IFFALSE 25996
// ComLinkToBase ( base , i ) ;
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 6
25991: PPUSH
25992: CALL_OW 169
25996: GO 25962
25998: POP
25999: POP
// end ; result := tmp ;
26000: LD_ADDR_VAR 0 4
26004: PUSH
26005: LD_VAR 0 5
26009: ST_TO_ADDR
// end ;
26010: LD_VAR 0 4
26014: RET
// export function ComComplete ( units , b ) ; var i ; begin
26015: LD_INT 0
26017: PPUSH
26018: PPUSH
// if not units then
26019: LD_VAR 0 1
26023: NOT
26024: IFFALSE 26028
// exit ;
26026: GO 26118
// for i in units do
26028: LD_ADDR_VAR 0 4
26032: PUSH
26033: LD_VAR 0 1
26037: PUSH
26038: FOR_IN
26039: IFFALSE 26116
// if BuildingStatus ( b ) = bs_build then
26041: LD_VAR 0 2
26045: PPUSH
26046: CALL_OW 461
26050: PUSH
26051: LD_INT 1
26053: EQUAL
26054: IFFALSE 26114
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
26056: LD_VAR 0 4
26060: PPUSH
26061: LD_STRING h
26063: PUSH
26064: LD_VAR 0 2
26068: PPUSH
26069: CALL_OW 250
26073: PUSH
26074: LD_VAR 0 2
26078: PPUSH
26079: CALL_OW 251
26083: PUSH
26084: LD_VAR 0 2
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 0
26094: PUSH
26095: LD_INT 0
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: LIST
26105: LIST
26106: PUSH
26107: EMPTY
26108: LIST
26109: PPUSH
26110: CALL_OW 446
26114: GO 26038
26116: POP
26117: POP
// end ;
26118: LD_VAR 0 3
26122: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26123: LD_INT 0
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
26131: LD_VAR 0 1
26135: NOT
26136: IFTRUE 26153
26138: PUSH
26139: LD_VAR 0 1
26143: PPUSH
26144: CALL_OW 263
26148: PUSH
26149: LD_INT 2
26151: NONEQUAL
26152: OR
26153: IFFALSE 26157
// exit ;
26155: GO 26473
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26157: LD_ADDR_VAR 0 6
26161: PUSH
26162: LD_INT 22
26164: PUSH
26165: LD_VAR 0 1
26169: PPUSH
26170: CALL_OW 255
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: LD_INT 30
26184: PUSH
26185: LD_INT 36
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: LD_INT 34
26194: PUSH
26195: LD_INT 31
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 69
26215: ST_TO_ADDR
// if not tmp then
26216: LD_VAR 0 6
26220: NOT
26221: IFFALSE 26225
// exit ;
26223: GO 26473
// result := [ ] ;
26225: LD_ADDR_VAR 0 2
26229: PUSH
26230: EMPTY
26231: ST_TO_ADDR
// for i in tmp do
26232: LD_ADDR_VAR 0 3
26236: PUSH
26237: LD_VAR 0 6
26241: PUSH
26242: FOR_IN
26243: IFFALSE 26314
// begin t := UnitsInside ( i ) ;
26245: LD_ADDR_VAR 0 4
26249: PUSH
26250: LD_VAR 0 3
26254: PPUSH
26255: CALL_OW 313
26259: ST_TO_ADDR
// if t then
26260: LD_VAR 0 4
26264: IFFALSE 26312
// for j in t do
26266: LD_ADDR_VAR 0 7
26270: PUSH
26271: LD_VAR 0 4
26275: PUSH
26276: FOR_IN
26277: IFFALSE 26310
// result := Replace ( result , result + 1 , j ) ;
26279: LD_ADDR_VAR 0 2
26283: PUSH
26284: LD_VAR 0 2
26288: PPUSH
26289: LD_VAR 0 2
26293: PUSH
26294: LD_INT 1
26296: PLUS
26297: PPUSH
26298: LD_VAR 0 7
26302: PPUSH
26303: CALL_OW 1
26307: ST_TO_ADDR
26308: GO 26276
26310: POP
26311: POP
// end ;
26312: GO 26242
26314: POP
26315: POP
// if not result then
26316: LD_VAR 0 2
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 26473
// mech := result [ 1 ] ;
26325: LD_ADDR_VAR 0 5
26329: PUSH
26330: LD_VAR 0 2
26334: PUSH
26335: LD_INT 1
26337: ARRAY
26338: ST_TO_ADDR
// if result > 1 then
26339: LD_VAR 0 2
26343: PUSH
26344: LD_INT 1
26346: GREATER
26347: IFFALSE 26459
// begin for i = 2 to result do
26349: LD_ADDR_VAR 0 3
26353: PUSH
26354: DOUBLE
26355: LD_INT 2
26357: DEC
26358: ST_TO_ADDR
26359: LD_VAR 0 2
26363: PUSH
26364: FOR_TO
26365: IFFALSE 26457
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26367: LD_ADDR_VAR 0 4
26371: PUSH
26372: LD_VAR 0 2
26376: PUSH
26377: LD_VAR 0 3
26381: ARRAY
26382: PPUSH
26383: LD_INT 3
26385: PPUSH
26386: CALL_OW 259
26390: PUSH
26391: LD_VAR 0 2
26395: PUSH
26396: LD_VAR 0 3
26400: ARRAY
26401: PPUSH
26402: CALL_OW 432
26406: MINUS
26407: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26408: LD_VAR 0 4
26412: PUSH
26413: LD_VAR 0 5
26417: PPUSH
26418: LD_INT 3
26420: PPUSH
26421: CALL_OW 259
26425: PUSH
26426: LD_VAR 0 5
26430: PPUSH
26431: CALL_OW 432
26435: MINUS
26436: GREATEREQUAL
26437: IFFALSE 26455
// mech := result [ i ] ;
26439: LD_ADDR_VAR 0 5
26443: PUSH
26444: LD_VAR 0 2
26448: PUSH
26449: LD_VAR 0 3
26453: ARRAY
26454: ST_TO_ADDR
// end ;
26455: GO 26364
26457: POP
26458: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26459: LD_VAR 0 1
26463: PPUSH
26464: LD_VAR 0 5
26468: PPUSH
26469: CALL_OW 135
// end ;
26473: LD_VAR 0 2
26477: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26478: LD_INT 0
26480: PPUSH
26481: PPUSH
26482: PPUSH
26483: PPUSH
26484: PPUSH
26485: PPUSH
26486: PPUSH
26487: PPUSH
26488: PPUSH
26489: PPUSH
26490: PPUSH
26491: PPUSH
26492: PPUSH
// result := [ ] ;
26493: LD_ADDR_VAR 0 7
26497: PUSH
26498: EMPTY
26499: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 266
26509: PUSH
26510: LD_INT 0
26512: PUSH
26513: LD_INT 1
26515: PUSH
26516: EMPTY
26517: LIST
26518: LIST
26519: IN
26520: NOT
26521: IFFALSE 26525
// exit ;
26523: GO 28165
// if name then
26525: LD_VAR 0 3
26529: IFFALSE 26545
// SetBName ( base_dep , name ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_VAR 0 3
26540: PPUSH
26541: CALL_OW 500
// base := GetBase ( base_dep ) ;
26545: LD_ADDR_VAR 0 15
26549: PUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 274
26559: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26560: LD_ADDR_VAR 0 16
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 255
26574: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26575: LD_ADDR_VAR 0 17
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 248
26589: ST_TO_ADDR
// if sources then
26590: LD_VAR 0 5
26594: IFFALSE 26641
// for i = 1 to 3 do
26596: LD_ADDR_VAR 0 8
26600: PUSH
26601: DOUBLE
26602: LD_INT 1
26604: DEC
26605: ST_TO_ADDR
26606: LD_INT 3
26608: PUSH
26609: FOR_TO
26610: IFFALSE 26639
// AddResourceType ( base , i , sources [ i ] ) ;
26612: LD_VAR 0 15
26616: PPUSH
26617: LD_VAR 0 8
26621: PPUSH
26622: LD_VAR 0 5
26626: PUSH
26627: LD_VAR 0 8
26631: ARRAY
26632: PPUSH
26633: CALL_OW 276
26637: GO 26609
26639: POP
26640: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26641: LD_ADDR_VAR 0 18
26645: PUSH
26646: LD_VAR 0 15
26650: PPUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: LD_INT 1
26658: PPUSH
26659: CALL 25900 0 3
26663: ST_TO_ADDR
// InitHc ;
26664: CALL_OW 19
// InitUc ;
26668: CALL_OW 18
// uc_side := side ;
26672: LD_ADDR_OWVAR 20
26676: PUSH
26677: LD_VAR 0 16
26681: ST_TO_ADDR
// uc_nation := nation ;
26682: LD_ADDR_OWVAR 21
26686: PUSH
26687: LD_VAR 0 17
26691: ST_TO_ADDR
// if buildings then
26692: LD_VAR 0 18
26696: IFFALSE 28024
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26698: LD_ADDR_VAR 0 19
26702: PUSH
26703: LD_VAR 0 18
26707: PPUSH
26708: LD_INT 2
26710: PUSH
26711: LD_INT 30
26713: PUSH
26714: LD_INT 29
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: LD_INT 30
26723: PUSH
26724: LD_INT 30
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 72
26740: ST_TO_ADDR
// if tmp then
26741: LD_VAR 0 19
26745: IFFALSE 26793
// for i in tmp do
26747: LD_ADDR_VAR 0 8
26751: PUSH
26752: LD_VAR 0 19
26756: PUSH
26757: FOR_IN
26758: IFFALSE 26791
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26760: LD_VAR 0 8
26764: PPUSH
26765: CALL_OW 250
26769: PPUSH
26770: LD_VAR 0 8
26774: PPUSH
26775: CALL_OW 251
26779: PPUSH
26780: LD_VAR 0 16
26784: PPUSH
26785: CALL_OW 441
26789: GO 26757
26791: POP
26792: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26793: LD_VAR 0 18
26797: PPUSH
26798: LD_INT 2
26800: PUSH
26801: LD_INT 30
26803: PUSH
26804: LD_INT 32
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: PUSH
26811: LD_INT 30
26813: PUSH
26814: LD_INT 33
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: LIST
26825: PPUSH
26826: CALL_OW 72
26830: IFFALSE 26918
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26832: LD_ADDR_VAR 0 8
26836: PUSH
26837: LD_VAR 0 18
26841: PPUSH
26842: LD_INT 2
26844: PUSH
26845: LD_INT 30
26847: PUSH
26848: LD_INT 32
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 30
26857: PUSH
26858: LD_INT 33
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: LIST
26869: PPUSH
26870: CALL_OW 72
26874: PUSH
26875: FOR_IN
26876: IFFALSE 26916
// begin if not GetBWeapon ( i ) then
26878: LD_VAR 0 8
26882: PPUSH
26883: CALL_OW 269
26887: NOT
26888: IFFALSE 26914
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26890: LD_VAR 0 8
26894: PPUSH
26895: LD_VAR 0 8
26899: PPUSH
26900: LD_VAR 0 2
26904: PPUSH
26905: CALL 28170 0 2
26909: PPUSH
26910: CALL_OW 431
// end ;
26914: GO 26875
26916: POP
26917: POP
// end ; for i = 1 to personel do
26918: LD_ADDR_VAR 0 8
26922: PUSH
26923: DOUBLE
26924: LD_INT 1
26926: DEC
26927: ST_TO_ADDR
26928: LD_VAR 0 6
26932: PUSH
26933: FOR_TO
26934: IFFALSE 28004
// begin if i > 4 then
26936: LD_VAR 0 8
26940: PUSH
26941: LD_INT 4
26943: GREATER
26944: IFFALSE 26948
// break ;
26946: GO 28004
// case i of 1 :
26948: LD_VAR 0 8
26952: PUSH
26953: LD_INT 1
26955: DOUBLE
26956: EQUAL
26957: IFTRUE 26961
26959: GO 27041
26961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26962: LD_ADDR_VAR 0 12
26966: PUSH
26967: LD_VAR 0 18
26971: PPUSH
26972: LD_INT 22
26974: PUSH
26975: LD_VAR 0 16
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 58
26986: PUSH
26987: EMPTY
26988: LIST
26989: PUSH
26990: LD_INT 2
26992: PUSH
26993: LD_INT 30
26995: PUSH
26996: LD_INT 32
26998: PUSH
26999: EMPTY
27000: LIST
27001: LIST
27002: PUSH
27003: LD_INT 30
27005: PUSH
27006: LD_INT 4
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: PUSH
27013: LD_INT 30
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: CALL_OW 72
27038: ST_TO_ADDR
27039: GO 27263
27041: LD_INT 2
27043: DOUBLE
27044: EQUAL
27045: IFTRUE 27049
27047: GO 27111
27049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
27050: LD_ADDR_VAR 0 12
27054: PUSH
27055: LD_VAR 0 18
27059: PPUSH
27060: LD_INT 22
27062: PUSH
27063: LD_VAR 0 16
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: PUSH
27072: LD_INT 2
27074: PUSH
27075: LD_INT 30
27077: PUSH
27078: LD_INT 0
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 30
27087: PUSH
27088: LD_INT 1
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: PUSH
27100: EMPTY
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 72
27108: ST_TO_ADDR
27109: GO 27263
27111: LD_INT 3
27113: DOUBLE
27114: EQUAL
27115: IFTRUE 27119
27117: GO 27181
27119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27120: LD_ADDR_VAR 0 12
27124: PUSH
27125: LD_VAR 0 18
27129: PPUSH
27130: LD_INT 22
27132: PUSH
27133: LD_VAR 0 16
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PUSH
27142: LD_INT 2
27144: PUSH
27145: LD_INT 30
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: PUSH
27155: LD_INT 30
27157: PUSH
27158: LD_INT 3
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: PUSH
27170: EMPTY
27171: LIST
27172: LIST
27173: PPUSH
27174: CALL_OW 72
27178: ST_TO_ADDR
27179: GO 27263
27181: LD_INT 4
27183: DOUBLE
27184: EQUAL
27185: IFTRUE 27189
27187: GO 27262
27189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27190: LD_ADDR_VAR 0 12
27194: PUSH
27195: LD_VAR 0 18
27199: PPUSH
27200: LD_INT 22
27202: PUSH
27203: LD_VAR 0 16
27207: PUSH
27208: EMPTY
27209: LIST
27210: LIST
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 30
27227: PUSH
27228: LD_INT 7
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 30
27237: PUSH
27238: LD_INT 8
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PPUSH
27255: CALL_OW 72
27259: ST_TO_ADDR
27260: GO 27263
27262: POP
// if i = 1 then
27263: LD_VAR 0 8
27267: PUSH
27268: LD_INT 1
27270: EQUAL
27271: IFFALSE 27382
// begin tmp := [ ] ;
27273: LD_ADDR_VAR 0 19
27277: PUSH
27278: EMPTY
27279: ST_TO_ADDR
// for j in f do
27280: LD_ADDR_VAR 0 9
27284: PUSH
27285: LD_VAR 0 12
27289: PUSH
27290: FOR_IN
27291: IFFALSE 27364
// if GetBType ( j ) = b_bunker then
27293: LD_VAR 0 9
27297: PPUSH
27298: CALL_OW 266
27302: PUSH
27303: LD_INT 32
27305: EQUAL
27306: IFFALSE 27333
// tmp := Insert ( tmp , 1 , j ) else
27308: LD_ADDR_VAR 0 19
27312: PUSH
27313: LD_VAR 0 19
27317: PPUSH
27318: LD_INT 1
27320: PPUSH
27321: LD_VAR 0 9
27325: PPUSH
27326: CALL_OW 2
27330: ST_TO_ADDR
27331: GO 27362
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27333: LD_ADDR_VAR 0 19
27337: PUSH
27338: LD_VAR 0 19
27342: PPUSH
27343: LD_VAR 0 19
27347: PUSH
27348: LD_INT 1
27350: PLUS
27351: PPUSH
27352: LD_VAR 0 9
27356: PPUSH
27357: CALL_OW 2
27361: ST_TO_ADDR
27362: GO 27290
27364: POP
27365: POP
// if tmp then
27366: LD_VAR 0 19
27370: IFFALSE 27382
// f := tmp ;
27372: LD_ADDR_VAR 0 12
27376: PUSH
27377: LD_VAR 0 19
27381: ST_TO_ADDR
// end ; x := personel [ i ] ;
27382: LD_ADDR_VAR 0 13
27386: PUSH
27387: LD_VAR 0 6
27391: PUSH
27392: LD_VAR 0 8
27396: ARRAY
27397: ST_TO_ADDR
// if x = - 1 then
27398: LD_VAR 0 13
27402: PUSH
27403: LD_INT 1
27405: NEG
27406: EQUAL
27407: IFFALSE 27618
// begin for j in f do
27409: LD_ADDR_VAR 0 9
27413: PUSH
27414: LD_VAR 0 12
27418: PUSH
27419: FOR_IN
27420: IFFALSE 27614
// repeat InitHc ;
27422: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27426: LD_VAR 0 9
27430: PPUSH
27431: CALL_OW 266
27435: PUSH
27436: LD_INT 5
27438: EQUAL
27439: IFFALSE 27509
// begin if UnitsInside ( j ) < 3 then
27441: LD_VAR 0 9
27445: PPUSH
27446: CALL_OW 313
27450: PUSH
27451: LD_INT 3
27453: LESS
27454: IFFALSE 27490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27456: LD_INT 0
27458: PPUSH
27459: LD_INT 5
27461: PUSH
27462: LD_INT 8
27464: PUSH
27465: LD_INT 9
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: LIST
27472: PUSH
27473: LD_VAR 0 17
27477: ARRAY
27478: PPUSH
27479: LD_VAR 0 4
27483: PPUSH
27484: CALL_OW 380
27488: GO 27507
// PrepareHuman ( false , i , skill ) ;
27490: LD_INT 0
27492: PPUSH
27493: LD_VAR 0 8
27497: PPUSH
27498: LD_VAR 0 4
27502: PPUSH
27503: CALL_OW 380
// end else
27507: GO 27526
// PrepareHuman ( false , i , skill ) ;
27509: LD_INT 0
27511: PPUSH
27512: LD_VAR 0 8
27516: PPUSH
27517: LD_VAR 0 4
27521: PPUSH
27522: CALL_OW 380
// un := CreateHuman ;
27526: LD_ADDR_VAR 0 14
27530: PUSH
27531: CALL_OW 44
27535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27536: LD_ADDR_VAR 0 7
27540: PUSH
27541: LD_VAR 0 7
27545: PPUSH
27546: LD_INT 1
27548: PPUSH
27549: LD_VAR 0 14
27553: PPUSH
27554: CALL_OW 2
27558: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27559: LD_VAR 0 14
27563: PPUSH
27564: LD_VAR 0 9
27568: PPUSH
27569: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27573: LD_VAR 0 9
27577: PPUSH
27578: CALL_OW 313
27582: PUSH
27583: LD_INT 6
27585: EQUAL
27586: IFTRUE 27610
27588: PUSH
27589: LD_VAR 0 9
27593: PPUSH
27594: CALL_OW 266
27598: PUSH
27599: LD_INT 32
27601: PUSH
27602: LD_INT 31
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: IN
27609: OR
27610: IFFALSE 27422
27612: GO 27419
27614: POP
27615: POP
// end else
27616: GO 28002
// for j = 1 to x do
27618: LD_ADDR_VAR 0 9
27622: PUSH
27623: DOUBLE
27624: LD_INT 1
27626: DEC
27627: ST_TO_ADDR
27628: LD_VAR 0 13
27632: PUSH
27633: FOR_TO
27634: IFFALSE 28000
// begin InitHc ;
27636: CALL_OW 19
// if not f then
27640: LD_VAR 0 12
27644: NOT
27645: IFFALSE 27734
// begin PrepareHuman ( false , i , skill ) ;
27647: LD_INT 0
27649: PPUSH
27650: LD_VAR 0 8
27654: PPUSH
27655: LD_VAR 0 4
27659: PPUSH
27660: CALL_OW 380
// un := CreateHuman ;
27664: LD_ADDR_VAR 0 14
27668: PUSH
27669: CALL_OW 44
27673: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27674: LD_ADDR_VAR 0 7
27678: PUSH
27679: LD_VAR 0 7
27683: PPUSH
27684: LD_INT 1
27686: PPUSH
27687: LD_VAR 0 14
27691: PPUSH
27692: CALL_OW 2
27696: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27697: LD_VAR 0 14
27701: PPUSH
27702: LD_VAR 0 1
27706: PPUSH
27707: CALL_OW 250
27711: PPUSH
27712: LD_VAR 0 1
27716: PPUSH
27717: CALL_OW 251
27721: PPUSH
27722: LD_INT 10
27724: PPUSH
27725: LD_INT 0
27727: PPUSH
27728: CALL_OW 50
// continue ;
27732: GO 27633
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27734: LD_VAR 0 12
27738: PUSH
27739: LD_INT 1
27741: ARRAY
27742: PPUSH
27743: CALL_OW 313
27747: IFFALSE 27775
27749: PUSH
27750: LD_VAR 0 12
27754: PUSH
27755: LD_INT 1
27757: ARRAY
27758: PPUSH
27759: CALL_OW 266
27763: PUSH
27764: LD_INT 32
27766: PUSH
27767: LD_INT 31
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: IN
27774: AND
27775: IFTRUE 27796
27777: PUSH
27778: LD_VAR 0 12
27782: PUSH
27783: LD_INT 1
27785: ARRAY
27786: PPUSH
27787: CALL_OW 313
27791: PUSH
27792: LD_INT 6
27794: EQUAL
27795: OR
27796: IFFALSE 27816
// f := Delete ( f , 1 ) ;
27798: LD_ADDR_VAR 0 12
27802: PUSH
27803: LD_VAR 0 12
27807: PPUSH
27808: LD_INT 1
27810: PPUSH
27811: CALL_OW 3
27815: ST_TO_ADDR
// if not f then
27816: LD_VAR 0 12
27820: NOT
27821: IFFALSE 27839
// begin x := x + 2 ;
27823: LD_ADDR_VAR 0 13
27827: PUSH
27828: LD_VAR 0 13
27832: PUSH
27833: LD_INT 2
27835: PLUS
27836: ST_TO_ADDR
// continue ;
27837: GO 27633
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27839: LD_VAR 0 12
27843: PUSH
27844: LD_INT 1
27846: ARRAY
27847: PPUSH
27848: CALL_OW 266
27852: PUSH
27853: LD_INT 5
27855: EQUAL
27856: IFFALSE 27930
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27858: LD_VAR 0 12
27862: PUSH
27863: LD_INT 1
27865: ARRAY
27866: PPUSH
27867: CALL_OW 313
27871: PUSH
27872: LD_INT 3
27874: LESS
27875: IFFALSE 27911
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27877: LD_INT 0
27879: PPUSH
27880: LD_INT 5
27882: PUSH
27883: LD_INT 8
27885: PUSH
27886: LD_INT 9
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: LD_VAR 0 17
27898: ARRAY
27899: PPUSH
27900: LD_VAR 0 4
27904: PPUSH
27905: CALL_OW 380
27909: GO 27928
// PrepareHuman ( false , i , skill ) ;
27911: LD_INT 0
27913: PPUSH
27914: LD_VAR 0 8
27918: PPUSH
27919: LD_VAR 0 4
27923: PPUSH
27924: CALL_OW 380
// end else
27928: GO 27947
// PrepareHuman ( false , i , skill ) ;
27930: LD_INT 0
27932: PPUSH
27933: LD_VAR 0 8
27937: PPUSH
27938: LD_VAR 0 4
27942: PPUSH
27943: CALL_OW 380
// un := CreateHuman ;
27947: LD_ADDR_VAR 0 14
27951: PUSH
27952: CALL_OW 44
27956: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27957: LD_ADDR_VAR 0 7
27961: PUSH
27962: LD_VAR 0 7
27966: PPUSH
27967: LD_INT 1
27969: PPUSH
27970: LD_VAR 0 14
27974: PPUSH
27975: CALL_OW 2
27979: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27980: LD_VAR 0 14
27984: PPUSH
27985: LD_VAR 0 12
27989: PUSH
27990: LD_INT 1
27992: ARRAY
27993: PPUSH
27994: CALL_OW 52
// end ;
27998: GO 27633
28000: POP
28001: POP
// end ;
28002: GO 26933
28004: POP
28005: POP
// result := result ^ buildings ;
28006: LD_ADDR_VAR 0 7
28010: PUSH
28011: LD_VAR 0 7
28015: PUSH
28016: LD_VAR 0 18
28020: ADD
28021: ST_TO_ADDR
// end else
28022: GO 28165
// begin for i = 1 to personel do
28024: LD_ADDR_VAR 0 8
28028: PUSH
28029: DOUBLE
28030: LD_INT 1
28032: DEC
28033: ST_TO_ADDR
28034: LD_VAR 0 6
28038: PUSH
28039: FOR_TO
28040: IFFALSE 28163
// begin if i > 4 then
28042: LD_VAR 0 8
28046: PUSH
28047: LD_INT 4
28049: GREATER
28050: IFFALSE 28054
// break ;
28052: GO 28163
// x := personel [ i ] ;
28054: LD_ADDR_VAR 0 13
28058: PUSH
28059: LD_VAR 0 6
28063: PUSH
28064: LD_VAR 0 8
28068: ARRAY
28069: ST_TO_ADDR
// if x = - 1 then
28070: LD_VAR 0 13
28074: PUSH
28075: LD_INT 1
28077: NEG
28078: EQUAL
28079: IFFALSE 28083
// continue ;
28081: GO 28039
// PrepareHuman ( false , i , skill ) ;
28083: LD_INT 0
28085: PPUSH
28086: LD_VAR 0 8
28090: PPUSH
28091: LD_VAR 0 4
28095: PPUSH
28096: CALL_OW 380
// un := CreateHuman ;
28100: LD_ADDR_VAR 0 14
28104: PUSH
28105: CALL_OW 44
28109: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28110: LD_VAR 0 14
28114: PPUSH
28115: LD_VAR 0 1
28119: PPUSH
28120: CALL_OW 250
28124: PPUSH
28125: LD_VAR 0 1
28129: PPUSH
28130: CALL_OW 251
28134: PPUSH
28135: LD_INT 10
28137: PPUSH
28138: LD_INT 0
28140: PPUSH
28141: CALL_OW 50
// result := result ^ un ;
28145: LD_ADDR_VAR 0 7
28149: PUSH
28150: LD_VAR 0 7
28154: PUSH
28155: LD_VAR 0 14
28159: ADD
28160: ST_TO_ADDR
// end ;
28161: GO 28039
28163: POP
28164: POP
// end ; end ;
28165: LD_VAR 0 7
28169: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28170: LD_INT 0
28172: PPUSH
28173: PPUSH
28174: PPUSH
28175: PPUSH
28176: PPUSH
28177: PPUSH
28178: PPUSH
28179: PPUSH
28180: PPUSH
28181: PPUSH
28182: PPUSH
28183: PPUSH
28184: PPUSH
28185: PPUSH
28186: PPUSH
28187: PPUSH
// result := false ;
28188: LD_ADDR_VAR 0 3
28192: PUSH
28193: LD_INT 0
28195: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28196: LD_VAR 0 1
28200: NOT
28201: IFTRUE 28226
28203: PUSH
28204: LD_VAR 0 1
28208: PPUSH
28209: CALL_OW 266
28213: PUSH
28214: LD_INT 32
28216: PUSH
28217: LD_INT 33
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: IN
28224: NOT
28225: OR
28226: IFFALSE 28230
// exit ;
28228: GO 29365
// nat := GetNation ( tower ) ;
28230: LD_ADDR_VAR 0 12
28234: PUSH
28235: LD_VAR 0 1
28239: PPUSH
28240: CALL_OW 248
28244: ST_TO_ADDR
// side := GetSide ( tower ) ;
28245: LD_ADDR_VAR 0 16
28249: PUSH
28250: LD_VAR 0 1
28254: PPUSH
28255: CALL_OW 255
28259: ST_TO_ADDR
// x := GetX ( tower ) ;
28260: LD_ADDR_VAR 0 10
28264: PUSH
28265: LD_VAR 0 1
28269: PPUSH
28270: CALL_OW 250
28274: ST_TO_ADDR
// y := GetY ( tower ) ;
28275: LD_ADDR_VAR 0 11
28279: PUSH
28280: LD_VAR 0 1
28284: PPUSH
28285: CALL_OW 251
28289: ST_TO_ADDR
// if not x or not y then
28290: LD_VAR 0 10
28294: NOT
28295: IFTRUE 28304
28297: PUSH
28298: LD_VAR 0 11
28302: NOT
28303: OR
28304: IFFALSE 28308
// exit ;
28306: GO 29365
// weapon := 0 ;
28308: LD_ADDR_VAR 0 18
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// fac_list := [ ] ;
28316: LD_ADDR_VAR 0 17
28320: PUSH
28321: EMPTY
28322: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28323: LD_ADDR_VAR 0 6
28327: PUSH
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL_OW 274
28337: PPUSH
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_INT 0
28345: PPUSH
28346: CALL 25900 0 3
28350: PPUSH
28351: LD_INT 30
28353: PUSH
28354: LD_INT 3
28356: PUSH
28357: EMPTY
28358: LIST
28359: LIST
28360: PPUSH
28361: CALL_OW 72
28365: ST_TO_ADDR
// if not factories then
28366: LD_VAR 0 6
28370: NOT
28371: IFFALSE 28375
// exit ;
28373: GO 29365
// for i in factories do
28375: LD_ADDR_VAR 0 8
28379: PUSH
28380: LD_VAR 0 6
28384: PUSH
28385: FOR_IN
28386: IFFALSE 28411
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28388: LD_ADDR_VAR 0 17
28392: PUSH
28393: LD_VAR 0 17
28397: PUSH
28398: LD_VAR 0 8
28402: PPUSH
28403: CALL_OW 478
28407: UNION
28408: ST_TO_ADDR
28409: GO 28385
28411: POP
28412: POP
// if not fac_list then
28413: LD_VAR 0 17
28417: NOT
28418: IFFALSE 28422
// exit ;
28420: GO 29365
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28422: LD_ADDR_VAR 0 5
28426: PUSH
28427: LD_INT 4
28429: PUSH
28430: LD_INT 5
28432: PUSH
28433: LD_INT 9
28435: PUSH
28436: LD_INT 10
28438: PUSH
28439: LD_INT 6
28441: PUSH
28442: LD_INT 7
28444: PUSH
28445: LD_INT 11
28447: PUSH
28448: EMPTY
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: PUSH
28457: LD_INT 27
28459: PUSH
28460: LD_INT 28
28462: PUSH
28463: LD_INT 26
28465: PUSH
28466: LD_INT 30
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 43
28477: PUSH
28478: LD_INT 44
28480: PUSH
28481: LD_INT 46
28483: PUSH
28484: LD_INT 45
28486: PUSH
28487: LD_INT 47
28489: PUSH
28490: LD_INT 49
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: LIST
28505: PUSH
28506: LD_VAR 0 12
28510: ARRAY
28511: ST_TO_ADDR
// list := list isect fac_list ;
28512: LD_ADDR_VAR 0 5
28516: PUSH
28517: LD_VAR 0 5
28521: PUSH
28522: LD_VAR 0 17
28526: ISECT
28527: ST_TO_ADDR
// if not list then
28528: LD_VAR 0 5
28532: NOT
28533: IFFALSE 28537
// exit ;
28535: GO 29365
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28537: LD_VAR 0 12
28541: PUSH
28542: LD_INT 3
28544: EQUAL
28545: IFFALSE 28557
28547: PUSH
28548: LD_INT 49
28550: PUSH
28551: LD_VAR 0 5
28555: IN
28556: AND
28557: IFFALSE 28577
28559: PUSH
28560: LD_INT 31
28562: PPUSH
28563: LD_VAR 0 16
28567: PPUSH
28568: CALL_OW 321
28572: PUSH
28573: LD_INT 2
28575: EQUAL
28576: AND
28577: IFFALSE 28637
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28579: LD_INT 22
28581: PUSH
28582: LD_VAR 0 16
28586: PUSH
28587: EMPTY
28588: LIST
28589: LIST
28590: PUSH
28591: LD_INT 35
28593: PUSH
28594: LD_INT 49
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 91
28603: PUSH
28604: LD_VAR 0 1
28608: PUSH
28609: LD_INT 10
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: PPUSH
28622: CALL_OW 69
28626: NOT
28627: IFFALSE 28637
// weapon := ru_time_lapser ;
28629: LD_ADDR_VAR 0 18
28633: PUSH
28634: LD_INT 49
28636: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28637: LD_VAR 0 12
28641: PUSH
28642: LD_INT 1
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: IN
28652: IFFALSE 28676
28654: PUSH
28655: LD_INT 11
28657: PUSH
28658: LD_VAR 0 5
28662: IN
28663: IFTRUE 28675
28665: PUSH
28666: LD_INT 30
28668: PUSH
28669: LD_VAR 0 5
28673: IN
28674: OR
28675: AND
28676: IFFALSE 28696
28678: PUSH
28679: LD_INT 6
28681: PPUSH
28682: LD_VAR 0 16
28686: PPUSH
28687: CALL_OW 321
28691: PUSH
28692: LD_INT 2
28694: EQUAL
28695: AND
28696: IFFALSE 28863
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28698: LD_INT 22
28700: PUSH
28701: LD_VAR 0 16
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 2
28712: PUSH
28713: LD_INT 35
28715: PUSH
28716: LD_INT 11
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 35
28725: PUSH
28726: LD_INT 30
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: PUSH
28738: LD_INT 91
28740: PUSH
28741: LD_VAR 0 1
28745: PUSH
28746: LD_INT 18
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: LIST
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: PPUSH
28759: CALL_OW 69
28763: NOT
28764: IFFALSE 28840
28766: PUSH
28767: LD_INT 22
28769: PUSH
28770: LD_VAR 0 16
28774: PUSH
28775: EMPTY
28776: LIST
28777: LIST
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 30
28784: PUSH
28785: LD_INT 32
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 30
28794: PUSH
28795: LD_INT 33
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 91
28809: PUSH
28810: LD_VAR 0 1
28814: PUSH
28815: LD_INT 12
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: LIST
28827: PUSH
28828: EMPTY
28829: LIST
28830: PPUSH
28831: CALL_OW 69
28835: PUSH
28836: LD_INT 2
28838: GREATER
28839: AND
28840: IFFALSE 28863
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28842: LD_ADDR_VAR 0 18
28846: PUSH
28847: LD_INT 11
28849: PUSH
28850: LD_INT 30
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_VAR 0 12
28861: ARRAY
28862: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28863: LD_VAR 0 18
28867: NOT
28868: IFFALSE 28888
28870: PUSH
28871: LD_INT 40
28873: PPUSH
28874: LD_VAR 0 16
28878: PPUSH
28879: CALL_OW 321
28883: PUSH
28884: LD_INT 2
28886: EQUAL
28887: AND
28888: IFFALSE 28924
28890: PUSH
28891: LD_INT 7
28893: PUSH
28894: LD_VAR 0 5
28898: IN
28899: IFTRUE 28911
28901: PUSH
28902: LD_INT 28
28904: PUSH
28905: LD_VAR 0 5
28909: IN
28910: OR
28911: IFTRUE 28923
28913: PUSH
28914: LD_INT 45
28916: PUSH
28917: LD_VAR 0 5
28921: IN
28922: OR
28923: AND
28924: IFFALSE 29178
// begin hex := GetHexInfo ( x , y ) ;
28926: LD_ADDR_VAR 0 4
28930: PUSH
28931: LD_VAR 0 10
28935: PPUSH
28936: LD_VAR 0 11
28940: PPUSH
28941: CALL_OW 546
28945: ST_TO_ADDR
// if hex [ 1 ] then
28946: LD_VAR 0 4
28950: PUSH
28951: LD_INT 1
28953: ARRAY
28954: IFFALSE 28958
// exit ;
28956: GO 29365
// height := hex [ 2 ] ;
28958: LD_ADDR_VAR 0 15
28962: PUSH
28963: LD_VAR 0 4
28967: PUSH
28968: LD_INT 2
28970: ARRAY
28971: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28972: LD_ADDR_VAR 0 14
28976: PUSH
28977: LD_INT 0
28979: PUSH
28980: LD_INT 2
28982: PUSH
28983: LD_INT 3
28985: PUSH
28986: LD_INT 5
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: ST_TO_ADDR
// for i in tmp do
28995: LD_ADDR_VAR 0 8
28999: PUSH
29000: LD_VAR 0 14
29004: PUSH
29005: FOR_IN
29006: IFFALSE 29176
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
29008: LD_ADDR_VAR 0 9
29012: PUSH
29013: LD_VAR 0 10
29017: PPUSH
29018: LD_VAR 0 8
29022: PPUSH
29023: LD_INT 5
29025: PPUSH
29026: CALL_OW 272
29030: PUSH
29031: LD_VAR 0 11
29035: PPUSH
29036: LD_VAR 0 8
29040: PPUSH
29041: LD_INT 5
29043: PPUSH
29044: CALL_OW 273
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
29053: LD_VAR 0 9
29057: PUSH
29058: LD_INT 1
29060: ARRAY
29061: PPUSH
29062: LD_VAR 0 9
29066: PUSH
29067: LD_INT 2
29069: ARRAY
29070: PPUSH
29071: CALL_OW 488
29075: IFFALSE 29174
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: LD_VAR 0 9
29086: PUSH
29087: LD_INT 1
29089: ARRAY
29090: PPUSH
29091: LD_VAR 0 9
29095: PUSH
29096: LD_INT 2
29098: ARRAY
29099: PPUSH
29100: CALL_OW 546
29104: ST_TO_ADDR
// if hex [ 1 ] then
29105: LD_VAR 0 4
29109: PUSH
29110: LD_INT 1
29112: ARRAY
29113: IFFALSE 29117
// continue ;
29115: GO 29005
// h := hex [ 2 ] ;
29117: LD_ADDR_VAR 0 13
29121: PUSH
29122: LD_VAR 0 4
29126: PUSH
29127: LD_INT 2
29129: ARRAY
29130: ST_TO_ADDR
// if h + 7 < height then
29131: LD_VAR 0 13
29135: PUSH
29136: LD_INT 7
29138: PLUS
29139: PUSH
29140: LD_VAR 0 15
29144: LESS
29145: IFFALSE 29174
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29147: LD_ADDR_VAR 0 18
29151: PUSH
29152: LD_INT 7
29154: PUSH
29155: LD_INT 28
29157: PUSH
29158: LD_INT 45
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: PUSH
29166: LD_VAR 0 12
29170: ARRAY
29171: ST_TO_ADDR
// break ;
29172: GO 29176
// end ; end ; end ;
29174: GO 29005
29176: POP
29177: POP
// end ; if not weapon then
29178: LD_VAR 0 18
29182: NOT
29183: IFFALSE 29243
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29185: LD_ADDR_VAR 0 5
29189: PUSH
29190: LD_VAR 0 5
29194: PUSH
29195: LD_INT 11
29197: PUSH
29198: LD_INT 30
29200: PUSH
29201: LD_INT 49
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: LIST
29208: DIFF
29209: ST_TO_ADDR
// if not list then
29210: LD_VAR 0 5
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29365
// weapon := list [ rand ( 1 , list ) ] ;
29219: LD_ADDR_VAR 0 18
29223: PUSH
29224: LD_VAR 0 5
29228: PUSH
29229: LD_INT 1
29231: PPUSH
29232: LD_VAR 0 5
29236: PPUSH
29237: CALL_OW 12
29241: ARRAY
29242: ST_TO_ADDR
// end ; if weapon then
29243: LD_VAR 0 18
29247: IFFALSE 29365
// begin tmp := CostOfWeapon ( weapon ) ;
29249: LD_ADDR_VAR 0 14
29253: PUSH
29254: LD_VAR 0 18
29258: PPUSH
29259: CALL_OW 451
29263: ST_TO_ADDR
// j := GetBase ( tower ) ;
29264: LD_ADDR_VAR 0 9
29268: PUSH
29269: LD_VAR 0 1
29273: PPUSH
29274: CALL_OW 274
29278: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29279: LD_VAR 0 9
29283: PPUSH
29284: LD_INT 1
29286: PPUSH
29287: CALL_OW 275
29291: PUSH
29292: LD_VAR 0 14
29296: PUSH
29297: LD_INT 1
29299: ARRAY
29300: GREATEREQUAL
29301: IFFALSE 29327
29303: PUSH
29304: LD_VAR 0 9
29308: PPUSH
29309: LD_INT 2
29311: PPUSH
29312: CALL_OW 275
29316: PUSH
29317: LD_VAR 0 14
29321: PUSH
29322: LD_INT 2
29324: ARRAY
29325: GREATEREQUAL
29326: AND
29327: IFFALSE 29353
29329: PUSH
29330: LD_VAR 0 9
29334: PPUSH
29335: LD_INT 3
29337: PPUSH
29338: CALL_OW 275
29342: PUSH
29343: LD_VAR 0 14
29347: PUSH
29348: LD_INT 3
29350: ARRAY
29351: GREATEREQUAL
29352: AND
29353: IFFALSE 29365
// result := weapon ;
29355: LD_ADDR_VAR 0 3
29359: PUSH
29360: LD_VAR 0 18
29364: ST_TO_ADDR
// end ; end ;
29365: LD_VAR 0 3
29369: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29370: LD_INT 0
29372: PPUSH
29373: PPUSH
// result := true ;
29374: LD_ADDR_VAR 0 3
29378: PUSH
29379: LD_INT 1
29381: ST_TO_ADDR
// if array1 = array2 then
29382: LD_VAR 0 1
29386: PUSH
29387: LD_VAR 0 2
29391: EQUAL
29392: IFFALSE 29452
// begin for i = 1 to array1 do
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: DOUBLE
29400: LD_INT 1
29402: DEC
29403: ST_TO_ADDR
29404: LD_VAR 0 1
29408: PUSH
29409: FOR_TO
29410: IFFALSE 29448
// if array1 [ i ] <> array2 [ i ] then
29412: LD_VAR 0 1
29416: PUSH
29417: LD_VAR 0 4
29421: ARRAY
29422: PUSH
29423: LD_VAR 0 2
29427: PUSH
29428: LD_VAR 0 4
29432: ARRAY
29433: NONEQUAL
29434: IFFALSE 29446
// begin result := false ;
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_INT 0
29443: ST_TO_ADDR
// break ;
29444: GO 29448
// end ;
29446: GO 29409
29448: POP
29449: POP
// end else
29450: GO 29460
// result := false ;
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 0
29459: ST_TO_ADDR
// end ;
29460: LD_VAR 0 3
29464: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29465: LD_INT 0
29467: PPUSH
29468: PPUSH
// if not array1 or not array2 then
29469: LD_VAR 0 1
29473: NOT
29474: IFTRUE 29483
29476: PUSH
29477: LD_VAR 0 2
29481: NOT
29482: OR
29483: IFFALSE 29487
// exit ;
29485: GO 29551
// result := true ;
29487: LD_ADDR_VAR 0 3
29491: PUSH
29492: LD_INT 1
29494: ST_TO_ADDR
// for i = 1 to array1 do
29495: LD_ADDR_VAR 0 4
29499: PUSH
29500: DOUBLE
29501: LD_INT 1
29503: DEC
29504: ST_TO_ADDR
29505: LD_VAR 0 1
29509: PUSH
29510: FOR_TO
29511: IFFALSE 29549
// if array1 [ i ] <> array2 [ i ] then
29513: LD_VAR 0 1
29517: PUSH
29518: LD_VAR 0 4
29522: ARRAY
29523: PUSH
29524: LD_VAR 0 2
29528: PUSH
29529: LD_VAR 0 4
29533: ARRAY
29534: NONEQUAL
29535: IFFALSE 29547
// begin result := false ;
29537: LD_ADDR_VAR 0 3
29541: PUSH
29542: LD_INT 0
29544: ST_TO_ADDR
// break ;
29545: GO 29549
// end ;
29547: GO 29510
29549: POP
29550: POP
// end ;
29551: LD_VAR 0 3
29555: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
// pom := GetBase ( fac ) ;
29561: LD_ADDR_VAR 0 5
29565: PUSH
29566: LD_VAR 0 1
29570: PPUSH
29571: CALL_OW 274
29575: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29576: LD_ADDR_VAR 0 4
29580: PUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: LD_VAR 0 2
29594: PUSH
29595: LD_INT 2
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 2
29603: PUSH
29604: LD_INT 3
29606: ARRAY
29607: PPUSH
29608: LD_VAR 0 2
29612: PUSH
29613: LD_INT 4
29615: ARRAY
29616: PPUSH
29617: CALL_OW 449
29621: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29622: LD_ADDR_VAR 0 3
29626: PUSH
29627: LD_VAR 0 5
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 275
29639: PUSH
29640: LD_VAR 0 4
29644: PUSH
29645: LD_INT 1
29647: ARRAY
29648: GREATEREQUAL
29649: IFFALSE 29675
29651: PUSH
29652: LD_VAR 0 5
29656: PPUSH
29657: LD_INT 2
29659: PPUSH
29660: CALL_OW 275
29664: PUSH
29665: LD_VAR 0 4
29669: PUSH
29670: LD_INT 2
29672: ARRAY
29673: GREATEREQUAL
29674: AND
29675: IFFALSE 29701
29677: PUSH
29678: LD_VAR 0 5
29682: PPUSH
29683: LD_INT 3
29685: PPUSH
29686: CALL_OW 275
29690: PUSH
29691: LD_VAR 0 4
29695: PUSH
29696: LD_INT 3
29698: ARRAY
29699: GREATEREQUAL
29700: AND
29701: ST_TO_ADDR
// end ;
29702: LD_VAR 0 3
29706: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
29711: PPUSH
29712: PPUSH
// pom := GetBase ( building ) ;
29713: LD_ADDR_VAR 0 3
29717: PUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL_OW 274
29727: ST_TO_ADDR
// if not pom then
29728: LD_VAR 0 3
29732: NOT
29733: IFFALSE 29737
// exit ;
29735: GO 29911
// btype := GetBType ( building ) ;
29737: LD_ADDR_VAR 0 5
29741: PUSH
29742: LD_VAR 0 1
29746: PPUSH
29747: CALL_OW 266
29751: ST_TO_ADDR
// if btype = b_armoury then
29752: LD_VAR 0 5
29756: PUSH
29757: LD_INT 4
29759: EQUAL
29760: IFFALSE 29770
// btype := b_barracks ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_INT 5
29769: ST_TO_ADDR
// if btype = b_depot then
29770: LD_VAR 0 5
29774: PUSH
29775: LD_INT 0
29777: EQUAL
29778: IFFALSE 29788
// btype := b_warehouse ;
29780: LD_ADDR_VAR 0 5
29784: PUSH
29785: LD_INT 1
29787: ST_TO_ADDR
// if btype = b_workshop then
29788: LD_VAR 0 5
29792: PUSH
29793: LD_INT 2
29795: EQUAL
29796: IFFALSE 29806
// btype := b_factory ;
29798: LD_ADDR_VAR 0 5
29802: PUSH
29803: LD_INT 3
29805: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29806: LD_ADDR_VAR 0 4
29810: PUSH
29811: LD_VAR 0 5
29815: PPUSH
29816: LD_VAR 0 1
29820: PPUSH
29821: CALL_OW 248
29825: PPUSH
29826: CALL_OW 450
29830: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 3
29840: PPUSH
29841: LD_INT 1
29843: PPUSH
29844: CALL_OW 275
29848: PUSH
29849: LD_VAR 0 4
29853: PUSH
29854: LD_INT 1
29856: ARRAY
29857: GREATEREQUAL
29858: IFFALSE 29884
29860: PUSH
29861: LD_VAR 0 3
29865: PPUSH
29866: LD_INT 2
29868: PPUSH
29869: CALL_OW 275
29873: PUSH
29874: LD_VAR 0 4
29878: PUSH
29879: LD_INT 2
29881: ARRAY
29882: GREATEREQUAL
29883: AND
29884: IFFALSE 29910
29886: PUSH
29887: LD_VAR 0 3
29891: PPUSH
29892: LD_INT 3
29894: PPUSH
29895: CALL_OW 275
29899: PUSH
29900: LD_VAR 0 4
29904: PUSH
29905: LD_INT 3
29907: ARRAY
29908: GREATEREQUAL
29909: AND
29910: ST_TO_ADDR
// end ;
29911: LD_VAR 0 2
29915: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29916: LD_INT 0
29918: PPUSH
29919: PPUSH
29920: PPUSH
// pom := GetBase ( building ) ;
29921: LD_ADDR_VAR 0 4
29925: PUSH
29926: LD_VAR 0 1
29930: PPUSH
29931: CALL_OW 274
29935: ST_TO_ADDR
// if not pom then
29936: LD_VAR 0 4
29940: NOT
29941: IFFALSE 29945
// exit ;
29943: GO 30050
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29945: LD_ADDR_VAR 0 5
29949: PUSH
29950: LD_VAR 0 2
29954: PPUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 248
29964: PPUSH
29965: CALL_OW 450
29969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_VAR 0 4
29979: PPUSH
29980: LD_INT 1
29982: PPUSH
29983: CALL_OW 275
29987: PUSH
29988: LD_VAR 0 5
29992: PUSH
29993: LD_INT 1
29995: ARRAY
29996: GREATEREQUAL
29997: IFFALSE 30023
29999: PUSH
30000: LD_VAR 0 4
30004: PPUSH
30005: LD_INT 2
30007: PPUSH
30008: CALL_OW 275
30012: PUSH
30013: LD_VAR 0 5
30017: PUSH
30018: LD_INT 2
30020: ARRAY
30021: GREATEREQUAL
30022: AND
30023: IFFALSE 30049
30025: PUSH
30026: LD_VAR 0 4
30030: PPUSH
30031: LD_INT 3
30033: PPUSH
30034: CALL_OW 275
30038: PUSH
30039: LD_VAR 0 5
30043: PUSH
30044: LD_INT 3
30046: ARRAY
30047: GREATEREQUAL
30048: AND
30049: ST_TO_ADDR
// end ;
30050: LD_VAR 0 3
30054: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
30055: LD_INT 0
30057: PPUSH
30058: PPUSH
30059: PPUSH
30060: PPUSH
30061: PPUSH
30062: PPUSH
30063: PPUSH
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
// result := false ;
30068: LD_ADDR_VAR 0 8
30072: PUSH
30073: LD_INT 0
30075: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
30076: LD_VAR 0 5
30080: NOT
30081: IFTRUE 30090
30083: PUSH
30084: LD_VAR 0 1
30088: NOT
30089: OR
30090: IFTRUE 30099
30092: PUSH
30093: LD_VAR 0 2
30097: NOT
30098: OR
30099: IFTRUE 30108
30101: PUSH
30102: LD_VAR 0 3
30106: NOT
30107: OR
30108: IFFALSE 30112
// exit ;
30110: GO 30938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
30112: LD_ADDR_VAR 0 14
30116: PUSH
30117: LD_VAR 0 1
30121: PPUSH
30122: LD_VAR 0 2
30126: PPUSH
30127: LD_VAR 0 3
30131: PPUSH
30132: LD_VAR 0 4
30136: PPUSH
30137: LD_VAR 0 5
30141: PUSH
30142: LD_INT 1
30144: ARRAY
30145: PPUSH
30146: CALL_OW 248
30150: PPUSH
30151: LD_INT 0
30153: PPUSH
30154: CALL 32219 0 6
30158: ST_TO_ADDR
// if not hexes then
30159: LD_VAR 0 14
30163: NOT
30164: IFFALSE 30168
// exit ;
30166: GO 30938
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30168: LD_ADDR_VAR 0 17
30172: PUSH
30173: LD_VAR 0 5
30177: PPUSH
30178: LD_INT 22
30180: PUSH
30181: LD_VAR 0 13
30185: PPUSH
30186: CALL_OW 255
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: PUSH
30195: LD_INT 2
30197: PUSH
30198: LD_INT 30
30200: PUSH
30201: LD_INT 0
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PPUSH
30227: CALL_OW 72
30231: ST_TO_ADDR
// for i = 1 to hexes do
30232: LD_ADDR_VAR 0 9
30236: PUSH
30237: DOUBLE
30238: LD_INT 1
30240: DEC
30241: ST_TO_ADDR
30242: LD_VAR 0 14
30246: PUSH
30247: FOR_TO
30248: IFFALSE 30936
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30250: LD_ADDR_VAR 0 13
30254: PUSH
30255: LD_VAR 0 14
30259: PUSH
30260: LD_VAR 0 9
30264: ARRAY
30265: PUSH
30266: LD_INT 1
30268: ARRAY
30269: PPUSH
30270: LD_VAR 0 14
30274: PUSH
30275: LD_VAR 0 9
30279: ARRAY
30280: PUSH
30281: LD_INT 2
30283: ARRAY
30284: PPUSH
30285: CALL_OW 428
30289: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30290: LD_VAR 0 14
30294: PUSH
30295: LD_VAR 0 9
30299: ARRAY
30300: PUSH
30301: LD_INT 1
30303: ARRAY
30304: PPUSH
30305: LD_VAR 0 14
30309: PUSH
30310: LD_VAR 0 9
30314: ARRAY
30315: PUSH
30316: LD_INT 2
30318: ARRAY
30319: PPUSH
30320: CALL_OW 351
30324: IFTRUE 30363
30326: PUSH
30327: LD_VAR 0 14
30331: PUSH
30332: LD_VAR 0 9
30336: ARRAY
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: LD_VAR 0 14
30346: PUSH
30347: LD_VAR 0 9
30351: ARRAY
30352: PUSH
30353: LD_INT 2
30355: ARRAY
30356: PPUSH
30357: CALL_OW 488
30361: NOT
30362: OR
30363: IFTRUE 30380
30365: PUSH
30366: LD_VAR 0 13
30370: PPUSH
30371: CALL_OW 247
30375: PUSH
30376: LD_INT 3
30378: EQUAL
30379: OR
30380: IFFALSE 30386
// exit ;
30382: POP
30383: POP
30384: GO 30938
// if not tmp then
30386: LD_VAR 0 13
30390: NOT
30391: IFFALSE 30395
// continue ;
30393: GO 30247
// result := true ;
30395: LD_ADDR_VAR 0 8
30399: PUSH
30400: LD_INT 1
30402: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30403: LD_VAR 0 6
30407: IFFALSE 30424
30409: PUSH
30410: LD_VAR 0 13
30414: PPUSH
30415: CALL_OW 247
30419: PUSH
30420: LD_INT 2
30422: EQUAL
30423: AND
30424: IFFALSE 30441
30426: PUSH
30427: LD_VAR 0 13
30431: PPUSH
30432: CALL_OW 263
30436: PUSH
30437: LD_INT 1
30439: EQUAL
30440: AND
30441: IFFALSE 30605
// begin if IsDrivenBy ( tmp ) then
30443: LD_VAR 0 13
30447: PPUSH
30448: CALL_OW 311
30452: IFFALSE 30456
// continue ;
30454: GO 30247
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30456: LD_VAR 0 6
30460: PPUSH
30461: LD_INT 3
30463: PUSH
30464: LD_INT 60
30466: PUSH
30467: EMPTY
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: PUSH
30474: LD_INT 3
30476: PUSH
30477: LD_INT 55
30479: PUSH
30480: EMPTY
30481: LIST
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: PPUSH
30491: CALL_OW 72
30495: IFFALSE 30603
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30497: LD_ADDR_VAR 0 18
30501: PUSH
30502: LD_VAR 0 6
30506: PPUSH
30507: LD_INT 3
30509: PUSH
30510: LD_INT 60
30512: PUSH
30513: EMPTY
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 3
30522: PUSH
30523: LD_INT 55
30525: PUSH
30526: EMPTY
30527: LIST
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: EMPTY
30534: LIST
30535: LIST
30536: PPUSH
30537: CALL_OW 72
30541: PUSH
30542: LD_INT 1
30544: ARRAY
30545: ST_TO_ADDR
// if IsInUnit ( driver ) then
30546: LD_VAR 0 18
30550: PPUSH
30551: CALL_OW 310
30555: IFFALSE 30566
// ComExit ( driver ) ;
30557: LD_VAR 0 18
30561: PPUSH
30562: CALL 56219 0 1
// AddComEnterUnit ( driver , tmp ) ;
30566: LD_VAR 0 18
30570: PPUSH
30571: LD_VAR 0 13
30575: PPUSH
30576: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30580: LD_VAR 0 18
30584: PPUSH
30585: LD_VAR 0 7
30589: PPUSH
30590: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30594: LD_VAR 0 18
30598: PPUSH
30599: CALL_OW 181
// end ; continue ;
30603: GO 30247
// end ; if not cleaners or not tmp in cleaners then
30605: LD_VAR 0 6
30609: NOT
30610: IFTRUE 30625
30612: PUSH
30613: LD_VAR 0 13
30617: PUSH
30618: LD_VAR 0 6
30622: IN
30623: NOT
30624: OR
30625: IFFALSE 30934
// begin if dep then
30627: LD_VAR 0 17
30631: IFFALSE 30767
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30633: LD_ADDR_VAR 0 16
30637: PUSH
30638: LD_VAR 0 17
30642: PUSH
30643: LD_INT 1
30645: ARRAY
30646: PPUSH
30647: CALL_OW 250
30651: PPUSH
30652: LD_VAR 0 17
30656: PUSH
30657: LD_INT 1
30659: ARRAY
30660: PPUSH
30661: CALL_OW 254
30665: PPUSH
30666: LD_INT 5
30668: PPUSH
30669: CALL_OW 272
30673: PUSH
30674: LD_VAR 0 17
30678: PUSH
30679: LD_INT 1
30681: ARRAY
30682: PPUSH
30683: CALL_OW 251
30687: PPUSH
30688: LD_VAR 0 17
30692: PUSH
30693: LD_INT 1
30695: ARRAY
30696: PPUSH
30697: CALL_OW 254
30701: PPUSH
30702: LD_INT 5
30704: PPUSH
30705: CALL_OW 273
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30714: LD_VAR 0 16
30718: PUSH
30719: LD_INT 1
30721: ARRAY
30722: PPUSH
30723: LD_VAR 0 16
30727: PUSH
30728: LD_INT 2
30730: ARRAY
30731: PPUSH
30732: CALL_OW 488
30736: IFFALSE 30767
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30738: LD_VAR 0 13
30742: PPUSH
30743: LD_VAR 0 16
30747: PUSH
30748: LD_INT 1
30750: ARRAY
30751: PPUSH
30752: LD_VAR 0 16
30756: PUSH
30757: LD_INT 2
30759: ARRAY
30760: PPUSH
30761: CALL_OW 111
// continue ;
30765: GO 30247
// end ; end ; r := GetDir ( tmp ) ;
30767: LD_ADDR_VAR 0 15
30771: PUSH
30772: LD_VAR 0 13
30776: PPUSH
30777: CALL_OW 254
30781: ST_TO_ADDR
// if r = 5 then
30782: LD_VAR 0 15
30786: PUSH
30787: LD_INT 5
30789: EQUAL
30790: IFFALSE 30800
// r := 0 ;
30792: LD_ADDR_VAR 0 15
30796: PUSH
30797: LD_INT 0
30799: ST_TO_ADDR
// for j = r to 5 do
30800: LD_ADDR_VAR 0 10
30804: PUSH
30805: DOUBLE
30806: LD_VAR 0 15
30810: DEC
30811: ST_TO_ADDR
30812: LD_INT 5
30814: PUSH
30815: FOR_TO
30816: IFFALSE 30932
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30818: LD_ADDR_VAR 0 11
30822: PUSH
30823: LD_VAR 0 13
30827: PPUSH
30828: CALL_OW 250
30832: PPUSH
30833: LD_VAR 0 10
30837: PPUSH
30838: LD_INT 2
30840: PPUSH
30841: CALL_OW 272
30845: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30846: LD_ADDR_VAR 0 12
30850: PUSH
30851: LD_VAR 0 13
30855: PPUSH
30856: CALL_OW 251
30860: PPUSH
30861: LD_VAR 0 10
30865: PPUSH
30866: LD_INT 2
30868: PPUSH
30869: CALL_OW 273
30873: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30874: LD_VAR 0 11
30878: PPUSH
30879: LD_VAR 0 12
30883: PPUSH
30884: CALL_OW 488
30888: IFFALSE 30907
30890: PUSH
30891: LD_VAR 0 11
30895: PPUSH
30896: LD_VAR 0 12
30900: PPUSH
30901: CALL_OW 428
30905: NOT
30906: AND
30907: IFFALSE 30930
// begin ComMoveXY ( tmp , _x , _y ) ;
30909: LD_VAR 0 13
30913: PPUSH
30914: LD_VAR 0 11
30918: PPUSH
30919: LD_VAR 0 12
30923: PPUSH
30924: CALL_OW 111
// break ;
30928: GO 30932
// end ; end ;
30930: GO 30815
30932: POP
30933: POP
// end ; end ;
30934: GO 30247
30936: POP
30937: POP
// end ;
30938: LD_VAR 0 8
30942: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30943: LD_INT 0
30945: PPUSH
// result := true ;
30946: LD_ADDR_VAR 0 3
30950: PUSH
30951: LD_INT 1
30953: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30954: LD_VAR 0 2
30958: PUSH
30959: LD_INT 24
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30973
30965: LD_INT 33
30967: DOUBLE
30968: EQUAL
30969: IFTRUE 30973
30971: GO 30998
30973: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30974: LD_ADDR_VAR 0 3
30978: PUSH
30979: LD_INT 32
30981: PPUSH
30982: LD_VAR 0 1
30986: PPUSH
30987: CALL_OW 321
30991: PUSH
30992: LD_INT 2
30994: EQUAL
30995: ST_TO_ADDR
30996: GO 31314
30998: LD_INT 20
31000: DOUBLE
31001: EQUAL
31002: IFTRUE 31006
31004: GO 31031
31006: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
31007: LD_ADDR_VAR 0 3
31011: PUSH
31012: LD_INT 6
31014: PPUSH
31015: LD_VAR 0 1
31019: PPUSH
31020: CALL_OW 321
31024: PUSH
31025: LD_INT 2
31027: EQUAL
31028: ST_TO_ADDR
31029: GO 31314
31031: LD_INT 22
31033: DOUBLE
31034: EQUAL
31035: IFTRUE 31045
31037: LD_INT 36
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31070
31045: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 15
31053: PPUSH
31054: LD_VAR 0 1
31058: PPUSH
31059: CALL_OW 321
31063: PUSH
31064: LD_INT 2
31066: EQUAL
31067: ST_TO_ADDR
31068: GO 31314
31070: LD_INT 30
31072: DOUBLE
31073: EQUAL
31074: IFTRUE 31078
31076: GO 31103
31078: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
31079: LD_ADDR_VAR 0 3
31083: PUSH
31084: LD_INT 20
31086: PPUSH
31087: LD_VAR 0 1
31091: PPUSH
31092: CALL_OW 321
31096: PUSH
31097: LD_INT 2
31099: EQUAL
31100: ST_TO_ADDR
31101: GO 31314
31103: LD_INT 28
31105: DOUBLE
31106: EQUAL
31107: IFTRUE 31117
31109: LD_INT 21
31111: DOUBLE
31112: EQUAL
31113: IFTRUE 31117
31115: GO 31142
31117: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
31118: LD_ADDR_VAR 0 3
31122: PUSH
31123: LD_INT 21
31125: PPUSH
31126: LD_VAR 0 1
31130: PPUSH
31131: CALL_OW 321
31135: PUSH
31136: LD_INT 2
31138: EQUAL
31139: ST_TO_ADDR
31140: GO 31314
31142: LD_INT 16
31144: DOUBLE
31145: EQUAL
31146: IFTRUE 31150
31148: GO 31175
31150: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
31151: LD_ADDR_VAR 0 3
31155: PUSH
31156: LD_INT 84
31158: PPUSH
31159: LD_VAR 0 1
31163: PPUSH
31164: CALL_OW 321
31168: PUSH
31169: LD_INT 2
31171: EQUAL
31172: ST_TO_ADDR
31173: GO 31314
31175: LD_INT 19
31177: DOUBLE
31178: EQUAL
31179: IFTRUE 31189
31181: LD_INT 23
31183: DOUBLE
31184: EQUAL
31185: IFTRUE 31189
31187: GO 31214
31189: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
31190: LD_ADDR_VAR 0 3
31194: PUSH
31195: LD_INT 83
31197: PPUSH
31198: LD_VAR 0 1
31202: PPUSH
31203: CALL_OW 321
31207: PUSH
31208: LD_INT 2
31210: EQUAL
31211: ST_TO_ADDR
31212: GO 31314
31214: LD_INT 17
31216: DOUBLE
31217: EQUAL
31218: IFTRUE 31222
31220: GO 31247
31222: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
31223: LD_ADDR_VAR 0 3
31227: PUSH
31228: LD_INT 39
31230: PPUSH
31231: LD_VAR 0 1
31235: PPUSH
31236: CALL_OW 321
31240: PUSH
31241: LD_INT 2
31243: EQUAL
31244: ST_TO_ADDR
31245: GO 31314
31247: LD_INT 18
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31280
31255: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31256: LD_ADDR_VAR 0 3
31260: PUSH
31261: LD_INT 40
31263: PPUSH
31264: LD_VAR 0 1
31268: PPUSH
31269: CALL_OW 321
31273: PUSH
31274: LD_INT 2
31276: EQUAL
31277: ST_TO_ADDR
31278: GO 31314
31280: LD_INT 27
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31313
31288: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31289: LD_ADDR_VAR 0 3
31293: PUSH
31294: LD_INT 35
31296: PPUSH
31297: LD_VAR 0 1
31301: PPUSH
31302: CALL_OW 321
31306: PUSH
31307: LD_INT 2
31309: EQUAL
31310: ST_TO_ADDR
31311: GO 31314
31313: POP
// end ;
31314: LD_VAR 0 3
31318: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31319: LD_INT 0
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
// result := false ;
31332: LD_ADDR_VAR 0 6
31336: PUSH
31337: LD_INT 0
31339: ST_TO_ADDR
// if btype = b_depot then
31340: LD_VAR 0 2
31344: PUSH
31345: LD_INT 0
31347: EQUAL
31348: IFFALSE 31360
// begin result := true ;
31350: LD_ADDR_VAR 0 6
31354: PUSH
31355: LD_INT 1
31357: ST_TO_ADDR
// exit ;
31358: GO 32214
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31360: LD_VAR 0 1
31364: NOT
31365: IFTRUE 31390
31367: PUSH
31368: LD_VAR 0 1
31372: PPUSH
31373: CALL_OW 266
31377: PUSH
31378: LD_INT 0
31380: PUSH
31381: LD_INT 1
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: IN
31388: NOT
31389: OR
31390: IFTRUE 31399
31392: PUSH
31393: LD_VAR 0 2
31397: NOT
31398: OR
31399: IFTRUE 31435
31401: PUSH
31402: LD_VAR 0 5
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: LD_INT 2
31415: PUSH
31416: LD_INT 3
31418: PUSH
31419: LD_INT 4
31421: PUSH
31422: LD_INT 5
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: IN
31433: NOT
31434: OR
31435: IFTRUE 31454
31437: PUSH
31438: LD_VAR 0 3
31442: PPUSH
31443: LD_VAR 0 4
31447: PPUSH
31448: CALL_OW 488
31452: NOT
31453: OR
31454: IFFALSE 31458
// exit ;
31456: GO 32214
// side := GetSide ( depot ) ;
31458: LD_ADDR_VAR 0 9
31462: PUSH
31463: LD_VAR 0 1
31467: PPUSH
31468: CALL_OW 255
31472: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31473: LD_VAR 0 9
31477: PPUSH
31478: LD_VAR 0 2
31482: PPUSH
31483: CALL 30943 0 2
31487: NOT
31488: IFFALSE 31492
// exit ;
31490: GO 32214
// pom := GetBase ( depot ) ;
31492: LD_ADDR_VAR 0 10
31496: PUSH
31497: LD_VAR 0 1
31501: PPUSH
31502: CALL_OW 274
31506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31507: LD_ADDR_VAR 0 11
31511: PUSH
31512: LD_VAR 0 2
31516: PPUSH
31517: LD_VAR 0 1
31521: PPUSH
31522: CALL_OW 248
31526: PPUSH
31527: CALL_OW 450
31531: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31532: LD_VAR 0 10
31536: PPUSH
31537: LD_INT 1
31539: PPUSH
31540: CALL_OW 275
31544: PUSH
31545: LD_VAR 0 11
31549: PUSH
31550: LD_INT 1
31552: ARRAY
31553: GREATEREQUAL
31554: IFFALSE 31580
31556: PUSH
31557: LD_VAR 0 10
31561: PPUSH
31562: LD_INT 2
31564: PPUSH
31565: CALL_OW 275
31569: PUSH
31570: LD_VAR 0 11
31574: PUSH
31575: LD_INT 2
31577: ARRAY
31578: GREATEREQUAL
31579: AND
31580: IFFALSE 31606
31582: PUSH
31583: LD_VAR 0 10
31587: PPUSH
31588: LD_INT 3
31590: PPUSH
31591: CALL_OW 275
31595: PUSH
31596: LD_VAR 0 11
31600: PUSH
31601: LD_INT 3
31603: ARRAY
31604: GREATEREQUAL
31605: AND
31606: NOT
31607: IFFALSE 31611
// exit ;
31609: GO 32214
// if GetBType ( depot ) = b_depot then
31611: LD_VAR 0 1
31615: PPUSH
31616: CALL_OW 266
31620: PUSH
31621: LD_INT 0
31623: EQUAL
31624: IFFALSE 31636
// dist := 28 else
31626: LD_ADDR_VAR 0 14
31630: PUSH
31631: LD_INT 28
31633: ST_TO_ADDR
31634: GO 31644
// dist := 36 ;
31636: LD_ADDR_VAR 0 14
31640: PUSH
31641: LD_INT 36
31643: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31644: LD_VAR 0 1
31648: PPUSH
31649: LD_VAR 0 3
31653: PPUSH
31654: LD_VAR 0 4
31658: PPUSH
31659: CALL_OW 297
31663: PUSH
31664: LD_VAR 0 14
31668: GREATER
31669: IFFALSE 31673
// exit ;
31671: GO 32214
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31673: LD_ADDR_VAR 0 12
31677: PUSH
31678: LD_VAR 0 2
31682: PPUSH
31683: LD_VAR 0 3
31687: PPUSH
31688: LD_VAR 0 4
31692: PPUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: LD_VAR 0 1
31702: PPUSH
31703: CALL_OW 248
31707: PPUSH
31708: LD_INT 0
31710: PPUSH
31711: CALL 32219 0 6
31715: ST_TO_ADDR
// if not hexes then
31716: LD_VAR 0 12
31720: NOT
31721: IFFALSE 31725
// exit ;
31723: GO 32214
// hex := GetHexInfo ( x , y ) ;
31725: LD_ADDR_VAR 0 15
31729: PUSH
31730: LD_VAR 0 3
31734: PPUSH
31735: LD_VAR 0 4
31739: PPUSH
31740: CALL_OW 546
31744: ST_TO_ADDR
// if hex [ 1 ] then
31745: LD_VAR 0 15
31749: PUSH
31750: LD_INT 1
31752: ARRAY
31753: IFFALSE 31757
// exit ;
31755: GO 32214
// height := hex [ 2 ] ;
31757: LD_ADDR_VAR 0 13
31761: PUSH
31762: LD_VAR 0 15
31766: PUSH
31767: LD_INT 2
31769: ARRAY
31770: ST_TO_ADDR
// for i = 1 to hexes do
31771: LD_ADDR_VAR 0 7
31775: PUSH
31776: DOUBLE
31777: LD_INT 1
31779: DEC
31780: ST_TO_ADDR
31781: LD_VAR 0 12
31785: PUSH
31786: FOR_TO
31787: IFFALSE 32131
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31789: LD_VAR 0 12
31793: PUSH
31794: LD_VAR 0 7
31798: ARRAY
31799: PUSH
31800: LD_INT 1
31802: ARRAY
31803: PPUSH
31804: LD_VAR 0 12
31808: PUSH
31809: LD_VAR 0 7
31813: ARRAY
31814: PUSH
31815: LD_INT 2
31817: ARRAY
31818: PPUSH
31819: CALL_OW 488
31823: NOT
31824: IFTRUE 31866
31826: PUSH
31827: LD_VAR 0 12
31831: PUSH
31832: LD_VAR 0 7
31836: ARRAY
31837: PUSH
31838: LD_INT 1
31840: ARRAY
31841: PPUSH
31842: LD_VAR 0 12
31846: PUSH
31847: LD_VAR 0 7
31851: ARRAY
31852: PUSH
31853: LD_INT 2
31855: ARRAY
31856: PPUSH
31857: CALL_OW 428
31861: PUSH
31862: LD_INT 0
31864: GREATER
31865: OR
31866: IFTRUE 31904
31868: PUSH
31869: LD_VAR 0 12
31873: PUSH
31874: LD_VAR 0 7
31878: ARRAY
31879: PUSH
31880: LD_INT 1
31882: ARRAY
31883: PPUSH
31884: LD_VAR 0 12
31888: PUSH
31889: LD_VAR 0 7
31893: ARRAY
31894: PUSH
31895: LD_INT 2
31897: ARRAY
31898: PPUSH
31899: CALL_OW 351
31903: OR
31904: IFFALSE 31910
// exit ;
31906: POP
31907: POP
31908: GO 32214
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31910: LD_ADDR_VAR 0 8
31914: PUSH
31915: LD_VAR 0 12
31919: PUSH
31920: LD_VAR 0 7
31924: ARRAY
31925: PUSH
31926: LD_INT 1
31928: ARRAY
31929: PPUSH
31930: LD_VAR 0 12
31934: PUSH
31935: LD_VAR 0 7
31939: ARRAY
31940: PUSH
31941: LD_INT 2
31943: ARRAY
31944: PPUSH
31945: CALL_OW 546
31949: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31950: LD_VAR 0 8
31954: PUSH
31955: LD_INT 1
31957: ARRAY
31958: IFTRUE 31980
31960: PUSH
31961: LD_VAR 0 8
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PUSH
31970: LD_VAR 0 13
31974: PUSH
31975: LD_INT 2
31977: PLUS
31978: GREATER
31979: OR
31980: IFTRUE 32002
31982: PUSH
31983: LD_VAR 0 8
31987: PUSH
31988: LD_INT 2
31990: ARRAY
31991: PUSH
31992: LD_VAR 0 13
31996: PUSH
31997: LD_INT 2
31999: MINUS
32000: LESS
32001: OR
32002: IFTRUE 32070
32004: PUSH
32005: LD_VAR 0 8
32009: PUSH
32010: LD_INT 3
32012: ARRAY
32013: PUSH
32014: LD_INT 0
32016: PUSH
32017: LD_INT 8
32019: PUSH
32020: LD_INT 9
32022: PUSH
32023: LD_INT 10
32025: PUSH
32026: LD_INT 11
32028: PUSH
32029: LD_INT 12
32031: PUSH
32032: LD_INT 13
32034: PUSH
32035: LD_INT 16
32037: PUSH
32038: LD_INT 17
32040: PUSH
32041: LD_INT 18
32043: PUSH
32044: LD_INT 19
32046: PUSH
32047: LD_INT 20
32049: PUSH
32050: LD_INT 21
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: IN
32068: NOT
32069: OR
32070: IFTRUE 32083
32072: PUSH
32073: LD_VAR 0 8
32077: PUSH
32078: LD_INT 5
32080: ARRAY
32081: NOT
32082: OR
32083: IFTRUE 32123
32085: PUSH
32086: LD_VAR 0 8
32090: PUSH
32091: LD_INT 6
32093: ARRAY
32094: PUSH
32095: LD_INT 1
32097: PUSH
32098: LD_INT 2
32100: PUSH
32101: LD_INT 7
32103: PUSH
32104: LD_INT 9
32106: PUSH
32107: LD_INT 10
32109: PUSH
32110: LD_INT 11
32112: PUSH
32113: EMPTY
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: IN
32121: NOT
32122: OR
32123: IFFALSE 32129
// exit ;
32125: POP
32126: POP
32127: GO 32214
// end ;
32129: GO 31786
32131: POP
32132: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32133: LD_VAR 0 9
32137: PPUSH
32138: LD_VAR 0 3
32142: PPUSH
32143: LD_VAR 0 4
32147: PPUSH
32148: LD_INT 20
32150: PPUSH
32151: CALL 24033 0 4
32155: PUSH
32156: LD_INT 4
32158: ARRAY
32159: IFFALSE 32163
// exit ;
32161: GO 32214
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32163: LD_VAR 0 2
32167: PUSH
32168: LD_INT 29
32170: PUSH
32171: LD_INT 30
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: IN
32178: IFFALSE 32202
32180: PUSH
32181: LD_VAR 0 3
32185: PPUSH
32186: LD_VAR 0 4
32190: PPUSH
32191: LD_VAR 0 9
32195: PPUSH
32196: CALL_OW 440
32200: NOT
32201: AND
32202: IFFALSE 32206
// exit ;
32204: GO 32214
// result := true ;
32206: LD_ADDR_VAR 0 6
32210: PUSH
32211: LD_INT 1
32213: ST_TO_ADDR
// end ;
32214: LD_VAR 0 6
32218: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32219: LD_INT 0
32221: PPUSH
32222: PPUSH
32223: PPUSH
32224: PPUSH
32225: PPUSH
32226: PPUSH
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
32242: PPUSH
32243: PPUSH
32244: PPUSH
32245: PPUSH
32246: PPUSH
32247: PPUSH
32248: PPUSH
32249: PPUSH
32250: PPUSH
32251: PPUSH
32252: PPUSH
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
32257: PPUSH
32258: PPUSH
32259: PPUSH
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
32270: PPUSH
32271: PPUSH
32272: PPUSH
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
32278: PPUSH
// result = [ ] ;
32279: LD_ADDR_VAR 0 7
32283: PUSH
32284: EMPTY
32285: ST_TO_ADDR
// temp_list = [ ] ;
32286: LD_ADDR_VAR 0 9
32290: PUSH
32291: EMPTY
32292: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32293: LD_VAR 0 4
32297: PUSH
32298: LD_INT 0
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: LD_INT 2
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 4
32312: PUSH
32313: LD_INT 5
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: IN
32324: NOT
32325: IFTRUE 32368
32327: PUSH
32328: LD_VAR 0 1
32332: PUSH
32333: LD_INT 0
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: IN
32343: IFFALSE 32367
32345: PUSH
32346: LD_VAR 0 5
32350: PUSH
32351: LD_INT 1
32353: PUSH
32354: LD_INT 2
32356: PUSH
32357: LD_INT 3
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: IN
32365: NOT
32366: AND
32367: OR
32368: IFFALSE 32372
// exit ;
32370: GO 50771
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32372: LD_VAR 0 1
32376: PUSH
32377: LD_INT 6
32379: PUSH
32380: LD_INT 7
32382: PUSH
32383: LD_INT 8
32385: PUSH
32386: LD_INT 13
32388: PUSH
32389: LD_INT 12
32391: PUSH
32392: LD_INT 15
32394: PUSH
32395: LD_INT 11
32397: PUSH
32398: LD_INT 14
32400: PUSH
32401: LD_INT 10
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: IN
32415: IFFALSE 32425
// btype = b_lab ;
32417: LD_ADDR_VAR 0 1
32421: PUSH
32422: LD_INT 6
32424: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32425: LD_VAR 0 6
32429: PUSH
32430: LD_INT 0
32432: PUSH
32433: LD_INT 1
32435: PUSH
32436: LD_INT 2
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: LIST
32443: IN
32444: NOT
32445: IFTRUE 32513
32447: PUSH
32448: LD_VAR 0 1
32452: PUSH
32453: LD_INT 0
32455: PUSH
32456: LD_INT 1
32458: PUSH
32459: LD_INT 2
32461: PUSH
32462: LD_INT 3
32464: PUSH
32465: LD_INT 6
32467: PUSH
32468: LD_INT 36
32470: PUSH
32471: LD_INT 4
32473: PUSH
32474: LD_INT 5
32476: PUSH
32477: LD_INT 31
32479: PUSH
32480: LD_INT 32
32482: PUSH
32483: LD_INT 33
32485: PUSH
32486: EMPTY
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: IN
32499: NOT
32500: IFFALSE 32512
32502: PUSH
32503: LD_VAR 0 6
32507: PUSH
32508: LD_INT 1
32510: EQUAL
32511: AND
32512: OR
32513: IFTRUE 32545
32515: PUSH
32516: LD_VAR 0 1
32520: PUSH
32521: LD_INT 2
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: IN
32531: NOT
32532: IFFALSE 32544
32534: PUSH
32535: LD_VAR 0 6
32539: PUSH
32540: LD_INT 2
32542: EQUAL
32543: AND
32544: OR
32545: IFFALSE 32555
// mode = 0 ;
32547: LD_ADDR_VAR 0 6
32551: PUSH
32552: LD_INT 0
32554: ST_TO_ADDR
// case mode of 0 :
32555: LD_VAR 0 6
32559: PUSH
32560: LD_INT 0
32562: DOUBLE
32563: EQUAL
32564: IFTRUE 32568
32566: GO 44021
32568: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32569: LD_ADDR_VAR 0 11
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 0
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 0
32586: PUSH
32587: LD_INT 1
32589: NEG
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: PUSH
32598: LD_INT 0
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 1
32607: PUSH
32608: LD_INT 1
32610: PUSH
32611: EMPTY
32612: LIST
32613: LIST
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: LD_INT 1
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: LD_INT 0
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: NEG
32651: PUSH
32652: LD_INT 2
32654: NEG
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: PUSH
32660: LD_INT 0
32662: PUSH
32663: LD_INT 2
32665: NEG
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: EMPTY
32679: LIST
32680: LIST
32681: PUSH
32682: LD_INT 1
32684: PUSH
32685: LD_INT 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 0
32694: PUSH
32695: LD_INT 2
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: NEG
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 1
32715: PUSH
32716: LD_INT 3
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: LD_INT 3
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: NEG
32736: PUSH
32737: LD_INT 2
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32762: LD_ADDR_VAR 0 12
32766: PUSH
32767: LD_INT 0
32769: PUSH
32770: LD_INT 0
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 0
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 0
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: NEG
32821: PUSH
32822: LD_INT 0
32824: PUSH
32825: EMPTY
32826: LIST
32827: LIST
32828: PUSH
32829: LD_INT 1
32831: NEG
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 1
32846: NEG
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 2
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 2
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: NEG
32875: PUSH
32876: LD_INT 1
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 2
32885: NEG
32886: PUSH
32887: LD_INT 0
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 2
32896: NEG
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 2
32908: NEG
32909: PUSH
32910: LD_INT 1
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 3
32919: NEG
32920: PUSH
32921: LD_INT 0
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 3
32930: NEG
32931: PUSH
32932: LD_INT 1
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: EMPTY
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32958: LD_ADDR_VAR 0 13
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: LD_INT 1
32978: NEG
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 1
32986: PUSH
32987: LD_INT 0
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 1
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 1
33016: NEG
33017: PUSH
33018: LD_INT 0
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: LD_INT 1
33031: NEG
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 1
33039: NEG
33040: PUSH
33041: LD_INT 2
33043: NEG
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: PUSH
33049: LD_INT 2
33051: PUSH
33052: LD_INT 1
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: PUSH
33059: LD_INT 2
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: LD_INT 2
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: PUSH
33079: LD_INT 2
33081: NEG
33082: PUSH
33083: LD_INT 1
33085: NEG
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 2
33093: NEG
33094: PUSH
33095: LD_INT 2
33097: NEG
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 2
33105: NEG
33106: PUSH
33107: LD_INT 3
33109: NEG
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 3
33117: NEG
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 3
33129: NEG
33130: PUSH
33131: LD_INT 3
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33157: LD_ADDR_VAR 0 14
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 0
33174: PUSH
33175: LD_INT 1
33177: NEG
33178: PUSH
33179: EMPTY
33180: LIST
33181: LIST
33182: PUSH
33183: LD_INT 1
33185: PUSH
33186: LD_INT 0
33188: PUSH
33189: EMPTY
33190: LIST
33191: LIST
33192: PUSH
33193: LD_INT 1
33195: PUSH
33196: LD_INT 1
33198: PUSH
33199: EMPTY
33200: LIST
33201: LIST
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: LD_INT 1
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 1
33215: NEG
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 1
33230: NEG
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 1
33238: NEG
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 0
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 1
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 2
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 2
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 1
33292: NEG
33293: PUSH
33294: LD_INT 1
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: NEG
33304: PUSH
33305: LD_INT 3
33307: NEG
33308: PUSH
33309: EMPTY
33310: LIST
33311: LIST
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: LD_INT 3
33318: NEG
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: LD_INT 2
33329: NEG
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: EMPTY
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33353: LD_ADDR_VAR 0 15
33357: PUSH
33358: LD_INT 0
33360: PUSH
33361: LD_INT 0
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: PUSH
33368: LD_INT 0
33370: PUSH
33371: LD_INT 1
33373: NEG
33374: PUSH
33375: EMPTY
33376: LIST
33377: LIST
33378: PUSH
33379: LD_INT 1
33381: PUSH
33382: LD_INT 0
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: PUSH
33389: LD_INT 1
33391: PUSH
33392: LD_INT 1
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 0
33401: PUSH
33402: LD_INT 1
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 1
33411: NEG
33412: PUSH
33413: LD_INT 0
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 1
33422: NEG
33423: PUSH
33424: LD_INT 1
33426: NEG
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 1
33434: PUSH
33435: LD_INT 1
33437: NEG
33438: PUSH
33439: EMPTY
33440: LIST
33441: LIST
33442: PUSH
33443: LD_INT 2
33445: PUSH
33446: LD_INT 0
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: PUSH
33453: LD_INT 2
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: NEG
33466: PUSH
33467: LD_INT 1
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: NEG
33477: PUSH
33478: LD_INT 0
33480: PUSH
33481: EMPTY
33482: LIST
33483: LIST
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: LD_INT 1
33491: NEG
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 2
33499: PUSH
33500: LD_INT 1
33502: NEG
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: PUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 0
33513: PUSH
33514: EMPTY
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 3
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: EMPTY
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33546: LD_ADDR_VAR 0 16
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 0
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 0
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: PUSH
33575: LD_INT 0
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: PUSH
33585: LD_INT 1
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 0
33594: PUSH
33595: LD_INT 1
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 1
33604: NEG
33605: PUSH
33606: LD_INT 0
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: PUSH
33613: LD_INT 1
33615: NEG
33616: PUSH
33617: LD_INT 1
33619: NEG
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 1
33627: NEG
33628: PUSH
33629: LD_INT 2
33631: NEG
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 2
33669: NEG
33670: PUSH
33671: LD_INT 1
33673: NEG
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 2
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 3
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 3
33703: PUSH
33704: LD_INT 3
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 3
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33739: LD_ADDR_VAR 0 17
33743: PUSH
33744: LD_INT 0
33746: PUSH
33747: LD_INT 0
33749: PUSH
33750: EMPTY
33751: LIST
33752: LIST
33753: PUSH
33754: LD_INT 0
33756: PUSH
33757: LD_INT 1
33759: NEG
33760: PUSH
33761: EMPTY
33762: LIST
33763: LIST
33764: PUSH
33765: LD_INT 1
33767: PUSH
33768: LD_INT 0
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 1
33777: PUSH
33778: LD_INT 1
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: NEG
33798: PUSH
33799: LD_INT 0
33801: PUSH
33802: EMPTY
33803: LIST
33804: LIST
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: LD_INT 1
33812: NEG
33813: PUSH
33814: EMPTY
33815: LIST
33816: LIST
33817: PUSH
33818: LD_INT 1
33820: NEG
33821: PUSH
33822: LD_INT 2
33824: NEG
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 0
33832: PUSH
33833: LD_INT 2
33835: NEG
33836: PUSH
33837: EMPTY
33838: LIST
33839: LIST
33840: PUSH
33841: LD_INT 1
33843: PUSH
33844: LD_INT 1
33846: NEG
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: PUSH
33852: LD_INT 2
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: EMPTY
33859: LIST
33860: LIST
33861: PUSH
33862: LD_INT 2
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: EMPTY
33869: LIST
33870: LIST
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: LD_INT 2
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: LD_INT 2
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: LD_INT 0
33894: PUSH
33895: LD_INT 2
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: PUSH
33902: LD_INT 1
33904: NEG
33905: PUSH
33906: LD_INT 1
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: PUSH
33913: LD_INT 2
33915: NEG
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: EMPTY
33921: LIST
33922: LIST
33923: PUSH
33924: LD_INT 2
33926: NEG
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: LD_INT 2
33942: NEG
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33969: LD_ADDR_VAR 0 18
33973: PUSH
33974: LD_INT 0
33976: PUSH
33977: LD_INT 0
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: PUSH
33984: LD_INT 0
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: LD_INT 0
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 1
34007: PUSH
34008: LD_INT 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 0
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 1
34027: NEG
34028: PUSH
34029: LD_INT 0
34031: PUSH
34032: EMPTY
34033: LIST
34034: LIST
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: LD_INT 1
34042: NEG
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 1
34050: NEG
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: LD_INT 0
34062: PUSH
34063: LD_INT 2
34065: NEG
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 2
34084: PUSH
34085: LD_INT 0
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 1
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: PUSH
34102: LD_INT 2
34104: PUSH
34105: LD_INT 2
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 1
34114: PUSH
34115: LD_INT 2
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: LD_INT 0
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: EMPTY
34129: LIST
34130: LIST
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: LD_INT 1
34138: PUSH
34139: EMPTY
34140: LIST
34141: LIST
34142: PUSH
34143: LD_INT 2
34145: NEG
34146: PUSH
34147: LD_INT 0
34149: PUSH
34150: EMPTY
34151: LIST
34152: LIST
34153: PUSH
34154: LD_INT 2
34156: NEG
34157: PUSH
34158: LD_INT 1
34160: NEG
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: LD_INT 2
34172: NEG
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34199: LD_ADDR_VAR 0 19
34203: PUSH
34204: LD_INT 0
34206: PUSH
34207: LD_INT 0
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: LD_INT 1
34219: NEG
34220: PUSH
34221: EMPTY
34222: LIST
34223: LIST
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: LD_INT 0
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 1
34237: PUSH
34238: LD_INT 1
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 1
34250: PUSH
34251: EMPTY
34252: LIST
34253: LIST
34254: PUSH
34255: LD_INT 1
34257: NEG
34258: PUSH
34259: LD_INT 0
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: NEG
34281: PUSH
34282: LD_INT 2
34284: NEG
34285: PUSH
34286: EMPTY
34287: LIST
34288: LIST
34289: PUSH
34290: LD_INT 0
34292: PUSH
34293: LD_INT 2
34295: NEG
34296: PUSH
34297: EMPTY
34298: LIST
34299: LIST
34300: PUSH
34301: LD_INT 1
34303: PUSH
34304: LD_INT 1
34306: NEG
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 0
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: PUSH
34322: LD_INT 2
34324: PUSH
34325: LD_INT 1
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: LD_INT 2
34334: PUSH
34335: LD_INT 2
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: PUSH
34342: LD_INT 1
34344: PUSH
34345: LD_INT 2
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: LD_INT 0
34354: PUSH
34355: LD_INT 2
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 1
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 2
34375: NEG
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: NEG
34387: PUSH
34388: LD_INT 1
34390: NEG
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: LD_INT 2
34402: NEG
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34429: LD_ADDR_VAR 0 20
34433: PUSH
34434: LD_INT 0
34436: PUSH
34437: LD_INT 0
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: PUSH
34444: LD_INT 0
34446: PUSH
34447: LD_INT 1
34449: NEG
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 1
34467: PUSH
34468: LD_INT 1
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 0
34477: PUSH
34478: LD_INT 1
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: LD_INT 1
34487: NEG
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PUSH
34496: LD_INT 1
34498: NEG
34499: PUSH
34500: LD_INT 1
34502: NEG
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 2
34514: NEG
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 2
34525: NEG
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: PUSH
34545: LD_INT 0
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 2
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: EMPTY
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 2
34564: PUSH
34565: LD_INT 2
34567: PUSH
34568: EMPTY
34569: LIST
34570: LIST
34571: PUSH
34572: LD_INT 1
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: PUSH
34592: LD_INT 1
34594: NEG
34595: PUSH
34596: LD_INT 1
34598: PUSH
34599: EMPTY
34600: LIST
34601: LIST
34602: PUSH
34603: LD_INT 2
34605: NEG
34606: PUSH
34607: LD_INT 0
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 2
34616: NEG
34617: PUSH
34618: LD_INT 1
34620: NEG
34621: PUSH
34622: EMPTY
34623: LIST
34624: LIST
34625: PUSH
34626: LD_INT 2
34628: NEG
34629: PUSH
34630: LD_INT 2
34632: NEG
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34659: LD_ADDR_VAR 0 21
34663: PUSH
34664: LD_INT 0
34666: PUSH
34667: LD_INT 0
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 0
34676: PUSH
34677: LD_INT 1
34679: NEG
34680: PUSH
34681: EMPTY
34682: LIST
34683: LIST
34684: PUSH
34685: LD_INT 1
34687: PUSH
34688: LD_INT 0
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 1
34697: PUSH
34698: LD_INT 1
34700: PUSH
34701: EMPTY
34702: LIST
34703: LIST
34704: PUSH
34705: LD_INT 0
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: PUSH
34715: LD_INT 1
34717: NEG
34718: PUSH
34719: LD_INT 0
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: LD_INT 1
34728: NEG
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 2
34744: NEG
34745: PUSH
34746: EMPTY
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 0
34752: PUSH
34753: LD_INT 2
34755: NEG
34756: PUSH
34757: EMPTY
34758: LIST
34759: LIST
34760: PUSH
34761: LD_INT 1
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: LD_INT 0
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 2
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 2
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: LD_INT 2
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: LD_INT 2
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: EMPTY
34830: LIST
34831: LIST
34832: PUSH
34833: LD_INT 2
34835: NEG
34836: PUSH
34837: LD_INT 0
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: NEG
34847: PUSH
34848: LD_INT 1
34850: NEG
34851: PUSH
34852: EMPTY
34853: LIST
34854: LIST
34855: PUSH
34856: LD_INT 2
34858: NEG
34859: PUSH
34860: LD_INT 2
34862: NEG
34863: PUSH
34864: EMPTY
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34889: LD_ADDR_VAR 0 22
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 0
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 1
34917: PUSH
34918: LD_INT 0
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 1
34927: PUSH
34928: LD_INT 1
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 0
34937: PUSH
34938: LD_INT 1
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: PUSH
34945: LD_INT 1
34947: NEG
34948: PUSH
34949: LD_INT 0
34951: PUSH
34952: EMPTY
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: LD_INT 1
34962: NEG
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 2
34974: NEG
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: LD_INT 2
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: PUSH
35005: LD_INT 0
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: PUSH
35012: LD_INT 2
35014: PUSH
35015: LD_INT 1
35017: PUSH
35018: EMPTY
35019: LIST
35020: LIST
35021: PUSH
35022: LD_INT 2
35024: PUSH
35025: LD_INT 2
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: PUSH
35035: LD_INT 2
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: NEG
35055: PUSH
35056: LD_INT 1
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: LD_INT 0
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35119: LD_ADDR_VAR 0 23
35123: PUSH
35124: LD_INT 0
35126: PUSH
35127: LD_INT 0
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: LD_INT 1
35139: NEG
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: LD_INT 0
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: PUSH
35155: LD_INT 1
35157: PUSH
35158: LD_INT 1
35160: PUSH
35161: EMPTY
35162: LIST
35163: LIST
35164: PUSH
35165: LD_INT 0
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: LD_INT 0
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: PUSH
35186: LD_INT 1
35188: NEG
35189: PUSH
35190: LD_INT 1
35192: NEG
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 0
35212: PUSH
35213: LD_INT 2
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: PUSH
35235: LD_INT 0
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 1
35247: PUSH
35248: EMPTY
35249: LIST
35250: LIST
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: PUSH
35262: LD_INT 1
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: EMPTY
35269: LIST
35270: LIST
35271: PUSH
35272: LD_INT 0
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: EMPTY
35279: LIST
35280: LIST
35281: PUSH
35282: LD_INT 1
35284: NEG
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: EMPTY
35290: LIST
35291: LIST
35292: PUSH
35293: LD_INT 2
35295: NEG
35296: PUSH
35297: LD_INT 0
35299: PUSH
35300: EMPTY
35301: LIST
35302: LIST
35303: PUSH
35304: LD_INT 2
35306: NEG
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 2
35322: NEG
35323: PUSH
35324: EMPTY
35325: LIST
35326: LIST
35327: PUSH
35328: LD_INT 2
35330: NEG
35331: PUSH
35332: LD_INT 3
35334: NEG
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: PUSH
35340: LD_INT 1
35342: NEG
35343: PUSH
35344: LD_INT 3
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 1
35354: PUSH
35355: LD_INT 2
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 2
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35399: LD_ADDR_VAR 0 24
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 0
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 1
35427: PUSH
35428: LD_INT 0
35430: PUSH
35431: EMPTY
35432: LIST
35433: LIST
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: LD_INT 1
35440: PUSH
35441: EMPTY
35442: LIST
35443: LIST
35444: PUSH
35445: LD_INT 0
35447: PUSH
35448: LD_INT 1
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: LD_INT 1
35457: NEG
35458: PUSH
35459: LD_INT 0
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PUSH
35466: LD_INT 1
35468: NEG
35469: PUSH
35470: LD_INT 1
35472: NEG
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: NEG
35481: PUSH
35482: LD_INT 2
35484: NEG
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: LD_INT 2
35495: NEG
35496: PUSH
35497: EMPTY
35498: LIST
35499: LIST
35500: PUSH
35501: LD_INT 1
35503: PUSH
35504: LD_INT 1
35506: NEG
35507: PUSH
35508: EMPTY
35509: LIST
35510: LIST
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PUSH
35522: LD_INT 2
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: PUSH
35535: LD_INT 2
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 1
35544: PUSH
35545: LD_INT 2
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 0
35554: PUSH
35555: LD_INT 2
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 1
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: LD_INT 2
35575: NEG
35576: PUSH
35577: LD_INT 0
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: NEG
35587: PUSH
35588: LD_INT 1
35590: NEG
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 2
35598: NEG
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 2
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 3
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: EMPTY
35637: LIST
35638: LIST
35639: PUSH
35640: LD_INT 3
35642: PUSH
35643: LD_INT 2
35645: PUSH
35646: EMPTY
35647: LIST
35648: LIST
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35675: LD_ADDR_VAR 0 25
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: LD_INT 0
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 0
35692: PUSH
35693: LD_INT 1
35695: NEG
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: LD_INT 1
35703: PUSH
35704: LD_INT 0
35706: PUSH
35707: EMPTY
35708: LIST
35709: LIST
35710: PUSH
35711: LD_INT 1
35713: PUSH
35714: LD_INT 1
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 0
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 1
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 0
35768: PUSH
35769: LD_INT 2
35771: NEG
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 1
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 2
35800: PUSH
35801: LD_INT 1
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: LD_INT 2
35810: PUSH
35811: LD_INT 2
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 2
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 2
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: NEG
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 2
35851: NEG
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 2
35862: NEG
35863: PUSH
35864: LD_INT 1
35866: NEG
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 2
35874: NEG
35875: PUSH
35876: LD_INT 2
35878: NEG
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: LD_INT 3
35886: PUSH
35887: LD_INT 1
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 3
35896: PUSH
35897: LD_INT 2
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: PUSH
35917: LD_INT 3
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35949: LD_ADDR_VAR 0 26
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 0
35959: PUSH
35960: EMPTY
35961: LIST
35962: LIST
35963: PUSH
35964: LD_INT 0
35966: PUSH
35967: LD_INT 1
35969: NEG
35970: PUSH
35971: EMPTY
35972: LIST
35973: LIST
35974: PUSH
35975: LD_INT 1
35977: PUSH
35978: LD_INT 0
35980: PUSH
35981: EMPTY
35982: LIST
35983: LIST
35984: PUSH
35985: LD_INT 1
35987: PUSH
35988: LD_INT 1
35990: PUSH
35991: EMPTY
35992: LIST
35993: LIST
35994: PUSH
35995: LD_INT 0
35997: PUSH
35998: LD_INT 1
36000: PUSH
36001: EMPTY
36002: LIST
36003: LIST
36004: PUSH
36005: LD_INT 1
36007: NEG
36008: PUSH
36009: LD_INT 0
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 1
36030: NEG
36031: PUSH
36032: LD_INT 2
36034: NEG
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 2
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 2
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 2
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: PUSH
36095: LD_INT 2
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 1
36114: NEG
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: NEG
36126: PUSH
36127: LD_INT 0
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PUSH
36134: LD_INT 2
36136: NEG
36137: PUSH
36138: LD_INT 1
36140: NEG
36141: PUSH
36142: EMPTY
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 2
36148: NEG
36149: PUSH
36150: LD_INT 2
36152: NEG
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 3
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 3
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: NEG
36181: PUSH
36182: LD_INT 2
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 2
36191: NEG
36192: PUSH
36193: LD_INT 1
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36225: LD_ADDR_VAR 0 27
36229: PUSH
36230: LD_INT 0
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: NEG
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: PUSH
36264: LD_INT 1
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: PUSH
36271: LD_INT 0
36273: PUSH
36274: LD_INT 1
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: LD_INT 1
36298: NEG
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: LD_INT 2
36310: NEG
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 0
36318: PUSH
36319: LD_INT 2
36321: NEG
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 0
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: PUSH
36348: LD_INT 2
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 2
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 1
36370: PUSH
36371: LD_INT 2
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 0
36380: PUSH
36381: LD_INT 2
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: NEG
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: LD_INT 2
36401: NEG
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: NEG
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: LD_INT 2
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: NEG
36437: PUSH
36438: LD_INT 2
36440: PUSH
36441: EMPTY
36442: LIST
36443: LIST
36444: PUSH
36445: LD_INT 2
36447: NEG
36448: PUSH
36449: LD_INT 1
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 3
36458: NEG
36459: PUSH
36460: LD_INT 1
36462: NEG
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: PUSH
36468: LD_INT 3
36470: NEG
36471: PUSH
36472: LD_INT 2
36474: NEG
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: LIST
36504: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36505: LD_ADDR_VAR 0 28
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: LD_INT 0
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: LD_INT 1
36525: NEG
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: LD_INT 1
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 0
36553: PUSH
36554: LD_INT 1
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 1
36563: NEG
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: NEG
36579: PUSH
36580: EMPTY
36581: LIST
36582: LIST
36583: PUSH
36584: LD_INT 1
36586: NEG
36587: PUSH
36588: LD_INT 2
36590: NEG
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 1
36609: PUSH
36610: LD_INT 1
36612: NEG
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 0
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 2
36630: PUSH
36631: LD_INT 1
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 2
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 0
36660: PUSH
36661: LD_INT 2
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: NEG
36671: PUSH
36672: LD_INT 1
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: NEG
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 2
36704: NEG
36705: PUSH
36706: LD_INT 2
36708: NEG
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 2
36716: NEG
36717: PUSH
36718: LD_INT 3
36720: NEG
36721: PUSH
36722: EMPTY
36723: LIST
36724: LIST
36725: PUSH
36726: LD_INT 1
36728: NEG
36729: PUSH
36730: LD_INT 3
36732: NEG
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: PUSH
36738: LD_INT 3
36740: NEG
36741: PUSH
36742: LD_INT 1
36744: NEG
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: PUSH
36750: LD_INT 3
36752: NEG
36753: PUSH
36754: LD_INT 2
36756: NEG
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: EMPTY
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36787: LD_ADDR_VAR 0 29
36791: PUSH
36792: LD_INT 0
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 0
36804: PUSH
36805: LD_INT 1
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 1
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 1
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 1
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: LD_INT 0
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 1
36856: NEG
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 1
36868: NEG
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: PUSH
36903: LD_INT 0
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 2
36912: PUSH
36913: LD_INT 1
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 2
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 2
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: LD_INT 1
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 2
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 2
36977: NEG
36978: PUSH
36979: LD_INT 3
36981: NEG
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 2
36989: PUSH
36990: LD_INT 1
36992: NEG
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 3
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 1
37010: PUSH
37011: LD_INT 3
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: NEG
37021: PUSH
37022: LD_INT 2
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: NEG
37032: PUSH
37033: LD_INT 2
37035: NEG
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37066: LD_ADDR_VAR 0 30
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: LD_INT 0
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: LD_INT 1
37086: NEG
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PUSH
37092: LD_INT 1
37094: PUSH
37095: LD_INT 0
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 1
37104: PUSH
37105: LD_INT 1
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 0
37114: PUSH
37115: LD_INT 1
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: NEG
37125: PUSH
37126: LD_INT 0
37128: PUSH
37129: EMPTY
37130: LIST
37131: LIST
37132: PUSH
37133: LD_INT 1
37135: NEG
37136: PUSH
37137: LD_INT 1
37139: NEG
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 1
37147: NEG
37148: PUSH
37149: LD_INT 2
37151: NEG
37152: PUSH
37153: EMPTY
37154: LIST
37155: LIST
37156: PUSH
37157: LD_INT 0
37159: PUSH
37160: LD_INT 2
37162: NEG
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: PUSH
37171: LD_INT 1
37173: NEG
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 0
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: EMPTY
37196: LIST
37197: LIST
37198: PUSH
37199: LD_INT 2
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: EMPTY
37206: LIST
37207: LIST
37208: PUSH
37209: LD_INT 1
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: LD_INT 1
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 0
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 2
37243: NEG
37244: PUSH
37245: LD_INT 1
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: LD_INT 3
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: LD_INT 2
37270: NEG
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: PUSH
37276: LD_INT 3
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 3
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 2
37298: NEG
37299: PUSH
37300: LD_INT 1
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 3
37309: NEG
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37344: LD_ADDR_VAR 0 31
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 0
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: PUSH
37359: LD_INT 0
37361: PUSH
37362: LD_INT 1
37364: NEG
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: PUSH
37370: LD_INT 1
37372: PUSH
37373: LD_INT 0
37375: PUSH
37376: EMPTY
37377: LIST
37378: LIST
37379: PUSH
37380: LD_INT 1
37382: PUSH
37383: LD_INT 1
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 0
37392: PUSH
37393: LD_INT 1
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: PUSH
37400: LD_INT 1
37402: NEG
37403: PUSH
37404: LD_INT 0
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 1
37413: NEG
37414: PUSH
37415: LD_INT 1
37417: NEG
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: NEG
37426: PUSH
37427: LD_INT 2
37429: NEG
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: LD_INT 1
37440: NEG
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PUSH
37446: LD_INT 2
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: PUSH
37459: LD_INT 1
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 1
37478: PUSH
37479: LD_INT 2
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 2
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: NEG
37499: PUSH
37500: LD_INT 1
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: NEG
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: NEG
37522: PUSH
37523: LD_INT 2
37525: NEG
37526: PUSH
37527: EMPTY
37528: LIST
37529: LIST
37530: PUSH
37531: LD_INT 2
37533: NEG
37534: PUSH
37535: LD_INT 3
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 2
37545: PUSH
37546: LD_INT 1
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 3
37556: PUSH
37557: LD_INT 1
37559: PUSH
37560: EMPTY
37561: LIST
37562: LIST
37563: PUSH
37564: LD_INT 1
37566: PUSH
37567: LD_INT 3
37569: PUSH
37570: EMPTY
37571: LIST
37572: LIST
37573: PUSH
37574: LD_INT 1
37576: NEG
37577: PUSH
37578: LD_INT 2
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 3
37587: NEG
37588: PUSH
37589: LD_INT 2
37591: NEG
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37622: LD_ADDR_VAR 0 32
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: LD_INT 1
37642: NEG
37643: PUSH
37644: EMPTY
37645: LIST
37646: LIST
37647: PUSH
37648: LD_INT 1
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: LD_INT 1
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 0
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 1
37680: NEG
37681: PUSH
37682: LD_INT 0
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 1
37691: NEG
37692: PUSH
37693: LD_INT 1
37695: NEG
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: NEG
37704: PUSH
37705: LD_INT 2
37707: NEG
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: PUSH
37713: LD_INT 0
37715: PUSH
37716: LD_INT 2
37718: NEG
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 2
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 2
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 1
37757: PUSH
37758: LD_INT 2
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: LD_INT 2
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: LD_INT 0
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PUSH
37797: LD_INT 2
37799: NEG
37800: PUSH
37801: LD_INT 1
37803: NEG
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: LD_INT 3
37815: NEG
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: PUSH
37824: LD_INT 2
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 3
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: EMPTY
37839: LIST
37840: LIST
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 3
37847: PUSH
37848: EMPTY
37849: LIST
37850: LIST
37851: PUSH
37852: LD_INT 2
37854: NEG
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 3
37865: NEG
37866: PUSH
37867: LD_INT 1
37869: NEG
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: LIST
37879: LIST
37880: LIST
37881: LIST
37882: LIST
37883: LIST
37884: LIST
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37900: LD_ADDR_VAR 0 33
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: LD_INT 0
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: LD_INT 1
37920: NEG
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: PUSH
37926: LD_INT 1
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 1
37938: PUSH
37939: LD_INT 1
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 1
37958: NEG
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: NEG
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: NEG
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 1
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: LD_INT 0
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: LD_INT 2
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 2
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: EMPTY
38050: LIST
38051: LIST
38052: PUSH
38053: LD_INT 2
38055: NEG
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: NEG
38067: PUSH
38068: LD_INT 1
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: NEG
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 2
38090: NEG
38091: PUSH
38092: LD_INT 3
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 3
38113: PUSH
38114: LD_INT 1
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 3
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: NEG
38134: PUSH
38135: LD_INT 2
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 3
38144: NEG
38145: PUSH
38146: LD_INT 2
38148: NEG
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38179: LD_ADDR_VAR 0 34
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 0
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 1
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 1
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 1
38237: NEG
38238: PUSH
38239: LD_INT 0
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 1
38260: NEG
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: LD_INT 1
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: PUSH
38305: LD_INT 2
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: PUSH
38312: LD_INT 1
38314: PUSH
38315: LD_INT 2
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: NEG
38336: PUSH
38337: LD_INT 0
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 2
38358: NEG
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: LD_INT 3
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 3
38393: PUSH
38394: LD_INT 2
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 2
38403: PUSH
38404: LD_INT 3
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: LD_INT 2
38413: NEG
38414: PUSH
38415: LD_INT 1
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 3
38424: NEG
38425: PUSH
38426: LD_INT 1
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38459: LD_ADDR_VAR 0 35
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 1
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 1
38517: NEG
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: NEG
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: PUSH
38538: LD_INT 2
38540: PUSH
38541: LD_INT 1
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: LD_INT 1
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38571: LD_ADDR_VAR 0 36
38575: PUSH
38576: LD_INT 0
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: LD_INT 1
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: LD_INT 0
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 1
38629: NEG
38630: PUSH
38631: LD_INT 0
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 1
38640: NEG
38641: PUSH
38642: LD_INT 1
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 1
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38683: LD_ADDR_VAR 0 37
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 0
38700: PUSH
38701: LD_INT 1
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: LD_INT 0
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 0
38731: PUSH
38732: LD_INT 1
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: NEG
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: NEG
38753: PUSH
38754: LD_INT 1
38756: NEG
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: LD_INT 1
38767: NEG
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38795: LD_ADDR_VAR 0 38
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 0
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 1
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: PUSH
38877: LD_INT 1
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38907: LD_ADDR_VAR 0 39
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
39019: LD_ADDR_VAR 0 40
39023: PUSH
39024: LD_INT 0
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 0
39036: PUSH
39037: LD_INT 1
39039: NEG
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: LD_INT 0
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 0
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 1
39077: NEG
39078: PUSH
39079: LD_INT 0
39081: PUSH
39082: EMPTY
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: LD_INT 1
39092: NEG
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39131: LD_ADDR_VAR 0 41
39135: PUSH
39136: LD_INT 0
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: LD_INT 1
39151: NEG
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: LD_INT 1
39159: PUSH
39160: LD_INT 0
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 1
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 2
39321: NEG
39322: PUSH
39323: LD_INT 3
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 3
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 3
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 3
39374: PUSH
39375: LD_INT 3
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: PUSH
39385: LD_INT 3
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: LD_INT 1
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 3
39405: NEG
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 3
39428: NEG
39429: PUSH
39430: LD_INT 2
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: LD_INT 3
39444: NEG
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39481: LD_ADDR_VAR 0 42
39485: PUSH
39486: LD_INT 0
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: LD_INT 1
39501: NEG
39502: PUSH
39503: EMPTY
39504: LIST
39505: LIST
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: EMPTY
39514: LIST
39515: LIST
39516: PUSH
39517: LD_INT 1
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 0
39529: PUSH
39530: LD_INT 1
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 0
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 1
39562: NEG
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 2
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 1
39588: NEG
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 2
39596: PUSH
39597: LD_INT 1
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 2
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: LD_INT 2
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 0
39626: PUSH
39627: LD_INT 2
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 1
39636: NEG
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 2
39647: NEG
39648: PUSH
39649: LD_INT 1
39651: NEG
39652: PUSH
39653: EMPTY
39654: LIST
39655: LIST
39656: PUSH
39657: LD_INT 2
39659: NEG
39660: PUSH
39661: LD_INT 2
39663: NEG
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 3
39675: NEG
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: NEG
39684: PUSH
39685: LD_INT 3
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: LD_INT 3
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 3
39727: PUSH
39728: LD_INT 3
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 3
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 0
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 1
39767: NEG
39768: PUSH
39769: LD_INT 2
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 3
39778: NEG
39779: PUSH
39780: LD_INT 2
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: NEG
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39831: LD_ADDR_VAR 0 43
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: LD_INT 0
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 1
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 0
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: NEG
39890: PUSH
39891: LD_INT 0
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 1
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 1
39912: NEG
39913: PUSH
39914: LD_INT 2
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 0
39924: PUSH
39925: LD_INT 2
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: PUSH
39936: LD_INT 1
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 2
40008: NEG
40009: PUSH
40010: LD_INT 1
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 3
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 3
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 1
40085: PUSH
40086: LD_INT 3
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 0
40095: PUSH
40096: LD_INT 3
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 1
40105: NEG
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 2
40116: NEG
40117: PUSH
40118: LD_INT 1
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 3
40127: NEG
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 3
40138: NEG
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40179: LD_ADDR_VAR 0 44
40183: PUSH
40184: LD_INT 0
40186: PUSH
40187: LD_INT 0
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 1
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: LD_INT 1
40230: PUSH
40231: EMPTY
40232: LIST
40233: LIST
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: LD_INT 0
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 1
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: NEG
40261: PUSH
40262: LD_INT 2
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 1
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: LD_INT 0
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 2
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 3
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 3
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 3
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: EMPTY
40417: LIST
40418: LIST
40419: PUSH
40420: LD_INT 3
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 2
40432: PUSH
40433: LD_INT 3
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 2
40442: NEG
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 3
40453: NEG
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: NEG
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 3
40476: NEG
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 3
40488: NEG
40489: PUSH
40490: LD_INT 3
40492: NEG
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40529: LD_ADDR_VAR 0 45
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 0
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: PUSH
40558: LD_INT 0
40560: PUSH
40561: EMPTY
40562: LIST
40563: LIST
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: LD_INT 1
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: LD_INT 1
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: NEG
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 1
40598: NEG
40599: PUSH
40600: LD_INT 1
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 1
40610: NEG
40611: PUSH
40612: LD_INT 2
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 2
40625: NEG
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 1
40636: NEG
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: LD_INT 1
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 2
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 1
40664: PUSH
40665: LD_INT 2
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: LD_INT 2
40711: NEG
40712: PUSH
40713: EMPTY
40714: LIST
40715: LIST
40716: PUSH
40717: LD_INT 2
40719: NEG
40720: PUSH
40721: LD_INT 3
40723: NEG
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 3
40735: NEG
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 3
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 2
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 2
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 3
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: PUSH
40786: LD_INT 3
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: PUSH
40796: LD_INT 3
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 0
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: NEG
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 3
40826: NEG
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 3
40838: NEG
40839: PUSH
40840: LD_INT 3
40842: NEG
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40879: LD_ADDR_VAR 0 46
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 1
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 0
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 1
40937: NEG
40938: PUSH
40939: LD_INT 0
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 1
40948: NEG
40949: PUSH
40950: LD_INT 1
40952: NEG
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 2
40964: NEG
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 0
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: LD_INT 1
40986: NEG
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 2
41004: PUSH
41005: LD_INT 1
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: PUSH
41015: LD_INT 2
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: LD_INT 2
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 3
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 3
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 2
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: PUSH
41114: LD_INT 0
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: LD_INT 1
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 3
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 1
41153: NEG
41154: PUSH
41155: LD_INT 2
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 2
41164: NEG
41165: PUSH
41166: LD_INT 1
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 3
41175: NEG
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 1
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41227: LD_ADDR_VAR 0 47
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 0
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 0
41275: PUSH
41276: LD_INT 1
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: EMPTY
41291: LIST
41292: LIST
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 1
41308: NEG
41309: PUSH
41310: LD_INT 2
41312: NEG
41313: PUSH
41314: EMPTY
41315: LIST
41316: LIST
41317: PUSH
41318: LD_INT 0
41320: PUSH
41321: LD_INT 2
41323: NEG
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: PUSH
41329: LD_INT 1
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: LD_INT 1
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41378: LD_ADDR_VAR 0 48
41382: PUSH
41383: LD_INT 0
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 0
41395: PUSH
41396: LD_INT 1
41398: NEG
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: LD_INT 1
41429: PUSH
41430: EMPTY
41431: LIST
41432: LIST
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: LD_INT 1
41451: NEG
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 1
41459: NEG
41460: PUSH
41461: LD_INT 2
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 0
41471: PUSH
41472: LD_INT 2
41474: NEG
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: LD_INT 0
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: PUSH
41504: LD_INT 1
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41525: LD_ADDR_VAR 0 49
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 1
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: EMPTY
41589: LIST
41590: LIST
41591: PUSH
41592: LD_INT 1
41594: NEG
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 2
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 1
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: PUSH
41638: LD_INT 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 1
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41669: LD_ADDR_VAR 0 50
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 0
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: LD_INT 0
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 2
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 1
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: NEG
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41813: LD_ADDR_VAR 0 51
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 0
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 1
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: PUSH
41902: LD_INT 0
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 1
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41960: LD_ADDR_VAR 0 52
41964: PUSH
41965: LD_INT 0
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 0
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: NEG
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: LD_INT 2
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: NEG
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: LD_INT 2
42091: NEG
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42111: LD_ADDR_VAR 0 53
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 1
42192: NEG
42193: PUSH
42194: LD_INT 2
42196: NEG
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 2
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 2
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: PUSH
42247: LD_INT 2
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 2
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42341: LD_ADDR_VAR 0 54
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: LD_INT 1
42361: NEG
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: LD_INT 0
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 0
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 1
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: PUSH
42477: LD_INT 2
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: LD_INT 2
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 2
42517: NEG
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 2
42528: NEG
42529: PUSH
42530: LD_INT 1
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42571: LD_ADDR_VAR 0 55
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 0
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 0
42619: PUSH
42620: LD_INT 1
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 1
42629: NEG
42630: PUSH
42631: LD_INT 0
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 1
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: LD_INT 2
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 0
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 1
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: LD_INT 2
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 0
42726: PUSH
42727: LD_INT 2
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: LD_INT 1
42736: NEG
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 2
42747: NEG
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: LD_INT 2
42774: NEG
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42801: LD_ADDR_VAR 0 56
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 0
42818: PUSH
42819: LD_INT 1
42821: NEG
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: NEG
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 1
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 2
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: LIST
43019: LIST
43020: LIST
43021: LIST
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43031: LD_ADDR_VAR 0 57
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 0
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 1
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 0
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 1
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 0
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: PUSH
43194: LD_INT 1
43196: NEG
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 2
43207: NEG
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 2
43234: NEG
43235: PUSH
43236: EMPTY
43237: LIST
43238: LIST
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43261: LD_ADDR_VAR 0 58
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 1
43289: PUSH
43290: LD_INT 0
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 1
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 0
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 1
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 0
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: LD_INT 1
43368: NEG
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: LD_INT 1
43452: NEG
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 2
43464: NEG
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43491: LD_ADDR_VAR 0 59
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43579: LD_ADDR_VAR 0 60
43583: PUSH
43584: LD_INT 0
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: LD_INT 1
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43667: LD_ADDR_VAR 0 61
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43755: LD_ADDR_VAR 0 62
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 1
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43843: LD_ADDR_VAR 0 63
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: LD_INT 1
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: LD_INT 1
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: LD_INT 1
43916: NEG
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: EMPTY
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43931: LD_ADDR_VAR 0 64
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: LD_INT 1
43951: NEG
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: NEG
44001: PUSH
44002: LD_INT 1
44004: NEG
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: LIST
44014: LIST
44015: LIST
44016: LIST
44017: LIST
44018: ST_TO_ADDR
// end ; 1 :
44019: GO 49916
44021: LD_INT 1
44023: DOUBLE
44024: EQUAL
44025: IFTRUE 44029
44027: GO 46652
44029: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44030: LD_ADDR_VAR 0 11
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: LD_INT 3
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 3
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44074: LD_ADDR_VAR 0 12
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 3
44092: PUSH
44093: LD_INT 0
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: LD_INT 1
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: LIST
44114: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44115: LD_ADDR_VAR 0 13
44119: PUSH
44120: LD_INT 3
44122: PUSH
44123: LD_INT 2
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: PUSH
44133: LD_INT 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: PUSH
44140: LD_INT 2
44142: PUSH
44143: LD_INT 3
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: LIST
44154: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44155: LD_ADDR_VAR 0 14
44159: PUSH
44160: LD_INT 1
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 3
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: LIST
44195: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44196: LD_ADDR_VAR 0 15
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: NEG
44215: PUSH
44216: LD_INT 0
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 3
44225: NEG
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: LIST
44239: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44240: LD_ADDR_VAR 0 16
44244: PUSH
44245: LD_INT 2
44247: NEG
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 3
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44286: LD_ADDR_VAR 0 17
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 3
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 3
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 2
44319: NEG
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44330: LD_ADDR_VAR 0 18
44334: PUSH
44335: LD_INT 2
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: LD_INT 0
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 3
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: LIST
44370: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44371: LD_ADDR_VAR 0 19
44375: PUSH
44376: LD_INT 3
44378: PUSH
44379: LD_INT 2
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: PUSH
44386: LD_INT 3
44388: PUSH
44389: LD_INT 3
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: LD_INT 3
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44411: LD_ADDR_VAR 0 20
44415: PUSH
44416: LD_INT 1
44418: PUSH
44419: LD_INT 3
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 3
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: NEG
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: LIST
44451: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44452: LD_ADDR_VAR 0 21
44456: PUSH
44457: LD_INT 2
44459: NEG
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: NEG
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 3
44481: NEG
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: LIST
44495: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44496: LD_ADDR_VAR 0 22
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 3
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: LD_INT 2
44519: NEG
44520: PUSH
44521: EMPTY
44522: LIST
44523: LIST
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: LD_INT 3
44531: NEG
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: LIST
44541: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44542: LD_ADDR_VAR 0 23
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 1
44560: NEG
44561: PUSH
44562: LD_INT 4
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44586: LD_ADDR_VAR 0 24
44590: PUSH
44591: LD_INT 3
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 1
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 4
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44627: LD_ADDR_VAR 0 25
44631: PUSH
44632: LD_INT 3
44634: PUSH
44635: LD_INT 3
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 4
44644: PUSH
44645: LD_INT 3
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 3
44654: PUSH
44655: LD_INT 4
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: LIST
44666: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44667: LD_ADDR_VAR 0 26
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: LIST
44707: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44708: LD_ADDR_VAR 0 27
44712: PUSH
44713: LD_INT 3
44715: NEG
44716: PUSH
44717: LD_INT 0
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 3
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 4
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: LIST
44751: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44752: LD_ADDR_VAR 0 28
44756: PUSH
44757: LD_INT 3
44759: NEG
44760: PUSH
44761: LD_INT 3
44763: NEG
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: NEG
44772: PUSH
44773: LD_INT 4
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 4
44783: NEG
44784: PUSH
44785: LD_INT 3
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: EMPTY
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44798: LD_ADDR_VAR 0 29
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: LD_INT 3
44809: NEG
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: LD_INT 3
44820: NEG
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 4
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 0
44851: PUSH
44852: LD_INT 4
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: NEG
44874: PUSH
44875: LD_INT 5
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: LD_INT 5
44888: NEG
44889: PUSH
44890: EMPTY
44891: LIST
44892: LIST
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: LD_INT 4
44899: NEG
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 6
44911: NEG
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 6
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: PUSH
44931: LD_INT 5
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: LIST
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44953: LD_ADDR_VAR 0 30
44957: PUSH
44958: LD_INT 2
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 3
44991: PUSH
44992: LD_INT 1
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 4
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 4
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 4
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 5
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 5
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 6
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 6
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: EMPTY
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
45096: LD_ADDR_VAR 0 31
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: LD_INT 2
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: PUSH
45114: LD_INT 3
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 3
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 4
45143: PUSH
45144: LD_INT 4
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 3
45153: PUSH
45154: LD_INT 4
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 5
45163: PUSH
45164: LD_INT 4
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 5
45173: PUSH
45174: LD_INT 5
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 4
45183: PUSH
45184: LD_INT 5
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 6
45193: PUSH
45194: LD_INT 5
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 6
45203: PUSH
45204: LD_INT 6
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 5
45213: PUSH
45214: LD_INT 6
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: EMPTY
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45235: LD_ADDR_VAR 0 32
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: LD_INT 3
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 1
45262: NEG
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 4
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 0
45283: PUSH
45284: LD_INT 4
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 1
45293: NEG
45294: PUSH
45295: LD_INT 3
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 5
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 5
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 6
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: LD_INT 6
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: NEG
45356: PUSH
45357: LD_INT 5
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45378: LD_ADDR_VAR 0 33
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 3
45419: NEG
45420: PUSH
45421: LD_INT 1
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 4
45430: NEG
45431: PUSH
45432: LD_INT 0
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 4
45441: NEG
45442: PUSH
45443: LD_INT 1
45445: NEG
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 4
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 5
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 5
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 5
45487: NEG
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 6
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 6
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45533: LD_ADDR_VAR 0 34
45537: PUSH
45538: LD_INT 2
45540: NEG
45541: PUSH
45542: LD_INT 3
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: LD_INT 2
45556: NEG
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: PUSH
45562: LD_INT 3
45564: NEG
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: NEG
45577: PUSH
45578: LD_INT 4
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 4
45588: NEG
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 4
45600: NEG
45601: PUSH
45602: LD_INT 4
45604: NEG
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 4
45612: NEG
45613: PUSH
45614: LD_INT 5
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 5
45624: NEG
45625: PUSH
45626: LD_INT 4
45628: NEG
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 5
45636: NEG
45637: PUSH
45638: LD_INT 5
45640: NEG
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 5
45648: NEG
45649: PUSH
45650: LD_INT 6
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 6
45660: NEG
45661: PUSH
45662: LD_INT 5
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 6
45672: NEG
45673: PUSH
45674: LD_INT 6
45676: NEG
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45696: LD_ADDR_VAR 0 41
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: NEG
45715: PUSH
45716: LD_INT 3
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45740: LD_ADDR_VAR 0 42
45744: PUSH
45745: LD_INT 2
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 2
45757: PUSH
45758: LD_INT 1
45760: NEG
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 3
45768: PUSH
45769: LD_INT 1
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: LIST
45780: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45781: LD_ADDR_VAR 0 43
45785: PUSH
45786: LD_INT 2
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 3
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 2
45808: PUSH
45809: LD_INT 3
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: LIST
45820: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45821: LD_ADDR_VAR 0 44
45825: PUSH
45826: LD_INT 0
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 3
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 2
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: LIST
45861: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45862: LD_ADDR_VAR 0 45
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 0
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: PUSH
45878: LD_INT 2
45880: NEG
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 3
45891: NEG
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: LIST
45905: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45906: LD_ADDR_VAR 0 46
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 3
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 3
45937: NEG
45938: PUSH
45939: LD_INT 2
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45952: LD_ADDR_VAR 0 47
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 3
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 3
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45985: LD_ADDR_VAR 0 48
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 1
46006: NEG
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
46016: LD_ADDR_VAR 0 49
46020: PUSH
46021: LD_INT 3
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 3
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
46045: LD_ADDR_VAR 0 50
46049: PUSH
46050: LD_INT 2
46052: PUSH
46053: LD_INT 3
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 3
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46074: LD_ADDR_VAR 0 51
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 2
46092: NEG
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46105: LD_ADDR_VAR 0 52
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: NEG
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46138: LD_ADDR_VAR 0 53
46142: PUSH
46143: LD_INT 1
46145: NEG
46146: PUSH
46147: LD_INT 3
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: LD_INT 3
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 2
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46182: LD_ADDR_VAR 0 54
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 3
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 3
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46223: LD_ADDR_VAR 0 55
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 3
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: LD_INT 3
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46263: LD_ADDR_VAR 0 56
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 3
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 2
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46304: LD_ADDR_VAR 0 57
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46348: LD_ADDR_VAR 0 58
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: LD_INT 2
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 3
46379: NEG
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46394: LD_ADDR_VAR 0 59
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46438: LD_ADDR_VAR 0 60
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 2
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: LD_INT 2
46466: PUSH
46467: LD_INT 1
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: LIST
46478: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46479: LD_ADDR_VAR 0 61
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 2
46496: PUSH
46497: LD_INT 2
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 2
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46519: LD_ADDR_VAR 0 62
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 2
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46560: LD_ADDR_VAR 0 63
46564: PUSH
46565: LD_INT 1
46567: NEG
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 2
46578: NEG
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 2
46589: NEG
46590: PUSH
46591: LD_INT 1
46593: NEG
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: LIST
46603: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46604: LD_ADDR_VAR 0 64
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: LD_INT 2
46615: NEG
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: LD_INT 2
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: ST_TO_ADDR
// end ; 2 :
46650: GO 49916
46652: LD_INT 2
46654: DOUBLE
46655: EQUAL
46656: IFTRUE 46660
46658: GO 49915
46660: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46661: LD_ADDR_VAR 0 29
46665: PUSH
46666: LD_INT 4
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 4
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 5
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 5
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 4
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 3
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 3
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 3
46740: PUSH
46741: LD_INT 2
46743: NEG
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 5
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 3
46761: PUSH
46762: LD_INT 3
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 3
46771: PUSH
46772: LD_INT 2
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 4
46781: PUSH
46782: LD_INT 3
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 4
46791: PUSH
46792: LD_INT 4
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 3
46801: PUSH
46802: LD_INT 4
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 3
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 4
46831: PUSH
46832: LD_INT 2
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 4
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 4
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 0
46861: PUSH
46862: LD_INT 3
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 4
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 5
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 5
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 4
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 3
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 5
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: NEG
46934: PUSH
46935: LD_INT 3
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 3
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: NEG
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: LD_INT 0
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: LD_INT 1
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 4
47000: NEG
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 4
47011: NEG
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 4
47023: NEG
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 4
47046: NEG
47047: PUSH
47048: LD_INT 4
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 4
47058: NEG
47059: PUSH
47060: LD_INT 5
47062: NEG
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: LD_INT 4
47074: NEG
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 3
47082: NEG
47083: PUSH
47084: LD_INT 3
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 4
47094: NEG
47095: PUSH
47096: LD_INT 3
47098: NEG
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 5
47106: NEG
47107: PUSH
47108: LD_INT 4
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 5
47118: NEG
47119: PUSH
47120: LD_INT 5
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: LD_INT 3
47130: NEG
47131: PUSH
47132: LD_INT 5
47134: NEG
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 5
47142: NEG
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47199: LD_ADDR_VAR 0 30
47203: PUSH
47204: LD_INT 4
47206: PUSH
47207: LD_INT 4
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 4
47216: PUSH
47217: LD_INT 3
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 5
47226: PUSH
47227: LD_INT 4
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: LD_INT 5
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 4
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: PUSH
47257: LD_INT 4
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 3
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: PUSH
47274: LD_INT 5
47276: PUSH
47277: LD_INT 3
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 3
47286: PUSH
47287: LD_INT 5
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: LD_INT 3
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 3
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 4
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 4
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 3
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 2
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 4
47389: NEG
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 4
47400: NEG
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: NEG
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 3
47423: NEG
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 4
47434: NEG
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 5
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 5
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 5
47468: NEG
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 3
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: LD_INT 3
47491: NEG
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: LD_INT 4
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: LD_INT 3
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 2
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 4
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 4
47563: NEG
47564: PUSH
47565: LD_INT 4
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 4
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 4
47587: NEG
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 0
47599: PUSH
47600: LD_INT 4
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: LD_INT 5
47613: NEG
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: LD_INT 4
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 3
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 0
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 1
47654: NEG
47655: PUSH
47656: LD_INT 4
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 1
47666: NEG
47667: PUSH
47668: LD_INT 5
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 3
47681: NEG
47682: PUSH
47683: EMPTY
47684: LIST
47685: LIST
47686: PUSH
47687: LD_INT 2
47689: NEG
47690: PUSH
47691: LD_INT 5
47693: NEG
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47746: LD_ADDR_VAR 0 31
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 4
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 3
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 4
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 5
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 5
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 2
47825: PUSH
47826: LD_INT 5
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 2
47835: NEG
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 3
47857: NEG
47858: PUSH
47859: LD_INT 1
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 4
47902: NEG
47903: PUSH
47904: LD_INT 0
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: PUSH
47911: LD_INT 4
47913: NEG
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 4
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 4
47948: NEG
47949: PUSH
47950: LD_INT 4
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 4
47960: NEG
47961: PUSH
47962: LD_INT 5
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: LD_INT 4
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 4
47996: NEG
47997: PUSH
47998: LD_INT 3
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 5
48008: NEG
48009: PUSH
48010: LD_INT 4
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 5
48020: NEG
48021: PUSH
48022: LD_INT 5
48024: NEG
48025: PUSH
48026: EMPTY
48027: LIST
48028: LIST
48029: PUSH
48030: LD_INT 3
48032: NEG
48033: PUSH
48034: LD_INT 5
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 5
48044: NEG
48045: PUSH
48046: LD_INT 3
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 4
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 1
48078: PUSH
48079: LD_INT 3
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: NEG
48124: PUSH
48125: LD_INT 4
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: LD_INT 2
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 4
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 4
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 5
48179: PUSH
48180: LD_INT 0
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 5
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 4
48199: PUSH
48200: LD_INT 1
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 3
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 3
48219: PUSH
48220: LD_INT 1
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 3
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 5
48241: PUSH
48242: LD_INT 2
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: LIST
48285: LIST
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48296: LD_ADDR_VAR 0 32
48300: PUSH
48301: LD_INT 4
48303: NEG
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 4
48314: NEG
48315: PUSH
48316: LD_INT 1
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 3
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 3
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 4
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 5
48359: NEG
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 5
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 5
48382: NEG
48383: PUSH
48384: LD_INT 2
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 3
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 3
48405: NEG
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 3
48417: NEG
48418: PUSH
48419: LD_INT 4
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 3
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 3
48453: NEG
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 4
48465: NEG
48466: PUSH
48467: LD_INT 3
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 4
48477: NEG
48478: PUSH
48479: LD_INT 4
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: NEG
48490: PUSH
48491: LD_INT 4
48493: NEG
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 4
48501: NEG
48502: PUSH
48503: LD_INT 2
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 0
48513: PUSH
48514: LD_INT 4
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 5
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 4
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 1
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 0
48557: PUSH
48558: LD_INT 3
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 4
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 5
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: LD_INT 3
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: LD_INT 5
48607: NEG
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 3
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 3
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 4
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: LD_INT 4
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 3
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 4
48698: PUSH
48699: LD_INT 2
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 4
48708: PUSH
48709: LD_INT 4
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 4
48718: PUSH
48719: LD_INT 3
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 5
48728: PUSH
48729: LD_INT 4
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 5
48738: PUSH
48739: LD_INT 5
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 4
48748: PUSH
48749: LD_INT 5
48751: PUSH
48752: EMPTY
48753: LIST
48754: LIST
48755: PUSH
48756: LD_INT 3
48758: PUSH
48759: LD_INT 4
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: PUSH
48769: LD_INT 3
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 5
48778: PUSH
48779: LD_INT 3
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: PUSH
48786: LD_INT 3
48788: PUSH
48789: LD_INT 5
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48843: LD_ADDR_VAR 0 33
48847: PUSH
48848: LD_INT 4
48850: NEG
48851: PUSH
48852: LD_INT 4
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 4
48862: NEG
48863: PUSH
48864: LD_INT 5
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: LD_INT 4
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: LD_INT 3
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 4
48898: NEG
48899: PUSH
48900: LD_INT 3
48902: NEG
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 5
48910: NEG
48911: PUSH
48912: LD_INT 4
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 5
48922: NEG
48923: PUSH
48924: LD_INT 5
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 3
48934: NEG
48935: PUSH
48936: LD_INT 5
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 5
48946: NEG
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 3
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 4
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: LD_INT 3
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 2
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 0
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 4
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: LD_INT 4
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 4
49060: PUSH
49061: LD_INT 0
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 4
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 5
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 5
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 4
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 3
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 3
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 3
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 5
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 3
49153: PUSH
49154: LD_INT 3
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 3
49163: PUSH
49164: LD_INT 2
49166: PUSH
49167: EMPTY
49168: LIST
49169: LIST
49170: PUSH
49171: LD_INT 4
49173: PUSH
49174: LD_INT 3
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: PUSH
49184: LD_INT 4
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 3
49193: PUSH
49194: LD_INT 4
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: PUSH
49204: LD_INT 3
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: LD_INT 2
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 4
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 4
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 1
49263: PUSH
49264: LD_INT 4
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 5
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: LD_INT 5
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 4
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 3
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: LD_INT 5
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 3
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: LIST
49377: LIST
49378: LIST
49379: LIST
49380: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49381: LD_ADDR_VAR 0 34
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: LD_INT 4
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 5
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: PUSH
49411: LD_INT 4
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 0
49432: PUSH
49433: LD_INT 3
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 4
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 5
49459: NEG
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 2
49478: NEG
49479: PUSH
49480: LD_INT 5
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 3
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 4
49511: PUSH
49512: LD_INT 0
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 0
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 1
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 4
49573: PUSH
49574: LD_INT 2
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 4
49583: PUSH
49584: LD_INT 4
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 4
49593: PUSH
49594: LD_INT 3
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 5
49603: PUSH
49604: LD_INT 4
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 5
49613: PUSH
49614: LD_INT 5
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 4
49623: PUSH
49624: LD_INT 5
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 3
49633: PUSH
49634: LD_INT 4
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 3
49643: PUSH
49644: LD_INT 3
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 5
49653: PUSH
49654: LD_INT 3
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 3
49663: PUSH
49664: LD_INT 5
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 2
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 1
49703: PUSH
49704: LD_INT 4
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 4
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 2
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 2
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 4
49766: NEG
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 4
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 3
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 4
49811: NEG
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 5
49822: NEG
49823: PUSH
49824: LD_INT 0
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 5
49833: NEG
49834: PUSH
49835: LD_INT 1
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 5
49845: NEG
49846: PUSH
49847: LD_INT 2
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 3
49857: NEG
49858: PUSH
49859: LD_INT 2
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// end ; end ;
49913: GO 49916
49915: POP
// case btype of b_depot , b_warehouse :
49916: LD_VAR 0 1
49920: PUSH
49921: LD_INT 0
49923: DOUBLE
49924: EQUAL
49925: IFTRUE 49935
49927: LD_INT 1
49929: DOUBLE
49930: EQUAL
49931: IFTRUE 49935
49933: GO 50136
49935: POP
// case nation of nation_american :
49936: LD_VAR 0 5
49940: PUSH
49941: LD_INT 1
49943: DOUBLE
49944: EQUAL
49945: IFTRUE 49949
49947: GO 50005
49949: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49950: LD_ADDR_VAR 0 9
49954: PUSH
49955: LD_VAR 0 11
49959: PUSH
49960: LD_VAR 0 12
49964: PUSH
49965: LD_VAR 0 13
49969: PUSH
49970: LD_VAR 0 14
49974: PUSH
49975: LD_VAR 0 15
49979: PUSH
49980: LD_VAR 0 16
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: PUSH
49993: LD_VAR 0 4
49997: PUSH
49998: LD_INT 1
50000: PLUS
50001: ARRAY
50002: ST_TO_ADDR
50003: GO 50134
50005: LD_INT 2
50007: DOUBLE
50008: EQUAL
50009: IFTRUE 50013
50011: GO 50069
50013: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
50014: LD_ADDR_VAR 0 9
50018: PUSH
50019: LD_VAR 0 17
50023: PUSH
50024: LD_VAR 0 18
50028: PUSH
50029: LD_VAR 0 19
50033: PUSH
50034: LD_VAR 0 20
50038: PUSH
50039: LD_VAR 0 21
50043: PUSH
50044: LD_VAR 0 22
50048: PUSH
50049: EMPTY
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: PUSH
50057: LD_VAR 0 4
50061: PUSH
50062: LD_INT 1
50064: PLUS
50065: ARRAY
50066: ST_TO_ADDR
50067: GO 50134
50069: LD_INT 3
50071: DOUBLE
50072: EQUAL
50073: IFTRUE 50077
50075: GO 50133
50077: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
50078: LD_ADDR_VAR 0 9
50082: PUSH
50083: LD_VAR 0 23
50087: PUSH
50088: LD_VAR 0 24
50092: PUSH
50093: LD_VAR 0 25
50097: PUSH
50098: LD_VAR 0 26
50102: PUSH
50103: LD_VAR 0 27
50107: PUSH
50108: LD_VAR 0 28
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: PUSH
50121: LD_VAR 0 4
50125: PUSH
50126: LD_INT 1
50128: PLUS
50129: ARRAY
50130: ST_TO_ADDR
50131: GO 50134
50133: POP
50134: GO 50689
50136: LD_INT 2
50138: DOUBLE
50139: EQUAL
50140: IFTRUE 50150
50142: LD_INT 3
50144: DOUBLE
50145: EQUAL
50146: IFTRUE 50150
50148: GO 50206
50150: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50151: LD_ADDR_VAR 0 9
50155: PUSH
50156: LD_VAR 0 29
50160: PUSH
50161: LD_VAR 0 30
50165: PUSH
50166: LD_VAR 0 31
50170: PUSH
50171: LD_VAR 0 32
50175: PUSH
50176: LD_VAR 0 33
50180: PUSH
50181: LD_VAR 0 34
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: PUSH
50194: LD_VAR 0 4
50198: PUSH
50199: LD_INT 1
50201: PLUS
50202: ARRAY
50203: ST_TO_ADDR
50204: GO 50689
50206: LD_INT 16
50208: DOUBLE
50209: EQUAL
50210: IFTRUE 50268
50212: LD_INT 17
50214: DOUBLE
50215: EQUAL
50216: IFTRUE 50268
50218: LD_INT 18
50220: DOUBLE
50221: EQUAL
50222: IFTRUE 50268
50224: LD_INT 19
50226: DOUBLE
50227: EQUAL
50228: IFTRUE 50268
50230: LD_INT 22
50232: DOUBLE
50233: EQUAL
50234: IFTRUE 50268
50236: LD_INT 20
50238: DOUBLE
50239: EQUAL
50240: IFTRUE 50268
50242: LD_INT 21
50244: DOUBLE
50245: EQUAL
50246: IFTRUE 50268
50248: LD_INT 23
50250: DOUBLE
50251: EQUAL
50252: IFTRUE 50268
50254: LD_INT 24
50256: DOUBLE
50257: EQUAL
50258: IFTRUE 50268
50260: LD_INT 25
50262: DOUBLE
50263: EQUAL
50264: IFTRUE 50268
50266: GO 50324
50268: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50269: LD_ADDR_VAR 0 9
50273: PUSH
50274: LD_VAR 0 35
50278: PUSH
50279: LD_VAR 0 36
50283: PUSH
50284: LD_VAR 0 37
50288: PUSH
50289: LD_VAR 0 38
50293: PUSH
50294: LD_VAR 0 39
50298: PUSH
50299: LD_VAR 0 40
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: PUSH
50312: LD_VAR 0 4
50316: PUSH
50317: LD_INT 1
50319: PLUS
50320: ARRAY
50321: ST_TO_ADDR
50322: GO 50689
50324: LD_INT 6
50326: DOUBLE
50327: EQUAL
50328: IFTRUE 50380
50330: LD_INT 7
50332: DOUBLE
50333: EQUAL
50334: IFTRUE 50380
50336: LD_INT 8
50338: DOUBLE
50339: EQUAL
50340: IFTRUE 50380
50342: LD_INT 13
50344: DOUBLE
50345: EQUAL
50346: IFTRUE 50380
50348: LD_INT 12
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50380
50354: LD_INT 15
50356: DOUBLE
50357: EQUAL
50358: IFTRUE 50380
50360: LD_INT 11
50362: DOUBLE
50363: EQUAL
50364: IFTRUE 50380
50366: LD_INT 14
50368: DOUBLE
50369: EQUAL
50370: IFTRUE 50380
50372: LD_INT 10
50374: DOUBLE
50375: EQUAL
50376: IFTRUE 50380
50378: GO 50436
50380: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50381: LD_ADDR_VAR 0 9
50385: PUSH
50386: LD_VAR 0 41
50390: PUSH
50391: LD_VAR 0 42
50395: PUSH
50396: LD_VAR 0 43
50400: PUSH
50401: LD_VAR 0 44
50405: PUSH
50406: LD_VAR 0 45
50410: PUSH
50411: LD_VAR 0 46
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: PUSH
50424: LD_VAR 0 4
50428: PUSH
50429: LD_INT 1
50431: PLUS
50432: ARRAY
50433: ST_TO_ADDR
50434: GO 50689
50436: LD_INT 36
50438: DOUBLE
50439: EQUAL
50440: IFTRUE 50444
50442: GO 50500
50444: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50445: LD_ADDR_VAR 0 9
50449: PUSH
50450: LD_VAR 0 47
50454: PUSH
50455: LD_VAR 0 48
50459: PUSH
50460: LD_VAR 0 49
50464: PUSH
50465: LD_VAR 0 50
50469: PUSH
50470: LD_VAR 0 51
50474: PUSH
50475: LD_VAR 0 52
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: PUSH
50488: LD_VAR 0 4
50492: PUSH
50493: LD_INT 1
50495: PLUS
50496: ARRAY
50497: ST_TO_ADDR
50498: GO 50689
50500: LD_INT 4
50502: DOUBLE
50503: EQUAL
50504: IFTRUE 50526
50506: LD_INT 5
50508: DOUBLE
50509: EQUAL
50510: IFTRUE 50526
50512: LD_INT 34
50514: DOUBLE
50515: EQUAL
50516: IFTRUE 50526
50518: LD_INT 37
50520: DOUBLE
50521: EQUAL
50522: IFTRUE 50526
50524: GO 50582
50526: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50527: LD_ADDR_VAR 0 9
50531: PUSH
50532: LD_VAR 0 53
50536: PUSH
50537: LD_VAR 0 54
50541: PUSH
50542: LD_VAR 0 55
50546: PUSH
50547: LD_VAR 0 56
50551: PUSH
50552: LD_VAR 0 57
50556: PUSH
50557: LD_VAR 0 58
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: PUSH
50570: LD_VAR 0 4
50574: PUSH
50575: LD_INT 1
50577: PLUS
50578: ARRAY
50579: ST_TO_ADDR
50580: GO 50689
50582: LD_INT 31
50584: DOUBLE
50585: EQUAL
50586: IFTRUE 50632
50588: LD_INT 32
50590: DOUBLE
50591: EQUAL
50592: IFTRUE 50632
50594: LD_INT 33
50596: DOUBLE
50597: EQUAL
50598: IFTRUE 50632
50600: LD_INT 27
50602: DOUBLE
50603: EQUAL
50604: IFTRUE 50632
50606: LD_INT 26
50608: DOUBLE
50609: EQUAL
50610: IFTRUE 50632
50612: LD_INT 28
50614: DOUBLE
50615: EQUAL
50616: IFTRUE 50632
50618: LD_INT 29
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50632
50624: LD_INT 30
50626: DOUBLE
50627: EQUAL
50628: IFTRUE 50632
50630: GO 50688
50632: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50633: LD_ADDR_VAR 0 9
50637: PUSH
50638: LD_VAR 0 59
50642: PUSH
50643: LD_VAR 0 60
50647: PUSH
50648: LD_VAR 0 61
50652: PUSH
50653: LD_VAR 0 62
50657: PUSH
50658: LD_VAR 0 63
50662: PUSH
50663: LD_VAR 0 64
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: PUSH
50676: LD_VAR 0 4
50680: PUSH
50681: LD_INT 1
50683: PLUS
50684: ARRAY
50685: ST_TO_ADDR
50686: GO 50689
50688: POP
// temp_list2 = [ ] ;
50689: LD_ADDR_VAR 0 10
50693: PUSH
50694: EMPTY
50695: ST_TO_ADDR
// for i in temp_list do
50696: LD_ADDR_VAR 0 8
50700: PUSH
50701: LD_VAR 0 9
50705: PUSH
50706: FOR_IN
50707: IFFALSE 50759
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50709: LD_ADDR_VAR 0 10
50713: PUSH
50714: LD_VAR 0 10
50718: PUSH
50719: LD_VAR 0 8
50723: PUSH
50724: LD_INT 1
50726: ARRAY
50727: PUSH
50728: LD_VAR 0 2
50732: PLUS
50733: PUSH
50734: LD_VAR 0 8
50738: PUSH
50739: LD_INT 2
50741: ARRAY
50742: PUSH
50743: LD_VAR 0 3
50747: PLUS
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: EMPTY
50754: LIST
50755: ADD
50756: ST_TO_ADDR
50757: GO 50706
50759: POP
50760: POP
// result = temp_list2 ;
50761: LD_ADDR_VAR 0 7
50765: PUSH
50766: LD_VAR 0 10
50770: ST_TO_ADDR
// end ;
50771: LD_VAR 0 7
50775: RET
// export function EnemyInRange ( unit , dist ) ; begin
50776: LD_INT 0
50778: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50779: LD_ADDR_VAR 0 3
50783: PUSH
50784: LD_VAR 0 1
50788: PPUSH
50789: CALL_OW 255
50793: PPUSH
50794: LD_VAR 0 1
50798: PPUSH
50799: CALL_OW 250
50803: PPUSH
50804: LD_VAR 0 1
50808: PPUSH
50809: CALL_OW 251
50813: PPUSH
50814: LD_VAR 0 2
50818: PPUSH
50819: CALL 24033 0 4
50823: PUSH
50824: LD_INT 4
50826: ARRAY
50827: ST_TO_ADDR
// end ;
50828: LD_VAR 0 3
50832: RET
// export function PlayerSeeMe ( unit ) ; begin
50833: LD_INT 0
50835: PPUSH
// result := See ( your_side , unit ) ;
50836: LD_ADDR_VAR 0 2
50840: PUSH
50841: LD_OWVAR 2
50845: PPUSH
50846: LD_VAR 0 1
50850: PPUSH
50851: CALL_OW 292
50855: ST_TO_ADDR
// end ;
50856: LD_VAR 0 2
50860: RET
// export function ReverseDir ( unit ) ; begin
50861: LD_INT 0
50863: PPUSH
// if not unit then
50864: LD_VAR 0 1
50868: NOT
50869: IFFALSE 50873
// exit ;
50871: GO 50896
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50873: LD_ADDR_VAR 0 2
50877: PUSH
50878: LD_VAR 0 1
50882: PPUSH
50883: CALL_OW 254
50887: PUSH
50888: LD_INT 3
50890: PLUS
50891: PUSH
50892: LD_INT 6
50894: MOD
50895: ST_TO_ADDR
// end ;
50896: LD_VAR 0 2
50900: RET
// export function ReverseArray ( array ) ; var i ; begin
50901: LD_INT 0
50903: PPUSH
50904: PPUSH
// if not array then
50905: LD_VAR 0 1
50909: NOT
50910: IFFALSE 50914
// exit ;
50912: GO 50969
// result := [ ] ;
50914: LD_ADDR_VAR 0 2
50918: PUSH
50919: EMPTY
50920: ST_TO_ADDR
// for i := array downto 1 do
50921: LD_ADDR_VAR 0 3
50925: PUSH
50926: DOUBLE
50927: LD_VAR 0 1
50931: INC
50932: ST_TO_ADDR
50933: LD_INT 1
50935: PUSH
50936: FOR_DOWNTO
50937: IFFALSE 50967
// result := Join ( result , array [ i ] ) ;
50939: LD_ADDR_VAR 0 2
50943: PUSH
50944: LD_VAR 0 2
50948: PPUSH
50949: LD_VAR 0 1
50953: PUSH
50954: LD_VAR 0 3
50958: ARRAY
50959: PPUSH
50960: CALL 55821 0 2
50964: ST_TO_ADDR
50965: GO 50936
50967: POP
50968: POP
// end ;
50969: LD_VAR 0 2
50973: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50974: LD_INT 0
50976: PPUSH
50977: PPUSH
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
// if not unit or not hexes then
50982: LD_VAR 0 1
50986: NOT
50987: IFTRUE 50996
50989: PUSH
50990: LD_VAR 0 2
50994: NOT
50995: OR
50996: IFFALSE 51000
// exit ;
50998: GO 51123
// dist := 9999 ;
51000: LD_ADDR_VAR 0 5
51004: PUSH
51005: LD_INT 9999
51007: ST_TO_ADDR
// for i = 1 to hexes do
51008: LD_ADDR_VAR 0 4
51012: PUSH
51013: DOUBLE
51014: LD_INT 1
51016: DEC
51017: ST_TO_ADDR
51018: LD_VAR 0 2
51022: PUSH
51023: FOR_TO
51024: IFFALSE 51111
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51026: LD_ADDR_VAR 0 6
51030: PUSH
51031: LD_VAR 0 1
51035: PPUSH
51036: LD_VAR 0 2
51040: PUSH
51041: LD_VAR 0 4
51045: ARRAY
51046: PUSH
51047: LD_INT 1
51049: ARRAY
51050: PPUSH
51051: LD_VAR 0 2
51055: PUSH
51056: LD_VAR 0 4
51060: ARRAY
51061: PUSH
51062: LD_INT 2
51064: ARRAY
51065: PPUSH
51066: CALL_OW 297
51070: ST_TO_ADDR
// if tdist < dist then
51071: LD_VAR 0 6
51075: PUSH
51076: LD_VAR 0 5
51080: LESS
51081: IFFALSE 51109
// begin hex := hexes [ i ] ;
51083: LD_ADDR_VAR 0 8
51087: PUSH
51088: LD_VAR 0 2
51092: PUSH
51093: LD_VAR 0 4
51097: ARRAY
51098: ST_TO_ADDR
// dist := tdist ;
51099: LD_ADDR_VAR 0 5
51103: PUSH
51104: LD_VAR 0 6
51108: ST_TO_ADDR
// end ; end ;
51109: GO 51023
51111: POP
51112: POP
// result := hex ;
51113: LD_ADDR_VAR 0 3
51117: PUSH
51118: LD_VAR 0 8
51122: ST_TO_ADDR
// end ;
51123: LD_VAR 0 3
51127: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51128: LD_INT 0
51130: PPUSH
51131: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51132: LD_VAR 0 1
51136: NOT
51137: IFTRUE 51176
51139: PUSH
51140: LD_VAR 0 1
51144: PUSH
51145: LD_INT 21
51147: PUSH
51148: LD_INT 2
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 23
51157: PUSH
51158: LD_INT 2
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PPUSH
51169: CALL_OW 69
51173: IN
51174: NOT
51175: OR
51176: IFFALSE 51180
// exit ;
51178: GO 51227
// for i = 1 to 3 do
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: DOUBLE
51186: LD_INT 1
51188: DEC
51189: ST_TO_ADDR
51190: LD_INT 3
51192: PUSH
51193: FOR_TO
51194: IFFALSE 51225
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51196: LD_VAR 0 1
51200: PPUSH
51201: CALL_OW 250
51205: PPUSH
51206: LD_VAR 0 1
51210: PPUSH
51211: CALL_OW 251
51215: PPUSH
51216: LD_INT 1
51218: PPUSH
51219: CALL_OW 453
51223: GO 51193
51225: POP
51226: POP
// end ;
51227: LD_VAR 0 2
51231: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51232: LD_INT 0
51234: PPUSH
51235: PPUSH
51236: PPUSH
51237: PPUSH
51238: PPUSH
51239: PPUSH
// if not unit or not enemy_unit then
51240: LD_VAR 0 1
51244: NOT
51245: IFTRUE 51254
51247: PUSH
51248: LD_VAR 0 2
51252: NOT
51253: OR
51254: IFFALSE 51258
// exit ;
51256: GO 51739
// if GetLives ( i ) < 250 then
51258: LD_VAR 0 4
51262: PPUSH
51263: CALL_OW 256
51267: PUSH
51268: LD_INT 250
51270: LESS
51271: IFFALSE 51284
// begin ComAutodestruct ( i ) ;
51273: LD_VAR 0 4
51277: PPUSH
51278: CALL 51128 0 1
// exit ;
51282: GO 51739
// end ; x := GetX ( enemy_unit ) ;
51284: LD_ADDR_VAR 0 7
51288: PUSH
51289: LD_VAR 0 2
51293: PPUSH
51294: CALL_OW 250
51298: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51299: LD_ADDR_VAR 0 8
51303: PUSH
51304: LD_VAR 0 2
51308: PPUSH
51309: CALL_OW 251
51313: ST_TO_ADDR
// if not x or not y then
51314: LD_VAR 0 7
51318: NOT
51319: IFTRUE 51328
51321: PUSH
51322: LD_VAR 0 8
51326: NOT
51327: OR
51328: IFFALSE 51332
// exit ;
51330: GO 51739
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51332: LD_ADDR_VAR 0 6
51336: PUSH
51337: LD_VAR 0 7
51341: PPUSH
51342: LD_INT 0
51344: PPUSH
51345: LD_INT 4
51347: PPUSH
51348: CALL_OW 272
51352: PUSH
51353: LD_VAR 0 8
51357: PPUSH
51358: LD_INT 0
51360: PPUSH
51361: LD_INT 4
51363: PPUSH
51364: CALL_OW 273
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_VAR 0 7
51377: PPUSH
51378: LD_INT 1
51380: PPUSH
51381: LD_INT 4
51383: PPUSH
51384: CALL_OW 272
51388: PUSH
51389: LD_VAR 0 8
51393: PPUSH
51394: LD_INT 1
51396: PPUSH
51397: LD_INT 4
51399: PPUSH
51400: CALL_OW 273
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_VAR 0 7
51413: PPUSH
51414: LD_INT 2
51416: PPUSH
51417: LD_INT 4
51419: PPUSH
51420: CALL_OW 272
51424: PUSH
51425: LD_VAR 0 8
51429: PPUSH
51430: LD_INT 2
51432: PPUSH
51433: LD_INT 4
51435: PPUSH
51436: CALL_OW 273
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_VAR 0 7
51449: PPUSH
51450: LD_INT 3
51452: PPUSH
51453: LD_INT 4
51455: PPUSH
51456: CALL_OW 272
51460: PUSH
51461: LD_VAR 0 8
51465: PPUSH
51466: LD_INT 3
51468: PPUSH
51469: LD_INT 4
51471: PPUSH
51472: CALL_OW 273
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_VAR 0 7
51485: PPUSH
51486: LD_INT 4
51488: PPUSH
51489: LD_INT 4
51491: PPUSH
51492: CALL_OW 272
51496: PUSH
51497: LD_VAR 0 8
51501: PPUSH
51502: LD_INT 4
51504: PPUSH
51505: LD_INT 4
51507: PPUSH
51508: CALL_OW 273
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_VAR 0 7
51521: PPUSH
51522: LD_INT 5
51524: PPUSH
51525: LD_INT 4
51527: PPUSH
51528: CALL_OW 272
51532: PUSH
51533: LD_VAR 0 8
51537: PPUSH
51538: LD_INT 5
51540: PPUSH
51541: LD_INT 4
51543: PPUSH
51544: CALL_OW 273
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: LIST
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// for i = tmp downto 1 do
51561: LD_ADDR_VAR 0 4
51565: PUSH
51566: DOUBLE
51567: LD_VAR 0 6
51571: INC
51572: ST_TO_ADDR
51573: LD_INT 1
51575: PUSH
51576: FOR_DOWNTO
51577: IFFALSE 51680
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51579: LD_VAR 0 6
51583: PUSH
51584: LD_VAR 0 4
51588: ARRAY
51589: PUSH
51590: LD_INT 1
51592: ARRAY
51593: PPUSH
51594: LD_VAR 0 6
51598: PUSH
51599: LD_VAR 0 4
51603: ARRAY
51604: PUSH
51605: LD_INT 2
51607: ARRAY
51608: PPUSH
51609: CALL_OW 488
51613: NOT
51614: IFTRUE 51656
51616: PUSH
51617: LD_VAR 0 6
51621: PUSH
51622: LD_VAR 0 4
51626: ARRAY
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: PPUSH
51632: LD_VAR 0 6
51636: PUSH
51637: LD_VAR 0 4
51641: ARRAY
51642: PUSH
51643: LD_INT 2
51645: ARRAY
51646: PPUSH
51647: CALL_OW 428
51651: PUSH
51652: LD_INT 0
51654: NONEQUAL
51655: OR
51656: IFFALSE 51678
// tmp := Delete ( tmp , i ) ;
51658: LD_ADDR_VAR 0 6
51662: PUSH
51663: LD_VAR 0 6
51667: PPUSH
51668: LD_VAR 0 4
51672: PPUSH
51673: CALL_OW 3
51677: ST_TO_ADDR
51678: GO 51576
51680: POP
51681: POP
// j := GetClosestHex ( unit , tmp ) ;
51682: LD_ADDR_VAR 0 5
51686: PUSH
51687: LD_VAR 0 1
51691: PPUSH
51692: LD_VAR 0 6
51696: PPUSH
51697: CALL 50974 0 2
51701: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51702: LD_VAR 0 1
51706: PPUSH
51707: LD_VAR 0 5
51711: PUSH
51712: LD_INT 1
51714: ARRAY
51715: PPUSH
51716: LD_VAR 0 5
51720: PUSH
51721: LD_INT 2
51723: ARRAY
51724: PPUSH
51725: CALL_OW 111
// result := j ;
51729: LD_ADDR_VAR 0 3
51733: PUSH
51734: LD_VAR 0 5
51738: ST_TO_ADDR
// end ;
51739: LD_VAR 0 3
51743: RET
// export function PrepareApemanSoldier ( ) ; begin
51744: LD_INT 0
51746: PPUSH
// uc_nation := 0 ;
51747: LD_ADDR_OWVAR 21
51751: PUSH
51752: LD_INT 0
51754: ST_TO_ADDR
// hc_sex := sex_male ;
51755: LD_ADDR_OWVAR 27
51759: PUSH
51760: LD_INT 1
51762: ST_TO_ADDR
// hc_name :=  ;
51763: LD_ADDR_OWVAR 26
51767: PUSH
51768: LD_STRING 
51770: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51771: LD_ADDR_OWVAR 28
51775: PUSH
51776: LD_INT 15
51778: ST_TO_ADDR
// hc_gallery :=  ;
51779: LD_ADDR_OWVAR 33
51783: PUSH
51784: LD_STRING 
51786: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51787: LD_ADDR_OWVAR 31
51791: PUSH
51792: LD_INT 0
51794: PPUSH
51795: LD_INT 3
51797: PPUSH
51798: CALL_OW 12
51802: PUSH
51803: LD_INT 0
51805: PPUSH
51806: LD_INT 3
51808: PPUSH
51809: CALL_OW 12
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: LIST
51824: LIST
51825: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51826: LD_ADDR_OWVAR 29
51830: PUSH
51831: LD_INT 10
51833: PUSH
51834: LD_INT 12
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: ST_TO_ADDR
// end ;
51841: LD_VAR 0 1
51845: RET
// export function PrepareApemanEngineer ( ) ; begin
51846: LD_INT 0
51848: PPUSH
// uc_nation := 0 ;
51849: LD_ADDR_OWVAR 21
51853: PUSH
51854: LD_INT 0
51856: ST_TO_ADDR
// hc_sex := sex_male ;
51857: LD_ADDR_OWVAR 27
51861: PUSH
51862: LD_INT 1
51864: ST_TO_ADDR
// hc_name :=  ;
51865: LD_ADDR_OWVAR 26
51869: PUSH
51870: LD_STRING 
51872: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51873: LD_ADDR_OWVAR 28
51877: PUSH
51878: LD_INT 16
51880: ST_TO_ADDR
// hc_gallery :=  ;
51881: LD_ADDR_OWVAR 33
51885: PUSH
51886: LD_STRING 
51888: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51889: LD_ADDR_OWVAR 31
51893: PUSH
51894: LD_INT 0
51896: PPUSH
51897: LD_INT 3
51899: PPUSH
51900: CALL_OW 12
51904: PUSH
51905: LD_INT 0
51907: PPUSH
51908: LD_INT 3
51910: PPUSH
51911: CALL_OW 12
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51928: LD_ADDR_OWVAR 29
51932: PUSH
51933: LD_INT 10
51935: PUSH
51936: LD_INT 12
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: ST_TO_ADDR
// end ;
51943: LD_VAR 0 1
51947: RET
// export function PrepareApeman ( agressivity ) ; begin
51948: LD_INT 0
51950: PPUSH
// uc_side := 0 ;
51951: LD_ADDR_OWVAR 20
51955: PUSH
51956: LD_INT 0
51958: ST_TO_ADDR
// uc_nation := 0 ;
51959: LD_ADDR_OWVAR 21
51963: PUSH
51964: LD_INT 0
51966: ST_TO_ADDR
// hc_sex := sex_male ;
51967: LD_ADDR_OWVAR 27
51971: PUSH
51972: LD_INT 1
51974: ST_TO_ADDR
// hc_class := class_apeman ;
51975: LD_ADDR_OWVAR 28
51979: PUSH
51980: LD_INT 12
51982: ST_TO_ADDR
// hc_gallery :=  ;
51983: LD_ADDR_OWVAR 33
51987: PUSH
51988: LD_STRING 
51990: ST_TO_ADDR
// hc_name :=  ;
51991: LD_ADDR_OWVAR 26
51995: PUSH
51996: LD_STRING 
51998: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
51999: LD_ADDR_OWVAR 29
52003: PUSH
52004: LD_INT 10
52006: PUSH
52007: LD_INT 12
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: ST_TO_ADDR
// if agressivity = 0 then
52014: LD_VAR 0 1
52018: PUSH
52019: LD_INT 0
52021: EQUAL
52022: IFFALSE 52034
// hc_agressivity := 0 else
52024: LD_ADDR_OWVAR 35
52028: PUSH
52029: LD_INT 0
52031: ST_TO_ADDR
52032: GO 52055
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52034: LD_ADDR_OWVAR 35
52038: PUSH
52039: LD_VAR 0 1
52043: NEG
52044: PPUSH
52045: LD_VAR 0 1
52049: PPUSH
52050: CALL_OW 12
52054: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
52055: LD_ADDR_OWVAR 31
52059: PUSH
52060: LD_INT 0
52062: PPUSH
52063: LD_INT 3
52065: PPUSH
52066: CALL_OW 12
52070: PUSH
52071: LD_INT 0
52073: PPUSH
52074: LD_INT 3
52076: PPUSH
52077: CALL_OW 12
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: ST_TO_ADDR
// end ;
52094: LD_VAR 0 2
52098: RET
// export function PrepareTiger ( agressivity ) ; begin
52099: LD_INT 0
52101: PPUSH
// uc_side := 0 ;
52102: LD_ADDR_OWVAR 20
52106: PUSH
52107: LD_INT 0
52109: ST_TO_ADDR
// uc_nation := 0 ;
52110: LD_ADDR_OWVAR 21
52114: PUSH
52115: LD_INT 0
52117: ST_TO_ADDR
// InitHc ;
52118: CALL_OW 19
// hc_class := class_tiger ;
52122: LD_ADDR_OWVAR 28
52126: PUSH
52127: LD_INT 14
52129: ST_TO_ADDR
// hc_gallery :=  ;
52130: LD_ADDR_OWVAR 33
52134: PUSH
52135: LD_STRING 
52137: ST_TO_ADDR
// hc_name :=  ;
52138: LD_ADDR_OWVAR 26
52142: PUSH
52143: LD_STRING 
52145: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52146: LD_ADDR_OWVAR 35
52150: PUSH
52151: LD_VAR 0 1
52155: NEG
52156: PPUSH
52157: LD_VAR 0 1
52161: PPUSH
52162: CALL_OW 12
52166: ST_TO_ADDR
// end ;
52167: LD_VAR 0 2
52171: RET
// export function PrepareEnchidna ( ) ; begin
52172: LD_INT 0
52174: PPUSH
// uc_side := 0 ;
52175: LD_ADDR_OWVAR 20
52179: PUSH
52180: LD_INT 0
52182: ST_TO_ADDR
// uc_nation := 0 ;
52183: LD_ADDR_OWVAR 21
52187: PUSH
52188: LD_INT 0
52190: ST_TO_ADDR
// InitHc ;
52191: CALL_OW 19
// hc_class := class_baggie ;
52195: LD_ADDR_OWVAR 28
52199: PUSH
52200: LD_INT 13
52202: ST_TO_ADDR
// hc_gallery :=  ;
52203: LD_ADDR_OWVAR 33
52207: PUSH
52208: LD_STRING 
52210: ST_TO_ADDR
// hc_name :=  ;
52211: LD_ADDR_OWVAR 26
52215: PUSH
52216: LD_STRING 
52218: ST_TO_ADDR
// end ;
52219: LD_VAR 0 1
52223: RET
// export function PrepareFrog ( ) ; begin
52224: LD_INT 0
52226: PPUSH
// uc_side := 0 ;
52227: LD_ADDR_OWVAR 20
52231: PUSH
52232: LD_INT 0
52234: ST_TO_ADDR
// uc_nation := 0 ;
52235: LD_ADDR_OWVAR 21
52239: PUSH
52240: LD_INT 0
52242: ST_TO_ADDR
// InitHc ;
52243: CALL_OW 19
// hc_class := class_frog ;
52247: LD_ADDR_OWVAR 28
52251: PUSH
52252: LD_INT 19
52254: ST_TO_ADDR
// hc_gallery :=  ;
52255: LD_ADDR_OWVAR 33
52259: PUSH
52260: LD_STRING 
52262: ST_TO_ADDR
// hc_name :=  ;
52263: LD_ADDR_OWVAR 26
52267: PUSH
52268: LD_STRING 
52270: ST_TO_ADDR
// end ;
52271: LD_VAR 0 1
52275: RET
// export function PrepareFish ( ) ; begin
52276: LD_INT 0
52278: PPUSH
// uc_side := 0 ;
52279: LD_ADDR_OWVAR 20
52283: PUSH
52284: LD_INT 0
52286: ST_TO_ADDR
// uc_nation := 0 ;
52287: LD_ADDR_OWVAR 21
52291: PUSH
52292: LD_INT 0
52294: ST_TO_ADDR
// InitHc ;
52295: CALL_OW 19
// hc_class := class_fish ;
52299: LD_ADDR_OWVAR 28
52303: PUSH
52304: LD_INT 20
52306: ST_TO_ADDR
// hc_gallery :=  ;
52307: LD_ADDR_OWVAR 33
52311: PUSH
52312: LD_STRING 
52314: ST_TO_ADDR
// hc_name :=  ;
52315: LD_ADDR_OWVAR 26
52319: PUSH
52320: LD_STRING 
52322: ST_TO_ADDR
// end ;
52323: LD_VAR 0 1
52327: RET
// export function PrepareBird ( ) ; begin
52328: LD_INT 0
52330: PPUSH
// uc_side := 0 ;
52331: LD_ADDR_OWVAR 20
52335: PUSH
52336: LD_INT 0
52338: ST_TO_ADDR
// uc_nation := 0 ;
52339: LD_ADDR_OWVAR 21
52343: PUSH
52344: LD_INT 0
52346: ST_TO_ADDR
// InitHc ;
52347: CALL_OW 19
// hc_class := class_phororhacos ;
52351: LD_ADDR_OWVAR 28
52355: PUSH
52356: LD_INT 18
52358: ST_TO_ADDR
// hc_gallery :=  ;
52359: LD_ADDR_OWVAR 33
52363: PUSH
52364: LD_STRING 
52366: ST_TO_ADDR
// hc_name :=  ;
52367: LD_ADDR_OWVAR 26
52371: PUSH
52372: LD_STRING 
52374: ST_TO_ADDR
// end ;
52375: LD_VAR 0 1
52379: RET
// export function PrepareHorse ( ) ; begin
52380: LD_INT 0
52382: PPUSH
// uc_side := 0 ;
52383: LD_ADDR_OWVAR 20
52387: PUSH
52388: LD_INT 0
52390: ST_TO_ADDR
// uc_nation := 0 ;
52391: LD_ADDR_OWVAR 21
52395: PUSH
52396: LD_INT 0
52398: ST_TO_ADDR
// InitHc ;
52399: CALL_OW 19
// hc_class := class_horse ;
52403: LD_ADDR_OWVAR 28
52407: PUSH
52408: LD_INT 21
52410: ST_TO_ADDR
// hc_gallery :=  ;
52411: LD_ADDR_OWVAR 33
52415: PUSH
52416: LD_STRING 
52418: ST_TO_ADDR
// hc_name :=  ;
52419: LD_ADDR_OWVAR 26
52423: PUSH
52424: LD_STRING 
52426: ST_TO_ADDR
// end ;
52427: LD_VAR 0 1
52431: RET
// export function PrepareMastodont ( ) ; begin
52432: LD_INT 0
52434: PPUSH
// uc_side := 0 ;
52435: LD_ADDR_OWVAR 20
52439: PUSH
52440: LD_INT 0
52442: ST_TO_ADDR
// uc_nation := 0 ;
52443: LD_ADDR_OWVAR 21
52447: PUSH
52448: LD_INT 0
52450: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52451: LD_ADDR_OWVAR 37
52455: PUSH
52456: LD_INT 31
52458: ST_TO_ADDR
// vc_control := control_rider ;
52459: LD_ADDR_OWVAR 38
52463: PUSH
52464: LD_INT 4
52466: ST_TO_ADDR
// end ;
52467: LD_VAR 0 1
52471: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52472: LD_INT 0
52474: PPUSH
52475: PPUSH
52476: PPUSH
// uc_side = 0 ;
52477: LD_ADDR_OWVAR 20
52481: PUSH
52482: LD_INT 0
52484: ST_TO_ADDR
// uc_nation = 0 ;
52485: LD_ADDR_OWVAR 21
52489: PUSH
52490: LD_INT 0
52492: ST_TO_ADDR
// InitHc_All ( ) ;
52493: CALL_OW 584
// InitVc ;
52497: CALL_OW 20
// if mastodonts then
52501: LD_VAR 0 6
52505: IFFALSE 52572
// for i = 1 to mastodonts do
52507: LD_ADDR_VAR 0 11
52511: PUSH
52512: DOUBLE
52513: LD_INT 1
52515: DEC
52516: ST_TO_ADDR
52517: LD_VAR 0 6
52521: PUSH
52522: FOR_TO
52523: IFFALSE 52570
// begin vc_chassis := 31 ;
52525: LD_ADDR_OWVAR 37
52529: PUSH
52530: LD_INT 31
52532: ST_TO_ADDR
// vc_control := control_rider ;
52533: LD_ADDR_OWVAR 38
52537: PUSH
52538: LD_INT 4
52540: ST_TO_ADDR
// animal := CreateVehicle ;
52541: LD_ADDR_VAR 0 12
52545: PUSH
52546: CALL_OW 45
52550: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52551: LD_VAR 0 12
52555: PPUSH
52556: LD_VAR 0 8
52560: PPUSH
52561: LD_INT 0
52563: PPUSH
52564: CALL 54714 0 3
// end ;
52568: GO 52522
52570: POP
52571: POP
// if horses then
52572: LD_VAR 0 5
52576: IFFALSE 52643
// for i = 1 to horses do
52578: LD_ADDR_VAR 0 11
52582: PUSH
52583: DOUBLE
52584: LD_INT 1
52586: DEC
52587: ST_TO_ADDR
52588: LD_VAR 0 5
52592: PUSH
52593: FOR_TO
52594: IFFALSE 52641
// begin hc_class := 21 ;
52596: LD_ADDR_OWVAR 28
52600: PUSH
52601: LD_INT 21
52603: ST_TO_ADDR
// hc_gallery :=  ;
52604: LD_ADDR_OWVAR 33
52608: PUSH
52609: LD_STRING 
52611: ST_TO_ADDR
// animal := CreateHuman ;
52612: LD_ADDR_VAR 0 12
52616: PUSH
52617: CALL_OW 44
52621: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52622: LD_VAR 0 12
52626: PPUSH
52627: LD_VAR 0 8
52631: PPUSH
52632: LD_INT 0
52634: PPUSH
52635: CALL 54714 0 3
// end ;
52639: GO 52593
52641: POP
52642: POP
// if birds then
52643: LD_VAR 0 1
52647: IFFALSE 52714
// for i = 1 to birds do
52649: LD_ADDR_VAR 0 11
52653: PUSH
52654: DOUBLE
52655: LD_INT 1
52657: DEC
52658: ST_TO_ADDR
52659: LD_VAR 0 1
52663: PUSH
52664: FOR_TO
52665: IFFALSE 52712
// begin hc_class := 18 ;
52667: LD_ADDR_OWVAR 28
52671: PUSH
52672: LD_INT 18
52674: ST_TO_ADDR
// hc_gallery =  ;
52675: LD_ADDR_OWVAR 33
52679: PUSH
52680: LD_STRING 
52682: ST_TO_ADDR
// animal := CreateHuman ;
52683: LD_ADDR_VAR 0 12
52687: PUSH
52688: CALL_OW 44
52692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52693: LD_VAR 0 12
52697: PPUSH
52698: LD_VAR 0 8
52702: PPUSH
52703: LD_INT 0
52705: PPUSH
52706: CALL 54714 0 3
// end ;
52710: GO 52664
52712: POP
52713: POP
// if tigers then
52714: LD_VAR 0 2
52718: IFFALSE 52802
// for i = 1 to tigers do
52720: LD_ADDR_VAR 0 11
52724: PUSH
52725: DOUBLE
52726: LD_INT 1
52728: DEC
52729: ST_TO_ADDR
52730: LD_VAR 0 2
52734: PUSH
52735: FOR_TO
52736: IFFALSE 52800
// begin hc_class = class_tiger ;
52738: LD_ADDR_OWVAR 28
52742: PUSH
52743: LD_INT 14
52745: ST_TO_ADDR
// hc_gallery =  ;
52746: LD_ADDR_OWVAR 33
52750: PUSH
52751: LD_STRING 
52753: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52754: LD_ADDR_OWVAR 35
52758: PUSH
52759: LD_INT 7
52761: NEG
52762: PPUSH
52763: LD_INT 7
52765: PPUSH
52766: CALL_OW 12
52770: ST_TO_ADDR
// animal := CreateHuman ;
52771: LD_ADDR_VAR 0 12
52775: PUSH
52776: CALL_OW 44
52780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52781: LD_VAR 0 12
52785: PPUSH
52786: LD_VAR 0 8
52790: PPUSH
52791: LD_INT 0
52793: PPUSH
52794: CALL 54714 0 3
// end ;
52798: GO 52735
52800: POP
52801: POP
// if apemans then
52802: LD_VAR 0 3
52806: IFFALSE 52929
// for i = 1 to apemans do
52808: LD_ADDR_VAR 0 11
52812: PUSH
52813: DOUBLE
52814: LD_INT 1
52816: DEC
52817: ST_TO_ADDR
52818: LD_VAR 0 3
52822: PUSH
52823: FOR_TO
52824: IFFALSE 52927
// begin hc_class = class_apeman ;
52826: LD_ADDR_OWVAR 28
52830: PUSH
52831: LD_INT 12
52833: ST_TO_ADDR
// hc_gallery =  ;
52834: LD_ADDR_OWVAR 33
52838: PUSH
52839: LD_STRING 
52841: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52842: LD_ADDR_OWVAR 35
52846: PUSH
52847: LD_INT 2
52849: NEG
52850: PPUSH
52851: LD_INT 2
52853: PPUSH
52854: CALL_OW 12
52858: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52859: LD_ADDR_OWVAR 31
52863: PUSH
52864: LD_INT 1
52866: PPUSH
52867: LD_INT 3
52869: PPUSH
52870: CALL_OW 12
52874: PUSH
52875: LD_INT 1
52877: PPUSH
52878: LD_INT 3
52880: PPUSH
52881: CALL_OW 12
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// animal := CreateHuman ;
52898: LD_ADDR_VAR 0 12
52902: PUSH
52903: CALL_OW 44
52907: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52908: LD_VAR 0 12
52912: PPUSH
52913: LD_VAR 0 8
52917: PPUSH
52918: LD_INT 0
52920: PPUSH
52921: CALL 54714 0 3
// end ;
52925: GO 52823
52927: POP
52928: POP
// if enchidnas then
52929: LD_VAR 0 4
52933: IFFALSE 53000
// for i = 1 to enchidnas do
52935: LD_ADDR_VAR 0 11
52939: PUSH
52940: DOUBLE
52941: LD_INT 1
52943: DEC
52944: ST_TO_ADDR
52945: LD_VAR 0 4
52949: PUSH
52950: FOR_TO
52951: IFFALSE 52998
// begin hc_class = 13 ;
52953: LD_ADDR_OWVAR 28
52957: PUSH
52958: LD_INT 13
52960: ST_TO_ADDR
// hc_gallery =  ;
52961: LD_ADDR_OWVAR 33
52965: PUSH
52966: LD_STRING 
52968: ST_TO_ADDR
// animal := CreateHuman ;
52969: LD_ADDR_VAR 0 12
52973: PUSH
52974: CALL_OW 44
52978: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52979: LD_VAR 0 12
52983: PPUSH
52984: LD_VAR 0 8
52988: PPUSH
52989: LD_INT 0
52991: PPUSH
52992: CALL 54714 0 3
// end ;
52996: GO 52950
52998: POP
52999: POP
// if fishes then
53000: LD_VAR 0 7
53004: IFFALSE 53071
// for i = 1 to fishes do
53006: LD_ADDR_VAR 0 11
53010: PUSH
53011: DOUBLE
53012: LD_INT 1
53014: DEC
53015: ST_TO_ADDR
53016: LD_VAR 0 7
53020: PUSH
53021: FOR_TO
53022: IFFALSE 53069
// begin hc_class = 20 ;
53024: LD_ADDR_OWVAR 28
53028: PUSH
53029: LD_INT 20
53031: ST_TO_ADDR
// hc_gallery =  ;
53032: LD_ADDR_OWVAR 33
53036: PUSH
53037: LD_STRING 
53039: ST_TO_ADDR
// animal := CreateHuman ;
53040: LD_ADDR_VAR 0 12
53044: PUSH
53045: CALL_OW 44
53049: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53050: LD_VAR 0 12
53054: PPUSH
53055: LD_VAR 0 9
53059: PPUSH
53060: LD_INT 0
53062: PPUSH
53063: CALL 54714 0 3
// end ;
53067: GO 53021
53069: POP
53070: POP
// end ;
53071: LD_VAR 0 10
53075: RET
// export function WantHeal ( sci , unit ) ; begin
53076: LD_INT 0
53078: PPUSH
// if GetTaskList ( sci ) > 0 then
53079: LD_VAR 0 1
53083: PPUSH
53084: CALL_OW 437
53088: PUSH
53089: LD_INT 0
53091: GREATER
53092: IFFALSE 53164
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53094: LD_VAR 0 1
53098: PPUSH
53099: CALL_OW 437
53103: PUSH
53104: LD_INT 1
53106: ARRAY
53107: PUSH
53108: LD_INT 1
53110: ARRAY
53111: PUSH
53112: LD_STRING l
53114: EQUAL
53115: IFFALSE 53142
53117: PUSH
53118: LD_VAR 0 1
53122: PPUSH
53123: CALL_OW 437
53127: PUSH
53128: LD_INT 1
53130: ARRAY
53131: PUSH
53132: LD_INT 4
53134: ARRAY
53135: PUSH
53136: LD_VAR 0 2
53140: EQUAL
53141: AND
53142: IFFALSE 53154
// result := true else
53144: LD_ADDR_VAR 0 3
53148: PUSH
53149: LD_INT 1
53151: ST_TO_ADDR
53152: GO 53162
// result := false ;
53154: LD_ADDR_VAR 0 3
53158: PUSH
53159: LD_INT 0
53161: ST_TO_ADDR
// end else
53162: GO 53172
// result := false ;
53164: LD_ADDR_VAR 0 3
53168: PUSH
53169: LD_INT 0
53171: ST_TO_ADDR
// end ;
53172: LD_VAR 0 3
53176: RET
// export function HealTarget ( sci ) ; begin
53177: LD_INT 0
53179: PPUSH
// if not sci then
53180: LD_VAR 0 1
53184: NOT
53185: IFFALSE 53189
// exit ;
53187: GO 53254
// result := 0 ;
53189: LD_ADDR_VAR 0 2
53193: PUSH
53194: LD_INT 0
53196: ST_TO_ADDR
// if GetTaskList ( sci ) then
53197: LD_VAR 0 1
53201: PPUSH
53202: CALL_OW 437
53206: IFFALSE 53254
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53208: LD_VAR 0 1
53212: PPUSH
53213: CALL_OW 437
53217: PUSH
53218: LD_INT 1
53220: ARRAY
53221: PUSH
53222: LD_INT 1
53224: ARRAY
53225: PUSH
53226: LD_STRING l
53228: EQUAL
53229: IFFALSE 53254
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53231: LD_ADDR_VAR 0 2
53235: PUSH
53236: LD_VAR 0 1
53240: PPUSH
53241: CALL_OW 437
53245: PUSH
53246: LD_INT 1
53248: ARRAY
53249: PUSH
53250: LD_INT 4
53252: ARRAY
53253: ST_TO_ADDR
// end ;
53254: LD_VAR 0 2
53258: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53259: LD_INT 0
53261: PPUSH
53262: PPUSH
53263: PPUSH
53264: PPUSH
// if not base_units then
53265: LD_VAR 0 1
53269: NOT
53270: IFFALSE 53274
// exit ;
53272: GO 53361
// result := false ;
53274: LD_ADDR_VAR 0 2
53278: PUSH
53279: LD_INT 0
53281: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53282: LD_ADDR_VAR 0 5
53286: PUSH
53287: LD_VAR 0 1
53291: PPUSH
53292: LD_INT 21
53294: PUSH
53295: LD_INT 3
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PPUSH
53302: CALL_OW 72
53306: ST_TO_ADDR
// if not tmp then
53307: LD_VAR 0 5
53311: NOT
53312: IFFALSE 53316
// exit ;
53314: GO 53361
// for i in tmp do
53316: LD_ADDR_VAR 0 3
53320: PUSH
53321: LD_VAR 0 5
53325: PUSH
53326: FOR_IN
53327: IFFALSE 53359
// begin result := EnemyInRange ( i , 22 ) ;
53329: LD_ADDR_VAR 0 2
53333: PUSH
53334: LD_VAR 0 3
53338: PPUSH
53339: LD_INT 22
53341: PPUSH
53342: CALL 50776 0 2
53346: ST_TO_ADDR
// if result then
53347: LD_VAR 0 2
53351: IFFALSE 53357
// exit ;
53353: POP
53354: POP
53355: GO 53361
// end ;
53357: GO 53326
53359: POP
53360: POP
// end ;
53361: LD_VAR 0 2
53365: RET
// export function FilterByTag ( units , tag ) ; begin
53366: LD_INT 0
53368: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53369: LD_ADDR_VAR 0 3
53373: PUSH
53374: LD_VAR 0 1
53378: PPUSH
53379: LD_INT 120
53381: PUSH
53382: LD_VAR 0 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PPUSH
53391: CALL_OW 72
53395: ST_TO_ADDR
// end ;
53396: LD_VAR 0 3
53400: RET
// export function IsDriver ( un ) ; begin
53401: LD_INT 0
53403: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53404: LD_ADDR_VAR 0 2
53408: PUSH
53409: LD_VAR 0 1
53413: PUSH
53414: LD_INT 55
53416: PUSH
53417: EMPTY
53418: LIST
53419: PPUSH
53420: CALL_OW 69
53424: IN
53425: ST_TO_ADDR
// end ;
53426: LD_VAR 0 2
53430: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53431: LD_INT 0
53433: PPUSH
53434: PPUSH
// list := [ ] ;
53435: LD_ADDR_VAR 0 5
53439: PUSH
53440: EMPTY
53441: ST_TO_ADDR
// case d of 0 :
53442: LD_VAR 0 3
53446: PUSH
53447: LD_INT 0
53449: DOUBLE
53450: EQUAL
53451: IFTRUE 53455
53453: GO 53588
53455: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53456: LD_ADDR_VAR 0 5
53460: PUSH
53461: LD_VAR 0 1
53465: PUSH
53466: LD_INT 4
53468: MINUS
53469: PUSH
53470: LD_VAR 0 2
53474: PUSH
53475: LD_INT 4
53477: MINUS
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: PUSH
53487: LD_VAR 0 1
53491: PUSH
53492: LD_INT 3
53494: MINUS
53495: PUSH
53496: LD_VAR 0 2
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: PUSH
53509: LD_VAR 0 1
53513: PUSH
53514: LD_INT 4
53516: PLUS
53517: PUSH
53518: LD_VAR 0 2
53522: PUSH
53523: LD_INT 4
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: PUSH
53531: LD_VAR 0 1
53535: PUSH
53536: LD_INT 3
53538: PLUS
53539: PUSH
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 3
53547: PLUS
53548: PUSH
53549: LD_INT 5
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: LIST
53556: PUSH
53557: LD_VAR 0 1
53561: PUSH
53562: LD_VAR 0 2
53566: PUSH
53567: LD_INT 4
53569: PLUS
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: LIST
53578: PUSH
53579: EMPTY
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: ST_TO_ADDR
// end ; 1 :
53586: GO 54286
53588: LD_INT 1
53590: DOUBLE
53591: EQUAL
53592: IFTRUE 53596
53594: GO 53729
53596: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53597: LD_ADDR_VAR 0 5
53601: PUSH
53602: LD_VAR 0 1
53606: PUSH
53607: LD_VAR 0 2
53611: PUSH
53612: LD_INT 4
53614: MINUS
53615: PUSH
53616: LD_INT 3
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: PUSH
53624: LD_VAR 0 1
53628: PUSH
53629: LD_INT 3
53631: MINUS
53632: PUSH
53633: LD_VAR 0 2
53637: PUSH
53638: LD_INT 3
53640: MINUS
53641: PUSH
53642: LD_INT 2
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: PUSH
53650: LD_VAR 0 1
53654: PUSH
53655: LD_INT 4
53657: MINUS
53658: PUSH
53659: LD_VAR 0 2
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: LIST
53671: PUSH
53672: LD_VAR 0 1
53676: PUSH
53677: LD_VAR 0 2
53681: PUSH
53682: LD_INT 3
53684: PLUS
53685: PUSH
53686: LD_INT 0
53688: PUSH
53689: EMPTY
53690: LIST
53691: LIST
53692: LIST
53693: PUSH
53694: LD_VAR 0 1
53698: PUSH
53699: LD_INT 4
53701: PLUS
53702: PUSH
53703: LD_VAR 0 2
53707: PUSH
53708: LD_INT 4
53710: PLUS
53711: PUSH
53712: LD_INT 5
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: LIST
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// end ; 2 :
53727: GO 54286
53729: LD_INT 2
53731: DOUBLE
53732: EQUAL
53733: IFTRUE 53737
53735: GO 53866
53737: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53738: LD_ADDR_VAR 0 5
53742: PUSH
53743: LD_VAR 0 1
53747: PUSH
53748: LD_VAR 0 2
53752: PUSH
53753: LD_INT 3
53755: MINUS
53756: PUSH
53757: LD_INT 3
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: LIST
53764: PUSH
53765: LD_VAR 0 1
53769: PUSH
53770: LD_INT 4
53772: PLUS
53773: PUSH
53774: LD_VAR 0 2
53778: PUSH
53779: LD_INT 4
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: PUSH
53787: LD_VAR 0 1
53791: PUSH
53792: LD_VAR 0 2
53796: PUSH
53797: LD_INT 4
53799: PLUS
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: PUSH
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 3
53816: MINUS
53817: PUSH
53818: LD_VAR 0 2
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: PUSH
53831: LD_VAR 0 1
53835: PUSH
53836: LD_INT 4
53838: MINUS
53839: PUSH
53840: LD_VAR 0 2
53844: PUSH
53845: LD_INT 4
53847: MINUS
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: LIST
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
// end ; 3 :
53864: GO 54286
53866: LD_INT 3
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53874
53872: GO 54007
53874: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53875: LD_ADDR_VAR 0 5
53879: PUSH
53880: LD_VAR 0 1
53884: PUSH
53885: LD_INT 3
53887: PLUS
53888: PUSH
53889: LD_VAR 0 2
53893: PUSH
53894: LD_INT 4
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: LIST
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: LD_INT 4
53909: PLUS
53910: PUSH
53911: LD_VAR 0 2
53915: PUSH
53916: LD_INT 4
53918: PLUS
53919: PUSH
53920: LD_INT 5
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: LIST
53927: PUSH
53928: LD_VAR 0 1
53932: PUSH
53933: LD_INT 4
53935: MINUS
53936: PUSH
53937: LD_VAR 0 2
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: PUSH
53950: LD_VAR 0 1
53954: PUSH
53955: LD_VAR 0 2
53959: PUSH
53960: LD_INT 4
53962: MINUS
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: PUSH
53972: LD_VAR 0 1
53976: PUSH
53977: LD_INT 3
53979: MINUS
53980: PUSH
53981: LD_VAR 0 2
53985: PUSH
53986: LD_INT 3
53988: MINUS
53989: PUSH
53990: LD_INT 2
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: LIST
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: ST_TO_ADDR
// end ; 4 :
54005: GO 54286
54007: LD_INT 4
54009: DOUBLE
54010: EQUAL
54011: IFTRUE 54015
54013: GO 54148
54015: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54016: LD_ADDR_VAR 0 5
54020: PUSH
54021: LD_VAR 0 1
54025: PUSH
54026: LD_VAR 0 2
54030: PUSH
54031: LD_INT 4
54033: PLUS
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: PUSH
54043: LD_VAR 0 1
54047: PUSH
54048: LD_INT 3
54050: PLUS
54051: PUSH
54052: LD_VAR 0 2
54056: PUSH
54057: LD_INT 3
54059: PLUS
54060: PUSH
54061: LD_INT 5
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: PUSH
54069: LD_VAR 0 1
54073: PUSH
54074: LD_INT 4
54076: PLUS
54077: PUSH
54078: LD_VAR 0 2
54082: PUSH
54083: LD_INT 4
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: LIST
54090: PUSH
54091: LD_VAR 0 1
54095: PUSH
54096: LD_VAR 0 2
54100: PUSH
54101: LD_INT 3
54103: MINUS
54104: PUSH
54105: LD_INT 3
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 4
54120: MINUS
54121: PUSH
54122: LD_VAR 0 2
54126: PUSH
54127: LD_INT 4
54129: MINUS
54130: PUSH
54131: LD_INT 2
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: ST_TO_ADDR
// end ; 5 :
54146: GO 54286
54148: LD_INT 5
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54285
54156: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54157: LD_ADDR_VAR 0 5
54161: PUSH
54162: LD_VAR 0 1
54166: PUSH
54167: LD_INT 4
54169: MINUS
54170: PUSH
54171: LD_VAR 0 2
54175: PUSH
54176: LD_INT 1
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: LIST
54183: PUSH
54184: LD_VAR 0 1
54188: PUSH
54189: LD_VAR 0 2
54193: PUSH
54194: LD_INT 4
54196: MINUS
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: LIST
54205: PUSH
54206: LD_VAR 0 1
54210: PUSH
54211: LD_INT 4
54213: PLUS
54214: PUSH
54215: LD_VAR 0 2
54219: PUSH
54220: LD_INT 4
54222: PLUS
54223: PUSH
54224: LD_INT 5
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: LIST
54231: PUSH
54232: LD_VAR 0 1
54236: PUSH
54237: LD_INT 3
54239: PLUS
54240: PUSH
54241: LD_VAR 0 2
54245: PUSH
54246: LD_INT 4
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: PUSH
54254: LD_VAR 0 1
54258: PUSH
54259: LD_VAR 0 2
54263: PUSH
54264: LD_INT 3
54266: PLUS
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: ST_TO_ADDR
// end ; end ;
54283: GO 54286
54285: POP
// result := list ;
54286: LD_ADDR_VAR 0 4
54290: PUSH
54291: LD_VAR 0 5
54295: ST_TO_ADDR
// end ;
54296: LD_VAR 0 4
54300: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54301: LD_INT 0
54303: PPUSH
54304: PPUSH
54305: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54306: LD_VAR 0 1
54310: NOT
54311: IFTRUE 54339
54313: PUSH
54314: LD_VAR 0 2
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: LD_INT 2
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 4
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: IN
54337: NOT
54338: OR
54339: IFFALSE 54343
// exit ;
54341: GO 54426
// tmp := [ ] ;
54343: LD_ADDR_VAR 0 5
54347: PUSH
54348: EMPTY
54349: ST_TO_ADDR
// for i in units do
54350: LD_ADDR_VAR 0 4
54354: PUSH
54355: LD_VAR 0 1
54359: PUSH
54360: FOR_IN
54361: IFFALSE 54395
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54363: LD_ADDR_VAR 0 5
54367: PUSH
54368: LD_VAR 0 5
54372: PPUSH
54373: LD_VAR 0 4
54377: PPUSH
54378: LD_VAR 0 2
54382: PPUSH
54383: CALL_OW 259
54387: PPUSH
54388: CALL 55821 0 2
54392: ST_TO_ADDR
54393: GO 54360
54395: POP
54396: POP
// if not tmp then
54397: LD_VAR 0 5
54401: NOT
54402: IFFALSE 54406
// exit ;
54404: GO 54426
// result := SortListByListDesc ( units , tmp ) ;
54406: LD_ADDR_VAR 0 3
54410: PUSH
54411: LD_VAR 0 1
54415: PPUSH
54416: LD_VAR 0 5
54420: PPUSH
54421: CALL_OW 77
54425: ST_TO_ADDR
// end ;
54426: LD_VAR 0 3
54430: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54431: LD_INT 0
54433: PPUSH
54434: PPUSH
54435: PPUSH
// result := false ;
54436: LD_ADDR_VAR 0 3
54440: PUSH
54441: LD_INT 0
54443: ST_TO_ADDR
// if not building then
54444: LD_VAR 0 2
54448: NOT
54449: IFFALSE 54453
// exit ;
54451: GO 54597
// x := GetX ( building ) ;
54453: LD_ADDR_VAR 0 4
54457: PUSH
54458: LD_VAR 0 2
54462: PPUSH
54463: CALL_OW 250
54467: ST_TO_ADDR
// y := GetY ( building ) ;
54468: LD_ADDR_VAR 0 5
54472: PUSH
54473: LD_VAR 0 2
54477: PPUSH
54478: CALL_OW 251
54482: ST_TO_ADDR
// if not x or not y then
54483: LD_VAR 0 4
54487: NOT
54488: IFTRUE 54497
54490: PUSH
54491: LD_VAR 0 5
54495: NOT
54496: OR
54497: IFFALSE 54501
// exit ;
54499: GO 54597
// if GetTaskList ( unit ) then
54501: LD_VAR 0 1
54505: PPUSH
54506: CALL_OW 437
54510: IFFALSE 54597
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54512: LD_STRING e
54514: PUSH
54515: LD_VAR 0 1
54519: PPUSH
54520: CALL_OW 437
54524: PUSH
54525: LD_INT 1
54527: ARRAY
54528: PUSH
54529: LD_INT 1
54531: ARRAY
54532: EQUAL
54533: IFFALSE 54560
54535: PUSH
54536: LD_VAR 0 4
54540: PUSH
54541: LD_VAR 0 1
54545: PPUSH
54546: CALL_OW 437
54550: PUSH
54551: LD_INT 1
54553: ARRAY
54554: PUSH
54555: LD_INT 2
54557: ARRAY
54558: EQUAL
54559: AND
54560: IFFALSE 54587
54562: PUSH
54563: LD_VAR 0 5
54567: PUSH
54568: LD_VAR 0 1
54572: PPUSH
54573: CALL_OW 437
54577: PUSH
54578: LD_INT 1
54580: ARRAY
54581: PUSH
54582: LD_INT 3
54584: ARRAY
54585: EQUAL
54586: AND
54587: IFFALSE 54597
// result := true end ;
54589: LD_ADDR_VAR 0 3
54593: PUSH
54594: LD_INT 1
54596: ST_TO_ADDR
// end ;
54597: LD_VAR 0 3
54601: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54602: LD_INT 0
54604: PPUSH
// result := false ;
54605: LD_ADDR_VAR 0 4
54609: PUSH
54610: LD_INT 0
54612: ST_TO_ADDR
// if GetTaskList ( unit ) then
54613: LD_VAR 0 1
54617: PPUSH
54618: CALL_OW 437
54622: IFFALSE 54709
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54624: LD_STRING M
54626: PUSH
54627: LD_VAR 0 1
54631: PPUSH
54632: CALL_OW 437
54636: PUSH
54637: LD_INT 1
54639: ARRAY
54640: PUSH
54641: LD_INT 1
54643: ARRAY
54644: EQUAL
54645: IFFALSE 54672
54647: PUSH
54648: LD_VAR 0 2
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: CALL_OW 437
54662: PUSH
54663: LD_INT 1
54665: ARRAY
54666: PUSH
54667: LD_INT 2
54669: ARRAY
54670: EQUAL
54671: AND
54672: IFFALSE 54699
54674: PUSH
54675: LD_VAR 0 3
54679: PUSH
54680: LD_VAR 0 1
54684: PPUSH
54685: CALL_OW 437
54689: PUSH
54690: LD_INT 1
54692: ARRAY
54693: PUSH
54694: LD_INT 3
54696: ARRAY
54697: EQUAL
54698: AND
54699: IFFALSE 54709
// result := true ;
54701: LD_ADDR_VAR 0 4
54705: PUSH
54706: LD_INT 1
54708: ST_TO_ADDR
// end ; end ;
54709: LD_VAR 0 4
54713: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54714: LD_INT 0
54716: PPUSH
54717: PPUSH
54718: PPUSH
54719: PPUSH
// if not unit or not area then
54720: LD_VAR 0 1
54724: NOT
54725: IFTRUE 54734
54727: PUSH
54728: LD_VAR 0 2
54732: NOT
54733: OR
54734: IFFALSE 54738
// exit ;
54736: GO 54914
// tmp := AreaToList ( area , i ) ;
54738: LD_ADDR_VAR 0 6
54742: PUSH
54743: LD_VAR 0 2
54747: PPUSH
54748: LD_VAR 0 5
54752: PPUSH
54753: CALL_OW 517
54757: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54758: LD_ADDR_VAR 0 5
54762: PUSH
54763: DOUBLE
54764: LD_INT 1
54766: DEC
54767: ST_TO_ADDR
54768: LD_VAR 0 6
54772: PUSH
54773: LD_INT 1
54775: ARRAY
54776: PUSH
54777: FOR_TO
54778: IFFALSE 54912
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54780: LD_ADDR_VAR 0 7
54784: PUSH
54785: LD_VAR 0 6
54789: PUSH
54790: LD_INT 1
54792: ARRAY
54793: PUSH
54794: LD_VAR 0 5
54798: ARRAY
54799: PUSH
54800: LD_VAR 0 6
54804: PUSH
54805: LD_INT 2
54807: ARRAY
54808: PUSH
54809: LD_VAR 0 5
54813: ARRAY
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54819: LD_INT 92
54821: PUSH
54822: LD_VAR 0 7
54826: PUSH
54827: LD_INT 1
54829: ARRAY
54830: PUSH
54831: LD_VAR 0 7
54835: PUSH
54836: LD_INT 2
54838: ARRAY
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: PPUSH
54849: CALL_OW 69
54853: PUSH
54854: LD_INT 0
54856: EQUAL
54857: IFFALSE 54910
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54859: LD_VAR 0 1
54863: PPUSH
54864: LD_VAR 0 7
54868: PUSH
54869: LD_INT 1
54871: ARRAY
54872: PPUSH
54873: LD_VAR 0 7
54877: PUSH
54878: LD_INT 2
54880: ARRAY
54881: PPUSH
54882: LD_VAR 0 3
54886: PPUSH
54887: CALL_OW 48
// result := IsPlaced ( unit ) ;
54891: LD_ADDR_VAR 0 4
54895: PUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: CALL_OW 305
54905: ST_TO_ADDR
// exit ;
54906: POP
54907: POP
54908: GO 54914
// end ; end ;
54910: GO 54777
54912: POP
54913: POP
// end ;
54914: LD_VAR 0 4
54918: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54919: LD_INT 0
54921: PPUSH
54922: PPUSH
54923: PPUSH
// if not side or side > 8 then
54924: LD_VAR 0 1
54928: NOT
54929: IFTRUE 54941
54931: PUSH
54932: LD_VAR 0 1
54936: PUSH
54937: LD_INT 8
54939: GREATER
54940: OR
54941: IFFALSE 54945
// exit ;
54943: GO 55132
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54945: LD_ADDR_VAR 0 4
54949: PUSH
54950: LD_INT 22
54952: PUSH
54953: LD_VAR 0 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 21
54964: PUSH
54965: LD_INT 3
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PPUSH
54976: CALL_OW 69
54980: ST_TO_ADDR
// if not tmp then
54981: LD_VAR 0 4
54985: NOT
54986: IFFALSE 54990
// exit ;
54988: GO 55132
// enable_addtolog := true ;
54990: LD_ADDR_OWVAR 81
54994: PUSH
54995: LD_INT 1
54997: ST_TO_ADDR
// AddToLog ( [ ) ;
54998: LD_STRING [
55000: PPUSH
55001: CALL_OW 561
// for i in tmp do
55005: LD_ADDR_VAR 0 3
55009: PUSH
55010: LD_VAR 0 4
55014: PUSH
55015: FOR_IN
55016: IFFALSE 55123
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55018: LD_STRING [
55020: PUSH
55021: LD_VAR 0 3
55025: PPUSH
55026: CALL_OW 266
55030: STR
55031: PUSH
55032: LD_STRING , 
55034: STR
55035: PUSH
55036: LD_VAR 0 3
55040: PPUSH
55041: CALL_OW 250
55045: STR
55046: PUSH
55047: LD_STRING , 
55049: STR
55050: PUSH
55051: LD_VAR 0 3
55055: PPUSH
55056: CALL_OW 251
55060: STR
55061: PUSH
55062: LD_STRING , 
55064: STR
55065: PUSH
55066: LD_VAR 0 3
55070: PPUSH
55071: CALL_OW 254
55075: STR
55076: PUSH
55077: LD_STRING , 
55079: STR
55080: PUSH
55081: LD_VAR 0 3
55085: PPUSH
55086: LD_INT 1
55088: PPUSH
55089: CALL_OW 268
55093: STR
55094: PUSH
55095: LD_STRING , 
55097: STR
55098: PUSH
55099: LD_VAR 0 3
55103: PPUSH
55104: LD_INT 2
55106: PPUSH
55107: CALL_OW 268
55111: STR
55112: PUSH
55113: LD_STRING ],
55115: STR
55116: PPUSH
55117: CALL_OW 561
// end ;
55121: GO 55015
55123: POP
55124: POP
// AddToLog ( ]; ) ;
55125: LD_STRING ];
55127: PPUSH
55128: CALL_OW 561
// end ;
55132: LD_VAR 0 2
55136: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55137: LD_INT 0
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
// if not area or not rate or not max then
55144: LD_VAR 0 1
55148: NOT
55149: IFTRUE 55158
55151: PUSH
55152: LD_VAR 0 2
55156: NOT
55157: OR
55158: IFTRUE 55167
55160: PUSH
55161: LD_VAR 0 4
55165: NOT
55166: OR
55167: IFFALSE 55171
// exit ;
55169: GO 55360
// while 1 do
55171: LD_INT 1
55173: IFFALSE 55360
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55175: LD_ADDR_VAR 0 9
55179: PUSH
55180: LD_VAR 0 1
55184: PPUSH
55185: LD_INT 1
55187: PPUSH
55188: CALL_OW 287
55192: PUSH
55193: LD_INT 10
55195: MUL
55196: ST_TO_ADDR
// r := rate / 10 ;
55197: LD_ADDR_VAR 0 7
55201: PUSH
55202: LD_VAR 0 2
55206: PUSH
55207: LD_INT 10
55209: DIVREAL
55210: ST_TO_ADDR
// time := 1 1$00 ;
55211: LD_ADDR_VAR 0 8
55215: PUSH
55216: LD_INT 2100
55218: ST_TO_ADDR
// if amount < min then
55219: LD_VAR 0 9
55223: PUSH
55224: LD_VAR 0 3
55228: LESS
55229: IFFALSE 55247
// r := r * 2 else
55231: LD_ADDR_VAR 0 7
55235: PUSH
55236: LD_VAR 0 7
55240: PUSH
55241: LD_INT 2
55243: MUL
55244: ST_TO_ADDR
55245: GO 55273
// if amount > max then
55247: LD_VAR 0 9
55251: PUSH
55252: LD_VAR 0 4
55256: GREATER
55257: IFFALSE 55273
// r := r / 2 ;
55259: LD_ADDR_VAR 0 7
55263: PUSH
55264: LD_VAR 0 7
55268: PUSH
55269: LD_INT 2
55271: DIVREAL
55272: ST_TO_ADDR
// time := time / r ;
55273: LD_ADDR_VAR 0 8
55277: PUSH
55278: LD_VAR 0 8
55282: PUSH
55283: LD_VAR 0 7
55287: DIVREAL
55288: ST_TO_ADDR
// if time < 0 then
55289: LD_VAR 0 8
55293: PUSH
55294: LD_INT 0
55296: LESS
55297: IFFALSE 55314
// time := time * - 1 ;
55299: LD_ADDR_VAR 0 8
55303: PUSH
55304: LD_VAR 0 8
55308: PUSH
55309: LD_INT 1
55311: NEG
55312: MUL
55313: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55314: LD_VAR 0 8
55318: PUSH
55319: LD_INT 35
55321: PPUSH
55322: LD_INT 875
55324: PPUSH
55325: CALL_OW 12
55329: PLUS
55330: PPUSH
55331: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55335: LD_INT 1
55337: PPUSH
55338: LD_INT 5
55340: PPUSH
55341: CALL_OW 12
55345: PPUSH
55346: LD_VAR 0 1
55350: PPUSH
55351: LD_INT 1
55353: PPUSH
55354: CALL_OW 55
// end ;
55358: GO 55171
// end ;
55360: LD_VAR 0 5
55364: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55365: LD_INT 0
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
55371: PPUSH
55372: PPUSH
55373: PPUSH
55374: PPUSH
// if not turrets or not factories then
55375: LD_VAR 0 1
55379: NOT
55380: IFTRUE 55389
55382: PUSH
55383: LD_VAR 0 2
55387: NOT
55388: OR
55389: IFFALSE 55393
// exit ;
55391: GO 55700
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55393: LD_ADDR_VAR 0 10
55397: PUSH
55398: LD_INT 5
55400: PUSH
55401: LD_INT 6
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: LD_INT 4
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: LD_INT 3
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 24
55435: PUSH
55436: LD_INT 25
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 23
55445: PUSH
55446: LD_INT 27
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 42
55459: PUSH
55460: LD_INT 43
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 44
55469: PUSH
55470: LD_INT 46
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 45
55479: PUSH
55480: LD_INT 47
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: LIST
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// result := [ ] ;
55497: LD_ADDR_VAR 0 3
55501: PUSH
55502: EMPTY
55503: ST_TO_ADDR
// for i in turrets do
55504: LD_ADDR_VAR 0 4
55508: PUSH
55509: LD_VAR 0 1
55513: PUSH
55514: FOR_IN
55515: IFFALSE 55698
// begin nat := GetNation ( i ) ;
55517: LD_ADDR_VAR 0 7
55521: PUSH
55522: LD_VAR 0 4
55526: PPUSH
55527: CALL_OW 248
55531: ST_TO_ADDR
// weapon := 0 ;
55532: LD_ADDR_VAR 0 8
55536: PUSH
55537: LD_INT 0
55539: ST_TO_ADDR
// if not nat then
55540: LD_VAR 0 7
55544: NOT
55545: IFFALSE 55549
// continue ;
55547: GO 55514
// for j in list [ nat ] do
55549: LD_ADDR_VAR 0 5
55553: PUSH
55554: LD_VAR 0 10
55558: PUSH
55559: LD_VAR 0 7
55563: ARRAY
55564: PUSH
55565: FOR_IN
55566: IFFALSE 55607
// if GetBWeapon ( i ) = j [ 1 ] then
55568: LD_VAR 0 4
55572: PPUSH
55573: CALL_OW 269
55577: PUSH
55578: LD_VAR 0 5
55582: PUSH
55583: LD_INT 1
55585: ARRAY
55586: EQUAL
55587: IFFALSE 55605
// begin weapon := j [ 2 ] ;
55589: LD_ADDR_VAR 0 8
55593: PUSH
55594: LD_VAR 0 5
55598: PUSH
55599: LD_INT 2
55601: ARRAY
55602: ST_TO_ADDR
// break ;
55603: GO 55607
// end ;
55605: GO 55565
55607: POP
55608: POP
// if not weapon then
55609: LD_VAR 0 8
55613: NOT
55614: IFFALSE 55618
// continue ;
55616: GO 55514
// for k in factories do
55618: LD_ADDR_VAR 0 6
55622: PUSH
55623: LD_VAR 0 2
55627: PUSH
55628: FOR_IN
55629: IFFALSE 55694
// begin weapons := AvailableWeaponList ( k ) ;
55631: LD_ADDR_VAR 0 9
55635: PUSH
55636: LD_VAR 0 6
55640: PPUSH
55641: CALL_OW 478
55645: ST_TO_ADDR
// if not weapons then
55646: LD_VAR 0 9
55650: NOT
55651: IFFALSE 55655
// continue ;
55653: GO 55628
// if weapon in weapons then
55655: LD_VAR 0 8
55659: PUSH
55660: LD_VAR 0 9
55664: IN
55665: IFFALSE 55692
// begin result := [ i , weapon ] ;
55667: LD_ADDR_VAR 0 3
55671: PUSH
55672: LD_VAR 0 4
55676: PUSH
55677: LD_VAR 0 8
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// exit ;
55686: POP
55687: POP
55688: POP
55689: POP
55690: GO 55700
// end ; end ;
55692: GO 55628
55694: POP
55695: POP
// end ;
55696: GO 55514
55698: POP
55699: POP
// end ;
55700: LD_VAR 0 3
55704: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55705: LD_INT 0
55707: PPUSH
// if not side or side > 8 then
55708: LD_VAR 0 3
55712: NOT
55713: IFTRUE 55725
55715: PUSH
55716: LD_VAR 0 3
55720: PUSH
55721: LD_INT 8
55723: GREATER
55724: OR
55725: IFFALSE 55729
// exit ;
55727: GO 55788
// if not range then
55729: LD_VAR 0 4
55733: NOT
55734: IFFALSE 55745
// range := - 12 ;
55736: LD_ADDR_VAR 0 4
55740: PUSH
55741: LD_INT 12
55743: NEG
55744: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55745: LD_VAR 0 1
55749: PPUSH
55750: LD_VAR 0 2
55754: PPUSH
55755: LD_VAR 0 3
55759: PPUSH
55760: LD_VAR 0 4
55764: PPUSH
55765: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55769: LD_VAR 0 1
55773: PPUSH
55774: LD_VAR 0 2
55778: PPUSH
55779: LD_VAR 0 3
55783: PPUSH
55784: CALL_OW 331
// end ;
55788: LD_VAR 0 5
55792: RET
// export function Video ( mode ) ; begin
55793: LD_INT 0
55795: PPUSH
// ingame_video = mode ;
55796: LD_ADDR_OWVAR 52
55800: PUSH
55801: LD_VAR 0 1
55805: ST_TO_ADDR
// interface_hidden = mode ;
55806: LD_ADDR_OWVAR 54
55810: PUSH
55811: LD_VAR 0 1
55815: ST_TO_ADDR
// end ;
55816: LD_VAR 0 2
55820: RET
// export function Join ( array , element ) ; begin
55821: LD_INT 0
55823: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55824: LD_ADDR_VAR 0 3
55828: PUSH
55829: LD_VAR 0 1
55833: PPUSH
55834: LD_VAR 0 1
55838: PUSH
55839: LD_INT 1
55841: PLUS
55842: PPUSH
55843: LD_VAR 0 2
55847: PPUSH
55848: CALL_OW 1
55852: ST_TO_ADDR
// end ;
55853: LD_VAR 0 3
55857: RET
// export function JoinUnion ( array , element ) ; begin
55858: LD_INT 0
55860: PPUSH
// result := array union element ;
55861: LD_ADDR_VAR 0 3
55865: PUSH
55866: LD_VAR 0 1
55870: PUSH
55871: LD_VAR 0 2
55875: UNION
55876: ST_TO_ADDR
// end ;
55877: LD_VAR 0 3
55881: RET
// export function GetBehemoths ( side ) ; begin
55882: LD_INT 0
55884: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55885: LD_ADDR_VAR 0 2
55889: PUSH
55890: LD_INT 22
55892: PUSH
55893: LD_VAR 0 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 31
55904: PUSH
55905: LD_INT 25
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PPUSH
55916: CALL_OW 69
55920: ST_TO_ADDR
// end ;
55921: LD_VAR 0 2
55925: RET
// export function Shuffle ( array ) ; var i , index ; begin
55926: LD_INT 0
55928: PPUSH
55929: PPUSH
55930: PPUSH
// result := [ ] ;
55931: LD_ADDR_VAR 0 2
55935: PUSH
55936: EMPTY
55937: ST_TO_ADDR
// if not array then
55938: LD_VAR 0 1
55942: NOT
55943: IFFALSE 55947
// exit ;
55945: GO 56046
// Randomize ;
55947: CALL_OW 10
// for i = array downto 1 do
55951: LD_ADDR_VAR 0 3
55955: PUSH
55956: DOUBLE
55957: LD_VAR 0 1
55961: INC
55962: ST_TO_ADDR
55963: LD_INT 1
55965: PUSH
55966: FOR_DOWNTO
55967: IFFALSE 56044
// begin index := rand ( 1 , array ) ;
55969: LD_ADDR_VAR 0 4
55973: PUSH
55974: LD_INT 1
55976: PPUSH
55977: LD_VAR 0 1
55981: PPUSH
55982: CALL_OW 12
55986: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55987: LD_ADDR_VAR 0 2
55991: PUSH
55992: LD_VAR 0 2
55996: PPUSH
55997: LD_VAR 0 2
56001: PUSH
56002: LD_INT 1
56004: PLUS
56005: PPUSH
56006: LD_VAR 0 1
56010: PUSH
56011: LD_VAR 0 4
56015: ARRAY
56016: PPUSH
56017: CALL_OW 2
56021: ST_TO_ADDR
// array := Delete ( array , index ) ;
56022: LD_ADDR_VAR 0 1
56026: PUSH
56027: LD_VAR 0 1
56031: PPUSH
56032: LD_VAR 0 4
56036: PPUSH
56037: CALL_OW 3
56041: ST_TO_ADDR
// end ;
56042: GO 55966
56044: POP
56045: POP
// end ;
56046: LD_VAR 0 2
56050: RET
// export function GetBaseMaterials ( base ) ; begin
56051: LD_INT 0
56053: PPUSH
// result := [ 0 , 0 , 0 ] ;
56054: LD_ADDR_VAR 0 2
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: LD_INT 0
56064: PUSH
56065: LD_INT 0
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: LIST
56072: ST_TO_ADDR
// if not base then
56073: LD_VAR 0 1
56077: NOT
56078: IFFALSE 56082
// exit ;
56080: GO 56131
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56082: LD_ADDR_VAR 0 2
56086: PUSH
56087: LD_VAR 0 1
56091: PPUSH
56092: LD_INT 1
56094: PPUSH
56095: CALL_OW 275
56099: PUSH
56100: LD_VAR 0 1
56104: PPUSH
56105: LD_INT 2
56107: PPUSH
56108: CALL_OW 275
56112: PUSH
56113: LD_VAR 0 1
56117: PPUSH
56118: LD_INT 3
56120: PPUSH
56121: CALL_OW 275
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: ST_TO_ADDR
// end ;
56131: LD_VAR 0 2
56135: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56136: LD_INT 0
56138: PPUSH
56139: PPUSH
// result := array ;
56140: LD_ADDR_VAR 0 3
56144: PUSH
56145: LD_VAR 0 1
56149: ST_TO_ADDR
// if size >= result then
56150: LD_VAR 0 2
56154: PUSH
56155: LD_VAR 0 3
56159: GREATEREQUAL
56160: IFFALSE 56164
// exit ;
56162: GO 56214
// if size then
56164: LD_VAR 0 2
56168: IFFALSE 56214
// for i := array downto size do
56170: LD_ADDR_VAR 0 4
56174: PUSH
56175: DOUBLE
56176: LD_VAR 0 1
56180: INC
56181: ST_TO_ADDR
56182: LD_VAR 0 2
56186: PUSH
56187: FOR_DOWNTO
56188: IFFALSE 56212
// result := Delete ( result , result ) ;
56190: LD_ADDR_VAR 0 3
56194: PUSH
56195: LD_VAR 0 3
56199: PPUSH
56200: LD_VAR 0 3
56204: PPUSH
56205: CALL_OW 3
56209: ST_TO_ADDR
56210: GO 56187
56212: POP
56213: POP
// end ;
56214: LD_VAR 0 3
56218: RET
// export function ComExit ( unit ) ; var tmp ; begin
56219: LD_INT 0
56221: PPUSH
56222: PPUSH
// if not IsInUnit ( unit ) then
56223: LD_VAR 0 1
56227: PPUSH
56228: CALL_OW 310
56232: NOT
56233: IFFALSE 56237
// exit ;
56235: GO 56297
// tmp := IsInUnit ( unit ) ;
56237: LD_ADDR_VAR 0 3
56241: PUSH
56242: LD_VAR 0 1
56246: PPUSH
56247: CALL_OW 310
56251: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56252: LD_VAR 0 3
56256: PPUSH
56257: CALL_OW 247
56261: PUSH
56262: LD_INT 2
56264: EQUAL
56265: IFFALSE 56278
// ComExitVehicle ( unit ) else
56267: LD_VAR 0 1
56271: PPUSH
56272: CALL_OW 121
56276: GO 56287
// ComExitBuilding ( unit ) ;
56278: LD_VAR 0 1
56282: PPUSH
56283: CALL_OW 122
// result := tmp ;
56287: LD_ADDR_VAR 0 2
56291: PUSH
56292: LD_VAR 0 3
56296: ST_TO_ADDR
// end ;
56297: LD_VAR 0 2
56301: RET
// export function ComExitAll ( units ) ; var i ; begin
56302: LD_INT 0
56304: PPUSH
56305: PPUSH
// if not units then
56306: LD_VAR 0 1
56310: NOT
56311: IFFALSE 56315
// exit ;
56313: GO 56341
// for i in units do
56315: LD_ADDR_VAR 0 3
56319: PUSH
56320: LD_VAR 0 1
56324: PUSH
56325: FOR_IN
56326: IFFALSE 56339
// ComExit ( i ) ;
56328: LD_VAR 0 3
56332: PPUSH
56333: CALL 56219 0 1
56337: GO 56325
56339: POP
56340: POP
// end ;
56341: LD_VAR 0 2
56345: RET
// export function ResetHc ; begin
56346: LD_INT 0
56348: PPUSH
// InitHc ;
56349: CALL_OW 19
// hc_importance := 0 ;
56353: LD_ADDR_OWVAR 32
56357: PUSH
56358: LD_INT 0
56360: ST_TO_ADDR
// end ;
56361: LD_VAR 0 1
56365: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56366: LD_INT 0
56368: PPUSH
56369: PPUSH
56370: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56371: LD_ADDR_VAR 0 6
56375: PUSH
56376: LD_VAR 0 1
56380: PUSH
56381: LD_VAR 0 3
56385: PLUS
56386: PUSH
56387: LD_INT 2
56389: DIV
56390: ST_TO_ADDR
// if _x < 0 then
56391: LD_VAR 0 6
56395: PUSH
56396: LD_INT 0
56398: LESS
56399: IFFALSE 56416
// _x := _x * - 1 ;
56401: LD_ADDR_VAR 0 6
56405: PUSH
56406: LD_VAR 0 6
56410: PUSH
56411: LD_INT 1
56413: NEG
56414: MUL
56415: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56416: LD_ADDR_VAR 0 7
56420: PUSH
56421: LD_VAR 0 2
56425: PUSH
56426: LD_VAR 0 4
56430: PLUS
56431: PUSH
56432: LD_INT 2
56434: DIV
56435: ST_TO_ADDR
// if _y < 0 then
56436: LD_VAR 0 7
56440: PUSH
56441: LD_INT 0
56443: LESS
56444: IFFALSE 56461
// _y := _y * - 1 ;
56446: LD_ADDR_VAR 0 7
56450: PUSH
56451: LD_VAR 0 7
56455: PUSH
56456: LD_INT 1
56458: NEG
56459: MUL
56460: ST_TO_ADDR
// result := [ _x , _y ] ;
56461: LD_ADDR_VAR 0 5
56465: PUSH
56466: LD_VAR 0 6
56470: PUSH
56471: LD_VAR 0 7
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: ST_TO_ADDR
// end ;
56480: LD_VAR 0 5
56484: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56485: LD_INT 0
56487: PPUSH
56488: PPUSH
56489: PPUSH
56490: PPUSH
// task := GetTaskList ( unit ) ;
56491: LD_ADDR_VAR 0 7
56495: PUSH
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 437
56505: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56506: LD_VAR 0 7
56510: NOT
56511: IFFALSE 56530
56513: PUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: LD_VAR 0 2
56523: PPUSH
56524: CALL_OW 308
56528: NOT
56529: AND
56530: IFFALSE 56534
// exit ;
56532: GO 56652
// if IsInArea ( unit , area ) then
56534: LD_VAR 0 1
56538: PPUSH
56539: LD_VAR 0 2
56543: PPUSH
56544: CALL_OW 308
56548: IFFALSE 56566
// begin ComMoveToArea ( unit , goAway ) ;
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_VAR 0 3
56559: PPUSH
56560: CALL_OW 113
// exit ;
56564: GO 56652
// end ; if task [ 1 ] [ 1 ] <> M then
56566: LD_VAR 0 7
56570: PUSH
56571: LD_INT 1
56573: ARRAY
56574: PUSH
56575: LD_INT 1
56577: ARRAY
56578: PUSH
56579: LD_STRING M
56581: NONEQUAL
56582: IFFALSE 56586
// exit ;
56584: GO 56652
// x := task [ 1 ] [ 2 ] ;
56586: LD_ADDR_VAR 0 5
56590: PUSH
56591: LD_VAR 0 7
56595: PUSH
56596: LD_INT 1
56598: ARRAY
56599: PUSH
56600: LD_INT 2
56602: ARRAY
56603: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56604: LD_ADDR_VAR 0 6
56608: PUSH
56609: LD_VAR 0 7
56613: PUSH
56614: LD_INT 1
56616: ARRAY
56617: PUSH
56618: LD_INT 3
56620: ARRAY
56621: ST_TO_ADDR
// if InArea ( x , y , area ) then
56622: LD_VAR 0 5
56626: PPUSH
56627: LD_VAR 0 6
56631: PPUSH
56632: LD_VAR 0 2
56636: PPUSH
56637: CALL_OW 309
56641: IFFALSE 56652
// ComStop ( unit ) ;
56643: LD_VAR 0 1
56647: PPUSH
56648: CALL_OW 141
// end ;
56652: LD_VAR 0 4
56656: RET
// export function Abs ( value ) ; begin
56657: LD_INT 0
56659: PPUSH
// result := value ;
56660: LD_ADDR_VAR 0 2
56664: PUSH
56665: LD_VAR 0 1
56669: ST_TO_ADDR
// if value < 0 then
56670: LD_VAR 0 1
56674: PUSH
56675: LD_INT 0
56677: LESS
56678: IFFALSE 56695
// result := value * - 1 ;
56680: LD_ADDR_VAR 0 2
56684: PUSH
56685: LD_VAR 0 1
56689: PUSH
56690: LD_INT 1
56692: NEG
56693: MUL
56694: ST_TO_ADDR
// end ;
56695: LD_VAR 0 2
56699: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56700: LD_INT 0
56702: PPUSH
56703: PPUSH
56704: PPUSH
56705: PPUSH
56706: PPUSH
56707: PPUSH
56708: PPUSH
56709: PPUSH
// if not unit or not building then
56710: LD_VAR 0 1
56714: NOT
56715: IFTRUE 56724
56717: PUSH
56718: LD_VAR 0 2
56722: NOT
56723: OR
56724: IFFALSE 56728
// exit ;
56726: GO 56956
// x := GetX ( building ) ;
56728: LD_ADDR_VAR 0 4
56732: PUSH
56733: LD_VAR 0 2
56737: PPUSH
56738: CALL_OW 250
56742: ST_TO_ADDR
// y := GetY ( building ) ;
56743: LD_ADDR_VAR 0 6
56747: PUSH
56748: LD_VAR 0 2
56752: PPUSH
56753: CALL_OW 251
56757: ST_TO_ADDR
// d := GetDir ( building ) ;
56758: LD_ADDR_VAR 0 8
56762: PUSH
56763: LD_VAR 0 2
56767: PPUSH
56768: CALL_OW 254
56772: ST_TO_ADDR
// r := 4 ;
56773: LD_ADDR_VAR 0 9
56777: PUSH
56778: LD_INT 4
56780: ST_TO_ADDR
// for i := 1 to 5 do
56781: LD_ADDR_VAR 0 10
56785: PUSH
56786: DOUBLE
56787: LD_INT 1
56789: DEC
56790: ST_TO_ADDR
56791: LD_INT 5
56793: PUSH
56794: FOR_TO
56795: IFFALSE 56954
// begin _x := ShiftX ( x , d , r + i ) ;
56797: LD_ADDR_VAR 0 5
56801: PUSH
56802: LD_VAR 0 4
56806: PPUSH
56807: LD_VAR 0 8
56811: PPUSH
56812: LD_VAR 0 9
56816: PUSH
56817: LD_VAR 0 10
56821: PLUS
56822: PPUSH
56823: CALL_OW 272
56827: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56828: LD_ADDR_VAR 0 7
56832: PUSH
56833: LD_VAR 0 6
56837: PPUSH
56838: LD_VAR 0 8
56842: PPUSH
56843: LD_VAR 0 9
56847: PUSH
56848: LD_VAR 0 10
56852: PLUS
56853: PPUSH
56854: CALL_OW 273
56858: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56859: LD_VAR 0 5
56863: PPUSH
56864: LD_VAR 0 7
56868: PPUSH
56869: CALL_OW 488
56873: IFFALSE 56908
56875: PUSH
56876: LD_VAR 0 5
56880: PPUSH
56881: LD_VAR 0 7
56885: PPUSH
56886: CALL_OW 428
56890: PPUSH
56891: CALL_OW 247
56895: PUSH
56896: LD_INT 3
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: IN
56906: NOT
56907: AND
56908: IFFALSE 56952
// begin ComMoveXY ( unit , _x , _y ) ;
56910: LD_VAR 0 1
56914: PPUSH
56915: LD_VAR 0 5
56919: PPUSH
56920: LD_VAR 0 7
56924: PPUSH
56925: CALL_OW 111
// result := [ _x , _y ] ;
56929: LD_ADDR_VAR 0 3
56933: PUSH
56934: LD_VAR 0 5
56938: PUSH
56939: LD_VAR 0 7
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: ST_TO_ADDR
// exit ;
56948: POP
56949: POP
56950: GO 56956
// end ; end ;
56952: GO 56794
56954: POP
56955: POP
// end ;
56956: LD_VAR 0 3
56960: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56961: LD_INT 0
56963: PPUSH
56964: PPUSH
56965: PPUSH
// result := 0 ;
56966: LD_ADDR_VAR 0 3
56970: PUSH
56971: LD_INT 0
56973: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56974: LD_VAR 0 1
56978: PUSH
56979: LD_INT 0
56981: LESS
56982: IFTRUE 56994
56984: PUSH
56985: LD_VAR 0 1
56989: PUSH
56990: LD_INT 8
56992: GREATER
56993: OR
56994: IFTRUE 57006
56996: PUSH
56997: LD_VAR 0 2
57001: PUSH
57002: LD_INT 0
57004: LESS
57005: OR
57006: IFTRUE 57018
57008: PUSH
57009: LD_VAR 0 2
57013: PUSH
57014: LD_INT 8
57016: GREATER
57017: OR
57018: IFFALSE 57022
// exit ;
57020: GO 57097
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57022: LD_ADDR_VAR 0 4
57026: PUSH
57027: LD_INT 22
57029: PUSH
57030: LD_VAR 0 2
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PPUSH
57039: CALL_OW 69
57043: PUSH
57044: FOR_IN
57045: IFFALSE 57095
// begin un := UnitShoot ( i ) ;
57047: LD_ADDR_VAR 0 5
57051: PUSH
57052: LD_VAR 0 4
57056: PPUSH
57057: CALL_OW 504
57061: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57062: LD_VAR 0 5
57066: PPUSH
57067: CALL_OW 255
57071: PUSH
57072: LD_VAR 0 1
57076: EQUAL
57077: IFFALSE 57093
// begin result := un ;
57079: LD_ADDR_VAR 0 3
57083: PUSH
57084: LD_VAR 0 5
57088: ST_TO_ADDR
// exit ;
57089: POP
57090: POP
57091: GO 57097
// end ; end ;
57093: GO 57044
57095: POP
57096: POP
// end ;
57097: LD_VAR 0 3
57101: RET
// export function GetCargoBay ( units ) ; begin
57102: LD_INT 0
57104: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57105: LD_ADDR_VAR 0 2
57109: PUSH
57110: LD_VAR 0 1
57114: PPUSH
57115: LD_INT 2
57117: PUSH
57118: LD_INT 34
57120: PUSH
57121: LD_INT 12
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 34
57130: PUSH
57131: LD_INT 51
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 34
57140: PUSH
57141: LD_INT 32
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 34
57150: PUSH
57151: LD_INT 89
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: PPUSH
57165: CALL_OW 72
57169: ST_TO_ADDR
// end ;
57170: LD_VAR 0 2
57174: RET
// export function Negate ( value ) ; begin
57175: LD_INT 0
57177: PPUSH
// result := not value ;
57178: LD_ADDR_VAR 0 2
57182: PUSH
57183: LD_VAR 0 1
57187: NOT
57188: ST_TO_ADDR
// end ;
57189: LD_VAR 0 2
57193: RET
// export function Inc ( value ) ; begin
57194: LD_INT 0
57196: PPUSH
// result := value + 1 ;
57197: LD_ADDR_VAR 0 2
57201: PUSH
57202: LD_VAR 0 1
57206: PUSH
57207: LD_INT 1
57209: PLUS
57210: ST_TO_ADDR
// end ;
57211: LD_VAR 0 2
57215: RET
// export function Dec ( value ) ; begin
57216: LD_INT 0
57218: PPUSH
// result := value - 1 ;
57219: LD_ADDR_VAR 0 2
57223: PUSH
57224: LD_VAR 0 1
57228: PUSH
57229: LD_INT 1
57231: MINUS
57232: ST_TO_ADDR
// end ;
57233: LD_VAR 0 2
57237: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57238: LD_INT 0
57240: PPUSH
57241: PPUSH
57242: PPUSH
57243: PPUSH
57244: PPUSH
57245: PPUSH
57246: PPUSH
57247: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57248: LD_VAR 0 1
57252: PPUSH
57253: LD_VAR 0 2
57257: PPUSH
57258: CALL_OW 488
57262: NOT
57263: IFTRUE 57282
57265: PUSH
57266: LD_VAR 0 3
57270: PPUSH
57271: LD_VAR 0 4
57275: PPUSH
57276: CALL_OW 488
57280: NOT
57281: OR
57282: IFFALSE 57295
// begin result := - 1 ;
57284: LD_ADDR_VAR 0 5
57288: PUSH
57289: LD_INT 1
57291: NEG
57292: ST_TO_ADDR
// exit ;
57293: GO 57530
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57295: LD_ADDR_VAR 0 12
57299: PUSH
57300: LD_VAR 0 1
57304: PPUSH
57305: LD_VAR 0 2
57309: PPUSH
57310: LD_VAR 0 3
57314: PPUSH
57315: LD_VAR 0 4
57319: PPUSH
57320: CALL 56366 0 4
57324: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57325: LD_ADDR_VAR 0 11
57329: PUSH
57330: LD_VAR 0 1
57334: PPUSH
57335: LD_VAR 0 2
57339: PPUSH
57340: LD_VAR 0 12
57344: PUSH
57345: LD_INT 1
57347: ARRAY
57348: PPUSH
57349: LD_VAR 0 12
57353: PUSH
57354: LD_INT 2
57356: ARRAY
57357: PPUSH
57358: CALL_OW 298
57362: ST_TO_ADDR
// distance := 9999 ;
57363: LD_ADDR_VAR 0 10
57367: PUSH
57368: LD_INT 9999
57370: ST_TO_ADDR
// for i := 0 to 5 do
57371: LD_ADDR_VAR 0 6
57375: PUSH
57376: DOUBLE
57377: LD_INT 0
57379: DEC
57380: ST_TO_ADDR
57381: LD_INT 5
57383: PUSH
57384: FOR_TO
57385: IFFALSE 57528
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57387: LD_ADDR_VAR 0 7
57391: PUSH
57392: LD_VAR 0 1
57396: PPUSH
57397: LD_VAR 0 6
57401: PPUSH
57402: LD_VAR 0 11
57406: PPUSH
57407: CALL_OW 272
57411: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57412: LD_ADDR_VAR 0 8
57416: PUSH
57417: LD_VAR 0 2
57421: PPUSH
57422: LD_VAR 0 6
57426: PPUSH
57427: LD_VAR 0 11
57431: PPUSH
57432: CALL_OW 273
57436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57437: LD_VAR 0 7
57441: PPUSH
57442: LD_VAR 0 8
57446: PPUSH
57447: CALL_OW 488
57451: NOT
57452: IFFALSE 57456
// continue ;
57454: GO 57384
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57456: LD_ADDR_VAR 0 9
57460: PUSH
57461: LD_VAR 0 12
57465: PUSH
57466: LD_INT 1
57468: ARRAY
57469: PPUSH
57470: LD_VAR 0 12
57474: PUSH
57475: LD_INT 2
57477: ARRAY
57478: PPUSH
57479: LD_VAR 0 7
57483: PPUSH
57484: LD_VAR 0 8
57488: PPUSH
57489: CALL_OW 298
57493: ST_TO_ADDR
// if tmp < distance then
57494: LD_VAR 0 9
57498: PUSH
57499: LD_VAR 0 10
57503: LESS
57504: IFFALSE 57526
// begin result := i ;
57506: LD_ADDR_VAR 0 5
57510: PUSH
57511: LD_VAR 0 6
57515: ST_TO_ADDR
// distance := tmp ;
57516: LD_ADDR_VAR 0 10
57520: PUSH
57521: LD_VAR 0 9
57525: ST_TO_ADDR
// end ; end ;
57526: GO 57384
57528: POP
57529: POP
// end ;
57530: LD_VAR 0 5
57534: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57535: LD_INT 0
57537: PPUSH
57538: PPUSH
// if not driver or not IsInUnit ( driver ) then
57539: LD_VAR 0 1
57543: NOT
57544: IFTRUE 57558
57546: PUSH
57547: LD_VAR 0 1
57551: PPUSH
57552: CALL_OW 310
57556: NOT
57557: OR
57558: IFFALSE 57562
// exit ;
57560: GO 57652
// vehicle := IsInUnit ( driver ) ;
57562: LD_ADDR_VAR 0 3
57566: PUSH
57567: LD_VAR 0 1
57571: PPUSH
57572: CALL_OW 310
57576: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57577: LD_VAR 0 1
57581: PPUSH
57582: LD_STRING \
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: PUSH
57612: LD_STRING E
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_VAR 0 3
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PPUSH
57648: CALL_OW 446
// end ;
57652: LD_VAR 0 2
57656: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57657: LD_INT 0
57659: PPUSH
57660: PPUSH
// if not driver or not IsInUnit ( driver ) then
57661: LD_VAR 0 1
57665: NOT
57666: IFTRUE 57680
57668: PUSH
57669: LD_VAR 0 1
57673: PPUSH
57674: CALL_OW 310
57678: NOT
57679: OR
57680: IFFALSE 57684
// exit ;
57682: GO 57774
// vehicle := IsInUnit ( driver ) ;
57684: LD_ADDR_VAR 0 3
57688: PUSH
57689: LD_VAR 0 1
57693: PPUSH
57694: CALL_OW 310
57698: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57699: LD_VAR 0 1
57703: PPUSH
57704: LD_STRING \
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 0
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: LD_STRING E
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: LD_VAR 0 3
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PPUSH
57770: CALL_OW 447
// end ;
57774: LD_VAR 0 2
57778: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57779: LD_INT 0
57781: PPUSH
57782: PPUSH
57783: PPUSH
// tmp := [ ] ;
57784: LD_ADDR_VAR 0 5
57788: PUSH
57789: EMPTY
57790: ST_TO_ADDR
// for i in units do
57791: LD_ADDR_VAR 0 4
57795: PUSH
57796: LD_VAR 0 1
57800: PUSH
57801: FOR_IN
57802: IFFALSE 57840
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57804: LD_ADDR_VAR 0 5
57808: PUSH
57809: LD_VAR 0 5
57813: PPUSH
57814: LD_VAR 0 5
57818: PUSH
57819: LD_INT 1
57821: PLUS
57822: PPUSH
57823: LD_VAR 0 4
57827: PPUSH
57828: CALL_OW 256
57832: PPUSH
57833: CALL_OW 2
57837: ST_TO_ADDR
57838: GO 57801
57840: POP
57841: POP
// if not tmp then
57842: LD_VAR 0 5
57846: NOT
57847: IFFALSE 57851
// exit ;
57849: GO 57899
// if asc then
57851: LD_VAR 0 2
57855: IFFALSE 57879
// result := SortListByListAsc ( units , tmp ) else
57857: LD_ADDR_VAR 0 3
57861: PUSH
57862: LD_VAR 0 1
57866: PPUSH
57867: LD_VAR 0 5
57871: PPUSH
57872: CALL_OW 76
57876: ST_TO_ADDR
57877: GO 57899
// result := SortListByListDesc ( units , tmp ) ;
57879: LD_ADDR_VAR 0 3
57883: PUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: LD_VAR 0 5
57893: PPUSH
57894: CALL_OW 77
57898: ST_TO_ADDR
// end ;
57899: LD_VAR 0 3
57903: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57904: LD_INT 0
57906: PPUSH
57907: PPUSH
// task := GetTaskList ( mech ) ;
57908: LD_ADDR_VAR 0 4
57912: PUSH
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 437
57922: ST_TO_ADDR
// if not task then
57923: LD_VAR 0 4
57927: NOT
57928: IFFALSE 57932
// exit ;
57930: GO 57976
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57932: LD_ADDR_VAR 0 3
57936: PUSH
57937: LD_VAR 0 4
57941: PUSH
57942: LD_INT 1
57944: ARRAY
57945: PUSH
57946: LD_INT 1
57948: ARRAY
57949: PUSH
57950: LD_STRING r
57952: EQUAL
57953: IFFALSE 57975
57955: PUSH
57956: LD_VAR 0 4
57960: PUSH
57961: LD_INT 1
57963: ARRAY
57964: PUSH
57965: LD_INT 4
57967: ARRAY
57968: PUSH
57969: LD_VAR 0 2
57973: EQUAL
57974: AND
57975: ST_TO_ADDR
// end ;
57976: LD_VAR 0 3
57980: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57981: LD_INT 0
57983: PPUSH
// SetDir ( unit , d ) ;
57984: LD_VAR 0 1
57988: PPUSH
57989: LD_VAR 0 4
57993: PPUSH
57994: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57998: LD_ADDR_VAR 0 6
58002: PUSH
58003: LD_VAR 0 1
58007: PPUSH
58008: LD_VAR 0 2
58012: PPUSH
58013: LD_VAR 0 3
58017: PPUSH
58018: LD_VAR 0 5
58022: PPUSH
58023: CALL_OW 48
58027: ST_TO_ADDR
// end ;
58028: LD_VAR 0 6
58032: RET
// export function ToNaturalNumber ( number ) ; begin
58033: LD_INT 0
58035: PPUSH
// result := number div 1 ;
58036: LD_ADDR_VAR 0 2
58040: PUSH
58041: LD_VAR 0 1
58045: PUSH
58046: LD_INT 1
58048: DIV
58049: ST_TO_ADDR
// if number < 0 then
58050: LD_VAR 0 1
58054: PUSH
58055: LD_INT 0
58057: LESS
58058: IFFALSE 58068
// result := 0 ;
58060: LD_ADDR_VAR 0 2
58064: PUSH
58065: LD_INT 0
58067: ST_TO_ADDR
// end ;
58068: LD_VAR 0 2
58072: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
58073: LD_INT 0
58075: PPUSH
58076: PPUSH
58077: PPUSH
// if not buildings then
58078: LD_VAR 0 1
58082: NOT
58083: IFFALSE 58087
// exit ;
58085: GO 58202
// tmp := [ ] ;
58087: LD_ADDR_VAR 0 5
58091: PUSH
58092: EMPTY
58093: ST_TO_ADDR
// for b in buildings do
58094: LD_ADDR_VAR 0 4
58098: PUSH
58099: LD_VAR 0 1
58103: PUSH
58104: FOR_IN
58105: IFFALSE 58143
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
58107: LD_ADDR_VAR 0 5
58111: PUSH
58112: LD_VAR 0 5
58116: PPUSH
58117: LD_VAR 0 5
58121: PUSH
58122: LD_INT 1
58124: PLUS
58125: PPUSH
58126: LD_VAR 0 4
58130: PPUSH
58131: CALL_OW 266
58135: PPUSH
58136: CALL_OW 1
58140: ST_TO_ADDR
58141: GO 58104
58143: POP
58144: POP
// if not tmp then
58145: LD_VAR 0 5
58149: NOT
58150: IFFALSE 58154
// exit ;
58152: GO 58202
// if asc then
58154: LD_VAR 0 2
58158: IFFALSE 58182
// result := SortListByListAsc ( buildings , tmp ) else
58160: LD_ADDR_VAR 0 3
58164: PUSH
58165: LD_VAR 0 1
58169: PPUSH
58170: LD_VAR 0 5
58174: PPUSH
58175: CALL_OW 76
58179: ST_TO_ADDR
58180: GO 58202
// result := SortListByListDesc ( buildings , tmp ) ;
58182: LD_ADDR_VAR 0 3
58186: PUSH
58187: LD_VAR 0 1
58191: PPUSH
58192: LD_VAR 0 5
58196: PPUSH
58197: CALL_OW 77
58201: ST_TO_ADDR
// end ;
58202: LD_VAR 0 3
58206: RET
// export function SortByClass ( units , class ) ; var un ; begin
58207: LD_INT 0
58209: PPUSH
58210: PPUSH
// if not units or not class then
58211: LD_VAR 0 1
58215: NOT
58216: IFTRUE 58225
58218: PUSH
58219: LD_VAR 0 2
58223: NOT
58224: OR
58225: IFFALSE 58229
// exit ;
58227: GO 58324
// result := [ ] ;
58229: LD_ADDR_VAR 0 3
58233: PUSH
58234: EMPTY
58235: ST_TO_ADDR
// for un in units do
58236: LD_ADDR_VAR 0 4
58240: PUSH
58241: LD_VAR 0 1
58245: PUSH
58246: FOR_IN
58247: IFFALSE 58322
// if GetClass ( un ) = class then
58249: LD_VAR 0 4
58253: PPUSH
58254: CALL_OW 257
58258: PUSH
58259: LD_VAR 0 2
58263: EQUAL
58264: IFFALSE 58291
// result := Insert ( result , 1 , un ) else
58266: LD_ADDR_VAR 0 3
58270: PUSH
58271: LD_VAR 0 3
58275: PPUSH
58276: LD_INT 1
58278: PPUSH
58279: LD_VAR 0 4
58283: PPUSH
58284: CALL_OW 2
58288: ST_TO_ADDR
58289: GO 58320
// result := Replace ( result , result + 1 , un ) ;
58291: LD_ADDR_VAR 0 3
58295: PUSH
58296: LD_VAR 0 3
58300: PPUSH
58301: LD_VAR 0 3
58305: PUSH
58306: LD_INT 1
58308: PLUS
58309: PPUSH
58310: LD_VAR 0 4
58314: PPUSH
58315: CALL_OW 1
58319: ST_TO_ADDR
58320: GO 58246
58322: POP
58323: POP
// end ;
58324: LD_VAR 0 3
58328: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58329: LD_INT 0
58331: PPUSH
58332: PPUSH
58333: PPUSH
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
// result := [ ] ;
58338: LD_ADDR_VAR 0 4
58342: PUSH
58343: EMPTY
58344: ST_TO_ADDR
// if x - r < 0 then
58345: LD_VAR 0 1
58349: PUSH
58350: LD_VAR 0 3
58354: MINUS
58355: PUSH
58356: LD_INT 0
58358: LESS
58359: IFFALSE 58371
// min_x := 0 else
58361: LD_ADDR_VAR 0 8
58365: PUSH
58366: LD_INT 0
58368: ST_TO_ADDR
58369: GO 58387
// min_x := x - r ;
58371: LD_ADDR_VAR 0 8
58375: PUSH
58376: LD_VAR 0 1
58380: PUSH
58381: LD_VAR 0 3
58385: MINUS
58386: ST_TO_ADDR
// if y - r < 0 then
58387: LD_VAR 0 2
58391: PUSH
58392: LD_VAR 0 3
58396: MINUS
58397: PUSH
58398: LD_INT 0
58400: LESS
58401: IFFALSE 58413
// min_y := 0 else
58403: LD_ADDR_VAR 0 7
58407: PUSH
58408: LD_INT 0
58410: ST_TO_ADDR
58411: GO 58429
// min_y := y - r ;
58413: LD_ADDR_VAR 0 7
58417: PUSH
58418: LD_VAR 0 2
58422: PUSH
58423: LD_VAR 0 3
58427: MINUS
58428: ST_TO_ADDR
// max_x := x + r ;
58429: LD_ADDR_VAR 0 9
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_VAR 0 3
58443: PLUS
58444: ST_TO_ADDR
// max_y := y + r ;
58445: LD_ADDR_VAR 0 10
58449: PUSH
58450: LD_VAR 0 2
58454: PUSH
58455: LD_VAR 0 3
58459: PLUS
58460: ST_TO_ADDR
// for _x = min_x to max_x do
58461: LD_ADDR_VAR 0 5
58465: PUSH
58466: DOUBLE
58467: LD_VAR 0 8
58471: DEC
58472: ST_TO_ADDR
58473: LD_VAR 0 9
58477: PUSH
58478: FOR_TO
58479: IFFALSE 58580
// for _y = min_y to max_y do
58481: LD_ADDR_VAR 0 6
58485: PUSH
58486: DOUBLE
58487: LD_VAR 0 7
58491: DEC
58492: ST_TO_ADDR
58493: LD_VAR 0 10
58497: PUSH
58498: FOR_TO
58499: IFFALSE 58576
// begin if not ValidHex ( _x , _y ) then
58501: LD_VAR 0 5
58505: PPUSH
58506: LD_VAR 0 6
58510: PPUSH
58511: CALL_OW 488
58515: NOT
58516: IFFALSE 58520
// continue ;
58518: GO 58498
// if GetResourceTypeXY ( _x , _y ) then
58520: LD_VAR 0 5
58524: PPUSH
58525: LD_VAR 0 6
58529: PPUSH
58530: CALL_OW 283
58534: IFFALSE 58574
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58536: LD_ADDR_VAR 0 4
58540: PUSH
58541: LD_VAR 0 4
58545: PPUSH
58546: LD_VAR 0 4
58550: PUSH
58551: LD_INT 1
58553: PLUS
58554: PPUSH
58555: LD_VAR 0 5
58559: PUSH
58560: LD_VAR 0 6
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PPUSH
58569: CALL_OW 1
58573: ST_TO_ADDR
// end ;
58574: GO 58498
58576: POP
58577: POP
58578: GO 58478
58580: POP
58581: POP
// end ;
58582: LD_VAR 0 4
58586: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58587: LD_INT 0
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
58595: PPUSH
58596: PPUSH
// if not units then
58597: LD_VAR 0 1
58601: NOT
58602: IFFALSE 58606
// exit ;
58604: GO 59138
// result := UnitFilter ( units , [ f_ok ] ) ;
58606: LD_ADDR_VAR 0 3
58610: PUSH
58611: LD_VAR 0 1
58615: PPUSH
58616: LD_INT 50
58618: PUSH
58619: EMPTY
58620: LIST
58621: PPUSH
58622: CALL_OW 72
58626: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58627: LD_ADDR_VAR 0 8
58631: PUSH
58632: LD_VAR 0 1
58636: PUSH
58637: LD_INT 1
58639: ARRAY
58640: PPUSH
58641: CALL_OW 255
58645: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58646: LD_ADDR_VAR 0 10
58650: PUSH
58651: LD_INT 29
58653: PUSH
58654: LD_INT 91
58656: PUSH
58657: LD_INT 49
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: ST_TO_ADDR
// if not result then
58665: LD_VAR 0 3
58669: NOT
58670: IFFALSE 58674
// exit ;
58672: GO 59138
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58674: LD_ADDR_VAR 0 5
58678: PUSH
58679: LD_INT 81
58681: PUSH
58682: LD_VAR 0 8
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PPUSH
58691: CALL_OW 69
58695: ST_TO_ADDR
// for i in result do
58696: LD_ADDR_VAR 0 4
58700: PUSH
58701: LD_VAR 0 3
58705: PUSH
58706: FOR_IN
58707: IFFALSE 59136
// begin tag := GetTag ( i ) + 1 ;
58709: LD_ADDR_VAR 0 9
58713: PUSH
58714: LD_VAR 0 4
58718: PPUSH
58719: CALL_OW 110
58723: PUSH
58724: LD_INT 1
58726: PLUS
58727: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58728: LD_ADDR_VAR 0 7
58732: PUSH
58733: LD_VAR 0 4
58737: PPUSH
58738: CALL_OW 250
58742: PPUSH
58743: LD_VAR 0 4
58747: PPUSH
58748: CALL_OW 251
58752: PPUSH
58753: LD_INT 4
58755: PPUSH
58756: CALL 58329 0 3
58760: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58761: LD_VAR 0 4
58765: PPUSH
58766: CALL_OW 247
58770: PUSH
58771: LD_INT 2
58773: EQUAL
58774: IFFALSE 58786
58776: PUSH
58777: LD_VAR 0 7
58781: PUSH
58782: LD_INT 2
58784: GREATER
58785: AND
58786: IFFALSE 58806
58788: PUSH
58789: LD_VAR 0 4
58793: PPUSH
58794: CALL_OW 264
58798: PUSH
58799: LD_VAR 0 10
58803: IN
58804: NOT
58805: AND
58806: IFFALSE 58845
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58808: LD_VAR 0 4
58812: PPUSH
58813: LD_VAR 0 7
58817: PUSH
58818: LD_INT 1
58820: ARRAY
58821: PUSH
58822: LD_INT 1
58824: ARRAY
58825: PPUSH
58826: LD_VAR 0 7
58830: PUSH
58831: LD_INT 1
58833: ARRAY
58834: PUSH
58835: LD_INT 2
58837: ARRAY
58838: PPUSH
58839: CALL_OW 116
58843: GO 59134
// if path > tag then
58845: LD_VAR 0 2
58849: PUSH
58850: LD_VAR 0 9
58854: GREATER
58855: IFFALSE 59063
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58857: LD_ADDR_VAR 0 6
58861: PUSH
58862: LD_VAR 0 5
58866: PPUSH
58867: LD_INT 91
58869: PUSH
58870: LD_VAR 0 4
58874: PUSH
58875: LD_INT 8
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: LIST
58882: PPUSH
58883: CALL_OW 72
58887: ST_TO_ADDR
// if nearEnemy then
58888: LD_VAR 0 6
58892: IFFALSE 58961
// begin if GetWeapon ( i ) = ru_time_lapser then
58894: LD_VAR 0 4
58898: PPUSH
58899: CALL_OW 264
58903: PUSH
58904: LD_INT 49
58906: EQUAL
58907: IFFALSE 58935
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58909: LD_VAR 0 4
58913: PPUSH
58914: LD_VAR 0 6
58918: PPUSH
58919: LD_VAR 0 4
58923: PPUSH
58924: CALL_OW 74
58928: PPUSH
58929: CALL_OW 112
58933: GO 58959
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58935: LD_VAR 0 4
58939: PPUSH
58940: LD_VAR 0 6
58944: PPUSH
58945: LD_VAR 0 4
58949: PPUSH
58950: CALL_OW 74
58954: PPUSH
58955: CALL 60219 0 2
// end else
58959: GO 59061
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58961: LD_VAR 0 4
58965: PPUSH
58966: LD_VAR 0 2
58970: PUSH
58971: LD_VAR 0 9
58975: ARRAY
58976: PUSH
58977: LD_INT 1
58979: ARRAY
58980: PPUSH
58981: LD_VAR 0 2
58985: PUSH
58986: LD_VAR 0 9
58990: ARRAY
58991: PUSH
58992: LD_INT 2
58994: ARRAY
58995: PPUSH
58996: CALL_OW 297
59000: PUSH
59001: LD_INT 6
59003: GREATER
59004: IFFALSE 59047
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59006: LD_VAR 0 4
59010: PPUSH
59011: LD_VAR 0 2
59015: PUSH
59016: LD_VAR 0 9
59020: ARRAY
59021: PUSH
59022: LD_INT 1
59024: ARRAY
59025: PPUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_VAR 0 9
59035: ARRAY
59036: PUSH
59037: LD_INT 2
59039: ARRAY
59040: PPUSH
59041: CALL_OW 114
59045: GO 59061
// SetTag ( i , tag ) ;
59047: LD_VAR 0 4
59051: PPUSH
59052: LD_VAR 0 9
59056: PPUSH
59057: CALL_OW 109
// end else
59061: GO 59134
// if enemy then
59063: LD_VAR 0 5
59067: IFFALSE 59134
// begin if GetWeapon ( i ) = ru_time_lapser then
59069: LD_VAR 0 4
59073: PPUSH
59074: CALL_OW 264
59078: PUSH
59079: LD_INT 49
59081: EQUAL
59082: IFFALSE 59110
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
59084: LD_VAR 0 4
59088: PPUSH
59089: LD_VAR 0 5
59093: PPUSH
59094: LD_VAR 0 4
59098: PPUSH
59099: CALL_OW 74
59103: PPUSH
59104: CALL_OW 112
59108: GO 59134
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59110: LD_VAR 0 4
59114: PPUSH
59115: LD_VAR 0 5
59119: PPUSH
59120: LD_VAR 0 4
59124: PPUSH
59125: CALL_OW 74
59129: PPUSH
59130: CALL 60219 0 2
// end ; end ;
59134: GO 58706
59136: POP
59137: POP
// end ;
59138: LD_VAR 0 3
59142: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59143: LD_INT 0
59145: PPUSH
59146: PPUSH
59147: PPUSH
// if not unit or IsInUnit ( unit ) then
59148: LD_VAR 0 1
59152: NOT
59153: IFTRUE 59166
59155: PUSH
59156: LD_VAR 0 1
59160: PPUSH
59161: CALL_OW 310
59165: OR
59166: IFFALSE 59170
// exit ;
59168: GO 59261
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59170: LD_ADDR_VAR 0 4
59174: PUSH
59175: LD_VAR 0 1
59179: PPUSH
59180: CALL_OW 250
59184: PPUSH
59185: LD_VAR 0 2
59189: PPUSH
59190: LD_INT 1
59192: PPUSH
59193: CALL_OW 272
59197: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59198: LD_ADDR_VAR 0 5
59202: PUSH
59203: LD_VAR 0 1
59207: PPUSH
59208: CALL_OW 251
59212: PPUSH
59213: LD_VAR 0 2
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: CALL_OW 273
59225: ST_TO_ADDR
// if ValidHex ( x , y ) then
59226: LD_VAR 0 4
59230: PPUSH
59231: LD_VAR 0 5
59235: PPUSH
59236: CALL_OW 488
59240: IFFALSE 59261
// ComTurnXY ( unit , x , y ) ;
59242: LD_VAR 0 1
59246: PPUSH
59247: LD_VAR 0 4
59251: PPUSH
59252: LD_VAR 0 5
59256: PPUSH
59257: CALL_OW 118
// end ;
59261: LD_VAR 0 3
59265: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59266: LD_INT 0
59268: PPUSH
59269: PPUSH
// result := false ;
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: LD_INT 0
59277: ST_TO_ADDR
// if not units then
59278: LD_VAR 0 2
59282: NOT
59283: IFFALSE 59287
// exit ;
59285: GO 59332
// for i in units do
59287: LD_ADDR_VAR 0 4
59291: PUSH
59292: LD_VAR 0 2
59296: PUSH
59297: FOR_IN
59298: IFFALSE 59330
// if See ( side , i ) then
59300: LD_VAR 0 1
59304: PPUSH
59305: LD_VAR 0 4
59309: PPUSH
59310: CALL_OW 292
59314: IFFALSE 59328
// begin result := true ;
59316: LD_ADDR_VAR 0 3
59320: PUSH
59321: LD_INT 1
59323: ST_TO_ADDR
// exit ;
59324: POP
59325: POP
59326: GO 59332
// end ;
59328: GO 59297
59330: POP
59331: POP
// end ;
59332: LD_VAR 0 3
59336: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59337: LD_INT 0
59339: PPUSH
59340: PPUSH
59341: PPUSH
59342: PPUSH
// if not unit or not points then
59343: LD_VAR 0 1
59347: NOT
59348: IFTRUE 59357
59350: PUSH
59351: LD_VAR 0 2
59355: NOT
59356: OR
59357: IFFALSE 59361
// exit ;
59359: GO 59451
// dist := 99999 ;
59361: LD_ADDR_VAR 0 5
59365: PUSH
59366: LD_INT 99999
59368: ST_TO_ADDR
// for i in points do
59369: LD_ADDR_VAR 0 4
59373: PUSH
59374: LD_VAR 0 2
59378: PUSH
59379: FOR_IN
59380: IFFALSE 59449
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59382: LD_ADDR_VAR 0 6
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: LD_VAR 0 4
59396: PUSH
59397: LD_INT 1
59399: ARRAY
59400: PPUSH
59401: LD_VAR 0 4
59405: PUSH
59406: LD_INT 2
59408: ARRAY
59409: PPUSH
59410: CALL_OW 297
59414: ST_TO_ADDR
// if tmpDist < dist then
59415: LD_VAR 0 6
59419: PUSH
59420: LD_VAR 0 5
59424: LESS
59425: IFFALSE 59447
// begin result := i ;
59427: LD_ADDR_VAR 0 3
59431: PUSH
59432: LD_VAR 0 4
59436: ST_TO_ADDR
// dist := tmpDist ;
59437: LD_ADDR_VAR 0 5
59441: PUSH
59442: LD_VAR 0 6
59446: ST_TO_ADDR
// end ; end ;
59447: GO 59379
59449: POP
59450: POP
// end ;
59451: LD_VAR 0 3
59455: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59456: LD_INT 0
59458: PPUSH
// uc_side := side ;
59459: LD_ADDR_OWVAR 20
59463: PUSH
59464: LD_VAR 0 1
59468: ST_TO_ADDR
// uc_nation := 3 ;
59469: LD_ADDR_OWVAR 21
59473: PUSH
59474: LD_INT 3
59476: ST_TO_ADDR
// vc_chassis := 25 ;
59477: LD_ADDR_OWVAR 37
59481: PUSH
59482: LD_INT 25
59484: ST_TO_ADDR
// vc_engine := engine_siberite ;
59485: LD_ADDR_OWVAR 39
59489: PUSH
59490: LD_INT 3
59492: ST_TO_ADDR
// vc_control := control_computer ;
59493: LD_ADDR_OWVAR 38
59497: PUSH
59498: LD_INT 3
59500: ST_TO_ADDR
// vc_weapon := 59 ;
59501: LD_ADDR_OWVAR 40
59505: PUSH
59506: LD_INT 59
59508: ST_TO_ADDR
// result := CreateVehicle ;
59509: LD_ADDR_VAR 0 5
59513: PUSH
59514: CALL_OW 45
59518: ST_TO_ADDR
// SetDir ( result , d ) ;
59519: LD_VAR 0 5
59523: PPUSH
59524: LD_VAR 0 4
59528: PPUSH
59529: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59533: LD_VAR 0 5
59537: PPUSH
59538: LD_VAR 0 2
59542: PPUSH
59543: LD_VAR 0 3
59547: PPUSH
59548: LD_INT 0
59550: PPUSH
59551: CALL_OW 48
// end ;
59555: LD_VAR 0 5
59559: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59560: LD_INT 0
59562: PPUSH
59563: PPUSH
59564: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59565: LD_ADDR_VAR 0 2
59569: PUSH
59570: LD_INT 0
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: LD_INT 0
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59588: LD_VAR 0 1
59592: NOT
59593: IFTRUE 59626
59595: PUSH
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL_OW 264
59605: PUSH
59606: LD_INT 12
59608: PUSH
59609: LD_INT 51
59611: PUSH
59612: LD_INT 32
59614: PUSH
59615: LD_INT 89
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: IN
59624: NOT
59625: OR
59626: IFFALSE 59630
// exit ;
59628: GO 59728
// for i := 1 to 3 do
59630: LD_ADDR_VAR 0 3
59634: PUSH
59635: DOUBLE
59636: LD_INT 1
59638: DEC
59639: ST_TO_ADDR
59640: LD_INT 3
59642: PUSH
59643: FOR_TO
59644: IFFALSE 59726
// begin tmp := GetCargo ( cargo , i ) ;
59646: LD_ADDR_VAR 0 4
59650: PUSH
59651: LD_VAR 0 1
59655: PPUSH
59656: LD_VAR 0 3
59660: PPUSH
59661: CALL_OW 289
59665: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59666: LD_ADDR_VAR 0 2
59670: PUSH
59671: LD_VAR 0 2
59675: PPUSH
59676: LD_VAR 0 3
59680: PPUSH
59681: LD_VAR 0 4
59685: PPUSH
59686: CALL_OW 1
59690: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59691: LD_ADDR_VAR 0 2
59695: PUSH
59696: LD_VAR 0 2
59700: PPUSH
59701: LD_INT 4
59703: PPUSH
59704: LD_VAR 0 2
59708: PUSH
59709: LD_INT 4
59711: ARRAY
59712: PUSH
59713: LD_VAR 0 4
59717: PLUS
59718: PPUSH
59719: CALL_OW 1
59723: ST_TO_ADDR
// end ;
59724: GO 59643
59726: POP
59727: POP
// end ;
59728: LD_VAR 0 2
59732: RET
// export function Length ( array ) ; begin
59733: LD_INT 0
59735: PPUSH
// result := array + 0 ;
59736: LD_ADDR_VAR 0 2
59740: PUSH
59741: LD_VAR 0 1
59745: PUSH
59746: LD_INT 0
59748: PLUS
59749: ST_TO_ADDR
// end ;
59750: LD_VAR 0 2
59754: RET
// export function PrepareArray ( array ) ; begin
59755: LD_INT 0
59757: PPUSH
// result := array diff 0 ;
59758: LD_ADDR_VAR 0 2
59762: PUSH
59763: LD_VAR 0 1
59767: PUSH
59768: LD_INT 0
59770: DIFF
59771: ST_TO_ADDR
// if not result [ 1 ] then
59772: LD_VAR 0 2
59776: PUSH
59777: LD_INT 1
59779: ARRAY
59780: NOT
59781: IFFALSE 59801
// result := Delete ( result , 1 ) ;
59783: LD_ADDR_VAR 0 2
59787: PUSH
59788: LD_VAR 0 2
59792: PPUSH
59793: LD_INT 1
59795: PPUSH
59796: CALL_OW 3
59800: ST_TO_ADDR
// end ;
59801: LD_VAR 0 2
59805: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59806: LD_INT 0
59808: PPUSH
59809: PPUSH
59810: PPUSH
59811: PPUSH
// sibRocketRange := 25 ;
59812: LD_ADDR_VAR 0 6
59816: PUSH
59817: LD_INT 25
59819: ST_TO_ADDR
// result := false ;
59820: LD_ADDR_VAR 0 4
59824: PUSH
59825: LD_INT 0
59827: ST_TO_ADDR
// for i := 0 to 5 do
59828: LD_ADDR_VAR 0 5
59832: PUSH
59833: DOUBLE
59834: LD_INT 0
59836: DEC
59837: ST_TO_ADDR
59838: LD_INT 5
59840: PUSH
59841: FOR_TO
59842: IFFALSE 59909
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59844: LD_VAR 0 1
59848: PPUSH
59849: LD_VAR 0 5
59853: PPUSH
59854: LD_VAR 0 6
59858: PPUSH
59859: CALL_OW 272
59863: PPUSH
59864: LD_VAR 0 2
59868: PPUSH
59869: LD_VAR 0 5
59873: PPUSH
59874: LD_VAR 0 6
59878: PPUSH
59879: CALL_OW 273
59883: PPUSH
59884: LD_VAR 0 3
59888: PPUSH
59889: CALL_OW 309
59893: IFFALSE 59907
// begin result := true ;
59895: LD_ADDR_VAR 0 4
59899: PUSH
59900: LD_INT 1
59902: ST_TO_ADDR
// exit ;
59903: POP
59904: POP
59905: GO 59911
// end ;
59907: GO 59841
59909: POP
59910: POP
// end ;
59911: LD_VAR 0 4
59915: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59916: LD_INT 0
59918: PPUSH
59919: PPUSH
59920: PPUSH
// if btype = b_depot then
59921: LD_VAR 0 2
59925: PUSH
59926: LD_INT 0
59928: EQUAL
59929: IFFALSE 59941
// begin result := true ;
59931: LD_ADDR_VAR 0 3
59935: PUSH
59936: LD_INT 1
59938: ST_TO_ADDR
// exit ;
59939: GO 60061
// end ; pom := GetBase ( depot ) ;
59941: LD_ADDR_VAR 0 4
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: CALL_OW 274
59955: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59956: LD_ADDR_VAR 0 5
59960: PUSH
59961: LD_VAR 0 2
59965: PPUSH
59966: LD_VAR 0 1
59970: PPUSH
59971: CALL_OW 248
59975: PPUSH
59976: CALL_OW 450
59980: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59981: LD_ADDR_VAR 0 3
59985: PUSH
59986: LD_VAR 0 4
59990: PPUSH
59991: LD_INT 1
59993: PPUSH
59994: CALL_OW 275
59998: PUSH
59999: LD_VAR 0 5
60003: PUSH
60004: LD_INT 1
60006: ARRAY
60007: GREATEREQUAL
60008: IFFALSE 60034
60010: PUSH
60011: LD_VAR 0 4
60015: PPUSH
60016: LD_INT 2
60018: PPUSH
60019: CALL_OW 275
60023: PUSH
60024: LD_VAR 0 5
60028: PUSH
60029: LD_INT 2
60031: ARRAY
60032: GREATEREQUAL
60033: AND
60034: IFFALSE 60060
60036: PUSH
60037: LD_VAR 0 4
60041: PPUSH
60042: LD_INT 3
60044: PPUSH
60045: CALL_OW 275
60049: PUSH
60050: LD_VAR 0 5
60054: PUSH
60055: LD_INT 3
60057: ARRAY
60058: GREATEREQUAL
60059: AND
60060: ST_TO_ADDR
// end ;
60061: LD_VAR 0 3
60065: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
60066: LD_INT 0
60068: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
60069: LD_VAR 0 1
60073: PPUSH
60074: LD_VAR 0 2
60078: PPUSH
60079: LD_INT 0
60081: PPUSH
60082: LD_INT 0
60084: PPUSH
60085: LD_INT 1
60087: PPUSH
60088: LD_INT 0
60090: PPUSH
60091: CALL_OW 587
// end ;
60095: LD_VAR 0 3
60099: RET
// export function CenterOnNow ( unit ) ; begin
60100: LD_INT 0
60102: PPUSH
// result := IsInUnit ( unit ) ;
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: LD_VAR 0 1
60112: PPUSH
60113: CALL_OW 310
60117: ST_TO_ADDR
// if not result then
60118: LD_VAR 0 2
60122: NOT
60123: IFFALSE 60135
// result := unit ;
60125: LD_ADDR_VAR 0 2
60129: PUSH
60130: LD_VAR 0 1
60134: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60135: LD_VAR 0 1
60139: PPUSH
60140: CALL_OW 87
// end ;
60144: LD_VAR 0 2
60148: RET
// export function ComMoveHex ( unit , hex ) ; begin
60149: LD_INT 0
60151: PPUSH
// if not hex then
60152: LD_VAR 0 2
60156: NOT
60157: IFFALSE 60161
// exit ;
60159: GO 60214
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60161: LD_VAR 0 2
60165: PUSH
60166: LD_INT 1
60168: ARRAY
60169: PPUSH
60170: LD_VAR 0 2
60174: PUSH
60175: LD_INT 2
60177: ARRAY
60178: PPUSH
60179: CALL_OW 428
60183: IFFALSE 60187
// exit ;
60185: GO 60214
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60187: LD_VAR 0 1
60191: PPUSH
60192: LD_VAR 0 2
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PPUSH
60201: LD_VAR 0 2
60205: PUSH
60206: LD_INT 2
60208: ARRAY
60209: PPUSH
60210: CALL_OW 111
// end ;
60214: LD_VAR 0 3
60218: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60219: LD_INT 0
60221: PPUSH
60222: PPUSH
60223: PPUSH
// if not unit or not enemy then
60224: LD_VAR 0 1
60228: NOT
60229: IFTRUE 60238
60231: PUSH
60232: LD_VAR 0 2
60236: NOT
60237: OR
60238: IFFALSE 60242
// exit ;
60240: GO 60368
// x := GetX ( enemy ) ;
60242: LD_ADDR_VAR 0 4
60246: PUSH
60247: LD_VAR 0 2
60251: PPUSH
60252: CALL_OW 250
60256: ST_TO_ADDR
// y := GetY ( enemy ) ;
60257: LD_ADDR_VAR 0 5
60261: PUSH
60262: LD_VAR 0 2
60266: PPUSH
60267: CALL_OW 251
60271: ST_TO_ADDR
// if ValidHex ( x , y ) then
60272: LD_VAR 0 4
60276: PPUSH
60277: LD_VAR 0 5
60281: PPUSH
60282: CALL_OW 488
60286: IFFALSE 60368
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60288: LD_VAR 0 2
60292: PPUSH
60293: CALL_OW 247
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: LD_INT 2
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: IN
60308: IFTRUE 60331
60310: PUSH
60311: LD_VAR 0 1
60315: PPUSH
60316: CALL_OW 255
60320: PPUSH
60321: LD_VAR 0 2
60325: PPUSH
60326: CALL_OW 292
60330: OR
60331: IFFALSE 60349
// ComAttackUnit ( unit , enemy ) else
60333: LD_VAR 0 1
60337: PPUSH
60338: LD_VAR 0 2
60342: PPUSH
60343: CALL_OW 115
60347: GO 60368
// ComAgressiveMove ( unit , x , y ) ;
60349: LD_VAR 0 1
60353: PPUSH
60354: LD_VAR 0 4
60358: PPUSH
60359: LD_VAR 0 5
60363: PPUSH
60364: CALL_OW 114
// end ;
60368: LD_VAR 0 3
60372: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60373: LD_INT 0
60375: PPUSH
60376: PPUSH
60377: PPUSH
// list := AreaToList ( area , 0 ) ;
60378: LD_ADDR_VAR 0 5
60382: PUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: LD_INT 0
60390: PPUSH
60391: CALL_OW 517
60395: ST_TO_ADDR
// if not list then
60396: LD_VAR 0 5
60400: NOT
60401: IFFALSE 60405
// exit ;
60403: GO 60535
// if all then
60405: LD_VAR 0 2
60409: IFFALSE 60497
// begin for i := 1 to list [ 1 ] do
60411: LD_ADDR_VAR 0 4
60415: PUSH
60416: DOUBLE
60417: LD_INT 1
60419: DEC
60420: ST_TO_ADDR
60421: LD_VAR 0 5
60425: PUSH
60426: LD_INT 1
60428: ARRAY
60429: PUSH
60430: FOR_TO
60431: IFFALSE 60493
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60433: LD_ADDR_VAR 0 3
60437: PUSH
60438: LD_VAR 0 3
60442: PPUSH
60443: LD_VAR 0 3
60447: PUSH
60448: LD_INT 1
60450: PLUS
60451: PPUSH
60452: LD_VAR 0 5
60456: PUSH
60457: LD_INT 1
60459: ARRAY
60460: PUSH
60461: LD_VAR 0 4
60465: ARRAY
60466: PUSH
60467: LD_VAR 0 5
60471: PUSH
60472: LD_INT 2
60474: ARRAY
60475: PUSH
60476: LD_VAR 0 4
60480: ARRAY
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PPUSH
60486: CALL_OW 1
60490: ST_TO_ADDR
60491: GO 60430
60493: POP
60494: POP
// exit ;
60495: GO 60535
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: LD_VAR 0 5
60506: PUSH
60507: LD_INT 1
60509: ARRAY
60510: PUSH
60511: LD_INT 1
60513: ARRAY
60514: PUSH
60515: LD_VAR 0 5
60519: PUSH
60520: LD_INT 2
60522: ARRAY
60523: PUSH
60524: LD_INT 1
60526: ARRAY
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: EMPTY
60533: LIST
60534: ST_TO_ADDR
// end ;
60535: LD_VAR 0 3
60539: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60540: LD_INT 0
60542: PPUSH
60543: PPUSH
// list := AreaToList ( area , 0 ) ;
60544: LD_ADDR_VAR 0 4
60548: PUSH
60549: LD_VAR 0 1
60553: PPUSH
60554: LD_INT 0
60556: PPUSH
60557: CALL_OW 517
60561: ST_TO_ADDR
// if not list then
60562: LD_VAR 0 4
60566: NOT
60567: IFFALSE 60571
// exit ;
60569: GO 60612
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60571: LD_ADDR_VAR 0 3
60575: PUSH
60576: LD_VAR 0 4
60580: PUSH
60581: LD_INT 1
60583: ARRAY
60584: PUSH
60585: LD_INT 1
60587: ARRAY
60588: PUSH
60589: LD_VAR 0 4
60593: PUSH
60594: LD_INT 2
60596: ARRAY
60597: PUSH
60598: LD_INT 1
60600: ARRAY
60601: PUSH
60602: LD_VAR 0 2
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: LIST
60611: ST_TO_ADDR
// end ;
60612: LD_VAR 0 3
60616: RET
// export function First ( array ) ; begin
60617: LD_INT 0
60619: PPUSH
// if not array then
60620: LD_VAR 0 1
60624: NOT
60625: IFFALSE 60629
// exit ;
60627: GO 60643
// result := array [ 1 ] ;
60629: LD_ADDR_VAR 0 2
60633: PUSH
60634: LD_VAR 0 1
60638: PUSH
60639: LD_INT 1
60641: ARRAY
60642: ST_TO_ADDR
// end ;
60643: LD_VAR 0 2
60647: RET
// export function Last ( array ) ; begin
60648: LD_INT 0
60650: PPUSH
// if not array then
60651: LD_VAR 0 1
60655: NOT
60656: IFFALSE 60660
// exit ;
60658: GO 60676
// result := array [ array ] ;
60660: LD_ADDR_VAR 0 2
60664: PUSH
60665: LD_VAR 0 1
60669: PUSH
60670: LD_VAR 0 1
60674: ARRAY
60675: ST_TO_ADDR
// end ;
60676: LD_VAR 0 2
60680: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60681: LD_INT 0
60683: PPUSH
60684: PPUSH
// result := [ ] ;
60685: LD_ADDR_VAR 0 5
60689: PUSH
60690: EMPTY
60691: ST_TO_ADDR
// if not array then
60692: LD_VAR 0 1
60696: NOT
60697: IFFALSE 60701
// exit ;
60699: GO 60813
// for i := 1 to array do
60701: LD_ADDR_VAR 0 6
60705: PUSH
60706: DOUBLE
60707: LD_INT 1
60709: DEC
60710: ST_TO_ADDR
60711: LD_VAR 0 1
60715: PUSH
60716: FOR_TO
60717: IFFALSE 60811
// if array [ i ] [ index ] = value then
60719: LD_VAR 0 1
60723: PUSH
60724: LD_VAR 0 6
60728: ARRAY
60729: PUSH
60730: LD_VAR 0 2
60734: ARRAY
60735: PUSH
60736: LD_VAR 0 3
60740: EQUAL
60741: IFFALSE 60809
// begin if indexColumn then
60743: LD_VAR 0 4
60747: IFFALSE 60783
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60749: LD_ADDR_VAR 0 5
60753: PUSH
60754: LD_VAR 0 5
60758: PPUSH
60759: LD_VAR 0 1
60763: PUSH
60764: LD_VAR 0 6
60768: ARRAY
60769: PUSH
60770: LD_VAR 0 4
60774: ARRAY
60775: PPUSH
60776: CALL 55821 0 2
60780: ST_TO_ADDR
60781: GO 60809
// result := Join ( result , array [ i ] ) ;
60783: LD_ADDR_VAR 0 5
60787: PUSH
60788: LD_VAR 0 5
60792: PPUSH
60793: LD_VAR 0 1
60797: PUSH
60798: LD_VAR 0 6
60802: ARRAY
60803: PPUSH
60804: CALL 55821 0 2
60808: ST_TO_ADDR
// end ;
60809: GO 60716
60811: POP
60812: POP
// end ;
60813: LD_VAR 0 5
60817: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60818: LD_INT 0
60820: PPUSH
// if not vehicles or not parkingPoint then
60821: LD_VAR 0 1
60825: NOT
60826: IFTRUE 60835
60828: PUSH
60829: LD_VAR 0 2
60833: NOT
60834: OR
60835: IFFALSE 60839
// exit ;
60837: GO 60937
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60839: LD_ADDR_VAR 0 1
60843: PUSH
60844: LD_VAR 0 1
60848: PPUSH
60849: LD_INT 50
60851: PUSH
60852: EMPTY
60853: LIST
60854: PUSH
60855: LD_INT 3
60857: PUSH
60858: LD_INT 92
60860: PUSH
60861: LD_VAR 0 2
60865: PUSH
60866: LD_INT 1
60868: ARRAY
60869: PUSH
60870: LD_VAR 0 2
60874: PUSH
60875: LD_INT 2
60877: ARRAY
60878: PUSH
60879: LD_INT 8
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PPUSH
60896: CALL_OW 72
60900: ST_TO_ADDR
// if not vehicles then
60901: LD_VAR 0 1
60905: NOT
60906: IFFALSE 60910
// exit ;
60908: GO 60937
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60910: LD_VAR 0 1
60914: PPUSH
60915: LD_VAR 0 2
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: PPUSH
60924: LD_VAR 0 2
60928: PUSH
60929: LD_INT 2
60931: ARRAY
60932: PPUSH
60933: CALL_OW 111
// end ;
60937: LD_VAR 0 3
60941: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60942: LD_INT 0
60944: PPUSH
60945: PPUSH
60946: PPUSH
// if not side or not area then
60947: LD_VAR 0 1
60951: NOT
60952: IFTRUE 60961
60954: PUSH
60955: LD_VAR 0 2
60959: NOT
60960: OR
60961: IFFALSE 60965
// exit ;
60963: GO 61084
// tmp := AreaToList ( area , 0 ) ;
60965: LD_ADDR_VAR 0 5
60969: PUSH
60970: LD_VAR 0 2
60974: PPUSH
60975: LD_INT 0
60977: PPUSH
60978: CALL_OW 517
60982: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60983: LD_ADDR_VAR 0 4
60987: PUSH
60988: DOUBLE
60989: LD_INT 1
60991: DEC
60992: ST_TO_ADDR
60993: LD_VAR 0 5
60997: PUSH
60998: LD_INT 1
61000: ARRAY
61001: PUSH
61002: FOR_TO
61003: IFFALSE 61082
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
61005: LD_VAR 0 5
61009: PUSH
61010: LD_INT 1
61012: ARRAY
61013: PUSH
61014: LD_VAR 0 4
61018: ARRAY
61019: PPUSH
61020: LD_VAR 0 5
61024: PUSH
61025: LD_INT 2
61027: ARRAY
61028: PUSH
61029: LD_VAR 0 4
61033: ARRAY
61034: PPUSH
61035: CALL_OW 351
61039: IFFALSE 61080
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
61041: LD_VAR 0 5
61045: PUSH
61046: LD_INT 1
61048: ARRAY
61049: PUSH
61050: LD_VAR 0 4
61054: ARRAY
61055: PPUSH
61056: LD_VAR 0 5
61060: PUSH
61061: LD_INT 2
61063: ARRAY
61064: PUSH
61065: LD_VAR 0 4
61069: ARRAY
61070: PPUSH
61071: LD_VAR 0 1
61075: PPUSH
61076: CALL_OW 244
// end ;
61080: GO 61002
61082: POP
61083: POP
// end ;
61084: LD_VAR 0 3
61088: RET
// export function UniqueArray ( array ) ; var i ; begin
61089: LD_INT 0
61091: PPUSH
61092: PPUSH
// result := [ ] ;
61093: LD_ADDR_VAR 0 2
61097: PUSH
61098: EMPTY
61099: ST_TO_ADDR
// if not array then
61100: LD_VAR 0 1
61104: NOT
61105: IFFALSE 61109
// exit ;
61107: GO 61170
// for i := 1 to array do
61109: LD_ADDR_VAR 0 3
61113: PUSH
61114: DOUBLE
61115: LD_INT 1
61117: DEC
61118: ST_TO_ADDR
61119: LD_VAR 0 1
61123: PUSH
61124: FOR_TO
61125: IFFALSE 61168
// if not array [ i ] in result then
61127: LD_VAR 0 1
61131: PUSH
61132: LD_VAR 0 3
61136: ARRAY
61137: PUSH
61138: LD_VAR 0 2
61142: IN
61143: NOT
61144: IFFALSE 61166
// result := Join ( result , i ) ;
61146: LD_ADDR_VAR 0 2
61150: PUSH
61151: LD_VAR 0 2
61155: PPUSH
61156: LD_VAR 0 3
61160: PPUSH
61161: CALL 55821 0 2
61165: ST_TO_ADDR
61166: GO 61124
61168: POP
61169: POP
// end ; end_of_file
61170: LD_VAR 0 2
61174: RET
// export globalGameSaveCounter ; every 0 0$1 do
61175: GO 61177
61177: DISABLE
// begin enable ;
61178: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
61179: LD_STRING updateTimer(
61181: PUSH
61182: LD_OWVAR 1
61186: STR
61187: PUSH
61188: LD_STRING );
61190: STR
61191: PPUSH
61192: CALL_OW 559
// end ;
61196: END
// every 0 0$1 do
61197: GO 61199
61199: DISABLE
// begin globalGameSaveCounter := 0 ;
61200: LD_ADDR_EXP 50
61204: PUSH
61205: LD_INT 0
61207: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61208: LD_STRING setGameSaveCounter(0)
61210: PPUSH
61211: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61215: LD_STRING initStreamRollete();
61217: PPUSH
61218: CALL_OW 559
// InitStreamMode ;
61222: CALL 62574 0 0
// DefineStreamItems ( false ) ;
61226: LD_INT 0
61228: PPUSH
61229: CALL 63038 0 1
// end ;
61233: END
// export function SOS_MapStart ( ) ; begin
61234: LD_INT 0
61236: PPUSH
// if streamModeActive then
61237: LD_EXP 51
61241: IFFALSE 61250
// DefineStreamItems ( true ) ;
61243: LD_INT 1
61245: PPUSH
61246: CALL 63038 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
61250: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
61252: PPUSH
61253: CALL_OW 559
// UpdateLuaVariables ( ) ;
61257: CALL 61274 0 0
// UpdateFactoryWaypoints ( ) ;
61261: CALL 76160 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61265: CALL 76412 0 0
// end ;
61269: LD_VAR 0 1
61273: RET
// function UpdateLuaVariables ( ) ; begin
61274: LD_INT 0
61276: PPUSH
// if globalGameSaveCounter then
61277: LD_EXP 50
61281: IFFALSE 61315
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61283: LD_ADDR_EXP 50
61287: PUSH
61288: LD_EXP 50
61292: PPUSH
61293: CALL 57194 0 1
61297: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61298: LD_STRING setGameSaveCounter(
61300: PUSH
61301: LD_EXP 50
61305: STR
61306: PUSH
61307: LD_STRING )
61309: STR
61310: PPUSH
61311: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61315: LD_STRING setGameDifficulty(
61317: PUSH
61318: LD_OWVAR 67
61322: STR
61323: PUSH
61324: LD_STRING )
61326: STR
61327: PPUSH
61328: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61332: LD_STRING displayDifficulty(
61334: PUSH
61335: LD_OWVAR 67
61339: STR
61340: PUSH
61341: LD_STRING )
61343: STR
61344: PPUSH
61345: CALL_OW 559
// end ;
61349: LD_VAR 0 1
61353: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61354: LD_INT 0
61356: PPUSH
// if p2 = stream_mode then
61357: LD_VAR 0 2
61361: PUSH
61362: LD_INT 100
61364: EQUAL
61365: IFFALSE 62368
// begin if not StreamModeActive then
61367: LD_EXP 51
61371: NOT
61372: IFFALSE 61382
// StreamModeActive := true ;
61374: LD_ADDR_EXP 51
61378: PUSH
61379: LD_INT 1
61381: ST_TO_ADDR
// if p3 = 0 then
61382: LD_VAR 0 3
61386: PUSH
61387: LD_INT 0
61389: EQUAL
61390: IFFALSE 61396
// InitStreamMode ;
61392: CALL 62574 0 0
// if p3 = 1 then
61396: LD_VAR 0 3
61400: PUSH
61401: LD_INT 1
61403: EQUAL
61404: IFFALSE 61414
// sRocket := true ;
61406: LD_ADDR_EXP 56
61410: PUSH
61411: LD_INT 1
61413: ST_TO_ADDR
// if p3 = 2 then
61414: LD_VAR 0 3
61418: PUSH
61419: LD_INT 2
61421: EQUAL
61422: IFFALSE 61432
// sSpeed := true ;
61424: LD_ADDR_EXP 55
61428: PUSH
61429: LD_INT 1
61431: ST_TO_ADDR
// if p3 = 3 then
61432: LD_VAR 0 3
61436: PUSH
61437: LD_INT 3
61439: EQUAL
61440: IFFALSE 61450
// sEngine := true ;
61442: LD_ADDR_EXP 57
61446: PUSH
61447: LD_INT 1
61449: ST_TO_ADDR
// if p3 = 4 then
61450: LD_VAR 0 3
61454: PUSH
61455: LD_INT 4
61457: EQUAL
61458: IFFALSE 61468
// sSpec := true ;
61460: LD_ADDR_EXP 54
61464: PUSH
61465: LD_INT 1
61467: ST_TO_ADDR
// if p3 = 5 then
61468: LD_VAR 0 3
61472: PUSH
61473: LD_INT 5
61475: EQUAL
61476: IFFALSE 61486
// sLevel := true ;
61478: LD_ADDR_EXP 58
61482: PUSH
61483: LD_INT 1
61485: ST_TO_ADDR
// if p3 = 6 then
61486: LD_VAR 0 3
61490: PUSH
61491: LD_INT 6
61493: EQUAL
61494: IFFALSE 61504
// sArmoury := true ;
61496: LD_ADDR_EXP 59
61500: PUSH
61501: LD_INT 1
61503: ST_TO_ADDR
// if p3 = 7 then
61504: LD_VAR 0 3
61508: PUSH
61509: LD_INT 7
61511: EQUAL
61512: IFFALSE 61522
// sRadar := true ;
61514: LD_ADDR_EXP 60
61518: PUSH
61519: LD_INT 1
61521: ST_TO_ADDR
// if p3 = 8 then
61522: LD_VAR 0 3
61526: PUSH
61527: LD_INT 8
61529: EQUAL
61530: IFFALSE 61540
// sBunker := true ;
61532: LD_ADDR_EXP 61
61536: PUSH
61537: LD_INT 1
61539: ST_TO_ADDR
// if p3 = 9 then
61540: LD_VAR 0 3
61544: PUSH
61545: LD_INT 9
61547: EQUAL
61548: IFFALSE 61558
// sHack := true ;
61550: LD_ADDR_EXP 62
61554: PUSH
61555: LD_INT 1
61557: ST_TO_ADDR
// if p3 = 10 then
61558: LD_VAR 0 3
61562: PUSH
61563: LD_INT 10
61565: EQUAL
61566: IFFALSE 61576
// sFire := true ;
61568: LD_ADDR_EXP 63
61572: PUSH
61573: LD_INT 1
61575: ST_TO_ADDR
// if p3 = 11 then
61576: LD_VAR 0 3
61580: PUSH
61581: LD_INT 11
61583: EQUAL
61584: IFFALSE 61594
// sRefresh := true ;
61586: LD_ADDR_EXP 64
61590: PUSH
61591: LD_INT 1
61593: ST_TO_ADDR
// if p3 = 12 then
61594: LD_VAR 0 3
61598: PUSH
61599: LD_INT 12
61601: EQUAL
61602: IFFALSE 61612
// sExp := true ;
61604: LD_ADDR_EXP 65
61608: PUSH
61609: LD_INT 1
61611: ST_TO_ADDR
// if p3 = 13 then
61612: LD_VAR 0 3
61616: PUSH
61617: LD_INT 13
61619: EQUAL
61620: IFFALSE 61630
// sDepot := true ;
61622: LD_ADDR_EXP 66
61626: PUSH
61627: LD_INT 1
61629: ST_TO_ADDR
// if p3 = 14 then
61630: LD_VAR 0 3
61634: PUSH
61635: LD_INT 14
61637: EQUAL
61638: IFFALSE 61648
// sFlag := true ;
61640: LD_ADDR_EXP 67
61644: PUSH
61645: LD_INT 1
61647: ST_TO_ADDR
// if p3 = 15 then
61648: LD_VAR 0 3
61652: PUSH
61653: LD_INT 15
61655: EQUAL
61656: IFFALSE 61666
// sKamikadze := true ;
61658: LD_ADDR_EXP 75
61662: PUSH
61663: LD_INT 1
61665: ST_TO_ADDR
// if p3 = 16 then
61666: LD_VAR 0 3
61670: PUSH
61671: LD_INT 16
61673: EQUAL
61674: IFFALSE 61684
// sTroll := true ;
61676: LD_ADDR_EXP 76
61680: PUSH
61681: LD_INT 1
61683: ST_TO_ADDR
// if p3 = 17 then
61684: LD_VAR 0 3
61688: PUSH
61689: LD_INT 17
61691: EQUAL
61692: IFFALSE 61702
// sSlow := true ;
61694: LD_ADDR_EXP 77
61698: PUSH
61699: LD_INT 1
61701: ST_TO_ADDR
// if p3 = 18 then
61702: LD_VAR 0 3
61706: PUSH
61707: LD_INT 18
61709: EQUAL
61710: IFFALSE 61720
// sLack := true ;
61712: LD_ADDR_EXP 78
61716: PUSH
61717: LD_INT 1
61719: ST_TO_ADDR
// if p3 = 19 then
61720: LD_VAR 0 3
61724: PUSH
61725: LD_INT 19
61727: EQUAL
61728: IFFALSE 61738
// sTank := true ;
61730: LD_ADDR_EXP 80
61734: PUSH
61735: LD_INT 1
61737: ST_TO_ADDR
// if p3 = 20 then
61738: LD_VAR 0 3
61742: PUSH
61743: LD_INT 20
61745: EQUAL
61746: IFFALSE 61756
// sRemote := true ;
61748: LD_ADDR_EXP 81
61752: PUSH
61753: LD_INT 1
61755: ST_TO_ADDR
// if p3 = 21 then
61756: LD_VAR 0 3
61760: PUSH
61761: LD_INT 21
61763: EQUAL
61764: IFFALSE 61774
// sPowell := true ;
61766: LD_ADDR_EXP 82
61770: PUSH
61771: LD_INT 1
61773: ST_TO_ADDR
// if p3 = 22 then
61774: LD_VAR 0 3
61778: PUSH
61779: LD_INT 22
61781: EQUAL
61782: IFFALSE 61792
// sTeleport := true ;
61784: LD_ADDR_EXP 85
61788: PUSH
61789: LD_INT 1
61791: ST_TO_ADDR
// if p3 = 23 then
61792: LD_VAR 0 3
61796: PUSH
61797: LD_INT 23
61799: EQUAL
61800: IFFALSE 61810
// sOilTower := true ;
61802: LD_ADDR_EXP 87
61806: PUSH
61807: LD_INT 1
61809: ST_TO_ADDR
// if p3 = 24 then
61810: LD_VAR 0 3
61814: PUSH
61815: LD_INT 24
61817: EQUAL
61818: IFFALSE 61828
// sShovel := true ;
61820: LD_ADDR_EXP 88
61824: PUSH
61825: LD_INT 1
61827: ST_TO_ADDR
// if p3 = 25 then
61828: LD_VAR 0 3
61832: PUSH
61833: LD_INT 25
61835: EQUAL
61836: IFFALSE 61846
// sSheik := true ;
61838: LD_ADDR_EXP 89
61842: PUSH
61843: LD_INT 1
61845: ST_TO_ADDR
// if p3 = 26 then
61846: LD_VAR 0 3
61850: PUSH
61851: LD_INT 26
61853: EQUAL
61854: IFFALSE 61864
// sEarthquake := true ;
61856: LD_ADDR_EXP 91
61860: PUSH
61861: LD_INT 1
61863: ST_TO_ADDR
// if p3 = 27 then
61864: LD_VAR 0 3
61868: PUSH
61869: LD_INT 27
61871: EQUAL
61872: IFFALSE 61882
// sAI := true ;
61874: LD_ADDR_EXP 92
61878: PUSH
61879: LD_INT 1
61881: ST_TO_ADDR
// if p3 = 28 then
61882: LD_VAR 0 3
61886: PUSH
61887: LD_INT 28
61889: EQUAL
61890: IFFALSE 61900
// sCargo := true ;
61892: LD_ADDR_EXP 95
61896: PUSH
61897: LD_INT 1
61899: ST_TO_ADDR
// if p3 = 29 then
61900: LD_VAR 0 3
61904: PUSH
61905: LD_INT 29
61907: EQUAL
61908: IFFALSE 61918
// sDLaser := true ;
61910: LD_ADDR_EXP 96
61914: PUSH
61915: LD_INT 1
61917: ST_TO_ADDR
// if p3 = 30 then
61918: LD_VAR 0 3
61922: PUSH
61923: LD_INT 30
61925: EQUAL
61926: IFFALSE 61936
// sExchange := true ;
61928: LD_ADDR_EXP 97
61932: PUSH
61933: LD_INT 1
61935: ST_TO_ADDR
// if p3 = 31 then
61936: LD_VAR 0 3
61940: PUSH
61941: LD_INT 31
61943: EQUAL
61944: IFFALSE 61954
// sFac := true ;
61946: LD_ADDR_EXP 98
61950: PUSH
61951: LD_INT 1
61953: ST_TO_ADDR
// if p3 = 32 then
61954: LD_VAR 0 3
61958: PUSH
61959: LD_INT 32
61961: EQUAL
61962: IFFALSE 61972
// sPower := true ;
61964: LD_ADDR_EXP 99
61968: PUSH
61969: LD_INT 1
61971: ST_TO_ADDR
// if p3 = 33 then
61972: LD_VAR 0 3
61976: PUSH
61977: LD_INT 33
61979: EQUAL
61980: IFFALSE 61990
// sRandom := true ;
61982: LD_ADDR_EXP 100
61986: PUSH
61987: LD_INT 1
61989: ST_TO_ADDR
// if p3 = 34 then
61990: LD_VAR 0 3
61994: PUSH
61995: LD_INT 34
61997: EQUAL
61998: IFFALSE 62008
// sShield := true ;
62000: LD_ADDR_EXP 101
62004: PUSH
62005: LD_INT 1
62007: ST_TO_ADDR
// if p3 = 35 then
62008: LD_VAR 0 3
62012: PUSH
62013: LD_INT 35
62015: EQUAL
62016: IFFALSE 62026
// sTime := true ;
62018: LD_ADDR_EXP 102
62022: PUSH
62023: LD_INT 1
62025: ST_TO_ADDR
// if p3 = 36 then
62026: LD_VAR 0 3
62030: PUSH
62031: LD_INT 36
62033: EQUAL
62034: IFFALSE 62044
// sTools := true ;
62036: LD_ADDR_EXP 103
62040: PUSH
62041: LD_INT 1
62043: ST_TO_ADDR
// if p3 = 101 then
62044: LD_VAR 0 3
62048: PUSH
62049: LD_INT 101
62051: EQUAL
62052: IFFALSE 62062
// sSold := true ;
62054: LD_ADDR_EXP 68
62058: PUSH
62059: LD_INT 1
62061: ST_TO_ADDR
// if p3 = 102 then
62062: LD_VAR 0 3
62066: PUSH
62067: LD_INT 102
62069: EQUAL
62070: IFFALSE 62080
// sDiff := true ;
62072: LD_ADDR_EXP 69
62076: PUSH
62077: LD_INT 1
62079: ST_TO_ADDR
// if p3 = 103 then
62080: LD_VAR 0 3
62084: PUSH
62085: LD_INT 103
62087: EQUAL
62088: IFFALSE 62098
// sFog := true ;
62090: LD_ADDR_EXP 72
62094: PUSH
62095: LD_INT 1
62097: ST_TO_ADDR
// if p3 = 104 then
62098: LD_VAR 0 3
62102: PUSH
62103: LD_INT 104
62105: EQUAL
62106: IFFALSE 62116
// sReset := true ;
62108: LD_ADDR_EXP 73
62112: PUSH
62113: LD_INT 1
62115: ST_TO_ADDR
// if p3 = 105 then
62116: LD_VAR 0 3
62120: PUSH
62121: LD_INT 105
62123: EQUAL
62124: IFFALSE 62134
// sSun := true ;
62126: LD_ADDR_EXP 74
62130: PUSH
62131: LD_INT 1
62133: ST_TO_ADDR
// if p3 = 106 then
62134: LD_VAR 0 3
62138: PUSH
62139: LD_INT 106
62141: EQUAL
62142: IFFALSE 62152
// sTiger := true ;
62144: LD_ADDR_EXP 70
62148: PUSH
62149: LD_INT 1
62151: ST_TO_ADDR
// if p3 = 107 then
62152: LD_VAR 0 3
62156: PUSH
62157: LD_INT 107
62159: EQUAL
62160: IFFALSE 62170
// sBomb := true ;
62162: LD_ADDR_EXP 71
62166: PUSH
62167: LD_INT 1
62169: ST_TO_ADDR
// if p3 = 108 then
62170: LD_VAR 0 3
62174: PUSH
62175: LD_INT 108
62177: EQUAL
62178: IFFALSE 62188
// sWound := true ;
62180: LD_ADDR_EXP 79
62184: PUSH
62185: LD_INT 1
62187: ST_TO_ADDR
// if p3 = 109 then
62188: LD_VAR 0 3
62192: PUSH
62193: LD_INT 109
62195: EQUAL
62196: IFFALSE 62206
// sBetray := true ;
62198: LD_ADDR_EXP 83
62202: PUSH
62203: LD_INT 1
62205: ST_TO_ADDR
// if p3 = 110 then
62206: LD_VAR 0 3
62210: PUSH
62211: LD_INT 110
62213: EQUAL
62214: IFFALSE 62224
// sContamin := true ;
62216: LD_ADDR_EXP 84
62220: PUSH
62221: LD_INT 1
62223: ST_TO_ADDR
// if p3 = 111 then
62224: LD_VAR 0 3
62228: PUSH
62229: LD_INT 111
62231: EQUAL
62232: IFFALSE 62242
// sOil := true ;
62234: LD_ADDR_EXP 86
62238: PUSH
62239: LD_INT 1
62241: ST_TO_ADDR
// if p3 = 112 then
62242: LD_VAR 0 3
62246: PUSH
62247: LD_INT 112
62249: EQUAL
62250: IFFALSE 62260
// sStu := true ;
62252: LD_ADDR_EXP 90
62256: PUSH
62257: LD_INT 1
62259: ST_TO_ADDR
// if p3 = 113 then
62260: LD_VAR 0 3
62264: PUSH
62265: LD_INT 113
62267: EQUAL
62268: IFFALSE 62278
// sBazooka := true ;
62270: LD_ADDR_EXP 93
62274: PUSH
62275: LD_INT 1
62277: ST_TO_ADDR
// if p3 = 114 then
62278: LD_VAR 0 3
62282: PUSH
62283: LD_INT 114
62285: EQUAL
62286: IFFALSE 62296
// sMortar := true ;
62288: LD_ADDR_EXP 94
62292: PUSH
62293: LD_INT 1
62295: ST_TO_ADDR
// if p3 = 115 then
62296: LD_VAR 0 3
62300: PUSH
62301: LD_INT 115
62303: EQUAL
62304: IFFALSE 62314
// sRanger := true ;
62306: LD_ADDR_EXP 104
62310: PUSH
62311: LD_INT 1
62313: ST_TO_ADDR
// if p3 = 116 then
62314: LD_VAR 0 3
62318: PUSH
62319: LD_INT 116
62321: EQUAL
62322: IFFALSE 62332
// sComputer := true ;
62324: LD_ADDR_EXP 105
62328: PUSH
62329: LD_INT 1
62331: ST_TO_ADDR
// if p3 = 117 then
62332: LD_VAR 0 3
62336: PUSH
62337: LD_INT 117
62339: EQUAL
62340: IFFALSE 62350
// s30 := true ;
62342: LD_ADDR_EXP 106
62346: PUSH
62347: LD_INT 1
62349: ST_TO_ADDR
// if p3 = 118 then
62350: LD_VAR 0 3
62354: PUSH
62355: LD_INT 118
62357: EQUAL
62358: IFFALSE 62368
// s60 := true ;
62360: LD_ADDR_EXP 107
62364: PUSH
62365: LD_INT 1
62367: ST_TO_ADDR
// end ; if p2 = hack_mode then
62368: LD_VAR 0 2
62372: PUSH
62373: LD_INT 101
62375: EQUAL
62376: IFFALSE 62504
// begin case p3 of 1 :
62378: LD_VAR 0 3
62382: PUSH
62383: LD_INT 1
62385: DOUBLE
62386: EQUAL
62387: IFTRUE 62391
62389: GO 62398
62391: POP
// hHackUnlimitedResources ; 2 :
62392: CALL 74767 0 0
62396: GO 62504
62398: LD_INT 2
62400: DOUBLE
62401: EQUAL
62402: IFTRUE 62406
62404: GO 62413
62406: POP
// hHackSetLevel10 ; 3 :
62407: CALL 74900 0 0
62411: GO 62504
62413: LD_INT 3
62415: DOUBLE
62416: EQUAL
62417: IFTRUE 62421
62419: GO 62428
62421: POP
// hHackSetLevel10YourUnits ; 4 :
62422: CALL 74985 0 0
62426: GO 62504
62428: LD_INT 4
62430: DOUBLE
62431: EQUAL
62432: IFTRUE 62436
62434: GO 62443
62436: POP
// hHackInvincible ; 5 :
62437: CALL 75433 0 0
62441: GO 62504
62443: LD_INT 5
62445: DOUBLE
62446: EQUAL
62447: IFTRUE 62451
62449: GO 62458
62451: POP
// hHackInvisible ; 6 :
62452: CALL 75544 0 0
62456: GO 62504
62458: LD_INT 6
62460: DOUBLE
62461: EQUAL
62462: IFTRUE 62466
62464: GO 62473
62466: POP
// hHackChangeYourSide ; 7 :
62467: CALL 75601 0 0
62471: GO 62504
62473: LD_INT 7
62475: DOUBLE
62476: EQUAL
62477: IFTRUE 62481
62479: GO 62488
62481: POP
// hHackChangeUnitSide ; 8 :
62482: CALL 75643 0 0
62486: GO 62504
62488: LD_INT 8
62490: DOUBLE
62491: EQUAL
62492: IFTRUE 62496
62494: GO 62503
62496: POP
// hHackFog ; end ;
62497: CALL 75744 0 0
62501: GO 62504
62503: POP
// end ; if p2 = game_save_mode then
62504: LD_VAR 0 2
62508: PUSH
62509: LD_INT 102
62511: EQUAL
62512: IFFALSE 62569
// begin if p3 = 1 then
62514: LD_VAR 0 3
62518: PUSH
62519: LD_INT 1
62521: EQUAL
62522: IFFALSE 62534
// globalGameSaveCounter := p4 ;
62524: LD_ADDR_EXP 50
62528: PUSH
62529: LD_VAR 0 4
62533: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62534: LD_VAR 0 3
62538: PUSH
62539: LD_INT 2
62541: EQUAL
62542: IFFALSE 62550
62544: PUSH
62545: LD_EXP 50
62549: AND
62550: IFFALSE 62569
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62552: LD_STRING setGameSaveCounter(
62554: PUSH
62555: LD_EXP 50
62559: STR
62560: PUSH
62561: LD_STRING )
62563: STR
62564: PPUSH
62565: CALL_OW 559
// end ; end ;
62569: LD_VAR 0 7
62573: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62574: LD_INT 0
62576: PPUSH
// streamModeActive := false ;
62577: LD_ADDR_EXP 51
62581: PUSH
62582: LD_INT 0
62584: ST_TO_ADDR
// normalCounter := 36 ;
62585: LD_ADDR_EXP 52
62589: PUSH
62590: LD_INT 36
62592: ST_TO_ADDR
// hardcoreCounter := 18 ;
62593: LD_ADDR_EXP 53
62597: PUSH
62598: LD_INT 18
62600: ST_TO_ADDR
// sRocket := false ;
62601: LD_ADDR_EXP 56
62605: PUSH
62606: LD_INT 0
62608: ST_TO_ADDR
// sSpeed := false ;
62609: LD_ADDR_EXP 55
62613: PUSH
62614: LD_INT 0
62616: ST_TO_ADDR
// sEngine := false ;
62617: LD_ADDR_EXP 57
62621: PUSH
62622: LD_INT 0
62624: ST_TO_ADDR
// sSpec := false ;
62625: LD_ADDR_EXP 54
62629: PUSH
62630: LD_INT 0
62632: ST_TO_ADDR
// sLevel := false ;
62633: LD_ADDR_EXP 58
62637: PUSH
62638: LD_INT 0
62640: ST_TO_ADDR
// sArmoury := false ;
62641: LD_ADDR_EXP 59
62645: PUSH
62646: LD_INT 0
62648: ST_TO_ADDR
// sRadar := false ;
62649: LD_ADDR_EXP 60
62653: PUSH
62654: LD_INT 0
62656: ST_TO_ADDR
// sBunker := false ;
62657: LD_ADDR_EXP 61
62661: PUSH
62662: LD_INT 0
62664: ST_TO_ADDR
// sHack := false ;
62665: LD_ADDR_EXP 62
62669: PUSH
62670: LD_INT 0
62672: ST_TO_ADDR
// sFire := false ;
62673: LD_ADDR_EXP 63
62677: PUSH
62678: LD_INT 0
62680: ST_TO_ADDR
// sRefresh := false ;
62681: LD_ADDR_EXP 64
62685: PUSH
62686: LD_INT 0
62688: ST_TO_ADDR
// sExp := false ;
62689: LD_ADDR_EXP 65
62693: PUSH
62694: LD_INT 0
62696: ST_TO_ADDR
// sDepot := false ;
62697: LD_ADDR_EXP 66
62701: PUSH
62702: LD_INT 0
62704: ST_TO_ADDR
// sFlag := false ;
62705: LD_ADDR_EXP 67
62709: PUSH
62710: LD_INT 0
62712: ST_TO_ADDR
// sKamikadze := false ;
62713: LD_ADDR_EXP 75
62717: PUSH
62718: LD_INT 0
62720: ST_TO_ADDR
// sTroll := false ;
62721: LD_ADDR_EXP 76
62725: PUSH
62726: LD_INT 0
62728: ST_TO_ADDR
// sSlow := false ;
62729: LD_ADDR_EXP 77
62733: PUSH
62734: LD_INT 0
62736: ST_TO_ADDR
// sLack := false ;
62737: LD_ADDR_EXP 78
62741: PUSH
62742: LD_INT 0
62744: ST_TO_ADDR
// sTank := false ;
62745: LD_ADDR_EXP 80
62749: PUSH
62750: LD_INT 0
62752: ST_TO_ADDR
// sRemote := false ;
62753: LD_ADDR_EXP 81
62757: PUSH
62758: LD_INT 0
62760: ST_TO_ADDR
// sPowell := false ;
62761: LD_ADDR_EXP 82
62765: PUSH
62766: LD_INT 0
62768: ST_TO_ADDR
// sTeleport := false ;
62769: LD_ADDR_EXP 85
62773: PUSH
62774: LD_INT 0
62776: ST_TO_ADDR
// sOilTower := false ;
62777: LD_ADDR_EXP 87
62781: PUSH
62782: LD_INT 0
62784: ST_TO_ADDR
// sShovel := false ;
62785: LD_ADDR_EXP 88
62789: PUSH
62790: LD_INT 0
62792: ST_TO_ADDR
// sSheik := false ;
62793: LD_ADDR_EXP 89
62797: PUSH
62798: LD_INT 0
62800: ST_TO_ADDR
// sEarthquake := false ;
62801: LD_ADDR_EXP 91
62805: PUSH
62806: LD_INT 0
62808: ST_TO_ADDR
// sAI := false ;
62809: LD_ADDR_EXP 92
62813: PUSH
62814: LD_INT 0
62816: ST_TO_ADDR
// sCargo := false ;
62817: LD_ADDR_EXP 95
62821: PUSH
62822: LD_INT 0
62824: ST_TO_ADDR
// sDLaser := false ;
62825: LD_ADDR_EXP 96
62829: PUSH
62830: LD_INT 0
62832: ST_TO_ADDR
// sExchange := false ;
62833: LD_ADDR_EXP 97
62837: PUSH
62838: LD_INT 0
62840: ST_TO_ADDR
// sFac := false ;
62841: LD_ADDR_EXP 98
62845: PUSH
62846: LD_INT 0
62848: ST_TO_ADDR
// sPower := false ;
62849: LD_ADDR_EXP 99
62853: PUSH
62854: LD_INT 0
62856: ST_TO_ADDR
// sRandom := false ;
62857: LD_ADDR_EXP 100
62861: PUSH
62862: LD_INT 0
62864: ST_TO_ADDR
// sShield := false ;
62865: LD_ADDR_EXP 101
62869: PUSH
62870: LD_INT 0
62872: ST_TO_ADDR
// sTime := false ;
62873: LD_ADDR_EXP 102
62877: PUSH
62878: LD_INT 0
62880: ST_TO_ADDR
// sTools := false ;
62881: LD_ADDR_EXP 103
62885: PUSH
62886: LD_INT 0
62888: ST_TO_ADDR
// sSold := false ;
62889: LD_ADDR_EXP 68
62893: PUSH
62894: LD_INT 0
62896: ST_TO_ADDR
// sDiff := false ;
62897: LD_ADDR_EXP 69
62901: PUSH
62902: LD_INT 0
62904: ST_TO_ADDR
// sFog := false ;
62905: LD_ADDR_EXP 72
62909: PUSH
62910: LD_INT 0
62912: ST_TO_ADDR
// sReset := false ;
62913: LD_ADDR_EXP 73
62917: PUSH
62918: LD_INT 0
62920: ST_TO_ADDR
// sSun := false ;
62921: LD_ADDR_EXP 74
62925: PUSH
62926: LD_INT 0
62928: ST_TO_ADDR
// sTiger := false ;
62929: LD_ADDR_EXP 70
62933: PUSH
62934: LD_INT 0
62936: ST_TO_ADDR
// sBomb := false ;
62937: LD_ADDR_EXP 71
62941: PUSH
62942: LD_INT 0
62944: ST_TO_ADDR
// sWound := false ;
62945: LD_ADDR_EXP 79
62949: PUSH
62950: LD_INT 0
62952: ST_TO_ADDR
// sBetray := false ;
62953: LD_ADDR_EXP 83
62957: PUSH
62958: LD_INT 0
62960: ST_TO_ADDR
// sContamin := false ;
62961: LD_ADDR_EXP 84
62965: PUSH
62966: LD_INT 0
62968: ST_TO_ADDR
// sOil := false ;
62969: LD_ADDR_EXP 86
62973: PUSH
62974: LD_INT 0
62976: ST_TO_ADDR
// sStu := false ;
62977: LD_ADDR_EXP 90
62981: PUSH
62982: LD_INT 0
62984: ST_TO_ADDR
// sBazooka := false ;
62985: LD_ADDR_EXP 93
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
// sMortar := false ;
62993: LD_ADDR_EXP 94
62997: PUSH
62998: LD_INT 0
63000: ST_TO_ADDR
// sRanger := false ;
63001: LD_ADDR_EXP 104
63005: PUSH
63006: LD_INT 0
63008: ST_TO_ADDR
// sComputer := false ;
63009: LD_ADDR_EXP 105
63013: PUSH
63014: LD_INT 0
63016: ST_TO_ADDR
// s30 := false ;
63017: LD_ADDR_EXP 106
63021: PUSH
63022: LD_INT 0
63024: ST_TO_ADDR
// s60 := false ;
63025: LD_ADDR_EXP 107
63029: PUSH
63030: LD_INT 0
63032: ST_TO_ADDR
// end ;
63033: LD_VAR 0 1
63037: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
63038: LD_INT 0
63040: PPUSH
63041: PPUSH
63042: PPUSH
63043: PPUSH
63044: PPUSH
63045: PPUSH
63046: PPUSH
// result := [ ] ;
63047: LD_ADDR_VAR 0 2
63051: PUSH
63052: EMPTY
63053: ST_TO_ADDR
// if campaign_id = 1 then
63054: LD_OWVAR 69
63058: PUSH
63059: LD_INT 1
63061: EQUAL
63062: IFFALSE 66228
// begin case mission_number of 1 :
63064: LD_OWVAR 70
63068: PUSH
63069: LD_INT 1
63071: DOUBLE
63072: EQUAL
63073: IFTRUE 63077
63075: GO 63153
63077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
63078: LD_ADDR_VAR 0 2
63082: PUSH
63083: LD_INT 2
63085: PUSH
63086: LD_INT 4
63088: PUSH
63089: LD_INT 11
63091: PUSH
63092: LD_INT 12
63094: PUSH
63095: LD_INT 15
63097: PUSH
63098: LD_INT 16
63100: PUSH
63101: LD_INT 22
63103: PUSH
63104: LD_INT 23
63106: PUSH
63107: LD_INT 26
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 101
63123: PUSH
63124: LD_INT 102
63126: PUSH
63127: LD_INT 106
63129: PUSH
63130: LD_INT 116
63132: PUSH
63133: LD_INT 117
63135: PUSH
63136: LD_INT 118
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: ST_TO_ADDR
63151: GO 66226
63153: LD_INT 2
63155: DOUBLE
63156: EQUAL
63157: IFTRUE 63161
63159: GO 63245
63161: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
63162: LD_ADDR_VAR 0 2
63166: PUSH
63167: LD_INT 2
63169: PUSH
63170: LD_INT 4
63172: PUSH
63173: LD_INT 11
63175: PUSH
63176: LD_INT 12
63178: PUSH
63179: LD_INT 15
63181: PUSH
63182: LD_INT 16
63184: PUSH
63185: LD_INT 22
63187: PUSH
63188: LD_INT 23
63190: PUSH
63191: LD_INT 26
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: LIST
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 101
63207: PUSH
63208: LD_INT 102
63210: PUSH
63211: LD_INT 105
63213: PUSH
63214: LD_INT 106
63216: PUSH
63217: LD_INT 108
63219: PUSH
63220: LD_INT 116
63222: PUSH
63223: LD_INT 117
63225: PUSH
63226: LD_INT 118
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: ST_TO_ADDR
63243: GO 66226
63245: LD_INT 3
63247: DOUBLE
63248: EQUAL
63249: IFTRUE 63253
63251: GO 63341
63253: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63254: LD_ADDR_VAR 0 2
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: LD_INT 4
63264: PUSH
63265: LD_INT 5
63267: PUSH
63268: LD_INT 11
63270: PUSH
63271: LD_INT 12
63273: PUSH
63274: LD_INT 15
63276: PUSH
63277: LD_INT 16
63279: PUSH
63280: LD_INT 22
63282: PUSH
63283: LD_INT 26
63285: PUSH
63286: LD_INT 36
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: PUSH
63301: LD_INT 101
63303: PUSH
63304: LD_INT 102
63306: PUSH
63307: LD_INT 105
63309: PUSH
63310: LD_INT 106
63312: PUSH
63313: LD_INT 108
63315: PUSH
63316: LD_INT 116
63318: PUSH
63319: LD_INT 117
63321: PUSH
63322: LD_INT 118
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: ST_TO_ADDR
63339: GO 66226
63341: LD_INT 4
63343: DOUBLE
63344: EQUAL
63345: IFTRUE 63349
63347: GO 63445
63349: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63350: LD_ADDR_VAR 0 2
63354: PUSH
63355: LD_INT 2
63357: PUSH
63358: LD_INT 4
63360: PUSH
63361: LD_INT 5
63363: PUSH
63364: LD_INT 8
63366: PUSH
63367: LD_INT 11
63369: PUSH
63370: LD_INT 12
63372: PUSH
63373: LD_INT 15
63375: PUSH
63376: LD_INT 16
63378: PUSH
63379: LD_INT 22
63381: PUSH
63382: LD_INT 23
63384: PUSH
63385: LD_INT 26
63387: PUSH
63388: LD_INT 36
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 101
63407: PUSH
63408: LD_INT 102
63410: PUSH
63411: LD_INT 105
63413: PUSH
63414: LD_INT 106
63416: PUSH
63417: LD_INT 108
63419: PUSH
63420: LD_INT 116
63422: PUSH
63423: LD_INT 117
63425: PUSH
63426: LD_INT 118
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: ST_TO_ADDR
63443: GO 66226
63445: LD_INT 5
63447: DOUBLE
63448: EQUAL
63449: IFTRUE 63453
63451: GO 63565
63453: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63454: LD_ADDR_VAR 0 2
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 4
63464: PUSH
63465: LD_INT 5
63467: PUSH
63468: LD_INT 6
63470: PUSH
63471: LD_INT 8
63473: PUSH
63474: LD_INT 11
63476: PUSH
63477: LD_INT 12
63479: PUSH
63480: LD_INT 15
63482: PUSH
63483: LD_INT 16
63485: PUSH
63486: LD_INT 22
63488: PUSH
63489: LD_INT 23
63491: PUSH
63492: LD_INT 25
63494: PUSH
63495: LD_INT 26
63497: PUSH
63498: LD_INT 36
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 101
63519: PUSH
63520: LD_INT 102
63522: PUSH
63523: LD_INT 105
63525: PUSH
63526: LD_INT 106
63528: PUSH
63529: LD_INT 108
63531: PUSH
63532: LD_INT 109
63534: PUSH
63535: LD_INT 112
63537: PUSH
63538: LD_INT 116
63540: PUSH
63541: LD_INT 117
63543: PUSH
63544: LD_INT 118
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: ST_TO_ADDR
63563: GO 66226
63565: LD_INT 6
63567: DOUBLE
63568: EQUAL
63569: IFTRUE 63573
63571: GO 63705
63573: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63574: LD_ADDR_VAR 0 2
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 4
63584: PUSH
63585: LD_INT 5
63587: PUSH
63588: LD_INT 6
63590: PUSH
63591: LD_INT 8
63593: PUSH
63594: LD_INT 11
63596: PUSH
63597: LD_INT 12
63599: PUSH
63600: LD_INT 15
63602: PUSH
63603: LD_INT 16
63605: PUSH
63606: LD_INT 20
63608: PUSH
63609: LD_INT 21
63611: PUSH
63612: LD_INT 22
63614: PUSH
63615: LD_INT 23
63617: PUSH
63618: LD_INT 25
63620: PUSH
63621: LD_INT 26
63623: PUSH
63624: LD_INT 30
63626: PUSH
63627: LD_INT 31
63629: PUSH
63630: LD_INT 32
63632: PUSH
63633: LD_INT 36
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: LIST
63648: LIST
63649: LIST
63650: LIST
63651: LIST
63652: LIST
63653: LIST
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 101
63659: PUSH
63660: LD_INT 102
63662: PUSH
63663: LD_INT 105
63665: PUSH
63666: LD_INT 106
63668: PUSH
63669: LD_INT 108
63671: PUSH
63672: LD_INT 109
63674: PUSH
63675: LD_INT 112
63677: PUSH
63678: LD_INT 116
63680: PUSH
63681: LD_INT 117
63683: PUSH
63684: LD_INT 118
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: ST_TO_ADDR
63703: GO 66226
63705: LD_INT 7
63707: DOUBLE
63708: EQUAL
63709: IFTRUE 63713
63711: GO 63825
63713: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63714: LD_ADDR_VAR 0 2
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: LD_INT 4
63724: PUSH
63725: LD_INT 5
63727: PUSH
63728: LD_INT 7
63730: PUSH
63731: LD_INT 11
63733: PUSH
63734: LD_INT 12
63736: PUSH
63737: LD_INT 15
63739: PUSH
63740: LD_INT 16
63742: PUSH
63743: LD_INT 20
63745: PUSH
63746: LD_INT 21
63748: PUSH
63749: LD_INT 22
63751: PUSH
63752: LD_INT 23
63754: PUSH
63755: LD_INT 25
63757: PUSH
63758: LD_INT 26
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 101
63779: PUSH
63780: LD_INT 102
63782: PUSH
63783: LD_INT 103
63785: PUSH
63786: LD_INT 105
63788: PUSH
63789: LD_INT 106
63791: PUSH
63792: LD_INT 108
63794: PUSH
63795: LD_INT 112
63797: PUSH
63798: LD_INT 116
63800: PUSH
63801: LD_INT 117
63803: PUSH
63804: LD_INT 118
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: ST_TO_ADDR
63823: GO 66226
63825: LD_INT 8
63827: DOUBLE
63828: EQUAL
63829: IFTRUE 63833
63831: GO 63973
63833: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63834: LD_ADDR_VAR 0 2
63838: PUSH
63839: LD_INT 2
63841: PUSH
63842: LD_INT 4
63844: PUSH
63845: LD_INT 5
63847: PUSH
63848: LD_INT 6
63850: PUSH
63851: LD_INT 7
63853: PUSH
63854: LD_INT 8
63856: PUSH
63857: LD_INT 11
63859: PUSH
63860: LD_INT 12
63862: PUSH
63863: LD_INT 15
63865: PUSH
63866: LD_INT 16
63868: PUSH
63869: LD_INT 20
63871: PUSH
63872: LD_INT 21
63874: PUSH
63875: LD_INT 22
63877: PUSH
63878: LD_INT 23
63880: PUSH
63881: LD_INT 25
63883: PUSH
63884: LD_INT 26
63886: PUSH
63887: LD_INT 30
63889: PUSH
63890: LD_INT 31
63892: PUSH
63893: LD_INT 32
63895: PUSH
63896: LD_INT 36
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 101
63923: PUSH
63924: LD_INT 102
63926: PUSH
63927: LD_INT 103
63929: PUSH
63930: LD_INT 105
63932: PUSH
63933: LD_INT 106
63935: PUSH
63936: LD_INT 108
63938: PUSH
63939: LD_INT 109
63941: PUSH
63942: LD_INT 112
63944: PUSH
63945: LD_INT 116
63947: PUSH
63948: LD_INT 117
63950: PUSH
63951: LD_INT 118
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: ST_TO_ADDR
63971: GO 66226
63973: LD_INT 9
63975: DOUBLE
63976: EQUAL
63977: IFTRUE 63981
63979: GO 64129
63981: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63982: LD_ADDR_VAR 0 2
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 4
63992: PUSH
63993: LD_INT 5
63995: PUSH
63996: LD_INT 6
63998: PUSH
63999: LD_INT 7
64001: PUSH
64002: LD_INT 8
64004: PUSH
64005: LD_INT 11
64007: PUSH
64008: LD_INT 12
64010: PUSH
64011: LD_INT 15
64013: PUSH
64014: LD_INT 16
64016: PUSH
64017: LD_INT 20
64019: PUSH
64020: LD_INT 21
64022: PUSH
64023: LD_INT 22
64025: PUSH
64026: LD_INT 23
64028: PUSH
64029: LD_INT 25
64031: PUSH
64032: LD_INT 26
64034: PUSH
64035: LD_INT 28
64037: PUSH
64038: LD_INT 30
64040: PUSH
64041: LD_INT 31
64043: PUSH
64044: LD_INT 32
64046: PUSH
64047: LD_INT 36
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: PUSH
64073: LD_INT 101
64075: PUSH
64076: LD_INT 102
64078: PUSH
64079: LD_INT 103
64081: PUSH
64082: LD_INT 105
64084: PUSH
64085: LD_INT 106
64087: PUSH
64088: LD_INT 108
64090: PUSH
64091: LD_INT 109
64093: PUSH
64094: LD_INT 112
64096: PUSH
64097: LD_INT 114
64099: PUSH
64100: LD_INT 116
64102: PUSH
64103: LD_INT 117
64105: PUSH
64106: LD_INT 118
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: ST_TO_ADDR
64127: GO 66226
64129: LD_INT 10
64131: DOUBLE
64132: EQUAL
64133: IFTRUE 64137
64135: GO 64333
64137: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
64138: LD_ADDR_VAR 0 2
64142: PUSH
64143: LD_INT 2
64145: PUSH
64146: LD_INT 4
64148: PUSH
64149: LD_INT 5
64151: PUSH
64152: LD_INT 6
64154: PUSH
64155: LD_INT 7
64157: PUSH
64158: LD_INT 8
64160: PUSH
64161: LD_INT 9
64163: PUSH
64164: LD_INT 10
64166: PUSH
64167: LD_INT 11
64169: PUSH
64170: LD_INT 12
64172: PUSH
64173: LD_INT 13
64175: PUSH
64176: LD_INT 14
64178: PUSH
64179: LD_INT 15
64181: PUSH
64182: LD_INT 16
64184: PUSH
64185: LD_INT 17
64187: PUSH
64188: LD_INT 18
64190: PUSH
64191: LD_INT 19
64193: PUSH
64194: LD_INT 20
64196: PUSH
64197: LD_INT 21
64199: PUSH
64200: LD_INT 22
64202: PUSH
64203: LD_INT 23
64205: PUSH
64206: LD_INT 24
64208: PUSH
64209: LD_INT 25
64211: PUSH
64212: LD_INT 26
64214: PUSH
64215: LD_INT 28
64217: PUSH
64218: LD_INT 30
64220: PUSH
64221: LD_INT 31
64223: PUSH
64224: LD_INT 32
64226: PUSH
64227: LD_INT 36
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 101
64263: PUSH
64264: LD_INT 102
64266: PUSH
64267: LD_INT 103
64269: PUSH
64270: LD_INT 104
64272: PUSH
64273: LD_INT 105
64275: PUSH
64276: LD_INT 106
64278: PUSH
64279: LD_INT 107
64281: PUSH
64282: LD_INT 108
64284: PUSH
64285: LD_INT 109
64287: PUSH
64288: LD_INT 110
64290: PUSH
64291: LD_INT 111
64293: PUSH
64294: LD_INT 112
64296: PUSH
64297: LD_INT 114
64299: PUSH
64300: LD_INT 116
64302: PUSH
64303: LD_INT 117
64305: PUSH
64306: LD_INT 118
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: ST_TO_ADDR
64331: GO 66226
64333: LD_INT 11
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64341
64339: GO 64545
64341: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_INT 2
64349: PUSH
64350: LD_INT 3
64352: PUSH
64353: LD_INT 4
64355: PUSH
64356: LD_INT 5
64358: PUSH
64359: LD_INT 6
64361: PUSH
64362: LD_INT 7
64364: PUSH
64365: LD_INT 8
64367: PUSH
64368: LD_INT 9
64370: PUSH
64371: LD_INT 10
64373: PUSH
64374: LD_INT 11
64376: PUSH
64377: LD_INT 12
64379: PUSH
64380: LD_INT 13
64382: PUSH
64383: LD_INT 14
64385: PUSH
64386: LD_INT 15
64388: PUSH
64389: LD_INT 16
64391: PUSH
64392: LD_INT 17
64394: PUSH
64395: LD_INT 18
64397: PUSH
64398: LD_INT 19
64400: PUSH
64401: LD_INT 20
64403: PUSH
64404: LD_INT 21
64406: PUSH
64407: LD_INT 22
64409: PUSH
64410: LD_INT 23
64412: PUSH
64413: LD_INT 24
64415: PUSH
64416: LD_INT 25
64418: PUSH
64419: LD_INT 26
64421: PUSH
64422: LD_INT 28
64424: PUSH
64425: LD_INT 30
64427: PUSH
64428: LD_INT 31
64430: PUSH
64431: LD_INT 32
64433: PUSH
64434: LD_INT 34
64436: PUSH
64437: LD_INT 36
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 101
64475: PUSH
64476: LD_INT 102
64478: PUSH
64479: LD_INT 103
64481: PUSH
64482: LD_INT 104
64484: PUSH
64485: LD_INT 105
64487: PUSH
64488: LD_INT 106
64490: PUSH
64491: LD_INT 107
64493: PUSH
64494: LD_INT 108
64496: PUSH
64497: LD_INT 109
64499: PUSH
64500: LD_INT 110
64502: PUSH
64503: LD_INT 111
64505: PUSH
64506: LD_INT 112
64508: PUSH
64509: LD_INT 114
64511: PUSH
64512: LD_INT 116
64514: PUSH
64515: LD_INT 117
64517: PUSH
64518: LD_INT 118
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: LIST
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: ST_TO_ADDR
64543: GO 66226
64545: LD_INT 12
64547: DOUBLE
64548: EQUAL
64549: IFTRUE 64553
64551: GO 64773
64553: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64554: LD_ADDR_VAR 0 2
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: LD_INT 2
64564: PUSH
64565: LD_INT 3
64567: PUSH
64568: LD_INT 4
64570: PUSH
64571: LD_INT 5
64573: PUSH
64574: LD_INT 6
64576: PUSH
64577: LD_INT 7
64579: PUSH
64580: LD_INT 8
64582: PUSH
64583: LD_INT 9
64585: PUSH
64586: LD_INT 10
64588: PUSH
64589: LD_INT 11
64591: PUSH
64592: LD_INT 12
64594: PUSH
64595: LD_INT 13
64597: PUSH
64598: LD_INT 14
64600: PUSH
64601: LD_INT 15
64603: PUSH
64604: LD_INT 16
64606: PUSH
64607: LD_INT 17
64609: PUSH
64610: LD_INT 18
64612: PUSH
64613: LD_INT 19
64615: PUSH
64616: LD_INT 20
64618: PUSH
64619: LD_INT 21
64621: PUSH
64622: LD_INT 22
64624: PUSH
64625: LD_INT 23
64627: PUSH
64628: LD_INT 24
64630: PUSH
64631: LD_INT 25
64633: PUSH
64634: LD_INT 26
64636: PUSH
64637: LD_INT 27
64639: PUSH
64640: LD_INT 28
64642: PUSH
64643: LD_INT 30
64645: PUSH
64646: LD_INT 31
64648: PUSH
64649: LD_INT 32
64651: PUSH
64652: LD_INT 33
64654: PUSH
64655: LD_INT 34
64657: PUSH
64658: LD_INT 36
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: PUSH
64697: LD_INT 101
64699: PUSH
64700: LD_INT 102
64702: PUSH
64703: LD_INT 103
64705: PUSH
64706: LD_INT 104
64708: PUSH
64709: LD_INT 105
64711: PUSH
64712: LD_INT 106
64714: PUSH
64715: LD_INT 107
64717: PUSH
64718: LD_INT 108
64720: PUSH
64721: LD_INT 109
64723: PUSH
64724: LD_INT 110
64726: PUSH
64727: LD_INT 111
64729: PUSH
64730: LD_INT 112
64732: PUSH
64733: LD_INT 113
64735: PUSH
64736: LD_INT 114
64738: PUSH
64739: LD_INT 116
64741: PUSH
64742: LD_INT 117
64744: PUSH
64745: LD_INT 118
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: PUSH
64767: EMPTY
64768: LIST
64769: LIST
64770: ST_TO_ADDR
64771: GO 66226
64773: LD_INT 13
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64781
64779: GO 64989
64781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64782: LD_ADDR_VAR 0 2
64786: PUSH
64787: LD_INT 1
64789: PUSH
64790: LD_INT 2
64792: PUSH
64793: LD_INT 3
64795: PUSH
64796: LD_INT 4
64798: PUSH
64799: LD_INT 5
64801: PUSH
64802: LD_INT 8
64804: PUSH
64805: LD_INT 9
64807: PUSH
64808: LD_INT 10
64810: PUSH
64811: LD_INT 11
64813: PUSH
64814: LD_INT 12
64816: PUSH
64817: LD_INT 14
64819: PUSH
64820: LD_INT 15
64822: PUSH
64823: LD_INT 16
64825: PUSH
64826: LD_INT 17
64828: PUSH
64829: LD_INT 18
64831: PUSH
64832: LD_INT 19
64834: PUSH
64835: LD_INT 20
64837: PUSH
64838: LD_INT 21
64840: PUSH
64841: LD_INT 22
64843: PUSH
64844: LD_INT 23
64846: PUSH
64847: LD_INT 24
64849: PUSH
64850: LD_INT 25
64852: PUSH
64853: LD_INT 26
64855: PUSH
64856: LD_INT 27
64858: PUSH
64859: LD_INT 28
64861: PUSH
64862: LD_INT 30
64864: PUSH
64865: LD_INT 31
64867: PUSH
64868: LD_INT 32
64870: PUSH
64871: LD_INT 33
64873: PUSH
64874: LD_INT 34
64876: PUSH
64877: LD_INT 36
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 101
64915: PUSH
64916: LD_INT 102
64918: PUSH
64919: LD_INT 103
64921: PUSH
64922: LD_INT 104
64924: PUSH
64925: LD_INT 105
64927: PUSH
64928: LD_INT 106
64930: PUSH
64931: LD_INT 107
64933: PUSH
64934: LD_INT 108
64936: PUSH
64937: LD_INT 109
64939: PUSH
64940: LD_INT 110
64942: PUSH
64943: LD_INT 111
64945: PUSH
64946: LD_INT 112
64948: PUSH
64949: LD_INT 113
64951: PUSH
64952: LD_INT 114
64954: PUSH
64955: LD_INT 116
64957: PUSH
64958: LD_INT 117
64960: PUSH
64961: LD_INT 118
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: ST_TO_ADDR
64987: GO 66226
64989: LD_INT 14
64991: DOUBLE
64992: EQUAL
64993: IFTRUE 64997
64995: GO 65221
64997: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64998: LD_ADDR_VAR 0 2
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 3
65011: PUSH
65012: LD_INT 4
65014: PUSH
65015: LD_INT 5
65017: PUSH
65018: LD_INT 6
65020: PUSH
65021: LD_INT 7
65023: PUSH
65024: LD_INT 8
65026: PUSH
65027: LD_INT 9
65029: PUSH
65030: LD_INT 10
65032: PUSH
65033: LD_INT 11
65035: PUSH
65036: LD_INT 12
65038: PUSH
65039: LD_INT 13
65041: PUSH
65042: LD_INT 14
65044: PUSH
65045: LD_INT 15
65047: PUSH
65048: LD_INT 16
65050: PUSH
65051: LD_INT 17
65053: PUSH
65054: LD_INT 18
65056: PUSH
65057: LD_INT 19
65059: PUSH
65060: LD_INT 20
65062: PUSH
65063: LD_INT 21
65065: PUSH
65066: LD_INT 22
65068: PUSH
65069: LD_INT 23
65071: PUSH
65072: LD_INT 24
65074: PUSH
65075: LD_INT 25
65077: PUSH
65078: LD_INT 26
65080: PUSH
65081: LD_INT 27
65083: PUSH
65084: LD_INT 28
65086: PUSH
65087: LD_INT 29
65089: PUSH
65090: LD_INT 30
65092: PUSH
65093: LD_INT 31
65095: PUSH
65096: LD_INT 32
65098: PUSH
65099: LD_INT 33
65101: PUSH
65102: LD_INT 34
65104: PUSH
65105: LD_INT 36
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: PUSH
65145: LD_INT 101
65147: PUSH
65148: LD_INT 102
65150: PUSH
65151: LD_INT 103
65153: PUSH
65154: LD_INT 104
65156: PUSH
65157: LD_INT 105
65159: PUSH
65160: LD_INT 106
65162: PUSH
65163: LD_INT 107
65165: PUSH
65166: LD_INT 108
65168: PUSH
65169: LD_INT 109
65171: PUSH
65172: LD_INT 110
65174: PUSH
65175: LD_INT 111
65177: PUSH
65178: LD_INT 112
65180: PUSH
65181: LD_INT 113
65183: PUSH
65184: LD_INT 114
65186: PUSH
65187: LD_INT 116
65189: PUSH
65190: LD_INT 117
65192: PUSH
65193: LD_INT 118
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: ST_TO_ADDR
65219: GO 66226
65221: LD_INT 15
65223: DOUBLE
65224: EQUAL
65225: IFTRUE 65229
65227: GO 65453
65229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65230: LD_ADDR_VAR 0 2
65234: PUSH
65235: LD_INT 1
65237: PUSH
65238: LD_INT 2
65240: PUSH
65241: LD_INT 3
65243: PUSH
65244: LD_INT 4
65246: PUSH
65247: LD_INT 5
65249: PUSH
65250: LD_INT 6
65252: PUSH
65253: LD_INT 7
65255: PUSH
65256: LD_INT 8
65258: PUSH
65259: LD_INT 9
65261: PUSH
65262: LD_INT 10
65264: PUSH
65265: LD_INT 11
65267: PUSH
65268: LD_INT 12
65270: PUSH
65271: LD_INT 13
65273: PUSH
65274: LD_INT 14
65276: PUSH
65277: LD_INT 15
65279: PUSH
65280: LD_INT 16
65282: PUSH
65283: LD_INT 17
65285: PUSH
65286: LD_INT 18
65288: PUSH
65289: LD_INT 19
65291: PUSH
65292: LD_INT 20
65294: PUSH
65295: LD_INT 21
65297: PUSH
65298: LD_INT 22
65300: PUSH
65301: LD_INT 23
65303: PUSH
65304: LD_INT 24
65306: PUSH
65307: LD_INT 25
65309: PUSH
65310: LD_INT 26
65312: PUSH
65313: LD_INT 27
65315: PUSH
65316: LD_INT 28
65318: PUSH
65319: LD_INT 29
65321: PUSH
65322: LD_INT 30
65324: PUSH
65325: LD_INT 31
65327: PUSH
65328: LD_INT 32
65330: PUSH
65331: LD_INT 33
65333: PUSH
65334: LD_INT 34
65336: PUSH
65337: LD_INT 36
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: LIST
65349: LIST
65350: LIST
65351: LIST
65352: LIST
65353: LIST
65354: LIST
65355: LIST
65356: LIST
65357: LIST
65358: LIST
65359: LIST
65360: LIST
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 101
65379: PUSH
65380: LD_INT 102
65382: PUSH
65383: LD_INT 103
65385: PUSH
65386: LD_INT 104
65388: PUSH
65389: LD_INT 105
65391: PUSH
65392: LD_INT 106
65394: PUSH
65395: LD_INT 107
65397: PUSH
65398: LD_INT 108
65400: PUSH
65401: LD_INT 109
65403: PUSH
65404: LD_INT 110
65406: PUSH
65407: LD_INT 111
65409: PUSH
65410: LD_INT 112
65412: PUSH
65413: LD_INT 113
65415: PUSH
65416: LD_INT 114
65418: PUSH
65419: LD_INT 116
65421: PUSH
65422: LD_INT 117
65424: PUSH
65425: LD_INT 118
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: LIST
65437: LIST
65438: LIST
65439: LIST
65440: LIST
65441: LIST
65442: LIST
65443: LIST
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: ST_TO_ADDR
65451: GO 66226
65453: LD_INT 16
65455: DOUBLE
65456: EQUAL
65457: IFTRUE 65461
65459: GO 65597
65461: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65462: LD_ADDR_VAR 0 2
65466: PUSH
65467: LD_INT 2
65469: PUSH
65470: LD_INT 4
65472: PUSH
65473: LD_INT 5
65475: PUSH
65476: LD_INT 7
65478: PUSH
65479: LD_INT 11
65481: PUSH
65482: LD_INT 12
65484: PUSH
65485: LD_INT 15
65487: PUSH
65488: LD_INT 16
65490: PUSH
65491: LD_INT 20
65493: PUSH
65494: LD_INT 21
65496: PUSH
65497: LD_INT 22
65499: PUSH
65500: LD_INT 23
65502: PUSH
65503: LD_INT 25
65505: PUSH
65506: LD_INT 26
65508: PUSH
65509: LD_INT 30
65511: PUSH
65512: LD_INT 31
65514: PUSH
65515: LD_INT 32
65517: PUSH
65518: LD_INT 33
65520: PUSH
65521: LD_INT 34
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: PUSH
65545: LD_INT 101
65547: PUSH
65548: LD_INT 102
65550: PUSH
65551: LD_INT 103
65553: PUSH
65554: LD_INT 106
65556: PUSH
65557: LD_INT 108
65559: PUSH
65560: LD_INT 112
65562: PUSH
65563: LD_INT 113
65565: PUSH
65566: LD_INT 114
65568: PUSH
65569: LD_INT 116
65571: PUSH
65572: LD_INT 117
65574: PUSH
65575: LD_INT 118
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: ST_TO_ADDR
65595: GO 66226
65597: LD_INT 17
65599: DOUBLE
65600: EQUAL
65601: IFTRUE 65605
65603: GO 65829
65605: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65606: LD_ADDR_VAR 0 2
65610: PUSH
65611: LD_INT 1
65613: PUSH
65614: LD_INT 2
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: LD_INT 4
65622: PUSH
65623: LD_INT 5
65625: PUSH
65626: LD_INT 6
65628: PUSH
65629: LD_INT 7
65631: PUSH
65632: LD_INT 8
65634: PUSH
65635: LD_INT 9
65637: PUSH
65638: LD_INT 10
65640: PUSH
65641: LD_INT 11
65643: PUSH
65644: LD_INT 12
65646: PUSH
65647: LD_INT 13
65649: PUSH
65650: LD_INT 14
65652: PUSH
65653: LD_INT 15
65655: PUSH
65656: LD_INT 16
65658: PUSH
65659: LD_INT 17
65661: PUSH
65662: LD_INT 18
65664: PUSH
65665: LD_INT 19
65667: PUSH
65668: LD_INT 20
65670: PUSH
65671: LD_INT 21
65673: PUSH
65674: LD_INT 22
65676: PUSH
65677: LD_INT 23
65679: PUSH
65680: LD_INT 24
65682: PUSH
65683: LD_INT 25
65685: PUSH
65686: LD_INT 26
65688: PUSH
65689: LD_INT 27
65691: PUSH
65692: LD_INT 28
65694: PUSH
65695: LD_INT 29
65697: PUSH
65698: LD_INT 30
65700: PUSH
65701: LD_INT 31
65703: PUSH
65704: LD_INT 32
65706: PUSH
65707: LD_INT 33
65709: PUSH
65710: LD_INT 34
65712: PUSH
65713: LD_INT 36
65715: PUSH
65716: EMPTY
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 101
65755: PUSH
65756: LD_INT 102
65758: PUSH
65759: LD_INT 103
65761: PUSH
65762: LD_INT 104
65764: PUSH
65765: LD_INT 105
65767: PUSH
65768: LD_INT 106
65770: PUSH
65771: LD_INT 107
65773: PUSH
65774: LD_INT 108
65776: PUSH
65777: LD_INT 109
65779: PUSH
65780: LD_INT 110
65782: PUSH
65783: LD_INT 111
65785: PUSH
65786: LD_INT 112
65788: PUSH
65789: LD_INT 113
65791: PUSH
65792: LD_INT 114
65794: PUSH
65795: LD_INT 116
65797: PUSH
65798: LD_INT 117
65800: PUSH
65801: LD_INT 118
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: LIST
65808: LIST
65809: LIST
65810: LIST
65811: LIST
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: ST_TO_ADDR
65827: GO 66226
65829: LD_INT 18
65831: DOUBLE
65832: EQUAL
65833: IFTRUE 65837
65835: GO 65985
65837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65838: LD_ADDR_VAR 0 2
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: LD_INT 4
65848: PUSH
65849: LD_INT 5
65851: PUSH
65852: LD_INT 7
65854: PUSH
65855: LD_INT 11
65857: PUSH
65858: LD_INT 12
65860: PUSH
65861: LD_INT 15
65863: PUSH
65864: LD_INT 16
65866: PUSH
65867: LD_INT 20
65869: PUSH
65870: LD_INT 21
65872: PUSH
65873: LD_INT 22
65875: PUSH
65876: LD_INT 23
65878: PUSH
65879: LD_INT 25
65881: PUSH
65882: LD_INT 26
65884: PUSH
65885: LD_INT 30
65887: PUSH
65888: LD_INT 31
65890: PUSH
65891: LD_INT 32
65893: PUSH
65894: LD_INT 33
65896: PUSH
65897: LD_INT 34
65899: PUSH
65900: LD_INT 35
65902: PUSH
65903: LD_INT 36
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 101
65931: PUSH
65932: LD_INT 102
65934: PUSH
65935: LD_INT 103
65937: PUSH
65938: LD_INT 106
65940: PUSH
65941: LD_INT 108
65943: PUSH
65944: LD_INT 112
65946: PUSH
65947: LD_INT 113
65949: PUSH
65950: LD_INT 114
65952: PUSH
65953: LD_INT 115
65955: PUSH
65956: LD_INT 116
65958: PUSH
65959: LD_INT 117
65961: PUSH
65962: LD_INT 118
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: ST_TO_ADDR
65983: GO 66226
65985: LD_INT 19
65987: DOUBLE
65988: EQUAL
65989: IFTRUE 65993
65991: GO 66225
65993: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65994: LD_ADDR_VAR 0 2
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: LD_INT 4
66010: PUSH
66011: LD_INT 5
66013: PUSH
66014: LD_INT 6
66016: PUSH
66017: LD_INT 7
66019: PUSH
66020: LD_INT 8
66022: PUSH
66023: LD_INT 9
66025: PUSH
66026: LD_INT 10
66028: PUSH
66029: LD_INT 11
66031: PUSH
66032: LD_INT 12
66034: PUSH
66035: LD_INT 13
66037: PUSH
66038: LD_INT 14
66040: PUSH
66041: LD_INT 15
66043: PUSH
66044: LD_INT 16
66046: PUSH
66047: LD_INT 17
66049: PUSH
66050: LD_INT 18
66052: PUSH
66053: LD_INT 19
66055: PUSH
66056: LD_INT 20
66058: PUSH
66059: LD_INT 21
66061: PUSH
66062: LD_INT 22
66064: PUSH
66065: LD_INT 23
66067: PUSH
66068: LD_INT 24
66070: PUSH
66071: LD_INT 25
66073: PUSH
66074: LD_INT 26
66076: PUSH
66077: LD_INT 27
66079: PUSH
66080: LD_INT 28
66082: PUSH
66083: LD_INT 29
66085: PUSH
66086: LD_INT 30
66088: PUSH
66089: LD_INT 31
66091: PUSH
66092: LD_INT 32
66094: PUSH
66095: LD_INT 33
66097: PUSH
66098: LD_INT 34
66100: PUSH
66101: LD_INT 35
66103: PUSH
66104: LD_INT 36
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 101
66147: PUSH
66148: LD_INT 102
66150: PUSH
66151: LD_INT 103
66153: PUSH
66154: LD_INT 104
66156: PUSH
66157: LD_INT 105
66159: PUSH
66160: LD_INT 106
66162: PUSH
66163: LD_INT 107
66165: PUSH
66166: LD_INT 108
66168: PUSH
66169: LD_INT 109
66171: PUSH
66172: LD_INT 110
66174: PUSH
66175: LD_INT 111
66177: PUSH
66178: LD_INT 112
66180: PUSH
66181: LD_INT 113
66183: PUSH
66184: LD_INT 114
66186: PUSH
66187: LD_INT 115
66189: PUSH
66190: LD_INT 116
66192: PUSH
66193: LD_INT 117
66195: PUSH
66196: LD_INT 118
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: ST_TO_ADDR
66223: GO 66226
66225: POP
// end else
66226: GO 66457
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66228: LD_ADDR_VAR 0 2
66232: PUSH
66233: LD_INT 1
66235: PUSH
66236: LD_INT 2
66238: PUSH
66239: LD_INT 3
66241: PUSH
66242: LD_INT 4
66244: PUSH
66245: LD_INT 5
66247: PUSH
66248: LD_INT 6
66250: PUSH
66251: LD_INT 7
66253: PUSH
66254: LD_INT 8
66256: PUSH
66257: LD_INT 9
66259: PUSH
66260: LD_INT 10
66262: PUSH
66263: LD_INT 11
66265: PUSH
66266: LD_INT 12
66268: PUSH
66269: LD_INT 13
66271: PUSH
66272: LD_INT 14
66274: PUSH
66275: LD_INT 15
66277: PUSH
66278: LD_INT 16
66280: PUSH
66281: LD_INT 17
66283: PUSH
66284: LD_INT 18
66286: PUSH
66287: LD_INT 19
66289: PUSH
66290: LD_INT 20
66292: PUSH
66293: LD_INT 21
66295: PUSH
66296: LD_INT 22
66298: PUSH
66299: LD_INT 23
66301: PUSH
66302: LD_INT 24
66304: PUSH
66305: LD_INT 25
66307: PUSH
66308: LD_INT 26
66310: PUSH
66311: LD_INT 27
66313: PUSH
66314: LD_INT 28
66316: PUSH
66317: LD_INT 29
66319: PUSH
66320: LD_INT 30
66322: PUSH
66323: LD_INT 31
66325: PUSH
66326: LD_INT 32
66328: PUSH
66329: LD_INT 33
66331: PUSH
66332: LD_INT 34
66334: PUSH
66335: LD_INT 35
66337: PUSH
66338: LD_INT 36
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: LIST
66352: LIST
66353: LIST
66354: LIST
66355: LIST
66356: LIST
66357: LIST
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: PUSH
66379: LD_INT 101
66381: PUSH
66382: LD_INT 102
66384: PUSH
66385: LD_INT 103
66387: PUSH
66388: LD_INT 104
66390: PUSH
66391: LD_INT 105
66393: PUSH
66394: LD_INT 106
66396: PUSH
66397: LD_INT 107
66399: PUSH
66400: LD_INT 108
66402: PUSH
66403: LD_INT 109
66405: PUSH
66406: LD_INT 110
66408: PUSH
66409: LD_INT 111
66411: PUSH
66412: LD_INT 112
66414: PUSH
66415: LD_INT 113
66417: PUSH
66418: LD_INT 114
66420: PUSH
66421: LD_INT 115
66423: PUSH
66424: LD_INT 116
66426: PUSH
66427: LD_INT 117
66429: PUSH
66430: LD_INT 118
66432: PUSH
66433: EMPTY
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: LIST
66447: LIST
66448: LIST
66449: LIST
66450: LIST
66451: LIST
66452: PUSH
66453: EMPTY
66454: LIST
66455: LIST
66456: ST_TO_ADDR
// if result then
66457: LD_VAR 0 2
66461: IFFALSE 67247
// begin normal :=  ;
66463: LD_ADDR_VAR 0 5
66467: PUSH
66468: LD_STRING 
66470: ST_TO_ADDR
// hardcore :=  ;
66471: LD_ADDR_VAR 0 6
66475: PUSH
66476: LD_STRING 
66478: ST_TO_ADDR
// active :=  ;
66479: LD_ADDR_VAR 0 7
66483: PUSH
66484: LD_STRING 
66486: ST_TO_ADDR
// for i = 1 to normalCounter do
66487: LD_ADDR_VAR 0 8
66491: PUSH
66492: DOUBLE
66493: LD_INT 1
66495: DEC
66496: ST_TO_ADDR
66497: LD_EXP 52
66501: PUSH
66502: FOR_TO
66503: IFFALSE 66604
// begin tmp := 0 ;
66505: LD_ADDR_VAR 0 3
66509: PUSH
66510: LD_STRING 0
66512: ST_TO_ADDR
// if result [ 1 ] then
66513: LD_VAR 0 2
66517: PUSH
66518: LD_INT 1
66520: ARRAY
66521: IFFALSE 66586
// if result [ 1 ] [ 1 ] = i then
66523: LD_VAR 0 2
66527: PUSH
66528: LD_INT 1
66530: ARRAY
66531: PUSH
66532: LD_INT 1
66534: ARRAY
66535: PUSH
66536: LD_VAR 0 8
66540: EQUAL
66541: IFFALSE 66586
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66543: LD_ADDR_VAR 0 2
66547: PUSH
66548: LD_VAR 0 2
66552: PPUSH
66553: LD_INT 1
66555: PPUSH
66556: LD_VAR 0 2
66560: PUSH
66561: LD_INT 1
66563: ARRAY
66564: PPUSH
66565: LD_INT 1
66567: PPUSH
66568: CALL_OW 3
66572: PPUSH
66573: CALL_OW 1
66577: ST_TO_ADDR
// tmp := 1 ;
66578: LD_ADDR_VAR 0 3
66582: PUSH
66583: LD_STRING 1
66585: ST_TO_ADDR
// end ; normal := normal & tmp ;
66586: LD_ADDR_VAR 0 5
66590: PUSH
66591: LD_VAR 0 5
66595: PUSH
66596: LD_VAR 0 3
66600: STR
66601: ST_TO_ADDR
// end ;
66602: GO 66502
66604: POP
66605: POP
// for i = 1 to hardcoreCounter do
66606: LD_ADDR_VAR 0 8
66610: PUSH
66611: DOUBLE
66612: LD_INT 1
66614: DEC
66615: ST_TO_ADDR
66616: LD_EXP 53
66620: PUSH
66621: FOR_TO
66622: IFFALSE 66727
// begin tmp := 0 ;
66624: LD_ADDR_VAR 0 3
66628: PUSH
66629: LD_STRING 0
66631: ST_TO_ADDR
// if result [ 2 ] then
66632: LD_VAR 0 2
66636: PUSH
66637: LD_INT 2
66639: ARRAY
66640: IFFALSE 66709
// if result [ 2 ] [ 1 ] = 100 + i then
66642: LD_VAR 0 2
66646: PUSH
66647: LD_INT 2
66649: ARRAY
66650: PUSH
66651: LD_INT 1
66653: ARRAY
66654: PUSH
66655: LD_INT 100
66657: PUSH
66658: LD_VAR 0 8
66662: PLUS
66663: EQUAL
66664: IFFALSE 66709
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66666: LD_ADDR_VAR 0 2
66670: PUSH
66671: LD_VAR 0 2
66675: PPUSH
66676: LD_INT 2
66678: PPUSH
66679: LD_VAR 0 2
66683: PUSH
66684: LD_INT 2
66686: ARRAY
66687: PPUSH
66688: LD_INT 1
66690: PPUSH
66691: CALL_OW 3
66695: PPUSH
66696: CALL_OW 1
66700: ST_TO_ADDR
// tmp := 1 ;
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: LD_STRING 1
66708: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66709: LD_ADDR_VAR 0 6
66713: PUSH
66714: LD_VAR 0 6
66718: PUSH
66719: LD_VAR 0 3
66723: STR
66724: ST_TO_ADDR
// end ;
66725: GO 66621
66727: POP
66728: POP
// if isGameLoad then
66729: LD_VAR 0 1
66733: IFFALSE 67208
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66735: LD_ADDR_VAR 0 4
66739: PUSH
66740: LD_EXP 56
66744: PUSH
66745: LD_EXP 55
66749: PUSH
66750: LD_EXP 57
66754: PUSH
66755: LD_EXP 54
66759: PUSH
66760: LD_EXP 58
66764: PUSH
66765: LD_EXP 59
66769: PUSH
66770: LD_EXP 60
66774: PUSH
66775: LD_EXP 61
66779: PUSH
66780: LD_EXP 62
66784: PUSH
66785: LD_EXP 63
66789: PUSH
66790: LD_EXP 64
66794: PUSH
66795: LD_EXP 65
66799: PUSH
66800: LD_EXP 66
66804: PUSH
66805: LD_EXP 67
66809: PUSH
66810: LD_EXP 75
66814: PUSH
66815: LD_EXP 76
66819: PUSH
66820: LD_EXP 77
66824: PUSH
66825: LD_EXP 78
66829: PUSH
66830: LD_EXP 80
66834: PUSH
66835: LD_EXP 81
66839: PUSH
66840: LD_EXP 82
66844: PUSH
66845: LD_EXP 85
66849: PUSH
66850: LD_EXP 87
66854: PUSH
66855: LD_EXP 88
66859: PUSH
66860: LD_EXP 89
66864: PUSH
66865: LD_EXP 91
66869: PUSH
66870: LD_EXP 92
66874: PUSH
66875: LD_EXP 95
66879: PUSH
66880: LD_EXP 96
66884: PUSH
66885: LD_EXP 97
66889: PUSH
66890: LD_EXP 98
66894: PUSH
66895: LD_EXP 99
66899: PUSH
66900: LD_EXP 100
66904: PUSH
66905: LD_EXP 101
66909: PUSH
66910: LD_EXP 102
66914: PUSH
66915: LD_EXP 103
66919: PUSH
66920: LD_EXP 68
66924: PUSH
66925: LD_EXP 69
66929: PUSH
66930: LD_EXP 72
66934: PUSH
66935: LD_EXP 73
66939: PUSH
66940: LD_EXP 74
66944: PUSH
66945: LD_EXP 70
66949: PUSH
66950: LD_EXP 71
66954: PUSH
66955: LD_EXP 79
66959: PUSH
66960: LD_EXP 83
66964: PUSH
66965: LD_EXP 84
66969: PUSH
66970: LD_EXP 86
66974: PUSH
66975: LD_EXP 90
66979: PUSH
66980: LD_EXP 93
66984: PUSH
66985: LD_EXP 94
66989: PUSH
66990: LD_EXP 104
66994: PUSH
66995: LD_EXP 105
66999: PUSH
67000: LD_EXP 106
67004: PUSH
67005: LD_EXP 107
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: LIST
67042: LIST
67043: LIST
67044: LIST
67045: LIST
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: ST_TO_ADDR
// tmp :=  ;
67066: LD_ADDR_VAR 0 3
67070: PUSH
67071: LD_STRING 
67073: ST_TO_ADDR
// for i = 1 to normalCounter do
67074: LD_ADDR_VAR 0 8
67078: PUSH
67079: DOUBLE
67080: LD_INT 1
67082: DEC
67083: ST_TO_ADDR
67084: LD_EXP 52
67088: PUSH
67089: FOR_TO
67090: IFFALSE 67126
// begin if flags [ i ] then
67092: LD_VAR 0 4
67096: PUSH
67097: LD_VAR 0 8
67101: ARRAY
67102: IFFALSE 67124
// tmp := tmp & i & ; ;
67104: LD_ADDR_VAR 0 3
67108: PUSH
67109: LD_VAR 0 3
67113: PUSH
67114: LD_VAR 0 8
67118: STR
67119: PUSH
67120: LD_STRING ;
67122: STR
67123: ST_TO_ADDR
// end ;
67124: GO 67089
67126: POP
67127: POP
// for i = 1 to hardcoreCounter do
67128: LD_ADDR_VAR 0 8
67132: PUSH
67133: DOUBLE
67134: LD_INT 1
67136: DEC
67137: ST_TO_ADDR
67138: LD_EXP 53
67142: PUSH
67143: FOR_TO
67144: IFFALSE 67190
// begin if flags [ normalCounter + i ] then
67146: LD_VAR 0 4
67150: PUSH
67151: LD_EXP 52
67155: PUSH
67156: LD_VAR 0 8
67160: PLUS
67161: ARRAY
67162: IFFALSE 67188
// tmp := tmp & ( 100 + i ) & ; ;
67164: LD_ADDR_VAR 0 3
67168: PUSH
67169: LD_VAR 0 3
67173: PUSH
67174: LD_INT 100
67176: PUSH
67177: LD_VAR 0 8
67181: PLUS
67182: STR
67183: PUSH
67184: LD_STRING ;
67186: STR
67187: ST_TO_ADDR
// end ;
67188: GO 67143
67190: POP
67191: POP
// if tmp then
67192: LD_VAR 0 3
67196: IFFALSE 67208
// active := tmp ;
67198: LD_ADDR_VAR 0 7
67202: PUSH
67203: LD_VAR 0 3
67207: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
67208: LD_STRING getStreamItemsFromMission("
67210: PUSH
67211: LD_VAR 0 5
67215: STR
67216: PUSH
67217: LD_STRING ","
67219: STR
67220: PUSH
67221: LD_VAR 0 6
67225: STR
67226: PUSH
67227: LD_STRING ","
67229: STR
67230: PUSH
67231: LD_VAR 0 7
67235: STR
67236: PUSH
67237: LD_STRING ")
67239: STR
67240: PPUSH
67241: CALL_OW 559
// end else
67245: GO 67254
// ToLua ( getStreamItemsFromMission("","","") ) ;
67247: LD_STRING getStreamItemsFromMission("","","")
67249: PPUSH
67250: CALL_OW 559
// end ;
67254: LD_VAR 0 2
67258: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67259: LD_EXP 51
67263: IFFALSE 67271
67265: PUSH
67266: LD_EXP 56
67270: AND
67271: IFFALSE 67395
67273: GO 67275
67275: DISABLE
67276: LD_INT 0
67278: PPUSH
67279: PPUSH
// begin enable ;
67280: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67281: LD_ADDR_VAR 0 2
67285: PUSH
67286: LD_INT 22
67288: PUSH
67289: LD_OWVAR 2
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 2
67300: PUSH
67301: LD_INT 34
67303: PUSH
67304: LD_INT 7
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: LD_INT 34
67313: PUSH
67314: LD_INT 45
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 34
67323: PUSH
67324: LD_INT 28
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 34
67333: PUSH
67334: LD_INT 47
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PPUSH
67352: CALL_OW 69
67356: ST_TO_ADDR
// if not tmp then
67357: LD_VAR 0 2
67361: NOT
67362: IFFALSE 67366
// exit ;
67364: GO 67395
// for i in tmp do
67366: LD_ADDR_VAR 0 1
67370: PUSH
67371: LD_VAR 0 2
67375: PUSH
67376: FOR_IN
67377: IFFALSE 67393
// begin SetLives ( i , 0 ) ;
67379: LD_VAR 0 1
67383: PPUSH
67384: LD_INT 0
67386: PPUSH
67387: CALL_OW 234
// end ;
67391: GO 67376
67393: POP
67394: POP
// end ;
67395: PPOPN 2
67397: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67398: LD_EXP 51
67402: IFFALSE 67410
67404: PUSH
67405: LD_EXP 57
67409: AND
67410: IFFALSE 67494
67412: GO 67414
67414: DISABLE
67415: LD_INT 0
67417: PPUSH
67418: PPUSH
// begin enable ;
67419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67420: LD_ADDR_VAR 0 2
67424: PUSH
67425: LD_INT 22
67427: PUSH
67428: LD_OWVAR 2
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: LD_INT 32
67439: PUSH
67440: LD_INT 3
67442: PUSH
67443: EMPTY
67444: LIST
67445: LIST
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PPUSH
67451: CALL_OW 69
67455: ST_TO_ADDR
// if not tmp then
67456: LD_VAR 0 2
67460: NOT
67461: IFFALSE 67465
// exit ;
67463: GO 67494
// for i in tmp do
67465: LD_ADDR_VAR 0 1
67469: PUSH
67470: LD_VAR 0 2
67474: PUSH
67475: FOR_IN
67476: IFFALSE 67492
// begin SetLives ( i , 0 ) ;
67478: LD_VAR 0 1
67482: PPUSH
67483: LD_INT 0
67485: PPUSH
67486: CALL_OW 234
// end ;
67490: GO 67475
67492: POP
67493: POP
// end ;
67494: PPOPN 2
67496: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67497: LD_EXP 51
67501: IFFALSE 67509
67503: PUSH
67504: LD_EXP 54
67508: AND
67509: IFFALSE 67602
67511: GO 67513
67513: DISABLE
67514: LD_INT 0
67516: PPUSH
// begin enable ;
67517: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67518: LD_ADDR_VAR 0 1
67522: PUSH
67523: LD_INT 22
67525: PUSH
67526: LD_OWVAR 2
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: LD_INT 25
67540: PUSH
67541: LD_INT 5
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 25
67550: PUSH
67551: LD_INT 9
67553: PUSH
67554: EMPTY
67555: LIST
67556: LIST
67557: PUSH
67558: LD_INT 25
67560: PUSH
67561: LD_INT 8
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: EMPTY
67569: LIST
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PPUSH
67578: CALL_OW 69
67582: PUSH
67583: FOR_IN
67584: IFFALSE 67600
// begin SetClass ( i , 1 ) ;
67586: LD_VAR 0 1
67590: PPUSH
67591: LD_INT 1
67593: PPUSH
67594: CALL_OW 336
// end ;
67598: GO 67583
67600: POP
67601: POP
// end ;
67602: PPOPN 1
67604: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67605: LD_EXP 51
67609: IFFALSE 67617
67611: PUSH
67612: LD_EXP 55
67616: AND
67617: IFFALSE 67629
67619: PUSH
67620: LD_OWVAR 65
67624: PUSH
67625: LD_INT 7
67627: LESS
67628: AND
67629: IFFALSE 67643
67631: GO 67633
67633: DISABLE
// begin enable ;
67634: ENABLE
// game_speed := 7 ;
67635: LD_ADDR_OWVAR 65
67639: PUSH
67640: LD_INT 7
67642: ST_TO_ADDR
// end ;
67643: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67644: LD_EXP 51
67648: IFFALSE 67656
67650: PUSH
67651: LD_EXP 58
67655: AND
67656: IFFALSE 67858
67658: GO 67660
67660: DISABLE
67661: LD_INT 0
67663: PPUSH
67664: PPUSH
67665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67666: LD_ADDR_VAR 0 3
67670: PUSH
67671: LD_INT 81
67673: PUSH
67674: LD_OWVAR 2
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: PUSH
67683: LD_INT 21
67685: PUSH
67686: LD_INT 1
67688: PUSH
67689: EMPTY
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PPUSH
67697: CALL_OW 69
67701: ST_TO_ADDR
// if not tmp then
67702: LD_VAR 0 3
67706: NOT
67707: IFFALSE 67711
// exit ;
67709: GO 67858
// if tmp > 5 then
67711: LD_VAR 0 3
67715: PUSH
67716: LD_INT 5
67718: GREATER
67719: IFFALSE 67731
// k := 5 else
67721: LD_ADDR_VAR 0 2
67725: PUSH
67726: LD_INT 5
67728: ST_TO_ADDR
67729: GO 67741
// k := tmp ;
67731: LD_ADDR_VAR 0 2
67735: PUSH
67736: LD_VAR 0 3
67740: ST_TO_ADDR
// for i := 1 to k do
67741: LD_ADDR_VAR 0 1
67745: PUSH
67746: DOUBLE
67747: LD_INT 1
67749: DEC
67750: ST_TO_ADDR
67751: LD_VAR 0 2
67755: PUSH
67756: FOR_TO
67757: IFFALSE 67856
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67759: LD_VAR 0 3
67763: PUSH
67764: LD_VAR 0 1
67768: ARRAY
67769: PPUSH
67770: LD_VAR 0 1
67774: PUSH
67775: LD_INT 4
67777: MOD
67778: PUSH
67779: LD_INT 1
67781: PLUS
67782: PPUSH
67783: CALL_OW 259
67787: PUSH
67788: LD_INT 10
67790: LESS
67791: IFFALSE 67854
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67793: LD_VAR 0 3
67797: PUSH
67798: LD_VAR 0 1
67802: ARRAY
67803: PPUSH
67804: LD_VAR 0 1
67808: PUSH
67809: LD_INT 4
67811: MOD
67812: PUSH
67813: LD_INT 1
67815: PLUS
67816: PPUSH
67817: LD_VAR 0 3
67821: PUSH
67822: LD_VAR 0 1
67826: ARRAY
67827: PPUSH
67828: LD_VAR 0 1
67832: PUSH
67833: LD_INT 4
67835: MOD
67836: PUSH
67837: LD_INT 1
67839: PLUS
67840: PPUSH
67841: CALL_OW 259
67845: PUSH
67846: LD_INT 1
67848: PLUS
67849: PPUSH
67850: CALL_OW 237
67854: GO 67756
67856: POP
67857: POP
// end ;
67858: PPOPN 3
67860: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67861: LD_EXP 51
67865: IFFALSE 67873
67867: PUSH
67868: LD_EXP 59
67872: AND
67873: IFFALSE 67893
67875: GO 67877
67877: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67878: LD_INT 4
67880: PPUSH
67881: LD_OWVAR 2
67885: PPUSH
67886: LD_INT 0
67888: PPUSH
67889: CALL_OW 324
67893: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67894: LD_EXP 51
67898: IFFALSE 67906
67900: PUSH
67901: LD_EXP 88
67905: AND
67906: IFFALSE 67926
67908: GO 67910
67910: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67911: LD_INT 19
67913: PPUSH
67914: LD_OWVAR 2
67918: PPUSH
67919: LD_INT 0
67921: PPUSH
67922: CALL_OW 324
67926: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67927: LD_EXP 51
67931: IFFALSE 67939
67933: PUSH
67934: LD_EXP 60
67938: AND
67939: IFFALSE 68041
67941: GO 67943
67943: DISABLE
67944: LD_INT 0
67946: PPUSH
67947: PPUSH
// begin enable ;
67948: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67949: LD_ADDR_VAR 0 2
67953: PUSH
67954: LD_INT 22
67956: PUSH
67957: LD_OWVAR 2
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 2
67968: PUSH
67969: LD_INT 34
67971: PUSH
67972: LD_INT 11
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 34
67981: PUSH
67982: LD_INT 30
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: LIST
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PPUSH
67998: CALL_OW 69
68002: ST_TO_ADDR
// if not tmp then
68003: LD_VAR 0 2
68007: NOT
68008: IFFALSE 68012
// exit ;
68010: GO 68041
// for i in tmp do
68012: LD_ADDR_VAR 0 1
68016: PUSH
68017: LD_VAR 0 2
68021: PUSH
68022: FOR_IN
68023: IFFALSE 68039
// begin SetLives ( i , 0 ) ;
68025: LD_VAR 0 1
68029: PPUSH
68030: LD_INT 0
68032: PPUSH
68033: CALL_OW 234
// end ;
68037: GO 68022
68039: POP
68040: POP
// end ;
68041: PPOPN 2
68043: END
// every 0 0$1 trigger StreamModeActive and sBunker do
68044: LD_EXP 51
68048: IFFALSE 68056
68050: PUSH
68051: LD_EXP 61
68055: AND
68056: IFFALSE 68076
68058: GO 68060
68060: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
68061: LD_INT 32
68063: PPUSH
68064: LD_OWVAR 2
68068: PPUSH
68069: LD_INT 0
68071: PPUSH
68072: CALL_OW 324
68076: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
68077: LD_EXP 51
68081: IFFALSE 68089
68083: PUSH
68084: LD_EXP 62
68088: AND
68089: IFFALSE 68272
68091: GO 68093
68093: DISABLE
68094: LD_INT 0
68096: PPUSH
68097: PPUSH
68098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
68099: LD_ADDR_VAR 0 2
68103: PUSH
68104: LD_INT 22
68106: PUSH
68107: LD_OWVAR 2
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 33
68118: PUSH
68119: LD_INT 3
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PPUSH
68130: CALL_OW 69
68134: ST_TO_ADDR
// if not tmp then
68135: LD_VAR 0 2
68139: NOT
68140: IFFALSE 68144
// exit ;
68142: GO 68272
// side := 0 ;
68144: LD_ADDR_VAR 0 3
68148: PUSH
68149: LD_INT 0
68151: ST_TO_ADDR
// for i := 1 to 8 do
68152: LD_ADDR_VAR 0 1
68156: PUSH
68157: DOUBLE
68158: LD_INT 1
68160: DEC
68161: ST_TO_ADDR
68162: LD_INT 8
68164: PUSH
68165: FOR_TO
68166: IFFALSE 68216
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
68168: LD_OWVAR 2
68172: PUSH
68173: LD_VAR 0 1
68177: NONEQUAL
68178: IFFALSE 68200
68180: PUSH
68181: LD_OWVAR 2
68185: PPUSH
68186: LD_VAR 0 1
68190: PPUSH
68191: CALL_OW 81
68195: PUSH
68196: LD_INT 2
68198: EQUAL
68199: AND
68200: IFFALSE 68214
// begin side := i ;
68202: LD_ADDR_VAR 0 3
68206: PUSH
68207: LD_VAR 0 1
68211: ST_TO_ADDR
// break ;
68212: GO 68216
// end ;
68214: GO 68165
68216: POP
68217: POP
// if not side then
68218: LD_VAR 0 3
68222: NOT
68223: IFFALSE 68227
// exit ;
68225: GO 68272
// for i := 1 to tmp do
68227: LD_ADDR_VAR 0 1
68231: PUSH
68232: DOUBLE
68233: LD_INT 1
68235: DEC
68236: ST_TO_ADDR
68237: LD_VAR 0 2
68241: PUSH
68242: FOR_TO
68243: IFFALSE 68270
// if Prob ( 60 ) then
68245: LD_INT 60
68247: PPUSH
68248: CALL_OW 13
68252: IFFALSE 68268
// SetSide ( i , side ) ;
68254: LD_VAR 0 1
68258: PPUSH
68259: LD_VAR 0 3
68263: PPUSH
68264: CALL_OW 235
68268: GO 68242
68270: POP
68271: POP
// end ;
68272: PPOPN 3
68274: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68275: LD_EXP 51
68279: IFFALSE 68287
68281: PUSH
68282: LD_EXP 64
68286: AND
68287: IFFALSE 68406
68289: GO 68291
68291: DISABLE
68292: LD_INT 0
68294: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68295: LD_ADDR_VAR 0 1
68299: PUSH
68300: LD_INT 22
68302: PUSH
68303: LD_OWVAR 2
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_INT 21
68314: PUSH
68315: LD_INT 1
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: PUSH
68322: LD_INT 3
68324: PUSH
68325: LD_INT 23
68327: PUSH
68328: LD_INT 0
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: EMPTY
68340: LIST
68341: LIST
68342: LIST
68343: PPUSH
68344: CALL_OW 69
68348: PUSH
68349: FOR_IN
68350: IFFALSE 68404
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68352: LD_VAR 0 1
68356: PPUSH
68357: CALL_OW 257
68361: PUSH
68362: LD_INT 1
68364: PUSH
68365: LD_INT 2
68367: PUSH
68368: LD_INT 3
68370: PUSH
68371: LD_INT 4
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: LIST
68378: LIST
68379: IN
68380: IFFALSE 68402
// SetClass ( un , rand ( 1 , 4 ) ) ;
68382: LD_VAR 0 1
68386: PPUSH
68387: LD_INT 1
68389: PPUSH
68390: LD_INT 4
68392: PPUSH
68393: CALL_OW 12
68397: PPUSH
68398: CALL_OW 336
68402: GO 68349
68404: POP
68405: POP
// end ;
68406: PPOPN 1
68408: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68409: LD_EXP 51
68413: IFFALSE 68421
68415: PUSH
68416: LD_EXP 63
68420: AND
68421: IFFALSE 68500
68423: GO 68425
68425: DISABLE
68426: LD_INT 0
68428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68429: LD_ADDR_VAR 0 1
68433: PUSH
68434: LD_INT 22
68436: PUSH
68437: LD_OWVAR 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 21
68448: PUSH
68449: LD_INT 3
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PPUSH
68460: CALL_OW 69
68464: ST_TO_ADDR
// if not tmp then
68465: LD_VAR 0 1
68469: NOT
68470: IFFALSE 68474
// exit ;
68472: GO 68500
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68474: LD_VAR 0 1
68478: PUSH
68479: LD_INT 1
68481: PPUSH
68482: LD_VAR 0 1
68486: PPUSH
68487: CALL_OW 12
68491: ARRAY
68492: PPUSH
68493: LD_INT 100
68495: PPUSH
68496: CALL_OW 234
// end ;
68500: PPOPN 1
68502: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68503: LD_EXP 51
68507: IFFALSE 68515
68509: PUSH
68510: LD_EXP 65
68514: AND
68515: IFFALSE 68613
68517: GO 68519
68519: DISABLE
68520: LD_INT 0
68522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68523: LD_ADDR_VAR 0 1
68527: PUSH
68528: LD_INT 22
68530: PUSH
68531: LD_OWVAR 2
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 21
68542: PUSH
68543: LD_INT 1
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: PPUSH
68554: CALL_OW 69
68558: ST_TO_ADDR
// if not tmp then
68559: LD_VAR 0 1
68563: NOT
68564: IFFALSE 68568
// exit ;
68566: GO 68613
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 1
68575: PPUSH
68576: LD_VAR 0 1
68580: PPUSH
68581: CALL_OW 12
68585: ARRAY
68586: PPUSH
68587: LD_INT 1
68589: PPUSH
68590: LD_INT 4
68592: PPUSH
68593: CALL_OW 12
68597: PPUSH
68598: LD_INT 3000
68600: PPUSH
68601: LD_INT 9000
68603: PPUSH
68604: CALL_OW 12
68608: PPUSH
68609: CALL_OW 492
// end ;
68613: PPOPN 1
68615: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68616: LD_EXP 51
68620: IFFALSE 68628
68622: PUSH
68623: LD_EXP 66
68627: AND
68628: IFFALSE 68648
68630: GO 68632
68632: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68633: LD_INT 1
68635: PPUSH
68636: LD_OWVAR 2
68640: PPUSH
68641: LD_INT 0
68643: PPUSH
68644: CALL_OW 324
68648: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68649: LD_EXP 51
68653: IFFALSE 68661
68655: PUSH
68656: LD_EXP 67
68660: AND
68661: IFFALSE 68744
68663: GO 68665
68665: DISABLE
68666: LD_INT 0
68668: PPUSH
68669: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68670: LD_ADDR_VAR 0 2
68674: PUSH
68675: LD_INT 22
68677: PUSH
68678: LD_OWVAR 2
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 21
68689: PUSH
68690: LD_INT 3
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PPUSH
68701: CALL_OW 69
68705: ST_TO_ADDR
// if not tmp then
68706: LD_VAR 0 2
68710: NOT
68711: IFFALSE 68715
// exit ;
68713: GO 68744
// for i in tmp do
68715: LD_ADDR_VAR 0 1
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: FOR_IN
68726: IFFALSE 68742
// SetBLevel ( i , 10 ) ;
68728: LD_VAR 0 1
68732: PPUSH
68733: LD_INT 10
68735: PPUSH
68736: CALL_OW 241
68740: GO 68725
68742: POP
68743: POP
// end ;
68744: PPOPN 2
68746: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68747: LD_EXP 51
68751: IFFALSE 68759
68753: PUSH
68754: LD_EXP 68
68758: AND
68759: IFFALSE 68870
68761: GO 68763
68763: DISABLE
68764: LD_INT 0
68766: PPUSH
68767: PPUSH
68768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68769: LD_ADDR_VAR 0 3
68773: PUSH
68774: LD_INT 22
68776: PUSH
68777: LD_OWVAR 2
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 25
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PPUSH
68800: CALL_OW 69
68804: ST_TO_ADDR
// if not tmp then
68805: LD_VAR 0 3
68809: NOT
68810: IFFALSE 68814
// exit ;
68812: GO 68870
// un := tmp [ rand ( 1 , tmp ) ] ;
68814: LD_ADDR_VAR 0 2
68818: PUSH
68819: LD_VAR 0 3
68823: PUSH
68824: LD_INT 1
68826: PPUSH
68827: LD_VAR 0 3
68831: PPUSH
68832: CALL_OW 12
68836: ARRAY
68837: ST_TO_ADDR
// if Crawls ( un ) then
68838: LD_VAR 0 2
68842: PPUSH
68843: CALL_OW 318
68847: IFFALSE 68858
// ComWalk ( un ) ;
68849: LD_VAR 0 2
68853: PPUSH
68854: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68858: LD_VAR 0 2
68862: PPUSH
68863: LD_INT 5
68865: PPUSH
68866: CALL_OW 336
// end ;
68870: PPOPN 3
68872: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68873: LD_EXP 51
68877: IFFALSE 68885
68879: PUSH
68880: LD_EXP 69
68884: AND
68885: IFFALSE 68897
68887: PUSH
68888: LD_OWVAR 67
68892: PUSH
68893: LD_INT 4
68895: LESS
68896: AND
68897: IFFALSE 68916
68899: GO 68901
68901: DISABLE
// begin Difficulty := Difficulty + 1 ;
68902: LD_ADDR_OWVAR 67
68906: PUSH
68907: LD_OWVAR 67
68911: PUSH
68912: LD_INT 1
68914: PLUS
68915: ST_TO_ADDR
// end ;
68916: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68917: LD_EXP 51
68921: IFFALSE 68929
68923: PUSH
68924: LD_EXP 70
68928: AND
68929: IFFALSE 69032
68931: GO 68933
68933: DISABLE
68934: LD_INT 0
68936: PPUSH
// begin for i := 1 to 5 do
68937: LD_ADDR_VAR 0 1
68941: PUSH
68942: DOUBLE
68943: LD_INT 1
68945: DEC
68946: ST_TO_ADDR
68947: LD_INT 5
68949: PUSH
68950: FOR_TO
68951: IFFALSE 69030
// begin uc_nation := nation_nature ;
68953: LD_ADDR_OWVAR 21
68957: PUSH
68958: LD_INT 0
68960: ST_TO_ADDR
// uc_side := 0 ;
68961: LD_ADDR_OWVAR 20
68965: PUSH
68966: LD_INT 0
68968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68969: LD_ADDR_OWVAR 29
68973: PUSH
68974: LD_INT 12
68976: PUSH
68977: LD_INT 12
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: ST_TO_ADDR
// hc_agressivity := 20 ;
68984: LD_ADDR_OWVAR 35
68988: PUSH
68989: LD_INT 20
68991: ST_TO_ADDR
// hc_class := class_tiger ;
68992: LD_ADDR_OWVAR 28
68996: PUSH
68997: LD_INT 14
68999: ST_TO_ADDR
// hc_gallery :=  ;
69000: LD_ADDR_OWVAR 33
69004: PUSH
69005: LD_STRING 
69007: ST_TO_ADDR
// hc_name :=  ;
69008: LD_ADDR_OWVAR 26
69012: PUSH
69013: LD_STRING 
69015: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
69016: CALL_OW 44
69020: PPUSH
69021: LD_INT 0
69023: PPUSH
69024: CALL_OW 51
// end ;
69028: GO 68950
69030: POP
69031: POP
// end ;
69032: PPOPN 1
69034: END
// every 0 0$1 trigger StreamModeActive and sBomb do
69035: LD_EXP 51
69039: IFFALSE 69047
69041: PUSH
69042: LD_EXP 71
69046: AND
69047: IFFALSE 69056
69049: GO 69051
69051: DISABLE
// StreamSibBomb ;
69052: CALL 69057 0 0
69056: END
// export function StreamSibBomb ; var i , x , y ; begin
69057: LD_INT 0
69059: PPUSH
69060: PPUSH
69061: PPUSH
69062: PPUSH
// result := false ;
69063: LD_ADDR_VAR 0 1
69067: PUSH
69068: LD_INT 0
69070: ST_TO_ADDR
// for i := 1 to 16 do
69071: LD_ADDR_VAR 0 2
69075: PUSH
69076: DOUBLE
69077: LD_INT 1
69079: DEC
69080: ST_TO_ADDR
69081: LD_INT 16
69083: PUSH
69084: FOR_TO
69085: IFFALSE 69284
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_INT 10
69094: PUSH
69095: LD_INT 20
69097: PUSH
69098: LD_INT 30
69100: PUSH
69101: LD_INT 40
69103: PUSH
69104: LD_INT 50
69106: PUSH
69107: LD_INT 60
69109: PUSH
69110: LD_INT 70
69112: PUSH
69113: LD_INT 80
69115: PUSH
69116: LD_INT 90
69118: PUSH
69119: LD_INT 100
69121: PUSH
69122: LD_INT 110
69124: PUSH
69125: LD_INT 120
69127: PUSH
69128: LD_INT 130
69130: PUSH
69131: LD_INT 140
69133: PUSH
69134: LD_INT 150
69136: PUSH
69137: EMPTY
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: PUSH
69154: LD_INT 1
69156: PPUSH
69157: LD_INT 15
69159: PPUSH
69160: CALL_OW 12
69164: ARRAY
69165: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
69166: LD_ADDR_VAR 0 4
69170: PUSH
69171: LD_INT 10
69173: PUSH
69174: LD_INT 20
69176: PUSH
69177: LD_INT 30
69179: PUSH
69180: LD_INT 40
69182: PUSH
69183: LD_INT 50
69185: PUSH
69186: LD_INT 60
69188: PUSH
69189: LD_INT 70
69191: PUSH
69192: LD_INT 80
69194: PUSH
69195: LD_INT 90
69197: PUSH
69198: LD_INT 100
69200: PUSH
69201: LD_INT 110
69203: PUSH
69204: LD_INT 120
69206: PUSH
69207: LD_INT 130
69209: PUSH
69210: LD_INT 140
69212: PUSH
69213: LD_INT 150
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: PPUSH
69236: LD_INT 15
69238: PPUSH
69239: CALL_OW 12
69243: ARRAY
69244: ST_TO_ADDR
// if ValidHex ( x , y ) then
69245: LD_VAR 0 3
69249: PPUSH
69250: LD_VAR 0 4
69254: PPUSH
69255: CALL_OW 488
69259: IFFALSE 69282
// begin result := [ x , y ] ;
69261: LD_ADDR_VAR 0 1
69265: PUSH
69266: LD_VAR 0 3
69270: PUSH
69271: LD_VAR 0 4
69275: PUSH
69276: EMPTY
69277: LIST
69278: LIST
69279: ST_TO_ADDR
// break ;
69280: GO 69284
// end ; end ;
69282: GO 69084
69284: POP
69285: POP
// if result then
69286: LD_VAR 0 1
69290: IFFALSE 69350
// begin ToLua ( playSibBomb() ) ;
69292: LD_STRING playSibBomb()
69294: PPUSH
69295: CALL_OW 559
// wait ( 0 0$14 ) ;
69299: LD_INT 490
69301: PPUSH
69302: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69306: LD_VAR 0 1
69310: PUSH
69311: LD_INT 1
69313: ARRAY
69314: PPUSH
69315: LD_VAR 0 1
69319: PUSH
69320: LD_INT 2
69322: ARRAY
69323: PPUSH
69324: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69328: LD_VAR 0 1
69332: PUSH
69333: LD_INT 1
69335: ARRAY
69336: PPUSH
69337: LD_VAR 0 1
69341: PUSH
69342: LD_INT 2
69344: ARRAY
69345: PPUSH
69346: CALL_OW 429
// end ; end ;
69350: LD_VAR 0 1
69354: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69355: LD_EXP 51
69359: IFFALSE 69367
69361: PUSH
69362: LD_EXP 73
69366: AND
69367: IFFALSE 69379
69369: GO 69371
69371: DISABLE
// YouLost (  ) ;
69372: LD_STRING 
69374: PPUSH
69375: CALL_OW 104
69379: END
// every 0 0$1 trigger StreamModeActive and sFog do
69380: LD_EXP 51
69384: IFFALSE 69392
69386: PUSH
69387: LD_EXP 72
69391: AND
69392: IFFALSE 69406
69394: GO 69396
69396: DISABLE
// FogOff ( your_side ) ;
69397: LD_OWVAR 2
69401: PPUSH
69402: CALL_OW 344
69406: END
// every 0 0$1 trigger StreamModeActive and sSun do
69407: LD_EXP 51
69411: IFFALSE 69419
69413: PUSH
69414: LD_EXP 74
69418: AND
69419: IFFALSE 69447
69421: GO 69423
69423: DISABLE
// begin solar_recharge_percent := 0 ;
69424: LD_ADDR_OWVAR 79
69428: PUSH
69429: LD_INT 0
69431: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69432: LD_INT 10500
69434: PPUSH
69435: CALL_OW 67
// solar_recharge_percent := 100 ;
69439: LD_ADDR_OWVAR 79
69443: PUSH
69444: LD_INT 100
69446: ST_TO_ADDR
// end ;
69447: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69448: LD_EXP 51
69452: IFFALSE 69460
69454: PUSH
69455: LD_EXP 75
69459: AND
69460: IFFALSE 69699
69462: GO 69464
69464: DISABLE
69465: LD_INT 0
69467: PPUSH
69468: PPUSH
69469: PPUSH
// begin tmp := [ ] ;
69470: LD_ADDR_VAR 0 3
69474: PUSH
69475: EMPTY
69476: ST_TO_ADDR
// for i := 1 to 6 do
69477: LD_ADDR_VAR 0 1
69481: PUSH
69482: DOUBLE
69483: LD_INT 1
69485: DEC
69486: ST_TO_ADDR
69487: LD_INT 6
69489: PUSH
69490: FOR_TO
69491: IFFALSE 69596
// begin uc_nation := nation_nature ;
69493: LD_ADDR_OWVAR 21
69497: PUSH
69498: LD_INT 0
69500: ST_TO_ADDR
// uc_side := 0 ;
69501: LD_ADDR_OWVAR 20
69505: PUSH
69506: LD_INT 0
69508: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69509: LD_ADDR_OWVAR 29
69513: PUSH
69514: LD_INT 12
69516: PUSH
69517: LD_INT 12
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: ST_TO_ADDR
// hc_agressivity := 20 ;
69524: LD_ADDR_OWVAR 35
69528: PUSH
69529: LD_INT 20
69531: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69532: LD_ADDR_OWVAR 28
69536: PUSH
69537: LD_INT 17
69539: ST_TO_ADDR
// hc_gallery :=  ;
69540: LD_ADDR_OWVAR 33
69544: PUSH
69545: LD_STRING 
69547: ST_TO_ADDR
// hc_name :=  ;
69548: LD_ADDR_OWVAR 26
69552: PUSH
69553: LD_STRING 
69555: ST_TO_ADDR
// un := CreateHuman ;
69556: LD_ADDR_VAR 0 2
69560: PUSH
69561: CALL_OW 44
69565: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69566: LD_VAR 0 2
69570: PPUSH
69571: LD_INT 1
69573: PPUSH
69574: CALL_OW 51
// tmp := tmp ^ un ;
69578: LD_ADDR_VAR 0 3
69582: PUSH
69583: LD_VAR 0 3
69587: PUSH
69588: LD_VAR 0 2
69592: ADD
69593: ST_TO_ADDR
// end ;
69594: GO 69490
69596: POP
69597: POP
// repeat wait ( 0 0$1 ) ;
69598: LD_INT 35
69600: PPUSH
69601: CALL_OW 67
// for un in tmp do
69605: LD_ADDR_VAR 0 2
69609: PUSH
69610: LD_VAR 0 3
69614: PUSH
69615: FOR_IN
69616: IFFALSE 69690
// begin if IsDead ( un ) then
69618: LD_VAR 0 2
69622: PPUSH
69623: CALL_OW 301
69627: IFFALSE 69647
// begin tmp := tmp diff un ;
69629: LD_ADDR_VAR 0 3
69633: PUSH
69634: LD_VAR 0 3
69638: PUSH
69639: LD_VAR 0 2
69643: DIFF
69644: ST_TO_ADDR
// continue ;
69645: GO 69615
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69647: LD_VAR 0 2
69651: PPUSH
69652: LD_INT 3
69654: PUSH
69655: LD_INT 22
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PPUSH
69669: CALL_OW 69
69673: PPUSH
69674: LD_VAR 0 2
69678: PPUSH
69679: CALL_OW 74
69683: PPUSH
69684: CALL_OW 115
// end ;
69688: GO 69615
69690: POP
69691: POP
// until not tmp ;
69692: LD_VAR 0 3
69696: NOT
69697: IFFALSE 69598
// end ;
69699: PPOPN 3
69701: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69702: LD_EXP 51
69706: IFFALSE 69714
69708: PUSH
69709: LD_EXP 76
69713: AND
69714: IFFALSE 69768
69716: GO 69718
69718: DISABLE
// begin ToLua ( displayTroll(); ) ;
69719: LD_STRING displayTroll();
69721: PPUSH
69722: CALL_OW 559
// wait ( 3 3$00 ) ;
69726: LD_INT 6300
69728: PPUSH
69729: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69733: LD_STRING hideTroll();
69735: PPUSH
69736: CALL_OW 559
// wait ( 1 1$00 ) ;
69740: LD_INT 2100
69742: PPUSH
69743: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69747: LD_STRING displayTroll();
69749: PPUSH
69750: CALL_OW 559
// wait ( 1 1$00 ) ;
69754: LD_INT 2100
69756: PPUSH
69757: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69761: LD_STRING hideTroll();
69763: PPUSH
69764: CALL_OW 559
// end ;
69768: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69769: LD_EXP 51
69773: IFFALSE 69781
69775: PUSH
69776: LD_EXP 77
69780: AND
69781: IFFALSE 69844
69783: GO 69785
69785: DISABLE
69786: LD_INT 0
69788: PPUSH
// begin p := 0 ;
69789: LD_ADDR_VAR 0 1
69793: PUSH
69794: LD_INT 0
69796: ST_TO_ADDR
// repeat game_speed := 1 ;
69797: LD_ADDR_OWVAR 65
69801: PUSH
69802: LD_INT 1
69804: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69805: LD_INT 35
69807: PPUSH
69808: CALL_OW 67
// p := p + 1 ;
69812: LD_ADDR_VAR 0 1
69816: PUSH
69817: LD_VAR 0 1
69821: PUSH
69822: LD_INT 1
69824: PLUS
69825: ST_TO_ADDR
// until p >= 60 ;
69826: LD_VAR 0 1
69830: PUSH
69831: LD_INT 60
69833: GREATEREQUAL
69834: IFFALSE 69797
// game_speed := 4 ;
69836: LD_ADDR_OWVAR 65
69840: PUSH
69841: LD_INT 4
69843: ST_TO_ADDR
// end ;
69844: PPOPN 1
69846: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69847: LD_EXP 51
69851: IFFALSE 69859
69853: PUSH
69854: LD_EXP 78
69858: AND
69859: IFFALSE 70005
69861: GO 69863
69863: DISABLE
69864: LD_INT 0
69866: PPUSH
69867: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69868: LD_ADDR_VAR 0 1
69872: PUSH
69873: LD_INT 22
69875: PUSH
69876: LD_OWVAR 2
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 2
69887: PUSH
69888: LD_INT 30
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 30
69900: PUSH
69901: LD_INT 1
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: LIST
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PPUSH
69917: CALL_OW 69
69921: ST_TO_ADDR
// if not depot then
69922: LD_VAR 0 1
69926: NOT
69927: IFFALSE 69931
// exit ;
69929: GO 70005
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69931: LD_ADDR_VAR 0 2
69935: PUSH
69936: LD_VAR 0 1
69940: PUSH
69941: LD_INT 1
69943: PPUSH
69944: LD_VAR 0 1
69948: PPUSH
69949: CALL_OW 12
69953: ARRAY
69954: PPUSH
69955: CALL_OW 274
69959: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69960: LD_VAR 0 2
69964: PPUSH
69965: LD_INT 1
69967: PPUSH
69968: LD_INT 0
69970: PPUSH
69971: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69975: LD_VAR 0 2
69979: PPUSH
69980: LD_INT 2
69982: PPUSH
69983: LD_INT 0
69985: PPUSH
69986: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69990: LD_VAR 0 2
69994: PPUSH
69995: LD_INT 3
69997: PPUSH
69998: LD_INT 0
70000: PPUSH
70001: CALL_OW 277
// end ;
70005: PPOPN 2
70007: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
70008: LD_EXP 51
70012: IFFALSE 70020
70014: PUSH
70015: LD_EXP 79
70019: AND
70020: IFFALSE 70117
70022: GO 70024
70024: DISABLE
70025: LD_INT 0
70027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70028: LD_ADDR_VAR 0 1
70032: PUSH
70033: LD_INT 22
70035: PUSH
70036: LD_OWVAR 2
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 21
70047: PUSH
70048: LD_INT 1
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: LD_INT 23
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: LIST
70076: PPUSH
70077: CALL_OW 69
70081: ST_TO_ADDR
// if not tmp then
70082: LD_VAR 0 1
70086: NOT
70087: IFFALSE 70091
// exit ;
70089: GO 70117
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
70091: LD_VAR 0 1
70095: PUSH
70096: LD_INT 1
70098: PPUSH
70099: LD_VAR 0 1
70103: PPUSH
70104: CALL_OW 12
70108: ARRAY
70109: PPUSH
70110: LD_INT 200
70112: PPUSH
70113: CALL_OW 234
// end ;
70117: PPOPN 1
70119: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
70120: LD_EXP 51
70124: IFFALSE 70132
70126: PUSH
70127: LD_EXP 80
70131: AND
70132: IFFALSE 70211
70134: GO 70136
70136: DISABLE
70137: LD_INT 0
70139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
70140: LD_ADDR_VAR 0 1
70144: PUSH
70145: LD_INT 22
70147: PUSH
70148: LD_OWVAR 2
70152: PUSH
70153: EMPTY
70154: LIST
70155: LIST
70156: PUSH
70157: LD_INT 21
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PPUSH
70171: CALL_OW 69
70175: ST_TO_ADDR
// if not tmp then
70176: LD_VAR 0 1
70180: NOT
70181: IFFALSE 70185
// exit ;
70183: GO 70211
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
70185: LD_VAR 0 1
70189: PUSH
70190: LD_INT 1
70192: PPUSH
70193: LD_VAR 0 1
70197: PPUSH
70198: CALL_OW 12
70202: ARRAY
70203: PPUSH
70204: LD_INT 60
70206: PPUSH
70207: CALL_OW 234
// end ;
70211: PPOPN 1
70213: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70214: LD_EXP 51
70218: IFFALSE 70226
70220: PUSH
70221: LD_EXP 81
70225: AND
70226: IFFALSE 70325
70228: GO 70230
70230: DISABLE
70231: LD_INT 0
70233: PPUSH
70234: PPUSH
// begin enable ;
70235: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70236: LD_ADDR_VAR 0 1
70240: PUSH
70241: LD_INT 22
70243: PUSH
70244: LD_OWVAR 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 61
70255: PUSH
70256: EMPTY
70257: LIST
70258: PUSH
70259: LD_INT 33
70261: PUSH
70262: LD_INT 2
70264: PUSH
70265: EMPTY
70266: LIST
70267: LIST
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: LIST
70273: PPUSH
70274: CALL_OW 69
70278: ST_TO_ADDR
// if not tmp then
70279: LD_VAR 0 1
70283: NOT
70284: IFFALSE 70288
// exit ;
70286: GO 70325
// for i in tmp do
70288: LD_ADDR_VAR 0 2
70292: PUSH
70293: LD_VAR 0 1
70297: PUSH
70298: FOR_IN
70299: IFFALSE 70323
// if IsControledBy ( i ) then
70301: LD_VAR 0 2
70305: PPUSH
70306: CALL_OW 312
70310: IFFALSE 70321
// ComUnlink ( i ) ;
70312: LD_VAR 0 2
70316: PPUSH
70317: CALL_OW 136
70321: GO 70298
70323: POP
70324: POP
// end ;
70325: PPOPN 2
70327: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70328: LD_EXP 51
70332: IFFALSE 70340
70334: PUSH
70335: LD_EXP 82
70339: AND
70340: IFFALSE 70480
70342: GO 70344
70344: DISABLE
70345: LD_INT 0
70347: PPUSH
70348: PPUSH
// begin ToLua ( displayPowell(); ) ;
70349: LD_STRING displayPowell();
70351: PPUSH
70352: CALL_OW 559
// uc_side := 0 ;
70356: LD_ADDR_OWVAR 20
70360: PUSH
70361: LD_INT 0
70363: ST_TO_ADDR
// uc_nation := 2 ;
70364: LD_ADDR_OWVAR 21
70368: PUSH
70369: LD_INT 2
70371: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70372: LD_ADDR_OWVAR 37
70376: PUSH
70377: LD_INT 14
70379: ST_TO_ADDR
// vc_engine := engine_siberite ;
70380: LD_ADDR_OWVAR 39
70384: PUSH
70385: LD_INT 3
70387: ST_TO_ADDR
// vc_control := control_apeman ;
70388: LD_ADDR_OWVAR 38
70392: PUSH
70393: LD_INT 5
70395: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70396: LD_ADDR_OWVAR 40
70400: PUSH
70401: LD_INT 29
70403: ST_TO_ADDR
// un := CreateVehicle ;
70404: LD_ADDR_VAR 0 2
70408: PUSH
70409: CALL_OW 45
70413: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70414: LD_VAR 0 2
70418: PPUSH
70419: LD_INT 1
70421: PPUSH
70422: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70426: LD_INT 35
70428: PPUSH
70429: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70433: LD_VAR 0 2
70437: PPUSH
70438: LD_INT 22
70440: PUSH
70441: LD_OWVAR 2
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PPUSH
70450: CALL_OW 69
70454: PPUSH
70455: LD_VAR 0 2
70459: PPUSH
70460: CALL_OW 74
70464: PPUSH
70465: CALL_OW 115
// until IsDead ( un ) ;
70469: LD_VAR 0 2
70473: PPUSH
70474: CALL_OW 301
70478: IFFALSE 70426
// end ;
70480: PPOPN 2
70482: END
// every 0 0$1 trigger StreamModeActive and sStu do
70483: LD_EXP 51
70487: IFFALSE 70495
70489: PUSH
70490: LD_EXP 90
70494: AND
70495: IFFALSE 70511
70497: GO 70499
70499: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70500: LD_STRING displayStucuk();
70502: PPUSH
70503: CALL_OW 559
// ResetFog ;
70507: CALL_OW 335
// end ;
70511: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70512: LD_EXP 51
70516: IFFALSE 70524
70518: PUSH
70519: LD_EXP 83
70523: AND
70524: IFFALSE 70665
70526: GO 70528
70528: DISABLE
70529: LD_INT 0
70531: PPUSH
70532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70533: LD_ADDR_VAR 0 2
70537: PUSH
70538: LD_INT 22
70540: PUSH
70541: LD_OWVAR 2
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 21
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PPUSH
70564: CALL_OW 69
70568: ST_TO_ADDR
// if not tmp then
70569: LD_VAR 0 2
70573: NOT
70574: IFFALSE 70578
// exit ;
70576: GO 70665
// un := tmp [ rand ( 1 , tmp ) ] ;
70578: LD_ADDR_VAR 0 1
70582: PUSH
70583: LD_VAR 0 2
70587: PUSH
70588: LD_INT 1
70590: PPUSH
70591: LD_VAR 0 2
70595: PPUSH
70596: CALL_OW 12
70600: ARRAY
70601: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70602: LD_VAR 0 1
70606: PPUSH
70607: LD_INT 0
70609: PPUSH
70610: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70614: LD_VAR 0 1
70618: PPUSH
70619: LD_OWVAR 3
70623: PUSH
70624: LD_VAR 0 1
70628: DIFF
70629: PPUSH
70630: LD_VAR 0 1
70634: PPUSH
70635: CALL_OW 74
70639: PPUSH
70640: CALL_OW 115
// wait ( 0 0$20 ) ;
70644: LD_INT 700
70646: PPUSH
70647: CALL_OW 67
// SetSide ( un , your_side ) ;
70651: LD_VAR 0 1
70655: PPUSH
70656: LD_OWVAR 2
70660: PPUSH
70661: CALL_OW 235
// end ;
70665: PPOPN 2
70667: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70668: LD_EXP 51
70672: IFFALSE 70680
70674: PUSH
70675: LD_EXP 84
70679: AND
70680: IFFALSE 70786
70682: GO 70684
70684: DISABLE
70685: LD_INT 0
70687: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70688: LD_ADDR_VAR 0 1
70692: PUSH
70693: LD_INT 22
70695: PUSH
70696: LD_OWVAR 2
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: PUSH
70708: LD_INT 30
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 30
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: LIST
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PPUSH
70737: CALL_OW 69
70741: ST_TO_ADDR
// if not depot then
70742: LD_VAR 0 1
70746: NOT
70747: IFFALSE 70751
// exit ;
70749: GO 70786
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70751: LD_VAR 0 1
70755: PUSH
70756: LD_INT 1
70758: ARRAY
70759: PPUSH
70760: CALL_OW 250
70764: PPUSH
70765: LD_VAR 0 1
70769: PUSH
70770: LD_INT 1
70772: ARRAY
70773: PPUSH
70774: CALL_OW 251
70778: PPUSH
70779: LD_INT 70
70781: PPUSH
70782: CALL_OW 495
// end ;
70786: PPOPN 1
70788: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70789: LD_EXP 51
70793: IFFALSE 70801
70795: PUSH
70796: LD_EXP 85
70800: AND
70801: IFFALSE 71012
70803: GO 70805
70805: DISABLE
70806: LD_INT 0
70808: PPUSH
70809: PPUSH
70810: PPUSH
70811: PPUSH
70812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70813: LD_ADDR_VAR 0 5
70817: PUSH
70818: LD_INT 22
70820: PUSH
70821: LD_OWVAR 2
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 21
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PPUSH
70844: CALL_OW 69
70848: ST_TO_ADDR
// if not tmp then
70849: LD_VAR 0 5
70853: NOT
70854: IFFALSE 70858
// exit ;
70856: GO 71012
// for i in tmp do
70858: LD_ADDR_VAR 0 1
70862: PUSH
70863: LD_VAR 0 5
70867: PUSH
70868: FOR_IN
70869: IFFALSE 71010
// begin d := rand ( 0 , 5 ) ;
70871: LD_ADDR_VAR 0 4
70875: PUSH
70876: LD_INT 0
70878: PPUSH
70879: LD_INT 5
70881: PPUSH
70882: CALL_OW 12
70886: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70887: LD_ADDR_VAR 0 2
70891: PUSH
70892: LD_VAR 0 1
70896: PPUSH
70897: CALL_OW 250
70901: PPUSH
70902: LD_VAR 0 4
70906: PPUSH
70907: LD_INT 3
70909: PPUSH
70910: LD_INT 12
70912: PPUSH
70913: CALL_OW 12
70917: PPUSH
70918: CALL_OW 272
70922: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70923: LD_ADDR_VAR 0 3
70927: PUSH
70928: LD_VAR 0 1
70932: PPUSH
70933: CALL_OW 251
70937: PPUSH
70938: LD_VAR 0 4
70942: PPUSH
70943: LD_INT 3
70945: PPUSH
70946: LD_INT 12
70948: PPUSH
70949: CALL_OW 12
70953: PPUSH
70954: CALL_OW 273
70958: ST_TO_ADDR
// if ValidHex ( x , y ) then
70959: LD_VAR 0 2
70963: PPUSH
70964: LD_VAR 0 3
70968: PPUSH
70969: CALL_OW 488
70973: IFFALSE 71008
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70975: LD_VAR 0 1
70979: PPUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: LD_VAR 0 3
70989: PPUSH
70990: LD_INT 3
70992: PPUSH
70993: LD_INT 6
70995: PPUSH
70996: CALL_OW 12
71000: PPUSH
71001: LD_INT 1
71003: PPUSH
71004: CALL_OW 483
// end ;
71008: GO 70868
71010: POP
71011: POP
// end ;
71012: PPOPN 5
71014: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
71015: LD_EXP 51
71019: IFFALSE 71027
71021: PUSH
71022: LD_EXP 86
71026: AND
71027: IFFALSE 71121
71029: GO 71031
71031: DISABLE
71032: LD_INT 0
71034: PPUSH
71035: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
71036: LD_ADDR_VAR 0 2
71040: PUSH
71041: LD_INT 22
71043: PUSH
71044: LD_OWVAR 2
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 32
71055: PUSH
71056: LD_INT 1
71058: PUSH
71059: EMPTY
71060: LIST
71061: LIST
71062: PUSH
71063: LD_INT 21
71065: PUSH
71066: LD_INT 2
71068: PUSH
71069: EMPTY
71070: LIST
71071: LIST
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: LIST
71077: PPUSH
71078: CALL_OW 69
71082: ST_TO_ADDR
// if not tmp then
71083: LD_VAR 0 2
71087: NOT
71088: IFFALSE 71092
// exit ;
71090: GO 71121
// for i in tmp do
71092: LD_ADDR_VAR 0 1
71096: PUSH
71097: LD_VAR 0 2
71101: PUSH
71102: FOR_IN
71103: IFFALSE 71119
// SetFuel ( i , 0 ) ;
71105: LD_VAR 0 1
71109: PPUSH
71110: LD_INT 0
71112: PPUSH
71113: CALL_OW 240
71117: GO 71102
71119: POP
71120: POP
// end ;
71121: PPOPN 2
71123: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
71124: LD_EXP 51
71128: IFFALSE 71136
71130: PUSH
71131: LD_EXP 87
71135: AND
71136: IFFALSE 71202
71138: GO 71140
71140: DISABLE
71141: LD_INT 0
71143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71144: LD_ADDR_VAR 0 1
71148: PUSH
71149: LD_INT 22
71151: PUSH
71152: LD_OWVAR 2
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: LD_INT 30
71163: PUSH
71164: LD_INT 29
71166: PUSH
71167: EMPTY
71168: LIST
71169: LIST
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PPUSH
71175: CALL_OW 69
71179: ST_TO_ADDR
// if not tmp then
71180: LD_VAR 0 1
71184: NOT
71185: IFFALSE 71189
// exit ;
71187: GO 71202
// DestroyUnit ( tmp [ 1 ] ) ;
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 1
71196: ARRAY
71197: PPUSH
71198: CALL_OW 65
// end ;
71202: PPOPN 1
71204: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
71205: LD_EXP 51
71209: IFFALSE 71217
71211: PUSH
71212: LD_EXP 89
71216: AND
71217: IFFALSE 71346
71219: GO 71221
71221: DISABLE
71222: LD_INT 0
71224: PPUSH
// begin uc_side := 0 ;
71225: LD_ADDR_OWVAR 20
71229: PUSH
71230: LD_INT 0
71232: ST_TO_ADDR
// uc_nation := nation_arabian ;
71233: LD_ADDR_OWVAR 21
71237: PUSH
71238: LD_INT 2
71240: ST_TO_ADDR
// hc_gallery :=  ;
71241: LD_ADDR_OWVAR 33
71245: PUSH
71246: LD_STRING 
71248: ST_TO_ADDR
// hc_name :=  ;
71249: LD_ADDR_OWVAR 26
71253: PUSH
71254: LD_STRING 
71256: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71257: LD_INT 1
71259: PPUSH
71260: LD_INT 11
71262: PPUSH
71263: LD_INT 10
71265: PPUSH
71266: CALL_OW 380
// un := CreateHuman ;
71270: LD_ADDR_VAR 0 1
71274: PUSH
71275: CALL_OW 44
71279: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71280: LD_VAR 0 1
71284: PPUSH
71285: LD_INT 1
71287: PPUSH
71288: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71292: LD_INT 35
71294: PPUSH
71295: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71299: LD_VAR 0 1
71303: PPUSH
71304: LD_INT 22
71306: PUSH
71307: LD_OWVAR 2
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PPUSH
71316: CALL_OW 69
71320: PPUSH
71321: LD_VAR 0 1
71325: PPUSH
71326: CALL_OW 74
71330: PPUSH
71331: CALL_OW 115
// until IsDead ( un ) ;
71335: LD_VAR 0 1
71339: PPUSH
71340: CALL_OW 301
71344: IFFALSE 71292
// end ;
71346: PPOPN 1
71348: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71349: LD_EXP 51
71353: IFFALSE 71361
71355: PUSH
71356: LD_EXP 91
71360: AND
71361: IFFALSE 71373
71363: GO 71365
71365: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71366: LD_STRING earthquake(getX(game), 0, 32)
71368: PPUSH
71369: CALL_OW 559
71373: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71374: LD_EXP 51
71378: IFFALSE 71386
71380: PUSH
71381: LD_EXP 92
71385: AND
71386: IFFALSE 71477
71388: GO 71390
71390: DISABLE
71391: LD_INT 0
71393: PPUSH
// begin enable ;
71394: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71395: LD_ADDR_VAR 0 1
71399: PUSH
71400: LD_INT 22
71402: PUSH
71403: LD_OWVAR 2
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 21
71414: PUSH
71415: LD_INT 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 33
71424: PUSH
71425: LD_INT 3
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: PPUSH
71437: CALL_OW 69
71441: ST_TO_ADDR
// if not tmp then
71442: LD_VAR 0 1
71446: NOT
71447: IFFALSE 71451
// exit ;
71449: GO 71477
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71451: LD_VAR 0 1
71455: PUSH
71456: LD_INT 1
71458: PPUSH
71459: LD_VAR 0 1
71463: PPUSH
71464: CALL_OW 12
71468: ARRAY
71469: PPUSH
71470: LD_INT 1
71472: PPUSH
71473: CALL_OW 234
// end ;
71477: PPOPN 1
71479: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71480: LD_EXP 51
71484: IFFALSE 71492
71486: PUSH
71487: LD_EXP 93
71491: AND
71492: IFFALSE 71633
71494: GO 71496
71496: DISABLE
71497: LD_INT 0
71499: PPUSH
71500: PPUSH
71501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71502: LD_ADDR_VAR 0 3
71506: PUSH
71507: LD_INT 22
71509: PUSH
71510: LD_OWVAR 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 25
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PPUSH
71533: CALL_OW 69
71537: ST_TO_ADDR
// if not tmp then
71538: LD_VAR 0 3
71542: NOT
71543: IFFALSE 71547
// exit ;
71545: GO 71633
// un := tmp [ rand ( 1 , tmp ) ] ;
71547: LD_ADDR_VAR 0 2
71551: PUSH
71552: LD_VAR 0 3
71556: PUSH
71557: LD_INT 1
71559: PPUSH
71560: LD_VAR 0 3
71564: PPUSH
71565: CALL_OW 12
71569: ARRAY
71570: ST_TO_ADDR
// if Crawls ( un ) then
71571: LD_VAR 0 2
71575: PPUSH
71576: CALL_OW 318
71580: IFFALSE 71591
// ComWalk ( un ) ;
71582: LD_VAR 0 2
71586: PPUSH
71587: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71591: LD_VAR 0 2
71595: PPUSH
71596: LD_INT 9
71598: PPUSH
71599: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71603: LD_INT 28
71605: PPUSH
71606: LD_OWVAR 2
71610: PPUSH
71611: LD_INT 2
71613: PPUSH
71614: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71618: LD_INT 29
71620: PPUSH
71621: LD_OWVAR 2
71625: PPUSH
71626: LD_INT 2
71628: PPUSH
71629: CALL_OW 322
// end ;
71633: PPOPN 3
71635: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71636: LD_EXP 51
71640: IFFALSE 71648
71642: PUSH
71643: LD_EXP 94
71647: AND
71648: IFFALSE 71759
71650: GO 71652
71652: DISABLE
71653: LD_INT 0
71655: PPUSH
71656: PPUSH
71657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71658: LD_ADDR_VAR 0 3
71662: PUSH
71663: LD_INT 22
71665: PUSH
71666: LD_OWVAR 2
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 25
71677: PUSH
71678: LD_INT 1
71680: PUSH
71681: EMPTY
71682: LIST
71683: LIST
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PPUSH
71689: CALL_OW 69
71693: ST_TO_ADDR
// if not tmp then
71694: LD_VAR 0 3
71698: NOT
71699: IFFALSE 71703
// exit ;
71701: GO 71759
// un := tmp [ rand ( 1 , tmp ) ] ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: LD_VAR 0 3
71712: PUSH
71713: LD_INT 1
71715: PPUSH
71716: LD_VAR 0 3
71720: PPUSH
71721: CALL_OW 12
71725: ARRAY
71726: ST_TO_ADDR
// if Crawls ( un ) then
71727: LD_VAR 0 2
71731: PPUSH
71732: CALL_OW 318
71736: IFFALSE 71747
// ComWalk ( un ) ;
71738: LD_VAR 0 2
71742: PPUSH
71743: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71747: LD_VAR 0 2
71751: PPUSH
71752: LD_INT 8
71754: PPUSH
71755: CALL_OW 336
// end ;
71759: PPOPN 3
71761: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71762: LD_EXP 51
71766: IFFALSE 71774
71768: PUSH
71769: LD_EXP 95
71773: AND
71774: IFFALSE 71918
71776: GO 71778
71778: DISABLE
71779: LD_INT 0
71781: PPUSH
71782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71783: LD_ADDR_VAR 0 2
71787: PUSH
71788: LD_INT 22
71790: PUSH
71791: LD_OWVAR 2
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 21
71802: PUSH
71803: LD_INT 2
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 2
71812: PUSH
71813: LD_INT 34
71815: PUSH
71816: LD_INT 12
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 34
71825: PUSH
71826: LD_INT 51
71828: PUSH
71829: EMPTY
71830: LIST
71831: LIST
71832: PUSH
71833: LD_INT 34
71835: PUSH
71836: LD_INT 32
71838: PUSH
71839: EMPTY
71840: LIST
71841: LIST
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: LIST
71847: LIST
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: LIST
71853: PPUSH
71854: CALL_OW 69
71858: ST_TO_ADDR
// if not tmp then
71859: LD_VAR 0 2
71863: NOT
71864: IFFALSE 71868
// exit ;
71866: GO 71918
// for i in tmp do
71868: LD_ADDR_VAR 0 1
71872: PUSH
71873: LD_VAR 0 2
71877: PUSH
71878: FOR_IN
71879: IFFALSE 71916
// if GetCargo ( i , mat_artifact ) = 0 then
71881: LD_VAR 0 1
71885: PPUSH
71886: LD_INT 4
71888: PPUSH
71889: CALL_OW 289
71893: PUSH
71894: LD_INT 0
71896: EQUAL
71897: IFFALSE 71914
// SetCargo ( i , mat_siberit , 100 ) ;
71899: LD_VAR 0 1
71903: PPUSH
71904: LD_INT 3
71906: PPUSH
71907: LD_INT 100
71909: PPUSH
71910: CALL_OW 290
71914: GO 71878
71916: POP
71917: POP
// end ;
71918: PPOPN 2
71920: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71921: LD_EXP 51
71925: IFFALSE 71933
71927: PUSH
71928: LD_EXP 96
71932: AND
71933: IFFALSE 72116
71935: GO 71937
71937: DISABLE
71938: LD_INT 0
71940: PPUSH
71941: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71942: LD_ADDR_VAR 0 2
71946: PUSH
71947: LD_INT 22
71949: PUSH
71950: LD_OWVAR 2
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PPUSH
71959: CALL_OW 69
71963: ST_TO_ADDR
// if not tmp then
71964: LD_VAR 0 2
71968: NOT
71969: IFFALSE 71973
// exit ;
71971: GO 72116
// for i := 1 to 2 do
71973: LD_ADDR_VAR 0 1
71977: PUSH
71978: DOUBLE
71979: LD_INT 1
71981: DEC
71982: ST_TO_ADDR
71983: LD_INT 2
71985: PUSH
71986: FOR_TO
71987: IFFALSE 72114
// begin uc_side := your_side ;
71989: LD_ADDR_OWVAR 20
71993: PUSH
71994: LD_OWVAR 2
71998: ST_TO_ADDR
// uc_nation := nation_american ;
71999: LD_ADDR_OWVAR 21
72003: PUSH
72004: LD_INT 1
72006: ST_TO_ADDR
// vc_chassis := us_morphling ;
72007: LD_ADDR_OWVAR 37
72011: PUSH
72012: LD_INT 5
72014: ST_TO_ADDR
// vc_engine := engine_siberite ;
72015: LD_ADDR_OWVAR 39
72019: PUSH
72020: LD_INT 3
72022: ST_TO_ADDR
// vc_control := control_computer ;
72023: LD_ADDR_OWVAR 38
72027: PUSH
72028: LD_INT 3
72030: ST_TO_ADDR
// vc_weapon := us_double_laser ;
72031: LD_ADDR_OWVAR 40
72035: PUSH
72036: LD_INT 10
72038: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
72039: LD_VAR 0 2
72043: PUSH
72044: LD_INT 1
72046: ARRAY
72047: PPUSH
72048: CALL_OW 310
72052: NOT
72053: IFFALSE 72100
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
72055: CALL_OW 45
72059: PPUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_INT 1
72067: ARRAY
72068: PPUSH
72069: CALL_OW 250
72073: PPUSH
72074: LD_VAR 0 2
72078: PUSH
72079: LD_INT 1
72081: ARRAY
72082: PPUSH
72083: CALL_OW 251
72087: PPUSH
72088: LD_INT 12
72090: PPUSH
72091: LD_INT 1
72093: PPUSH
72094: CALL_OW 50
72098: GO 72112
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
72100: CALL_OW 45
72104: PPUSH
72105: LD_INT 1
72107: PPUSH
72108: CALL_OW 51
// end ;
72112: GO 71986
72114: POP
72115: POP
// end ;
72116: PPOPN 2
72118: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
72119: LD_EXP 51
72123: IFFALSE 72131
72125: PUSH
72126: LD_EXP 97
72130: AND
72131: IFFALSE 72353
72133: GO 72135
72135: DISABLE
72136: LD_INT 0
72138: PPUSH
72139: PPUSH
72140: PPUSH
72141: PPUSH
72142: PPUSH
72143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72144: LD_ADDR_VAR 0 6
72148: PUSH
72149: LD_INT 22
72151: PUSH
72152: LD_OWVAR 2
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 21
72163: PUSH
72164: LD_INT 1
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 3
72173: PUSH
72174: LD_INT 23
72176: PUSH
72177: LD_INT 0
72179: PUSH
72180: EMPTY
72181: LIST
72182: LIST
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: PPUSH
72193: CALL_OW 69
72197: ST_TO_ADDR
// if not tmp then
72198: LD_VAR 0 6
72202: NOT
72203: IFFALSE 72207
// exit ;
72205: GO 72353
// s1 := rand ( 1 , 4 ) ;
72207: LD_ADDR_VAR 0 2
72211: PUSH
72212: LD_INT 1
72214: PPUSH
72215: LD_INT 4
72217: PPUSH
72218: CALL_OW 12
72222: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72223: LD_ADDR_VAR 0 4
72227: PUSH
72228: LD_VAR 0 6
72232: PUSH
72233: LD_INT 1
72235: ARRAY
72236: PPUSH
72237: LD_VAR 0 2
72241: PPUSH
72242: CALL_OW 259
72246: ST_TO_ADDR
// if s1 = 1 then
72247: LD_VAR 0 2
72251: PUSH
72252: LD_INT 1
72254: EQUAL
72255: IFFALSE 72275
// s2 := rand ( 2 , 4 ) else
72257: LD_ADDR_VAR 0 3
72261: PUSH
72262: LD_INT 2
72264: PPUSH
72265: LD_INT 4
72267: PPUSH
72268: CALL_OW 12
72272: ST_TO_ADDR
72273: GO 72283
// s2 := 1 ;
72275: LD_ADDR_VAR 0 3
72279: PUSH
72280: LD_INT 1
72282: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72283: LD_ADDR_VAR 0 5
72287: PUSH
72288: LD_VAR 0 6
72292: PUSH
72293: LD_INT 1
72295: ARRAY
72296: PPUSH
72297: LD_VAR 0 3
72301: PPUSH
72302: CALL_OW 259
72306: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72307: LD_VAR 0 6
72311: PUSH
72312: LD_INT 1
72314: ARRAY
72315: PPUSH
72316: LD_VAR 0 2
72320: PPUSH
72321: LD_VAR 0 5
72325: PPUSH
72326: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72330: LD_VAR 0 6
72334: PUSH
72335: LD_INT 1
72337: ARRAY
72338: PPUSH
72339: LD_VAR 0 3
72343: PPUSH
72344: LD_VAR 0 4
72348: PPUSH
72349: CALL_OW 237
// end ;
72353: PPOPN 6
72355: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72356: LD_EXP 51
72360: IFFALSE 72368
72362: PUSH
72363: LD_EXP 98
72367: AND
72368: IFFALSE 72447
72370: GO 72372
72372: DISABLE
72373: LD_INT 0
72375: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72376: LD_ADDR_VAR 0 1
72380: PUSH
72381: LD_INT 22
72383: PUSH
72384: LD_OWVAR 2
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 30
72395: PUSH
72396: LD_INT 3
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PPUSH
72407: CALL_OW 69
72411: ST_TO_ADDR
// if not tmp then
72412: LD_VAR 0 1
72416: NOT
72417: IFFALSE 72421
// exit ;
72419: GO 72447
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72421: LD_VAR 0 1
72425: PUSH
72426: LD_INT 1
72428: PPUSH
72429: LD_VAR 0 1
72433: PPUSH
72434: CALL_OW 12
72438: ARRAY
72439: PPUSH
72440: LD_INT 1
72442: PPUSH
72443: CALL_OW 234
// end ;
72447: PPOPN 1
72449: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72450: LD_EXP 51
72454: IFFALSE 72462
72456: PUSH
72457: LD_EXP 99
72461: AND
72462: IFFALSE 72574
72464: GO 72466
72466: DISABLE
72467: LD_INT 0
72469: PPUSH
72470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72471: LD_ADDR_VAR 0 2
72475: PUSH
72476: LD_INT 22
72478: PUSH
72479: LD_OWVAR 2
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 2
72490: PUSH
72491: LD_INT 30
72493: PUSH
72494: LD_INT 27
72496: PUSH
72497: EMPTY
72498: LIST
72499: LIST
72500: PUSH
72501: LD_INT 30
72503: PUSH
72504: LD_INT 26
72506: PUSH
72507: EMPTY
72508: LIST
72509: LIST
72510: PUSH
72511: LD_INT 30
72513: PUSH
72514: LD_INT 28
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: EMPTY
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PPUSH
72531: CALL_OW 69
72535: ST_TO_ADDR
// if not tmp then
72536: LD_VAR 0 2
72540: NOT
72541: IFFALSE 72545
// exit ;
72543: GO 72574
// for i in tmp do
72545: LD_ADDR_VAR 0 1
72549: PUSH
72550: LD_VAR 0 2
72554: PUSH
72555: FOR_IN
72556: IFFALSE 72572
// SetLives ( i , 1 ) ;
72558: LD_VAR 0 1
72562: PPUSH
72563: LD_INT 1
72565: PPUSH
72566: CALL_OW 234
72570: GO 72555
72572: POP
72573: POP
// end ;
72574: PPOPN 2
72576: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72577: LD_EXP 51
72581: IFFALSE 72589
72583: PUSH
72584: LD_EXP 100
72588: AND
72589: IFFALSE 72876
72591: GO 72593
72593: DISABLE
72594: LD_INT 0
72596: PPUSH
72597: PPUSH
72598: PPUSH
// begin i := rand ( 1 , 7 ) ;
72599: LD_ADDR_VAR 0 1
72603: PUSH
72604: LD_INT 1
72606: PPUSH
72607: LD_INT 7
72609: PPUSH
72610: CALL_OW 12
72614: ST_TO_ADDR
// case i of 1 :
72615: LD_VAR 0 1
72619: PUSH
72620: LD_INT 1
72622: DOUBLE
72623: EQUAL
72624: IFTRUE 72628
72626: GO 72638
72628: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72629: LD_STRING earthquake(getX(game), 0, 32)
72631: PPUSH
72632: CALL_OW 559
72636: GO 72876
72638: LD_INT 2
72640: DOUBLE
72641: EQUAL
72642: IFTRUE 72646
72644: GO 72660
72646: POP
// begin ToLua ( displayStucuk(); ) ;
72647: LD_STRING displayStucuk();
72649: PPUSH
72650: CALL_OW 559
// ResetFog ;
72654: CALL_OW 335
// end ; 3 :
72658: GO 72876
72660: LD_INT 3
72662: DOUBLE
72663: EQUAL
72664: IFTRUE 72668
72666: GO 72772
72668: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72669: LD_ADDR_VAR 0 2
72673: PUSH
72674: LD_INT 22
72676: PUSH
72677: LD_OWVAR 2
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 25
72688: PUSH
72689: LD_INT 1
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PPUSH
72700: CALL_OW 69
72704: ST_TO_ADDR
// if not tmp then
72705: LD_VAR 0 2
72709: NOT
72710: IFFALSE 72714
// exit ;
72712: GO 72876
// un := tmp [ rand ( 1 , tmp ) ] ;
72714: LD_ADDR_VAR 0 3
72718: PUSH
72719: LD_VAR 0 2
72723: PUSH
72724: LD_INT 1
72726: PPUSH
72727: LD_VAR 0 2
72731: PPUSH
72732: CALL_OW 12
72736: ARRAY
72737: ST_TO_ADDR
// if Crawls ( un ) then
72738: LD_VAR 0 3
72742: PPUSH
72743: CALL_OW 318
72747: IFFALSE 72758
// ComWalk ( un ) ;
72749: LD_VAR 0 3
72753: PPUSH
72754: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72758: LD_VAR 0 3
72762: PPUSH
72763: LD_INT 8
72765: PPUSH
72766: CALL_OW 336
// end ; 4 :
72770: GO 72876
72772: LD_INT 4
72774: DOUBLE
72775: EQUAL
72776: IFTRUE 72780
72778: GO 72854
72780: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72781: LD_ADDR_VAR 0 2
72785: PUSH
72786: LD_INT 22
72788: PUSH
72789: LD_OWVAR 2
72793: PUSH
72794: EMPTY
72795: LIST
72796: LIST
72797: PUSH
72798: LD_INT 30
72800: PUSH
72801: LD_INT 29
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: EMPTY
72809: LIST
72810: LIST
72811: PPUSH
72812: CALL_OW 69
72816: ST_TO_ADDR
// if not tmp then
72817: LD_VAR 0 2
72821: NOT
72822: IFFALSE 72826
// exit ;
72824: GO 72876
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72826: LD_VAR 0 2
72830: PUSH
72831: LD_INT 1
72833: ARRAY
72834: PPUSH
72835: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72839: LD_VAR 0 2
72843: PUSH
72844: LD_INT 1
72846: ARRAY
72847: PPUSH
72848: CALL_OW 65
// end ; 5 .. 7 :
72852: GO 72876
72854: LD_INT 5
72856: DOUBLE
72857: GREATEREQUAL
72858: IFFALSE 72866
72860: LD_INT 7
72862: DOUBLE
72863: LESSEQUAL
72864: IFTRUE 72868
72866: GO 72875
72868: POP
// StreamSibBomb ; end ;
72869: CALL 69057 0 0
72873: GO 72876
72875: POP
// end ;
72876: PPOPN 3
72878: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72879: LD_EXP 51
72883: IFFALSE 72891
72885: PUSH
72886: LD_EXP 101
72890: AND
72891: IFFALSE 73047
72893: GO 72895
72895: DISABLE
72896: LD_INT 0
72898: PPUSH
72899: PPUSH
72900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72901: LD_ADDR_VAR 0 2
72905: PUSH
72906: LD_INT 81
72908: PUSH
72909: LD_OWVAR 2
72913: PUSH
72914: EMPTY
72915: LIST
72916: LIST
72917: PUSH
72918: LD_INT 2
72920: PUSH
72921: LD_INT 21
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 21
72933: PUSH
72934: LD_INT 2
72936: PUSH
72937: EMPTY
72938: LIST
72939: LIST
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: LIST
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PPUSH
72950: CALL_OW 69
72954: ST_TO_ADDR
// if not tmp then
72955: LD_VAR 0 2
72959: NOT
72960: IFFALSE 72964
// exit ;
72962: GO 73047
// p := 0 ;
72964: LD_ADDR_VAR 0 3
72968: PUSH
72969: LD_INT 0
72971: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72972: LD_INT 35
72974: PPUSH
72975: CALL_OW 67
// p := p + 1 ;
72979: LD_ADDR_VAR 0 3
72983: PUSH
72984: LD_VAR 0 3
72988: PUSH
72989: LD_INT 1
72991: PLUS
72992: ST_TO_ADDR
// for i in tmp do
72993: LD_ADDR_VAR 0 1
72997: PUSH
72998: LD_VAR 0 2
73002: PUSH
73003: FOR_IN
73004: IFFALSE 73035
// if GetLives ( i ) < 1000 then
73006: LD_VAR 0 1
73010: PPUSH
73011: CALL_OW 256
73015: PUSH
73016: LD_INT 1000
73018: LESS
73019: IFFALSE 73033
// SetLives ( i , 1000 ) ;
73021: LD_VAR 0 1
73025: PPUSH
73026: LD_INT 1000
73028: PPUSH
73029: CALL_OW 234
73033: GO 73003
73035: POP
73036: POP
// until p > 20 ;
73037: LD_VAR 0 3
73041: PUSH
73042: LD_INT 20
73044: GREATER
73045: IFFALSE 72972
// end ;
73047: PPOPN 3
73049: END
// every 0 0$1 trigger StreamModeActive and sTime do
73050: LD_EXP 51
73054: IFFALSE 73062
73056: PUSH
73057: LD_EXP 102
73061: AND
73062: IFFALSE 73097
73064: GO 73066
73066: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
73067: LD_INT 28
73069: PPUSH
73070: LD_OWVAR 2
73074: PPUSH
73075: LD_INT 2
73077: PPUSH
73078: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
73082: LD_INT 30
73084: PPUSH
73085: LD_OWVAR 2
73089: PPUSH
73090: LD_INT 2
73092: PPUSH
73093: CALL_OW 322
// end ;
73097: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
73098: LD_EXP 51
73102: IFFALSE 73110
73104: PUSH
73105: LD_EXP 103
73109: AND
73110: IFFALSE 73231
73112: GO 73114
73114: DISABLE
73115: LD_INT 0
73117: PPUSH
73118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
73119: LD_ADDR_VAR 0 2
73123: PUSH
73124: LD_INT 22
73126: PUSH
73127: LD_OWVAR 2
73131: PUSH
73132: EMPTY
73133: LIST
73134: LIST
73135: PUSH
73136: LD_INT 21
73138: PUSH
73139: LD_INT 1
73141: PUSH
73142: EMPTY
73143: LIST
73144: LIST
73145: PUSH
73146: LD_INT 3
73148: PUSH
73149: LD_INT 23
73151: PUSH
73152: LD_INT 0
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: PPUSH
73168: CALL_OW 69
73172: ST_TO_ADDR
// if not tmp then
73173: LD_VAR 0 2
73177: NOT
73178: IFFALSE 73182
// exit ;
73180: GO 73231
// for i in tmp do
73182: LD_ADDR_VAR 0 1
73186: PUSH
73187: LD_VAR 0 2
73191: PUSH
73192: FOR_IN
73193: IFFALSE 73229
// begin if Crawls ( i ) then
73195: LD_VAR 0 1
73199: PPUSH
73200: CALL_OW 318
73204: IFFALSE 73215
// ComWalk ( i ) ;
73206: LD_VAR 0 1
73210: PPUSH
73211: CALL_OW 138
// SetClass ( i , 2 ) ;
73215: LD_VAR 0 1
73219: PPUSH
73220: LD_INT 2
73222: PPUSH
73223: CALL_OW 336
// end ;
73227: GO 73192
73229: POP
73230: POP
// end ;
73231: PPOPN 2
73233: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73234: LD_EXP 51
73238: IFFALSE 73246
73240: PUSH
73241: LD_EXP 104
73245: AND
73246: IFFALSE 73536
73248: GO 73250
73250: DISABLE
73251: LD_INT 0
73253: PPUSH
73254: PPUSH
73255: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73256: LD_OWVAR 2
73260: PPUSH
73261: LD_INT 9
73263: PPUSH
73264: LD_INT 1
73266: PPUSH
73267: LD_INT 1
73269: PPUSH
73270: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73274: LD_INT 9
73276: PPUSH
73277: LD_OWVAR 2
73281: PPUSH
73282: CALL_OW 343
// uc_side := 9 ;
73286: LD_ADDR_OWVAR 20
73290: PUSH
73291: LD_INT 9
73293: ST_TO_ADDR
// uc_nation := 2 ;
73294: LD_ADDR_OWVAR 21
73298: PUSH
73299: LD_INT 2
73301: ST_TO_ADDR
// hc_name := Dark Warrior ;
73302: LD_ADDR_OWVAR 26
73306: PUSH
73307: LD_STRING Dark Warrior
73309: ST_TO_ADDR
// hc_gallery :=  ;
73310: LD_ADDR_OWVAR 33
73314: PUSH
73315: LD_STRING 
73317: ST_TO_ADDR
// hc_noskilllimit := true ;
73318: LD_ADDR_OWVAR 76
73322: PUSH
73323: LD_INT 1
73325: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73326: LD_ADDR_OWVAR 31
73330: PUSH
73331: LD_INT 30
73333: PUSH
73334: LD_INT 30
73336: PUSH
73337: LD_INT 30
73339: PUSH
73340: LD_INT 30
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: ST_TO_ADDR
// un := CreateHuman ;
73349: LD_ADDR_VAR 0 3
73353: PUSH
73354: CALL_OW 44
73358: ST_TO_ADDR
// hc_noskilllimit := false ;
73359: LD_ADDR_OWVAR 76
73363: PUSH
73364: LD_INT 0
73366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73367: LD_VAR 0 3
73371: PPUSH
73372: LD_INT 1
73374: PPUSH
73375: CALL_OW 51
// ToLua ( playRanger() ) ;
73379: LD_STRING playRanger()
73381: PPUSH
73382: CALL_OW 559
// p := 0 ;
73386: LD_ADDR_VAR 0 2
73390: PUSH
73391: LD_INT 0
73393: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73394: LD_INT 35
73396: PPUSH
73397: CALL_OW 67
// p := p + 1 ;
73401: LD_ADDR_VAR 0 2
73405: PUSH
73406: LD_VAR 0 2
73410: PUSH
73411: LD_INT 1
73413: PLUS
73414: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73415: LD_VAR 0 3
73419: PPUSH
73420: CALL_OW 256
73424: PUSH
73425: LD_INT 1000
73427: LESS
73428: IFFALSE 73442
// SetLives ( un , 1000 ) ;
73430: LD_VAR 0 3
73434: PPUSH
73435: LD_INT 1000
73437: PPUSH
73438: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73442: LD_VAR 0 3
73446: PPUSH
73447: LD_INT 81
73449: PUSH
73450: LD_OWVAR 2
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 91
73461: PUSH
73462: LD_VAR 0 3
73466: PUSH
73467: LD_INT 30
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: LIST
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PPUSH
73479: CALL_OW 69
73483: PPUSH
73484: LD_VAR 0 3
73488: PPUSH
73489: CALL_OW 74
73493: PPUSH
73494: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73498: LD_VAR 0 2
73502: PUSH
73503: LD_INT 80
73505: GREATER
73506: IFTRUE 73519
73508: PUSH
73509: LD_VAR 0 3
73513: PPUSH
73514: CALL_OW 301
73518: OR
73519: IFFALSE 73394
// if un then
73521: LD_VAR 0 3
73525: IFFALSE 73536
// RemoveUnit ( un ) ;
73527: LD_VAR 0 3
73531: PPUSH
73532: CALL_OW 64
// end ;
73536: PPOPN 3
73538: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73539: LD_EXP 105
73543: IFFALSE 73659
73545: GO 73547
73547: DISABLE
73548: LD_INT 0
73550: PPUSH
73551: PPUSH
73552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73553: LD_ADDR_VAR 0 2
73557: PUSH
73558: LD_INT 81
73560: PUSH
73561: LD_OWVAR 2
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 21
73572: PUSH
73573: LD_INT 1
73575: PUSH
73576: EMPTY
73577: LIST
73578: LIST
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PPUSH
73584: CALL_OW 69
73588: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73589: LD_STRING playComputer()
73591: PPUSH
73592: CALL_OW 559
// if not tmp then
73596: LD_VAR 0 2
73600: NOT
73601: IFFALSE 73605
// exit ;
73603: GO 73659
// for i in tmp do
73605: LD_ADDR_VAR 0 1
73609: PUSH
73610: LD_VAR 0 2
73614: PUSH
73615: FOR_IN
73616: IFFALSE 73657
// for j := 1 to 4 do
73618: LD_ADDR_VAR 0 3
73622: PUSH
73623: DOUBLE
73624: LD_INT 1
73626: DEC
73627: ST_TO_ADDR
73628: LD_INT 4
73630: PUSH
73631: FOR_TO
73632: IFFALSE 73653
// SetSkill ( i , j , 10 ) ;
73634: LD_VAR 0 1
73638: PPUSH
73639: LD_VAR 0 3
73643: PPUSH
73644: LD_INT 10
73646: PPUSH
73647: CALL_OW 237
73651: GO 73631
73653: POP
73654: POP
73655: GO 73615
73657: POP
73658: POP
// end ;
73659: PPOPN 3
73661: END
// every 0 0$1 trigger s30 do var i , tmp ;
73662: LD_EXP 106
73666: IFFALSE 73735
73668: GO 73670
73670: DISABLE
73671: LD_INT 0
73673: PPUSH
73674: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73675: LD_ADDR_VAR 0 2
73679: PUSH
73680: LD_INT 22
73682: PUSH
73683: LD_OWVAR 2
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PPUSH
73692: CALL_OW 69
73696: ST_TO_ADDR
// if not tmp then
73697: LD_VAR 0 2
73701: NOT
73702: IFFALSE 73706
// exit ;
73704: GO 73735
// for i in tmp do
73706: LD_ADDR_VAR 0 1
73710: PUSH
73711: LD_VAR 0 2
73715: PUSH
73716: FOR_IN
73717: IFFALSE 73733
// SetLives ( i , 300 ) ;
73719: LD_VAR 0 1
73723: PPUSH
73724: LD_INT 300
73726: PPUSH
73727: CALL_OW 234
73731: GO 73716
73733: POP
73734: POP
// end ;
73735: PPOPN 2
73737: END
// every 0 0$1 trigger s60 do var i , tmp ;
73738: LD_EXP 107
73742: IFFALSE 73811
73744: GO 73746
73746: DISABLE
73747: LD_INT 0
73749: PPUSH
73750: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73751: LD_ADDR_VAR 0 2
73755: PUSH
73756: LD_INT 22
73758: PUSH
73759: LD_OWVAR 2
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PPUSH
73768: CALL_OW 69
73772: ST_TO_ADDR
// if not tmp then
73773: LD_VAR 0 2
73777: NOT
73778: IFFALSE 73782
// exit ;
73780: GO 73811
// for i in tmp do
73782: LD_ADDR_VAR 0 1
73786: PUSH
73787: LD_VAR 0 2
73791: PUSH
73792: FOR_IN
73793: IFFALSE 73809
// SetLives ( i , 600 ) ;
73795: LD_VAR 0 1
73799: PPUSH
73800: LD_INT 600
73802: PPUSH
73803: CALL_OW 234
73807: GO 73792
73809: POP
73810: POP
// end ;
73811: PPOPN 2
73813: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73814: LD_INT 0
73816: PPUSH
// case cmd of 301 :
73817: LD_VAR 0 1
73821: PUSH
73822: LD_INT 301
73824: DOUBLE
73825: EQUAL
73826: IFTRUE 73830
73828: GO 73862
73830: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73831: LD_VAR 0 6
73835: PPUSH
73836: LD_VAR 0 7
73840: PPUSH
73841: LD_VAR 0 8
73845: PPUSH
73846: LD_VAR 0 4
73850: PPUSH
73851: LD_VAR 0 5
73855: PPUSH
73856: CALL 75075 0 5
73860: GO 73983
73862: LD_INT 302
73864: DOUBLE
73865: EQUAL
73866: IFTRUE 73870
73868: GO 73907
73870: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73871: LD_VAR 0 6
73875: PPUSH
73876: LD_VAR 0 7
73880: PPUSH
73881: LD_VAR 0 8
73885: PPUSH
73886: LD_VAR 0 9
73890: PPUSH
73891: LD_VAR 0 4
73895: PPUSH
73896: LD_VAR 0 5
73900: PPUSH
73901: CALL 75166 0 6
73905: GO 73983
73907: LD_INT 303
73909: DOUBLE
73910: EQUAL
73911: IFTRUE 73915
73913: GO 73952
73915: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73916: LD_VAR 0 6
73920: PPUSH
73921: LD_VAR 0 7
73925: PPUSH
73926: LD_VAR 0 8
73930: PPUSH
73931: LD_VAR 0 9
73935: PPUSH
73936: LD_VAR 0 4
73940: PPUSH
73941: LD_VAR 0 5
73945: PPUSH
73946: CALL 73988 0 6
73950: GO 73983
73952: LD_INT 304
73954: DOUBLE
73955: EQUAL
73956: IFTRUE 73960
73958: GO 73982
73960: POP
// hHackTeleport ( unit , x , y ) ; end ;
73961: LD_VAR 0 2
73965: PPUSH
73966: LD_VAR 0 4
73970: PPUSH
73971: LD_VAR 0 5
73975: PPUSH
73976: CALL 75759 0 3
73980: GO 73983
73982: POP
// end ;
73983: LD_VAR 0 12
73987: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73988: LD_INT 0
73990: PPUSH
73991: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73992: LD_VAR 0 1
73996: PUSH
73997: LD_INT 1
73999: LESS
74000: IFTRUE 74012
74002: PUSH
74003: LD_VAR 0 1
74007: PUSH
74008: LD_INT 3
74010: GREATER
74011: OR
74012: IFTRUE 74030
74014: PUSH
74015: LD_VAR 0 5
74019: PPUSH
74020: LD_VAR 0 6
74024: PPUSH
74025: CALL_OW 428
74029: OR
74030: IFFALSE 74034
// exit ;
74032: GO 74762
// uc_side := your_side ;
74034: LD_ADDR_OWVAR 20
74038: PUSH
74039: LD_OWVAR 2
74043: ST_TO_ADDR
// uc_nation := nation ;
74044: LD_ADDR_OWVAR 21
74048: PUSH
74049: LD_VAR 0 1
74053: ST_TO_ADDR
// bc_level = 1 ;
74054: LD_ADDR_OWVAR 43
74058: PUSH
74059: LD_INT 1
74061: ST_TO_ADDR
// case btype of 1 :
74062: LD_VAR 0 2
74066: PUSH
74067: LD_INT 1
74069: DOUBLE
74070: EQUAL
74071: IFTRUE 74075
74073: GO 74086
74075: POP
// bc_type := b_depot ; 2 :
74076: LD_ADDR_OWVAR 42
74080: PUSH
74081: LD_INT 0
74083: ST_TO_ADDR
74084: GO 74706
74086: LD_INT 2
74088: DOUBLE
74089: EQUAL
74090: IFTRUE 74094
74092: GO 74105
74094: POP
// bc_type := b_warehouse ; 3 :
74095: LD_ADDR_OWVAR 42
74099: PUSH
74100: LD_INT 1
74102: ST_TO_ADDR
74103: GO 74706
74105: LD_INT 3
74107: DOUBLE
74108: EQUAL
74109: IFTRUE 74113
74111: GO 74124
74113: POP
// bc_type := b_lab ; 4 .. 9 :
74114: LD_ADDR_OWVAR 42
74118: PUSH
74119: LD_INT 6
74121: ST_TO_ADDR
74122: GO 74706
74124: LD_INT 4
74126: DOUBLE
74127: GREATEREQUAL
74128: IFFALSE 74136
74130: LD_INT 9
74132: DOUBLE
74133: LESSEQUAL
74134: IFTRUE 74138
74136: GO 74198
74138: POP
// begin bc_type := b_lab_half ;
74139: LD_ADDR_OWVAR 42
74143: PUSH
74144: LD_INT 7
74146: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
74147: LD_ADDR_OWVAR 44
74151: PUSH
74152: LD_INT 10
74154: PUSH
74155: LD_INT 11
74157: PUSH
74158: LD_INT 12
74160: PUSH
74161: LD_INT 15
74163: PUSH
74164: LD_INT 14
74166: PUSH
74167: LD_INT 13
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: LD_VAR 0 2
74182: PUSH
74183: LD_INT 3
74185: MINUS
74186: ARRAY
74187: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
74188: LD_ADDR_OWVAR 45
74192: PUSH
74193: LD_INT 9
74195: ST_TO_ADDR
// end ; 10 .. 13 :
74196: GO 74706
74198: LD_INT 10
74200: DOUBLE
74201: GREATEREQUAL
74202: IFFALSE 74210
74204: LD_INT 13
74206: DOUBLE
74207: LESSEQUAL
74208: IFTRUE 74212
74210: GO 74289
74212: POP
// begin bc_type := b_lab_full ;
74213: LD_ADDR_OWVAR 42
74217: PUSH
74218: LD_INT 8
74220: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74221: LD_ADDR_OWVAR 44
74225: PUSH
74226: LD_INT 10
74228: PUSH
74229: LD_INT 12
74231: PUSH
74232: LD_INT 14
74234: PUSH
74235: LD_INT 13
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: PUSH
74244: LD_VAR 0 2
74248: PUSH
74249: LD_INT 9
74251: MINUS
74252: ARRAY
74253: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74254: LD_ADDR_OWVAR 45
74258: PUSH
74259: LD_INT 11
74261: PUSH
74262: LD_INT 15
74264: PUSH
74265: LD_INT 12
74267: PUSH
74268: LD_INT 15
74270: PUSH
74271: EMPTY
74272: LIST
74273: LIST
74274: LIST
74275: LIST
74276: PUSH
74277: LD_VAR 0 2
74281: PUSH
74282: LD_INT 9
74284: MINUS
74285: ARRAY
74286: ST_TO_ADDR
// end ; 14 :
74287: GO 74706
74289: LD_INT 14
74291: DOUBLE
74292: EQUAL
74293: IFTRUE 74297
74295: GO 74308
74297: POP
// bc_type := b_workshop ; 15 :
74298: LD_ADDR_OWVAR 42
74302: PUSH
74303: LD_INT 2
74305: ST_TO_ADDR
74306: GO 74706
74308: LD_INT 15
74310: DOUBLE
74311: EQUAL
74312: IFTRUE 74316
74314: GO 74327
74316: POP
// bc_type := b_factory ; 16 :
74317: LD_ADDR_OWVAR 42
74321: PUSH
74322: LD_INT 3
74324: ST_TO_ADDR
74325: GO 74706
74327: LD_INT 16
74329: DOUBLE
74330: EQUAL
74331: IFTRUE 74335
74333: GO 74346
74335: POP
// bc_type := b_ext_gun ; 17 :
74336: LD_ADDR_OWVAR 42
74340: PUSH
74341: LD_INT 17
74343: ST_TO_ADDR
74344: GO 74706
74346: LD_INT 17
74348: DOUBLE
74349: EQUAL
74350: IFTRUE 74354
74352: GO 74382
74354: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74355: LD_ADDR_OWVAR 42
74359: PUSH
74360: LD_INT 19
74362: PUSH
74363: LD_INT 23
74365: PUSH
74366: LD_INT 19
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: LIST
74373: PUSH
74374: LD_VAR 0 1
74378: ARRAY
74379: ST_TO_ADDR
74380: GO 74706
74382: LD_INT 18
74384: DOUBLE
74385: EQUAL
74386: IFTRUE 74390
74388: GO 74401
74390: POP
// bc_type := b_ext_radar ; 19 :
74391: LD_ADDR_OWVAR 42
74395: PUSH
74396: LD_INT 20
74398: ST_TO_ADDR
74399: GO 74706
74401: LD_INT 19
74403: DOUBLE
74404: EQUAL
74405: IFTRUE 74409
74407: GO 74420
74409: POP
// bc_type := b_ext_radio ; 20 :
74410: LD_ADDR_OWVAR 42
74414: PUSH
74415: LD_INT 22
74417: ST_TO_ADDR
74418: GO 74706
74420: LD_INT 20
74422: DOUBLE
74423: EQUAL
74424: IFTRUE 74428
74426: GO 74439
74428: POP
// bc_type := b_ext_siberium ; 21 :
74429: LD_ADDR_OWVAR 42
74433: PUSH
74434: LD_INT 21
74436: ST_TO_ADDR
74437: GO 74706
74439: LD_INT 21
74441: DOUBLE
74442: EQUAL
74443: IFTRUE 74447
74445: GO 74458
74447: POP
// bc_type := b_ext_computer ; 22 :
74448: LD_ADDR_OWVAR 42
74452: PUSH
74453: LD_INT 24
74455: ST_TO_ADDR
74456: GO 74706
74458: LD_INT 22
74460: DOUBLE
74461: EQUAL
74462: IFTRUE 74466
74464: GO 74477
74466: POP
// bc_type := b_ext_track ; 23 :
74467: LD_ADDR_OWVAR 42
74471: PUSH
74472: LD_INT 16
74474: ST_TO_ADDR
74475: GO 74706
74477: LD_INT 23
74479: DOUBLE
74480: EQUAL
74481: IFTRUE 74485
74483: GO 74496
74485: POP
// bc_type := b_ext_laser ; 24 :
74486: LD_ADDR_OWVAR 42
74490: PUSH
74491: LD_INT 25
74493: ST_TO_ADDR
74494: GO 74706
74496: LD_INT 24
74498: DOUBLE
74499: EQUAL
74500: IFTRUE 74504
74502: GO 74515
74504: POP
// bc_type := b_control_tower ; 25 :
74505: LD_ADDR_OWVAR 42
74509: PUSH
74510: LD_INT 36
74512: ST_TO_ADDR
74513: GO 74706
74515: LD_INT 25
74517: DOUBLE
74518: EQUAL
74519: IFTRUE 74523
74521: GO 74534
74523: POP
// bc_type := b_breastwork ; 26 :
74524: LD_ADDR_OWVAR 42
74528: PUSH
74529: LD_INT 31
74531: ST_TO_ADDR
74532: GO 74706
74534: LD_INT 26
74536: DOUBLE
74537: EQUAL
74538: IFTRUE 74542
74540: GO 74553
74542: POP
// bc_type := b_bunker ; 27 :
74543: LD_ADDR_OWVAR 42
74547: PUSH
74548: LD_INT 32
74550: ST_TO_ADDR
74551: GO 74706
74553: LD_INT 27
74555: DOUBLE
74556: EQUAL
74557: IFTRUE 74561
74559: GO 74572
74561: POP
// bc_type := b_turret ; 28 :
74562: LD_ADDR_OWVAR 42
74566: PUSH
74567: LD_INT 33
74569: ST_TO_ADDR
74570: GO 74706
74572: LD_INT 28
74574: DOUBLE
74575: EQUAL
74576: IFTRUE 74580
74578: GO 74591
74580: POP
// bc_type := b_armoury ; 29 :
74581: LD_ADDR_OWVAR 42
74585: PUSH
74586: LD_INT 4
74588: ST_TO_ADDR
74589: GO 74706
74591: LD_INT 29
74593: DOUBLE
74594: EQUAL
74595: IFTRUE 74599
74597: GO 74610
74599: POP
// bc_type := b_barracks ; 30 :
74600: LD_ADDR_OWVAR 42
74604: PUSH
74605: LD_INT 5
74607: ST_TO_ADDR
74608: GO 74706
74610: LD_INT 30
74612: DOUBLE
74613: EQUAL
74614: IFTRUE 74618
74616: GO 74629
74618: POP
// bc_type := b_solar_power ; 31 :
74619: LD_ADDR_OWVAR 42
74623: PUSH
74624: LD_INT 27
74626: ST_TO_ADDR
74627: GO 74706
74629: LD_INT 31
74631: DOUBLE
74632: EQUAL
74633: IFTRUE 74637
74635: GO 74648
74637: POP
// bc_type := b_oil_power ; 32 :
74638: LD_ADDR_OWVAR 42
74642: PUSH
74643: LD_INT 26
74645: ST_TO_ADDR
74646: GO 74706
74648: LD_INT 32
74650: DOUBLE
74651: EQUAL
74652: IFTRUE 74656
74654: GO 74667
74656: POP
// bc_type := b_siberite_power ; 33 :
74657: LD_ADDR_OWVAR 42
74661: PUSH
74662: LD_INT 28
74664: ST_TO_ADDR
74665: GO 74706
74667: LD_INT 33
74669: DOUBLE
74670: EQUAL
74671: IFTRUE 74675
74673: GO 74686
74675: POP
// bc_type := b_oil_mine ; 34 :
74676: LD_ADDR_OWVAR 42
74680: PUSH
74681: LD_INT 29
74683: ST_TO_ADDR
74684: GO 74706
74686: LD_INT 34
74688: DOUBLE
74689: EQUAL
74690: IFTRUE 74694
74692: GO 74705
74694: POP
// bc_type := b_siberite_mine ; end ;
74695: LD_ADDR_OWVAR 42
74699: PUSH
74700: LD_INT 30
74702: ST_TO_ADDR
74703: GO 74706
74705: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74706: LD_ADDR_VAR 0 8
74710: PUSH
74711: LD_VAR 0 5
74715: PPUSH
74716: LD_VAR 0 6
74720: PPUSH
74721: LD_VAR 0 3
74725: PPUSH
74726: CALL_OW 47
74730: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74731: LD_OWVAR 42
74735: PUSH
74736: LD_INT 32
74738: PUSH
74739: LD_INT 33
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: IN
74746: IFFALSE 74762
// PlaceWeaponTurret ( b , weapon ) ;
74748: LD_VAR 0 8
74752: PPUSH
74753: LD_VAR 0 4
74757: PPUSH
74758: CALL_OW 431
// end ;
74762: LD_VAR 0 7
74766: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74767: LD_INT 0
74769: PPUSH
74770: PPUSH
74771: PPUSH
74772: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74773: LD_ADDR_VAR 0 4
74777: PUSH
74778: LD_INT 22
74780: PUSH
74781: LD_OWVAR 2
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: PUSH
74790: LD_INT 2
74792: PUSH
74793: LD_INT 30
74795: PUSH
74796: LD_INT 0
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 30
74805: PUSH
74806: LD_INT 1
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: LIST
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PPUSH
74822: CALL_OW 69
74826: ST_TO_ADDR
// if not tmp then
74827: LD_VAR 0 4
74831: NOT
74832: IFFALSE 74836
// exit ;
74834: GO 74895
// for i in tmp do
74836: LD_ADDR_VAR 0 2
74840: PUSH
74841: LD_VAR 0 4
74845: PUSH
74846: FOR_IN
74847: IFFALSE 74893
// for j = 1 to 3 do
74849: LD_ADDR_VAR 0 3
74853: PUSH
74854: DOUBLE
74855: LD_INT 1
74857: DEC
74858: ST_TO_ADDR
74859: LD_INT 3
74861: PUSH
74862: FOR_TO
74863: IFFALSE 74889
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74865: LD_VAR 0 2
74869: PPUSH
74870: CALL_OW 274
74874: PPUSH
74875: LD_VAR 0 3
74879: PPUSH
74880: LD_INT 99999
74882: PPUSH
74883: CALL_OW 277
74887: GO 74862
74889: POP
74890: POP
74891: GO 74846
74893: POP
74894: POP
// end ;
74895: LD_VAR 0 1
74899: RET
// export function hHackSetLevel10 ; var i , j ; begin
74900: LD_INT 0
74902: PPUSH
74903: PPUSH
74904: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74905: LD_ADDR_VAR 0 2
74909: PUSH
74910: LD_INT 21
74912: PUSH
74913: LD_INT 1
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PPUSH
74920: CALL_OW 69
74924: PUSH
74925: FOR_IN
74926: IFFALSE 74978
// if IsSelected ( i ) then
74928: LD_VAR 0 2
74932: PPUSH
74933: CALL_OW 306
74937: IFFALSE 74976
// begin for j := 1 to 4 do
74939: LD_ADDR_VAR 0 3
74943: PUSH
74944: DOUBLE
74945: LD_INT 1
74947: DEC
74948: ST_TO_ADDR
74949: LD_INT 4
74951: PUSH
74952: FOR_TO
74953: IFFALSE 74974
// SetSkill ( i , j , 10 ) ;
74955: LD_VAR 0 2
74959: PPUSH
74960: LD_VAR 0 3
74964: PPUSH
74965: LD_INT 10
74967: PPUSH
74968: CALL_OW 237
74972: GO 74952
74974: POP
74975: POP
// end ;
74976: GO 74925
74978: POP
74979: POP
// end ;
74980: LD_VAR 0 1
74984: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74985: LD_INT 0
74987: PPUSH
74988: PPUSH
74989: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74990: LD_ADDR_VAR 0 2
74994: PUSH
74995: LD_INT 22
74997: PUSH
74998: LD_OWVAR 2
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 21
75009: PUSH
75010: LD_INT 1
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PPUSH
75021: CALL_OW 69
75025: PUSH
75026: FOR_IN
75027: IFFALSE 75068
// begin for j := 1 to 4 do
75029: LD_ADDR_VAR 0 3
75033: PUSH
75034: DOUBLE
75035: LD_INT 1
75037: DEC
75038: ST_TO_ADDR
75039: LD_INT 4
75041: PUSH
75042: FOR_TO
75043: IFFALSE 75064
// SetSkill ( i , j , 10 ) ;
75045: LD_VAR 0 2
75049: PPUSH
75050: LD_VAR 0 3
75054: PPUSH
75055: LD_INT 10
75057: PPUSH
75058: CALL_OW 237
75062: GO 75042
75064: POP
75065: POP
// end ;
75066: GO 75026
75068: POP
75069: POP
// end ;
75070: LD_VAR 0 1
75074: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
75075: LD_INT 0
75077: PPUSH
// uc_side := your_side ;
75078: LD_ADDR_OWVAR 20
75082: PUSH
75083: LD_OWVAR 2
75087: ST_TO_ADDR
// uc_nation := nation ;
75088: LD_ADDR_OWVAR 21
75092: PUSH
75093: LD_VAR 0 1
75097: ST_TO_ADDR
// InitHc ;
75098: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
75102: LD_INT 0
75104: PPUSH
75105: LD_VAR 0 2
75109: PPUSH
75110: LD_VAR 0 3
75114: PPUSH
75115: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
75119: LD_VAR 0 4
75123: PPUSH
75124: LD_VAR 0 5
75128: PPUSH
75129: CALL_OW 428
75133: PUSH
75134: LD_INT 0
75136: EQUAL
75137: IFFALSE 75161
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
75139: CALL_OW 44
75143: PPUSH
75144: LD_VAR 0 4
75148: PPUSH
75149: LD_VAR 0 5
75153: PPUSH
75154: LD_INT 1
75156: PPUSH
75157: CALL_OW 48
// end ;
75161: LD_VAR 0 6
75165: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
75166: LD_INT 0
75168: PPUSH
75169: PPUSH
// uc_side := your_side ;
75170: LD_ADDR_OWVAR 20
75174: PUSH
75175: LD_OWVAR 2
75179: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
75180: LD_VAR 0 1
75184: PUSH
75185: LD_INT 1
75187: PUSH
75188: LD_INT 2
75190: PUSH
75191: LD_INT 3
75193: PUSH
75194: LD_INT 4
75196: PUSH
75197: LD_INT 5
75199: PUSH
75200: EMPTY
75201: LIST
75202: LIST
75203: LIST
75204: LIST
75205: LIST
75206: IN
75207: IFFALSE 75219
// uc_nation := nation_american else
75209: LD_ADDR_OWVAR 21
75213: PUSH
75214: LD_INT 1
75216: ST_TO_ADDR
75217: GO 75262
// if chassis in [ 11 , 12 , 13 , 14 ] then
75219: LD_VAR 0 1
75223: PUSH
75224: LD_INT 11
75226: PUSH
75227: LD_INT 12
75229: PUSH
75230: LD_INT 13
75232: PUSH
75233: LD_INT 14
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: LIST
75240: LIST
75241: IN
75242: IFFALSE 75254
// uc_nation := nation_arabian else
75244: LD_ADDR_OWVAR 21
75248: PUSH
75249: LD_INT 2
75251: ST_TO_ADDR
75252: GO 75262
// uc_nation := nation_russian ;
75254: LD_ADDR_OWVAR 21
75258: PUSH
75259: LD_INT 3
75261: ST_TO_ADDR
// vc_chassis := chassis ;
75262: LD_ADDR_OWVAR 37
75266: PUSH
75267: LD_VAR 0 1
75271: ST_TO_ADDR
// vc_engine := engine ;
75272: LD_ADDR_OWVAR 39
75276: PUSH
75277: LD_VAR 0 2
75281: ST_TO_ADDR
// vc_control := control ;
75282: LD_ADDR_OWVAR 38
75286: PUSH
75287: LD_VAR 0 3
75291: ST_TO_ADDR
// vc_weapon := weapon ;
75292: LD_ADDR_OWVAR 40
75296: PUSH
75297: LD_VAR 0 4
75301: ST_TO_ADDR
// un := CreateVehicle ;
75302: LD_ADDR_VAR 0 8
75306: PUSH
75307: CALL_OW 45
75311: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75312: LD_VAR 0 8
75316: PPUSH
75317: LD_INT 0
75319: PPUSH
75320: LD_INT 5
75322: PPUSH
75323: CALL_OW 12
75327: PPUSH
75328: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75332: LD_VAR 0 8
75336: PPUSH
75337: LD_VAR 0 5
75341: PPUSH
75342: LD_VAR 0 6
75346: PPUSH
75347: LD_INT 1
75349: PPUSH
75350: CALL_OW 48
// end ;
75354: LD_VAR 0 7
75358: RET
// export hInvincible ; every 1 do
75359: GO 75361
75361: DISABLE
// hInvincible := [ ] ;
75362: LD_ADDR_EXP 108
75366: PUSH
75367: EMPTY
75368: ST_TO_ADDR
75369: END
// every 10 do var i ;
75370: GO 75372
75372: DISABLE
75373: LD_INT 0
75375: PPUSH
// begin enable ;
75376: ENABLE
// if not hInvincible then
75377: LD_EXP 108
75381: NOT
75382: IFFALSE 75386
// exit ;
75384: GO 75430
// for i in hInvincible do
75386: LD_ADDR_VAR 0 1
75390: PUSH
75391: LD_EXP 108
75395: PUSH
75396: FOR_IN
75397: IFFALSE 75428
// if GetLives ( i ) < 1000 then
75399: LD_VAR 0 1
75403: PPUSH
75404: CALL_OW 256
75408: PUSH
75409: LD_INT 1000
75411: LESS
75412: IFFALSE 75426
// SetLives ( i , 1000 ) ;
75414: LD_VAR 0 1
75418: PPUSH
75419: LD_INT 1000
75421: PPUSH
75422: CALL_OW 234
75426: GO 75396
75428: POP
75429: POP
// end ;
75430: PPOPN 1
75432: END
// export function hHackInvincible ; var i ; begin
75433: LD_INT 0
75435: PPUSH
75436: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75437: LD_ADDR_VAR 0 2
75441: PUSH
75442: LD_INT 2
75444: PUSH
75445: LD_INT 21
75447: PUSH
75448: LD_INT 1
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 21
75457: PUSH
75458: LD_INT 2
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: LIST
75469: PPUSH
75470: CALL_OW 69
75474: PUSH
75475: FOR_IN
75476: IFFALSE 75537
// if IsSelected ( i ) then
75478: LD_VAR 0 2
75482: PPUSH
75483: CALL_OW 306
75487: IFFALSE 75535
// begin if i in hInvincible then
75489: LD_VAR 0 2
75493: PUSH
75494: LD_EXP 108
75498: IN
75499: IFFALSE 75519
// hInvincible := hInvincible diff i else
75501: LD_ADDR_EXP 108
75505: PUSH
75506: LD_EXP 108
75510: PUSH
75511: LD_VAR 0 2
75515: DIFF
75516: ST_TO_ADDR
75517: GO 75535
// hInvincible := hInvincible union i ;
75519: LD_ADDR_EXP 108
75523: PUSH
75524: LD_EXP 108
75528: PUSH
75529: LD_VAR 0 2
75533: UNION
75534: ST_TO_ADDR
// end ;
75535: GO 75475
75537: POP
75538: POP
// end ;
75539: LD_VAR 0 1
75543: RET
// export function hHackInvisible ; var i , j ; begin
75544: LD_INT 0
75546: PPUSH
75547: PPUSH
75548: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75549: LD_ADDR_VAR 0 2
75553: PUSH
75554: LD_INT 21
75556: PUSH
75557: LD_INT 1
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PPUSH
75564: CALL_OW 69
75568: PUSH
75569: FOR_IN
75570: IFFALSE 75594
// if IsSelected ( i ) then
75572: LD_VAR 0 2
75576: PPUSH
75577: CALL_OW 306
75581: IFFALSE 75592
// ComForceInvisible ( i ) ;
75583: LD_VAR 0 2
75587: PPUSH
75588: CALL_OW 496
75592: GO 75569
75594: POP
75595: POP
// end ;
75596: LD_VAR 0 1
75600: RET
// export function hHackChangeYourSide ; begin
75601: LD_INT 0
75603: PPUSH
// if your_side = 8 then
75604: LD_OWVAR 2
75608: PUSH
75609: LD_INT 8
75611: EQUAL
75612: IFFALSE 75624
// your_side := 0 else
75614: LD_ADDR_OWVAR 2
75618: PUSH
75619: LD_INT 0
75621: ST_TO_ADDR
75622: GO 75638
// your_side := your_side + 1 ;
75624: LD_ADDR_OWVAR 2
75628: PUSH
75629: LD_OWVAR 2
75633: PUSH
75634: LD_INT 1
75636: PLUS
75637: ST_TO_ADDR
// end ;
75638: LD_VAR 0 1
75642: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75643: LD_INT 0
75645: PPUSH
75646: PPUSH
75647: PPUSH
// for i in all_units do
75648: LD_ADDR_VAR 0 2
75652: PUSH
75653: LD_OWVAR 3
75657: PUSH
75658: FOR_IN
75659: IFFALSE 75737
// if IsSelected ( i ) then
75661: LD_VAR 0 2
75665: PPUSH
75666: CALL_OW 306
75670: IFFALSE 75735
// begin j := GetSide ( i ) ;
75672: LD_ADDR_VAR 0 3
75676: PUSH
75677: LD_VAR 0 2
75681: PPUSH
75682: CALL_OW 255
75686: ST_TO_ADDR
// if j = 8 then
75687: LD_VAR 0 3
75691: PUSH
75692: LD_INT 8
75694: EQUAL
75695: IFFALSE 75707
// j := 0 else
75697: LD_ADDR_VAR 0 3
75701: PUSH
75702: LD_INT 0
75704: ST_TO_ADDR
75705: GO 75721
// j := j + 1 ;
75707: LD_ADDR_VAR 0 3
75711: PUSH
75712: LD_VAR 0 3
75716: PUSH
75717: LD_INT 1
75719: PLUS
75720: ST_TO_ADDR
// SetSide ( i , j ) ;
75721: LD_VAR 0 2
75725: PPUSH
75726: LD_VAR 0 3
75730: PPUSH
75731: CALL_OW 235
// end ;
75735: GO 75658
75737: POP
75738: POP
// end ;
75739: LD_VAR 0 1
75743: RET
// export function hHackFog ; begin
75744: LD_INT 0
75746: PPUSH
// FogOff ( true ) ;
75747: LD_INT 1
75749: PPUSH
75750: CALL_OW 344
// end ;
75754: LD_VAR 0 1
75758: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75759: LD_INT 0
75761: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75762: LD_VAR 0 1
75766: PPUSH
75767: LD_VAR 0 2
75771: PPUSH
75772: LD_VAR 0 3
75776: PPUSH
75777: LD_INT 1
75779: PPUSH
75780: LD_INT 1
75782: PPUSH
75783: CALL_OW 483
// CenterOnXY ( x , y ) ;
75787: LD_VAR 0 2
75791: PPUSH
75792: LD_VAR 0 3
75796: PPUSH
75797: CALL_OW 84
// end ;
75801: LD_VAR 0 4
75805: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75806: LD_INT 0
75808: PPUSH
75809: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75810: LD_VAR 0 1
75814: NOT
75815: IFTRUE 75834
75817: PUSH
75818: LD_VAR 0 2
75822: PPUSH
75823: LD_VAR 0 3
75827: PPUSH
75828: CALL_OW 488
75832: NOT
75833: OR
75834: IFTRUE 75869
75836: PUSH
75837: LD_VAR 0 1
75841: PPUSH
75842: CALL_OW 266
75846: PUSH
75847: LD_INT 3
75849: NONEQUAL
75850: IFFALSE 75868
75852: PUSH
75853: LD_VAR 0 1
75857: PPUSH
75858: CALL_OW 247
75862: PUSH
75863: LD_INT 1
75865: EQUAL
75866: NOT
75867: AND
75868: OR
75869: IFFALSE 75873
// exit ;
75871: GO 76155
// if GetType ( factory ) = unit_human then
75873: LD_VAR 0 1
75877: PPUSH
75878: CALL_OW 247
75882: PUSH
75883: LD_INT 1
75885: EQUAL
75886: IFFALSE 75903
// factory := IsInUnit ( factory ) ;
75888: LD_ADDR_VAR 0 1
75892: PUSH
75893: LD_VAR 0 1
75897: PPUSH
75898: CALL_OW 310
75902: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75903: LD_VAR 0 1
75907: PPUSH
75908: CALL_OW 266
75912: PUSH
75913: LD_INT 3
75915: NONEQUAL
75916: IFFALSE 75920
// exit ;
75918: GO 76155
// for i := 1 to Count ( factoryWaypoints ) do
75920: LD_ADDR_VAR 0 5
75924: PUSH
75925: DOUBLE
75926: LD_INT 1
75928: DEC
75929: ST_TO_ADDR
75930: LD_EXP 109
75934: PPUSH
75935: CALL 19845 0 1
75939: PUSH
75940: FOR_TO
75941: IFFALSE 76103
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
75943: LD_VAR 0 2
75947: PPUSH
75948: LD_VAR 0 3
75952: PPUSH
75953: CALL_OW 428
75957: PUSH
75958: LD_EXP 109
75962: PUSH
75963: LD_VAR 0 5
75967: ARRAY
75968: PUSH
75969: LD_INT 2
75971: ARRAY
75972: EQUAL
75973: IFFALSE 76005
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
75975: LD_ADDR_EXP 109
75979: PUSH
75980: LD_EXP 109
75984: PPUSH
75985: LD_VAR 0 5
75989: PPUSH
75990: CALL_OW 3
75994: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75995: CALL 76160 0 0
// exit ;
75999: POP
76000: POP
76001: GO 76155
// end else
76003: GO 76101
// if factory = factoryWaypoints [ i ] [ 2 ] then
76005: LD_VAR 0 1
76009: PUSH
76010: LD_EXP 109
76014: PUSH
76015: LD_VAR 0 5
76019: ARRAY
76020: PUSH
76021: LD_INT 2
76023: ARRAY
76024: EQUAL
76025: IFFALSE 76101
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
76027: LD_ADDR_EXP 109
76031: PUSH
76032: LD_EXP 109
76036: PPUSH
76037: LD_VAR 0 5
76041: PPUSH
76042: CALL_OW 3
76046: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76047: LD_ADDR_EXP 109
76051: PUSH
76052: LD_EXP 109
76056: PPUSH
76057: LD_VAR 0 1
76061: PPUSH
76062: CALL_OW 255
76066: PUSH
76067: LD_VAR 0 1
76071: PUSH
76072: LD_VAR 0 2
76076: PUSH
76077: LD_VAR 0 3
76081: PUSH
76082: EMPTY
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: PPUSH
76088: CALL 55821 0 2
76092: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76093: CALL 76160 0 0
// exit ;
76097: POP
76098: POP
76099: GO 76155
// end ; end ;
76101: GO 75940
76103: POP
76104: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
76105: LD_ADDR_EXP 109
76109: PUSH
76110: LD_EXP 109
76114: PPUSH
76115: LD_VAR 0 1
76119: PPUSH
76120: CALL_OW 255
76124: PUSH
76125: LD_VAR 0 1
76129: PUSH
76130: LD_VAR 0 2
76134: PUSH
76135: LD_VAR 0 3
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: LIST
76144: LIST
76145: PPUSH
76146: CALL 55821 0 2
76150: ST_TO_ADDR
// UpdateFactoryWaypoints ;
76151: CALL 76160 0 0
// end ;
76155: LD_VAR 0 4
76159: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
76160: LD_INT 0
76162: PPUSH
76163: PPUSH
76164: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
76165: LD_STRING resetFactoryWaypoint();
76167: PPUSH
76168: CALL_OW 559
// if factoryWaypoints then
76172: LD_EXP 109
76176: IFFALSE 76297
// begin list := factoryWaypoints ;
76178: LD_ADDR_VAR 0 3
76182: PUSH
76183: LD_EXP 109
76187: ST_TO_ADDR
// for i := 1 to list do
76188: LD_ADDR_VAR 0 2
76192: PUSH
76193: DOUBLE
76194: LD_INT 1
76196: DEC
76197: ST_TO_ADDR
76198: LD_VAR 0 3
76202: PUSH
76203: FOR_TO
76204: IFFALSE 76295
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76206: LD_STRING setFactoryWaypointXY(
76208: PUSH
76209: LD_VAR 0 3
76213: PUSH
76214: LD_VAR 0 2
76218: ARRAY
76219: PUSH
76220: LD_INT 1
76222: ARRAY
76223: STR
76224: PUSH
76225: LD_STRING ,
76227: STR
76228: PUSH
76229: LD_VAR 0 3
76233: PUSH
76234: LD_VAR 0 2
76238: ARRAY
76239: PUSH
76240: LD_INT 2
76242: ARRAY
76243: STR
76244: PUSH
76245: LD_STRING ,
76247: STR
76248: PUSH
76249: LD_VAR 0 3
76253: PUSH
76254: LD_VAR 0 2
76258: ARRAY
76259: PUSH
76260: LD_INT 3
76262: ARRAY
76263: STR
76264: PUSH
76265: LD_STRING ,
76267: STR
76268: PUSH
76269: LD_VAR 0 3
76273: PUSH
76274: LD_VAR 0 2
76278: ARRAY
76279: PUSH
76280: LD_INT 4
76282: ARRAY
76283: STR
76284: PUSH
76285: LD_STRING )
76287: STR
76288: PPUSH
76289: CALL_OW 559
76293: GO 76203
76295: POP
76296: POP
// end ; end ;
76297: LD_VAR 0 1
76301: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76302: LD_INT 0
76304: PPUSH
// if HexInfo ( x , y ) = warehouse then
76305: LD_VAR 0 2
76309: PPUSH
76310: LD_VAR 0 3
76314: PPUSH
76315: CALL_OW 428
76319: PUSH
76320: LD_VAR 0 1
76324: EQUAL
76325: IFFALSE 76352
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76327: LD_ADDR_EXP 111
76331: PUSH
76332: LD_EXP 111
76336: PPUSH
76337: LD_VAR 0 1
76341: PPUSH
76342: LD_INT 0
76344: PPUSH
76345: CALL_OW 1
76349: ST_TO_ADDR
76350: GO 76403
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76352: LD_ADDR_EXP 111
76356: PUSH
76357: LD_EXP 111
76361: PPUSH
76362: LD_VAR 0 1
76366: PPUSH
76367: LD_VAR 0 1
76371: PPUSH
76372: CALL_OW 255
76376: PUSH
76377: LD_VAR 0 1
76381: PUSH
76382: LD_VAR 0 2
76386: PUSH
76387: LD_VAR 0 3
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: PPUSH
76398: CALL_OW 1
76402: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76403: CALL 76412 0 0
// end ;
76407: LD_VAR 0 4
76411: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76412: LD_INT 0
76414: PPUSH
76415: PPUSH
76416: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76417: LD_STRING resetWarehouseGatheringPoints();
76419: PPUSH
76420: CALL_OW 559
// if warehouseGatheringPoints then
76424: LD_EXP 111
76428: IFFALSE 76554
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76430: LD_ADDR_VAR 0 3
76434: PUSH
76435: LD_EXP 111
76439: PPUSH
76440: CALL 59755 0 1
76444: ST_TO_ADDR
// for i := 1 to list do
76445: LD_ADDR_VAR 0 2
76449: PUSH
76450: DOUBLE
76451: LD_INT 1
76453: DEC
76454: ST_TO_ADDR
76455: LD_VAR 0 3
76459: PUSH
76460: FOR_TO
76461: IFFALSE 76552
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76463: LD_STRING setWarehouseGatheringPointXY(
76465: PUSH
76466: LD_VAR 0 3
76470: PUSH
76471: LD_VAR 0 2
76475: ARRAY
76476: PUSH
76477: LD_INT 1
76479: ARRAY
76480: STR
76481: PUSH
76482: LD_STRING ,
76484: STR
76485: PUSH
76486: LD_VAR 0 3
76490: PUSH
76491: LD_VAR 0 2
76495: ARRAY
76496: PUSH
76497: LD_INT 2
76499: ARRAY
76500: STR
76501: PUSH
76502: LD_STRING ,
76504: STR
76505: PUSH
76506: LD_VAR 0 3
76510: PUSH
76511: LD_VAR 0 2
76515: ARRAY
76516: PUSH
76517: LD_INT 3
76519: ARRAY
76520: STR
76521: PUSH
76522: LD_STRING ,
76524: STR
76525: PUSH
76526: LD_VAR 0 3
76530: PUSH
76531: LD_VAR 0 2
76535: ARRAY
76536: PUSH
76537: LD_INT 4
76539: ARRAY
76540: STR
76541: PUSH
76542: LD_STRING )
76544: STR
76545: PPUSH
76546: CALL_OW 559
76550: GO 76460
76552: POP
76553: POP
// end ; end ;
76554: LD_VAR 0 1
76558: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76559: LD_EXP 111
76563: IFFALSE 77258
76565: GO 76567
76567: DISABLE
76568: LD_INT 0
76570: PPUSH
76571: PPUSH
76572: PPUSH
76573: PPUSH
76574: PPUSH
76575: PPUSH
76576: PPUSH
76577: PPUSH
76578: PPUSH
// begin enable ;
76579: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76580: LD_ADDR_VAR 0 3
76584: PUSH
76585: LD_EXP 111
76589: PPUSH
76590: CALL 59755 0 1
76594: ST_TO_ADDR
// if not list then
76595: LD_VAR 0 3
76599: NOT
76600: IFFALSE 76604
// exit ;
76602: GO 77258
// for i := 1 to list do
76604: LD_ADDR_VAR 0 1
76608: PUSH
76609: DOUBLE
76610: LD_INT 1
76612: DEC
76613: ST_TO_ADDR
76614: LD_VAR 0 3
76618: PUSH
76619: FOR_TO
76620: IFFALSE 77256
// begin depot := list [ i ] [ 2 ] ;
76622: LD_ADDR_VAR 0 8
76626: PUSH
76627: LD_VAR 0 3
76631: PUSH
76632: LD_VAR 0 1
76636: ARRAY
76637: PUSH
76638: LD_INT 2
76640: ARRAY
76641: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76642: LD_ADDR_VAR 0 5
76646: PUSH
76647: LD_VAR 0 3
76651: PUSH
76652: LD_VAR 0 1
76656: ARRAY
76657: PUSH
76658: LD_INT 1
76660: ARRAY
76661: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76662: LD_VAR 0 8
76666: PPUSH
76667: CALL_OW 301
76671: IFTRUE 76690
76673: PUSH
76674: LD_VAR 0 5
76678: PUSH
76679: LD_VAR 0 8
76683: PPUSH
76684: CALL_OW 255
76688: NONEQUAL
76689: OR
76690: IFFALSE 76719
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76692: LD_ADDR_EXP 111
76696: PUSH
76697: LD_EXP 111
76701: PPUSH
76702: LD_VAR 0 8
76706: PPUSH
76707: LD_INT 0
76709: PPUSH
76710: CALL_OW 1
76714: ST_TO_ADDR
// exit ;
76715: POP
76716: POP
76717: GO 77258
// end ; x := list [ i ] [ 3 ] ;
76719: LD_ADDR_VAR 0 6
76723: PUSH
76724: LD_VAR 0 3
76728: PUSH
76729: LD_VAR 0 1
76733: ARRAY
76734: PUSH
76735: LD_INT 3
76737: ARRAY
76738: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76739: LD_ADDR_VAR 0 7
76743: PUSH
76744: LD_VAR 0 3
76748: PUSH
76749: LD_VAR 0 1
76753: ARRAY
76754: PUSH
76755: LD_INT 4
76757: ARRAY
76758: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76759: LD_ADDR_VAR 0 9
76763: PUSH
76764: LD_VAR 0 6
76768: PPUSH
76769: LD_VAR 0 7
76773: PPUSH
76774: LD_INT 16
76776: PPUSH
76777: CALL 58329 0 3
76781: ST_TO_ADDR
// if not cratesNearbyPoint then
76782: LD_VAR 0 9
76786: NOT
76787: IFFALSE 76793
// exit ;
76789: POP
76790: POP
76791: GO 77258
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76793: LD_ADDR_VAR 0 4
76797: PUSH
76798: LD_INT 22
76800: PUSH
76801: LD_VAR 0 5
76805: PUSH
76806: EMPTY
76807: LIST
76808: LIST
76809: PUSH
76810: LD_INT 3
76812: PUSH
76813: LD_INT 60
76815: PUSH
76816: EMPTY
76817: LIST
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PUSH
76823: LD_INT 91
76825: PUSH
76826: LD_VAR 0 8
76830: PUSH
76831: LD_INT 6
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 2
76841: PUSH
76842: LD_INT 25
76844: PUSH
76845: LD_INT 2
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 25
76854: PUSH
76855: LD_INT 16
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: PUSH
76867: EMPTY
76868: LIST
76869: LIST
76870: LIST
76871: LIST
76872: PPUSH
76873: CALL_OW 69
76877: PUSH
76878: LD_VAR 0 8
76882: PPUSH
76883: CALL_OW 313
76887: PPUSH
76888: LD_INT 3
76890: PUSH
76891: LD_INT 60
76893: PUSH
76894: EMPTY
76895: LIST
76896: PUSH
76897: EMPTY
76898: LIST
76899: LIST
76900: PUSH
76901: LD_INT 2
76903: PUSH
76904: LD_INT 25
76906: PUSH
76907: LD_INT 2
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 25
76916: PUSH
76917: LD_INT 16
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: LIST
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: PPUSH
76933: CALL_OW 72
76937: UNION
76938: ST_TO_ADDR
// if tmp then
76939: LD_VAR 0 4
76943: IFFALSE 77023
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76945: LD_ADDR_VAR 0 4
76949: PUSH
76950: LD_VAR 0 4
76954: PPUSH
76955: LD_INT 3
76957: PPUSH
76958: CALL 56136 0 2
76962: ST_TO_ADDR
// for j in tmp do
76963: LD_ADDR_VAR 0 2
76967: PUSH
76968: LD_VAR 0 4
76972: PUSH
76973: FOR_IN
76974: IFFALSE 77017
// begin if IsInUnit ( j ) then
76976: LD_VAR 0 2
76980: PPUSH
76981: CALL_OW 310
76985: IFFALSE 76996
// ComExit ( j ) ;
76987: LD_VAR 0 2
76991: PPUSH
76992: CALL 56219 0 1
// AddComCollect ( j , x , y ) ;
76996: LD_VAR 0 2
77000: PPUSH
77001: LD_VAR 0 6
77005: PPUSH
77006: LD_VAR 0 7
77010: PPUSH
77011: CALL_OW 177
// end ;
77015: GO 76973
77017: POP
77018: POP
// exit ;
77019: POP
77020: POP
77021: GO 77258
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
77023: LD_ADDR_VAR 0 4
77027: PUSH
77028: LD_INT 22
77030: PUSH
77031: LD_VAR 0 5
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 91
77042: PUSH
77043: LD_VAR 0 8
77047: PUSH
77048: LD_INT 8
77050: PUSH
77051: EMPTY
77052: LIST
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 2
77058: PUSH
77059: LD_INT 34
77061: PUSH
77062: LD_INT 12
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 34
77071: PUSH
77072: LD_INT 51
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 34
77081: PUSH
77082: LD_INT 32
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 34
77091: PUSH
77092: LD_INT 89
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: EMPTY
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: LIST
77110: PPUSH
77111: CALL_OW 69
77115: ST_TO_ADDR
// if tmp then
77116: LD_VAR 0 4
77120: IFFALSE 77254
// begin for j in tmp do
77122: LD_ADDR_VAR 0 2
77126: PUSH
77127: LD_VAR 0 4
77131: PUSH
77132: FOR_IN
77133: IFFALSE 77252
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
77135: LD_VAR 0 2
77139: PPUSH
77140: CALL_OW 262
77144: PUSH
77145: LD_INT 3
77147: EQUAL
77148: IFTRUE 77165
77150: PUSH
77151: LD_VAR 0 2
77155: PPUSH
77156: CALL_OW 261
77160: PUSH
77161: LD_INT 20
77163: GREATER
77164: OR
77165: IFFALSE 77179
77167: PUSH
77168: LD_VAR 0 2
77172: PPUSH
77173: CALL_OW 314
77177: NOT
77178: AND
77179: IFFALSE 77209
77181: PUSH
77182: LD_VAR 0 2
77186: PPUSH
77187: CALL_OW 263
77191: PUSH
77192: LD_INT 1
77194: NONEQUAL
77195: IFTRUE 77208
77197: PUSH
77198: LD_VAR 0 2
77202: PPUSH
77203: CALL_OW 311
77207: OR
77208: AND
77209: IFFALSE 77250
// begin ComCollect ( j , x , y ) ;
77211: LD_VAR 0 2
77215: PPUSH
77216: LD_VAR 0 6
77220: PPUSH
77221: LD_VAR 0 7
77225: PPUSH
77226: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77230: LD_VAR 0 2
77234: PPUSH
77235: LD_VAR 0 8
77239: PPUSH
77240: CALL_OW 172
// exit ;
77244: POP
77245: POP
77246: POP
77247: POP
77248: GO 77258
// end ;
77250: GO 77132
77252: POP
77253: POP
// end ; end ;
77254: GO 76619
77256: POP
77257: POP
// end ; end_of_file
77258: PPOPN 9
77260: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77261: LD_VAR 0 1
77265: PPUSH
77266: LD_VAR 0 2
77270: PPUSH
77271: LD_VAR 0 3
77275: PPUSH
77276: LD_VAR 0 4
77280: PPUSH
77281: LD_VAR 0 5
77285: PPUSH
77286: LD_VAR 0 6
77290: PPUSH
77291: CALL 61354 0 6
// end ;
77295: PPOPN 6
77297: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77298: LD_INT 0
77300: PPUSH
// begin if not units then
77301: LD_VAR 0 1
77305: NOT
77306: IFFALSE 77310
// exit ;
77308: GO 77344
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
77310: LD_VAR 0 1
77314: PPUSH
77315: LD_VAR 0 2
77319: PPUSH
77320: LD_VAR 0 3
77324: PPUSH
77325: LD_VAR 0 4
77329: PPUSH
77330: LD_VAR 0 5
77334: PPUSH
77335: LD_VAR 0 6
77339: PPUSH
77340: CALL 83964 0 6
// end ;
77344: PPOPN 7
77346: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77347: CALL 61234 0 0
// end ; end_of_file
77351: PPOPN 1
77353: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77354: LD_VAR 0 1
77358: PUSH
77359: LD_INT 200
77361: DOUBLE
77362: GREATEREQUAL
77363: IFFALSE 77371
77365: LD_INT 299
77367: DOUBLE
77368: LESSEQUAL
77369: IFTRUE 77373
77371: GO 77405
77373: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77374: LD_VAR 0 1
77378: PPUSH
77379: LD_VAR 0 2
77383: PPUSH
77384: LD_VAR 0 3
77388: PPUSH
77389: LD_VAR 0 4
77393: PPUSH
77394: LD_VAR 0 5
77398: PPUSH
77399: CALL 78267 0 5
77403: GO 77482
77405: LD_INT 300
77407: DOUBLE
77408: GREATEREQUAL
77409: IFFALSE 77417
77411: LD_INT 399
77413: DOUBLE
77414: LESSEQUAL
77415: IFTRUE 77419
77417: GO 77481
77419: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77420: LD_VAR 0 1
77424: PPUSH
77425: LD_VAR 0 2
77429: PPUSH
77430: LD_VAR 0 3
77434: PPUSH
77435: LD_VAR 0 4
77439: PPUSH
77440: LD_VAR 0 5
77444: PPUSH
77445: LD_VAR 0 6
77449: PPUSH
77450: LD_VAR 0 7
77454: PPUSH
77455: LD_VAR 0 8
77459: PPUSH
77460: LD_VAR 0 9
77464: PPUSH
77465: LD_VAR 0 10
77469: PPUSH
77470: LD_VAR 0 11
77474: PPUSH
77475: CALL 73814 0 11
77479: GO 77482
77481: POP
// end ;
77482: PPOPN 11
77484: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77485: LD_VAR 0 1
77489: PPUSH
77490: LD_VAR 0 2
77494: PPUSH
77495: LD_VAR 0 3
77499: PPUSH
77500: LD_VAR 0 4
77504: PPUSH
77505: LD_VAR 0 5
77509: PPUSH
77510: CALL 77567 0 5
// end ; end_of_file
77514: PPOPN 5
77516: END
// export function SOS_UnitDestroyed ( un ) ; begin
77517: LD_INT 0
77519: PPUSH
// ComRadiation ( un ) ;
77520: LD_VAR 0 1
77524: PPUSH
77525: CALL 78687 0 1
// end ;
77529: LD_VAR 0 2
77533: RET
// export function SOS_UnitKamikazed ( un ) ; begin
77534: LD_INT 0
77536: PPUSH
// ComRadiation ( un ) ;
77537: LD_VAR 0 1
77541: PPUSH
77542: CALL 78687 0 1
// end ;
77546: LD_VAR 0 2
77550: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77551: LD_INT 0
77553: PPUSH
// end ;
77554: LD_VAR 0 4
77558: RET
// export function SOS_Command ( cmd ) ; begin
77559: LD_INT 0
77561: PPUSH
// end ;
77562: LD_VAR 0 2
77566: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77567: LD_INT 0
77569: PPUSH
// end ;
77570: LD_VAR 0 6
77574: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
77575: LD_INT 0
77577: PPUSH
77578: PPUSH
77579: PPUSH
77580: PPUSH
77581: PPUSH
// if not vehicle or not factory then
77582: LD_VAR 0 1
77586: NOT
77587: IFTRUE 77596
77589: PUSH
77590: LD_VAR 0 2
77594: NOT
77595: OR
77596: IFFALSE 77600
// exit ;
77598: GO 78262
// weapon := GetWeapon ( vehicle ) ;
77600: LD_ADDR_VAR 0 7
77604: PUSH
77605: LD_VAR 0 1
77609: PPUSH
77610: CALL_OW 264
77614: ST_TO_ADDR
// if weapon = ar_miner then
77615: LD_VAR 0 7
77619: PUSH
77620: LD_INT 81
77622: EQUAL
77623: IFFALSE 77680
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
77625: LD_ADDR_EXP 120
77629: PUSH
77630: LD_EXP 120
77634: PPUSH
77635: LD_EXP 120
77639: PUSH
77640: LD_INT 1
77642: PLUS
77643: PPUSH
77644: LD_VAR 0 1
77648: PPUSH
77649: CALL_OW 1
77653: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
77654: LD_ADDR_EXP 121
77658: PUSH
77659: LD_EXP 121
77663: PPUSH
77664: LD_EXP 121
77668: PUSH
77669: LD_INT 1
77671: PLUS
77672: PPUSH
77673: EMPTY
77674: PPUSH
77675: CALL_OW 1
77679: ST_TO_ADDR
// end ; if not factoryWaypoints then
77680: LD_EXP 109
77684: NOT
77685: IFFALSE 77689
// exit ;
77687: GO 78262
// for i := 1 to Count ( factoryWaypoints ) do
77689: LD_ADDR_VAR 0 4
77693: PUSH
77694: DOUBLE
77695: LD_INT 1
77697: DEC
77698: ST_TO_ADDR
77699: LD_EXP 109
77703: PPUSH
77704: CALL 19845 0 1
77708: PUSH
77709: FOR_TO
77710: IFFALSE 78260
// if factoryWaypoints [ i ] [ 2 ] = factory then
77712: LD_EXP 109
77716: PUSH
77717: LD_VAR 0 4
77721: ARRAY
77722: PUSH
77723: LD_INT 2
77725: ARRAY
77726: PUSH
77727: LD_VAR 0 2
77731: EQUAL
77732: IFFALSE 78258
// begin if GetControl ( vehicle ) = control_manual then
77734: LD_VAR 0 1
77738: PPUSH
77739: CALL_OW 263
77743: PUSH
77744: LD_INT 1
77746: EQUAL
77747: IFFALSE 78111
// begin driver := IsDrivenBy ( vehicle ) ;
77749: LD_ADDR_VAR 0 5
77753: PUSH
77754: LD_VAR 0 1
77758: PPUSH
77759: CALL_OW 311
77763: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
77764: LD_VAR 0 5
77768: PUSH
77769: LD_EXP 110
77773: IN
77774: IFTRUE 77788
77776: PUSH
77777: LD_VAR 0 1
77781: PUSH
77782: LD_EXP 110
77786: IN
77787: OR
77788: IFFALSE 77794
// exit ;
77790: POP
77791: POP
77792: GO 78262
// if not HasTask ( driver ) then
77794: LD_VAR 0 5
77798: PPUSH
77799: CALL_OW 314
77803: NOT
77804: IFFALSE 78109
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
77806: LD_ADDR_EXP 110
77810: PUSH
77811: LD_EXP 110
77815: PPUSH
77816: LD_VAR 0 5
77820: PPUSH
77821: CALL 55821 0 2
77825: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
77826: LD_ADDR_EXP 110
77830: PUSH
77831: LD_EXP 110
77835: PPUSH
77836: LD_VAR 0 1
77840: PPUSH
77841: CALL 55821 0 2
77845: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77846: LD_ADDR_VAR 0 6
77850: PUSH
77851: LD_EXP 109
77855: PUSH
77856: LD_VAR 0 4
77860: ARRAY
77861: PUSH
77862: LD_INT 3
77864: ARRAY
77865: PPUSH
77866: LD_EXP 109
77870: PUSH
77871: LD_VAR 0 4
77875: ARRAY
77876: PUSH
77877: LD_INT 4
77879: ARRAY
77880: PPUSH
77881: CALL_OW 428
77885: ST_TO_ADDR
// if hex then
77886: LD_VAR 0 6
77890: IFFALSE 77908
// ComMoveUnit ( driver , hex ) else
77892: LD_VAR 0 5
77896: PPUSH
77897: LD_VAR 0 6
77901: PPUSH
77902: CALL_OW 112
77906: GO 77992
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
77908: LD_VAR 0 1
77912: PPUSH
77913: LD_EXP 109
77917: PUSH
77918: LD_VAR 0 4
77922: ARRAY
77923: PUSH
77924: LD_INT 3
77926: ARRAY
77927: PPUSH
77928: LD_EXP 109
77932: PUSH
77933: LD_VAR 0 4
77937: ARRAY
77938: PUSH
77939: LD_INT 4
77941: ARRAY
77942: PPUSH
77943: CALL_OW 297
77947: PUSH
77948: LD_INT 0
77950: GREATER
77951: IFFALSE 77992
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77953: LD_VAR 0 5
77957: PPUSH
77958: LD_EXP 109
77962: PUSH
77963: LD_VAR 0 4
77967: ARRAY
77968: PUSH
77969: LD_INT 3
77971: ARRAY
77972: PPUSH
77973: LD_EXP 109
77977: PUSH
77978: LD_VAR 0 4
77982: ARRAY
77983: PUSH
77984: LD_INT 4
77986: ARRAY
77987: PPUSH
77988: CALL_OW 111
// AddComExitVehicle ( driver ) ;
77992: LD_VAR 0 5
77996: PPUSH
77997: CALL_OW 181
// if Multiplayer then
78001: LD_OWVAR 4
78005: IFFALSE 78054
// begin repeat wait ( 10 ) ;
78007: LD_INT 10
78009: PPUSH
78010: CALL_OW 67
// until not IsInUnit ( driver ) ;
78014: LD_VAR 0 5
78018: PPUSH
78019: CALL_OW 310
78023: NOT
78024: IFFALSE 78007
// if not HasTask ( driver ) then
78026: LD_VAR 0 5
78030: PPUSH
78031: CALL_OW 314
78035: NOT
78036: IFFALSE 78052
// ComEnterUnit ( driver , factory ) ;
78038: LD_VAR 0 5
78042: PPUSH
78043: LD_VAR 0 2
78047: PPUSH
78048: CALL_OW 120
// end else
78052: GO 78068
// AddComEnterUnit ( driver , factory ) ;
78054: LD_VAR 0 5
78058: PPUSH
78059: LD_VAR 0 2
78063: PPUSH
78064: CALL_OW 180
// wait ( 0 0$1 ) ;
78068: LD_INT 35
78070: PPUSH
78071: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
78075: LD_ADDR_EXP 110
78079: PUSH
78080: LD_EXP 110
78084: PUSH
78085: LD_VAR 0 5
78089: DIFF
78090: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
78091: LD_ADDR_EXP 110
78095: PUSH
78096: LD_EXP 110
78100: PUSH
78101: LD_VAR 0 1
78105: DIFF
78106: ST_TO_ADDR
// break ;
78107: GO 78260
// end ; end else
78109: GO 78258
// if GetControl ( vehicle ) = control_remote then
78111: LD_VAR 0 1
78115: PPUSH
78116: CALL_OW 263
78120: PUSH
78121: LD_INT 2
78123: EQUAL
78124: IFFALSE 78210
// begin wait ( 0 0$2 ) ;
78126: LD_INT 70
78128: PPUSH
78129: CALL_OW 67
// repeat wait ( 10 ) ;
78133: LD_INT 10
78135: PPUSH
78136: CALL_OW 67
// Connect ( vehicle ) ;
78140: LD_VAR 0 1
78144: PPUSH
78145: CALL 26123 0 1
// until IsControledBy ( vehicle ) ;
78149: LD_VAR 0 1
78153: PPUSH
78154: CALL_OW 312
78158: IFFALSE 78133
// wait ( 10 ) ;
78160: LD_INT 10
78162: PPUSH
78163: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78167: LD_VAR 0 1
78171: PPUSH
78172: LD_EXP 109
78176: PUSH
78177: LD_VAR 0 4
78181: ARRAY
78182: PUSH
78183: LD_INT 3
78185: ARRAY
78186: PPUSH
78187: LD_EXP 109
78191: PUSH
78192: LD_VAR 0 4
78196: ARRAY
78197: PUSH
78198: LD_INT 4
78200: ARRAY
78201: PPUSH
78202: CALL_OW 111
// break ;
78206: GO 78260
// end else
78208: GO 78258
// begin wait ( 0 0$3 ) ;
78210: LD_INT 105
78212: PPUSH
78213: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
78217: LD_VAR 0 1
78221: PPUSH
78222: LD_EXP 109
78226: PUSH
78227: LD_VAR 0 4
78231: ARRAY
78232: PUSH
78233: LD_INT 3
78235: ARRAY
78236: PPUSH
78237: LD_EXP 109
78241: PUSH
78242: LD_VAR 0 4
78246: ARRAY
78247: PUSH
78248: LD_INT 4
78250: ARRAY
78251: PPUSH
78252: CALL_OW 111
// break ;
78256: GO 78260
// end ; end ;
78258: GO 77709
78260: POP
78261: POP
// end ;
78262: LD_VAR 0 3
78266: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
78267: LD_INT 0
78269: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
78270: LD_VAR 0 1
78274: PUSH
78275: LD_INT 250
78277: EQUAL
78278: IFFALSE 78295
78280: PUSH
78281: LD_VAR 0 2
78285: PPUSH
78286: CALL_OW 264
78290: PUSH
78291: LD_INT 81
78293: EQUAL
78294: AND
78295: IFFALSE 78316
// MinerPlaceMine ( unit , x , y ) ;
78297: LD_VAR 0 2
78301: PPUSH
78302: LD_VAR 0 4
78306: PPUSH
78307: LD_VAR 0 5
78311: PPUSH
78312: CALL 81662 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
78316: LD_VAR 0 1
78320: PUSH
78321: LD_INT 251
78323: EQUAL
78324: IFFALSE 78341
78326: PUSH
78327: LD_VAR 0 2
78331: PPUSH
78332: CALL_OW 264
78336: PUSH
78337: LD_INT 81
78339: EQUAL
78340: AND
78341: IFFALSE 78362
// MinerDetonateMine ( unit , x , y ) ;
78343: LD_VAR 0 2
78347: PPUSH
78348: LD_VAR 0 4
78352: PPUSH
78353: LD_VAR 0 5
78357: PPUSH
78358: CALL 82069 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78362: LD_VAR 0 1
78366: PUSH
78367: LD_INT 252
78369: EQUAL
78370: IFFALSE 78387
78372: PUSH
78373: LD_VAR 0 2
78377: PPUSH
78378: CALL_OW 264
78382: PUSH
78383: LD_INT 81
78385: EQUAL
78386: AND
78387: IFFALSE 78408
// MinerCreateMinefield ( unit , x , y ) ;
78389: LD_VAR 0 2
78393: PPUSH
78394: LD_VAR 0 4
78398: PPUSH
78399: LD_VAR 0 5
78403: PPUSH
78404: CALL 82301 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78408: LD_VAR 0 1
78412: PUSH
78413: LD_INT 253
78415: EQUAL
78416: IFFALSE 78433
78418: PUSH
78419: LD_VAR 0 2
78423: PPUSH
78424: CALL_OW 257
78428: PUSH
78429: LD_INT 5
78431: EQUAL
78432: AND
78433: IFFALSE 78454
// ComBinocular ( unit , x , y ) ;
78435: LD_VAR 0 2
78439: PPUSH
78440: LD_VAR 0 4
78444: PPUSH
78445: LD_VAR 0 5
78449: PPUSH
78450: CALL 82676 0 3
// if selectedUnit then
78454: LD_VAR 0 3
78458: IFFALSE 78518
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78460: LD_VAR 0 1
78464: PUSH
78465: LD_INT 254
78467: EQUAL
78468: IFFALSE 78485
78470: PUSH
78471: LD_VAR 0 2
78475: PPUSH
78476: CALL_OW 264
78480: PUSH
78481: LD_INT 99
78483: EQUAL
78484: AND
78485: IFFALSE 78502
78487: PUSH
78488: LD_VAR 0 3
78492: PPUSH
78493: CALL_OW 263
78497: PUSH
78498: LD_INT 3
78500: EQUAL
78501: AND
78502: IFFALSE 78518
// HackDestroyVehicle ( unit , selectedUnit ) ;
78504: LD_VAR 0 2
78508: PPUSH
78509: LD_VAR 0 3
78513: PPUSH
78514: CALL 80852 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78518: LD_VAR 0 1
78522: PUSH
78523: LD_INT 255
78525: EQUAL
78526: IFFALSE 78550
78528: PUSH
78529: LD_VAR 0 2
78533: PPUSH
78534: CALL_OW 264
78538: PUSH
78539: LD_INT 14
78541: PUSH
78542: LD_INT 53
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: IN
78549: AND
78550: IFFALSE 78568
78552: PUSH
78553: LD_VAR 0 4
78557: PPUSH
78558: LD_VAR 0 5
78562: PPUSH
78563: CALL_OW 488
78567: AND
78568: IFFALSE 78592
// CutTreeXYR ( unit , x , y , 12 ) ;
78570: LD_VAR 0 2
78574: PPUSH
78575: LD_VAR 0 4
78579: PPUSH
78580: LD_VAR 0 5
78584: PPUSH
78585: LD_INT 12
78587: PPUSH
78588: CALL 78783 0 4
// if cmd = 256 then
78592: LD_VAR 0 1
78596: PUSH
78597: LD_INT 256
78599: EQUAL
78600: IFFALSE 78621
// SetFactoryWaypoint ( unit , x , y ) ;
78602: LD_VAR 0 2
78606: PPUSH
78607: LD_VAR 0 4
78611: PPUSH
78612: LD_VAR 0 5
78616: PPUSH
78617: CALL 75806 0 3
// if cmd = 257 then
78621: LD_VAR 0 1
78625: PUSH
78626: LD_INT 257
78628: EQUAL
78629: IFFALSE 78650
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78631: LD_VAR 0 2
78635: PPUSH
78636: LD_VAR 0 4
78640: PPUSH
78641: LD_VAR 0 5
78645: PPUSH
78646: CALL 76302 0 3
// if cmd = 258 then
78650: LD_VAR 0 1
78654: PUSH
78655: LD_INT 258
78657: EQUAL
78658: IFFALSE 78682
// BurnTreeXYR ( unit , x , y , 8 ) ;
78660: LD_VAR 0 2
78664: PPUSH
78665: LD_VAR 0 4
78669: PPUSH
78670: LD_VAR 0 5
78674: PPUSH
78675: LD_INT 8
78677: PPUSH
78678: CALL 79205 0 4
// end ;
78682: LD_VAR 0 6
78686: RET
// export function ComRadiation ( un ) ; var eff ; begin
78687: LD_INT 0
78689: PPUSH
78690: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
78691: LD_VAR 0 1
78695: PPUSH
78696: CALL_OW 264
78700: PUSH
78701: LD_INT 91
78703: NONEQUAL
78704: IFFALSE 78708
// exit ;
78706: GO 78778
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78708: LD_INT 68
78710: PPUSH
78711: LD_VAR 0 1
78715: PPUSH
78716: CALL_OW 255
78720: PPUSH
78721: CALL_OW 321
78725: PUSH
78726: LD_INT 2
78728: EQUAL
78729: IFFALSE 78741
// eff := 50 else
78731: LD_ADDR_VAR 0 3
78735: PUSH
78736: LD_INT 50
78738: ST_TO_ADDR
78739: GO 78749
// eff := 25 ;
78741: LD_ADDR_VAR 0 3
78745: PUSH
78746: LD_INT 25
78748: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78749: LD_VAR 0 1
78753: PPUSH
78754: CALL_OW 250
78758: PPUSH
78759: LD_VAR 0 1
78763: PPUSH
78764: CALL_OW 251
78768: PPUSH
78769: LD_VAR 0 3
78773: PPUSH
78774: CALL_OW 495
// end ;
78778: LD_VAR 0 2
78782: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78783: LD_INT 0
78785: PPUSH
78786: PPUSH
78787: PPUSH
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78794: LD_VAR 0 1
78798: PPUSH
78799: CALL_OW 302
78803: NOT
78804: IFTRUE 78823
78806: PUSH
78807: LD_VAR 0 2
78811: PPUSH
78812: LD_VAR 0 3
78816: PPUSH
78817: CALL_OW 488
78821: NOT
78822: OR
78823: IFTRUE 78832
78825: PUSH
78826: LD_VAR 0 4
78830: NOT
78831: OR
78832: IFFALSE 78836
// exit ;
78834: GO 79200
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
78836: LD_VAR 0 1
78840: PPUSH
78841: CALL_OW 437
78845: PPUSH
78846: CALL 19845 0 1
78850: PUSH
78851: LD_INT 10
78853: GREATER
78854: IFFALSE 78858
// exit ;
78856: GO 79200
// list := [ ] ;
78858: LD_ADDR_VAR 0 13
78862: PUSH
78863: EMPTY
78864: ST_TO_ADDR
// if x - r < 0 then
78865: LD_VAR 0 2
78869: PUSH
78870: LD_VAR 0 4
78874: MINUS
78875: PUSH
78876: LD_INT 0
78878: LESS
78879: IFFALSE 78891
// min_x := 0 else
78881: LD_ADDR_VAR 0 7
78885: PUSH
78886: LD_INT 0
78888: ST_TO_ADDR
78889: GO 78907
// min_x := x - r ;
78891: LD_ADDR_VAR 0 7
78895: PUSH
78896: LD_VAR 0 2
78900: PUSH
78901: LD_VAR 0 4
78905: MINUS
78906: ST_TO_ADDR
// if y - r < 0 then
78907: LD_VAR 0 3
78911: PUSH
78912: LD_VAR 0 4
78916: MINUS
78917: PUSH
78918: LD_INT 0
78920: LESS
78921: IFFALSE 78933
// min_y := 0 else
78923: LD_ADDR_VAR 0 8
78927: PUSH
78928: LD_INT 0
78930: ST_TO_ADDR
78931: GO 78949
// min_y := y - r ;
78933: LD_ADDR_VAR 0 8
78937: PUSH
78938: LD_VAR 0 3
78942: PUSH
78943: LD_VAR 0 4
78947: MINUS
78948: ST_TO_ADDR
// max_x := x + r ;
78949: LD_ADDR_VAR 0 9
78953: PUSH
78954: LD_VAR 0 2
78958: PUSH
78959: LD_VAR 0 4
78963: PLUS
78964: ST_TO_ADDR
// max_y := y + r ;
78965: LD_ADDR_VAR 0 10
78969: PUSH
78970: LD_VAR 0 3
78974: PUSH
78975: LD_VAR 0 4
78979: PLUS
78980: ST_TO_ADDR
// for _x = min_x to max_x do
78981: LD_ADDR_VAR 0 11
78985: PUSH
78986: DOUBLE
78987: LD_VAR 0 7
78991: DEC
78992: ST_TO_ADDR
78993: LD_VAR 0 9
78997: PUSH
78998: FOR_TO
78999: IFFALSE 79118
// for _y = min_y to max_y do
79001: LD_ADDR_VAR 0 12
79005: PUSH
79006: DOUBLE
79007: LD_VAR 0 8
79011: DEC
79012: ST_TO_ADDR
79013: LD_VAR 0 10
79017: PUSH
79018: FOR_TO
79019: IFFALSE 79114
// begin if not ValidHex ( _x , _y ) then
79021: LD_VAR 0 11
79025: PPUSH
79026: LD_VAR 0 12
79030: PPUSH
79031: CALL_OW 488
79035: NOT
79036: IFFALSE 79040
// continue ;
79038: GO 79018
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79040: LD_VAR 0 11
79044: PPUSH
79045: LD_VAR 0 12
79049: PPUSH
79050: CALL_OW 351
79054: IFFALSE 79072
79056: PUSH
79057: LD_VAR 0 11
79061: PPUSH
79062: LD_VAR 0 12
79066: PPUSH
79067: CALL_OW 554
79071: AND
79072: IFFALSE 79112
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79074: LD_ADDR_VAR 0 13
79078: PUSH
79079: LD_VAR 0 13
79083: PPUSH
79084: LD_VAR 0 13
79088: PUSH
79089: LD_INT 1
79091: PLUS
79092: PPUSH
79093: LD_VAR 0 11
79097: PUSH
79098: LD_VAR 0 12
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PPUSH
79107: CALL_OW 2
79111: ST_TO_ADDR
// end ;
79112: GO 79018
79114: POP
79115: POP
79116: GO 78998
79118: POP
79119: POP
// if not list then
79120: LD_VAR 0 13
79124: NOT
79125: IFFALSE 79129
// exit ;
79127: GO 79200
// for i in list do
79129: LD_ADDR_VAR 0 6
79133: PUSH
79134: LD_VAR 0 13
79138: PUSH
79139: FOR_IN
79140: IFFALSE 79198
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
79142: LD_VAR 0 1
79146: PPUSH
79147: LD_STRING M
79149: PUSH
79150: LD_VAR 0 6
79154: PUSH
79155: LD_INT 1
79157: ARRAY
79158: PUSH
79159: LD_VAR 0 6
79163: PUSH
79164: LD_INT 2
79166: ARRAY
79167: PUSH
79168: LD_INT 0
79170: PUSH
79171: LD_INT 0
79173: PUSH
79174: LD_INT 0
79176: PUSH
79177: LD_INT 0
79179: PUSH
79180: EMPTY
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: PUSH
79189: EMPTY
79190: LIST
79191: PPUSH
79192: CALL_OW 447
79196: GO 79139
79198: POP
79199: POP
// end ;
79200: LD_VAR 0 5
79204: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
79205: LD_INT 0
79207: PPUSH
79208: PPUSH
79209: PPUSH
79210: PPUSH
79211: PPUSH
79212: PPUSH
79213: PPUSH
79214: PPUSH
79215: PPUSH
79216: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
79217: LD_VAR 0 1
79221: PPUSH
79222: CALL_OW 302
79226: NOT
79227: IFTRUE 79246
79229: PUSH
79230: LD_VAR 0 2
79234: PPUSH
79235: LD_VAR 0 3
79239: PPUSH
79240: CALL_OW 488
79244: NOT
79245: OR
79246: IFTRUE 79255
79248: PUSH
79249: LD_VAR 0 4
79253: NOT
79254: OR
79255: IFFALSE 79259
// exit ;
79257: GO 79798
// if Count ( GetTaskList ( flame ) ) > 10 then
79259: LD_VAR 0 1
79263: PPUSH
79264: CALL_OW 437
79268: PPUSH
79269: CALL 19845 0 1
79273: PUSH
79274: LD_INT 10
79276: GREATER
79277: IFFALSE 79281
// exit ;
79279: GO 79798
// list := [ ] ;
79281: LD_ADDR_VAR 0 13
79285: PUSH
79286: EMPTY
79287: ST_TO_ADDR
// if x - r < 0 then
79288: LD_VAR 0 2
79292: PUSH
79293: LD_VAR 0 4
79297: MINUS
79298: PUSH
79299: LD_INT 0
79301: LESS
79302: IFFALSE 79314
// min_x := 0 else
79304: LD_ADDR_VAR 0 7
79308: PUSH
79309: LD_INT 0
79311: ST_TO_ADDR
79312: GO 79330
// min_x := x - r ;
79314: LD_ADDR_VAR 0 7
79318: PUSH
79319: LD_VAR 0 2
79323: PUSH
79324: LD_VAR 0 4
79328: MINUS
79329: ST_TO_ADDR
// if y - r < 0 then
79330: LD_VAR 0 3
79334: PUSH
79335: LD_VAR 0 4
79339: MINUS
79340: PUSH
79341: LD_INT 0
79343: LESS
79344: IFFALSE 79356
// min_y := 0 else
79346: LD_ADDR_VAR 0 8
79350: PUSH
79351: LD_INT 0
79353: ST_TO_ADDR
79354: GO 79372
// min_y := y - r ;
79356: LD_ADDR_VAR 0 8
79360: PUSH
79361: LD_VAR 0 3
79365: PUSH
79366: LD_VAR 0 4
79370: MINUS
79371: ST_TO_ADDR
// max_x := x + r ;
79372: LD_ADDR_VAR 0 9
79376: PUSH
79377: LD_VAR 0 2
79381: PUSH
79382: LD_VAR 0 4
79386: PLUS
79387: ST_TO_ADDR
// max_y := y + r ;
79388: LD_ADDR_VAR 0 10
79392: PUSH
79393: LD_VAR 0 3
79397: PUSH
79398: LD_VAR 0 4
79402: PLUS
79403: ST_TO_ADDR
// for _x = min_x to max_x do
79404: LD_ADDR_VAR 0 11
79408: PUSH
79409: DOUBLE
79410: LD_VAR 0 7
79414: DEC
79415: ST_TO_ADDR
79416: LD_VAR 0 9
79420: PUSH
79421: FOR_TO
79422: IFFALSE 79541
// for _y = min_y to max_y do
79424: LD_ADDR_VAR 0 12
79428: PUSH
79429: DOUBLE
79430: LD_VAR 0 8
79434: DEC
79435: ST_TO_ADDR
79436: LD_VAR 0 10
79440: PUSH
79441: FOR_TO
79442: IFFALSE 79537
// begin if not ValidHex ( _x , _y ) then
79444: LD_VAR 0 11
79448: PPUSH
79449: LD_VAR 0 12
79453: PPUSH
79454: CALL_OW 488
79458: NOT
79459: IFFALSE 79463
// continue ;
79461: GO 79441
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79463: LD_VAR 0 11
79467: PPUSH
79468: LD_VAR 0 12
79472: PPUSH
79473: CALL_OW 351
79477: IFFALSE 79495
79479: PUSH
79480: LD_VAR 0 11
79484: PPUSH
79485: LD_VAR 0 12
79489: PPUSH
79490: CALL_OW 554
79494: AND
79495: IFFALSE 79535
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79497: LD_ADDR_VAR 0 13
79501: PUSH
79502: LD_VAR 0 13
79506: PPUSH
79507: LD_VAR 0 13
79511: PUSH
79512: LD_INT 1
79514: PLUS
79515: PPUSH
79516: LD_VAR 0 11
79520: PUSH
79521: LD_VAR 0 12
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PPUSH
79530: CALL_OW 2
79534: ST_TO_ADDR
// end ;
79535: GO 79441
79537: POP
79538: POP
79539: GO 79421
79541: POP
79542: POP
// if not list then
79543: LD_VAR 0 13
79547: NOT
79548: IFFALSE 79552
// exit ;
79550: GO 79798
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79552: LD_ADDR_VAR 0 13
79556: PUSH
79557: LD_VAR 0 1
79561: PPUSH
79562: LD_VAR 0 13
79566: PPUSH
79567: LD_INT 1
79569: PPUSH
79570: LD_INT 1
79572: PPUSH
79573: CALL 23251 0 4
79577: ST_TO_ADDR
// ComStop ( flame ) ;
79578: LD_VAR 0 1
79582: PPUSH
79583: CALL_OW 141
// for i in list do
79587: LD_ADDR_VAR 0 6
79591: PUSH
79592: LD_VAR 0 13
79596: PUSH
79597: FOR_IN
79598: IFFALSE 79629
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79600: LD_VAR 0 1
79604: PPUSH
79605: LD_VAR 0 6
79609: PUSH
79610: LD_INT 1
79612: ARRAY
79613: PPUSH
79614: LD_VAR 0 6
79618: PUSH
79619: LD_INT 2
79621: ARRAY
79622: PPUSH
79623: CALL_OW 176
79627: GO 79597
79629: POP
79630: POP
// repeat wait ( 0 0$1 ) ;
79631: LD_INT 35
79633: PPUSH
79634: CALL_OW 67
// task := GetTaskList ( flame ) ;
79638: LD_ADDR_VAR 0 14
79642: PUSH
79643: LD_VAR 0 1
79647: PPUSH
79648: CALL_OW 437
79652: ST_TO_ADDR
// if not task then
79653: LD_VAR 0 14
79657: NOT
79658: IFFALSE 79662
// exit ;
79660: GO 79798
// if task [ 1 ] [ 1 ] <> | then
79662: LD_VAR 0 14
79666: PUSH
79667: LD_INT 1
79669: ARRAY
79670: PUSH
79671: LD_INT 1
79673: ARRAY
79674: PUSH
79675: LD_STRING |
79677: NONEQUAL
79678: IFFALSE 79682
// exit ;
79680: GO 79798
// _x := task [ 1 ] [ 2 ] ;
79682: LD_ADDR_VAR 0 11
79686: PUSH
79687: LD_VAR 0 14
79691: PUSH
79692: LD_INT 1
79694: ARRAY
79695: PUSH
79696: LD_INT 2
79698: ARRAY
79699: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
79700: LD_ADDR_VAR 0 12
79704: PUSH
79705: LD_VAR 0 14
79709: PUSH
79710: LD_INT 1
79712: ARRAY
79713: PUSH
79714: LD_INT 3
79716: ARRAY
79717: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
79718: LD_VAR 0 11
79722: PPUSH
79723: LD_VAR 0 12
79727: PPUSH
79728: CALL_OW 351
79732: NOT
79733: IFTRUE 79752
79735: PUSH
79736: LD_VAR 0 11
79740: PPUSH
79741: LD_VAR 0 12
79745: PPUSH
79746: CALL_OW 554
79750: NOT
79751: OR
79752: IFFALSE 79786
// begin task := Delete ( task , 1 ) ;
79754: LD_ADDR_VAR 0 14
79758: PUSH
79759: LD_VAR 0 14
79763: PPUSH
79764: LD_INT 1
79766: PPUSH
79767: CALL_OW 3
79771: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
79772: LD_VAR 0 1
79776: PPUSH
79777: LD_VAR 0 14
79781: PPUSH
79782: CALL_OW 446
// end ; until not HasTask ( flame ) ;
79786: LD_VAR 0 1
79790: PPUSH
79791: CALL_OW 314
79795: NOT
79796: IFFALSE 79631
// end ;
79798: LD_VAR 0 5
79802: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79803: LD_EXP 113
79807: NOT
79808: IFFALSE 79858
79810: GO 79812
79812: DISABLE
// begin initHack := true ;
79813: LD_ADDR_EXP 113
79817: PUSH
79818: LD_INT 1
79820: ST_TO_ADDR
// hackTanks := [ ] ;
79821: LD_ADDR_EXP 114
79825: PUSH
79826: EMPTY
79827: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79828: LD_ADDR_EXP 115
79832: PUSH
79833: EMPTY
79834: ST_TO_ADDR
// hackLimit := 3 ;
79835: LD_ADDR_EXP 116
79839: PUSH
79840: LD_INT 3
79842: ST_TO_ADDR
// hackDist := 12 ;
79843: LD_ADDR_EXP 117
79847: PUSH
79848: LD_INT 12
79850: ST_TO_ADDR
// hackCounter := [ ] ;
79851: LD_ADDR_EXP 118
79855: PUSH
79856: EMPTY
79857: ST_TO_ADDR
// end ;
79858: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79859: LD_EXP 113
79863: IFFALSE 79881
79865: PUSH
79866: LD_INT 34
79868: PUSH
79869: LD_INT 99
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PPUSH
79876: CALL_OW 69
79880: AND
79881: IFFALSE 80134
79883: GO 79885
79885: DISABLE
79886: LD_INT 0
79888: PPUSH
79889: PPUSH
// begin enable ;
79890: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79891: LD_ADDR_VAR 0 1
79895: PUSH
79896: LD_INT 34
79898: PUSH
79899: LD_INT 99
79901: PUSH
79902: EMPTY
79903: LIST
79904: LIST
79905: PPUSH
79906: CALL_OW 69
79910: PUSH
79911: FOR_IN
79912: IFFALSE 80132
// begin if not i in hackTanks then
79914: LD_VAR 0 1
79918: PUSH
79919: LD_EXP 114
79923: IN
79924: NOT
79925: IFFALSE 80008
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79927: LD_ADDR_EXP 114
79931: PUSH
79932: LD_EXP 114
79936: PPUSH
79937: LD_EXP 114
79941: PUSH
79942: LD_INT 1
79944: PLUS
79945: PPUSH
79946: LD_VAR 0 1
79950: PPUSH
79951: CALL_OW 1
79955: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79956: LD_ADDR_EXP 115
79960: PUSH
79961: LD_EXP 115
79965: PPUSH
79966: LD_EXP 115
79970: PUSH
79971: LD_INT 1
79973: PLUS
79974: PPUSH
79975: EMPTY
79976: PPUSH
79977: CALL_OW 1
79981: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79982: LD_ADDR_EXP 118
79986: PUSH
79987: LD_EXP 118
79991: PPUSH
79992: LD_EXP 118
79996: PUSH
79997: LD_INT 1
79999: PLUS
80000: PPUSH
80001: EMPTY
80002: PPUSH
80003: CALL_OW 1
80007: ST_TO_ADDR
// end ; if not IsOk ( i ) then
80008: LD_VAR 0 1
80012: PPUSH
80013: CALL_OW 302
80017: NOT
80018: IFFALSE 80031
// begin HackUnlinkAll ( i ) ;
80020: LD_VAR 0 1
80024: PPUSH
80025: CALL 80137 0 1
// continue ;
80029: GO 79911
// end ; HackCheckCapturedStatus ( i ) ;
80031: LD_VAR 0 1
80035: PPUSH
80036: CALL 80582 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
80040: LD_ADDR_VAR 0 2
80044: PUSH
80045: LD_INT 81
80047: PUSH
80048: LD_VAR 0 1
80052: PPUSH
80053: CALL_OW 255
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 33
80064: PUSH
80065: LD_INT 3
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: PUSH
80072: LD_INT 91
80074: PUSH
80075: LD_VAR 0 1
80079: PUSH
80080: LD_EXP 117
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: LIST
80089: PUSH
80090: LD_INT 50
80092: PUSH
80093: EMPTY
80094: LIST
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: LIST
80100: LIST
80101: PPUSH
80102: CALL_OW 69
80106: ST_TO_ADDR
// if not tmp then
80107: LD_VAR 0 2
80111: NOT
80112: IFFALSE 80116
// continue ;
80114: GO 79911
// HackLink ( i , tmp ) ;
80116: LD_VAR 0 1
80120: PPUSH
80121: LD_VAR 0 2
80125: PPUSH
80126: CALL 80273 0 2
// end ;
80130: GO 79911
80132: POP
80133: POP
// end ;
80134: PPOPN 2
80136: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
80137: LD_INT 0
80139: PPUSH
80140: PPUSH
80141: PPUSH
// if not hack in hackTanks then
80142: LD_VAR 0 1
80146: PUSH
80147: LD_EXP 114
80151: IN
80152: NOT
80153: IFFALSE 80157
// exit ;
80155: GO 80268
// index := GetElementIndex ( hackTanks , hack ) ;
80157: LD_ADDR_VAR 0 4
80161: PUSH
80162: LD_EXP 114
80166: PPUSH
80167: LD_VAR 0 1
80171: PPUSH
80172: CALL 22546 0 2
80176: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
80177: LD_EXP 115
80181: PUSH
80182: LD_VAR 0 4
80186: ARRAY
80187: IFFALSE 80268
// begin for i in hackTanksCaptured [ index ] do
80189: LD_ADDR_VAR 0 3
80193: PUSH
80194: LD_EXP 115
80198: PUSH
80199: LD_VAR 0 4
80203: ARRAY
80204: PUSH
80205: FOR_IN
80206: IFFALSE 80232
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
80208: LD_VAR 0 3
80212: PUSH
80213: LD_INT 1
80215: ARRAY
80216: PPUSH
80217: LD_VAR 0 3
80221: PUSH
80222: LD_INT 2
80224: ARRAY
80225: PPUSH
80226: CALL_OW 235
80230: GO 80205
80232: POP
80233: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
80234: LD_ADDR_EXP 115
80238: PUSH
80239: LD_EXP 115
80243: PPUSH
80244: LD_VAR 0 4
80248: PPUSH
80249: EMPTY
80250: PPUSH
80251: CALL_OW 1
80255: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
80256: LD_VAR 0 1
80260: PPUSH
80261: LD_INT 0
80263: PPUSH
80264: CALL_OW 505
// end ; end ;
80268: LD_VAR 0 2
80272: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
80273: LD_INT 0
80275: PPUSH
80276: PPUSH
80277: PPUSH
// if not hack in hackTanks or not vehicles then
80278: LD_VAR 0 1
80282: PUSH
80283: LD_EXP 114
80287: IN
80288: NOT
80289: IFTRUE 80298
80291: PUSH
80292: LD_VAR 0 2
80296: NOT
80297: OR
80298: IFFALSE 80302
// exit ;
80300: GO 80577
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
80302: LD_ADDR_VAR 0 2
80306: PUSH
80307: LD_VAR 0 1
80311: PPUSH
80312: LD_VAR 0 2
80316: PPUSH
80317: LD_INT 1
80319: PPUSH
80320: LD_INT 1
80322: PPUSH
80323: CALL 23198 0 4
80327: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
80328: LD_ADDR_VAR 0 5
80332: PUSH
80333: LD_EXP 114
80337: PPUSH
80338: LD_VAR 0 1
80342: PPUSH
80343: CALL 22546 0 2
80347: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
80348: LD_EXP 115
80352: PUSH
80353: LD_VAR 0 5
80357: ARRAY
80358: PUSH
80359: LD_EXP 116
80363: LESS
80364: IFFALSE 80553
// begin for i := 1 to vehicles do
80366: LD_ADDR_VAR 0 4
80370: PUSH
80371: DOUBLE
80372: LD_INT 1
80374: DEC
80375: ST_TO_ADDR
80376: LD_VAR 0 2
80380: PUSH
80381: FOR_TO
80382: IFFALSE 80551
// begin if hackTanksCaptured [ index ] = hackLimit then
80384: LD_EXP 115
80388: PUSH
80389: LD_VAR 0 5
80393: ARRAY
80394: PUSH
80395: LD_EXP 116
80399: EQUAL
80400: IFFALSE 80404
// break ;
80402: GO 80551
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80404: LD_ADDR_EXP 118
80408: PUSH
80409: LD_EXP 118
80413: PPUSH
80414: LD_VAR 0 5
80418: PPUSH
80419: LD_EXP 118
80423: PUSH
80424: LD_VAR 0 5
80428: ARRAY
80429: PUSH
80430: LD_INT 1
80432: PLUS
80433: PPUSH
80434: CALL_OW 1
80438: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80439: LD_ADDR_EXP 115
80443: PUSH
80444: LD_EXP 115
80448: PPUSH
80449: LD_VAR 0 5
80453: PUSH
80454: LD_EXP 115
80458: PUSH
80459: LD_VAR 0 5
80463: ARRAY
80464: PUSH
80465: LD_INT 1
80467: PLUS
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PPUSH
80473: LD_VAR 0 2
80477: PUSH
80478: LD_VAR 0 4
80482: ARRAY
80483: PUSH
80484: LD_VAR 0 2
80488: PUSH
80489: LD_VAR 0 4
80493: ARRAY
80494: PPUSH
80495: CALL_OW 255
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PPUSH
80504: CALL 22763 0 3
80508: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80509: LD_VAR 0 2
80513: PUSH
80514: LD_VAR 0 4
80518: ARRAY
80519: PPUSH
80520: LD_VAR 0 1
80524: PPUSH
80525: CALL_OW 255
80529: PPUSH
80530: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80534: LD_VAR 0 2
80538: PUSH
80539: LD_VAR 0 4
80543: ARRAY
80544: PPUSH
80545: CALL_OW 141
// end ;
80549: GO 80381
80551: POP
80552: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80553: LD_VAR 0 1
80557: PPUSH
80558: LD_EXP 115
80562: PUSH
80563: LD_VAR 0 5
80567: ARRAY
80568: PUSH
80569: LD_INT 0
80571: PLUS
80572: PPUSH
80573: CALL_OW 505
// end ;
80577: LD_VAR 0 3
80581: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80582: LD_INT 0
80584: PPUSH
80585: PPUSH
80586: PPUSH
80587: PPUSH
// if not hack in hackTanks then
80588: LD_VAR 0 1
80592: PUSH
80593: LD_EXP 114
80597: IN
80598: NOT
80599: IFFALSE 80603
// exit ;
80601: GO 80847
// index := GetElementIndex ( hackTanks , hack ) ;
80603: LD_ADDR_VAR 0 4
80607: PUSH
80608: LD_EXP 114
80612: PPUSH
80613: LD_VAR 0 1
80617: PPUSH
80618: CALL 22546 0 2
80622: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80623: LD_ADDR_VAR 0 3
80627: PUSH
80628: DOUBLE
80629: LD_EXP 115
80633: PUSH
80634: LD_VAR 0 4
80638: ARRAY
80639: INC
80640: ST_TO_ADDR
80641: LD_INT 1
80643: PUSH
80644: FOR_DOWNTO
80645: IFFALSE 80821
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80647: LD_ADDR_VAR 0 5
80651: PUSH
80652: LD_EXP 115
80656: PUSH
80657: LD_VAR 0 4
80661: ARRAY
80662: PUSH
80663: LD_VAR 0 3
80667: ARRAY
80668: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80669: LD_VAR 0 5
80673: PUSH
80674: LD_INT 1
80676: ARRAY
80677: PPUSH
80678: CALL_OW 302
80682: NOT
80683: IFTRUE 80711
80685: PUSH
80686: LD_VAR 0 5
80690: PUSH
80691: LD_INT 1
80693: ARRAY
80694: PPUSH
80695: CALL_OW 255
80699: PUSH
80700: LD_VAR 0 1
80704: PPUSH
80705: CALL_OW 255
80709: NONEQUAL
80710: OR
80711: IFFALSE 80819
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80713: LD_VAR 0 5
80717: PUSH
80718: LD_INT 1
80720: ARRAY
80721: PPUSH
80722: CALL_OW 305
80726: IFFALSE 80754
80728: PUSH
80729: LD_VAR 0 5
80733: PUSH
80734: LD_INT 1
80736: ARRAY
80737: PPUSH
80738: CALL_OW 255
80742: PUSH
80743: LD_VAR 0 1
80747: PPUSH
80748: CALL_OW 255
80752: EQUAL
80753: AND
80754: IFFALSE 80778
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80756: LD_VAR 0 5
80760: PUSH
80761: LD_INT 1
80763: ARRAY
80764: PPUSH
80765: LD_VAR 0 5
80769: PUSH
80770: LD_INT 2
80772: ARRAY
80773: PPUSH
80774: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80778: LD_ADDR_EXP 115
80782: PUSH
80783: LD_EXP 115
80787: PPUSH
80788: LD_VAR 0 4
80792: PPUSH
80793: LD_EXP 115
80797: PUSH
80798: LD_VAR 0 4
80802: ARRAY
80803: PPUSH
80804: LD_VAR 0 3
80808: PPUSH
80809: CALL_OW 3
80813: PPUSH
80814: CALL_OW 1
80818: ST_TO_ADDR
// end ; end ;
80819: GO 80644
80821: POP
80822: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80823: LD_VAR 0 1
80827: PPUSH
80828: LD_EXP 115
80832: PUSH
80833: LD_VAR 0 4
80837: ARRAY
80838: PUSH
80839: LD_INT 0
80841: PLUS
80842: PPUSH
80843: CALL_OW 505
// end ;
80847: LD_VAR 0 2
80851: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80852: LD_INT 0
80854: PPUSH
80855: PPUSH
80856: PPUSH
80857: PPUSH
// if not hack in hackTanks then
80858: LD_VAR 0 1
80862: PUSH
80863: LD_EXP 114
80867: IN
80868: NOT
80869: IFFALSE 80873
// exit ;
80871: GO 80958
// index := GetElementIndex ( hackTanks , hack ) ;
80873: LD_ADDR_VAR 0 5
80877: PUSH
80878: LD_EXP 114
80882: PPUSH
80883: LD_VAR 0 1
80887: PPUSH
80888: CALL 22546 0 2
80892: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80893: LD_ADDR_VAR 0 4
80897: PUSH
80898: DOUBLE
80899: LD_INT 1
80901: DEC
80902: ST_TO_ADDR
80903: LD_EXP 115
80907: PUSH
80908: LD_VAR 0 5
80912: ARRAY
80913: PUSH
80914: FOR_TO
80915: IFFALSE 80956
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80917: LD_EXP 115
80921: PUSH
80922: LD_VAR 0 5
80926: ARRAY
80927: PUSH
80928: LD_VAR 0 4
80932: ARRAY
80933: PUSH
80934: LD_INT 1
80936: ARRAY
80937: PUSH
80938: LD_VAR 0 2
80942: EQUAL
80943: IFFALSE 80954
// KillUnit ( vehicle ) ;
80945: LD_VAR 0 2
80949: PPUSH
80950: CALL_OW 66
80954: GO 80914
80956: POP
80957: POP
// end ;
80958: LD_VAR 0 3
80962: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
80963: LD_EXP 119
80967: NOT
80968: IFFALSE 81101
80970: GO 80972
80972: DISABLE
80973: LD_INT 0
80975: PPUSH
// begin initMiner := true ;
80976: LD_ADDR_EXP 119
80980: PUSH
80981: LD_INT 1
80983: ST_TO_ADDR
// minersList := [ ] ;
80984: LD_ADDR_EXP 120
80988: PUSH
80989: EMPTY
80990: ST_TO_ADDR
// minerMinesList := [ ] ;
80991: LD_ADDR_EXP 121
80995: PUSH
80996: EMPTY
80997: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
80998: LD_ADDR_EXP 122
81002: PUSH
81003: LD_INT 10
81005: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
81006: LD_ADDR_VAR 0 1
81010: PUSH
81011: LD_INT 34
81013: PUSH
81014: LD_INT 81
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: PPUSH
81021: CALL_OW 69
81025: PUSH
81026: FOR_IN
81027: IFFALSE 81099
// begin if not i in minersList then
81029: LD_VAR 0 1
81033: PUSH
81034: LD_EXP 120
81038: IN
81039: NOT
81040: IFFALSE 81097
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
81042: LD_ADDR_EXP 120
81046: PUSH
81047: LD_EXP 120
81051: PPUSH
81052: LD_EXP 120
81056: PUSH
81057: LD_INT 1
81059: PLUS
81060: PPUSH
81061: LD_VAR 0 1
81065: PPUSH
81066: CALL_OW 1
81070: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
81071: LD_ADDR_EXP 121
81075: PUSH
81076: LD_EXP 121
81080: PPUSH
81081: LD_EXP 121
81085: PUSH
81086: LD_INT 1
81088: PLUS
81089: PPUSH
81090: EMPTY
81091: PPUSH
81092: CALL_OW 1
81096: ST_TO_ADDR
// end end ;
81097: GO 81026
81099: POP
81100: POP
// end ;
81101: PPOPN 1
81103: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
81104: LD_EXP 119
81108: IFFALSE 81139
81110: PUSH
81111: LD_EXP 121
81115: PPUSH
81116: CALL 19845 0 1
81120: IFTRUE 81138
81122: PUSH
81123: LD_INT 34
81125: PUSH
81126: LD_INT 81
81128: PUSH
81129: EMPTY
81130: LIST
81131: LIST
81132: PPUSH
81133: CALL_OW 69
81137: OR
81138: AND
81139: IFFALSE 81659
81141: GO 81143
81143: DISABLE
81144: LD_INT 0
81146: PPUSH
81147: PPUSH
81148: PPUSH
81149: PPUSH
// begin enable ;
81150: ENABLE
// for i := minerMinesList downto 1 do
81151: LD_ADDR_VAR 0 1
81155: PUSH
81156: DOUBLE
81157: LD_EXP 121
81161: INC
81162: ST_TO_ADDR
81163: LD_INT 1
81165: PUSH
81166: FOR_DOWNTO
81167: IFFALSE 81657
// begin side := GetSide ( minersList [ i ] ) ;
81169: LD_ADDR_VAR 0 3
81173: PUSH
81174: LD_EXP 120
81178: PUSH
81179: LD_VAR 0 1
81183: ARRAY
81184: PPUSH
81185: CALL_OW 255
81189: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
81190: LD_EXP 120
81194: PUSH
81195: LD_VAR 0 1
81199: ARRAY
81200: PPUSH
81201: CALL_OW 300
81205: IFFALSE 81226
81207: PUSH
81208: LD_VAR 0 3
81212: PUSH
81213: LD_OWVAR 2
81217: PUSH
81218: LD_INT 9
81220: PUSH
81221: EMPTY
81222: LIST
81223: LIST
81224: IN
81225: AND
81226: IFFALSE 81259
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
81228: LD_EXP 120
81232: PUSH
81233: LD_VAR 0 1
81237: ARRAY
81238: PPUSH
81239: LD_EXP 121
81243: PUSH
81244: LD_VAR 0 1
81248: ARRAY
81249: PPUSH
81250: CALL 19845 0 1
81254: PPUSH
81255: CALL_OW 505
// if not minerMinesList [ i ] then
81259: LD_EXP 121
81263: PUSH
81264: LD_VAR 0 1
81268: ARRAY
81269: NOT
81270: IFFALSE 81274
// continue ;
81272: GO 81166
// for j := minerMinesList [ i ] downto 1 do
81274: LD_ADDR_VAR 0 2
81278: PUSH
81279: DOUBLE
81280: LD_EXP 121
81284: PUSH
81285: LD_VAR 0 1
81289: ARRAY
81290: INC
81291: ST_TO_ADDR
81292: LD_INT 1
81294: PUSH
81295: FOR_DOWNTO
81296: IFFALSE 81653
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
81298: LD_EXP 120
81302: PUSH
81303: LD_VAR 0 1
81307: ARRAY
81308: PPUSH
81309: CALL_OW 301
81313: IFTRUE 81333
81315: PUSH
81316: LD_EXP 120
81320: PUSH
81321: LD_VAR 0 1
81325: ARRAY
81326: PPUSH
81327: CALL_OW 305
81331: NOT
81332: OR
81333: IFFALSE 81424
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81335: LD_EXP 121
81339: PUSH
81340: LD_VAR 0 1
81344: ARRAY
81345: PUSH
81346: LD_VAR 0 2
81350: ARRAY
81351: PUSH
81352: LD_INT 1
81354: ARRAY
81355: PPUSH
81356: LD_EXP 121
81360: PUSH
81361: LD_VAR 0 1
81365: ARRAY
81366: PUSH
81367: LD_VAR 0 2
81371: ARRAY
81372: PUSH
81373: LD_INT 2
81375: ARRAY
81376: PPUSH
81377: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81381: LD_ADDR_EXP 121
81385: PUSH
81386: LD_EXP 121
81390: PPUSH
81391: LD_VAR 0 1
81395: PPUSH
81396: LD_EXP 121
81400: PUSH
81401: LD_VAR 0 1
81405: ARRAY
81406: PPUSH
81407: LD_VAR 0 2
81411: PPUSH
81412: CALL_OW 3
81416: PPUSH
81417: CALL_OW 1
81421: ST_TO_ADDR
// continue ;
81422: GO 81295
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
81424: LD_ADDR_VAR 0 4
81428: PUSH
81429: LD_EXP 121
81433: PUSH
81434: LD_VAR 0 1
81438: ARRAY
81439: PUSH
81440: LD_VAR 0 2
81444: ARRAY
81445: PUSH
81446: LD_INT 1
81448: ARRAY
81449: PPUSH
81450: LD_EXP 121
81454: PUSH
81455: LD_VAR 0 1
81459: ARRAY
81460: PUSH
81461: LD_VAR 0 2
81465: ARRAY
81466: PUSH
81467: LD_INT 2
81469: ARRAY
81470: PPUSH
81471: CALL_OW 428
81475: ST_TO_ADDR
// if not tmp then
81476: LD_VAR 0 4
81480: NOT
81481: IFFALSE 81485
// continue ;
81483: GO 81295
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
81485: LD_VAR 0 4
81489: PUSH
81490: LD_INT 81
81492: PUSH
81493: LD_VAR 0 3
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: PPUSH
81502: CALL_OW 69
81506: IN
81507: IFFALSE 81557
81509: PUSH
81510: LD_EXP 121
81514: PUSH
81515: LD_VAR 0 1
81519: ARRAY
81520: PUSH
81521: LD_VAR 0 2
81525: ARRAY
81526: PUSH
81527: LD_INT 1
81529: ARRAY
81530: PPUSH
81531: LD_EXP 121
81535: PUSH
81536: LD_VAR 0 1
81540: ARRAY
81541: PUSH
81542: LD_VAR 0 2
81546: ARRAY
81547: PUSH
81548: LD_INT 2
81550: ARRAY
81551: PPUSH
81552: CALL_OW 458
81556: AND
81557: IFFALSE 81651
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81559: LD_EXP 121
81563: PUSH
81564: LD_VAR 0 1
81568: ARRAY
81569: PUSH
81570: LD_VAR 0 2
81574: ARRAY
81575: PUSH
81576: LD_INT 1
81578: ARRAY
81579: PPUSH
81580: LD_EXP 121
81584: PUSH
81585: LD_VAR 0 1
81589: ARRAY
81590: PUSH
81591: LD_VAR 0 2
81595: ARRAY
81596: PUSH
81597: LD_INT 2
81599: ARRAY
81600: PPUSH
81601: LD_VAR 0 3
81605: PPUSH
81606: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81610: LD_ADDR_EXP 121
81614: PUSH
81615: LD_EXP 121
81619: PPUSH
81620: LD_VAR 0 1
81624: PPUSH
81625: LD_EXP 121
81629: PUSH
81630: LD_VAR 0 1
81634: ARRAY
81635: PPUSH
81636: LD_VAR 0 2
81640: PPUSH
81641: CALL_OW 3
81645: PPUSH
81646: CALL_OW 1
81650: ST_TO_ADDR
// end ; end ;
81651: GO 81295
81653: POP
81654: POP
// end ;
81655: GO 81166
81657: POP
81658: POP
// end ;
81659: PPOPN 4
81661: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
81662: LD_INT 0
81664: PPUSH
81665: PPUSH
81666: PPUSH
81667: PPUSH
// result := false ;
81668: LD_ADDR_VAR 0 4
81672: PUSH
81673: LD_INT 0
81675: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81676: LD_VAR 0 1
81680: PPUSH
81681: CALL_OW 264
81685: PUSH
81686: LD_INT 81
81688: EQUAL
81689: NOT
81690: IFFALSE 81694
// exit ;
81692: GO 82064
// side := GetSide ( unit ) ;
81694: LD_ADDR_VAR 0 6
81698: PUSH
81699: LD_VAR 0 1
81703: PPUSH
81704: CALL_OW 255
81708: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
81709: LD_ADDR_VAR 0 5
81713: PUSH
81714: LD_EXP 120
81718: PPUSH
81719: LD_VAR 0 1
81723: PPUSH
81724: CALL 22546 0 2
81728: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81729: LD_EXP 121
81733: PUSH
81734: LD_VAR 0 5
81738: ARRAY
81739: PUSH
81740: LD_EXP 122
81744: GREATEREQUAL
81745: IFFALSE 81749
// exit ;
81747: GO 82064
// ComMoveXY ( unit , x , y ) ;
81749: LD_VAR 0 1
81753: PPUSH
81754: LD_VAR 0 2
81758: PPUSH
81759: LD_VAR 0 3
81763: PPUSH
81764: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81768: LD_INT 35
81770: PPUSH
81771: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81775: LD_VAR 0 1
81779: PPUSH
81780: LD_VAR 0 2
81784: PPUSH
81785: LD_VAR 0 3
81789: PPUSH
81790: CALL 54602 0 3
81794: NOT
81795: IFFALSE 81808
81797: PUSH
81798: LD_VAR 0 1
81802: PPUSH
81803: CALL_OW 314
81807: AND
81808: IFFALSE 81812
// exit ;
81810: GO 82064
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81812: LD_VAR 0 2
81816: PPUSH
81817: LD_VAR 0 3
81821: PPUSH
81822: CALL_OW 428
81826: PUSH
81827: LD_VAR 0 1
81831: EQUAL
81832: IFFALSE 81846
81834: PUSH
81835: LD_VAR 0 1
81839: PPUSH
81840: CALL_OW 314
81844: NOT
81845: AND
81846: IFFALSE 81768
// if MineAtPos ( x , y ) then
81848: LD_VAR 0 2
81852: PPUSH
81853: LD_VAR 0 3
81857: PPUSH
81858: CALL_OW 458
81862: IFFALSE 81866
// exit ;
81864: GO 82064
// if your_side = side then
81866: LD_OWVAR 2
81870: PUSH
81871: LD_VAR 0 6
81875: EQUAL
81876: IFFALSE 81895
// PlaySoundXY ( x , y , PlantMine ) ;
81878: LD_VAR 0 2
81882: PPUSH
81883: LD_VAR 0 3
81887: PPUSH
81888: LD_STRING PlantMine
81890: PPUSH
81891: CALL_OW 366
// repeat wait ( 1 ) ;
81895: LD_INT 1
81897: PPUSH
81898: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
81902: LD_VAR 0 2
81906: PPUSH
81907: LD_VAR 0 3
81911: PPUSH
81912: LD_VAR 0 6
81916: PPUSH
81917: LD_INT 0
81919: PPUSH
81920: CALL_OW 454
81924: IFFALSE 81895
// if MineAtPos ( x , y ) then
81926: LD_VAR 0 2
81930: PPUSH
81931: LD_VAR 0 3
81935: PPUSH
81936: CALL_OW 458
81940: IFFALSE 82056
// begin for i in minerMinesList [ index ] do
81942: LD_ADDR_VAR 0 7
81946: PUSH
81947: LD_EXP 121
81951: PUSH
81952: LD_VAR 0 5
81956: ARRAY
81957: PUSH
81958: FOR_IN
81959: IFFALSE 82001
// if i [ 1 ] = x and i [ 2 ] = y then
81961: LD_VAR 0 7
81965: PUSH
81966: LD_INT 1
81968: ARRAY
81969: PUSH
81970: LD_VAR 0 2
81974: EQUAL
81975: IFFALSE 81993
81977: PUSH
81978: LD_VAR 0 7
81982: PUSH
81983: LD_INT 2
81985: ARRAY
81986: PUSH
81987: LD_VAR 0 3
81991: EQUAL
81992: AND
81993: IFFALSE 81999
// exit ;
81995: POP
81996: POP
81997: GO 82064
81999: GO 81958
82001: POP
82002: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
82003: LD_ADDR_EXP 121
82007: PUSH
82008: LD_EXP 121
82012: PPUSH
82013: LD_VAR 0 5
82017: PUSH
82018: LD_EXP 121
82022: PUSH
82023: LD_VAR 0 5
82027: ARRAY
82028: PUSH
82029: LD_INT 1
82031: PLUS
82032: PUSH
82033: EMPTY
82034: LIST
82035: LIST
82036: PPUSH
82037: LD_VAR 0 2
82041: PUSH
82042: LD_VAR 0 3
82046: PUSH
82047: EMPTY
82048: LIST
82049: LIST
82050: PPUSH
82051: CALL 22763 0 3
82055: ST_TO_ADDR
// end ; result := true ;
82056: LD_ADDR_VAR 0 4
82060: PUSH
82061: LD_INT 1
82063: ST_TO_ADDR
// end ;
82064: LD_VAR 0 4
82068: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
82069: LD_INT 0
82071: PPUSH
82072: PPUSH
82073: PPUSH
// if not unit in minersList then
82074: LD_VAR 0 1
82078: PUSH
82079: LD_EXP 120
82083: IN
82084: NOT
82085: IFFALSE 82089
// exit ;
82087: GO 82296
// index := GetElementIndex ( minersList , unit ) ;
82089: LD_ADDR_VAR 0 6
82093: PUSH
82094: LD_EXP 120
82098: PPUSH
82099: LD_VAR 0 1
82103: PPUSH
82104: CALL 22546 0 2
82108: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
82109: LD_ADDR_VAR 0 5
82113: PUSH
82114: DOUBLE
82115: LD_EXP 121
82119: PUSH
82120: LD_VAR 0 6
82124: ARRAY
82125: INC
82126: ST_TO_ADDR
82127: LD_INT 1
82129: PUSH
82130: FOR_DOWNTO
82131: IFFALSE 82294
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
82133: LD_EXP 121
82137: PUSH
82138: LD_VAR 0 6
82142: ARRAY
82143: PUSH
82144: LD_VAR 0 5
82148: ARRAY
82149: PUSH
82150: LD_INT 1
82152: ARRAY
82153: PPUSH
82154: LD_EXP 121
82158: PUSH
82159: LD_VAR 0 6
82163: ARRAY
82164: PUSH
82165: LD_VAR 0 5
82169: ARRAY
82170: PUSH
82171: LD_INT 2
82173: ARRAY
82174: PPUSH
82175: LD_VAR 0 2
82179: PPUSH
82180: LD_VAR 0 3
82184: PPUSH
82185: CALL_OW 298
82189: PUSH
82190: LD_INT 6
82192: LESS
82193: IFFALSE 82292
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
82195: LD_EXP 121
82199: PUSH
82200: LD_VAR 0 6
82204: ARRAY
82205: PUSH
82206: LD_VAR 0 5
82210: ARRAY
82211: PUSH
82212: LD_INT 1
82214: ARRAY
82215: PPUSH
82216: LD_EXP 121
82220: PUSH
82221: LD_VAR 0 6
82225: ARRAY
82226: PUSH
82227: LD_VAR 0 5
82231: ARRAY
82232: PUSH
82233: LD_INT 2
82235: ARRAY
82236: PPUSH
82237: LD_VAR 0 1
82241: PPUSH
82242: CALL_OW 255
82246: PPUSH
82247: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
82251: LD_ADDR_EXP 121
82255: PUSH
82256: LD_EXP 121
82260: PPUSH
82261: LD_VAR 0 6
82265: PPUSH
82266: LD_EXP 121
82270: PUSH
82271: LD_VAR 0 6
82275: ARRAY
82276: PPUSH
82277: LD_VAR 0 5
82281: PPUSH
82282: CALL_OW 3
82286: PPUSH
82287: CALL_OW 1
82291: ST_TO_ADDR
// end ; end ;
82292: GO 82130
82294: POP
82295: POP
// end ;
82296: LD_VAR 0 4
82300: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
82301: LD_INT 0
82303: PPUSH
82304: PPUSH
82305: PPUSH
82306: PPUSH
82307: PPUSH
82308: PPUSH
82309: PPUSH
82310: PPUSH
82311: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
82312: LD_VAR 0 1
82316: PPUSH
82317: CALL_OW 264
82321: PUSH
82322: LD_INT 81
82324: EQUAL
82325: NOT
82326: IFTRUE 82341
82328: PUSH
82329: LD_VAR 0 1
82333: PUSH
82334: LD_EXP 120
82338: IN
82339: NOT
82340: OR
82341: IFFALSE 82345
// exit ;
82343: GO 82671
// index := GetElementIndex ( minersList , unit ) ;
82345: LD_ADDR_VAR 0 6
82349: PUSH
82350: LD_EXP 120
82354: PPUSH
82355: LD_VAR 0 1
82359: PPUSH
82360: CALL 22546 0 2
82364: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
82365: LD_ADDR_VAR 0 8
82369: PUSH
82370: LD_EXP 122
82374: PUSH
82375: LD_EXP 121
82379: PUSH
82380: LD_VAR 0 6
82384: ARRAY
82385: MINUS
82386: ST_TO_ADDR
// if not minesFreeAmount then
82387: LD_VAR 0 8
82391: NOT
82392: IFFALSE 82396
// exit ;
82394: GO 82671
// tmp := [ ] ;
82396: LD_ADDR_VAR 0 7
82400: PUSH
82401: EMPTY
82402: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
82403: LD_ADDR_VAR 0 5
82407: PUSH
82408: DOUBLE
82409: LD_INT 1
82411: DEC
82412: ST_TO_ADDR
82413: LD_VAR 0 8
82417: PUSH
82418: FOR_TO
82419: IFFALSE 82618
// begin _d := rand ( 0 , 5 ) ;
82421: LD_ADDR_VAR 0 11
82425: PUSH
82426: LD_INT 0
82428: PPUSH
82429: LD_INT 5
82431: PPUSH
82432: CALL_OW 12
82436: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
82437: LD_ADDR_VAR 0 12
82441: PUSH
82442: LD_INT 2
82444: PPUSH
82445: LD_INT 6
82447: PPUSH
82448: CALL_OW 12
82452: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
82453: LD_ADDR_VAR 0 9
82457: PUSH
82458: LD_VAR 0 2
82462: PPUSH
82463: LD_VAR 0 11
82467: PPUSH
82468: LD_VAR 0 12
82472: PPUSH
82473: CALL_OW 272
82477: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
82478: LD_ADDR_VAR 0 10
82482: PUSH
82483: LD_VAR 0 3
82487: PPUSH
82488: LD_VAR 0 11
82492: PPUSH
82493: LD_VAR 0 12
82497: PPUSH
82498: CALL_OW 273
82502: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82503: LD_VAR 0 9
82507: PPUSH
82508: LD_VAR 0 10
82512: PPUSH
82513: CALL_OW 488
82517: IFFALSE 82541
82519: PUSH
82520: LD_VAR 0 9
82524: PUSH
82525: LD_VAR 0 10
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: PUSH
82534: LD_VAR 0 7
82538: IN
82539: NOT
82540: AND
82541: IFFALSE 82560
82543: PUSH
82544: LD_VAR 0 9
82548: PPUSH
82549: LD_VAR 0 10
82553: PPUSH
82554: CALL_OW 458
82558: NOT
82559: AND
82560: IFFALSE 82602
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82562: LD_ADDR_VAR 0 7
82566: PUSH
82567: LD_VAR 0 7
82571: PPUSH
82572: LD_VAR 0 7
82576: PUSH
82577: LD_INT 1
82579: PLUS
82580: PPUSH
82581: LD_VAR 0 9
82585: PUSH
82586: LD_VAR 0 10
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PPUSH
82595: CALL_OW 1
82599: ST_TO_ADDR
82600: GO 82616
// i := i - 1 ;
82602: LD_ADDR_VAR 0 5
82606: PUSH
82607: LD_VAR 0 5
82611: PUSH
82612: LD_INT 1
82614: MINUS
82615: ST_TO_ADDR
// end ;
82616: GO 82418
82618: POP
82619: POP
// for i in tmp do
82620: LD_ADDR_VAR 0 5
82624: PUSH
82625: LD_VAR 0 7
82629: PUSH
82630: FOR_IN
82631: IFFALSE 82669
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82633: LD_VAR 0 1
82637: PPUSH
82638: LD_VAR 0 5
82642: PUSH
82643: LD_INT 1
82645: ARRAY
82646: PPUSH
82647: LD_VAR 0 5
82651: PUSH
82652: LD_INT 2
82654: ARRAY
82655: PPUSH
82656: CALL 81662 0 3
82660: NOT
82661: IFFALSE 82667
// exit ;
82663: POP
82664: POP
82665: GO 82671
82667: GO 82630
82669: POP
82670: POP
// end ;
82671: LD_VAR 0 4
82675: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
82676: LD_INT 0
82678: PPUSH
82679: PPUSH
82680: PPUSH
82681: PPUSH
82682: PPUSH
82683: PPUSH
82684: PPUSH
82685: PPUSH
82686: PPUSH
// if GetClass ( unit ) <> class_sniper then
82687: LD_VAR 0 1
82691: PPUSH
82692: CALL_OW 257
82696: PUSH
82697: LD_INT 5
82699: NONEQUAL
82700: IFFALSE 82704
// exit ;
82702: GO 83174
// dist := 8 ;
82704: LD_ADDR_VAR 0 5
82708: PUSH
82709: LD_INT 8
82711: ST_TO_ADDR
// viewRange := 12 ;
82712: LD_ADDR_VAR 0 8
82716: PUSH
82717: LD_INT 12
82719: ST_TO_ADDR
// side := GetSide ( unit ) ;
82720: LD_ADDR_VAR 0 6
82724: PUSH
82725: LD_VAR 0 1
82729: PPUSH
82730: CALL_OW 255
82734: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82735: LD_INT 61
82737: PPUSH
82738: LD_VAR 0 6
82742: PPUSH
82743: CALL_OW 321
82747: PUSH
82748: LD_INT 2
82750: EQUAL
82751: IFFALSE 82761
// viewRange := 16 ;
82753: LD_ADDR_VAR 0 8
82757: PUSH
82758: LD_INT 16
82760: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82761: LD_VAR 0 1
82765: PPUSH
82766: LD_VAR 0 2
82770: PPUSH
82771: LD_VAR 0 3
82775: PPUSH
82776: CALL_OW 297
82780: PUSH
82781: LD_VAR 0 5
82785: GREATER
82786: IFFALSE 82865
// begin ComMoveXY ( unit , x , y ) ;
82788: LD_VAR 0 1
82792: PPUSH
82793: LD_VAR 0 2
82797: PPUSH
82798: LD_VAR 0 3
82802: PPUSH
82803: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82807: LD_INT 35
82809: PPUSH
82810: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82814: LD_VAR 0 1
82818: PPUSH
82819: LD_VAR 0 2
82823: PPUSH
82824: LD_VAR 0 3
82828: PPUSH
82829: CALL 54602 0 3
82833: NOT
82834: IFFALSE 82838
// exit ;
82836: GO 83174
// until GetDistUnitXY ( unit , x , y ) < dist ;
82838: LD_VAR 0 1
82842: PPUSH
82843: LD_VAR 0 2
82847: PPUSH
82848: LD_VAR 0 3
82852: PPUSH
82853: CALL_OW 297
82857: PUSH
82858: LD_VAR 0 5
82862: LESS
82863: IFFALSE 82807
// end ; ComTurnXY ( unit , x , y ) ;
82865: LD_VAR 0 1
82869: PPUSH
82870: LD_VAR 0 2
82874: PPUSH
82875: LD_VAR 0 3
82879: PPUSH
82880: CALL_OW 118
// repeat if Multiplayer then
82884: LD_OWVAR 4
82888: IFFALSE 82899
// wait ( 35 ) else
82890: LD_INT 35
82892: PPUSH
82893: CALL_OW 67
82897: GO 82906
// wait ( 5 ) ;
82899: LD_INT 5
82901: PPUSH
82902: CALL_OW 67
// _d := GetDir ( unit ) ;
82906: LD_ADDR_VAR 0 11
82910: PUSH
82911: LD_VAR 0 1
82915: PPUSH
82916: CALL_OW 254
82920: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
82921: LD_ADDR_VAR 0 7
82925: PUSH
82926: LD_VAR 0 1
82930: PPUSH
82931: CALL_OW 250
82935: PPUSH
82936: LD_VAR 0 1
82940: PPUSH
82941: CALL_OW 251
82945: PPUSH
82946: LD_VAR 0 2
82950: PPUSH
82951: LD_VAR 0 3
82955: PPUSH
82956: CALL 57238 0 4
82960: ST_TO_ADDR
// until dir = _d ;
82961: LD_VAR 0 7
82965: PUSH
82966: LD_VAR 0 11
82970: EQUAL
82971: IFFALSE 82884
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
82973: LD_ADDR_VAR 0 9
82977: PUSH
82978: LD_VAR 0 1
82982: PPUSH
82983: CALL_OW 250
82987: PPUSH
82988: LD_VAR 0 7
82992: PPUSH
82993: LD_VAR 0 5
82997: PPUSH
82998: CALL_OW 272
83002: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
83003: LD_ADDR_VAR 0 10
83007: PUSH
83008: LD_VAR 0 1
83012: PPUSH
83013: CALL_OW 251
83017: PPUSH
83018: LD_VAR 0 7
83022: PPUSH
83023: LD_VAR 0 5
83027: PPUSH
83028: CALL_OW 273
83032: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
83033: LD_VAR 0 9
83037: PPUSH
83038: LD_VAR 0 10
83042: PPUSH
83043: CALL_OW 488
83047: NOT
83048: IFFALSE 83052
// exit ;
83050: GO 83174
// ComAnimCustom ( unit , 1 ) ;
83052: LD_VAR 0 1
83056: PPUSH
83057: LD_INT 1
83059: PPUSH
83060: CALL_OW 592
// p := 0 ;
83064: LD_ADDR_VAR 0 12
83068: PUSH
83069: LD_INT 0
83071: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
83072: LD_VAR 0 9
83076: PPUSH
83077: LD_VAR 0 10
83081: PPUSH
83082: LD_VAR 0 6
83086: PPUSH
83087: LD_VAR 0 8
83091: PPUSH
83092: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
83096: LD_INT 35
83098: PPUSH
83099: CALL_OW 67
// p := Inc ( p ) ;
83103: LD_ADDR_VAR 0 12
83107: PUSH
83108: LD_VAR 0 12
83112: PPUSH
83113: CALL 57194 0 1
83117: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
83118: LD_VAR 0 12
83122: PUSH
83123: LD_INT 3
83125: EQUAL
83126: IFTRUE 83140
83128: PUSH
83129: LD_VAR 0 1
83133: PPUSH
83134: CALL_OW 302
83138: NOT
83139: OR
83140: IFTRUE 83153
83142: PUSH
83143: LD_VAR 0 1
83147: PPUSH
83148: CALL_OW 301
83152: OR
83153: IFFALSE 83096
// RemoveSeeing ( _x , _y , side ) ;
83155: LD_VAR 0 9
83159: PPUSH
83160: LD_VAR 0 10
83164: PPUSH
83165: LD_VAR 0 6
83169: PPUSH
83170: CALL_OW 331
// end ;
83174: LD_VAR 0 4
83178: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
83179: LD_INT 0
83181: PPUSH
83182: PPUSH
83183: PPUSH
83184: PPUSH
83185: PPUSH
83186: PPUSH
83187: PPUSH
83188: PPUSH
83189: PPUSH
83190: PPUSH
83191: PPUSH
// if not unit then
83192: LD_VAR 0 1
83196: NOT
83197: IFFALSE 83201
// exit ;
83199: GO 83472
// side := GetSide ( unit ) ;
83201: LD_ADDR_VAR 0 3
83205: PUSH
83206: LD_VAR 0 1
83210: PPUSH
83211: CALL_OW 255
83215: ST_TO_ADDR
// x := GetX ( unit ) ;
83216: LD_ADDR_VAR 0 5
83220: PUSH
83221: LD_VAR 0 1
83225: PPUSH
83226: CALL_OW 250
83230: ST_TO_ADDR
// y := GetY ( unit ) ;
83231: LD_ADDR_VAR 0 6
83235: PUSH
83236: LD_VAR 0 1
83240: PPUSH
83241: CALL_OW 251
83245: ST_TO_ADDR
// r := 8 ;
83246: LD_ADDR_VAR 0 4
83250: PUSH
83251: LD_INT 8
83253: ST_TO_ADDR
// if x - r < 0 then
83254: LD_VAR 0 5
83258: PUSH
83259: LD_VAR 0 4
83263: MINUS
83264: PUSH
83265: LD_INT 0
83267: LESS
83268: IFFALSE 83280
// min_x := 0 else
83270: LD_ADDR_VAR 0 7
83274: PUSH
83275: LD_INT 0
83277: ST_TO_ADDR
83278: GO 83296
// min_x := x - r ;
83280: LD_ADDR_VAR 0 7
83284: PUSH
83285: LD_VAR 0 5
83289: PUSH
83290: LD_VAR 0 4
83294: MINUS
83295: ST_TO_ADDR
// if y - r < 0 then
83296: LD_VAR 0 6
83300: PUSH
83301: LD_VAR 0 4
83305: MINUS
83306: PUSH
83307: LD_INT 0
83309: LESS
83310: IFFALSE 83322
// min_y := 0 else
83312: LD_ADDR_VAR 0 8
83316: PUSH
83317: LD_INT 0
83319: ST_TO_ADDR
83320: GO 83338
// min_y := y - r ;
83322: LD_ADDR_VAR 0 8
83326: PUSH
83327: LD_VAR 0 6
83331: PUSH
83332: LD_VAR 0 4
83336: MINUS
83337: ST_TO_ADDR
// max_x := x + r ;
83338: LD_ADDR_VAR 0 9
83342: PUSH
83343: LD_VAR 0 5
83347: PUSH
83348: LD_VAR 0 4
83352: PLUS
83353: ST_TO_ADDR
// max_y := y + r ;
83354: LD_ADDR_VAR 0 10
83358: PUSH
83359: LD_VAR 0 6
83363: PUSH
83364: LD_VAR 0 4
83368: PLUS
83369: ST_TO_ADDR
// for _x = min_x to max_x do
83370: LD_ADDR_VAR 0 11
83374: PUSH
83375: DOUBLE
83376: LD_VAR 0 7
83380: DEC
83381: ST_TO_ADDR
83382: LD_VAR 0 9
83386: PUSH
83387: FOR_TO
83388: IFFALSE 83470
// for _y = min_y to max_y do
83390: LD_ADDR_VAR 0 12
83394: PUSH
83395: DOUBLE
83396: LD_VAR 0 8
83400: DEC
83401: ST_TO_ADDR
83402: LD_VAR 0 10
83406: PUSH
83407: FOR_TO
83408: IFFALSE 83466
// begin if not ValidHex ( _x , _y ) then
83410: LD_VAR 0 11
83414: PPUSH
83415: LD_VAR 0 12
83419: PPUSH
83420: CALL_OW 488
83424: NOT
83425: IFFALSE 83429
// continue ;
83427: GO 83407
// if MineAtPos ( _x , _y ) then
83429: LD_VAR 0 11
83433: PPUSH
83434: LD_VAR 0 12
83438: PPUSH
83439: CALL_OW 458
83443: IFFALSE 83464
// ViewMineAtPos ( _x , _y , side ) ;
83445: LD_VAR 0 11
83449: PPUSH
83450: LD_VAR 0 12
83454: PPUSH
83455: LD_VAR 0 3
83459: PPUSH
83460: CALL_OW 457
// end ;
83464: GO 83407
83466: POP
83467: POP
83468: GO 83387
83470: POP
83471: POP
// end ;
83472: LD_VAR 0 2
83476: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
83477: LD_INT 0
83479: PPUSH
83480: PPUSH
83481: PPUSH
83482: PPUSH
83483: PPUSH
83484: PPUSH
83485: PPUSH
// if not units then
83486: LD_VAR 0 1
83490: NOT
83491: IFFALSE 83495
// exit ;
83493: GO 83959
// scaners := [ ] ;
83495: LD_ADDR_VAR 0 6
83499: PUSH
83500: EMPTY
83501: ST_TO_ADDR
// for i in units do
83502: LD_ADDR_VAR 0 3
83506: PUSH
83507: LD_VAR 0 1
83511: PUSH
83512: FOR_IN
83513: IFFALSE 83670
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
83515: LD_VAR 0 3
83519: PPUSH
83520: CALL_OW 264
83524: PUSH
83525: LD_INT 11
83527: NONEQUAL
83528: IFTRUE 83542
83530: PUSH
83531: LD_VAR 0 3
83535: PPUSH
83536: CALL_OW 302
83540: NOT
83541: OR
83542: IFTRUE 83559
83544: PUSH
83545: LD_VAR 0 3
83549: PPUSH
83550: CALL_OW 110
83554: PUSH
83555: LD_INT 502
83557: EQUAL
83558: OR
83559: IFFALSE 83563
// continue ;
83561: GO 83512
// ComStop ( i ) ;
83563: LD_VAR 0 3
83567: PPUSH
83568: CALL_OW 141
// x := GetX ( i ) ;
83572: LD_ADDR_VAR 0 4
83576: PUSH
83577: LD_VAR 0 3
83581: PPUSH
83582: CALL_OW 250
83586: ST_TO_ADDR
// y := GetY ( i ) ;
83587: LD_ADDR_VAR 0 5
83591: PUSH
83592: LD_VAR 0 3
83596: PPUSH
83597: CALL_OW 251
83601: ST_TO_ADDR
// if GetSide ( i ) = your_side then
83602: LD_VAR 0 3
83606: PPUSH
83607: CALL_OW 255
83611: PUSH
83612: LD_OWVAR 2
83616: EQUAL
83617: IFFALSE 83636
// PlaySoundXY ( x , y , mineDetector ) ;
83619: LD_VAR 0 4
83623: PPUSH
83624: LD_VAR 0 5
83628: PPUSH
83629: LD_STRING mineDetector
83631: PPUSH
83632: CALL_OW 366
// scaners := Join ( scaners , i ) ;
83636: LD_ADDR_VAR 0 6
83640: PUSH
83641: LD_VAR 0 6
83645: PPUSH
83646: LD_VAR 0 3
83650: PPUSH
83651: CALL 55821 0 2
83655: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
83656: LD_VAR 0 3
83660: PPUSH
83661: LD_INT 502
83663: PPUSH
83664: CALL_OW 109
// end ;
83668: GO 83512
83670: POP
83671: POP
// if not scaners then
83672: LD_VAR 0 6
83676: NOT
83677: IFFALSE 83681
// exit ;
83679: GO 83959
// wait ( 3 ) ;
83681: LD_INT 3
83683: PPUSH
83684: CALL_OW 67
// timer := 6 ;
83688: LD_ADDR_VAR 0 7
83692: PUSH
83693: LD_INT 6
83695: ST_TO_ADDR
// repeat for i in scaners do
83696: LD_ADDR_VAR 0 3
83700: PUSH
83701: LD_VAR 0 6
83705: PUSH
83706: FOR_IN
83707: IFFALSE 83857
// begin side := GetSide ( i ) ;
83709: LD_ADDR_VAR 0 8
83713: PUSH
83714: LD_VAR 0 3
83718: PPUSH
83719: CALL_OW 255
83723: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
83724: LD_VAR 0 3
83728: PPUSH
83729: CALL_OW 302
83733: NOT
83734: IFTRUE 83747
83736: PUSH
83737: LD_VAR 0 3
83741: PPUSH
83742: CALL_OW 314
83746: OR
83747: IFTRUE 83778
83749: PUSH
83750: LD_VAR 0 3
83754: PPUSH
83755: CALL_OW 263
83759: PUSH
83760: LD_INT 1
83762: EQUAL
83763: IFFALSE 83777
83765: PUSH
83766: LD_VAR 0 3
83770: PPUSH
83771: CALL_OW 311
83775: NOT
83776: AND
83777: OR
83778: IFFALSE 83822
// begin SetUnitDisplayNumber ( i , 0 ) ;
83780: LD_VAR 0 3
83784: PPUSH
83785: LD_INT 0
83787: PPUSH
83788: CALL_OW 505
// SetTag ( i , 0 ) ;
83792: LD_VAR 0 3
83796: PPUSH
83797: LD_INT 0
83799: PPUSH
83800: CALL_OW 109
// scaners := scaners diff i ;
83804: LD_ADDR_VAR 0 6
83808: PUSH
83809: LD_VAR 0 6
83813: PUSH
83814: LD_VAR 0 3
83818: DIFF
83819: ST_TO_ADDR
// continue ;
83820: GO 83706
// end ; if side in [ your_side , 9 ] then
83822: LD_VAR 0 8
83826: PUSH
83827: LD_OWVAR 2
83831: PUSH
83832: LD_INT 9
83834: PUSH
83835: EMPTY
83836: LIST
83837: LIST
83838: IN
83839: IFFALSE 83855
// SetUnitDisplayNumber ( i , timer ) ;
83841: LD_VAR 0 3
83845: PPUSH
83846: LD_VAR 0 7
83850: PPUSH
83851: CALL_OW 505
// end ;
83855: GO 83706
83857: POP
83858: POP
// if not scaners then
83859: LD_VAR 0 6
83863: NOT
83864: IFFALSE 83868
// exit ;
83866: GO 83959
// timer := Dec ( timer ) ;
83868: LD_ADDR_VAR 0 7
83872: PUSH
83873: LD_VAR 0 7
83877: PPUSH
83878: CALL 57216 0 1
83882: ST_TO_ADDR
// wait ( 0 0$1 ) ;
83883: LD_INT 35
83885: PPUSH
83886: CALL_OW 67
// until timer = 0 ;
83890: LD_VAR 0 7
83894: PUSH
83895: LD_INT 0
83897: EQUAL
83898: IFFALSE 83696
// if not scaners then
83900: LD_VAR 0 6
83904: NOT
83905: IFFALSE 83909
// exit ;
83907: GO 83959
// for i in scaners do
83909: LD_ADDR_VAR 0 3
83913: PUSH
83914: LD_VAR 0 6
83918: PUSH
83919: FOR_IN
83920: IFFALSE 83957
// begin SetUnitDisplayNumber ( i , 0 ) ;
83922: LD_VAR 0 3
83926: PPUSH
83927: LD_INT 0
83929: PPUSH
83930: CALL_OW 505
// SetTag ( i , 0 ) ;
83934: LD_VAR 0 3
83938: PPUSH
83939: LD_INT 0
83941: PPUSH
83942: CALL_OW 109
// RevealDetectorMine ( i ) ;
83946: LD_VAR 0 3
83950: PPUSH
83951: CALL 83179 0 1
// end ;
83955: GO 83919
83957: POP
83958: POP
// end ;
83959: LD_VAR 0 2
83963: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
83964: LD_INT 0
83966: PPUSH
// if p1 = mine_detector_mode then
83967: LD_VAR 0 2
83971: PUSH
83972: LD_INT 103
83974: EQUAL
83975: IFFALSE 83986
// DetectMine ( units ) ;
83977: LD_VAR 0 1
83981: PPUSH
83982: CALL 83477 0 1
// end ; end_of_file
83986: LD_VAR 0 7
83990: RET
