// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// PrepareNature ;
  28: CALL 15973 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6834 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 1 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] , [ 2 , 2 , 2 , 2 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 1
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 2
 703: PUSH
 704: LD_INT 2
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 2
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 2
 721: PUSH
 722: LD_INT 2
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 2
 739: PUSH
 740: LD_INT 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4030 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4030 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4030 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4030 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4030 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4030 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4030 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5232 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4845 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4030 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4030 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4030 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareTrap ;
2882: CALL 2895 0 0
// PrepareBunkiers ;
2886: CALL 3485 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = nation_american ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// bc_level = 1 ;
3507: LD_ADDR_OWVAR 43
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// bc_type = b_breastwork ;
3515: LD_ADDR_OWVAR 42
3519: PUSH
3520: LD_INT 31
3522: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 104
3530: PPUSH
3531: LD_INT 59
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 47
3541: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3542: LD_ADDR_EXP 82
3546: PUSH
3547: LD_EXP 82
3551: PUSH
3552: LD_VAR 0 4
3556: ADD
3557: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3558: LD_EXP 59
3562: PPUSH
3563: LD_VAR 0 4
3567: PPUSH
3568: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 101
3579: PPUSH
3580: LD_INT 55
3582: PPUSH
3583: LD_INT 4
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3591: LD_ADDR_EXP 82
3595: PUSH
3596: LD_EXP 82
3600: PUSH
3601: LD_VAR 0 4
3605: ADD
3606: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3607: LD_EXP 59
3611: PPUSH
3612: LD_VAR 0 4
3616: PPUSH
3617: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 132
3628: PPUSH
3629: LD_INT 62
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 47
3639: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3640: LD_ADDR_EXP 83
3644: PUSH
3645: LD_EXP 83
3649: PUSH
3650: LD_VAR 0 4
3654: ADD
3655: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3656: LD_EXP 59
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 134
3677: PPUSH
3678: LD_INT 66
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: CALL_OW 47
3688: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3689: LD_ADDR_EXP 83
3693: PUSH
3694: LD_EXP 83
3698: PUSH
3699: LD_VAR 0 4
3703: ADD
3704: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3705: LD_EXP 59
3709: PPUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: CALL 5086 0 2
// bc_type = b_depot ;
3719: LD_ADDR_OWVAR 42
3723: PUSH
3724: LD_INT 0
3726: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3727: LD_ADDR_EXP 84
3731: PUSH
3732: LD_INT 92
3734: PPUSH
3735: LD_INT 51
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3746: LD_ADDR_EXP 85
3750: PUSH
3751: LD_INT 193
3753: ST_TO_ADDR
// amLeftEngs = [ ] ;
3754: LD_ADDR_EXP 86
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 1
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3891
// begin uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 2
3839: PPUSH
3840: LD_EXP 59
3844: PPUSH
3845: CALL_OW 380
// un = CreateHuman ;
3849: LD_ADDR_VAR 0 3
3853: PUSH
3854: CALL_OW 44
3858: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3859: LD_ADDR_EXP 86
3863: PUSH
3864: LD_EXP 86
3868: PUSH
3869: LD_VAR 0 3
3873: ADD
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_EXP 84
3884: PPUSH
3885: CALL_OW 52
// end ;
3889: GO 3799
3891: POP
3892: POP
// if Difficulty = 3 then
3893: LD_OWVAR 67
3897: PUSH
3898: LD_INT 3
3900: EQUAL
3901: IFFALSE 4025
// begin amRightEngs = [ ] ;
3903: LD_ADDR_EXP 87
3907: PUSH
3908: EMPTY
3909: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 12
3930: PUSH
3931: FOR_TO
3932: IFFALSE 4023
// begin uc_nation = 1 ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// uc_side = 1 ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_INT 1
3949: ST_TO_ADDR
// hc_gallery =  ;
3950: LD_ADDR_OWVAR 33
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// hc_name =  ;
3958: LD_ADDR_OWVAR 26
3962: PUSH
3963: LD_STRING 
3965: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3966: LD_INT 0
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_EXP 59
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 3
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3991: LD_ADDR_EXP 87
3995: PUSH
3996: LD_EXP 87
4000: PUSH
4001: LD_VAR 0 3
4005: ADD
4006: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_EXP 85
4016: PPUSH
4017: CALL_OW 52
// end ;
4021: GO 3931
4023: POP
4024: POP
// end ; end ; end_of_file
4025: LD_VAR 0 1
4029: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// if exist_mode then
4034: LD_VAR 0 2
4038: IFFALSE 4063
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_EXP 49
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 34
4060: ST_TO_ADDR
4061: GO 4078
// unit := NewCharacter ( ident ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 25
4077: ST_TO_ADDR
// result := unit ;
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_VAR 0 4
4087: ST_TO_ADDR
// end ;
4088: LD_VAR 0 3
4092: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
4097: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_VAR 0 1
4107: PUSH
4108: LD_EXP 62
4112: PUSH
4113: LD_EXP 63
4117: PUSH
4118: LD_EXP 64
4122: PUSH
4123: LD_EXP 65
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: DIFF
4134: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4135: LD_ADDR_VAR 0 7
4139: PUSH
4140: LD_VAR 0 1
4144: PUSH
4145: LD_INT 1
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 12
4157: ARRAY
4158: ST_TO_ADDR
// if radio then
4159: LD_VAR 0 4
4163: IFFALSE 4212
// begin if GetSex ( speaker ) = sex_male then
4165: LD_VAR 0 7
4169: PPUSH
4170: CALL_OW 258
4174: PUSH
4175: LD_INT 1
4177: EQUAL
4178: IFFALSE 4196
// SayRadio ( speaker , dialogMID ) else
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 94
4194: GO 4210
// SayRadio ( speaker , dialogFID ) ;
4196: LD_VAR 0 7
4200: PPUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: CALL_OW 94
// end else
4210: GO 4257
// begin if GetSex ( speaker ) = sex_male then
4212: LD_VAR 0 7
4216: PPUSH
4217: CALL_OW 258
4221: PUSH
4222: LD_INT 1
4224: EQUAL
4225: IFFALSE 4243
// Say ( speaker , dialogMID ) else
4227: LD_VAR 0 7
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: CALL_OW 88
4241: GO 4257
// Say ( speaker , dialogFID ) ;
4243: LD_VAR 0 7
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 88
// end ; result := speaker ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_VAR 0 7
4266: ST_TO_ADDR
// end ;
4267: LD_VAR 0 5
4271: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4272: LD_INT 0
4274: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 255
4284: PUSH
4285: LD_VAR 0 3
4289: EQUAL
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 302
4300: AND
4301: IFFALSE 4323
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_EXP 48
4312: PUSH
4313: LD_VAR 0 2
4317: STR
4318: PPUSH
4319: CALL_OW 38
// end ;
4323: LD_VAR 0 4
4327: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
// resultCharactersToSave = [ ] ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: EMPTY
4339: ST_TO_ADDR
// for unit in characters do
4340: LD_ADDR_VAR 0 5
4344: PUSH
4345: LD_VAR 0 1
4349: PUSH
4350: FOR_IN
4351: IFFALSE 4399
// if GetSide ( unit ) = side and IsOK ( unit ) then
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 255
4362: PUSH
4363: LD_VAR 0 3
4367: EQUAL
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 302
4378: AND
4379: IFFALSE 4397
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4381: LD_ADDR_VAR 0 6
4385: PUSH
4386: LD_VAR 0 6
4390: PUSH
4391: LD_VAR 0 5
4395: ADD
4396: ST_TO_ADDR
4397: GO 4350
4399: POP
4400: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4401: LD_VAR 0 6
4405: PPUSH
4406: LD_EXP 48
4410: PUSH
4411: LD_VAR 0 2
4415: STR
4416: PPUSH
4417: CALL_OW 38
// end ;
4421: LD_VAR 0 4
4425: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4426: LD_INT 0
4428: PPUSH
4429: PPUSH
4430: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4431: LD_ADDR_VAR 0 3
4435: PUSH
4436: LD_STRING QMoreInfo
4438: PPUSH
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL_OW 98
4448: ST_TO_ADDR
// case dec of 1 :
4449: LD_VAR 0 3
4453: PUSH
4454: LD_INT 1
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4522
4462: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4463: LD_EXP 62
4467: PPUSH
4468: LD_STRING D2a-Bur-1
4470: PPUSH
4471: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4475: LD_EXP 76
4479: PPUSH
4480: LD_STRING D2a-Pla-1
4482: PPUSH
4483: CALL_OW 88
// q1 = q diff 1 ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: DIFF
4500: ST_TO_ADDR
// if q1 >= 2 then
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 2
4508: GREATEREQUAL
4509: IFFALSE 4520
// Question1 ( q1 ) ;
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL 4426 0 1
// end ; 2 :
4520: GO 4659
4522: LD_INT 2
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4590
4530: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4531: LD_EXP 62
4535: PPUSH
4536: LD_STRING D2b-Bur-1
4538: PPUSH
4539: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4543: LD_EXP 76
4547: PPUSH
4548: LD_STRING D2b-Pla-1
4550: PPUSH
4551: CALL_OW 88
// q1 = q diff 2 ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_VAR 0 1
4564: PUSH
4565: LD_INT 2
4567: DIFF
4568: ST_TO_ADDR
// if q1 >= 2 then
4569: LD_VAR 0 4
4573: PUSH
4574: LD_INT 2
4576: GREATEREQUAL
4577: IFFALSE 4588
// Question1 ( q1 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL 4426 0 1
// end ; 3 :
4588: GO 4659
4590: LD_INT 3
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4658
4598: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4599: LD_EXP 62
4603: PPUSH
4604: LD_STRING D2c-Bur-1
4606: PPUSH
4607: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4611: LD_EXP 76
4615: PPUSH
4616: LD_STRING D2c-Pla-1
4618: PPUSH
4619: CALL_OW 88
// q1 = q diff 3 ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 3
4635: DIFF
4636: ST_TO_ADDR
// if q1 >= 2 then
4637: LD_VAR 0 4
4641: PUSH
4642: LD_INT 2
4644: GREATEREQUAL
4645: IFFALSE 4656
// Question1 ( q1 ) ;
4647: LD_VAR 0 4
4651: PPUSH
4652: CALL 4426 0 1
// end ; end ;
4656: GO 4659
4658: POP
// end ;
4659: LD_VAR 0 2
4663: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL_OW 302
4677: NOT
4678: PUSH
4679: LD_VAR 0 2
4683: PPUSH
4684: CALL_OW 302
4688: NOT
4689: OR
4690: PUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 302
4700: NOT
4701: OR
4702: PUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: CALL_OW 261
4712: PUSH
4713: LD_INT 100
4715: EQUAL
4716: OR
4717: IFFALSE 4721
// exit ;
4719: GO 4840
// AddComTransport ( engineer , depot , mat_oil ) ;
4721: LD_VAR 0 1
4725: PPUSH
4726: LD_VAR 0 2
4730: PPUSH
4731: LD_INT 2
4733: PPUSH
4734: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// until Carry ( engineer ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL_OW 281
4754: IFFALSE 4738
// RemoveTasks ( engineer ) ;
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4765: LD_VAR 0 1
4769: PPUSH
4770: LD_STRING O
4772: PUSH
4773: LD_INT 0
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: LD_INT 0
4789: PUSH
4790: LD_INT 0
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: PPUSH
4805: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4809: LD_INT 35
4811: PPUSH
4812: CALL_OW 67
// until not Carry ( engineer ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: CALL_OW 281
4825: NOT
4826: IFFALSE 4809
// SetFuel ( vehicle , 100 ) ;
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 100
4835: PPUSH
4836: CALL_OW 240
// end ;
4840: LD_VAR 0 4
4844: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4852: LD_ADDR_VAR 0 8
4856: PUSH
4857: LD_INT 48
4859: PUSH
4860: LD_INT 49
4862: PUSH
4863: LD_INT 50
4865: PUSH
4866: LD_INT 20
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: LD_INT 51
4874: PUSH
4875: LD_INT 52
4877: PUSH
4878: LD_INT 69
4880: PUSH
4881: LD_INT 39
4883: PUSH
4884: LD_INT 34
4886: PUSH
4887: LD_INT 40
4889: PUSH
4890: LD_INT 53
4892: PUSH
4893: LD_INT 71
4895: PUSH
4896: LD_INT 57
4898: PUSH
4899: LD_INT 58
4901: PUSH
4902: LD_INT 44
4904: PUSH
4905: LD_INT 32
4907: PUSH
4908: LD_INT 27
4910: PUSH
4911: LD_INT 23
4913: PUSH
4914: LD_INT 33
4916: PUSH
4917: LD_INT 59
4919: PUSH
4920: LD_INT 54
4922: PUSH
4923: LD_INT 55
4925: PUSH
4926: LD_INT 56
4928: PUSH
4929: LD_INT 63
4931: PUSH
4932: LD_INT 64
4934: PUSH
4935: LD_INT 65
4937: PUSH
4938: LD_INT 30
4940: PUSH
4941: LD_INT 31
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 22
4949: PUSH
4950: LD_INT 25
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4987: LD_ADDR_VAR 0 5
4991: PUSH
4992: DOUBLE
4993: LD_INT 1
4995: DEC
4996: ST_TO_ADDR
4997: LD_VAR 0 8
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5079
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5005: LD_VAR 0 8
5009: PUSH
5010: LD_VAR 0 5
5014: ARRAY
5015: PPUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: CALL_OW 321
5025: PUSH
5026: LD_INT 1
5028: EQUAL
5029: PUSH
5030: LD_VAR 0 8
5034: PUSH
5035: LD_VAR 0 5
5039: ARRAY
5040: PPUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: CALL_OW 482
5050: PUSH
5051: LD_INT 1
5053: EQUAL
5054: AND
5055: IFFALSE 5077
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5057: LD_VAR 0 2
5061: PPUSH
5062: LD_VAR 0 8
5066: PUSH
5067: LD_VAR 0 5
5071: ARRAY
5072: PPUSH
5073: CALL_OW 184
5077: GO 5002
5079: POP
5080: POP
// end ;
5081: LD_VAR 0 4
5085: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5086: LD_INT 0
5088: PPUSH
5089: PPUSH
5090: PPUSH
// uc_side := GetSide ( b ) ;
5091: LD_ADDR_OWVAR 20
5095: PUSH
5096: LD_VAR 0 2
5100: PPUSH
5101: CALL_OW 255
5105: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5106: LD_ADDR_OWVAR 21
5110: PUSH
5111: LD_VAR 0 2
5115: PPUSH
5116: CALL_OW 248
5120: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL_OW 380
// un = CreateHuman ;
5136: LD_ADDR_VAR 0 4
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5146: LD_ADDR_VAR 0 5
5150: PUSH
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL_OW 254
5160: PUSH
5161: LD_INT 3
5163: MINUS
5164: ST_TO_ADDR
// if dir < 0 then
5165: LD_VAR 0 5
5169: PUSH
5170: LD_INT 0
5172: LESS
5173: IFFALSE 5189
// dir := 6 + dir ;
5175: LD_ADDR_VAR 0 5
5179: PUSH
5180: LD_INT 6
5182: PUSH
5183: LD_VAR 0 5
5187: PLUS
5188: ST_TO_ADDR
// SetDir ( un , dir ) ;
5189: LD_VAR 0 4
5193: PPUSH
5194: LD_VAR 0 5
5198: PPUSH
5199: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5203: LD_VAR 0 4
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 52
// result = un ;
5217: LD_ADDR_VAR 0 3
5221: PUSH
5222: LD_VAR 0 4
5226: ST_TO_ADDR
// end ;
5227: LD_VAR 0 3
5231: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5232: LD_INT 0
5234: PPUSH
5235: PPUSH
// dir := GetDir ( b ) - 3 ;
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: CALL_OW 254
5250: PUSH
5251: LD_INT 3
5253: MINUS
5254: ST_TO_ADDR
// if dir < 0 then
5255: LD_VAR 0 4
5259: PUSH
5260: LD_INT 0
5262: LESS
5263: IFFALSE 5279
// dir := 6 + dir ;
5265: LD_ADDR_VAR 0 4
5269: PUSH
5270: LD_INT 6
5272: PUSH
5273: LD_VAR 0 4
5277: PLUS
5278: ST_TO_ADDR
// SetDir ( un , dir ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: LD_VAR 0 4
5288: PPUSH
5289: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5293: LD_VAR 0 1
5297: PPUSH
5298: LD_VAR 0 2
5302: PPUSH
5303: CALL_OW 52
// result = un ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_VAR 0 1
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 3
5321: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5322: LD_INT 0
5324: PPUSH
5325: PPUSH
5326: PPUSH
// tmp = [ ] ;
5327: LD_ADDR_VAR 0 5
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// if not vehicles then
5334: LD_VAR 0 1
5338: NOT
5339: IFFALSE 5343
// exit ;
5341: GO 5460
// for i in vehicles do
5343: LD_ADDR_VAR 0 4
5347: PUSH
5348: LD_VAR 0 1
5352: PUSH
5353: FOR_IN
5354: IFFALSE 5444
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5356: LD_ADDR_VAR 0 5
5360: PUSH
5361: LD_VAR 0 5
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_VAR 0 4
5373: PPUSH
5374: CALL_OW 265
5378: PUSH
5379: LD_VAR 0 4
5383: PPUSH
5384: CALL_OW 262
5388: PUSH
5389: LD_VAR 0 4
5393: PPUSH
5394: CALL_OW 263
5398: PUSH
5399: LD_VAR 0 4
5403: PPUSH
5404: CALL_OW 264
5408: PUSH
5409: LD_VAR 0 4
5413: PPUSH
5414: CALL_OW 261
5418: PUSH
5419: LD_VAR 0 4
5423: PPUSH
5424: CALL_OW 256
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: PPUSH
5437: CALL_OW 2
5441: ST_TO_ADDR
5442: GO 5353
5444: POP
5445: POP
// SaveVariable ( tmp , ident ) ;
5446: LD_VAR 0 5
5450: PPUSH
5451: LD_VAR 0 2
5455: PPUSH
5456: CALL_OW 39
// end ;
5460: LD_VAR 0 3
5464: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5465: LD_INT 0
5467: PPUSH
5468: PPUSH
5469: PPUSH
// buildingsToSave = [ ] ;
5470: LD_ADDR_VAR 0 5
5474: PUSH
5475: EMPTY
5476: ST_TO_ADDR
// if not buildings then
5477: LD_VAR 0 1
5481: NOT
5482: IFFALSE 5486
// exit ;
5484: GO 6061
// for i in buildings do
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: LD_VAR 0 1
5495: PUSH
5496: FOR_IN
5497: IFFALSE 6045
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5499: LD_VAR 0 4
5503: PPUSH
5504: CALL_OW 266
5508: PUSH
5509: LD_INT 6
5511: PUSH
5512: LD_INT 7
5514: PUSH
5515: LD_INT 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: IN
5523: IFFALSE 5648
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5525: LD_ADDR_VAR 0 5
5529: PUSH
5530: LD_VAR 0 5
5534: PUSH
5535: LD_VAR 0 4
5539: PPUSH
5540: CALL_OW 266
5544: PUSH
5545: LD_VAR 0 4
5549: PPUSH
5550: CALL_OW 250
5554: PUSH
5555: LD_VAR 0 4
5559: PPUSH
5560: CALL_OW 251
5564: PUSH
5565: LD_VAR 0 4
5569: PPUSH
5570: CALL_OW 254
5574: PUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: CALL_OW 267
5584: PUSH
5585: LD_VAR 0 4
5589: PPUSH
5590: CALL_OW 248
5594: PUSH
5595: LD_VAR 0 4
5599: PPUSH
5600: CALL_OW 256
5604: PUSH
5605: LD_VAR 0 4
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: CALL_OW 268
5617: PUSH
5618: LD_VAR 0 4
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 268
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: ADD
5645: ST_TO_ADDR
5646: GO 6043
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5648: LD_VAR 0 4
5652: PPUSH
5653: CALL_OW 266
5657: PUSH
5658: LD_INT 32
5660: PUSH
5661: LD_INT 33
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: IN
5668: IFFALSE 5776
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5670: LD_ADDR_VAR 0 5
5674: PUSH
5675: LD_VAR 0 5
5679: PUSH
5680: LD_VAR 0 4
5684: PPUSH
5685: CALL_OW 266
5689: PUSH
5690: LD_VAR 0 4
5694: PPUSH
5695: CALL_OW 250
5699: PUSH
5700: LD_VAR 0 4
5704: PPUSH
5705: CALL_OW 251
5709: PUSH
5710: LD_VAR 0 4
5714: PPUSH
5715: CALL_OW 254
5719: PUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: CALL_OW 267
5729: PUSH
5730: LD_VAR 0 4
5734: PPUSH
5735: CALL_OW 248
5739: PUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_VAR 0 4
5754: PPUSH
5755: CALL_OW 269
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: ADD
5773: ST_TO_ADDR
5774: GO 6043
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5776: LD_VAR 0 4
5780: PPUSH
5781: CALL_OW 266
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: IN
5796: IFFALSE 5950
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5798: LD_ADDR_VAR 0 5
5802: PUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_VAR 0 4
5812: PPUSH
5813: CALL_OW 266
5817: PUSH
5818: LD_VAR 0 4
5822: PPUSH
5823: CALL_OW 250
5827: PUSH
5828: LD_VAR 0 4
5832: PPUSH
5833: CALL_OW 251
5837: PUSH
5838: LD_VAR 0 4
5842: PPUSH
5843: CALL_OW 254
5847: PUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 267
5857: PUSH
5858: LD_VAR 0 4
5862: PPUSH
5863: CALL_OW 248
5867: PUSH
5868: LD_VAR 0 4
5872: PPUSH
5873: CALL_OW 256
5877: PUSH
5878: LD_VAR 0 4
5882: PPUSH
5883: CALL_OW 274
5887: PPUSH
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 275
5895: PUSH
5896: LD_VAR 0 4
5900: PPUSH
5901: CALL_OW 274
5905: PPUSH
5906: LD_INT 2
5908: PPUSH
5909: CALL_OW 275
5913: PUSH
5914: LD_VAR 0 4
5918: PPUSH
5919: CALL_OW 274
5923: PPUSH
5924: LD_INT 3
5926: PPUSH
5927: CALL_OW 275
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: ADD
5947: ST_TO_ADDR
5948: GO 6043
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5950: LD_ADDR_VAR 0 5
5954: PUSH
5955: LD_VAR 0 5
5959: PUSH
5960: LD_VAR 0 4
5964: PPUSH
5965: CALL_OW 266
5969: PUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: CALL_OW 250
5979: PUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 251
5989: PUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: CALL_OW 254
5999: PUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: CALL_OW 267
6009: PUSH
6010: LD_VAR 0 4
6014: PPUSH
6015: CALL_OW 248
6019: PUSH
6020: LD_VAR 0 4
6024: PPUSH
6025: CALL_OW 256
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: ADD
6042: ST_TO_ADDR
// end ;
6043: GO 5496
6045: POP
6046: POP
// SaveVariable ( buildingsToSave , ident ) ;
6047: LD_VAR 0 5
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL_OW 39
// end ;
6061: LD_VAR 0 3
6065: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6066: LD_INT 0
6068: PPUSH
6069: PPUSH
6070: PPUSH
6071: PPUSH
6072: PPUSH
// belkovTeam = [ ] ;
6073: LD_ADDR_EXP 73
6077: PUSH
6078: EMPTY
6079: ST_TO_ADDR
// if belkovReturn then
6080: LD_EXP 6
6084: IFFALSE 6102
// belkovTeam = belkovTeam ^ Belkov ;
6086: LD_ADDR_EXP 73
6090: PUSH
6091: LD_EXP 73
6095: PUSH
6096: LD_EXP 64
6100: ADD
6101: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6102: LD_ADDR_EXP 73
6106: PUSH
6107: LD_EXP 73
6111: PUSH
6112: LD_EXP 68
6116: ADD
6117: ST_TO_ADDR
// for unit in other_survivors do
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_EXP 66
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6170
// if IsOK ( unit ) and belkovTeam < 5 then
6131: LD_VAR 0 3
6135: PPUSH
6136: CALL_OW 302
6140: PUSH
6141: LD_EXP 73
6145: PUSH
6146: LD_INT 5
6148: LESS
6149: AND
6150: IFFALSE 6168
// belkovTeam = belkovTeam ^ unit ;
6152: LD_ADDR_EXP 73
6156: PUSH
6157: LD_EXP 73
6161: PUSH
6162: LD_VAR 0 3
6166: ADD
6167: ST_TO_ADDR
6168: GO 6128
6170: POP
6171: POP
// if belkovTeam < 5 then
6172: LD_EXP 73
6176: PUSH
6177: LD_INT 5
6179: LESS
6180: IFFALSE 6306
// begin restRandSolds = 5 - belkovTeam ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: LD_EXP 73
6194: MINUS
6195: ST_TO_ADDR
// for i := 1 to restRandSolds do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: DOUBLE
6202: LD_INT 1
6204: DEC
6205: ST_TO_ADDR
6206: LD_VAR 0 4
6210: PUSH
6211: FOR_TO
6212: IFFALSE 6304
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6214: LD_ADDR_VAR 0 3
6218: PUSH
6219: LD_EXP 69
6223: PPUSH
6224: LD_INT 25
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: PPUSH
6237: CALL_OW 72
6241: PUSH
6242: LD_EXP 67
6246: DIFF
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6300
// if not unit in belkovTeam then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_EXP 73
6260: IN
6261: NOT
6262: IFFALSE 6298
// begin belkovTeam = belkovTeam ^ unit ;
6264: LD_ADDR_EXP 73
6268: PUSH
6269: LD_EXP 73
6273: PUSH
6274: LD_VAR 0 3
6278: ADD
6279: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6280: LD_ADDR_EXP 69
6284: PUSH
6285: LD_EXP 69
6289: PUSH
6290: LD_VAR 0 3
6294: DIFF
6295: ST_TO_ADDR
// break ;
6296: GO 6300
// end ;
6298: GO 6248
6300: POP
6301: POP
6302: GO 6211
6304: POP
6305: POP
// end ; tmp = belkovTeam diff Belkov ;
6306: LD_ADDR_VAR 0 5
6310: PUSH
6311: LD_EXP 73
6315: PUSH
6316: LD_EXP 64
6320: DIFF
6321: ST_TO_ADDR
// if tmp < 4 then
6322: LD_VAR 0 5
6326: PUSH
6327: LD_INT 4
6329: LESS
6330: IFFALSE 6414
// begin for i := 1 to 4 - tmp do
6332: LD_ADDR_VAR 0 2
6336: PUSH
6337: DOUBLE
6338: LD_INT 1
6340: DEC
6341: ST_TO_ADDR
6342: LD_INT 4
6344: PUSH
6345: LD_VAR 0 5
6349: MINUS
6350: PUSH
6351: FOR_TO
6352: IFFALSE 6412
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6354: LD_INT 0
6356: PPUSH
6357: LD_INT 1
6359: PPUSH
6360: LD_INT 2
6362: PPUSH
6363: CALL_OW 12
6367: PPUSH
6368: CALL_OW 381
// unit = CreateHuman ;
6372: LD_ADDR_VAR 0 3
6376: PUSH
6377: CALL_OW 44
6381: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6382: LD_ADDR_EXP 73
6386: PUSH
6387: LD_EXP 73
6391: PUSH
6392: LD_VAR 0 3
6396: ADD
6397: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6398: LD_VAR 0 3
6402: PPUSH
6403: LD_INT 209
6405: PPUSH
6406: CALL_OW 52
// end ;
6410: GO 6351
6412: POP
6413: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6414: LD_STRING 01_Kirilenkova
6416: PPUSH
6417: CALL_OW 28
6421: IFFALSE 6441
// belkovTeam = belkovTeam ^ Kirilenkova else
6423: LD_ADDR_EXP 73
6427: PUSH
6428: LD_EXP 73
6432: PUSH
6433: LD_EXP 65
6437: ADD
6438: ST_TO_ADDR
6439: GO 6517
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6441: LD_ADDR_EXP 73
6445: PUSH
6446: LD_EXP 73
6450: PUSH
6451: LD_EXP 69
6455: PPUSH
6456: LD_INT 25
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: PPUSH
6469: CALL_OW 72
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: ADD
6478: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6479: LD_ADDR_EXP 69
6483: PUSH
6484: LD_EXP 69
6488: PUSH
6489: LD_EXP 69
6493: PPUSH
6494: LD_INT 25
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: PUSH
6512: LD_INT 1
6514: ARRAY
6515: DIFF
6516: ST_TO_ADDR
// end ; end ;
6517: LD_VAR 0 1
6521: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6526: LD_EXP 78
6530: NOT
6531: PUSH
6532: LD_EXP 78
6536: PPUSH
6537: CALL_OW 302
6541: NOT
6542: OR
6543: IFFALSE 6646
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_EXP 77
6554: PPUSH
6555: LD_INT 50
6557: PUSH
6558: EMPTY
6559: LIST
6560: PPUSH
6561: CALL_OW 72
6565: PUSH
6566: LD_EXP 79
6570: DIFF
6571: ST_TO_ADDR
// if soldsOK then
6572: LD_VAR 0 2
6576: IFFALSE 6646
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6578: LD_VAR 0 2
6582: PUSH
6583: LD_INT 1
6585: ARRAY
6586: PPUSH
6587: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 112
6602: PPUSH
6603: LD_INT 96
6605: PPUSH
6606: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_INT 3
6621: PPUSH
6622: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6626: LD_ADDR_EXP 77
6630: PUSH
6631: LD_EXP 77
6635: PUSH
6636: LD_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ARRAY
6644: DIFF
6645: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6646: LD_EXP 79
6650: NOT
6651: PUSH
6652: LD_EXP 79
6656: PPUSH
6657: CALL_OW 302
6661: NOT
6662: OR
6663: IFFALSE 6766
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6665: LD_ADDR_VAR 0 2
6669: PUSH
6670: LD_EXP 77
6674: PPUSH
6675: LD_INT 50
6677: PUSH
6678: EMPTY
6679: LIST
6680: PPUSH
6681: CALL_OW 72
6685: PUSH
6686: LD_EXP 78
6690: DIFF
6691: ST_TO_ADDR
// if soldsOK then
6692: LD_VAR 0 2
6696: IFFALSE 6766
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6698: LD_VAR 0 2
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: ARRAY
6719: PPUSH
6720: LD_INT 112
6722: PPUSH
6723: LD_INT 96
6725: PPUSH
6726: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: PPUSH
6739: LD_INT 3
6741: PPUSH
6742: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6746: LD_ADDR_EXP 77
6750: PUSH
6751: LD_EXP 77
6755: PUSH
6756: LD_VAR 0 2
6760: PUSH
6761: LD_INT 1
6763: ARRAY
6764: DIFF
6765: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6766: LD_EXP 78
6770: PUSH
6771: LD_EXP 79
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6784: LD_EXP 78
6788: PUSH
6789: LD_EXP 79
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PPUSH
6798: LD_INT 112
6800: PPUSH
6801: LD_INT 96
6803: PPUSH
6804: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6808: LD_EXP 78
6812: PUSH
6813: LD_EXP 79
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: CALL_OW 235
// end ; end_of_file
6829: LD_VAR 0 1
6833: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6840: LD_EXP 62
6844: PPUSH
6845: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6849: LD_EXP 62
6853: PPUSH
6854: LD_INT 163
6856: PPUSH
6857: LD_INT 108
6859: PPUSH
6860: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6864: LD_EXP 62
6868: PPUSH
6869: LD_EXP 67
6873: PPUSH
6874: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6878: LD_ADDR_VAR 0 2
6882: PUSH
6883: LD_INT 22
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 21
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PUSH
6912: LD_EXP 62
6916: DIFF
6917: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_EXP 52
6932: PUSH
6933: FOR_TO
6934: IFFALSE 7052
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_EXP 52
6950: PUSH
6951: LD_VAR 0 4
6955: ARRAY
6956: PUSH
6957: LD_INT 1
6959: ARRAY
6960: PPUSH
6961: LD_EXP 52
6965: PUSH
6966: LD_VAR 0 4
6970: ARRAY
6971: PUSH
6972: LD_INT 2
6974: ARRAY
6975: PPUSH
6976: CALL_OW 73
6980: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_EXP 52
6990: PUSH
6991: LD_VAR 0 4
6995: ARRAY
6996: PUSH
6997: LD_INT 1
6999: ARRAY
7000: PPUSH
7001: LD_EXP 52
7005: PUSH
7006: LD_VAR 0 4
7010: ARRAY
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: PPUSH
7016: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7020: LD_VAR 0 3
7024: PPUSH
7025: LD_EXP 67
7029: PPUSH
7030: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7034: LD_ADDR_VAR 0 2
7038: PUSH
7039: LD_VAR 0 2
7043: PUSH
7044: LD_VAR 0 3
7048: DIFF
7049: ST_TO_ADDR
// end ;
7050: GO 6933
7052: POP
7053: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7054: LD_EXP 62
7058: PPUSH
7059: CALL_OW 87
// wait ( 0 0$1 ) ;
7063: LD_INT 35
7065: PPUSH
7066: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7070: LD_EXP 62
7074: PPUSH
7075: LD_EXP 67
7079: PPUSH
7080: CALL_OW 296
7084: PUSH
7085: LD_INT 4
7087: LESS
7088: IFFALSE 7054
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7090: LD_EXP 62
7094: PUSH
7095: LD_EXP 67
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7108: LD_EXP 67
7112: PPUSH
7113: LD_EXP 62
7117: PPUSH
7118: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7122: LD_EXP 67
7126: PPUSH
7127: LD_STRING D1-Kur-1
7129: PPUSH
7130: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7134: LD_EXP 62
7138: PPUSH
7139: LD_STRING D1-Bur-1
7141: PPUSH
7142: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7146: LD_EXP 67
7150: PPUSH
7151: LD_STRING D1-Kur-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7158: LD_EXP 62
7162: PPUSH
7163: LD_STRING D1-Bur-2
7165: PPUSH
7166: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7170: LD_EXP 67
7174: PPUSH
7175: LD_STRING D1-Kur-3
7177: PPUSH
7178: CALL_OW 88
// if IsOK ( Gnyevko ) then
7182: LD_EXP 63
7186: PPUSH
7187: CALL_OW 302
7191: IFFALSE 7205
// Say ( Kurin , D1-Kur-3a ) ;
7193: LD_EXP 67
7197: PPUSH
7198: LD_STRING D1-Kur-3a
7200: PPUSH
7201: CALL_OW 88
// InGameOff ;
7205: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7209: LD_INT 22
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 69
7237: PUSH
7238: LD_EXP 62
7242: PUSH
7243: LD_EXP 63
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: DIFF
7252: PPUSH
7253: LD_INT 6
7255: PPUSH
7256: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7260: LD_EXP 70
7264: PPUSH
7265: LD_INT 3
7267: PPUSH
7268: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7272: LD_INT 9
7274: PPUSH
7275: LD_INT 22
7277: PUSH
7278: LD_INT 6
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 21
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 70
7303: PUSH
7304: LD_EXP 67
7308: DIFF
7309: PPUSH
7310: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7314: LD_EXP 66
7318: PPUSH
7319: LD_INT 95
7321: PPUSH
7322: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7326: LD_EXP 64
7330: PPUSH
7331: LD_INT 95
7333: PPUSH
7334: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7338: LD_EXP 65
7342: PPUSH
7343: CALL_OW 305
7347: IFFALSE 7361
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7349: LD_EXP 65
7353: PPUSH
7354: LD_INT 83
7356: PPUSH
7357: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7361: LD_STRING 01_Gnyevko
7363: PPUSH
7364: CALL_OW 28
7368: NOT
7369: IFFALSE 7383
// SetSide ( randomMech , 3 ) ;
7371: LD_EXP 71
7375: PPUSH
7376: LD_INT 3
7378: PPUSH
7379: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7383: LD_STRING M1
7385: PPUSH
7386: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7390: LD_INT 3
7392: PPUSH
7393: LD_INT 6
7395: PPUSH
7396: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7400: LD_INT 3
7402: PPUSH
7403: LD_INT 7
7405: PPUSH
7406: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7410: LD_INT 6
7412: PPUSH
7413: LD_INT 6
7415: PPUSH
7416: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7420: LD_INT 6
7422: PPUSH
7423: LD_INT 7
7425: PPUSH
7426: CALL_OW 334
// SaveForQuickRestart ;
7430: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7434: LD_EXP 66
7438: PPUSH
7439: LD_INT 95
7441: PPUSH
7442: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7446: LD_EXP 64
7450: PPUSH
7451: LD_INT 95
7453: PPUSH
7454: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7458: LD_EXP 65
7462: PPUSH
7463: CALL_OW 305
7467: IFFALSE 7481
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7469: LD_EXP 65
7473: PPUSH
7474: LD_INT 83
7476: PPUSH
7477: CALL_OW 120
// end ;
7481: LD_VAR 0 1
7485: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7486: LD_EXP 20
7490: NOT
7491: PUSH
7492: LD_INT 20
7494: PPUSH
7495: LD_INT 22
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 2
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 21
7520: PUSH
7521: LD_INT 2
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 70
7541: PUSH
7542: LD_INT 0
7544: GREATER
7545: AND
7546: IFFALSE 7920
7548: GO 7550
7550: DISABLE
7551: LD_INT 0
7553: PPUSH
// begin enable ;
7554: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7555: LD_ADDR_VAR 0 1
7559: PUSH
7560: LD_INT 20
7562: PPUSH
7563: LD_INT 22
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: LD_INT 21
7578: PUSH
7579: LD_INT 1
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 21
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 70
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7897
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 250
7627: PPUSH
7628: LD_VAR 0 1
7632: PPUSH
7633: CALL_OW 251
7637: PUSH
7638: LD_INT 5
7640: PLUS
7641: PPUSH
7642: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7646: LD_EXP 7
7650: NOT
7651: PUSH
7652: LD_EXP 33
7656: NOT
7657: AND
7658: IFFALSE 7721
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7660: LD_VAR 0 1
7664: PUSH
7665: LD_EXP 62
7669: NONEQUAL
7670: PUSH
7671: LD_EXP 70
7675: PPUSH
7676: CALL_OW 302
7680: AND
7681: IFFALSE 7695
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7683: LD_EXP 70
7687: PPUSH
7688: LD_STRING D1b-Kov-1
7690: PPUSH
7691: CALL_OW 88
// if unit = Burlak then
7695: LD_VAR 0 1
7699: PUSH
7700: LD_EXP 62
7704: EQUAL
7705: IFFALSE 7719
// Say ( Burlak , D1b-Bur-1 ) ;
7707: LD_EXP 62
7711: PPUSH
7712: LD_STRING D1b-Bur-1
7714: PPUSH
7715: CALL_OW 88
// end else
7719: GO 7740
// if not dialogLoopBlocker then
7721: LD_EXP 33
7725: NOT
7726: IFFALSE 7740
// Say ( Platonov , D8-Pla-1 ) ;
7728: LD_EXP 76
7732: PPUSH
7733: LD_STRING D8-Pla-1
7735: PPUSH
7736: CALL_OW 88
// if not dialogLoopBlocker then
7740: LD_EXP 33
7744: NOT
7745: IFFALSE 7755
// dialogLoopBlocker = true ;
7747: LD_ADDR_EXP 33
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7755: LD_INT 20
7757: PPUSH
7758: LD_INT 22
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 2
7770: PUSH
7771: LD_INT 21
7773: PUSH
7774: LD_INT 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 21
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 70
7804: PPUSH
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 250
7814: PPUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 251
7824: PUSH
7825: LD_INT 5
7827: PLUS
7828: PPUSH
7829: CALL_OW 111
// wait ( 0 0$1 ) ;
7833: LD_INT 35
7835: PPUSH
7836: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7840: LD_INT 20
7842: PPUSH
7843: LD_INT 22
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 21
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 21
7868: PUSH
7869: LD_INT 2
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 70
7889: PUSH
7890: LD_INT 0
7892: EQUAL
7893: IFFALSE 7755
// end ;
7895: GO 7610
7897: POP
7898: POP
// if dialogLoopBlocker then
7899: LD_EXP 33
7903: IFFALSE 7920
// begin wait ( 0 0$5 ) ;
7905: LD_INT 175
7907: PPUSH
7908: CALL_OW 67
// dialogLoopBlocker = false ;
7912: LD_ADDR_EXP 33
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// end ; end ;
7920: PPOPN 1
7922: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7923: LD_EXP 19
7927: NOT
7928: PUSH
7929: LD_INT 8
7931: PPUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 21
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 71
7978: PUSH
7979: LD_INT 0
7981: GREATER
7982: AND
7983: IFFALSE 8118
7985: GO 7987
7987: DISABLE
7988: LD_INT 0
7990: PPUSH
// begin enable ;
7991: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7992: LD_ADDR_VAR 0 1
7996: PUSH
7997: LD_INT 8
7999: PPUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: LD_INT 21
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 71
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8101
// begin ComMoveXY ( unit , 114 , 98 ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_INT 114
8057: PPUSH
8058: LD_INT 98
8060: PPUSH
8061: CALL_OW 111
// if dialogLoopBlocker then
8065: LD_EXP 33
8069: IFFALSE 8075
// exit ;
8071: POP
8072: POP
8073: GO 8118
// dialogLoopBlocker = true ;
8075: LD_ADDR_EXP 33
8079: PUSH
8080: LD_INT 1
8082: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8083: LD_EXP 76
8087: PPUSH
8088: LD_STRING D8-Pla-1
8090: PPUSH
8091: CALL_OW 88
// exit ;
8095: POP
8096: POP
8097: GO 8118
// end ;
8099: GO 8047
8101: POP
8102: POP
// wait ( 0 0$5 ) ;
8103: LD_INT 175
8105: PPUSH
8106: CALL_OW 67
// dialogLoopBlocker = false ;
8110: LD_ADDR_EXP 33
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// end ;
8118: PPOPN 1
8120: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8121: LD_EXP 7
8125: NOT
8126: PUSH
8127: LD_INT 9
8129: PPUSH
8130: LD_INT 22
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 70
8158: PUSH
8159: LD_INT 0
8161: GREATER
8162: AND
8163: IFFALSE 8180
8165: GO 8167
8167: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8168: LD_EXP 67
8172: PPUSH
8173: LD_STRING D1a-Kur-1
8175: PPUSH
8176: CALL_OW 88
8180: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
8181: LD_EXP 7
8185: NOT
8186: PUSH
8187: LD_EXP 62
8191: PPUSH
8192: CALL_OW 302
8196: AND
8197: PUSH
8198: LD_INT 8
8200: PPUSH
8201: LD_INT 22
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 21
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 70
8229: PUSH
8230: LD_INT 0
8232: GREATER
8233: AND
8234: IFFALSE 8734
8236: GO 8238
8238: DISABLE
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
// begin enable ;
8245: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_INT 22
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 21
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: PUSH
8280: FOR_IN
8281: IFFALSE 8732
// if See ( 6 , unit ) then
8283: LD_INT 6
8285: PPUSH
8286: LD_VAR 0 2
8290: PPUSH
8291: CALL_OW 292
8295: IFFALSE 8730
// begin meetPlatonov = true ;
8297: LD_ADDR_EXP 7
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// InGameOn ;
8305: CALL_OW 8
// DialogueOn ;
8309: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
8313: LD_ADDR_VAR 0 4
8317: PUSH
8318: LD_EXP 77
8322: PPUSH
8323: LD_INT 26
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 72
8337: PPUSH
8338: LD_STRING D2-RSol1-1
8340: PPUSH
8341: LD_STRING 
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL 4093 0 4
8351: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
8352: LD_EXP 62
8356: PPUSH
8357: LD_STRING D2-Bur-1
8359: PPUSH
8360: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
8364: LD_VAR 0 4
8368: PPUSH
8369: LD_STRING D2-RSol1-2
8371: PPUSH
8372: CALL_OW 88
// DialogueOff ;
8376: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8380: LD_ADDR_VAR 0 3
8384: PUSH
8385: LD_INT 22
8387: PUSH
8388: LD_INT 3
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 50
8407: PUSH
8408: EMPTY
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: ST_TO_ADDR
// for i := 1 to yourUnits do
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_VAR 0 3
8435: PUSH
8436: FOR_TO
8437: IFFALSE 8506
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8439: LD_VAR 0 3
8443: PUSH
8444: LD_VAR 0 1
8448: ARRAY
8449: PPUSH
8450: LD_EXP 53
8454: PUSH
8455: LD_VAR 0 1
8459: ARRAY
8460: PUSH
8461: LD_INT 1
8463: ARRAY
8464: PPUSH
8465: LD_EXP 53
8469: PUSH
8470: LD_VAR 0 1
8474: ARRAY
8475: PUSH
8476: LD_INT 2
8478: ARRAY
8479: PPUSH
8480: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8484: LD_VAR 0 3
8488: PUSH
8489: LD_VAR 0 1
8493: ARRAY
8494: PPUSH
8495: LD_EXP 76
8499: PPUSH
8500: CALL_OW 179
// end ;
8504: GO 8436
8506: POP
8507: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8508: LD_EXP 62
8512: PPUSH
8513: CALL_OW 87
// wait ( 0 0$1 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8524: LD_EXP 62
8528: PPUSH
8529: LD_EXP 76
8533: PPUSH
8534: CALL_OW 296
8538: PUSH
8539: LD_INT 4
8541: LESS
8542: IFFALSE 8508
// ComTurnUnit ( Platonov , Burlak ) ;
8544: LD_EXP 76
8548: PPUSH
8549: LD_EXP 62
8553: PPUSH
8554: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8558: LD_EXP 76
8562: PPUSH
8563: LD_STRING D2-Pla-2
8565: PPUSH
8566: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8570: LD_EXP 62
8574: PPUSH
8575: LD_STRING D2-Bur-2
8577: PPUSH
8578: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8582: LD_EXP 76
8586: PPUSH
8587: LD_STRING D2-Pla-3
8589: PPUSH
8590: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8594: LD_EXP 62
8598: PPUSH
8599: LD_STRING D2-Bur-3
8601: PPUSH
8602: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8606: LD_EXP 76
8610: PPUSH
8611: LD_STRING D2-Pla-4
8613: PPUSH
8614: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8618: LD_EXP 62
8622: PPUSH
8623: LD_STRING D2-Bur-4
8625: PPUSH
8626: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8630: LD_EXP 76
8634: PPUSH
8635: LD_STRING D2-Pla-5
8637: PPUSH
8638: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8642: LD_INT 1
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 3
8650: PUSH
8651: LD_INT 4
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL 4426 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8664: LD_EXP 76
8668: PPUSH
8669: LD_STRING D3-Pla-1
8671: PPUSH
8672: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8676: LD_EXP 62
8680: PPUSH
8681: LD_STRING D3-Bur-1
8683: PPUSH
8684: CALL_OW 88
// InGameOff ;
8688: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8692: LD_STRING M2a
8694: PPUSH
8695: CALL_OW 337
// ComFree ( Platonov ) ;
8699: LD_EXP 76
8703: PPUSH
8704: CALL_OW 139
// SetSide ( beria , 3 ) ;
8708: LD_INT 106
8710: PPUSH
8711: LD_INT 3
8713: PPUSH
8714: CALL_OW 235
// canExitBase = false ;
8718: LD_ADDR_EXP 19
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// exit ;
8726: POP
8727: POP
8728: GO 8734
// end ;
8730: GO 8280
8732: POP
8733: POP
// end ;
8734: PPOPN 4
8736: END
// export function Dial_LabConstructed ; begin
8737: LD_INT 0
8739: PPUSH
// labConstructed = true ;
8740: LD_ADDR_EXP 8
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// DialogueOn ;
8748: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8752: LD_EXP 62
8756: PPUSH
8757: LD_STRING D5a-Bur-1
8759: PPUSH
8760: CALL_OW 88
// if workshopConstructed then
8764: LD_EXP 9
8768: IFFALSE 8784
// Say ( Platonov , D5a-Pla-1a ) else
8770: LD_EXP 76
8774: PPUSH
8775: LD_STRING D5a-Pla-1a
8777: PPUSH
8778: CALL_OW 88
8782: GO 8796
// Say ( Platonov , D5a-Pla-1a ) ;
8784: LD_EXP 76
8788: PPUSH
8789: LD_STRING D5a-Pla-1a
8791: PPUSH
8792: CALL_OW 88
// DialogueOff ;
8796: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8800: LD_STRING M2b
8802: PPUSH
8803: CALL_OW 337
// end ;
8807: LD_VAR 0 1
8811: RET
// export function Dial_WorkshopConstructed ; begin
8812: LD_INT 0
8814: PPUSH
// workshopConstructed = true ;
8815: LD_ADDR_EXP 9
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// DialogueOn ;
8823: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8827: LD_EXP 62
8831: PPUSH
8832: LD_STRING D5b-Bur-1
8834: PPUSH
8835: CALL_OW 88
// if labConstructed then
8839: LD_EXP 8
8843: IFFALSE 8859
// Say ( Platonov , D5b-Pla-1 ) else
8845: LD_EXP 76
8849: PPUSH
8850: LD_STRING D5b-Pla-1
8852: PPUSH
8853: CALL_OW 88
8857: GO 8871
// Say ( Platonov , D5b-Pla-1a ) ;
8859: LD_EXP 76
8863: PPUSH
8864: LD_STRING D5b-Pla-1a
8866: PPUSH
8867: CALL_OW 88
// DialogueOff ;
8871: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8875: LD_STRING M2c
8877: PPUSH
8878: CALL_OW 337
// end ;
8882: LD_VAR 0 1
8886: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
8887: LD_INT 0
8889: PPUSH
// wait ( 0 0$1 ) ;
8890: LD_INT 35
8892: PPUSH
8893: CALL_OW 67
// CenterNowOnUnits ( building ) ;
8897: LD_VAR 0 1
8901: PPUSH
8902: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8906: LD_INT 22
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: PPUSH
8935: CALL_OW 141
// DialogueOn ;
8939: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
8943: LD_EXP 76
8947: PPUSH
8948: LD_STRING D6-Pla-1
8950: PPUSH
8951: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8955: LD_EXP 62
8959: PPUSH
8960: LD_STRING D6-Bur-1
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// case GetBType ( building ) of b_lab :
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 266
8980: PUSH
8981: LD_INT 6
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9029
8989: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
8990: LD_INT 106
8992: PPUSH
8993: CALL_OW 274
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_INT 106
9003: PPUSH
9004: CALL_OW 274
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 275
9016: PUSH
9017: LD_EXP 54
9021: PLUS
9022: PPUSH
9023: CALL_OW 277
9027: GO 9222
9029: LD_INT 2
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9077
9037: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9038: LD_INT 106
9040: PPUSH
9041: CALL_OW 274
9045: PPUSH
9046: LD_INT 1
9048: PPUSH
9049: LD_INT 106
9051: PPUSH
9052: CALL_OW 274
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: CALL_OW 275
9064: PUSH
9065: LD_EXP 55
9069: PLUS
9070: PPUSH
9071: CALL_OW 277
9075: GO 9222
9077: LD_INT 26
9079: DOUBLE
9080: EQUAL
9081: IFTRUE 9085
9083: GO 9125
9085: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9086: LD_INT 106
9088: PPUSH
9089: CALL_OW 274
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: LD_INT 106
9099: PPUSH
9100: CALL_OW 274
9104: PPUSH
9105: LD_INT 1
9107: PPUSH
9108: CALL_OW 275
9112: PUSH
9113: LD_EXP 56
9117: PLUS
9118: PPUSH
9119: CALL_OW 277
9123: GO 9222
9125: LD_INT 4
9127: DOUBLE
9128: EQUAL
9129: IFTRUE 9133
9131: GO 9173
9133: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9134: LD_INT 106
9136: PPUSH
9137: CALL_OW 274
9141: PPUSH
9142: LD_INT 1
9144: PPUSH
9145: LD_INT 106
9147: PPUSH
9148: CALL_OW 274
9152: PPUSH
9153: LD_INT 1
9155: PPUSH
9156: CALL_OW 275
9160: PUSH
9161: LD_EXP 57
9165: PLUS
9166: PPUSH
9167: CALL_OW 277
9171: GO 9222
9173: LD_INT 31
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9221
9181: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9182: LD_INT 106
9184: PPUSH
9185: CALL_OW 274
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: LD_INT 106
9195: PPUSH
9196: CALL_OW 274
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 275
9208: PUSH
9209: LD_EXP 58
9213: PLUS
9214: PPUSH
9215: CALL_OW 277
9219: GO 9222
9221: POP
// RemoveUnit ( building ) ;
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 64
// end ;
9231: LD_VAR 0 2
9235: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9236: LD_EXP 9
9240: PUSH
9241: LD_EXP 8
9245: AND
9246: IFFALSE 9355
9248: GO 9250
9250: DISABLE
// begin DialogueOn ;
9251: CALL_OW 6
// if engineResearched then
9255: LD_EXP 10
9259: IFFALSE 9287
// begin Say ( Burlak , D7b-Bur-1 ) ;
9261: LD_EXP 62
9265: PPUSH
9266: LD_STRING D7b-Bur-1
9268: PPUSH
9269: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9273: LD_EXP 76
9277: PPUSH
9278: LD_STRING D7b-Pla-1
9280: PPUSH
9281: CALL_OW 88
// end else
9285: GO 9311
// begin Say ( Burlak , D7a-Bur-1 ) ;
9287: LD_EXP 62
9291: PPUSH
9292: LD_STRING D7a-Bur-1
9294: PPUSH
9295: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9299: LD_EXP 76
9303: PPUSH
9304: LD_STRING D7a-Pla-1
9306: PPUSH
9307: CALL_OW 88
// end ; DialogueOff ;
9311: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9315: LD_STRING M2
9317: PPUSH
9318: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9322: LD_INT 3
9324: PPUSH
9325: LD_EXP 76
9329: PPUSH
9330: CALL_OW 250
9334: PPUSH
9335: LD_EXP 76
9339: PPUSH
9340: CALL_OW 251
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: CALL_OW 56
// end ;
9355: END
// export function Dial_NewCrates ( x , y ) ; begin
9356: LD_INT 0
9358: PPUSH
// wait ( 0 0$18 ) ;
9359: LD_INT 630
9361: PPUSH
9362: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
9366: LD_EXP 76
9370: PPUSH
9371: LD_VAR 0 1
9375: PPUSH
9376: LD_VAR 0 2
9380: PPUSH
9381: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9385: LD_EXP 76
9389: PPUSH
9390: LD_STRING D4-Pla-1
9392: PPUSH
9393: CALL_OW 88
// end ;
9397: LD_VAR 0 3
9401: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9402: LD_INT 0
9404: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9405: LD_ADDR_EXP 13
9409: PUSH
9410: LD_INT 22
9412: PUSH
9413: LD_INT 3
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 21
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: PPUSH
9434: CALL_OW 69
9438: PUSH
9439: LD_INT 1
9441: ARRAY
9442: ST_TO_ADDR
// constructedFirstVehicle = true ;
9443: LD_ADDR_EXP 12
9447: PUSH
9448: LD_INT 1
9450: ST_TO_ADDR
// InGameOn ;
9451: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9455: LD_VAR 0 1
9459: PPUSH
9460: CALL_OW 87
// wait ( 0 0$3 ) ;
9464: LD_INT 105
9466: PPUSH
9467: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9471: LD_EXP 62
9475: PPUSH
9476: LD_STRING D9-Bur-1
9478: PPUSH
9479: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9483: LD_EXP 76
9487: PPUSH
9488: LD_EXP 13
9492: PPUSH
9493: CALL_OW 250
9497: PPUSH
9498: LD_EXP 13
9502: PPUSH
9503: CALL_OW 251
9507: PPUSH
9508: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9512: LD_INT 35
9514: PPUSH
9515: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9519: LD_EXP 76
9523: PPUSH
9524: LD_EXP 13
9528: PPUSH
9529: CALL_OW 296
9533: PUSH
9534: LD_INT 4
9536: LESS
9537: IFFALSE 9512
// ComTurnUnit ( Platonov , firstVeh ) ;
9539: LD_EXP 76
9543: PPUSH
9544: LD_EXP 13
9548: PPUSH
9549: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9553: LD_EXP 76
9557: PPUSH
9558: LD_STRING D9-Pla-1
9560: PPUSH
9561: CALL_OW 88
// InGameOff ;
9565: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9569: LD_STRING M3
9571: PPUSH
9572: CALL_OW 337
// canExitBase = true ;
9576: LD_ADDR_EXP 19
9580: PUSH
9581: LD_INT 1
9583: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9584: LD_EXP 76
9588: PPUSH
9589: LD_INT 112
9591: PPUSH
9592: LD_INT 97
9594: PPUSH
9595: CALL_OW 111
// end ;
9599: LD_VAR 0 2
9603: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9604: LD_EXP 13
9608: PPUSH
9609: LD_INT 9
9611: PPUSH
9612: CALL_OW 308
9616: PUSH
9617: LD_EXP 14
9621: NOT
9622: AND
9623: IFFALSE 10477
9625: GO 9627
9627: DISABLE
9628: LD_INT 0
9630: PPUSH
9631: PPUSH
9632: PPUSH
// begin vehicleForKurin = true ;
9633: LD_ADDR_EXP 14
9637: PUSH
9638: LD_INT 1
9640: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: LD_EXP 69
9650: PPUSH
9651: LD_INT 25
9653: PUSH
9654: LD_INT 2
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PPUSH
9661: CALL_OW 72
9665: PUSH
9666: LD_INT 1
9668: ARRAY
9669: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9670: LD_ADDR_VAR 0 3
9674: PUSH
9675: LD_EXP 69
9679: PPUSH
9680: LD_INT 25
9682: PUSH
9683: LD_INT 3
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: PPUSH
9690: CALL_OW 72
9694: PUSH
9695: LD_INT 1
9697: ARRAY
9698: ST_TO_ADDR
// InGameOn ;
9699: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9703: LD_EXP 67
9707: PPUSH
9708: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9712: LD_EXP 13
9716: PPUSH
9717: LD_EXP 67
9721: PPUSH
9722: CALL_OW 250
9726: PPUSH
9727: LD_EXP 67
9731: PPUSH
9732: CALL_OW 251
9736: PPUSH
9737: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9741: LD_EXP 67
9745: PPUSH
9746: LD_STRING D10-Kur-1
9748: PPUSH
9749: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9753: LD_INT 35
9755: PPUSH
9756: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9760: LD_EXP 13
9764: PPUSH
9765: LD_EXP 67
9769: PPUSH
9770: CALL_OW 250
9774: PPUSH
9775: LD_EXP 67
9779: PPUSH
9780: CALL_OW 251
9784: PPUSH
9785: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9789: LD_EXP 13
9793: PPUSH
9794: LD_EXP 67
9798: PPUSH
9799: CALL_OW 296
9803: PUSH
9804: LD_INT 9
9806: LESS
9807: IFFALSE 9753
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9809: LD_EXP 13
9813: PPUSH
9814: CALL_OW 313
9818: PPUSH
9819: CALL_OW 121
// wait ( 0 0$1 ) ;
9823: LD_INT 35
9825: PPUSH
9826: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
9830: LD_EXP 13
9834: PPUSH
9835: CALL_OW 256
9839: PUSH
9840: LD_INT 1000
9842: LESS
9843: IFFALSE 9875
// begin ComExitBuilding ( mech ) ;
9845: LD_VAR 0 3
9849: PPUSH
9850: CALL_OW 122
// wait ( 0 0$1 ) ;
9854: LD_INT 35
9856: PPUSH
9857: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
9861: LD_VAR 0 3
9865: PPUSH
9866: LD_EXP 13
9870: PPUSH
9871: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
9875: LD_EXP 13
9879: PPUSH
9880: CALL_OW 261
9884: PUSH
9885: LD_INT 90
9887: LESS
9888: IFFALSE 9923
// begin ComExitBuilding ( eng ) ;
9890: LD_VAR 0 2
9894: PPUSH
9895: CALL_OW 122
// wait ( 0 0$1 ) ;
9899: LD_INT 35
9901: PPUSH
9902: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
9906: LD_VAR 0 2
9910: PPUSH
9911: LD_INT 71
9913: PPUSH
9914: LD_EXP 13
9918: PPUSH
9919: CALL 4664 0 3
// end ; repeat wait ( 0 0$1 ) ;
9923: LD_INT 35
9925: PPUSH
9926: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
9930: LD_EXP 13
9934: PPUSH
9935: CALL_OW 256
9939: PUSH
9940: LD_INT 1000
9942: EQUAL
9943: PUSH
9944: LD_EXP 13
9948: PPUSH
9949: CALL_OW 261
9953: PUSH
9954: LD_INT 90
9956: GREATER
9957: AND
9958: IFFALSE 9923
// if UnitsInside ( firstVeh ) then
9960: LD_EXP 13
9964: PPUSH
9965: CALL_OW 313
9969: IFFALSE 9989
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
9971: LD_EXP 13
9975: PPUSH
9976: CALL_OW 313
9980: PUSH
9981: LD_INT 1
9983: ARRAY
9984: PPUSH
9985: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
9989: LD_VAR 0 2
9993: PPUSH
9994: LD_INT 71
9996: PPUSH
9997: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10001: LD_EXP 13
10005: PPUSH
10006: LD_INT 6
10008: PPUSH
10009: CALL_OW 235
// if belkovReturn then
10013: LD_EXP 6
10017: IFFALSE 10103
// begin if IsInUnit ( Belkov ) then
10019: LD_EXP 64
10023: PPUSH
10024: CALL_OW 310
10028: IFFALSE 10039
// ComExitBuilding ( Belkov ) ;
10030: LD_EXP 64
10034: PPUSH
10035: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10039: LD_INT 35
10041: PPUSH
10042: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10046: LD_EXP 64
10050: PPUSH
10051: LD_EXP 13
10055: PPUSH
10056: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10060: LD_EXP 64
10064: PPUSH
10065: CALL_OW 310
10069: PUSH
10070: LD_EXP 13
10074: EQUAL
10075: IFFALSE 10039
// Say ( Belkov , D10-Bel-1 ) ;
10077: LD_EXP 64
10081: PPUSH
10082: LD_STRING D10-Bel-1
10084: PPUSH
10085: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10089: LD_EXP 67
10093: PPUSH
10094: LD_STRING D10-Kur-2
10096: PPUSH
10097: CALL_OW 88
// end else
10101: GO 10229
// begin if IsInUnit ( Belkov2 ) then
10103: LD_EXP 68
10107: PPUSH
10108: CALL_OW 310
10112: IFFALSE 10123
// ComExitBuilding ( Belkov2 ) ;
10114: LD_EXP 68
10118: PPUSH
10119: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10123: LD_INT 35
10125: PPUSH
10126: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10130: LD_EXP 68
10134: PPUSH
10135: LD_EXP 13
10139: PPUSH
10140: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10144: LD_EXP 68
10148: PPUSH
10149: CALL_OW 310
10153: PUSH
10154: LD_EXP 13
10158: EQUAL
10159: IFFALSE 10123
// meetBelkovBrother = true ;
10161: LD_ADDR_EXP 4
10165: PUSH
10166: LD_INT 1
10168: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10169: LD_EXP 68
10173: PPUSH
10174: LD_STRING D10-Bel-1
10176: PPUSH
10177: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10181: LD_EXP 62
10185: PPUSH
10186: LD_STRING D10-Bur-1
10188: PPUSH
10189: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10193: LD_EXP 68
10197: PPUSH
10198: LD_STRING D10-Bel-2
10200: PPUSH
10201: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10205: LD_EXP 62
10209: PPUSH
10210: LD_STRING D10-Bur-2
10212: PPUSH
10213: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10217: LD_EXP 67
10221: PPUSH
10222: LD_STRING D10-Kur-2a
10224: PPUSH
10225: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10229: LD_ADDR_EXP 74
10233: PUSH
10234: EMPTY
10235: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10236: LD_ADDR_EXP 75
10240: PUSH
10241: EMPTY
10242: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10243: LD_ADDR_EXP 22
10247: PUSH
10248: LD_INT 1
10250: ST_TO_ADDR
// CreateBelkovTeam ;
10251: CALL 6066 0 0
// ComExitBuilding ( belkovTeam ) ;
10255: LD_EXP 73
10259: PPUSH
10260: CALL_OW 122
// wait ( 0 0$1 ) ;
10264: LD_INT 35
10266: PPUSH
10267: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10271: LD_ADDR_EXP 72
10275: PUSH
10276: LD_INT 22
10278: PUSH
10279: LD_INT 6
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: PUSH
10286: LD_INT 21
10288: PUSH
10289: LD_INT 2
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PPUSH
10300: CALL_OW 69
10304: PUSH
10305: LD_INT 1
10307: ARRAY
10308: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10309: LD_ADDR_EXP 73
10313: PUSH
10314: LD_EXP 73
10318: PUSH
10319: LD_EXP 72
10323: ADD
10324: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10325: LD_EXP 73
10329: PPUSH
10330: LD_INT 147
10332: PPUSH
10333: LD_INT 102
10335: PPUSH
10336: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10340: LD_EXP 73
10344: PPUSH
10345: LD_INT 133
10347: PPUSH
10348: LD_INT 94
10350: PPUSH
10351: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10355: LD_EXP 73
10359: PPUSH
10360: LD_INT 123
10362: PPUSH
10363: LD_INT 74
10365: PPUSH
10366: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10370: LD_EXP 73
10374: PPUSH
10375: LD_INT 111
10377: PPUSH
10378: LD_INT 48
10380: PPUSH
10381: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10385: LD_EXP 73
10389: PPUSH
10390: LD_INT 122
10392: PPUSH
10393: LD_INT 43
10395: PPUSH
10396: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10400: LD_EXP 73
10404: PPUSH
10405: LD_INT 129
10407: PPUSH
10408: LD_INT 32
10410: PPUSH
10411: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10415: LD_EXP 73
10419: PPUSH
10420: LD_INT 132
10422: PPUSH
10423: LD_INT 22
10425: PPUSH
10426: CALL_OW 171
// wait ( 0 0$8 ) ;
10430: LD_INT 280
10432: PPUSH
10433: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10437: LD_EXP 67
10441: PPUSH
10442: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10446: LD_EXP 67
10450: PPUSH
10451: LD_STRING D10-Kur-2b
10453: PPUSH
10454: CALL_OW 88
// InGameOff ;
10458: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10462: LD_STRING M4
10464: PPUSH
10465: CALL_OW 337
// backToBeria1 = true ;
10469: LD_ADDR_EXP 15
10473: PUSH
10474: LD_INT 1
10476: ST_TO_ADDR
// end ;
10477: PPOPN 3
10479: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10480: LD_INT 9
10482: PPUSH
10483: LD_INT 22
10485: PUSH
10486: LD_INT 3
10488: PUSH
10489: EMPTY
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 21
10495: PUSH
10496: LD_INT 2
10498: PUSH
10499: EMPTY
10500: LIST
10501: LIST
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PPUSH
10507: CALL_OW 70
10511: PUSH
10512: LD_EXP 14
10516: AND
10517: IFFALSE 10534
10519: GO 10521
10521: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10522: LD_EXP 67
10526: PPUSH
10527: LD_STRING D1a-Kur-1a
10529: PPUSH
10530: CALL_OW 88
10534: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10535: LD_EXP 22
10539: IFFALSE 10942
10541: GO 10543
10543: DISABLE
10544: LD_INT 0
10546: PPUSH
10547: PPUSH
// begin enable ;
10548: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10549: LD_INT 10
10551: PPUSH
10552: LD_INT 22
10554: PUSH
10555: LD_INT 6
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 70
10566: PUSH
10567: LD_INT 0
10569: EQUAL
10570: IFFALSE 10574
// exit ;
10572: GO 10942
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10574: LD_ADDR_VAR 0 1
10578: PUSH
10579: LD_INT 10
10581: PPUSH
10582: LD_INT 22
10584: PUSH
10585: LD_INT 6
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PPUSH
10592: CALL_OW 70
10596: PUSH
10597: FOR_IN
10598: IFFALSE 10928
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10600: LD_VAR 0 1
10604: PPUSH
10605: CALL_OW 247
10609: PUSH
10610: LD_INT 1
10612: EQUAL
10613: PUSH
10614: LD_VAR 0 1
10618: PUSH
10619: LD_EXP 64
10623: EQUAL
10624: NOT
10625: PUSH
10626: LD_VAR 0 1
10630: PUSH
10631: LD_EXP 68
10635: EQUAL
10636: NOT
10637: AND
10638: PUSH
10639: LD_VAR 0 1
10643: PUSH
10644: LD_EXP 65
10648: EQUAL
10649: NOT
10650: AND
10651: AND
10652: IFFALSE 10693
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10654: LD_ADDR_EXP 23
10658: PUSH
10659: LD_EXP 23
10663: PUSH
10664: LD_INT 1
10666: PLUS
10667: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10668: LD_ADDR_EXP 74
10672: PUSH
10673: LD_EXP 74
10677: PUSH
10678: LD_VAR 0 1
10682: ADD
10683: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10684: LD_VAR 0 1
10688: PPUSH
10689: CALL_OW 64
// end ; if unit = Kirilenkova then
10693: LD_VAR 0 1
10697: PUSH
10698: LD_EXP 65
10702: EQUAL
10703: IFFALSE 10726
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10705: LD_EXP 65
10709: PPUSH
10710: LD_STRING 02_TmpKirilenkova
10712: PPUSH
10713: CALL_OW 38
// RemoveUnit ( unit ) ;
10717: LD_VAR 0 1
10721: PPUSH
10722: CALL_OW 64
// end ; if unit = Belkov2 then
10726: LD_VAR 0 1
10730: PUSH
10731: LD_EXP 68
10735: EQUAL
10736: IFFALSE 10759
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10738: LD_EXP 68
10742: PPUSH
10743: LD_STRING 02_TmpBelkov2
10745: PPUSH
10746: CALL_OW 38
// RemoveUnit ( unit ) ;
10750: LD_VAR 0 1
10754: PPUSH
10755: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10759: LD_VAR 0 1
10763: PPUSH
10764: CALL_OW 247
10768: PUSH
10769: LD_INT 2
10771: EQUAL
10772: IFFALSE 10926
// begin driver = UnitsInside ( unit ) ;
10774: LD_ADDR_VAR 0 2
10778: PUSH
10779: LD_VAR 0 1
10783: PPUSH
10784: CALL_OW 313
10788: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10789: LD_VAR 0 2
10793: PUSH
10794: LD_INT 1
10796: ARRAY
10797: PUSH
10798: LD_EXP 64
10802: EQUAL
10803: IFFALSE 10828
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10805: LD_EXP 64
10809: PPUSH
10810: LD_STRING 02_TmpBelkov
10812: PPUSH
10813: CALL_OW 38
// RemoveUnit ( unit ) ;
10817: LD_VAR 0 1
10821: PPUSH
10822: CALL_OW 64
// end else
10826: GO 10849
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10828: LD_EXP 68
10832: PPUSH
10833: LD_STRING 02_TmpBelkov2
10835: PPUSH
10836: CALL_OW 38
// RemoveUnit ( unit ) ;
10840: LD_VAR 0 1
10844: PPUSH
10845: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
10849: LD_ADDR_EXP 75
10853: PUSH
10854: LD_EXP 75
10858: PUSH
10859: LD_VAR 0 1
10863: PPUSH
10864: CALL_OW 265
10868: PUSH
10869: LD_VAR 0 1
10873: PPUSH
10874: CALL_OW 262
10878: PUSH
10879: LD_VAR 0 1
10883: PPUSH
10884: CALL_OW 263
10888: PUSH
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 264
10898: PUSH
10899: LD_VAR 0 1
10903: PPUSH
10904: CALL_OW 261
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: ADD
10916: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10917: LD_VAR 0 1
10921: PPUSH
10922: CALL_OW 64
// end ; end ;
10926: GO 10597
10928: POP
10929: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
10930: LD_EXP 74
10934: PPUSH
10935: LD_STRING 02_TmpBelkovTeam
10937: PPUSH
10938: CALL_OW 38
// end ;
10942: PPOPN 2
10944: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
10945: LD_INT 8
10947: PPUSH
10948: LD_INT 22
10950: PUSH
10951: LD_INT 3
10953: PUSH
10954: EMPTY
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 21
10960: PUSH
10961: LD_INT 1
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PPUSH
10972: CALL_OW 71
10976: PUSH
10977: LD_INT 0
10979: EQUAL
10980: PUSH
10981: LD_EXP 15
10985: AND
10986: IFFALSE 11172
10988: GO 10990
10990: DISABLE
10991: LD_INT 0
10993: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
10994: LD_ADDR_VAR 0 1
10998: PUSH
10999: LD_EXP 69
11003: PPUSH
11004: LD_INT 25
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PPUSH
11014: CALL_OW 72
11018: ST_TO_ADDR
// backToBeria1 = false ;
11019: LD_ADDR_EXP 15
11023: PUSH
11024: LD_INT 0
11026: ST_TO_ADDR
// canExitBase = false ;
11027: LD_ADDR_EXP 19
11031: PUSH
11032: LD_INT 0
11034: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11035: LD_EXP 76
11039: PPUSH
11040: LD_STRING D11-Pla-1
11042: PPUSH
11043: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11047: LD_INT 22
11049: PUSH
11050: LD_INT 3
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: PUSH
11057: LD_INT 21
11059: PUSH
11060: LD_INT 1
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PPUSH
11071: CALL_OW 69
11075: PUSH
11076: LD_INT 1
11078: GREATER
11079: IFFALSE 11095
// Say ( Burlak , D11-Bur-1a ) else
11081: LD_EXP 62
11085: PPUSH
11086: LD_STRING D11-Bur-1a
11088: PPUSH
11089: CALL_OW 88
11093: GO 11107
// Say ( Burlak , D11-Bur-1 ) ;
11095: LD_EXP 62
11099: PPUSH
11100: LD_STRING D11-Bur-1
11102: PPUSH
11103: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11107: LD_STRING M5
11109: PPUSH
11110: CALL_OW 337
// construcMoreVehicles = true ;
11114: LD_ADDR_EXP 17
11118: PUSH
11119: LD_INT 1
11121: ST_TO_ADDR
// spawnCrates = true ;
11122: LD_ADDR_EXP 21
11126: PUSH
11127: LD_INT 1
11129: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: LD_INT 2
11146: PPUSH
11147: LD_INT 159
11149: PPUSH
11150: LD_INT 112
11152: PPUSH
11153: LD_INT 0
11155: PPUSH
11156: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11160: LD_VAR 0 1
11164: PPUSH
11165: LD_INT 71
11167: PPUSH
11168: CALL_OW 180
// end ;
11172: PPOPN 1
11174: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11175: LD_EXP 18
11179: PUSH
11180: LD_INT 22
11182: PUSH
11183: LD_INT 3
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 21
11192: PUSH
11193: LD_INT 1
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: EMPTY
11201: LIST
11202: LIST
11203: PPUSH
11204: CALL_OW 69
11208: GREATEREQUAL
11209: IFFALSE 12295
11211: GO 11213
11213: DISABLE
11214: LD_INT 0
11216: PPUSH
11217: PPUSH
// begin canRemoveBelkovUnits = false ;
11218: LD_ADDR_EXP 22
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// spawnCrates = false ;
11226: LD_ADDR_EXP 21
11230: PUSH
11231: LD_INT 0
11233: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11234: LD_INT 22
11236: PUSH
11237: LD_INT 3
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 21
11259: PUSH
11260: LD_INT 2
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: LIST
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PPUSH
11276: CALL_OW 69
11280: PPUSH
11281: CALL_OW 141
// InGameOn ;
11285: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11289: LD_EXP 76
11293: PPUSH
11294: CALL_OW 85
// DialogueOn ;
11298: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11302: LD_EXP 62
11306: PPUSH
11307: LD_STRING D12-Bur-1
11309: PPUSH
11310: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11314: LD_EXP 76
11318: PPUSH
11319: LD_STRING D12-Pla-1
11321: PPUSH
11322: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11326: LD_EXP 62
11330: PPUSH
11331: LD_STRING D12-Bur-2
11333: PPUSH
11334: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11338: LD_EXP 76
11342: PPUSH
11343: LD_STRING D12-Pla-2
11345: PPUSH
11346: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11350: LD_EXP 62
11354: PPUSH
11355: LD_STRING D12-Bur-3
11357: PPUSH
11358: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11362: LD_EXP 76
11366: PPUSH
11367: LD_STRING D12-Pla-3
11369: PPUSH
11370: CALL_OW 88
// DialogueOff ;
11374: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11378: LD_INT 6
11380: PPUSH
11381: LD_INT 1
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 1
11389: PPUSH
11390: CALL_OW 80
// PrepareAmerican ;
11394: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11398: CALL 1132 0 0
// if IsOK ( Belkov ) then
11402: LD_EXP 64
11406: PPUSH
11407: CALL_OW 302
11411: IFFALSE 11425
// tmpBelkov = Belkov else
11413: LD_ADDR_VAR 0 1
11417: PUSH
11418: LD_EXP 64
11422: ST_TO_ADDR
11423: GO 11435
// tmpBelkov = Belkov2 ;
11425: LD_ADDR_VAR 0 1
11429: PUSH
11430: LD_EXP 68
11434: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11435: LD_EXP 72
11439: PPUSH
11440: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11444: LD_EXP 80
11448: PPUSH
11449: LD_STRING D13-Sol1-1
11451: PPUSH
11452: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11456: LD_VAR 0 1
11460: PPUSH
11461: LD_STRING D13-Bel-1
11463: PPUSH
11464: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11468: LD_EXP 67
11472: PPUSH
11473: LD_STRING D13-Kur-1
11475: PPUSH
11476: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11480: LD_VAR 0 1
11484: PPUSH
11485: LD_STRING D13-Bel-2
11487: PPUSH
11488: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11492: LD_EXP 73
11496: PPUSH
11497: LD_INT 121
11499: PPUSH
11500: LD_INT 29
11502: PPUSH
11503: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11507: LD_INT 35
11509: PPUSH
11510: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11514: LD_EXP 72
11518: PPUSH
11519: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11523: LD_ADDR_VAR 0 2
11527: PUSH
11528: LD_EXP 73
11532: PPUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 56
11545: PUSH
11546: EMPTY
11547: LIST
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: PPUSH
11553: CALL_OW 72
11557: PPUSH
11558: LD_EXP 72
11562: PPUSH
11563: CALL_OW 74
11567: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11568: LD_EXP 72
11572: PPUSH
11573: LD_VAR 0 2
11577: PPUSH
11578: CALL_OW 296
11582: PUSH
11583: LD_INT 5
11585: LESS
11586: IFFALSE 11599
// ComStop ( kirovVehicle ) else
11588: LD_EXP 72
11592: PPUSH
11593: CALL_OW 141
11597: GO 11614
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11599: LD_EXP 73
11603: PPUSH
11604: LD_INT 121
11606: PPUSH
11607: LD_INT 29
11609: PPUSH
11610: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11614: LD_EXP 73
11618: PPUSH
11619: LD_EXP 80
11623: PPUSH
11624: CALL_OW 74
11628: PPUSH
11629: LD_EXP 80
11633: PPUSH
11634: CALL_OW 296
11638: PUSH
11639: LD_INT 5
11641: LESS
11642: IFFALSE 11507
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11644: LD_EXP 72
11648: PUSH
11649: LD_EXP 80
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PPUSH
11658: CALL_OW 87
// ComWalk ( trapTeam ) ;
11662: LD_EXP 81
11666: PPUSH
11667: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11671: LD_EXP 81
11675: PPUSH
11676: LD_EXP 72
11680: PPUSH
11681: CALL_OW 179
// ComStop ( belkovTeam ) ;
11685: LD_EXP 73
11689: PPUSH
11690: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11694: LD_EXP 73
11698: PPUSH
11699: LD_EXP 80
11703: PPUSH
11704: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11708: LD_INT 25
11710: PPUSH
11711: LD_INT 22
11713: PUSH
11714: LD_INT 1
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: PUSH
11721: LD_INT 21
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PPUSH
11735: CALL_OW 70
11739: PPUSH
11740: LD_INT 111
11742: PPUSH
11743: LD_INT 13
11745: PPUSH
11746: CALL_OW 171
// music_class = music_combat ;
11750: LD_ADDR_OWVAR 72
11754: PUSH
11755: LD_INT 1
11757: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11758: LD_INT 35
11760: PPUSH
11761: CALL_OW 67
// DialogueOn ;
11765: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11769: LD_EXP 80
11773: PPUSH
11774: LD_STRING D14-Sol1-1
11776: PPUSH
11777: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11781: LD_VAR 0 1
11785: PPUSH
11786: LD_STRING D14-Bel-1
11788: PPUSH
11789: CALL_OW 88
// DialogueOff ;
11793: CALL_OW 7
// immortalBelkovTeam = true ;
11797: LD_ADDR_EXP 24
11801: PUSH
11802: LD_INT 1
11804: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11805: LD_INT 6
11807: PPUSH
11808: LD_INT 1
11810: PPUSH
11811: LD_INT 2
11813: PPUSH
11814: LD_INT 1
11816: PPUSH
11817: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
11821: LD_EXP 73
11825: PPUSH
11826: LD_INT 107
11828: PPUSH
11829: LD_INT 5
11831: PPUSH
11832: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
11836: LD_EXP 72
11840: PPUSH
11841: LD_INT 107
11843: PPUSH
11844: LD_INT 5
11846: PPUSH
11847: CALL_OW 111
// wait ( 0 0$2 ) ;
11851: LD_INT 70
11853: PPUSH
11854: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
11858: LD_EXP 73
11862: PPUSH
11863: LD_INT 101
11865: PPUSH
11866: LD_INT 19
11868: PPUSH
11869: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
11873: LD_EXP 72
11877: PPUSH
11878: LD_INT 101
11880: PPUSH
11881: LD_INT 19
11883: PPUSH
11884: CALL_OW 111
// wait ( 0 0$2 ) ;
11888: LD_INT 70
11890: PPUSH
11891: CALL_OW 67
// immortalVehLive = 400 ;
11895: LD_ADDR_EXP 25
11899: PUSH
11900: LD_INT 400
11902: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
11903: LD_EXP 72
11907: PPUSH
11908: LD_INT 500
11910: PPUSH
11911: CALL_OW 234
// wait ( 0 0$3 ) ;
11915: LD_INT 105
11917: PPUSH
11918: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 121
// wait ( 0 0$1 ) ;
11931: LD_INT 35
11933: PPUSH
11934: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
11938: LD_EXP 80
11942: PPUSH
11943: LD_EXP 72
11947: PPUSH
11948: CALL_OW 120
// AddComHold ( trapTeam ) ;
11952: LD_EXP 81
11956: PPUSH
11957: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
11961: LD_EXP 73
11965: PPUSH
11966: LD_INT 88
11968: PPUSH
11969: LD_INT 18
11971: PPUSH
11972: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11976: LD_INT 35
11978: PPUSH
11979: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: LD_INT 15
11999: PPUSH
12000: CALL_OW 308
12004: IFFALSE 11976
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12006: LD_ADDR_EXP 88
12010: PUSH
12011: LD_INT 22
12013: PUSH
12014: LD_INT 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PUSH
12021: LD_INT 21
12023: PUSH
12024: LD_INT 2
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: EMPTY
12032: LIST
12033: LIST
12034: PPUSH
12035: CALL_OW 69
12039: PUSH
12040: LD_INT 1
12042: ARRAY
12043: ST_TO_ADDR
// ComMoveXY ( amVeh , 118 , 25 ) ;
12044: LD_EXP 88
12048: PPUSH
12049: LD_INT 118
12051: PPUSH
12052: LD_INT 25
12054: PPUSH
12055: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: LD_STRING D14-Bel-1a
12066: PPUSH
12067: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12071: LD_EXP 67
12075: PPUSH
12076: LD_STRING D14-Kur-1
12078: PPUSH
12079: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12083: LD_VAR 0 1
12087: PPUSH
12088: LD_STRING D14-Bel-2
12090: PPUSH
12091: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12095: LD_EXP 67
12099: PPUSH
12100: LD_STRING D14-Kur-2
12102: PPUSH
12103: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12107: LD_EXP 76
12111: PPUSH
12112: CALL_OW 85
// wait ( 0 0$2 ) ;
12116: LD_INT 70
12118: PPUSH
12119: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12123: LD_EXP 62
12127: PPUSH
12128: LD_STRING D14a-Bur-1
12130: PPUSH
12131: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12135: LD_EXP 76
12139: PPUSH
12140: LD_STRING D14a-Pla-1
12142: PPUSH
12143: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12147: LD_EXP 62
12151: PPUSH
12152: LD_STRING D14a-Bur-2
12154: PPUSH
12155: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12159: LD_EXP 76
12163: PPUSH
12164: LD_STRING D14a-Pla-2
12166: PPUSH
12167: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12171: LD_EXP 62
12175: PPUSH
12176: LD_STRING D14a-Bur-3
12178: PPUSH
12179: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12183: LD_EXP 76
12187: PPUSH
12188: LD_STRING D14a-Pla-3
12190: PPUSH
12191: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12195: LD_EXP 62
12199: PPUSH
12200: LD_STRING D14a-Bur-4
12202: PPUSH
12203: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12207: LD_EXP 76
12211: PPUSH
12212: LD_STRING D14a-Pla-4
12214: PPUSH
12215: CALL_OW 88
// InGameOff ;
12219: CALL_OW 9
// immortalBelkovTeam = false ;
12223: LD_ADDR_EXP 24
12227: PUSH
12228: LD_INT 0
12230: ST_TO_ADDR
// activateAMAI = true ;
12231: LD_ADDR_EXP 27
12235: PUSH
12236: LD_INT 1
12238: ST_TO_ADDR
// canExitBase = true ;
12239: LD_ADDR_EXP 19
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// canExploreMap = true ;
12247: LD_ADDR_EXP 20
12251: PUSH
12252: LD_INT 1
12254: ST_TO_ADDR
// construcMoreVehicles = false ;
12255: LD_ADDR_EXP 17
12259: PUSH
12260: LD_INT 0
12262: ST_TO_ADDR
// activateBelkovAI = true ;
12263: LD_ADDR_EXP 28
12267: PUSH
12268: LD_INT 1
12270: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12271: LD_STRING M6
12273: PPUSH
12274: CALL_OW 337
// music_class = 0 ;
12278: LD_ADDR_OWVAR 72
12282: PUSH
12283: LD_INT 0
12285: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12286: LD_EXP 81
12290: PPUSH
12291: CALL_OW 139
// end ;
12295: PPOPN 2
12297: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12298: LD_EXP 88
12302: PPUSH
12303: LD_INT 118
12305: PPUSH
12306: LD_INT 25
12308: PPUSH
12309: CALL_OW 297
12313: PUSH
12314: LD_INT 6
12316: LESS
12317: IFFALSE 12412
12319: GO 12321
12321: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12322: LD_EXP 80
12326: PPUSH
12327: CALL_OW 121
// uc_side = 1 ;
12331: LD_ADDR_OWVAR 20
12335: PUSH
12336: LD_INT 1
12338: ST_TO_ADDR
// uc_nation = 1 ;
12339: LD_ADDR_OWVAR 21
12343: PUSH
12344: LD_INT 1
12346: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12347: LD_INT 0
12349: PPUSH
12350: LD_EXP 59
12354: PPUSH
12355: CALL_OW 383
// amMech = CreateHuman ;
12359: LD_ADDR_EXP 89
12363: PUSH
12364: CALL_OW 44
12368: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12369: LD_EXP 89
12373: PPUSH
12374: LD_INT 27
12376: PPUSH
12377: LD_INT 0
12379: PPUSH
12380: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12384: LD_EXP 89
12388: PPUSH
12389: LD_EXP 88
12393: PPUSH
12394: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12398: LD_EXP 89
12402: PPUSH
12403: LD_EXP 88
12407: PPUSH
12408: CALL_OW 180
// end ;
12412: END
// every 0 0$1 trigger immortalBelkovTeam do
12413: LD_EXP 24
12417: IFFALSE 12504
12419: GO 12421
12421: DISABLE
// begin enable ;
12422: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
12423: LD_EXP 73
12427: PPUSH
12428: LD_INT 21
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PPUSH
12438: CALL_OW 72
12442: PPUSH
12443: LD_INT 1000
12445: PPUSH
12446: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
12450: LD_EXP 73
12454: PPUSH
12455: LD_INT 21
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PPUSH
12465: CALL_OW 72
12469: IFFALSE 12504
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
12471: LD_EXP 73
12475: PPUSH
12476: LD_INT 21
12478: PUSH
12479: LD_INT 2
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PPUSH
12486: CALL_OW 72
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: PPUSH
12495: LD_EXP 25
12499: PPUSH
12500: CALL_OW 234
// end ;
12504: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
12505: LD_EXP 20
12509: PUSH
12510: LD_EXP 37
12514: NOT
12515: AND
12516: PUSH
12517: LD_EXP 61
12521: PUSH
12522: LD_INT 0
12524: GREATER
12525: AND
12526: IFFALSE 12546
12528: GO 12530
12530: DISABLE
// begin enable ;
12531: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
12532: LD_ADDR_EXP 61
12536: PUSH
12537: LD_EXP 61
12541: PUSH
12542: LD_INT 35
12544: MINUS
12545: ST_TO_ADDR
// end ;
12546: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
12547: LD_EXP 20
12551: IFFALSE 12635
12553: GO 12555
12555: DISABLE
12556: LD_INT 0
12558: PPUSH
12559: PPUSH
// begin tmp = trapTeam ;
12560: LD_ADDR_VAR 0 2
12564: PUSH
12565: LD_EXP 81
12569: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
12570: LD_ADDR_VAR 0 2
12574: PUSH
12575: LD_VAR 0 2
12579: PUSH
12580: LD_EXP 80
12584: DIFF
12585: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
12586: LD_ADDR_VAR 0 1
12590: PUSH
12591: DOUBLE
12592: LD_INT 1
12594: DEC
12595: ST_TO_ADDR
12596: LD_INT 2
12598: PPUSH
12599: LD_INT 3
12601: PPUSH
12602: CALL_OW 12
12606: PUSH
12607: FOR_TO
12608: IFFALSE 12633
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
12610: LD_VAR 0 2
12614: PUSH
12615: LD_VAR 0 1
12619: ARRAY
12620: PPUSH
12621: LD_INT 87
12623: PPUSH
12624: LD_INT 18
12626: PPUSH
12627: CALL_OW 114
12631: GO 12607
12633: POP
12634: POP
// end ;
12635: PPOPN 2
12637: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
12638: LD_EXP 61
12642: PUSH
12643: LD_INT 70
12645: LESS
12646: PUSH
12647: LD_EXP 81
12651: AND
12652: IFFALSE 12681
12654: GO 12656
12656: DISABLE
// begin enable ;
12657: ENABLE
// activateBelkovAI = false ;
12658: LD_ADDR_EXP 28
12662: PUSH
12663: LD_INT 0
12665: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
12666: LD_EXP 73
12670: PPUSH
12671: LD_INT 120
12673: PPUSH
12674: LD_INT 28
12676: PPUSH
12677: CALL_OW 114
// end ;
12681: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
12682: LD_EXP 29
12686: NOT
12687: PUSH
12688: LD_EXP 30
12692: NOT
12693: OR
12694: PUSH
12695: LD_EXP 20
12699: AND
12700: IFFALSE 13162
12702: GO 12704
12704: DISABLE
12705: LD_INT 0
12707: PPUSH
// begin enable ;
12708: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
12709: LD_ADDR_VAR 0 1
12713: PUSH
12714: LD_INT 22
12716: PUSH
12717: LD_INT 1
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 21
12726: PUSH
12727: LD_INT 3
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: LD_INT 30
12736: PUSH
12737: LD_INT 31
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: PPUSH
12749: CALL_OW 69
12753: PUSH
12754: FOR_IN
12755: IFFALSE 13160
// begin if See ( 3 , bunker ) then
12757: LD_INT 3
12759: PPUSH
12760: LD_VAR 0 1
12764: PPUSH
12765: CALL_OW 292
12769: IFFALSE 13158
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
12771: LD_VAR 0 1
12775: PUSH
12776: LD_EXP 82
12780: IN
12781: PUSH
12782: LD_EXP 29
12786: NOT
12787: AND
12788: PUSH
12789: LD_INT 18
12791: PPUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 3
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: EMPTY
12803: LIST
12804: PPUSH
12805: CALL_OW 70
12809: NOT
12810: AND
12811: IFFALSE 13004
// begin sawLeftBunker = true ;
12813: LD_ADDR_EXP 29
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 85
// DialogueOn ;
12830: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
12834: LD_EXP 62
12838: PPUSH
12839: LD_STRING D15-Bur-1
12841: PPUSH
12842: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
12846: LD_EXP 63
12850: PPUSH
12851: CALL_OW 302
12855: PUSH
12856: LD_EXP 70
12860: PPUSH
12861: CALL_OW 302
12865: OR
12866: IFFALSE 12961
// begin if IsOK ( Gnyevko ) then
12868: LD_EXP 63
12872: PPUSH
12873: CALL_OW 302
12877: IFFALSE 12891
// Say ( Gnyevko , D15-Gny-1 ) ;
12879: LD_EXP 63
12883: PPUSH
12884: LD_STRING D15-Gny-1
12886: PPUSH
12887: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12891: LD_EXP 70
12895: PPUSH
12896: CALL_OW 302
12900: IFFALSE 12914
// Say ( Kovalyuk , D15-Kov-1 ) ;
12902: LD_EXP 70
12906: PPUSH
12907: LD_STRING D15-Kov-1
12909: PPUSH
12910: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
12914: LD_EXP 62
12918: PPUSH
12919: LD_STRING D15-Bur-2
12921: PPUSH
12922: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12926: LD_EXP 70
12930: PPUSH
12931: CALL_OW 302
12935: IFFALSE 12949
// Say ( Kovalyuk , D15-Kov-2 ) ;
12937: LD_EXP 70
12941: PPUSH
12942: LD_STRING D15-Kov-2
12944: PPUSH
12945: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
12949: LD_EXP 62
12953: PPUSH
12954: LD_STRING D15-Bur-3
12956: PPUSH
12957: CALL_OW 88
// end ; DialogueOff ;
12961: CALL_OW 7
// if raportForPlatonov = 2 then
12965: LD_EXP 39
12969: PUSH
12970: LD_INT 2
12972: EQUAL
12973: IFFALSE 12985
// raportForPlatonov = 1 else
12975: LD_ADDR_EXP 39
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
12983: GO 12993
// raportForPlatonov = 3 ;
12985: LD_ADDR_EXP 39
12989: PUSH
12990: LD_INT 3
12992: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
12993: LD_STRING M7
12995: PPUSH
12996: CALL_OW 337
// exit ;
13000: POP
13001: POP
13002: GO 13162
// end ; if bunker in rightBunkers and not sawRightBunker then
13004: LD_VAR 0 1
13008: PUSH
13009: LD_EXP 83
13013: IN
13014: PUSH
13015: LD_EXP 30
13019: NOT
13020: AND
13021: IFFALSE 13158
// begin sawRightBunker = true ;
13023: LD_ADDR_EXP 30
13027: PUSH
13028: LD_INT 1
13030: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13031: LD_VAR 0 1
13035: PPUSH
13036: CALL_OW 85
// DialogueOn ;
13040: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13044: LD_EXP 70
13048: PPUSH
13049: CALL_OW 302
13053: IFFALSE 13122
// begin if sawLeftBunker then
13055: LD_EXP 29
13059: IFFALSE 13075
// Say ( Kovalyuk , D16-Kov-1a ) else
13061: LD_EXP 70
13065: PPUSH
13066: LD_STRING D16-Kov-1a
13068: PPUSH
13069: CALL_OW 88
13073: GO 13087
// Say ( Kovalyuk , D16-Kov-1 ) ;
13075: LD_EXP 70
13079: PPUSH
13080: LD_STRING D16-Kov-1
13082: PPUSH
13083: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13087: LD_EXP 62
13091: PPUSH
13092: LD_STRING D16-Bur-1
13094: PPUSH
13095: CALL_OW 88
// if IsOK ( Gnyevko ) then
13099: LD_EXP 63
13103: PPUSH
13104: CALL_OW 302
13108: IFFALSE 13122
// Say ( Gnyevko , D16-Gny-1 ) ;
13110: LD_EXP 63
13114: PPUSH
13115: LD_STRING D16-Gny-1
13117: PPUSH
13118: CALL_OW 88
// end ; DialogueOff ;
13122: CALL_OW 7
// if raportForPlatonov = 3 then
13126: LD_EXP 39
13130: PUSH
13131: LD_INT 3
13133: EQUAL
13134: IFFALSE 13146
// raportForPlatonov = 1 else
13136: LD_ADDR_EXP 39
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
13144: GO 13154
// raportForPlatonov = 2 ;
13146: LD_ADDR_EXP 39
13150: PUSH
13151: LD_INT 2
13153: ST_TO_ADDR
// exit ;
13154: POP
13155: POP
13156: GO 13162
// end ; end ; end ;
13158: GO 12754
13160: POP
13161: POP
// end ;
13162: PPOPN 1
13164: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13165: LD_EXP 32
13169: NOT
13170: PUSH
13171: LD_EXP 83
13175: AND
13176: PUSH
13177: LD_EXP 20
13181: AND
13182: PUSH
13183: LD_EXP 70
13187: PPUSH
13188: CALL_OW 302
13192: PUSH
13193: LD_EXP 63
13197: PPUSH
13198: CALL_OW 302
13202: OR
13203: AND
13204: IFFALSE 13392
13206: GO 13208
13208: DISABLE
13209: LD_INT 0
13211: PPUSH
// begin enable ;
13212: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: LD_INT 22
13220: PUSH
13221: LD_INT 3
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: LD_INT 2
13230: PUSH
13231: LD_INT 21
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 21
13243: PUSH
13244: LD_INT 2
13246: PUSH
13247: EMPTY
13248: LIST
13249: LIST
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: PUSH
13265: FOR_IN
13266: IFFALSE 13390
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13268: LD_VAR 0 1
13272: PPUSH
13273: CALL_OW 320
13277: PUSH
13278: LD_EXP 83
13282: PUSH
13283: LD_INT 1
13285: ARRAY
13286: EQUAL
13287: PUSH
13288: LD_VAR 0 1
13292: PPUSH
13293: CALL_OW 320
13297: PUSH
13298: LD_EXP 83
13302: PUSH
13303: LD_INT 2
13305: ARRAY
13306: EQUAL
13307: OR
13308: IFFALSE 13388
// begin dialogAttackRightBunkers = true ;
13310: LD_ADDR_EXP 32
13314: PUSH
13315: LD_INT 1
13317: ST_TO_ADDR
// DialogueOn ;
13318: CALL_OW 6
// if IsOK ( Gnyevko ) then
13322: LD_EXP 63
13326: PPUSH
13327: CALL_OW 302
13331: IFFALSE 13345
// Say ( Gnyevko , D16A-Gny-1 ) ;
13333: LD_EXP 63
13337: PPUSH
13338: LD_STRING D16A-Gny-1
13340: PPUSH
13341: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13345: LD_EXP 70
13349: PPUSH
13350: CALL_OW 302
13354: IFFALSE 13368
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13356: LD_EXP 70
13360: PPUSH
13361: LD_STRING D16A-Kov-1
13363: PPUSH
13364: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13368: LD_EXP 62
13372: PPUSH
13373: LD_STRING D16A-Bur-1
13375: PPUSH
13376: CALL_OW 88
// DialogueOff ;
13380: CALL_OW 7
// exit ;
13384: POP
13385: POP
13386: GO 13392
// end ; end ;
13388: GO 13265
13390: POP
13391: POP
// end ;
13392: PPOPN 1
13394: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
13395: LD_INT 18
13397: PPUSH
13398: LD_INT 22
13400: PUSH
13401: LD_INT 3
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: PUSH
13408: EMPTY
13409: LIST
13410: PPUSH
13411: CALL_OW 70
13415: PUSH
13416: LD_EXP 29
13420: NOT
13421: AND
13422: IFFALSE 13805
13424: GO 13426
13426: DISABLE
13427: LD_INT 0
13429: PPUSH
// begin sawLeftBunker = true ;
13430: LD_ADDR_EXP 29
13434: PUSH
13435: LD_INT 1
13437: ST_TO_ADDR
// if playerGetSupport then
13438: LD_EXP 34
13442: IFFALSE 13461
// decsToChoose = [ 1 , 3 ] else
13444: LD_ADDR_VAR 0 1
13448: PUSH
13449: LD_INT 1
13451: PUSH
13452: LD_INT 3
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: ST_TO_ADDR
13459: GO 13480
// decsToChoose = [ 1 , 2 , 3 ] ;
13461: LD_ADDR_VAR 0 1
13465: PUSH
13466: LD_INT 1
13468: PUSH
13469: LD_INT 2
13471: PUSH
13472: LD_INT 3
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
13480: LD_STRING QAttackBw
13482: PPUSH
13483: LD_VAR 0 1
13487: PPUSH
13488: CALL_OW 98
13492: PUSH
13493: LD_INT 1
13495: DOUBLE
13496: EQUAL
13497: IFTRUE 13501
13499: GO 13594
13501: POP
// begin DialogueOn ;
13502: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
13506: LD_EXP 62
13510: PPUSH
13511: LD_STRING D17-Bur-1
13513: PPUSH
13514: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13518: LD_EXP 76
13522: PPUSH
13523: LD_STRING D17-Pla-1
13525: PPUSH
13526: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13530: LD_EXP 62
13534: PPUSH
13535: LD_STRING D17-Bur-2
13537: PPUSH
13538: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13542: LD_EXP 76
13546: PPUSH
13547: LD_STRING D17-Pla-2
13549: PPUSH
13550: CALL_OW 94
// DialogueOff ;
13554: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
13558: LD_EXP 42
13562: PUSH
13563: LD_INT 2
13565: PUSH
13566: LD_INT 3
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: IN
13573: NOT
13574: IFFALSE 13592
// begin initiative = 1 ;
13576: LD_ADDR_EXP 42
13580: PUSH
13581: LD_INT 1
13583: ST_TO_ADDR
// platonovOpinion = 2 ;
13584: LD_ADDR_EXP 5
13588: PUSH
13589: LD_INT 2
13591: ST_TO_ADDR
// end ; end ; 2 :
13592: GO 13735
13594: LD_INT 2
13596: DOUBLE
13597: EQUAL
13598: IFTRUE 13602
13600: GO 13707
13602: POP
// begin DialogueOn ;
13603: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13607: LD_EXP 62
13611: PPUSH
13612: LD_STRING D18-Bur-1
13614: PPUSH
13615: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13619: LD_EXP 76
13623: PPUSH
13624: LD_STRING D18-Pla-1
13626: PPUSH
13627: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13631: LD_EXP 62
13635: PPUSH
13636: LD_STRING D18-Bur-2
13638: PPUSH
13639: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
13643: LD_EXP 76
13647: PPUSH
13648: LD_STRING D18-Pla-2
13650: PPUSH
13651: CALL_OW 94
// DialogueOff ;
13655: CALL_OW 7
// playerGetSupport = true ;
13659: LD_ADDR_EXP 34
13663: PUSH
13664: LD_INT 1
13666: ST_TO_ADDR
// medalForGetSupport = false ;
13667: LD_ADDR_EXP 40
13671: PUSH
13672: LD_INT 0
13674: ST_TO_ADDR
// PlatonovSendSupport ;
13675: CALL 6522 0 0
// if initiative <> 3 then
13679: LD_EXP 42
13683: PUSH
13684: LD_INT 3
13686: NONEQUAL
13687: IFFALSE 13705
// begin initiative = 1 ;
13689: LD_ADDR_EXP 42
13693: PUSH
13694: LD_INT 1
13696: ST_TO_ADDR
// platonovOpinion = 2 ;
13697: LD_ADDR_EXP 5
13701: PUSH
13702: LD_INT 2
13704: ST_TO_ADDR
// end ; end ; 3 :
13705: GO 13735
13707: LD_INT 3
13709: DOUBLE
13710: EQUAL
13711: IFTRUE 13715
13713: GO 13734
13715: POP
// begin initiative = 3 ;
13716: LD_ADDR_EXP 42
13720: PUSH
13721: LD_INT 3
13723: ST_TO_ADDR
// platonovOpinion = 0 ;
13724: LD_ADDR_EXP 5
13728: PUSH
13729: LD_INT 0
13731: ST_TO_ADDR
// end ; end ;
13732: GO 13735
13734: POP
// if IsOK ( Gnyevko ) then
13735: LD_EXP 63
13739: PPUSH
13740: CALL_OW 302
13744: IFFALSE 13770
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13746: LD_EXP 63
13750: PPUSH
13751: LD_STRING D19-Gny-1
13753: PPUSH
13754: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13758: LD_EXP 62
13762: PPUSH
13763: LD_STRING D19-Bur-1
13765: PPUSH
13766: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
13770: LD_EXP 70
13774: PPUSH
13775: CALL_OW 302
13779: IFFALSE 13805
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13781: LD_EXP 70
13785: PPUSH
13786: LD_STRING D19-Kov-1
13788: PPUSH
13789: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13793: LD_EXP 62
13797: PPUSH
13798: LD_STRING D19-Bur-2
13800: PPUSH
13801: CALL_OW 88
// end ; end ;
13805: PPOPN 1
13807: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13808: LD_EXP 31
13812: NOT
13813: PUSH
13814: LD_EXP 82
13818: AND
13819: PUSH
13820: LD_EXP 20
13824: AND
13825: PUSH
13826: LD_INT 18
13828: PPUSH
13829: LD_INT 22
13831: PUSH
13832: LD_INT 3
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: PPUSH
13842: CALL_OW 70
13846: PUSH
13847: LD_INT 0
13849: EQUAL
13850: AND
13851: PUSH
13852: LD_EXP 70
13856: PPUSH
13857: CALL_OW 302
13861: PUSH
13862: LD_EXP 63
13866: PPUSH
13867: CALL_OW 302
13871: OR
13872: AND
13873: IFFALSE 14061
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
// begin enable ;
13881: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13882: LD_ADDR_VAR 0 1
13886: PUSH
13887: LD_INT 22
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: LD_INT 21
13902: PUSH
13903: LD_INT 1
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 21
13912: PUSH
13913: LD_INT 2
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: PPUSH
13929: CALL_OW 69
13933: PUSH
13934: FOR_IN
13935: IFFALSE 14059
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
13937: LD_VAR 0 1
13941: PPUSH
13942: CALL_OW 320
13946: PUSH
13947: LD_EXP 82
13951: PUSH
13952: LD_INT 1
13954: ARRAY
13955: EQUAL
13956: PUSH
13957: LD_VAR 0 1
13961: PPUSH
13962: CALL_OW 320
13966: PUSH
13967: LD_EXP 82
13971: PUSH
13972: LD_INT 2
13974: ARRAY
13975: EQUAL
13976: OR
13977: IFFALSE 14057
// begin dialogAttackLeftBunkers = true ;
13979: LD_ADDR_EXP 31
13983: PUSH
13984: LD_INT 1
13986: ST_TO_ADDR
// DialogueOn ;
13987: CALL_OW 6
// if IsOK ( Gnyevko ) then
13991: LD_EXP 63
13995: PPUSH
13996: CALL_OW 302
14000: IFFALSE 14014
// Say ( Gnyevko , D19A-Gny-1 ) ;
14002: LD_EXP 63
14006: PPUSH
14007: LD_STRING D19A-Gny-1
14009: PPUSH
14010: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14014: LD_EXP 70
14018: PPUSH
14019: CALL_OW 302
14023: IFFALSE 14037
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14025: LD_EXP 70
14029: PPUSH
14030: LD_STRING D19A-Kov-1
14032: PPUSH
14033: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14037: LD_EXP 62
14041: PPUSH
14042: LD_STRING D16A-Bur-1
14044: PPUSH
14045: CALL_OW 88
// DialogueOff ;
14049: CALL_OW 7
// exit ;
14053: POP
14054: POP
14055: GO 14061
// end ; end ;
14057: GO 13934
14059: POP
14060: POP
// end ;
14061: PPOPN 1
14063: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14064: LD_EXP 82
14068: NOT
14069: PUSH
14070: LD_INT 17
14072: PPUSH
14073: LD_INT 22
14075: PUSH
14076: LD_INT 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 21
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 30
14095: PUSH
14096: LD_INT 31
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 50
14105: PUSH
14106: EMPTY
14107: LIST
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 70
14119: PUSH
14120: LD_INT 0
14122: EQUAL
14123: OR
14124: PUSH
14125: LD_EXP 20
14129: AND
14130: IFFALSE 14181
14132: GO 14134
14134: DISABLE
// begin leftBunkers = [ ] ;
14135: LD_ADDR_EXP 82
14139: PUSH
14140: EMPTY
14141: ST_TO_ADDR
// DialogueOn ;
14142: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14146: LD_EXP 62
14150: PPUSH
14151: LD_STRING D20-Bur-1
14153: PPUSH
14154: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14158: LD_EXP 76
14162: PPUSH
14163: LD_STRING D20-Pla-1
14165: PPUSH
14166: CALL_OW 88
// DialogueOff ;
14170: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14174: LD_STRING M8
14176: PPUSH
14177: CALL_OW 337
// end ;
14181: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14182: LD_EXP 83
14186: NOT
14187: PUSH
14188: LD_INT 16
14190: PPUSH
14191: LD_INT 22
14193: PUSH
14194: LD_INT 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 21
14203: PUSH
14204: LD_INT 3
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 30
14213: PUSH
14214: LD_INT 31
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: LD_INT 50
14223: PUSH
14224: EMPTY
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PPUSH
14233: CALL_OW 70
14237: PUSH
14238: LD_INT 0
14240: EQUAL
14241: OR
14242: PUSH
14243: LD_EXP 20
14247: AND
14248: IFFALSE 14292
14250: GO 14252
14252: DISABLE
// begin rightBunkers = [ ] ;
14253: LD_ADDR_EXP 83
14257: PUSH
14258: EMPTY
14259: ST_TO_ADDR
// DialogueOn ;
14260: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14264: LD_EXP 62
14268: PPUSH
14269: LD_STRING D20a-Bur-1
14271: PPUSH
14272: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14276: LD_EXP 76
14280: PPUSH
14281: LD_STRING D20a-Pla-1
14283: PPUSH
14284: CALL_OW 88
// DialogueOff ;
14288: CALL_OW 7
// end ;
14292: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14293: LD_EXP 35
14297: NOT
14298: PUSH
14299: LD_EXP 73
14303: AND
14304: IFFALSE 14799
14306: GO 14308
14308: DISABLE
14309: LD_INT 0
14311: PPUSH
14312: PPUSH
14313: PPUSH
// begin enable ;
14314: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14315: LD_ADDR_VAR 0 1
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_INT 3
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 2
14332: PUSH
14333: LD_INT 21
14335: PUSH
14336: LD_INT 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 21
14345: PUSH
14346: LD_INT 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: PPUSH
14362: CALL_OW 69
14366: PUSH
14367: FOR_IN
14368: IFFALSE 14797
// for trapUnit in trapTeam do
14370: LD_ADDR_VAR 0 2
14374: PUSH
14375: LD_EXP 81
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14793
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
14383: LD_VAR 0 1
14387: PPUSH
14388: LD_VAR 0 2
14392: PPUSH
14393: CALL_OW 296
14397: PUSH
14398: LD_INT 16
14400: LESS
14401: IFFALSE 14791
// begin saveBelkovDecision = true ;
14403: LD_ADDR_EXP 35
14407: PUSH
14408: LD_INT 1
14410: ST_TO_ADDR
// if playerGetSupport then
14411: LD_EXP 34
14415: IFFALSE 14434
// decsToChoose = [ 1 , 3 ] else
14417: LD_ADDR_VAR 0 3
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: LD_INT 3
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: ST_TO_ADDR
14432: GO 14453
// decsToChoose = [ 1 , 2 , 3 ] ;
14434: LD_ADDR_VAR 0 3
14438: PUSH
14439: LD_INT 1
14441: PUSH
14442: LD_INT 2
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
14453: LD_STRING QAttackAm
14455: PPUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: CALL_OW 98
14465: PUSH
14466: LD_INT 1
14468: DOUBLE
14469: EQUAL
14470: IFTRUE 14474
14472: GO 14543
14474: POP
// begin DialogueOn ;
14475: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
14479: LD_EXP 62
14483: PPUSH
14484: LD_STRING D21-Bur-1
14486: PPUSH
14487: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
14491: LD_EXP 76
14495: PPUSH
14496: LD_STRING D21-Pla-1
14498: PPUSH
14499: CALL_OW 94
// DialogueOff ;
14503: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14507: LD_EXP 42
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 3
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: IN
14522: NOT
14523: IFFALSE 14541
// begin initiative = 1 ;
14525: LD_ADDR_EXP 42
14529: PUSH
14530: LD_INT 1
14532: ST_TO_ADDR
// platonovOpinion = 2 ;
14533: LD_ADDR_EXP 5
14537: PUSH
14538: LD_INT 2
14540: ST_TO_ADDR
// end ; end ; 2 :
14541: GO 14735
14543: LD_INT 2
14545: DOUBLE
14546: EQUAL
14547: IFTRUE 14551
14549: GO 14707
14551: POP
// begin DialogueOn ;
14552: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
14556: LD_EXP 62
14560: PPUSH
14561: LD_STRING D22-Bur-1
14563: PPUSH
14564: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
14568: LD_EXP 34
14572: PUSH
14573: LD_EXP 82
14577: PUSH
14578: LD_INT 0
14580: EQUAL
14581: PUSH
14582: LD_EXP 83
14586: PUSH
14587: LD_INT 0
14589: EQUAL
14590: OR
14591: AND
14592: IFFALSE 14606
// Say ( Platonov , D22-Pla-1b ) ;
14594: LD_EXP 76
14598: PPUSH
14599: LD_STRING D22-Pla-1b
14601: PPUSH
14602: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
14606: LD_EXP 34
14610: PUSH
14611: LD_EXP 82
14615: PUSH
14616: LD_EXP 83
14620: OR
14621: AND
14622: IFFALSE 14636
// Say ( Platonov , D22-Pla-1a ) ;
14624: LD_EXP 76
14628: PPUSH
14629: LD_STRING D22-Pla-1a
14631: PPUSH
14632: CALL_OW 88
// if not playerGetSupport then
14636: LD_EXP 34
14640: NOT
14641: IFFALSE 14675
// begin Say ( Platonov , D22-Pla-1 ) ;
14643: LD_EXP 76
14647: PPUSH
14648: LD_STRING D22-Pla-1
14650: PPUSH
14651: CALL_OW 88
// playerGetSupport = true ;
14655: LD_ADDR_EXP 34
14659: PUSH
14660: LD_INT 1
14662: ST_TO_ADDR
// medalForGetSupport = false ;
14663: LD_ADDR_EXP 40
14667: PUSH
14668: LD_INT 0
14670: ST_TO_ADDR
// PlatonovSendSupport ;
14671: CALL 6522 0 0
// end ; DialogueOff ;
14675: CALL_OW 7
// if initiative <> 3 then
14679: LD_EXP 42
14683: PUSH
14684: LD_INT 3
14686: NONEQUAL
14687: IFFALSE 14705
// begin initiative = 2 ;
14689: LD_ADDR_EXP 42
14693: PUSH
14694: LD_INT 2
14696: ST_TO_ADDR
// platonovOpinion = 1 ;
14697: LD_ADDR_EXP 5
14701: PUSH
14702: LD_INT 1
14704: ST_TO_ADDR
// end ; end ; 3 :
14705: GO 14735
14707: LD_INT 3
14709: DOUBLE
14710: EQUAL
14711: IFTRUE 14715
14713: GO 14734
14715: POP
// begin initiative = 3 ;
14716: LD_ADDR_EXP 42
14720: PUSH
14721: LD_INT 3
14723: ST_TO_ADDR
// platonovOpinion = 0 ;
14724: LD_ADDR_EXP 5
14728: PUSH
14729: LD_INT 0
14731: ST_TO_ADDR
// end ; end ;
14732: GO 14735
14734: POP
// if IsOK ( Gnyevko ) then
14735: LD_EXP 63
14739: PPUSH
14740: CALL_OW 302
14744: IFFALSE 14770
// begin Say ( Gnyevko , D23-Gny-1 ) ;
14746: LD_EXP 63
14750: PPUSH
14751: LD_STRING D23-Gny-1
14753: PPUSH
14754: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
14758: LD_EXP 62
14762: PPUSH
14763: LD_STRING D23-Bur-1
14765: PPUSH
14766: CALL_OW 88
// end ; saveBelkovObjective = true ;
14770: LD_ADDR_EXP 36
14774: PUSH
14775: LD_INT 1
14777: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
14778: LD_STRING M9
14780: PPUSH
14781: CALL_OW 337
// exit ;
14785: POP
14786: POP
14787: POP
14788: POP
14789: GO 14799
// end ;
14791: GO 14380
14793: POP
14794: POP
14795: GO 14367
14797: POP
14798: POP
// end ;
14799: PPOPN 3
14801: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
14802: LD_EXP 20
14806: PUSH
14807: LD_EXP 81
14811: NOT
14812: AND
14813: PUSH
14814: LD_EXP 37
14818: NOT
14819: AND
14820: IFFALSE 14860
14822: GO 14824
14824: DISABLE
// begin belkovSaved = true ;
14825: LD_ADDR_EXP 37
14829: PUSH
14830: LD_INT 1
14832: ST_TO_ADDR
// activateBelkovAI = false ;
14833: LD_ADDR_EXP 28
14837: PUSH
14838: LD_INT 0
14840: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
14841: LD_EXP 73
14845: PPUSH
14846: LD_INT 3
14848: PPUSH
14849: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
14853: LD_STRING M9a
14855: PPUSH
14856: CALL_OW 337
// end ;
14860: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
14861: LD_EXP 35
14865: PUSH
14866: LD_EXP 64
14870: PPUSH
14871: CALL_OW 301
14875: PUSH
14876: LD_EXP 68
14880: PPUSH
14881: CALL_OW 301
14885: PUSH
14886: LD_EXP 64
14890: PPUSH
14891: CALL_OW 255
14895: PUSH
14896: LD_INT 6
14898: EQUAL
14899: PUSH
14900: LD_EXP 68
14904: PPUSH
14905: CALL_OW 255
14909: PUSH
14910: LD_INT 6
14912: EQUAL
14913: OR
14914: AND
14915: OR
14916: AND
14917: IFFALSE 14937
14919: GO 14921
14921: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
14922: LD_STRING M9a
14924: PPUSH
14925: CALL_OW 337
// saveBelkovObjective = false ;
14929: LD_ADDR_EXP 36
14933: PUSH
14934: LD_INT 0
14936: ST_TO_ADDR
// end ;
14937: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
14938: LD_EXP 37
14942: PUSH
14943: LD_EXP 62
14947: PPUSH
14948: LD_EXP 64
14952: PPUSH
14953: CALL_OW 296
14957: PUSH
14958: LD_INT 14
14960: LESS
14961: PUSH
14962: LD_EXP 6
14966: AND
14967: PUSH
14968: LD_EXP 62
14972: PPUSH
14973: LD_EXP 68
14977: PPUSH
14978: CALL_OW 296
14982: PUSH
14983: LD_INT 14
14985: LESS
14986: PUSH
14987: LD_EXP 6
14991: NOT
14992: AND
14993: OR
14994: AND
14995: IFFALSE 15291
14997: GO 14999
14999: DISABLE
// begin InGameOn ;
15000: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15004: LD_EXP 64
15008: PPUSH
15009: CALL_OW 302
15013: PUSH
15014: LD_EXP 6
15018: AND
15019: IFFALSE 15115
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15021: LD_EXP 62
15025: PUSH
15026: LD_EXP 64
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15039: LD_EXP 62
15043: PPUSH
15044: LD_EXP 64
15048: PPUSH
15049: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15053: LD_EXP 64
15057: PPUSH
15058: LD_EXP 62
15062: PPUSH
15063: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15067: LD_EXP 64
15071: PPUSH
15072: LD_STRING D24-Bel-1
15074: PPUSH
15075: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15079: LD_EXP 62
15083: PPUSH
15084: LD_STRING D24-Bur-1
15086: PPUSH
15087: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15091: LD_EXP 64
15095: PPUSH
15096: LD_STRING D24-Bel-2
15098: PPUSH
15099: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15103: LD_EXP 62
15107: PPUSH
15108: LD_STRING D24-Bur-2
15110: PPUSH
15111: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15115: LD_EXP 68
15119: PPUSH
15120: CALL_OW 302
15124: PUSH
15125: LD_EXP 6
15129: NOT
15130: AND
15131: IFFALSE 15239
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15133: LD_EXP 62
15137: PUSH
15138: LD_EXP 68
15142: PUSH
15143: EMPTY
15144: LIST
15145: LIST
15146: PPUSH
15147: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15151: LD_EXP 62
15155: PPUSH
15156: LD_EXP 68
15160: PPUSH
15161: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15165: LD_EXP 68
15169: PPUSH
15170: LD_EXP 62
15174: PPUSH
15175: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15179: LD_EXP 68
15183: PPUSH
15184: LD_STRING D24-Bel-1
15186: PPUSH
15187: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15191: LD_EXP 62
15195: PPUSH
15196: LD_STRING D24-Bur-1
15198: PPUSH
15199: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15203: LD_EXP 62
15207: PPUSH
15208: LD_STRING D24-Bur-1a
15210: PPUSH
15211: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15215: LD_EXP 68
15219: PPUSH
15220: LD_STRING D24-Bel-2
15222: PPUSH
15223: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15227: LD_EXP 62
15231: PPUSH
15232: LD_STRING D24-Bur-2
15234: PPUSH
15235: CALL_OW 88
// end ; if captureBelkovVehicle then
15239: LD_EXP 38
15243: IFFALSE 15257
// Say ( Burlak , D24-Bur-2a ) ;
15245: LD_EXP 62
15249: PPUSH
15250: LD_STRING D24-Bur-2a
15252: PPUSH
15253: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15257: LD_EXP 76
15261: PPUSH
15262: LD_STRING D24-Pla-2
15264: PPUSH
15265: CALL_OW 94
// if leftBunkers then
15269: LD_EXP 82
15273: IFFALSE 15287
// SayRadio ( Platonov , D24-Pla-2a ) ;
15275: LD_EXP 76
15279: PPUSH
15280: LD_STRING D24-Pla-2a
15282: PPUSH
15283: CALL_OW 94
// InGameOff ;
15287: CALL_OW 9
// end ;
15291: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15292: LD_INT 22
15294: PPUSH
15295: LD_INT 22
15297: PUSH
15298: LD_INT 3
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PUSH
15305: LD_INT 21
15307: PUSH
15308: LD_INT 2
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 70
15323: PUSH
15324: LD_EXP 70
15328: PPUSH
15329: CALL_OW 302
15333: PUSH
15334: LD_EXP 63
15338: PPUSH
15339: CALL_OW 302
15343: OR
15344: AND
15345: IFFALSE 15428
15347: GO 15349
15349: DISABLE
// begin DialogueOn ;
15350: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15354: LD_EXP 62
15358: PPUSH
15359: LD_STRING D26-Bur-1
15361: PPUSH
15362: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15366: LD_EXP 70
15370: PPUSH
15371: CALL_OW 302
15375: IFFALSE 15389
// Say ( Kovalyuk , D26-Kov-1 ) ;
15377: LD_EXP 70
15381: PPUSH
15382: LD_STRING D26-Kov-1
15384: PPUSH
15385: CALL_OW 88
// if IsOk ( Gnyevko ) then
15389: LD_EXP 63
15393: PPUSH
15394: CALL_OW 302
15398: IFFALSE 15412
// Say ( Gnyevko , D26-Gny-1 ) ;
15400: LD_EXP 63
15404: PPUSH
15405: LD_STRING D26-Gny-1
15407: PPUSH
15408: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
15412: LD_EXP 62
15416: PPUSH
15417: LD_STRING D26-Bur-2
15419: PPUSH
15420: CALL_OW 88
// DialogueOff ;
15424: CALL_OW 7
// end ;
15428: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
15429: LD_EXP 20
15433: PUSH
15434: LD_EXP 62
15438: PPUSH
15439: LD_INT 8
15441: PPUSH
15442: CALL_OW 308
15446: NOT
15447: PUSH
15448: LD_EXP 62
15452: PPUSH
15453: CALL_OW 310
15457: PPUSH
15458: CALL_OW 310
15462: PPUSH
15463: LD_INT 8
15465: PPUSH
15466: CALL_OW 308
15470: NOT
15471: AND
15472: AND
15473: PUSH
15474: LD_EXP 39
15478: PUSH
15479: LD_INT 1
15481: NEG
15482: EQUAL
15483: AND
15484: IFFALSE 15498
15486: GO 15488
15488: DISABLE
// begin enable ;
15489: ENABLE
// raportForPlatonov = 0 ;
15490: LD_ADDR_EXP 39
15494: PUSH
15495: LD_INT 0
15497: ST_TO_ADDR
// end ;
15498: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
15499: LD_EXP 20
15503: PUSH
15504: LD_EXP 39
15508: PUSH
15509: LD_INT 0
15511: GREATEREQUAL
15512: AND
15513: PUSH
15514: LD_EXP 16
15518: NOT
15519: AND
15520: PUSH
15521: LD_EXP 62
15525: PPUSH
15526: LD_INT 8
15528: PPUSH
15529: CALL_OW 308
15533: PUSH
15534: LD_EXP 62
15538: PPUSH
15539: CALL_OW 310
15543: PPUSH
15544: CALL_OW 310
15548: PPUSH
15549: LD_INT 8
15551: PPUSH
15552: CALL_OW 308
15556: PUSH
15557: LD_EXP 16
15561: NOT
15562: AND
15563: OR
15564: AND
15565: IFFALSE 15856
15567: GO 15569
15569: DISABLE
// begin enable ;
15570: ENABLE
// DialogueOn ;
15571: CALL_OW 6
// case raportForPlatonov of 0 :
15575: LD_EXP 39
15579: PUSH
15580: LD_INT 0
15582: DOUBLE
15583: EQUAL
15584: IFTRUE 15588
15586: GO 15615
15588: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
15589: LD_EXP 76
15593: PPUSH
15594: LD_STRING D25a-Pla-1
15596: PPUSH
15597: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
15601: LD_EXP 62
15605: PPUSH
15606: LD_STRING D25a-Bur-1
15608: PPUSH
15609: CALL_OW 88
// end ; 1 :
15613: GO 15831
15615: LD_INT 1
15617: DOUBLE
15618: EQUAL
15619: IFTRUE 15623
15621: GO 15686
15623: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15624: LD_EXP 76
15628: PPUSH
15629: LD_STRING D25-Pla-1
15631: PPUSH
15632: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
15636: LD_EXP 62
15640: PPUSH
15641: LD_STRING D25-Bur-1
15643: PPUSH
15644: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
15648: LD_EXP 62
15652: PPUSH
15653: LD_STRING D25b-Bur-1
15655: PPUSH
15656: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
15660: LD_EXP 76
15664: PPUSH
15665: LD_STRING D25b-Pla-1
15667: PPUSH
15668: CALL_OW 88
// playerGetSupport = true ;
15672: LD_ADDR_EXP 34
15676: PUSH
15677: LD_INT 1
15679: ST_TO_ADDR
// PlatonovSendSupport ;
15680: CALL 6522 0 0
// end ; 2 :
15684: GO 15831
15686: LD_INT 2
15688: DOUBLE
15689: EQUAL
15690: IFTRUE 15694
15692: GO 15740
15694: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15695: LD_EXP 76
15699: PPUSH
15700: LD_STRING D25-Pla-1
15702: PPUSH
15703: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
15707: LD_EXP 62
15711: PPUSH
15712: LD_STRING D25-Bur-1a
15714: PPUSH
15715: CALL_OW 88
// if not sawLeftBunker then
15719: LD_EXP 29
15723: NOT
15724: IFFALSE 15738
// Say ( Platonov , D25c-Pla-1 ) ;
15726: LD_EXP 76
15730: PPUSH
15731: LD_STRING D25c-Pla-1
15733: PPUSH
15734: CALL_OW 88
// end ; 3 :
15738: GO 15831
15740: LD_INT 3
15742: DOUBLE
15743: EQUAL
15744: IFTRUE 15748
15746: GO 15830
15748: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15749: LD_EXP 76
15753: PPUSH
15754: LD_STRING D25-Pla-1
15756: PPUSH
15757: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
15761: LD_EXP 62
15765: PPUSH
15766: LD_STRING D25a-Bur-1b
15768: PPUSH
15769: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
15773: LD_EXP 62
15777: PPUSH
15778: LD_STRING D25b-Bur-1
15780: PPUSH
15781: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
15785: LD_EXP 76
15789: PPUSH
15790: LD_STRING D25b-Pla-1
15792: PPUSH
15793: CALL_OW 88
// playerGetSupport = true ;
15797: LD_ADDR_EXP 34
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// PlatonovSendSupport ;
15805: CALL 6522 0 0
// if not sawRightBunker then
15809: LD_EXP 30
15813: NOT
15814: IFFALSE 15828
// Say ( Platonov , D25c-Pla-1 ) ;
15816: LD_EXP 76
15820: PPUSH
15821: LD_STRING D25c-Pla-1
15823: PPUSH
15824: CALL_OW 88
// end ; end ;
15828: GO 15831
15830: POP
// raportForPlatonov = - 1 ;
15831: LD_ADDR_EXP 39
15835: PUSH
15836: LD_INT 1
15838: NEG
15839: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
15840: LD_EXP 76
15844: PPUSH
15845: LD_STRING D25c-Pla-1a
15847: PPUSH
15848: CALL_OW 88
// DialogueOff ;
15852: CALL_OW 7
// end ;
15856: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
15857: LD_INT 19
15859: PPUSH
15860: LD_INT 22
15862: PUSH
15863: LD_INT 3
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: PPUSH
15873: CALL_OW 70
15877: PUSH
15878: LD_INT 0
15880: GREATER
15881: IFFALSE 15901
15883: GO 15885
15885: DISABLE
// begin northMapExplored = true ;
15886: LD_ADDR_EXP 41
15890: PUSH
15891: LD_INT 1
15893: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15894: LD_STRING M10
15896: PPUSH
15897: CALL_OW 337
// end ;
15901: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
15902: LD_EXP 82
15906: NOT
15907: PUSH
15908: LD_EXP 41
15912: AND
15913: PUSH
15914: LD_EXP 37
15918: PUSH
15919: LD_EXP 36
15923: NOT
15924: OR
15925: AND
15926: IFFALSE 15946
15928: GO 15930
15930: DISABLE
// begin backToBeria2 = true ;
15931: LD_ADDR_EXP 16
15935: PUSH
15936: LD_INT 1
15938: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
15939: LD_STRING M10a
15941: PPUSH
15942: CALL_OW 337
// end ;
15946: END
// every 0 0$1 do
15947: GO 15949
15949: DISABLE
// begin enable ;
15950: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
15951: LD_EXP 67
15955: PUSH
15956: LD_EXP 76
15960: PUSH
15961: EMPTY
15962: LIST
15963: LIST
15964: PPUSH
15965: LD_INT 1000
15967: PPUSH
15968: CALL_OW 234
// end ; end_of_file
15972: END
// export function PrepareNature ; var i , un ; begin
15973: LD_INT 0
15975: PPUSH
15976: PPUSH
15977: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
15978: LD_ADDR_VAR 0 2
15982: PUSH
15983: DOUBLE
15984: LD_INT 1
15986: DEC
15987: ST_TO_ADDR
15988: LD_EXP 45
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PUSH
15997: FOR_TO
15998: IFFALSE 16108
// begin uc_side = 0 ;
16000: LD_ADDR_OWVAR 20
16004: PUSH
16005: LD_INT 0
16007: ST_TO_ADDR
// uc_nation = nation_nature ;
16008: LD_ADDR_OWVAR 21
16012: PUSH
16013: LD_INT 0
16015: ST_TO_ADDR
// hc_class = class_apeman ;
16016: LD_ADDR_OWVAR 28
16020: PUSH
16021: LD_INT 12
16023: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16024: LD_ADDR_OWVAR 31
16028: PUSH
16029: LD_EXP 46
16033: PUSH
16034: LD_INT 1
16036: ARRAY
16037: PUSH
16038: LD_EXP 46
16042: PUSH
16043: LD_INT 2
16045: ARRAY
16046: PUSH
16047: LD_EXP 46
16051: PUSH
16052: LD_INT 3
16054: ARRAY
16055: PUSH
16056: LD_EXP 46
16060: PUSH
16061: LD_INT 4
16063: ARRAY
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16071: LD_ADDR_OWVAR 35
16075: PUSH
16076: LD_EXP 47
16080: ST_TO_ADDR
// un = CreateHuman ;
16081: LD_ADDR_VAR 0 3
16085: PUSH
16086: CALL_OW 44
16090: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16091: LD_VAR 0 3
16095: PPUSH
16096: LD_INT 21
16098: PPUSH
16099: LD_INT 0
16101: PPUSH
16102: CALL_OW 49
// end ;
16106: GO 15997
16108: POP
16109: POP
// for i := 1 to animalsAmount [ 2 ] do
16110: LD_ADDR_VAR 0 2
16114: PUSH
16115: DOUBLE
16116: LD_INT 1
16118: DEC
16119: ST_TO_ADDR
16120: LD_EXP 45
16124: PUSH
16125: LD_INT 2
16127: ARRAY
16128: PUSH
16129: FOR_TO
16130: IFFALSE 16240
// begin uc_side = 0 ;
16132: LD_ADDR_OWVAR 20
16136: PUSH
16137: LD_INT 0
16139: ST_TO_ADDR
// uc_nation = nation_nature ;
16140: LD_ADDR_OWVAR 21
16144: PUSH
16145: LD_INT 0
16147: ST_TO_ADDR
// hc_class = class_phororhacos ;
16148: LD_ADDR_OWVAR 28
16152: PUSH
16153: LD_INT 18
16155: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16156: LD_ADDR_OWVAR 31
16160: PUSH
16161: LD_EXP 46
16165: PUSH
16166: LD_INT 1
16168: ARRAY
16169: PUSH
16170: LD_EXP 46
16174: PUSH
16175: LD_INT 2
16177: ARRAY
16178: PUSH
16179: LD_EXP 46
16183: PUSH
16184: LD_INT 3
16186: ARRAY
16187: PUSH
16188: LD_EXP 46
16192: PUSH
16193: LD_INT 4
16195: ARRAY
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16203: LD_ADDR_OWVAR 35
16207: PUSH
16208: LD_EXP 47
16212: ST_TO_ADDR
// un = CreateHuman ;
16213: LD_ADDR_VAR 0 3
16217: PUSH
16218: CALL_OW 44
16222: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16223: LD_VAR 0 3
16227: PPUSH
16228: LD_INT 21
16230: PPUSH
16231: LD_INT 0
16233: PPUSH
16234: CALL_OW 49
// end ;
16238: GO 16129
16240: POP
16241: POP
// for i := 1 to animalsAmount [ 3 ] do
16242: LD_ADDR_VAR 0 2
16246: PUSH
16247: DOUBLE
16248: LD_INT 1
16250: DEC
16251: ST_TO_ADDR
16252: LD_EXP 45
16256: PUSH
16257: LD_INT 3
16259: ARRAY
16260: PUSH
16261: FOR_TO
16262: IFFALSE 16372
// begin uc_side = 0 ;
16264: LD_ADDR_OWVAR 20
16268: PUSH
16269: LD_INT 0
16271: ST_TO_ADDR
// uc_nation = nation_nature ;
16272: LD_ADDR_OWVAR 21
16276: PUSH
16277: LD_INT 0
16279: ST_TO_ADDR
// hc_class = class_tiger ;
16280: LD_ADDR_OWVAR 28
16284: PUSH
16285: LD_INT 14
16287: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16288: LD_ADDR_OWVAR 31
16292: PUSH
16293: LD_EXP 46
16297: PUSH
16298: LD_INT 1
16300: ARRAY
16301: PUSH
16302: LD_EXP 46
16306: PUSH
16307: LD_INT 2
16309: ARRAY
16310: PUSH
16311: LD_EXP 46
16315: PUSH
16316: LD_INT 3
16318: ARRAY
16319: PUSH
16320: LD_EXP 46
16324: PUSH
16325: LD_INT 4
16327: ARRAY
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16335: LD_ADDR_OWVAR 35
16339: PUSH
16340: LD_EXP 47
16344: ST_TO_ADDR
// un = CreateHuman ;
16345: LD_ADDR_VAR 0 3
16349: PUSH
16350: CALL_OW 44
16354: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16355: LD_VAR 0 3
16359: PPUSH
16360: LD_INT 21
16362: PPUSH
16363: LD_INT 0
16365: PPUSH
16366: CALL_OW 49
// end ;
16370: GO 16261
16372: POP
16373: POP
// for i := 1 to animalsAmount [ 4 ] do
16374: LD_ADDR_VAR 0 2
16378: PUSH
16379: DOUBLE
16380: LD_INT 1
16382: DEC
16383: ST_TO_ADDR
16384: LD_EXP 45
16388: PUSH
16389: LD_INT 4
16391: ARRAY
16392: PUSH
16393: FOR_TO
16394: IFFALSE 16504
// begin uc_side = 0 ;
16396: LD_ADDR_OWVAR 20
16400: PUSH
16401: LD_INT 0
16403: ST_TO_ADDR
// uc_nation = nation_nature ;
16404: LD_ADDR_OWVAR 21
16408: PUSH
16409: LD_INT 0
16411: ST_TO_ADDR
// hc_class = 21 ;
16412: LD_ADDR_OWVAR 28
16416: PUSH
16417: LD_INT 21
16419: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16420: LD_ADDR_OWVAR 31
16424: PUSH
16425: LD_EXP 46
16429: PUSH
16430: LD_INT 1
16432: ARRAY
16433: PUSH
16434: LD_EXP 46
16438: PUSH
16439: LD_INT 2
16441: ARRAY
16442: PUSH
16443: LD_EXP 46
16447: PUSH
16448: LD_INT 3
16450: ARRAY
16451: PUSH
16452: LD_EXP 46
16456: PUSH
16457: LD_INT 4
16459: ARRAY
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16467: LD_ADDR_OWVAR 35
16471: PUSH
16472: LD_EXP 47
16476: ST_TO_ADDR
// un = CreateHuman ;
16477: LD_ADDR_VAR 0 3
16481: PUSH
16482: CALL_OW 44
16486: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16487: LD_VAR 0 3
16491: PPUSH
16492: LD_INT 21
16494: PPUSH
16495: LD_INT 0
16497: PPUSH
16498: CALL_OW 49
// end ;
16502: GO 16393
16504: POP
16505: POP
// end ; end_of_file
16506: LD_VAR 0 1
16510: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
16511: LD_EXP 21
16515: IFFALSE 16744
16517: GO 16519
16519: DISABLE
16520: LD_INT 0
16522: PPUSH
16523: PPUSH
16524: PPUSH
16525: PPUSH
16526: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
16527: LD_ADDR_VAR 0 4
16531: PUSH
16532: LD_INT 22
16534: PUSH
16535: LD_INT 3
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 21
16544: PUSH
16545: LD_INT 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 25
16554: PUSH
16555: LD_INT 2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: LIST
16566: PPUSH
16567: CALL_OW 69
16571: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16572: LD_INT 1400
16574: PPUSH
16575: CALL_OW 67
// carryCratesEngs = 0 ;
16579: LD_ADDR_VAR 0 3
16583: PUSH
16584: LD_INT 0
16586: ST_TO_ADDR
// for unit in playerEngs do
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_VAR 0 4
16596: PUSH
16597: FOR_IN
16598: IFFALSE 16626
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
16600: LD_ADDR_VAR 0 3
16604: PUSH
16605: LD_VAR 0 3
16609: PUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 289
16622: PLUS
16623: ST_TO_ADDR
16624: GO 16597
16626: POP
16627: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
16628: LD_INT 106
16630: PPUSH
16631: CALL_OW 274
16635: PPUSH
16636: LD_INT 1
16638: PPUSH
16639: CALL_OW 275
16643: PUSH
16644: LD_INT 50
16646: LESS
16647: PUSH
16648: LD_INT 8
16650: PPUSH
16651: LD_INT 1
16653: PPUSH
16654: CALL_OW 287
16658: PUSH
16659: LD_INT 10
16661: MUL
16662: PUSH
16663: LD_INT 106
16665: PPUSH
16666: CALL_OW 274
16670: PPUSH
16671: LD_INT 1
16673: PPUSH
16674: CALL_OW 275
16678: PLUS
16679: PUSH
16680: LD_VAR 0 3
16684: PLUS
16685: PUSH
16686: LD_INT 50
16688: LESS
16689: AND
16690: IFFALSE 16702
// spawnNextCrates = true else
16692: LD_ADDR_VAR 0 5
16696: PUSH
16697: LD_INT 1
16699: ST_TO_ADDR
16700: GO 16710
// spawnNextCrates = false ;
16702: LD_ADDR_VAR 0 5
16706: PUSH
16707: LD_INT 0
16709: ST_TO_ADDR
// if spawnNextCrates then
16710: LD_VAR 0 5
16714: IFFALSE 16737
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
16716: LD_INT 1
16718: PPUSH
16719: LD_INT 5
16721: PPUSH
16722: CALL_OW 12
16726: PPUSH
16727: LD_INT 26
16729: PPUSH
16730: LD_INT 1
16732: PPUSH
16733: CALL_OW 55
// until not spawnCrates ;
16737: LD_EXP 21
16741: NOT
16742: IFFALSE 16527
// end ; end_of_file
16744: PPOPN 5
16746: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 266
16756: PUSH
16757: LD_INT 6
16759: EQUAL
16760: PUSH
16761: LD_INT 22
16763: PUSH
16764: LD_INT 3
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 30
16773: PUSH
16774: LD_INT 6
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: PUSH
16790: LD_INT 1
16792: GREATER
16793: AND
16794: PUSH
16795: LD_EXP 11
16799: NOT
16800: AND
16801: IFFALSE 16812
// Dial_StopConstructAgainSameBuilding ( building ) ;
16803: LD_VAR 0 1
16807: PPUSH
16808: CALL 8887 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 266
16821: PUSH
16822: LD_INT 2
16824: EQUAL
16825: PUSH
16826: LD_INT 22
16828: PUSH
16829: LD_INT 3
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 30
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PPUSH
16850: CALL_OW 69
16854: PUSH
16855: LD_INT 1
16857: GREATER
16858: AND
16859: PUSH
16860: LD_EXP 11
16864: NOT
16865: AND
16866: IFFALSE 16877
// Dial_StopConstructAgainSameBuilding ( building ) ;
16868: LD_VAR 0 1
16872: PPUSH
16873: CALL 8887 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 255
16886: PUSH
16887: LD_INT 3
16889: EQUAL
16890: PUSH
16891: LD_VAR 0 1
16895: PPUSH
16896: CALL_OW 266
16900: PUSH
16901: LD_INT 26
16903: PUSH
16904: LD_INT 4
16906: PUSH
16907: LD_INT 31
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: LIST
16914: IN
16915: AND
16916: PUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_INT 8
16924: PPUSH
16925: CALL_OW 308
16929: AND
16930: IFFALSE 16941
// Dial_StopConstructAgainSameBuilding ( building ) ;
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL 8887 0 1
// end ;
16941: PPOPN 2
16943: END
// on BuildingComplete ( building ) do var sold , platSold ;
16944: LD_INT 0
16946: PPUSH
16947: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
16948: LD_VAR 0 1
16952: PPUSH
16953: CALL_OW 255
16957: PUSH
16958: LD_INT 3
16960: EQUAL
16961: PUSH
16962: LD_VAR 0 1
16966: PPUSH
16967: CALL_OW 266
16971: PUSH
16972: LD_INT 6
16974: EQUAL
16975: AND
16976: PUSH
16977: LD_EXP 8
16981: NOT
16982: AND
16983: IFFALSE 16989
// Dial_LabConstructed ;
16985: CALL 8737 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 255
16998: PUSH
16999: LD_INT 3
17001: EQUAL
17002: PUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 266
17012: PUSH
17013: LD_INT 2
17015: EQUAL
17016: AND
17017: PUSH
17018: LD_EXP 9
17022: NOT
17023: AND
17024: IFFALSE 17030
// Dial_WorkshopConstructed ;
17026: CALL 8812 0 0
// if GetSide ( building ) = 6 then
17030: LD_VAR 0 1
17034: PPUSH
17035: CALL_OW 255
17039: PUSH
17040: LD_INT 6
17042: EQUAL
17043: IFFALSE 17254
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17045: LD_VAR 0 1
17049: PPUSH
17050: CALL_OW 266
17054: PUSH
17055: LD_INT 31
17057: EQUAL
17058: PUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 9
17066: PPUSH
17067: CALL_OW 308
17071: AND
17072: IFFALSE 17123
// begin if UnitsInside ( ru2_arm2 ) then
17074: LD_INT 209
17076: PPUSH
17077: CALL_OW 313
17081: IFFALSE 17123
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17083: LD_ADDR_VAR 0 2
17087: PUSH
17088: LD_INT 209
17090: PPUSH
17091: CALL_OW 313
17095: PUSH
17096: LD_INT 1
17098: ARRAY
17099: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17100: LD_VAR 0 2
17104: PPUSH
17105: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17109: LD_VAR 0 2
17113: PPUSH
17114: LD_VAR 0 1
17118: PPUSH
17119: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17123: LD_VAR 0 1
17127: PPUSH
17128: CALL_OW 266
17132: PUSH
17133: LD_INT 31
17135: EQUAL
17136: PUSH
17137: LD_VAR 0 1
17141: PPUSH
17142: LD_INT 8
17144: PPUSH
17145: CALL_OW 308
17149: AND
17150: IFFALSE 17186
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17152: LD_ADDR_VAR 0 2
17156: PUSH
17157: LD_EXP 77
17161: PPUSH
17162: LD_VAR 0 1
17166: PPUSH
17167: CALL_OW 74
17171: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17172: LD_VAR 0 2
17176: PPUSH
17177: LD_VAR 0 1
17181: PPUSH
17182: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL_OW 266
17195: PUSH
17196: LD_INT 2
17198: EQUAL
17199: IFFALSE 17254
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17201: LD_EXP 69
17205: PPUSH
17206: LD_INT 25
17208: PUSH
17209: LD_INT 3
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 72
17220: PPUSH
17221: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17225: LD_EXP 69
17229: PPUSH
17230: LD_INT 25
17232: PUSH
17233: LD_INT 3
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 72
17244: PPUSH
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 180
// end ; end ; end ;
17254: PPOPN 3
17256: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17257: LD_VAR 0 1
17261: PUSH
17262: LD_INT 47
17264: EQUAL
17265: PUSH
17266: LD_VAR 0 2
17270: PPUSH
17271: CALL_OW 255
17275: PUSH
17276: LD_INT 3
17278: EQUAL
17279: AND
17280: IFFALSE 17290
// engineResearched = true ;
17282: LD_ADDR_EXP 10
17286: PUSH
17287: LD_INT 1
17289: ST_TO_ADDR
// if tech = tech_Tech1 then
17290: LD_VAR 0 1
17294: PUSH
17295: LD_INT 48
17297: EQUAL
17298: IFFALSE 17320
// begin wait ( 0 0$5 ) ;
17300: LD_INT 175
17302: PPUSH
17303: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17307: LD_INT 83
17309: PPUSH
17310: LD_INT 1500
17312: PPUSH
17313: LD_INT 0
17315: PPUSH
17316: CALL_OW 486
// end ; end ;
17320: PPOPN 2
17322: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17323: LD_VAR 0 2
17327: PPUSH
17328: CALL_OW 255
17332: PUSH
17333: LD_OWVAR 2
17337: EQUAL
17338: PUSH
17339: LD_VAR 0 2
17343: PPUSH
17344: CALL_OW 302
17348: AND
17349: PUSH
17350: LD_EXP 12
17354: NOT
17355: AND
17356: PUSH
17357: LD_EXP 17
17361: NOT
17362: AND
17363: IFFALSE 17374
// Dial_FirstVehConstructed ( factory ) ;
17365: LD_VAR 0 2
17369: PPUSH
17370: CALL 9402 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17374: LD_VAR 0 2
17378: PPUSH
17379: CALL_OW 255
17383: PUSH
17384: LD_OWVAR 2
17388: EQUAL
17389: PUSH
17390: LD_EXP 14
17394: NOT
17395: AND
17396: PUSH
17397: LD_EXP 13
17401: PPUSH
17402: CALL_OW 302
17406: NOT
17407: AND
17408: IFFALSE 17420
// firstVeh = vehicle ;
17410: LD_ADDR_EXP 13
17414: PUSH
17415: LD_VAR 0 1
17419: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
17420: LD_VAR 0 2
17424: PPUSH
17425: CALL_OW 255
17429: PUSH
17430: LD_OWVAR 2
17434: EQUAL
17435: PUSH
17436: LD_VAR 0 2
17440: PPUSH
17441: CALL_OW 302
17445: AND
17446: PUSH
17447: LD_EXP 17
17451: AND
17452: IFFALSE 17468
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
17454: LD_ADDR_EXP 18
17458: PUSH
17459: LD_EXP 18
17463: PUSH
17464: LD_INT 1
17466: PLUS
17467: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
17468: LD_VAR 0 2
17472: PPUSH
17473: CALL_OW 255
17477: PUSH
17478: LD_OWVAR 2
17482: EQUAL
17483: PUSH
17484: LD_VAR 0 2
17488: PPUSH
17489: CALL_OW 248
17493: PUSH
17494: LD_INT 3
17496: EQUAL
17497: AND
17498: IFFALSE 17514
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
17500: LD_ADDR_EXP 44
17504: PUSH
17505: LD_EXP 44
17509: PUSH
17510: LD_INT 1
17512: PLUS
17513: ST_TO_ADDR
// end ;
17514: PPOPN 2
17516: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
17517: LD_EXP 19
17521: NOT
17522: PUSH
17523: LD_VAR 0 5
17527: PUSH
17528: LD_INT 1
17530: EQUAL
17531: AND
17532: IFFALSE 17548
// Dial_NewCrates ( x , y ) ;
17534: LD_VAR 0 2
17538: PPUSH
17539: LD_VAR 0 3
17543: PPUSH
17544: CALL 9356 0 2
// end ;
17548: PPOPN 5
17550: END
// on Command ( com ) do var i , j , temp , order , destiny ;
17551: LD_INT 0
17553: PPUSH
17554: PPUSH
17555: PPUSH
17556: PPUSH
17557: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17558: LD_ADDR_VAR 0 2
17562: PUSH
17563: LD_INT 22
17565: PUSH
17566: LD_INT 3
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 21
17575: PUSH
17576: LD_INT 1
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: EMPTY
17584: LIST
17585: LIST
17586: PPUSH
17587: CALL_OW 69
17591: PUSH
17592: FOR_IN
17593: IFFALSE 17786
// if GetTaskList ( i ) > 0 then
17595: LD_VAR 0 2
17599: PPUSH
17600: CALL_OW 437
17604: PUSH
17605: LD_INT 0
17607: GREATER
17608: IFFALSE 17784
// for j = 1 to GetTaskList ( i ) do
17610: LD_ADDR_VAR 0 3
17614: PUSH
17615: DOUBLE
17616: LD_INT 1
17618: DEC
17619: ST_TO_ADDR
17620: LD_VAR 0 2
17624: PPUSH
17625: CALL_OW 437
17629: PUSH
17630: FOR_TO
17631: IFFALSE 17782
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
17633: LD_ADDR_VAR 0 4
17637: PUSH
17638: LD_VAR 0 2
17642: PPUSH
17643: CALL_OW 437
17647: PUSH
17648: LD_VAR 0 3
17652: ARRAY
17653: PUSH
17654: LD_INT 4
17656: ARRAY
17657: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
17658: LD_VAR 0 4
17662: PUSH
17663: LD_INT 71
17665: EQUAL
17666: PUSH
17667: LD_VAR 0 4
17671: PPUSH
17672: CALL_OW 255
17676: PUSH
17677: LD_INT 6
17679: EQUAL
17680: PUSH
17681: LD_VAR 0 2
17685: PPUSH
17686: CALL_OW 437
17690: PUSH
17691: LD_VAR 0 3
17695: ARRAY
17696: PUSH
17697: LD_INT 1
17699: ARRAY
17700: PUSH
17701: LD_STRING e
17703: EQUAL
17704: AND
17705: PUSH
17706: LD_VAR 0 4
17710: PPUSH
17711: CALL_OW 247
17715: PUSH
17716: LD_INT 2
17718: EQUAL
17719: AND
17720: OR
17721: IFFALSE 17734
// SetTaskList ( i , [ ] ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: EMPTY
17729: PPUSH
17730: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
17734: LD_VAR 0 4
17738: PUSH
17739: LD_INT 106
17741: EQUAL
17742: PUSH
17743: LD_VAR 0 2
17747: PPUSH
17748: CALL_OW 437
17752: PUSH
17753: LD_VAR 0 3
17757: ARRAY
17758: PUSH
17759: LD_INT 1
17761: ARRAY
17762: PUSH
17763: LD_STRING Y
17765: EQUAL
17766: AND
17767: IFFALSE 17780
// SetTaskList ( i , [ ] ) ;
17769: LD_VAR 0 2
17773: PPUSH
17774: EMPTY
17775: PPUSH
17776: CALL_OW 446
// end ;
17780: GO 17630
17782: POP
17783: POP
17784: GO 17592
17786: POP
17787: POP
// end ;
17788: PPOPN 6
17790: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17791: LD_VAR 0 1
17795: PPUSH
17796: CALL_OW 255
17800: PUSH
17801: LD_INT 1
17803: EQUAL
17804: PUSH
17805: LD_VAR 0 1
17809: PPUSH
17810: CALL_OW 247
17814: PUSH
17815: LD_INT 1
17817: EQUAL
17818: AND
17819: IFFALSE 17877
// begin if unit in amLeftEngs then
17821: LD_VAR 0 1
17825: PUSH
17826: LD_EXP 86
17830: IN
17831: IFFALSE 17849
// amLeftEngs = amLeftEngs diff unit ;
17833: LD_ADDR_EXP 86
17837: PUSH
17838: LD_EXP 86
17842: PUSH
17843: LD_VAR 0 1
17847: DIFF
17848: ST_TO_ADDR
// if unit in amRightEngs then
17849: LD_VAR 0 1
17853: PUSH
17854: LD_EXP 87
17858: IN
17859: IFFALSE 17877
// amRightEngs = amRightEngs diff unit ;
17861: LD_ADDR_EXP 87
17865: PUSH
17866: LD_EXP 87
17870: PUSH
17871: LD_VAR 0 1
17875: DIFF
17876: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
17877: LD_VAR 0 1
17881: PPUSH
17882: CALL_OW 255
17886: PUSH
17887: LD_INT 6
17889: EQUAL
17890: PUSH
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL_OW 247
17900: PUSH
17901: LD_INT 1
17903: EQUAL
17904: AND
17905: IFFALSE 17935
// if unit in belkovTeam then
17907: LD_VAR 0 1
17911: PUSH
17912: LD_EXP 73
17916: IN
17917: IFFALSE 17935
// belkovTeam = belkovTeam diff unit ;
17919: LD_ADDR_EXP 73
17923: PUSH
17924: LD_EXP 73
17928: PUSH
17929: LD_VAR 0 1
17933: DIFF
17934: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 255
17944: PUSH
17945: LD_INT 3
17947: EQUAL
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 247
17958: PUSH
17959: LD_INT 1
17961: EQUAL
17962: AND
17963: IFFALSE 17979
// lostComradesCounter = lostComradesCounter + 1 ;
17965: LD_ADDR_EXP 43
17969: PUSH
17970: LD_EXP 43
17974: PUSH
17975: LD_INT 1
17977: PLUS
17978: ST_TO_ADDR
// if unit = Burlak then
17979: LD_VAR 0 1
17983: PUSH
17984: LD_EXP 62
17988: EQUAL
17989: IFFALSE 17995
// BurlakIsDead ;
17991: CALL 19292 0 0
// if unit in platSoldiers then
17995: LD_VAR 0 1
17999: PUSH
18000: LD_EXP 77
18004: IN
18005: IFFALSE 18023
// platSoldiers = platSoldiers diff unit ;
18007: LD_ADDR_EXP 77
18011: PUSH
18012: LD_EXP 77
18016: PUSH
18017: LD_VAR 0 1
18021: DIFF
18022: ST_TO_ADDR
// end ;
18023: PPOPN 1
18025: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 255
18035: PUSH
18036: LD_INT 1
18038: EQUAL
18039: PUSH
18040: LD_VAR 0 1
18044: PPUSH
18045: CALL_OW 247
18049: PUSH
18050: LD_INT 3
18052: EQUAL
18053: AND
18054: IFFALSE 18112
// begin if unit in leftBunkers then
18056: LD_VAR 0 1
18060: PUSH
18061: LD_EXP 82
18065: IN
18066: IFFALSE 18084
// leftBunkers = leftBunkers diff unit ;
18068: LD_ADDR_EXP 82
18072: PUSH
18073: LD_EXP 82
18077: PUSH
18078: LD_VAR 0 1
18082: DIFF
18083: ST_TO_ADDR
// if unit in rightBunkers then
18084: LD_VAR 0 1
18088: PUSH
18089: LD_EXP 83
18093: IN
18094: IFFALSE 18112
// rightBunkers = rightBunkers diff unit ;
18096: LD_ADDR_EXP 83
18100: PUSH
18101: LD_EXP 83
18105: PUSH
18106: LD_VAR 0 1
18110: DIFF
18111: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 255
18121: PUSH
18122: LD_INT 1
18124: EQUAL
18125: PUSH
18126: LD_VAR 0 1
18130: PPUSH
18131: CALL_OW 247
18135: PUSH
18136: LD_INT 1
18138: EQUAL
18139: AND
18140: IFFALSE 18170
// if unit in trapTeam then
18142: LD_VAR 0 1
18146: PUSH
18147: LD_EXP 81
18151: IN
18152: IFFALSE 18170
// trapTeam = trapTeam diff unit ;
18154: LD_ADDR_EXP 81
18158: PUSH
18159: LD_EXP 81
18163: PUSH
18164: LD_VAR 0 1
18168: DIFF
18169: ST_TO_ADDR
// end ;
18170: PPOPN 1
18172: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18173: LD_VAR 0 3
18177: PUSH
18178: LD_INT 1
18180: EQUAL
18181: IFFALSE 18191
// captureBelkovVehicle = true ;
18183: LD_ADDR_EXP 38
18187: PUSH
18188: LD_INT 1
18190: ST_TO_ADDR
// if original_side = 6 then
18191: LD_VAR 0 3
18195: PUSH
18196: LD_INT 6
18198: EQUAL
18199: IFFALSE 18243
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18201: LD_VAR 0 1
18205: PUSH
18206: LD_VAR 0 2
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PPUSH
18215: LD_INT 118
18217: PPUSH
18218: LD_INT 25
18220: PPUSH
18221: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18225: LD_VAR 0 1
18229: PUSH
18230: LD_VAR 0 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PPUSH
18239: CALL_OW 139
// end ; end ;
18243: PPOPN 4
18245: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18246: LD_VAR 0 1
18250: PUSH
18251: LD_INT 3
18253: EQUAL
18254: PUSH
18255: LD_VAR 0 2
18259: PUSH
18260: LD_INT 6
18262: EQUAL
18263: AND
18264: IFFALSE 18270
// AttackComrades ;
18266: CALL 19307 0 0
// end ;
18270: PPOPN 2
18272: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18273: LD_VAR 0 2
18277: PUSH
18278: LD_INT 6
18280: EQUAL
18281: IFFALSE 18295
// SetSide ( building , 3 ) ;
18283: LD_VAR 0 1
18287: PPUSH
18288: LD_INT 3
18290: PPUSH
18291: CALL_OW 235
// end ; end_of_file
18295: PPOPN 3
18297: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18298: LD_EXP 16
18302: PUSH
18303: LD_INT 8
18305: PPUSH
18306: LD_INT 22
18308: PUSH
18309: LD_INT 3
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 21
18318: PUSH
18319: LD_INT 1
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: EMPTY
18327: LIST
18328: LIST
18329: PPUSH
18330: CALL_OW 71
18334: PUSH
18335: LD_INT 0
18337: EQUAL
18338: AND
18339: IFFALSE 18440
18341: GO 18343
18343: DISABLE
// begin enable ;
18344: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18345: LD_EXP 36
18349: NOT
18350: PUSH
18351: LD_EXP 64
18355: PPUSH
18356: CALL_OW 302
18360: PUSH
18361: LD_EXP 68
18365: PPUSH
18366: CALL_OW 302
18370: OR
18371: AND
18372: IFFALSE 18419
// begin case Query ( QContMission ) of 1 :
18374: LD_STRING QContMission
18376: PPUSH
18377: CALL_OW 97
18381: PUSH
18382: LD_INT 1
18384: DOUBLE
18385: EQUAL
18386: IFTRUE 18390
18388: GO 18397
18390: POP
// begin FinishMission ;
18391: CALL 18441 0 0
// end ; 2 :
18395: GO 18417
18397: LD_INT 2
18399: DOUBLE
18400: EQUAL
18401: IFTRUE 18405
18403: GO 18416
18405: POP
// begin saveBelkovObjective = true ;
18406: LD_ADDR_EXP 36
18410: PUSH
18411: LD_INT 1
18413: ST_TO_ADDR
// end ; end ;
18414: GO 18417
18416: POP
// end else
18417: GO 18430
// if not belkovSaved then
18419: LD_EXP 37
18423: NOT
18424: IFFALSE 18430
// FinishMission ;
18426: CALL 18441 0 0
// if belkovSaved then
18430: LD_EXP 37
18434: IFFALSE 18440
// FinishMission ;
18436: CALL 18441 0 0
// end ;
18440: END
// function FinishMission ; begin
18441: LD_INT 0
18443: PPUSH
// SetRewards ;
18444: CALL 18465 0 0
// SavePlayerCharacters ;
18448: CALL 18755 0 0
// SaveGlobalVariables ;
18452: CALL 18972 0 0
// YouWin ;
18456: CALL_OW 103
// end ;
18460: LD_VAR 0 1
18464: RET
// function SetRewards ; begin
18465: LD_INT 0
18467: PPUSH
// case initiative of 1 :
18468: LD_EXP 42
18472: PUSH
18473: LD_INT 1
18475: DOUBLE
18476: EQUAL
18477: IFTRUE 18481
18479: GO 18494
18481: POP
// AddMedal ( Initiative , 1 ) ; 2 :
18482: LD_STRING Initiative
18484: PPUSH
18485: LD_INT 1
18487: PPUSH
18488: CALL_OW 101
18492: GO 18539
18494: LD_INT 2
18496: DOUBLE
18497: EQUAL
18498: IFTRUE 18502
18500: GO 18516
18502: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
18503: LD_STRING Initiative
18505: PPUSH
18506: LD_INT 2
18508: NEG
18509: PPUSH
18510: CALL_OW 101
18514: GO 18539
18516: LD_INT 3
18518: DOUBLE
18519: EQUAL
18520: IFTRUE 18524
18522: GO 18538
18524: POP
// AddMedal ( Initiative , - 1 ) ; end ;
18525: LD_STRING Initiative
18527: PPUSH
18528: LD_INT 1
18530: NEG
18531: PPUSH
18532: CALL_OW 101
18536: GO 18539
18538: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
18539: LD_EXP 37
18543: PUSH
18544: LD_EXP 64
18548: PPUSH
18549: CALL_OW 302
18553: PUSH
18554: LD_EXP 68
18558: PPUSH
18559: CALL_OW 302
18563: OR
18564: AND
18565: IFFALSE 18577
// AddMedal ( Belkov , 1 ) ;
18567: LD_STRING Belkov
18569: PPUSH
18570: LD_INT 1
18572: PPUSH
18573: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
18577: LD_EXP 37
18581: NOT
18582: PUSH
18583: LD_EXP 36
18587: NOT
18588: AND
18589: IFFALSE 18602
// AddMedal ( Belkov , - 1 ) ;
18591: LD_STRING Belkov
18593: PPUSH
18594: LD_INT 1
18596: NEG
18597: PPUSH
18598: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
18602: LD_EXP 37
18606: NOT
18607: PUSH
18608: LD_EXP 36
18612: AND
18613: IFFALSE 18626
// AddMedal ( Belkov , - 2 ) ;
18615: LD_STRING Belkov
18617: PPUSH
18618: LD_INT 2
18620: NEG
18621: PPUSH
18622: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
18626: LD_EXP 37
18630: PUSH
18631: LD_EXP 6
18635: PUSH
18636: LD_EXP 64
18640: PPUSH
18641: CALL_OW 301
18645: AND
18646: AND
18647: PUSH
18648: LD_EXP 6
18652: NOT
18653: PUSH
18654: LD_EXP 68
18658: PPUSH
18659: CALL_OW 301
18663: AND
18664: OR
18665: IFFALSE 18678
// AddMedal ( Belkov , - 2 ) ;
18667: LD_STRING Belkov
18669: PPUSH
18670: LD_INT 2
18672: NEG
18673: PPUSH
18674: CALL_OW 101
// if lostComradesCounter = 0 then
18678: LD_EXP 43
18682: PUSH
18683: LD_INT 0
18685: EQUAL
18686: IFFALSE 18700
// AddMedal ( NoLosses , 1 ) else
18688: LD_STRING NoLosses
18690: PPUSH
18691: LD_INT 1
18693: PPUSH
18694: CALL_OW 101
18698: GO 18710
// AddMedal ( NoLosses , 0 ) ;
18700: LD_STRING NoLosses
18702: PPUSH
18703: LD_INT 0
18705: PPUSH
18706: CALL_OW 101
// GiveMedals ( Main ) ;
18710: LD_STRING Main
18712: PPUSH
18713: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18717: LD_INT 22
18719: PUSH
18720: LD_INT 3
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: LD_INT 21
18729: PUSH
18730: LD_INT 1
18732: PUSH
18733: EMPTY
18734: LIST
18735: LIST
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PPUSH
18741: CALL_OW 69
18745: PPUSH
18746: CALL_OW 43
// end ;
18750: LD_VAR 0 1
18754: RET
// function SavePlayerCharacters ; var othersYour ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
18759: LD_EXP 62
18763: PPUSH
18764: LD_STRING Burlak
18766: PPUSH
18767: LD_INT 3
18769: PPUSH
18770: CALL 4272 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
18774: LD_EXP 63
18778: PPUSH
18779: LD_STRING Gnyevko
18781: PPUSH
18782: LD_INT 3
18784: PPUSH
18785: CALL 4272 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
18789: LD_EXP 70
18793: PPUSH
18794: LD_STRING Kovalyuk
18796: PPUSH
18797: LD_INT 3
18799: PPUSH
18800: CALL 4272 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
18804: LD_EXP 64
18808: PPUSH
18809: LD_STRING Belkov
18811: PPUSH
18812: LD_INT 3
18814: PPUSH
18815: CALL 4272 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
18819: LD_EXP 68
18823: PPUSH
18824: LD_STRING Belkov2
18826: PPUSH
18827: LD_INT 3
18829: PPUSH
18830: CALL 4272 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
18834: LD_EXP 65
18838: PPUSH
18839: LD_STRING Kirilenkova
18841: PPUSH
18842: LD_INT 3
18844: PPUSH
18845: CALL 4272 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
18849: LD_ADDR_VAR 0 2
18853: PUSH
18854: LD_INT 22
18856: PUSH
18857: LD_INT 3
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 21
18866: PUSH
18867: LD_INT 1
18869: PUSH
18870: EMPTY
18871: LIST
18872: LIST
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PPUSH
18878: CALL_OW 69
18882: PUSH
18883: LD_EXP 62
18887: PUSH
18888: LD_EXP 63
18892: PUSH
18893: LD_EXP 64
18897: PUSH
18898: LD_EXP 68
18902: PUSH
18903: LD_EXP 70
18907: PUSH
18908: LD_EXP 65
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: DIFF
18921: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
18922: LD_VAR 0 2
18926: PPUSH
18927: LD_STRING other_survivors
18929: PPUSH
18930: LD_INT 3
18932: PPUSH
18933: CALL 4328 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
18937: LD_EXP 77
18941: PPUSH
18942: LD_STRING other_beria
18944: PPUSH
18945: LD_INT 6
18947: PPUSH
18948: CALL 4328 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
18952: LD_EXP 69
18956: PPUSH
18957: LD_STRING other_kirov
18959: PPUSH
18960: LD_INT 6
18962: PPUSH
18963: CALL 4328 0 3
// end ;
18967: LD_VAR 0 1
18971: RET
// function SaveGlobalVariables ; var vehicles ; begin
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
18976: LD_ADDR_VAR 0 2
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 3
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: LD_INT 21
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 50
19003: PUSH
19004: EMPTY
19005: LIST
19006: PUSH
19007: EMPTY
19008: LIST
19009: LIST
19010: LIST
19011: PPUSH
19012: CALL_OW 69
19016: ST_TO_ADDR
// if vehicles then
19017: LD_VAR 0 2
19021: IFFALSE 19035
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19023: LD_VAR 0 2
19027: PPUSH
19028: LD_STRING 02_Vehicles_1
19030: PPUSH
19031: CALL 5322 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19035: LD_INT 8
19037: PPUSH
19038: LD_INT 21
19040: PUSH
19041: LD_INT 3
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: EMPTY
19049: LIST
19050: PPUSH
19051: CALL_OW 70
19055: PPUSH
19056: LD_STRING 02_BeriaBase_2
19058: PPUSH
19059: CALL 5465 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19063: LD_INT 9
19065: PPUSH
19066: LD_INT 22
19068: PUSH
19069: LD_INT 6
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 3
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 70
19094: PPUSH
19095: LD_STRING 02_KirovBase_3
19097: PPUSH
19098: CALL 5465 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19102: LD_INT 22
19104: PUSH
19105: LD_INT 3
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 21
19114: PUSH
19115: LD_INT 3
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 50
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: LD_INT 3
19130: PUSH
19131: LD_INT 95
19133: PUSH
19134: LD_INT 8
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: PPUSH
19151: CALL_OW 69
19155: PPUSH
19156: LD_STRING 02_OtherBuildings_4
19158: PPUSH
19159: CALL 5465 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19163: LD_INT 22
19165: PUSH
19166: LD_INT 1
19168: PUSH
19169: EMPTY
19170: LIST
19171: LIST
19172: PUSH
19173: LD_INT 21
19175: PUSH
19176: LD_INT 3
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 50
19185: PUSH
19186: EMPTY
19187: LIST
19188: PUSH
19189: LD_INT 23
19191: PUSH
19192: LD_INT 1
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 69
19209: PPUSH
19210: LD_STRING 02_AmericanBuildings_5
19212: PPUSH
19213: CALL 5465 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19217: LD_EXP 4
19221: PPUSH
19222: LD_STRING 02_MeetBelkovBrother_6
19224: PPUSH
19225: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19229: LD_INT 106
19231: PPUSH
19232: CALL_OW 274
19236: PPUSH
19237: LD_INT 1
19239: PPUSH
19240: CALL_OW 275
19244: PPUSH
19245: LD_STRING 02_BeriaResourceCrates_7
19247: PPUSH
19248: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19252: LD_INT 106
19254: PPUSH
19255: CALL_OW 274
19259: PPUSH
19260: LD_INT 2
19262: PPUSH
19263: CALL_OW 275
19267: PPUSH
19268: LD_STRING 02_BeriaResourceOil_8
19270: PPUSH
19271: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19275: LD_EXP 5
19279: PPUSH
19280: LD_STRING 02_PlatonovOpinion_9
19282: PPUSH
19283: CALL_OW 39
// end ; end_of_file
19287: LD_VAR 0 1
19291: RET
// export function BurlakIsDead ; begin
19292: LD_INT 0
19294: PPUSH
// YouLost ( Burlak ) ;
19295: LD_STRING Burlak
19297: PPUSH
19298: CALL_OW 104
// end ;
19302: LD_VAR 0 1
19306: RET
// export function AttackComrades ; begin
19307: LD_INT 0
19309: PPUSH
// YouLost ( SelfAttack ) ;
19310: LD_STRING SelfAttack
19312: PPUSH
19313: CALL_OW 104
// end ; end_of_file
19317: LD_VAR 0 1
19321: RET
// every 0 0$1 do var engs ;
19322: GO 19324
19324: DISABLE
19325: LD_INT 0
19327: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19328: LD_ADDR_VAR 0 1
19332: PUSH
19333: LD_EXP 69
19337: PPUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PPUSH
19348: CALL_OW 72
19352: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
19353: LD_VAR 0 1
19357: PPUSH
19358: CALL_OW 122
// wait ( 0 0$1 ) ;
19362: LD_INT 35
19364: PPUSH
19365: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
19369: LD_VAR 0 1
19373: PPUSH
19374: LD_INT 31
19376: PPUSH
19377: LD_INT 146
19379: PPUSH
19380: LD_INT 107
19382: PPUSH
19383: LD_INT 1
19385: PPUSH
19386: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
19390: LD_VAR 0 1
19394: PPUSH
19395: LD_INT 31
19397: PPUSH
19398: LD_INT 176
19400: PPUSH
19401: LD_INT 123
19403: PPUSH
19404: LD_INT 5
19406: PPUSH
19407: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
19411: LD_VAR 0 1
19415: PPUSH
19416: LD_INT 31
19418: PPUSH
19419: LD_INT 170
19421: PPUSH
19422: LD_INT 102
19424: PPUSH
19425: LD_INT 4
19427: PPUSH
19428: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
19432: LD_VAR 0 1
19436: PPUSH
19437: LD_INT 31
19439: PPUSH
19440: LD_INT 173
19442: PPUSH
19443: LD_INT 105
19445: PPUSH
19446: LD_INT 4
19448: PPUSH
19449: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
19453: LD_VAR 0 1
19457: PPUSH
19458: LD_INT 71
19460: PPUSH
19461: CALL_OW 180
// end ;
19465: PPOPN 1
19467: END
// every 0 0$1 trigger activateAMAI do
19468: LD_EXP 27
19472: IFFALSE 19496
19474: GO 19476
19476: DISABLE
// begin enable ;
19477: ENABLE
// RepairDamageLeftBunkers ;
19478: CALL 19497 0 0
// if Difficulty = 3 then
19482: LD_OWVAR 67
19486: PUSH
19487: LD_INT 3
19489: EQUAL
19490: IFFALSE 19496
// RepairDamageRightBunkers ;
19492: CALL 19705 0 0
// end ;
19496: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
19497: LD_INT 0
19499: PPUSH
19500: PPUSH
19501: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
19502: LD_EXP 86
19506: NOT
19507: PUSH
19508: LD_INT 17
19510: PPUSH
19511: LD_INT 22
19513: PUSH
19514: LD_INT 1
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: LD_INT 21
19523: PUSH
19524: LD_INT 3
19526: PUSH
19527: EMPTY
19528: LIST
19529: LIST
19530: PUSH
19531: LD_INT 30
19533: PUSH
19534: LD_INT 31
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PUSH
19541: LD_INT 3
19543: PUSH
19544: LD_INT 24
19546: PUSH
19547: LD_INT 1000
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PPUSH
19564: CALL_OW 70
19568: PUSH
19569: LD_INT 0
19571: EQUAL
19572: OR
19573: IFFALSE 19577
// exit ;
19575: GO 19700
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
19577: LD_EXP 86
19581: PPUSH
19582: LD_INT 3
19584: PUSH
19585: LD_INT 60
19587: PUSH
19588: EMPTY
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 72
19599: PPUSH
19600: CALL_OW 122
// for bunker in leftBunkers do
19604: LD_ADDR_VAR 0 3
19608: PUSH
19609: LD_EXP 82
19613: PUSH
19614: FOR_IN
19615: IFFALSE 19666
// if GetLives ( bunker ) < 1000 then
19617: LD_VAR 0 3
19621: PPUSH
19622: CALL_OW 256
19626: PUSH
19627: LD_INT 1000
19629: LESS
19630: IFFALSE 19664
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
19632: LD_EXP 86
19636: PPUSH
19637: LD_INT 3
19639: PUSH
19640: LD_INT 60
19642: PUSH
19643: EMPTY
19644: LIST
19645: PUSH
19646: EMPTY
19647: LIST
19648: LIST
19649: PPUSH
19650: CALL_OW 72
19654: PPUSH
19655: LD_VAR 0 3
19659: PPUSH
19660: CALL_OW 190
19664: GO 19614
19666: POP
19667: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
19668: LD_EXP 86
19672: PPUSH
19673: LD_INT 3
19675: PUSH
19676: LD_INT 60
19678: PUSH
19679: EMPTY
19680: LIST
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 72
19690: PPUSH
19691: LD_EXP 84
19695: PPUSH
19696: CALL_OW 180
// end ;
19700: LD_VAR 0 1
19704: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
19705: LD_INT 0
19707: PPUSH
19708: PPUSH
19709: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
19710: LD_EXP 87
19714: NOT
19715: PUSH
19716: LD_INT 16
19718: PPUSH
19719: LD_INT 22
19721: PUSH
19722: LD_INT 1
19724: PUSH
19725: EMPTY
19726: LIST
19727: LIST
19728: PUSH
19729: LD_INT 21
19731: PUSH
19732: LD_INT 3
19734: PUSH
19735: EMPTY
19736: LIST
19737: LIST
19738: PUSH
19739: LD_INT 30
19741: PUSH
19742: LD_INT 31
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 3
19751: PUSH
19752: LD_INT 24
19754: PUSH
19755: LD_INT 1000
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 70
19776: PUSH
19777: LD_INT 0
19779: EQUAL
19780: OR
19781: IFFALSE 19785
// exit ;
19783: GO 19908
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
19785: LD_EXP 87
19789: PPUSH
19790: LD_INT 3
19792: PUSH
19793: LD_INT 60
19795: PUSH
19796: EMPTY
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 72
19807: PPUSH
19808: CALL_OW 122
// for bunker in rightBunkers do
19812: LD_ADDR_VAR 0 3
19816: PUSH
19817: LD_EXP 83
19821: PUSH
19822: FOR_IN
19823: IFFALSE 19874
// if GetLives ( bunker ) < 1000 then
19825: LD_VAR 0 3
19829: PPUSH
19830: CALL_OW 256
19834: PUSH
19835: LD_INT 1000
19837: LESS
19838: IFFALSE 19872
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
19840: LD_EXP 87
19844: PPUSH
19845: LD_INT 3
19847: PUSH
19848: LD_INT 60
19850: PUSH
19851: EMPTY
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PPUSH
19858: CALL_OW 72
19862: PPUSH
19863: LD_VAR 0 3
19867: PPUSH
19868: CALL_OW 190
19872: GO 19822
19874: POP
19875: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
19876: LD_EXP 87
19880: PPUSH
19881: LD_INT 3
19883: PUSH
19884: LD_INT 60
19886: PUSH
19887: EMPTY
19888: LIST
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PPUSH
19894: CALL_OW 72
19898: PPUSH
19899: LD_EXP 85
19903: PPUSH
19904: CALL_OW 180
// end ;
19908: LD_VAR 0 1
19912: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
19913: LD_EXP 28
19917: PUSH
19918: LD_EXP 73
19922: AND
19923: IFFALSE 20060
19925: GO 19927
19927: DISABLE
19928: LD_INT 0
19930: PPUSH
19931: PPUSH
19932: PPUSH
// begin enable ;
19933: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
19934: LD_ADDR_VAR 0 2
19938: PUSH
19939: LD_EXP 73
19943: PPUSH
19944: LD_INT 25
19946: PUSH
19947: LD_INT 4
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PPUSH
19954: CALL_OW 72
19958: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
19959: LD_ADDR_VAR 0 3
19963: PUSH
19964: LD_EXP 73
19968: PPUSH
19969: LD_INT 3
19971: PUSH
19972: LD_INT 24
19974: PUSH
19975: LD_INT 650
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PPUSH
19986: CALL_OW 72
19990: ST_TO_ADDR
// if not damaged and med then
19991: LD_VAR 0 3
19995: NOT
19996: PUSH
19997: LD_VAR 0 2
20001: AND
20002: IFFALSE 20021
// ComMoveXY ( med , 83 , 17 ) else
20004: LD_VAR 0 2
20008: PPUSH
20009: LD_INT 83
20011: PPUSH
20012: LD_INT 17
20014: PPUSH
20015: CALL_OW 111
20019: GO 20060
// if med then
20021: LD_VAR 0 2
20025: IFFALSE 20060
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20027: LD_VAR 0 3
20031: PPUSH
20032: LD_INT 83
20034: PPUSH
20035: LD_INT 17
20037: PPUSH
20038: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20042: LD_VAR 0 2
20046: PPUSH
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 1
20054: ARRAY
20055: PPUSH
20056: CALL_OW 128
// end ; end ; end_of_file
20060: PPOPN 3
20062: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20063: LD_INT 22
20065: PUSH
20066: LD_INT 3
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 23
20075: PUSH
20076: LD_INT 1
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: PUSH
20083: LD_INT 30
20085: PUSH
20086: LD_INT 0
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: PUSH
20103: LD_INT 2
20105: EQUAL
20106: IFFALSE 20118
20108: GO 20110
20110: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20111: LD_STRING ACH_DEPOT
20113: PPUSH
20114: CALL_OW 543
20118: END
// every 1 trigger achievement_ConstructVehicles = 3 do
20119: LD_EXP 44
20123: PUSH
20124: LD_INT 3
20126: EQUAL
20127: IFFALSE 20139
20129: GO 20131
20131: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20132: LD_STRING ACH_WORKSHOP
20134: PPUSH
20135: CALL_OW 543
20139: END
// every 1 trigger captureBelkovVehicle do
20140: LD_EXP 38
20144: IFFALSE 20156
20146: GO 20148
20148: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
20149: LD_STRING ACH_RETAKE
20151: PPUSH
20152: CALL_OW 543
20156: END
