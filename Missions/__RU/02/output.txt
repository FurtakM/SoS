// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 349 0 0
// PrepareRussian ;
  24: CALL 1088 0 0
// PrepareNature ;
  28: CALL 15152 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = true ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 1
 210: ST_TO_ADDR
// canExploreMap = false ;
 211: LD_ADDR_EXP 20
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawLeftBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawRightBunker = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogLoopBlocker = false ;
 235: LD_ADDR_EXP 31
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 243: LD_ADDR_EXP 29
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 251: LD_ADDR_EXP 30
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// playerGetSupport = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// captureBelkovVehicle = false ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// saveBelkovObjective = false ;
 275: LD_ADDR_EXP 34
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// medalForGetSupport = true ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 291: LD_ADDR_EXP 37
 295: PUSH
 296: LD_INT 1
 298: NEG
 299: ST_TO_ADDR
// initiative = 0 ;
 300: LD_ADDR_EXP 40
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// lostComradesCounter = 0 ;
 308: LD_ADDR_EXP 41
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// northMapExplored = false ;
 316: LD_ADDR_EXP 39
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// activateAMAI = false ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// MissionIntro ;
 340: CALL 6546 0 0
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function InitMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// BaseMapConfig ;
 352: CALL 365 0 0
// MissionMapConfig ;
 356: CALL 451 0 0
// end ;
 360: LD_VAR 0 1
 364: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 365: LD_INT 0
 367: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 368: LD_ADDR_EXP 42
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 4
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 391: LD_ADDR_EXP 43
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 2
 401: PUSH
 402: LD_INT 2
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: ST_TO_ADDR
// animalsAgression = 0 ;
 414: LD_ADDR_EXP 44
 418: PUSH
 419: LD_INT 0
 421: ST_TO_ADDR
// debugMode = 0 ;
 422: LD_ADDR_EXP 47
 426: PUSH
 427: LD_INT 0
 429: ST_TO_ADDR
// missionPrefix = 02_ ;
 430: LD_ADDR_EXP 45
 434: PUSH
 435: LD_STRING 02_
 437: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 438: LD_ADDR_EXP 46
 442: PUSH
 443: LD_STRING 01_
 445: ST_TO_ADDR
// end ;
 446: LD_VAR 0 1
 450: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 451: LD_INT 0
 453: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 454: LD_ADDR_EXP 49
 458: PUSH
 459: LD_INT 162
 461: PUSH
 462: LD_INT 107
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 162
 471: PUSH
 472: LD_INT 108
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 163
 481: PUSH
 482: LD_INT 109
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 163
 491: PUSH
 492: LD_INT 110
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 162
 501: PUSH
 502: LD_INT 109
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 161
 511: PUSH
 512: LD_INT 107
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 161
 521: PUSH
 522: LD_INT 106
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 538: LD_ADDR_EXP 50
 542: PUSH
 543: LD_INT 113
 545: PUSH
 546: LD_INT 96
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 114
 555: PUSH
 556: LD_INT 97
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 114
 565: PUSH
 566: LD_INT 98
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 578: LD_ADDR_EXP 48
 582: PUSH
 583: LD_INT 10
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: ST_TO_ADDR
// labCratesRefund = 20 ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 20
 608: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 609: LD_ADDR_EXP 52
 613: PUSH
 614: LD_INT 40
 616: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 617: LD_ADDR_EXP 53
 621: PUSH
 622: LD_INT 20
 624: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 30
 632: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 10
 640: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 1
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: PUSH
 660: LD_OWVAR 67
 664: ARRAY
 665: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 2 , 3 ] , [ 4 , 4 , 3 , 3 ] ] [ Difficulty ] ;
 666: LD_ADDR_EXP 57
 670: PUSH
 671: LD_INT 2
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: LD_INT 2
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 3
 691: PUSH
 692: LD_INT 3
 694: PUSH
 695: LD_INT 2
 697: PUSH
 698: LD_INT 3
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: PUSH
 707: LD_INT 4
 709: PUSH
 710: LD_INT 4
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_OWVAR 67
 734: ARRAY
 735: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 736: LD_ADDR_EXP 58
 740: PUSH
 741: LD_INT 21000
 743: PUSH
 744: LD_INT 16800
 746: PUSH
 747: LD_INT 12600
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: PUSH
 755: LD_OWVAR 67
 759: ARRAY
 760: ST_TO_ADDR
// end ;
 761: LD_VAR 0 1
 765: RET
// every 0 0$1 trigger debugMode do var i ;
 766: LD_EXP 47
 770: IFFALSE 1085
 772: GO 774
 774: DISABLE
 775: LD_INT 0
 777: PPUSH
// begin enable ;
 778: ENABLE
// FogOff ( your_side ) ;
 779: LD_OWVAR 2
 783: PPUSH
 784: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 788: LD_ADDR_VAR 0 1
 792: PUSH
 793: LD_INT 22
 795: PUSH
 796: LD_OWVAR 2
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 2
 807: PUSH
 808: LD_INT 21
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 21
 820: PUSH
 821: LD_INT 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PPUSH
 837: CALL_OW 69
 841: PUSH
 842: FOR_IN
 843: IFFALSE 859
// SetLives ( i , 1000 ) ;
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_INT 1000
 852: PPUSH
 853: CALL_OW 234
 857: GO 842
 859: POP
 860: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_OWVAR 2
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 21
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PPUSH
 892: CALL_OW 69
 896: PUSH
 897: FOR_IN
 898: IFFALSE 962
// begin SetSkill ( i , skill_combat , 10 ) ;
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_INT 1
 907: PPUSH
 908: LD_INT 10
 910: PPUSH
 911: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 10
 925: PPUSH
 926: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 930: LD_VAR 0 1
 934: PPUSH
 935: LD_INT 3
 937: PPUSH
 938: LD_INT 10
 940: PPUSH
 941: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 945: LD_VAR 0 1
 949: PPUSH
 950: LD_INT 4
 952: PPUSH
 953: LD_INT 10
 955: PPUSH
 956: CALL_OW 237
// end ;
 960: GO 897
 962: POP
 963: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 964: LD_ADDR_VAR 0 1
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_OWVAR 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 2
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 0
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 30
 996: PUSH
 997: LD_INT 1
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: PPUSH
1013: CALL_OW 69
1017: PUSH
1018: FOR_IN
1019: IFFALSE 1083
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1021: LD_VAR 0 1
1025: PPUSH
1026: CALL_OW 274
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 9999
1036: PPUSH
1037: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1041: LD_VAR 0 1
1045: PPUSH
1046: CALL_OW 274
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 9999
1056: PPUSH
1057: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 274
1070: PPUSH
1071: LD_INT 3
1073: PPUSH
1074: LD_INT 9999
1076: PPUSH
1077: CALL_OW 277
// end ;
1081: GO 1018
1083: POP
1084: POP
// end ; end_of_file
1085: PPOPN 1
1087: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1088: LD_INT 0
1090: PPUSH
// PrepareCharactersFromPreviousMission ;
1091: CALL 1476 0 0
// PrepareKirovBase ;
1095: CALL 1671 0 0
// PrepareBeriaBase ;
1099: CALL 2443 0 0
// end ;
1103: LD_VAR 0 1
1107: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1108: LD_INT 0
1110: PPUSH
1111: PPUSH
1112: PPUSH
1113: PPUSH
// belkovTeam = [ ] ;
1114: LD_ADDR_EXP 70
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// uc_side = 6 ;
1121: LD_ADDR_OWVAR 20
1125: PUSH
1126: LD_INT 6
1128: ST_TO_ADDR
// uc_nation = nation_russian ;
1129: LD_ADDR_OWVAR 21
1133: PUSH
1134: LD_INT 3
1136: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1137: LD_ADDR_OWVAR 37
1141: PUSH
1142: LD_EXP 72
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1151: LD_ADDR_OWVAR 39
1155: PUSH
1156: LD_EXP 72
1160: PUSH
1161: LD_INT 2
1163: ARRAY
1164: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1165: LD_ADDR_OWVAR 38
1169: PUSH
1170: LD_EXP 72
1174: PUSH
1175: LD_INT 3
1177: ARRAY
1178: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1179: LD_ADDR_OWVAR 40
1183: PUSH
1184: LD_EXP 72
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_EXP 72
1202: PUSH
1203: LD_INT 5
1205: ARRAY
1206: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1207: LD_ADDR_EXP 69
1211: PUSH
1212: CALL_OW 45
1216: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1217: LD_EXP 69
1221: PPUSH
1222: LD_INT 3
1224: PPUSH
1225: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1229: LD_EXP 69
1233: PPUSH
1234: LD_INT 11
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1244: LD_ADDR_EXP 70
1248: PUSH
1249: LD_EXP 70
1253: PUSH
1254: LD_EXP 69
1258: ADD
1259: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1260: LD_STRING 02_TmpBelkov
1262: PPUSH
1263: CALL_OW 28
1267: IFFALSE 1314
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1269: LD_ADDR_EXP 61
1273: PUSH
1274: LD_STRING 02_TmpBelkov
1276: PPUSH
1277: CALL_OW 34
1281: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1282: LD_EXP 61
1286: PPUSH
1287: LD_EXP 69
1291: PPUSH
1292: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1296: LD_ADDR_EXP 70
1300: PUSH
1301: LD_EXP 70
1305: PUSH
1306: LD_EXP 61
1310: ADD
1311: ST_TO_ADDR
// end else
1312: GO 1357
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1314: LD_ADDR_EXP 65
1318: PUSH
1319: LD_STRING 02_TmpBelkov2
1321: PPUSH
1322: CALL_OW 34
1326: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1327: LD_EXP 65
1331: PPUSH
1332: LD_EXP 69
1336: PPUSH
1337: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1341: LD_ADDR_EXP 70
1345: PUSH
1346: LD_EXP 70
1350: PUSH
1351: LD_EXP 65
1355: ADD
1356: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1357: LD_STRING 02_TmpKirilenkova
1359: PPUSH
1360: CALL_OW 28
1364: IFFALSE 1410
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1366: LD_ADDR_EXP 62
1370: PUSH
1371: LD_STRING 02_TmpKirilenkova
1373: PPUSH
1374: CALL_OW 34
1378: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1379: LD_EXP 62
1383: PPUSH
1384: LD_INT 11
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1394: LD_ADDR_EXP 70
1398: PUSH
1399: LD_EXP 70
1403: PUSH
1404: LD_EXP 62
1408: ADD
1409: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1410: LD_ADDR_VAR 0 3
1414: PUSH
1415: LD_STRING 02_TmpBelkovTeam
1417: PPUSH
1418: CALL_OW 31
1422: ST_TO_ADDR
// for unit in others do
1423: LD_ADDR_VAR 0 2
1427: PUSH
1428: LD_VAR 0 3
1432: PUSH
1433: FOR_IN
1434: IFFALSE 1469
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1436: LD_VAR 0 2
1440: PPUSH
1441: LD_INT 11
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1451: LD_ADDR_EXP 70
1455: PUSH
1456: LD_EXP 70
1460: PUSH
1461: LD_VAR 0 2
1465: ADD
1466: ST_TO_ADDR
// end ;
1467: GO 1433
1469: POP
1470: POP
// end ;
1471: LD_VAR 0 1
1475: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1476: LD_INT 0
1478: PPUSH
1479: PPUSH
// uc_side = 3 ;
1480: LD_ADDR_OWVAR 20
1484: PUSH
1485: LD_INT 3
1487: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1488: LD_ADDR_EXP 59
1492: PUSH
1493: LD_STRING Burlak
1495: PPUSH
1496: LD_INT 1
1498: PPUSH
1499: CALL 3981 0 2
1503: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1504: LD_ADDR_EXP 60
1508: PUSH
1509: LD_STRING Gnyevko
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL 3981 0 2
1519: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1520: LD_ADDR_EXP 61
1524: PUSH
1525: LD_STRING Belkov
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL 3981 0 2
1535: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1536: LD_ADDR_EXP 62
1540: PUSH
1541: LD_STRING Kirilenkova
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL 3981 0 2
1551: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1552: LD_EXP 59
1556: PPUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1567: LD_EXP 60
1571: PPUSH
1572: LD_INT 3
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1582: LD_EXP 61
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1597: LD_EXP 62
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1612: LD_EXP 59
1616: PPUSH
1617: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1621: LD_ADDR_EXP 63
1625: PUSH
1626: LD_STRING 01_other_survivors
1628: PPUSH
1629: CALL_OW 31
1633: ST_TO_ADDR
// for i in other_survivors do
1634: LD_ADDR_VAR 0 2
1638: PUSH
1639: LD_EXP 63
1643: PUSH
1644: FOR_IN
1645: IFFALSE 1664
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1647: LD_VAR 0 2
1651: PPUSH
1652: LD_INT 3
1654: PPUSH
1655: LD_INT 0
1657: PPUSH
1658: CALL_OW 49
1662: GO 1644
1664: POP
1665: POP
// end ;
1666: LD_VAR 0 1
1670: RET
// function PrepareKirovBase ; var i , un ; begin
1671: LD_INT 0
1673: PPUSH
1674: PPUSH
1675: PPUSH
// SetBName ( kirov , kirov ) ;
1676: LD_INT 71
1678: PPUSH
1679: LD_STRING kirov
1681: PPUSH
1682: CALL_OW 500
// uc_side = 6 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 6
1693: ST_TO_ADDR
// uc_nation = 3 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// hc_gallery =  ;
1702: LD_ADDR_OWVAR 33
1706: PUSH
1707: LD_STRING 
1709: ST_TO_ADDR
// hc_name =  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1718: LD_ADDR_EXP 64
1722: PUSH
1723: LD_STRING Kurin
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL 3981 0 2
1733: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1734: LD_ADDR_EXP 67
1738: PUSH
1739: LD_STRING Kovalyuk
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL 3981 0 2
1749: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1750: LD_ADDR_EXP 65
1754: PUSH
1755: LD_STRING Belkov2
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL 3981 0 2
1765: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1766: LD_EXP 64
1770: PPUSH
1771: LD_INT 4
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1781: LD_EXP 67
1785: PPUSH
1786: LD_INT 161
1788: PPUSH
1789: LD_INT 108
1791: PPUSH
1792: LD_INT 6
1794: PPUSH
1795: LD_INT 0
1797: PPUSH
1798: CALL_OW 50
// ComHold ( Kurin ) ;
1802: LD_EXP 64
1806: PPUSH
1807: CALL_OW 140
// otherKirovUnits = [ ] ;
1811: LD_ADDR_EXP 66
1815: PUSH
1816: EMPTY
1817: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1818: LD_ADDR_EXP 48
1822: PUSH
1823: LD_EXP 48
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_EXP 48
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_EXP 63
1844: PPUSH
1845: LD_INT 25
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PPUSH
1855: CALL_OW 72
1859: MINUS
1860: PPUSH
1861: CALL_OW 1
1865: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 1
1874: DEC
1875: ST_TO_ADDR
1876: LD_EXP 48
1880: PUSH
1881: LD_INT 1
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2065
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1888: LD_INT 0
1890: PPUSH
1891: LD_INT 1
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 3
1899: PPUSH
1900: CALL_OW 12
1904: PPUSH
1905: CALL_OW 380
// un = CreateHuman ;
1909: LD_ADDR_VAR 0 3
1913: PUSH
1914: CALL_OW 44
1918: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1919: LD_ADDR_EXP 66
1923: PUSH
1924: LD_EXP 66
1928: PUSH
1929: LD_VAR 0 3
1933: ADD
1934: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1935: LD_INT 9
1937: PPUSH
1938: LD_INT 22
1940: PUSH
1941: LD_INT 6
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 21
1950: PUSH
1951: LD_INT 3
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 30
1960: PUSH
1961: LD_INT 31
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 58
1970: PUSH
1971: EMPTY
1972: LIST
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: LIST
1978: LIST
1979: PPUSH
1980: CALL_OW 70
1984: IFFALSE 2051
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
1986: LD_VAR 0 3
1990: PPUSH
1991: LD_INT 9
1993: PPUSH
1994: LD_INT 22
1996: PUSH
1997: LD_INT 6
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: LD_INT 21
2006: PUSH
2007: LD_INT 3
2009: PUSH
2010: EMPTY
2011: LIST
2012: LIST
2013: PUSH
2014: LD_INT 30
2016: PUSH
2017: LD_INT 31
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: PUSH
2024: LD_INT 58
2026: PUSH
2027: EMPTY
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PPUSH
2036: CALL_OW 70
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PPUSH
2045: CALL 5183 0 2
2049: GO 2063
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2051: LD_VAR 0 3
2055: PPUSH
2056: LD_INT 209
2058: PPUSH
2059: CALL_OW 52
// end ;
2063: GO 1885
2065: POP
2066: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2067: LD_INT 0
2069: PPUSH
2070: LD_INT 1
2072: PPUSH
2073: LD_INT 1
2075: PPUSH
2076: LD_INT 3
2078: PPUSH
2079: CALL_OW 12
2083: PPUSH
2084: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2088: CALL_OW 44
2092: PPUSH
2093: LD_INT 209
2095: PPUSH
2096: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2100: LD_ADDR_VAR 0 2
2104: PUSH
2105: DOUBLE
2106: LD_INT 1
2108: DEC
2109: ST_TO_ADDR
2110: LD_EXP 48
2114: PUSH
2115: LD_INT 2
2117: ARRAY
2118: PUSH
2119: FOR_TO
2120: IFFALSE 2183
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2122: LD_INT 0
2124: PPUSH
2125: LD_INT 2
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 3
2133: PPUSH
2134: CALL_OW 12
2138: PPUSH
2139: CALL_OW 380
// un = CreateHuman ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: CALL_OW 44
2152: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2153: LD_ADDR_EXP 66
2157: PUSH
2158: LD_EXP 66
2162: PUSH
2163: LD_VAR 0 3
2167: ADD
2168: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2169: LD_VAR 0 3
2173: PPUSH
2174: LD_INT 71
2176: PPUSH
2177: CALL_OW 52
// end ;
2181: GO 2119
2183: POP
2184: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: DOUBLE
2191: LD_INT 1
2193: DEC
2194: ST_TO_ADDR
2195: LD_EXP 48
2199: PUSH
2200: LD_INT 3
2202: ARRAY
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2268
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 3
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: LD_INT 3
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2238: LD_ADDR_EXP 66
2242: PUSH
2243: LD_EXP 66
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_INT 71
2261: PPUSH
2262: CALL_OW 52
// end ;
2266: GO 2204
2268: POP
2269: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_EXP 48
2284: PUSH
2285: LD_INT 4
2287: ARRAY
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2353
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2292: LD_INT 0
2294: PPUSH
2295: LD_INT 4
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: LD_INT 3
2303: PPUSH
2304: CALL_OW 12
2308: PPUSH
2309: CALL_OW 380
// un = CreateHuman ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: CALL_OW 44
2322: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2323: LD_ADDR_EXP 66
2327: PUSH
2328: LD_EXP 66
2332: PUSH
2333: LD_VAR 0 3
2337: ADD
2338: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2339: LD_VAR 0 3
2343: PPUSH
2344: LD_INT 83
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2289
2353: POP
2354: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2355: LD_INT 6
2357: PPUSH
2358: LD_INT 83
2360: PPUSH
2361: LD_INT 3
2363: PPUSH
2364: CALL 4796 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2368: LD_STRING 01_Gnyevko
2370: PPUSH
2371: CALL_OW 28
2375: NOT
2376: IFFALSE 2419
// begin PrepareMechanic ( sex_male , 3 ) ;
2378: LD_INT 1
2380: PPUSH
2381: LD_INT 3
2383: PPUSH
2384: CALL_OW 383
// randomMech = CreateHuman ;
2388: LD_ADDR_EXP 68
2392: PUSH
2393: CALL_OW 44
2397: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2398: LD_EXP 68
2402: PPUSH
2403: LD_INT 161
2405: PPUSH
2406: LD_INT 108
2408: PPUSH
2409: LD_INT 6
2411: PPUSH
2412: LD_INT 0
2414: PPUSH
2415: CALL_OW 50
// end ; if not belkovReturn then
2419: LD_EXP 6
2423: NOT
2424: IFFALSE 2438
// PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2426: LD_EXP 65
2430: PPUSH
2431: LD_INT 95
2433: PPUSH
2434: CALL_OW 52
// end ;
2438: LD_VAR 0 1
2442: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2443: LD_INT 0
2445: PPUSH
2446: PPUSH
2447: PPUSH
2448: PPUSH
2449: PPUSH
// SetBName ( beria , beria ) ;
2450: LD_INT 106
2452: PPUSH
2453: LD_STRING beria
2455: PPUSH
2456: CALL_OW 500
// uc_side = 6 ;
2460: LD_ADDR_OWVAR 20
2464: PUSH
2465: LD_INT 6
2467: ST_TO_ADDR
// uc_nation = 3 ;
2468: LD_ADDR_OWVAR 21
2472: PUSH
2473: LD_INT 3
2475: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2476: LD_ADDR_EXP 73
2480: PUSH
2481: LD_STRING Platonov
2483: PPUSH
2484: LD_INT 0
2486: PPUSH
2487: CALL 3981 0 2
2491: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2492: LD_EXP 73
2496: PPUSH
2497: LD_INT 112
2499: PPUSH
2500: LD_INT 97
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 48
// ComHold ( Platonov ) ;
2510: LD_EXP 73
2514: PPUSH
2515: CALL_OW 140
// platSoldiers = [ ] ;
2519: LD_ADDR_EXP 74
2523: PUSH
2524: EMPTY
2525: ST_TO_ADDR
// unitsTemp = [ ] ;
2526: LD_ADDR_VAR 0 4
2530: PUSH
2531: EMPTY
2532: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2533: LD_ADDR_EXP 75
2537: PUSH
2538: LD_STRING Kuklajs
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL 3981 0 2
2548: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2549: LD_ADDR_EXP 74
2553: PUSH
2554: LD_EXP 74
2558: PUSH
2559: LD_EXP 75
2563: ADD
2564: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2565: LD_EXP 75
2569: PPUSH
2570: LD_INT 110
2572: PPUSH
2573: LD_INT 97
2575: PPUSH
2576: LD_INT 6
2578: PPUSH
2579: LD_INT 0
2581: PPUSH
2582: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2586: LD_ADDR_EXP 76
2590: PUSH
2591: LD_STRING Benko
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL 3981 0 2
2601: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2602: LD_ADDR_EXP 74
2606: PUSH
2607: LD_EXP 74
2611: PUSH
2612: LD_EXP 76
2616: ADD
2617: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2618: LD_ADDR_VAR 0 4
2622: PUSH
2623: LD_VAR 0 4
2627: PUSH
2628: LD_EXP 76
2632: ADD
2633: ST_TO_ADDR
// for i := 1 to 2 do
2634: LD_ADDR_VAR 0 2
2638: PUSH
2639: DOUBLE
2640: LD_INT 1
2642: DEC
2643: ST_TO_ADDR
2644: LD_INT 2
2646: PUSH
2647: FOR_TO
2648: IFFALSE 2715
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2650: LD_INT 0
2652: PPUSH
2653: LD_INT 1
2655: PPUSH
2656: LD_INT 1
2658: PPUSH
2659: LD_INT 3
2661: PPUSH
2662: CALL_OW 12
2666: PPUSH
2667: CALL_OW 380
// un = CreateHuman ;
2671: LD_ADDR_VAR 0 3
2675: PUSH
2676: CALL_OW 44
2680: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2681: LD_ADDR_EXP 74
2685: PUSH
2686: LD_EXP 74
2690: PUSH
2691: LD_VAR 0 3
2695: ADD
2696: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2697: LD_ADDR_VAR 0 4
2701: PUSH
2702: LD_VAR 0 4
2706: PUSH
2707: LD_VAR 0 3
2711: ADD
2712: ST_TO_ADDR
// end ;
2713: GO 2647
2715: POP
2716: POP
// for i := 1 to unitsTemp do
2717: LD_ADDR_VAR 0 2
2721: PUSH
2722: DOUBLE
2723: LD_INT 1
2725: DEC
2726: ST_TO_ADDR
2727: LD_VAR 0 4
2731: PUSH
2732: FOR_TO
2733: IFFALSE 2821
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2735: LD_ADDR_VAR 0 5
2739: PUSH
2740: LD_INT 8
2742: PPUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 6
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 30
2755: PUSH
2756: LD_INT 31
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 70
2771: PUSH
2772: LD_VAR 0 2
2776: ARRAY
2777: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2778: LD_VAR 0 4
2782: PUSH
2783: LD_VAR 0 2
2787: ARRAY
2788: PPUSH
2789: LD_VAR 0 5
2793: PPUSH
2794: CALL_OW 250
2798: PPUSH
2799: LD_VAR 0 5
2803: PPUSH
2804: CALL_OW 251
2808: PPUSH
2809: LD_INT 2
2811: PPUSH
2812: LD_INT 0
2814: PPUSH
2815: CALL_OW 50
// end ;
2819: GO 2732
2821: POP
2822: POP
// end ; end_of_file
2823: LD_VAR 0 1
2827: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2828: LD_INT 0
2830: PPUSH
// PrepareTrap ;
2831: CALL 2844 0 0
// PrepareBunkiers ;
2835: CALL 3436 0 0
// end ;
2839: LD_VAR 0 1
2843: RET
// function PrepareTrap ; var i , un ; begin
2844: LD_INT 0
2846: PPUSH
2847: PPUSH
2848: PPUSH
// trapTeam = [ ] ;
2849: LD_ADDR_EXP 78
2853: PUSH
2854: EMPTY
2855: ST_TO_ADDR
// uc_nation = 1 ;
2856: LD_ADDR_OWVAR 21
2860: PUSH
2861: LD_INT 1
2863: ST_TO_ADDR
// uc_side = 1 ;
2864: LD_ADDR_OWVAR 20
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// hc_gallery =  ;
2872: LD_ADDR_OWVAR 33
2876: PUSH
2877: LD_STRING 
2879: ST_TO_ADDR
// hc_name = profile_name ;
2880: LD_ADDR_OWVAR 26
2884: PUSH
2885: LD_OWVAR 78
2889: ST_TO_ADDR
// hc_importance = 100 ;
2890: LD_ADDR_OWVAR 32
2894: PUSH
2895: LD_INT 100
2897: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 1
2903: PPUSH
2904: LD_EXP 56
2908: PUSH
2909: LD_INT 1
2911: PLUS
2912: PPUSH
2913: CALL_OW 380
// trapCommander = CreateHuman ;
2917: LD_ADDR_EXP 77
2921: PUSH
2922: CALL_OW 44
2926: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2927: LD_EXP 77
2931: PPUSH
2932: LD_INT 13
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2942: LD_EXP 77
2946: PPUSH
2947: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2951: LD_ADDR_EXP 78
2955: PUSH
2956: LD_EXP 78
2960: PUSH
2961: LD_EXP 77
2965: ADD
2966: ST_TO_ADDR
// hc_importance = 0 ;
2967: LD_ADDR_OWVAR 32
2971: PUSH
2972: LD_INT 0
2974: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_EXP 57
2989: PUSH
2990: LD_INT 1
2992: ARRAY
2993: PUSH
2994: FOR_TO
2995: IFFALSE 3087
// begin hc_name =  ;
2997: LD_ADDR_OWVAR 26
3001: PUSH
3002: LD_STRING 
3004: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3005: LD_INT 0
3007: PPUSH
3008: LD_INT 1
3010: PPUSH
3011: LD_EXP 56
3015: PPUSH
3016: CALL_OW 380
// un = CreateHuman ;
3020: LD_ADDR_VAR 0 3
3024: PUSH
3025: CALL_OW 44
3029: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3030: LD_VAR 0 3
3034: PPUSH
3035: LD_INT 12
3037: PPUSH
3038: LD_INT 0
3040: PPUSH
3041: CALL_OW 49
// ComCrawl ( un ) ;
3045: LD_VAR 0 3
3049: PPUSH
3050: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3054: LD_VAR 0 3
3058: PPUSH
3059: LD_INT 116
3061: PPUSH
3062: LD_INT 21
3064: PPUSH
3065: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3069: LD_ADDR_EXP 78
3073: PUSH
3074: LD_EXP 78
3078: PUSH
3079: LD_VAR 0 3
3083: ADD
3084: ST_TO_ADDR
// end ;
3085: GO 2994
3087: POP
3088: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3089: LD_ADDR_VAR 0 2
3093: PUSH
3094: DOUBLE
3095: LD_INT 1
3097: DEC
3098: ST_TO_ADDR
3099: LD_EXP 57
3103: PUSH
3104: LD_INT 2
3106: ARRAY
3107: PUSH
3108: FOR_TO
3109: IFFALSE 3201
// begin hc_name =  ;
3111: LD_ADDR_OWVAR 26
3115: PUSH
3116: LD_STRING 
3118: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_EXP 56
3129: PPUSH
3130: CALL_OW 380
// un = CreateHuman ;
3134: LD_ADDR_VAR 0 3
3138: PUSH
3139: CALL_OW 44
3143: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3144: LD_VAR 0 3
3148: PPUSH
3149: LD_INT 14
3151: PPUSH
3152: LD_INT 0
3154: PPUSH
3155: CALL_OW 49
// ComCrawl ( un ) ;
3159: LD_VAR 0 3
3163: PPUSH
3164: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3168: LD_VAR 0 3
3172: PPUSH
3173: LD_INT 116
3175: PPUSH
3176: LD_INT 21
3178: PPUSH
3179: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3183: LD_ADDR_EXP 78
3187: PUSH
3188: LD_EXP 78
3192: PUSH
3193: LD_VAR 0 3
3197: ADD
3198: ST_TO_ADDR
// end ;
3199: GO 3108
3201: POP
3202: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3203: LD_ADDR_VAR 0 2
3207: PUSH
3208: DOUBLE
3209: LD_INT 1
3211: DEC
3212: ST_TO_ADDR
3213: LD_EXP 57
3217: PUSH
3218: LD_INT 3
3220: ARRAY
3221: PUSH
3222: FOR_TO
3223: IFFALSE 3315
// begin hc_name =  ;
3225: LD_ADDR_OWVAR 26
3229: PUSH
3230: LD_STRING 
3232: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3233: LD_INT 0
3235: PPUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_EXP 56
3243: PPUSH
3244: CALL_OW 380
// un = CreateHuman ;
3248: LD_ADDR_VAR 0 3
3252: PUSH
3253: CALL_OW 44
3257: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3258: LD_VAR 0 3
3262: PPUSH
3263: LD_INT 23
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// ComCrawl ( un ) ;
3273: LD_VAR 0 3
3277: PPUSH
3278: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3282: LD_VAR 0 3
3286: PPUSH
3287: LD_INT 109
3289: PPUSH
3290: LD_INT 8
3292: PPUSH
3293: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3297: LD_ADDR_EXP 78
3301: PUSH
3302: LD_EXP 78
3306: PUSH
3307: LD_VAR 0 3
3311: ADD
3312: ST_TO_ADDR
// end ;
3313: GO 3222
3315: POP
3316: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3317: LD_ADDR_VAR 0 2
3321: PUSH
3322: DOUBLE
3323: LD_INT 1
3325: DEC
3326: ST_TO_ADDR
3327: LD_EXP 57
3331: PUSH
3332: LD_INT 4
3334: ARRAY
3335: PUSH
3336: FOR_TO
3337: IFFALSE 3429
// begin hc_name =  ;
3339: LD_ADDR_OWVAR 26
3343: PUSH
3344: LD_STRING 
3346: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3347: LD_INT 0
3349: PPUSH
3350: LD_INT 1
3352: PPUSH
3353: LD_EXP 56
3357: PPUSH
3358: CALL_OW 380
// un = CreateHuman ;
3362: LD_ADDR_VAR 0 3
3366: PUSH
3367: CALL_OW 44
3371: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3372: LD_VAR 0 3
3376: PPUSH
3377: LD_INT 24
3379: PPUSH
3380: LD_INT 0
3382: PPUSH
3383: CALL_OW 49
// ComCrawl ( un ) ;
3387: LD_VAR 0 3
3391: PPUSH
3392: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3396: LD_VAR 0 3
3400: PPUSH
3401: LD_INT 109
3403: PPUSH
3404: LD_INT 8
3406: PPUSH
3407: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3411: LD_ADDR_EXP 78
3415: PUSH
3416: LD_EXP 78
3420: PUSH
3421: LD_VAR 0 3
3425: ADD
3426: ST_TO_ADDR
// end ;
3427: GO 3336
3429: POP
3430: POP
// end ;
3431: LD_VAR 0 1
3435: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3436: LD_INT 0
3438: PPUSH
3439: PPUSH
3440: PPUSH
3441: PPUSH
// uc_side = 1 ;
3442: LD_ADDR_OWVAR 20
3446: PUSH
3447: LD_INT 1
3449: ST_TO_ADDR
// uc_nation = nation_american ;
3450: LD_ADDR_OWVAR 21
3454: PUSH
3455: LD_INT 1
3457: ST_TO_ADDR
// bc_level = 1 ;
3458: LD_ADDR_OWVAR 43
3462: PUSH
3463: LD_INT 1
3465: ST_TO_ADDR
// bc_type = b_breastwork ;
3466: LD_ADDR_OWVAR 42
3470: PUSH
3471: LD_INT 31
3473: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3474: LD_ADDR_VAR 0 4
3478: PUSH
3479: LD_INT 104
3481: PPUSH
3482: LD_INT 59
3484: PPUSH
3485: LD_INT 4
3487: PPUSH
3488: CALL_OW 47
3492: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3493: LD_ADDR_EXP 79
3497: PUSH
3498: LD_EXP 79
3502: PUSH
3503: LD_VAR 0 4
3507: ADD
3508: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3509: LD_EXP 56
3513: PPUSH
3514: LD_VAR 0 4
3518: PPUSH
3519: CALL 5037 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 101
3530: PPUSH
3531: LD_INT 55
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 47
3541: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3542: LD_ADDR_EXP 79
3546: PUSH
3547: LD_EXP 79
3551: PUSH
3552: LD_VAR 0 4
3556: ADD
3557: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3558: LD_EXP 56
3562: PPUSH
3563: LD_VAR 0 4
3567: PPUSH
3568: CALL 5037 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 132
3579: PPUSH
3580: LD_INT 62
3582: PPUSH
3583: LD_INT 1
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3591: LD_ADDR_EXP 80
3595: PUSH
3596: LD_EXP 80
3600: PUSH
3601: LD_VAR 0 4
3605: ADD
3606: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3607: LD_EXP 56
3611: PPUSH
3612: LD_VAR 0 4
3616: PPUSH
3617: CALL 5037 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 134
3628: PPUSH
3629: LD_INT 66
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 47
3639: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3640: LD_ADDR_EXP 80
3644: PUSH
3645: LD_EXP 80
3649: PUSH
3650: LD_VAR 0 4
3654: ADD
3655: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3656: LD_EXP 56
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: CALL 5037 0 2
// bc_type = b_depot ;
3670: LD_ADDR_OWVAR 42
3674: PUSH
3675: LD_INT 0
3677: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3678: LD_ADDR_EXP 81
3682: PUSH
3683: LD_INT 92
3685: PPUSH
3686: LD_INT 51
3688: PPUSH
3689: LD_INT 2
3691: PPUSH
3692: CALL_OW 47
3696: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3697: LD_ADDR_EXP 82
3701: PUSH
3702: LD_INT 193
3704: ST_TO_ADDR
// amLeftEngs = [ ] ;
3705: LD_ADDR_EXP 83
3709: PUSH
3710: EMPTY
3711: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3712: LD_ADDR_VAR 0 2
3716: PUSH
3717: DOUBLE
3718: LD_INT 1
3720: DEC
3721: ST_TO_ADDR
3722: LD_INT 1
3724: PUSH
3725: LD_INT 1
3727: PUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 2
3733: PPUSH
3734: CALL_OW 12
3738: PUSH
3739: EMPTY
3740: LIST
3741: LIST
3742: LIST
3743: PUSH
3744: LD_OWVAR 67
3748: ARRAY
3749: PUSH
3750: FOR_TO
3751: IFFALSE 3842
// begin uc_nation = 1 ;
3753: LD_ADDR_OWVAR 21
3757: PUSH
3758: LD_INT 1
3760: ST_TO_ADDR
// uc_side = 1 ;
3761: LD_ADDR_OWVAR 20
3765: PUSH
3766: LD_INT 1
3768: ST_TO_ADDR
// hc_gallery =  ;
3769: LD_ADDR_OWVAR 33
3773: PUSH
3774: LD_STRING 
3776: ST_TO_ADDR
// hc_name =  ;
3777: LD_ADDR_OWVAR 26
3781: PUSH
3782: LD_STRING 
3784: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3785: LD_INT 0
3787: PPUSH
3788: LD_INT 2
3790: PPUSH
3791: LD_EXP 56
3795: PPUSH
3796: CALL_OW 380
// un = CreateHuman ;
3800: LD_ADDR_VAR 0 3
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3810: LD_ADDR_EXP 83
3814: PUSH
3815: LD_EXP 83
3819: PUSH
3820: LD_VAR 0 3
3824: ADD
3825: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3826: LD_VAR 0 3
3830: PPUSH
3831: LD_EXP 81
3835: PPUSH
3836: CALL_OW 52
// end ;
3840: GO 3750
3842: POP
3843: POP
// if Difficulty = 3 then
3844: LD_OWVAR 67
3848: PUSH
3849: LD_INT 3
3851: EQUAL
3852: IFFALSE 3976
// begin amRightEngs = [ ] ;
3854: LD_ADDR_EXP 84
3858: PUSH
3859: EMPTY
3860: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: DOUBLE
3867: LD_INT 1
3869: DEC
3870: ST_TO_ADDR
3871: LD_INT 1
3873: PPUSH
3874: LD_INT 2
3876: PPUSH
3877: CALL_OW 12
3881: PUSH
3882: FOR_TO
3883: IFFALSE 3974
// begin uc_nation = 1 ;
3885: LD_ADDR_OWVAR 21
3889: PUSH
3890: LD_INT 1
3892: ST_TO_ADDR
// uc_side = 1 ;
3893: LD_ADDR_OWVAR 20
3897: PUSH
3898: LD_INT 1
3900: ST_TO_ADDR
// hc_gallery =  ;
3901: LD_ADDR_OWVAR 33
3905: PUSH
3906: LD_STRING 
3908: ST_TO_ADDR
// hc_name =  ;
3909: LD_ADDR_OWVAR 26
3913: PUSH
3914: LD_STRING 
3916: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3917: LD_INT 0
3919: PPUSH
3920: LD_INT 2
3922: PPUSH
3923: LD_EXP 56
3927: PPUSH
3928: CALL_OW 380
// un = CreateHuman ;
3932: LD_ADDR_VAR 0 3
3936: PUSH
3937: CALL_OW 44
3941: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3942: LD_ADDR_EXP 84
3946: PUSH
3947: LD_EXP 84
3951: PUSH
3952: LD_VAR 0 3
3956: ADD
3957: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3958: LD_VAR 0 3
3962: PPUSH
3963: LD_EXP 82
3967: PPUSH
3968: CALL_OW 52
// end ;
3972: GO 3882
3974: POP
3975: POP
// end ; end ; end_of_file
3976: LD_VAR 0 1
3980: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3981: LD_INT 0
3983: PPUSH
3984: PPUSH
// if exist_mode then
3985: LD_VAR 0 2
3989: IFFALSE 4014
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3991: LD_ADDR_VAR 0 4
3995: PUSH
3996: LD_EXP 46
4000: PUSH
4001: LD_VAR 0 1
4005: STR
4006: PPUSH
4007: CALL_OW 34
4011: ST_TO_ADDR
4012: GO 4029
// unit := NewCharacter ( ident ) ;
4014: LD_ADDR_VAR 0 4
4018: PUSH
4019: LD_VAR 0 1
4023: PPUSH
4024: CALL_OW 25
4028: ST_TO_ADDR
// result := unit ;
4029: LD_ADDR_VAR 0 3
4033: PUSH
4034: LD_VAR 0 4
4038: ST_TO_ADDR
// end ;
4039: LD_VAR 0 3
4043: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4044: LD_INT 0
4046: PPUSH
4047: PPUSH
4048: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4049: LD_ADDR_VAR 0 1
4053: PUSH
4054: LD_VAR 0 1
4058: PUSH
4059: LD_EXP 59
4063: PUSH
4064: LD_EXP 60
4068: PUSH
4069: LD_EXP 61
4073: PUSH
4074: LD_EXP 62
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: DIFF
4085: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4086: LD_ADDR_VAR 0 7
4090: PUSH
4091: LD_VAR 0 1
4095: PUSH
4096: LD_INT 1
4098: PPUSH
4099: LD_VAR 0 1
4103: PPUSH
4104: CALL_OW 12
4108: ARRAY
4109: ST_TO_ADDR
// if radio then
4110: LD_VAR 0 4
4114: IFFALSE 4163
// begin if GetSex ( speaker ) = sex_male then
4116: LD_VAR 0 7
4120: PPUSH
4121: CALL_OW 258
4125: PUSH
4126: LD_INT 1
4128: EQUAL
4129: IFFALSE 4147
// SayRadio ( speaker , dialogMID ) else
4131: LD_VAR 0 7
4135: PPUSH
4136: LD_VAR 0 2
4140: PPUSH
4141: CALL_OW 94
4145: GO 4161
// SayRadio ( speaker , dialogFID ) ;
4147: LD_VAR 0 7
4151: PPUSH
4152: LD_VAR 0 3
4156: PPUSH
4157: CALL_OW 94
// end else
4161: GO 4208
// begin if GetSex ( speaker ) = sex_male then
4163: LD_VAR 0 7
4167: PPUSH
4168: CALL_OW 258
4172: PUSH
4173: LD_INT 1
4175: EQUAL
4176: IFFALSE 4194
// Say ( speaker , dialogMID ) else
4178: LD_VAR 0 7
4182: PPUSH
4183: LD_VAR 0 2
4187: PPUSH
4188: CALL_OW 88
4192: GO 4208
// Say ( speaker , dialogFID ) ;
4194: LD_VAR 0 7
4198: PPUSH
4199: LD_VAR 0 3
4203: PPUSH
4204: CALL_OW 88
// end ; result := speaker ;
4208: LD_ADDR_VAR 0 5
4212: PUSH
4213: LD_VAR 0 7
4217: ST_TO_ADDR
// end ;
4218: LD_VAR 0 5
4222: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4223: LD_INT 0
4225: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4226: LD_VAR 0 1
4230: PPUSH
4231: CALL_OW 255
4235: PUSH
4236: LD_VAR 0 3
4240: EQUAL
4241: PUSH
4242: LD_VAR 0 1
4246: PPUSH
4247: CALL_OW 302
4251: AND
4252: IFFALSE 4274
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4254: LD_VAR 0 1
4258: PPUSH
4259: LD_EXP 45
4263: PUSH
4264: LD_VAR 0 2
4268: STR
4269: PPUSH
4270: CALL_OW 38
// end ;
4274: LD_VAR 0 4
4278: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4279: LD_INT 0
4281: PPUSH
4282: PPUSH
4283: PPUSH
// resultCharactersToSave = [ ] ;
4284: LD_ADDR_VAR 0 6
4288: PUSH
4289: EMPTY
4290: ST_TO_ADDR
// for unit in characters do
4291: LD_ADDR_VAR 0 5
4295: PUSH
4296: LD_VAR 0 1
4300: PUSH
4301: FOR_IN
4302: IFFALSE 4350
// if GetSide ( unit ) = side and IsOK ( unit ) then
4304: LD_VAR 0 5
4308: PPUSH
4309: CALL_OW 255
4313: PUSH
4314: LD_VAR 0 3
4318: EQUAL
4319: PUSH
4320: LD_VAR 0 5
4324: PPUSH
4325: CALL_OW 302
4329: AND
4330: IFFALSE 4348
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4332: LD_ADDR_VAR 0 6
4336: PUSH
4337: LD_VAR 0 6
4341: PUSH
4342: LD_VAR 0 5
4346: ADD
4347: ST_TO_ADDR
4348: GO 4301
4350: POP
4351: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4352: LD_VAR 0 6
4356: PPUSH
4357: LD_EXP 45
4361: PUSH
4362: LD_VAR 0 2
4366: STR
4367: PPUSH
4368: CALL_OW 38
// end ;
4372: LD_VAR 0 4
4376: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4377: LD_INT 0
4379: PPUSH
4380: PPUSH
4381: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4382: LD_ADDR_VAR 0 3
4386: PUSH
4387: LD_STRING QMoreInfo
4389: PPUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL_OW 98
4399: ST_TO_ADDR
// case dec of 1 :
4400: LD_VAR 0 3
4404: PUSH
4405: LD_INT 1
4407: DOUBLE
4408: EQUAL
4409: IFTRUE 4413
4411: GO 4473
4413: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4414: LD_EXP 59
4418: PPUSH
4419: LD_STRING D2a-Bur-1
4421: PPUSH
4422: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4426: LD_EXP 73
4430: PPUSH
4431: LD_STRING D2a-Pla-1
4433: PPUSH
4434: CALL_OW 88
// q1 = q diff 1 ;
4438: LD_ADDR_VAR 0 4
4442: PUSH
4443: LD_VAR 0 1
4447: PUSH
4448: LD_INT 1
4450: DIFF
4451: ST_TO_ADDR
// if q1 >= 2 then
4452: LD_VAR 0 4
4456: PUSH
4457: LD_INT 2
4459: GREATEREQUAL
4460: IFFALSE 4471
// Question1 ( q1 ) ;
4462: LD_VAR 0 4
4466: PPUSH
4467: CALL 4377 0 1
// end ; 2 :
4471: GO 4610
4473: LD_INT 2
4475: DOUBLE
4476: EQUAL
4477: IFTRUE 4481
4479: GO 4541
4481: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4482: LD_EXP 59
4486: PPUSH
4487: LD_STRING D2b-Bur-1
4489: PPUSH
4490: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4494: LD_EXP 73
4498: PPUSH
4499: LD_STRING D2b-Pla-1
4501: PPUSH
4502: CALL_OW 88
// q1 = q diff 2 ;
4506: LD_ADDR_VAR 0 4
4510: PUSH
4511: LD_VAR 0 1
4515: PUSH
4516: LD_INT 2
4518: DIFF
4519: ST_TO_ADDR
// if q1 >= 2 then
4520: LD_VAR 0 4
4524: PUSH
4525: LD_INT 2
4527: GREATEREQUAL
4528: IFFALSE 4539
// Question1 ( q1 ) ;
4530: LD_VAR 0 4
4534: PPUSH
4535: CALL 4377 0 1
// end ; 3 :
4539: GO 4610
4541: LD_INT 3
4543: DOUBLE
4544: EQUAL
4545: IFTRUE 4549
4547: GO 4609
4549: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4550: LD_EXP 59
4554: PPUSH
4555: LD_STRING D2c-Bur-1
4557: PPUSH
4558: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4562: LD_EXP 73
4566: PPUSH
4567: LD_STRING D2c-Pla-1
4569: PPUSH
4570: CALL_OW 88
// q1 = q diff 3 ;
4574: LD_ADDR_VAR 0 4
4578: PUSH
4579: LD_VAR 0 1
4583: PUSH
4584: LD_INT 3
4586: DIFF
4587: ST_TO_ADDR
// if q1 >= 2 then
4588: LD_VAR 0 4
4592: PUSH
4593: LD_INT 2
4595: GREATEREQUAL
4596: IFFALSE 4607
// Question1 ( q1 ) ;
4598: LD_VAR 0 4
4602: PPUSH
4603: CALL 4377 0 1
// end ; end ;
4607: GO 4610
4609: POP
// end ;
4610: LD_VAR 0 2
4614: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4615: LD_INT 0
4617: PPUSH
4618: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4619: LD_VAR 0 1
4623: PPUSH
4624: CALL_OW 302
4628: NOT
4629: PUSH
4630: LD_VAR 0 2
4634: PPUSH
4635: CALL_OW 302
4639: NOT
4640: OR
4641: PUSH
4642: LD_VAR 0 3
4646: PPUSH
4647: CALL_OW 302
4651: NOT
4652: OR
4653: PUSH
4654: LD_VAR 0 3
4658: PPUSH
4659: CALL_OW 261
4663: PUSH
4664: LD_INT 100
4666: EQUAL
4667: OR
4668: IFFALSE 4672
// exit ;
4670: GO 4791
// AddComTransport ( engineer , depot , mat_oil ) ;
4672: LD_VAR 0 1
4676: PPUSH
4677: LD_VAR 0 2
4681: PPUSH
4682: LD_INT 2
4684: PPUSH
4685: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until Carry ( engineer ) ;
4696: LD_VAR 0 1
4700: PPUSH
4701: CALL_OW 281
4705: IFFALSE 4689
// RemoveTasks ( engineer ) ;
4707: LD_VAR 0 1
4711: PPUSH
4712: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4716: LD_VAR 0 1
4720: PPUSH
4721: LD_STRING O
4723: PUSH
4724: LD_INT 0
4726: PUSH
4727: LD_INT 0
4729: PUSH
4730: LD_VAR 0 3
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: LD_INT 0
4740: PUSH
4741: LD_INT 0
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PUSH
4753: EMPTY
4754: LIST
4755: PPUSH
4756: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4760: LD_INT 35
4762: PPUSH
4763: CALL_OW 67
// until not Carry ( engineer ) ;
4767: LD_VAR 0 1
4771: PPUSH
4772: CALL_OW 281
4776: NOT
4777: IFFALSE 4760
// SetFuel ( vehicle , 100 ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 100
4786: PPUSH
4787: CALL_OW 240
// end ;
4791: LD_VAR 0 4
4795: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4796: LD_INT 0
4798: PPUSH
4799: PPUSH
4800: PPUSH
4801: PPUSH
4802: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4803: LD_ADDR_VAR 0 8
4807: PUSH
4808: LD_INT 48
4810: PUSH
4811: LD_INT 49
4813: PUSH
4814: LD_INT 50
4816: PUSH
4817: LD_INT 20
4819: PUSH
4820: LD_INT 1
4822: PUSH
4823: LD_INT 51
4825: PUSH
4826: LD_INT 52
4828: PUSH
4829: LD_INT 69
4831: PUSH
4832: LD_INT 39
4834: PUSH
4835: LD_INT 34
4837: PUSH
4838: LD_INT 40
4840: PUSH
4841: LD_INT 53
4843: PUSH
4844: LD_INT 71
4846: PUSH
4847: LD_INT 57
4849: PUSH
4850: LD_INT 58
4852: PUSH
4853: LD_INT 44
4855: PUSH
4856: LD_INT 32
4858: PUSH
4859: LD_INT 27
4861: PUSH
4862: LD_INT 23
4864: PUSH
4865: LD_INT 33
4867: PUSH
4868: LD_INT 59
4870: PUSH
4871: LD_INT 54
4873: PUSH
4874: LD_INT 55
4876: PUSH
4877: LD_INT 56
4879: PUSH
4880: LD_INT 63
4882: PUSH
4883: LD_INT 64
4885: PUSH
4886: LD_INT 65
4888: PUSH
4889: LD_INT 30
4891: PUSH
4892: LD_INT 31
4894: PUSH
4895: LD_INT 21
4897: PUSH
4898: LD_INT 22
4900: PUSH
4901: LD_INT 25
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4938: LD_ADDR_VAR 0 5
4942: PUSH
4943: DOUBLE
4944: LD_INT 1
4946: DEC
4947: ST_TO_ADDR
4948: LD_VAR 0 8
4952: PUSH
4953: FOR_TO
4954: IFFALSE 5030
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4956: LD_VAR 0 8
4960: PUSH
4961: LD_VAR 0 5
4965: ARRAY
4966: PPUSH
4967: LD_VAR 0 1
4971: PPUSH
4972: CALL_OW 321
4976: PUSH
4977: LD_INT 1
4979: EQUAL
4980: PUSH
4981: LD_VAR 0 8
4985: PUSH
4986: LD_VAR 0 5
4990: ARRAY
4991: PPUSH
4992: LD_VAR 0 3
4996: PPUSH
4997: CALL_OW 482
5001: PUSH
5002: LD_INT 1
5004: EQUAL
5005: AND
5006: IFFALSE 5028
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5008: LD_VAR 0 2
5012: PPUSH
5013: LD_VAR 0 8
5017: PUSH
5018: LD_VAR 0 5
5022: ARRAY
5023: PPUSH
5024: CALL_OW 184
5028: GO 4953
5030: POP
5031: POP
// end ;
5032: LD_VAR 0 4
5036: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5037: LD_INT 0
5039: PPUSH
5040: PPUSH
5041: PPUSH
// uc_side := GetSide ( b ) ;
5042: LD_ADDR_OWVAR 20
5046: PUSH
5047: LD_VAR 0 2
5051: PPUSH
5052: CALL_OW 255
5056: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5057: LD_ADDR_OWVAR 21
5061: PUSH
5062: LD_VAR 0 2
5066: PPUSH
5067: CALL_OW 248
5071: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5072: LD_INT 0
5074: PPUSH
5075: LD_INT 1
5077: PPUSH
5078: LD_VAR 0 1
5082: PPUSH
5083: CALL_OW 380
// un = CreateHuman ;
5087: LD_ADDR_VAR 0 4
5091: PUSH
5092: CALL_OW 44
5096: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5097: LD_ADDR_VAR 0 5
5101: PUSH
5102: LD_VAR 0 2
5106: PPUSH
5107: CALL_OW 254
5111: PUSH
5112: LD_INT 3
5114: MINUS
5115: ST_TO_ADDR
// if dir < 0 then
5116: LD_VAR 0 5
5120: PUSH
5121: LD_INT 0
5123: LESS
5124: IFFALSE 5140
// dir := 6 + dir ;
5126: LD_ADDR_VAR 0 5
5130: PUSH
5131: LD_INT 6
5133: PUSH
5134: LD_VAR 0 5
5138: PLUS
5139: ST_TO_ADDR
// SetDir ( un , dir ) ;
5140: LD_VAR 0 4
5144: PPUSH
5145: LD_VAR 0 5
5149: PPUSH
5150: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5154: LD_VAR 0 4
5158: PPUSH
5159: LD_VAR 0 2
5163: PPUSH
5164: CALL_OW 52
// result = un ;
5168: LD_ADDR_VAR 0 3
5172: PUSH
5173: LD_VAR 0 4
5177: ST_TO_ADDR
// end ;
5178: LD_VAR 0 3
5182: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5183: LD_INT 0
5185: PPUSH
5186: PPUSH
// dir := GetDir ( b ) - 3 ;
5187: LD_ADDR_VAR 0 4
5191: PUSH
5192: LD_VAR 0 2
5196: PPUSH
5197: CALL_OW 254
5201: PUSH
5202: LD_INT 3
5204: MINUS
5205: ST_TO_ADDR
// if dir < 0 then
5206: LD_VAR 0 4
5210: PUSH
5211: LD_INT 0
5213: LESS
5214: IFFALSE 5230
// dir := 6 + dir ;
5216: LD_ADDR_VAR 0 4
5220: PUSH
5221: LD_INT 6
5223: PUSH
5224: LD_VAR 0 4
5228: PLUS
5229: ST_TO_ADDR
// SetDir ( un , dir ) ;
5230: LD_VAR 0 1
5234: PPUSH
5235: LD_VAR 0 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5244: LD_VAR 0 1
5248: PPUSH
5249: LD_VAR 0 2
5253: PPUSH
5254: CALL_OW 52
// result = un ;
5258: LD_ADDR_VAR 0 3
5262: PUSH
5263: LD_VAR 0 1
5267: ST_TO_ADDR
// end ;
5268: LD_VAR 0 3
5272: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5273: LD_INT 0
5275: PPUSH
5276: PPUSH
5277: PPUSH
// tmp = [ ] ;
5278: LD_ADDR_VAR 0 5
5282: PUSH
5283: EMPTY
5284: ST_TO_ADDR
// if not vehicles then
5285: LD_VAR 0 1
5289: NOT
5290: IFFALSE 5294
// exit ;
5292: GO 5411
// for i in vehicles do
5294: LD_ADDR_VAR 0 4
5298: PUSH
5299: LD_VAR 0 1
5303: PUSH
5304: FOR_IN
5305: IFFALSE 5395
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5307: LD_ADDR_VAR 0 5
5311: PUSH
5312: LD_VAR 0 5
5316: PPUSH
5317: LD_INT 1
5319: PPUSH
5320: LD_VAR 0 4
5324: PPUSH
5325: CALL_OW 265
5329: PUSH
5330: LD_VAR 0 4
5334: PPUSH
5335: CALL_OW 262
5339: PUSH
5340: LD_VAR 0 4
5344: PPUSH
5345: CALL_OW 263
5349: PUSH
5350: LD_VAR 0 4
5354: PPUSH
5355: CALL_OW 264
5359: PUSH
5360: LD_VAR 0 4
5364: PPUSH
5365: CALL_OW 261
5369: PUSH
5370: LD_VAR 0 4
5374: PPUSH
5375: CALL_OW 256
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: PPUSH
5388: CALL_OW 2
5392: ST_TO_ADDR
5393: GO 5304
5395: POP
5396: POP
// SaveVariable ( tmp , ident ) ;
5397: LD_VAR 0 5
5401: PPUSH
5402: LD_VAR 0 2
5406: PPUSH
5407: CALL_OW 39
// end ;
5411: LD_VAR 0 3
5415: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// buildingsToSave = [ ] ;
5421: LD_ADDR_VAR 0 5
5425: PUSH
5426: EMPTY
5427: ST_TO_ADDR
// if not buildings then
5428: LD_VAR 0 1
5432: NOT
5433: IFFALSE 5437
// exit ;
5435: GO 6012
// for i in buildings do
5437: LD_ADDR_VAR 0 4
5441: PUSH
5442: LD_VAR 0 1
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5996
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5450: LD_VAR 0 4
5454: PPUSH
5455: CALL_OW 266
5459: PUSH
5460: LD_INT 6
5462: PUSH
5463: LD_INT 7
5465: PUSH
5466: LD_INT 8
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: LIST
5473: IN
5474: IFFALSE 5599
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5476: LD_ADDR_VAR 0 5
5480: PUSH
5481: LD_VAR 0 5
5485: PUSH
5486: LD_VAR 0 4
5490: PPUSH
5491: CALL_OW 266
5495: PUSH
5496: LD_VAR 0 4
5500: PPUSH
5501: CALL_OW 250
5505: PUSH
5506: LD_VAR 0 4
5510: PPUSH
5511: CALL_OW 251
5515: PUSH
5516: LD_VAR 0 4
5520: PPUSH
5521: CALL_OW 254
5525: PUSH
5526: LD_VAR 0 4
5530: PPUSH
5531: CALL_OW 267
5535: PUSH
5536: LD_VAR 0 4
5540: PPUSH
5541: CALL_OW 248
5545: PUSH
5546: LD_VAR 0 4
5550: PPUSH
5551: CALL_OW 256
5555: PUSH
5556: LD_VAR 0 4
5560: PPUSH
5561: LD_INT 1
5563: PPUSH
5564: CALL_OW 268
5568: PUSH
5569: LD_VAR 0 4
5573: PPUSH
5574: LD_INT 2
5576: PPUSH
5577: CALL_OW 268
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: LIST
5590: LIST
5591: LIST
5592: PUSH
5593: EMPTY
5594: LIST
5595: ADD
5596: ST_TO_ADDR
5597: GO 5994
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5599: LD_VAR 0 4
5603: PPUSH
5604: CALL_OW 266
5608: PUSH
5609: LD_INT 32
5611: PUSH
5612: LD_INT 33
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: IN
5619: IFFALSE 5727
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5621: LD_ADDR_VAR 0 5
5625: PUSH
5626: LD_VAR 0 5
5630: PUSH
5631: LD_VAR 0 4
5635: PPUSH
5636: CALL_OW 266
5640: PUSH
5641: LD_VAR 0 4
5645: PPUSH
5646: CALL_OW 250
5650: PUSH
5651: LD_VAR 0 4
5655: PPUSH
5656: CALL_OW 251
5660: PUSH
5661: LD_VAR 0 4
5665: PPUSH
5666: CALL_OW 254
5670: PUSH
5671: LD_VAR 0 4
5675: PPUSH
5676: CALL_OW 267
5680: PUSH
5681: LD_VAR 0 4
5685: PPUSH
5686: CALL_OW 248
5690: PUSH
5691: LD_VAR 0 4
5695: PPUSH
5696: CALL_OW 256
5700: PUSH
5701: LD_VAR 0 4
5705: PPUSH
5706: CALL_OW 269
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: PUSH
5721: EMPTY
5722: LIST
5723: ADD
5724: ST_TO_ADDR
5725: GO 5994
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5727: LD_VAR 0 4
5731: PPUSH
5732: CALL_OW 266
5736: PUSH
5737: LD_INT 0
5739: PUSH
5740: LD_INT 1
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: IN
5747: IFFALSE 5901
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5749: LD_ADDR_VAR 0 5
5753: PUSH
5754: LD_VAR 0 5
5758: PUSH
5759: LD_VAR 0 4
5763: PPUSH
5764: CALL_OW 266
5768: PUSH
5769: LD_VAR 0 4
5773: PPUSH
5774: CALL_OW 250
5778: PUSH
5779: LD_VAR 0 4
5783: PPUSH
5784: CALL_OW 251
5788: PUSH
5789: LD_VAR 0 4
5793: PPUSH
5794: CALL_OW 254
5798: PUSH
5799: LD_VAR 0 4
5803: PPUSH
5804: CALL_OW 267
5808: PUSH
5809: LD_VAR 0 4
5813: PPUSH
5814: CALL_OW 248
5818: PUSH
5819: LD_VAR 0 4
5823: PPUSH
5824: CALL_OW 256
5828: PUSH
5829: LD_VAR 0 4
5833: PPUSH
5834: CALL_OW 274
5838: PPUSH
5839: LD_INT 1
5841: PPUSH
5842: CALL_OW 275
5846: PUSH
5847: LD_VAR 0 4
5851: PPUSH
5852: CALL_OW 274
5856: PPUSH
5857: LD_INT 2
5859: PPUSH
5860: CALL_OW 275
5864: PUSH
5865: LD_VAR 0 4
5869: PPUSH
5870: CALL_OW 274
5874: PPUSH
5875: LD_INT 3
5877: PPUSH
5878: CALL_OW 275
5882: PUSH
5883: EMPTY
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: PUSH
5895: EMPTY
5896: LIST
5897: ADD
5898: ST_TO_ADDR
5899: GO 5994
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5901: LD_ADDR_VAR 0 5
5905: PUSH
5906: LD_VAR 0 5
5910: PUSH
5911: LD_VAR 0 4
5915: PPUSH
5916: CALL_OW 266
5920: PUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: CALL_OW 250
5930: PUSH
5931: LD_VAR 0 4
5935: PPUSH
5936: CALL_OW 251
5940: PUSH
5941: LD_VAR 0 4
5945: PPUSH
5946: CALL_OW 254
5950: PUSH
5951: LD_VAR 0 4
5955: PPUSH
5956: CALL_OW 267
5960: PUSH
5961: LD_VAR 0 4
5965: PPUSH
5966: CALL_OW 248
5970: PUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: CALL_OW 256
5980: PUSH
5981: EMPTY
5982: LIST
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: PUSH
5990: EMPTY
5991: LIST
5992: ADD
5993: ST_TO_ADDR
// end ;
5994: GO 5447
5996: POP
5997: POP
// SaveVariable ( buildingsToSave , ident ) ;
5998: LD_VAR 0 5
6002: PPUSH
6003: LD_VAR 0 2
6007: PPUSH
6008: CALL_OW 39
// end ;
6012: LD_VAR 0 3
6016: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6017: LD_INT 0
6019: PPUSH
6020: PPUSH
6021: PPUSH
6022: PPUSH
6023: PPUSH
// belkovTeam = [ ] ;
6024: LD_ADDR_EXP 70
6028: PUSH
6029: EMPTY
6030: ST_TO_ADDR
// if belkovReturn then
6031: LD_EXP 6
6035: IFFALSE 6055
// belkovTeam = belkovTeam ^ Belkov else
6037: LD_ADDR_EXP 70
6041: PUSH
6042: LD_EXP 70
6046: PUSH
6047: LD_EXP 61
6051: ADD
6052: ST_TO_ADDR
6053: GO 6071
// belkovTeam = belkovTeam ^ Belkov2 ;
6055: LD_ADDR_EXP 70
6059: PUSH
6060: LD_EXP 70
6064: PUSH
6065: LD_EXP 65
6069: ADD
6070: ST_TO_ADDR
// for unit in other_survivors do
6071: LD_ADDR_VAR 0 3
6075: PUSH
6076: LD_EXP 63
6080: PUSH
6081: FOR_IN
6082: IFFALSE 6123
// if IsOK ( unit ) and belkovTeam < 5 then
6084: LD_VAR 0 3
6088: PPUSH
6089: CALL_OW 302
6093: PUSH
6094: LD_EXP 70
6098: PUSH
6099: LD_INT 5
6101: LESS
6102: AND
6103: IFFALSE 6121
// belkovTeam = belkovTeam ^ unit ;
6105: LD_ADDR_EXP 70
6109: PUSH
6110: LD_EXP 70
6114: PUSH
6115: LD_VAR 0 3
6119: ADD
6120: ST_TO_ADDR
6121: GO 6081
6123: POP
6124: POP
// if belkovTeam < 5 then
6125: LD_EXP 70
6129: PUSH
6130: LD_INT 5
6132: LESS
6133: IFFALSE 6259
// begin restRandSolds = 5 - belkovTeam ;
6135: LD_ADDR_VAR 0 4
6139: PUSH
6140: LD_INT 5
6142: PUSH
6143: LD_EXP 70
6147: MINUS
6148: ST_TO_ADDR
// for i := 1 to restRandSolds do
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: DOUBLE
6155: LD_INT 1
6157: DEC
6158: ST_TO_ADDR
6159: LD_VAR 0 4
6163: PUSH
6164: FOR_TO
6165: IFFALSE 6257
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6167: LD_ADDR_VAR 0 3
6171: PUSH
6172: LD_EXP 66
6176: PPUSH
6177: LD_INT 25
6179: PUSH
6180: LD_INT 1
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PUSH
6187: EMPTY
6188: LIST
6189: PPUSH
6190: CALL_OW 72
6194: PUSH
6195: LD_EXP 64
6199: DIFF
6200: PUSH
6201: FOR_IN
6202: IFFALSE 6253
// if not unit in belkovTeam then
6204: LD_VAR 0 3
6208: PUSH
6209: LD_EXP 70
6213: IN
6214: NOT
6215: IFFALSE 6251
// begin belkovTeam = belkovTeam ^ unit ;
6217: LD_ADDR_EXP 70
6221: PUSH
6222: LD_EXP 70
6226: PUSH
6227: LD_VAR 0 3
6231: ADD
6232: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6233: LD_ADDR_EXP 66
6237: PUSH
6238: LD_EXP 66
6242: PUSH
6243: LD_VAR 0 3
6247: DIFF
6248: ST_TO_ADDR
// break ;
6249: GO 6253
// end ;
6251: GO 6201
6253: POP
6254: POP
6255: GO 6164
6257: POP
6258: POP
// end ; tmp = belkovTeam diff Belkov ;
6259: LD_ADDR_VAR 0 5
6263: PUSH
6264: LD_EXP 70
6268: PUSH
6269: LD_EXP 61
6273: DIFF
6274: ST_TO_ADDR
// if tmp < 4 then
6275: LD_VAR 0 5
6279: PUSH
6280: LD_INT 4
6282: LESS
6283: IFFALSE 6367
// begin for i := 1 to 4 - tmp do
6285: LD_ADDR_VAR 0 2
6289: PUSH
6290: DOUBLE
6291: LD_INT 1
6293: DEC
6294: ST_TO_ADDR
6295: LD_INT 4
6297: PUSH
6298: LD_VAR 0 5
6302: MINUS
6303: PUSH
6304: FOR_TO
6305: IFFALSE 6365
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6307: LD_INT 0
6309: PPUSH
6310: LD_INT 1
6312: PPUSH
6313: LD_INT 2
6315: PPUSH
6316: CALL_OW 12
6320: PPUSH
6321: CALL_OW 381
// unit = CreateHuman ;
6325: LD_ADDR_VAR 0 3
6329: PUSH
6330: CALL_OW 44
6334: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6335: LD_ADDR_EXP 70
6339: PUSH
6340: LD_EXP 70
6344: PUSH
6345: LD_VAR 0 3
6349: ADD
6350: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6351: LD_VAR 0 3
6355: PPUSH
6356: LD_INT 209
6358: PPUSH
6359: CALL_OW 52
// end ;
6363: GO 6304
6365: POP
6366: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6367: LD_STRING 01_Kirilenkova
6369: PPUSH
6370: CALL_OW 28
6374: IFFALSE 6394
// belkovTeam = belkovTeam ^ Kirilenkova else
6376: LD_ADDR_EXP 70
6380: PUSH
6381: LD_EXP 70
6385: PUSH
6386: LD_EXP 62
6390: ADD
6391: ST_TO_ADDR
6392: GO 6470
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6394: LD_ADDR_EXP 70
6398: PUSH
6399: LD_EXP 70
6403: PUSH
6404: LD_EXP 66
6408: PPUSH
6409: LD_INT 25
6411: PUSH
6412: LD_INT 4
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: PPUSH
6422: CALL_OW 72
6426: PUSH
6427: LD_INT 1
6429: ARRAY
6430: ADD
6431: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6432: LD_ADDR_EXP 66
6436: PUSH
6437: LD_EXP 66
6441: PUSH
6442: LD_EXP 66
6446: PPUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: EMPTY
6458: LIST
6459: PPUSH
6460: CALL_OW 72
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: DIFF
6469: ST_TO_ADDR
// end ; end ;
6470: LD_VAR 0 1
6474: RET
// export function PlatonovSendSupport ; begin
6475: LD_INT 0
6477: PPUSH
// ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6478: LD_EXP 75
6482: PUSH
6483: LD_EXP 76
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6496: LD_EXP 75
6500: PUSH
6501: LD_EXP 76
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PPUSH
6510: LD_INT 112
6512: PPUSH
6513: LD_INT 96
6515: PPUSH
6516: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6520: LD_EXP 75
6524: PUSH
6525: LD_EXP 76
6529: PUSH
6530: EMPTY
6531: LIST
6532: LIST
6533: PPUSH
6534: LD_INT 3
6536: PPUSH
6537: CALL_OW 235
// end ; end_of_file
6541: LD_VAR 0 1
6545: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6546: LD_INT 0
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6552: LD_EXP 59
6556: PPUSH
6557: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6561: LD_EXP 59
6565: PPUSH
6566: LD_INT 163
6568: PPUSH
6569: LD_INT 108
6571: PPUSH
6572: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6576: LD_EXP 59
6580: PPUSH
6581: LD_EXP 64
6585: PPUSH
6586: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6590: LD_ADDR_VAR 0 2
6594: PUSH
6595: LD_INT 22
6597: PUSH
6598: LD_INT 3
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 21
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PPUSH
6619: CALL_OW 69
6623: PUSH
6624: LD_EXP 59
6628: DIFF
6629: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6630: LD_ADDR_VAR 0 4
6634: PUSH
6635: DOUBLE
6636: LD_INT 1
6638: DEC
6639: ST_TO_ADDR
6640: LD_EXP 49
6644: PUSH
6645: FOR_TO
6646: IFFALSE 6764
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6648: LD_ADDR_VAR 0 3
6652: PUSH
6653: LD_VAR 0 2
6657: PPUSH
6658: LD_EXP 49
6662: PUSH
6663: LD_VAR 0 4
6667: ARRAY
6668: PUSH
6669: LD_INT 1
6671: ARRAY
6672: PPUSH
6673: LD_EXP 49
6677: PUSH
6678: LD_VAR 0 4
6682: ARRAY
6683: PUSH
6684: LD_INT 2
6686: ARRAY
6687: PPUSH
6688: CALL_OW 73
6692: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6693: LD_VAR 0 3
6697: PPUSH
6698: LD_EXP 49
6702: PUSH
6703: LD_VAR 0 4
6707: ARRAY
6708: PUSH
6709: LD_INT 1
6711: ARRAY
6712: PPUSH
6713: LD_EXP 49
6717: PUSH
6718: LD_VAR 0 4
6722: ARRAY
6723: PUSH
6724: LD_INT 2
6726: ARRAY
6727: PPUSH
6728: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
6732: LD_VAR 0 3
6736: PPUSH
6737: LD_EXP 64
6741: PPUSH
6742: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
6746: LD_ADDR_VAR 0 2
6750: PUSH
6751: LD_VAR 0 2
6755: PUSH
6756: LD_VAR 0 3
6760: DIFF
6761: ST_TO_ADDR
// end ;
6762: GO 6645
6764: POP
6765: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6766: LD_EXP 59
6770: PPUSH
6771: CALL_OW 87
// wait ( 0 0$1 ) ;
6775: LD_INT 35
6777: PPUSH
6778: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
6782: LD_EXP 59
6786: PPUSH
6787: LD_EXP 64
6791: PPUSH
6792: CALL_OW 296
6796: PUSH
6797: LD_INT 4
6799: LESS
6800: IFFALSE 6766
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6802: LD_EXP 59
6806: PUSH
6807: LD_EXP 64
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
6820: LD_EXP 64
6824: PPUSH
6825: LD_EXP 59
6829: PPUSH
6830: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6834: LD_EXP 64
6838: PPUSH
6839: LD_STRING D1-Kur-1
6841: PPUSH
6842: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6846: LD_EXP 59
6850: PPUSH
6851: LD_STRING D1-Bur-1
6853: PPUSH
6854: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6858: LD_EXP 64
6862: PPUSH
6863: LD_STRING D1-Kur-2
6865: PPUSH
6866: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6870: LD_EXP 59
6874: PPUSH
6875: LD_STRING D1-Bur-2
6877: PPUSH
6878: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6882: LD_EXP 64
6886: PPUSH
6887: LD_STRING D1-Kur-3
6889: PPUSH
6890: CALL_OW 88
// if IsOK ( Gnyevko ) then
6894: LD_EXP 60
6898: PPUSH
6899: CALL_OW 302
6903: IFFALSE 6917
// Say ( Kurin , D1-Kur-3a ) ;
6905: LD_EXP 64
6909: PPUSH
6910: LD_STRING D1-Kur-3a
6912: PPUSH
6913: CALL_OW 88
// InGameOff ;
6917: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6921: LD_INT 22
6923: PUSH
6924: LD_INT 3
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 21
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PPUSH
6945: CALL_OW 69
6949: PUSH
6950: LD_EXP 59
6954: PUSH
6955: LD_EXP 60
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: DIFF
6964: PPUSH
6965: LD_INT 6
6967: PPUSH
6968: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6972: LD_EXP 67
6976: PPUSH
6977: LD_INT 3
6979: PPUSH
6980: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6984: LD_INT 9
6986: PPUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 6
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 1
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 70
7015: PUSH
7016: LD_EXP 64
7020: DIFF
7021: PPUSH
7022: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7026: LD_EXP 63
7030: PPUSH
7031: LD_INT 95
7033: PPUSH
7034: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7038: LD_EXP 61
7042: PPUSH
7043: LD_INT 95
7045: PPUSH
7046: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7050: LD_EXP 62
7054: PPUSH
7055: CALL_OW 305
7059: IFFALSE 7073
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7061: LD_EXP 62
7065: PPUSH
7066: LD_INT 83
7068: PPUSH
7069: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7073: LD_STRING 01_Gnyevko
7075: PPUSH
7076: CALL_OW 28
7080: NOT
7081: IFFALSE 7095
// SetSide ( randomMech , 3 ) ;
7083: LD_EXP 68
7087: PPUSH
7088: LD_INT 3
7090: PPUSH
7091: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7095: LD_STRING M1
7097: PPUSH
7098: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7102: LD_INT 3
7104: PPUSH
7105: LD_INT 6
7107: PPUSH
7108: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7112: LD_INT 3
7114: PPUSH
7115: LD_INT 7
7117: PPUSH
7118: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7122: LD_INT 6
7124: PPUSH
7125: LD_INT 6
7127: PPUSH
7128: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7132: LD_INT 6
7134: PPUSH
7135: LD_INT 7
7137: PPUSH
7138: CALL_OW 334
// SaveForQuickRestart ;
7142: CALL_OW 22
// end ;
7146: LD_VAR 0 1
7150: RET
// every 1 trigger not interface_hidden and not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7151: LD_OWVAR 54
7155: NOT
7156: PUSH
7157: LD_EXP 20
7161: NOT
7162: AND
7163: PUSH
7164: LD_INT 20
7166: PPUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: LD_INT 21
7182: PUSH
7183: LD_INT 1
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 21
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 70
7213: PUSH
7214: LD_INT 0
7216: GREATER
7217: AND
7218: IFFALSE 7439
7220: GO 7222
7222: DISABLE
7223: LD_INT 0
7225: PPUSH
// begin enable ;
7226: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7227: LD_ADDR_VAR 0 1
7231: PUSH
7232: LD_INT 20
7234: PPUSH
7235: LD_INT 22
7237: PUSH
7238: LD_INT 3
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 2
7247: PUSH
7248: LD_INT 21
7250: PUSH
7251: LD_INT 1
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PUSH
7258: LD_INT 21
7260: PUSH
7261: LD_INT 2
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 70
7281: PUSH
7282: FOR_IN
7283: IFFALSE 7422
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7285: LD_VAR 0 1
7289: PPUSH
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 250
7299: PPUSH
7300: LD_VAR 0 1
7304: PPUSH
7305: CALL_OW 251
7309: PUSH
7310: LD_INT 5
7312: PLUS
7313: PPUSH
7314: CALL_OW 111
// if dialogLoopBlocker then
7318: LD_EXP 31
7322: IFFALSE 7328
// exit ;
7324: POP
7325: POP
7326: GO 7439
// dialogLoopBlocker = true ;
7328: LD_ADDR_EXP 31
7332: PUSH
7333: LD_INT 1
7335: ST_TO_ADDR
// if not meetPlatonov then
7336: LD_EXP 7
7340: NOT
7341: IFFALSE 7404
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7343: LD_VAR 0 1
7347: PUSH
7348: LD_EXP 59
7352: NONEQUAL
7353: PUSH
7354: LD_EXP 67
7358: PPUSH
7359: CALL_OW 302
7363: AND
7364: IFFALSE 7378
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7366: LD_EXP 67
7370: PPUSH
7371: LD_STRING D1b-Kov-1
7373: PPUSH
7374: CALL_OW 88
// if unit = Burlak then
7378: LD_VAR 0 1
7382: PUSH
7383: LD_EXP 59
7387: EQUAL
7388: IFFALSE 7402
// Say ( Burlak , D1b-Bur-1 ) ;
7390: LD_EXP 59
7394: PPUSH
7395: LD_STRING D1b-Bur-1
7397: PPUSH
7398: CALL_OW 88
// end else
7402: GO 7416
// Say ( Platonov , D8-Pla-1 ) ;
7404: LD_EXP 73
7408: PPUSH
7409: LD_STRING D8-Pla-1
7411: PPUSH
7412: CALL_OW 88
// exit ;
7416: POP
7417: POP
7418: GO 7439
// end ;
7420: GO 7282
7422: POP
7423: POP
// wait ( 0 0$5 ) ;
7424: LD_INT 175
7426: PPUSH
7427: CALL_OW 67
// dialogLoopBlocker = false ;
7431: LD_ADDR_EXP 31
7435: PUSH
7436: LD_INT 0
7438: ST_TO_ADDR
// end ;
7439: PPOPN 1
7441: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7442: LD_EXP 19
7446: NOT
7447: PUSH
7448: LD_INT 8
7450: PPUSH
7451: LD_INT 22
7453: PUSH
7454: LD_INT 3
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 2
7463: PUSH
7464: LD_INT 21
7466: PUSH
7467: LD_INT 1
7469: PUSH
7470: EMPTY
7471: LIST
7472: LIST
7473: PUSH
7474: LD_INT 21
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 71
7497: PUSH
7498: LD_INT 0
7500: GREATER
7501: AND
7502: IFFALSE 7637
7504: GO 7506
7506: DISABLE
7507: LD_INT 0
7509: PPUSH
// begin enable ;
7510: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7511: LD_ADDR_VAR 0 1
7515: PUSH
7516: LD_INT 8
7518: PPUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 2
7531: PUSH
7532: LD_INT 21
7534: PUSH
7535: LD_INT 1
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_INT 21
7544: PUSH
7545: LD_INT 2
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PPUSH
7561: CALL_OW 71
7565: PUSH
7566: FOR_IN
7567: IFFALSE 7620
// begin ComMoveXY ( unit , 114 , 98 ) ;
7569: LD_VAR 0 1
7573: PPUSH
7574: LD_INT 114
7576: PPUSH
7577: LD_INT 98
7579: PPUSH
7580: CALL_OW 111
// if dialogLoopBlocker then
7584: LD_EXP 31
7588: IFFALSE 7594
// exit ;
7590: POP
7591: POP
7592: GO 7637
// dialogLoopBlocker = true ;
7594: LD_ADDR_EXP 31
7598: PUSH
7599: LD_INT 1
7601: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
7602: LD_EXP 73
7606: PPUSH
7607: LD_STRING D8-Pla-1
7609: PPUSH
7610: CALL_OW 88
// exit ;
7614: POP
7615: POP
7616: GO 7637
// end ;
7618: GO 7566
7620: POP
7621: POP
// wait ( 0 0$5 ) ;
7622: LD_INT 175
7624: PPUSH
7625: CALL_OW 67
// dialogLoopBlocker = false ;
7629: LD_ADDR_EXP 31
7633: PUSH
7634: LD_INT 0
7636: ST_TO_ADDR
// end ;
7637: PPOPN 1
7639: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7640: LD_EXP 7
7644: NOT
7645: PUSH
7646: LD_INT 9
7648: PPUSH
7649: LD_INT 22
7651: PUSH
7652: LD_INT 3
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PUSH
7659: LD_INT 21
7661: PUSH
7662: LD_INT 1
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: PPUSH
7673: CALL_OW 70
7677: PUSH
7678: LD_INT 0
7680: GREATER
7681: AND
7682: IFFALSE 7699
7684: GO 7686
7686: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
7687: LD_EXP 64
7691: PPUSH
7692: LD_STRING D1a-Kur-1
7694: PPUSH
7695: CALL_OW 88
7699: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
7700: LD_EXP 7
7704: NOT
7705: PUSH
7706: LD_EXP 59
7710: PPUSH
7711: CALL_OW 302
7715: AND
7716: PUSH
7717: LD_INT 8
7719: PPUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 21
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: EMPTY
7737: LIST
7738: LIST
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PPUSH
7744: CALL_OW 70
7748: PUSH
7749: LD_INT 0
7751: GREATER
7752: AND
7753: IFFALSE 8269
7755: GO 7757
7757: DISABLE
7758: LD_INT 0
7760: PPUSH
7761: PPUSH
7762: PPUSH
7763: PPUSH
// begin enable ;
7764: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
7765: LD_ADDR_VAR 0 2
7769: PUSH
7770: LD_INT 22
7772: PUSH
7773: LD_INT 3
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 21
7782: PUSH
7783: LD_INT 1
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: PUSH
7799: FOR_IN
7800: IFFALSE 8267
// if See ( 6 , unit ) then
7802: LD_INT 6
7804: PPUSH
7805: LD_VAR 0 2
7809: PPUSH
7810: CALL_OW 292
7814: IFFALSE 8265
// begin meetPlatonov = true ;
7816: LD_ADDR_EXP 7
7820: PUSH
7821: LD_INT 1
7823: ST_TO_ADDR
// interface_hidden = true ;
7824: LD_ADDR_OWVAR 54
7828: PUSH
7829: LD_INT 1
7831: ST_TO_ADDR
// InGameOn ;
7832: CALL_OW 8
// DialogueOn ;
7836: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_EXP 74
7849: PPUSH
7850: LD_INT 26
7852: PUSH
7853: LD_INT 1
7855: PUSH
7856: EMPTY
7857: LIST
7858: LIST
7859: PPUSH
7860: CALL_OW 72
7864: PPUSH
7865: LD_STRING D2-RSol1-1
7867: PPUSH
7868: LD_STRING 
7870: PPUSH
7871: LD_INT 0
7873: PPUSH
7874: CALL 4044 0 4
7878: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
7879: LD_EXP 59
7883: PPUSH
7884: LD_STRING D2-Bur-1
7886: PPUSH
7887: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
7891: LD_VAR 0 4
7895: PPUSH
7896: LD_STRING D2-RSol1-2
7898: PPUSH
7899: CALL_OW 88
// DialogueOff ;
7903: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
7907: LD_ADDR_VAR 0 3
7911: PUSH
7912: LD_INT 22
7914: PUSH
7915: LD_INT 3
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 50
7934: PUSH
7935: EMPTY
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 69
7947: ST_TO_ADDR
// for i := 1 to yourUnits do
7948: LD_ADDR_VAR 0 1
7952: PUSH
7953: DOUBLE
7954: LD_INT 1
7956: DEC
7957: ST_TO_ADDR
7958: LD_VAR 0 3
7962: PUSH
7963: FOR_TO
7964: IFFALSE 8033
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
7966: LD_VAR 0 3
7970: PUSH
7971: LD_VAR 0 1
7975: ARRAY
7976: PPUSH
7977: LD_EXP 50
7981: PUSH
7982: LD_VAR 0 1
7986: ARRAY
7987: PUSH
7988: LD_INT 1
7990: ARRAY
7991: PPUSH
7992: LD_EXP 50
7996: PUSH
7997: LD_VAR 0 1
8001: ARRAY
8002: PUSH
8003: LD_INT 2
8005: ARRAY
8006: PPUSH
8007: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8011: LD_VAR 0 3
8015: PUSH
8016: LD_VAR 0 1
8020: ARRAY
8021: PPUSH
8022: LD_EXP 73
8026: PPUSH
8027: CALL_OW 179
// end ;
8031: GO 7963
8033: POP
8034: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8035: LD_EXP 59
8039: PPUSH
8040: CALL_OW 87
// wait ( 0 0$1 ) ;
8044: LD_INT 35
8046: PPUSH
8047: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8051: LD_EXP 59
8055: PPUSH
8056: LD_EXP 73
8060: PPUSH
8061: CALL_OW 296
8065: PUSH
8066: LD_INT 4
8068: LESS
8069: IFFALSE 8035
// ComTurnUnit ( Platonov , Burlak ) ;
8071: LD_EXP 73
8075: PPUSH
8076: LD_EXP 59
8080: PPUSH
8081: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8085: LD_EXP 73
8089: PPUSH
8090: LD_STRING D2-Pla-2
8092: PPUSH
8093: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8097: LD_EXP 59
8101: PPUSH
8102: LD_STRING D2-Bur-2
8104: PPUSH
8105: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8109: LD_EXP 73
8113: PPUSH
8114: LD_STRING D2-Pla-3
8116: PPUSH
8117: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8121: LD_EXP 59
8125: PPUSH
8126: LD_STRING D2-Bur-3
8128: PPUSH
8129: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8133: LD_EXP 73
8137: PPUSH
8138: LD_STRING D2-Pla-4
8140: PPUSH
8141: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8145: LD_EXP 59
8149: PPUSH
8150: LD_STRING D2-Bur-4
8152: PPUSH
8153: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8157: LD_EXP 73
8161: PPUSH
8162: LD_STRING D2-Pla-5
8164: PPUSH
8165: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8169: LD_INT 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 3
8177: PUSH
8178: LD_INT 4
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL 4377 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8191: LD_EXP 73
8195: PPUSH
8196: LD_STRING D3-Pla-1
8198: PPUSH
8199: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8203: LD_EXP 59
8207: PPUSH
8208: LD_STRING D3-Bur-1
8210: PPUSH
8211: CALL_OW 88
// InGameOff ;
8215: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8219: LD_STRING M2a
8221: PPUSH
8222: CALL_OW 337
// ComFree ( Platonov ) ;
8226: LD_EXP 73
8230: PPUSH
8231: CALL_OW 139
// SetSide ( beria , 3 ) ;
8235: LD_INT 106
8237: PPUSH
8238: LD_INT 3
8240: PPUSH
8241: CALL_OW 235
// canExitBase = false ;
8245: LD_ADDR_EXP 19
8249: PUSH
8250: LD_INT 0
8252: ST_TO_ADDR
// interface_hidden = false ;
8253: LD_ADDR_OWVAR 54
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// exit ;
8261: POP
8262: POP
8263: GO 8269
// end ;
8265: GO 7799
8267: POP
8268: POP
// end ;
8269: PPOPN 4
8271: END
// export function Dial_LabConstructed ; begin
8272: LD_INT 0
8274: PPUSH
// labConstructed = true ;
8275: LD_ADDR_EXP 8
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// DialogueOn ;
8283: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8287: LD_EXP 59
8291: PPUSH
8292: LD_STRING D5a-Bur-1
8294: PPUSH
8295: CALL_OW 88
// if workshopConstructed then
8299: LD_EXP 9
8303: IFFALSE 8319
// Say ( Platonov , D5a-Pla-1a ) else
8305: LD_EXP 73
8309: PPUSH
8310: LD_STRING D5a-Pla-1a
8312: PPUSH
8313: CALL_OW 88
8317: GO 8331
// Say ( Platonov , D5a-Pla-1a ) ;
8319: LD_EXP 73
8323: PPUSH
8324: LD_STRING D5a-Pla-1a
8326: PPUSH
8327: CALL_OW 88
// DialogueOff ;
8331: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8335: LD_STRING M2b
8337: PPUSH
8338: CALL_OW 337
// end ;
8342: LD_VAR 0 1
8346: RET
// export function Dial_WorkshopConstructed ; begin
8347: LD_INT 0
8349: PPUSH
// workshopConstructed = true ;
8350: LD_ADDR_EXP 9
8354: PUSH
8355: LD_INT 1
8357: ST_TO_ADDR
// DialogueOn ;
8358: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8362: LD_EXP 59
8366: PPUSH
8367: LD_STRING D5b-Bur-1
8369: PPUSH
8370: CALL_OW 88
// if labConstructed then
8374: LD_EXP 8
8378: IFFALSE 8394
// Say ( Platonov , D5b-Pla-1 ) else
8380: LD_EXP 73
8384: PPUSH
8385: LD_STRING D5b-Pla-1
8387: PPUSH
8388: CALL_OW 88
8392: GO 8406
// Say ( Platonov , D5b-Pla-1a ) ;
8394: LD_EXP 73
8398: PPUSH
8399: LD_STRING D5b-Pla-1a
8401: PPUSH
8402: CALL_OW 88
// DialogueOff ;
8406: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8410: LD_STRING M2c
8412: PPUSH
8413: CALL_OW 337
// end ;
8417: LD_VAR 0 1
8421: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
8422: LD_INT 0
8424: PPUSH
// wait ( 0 0$1 ) ;
8425: LD_INT 35
8427: PPUSH
8428: CALL_OW 67
// CenterNowOnUnits ( building ) ;
8432: LD_VAR 0 1
8436: PPUSH
8437: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8441: LD_INT 22
8443: PUSH
8444: LD_INT 3
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 21
8453: PUSH
8454: LD_INT 1
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PPUSH
8465: CALL_OW 69
8469: PPUSH
8470: CALL_OW 141
// DialogueOn ;
8474: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
8478: LD_EXP 73
8482: PPUSH
8483: LD_STRING D6-Pla-1
8485: PPUSH
8486: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8490: LD_EXP 59
8494: PPUSH
8495: LD_STRING D6-Bur-1
8497: PPUSH
8498: CALL_OW 88
// DialogueOff ;
8502: CALL_OW 7
// case GetBType ( building ) of b_lab :
8506: LD_VAR 0 1
8510: PPUSH
8511: CALL_OW 266
8515: PUSH
8516: LD_INT 6
8518: DOUBLE
8519: EQUAL
8520: IFTRUE 8524
8522: GO 8564
8524: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
8525: LD_INT 106
8527: PPUSH
8528: CALL_OW 274
8532: PPUSH
8533: LD_INT 1
8535: PPUSH
8536: LD_INT 106
8538: PPUSH
8539: CALL_OW 274
8543: PPUSH
8544: LD_INT 1
8546: PPUSH
8547: CALL_OW 275
8551: PUSH
8552: LD_EXP 51
8556: PLUS
8557: PPUSH
8558: CALL_OW 277
8562: GO 8757
8564: LD_INT 2
8566: DOUBLE
8567: EQUAL
8568: IFTRUE 8572
8570: GO 8612
8572: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
8573: LD_INT 106
8575: PPUSH
8576: CALL_OW 274
8580: PPUSH
8581: LD_INT 1
8583: PPUSH
8584: LD_INT 106
8586: PPUSH
8587: CALL_OW 274
8591: PPUSH
8592: LD_INT 1
8594: PPUSH
8595: CALL_OW 275
8599: PUSH
8600: LD_EXP 52
8604: PLUS
8605: PPUSH
8606: CALL_OW 277
8610: GO 8757
8612: LD_INT 26
8614: DOUBLE
8615: EQUAL
8616: IFTRUE 8620
8618: GO 8660
8620: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
8621: LD_INT 106
8623: PPUSH
8624: CALL_OW 274
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: LD_INT 106
8634: PPUSH
8635: CALL_OW 274
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: CALL_OW 275
8647: PUSH
8648: LD_EXP 53
8652: PLUS
8653: PPUSH
8654: CALL_OW 277
8658: GO 8757
8660: LD_INT 4
8662: DOUBLE
8663: EQUAL
8664: IFTRUE 8668
8666: GO 8708
8668: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
8669: LD_INT 106
8671: PPUSH
8672: CALL_OW 274
8676: PPUSH
8677: LD_INT 1
8679: PPUSH
8680: LD_INT 106
8682: PPUSH
8683: CALL_OW 274
8687: PPUSH
8688: LD_INT 1
8690: PPUSH
8691: CALL_OW 275
8695: PUSH
8696: LD_EXP 54
8700: PLUS
8701: PPUSH
8702: CALL_OW 277
8706: GO 8757
8708: LD_INT 31
8710: DOUBLE
8711: EQUAL
8712: IFTRUE 8716
8714: GO 8756
8716: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
8717: LD_INT 106
8719: PPUSH
8720: CALL_OW 274
8724: PPUSH
8725: LD_INT 1
8727: PPUSH
8728: LD_INT 106
8730: PPUSH
8731: CALL_OW 274
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: CALL_OW 275
8743: PUSH
8744: LD_EXP 55
8748: PLUS
8749: PPUSH
8750: CALL_OW 277
8754: GO 8757
8756: POP
// RemoveUnit ( building ) ;
8757: LD_VAR 0 1
8761: PPUSH
8762: CALL_OW 64
// end ;
8766: LD_VAR 0 2
8770: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
8771: LD_EXP 9
8775: PUSH
8776: LD_EXP 8
8780: AND
8781: IFFALSE 8890
8783: GO 8785
8785: DISABLE
// begin DialogueOn ;
8786: CALL_OW 6
// if engineResearched then
8790: LD_EXP 10
8794: IFFALSE 8822
// begin Say ( Burlak , D7b-Bur-1 ) ;
8796: LD_EXP 59
8800: PPUSH
8801: LD_STRING D7b-Bur-1
8803: PPUSH
8804: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8808: LD_EXP 73
8812: PPUSH
8813: LD_STRING D7b-Pla-1
8815: PPUSH
8816: CALL_OW 88
// end else
8820: GO 8846
// begin Say ( Burlak , D7a-Bur-1 ) ;
8822: LD_EXP 59
8826: PPUSH
8827: LD_STRING D7a-Bur-1
8829: PPUSH
8830: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8834: LD_EXP 73
8838: PPUSH
8839: LD_STRING D7a-Pla-1
8841: PPUSH
8842: CALL_OW 88
// end ; DialogueOff ;
8846: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8850: LD_STRING M2
8852: PPUSH
8853: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
8857: LD_INT 5
8859: PPUSH
8860: LD_EXP 73
8864: PPUSH
8865: CALL_OW 250
8869: PPUSH
8870: LD_EXP 73
8874: PPUSH
8875: CALL_OW 251
8879: PPUSH
8880: LD_INT 5
8882: PPUSH
8883: LD_INT 1
8885: PPUSH
8886: CALL_OW 56
// end ;
8890: END
// export function Dial_NewCrates ( x , y ) ; begin
8891: LD_INT 0
8893: PPUSH
// wait ( 0 0$18 ) ;
8894: LD_INT 630
8896: PPUSH
8897: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
8901: LD_EXP 73
8905: PPUSH
8906: LD_VAR 0 1
8910: PPUSH
8911: LD_VAR 0 2
8915: PPUSH
8916: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
8920: LD_EXP 73
8924: PPUSH
8925: LD_STRING D4-Pla-1
8927: PPUSH
8928: CALL_OW 88
// end ;
8932: LD_VAR 0 3
8936: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
8937: LD_INT 0
8939: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8940: LD_ADDR_EXP 13
8944: PUSH
8945: LD_INT 22
8947: PUSH
8948: LD_INT 3
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 2
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PPUSH
8969: CALL_OW 69
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: ST_TO_ADDR
// constructedFirstVehicle = true ;
8978: LD_ADDR_EXP 12
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// InGameOn ;
8986: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
8990: LD_VAR 0 1
8994: PPUSH
8995: CALL_OW 87
// wait ( 0 0$3 ) ;
8999: LD_INT 105
9001: PPUSH
9002: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9006: LD_EXP 59
9010: PPUSH
9011: LD_STRING D9-Bur-1
9013: PPUSH
9014: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9018: LD_EXP 73
9022: PPUSH
9023: LD_EXP 13
9027: PPUSH
9028: CALL_OW 250
9032: PPUSH
9033: LD_EXP 13
9037: PPUSH
9038: CALL_OW 251
9042: PPUSH
9043: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9047: LD_INT 35
9049: PPUSH
9050: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9054: LD_EXP 73
9058: PPUSH
9059: LD_EXP 13
9063: PPUSH
9064: CALL_OW 296
9068: PUSH
9069: LD_INT 4
9071: LESS
9072: IFFALSE 9047
// ComTurnUnit ( Platonov , firstVeh ) ;
9074: LD_EXP 73
9078: PPUSH
9079: LD_EXP 13
9083: PPUSH
9084: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9088: LD_EXP 73
9092: PPUSH
9093: LD_STRING D9-Pla-1
9095: PPUSH
9096: CALL_OW 88
// InGameOff ;
9100: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9104: LD_STRING M3
9106: PPUSH
9107: CALL_OW 337
// canExitBase = true ;
9111: LD_ADDR_EXP 19
9115: PUSH
9116: LD_INT 1
9118: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9119: LD_EXP 73
9123: PPUSH
9124: LD_INT 112
9126: PPUSH
9127: LD_INT 97
9129: PPUSH
9130: CALL_OW 111
// end ;
9134: LD_VAR 0 2
9138: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9139: LD_EXP 13
9143: PPUSH
9144: LD_INT 9
9146: PPUSH
9147: CALL_OW 308
9151: PUSH
9152: LD_EXP 14
9156: NOT
9157: AND
9158: IFFALSE 10039
9160: GO 9162
9162: DISABLE
9163: LD_INT 0
9165: PPUSH
9166: PPUSH
9167: PPUSH
// begin vehicleForKurin = true ;
9168: LD_ADDR_EXP 14
9172: PUSH
9173: LD_INT 1
9175: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9176: LD_ADDR_VAR 0 2
9180: PUSH
9181: LD_EXP 66
9185: PPUSH
9186: LD_INT 25
9188: PUSH
9189: LD_INT 2
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 72
9200: PUSH
9201: LD_INT 1
9203: ARRAY
9204: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9205: LD_ADDR_VAR 0 3
9209: PUSH
9210: LD_EXP 66
9214: PPUSH
9215: LD_INT 25
9217: PUSH
9218: LD_INT 3
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: PPUSH
9225: CALL_OW 72
9229: PUSH
9230: LD_INT 1
9232: ARRAY
9233: ST_TO_ADDR
// InGameOn ;
9234: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9238: LD_EXP 64
9242: PPUSH
9243: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9247: LD_EXP 13
9251: PPUSH
9252: LD_EXP 64
9256: PPUSH
9257: CALL_OW 250
9261: PPUSH
9262: LD_EXP 64
9266: PPUSH
9267: CALL_OW 251
9271: PPUSH
9272: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9276: LD_EXP 64
9280: PPUSH
9281: LD_STRING D10-Kur-1
9283: PPUSH
9284: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9288: LD_INT 35
9290: PPUSH
9291: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9295: LD_EXP 13
9299: PPUSH
9300: LD_EXP 64
9304: PPUSH
9305: CALL_OW 250
9309: PPUSH
9310: LD_EXP 64
9314: PPUSH
9315: CALL_OW 251
9319: PPUSH
9320: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9324: LD_EXP 13
9328: PPUSH
9329: LD_EXP 64
9333: PPUSH
9334: CALL_OW 296
9338: PUSH
9339: LD_INT 9
9341: LESS
9342: IFFALSE 9288
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9344: LD_EXP 13
9348: PPUSH
9349: CALL_OW 313
9353: PPUSH
9354: CALL_OW 121
// wait ( 0 0$1 ) ;
9358: LD_INT 35
9360: PPUSH
9361: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
9365: LD_EXP 13
9369: PPUSH
9370: CALL_OW 256
9374: PUSH
9375: LD_INT 1000
9377: LESS
9378: IFFALSE 9410
// begin ComExitBuilding ( mech ) ;
9380: LD_VAR 0 3
9384: PPUSH
9385: CALL_OW 122
// wait ( 0 0$1 ) ;
9389: LD_INT 35
9391: PPUSH
9392: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
9396: LD_VAR 0 3
9400: PPUSH
9401: LD_EXP 13
9405: PPUSH
9406: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
9410: LD_EXP 13
9414: PPUSH
9415: CALL_OW 261
9419: PUSH
9420: LD_INT 90
9422: LESS
9423: IFFALSE 9458
// begin ComExitBuilding ( eng ) ;
9425: LD_VAR 0 2
9429: PPUSH
9430: CALL_OW 122
// wait ( 0 0$1 ) ;
9434: LD_INT 35
9436: PPUSH
9437: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
9441: LD_VAR 0 2
9445: PPUSH
9446: LD_INT 71
9448: PPUSH
9449: LD_EXP 13
9453: PPUSH
9454: CALL 4615 0 3
// end ; repeat wait ( 0 0$1 ) ;
9458: LD_INT 35
9460: PPUSH
9461: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
9465: LD_EXP 13
9469: PPUSH
9470: CALL_OW 256
9474: PUSH
9475: LD_INT 1000
9477: EQUAL
9478: PUSH
9479: LD_EXP 13
9483: PPUSH
9484: CALL_OW 261
9488: PUSH
9489: LD_INT 90
9491: GREATER
9492: AND
9493: IFFALSE 9458
// if UnitsInside ( firstVeh ) then
9495: LD_EXP 13
9499: PPUSH
9500: CALL_OW 313
9504: IFFALSE 9524
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
9506: LD_EXP 13
9510: PPUSH
9511: CALL_OW 313
9515: PUSH
9516: LD_INT 1
9518: ARRAY
9519: PPUSH
9520: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
9524: LD_VAR 0 2
9528: PPUSH
9529: LD_INT 71
9531: PPUSH
9532: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
9536: LD_EXP 13
9540: PPUSH
9541: LD_INT 6
9543: PPUSH
9544: CALL_OW 235
// if belkovReturn then
9548: LD_EXP 6
9552: IFFALSE 9638
// begin if IsInUnit ( Belkov ) then
9554: LD_EXP 61
9558: PPUSH
9559: CALL_OW 310
9563: IFFALSE 9574
// ComExitBuilding ( Belkov ) ;
9565: LD_EXP 61
9569: PPUSH
9570: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9574: LD_INT 35
9576: PPUSH
9577: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
9581: LD_EXP 61
9585: PPUSH
9586: LD_EXP 13
9590: PPUSH
9591: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
9595: LD_EXP 61
9599: PPUSH
9600: CALL_OW 310
9604: PUSH
9605: LD_EXP 13
9609: EQUAL
9610: IFFALSE 9574
// Say ( Belkov , D10-Bel-1 ) ;
9612: LD_EXP 61
9616: PPUSH
9617: LD_STRING D10-Bel-1
9619: PPUSH
9620: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
9624: LD_EXP 64
9628: PPUSH
9629: LD_STRING D10-Kur-2
9631: PPUSH
9632: CALL_OW 88
// end else
9636: GO 9764
// begin if IsInUnit ( Belkov2 ) then
9638: LD_EXP 65
9642: PPUSH
9643: CALL_OW 310
9647: IFFALSE 9658
// ComExitBuilding ( Belkov2 ) ;
9649: LD_EXP 65
9653: PPUSH
9654: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9658: LD_INT 35
9660: PPUSH
9661: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
9665: LD_EXP 65
9669: PPUSH
9670: LD_EXP 13
9674: PPUSH
9675: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
9679: LD_EXP 65
9683: PPUSH
9684: CALL_OW 310
9688: PUSH
9689: LD_EXP 13
9693: EQUAL
9694: IFFALSE 9658
// meetBelkovBrother = true ;
9696: LD_ADDR_EXP 4
9700: PUSH
9701: LD_INT 1
9703: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
9704: LD_EXP 65
9708: PPUSH
9709: LD_STRING D10-Bel-1
9711: PPUSH
9712: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
9716: LD_EXP 59
9720: PPUSH
9721: LD_STRING D10-Bur-1
9723: PPUSH
9724: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
9728: LD_EXP 65
9732: PPUSH
9733: LD_STRING D10-Bel-2
9735: PPUSH
9736: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9740: LD_EXP 59
9744: PPUSH
9745: LD_STRING D10-Bur-2
9747: PPUSH
9748: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9752: LD_EXP 64
9756: PPUSH
9757: LD_STRING D10-Kur-2a
9759: PPUSH
9760: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
9764: LD_ADDR_EXP 71
9768: PUSH
9769: EMPTY
9770: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
9771: LD_ADDR_EXP 72
9775: PUSH
9776: EMPTY
9777: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
9778: LD_ADDR_EXP 22
9782: PUSH
9783: LD_INT 1
9785: ST_TO_ADDR
// CreateBelkovTeam ;
9786: CALL 6017 0 0
// ComExitBuilding ( belkovTeam ) ;
9790: LD_EXP 70
9794: PPUSH
9795: CALL_OW 122
// wait ( 0 0$1 ) ;
9799: LD_INT 35
9801: PPUSH
9802: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9806: LD_ADDR_EXP 69
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 6
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: PPUSH
9835: CALL_OW 69
9839: PUSH
9840: LD_INT 1
9842: ARRAY
9843: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
9844: LD_ADDR_EXP 70
9848: PUSH
9849: LD_EXP 70
9853: PUSH
9854: LD_EXP 69
9858: ADD
9859: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
9860: LD_EXP 70
9864: PPUSH
9865: LD_INT 147
9867: PPUSH
9868: LD_INT 102
9870: PPUSH
9871: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
9875: LD_EXP 70
9879: PPUSH
9880: LD_INT 133
9882: PPUSH
9883: LD_INT 94
9885: PPUSH
9886: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
9890: LD_EXP 70
9894: PPUSH
9895: LD_INT 123
9897: PPUSH
9898: LD_INT 74
9900: PPUSH
9901: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
9905: LD_EXP 70
9909: PPUSH
9910: LD_INT 111
9912: PPUSH
9913: LD_INT 48
9915: PPUSH
9916: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
9920: LD_EXP 70
9924: PPUSH
9925: LD_INT 122
9927: PPUSH
9928: LD_INT 43
9930: PPUSH
9931: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
9935: LD_EXP 70
9939: PPUSH
9940: LD_INT 129
9942: PPUSH
9943: LD_INT 32
9945: PPUSH
9946: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
9950: LD_EXP 70
9954: PPUSH
9955: LD_INT 132
9957: PPUSH
9958: LD_INT 22
9960: PPUSH
9961: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9965: LD_INT 35
9967: PPUSH
9968: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9972: LD_EXP 69
9976: PPUSH
9977: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
9981: LD_EXP 69
9985: PPUSH
9986: LD_INT 10
9988: PPUSH
9989: CALL_OW 299
9993: PUSH
9994: LD_INT 10
9996: LESS
9997: IFFALSE 9965
// CenterNowOnUnits ( Kurin ) ;
9999: LD_EXP 64
10003: PPUSH
10004: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10008: LD_EXP 64
10012: PPUSH
10013: LD_STRING D10-Kur-2b
10015: PPUSH
10016: CALL_OW 88
// InGameOff ;
10020: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10024: LD_STRING M4
10026: PPUSH
10027: CALL_OW 337
// backToBeria1 = true ;
10031: LD_ADDR_EXP 15
10035: PUSH
10036: LD_INT 1
10038: ST_TO_ADDR
// end ;
10039: PPOPN 3
10041: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10042: LD_INT 9
10044: PPUSH
10045: LD_INT 22
10047: PUSH
10048: LD_INT 3
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 2
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 70
10073: PUSH
10074: LD_EXP 14
10078: AND
10079: IFFALSE 10096
10081: GO 10083
10083: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10084: LD_EXP 64
10088: PPUSH
10089: LD_STRING D1a-Kur-1a
10091: PPUSH
10092: CALL_OW 88
10096: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10097: LD_EXP 22
10101: IFFALSE 10471
10103: GO 10105
10105: DISABLE
10106: LD_INT 0
10108: PPUSH
10109: PPUSH
// begin enable ;
10110: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10111: LD_INT 10
10113: PPUSH
10114: LD_INT 22
10116: PUSH
10117: LD_INT 6
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PPUSH
10124: CALL_OW 70
10128: PUSH
10129: LD_INT 0
10131: EQUAL
10132: IFFALSE 10136
// exit ;
10134: GO 10471
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10136: LD_ADDR_VAR 0 1
10140: PUSH
10141: LD_INT 10
10143: PPUSH
10144: LD_INT 22
10146: PUSH
10147: LD_INT 6
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PPUSH
10154: CALL_OW 70
10158: PUSH
10159: FOR_IN
10160: IFFALSE 10457
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10162: LD_VAR 0 1
10166: PPUSH
10167: CALL_OW 247
10171: PUSH
10172: LD_INT 1
10174: EQUAL
10175: PUSH
10176: LD_VAR 0 1
10180: PUSH
10181: LD_EXP 61
10185: EQUAL
10186: NOT
10187: PUSH
10188: LD_VAR 0 1
10192: PUSH
10193: LD_EXP 65
10197: EQUAL
10198: NOT
10199: AND
10200: PUSH
10201: LD_VAR 0 1
10205: PUSH
10206: LD_EXP 62
10210: EQUAL
10211: NOT
10212: AND
10213: AND
10214: IFFALSE 10255
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10216: LD_ADDR_EXP 23
10220: PUSH
10221: LD_EXP 23
10225: PUSH
10226: LD_INT 1
10228: PLUS
10229: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10230: LD_ADDR_EXP 71
10234: PUSH
10235: LD_EXP 71
10239: PUSH
10240: LD_VAR 0 1
10244: ADD
10245: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10246: LD_VAR 0 1
10250: PPUSH
10251: CALL_OW 64
// end ; if unit = Kirilenkova then
10255: LD_VAR 0 1
10259: PUSH
10260: LD_EXP 62
10264: EQUAL
10265: IFFALSE 10288
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10267: LD_EXP 62
10271: PPUSH
10272: LD_STRING 02_TmpKirilenkova
10274: PPUSH
10275: CALL_OW 38
// RemoveUnit ( unit ) ;
10279: LD_VAR 0 1
10283: PPUSH
10284: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 247
10297: PUSH
10298: LD_INT 2
10300: EQUAL
10301: IFFALSE 10455
// begin driver = UnitsInside ( unit ) ;
10303: LD_ADDR_VAR 0 2
10307: PUSH
10308: LD_VAR 0 1
10312: PPUSH
10313: CALL_OW 313
10317: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10318: LD_VAR 0 2
10322: PUSH
10323: LD_INT 1
10325: ARRAY
10326: PUSH
10327: LD_EXP 61
10331: EQUAL
10332: IFFALSE 10357
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10334: LD_EXP 61
10338: PPUSH
10339: LD_STRING 02_TmpBelkov
10341: PPUSH
10342: CALL_OW 38
// RemoveUnit ( unit ) ;
10346: LD_VAR 0 1
10350: PPUSH
10351: CALL_OW 64
// end else
10355: GO 10378
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10357: LD_EXP 65
10361: PPUSH
10362: LD_STRING 02_TmpBelkov2
10364: PPUSH
10365: CALL_OW 38
// RemoveUnit ( unit ) ;
10369: LD_VAR 0 1
10373: PPUSH
10374: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
10378: LD_ADDR_EXP 72
10382: PUSH
10383: LD_EXP 72
10387: PUSH
10388: LD_VAR 0 1
10392: PPUSH
10393: CALL_OW 265
10397: PUSH
10398: LD_VAR 0 1
10402: PPUSH
10403: CALL_OW 262
10407: PUSH
10408: LD_VAR 0 1
10412: PPUSH
10413: CALL_OW 263
10417: PUSH
10418: LD_VAR 0 1
10422: PPUSH
10423: CALL_OW 264
10427: PUSH
10428: LD_VAR 0 1
10432: PPUSH
10433: CALL_OW 261
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: ADD
10445: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10446: LD_VAR 0 1
10450: PPUSH
10451: CALL_OW 64
// end ; end ;
10455: GO 10159
10457: POP
10458: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
10459: LD_EXP 71
10463: PPUSH
10464: LD_STRING 02_TmpBelkovTeam
10466: PPUSH
10467: CALL_OW 38
// end ;
10471: PPOPN 2
10473: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
10474: LD_INT 8
10476: PPUSH
10477: LD_INT 22
10479: PUSH
10480: LD_INT 3
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PPUSH
10501: CALL_OW 71
10505: PUSH
10506: LD_INT 0
10508: EQUAL
10509: PUSH
10510: LD_EXP 15
10514: AND
10515: IFFALSE 10701
10517: GO 10519
10519: DISABLE
10520: LD_INT 0
10522: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
10523: LD_ADDR_VAR 0 1
10527: PUSH
10528: LD_EXP 66
10532: PPUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 2
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PPUSH
10543: CALL_OW 72
10547: ST_TO_ADDR
// backToBeria1 = false ;
10548: LD_ADDR_EXP 15
10552: PUSH
10553: LD_INT 0
10555: ST_TO_ADDR
// canExitBase = false ;
10556: LD_ADDR_EXP 19
10560: PUSH
10561: LD_INT 0
10563: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
10564: LD_EXP 73
10568: PPUSH
10569: LD_STRING D11-Pla-1
10571: PPUSH
10572: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10576: LD_INT 22
10578: PUSH
10579: LD_INT 3
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 21
10588: PUSH
10589: LD_INT 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: PUSH
10605: LD_INT 1
10607: GREATER
10608: IFFALSE 10624
// Say ( Burlak , D11-Bur-1a ) else
10610: LD_EXP 59
10614: PPUSH
10615: LD_STRING D11-Bur-1a
10617: PPUSH
10618: CALL_OW 88
10622: GO 10636
// Say ( Burlak , D11-Bur-1 ) ;
10624: LD_EXP 59
10628: PPUSH
10629: LD_STRING D11-Bur-1
10631: PPUSH
10632: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
10636: LD_STRING M5
10638: PPUSH
10639: CALL_OW 337
// construcMoreVehicles = true ;
10643: LD_ADDR_EXP 17
10647: PUSH
10648: LD_INT 1
10650: ST_TO_ADDR
// spawnCrates = true ;
10651: LD_ADDR_EXP 21
10655: PUSH
10656: LD_INT 1
10658: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
10659: LD_VAR 0 1
10663: PPUSH
10664: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
10668: LD_VAR 0 1
10672: PPUSH
10673: LD_INT 2
10675: PPUSH
10676: LD_INT 159
10678: PPUSH
10679: LD_INT 112
10681: PPUSH
10682: LD_INT 0
10684: PPUSH
10685: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
10689: LD_VAR 0 1
10693: PPUSH
10694: LD_INT 71
10696: PPUSH
10697: CALL_OW 180
// end ;
10701: PPOPN 1
10703: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
10704: LD_EXP 18
10708: PUSH
10709: LD_INT 22
10711: PUSH
10712: LD_INT 3
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 21
10721: PUSH
10722: LD_INT 1
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: GREATEREQUAL
10738: IFFALSE 11775
10740: GO 10742
10742: DISABLE
10743: LD_INT 0
10745: PPUSH
10746: PPUSH
// begin canRemoveBelkovUnits = false ;
10747: LD_ADDR_EXP 22
10751: PUSH
10752: LD_INT 0
10754: ST_TO_ADDR
// spawnCrates = false ;
10755: LD_ADDR_EXP 21
10759: PUSH
10760: LD_INT 0
10762: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
10763: LD_INT 22
10765: PUSH
10766: LD_INT 3
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 21
10778: PUSH
10779: LD_INT 1
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: PUSH
10786: LD_INT 21
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: LIST
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: PPUSH
10805: CALL_OW 69
10809: PPUSH
10810: CALL_OW 141
// InGameOn ;
10814: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
10818: LD_EXP 73
10822: PPUSH
10823: CALL_OW 85
// DialogueOn ;
10827: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
10831: LD_EXP 59
10835: PPUSH
10836: LD_STRING D12-Bur-1
10838: PPUSH
10839: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
10843: LD_EXP 73
10847: PPUSH
10848: LD_STRING D12-Pla-1
10850: PPUSH
10851: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10855: LD_EXP 59
10859: PPUSH
10860: LD_STRING D12-Bur-2
10862: PPUSH
10863: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10867: LD_EXP 73
10871: PPUSH
10872: LD_STRING D12-Pla-2
10874: PPUSH
10875: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10879: LD_EXP 59
10883: PPUSH
10884: LD_STRING D12-Bur-3
10886: PPUSH
10887: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10891: LD_EXP 73
10895: PPUSH
10896: LD_STRING D12-Pla-3
10898: PPUSH
10899: CALL_OW 88
// DialogueOff ;
10903: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
10907: LD_INT 6
10909: PPUSH
10910: LD_INT 1
10912: PPUSH
10913: LD_INT 1
10915: PPUSH
10916: LD_INT 1
10918: PPUSH
10919: CALL_OW 80
// PrepareAmerican ;
10923: CALL 2828 0 0
// PrepareBelkovReturnTeam ;
10927: CALL 1108 0 0
// if IsOK ( Belkov ) then
10931: LD_EXP 61
10935: PPUSH
10936: CALL_OW 302
10940: IFFALSE 10954
// tmpBelkov = Belkov else
10942: LD_ADDR_VAR 0 1
10946: PUSH
10947: LD_EXP 61
10951: ST_TO_ADDR
10952: GO 10964
// tmpBelkov = Belkov2 ;
10954: LD_ADDR_VAR 0 1
10958: PUSH
10959: LD_EXP 65
10963: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
10964: LD_EXP 69
10968: PPUSH
10969: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
10973: LD_EXP 77
10977: PPUSH
10978: LD_STRING D13-Sol1-1
10980: PPUSH
10981: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
10985: LD_VAR 0 1
10989: PPUSH
10990: LD_STRING D13-Bel-1
10992: PPUSH
10993: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10997: LD_EXP 64
11001: PPUSH
11002: LD_STRING D13-Kur-1
11004: PPUSH
11005: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11009: LD_VAR 0 1
11013: PPUSH
11014: LD_STRING D13-Bel-2
11016: PPUSH
11017: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11021: LD_EXP 70
11025: PPUSH
11026: LD_INT 121
11028: PPUSH
11029: LD_INT 29
11031: PPUSH
11032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11036: LD_INT 35
11038: PPUSH
11039: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11043: LD_EXP 69
11047: PPUSH
11048: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11052: LD_ADDR_VAR 0 2
11056: PUSH
11057: LD_EXP 70
11061: PPUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 1
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: LD_INT 56
11074: PUSH
11075: EMPTY
11076: LIST
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: PPUSH
11082: CALL_OW 72
11086: PPUSH
11087: LD_EXP 69
11091: PPUSH
11092: CALL_OW 74
11096: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11097: LD_EXP 69
11101: PPUSH
11102: LD_VAR 0 2
11106: PPUSH
11107: CALL_OW 296
11111: PUSH
11112: LD_INT 5
11114: LESS
11115: IFFALSE 11128
// ComStop ( kirovVehicle ) else
11117: LD_EXP 69
11121: PPUSH
11122: CALL_OW 141
11126: GO 11143
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11128: LD_EXP 70
11132: PPUSH
11133: LD_INT 121
11135: PPUSH
11136: LD_INT 29
11138: PPUSH
11139: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11143: LD_EXP 70
11147: PPUSH
11148: LD_EXP 77
11152: PPUSH
11153: CALL_OW 74
11157: PPUSH
11158: LD_EXP 77
11162: PPUSH
11163: CALL_OW 296
11167: PUSH
11168: LD_INT 5
11170: LESS
11171: IFFALSE 11036
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11173: LD_EXP 69
11177: PUSH
11178: LD_EXP 77
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PPUSH
11187: CALL_OW 87
// ComWalk ( trapTeam ) ;
11191: LD_EXP 78
11195: PPUSH
11196: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11200: LD_EXP 78
11204: PPUSH
11205: LD_EXP 69
11209: PPUSH
11210: CALL_OW 179
// ComStop ( belkovTeam ) ;
11214: LD_EXP 70
11218: PPUSH
11219: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11223: LD_EXP 70
11227: PPUSH
11228: LD_EXP 77
11232: PPUSH
11233: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11237: LD_INT 25
11239: PPUSH
11240: LD_INT 22
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 21
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PPUSH
11264: CALL_OW 70
11268: PPUSH
11269: LD_INT 111
11271: PPUSH
11272: LD_INT 13
11274: PPUSH
11275: CALL_OW 171
// music_class = music_combat ;
11279: LD_ADDR_OWVAR 72
11283: PUSH
11284: LD_INT 1
11286: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11287: LD_INT 35
11289: PPUSH
11290: CALL_OW 67
// DialogueOn ;
11294: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11298: LD_EXP 77
11302: PPUSH
11303: LD_STRING D14-Sol1-1
11305: PPUSH
11306: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11310: LD_VAR 0 1
11314: PPUSH
11315: LD_STRING D14-Bel-1
11317: PPUSH
11318: CALL_OW 88
// DialogueOff ;
11322: CALL_OW 7
// immortalBelkovTeam = true ;
11326: LD_ADDR_EXP 24
11330: PUSH
11331: LD_INT 1
11333: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11334: LD_INT 6
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: LD_INT 2
11342: PPUSH
11343: LD_INT 1
11345: PPUSH
11346: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
11350: LD_EXP 70
11354: PPUSH
11355: LD_INT 107
11357: PPUSH
11358: LD_INT 5
11360: PPUSH
11361: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
11365: LD_EXP 69
11369: PPUSH
11370: LD_INT 107
11372: PPUSH
11373: LD_INT 5
11375: PPUSH
11376: CALL_OW 111
// wait ( 0 0$2 ) ;
11380: LD_INT 70
11382: PPUSH
11383: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
11387: LD_EXP 70
11391: PPUSH
11392: LD_INT 101
11394: PPUSH
11395: LD_INT 19
11397: PPUSH
11398: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
11402: LD_EXP 69
11406: PPUSH
11407: LD_INT 101
11409: PPUSH
11410: LD_INT 19
11412: PPUSH
11413: CALL_OW 111
// wait ( 0 0$5 ) ;
11417: LD_INT 175
11419: PPUSH
11420: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
11424: LD_VAR 0 1
11428: PPUSH
11429: CALL_OW 121
// wait ( 0 0$1 ) ;
11433: LD_INT 35
11435: PPUSH
11436: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
11440: LD_EXP 77
11444: PPUSH
11445: LD_EXP 69
11449: PPUSH
11450: CALL_OW 120
// AddComHold ( trapTeam ) ;
11454: LD_EXP 78
11458: PPUSH
11459: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
11463: LD_EXP 70
11467: PPUSH
11468: LD_INT 88
11470: PPUSH
11471: LD_INT 18
11473: PPUSH
11474: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11478: LD_INT 35
11480: PPUSH
11481: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
11485: LD_VAR 0 1
11489: PPUSH
11490: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
11494: LD_VAR 0 1
11498: PPUSH
11499: LD_INT 15
11501: PPUSH
11502: CALL_OW 308
11506: IFFALSE 11478
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 118 , 25 ) ;
11508: LD_INT 22
11510: PUSH
11511: LD_INT 1
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: PUSH
11518: LD_INT 21
11520: PUSH
11521: LD_INT 2
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: PPUSH
11532: CALL_OW 69
11536: PPUSH
11537: LD_INT 118
11539: PPUSH
11540: LD_INT 25
11542: PPUSH
11543: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
11547: LD_VAR 0 1
11551: PPUSH
11552: LD_STRING D14-Bel-1a
11554: PPUSH
11555: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11559: LD_EXP 64
11563: PPUSH
11564: LD_STRING D14-Kur-1
11566: PPUSH
11567: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
11571: LD_VAR 0 1
11575: PPUSH
11576: LD_STRING D14-Bel-2
11578: PPUSH
11579: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11583: LD_EXP 64
11587: PPUSH
11588: LD_STRING D14-Kur-2
11590: PPUSH
11591: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
11595: LD_EXP 73
11599: PPUSH
11600: CALL_OW 85
// wait ( 0 0$2 ) ;
11604: LD_INT 70
11606: PPUSH
11607: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
11611: LD_EXP 59
11615: PPUSH
11616: LD_STRING D14a-Bur-1
11618: PPUSH
11619: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11623: LD_EXP 73
11627: PPUSH
11628: LD_STRING D14a-Pla-1
11630: PPUSH
11631: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11635: LD_EXP 59
11639: PPUSH
11640: LD_STRING D14a-Bur-2
11642: PPUSH
11643: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11647: LD_EXP 73
11651: PPUSH
11652: LD_STRING D14a-Pla-2
11654: PPUSH
11655: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11659: LD_EXP 59
11663: PPUSH
11664: LD_STRING D14a-Bur-3
11666: PPUSH
11667: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11671: LD_EXP 73
11675: PPUSH
11676: LD_STRING D14a-Pla-3
11678: PPUSH
11679: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11683: LD_EXP 59
11687: PPUSH
11688: LD_STRING D14a-Bur-4
11690: PPUSH
11691: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11695: LD_EXP 73
11699: PPUSH
11700: LD_STRING D14a-Pla-4
11702: PPUSH
11703: CALL_OW 88
// InGameOff ;
11707: CALL_OW 9
// immortalBelkovTeam = false ;
11711: LD_ADDR_EXP 24
11715: PUSH
11716: LD_INT 0
11718: ST_TO_ADDR
// activateAMAI = true ;
11719: LD_ADDR_EXP 26
11723: PUSH
11724: LD_INT 1
11726: ST_TO_ADDR
// canExitBase = true ;
11727: LD_ADDR_EXP 19
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
// canExploreMap = true ;
11735: LD_ADDR_EXP 20
11739: PUSH
11740: LD_INT 1
11742: ST_TO_ADDR
// construcMoreVehicles = false ;
11743: LD_ADDR_EXP 17
11747: PUSH
11748: LD_INT 0
11750: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
11751: LD_STRING M6
11753: PPUSH
11754: CALL_OW 337
// music_class = 0 ;
11758: LD_ADDR_OWVAR 72
11762: PUSH
11763: LD_INT 0
11765: ST_TO_ADDR
// ComFree ( trapTeam ) ;
11766: LD_EXP 78
11770: PPUSH
11771: CALL_OW 139
// end ;
11775: PPOPN 2
11777: END
// every 0 0$1 trigger immortalBelkovTeam do
11778: LD_EXP 24
11782: IFFALSE 11800
11784: GO 11786
11786: DISABLE
// begin enable ;
11787: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
11788: LD_EXP 70
11792: PPUSH
11793: LD_INT 1000
11795: PPUSH
11796: CALL_OW 234
// end ;
11800: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
11801: LD_EXP 20
11805: PUSH
11806: LD_EXP 35
11810: NOT
11811: AND
11812: PUSH
11813: LD_EXP 58
11817: PUSH
11818: LD_INT 0
11820: GREATER
11821: AND
11822: IFFALSE 11842
11824: GO 11826
11826: DISABLE
// begin enable ;
11827: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
11828: LD_ADDR_EXP 58
11832: PUSH
11833: LD_EXP 58
11837: PUSH
11838: LD_INT 35
11840: MINUS
11841: ST_TO_ADDR
// end ;
11842: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
11843: LD_EXP 20
11847: IFFALSE 11931
11849: GO 11851
11851: DISABLE
11852: LD_INT 0
11854: PPUSH
11855: PPUSH
// begin tmp = trapTeam ;
11856: LD_ADDR_VAR 0 2
11860: PUSH
11861: LD_EXP 78
11865: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_VAR 0 2
11875: PUSH
11876: LD_EXP 77
11880: DIFF
11881: ST_TO_ADDR
// for i := 1 to rand ( 3 , 4 ) do
11882: LD_ADDR_VAR 0 1
11886: PUSH
11887: DOUBLE
11888: LD_INT 1
11890: DEC
11891: ST_TO_ADDR
11892: LD_INT 3
11894: PPUSH
11895: LD_INT 4
11897: PPUSH
11898: CALL_OW 12
11902: PUSH
11903: FOR_TO
11904: IFFALSE 11929
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
11906: LD_VAR 0 2
11910: PUSH
11911: LD_VAR 0 1
11915: ARRAY
11916: PPUSH
11917: LD_INT 87
11919: PPUSH
11920: LD_INT 18
11922: PPUSH
11923: CALL_OW 114
11927: GO 11903
11929: POP
11930: POP
// end ;
11931: PPOPN 2
11933: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
11934: LD_EXP 58
11938: PUSH
11939: LD_INT 70
11941: LESS
11942: PUSH
11943: LD_EXP 78
11947: AND
11948: IFFALSE 11969
11950: GO 11952
11952: DISABLE
// begin enable ;
11953: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
11954: LD_EXP 70
11958: PPUSH
11959: LD_INT 120
11961: PPUSH
11962: LD_INT 28
11964: PPUSH
11965: CALL_OW 114
// end ;
11969: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
11970: LD_EXP 27
11974: NOT
11975: PUSH
11976: LD_EXP 28
11980: NOT
11981: OR
11982: IFFALSE 12422
11984: GO 11986
11986: DISABLE
11987: LD_INT 0
11989: PPUSH
// begin enable ;
11990: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
11991: LD_ADDR_VAR 0 1
11995: PUSH
11996: LD_INT 22
11998: PUSH
11999: LD_INT 1
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 21
12008: PUSH
12009: LD_INT 3
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 30
12018: PUSH
12019: LD_INT 31
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 69
12035: PUSH
12036: FOR_IN
12037: IFFALSE 12420
// begin if See ( 3 , bunker ) then
12039: LD_INT 3
12041: PPUSH
12042: LD_VAR 0 1
12046: PPUSH
12047: CALL_OW 292
12051: IFFALSE 12418
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
12053: LD_VAR 0 1
12057: PUSH
12058: LD_EXP 79
12062: IN
12063: PUSH
12064: LD_EXP 27
12068: NOT
12069: AND
12070: PUSH
12071: LD_INT 18
12073: PPUSH
12074: LD_INT 22
12076: PUSH
12077: LD_INT 3
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: PPUSH
12087: CALL_OW 70
12091: NOT
12092: AND
12093: IFFALSE 12264
// begin sawLeftBunker = true ;
12095: LD_ADDR_EXP 27
12099: PUSH
12100: LD_INT 1
12102: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12103: LD_VAR 0 1
12107: PPUSH
12108: CALL_OW 85
// DialogueOn ;
12112: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
12116: LD_EXP 59
12120: PPUSH
12121: LD_STRING D15-Bur-1
12123: PPUSH
12124: CALL_OW 88
// if IsOK ( Gnyevko ) then
12128: LD_EXP 60
12132: PPUSH
12133: CALL_OW 302
12137: IFFALSE 12151
// Say ( Gnyevko , D15-Gny-1 ) ;
12139: LD_EXP 60
12143: PPUSH
12144: LD_STRING D15-Gny-1
12146: PPUSH
12147: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12151: LD_EXP 67
12155: PPUSH
12156: CALL_OW 302
12160: IFFALSE 12174
// Say ( Kovalyuk , D15-Kov-1 ) ;
12162: LD_EXP 67
12166: PPUSH
12167: LD_STRING D15-Kov-1
12169: PPUSH
12170: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
12174: LD_EXP 59
12178: PPUSH
12179: LD_STRING D15-Bur-2
12181: PPUSH
12182: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12186: LD_EXP 67
12190: PPUSH
12191: CALL_OW 302
12195: IFFALSE 12209
// Say ( Kovalyuk , D15-Kov-2 ) ;
12197: LD_EXP 67
12201: PPUSH
12202: LD_STRING D15-Kov-2
12204: PPUSH
12205: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
12209: LD_EXP 59
12213: PPUSH
12214: LD_STRING D15-Bur-3
12216: PPUSH
12217: CALL_OW 88
// DialogueOff ;
12221: CALL_OW 7
// if raportForPlatonov = 2 then
12225: LD_EXP 37
12229: PUSH
12230: LD_INT 2
12232: EQUAL
12233: IFFALSE 12245
// raportForPlatonov = 1 else
12235: LD_ADDR_EXP 37
12239: PUSH
12240: LD_INT 1
12242: ST_TO_ADDR
12243: GO 12253
// raportForPlatonov = 3 ;
12245: LD_ADDR_EXP 37
12249: PUSH
12250: LD_INT 3
12252: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
12253: LD_STRING M7
12255: PPUSH
12256: CALL_OW 337
// exit ;
12260: POP
12261: POP
12262: GO 12422
// end ; if bunker in rightBunkers and not sawRightBunker then
12264: LD_VAR 0 1
12268: PUSH
12269: LD_EXP 80
12273: IN
12274: PUSH
12275: LD_EXP 28
12279: NOT
12280: AND
12281: IFFALSE 12418
// begin sawRightBunker = true ;
12283: LD_ADDR_EXP 28
12287: PUSH
12288: LD_INT 1
12290: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12291: LD_VAR 0 1
12295: PPUSH
12296: CALL_OW 85
// DialogueOn ;
12300: CALL_OW 6
// if IsOK ( Kovalyuk ) then
12304: LD_EXP 67
12308: PPUSH
12309: CALL_OW 302
12313: IFFALSE 12347
// begin if sawLeftBunker then
12315: LD_EXP 27
12319: IFFALSE 12335
// Say ( Kovalyuk , D16-Kov-1a ) else
12321: LD_EXP 67
12325: PPUSH
12326: LD_STRING D16-Kov-1a
12328: PPUSH
12329: CALL_OW 88
12333: GO 12347
// Say ( Kovalyuk , D16-Kov-1 ) ;
12335: LD_EXP 67
12339: PPUSH
12340: LD_STRING D16-Kov-1
12342: PPUSH
12343: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
12347: LD_EXP 59
12351: PPUSH
12352: LD_STRING D16-Bur-1
12354: PPUSH
12355: CALL_OW 88
// if IsOK ( Gnyevko ) then
12359: LD_EXP 60
12363: PPUSH
12364: CALL_OW 302
12368: IFFALSE 12382
// Say ( Gnyevko , D16-Gny-1 ) ;
12370: LD_EXP 60
12374: PPUSH
12375: LD_STRING D16-Gny-1
12377: PPUSH
12378: CALL_OW 88
// DialogueOff ;
12382: CALL_OW 7
// if raportForPlatonov = 3 then
12386: LD_EXP 37
12390: PUSH
12391: LD_INT 3
12393: EQUAL
12394: IFFALSE 12406
// raportForPlatonov = 1 else
12396: LD_ADDR_EXP 37
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
12404: GO 12414
// raportForPlatonov = 2 ;
12406: LD_ADDR_EXP 37
12410: PUSH
12411: LD_INT 2
12413: ST_TO_ADDR
// exit ;
12414: POP
12415: POP
12416: GO 12422
// end ; end ; end ;
12418: GO 12036
12420: POP
12421: POP
// end ;
12422: PPOPN 1
12424: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
12425: LD_EXP 30
12429: NOT
12430: PUSH
12431: LD_EXP 80
12435: AND
12436: PUSH
12437: LD_EXP 67
12441: PPUSH
12442: CALL_OW 302
12446: PUSH
12447: LD_EXP 60
12451: PPUSH
12452: CALL_OW 302
12456: OR
12457: AND
12458: IFFALSE 12646
12460: GO 12462
12462: DISABLE
12463: LD_INT 0
12465: PPUSH
// begin enable ;
12466: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12467: LD_ADDR_VAR 0 1
12471: PUSH
12472: LD_INT 22
12474: PUSH
12475: LD_INT 3
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: PUSH
12482: LD_INT 2
12484: PUSH
12485: LD_INT 21
12487: PUSH
12488: LD_INT 1
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12644
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
12522: LD_VAR 0 1
12526: PPUSH
12527: CALL_OW 320
12531: PUSH
12532: LD_EXP 80
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: EQUAL
12541: PUSH
12542: LD_VAR 0 1
12546: PPUSH
12547: CALL_OW 320
12551: PUSH
12552: LD_EXP 80
12556: PUSH
12557: LD_INT 2
12559: ARRAY
12560: EQUAL
12561: OR
12562: IFFALSE 12642
// begin dialogAttackRightBunkers = true ;
12564: LD_ADDR_EXP 30
12568: PUSH
12569: LD_INT 1
12571: ST_TO_ADDR
// DialogueOn ;
12572: CALL_OW 6
// if IsOK ( Gnyevko ) then
12576: LD_EXP 60
12580: PPUSH
12581: CALL_OW 302
12585: IFFALSE 12599
// Say ( Gnyevko , D16A-Gny-1 ) ;
12587: LD_EXP 60
12591: PPUSH
12592: LD_STRING D16A-Gny-1
12594: PPUSH
12595: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12599: LD_EXP 67
12603: PPUSH
12604: CALL_OW 302
12608: IFFALSE 12622
// Say ( Kovalyuk , D16A-Kov-1 ) ;
12610: LD_EXP 67
12614: PPUSH
12615: LD_STRING D16A-Kov-1
12617: PPUSH
12618: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
12622: LD_EXP 59
12626: PPUSH
12627: LD_STRING D16A-Bur-1
12629: PPUSH
12630: CALL_OW 88
// DialogueOff ;
12634: CALL_OW 7
// exit ;
12638: POP
12639: POP
12640: GO 12646
// end ; end ;
12642: GO 12519
12644: POP
12645: POP
// end ;
12646: PPOPN 1
12648: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
12649: LD_INT 18
12651: PPUSH
12652: LD_INT 22
12654: PUSH
12655: LD_INT 3
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: PPUSH
12665: CALL_OW 70
12669: PUSH
12670: LD_EXP 27
12674: NOT
12675: AND
12676: IFFALSE 13059
12678: GO 12680
12680: DISABLE
12681: LD_INT 0
12683: PPUSH
// begin sawLeftBunker = true ;
12684: LD_ADDR_EXP 27
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if playerGetSupport then
12692: LD_EXP 32
12696: IFFALSE 12715
// decsToChoose = [ 1 , 3 ] else
12698: LD_ADDR_VAR 0 1
12702: PUSH
12703: LD_INT 1
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: ST_TO_ADDR
12713: GO 12734
// decsToChoose = [ 1 , 2 , 3 ] ;
12715: LD_ADDR_VAR 0 1
12719: PUSH
12720: LD_INT 1
12722: PUSH
12723: LD_INT 2
12725: PUSH
12726: LD_INT 3
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
12734: LD_STRING QAttackBw
12736: PPUSH
12737: LD_VAR 0 1
12741: PPUSH
12742: CALL_OW 98
12746: PUSH
12747: LD_INT 1
12749: DOUBLE
12750: EQUAL
12751: IFTRUE 12755
12753: GO 12848
12755: POP
// begin DialogueOn ;
12756: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12760: LD_EXP 59
12764: PPUSH
12765: LD_STRING D17-Bur-1
12767: PPUSH
12768: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12772: LD_EXP 73
12776: PPUSH
12777: LD_STRING D17-Pla-1
12779: PPUSH
12780: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12784: LD_EXP 59
12788: PPUSH
12789: LD_STRING D17-Bur-2
12791: PPUSH
12792: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12796: LD_EXP 73
12800: PPUSH
12801: LD_STRING D17-Pla-2
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
12812: LD_EXP 40
12816: PUSH
12817: LD_INT 2
12819: PUSH
12820: LD_INT 3
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: IN
12827: NOT
12828: IFFALSE 12846
// begin initiative = 1 ;
12830: LD_ADDR_EXP 40
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// platonovOpinion = 2 ;
12838: LD_ADDR_EXP 5
12842: PUSH
12843: LD_INT 2
12845: ST_TO_ADDR
// end ; end ; 2 :
12846: GO 12989
12848: LD_INT 2
12850: DOUBLE
12851: EQUAL
12852: IFTRUE 12856
12854: GO 12961
12856: POP
// begin DialogueOn ;
12857: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12861: LD_EXP 59
12865: PPUSH
12866: LD_STRING D18-Bur-1
12868: PPUSH
12869: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12873: LD_EXP 73
12877: PPUSH
12878: LD_STRING D18-Pla-1
12880: PPUSH
12881: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12885: LD_EXP 59
12889: PPUSH
12890: LD_STRING D18-Bur-2
12892: PPUSH
12893: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
12897: LD_EXP 73
12901: PPUSH
12902: LD_STRING D18-Pla-2
12904: PPUSH
12905: CALL_OW 94
// DialogueOff ;
12909: CALL_OW 7
// playerGetSupport = true ;
12913: LD_ADDR_EXP 32
12917: PUSH
12918: LD_INT 1
12920: ST_TO_ADDR
// medalForGetSupport = false ;
12921: LD_ADDR_EXP 38
12925: PUSH
12926: LD_INT 0
12928: ST_TO_ADDR
// PlatonovSendSupport ;
12929: CALL 6475 0 0
// if initiative <> 3 then
12933: LD_EXP 40
12937: PUSH
12938: LD_INT 3
12940: NONEQUAL
12941: IFFALSE 12959
// begin initiative = 1 ;
12943: LD_ADDR_EXP 40
12947: PUSH
12948: LD_INT 1
12950: ST_TO_ADDR
// platonovOpinion = 2 ;
12951: LD_ADDR_EXP 5
12955: PUSH
12956: LD_INT 2
12958: ST_TO_ADDR
// end ; end ; 3 :
12959: GO 12989
12961: LD_INT 3
12963: DOUBLE
12964: EQUAL
12965: IFTRUE 12969
12967: GO 12988
12969: POP
// begin initiative = 3 ;
12970: LD_ADDR_EXP 40
12974: PUSH
12975: LD_INT 3
12977: ST_TO_ADDR
// platonovOpinion = 0 ;
12978: LD_ADDR_EXP 5
12982: PUSH
12983: LD_INT 0
12985: ST_TO_ADDR
// end ; end ;
12986: GO 12989
12988: POP
// if IsOK ( Gnyevko ) then
12989: LD_EXP 60
12993: PPUSH
12994: CALL_OW 302
12998: IFFALSE 13024
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13000: LD_EXP 60
13004: PPUSH
13005: LD_STRING D19-Gny-1
13007: PPUSH
13008: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13012: LD_EXP 59
13016: PPUSH
13017: LD_STRING D19-Bur-1
13019: PPUSH
13020: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
13024: LD_EXP 67
13028: PPUSH
13029: CALL_OW 302
13033: IFFALSE 13059
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13035: LD_EXP 67
13039: PPUSH
13040: LD_STRING D19-Kov-1
13042: PPUSH
13043: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13047: LD_EXP 59
13051: PPUSH
13052: LD_STRING D19-Bur-2
13054: PPUSH
13055: CALL_OW 88
// end ; end ;
13059: PPOPN 1
13061: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13062: LD_EXP 29
13066: NOT
13067: PUSH
13068: LD_EXP 79
13072: AND
13073: PUSH
13074: LD_INT 18
13076: PPUSH
13077: LD_INT 22
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: EMPTY
13088: LIST
13089: PPUSH
13090: CALL_OW 70
13094: PUSH
13095: LD_INT 0
13097: EQUAL
13098: AND
13099: PUSH
13100: LD_EXP 67
13104: PPUSH
13105: CALL_OW 302
13109: PUSH
13110: LD_EXP 60
13114: PPUSH
13115: CALL_OW 302
13119: OR
13120: AND
13121: IFFALSE 13309
13123: GO 13125
13125: DISABLE
13126: LD_INT 0
13128: PPUSH
// begin enable ;
13129: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13130: LD_ADDR_VAR 0 1
13134: PUSH
13135: LD_INT 22
13137: PUSH
13138: LD_INT 3
13140: PUSH
13141: EMPTY
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 2
13147: PUSH
13148: LD_INT 21
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 21
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PPUSH
13177: CALL_OW 69
13181: PUSH
13182: FOR_IN
13183: IFFALSE 13307
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
13185: LD_VAR 0 1
13189: PPUSH
13190: CALL_OW 320
13194: PUSH
13195: LD_EXP 79
13199: PUSH
13200: LD_INT 1
13202: ARRAY
13203: EQUAL
13204: PUSH
13205: LD_VAR 0 1
13209: PPUSH
13210: CALL_OW 320
13214: PUSH
13215: LD_EXP 79
13219: PUSH
13220: LD_INT 2
13222: ARRAY
13223: EQUAL
13224: OR
13225: IFFALSE 13305
// begin dialogAttackLeftBunkers = true ;
13227: LD_ADDR_EXP 29
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// DialogueOn ;
13235: CALL_OW 6
// if IsOK ( Gnyevko ) then
13239: LD_EXP 60
13243: PPUSH
13244: CALL_OW 302
13248: IFFALSE 13262
// Say ( Gnyevko , D19A-Gny-1 ) ;
13250: LD_EXP 60
13254: PPUSH
13255: LD_STRING D19A-Gny-1
13257: PPUSH
13258: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13262: LD_EXP 67
13266: PPUSH
13267: CALL_OW 302
13271: IFFALSE 13285
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13273: LD_EXP 67
13277: PPUSH
13278: LD_STRING D19A-Kov-1
13280: PPUSH
13281: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13285: LD_EXP 59
13289: PPUSH
13290: LD_STRING D16A-Bur-1
13292: PPUSH
13293: CALL_OW 88
// DialogueOff ;
13297: CALL_OW 7
// exit ;
13301: POP
13302: POP
13303: GO 13309
// end ; end ;
13305: GO 13182
13307: POP
13308: POP
// end ;
13309: PPOPN 1
13311: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13312: LD_EXP 79
13316: NOT
13317: PUSH
13318: LD_INT 17
13320: PPUSH
13321: LD_INT 22
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 21
13333: PUSH
13334: LD_INT 3
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 30
13343: PUSH
13344: LD_INT 31
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 50
13353: PUSH
13354: EMPTY
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: PPUSH
13363: CALL_OW 70
13367: PUSH
13368: LD_INT 0
13370: EQUAL
13371: OR
13372: PUSH
13373: LD_EXP 20
13377: AND
13378: IFFALSE 13429
13380: GO 13382
13382: DISABLE
// begin leftBunkers = [ ] ;
13383: LD_ADDR_EXP 79
13387: PUSH
13388: EMPTY
13389: ST_TO_ADDR
// DialogueOn ;
13390: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
13394: LD_EXP 59
13398: PPUSH
13399: LD_STRING D20-Bur-1
13401: PPUSH
13402: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
13406: LD_EXP 73
13410: PPUSH
13411: LD_STRING D20-Pla-1
13413: PPUSH
13414: CALL_OW 88
// DialogueOff ;
13418: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
13422: LD_STRING M8
13424: PPUSH
13425: CALL_OW 337
// end ;
13429: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13430: LD_EXP 80
13434: NOT
13435: PUSH
13436: LD_INT 16
13438: PPUSH
13439: LD_INT 22
13441: PUSH
13442: LD_INT 1
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 21
13451: PUSH
13452: LD_INT 3
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 30
13461: PUSH
13462: LD_INT 31
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 50
13471: PUSH
13472: EMPTY
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 70
13485: PUSH
13486: LD_INT 0
13488: EQUAL
13489: OR
13490: PUSH
13491: LD_EXP 20
13495: AND
13496: IFFALSE 13540
13498: GO 13500
13500: DISABLE
// begin rightBunkers = [ ] ;
13501: LD_ADDR_EXP 80
13505: PUSH
13506: EMPTY
13507: ST_TO_ADDR
// DialogueOn ;
13508: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
13512: LD_EXP 59
13516: PPUSH
13517: LD_STRING D20a-Bur-1
13519: PPUSH
13520: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
13524: LD_EXP 73
13528: PPUSH
13529: LD_STRING D20a-Pla-1
13531: PPUSH
13532: CALL_OW 88
// DialogueOff ;
13536: CALL_OW 7
// end ;
13540: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
13541: LD_EXP 33
13545: NOT
13546: PUSH
13547: LD_EXP 70
13551: AND
13552: IFFALSE 14047
13554: GO 13556
13556: DISABLE
13557: LD_INT 0
13559: PPUSH
13560: PPUSH
13561: PPUSH
// begin enable ;
13562: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13563: LD_ADDR_VAR 0 1
13567: PUSH
13568: LD_INT 22
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 2
13580: PUSH
13581: LD_INT 21
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 2
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 69
13614: PUSH
13615: FOR_IN
13616: IFFALSE 14045
// for trapUnit in trapTeam do
13618: LD_ADDR_VAR 0 2
13622: PUSH
13623: LD_EXP 78
13627: PUSH
13628: FOR_IN
13629: IFFALSE 14041
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
13631: LD_VAR 0 1
13635: PPUSH
13636: LD_VAR 0 2
13640: PPUSH
13641: CALL_OW 296
13645: PUSH
13646: LD_INT 16
13648: LESS
13649: IFFALSE 14039
// begin saveBelkovDecision = true ;
13651: LD_ADDR_EXP 33
13655: PUSH
13656: LD_INT 1
13658: ST_TO_ADDR
// if playerGetSupport then
13659: LD_EXP 32
13663: IFFALSE 13682
// decsToChoose = [ 1 , 3 ] else
13665: LD_ADDR_VAR 0 3
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: LD_INT 3
13675: PUSH
13676: EMPTY
13677: LIST
13678: LIST
13679: ST_TO_ADDR
13680: GO 13701
// decsToChoose = [ 1 , 2 , 3 ] ;
13682: LD_ADDR_VAR 0 3
13686: PUSH
13687: LD_INT 1
13689: PUSH
13690: LD_INT 2
13692: PUSH
13693: LD_INT 3
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: LIST
13700: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
13701: LD_STRING QAttackAm
13703: PPUSH
13704: LD_VAR 0 3
13708: PPUSH
13709: CALL_OW 98
13713: PUSH
13714: LD_INT 1
13716: DOUBLE
13717: EQUAL
13718: IFTRUE 13722
13720: GO 13791
13722: POP
// begin DialogueOn ;
13723: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13727: LD_EXP 59
13731: PPUSH
13732: LD_STRING D21-Bur-1
13734: PPUSH
13735: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13739: LD_EXP 73
13743: PPUSH
13744: LD_STRING D21-Pla-1
13746: PPUSH
13747: CALL_OW 94
// DialogueOff ;
13751: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
13755: LD_EXP 40
13759: PUSH
13760: LD_INT 2
13762: PUSH
13763: LD_INT 3
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: IN
13770: NOT
13771: IFFALSE 13789
// begin initiative = 1 ;
13773: LD_ADDR_EXP 40
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// platonovOpinion = 2 ;
13781: LD_ADDR_EXP 5
13785: PUSH
13786: LD_INT 2
13788: ST_TO_ADDR
// end ; end ; 2 :
13789: GO 13983
13791: LD_INT 2
13793: DOUBLE
13794: EQUAL
13795: IFTRUE 13799
13797: GO 13955
13799: POP
// begin DialogueOn ;
13800: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13804: LD_EXP 59
13808: PPUSH
13809: LD_STRING D22-Bur-1
13811: PPUSH
13812: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
13816: LD_EXP 32
13820: PUSH
13821: LD_EXP 79
13825: PUSH
13826: LD_INT 0
13828: EQUAL
13829: PUSH
13830: LD_EXP 80
13834: PUSH
13835: LD_INT 0
13837: EQUAL
13838: OR
13839: AND
13840: IFFALSE 13854
// Say ( Platonov , D22-Pla-1b ) ;
13842: LD_EXP 73
13846: PPUSH
13847: LD_STRING D22-Pla-1b
13849: PPUSH
13850: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
13854: LD_EXP 32
13858: PUSH
13859: LD_EXP 79
13863: PUSH
13864: LD_EXP 80
13868: OR
13869: AND
13870: IFFALSE 13884
// Say ( Platonov , D22-Pla-1a ) ;
13872: LD_EXP 73
13876: PPUSH
13877: LD_STRING D22-Pla-1a
13879: PPUSH
13880: CALL_OW 88
// if not playerGetSupport then
13884: LD_EXP 32
13888: NOT
13889: IFFALSE 13923
// begin Say ( Platonov , D22-Pla-1 ) ;
13891: LD_EXP 73
13895: PPUSH
13896: LD_STRING D22-Pla-1
13898: PPUSH
13899: CALL_OW 88
// playerGetSupport = true ;
13903: LD_ADDR_EXP 32
13907: PUSH
13908: LD_INT 1
13910: ST_TO_ADDR
// medalForGetSupport = false ;
13911: LD_ADDR_EXP 38
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// PlatonovSendSupport ;
13919: CALL 6475 0 0
// end ; DialogueOff ;
13923: CALL_OW 7
// if initiative <> 3 then
13927: LD_EXP 40
13931: PUSH
13932: LD_INT 3
13934: NONEQUAL
13935: IFFALSE 13953
// begin initiative = 2 ;
13937: LD_ADDR_EXP 40
13941: PUSH
13942: LD_INT 2
13944: ST_TO_ADDR
// platonovOpinion = 1 ;
13945: LD_ADDR_EXP 5
13949: PUSH
13950: LD_INT 1
13952: ST_TO_ADDR
// end ; end ; 3 :
13953: GO 13983
13955: LD_INT 3
13957: DOUBLE
13958: EQUAL
13959: IFTRUE 13963
13961: GO 13982
13963: POP
// begin initiative = 3 ;
13964: LD_ADDR_EXP 40
13968: PUSH
13969: LD_INT 3
13971: ST_TO_ADDR
// platonovOpinion = 0 ;
13972: LD_ADDR_EXP 5
13976: PUSH
13977: LD_INT 0
13979: ST_TO_ADDR
// end ; end ;
13980: GO 13983
13982: POP
// if IsOK ( Gnyevko ) then
13983: LD_EXP 60
13987: PPUSH
13988: CALL_OW 302
13992: IFFALSE 14018
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13994: LD_EXP 60
13998: PPUSH
13999: LD_STRING D23-Gny-1
14001: PPUSH
14002: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
14006: LD_EXP 59
14010: PPUSH
14011: LD_STRING D23-Bur-1
14013: PPUSH
14014: CALL_OW 88
// end ; saveBelkovObjective = true ;
14018: LD_ADDR_EXP 34
14022: PUSH
14023: LD_INT 1
14025: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
14026: LD_STRING M9
14028: PPUSH
14029: CALL_OW 337
// exit ;
14033: POP
14034: POP
14035: POP
14036: POP
14037: GO 14047
// end ;
14039: GO 13628
14041: POP
14042: POP
14043: GO 13615
14045: POP
14046: POP
// end ;
14047: PPOPN 3
14049: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
14050: LD_EXP 20
14054: PUSH
14055: LD_EXP 78
14059: NOT
14060: AND
14061: PUSH
14062: LD_EXP 35
14066: NOT
14067: AND
14068: IFFALSE 14100
14070: GO 14072
14072: DISABLE
// begin belkovSaved = true ;
14073: LD_ADDR_EXP 35
14077: PUSH
14078: LD_INT 1
14080: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
14081: LD_EXP 70
14085: PPUSH
14086: LD_INT 3
14088: PPUSH
14089: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
14093: LD_STRING M9a
14095: PPUSH
14096: CALL_OW 337
// end ;
14100: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
14101: LD_EXP 33
14105: PUSH
14106: LD_EXP 61
14110: PPUSH
14111: CALL_OW 301
14115: PUSH
14116: LD_EXP 65
14120: PPUSH
14121: CALL_OW 301
14125: PUSH
14126: LD_EXP 61
14130: PPUSH
14131: CALL_OW 255
14135: PUSH
14136: LD_INT 6
14138: EQUAL
14139: PUSH
14140: LD_EXP 65
14144: PPUSH
14145: CALL_OW 255
14149: PUSH
14150: LD_INT 6
14152: EQUAL
14153: OR
14154: AND
14155: OR
14156: AND
14157: IFFALSE 14177
14159: GO 14161
14161: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
14162: LD_STRING M9a
14164: PPUSH
14165: CALL_OW 337
// saveBelkovObjective = false ;
14169: LD_ADDR_EXP 34
14173: PUSH
14174: LD_INT 0
14176: ST_TO_ADDR
// end ;
14177: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
14178: LD_EXP 35
14182: PUSH
14183: LD_EXP 59
14187: PPUSH
14188: LD_EXP 61
14192: PPUSH
14193: CALL_OW 296
14197: PUSH
14198: LD_INT 14
14200: LESS
14201: PUSH
14202: LD_EXP 59
14206: PPUSH
14207: LD_EXP 65
14211: PPUSH
14212: CALL_OW 296
14216: PUSH
14217: LD_INT 14
14219: LESS
14220: OR
14221: AND
14222: IFFALSE 14496
14224: GO 14226
14226: DISABLE
// begin InGameOn ;
14227: CALL_OW 8
// if IsOk ( Belkov ) then
14231: LD_EXP 61
14235: PPUSH
14236: CALL_OW 302
14240: IFFALSE 14338
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
14242: LD_EXP 59
14246: PUSH
14247: LD_EXP 61
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PPUSH
14256: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
14260: LD_EXP 59
14264: PPUSH
14265: LD_EXP 61
14269: PPUSH
14270: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
14274: LD_EXP 61
14278: PPUSH
14279: LD_EXP 59
14283: PPUSH
14284: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
14288: LD_EXP 61
14292: PPUSH
14293: LD_STRING D24-Bel-1
14295: PPUSH
14296: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14300: LD_EXP 59
14304: PPUSH
14305: LD_STRING D24-Bur-1
14307: PPUSH
14308: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
14312: LD_EXP 61
14316: PPUSH
14317: LD_STRING D24-Bel-2
14319: PPUSH
14320: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14324: LD_EXP 59
14328: PPUSH
14329: LD_STRING D24-Bur-2
14331: PPUSH
14332: CALL_OW 88
// end else
14336: GO 14444
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
14338: LD_EXP 59
14342: PUSH
14343: LD_EXP 65
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PPUSH
14352: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
14356: LD_EXP 59
14360: PPUSH
14361: LD_EXP 65
14365: PPUSH
14366: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
14370: LD_EXP 65
14374: PPUSH
14375: LD_EXP 59
14379: PPUSH
14380: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
14384: LD_EXP 65
14388: PPUSH
14389: LD_STRING D24-Bel-1
14391: PPUSH
14392: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14396: LD_EXP 59
14400: PPUSH
14401: LD_STRING D24-Bur-1
14403: PPUSH
14404: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
14408: LD_EXP 59
14412: PPUSH
14413: LD_STRING D24-Bur-1a
14415: PPUSH
14416: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
14420: LD_EXP 65
14424: PPUSH
14425: LD_STRING D24-Bel-2
14427: PPUSH
14428: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14432: LD_EXP 59
14436: PPUSH
14437: LD_STRING D24-Bur-2
14439: PPUSH
14440: CALL_OW 88
// end ; if captureBelkovVehicle then
14444: LD_EXP 36
14448: IFFALSE 14462
// Say ( Burlak , D24-Bur-2a ) ;
14450: LD_EXP 59
14454: PPUSH
14455: LD_STRING D24-Bur-2a
14457: PPUSH
14458: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
14462: LD_EXP 73
14466: PPUSH
14467: LD_STRING D24-Pla-2
14469: PPUSH
14470: CALL_OW 94
// if leftBunkers then
14474: LD_EXP 79
14478: IFFALSE 14492
// SayRadio ( Platonov , D24-Pla-2a ) ;
14480: LD_EXP 73
14484: PPUSH
14485: LD_STRING D24-Pla-2a
14487: PPUSH
14488: CALL_OW 94
// InGameOff ;
14492: CALL_OW 9
// end ;
14496: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
14497: LD_INT 22
14499: PPUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 3
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 2
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PPUSH
14524: CALL_OW 70
14528: PUSH
14529: LD_EXP 67
14533: PPUSH
14534: CALL_OW 302
14538: PUSH
14539: LD_EXP 60
14543: PPUSH
14544: CALL_OW 302
14548: OR
14549: AND
14550: IFFALSE 14633
14552: GO 14554
14554: DISABLE
// begin DialogueOn ;
14555: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
14559: LD_EXP 59
14563: PPUSH
14564: LD_STRING D26-Bur-1
14566: PPUSH
14567: CALL_OW 88
// if IsOk ( Kovalyuk ) then
14571: LD_EXP 67
14575: PPUSH
14576: CALL_OW 302
14580: IFFALSE 14594
// Say ( Kovalyuk , D26-Kov-1 ) ;
14582: LD_EXP 67
14586: PPUSH
14587: LD_STRING D26-Kov-1
14589: PPUSH
14590: CALL_OW 88
// if IsOk ( Gnyevko ) then
14594: LD_EXP 60
14598: PPUSH
14599: CALL_OW 302
14603: IFFALSE 14617
// Say ( Gnyevko , D26-Gny-1 ) ;
14605: LD_EXP 60
14609: PPUSH
14610: LD_STRING D26-Gny-1
14612: PPUSH
14613: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14617: LD_EXP 59
14621: PPUSH
14622: LD_STRING D26-Bur-2
14624: PPUSH
14625: CALL_OW 88
// DialogueOff ;
14629: CALL_OW 7
// end ;
14633: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
14634: LD_EXP 20
14638: PUSH
14639: LD_EXP 59
14643: PPUSH
14644: LD_INT 8
14646: PPUSH
14647: CALL_OW 308
14651: NOT
14652: PUSH
14653: LD_EXP 59
14657: PPUSH
14658: CALL_OW 310
14662: PPUSH
14663: CALL_OW 310
14667: PPUSH
14668: LD_INT 8
14670: PPUSH
14671: CALL_OW 308
14675: NOT
14676: AND
14677: AND
14678: PUSH
14679: LD_EXP 37
14683: PUSH
14684: LD_INT 1
14686: NEG
14687: EQUAL
14688: AND
14689: IFFALSE 14703
14691: GO 14693
14693: DISABLE
// begin enable ;
14694: ENABLE
// raportForPlatonov = 0 ;
14695: LD_ADDR_EXP 37
14699: PUSH
14700: LD_INT 0
14702: ST_TO_ADDR
// end ;
14703: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
14704: LD_EXP 20
14708: PUSH
14709: LD_EXP 37
14713: PUSH
14714: LD_INT 0
14716: GREATEREQUAL
14717: AND
14718: PUSH
14719: LD_EXP 16
14723: NOT
14724: AND
14725: PUSH
14726: LD_EXP 59
14730: PPUSH
14731: LD_INT 8
14733: PPUSH
14734: CALL_OW 308
14738: PUSH
14739: LD_EXP 59
14743: PPUSH
14744: CALL_OW 310
14748: PPUSH
14749: CALL_OW 310
14753: PPUSH
14754: LD_INT 8
14756: PPUSH
14757: CALL_OW 308
14761: PUSH
14762: LD_EXP 16
14766: NOT
14767: AND
14768: OR
14769: AND
14770: IFFALSE 15061
14772: GO 14774
14774: DISABLE
// begin enable ;
14775: ENABLE
// DialogueOn ;
14776: CALL_OW 6
// case raportForPlatonov of 0 :
14780: LD_EXP 37
14784: PUSH
14785: LD_INT 0
14787: DOUBLE
14788: EQUAL
14789: IFTRUE 14793
14791: GO 14820
14793: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
14794: LD_EXP 73
14798: PPUSH
14799: LD_STRING D25a-Pla-1
14801: PPUSH
14802: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
14806: LD_EXP 59
14810: PPUSH
14811: LD_STRING D25a-Bur-1
14813: PPUSH
14814: CALL_OW 88
// end ; 1 :
14818: GO 15036
14820: LD_INT 1
14822: DOUBLE
14823: EQUAL
14824: IFTRUE 14828
14826: GO 14891
14828: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14829: LD_EXP 73
14833: PPUSH
14834: LD_STRING D25-Pla-1
14836: PPUSH
14837: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
14841: LD_EXP 59
14845: PPUSH
14846: LD_STRING D25-Bur-1
14848: PPUSH
14849: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14853: LD_EXP 59
14857: PPUSH
14858: LD_STRING D25b-Bur-1
14860: PPUSH
14861: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14865: LD_EXP 73
14869: PPUSH
14870: LD_STRING D25b-Pla-1
14872: PPUSH
14873: CALL_OW 88
// playerGetSupport = true ;
14877: LD_ADDR_EXP 32
14881: PUSH
14882: LD_INT 1
14884: ST_TO_ADDR
// PlatonovSendSupport ;
14885: CALL 6475 0 0
// end ; 2 :
14889: GO 15036
14891: LD_INT 2
14893: DOUBLE
14894: EQUAL
14895: IFTRUE 14899
14897: GO 14945
14899: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14900: LD_EXP 73
14904: PPUSH
14905: LD_STRING D25-Pla-1
14907: PPUSH
14908: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
14912: LD_EXP 59
14916: PPUSH
14917: LD_STRING D25-Bur-1a
14919: PPUSH
14920: CALL_OW 88
// if not sawLeftBunker then
14924: LD_EXP 27
14928: NOT
14929: IFFALSE 14943
// Say ( Platonov , D25c-Pla-1 ) ;
14931: LD_EXP 73
14935: PPUSH
14936: LD_STRING D25c-Pla-1
14938: PPUSH
14939: CALL_OW 88
// end ; 3 :
14943: GO 15036
14945: LD_INT 3
14947: DOUBLE
14948: EQUAL
14949: IFTRUE 14953
14951: GO 15035
14953: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14954: LD_EXP 73
14958: PPUSH
14959: LD_STRING D25-Pla-1
14961: PPUSH
14962: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
14966: LD_EXP 59
14970: PPUSH
14971: LD_STRING D25a-Bur-1b
14973: PPUSH
14974: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14978: LD_EXP 59
14982: PPUSH
14983: LD_STRING D25b-Bur-1
14985: PPUSH
14986: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14990: LD_EXP 73
14994: PPUSH
14995: LD_STRING D25b-Pla-1
14997: PPUSH
14998: CALL_OW 88
// playerGetSupport = true ;
15002: LD_ADDR_EXP 32
15006: PUSH
15007: LD_INT 1
15009: ST_TO_ADDR
// PlatonovSendSupport ;
15010: CALL 6475 0 0
// if not sawRightBunker then
15014: LD_EXP 28
15018: NOT
15019: IFFALSE 15033
// Say ( Platonov , D25c-Pla-1 ) ;
15021: LD_EXP 73
15025: PPUSH
15026: LD_STRING D25c-Pla-1
15028: PPUSH
15029: CALL_OW 88
// end ; end ;
15033: GO 15036
15035: POP
// raportForPlatonov = - 1 ;
15036: LD_ADDR_EXP 37
15040: PUSH
15041: LD_INT 1
15043: NEG
15044: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
15045: LD_EXP 73
15049: PPUSH
15050: LD_STRING D25c-Pla-1a
15052: PPUSH
15053: CALL_OW 88
// DialogueOff ;
15057: CALL_OW 7
// end ;
15061: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
15062: LD_INT 19
15064: PPUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: EMPTY
15076: LIST
15077: PPUSH
15078: CALL_OW 70
15082: PUSH
15083: LD_INT 0
15085: GREATER
15086: IFFALSE 15106
15088: GO 15090
15090: DISABLE
// begin northMapExplored = true ;
15091: LD_ADDR_EXP 39
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15099: LD_STRING M10
15101: PPUSH
15102: CALL_OW 337
// end ;
15106: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
15107: LD_EXP 79
15111: NOT
15112: PUSH
15113: LD_EXP 39
15117: AND
15118: PUSH
15119: LD_EXP 35
15123: PUSH
15124: LD_EXP 34
15128: NOT
15129: OR
15130: AND
15131: IFFALSE 15151
15133: GO 15135
15135: DISABLE
// begin backToBeria2 = true ;
15136: LD_ADDR_EXP 16
15140: PUSH
15141: LD_INT 1
15143: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
15144: LD_STRING M10a
15146: PPUSH
15147: CALL_OW 337
// end ; end_of_file
15151: END
// export function PrepareNature ; var i , un ; begin
15152: LD_INT 0
15154: PPUSH
15155: PPUSH
15156: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
15157: LD_ADDR_VAR 0 2
15161: PUSH
15162: DOUBLE
15163: LD_INT 1
15165: DEC
15166: ST_TO_ADDR
15167: LD_EXP 42
15171: PUSH
15172: LD_INT 1
15174: ARRAY
15175: PUSH
15176: FOR_TO
15177: IFFALSE 15287
// begin uc_side = 0 ;
15179: LD_ADDR_OWVAR 20
15183: PUSH
15184: LD_INT 0
15186: ST_TO_ADDR
// uc_nation = nation_nature ;
15187: LD_ADDR_OWVAR 21
15191: PUSH
15192: LD_INT 0
15194: ST_TO_ADDR
// hc_class = class_apeman ;
15195: LD_ADDR_OWVAR 28
15199: PUSH
15200: LD_INT 12
15202: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15203: LD_ADDR_OWVAR 31
15207: PUSH
15208: LD_EXP 43
15212: PUSH
15213: LD_INT 1
15215: ARRAY
15216: PUSH
15217: LD_EXP 43
15221: PUSH
15222: LD_INT 2
15224: ARRAY
15225: PUSH
15226: LD_EXP 43
15230: PUSH
15231: LD_INT 3
15233: ARRAY
15234: PUSH
15235: LD_EXP 43
15239: PUSH
15240: LD_INT 4
15242: ARRAY
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15250: LD_ADDR_OWVAR 35
15254: PUSH
15255: LD_EXP 44
15259: ST_TO_ADDR
// un = CreateHuman ;
15260: LD_ADDR_VAR 0 3
15264: PUSH
15265: CALL_OW 44
15269: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15270: LD_VAR 0 3
15274: PPUSH
15275: LD_INT 21
15277: PPUSH
15278: LD_INT 0
15280: PPUSH
15281: CALL_OW 49
// end ;
15285: GO 15176
15287: POP
15288: POP
// for i := 1 to animalsAmount [ 2 ] do
15289: LD_ADDR_VAR 0 2
15293: PUSH
15294: DOUBLE
15295: LD_INT 1
15297: DEC
15298: ST_TO_ADDR
15299: LD_EXP 42
15303: PUSH
15304: LD_INT 2
15306: ARRAY
15307: PUSH
15308: FOR_TO
15309: IFFALSE 15419
// begin uc_side = 0 ;
15311: LD_ADDR_OWVAR 20
15315: PUSH
15316: LD_INT 0
15318: ST_TO_ADDR
// uc_nation = nation_nature ;
15319: LD_ADDR_OWVAR 21
15323: PUSH
15324: LD_INT 0
15326: ST_TO_ADDR
// hc_class = class_phororhacos ;
15327: LD_ADDR_OWVAR 28
15331: PUSH
15332: LD_INT 18
15334: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15335: LD_ADDR_OWVAR 31
15339: PUSH
15340: LD_EXP 43
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PUSH
15349: LD_EXP 43
15353: PUSH
15354: LD_INT 2
15356: ARRAY
15357: PUSH
15358: LD_EXP 43
15362: PUSH
15363: LD_INT 3
15365: ARRAY
15366: PUSH
15367: LD_EXP 43
15371: PUSH
15372: LD_INT 4
15374: ARRAY
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15382: LD_ADDR_OWVAR 35
15386: PUSH
15387: LD_EXP 44
15391: ST_TO_ADDR
// un = CreateHuman ;
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: CALL_OW 44
15401: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15402: LD_VAR 0 3
15406: PPUSH
15407: LD_INT 21
15409: PPUSH
15410: LD_INT 0
15412: PPUSH
15413: CALL_OW 49
// end ;
15417: GO 15308
15419: POP
15420: POP
// for i := 1 to animalsAmount [ 3 ] do
15421: LD_ADDR_VAR 0 2
15425: PUSH
15426: DOUBLE
15427: LD_INT 1
15429: DEC
15430: ST_TO_ADDR
15431: LD_EXP 42
15435: PUSH
15436: LD_INT 3
15438: ARRAY
15439: PUSH
15440: FOR_TO
15441: IFFALSE 15551
// begin uc_side = 0 ;
15443: LD_ADDR_OWVAR 20
15447: PUSH
15448: LD_INT 0
15450: ST_TO_ADDR
// uc_nation = nation_nature ;
15451: LD_ADDR_OWVAR 21
15455: PUSH
15456: LD_INT 0
15458: ST_TO_ADDR
// hc_class = class_tiger ;
15459: LD_ADDR_OWVAR 28
15463: PUSH
15464: LD_INT 14
15466: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15467: LD_ADDR_OWVAR 31
15471: PUSH
15472: LD_EXP 43
15476: PUSH
15477: LD_INT 1
15479: ARRAY
15480: PUSH
15481: LD_EXP 43
15485: PUSH
15486: LD_INT 2
15488: ARRAY
15489: PUSH
15490: LD_EXP 43
15494: PUSH
15495: LD_INT 3
15497: ARRAY
15498: PUSH
15499: LD_EXP 43
15503: PUSH
15504: LD_INT 4
15506: ARRAY
15507: PUSH
15508: EMPTY
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15514: LD_ADDR_OWVAR 35
15518: PUSH
15519: LD_EXP 44
15523: ST_TO_ADDR
// un = CreateHuman ;
15524: LD_ADDR_VAR 0 3
15528: PUSH
15529: CALL_OW 44
15533: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15534: LD_VAR 0 3
15538: PPUSH
15539: LD_INT 21
15541: PPUSH
15542: LD_INT 0
15544: PPUSH
15545: CALL_OW 49
// end ;
15549: GO 15440
15551: POP
15552: POP
// for i := 1 to animalsAmount [ 4 ] do
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: DOUBLE
15559: LD_INT 1
15561: DEC
15562: ST_TO_ADDR
15563: LD_EXP 42
15567: PUSH
15568: LD_INT 4
15570: ARRAY
15571: PUSH
15572: FOR_TO
15573: IFFALSE 15683
// begin uc_side = 0 ;
15575: LD_ADDR_OWVAR 20
15579: PUSH
15580: LD_INT 0
15582: ST_TO_ADDR
// uc_nation = nation_nature ;
15583: LD_ADDR_OWVAR 21
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// hc_class = 21 ;
15591: LD_ADDR_OWVAR 28
15595: PUSH
15596: LD_INT 21
15598: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15599: LD_ADDR_OWVAR 31
15603: PUSH
15604: LD_EXP 43
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_EXP 43
15617: PUSH
15618: LD_INT 2
15620: ARRAY
15621: PUSH
15622: LD_EXP 43
15626: PUSH
15627: LD_INT 3
15629: ARRAY
15630: PUSH
15631: LD_EXP 43
15635: PUSH
15636: LD_INT 4
15638: ARRAY
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15646: LD_ADDR_OWVAR 35
15650: PUSH
15651: LD_EXP 44
15655: ST_TO_ADDR
// un = CreateHuman ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: CALL_OW 44
15665: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15666: LD_VAR 0 3
15670: PPUSH
15671: LD_INT 21
15673: PPUSH
15674: LD_INT 0
15676: PPUSH
15677: CALL_OW 49
// end ;
15681: GO 15572
15683: POP
15684: POP
// end ; end_of_file
15685: LD_VAR 0 1
15689: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
15690: LD_EXP 21
15694: IFFALSE 15923
15696: GO 15698
15698: DISABLE
15699: LD_INT 0
15701: PPUSH
15702: PPUSH
15703: PPUSH
15704: PPUSH
15705: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
15706: LD_ADDR_VAR 0 4
15710: PUSH
15711: LD_INT 22
15713: PUSH
15714: LD_INT 3
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PUSH
15721: LD_INT 21
15723: PUSH
15724: LD_INT 1
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 2
15736: PUSH
15737: EMPTY
15738: LIST
15739: LIST
15740: PUSH
15741: EMPTY
15742: LIST
15743: LIST
15744: LIST
15745: PPUSH
15746: CALL_OW 69
15750: ST_TO_ADDR
// wait ( 0 0$40 ) ;
15751: LD_INT 1400
15753: PPUSH
15754: CALL_OW 67
// carryCratesEngs = 0 ;
15758: LD_ADDR_VAR 0 3
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// for unit in playerEngs do
15766: LD_ADDR_VAR 0 2
15770: PUSH
15771: LD_VAR 0 4
15775: PUSH
15776: FOR_IN
15777: IFFALSE 15805
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
15779: LD_ADDR_VAR 0 3
15783: PUSH
15784: LD_VAR 0 3
15788: PUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: LD_INT 1
15796: PPUSH
15797: CALL_OW 289
15801: PLUS
15802: ST_TO_ADDR
15803: GO 15776
15805: POP
15806: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
15807: LD_INT 106
15809: PPUSH
15810: CALL_OW 274
15814: PPUSH
15815: LD_INT 1
15817: PPUSH
15818: CALL_OW 275
15822: PUSH
15823: LD_INT 50
15825: LESS
15826: PUSH
15827: LD_INT 8
15829: PPUSH
15830: LD_INT 1
15832: PPUSH
15833: CALL_OW 287
15837: PUSH
15838: LD_INT 10
15840: MUL
15841: PUSH
15842: LD_INT 106
15844: PPUSH
15845: CALL_OW 274
15849: PPUSH
15850: LD_INT 1
15852: PPUSH
15853: CALL_OW 275
15857: PLUS
15858: PUSH
15859: LD_VAR 0 3
15863: PLUS
15864: PUSH
15865: LD_INT 50
15867: LESS
15868: AND
15869: IFFALSE 15881
// spawnNextCrates = true else
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_INT 1
15878: ST_TO_ADDR
15879: GO 15889
// spawnNextCrates = false ;
15881: LD_ADDR_VAR 0 5
15885: PUSH
15886: LD_INT 0
15888: ST_TO_ADDR
// if spawnNextCrates then
15889: LD_VAR 0 5
15893: IFFALSE 15916
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
15895: LD_INT 1
15897: PPUSH
15898: LD_INT 5
15900: PPUSH
15901: CALL_OW 12
15905: PPUSH
15906: LD_INT 8
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL_OW 55
// until not spawnCrates ;
15916: LD_EXP 21
15920: NOT
15921: IFFALSE 15706
// end ; end_of_file
15923: PPOPN 5
15925: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
15926: LD_VAR 0 1
15930: PPUSH
15931: CALL_OW 266
15935: PUSH
15936: LD_INT 6
15938: EQUAL
15939: PUSH
15940: LD_INT 22
15942: PUSH
15943: LD_INT 3
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 30
15952: PUSH
15953: LD_INT 6
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PPUSH
15964: CALL_OW 69
15968: PUSH
15969: LD_INT 1
15971: GREATER
15972: AND
15973: PUSH
15974: LD_EXP 11
15978: NOT
15979: AND
15980: IFFALSE 15991
// Dial_StopConstructAgainSameBuilding ( building ) ;
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL 8422 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
15991: LD_VAR 0 1
15995: PPUSH
15996: CALL_OW 266
16000: PUSH
16001: LD_INT 2
16003: EQUAL
16004: PUSH
16005: LD_INT 22
16007: PUSH
16008: LD_INT 3
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 30
16017: PUSH
16018: LD_INT 2
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PPUSH
16029: CALL_OW 69
16033: PUSH
16034: LD_INT 1
16036: GREATER
16037: AND
16038: PUSH
16039: LD_EXP 11
16043: NOT
16044: AND
16045: IFFALSE 16056
// Dial_StopConstructAgainSameBuilding ( building ) ;
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL 8422 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
16056: LD_VAR 0 1
16060: PPUSH
16061: CALL_OW 255
16065: PUSH
16066: LD_INT 3
16068: EQUAL
16069: PUSH
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 266
16079: PUSH
16080: LD_INT 26
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: LD_INT 31
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: LIST
16093: IN
16094: AND
16095: PUSH
16096: LD_VAR 0 1
16100: PPUSH
16101: LD_INT 8
16103: PPUSH
16104: CALL_OW 308
16108: AND
16109: IFFALSE 16120
// Dial_StopConstructAgainSameBuilding ( building ) ;
16111: LD_VAR 0 1
16115: PPUSH
16116: CALL 8422 0 1
// end ;
16120: PPOPN 2
16122: END
// on BuildingComplete ( building ) do var sold , platSold ;
16123: LD_INT 0
16125: PPUSH
16126: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
16127: LD_VAR 0 1
16131: PPUSH
16132: CALL_OW 255
16136: PUSH
16137: LD_INT 3
16139: EQUAL
16140: PUSH
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 266
16150: PUSH
16151: LD_INT 6
16153: EQUAL
16154: AND
16155: PUSH
16156: LD_EXP 8
16160: NOT
16161: AND
16162: IFFALSE 16168
// Dial_LabConstructed ;
16164: CALL 8272 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
16168: LD_VAR 0 1
16172: PPUSH
16173: CALL_OW 255
16177: PUSH
16178: LD_INT 3
16180: EQUAL
16181: PUSH
16182: LD_VAR 0 1
16186: PPUSH
16187: CALL_OW 266
16191: PUSH
16192: LD_INT 2
16194: EQUAL
16195: AND
16196: PUSH
16197: LD_EXP 9
16201: NOT
16202: AND
16203: IFFALSE 16209
// Dial_WorkshopConstructed ;
16205: CALL 8347 0 0
// if GetSide ( building ) = 6 then
16209: LD_VAR 0 1
16213: PPUSH
16214: CALL_OW 255
16218: PUSH
16219: LD_INT 6
16221: EQUAL
16222: IFFALSE 16433
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 266
16233: PUSH
16234: LD_INT 31
16236: EQUAL
16237: PUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: LD_INT 9
16245: PPUSH
16246: CALL_OW 308
16250: AND
16251: IFFALSE 16302
// begin if UnitsInside ( ru2_arm2 ) then
16253: LD_INT 209
16255: PPUSH
16256: CALL_OW 313
16260: IFFALSE 16302
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
16262: LD_ADDR_VAR 0 2
16266: PUSH
16267: LD_INT 209
16269: PPUSH
16270: CALL_OW 313
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
16279: LD_VAR 0 2
16283: PPUSH
16284: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
16288: LD_VAR 0 2
16292: PPUSH
16293: LD_VAR 0 1
16297: PPUSH
16298: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 266
16311: PUSH
16312: LD_INT 31
16314: EQUAL
16315: PUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: LD_INT 8
16323: PPUSH
16324: CALL_OW 308
16328: AND
16329: IFFALSE 16365
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_EXP 74
16340: PPUSH
16341: LD_VAR 0 1
16345: PPUSH
16346: CALL_OW 74
16350: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
16351: LD_VAR 0 2
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 266
16374: PUSH
16375: LD_INT 2
16377: EQUAL
16378: IFFALSE 16433
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
16380: LD_EXP 66
16384: PPUSH
16385: LD_INT 25
16387: PUSH
16388: LD_INT 3
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PPUSH
16395: CALL_OW 72
16399: PPUSH
16400: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
16404: LD_EXP 66
16408: PPUSH
16409: LD_INT 25
16411: PUSH
16412: LD_INT 3
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 72
16423: PPUSH
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 180
// end ; end ; end ;
16433: PPOPN 3
16435: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
16436: LD_VAR 0 1
16440: PUSH
16441: LD_INT 47
16443: EQUAL
16444: PUSH
16445: LD_VAR 0 2
16449: PPUSH
16450: CALL_OW 255
16454: PUSH
16455: LD_INT 3
16457: EQUAL
16458: AND
16459: IFFALSE 16469
// engineResearched = true ;
16461: LD_ADDR_EXP 10
16465: PUSH
16466: LD_INT 1
16468: ST_TO_ADDR
// if tech = tech_Tech1 then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_INT 48
16476: EQUAL
16477: IFFALSE 16499
// begin wait ( 0 0$5 ) ;
16479: LD_INT 175
16481: PPUSH
16482: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
16486: LD_INT 83
16488: PPUSH
16489: LD_INT 1500
16491: PPUSH
16492: LD_INT 0
16494: PPUSH
16495: CALL_OW 486
// end ; end ;
16499: PPOPN 2
16501: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL_OW 255
16511: PUSH
16512: LD_OWVAR 2
16516: EQUAL
16517: PUSH
16518: LD_VAR 0 2
16522: PPUSH
16523: CALL_OW 302
16527: AND
16528: PUSH
16529: LD_EXP 12
16533: NOT
16534: AND
16535: PUSH
16536: LD_EXP 17
16540: NOT
16541: AND
16542: IFFALSE 16553
// Dial_FirstVehConstructed ( factory ) ;
16544: LD_VAR 0 2
16548: PPUSH
16549: CALL 8937 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
16553: LD_VAR 0 2
16557: PPUSH
16558: CALL_OW 255
16562: PUSH
16563: LD_OWVAR 2
16567: EQUAL
16568: PUSH
16569: LD_VAR 0 2
16573: PPUSH
16574: CALL_OW 302
16578: AND
16579: PUSH
16580: LD_EXP 17
16584: AND
16585: IFFALSE 16601
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
16587: LD_ADDR_EXP 18
16591: PUSH
16592: LD_EXP 18
16596: PUSH
16597: LD_INT 1
16599: PLUS
16600: ST_TO_ADDR
// end ;
16601: PPOPN 2
16603: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
16604: LD_EXP 19
16608: NOT
16609: PUSH
16610: LD_VAR 0 5
16614: PUSH
16615: LD_INT 1
16617: EQUAL
16618: AND
16619: IFFALSE 16635
// Dial_NewCrates ( x , y ) ;
16621: LD_VAR 0 2
16625: PPUSH
16626: LD_VAR 0 3
16630: PPUSH
16631: CALL 8891 0 2
// end ;
16635: PPOPN 5
16637: END
// on Command ( com ) do var i , j , temp , order , destiny ;
16638: LD_INT 0
16640: PPUSH
16641: PPUSH
16642: PPUSH
16643: PPUSH
16644: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16645: LD_ADDR_VAR 0 2
16649: PUSH
16650: LD_INT 22
16652: PUSH
16653: LD_INT 3
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PUSH
16660: LD_INT 21
16662: PUSH
16663: LD_INT 1
16665: PUSH
16666: EMPTY
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: PUSH
16679: FOR_IN
16680: IFFALSE 16873
// if GetTaskList ( i ) > 0 then
16682: LD_VAR 0 2
16686: PPUSH
16687: CALL_OW 437
16691: PUSH
16692: LD_INT 0
16694: GREATER
16695: IFFALSE 16871
// for j = 1 to GetTaskList ( i ) do
16697: LD_ADDR_VAR 0 3
16701: PUSH
16702: DOUBLE
16703: LD_INT 1
16705: DEC
16706: ST_TO_ADDR
16707: LD_VAR 0 2
16711: PPUSH
16712: CALL_OW 437
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16869
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 437
16734: PUSH
16735: LD_VAR 0 3
16739: ARRAY
16740: PUSH
16741: LD_INT 4
16743: ARRAY
16744: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
16745: LD_VAR 0 4
16749: PUSH
16750: LD_INT 71
16752: EQUAL
16753: PUSH
16754: LD_VAR 0 4
16758: PPUSH
16759: CALL_OW 255
16763: PUSH
16764: LD_INT 6
16766: EQUAL
16767: PUSH
16768: LD_VAR 0 2
16772: PPUSH
16773: CALL_OW 437
16777: PUSH
16778: LD_VAR 0 3
16782: ARRAY
16783: PUSH
16784: LD_INT 1
16786: ARRAY
16787: PUSH
16788: LD_STRING e
16790: EQUAL
16791: AND
16792: PUSH
16793: LD_VAR 0 4
16797: PPUSH
16798: CALL_OW 247
16802: PUSH
16803: LD_INT 2
16805: EQUAL
16806: AND
16807: OR
16808: IFFALSE 16821
// SetTaskList ( i , [ ] ) ;
16810: LD_VAR 0 2
16814: PPUSH
16815: EMPTY
16816: PPUSH
16817: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
16821: LD_VAR 0 4
16825: PUSH
16826: LD_INT 106
16828: EQUAL
16829: PUSH
16830: LD_VAR 0 2
16834: PPUSH
16835: CALL_OW 437
16839: PUSH
16840: LD_VAR 0 3
16844: ARRAY
16845: PUSH
16846: LD_INT 1
16848: ARRAY
16849: PUSH
16850: LD_STRING Y
16852: EQUAL
16853: AND
16854: IFFALSE 16867
// SetTaskList ( i , [ ] ) ;
16856: LD_VAR 0 2
16860: PPUSH
16861: EMPTY
16862: PPUSH
16863: CALL_OW 446
// end ;
16867: GO 16717
16869: POP
16870: POP
16871: GO 16679
16873: POP
16874: POP
// end ;
16875: PPOPN 6
16877: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16878: LD_VAR 0 1
16882: PPUSH
16883: CALL_OW 255
16887: PUSH
16888: LD_INT 1
16890: EQUAL
16891: PUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 247
16901: PUSH
16902: LD_INT 1
16904: EQUAL
16905: AND
16906: IFFALSE 16964
// begin if unit in amLeftEngs then
16908: LD_VAR 0 1
16912: PUSH
16913: LD_EXP 83
16917: IN
16918: IFFALSE 16936
// amLeftEngs = amLeftEngs diff unit ;
16920: LD_ADDR_EXP 83
16924: PUSH
16925: LD_EXP 83
16929: PUSH
16930: LD_VAR 0 1
16934: DIFF
16935: ST_TO_ADDR
// if unit in amRightEngs then
16936: LD_VAR 0 1
16940: PUSH
16941: LD_EXP 84
16945: IN
16946: IFFALSE 16964
// amRightEngs = amRightEngs diff unit ;
16948: LD_ADDR_EXP 84
16952: PUSH
16953: LD_EXP 84
16957: PUSH
16958: LD_VAR 0 1
16962: DIFF
16963: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 255
16973: PUSH
16974: LD_INT 6
16976: EQUAL
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 247
16987: PUSH
16988: LD_INT 1
16990: EQUAL
16991: AND
16992: IFFALSE 17022
// if unit in belkovTeam then
16994: LD_VAR 0 1
16998: PUSH
16999: LD_EXP 70
17003: IN
17004: IFFALSE 17022
// belkovTeam = belkovTeam diff unit ;
17006: LD_ADDR_EXP 70
17010: PUSH
17011: LD_EXP 70
17015: PUSH
17016: LD_VAR 0 1
17020: DIFF
17021: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 255
17031: PUSH
17032: LD_INT 3
17034: EQUAL
17035: PUSH
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 247
17045: PUSH
17046: LD_INT 1
17048: EQUAL
17049: AND
17050: IFFALSE 17066
// lostComradesCounter = lostComradesCounter + 1 ;
17052: LD_ADDR_EXP 41
17056: PUSH
17057: LD_EXP 41
17061: PUSH
17062: LD_INT 1
17064: PLUS
17065: ST_TO_ADDR
// if unit = Burlak then
17066: LD_VAR 0 1
17070: PUSH
17071: LD_EXP 59
17075: EQUAL
17076: IFFALSE 17082
// BurlakIsDead ;
17078: CALL 18362 0 0
// if unit in platSoldiers then
17082: LD_VAR 0 1
17086: PUSH
17087: LD_EXP 74
17091: IN
17092: IFFALSE 17110
// platSoldiers = platSoldiers diff unit ;
17094: LD_ADDR_EXP 74
17098: PUSH
17099: LD_EXP 74
17103: PUSH
17104: LD_VAR 0 1
17108: DIFF
17109: ST_TO_ADDR
// end ;
17110: PPOPN 1
17112: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
17113: LD_VAR 0 1
17117: PPUSH
17118: CALL_OW 255
17122: PUSH
17123: LD_INT 1
17125: EQUAL
17126: PUSH
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 247
17136: PUSH
17137: LD_INT 3
17139: EQUAL
17140: AND
17141: IFFALSE 17199
// begin if unit in leftBunkers then
17143: LD_VAR 0 1
17147: PUSH
17148: LD_EXP 79
17152: IN
17153: IFFALSE 17171
// leftBunkers = leftBunkers diff unit ;
17155: LD_ADDR_EXP 79
17159: PUSH
17160: LD_EXP 79
17164: PUSH
17165: LD_VAR 0 1
17169: DIFF
17170: ST_TO_ADDR
// if unit in rightBunkers then
17171: LD_VAR 0 1
17175: PUSH
17176: LD_EXP 80
17180: IN
17181: IFFALSE 17199
// rightBunkers = rightBunkers diff unit ;
17183: LD_ADDR_EXP 80
17187: PUSH
17188: LD_EXP 80
17192: PUSH
17193: LD_VAR 0 1
17197: DIFF
17198: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 255
17208: PUSH
17209: LD_INT 1
17211: EQUAL
17212: PUSH
17213: LD_VAR 0 1
17217: PPUSH
17218: CALL_OW 247
17222: PUSH
17223: LD_INT 1
17225: EQUAL
17226: AND
17227: IFFALSE 17257
// if unit in trapTeam then
17229: LD_VAR 0 1
17233: PUSH
17234: LD_EXP 78
17238: IN
17239: IFFALSE 17257
// trapTeam = trapTeam diff unit ;
17241: LD_ADDR_EXP 78
17245: PUSH
17246: LD_EXP 78
17250: PUSH
17251: LD_VAR 0 1
17255: DIFF
17256: ST_TO_ADDR
// end ;
17257: PPOPN 1
17259: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
17260: LD_VAR 0 3
17264: PUSH
17265: LD_INT 1
17267: EQUAL
17268: IFFALSE 17278
// captureBelkovVehicle = true ;
17270: LD_ADDR_EXP 36
17274: PUSH
17275: LD_INT 1
17277: ST_TO_ADDR
// if original_side = 6 then
17278: LD_VAR 0 3
17282: PUSH
17283: LD_INT 6
17285: EQUAL
17286: IFFALSE 17330
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
17288: LD_VAR 0 1
17292: PUSH
17293: LD_VAR 0 2
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: LD_INT 118
17304: PPUSH
17305: LD_INT 25
17307: PPUSH
17308: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
17312: LD_VAR 0 1
17316: PUSH
17317: LD_VAR 0 2
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PPUSH
17326: CALL_OW 139
// end ; end ;
17330: PPOPN 4
17332: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
17333: LD_VAR 0 1
17337: PUSH
17338: LD_INT 3
17340: EQUAL
17341: PUSH
17342: LD_VAR 0 2
17346: PUSH
17347: LD_INT 6
17349: EQUAL
17350: AND
17351: IFFALSE 17357
// AttackComrades ;
17353: CALL 18377 0 0
// end ; end_of_file
17357: PPOPN 2
17359: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
17360: LD_EXP 16
17364: PUSH
17365: LD_INT 8
17367: PPUSH
17368: LD_INT 22
17370: PUSH
17371: LD_INT 3
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: PUSH
17378: LD_INT 21
17380: PUSH
17381: LD_INT 1
17383: PUSH
17384: EMPTY
17385: LIST
17386: LIST
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PPUSH
17392: CALL_OW 71
17396: PUSH
17397: LD_INT 0
17399: EQUAL
17400: AND
17401: IFFALSE 17502
17403: GO 17405
17405: DISABLE
// begin enable ;
17406: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
17407: LD_EXP 34
17411: NOT
17412: PUSH
17413: LD_EXP 61
17417: PPUSH
17418: CALL_OW 302
17422: PUSH
17423: LD_EXP 65
17427: PPUSH
17428: CALL_OW 302
17432: OR
17433: AND
17434: IFFALSE 17481
// begin case Query ( QContMission ) of 1 :
17436: LD_STRING QContMission
17438: PPUSH
17439: CALL_OW 97
17443: PUSH
17444: LD_INT 1
17446: DOUBLE
17447: EQUAL
17448: IFTRUE 17452
17450: GO 17459
17452: POP
// begin FinishMission ;
17453: CALL 17503 0 0
// end ; 2 :
17457: GO 17479
17459: LD_INT 2
17461: DOUBLE
17462: EQUAL
17463: IFTRUE 17467
17465: GO 17478
17467: POP
// begin saveBelkovObjective = true ;
17468: LD_ADDR_EXP 34
17472: PUSH
17473: LD_INT 1
17475: ST_TO_ADDR
// end ; end ;
17476: GO 17479
17478: POP
// end else
17479: GO 17492
// if not belkovSaved then
17481: LD_EXP 35
17485: NOT
17486: IFFALSE 17492
// FinishMission ;
17488: CALL 17503 0 0
// if belkovSaved then
17492: LD_EXP 35
17496: IFFALSE 17502
// FinishMission ;
17498: CALL 17503 0 0
// end ;
17502: END
// function FinishMission ; begin
17503: LD_INT 0
17505: PPUSH
// SetRewards ;
17506: CALL 17527 0 0
// SavePlayerCharacters ;
17510: CALL 17817 0 0
// SaveGlobalVariables ;
17514: CALL 18042 0 0
// YouWin ;
17518: CALL_OW 103
// end ;
17522: LD_VAR 0 1
17526: RET
// function SetRewards ; begin
17527: LD_INT 0
17529: PPUSH
// case initiative of 1 :
17530: LD_EXP 40
17534: PUSH
17535: LD_INT 1
17537: DOUBLE
17538: EQUAL
17539: IFTRUE 17543
17541: GO 17556
17543: POP
// AddMedal ( Initiative , 1 ) ; 2 :
17544: LD_STRING Initiative
17546: PPUSH
17547: LD_INT 1
17549: PPUSH
17550: CALL_OW 101
17554: GO 17601
17556: LD_INT 2
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17578
17564: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
17565: LD_STRING Initiative
17567: PPUSH
17568: LD_INT 2
17570: NEG
17571: PPUSH
17572: CALL_OW 101
17576: GO 17601
17578: LD_INT 3
17580: DOUBLE
17581: EQUAL
17582: IFTRUE 17586
17584: GO 17600
17586: POP
// AddMedal ( Initiative , - 1 ) ; end ;
17587: LD_STRING Initiative
17589: PPUSH
17590: LD_INT 1
17592: NEG
17593: PPUSH
17594: CALL_OW 101
17598: GO 17601
17600: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
17601: LD_EXP 35
17605: PUSH
17606: LD_EXP 61
17610: PPUSH
17611: CALL_OW 302
17615: PUSH
17616: LD_EXP 65
17620: PPUSH
17621: CALL_OW 302
17625: OR
17626: AND
17627: IFFALSE 17639
// AddMedal ( Belkov , 1 ) ;
17629: LD_STRING Belkov
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
17639: LD_EXP 35
17643: NOT
17644: PUSH
17645: LD_EXP 34
17649: NOT
17650: AND
17651: IFFALSE 17664
// AddMedal ( Belkov , - 1 ) ;
17653: LD_STRING Belkov
17655: PPUSH
17656: LD_INT 1
17658: NEG
17659: PPUSH
17660: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
17664: LD_EXP 35
17668: NOT
17669: PUSH
17670: LD_EXP 34
17674: AND
17675: IFFALSE 17688
// AddMedal ( Belkov , - 2 ) ;
17677: LD_STRING Belkov
17679: PPUSH
17680: LD_INT 2
17682: NEG
17683: PPUSH
17684: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
17688: LD_EXP 35
17692: PUSH
17693: LD_EXP 6
17697: PUSH
17698: LD_EXP 61
17702: PPUSH
17703: CALL_OW 301
17707: AND
17708: AND
17709: PUSH
17710: LD_EXP 6
17714: NOT
17715: PUSH
17716: LD_EXP 65
17720: PPUSH
17721: CALL_OW 301
17725: AND
17726: OR
17727: IFFALSE 17740
// AddMedal ( Belkov , - 2 ) ;
17729: LD_STRING Belkov
17731: PPUSH
17732: LD_INT 2
17734: NEG
17735: PPUSH
17736: CALL_OW 101
// if lostComradesCounter = 0 then
17740: LD_EXP 41
17744: PUSH
17745: LD_INT 0
17747: EQUAL
17748: IFFALSE 17762
// AddMedal ( NoLosses , 1 ) else
17750: LD_STRING NoLosses
17752: PPUSH
17753: LD_INT 1
17755: PPUSH
17756: CALL_OW 101
17760: GO 17772
// AddMedal ( NoLosses , 0 ) ;
17762: LD_STRING NoLosses
17764: PPUSH
17765: LD_INT 0
17767: PPUSH
17768: CALL_OW 101
// GiveMedals ( Main ) ;
17772: LD_STRING Main
17774: PPUSH
17775: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17779: LD_INT 22
17781: PUSH
17782: LD_INT 3
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 21
17791: PUSH
17792: LD_INT 1
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: PPUSH
17808: CALL_OW 43
// end ;
17812: LD_VAR 0 1
17816: RET
// function SavePlayerCharacters ; var othersYour ; begin
17817: LD_INT 0
17819: PPUSH
17820: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
17821: LD_EXP 59
17825: PPUSH
17826: LD_STRING Burlak
17828: PPUSH
17829: LD_INT 3
17831: PPUSH
17832: CALL 4223 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
17836: LD_EXP 60
17840: PPUSH
17841: LD_STRING Gnyevko
17843: PPUSH
17844: LD_INT 3
17846: PPUSH
17847: CALL 4223 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
17851: LD_EXP 67
17855: PPUSH
17856: LD_STRING Kovalyuk
17858: PPUSH
17859: LD_INT 3
17861: PPUSH
17862: CALL 4223 0 3
// if belkovReturn then
17866: LD_EXP 6
17870: IFFALSE 17889
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
17872: LD_EXP 61
17876: PPUSH
17877: LD_STRING Belkov
17879: PPUSH
17880: LD_INT 3
17882: PPUSH
17883: CALL 4223 0 3
17887: GO 17904
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
17889: LD_EXP 65
17893: PPUSH
17894: LD_STRING Belkov2
17896: PPUSH
17897: LD_INT 3
17899: PPUSH
17900: CALL 4223 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
17904: LD_EXP 62
17908: PPUSH
17909: LD_STRING Kirilenkova
17911: PPUSH
17912: LD_INT 3
17914: PPUSH
17915: CALL 4223 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
17919: LD_ADDR_VAR 0 2
17923: PUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PPUSH
17948: CALL_OW 69
17952: PUSH
17953: LD_EXP 59
17957: PUSH
17958: LD_EXP 60
17962: PUSH
17963: LD_EXP 61
17967: PUSH
17968: LD_EXP 65
17972: PUSH
17973: LD_EXP 67
17977: PUSH
17978: LD_EXP 62
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: DIFF
17991: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
17992: LD_VAR 0 2
17996: PPUSH
17997: LD_STRING other_survivors
17999: PPUSH
18000: LD_INT 3
18002: PPUSH
18003: CALL 4279 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
18007: LD_EXP 74
18011: PPUSH
18012: LD_STRING other_beria
18014: PPUSH
18015: LD_INT 6
18017: PPUSH
18018: CALL 4279 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
18022: LD_EXP 66
18026: PPUSH
18027: LD_STRING other_kirov
18029: PPUSH
18030: LD_INT 6
18032: PPUSH
18033: CALL 4279 0 3
// end ;
18037: LD_VAR 0 1
18041: RET
// function SaveGlobalVariables ; var vehicles ; begin
18042: LD_INT 0
18044: PPUSH
18045: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
18046: LD_ADDR_VAR 0 2
18050: PUSH
18051: LD_INT 22
18053: PUSH
18054: LD_INT 3
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PUSH
18061: LD_INT 21
18063: PUSH
18064: LD_INT 2
18066: PUSH
18067: EMPTY
18068: LIST
18069: LIST
18070: PUSH
18071: LD_INT 50
18073: PUSH
18074: EMPTY
18075: LIST
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: PPUSH
18082: CALL_OW 69
18086: ST_TO_ADDR
// if vehicles then
18087: LD_VAR 0 2
18091: IFFALSE 18105
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
18093: LD_VAR 0 2
18097: PPUSH
18098: LD_STRING 02_Vehicles_1
18100: PPUSH
18101: CALL 5273 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
18105: LD_INT 8
18107: PPUSH
18108: LD_INT 21
18110: PUSH
18111: LD_INT 3
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: PPUSH
18121: CALL_OW 70
18125: PPUSH
18126: LD_STRING 02_BeriaBase_2
18128: PPUSH
18129: CALL 5416 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
18133: LD_INT 9
18135: PPUSH
18136: LD_INT 22
18138: PUSH
18139: LD_INT 6
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 21
18148: PUSH
18149: LD_INT 3
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PPUSH
18160: CALL_OW 70
18164: PPUSH
18165: LD_STRING 02_KirovBase_3
18167: PPUSH
18168: CALL 5416 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
18172: LD_INT 22
18174: PUSH
18175: LD_INT 3
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 21
18184: PUSH
18185: LD_INT 3
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: LD_INT 50
18194: PUSH
18195: EMPTY
18196: LIST
18197: PUSH
18198: LD_INT 3
18200: PUSH
18201: LD_INT 95
18203: PUSH
18204: LD_INT 8
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: PPUSH
18226: LD_STRING 02_OtherBuildings_4
18228: PPUSH
18229: CALL 5416 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
18233: LD_INT 22
18235: PUSH
18236: LD_INT 1
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 21
18245: PUSH
18246: LD_INT 3
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 50
18255: PUSH
18256: EMPTY
18257: LIST
18258: PUSH
18259: LD_INT 23
18261: PUSH
18262: LD_INT 1
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: LIST
18273: LIST
18274: PPUSH
18275: CALL_OW 69
18279: PPUSH
18280: LD_STRING 02_AmericanBuildings_5
18282: PPUSH
18283: CALL 5416 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
18287: LD_EXP 4
18291: PPUSH
18292: LD_STRING 02_MeetBelkovBrother_6
18294: PPUSH
18295: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
18299: LD_INT 106
18301: PPUSH
18302: CALL_OW 274
18306: PPUSH
18307: LD_INT 1
18309: PPUSH
18310: CALL_OW 275
18314: PPUSH
18315: LD_STRING 02_BeriaResourceCrates_7
18317: PPUSH
18318: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
18322: LD_INT 106
18324: PPUSH
18325: CALL_OW 274
18329: PPUSH
18330: LD_INT 2
18332: PPUSH
18333: CALL_OW 275
18337: PPUSH
18338: LD_STRING 02_BeriaResourceOil_8
18340: PPUSH
18341: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
18345: LD_EXP 5
18349: PPUSH
18350: LD_STRING 02_PlatonovOpinion_9
18352: PPUSH
18353: CALL_OW 39
// end ; end_of_file
18357: LD_VAR 0 1
18361: RET
// export function BurlakIsDead ; begin
18362: LD_INT 0
18364: PPUSH
// YouLost ( Burlak ) ;
18365: LD_STRING Burlak
18367: PPUSH
18368: CALL_OW 104
// end ;
18372: LD_VAR 0 1
18376: RET
// export function AttackComrades ; begin
18377: LD_INT 0
18379: PPUSH
// YouLost ( SelfAttack ) ;
18380: LD_STRING SelfAttack
18382: PPUSH
18383: CALL_OW 104
// end ; end_of_file
18387: LD_VAR 0 1
18391: RET
// every 0 0$1 do var engs ;
18392: GO 18394
18394: DISABLE
18395: LD_INT 0
18397: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
18398: LD_ADDR_VAR 0 1
18402: PUSH
18403: LD_EXP 66
18407: PPUSH
18408: LD_INT 25
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PPUSH
18418: CALL_OW 72
18422: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
18423: LD_VAR 0 1
18427: PPUSH
18428: CALL_OW 122
// wait ( 0 0$1 ) ;
18432: LD_INT 35
18434: PPUSH
18435: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_INT 31
18446: PPUSH
18447: LD_INT 146
18449: PPUSH
18450: LD_INT 107
18452: PPUSH
18453: LD_INT 1
18455: PPUSH
18456: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
18460: LD_VAR 0 1
18464: PPUSH
18465: LD_INT 31
18467: PPUSH
18468: LD_INT 176
18470: PPUSH
18471: LD_INT 123
18473: PPUSH
18474: LD_INT 5
18476: PPUSH
18477: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_INT 31
18488: PPUSH
18489: LD_INT 170
18491: PPUSH
18492: LD_INT 102
18494: PPUSH
18495: LD_INT 4
18497: PPUSH
18498: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: LD_INT 31
18509: PPUSH
18510: LD_INT 173
18512: PPUSH
18513: LD_INT 105
18515: PPUSH
18516: LD_INT 4
18518: PPUSH
18519: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
18523: LD_VAR 0 1
18527: PPUSH
18528: LD_INT 71
18530: PPUSH
18531: CALL_OW 180
// end ;
18535: PPOPN 1
18537: END
// every 0 0$1 trigger activateAMAI do
18538: LD_EXP 26
18542: IFFALSE 18566
18544: GO 18546
18546: DISABLE
// begin enable ;
18547: ENABLE
// RepairDamageLeftBunkers ;
18548: CALL 18567 0 0
// if Difficulty = 3 then
18552: LD_OWVAR 67
18556: PUSH
18557: LD_INT 3
18559: EQUAL
18560: IFFALSE 18566
// RepairDamageRightBunkers ;
18562: CALL 18775 0 0
// end ;
18566: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
18567: LD_INT 0
18569: PPUSH
18570: PPUSH
18571: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
18572: LD_EXP 83
18576: NOT
18577: PUSH
18578: LD_INT 17
18580: PPUSH
18581: LD_INT 22
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 21
18593: PUSH
18594: LD_INT 3
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 30
18603: PUSH
18604: LD_INT 31
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 3
18613: PUSH
18614: LD_INT 24
18616: PUSH
18617: LD_INT 1000
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: PPUSH
18634: CALL_OW 70
18638: PUSH
18639: LD_INT 0
18641: EQUAL
18642: OR
18643: IFFALSE 18647
// exit ;
18645: GO 18770
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
18647: LD_EXP 83
18651: PPUSH
18652: LD_INT 3
18654: PUSH
18655: LD_INT 60
18657: PUSH
18658: EMPTY
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 72
18669: PPUSH
18670: CALL_OW 122
// for bunker in leftBunkers do
18674: LD_ADDR_VAR 0 3
18678: PUSH
18679: LD_EXP 79
18683: PUSH
18684: FOR_IN
18685: IFFALSE 18736
// if GetLives ( bunker ) < 1000 then
18687: LD_VAR 0 3
18691: PPUSH
18692: CALL_OW 256
18696: PUSH
18697: LD_INT 1000
18699: LESS
18700: IFFALSE 18734
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18702: LD_EXP 83
18706: PPUSH
18707: LD_INT 3
18709: PUSH
18710: LD_INT 60
18712: PUSH
18713: EMPTY
18714: LIST
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PPUSH
18720: CALL_OW 72
18724: PPUSH
18725: LD_VAR 0 3
18729: PPUSH
18730: CALL_OW 190
18734: GO 18684
18736: POP
18737: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
18738: LD_EXP 83
18742: PPUSH
18743: LD_INT 3
18745: PUSH
18746: LD_INT 60
18748: PUSH
18749: EMPTY
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PPUSH
18756: CALL_OW 72
18760: PPUSH
18761: LD_EXP 81
18765: PPUSH
18766: CALL_OW 180
// end ;
18770: LD_VAR 0 1
18774: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
18775: LD_INT 0
18777: PPUSH
18778: PPUSH
18779: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
18780: LD_EXP 84
18784: NOT
18785: PUSH
18786: LD_INT 16
18788: PPUSH
18789: LD_INT 22
18791: PUSH
18792: LD_INT 1
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 21
18801: PUSH
18802: LD_INT 3
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 30
18811: PUSH
18812: LD_INT 31
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: LD_INT 24
18824: PUSH
18825: LD_INT 1000
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: PPUSH
18842: CALL_OW 70
18846: PUSH
18847: LD_INT 0
18849: EQUAL
18850: OR
18851: IFFALSE 18855
// exit ;
18853: GO 18978
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
18855: LD_EXP 84
18859: PPUSH
18860: LD_INT 3
18862: PUSH
18863: LD_INT 60
18865: PUSH
18866: EMPTY
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 72
18877: PPUSH
18878: CALL_OW 122
// for bunker in rightBunkers do
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: LD_EXP 80
18891: PUSH
18892: FOR_IN
18893: IFFALSE 18944
// if GetLives ( bunker ) < 1000 then
18895: LD_VAR 0 3
18899: PPUSH
18900: CALL_OW 256
18904: PUSH
18905: LD_INT 1000
18907: LESS
18908: IFFALSE 18942
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18910: LD_EXP 84
18914: PPUSH
18915: LD_INT 3
18917: PUSH
18918: LD_INT 60
18920: PUSH
18921: EMPTY
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PPUSH
18928: CALL_OW 72
18932: PPUSH
18933: LD_VAR 0 3
18937: PPUSH
18938: CALL_OW 190
18942: GO 18892
18944: POP
18945: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
18946: LD_EXP 84
18950: PPUSH
18951: LD_INT 3
18953: PUSH
18954: LD_INT 60
18956: PUSH
18957: EMPTY
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: PPUSH
18964: CALL_OW 72
18968: PPUSH
18969: LD_EXP 82
18973: PPUSH
18974: CALL_OW 180
// end ;
18978: LD_VAR 0 1
18982: RET
