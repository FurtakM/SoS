// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 65 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 52353 0 9
// PrepareRussian ;
  43: CALL 395 0 0
// Action ;
  47: CALL 6204 0 0
// if debug then
  51: LD_EXP 1
  55: IFFALSE 64
// FogOff ( 3 ) ;
  57: LD_INT 3
  59: PPUSH
  60: CALL_OW 344
// end ;
  64: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  65: LD_INT 0
  67: PPUSH
// debug := false ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  76: LD_ADDR_EXP 2
  80: PUSH
  81: LD_STRING 01_
  83: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  84: LD_ADDR_EXP 3
  88: PUSH
  89: LD_STRING 02_
  91: ST_TO_ADDR
// beriaVisited := false ;
  92: LD_ADDR_EXP 4
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// kurinDontWannaTalk := false ;
 100: LD_ADDR_EXP 5
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// kirovHasTank := false ;
 108: LD_ADDR_EXP 6
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// blockNorth := true ;
 116: LD_ADDR_EXP 7
 120: PUSH
 121: LD_INT 1
 123: ST_TO_ADDR
// hasLab := false ;
 124: LD_ADDR_EXP 9
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// hasWorkshop := false ;
 132: LD_ADDR_EXP 10
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// hasToBuildTank := false ;
 140: LD_ADDR_EXP 11
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// hasTank := false ;
 148: LD_ADDR_EXP 12
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 156: LD_ADDR_EXP 8
 160: PUSH
 161: LD_INT 60
 163: ST_TO_ADDR
// allianceAttacked := false ;
 164: LD_ADDR_EXP 13
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// hasAllTanks := false ;
 172: LD_ADDR_EXP 14
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// vehCounter := 0 ;
 180: LD_ADDR_EXP 15
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// vehCaptured := false ;
 188: LD_ADDR_EXP 16
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// americanTrap := false ;
 196: LD_ADDR_EXP 17
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// belkovTrapped := false ;
 204: LD_ADDR_EXP 18
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// belkovDied := false ;
 212: LD_ADDR_EXP 19
 216: PUSH
 217: LD_INT 0
 219: ST_TO_ADDR
// belkovSaved := false ;
 220: LD_ADDR_EXP 28
 224: PUSH
 225: LD_INT 0
 227: ST_TO_ADDR
// westOutpostDiscovered := false ;
 228: LD_ADDR_EXP 20
 232: PUSH
 233: LD_INT 0
 235: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 236: LD_ADDR_EXP 21
 240: PUSH
 241: LD_INT 0
 243: ST_TO_ADDR
// westOutpostDestroyed := false ;
 244: LD_ADDR_EXP 22
 248: PUSH
 249: LD_INT 0
 251: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 252: LD_ADDR_EXP 23
 256: PUSH
 257: LD_INT 0
 259: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 260: LD_ADDR_EXP 24
 264: PUSH
 265: LD_INT 0
 267: ST_TO_ADDR
// reinforcementsGained := false ;
 268: LD_ADDR_EXP 25
 272: PUSH
 273: LD_INT 0
 275: ST_TO_ADDR
// allMapPointsSpotted := false ;
 276: LD_ADDR_EXP 26
 280: PUSH
 281: LD_INT 0
 283: ST_TO_ADDR
// mapSpotCounter := 0 ;
 284: LD_ADDR_EXP 27
 288: PUSH
 289: LD_INT 0
 291: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 292: LD_ADDR_EXP 29
 296: PUSH
 297: LD_INT 0
 299: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 300: LD_ADDR_EXP 30
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// initiative := false ;
 308: LD_ADDR_EXP 31
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// belkovBrother := false ;
 316: LD_ADDR_EXP 32
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 324: LD_ADDR_EXP 33
 328: PUSH
 329: LD_INT 1
 331: ST_TO_ADDR
// end ;
 332: LD_VAR 0 1
 336: RET
// every 0 0$1 trigger vehCounter >= 5 do
 337: LD_EXP 15
 341: PUSH
 342: LD_INT 5
 344: GREATEREQUAL
 345: IFFALSE 357
 347: GO 349
 349: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 350: LD_STRING ACH_WORKSHOP
 352: PPUSH
 353: CALL_OW 543
 357: END
// every 0 0$1 trigger vehCaptured do
 358: LD_EXP 16
 362: IFFALSE 374
 364: GO 366
 366: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 367: LD_STRING ACH_RETAKE
 369: PPUSH
 370: CALL_OW 543
 374: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 375: LD_INT 193
 377: PPUSH
 378: CALL_OW 301
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 387: LD_STRING ACH_DEPOT
 389: PPUSH
 390: CALL_OW 543
 394: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un , additional ; begin
 395: LD_INT 0
 397: PPUSH
 398: PPUSH
 399: PPUSH
 400: PPUSH
 401: PPUSH
 402: PPUSH
// uc_side := 6 ;
 403: LD_ADDR_OWVAR 20
 407: PUSH
 408: LD_INT 6
 410: ST_TO_ADDR
// uc_nation := 3 ;
 411: LD_ADDR_OWVAR 21
 415: PUSH
 416: LD_INT 3
 418: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 419: LD_INT 71
 421: PPUSH
 422: LD_STRING kirov
 424: PPUSH
 425: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 429: LD_ADDR_EXP 38
 433: PUSH
 434: LD_STRING Kurin
 436: PPUSH
 437: CALL_OW 25
 441: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 442: LD_EXP 38
 446: PPUSH
 447: LD_INT 117
 449: PPUSH
 450: LD_INT 108
 452: PPUSH
 453: LD_INT 0
 455: PPUSH
 456: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 460: LD_EXP 38
 464: PPUSH
 465: LD_INT 2
 467: PPUSH
 468: CALL 59024 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 472: LD_ADDR_EXP 39
 476: PUSH
 477: LD_STRING Kovalyuk
 479: PPUSH
 480: CALL_OW 25
 484: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 485: LD_EXP 39
 489: PPUSH
 490: LD_INT 71
 492: PPUSH
 493: CALL_OW 52
// additional := ( 3 - Count ( CreateCharacterSet ( 01_belkovTeam ) ) ) ;
 497: LD_ADDR_VAR 0 6
 501: PUSH
 502: LD_INT 3
 504: PUSH
 505: LD_STRING 01_belkovTeam
 507: PPUSH
 508: CALL_OW 31
 512: PPUSH
 513: CALL 19770 0 1
 517: MINUS
 518: ST_TO_ADDR
// if additional < 0 then
 519: LD_VAR 0 6
 523: PUSH
 524: LD_INT 0
 526: LESS
 527: IFFALSE 537
// additional := 0 ;
 529: LD_ADDR_VAR 0 6
 533: PUSH
 534: LD_INT 0
 536: ST_TO_ADDR
// tmp := [ [ ru2_arm1 , class_soldier , 2 + additional ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 537: LD_ADDR_VAR 0 4
 541: PUSH
 542: LD_INT 95
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: LD_INT 2
 550: PUSH
 551: LD_VAR 0 6
 555: PLUS
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 209
 564: PUSH
 565: LD_INT 1
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: LIST
 575: PUSH
 576: LD_INT 83
 578: PUSH
 579: LD_INT 4
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_INT 71
 592: PUSH
 593: LD_INT 2
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 71
 606: PUSH
 607: LD_INT 3
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: PUSH
 618: EMPTY
 619: LIST
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// InitHC_All ( ) ;
 625: CALL_OW 584
// belkovBrother := false ;
 629: LD_ADDR_EXP 32
 633: PUSH
 634: LD_INT 0
 636: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 637: LD_EXP 2
 641: PUSH
 642: LD_STRING Belkov
 644: STR
 645: PPUSH
 646: CALL_OW 28
 650: NOT
 651: IFFALSE 660
 653: PUSH
 654: LD_EXP 1
 658: NOT
 659: AND
 660: IFFALSE 697
// begin Belkov := NewCharacter ( Belkov2 ) ;
 662: LD_ADDR_EXP 36
 666: PUSH
 667: LD_STRING Belkov2
 669: PPUSH
 670: CALL_OW 25
 674: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 675: LD_EXP 36
 679: PPUSH
 680: LD_INT 71
 682: PPUSH
 683: CALL_OW 52
// belkovBrother := true ;
 687: LD_ADDR_EXP 32
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// end else
 695: GO 763
// begin un := NewCharacter ( Belkov2 ) ;
 697: LD_ADDR_VAR 0 5
 701: PUSH
 702: LD_STRING Belkov2
 704: PPUSH
 705: CALL_OW 25
 709: ST_TO_ADDR
// SetTag ( un , tBelkov ) ;
 710: LD_VAR 0 5
 714: PPUSH
 715: LD_INT 1
 717: PPUSH
 718: CALL_OW 109
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 722: LD_ADDR_EXP 43
 726: PUSH
 727: LD_EXP 43
 731: PPUSH
 732: LD_EXP 43
 736: PUSH
 737: LD_INT 1
 739: PLUS
 740: PPUSH
 741: LD_VAR 0 5
 745: PPUSH
 746: CALL_OW 1
 750: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 751: LD_VAR 0 5
 755: PPUSH
 756: LD_INT 209
 758: PPUSH
 759: CALL_OW 52
// end ; for i in tmp do
 763: LD_ADDR_VAR 0 2
 767: PUSH
 768: LD_VAR 0 4
 772: PUSH
 773: FOR_IN
 774: IFFALSE 880
// for j := 1 to i [ 3 ] do
 776: LD_ADDR_VAR 0 3
 780: PUSH
 781: DOUBLE
 782: LD_INT 1
 784: DEC
 785: ST_TO_ADDR
 786: LD_VAR 0 2
 790: PUSH
 791: LD_INT 3
 793: ARRAY
 794: PUSH
 795: FOR_TO
 796: IFFALSE 876
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 798: LD_INT 0
 800: PPUSH
 801: LD_VAR 0 2
 805: PUSH
 806: LD_INT 2
 808: ARRAY
 809: PPUSH
 810: LD_INT 2
 812: PPUSH
 813: CALL_OW 380
// un := CreateHuman ;
 817: LD_ADDR_VAR 0 5
 821: PUSH
 822: CALL_OW 44
 826: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 827: LD_VAR 0 5
 831: PPUSH
 832: LD_VAR 0 2
 836: PUSH
 837: LD_INT 1
 839: ARRAY
 840: PPUSH
 841: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 845: LD_ADDR_EXP 43
 849: PUSH
 850: LD_EXP 43
 854: PPUSH
 855: LD_EXP 43
 859: PUSH
 860: LD_INT 1
 862: PLUS
 863: PPUSH
 864: LD_VAR 0 5
 868: PPUSH
 869: CALL_OW 1
 873: ST_TO_ADDR
// end ;
 874: GO 795
 876: POP
 877: POP
 878: GO 773
 880: POP
 881: POP
// SetBName ( beria , beria ) ;
 882: LD_INT 106
 884: PPUSH
 885: LD_STRING beria
 887: PPUSH
 888: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 892: LD_ADDR_EXP 40
 896: PUSH
 897: LD_STRING Platonov
 899: PPUSH
 900: CALL_OW 25
 904: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 905: LD_EXP 40
 909: PPUSH
 910: LD_INT 66
 912: PPUSH
 913: LD_INT 99
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 923: LD_EXP 40
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL 59024 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 935: LD_ADDR_EXP 41
 939: PUSH
 940: LD_STRING Kuklajs
 942: PPUSH
 943: CALL_OW 25
 947: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 948: LD_ADDR_EXP 42
 952: PUSH
 953: LD_STRING Benko
 955: PPUSH
 956: CALL_OW 25
 960: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 961: LD_EXP 41
 965: PPUSH
 966: LD_INT 76
 968: PPUSH
 969: LD_INT 99
 971: PPUSH
 972: LD_INT 0
 974: PPUSH
 975: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 979: LD_EXP 42
 983: PPUSH
 984: LD_INT 68
 986: PPUSH
 987: LD_INT 88
 989: PPUSH
 990: LD_INT 0
 992: PPUSH
 993: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 997: LD_EXP 41
1001: PUSH
1002: LD_EXP 42
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PPUSH
1011: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
1015: LD_ADDR_EXP 44
1019: PUSH
1020: LD_EXP 44
1024: PPUSH
1025: LD_EXP 44
1029: PUSH
1030: LD_INT 1
1032: PLUS
1033: PPUSH
1034: LD_EXP 41
1038: PPUSH
1039: CALL_OW 1
1043: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
1044: LD_ADDR_EXP 44
1048: PUSH
1049: LD_EXP 44
1053: PPUSH
1054: LD_EXP 44
1058: PUSH
1059: LD_INT 1
1061: PLUS
1062: PPUSH
1063: LD_EXP 42
1067: PPUSH
1068: CALL_OW 1
1072: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
1073: LD_ADDR_VAR 0 4
1077: PUSH
1078: LD_INT 63
1080: PUSH
1081: LD_INT 86
1083: PUSH
1084: LD_INT 0
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_INT 74
1094: PUSH
1095: LD_INT 94
1097: PUSH
1098: LD_INT 1
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: LIST
1105: PUSH
1106: LD_INT 77
1108: PUSH
1109: LD_INT 103
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: LIST
1119: PUSH
1120: EMPTY
1121: LIST
1122: LIST
1123: LIST
1124: ST_TO_ADDR
// for i in tmp do
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_VAR 0 4
1134: PUSH
1135: FOR_IN
1136: IFFALSE 1263
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 1
1143: PPUSH
1144: LD_INT 3
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: LD_INT 2
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: LIST
1160: LIST
1161: PUSH
1162: LD_OWVAR 67
1166: ARRAY
1167: PPUSH
1168: CALL_OW 380
// un := CreateHuman ;
1172: LD_ADDR_VAR 0 5
1176: PUSH
1177: CALL_OW 44
1181: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1182: LD_VAR 0 5
1186: PPUSH
1187: LD_VAR 0 2
1191: PUSH
1192: LD_INT 3
1194: ARRAY
1195: PPUSH
1196: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1200: LD_VAR 0 5
1204: PPUSH
1205: LD_VAR 0 2
1209: PUSH
1210: LD_INT 1
1212: ARRAY
1213: PPUSH
1214: LD_VAR 0 2
1218: PUSH
1219: LD_INT 2
1221: ARRAY
1222: PPUSH
1223: CALL_OW 428
1227: PPUSH
1228: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1232: LD_ADDR_EXP 44
1236: PUSH
1237: LD_EXP 44
1241: PPUSH
1242: LD_EXP 44
1246: PUSH
1247: LD_INT 1
1249: PLUS
1250: PPUSH
1251: LD_VAR 0 5
1255: PPUSH
1256: CALL_OW 1
1260: ST_TO_ADDR
// end ;
1261: GO 1135
1263: POP
1264: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1265: LD_EXP 2
1269: PUSH
1270: LD_STRING Gnyevko
1272: STR
1273: PPUSH
1274: CALL_OW 28
1278: NOT
1279: IFFALSE 1288
1281: PUSH
1282: LD_EXP 1
1286: NOT
1287: AND
1288: IFFALSE 1315
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 2
1295: PPUSH
1296: LD_INT 1
1298: PPUSH
1299: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1303: CALL_OW 44
1307: PPUSH
1308: LD_INT 106
1310: PPUSH
1311: CALL_OW 52
// end ; end ;
1315: LD_VAR 0 1
1319: RET
// export function PrepareBurlak ; var i ; begin
1320: LD_INT 0
1322: PPUSH
1323: PPUSH
// uc_side := 3 ;
1324: LD_ADDR_OWVAR 20
1328: PUSH
1329: LD_INT 3
1331: ST_TO_ADDR
// uc_nation := 3 ;
1332: LD_ADDR_OWVAR 21
1336: PUSH
1337: LD_INT 3
1339: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1340: LD_ADDR_EXP 34
1344: PUSH
1345: LD_STRING Burlak
1347: PPUSH
1348: LD_EXP 1
1352: NOT
1353: PPUSH
1354: LD_EXP 2
1358: PPUSH
1359: CALL 17570 0 3
1363: ST_TO_ADDR
// uc_side := 6 ;
1364: LD_ADDR_OWVAR 20
1368: PUSH
1369: LD_INT 6
1371: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1372: LD_ADDR_EXP 35
1376: PUSH
1377: LD_STRING Gnyevko
1379: PPUSH
1380: LD_EXP 1
1384: NOT
1385: PPUSH
1386: LD_EXP 2
1390: PPUSH
1391: CALL 17570 0 3
1395: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1396: LD_ADDR_EXP 37
1400: PUSH
1401: LD_STRING Kirilenkova
1403: PPUSH
1404: LD_EXP 1
1408: NOT
1409: PPUSH
1410: LD_EXP 2
1414: PPUSH
1415: CALL 17570 0 3
1419: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1420: LD_ADDR_EXP 36
1424: PUSH
1425: LD_STRING Belkov
1427: PPUSH
1428: LD_EXP 1
1432: NOT
1433: PPUSH
1434: LD_EXP 2
1438: PPUSH
1439: CALL 17570 0 3
1443: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_belkovTeam ) ;
1444: LD_ADDR_EXP 45
1448: PUSH
1449: LD_STRING 01_belkovTeam
1451: PPUSH
1452: CALL_OW 31
1456: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1457: LD_ADDR_VAR 0 1
1461: PUSH
1462: LD_EXP 34
1466: PUSH
1467: LD_EXP 35
1471: PUSH
1472: LD_EXP 37
1476: PUSH
1477: LD_EXP 36
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: LIST
1487: PUSH
1488: LD_EXP 45
1492: UNION
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 1
1498: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1499: LD_EXP 4
1503: IFFALSE 1521
1505: PUSH
1506: LD_INT 47
1508: PPUSH
1509: LD_INT 3
1511: PPUSH
1512: CALL_OW 321
1516: PUSH
1517: LD_INT 2
1519: EQUAL
1520: AND
1521: IFFALSE 1748
1523: GO 1525
1525: DISABLE
1526: LD_INT 0
1528: PPUSH
1529: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1530: LD_ADDR_VAR 0 1
1534: PUSH
1535: LD_EXP 43
1539: PPUSH
1540: LD_INT 25
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PPUSH
1550: CALL_OW 72
1554: ST_TO_ADDR
// if not tmp then
1555: LD_VAR 0 1
1559: NOT
1560: IFFALSE 1564
// exit ;
1562: GO 1748
// wait ( 0 0$5 ) ;
1564: LD_INT 175
1566: PPUSH
1567: CALL_OW 67
// ComExit ( tmp ) ;
1571: LD_VAR 0 1
1575: PPUSH
1576: CALL 56100 0 1
// for i := 1 to 2 do
1580: LD_ADDR_VAR 0 2
1584: PUSH
1585: DOUBLE
1586: LD_INT 1
1588: DEC
1589: ST_TO_ADDR
1590: LD_INT 2
1592: PUSH
1593: FOR_TO
1594: IFFALSE 1637
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 71
1603: PPUSH
1604: LD_INT 2
1606: PPUSH
1607: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1611: LD_VAR 0 1
1615: PPUSH
1616: LD_INT 121
1618: PPUSH
1619: LD_INT 111
1621: PPUSH
1622: CALL_OW 171
// AddComUnload ( tmp ) ;
1626: LD_VAR 0 1
1630: PPUSH
1631: CALL_OW 219
// end ;
1635: GO 1593
1637: POP
1638: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1639: LD_VAR 0 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: LD_INT 113
1649: PPUSH
1650: LD_INT 113
1652: PPUSH
1653: LD_INT 0
1655: PPUSH
1656: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1660: LD_INT 83
1662: PPUSH
1663: LD_INT 46
1665: PPUSH
1666: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1670: LD_INT 83
1672: PPUSH
1673: LD_INT 47
1675: PPUSH
1676: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1680: LD_INT 83
1682: PPUSH
1683: LD_INT 48
1685: PPUSH
1686: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1690: LD_VAR 0 1
1694: PPUSH
1695: LD_INT 26
1697: PPUSH
1698: LD_INT 116
1700: PPUSH
1701: LD_INT 98
1703: PPUSH
1704: LD_INT 0
1706: PPUSH
1707: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1711: LD_INT 35
1713: PPUSH
1714: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_INT 60
1725: PUSH
1726: EMPTY
1727: LIST
1728: PPUSH
1729: CALL_OW 72
1733: NOT
1734: IFFALSE 1711
// ComEnterUnit ( tmp , kirov ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_INT 71
1743: PPUSH
1744: CALL_OW 120
// end ;
1748: PPOPN 2
1750: END
// export function BelkovAttackScript ; var i , un , brother , belkovTank , mech , tmp , fuel ; begin
1751: LD_INT 0
1753: PPUSH
1754: PPUSH
1755: PPUSH
1756: PPUSH
1757: PPUSH
1758: PPUSH
1759: PPUSH
1760: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1761: LD_ADDR_VAR 0 5
1765: PUSH
1766: LD_INT 22
1768: PUSH
1769: LD_INT 6
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 21
1778: PUSH
1779: LD_INT 2
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: PPUSH
1790: CALL_OW 69
1794: ST_TO_ADDR
// if not belkovTank then
1795: LD_VAR 0 5
1799: NOT
1800: IFFALSE 1893
// begin uc_side := 6 ;
1802: LD_ADDR_OWVAR 20
1806: PUSH
1807: LD_INT 6
1809: ST_TO_ADDR
// uc_nation := 3 ;
1810: LD_ADDR_OWVAR 21
1814: PUSH
1815: LD_INT 3
1817: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1818: LD_INT 21
1820: PPUSH
1821: LD_INT 1
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: LD_INT 42
1829: PPUSH
1830: LD_INT 100
1832: PPUSH
1833: CALL 22532 0 5
// belkovTank := CreateVehicle ;
1837: LD_ADDR_VAR 0 5
1841: PUSH
1842: CALL_OW 45
1846: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1847: LD_VAR 0 5
1851: PPUSH
1852: LD_INT 5
1854: PPUSH
1855: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1859: LD_VAR 0 5
1863: PPUSH
1864: LD_INT 127
1866: PPUSH
1867: LD_INT 118
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1877: LD_EXP 36
1881: PPUSH
1882: LD_VAR 0 5
1886: PPUSH
1887: CALL_OW 120
// end else
1891: GO 1907
// begin belkovTank := belkovTank [ 1 ] ;
1893: LD_ADDR_VAR 0 5
1897: PUSH
1898: LD_VAR 0 5
1902: PUSH
1903: LD_INT 1
1905: ARRAY
1906: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1907: LD_VAR 0 5
1911: PPUSH
1912: LD_INT 71
1914: PPUSH
1915: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1919: LD_VAR 0 5
1923: PPUSH
1924: LD_INT 71
1926: PPUSH
1927: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1931: LD_VAR 0 5
1935: PPUSH
1936: CALL_OW 256
1940: PUSH
1941: LD_INT 1000
1943: LESS
1944: IFFALSE 2057
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1946: LD_ADDR_VAR 0 6
1950: PUSH
1951: LD_EXP 43
1955: PPUSH
1956: LD_INT 25
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PPUSH
1966: CALL_OW 72
1970: ST_TO_ADDR
// if not mech then
1971: LD_VAR 0 6
1975: NOT
1976: IFFALSE 1992
// SetLives ( belkovTank , 1000 ) else
1978: LD_VAR 0 5
1982: PPUSH
1983: LD_INT 1000
1985: PPUSH
1986: CALL_OW 234
1990: GO 2057
// begin ComExit ( mech ) ;
1992: LD_VAR 0 6
1996: PPUSH
1997: CALL 56100 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
2001: LD_VAR 0 6
2005: PPUSH
2006: LD_VAR 0 5
2010: PPUSH
2011: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2015: LD_VAR 0 6
2019: PPUSH
2020: LD_INT 22
2022: PUSH
2023: LD_INT 6
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: LD_INT 30
2032: PUSH
2033: LD_INT 2
2035: PUSH
2036: EMPTY
2037: LIST
2038: LIST
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PPUSH
2044: CALL_OW 69
2048: PUSH
2049: LD_INT 1
2051: ARRAY
2052: PPUSH
2053: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
2057: LD_INT 70
2059: PPUSH
2060: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
2064: LD_VAR 0 5
2068: PPUSH
2069: CALL_OW 256
2073: PUSH
2074: LD_INT 1000
2076: EQUAL
2077: IFFALSE 2057
// if mech then
2079: LD_VAR 0 6
2083: IFFALSE 2127
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2085: LD_VAR 0 6
2089: PPUSH
2090: LD_INT 22
2092: PUSH
2093: LD_INT 6
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 2
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PPUSH
2114: CALL_OW 69
2118: PUSH
2119: LD_INT 1
2121: ARRAY
2122: PPUSH
2123: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2127: LD_EXP 36
2131: PPUSH
2132: LD_INT 107
2134: PPUSH
2135: LD_INT 104
2137: PPUSH
2138: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2142: LD_EXP 36
2146: PPUSH
2147: LD_INT 95
2149: PPUSH
2150: LD_INT 101
2152: PPUSH
2153: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2157: LD_EXP 36
2161: PPUSH
2162: LD_INT 89
2164: PPUSH
2165: LD_INT 100
2167: PPUSH
2168: CALL_OW 171
// wait ( 0 0$2 ) ;
2172: LD_INT 70
2174: PPUSH
2175: CALL_OW 67
// brother := FilterAllUnits ( [ [ f_side , 6 ] , [ f_tag , tBelkov ] , [ f_class , class_soldier ] ] ) ;
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 6
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 120
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: LD_INT 25
2206: PUSH
2207: LD_INT 1
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: PPUSH
2219: CALL_OW 69
2223: ST_TO_ADDR
// if brother then
2224: LD_VAR 0 4
2228: IFFALSE 2271
// if not brother [ 1 ] in belkovTeam then
2230: LD_VAR 0 4
2234: PUSH
2235: LD_INT 1
2237: ARRAY
2238: PUSH
2239: LD_EXP 45
2243: IN
2244: NOT
2245: IFFALSE 2271
// belkovTeam := Join ( belkovTeam , brother [ 1 ] ) ;
2247: LD_ADDR_EXP 45
2251: PUSH
2252: LD_EXP 45
2256: PPUSH
2257: LD_VAR 0 4
2261: PUSH
2262: LD_INT 1
2264: ARRAY
2265: PPUSH
2266: CALL 55702 0 2
2270: ST_TO_ADDR
// if belkovTeam < 3 then
2271: LD_EXP 45
2275: PUSH
2276: LD_INT 3
2278: LESS
2279: IFFALSE 2364
// begin for i := belkovTeam to 3 do
2281: LD_ADDR_VAR 0 2
2285: PUSH
2286: DOUBLE
2287: LD_EXP 45
2291: DEC
2292: ST_TO_ADDR
2293: LD_INT 3
2295: PUSH
2296: FOR_TO
2297: IFFALSE 2362
// begin un := kirovBaseSquad [ 1 ] ;
2299: LD_ADDR_VAR 0 3
2303: PUSH
2304: LD_EXP 43
2308: PUSH
2309: LD_INT 1
2311: ARRAY
2312: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
2313: LD_ADDR_EXP 43
2317: PUSH
2318: LD_EXP 43
2322: PPUSH
2323: LD_INT 1
2325: PPUSH
2326: CALL_OW 3
2330: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
2331: LD_ADDR_EXP 45
2335: PUSH
2336: LD_EXP 45
2340: PPUSH
2341: LD_EXP 45
2345: PUSH
2346: LD_INT 1
2348: PLUS
2349: PPUSH
2350: LD_VAR 0 3
2354: PPUSH
2355: CALL_OW 1
2359: ST_TO_ADDR
// end ;
2360: GO 2296
2362: POP
2363: POP
// end ; if Kirilenkova then
2364: LD_EXP 37
2368: IFFALSE 2392
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
2370: LD_ADDR_EXP 45
2374: PUSH
2375: LD_EXP 45
2379: PPUSH
2380: LD_EXP 37
2384: PPUSH
2385: CALL 55702 0 2
2389: ST_TO_ADDR
2390: GO 2431
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
2392: LD_ADDR_EXP 45
2396: PUSH
2397: LD_EXP 45
2401: PPUSH
2402: LD_EXP 43
2406: PPUSH
2407: LD_INT 25
2409: PUSH
2410: LD_INT 4
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PPUSH
2417: CALL_OW 72
2421: PUSH
2422: LD_INT 1
2424: ARRAY
2425: PPUSH
2426: CALL 55702 0 2
2430: ST_TO_ADDR
// for i in belkovTeam do
2431: LD_ADDR_VAR 0 2
2435: PUSH
2436: LD_EXP 45
2440: PUSH
2441: FOR_IN
2442: IFFALSE 2470
// begin ComExit ( i ) ;
2444: LD_VAR 0 2
2448: PPUSH
2449: CALL 56100 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 89
2460: PPUSH
2461: LD_INT 100
2463: PPUSH
2464: CALL_OW 171
// end ;
2468: GO 2441
2470: POP
2471: POP
// tmp := Belkov union belkovTeam ;
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_EXP 36
2481: PUSH
2482: LD_EXP 45
2486: UNION
2487: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2488: LD_INT 35
2490: PPUSH
2491: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2495: LD_VAR 0 7
2499: PPUSH
2500: LD_INT 60
2502: PUSH
2503: EMPTY
2504: LIST
2505: PPUSH
2506: CALL_OW 72
2510: NOT
2511: IFFALSE 2488
// ComMoveXY ( tmp , 71 , 65 ) ;
2513: LD_VAR 0 7
2517: PPUSH
2518: LD_INT 71
2520: PPUSH
2521: LD_INT 65
2523: PPUSH
2524: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2528: LD_VAR 0 7
2532: PPUSH
2533: LD_INT 61
2535: PPUSH
2536: LD_INT 37
2538: PPUSH
2539: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2543: LD_VAR 0 7
2547: PPUSH
2548: LD_INT 67
2550: PPUSH
2551: LD_INT 17
2553: PPUSH
2554: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2558: LD_VAR 0 7
2562: PPUSH
2563: LD_INT 70
2565: PPUSH
2566: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2570: LD_EXP 36
2574: PPUSH
2575: LD_INT 63
2577: PPUSH
2578: LD_INT 8
2580: PPUSH
2581: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2585: LD_EXP 36
2589: PPUSH
2590: LD_INT 105
2592: PPUSH
2593: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2597: LD_EXP 36
2601: PPUSH
2602: LD_INT 86
2604: PPUSH
2605: LD_INT 37
2607: PPUSH
2608: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2612: LD_EXP 36
2616: PPUSH
2617: LD_INT 105
2619: PPUSH
2620: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2624: LD_VAR 0 7
2628: PPUSH
2629: LD_INT 88
2631: PPUSH
2632: LD_INT 29
2634: PPUSH
2635: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2639: LD_INT 35
2641: PPUSH
2642: CALL_OW 67
// for i in tmp do
2646: LD_ADDR_VAR 0 2
2650: PUSH
2651: LD_VAR 0 7
2655: PUSH
2656: FOR_IN
2657: IFFALSE 2688
// if not HasTask ( i ) then
2659: LD_VAR 0 2
2663: PPUSH
2664: CALL_OW 314
2668: NOT
2669: IFFALSE 2686
// AddComMoveXY ( tmp , 88 , 29 ) ;
2671: LD_VAR 0 7
2675: PPUSH
2676: LD_INT 88
2678: PPUSH
2679: LD_INT 29
2681: PPUSH
2682: CALL_OW 171
2686: GO 2656
2688: POP
2689: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2690: LD_VAR 0 7
2694: PPUSH
2695: LD_INT 95
2697: PUSH
2698: LD_INT 6
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PPUSH
2705: CALL_OW 72
2709: IFFALSE 2803
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: LD_VAR 0 7
2720: PPUSH
2721: LD_INT 95
2723: PUSH
2724: LD_INT 6
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 72
2735: PUSH
2736: FOR_IN
2737: IFFALSE 2801
// begin if i = Belkov then
2739: LD_VAR 0 2
2743: PUSH
2744: LD_EXP 36
2748: EQUAL
2749: IFFALSE 2790
// begin belkovTank := IsInUnit ( Belkov ) ;
2751: LD_ADDR_VAR 0 5
2755: PUSH
2756: LD_EXP 36
2760: PPUSH
2761: CALL_OW 310
2765: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2766: LD_ADDR_VAR 0 8
2770: PUSH
2771: LD_VAR 0 5
2775: PPUSH
2776: CALL_OW 261
2780: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2781: LD_VAR 0 5
2785: PPUSH
2786: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: CALL_OW 64
// end ;
2799: GO 2736
2801: POP
2802: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2803: LD_VAR 0 7
2807: PPUSH
2808: LD_INT 52
2810: PUSH
2811: EMPTY
2812: LIST
2813: PPUSH
2814: CALL_OW 72
2818: NOT
2819: IFFALSE 2639
// wait ( 1 1$20 ) ;
2821: LD_INT 2800
2823: PPUSH
2824: CALL_OW 67
// if fuel < 50 then
2828: LD_VAR 0 8
2832: PUSH
2833: LD_INT 50
2835: LESS
2836: IFFALSE 2846
// fuel := 50 ;
2838: LD_ADDR_VAR 0 8
2842: PUSH
2843: LD_INT 50
2845: ST_TO_ADDR
// uc_side := 6 ;
2846: LD_ADDR_OWVAR 20
2850: PUSH
2851: LD_INT 6
2853: ST_TO_ADDR
// uc_nation := 3 ;
2854: LD_ADDR_OWVAR 21
2858: PUSH
2859: LD_INT 3
2861: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2862: LD_INT 21
2864: PPUSH
2865: LD_INT 1
2867: PPUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 42
2873: PPUSH
2874: LD_VAR 0 8
2878: PUSH
2879: LD_INT 5
2881: MINUS
2882: PPUSH
2883: CALL 22532 0 5
// belkovTank := CreateVehicle ;
2887: LD_ADDR_VAR 0 5
2891: PUSH
2892: CALL_OW 45
2896: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2897: LD_VAR 0 5
2901: PPUSH
2902: LD_INT 2
2904: PPUSH
2905: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2909: LD_VAR 0 5
2913: PPUSH
2914: LD_INT 60
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 0
2922: PPUSH
2923: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2927: LD_EXP 36
2931: PPUSH
2932: LD_VAR 0 5
2936: PPUSH
2937: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2941: LD_EXP 36
2945: PPUSH
2946: LD_INT 72
2948: PPUSH
2949: LD_INT 26
2951: PPUSH
2952: CALL_OW 111
// wait ( 0 0$2 ) ;
2956: LD_INT 70
2958: PPUSH
2959: CALL_OW 67
// for i in belkovTeam do
2963: LD_ADDR_VAR 0 2
2967: PUSH
2968: LD_EXP 45
2972: PUSH
2973: FOR_IN
2974: IFFALSE 3018
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_INT 60
2983: PPUSH
2984: LD_INT 3
2986: PPUSH
2987: LD_INT 0
2989: PPUSH
2990: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2994: LD_VAR 0 2
2998: PPUSH
2999: LD_INT 65
3001: PPUSH
3002: LD_INT 18
3004: PPUSH
3005: CALL_OW 111
// wait ( 0 0$0.8 ) ;
3009: LD_INT 28
3011: PPUSH
3012: CALL_OW 67
// end ;
3016: GO 2973
3018: POP
3019: POP
// repeat wait ( 0 0$1 ) ;
3020: LD_INT 35
3022: PPUSH
3023: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
3027: LD_EXP 14
3031: IFFALSE 3051
3033: PUSH
3034: LD_EXP 45
3038: PPUSH
3039: LD_INT 60
3041: PUSH
3042: EMPTY
3043: LIST
3044: PPUSH
3045: CALL_OW 72
3049: NOT
3050: AND
3051: IFFALSE 3020
// americanTrap := true ;
3053: LD_ADDR_EXP 17
3057: PUSH
3058: LD_INT 1
3060: ST_TO_ADDR
// end ;
3061: LD_VAR 0 1
3065: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
3066: LD_EXP 4
3070: IFFALSE 3083
3072: PUSH
3073: LD_EXP 40
3077: PPUSH
3078: CALL_OW 302
3082: AND
3083: IFFALSE 3407
3085: GO 3087
3087: DISABLE
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// begin enable ;
3094: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
3095: LD_EXP 8
3099: PUSH
3100: LD_INT 0
3102: GREATER
3103: IFFALSE 3117
3105: PUSH
3106: LD_EXP 40
3110: PPUSH
3111: CALL_OW 314
3115: NOT
3116: AND
3117: IFFALSE 3288
// begin dir := rand ( 0 , 5 ) ;
3119: LD_ADDR_VAR 0 4
3123: PUSH
3124: LD_INT 0
3126: PPUSH
3127: LD_INT 5
3129: PPUSH
3130: CALL_OW 12
3134: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
3135: LD_ADDR_VAR 0 1
3139: PUSH
3140: LD_EXP 40
3144: PPUSH
3145: CALL_OW 250
3149: PPUSH
3150: LD_VAR 0 4
3154: PPUSH
3155: LD_INT 5
3157: PPUSH
3158: CALL_OW 272
3162: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 40
3172: PPUSH
3173: CALL_OW 251
3177: PPUSH
3178: LD_VAR 0 4
3182: PPUSH
3183: LD_INT 5
3185: PPUSH
3186: CALL_OW 273
3190: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
3191: LD_VAR 0 1
3195: PPUSH
3196: LD_VAR 0 2
3200: PPUSH
3201: CALL_OW 488
3205: IFFALSE 3230
3207: PUSH
3208: LD_INT 106
3210: PPUSH
3211: LD_VAR 0 1
3215: PPUSH
3216: LD_VAR 0 2
3220: PPUSH
3221: CALL_OW 297
3225: PUSH
3226: LD_INT 26
3228: LESS
3229: AND
3230: IFFALSE 3253
// AddComMoveXY ( Platonov , x , y ) else
3232: LD_EXP 40
3236: PPUSH
3237: LD_VAR 0 1
3241: PPUSH
3242: LD_VAR 0 2
3246: PPUSH
3247: CALL_OW 171
3251: GO 3268
// AddComMoveXY ( Platonov , 64 , 96 ) ;
3253: LD_EXP 40
3257: PPUSH
3258: LD_INT 64
3260: PPUSH
3261: LD_INT 96
3263: PPUSH
3264: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
3268: LD_EXP 40
3272: PPUSH
3273: LD_INT 105
3275: PPUSH
3276: LD_INT 315
3278: PPUSH
3279: CALL_OW 12
3283: PPUSH
3284: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
3288: LD_EXP 8
3292: PUSH
3293: LD_INT 0
3295: LESSEQUAL
3296: IFFALSE 3342
// begin if not IsAt ( Platonov , 64 , 96 ) then
3298: LD_EXP 40
3302: PPUSH
3303: LD_INT 64
3305: PPUSH
3306: LD_INT 96
3308: PPUSH
3309: CALL_OW 307
3313: NOT
3314: IFFALSE 3340
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
3316: LD_EXP 40
3320: PPUSH
3321: LD_INT 64
3323: PPUSH
3324: LD_INT 96
3326: PPUSH
3327: CALL_OW 111
// AddComHold ( Platonov ) ;
3331: LD_EXP 40
3335: PPUSH
3336: CALL_OW 200
// end ; end else
3340: GO 3407
// if tick mod 0 0$75 = 0 0$00 then
3342: LD_OWVAR 1
3346: PUSH
3347: LD_INT 2625
3349: MOD
3350: PUSH
3351: LD_INT 0
3353: EQUAL
3354: IFFALSE 3407
// begin amount := rand ( 2 , 5 ) ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: LD_INT 2
3363: PPUSH
3364: LD_INT 5
3366: PPUSH
3367: CALL_OW 12
3371: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3372: LD_ADDR_EXP 8
3376: PUSH
3377: LD_EXP 8
3381: PUSH
3382: LD_VAR 0 3
3386: PUSH
3387: LD_INT 10
3389: MUL
3390: MINUS
3391: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3392: LD_VAR 0 3
3396: PPUSH
3397: LD_INT 5
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 55
// end ; end ;
3407: PPOPN 4
3409: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3410: LD_INT 106
3412: PPUSH
3413: CALL_OW 274
3417: PPUSH
3418: LD_INT 2
3420: PPUSH
3421: CALL_OW 275
3425: PUSH
3426: LD_INT 30
3428: LESS
3429: IFFALSE 3641
3431: GO 3433
3433: DISABLE
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3438: LD_ADDR_VAR 0 2
3442: PUSH
3443: LD_EXP 43
3447: PPUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 60
3453: PUSH
3454: EMPTY
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: LD_INT 25
3463: PUSH
3464: LD_INT 2
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PPUSH
3475: CALL_OW 72
3479: ST_TO_ADDR
// if not eng then
3480: LD_VAR 0 2
3484: NOT
3485: IFFALSE 3489
// exit ;
3487: GO 3641
// ComExit ( eng ) ;
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL 56100 0 1
// i := 5 ;
3498: LD_ADDR_VAR 0 1
3502: PUSH
3503: LD_INT 5
3505: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3506: LD_INT 35
3508: PPUSH
3509: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3513: LD_VAR 0 2
3517: PPUSH
3518: LD_INT 60
3520: PUSH
3521: EMPTY
3522: LIST
3523: PPUSH
3524: CALL_OW 72
3528: NOT
3529: IFFALSE 3537
3531: PUSH
3532: LD_VAR 0 2
3536: AND
3537: IFFALSE 3607
// begin ComTransport ( eng , kirov , mat_oil ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 71
3546: PPUSH
3547: LD_INT 2
3549: PPUSH
3550: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3554: LD_VAR 0 2
3558: PPUSH
3559: LD_INT 67
3561: PPUSH
3562: LD_INT 99
3564: PPUSH
3565: CALL_OW 171
// AddComUnload ( eng ) ;
3569: LD_VAR 0 2
3573: PPUSH
3574: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3578: LD_VAR 0 2
3582: PPUSH
3583: LD_INT 107
3585: PPUSH
3586: LD_INT 104
3588: PPUSH
3589: CALL_OW 171
// i := i - 1 ;
3593: LD_ADDR_VAR 0 1
3597: PUSH
3598: LD_VAR 0 1
3602: PUSH
3603: LD_INT 1
3605: MINUS
3606: ST_TO_ADDR
// end ; until i = 0 ;
3607: LD_VAR 0 1
3611: PUSH
3612: LD_INT 0
3614: EQUAL
3615: IFFALSE 3506
// AddComMoveUnit ( eng , kirov ) ;
3617: LD_VAR 0 2
3621: PPUSH
3622: LD_INT 71
3624: PPUSH
3625: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_INT 71
3636: PPUSH
3637: CALL_OW 180
// end ;
3641: PPOPN 2
3643: END
// export function SendReinforcements ; var i ; begin
3644: LD_INT 0
3646: PPUSH
3647: PPUSH
// reinforcementsGained := true ;
3648: LD_ADDR_EXP 25
3652: PUSH
3653: LD_INT 1
3655: ST_TO_ADDR
// for i := 1 to 2 do
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: DOUBLE
3662: LD_INT 1
3664: DEC
3665: ST_TO_ADDR
3666: LD_INT 2
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3752
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3672: LD_EXP 44
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PPUSH
3683: CALL 56100 0 1
3687: IFFALSE 3696
// wait ( 0 0$0.3 ) ;
3689: LD_INT 10
3691: PPUSH
3692: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3696: LD_EXP 44
3700: PUSH
3701: LD_VAR 0 2
3705: ARRAY
3706: PPUSH
3707: LD_INT 75
3709: PPUSH
3710: LD_INT 84
3712: PPUSH
3713: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3717: LD_EXP 44
3721: PUSH
3722: LD_VAR 0 2
3726: ARRAY
3727: PPUSH
3728: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3732: LD_EXP 44
3736: PUSH
3737: LD_VAR 0 2
3741: ARRAY
3742: PPUSH
3743: LD_INT 3
3745: PPUSH
3746: CALL_OW 235
// end ;
3750: GO 3669
3752: POP
3753: POP
// end ;
3754: LD_VAR 0 1
3758: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3759: LD_EXP 21
3763: IFFALSE 3771
3765: PUSH
3766: LD_EXP 18
3770: AND
3771: IFFALSE 3794
3773: PUSH
3774: LD_EXP 43
3778: PPUSH
3779: LD_INT 25
3781: PUSH
3782: LD_INT 3
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PPUSH
3789: CALL_OW 72
3793: AND
3794: IFFALSE 3951
3796: GO 3798
3798: DISABLE
3799: LD_INT 0
3801: PPUSH
3802: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3803: LD_ADDR_VAR 0 1
3807: PUSH
3808: LD_EXP 43
3812: PPUSH
3813: LD_INT 25
3815: PUSH
3816: LD_INT 3
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: PPUSH
3823: CALL_OW 72
3827: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3828: LD_ADDR_VAR 0 2
3832: PUSH
3833: LD_INT 22
3835: PUSH
3836: LD_INT 6
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: PUSH
3843: LD_INT 30
3845: PUSH
3846: LD_INT 2
3848: PUSH
3849: EMPTY
3850: LIST
3851: LIST
3852: PUSH
3853: EMPTY
3854: LIST
3855: LIST
3856: PPUSH
3857: CALL_OW 69
3861: ST_TO_ADDR
// if not fac then
3862: LD_VAR 0 2
3866: NOT
3867: IFFALSE 3871
// exit ;
3869: GO 3951
// fac := fac [ 1 ] ;
3871: LD_ADDR_VAR 0 2
3875: PUSH
3876: LD_VAR 0 2
3880: PUSH
3881: LD_INT 1
3883: ARRAY
3884: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3885: LD_VAR 0 2
3889: PPUSH
3890: CALL_OW 313
3894: PUSH
3895: LD_INT 0
3897: EQUAL
3898: IFFALSE 3930
// begin ComExit ( mech ) ;
3900: LD_VAR 0 1
3904: PPUSH
3905: CALL 56100 0 1
// wait ( 3 ) ;
3909: LD_INT 3
3911: PPUSH
3912: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3916: LD_VAR 0 1
3920: PPUSH
3921: LD_VAR 0 2
3925: PPUSH
3926: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3930: LD_VAR 0 2
3934: PPUSH
3935: LD_INT 21
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_INT 1
3943: PPUSH
3944: LD_INT 42
3946: PPUSH
3947: CALL_OW 125
// end ;
3951: PPOPN 2
3953: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3954: LD_INT 0
3956: PPUSH
3957: PPUSH
3958: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3959: LD_VAR 0 1
3963: PPUSH
3964: LD_INT 90
3966: PPUSH
3967: LD_INT 100
3969: PPUSH
3970: CALL_OW 111
// wait ( 0 0$10 ) ;
3974: LD_INT 350
3976: PPUSH
3977: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3981: LD_VAR 0 1
3985: PPUSH
3986: LD_INT 0
3988: PPUSH
3989: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3993: LD_INT 35
3995: PPUSH
3996: CALL_OW 67
// tag := GetTag ( vehicle ) ;
4000: LD_ADDR_VAR 0 4
4004: PUSH
4005: LD_VAR 0 1
4009: PPUSH
4010: CALL_OW 110
4014: ST_TO_ADDR
// if tag = 0 then
4015: LD_VAR 0 4
4019: PUSH
4020: LD_INT 0
4022: EQUAL
4023: IFFALSE 4094
// begin if not HasTask ( vehicle ) then
4025: LD_VAR 0 1
4029: PPUSH
4030: CALL_OW 314
4034: NOT
4035: IFFALSE 4052
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
4037: LD_VAR 0 1
4041: PPUSH
4042: LD_INT 83
4044: PPUSH
4045: LD_INT 68
4047: PPUSH
4048: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
4052: LD_VAR 0 1
4056: PPUSH
4057: CALL_OW 256
4061: PUSH
4062: LD_INT 750
4064: LESS
4065: IFFALSE 4094
// begin SetTag ( vehicle , 1 ) ;
4067: LD_VAR 0 1
4071: PPUSH
4072: LD_INT 1
4074: PPUSH
4075: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
4079: LD_VAR 0 1
4083: PPUSH
4084: LD_INT 93
4086: PPUSH
4087: LD_INT 102
4089: PPUSH
4090: CALL_OW 111
// end ; end ; if tag = 1 then
4094: LD_VAR 0 4
4098: PUSH
4099: LD_INT 1
4101: EQUAL
4102: IFFALSE 4194
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
4104: LD_VAR 0 1
4108: PPUSH
4109: LD_INT 113
4111: PPUSH
4112: LD_INT 106
4114: PPUSH
4115: CALL_OW 307
4119: NOT
4120: IFFALSE 4134
4122: PUSH
4123: LD_VAR 0 1
4127: PPUSH
4128: CALL_OW 314
4132: NOT
4133: AND
4134: IFFALSE 4151
// ComMoveXY ( vehicle , 113 , 106 ) ;
4136: LD_VAR 0 1
4140: PPUSH
4141: LD_INT 113
4143: PPUSH
4144: LD_INT 106
4146: PPUSH
4147: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
4151: LD_VAR 0 1
4155: PPUSH
4156: LD_INT 113
4158: PPUSH
4159: LD_INT 106
4161: PPUSH
4162: CALL_OW 307
4166: IFFALSE 4194
// begin SetTag ( vehicle , 2 ) ;
4168: LD_VAR 0 1
4172: PPUSH
4173: LD_INT 2
4175: PPUSH
4176: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
4180: LD_VAR 0 1
4184: PPUSH
4185: CALL_OW 311
4189: PPUSH
4190: CALL 57416 0 1
// end ; end ; if tag = 2 then
4194: LD_VAR 0 4
4198: PUSH
4199: LD_INT 2
4201: EQUAL
4202: IFFALSE 4268
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
4204: LD_VAR 0 1
4208: PPUSH
4209: CALL_OW 256
4213: PUSH
4214: LD_INT 1000
4216: EQUAL
4217: IFFALSE 4230
4219: PUSH
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 311
4229: AND
4230: IFFALSE 4268
// begin ComMoveUnit ( vehicle , kirov ) ;
4232: LD_VAR 0 1
4236: PPUSH
4237: LD_INT 71
4239: PPUSH
4240: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
4244: LD_VAR 0 1
4248: PPUSH
4249: LD_INT 71
4251: PPUSH
4252: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
4268: LD_VAR 0 1
4272: PPUSH
4273: CALL_OW 301
4277: IFTRUE 4285
4279: PUSH
4280: LD_EXP 23
4284: OR
4285: IFFALSE 3993
// if eastOutpostDestroyed then
4287: LD_EXP 23
4291: IFFALSE 4308
// ComMoveXY ( vehicle , 111 , 105 ) ;
4293: LD_VAR 0 1
4297: PPUSH
4298: LD_INT 111
4300: PPUSH
4301: LD_INT 105
4303: PPUSH
4304: CALL_OW 111
// end ; end_of_file
4308: LD_VAR 0 2
4312: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
4313: LD_INT 0
4315: PPUSH
4316: PPUSH
4317: PPUSH
4318: PPUSH
// uc_side := 1 ;
4319: LD_ADDR_OWVAR 20
4323: PUSH
4324: LD_INT 1
4326: ST_TO_ADDR
// uc_nation := 1 ;
4327: LD_ADDR_OWVAR 21
4331: PUSH
4332: LD_INT 1
4334: ST_TO_ADDR
// usWestForces := [ ] ;
4335: LD_ADDR_EXP 46
4339: PUSH
4340: EMPTY
4341: ST_TO_ADDR
// usEastForces := [ ] ;
4342: LD_ADDR_EXP 47
4346: PUSH
4347: EMPTY
4348: ST_TO_ADDR
// bc_type := b_depot ;
4349: LD_ADDR_OWVAR 42
4353: PUSH
4354: LD_INT 0
4356: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4357: LD_ADDR_OWVAR 43
4361: PUSH
4362: LD_OWVAR 67
4366: PUSH
4367: LD_INT 1
4369: MINUS
4370: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4371: LD_INT 48
4373: PPUSH
4374: LD_INT 54
4376: PPUSH
4377: LD_INT 2
4379: PPUSH
4380: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4384: LD_ADDR_VAR 0 4
4388: PUSH
4389: LD_INT 55
4391: PUSH
4392: LD_INT 55
4394: PUSH
4395: LD_INT 4
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: PUSH
4403: LD_INT 59
4405: PUSH
4406: LD_INT 61
4408: PUSH
4409: LD_INT 4
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: LIST
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: ST_TO_ADDR
// if Difficulty > 1 then
4421: LD_OWVAR 67
4425: PUSH
4426: LD_INT 1
4428: GREATER
4429: IFFALSE 4465
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4431: LD_ADDR_VAR 0 4
4435: PUSH
4436: LD_VAR 0 4
4440: PPUSH
4441: LD_VAR 0 4
4445: PPUSH
4446: LD_INT 46
4448: PUSH
4449: LD_INT 64
4451: PUSH
4452: LD_INT 0
4454: PUSH
4455: EMPTY
4456: LIST
4457: LIST
4458: LIST
4459: PPUSH
4460: CALL_OW 2
4464: ST_TO_ADDR
// if Difficulty > 2 then
4465: LD_OWVAR 67
4469: PUSH
4470: LD_INT 2
4472: GREATER
4473: IFFALSE 4509
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4475: LD_ADDR_VAR 0 4
4479: PUSH
4480: LD_VAR 0 4
4484: PPUSH
4485: LD_VAR 0 4
4489: PPUSH
4490: LD_INT 36
4492: PUSH
4493: LD_INT 48
4495: PUSH
4496: LD_INT 3
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: PPUSH
4504: CALL_OW 2
4508: ST_TO_ADDR
// bc_type := b_breastwork ;
4509: LD_ADDR_OWVAR 42
4513: PUSH
4514: LD_INT 31
4516: ST_TO_ADDR
// InitHC_All ( ) ;
4517: CALL_OW 584
// for i in tmp do
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: LD_VAR 0 4
4530: PUSH
4531: FOR_IN
4532: IFFALSE 4676
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4534: LD_VAR 0 2
4538: PUSH
4539: LD_INT 1
4541: ARRAY
4542: PPUSH
4543: LD_VAR 0 2
4547: PUSH
4548: LD_INT 2
4550: ARRAY
4551: PPUSH
4552: LD_VAR 0 2
4556: PUSH
4557: LD_INT 3
4559: ARRAY
4560: PPUSH
4561: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4565: LD_INT 0
4567: PPUSH
4568: LD_OWVAR 67
4572: PPUSH
4573: CALL_OW 381
// un := CreateHuman ;
4577: LD_ADDR_VAR 0 3
4581: PUSH
4582: CALL_OW 44
4586: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4587: LD_ADDR_EXP 46
4591: PUSH
4592: LD_EXP 46
4596: PPUSH
4597: LD_EXP 46
4601: PUSH
4602: LD_INT 1
4604: PLUS
4605: PPUSH
4606: LD_VAR 0 3
4610: PPUSH
4611: CALL_OW 1
4615: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4616: LD_VAR 0 3
4620: PPUSH
4621: LD_VAR 0 2
4625: PUSH
4626: LD_INT 3
4628: ARRAY
4629: PUSH
4630: LD_INT 3
4632: PLUS
4633: PUSH
4634: LD_INT 6
4636: MOD
4637: PPUSH
4638: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_VAR 0 2
4651: PUSH
4652: LD_INT 1
4654: ARRAY
4655: PPUSH
4656: LD_VAR 0 2
4660: PUSH
4661: LD_INT 2
4663: ARRAY
4664: PPUSH
4665: CALL_OW 428
4669: PPUSH
4670: CALL_OW 52
// end ;
4674: GO 4531
4676: POP
4677: POP
// for i := 1 to 2 do
4678: LD_ADDR_VAR 0 2
4682: PUSH
4683: DOUBLE
4684: LD_INT 1
4686: DEC
4687: ST_TO_ADDR
4688: LD_INT 2
4690: PUSH
4691: FOR_TO
4692: IFFALSE 4768
// begin PrepareEngineer ( false , Difficulty ) ;
4694: LD_INT 0
4696: PPUSH
4697: LD_OWVAR 67
4701: PPUSH
4702: CALL_OW 382
// un := CreateHuman ;
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: CALL_OW 44
4715: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4716: LD_ADDR_EXP 46
4720: PUSH
4721: LD_EXP 46
4725: PPUSH
4726: LD_EXP 46
4730: PUSH
4731: LD_INT 1
4733: PLUS
4734: PPUSH
4735: LD_VAR 0 3
4739: PPUSH
4740: CALL_OW 1
4744: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4745: LD_VAR 0 3
4749: PPUSH
4750: LD_INT 54
4752: PPUSH
4753: LD_INT 58
4755: PPUSH
4756: LD_INT 2
4758: PPUSH
4759: LD_INT 0
4761: PPUSH
4762: CALL_OW 50
// end ;
4766: GO 4691
4768: POP
4769: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4770: LD_ADDR_VAR 0 4
4774: PUSH
4775: LD_INT 87
4777: PUSH
4778: LD_INT 62
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 89
4791: PUSH
4792: LD_INT 67
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: LIST
4802: PUSH
4803: EMPTY
4804: LIST
4805: LIST
4806: ST_TO_ADDR
// if Difficulty > 2 then
4807: LD_OWVAR 67
4811: PUSH
4812: LD_INT 2
4814: GREATER
4815: IFFALSE 4851
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4817: LD_ADDR_VAR 0 4
4821: PUSH
4822: LD_VAR 0 4
4826: PPUSH
4827: LD_VAR 0 4
4831: PPUSH
4832: LD_INT 88
4834: PUSH
4835: LD_INT 53
4837: PUSH
4838: LD_INT 2
4840: PUSH
4841: EMPTY
4842: LIST
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 2
4850: ST_TO_ADDR
// bc_type := b_breastwork ;
4851: LD_ADDR_OWVAR 42
4855: PUSH
4856: LD_INT 31
4858: ST_TO_ADDR
// for i in tmp do
4859: LD_ADDR_VAR 0 2
4863: PUSH
4864: LD_VAR 0 4
4868: PUSH
4869: FOR_IN
4870: IFFALSE 5014
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4872: LD_VAR 0 2
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_INT 3
4897: ARRAY
4898: PPUSH
4899: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4903: LD_INT 0
4905: PPUSH
4906: LD_OWVAR 67
4910: PPUSH
4911: CALL_OW 381
// un := CreateHuman ;
4915: LD_ADDR_VAR 0 3
4919: PUSH
4920: CALL_OW 44
4924: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4925: LD_ADDR_EXP 47
4929: PUSH
4930: LD_EXP 47
4934: PPUSH
4935: LD_EXP 47
4939: PUSH
4940: LD_INT 1
4942: PLUS
4943: PPUSH
4944: LD_VAR 0 3
4948: PPUSH
4949: CALL_OW 1
4953: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4954: LD_VAR 0 3
4958: PPUSH
4959: LD_VAR 0 2
4963: PUSH
4964: LD_INT 3
4966: ARRAY
4967: PUSH
4968: LD_INT 3
4970: PLUS
4971: PUSH
4972: LD_INT 6
4974: MOD
4975: PPUSH
4976: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4980: LD_VAR 0 3
4984: PPUSH
4985: LD_VAR 0 2
4989: PUSH
4990: LD_INT 1
4992: ARRAY
4993: PPUSH
4994: LD_VAR 0 2
4998: PUSH
4999: LD_INT 2
5001: ARRAY
5002: PPUSH
5003: CALL_OW 428
5007: PPUSH
5008: CALL_OW 52
// end ;
5012: GO 4869
5014: POP
5015: POP
// for i := 1 to 2 do
5016: LD_ADDR_VAR 0 2
5020: PUSH
5021: DOUBLE
5022: LD_INT 1
5024: DEC
5025: ST_TO_ADDR
5026: LD_INT 2
5028: PUSH
5029: FOR_TO
5030: IFFALSE 5106
// begin PrepareEngineer ( false , Difficulty ) ;
5032: LD_INT 0
5034: PPUSH
5035: LD_OWVAR 67
5039: PPUSH
5040: CALL_OW 382
// un := CreateHuman ;
5044: LD_ADDR_VAR 0 3
5048: PUSH
5049: CALL_OW 44
5053: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
5054: LD_ADDR_EXP 47
5058: PUSH
5059: LD_EXP 47
5063: PPUSH
5064: LD_EXP 47
5068: PUSH
5069: LD_INT 1
5071: PLUS
5072: PPUSH
5073: LD_VAR 0 3
5077: PPUSH
5078: CALL_OW 1
5082: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
5083: LD_VAR 0 3
5087: PPUSH
5088: LD_INT 95
5090: PPUSH
5091: LD_INT 65
5093: PPUSH
5094: LD_INT 2
5096: PPUSH
5097: LD_INT 0
5099: PPUSH
5100: CALL_OW 50
// end ;
5104: GO 5029
5106: POP
5107: POP
// end ;
5108: LD_VAR 0 1
5112: RET
// export function PrepareAmericanTrap ; var i , un ; begin
5113: LD_INT 0
5115: PPUSH
5116: PPUSH
5117: PPUSH
// usTrapForces := [ ] ;
5118: LD_ADDR_EXP 48
5122: PUSH
5123: EMPTY
5124: ST_TO_ADDR
// uc_side := 1 ;
5125: LD_ADDR_OWVAR 20
5129: PUSH
5130: LD_INT 1
5132: ST_TO_ADDR
// uc_nation := 1 ;
5133: LD_ADDR_OWVAR 21
5137: PUSH
5138: LD_INT 1
5140: ST_TO_ADDR
// InitHC_All ( ) ;
5141: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
5145: LD_INT 1
5147: PPUSH
5148: LD_OWVAR 67
5152: PPUSH
5153: CALL_OW 381
// un := CreateHuman ;
5157: LD_ADDR_VAR 0 3
5161: PUSH
5162: CALL_OW 44
5166: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5167: LD_ADDR_EXP 48
5171: PUSH
5172: LD_EXP 48
5176: PPUSH
5177: LD_VAR 0 3
5181: PPUSH
5182: CALL 55702 0 2
5186: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: DOUBLE
5193: LD_INT 1
5195: DEC
5196: ST_TO_ADDR
5197: LD_INT 5
5199: PUSH
5200: LD_INT 6
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: LIST
5214: PUSH
5215: LD_OWVAR 67
5219: ARRAY
5220: PUSH
5221: FOR_TO
5222: IFFALSE 5268
// begin PrepareSoldier ( false , Difficulty ) ;
5224: LD_INT 0
5226: PPUSH
5227: LD_OWVAR 67
5231: PPUSH
5232: CALL_OW 381
// un := CreateHuman ;
5236: LD_ADDR_VAR 0 3
5240: PUSH
5241: CALL_OW 44
5245: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5246: LD_ADDR_EXP 48
5250: PUSH
5251: LD_EXP 48
5255: PPUSH
5256: LD_VAR 0 3
5260: PPUSH
5261: CALL 55702 0 2
5265: ST_TO_ADDR
// end ;
5266: GO 5221
5268: POP
5269: POP
// for i := 1 to 2 do
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: DOUBLE
5276: LD_INT 1
5278: DEC
5279: ST_TO_ADDR
5280: LD_INT 2
5282: PUSH
5283: FOR_TO
5284: IFFALSE 5330
// begin PrepareScientist ( false , Difficulty ) ;
5286: LD_INT 0
5288: PPUSH
5289: LD_OWVAR 67
5293: PPUSH
5294: CALL_OW 384
// un := CreateHuman ;
5298: LD_ADDR_VAR 0 3
5302: PUSH
5303: CALL_OW 44
5307: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
5308: LD_ADDR_EXP 48
5312: PUSH
5313: LD_EXP 48
5317: PPUSH
5318: LD_VAR 0 3
5322: PPUSH
5323: CALL 55702 0 2
5327: ST_TO_ADDR
// end ;
5328: GO 5283
5330: POP
5331: POP
// end ;
5332: LD_VAR 0 1
5336: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
5337: LD_EXP 46
5341: IFFALSE 5921
5343: GO 5345
5345: DISABLE
5346: LD_INT 0
5348: PPUSH
5349: PPUSH
5350: PPUSH
5351: PPUSH
5352: PPUSH
// begin enable ;
5353: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: LD_INT 8
5361: PPUSH
5362: LD_INT 22
5364: PUSH
5365: LD_INT 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PUSH
5372: LD_INT 21
5374: PUSH
5375: LD_INT 3
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: PUSH
5382: EMPTY
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 70
5390: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5391: LD_ADDR_VAR 0 4
5395: PUSH
5396: LD_EXP 46
5400: PPUSH
5401: LD_INT 25
5403: PUSH
5404: LD_INT 2
5406: PUSH
5407: EMPTY
5408: LIST
5409: LIST
5410: PPUSH
5411: CALL_OW 72
5415: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5416: LD_ADDR_VAR 0 5
5420: PUSH
5421: LD_EXP 46
5425: PPUSH
5426: LD_INT 25
5428: PUSH
5429: LD_INT 1
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PPUSH
5436: CALL_OW 72
5440: ST_TO_ADDR
// if eng then
5441: LD_VAR 0 4
5445: IFFALSE 5641
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 3
5454: PUSH
5455: LD_INT 24
5457: PUSH
5458: LD_INT 1000
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PPUSH
5469: CALL_OW 72
5473: IFFALSE 5587
// begin for i in eng do
5475: LD_ADDR_VAR 0 1
5479: PUSH
5480: LD_VAR 0 4
5484: PUSH
5485: FOR_IN
5486: IFFALSE 5583
// if IsInUnit ( i ) then
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 310
5497: IFFALSE 5510
// ComExit ( i ) else
5499: LD_VAR 0 1
5503: PPUSH
5504: CALL 56100 0 1
5508: GO 5581
// if IsOk ( i ) and not HasTask ( i ) then
5510: LD_VAR 0 1
5514: PPUSH
5515: CALL_OW 302
5519: IFFALSE 5533
5521: PUSH
5522: LD_VAR 0 1
5526: PPUSH
5527: CALL_OW 314
5531: NOT
5532: AND
5533: IFFALSE 5581
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5535: LD_VAR 0 1
5539: PPUSH
5540: LD_VAR 0 3
5544: PPUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PPUSH
5562: CALL_OW 72
5566: PPUSH
5567: LD_VAR 0 1
5571: PPUSH
5572: CALL_OW 74
5576: PPUSH
5577: CALL_OW 130
5581: GO 5485
5583: POP
5584: POP
// end else
5585: GO 5641
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5587: LD_VAR 0 3
5591: PPUSH
5592: LD_INT 30
5594: PUSH
5595: LD_INT 0
5597: PUSH
5598: EMPTY
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 72
5606: IFFALSE 5641
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5608: LD_VAR 0 4
5612: PPUSH
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 30
5620: PUSH
5621: LD_INT 0
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL_OW 72
5632: PUSH
5633: LD_INT 1
5635: ARRAY
5636: PPUSH
5637: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5641: LD_VAR 0 5
5645: PPUSH
5646: LD_INT 50
5648: PUSH
5649: EMPTY
5650: LIST
5651: PPUSH
5652: CALL_OW 72
5656: IFFALSE 5681
5658: PUSH
5659: LD_INT 18
5661: PPUSH
5662: LD_INT 81
5664: PUSH
5665: LD_INT 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: LIST
5671: PPUSH
5672: CALL_OW 70
5676: PUSH
5677: LD_INT 1
5679: GREATER
5680: AND
5681: IFFALSE 5703
5683: PUSH
5684: LD_INT 18
5686: PPUSH
5687: LD_INT 22
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PPUSH
5697: CALL_OW 70
5701: NOT
5702: AND
5703: IFFALSE 5757
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5705: LD_ADDR_VAR 0 1
5709: PUSH
5710: LD_VAR 0 5
5714: PPUSH
5715: LD_INT 50
5717: PUSH
5718: EMPTY
5719: LIST
5720: PPUSH
5721: CALL_OW 72
5725: PUSH
5726: FOR_IN
5727: IFFALSE 5755
// begin ComExit ( i ) ;
5729: LD_VAR 0 1
5733: PPUSH
5734: CALL 56100 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: LD_INT 46
5745: PPUSH
5746: LD_INT 62
5748: PPUSH
5749: CALL_OW 174
// end ;
5753: GO 5726
5755: POP
5756: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5757: LD_INT 18
5759: PPUSH
5760: LD_INT 81
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PPUSH
5770: CALL_OW 70
5774: NOT
5775: IFFALSE 5811
5777: PUSH
5778: LD_VAR 0 5
5782: PPUSH
5783: LD_INT 3
5785: PUSH
5786: LD_INT 54
5788: PUSH
5789: EMPTY
5790: LIST
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: LD_INT 50
5798: PUSH
5799: EMPTY
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 72
5810: AND
5811: IFFALSE 5844
5813: PUSH
5814: LD_VAR 0 3
5818: PPUSH
5819: LD_INT 30
5821: PUSH
5822: LD_INT 31
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 58
5831: PUSH
5832: EMPTY
5833: LIST
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PPUSH
5839: CALL_OW 72
5843: AND
5844: IFFALSE 5921
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5846: LD_VAR 0 5
5850: PPUSH
5851: LD_INT 3
5853: PUSH
5854: LD_INT 54
5856: PUSH
5857: EMPTY
5858: LIST
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 50
5866: PUSH
5867: EMPTY
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 72
5878: PUSH
5879: LD_INT 1
5881: ARRAY
5882: PPUSH
5883: LD_VAR 0 3
5887: PPUSH
5888: LD_INT 30
5890: PUSH
5891: LD_INT 31
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 58
5900: PUSH
5901: EMPTY
5902: LIST
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PPUSH
5908: CALL_OW 72
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: CALL_OW 120
// end ;
5921: PPOPN 5
5923: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5924: LD_EXP 47
5928: IFFALSE 6201
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin enable ;
5938: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5939: LD_ADDR_VAR 0 2
5943: PUSH
5944: LD_INT 15
5946: PPUSH
5947: LD_INT 22
5949: PUSH
5950: LD_INT 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 21
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 70
5975: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5976: LD_ADDR_VAR 0 3
5980: PUSH
5981: LD_EXP 47
5985: PPUSH
5986: LD_INT 25
5988: PUSH
5989: LD_INT 2
5991: PUSH
5992: EMPTY
5993: LIST
5994: LIST
5995: PPUSH
5996: CALL_OW 72
6000: ST_TO_ADDR
// if eng then
6001: LD_VAR 0 3
6005: IFFALSE 6201
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 3
6014: PUSH
6015: LD_INT 24
6017: PUSH
6018: LD_INT 1000
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: PPUSH
6029: CALL_OW 72
6033: IFFALSE 6147
// begin for i in eng do
6035: LD_ADDR_VAR 0 1
6039: PUSH
6040: LD_VAR 0 3
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6143
// if IsInUnit ( i ) then
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 310
6057: IFFALSE 6070
// ComExit ( i ) else
6059: LD_VAR 0 1
6063: PPUSH
6064: CALL 56100 0 1
6068: GO 6141
// if IsOk ( i ) and not HasTask ( i ) then
6070: LD_VAR 0 1
6074: PPUSH
6075: CALL_OW 302
6079: IFFALSE 6093
6081: PUSH
6082: LD_VAR 0 1
6086: PPUSH
6087: CALL_OW 314
6091: NOT
6092: AND
6093: IFFALSE 6141
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
6095: LD_VAR 0 1
6099: PPUSH
6100: LD_VAR 0 2
6104: PPUSH
6105: LD_INT 3
6107: PUSH
6108: LD_INT 24
6110: PUSH
6111: LD_INT 1000
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PPUSH
6122: CALL_OW 72
6126: PPUSH
6127: LD_VAR 0 1
6131: PPUSH
6132: CALL_OW 74
6136: PPUSH
6137: CALL_OW 130
6141: GO 6045
6143: POP
6144: POP
// end else
6145: GO 6201
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 30
6154: PUSH
6155: LD_INT 0
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PPUSH
6162: CALL_OW 72
6166: IFFALSE 6201
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
6168: LD_VAR 0 3
6172: PPUSH
6173: LD_VAR 0 2
6177: PPUSH
6178: LD_INT 30
6180: PUSH
6181: LD_INT 0
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 72
6192: PUSH
6193: LD_INT 1
6195: ARRAY
6196: PPUSH
6197: CALL_OW 120
// end ; end_of_file
6201: PPOPN 3
6203: END
// export function Action ; var i , tmp ; begin
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
// InGameOn ;
6209: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
6213: LD_INT 112
6215: PPUSH
6216: LD_INT 107
6218: PPUSH
6219: LD_INT 3
6221: PPUSH
6222: LD_INT 12
6224: NEG
6225: PPUSH
6226: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
6230: LD_INT 121
6232: PPUSH
6233: LD_INT 113
6235: PPUSH
6236: CALL_OW 86
// tmp := PrepareBurlak ;
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: CALL 1320 0 0
6249: ST_TO_ADDR
// for i in tmp do
6250: LD_ADDR_VAR 0 2
6254: PUSH
6255: LD_VAR 0 3
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6314
// begin SetDir ( i , 5 ) ;
6263: LD_VAR 0 2
6267: PPUSH
6268: LD_INT 5
6270: PPUSH
6271: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
6275: LD_VAR 0 2
6279: PPUSH
6280: LD_INT 3
6282: PPUSH
6283: LD_INT 0
6285: PPUSH
6286: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
6290: LD_VAR 0 2
6294: PPUSH
6295: LD_INT 121
6297: PPUSH
6298: LD_INT 111
6300: PPUSH
6301: CALL_OW 111
// wait ( 0 0$0.8 ) ;
6305: LD_INT 28
6307: PPUSH
6308: CALL_OW 67
// end ;
6312: GO 6260
6314: POP
6315: POP
// CenterOnUnits ( Kurin ) ;
6316: LD_EXP 38
6320: PPUSH
6321: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
6325: LD_EXP 34
6329: PPUSH
6330: LD_EXP 38
6334: PPUSH
6335: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
6339: LD_INT 35
6341: PPUSH
6342: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
6346: LD_EXP 34
6350: PPUSH
6351: LD_EXP 38
6355: PPUSH
6356: CALL_OW 296
6360: PUSH
6361: LD_INT 6
6363: LESS
6364: IFFALSE 6339
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6366: LD_EXP 34
6370: PUSH
6371: LD_EXP 35
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PPUSH
6380: LD_EXP 38
6384: PPUSH
6385: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6389: LD_ADDR_VAR 0 2
6393: PUSH
6394: LD_VAR 0 3
6398: PUSH
6399: LD_EXP 34
6403: PUSH
6404: LD_EXP 35
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: DIFF
6413: PUSH
6414: FOR_IN
6415: IFFALSE 6481
// if GetClass ( i ) = class_soldier then
6417: LD_VAR 0 2
6421: PPUSH
6422: CALL_OW 257
6426: PUSH
6427: LD_INT 1
6429: EQUAL
6430: IFFALSE 6467
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6432: LD_VAR 0 2
6436: PPUSH
6437: LD_INT 95
6439: PUSH
6440: LD_INT 209
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_VAR 0 2
6451: PUSH
6452: LD_INT 2
6454: MOD
6455: PUSH
6456: LD_INT 1
6458: PLUS
6459: ARRAY
6460: PPUSH
6461: CALL_OW 120
6465: GO 6479
// ComEnterUnit ( i , ru_lab ) ;
6467: LD_VAR 0 2
6471: PPUSH
6472: LD_INT 83
6474: PPUSH
6475: CALL_OW 120
6479: GO 6414
6481: POP
6482: POP
// Say ( Kurin , D1-Kur-1 ) ;
6483: LD_EXP 38
6487: PPUSH
6488: LD_STRING D1-Kur-1
6490: PPUSH
6491: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6495: LD_EXP 34
6499: PPUSH
6500: LD_STRING D1-Bur-1
6502: PPUSH
6503: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6507: LD_INT 10
6509: PPUSH
6510: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6514: LD_EXP 38
6518: PPUSH
6519: LD_STRING D1-Kur-2
6521: PPUSH
6522: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6526: LD_EXP 39
6530: PPUSH
6531: CALL 56100 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6535: LD_EXP 39
6539: PPUSH
6540: LD_INT 115
6542: PPUSH
6543: LD_INT 108
6545: PPUSH
6546: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6550: LD_EXP 39
6554: PPUSH
6555: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6559: LD_EXP 34
6563: PPUSH
6564: LD_STRING D1-Bur-2
6566: PPUSH
6567: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6571: LD_EXP 38
6575: PPUSH
6576: LD_STRING D1-Kur-3
6578: PPUSH
6579: CALL_OW 88
// if Gnyevko then
6583: LD_EXP 35
6587: IFFALSE 6601
// Say ( Kurin , D1-Kur-3a ) ;
6589: LD_EXP 38
6593: PPUSH
6594: LD_STRING D1-Kur-3a
6596: PPUSH
6597: CALL_OW 88
// InGameOff ;
6601: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6605: LD_STRING M1
6607: PPUSH
6608: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6612: LD_INT 112
6614: PPUSH
6615: LD_INT 107
6617: PPUSH
6618: LD_INT 3
6620: PPUSH
6621: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6625: LD_INT 66
6627: PPUSH
6628: LD_INT 99
6630: PPUSH
6631: LD_INT 3
6633: PPUSH
6634: LD_INT 7
6636: NEG
6637: PPUSH
6638: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6642: LD_INT 66
6644: PPUSH
6645: LD_INT 99
6647: PPUSH
6648: LD_INT 3
6650: PPUSH
6651: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6655: LD_EXP 39
6659: PPUSH
6660: LD_INT 3
6662: PPUSH
6663: CALL_OW 235
// if Gnyevko then
6667: LD_EXP 35
6671: IFFALSE 6685
// SetSide ( Gnyevko , 3 ) ;
6673: LD_EXP 35
6677: PPUSH
6678: LD_INT 3
6680: PPUSH
6681: CALL_OW 235
// SaveForQuickRestart ;
6685: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6689: LD_EXP 38
6693: PPUSH
6694: LD_INT 71
6696: PPUSH
6697: CALL_OW 120
// wait ( 0 0$2 ) ;
6701: LD_INT 70
6703: PPUSH
6704: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6708: LD_EXP 43
6712: PUSH
6713: LD_INT 2
6715: ARRAY
6716: PPUSH
6717: CALL 56100 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6721: LD_EXP 43
6725: PUSH
6726: LD_INT 2
6728: ARRAY
6729: PPUSH
6730: LD_INT 98
6732: PPUSH
6733: LD_INT 98
6735: PPUSH
6736: CALL_OW 428
6740: PPUSH
6741: CALL_OW 180
// wait ( 0 0$12 ) ;
6745: LD_INT 420
6747: PPUSH
6748: CALL_OW 67
// kurinDontWannaTalk := true ;
6752: LD_ADDR_EXP 5
6756: PUSH
6757: LD_INT 1
6759: ST_TO_ADDR
// end ;
6760: LD_VAR 0 1
6764: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6765: LD_EXP 5
6769: IFFALSE 6805
6771: PUSH
6772: LD_INT 22
6774: PUSH
6775: LD_INT 3
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 91
6784: PUSH
6785: LD_INT 71
6787: PUSH
6788: LD_INT 8
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: LIST
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: AND
6805: IFFALSE 6992
6807: GO 6809
6809: DISABLE
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
// begin enable ;
6814: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6815: LD_ADDR_VAR 0 2
6819: PUSH
6820: LD_INT 22
6822: PUSH
6823: LD_INT 3
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 91
6832: PUSH
6833: LD_INT 71
6835: PUSH
6836: LD_INT 14
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 69
6852: ST_TO_ADDR
// InGameOn ;
6853: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6857: LD_INT 116
6859: PPUSH
6860: LD_INT 107
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: LD_INT 3
6868: PPUSH
6869: CALL_OW 330
// ComExit ( Kurin ) ;
6873: LD_EXP 38
6877: PPUSH
6878: CALL 56100 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6882: LD_EXP 38
6886: PPUSH
6887: LD_VAR 0 2
6891: PUSH
6892: LD_INT 1
6894: ARRAY
6895: PPUSH
6896: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6900: LD_EXP 38
6904: PPUSH
6905: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6909: LD_VAR 0 2
6913: PPUSH
6914: LD_INT 87
6916: PPUSH
6917: LD_INT 99
6919: PPUSH
6920: CALL_OW 111
// if kirovHasTank then
6924: LD_EXP 6
6928: IFFALSE 6944
// Say ( Kurin , D1a-Kur-1a ) else
6930: LD_EXP 38
6934: PPUSH
6935: LD_STRING D1a-Kur-1a
6937: PPUSH
6938: CALL_OW 88
6942: GO 6956
// Say ( Kurin , D1a-Kur-1 ) ;
6944: LD_EXP 38
6948: PPUSH
6949: LD_STRING D1a-Kur-1
6951: PPUSH
6952: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6956: LD_EXP 38
6960: PPUSH
6961: LD_INT 71
6963: PPUSH
6964: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6968: LD_INT 116
6970: PPUSH
6971: LD_INT 107
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: CALL_OW 331
// wait ( 0 0$3 ) ;
6981: LD_INT 105
6983: PPUSH
6984: CALL_OW 67
// InGameOff ;
6988: CALL_OW 9
// end ;
6992: PPOPN 2
6994: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6995: LD_INT 22
6997: PUSH
6998: LD_INT 3
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 95
7007: PUSH
7008: LD_INT 4
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: PPUSH
7019: CALL_OW 69
7023: IFFALSE 7031
7025: PUSH
7026: LD_EXP 7
7030: AND
7031: IFFALSE 7374
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin enable ;
7043: ENABLE
// blockNorth := false ;
7044: LD_ADDR_EXP 7
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// InGameOn ;
7052: CALL_OW 8
// DialogueOn ;
7056: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
7060: LD_ADDR_VAR 0 2
7064: PUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 95
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 69
7093: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
7094: LD_EXP 39
7098: PUSH
7099: LD_VAR 0 2
7103: IN
7104: IFFALSE 7117
7106: PUSH
7107: LD_EXP 39
7111: PPUSH
7112: CALL_OW 302
7116: AND
7117: IFFALSE 7133
// Say ( Kovalyuk , D1b-Kov-1 ) else
7119: LD_EXP 39
7123: PPUSH
7124: LD_STRING D1b-Kov-1
7126: PPUSH
7127: CALL_OW 88
7131: GO 7170
// if Burlak in tmp and IsOk ( Burlak ) then
7133: LD_EXP 34
7137: PUSH
7138: LD_VAR 0 2
7142: IN
7143: IFFALSE 7156
7145: PUSH
7146: LD_EXP 34
7150: PPUSH
7151: CALL_OW 302
7155: AND
7156: IFFALSE 7170
// Say ( Burlak , D1b-Bur-1 ) ;
7158: LD_EXP 34
7162: PPUSH
7163: LD_STRING D1b-Bur-1
7165: PPUSH
7166: CALL_OW 88
// DialogueOff ;
7170: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
7174: LD_INT 22
7176: PUSH
7177: LD_INT 3
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 3
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 3
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PPUSH
7205: CALL_OW 69
7209: PPUSH
7210: CALL_OW 141
// for i in tmp do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_VAR 0 2
7223: PUSH
7224: FOR_IN
7225: IFFALSE 7353
// begin d := rand ( 2 , 3 ) ;
7227: LD_ADDR_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: PPUSH
7235: LD_INT 3
7237: PPUSH
7238: CALL_OW 12
7242: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
7243: LD_ADDR_VAR 0 3
7247: PUSH
7248: LD_VAR 0 1
7252: PPUSH
7253: CALL_OW 250
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: LD_INT 6
7265: PPUSH
7266: CALL_OW 272
7270: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
7271: LD_ADDR_VAR 0 4
7275: PUSH
7276: LD_VAR 0 1
7280: PPUSH
7281: CALL_OW 251
7285: PPUSH
7286: LD_VAR 0 5
7290: PPUSH
7291: LD_INT 6
7293: PPUSH
7294: CALL_OW 273
7298: ST_TO_ADDR
// if ValidHex ( x , y ) then
7299: LD_VAR 0 3
7303: PPUSH
7304: LD_VAR 0 4
7308: PPUSH
7309: CALL_OW 488
7313: IFFALSE 7336
// ComMoveXY ( i , x , y ) else
7315: LD_VAR 0 1
7319: PPUSH
7320: LD_VAR 0 3
7324: PPUSH
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 111
7334: GO 7351
// ComMoveXY ( i , 79 , 85 ) ;
7336: LD_VAR 0 1
7340: PPUSH
7341: LD_INT 79
7343: PPUSH
7344: LD_INT 85
7346: PPUSH
7347: CALL_OW 111
// end ;
7351: GO 7224
7353: POP
7354: POP
// wait ( 0 0$5 ) ;
7355: LD_INT 175
7357: PPUSH
7358: CALL_OW 67
// InGameOff ;
7362: CALL_OW 9
// blockNorth := true ;
7366: LD_ADDR_EXP 7
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// end ;
7374: PPOPN 5
7376: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7377: LD_EXP 44
7381: PPUSH
7382: LD_INT 101
7384: PUSH
7385: LD_INT 3
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PPUSH
7392: CALL_OW 72
7396: IFFALSE 7405
7398: PUSH
7399: LD_EXP 4
7403: NOT
7404: AND
7405: IFFALSE 7809
7407: GO 7409
7409: DISABLE
7410: LD_INT 0
7412: PPUSH
7413: PPUSH
7414: PPUSH
7415: PPUSH
7416: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7417: LD_ADDR_VAR 0 5
7421: PUSH
7422: LD_EXP 44
7426: PPUSH
7427: LD_EXP 34
7431: PPUSH
7432: CALL_OW 74
7436: ST_TO_ADDR
// InGameOn ;
7437: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7441: LD_VAR 0 5
7445: PPUSH
7446: CALL_OW 250
7450: PPUSH
7451: LD_VAR 0 5
7455: PPUSH
7456: CALL_OW 251
7460: PPUSH
7461: LD_INT 3
7463: PPUSH
7464: LD_INT 6
7466: PPUSH
7467: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7471: LD_VAR 0 5
7475: PPUSH
7476: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7480: LD_VAR 0 5
7484: PPUSH
7485: LD_EXP 34
7489: PPUSH
7490: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7494: LD_VAR 0 5
7498: PPUSH
7499: LD_STRING D2-RSol1-1
7501: PPUSH
7502: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7506: LD_ADDR_VAR 0 3
7510: PUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 250
7520: PPUSH
7521: LD_VAR 0 5
7525: PPUSH
7526: CALL_OW 254
7530: PPUSH
7531: LD_INT 3
7533: PPUSH
7534: CALL_OW 272
7538: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7539: LD_ADDR_VAR 0 4
7543: PUSH
7544: LD_VAR 0 5
7548: PPUSH
7549: CALL_OW 251
7553: PPUSH
7554: LD_VAR 0 5
7558: PPUSH
7559: CALL_OW 254
7563: PPUSH
7564: LD_INT 3
7566: PPUSH
7567: CALL_OW 273
7571: ST_TO_ADDR
// if ValidHex ( x , y ) then
7572: LD_VAR 0 3
7576: PPUSH
7577: LD_VAR 0 4
7581: PPUSH
7582: CALL_OW 488
7586: IFFALSE 7618
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7588: LD_EXP 35
7592: PUSH
7593: LD_EXP 39
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PPUSH
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_VAR 0 4
7611: PPUSH
7612: CALL_OW 111
7616: GO 7641
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7618: LD_EXP 35
7622: PUSH
7623: LD_EXP 39
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PPUSH
7632: LD_VAR 0 5
7636: PPUSH
7637: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7641: LD_EXP 34
7645: PPUSH
7646: LD_VAR 0 5
7650: PPUSH
7651: CALL_OW 112
// p := 0 ;
7655: LD_ADDR_VAR 0 2
7659: PUSH
7660: LD_INT 0
7662: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7663: LD_INT 35
7665: PPUSH
7666: CALL_OW 67
// p := p + 1 ;
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: LD_VAR 0 2
7679: PUSH
7680: LD_INT 1
7682: PLUS
7683: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7684: LD_VAR 0 2
7688: PUSH
7689: LD_INT 10
7691: GREATER
7692: IFTRUE 7714
7694: PUSH
7695: LD_EXP 34
7699: PPUSH
7700: LD_VAR 0 5
7704: PPUSH
7705: CALL_OW 296
7709: PUSH
7710: LD_INT 6
7712: LESS
7713: OR
7714: IFFALSE 7663
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7716: LD_EXP 34
7720: PUSH
7721: LD_EXP 35
7725: PUSH
7726: LD_EXP 39
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: PPUSH
7736: LD_VAR 0 5
7740: PPUSH
7741: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7745: LD_EXP 34
7749: PPUSH
7750: LD_STRING D2-Bur-1
7752: PPUSH
7753: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7757: LD_VAR 0 5
7761: PPUSH
7762: LD_STRING D2-RSol1-2
7764: PPUSH
7765: CALL_OW 88
// ComHold ( nearestGuard ) ;
7769: LD_VAR 0 5
7773: PPUSH
7774: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7778: LD_VAR 0 5
7782: PPUSH
7783: CALL_OW 250
7787: PPUSH
7788: LD_VAR 0 5
7792: PPUSH
7793: CALL_OW 251
7797: PPUSH
7798: LD_INT 3
7800: PPUSH
7801: CALL_OW 331
// InGameOff ;
7805: CALL_OW 9
// end ;
7809: PPOPN 5
7811: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7812: LD_EXP 34
7816: PPUSH
7817: LD_EXP 40
7821: PPUSH
7822: CALL_OW 296
7826: PUSH
7827: LD_INT 10
7829: LESS
7830: IFFALSE 7846
7832: PUSH
7833: LD_INT 3
7835: PPUSH
7836: LD_EXP 40
7840: PPUSH
7841: CALL_OW 292
7845: AND
7846: IFFALSE 8204
7848: GO 7850
7850: DISABLE
7851: LD_INT 0
7853: PPUSH
// begin InGameOn ;
7854: CALL_OW 8
// beriaVisited := true ;
7858: LD_ADDR_EXP 4
7862: PUSH
7863: LD_INT 1
7865: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7866: LD_EXP 34
7870: PPUSH
7871: LD_EXP 40
7875: PPUSH
7876: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7880: LD_EXP 35
7884: PUSH
7885: LD_EXP 39
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PPUSH
7894: LD_INT 68
7896: PPUSH
7897: LD_INT 99
7899: PPUSH
7900: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7904: LD_EXP 40
7908: PPUSH
7909: LD_EXP 34
7913: PPUSH
7914: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7918: LD_EXP 40
7922: PPUSH
7923: LD_STRING D2-Pla-2
7925: PPUSH
7926: CALL_OW 88
// p := 0 ;
7930: LD_ADDR_VAR 0 1
7934: PUSH
7935: LD_INT 0
7937: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7938: LD_INT 35
7940: PPUSH
7941: CALL_OW 67
// p := p + 1 ;
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 1
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7959: LD_EXP 34
7963: PPUSH
7964: LD_EXP 40
7968: PPUSH
7969: CALL_OW 296
7973: PUSH
7974: LD_INT 6
7976: LESS
7977: IFTRUE 7989
7979: PUSH
7980: LD_VAR 0 1
7984: PUSH
7985: LD_INT 8
7987: GREATER
7988: OR
7989: IFFALSE 7938
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7991: LD_EXP 34
7995: PUSH
7996: LD_EXP 35
8000: PUSH
8001: LD_EXP 39
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: PPUSH
8011: LD_EXP 40
8015: PPUSH
8016: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
8020: LD_EXP 34
8024: PPUSH
8025: LD_STRING D2-Bur-2
8027: PPUSH
8028: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
8032: LD_INT 6
8034: PPUSH
8035: LD_INT 3
8037: PPUSH
8038: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
8042: LD_EXP 40
8046: PPUSH
8047: LD_STRING D2-Pla-3
8049: PPUSH
8050: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8054: LD_EXP 34
8058: PPUSH
8059: LD_STRING D2-Bur-3
8061: PPUSH
8062: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8066: LD_EXP 40
8070: PPUSH
8071: LD_STRING D2-Pla-4
8073: PPUSH
8074: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8078: LD_EXP 34
8082: PPUSH
8083: LD_STRING D2-Bur-4
8085: PPUSH
8086: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8090: LD_EXP 40
8094: PPUSH
8095: LD_STRING D2-Pla-5
8097: PPUSH
8098: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
8102: LD_INT 1
8104: PUSH
8105: LD_INT 2
8107: PUSH
8108: LD_INT 3
8110: PUSH
8111: LD_INT 4
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: PPUSH
8120: CALL 8207 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8124: LD_EXP 40
8128: PPUSH
8129: LD_STRING D3-Pla-1
8131: PPUSH
8132: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8136: LD_EXP 34
8140: PPUSH
8141: LD_STRING D3-Bur-1
8143: PPUSH
8144: CALL_OW 88
// InGameOff ;
8148: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8152: LD_STRING M2a
8154: PPUSH
8155: CALL_OW 337
// SetSide ( beria , 3 ) ;
8159: LD_INT 106
8161: PPUSH
8162: LD_INT 3
8164: PPUSH
8165: CALL_OW 235
// if not Gnyevko then
8169: LD_EXP 35
8173: NOT
8174: IFFALSE 8195
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
8176: LD_INT 106
8178: PPUSH
8179: CALL_OW 313
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_INT 3
8190: PPUSH
8191: CALL_OW 235
// ComFree ( Platonov ) ;
8195: LD_EXP 40
8199: PPUSH
8200: CALL_OW 139
// end ;
8204: PPOPN 1
8206: END
// function AskPlatonov ( questions ) ; var q ; begin
8207: LD_INT 0
8209: PPUSH
8210: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
8211: LD_ADDR_VAR 0 3
8215: PUSH
8216: LD_STRING QMoreInfo
8218: PPUSH
8219: LD_VAR 0 1
8223: PPUSH
8224: CALL_OW 98
8228: ST_TO_ADDR
// case q of 1 :
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: DOUBLE
8237: EQUAL
8238: IFTRUE 8242
8240: GO 8269
8242: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
8243: LD_EXP 34
8247: PPUSH
8248: LD_STRING D2a-Bur-1
8250: PPUSH
8251: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
8255: LD_EXP 40
8259: PPUSH
8260: LD_STRING D2a-Pla-1
8262: PPUSH
8263: CALL_OW 88
// end ; 2 :
8267: GO 8340
8269: LD_INT 2
8271: DOUBLE
8272: EQUAL
8273: IFTRUE 8277
8275: GO 8304
8277: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
8278: LD_EXP 34
8282: PPUSH
8283: LD_STRING D2b-Bur-1
8285: PPUSH
8286: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
8290: LD_EXP 40
8294: PPUSH
8295: LD_STRING D2b-Pla-1
8297: PPUSH
8298: CALL_OW 88
// end ; 3 :
8302: GO 8340
8304: LD_INT 3
8306: DOUBLE
8307: EQUAL
8308: IFTRUE 8312
8310: GO 8339
8312: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
8313: LD_EXP 34
8317: PPUSH
8318: LD_STRING D2c-Bur-1
8320: PPUSH
8321: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
8325: LD_EXP 40
8329: PPUSH
8330: LD_STRING D2c-Pla-1
8332: PPUSH
8333: CALL_OW 88
// end ; end ;
8337: GO 8340
8339: POP
// if q < 4 and questions > 2 then
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 4
8347: LESS
8348: IFFALSE 8360
8350: PUSH
8351: LD_VAR 0 1
8355: PUSH
8356: LD_INT 2
8358: GREATER
8359: AND
8360: IFFALSE 8377
// AskPlatonov ( questions diff q ) ;
8362: LD_VAR 0 1
8366: PUSH
8367: LD_VAR 0 3
8371: DIFF
8372: PPUSH
8373: CALL 8207 0 1
// end ;
8377: LD_VAR 0 2
8381: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8382: LD_INT 0
8384: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8385: LD_EXP 40
8389: PPUSH
8390: LD_VAR 0 1
8394: PPUSH
8395: LD_VAR 0 2
8399: PPUSH
8400: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8404: LD_INT 35
8406: PPUSH
8407: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8411: LD_EXP 40
8415: PPUSH
8416: LD_VAR 0 1
8420: PPUSH
8421: LD_VAR 0 2
8425: PPUSH
8426: CALL_OW 297
8430: PUSH
8431: LD_INT 5
8433: LESS
8434: IFFALSE 8456
8436: PUSH
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_VAR 0 2
8446: PPUSH
8447: CALL_OW 283
8451: PUSH
8452: LD_INT 1
8454: EQUAL
8455: AND
8456: IFFALSE 8404
// ComStop ( Platonov ) ;
8458: LD_EXP 40
8462: PPUSH
8463: CALL_OW 141
// if ingame_video then
8467: LD_OWVAR 52
8471: IFFALSE 8475
// exit ;
8473: GO 8487
// Say ( Platonov , D4-Pla-1 ) ;
8475: LD_EXP 40
8479: PPUSH
8480: LD_STRING D4-Pla-1
8482: PPUSH
8483: CALL_OW 88
// end ;
8487: LD_VAR 0 3
8491: RET
// every 0 0$2 trigger hasLab do
8492: LD_EXP 9
8496: IFFALSE 8560
8498: GO 8500
8500: DISABLE
// begin DialogueOn ;
8501: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8505: LD_EXP 34
8509: PPUSH
8510: LD_STRING D5a-Bur-1
8512: PPUSH
8513: CALL_OW 88
// if hasWorkshop then
8517: LD_EXP 10
8521: IFFALSE 8537
// Say ( Platonov , D5a-Pla-1 ) else
8523: LD_EXP 40
8527: PPUSH
8528: LD_STRING D5a-Pla-1
8530: PPUSH
8531: CALL_OW 88
8535: GO 8549
// Say ( Platonov , D5a-Pla-1a ) ;
8537: LD_EXP 40
8541: PPUSH
8542: LD_STRING D5a-Pla-1a
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8553: LD_STRING M2b
8555: PPUSH
8556: CALL_OW 337
// end ;
8560: END
// every 0 0$2 trigger hasWorkshop do
8561: LD_EXP 10
8565: IFFALSE 8629
8567: GO 8569
8569: DISABLE
// begin DialogueOn ;
8570: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8574: LD_EXP 34
8578: PPUSH
8579: LD_STRING D5b-Bur-1
8581: PPUSH
8582: CALL_OW 88
// if hasLab then
8586: LD_EXP 9
8590: IFFALSE 8606
// Say ( Platonov , D5b-Pla-1 ) else
8592: LD_EXP 40
8596: PPUSH
8597: LD_STRING D5b-Pla-1
8599: PPUSH
8600: CALL_OW 88
8604: GO 8618
// Say ( Platonov , D5b-Pla-1a ) ;
8606: LD_EXP 40
8610: PPUSH
8611: LD_STRING D5b-Pla-1a
8613: PPUSH
8614: CALL_OW 88
// DialogueOff ;
8618: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8622: LD_STRING M2c
8624: PPUSH
8625: CALL_OW 337
// end ;
8629: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8630: LD_EXP 9
8634: IFFALSE 8642
8636: PUSH
8637: LD_EXP 10
8641: AND
8642: IFFALSE 8736
8644: GO 8646
8646: DISABLE
// begin DialogueOn ;
8647: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8651: LD_INT 47
8653: PPUSH
8654: LD_INT 3
8656: PPUSH
8657: CALL_OW 321
8661: PUSH
8662: LD_INT 2
8664: EQUAL
8665: IFFALSE 8693
// begin Say ( Burlak , D7b-Bur-1 ) ;
8667: LD_EXP 34
8671: PPUSH
8672: LD_STRING D7b-Bur-1
8674: PPUSH
8675: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8679: LD_EXP 40
8683: PPUSH
8684: LD_STRING D7b-Pla-1
8686: PPUSH
8687: CALL_OW 88
// end else
8691: GO 8717
// begin Say ( Burlak , D7a-Bur-1 ) ;
8693: LD_EXP 34
8697: PPUSH
8698: LD_STRING D7a-Bur-1
8700: PPUSH
8701: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8705: LD_EXP 40
8709: PPUSH
8710: LD_STRING D7a-Pla-1
8712: PPUSH
8713: CALL_OW 88
// end ; DialogueOff ;
8717: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8721: LD_STRING M2
8723: PPUSH
8724: CALL_OW 337
// hasToBuildTank := true ;
8728: LD_ADDR_EXP 11
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// end ;
8736: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8737: LD_EXP 4
8741: IFFALSE 8767
8743: PUSH
8744: LD_EXP 9
8748: NOT
8749: IFTRUE 8758
8751: PUSH
8752: LD_EXP 10
8756: NOT
8757: OR
8758: IFTRUE 8766
8760: PUSH
8761: LD_EXP 11
8765: OR
8766: AND
8767: IFFALSE 8810
8769: PUSH
8770: LD_INT 22
8772: PUSH
8773: LD_INT 3
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 3
8782: PUSH
8783: LD_INT 91
8785: PUSH
8786: LD_INT 106
8788: PUSH
8789: LD_INT 32
8791: PUSH
8792: EMPTY
8793: LIST
8794: LIST
8795: LIST
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PPUSH
8805: CALL_OW 69
8809: AND
8810: IFFALSE 8919
8812: GO 8814
8814: DISABLE
8815: LD_INT 0
8817: PPUSH
// begin enable ;
8818: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8819: LD_ADDR_VAR 0 1
8823: PUSH
8824: LD_INT 22
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 3
8836: PUSH
8837: LD_INT 91
8839: PUSH
8840: LD_INT 106
8842: PUSH
8843: LD_INT 32
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PPUSH
8859: CALL_OW 69
8863: ST_TO_ADDR
// InGameOn ;
8864: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8868: LD_VAR 0 1
8872: PUSH
8873: LD_INT 1
8875: ARRAY
8876: PPUSH
8877: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8881: LD_VAR 0 1
8885: PPUSH
8886: LD_INT 66
8888: PPUSH
8889: LD_INT 99
8891: PPUSH
8892: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8896: LD_EXP 40
8900: PPUSH
8901: LD_STRING D8-Pla-1
8903: PPUSH
8904: CALL_OW 88
// wait ( 0 0$3 ) ;
8908: LD_INT 105
8910: PPUSH
8911: CALL_OW 67
// InGameOff ;
8915: CALL_OW 9
// end ;
8919: PPOPN 1
8921: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8922: LD_INT 21
8924: PPUSH
8925: LD_INT 22
8927: PUSH
8928: LD_INT 3
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: PUSH
8935: LD_INT 23
8937: PUSH
8938: LD_INT 3
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: PUSH
8945: LD_INT 2
8947: PUSH
8948: LD_INT 30
8950: PUSH
8951: LD_INT 4
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: LD_INT 30
8960: PUSH
8961: LD_INT 31
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: PUSH
8968: EMPTY
8969: LIST
8970: LIST
8971: LIST
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: PPUSH
8978: CALL_OW 70
8982: IFFALSE 8991
8984: PUSH
8985: LD_EXP 31
8989: NOT
8990: AND
8991: IFFALSE 9223
8993: GO 8995
8995: DISABLE
8996: LD_INT 0
8998: PPUSH
// begin enable ;
8999: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
9000: LD_ADDR_VAR 0 1
9004: PUSH
9005: LD_INT 21
9007: PPUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 3
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 23
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: LD_INT 2
9030: PUSH
9031: LD_INT 30
9033: PUSH
9034: LD_INT 4
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PUSH
9041: LD_INT 30
9043: PUSH
9044: LD_INT 31
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: EMPTY
9052: LIST
9053: LIST
9054: LIST
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: PPUSH
9061: CALL_OW 70
9065: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9066: LD_EXP 40
9070: PPUSH
9071: LD_VAR 0 1
9075: PPUSH
9076: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9080: LD_INT 35
9082: PPUSH
9083: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9087: LD_EXP 40
9091: PPUSH
9092: LD_VAR 0 1
9096: PPUSH
9097: CALL_OW 296
9101: PUSH
9102: LD_INT 6
9104: LESS
9105: IFFALSE 9080
// InGameOn ;
9107: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9111: LD_EXP 40
9115: PPUSH
9116: LD_VAR 0 1
9120: PPUSH
9121: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
9125: LD_EXP 40
9129: PPUSH
9130: LD_STRING D6-Pla-1
9132: PPUSH
9133: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9137: LD_EXP 34
9141: PPUSH
9142: LD_STRING D6-Bur-1
9144: PPUSH
9145: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
9149: LD_VAR 0 1
9153: PUSH
9154: LD_INT 1
9156: ARRAY
9157: PPUSH
9158: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
9162: LD_VAR 0 1
9166: PUSH
9167: LD_INT 1
9169: ARRAY
9170: PPUSH
9171: CALL_OW 266
9175: PUSH
9176: LD_INT 31
9178: EQUAL
9179: IFFALSE 9201
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
9181: LD_INT 106
9183: PPUSH
9184: CALL_OW 274
9188: PPUSH
9189: LD_INT 1
9191: PPUSH
9192: LD_INT 10
9194: PPUSH
9195: CALL_OW 276
9199: GO 9219
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
9201: LD_INT 106
9203: PPUSH
9204: CALL_OW 274
9208: PPUSH
9209: LD_INT 1
9211: PPUSH
9212: LD_INT 30
9214: PPUSH
9215: CALL_OW 276
// InGameOff ;
9219: CALL_OW 9
// end ;
9223: PPOPN 1
9225: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
9226: LD_EXP 4
9230: IFFALSE 9276
9232: PUSH
9233: LD_INT 21
9235: PPUSH
9236: LD_INT 22
9238: PUSH
9239: LD_INT 3
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 23
9248: PUSH
9249: LD_INT 3
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 21
9258: PUSH
9259: LD_INT 3
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: PPUSH
9271: CALL_OW 71
9275: AND
9276: IFFALSE 9574
9278: GO 9280
9280: DISABLE
9281: LD_INT 0
9283: PPUSH
9284: PPUSH
// begin enable ;
9285: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_INT 21
9293: PPUSH
9294: LD_INT 22
9296: PUSH
9297: LD_INT 3
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 23
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PUSH
9314: LD_INT 21
9316: PUSH
9317: LD_INT 3
9319: PUSH
9320: EMPTY
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: PPUSH
9329: CALL_OW 71
9333: PUSH
9334: LD_INT 1
9336: ARRAY
9337: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
9338: LD_EXP 40
9342: PPUSH
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9352: LD_INT 35
9354: PPUSH
9355: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
9359: LD_EXP 40
9363: PPUSH
9364: LD_VAR 0 1
9368: PPUSH
9369: CALL_OW 296
9373: PUSH
9374: LD_INT 6
9376: LESS
9377: IFFALSE 9352
// InGameOn ;
9379: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
9383: LD_EXP 40
9387: PPUSH
9388: LD_VAR 0 1
9392: PPUSH
9393: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
9397: LD_EXP 40
9401: PPUSH
9402: LD_STRING DPlatAngry
9404: PPUSH
9405: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9409: LD_EXP 34
9413: PPUSH
9414: LD_STRING D6-Bur-1
9416: PPUSH
9417: CALL_OW 88
// RemoveUnit ( tmp ) ;
9421: LD_VAR 0 1
9425: PPUSH
9426: CALL_OW 64
// InGameOff ;
9430: CALL_OW 9
// amount := 0 ;
9434: LD_ADDR_VAR 0 2
9438: PUSH
9439: LD_INT 0
9441: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9442: LD_VAR 0 1
9446: PPUSH
9447: CALL_OW 266
9451: PUSH
9452: LD_INT 31
9454: DOUBLE
9455: EQUAL
9456: IFTRUE 9460
9458: GO 9471
9460: POP
// amount := 10 ; b_lab :
9461: LD_ADDR_VAR 0 2
9465: PUSH
9466: LD_INT 10
9468: ST_TO_ADDR
9469: GO 9548
9471: LD_INT 6
9473: DOUBLE
9474: EQUAL
9475: IFTRUE 9479
9477: GO 9490
9479: POP
// amount := 20 ; b_armoury :
9480: LD_ADDR_VAR 0 2
9484: PUSH
9485: LD_INT 20
9487: ST_TO_ADDR
9488: GO 9548
9490: LD_INT 4
9492: DOUBLE
9493: EQUAL
9494: IFTRUE 9498
9496: GO 9509
9498: POP
// amount := 30 ; b_workshop :
9499: LD_ADDR_VAR 0 2
9503: PUSH
9504: LD_INT 30
9506: ST_TO_ADDR
9507: GO 9548
9509: LD_INT 2
9511: DOUBLE
9512: EQUAL
9513: IFTRUE 9517
9515: GO 9528
9517: POP
// amount := 40 ; b_oil_power :
9518: LD_ADDR_VAR 0 2
9522: PUSH
9523: LD_INT 40
9525: ST_TO_ADDR
9526: GO 9548
9528: LD_INT 26
9530: DOUBLE
9531: EQUAL
9532: IFTRUE 9536
9534: GO 9547
9536: POP
// amount := 20 ; end ;
9537: LD_ADDR_VAR 0 2
9541: PUSH
9542: LD_INT 20
9544: ST_TO_ADDR
9545: GO 9548
9547: POP
// if amount then
9548: LD_VAR 0 2
9552: IFFALSE 9574
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9554: LD_INT 106
9556: PPUSH
9557: CALL_OW 274
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: LD_VAR 0 2
9569: PPUSH
9570: CALL_OW 276
// end ;
9574: PPOPN 2
9576: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9577: LD_INT 22
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 92
9589: PUSH
9590: LD_INT 112
9592: PUSH
9593: LD_INT 155
9595: PUSH
9596: LD_INT 8
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: PUSH
9614: LD_INT 2
9616: LESS
9617: IFFALSE 9640
9619: PUSH
9620: LD_EXP 34
9624: PPUSH
9625: LD_INT 112
9627: PPUSH
9628: LD_INT 155
9630: PPUSH
9631: CALL_OW 297
9635: PUSH
9636: LD_INT 8
9638: LESS
9639: AND
9640: IFFALSE 9855
9642: GO 9644
9644: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9645: LD_INT 112
9647: PPUSH
9648: LD_INT 155
9650: PPUSH
9651: LD_INT 3
9653: PPUSH
9654: LD_INT 4
9656: NEG
9657: PPUSH
9658: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9662: LD_INT 1
9664: PPUSH
9665: LD_EXP 34
9669: PPUSH
9670: CALL_OW 471
// uc_side := 1 ;
9674: LD_ADDR_OWVAR 20
9678: PUSH
9679: LD_INT 1
9681: ST_TO_ADDR
// uc_nation := 1 ;
9682: LD_ADDR_OWVAR 21
9686: PUSH
9687: LD_INT 1
9689: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9690: LD_ADDR_EXP 49
9694: PUSH
9695: LD_STRING Dickens
9697: PPUSH
9698: CALL_OW 25
9702: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9703: LD_EXP 49
9707: PPUSH
9708: LD_INT 112
9710: PPUSH
9711: LD_INT 155
9713: PPUSH
9714: LD_INT 1
9716: PPUSH
9717: CALL_OW 48
// wait ( 0 0$2 ) ;
9721: LD_INT 70
9723: PPUSH
9724: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9728: LD_EXP 49
9732: PPUSH
9733: LD_EXP 34
9737: PPUSH
9738: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9742: LD_EXP 49
9746: PPUSH
9747: LD_STRING DUsSpawnSol
9749: PPUSH
9750: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9754: LD_INT 1
9756: PPUSH
9757: LD_EXP 34
9761: PPUSH
9762: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9766: LD_INT 112
9768: PPUSH
9769: LD_INT 155
9771: PPUSH
9772: LD_INT 3
9774: PPUSH
9775: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9779: LD_EXP 49
9783: PPUSH
9784: LD_INT 77
9786: PPUSH
9787: LD_INT 152
9789: PPUSH
9790: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9801: LD_EXP 49
9805: PPUSH
9806: CALL_OW 302
9810: NOT
9811: IFTRUE 9830
9813: PUSH
9814: LD_EXP 49
9818: PPUSH
9819: LD_INT 77
9821: PPUSH
9822: LD_INT 152
9824: PPUSH
9825: CALL_OW 307
9829: OR
9830: IFFALSE 9794
// if not IsOk ( Dickens ) then
9832: LD_EXP 49
9836: PPUSH
9837: CALL_OW 302
9841: NOT
9842: IFFALSE 9846
// exit ;
9844: GO 9855
// RemoveUnit ( Dickens ) ;
9846: LD_EXP 49
9850: PPUSH
9851: CALL_OW 64
// end ;
9855: END
// every 0 0$2 trigger GetLives ( Burlak ) < 900 do
9856: LD_EXP 34
9860: PPUSH
9861: CALL_OW 256
9865: PUSH
9866: LD_INT 900
9868: LESS
9869: IFFALSE 9901
9871: GO 9873
9873: DISABLE
// begin if SideShoot ( Burlak ) = 1 then
9874: LD_EXP 34
9878: PPUSH
9879: CALL_OW 503
9883: PUSH
9884: LD_INT 1
9886: EQUAL
9887: IFFALSE 9901
// Say ( Burlak , DUsSpawnBur ) ;
9889: LD_EXP 34
9893: PPUSH
9894: LD_STRING DUsSpawnBur
9896: PPUSH
9897: CALL_OW 88
// end ;
9901: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9902: LD_EXP 12
9906: IFFALSE 10812
9908: GO 9910
9910: DISABLE
9911: LD_INT 0
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
// begin hasToBuildTank := false ;
9917: LD_ADDR_EXP 11
9921: PUSH
9922: LD_INT 0
9924: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9925: LD_ADDR_EXP 5
9929: PUSH
9930: LD_INT 0
9932: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9933: LD_ADDR_VAR 0 2
9937: PUSH
9938: LD_INT 22
9940: PUSH
9941: LD_INT 3
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PUSH
9948: LD_INT 21
9950: PUSH
9951: LD_INT 2
9953: PUSH
9954: EMPTY
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: PPUSH
9962: CALL_OW 69
9966: ST_TO_ADDR
// InGameOn ;
9967: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9971: LD_VAR 0 2
9975: PUSH
9976: LD_INT 1
9978: ARRAY
9979: PPUSH
9980: CALL_OW 85
// wait ( 0 0$1 ) ;
9984: LD_INT 35
9986: PPUSH
9987: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9991: LD_EXP 34
9995: PPUSH
9996: LD_STRING D9-Bur-1
9998: PPUSH
9999: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
10003: LD_EXP 40
10007: PPUSH
10008: LD_VAR 0 2
10012: PUSH
10013: LD_INT 1
10015: ARRAY
10016: PPUSH
10017: CALL_OW 112
// p := 0 ;
10021: LD_ADDR_VAR 0 3
10025: PUSH
10026: LD_INT 0
10028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10029: LD_INT 35
10031: PPUSH
10032: CALL_OW 67
// p := p + 1 ;
10036: LD_ADDR_VAR 0 3
10040: PUSH
10041: LD_VAR 0 3
10045: PUSH
10046: LD_INT 1
10048: PLUS
10049: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
10050: LD_EXP 40
10054: PPUSH
10055: LD_VAR 0 2
10059: PUSH
10060: LD_INT 1
10062: ARRAY
10063: PPUSH
10064: CALL_OW 296
10068: PUSH
10069: LD_INT 8
10071: LESS
10072: IFTRUE 10084
10074: PUSH
10075: LD_VAR 0 3
10079: PUSH
10080: LD_INT 8
10082: GREATER
10083: OR
10084: IFFALSE 10029
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
10086: LD_EXP 40
10090: PPUSH
10091: LD_VAR 0 2
10095: PUSH
10096: LD_INT 1
10098: ARRAY
10099: PPUSH
10100: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
10104: LD_EXP 40
10108: PPUSH
10109: LD_STRING D9-Pla-1
10111: PPUSH
10112: CALL_OW 88
// ComFree ( Platonov ) ;
10116: LD_EXP 40
10120: PPUSH
10121: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
10125: LD_EXP 40
10129: PPUSH
10130: LD_INT 64
10132: PPUSH
10133: LD_INT 98
10135: PPUSH
10136: CALL_OW 171
// InGameOff ;
10140: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
10144: LD_STRING M3
10146: PPUSH
10147: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
10151: LD_EXP 41
10155: PPUSH
10156: LD_INT 70
10158: PPUSH
10159: LD_INT 108
10161: PPUSH
10162: CALL_OW 111
// AddComHold ( Kuklajs ) ;
10166: LD_EXP 41
10170: PPUSH
10171: CALL_OW 200
// wait ( 1 ) ;
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 67
// ComExit ( Belkov ) ;
10182: LD_EXP 36
10186: PPUSH
10187: CALL 56100 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
10191: LD_EXP 36
10195: PPUSH
10196: LD_INT 113
10198: PPUSH
10199: LD_INT 104
10201: PPUSH
10202: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
10206: LD_EXP 36
10210: PPUSH
10211: LD_INT 116
10213: PPUSH
10214: LD_INT 108
10216: PPUSH
10217: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
10221: LD_INT 35
10223: PPUSH
10224: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10228: LD_INT 22
10230: PUSH
10231: LD_INT 3
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 21
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 91
10250: PUSH
10251: LD_INT 71
10253: PUSH
10254: LD_INT 8
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: LIST
10266: PPUSH
10267: CALL_OW 69
10271: IFFALSE 10221
// InGameOn ;
10273: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
10277: LD_ADDR_VAR 0 2
10281: PUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 3
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 2
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 91
10304: PUSH
10305: LD_INT 71
10307: PUSH
10308: LD_INT 8
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: LIST
10320: PPUSH
10321: CALL_OW 69
10325: ST_TO_ADDR
// ComExit ( Kurin ) ;
10326: LD_EXP 38
10330: PPUSH
10331: CALL 56100 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10335: LD_EXP 38
10339: PPUSH
10340: LD_VAR 0 2
10344: PUSH
10345: LD_INT 1
10347: ARRAY
10348: PPUSH
10349: CALL_OW 179
// wait ( 0 0$1 ) ;
10353: LD_INT 35
10355: PPUSH
10356: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10360: LD_VAR 0 2
10364: PUSH
10365: LD_INT 1
10367: ARRAY
10368: PPUSH
10369: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_VAR 0 2
10382: PUSH
10383: LD_INT 1
10385: ARRAY
10386: PPUSH
10387: CALL_OW 311
10391: ST_TO_ADDR
// ComExit ( un ) ;
10392: LD_VAR 0 4
10396: PPUSH
10397: CALL 56100 0 1
// wait ( 0 0$1 ) ;
10401: LD_INT 35
10403: PPUSH
10404: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10408: LD_VAR 0 4
10412: PPUSH
10413: LD_EXP 38
10417: PPUSH
10418: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10422: LD_EXP 36
10426: PPUSH
10427: LD_VAR 0 2
10431: PUSH
10432: LD_INT 1
10434: ARRAY
10435: PPUSH
10436: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10440: LD_INT 10
10442: PPUSH
10443: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10447: LD_EXP 38
10451: PPUSH
10452: LD_STRING D10-Kur-1
10454: PPUSH
10455: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10459: LD_EXP 36
10463: PPUSH
10464: LD_INT 122
10466: PPUSH
10467: LD_INT 112
10469: PPUSH
10470: CALL_OW 176
// wait ( 0 0$2 ) ;
10474: LD_INT 70
10476: PPUSH
10477: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10481: LD_EXP 36
10485: PPUSH
10486: LD_STRING D10-Bel-1
10488: PPUSH
10489: CALL_OW 88
// if belkovBrother then
10493: LD_EXP 32
10497: IFFALSE 10549
// begin Say ( Burlak , D10-Bur-1 ) ;
10499: LD_EXP 34
10503: PPUSH
10504: LD_STRING D10-Bur-1
10506: PPUSH
10507: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10511: LD_EXP 36
10515: PPUSH
10516: LD_STRING D10-Bel-2
10518: PPUSH
10519: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10523: LD_EXP 34
10527: PPUSH
10528: LD_STRING D10-Bur-2
10530: PPUSH
10531: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10535: LD_EXP 38
10539: PPUSH
10540: LD_STRING D10-Kur-2a
10542: PPUSH
10543: CALL_OW 88
// end else
10547: GO 10561
// begin Say ( Kurin , D10-Kur-2 ) end ;
10549: LD_EXP 38
10553: PPUSH
10554: LD_STRING D10-Kur-2
10556: PPUSH
10557: CALL_OW 88
// wait ( 0 0$2 ) ;
10561: LD_INT 70
10563: PPUSH
10564: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10568: LD_EXP 38
10572: PPUSH
10573: LD_STRING D10-Kur-2b
10575: PPUSH
10576: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10580: LD_VAR 0 4
10584: PPUSH
10585: LD_INT 66
10587: PPUSH
10588: LD_INT 97
10590: PPUSH
10591: CALL_OW 111
// wait ( 0 0$5 ) ;
10595: LD_INT 175
10597: PPUSH
10598: CALL_OW 67
// InGameOff ;
10602: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10606: LD_EXP 33
10610: PPUSH
10611: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10615: LD_STRING M4
10617: PPUSH
10618: CALL_OW 337
// wait ( 0 0$6 ) ;
10622: LD_INT 210
10624: PPUSH
10625: CALL_OW 67
// kurinDontWannaTalk := true ;
10629: LD_ADDR_EXP 5
10633: PUSH
10634: LD_INT 1
10636: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10637: LD_INT 140
10639: PPUSH
10640: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10644: LD_INT 35
10646: PPUSH
10647: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10651: LD_EXP 34
10655: PPUSH
10656: CALL_OW 310
10660: IFTRUE 10680
10662: PUSH
10663: LD_EXP 34
10667: PPUSH
10668: LD_INT 106
10670: PPUSH
10671: CALL_OW 296
10675: PUSH
10676: LD_INT 12
10678: LESS
10679: OR
10680: IFFALSE 10644
// DialogueOn ;
10682: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10686: LD_EXP 40
10690: PPUSH
10691: LD_STRING D11-Pla-1
10693: PPUSH
10694: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10698: LD_EXP 34
10702: PPUSH
10703: LD_STRING D11-Bur-1
10705: PPUSH
10706: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10710: LD_INT 22
10712: PUSH
10713: LD_INT 3
10715: PUSH
10716: EMPTY
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 21
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PPUSH
10734: CALL_OW 69
10738: PUSH
10739: LD_INT 1
10741: GREATER
10742: IFFALSE 10756
// Say ( Burlak , D11-Bur-1a ) ;
10744: LD_EXP 34
10748: PPUSH
10749: LD_STRING D11-Bur-1a
10751: PPUSH
10752: CALL_OW 88
// DialogueOff ;
10756: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10760: LD_ADDR_EXP 8
10764: PUSH
10765: LD_INT 160
10767: PUSH
10768: LD_INT 150
10770: PUSH
10771: LD_INT 140
10773: PUSH
10774: LD_INT 120
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_OWVAR 67
10787: ARRAY
10788: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10789: LD_STRING M5
10791: PPUSH
10792: CALL_OW 337
// kirovHasTank := true ;
10796: LD_ADDR_EXP 6
10800: PUSH
10801: LD_INT 1
10803: ST_TO_ADDR
// hasToBuildTank := true ;
10804: LD_ADDR_EXP 11
10808: PUSH
10809: LD_INT 1
10811: ST_TO_ADDR
// end ;
10812: PPOPN 4
10814: END
// every 0 0$2 trigger allianceAttacked do
10815: LD_EXP 13
10819: IFFALSE 10858
10821: GO 10823
10823: DISABLE
// begin DialogueOn ;
10824: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10828: LD_EXP 38
10832: PPUSH
10833: LD_STRING DArestKur
10835: PPUSH
10836: CALL_OW 88
// dwait ( 0 0$1 ) ;
10840: LD_INT 35
10842: PPUSH
10843: CALL_OW 68
// YouLost ( SelfAttack ) ;
10847: LD_STRING SelfAttack
10849: PPUSH
10850: CALL_OW 104
// DialogueOff ;
10854: CALL_OW 7
// end ;
10858: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10859: LD_INT 22
10861: PUSH
10862: LD_INT 3
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 21
10871: PUSH
10872: LD_INT 2
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: PPUSH
10883: CALL_OW 69
10887: PUSH
10888: LD_INT 22
10890: PUSH
10891: LD_INT 3
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 21
10900: PUSH
10901: LD_INT 1
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PPUSH
10912: CALL_OW 69
10916: GREATEREQUAL
10917: IFFALSE 10925
10919: PUSH
10920: LD_EXP 6
10924: AND
10925: IFFALSE 11095
10927: GO 10929
10929: DISABLE
// begin hasToBuildTank := false ;
10930: LD_ADDR_EXP 11
10934: PUSH
10935: LD_INT 0
10937: ST_TO_ADDR
// blockNorth := false ;
10938: LD_ADDR_EXP 7
10942: PUSH
10943: LD_INT 0
10945: ST_TO_ADDR
// InGameOn ;
10946: CALL_OW 8
// wait ( 0 0$2 ) ;
10950: LD_INT 70
10952: PPUSH
10953: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10957: LD_INT 106
10959: PPUSH
10960: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10964: LD_EXP 40
10968: PPUSH
10969: LD_INT 65
10971: PPUSH
10972: LD_INT 97
10974: PPUSH
10975: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10979: LD_EXP 40
10983: PPUSH
10984: LD_EXP 34
10988: PPUSH
10989: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10993: LD_EXP 34
10997: PPUSH
10998: LD_STRING D12-Bur-1
11000: PPUSH
11001: CALL_OW 88
// wait ( 0 0$1 ) ;
11005: LD_INT 35
11007: PPUSH
11008: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
11012: LD_EXP 40
11016: PPUSH
11017: LD_STRING D12-Pla-1
11019: PPUSH
11020: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11024: LD_EXP 34
11028: PPUSH
11029: LD_STRING D12-Bur-2
11031: PPUSH
11032: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11036: LD_EXP 40
11040: PPUSH
11041: LD_STRING D12-Pla-2
11043: PPUSH
11044: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11048: LD_EXP 34
11052: PPUSH
11053: LD_STRING D12-Bur-3
11055: PPUSH
11056: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11060: LD_EXP 40
11064: PPUSH
11065: LD_STRING D12-Pla-3
11067: PPUSH
11068: CALL_OW 88
// hasAllTanks := true ;
11072: LD_ADDR_EXP 14
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// InGameOff ;
11080: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
11084: LD_STRING M6
11086: PPUSH
11087: CALL_OW 337
// PrepareAmerican ;
11091: CALL 4313 0 0
// end ;
11095: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
11096: LD_EXP 17
11100: IFFALSE 12877
11102: GO 11104
11104: DISABLE
11105: LD_INT 0
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
// begin PrepareAmericanTrap ;
11114: CALL 5113 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
11118: LD_ADDR_VAR 0 2
11122: PUSH
11123: LD_EXP 48
11127: PPUSH
11128: LD_INT 26
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: PPUSH
11138: CALL_OW 72
11142: PUSH
11143: LD_INT 1
11145: ARRAY
11146: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
11147: LD_INT 22
11149: PUSH
11150: LD_INT 3
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: LD_INT 3
11159: PUSH
11160: LD_INT 21
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 60
11176: PUSH
11177: EMPTY
11178: LIST
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: PPUSH
11185: CALL_OW 69
11189: PPUSH
11190: CALL_OW 141
// InGameOn ;
11194: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
11198: LD_INT 69
11200: PPUSH
11201: LD_INT 22
11203: PPUSH
11204: CALL_OW 86
// wait ( 0 0$1 ) ;
11208: LD_INT 35
11210: PPUSH
11211: CALL_OW 67
// DialogueOn ;
11215: CALL_OW 6
// game_speed := 4 ;
11219: LD_ADDR_OWVAR 65
11223: PUSH
11224: LD_INT 4
11226: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
11227: LD_VAR 0 2
11231: PPUSH
11232: LD_STRING D13-Sol1-1
11234: PPUSH
11235: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
11239: LD_EXP 36
11243: PPUSH
11244: LD_STRING D13-Bel-1
11246: PPUSH
11247: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11251: LD_EXP 38
11255: PPUSH
11256: LD_STRING D13-Kur-1
11258: PPUSH
11259: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
11263: LD_INT 10
11265: PPUSH
11266: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
11270: LD_EXP 36
11274: PPUSH
11275: LD_STRING D13-Bel-2
11277: PPUSH
11278: CALL_OW 94
// DialogueOff ;
11282: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11286: LD_EXP 36
11290: PPUSH
11291: LD_INT 76
11293: PPUSH
11294: LD_INT 20
11296: PPUSH
11297: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11301: LD_EXP 45
11305: PPUSH
11306: LD_INT 72
11308: PPUSH
11309: LD_INT 20
11311: PPUSH
11312: CALL_OW 111
// wait ( 0 0$2 ) ;
11316: LD_INT 70
11318: PPUSH
11319: CALL_OW 67
// for i in usTrapForces do
11323: LD_ADDR_VAR 0 1
11327: PUSH
11328: LD_EXP 48
11332: PUSH
11333: FOR_IN
11334: IFFALSE 11367
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11336: LD_VAR 0 1
11340: PPUSH
11341: LD_INT 7
11343: PPUSH
11344: LD_INT 0
11346: PPUSH
11347: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11351: LD_VAR 0 1
11355: PPUSH
11356: LD_EXP 36
11360: PPUSH
11361: CALL_OW 119
// end ;
11365: GO 11333
11367: POP
11368: POP
// wait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11376: LD_EXP 48
11380: PPUSH
11381: LD_INT 65
11383: PPUSH
11384: LD_INT 18
11386: PPUSH
11387: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11391: LD_INT 70
11393: PPUSH
11394: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11398: LD_EXP 48
11402: PPUSH
11403: LD_INT 101
11405: PUSH
11406: LD_INT 3
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PPUSH
11413: CALL_OW 72
11417: PUSH
11418: LD_INT 3
11420: GREATER
11421: IFFALSE 11391
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11423: LD_INT 65
11425: PPUSH
11426: LD_INT 18
11428: PPUSH
11429: LD_INT 3
11431: PPUSH
11432: LD_INT 26
11434: NEG
11435: PPUSH
11436: CALL_OW 330
// DialogueOn ;
11440: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11444: LD_VAR 0 2
11448: PPUSH
11449: LD_STRING D14-Sol1-1
11451: PPUSH
11452: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11456: LD_EXP 36
11460: PPUSH
11461: LD_STRING D14-Bel-1
11463: PPUSH
11464: CALL_OW 88
// DialogueOff ;
11468: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11472: LD_INT 65
11474: PPUSH
11475: LD_INT 18
11477: PPUSH
11478: LD_INT 3
11480: PPUSH
11481: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11485: LD_EXP 45
11489: PPUSH
11490: LD_INT 31
11492: PPUSH
11493: LD_INT 9
11495: PPUSH
11496: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11500: LD_EXP 48
11504: PPUSH
11505: LD_INT 50
11507: PPUSH
11508: LD_INT 16
11510: PPUSH
11511: CALL_OW 174
// wait ( 0 0$2 ) ;
11515: LD_INT 70
11517: PPUSH
11518: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11522: LD_ADDR_VAR 0 6
11526: PUSH
11527: LD_EXP 36
11531: PPUSH
11532: CALL_OW 310
11536: ST_TO_ADDR
// if not belkovTank then
11537: LD_VAR 0 6
11541: NOT
11542: IFFALSE 11582
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11544: LD_ADDR_VAR 0 6
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 6
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 2
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 69
11577: PUSH
11578: LD_INT 1
11580: ARRAY
11581: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11582: LD_EXP 36
11586: PPUSH
11587: LD_INT 58
11589: PPUSH
11590: LD_INT 21
11592: PPUSH
11593: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11597: LD_EXP 36
11601: PPUSH
11602: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11606: LD_EXP 36
11610: PPUSH
11611: LD_INT 53
11613: PPUSH
11614: LD_INT 18
11616: PPUSH
11617: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11621: LD_EXP 36
11625: PPUSH
11626: LD_INT 31
11628: PPUSH
11629: LD_INT 9
11631: PPUSH
11632: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11636: LD_INT 35
11638: PPUSH
11639: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11643: LD_ADDR_VAR 0 1
11647: PUSH
11648: LD_EXP 36
11652: PUSH
11653: LD_EXP 45
11657: UNION
11658: PUSH
11659: LD_VAR 0 6
11663: UNION
11664: PUSH
11665: FOR_IN
11666: IFFALSE 11697
// if GetLives ( i ) < 800 then
11668: LD_VAR 0 1
11672: PPUSH
11673: CALL_OW 256
11677: PUSH
11678: LD_INT 800
11680: LESS
11681: IFFALSE 11695
// SetLives ( i , 800 ) ;
11683: LD_VAR 0 1
11687: PPUSH
11688: LD_INT 800
11690: PPUSH
11691: CALL_OW 234
11695: GO 11665
11697: POP
11698: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11699: LD_EXP 36
11703: PPUSH
11704: LD_INT 31
11706: PPUSH
11707: LD_INT 9
11709: PPUSH
11710: CALL_OW 297
11714: PUSH
11715: LD_INT 4
11717: LESS
11718: IFFALSE 11636
// for i := 1 to Difficulty do
11720: LD_ADDR_VAR 0 1
11724: PUSH
11725: DOUBLE
11726: LD_INT 1
11728: DEC
11729: ST_TO_ADDR
11730: LD_OWVAR 67
11734: PUSH
11735: FOR_TO
11736: IFFALSE 11778
// if i <= belkovTeam then
11738: LD_VAR 0 1
11742: PUSH
11743: LD_EXP 45
11747: LESSEQUAL
11748: IFFALSE 11776
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11750: LD_EXP 45
11754: PUSH
11755: LD_VAR 0 1
11759: ARRAY
11760: PPUSH
11761: LD_INT 600
11763: PPUSH
11764: LD_INT 800
11766: PPUSH
11767: CALL_OW 12
11771: PPUSH
11772: CALL_OW 234
11776: GO 11735
11778: POP
11779: POP
// SetLives ( Belkov , 820 ) ;
11780: LD_EXP 36
11784: PPUSH
11785: LD_INT 820
11787: PPUSH
11788: CALL_OW 234
// InGameOff ;
11792: CALL_OW 9
// DialogueOn ;
11796: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11800: LD_EXP 36
11804: PPUSH
11805: LD_STRING D14-Bel-1a
11807: PPUSH
11808: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11812: LD_EXP 38
11816: PPUSH
11817: LD_STRING D14-Kur-1
11819: PPUSH
11820: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11824: LD_EXP 36
11828: PPUSH
11829: LD_STRING D14-Bel-2
11831: PPUSH
11832: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11836: LD_EXP 38
11840: PPUSH
11841: LD_STRING D14-Kur-2
11843: PPUSH
11844: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11848: LD_EXP 34
11852: PPUSH
11853: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11857: LD_EXP 34
11861: PPUSH
11862: LD_STRING D14a-Bur-1
11864: PPUSH
11865: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11869: LD_EXP 40
11873: PPUSH
11874: LD_STRING D14a-Pla-1
11876: PPUSH
11877: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11881: LD_EXP 34
11885: PPUSH
11886: LD_STRING D14a-Bur-2
11888: PPUSH
11889: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11893: LD_EXP 40
11897: PPUSH
11898: LD_STRING D14a-Pla-2
11900: PPUSH
11901: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11905: LD_EXP 34
11909: PPUSH
11910: LD_STRING D14a-Bur-3
11912: PPUSH
11913: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11917: LD_EXP 40
11921: PPUSH
11922: LD_STRING D14a-Pla-3
11924: PPUSH
11925: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11929: LD_EXP 34
11933: PPUSH
11934: LD_STRING D14a-Bur-4
11936: PPUSH
11937: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11941: LD_EXP 40
11945: PPUSH
11946: LD_STRING D14a-Pla-4
11948: PPUSH
11949: CALL_OW 88
// DialogueOff ;
11953: CALL_OW 7
// belkovTrapped := true ;
11957: LD_ADDR_EXP 18
11961: PUSH
11962: LD_INT 1
11964: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11965: LD_EXP 48
11969: PPUSH
11970: LD_INT 68
11972: PPUSH
11973: LD_INT 16
11975: PPUSH
11976: CALL_OW 111
// if belkovTank then
11980: LD_VAR 0 6
11984: IFFALSE 12023
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11986: LD_EXP 48
11990: PUSH
11991: LD_INT 1
11993: ARRAY
11994: PPUSH
11995: LD_VAR 0 6
11999: PPUSH
12000: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
12004: LD_EXP 48
12008: PUSH
12009: LD_INT 1
12011: ARRAY
12012: PPUSH
12013: LD_INT 69
12015: PPUSH
12016: LD_INT 20
12018: PPUSH
12019: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
12023: LD_EXP 36
12027: PPUSH
12028: LD_INT 40
12030: PPUSH
12031: LD_INT 17
12033: PPUSH
12034: CALL_OW 111
// AddComHold ( Belkov ) ;
12038: LD_EXP 36
12042: PPUSH
12043: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] , [ 41 , 16 ] ] ;
12047: LD_ADDR_VAR 0 3
12051: PUSH
12052: LD_INT 44
12054: PUSH
12055: LD_INT 18
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 42
12064: PUSH
12065: LD_INT 16
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 40
12074: PUSH
12075: LD_INT 15
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 44
12084: PUSH
12085: LD_INT 20
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: LD_INT 42
12094: PUSH
12095: LD_INT 20
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 42
12104: PUSH
12105: LD_INT 12
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 42
12114: PUSH
12115: LD_INT 8
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 41
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
12142: LD_ADDR_VAR 0 1
12146: PUSH
12147: LD_EXP 45
12151: PPUSH
12152: LD_INT 25
12154: PUSH
12155: LD_INT 1
12157: PUSH
12158: EMPTY
12159: LIST
12160: LIST
12161: PPUSH
12162: CALL_OW 72
12166: PUSH
12167: FOR_IN
12168: IFFALSE 12234
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: LD_VAR 0 3
12179: PUSH
12180: LD_INT 1
12182: ARRAY
12183: PUSH
12184: LD_INT 1
12186: ARRAY
12187: PPUSH
12188: LD_VAR 0 3
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PUSH
12197: LD_INT 2
12199: ARRAY
12200: PPUSH
12201: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
12205: LD_ADDR_VAR 0 3
12209: PUSH
12210: LD_VAR 0 3
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: CALL_OW 3
12222: ST_TO_ADDR
// AddComCrawl ( i ) ;
12223: LD_VAR 0 1
12227: PPUSH
12228: CALL_OW 197
// end ;
12232: GO 12167
12234: POP
12235: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
12236: LD_EXP 45
12240: PPUSH
12241: LD_INT 25
12243: PUSH
12244: LD_INT 4
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PPUSH
12251: CALL_OW 72
12255: IFFALSE 12287
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
12257: LD_EXP 45
12261: PPUSH
12262: LD_INT 25
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PPUSH
12272: CALL_OW 72
12276: PPUSH
12277: LD_INT 38
12279: PPUSH
12280: LD_INT 18
12282: PPUSH
12283: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12287: LD_ADDR_VAR 0 7
12291: PUSH
12292: LD_INT 9450
12294: PUSH
12295: LD_INT 8400
12297: PUSH
12298: LD_INT 6650
12300: PUSH
12301: LD_INT 5250
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: LD_OWVAR 67
12314: ARRAY
12315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12316: LD_INT 35
12318: PPUSH
12319: CALL_OW 67
// timer := timer - 0 0$1 ;
12323: LD_ADDR_VAR 0 7
12327: PUSH
12328: LD_VAR 0 7
12332: PUSH
12333: LD_INT 35
12335: MINUS
12336: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12337: LD_INT 19
12339: PPUSH
12340: LD_INT 22
12342: PUSH
12343: LD_INT 3
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 70
12354: IFFALSE 12364
// timer := 0 0$0 ;
12356: LD_ADDR_VAR 0 7
12360: PUSH
12361: LD_INT 0
12363: ST_TO_ADDR
// until timer <= 0 ;
12364: LD_VAR 0 7
12368: PUSH
12369: LD_INT 0
12371: LESSEQUAL
12372: IFFALSE 12316
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12374: LD_EXP 48
12378: PPUSH
12379: LD_INT 50
12381: PUSH
12382: EMPTY
12383: LIST
12384: PPUSH
12385: CALL_OW 72
12389: NOT
12390: IFFALSE 12394
// exit ;
12392: GO 12877
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_EXP 48
12403: PPUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 1
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 54
12419: PUSH
12420: EMPTY
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PPUSH
12431: CALL_OW 72
12435: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12436: LD_ADDR_VAR 0 5
12440: PUSH
12441: LD_EXP 48
12445: PPUSH
12446: LD_INT 25
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 3
12458: PUSH
12459: LD_INT 54
12461: PUSH
12462: EMPTY
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 72
12477: ST_TO_ADDR
// for i in sol do
12478: LD_ADDR_VAR 0 1
12482: PUSH
12483: LD_VAR 0 4
12487: PUSH
12488: FOR_IN
12489: IFFALSE 12505
// SetTag ( i , 0 ) ;
12491: LD_VAR 0 1
12495: PPUSH
12496: LD_INT 0
12498: PPUSH
12499: CALL_OW 109
12503: GO 12488
12505: POP
12506: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12507: LD_VAR 0 5
12511: PPUSH
12512: LD_INT 60
12514: PPUSH
12515: LD_INT 8
12517: PPUSH
12518: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12522: LD_INT 22
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 21
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PPUSH
12546: CALL_OW 69
12550: IFFALSE 12591
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12552: LD_INT 22
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 21
12564: PUSH
12565: LD_INT 2
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: PPUSH
12576: CALL_OW 69
12580: PPUSH
12581: LD_INT 53
12583: PPUSH
12584: LD_INT 24
12586: PPUSH
12587: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12591: LD_INT 18
12593: PPUSH
12594: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12598: LD_ADDR_VAR 0 4
12602: PUSH
12603: LD_EXP 48
12607: PPUSH
12608: LD_INT 25
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 50
12620: PUSH
12621: EMPTY
12622: LIST
12623: PUSH
12624: LD_INT 3
12626: PUSH
12627: LD_INT 54
12629: PUSH
12630: EMPTY
12631: LIST
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: LIST
12641: PPUSH
12642: CALL_OW 72
12646: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12647: LD_VAR 0 4
12651: PPUSH
12652: LD_INT 0
12654: PPUSH
12655: CALL 53247 0 2
12659: PUSH
12660: LD_VAR 0 4
12664: EQUAL
12665: IFFALSE 12704
// begin wait ( 0 0$3 ) ;
12667: LD_INT 105
12669: PPUSH
12670: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12674: LD_VAR 0 4
12678: PPUSH
12679: LD_INT 41
12681: PPUSH
12682: LD_INT 18
12684: PPUSH
12685: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12689: LD_VAR 0 5
12693: PPUSH
12694: LD_INT 60
12696: PPUSH
12697: LD_INT 8
12699: PPUSH
12700: CALL_OW 111
// end ; for i in sol do
12704: LD_ADDR_VAR 0 1
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: FOR_IN
12715: IFFALSE 12790
// if GetLives ( i ) < 800 then
12717: LD_VAR 0 1
12721: PPUSH
12722: CALL_OW 256
12726: PUSH
12727: LD_INT 800
12729: LESS
12730: IFFALSE 12761
// begin SetTag ( i , 1 ) ;
12732: LD_VAR 0 1
12736: PPUSH
12737: LD_INT 1
12739: PPUSH
12740: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12744: LD_VAR 0 1
12748: PPUSH
12749: LD_INT 60
12751: PPUSH
12752: LD_INT 8
12754: PPUSH
12755: CALL_OW 111
// end else
12759: GO 12788
// if GetLives ( i ) = 1000 then
12761: LD_VAR 0 1
12765: PPUSH
12766: CALL_OW 256
12770: PUSH
12771: LD_INT 1000
12773: EQUAL
12774: IFFALSE 12788
// SetTag ( i , 0 ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: CALL_OW 109
12788: GO 12714
12790: POP
12791: POP
// until belkovDied or not sol ;
12792: LD_EXP 19
12796: IFTRUE 12805
12798: PUSH
12799: LD_VAR 0 4
12803: NOT
12804: OR
12805: IFFALSE 12591
// if not sol then
12807: LD_VAR 0 4
12811: NOT
12812: IFFALSE 12816
// exit ;
12814: GO 12877
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12816: LD_VAR 0 4
12820: PUSH
12821: LD_VAR 0 5
12825: ADD
12826: PPUSH
12827: LD_INT 56
12829: PPUSH
12830: LD_INT 25
12832: PPUSH
12833: CALL_OW 111
// wait ( 0 0$30 ) ;
12837: LD_INT 1050
12839: PPUSH
12840: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12844: LD_EXP 48
12848: PPUSH
12849: LD_INT 66
12851: PPUSH
12852: LD_INT 96
12854: PPUSH
12855: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12859: LD_VAR 0 5
12863: PPUSH
12864: LD_VAR 0 4
12868: PUSH
12869: LD_INT 1
12871: ARRAY
12872: PPUSH
12873: CALL_OW 112
// end ;
12877: PPOPN 7
12879: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12880: LD_EXP 18
12884: IFFALSE 12893
12886: PUSH
12887: LD_EXP 19
12891: NOT
12892: AND
12893: IFFALSE 12914
12895: PUSH
12896: LD_INT 9
12898: PPUSH
12899: LD_INT 22
12901: PUSH
12902: LD_INT 3
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PPUSH
12909: CALL_OW 70
12913: AND
12914: IFFALSE 13241
12916: GO 12918
12918: DISABLE
// begin if not initiative then
12919: LD_EXP 31
12923: NOT
12924: IFFALSE 13171
// begin case Query ( QAttackAm ) of 1 :
12926: LD_STRING QAttackAm
12928: PPUSH
12929: CALL_OW 97
12933: PUSH
12934: LD_INT 1
12936: DOUBLE
12937: EQUAL
12938: IFTRUE 12942
12940: GO 13009
12942: POP
// begin initiative := true ;
12943: LD_ADDR_EXP 31
12947: PUSH
12948: LD_INT 1
12950: ST_TO_ADDR
// DialogueOn ;
12951: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12955: LD_EXP 34
12959: PPUSH
12960: LD_STRING D17-Bur-1
12962: PPUSH
12963: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12967: LD_EXP 40
12971: PPUSH
12972: LD_STRING D17-Pla-1
12974: PPUSH
12975: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12979: LD_EXP 34
12983: PPUSH
12984: LD_STRING D17-Bur-2
12986: PPUSH
12987: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12991: LD_EXP 40
12995: PPUSH
12996: LD_STRING D17-Pla-2
12998: PPUSH
12999: CALL_OW 94
// DialogueOff ;
13003: CALL_OW 7
// end ; 2 :
13007: GO 13171
13009: LD_INT 2
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13109
13017: POP
// begin initiative := true ;
13018: LD_ADDR_EXP 31
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// DialogueOn ;
13026: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13030: LD_EXP 34
13034: PPUSH
13035: LD_STRING D18-Bur-1
13037: PPUSH
13038: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13042: LD_EXP 40
13046: PPUSH
13047: LD_STRING D18-Pla-1
13049: PPUSH
13050: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13054: LD_EXP 34
13058: PPUSH
13059: LD_STRING D18-Bur-2
13061: PPUSH
13062: CALL_OW 88
// if not reinforcementsGained then
13066: LD_EXP 25
13070: NOT
13071: IFFALSE 13091
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
13073: LD_EXP 40
13077: PPUSH
13078: LD_STRING D18-Pla-2
13080: PPUSH
13081: CALL_OW 94
// SendReinforcements ;
13085: CALL 3644 0 0
// end else
13089: GO 13103
// SayRadio ( Platonov , D22-Pla-1b ) ;
13091: LD_EXP 40
13095: PPUSH
13096: LD_STRING D22-Pla-1b
13098: PPUSH
13099: CALL_OW 94
// DialogueOff ;
13103: CALL_OW 7
// end ; 3 :
13107: GO 13171
13109: LD_INT 3
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13170
13117: POP
// begin if IsOk ( Gnyevko ) then
13118: LD_EXP 35
13122: PPUSH
13123: CALL_OW 302
13127: IFFALSE 13143
// Say ( Gnyevko , D19A-Gny-1 ) else
13129: LD_EXP 35
13133: PPUSH
13134: LD_STRING D19A-Gny-1
13136: PPUSH
13137: CALL_OW 88
13141: GO 13166
// if IsOk ( Kovalyuk ) then
13143: LD_EXP 39
13147: PPUSH
13148: CALL_OW 302
13152: IFFALSE 13166
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13154: LD_EXP 39
13158: PPUSH
13159: LD_STRING D19A-Kov-1
13161: PPUSH
13162: CALL_OW 88
// exit ;
13166: GO 13241
// end ; end ;
13168: GO 13171
13170: POP
// end ; if IsOk ( Gnyevko ) then
13171: LD_EXP 35
13175: PPUSH
13176: CALL_OW 302
13180: IFFALSE 13206
// begin Say ( Gnyevko , D19-Gny-1 ) ;
13182: LD_EXP 35
13186: PPUSH
13187: LD_STRING D19-Gny-1
13189: PPUSH
13190: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
13194: LD_EXP 34
13198: PPUSH
13199: LD_STRING D19-Bur-1
13201: PPUSH
13202: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
13206: LD_EXP 39
13210: PPUSH
13211: CALL_OW 302
13215: IFFALSE 13241
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
13217: LD_EXP 39
13221: PPUSH
13222: LD_STRING D19-Kov-1
13224: PPUSH
13225: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
13229: LD_EXP 34
13233: PPUSH
13234: LD_STRING D19-Bur-2
13236: PPUSH
13237: CALL_OW 88
// end ; end ;
13241: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
13242: LD_EXP 18
13246: IFFALSE 13255
13248: PUSH
13249: LD_EXP 19
13253: NOT
13254: AND
13255: IFFALSE 13276
13257: PUSH
13258: LD_INT 16
13260: PPUSH
13261: LD_INT 22
13263: PUSH
13264: LD_INT 3
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PPUSH
13271: CALL_OW 70
13275: AND
13276: IFFALSE 13513
13278: GO 13280
13280: DISABLE
// begin if not initiative then
13281: LD_EXP 31
13285: NOT
13286: IFFALSE 13464
// begin case Query ( QAttackBw ) of 1 :
13288: LD_STRING QAttackBw
13290: PPUSH
13291: CALL_OW 97
13295: PUSH
13296: LD_INT 1
13298: DOUBLE
13299: EQUAL
13300: IFTRUE 13304
13302: GO 13347
13304: POP
// begin initiative := true ;
13305: LD_ADDR_EXP 31
13309: PUSH
13310: LD_INT 1
13312: ST_TO_ADDR
// DialogueOn ;
13313: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13317: LD_EXP 34
13321: PPUSH
13322: LD_STRING D21-Bur-1
13324: PPUSH
13325: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13329: LD_EXP 40
13333: PPUSH
13334: LD_STRING D21-Pla-1
13336: PPUSH
13337: CALL_OW 94
// DialogueOff ;
13341: CALL_OW 7
// end ; 2 :
13345: GO 13464
13347: LD_INT 2
13349: DOUBLE
13350: EQUAL
13351: IFTRUE 13355
13353: GO 13452
13355: POP
// begin initiative := true ;
13356: LD_ADDR_EXP 31
13360: PUSH
13361: LD_INT 1
13363: ST_TO_ADDR
// DialogueOn ;
13364: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13368: LD_EXP 34
13372: PPUSH
13373: LD_STRING D22-Bur-1
13375: PPUSH
13376: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13380: LD_EXP 25
13384: NOT
13385: IFFALSE 13393
13387: PUSH
13388: LD_EXP 22
13392: AND
13393: IFFALSE 13413
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13395: LD_EXP 40
13399: PPUSH
13400: LD_STRING D22-Pla-1
13402: PPUSH
13403: CALL_OW 94
// SendReinforcements ;
13407: CALL 3644 0 0
// end else
13411: GO 13446
// if not westOutpostDestroyed then
13413: LD_EXP 22
13417: NOT
13418: IFFALSE 13434
// SayRadio ( Platonov , D22-Pla-1a ) else
13420: LD_EXP 40
13424: PPUSH
13425: LD_STRING D22-Pla-1a
13427: PPUSH
13428: CALL_OW 94
13432: GO 13446
// SayRadio ( Platonov , D22-Pla-1b ) ;
13434: LD_EXP 40
13438: PPUSH
13439: LD_STRING D22-Pla-1b
13441: PPUSH
13442: CALL_OW 94
// DialogueOff ;
13446: CALL_OW 7
// end ; 3 :
13450: GO 13464
13452: LD_INT 3
13454: DOUBLE
13455: EQUAL
13456: IFTRUE 13460
13458: GO 13463
13460: POP
// begin end ; end ;
13461: GO 13464
13463: POP
// end ; ChangeMissionObjectives ( M9 ) ;
13464: LD_STRING M9
13466: PPUSH
13467: CALL_OW 337
// wait ( 0 0$1 ) ;
13471: LD_INT 35
13473: PPUSH
13474: CALL_OW 67
// if IsOk ( Gnyevko ) then
13478: LD_EXP 35
13482: PPUSH
13483: CALL_OW 302
13487: IFFALSE 13513
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13489: LD_EXP 35
13493: PPUSH
13494: LD_STRING D23-Gny-1
13496: PPUSH
13497: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13501: LD_EXP 34
13505: PPUSH
13506: LD_STRING D23-Bur-1
13508: PPUSH
13509: CALL_OW 88
// end ; end ;
13513: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13514: LD_EXP 18
13518: IFFALSE 13526
13520: PUSH
13521: LD_EXP 19
13525: AND
13526: IFFALSE 13535
13528: PUSH
13529: LD_EXP 28
13533: NOT
13534: AND
13535: IFFALSE 13564
13537: PUSH
13538: LD_EXP 45
13542: PPUSH
13543: LD_INT 91
13545: PUSH
13546: LD_EXP 34
13550: PUSH
13551: LD_INT 8
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: PPUSH
13559: CALL_OW 72
13563: AND
13564: IFFALSE 13608
13566: GO 13568
13568: DISABLE
13569: LD_INT 0
13571: PPUSH
// begin for i in belkovTeam do
13572: LD_ADDR_VAR 0 1
13576: PUSH
13577: LD_EXP 45
13581: PUSH
13582: FOR_IN
13583: IFFALSE 13599
// SetSide ( i , 3 ) ;
13585: LD_VAR 0 1
13589: PPUSH
13590: LD_INT 3
13592: PPUSH
13593: CALL_OW 235
13597: GO 13582
13599: POP
13600: POP
// ChangeMissionObjectives ( M9a ) ;
13601: LD_STRING M9a
13603: PPUSH
13604: CALL_OW 337
// end ;
13608: PPOPN 1
13610: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13611: LD_EXP 34
13615: PPUSH
13616: LD_EXP 36
13620: PPUSH
13621: CALL_OW 296
13625: PUSH
13626: LD_INT 6
13628: LESS
13629: IFFALSE 13637
13631: PUSH
13632: LD_EXP 18
13636: AND
13637: IFFALSE 13650
13639: PUSH
13640: LD_EXP 36
13644: PPUSH
13645: CALL_OW 302
13649: AND
13650: IFFALSE 13662
13652: PUSH
13653: LD_INT 3
13655: PPUSH
13656: CALL_OW 463
13660: NOT
13661: AND
13662: IFFALSE 13979
13664: GO 13666
13666: DISABLE
13667: LD_INT 0
13669: PPUSH
13670: PPUSH
// begin InGameOn ;
13671: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13675: LD_EXP 34
13679: PPUSH
13680: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13684: LD_EXP 34
13688: PPUSH
13689: LD_INT 37
13691: PPUSH
13692: LD_INT 17
13694: PPUSH
13695: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13699: LD_EXP 34
13703: PPUSH
13704: LD_EXP 36
13708: PPUSH
13709: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13713: LD_EXP 36
13717: PPUSH
13718: LD_EXP 34
13722: PPUSH
13723: CALL_OW 119
// p := 0 ;
13727: LD_ADDR_VAR 0 2
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13735: LD_INT 35
13737: PPUSH
13738: CALL_OW 67
// p := p + 1 ;
13742: LD_ADDR_VAR 0 2
13746: PUSH
13747: LD_VAR 0 2
13751: PUSH
13752: LD_INT 1
13754: PLUS
13755: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13756: LD_EXP 34
13760: PPUSH
13761: LD_EXP 36
13765: PPUSH
13766: CALL_OW 296
13770: PUSH
13771: LD_INT 4
13773: LESS
13774: IFTRUE 13786
13776: PUSH
13777: LD_VAR 0 2
13781: PUSH
13782: LD_INT 6
13784: GREATER
13785: OR
13786: IFFALSE 13735
// ComTurnUnit ( Burlak , Belkov ) ;
13788: LD_EXP 34
13792: PPUSH
13793: LD_EXP 36
13797: PPUSH
13798: CALL_OW 119
// DialogueOn ;
13802: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13806: LD_EXP 36
13810: PPUSH
13811: LD_STRING D24-Bel-1
13813: PPUSH
13814: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13818: LD_EXP 34
13822: PPUSH
13823: LD_STRING D24-Bur-1
13825: PPUSH
13826: CALL_OW 88
// if belkovBrother then
13830: LD_EXP 32
13834: IFFALSE 13848
// Say ( Burlak , D24-Bur-1a ) ;
13836: LD_EXP 34
13840: PPUSH
13841: LD_STRING D24-Bur-1a
13843: PPUSH
13844: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13848: LD_EXP 36
13852: PPUSH
13853: LD_STRING D24-Bel-2
13855: PPUSH
13856: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13860: LD_EXP 34
13864: PPUSH
13865: LD_STRING D24-Bur-2
13867: PPUSH
13868: CALL_OW 88
// if vehCaptured then
13872: LD_EXP 16
13876: IFFALSE 13890
// Say ( Burlak , D24-Bur-2a ) ;
13878: LD_EXP 34
13882: PPUSH
13883: LD_STRING D24-Bur-2a
13885: PPUSH
13886: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13890: LD_EXP 40
13894: PPUSH
13895: LD_STRING D24-Pla-2
13897: PPUSH
13898: CALL_OW 94
// if not westOutpostDestroyed then
13902: LD_EXP 22
13906: NOT
13907: IFFALSE 13921
// SayRadio ( Platonov , D24-Pla-2a ) ;
13909: LD_EXP 40
13913: PPUSH
13914: LD_STRING D24-Pla-2a
13916: PPUSH
13917: CALL_OW 94
// DialogueOff ;
13921: CALL_OW 7
// InGameOff ;
13925: CALL_OW 9
// belkovSaved := true ;
13929: LD_ADDR_EXP 28
13933: PUSH
13934: LD_INT 1
13936: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13937: LD_ADDR_VAR 0 1
13941: PUSH
13942: LD_EXP 45
13946: PUSH
13947: LD_EXP 36
13951: UNION
13952: PUSH
13953: FOR_IN
13954: IFFALSE 13970
// SetSide ( i , 3 ) ;
13956: LD_VAR 0 1
13960: PPUSH
13961: LD_INT 3
13963: PPUSH
13964: CALL_OW 235
13968: GO 13953
13970: POP
13971: POP
// ChangeMissionObjectives ( M9a ) ;
13972: LD_STRING M9a
13974: PPUSH
13975: CALL_OW 337
// end ;
13979: PPOPN 2
13981: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13982: LD_INT 3
13984: PPUSH
13985: LD_INT 22
13987: PUSH
13988: LD_INT 1
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 95
13997: PUSH
13998: LD_INT 8
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 69
14013: PPUSH
14014: CALL 59147 0 2
14018: IFFALSE 14203
14020: GO 14022
14022: DISABLE
// begin DialogueOn ;
14023: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
14027: LD_INT 49
14029: PPUSH
14030: LD_INT 57
14032: PPUSH
14033: LD_INT 3
14035: PPUSH
14036: LD_INT 12
14038: NEG
14039: PPUSH
14040: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
14044: LD_INT 49
14046: PPUSH
14047: LD_INT 57
14049: PPUSH
14050: LD_INT 3
14052: PPUSH
14053: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
14057: LD_INT 49
14059: PPUSH
14060: LD_INT 57
14062: PPUSH
14063: CALL_OW 84
// if not eastOutpostDiscovered then
14067: LD_EXP 21
14071: NOT
14072: IFFALSE 14112
// begin Say ( Burlak , D15-Bur-1 ) ;
14074: LD_EXP 34
14078: PPUSH
14079: LD_STRING D15-Bur-1
14081: PPUSH
14082: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14086: LD_EXP 35
14090: PPUSH
14091: LD_STRING D15-Gny-1
14093: PPUSH
14094: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14098: LD_EXP 39
14102: PPUSH
14103: LD_STRING D15-Kov-1
14105: PPUSH
14106: CALL_OW 88
// end else
14110: GO 14148
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14112: LD_EXP 39
14116: PPUSH
14117: LD_STRING D16-Kov-1
14119: PPUSH
14120: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14124: LD_EXP 34
14128: PPUSH
14129: LD_STRING D16-Bur-1
14131: PPUSH
14132: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14136: LD_EXP 35
14140: PPUSH
14141: LD_STRING D16-Gny-1
14143: PPUSH
14144: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
14148: LD_EXP 34
14152: PPUSH
14153: LD_STRING D15-Bur-2
14155: PPUSH
14156: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
14160: LD_EXP 39
14164: PPUSH
14165: LD_STRING D15-Kov-2
14167: PPUSH
14168: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
14172: LD_EXP 34
14176: PPUSH
14177: LD_STRING D15-Bur-3
14179: PPUSH
14180: CALL_OW 88
// DialogueOff ;
14184: CALL_OW 7
// westOutpostDiscovered := true ;
14188: LD_ADDR_EXP 20
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
14196: LD_STRING M7
14198: PPUSH
14199: CALL_OW 337
// end ;
14203: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
14204: LD_INT 3
14206: PPUSH
14207: LD_INT 22
14209: PUSH
14210: LD_INT 1
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 95
14219: PUSH
14220: LD_INT 15
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PPUSH
14236: CALL 59147 0 2
14240: IFFALSE 14381
14242: GO 14244
14244: DISABLE
// begin DialogueOn ;
14245: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
14249: LD_INT 95
14251: PPUSH
14252: LD_INT 65
14254: PPUSH
14255: LD_INT 3
14257: PPUSH
14258: LD_INT 12
14260: NEG
14261: PPUSH
14262: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
14266: LD_INT 95
14268: PPUSH
14269: LD_INT 65
14271: PPUSH
14272: LD_INT 3
14274: PPUSH
14275: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
14279: LD_INT 95
14281: PPUSH
14282: LD_INT 65
14284: PPUSH
14285: CALL_OW 84
// if westOutpostDiscovered then
14289: LD_EXP 20
14293: IFFALSE 14333
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
14295: LD_EXP 39
14299: PPUSH
14300: LD_STRING D16-Kov-1
14302: PPUSH
14303: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
14307: LD_EXP 34
14311: PPUSH
14312: LD_STRING D16-Bur-1
14314: PPUSH
14315: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
14319: LD_EXP 35
14323: PPUSH
14324: LD_STRING D16-Gny-1
14326: PPUSH
14327: CALL_OW 88
// end else
14331: GO 14369
// begin Say ( Burlak , D15-Bur-1 ) ;
14333: LD_EXP 34
14337: PPUSH
14338: LD_STRING D15-Bur-1
14340: PPUSH
14341: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14345: LD_EXP 35
14349: PPUSH
14350: LD_STRING D15-Gny-1
14352: PPUSH
14353: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14357: LD_EXP 39
14361: PPUSH
14362: LD_STRING D15-Kov-1
14364: PPUSH
14365: CALL_OW 88
// end ; DialogueOff ;
14369: CALL_OW 7
// eastOutpostDiscovered := true ;
14373: LD_ADDR_EXP 21
14377: PUSH
14378: LD_INT 1
14380: ST_TO_ADDR
// end ;
14381: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14382: LD_INT 8
14384: PPUSH
14385: LD_INT 22
14387: PUSH
14388: LD_INT 1
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 50
14397: PUSH
14398: EMPTY
14399: LIST
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PPUSH
14405: CALL_OW 70
14409: PUSH
14410: LD_INT 0
14412: EQUAL
14413: IFFALSE 14421
14415: PUSH
14416: LD_EXP 20
14420: AND
14421: IFFALSE 14465
14423: GO 14425
14425: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14426: LD_EXP 34
14430: PPUSH
14431: LD_STRING D20-Bur-1
14433: PPUSH
14434: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14438: LD_EXP 40
14442: PPUSH
14443: LD_STRING D20-Pla-1
14445: PPUSH
14446: CALL_OW 94
// westOutpostDestroyed := true ;
14450: LD_ADDR_EXP 22
14454: PUSH
14455: LD_INT 1
14457: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14458: LD_STRING M8
14460: PPUSH
14461: CALL_OW 337
// end ;
14465: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14466: LD_INT 15
14468: PPUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 1
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 50
14481: PUSH
14482: EMPTY
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 70
14493: PUSH
14494: LD_INT 0
14496: EQUAL
14497: IFFALSE 14505
14499: PUSH
14500: LD_EXP 21
14504: AND
14505: IFFALSE 14635
14507: GO 14509
14509: DISABLE
14510: LD_INT 0
14512: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14513: LD_EXP 34
14517: PPUSH
14518: LD_STRING D20-Bur-1
14520: PPUSH
14521: CALL_OW 88
// SayRadio ( Platonov , D20a-Pla-1 ) ;
14525: LD_EXP 40
14529: PPUSH
14530: LD_STRING D20a-Pla-1
14532: PPUSH
14533: CALL_OW 94
// eastOutpostDestroyed := true ;
14537: LD_ADDR_EXP 23
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14545: LD_INT 35
14547: PPUSH
14548: CALL_OW 67
// stop_talking := true ;
14552: LD_ADDR_OWVAR 56
14556: PUSH
14557: LD_INT 1
14559: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14560: LD_ADDR_VAR 0 1
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 23
14577: PUSH
14578: LD_INT 3
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 21
14587: PUSH
14588: LD_INT 1
14590: PUSH
14591: EMPTY
14592: LIST
14593: LIST
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: LIST
14599: PPUSH
14600: CALL_OW 69
14604: PUSH
14605: FOR_IN
14606: IFFALSE 14625
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14608: LD_VAR 0 1
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: LD_INT 1500
14618: PPUSH
14619: CALL_OW 591
14623: GO 14605
14625: POP
14626: POP
// stop_talking := false ;
14627: LD_ADDR_OWVAR 56
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// end ;
14635: PPOPN 1
14637: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14638: LD_INT 19
14640: PPUSH
14641: LD_INT 22
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 21
14653: PUSH
14654: LD_INT 2
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 70
14669: IFFALSE 14777
14671: GO 14673
14673: DISABLE
// begin DialogueOn ;
14674: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14678: LD_INT 19
14680: PPUSH
14681: LD_INT 22
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 21
14693: PUSH
14694: LD_INT 2
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 70
14709: PPUSH
14710: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14714: LD_EXP 34
14718: PPUSH
14719: LD_STRING D26-Bur-1
14721: PPUSH
14722: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14726: LD_EXP 39
14730: PPUSH
14731: LD_STRING D26-Kov-1
14733: PPUSH
14734: CALL_OW 88
// if IsOk ( Gnyevko ) then
14738: LD_EXP 35
14742: PPUSH
14743: CALL_OW 302
14747: IFFALSE 14773
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14749: LD_EXP 35
14753: PPUSH
14754: LD_STRING D26-Gny-1
14756: PPUSH
14757: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14761: LD_EXP 34
14765: PPUSH
14766: LD_STRING D26-Bur-2
14768: PPUSH
14769: CALL_OW 88
// end ; DialogueOff ;
14773: CALL_OW 7
// end ;
14777: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14778: LD_EXP 21
14782: IFFALSE 14791
14784: PUSH
14785: LD_EXP 23
14789: NOT
14790: AND
14791: IFFALSE 14837
14793: PUSH
14794: LD_INT 17
14796: PPUSH
14797: LD_INT 22
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 3
14809: PUSH
14810: LD_INT 24
14812: PUSH
14813: LD_INT 1000
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PPUSH
14828: CALL_OW 70
14832: PUSH
14833: LD_INT 1
14835: GREATER
14836: AND
14837: IFFALSE 14902
14839: GO 14841
14841: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14842: LD_EXP 35
14846: PPUSH
14847: LD_STRING D16A-Gny-1
14849: PPUSH
14850: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14854: LD_EXP 39
14858: PPUSH
14859: LD_STRING D16A-Kov-1
14861: PPUSH
14862: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14866: LD_EXP 35
14870: PPUSH
14871: CALL_OW 302
14875: IFTRUE 14888
14877: PUSH
14878: LD_EXP 39
14882: PPUSH
14883: CALL_OW 302
14887: OR
14888: IFFALSE 14902
// Say ( Burlak , D16A-Bur-1 ) ;
14890: LD_EXP 34
14894: PPUSH
14895: LD_STRING D16A-Bur-1
14897: PPUSH
14898: CALL_OW 88
// end ;
14902: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14903: LD_INT 3
14905: PPUSH
14906: LD_INT 9
14908: PPUSH
14909: CALL_OW 294
14913: IFFALSE 14926
14915: GO 14917
14917: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14918: LD_ADDR_EXP 24
14922: PUSH
14923: LD_INT 1
14925: ST_TO_ADDR
// end ;
14926: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14927: LD_INT 3
14929: PPUSH
14930: LD_INT 10
14932: PPUSH
14933: CALL_OW 294
14937: IFFALSE 14957
14939: GO 14941
14941: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14942: LD_ADDR_EXP 27
14946: PUSH
14947: LD_EXP 27
14951: PPUSH
14952: CALL 57075 0 1
14956: ST_TO_ADDR
14957: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14958: LD_INT 3
14960: PPUSH
14961: LD_INT 11
14963: PPUSH
14964: CALL_OW 294
14968: IFFALSE 14988
14970: GO 14972
14972: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14973: LD_ADDR_EXP 27
14977: PUSH
14978: LD_EXP 27
14982: PPUSH
14983: CALL 57075 0 1
14987: ST_TO_ADDR
14988: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14989: LD_INT 3
14991: PPUSH
14992: LD_INT 12
14994: PPUSH
14995: CALL_OW 294
14999: IFFALSE 15019
15001: GO 15003
15003: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15004: LD_ADDR_EXP 27
15008: PUSH
15009: LD_EXP 27
15013: PPUSH
15014: CALL 57075 0 1
15018: ST_TO_ADDR
15019: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
15020: LD_INT 3
15022: PPUSH
15023: LD_INT 13
15025: PPUSH
15026: CALL_OW 294
15030: IFFALSE 15050
15032: GO 15034
15034: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15035: LD_ADDR_EXP 27
15039: PUSH
15040: LD_EXP 27
15044: PPUSH
15045: CALL 57075 0 1
15049: ST_TO_ADDR
15050: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
15051: LD_INT 3
15053: PPUSH
15054: LD_INT 14
15056: PPUSH
15057: CALL_OW 294
15061: IFFALSE 15081
15063: GO 15065
15065: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
15066: LD_ADDR_EXP 27
15070: PUSH
15071: LD_EXP 27
15075: PPUSH
15076: CALL 57075 0 1
15080: ST_TO_ADDR
15081: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
15082: LD_EXP 27
15086: PUSH
15087: LD_INT 5
15089: GREATEREQUAL
15090: IFFALSE 15098
15092: PUSH
15093: LD_EXP 14
15097: AND
15098: IFFALSE 15118
15100: GO 15102
15102: DISABLE
// begin allMapPointsSpotted := true ;
15103: LD_ADDR_EXP 26
15107: PUSH
15108: LD_INT 1
15110: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15111: LD_STRING M10
15113: PPUSH
15114: CALL_OW 337
// end ;
15118: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
15119: LD_EXP 26
15123: IFFALSE 15131
15125: PUSH
15126: LD_EXP 22
15130: AND
15131: IFFALSE 15143
15133: GO 15135
15135: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
15136: LD_STRING M10a
15138: PPUSH
15139: CALL_OW 337
// end ;
15143: END
// every 0 0$1 trigger hasAllTanks do var timer , tmp , burlakIsInsideBuilding , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
15144: LD_EXP 14
15148: IFFALSE 15873
15150: GO 15152
15152: DISABLE
15153: LD_INT 0
15155: PPUSH
15156: PPUSH
15157: PPUSH
15158: PPUSH
15159: PPUSH
15160: PPUSH
15161: PPUSH
// begin wasOutsideBeria := false ;
15162: LD_ADDR_VAR 0 5
15166: PUSH
15167: LD_INT 0
15169: ST_TO_ADDR
// wantToTalk := false ;
15170: LD_ADDR_VAR 0 4
15174: PUSH
15175: LD_INT 0
15177: ST_TO_ADDR
// westOutpostReported := false ;
15178: LD_ADDR_VAR 0 6
15182: PUSH
15183: LD_INT 0
15185: ST_TO_ADDR
// eastOutpostReported := false ;
15186: LD_ADDR_VAR 0 7
15190: PUSH
15191: LD_INT 0
15193: ST_TO_ADDR
// timer := 0 0$0 ;
15194: LD_ADDR_VAR 0 1
15198: PUSH
15199: LD_INT 0
15201: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
15202: LD_INT 70
15204: PPUSH
15205: CALL_OW 67
// burlakIsInsideBuilding := false ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: LD_INT 0
15216: ST_TO_ADDR
// tmp := IsInUnit ( Burlak ) ;
15217: LD_ADDR_VAR 0 2
15221: PUSH
15222: LD_EXP 34
15226: PPUSH
15227: CALL_OW 310
15231: ST_TO_ADDR
// if tmp then
15232: LD_VAR 0 2
15236: IFFALSE 15257
// burlakIsInsideBuilding := GetType ( tmp ) = unit_building ;
15238: LD_ADDR_VAR 0 3
15242: PUSH
15243: LD_VAR 0 2
15247: PPUSH
15248: CALL_OW 247
15252: PUSH
15253: LD_INT 3
15255: EQUAL
15256: ST_TO_ADDR
// if not burlakIsInsideBuilding then
15257: LD_VAR 0 3
15261: NOT
15262: IFFALSE 15278
// timer := timer + 0 0$2 ;
15264: LD_ADDR_VAR 0 1
15268: PUSH
15269: LD_VAR 0 1
15273: PUSH
15274: LD_INT 70
15276: PLUS
15277: ST_TO_ADDR
// if timer >= 0 0$30 then
15278: LD_VAR 0 1
15282: PUSH
15283: LD_INT 1050
15285: GREATEREQUAL
15286: IFFALSE 15296
// wantToTalk := true ;
15288: LD_ADDR_VAR 0 4
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 and not burlakIsInsideBuilding then
15296: LD_EXP 34
15300: PPUSH
15301: LD_EXP 40
15305: PPUSH
15306: CALL_OW 296
15310: PUSH
15311: LD_INT 9
15313: GREATER
15314: IFFALSE 15323
15316: PUSH
15317: LD_VAR 0 3
15321: NOT
15322: AND
15323: IFFALSE 15333
// wasOutsideBeria := true ;
15325: LD_ADDR_VAR 0 5
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
15333: LD_VAR 0 4
15337: IFFALSE 15345
15339: PUSH
15340: LD_VAR 0 5
15344: AND
15345: IFFALSE 15394
15347: PUSH
15348: LD_EXP 34
15352: PPUSH
15353: LD_EXP 40
15357: PPUSH
15358: CALL_OW 296
15362: PUSH
15363: LD_INT 8
15365: LESS
15366: IFTRUE 15393
15368: PUSH
15369: LD_EXP 34
15373: PPUSH
15374: CALL_OW 310
15378: PPUSH
15379: LD_EXP 40
15383: PPUSH
15384: CALL_OW 296
15388: PUSH
15389: LD_INT 8
15391: LESS
15392: OR
15393: AND
15394: IFFALSE 15758
// begin timer := 0 0$0 ;
15396: LD_ADDR_VAR 0 1
15400: PUSH
15401: LD_INT 0
15403: ST_TO_ADDR
// wantToTalk := false ;
15404: LD_ADDR_VAR 0 4
15408: PUSH
15409: LD_INT 0
15411: ST_TO_ADDR
// wasOutsideBeria := false ;
15412: LD_ADDR_VAR 0 5
15416: PUSH
15417: LD_INT 0
15419: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15420: LD_EXP 40
15424: PPUSH
15425: CALL_OW 87
// DialogueOn ;
15429: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15433: LD_EXP 40
15437: PPUSH
15438: LD_STRING D25-Pla-1
15440: PPUSH
15441: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15445: LD_VAR 0 6
15449: NOT
15450: IFFALSE 15459
15452: PUSH
15453: LD_VAR 0 7
15457: NOT
15458: AND
15459: IFFALSE 15467
15461: PUSH
15462: LD_EXP 20
15466: AND
15467: IFFALSE 15475
15469: PUSH
15470: LD_EXP 21
15474: AND
15475: IFFALSE 15557
// begin westOutpostReported := true ;
15477: LD_ADDR_VAR 0 6
15481: PUSH
15482: LD_INT 1
15484: ST_TO_ADDR
// eastOutpostReported := true ;
15485: LD_ADDR_VAR 0 7
15489: PUSH
15490: LD_INT 1
15492: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15493: LD_EXP 34
15497: PPUSH
15498: LD_STRING D25-Bur-1
15500: PPUSH
15501: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15505: LD_EXP 24
15509: IFFALSE 15518
15511: PUSH
15512: LD_EXP 22
15516: NOT
15517: AND
15518: IFFALSE 15555
// begin Say ( Burlak , D25b-Bur-1 ) ;
15520: LD_EXP 34
15524: PPUSH
15525: LD_STRING D25b-Bur-1
15527: PPUSH
15528: CALL_OW 88
// if not reinforcementsGained then
15532: LD_EXP 25
15536: NOT
15537: IFFALSE 15555
// begin Say ( Platonov , D25b-Pla-1 ) ;
15539: LD_EXP 40
15543: PPUSH
15544: LD_STRING D25b-Pla-1
15546: PPUSH
15547: CALL_OW 88
// SendReinforcements ( ) ;
15551: CALL 3644 0 0
// end ; end ; end else
15555: GO 15754
// if not westOutpostReported and westOutpostDiscovered then
15557: LD_VAR 0 6
15561: NOT
15562: IFFALSE 15570
15564: PUSH
15565: LD_EXP 20
15569: AND
15570: IFFALSE 15644
// begin westOutpostReported := true ;
15572: LD_ADDR_VAR 0 6
15576: PUSH
15577: LD_INT 1
15579: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15580: LD_EXP 34
15584: PPUSH
15585: LD_STRING D25a-Bur-1b
15587: PPUSH
15588: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15592: LD_EXP 24
15596: IFFALSE 15605
15598: PUSH
15599: LD_EXP 22
15603: NOT
15604: AND
15605: IFFALSE 15642
// begin Say ( Burlak , D25b-Bur-1 ) ;
15607: LD_EXP 34
15611: PPUSH
15612: LD_STRING D25b-Bur-1
15614: PPUSH
15615: CALL_OW 88
// if not reinforcementsGained then
15619: LD_EXP 25
15623: NOT
15624: IFFALSE 15642
// begin Say ( Platonov , D25b-Pla-1 ) ;
15626: LD_EXP 40
15630: PPUSH
15631: LD_STRING D25b-Pla-1
15633: PPUSH
15634: CALL_OW 88
// SendReinforcements ( ) ;
15638: CALL 3644 0 0
// end ; end ; end else
15642: GO 15754
// if not eastOutpostReported and eastOutpostDiscovered then
15644: LD_VAR 0 7
15648: NOT
15649: IFFALSE 15657
15651: PUSH
15652: LD_EXP 21
15656: AND
15657: IFFALSE 15681
// begin eastOutpostReported := true ;
15659: LD_ADDR_VAR 0 7
15663: PUSH
15664: LD_INT 1
15666: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15667: LD_EXP 34
15671: PPUSH
15672: LD_STRING D25a-Bur-1a
15674: PPUSH
15675: CALL_OW 88
// end else
15679: GO 15754
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15681: LD_EXP 20
15685: NOT
15686: IFTRUE 15695
15688: PUSH
15689: LD_EXP 21
15693: NOT
15694: OR
15695: IFFALSE 15723
// begin Say ( Burlak , D25a-Bur-1 ) ;
15697: LD_EXP 34
15701: PPUSH
15702: LD_STRING D25a-Bur-1
15704: PPUSH
15705: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15709: LD_EXP 40
15713: PPUSH
15714: LD_STRING D25c-Pla-1
15716: PPUSH
15717: CALL_OW 88
// end else
15721: GO 15754
// if not allMapPointsSpotted then
15723: LD_EXP 26
15727: NOT
15728: IFFALSE 15754
// begin Say ( Burlak , D25a-Bur-1 ) ;
15730: LD_EXP 34
15734: PPUSH
15735: LD_STRING D25a-Bur-1
15737: PPUSH
15738: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15742: LD_EXP 40
15746: PPUSH
15747: LD_STRING D25c-Pla-1a
15749: PPUSH
15750: CALL_OW 88
// end ; DialogueOff ;
15754: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15758: LD_EXP 26
15762: IFFALSE 15770
15764: PUSH
15765: LD_EXP 22
15769: AND
15770: IFFALSE 15202
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15772: LD_INT 22
15774: PUSH
15775: LD_INT 3
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: PUSH
15782: LD_INT 21
15784: PUSH
15785: LD_INT 1
15787: PUSH
15788: EMPTY
15789: LIST
15790: LIST
15791: PUSH
15792: LD_INT 91
15794: PUSH
15795: LD_EXP 40
15799: PUSH
15800: LD_INT 10
15802: PUSH
15803: EMPTY
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: PPUSH
15813: CALL_OW 69
15817: IFFALSE 15862
// begin if not belkovDied and not belkovSaved then
15819: LD_EXP 19
15823: NOT
15824: IFFALSE 15833
15826: PUSH
15827: LD_EXP 28
15831: NOT
15832: AND
15833: IFFALSE 15856
// begin if Query ( QContMission ) = 1 then
15835: LD_STRING QContMission
15837: PPUSH
15838: CALL_OW 97
15842: PUSH
15843: LD_INT 1
15845: EQUAL
15846: IFFALSE 15854
// begin EndMission ;
15848: CALL 15958 0 0
// exit ;
15852: GO 15873
// end ; end else
15854: GO 15862
// begin EndMission ;
15856: CALL 15958 0 0
// exit ;
15860: GO 15873
// end ; end ; wait ( 0 0$10 ) ;
15862: LD_INT 350
15864: PPUSH
15865: CALL_OW 67
// until false ;
15869: LD_INT 0
15871: IFFALSE 15772
// end ;
15873: PPOPN 7
15875: END
// every 0 0$2 trigger not hasAllTanks do
15876: LD_EXP 14
15880: NOT
15881: IFFALSE 15957
15883: GO 15885
15885: DISABLE
// begin if IsOk ( Gnyevko ) then
15886: LD_EXP 35
15890: PPUSH
15891: CALL_OW 302
15895: IFFALSE 15921
// if SideShoot ( Gnyevko ) = 3 then
15897: LD_EXP 35
15901: PPUSH
15902: CALL_OW 503
15906: PUSH
15907: LD_INT 3
15909: EQUAL
15910: IFFALSE 15921
// begin YouLost ( SelfAttack ) ;
15912: LD_STRING SelfAttack
15914: PPUSH
15915: CALL_OW 104
// exit ;
15919: GO 15957
// end ; if IsOk ( Kovalyuk ) then
15921: LD_EXP 39
15925: PPUSH
15926: CALL_OW 302
15930: IFFALSE 15956
// if SideShoot ( Kovalyuk ) = 3 then
15932: LD_EXP 39
15936: PPUSH
15937: CALL_OW 503
15941: PUSH
15942: LD_INT 3
15944: EQUAL
15945: IFFALSE 15956
// begin YouLost ( SelfAttack ) ;
15947: LD_STRING SelfAttack
15949: PPUSH
15950: CALL_OW 104
// exit ;
15954: GO 15957
// end ; enable ;
15956: ENABLE
// end ;
15957: END
// function EndMission ; var i , tmp ; begin
15958: LD_INT 0
15960: PPUSH
15961: PPUSH
15962: PPUSH
// if initiative then
15963: LD_EXP 31
15967: IFFALSE 15981
// AddMedal ( Initiative , 1 ) else
15969: LD_STRING Initiative
15971: PPUSH
15972: LD_INT 1
15974: PPUSH
15975: CALL_OW 101
15979: GO 16022
// begin SaveVariable ( 1 , 02_Selfish ) ;
15981: LD_INT 1
15983: PPUSH
15984: LD_STRING 02_Selfish
15986: PPUSH
15987: CALL_OW 39
// if not eastOutpostDestroyed then
15991: LD_EXP 23
15995: NOT
15996: IFFALSE 16011
// AddMedal ( Initiative , - 2 ) else
15998: LD_STRING Initiative
16000: PPUSH
16001: LD_INT 2
16003: NEG
16004: PPUSH
16005: CALL_OW 101
16009: GO 16022
// AddMedal ( Initiative , - 1 ) ;
16011: LD_STRING Initiative
16013: PPUSH
16014: LD_INT 1
16016: NEG
16017: PPUSH
16018: CALL_OW 101
// end ; SaveVariable ( belkovSaved , 02_belkovSaved ) ;
16022: LD_EXP 28
16026: PPUSH
16027: LD_STRING 02_belkovSaved
16029: PPUSH
16030: CALL_OW 39
// if not belkovDied and belkovSaved then
16034: LD_EXP 19
16038: NOT
16039: IFFALSE 16047
16041: PUSH
16042: LD_EXP 28
16046: AND
16047: IFFALSE 16061
// AddMedal ( Belkov , 1 ) else
16049: LD_STRING Belkov
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: CALL_OW 101
16059: GO 16158
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
16061: LD_EXP 45
16065: PPUSH
16066: LD_INT 22
16068: PUSH
16069: LD_INT 3
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 72
16080: IFFALSE 16094
// AddMedal ( Belkov , 2 ) else
16082: LD_STRING Belkov
16084: PPUSH
16085: LD_INT 2
16087: PPUSH
16088: CALL_OW 101
16092: GO 16158
// if belkovDied then
16094: LD_EXP 19
16098: IFFALSE 16113
// AddMedal ( Belkov , - 1 ) else
16100: LD_STRING Belkov
16102: PPUSH
16103: LD_INT 1
16105: NEG
16106: PPUSH
16107: CALL_OW 101
16111: GO 16158
// if not belkovSaved then
16113: LD_EXP 28
16117: NOT
16118: IFFALSE 16133
// AddMedal ( Belkov , - 2 ) else
16120: LD_STRING Belkov
16122: PPUSH
16123: LD_INT 2
16125: NEG
16126: PPUSH
16127: CALL_OW 101
16131: GO 16158
// if belkovDied and belkovSaved then
16133: LD_EXP 19
16137: IFFALSE 16145
16139: PUSH
16140: LD_EXP 28
16144: AND
16145: IFFALSE 16158
// AddMedal ( Belkov , - 3 ) ;
16147: LD_STRING Belkov
16149: PPUSH
16150: LD_INT 3
16152: NEG
16153: PPUSH
16154: CALL_OW 101
// if playerTeamDeadCounter = 0 then
16158: LD_EXP 30
16162: PUSH
16163: LD_INT 0
16165: EQUAL
16166: IFFALSE 16180
// AddMedal ( NoLosses , 1 ) else
16168: LD_STRING NoLosses
16170: PPUSH
16171: LD_INT 1
16173: PPUSH
16174: CALL_OW 101
16178: GO 16191
// AddMedal ( NoLosses , - 1 ) ;
16180: LD_STRING NoLosses
16182: PPUSH
16183: LD_INT 1
16185: NEG
16186: PPUSH
16187: CALL_OW 101
// GiveMedals ( Main ) ;
16191: LD_STRING Main
16193: PPUSH
16194: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
16198: LD_INT 22
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 23
16210: PUSH
16211: LD_INT 3
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: LD_INT 21
16220: PUSH
16221: LD_INT 1
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: LIST
16232: PPUSH
16233: CALL_OW 69
16237: PPUSH
16238: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
16242: LD_EXP 34
16246: PPUSH
16247: LD_EXP 3
16251: PUSH
16252: LD_STRING Burlak
16254: STR
16255: PPUSH
16256: CALL_OW 38
// if IsLive ( Gnyevko ) then
16260: LD_EXP 35
16264: PPUSH
16265: CALL_OW 300
16269: IFFALSE 16289
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
16271: LD_EXP 35
16275: PPUSH
16276: LD_EXP 3
16280: PUSH
16281: LD_STRING Gnyevko
16283: STR
16284: PPUSH
16285: CALL_OW 38
// if IsLive ( Kovalyuk ) then
16289: LD_EXP 39
16293: PPUSH
16294: CALL_OW 300
16298: IFFALSE 16318
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
16300: LD_EXP 39
16304: PPUSH
16305: LD_EXP 3
16309: PUSH
16310: LD_STRING Kovalyuk
16312: STR
16313: PPUSH
16314: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
16318: LD_EXP 36
16322: PPUSH
16323: CALL_OW 300
16327: IFFALSE 16335
16329: PUSH
16330: LD_EXP 28
16334: AND
16335: IFFALSE 16355
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
16337: LD_EXP 36
16341: PPUSH
16342: LD_EXP 3
16346: PUSH
16347: LD_STRING Belkov
16349: STR
16350: PPUSH
16351: CALL_OW 38
// if IsLive ( Kirilenkova ) then
16355: LD_EXP 37
16359: PPUSH
16360: CALL_OW 300
16364: IFFALSE 16384
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
16366: LD_EXP 37
16370: PPUSH
16371: LD_EXP 3
16375: PUSH
16376: LD_STRING Kirilenkova
16378: STR
16379: PPUSH
16380: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
16384: LD_INT 22
16386: PUSH
16387: LD_INT 3
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PUSH
16394: LD_INT 23
16396: PUSH
16397: LD_INT 3
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 21
16406: PUSH
16407: LD_INT 1
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: PPUSH
16419: CALL_OW 69
16423: PUSH
16424: LD_EXP 34
16428: PUSH
16429: LD_EXP 35
16433: PUSH
16434: LD_EXP 39
16438: PUSH
16439: LD_EXP 36
16443: PUSH
16444: LD_EXP 37
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: DIFF
16456: PPUSH
16457: LD_EXP 3
16461: PUSH
16462: LD_STRING burlakTeam
16464: STR
16465: PPUSH
16466: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
16470: LD_INT 22
16472: PUSH
16473: LD_INT 6
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: LD_INT 23
16482: PUSH
16483: LD_INT 3
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 21
16492: PUSH
16493: LD_INT 1
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: LIST
16504: PPUSH
16505: CALL_OW 69
16509: PUSH
16510: LD_EXP 40
16514: PUSH
16515: LD_EXP 38
16519: PUSH
16520: LD_EXP 36
16524: PUSH
16525: EMPTY
16526: LIST
16527: LIST
16528: LIST
16529: PUSH
16530: LD_EXP 45
16534: UNION
16535: DIFF
16536: PPUSH
16537: LD_EXP 3
16541: PUSH
16542: LD_STRING kirovTeam
16544: STR
16545: PPUSH
16546: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16550: LD_EXP 23
16554: PPUSH
16555: LD_STRING 02_EasternOutpostDestroyed
16557: PPUSH
16558: CALL_OW 39
// tmp := [ ] ;
16562: LD_ADDR_VAR 0 3
16566: PUSH
16567: EMPTY
16568: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16569: LD_ADDR_VAR 0 2
16573: PUSH
16574: LD_INT 22
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: LD_INT 21
16586: PUSH
16587: LD_INT 3
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PPUSH
16598: CALL_OW 69
16602: PUSH
16603: FOR_IN
16604: IFFALSE 16691
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16606: LD_ADDR_VAR 0 3
16610: PUSH
16611: LD_VAR 0 3
16615: PPUSH
16616: LD_VAR 0 2
16620: PPUSH
16621: CALL_OW 266
16625: PUSH
16626: LD_VAR 0 2
16630: PPUSH
16631: CALL_OW 248
16635: PUSH
16636: LD_VAR 0 2
16640: PPUSH
16641: CALL_OW 267
16645: PUSH
16646: LD_VAR 0 2
16650: PPUSH
16651: CALL_OW 250
16655: PUSH
16656: LD_VAR 0 2
16660: PPUSH
16661: CALL_OW 251
16665: PUSH
16666: LD_VAR 0 2
16670: PPUSH
16671: CALL_OW 254
16675: PUSH
16676: EMPTY
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: PPUSH
16684: CALL 55702 0 2
16688: ST_TO_ADDR
16689: GO 16603
16691: POP
16692: POP
// SaveVariable ( tmp , 02_Beria ) ;
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_STRING 02_Beria
16700: PPUSH
16701: CALL_OW 39
// tmp := [ ] ;
16705: LD_ADDR_VAR 0 3
16709: PUSH
16710: EMPTY
16711: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16712: LD_ADDR_VAR 0 2
16716: PUSH
16717: LD_INT 22
16719: PUSH
16720: LD_INT 6
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 21
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PPUSH
16741: CALL_OW 69
16745: PUSH
16746: FOR_IN
16747: IFFALSE 16834
// tmp := Join ( tmp , [ GetBType ( i ) , GetNation ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16749: LD_ADDR_VAR 0 3
16753: PUSH
16754: LD_VAR 0 3
16758: PPUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 266
16768: PUSH
16769: LD_VAR 0 2
16773: PPUSH
16774: CALL_OW 248
16778: PUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL_OW 267
16788: PUSH
16789: LD_VAR 0 2
16793: PPUSH
16794: CALL_OW 250
16798: PUSH
16799: LD_VAR 0 2
16803: PPUSH
16804: CALL_OW 251
16808: PUSH
16809: LD_VAR 0 2
16813: PPUSH
16814: CALL_OW 254
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: PPUSH
16827: CALL 55702 0 2
16831: ST_TO_ADDR
16832: GO 16746
16834: POP
16835: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16836: LD_VAR 0 3
16840: PPUSH
16841: LD_STRING 02_Kirov
16843: PPUSH
16844: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16848: LD_INT 22
16850: PUSH
16851: LD_INT 3
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: LD_INT 21
16860: PUSH
16861: LD_INT 2
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PPUSH
16872: CALL_OW 69
16876: PPUSH
16877: CALL 19770 0 1
16881: PPUSH
16882: LD_STRING 02_VehiclesCount
16884: PPUSH
16885: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16889: LD_INT 22
16891: PUSH
16892: LD_INT 6
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 21
16901: PUSH
16902: LD_INT 2
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: PPUSH
16918: CALL 19770 0 1
16922: PPUSH
16923: LD_STRING 02_KirovVehiclesCount
16925: PPUSH
16926: CALL_OW 39
// YouWin ;
16930: CALL_OW 103
// end ; end_of_file
16934: LD_VAR 0 1
16938: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin if not mode then
16939: LD_VAR 0 5
16943: NOT
16944: IFFALSE 16948
// exit ;
16946: GO 16969
// wait ( 0 0$12 ) ;
16948: LD_INT 420
16950: PPUSH
16951: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16955: LD_VAR 0 2
16959: PPUSH
16960: LD_VAR 0 3
16964: PPUSH
16965: CALL 8382 0 2
// end ;
16969: PPOPN 5
16971: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16972: LD_VAR 0 1
16976: PPUSH
16977: CALL 77271 0 1
// if un = Burlak then
16981: LD_VAR 0 1
16985: PUSH
16986: LD_EXP 34
16990: EQUAL
16991: IFFALSE 17000
// YouLost ( Burlak ) ;
16993: LD_STRING Burlak
16995: PPUSH
16996: CALL_OW 104
// if un = Platonov then
17000: LD_VAR 0 1
17004: PUSH
17005: LD_EXP 40
17009: EQUAL
17010: IFFALSE 17019
// YouLost ( Platonov ) ;
17012: LD_STRING Platonov
17014: PPUSH
17015: CALL_OW 104
// if un = Kurin then
17019: LD_VAR 0 1
17023: PUSH
17024: LD_EXP 38
17028: EQUAL
17029: IFFALSE 17038
// YouLost ( Kurin ) ;
17031: LD_STRING Kurin
17033: PPUSH
17034: CALL_OW 104
// if un = Belkov then
17038: LD_VAR 0 1
17042: PUSH
17043: LD_EXP 36
17047: EQUAL
17048: IFFALSE 17058
// belkovDied := true ;
17050: LD_ADDR_EXP 19
17054: PUSH
17055: LD_INT 1
17057: ST_TO_ADDR
// if un in belkovTeam then
17058: LD_VAR 0 1
17062: PUSH
17063: LD_EXP 45
17067: IN
17068: IFFALSE 17101
// begin belkovTeam := belkovTeam diff un ;
17070: LD_ADDR_EXP 45
17074: PUSH
17075: LD_EXP 45
17079: PUSH
17080: LD_VAR 0 1
17084: DIFF
17085: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
17086: LD_ADDR_EXP 29
17090: PUSH
17091: LD_EXP 29
17095: PPUSH
17096: CALL 57075 0 1
17100: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
17101: LD_VAR 0 1
17105: PUSH
17106: LD_INT 22
17108: PUSH
17109: LD_INT 3
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 21
17118: PUSH
17119: LD_INT 1
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 23
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: LIST
17140: PPUSH
17141: CALL_OW 69
17145: IN
17146: IFFALSE 17163
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
17148: LD_ADDR_EXP 30
17152: PUSH
17153: LD_EXP 30
17157: PPUSH
17158: CALL 57075 0 1
17162: ST_TO_ADDR
// if un in usWestForces then
17163: LD_VAR 0 1
17167: PUSH
17168: LD_EXP 46
17172: IN
17173: IFFALSE 17191
// usWestForces := usWestForces diff un ;
17175: LD_ADDR_EXP 46
17179: PUSH
17180: LD_EXP 46
17184: PUSH
17185: LD_VAR 0 1
17189: DIFF
17190: ST_TO_ADDR
// if un in usEastForces then
17191: LD_VAR 0 1
17195: PUSH
17196: LD_EXP 47
17200: IN
17201: IFFALSE 17219
// usEastForces := usEastForces diff un ;
17203: LD_ADDR_EXP 47
17207: PUSH
17208: LD_EXP 47
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: ST_TO_ADDR
// if un = Dickens then
17219: LD_VAR 0 1
17223: PUSH
17224: LD_EXP 49
17228: EQUAL
17229: IFFALSE 17247
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
17231: LD_INT 1
17233: PPUSH
17234: LD_EXP 3
17238: PUSH
17239: LD_STRING DickensKilled
17241: STR
17242: PPUSH
17243: CALL_OW 39
// end ;
17247: PPOPN 1
17249: END
// on BuildingComplete ( b ) do var mech ;
17250: LD_INT 0
17252: PPUSH
// begin if GetSide ( b ) = 3 then
17253: LD_VAR 0 1
17257: PPUSH
17258: CALL_OW 255
17262: PUSH
17263: LD_INT 3
17265: EQUAL
17266: IFFALSE 17325
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 266
17277: PUSH
17278: LD_INT 6
17280: PUSH
17281: LD_INT 7
17283: PUSH
17284: LD_INT 8
17286: PUSH
17287: EMPTY
17288: LIST
17289: LIST
17290: LIST
17291: IN
17292: IFFALSE 17302
// hasLab := true ;
17294: LD_ADDR_EXP 9
17298: PUSH
17299: LD_INT 1
17301: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 266
17311: PUSH
17312: LD_INT 2
17314: EQUAL
17315: IFFALSE 17325
// hasWorkshop := true ;
17317: LD_ADDR_EXP 10
17321: PUSH
17322: LD_INT 1
17324: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
17325: LD_VAR 0 1
17329: PPUSH
17330: CALL_OW 255
17334: PUSH
17335: LD_INT 6
17337: EQUAL
17338: IFFALSE 17412
// begin if GetBType ( b ) = b_workshop then
17340: LD_VAR 0 1
17344: PPUSH
17345: CALL_OW 266
17349: PUSH
17350: LD_INT 2
17352: EQUAL
17353: IFFALSE 17412
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
17355: LD_ADDR_VAR 0 2
17359: PUSH
17360: LD_EXP 43
17364: PPUSH
17365: LD_INT 25
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: EMPTY
17372: LIST
17373: LIST
17374: PPUSH
17375: CALL_OW 72
17379: ST_TO_ADDR
// if not mech then
17380: LD_VAR 0 2
17384: NOT
17385: IFFALSE 17389
// exit ;
17387: GO 17412
// ComExit ( mech ) ;
17389: LD_VAR 0 2
17393: PPUSH
17394: CALL 56100 0 1
// AddComEnterUnit ( mech , b ) ;
17398: LD_VAR 0 2
17402: PPUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 180
// end ; end ; end ;
17412: PPOPN 2
17414: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
17415: LD_VAR 0 1
17419: PPUSH
17420: LD_VAR 0 2
17424: PPUSH
17425: CALL 77329 0 2
// if GetSide ( vehicle ) = 3 then
17429: LD_VAR 0 1
17433: PPUSH
17434: CALL_OW 255
17438: PUSH
17439: LD_INT 3
17441: EQUAL
17442: IFFALSE 17467
// begin hasTank := true ;
17444: LD_ADDR_EXP 12
17448: PUSH
17449: LD_INT 1
17451: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
17452: LD_ADDR_EXP 15
17456: PUSH
17457: LD_EXP 15
17461: PPUSH
17462: CALL 57075 0 1
17466: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 255
17476: PUSH
17477: LD_INT 6
17479: EQUAL
17480: IFFALSE 17491
// KirovAttack ( vehicle ) ;
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL 3954 0 1
// end ;
17491: PPOPN 2
17493: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
17494: LD_VAR 0 1
17498: PUSH
17499: LD_EXP 33
17503: EQUAL
17504: IFFALSE 17510
// BelkovAttackScript ;
17506: CALL 1751 0 0
// end ;
17510: PPOPN 1
17512: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
17513: LD_INT 0
17515: PPUSH
// begin if side = 1 then
17516: LD_VAR 0 3
17520: PUSH
17521: LD_INT 1
17523: EQUAL
17524: IFFALSE 17534
// vehCaptured := true ;
17526: LD_ADDR_EXP 16
17530: PUSH
17531: LD_INT 1
17533: ST_TO_ADDR
// end ;
17534: PPOPN 5
17536: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
17537: LD_VAR 0 1
17541: PUSH
17542: LD_INT 3
17544: EQUAL
17545: IFFALSE 17557
17547: PUSH
17548: LD_VAR 0 2
17552: PUSH
17553: LD_INT 6
17555: EQUAL
17556: AND
17557: IFFALSE 17567
// allianceAttacked := true ;
17559: LD_ADDR_EXP 13
17563: PUSH
17564: LD_INT 1
17566: ST_TO_ADDR
// end ; end_of_file
17567: PPOPN 2
17569: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
17570: LD_INT 0
17572: PPUSH
17573: PPUSH
// if exist_mode then
17574: LD_VAR 0 2
17578: IFFALSE 17624
// begin unit := CreateCharacter ( prefix & ident ) ;
17580: LD_ADDR_VAR 0 5
17584: PUSH
17585: LD_VAR 0 3
17589: PUSH
17590: LD_VAR 0 1
17594: STR
17595: PPUSH
17596: CALL_OW 34
17600: ST_TO_ADDR
// if unit then
17601: LD_VAR 0 5
17605: IFFALSE 17622
// DeleteCharacters ( prefix & ident ) ;
17607: LD_VAR 0 3
17611: PUSH
17612: LD_VAR 0 1
17616: STR
17617: PPUSH
17618: CALL_OW 40
// end else
17622: GO 17639
// unit := NewCharacter ( ident ) ;
17624: LD_ADDR_VAR 0 5
17628: PUSH
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 25
17638: ST_TO_ADDR
// result := unit ;
17639: LD_ADDR_VAR 0 4
17643: PUSH
17644: LD_VAR 0 5
17648: ST_TO_ADDR
// end ;
17649: LD_VAR 0 4
17653: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
17654: LD_INT 0
17656: PPUSH
17657: PPUSH
// if exist_mode then
17658: LD_VAR 0 2
17662: IFFALSE 17687
// unit := CreateCharacter ( prefix & ident ) else
17664: LD_ADDR_VAR 0 5
17668: PUSH
17669: LD_VAR 0 3
17673: PUSH
17674: LD_VAR 0 1
17678: STR
17679: PPUSH
17680: CALL_OW 34
17684: ST_TO_ADDR
17685: GO 17702
// unit := NewCharacter ( ident ) ;
17687: LD_ADDR_VAR 0 5
17691: PUSH
17692: LD_VAR 0 1
17696: PPUSH
17697: CALL_OW 25
17701: ST_TO_ADDR
// result := unit ;
17702: LD_ADDR_VAR 0 4
17706: PUSH
17707: LD_VAR 0 5
17711: ST_TO_ADDR
// end ;
17712: LD_VAR 0 4
17716: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17717: LD_INT 0
17719: PPUSH
17720: PPUSH
// if not side or not nation then
17721: LD_VAR 0 1
17725: NOT
17726: IFTRUE 17735
17728: PUSH
17729: LD_VAR 0 2
17733: NOT
17734: OR
17735: IFFALSE 17739
// exit ;
17737: GO 18509
// case nation of nation_american :
17739: LD_VAR 0 2
17743: PUSH
17744: LD_INT 1
17746: DOUBLE
17747: EQUAL
17748: IFTRUE 17752
17750: GO 17966
17752: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17753: LD_ADDR_VAR 0 4
17757: PUSH
17758: LD_INT 35
17760: PUSH
17761: LD_INT 45
17763: PUSH
17764: LD_INT 46
17766: PUSH
17767: LD_INT 47
17769: PUSH
17770: LD_INT 82
17772: PUSH
17773: LD_INT 83
17775: PUSH
17776: LD_INT 84
17778: PUSH
17779: LD_INT 85
17781: PUSH
17782: LD_INT 86
17784: PUSH
17785: LD_INT 1
17787: PUSH
17788: LD_INT 2
17790: PUSH
17791: LD_INT 6
17793: PUSH
17794: LD_INT 15
17796: PUSH
17797: LD_INT 16
17799: PUSH
17800: LD_INT 7
17802: PUSH
17803: LD_INT 12
17805: PUSH
17806: LD_INT 13
17808: PUSH
17809: LD_INT 10
17811: PUSH
17812: LD_INT 14
17814: PUSH
17815: LD_INT 20
17817: PUSH
17818: LD_INT 21
17820: PUSH
17821: LD_INT 22
17823: PUSH
17824: LD_INT 25
17826: PUSH
17827: LD_INT 32
17829: PUSH
17830: LD_INT 27
17832: PUSH
17833: LD_INT 36
17835: PUSH
17836: LD_INT 69
17838: PUSH
17839: LD_INT 39
17841: PUSH
17842: LD_INT 34
17844: PUSH
17845: LD_INT 40
17847: PUSH
17848: LD_INT 48
17850: PUSH
17851: LD_INT 49
17853: PUSH
17854: LD_INT 50
17856: PUSH
17857: LD_INT 51
17859: PUSH
17860: LD_INT 52
17862: PUSH
17863: LD_INT 53
17865: PUSH
17866: LD_INT 54
17868: PUSH
17869: LD_INT 55
17871: PUSH
17872: LD_INT 56
17874: PUSH
17875: LD_INT 57
17877: PUSH
17878: LD_INT 58
17880: PUSH
17881: LD_INT 59
17883: PUSH
17884: LD_INT 60
17886: PUSH
17887: LD_INT 61
17889: PUSH
17890: LD_INT 62
17892: PUSH
17893: LD_INT 80
17895: PUSH
17896: LD_INT 82
17898: PUSH
17899: LD_INT 83
17901: PUSH
17902: LD_INT 84
17904: PUSH
17905: LD_INT 85
17907: PUSH
17908: LD_INT 86
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: ST_TO_ADDR
17964: GO 18431
17966: LD_INT 2
17968: DOUBLE
17969: EQUAL
17970: IFTRUE 17974
17972: GO 18200
17974: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17975: LD_ADDR_VAR 0 4
17979: PUSH
17980: LD_INT 35
17982: PUSH
17983: LD_INT 45
17985: PUSH
17986: LD_INT 46
17988: PUSH
17989: LD_INT 47
17991: PUSH
17992: LD_INT 82
17994: PUSH
17995: LD_INT 83
17997: PUSH
17998: LD_INT 84
18000: PUSH
18001: LD_INT 85
18003: PUSH
18004: LD_INT 87
18006: PUSH
18007: LD_INT 70
18009: PUSH
18010: LD_INT 1
18012: PUSH
18013: LD_INT 11
18015: PUSH
18016: LD_INT 3
18018: PUSH
18019: LD_INT 4
18021: PUSH
18022: LD_INT 5
18024: PUSH
18025: LD_INT 6
18027: PUSH
18028: LD_INT 15
18030: PUSH
18031: LD_INT 18
18033: PUSH
18034: LD_INT 7
18036: PUSH
18037: LD_INT 17
18039: PUSH
18040: LD_INT 8
18042: PUSH
18043: LD_INT 20
18045: PUSH
18046: LD_INT 21
18048: PUSH
18049: LD_INT 22
18051: PUSH
18052: LD_INT 72
18054: PUSH
18055: LD_INT 26
18057: PUSH
18058: LD_INT 69
18060: PUSH
18061: LD_INT 39
18063: PUSH
18064: LD_INT 40
18066: PUSH
18067: LD_INT 41
18069: PUSH
18070: LD_INT 42
18072: PUSH
18073: LD_INT 43
18075: PUSH
18076: LD_INT 48
18078: PUSH
18079: LD_INT 49
18081: PUSH
18082: LD_INT 50
18084: PUSH
18085: LD_INT 51
18087: PUSH
18088: LD_INT 52
18090: PUSH
18091: LD_INT 53
18093: PUSH
18094: LD_INT 54
18096: PUSH
18097: LD_INT 55
18099: PUSH
18100: LD_INT 56
18102: PUSH
18103: LD_INT 60
18105: PUSH
18106: LD_INT 61
18108: PUSH
18109: LD_INT 62
18111: PUSH
18112: LD_INT 66
18114: PUSH
18115: LD_INT 67
18117: PUSH
18118: LD_INT 68
18120: PUSH
18121: LD_INT 81
18123: PUSH
18124: LD_INT 82
18126: PUSH
18127: LD_INT 83
18129: PUSH
18130: LD_INT 84
18132: PUSH
18133: LD_INT 85
18135: PUSH
18136: LD_INT 87
18138: PUSH
18139: LD_INT 88
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: ST_TO_ADDR
18198: GO 18431
18200: LD_INT 3
18202: DOUBLE
18203: EQUAL
18204: IFTRUE 18208
18206: GO 18430
18208: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
18209: LD_ADDR_VAR 0 4
18213: PUSH
18214: LD_INT 46
18216: PUSH
18217: LD_INT 47
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 82
18228: PUSH
18229: LD_INT 83
18231: PUSH
18232: LD_INT 84
18234: PUSH
18235: LD_INT 85
18237: PUSH
18238: LD_INT 86
18240: PUSH
18241: LD_INT 11
18243: PUSH
18244: LD_INT 9
18246: PUSH
18247: LD_INT 20
18249: PUSH
18250: LD_INT 19
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 24
18258: PUSH
18259: LD_INT 22
18261: PUSH
18262: LD_INT 25
18264: PUSH
18265: LD_INT 28
18267: PUSH
18268: LD_INT 29
18270: PUSH
18271: LD_INT 30
18273: PUSH
18274: LD_INT 31
18276: PUSH
18277: LD_INT 37
18279: PUSH
18280: LD_INT 38
18282: PUSH
18283: LD_INT 32
18285: PUSH
18286: LD_INT 27
18288: PUSH
18289: LD_INT 33
18291: PUSH
18292: LD_INT 69
18294: PUSH
18295: LD_INT 39
18297: PUSH
18298: LD_INT 34
18300: PUSH
18301: LD_INT 40
18303: PUSH
18304: LD_INT 71
18306: PUSH
18307: LD_INT 23
18309: PUSH
18310: LD_INT 44
18312: PUSH
18313: LD_INT 48
18315: PUSH
18316: LD_INT 49
18318: PUSH
18319: LD_INT 50
18321: PUSH
18322: LD_INT 51
18324: PUSH
18325: LD_INT 52
18327: PUSH
18328: LD_INT 53
18330: PUSH
18331: LD_INT 54
18333: PUSH
18334: LD_INT 55
18336: PUSH
18337: LD_INT 56
18339: PUSH
18340: LD_INT 57
18342: PUSH
18343: LD_INT 58
18345: PUSH
18346: LD_INT 59
18348: PUSH
18349: LD_INT 63
18351: PUSH
18352: LD_INT 64
18354: PUSH
18355: LD_INT 65
18357: PUSH
18358: LD_INT 82
18360: PUSH
18361: LD_INT 83
18363: PUSH
18364: LD_INT 84
18366: PUSH
18367: LD_INT 85
18369: PUSH
18370: LD_INT 86
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: ST_TO_ADDR
18428: GO 18431
18430: POP
// if state > - 1 and state < 3 then
18431: LD_VAR 0 3
18435: PUSH
18436: LD_INT 1
18438: NEG
18439: GREATER
18440: IFFALSE 18452
18442: PUSH
18443: LD_VAR 0 3
18447: PUSH
18448: LD_INT 3
18450: LESS
18451: AND
18452: IFFALSE 18509
// for i in result do
18454: LD_ADDR_VAR 0 5
18458: PUSH
18459: LD_VAR 0 4
18463: PUSH
18464: FOR_IN
18465: IFFALSE 18507
// if GetTech ( i , side ) <> state then
18467: LD_VAR 0 5
18471: PPUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 321
18481: PUSH
18482: LD_VAR 0 3
18486: NONEQUAL
18487: IFFALSE 18505
// result := result diff i ;
18489: LD_ADDR_VAR 0 4
18493: PUSH
18494: LD_VAR 0 4
18498: PUSH
18499: LD_VAR 0 5
18503: DIFF
18504: ST_TO_ADDR
18505: GO 18464
18507: POP
18508: POP
// end ;
18509: LD_VAR 0 4
18513: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
18514: LD_INT 0
18516: PPUSH
18517: PPUSH
18518: PPUSH
// result := true ;
18519: LD_ADDR_VAR 0 3
18523: PUSH
18524: LD_INT 1
18526: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
18527: LD_ADDR_VAR 0 5
18531: PUSH
18532: LD_VAR 0 2
18536: PPUSH
18537: CALL_OW 480
18541: ST_TO_ADDR
// if not tmp then
18542: LD_VAR 0 5
18546: NOT
18547: IFFALSE 18551
// exit ;
18549: GO 18600
// for i in tmp do
18551: LD_ADDR_VAR 0 4
18555: PUSH
18556: LD_VAR 0 5
18560: PUSH
18561: FOR_IN
18562: IFFALSE 18598
// if GetTech ( i , side ) <> state_researched then
18564: LD_VAR 0 4
18568: PPUSH
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 321
18578: PUSH
18579: LD_INT 2
18581: NONEQUAL
18582: IFFALSE 18596
// begin result := false ;
18584: LD_ADDR_VAR 0 3
18588: PUSH
18589: LD_INT 0
18591: ST_TO_ADDR
// exit ;
18592: POP
18593: POP
18594: GO 18600
// end ;
18596: GO 18561
18598: POP
18599: POP
// end ;
18600: LD_VAR 0 3
18604: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
18605: LD_INT 0
18607: PPUSH
18608: PPUSH
18609: PPUSH
18610: PPUSH
18611: PPUSH
18612: PPUSH
18613: PPUSH
18614: PPUSH
18615: PPUSH
18616: PPUSH
18617: PPUSH
18618: PPUSH
18619: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
18620: LD_VAR 0 1
18624: NOT
18625: IFTRUE 18642
18627: PUSH
18628: LD_VAR 0 1
18632: PPUSH
18633: CALL_OW 257
18637: PUSH
18638: LD_INT 9
18640: NONEQUAL
18641: OR
18642: IFFALSE 18646
// exit ;
18644: GO 19225
// side := GetSide ( unit ) ;
18646: LD_ADDR_VAR 0 9
18650: PUSH
18651: LD_VAR 0 1
18655: PPUSH
18656: CALL_OW 255
18660: ST_TO_ADDR
// tech_space := tech_spacanom ;
18661: LD_ADDR_VAR 0 12
18665: PUSH
18666: LD_INT 29
18668: ST_TO_ADDR
// tech_time := tech_taurad ;
18669: LD_ADDR_VAR 0 13
18673: PUSH
18674: LD_INT 28
18676: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18677: LD_ADDR_VAR 0 11
18681: PUSH
18682: LD_VAR 0 1
18686: PPUSH
18687: CALL_OW 310
18691: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18692: LD_VAR 0 11
18696: PPUSH
18697: CALL_OW 247
18701: PUSH
18702: LD_INT 2
18704: EQUAL
18705: IFFALSE 18709
// exit ;
18707: GO 19225
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18709: LD_ADDR_VAR 0 8
18713: PUSH
18714: LD_INT 81
18716: PUSH
18717: LD_VAR 0 9
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 3
18728: PUSH
18729: LD_INT 21
18731: PUSH
18732: LD_INT 3
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PPUSH
18747: CALL_OW 69
18751: ST_TO_ADDR
// if not tmp then
18752: LD_VAR 0 8
18756: NOT
18757: IFFALSE 18761
// exit ;
18759: GO 19225
// if in_unit then
18761: LD_VAR 0 11
18765: IFFALSE 18789
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18767: LD_ADDR_VAR 0 10
18771: PUSH
18772: LD_VAR 0 8
18776: PPUSH
18777: LD_VAR 0 11
18781: PPUSH
18782: CALL_OW 74
18786: ST_TO_ADDR
18787: GO 18809
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18789: LD_ADDR_VAR 0 10
18793: PUSH
18794: LD_VAR 0 8
18798: PPUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 74
18808: ST_TO_ADDR
// if not enemy then
18809: LD_VAR 0 10
18813: NOT
18814: IFFALSE 18818
// exit ;
18816: GO 19225
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18818: LD_VAR 0 11
18822: IFFALSE 18844
18824: PUSH
18825: LD_VAR 0 11
18829: PPUSH
18830: LD_VAR 0 10
18834: PPUSH
18835: CALL_OW 296
18839: PUSH
18840: LD_INT 13
18842: GREATER
18843: AND
18844: IFTRUE 18866
18846: PUSH
18847: LD_VAR 0 1
18851: PPUSH
18852: LD_VAR 0 10
18856: PPUSH
18857: CALL_OW 296
18861: PUSH
18862: LD_INT 12
18864: GREATER
18865: OR
18866: IFFALSE 18870
// exit ;
18868: GO 19225
// missile := [ 1 ] ;
18870: LD_ADDR_VAR 0 14
18874: PUSH
18875: LD_INT 1
18877: PUSH
18878: EMPTY
18879: LIST
18880: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18881: LD_VAR 0 9
18885: PPUSH
18886: LD_VAR 0 12
18890: PPUSH
18891: CALL_OW 325
18895: IFFALSE 18924
// missile := Replace ( missile , missile + 1 , 2 ) ;
18897: LD_ADDR_VAR 0 14
18901: PUSH
18902: LD_VAR 0 14
18906: PPUSH
18907: LD_VAR 0 14
18911: PUSH
18912: LD_INT 1
18914: PLUS
18915: PPUSH
18916: LD_INT 2
18918: PPUSH
18919: CALL_OW 1
18923: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18924: LD_VAR 0 9
18928: PPUSH
18929: LD_VAR 0 13
18933: PPUSH
18934: CALL_OW 325
18938: IFFALSE 18962
18940: PUSH
18941: LD_VAR 0 10
18945: PPUSH
18946: CALL_OW 255
18950: PPUSH
18951: LD_VAR 0 13
18955: PPUSH
18956: CALL_OW 325
18960: NOT
18961: AND
18962: IFFALSE 18991
// missile := Replace ( missile , missile + 1 , 3 ) ;
18964: LD_ADDR_VAR 0 14
18968: PUSH
18969: LD_VAR 0 14
18973: PPUSH
18974: LD_VAR 0 14
18978: PUSH
18979: LD_INT 1
18981: PLUS
18982: PPUSH
18983: LD_INT 3
18985: PPUSH
18986: CALL_OW 1
18990: ST_TO_ADDR
// if missile < 2 then
18991: LD_VAR 0 14
18995: PUSH
18996: LD_INT 2
18998: LESS
18999: IFFALSE 19003
// exit ;
19001: GO 19225
// x := GetX ( enemy ) ;
19003: LD_ADDR_VAR 0 4
19007: PUSH
19008: LD_VAR 0 10
19012: PPUSH
19013: CALL_OW 250
19017: ST_TO_ADDR
// y := GetY ( enemy ) ;
19018: LD_ADDR_VAR 0 5
19022: PUSH
19023: LD_VAR 0 10
19027: PPUSH
19028: CALL_OW 251
19032: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
19033: LD_ADDR_VAR 0 6
19037: PUSH
19038: LD_VAR 0 4
19042: PUSH
19043: LD_INT 1
19045: NEG
19046: PPUSH
19047: LD_INT 1
19049: PPUSH
19050: CALL_OW 12
19054: PLUS
19055: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
19056: LD_ADDR_VAR 0 7
19060: PUSH
19061: LD_VAR 0 5
19065: PUSH
19066: LD_INT 1
19068: NEG
19069: PPUSH
19070: LD_INT 1
19072: PPUSH
19073: CALL_OW 12
19077: PLUS
19078: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19079: LD_VAR 0 6
19083: PPUSH
19084: LD_VAR 0 7
19088: PPUSH
19089: CALL_OW 488
19093: NOT
19094: IFFALSE 19116
// begin _x := x ;
19096: LD_ADDR_VAR 0 6
19100: PUSH
19101: LD_VAR 0 4
19105: ST_TO_ADDR
// _y := y ;
19106: LD_ADDR_VAR 0 7
19110: PUSH
19111: LD_VAR 0 5
19115: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
19116: LD_ADDR_VAR 0 3
19120: PUSH
19121: LD_INT 1
19123: PPUSH
19124: LD_VAR 0 14
19128: PPUSH
19129: CALL_OW 12
19133: ST_TO_ADDR
// case i of 1 :
19134: LD_VAR 0 3
19138: PUSH
19139: LD_INT 1
19141: DOUBLE
19142: EQUAL
19143: IFTRUE 19147
19145: GO 19164
19147: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
19148: LD_VAR 0 1
19152: PPUSH
19153: LD_VAR 0 10
19157: PPUSH
19158: CALL_OW 115
19162: GO 19225
19164: LD_INT 2
19166: DOUBLE
19167: EQUAL
19168: IFTRUE 19172
19170: GO 19194
19172: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
19173: LD_VAR 0 1
19177: PPUSH
19178: LD_VAR 0 6
19182: PPUSH
19183: LD_VAR 0 7
19187: PPUSH
19188: CALL_OW 153
19192: GO 19225
19194: LD_INT 3
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19224
19202: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
19203: LD_VAR 0 1
19207: PPUSH
19208: LD_VAR 0 6
19212: PPUSH
19213: LD_VAR 0 7
19217: PPUSH
19218: CALL_OW 154
19222: GO 19225
19224: POP
// end ;
19225: LD_VAR 0 2
19229: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
// if not unit or not building then
19238: LD_VAR 0 1
19242: NOT
19243: IFTRUE 19252
19245: PUSH
19246: LD_VAR 0 2
19250: NOT
19251: OR
19252: IFFALSE 19256
// exit ;
19254: GO 19414
// x := GetX ( building ) ;
19256: LD_ADDR_VAR 0 5
19260: PUSH
19261: LD_VAR 0 2
19265: PPUSH
19266: CALL_OW 250
19270: ST_TO_ADDR
// y := GetY ( building ) ;
19271: LD_ADDR_VAR 0 6
19275: PUSH
19276: LD_VAR 0 2
19280: PPUSH
19281: CALL_OW 251
19285: ST_TO_ADDR
// for i := 0 to 5 do
19286: LD_ADDR_VAR 0 4
19290: PUSH
19291: DOUBLE
19292: LD_INT 0
19294: DEC
19295: ST_TO_ADDR
19296: LD_INT 5
19298: PUSH
19299: FOR_TO
19300: IFFALSE 19412
// begin _x := ShiftX ( x , i , 3 ) ;
19302: LD_ADDR_VAR 0 7
19306: PUSH
19307: LD_VAR 0 5
19311: PPUSH
19312: LD_VAR 0 4
19316: PPUSH
19317: LD_INT 3
19319: PPUSH
19320: CALL_OW 272
19324: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
19325: LD_ADDR_VAR 0 8
19329: PUSH
19330: LD_VAR 0 6
19334: PPUSH
19335: LD_VAR 0 4
19339: PPUSH
19340: LD_INT 3
19342: PPUSH
19343: CALL_OW 273
19347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
19348: LD_VAR 0 7
19352: PPUSH
19353: LD_VAR 0 8
19357: PPUSH
19358: CALL_OW 488
19362: NOT
19363: IFFALSE 19367
// continue ;
19365: GO 19299
// if HexInfo ( _x , _y ) = 0 then
19367: LD_VAR 0 7
19371: PPUSH
19372: LD_VAR 0 8
19376: PPUSH
19377: CALL_OW 428
19381: PUSH
19382: LD_INT 0
19384: EQUAL
19385: IFFALSE 19410
// begin ComMoveXY ( unit , _x , _y ) ;
19387: LD_VAR 0 1
19391: PPUSH
19392: LD_VAR 0 7
19396: PPUSH
19397: LD_VAR 0 8
19401: PPUSH
19402: CALL_OW 111
// exit ;
19406: POP
19407: POP
19408: GO 19414
// end ; end ;
19410: GO 19299
19412: POP
19413: POP
// end ;
19414: LD_VAR 0 3
19418: RET
// export function ScanBase ( side , base_area ) ; begin
19419: LD_INT 0
19421: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
19422: LD_ADDR_VAR 0 3
19426: PUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_INT 81
19434: PUSH
19435: LD_VAR 0 1
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 70
19448: ST_TO_ADDR
// end ;
19449: LD_VAR 0 3
19453: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
19458: PPUSH
19459: PPUSH
// result := false ;
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: LD_INT 0
19467: ST_TO_ADDR
// side := GetSide ( unit ) ;
19468: LD_ADDR_VAR 0 3
19472: PUSH
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL_OW 255
19482: ST_TO_ADDR
// nat := GetNation ( unit ) ;
19483: LD_ADDR_VAR 0 4
19487: PUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 248
19497: ST_TO_ADDR
// case nat of 1 :
19498: LD_VAR 0 4
19502: PUSH
19503: LD_INT 1
19505: DOUBLE
19506: EQUAL
19507: IFTRUE 19511
19509: GO 19522
19511: POP
// tech := tech_lassight ; 2 :
19512: LD_ADDR_VAR 0 5
19516: PUSH
19517: LD_INT 12
19519: ST_TO_ADDR
19520: GO 19561
19522: LD_INT 2
19524: DOUBLE
19525: EQUAL
19526: IFTRUE 19530
19528: GO 19541
19530: POP
// tech := tech_mortar ; 3 :
19531: LD_ADDR_VAR 0 5
19535: PUSH
19536: LD_INT 41
19538: ST_TO_ADDR
19539: GO 19561
19541: LD_INT 3
19543: DOUBLE
19544: EQUAL
19545: IFTRUE 19549
19547: GO 19560
19549: POP
// tech := tech_bazooka ; end ;
19550: LD_ADDR_VAR 0 5
19554: PUSH
19555: LD_INT 44
19557: ST_TO_ADDR
19558: GO 19561
19560: POP
// if Researched ( side , tech ) then
19561: LD_VAR 0 3
19565: PPUSH
19566: LD_VAR 0 5
19570: PPUSH
19571: CALL_OW 325
19575: IFFALSE 19602
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
19577: LD_ADDR_VAR 0 2
19581: PUSH
19582: LD_INT 5
19584: PUSH
19585: LD_INT 8
19587: PUSH
19588: LD_INT 9
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: PUSH
19596: LD_VAR 0 4
19600: ARRAY
19601: ST_TO_ADDR
// end ;
19602: LD_VAR 0 2
19606: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
19607: LD_INT 0
19609: PPUSH
19610: PPUSH
19611: PPUSH
// if not mines then
19612: LD_VAR 0 2
19616: NOT
19617: IFFALSE 19621
// exit ;
19619: GO 19765
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
19621: LD_ADDR_VAR 0 5
19625: PUSH
19626: LD_INT 81
19628: PUSH
19629: LD_VAR 0 1
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 3
19640: PUSH
19641: LD_INT 21
19643: PUSH
19644: LD_INT 3
19646: PUSH
19647: EMPTY
19648: LIST
19649: LIST
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// for i in mines do
19664: LD_ADDR_VAR 0 4
19668: PUSH
19669: LD_VAR 0 2
19673: PUSH
19674: FOR_IN
19675: IFFALSE 19763
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19677: LD_VAR 0 4
19681: PUSH
19682: LD_INT 1
19684: ARRAY
19685: PPUSH
19686: LD_VAR 0 4
19690: PUSH
19691: LD_INT 2
19693: ARRAY
19694: PPUSH
19695: CALL_OW 458
19699: NOT
19700: IFFALSE 19704
// continue ;
19702: GO 19674
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19704: LD_VAR 0 4
19708: PUSH
19709: LD_INT 1
19711: ARRAY
19712: PPUSH
19713: LD_VAR 0 4
19717: PUSH
19718: LD_INT 2
19720: ARRAY
19721: PPUSH
19722: CALL_OW 428
19726: PUSH
19727: LD_VAR 0 5
19731: IN
19732: IFFALSE 19761
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19734: LD_VAR 0 4
19738: PUSH
19739: LD_INT 1
19741: ARRAY
19742: PPUSH
19743: LD_VAR 0 4
19747: PUSH
19748: LD_INT 2
19750: ARRAY
19751: PPUSH
19752: LD_VAR 0 1
19756: PPUSH
19757: CALL_OW 456
// end ;
19761: GO 19674
19763: POP
19764: POP
// end ;
19765: LD_VAR 0 3
19769: RET
// export function Count ( array ) ; begin
19770: LD_INT 0
19772: PPUSH
// result := array + 0 ;
19773: LD_ADDR_VAR 0 2
19777: PUSH
19778: LD_VAR 0 1
19782: PUSH
19783: LD_INT 0
19785: PLUS
19786: ST_TO_ADDR
// end ;
19787: LD_VAR 0 2
19791: RET
// export function IsEmpty ( building ) ; begin
19792: LD_INT 0
19794: PPUSH
// if not building then
19795: LD_VAR 0 1
19799: NOT
19800: IFFALSE 19804
// exit ;
19802: GO 19847
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19804: LD_ADDR_VAR 0 2
19808: PUSH
19809: LD_VAR 0 1
19813: PUSH
19814: LD_INT 22
19816: PUSH
19817: LD_VAR 0 1
19821: PPUSH
19822: CALL_OW 255
19826: PUSH
19827: EMPTY
19828: LIST
19829: LIST
19830: PUSH
19831: LD_INT 58
19833: PUSH
19834: EMPTY
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PPUSH
19841: CALL_OW 69
19845: IN
19846: ST_TO_ADDR
// end ;
19847: LD_VAR 0 2
19851: RET
// export function IsNotFull ( building ) ; var places ; begin
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
// if not building then
19856: LD_VAR 0 1
19860: NOT
19861: IFFALSE 19865
// exit ;
19863: GO 19893
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19865: LD_ADDR_VAR 0 2
19869: PUSH
19870: LD_VAR 0 1
19874: PPUSH
19875: LD_INT 3
19877: PUSH
19878: LD_INT 62
19880: PUSH
19881: EMPTY
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 72
19892: ST_TO_ADDR
// end ;
19893: LD_VAR 0 2
19897: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19898: LD_INT 0
19900: PPUSH
19901: PPUSH
19902: PPUSH
19903: PPUSH
// tmp := [ ] ;
19904: LD_ADDR_VAR 0 3
19908: PUSH
19909: EMPTY
19910: ST_TO_ADDR
// list := [ ] ;
19911: LD_ADDR_VAR 0 5
19915: PUSH
19916: EMPTY
19917: ST_TO_ADDR
// for i = 16 to 25 do
19918: LD_ADDR_VAR 0 4
19922: PUSH
19923: DOUBLE
19924: LD_INT 16
19926: DEC
19927: ST_TO_ADDR
19928: LD_INT 25
19930: PUSH
19931: FOR_TO
19932: IFFALSE 20005
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19934: LD_ADDR_VAR 0 3
19938: PUSH
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 22
19946: PUSH
19947: LD_VAR 0 1
19951: PPUSH
19952: CALL_OW 255
19956: PUSH
19957: EMPTY
19958: LIST
19959: LIST
19960: PUSH
19961: LD_INT 91
19963: PUSH
19964: LD_VAR 0 1
19968: PUSH
19969: LD_INT 6
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 30
19979: PUSH
19980: LD_VAR 0 4
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: PPUSH
19997: CALL_OW 69
20001: ADD
20002: ST_TO_ADDR
20003: GO 19931
20005: POP
20006: POP
// for i = 1 to tmp do
20007: LD_ADDR_VAR 0 4
20011: PUSH
20012: DOUBLE
20013: LD_INT 1
20015: DEC
20016: ST_TO_ADDR
20017: LD_VAR 0 3
20021: PUSH
20022: FOR_TO
20023: IFFALSE 20111
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
20025: LD_ADDR_VAR 0 5
20029: PUSH
20030: LD_VAR 0 5
20034: PUSH
20035: LD_VAR 0 3
20039: PUSH
20040: LD_VAR 0 4
20044: ARRAY
20045: PPUSH
20046: CALL_OW 266
20050: PUSH
20051: LD_VAR 0 3
20055: PUSH
20056: LD_VAR 0 4
20060: ARRAY
20061: PPUSH
20062: CALL_OW 250
20066: PUSH
20067: LD_VAR 0 3
20071: PUSH
20072: LD_VAR 0 4
20076: ARRAY
20077: PPUSH
20078: CALL_OW 251
20082: PUSH
20083: LD_VAR 0 3
20087: PUSH
20088: LD_VAR 0 4
20092: ARRAY
20093: PPUSH
20094: CALL_OW 254
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: PUSH
20105: EMPTY
20106: LIST
20107: ADD
20108: ST_TO_ADDR
20109: GO 20022
20111: POP
20112: POP
// result := list ;
20113: LD_ADDR_VAR 0 2
20117: PUSH
20118: LD_VAR 0 5
20122: ST_TO_ADDR
// end ;
20123: LD_VAR 0 2
20127: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
20128: LD_INT 0
20130: PPUSH
20131: PPUSH
20132: PPUSH
20133: PPUSH
20134: PPUSH
20135: PPUSH
20136: PPUSH
// if not factory then
20137: LD_VAR 0 1
20141: NOT
20142: IFFALSE 20146
// exit ;
20144: GO 20749
// if control = control_apeman then
20146: LD_VAR 0 4
20150: PUSH
20151: LD_INT 5
20153: EQUAL
20154: IFFALSE 20263
// begin tmp := UnitsInside ( factory ) ;
20156: LD_ADDR_VAR 0 8
20160: PUSH
20161: LD_VAR 0 1
20165: PPUSH
20166: CALL_OW 313
20170: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
20171: LD_VAR 0 8
20175: PPUSH
20176: LD_INT 25
20178: PUSH
20179: LD_INT 12
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PPUSH
20186: CALL_OW 72
20190: NOT
20191: IFFALSE 20201
// control := control_manual ;
20193: LD_ADDR_VAR 0 4
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
20201: LD_ADDR_VAR 0 8
20205: PUSH
20206: LD_VAR 0 1
20210: PPUSH
20211: CALL 19898 0 1
20215: ST_TO_ADDR
// if tmp then
20216: LD_VAR 0 8
20220: IFFALSE 20263
// begin for i in tmp do
20222: LD_ADDR_VAR 0 7
20226: PUSH
20227: LD_VAR 0 8
20231: PUSH
20232: FOR_IN
20233: IFFALSE 20261
// if i [ 1 ] = b_ext_radio then
20235: LD_VAR 0 7
20239: PUSH
20240: LD_INT 1
20242: ARRAY
20243: PUSH
20244: LD_INT 22
20246: EQUAL
20247: IFFALSE 20259
// begin control := control_remote ;
20249: LD_ADDR_VAR 0 4
20253: PUSH
20254: LD_INT 2
20256: ST_TO_ADDR
// break ;
20257: GO 20261
// end ;
20259: GO 20232
20261: POP
20262: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20263: LD_VAR 0 1
20267: PPUSH
20268: LD_VAR 0 2
20272: PPUSH
20273: LD_VAR 0 3
20277: PPUSH
20278: LD_VAR 0 4
20282: PPUSH
20283: LD_VAR 0 5
20287: PPUSH
20288: CALL_OW 448
20292: IFFALSE 20327
// begin result := [ chassis , engine , control , weapon ] ;
20294: LD_ADDR_VAR 0 6
20298: PUSH
20299: LD_VAR 0 2
20303: PUSH
20304: LD_VAR 0 3
20308: PUSH
20309: LD_VAR 0 4
20313: PUSH
20314: LD_VAR 0 5
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: ST_TO_ADDR
// exit ;
20325: GO 20749
// end ; _chassis := AvailableChassisList ( factory ) ;
20327: LD_ADDR_VAR 0 9
20331: PUSH
20332: LD_VAR 0 1
20336: PPUSH
20337: CALL_OW 475
20341: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
20342: LD_ADDR_VAR 0 11
20346: PUSH
20347: LD_VAR 0 1
20351: PPUSH
20352: CALL_OW 476
20356: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
20357: LD_ADDR_VAR 0 12
20361: PUSH
20362: LD_VAR 0 1
20366: PPUSH
20367: CALL_OW 477
20371: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
20372: LD_ADDR_VAR 0 10
20376: PUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL_OW 478
20386: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
20387: LD_VAR 0 9
20391: NOT
20392: IFTRUE 20401
20394: PUSH
20395: LD_VAR 0 11
20399: NOT
20400: OR
20401: IFTRUE 20410
20403: PUSH
20404: LD_VAR 0 12
20408: NOT
20409: OR
20410: IFTRUE 20419
20412: PUSH
20413: LD_VAR 0 10
20417: NOT
20418: OR
20419: IFFALSE 20454
// begin result := [ chassis , engine , control , weapon ] ;
20421: LD_ADDR_VAR 0 6
20425: PUSH
20426: LD_VAR 0 2
20430: PUSH
20431: LD_VAR 0 3
20435: PUSH
20436: LD_VAR 0 4
20440: PUSH
20441: LD_VAR 0 5
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: LIST
20451: ST_TO_ADDR
// exit ;
20452: GO 20749
// end ; if not chassis in _chassis then
20454: LD_VAR 0 2
20458: PUSH
20459: LD_VAR 0 9
20463: IN
20464: NOT
20465: IFFALSE 20491
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
20467: LD_ADDR_VAR 0 2
20471: PUSH
20472: LD_VAR 0 9
20476: PUSH
20477: LD_INT 1
20479: PPUSH
20480: LD_VAR 0 9
20484: PPUSH
20485: CALL_OW 12
20489: ARRAY
20490: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_VAR 0 3
20500: PPUSH
20501: CALL 20754 0 2
20505: NOT
20506: IFFALSE 20567
// repeat engine := _engine [ 1 ] ;
20508: LD_ADDR_VAR 0 3
20512: PUSH
20513: LD_VAR 0 11
20517: PUSH
20518: LD_INT 1
20520: ARRAY
20521: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
20522: LD_ADDR_VAR 0 11
20526: PUSH
20527: LD_VAR 0 11
20531: PPUSH
20532: LD_INT 1
20534: PPUSH
20535: CALL_OW 3
20539: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_VAR 0 3
20549: PPUSH
20550: CALL 20754 0 2
20554: IFTRUE 20565
20556: PUSH
20557: LD_VAR 0 11
20561: PUSH
20562: EMPTY
20563: EQUAL
20564: OR
20565: IFFALSE 20508
// if not control in _control then
20567: LD_VAR 0 4
20571: PUSH
20572: LD_VAR 0 12
20576: IN
20577: NOT
20578: IFFALSE 20604
// control := _control [ rand ( 1 , _control ) ] ;
20580: LD_ADDR_VAR 0 4
20584: PUSH
20585: LD_VAR 0 12
20589: PUSH
20590: LD_INT 1
20592: PPUSH
20593: LD_VAR 0 12
20597: PPUSH
20598: CALL_OW 12
20602: ARRAY
20603: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
20604: LD_VAR 0 2
20608: PPUSH
20609: LD_VAR 0 5
20613: PPUSH
20614: CALL 20976 0 2
20618: NOT
20619: IFFALSE 20680
// repeat weapon := _weapon [ 1 ] ;
20621: LD_ADDR_VAR 0 5
20625: PUSH
20626: LD_VAR 0 10
20630: PUSH
20631: LD_INT 1
20633: ARRAY
20634: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
20635: LD_ADDR_VAR 0 10
20639: PUSH
20640: LD_VAR 0 10
20644: PPUSH
20645: LD_INT 1
20647: PPUSH
20648: CALL_OW 3
20652: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
20653: LD_VAR 0 2
20657: PPUSH
20658: LD_VAR 0 5
20662: PPUSH
20663: CALL 20976 0 2
20667: IFTRUE 20678
20669: PUSH
20670: LD_VAR 0 10
20674: PUSH
20675: EMPTY
20676: EQUAL
20677: OR
20678: IFFALSE 20621
// result := [ ] ;
20680: LD_ADDR_VAR 0 6
20684: PUSH
20685: EMPTY
20686: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20687: LD_VAR 0 1
20691: PPUSH
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_VAR 0 3
20701: PPUSH
20702: LD_VAR 0 4
20706: PPUSH
20707: LD_VAR 0 5
20711: PPUSH
20712: CALL_OW 448
20716: IFFALSE 20749
// result := [ chassis , engine , control , weapon ] ;
20718: LD_ADDR_VAR 0 6
20722: PUSH
20723: LD_VAR 0 2
20727: PUSH
20728: LD_VAR 0 3
20732: PUSH
20733: LD_VAR 0 4
20737: PUSH
20738: LD_VAR 0 5
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: LIST
20747: LIST
20748: ST_TO_ADDR
// end ;
20749: LD_VAR 0 6
20753: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20754: LD_INT 0
20756: PPUSH
// if not chassis or not engine then
20757: LD_VAR 0 1
20761: NOT
20762: IFTRUE 20771
20764: PUSH
20765: LD_VAR 0 2
20769: NOT
20770: OR
20771: IFFALSE 20775
// exit ;
20773: GO 20971
// case engine of engine_solar :
20775: LD_VAR 0 2
20779: PUSH
20780: LD_INT 2
20782: DOUBLE
20783: EQUAL
20784: IFTRUE 20788
20786: GO 20826
20788: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20789: LD_ADDR_VAR 0 3
20793: PUSH
20794: LD_INT 11
20796: PUSH
20797: LD_INT 12
20799: PUSH
20800: LD_INT 13
20802: PUSH
20803: LD_INT 14
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: LD_INT 2
20811: PUSH
20812: LD_INT 3
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: ST_TO_ADDR
20824: GO 20955
20826: LD_INT 1
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20896
20834: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20835: LD_ADDR_VAR 0 3
20839: PUSH
20840: LD_INT 11
20842: PUSH
20843: LD_INT 12
20845: PUSH
20846: LD_INT 13
20848: PUSH
20849: LD_INT 14
20851: PUSH
20852: LD_INT 1
20854: PUSH
20855: LD_INT 2
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: LD_INT 4
20863: PUSH
20864: LD_INT 5
20866: PUSH
20867: LD_INT 21
20869: PUSH
20870: LD_INT 23
20872: PUSH
20873: LD_INT 22
20875: PUSH
20876: LD_INT 24
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: ST_TO_ADDR
20894: GO 20955
20896: LD_INT 3
20898: DOUBLE
20899: EQUAL
20900: IFTRUE 20904
20902: GO 20954
20904: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20905: LD_ADDR_VAR 0 3
20909: PUSH
20910: LD_INT 13
20912: PUSH
20913: LD_INT 14
20915: PUSH
20916: LD_INT 2
20918: PUSH
20919: LD_INT 3
20921: PUSH
20922: LD_INT 4
20924: PUSH
20925: LD_INT 5
20927: PUSH
20928: LD_INT 21
20930: PUSH
20931: LD_INT 22
20933: PUSH
20934: LD_INT 23
20936: PUSH
20937: LD_INT 24
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: LIST
20950: LIST
20951: ST_TO_ADDR
20952: GO 20955
20954: POP
// result := ( chassis in result ) ;
20955: LD_ADDR_VAR 0 3
20959: PUSH
20960: LD_VAR 0 1
20964: PUSH
20965: LD_VAR 0 3
20969: IN
20970: ST_TO_ADDR
// end ;
20971: LD_VAR 0 3
20975: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20976: LD_INT 0
20978: PPUSH
// if not chassis or not weapon then
20979: LD_VAR 0 1
20983: NOT
20984: IFTRUE 20993
20986: PUSH
20987: LD_VAR 0 2
20991: NOT
20992: OR
20993: IFFALSE 20997
// exit ;
20995: GO 22057
// case weapon of us_machine_gun :
20997: LD_VAR 0 2
21001: PUSH
21002: LD_INT 2
21004: DOUBLE
21005: EQUAL
21006: IFTRUE 21010
21008: GO 21040
21010: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
21011: LD_ADDR_VAR 0 3
21015: PUSH
21016: LD_INT 1
21018: PUSH
21019: LD_INT 2
21021: PUSH
21022: LD_INT 3
21024: PUSH
21025: LD_INT 4
21027: PUSH
21028: LD_INT 5
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: ST_TO_ADDR
21038: GO 22041
21040: LD_INT 3
21042: DOUBLE
21043: EQUAL
21044: IFTRUE 21048
21046: GO 21078
21048: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
21049: LD_ADDR_VAR 0 3
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: LD_INT 3
21062: PUSH
21063: LD_INT 4
21065: PUSH
21066: LD_INT 5
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: ST_TO_ADDR
21076: GO 22041
21078: LD_INT 11
21080: DOUBLE
21081: EQUAL
21082: IFTRUE 21086
21084: GO 21116
21086: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
21087: LD_ADDR_VAR 0 3
21091: PUSH
21092: LD_INT 1
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 3
21100: PUSH
21101: LD_INT 4
21103: PUSH
21104: LD_INT 5
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: LIST
21113: ST_TO_ADDR
21114: GO 22041
21116: LD_INT 4
21118: DOUBLE
21119: EQUAL
21120: IFTRUE 21124
21122: GO 21150
21124: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
21125: LD_ADDR_VAR 0 3
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 3
21135: PUSH
21136: LD_INT 4
21138: PUSH
21139: LD_INT 5
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: ST_TO_ADDR
21148: GO 22041
21150: LD_INT 5
21152: DOUBLE
21153: EQUAL
21154: IFTRUE 21158
21156: GO 21184
21158: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
21159: LD_ADDR_VAR 0 3
21163: PUSH
21164: LD_INT 2
21166: PUSH
21167: LD_INT 3
21169: PUSH
21170: LD_INT 4
21172: PUSH
21173: LD_INT 5
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: ST_TO_ADDR
21182: GO 22041
21184: LD_INT 9
21186: DOUBLE
21187: EQUAL
21188: IFTRUE 21192
21190: GO 21218
21192: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
21193: LD_ADDR_VAR 0 3
21197: PUSH
21198: LD_INT 2
21200: PUSH
21201: LD_INT 3
21203: PUSH
21204: LD_INT 4
21206: PUSH
21207: LD_INT 5
21209: PUSH
21210: EMPTY
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: ST_TO_ADDR
21216: GO 22041
21218: LD_INT 7
21220: DOUBLE
21221: EQUAL
21222: IFTRUE 21226
21224: GO 21252
21226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
21227: LD_ADDR_VAR 0 3
21231: PUSH
21232: LD_INT 2
21234: PUSH
21235: LD_INT 3
21237: PUSH
21238: LD_INT 4
21240: PUSH
21241: LD_INT 5
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: ST_TO_ADDR
21250: GO 22041
21252: LD_INT 12
21254: DOUBLE
21255: EQUAL
21256: IFTRUE 21260
21258: GO 21286
21260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
21261: LD_ADDR_VAR 0 3
21265: PUSH
21266: LD_INT 2
21268: PUSH
21269: LD_INT 3
21271: PUSH
21272: LD_INT 4
21274: PUSH
21275: LD_INT 5
21277: PUSH
21278: EMPTY
21279: LIST
21280: LIST
21281: LIST
21282: LIST
21283: ST_TO_ADDR
21284: GO 22041
21286: LD_INT 13
21288: DOUBLE
21289: EQUAL
21290: IFTRUE 21294
21292: GO 21320
21294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
21295: LD_ADDR_VAR 0 3
21299: PUSH
21300: LD_INT 2
21302: PUSH
21303: LD_INT 3
21305: PUSH
21306: LD_INT 4
21308: PUSH
21309: LD_INT 5
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: ST_TO_ADDR
21318: GO 22041
21320: LD_INT 14
21322: DOUBLE
21323: EQUAL
21324: IFTRUE 21328
21326: GO 21346
21328: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
21329: LD_ADDR_VAR 0 3
21333: PUSH
21334: LD_INT 4
21336: PUSH
21337: LD_INT 5
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: ST_TO_ADDR
21344: GO 22041
21346: LD_INT 6
21348: DOUBLE
21349: EQUAL
21350: IFTRUE 21354
21352: GO 21372
21354: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
21355: LD_ADDR_VAR 0 3
21359: PUSH
21360: LD_INT 4
21362: PUSH
21363: LD_INT 5
21365: PUSH
21366: EMPTY
21367: LIST
21368: LIST
21369: ST_TO_ADDR
21370: GO 22041
21372: LD_INT 10
21374: DOUBLE
21375: EQUAL
21376: IFTRUE 21380
21378: GO 21398
21380: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
21381: LD_ADDR_VAR 0 3
21385: PUSH
21386: LD_INT 4
21388: PUSH
21389: LD_INT 5
21391: PUSH
21392: EMPTY
21393: LIST
21394: LIST
21395: ST_TO_ADDR
21396: GO 22041
21398: LD_INT 22
21400: DOUBLE
21401: EQUAL
21402: IFTRUE 21406
21404: GO 21432
21406: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
21407: LD_ADDR_VAR 0 3
21411: PUSH
21412: LD_INT 11
21414: PUSH
21415: LD_INT 12
21417: PUSH
21418: LD_INT 13
21420: PUSH
21421: LD_INT 14
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: ST_TO_ADDR
21430: GO 22041
21432: LD_INT 23
21434: DOUBLE
21435: EQUAL
21436: IFTRUE 21440
21438: GO 21466
21440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
21441: LD_ADDR_VAR 0 3
21445: PUSH
21446: LD_INT 11
21448: PUSH
21449: LD_INT 12
21451: PUSH
21452: LD_INT 13
21454: PUSH
21455: LD_INT 14
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: ST_TO_ADDR
21464: GO 22041
21466: LD_INT 24
21468: DOUBLE
21469: EQUAL
21470: IFTRUE 21474
21472: GO 21500
21474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
21475: LD_ADDR_VAR 0 3
21479: PUSH
21480: LD_INT 11
21482: PUSH
21483: LD_INT 12
21485: PUSH
21486: LD_INT 13
21488: PUSH
21489: LD_INT 14
21491: PUSH
21492: EMPTY
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: ST_TO_ADDR
21498: GO 22041
21500: LD_INT 30
21502: DOUBLE
21503: EQUAL
21504: IFTRUE 21508
21506: GO 21534
21508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
21509: LD_ADDR_VAR 0 3
21513: PUSH
21514: LD_INT 11
21516: PUSH
21517: LD_INT 12
21519: PUSH
21520: LD_INT 13
21522: PUSH
21523: LD_INT 14
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: ST_TO_ADDR
21532: GO 22041
21534: LD_INT 25
21536: DOUBLE
21537: EQUAL
21538: IFTRUE 21542
21540: GO 21560
21542: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
21543: LD_ADDR_VAR 0 3
21547: PUSH
21548: LD_INT 13
21550: PUSH
21551: LD_INT 14
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: ST_TO_ADDR
21558: GO 22041
21560: LD_INT 27
21562: DOUBLE
21563: EQUAL
21564: IFTRUE 21568
21566: GO 21586
21568: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
21569: LD_ADDR_VAR 0 3
21573: PUSH
21574: LD_INT 13
21576: PUSH
21577: LD_INT 14
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: ST_TO_ADDR
21584: GO 22041
21586: LD_INT 92
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21620
21594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
21595: LD_ADDR_VAR 0 3
21599: PUSH
21600: LD_INT 11
21602: PUSH
21603: LD_INT 12
21605: PUSH
21606: LD_INT 13
21608: PUSH
21609: LD_INT 14
21611: PUSH
21612: EMPTY
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: ST_TO_ADDR
21618: GO 22041
21620: LD_INT 28
21622: DOUBLE
21623: EQUAL
21624: IFTRUE 21628
21626: GO 21646
21628: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
21629: LD_ADDR_VAR 0 3
21633: PUSH
21634: LD_INT 13
21636: PUSH
21637: LD_INT 14
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: ST_TO_ADDR
21644: GO 22041
21646: LD_INT 29
21648: DOUBLE
21649: EQUAL
21650: IFTRUE 21654
21652: GO 21672
21654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_INT 13
21662: PUSH
21663: LD_INT 14
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
21670: GO 22041
21672: LD_INT 31
21674: DOUBLE
21675: EQUAL
21676: IFTRUE 21680
21678: GO 21698
21680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
21681: LD_ADDR_VAR 0 3
21685: PUSH
21686: LD_INT 13
21688: PUSH
21689: LD_INT 14
21691: PUSH
21692: EMPTY
21693: LIST
21694: LIST
21695: ST_TO_ADDR
21696: GO 22041
21698: LD_INT 26
21700: DOUBLE
21701: EQUAL
21702: IFTRUE 21706
21704: GO 21724
21706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21707: LD_ADDR_VAR 0 3
21711: PUSH
21712: LD_INT 13
21714: PUSH
21715: LD_INT 14
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: ST_TO_ADDR
21722: GO 22041
21724: LD_INT 42
21726: DOUBLE
21727: EQUAL
21728: IFTRUE 21732
21730: GO 21758
21732: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21733: LD_ADDR_VAR 0 3
21737: PUSH
21738: LD_INT 21
21740: PUSH
21741: LD_INT 22
21743: PUSH
21744: LD_INT 23
21746: PUSH
21747: LD_INT 24
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: ST_TO_ADDR
21756: GO 22041
21758: LD_INT 43
21760: DOUBLE
21761: EQUAL
21762: IFTRUE 21766
21764: GO 21792
21766: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21767: LD_ADDR_VAR 0 3
21771: PUSH
21772: LD_INT 21
21774: PUSH
21775: LD_INT 22
21777: PUSH
21778: LD_INT 23
21780: PUSH
21781: LD_INT 24
21783: PUSH
21784: EMPTY
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 22041
21792: LD_INT 44
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 21826
21800: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21801: LD_ADDR_VAR 0 3
21805: PUSH
21806: LD_INT 21
21808: PUSH
21809: LD_INT 22
21811: PUSH
21812: LD_INT 23
21814: PUSH
21815: LD_INT 24
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: ST_TO_ADDR
21824: GO 22041
21826: LD_INT 45
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21860
21834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21835: LD_ADDR_VAR 0 3
21839: PUSH
21840: LD_INT 21
21842: PUSH
21843: LD_INT 22
21845: PUSH
21846: LD_INT 23
21848: PUSH
21849: LD_INT 24
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: ST_TO_ADDR
21858: GO 22041
21860: LD_INT 49
21862: DOUBLE
21863: EQUAL
21864: IFTRUE 21868
21866: GO 21894
21868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21869: LD_ADDR_VAR 0 3
21873: PUSH
21874: LD_INT 21
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 23
21882: PUSH
21883: LD_INT 24
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: ST_TO_ADDR
21892: GO 22041
21894: LD_INT 51
21896: DOUBLE
21897: EQUAL
21898: IFTRUE 21902
21900: GO 21928
21902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21903: LD_ADDR_VAR 0 3
21907: PUSH
21908: LD_INT 21
21910: PUSH
21911: LD_INT 22
21913: PUSH
21914: LD_INT 23
21916: PUSH
21917: LD_INT 24
21919: PUSH
21920: EMPTY
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: ST_TO_ADDR
21926: GO 22041
21928: LD_INT 52
21930: DOUBLE
21931: EQUAL
21932: IFTRUE 21936
21934: GO 21962
21936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21937: LD_ADDR_VAR 0 3
21941: PUSH
21942: LD_INT 21
21944: PUSH
21945: LD_INT 22
21947: PUSH
21948: LD_INT 23
21950: PUSH
21951: LD_INT 24
21953: PUSH
21954: EMPTY
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: ST_TO_ADDR
21960: GO 22041
21962: LD_INT 53
21964: DOUBLE
21965: EQUAL
21966: IFTRUE 21970
21968: GO 21988
21970: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21971: LD_ADDR_VAR 0 3
21975: PUSH
21976: LD_INT 23
21978: PUSH
21979: LD_INT 24
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: ST_TO_ADDR
21986: GO 22041
21988: LD_INT 46
21990: DOUBLE
21991: EQUAL
21992: IFTRUE 21996
21994: GO 22014
21996: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21997: LD_ADDR_VAR 0 3
22001: PUSH
22002: LD_INT 23
22004: PUSH
22005: LD_INT 24
22007: PUSH
22008: EMPTY
22009: LIST
22010: LIST
22011: ST_TO_ADDR
22012: GO 22041
22014: LD_INT 47
22016: DOUBLE
22017: EQUAL
22018: IFTRUE 22022
22020: GO 22040
22022: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
22023: LD_ADDR_VAR 0 3
22027: PUSH
22028: LD_INT 23
22030: PUSH
22031: LD_INT 24
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: ST_TO_ADDR
22038: GO 22041
22040: POP
// result := ( chassis in result ) ;
22041: LD_ADDR_VAR 0 3
22045: PUSH
22046: LD_VAR 0 1
22050: PUSH
22051: LD_VAR 0 3
22055: IN
22056: ST_TO_ADDR
// end ;
22057: LD_VAR 0 3
22061: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
22062: LD_INT 0
22064: PPUSH
22065: PPUSH
22066: PPUSH
22067: PPUSH
22068: PPUSH
22069: PPUSH
22070: PPUSH
// result := array ;
22071: LD_ADDR_VAR 0 5
22075: PUSH
22076: LD_VAR 0 1
22080: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
22081: LD_VAR 0 1
22085: NOT
22086: IFTRUE 22095
22088: PUSH
22089: LD_VAR 0 2
22093: NOT
22094: OR
22095: IFTRUE 22104
22097: PUSH
22098: LD_VAR 0 3
22102: NOT
22103: OR
22104: IFTRUE 22118
22106: PUSH
22107: LD_VAR 0 2
22111: PUSH
22112: LD_VAR 0 1
22116: GREATER
22117: OR
22118: IFTRUE 22132
22120: PUSH
22121: LD_VAR 0 3
22125: PUSH
22126: LD_VAR 0 1
22130: GREATER
22131: OR
22132: IFFALSE 22136
// exit ;
22134: GO 22432
// if direction then
22136: LD_VAR 0 4
22140: IFFALSE 22204
// begin d := 1 ;
22142: LD_ADDR_VAR 0 9
22146: PUSH
22147: LD_INT 1
22149: ST_TO_ADDR
// if i_from > i_to then
22150: LD_VAR 0 2
22154: PUSH
22155: LD_VAR 0 3
22159: GREATER
22160: IFFALSE 22186
// length := ( array - i_from ) + i_to else
22162: LD_ADDR_VAR 0 11
22166: PUSH
22167: LD_VAR 0 1
22171: PUSH
22172: LD_VAR 0 2
22176: MINUS
22177: PUSH
22178: LD_VAR 0 3
22182: PLUS
22183: ST_TO_ADDR
22184: GO 22202
// length := i_to - i_from ;
22186: LD_ADDR_VAR 0 11
22190: PUSH
22191: LD_VAR 0 3
22195: PUSH
22196: LD_VAR 0 2
22200: MINUS
22201: ST_TO_ADDR
// end else
22202: GO 22265
// begin d := - 1 ;
22204: LD_ADDR_VAR 0 9
22208: PUSH
22209: LD_INT 1
22211: NEG
22212: ST_TO_ADDR
// if i_from > i_to then
22213: LD_VAR 0 2
22217: PUSH
22218: LD_VAR 0 3
22222: GREATER
22223: IFFALSE 22243
// length := i_from - i_to else
22225: LD_ADDR_VAR 0 11
22229: PUSH
22230: LD_VAR 0 2
22234: PUSH
22235: LD_VAR 0 3
22239: MINUS
22240: ST_TO_ADDR
22241: GO 22265
// length := ( array - i_to ) + i_from ;
22243: LD_ADDR_VAR 0 11
22247: PUSH
22248: LD_VAR 0 1
22252: PUSH
22253: LD_VAR 0 3
22257: MINUS
22258: PUSH
22259: LD_VAR 0 2
22263: PLUS
22264: ST_TO_ADDR
// end ; if not length then
22265: LD_VAR 0 11
22269: NOT
22270: IFFALSE 22274
// exit ;
22272: GO 22432
// tmp := array ;
22274: LD_ADDR_VAR 0 10
22278: PUSH
22279: LD_VAR 0 1
22283: ST_TO_ADDR
// for i = 1 to length do
22284: LD_ADDR_VAR 0 6
22288: PUSH
22289: DOUBLE
22290: LD_INT 1
22292: DEC
22293: ST_TO_ADDR
22294: LD_VAR 0 11
22298: PUSH
22299: FOR_TO
22300: IFFALSE 22420
// begin for j = 1 to array do
22302: LD_ADDR_VAR 0 7
22306: PUSH
22307: DOUBLE
22308: LD_INT 1
22310: DEC
22311: ST_TO_ADDR
22312: LD_VAR 0 1
22316: PUSH
22317: FOR_TO
22318: IFFALSE 22406
// begin k := j + d ;
22320: LD_ADDR_VAR 0 8
22324: PUSH
22325: LD_VAR 0 7
22329: PUSH
22330: LD_VAR 0 9
22334: PLUS
22335: ST_TO_ADDR
// if k > array then
22336: LD_VAR 0 8
22340: PUSH
22341: LD_VAR 0 1
22345: GREATER
22346: IFFALSE 22356
// k := 1 ;
22348: LD_ADDR_VAR 0 8
22352: PUSH
22353: LD_INT 1
22355: ST_TO_ADDR
// if not k then
22356: LD_VAR 0 8
22360: NOT
22361: IFFALSE 22373
// k := array ;
22363: LD_ADDR_VAR 0 8
22367: PUSH
22368: LD_VAR 0 1
22372: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
22373: LD_ADDR_VAR 0 10
22377: PUSH
22378: LD_VAR 0 10
22382: PPUSH
22383: LD_VAR 0 8
22387: PPUSH
22388: LD_VAR 0 1
22392: PUSH
22393: LD_VAR 0 7
22397: ARRAY
22398: PPUSH
22399: CALL_OW 1
22403: ST_TO_ADDR
// end ;
22404: GO 22317
22406: POP
22407: POP
// array := tmp ;
22408: LD_ADDR_VAR 0 1
22412: PUSH
22413: LD_VAR 0 10
22417: ST_TO_ADDR
// end ;
22418: GO 22299
22420: POP
22421: POP
// result := array ;
22422: LD_ADDR_VAR 0 5
22426: PUSH
22427: LD_VAR 0 1
22431: ST_TO_ADDR
// end ;
22432: LD_VAR 0 5
22436: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
22437: LD_INT 0
22439: PPUSH
22440: PPUSH
// result := 0 ;
22441: LD_ADDR_VAR 0 3
22445: PUSH
22446: LD_INT 0
22448: ST_TO_ADDR
// if not array or not value in array then
22449: LD_VAR 0 1
22453: NOT
22454: IFTRUE 22469
22456: PUSH
22457: LD_VAR 0 2
22461: PUSH
22462: LD_VAR 0 1
22466: IN
22467: NOT
22468: OR
22469: IFFALSE 22473
// exit ;
22471: GO 22527
// for i = 1 to array do
22473: LD_ADDR_VAR 0 4
22477: PUSH
22478: DOUBLE
22479: LD_INT 1
22481: DEC
22482: ST_TO_ADDR
22483: LD_VAR 0 1
22487: PUSH
22488: FOR_TO
22489: IFFALSE 22525
// if value = array [ i ] then
22491: LD_VAR 0 2
22495: PUSH
22496: LD_VAR 0 1
22500: PUSH
22501: LD_VAR 0 4
22505: ARRAY
22506: EQUAL
22507: IFFALSE 22523
// begin result := i ;
22509: LD_ADDR_VAR 0 3
22513: PUSH
22514: LD_VAR 0 4
22518: ST_TO_ADDR
// exit ;
22519: POP
22520: POP
22521: GO 22527
// end ;
22523: GO 22488
22525: POP
22526: POP
// end ;
22527: LD_VAR 0 3
22531: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
22532: LD_INT 0
22534: PPUSH
// vc_chassis := chassis ;
22535: LD_ADDR_OWVAR 37
22539: PUSH
22540: LD_VAR 0 1
22544: ST_TO_ADDR
// vc_engine := engine ;
22545: LD_ADDR_OWVAR 39
22549: PUSH
22550: LD_VAR 0 2
22554: ST_TO_ADDR
// vc_control := control ;
22555: LD_ADDR_OWVAR 38
22559: PUSH
22560: LD_VAR 0 3
22564: ST_TO_ADDR
// vc_weapon := weapon ;
22565: LD_ADDR_OWVAR 40
22569: PUSH
22570: LD_VAR 0 4
22574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
22575: LD_ADDR_OWVAR 41
22579: PUSH
22580: LD_VAR 0 5
22584: ST_TO_ADDR
// end ;
22585: LD_VAR 0 6
22589: RET
// export function WantPlant ( unit ) ; var task ; begin
22590: LD_INT 0
22592: PPUSH
22593: PPUSH
// result := false ;
22594: LD_ADDR_VAR 0 2
22598: PUSH
22599: LD_INT 0
22601: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
22602: LD_ADDR_VAR 0 3
22606: PUSH
22607: LD_VAR 0 1
22611: PPUSH
22612: CALL_OW 437
22616: ST_TO_ADDR
// if task then
22617: LD_VAR 0 3
22621: IFFALSE 22649
// if task [ 1 ] [ 1 ] = p then
22623: LD_VAR 0 3
22627: PUSH
22628: LD_INT 1
22630: ARRAY
22631: PUSH
22632: LD_INT 1
22634: ARRAY
22635: PUSH
22636: LD_STRING p
22638: EQUAL
22639: IFFALSE 22649
// result := true ;
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: LD_INT 1
22648: ST_TO_ADDR
// end ;
22649: LD_VAR 0 2
22653: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
22654: LD_INT 0
22656: PPUSH
22657: PPUSH
22658: PPUSH
22659: PPUSH
// if pos < 1 then
22660: LD_VAR 0 2
22664: PUSH
22665: LD_INT 1
22667: LESS
22668: IFFALSE 22672
// exit ;
22670: GO 22975
// if pos = 1 then
22672: LD_VAR 0 2
22676: PUSH
22677: LD_INT 1
22679: EQUAL
22680: IFFALSE 22713
// result := Replace ( arr , pos [ 1 ] , value ) else
22682: LD_ADDR_VAR 0 4
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: LD_VAR 0 2
22696: PUSH
22697: LD_INT 1
22699: ARRAY
22700: PPUSH
22701: LD_VAR 0 3
22705: PPUSH
22706: CALL_OW 1
22710: ST_TO_ADDR
22711: GO 22975
// begin tmp := arr ;
22713: LD_ADDR_VAR 0 6
22717: PUSH
22718: LD_VAR 0 1
22722: ST_TO_ADDR
// s_arr := [ tmp ] ;
22723: LD_ADDR_VAR 0 7
22727: PUSH
22728: LD_VAR 0 6
22732: PUSH
22733: EMPTY
22734: LIST
22735: ST_TO_ADDR
// for i = 1 to pos - 1 do
22736: LD_ADDR_VAR 0 5
22740: PUSH
22741: DOUBLE
22742: LD_INT 1
22744: DEC
22745: ST_TO_ADDR
22746: LD_VAR 0 2
22750: PUSH
22751: LD_INT 1
22753: MINUS
22754: PUSH
22755: FOR_TO
22756: IFFALSE 22801
// begin tmp := tmp [ pos [ i ] ] ;
22758: LD_ADDR_VAR 0 6
22762: PUSH
22763: LD_VAR 0 6
22767: PUSH
22768: LD_VAR 0 2
22772: PUSH
22773: LD_VAR 0 5
22777: ARRAY
22778: ARRAY
22779: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22780: LD_ADDR_VAR 0 7
22784: PUSH
22785: LD_VAR 0 7
22789: PUSH
22790: LD_VAR 0 6
22794: PUSH
22795: EMPTY
22796: LIST
22797: ADD
22798: ST_TO_ADDR
// end ;
22799: GO 22755
22801: POP
22802: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22803: LD_ADDR_VAR 0 6
22807: PUSH
22808: LD_VAR 0 6
22812: PPUSH
22813: LD_VAR 0 2
22817: PUSH
22818: LD_VAR 0 2
22822: ARRAY
22823: PPUSH
22824: LD_VAR 0 3
22828: PPUSH
22829: CALL_OW 1
22833: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22834: LD_ADDR_VAR 0 7
22838: PUSH
22839: LD_VAR 0 7
22843: PPUSH
22844: LD_VAR 0 7
22848: PPUSH
22849: LD_VAR 0 6
22853: PPUSH
22854: CALL_OW 1
22858: ST_TO_ADDR
// for i = s_arr downto 2 do
22859: LD_ADDR_VAR 0 5
22863: PUSH
22864: DOUBLE
22865: LD_VAR 0 7
22869: INC
22870: ST_TO_ADDR
22871: LD_INT 2
22873: PUSH
22874: FOR_DOWNTO
22875: IFFALSE 22959
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22877: LD_ADDR_VAR 0 6
22881: PUSH
22882: LD_VAR 0 7
22886: PUSH
22887: LD_VAR 0 5
22891: PUSH
22892: LD_INT 1
22894: MINUS
22895: ARRAY
22896: PPUSH
22897: LD_VAR 0 2
22901: PUSH
22902: LD_VAR 0 5
22906: PUSH
22907: LD_INT 1
22909: MINUS
22910: ARRAY
22911: PPUSH
22912: LD_VAR 0 7
22916: PUSH
22917: LD_VAR 0 5
22921: ARRAY
22922: PPUSH
22923: CALL_OW 1
22927: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22928: LD_ADDR_VAR 0 7
22932: PUSH
22933: LD_VAR 0 7
22937: PPUSH
22938: LD_VAR 0 5
22942: PUSH
22943: LD_INT 1
22945: MINUS
22946: PPUSH
22947: LD_VAR 0 6
22951: PPUSH
22952: CALL_OW 1
22956: ST_TO_ADDR
// end ;
22957: GO 22874
22959: POP
22960: POP
// result := s_arr [ 1 ] ;
22961: LD_ADDR_VAR 0 4
22965: PUSH
22966: LD_VAR 0 7
22970: PUSH
22971: LD_INT 1
22973: ARRAY
22974: ST_TO_ADDR
// end ; end ;
22975: LD_VAR 0 4
22979: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22980: LD_INT 0
22982: PPUSH
22983: PPUSH
// if not list then
22984: LD_VAR 0 1
22988: NOT
22989: IFFALSE 22993
// exit ;
22991: GO 23084
// i := list [ pos1 ] ;
22993: LD_ADDR_VAR 0 5
22997: PUSH
22998: LD_VAR 0 1
23002: PUSH
23003: LD_VAR 0 2
23007: ARRAY
23008: ST_TO_ADDR
// if not i then
23009: LD_VAR 0 5
23013: NOT
23014: IFFALSE 23018
// exit ;
23016: GO 23084
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
23018: LD_ADDR_VAR 0 1
23022: PUSH
23023: LD_VAR 0 1
23027: PPUSH
23028: LD_VAR 0 2
23032: PPUSH
23033: LD_VAR 0 1
23037: PUSH
23038: LD_VAR 0 3
23042: ARRAY
23043: PPUSH
23044: CALL_OW 1
23048: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
23049: LD_ADDR_VAR 0 1
23053: PUSH
23054: LD_VAR 0 1
23058: PPUSH
23059: LD_VAR 0 3
23063: PPUSH
23064: LD_VAR 0 5
23068: PPUSH
23069: CALL_OW 1
23073: ST_TO_ADDR
// result := list ;
23074: LD_ADDR_VAR 0 4
23078: PUSH
23079: LD_VAR 0 1
23083: ST_TO_ADDR
// end ;
23084: LD_VAR 0 4
23088: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
23089: LD_INT 0
23091: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
23092: LD_ADDR_VAR 0 5
23096: PUSH
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 250
23106: PPUSH
23107: LD_VAR 0 1
23111: PPUSH
23112: CALL_OW 251
23116: PPUSH
23117: LD_VAR 0 2
23121: PPUSH
23122: LD_VAR 0 3
23126: PPUSH
23127: LD_VAR 0 4
23131: PPUSH
23132: CALL 23514 0 5
23136: ST_TO_ADDR
// end ;
23137: LD_VAR 0 5
23141: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
23142: LD_INT 0
23144: PPUSH
23145: PPUSH
23146: PPUSH
23147: PPUSH
// if not list or not unit then
23148: LD_VAR 0 2
23152: NOT
23153: IFTRUE 23162
23155: PUSH
23156: LD_VAR 0 1
23160: NOT
23161: OR
23162: IFFALSE 23166
// exit ;
23164: GO 23509
// result := [ ] ;
23166: LD_ADDR_VAR 0 5
23170: PUSH
23171: EMPTY
23172: ST_TO_ADDR
// for i in list do
23173: LD_ADDR_VAR 0 6
23177: PUSH
23178: LD_VAR 0 2
23182: PUSH
23183: FOR_IN
23184: IFFALSE 23402
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
23186: LD_ADDR_VAR 0 8
23190: PUSH
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_VAR 0 6
23200: PUSH
23201: LD_INT 1
23203: ARRAY
23204: PPUSH
23205: LD_VAR 0 6
23209: PUSH
23210: LD_INT 2
23212: ARRAY
23213: PPUSH
23214: CALL_OW 297
23218: ST_TO_ADDR
// if not Count ( result ) then
23219: LD_VAR 0 5
23223: PPUSH
23224: CALL 19770 0 1
23228: NOT
23229: IFFALSE 23262
// begin result := Join ( result , [ i , tmp ] ) ;
23231: LD_ADDR_VAR 0 5
23235: PUSH
23236: LD_VAR 0 5
23240: PPUSH
23241: LD_VAR 0 6
23245: PUSH
23246: LD_VAR 0 8
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PPUSH
23255: CALL 55702 0 2
23259: ST_TO_ADDR
// continue ;
23260: GO 23183
// end ; if result [ result ] [ 2 ] <= tmp then
23262: LD_VAR 0 5
23266: PUSH
23267: LD_VAR 0 5
23271: ARRAY
23272: PUSH
23273: LD_INT 2
23275: ARRAY
23276: PUSH
23277: LD_VAR 0 8
23281: LESSEQUAL
23282: IFFALSE 23315
// result := Join ( result , [ i , tmp ] ) else
23284: LD_ADDR_VAR 0 5
23288: PUSH
23289: LD_VAR 0 5
23293: PPUSH
23294: LD_VAR 0 6
23298: PUSH
23299: LD_VAR 0 8
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL 55702 0 2
23312: ST_TO_ADDR
23313: GO 23400
// begin for j := 1 to Count ( result ) do
23315: LD_ADDR_VAR 0 7
23319: PUSH
23320: DOUBLE
23321: LD_INT 1
23323: DEC
23324: ST_TO_ADDR
23325: LD_VAR 0 5
23329: PPUSH
23330: CALL 19770 0 1
23334: PUSH
23335: FOR_TO
23336: IFFALSE 23398
// begin if tmp < result [ j ] [ 2 ] then
23338: LD_VAR 0 8
23342: PUSH
23343: LD_VAR 0 5
23347: PUSH
23348: LD_VAR 0 7
23352: ARRAY
23353: PUSH
23354: LD_INT 2
23356: ARRAY
23357: LESS
23358: IFFALSE 23396
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23360: LD_ADDR_VAR 0 5
23364: PUSH
23365: LD_VAR 0 5
23369: PPUSH
23370: LD_VAR 0 7
23374: PPUSH
23375: LD_VAR 0 6
23379: PUSH
23380: LD_VAR 0 8
23384: PUSH
23385: EMPTY
23386: LIST
23387: LIST
23388: PPUSH
23389: CALL_OW 2
23393: ST_TO_ADDR
// break ;
23394: GO 23398
// end ; end ;
23396: GO 23335
23398: POP
23399: POP
// end ; end ;
23400: GO 23183
23402: POP
23403: POP
// if result and not asc then
23404: LD_VAR 0 5
23408: IFFALSE 23417
23410: PUSH
23411: LD_VAR 0 3
23415: NOT
23416: AND
23417: IFFALSE 23434
// result := ReverseArray ( result ) ;
23419: LD_ADDR_VAR 0 5
23423: PUSH
23424: LD_VAR 0 5
23428: PPUSH
23429: CALL 50792 0 1
23433: ST_TO_ADDR
// tmp := [ ] ;
23434: LD_ADDR_VAR 0 8
23438: PUSH
23439: EMPTY
23440: ST_TO_ADDR
// if mode then
23441: LD_VAR 0 4
23445: IFFALSE 23509
// begin for i := 1 to result do
23447: LD_ADDR_VAR 0 6
23451: PUSH
23452: DOUBLE
23453: LD_INT 1
23455: DEC
23456: ST_TO_ADDR
23457: LD_VAR 0 5
23461: PUSH
23462: FOR_TO
23463: IFFALSE 23497
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
23465: LD_ADDR_VAR 0 8
23469: PUSH
23470: LD_VAR 0 8
23474: PPUSH
23475: LD_VAR 0 5
23479: PUSH
23480: LD_VAR 0 6
23484: ARRAY
23485: PUSH
23486: LD_INT 1
23488: ARRAY
23489: PPUSH
23490: CALL 55702 0 2
23494: ST_TO_ADDR
23495: GO 23462
23497: POP
23498: POP
// result := tmp ;
23499: LD_ADDR_VAR 0 5
23503: PUSH
23504: LD_VAR 0 8
23508: ST_TO_ADDR
// end ; end ;
23509: LD_VAR 0 5
23513: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
23514: LD_INT 0
23516: PPUSH
23517: PPUSH
23518: PPUSH
23519: PPUSH
// if not list then
23520: LD_VAR 0 3
23524: NOT
23525: IFFALSE 23529
// exit ;
23527: GO 23919
// result := [ ] ;
23529: LD_ADDR_VAR 0 6
23533: PUSH
23534: EMPTY
23535: ST_TO_ADDR
// for i in list do
23536: LD_ADDR_VAR 0 7
23540: PUSH
23541: LD_VAR 0 3
23545: PUSH
23546: FOR_IN
23547: IFFALSE 23749
// begin tmp := GetDistUnitXY ( i , x , y ) ;
23549: LD_ADDR_VAR 0 9
23553: PUSH
23554: LD_VAR 0 7
23558: PPUSH
23559: LD_VAR 0 1
23563: PPUSH
23564: LD_VAR 0 2
23568: PPUSH
23569: CALL_OW 297
23573: ST_TO_ADDR
// if not result then
23574: LD_VAR 0 6
23578: NOT
23579: IFFALSE 23605
// result := [ [ i , tmp ] ] else
23581: LD_ADDR_VAR 0 6
23585: PUSH
23586: LD_VAR 0 7
23590: PUSH
23591: LD_VAR 0 9
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: EMPTY
23601: LIST
23602: ST_TO_ADDR
23603: GO 23747
// begin if result [ result ] [ 2 ] <= tmp then
23605: LD_VAR 0 6
23609: PUSH
23610: LD_VAR 0 6
23614: ARRAY
23615: PUSH
23616: LD_INT 2
23618: ARRAY
23619: PUSH
23620: LD_VAR 0 9
23624: LESSEQUAL
23625: IFFALSE 23667
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
23627: LD_ADDR_VAR 0 6
23631: PUSH
23632: LD_VAR 0 6
23636: PPUSH
23637: LD_VAR 0 6
23641: PUSH
23642: LD_INT 1
23644: PLUS
23645: PPUSH
23646: LD_VAR 0 7
23650: PUSH
23651: LD_VAR 0 9
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PPUSH
23660: CALL_OW 2
23664: ST_TO_ADDR
23665: GO 23747
// for j := 1 to result do
23667: LD_ADDR_VAR 0 8
23671: PUSH
23672: DOUBLE
23673: LD_INT 1
23675: DEC
23676: ST_TO_ADDR
23677: LD_VAR 0 6
23681: PUSH
23682: FOR_TO
23683: IFFALSE 23745
// begin if tmp < result [ j ] [ 2 ] then
23685: LD_VAR 0 9
23689: PUSH
23690: LD_VAR 0 6
23694: PUSH
23695: LD_VAR 0 8
23699: ARRAY
23700: PUSH
23701: LD_INT 2
23703: ARRAY
23704: LESS
23705: IFFALSE 23743
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23707: LD_ADDR_VAR 0 6
23711: PUSH
23712: LD_VAR 0 6
23716: PPUSH
23717: LD_VAR 0 8
23721: PPUSH
23722: LD_VAR 0 7
23726: PUSH
23727: LD_VAR 0 9
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 2
23740: ST_TO_ADDR
// break ;
23741: GO 23745
// end ; end ;
23743: GO 23682
23745: POP
23746: POP
// end ; end ;
23747: GO 23546
23749: POP
23750: POP
// if result and not asc then
23751: LD_VAR 0 6
23755: IFFALSE 23764
23757: PUSH
23758: LD_VAR 0 4
23762: NOT
23763: AND
23764: IFFALSE 23839
// begin tmp := result ;
23766: LD_ADDR_VAR 0 9
23770: PUSH
23771: LD_VAR 0 6
23775: ST_TO_ADDR
// for i = tmp downto 1 do
23776: LD_ADDR_VAR 0 7
23780: PUSH
23781: DOUBLE
23782: LD_VAR 0 9
23786: INC
23787: ST_TO_ADDR
23788: LD_INT 1
23790: PUSH
23791: FOR_DOWNTO
23792: IFFALSE 23837
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23794: LD_ADDR_VAR 0 6
23798: PUSH
23799: LD_VAR 0 6
23803: PPUSH
23804: LD_VAR 0 9
23808: PUSH
23809: LD_VAR 0 7
23813: MINUS
23814: PUSH
23815: LD_INT 1
23817: PLUS
23818: PPUSH
23819: LD_VAR 0 9
23823: PUSH
23824: LD_VAR 0 7
23828: ARRAY
23829: PPUSH
23830: CALL_OW 1
23834: ST_TO_ADDR
23835: GO 23791
23837: POP
23838: POP
// end ; tmp := [ ] ;
23839: LD_ADDR_VAR 0 9
23843: PUSH
23844: EMPTY
23845: ST_TO_ADDR
// if mode then
23846: LD_VAR 0 5
23850: IFFALSE 23919
// begin for i = 1 to result do
23852: LD_ADDR_VAR 0 7
23856: PUSH
23857: DOUBLE
23858: LD_INT 1
23860: DEC
23861: ST_TO_ADDR
23862: LD_VAR 0 6
23866: PUSH
23867: FOR_TO
23868: IFFALSE 23907
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23870: LD_ADDR_VAR 0 9
23874: PUSH
23875: LD_VAR 0 9
23879: PPUSH
23880: LD_VAR 0 7
23884: PPUSH
23885: LD_VAR 0 6
23889: PUSH
23890: LD_VAR 0 7
23894: ARRAY
23895: PUSH
23896: LD_INT 1
23898: ARRAY
23899: PPUSH
23900: CALL_OW 1
23904: ST_TO_ADDR
23905: GO 23867
23907: POP
23908: POP
// result := tmp ;
23909: LD_ADDR_VAR 0 6
23913: PUSH
23914: LD_VAR 0 9
23918: ST_TO_ADDR
// end ; end ;
23919: LD_VAR 0 6
23923: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23924: LD_INT 0
23926: PPUSH
23927: PPUSH
23928: PPUSH
23929: PPUSH
23930: PPUSH
23931: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23932: LD_ADDR_VAR 0 5
23936: PUSH
23937: LD_INT 0
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: ST_TO_ADDR
// if not x or not y then
23954: LD_VAR 0 2
23958: NOT
23959: IFTRUE 23968
23961: PUSH
23962: LD_VAR 0 3
23966: NOT
23967: OR
23968: IFFALSE 23972
// exit ;
23970: GO 25628
// if not range then
23972: LD_VAR 0 4
23976: NOT
23977: IFFALSE 23987
// range := 10 ;
23979: LD_ADDR_VAR 0 4
23983: PUSH
23984: LD_INT 10
23986: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23987: LD_ADDR_VAR 0 8
23991: PUSH
23992: LD_INT 81
23994: PUSH
23995: LD_VAR 0 1
23999: PUSH
24000: EMPTY
24001: LIST
24002: LIST
24003: PUSH
24004: LD_INT 92
24006: PUSH
24007: LD_VAR 0 2
24011: PUSH
24012: LD_VAR 0 3
24016: PUSH
24017: LD_VAR 0 4
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: PUSH
24028: LD_INT 3
24030: PUSH
24031: LD_INT 21
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: PPUSH
24050: CALL_OW 69
24054: ST_TO_ADDR
// if not tmp then
24055: LD_VAR 0 8
24059: NOT
24060: IFFALSE 24064
// exit ;
24062: GO 25628
// for i in tmp do
24064: LD_ADDR_VAR 0 6
24068: PUSH
24069: LD_VAR 0 8
24073: PUSH
24074: FOR_IN
24075: IFFALSE 25603
// begin points := [ 0 , 0 , 0 ] ;
24077: LD_ADDR_VAR 0 9
24081: PUSH
24082: LD_INT 0
24084: PUSH
24085: LD_INT 0
24087: PUSH
24088: LD_INT 0
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: LIST
24095: ST_TO_ADDR
// bpoints := 1 ;
24096: LD_ADDR_VAR 0 10
24100: PUSH
24101: LD_INT 1
24103: ST_TO_ADDR
// case GetType ( i ) of unit_human :
24104: LD_VAR 0 6
24108: PPUSH
24109: CALL_OW 247
24113: PUSH
24114: LD_INT 1
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24704
24122: POP
// begin if GetClass ( i ) = 1 then
24123: LD_VAR 0 6
24127: PPUSH
24128: CALL_OW 257
24132: PUSH
24133: LD_INT 1
24135: EQUAL
24136: IFFALSE 24157
// points := [ 10 , 5 , 3 ] ;
24138: LD_ADDR_VAR 0 9
24142: PUSH
24143: LD_INT 10
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: LD_INT 3
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
24157: LD_VAR 0 6
24161: PPUSH
24162: CALL_OW 257
24166: PUSH
24167: LD_INT 2
24169: PUSH
24170: LD_INT 3
24172: PUSH
24173: LD_INT 4
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: IN
24181: IFFALSE 24202
// points := [ 3 , 2 , 1 ] ;
24183: LD_ADDR_VAR 0 9
24187: PUSH
24188: LD_INT 3
24190: PUSH
24191: LD_INT 2
24193: PUSH
24194: LD_INT 1
24196: PUSH
24197: EMPTY
24198: LIST
24199: LIST
24200: LIST
24201: ST_TO_ADDR
// if GetClass ( i ) = 5 then
24202: LD_VAR 0 6
24206: PPUSH
24207: CALL_OW 257
24211: PUSH
24212: LD_INT 5
24214: EQUAL
24215: IFFALSE 24236
// points := [ 130 , 5 , 2 ] ;
24217: LD_ADDR_VAR 0 9
24221: PUSH
24222: LD_INT 130
24224: PUSH
24225: LD_INT 5
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: EMPTY
24232: LIST
24233: LIST
24234: LIST
24235: ST_TO_ADDR
// if GetClass ( i ) = 8 then
24236: LD_VAR 0 6
24240: PPUSH
24241: CALL_OW 257
24245: PUSH
24246: LD_INT 8
24248: EQUAL
24249: IFFALSE 24270
// points := [ 35 , 35 , 30 ] ;
24251: LD_ADDR_VAR 0 9
24255: PUSH
24256: LD_INT 35
24258: PUSH
24259: LD_INT 35
24261: PUSH
24262: LD_INT 30
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: LIST
24269: ST_TO_ADDR
// if GetClass ( i ) = 9 then
24270: LD_VAR 0 6
24274: PPUSH
24275: CALL_OW 257
24279: PUSH
24280: LD_INT 9
24282: EQUAL
24283: IFFALSE 24304
// points := [ 20 , 55 , 40 ] ;
24285: LD_ADDR_VAR 0 9
24289: PUSH
24290: LD_INT 20
24292: PUSH
24293: LD_INT 55
24295: PUSH
24296: LD_INT 40
24298: PUSH
24299: EMPTY
24300: LIST
24301: LIST
24302: LIST
24303: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
24304: LD_VAR 0 6
24308: PPUSH
24309: CALL_OW 257
24313: PUSH
24314: LD_INT 12
24316: PUSH
24317: LD_INT 16
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: IN
24324: IFFALSE 24345
// points := [ 5 , 3 , 2 ] ;
24326: LD_ADDR_VAR 0 9
24330: PUSH
24331: LD_INT 5
24333: PUSH
24334: LD_INT 3
24336: PUSH
24337: LD_INT 2
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: LIST
24344: ST_TO_ADDR
// if GetClass ( i ) = 17 then
24345: LD_VAR 0 6
24349: PPUSH
24350: CALL_OW 257
24354: PUSH
24355: LD_INT 17
24357: EQUAL
24358: IFFALSE 24379
// points := [ 100 , 50 , 75 ] ;
24360: LD_ADDR_VAR 0 9
24364: PUSH
24365: LD_INT 100
24367: PUSH
24368: LD_INT 50
24370: PUSH
24371: LD_INT 75
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: LIST
24378: ST_TO_ADDR
// if GetClass ( i ) = 15 then
24379: LD_VAR 0 6
24383: PPUSH
24384: CALL_OW 257
24388: PUSH
24389: LD_INT 15
24391: EQUAL
24392: IFFALSE 24413
// points := [ 10 , 5 , 3 ] ;
24394: LD_ADDR_VAR 0 9
24398: PUSH
24399: LD_INT 10
24401: PUSH
24402: LD_INT 5
24404: PUSH
24405: LD_INT 3
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: ST_TO_ADDR
// if GetClass ( i ) = 14 then
24413: LD_VAR 0 6
24417: PPUSH
24418: CALL_OW 257
24422: PUSH
24423: LD_INT 14
24425: EQUAL
24426: IFFALSE 24447
// points := [ 10 , 0 , 0 ] ;
24428: LD_ADDR_VAR 0 9
24432: PUSH
24433: LD_INT 10
24435: PUSH
24436: LD_INT 0
24438: PUSH
24439: LD_INT 0
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
// if GetClass ( i ) = 11 then
24447: LD_VAR 0 6
24451: PPUSH
24452: CALL_OW 257
24456: PUSH
24457: LD_INT 11
24459: EQUAL
24460: IFFALSE 24481
// points := [ 30 , 10 , 5 ] ;
24462: LD_ADDR_VAR 0 9
24466: PUSH
24467: LD_INT 30
24469: PUSH
24470: LD_INT 10
24472: PUSH
24473: LD_INT 5
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: LIST
24480: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
24481: LD_VAR 0 1
24485: PPUSH
24486: LD_INT 5
24488: PPUSH
24489: CALL_OW 321
24493: PUSH
24494: LD_INT 2
24496: EQUAL
24497: IFFALSE 24514
// bpoints := bpoints * 1.8 ;
24499: LD_ADDR_VAR 0 10
24503: PUSH
24504: LD_VAR 0 10
24508: PUSH
24509: LD_REAL  1.80000000000000E+0000
24512: MUL
24513: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
24514: LD_VAR 0 6
24518: PPUSH
24519: CALL_OW 257
24523: PUSH
24524: LD_INT 1
24526: PUSH
24527: LD_INT 2
24529: PUSH
24530: LD_INT 3
24532: PUSH
24533: LD_INT 4
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: IN
24542: IFFALSE 24562
24544: PUSH
24545: LD_VAR 0 1
24549: PPUSH
24550: LD_INT 51
24552: PPUSH
24553: CALL_OW 321
24557: PUSH
24558: LD_INT 2
24560: EQUAL
24561: AND
24562: IFFALSE 24579
// bpoints := bpoints * 1.2 ;
24564: LD_ADDR_VAR 0 10
24568: PUSH
24569: LD_VAR 0 10
24573: PUSH
24574: LD_REAL  1.20000000000000E+0000
24577: MUL
24578: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
24579: LD_VAR 0 6
24583: PPUSH
24584: CALL_OW 257
24588: PUSH
24589: LD_INT 5
24591: PUSH
24592: LD_INT 7
24594: PUSH
24595: LD_INT 9
24597: PUSH
24598: EMPTY
24599: LIST
24600: LIST
24601: LIST
24602: IN
24603: IFFALSE 24623
24605: PUSH
24606: LD_VAR 0 1
24610: PPUSH
24611: LD_INT 52
24613: PPUSH
24614: CALL_OW 321
24618: PUSH
24619: LD_INT 2
24621: EQUAL
24622: AND
24623: IFFALSE 24640
// bpoints := bpoints * 1.5 ;
24625: LD_ADDR_VAR 0 10
24629: PUSH
24630: LD_VAR 0 10
24634: PUSH
24635: LD_REAL  1.50000000000000E+0000
24638: MUL
24639: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
24640: LD_VAR 0 1
24644: PPUSH
24645: LD_INT 66
24647: PPUSH
24648: CALL_OW 321
24652: PUSH
24653: LD_INT 2
24655: EQUAL
24656: IFFALSE 24673
// bpoints := bpoints * 1.1 ;
24658: LD_ADDR_VAR 0 10
24662: PUSH
24663: LD_VAR 0 10
24667: PUSH
24668: LD_REAL  1.10000000000000E+0000
24671: MUL
24672: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
24673: LD_ADDR_VAR 0 10
24677: PUSH
24678: LD_VAR 0 10
24682: PUSH
24683: LD_VAR 0 6
24687: PPUSH
24688: LD_INT 1
24690: PPUSH
24691: CALL_OW 259
24695: PUSH
24696: LD_REAL  1.15000000000000E+0000
24699: MUL
24700: MUL
24701: ST_TO_ADDR
// end ; unit_vehicle :
24702: GO 25532
24704: LD_INT 2
24706: DOUBLE
24707: EQUAL
24708: IFTRUE 24712
24710: GO 25520
24712: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24713: LD_VAR 0 6
24717: PPUSH
24718: CALL_OW 264
24722: PUSH
24723: LD_INT 2
24725: PUSH
24726: LD_INT 42
24728: PUSH
24729: LD_INT 24
24731: PUSH
24732: EMPTY
24733: LIST
24734: LIST
24735: LIST
24736: IN
24737: IFFALSE 24758
// points := [ 25 , 5 , 3 ] ;
24739: LD_ADDR_VAR 0 9
24743: PUSH
24744: LD_INT 25
24746: PUSH
24747: LD_INT 5
24749: PUSH
24750: LD_INT 3
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: LIST
24757: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24758: LD_VAR 0 6
24762: PPUSH
24763: CALL_OW 264
24767: PUSH
24768: LD_INT 4
24770: PUSH
24771: LD_INT 43
24773: PUSH
24774: LD_INT 25
24776: PUSH
24777: EMPTY
24778: LIST
24779: LIST
24780: LIST
24781: IN
24782: IFFALSE 24803
// points := [ 40 , 15 , 5 ] ;
24784: LD_ADDR_VAR 0 9
24788: PUSH
24789: LD_INT 40
24791: PUSH
24792: LD_INT 15
24794: PUSH
24795: LD_INT 5
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: LIST
24802: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24803: LD_VAR 0 6
24807: PPUSH
24808: CALL_OW 264
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: LD_INT 23
24818: PUSH
24819: EMPTY
24820: LIST
24821: LIST
24822: IN
24823: IFFALSE 24844
// points := [ 7 , 25 , 8 ] ;
24825: LD_ADDR_VAR 0 9
24829: PUSH
24830: LD_INT 7
24832: PUSH
24833: LD_INT 25
24835: PUSH
24836: LD_INT 8
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: LIST
24843: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24844: LD_VAR 0 6
24848: PPUSH
24849: CALL_OW 264
24853: PUSH
24854: LD_INT 5
24856: PUSH
24857: LD_INT 27
24859: PUSH
24860: LD_INT 44
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: LIST
24867: IN
24868: IFFALSE 24889
// points := [ 14 , 50 , 16 ] ;
24870: LD_ADDR_VAR 0 9
24874: PUSH
24875: LD_INT 14
24877: PUSH
24878: LD_INT 50
24880: PUSH
24881: LD_INT 16
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: LIST
24888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24889: LD_VAR 0 6
24893: PPUSH
24894: CALL_OW 264
24898: PUSH
24899: LD_INT 6
24901: PUSH
24902: LD_INT 46
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: IN
24909: IFFALSE 24930
// points := [ 32 , 120 , 70 ] ;
24911: LD_ADDR_VAR 0 9
24915: PUSH
24916: LD_INT 32
24918: PUSH
24919: LD_INT 120
24921: PUSH
24922: LD_INT 70
24924: PUSH
24925: EMPTY
24926: LIST
24927: LIST
24928: LIST
24929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24930: LD_VAR 0 6
24934: PPUSH
24935: CALL_OW 264
24939: PUSH
24940: LD_INT 7
24942: PUSH
24943: LD_INT 28
24945: PUSH
24946: LD_INT 45
24948: PUSH
24949: LD_INT 92
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: IN
24958: IFFALSE 24979
// points := [ 35 , 20 , 45 ] ;
24960: LD_ADDR_VAR 0 9
24964: PUSH
24965: LD_INT 35
24967: PUSH
24968: LD_INT 20
24970: PUSH
24971: LD_INT 45
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: LIST
24978: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24979: LD_VAR 0 6
24983: PPUSH
24984: CALL_OW 264
24988: PUSH
24989: LD_INT 47
24991: PUSH
24992: EMPTY
24993: LIST
24994: IN
24995: IFFALSE 25016
// points := [ 67 , 45 , 75 ] ;
24997: LD_ADDR_VAR 0 9
25001: PUSH
25002: LD_INT 67
25004: PUSH
25005: LD_INT 45
25007: PUSH
25008: LD_INT 75
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
25016: LD_VAR 0 6
25020: PPUSH
25021: CALL_OW 264
25025: PUSH
25026: LD_INT 26
25028: PUSH
25029: EMPTY
25030: LIST
25031: IN
25032: IFFALSE 25053
// points := [ 120 , 30 , 80 ] ;
25034: LD_ADDR_VAR 0 9
25038: PUSH
25039: LD_INT 120
25041: PUSH
25042: LD_INT 30
25044: PUSH
25045: LD_INT 80
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: LIST
25052: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
25053: LD_VAR 0 6
25057: PPUSH
25058: CALL_OW 264
25062: PUSH
25063: LD_INT 22
25065: PUSH
25066: EMPTY
25067: LIST
25068: IN
25069: IFFALSE 25090
// points := [ 40 , 1 , 1 ] ;
25071: LD_ADDR_VAR 0 9
25075: PUSH
25076: LD_INT 40
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: LD_INT 1
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
25090: LD_VAR 0 6
25094: PPUSH
25095: CALL_OW 264
25099: PUSH
25100: LD_INT 29
25102: PUSH
25103: EMPTY
25104: LIST
25105: IN
25106: IFFALSE 25127
// points := [ 70 , 200 , 400 ] ;
25108: LD_ADDR_VAR 0 9
25112: PUSH
25113: LD_INT 70
25115: PUSH
25116: LD_INT 200
25118: PUSH
25119: LD_INT 400
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
25127: LD_VAR 0 6
25131: PPUSH
25132: CALL_OW 264
25136: PUSH
25137: LD_INT 14
25139: PUSH
25140: LD_INT 53
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: IN
25147: IFFALSE 25168
// points := [ 40 , 10 , 20 ] ;
25149: LD_ADDR_VAR 0 9
25153: PUSH
25154: LD_INT 40
25156: PUSH
25157: LD_INT 10
25159: PUSH
25160: LD_INT 20
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: LIST
25167: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
25168: LD_VAR 0 6
25172: PPUSH
25173: CALL_OW 264
25177: PUSH
25178: LD_INT 9
25180: PUSH
25181: EMPTY
25182: LIST
25183: IN
25184: IFFALSE 25205
// points := [ 5 , 70 , 20 ] ;
25186: LD_ADDR_VAR 0 9
25190: PUSH
25191: LD_INT 5
25193: PUSH
25194: LD_INT 70
25196: PUSH
25197: LD_INT 20
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: LIST
25204: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
25205: LD_VAR 0 6
25209: PPUSH
25210: CALL_OW 264
25214: PUSH
25215: LD_INT 10
25217: PUSH
25218: EMPTY
25219: LIST
25220: IN
25221: IFFALSE 25242
// points := [ 35 , 110 , 70 ] ;
25223: LD_ADDR_VAR 0 9
25227: PUSH
25228: LD_INT 35
25230: PUSH
25231: LD_INT 110
25233: PUSH
25234: LD_INT 70
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
25242: LD_VAR 0 6
25246: PPUSH
25247: CALL_OW 265
25251: PUSH
25252: LD_INT 25
25254: EQUAL
25255: IFFALSE 25276
// points := [ 80 , 65 , 100 ] ;
25257: LD_ADDR_VAR 0 9
25261: PUSH
25262: LD_INT 80
25264: PUSH
25265: LD_INT 65
25267: PUSH
25268: LD_INT 100
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: LIST
25275: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
25276: LD_VAR 0 6
25280: PPUSH
25281: CALL_OW 263
25285: PUSH
25286: LD_INT 1
25288: EQUAL
25289: IFFALSE 25324
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
25291: LD_ADDR_VAR 0 10
25295: PUSH
25296: LD_VAR 0 10
25300: PUSH
25301: LD_VAR 0 6
25305: PPUSH
25306: CALL_OW 311
25310: PPUSH
25311: LD_INT 3
25313: PPUSH
25314: CALL_OW 259
25318: PUSH
25319: LD_INT 4
25321: MUL
25322: MUL
25323: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
25324: LD_VAR 0 6
25328: PPUSH
25329: CALL_OW 263
25333: PUSH
25334: LD_INT 2
25336: EQUAL
25337: IFFALSE 25388
// begin j := IsControledBy ( i ) ;
25339: LD_ADDR_VAR 0 7
25343: PUSH
25344: LD_VAR 0 6
25348: PPUSH
25349: CALL_OW 312
25353: ST_TO_ADDR
// if j then
25354: LD_VAR 0 7
25358: IFFALSE 25388
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
25360: LD_ADDR_VAR 0 10
25364: PUSH
25365: LD_VAR 0 10
25369: PUSH
25370: LD_VAR 0 7
25374: PPUSH
25375: LD_INT 3
25377: PPUSH
25378: CALL_OW 259
25382: PUSH
25383: LD_INT 3
25385: MUL
25386: MUL
25387: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
25388: LD_VAR 0 6
25392: PPUSH
25393: CALL_OW 264
25397: PUSH
25398: LD_INT 5
25400: PUSH
25401: LD_INT 6
25403: PUSH
25404: LD_INT 46
25406: PUSH
25407: LD_INT 44
25409: PUSH
25410: LD_INT 47
25412: PUSH
25413: LD_INT 45
25415: PUSH
25416: LD_INT 28
25418: PUSH
25419: LD_INT 7
25421: PUSH
25422: LD_INT 27
25424: PUSH
25425: LD_INT 29
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: IN
25440: IFFALSE 25460
25442: PUSH
25443: LD_VAR 0 1
25447: PPUSH
25448: LD_INT 52
25450: PPUSH
25451: CALL_OW 321
25455: PUSH
25456: LD_INT 2
25458: EQUAL
25459: AND
25460: IFFALSE 25477
// bpoints := bpoints * 1.2 ;
25462: LD_ADDR_VAR 0 10
25466: PUSH
25467: LD_VAR 0 10
25471: PUSH
25472: LD_REAL  1.20000000000000E+0000
25475: MUL
25476: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
25477: LD_VAR 0 6
25481: PPUSH
25482: CALL_OW 264
25486: PUSH
25487: LD_INT 6
25489: PUSH
25490: LD_INT 46
25492: PUSH
25493: LD_INT 47
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: IN
25501: IFFALSE 25518
// bpoints := bpoints * 1.2 ;
25503: LD_ADDR_VAR 0 10
25507: PUSH
25508: LD_VAR 0 10
25512: PUSH
25513: LD_REAL  1.20000000000000E+0000
25516: MUL
25517: ST_TO_ADDR
// end ; unit_building :
25518: GO 25532
25520: LD_INT 3
25522: DOUBLE
25523: EQUAL
25524: IFTRUE 25528
25526: GO 25531
25528: POP
// ; end ;
25529: GO 25532
25531: POP
// for j = 1 to 3 do
25532: LD_ADDR_VAR 0 7
25536: PUSH
25537: DOUBLE
25538: LD_INT 1
25540: DEC
25541: ST_TO_ADDR
25542: LD_INT 3
25544: PUSH
25545: FOR_TO
25546: IFFALSE 25599
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
25548: LD_ADDR_VAR 0 5
25552: PUSH
25553: LD_VAR 0 5
25557: PPUSH
25558: LD_VAR 0 7
25562: PPUSH
25563: LD_VAR 0 5
25567: PUSH
25568: LD_VAR 0 7
25572: ARRAY
25573: PUSH
25574: LD_VAR 0 9
25578: PUSH
25579: LD_VAR 0 7
25583: ARRAY
25584: PUSH
25585: LD_VAR 0 10
25589: MUL
25590: PLUS
25591: PPUSH
25592: CALL_OW 1
25596: ST_TO_ADDR
25597: GO 25545
25599: POP
25600: POP
// end ;
25601: GO 24074
25603: POP
25604: POP
// result := Replace ( result , 4 , tmp ) ;
25605: LD_ADDR_VAR 0 5
25609: PUSH
25610: LD_VAR 0 5
25614: PPUSH
25615: LD_INT 4
25617: PPUSH
25618: LD_VAR 0 8
25622: PPUSH
25623: CALL_OW 1
25627: ST_TO_ADDR
// end ;
25628: LD_VAR 0 5
25632: RET
// export function DangerAtRange ( unit , range ) ; begin
25633: LD_INT 0
25635: PPUSH
// if not unit then
25636: LD_VAR 0 1
25640: NOT
25641: IFFALSE 25645
// exit ;
25643: GO 25690
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
25645: LD_ADDR_VAR 0 3
25649: PUSH
25650: LD_VAR 0 1
25654: PPUSH
25655: CALL_OW 255
25659: PPUSH
25660: LD_VAR 0 1
25664: PPUSH
25665: CALL_OW 250
25669: PPUSH
25670: LD_VAR 0 1
25674: PPUSH
25675: CALL_OW 251
25679: PPUSH
25680: LD_VAR 0 2
25684: PPUSH
25685: CALL 23924 0 4
25689: ST_TO_ADDR
// end ;
25690: LD_VAR 0 3
25694: RET
// export function DangerInArea ( side , area ) ; begin
25695: LD_INT 0
25697: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
25698: LD_ADDR_VAR 0 3
25702: PUSH
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_INT 81
25710: PUSH
25711: LD_VAR 0 1
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PPUSH
25720: CALL_OW 70
25724: ST_TO_ADDR
// end ;
25725: LD_VAR 0 3
25729: RET
// export function IsExtension ( b ) ; begin
25730: LD_INT 0
25732: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25733: LD_ADDR_VAR 0 2
25737: PUSH
25738: LD_VAR 0 1
25742: PUSH
25743: LD_INT 23
25745: PUSH
25746: LD_INT 20
25748: PUSH
25749: LD_INT 22
25751: PUSH
25752: LD_INT 17
25754: PUSH
25755: LD_INT 24
25757: PUSH
25758: LD_INT 21
25760: PUSH
25761: LD_INT 19
25763: PUSH
25764: LD_INT 16
25766: PUSH
25767: LD_INT 25
25769: PUSH
25770: LD_INT 18
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: IN
25785: ST_TO_ADDR
// end ;
25786: LD_VAR 0 2
25790: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25791: LD_INT 0
25793: PPUSH
25794: PPUSH
25795: PPUSH
// result := [ ] ;
25796: LD_ADDR_VAR 0 4
25800: PUSH
25801: EMPTY
25802: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25803: LD_ADDR_VAR 0 5
25807: PUSH
25808: LD_VAR 0 2
25812: PPUSH
25813: LD_INT 21
25815: PUSH
25816: LD_INT 3
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PPUSH
25823: CALL_OW 70
25827: ST_TO_ADDR
// if not tmp then
25828: LD_VAR 0 5
25832: NOT
25833: IFFALSE 25837
// exit ;
25835: GO 25901
// if checkLink then
25837: LD_VAR 0 3
25841: IFFALSE 25891
// begin for i in tmp do
25843: LD_ADDR_VAR 0 6
25847: PUSH
25848: LD_VAR 0 5
25852: PUSH
25853: FOR_IN
25854: IFFALSE 25889
// if GetBase ( i ) <> base then
25856: LD_VAR 0 6
25860: PPUSH
25861: CALL_OW 274
25865: PUSH
25866: LD_VAR 0 1
25870: NONEQUAL
25871: IFFALSE 25887
// ComLinkToBase ( base , i ) ;
25873: LD_VAR 0 1
25877: PPUSH
25878: LD_VAR 0 6
25882: PPUSH
25883: CALL_OW 169
25887: GO 25853
25889: POP
25890: POP
// end ; result := tmp ;
25891: LD_ADDR_VAR 0 4
25895: PUSH
25896: LD_VAR 0 5
25900: ST_TO_ADDR
// end ;
25901: LD_VAR 0 4
25905: RET
// export function ComComplete ( units , b ) ; var i ; begin
25906: LD_INT 0
25908: PPUSH
25909: PPUSH
// if not units then
25910: LD_VAR 0 1
25914: NOT
25915: IFFALSE 25919
// exit ;
25917: GO 26009
// for i in units do
25919: LD_ADDR_VAR 0 4
25923: PUSH
25924: LD_VAR 0 1
25928: PUSH
25929: FOR_IN
25930: IFFALSE 26007
// if BuildingStatus ( b ) = bs_build then
25932: LD_VAR 0 2
25936: PPUSH
25937: CALL_OW 461
25941: PUSH
25942: LD_INT 1
25944: EQUAL
25945: IFFALSE 26005
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25947: LD_VAR 0 4
25951: PPUSH
25952: LD_STRING h
25954: PUSH
25955: LD_VAR 0 2
25959: PPUSH
25960: CALL_OW 250
25964: PUSH
25965: LD_VAR 0 2
25969: PPUSH
25970: CALL_OW 251
25974: PUSH
25975: LD_VAR 0 2
25979: PUSH
25980: LD_INT 0
25982: PUSH
25983: LD_INT 0
25985: PUSH
25986: LD_INT 0
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: LIST
25993: LIST
25994: LIST
25995: LIST
25996: LIST
25997: PUSH
25998: EMPTY
25999: LIST
26000: PPUSH
26001: CALL_OW 446
26005: GO 25929
26007: POP
26008: POP
// end ;
26009: LD_VAR 0 3
26013: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
26014: LD_INT 0
26016: PPUSH
26017: PPUSH
26018: PPUSH
26019: PPUSH
26020: PPUSH
26021: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
26022: LD_VAR 0 1
26026: NOT
26027: IFTRUE 26044
26029: PUSH
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 263
26039: PUSH
26040: LD_INT 2
26042: NONEQUAL
26043: OR
26044: IFFALSE 26048
// exit ;
26046: GO 26364
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
26048: LD_ADDR_VAR 0 6
26052: PUSH
26053: LD_INT 22
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 255
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: LD_INT 30
26075: PUSH
26076: LD_INT 36
26078: PUSH
26079: EMPTY
26080: LIST
26081: LIST
26082: PUSH
26083: LD_INT 34
26085: PUSH
26086: LD_INT 31
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: LIST
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL_OW 69
26106: ST_TO_ADDR
// if not tmp then
26107: LD_VAR 0 6
26111: NOT
26112: IFFALSE 26116
// exit ;
26114: GO 26364
// result := [ ] ;
26116: LD_ADDR_VAR 0 2
26120: PUSH
26121: EMPTY
26122: ST_TO_ADDR
// for i in tmp do
26123: LD_ADDR_VAR 0 3
26127: PUSH
26128: LD_VAR 0 6
26132: PUSH
26133: FOR_IN
26134: IFFALSE 26205
// begin t := UnitsInside ( i ) ;
26136: LD_ADDR_VAR 0 4
26140: PUSH
26141: LD_VAR 0 3
26145: PPUSH
26146: CALL_OW 313
26150: ST_TO_ADDR
// if t then
26151: LD_VAR 0 4
26155: IFFALSE 26203
// for j in t do
26157: LD_ADDR_VAR 0 7
26161: PUSH
26162: LD_VAR 0 4
26166: PUSH
26167: FOR_IN
26168: IFFALSE 26201
// result := Replace ( result , result + 1 , j ) ;
26170: LD_ADDR_VAR 0 2
26174: PUSH
26175: LD_VAR 0 2
26179: PPUSH
26180: LD_VAR 0 2
26184: PUSH
26185: LD_INT 1
26187: PLUS
26188: PPUSH
26189: LD_VAR 0 7
26193: PPUSH
26194: CALL_OW 1
26198: ST_TO_ADDR
26199: GO 26167
26201: POP
26202: POP
// end ;
26203: GO 26133
26205: POP
26206: POP
// if not result then
26207: LD_VAR 0 2
26211: NOT
26212: IFFALSE 26216
// exit ;
26214: GO 26364
// mech := result [ 1 ] ;
26216: LD_ADDR_VAR 0 5
26220: PUSH
26221: LD_VAR 0 2
26225: PUSH
26226: LD_INT 1
26228: ARRAY
26229: ST_TO_ADDR
// if result > 1 then
26230: LD_VAR 0 2
26234: PUSH
26235: LD_INT 1
26237: GREATER
26238: IFFALSE 26350
// begin for i = 2 to result do
26240: LD_ADDR_VAR 0 3
26244: PUSH
26245: DOUBLE
26246: LD_INT 2
26248: DEC
26249: ST_TO_ADDR
26250: LD_VAR 0 2
26254: PUSH
26255: FOR_TO
26256: IFFALSE 26348
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: ARRAY
26273: PPUSH
26274: LD_INT 3
26276: PPUSH
26277: CALL_OW 259
26281: PUSH
26282: LD_VAR 0 2
26286: PUSH
26287: LD_VAR 0 3
26291: ARRAY
26292: PPUSH
26293: CALL_OW 432
26297: MINUS
26298: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
26299: LD_VAR 0 4
26303: PUSH
26304: LD_VAR 0 5
26308: PPUSH
26309: LD_INT 3
26311: PPUSH
26312: CALL_OW 259
26316: PUSH
26317: LD_VAR 0 5
26321: PPUSH
26322: CALL_OW 432
26326: MINUS
26327: GREATEREQUAL
26328: IFFALSE 26346
// mech := result [ i ] ;
26330: LD_ADDR_VAR 0 5
26334: PUSH
26335: LD_VAR 0 2
26339: PUSH
26340: LD_VAR 0 3
26344: ARRAY
26345: ST_TO_ADDR
// end ;
26346: GO 26255
26348: POP
26349: POP
// end ; ComLinkTo ( vehicle , mech ) ;
26350: LD_VAR 0 1
26354: PPUSH
26355: LD_VAR 0 5
26359: PPUSH
26360: CALL_OW 135
// end ;
26364: LD_VAR 0 2
26368: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
26369: LD_INT 0
26371: PPUSH
26372: PPUSH
26373: PPUSH
26374: PPUSH
26375: PPUSH
26376: PPUSH
26377: PPUSH
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
// result := [ ] ;
26384: LD_ADDR_VAR 0 7
26388: PUSH
26389: EMPTY
26390: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
26391: LD_VAR 0 1
26395: PPUSH
26396: CALL_OW 266
26400: PUSH
26401: LD_INT 0
26403: PUSH
26404: LD_INT 1
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: IN
26411: NOT
26412: IFFALSE 26416
// exit ;
26414: GO 28056
// if name then
26416: LD_VAR 0 3
26420: IFFALSE 26436
// SetBName ( base_dep , name ) ;
26422: LD_VAR 0 1
26426: PPUSH
26427: LD_VAR 0 3
26431: PPUSH
26432: CALL_OW 500
// base := GetBase ( base_dep ) ;
26436: LD_ADDR_VAR 0 15
26440: PUSH
26441: LD_VAR 0 1
26445: PPUSH
26446: CALL_OW 274
26450: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
26451: LD_ADDR_VAR 0 16
26455: PUSH
26456: LD_VAR 0 1
26460: PPUSH
26461: CALL_OW 255
26465: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
26466: LD_ADDR_VAR 0 17
26470: PUSH
26471: LD_VAR 0 1
26475: PPUSH
26476: CALL_OW 248
26480: ST_TO_ADDR
// if sources then
26481: LD_VAR 0 5
26485: IFFALSE 26532
// for i = 1 to 3 do
26487: LD_ADDR_VAR 0 8
26491: PUSH
26492: DOUBLE
26493: LD_INT 1
26495: DEC
26496: ST_TO_ADDR
26497: LD_INT 3
26499: PUSH
26500: FOR_TO
26501: IFFALSE 26530
// AddResourceType ( base , i , sources [ i ] ) ;
26503: LD_VAR 0 15
26507: PPUSH
26508: LD_VAR 0 8
26512: PPUSH
26513: LD_VAR 0 5
26517: PUSH
26518: LD_VAR 0 8
26522: ARRAY
26523: PPUSH
26524: CALL_OW 276
26528: GO 26500
26530: POP
26531: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
26532: LD_ADDR_VAR 0 18
26536: PUSH
26537: LD_VAR 0 15
26541: PPUSH
26542: LD_VAR 0 2
26546: PPUSH
26547: LD_INT 1
26549: PPUSH
26550: CALL 25791 0 3
26554: ST_TO_ADDR
// InitHc ;
26555: CALL_OW 19
// InitUc ;
26559: CALL_OW 18
// uc_side := side ;
26563: LD_ADDR_OWVAR 20
26567: PUSH
26568: LD_VAR 0 16
26572: ST_TO_ADDR
// uc_nation := nation ;
26573: LD_ADDR_OWVAR 21
26577: PUSH
26578: LD_VAR 0 17
26582: ST_TO_ADDR
// if buildings then
26583: LD_VAR 0 18
26587: IFFALSE 27915
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
26589: LD_ADDR_VAR 0 19
26593: PUSH
26594: LD_VAR 0 18
26598: PPUSH
26599: LD_INT 2
26601: PUSH
26602: LD_INT 30
26604: PUSH
26605: LD_INT 29
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 30
26614: PUSH
26615: LD_INT 30
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: PPUSH
26627: CALL_OW 72
26631: ST_TO_ADDR
// if tmp then
26632: LD_VAR 0 19
26636: IFFALSE 26684
// for i in tmp do
26638: LD_ADDR_VAR 0 8
26642: PUSH
26643: LD_VAR 0 19
26647: PUSH
26648: FOR_IN
26649: IFFALSE 26682
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
26651: LD_VAR 0 8
26655: PPUSH
26656: CALL_OW 250
26660: PPUSH
26661: LD_VAR 0 8
26665: PPUSH
26666: CALL_OW 251
26670: PPUSH
26671: LD_VAR 0 16
26675: PPUSH
26676: CALL_OW 441
26680: GO 26648
26682: POP
26683: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
26684: LD_VAR 0 18
26688: PPUSH
26689: LD_INT 2
26691: PUSH
26692: LD_INT 30
26694: PUSH
26695: LD_INT 32
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: PUSH
26702: LD_INT 30
26704: PUSH
26705: LD_INT 33
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: LIST
26716: PPUSH
26717: CALL_OW 72
26721: IFFALSE 26809
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26723: LD_ADDR_VAR 0 8
26727: PUSH
26728: LD_VAR 0 18
26732: PPUSH
26733: LD_INT 2
26735: PUSH
26736: LD_INT 30
26738: PUSH
26739: LD_INT 32
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 30
26748: PUSH
26749: LD_INT 33
26751: PUSH
26752: EMPTY
26753: LIST
26754: LIST
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: LIST
26760: PPUSH
26761: CALL_OW 72
26765: PUSH
26766: FOR_IN
26767: IFFALSE 26807
// begin if not GetBWeapon ( i ) then
26769: LD_VAR 0 8
26773: PPUSH
26774: CALL_OW 269
26778: NOT
26779: IFFALSE 26805
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26781: LD_VAR 0 8
26785: PPUSH
26786: LD_VAR 0 8
26790: PPUSH
26791: LD_VAR 0 2
26795: PPUSH
26796: CALL 28061 0 2
26800: PPUSH
26801: CALL_OW 431
// end ;
26805: GO 26766
26807: POP
26808: POP
// end ; for i = 1 to personel do
26809: LD_ADDR_VAR 0 8
26813: PUSH
26814: DOUBLE
26815: LD_INT 1
26817: DEC
26818: ST_TO_ADDR
26819: LD_VAR 0 6
26823: PUSH
26824: FOR_TO
26825: IFFALSE 27895
// begin if i > 4 then
26827: LD_VAR 0 8
26831: PUSH
26832: LD_INT 4
26834: GREATER
26835: IFFALSE 26839
// break ;
26837: GO 27895
// case i of 1 :
26839: LD_VAR 0 8
26843: PUSH
26844: LD_INT 1
26846: DOUBLE
26847: EQUAL
26848: IFTRUE 26852
26850: GO 26932
26852: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26853: LD_ADDR_VAR 0 12
26857: PUSH
26858: LD_VAR 0 18
26862: PPUSH
26863: LD_INT 22
26865: PUSH
26866: LD_VAR 0 16
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 58
26877: PUSH
26878: EMPTY
26879: LIST
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: LD_INT 30
26886: PUSH
26887: LD_INT 32
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 30
26896: PUSH
26897: LD_INT 4
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 30
26906: PUSH
26907: LD_INT 5
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: LIST
26924: PPUSH
26925: CALL_OW 72
26929: ST_TO_ADDR
26930: GO 27154
26932: LD_INT 2
26934: DOUBLE
26935: EQUAL
26936: IFTRUE 26940
26938: GO 27002
26940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26941: LD_ADDR_VAR 0 12
26945: PUSH
26946: LD_VAR 0 18
26950: PPUSH
26951: LD_INT 22
26953: PUSH
26954: LD_VAR 0 16
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: PUSH
26963: LD_INT 2
26965: PUSH
26966: LD_INT 30
26968: PUSH
26969: LD_INT 0
26971: PUSH
26972: EMPTY
26973: LIST
26974: LIST
26975: PUSH
26976: LD_INT 30
26978: PUSH
26979: LD_INT 1
26981: PUSH
26982: EMPTY
26983: LIST
26984: LIST
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PPUSH
26995: CALL_OW 72
26999: ST_TO_ADDR
27000: GO 27154
27002: LD_INT 3
27004: DOUBLE
27005: EQUAL
27006: IFTRUE 27010
27008: GO 27072
27010: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
27011: LD_ADDR_VAR 0 12
27015: PUSH
27016: LD_VAR 0 18
27020: PPUSH
27021: LD_INT 22
27023: PUSH
27024: LD_VAR 0 16
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 30
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 30
27048: PUSH
27049: LD_INT 3
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: PPUSH
27065: CALL_OW 72
27069: ST_TO_ADDR
27070: GO 27154
27072: LD_INT 4
27074: DOUBLE
27075: EQUAL
27076: IFTRUE 27080
27078: GO 27153
27080: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
27081: LD_ADDR_VAR 0 12
27085: PUSH
27086: LD_VAR 0 18
27090: PPUSH
27091: LD_INT 22
27093: PUSH
27094: LD_VAR 0 16
27098: PUSH
27099: EMPTY
27100: LIST
27101: LIST
27102: PUSH
27103: LD_INT 2
27105: PUSH
27106: LD_INT 30
27108: PUSH
27109: LD_INT 6
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: PUSH
27116: LD_INT 30
27118: PUSH
27119: LD_INT 7
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 30
27128: PUSH
27129: LD_INT 8
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: PUSH
27142: EMPTY
27143: LIST
27144: LIST
27145: PPUSH
27146: CALL_OW 72
27150: ST_TO_ADDR
27151: GO 27154
27153: POP
// if i = 1 then
27154: LD_VAR 0 8
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: IFFALSE 27273
// begin tmp := [ ] ;
27164: LD_ADDR_VAR 0 19
27168: PUSH
27169: EMPTY
27170: ST_TO_ADDR
// for j in f do
27171: LD_ADDR_VAR 0 9
27175: PUSH
27176: LD_VAR 0 12
27180: PUSH
27181: FOR_IN
27182: IFFALSE 27255
// if GetBType ( j ) = b_bunker then
27184: LD_VAR 0 9
27188: PPUSH
27189: CALL_OW 266
27193: PUSH
27194: LD_INT 32
27196: EQUAL
27197: IFFALSE 27224
// tmp := Insert ( tmp , 1 , j ) else
27199: LD_ADDR_VAR 0 19
27203: PUSH
27204: LD_VAR 0 19
27208: PPUSH
27209: LD_INT 1
27211: PPUSH
27212: LD_VAR 0 9
27216: PPUSH
27217: CALL_OW 2
27221: ST_TO_ADDR
27222: GO 27253
// tmp := Insert ( tmp , tmp + 1 , j ) ;
27224: LD_ADDR_VAR 0 19
27228: PUSH
27229: LD_VAR 0 19
27233: PPUSH
27234: LD_VAR 0 19
27238: PUSH
27239: LD_INT 1
27241: PLUS
27242: PPUSH
27243: LD_VAR 0 9
27247: PPUSH
27248: CALL_OW 2
27252: ST_TO_ADDR
27253: GO 27181
27255: POP
27256: POP
// if tmp then
27257: LD_VAR 0 19
27261: IFFALSE 27273
// f := tmp ;
27263: LD_ADDR_VAR 0 12
27267: PUSH
27268: LD_VAR 0 19
27272: ST_TO_ADDR
// end ; x := personel [ i ] ;
27273: LD_ADDR_VAR 0 13
27277: PUSH
27278: LD_VAR 0 6
27282: PUSH
27283: LD_VAR 0 8
27287: ARRAY
27288: ST_TO_ADDR
// if x = - 1 then
27289: LD_VAR 0 13
27293: PUSH
27294: LD_INT 1
27296: NEG
27297: EQUAL
27298: IFFALSE 27509
// begin for j in f do
27300: LD_ADDR_VAR 0 9
27304: PUSH
27305: LD_VAR 0 12
27309: PUSH
27310: FOR_IN
27311: IFFALSE 27505
// repeat InitHc ;
27313: CALL_OW 19
// if GetBType ( j ) = b_barracks then
27317: LD_VAR 0 9
27321: PPUSH
27322: CALL_OW 266
27326: PUSH
27327: LD_INT 5
27329: EQUAL
27330: IFFALSE 27400
// begin if UnitsInside ( j ) < 3 then
27332: LD_VAR 0 9
27336: PPUSH
27337: CALL_OW 313
27341: PUSH
27342: LD_INT 3
27344: LESS
27345: IFFALSE 27381
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27347: LD_INT 0
27349: PPUSH
27350: LD_INT 5
27352: PUSH
27353: LD_INT 8
27355: PUSH
27356: LD_INT 9
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: LIST
27363: PUSH
27364: LD_VAR 0 17
27368: ARRAY
27369: PPUSH
27370: LD_VAR 0 4
27374: PPUSH
27375: CALL_OW 380
27379: GO 27398
// PrepareHuman ( false , i , skill ) ;
27381: LD_INT 0
27383: PPUSH
27384: LD_VAR 0 8
27388: PPUSH
27389: LD_VAR 0 4
27393: PPUSH
27394: CALL_OW 380
// end else
27398: GO 27417
// PrepareHuman ( false , i , skill ) ;
27400: LD_INT 0
27402: PPUSH
27403: LD_VAR 0 8
27407: PPUSH
27408: LD_VAR 0 4
27412: PPUSH
27413: CALL_OW 380
// un := CreateHuman ;
27417: LD_ADDR_VAR 0 14
27421: PUSH
27422: CALL_OW 44
27426: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27427: LD_ADDR_VAR 0 7
27431: PUSH
27432: LD_VAR 0 7
27436: PPUSH
27437: LD_INT 1
27439: PPUSH
27440: LD_VAR 0 14
27444: PPUSH
27445: CALL_OW 2
27449: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
27450: LD_VAR 0 14
27454: PPUSH
27455: LD_VAR 0 9
27459: PPUSH
27460: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
27464: LD_VAR 0 9
27468: PPUSH
27469: CALL_OW 313
27473: PUSH
27474: LD_INT 6
27476: EQUAL
27477: IFTRUE 27501
27479: PUSH
27480: LD_VAR 0 9
27484: PPUSH
27485: CALL_OW 266
27489: PUSH
27490: LD_INT 32
27492: PUSH
27493: LD_INT 31
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: IN
27500: OR
27501: IFFALSE 27313
27503: GO 27310
27505: POP
27506: POP
// end else
27507: GO 27893
// for j = 1 to x do
27509: LD_ADDR_VAR 0 9
27513: PUSH
27514: DOUBLE
27515: LD_INT 1
27517: DEC
27518: ST_TO_ADDR
27519: LD_VAR 0 13
27523: PUSH
27524: FOR_TO
27525: IFFALSE 27891
// begin InitHc ;
27527: CALL_OW 19
// if not f then
27531: LD_VAR 0 12
27535: NOT
27536: IFFALSE 27625
// begin PrepareHuman ( false , i , skill ) ;
27538: LD_INT 0
27540: PPUSH
27541: LD_VAR 0 8
27545: PPUSH
27546: LD_VAR 0 4
27550: PPUSH
27551: CALL_OW 380
// un := CreateHuman ;
27555: LD_ADDR_VAR 0 14
27559: PUSH
27560: CALL_OW 44
27564: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27565: LD_ADDR_VAR 0 7
27569: PUSH
27570: LD_VAR 0 7
27574: PPUSH
27575: LD_INT 1
27577: PPUSH
27578: LD_VAR 0 14
27582: PPUSH
27583: CALL_OW 2
27587: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27588: LD_VAR 0 14
27592: PPUSH
27593: LD_VAR 0 1
27597: PPUSH
27598: CALL_OW 250
27602: PPUSH
27603: LD_VAR 0 1
27607: PPUSH
27608: CALL_OW 251
27612: PPUSH
27613: LD_INT 10
27615: PPUSH
27616: LD_INT 0
27618: PPUSH
27619: CALL_OW 50
// continue ;
27623: GO 27524
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
27625: LD_VAR 0 12
27629: PUSH
27630: LD_INT 1
27632: ARRAY
27633: PPUSH
27634: CALL_OW 313
27638: IFFALSE 27666
27640: PUSH
27641: LD_VAR 0 12
27645: PUSH
27646: LD_INT 1
27648: ARRAY
27649: PPUSH
27650: CALL_OW 266
27654: PUSH
27655: LD_INT 32
27657: PUSH
27658: LD_INT 31
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: IN
27665: AND
27666: IFTRUE 27687
27668: PUSH
27669: LD_VAR 0 12
27673: PUSH
27674: LD_INT 1
27676: ARRAY
27677: PPUSH
27678: CALL_OW 313
27682: PUSH
27683: LD_INT 6
27685: EQUAL
27686: OR
27687: IFFALSE 27707
// f := Delete ( f , 1 ) ;
27689: LD_ADDR_VAR 0 12
27693: PUSH
27694: LD_VAR 0 12
27698: PPUSH
27699: LD_INT 1
27701: PPUSH
27702: CALL_OW 3
27706: ST_TO_ADDR
// if not f then
27707: LD_VAR 0 12
27711: NOT
27712: IFFALSE 27730
// begin x := x + 2 ;
27714: LD_ADDR_VAR 0 13
27718: PUSH
27719: LD_VAR 0 13
27723: PUSH
27724: LD_INT 2
27726: PLUS
27727: ST_TO_ADDR
// continue ;
27728: GO 27524
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27730: LD_VAR 0 12
27734: PUSH
27735: LD_INT 1
27737: ARRAY
27738: PPUSH
27739: CALL_OW 266
27743: PUSH
27744: LD_INT 5
27746: EQUAL
27747: IFFALSE 27821
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27749: LD_VAR 0 12
27753: PUSH
27754: LD_INT 1
27756: ARRAY
27757: PPUSH
27758: CALL_OW 313
27762: PUSH
27763: LD_INT 3
27765: LESS
27766: IFFALSE 27802
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27768: LD_INT 0
27770: PPUSH
27771: LD_INT 5
27773: PUSH
27774: LD_INT 8
27776: PUSH
27777: LD_INT 9
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: PUSH
27785: LD_VAR 0 17
27789: ARRAY
27790: PPUSH
27791: LD_VAR 0 4
27795: PPUSH
27796: CALL_OW 380
27800: GO 27819
// PrepareHuman ( false , i , skill ) ;
27802: LD_INT 0
27804: PPUSH
27805: LD_VAR 0 8
27809: PPUSH
27810: LD_VAR 0 4
27814: PPUSH
27815: CALL_OW 380
// end else
27819: GO 27838
// PrepareHuman ( false , i , skill ) ;
27821: LD_INT 0
27823: PPUSH
27824: LD_VAR 0 8
27828: PPUSH
27829: LD_VAR 0 4
27833: PPUSH
27834: CALL_OW 380
// un := CreateHuman ;
27838: LD_ADDR_VAR 0 14
27842: PUSH
27843: CALL_OW 44
27847: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27848: LD_ADDR_VAR 0 7
27852: PUSH
27853: LD_VAR 0 7
27857: PPUSH
27858: LD_INT 1
27860: PPUSH
27861: LD_VAR 0 14
27865: PPUSH
27866: CALL_OW 2
27870: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27871: LD_VAR 0 14
27875: PPUSH
27876: LD_VAR 0 12
27880: PUSH
27881: LD_INT 1
27883: ARRAY
27884: PPUSH
27885: CALL_OW 52
// end ;
27889: GO 27524
27891: POP
27892: POP
// end ;
27893: GO 26824
27895: POP
27896: POP
// result := result ^ buildings ;
27897: LD_ADDR_VAR 0 7
27901: PUSH
27902: LD_VAR 0 7
27906: PUSH
27907: LD_VAR 0 18
27911: ADD
27912: ST_TO_ADDR
// end else
27913: GO 28056
// begin for i = 1 to personel do
27915: LD_ADDR_VAR 0 8
27919: PUSH
27920: DOUBLE
27921: LD_INT 1
27923: DEC
27924: ST_TO_ADDR
27925: LD_VAR 0 6
27929: PUSH
27930: FOR_TO
27931: IFFALSE 28054
// begin if i > 4 then
27933: LD_VAR 0 8
27937: PUSH
27938: LD_INT 4
27940: GREATER
27941: IFFALSE 27945
// break ;
27943: GO 28054
// x := personel [ i ] ;
27945: LD_ADDR_VAR 0 13
27949: PUSH
27950: LD_VAR 0 6
27954: PUSH
27955: LD_VAR 0 8
27959: ARRAY
27960: ST_TO_ADDR
// if x = - 1 then
27961: LD_VAR 0 13
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: EQUAL
27970: IFFALSE 27974
// continue ;
27972: GO 27930
// PrepareHuman ( false , i , skill ) ;
27974: LD_INT 0
27976: PPUSH
27977: LD_VAR 0 8
27981: PPUSH
27982: LD_VAR 0 4
27986: PPUSH
27987: CALL_OW 380
// un := CreateHuman ;
27991: LD_ADDR_VAR 0 14
27995: PUSH
27996: CALL_OW 44
28000: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
28001: LD_VAR 0 14
28005: PPUSH
28006: LD_VAR 0 1
28010: PPUSH
28011: CALL_OW 250
28015: PPUSH
28016: LD_VAR 0 1
28020: PPUSH
28021: CALL_OW 251
28025: PPUSH
28026: LD_INT 10
28028: PPUSH
28029: LD_INT 0
28031: PPUSH
28032: CALL_OW 50
// result := result ^ un ;
28036: LD_ADDR_VAR 0 7
28040: PUSH
28041: LD_VAR 0 7
28045: PUSH
28046: LD_VAR 0 14
28050: ADD
28051: ST_TO_ADDR
// end ;
28052: GO 27930
28054: POP
28055: POP
// end ; end ;
28056: LD_VAR 0 7
28060: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
28061: LD_INT 0
28063: PPUSH
28064: PPUSH
28065: PPUSH
28066: PPUSH
28067: PPUSH
28068: PPUSH
28069: PPUSH
28070: PPUSH
28071: PPUSH
28072: PPUSH
28073: PPUSH
28074: PPUSH
28075: PPUSH
28076: PPUSH
28077: PPUSH
28078: PPUSH
// result := false ;
28079: LD_ADDR_VAR 0 3
28083: PUSH
28084: LD_INT 0
28086: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
28087: LD_VAR 0 1
28091: NOT
28092: IFTRUE 28117
28094: PUSH
28095: LD_VAR 0 1
28099: PPUSH
28100: CALL_OW 266
28104: PUSH
28105: LD_INT 32
28107: PUSH
28108: LD_INT 33
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: IN
28115: NOT
28116: OR
28117: IFFALSE 28121
// exit ;
28119: GO 29256
// nat := GetNation ( tower ) ;
28121: LD_ADDR_VAR 0 12
28125: PUSH
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 248
28135: ST_TO_ADDR
// side := GetSide ( tower ) ;
28136: LD_ADDR_VAR 0 16
28140: PUSH
28141: LD_VAR 0 1
28145: PPUSH
28146: CALL_OW 255
28150: ST_TO_ADDR
// x := GetX ( tower ) ;
28151: LD_ADDR_VAR 0 10
28155: PUSH
28156: LD_VAR 0 1
28160: PPUSH
28161: CALL_OW 250
28165: ST_TO_ADDR
// y := GetY ( tower ) ;
28166: LD_ADDR_VAR 0 11
28170: PUSH
28171: LD_VAR 0 1
28175: PPUSH
28176: CALL_OW 251
28180: ST_TO_ADDR
// if not x or not y then
28181: LD_VAR 0 10
28185: NOT
28186: IFTRUE 28195
28188: PUSH
28189: LD_VAR 0 11
28193: NOT
28194: OR
28195: IFFALSE 28199
// exit ;
28197: GO 29256
// weapon := 0 ;
28199: LD_ADDR_VAR 0 18
28203: PUSH
28204: LD_INT 0
28206: ST_TO_ADDR
// fac_list := [ ] ;
28207: LD_ADDR_VAR 0 17
28211: PUSH
28212: EMPTY
28213: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
28214: LD_ADDR_VAR 0 6
28218: PUSH
28219: LD_VAR 0 1
28223: PPUSH
28224: CALL_OW 274
28228: PPUSH
28229: LD_VAR 0 2
28233: PPUSH
28234: LD_INT 0
28236: PPUSH
28237: CALL 25791 0 3
28241: PPUSH
28242: LD_INT 30
28244: PUSH
28245: LD_INT 3
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PPUSH
28252: CALL_OW 72
28256: ST_TO_ADDR
// if not factories then
28257: LD_VAR 0 6
28261: NOT
28262: IFFALSE 28266
// exit ;
28264: GO 29256
// for i in factories do
28266: LD_ADDR_VAR 0 8
28270: PUSH
28271: LD_VAR 0 6
28275: PUSH
28276: FOR_IN
28277: IFFALSE 28302
// fac_list := fac_list union AvailableWeaponList ( i ) ;
28279: LD_ADDR_VAR 0 17
28283: PUSH
28284: LD_VAR 0 17
28288: PUSH
28289: LD_VAR 0 8
28293: PPUSH
28294: CALL_OW 478
28298: UNION
28299: ST_TO_ADDR
28300: GO 28276
28302: POP
28303: POP
// if not fac_list then
28304: LD_VAR 0 17
28308: NOT
28309: IFFALSE 28313
// exit ;
28311: GO 29256
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
28313: LD_ADDR_VAR 0 5
28317: PUSH
28318: LD_INT 4
28320: PUSH
28321: LD_INT 5
28323: PUSH
28324: LD_INT 9
28326: PUSH
28327: LD_INT 10
28329: PUSH
28330: LD_INT 6
28332: PUSH
28333: LD_INT 7
28335: PUSH
28336: LD_INT 11
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: PUSH
28348: LD_INT 27
28350: PUSH
28351: LD_INT 28
28353: PUSH
28354: LD_INT 26
28356: PUSH
28357: LD_INT 30
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 43
28368: PUSH
28369: LD_INT 44
28371: PUSH
28372: LD_INT 46
28374: PUSH
28375: LD_INT 45
28377: PUSH
28378: LD_INT 47
28380: PUSH
28381: LD_INT 49
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: LIST
28396: PUSH
28397: LD_VAR 0 12
28401: ARRAY
28402: ST_TO_ADDR
// list := list isect fac_list ;
28403: LD_ADDR_VAR 0 5
28407: PUSH
28408: LD_VAR 0 5
28412: PUSH
28413: LD_VAR 0 17
28417: ISECT
28418: ST_TO_ADDR
// if not list then
28419: LD_VAR 0 5
28423: NOT
28424: IFFALSE 28428
// exit ;
28426: GO 29256
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
28428: LD_VAR 0 12
28432: PUSH
28433: LD_INT 3
28435: EQUAL
28436: IFFALSE 28448
28438: PUSH
28439: LD_INT 49
28441: PUSH
28442: LD_VAR 0 5
28446: IN
28447: AND
28448: IFFALSE 28468
28450: PUSH
28451: LD_INT 31
28453: PPUSH
28454: LD_VAR 0 16
28458: PPUSH
28459: CALL_OW 321
28463: PUSH
28464: LD_INT 2
28466: EQUAL
28467: AND
28468: IFFALSE 28528
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
28470: LD_INT 22
28472: PUSH
28473: LD_VAR 0 16
28477: PUSH
28478: EMPTY
28479: LIST
28480: LIST
28481: PUSH
28482: LD_INT 35
28484: PUSH
28485: LD_INT 49
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: LD_INT 91
28494: PUSH
28495: LD_VAR 0 1
28499: PUSH
28500: LD_INT 10
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: PPUSH
28513: CALL_OW 69
28517: NOT
28518: IFFALSE 28528
// weapon := ru_time_lapser ;
28520: LD_ADDR_VAR 0 18
28524: PUSH
28525: LD_INT 49
28527: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
28528: LD_VAR 0 12
28532: PUSH
28533: LD_INT 1
28535: PUSH
28536: LD_INT 2
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: IN
28543: IFFALSE 28567
28545: PUSH
28546: LD_INT 11
28548: PUSH
28549: LD_VAR 0 5
28553: IN
28554: IFTRUE 28566
28556: PUSH
28557: LD_INT 30
28559: PUSH
28560: LD_VAR 0 5
28564: IN
28565: OR
28566: AND
28567: IFFALSE 28587
28569: PUSH
28570: LD_INT 6
28572: PPUSH
28573: LD_VAR 0 16
28577: PPUSH
28578: CALL_OW 321
28582: PUSH
28583: LD_INT 2
28585: EQUAL
28586: AND
28587: IFFALSE 28754
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
28589: LD_INT 22
28591: PUSH
28592: LD_VAR 0 16
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 2
28603: PUSH
28604: LD_INT 35
28606: PUSH
28607: LD_INT 11
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 35
28616: PUSH
28617: LD_INT 30
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 91
28631: PUSH
28632: LD_VAR 0 1
28636: PUSH
28637: LD_INT 18
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: LIST
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: LIST
28649: PPUSH
28650: CALL_OW 69
28654: NOT
28655: IFFALSE 28731
28657: PUSH
28658: LD_INT 22
28660: PUSH
28661: LD_VAR 0 16
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 2
28672: PUSH
28673: LD_INT 30
28675: PUSH
28676: LD_INT 32
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 30
28685: PUSH
28686: LD_INT 33
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: PUSH
28693: EMPTY
28694: LIST
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 91
28700: PUSH
28701: LD_VAR 0 1
28705: PUSH
28706: LD_INT 12
28708: PUSH
28709: EMPTY
28710: LIST
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: PUSH
28719: EMPTY
28720: LIST
28721: PPUSH
28722: CALL_OW 69
28726: PUSH
28727: LD_INT 2
28729: GREATER
28730: AND
28731: IFFALSE 28754
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28733: LD_ADDR_VAR 0 18
28737: PUSH
28738: LD_INT 11
28740: PUSH
28741: LD_INT 30
28743: PUSH
28744: EMPTY
28745: LIST
28746: LIST
28747: PUSH
28748: LD_VAR 0 12
28752: ARRAY
28753: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28754: LD_VAR 0 18
28758: NOT
28759: IFFALSE 28779
28761: PUSH
28762: LD_INT 40
28764: PPUSH
28765: LD_VAR 0 16
28769: PPUSH
28770: CALL_OW 321
28774: PUSH
28775: LD_INT 2
28777: EQUAL
28778: AND
28779: IFFALSE 28815
28781: PUSH
28782: LD_INT 7
28784: PUSH
28785: LD_VAR 0 5
28789: IN
28790: IFTRUE 28802
28792: PUSH
28793: LD_INT 28
28795: PUSH
28796: LD_VAR 0 5
28800: IN
28801: OR
28802: IFTRUE 28814
28804: PUSH
28805: LD_INT 45
28807: PUSH
28808: LD_VAR 0 5
28812: IN
28813: OR
28814: AND
28815: IFFALSE 29069
// begin hex := GetHexInfo ( x , y ) ;
28817: LD_ADDR_VAR 0 4
28821: PUSH
28822: LD_VAR 0 10
28826: PPUSH
28827: LD_VAR 0 11
28831: PPUSH
28832: CALL_OW 546
28836: ST_TO_ADDR
// if hex [ 1 ] then
28837: LD_VAR 0 4
28841: PUSH
28842: LD_INT 1
28844: ARRAY
28845: IFFALSE 28849
// exit ;
28847: GO 29256
// height := hex [ 2 ] ;
28849: LD_ADDR_VAR 0 15
28853: PUSH
28854: LD_VAR 0 4
28858: PUSH
28859: LD_INT 2
28861: ARRAY
28862: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28863: LD_ADDR_VAR 0 14
28867: PUSH
28868: LD_INT 0
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: LD_INT 3
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: ST_TO_ADDR
// for i in tmp do
28886: LD_ADDR_VAR 0 8
28890: PUSH
28891: LD_VAR 0 14
28895: PUSH
28896: FOR_IN
28897: IFFALSE 29067
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28899: LD_ADDR_VAR 0 9
28903: PUSH
28904: LD_VAR 0 10
28908: PPUSH
28909: LD_VAR 0 8
28913: PPUSH
28914: LD_INT 5
28916: PPUSH
28917: CALL_OW 272
28921: PUSH
28922: LD_VAR 0 11
28926: PPUSH
28927: LD_VAR 0 8
28931: PPUSH
28932: LD_INT 5
28934: PPUSH
28935: CALL_OW 273
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28944: LD_VAR 0 9
28948: PUSH
28949: LD_INT 1
28951: ARRAY
28952: PPUSH
28953: LD_VAR 0 9
28957: PUSH
28958: LD_INT 2
28960: ARRAY
28961: PPUSH
28962: CALL_OW 488
28966: IFFALSE 29065
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28968: LD_ADDR_VAR 0 4
28972: PUSH
28973: LD_VAR 0 9
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: LD_VAR 0 9
28986: PUSH
28987: LD_INT 2
28989: ARRAY
28990: PPUSH
28991: CALL_OW 546
28995: ST_TO_ADDR
// if hex [ 1 ] then
28996: LD_VAR 0 4
29000: PUSH
29001: LD_INT 1
29003: ARRAY
29004: IFFALSE 29008
// continue ;
29006: GO 28896
// h := hex [ 2 ] ;
29008: LD_ADDR_VAR 0 13
29012: PUSH
29013: LD_VAR 0 4
29017: PUSH
29018: LD_INT 2
29020: ARRAY
29021: ST_TO_ADDR
// if h + 7 < height then
29022: LD_VAR 0 13
29026: PUSH
29027: LD_INT 7
29029: PLUS
29030: PUSH
29031: LD_VAR 0 15
29035: LESS
29036: IFFALSE 29065
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
29038: LD_ADDR_VAR 0 18
29042: PUSH
29043: LD_INT 7
29045: PUSH
29046: LD_INT 28
29048: PUSH
29049: LD_INT 45
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: PUSH
29057: LD_VAR 0 12
29061: ARRAY
29062: ST_TO_ADDR
// break ;
29063: GO 29067
// end ; end ; end ;
29065: GO 28896
29067: POP
29068: POP
// end ; if not weapon then
29069: LD_VAR 0 18
29073: NOT
29074: IFFALSE 29134
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
29076: LD_ADDR_VAR 0 5
29080: PUSH
29081: LD_VAR 0 5
29085: PUSH
29086: LD_INT 11
29088: PUSH
29089: LD_INT 30
29091: PUSH
29092: LD_INT 49
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: LIST
29099: DIFF
29100: ST_TO_ADDR
// if not list then
29101: LD_VAR 0 5
29105: NOT
29106: IFFALSE 29110
// exit ;
29108: GO 29256
// weapon := list [ rand ( 1 , list ) ] ;
29110: LD_ADDR_VAR 0 18
29114: PUSH
29115: LD_VAR 0 5
29119: PUSH
29120: LD_INT 1
29122: PPUSH
29123: LD_VAR 0 5
29127: PPUSH
29128: CALL_OW 12
29132: ARRAY
29133: ST_TO_ADDR
// end ; if weapon then
29134: LD_VAR 0 18
29138: IFFALSE 29256
// begin tmp := CostOfWeapon ( weapon ) ;
29140: LD_ADDR_VAR 0 14
29144: PUSH
29145: LD_VAR 0 18
29149: PPUSH
29150: CALL_OW 451
29154: ST_TO_ADDR
// j := GetBase ( tower ) ;
29155: LD_ADDR_VAR 0 9
29159: PUSH
29160: LD_VAR 0 1
29164: PPUSH
29165: CALL_OW 274
29169: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
29170: LD_VAR 0 9
29174: PPUSH
29175: LD_INT 1
29177: PPUSH
29178: CALL_OW 275
29182: PUSH
29183: LD_VAR 0 14
29187: PUSH
29188: LD_INT 1
29190: ARRAY
29191: GREATEREQUAL
29192: IFFALSE 29218
29194: PUSH
29195: LD_VAR 0 9
29199: PPUSH
29200: LD_INT 2
29202: PPUSH
29203: CALL_OW 275
29207: PUSH
29208: LD_VAR 0 14
29212: PUSH
29213: LD_INT 2
29215: ARRAY
29216: GREATEREQUAL
29217: AND
29218: IFFALSE 29244
29220: PUSH
29221: LD_VAR 0 9
29225: PPUSH
29226: LD_INT 3
29228: PPUSH
29229: CALL_OW 275
29233: PUSH
29234: LD_VAR 0 14
29238: PUSH
29239: LD_INT 3
29241: ARRAY
29242: GREATEREQUAL
29243: AND
29244: IFFALSE 29256
// result := weapon ;
29246: LD_ADDR_VAR 0 3
29250: PUSH
29251: LD_VAR 0 18
29255: ST_TO_ADDR
// end ; end ;
29256: LD_VAR 0 3
29260: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
// result := true ;
29265: LD_ADDR_VAR 0 3
29269: PUSH
29270: LD_INT 1
29272: ST_TO_ADDR
// if array1 = array2 then
29273: LD_VAR 0 1
29277: PUSH
29278: LD_VAR 0 2
29282: EQUAL
29283: IFFALSE 29343
// begin for i = 1 to array1 do
29285: LD_ADDR_VAR 0 4
29289: PUSH
29290: DOUBLE
29291: LD_INT 1
29293: DEC
29294: ST_TO_ADDR
29295: LD_VAR 0 1
29299: PUSH
29300: FOR_TO
29301: IFFALSE 29339
// if array1 [ i ] <> array2 [ i ] then
29303: LD_VAR 0 1
29307: PUSH
29308: LD_VAR 0 4
29312: ARRAY
29313: PUSH
29314: LD_VAR 0 2
29318: PUSH
29319: LD_VAR 0 4
29323: ARRAY
29324: NONEQUAL
29325: IFFALSE 29337
// begin result := false ;
29327: LD_ADDR_VAR 0 3
29331: PUSH
29332: LD_INT 0
29334: ST_TO_ADDR
// break ;
29335: GO 29339
// end ;
29337: GO 29300
29339: POP
29340: POP
// end else
29341: GO 29351
// result := false ;
29343: LD_ADDR_VAR 0 3
29347: PUSH
29348: LD_INT 0
29350: ST_TO_ADDR
// end ;
29351: LD_VAR 0 3
29355: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
// if not array1 or not array2 then
29360: LD_VAR 0 1
29364: NOT
29365: IFTRUE 29374
29367: PUSH
29368: LD_VAR 0 2
29372: NOT
29373: OR
29374: IFFALSE 29378
// exit ;
29376: GO 29442
// result := true ;
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 1
29385: ST_TO_ADDR
// for i = 1 to array1 do
29386: LD_ADDR_VAR 0 4
29390: PUSH
29391: DOUBLE
29392: LD_INT 1
29394: DEC
29395: ST_TO_ADDR
29396: LD_VAR 0 1
29400: PUSH
29401: FOR_TO
29402: IFFALSE 29440
// if array1 [ i ] <> array2 [ i ] then
29404: LD_VAR 0 1
29408: PUSH
29409: LD_VAR 0 4
29413: ARRAY
29414: PUSH
29415: LD_VAR 0 2
29419: PUSH
29420: LD_VAR 0 4
29424: ARRAY
29425: NONEQUAL
29426: IFFALSE 29438
// begin result := false ;
29428: LD_ADDR_VAR 0 3
29432: PUSH
29433: LD_INT 0
29435: ST_TO_ADDR
// break ;
29436: GO 29440
// end ;
29438: GO 29401
29440: POP
29441: POP
// end ;
29442: LD_VAR 0 3
29446: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
29447: LD_INT 0
29449: PPUSH
29450: PPUSH
29451: PPUSH
// pom := GetBase ( fac ) ;
29452: LD_ADDR_VAR 0 5
29456: PUSH
29457: LD_VAR 0 1
29461: PPUSH
29462: CALL_OW 274
29466: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
29467: LD_ADDR_VAR 0 4
29471: PUSH
29472: LD_VAR 0 2
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: LD_VAR 0 2
29485: PUSH
29486: LD_INT 2
29488: ARRAY
29489: PPUSH
29490: LD_VAR 0 2
29494: PUSH
29495: LD_INT 3
29497: ARRAY
29498: PPUSH
29499: LD_VAR 0 2
29503: PUSH
29504: LD_INT 4
29506: ARRAY
29507: PPUSH
29508: CALL_OW 449
29512: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: LD_VAR 0 5
29522: PPUSH
29523: LD_INT 1
29525: PPUSH
29526: CALL_OW 275
29530: PUSH
29531: LD_VAR 0 4
29535: PUSH
29536: LD_INT 1
29538: ARRAY
29539: GREATEREQUAL
29540: IFFALSE 29566
29542: PUSH
29543: LD_VAR 0 5
29547: PPUSH
29548: LD_INT 2
29550: PPUSH
29551: CALL_OW 275
29555: PUSH
29556: LD_VAR 0 4
29560: PUSH
29561: LD_INT 2
29563: ARRAY
29564: GREATEREQUAL
29565: AND
29566: IFFALSE 29592
29568: PUSH
29569: LD_VAR 0 5
29573: PPUSH
29574: LD_INT 3
29576: PPUSH
29577: CALL_OW 275
29581: PUSH
29582: LD_VAR 0 4
29586: PUSH
29587: LD_INT 3
29589: ARRAY
29590: GREATEREQUAL
29591: AND
29592: ST_TO_ADDR
// end ;
29593: LD_VAR 0 3
29597: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
29598: LD_INT 0
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
// pom := GetBase ( building ) ;
29604: LD_ADDR_VAR 0 3
29608: PUSH
29609: LD_VAR 0 1
29613: PPUSH
29614: CALL_OW 274
29618: ST_TO_ADDR
// if not pom then
29619: LD_VAR 0 3
29623: NOT
29624: IFFALSE 29628
// exit ;
29626: GO 29802
// btype := GetBType ( building ) ;
29628: LD_ADDR_VAR 0 5
29632: PUSH
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 266
29642: ST_TO_ADDR
// if btype = b_armoury then
29643: LD_VAR 0 5
29647: PUSH
29648: LD_INT 4
29650: EQUAL
29651: IFFALSE 29661
// btype := b_barracks ;
29653: LD_ADDR_VAR 0 5
29657: PUSH
29658: LD_INT 5
29660: ST_TO_ADDR
// if btype = b_depot then
29661: LD_VAR 0 5
29665: PUSH
29666: LD_INT 0
29668: EQUAL
29669: IFFALSE 29679
// btype := b_warehouse ;
29671: LD_ADDR_VAR 0 5
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// if btype = b_workshop then
29679: LD_VAR 0 5
29683: PUSH
29684: LD_INT 2
29686: EQUAL
29687: IFFALSE 29697
// btype := b_factory ;
29689: LD_ADDR_VAR 0 5
29693: PUSH
29694: LD_INT 3
29696: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29697: LD_ADDR_VAR 0 4
29701: PUSH
29702: LD_VAR 0 5
29706: PPUSH
29707: LD_VAR 0 1
29711: PPUSH
29712: CALL_OW 248
29716: PPUSH
29717: CALL_OW 450
29721: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29722: LD_ADDR_VAR 0 2
29726: PUSH
29727: LD_VAR 0 3
29731: PPUSH
29732: LD_INT 1
29734: PPUSH
29735: CALL_OW 275
29739: PUSH
29740: LD_VAR 0 4
29744: PUSH
29745: LD_INT 1
29747: ARRAY
29748: GREATEREQUAL
29749: IFFALSE 29775
29751: PUSH
29752: LD_VAR 0 3
29756: PPUSH
29757: LD_INT 2
29759: PPUSH
29760: CALL_OW 275
29764: PUSH
29765: LD_VAR 0 4
29769: PUSH
29770: LD_INT 2
29772: ARRAY
29773: GREATEREQUAL
29774: AND
29775: IFFALSE 29801
29777: PUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: LD_INT 3
29785: PPUSH
29786: CALL_OW 275
29790: PUSH
29791: LD_VAR 0 4
29795: PUSH
29796: LD_INT 3
29798: ARRAY
29799: GREATEREQUAL
29800: AND
29801: ST_TO_ADDR
// end ;
29802: LD_VAR 0 2
29806: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
// pom := GetBase ( building ) ;
29812: LD_ADDR_VAR 0 4
29816: PUSH
29817: LD_VAR 0 1
29821: PPUSH
29822: CALL_OW 274
29826: ST_TO_ADDR
// if not pom then
29827: LD_VAR 0 4
29831: NOT
29832: IFFALSE 29836
// exit ;
29834: GO 29941
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29836: LD_ADDR_VAR 0 5
29840: PUSH
29841: LD_VAR 0 2
29845: PPUSH
29846: LD_VAR 0 1
29850: PPUSH
29851: CALL_OW 248
29855: PPUSH
29856: CALL_OW 450
29860: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29861: LD_ADDR_VAR 0 3
29865: PUSH
29866: LD_VAR 0 4
29870: PPUSH
29871: LD_INT 1
29873: PPUSH
29874: CALL_OW 275
29878: PUSH
29879: LD_VAR 0 5
29883: PUSH
29884: LD_INT 1
29886: ARRAY
29887: GREATEREQUAL
29888: IFFALSE 29914
29890: PUSH
29891: LD_VAR 0 4
29895: PPUSH
29896: LD_INT 2
29898: PPUSH
29899: CALL_OW 275
29903: PUSH
29904: LD_VAR 0 5
29908: PUSH
29909: LD_INT 2
29911: ARRAY
29912: GREATEREQUAL
29913: AND
29914: IFFALSE 29940
29916: PUSH
29917: LD_VAR 0 4
29921: PPUSH
29922: LD_INT 3
29924: PPUSH
29925: CALL_OW 275
29929: PUSH
29930: LD_VAR 0 5
29934: PUSH
29935: LD_INT 3
29937: ARRAY
29938: GREATEREQUAL
29939: AND
29940: ST_TO_ADDR
// end ;
29941: LD_VAR 0 3
29945: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29946: LD_INT 0
29948: PPUSH
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
29953: PPUSH
29954: PPUSH
29955: PPUSH
29956: PPUSH
29957: PPUSH
29958: PPUSH
// result := false ;
29959: LD_ADDR_VAR 0 8
29963: PUSH
29964: LD_INT 0
29966: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29967: LD_VAR 0 5
29971: NOT
29972: IFTRUE 29981
29974: PUSH
29975: LD_VAR 0 1
29979: NOT
29980: OR
29981: IFTRUE 29990
29983: PUSH
29984: LD_VAR 0 2
29988: NOT
29989: OR
29990: IFTRUE 29999
29992: PUSH
29993: LD_VAR 0 3
29997: NOT
29998: OR
29999: IFFALSE 30003
// exit ;
30001: GO 30829
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
30003: LD_ADDR_VAR 0 14
30007: PUSH
30008: LD_VAR 0 1
30012: PPUSH
30013: LD_VAR 0 2
30017: PPUSH
30018: LD_VAR 0 3
30022: PPUSH
30023: LD_VAR 0 4
30027: PPUSH
30028: LD_VAR 0 5
30032: PUSH
30033: LD_INT 1
30035: ARRAY
30036: PPUSH
30037: CALL_OW 248
30041: PPUSH
30042: LD_INT 0
30044: PPUSH
30045: CALL 32110 0 6
30049: ST_TO_ADDR
// if not hexes then
30050: LD_VAR 0 14
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30829
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
30059: LD_ADDR_VAR 0 17
30063: PUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: LD_INT 22
30071: PUSH
30072: LD_VAR 0 13
30076: PPUSH
30077: CALL_OW 255
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: PUSH
30089: LD_INT 30
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: PUSH
30099: LD_INT 30
30101: PUSH
30102: LD_INT 1
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PPUSH
30118: CALL_OW 72
30122: ST_TO_ADDR
// for i = 1 to hexes do
30123: LD_ADDR_VAR 0 9
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_VAR 0 14
30137: PUSH
30138: FOR_TO
30139: IFFALSE 30827
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30141: LD_ADDR_VAR 0 13
30145: PUSH
30146: LD_VAR 0 14
30150: PUSH
30151: LD_VAR 0 9
30155: ARRAY
30156: PUSH
30157: LD_INT 1
30159: ARRAY
30160: PPUSH
30161: LD_VAR 0 14
30165: PUSH
30166: LD_VAR 0 9
30170: ARRAY
30171: PUSH
30172: LD_INT 2
30174: ARRAY
30175: PPUSH
30176: CALL_OW 428
30180: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
30181: LD_VAR 0 14
30185: PUSH
30186: LD_VAR 0 9
30190: ARRAY
30191: PUSH
30192: LD_INT 1
30194: ARRAY
30195: PPUSH
30196: LD_VAR 0 14
30200: PUSH
30201: LD_VAR 0 9
30205: ARRAY
30206: PUSH
30207: LD_INT 2
30209: ARRAY
30210: PPUSH
30211: CALL_OW 351
30215: IFTRUE 30254
30217: PUSH
30218: LD_VAR 0 14
30222: PUSH
30223: LD_VAR 0 9
30227: ARRAY
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: LD_VAR 0 14
30237: PUSH
30238: LD_VAR 0 9
30242: ARRAY
30243: PUSH
30244: LD_INT 2
30246: ARRAY
30247: PPUSH
30248: CALL_OW 488
30252: NOT
30253: OR
30254: IFTRUE 30271
30256: PUSH
30257: LD_VAR 0 13
30261: PPUSH
30262: CALL_OW 247
30266: PUSH
30267: LD_INT 3
30269: EQUAL
30270: OR
30271: IFFALSE 30277
// exit ;
30273: POP
30274: POP
30275: GO 30829
// if not tmp then
30277: LD_VAR 0 13
30281: NOT
30282: IFFALSE 30286
// continue ;
30284: GO 30138
// result := true ;
30286: LD_ADDR_VAR 0 8
30290: PUSH
30291: LD_INT 1
30293: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
30294: LD_VAR 0 6
30298: IFFALSE 30315
30300: PUSH
30301: LD_VAR 0 13
30305: PPUSH
30306: CALL_OW 247
30310: PUSH
30311: LD_INT 2
30313: EQUAL
30314: AND
30315: IFFALSE 30332
30317: PUSH
30318: LD_VAR 0 13
30322: PPUSH
30323: CALL_OW 263
30327: PUSH
30328: LD_INT 1
30330: EQUAL
30331: AND
30332: IFFALSE 30496
// begin if IsDrivenBy ( tmp ) then
30334: LD_VAR 0 13
30338: PPUSH
30339: CALL_OW 311
30343: IFFALSE 30347
// continue ;
30345: GO 30138
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
30347: LD_VAR 0 6
30351: PPUSH
30352: LD_INT 3
30354: PUSH
30355: LD_INT 60
30357: PUSH
30358: EMPTY
30359: LIST
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 3
30367: PUSH
30368: LD_INT 55
30370: PUSH
30371: EMPTY
30372: LIST
30373: PUSH
30374: EMPTY
30375: LIST
30376: LIST
30377: PUSH
30378: EMPTY
30379: LIST
30380: LIST
30381: PPUSH
30382: CALL_OW 72
30386: IFFALSE 30494
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
30388: LD_ADDR_VAR 0 18
30392: PUSH
30393: LD_VAR 0 6
30397: PPUSH
30398: LD_INT 3
30400: PUSH
30401: LD_INT 60
30403: PUSH
30404: EMPTY
30405: LIST
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 3
30413: PUSH
30414: LD_INT 55
30416: PUSH
30417: EMPTY
30418: LIST
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PPUSH
30428: CALL_OW 72
30432: PUSH
30433: LD_INT 1
30435: ARRAY
30436: ST_TO_ADDR
// if IsInUnit ( driver ) then
30437: LD_VAR 0 18
30441: PPUSH
30442: CALL_OW 310
30446: IFFALSE 30457
// ComExit ( driver ) ;
30448: LD_VAR 0 18
30452: PPUSH
30453: CALL 56100 0 1
// AddComEnterUnit ( driver , tmp ) ;
30457: LD_VAR 0 18
30461: PPUSH
30462: LD_VAR 0 13
30466: PPUSH
30467: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
30471: LD_VAR 0 18
30475: PPUSH
30476: LD_VAR 0 7
30480: PPUSH
30481: CALL_OW 173
// AddComExitVehicle ( driver ) ;
30485: LD_VAR 0 18
30489: PPUSH
30490: CALL_OW 181
// end ; continue ;
30494: GO 30138
// end ; if not cleaners or not tmp in cleaners then
30496: LD_VAR 0 6
30500: NOT
30501: IFTRUE 30516
30503: PUSH
30504: LD_VAR 0 13
30508: PUSH
30509: LD_VAR 0 6
30513: IN
30514: NOT
30515: OR
30516: IFFALSE 30825
// begin if dep then
30518: LD_VAR 0 17
30522: IFFALSE 30658
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
30524: LD_ADDR_VAR 0 16
30528: PUSH
30529: LD_VAR 0 17
30533: PUSH
30534: LD_INT 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 250
30542: PPUSH
30543: LD_VAR 0 17
30547: PUSH
30548: LD_INT 1
30550: ARRAY
30551: PPUSH
30552: CALL_OW 254
30556: PPUSH
30557: LD_INT 5
30559: PPUSH
30560: CALL_OW 272
30564: PUSH
30565: LD_VAR 0 17
30569: PUSH
30570: LD_INT 1
30572: ARRAY
30573: PPUSH
30574: CALL_OW 251
30578: PPUSH
30579: LD_VAR 0 17
30583: PUSH
30584: LD_INT 1
30586: ARRAY
30587: PPUSH
30588: CALL_OW 254
30592: PPUSH
30593: LD_INT 5
30595: PPUSH
30596: CALL_OW 273
30600: PUSH
30601: EMPTY
30602: LIST
30603: LIST
30604: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
30605: LD_VAR 0 16
30609: PUSH
30610: LD_INT 1
30612: ARRAY
30613: PPUSH
30614: LD_VAR 0 16
30618: PUSH
30619: LD_INT 2
30621: ARRAY
30622: PPUSH
30623: CALL_OW 488
30627: IFFALSE 30658
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
30629: LD_VAR 0 13
30633: PPUSH
30634: LD_VAR 0 16
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: PPUSH
30643: LD_VAR 0 16
30647: PUSH
30648: LD_INT 2
30650: ARRAY
30651: PPUSH
30652: CALL_OW 111
// continue ;
30656: GO 30138
// end ; end ; r := GetDir ( tmp ) ;
30658: LD_ADDR_VAR 0 15
30662: PUSH
30663: LD_VAR 0 13
30667: PPUSH
30668: CALL_OW 254
30672: ST_TO_ADDR
// if r = 5 then
30673: LD_VAR 0 15
30677: PUSH
30678: LD_INT 5
30680: EQUAL
30681: IFFALSE 30691
// r := 0 ;
30683: LD_ADDR_VAR 0 15
30687: PUSH
30688: LD_INT 0
30690: ST_TO_ADDR
// for j = r to 5 do
30691: LD_ADDR_VAR 0 10
30695: PUSH
30696: DOUBLE
30697: LD_VAR 0 15
30701: DEC
30702: ST_TO_ADDR
30703: LD_INT 5
30705: PUSH
30706: FOR_TO
30707: IFFALSE 30823
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
30709: LD_ADDR_VAR 0 11
30713: PUSH
30714: LD_VAR 0 13
30718: PPUSH
30719: CALL_OW 250
30723: PPUSH
30724: LD_VAR 0 10
30728: PPUSH
30729: LD_INT 2
30731: PPUSH
30732: CALL_OW 272
30736: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
30737: LD_ADDR_VAR 0 12
30741: PUSH
30742: LD_VAR 0 13
30746: PPUSH
30747: CALL_OW 251
30751: PPUSH
30752: LD_VAR 0 10
30756: PPUSH
30757: LD_INT 2
30759: PPUSH
30760: CALL_OW 273
30764: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
30765: LD_VAR 0 11
30769: PPUSH
30770: LD_VAR 0 12
30774: PPUSH
30775: CALL_OW 488
30779: IFFALSE 30798
30781: PUSH
30782: LD_VAR 0 11
30786: PPUSH
30787: LD_VAR 0 12
30791: PPUSH
30792: CALL_OW 428
30796: NOT
30797: AND
30798: IFFALSE 30821
// begin ComMoveXY ( tmp , _x , _y ) ;
30800: LD_VAR 0 13
30804: PPUSH
30805: LD_VAR 0 11
30809: PPUSH
30810: LD_VAR 0 12
30814: PPUSH
30815: CALL_OW 111
// break ;
30819: GO 30823
// end ; end ;
30821: GO 30706
30823: POP
30824: POP
// end ; end ;
30825: GO 30138
30827: POP
30828: POP
// end ;
30829: LD_VAR 0 8
30833: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30834: LD_INT 0
30836: PPUSH
// result := true ;
30837: LD_ADDR_VAR 0 3
30841: PUSH
30842: LD_INT 1
30844: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30845: LD_VAR 0 2
30849: PUSH
30850: LD_INT 24
30852: DOUBLE
30853: EQUAL
30854: IFTRUE 30864
30856: LD_INT 33
30858: DOUBLE
30859: EQUAL
30860: IFTRUE 30864
30862: GO 30889
30864: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30865: LD_ADDR_VAR 0 3
30869: PUSH
30870: LD_INT 32
30872: PPUSH
30873: LD_VAR 0 1
30877: PPUSH
30878: CALL_OW 321
30882: PUSH
30883: LD_INT 2
30885: EQUAL
30886: ST_TO_ADDR
30887: GO 31205
30889: LD_INT 20
30891: DOUBLE
30892: EQUAL
30893: IFTRUE 30897
30895: GO 30922
30897: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30898: LD_ADDR_VAR 0 3
30902: PUSH
30903: LD_INT 6
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 321
30915: PUSH
30916: LD_INT 2
30918: EQUAL
30919: ST_TO_ADDR
30920: GO 31205
30922: LD_INT 22
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30936
30928: LD_INT 36
30930: DOUBLE
30931: EQUAL
30932: IFTRUE 30936
30934: GO 30961
30936: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30937: LD_ADDR_VAR 0 3
30941: PUSH
30942: LD_INT 15
30944: PPUSH
30945: LD_VAR 0 1
30949: PPUSH
30950: CALL_OW 321
30954: PUSH
30955: LD_INT 2
30957: EQUAL
30958: ST_TO_ADDR
30959: GO 31205
30961: LD_INT 30
30963: DOUBLE
30964: EQUAL
30965: IFTRUE 30969
30967: GO 30994
30969: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30970: LD_ADDR_VAR 0 3
30974: PUSH
30975: LD_INT 20
30977: PPUSH
30978: LD_VAR 0 1
30982: PPUSH
30983: CALL_OW 321
30987: PUSH
30988: LD_INT 2
30990: EQUAL
30991: ST_TO_ADDR
30992: GO 31205
30994: LD_INT 28
30996: DOUBLE
30997: EQUAL
30998: IFTRUE 31008
31000: LD_INT 21
31002: DOUBLE
31003: EQUAL
31004: IFTRUE 31008
31006: GO 31033
31008: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
31009: LD_ADDR_VAR 0 3
31013: PUSH
31014: LD_INT 21
31016: PPUSH
31017: LD_VAR 0 1
31021: PPUSH
31022: CALL_OW 321
31026: PUSH
31027: LD_INT 2
31029: EQUAL
31030: ST_TO_ADDR
31031: GO 31205
31033: LD_INT 16
31035: DOUBLE
31036: EQUAL
31037: IFTRUE 31041
31039: GO 31066
31041: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
31042: LD_ADDR_VAR 0 3
31046: PUSH
31047: LD_INT 84
31049: PPUSH
31050: LD_VAR 0 1
31054: PPUSH
31055: CALL_OW 321
31059: PUSH
31060: LD_INT 2
31062: EQUAL
31063: ST_TO_ADDR
31064: GO 31205
31066: LD_INT 19
31068: DOUBLE
31069: EQUAL
31070: IFTRUE 31080
31072: LD_INT 23
31074: DOUBLE
31075: EQUAL
31076: IFTRUE 31080
31078: GO 31105
31080: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
31081: LD_ADDR_VAR 0 3
31085: PUSH
31086: LD_INT 83
31088: PPUSH
31089: LD_VAR 0 1
31093: PPUSH
31094: CALL_OW 321
31098: PUSH
31099: LD_INT 2
31101: EQUAL
31102: ST_TO_ADDR
31103: GO 31205
31105: LD_INT 17
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31138
31113: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_INT 39
31121: PPUSH
31122: LD_VAR 0 1
31126: PPUSH
31127: CALL_OW 321
31131: PUSH
31132: LD_INT 2
31134: EQUAL
31135: ST_TO_ADDR
31136: GO 31205
31138: LD_INT 18
31140: DOUBLE
31141: EQUAL
31142: IFTRUE 31146
31144: GO 31171
31146: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
31147: LD_ADDR_VAR 0 3
31151: PUSH
31152: LD_INT 40
31154: PPUSH
31155: LD_VAR 0 1
31159: PPUSH
31160: CALL_OW 321
31164: PUSH
31165: LD_INT 2
31167: EQUAL
31168: ST_TO_ADDR
31169: GO 31205
31171: LD_INT 27
31173: DOUBLE
31174: EQUAL
31175: IFTRUE 31179
31177: GO 31204
31179: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
31180: LD_ADDR_VAR 0 3
31184: PUSH
31185: LD_INT 35
31187: PPUSH
31188: LD_VAR 0 1
31192: PPUSH
31193: CALL_OW 321
31197: PUSH
31198: LD_INT 2
31200: EQUAL
31201: ST_TO_ADDR
31202: GO 31205
31204: POP
// end ;
31205: LD_VAR 0 3
31209: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
31210: LD_INT 0
31212: PPUSH
31213: PPUSH
31214: PPUSH
31215: PPUSH
31216: PPUSH
31217: PPUSH
31218: PPUSH
31219: PPUSH
31220: PPUSH
31221: PPUSH
31222: PPUSH
// result := false ;
31223: LD_ADDR_VAR 0 6
31227: PUSH
31228: LD_INT 0
31230: ST_TO_ADDR
// if btype = b_depot then
31231: LD_VAR 0 2
31235: PUSH
31236: LD_INT 0
31238: EQUAL
31239: IFFALSE 31251
// begin result := true ;
31241: LD_ADDR_VAR 0 6
31245: PUSH
31246: LD_INT 1
31248: ST_TO_ADDR
// exit ;
31249: GO 32105
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
31251: LD_VAR 0 1
31255: NOT
31256: IFTRUE 31281
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 266
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: IN
31279: NOT
31280: OR
31281: IFTRUE 31290
31283: PUSH
31284: LD_VAR 0 2
31288: NOT
31289: OR
31290: IFTRUE 31326
31292: PUSH
31293: LD_VAR 0 5
31297: PUSH
31298: LD_INT 0
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: LD_INT 2
31306: PUSH
31307: LD_INT 3
31309: PUSH
31310: LD_INT 4
31312: PUSH
31313: LD_INT 5
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: IN
31324: NOT
31325: OR
31326: IFTRUE 31345
31328: PUSH
31329: LD_VAR 0 3
31333: PPUSH
31334: LD_VAR 0 4
31338: PPUSH
31339: CALL_OW 488
31343: NOT
31344: OR
31345: IFFALSE 31349
// exit ;
31347: GO 32105
// side := GetSide ( depot ) ;
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_VAR 0 1
31358: PPUSH
31359: CALL_OW 255
31363: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
31364: LD_VAR 0 9
31368: PPUSH
31369: LD_VAR 0 2
31373: PPUSH
31374: CALL 30834 0 2
31378: NOT
31379: IFFALSE 31383
// exit ;
31381: GO 32105
// pom := GetBase ( depot ) ;
31383: LD_ADDR_VAR 0 10
31387: PUSH
31388: LD_VAR 0 1
31392: PPUSH
31393: CALL_OW 274
31397: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
31398: LD_ADDR_VAR 0 11
31402: PUSH
31403: LD_VAR 0 2
31407: PPUSH
31408: LD_VAR 0 1
31412: PPUSH
31413: CALL_OW 248
31417: PPUSH
31418: CALL_OW 450
31422: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
31423: LD_VAR 0 10
31427: PPUSH
31428: LD_INT 1
31430: PPUSH
31431: CALL_OW 275
31435: PUSH
31436: LD_VAR 0 11
31440: PUSH
31441: LD_INT 1
31443: ARRAY
31444: GREATEREQUAL
31445: IFFALSE 31471
31447: PUSH
31448: LD_VAR 0 10
31452: PPUSH
31453: LD_INT 2
31455: PPUSH
31456: CALL_OW 275
31460: PUSH
31461: LD_VAR 0 11
31465: PUSH
31466: LD_INT 2
31468: ARRAY
31469: GREATEREQUAL
31470: AND
31471: IFFALSE 31497
31473: PUSH
31474: LD_VAR 0 10
31478: PPUSH
31479: LD_INT 3
31481: PPUSH
31482: CALL_OW 275
31486: PUSH
31487: LD_VAR 0 11
31491: PUSH
31492: LD_INT 3
31494: ARRAY
31495: GREATEREQUAL
31496: AND
31497: NOT
31498: IFFALSE 31502
// exit ;
31500: GO 32105
// if GetBType ( depot ) = b_depot then
31502: LD_VAR 0 1
31506: PPUSH
31507: CALL_OW 266
31511: PUSH
31512: LD_INT 0
31514: EQUAL
31515: IFFALSE 31527
// dist := 28 else
31517: LD_ADDR_VAR 0 14
31521: PUSH
31522: LD_INT 28
31524: ST_TO_ADDR
31525: GO 31535
// dist := 36 ;
31527: LD_ADDR_VAR 0 14
31531: PUSH
31532: LD_INT 36
31534: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
31535: LD_VAR 0 1
31539: PPUSH
31540: LD_VAR 0 3
31544: PPUSH
31545: LD_VAR 0 4
31549: PPUSH
31550: CALL_OW 297
31554: PUSH
31555: LD_VAR 0 14
31559: GREATER
31560: IFFALSE 31564
// exit ;
31562: GO 32105
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
31564: LD_ADDR_VAR 0 12
31568: PUSH
31569: LD_VAR 0 2
31573: PPUSH
31574: LD_VAR 0 3
31578: PPUSH
31579: LD_VAR 0 4
31583: PPUSH
31584: LD_VAR 0 5
31588: PPUSH
31589: LD_VAR 0 1
31593: PPUSH
31594: CALL_OW 248
31598: PPUSH
31599: LD_INT 0
31601: PPUSH
31602: CALL 32110 0 6
31606: ST_TO_ADDR
// if not hexes then
31607: LD_VAR 0 12
31611: NOT
31612: IFFALSE 31616
// exit ;
31614: GO 32105
// hex := GetHexInfo ( x , y ) ;
31616: LD_ADDR_VAR 0 15
31620: PUSH
31621: LD_VAR 0 3
31625: PPUSH
31626: LD_VAR 0 4
31630: PPUSH
31631: CALL_OW 546
31635: ST_TO_ADDR
// if hex [ 1 ] then
31636: LD_VAR 0 15
31640: PUSH
31641: LD_INT 1
31643: ARRAY
31644: IFFALSE 31648
// exit ;
31646: GO 32105
// height := hex [ 2 ] ;
31648: LD_ADDR_VAR 0 13
31652: PUSH
31653: LD_VAR 0 15
31657: PUSH
31658: LD_INT 2
31660: ARRAY
31661: ST_TO_ADDR
// for i = 1 to hexes do
31662: LD_ADDR_VAR 0 7
31666: PUSH
31667: DOUBLE
31668: LD_INT 1
31670: DEC
31671: ST_TO_ADDR
31672: LD_VAR 0 12
31676: PUSH
31677: FOR_TO
31678: IFFALSE 32022
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
31680: LD_VAR 0 12
31684: PUSH
31685: LD_VAR 0 7
31689: ARRAY
31690: PUSH
31691: LD_INT 1
31693: ARRAY
31694: PPUSH
31695: LD_VAR 0 12
31699: PUSH
31700: LD_VAR 0 7
31704: ARRAY
31705: PUSH
31706: LD_INT 2
31708: ARRAY
31709: PPUSH
31710: CALL_OW 488
31714: NOT
31715: IFTRUE 31757
31717: PUSH
31718: LD_VAR 0 12
31722: PUSH
31723: LD_VAR 0 7
31727: ARRAY
31728: PUSH
31729: LD_INT 1
31731: ARRAY
31732: PPUSH
31733: LD_VAR 0 12
31737: PUSH
31738: LD_VAR 0 7
31742: ARRAY
31743: PUSH
31744: LD_INT 2
31746: ARRAY
31747: PPUSH
31748: CALL_OW 428
31752: PUSH
31753: LD_INT 0
31755: GREATER
31756: OR
31757: IFTRUE 31795
31759: PUSH
31760: LD_VAR 0 12
31764: PUSH
31765: LD_VAR 0 7
31769: ARRAY
31770: PUSH
31771: LD_INT 1
31773: ARRAY
31774: PPUSH
31775: LD_VAR 0 12
31779: PUSH
31780: LD_VAR 0 7
31784: ARRAY
31785: PUSH
31786: LD_INT 2
31788: ARRAY
31789: PPUSH
31790: CALL_OW 351
31794: OR
31795: IFFALSE 31801
// exit ;
31797: POP
31798: POP
31799: GO 32105
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31801: LD_ADDR_VAR 0 8
31805: PUSH
31806: LD_VAR 0 12
31810: PUSH
31811: LD_VAR 0 7
31815: ARRAY
31816: PUSH
31817: LD_INT 1
31819: ARRAY
31820: PPUSH
31821: LD_VAR 0 12
31825: PUSH
31826: LD_VAR 0 7
31830: ARRAY
31831: PUSH
31832: LD_INT 2
31834: ARRAY
31835: PPUSH
31836: CALL_OW 546
31840: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31841: LD_VAR 0 8
31845: PUSH
31846: LD_INT 1
31848: ARRAY
31849: IFTRUE 31871
31851: PUSH
31852: LD_VAR 0 8
31856: PUSH
31857: LD_INT 2
31859: ARRAY
31860: PUSH
31861: LD_VAR 0 13
31865: PUSH
31866: LD_INT 2
31868: PLUS
31869: GREATER
31870: OR
31871: IFTRUE 31893
31873: PUSH
31874: LD_VAR 0 8
31878: PUSH
31879: LD_INT 2
31881: ARRAY
31882: PUSH
31883: LD_VAR 0 13
31887: PUSH
31888: LD_INT 2
31890: MINUS
31891: LESS
31892: OR
31893: IFTRUE 31961
31895: PUSH
31896: LD_VAR 0 8
31900: PUSH
31901: LD_INT 3
31903: ARRAY
31904: PUSH
31905: LD_INT 0
31907: PUSH
31908: LD_INT 8
31910: PUSH
31911: LD_INT 9
31913: PUSH
31914: LD_INT 10
31916: PUSH
31917: LD_INT 11
31919: PUSH
31920: LD_INT 12
31922: PUSH
31923: LD_INT 13
31925: PUSH
31926: LD_INT 16
31928: PUSH
31929: LD_INT 17
31931: PUSH
31932: LD_INT 18
31934: PUSH
31935: LD_INT 19
31937: PUSH
31938: LD_INT 20
31940: PUSH
31941: LD_INT 21
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: IN
31959: NOT
31960: OR
31961: IFTRUE 31974
31963: PUSH
31964: LD_VAR 0 8
31968: PUSH
31969: LD_INT 5
31971: ARRAY
31972: NOT
31973: OR
31974: IFTRUE 32014
31976: PUSH
31977: LD_VAR 0 8
31981: PUSH
31982: LD_INT 6
31984: ARRAY
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: LD_INT 2
31991: PUSH
31992: LD_INT 7
31994: PUSH
31995: LD_INT 9
31997: PUSH
31998: LD_INT 10
32000: PUSH
32001: LD_INT 11
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: IN
32012: NOT
32013: OR
32014: IFFALSE 32020
// exit ;
32016: POP
32017: POP
32018: GO 32105
// end ;
32020: GO 31677
32022: POP
32023: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
32024: LD_VAR 0 9
32028: PPUSH
32029: LD_VAR 0 3
32033: PPUSH
32034: LD_VAR 0 4
32038: PPUSH
32039: LD_INT 20
32041: PPUSH
32042: CALL 23924 0 4
32046: PUSH
32047: LD_INT 4
32049: ARRAY
32050: IFFALSE 32054
// exit ;
32052: GO 32105
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
32054: LD_VAR 0 2
32058: PUSH
32059: LD_INT 29
32061: PUSH
32062: LD_INT 30
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: IN
32069: IFFALSE 32093
32071: PUSH
32072: LD_VAR 0 3
32076: PPUSH
32077: LD_VAR 0 4
32081: PPUSH
32082: LD_VAR 0 9
32086: PPUSH
32087: CALL_OW 440
32091: NOT
32092: AND
32093: IFFALSE 32097
// exit ;
32095: GO 32105
// result := true ;
32097: LD_ADDR_VAR 0 6
32101: PUSH
32102: LD_INT 1
32104: ST_TO_ADDR
// end ;
32105: LD_VAR 0 6
32109: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
32110: LD_INT 0
32112: PPUSH
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
32123: PPUSH
32124: PPUSH
32125: PPUSH
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
32131: PPUSH
32132: PPUSH
32133: PPUSH
32134: PPUSH
32135: PPUSH
32136: PPUSH
32137: PPUSH
32138: PPUSH
32139: PPUSH
32140: PPUSH
32141: PPUSH
32142: PPUSH
32143: PPUSH
32144: PPUSH
32145: PPUSH
32146: PPUSH
32147: PPUSH
32148: PPUSH
32149: PPUSH
32150: PPUSH
32151: PPUSH
32152: PPUSH
32153: PPUSH
32154: PPUSH
32155: PPUSH
32156: PPUSH
32157: PPUSH
32158: PPUSH
32159: PPUSH
32160: PPUSH
32161: PPUSH
32162: PPUSH
32163: PPUSH
32164: PPUSH
32165: PPUSH
32166: PPUSH
32167: PPUSH
32168: PPUSH
32169: PPUSH
// result = [ ] ;
32170: LD_ADDR_VAR 0 7
32174: PUSH
32175: EMPTY
32176: ST_TO_ADDR
// temp_list = [ ] ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: EMPTY
32183: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
32184: LD_VAR 0 4
32188: PUSH
32189: LD_INT 0
32191: PUSH
32192: LD_INT 1
32194: PUSH
32195: LD_INT 2
32197: PUSH
32198: LD_INT 3
32200: PUSH
32201: LD_INT 4
32203: PUSH
32204: LD_INT 5
32206: PUSH
32207: EMPTY
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: IN
32215: NOT
32216: IFTRUE 32259
32218: PUSH
32219: LD_VAR 0 1
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: EMPTY
32231: LIST
32232: LIST
32233: IN
32234: IFFALSE 32258
32236: PUSH
32237: LD_VAR 0 5
32241: PUSH
32242: LD_INT 1
32244: PUSH
32245: LD_INT 2
32247: PUSH
32248: LD_INT 3
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: LIST
32255: IN
32256: NOT
32257: AND
32258: OR
32259: IFFALSE 32263
// exit ;
32261: GO 50662
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
32263: LD_VAR 0 1
32267: PUSH
32268: LD_INT 6
32270: PUSH
32271: LD_INT 7
32273: PUSH
32274: LD_INT 8
32276: PUSH
32277: LD_INT 13
32279: PUSH
32280: LD_INT 12
32282: PUSH
32283: LD_INT 15
32285: PUSH
32286: LD_INT 11
32288: PUSH
32289: LD_INT 14
32291: PUSH
32292: LD_INT 10
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: IN
32306: IFFALSE 32316
// btype = b_lab ;
32308: LD_ADDR_VAR 0 1
32312: PUSH
32313: LD_INT 6
32315: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
32316: LD_VAR 0 6
32320: PUSH
32321: LD_INT 0
32323: PUSH
32324: LD_INT 1
32326: PUSH
32327: LD_INT 2
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: IN
32335: NOT
32336: IFTRUE 32404
32338: PUSH
32339: LD_VAR 0 1
32343: PUSH
32344: LD_INT 0
32346: PUSH
32347: LD_INT 1
32349: PUSH
32350: LD_INT 2
32352: PUSH
32353: LD_INT 3
32355: PUSH
32356: LD_INT 6
32358: PUSH
32359: LD_INT 36
32361: PUSH
32362: LD_INT 4
32364: PUSH
32365: LD_INT 5
32367: PUSH
32368: LD_INT 31
32370: PUSH
32371: LD_INT 32
32373: PUSH
32374: LD_INT 33
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: IN
32390: NOT
32391: IFFALSE 32403
32393: PUSH
32394: LD_VAR 0 6
32398: PUSH
32399: LD_INT 1
32401: EQUAL
32402: AND
32403: OR
32404: IFTRUE 32436
32406: PUSH
32407: LD_VAR 0 1
32411: PUSH
32412: LD_INT 2
32414: PUSH
32415: LD_INT 3
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: IN
32422: NOT
32423: IFFALSE 32435
32425: PUSH
32426: LD_VAR 0 6
32430: PUSH
32431: LD_INT 2
32433: EQUAL
32434: AND
32435: OR
32436: IFFALSE 32446
// mode = 0 ;
32438: LD_ADDR_VAR 0 6
32442: PUSH
32443: LD_INT 0
32445: ST_TO_ADDR
// case mode of 0 :
32446: LD_VAR 0 6
32450: PUSH
32451: LD_INT 0
32453: DOUBLE
32454: EQUAL
32455: IFTRUE 32459
32457: GO 43912
32459: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
32460: LD_ADDR_VAR 0 11
32464: PUSH
32465: LD_INT 0
32467: PUSH
32468: LD_INT 0
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: NEG
32481: PUSH
32482: EMPTY
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 1
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: PUSH
32499: LD_INT 1
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: PUSH
32506: LD_INT 0
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: PUSH
32516: LD_INT 1
32518: NEG
32519: PUSH
32520: LD_INT 0
32522: PUSH
32523: EMPTY
32524: LIST
32525: LIST
32526: PUSH
32527: LD_INT 1
32529: NEG
32530: PUSH
32531: LD_INT 1
32533: NEG
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 2
32545: NEG
32546: PUSH
32547: EMPTY
32548: LIST
32549: LIST
32550: PUSH
32551: LD_INT 0
32553: PUSH
32554: LD_INT 2
32556: NEG
32557: PUSH
32558: EMPTY
32559: LIST
32560: LIST
32561: PUSH
32562: LD_INT 1
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 1
32575: PUSH
32576: LD_INT 2
32578: PUSH
32579: EMPTY
32580: LIST
32581: LIST
32582: PUSH
32583: LD_INT 0
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: LD_INT 3
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: LD_INT 3
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: LD_INT 2
32630: PUSH
32631: EMPTY
32632: LIST
32633: LIST
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32653: LD_ADDR_VAR 0 12
32657: PUSH
32658: LD_INT 0
32660: PUSH
32661: LD_INT 0
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: NEG
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 1
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: PUSH
32692: LD_INT 1
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: LD_INT 0
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: NEG
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 1
32722: NEG
32723: PUSH
32724: LD_INT 1
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: LD_INT 1
32737: NEG
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: LD_INT 0
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: LD_INT 1
32758: PUSH
32759: EMPTY
32760: LIST
32761: LIST
32762: PUSH
32763: LD_INT 1
32765: NEG
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: LD_INT 2
32776: NEG
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 2
32787: NEG
32788: PUSH
32789: LD_INT 1
32791: NEG
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32849: LD_ADDR_VAR 0 13
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: EMPTY
32861: LIST
32862: LIST
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: LD_INT 1
32869: NEG
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: LD_INT 0
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: EMPTY
32902: LIST
32903: LIST
32904: PUSH
32905: LD_INT 1
32907: NEG
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 1
32930: NEG
32931: PUSH
32932: LD_INT 2
32934: NEG
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: LD_INT 1
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: LD_INT 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 1
32962: PUSH
32963: LD_INT 2
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 2
32972: NEG
32973: PUSH
32974: LD_INT 1
32976: NEG
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 2
32984: NEG
32985: PUSH
32986: LD_INT 2
32988: NEG
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 2
32996: NEG
32997: PUSH
32998: LD_INT 3
33000: NEG
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: LD_INT 3
33008: NEG
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: EMPTY
33015: LIST
33016: LIST
33017: PUSH
33018: LD_INT 3
33020: NEG
33021: PUSH
33022: LD_INT 3
33024: NEG
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
33048: LD_ADDR_VAR 0 14
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: LD_INT 0
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: PUSH
33063: LD_INT 0
33065: PUSH
33066: LD_INT 1
33068: NEG
33069: PUSH
33070: EMPTY
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 0
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: PUSH
33094: LD_INT 0
33096: PUSH
33097: LD_INT 1
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 0
33110: PUSH
33111: EMPTY
33112: LIST
33113: LIST
33114: PUSH
33115: LD_INT 1
33117: NEG
33118: PUSH
33119: LD_INT 1
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: NEG
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 0
33141: PUSH
33142: LD_INT 2
33144: NEG
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: PUSH
33150: LD_INT 1
33152: PUSH
33153: LD_INT 1
33155: NEG
33156: PUSH
33157: EMPTY
33158: LIST
33159: LIST
33160: PUSH
33161: LD_INT 1
33163: PUSH
33164: LD_INT 2
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: PUSH
33171: LD_INT 0
33173: PUSH
33174: LD_INT 2
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: LD_INT 1
33183: NEG
33184: PUSH
33185: LD_INT 1
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 3
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 3
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 2
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: LIST
33230: LIST
33231: LIST
33232: LIST
33233: LIST
33234: LIST
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
33244: LD_ADDR_VAR 0 15
33248: PUSH
33249: LD_INT 0
33251: PUSH
33252: LD_INT 0
33254: PUSH
33255: EMPTY
33256: LIST
33257: LIST
33258: PUSH
33259: LD_INT 0
33261: PUSH
33262: LD_INT 1
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: LD_INT 0
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: LD_INT 1
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: NEG
33314: PUSH
33315: LD_INT 1
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 1
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 0
33339: PUSH
33340: EMPTY
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 1
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 2
33367: NEG
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 1
33393: NEG
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: PUSH
33399: LD_INT 3
33401: PUSH
33402: LD_INT 0
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: LD_INT 1
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: LIST
33424: LIST
33425: LIST
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: LIST
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
33437: LD_ADDR_VAR 0 16
33441: PUSH
33442: LD_INT 0
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 0
33454: PUSH
33455: LD_INT 1
33457: NEG
33458: PUSH
33459: EMPTY
33460: LIST
33461: LIST
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: PUSH
33473: LD_INT 1
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: EMPTY
33480: LIST
33481: LIST
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: LD_INT 1
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 1
33495: NEG
33496: PUSH
33497: LD_INT 0
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: LD_INT 1
33506: NEG
33507: PUSH
33508: LD_INT 1
33510: NEG
33511: PUSH
33512: EMPTY
33513: LIST
33514: LIST
33515: PUSH
33516: LD_INT 1
33518: NEG
33519: PUSH
33520: LD_INT 2
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PUSH
33538: LD_INT 2
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: LD_INT 2
33553: PUSH
33554: EMPTY
33555: LIST
33556: LIST
33557: PUSH
33558: LD_INT 2
33560: NEG
33561: PUSH
33562: LD_INT 1
33564: NEG
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 2
33572: NEG
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: LD_INT 2
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: PUSH
33592: LD_INT 3
33594: PUSH
33595: LD_INT 3
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: PUSH
33602: LD_INT 2
33604: PUSH
33605: LD_INT 3
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33630: LD_ADDR_VAR 0 17
33634: PUSH
33635: LD_INT 0
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 0
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: EMPTY
33653: LIST
33654: LIST
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: LD_INT 0
33661: PUSH
33662: EMPTY
33663: LIST
33664: LIST
33665: PUSH
33666: LD_INT 1
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: EMPTY
33673: LIST
33674: LIST
33675: PUSH
33676: LD_INT 0
33678: PUSH
33679: LD_INT 1
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: LD_INT 0
33692: PUSH
33693: EMPTY
33694: LIST
33695: LIST
33696: PUSH
33697: LD_INT 1
33699: NEG
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: PUSH
33709: LD_INT 1
33711: NEG
33712: PUSH
33713: LD_INT 2
33715: NEG
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 0
33723: PUSH
33724: LD_INT 2
33726: NEG
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: LD_INT 1
33737: NEG
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: PUSH
33743: LD_INT 2
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: PUSH
33753: LD_INT 2
33755: PUSH
33756: LD_INT 1
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: PUSH
33766: LD_INT 2
33768: PUSH
33769: EMPTY
33770: LIST
33771: LIST
33772: PUSH
33773: LD_INT 1
33775: PUSH
33776: LD_INT 2
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 0
33785: PUSH
33786: LD_INT 2
33788: PUSH
33789: EMPTY
33790: LIST
33791: LIST
33792: PUSH
33793: LD_INT 1
33795: NEG
33796: PUSH
33797: LD_INT 1
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 2
33806: NEG
33807: PUSH
33808: LD_INT 0
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 2
33817: NEG
33818: PUSH
33819: LD_INT 1
33821: NEG
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: EMPTY
33836: LIST
33837: LIST
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33860: LD_ADDR_VAR 0 18
33864: PUSH
33865: LD_INT 0
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 0
33877: PUSH
33878: LD_INT 1
33880: NEG
33881: PUSH
33882: EMPTY
33883: LIST
33884: LIST
33885: PUSH
33886: LD_INT 1
33888: PUSH
33889: LD_INT 0
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: PUSH
33896: LD_INT 1
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: EMPTY
33913: LIST
33914: LIST
33915: PUSH
33916: LD_INT 1
33918: NEG
33919: PUSH
33920: LD_INT 0
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 1
33933: NEG
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: NEG
33942: PUSH
33943: LD_INT 2
33945: NEG
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 0
33953: PUSH
33954: LD_INT 2
33956: NEG
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 1
33964: PUSH
33965: LD_INT 1
33967: NEG
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: PUSH
33973: LD_INT 2
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 1
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: PUSH
33996: LD_INT 2
33998: PUSH
33999: EMPTY
34000: LIST
34001: LIST
34002: PUSH
34003: LD_INT 1
34005: PUSH
34006: LD_INT 2
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: PUSH
34013: LD_INT 0
34015: PUSH
34016: LD_INT 2
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 1
34025: NEG
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: PUSH
34034: LD_INT 2
34036: NEG
34037: PUSH
34038: LD_INT 0
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: LD_INT 2
34047: NEG
34048: PUSH
34049: LD_INT 1
34051: NEG
34052: PUSH
34053: EMPTY
34054: LIST
34055: LIST
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: LD_INT 2
34063: NEG
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34090: LD_ADDR_VAR 0 19
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 1
34118: PUSH
34119: LD_INT 0
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 1
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 1
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 0
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: NEG
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 1
34171: NEG
34172: PUSH
34173: LD_INT 2
34175: NEG
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 0
34183: PUSH
34184: LD_INT 2
34186: NEG
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: LD_INT 1
34194: PUSH
34195: LD_INT 1
34197: NEG
34198: PUSH
34199: EMPTY
34200: LIST
34201: LIST
34202: PUSH
34203: LD_INT 2
34205: PUSH
34206: LD_INT 0
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 2
34215: PUSH
34216: LD_INT 1
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: PUSH
34226: LD_INT 2
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 0
34245: PUSH
34246: LD_INT 2
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: LD_INT 1
34255: NEG
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 2
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: LD_INT 2
34293: NEG
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34320: LD_ADDR_VAR 0 20
34324: PUSH
34325: LD_INT 0
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 0
34337: PUSH
34338: LD_INT 1
34340: NEG
34341: PUSH
34342: EMPTY
34343: LIST
34344: LIST
34345: PUSH
34346: LD_INT 1
34348: PUSH
34349: LD_INT 0
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PUSH
34356: LD_INT 1
34358: PUSH
34359: LD_INT 1
34361: PUSH
34362: EMPTY
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: LD_INT 1
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: LIST
34385: LIST
34386: PUSH
34387: LD_INT 1
34389: NEG
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: PUSH
34399: LD_INT 1
34401: NEG
34402: PUSH
34403: LD_INT 2
34405: NEG
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 0
34413: PUSH
34414: LD_INT 2
34416: NEG
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 1
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: EMPTY
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 2
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 1
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: PUSH
34456: LD_INT 2
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 1
34465: PUSH
34466: LD_INT 2
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: PUSH
34473: LD_INT 0
34475: PUSH
34476: LD_INT 2
34478: PUSH
34479: EMPTY
34480: LIST
34481: LIST
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: PUSH
34487: LD_INT 1
34489: PUSH
34490: EMPTY
34491: LIST
34492: LIST
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: LD_INT 1
34511: NEG
34512: PUSH
34513: EMPTY
34514: LIST
34515: LIST
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: LD_INT 2
34523: NEG
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34550: LD_ADDR_VAR 0 21
34554: PUSH
34555: LD_INT 0
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 0
34567: PUSH
34568: LD_INT 1
34570: NEG
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: PUSH
34576: LD_INT 1
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: PUSH
34586: LD_INT 1
34588: PUSH
34589: LD_INT 1
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 0
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 1
34608: NEG
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 1
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: LD_INT 1
34631: NEG
34632: PUSH
34633: LD_INT 2
34635: NEG
34636: PUSH
34637: EMPTY
34638: LIST
34639: LIST
34640: PUSH
34641: LD_INT 0
34643: PUSH
34644: LD_INT 2
34646: NEG
34647: PUSH
34648: EMPTY
34649: LIST
34650: LIST
34651: PUSH
34652: LD_INT 1
34654: PUSH
34655: LD_INT 1
34657: NEG
34658: PUSH
34659: EMPTY
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: EMPTY
34670: LIST
34671: LIST
34672: PUSH
34673: LD_INT 2
34675: PUSH
34676: LD_INT 1
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 2
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 2
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: EMPTY
34710: LIST
34711: LIST
34712: PUSH
34713: LD_INT 1
34715: NEG
34716: PUSH
34717: LD_INT 1
34719: PUSH
34720: EMPTY
34721: LIST
34722: LIST
34723: PUSH
34724: LD_INT 2
34726: NEG
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: LD_INT 2
34737: NEG
34738: PUSH
34739: LD_INT 1
34741: NEG
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: PUSH
34747: LD_INT 2
34749: NEG
34750: PUSH
34751: LD_INT 2
34753: NEG
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: PUSH
34759: EMPTY
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34780: LD_ADDR_VAR 0 22
34784: PUSH
34785: LD_INT 0
34787: PUSH
34788: LD_INT 0
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 0
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 1
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 0
34828: PUSH
34829: LD_INT 1
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: NEG
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 1
34849: NEG
34850: PUSH
34851: LD_INT 1
34853: NEG
34854: PUSH
34855: EMPTY
34856: LIST
34857: LIST
34858: PUSH
34859: LD_INT 1
34861: NEG
34862: PUSH
34863: LD_INT 2
34865: NEG
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 2
34876: NEG
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 1
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: EMPTY
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 2
34905: PUSH
34906: LD_INT 1
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 2
34915: PUSH
34916: LD_INT 2
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 2
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 2
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 1
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 2
34956: NEG
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 2
34967: NEG
34968: PUSH
34969: LD_INT 1
34971: NEG
34972: PUSH
34973: EMPTY
34974: LIST
34975: LIST
34976: PUSH
34977: LD_INT 2
34979: NEG
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
35010: LD_ADDR_VAR 0 23
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 0
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 1
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: EMPTY
35043: LIST
35044: LIST
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 1
35051: PUSH
35052: EMPTY
35053: LIST
35054: LIST
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 1
35061: PUSH
35062: EMPTY
35063: LIST
35064: LIST
35065: PUSH
35066: LD_INT 1
35068: NEG
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: EMPTY
35086: LIST
35087: LIST
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: LD_INT 2
35095: NEG
35096: PUSH
35097: EMPTY
35098: LIST
35099: LIST
35100: PUSH
35101: LD_INT 0
35103: PUSH
35104: LD_INT 2
35106: NEG
35107: PUSH
35108: EMPTY
35109: LIST
35110: LIST
35111: PUSH
35112: LD_INT 1
35114: PUSH
35115: LD_INT 1
35117: NEG
35118: PUSH
35119: EMPTY
35120: LIST
35121: LIST
35122: PUSH
35123: LD_INT 2
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: EMPTY
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 2
35135: PUSH
35136: LD_INT 1
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 2
35145: PUSH
35146: LD_INT 2
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 2
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 1
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 2
35186: NEG
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: PUSH
35195: LD_INT 2
35197: NEG
35198: PUSH
35199: LD_INT 1
35201: NEG
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: LD_INT 2
35209: NEG
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 2
35221: NEG
35222: PUSH
35223: LD_INT 3
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 3
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 2
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
35290: LD_ADDR_VAR 0 24
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 0
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: LD_INT 1
35310: NEG
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: LD_INT 0
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 1
35328: PUSH
35329: LD_INT 1
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: PUSH
35336: LD_INT 0
35338: PUSH
35339: LD_INT 1
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: PUSH
35346: LD_INT 1
35348: NEG
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 1
35363: NEG
35364: PUSH
35365: EMPTY
35366: LIST
35367: LIST
35368: PUSH
35369: LD_INT 1
35371: NEG
35372: PUSH
35373: LD_INT 2
35375: NEG
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 1
35394: PUSH
35395: LD_INT 1
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 0
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: PUSH
35416: LD_INT 1
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 2
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 2
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 2
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 1
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: LD_INT 0
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: NEG
35490: PUSH
35491: LD_INT 2
35493: NEG
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 1
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 3
35523: PUSH
35524: LD_INT 1
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 3
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: EMPTY
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
35566: LD_ADDR_VAR 0 25
35570: PUSH
35571: LD_INT 0
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PUSH
35581: LD_INT 0
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 1
35594: PUSH
35595: LD_INT 0
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: LD_INT 1
35604: PUSH
35605: LD_INT 1
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 0
35614: PUSH
35615: LD_INT 1
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: NEG
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: NEG
35648: PUSH
35649: LD_INT 2
35651: NEG
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 1
35670: PUSH
35671: LD_INT 1
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 2
35681: PUSH
35682: LD_INT 0
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: LD_INT 1
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 2
35701: PUSH
35702: LD_INT 2
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 2
35742: NEG
35743: PUSH
35744: LD_INT 0
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 1
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 2
35765: NEG
35766: PUSH
35767: LD_INT 2
35769: NEG
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 3
35777: PUSH
35778: LD_INT 1
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 3
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: LD_INT 2
35797: PUSH
35798: LD_INT 3
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35840: LD_ADDR_VAR 0 26
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 0
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: LD_INT 1
35860: NEG
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 1
35868: PUSH
35869: LD_INT 0
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: LD_INT 1
35878: PUSH
35879: LD_INT 1
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 1
35898: NEG
35899: PUSH
35900: LD_INT 0
35902: PUSH
35903: EMPTY
35904: LIST
35905: LIST
35906: PUSH
35907: LD_INT 1
35909: NEG
35910: PUSH
35911: LD_INT 1
35913: NEG
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 2
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 0
35933: PUSH
35934: LD_INT 2
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: PUSH
35945: LD_INT 1
35947: NEG
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 0
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 1
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 2
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 2
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 2
36016: NEG
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 2
36027: NEG
36028: PUSH
36029: LD_INT 1
36031: NEG
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 2
36039: NEG
36040: PUSH
36041: LD_INT 2
36043: NEG
36044: PUSH
36045: EMPTY
36046: LIST
36047: LIST
36048: PUSH
36049: LD_INT 2
36051: PUSH
36052: LD_INT 3
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: PUSH
36059: LD_INT 1
36061: PUSH
36062: LD_INT 3
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: PUSH
36080: LD_INT 2
36082: NEG
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: EMPTY
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36116: LD_ADDR_VAR 0 27
36120: PUSH
36121: LD_INT 0
36123: PUSH
36124: LD_INT 0
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 1
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 0
36164: PUSH
36165: LD_INT 1
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 1
36174: NEG
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: LD_INT 1
36189: NEG
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 1
36197: NEG
36198: PUSH
36199: LD_INT 2
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: EMPTY
36226: LIST
36227: LIST
36228: PUSH
36229: LD_INT 2
36231: PUSH
36232: LD_INT 0
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: LD_INT 2
36251: PUSH
36252: LD_INT 2
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 2
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: PUSH
36283: LD_INT 1
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 2
36292: NEG
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: NEG
36304: PUSH
36305: LD_INT 1
36307: NEG
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 2
36315: NEG
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 1
36327: NEG
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 2
36338: NEG
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 3
36349: NEG
36350: PUSH
36351: LD_INT 1
36353: NEG
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: PUSH
36359: LD_INT 3
36361: NEG
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
36396: LD_ADDR_VAR 0 28
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: PUSH
36435: LD_INT 1
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 0
36444: PUSH
36445: LD_INT 1
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 1
36454: NEG
36455: PUSH
36456: LD_INT 0
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: LD_INT 1
36469: NEG
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 0
36489: PUSH
36490: LD_INT 2
36492: NEG
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: LD_INT 1
36503: NEG
36504: PUSH
36505: EMPTY
36506: LIST
36507: LIST
36508: PUSH
36509: LD_INT 2
36511: PUSH
36512: LD_INT 0
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 1
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 2
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 2
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 2
36572: NEG
36573: PUSH
36574: LD_INT 0
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 2
36583: NEG
36584: PUSH
36585: LD_INT 1
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 2
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 3
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 1
36619: NEG
36620: PUSH
36621: LD_INT 3
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 3
36631: NEG
36632: PUSH
36633: LD_INT 1
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 3
36643: NEG
36644: PUSH
36645: LD_INT 2
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: EMPTY
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36678: LD_ADDR_VAR 0 29
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: LD_INT 0
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: LD_INT 0
36695: PUSH
36696: LD_INT 1
36698: NEG
36699: PUSH
36700: EMPTY
36701: LIST
36702: LIST
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: LD_INT 0
36709: PUSH
36710: EMPTY
36711: LIST
36712: LIST
36713: PUSH
36714: LD_INT 1
36716: PUSH
36717: LD_INT 1
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 0
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: NEG
36737: PUSH
36738: LD_INT 0
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 1
36747: NEG
36748: PUSH
36749: LD_INT 1
36751: NEG
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 2
36763: NEG
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 0
36771: PUSH
36772: LD_INT 2
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: LD_INT 1
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 2
36793: PUSH
36794: LD_INT 0
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: LD_INT 2
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: LD_INT 1
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 2
36844: NEG
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: LD_INT 2
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 2
36868: NEG
36869: PUSH
36870: LD_INT 3
36872: NEG
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 1
36883: NEG
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 3
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 1
36901: PUSH
36902: LD_INT 3
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: PUSH
36909: LD_INT 1
36911: NEG
36912: PUSH
36913: LD_INT 2
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 3
36922: NEG
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: EMPTY
36929: LIST
36930: LIST
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36957: LD_ADDR_VAR 0 30
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 1
36977: NEG
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: LD_INT 1
37008: PUSH
37009: EMPTY
37010: LIST
37011: LIST
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: PUSH
37028: LD_INT 1
37030: NEG
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: PUSH
37036: LD_INT 1
37038: NEG
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PUSH
37070: LD_INT 2
37072: PUSH
37073: LD_INT 0
37075: PUSH
37076: EMPTY
37077: LIST
37078: LIST
37079: PUSH
37080: LD_INT 2
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: LD_INT 2
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 1
37112: NEG
37113: PUSH
37114: LD_INT 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 2
37123: NEG
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 2
37134: NEG
37135: PUSH
37136: LD_INT 1
37138: NEG
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: LD_INT 3
37150: NEG
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 1
37158: PUSH
37159: LD_INT 2
37161: NEG
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: PUSH
37167: LD_INT 3
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 3
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: NEG
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: EMPTY
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 3
37200: NEG
37201: PUSH
37202: LD_INT 1
37204: NEG
37205: PUSH
37206: EMPTY
37207: LIST
37208: LIST
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: LIST
37216: LIST
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37235: LD_ADDR_VAR 0 31
37239: PUSH
37240: LD_INT 0
37242: PUSH
37243: LD_INT 0
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: PUSH
37250: LD_INT 0
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: LD_INT 0
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: PUSH
37271: LD_INT 1
37273: PUSH
37274: LD_INT 1
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 0
37283: PUSH
37284: LD_INT 1
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: NEG
37294: PUSH
37295: LD_INT 0
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 1
37304: NEG
37305: PUSH
37306: LD_INT 1
37308: NEG
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 1
37316: NEG
37317: PUSH
37318: LD_INT 2
37320: NEG
37321: PUSH
37322: EMPTY
37323: LIST
37324: LIST
37325: PUSH
37326: LD_INT 1
37328: PUSH
37329: LD_INT 1
37331: NEG
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: PUSH
37337: LD_INT 2
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 2
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 2
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: EMPTY
37364: LIST
37365: LIST
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: LD_INT 2
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 0
37379: PUSH
37380: LD_INT 2
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 2
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: LD_INT 2
37416: NEG
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: LD_INT 3
37428: NEG
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 2
37436: PUSH
37437: LD_INT 1
37439: NEG
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 3
37447: PUSH
37448: LD_INT 1
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: LD_INT 1
37457: PUSH
37458: LD_INT 3
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 3
37478: NEG
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: LIST
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37513: LD_ADDR_VAR 0 32
37517: PUSH
37518: LD_INT 0
37520: PUSH
37521: LD_INT 0
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: PUSH
37528: LD_INT 0
37530: PUSH
37531: LD_INT 1
37533: NEG
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 1
37541: PUSH
37542: LD_INT 0
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: PUSH
37552: LD_INT 1
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 1
37586: NEG
37587: PUSH
37588: EMPTY
37589: LIST
37590: LIST
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: LD_INT 2
37598: NEG
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 1
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 2
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 1
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 0
37658: PUSH
37659: LD_INT 2
37661: PUSH
37662: EMPTY
37663: LIST
37664: LIST
37665: PUSH
37666: LD_INT 1
37668: NEG
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 2
37679: NEG
37680: PUSH
37681: LD_INT 0
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 2
37690: NEG
37691: PUSH
37692: LD_INT 1
37694: NEG
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: PUSH
37700: LD_INT 1
37702: NEG
37703: PUSH
37704: LD_INT 3
37706: NEG
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: LD_INT 2
37717: NEG
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 3
37725: PUSH
37726: LD_INT 2
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: LD_INT 2
37735: PUSH
37736: LD_INT 3
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 3
37756: NEG
37757: PUSH
37758: LD_INT 1
37760: NEG
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
37791: LD_ADDR_VAR 0 33
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: LD_INT 0
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 0
37808: PUSH
37809: LD_INT 1
37811: NEG
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: LD_INT 0
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PUSH
37837: LD_INT 0
37839: PUSH
37840: LD_INT 1
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: NEG
37873: PUSH
37874: LD_INT 2
37876: NEG
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 1
37887: NEG
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: EMPTY
37900: LIST
37901: LIST
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: LD_INT 1
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: PUSH
37916: LD_INT 2
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 0
37925: PUSH
37926: LD_INT 2
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 1
37935: NEG
37936: PUSH
37937: LD_INT 1
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 0
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: LD_INT 1
37961: NEG
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 2
37969: NEG
37970: PUSH
37971: LD_INT 2
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: NEG
37982: PUSH
37983: LD_INT 3
37985: NEG
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 1
37996: NEG
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 1
38014: PUSH
38015: LD_INT 3
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 1
38024: NEG
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 3
38035: NEG
38036: PUSH
38037: LD_INT 2
38039: NEG
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38070: LD_ADDR_VAR 0 34
38074: PUSH
38075: LD_INT 0
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 0
38087: PUSH
38088: LD_INT 1
38090: NEG
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 1
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 1
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: NEG
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: LD_INT 2
38155: NEG
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: LD_INT 2
38166: NEG
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: LD_INT 1
38177: NEG
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: PUSH
38186: LD_INT 1
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 2
38195: PUSH
38196: LD_INT 2
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 2
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: PUSH
38213: LD_INT 1
38215: NEG
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: NEG
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: NEG
38250: PUSH
38251: LD_INT 2
38253: NEG
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 3
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 2
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: LD_INT 3
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38350: LD_ADDR_VAR 0 35
38354: PUSH
38355: LD_INT 0
38357: PUSH
38358: LD_INT 0
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: LD_INT 1
38370: NEG
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 1
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: LD_INT 1
38401: PUSH
38402: EMPTY
38403: LIST
38404: LIST
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: LD_INT 0
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 1
38419: NEG
38420: PUSH
38421: LD_INT 1
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 2
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: LD_INT 1
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38462: LD_ADDR_VAR 0 36
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 1
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: PUSH
38491: LD_INT 0
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 1
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: LD_INT 1
38513: PUSH
38514: EMPTY
38515: LIST
38516: LIST
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 1
38535: NEG
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 2
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38574: LD_ADDR_VAR 0 37
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: LD_INT 0
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 1
38594: NEG
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: PUSH
38600: LD_INT 1
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 0
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: NEG
38644: PUSH
38645: LD_INT 1
38647: NEG
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 1
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: LIST
38684: LIST
38685: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
38686: LD_ADDR_VAR 0 38
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 0
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: PUSH
38712: LD_INT 1
38714: PUSH
38715: LD_INT 0
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 1
38724: PUSH
38725: LD_INT 1
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 1
38744: NEG
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: NEG
38778: PUSH
38779: LD_INT 1
38781: NEG
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
38798: LD_ADDR_VAR 0 39
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 2
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 2
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38910: LD_ADDR_VAR 0 40
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: PUSH
38939: LD_INT 0
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 0
38958: PUSH
38959: LD_INT 1
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: LD_INT 0
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: LD_INT 1
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: LIST
39018: LIST
39019: LIST
39020: LIST
39021: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39022: LD_ADDR_VAR 0 41
39026: PUSH
39027: LD_INT 0
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 1
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: PUSH
39061: LD_INT 1
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 0
39070: PUSH
39071: LD_INT 1
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: NEG
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: LD_INT 1
39091: NEG
39092: PUSH
39093: LD_INT 1
39095: NEG
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: LD_INT 2
39107: NEG
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 0
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 2
39136: PUSH
39137: LD_INT 1
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 2
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: PUSH
39157: LD_INT 2
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: NEG
39167: PUSH
39168: LD_INT 1
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: PUSH
39175: LD_INT 2
39177: NEG
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: LD_INT 3
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 3
39245: PUSH
39246: LD_INT 1
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 3
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 3
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 3
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 2
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 3
39296: NEG
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 3
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 3
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 3
39331: NEG
39332: PUSH
39333: LD_INT 3
39335: NEG
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39372: LD_ADDR_VAR 0 42
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 0
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PUSH
39398: LD_INT 1
39400: PUSH
39401: LD_INT 0
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: LD_INT 1
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: LD_INT 1
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 1
39430: NEG
39431: PUSH
39432: LD_INT 0
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 1
39441: NEG
39442: PUSH
39443: LD_INT 1
39445: NEG
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 1
39453: NEG
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 1
39476: PUSH
39477: LD_INT 1
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 2
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: LD_INT 2
39497: PUSH
39498: LD_INT 2
39500: PUSH
39501: EMPTY
39502: LIST
39503: LIST
39504: PUSH
39505: LD_INT 1
39507: PUSH
39508: LD_INT 2
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: LD_INT 2
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 1
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: NEG
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 2
39550: NEG
39551: PUSH
39552: LD_INT 2
39554: NEG
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 2
39562: NEG
39563: PUSH
39564: LD_INT 3
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 3
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 3
39608: PUSH
39609: LD_INT 2
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 3
39618: PUSH
39619: LD_INT 3
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: LD_INT 3
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: LD_INT 3
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: LD_INT 3
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: NEG
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 3
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: NEG
39682: PUSH
39683: LD_INT 3
39685: NEG
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39722: LD_ADDR_VAR 0 43
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: LD_INT 1
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 1
39780: NEG
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 2
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 1
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: LD_INT 2
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 0
39867: PUSH
39868: LD_INT 2
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 1
39877: NEG
39878: PUSH
39879: LD_INT 1
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 2
39888: NEG
39889: PUSH
39890: LD_INT 0
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 3
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 0
39923: PUSH
39924: LD_INT 3
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 2
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 3
39956: PUSH
39957: LD_INT 0
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 3
39966: PUSH
39967: LD_INT 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 3
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: LD_INT 2
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: LD_INT 3
40018: NEG
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 3
40029: NEG
40030: PUSH
40031: LD_INT 1
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40070: LD_ADDR_VAR 0 44
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: PUSH
40099: LD_INT 0
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 1
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 1
40139: NEG
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 1
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 2
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 2
40184: PUSH
40185: LD_INT 1
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: LD_INT 2
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 1
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 1
40214: NEG
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 2
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 2
40260: NEG
40261: PUSH
40262: LD_INT 3
40264: NEG
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 2
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 3
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 3
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 3
40303: PUSH
40304: LD_INT 2
40306: PUSH
40307: EMPTY
40308: LIST
40309: LIST
40310: PUSH
40311: LD_INT 3
40313: PUSH
40314: LD_INT 3
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 2
40333: NEG
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 3
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 3
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 3
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 3
40379: NEG
40380: PUSH
40381: LD_INT 3
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40420: LD_ADDR_VAR 0 45
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 0
40430: PUSH
40431: EMPTY
40432: LIST
40433: LIST
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 0
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: NEG
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: NEG
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 1
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 2
40598: NEG
40599: PUSH
40600: LD_INT 2
40602: NEG
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 2
40610: NEG
40611: PUSH
40612: LD_INT 3
40614: NEG
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: LD_INT 3
40626: NEG
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 3
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 1
40645: PUSH
40646: LD_INT 2
40648: NEG
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 3
40656: PUSH
40657: LD_INT 2
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 3
40666: PUSH
40667: LD_INT 3
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: PUSH
40677: LD_INT 3
40679: PUSH
40680: EMPTY
40681: LIST
40682: LIST
40683: PUSH
40684: LD_INT 1
40686: PUSH
40687: LD_INT 3
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: LD_INT 3
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: LD_INT 2
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 3
40717: NEG
40718: PUSH
40719: LD_INT 2
40721: NEG
40722: PUSH
40723: EMPTY
40724: LIST
40725: LIST
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: LD_INT 3
40733: NEG
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: LIST
40761: LIST
40762: LIST
40763: LIST
40764: LIST
40765: LIST
40766: LIST
40767: LIST
40768: LIST
40769: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40770: LD_ADDR_VAR 0 46
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 0
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: NEG
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 1
40839: NEG
40840: PUSH
40841: LD_INT 1
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 1
40851: NEG
40852: PUSH
40853: LD_INT 2
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 0
40863: PUSH
40864: LD_INT 2
40866: NEG
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 2
40936: NEG
40937: PUSH
40938: LD_INT 0
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 3
40963: NEG
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 3
40974: NEG
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: LD_INT 2
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 3
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 3
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: LD_INT 3
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: LD_INT 2
41048: PUSH
41049: EMPTY
41050: LIST
41051: LIST
41052: PUSH
41053: LD_INT 2
41055: NEG
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 3
41066: NEG
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41118: LD_ADDR_VAR 0 47
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 1
41138: NEG
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: LD_INT 1
41169: PUSH
41170: EMPTY
41171: LIST
41172: LIST
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: LD_INT 0
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: LD_INT 2
41203: NEG
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 0
41211: PUSH
41212: LD_INT 2
41214: NEG
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 1
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: NEG
41246: PUSH
41247: LD_INT 2
41249: NEG
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
41269: LD_ADDR_VAR 0 48
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: LD_INT 0
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 0
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: EMPTY
41302: LIST
41303: LIST
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: LD_INT 1
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 0
41317: PUSH
41318: LD_INT 1
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 0
41331: PUSH
41332: EMPTY
41333: LIST
41334: LIST
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 2
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
41416: LD_ADDR_VAR 0 49
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: PUSH
41539: LD_INT 2
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
41560: LD_ADDR_VAR 0 50
41564: PUSH
41565: LD_INT 0
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: NEG
41581: PUSH
41582: EMPTY
41583: LIST
41584: LIST
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 0
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 2
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: LD_INT 2
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 1
41661: PUSH
41662: LD_INT 2
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: LIST
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: LIST
41699: LIST
41700: LIST
41701: LIST
41702: LIST
41703: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
41704: LD_ADDR_VAR 0 51
41708: PUSH
41709: LD_INT 0
41711: PUSH
41712: LD_INT 0
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 1
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 1
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 1
41773: NEG
41774: PUSH
41775: LD_INT 1
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 2
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 2
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 2
41827: NEG
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: LIST
41849: LIST
41850: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41851: LD_ADDR_VAR 0 52
41855: PUSH
41856: LD_INT 0
41858: PUSH
41859: LD_INT 0
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: NEG
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: LD_INT 2
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 1
41944: NEG
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 2
41955: NEG
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 2
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: NEG
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 2
41978: NEG
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42002: LD_ADDR_VAR 0 53
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42232: LD_ADDR_VAR 0 54
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 0
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 1
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 1
42301: NEG
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 2
42317: NEG
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: PUSH
42323: LD_INT 0
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: LD_INT 0
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 2
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 0
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 2
42408: NEG
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: NEG
42420: PUSH
42421: LD_INT 1
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 2
42435: NEG
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42462: LD_ADDR_VAR 0 55
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: LD_INT 0
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 0
42479: PUSH
42480: LD_INT 1
42482: NEG
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 1
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 0
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 2
42547: NEG
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: LD_INT 2
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 2
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 2
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 2
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: EMPTY
42602: LIST
42603: LIST
42604: PUSH
42605: LD_INT 1
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: NEG
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42692: LD_ADDR_VAR 0 56
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: LD_INT 0
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 0
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 0
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 1
42761: NEG
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 2
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 2
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 1
42799: NEG
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 0
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 2
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 2
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 2
42868: NEG
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 2
42879: NEG
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 2
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42922: LD_ADDR_VAR 0 57
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: LD_INT 0
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 0
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: LD_INT 1
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: LD_INT 1
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: NEG
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 2
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 0
43015: PUSH
43016: LD_INT 2
43018: NEG
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 2
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 2
43047: PUSH
43048: LD_INT 1
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 2
43057: PUSH
43058: LD_INT 2
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 2
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 2
43098: NEG
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 2
43109: NEG
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 2
43121: NEG
43122: PUSH
43123: LD_INT 2
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43152: LD_ADDR_VAR 0 58
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 0
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: NEG
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 1
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 0
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 0
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 2
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 0
43245: PUSH
43246: LD_INT 2
43248: NEG
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 1
43256: PUSH
43257: LD_INT 1
43259: NEG
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 2
43277: PUSH
43278: LD_INT 1
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 2
43287: PUSH
43288: LD_INT 2
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 2
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 0
43307: PUSH
43308: LD_INT 2
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: EMPTY
43323: LIST
43324: LIST
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 2
43351: NEG
43352: PUSH
43353: LD_INT 2
43355: NEG
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43382: LD_ADDR_VAR 0 59
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: LD_INT 1
43402: NEG
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 0
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: NEG
43441: PUSH
43442: LD_INT 0
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 1
43451: NEG
43452: PUSH
43453: LD_INT 1
43455: NEG
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43470: LD_ADDR_VAR 0 60
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 0
43487: PUSH
43488: LD_INT 1
43490: NEG
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: LD_INT 1
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 0
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 1
43528: NEG
43529: PUSH
43530: LD_INT 0
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 1
43539: NEG
43540: PUSH
43541: LD_INT 1
43543: NEG
43544: PUSH
43545: EMPTY
43546: LIST
43547: LIST
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43558: LD_ADDR_VAR 0 61
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 0
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 1
43616: NEG
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43646: LD_ADDR_VAR 0 62
43650: PUSH
43651: LD_INT 0
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: NEG
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 1
43715: NEG
43716: PUSH
43717: LD_INT 1
43719: NEG
43720: PUSH
43721: EMPTY
43722: LIST
43723: LIST
43724: PUSH
43725: EMPTY
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43734: LD_ADDR_VAR 0 63
43738: PUSH
43739: LD_INT 0
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43822: LD_ADDR_VAR 0 64
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 0
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: LD_INT 1
43842: NEG
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 1
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: LD_INT 1
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: LD_INT 1
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: NEG
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: EMPTY
43886: LIST
43887: LIST
43888: PUSH
43889: LD_INT 1
43891: NEG
43892: PUSH
43893: LD_INT 1
43895: NEG
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// end ; 1 :
43910: GO 49807
43912: LD_INT 1
43914: DOUBLE
43915: EQUAL
43916: IFTRUE 43920
43918: GO 46543
43920: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43921: LD_ADDR_VAR 0 11
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: LD_INT 3
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 0
43940: PUSH
43941: LD_INT 3
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: LD_INT 2
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43965: LD_ADDR_VAR 0 12
43969: PUSH
43970: LD_INT 2
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 3
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44006: LD_ADDR_VAR 0 13
44010: PUSH
44011: LD_INT 3
44013: PUSH
44014: LD_INT 2
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 3
44023: PUSH
44024: LD_INT 3
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 2
44033: PUSH
44034: LD_INT 3
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: LIST
44045: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44046: LD_ADDR_VAR 0 14
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 3
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: LD_INT 2
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: LIST
44086: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44087: LD_ADDR_VAR 0 15
44091: PUSH
44092: LD_INT 2
44094: NEG
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: PUSH
44103: LD_INT 3
44105: NEG
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 3
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: LIST
44130: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44131: LD_ADDR_VAR 0 16
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 3
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 3
44162: NEG
44163: PUSH
44164: LD_INT 3
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44177: LD_ADDR_VAR 0 17
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: LD_INT 3
44188: NEG
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44221: LD_ADDR_VAR 0 18
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: LD_INT 1
44231: NEG
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 3
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44262: LD_ADDR_VAR 0 19
44266: PUSH
44267: LD_INT 3
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 3
44279: PUSH
44280: LD_INT 3
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 3
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44302: LD_ADDR_VAR 0 20
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 3
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 3
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 2
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: EMPTY
44339: LIST
44340: LIST
44341: LIST
44342: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44343: LD_ADDR_VAR 0 21
44347: PUSH
44348: LD_INT 2
44350: NEG
44351: PUSH
44352: LD_INT 1
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 3
44361: NEG
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 3
44372: NEG
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: EMPTY
44383: LIST
44384: LIST
44385: LIST
44386: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44387: LD_ADDR_VAR 0 22
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 3
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 3
44406: NEG
44407: PUSH
44408: LD_INT 2
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 3
44418: NEG
44419: PUSH
44420: LD_INT 3
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
44433: LD_ADDR_VAR 0 23
44437: PUSH
44438: LD_INT 0
44440: PUSH
44441: LD_INT 3
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 1
44451: NEG
44452: PUSH
44453: LD_INT 4
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 3
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: LIST
44476: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
44477: LD_ADDR_VAR 0 24
44481: PUSH
44482: LD_INT 3
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: PUSH
44499: EMPTY
44500: LIST
44501: LIST
44502: PUSH
44503: LD_INT 4
44505: PUSH
44506: LD_INT 1
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
44518: LD_ADDR_VAR 0 25
44522: PUSH
44523: LD_INT 3
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 4
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 3
44545: PUSH
44546: LD_INT 4
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
44558: LD_ADDR_VAR 0 26
44562: PUSH
44563: LD_INT 0
44565: PUSH
44566: LD_INT 3
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 1
44575: PUSH
44576: LD_INT 4
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 3
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: LIST
44598: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
44599: LD_ADDR_VAR 0 27
44603: PUSH
44604: LD_INT 3
44606: NEG
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 3
44617: NEG
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 4
44628: NEG
44629: PUSH
44630: LD_INT 1
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: LIST
44642: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
44643: LD_ADDR_VAR 0 28
44647: PUSH
44648: LD_INT 3
44650: NEG
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 3
44662: NEG
44663: PUSH
44664: LD_INT 4
44666: NEG
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 4
44674: NEG
44675: PUSH
44676: LD_INT 3
44678: NEG
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
44689: LD_ADDR_VAR 0 29
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 3
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 0
44708: PUSH
44709: LD_INT 3
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: LD_INT 4
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 4
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 1
44753: PUSH
44754: LD_INT 3
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: LD_INT 1
44764: NEG
44765: PUSH
44766: LD_INT 5
44768: NEG
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 0
44776: PUSH
44777: LD_INT 5
44779: NEG
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 4
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 6
44802: NEG
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 6
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 5
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44844: LD_ADDR_VAR 0 30
44848: PUSH
44849: LD_INT 2
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 3
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: LD_INT 1
44885: NEG
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 4
44893: PUSH
44894: LD_INT 0
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 4
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 4
44913: PUSH
44914: LD_INT 1
44916: NEG
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 5
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 5
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 5
44944: PUSH
44945: LD_INT 1
44947: NEG
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 6
44955: PUSH
44956: LD_INT 0
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 6
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44987: LD_ADDR_VAR 0 31
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: LD_INT 3
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 4
45024: PUSH
45025: LD_INT 3
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 4
45034: PUSH
45035: LD_INT 4
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 4
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 5
45054: PUSH
45055: LD_INT 4
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 5
45064: PUSH
45065: LD_INT 5
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 4
45074: PUSH
45075: LD_INT 5
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 6
45084: PUSH
45085: LD_INT 5
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 6
45094: PUSH
45095: LD_INT 6
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 5
45104: PUSH
45105: LD_INT 6
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
45126: LD_ADDR_VAR 0 32
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 3
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 3
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 2
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: LD_INT 4
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: LD_INT 4
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: NEG
45185: PUSH
45186: LD_INT 3
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: LD_INT 5
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: LD_INT 5
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: NEG
45216: PUSH
45217: LD_INT 4
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: LD_INT 6
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 6
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: LD_INT 5
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: EMPTY
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: LIST
45264: LIST
45265: LIST
45266: LIST
45267: LIST
45268: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
45269: LD_ADDR_VAR 0 33
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 3
45287: NEG
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 3
45310: NEG
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 4
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 4
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 4
45344: NEG
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 5
45355: NEG
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 5
45366: NEG
45367: PUSH
45368: LD_INT 1
45370: NEG
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 5
45378: NEG
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 6
45389: NEG
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 6
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
45424: LD_ADDR_VAR 0 34
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 3
45467: NEG
45468: PUSH
45469: LD_INT 4
45471: NEG
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 4
45479: NEG
45480: PUSH
45481: LD_INT 3
45483: NEG
45484: PUSH
45485: EMPTY
45486: LIST
45487: LIST
45488: PUSH
45489: LD_INT 4
45491: NEG
45492: PUSH
45493: LD_INT 4
45495: NEG
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 4
45503: NEG
45504: PUSH
45505: LD_INT 5
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 5
45515: NEG
45516: PUSH
45517: LD_INT 4
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 5
45527: NEG
45528: PUSH
45529: LD_INT 5
45531: NEG
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 5
45539: NEG
45540: PUSH
45541: LD_INT 6
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 6
45551: NEG
45552: PUSH
45553: LD_INT 5
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 6
45563: NEG
45564: PUSH
45565: LD_INT 6
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
45587: LD_ADDR_VAR 0 41
45591: PUSH
45592: LD_INT 0
45594: PUSH
45595: LD_INT 2
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 1
45605: NEG
45606: PUSH
45607: LD_INT 3
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: LD_INT 2
45620: NEG
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: LIST
45630: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
45631: LD_ADDR_VAR 0 42
45635: PUSH
45636: LD_INT 2
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 2
45648: PUSH
45649: LD_INT 1
45651: NEG
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
45672: LD_ADDR_VAR 0 43
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 2
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 3
45689: PUSH
45690: LD_INT 2
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: PUSH
45700: LD_INT 3
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
45712: LD_ADDR_VAR 0 44
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 2
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: LD_INT 3
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: LD_INT 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: LIST
45752: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45753: LD_ADDR_VAR 0 45
45757: PUSH
45758: LD_INT 2
45760: NEG
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PUSH
45780: LD_INT 3
45782: NEG
45783: PUSH
45784: LD_INT 1
45786: NEG
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: LIST
45796: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
45797: LD_ADDR_VAR 0 46
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: LD_INT 3
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 3
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45843: LD_ADDR_VAR 0 47
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 3
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: NEG
45863: PUSH
45864: LD_INT 3
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45876: LD_ADDR_VAR 0 48
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 2
45894: PUSH
45895: LD_INT 1
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45907: LD_ADDR_VAR 0 49
45911: PUSH
45912: LD_INT 3
45914: PUSH
45915: LD_INT 1
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45936: LD_ADDR_VAR 0 50
45940: PUSH
45941: LD_INT 2
45943: PUSH
45944: LD_INT 3
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45965: LD_ADDR_VAR 0 51
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 2
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45996: LD_ADDR_VAR 0 52
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: LD_INT 1
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46029: LD_ADDR_VAR 0 53
46033: PUSH
46034: LD_INT 1
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 0
46048: PUSH
46049: LD_INT 3
46051: NEG
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46073: LD_ADDR_VAR 0 54
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 3
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: LIST
46113: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46114: LD_ADDR_VAR 0 55
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: LD_INT 2
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: LIST
46153: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46154: LD_ADDR_VAR 0 56
46158: PUSH
46159: LD_INT 1
46161: PUSH
46162: LD_INT 3
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: LD_INT 3
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: EMPTY
46191: LIST
46192: LIST
46193: LIST
46194: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46195: LD_ADDR_VAR 0 57
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 3
46213: NEG
46214: PUSH
46215: LD_INT 0
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 3
46224: NEG
46225: PUSH
46226: LD_INT 1
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: LIST
46238: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46239: LD_ADDR_VAR 0 58
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 3
46258: NEG
46259: PUSH
46260: LD_INT 2
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: LD_INT 3
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
46285: LD_ADDR_VAR 0 59
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 2
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 1
46315: PUSH
46316: LD_INT 1
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: LIST
46328: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46329: LD_ADDR_VAR 0 60
46333: PUSH
46334: LD_INT 1
46336: PUSH
46337: LD_INT 1
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46370: LD_ADDR_VAR 0 61
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: LIST
46409: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46410: LD_ADDR_VAR 0 62
46414: PUSH
46415: LD_INT 1
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 2
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46451: LD_ADDR_VAR 0 63
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: LIST
46494: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46495: LD_ADDR_VAR 0 64
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 2
46526: NEG
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: ST_TO_ADDR
// end ; 2 :
46541: GO 49807
46543: LD_INT 2
46545: DOUBLE
46546: EQUAL
46547: IFTRUE 46551
46549: GO 49806
46551: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
46552: LD_ADDR_VAR 0 29
46556: PUSH
46557: LD_INT 4
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 4
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 5
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 5
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 4
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 3
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 3
46631: PUSH
46632: LD_INT 2
46634: NEG
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 5
46642: PUSH
46643: LD_INT 2
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 3
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 3
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 4
46672: PUSH
46673: LD_INT 3
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: LD_INT 4
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 4
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 2
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 2
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 4
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 3
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: LD_INT 5
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 0
46782: PUSH
46783: LD_INT 5
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: NEG
46793: PUSH
46794: LD_INT 4
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: LD_INT 5
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 2
46824: NEG
46825: PUSH
46826: LD_INT 3
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 3
46835: NEG
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: NEG
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 2
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 2
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 3
46880: NEG
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 4
46891: NEG
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 4
46902: NEG
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 4
46914: NEG
46915: PUSH
46916: LD_INT 2
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 2
46926: NEG
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 4
46937: NEG
46938: PUSH
46939: LD_INT 4
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 4
46949: NEG
46950: PUSH
46951: LD_INT 5
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: NEG
46962: PUSH
46963: LD_INT 4
46965: NEG
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 3
46977: NEG
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 4
46985: NEG
46986: PUSH
46987: LD_INT 3
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 5
46997: NEG
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 5
47009: NEG
47010: PUSH
47011: LD_INT 5
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: LD_INT 5
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 5
47033: NEG
47034: PUSH
47035: LD_INT 3
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
47090: LD_ADDR_VAR 0 30
47094: PUSH
47095: LD_INT 4
47097: PUSH
47098: LD_INT 4
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 4
47107: PUSH
47108: LD_INT 3
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 5
47117: PUSH
47118: LD_INT 4
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 5
47127: PUSH
47128: LD_INT 5
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 4
47137: PUSH
47138: LD_INT 5
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 3
47147: PUSH
47148: LD_INT 4
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: LD_INT 3
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 5
47167: PUSH
47168: LD_INT 3
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: LD_INT 5
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 3
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 0
47197: PUSH
47198: LD_INT 2
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 3
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: PUSH
47218: LD_INT 4
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 0
47227: PUSH
47228: LD_INT 4
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 1
47237: NEG
47238: PUSH
47239: LD_INT 3
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: LD_INT 4
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 4
47280: NEG
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 4
47291: NEG
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 3
47303: NEG
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 4
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 5
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 5
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 5
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 3
47382: NEG
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 4
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 2
47406: NEG
47407: PUSH
47408: LD_INT 3
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 2
47418: NEG
47419: PUSH
47420: LD_INT 2
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: NEG
47431: PUSH
47432: LD_INT 2
47434: NEG
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: PUSH
47440: LD_INT 4
47442: NEG
47443: PUSH
47444: LD_INT 3
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 4
47454: NEG
47455: PUSH
47456: LD_INT 4
47458: NEG
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: LD_INT 4
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 4
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 4
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 0
47501: PUSH
47502: LD_INT 5
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: LD_INT 3
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: LD_INT 3
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: LD_INT 4
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 1
47557: NEG
47558: PUSH
47559: LD_INT 5
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 2
47569: PUSH
47570: LD_INT 3
47572: NEG
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 2
47580: NEG
47581: PUSH
47582: LD_INT 5
47584: NEG
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: LIST
47602: LIST
47603: LIST
47604: LIST
47605: LIST
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
47637: LD_ADDR_VAR 0 31
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 4
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: LD_INT 4
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: LD_INT 5
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: LD_INT 5
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: NEG
47695: PUSH
47696: LD_INT 4
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: NEG
47706: PUSH
47707: LD_INT 3
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: LD_INT 5
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 2
47726: NEG
47727: PUSH
47728: LD_INT 3
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: NEG
47749: PUSH
47750: LD_INT 1
47752: NEG
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 2
47760: NEG
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 4
47793: NEG
47794: PUSH
47795: LD_INT 0
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 4
47804: NEG
47805: PUSH
47806: LD_INT 1
47808: NEG
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 4
47816: NEG
47817: PUSH
47818: LD_INT 2
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: NEG
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 4
47839: NEG
47840: PUSH
47841: LD_INT 4
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 4
47851: NEG
47852: PUSH
47853: LD_INT 5
47855: NEG
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 3
47863: NEG
47864: PUSH
47865: LD_INT 4
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 3
47875: NEG
47876: PUSH
47877: LD_INT 3
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 4
47887: NEG
47888: PUSH
47889: LD_INT 3
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 5
47899: NEG
47900: PUSH
47901: LD_INT 4
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 5
47911: NEG
47912: PUSH
47913: LD_INT 5
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 3
47923: NEG
47924: PUSH
47925: LD_INT 5
47927: NEG
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: LD_INT 5
47935: NEG
47936: PUSH
47937: LD_INT 3
47939: NEG
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 0
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 4
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 3
47972: NEG
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 1
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 3
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: LD_INT 4
48018: NEG
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: LD_INT 2
48029: NEG
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 2
48037: NEG
48038: PUSH
48039: LD_INT 4
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 4
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 4
48059: PUSH
48060: LD_INT 1
48062: NEG
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 5
48070: PUSH
48071: LD_INT 0
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 5
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 4
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 3
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 3
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 5
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: LIST
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
48187: LD_ADDR_VAR 0 32
48191: PUSH
48192: LD_INT 4
48194: NEG
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 4
48205: NEG
48206: PUSH
48207: LD_INT 1
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 5
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 5
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 5
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 3
48296: NEG
48297: PUSH
48298: LD_INT 3
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: NEG
48309: PUSH
48310: LD_INT 4
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: NEG
48321: PUSH
48322: LD_INT 3
48324: NEG
48325: PUSH
48326: EMPTY
48327: LIST
48328: LIST
48329: PUSH
48330: LD_INT 2
48332: NEG
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 3
48344: NEG
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 4
48356: NEG
48357: PUSH
48358: LD_INT 3
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 4
48368: NEG
48369: PUSH
48370: LD_INT 4
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: LD_INT 4
48384: NEG
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 4
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 4
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 5
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 4
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 1
48437: PUSH
48438: LD_INT 3
48440: NEG
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 3
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: NEG
48460: PUSH
48461: LD_INT 4
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 5
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 3
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: LD_INT 5
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 3
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 3
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 4
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 4
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 3
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 0
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 2
48581: NEG
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 4
48589: PUSH
48590: LD_INT 2
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: LD_INT 4
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 4
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 5
48619: PUSH
48620: LD_INT 4
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 5
48629: PUSH
48630: LD_INT 5
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 4
48639: PUSH
48640: LD_INT 5
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 4
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 3
48659: PUSH
48660: LD_INT 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 5
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: LD_INT 5
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: LIST
48718: LIST
48719: LIST
48720: LIST
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
48734: LD_ADDR_VAR 0 33
48738: PUSH
48739: LD_INT 4
48741: NEG
48742: PUSH
48743: LD_INT 4
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 4
48753: NEG
48754: PUSH
48755: LD_INT 5
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 3
48765: NEG
48766: PUSH
48767: LD_INT 4
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 3
48777: NEG
48778: PUSH
48779: LD_INT 3
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 4
48789: NEG
48790: PUSH
48791: LD_INT 3
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 5
48801: NEG
48802: PUSH
48803: LD_INT 4
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 5
48813: NEG
48814: PUSH
48815: LD_INT 5
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: LD_INT 5
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 5
48837: NEG
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 0
48849: PUSH
48850: LD_INT 3
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 4
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 3
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 3
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: LD_INT 4
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: PUSH
48929: LD_INT 2
48931: NEG
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: NEG
48940: PUSH
48941: LD_INT 4
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 4
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 4
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 5
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 5
48982: PUSH
48983: LD_INT 1
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 4
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 3
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 5
49034: PUSH
49035: LD_INT 2
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: LD_INT 3
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 3
49054: PUSH
49055: LD_INT 2
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 4
49064: PUSH
49065: LD_INT 3
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 4
49074: PUSH
49075: LD_INT 4
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 3
49084: PUSH
49085: LD_INT 4
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 2
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 4
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: LD_INT 4
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: LD_INT 4
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 3
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: PUSH
49155: LD_INT 4
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 5
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 5
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: LD_INT 4
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: LD_INT 3
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 5
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: NEG
49217: PUSH
49218: LD_INT 3
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
49272: LD_ADDR_VAR 0 34
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 4
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 5
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 4
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 3
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 0
49323: PUSH
49324: LD_INT 3
49326: NEG
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 4
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: LD_INT 5
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 3
49361: NEG
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 2
49369: NEG
49370: PUSH
49371: LD_INT 5
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 3
49391: PUSH
49392: LD_INT 1
49394: NEG
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 4
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 4
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 3
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: LD_INT 0
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 2
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 4
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 4
49474: PUSH
49475: LD_INT 4
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 4
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 5
49494: PUSH
49495: LD_INT 4
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 5
49504: PUSH
49505: LD_INT 5
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 4
49514: PUSH
49515: LD_INT 5
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 3
49524: PUSH
49525: LD_INT 4
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: PUSH
49535: LD_INT 3
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 5
49544: PUSH
49545: LD_INT 3
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 3
49554: PUSH
49555: LD_INT 5
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 0
49564: PUSH
49565: LD_INT 3
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 0
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 3
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 4
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 4
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 3
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 2
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 4
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 2
49646: NEG
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 4
49657: NEG
49658: PUSH
49659: LD_INT 0
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 4
49668: NEG
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 3
49680: NEG
49681: PUSH
49682: LD_INT 0
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 3
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 4
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 5
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 5
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 5
49736: NEG
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 3
49748: NEG
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
// end ; end ;
49804: GO 49807
49806: POP
// case btype of b_depot , b_warehouse :
49807: LD_VAR 0 1
49811: PUSH
49812: LD_INT 0
49814: DOUBLE
49815: EQUAL
49816: IFTRUE 49826
49818: LD_INT 1
49820: DOUBLE
49821: EQUAL
49822: IFTRUE 49826
49824: GO 50027
49826: POP
// case nation of nation_american :
49827: LD_VAR 0 5
49831: PUSH
49832: LD_INT 1
49834: DOUBLE
49835: EQUAL
49836: IFTRUE 49840
49838: GO 49896
49840: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49841: LD_ADDR_VAR 0 9
49845: PUSH
49846: LD_VAR 0 11
49850: PUSH
49851: LD_VAR 0 12
49855: PUSH
49856: LD_VAR 0 13
49860: PUSH
49861: LD_VAR 0 14
49865: PUSH
49866: LD_VAR 0 15
49870: PUSH
49871: LD_VAR 0 16
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: PUSH
49884: LD_VAR 0 4
49888: PUSH
49889: LD_INT 1
49891: PLUS
49892: ARRAY
49893: ST_TO_ADDR
49894: GO 50025
49896: LD_INT 2
49898: DOUBLE
49899: EQUAL
49900: IFTRUE 49904
49902: GO 49960
49904: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49905: LD_ADDR_VAR 0 9
49909: PUSH
49910: LD_VAR 0 17
49914: PUSH
49915: LD_VAR 0 18
49919: PUSH
49920: LD_VAR 0 19
49924: PUSH
49925: LD_VAR 0 20
49929: PUSH
49930: LD_VAR 0 21
49934: PUSH
49935: LD_VAR 0 22
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: PUSH
49948: LD_VAR 0 4
49952: PUSH
49953: LD_INT 1
49955: PLUS
49956: ARRAY
49957: ST_TO_ADDR
49958: GO 50025
49960: LD_INT 3
49962: DOUBLE
49963: EQUAL
49964: IFTRUE 49968
49966: GO 50024
49968: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49969: LD_ADDR_VAR 0 9
49973: PUSH
49974: LD_VAR 0 23
49978: PUSH
49979: LD_VAR 0 24
49983: PUSH
49984: LD_VAR 0 25
49988: PUSH
49989: LD_VAR 0 26
49993: PUSH
49994: LD_VAR 0 27
49998: PUSH
49999: LD_VAR 0 28
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: PUSH
50012: LD_VAR 0 4
50016: PUSH
50017: LD_INT 1
50019: PLUS
50020: ARRAY
50021: ST_TO_ADDR
50022: GO 50025
50024: POP
50025: GO 50580
50027: LD_INT 2
50029: DOUBLE
50030: EQUAL
50031: IFTRUE 50041
50033: LD_INT 3
50035: DOUBLE
50036: EQUAL
50037: IFTRUE 50041
50039: GO 50097
50041: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
50042: LD_ADDR_VAR 0 9
50046: PUSH
50047: LD_VAR 0 29
50051: PUSH
50052: LD_VAR 0 30
50056: PUSH
50057: LD_VAR 0 31
50061: PUSH
50062: LD_VAR 0 32
50066: PUSH
50067: LD_VAR 0 33
50071: PUSH
50072: LD_VAR 0 34
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: PUSH
50085: LD_VAR 0 4
50089: PUSH
50090: LD_INT 1
50092: PLUS
50093: ARRAY
50094: ST_TO_ADDR
50095: GO 50580
50097: LD_INT 16
50099: DOUBLE
50100: EQUAL
50101: IFTRUE 50159
50103: LD_INT 17
50105: DOUBLE
50106: EQUAL
50107: IFTRUE 50159
50109: LD_INT 18
50111: DOUBLE
50112: EQUAL
50113: IFTRUE 50159
50115: LD_INT 19
50117: DOUBLE
50118: EQUAL
50119: IFTRUE 50159
50121: LD_INT 22
50123: DOUBLE
50124: EQUAL
50125: IFTRUE 50159
50127: LD_INT 20
50129: DOUBLE
50130: EQUAL
50131: IFTRUE 50159
50133: LD_INT 21
50135: DOUBLE
50136: EQUAL
50137: IFTRUE 50159
50139: LD_INT 23
50141: DOUBLE
50142: EQUAL
50143: IFTRUE 50159
50145: LD_INT 24
50147: DOUBLE
50148: EQUAL
50149: IFTRUE 50159
50151: LD_INT 25
50153: DOUBLE
50154: EQUAL
50155: IFTRUE 50159
50157: GO 50215
50159: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
50160: LD_ADDR_VAR 0 9
50164: PUSH
50165: LD_VAR 0 35
50169: PUSH
50170: LD_VAR 0 36
50174: PUSH
50175: LD_VAR 0 37
50179: PUSH
50180: LD_VAR 0 38
50184: PUSH
50185: LD_VAR 0 39
50189: PUSH
50190: LD_VAR 0 40
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: PUSH
50203: LD_VAR 0 4
50207: PUSH
50208: LD_INT 1
50210: PLUS
50211: ARRAY
50212: ST_TO_ADDR
50213: GO 50580
50215: LD_INT 6
50217: DOUBLE
50218: EQUAL
50219: IFTRUE 50271
50221: LD_INT 7
50223: DOUBLE
50224: EQUAL
50225: IFTRUE 50271
50227: LD_INT 8
50229: DOUBLE
50230: EQUAL
50231: IFTRUE 50271
50233: LD_INT 13
50235: DOUBLE
50236: EQUAL
50237: IFTRUE 50271
50239: LD_INT 12
50241: DOUBLE
50242: EQUAL
50243: IFTRUE 50271
50245: LD_INT 15
50247: DOUBLE
50248: EQUAL
50249: IFTRUE 50271
50251: LD_INT 11
50253: DOUBLE
50254: EQUAL
50255: IFTRUE 50271
50257: LD_INT 14
50259: DOUBLE
50260: EQUAL
50261: IFTRUE 50271
50263: LD_INT 10
50265: DOUBLE
50266: EQUAL
50267: IFTRUE 50271
50269: GO 50327
50271: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
50272: LD_ADDR_VAR 0 9
50276: PUSH
50277: LD_VAR 0 41
50281: PUSH
50282: LD_VAR 0 42
50286: PUSH
50287: LD_VAR 0 43
50291: PUSH
50292: LD_VAR 0 44
50296: PUSH
50297: LD_VAR 0 45
50301: PUSH
50302: LD_VAR 0 46
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: PUSH
50315: LD_VAR 0 4
50319: PUSH
50320: LD_INT 1
50322: PLUS
50323: ARRAY
50324: ST_TO_ADDR
50325: GO 50580
50327: LD_INT 36
50329: DOUBLE
50330: EQUAL
50331: IFTRUE 50335
50333: GO 50391
50335: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
50336: LD_ADDR_VAR 0 9
50340: PUSH
50341: LD_VAR 0 47
50345: PUSH
50346: LD_VAR 0 48
50350: PUSH
50351: LD_VAR 0 49
50355: PUSH
50356: LD_VAR 0 50
50360: PUSH
50361: LD_VAR 0 51
50365: PUSH
50366: LD_VAR 0 52
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: PUSH
50379: LD_VAR 0 4
50383: PUSH
50384: LD_INT 1
50386: PLUS
50387: ARRAY
50388: ST_TO_ADDR
50389: GO 50580
50391: LD_INT 4
50393: DOUBLE
50394: EQUAL
50395: IFTRUE 50417
50397: LD_INT 5
50399: DOUBLE
50400: EQUAL
50401: IFTRUE 50417
50403: LD_INT 34
50405: DOUBLE
50406: EQUAL
50407: IFTRUE 50417
50409: LD_INT 37
50411: DOUBLE
50412: EQUAL
50413: IFTRUE 50417
50415: GO 50473
50417: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
50418: LD_ADDR_VAR 0 9
50422: PUSH
50423: LD_VAR 0 53
50427: PUSH
50428: LD_VAR 0 54
50432: PUSH
50433: LD_VAR 0 55
50437: PUSH
50438: LD_VAR 0 56
50442: PUSH
50443: LD_VAR 0 57
50447: PUSH
50448: LD_VAR 0 58
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: PUSH
50461: LD_VAR 0 4
50465: PUSH
50466: LD_INT 1
50468: PLUS
50469: ARRAY
50470: ST_TO_ADDR
50471: GO 50580
50473: LD_INT 31
50475: DOUBLE
50476: EQUAL
50477: IFTRUE 50523
50479: LD_INT 32
50481: DOUBLE
50482: EQUAL
50483: IFTRUE 50523
50485: LD_INT 33
50487: DOUBLE
50488: EQUAL
50489: IFTRUE 50523
50491: LD_INT 27
50493: DOUBLE
50494: EQUAL
50495: IFTRUE 50523
50497: LD_INT 26
50499: DOUBLE
50500: EQUAL
50501: IFTRUE 50523
50503: LD_INT 28
50505: DOUBLE
50506: EQUAL
50507: IFTRUE 50523
50509: LD_INT 29
50511: DOUBLE
50512: EQUAL
50513: IFTRUE 50523
50515: LD_INT 30
50517: DOUBLE
50518: EQUAL
50519: IFTRUE 50523
50521: GO 50579
50523: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
50524: LD_ADDR_VAR 0 9
50528: PUSH
50529: LD_VAR 0 59
50533: PUSH
50534: LD_VAR 0 60
50538: PUSH
50539: LD_VAR 0 61
50543: PUSH
50544: LD_VAR 0 62
50548: PUSH
50549: LD_VAR 0 63
50553: PUSH
50554: LD_VAR 0 64
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: PUSH
50567: LD_VAR 0 4
50571: PUSH
50572: LD_INT 1
50574: PLUS
50575: ARRAY
50576: ST_TO_ADDR
50577: GO 50580
50579: POP
// temp_list2 = [ ] ;
50580: LD_ADDR_VAR 0 10
50584: PUSH
50585: EMPTY
50586: ST_TO_ADDR
// for i in temp_list do
50587: LD_ADDR_VAR 0 8
50591: PUSH
50592: LD_VAR 0 9
50596: PUSH
50597: FOR_IN
50598: IFFALSE 50650
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
50600: LD_ADDR_VAR 0 10
50604: PUSH
50605: LD_VAR 0 10
50609: PUSH
50610: LD_VAR 0 8
50614: PUSH
50615: LD_INT 1
50617: ARRAY
50618: PUSH
50619: LD_VAR 0 2
50623: PLUS
50624: PUSH
50625: LD_VAR 0 8
50629: PUSH
50630: LD_INT 2
50632: ARRAY
50633: PUSH
50634: LD_VAR 0 3
50638: PLUS
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: EMPTY
50645: LIST
50646: ADD
50647: ST_TO_ADDR
50648: GO 50597
50650: POP
50651: POP
// result = temp_list2 ;
50652: LD_ADDR_VAR 0 7
50656: PUSH
50657: LD_VAR 0 10
50661: ST_TO_ADDR
// end ;
50662: LD_VAR 0 7
50666: RET
// export function EnemyInRange ( unit , dist ) ; begin
50667: LD_INT 0
50669: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
50670: LD_ADDR_VAR 0 3
50674: PUSH
50675: LD_VAR 0 1
50679: PPUSH
50680: CALL_OW 255
50684: PPUSH
50685: LD_VAR 0 1
50689: PPUSH
50690: CALL_OW 250
50694: PPUSH
50695: LD_VAR 0 1
50699: PPUSH
50700: CALL_OW 251
50704: PPUSH
50705: LD_VAR 0 2
50709: PPUSH
50710: CALL 23924 0 4
50714: PUSH
50715: LD_INT 4
50717: ARRAY
50718: ST_TO_ADDR
// end ;
50719: LD_VAR 0 3
50723: RET
// export function PlayerSeeMe ( unit ) ; begin
50724: LD_INT 0
50726: PPUSH
// result := See ( your_side , unit ) ;
50727: LD_ADDR_VAR 0 2
50731: PUSH
50732: LD_OWVAR 2
50736: PPUSH
50737: LD_VAR 0 1
50741: PPUSH
50742: CALL_OW 292
50746: ST_TO_ADDR
// end ;
50747: LD_VAR 0 2
50751: RET
// export function ReverseDir ( unit ) ; begin
50752: LD_INT 0
50754: PPUSH
// if not unit then
50755: LD_VAR 0 1
50759: NOT
50760: IFFALSE 50764
// exit ;
50762: GO 50787
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
50764: LD_ADDR_VAR 0 2
50768: PUSH
50769: LD_VAR 0 1
50773: PPUSH
50774: CALL_OW 254
50778: PUSH
50779: LD_INT 3
50781: PLUS
50782: PUSH
50783: LD_INT 6
50785: MOD
50786: ST_TO_ADDR
// end ;
50787: LD_VAR 0 2
50791: RET
// export function ReverseArray ( array ) ; var i ; begin
50792: LD_INT 0
50794: PPUSH
50795: PPUSH
// if not array then
50796: LD_VAR 0 1
50800: NOT
50801: IFFALSE 50805
// exit ;
50803: GO 50860
// result := [ ] ;
50805: LD_ADDR_VAR 0 2
50809: PUSH
50810: EMPTY
50811: ST_TO_ADDR
// for i := array downto 1 do
50812: LD_ADDR_VAR 0 3
50816: PUSH
50817: DOUBLE
50818: LD_VAR 0 1
50822: INC
50823: ST_TO_ADDR
50824: LD_INT 1
50826: PUSH
50827: FOR_DOWNTO
50828: IFFALSE 50858
// result := Join ( result , array [ i ] ) ;
50830: LD_ADDR_VAR 0 2
50834: PUSH
50835: LD_VAR 0 2
50839: PPUSH
50840: LD_VAR 0 1
50844: PUSH
50845: LD_VAR 0 3
50849: ARRAY
50850: PPUSH
50851: CALL 55702 0 2
50855: ST_TO_ADDR
50856: GO 50827
50858: POP
50859: POP
// end ;
50860: LD_VAR 0 2
50864: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50865: LD_INT 0
50867: PPUSH
50868: PPUSH
50869: PPUSH
50870: PPUSH
50871: PPUSH
50872: PPUSH
// if not unit or not hexes then
50873: LD_VAR 0 1
50877: NOT
50878: IFTRUE 50887
50880: PUSH
50881: LD_VAR 0 2
50885: NOT
50886: OR
50887: IFFALSE 50891
// exit ;
50889: GO 51014
// dist := 9999 ;
50891: LD_ADDR_VAR 0 5
50895: PUSH
50896: LD_INT 9999
50898: ST_TO_ADDR
// for i = 1 to hexes do
50899: LD_ADDR_VAR 0 4
50903: PUSH
50904: DOUBLE
50905: LD_INT 1
50907: DEC
50908: ST_TO_ADDR
50909: LD_VAR 0 2
50913: PUSH
50914: FOR_TO
50915: IFFALSE 51002
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50917: LD_ADDR_VAR 0 6
50921: PUSH
50922: LD_VAR 0 1
50926: PPUSH
50927: LD_VAR 0 2
50931: PUSH
50932: LD_VAR 0 4
50936: ARRAY
50937: PUSH
50938: LD_INT 1
50940: ARRAY
50941: PPUSH
50942: LD_VAR 0 2
50946: PUSH
50947: LD_VAR 0 4
50951: ARRAY
50952: PUSH
50953: LD_INT 2
50955: ARRAY
50956: PPUSH
50957: CALL_OW 297
50961: ST_TO_ADDR
// if tdist < dist then
50962: LD_VAR 0 6
50966: PUSH
50967: LD_VAR 0 5
50971: LESS
50972: IFFALSE 51000
// begin hex := hexes [ i ] ;
50974: LD_ADDR_VAR 0 8
50978: PUSH
50979: LD_VAR 0 2
50983: PUSH
50984: LD_VAR 0 4
50988: ARRAY
50989: ST_TO_ADDR
// dist := tdist ;
50990: LD_ADDR_VAR 0 5
50994: PUSH
50995: LD_VAR 0 6
50999: ST_TO_ADDR
// end ; end ;
51000: GO 50914
51002: POP
51003: POP
// result := hex ;
51004: LD_ADDR_VAR 0 3
51008: PUSH
51009: LD_VAR 0 8
51013: ST_TO_ADDR
// end ;
51014: LD_VAR 0 3
51018: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
51019: LD_INT 0
51021: PPUSH
51022: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
51023: LD_VAR 0 1
51027: NOT
51028: IFTRUE 51067
51030: PUSH
51031: LD_VAR 0 1
51035: PUSH
51036: LD_INT 21
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 23
51048: PUSH
51049: LD_INT 2
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PPUSH
51060: CALL_OW 69
51064: IN
51065: NOT
51066: OR
51067: IFFALSE 51071
// exit ;
51069: GO 51118
// for i = 1 to 3 do
51071: LD_ADDR_VAR 0 3
51075: PUSH
51076: DOUBLE
51077: LD_INT 1
51079: DEC
51080: ST_TO_ADDR
51081: LD_INT 3
51083: PUSH
51084: FOR_TO
51085: IFFALSE 51116
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
51087: LD_VAR 0 1
51091: PPUSH
51092: CALL_OW 250
51096: PPUSH
51097: LD_VAR 0 1
51101: PPUSH
51102: CALL_OW 251
51106: PPUSH
51107: LD_INT 1
51109: PPUSH
51110: CALL_OW 453
51114: GO 51084
51116: POP
51117: POP
// end ;
51118: LD_VAR 0 2
51122: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
51123: LD_INT 0
51125: PPUSH
51126: PPUSH
51127: PPUSH
51128: PPUSH
51129: PPUSH
51130: PPUSH
// if not unit or not enemy_unit then
51131: LD_VAR 0 1
51135: NOT
51136: IFTRUE 51145
51138: PUSH
51139: LD_VAR 0 2
51143: NOT
51144: OR
51145: IFFALSE 51149
// exit ;
51147: GO 51620
// if GetLives ( i ) < 250 then
51149: LD_VAR 0 4
51153: PPUSH
51154: CALL_OW 256
51158: PUSH
51159: LD_INT 250
51161: LESS
51162: IFFALSE 51175
// begin ComAutodestruct ( i ) ;
51164: LD_VAR 0 4
51168: PPUSH
51169: CALL 51019 0 1
// exit ;
51173: GO 51620
// end ; x := GetX ( enemy_unit ) ;
51175: LD_ADDR_VAR 0 7
51179: PUSH
51180: LD_VAR 0 2
51184: PPUSH
51185: CALL_OW 250
51189: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
51190: LD_ADDR_VAR 0 8
51194: PUSH
51195: LD_VAR 0 2
51199: PPUSH
51200: CALL_OW 251
51204: ST_TO_ADDR
// if not x or not y then
51205: LD_VAR 0 7
51209: NOT
51210: IFTRUE 51219
51212: PUSH
51213: LD_VAR 0 8
51217: NOT
51218: OR
51219: IFFALSE 51223
// exit ;
51221: GO 51620
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
51223: LD_ADDR_VAR 0 6
51227: PUSH
51228: LD_VAR 0 7
51232: PPUSH
51233: LD_INT 0
51235: PPUSH
51236: LD_INT 4
51238: PPUSH
51239: CALL_OW 272
51243: PUSH
51244: LD_VAR 0 8
51248: PPUSH
51249: LD_INT 0
51251: PPUSH
51252: LD_INT 4
51254: PPUSH
51255: CALL_OW 273
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_VAR 0 7
51268: PPUSH
51269: LD_INT 1
51271: PPUSH
51272: LD_INT 4
51274: PPUSH
51275: CALL_OW 272
51279: PUSH
51280: LD_VAR 0 8
51284: PPUSH
51285: LD_INT 1
51287: PPUSH
51288: LD_INT 4
51290: PPUSH
51291: CALL_OW 273
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_VAR 0 7
51304: PPUSH
51305: LD_INT 2
51307: PPUSH
51308: LD_INT 4
51310: PPUSH
51311: CALL_OW 272
51315: PUSH
51316: LD_VAR 0 8
51320: PPUSH
51321: LD_INT 2
51323: PPUSH
51324: LD_INT 4
51326: PPUSH
51327: CALL_OW 273
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_VAR 0 7
51340: PPUSH
51341: LD_INT 3
51343: PPUSH
51344: LD_INT 4
51346: PPUSH
51347: CALL_OW 272
51351: PUSH
51352: LD_VAR 0 8
51356: PPUSH
51357: LD_INT 3
51359: PPUSH
51360: LD_INT 4
51362: PPUSH
51363: CALL_OW 273
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_VAR 0 7
51376: PPUSH
51377: LD_INT 4
51379: PPUSH
51380: LD_INT 4
51382: PPUSH
51383: CALL_OW 272
51387: PUSH
51388: LD_VAR 0 8
51392: PPUSH
51393: LD_INT 4
51395: PPUSH
51396: LD_INT 4
51398: PPUSH
51399: CALL_OW 273
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_VAR 0 7
51412: PPUSH
51413: LD_INT 5
51415: PPUSH
51416: LD_INT 4
51418: PPUSH
51419: CALL_OW 272
51423: PUSH
51424: LD_VAR 0 8
51428: PPUSH
51429: LD_INT 5
51431: PPUSH
51432: LD_INT 4
51434: PPUSH
51435: CALL_OW 273
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: ST_TO_ADDR
// for i = tmp downto 1 do
51452: LD_ADDR_VAR 0 4
51456: PUSH
51457: DOUBLE
51458: LD_VAR 0 6
51462: INC
51463: ST_TO_ADDR
51464: LD_INT 1
51466: PUSH
51467: FOR_DOWNTO
51468: IFFALSE 51571
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
51470: LD_VAR 0 6
51474: PUSH
51475: LD_VAR 0 4
51479: ARRAY
51480: PUSH
51481: LD_INT 1
51483: ARRAY
51484: PPUSH
51485: LD_VAR 0 6
51489: PUSH
51490: LD_VAR 0 4
51494: ARRAY
51495: PUSH
51496: LD_INT 2
51498: ARRAY
51499: PPUSH
51500: CALL_OW 488
51504: NOT
51505: IFTRUE 51547
51507: PUSH
51508: LD_VAR 0 6
51512: PUSH
51513: LD_VAR 0 4
51517: ARRAY
51518: PUSH
51519: LD_INT 1
51521: ARRAY
51522: PPUSH
51523: LD_VAR 0 6
51527: PUSH
51528: LD_VAR 0 4
51532: ARRAY
51533: PUSH
51534: LD_INT 2
51536: ARRAY
51537: PPUSH
51538: CALL_OW 428
51542: PUSH
51543: LD_INT 0
51545: NONEQUAL
51546: OR
51547: IFFALSE 51569
// tmp := Delete ( tmp , i ) ;
51549: LD_ADDR_VAR 0 6
51553: PUSH
51554: LD_VAR 0 6
51558: PPUSH
51559: LD_VAR 0 4
51563: PPUSH
51564: CALL_OW 3
51568: ST_TO_ADDR
51569: GO 51467
51571: POP
51572: POP
// j := GetClosestHex ( unit , tmp ) ;
51573: LD_ADDR_VAR 0 5
51577: PUSH
51578: LD_VAR 0 1
51582: PPUSH
51583: LD_VAR 0 6
51587: PPUSH
51588: CALL 50865 0 2
51592: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
51593: LD_VAR 0 1
51597: PPUSH
51598: LD_VAR 0 5
51602: PUSH
51603: LD_INT 1
51605: ARRAY
51606: PPUSH
51607: LD_VAR 0 5
51611: PUSH
51612: LD_INT 2
51614: ARRAY
51615: PPUSH
51616: CALL_OW 111
// end ;
51620: LD_VAR 0 3
51624: RET
// export function PrepareApemanSoldier ( ) ; begin
51625: LD_INT 0
51627: PPUSH
// uc_nation := 0 ;
51628: LD_ADDR_OWVAR 21
51632: PUSH
51633: LD_INT 0
51635: ST_TO_ADDR
// hc_sex := sex_male ;
51636: LD_ADDR_OWVAR 27
51640: PUSH
51641: LD_INT 1
51643: ST_TO_ADDR
// hc_name :=  ;
51644: LD_ADDR_OWVAR 26
51648: PUSH
51649: LD_STRING 
51651: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
51652: LD_ADDR_OWVAR 28
51656: PUSH
51657: LD_INT 15
51659: ST_TO_ADDR
// hc_gallery :=  ;
51660: LD_ADDR_OWVAR 33
51664: PUSH
51665: LD_STRING 
51667: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51668: LD_ADDR_OWVAR 31
51672: PUSH
51673: LD_INT 0
51675: PPUSH
51676: LD_INT 3
51678: PPUSH
51679: CALL_OW 12
51683: PUSH
51684: LD_INT 0
51686: PPUSH
51687: LD_INT 3
51689: PPUSH
51690: CALL_OW 12
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51707: LD_ADDR_OWVAR 29
51711: PUSH
51712: LD_INT 12
51714: PUSH
51715: LD_INT 12
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: ST_TO_ADDR
// end ;
51722: LD_VAR 0 1
51726: RET
// export function PrepareApemanEngineer ( ) ; begin
51727: LD_INT 0
51729: PPUSH
// uc_nation := 0 ;
51730: LD_ADDR_OWVAR 21
51734: PUSH
51735: LD_INT 0
51737: ST_TO_ADDR
// hc_sex := sex_male ;
51738: LD_ADDR_OWVAR 27
51742: PUSH
51743: LD_INT 1
51745: ST_TO_ADDR
// hc_name :=  ;
51746: LD_ADDR_OWVAR 26
51750: PUSH
51751: LD_STRING 
51753: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
51754: LD_ADDR_OWVAR 28
51758: PUSH
51759: LD_INT 16
51761: ST_TO_ADDR
// hc_gallery :=  ;
51762: LD_ADDR_OWVAR 33
51766: PUSH
51767: LD_STRING 
51769: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51770: LD_ADDR_OWVAR 31
51774: PUSH
51775: LD_INT 0
51777: PPUSH
51778: LD_INT 3
51780: PPUSH
51781: CALL_OW 12
51785: PUSH
51786: LD_INT 0
51788: PPUSH
51789: LD_INT 3
51791: PPUSH
51792: CALL_OW 12
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51809: LD_ADDR_OWVAR 29
51813: PUSH
51814: LD_INT 12
51816: PUSH
51817: LD_INT 12
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// end ;
51824: LD_VAR 0 1
51828: RET
// export function PrepareApeman ( agressivity ) ; begin
51829: LD_INT 0
51831: PPUSH
// uc_side := 0 ;
51832: LD_ADDR_OWVAR 20
51836: PUSH
51837: LD_INT 0
51839: ST_TO_ADDR
// uc_nation := 0 ;
51840: LD_ADDR_OWVAR 21
51844: PUSH
51845: LD_INT 0
51847: ST_TO_ADDR
// hc_sex := sex_male ;
51848: LD_ADDR_OWVAR 27
51852: PUSH
51853: LD_INT 1
51855: ST_TO_ADDR
// hc_class := class_apeman ;
51856: LD_ADDR_OWVAR 28
51860: PUSH
51861: LD_INT 12
51863: ST_TO_ADDR
// hc_gallery :=  ;
51864: LD_ADDR_OWVAR 33
51868: PUSH
51869: LD_STRING 
51871: ST_TO_ADDR
// hc_name :=  ;
51872: LD_ADDR_OWVAR 26
51876: PUSH
51877: LD_STRING 
51879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
51880: LD_ADDR_OWVAR 29
51884: PUSH
51885: LD_INT 12
51887: PUSH
51888: LD_INT 12
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: ST_TO_ADDR
// if agressivity = 0 then
51895: LD_VAR 0 1
51899: PUSH
51900: LD_INT 0
51902: EQUAL
51903: IFFALSE 51915
// hc_agressivity := 0 else
51905: LD_ADDR_OWVAR 35
51909: PUSH
51910: LD_INT 0
51912: ST_TO_ADDR
51913: GO 51936
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51915: LD_ADDR_OWVAR 35
51919: PUSH
51920: LD_VAR 0 1
51924: NEG
51925: PPUSH
51926: LD_VAR 0 1
51930: PPUSH
51931: CALL_OW 12
51935: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51936: LD_ADDR_OWVAR 31
51940: PUSH
51941: LD_INT 0
51943: PPUSH
51944: LD_INT 3
51946: PPUSH
51947: CALL_OW 12
51951: PUSH
51952: LD_INT 0
51954: PPUSH
51955: LD_INT 3
51957: PPUSH
51958: CALL_OW 12
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: ST_TO_ADDR
// end ;
51975: LD_VAR 0 2
51979: RET
// export function PrepareTiger ( agressivity ) ; begin
51980: LD_INT 0
51982: PPUSH
// uc_side := 0 ;
51983: LD_ADDR_OWVAR 20
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
// uc_nation := 0 ;
51991: LD_ADDR_OWVAR 21
51995: PUSH
51996: LD_INT 0
51998: ST_TO_ADDR
// InitHc ;
51999: CALL_OW 19
// hc_class := class_tiger ;
52003: LD_ADDR_OWVAR 28
52007: PUSH
52008: LD_INT 14
52010: ST_TO_ADDR
// hc_gallery :=  ;
52011: LD_ADDR_OWVAR 33
52015: PUSH
52016: LD_STRING 
52018: ST_TO_ADDR
// hc_name :=  ;
52019: LD_ADDR_OWVAR 26
52023: PUSH
52024: LD_STRING 
52026: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
52027: LD_ADDR_OWVAR 35
52031: PUSH
52032: LD_VAR 0 1
52036: NEG
52037: PPUSH
52038: LD_VAR 0 1
52042: PPUSH
52043: CALL_OW 12
52047: ST_TO_ADDR
// end ;
52048: LD_VAR 0 2
52052: RET
// export function PrepareEnchidna ( ) ; begin
52053: LD_INT 0
52055: PPUSH
// uc_side := 0 ;
52056: LD_ADDR_OWVAR 20
52060: PUSH
52061: LD_INT 0
52063: ST_TO_ADDR
// uc_nation := 0 ;
52064: LD_ADDR_OWVAR 21
52068: PUSH
52069: LD_INT 0
52071: ST_TO_ADDR
// InitHc ;
52072: CALL_OW 19
// hc_class := class_baggie ;
52076: LD_ADDR_OWVAR 28
52080: PUSH
52081: LD_INT 13
52083: ST_TO_ADDR
// hc_gallery :=  ;
52084: LD_ADDR_OWVAR 33
52088: PUSH
52089: LD_STRING 
52091: ST_TO_ADDR
// hc_name :=  ;
52092: LD_ADDR_OWVAR 26
52096: PUSH
52097: LD_STRING 
52099: ST_TO_ADDR
// end ;
52100: LD_VAR 0 1
52104: RET
// export function PrepareFrog ( ) ; begin
52105: LD_INT 0
52107: PPUSH
// uc_side := 0 ;
52108: LD_ADDR_OWVAR 20
52112: PUSH
52113: LD_INT 0
52115: ST_TO_ADDR
// uc_nation := 0 ;
52116: LD_ADDR_OWVAR 21
52120: PUSH
52121: LD_INT 0
52123: ST_TO_ADDR
// InitHc ;
52124: CALL_OW 19
// hc_class := class_frog ;
52128: LD_ADDR_OWVAR 28
52132: PUSH
52133: LD_INT 19
52135: ST_TO_ADDR
// hc_gallery :=  ;
52136: LD_ADDR_OWVAR 33
52140: PUSH
52141: LD_STRING 
52143: ST_TO_ADDR
// hc_name :=  ;
52144: LD_ADDR_OWVAR 26
52148: PUSH
52149: LD_STRING 
52151: ST_TO_ADDR
// end ;
52152: LD_VAR 0 1
52156: RET
// export function PrepareFish ( ) ; begin
52157: LD_INT 0
52159: PPUSH
// uc_side := 0 ;
52160: LD_ADDR_OWVAR 20
52164: PUSH
52165: LD_INT 0
52167: ST_TO_ADDR
// uc_nation := 0 ;
52168: LD_ADDR_OWVAR 21
52172: PUSH
52173: LD_INT 0
52175: ST_TO_ADDR
// InitHc ;
52176: CALL_OW 19
// hc_class := class_fish ;
52180: LD_ADDR_OWVAR 28
52184: PUSH
52185: LD_INT 20
52187: ST_TO_ADDR
// hc_gallery :=  ;
52188: LD_ADDR_OWVAR 33
52192: PUSH
52193: LD_STRING 
52195: ST_TO_ADDR
// hc_name :=  ;
52196: LD_ADDR_OWVAR 26
52200: PUSH
52201: LD_STRING 
52203: ST_TO_ADDR
// end ;
52204: LD_VAR 0 1
52208: RET
// export function PrepareBird ( ) ; begin
52209: LD_INT 0
52211: PPUSH
// uc_side := 0 ;
52212: LD_ADDR_OWVAR 20
52216: PUSH
52217: LD_INT 0
52219: ST_TO_ADDR
// uc_nation := 0 ;
52220: LD_ADDR_OWVAR 21
52224: PUSH
52225: LD_INT 0
52227: ST_TO_ADDR
// InitHc ;
52228: CALL_OW 19
// hc_class := class_phororhacos ;
52232: LD_ADDR_OWVAR 28
52236: PUSH
52237: LD_INT 18
52239: ST_TO_ADDR
// hc_gallery :=  ;
52240: LD_ADDR_OWVAR 33
52244: PUSH
52245: LD_STRING 
52247: ST_TO_ADDR
// hc_name :=  ;
52248: LD_ADDR_OWVAR 26
52252: PUSH
52253: LD_STRING 
52255: ST_TO_ADDR
// end ;
52256: LD_VAR 0 1
52260: RET
// export function PrepareHorse ( ) ; begin
52261: LD_INT 0
52263: PPUSH
// uc_side := 0 ;
52264: LD_ADDR_OWVAR 20
52268: PUSH
52269: LD_INT 0
52271: ST_TO_ADDR
// uc_nation := 0 ;
52272: LD_ADDR_OWVAR 21
52276: PUSH
52277: LD_INT 0
52279: ST_TO_ADDR
// InitHc ;
52280: CALL_OW 19
// hc_class := class_horse ;
52284: LD_ADDR_OWVAR 28
52288: PUSH
52289: LD_INT 21
52291: ST_TO_ADDR
// hc_gallery :=  ;
52292: LD_ADDR_OWVAR 33
52296: PUSH
52297: LD_STRING 
52299: ST_TO_ADDR
// hc_name :=  ;
52300: LD_ADDR_OWVAR 26
52304: PUSH
52305: LD_STRING 
52307: ST_TO_ADDR
// end ;
52308: LD_VAR 0 1
52312: RET
// export function PrepareMastodont ( ) ; begin
52313: LD_INT 0
52315: PPUSH
// uc_side := 0 ;
52316: LD_ADDR_OWVAR 20
52320: PUSH
52321: LD_INT 0
52323: ST_TO_ADDR
// uc_nation := 0 ;
52324: LD_ADDR_OWVAR 21
52328: PUSH
52329: LD_INT 0
52331: ST_TO_ADDR
// vc_chassis := class_mastodont ;
52332: LD_ADDR_OWVAR 37
52336: PUSH
52337: LD_INT 31
52339: ST_TO_ADDR
// vc_control := control_rider ;
52340: LD_ADDR_OWVAR 38
52344: PUSH
52345: LD_INT 4
52347: ST_TO_ADDR
// end ;
52348: LD_VAR 0 1
52352: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
52353: LD_INT 0
52355: PPUSH
52356: PPUSH
52357: PPUSH
// uc_side = 0 ;
52358: LD_ADDR_OWVAR 20
52362: PUSH
52363: LD_INT 0
52365: ST_TO_ADDR
// uc_nation = 0 ;
52366: LD_ADDR_OWVAR 21
52370: PUSH
52371: LD_INT 0
52373: ST_TO_ADDR
// InitHc_All ( ) ;
52374: CALL_OW 584
// InitVc ;
52378: CALL_OW 20
// if mastodonts then
52382: LD_VAR 0 6
52386: IFFALSE 52453
// for i = 1 to mastodonts do
52388: LD_ADDR_VAR 0 11
52392: PUSH
52393: DOUBLE
52394: LD_INT 1
52396: DEC
52397: ST_TO_ADDR
52398: LD_VAR 0 6
52402: PUSH
52403: FOR_TO
52404: IFFALSE 52451
// begin vc_chassis := 31 ;
52406: LD_ADDR_OWVAR 37
52410: PUSH
52411: LD_INT 31
52413: ST_TO_ADDR
// vc_control := control_rider ;
52414: LD_ADDR_OWVAR 38
52418: PUSH
52419: LD_INT 4
52421: ST_TO_ADDR
// animal := CreateVehicle ;
52422: LD_ADDR_VAR 0 12
52426: PUSH
52427: CALL_OW 45
52431: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52432: LD_VAR 0 12
52436: PPUSH
52437: LD_VAR 0 8
52441: PPUSH
52442: LD_INT 0
52444: PPUSH
52445: CALL 54595 0 3
// end ;
52449: GO 52403
52451: POP
52452: POP
// if horses then
52453: LD_VAR 0 5
52457: IFFALSE 52524
// for i = 1 to horses do
52459: LD_ADDR_VAR 0 11
52463: PUSH
52464: DOUBLE
52465: LD_INT 1
52467: DEC
52468: ST_TO_ADDR
52469: LD_VAR 0 5
52473: PUSH
52474: FOR_TO
52475: IFFALSE 52522
// begin hc_class := 21 ;
52477: LD_ADDR_OWVAR 28
52481: PUSH
52482: LD_INT 21
52484: ST_TO_ADDR
// hc_gallery :=  ;
52485: LD_ADDR_OWVAR 33
52489: PUSH
52490: LD_STRING 
52492: ST_TO_ADDR
// animal := CreateHuman ;
52493: LD_ADDR_VAR 0 12
52497: PUSH
52498: CALL_OW 44
52502: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52503: LD_VAR 0 12
52507: PPUSH
52508: LD_VAR 0 8
52512: PPUSH
52513: LD_INT 0
52515: PPUSH
52516: CALL 54595 0 3
// end ;
52520: GO 52474
52522: POP
52523: POP
// if birds then
52524: LD_VAR 0 1
52528: IFFALSE 52595
// for i = 1 to birds do
52530: LD_ADDR_VAR 0 11
52534: PUSH
52535: DOUBLE
52536: LD_INT 1
52538: DEC
52539: ST_TO_ADDR
52540: LD_VAR 0 1
52544: PUSH
52545: FOR_TO
52546: IFFALSE 52593
// begin hc_class := 18 ;
52548: LD_ADDR_OWVAR 28
52552: PUSH
52553: LD_INT 18
52555: ST_TO_ADDR
// hc_gallery =  ;
52556: LD_ADDR_OWVAR 33
52560: PUSH
52561: LD_STRING 
52563: ST_TO_ADDR
// animal := CreateHuman ;
52564: LD_ADDR_VAR 0 12
52568: PUSH
52569: CALL_OW 44
52573: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52574: LD_VAR 0 12
52578: PPUSH
52579: LD_VAR 0 8
52583: PPUSH
52584: LD_INT 0
52586: PPUSH
52587: CALL 54595 0 3
// end ;
52591: GO 52545
52593: POP
52594: POP
// if tigers then
52595: LD_VAR 0 2
52599: IFFALSE 52683
// for i = 1 to tigers do
52601: LD_ADDR_VAR 0 11
52605: PUSH
52606: DOUBLE
52607: LD_INT 1
52609: DEC
52610: ST_TO_ADDR
52611: LD_VAR 0 2
52615: PUSH
52616: FOR_TO
52617: IFFALSE 52681
// begin hc_class = class_tiger ;
52619: LD_ADDR_OWVAR 28
52623: PUSH
52624: LD_INT 14
52626: ST_TO_ADDR
// hc_gallery =  ;
52627: LD_ADDR_OWVAR 33
52631: PUSH
52632: LD_STRING 
52634: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
52635: LD_ADDR_OWVAR 35
52639: PUSH
52640: LD_INT 7
52642: NEG
52643: PPUSH
52644: LD_INT 7
52646: PPUSH
52647: CALL_OW 12
52651: ST_TO_ADDR
// animal := CreateHuman ;
52652: LD_ADDR_VAR 0 12
52656: PUSH
52657: CALL_OW 44
52661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52662: LD_VAR 0 12
52666: PPUSH
52667: LD_VAR 0 8
52671: PPUSH
52672: LD_INT 0
52674: PPUSH
52675: CALL 54595 0 3
// end ;
52679: GO 52616
52681: POP
52682: POP
// if apemans then
52683: LD_VAR 0 3
52687: IFFALSE 52810
// for i = 1 to apemans do
52689: LD_ADDR_VAR 0 11
52693: PUSH
52694: DOUBLE
52695: LD_INT 1
52697: DEC
52698: ST_TO_ADDR
52699: LD_VAR 0 3
52703: PUSH
52704: FOR_TO
52705: IFFALSE 52808
// begin hc_class = class_apeman ;
52707: LD_ADDR_OWVAR 28
52711: PUSH
52712: LD_INT 12
52714: ST_TO_ADDR
// hc_gallery =  ;
52715: LD_ADDR_OWVAR 33
52719: PUSH
52720: LD_STRING 
52722: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
52723: LD_ADDR_OWVAR 35
52727: PUSH
52728: LD_INT 2
52730: NEG
52731: PPUSH
52732: LD_INT 2
52734: PPUSH
52735: CALL_OW 12
52739: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
52740: LD_ADDR_OWVAR 31
52744: PUSH
52745: LD_INT 1
52747: PPUSH
52748: LD_INT 3
52750: PPUSH
52751: CALL_OW 12
52755: PUSH
52756: LD_INT 1
52758: PPUSH
52759: LD_INT 3
52761: PPUSH
52762: CALL_OW 12
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 0
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: ST_TO_ADDR
// animal := CreateHuman ;
52779: LD_ADDR_VAR 0 12
52783: PUSH
52784: CALL_OW 44
52788: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52789: LD_VAR 0 12
52793: PPUSH
52794: LD_VAR 0 8
52798: PPUSH
52799: LD_INT 0
52801: PPUSH
52802: CALL 54595 0 3
// end ;
52806: GO 52704
52808: POP
52809: POP
// if enchidnas then
52810: LD_VAR 0 4
52814: IFFALSE 52881
// for i = 1 to enchidnas do
52816: LD_ADDR_VAR 0 11
52820: PUSH
52821: DOUBLE
52822: LD_INT 1
52824: DEC
52825: ST_TO_ADDR
52826: LD_VAR 0 4
52830: PUSH
52831: FOR_TO
52832: IFFALSE 52879
// begin hc_class = 13 ;
52834: LD_ADDR_OWVAR 28
52838: PUSH
52839: LD_INT 13
52841: ST_TO_ADDR
// hc_gallery =  ;
52842: LD_ADDR_OWVAR 33
52846: PUSH
52847: LD_STRING 
52849: ST_TO_ADDR
// animal := CreateHuman ;
52850: LD_ADDR_VAR 0 12
52854: PUSH
52855: CALL_OW 44
52859: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
52860: LD_VAR 0 12
52864: PPUSH
52865: LD_VAR 0 8
52869: PPUSH
52870: LD_INT 0
52872: PPUSH
52873: CALL 54595 0 3
// end ;
52877: GO 52831
52879: POP
52880: POP
// if fishes then
52881: LD_VAR 0 7
52885: IFFALSE 52952
// for i = 1 to fishes do
52887: LD_ADDR_VAR 0 11
52891: PUSH
52892: DOUBLE
52893: LD_INT 1
52895: DEC
52896: ST_TO_ADDR
52897: LD_VAR 0 7
52901: PUSH
52902: FOR_TO
52903: IFFALSE 52950
// begin hc_class = 20 ;
52905: LD_ADDR_OWVAR 28
52909: PUSH
52910: LD_INT 20
52912: ST_TO_ADDR
// hc_gallery =  ;
52913: LD_ADDR_OWVAR 33
52917: PUSH
52918: LD_STRING 
52920: ST_TO_ADDR
// animal := CreateHuman ;
52921: LD_ADDR_VAR 0 12
52925: PUSH
52926: CALL_OW 44
52930: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
52931: LD_VAR 0 12
52935: PPUSH
52936: LD_VAR 0 9
52940: PPUSH
52941: LD_INT 0
52943: PPUSH
52944: CALL 54595 0 3
// end ;
52948: GO 52902
52950: POP
52951: POP
// end ;
52952: LD_VAR 0 10
52956: RET
// export function WantHeal ( sci , unit ) ; begin
52957: LD_INT 0
52959: PPUSH
// if GetTaskList ( sci ) > 0 then
52960: LD_VAR 0 1
52964: PPUSH
52965: CALL_OW 437
52969: PUSH
52970: LD_INT 0
52972: GREATER
52973: IFFALSE 53045
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL_OW 437
52984: PUSH
52985: LD_INT 1
52987: ARRAY
52988: PUSH
52989: LD_INT 1
52991: ARRAY
52992: PUSH
52993: LD_STRING l
52995: EQUAL
52996: IFFALSE 53023
52998: PUSH
52999: LD_VAR 0 1
53003: PPUSH
53004: CALL_OW 437
53008: PUSH
53009: LD_INT 1
53011: ARRAY
53012: PUSH
53013: LD_INT 4
53015: ARRAY
53016: PUSH
53017: LD_VAR 0 2
53021: EQUAL
53022: AND
53023: IFFALSE 53035
// result := true else
53025: LD_ADDR_VAR 0 3
53029: PUSH
53030: LD_INT 1
53032: ST_TO_ADDR
53033: GO 53043
// result := false ;
53035: LD_ADDR_VAR 0 3
53039: PUSH
53040: LD_INT 0
53042: ST_TO_ADDR
// end else
53043: GO 53053
// result := false ;
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_INT 0
53052: ST_TO_ADDR
// end ;
53053: LD_VAR 0 3
53057: RET
// export function HealTarget ( sci ) ; begin
53058: LD_INT 0
53060: PPUSH
// if not sci then
53061: LD_VAR 0 1
53065: NOT
53066: IFFALSE 53070
// exit ;
53068: GO 53135
// result := 0 ;
53070: LD_ADDR_VAR 0 2
53074: PUSH
53075: LD_INT 0
53077: ST_TO_ADDR
// if GetTaskList ( sci ) then
53078: LD_VAR 0 1
53082: PPUSH
53083: CALL_OW 437
53087: IFFALSE 53135
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53089: LD_VAR 0 1
53093: PPUSH
53094: CALL_OW 437
53098: PUSH
53099: LD_INT 1
53101: ARRAY
53102: PUSH
53103: LD_INT 1
53105: ARRAY
53106: PUSH
53107: LD_STRING l
53109: EQUAL
53110: IFFALSE 53135
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
53112: LD_ADDR_VAR 0 2
53116: PUSH
53117: LD_VAR 0 1
53121: PPUSH
53122: CALL_OW 437
53126: PUSH
53127: LD_INT 1
53129: ARRAY
53130: PUSH
53131: LD_INT 4
53133: ARRAY
53134: ST_TO_ADDR
// end ;
53135: LD_VAR 0 2
53139: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
53140: LD_INT 0
53142: PPUSH
53143: PPUSH
53144: PPUSH
53145: PPUSH
// if not base_units then
53146: LD_VAR 0 1
53150: NOT
53151: IFFALSE 53155
// exit ;
53153: GO 53242
// result := false ;
53155: LD_ADDR_VAR 0 2
53159: PUSH
53160: LD_INT 0
53162: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
53163: LD_ADDR_VAR 0 5
53167: PUSH
53168: LD_VAR 0 1
53172: PPUSH
53173: LD_INT 21
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PPUSH
53183: CALL_OW 72
53187: ST_TO_ADDR
// if not tmp then
53188: LD_VAR 0 5
53192: NOT
53193: IFFALSE 53197
// exit ;
53195: GO 53242
// for i in tmp do
53197: LD_ADDR_VAR 0 3
53201: PUSH
53202: LD_VAR 0 5
53206: PUSH
53207: FOR_IN
53208: IFFALSE 53240
// begin result := EnemyInRange ( i , 22 ) ;
53210: LD_ADDR_VAR 0 2
53214: PUSH
53215: LD_VAR 0 3
53219: PPUSH
53220: LD_INT 22
53222: PPUSH
53223: CALL 50667 0 2
53227: ST_TO_ADDR
// if result then
53228: LD_VAR 0 2
53232: IFFALSE 53238
// exit ;
53234: POP
53235: POP
53236: GO 53242
// end ;
53238: GO 53207
53240: POP
53241: POP
// end ;
53242: LD_VAR 0 2
53246: RET
// export function FilterByTag ( units , tag ) ; begin
53247: LD_INT 0
53249: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
53250: LD_ADDR_VAR 0 3
53254: PUSH
53255: LD_VAR 0 1
53259: PPUSH
53260: LD_INT 120
53262: PUSH
53263: LD_VAR 0 2
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PPUSH
53272: CALL_OW 72
53276: ST_TO_ADDR
// end ;
53277: LD_VAR 0 3
53281: RET
// export function IsDriver ( un ) ; begin
53282: LD_INT 0
53284: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
53285: LD_ADDR_VAR 0 2
53289: PUSH
53290: LD_VAR 0 1
53294: PUSH
53295: LD_INT 55
53297: PUSH
53298: EMPTY
53299: LIST
53300: PPUSH
53301: CALL_OW 69
53305: IN
53306: ST_TO_ADDR
// end ;
53307: LD_VAR 0 2
53311: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
53312: LD_INT 0
53314: PPUSH
53315: PPUSH
// list := [ ] ;
53316: LD_ADDR_VAR 0 5
53320: PUSH
53321: EMPTY
53322: ST_TO_ADDR
// case d of 0 :
53323: LD_VAR 0 3
53327: PUSH
53328: LD_INT 0
53330: DOUBLE
53331: EQUAL
53332: IFTRUE 53336
53334: GO 53469
53336: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
53337: LD_ADDR_VAR 0 5
53341: PUSH
53342: LD_VAR 0 1
53346: PUSH
53347: LD_INT 4
53349: MINUS
53350: PUSH
53351: LD_VAR 0 2
53355: PUSH
53356: LD_INT 4
53358: MINUS
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: PUSH
53368: LD_VAR 0 1
53372: PUSH
53373: LD_INT 3
53375: MINUS
53376: PUSH
53377: LD_VAR 0 2
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: LIST
53389: PUSH
53390: LD_VAR 0 1
53394: PUSH
53395: LD_INT 4
53397: PLUS
53398: PUSH
53399: LD_VAR 0 2
53403: PUSH
53404: LD_INT 4
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: PUSH
53412: LD_VAR 0 1
53416: PUSH
53417: LD_INT 3
53419: PLUS
53420: PUSH
53421: LD_VAR 0 2
53425: PUSH
53426: LD_INT 3
53428: PLUS
53429: PUSH
53430: LD_INT 5
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: LIST
53437: PUSH
53438: LD_VAR 0 1
53442: PUSH
53443: LD_VAR 0 2
53447: PUSH
53448: LD_INT 4
53450: PLUS
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: ST_TO_ADDR
// end ; 1 :
53467: GO 54167
53469: LD_INT 1
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53477
53475: GO 53610
53477: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
53478: LD_ADDR_VAR 0 5
53482: PUSH
53483: LD_VAR 0 1
53487: PUSH
53488: LD_VAR 0 2
53492: PUSH
53493: LD_INT 4
53495: MINUS
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: LIST
53504: PUSH
53505: LD_VAR 0 1
53509: PUSH
53510: LD_INT 3
53512: MINUS
53513: PUSH
53514: LD_VAR 0 2
53518: PUSH
53519: LD_INT 3
53521: MINUS
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: PUSH
53531: LD_VAR 0 1
53535: PUSH
53536: LD_INT 4
53538: MINUS
53539: PUSH
53540: LD_VAR 0 2
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: PUSH
53553: LD_VAR 0 1
53557: PUSH
53558: LD_VAR 0 2
53562: PUSH
53563: LD_INT 3
53565: PLUS
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: LIST
53574: PUSH
53575: LD_VAR 0 1
53579: PUSH
53580: LD_INT 4
53582: PLUS
53583: PUSH
53584: LD_VAR 0 2
53588: PUSH
53589: LD_INT 4
53591: PLUS
53592: PUSH
53593: LD_INT 5
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: LIST
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// end ; 2 :
53608: GO 54167
53610: LD_INT 2
53612: DOUBLE
53613: EQUAL
53614: IFTRUE 53618
53616: GO 53747
53618: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
53619: LD_ADDR_VAR 0 5
53623: PUSH
53624: LD_VAR 0 1
53628: PUSH
53629: LD_VAR 0 2
53633: PUSH
53634: LD_INT 3
53636: MINUS
53637: PUSH
53638: LD_INT 3
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: PUSH
53646: LD_VAR 0 1
53650: PUSH
53651: LD_INT 4
53653: PLUS
53654: PUSH
53655: LD_VAR 0 2
53659: PUSH
53660: LD_INT 4
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: PUSH
53668: LD_VAR 0 1
53672: PUSH
53673: LD_VAR 0 2
53677: PUSH
53678: LD_INT 4
53680: PLUS
53681: PUSH
53682: LD_INT 0
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: PUSH
53690: LD_VAR 0 1
53694: PUSH
53695: LD_INT 3
53697: MINUS
53698: PUSH
53699: LD_VAR 0 2
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: PUSH
53712: LD_VAR 0 1
53716: PUSH
53717: LD_INT 4
53719: MINUS
53720: PUSH
53721: LD_VAR 0 2
53725: PUSH
53726: LD_INT 4
53728: MINUS
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
// end ; 3 :
53745: GO 54167
53747: LD_INT 3
53749: DOUBLE
53750: EQUAL
53751: IFTRUE 53755
53753: GO 53888
53755: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
53756: LD_ADDR_VAR 0 5
53760: PUSH
53761: LD_VAR 0 1
53765: PUSH
53766: LD_INT 3
53768: PLUS
53769: PUSH
53770: LD_VAR 0 2
53774: PUSH
53775: LD_INT 4
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: PUSH
53783: LD_VAR 0 1
53787: PUSH
53788: LD_INT 4
53790: PLUS
53791: PUSH
53792: LD_VAR 0 2
53796: PUSH
53797: LD_INT 4
53799: PLUS
53800: PUSH
53801: LD_INT 5
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: LIST
53808: PUSH
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 4
53816: MINUS
53817: PUSH
53818: LD_VAR 0 2
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: LIST
53830: PUSH
53831: LD_VAR 0 1
53835: PUSH
53836: LD_VAR 0 2
53840: PUSH
53841: LD_INT 4
53843: MINUS
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: LIST
53852: PUSH
53853: LD_VAR 0 1
53857: PUSH
53858: LD_INT 3
53860: MINUS
53861: PUSH
53862: LD_VAR 0 2
53866: PUSH
53867: LD_INT 3
53869: MINUS
53870: PUSH
53871: LD_INT 2
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: LIST
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// end ; 4 :
53886: GO 54167
53888: LD_INT 4
53890: DOUBLE
53891: EQUAL
53892: IFTRUE 53896
53894: GO 54029
53896: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
53897: LD_ADDR_VAR 0 5
53901: PUSH
53902: LD_VAR 0 1
53906: PUSH
53907: LD_VAR 0 2
53911: PUSH
53912: LD_INT 4
53914: PLUS
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: PUSH
53924: LD_VAR 0 1
53928: PUSH
53929: LD_INT 3
53931: PLUS
53932: PUSH
53933: LD_VAR 0 2
53937: PUSH
53938: LD_INT 3
53940: PLUS
53941: PUSH
53942: LD_INT 5
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: PUSH
53950: LD_VAR 0 1
53954: PUSH
53955: LD_INT 4
53957: PLUS
53958: PUSH
53959: LD_VAR 0 2
53963: PUSH
53964: LD_INT 4
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: PUSH
53972: LD_VAR 0 1
53976: PUSH
53977: LD_VAR 0 2
53981: PUSH
53982: LD_INT 3
53984: MINUS
53985: PUSH
53986: LD_INT 3
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: LIST
53993: PUSH
53994: LD_VAR 0 1
53998: PUSH
53999: LD_INT 4
54001: MINUS
54002: PUSH
54003: LD_VAR 0 2
54007: PUSH
54008: LD_INT 4
54010: MINUS
54011: PUSH
54012: LD_INT 2
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// end ; 5 :
54027: GO 54167
54029: LD_INT 5
54031: DOUBLE
54032: EQUAL
54033: IFTRUE 54037
54035: GO 54166
54037: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54038: LD_ADDR_VAR 0 5
54042: PUSH
54043: LD_VAR 0 1
54047: PUSH
54048: LD_INT 4
54050: MINUS
54051: PUSH
54052: LD_VAR 0 2
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: LIST
54064: PUSH
54065: LD_VAR 0 1
54069: PUSH
54070: LD_VAR 0 2
54074: PUSH
54075: LD_INT 4
54077: MINUS
54078: PUSH
54079: LD_INT 3
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: PUSH
54087: LD_VAR 0 1
54091: PUSH
54092: LD_INT 4
54094: PLUS
54095: PUSH
54096: LD_VAR 0 2
54100: PUSH
54101: LD_INT 4
54103: PLUS
54104: PUSH
54105: LD_INT 5
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: PUSH
54113: LD_VAR 0 1
54117: PUSH
54118: LD_INT 3
54120: PLUS
54121: PUSH
54122: LD_VAR 0 2
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: LIST
54134: PUSH
54135: LD_VAR 0 1
54139: PUSH
54140: LD_VAR 0 2
54144: PUSH
54145: LD_INT 3
54147: PLUS
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// end ; end ;
54164: GO 54167
54166: POP
// result := list ;
54167: LD_ADDR_VAR 0 4
54171: PUSH
54172: LD_VAR 0 5
54176: ST_TO_ADDR
// end ;
54177: LD_VAR 0 4
54181: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
54182: LD_INT 0
54184: PPUSH
54185: PPUSH
54186: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
54187: LD_VAR 0 1
54191: NOT
54192: IFTRUE 54220
54194: PUSH
54195: LD_VAR 0 2
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 2
54205: PUSH
54206: LD_INT 3
54208: PUSH
54209: LD_INT 4
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: IN
54218: NOT
54219: OR
54220: IFFALSE 54224
// exit ;
54222: GO 54307
// tmp := [ ] ;
54224: LD_ADDR_VAR 0 5
54228: PUSH
54229: EMPTY
54230: ST_TO_ADDR
// for i in units do
54231: LD_ADDR_VAR 0 4
54235: PUSH
54236: LD_VAR 0 1
54240: PUSH
54241: FOR_IN
54242: IFFALSE 54276
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
54244: LD_ADDR_VAR 0 5
54248: PUSH
54249: LD_VAR 0 5
54253: PPUSH
54254: LD_VAR 0 4
54258: PPUSH
54259: LD_VAR 0 2
54263: PPUSH
54264: CALL_OW 259
54268: PPUSH
54269: CALL 55702 0 2
54273: ST_TO_ADDR
54274: GO 54241
54276: POP
54277: POP
// if not tmp then
54278: LD_VAR 0 5
54282: NOT
54283: IFFALSE 54287
// exit ;
54285: GO 54307
// result := SortListByListDesc ( units , tmp ) ;
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: LD_VAR 0 5
54301: PPUSH
54302: CALL_OW 77
54306: ST_TO_ADDR
// end ;
54307: LD_VAR 0 3
54311: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
54312: LD_INT 0
54314: PPUSH
54315: PPUSH
54316: PPUSH
// result := false ;
54317: LD_ADDR_VAR 0 3
54321: PUSH
54322: LD_INT 0
54324: ST_TO_ADDR
// if not building then
54325: LD_VAR 0 2
54329: NOT
54330: IFFALSE 54334
// exit ;
54332: GO 54478
// x := GetX ( building ) ;
54334: LD_ADDR_VAR 0 4
54338: PUSH
54339: LD_VAR 0 2
54343: PPUSH
54344: CALL_OW 250
54348: ST_TO_ADDR
// y := GetY ( building ) ;
54349: LD_ADDR_VAR 0 5
54353: PUSH
54354: LD_VAR 0 2
54358: PPUSH
54359: CALL_OW 251
54363: ST_TO_ADDR
// if not x or not y then
54364: LD_VAR 0 4
54368: NOT
54369: IFTRUE 54378
54371: PUSH
54372: LD_VAR 0 5
54376: NOT
54377: OR
54378: IFFALSE 54382
// exit ;
54380: GO 54478
// if GetTaskList ( unit ) then
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 437
54391: IFFALSE 54478
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54393: LD_STRING e
54395: PUSH
54396: LD_VAR 0 1
54400: PPUSH
54401: CALL_OW 437
54405: PUSH
54406: LD_INT 1
54408: ARRAY
54409: PUSH
54410: LD_INT 1
54412: ARRAY
54413: EQUAL
54414: IFFALSE 54441
54416: PUSH
54417: LD_VAR 0 4
54421: PUSH
54422: LD_VAR 0 1
54426: PPUSH
54427: CALL_OW 437
54431: PUSH
54432: LD_INT 1
54434: ARRAY
54435: PUSH
54436: LD_INT 2
54438: ARRAY
54439: EQUAL
54440: AND
54441: IFFALSE 54468
54443: PUSH
54444: LD_VAR 0 5
54448: PUSH
54449: LD_VAR 0 1
54453: PPUSH
54454: CALL_OW 437
54458: PUSH
54459: LD_INT 1
54461: ARRAY
54462: PUSH
54463: LD_INT 3
54465: ARRAY
54466: EQUAL
54467: AND
54468: IFFALSE 54478
// result := true end ;
54470: LD_ADDR_VAR 0 3
54474: PUSH
54475: LD_INT 1
54477: ST_TO_ADDR
// end ;
54478: LD_VAR 0 3
54482: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
54483: LD_INT 0
54485: PPUSH
// result := false ;
54486: LD_ADDR_VAR 0 4
54490: PUSH
54491: LD_INT 0
54493: ST_TO_ADDR
// if GetTaskList ( unit ) then
54494: LD_VAR 0 1
54498: PPUSH
54499: CALL_OW 437
54503: IFFALSE 54590
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
54505: LD_STRING M
54507: PUSH
54508: LD_VAR 0 1
54512: PPUSH
54513: CALL_OW 437
54517: PUSH
54518: LD_INT 1
54520: ARRAY
54521: PUSH
54522: LD_INT 1
54524: ARRAY
54525: EQUAL
54526: IFFALSE 54553
54528: PUSH
54529: LD_VAR 0 2
54533: PUSH
54534: LD_VAR 0 1
54538: PPUSH
54539: CALL_OW 437
54543: PUSH
54544: LD_INT 1
54546: ARRAY
54547: PUSH
54548: LD_INT 2
54550: ARRAY
54551: EQUAL
54552: AND
54553: IFFALSE 54580
54555: PUSH
54556: LD_VAR 0 3
54560: PUSH
54561: LD_VAR 0 1
54565: PPUSH
54566: CALL_OW 437
54570: PUSH
54571: LD_INT 1
54573: ARRAY
54574: PUSH
54575: LD_INT 3
54577: ARRAY
54578: EQUAL
54579: AND
54580: IFFALSE 54590
// result := true ;
54582: LD_ADDR_VAR 0 4
54586: PUSH
54587: LD_INT 1
54589: ST_TO_ADDR
// end ; end ;
54590: LD_VAR 0 4
54594: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
54595: LD_INT 0
54597: PPUSH
54598: PPUSH
54599: PPUSH
54600: PPUSH
// if not unit or not area then
54601: LD_VAR 0 1
54605: NOT
54606: IFTRUE 54615
54608: PUSH
54609: LD_VAR 0 2
54613: NOT
54614: OR
54615: IFFALSE 54619
// exit ;
54617: GO 54795
// tmp := AreaToList ( area , i ) ;
54619: LD_ADDR_VAR 0 6
54623: PUSH
54624: LD_VAR 0 2
54628: PPUSH
54629: LD_VAR 0 5
54633: PPUSH
54634: CALL_OW 517
54638: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
54639: LD_ADDR_VAR 0 5
54643: PUSH
54644: DOUBLE
54645: LD_INT 1
54647: DEC
54648: ST_TO_ADDR
54649: LD_VAR 0 6
54653: PUSH
54654: LD_INT 1
54656: ARRAY
54657: PUSH
54658: FOR_TO
54659: IFFALSE 54793
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
54661: LD_ADDR_VAR 0 7
54665: PUSH
54666: LD_VAR 0 6
54670: PUSH
54671: LD_INT 1
54673: ARRAY
54674: PUSH
54675: LD_VAR 0 5
54679: ARRAY
54680: PUSH
54681: LD_VAR 0 6
54685: PUSH
54686: LD_INT 2
54688: ARRAY
54689: PUSH
54690: LD_VAR 0 5
54694: ARRAY
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
54700: LD_INT 92
54702: PUSH
54703: LD_VAR 0 7
54707: PUSH
54708: LD_INT 1
54710: ARRAY
54711: PUSH
54712: LD_VAR 0 7
54716: PUSH
54717: LD_INT 2
54719: ARRAY
54720: PUSH
54721: LD_INT 2
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: PPUSH
54730: CALL_OW 69
54734: PUSH
54735: LD_INT 0
54737: EQUAL
54738: IFFALSE 54791
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
54740: LD_VAR 0 1
54744: PPUSH
54745: LD_VAR 0 7
54749: PUSH
54750: LD_INT 1
54752: ARRAY
54753: PPUSH
54754: LD_VAR 0 7
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 3
54767: PPUSH
54768: CALL_OW 48
// result := IsPlaced ( unit ) ;
54772: LD_ADDR_VAR 0 4
54776: PUSH
54777: LD_VAR 0 1
54781: PPUSH
54782: CALL_OW 305
54786: ST_TO_ADDR
// exit ;
54787: POP
54788: POP
54789: GO 54795
// end ; end ;
54791: GO 54658
54793: POP
54794: POP
// end ;
54795: LD_VAR 0 4
54799: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
54800: LD_INT 0
54802: PPUSH
54803: PPUSH
54804: PPUSH
// if not side or side > 8 then
54805: LD_VAR 0 1
54809: NOT
54810: IFTRUE 54822
54812: PUSH
54813: LD_VAR 0 1
54817: PUSH
54818: LD_INT 8
54820: GREATER
54821: OR
54822: IFFALSE 54826
// exit ;
54824: GO 55013
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
54826: LD_ADDR_VAR 0 4
54830: PUSH
54831: LD_INT 22
54833: PUSH
54834: LD_VAR 0 1
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 21
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PPUSH
54857: CALL_OW 69
54861: ST_TO_ADDR
// if not tmp then
54862: LD_VAR 0 4
54866: NOT
54867: IFFALSE 54871
// exit ;
54869: GO 55013
// enable_addtolog := true ;
54871: LD_ADDR_OWVAR 81
54875: PUSH
54876: LD_INT 1
54878: ST_TO_ADDR
// AddToLog ( [ ) ;
54879: LD_STRING [
54881: PPUSH
54882: CALL_OW 561
// for i in tmp do
54886: LD_ADDR_VAR 0 3
54890: PUSH
54891: LD_VAR 0 4
54895: PUSH
54896: FOR_IN
54897: IFFALSE 55004
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
54899: LD_STRING [
54901: PUSH
54902: LD_VAR 0 3
54906: PPUSH
54907: CALL_OW 266
54911: STR
54912: PUSH
54913: LD_STRING , 
54915: STR
54916: PUSH
54917: LD_VAR 0 3
54921: PPUSH
54922: CALL_OW 250
54926: STR
54927: PUSH
54928: LD_STRING , 
54930: STR
54931: PUSH
54932: LD_VAR 0 3
54936: PPUSH
54937: CALL_OW 251
54941: STR
54942: PUSH
54943: LD_STRING , 
54945: STR
54946: PUSH
54947: LD_VAR 0 3
54951: PPUSH
54952: CALL_OW 254
54956: STR
54957: PUSH
54958: LD_STRING , 
54960: STR
54961: PUSH
54962: LD_VAR 0 3
54966: PPUSH
54967: LD_INT 1
54969: PPUSH
54970: CALL_OW 268
54974: STR
54975: PUSH
54976: LD_STRING , 
54978: STR
54979: PUSH
54980: LD_VAR 0 3
54984: PPUSH
54985: LD_INT 2
54987: PPUSH
54988: CALL_OW 268
54992: STR
54993: PUSH
54994: LD_STRING ],
54996: STR
54997: PPUSH
54998: CALL_OW 561
// end ;
55002: GO 54896
55004: POP
55005: POP
// AddToLog ( ]; ) ;
55006: LD_STRING ];
55008: PPUSH
55009: CALL_OW 561
// end ;
55013: LD_VAR 0 2
55017: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55018: LD_INT 0
55020: PPUSH
55021: PPUSH
55022: PPUSH
55023: PPUSH
55024: PPUSH
// if not area or not rate or not max then
55025: LD_VAR 0 1
55029: NOT
55030: IFTRUE 55039
55032: PUSH
55033: LD_VAR 0 2
55037: NOT
55038: OR
55039: IFTRUE 55048
55041: PUSH
55042: LD_VAR 0 4
55046: NOT
55047: OR
55048: IFFALSE 55052
// exit ;
55050: GO 55241
// while 1 do
55052: LD_INT 1
55054: IFFALSE 55241
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55056: LD_ADDR_VAR 0 9
55060: PUSH
55061: LD_VAR 0 1
55065: PPUSH
55066: LD_INT 1
55068: PPUSH
55069: CALL_OW 287
55073: PUSH
55074: LD_INT 10
55076: MUL
55077: ST_TO_ADDR
// r := rate / 10 ;
55078: LD_ADDR_VAR 0 7
55082: PUSH
55083: LD_VAR 0 2
55087: PUSH
55088: LD_INT 10
55090: DIVREAL
55091: ST_TO_ADDR
// time := 1 1$00 ;
55092: LD_ADDR_VAR 0 8
55096: PUSH
55097: LD_INT 2100
55099: ST_TO_ADDR
// if amount < min then
55100: LD_VAR 0 9
55104: PUSH
55105: LD_VAR 0 3
55109: LESS
55110: IFFALSE 55128
// r := r * 2 else
55112: LD_ADDR_VAR 0 7
55116: PUSH
55117: LD_VAR 0 7
55121: PUSH
55122: LD_INT 2
55124: MUL
55125: ST_TO_ADDR
55126: GO 55154
// if amount > max then
55128: LD_VAR 0 9
55132: PUSH
55133: LD_VAR 0 4
55137: GREATER
55138: IFFALSE 55154
// r := r / 2 ;
55140: LD_ADDR_VAR 0 7
55144: PUSH
55145: LD_VAR 0 7
55149: PUSH
55150: LD_INT 2
55152: DIVREAL
55153: ST_TO_ADDR
// time := time / r ;
55154: LD_ADDR_VAR 0 8
55158: PUSH
55159: LD_VAR 0 8
55163: PUSH
55164: LD_VAR 0 7
55168: DIVREAL
55169: ST_TO_ADDR
// if time < 0 then
55170: LD_VAR 0 8
55174: PUSH
55175: LD_INT 0
55177: LESS
55178: IFFALSE 55195
// time := time * - 1 ;
55180: LD_ADDR_VAR 0 8
55184: PUSH
55185: LD_VAR 0 8
55189: PUSH
55190: LD_INT 1
55192: NEG
55193: MUL
55194: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
55195: LD_VAR 0 8
55199: PUSH
55200: LD_INT 35
55202: PPUSH
55203: LD_INT 875
55205: PPUSH
55206: CALL_OW 12
55210: PLUS
55211: PPUSH
55212: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
55216: LD_INT 1
55218: PPUSH
55219: LD_INT 5
55221: PPUSH
55222: CALL_OW 12
55226: PPUSH
55227: LD_VAR 0 1
55231: PPUSH
55232: LD_INT 1
55234: PPUSH
55235: CALL_OW 55
// end ;
55239: GO 55052
// end ;
55241: LD_VAR 0 5
55245: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
55246: LD_INT 0
55248: PPUSH
55249: PPUSH
55250: PPUSH
55251: PPUSH
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
// if not turrets or not factories then
55256: LD_VAR 0 1
55260: NOT
55261: IFTRUE 55270
55263: PUSH
55264: LD_VAR 0 2
55268: NOT
55269: OR
55270: IFFALSE 55274
// exit ;
55272: GO 55581
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
55274: LD_ADDR_VAR 0 10
55278: PUSH
55279: LD_INT 5
55281: PUSH
55282: LD_INT 6
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: LD_INT 4
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 3
55301: PUSH
55302: LD_INT 5
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 24
55316: PUSH
55317: LD_INT 25
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 23
55326: PUSH
55327: LD_INT 27
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 42
55340: PUSH
55341: LD_INT 43
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 44
55350: PUSH
55351: LD_INT 46
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 45
55360: PUSH
55361: LD_INT 47
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: LIST
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: LIST
55377: ST_TO_ADDR
// result := [ ] ;
55378: LD_ADDR_VAR 0 3
55382: PUSH
55383: EMPTY
55384: ST_TO_ADDR
// for i in turrets do
55385: LD_ADDR_VAR 0 4
55389: PUSH
55390: LD_VAR 0 1
55394: PUSH
55395: FOR_IN
55396: IFFALSE 55579
// begin nat := GetNation ( i ) ;
55398: LD_ADDR_VAR 0 7
55402: PUSH
55403: LD_VAR 0 4
55407: PPUSH
55408: CALL_OW 248
55412: ST_TO_ADDR
// weapon := 0 ;
55413: LD_ADDR_VAR 0 8
55417: PUSH
55418: LD_INT 0
55420: ST_TO_ADDR
// if not nat then
55421: LD_VAR 0 7
55425: NOT
55426: IFFALSE 55430
// continue ;
55428: GO 55395
// for j in list [ nat ] do
55430: LD_ADDR_VAR 0 5
55434: PUSH
55435: LD_VAR 0 10
55439: PUSH
55440: LD_VAR 0 7
55444: ARRAY
55445: PUSH
55446: FOR_IN
55447: IFFALSE 55488
// if GetBWeapon ( i ) = j [ 1 ] then
55449: LD_VAR 0 4
55453: PPUSH
55454: CALL_OW 269
55458: PUSH
55459: LD_VAR 0 5
55463: PUSH
55464: LD_INT 1
55466: ARRAY
55467: EQUAL
55468: IFFALSE 55486
// begin weapon := j [ 2 ] ;
55470: LD_ADDR_VAR 0 8
55474: PUSH
55475: LD_VAR 0 5
55479: PUSH
55480: LD_INT 2
55482: ARRAY
55483: ST_TO_ADDR
// break ;
55484: GO 55488
// end ;
55486: GO 55446
55488: POP
55489: POP
// if not weapon then
55490: LD_VAR 0 8
55494: NOT
55495: IFFALSE 55499
// continue ;
55497: GO 55395
// for k in factories do
55499: LD_ADDR_VAR 0 6
55503: PUSH
55504: LD_VAR 0 2
55508: PUSH
55509: FOR_IN
55510: IFFALSE 55575
// begin weapons := AvailableWeaponList ( k ) ;
55512: LD_ADDR_VAR 0 9
55516: PUSH
55517: LD_VAR 0 6
55521: PPUSH
55522: CALL_OW 478
55526: ST_TO_ADDR
// if not weapons then
55527: LD_VAR 0 9
55531: NOT
55532: IFFALSE 55536
// continue ;
55534: GO 55509
// if weapon in weapons then
55536: LD_VAR 0 8
55540: PUSH
55541: LD_VAR 0 9
55545: IN
55546: IFFALSE 55573
// begin result := [ i , weapon ] ;
55548: LD_ADDR_VAR 0 3
55552: PUSH
55553: LD_VAR 0 4
55557: PUSH
55558: LD_VAR 0 8
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: ST_TO_ADDR
// exit ;
55567: POP
55568: POP
55569: POP
55570: POP
55571: GO 55581
// end ; end ;
55573: GO 55509
55575: POP
55576: POP
// end ;
55577: GO 55395
55579: POP
55580: POP
// end ;
55581: LD_VAR 0 3
55585: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
55586: LD_INT 0
55588: PPUSH
// if not side or side > 8 then
55589: LD_VAR 0 3
55593: NOT
55594: IFTRUE 55606
55596: PUSH
55597: LD_VAR 0 3
55601: PUSH
55602: LD_INT 8
55604: GREATER
55605: OR
55606: IFFALSE 55610
// exit ;
55608: GO 55669
// if not range then
55610: LD_VAR 0 4
55614: NOT
55615: IFFALSE 55626
// range := - 12 ;
55617: LD_ADDR_VAR 0 4
55621: PUSH
55622: LD_INT 12
55624: NEG
55625: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
55626: LD_VAR 0 1
55630: PPUSH
55631: LD_VAR 0 2
55635: PPUSH
55636: LD_VAR 0 3
55640: PPUSH
55641: LD_VAR 0 4
55645: PPUSH
55646: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
55650: LD_VAR 0 1
55654: PPUSH
55655: LD_VAR 0 2
55659: PPUSH
55660: LD_VAR 0 3
55664: PPUSH
55665: CALL_OW 331
// end ;
55669: LD_VAR 0 5
55673: RET
// export function Video ( mode ) ; begin
55674: LD_INT 0
55676: PPUSH
// ingame_video = mode ;
55677: LD_ADDR_OWVAR 52
55681: PUSH
55682: LD_VAR 0 1
55686: ST_TO_ADDR
// interface_hidden = mode ;
55687: LD_ADDR_OWVAR 54
55691: PUSH
55692: LD_VAR 0 1
55696: ST_TO_ADDR
// end ;
55697: LD_VAR 0 2
55701: RET
// export function Join ( array , element ) ; begin
55702: LD_INT 0
55704: PPUSH
// result := Replace ( array , array + 1 , element ) ;
55705: LD_ADDR_VAR 0 3
55709: PUSH
55710: LD_VAR 0 1
55714: PPUSH
55715: LD_VAR 0 1
55719: PUSH
55720: LD_INT 1
55722: PLUS
55723: PPUSH
55724: LD_VAR 0 2
55728: PPUSH
55729: CALL_OW 1
55733: ST_TO_ADDR
// end ;
55734: LD_VAR 0 3
55738: RET
// export function JoinUnion ( array , element ) ; begin
55739: LD_INT 0
55741: PPUSH
// result := array union element ;
55742: LD_ADDR_VAR 0 3
55746: PUSH
55747: LD_VAR 0 1
55751: PUSH
55752: LD_VAR 0 2
55756: UNION
55757: ST_TO_ADDR
// end ;
55758: LD_VAR 0 3
55762: RET
// export function GetBehemoths ( side ) ; begin
55763: LD_INT 0
55765: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
55766: LD_ADDR_VAR 0 2
55770: PUSH
55771: LD_INT 22
55773: PUSH
55774: LD_VAR 0 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 31
55785: PUSH
55786: LD_INT 25
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PPUSH
55797: CALL_OW 69
55801: ST_TO_ADDR
// end ;
55802: LD_VAR 0 2
55806: RET
// export function Shuffle ( array ) ; var i , index ; begin
55807: LD_INT 0
55809: PPUSH
55810: PPUSH
55811: PPUSH
// result := [ ] ;
55812: LD_ADDR_VAR 0 2
55816: PUSH
55817: EMPTY
55818: ST_TO_ADDR
// if not array then
55819: LD_VAR 0 1
55823: NOT
55824: IFFALSE 55828
// exit ;
55826: GO 55927
// Randomize ;
55828: CALL_OW 10
// for i = array downto 1 do
55832: LD_ADDR_VAR 0 3
55836: PUSH
55837: DOUBLE
55838: LD_VAR 0 1
55842: INC
55843: ST_TO_ADDR
55844: LD_INT 1
55846: PUSH
55847: FOR_DOWNTO
55848: IFFALSE 55925
// begin index := rand ( 1 , array ) ;
55850: LD_ADDR_VAR 0 4
55854: PUSH
55855: LD_INT 1
55857: PPUSH
55858: LD_VAR 0 1
55862: PPUSH
55863: CALL_OW 12
55867: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
55868: LD_ADDR_VAR 0 2
55872: PUSH
55873: LD_VAR 0 2
55877: PPUSH
55878: LD_VAR 0 2
55882: PUSH
55883: LD_INT 1
55885: PLUS
55886: PPUSH
55887: LD_VAR 0 1
55891: PUSH
55892: LD_VAR 0 4
55896: ARRAY
55897: PPUSH
55898: CALL_OW 2
55902: ST_TO_ADDR
// array := Delete ( array , index ) ;
55903: LD_ADDR_VAR 0 1
55907: PUSH
55908: LD_VAR 0 1
55912: PPUSH
55913: LD_VAR 0 4
55917: PPUSH
55918: CALL_OW 3
55922: ST_TO_ADDR
// end ;
55923: GO 55847
55925: POP
55926: POP
// end ;
55927: LD_VAR 0 2
55931: RET
// export function GetBaseMaterials ( base ) ; begin
55932: LD_INT 0
55934: PPUSH
// result := [ 0 , 0 , 0 ] ;
55935: LD_ADDR_VAR 0 2
55939: PUSH
55940: LD_INT 0
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// if not base then
55954: LD_VAR 0 1
55958: NOT
55959: IFFALSE 55963
// exit ;
55961: GO 56012
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
55963: LD_ADDR_VAR 0 2
55967: PUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: LD_INT 1
55975: PPUSH
55976: CALL_OW 275
55980: PUSH
55981: LD_VAR 0 1
55985: PPUSH
55986: LD_INT 2
55988: PPUSH
55989: CALL_OW 275
55993: PUSH
55994: LD_VAR 0 1
55998: PPUSH
55999: LD_INT 3
56001: PPUSH
56002: CALL_OW 275
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: LIST
56011: ST_TO_ADDR
// end ;
56012: LD_VAR 0 2
56016: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56017: LD_INT 0
56019: PPUSH
56020: PPUSH
// result := array ;
56021: LD_ADDR_VAR 0 3
56025: PUSH
56026: LD_VAR 0 1
56030: ST_TO_ADDR
// if size >= result then
56031: LD_VAR 0 2
56035: PUSH
56036: LD_VAR 0 3
56040: GREATEREQUAL
56041: IFFALSE 56045
// exit ;
56043: GO 56095
// if size then
56045: LD_VAR 0 2
56049: IFFALSE 56095
// for i := array downto size do
56051: LD_ADDR_VAR 0 4
56055: PUSH
56056: DOUBLE
56057: LD_VAR 0 1
56061: INC
56062: ST_TO_ADDR
56063: LD_VAR 0 2
56067: PUSH
56068: FOR_DOWNTO
56069: IFFALSE 56093
// result := Delete ( result , result ) ;
56071: LD_ADDR_VAR 0 3
56075: PUSH
56076: LD_VAR 0 3
56080: PPUSH
56081: LD_VAR 0 3
56085: PPUSH
56086: CALL_OW 3
56090: ST_TO_ADDR
56091: GO 56068
56093: POP
56094: POP
// end ;
56095: LD_VAR 0 3
56099: RET
// export function ComExit ( unit ) ; var tmp ; begin
56100: LD_INT 0
56102: PPUSH
56103: PPUSH
// if not IsInUnit ( unit ) then
56104: LD_VAR 0 1
56108: PPUSH
56109: CALL_OW 310
56113: NOT
56114: IFFALSE 56118
// exit ;
56116: GO 56178
// tmp := IsInUnit ( unit ) ;
56118: LD_ADDR_VAR 0 3
56122: PUSH
56123: LD_VAR 0 1
56127: PPUSH
56128: CALL_OW 310
56132: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56133: LD_VAR 0 3
56137: PPUSH
56138: CALL_OW 247
56142: PUSH
56143: LD_INT 2
56145: EQUAL
56146: IFFALSE 56159
// ComExitVehicle ( unit ) else
56148: LD_VAR 0 1
56152: PPUSH
56153: CALL_OW 121
56157: GO 56168
// ComExitBuilding ( unit ) ;
56159: LD_VAR 0 1
56163: PPUSH
56164: CALL_OW 122
// result := tmp ;
56168: LD_ADDR_VAR 0 2
56172: PUSH
56173: LD_VAR 0 3
56177: ST_TO_ADDR
// end ;
56178: LD_VAR 0 2
56182: RET
// export function ComExitAll ( units ) ; var i ; begin
56183: LD_INT 0
56185: PPUSH
56186: PPUSH
// if not units then
56187: LD_VAR 0 1
56191: NOT
56192: IFFALSE 56196
// exit ;
56194: GO 56222
// for i in units do
56196: LD_ADDR_VAR 0 3
56200: PUSH
56201: LD_VAR 0 1
56205: PUSH
56206: FOR_IN
56207: IFFALSE 56220
// ComExit ( i ) ;
56209: LD_VAR 0 3
56213: PPUSH
56214: CALL 56100 0 1
56218: GO 56206
56220: POP
56221: POP
// end ;
56222: LD_VAR 0 2
56226: RET
// export function ResetHc ; begin
56227: LD_INT 0
56229: PPUSH
// InitHc ;
56230: CALL_OW 19
// hc_importance := 0 ;
56234: LD_ADDR_OWVAR 32
56238: PUSH
56239: LD_INT 0
56241: ST_TO_ADDR
// end ;
56242: LD_VAR 0 1
56246: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
56247: LD_INT 0
56249: PPUSH
56250: PPUSH
56251: PPUSH
// _x := ( x1 + x2 ) div 2 ;
56252: LD_ADDR_VAR 0 6
56256: PUSH
56257: LD_VAR 0 1
56261: PUSH
56262: LD_VAR 0 3
56266: PLUS
56267: PUSH
56268: LD_INT 2
56270: DIV
56271: ST_TO_ADDR
// if _x < 0 then
56272: LD_VAR 0 6
56276: PUSH
56277: LD_INT 0
56279: LESS
56280: IFFALSE 56297
// _x := _x * - 1 ;
56282: LD_ADDR_VAR 0 6
56286: PUSH
56287: LD_VAR 0 6
56291: PUSH
56292: LD_INT 1
56294: NEG
56295: MUL
56296: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
56297: LD_ADDR_VAR 0 7
56301: PUSH
56302: LD_VAR 0 2
56306: PUSH
56307: LD_VAR 0 4
56311: PLUS
56312: PUSH
56313: LD_INT 2
56315: DIV
56316: ST_TO_ADDR
// if _y < 0 then
56317: LD_VAR 0 7
56321: PUSH
56322: LD_INT 0
56324: LESS
56325: IFFALSE 56342
// _y := _y * - 1 ;
56327: LD_ADDR_VAR 0 7
56331: PUSH
56332: LD_VAR 0 7
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: MUL
56341: ST_TO_ADDR
// result := [ _x , _y ] ;
56342: LD_ADDR_VAR 0 5
56346: PUSH
56347: LD_VAR 0 6
56351: PUSH
56352: LD_VAR 0 7
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// end ;
56361: LD_VAR 0 5
56365: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
56366: LD_INT 0
56368: PPUSH
56369: PPUSH
56370: PPUSH
56371: PPUSH
// task := GetTaskList ( unit ) ;
56372: LD_ADDR_VAR 0 7
56376: PUSH
56377: LD_VAR 0 1
56381: PPUSH
56382: CALL_OW 437
56386: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
56387: LD_VAR 0 7
56391: NOT
56392: IFFALSE 56411
56394: PUSH
56395: LD_VAR 0 1
56399: PPUSH
56400: LD_VAR 0 2
56404: PPUSH
56405: CALL_OW 308
56409: NOT
56410: AND
56411: IFFALSE 56415
// exit ;
56413: GO 56533
// if IsInArea ( unit , area ) then
56415: LD_VAR 0 1
56419: PPUSH
56420: LD_VAR 0 2
56424: PPUSH
56425: CALL_OW 308
56429: IFFALSE 56447
// begin ComMoveToArea ( unit , goAway ) ;
56431: LD_VAR 0 1
56435: PPUSH
56436: LD_VAR 0 3
56440: PPUSH
56441: CALL_OW 113
// exit ;
56445: GO 56533
// end ; if task [ 1 ] [ 1 ] <> M then
56447: LD_VAR 0 7
56451: PUSH
56452: LD_INT 1
56454: ARRAY
56455: PUSH
56456: LD_INT 1
56458: ARRAY
56459: PUSH
56460: LD_STRING M
56462: NONEQUAL
56463: IFFALSE 56467
// exit ;
56465: GO 56533
// x := task [ 1 ] [ 2 ] ;
56467: LD_ADDR_VAR 0 5
56471: PUSH
56472: LD_VAR 0 7
56476: PUSH
56477: LD_INT 1
56479: ARRAY
56480: PUSH
56481: LD_INT 2
56483: ARRAY
56484: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
56485: LD_ADDR_VAR 0 6
56489: PUSH
56490: LD_VAR 0 7
56494: PUSH
56495: LD_INT 1
56497: ARRAY
56498: PUSH
56499: LD_INT 3
56501: ARRAY
56502: ST_TO_ADDR
// if InArea ( x , y , area ) then
56503: LD_VAR 0 5
56507: PPUSH
56508: LD_VAR 0 6
56512: PPUSH
56513: LD_VAR 0 2
56517: PPUSH
56518: CALL_OW 309
56522: IFFALSE 56533
// ComStop ( unit ) ;
56524: LD_VAR 0 1
56528: PPUSH
56529: CALL_OW 141
// end ;
56533: LD_VAR 0 4
56537: RET
// export function Abs ( value ) ; begin
56538: LD_INT 0
56540: PPUSH
// result := value ;
56541: LD_ADDR_VAR 0 2
56545: PUSH
56546: LD_VAR 0 1
56550: ST_TO_ADDR
// if value < 0 then
56551: LD_VAR 0 1
56555: PUSH
56556: LD_INT 0
56558: LESS
56559: IFFALSE 56576
// result := value * - 1 ;
56561: LD_ADDR_VAR 0 2
56565: PUSH
56566: LD_VAR 0 1
56570: PUSH
56571: LD_INT 1
56573: NEG
56574: MUL
56575: ST_TO_ADDR
// end ;
56576: LD_VAR 0 2
56580: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
56581: LD_INT 0
56583: PPUSH
56584: PPUSH
56585: PPUSH
56586: PPUSH
56587: PPUSH
56588: PPUSH
56589: PPUSH
56590: PPUSH
// if not unit or not building then
56591: LD_VAR 0 1
56595: NOT
56596: IFTRUE 56605
56598: PUSH
56599: LD_VAR 0 2
56603: NOT
56604: OR
56605: IFFALSE 56609
// exit ;
56607: GO 56837
// x := GetX ( building ) ;
56609: LD_ADDR_VAR 0 4
56613: PUSH
56614: LD_VAR 0 2
56618: PPUSH
56619: CALL_OW 250
56623: ST_TO_ADDR
// y := GetY ( building ) ;
56624: LD_ADDR_VAR 0 6
56628: PUSH
56629: LD_VAR 0 2
56633: PPUSH
56634: CALL_OW 251
56638: ST_TO_ADDR
// d := GetDir ( building ) ;
56639: LD_ADDR_VAR 0 8
56643: PUSH
56644: LD_VAR 0 2
56648: PPUSH
56649: CALL_OW 254
56653: ST_TO_ADDR
// r := 4 ;
56654: LD_ADDR_VAR 0 9
56658: PUSH
56659: LD_INT 4
56661: ST_TO_ADDR
// for i := 1 to 5 do
56662: LD_ADDR_VAR 0 10
56666: PUSH
56667: DOUBLE
56668: LD_INT 1
56670: DEC
56671: ST_TO_ADDR
56672: LD_INT 5
56674: PUSH
56675: FOR_TO
56676: IFFALSE 56835
// begin _x := ShiftX ( x , d , r + i ) ;
56678: LD_ADDR_VAR 0 5
56682: PUSH
56683: LD_VAR 0 4
56687: PPUSH
56688: LD_VAR 0 8
56692: PPUSH
56693: LD_VAR 0 9
56697: PUSH
56698: LD_VAR 0 10
56702: PLUS
56703: PPUSH
56704: CALL_OW 272
56708: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
56709: LD_ADDR_VAR 0 7
56713: PUSH
56714: LD_VAR 0 6
56718: PPUSH
56719: LD_VAR 0 8
56723: PPUSH
56724: LD_VAR 0 9
56728: PUSH
56729: LD_VAR 0 10
56733: PLUS
56734: PPUSH
56735: CALL_OW 273
56739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
56740: LD_VAR 0 5
56744: PPUSH
56745: LD_VAR 0 7
56749: PPUSH
56750: CALL_OW 488
56754: IFFALSE 56789
56756: PUSH
56757: LD_VAR 0 5
56761: PPUSH
56762: LD_VAR 0 7
56766: PPUSH
56767: CALL_OW 428
56771: PPUSH
56772: CALL_OW 247
56776: PUSH
56777: LD_INT 3
56779: PUSH
56780: LD_INT 2
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: IN
56787: NOT
56788: AND
56789: IFFALSE 56833
// begin ComMoveXY ( unit , _x , _y ) ;
56791: LD_VAR 0 1
56795: PPUSH
56796: LD_VAR 0 5
56800: PPUSH
56801: LD_VAR 0 7
56805: PPUSH
56806: CALL_OW 111
// result := [ _x , _y ] ;
56810: LD_ADDR_VAR 0 3
56814: PUSH
56815: LD_VAR 0 5
56819: PUSH
56820: LD_VAR 0 7
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: ST_TO_ADDR
// exit ;
56829: POP
56830: POP
56831: GO 56837
// end ; end ;
56833: GO 56675
56835: POP
56836: POP
// end ;
56837: LD_VAR 0 3
56841: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
56842: LD_INT 0
56844: PPUSH
56845: PPUSH
56846: PPUSH
// result := 0 ;
56847: LD_ADDR_VAR 0 3
56851: PUSH
56852: LD_INT 0
56854: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
56855: LD_VAR 0 1
56859: PUSH
56860: LD_INT 0
56862: LESS
56863: IFTRUE 56875
56865: PUSH
56866: LD_VAR 0 1
56870: PUSH
56871: LD_INT 8
56873: GREATER
56874: OR
56875: IFTRUE 56887
56877: PUSH
56878: LD_VAR 0 2
56882: PUSH
56883: LD_INT 0
56885: LESS
56886: OR
56887: IFTRUE 56899
56889: PUSH
56890: LD_VAR 0 2
56894: PUSH
56895: LD_INT 8
56897: GREATER
56898: OR
56899: IFFALSE 56903
// exit ;
56901: GO 56978
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
56903: LD_ADDR_VAR 0 4
56907: PUSH
56908: LD_INT 22
56910: PUSH
56911: LD_VAR 0 2
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PPUSH
56920: CALL_OW 69
56924: PUSH
56925: FOR_IN
56926: IFFALSE 56976
// begin un := UnitShoot ( i ) ;
56928: LD_ADDR_VAR 0 5
56932: PUSH
56933: LD_VAR 0 4
56937: PPUSH
56938: CALL_OW 504
56942: ST_TO_ADDR
// if GetSide ( un ) = side1 then
56943: LD_VAR 0 5
56947: PPUSH
56948: CALL_OW 255
56952: PUSH
56953: LD_VAR 0 1
56957: EQUAL
56958: IFFALSE 56974
// begin result := un ;
56960: LD_ADDR_VAR 0 3
56964: PUSH
56965: LD_VAR 0 5
56969: ST_TO_ADDR
// exit ;
56970: POP
56971: POP
56972: GO 56978
// end ; end ;
56974: GO 56925
56976: POP
56977: POP
// end ;
56978: LD_VAR 0 3
56982: RET
// export function GetCargoBay ( units ) ; begin
56983: LD_INT 0
56985: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
56986: LD_ADDR_VAR 0 2
56990: PUSH
56991: LD_VAR 0 1
56995: PPUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 34
57001: PUSH
57002: LD_INT 12
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 34
57011: PUSH
57012: LD_INT 51
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: LD_INT 34
57021: PUSH
57022: LD_INT 32
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 34
57031: PUSH
57032: LD_INT 89
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: PPUSH
57046: CALL_OW 72
57050: ST_TO_ADDR
// end ;
57051: LD_VAR 0 2
57055: RET
// export function Negate ( value ) ; begin
57056: LD_INT 0
57058: PPUSH
// result := not value ;
57059: LD_ADDR_VAR 0 2
57063: PUSH
57064: LD_VAR 0 1
57068: NOT
57069: ST_TO_ADDR
// end ;
57070: LD_VAR 0 2
57074: RET
// export function Inc ( value ) ; begin
57075: LD_INT 0
57077: PPUSH
// result := value + 1 ;
57078: LD_ADDR_VAR 0 2
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_INT 1
57090: PLUS
57091: ST_TO_ADDR
// end ;
57092: LD_VAR 0 2
57096: RET
// export function Dec ( value ) ; begin
57097: LD_INT 0
57099: PPUSH
// result := value - 1 ;
57100: LD_ADDR_VAR 0 2
57104: PUSH
57105: LD_VAR 0 1
57109: PUSH
57110: LD_INT 1
57112: MINUS
57113: ST_TO_ADDR
// end ;
57114: LD_VAR 0 2
57118: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57119: LD_INT 0
57121: PPUSH
57122: PPUSH
57123: PPUSH
57124: PPUSH
57125: PPUSH
57126: PPUSH
57127: PPUSH
57128: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57129: LD_VAR 0 1
57133: PPUSH
57134: LD_VAR 0 2
57138: PPUSH
57139: CALL_OW 488
57143: NOT
57144: IFTRUE 57163
57146: PUSH
57147: LD_VAR 0 3
57151: PPUSH
57152: LD_VAR 0 4
57156: PPUSH
57157: CALL_OW 488
57161: NOT
57162: OR
57163: IFFALSE 57176
// begin result := - 1 ;
57165: LD_ADDR_VAR 0 5
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: ST_TO_ADDR
// exit ;
57174: GO 57411
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
57176: LD_ADDR_VAR 0 12
57180: PUSH
57181: LD_VAR 0 1
57185: PPUSH
57186: LD_VAR 0 2
57190: PPUSH
57191: LD_VAR 0 3
57195: PPUSH
57196: LD_VAR 0 4
57200: PPUSH
57201: CALL 56247 0 4
57205: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
57206: LD_ADDR_VAR 0 11
57210: PUSH
57211: LD_VAR 0 1
57215: PPUSH
57216: LD_VAR 0 2
57220: PPUSH
57221: LD_VAR 0 12
57225: PUSH
57226: LD_INT 1
57228: ARRAY
57229: PPUSH
57230: LD_VAR 0 12
57234: PUSH
57235: LD_INT 2
57237: ARRAY
57238: PPUSH
57239: CALL_OW 298
57243: ST_TO_ADDR
// distance := 9999 ;
57244: LD_ADDR_VAR 0 10
57248: PUSH
57249: LD_INT 9999
57251: ST_TO_ADDR
// for i := 0 to 5 do
57252: LD_ADDR_VAR 0 6
57256: PUSH
57257: DOUBLE
57258: LD_INT 0
57260: DEC
57261: ST_TO_ADDR
57262: LD_INT 5
57264: PUSH
57265: FOR_TO
57266: IFFALSE 57409
// begin _x := ShiftX ( x1 , i , centerDist ) ;
57268: LD_ADDR_VAR 0 7
57272: PUSH
57273: LD_VAR 0 1
57277: PPUSH
57278: LD_VAR 0 6
57282: PPUSH
57283: LD_VAR 0 11
57287: PPUSH
57288: CALL_OW 272
57292: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
57293: LD_ADDR_VAR 0 8
57297: PUSH
57298: LD_VAR 0 2
57302: PPUSH
57303: LD_VAR 0 6
57307: PPUSH
57308: LD_VAR 0 11
57312: PPUSH
57313: CALL_OW 273
57317: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
57318: LD_VAR 0 7
57322: PPUSH
57323: LD_VAR 0 8
57327: PPUSH
57328: CALL_OW 488
57332: NOT
57333: IFFALSE 57337
// continue ;
57335: GO 57265
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
57337: LD_ADDR_VAR 0 9
57341: PUSH
57342: LD_VAR 0 12
57346: PUSH
57347: LD_INT 1
57349: ARRAY
57350: PPUSH
57351: LD_VAR 0 12
57355: PUSH
57356: LD_INT 2
57358: ARRAY
57359: PPUSH
57360: LD_VAR 0 7
57364: PPUSH
57365: LD_VAR 0 8
57369: PPUSH
57370: CALL_OW 298
57374: ST_TO_ADDR
// if tmp < distance then
57375: LD_VAR 0 9
57379: PUSH
57380: LD_VAR 0 10
57384: LESS
57385: IFFALSE 57407
// begin result := i ;
57387: LD_ADDR_VAR 0 5
57391: PUSH
57392: LD_VAR 0 6
57396: ST_TO_ADDR
// distance := tmp ;
57397: LD_ADDR_VAR 0 10
57401: PUSH
57402: LD_VAR 0 9
57406: ST_TO_ADDR
// end ; end ;
57407: GO 57265
57409: POP
57410: POP
// end ;
57411: LD_VAR 0 5
57415: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57416: LD_INT 0
57418: PPUSH
57419: PPUSH
// if not driver or not IsInUnit ( driver ) then
57420: LD_VAR 0 1
57424: NOT
57425: IFTRUE 57439
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 310
57437: NOT
57438: OR
57439: IFFALSE 57443
// exit ;
57441: GO 57533
// vehicle := IsInUnit ( driver ) ;
57443: LD_ADDR_VAR 0 3
57447: PUSH
57448: LD_VAR 0 1
57452: PPUSH
57453: CALL_OW 310
57457: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57458: LD_VAR 0 1
57462: PPUSH
57463: LD_STRING \
57465: PUSH
57466: LD_INT 0
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 0
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 0
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: PUSH
57493: LD_STRING E
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_VAR 0 3
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PPUSH
57529: CALL_OW 446
// end ;
57533: LD_VAR 0 2
57537: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
57538: LD_INT 0
57540: PPUSH
57541: PPUSH
// if not driver or not IsInUnit ( driver ) then
57542: LD_VAR 0 1
57546: NOT
57547: IFTRUE 57561
57549: PUSH
57550: LD_VAR 0 1
57554: PPUSH
57555: CALL_OW 310
57559: NOT
57560: OR
57561: IFFALSE 57565
// exit ;
57563: GO 57655
// vehicle := IsInUnit ( driver ) ;
57565: LD_ADDR_VAR 0 3
57569: PUSH
57570: LD_VAR 0 1
57574: PPUSH
57575: CALL_OW 310
57579: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
57580: LD_VAR 0 1
57584: PPUSH
57585: LD_STRING \
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 0
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: PUSH
57615: LD_STRING E
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_VAR 0 3
57628: PUSH
57629: LD_INT 0
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PPUSH
57651: CALL_OW 447
// end ;
57655: LD_VAR 0 2
57659: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
57660: LD_INT 0
57662: PPUSH
57663: PPUSH
57664: PPUSH
// tmp := [ ] ;
57665: LD_ADDR_VAR 0 5
57669: PUSH
57670: EMPTY
57671: ST_TO_ADDR
// for i in units do
57672: LD_ADDR_VAR 0 4
57676: PUSH
57677: LD_VAR 0 1
57681: PUSH
57682: FOR_IN
57683: IFFALSE 57721
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
57685: LD_ADDR_VAR 0 5
57689: PUSH
57690: LD_VAR 0 5
57694: PPUSH
57695: LD_VAR 0 5
57699: PUSH
57700: LD_INT 1
57702: PLUS
57703: PPUSH
57704: LD_VAR 0 4
57708: PPUSH
57709: CALL_OW 256
57713: PPUSH
57714: CALL_OW 2
57718: ST_TO_ADDR
57719: GO 57682
57721: POP
57722: POP
// if not tmp then
57723: LD_VAR 0 5
57727: NOT
57728: IFFALSE 57732
// exit ;
57730: GO 57780
// if asc then
57732: LD_VAR 0 2
57736: IFFALSE 57760
// result := SortListByListAsc ( units , tmp ) else
57738: LD_ADDR_VAR 0 3
57742: PUSH
57743: LD_VAR 0 1
57747: PPUSH
57748: LD_VAR 0 5
57752: PPUSH
57753: CALL_OW 76
57757: ST_TO_ADDR
57758: GO 57780
// result := SortListByListDesc ( units , tmp ) ;
57760: LD_ADDR_VAR 0 3
57764: PUSH
57765: LD_VAR 0 1
57769: PPUSH
57770: LD_VAR 0 5
57774: PPUSH
57775: CALL_OW 77
57779: ST_TO_ADDR
// end ;
57780: LD_VAR 0 3
57784: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
57785: LD_INT 0
57787: PPUSH
57788: PPUSH
// task := GetTaskList ( mech ) ;
57789: LD_ADDR_VAR 0 4
57793: PUSH
57794: LD_VAR 0 1
57798: PPUSH
57799: CALL_OW 437
57803: ST_TO_ADDR
// if not task then
57804: LD_VAR 0 4
57808: NOT
57809: IFFALSE 57813
// exit ;
57811: GO 57857
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
57813: LD_ADDR_VAR 0 3
57817: PUSH
57818: LD_VAR 0 4
57822: PUSH
57823: LD_INT 1
57825: ARRAY
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PUSH
57831: LD_STRING r
57833: EQUAL
57834: IFFALSE 57856
57836: PUSH
57837: LD_VAR 0 4
57841: PUSH
57842: LD_INT 1
57844: ARRAY
57845: PUSH
57846: LD_INT 4
57848: ARRAY
57849: PUSH
57850: LD_VAR 0 2
57854: EQUAL
57855: AND
57856: ST_TO_ADDR
// end ;
57857: LD_VAR 0 3
57861: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
57862: LD_INT 0
57864: PPUSH
// SetDir ( unit , d ) ;
57865: LD_VAR 0 1
57869: PPUSH
57870: LD_VAR 0 4
57874: PPUSH
57875: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
57879: LD_ADDR_VAR 0 6
57883: PUSH
57884: LD_VAR 0 1
57888: PPUSH
57889: LD_VAR 0 2
57893: PPUSH
57894: LD_VAR 0 3
57898: PPUSH
57899: LD_VAR 0 5
57903: PPUSH
57904: CALL_OW 48
57908: ST_TO_ADDR
// end ;
57909: LD_VAR 0 6
57913: RET
// export function ToNaturalNumber ( number ) ; begin
57914: LD_INT 0
57916: PPUSH
// result := number div 1 ;
57917: LD_ADDR_VAR 0 2
57921: PUSH
57922: LD_VAR 0 1
57926: PUSH
57927: LD_INT 1
57929: DIV
57930: ST_TO_ADDR
// if number < 0 then
57931: LD_VAR 0 1
57935: PUSH
57936: LD_INT 0
57938: LESS
57939: IFFALSE 57949
// result := 0 ;
57941: LD_ADDR_VAR 0 2
57945: PUSH
57946: LD_INT 0
57948: ST_TO_ADDR
// end ;
57949: LD_VAR 0 2
57953: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
57954: LD_INT 0
57956: PPUSH
57957: PPUSH
57958: PPUSH
// if not buildings then
57959: LD_VAR 0 1
57963: NOT
57964: IFFALSE 57968
// exit ;
57966: GO 58083
// tmp := [ ] ;
57968: LD_ADDR_VAR 0 5
57972: PUSH
57973: EMPTY
57974: ST_TO_ADDR
// for b in buildings do
57975: LD_ADDR_VAR 0 4
57979: PUSH
57980: LD_VAR 0 1
57984: PUSH
57985: FOR_IN
57986: IFFALSE 58024
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
57988: LD_ADDR_VAR 0 5
57992: PUSH
57993: LD_VAR 0 5
57997: PPUSH
57998: LD_VAR 0 5
58002: PUSH
58003: LD_INT 1
58005: PLUS
58006: PPUSH
58007: LD_VAR 0 4
58011: PPUSH
58012: CALL_OW 266
58016: PPUSH
58017: CALL_OW 1
58021: ST_TO_ADDR
58022: GO 57985
58024: POP
58025: POP
// if not tmp then
58026: LD_VAR 0 5
58030: NOT
58031: IFFALSE 58035
// exit ;
58033: GO 58083
// if asc then
58035: LD_VAR 0 2
58039: IFFALSE 58063
// result := SortListByListAsc ( buildings , tmp ) else
58041: LD_ADDR_VAR 0 3
58045: PUSH
58046: LD_VAR 0 1
58050: PPUSH
58051: LD_VAR 0 5
58055: PPUSH
58056: CALL_OW 76
58060: ST_TO_ADDR
58061: GO 58083
// result := SortListByListDesc ( buildings , tmp ) ;
58063: LD_ADDR_VAR 0 3
58067: PUSH
58068: LD_VAR 0 1
58072: PPUSH
58073: LD_VAR 0 5
58077: PPUSH
58078: CALL_OW 77
58082: ST_TO_ADDR
// end ;
58083: LD_VAR 0 3
58087: RET
// export function SortByClass ( units , class ) ; var un ; begin
58088: LD_INT 0
58090: PPUSH
58091: PPUSH
// if not units or not class then
58092: LD_VAR 0 1
58096: NOT
58097: IFTRUE 58106
58099: PUSH
58100: LD_VAR 0 2
58104: NOT
58105: OR
58106: IFFALSE 58110
// exit ;
58108: GO 58205
// result := [ ] ;
58110: LD_ADDR_VAR 0 3
58114: PUSH
58115: EMPTY
58116: ST_TO_ADDR
// for un in units do
58117: LD_ADDR_VAR 0 4
58121: PUSH
58122: LD_VAR 0 1
58126: PUSH
58127: FOR_IN
58128: IFFALSE 58203
// if GetClass ( un ) = class then
58130: LD_VAR 0 4
58134: PPUSH
58135: CALL_OW 257
58139: PUSH
58140: LD_VAR 0 2
58144: EQUAL
58145: IFFALSE 58172
// result := Insert ( result , 1 , un ) else
58147: LD_ADDR_VAR 0 3
58151: PUSH
58152: LD_VAR 0 3
58156: PPUSH
58157: LD_INT 1
58159: PPUSH
58160: LD_VAR 0 4
58164: PPUSH
58165: CALL_OW 2
58169: ST_TO_ADDR
58170: GO 58201
// result := Replace ( result , result + 1 , un ) ;
58172: LD_ADDR_VAR 0 3
58176: PUSH
58177: LD_VAR 0 3
58181: PPUSH
58182: LD_VAR 0 3
58186: PUSH
58187: LD_INT 1
58189: PLUS
58190: PPUSH
58191: LD_VAR 0 4
58195: PPUSH
58196: CALL_OW 1
58200: ST_TO_ADDR
58201: GO 58127
58203: POP
58204: POP
// end ;
58205: LD_VAR 0 3
58209: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58210: LD_INT 0
58212: PPUSH
58213: PPUSH
58214: PPUSH
58215: PPUSH
58216: PPUSH
58217: PPUSH
58218: PPUSH
// result := [ ] ;
58219: LD_ADDR_VAR 0 4
58223: PUSH
58224: EMPTY
58225: ST_TO_ADDR
// if x - r < 0 then
58226: LD_VAR 0 1
58230: PUSH
58231: LD_VAR 0 3
58235: MINUS
58236: PUSH
58237: LD_INT 0
58239: LESS
58240: IFFALSE 58252
// min_x := 0 else
58242: LD_ADDR_VAR 0 8
58246: PUSH
58247: LD_INT 0
58249: ST_TO_ADDR
58250: GO 58268
// min_x := x - r ;
58252: LD_ADDR_VAR 0 8
58256: PUSH
58257: LD_VAR 0 1
58261: PUSH
58262: LD_VAR 0 3
58266: MINUS
58267: ST_TO_ADDR
// if y - r < 0 then
58268: LD_VAR 0 2
58272: PUSH
58273: LD_VAR 0 3
58277: MINUS
58278: PUSH
58279: LD_INT 0
58281: LESS
58282: IFFALSE 58294
// min_y := 0 else
58284: LD_ADDR_VAR 0 7
58288: PUSH
58289: LD_INT 0
58291: ST_TO_ADDR
58292: GO 58310
// min_y := y - r ;
58294: LD_ADDR_VAR 0 7
58298: PUSH
58299: LD_VAR 0 2
58303: PUSH
58304: LD_VAR 0 3
58308: MINUS
58309: ST_TO_ADDR
// max_x := x + r ;
58310: LD_ADDR_VAR 0 9
58314: PUSH
58315: LD_VAR 0 1
58319: PUSH
58320: LD_VAR 0 3
58324: PLUS
58325: ST_TO_ADDR
// max_y := y + r ;
58326: LD_ADDR_VAR 0 10
58330: PUSH
58331: LD_VAR 0 2
58335: PUSH
58336: LD_VAR 0 3
58340: PLUS
58341: ST_TO_ADDR
// for _x = min_x to max_x do
58342: LD_ADDR_VAR 0 5
58346: PUSH
58347: DOUBLE
58348: LD_VAR 0 8
58352: DEC
58353: ST_TO_ADDR
58354: LD_VAR 0 9
58358: PUSH
58359: FOR_TO
58360: IFFALSE 58461
// for _y = min_y to max_y do
58362: LD_ADDR_VAR 0 6
58366: PUSH
58367: DOUBLE
58368: LD_VAR 0 7
58372: DEC
58373: ST_TO_ADDR
58374: LD_VAR 0 10
58378: PUSH
58379: FOR_TO
58380: IFFALSE 58457
// begin if not ValidHex ( _x , _y ) then
58382: LD_VAR 0 5
58386: PPUSH
58387: LD_VAR 0 6
58391: PPUSH
58392: CALL_OW 488
58396: NOT
58397: IFFALSE 58401
// continue ;
58399: GO 58379
// if GetResourceTypeXY ( _x , _y ) then
58401: LD_VAR 0 5
58405: PPUSH
58406: LD_VAR 0 6
58410: PPUSH
58411: CALL_OW 283
58415: IFFALSE 58455
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
58417: LD_ADDR_VAR 0 4
58421: PUSH
58422: LD_VAR 0 4
58426: PPUSH
58427: LD_VAR 0 4
58431: PUSH
58432: LD_INT 1
58434: PLUS
58435: PPUSH
58436: LD_VAR 0 5
58440: PUSH
58441: LD_VAR 0 6
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PPUSH
58450: CALL_OW 1
58454: ST_TO_ADDR
// end ;
58455: GO 58379
58457: POP
58458: POP
58459: GO 58359
58461: POP
58462: POP
// end ;
58463: LD_VAR 0 4
58467: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
58468: LD_INT 0
58470: PPUSH
58471: PPUSH
58472: PPUSH
58473: PPUSH
58474: PPUSH
58475: PPUSH
58476: PPUSH
58477: PPUSH
// if not units then
58478: LD_VAR 0 1
58482: NOT
58483: IFFALSE 58487
// exit ;
58485: GO 59019
// result := UnitFilter ( units , [ f_ok ] ) ;
58487: LD_ADDR_VAR 0 3
58491: PUSH
58492: LD_VAR 0 1
58496: PPUSH
58497: LD_INT 50
58499: PUSH
58500: EMPTY
58501: LIST
58502: PPUSH
58503: CALL_OW 72
58507: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
58508: LD_ADDR_VAR 0 8
58512: PUSH
58513: LD_VAR 0 1
58517: PUSH
58518: LD_INT 1
58520: ARRAY
58521: PPUSH
58522: CALL_OW 255
58526: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
58527: LD_ADDR_VAR 0 10
58531: PUSH
58532: LD_INT 29
58534: PUSH
58535: LD_INT 91
58537: PUSH
58538: LD_INT 49
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: ST_TO_ADDR
// if not result then
58546: LD_VAR 0 3
58550: NOT
58551: IFFALSE 58555
// exit ;
58553: GO 59019
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
58555: LD_ADDR_VAR 0 5
58559: PUSH
58560: LD_INT 81
58562: PUSH
58563: LD_VAR 0 8
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PPUSH
58572: CALL_OW 69
58576: ST_TO_ADDR
// for i in result do
58577: LD_ADDR_VAR 0 4
58581: PUSH
58582: LD_VAR 0 3
58586: PUSH
58587: FOR_IN
58588: IFFALSE 59017
// begin tag := GetTag ( i ) + 1 ;
58590: LD_ADDR_VAR 0 9
58594: PUSH
58595: LD_VAR 0 4
58599: PPUSH
58600: CALL_OW 110
58604: PUSH
58605: LD_INT 1
58607: PLUS
58608: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
58609: LD_ADDR_VAR 0 7
58613: PUSH
58614: LD_VAR 0 4
58618: PPUSH
58619: CALL_OW 250
58623: PPUSH
58624: LD_VAR 0 4
58628: PPUSH
58629: CALL_OW 251
58633: PPUSH
58634: LD_INT 4
58636: PPUSH
58637: CALL 58210 0 3
58641: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
58642: LD_VAR 0 4
58646: PPUSH
58647: CALL_OW 247
58651: PUSH
58652: LD_INT 2
58654: EQUAL
58655: IFFALSE 58667
58657: PUSH
58658: LD_VAR 0 7
58662: PUSH
58663: LD_INT 2
58665: GREATER
58666: AND
58667: IFFALSE 58687
58669: PUSH
58670: LD_VAR 0 4
58674: PPUSH
58675: CALL_OW 264
58679: PUSH
58680: LD_VAR 0 10
58684: IN
58685: NOT
58686: AND
58687: IFFALSE 58726
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
58689: LD_VAR 0 4
58693: PPUSH
58694: LD_VAR 0 7
58698: PUSH
58699: LD_INT 1
58701: ARRAY
58702: PUSH
58703: LD_INT 1
58705: ARRAY
58706: PPUSH
58707: LD_VAR 0 7
58711: PUSH
58712: LD_INT 1
58714: ARRAY
58715: PUSH
58716: LD_INT 2
58718: ARRAY
58719: PPUSH
58720: CALL_OW 116
58724: GO 59015
// if path > tag then
58726: LD_VAR 0 2
58730: PUSH
58731: LD_VAR 0 9
58735: GREATER
58736: IFFALSE 58944
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
58738: LD_ADDR_VAR 0 6
58742: PUSH
58743: LD_VAR 0 5
58747: PPUSH
58748: LD_INT 91
58750: PUSH
58751: LD_VAR 0 4
58755: PUSH
58756: LD_INT 8
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: PPUSH
58764: CALL_OW 72
58768: ST_TO_ADDR
// if nearEnemy then
58769: LD_VAR 0 6
58773: IFFALSE 58842
// begin if GetWeapon ( i ) = ru_time_lapser then
58775: LD_VAR 0 4
58779: PPUSH
58780: CALL_OW 264
58784: PUSH
58785: LD_INT 49
58787: EQUAL
58788: IFFALSE 58816
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
58790: LD_VAR 0 4
58794: PPUSH
58795: LD_VAR 0 6
58799: PPUSH
58800: LD_VAR 0 4
58804: PPUSH
58805: CALL_OW 74
58809: PPUSH
58810: CALL_OW 112
58814: GO 58840
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
58816: LD_VAR 0 4
58820: PPUSH
58821: LD_VAR 0 6
58825: PPUSH
58826: LD_VAR 0 4
58830: PPUSH
58831: CALL_OW 74
58835: PPUSH
58836: CALL 60100 0 2
// end else
58840: GO 58942
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
58842: LD_VAR 0 4
58846: PPUSH
58847: LD_VAR 0 2
58851: PUSH
58852: LD_VAR 0 9
58856: ARRAY
58857: PUSH
58858: LD_INT 1
58860: ARRAY
58861: PPUSH
58862: LD_VAR 0 2
58866: PUSH
58867: LD_VAR 0 9
58871: ARRAY
58872: PUSH
58873: LD_INT 2
58875: ARRAY
58876: PPUSH
58877: CALL_OW 297
58881: PUSH
58882: LD_INT 6
58884: GREATER
58885: IFFALSE 58928
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
58887: LD_VAR 0 4
58891: PPUSH
58892: LD_VAR 0 2
58896: PUSH
58897: LD_VAR 0 9
58901: ARRAY
58902: PUSH
58903: LD_INT 1
58905: ARRAY
58906: PPUSH
58907: LD_VAR 0 2
58911: PUSH
58912: LD_VAR 0 9
58916: ARRAY
58917: PUSH
58918: LD_INT 2
58920: ARRAY
58921: PPUSH
58922: CALL_OW 114
58926: GO 58942
// SetTag ( i , tag ) ;
58928: LD_VAR 0 4
58932: PPUSH
58933: LD_VAR 0 9
58937: PPUSH
58938: CALL_OW 109
// end else
58942: GO 59015
// if enemy then
58944: LD_VAR 0 5
58948: IFFALSE 59015
// begin if GetWeapon ( i ) = ru_time_lapser then
58950: LD_VAR 0 4
58954: PPUSH
58955: CALL_OW 264
58959: PUSH
58960: LD_INT 49
58962: EQUAL
58963: IFFALSE 58991
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
58965: LD_VAR 0 4
58969: PPUSH
58970: LD_VAR 0 5
58974: PPUSH
58975: LD_VAR 0 4
58979: PPUSH
58980: CALL_OW 74
58984: PPUSH
58985: CALL_OW 112
58989: GO 59015
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
58991: LD_VAR 0 4
58995: PPUSH
58996: LD_VAR 0 5
59000: PPUSH
59001: LD_VAR 0 4
59005: PPUSH
59006: CALL_OW 74
59010: PPUSH
59011: CALL 60100 0 2
// end ; end ;
59015: GO 58587
59017: POP
59018: POP
// end ;
59019: LD_VAR 0 3
59023: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59024: LD_INT 0
59026: PPUSH
59027: PPUSH
59028: PPUSH
// if not unit or IsInUnit ( unit ) then
59029: LD_VAR 0 1
59033: NOT
59034: IFTRUE 59047
59036: PUSH
59037: LD_VAR 0 1
59041: PPUSH
59042: CALL_OW 310
59046: OR
59047: IFFALSE 59051
// exit ;
59049: GO 59142
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59051: LD_ADDR_VAR 0 4
59055: PUSH
59056: LD_VAR 0 1
59060: PPUSH
59061: CALL_OW 250
59065: PPUSH
59066: LD_VAR 0 2
59070: PPUSH
59071: LD_INT 1
59073: PPUSH
59074: CALL_OW 272
59078: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59079: LD_ADDR_VAR 0 5
59083: PUSH
59084: LD_VAR 0 1
59088: PPUSH
59089: CALL_OW 251
59093: PPUSH
59094: LD_VAR 0 2
59098: PPUSH
59099: LD_INT 1
59101: PPUSH
59102: CALL_OW 273
59106: ST_TO_ADDR
// if ValidHex ( x , y ) then
59107: LD_VAR 0 4
59111: PPUSH
59112: LD_VAR 0 5
59116: PPUSH
59117: CALL_OW 488
59121: IFFALSE 59142
// ComTurnXY ( unit , x , y ) ;
59123: LD_VAR 0 1
59127: PPUSH
59128: LD_VAR 0 4
59132: PPUSH
59133: LD_VAR 0 5
59137: PPUSH
59138: CALL_OW 118
// end ;
59142: LD_VAR 0 3
59146: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59147: LD_INT 0
59149: PPUSH
59150: PPUSH
// result := false ;
59151: LD_ADDR_VAR 0 3
59155: PUSH
59156: LD_INT 0
59158: ST_TO_ADDR
// if not units then
59159: LD_VAR 0 2
59163: NOT
59164: IFFALSE 59168
// exit ;
59166: GO 59213
// for i in units do
59168: LD_ADDR_VAR 0 4
59172: PUSH
59173: LD_VAR 0 2
59177: PUSH
59178: FOR_IN
59179: IFFALSE 59211
// if See ( side , i ) then
59181: LD_VAR 0 1
59185: PPUSH
59186: LD_VAR 0 4
59190: PPUSH
59191: CALL_OW 292
59195: IFFALSE 59209
// begin result := true ;
59197: LD_ADDR_VAR 0 3
59201: PUSH
59202: LD_INT 1
59204: ST_TO_ADDR
// exit ;
59205: POP
59206: POP
59207: GO 59213
// end ;
59209: GO 59178
59211: POP
59212: POP
// end ;
59213: LD_VAR 0 3
59217: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59218: LD_INT 0
59220: PPUSH
59221: PPUSH
59222: PPUSH
59223: PPUSH
// if not unit or not points then
59224: LD_VAR 0 1
59228: NOT
59229: IFTRUE 59238
59231: PUSH
59232: LD_VAR 0 2
59236: NOT
59237: OR
59238: IFFALSE 59242
// exit ;
59240: GO 59332
// dist := 99999 ;
59242: LD_ADDR_VAR 0 5
59246: PUSH
59247: LD_INT 99999
59249: ST_TO_ADDR
// for i in points do
59250: LD_ADDR_VAR 0 4
59254: PUSH
59255: LD_VAR 0 2
59259: PUSH
59260: FOR_IN
59261: IFFALSE 59330
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59263: LD_ADDR_VAR 0 6
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: LD_VAR 0 4
59277: PUSH
59278: LD_INT 1
59280: ARRAY
59281: PPUSH
59282: LD_VAR 0 4
59286: PUSH
59287: LD_INT 2
59289: ARRAY
59290: PPUSH
59291: CALL_OW 297
59295: ST_TO_ADDR
// if tmpDist < dist then
59296: LD_VAR 0 6
59300: PUSH
59301: LD_VAR 0 5
59305: LESS
59306: IFFALSE 59328
// begin result := i ;
59308: LD_ADDR_VAR 0 3
59312: PUSH
59313: LD_VAR 0 4
59317: ST_TO_ADDR
// dist := tmpDist ;
59318: LD_ADDR_VAR 0 5
59322: PUSH
59323: LD_VAR 0 6
59327: ST_TO_ADDR
// end ; end ;
59328: GO 59260
59330: POP
59331: POP
// end ;
59332: LD_VAR 0 3
59336: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
59337: LD_INT 0
59339: PPUSH
// uc_side := side ;
59340: LD_ADDR_OWVAR 20
59344: PUSH
59345: LD_VAR 0 1
59349: ST_TO_ADDR
// uc_nation := 3 ;
59350: LD_ADDR_OWVAR 21
59354: PUSH
59355: LD_INT 3
59357: ST_TO_ADDR
// vc_chassis := 25 ;
59358: LD_ADDR_OWVAR 37
59362: PUSH
59363: LD_INT 25
59365: ST_TO_ADDR
// vc_engine := engine_siberite ;
59366: LD_ADDR_OWVAR 39
59370: PUSH
59371: LD_INT 3
59373: ST_TO_ADDR
// vc_control := control_computer ;
59374: LD_ADDR_OWVAR 38
59378: PUSH
59379: LD_INT 3
59381: ST_TO_ADDR
// vc_weapon := 59 ;
59382: LD_ADDR_OWVAR 40
59386: PUSH
59387: LD_INT 59
59389: ST_TO_ADDR
// result := CreateVehicle ;
59390: LD_ADDR_VAR 0 5
59394: PUSH
59395: CALL_OW 45
59399: ST_TO_ADDR
// SetDir ( result , d ) ;
59400: LD_VAR 0 5
59404: PPUSH
59405: LD_VAR 0 4
59409: PPUSH
59410: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
59414: LD_VAR 0 5
59418: PPUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: LD_VAR 0 3
59428: PPUSH
59429: LD_INT 0
59431: PPUSH
59432: CALL_OW 48
// end ;
59436: LD_VAR 0 5
59440: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
59441: LD_INT 0
59443: PPUSH
59444: PPUSH
59445: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
59446: LD_ADDR_VAR 0 2
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: EMPTY
59464: LIST
59465: LIST
59466: LIST
59467: LIST
59468: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
59469: LD_VAR 0 1
59473: NOT
59474: IFTRUE 59507
59476: PUSH
59477: LD_VAR 0 1
59481: PPUSH
59482: CALL_OW 264
59486: PUSH
59487: LD_INT 12
59489: PUSH
59490: LD_INT 51
59492: PUSH
59493: LD_INT 32
59495: PUSH
59496: LD_INT 89
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: IN
59505: NOT
59506: OR
59507: IFFALSE 59511
// exit ;
59509: GO 59609
// for i := 1 to 3 do
59511: LD_ADDR_VAR 0 3
59515: PUSH
59516: DOUBLE
59517: LD_INT 1
59519: DEC
59520: ST_TO_ADDR
59521: LD_INT 3
59523: PUSH
59524: FOR_TO
59525: IFFALSE 59607
// begin tmp := GetCargo ( cargo , i ) ;
59527: LD_ADDR_VAR 0 4
59531: PUSH
59532: LD_VAR 0 1
59536: PPUSH
59537: LD_VAR 0 3
59541: PPUSH
59542: CALL_OW 289
59546: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
59547: LD_ADDR_VAR 0 2
59551: PUSH
59552: LD_VAR 0 2
59556: PPUSH
59557: LD_VAR 0 3
59561: PPUSH
59562: LD_VAR 0 4
59566: PPUSH
59567: CALL_OW 1
59571: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
59572: LD_ADDR_VAR 0 2
59576: PUSH
59577: LD_VAR 0 2
59581: PPUSH
59582: LD_INT 4
59584: PPUSH
59585: LD_VAR 0 2
59589: PUSH
59590: LD_INT 4
59592: ARRAY
59593: PUSH
59594: LD_VAR 0 4
59598: PLUS
59599: PPUSH
59600: CALL_OW 1
59604: ST_TO_ADDR
// end ;
59605: GO 59524
59607: POP
59608: POP
// end ;
59609: LD_VAR 0 2
59613: RET
// export function Length ( array ) ; begin
59614: LD_INT 0
59616: PPUSH
// result := array + 0 ;
59617: LD_ADDR_VAR 0 2
59621: PUSH
59622: LD_VAR 0 1
59626: PUSH
59627: LD_INT 0
59629: PLUS
59630: ST_TO_ADDR
// end ;
59631: LD_VAR 0 2
59635: RET
// export function PrepareArray ( array ) ; begin
59636: LD_INT 0
59638: PPUSH
// result := array diff 0 ;
59639: LD_ADDR_VAR 0 2
59643: PUSH
59644: LD_VAR 0 1
59648: PUSH
59649: LD_INT 0
59651: DIFF
59652: ST_TO_ADDR
// if not result [ 1 ] then
59653: LD_VAR 0 2
59657: PUSH
59658: LD_INT 1
59660: ARRAY
59661: NOT
59662: IFFALSE 59682
// result := Delete ( result , 1 ) ;
59664: LD_ADDR_VAR 0 2
59668: PUSH
59669: LD_VAR 0 2
59673: PPUSH
59674: LD_INT 1
59676: PPUSH
59677: CALL_OW 3
59681: ST_TO_ADDR
// end ;
59682: LD_VAR 0 2
59686: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
59687: LD_INT 0
59689: PPUSH
59690: PPUSH
59691: PPUSH
59692: PPUSH
// sibRocketRange := 25 ;
59693: LD_ADDR_VAR 0 6
59697: PUSH
59698: LD_INT 25
59700: ST_TO_ADDR
// result := false ;
59701: LD_ADDR_VAR 0 4
59705: PUSH
59706: LD_INT 0
59708: ST_TO_ADDR
// for i := 0 to 5 do
59709: LD_ADDR_VAR 0 5
59713: PUSH
59714: DOUBLE
59715: LD_INT 0
59717: DEC
59718: ST_TO_ADDR
59719: LD_INT 5
59721: PUSH
59722: FOR_TO
59723: IFFALSE 59790
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
59725: LD_VAR 0 1
59729: PPUSH
59730: LD_VAR 0 5
59734: PPUSH
59735: LD_VAR 0 6
59739: PPUSH
59740: CALL_OW 272
59744: PPUSH
59745: LD_VAR 0 2
59749: PPUSH
59750: LD_VAR 0 5
59754: PPUSH
59755: LD_VAR 0 6
59759: PPUSH
59760: CALL_OW 273
59764: PPUSH
59765: LD_VAR 0 3
59769: PPUSH
59770: CALL_OW 309
59774: IFFALSE 59788
// begin result := true ;
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: LD_INT 1
59783: ST_TO_ADDR
// exit ;
59784: POP
59785: POP
59786: GO 59792
// end ;
59788: GO 59722
59790: POP
59791: POP
// end ;
59792: LD_VAR 0 4
59796: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59797: LD_INT 0
59799: PPUSH
59800: PPUSH
59801: PPUSH
// if btype = b_depot then
59802: LD_VAR 0 2
59806: PUSH
59807: LD_INT 0
59809: EQUAL
59810: IFFALSE 59822
// begin result := true ;
59812: LD_ADDR_VAR 0 3
59816: PUSH
59817: LD_INT 1
59819: ST_TO_ADDR
// exit ;
59820: GO 59942
// end ; pom := GetBase ( depot ) ;
59822: LD_ADDR_VAR 0 4
59826: PUSH
59827: LD_VAR 0 1
59831: PPUSH
59832: CALL_OW 274
59836: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59837: LD_ADDR_VAR 0 5
59841: PUSH
59842: LD_VAR 0 2
59846: PPUSH
59847: LD_VAR 0 1
59851: PPUSH
59852: CALL_OW 248
59856: PPUSH
59857: CALL_OW 450
59861: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59862: LD_ADDR_VAR 0 3
59866: PUSH
59867: LD_VAR 0 4
59871: PPUSH
59872: LD_INT 1
59874: PPUSH
59875: CALL_OW 275
59879: PUSH
59880: LD_VAR 0 5
59884: PUSH
59885: LD_INT 1
59887: ARRAY
59888: GREATEREQUAL
59889: IFFALSE 59915
59891: PUSH
59892: LD_VAR 0 4
59896: PPUSH
59897: LD_INT 2
59899: PPUSH
59900: CALL_OW 275
59904: PUSH
59905: LD_VAR 0 5
59909: PUSH
59910: LD_INT 2
59912: ARRAY
59913: GREATEREQUAL
59914: AND
59915: IFFALSE 59941
59917: PUSH
59918: LD_VAR 0 4
59922: PPUSH
59923: LD_INT 3
59925: PPUSH
59926: CALL_OW 275
59930: PUSH
59931: LD_VAR 0 5
59935: PUSH
59936: LD_INT 3
59938: ARRAY
59939: GREATEREQUAL
59940: AND
59941: ST_TO_ADDR
// end ;
59942: LD_VAR 0 3
59946: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
59947: LD_INT 0
59949: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
59950: LD_VAR 0 1
59954: PPUSH
59955: LD_VAR 0 2
59959: PPUSH
59960: LD_INT 0
59962: PPUSH
59963: LD_INT 0
59965: PPUSH
59966: LD_INT 1
59968: PPUSH
59969: LD_INT 0
59971: PPUSH
59972: CALL_OW 587
// end ;
59976: LD_VAR 0 3
59980: RET
// export function CenterOnNow ( unit ) ; begin
59981: LD_INT 0
59983: PPUSH
// result := IsInUnit ( unit ) ;
59984: LD_ADDR_VAR 0 2
59988: PUSH
59989: LD_VAR 0 1
59993: PPUSH
59994: CALL_OW 310
59998: ST_TO_ADDR
// if not result then
59999: LD_VAR 0 2
60003: NOT
60004: IFFALSE 60016
// result := unit ;
60006: LD_ADDR_VAR 0 2
60010: PUSH
60011: LD_VAR 0 1
60015: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 87
// end ;
60025: LD_VAR 0 2
60029: RET
// export function ComMoveHex ( unit , hex ) ; begin
60030: LD_INT 0
60032: PPUSH
// if not hex then
60033: LD_VAR 0 2
60037: NOT
60038: IFFALSE 60042
// exit ;
60040: GO 60095
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
60042: LD_VAR 0 2
60046: PUSH
60047: LD_INT 1
60049: ARRAY
60050: PPUSH
60051: LD_VAR 0 2
60055: PUSH
60056: LD_INT 2
60058: ARRAY
60059: PPUSH
60060: CALL_OW 428
60064: IFFALSE 60068
// exit ;
60066: GO 60095
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
60068: LD_VAR 0 1
60072: PPUSH
60073: LD_VAR 0 2
60077: PUSH
60078: LD_INT 1
60080: ARRAY
60081: PPUSH
60082: LD_VAR 0 2
60086: PUSH
60087: LD_INT 2
60089: ARRAY
60090: PPUSH
60091: CALL_OW 111
// end ;
60095: LD_VAR 0 3
60099: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
60100: LD_INT 0
60102: PPUSH
60103: PPUSH
60104: PPUSH
// if not unit or not enemy then
60105: LD_VAR 0 1
60109: NOT
60110: IFTRUE 60119
60112: PUSH
60113: LD_VAR 0 2
60117: NOT
60118: OR
60119: IFFALSE 60123
// exit ;
60121: GO 60249
// x := GetX ( enemy ) ;
60123: LD_ADDR_VAR 0 4
60127: PUSH
60128: LD_VAR 0 2
60132: PPUSH
60133: CALL_OW 250
60137: ST_TO_ADDR
// y := GetY ( enemy ) ;
60138: LD_ADDR_VAR 0 5
60142: PUSH
60143: LD_VAR 0 2
60147: PPUSH
60148: CALL_OW 251
60152: ST_TO_ADDR
// if ValidHex ( x , y ) then
60153: LD_VAR 0 4
60157: PPUSH
60158: LD_VAR 0 5
60162: PPUSH
60163: CALL_OW 488
60167: IFFALSE 60249
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
60169: LD_VAR 0 2
60173: PPUSH
60174: CALL_OW 247
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: IN
60189: IFTRUE 60212
60191: PUSH
60192: LD_VAR 0 1
60196: PPUSH
60197: CALL_OW 255
60201: PPUSH
60202: LD_VAR 0 2
60206: PPUSH
60207: CALL_OW 292
60211: OR
60212: IFFALSE 60230
// ComAttackUnit ( unit , enemy ) else
60214: LD_VAR 0 1
60218: PPUSH
60219: LD_VAR 0 2
60223: PPUSH
60224: CALL_OW 115
60228: GO 60249
// ComAgressiveMove ( unit , x , y ) ;
60230: LD_VAR 0 1
60234: PPUSH
60235: LD_VAR 0 4
60239: PPUSH
60240: LD_VAR 0 5
60244: PPUSH
60245: CALL_OW 114
// end ;
60249: LD_VAR 0 3
60253: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
60254: LD_INT 0
60256: PPUSH
60257: PPUSH
60258: PPUSH
// list := AreaToList ( area , 0 ) ;
60259: LD_ADDR_VAR 0 5
60263: PUSH
60264: LD_VAR 0 1
60268: PPUSH
60269: LD_INT 0
60271: PPUSH
60272: CALL_OW 517
60276: ST_TO_ADDR
// if not list then
60277: LD_VAR 0 5
60281: NOT
60282: IFFALSE 60286
// exit ;
60284: GO 60416
// if all then
60286: LD_VAR 0 2
60290: IFFALSE 60378
// begin for i := 1 to list [ 1 ] do
60292: LD_ADDR_VAR 0 4
60296: PUSH
60297: DOUBLE
60298: LD_INT 1
60300: DEC
60301: ST_TO_ADDR
60302: LD_VAR 0 5
60306: PUSH
60307: LD_INT 1
60309: ARRAY
60310: PUSH
60311: FOR_TO
60312: IFFALSE 60374
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
60314: LD_ADDR_VAR 0 3
60318: PUSH
60319: LD_VAR 0 3
60323: PPUSH
60324: LD_VAR 0 3
60328: PUSH
60329: LD_INT 1
60331: PLUS
60332: PPUSH
60333: LD_VAR 0 5
60337: PUSH
60338: LD_INT 1
60340: ARRAY
60341: PUSH
60342: LD_VAR 0 4
60346: ARRAY
60347: PUSH
60348: LD_VAR 0 5
60352: PUSH
60353: LD_INT 2
60355: ARRAY
60356: PUSH
60357: LD_VAR 0 4
60361: ARRAY
60362: PUSH
60363: EMPTY
60364: LIST
60365: LIST
60366: PPUSH
60367: CALL_OW 1
60371: ST_TO_ADDR
60372: GO 60311
60374: POP
60375: POP
// exit ;
60376: GO 60416
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
60378: LD_ADDR_VAR 0 3
60382: PUSH
60383: LD_VAR 0 5
60387: PUSH
60388: LD_INT 1
60390: ARRAY
60391: PUSH
60392: LD_INT 1
60394: ARRAY
60395: PUSH
60396: LD_VAR 0 5
60400: PUSH
60401: LD_INT 2
60403: ARRAY
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: ST_TO_ADDR
// end ;
60416: LD_VAR 0 3
60420: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
60421: LD_INT 0
60423: PPUSH
60424: PPUSH
// list := AreaToList ( area , 0 ) ;
60425: LD_ADDR_VAR 0 4
60429: PUSH
60430: LD_VAR 0 1
60434: PPUSH
60435: LD_INT 0
60437: PPUSH
60438: CALL_OW 517
60442: ST_TO_ADDR
// if not list then
60443: LD_VAR 0 4
60447: NOT
60448: IFFALSE 60452
// exit ;
60450: GO 60493
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
60452: LD_ADDR_VAR 0 3
60456: PUSH
60457: LD_VAR 0 4
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PUSH
60466: LD_INT 1
60468: ARRAY
60469: PUSH
60470: LD_VAR 0 4
60474: PUSH
60475: LD_INT 2
60477: ARRAY
60478: PUSH
60479: LD_INT 1
60481: ARRAY
60482: PUSH
60483: LD_VAR 0 2
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: LIST
60492: ST_TO_ADDR
// end ;
60493: LD_VAR 0 3
60497: RET
// export function First ( array ) ; begin
60498: LD_INT 0
60500: PPUSH
// if not array then
60501: LD_VAR 0 1
60505: NOT
60506: IFFALSE 60510
// exit ;
60508: GO 60524
// result := array [ 1 ] ;
60510: LD_ADDR_VAR 0 2
60514: PUSH
60515: LD_VAR 0 1
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: ST_TO_ADDR
// end ;
60524: LD_VAR 0 2
60528: RET
// export function Last ( array ) ; begin
60529: LD_INT 0
60531: PPUSH
// if not array then
60532: LD_VAR 0 1
60536: NOT
60537: IFFALSE 60541
// exit ;
60539: GO 60557
// result := array [ array ] ;
60541: LD_ADDR_VAR 0 2
60545: PUSH
60546: LD_VAR 0 1
60550: PUSH
60551: LD_VAR 0 1
60555: ARRAY
60556: ST_TO_ADDR
// end ;
60557: LD_VAR 0 2
60561: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
60562: LD_INT 0
60564: PPUSH
60565: PPUSH
// result := [ ] ;
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: EMPTY
60572: ST_TO_ADDR
// if not array then
60573: LD_VAR 0 1
60577: NOT
60578: IFFALSE 60582
// exit ;
60580: GO 60694
// for i := 1 to array do
60582: LD_ADDR_VAR 0 6
60586: PUSH
60587: DOUBLE
60588: LD_INT 1
60590: DEC
60591: ST_TO_ADDR
60592: LD_VAR 0 1
60596: PUSH
60597: FOR_TO
60598: IFFALSE 60692
// if array [ i ] [ index ] = value then
60600: LD_VAR 0 1
60604: PUSH
60605: LD_VAR 0 6
60609: ARRAY
60610: PUSH
60611: LD_VAR 0 2
60615: ARRAY
60616: PUSH
60617: LD_VAR 0 3
60621: EQUAL
60622: IFFALSE 60690
// begin if indexColumn then
60624: LD_VAR 0 4
60628: IFFALSE 60664
// result := Join ( result , array [ i ] [ indexColumn ] ) else
60630: LD_ADDR_VAR 0 5
60634: PUSH
60635: LD_VAR 0 5
60639: PPUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_VAR 0 6
60649: ARRAY
60650: PUSH
60651: LD_VAR 0 4
60655: ARRAY
60656: PPUSH
60657: CALL 55702 0 2
60661: ST_TO_ADDR
60662: GO 60690
// result := Join ( result , array [ i ] ) ;
60664: LD_ADDR_VAR 0 5
60668: PUSH
60669: LD_VAR 0 5
60673: PPUSH
60674: LD_VAR 0 1
60678: PUSH
60679: LD_VAR 0 6
60683: ARRAY
60684: PPUSH
60685: CALL 55702 0 2
60689: ST_TO_ADDR
// end ;
60690: GO 60597
60692: POP
60693: POP
// end ;
60694: LD_VAR 0 5
60698: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
60699: LD_INT 0
60701: PPUSH
// if not vehicles or not parkingPoint then
60702: LD_VAR 0 1
60706: NOT
60707: IFTRUE 60716
60709: PUSH
60710: LD_VAR 0 2
60714: NOT
60715: OR
60716: IFFALSE 60720
// exit ;
60718: GO 60818
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
60720: LD_ADDR_VAR 0 1
60724: PUSH
60725: LD_VAR 0 1
60729: PPUSH
60730: LD_INT 50
60732: PUSH
60733: EMPTY
60734: LIST
60735: PUSH
60736: LD_INT 3
60738: PUSH
60739: LD_INT 92
60741: PUSH
60742: LD_VAR 0 2
60746: PUSH
60747: LD_INT 1
60749: ARRAY
60750: PUSH
60751: LD_VAR 0 2
60755: PUSH
60756: LD_INT 2
60758: ARRAY
60759: PUSH
60760: LD_INT 8
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PPUSH
60777: CALL_OW 72
60781: ST_TO_ADDR
// if not vehicles then
60782: LD_VAR 0 1
60786: NOT
60787: IFFALSE 60791
// exit ;
60789: GO 60818
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
60791: LD_VAR 0 1
60795: PPUSH
60796: LD_VAR 0 2
60800: PUSH
60801: LD_INT 1
60803: ARRAY
60804: PPUSH
60805: LD_VAR 0 2
60809: PUSH
60810: LD_INT 2
60812: ARRAY
60813: PPUSH
60814: CALL_OW 111
// end ;
60818: LD_VAR 0 3
60822: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
60823: LD_INT 0
60825: PPUSH
60826: PPUSH
60827: PPUSH
// if not side or not area then
60828: LD_VAR 0 1
60832: NOT
60833: IFTRUE 60842
60835: PUSH
60836: LD_VAR 0 2
60840: NOT
60841: OR
60842: IFFALSE 60846
// exit ;
60844: GO 60965
// tmp := AreaToList ( area , 0 ) ;
60846: LD_ADDR_VAR 0 5
60850: PUSH
60851: LD_VAR 0 2
60855: PPUSH
60856: LD_INT 0
60858: PPUSH
60859: CALL_OW 517
60863: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
60864: LD_ADDR_VAR 0 4
60868: PUSH
60869: DOUBLE
60870: LD_INT 1
60872: DEC
60873: ST_TO_ADDR
60874: LD_VAR 0 5
60878: PUSH
60879: LD_INT 1
60881: ARRAY
60882: PUSH
60883: FOR_TO
60884: IFFALSE 60963
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
60886: LD_VAR 0 5
60890: PUSH
60891: LD_INT 1
60893: ARRAY
60894: PUSH
60895: LD_VAR 0 4
60899: ARRAY
60900: PPUSH
60901: LD_VAR 0 5
60905: PUSH
60906: LD_INT 2
60908: ARRAY
60909: PUSH
60910: LD_VAR 0 4
60914: ARRAY
60915: PPUSH
60916: CALL_OW 351
60920: IFFALSE 60961
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
60922: LD_VAR 0 5
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: PUSH
60931: LD_VAR 0 4
60935: ARRAY
60936: PPUSH
60937: LD_VAR 0 5
60941: PUSH
60942: LD_INT 2
60944: ARRAY
60945: PUSH
60946: LD_VAR 0 4
60950: ARRAY
60951: PPUSH
60952: LD_VAR 0 1
60956: PPUSH
60957: CALL_OW 244
// end ;
60961: GO 60883
60963: POP
60964: POP
// end ; end_of_file
60965: LD_VAR 0 3
60969: RET
// export globalGameSaveCounter ; every 0 0$1 do
60970: GO 60972
60972: DISABLE
// begin enable ;
60973: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
60974: LD_STRING updateTimer(
60976: PUSH
60977: LD_OWVAR 1
60981: STR
60982: PUSH
60983: LD_STRING );
60985: STR
60986: PPUSH
60987: CALL_OW 559
// end ;
60991: END
// every 0 0$1 do
60992: GO 60994
60994: DISABLE
// begin globalGameSaveCounter := 0 ;
60995: LD_ADDR_EXP 50
60999: PUSH
61000: LD_INT 0
61002: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
61003: LD_STRING setGameSaveCounter(0)
61005: PPUSH
61006: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
61010: LD_STRING initStreamRollete();
61012: PPUSH
61013: CALL_OW 559
// InitStreamMode ;
61017: CALL 62362 0 0
// DefineStreamItems ( false ) ;
61021: LD_INT 0
61023: PPUSH
61024: CALL 62826 0 1
// end ;
61028: END
// export function SOS_MapStart ( ) ; begin
61029: LD_INT 0
61031: PPUSH
// if streamModeActive then
61032: LD_EXP 51
61036: IFFALSE 61045
// DefineStreamItems ( true ) ;
61038: LD_INT 1
61040: PPUSH
61041: CALL 62826 0 1
// UpdateLuaVariables ( ) ;
61045: CALL 61062 0 0
// UpdateFactoryWaypoints ( ) ;
61049: CALL 75948 0 0
// UpdateWarehouseGatheringPoints ( ) ;
61053: CALL 76200 0 0
// end ;
61057: LD_VAR 0 1
61061: RET
// function UpdateLuaVariables ( ) ; begin
61062: LD_INT 0
61064: PPUSH
// if globalGameSaveCounter then
61065: LD_EXP 50
61069: IFFALSE 61103
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
61071: LD_ADDR_EXP 50
61075: PUSH
61076: LD_EXP 50
61080: PPUSH
61081: CALL 57075 0 1
61085: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61086: LD_STRING setGameSaveCounter(
61088: PUSH
61089: LD_EXP 50
61093: STR
61094: PUSH
61095: LD_STRING )
61097: STR
61098: PPUSH
61099: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
61103: LD_STRING setGameDifficulty(
61105: PUSH
61106: LD_OWVAR 67
61110: STR
61111: PUSH
61112: LD_STRING )
61114: STR
61115: PPUSH
61116: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
61120: LD_STRING displayDifficulty(
61122: PUSH
61123: LD_OWVAR 67
61127: STR
61128: PUSH
61129: LD_STRING )
61131: STR
61132: PPUSH
61133: CALL_OW 559
// end ;
61137: LD_VAR 0 1
61141: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
61142: LD_INT 0
61144: PPUSH
// if p2 = stream_mode then
61145: LD_VAR 0 2
61149: PUSH
61150: LD_INT 100
61152: EQUAL
61153: IFFALSE 62156
// begin if not StreamModeActive then
61155: LD_EXP 51
61159: NOT
61160: IFFALSE 61170
// StreamModeActive := true ;
61162: LD_ADDR_EXP 51
61166: PUSH
61167: LD_INT 1
61169: ST_TO_ADDR
// if p3 = 0 then
61170: LD_VAR 0 3
61174: PUSH
61175: LD_INT 0
61177: EQUAL
61178: IFFALSE 61184
// InitStreamMode ;
61180: CALL 62362 0 0
// if p3 = 1 then
61184: LD_VAR 0 3
61188: PUSH
61189: LD_INT 1
61191: EQUAL
61192: IFFALSE 61202
// sRocket := true ;
61194: LD_ADDR_EXP 56
61198: PUSH
61199: LD_INT 1
61201: ST_TO_ADDR
// if p3 = 2 then
61202: LD_VAR 0 3
61206: PUSH
61207: LD_INT 2
61209: EQUAL
61210: IFFALSE 61220
// sSpeed := true ;
61212: LD_ADDR_EXP 55
61216: PUSH
61217: LD_INT 1
61219: ST_TO_ADDR
// if p3 = 3 then
61220: LD_VAR 0 3
61224: PUSH
61225: LD_INT 3
61227: EQUAL
61228: IFFALSE 61238
// sEngine := true ;
61230: LD_ADDR_EXP 57
61234: PUSH
61235: LD_INT 1
61237: ST_TO_ADDR
// if p3 = 4 then
61238: LD_VAR 0 3
61242: PUSH
61243: LD_INT 4
61245: EQUAL
61246: IFFALSE 61256
// sSpec := true ;
61248: LD_ADDR_EXP 54
61252: PUSH
61253: LD_INT 1
61255: ST_TO_ADDR
// if p3 = 5 then
61256: LD_VAR 0 3
61260: PUSH
61261: LD_INT 5
61263: EQUAL
61264: IFFALSE 61274
// sLevel := true ;
61266: LD_ADDR_EXP 58
61270: PUSH
61271: LD_INT 1
61273: ST_TO_ADDR
// if p3 = 6 then
61274: LD_VAR 0 3
61278: PUSH
61279: LD_INT 6
61281: EQUAL
61282: IFFALSE 61292
// sArmoury := true ;
61284: LD_ADDR_EXP 59
61288: PUSH
61289: LD_INT 1
61291: ST_TO_ADDR
// if p3 = 7 then
61292: LD_VAR 0 3
61296: PUSH
61297: LD_INT 7
61299: EQUAL
61300: IFFALSE 61310
// sRadar := true ;
61302: LD_ADDR_EXP 60
61306: PUSH
61307: LD_INT 1
61309: ST_TO_ADDR
// if p3 = 8 then
61310: LD_VAR 0 3
61314: PUSH
61315: LD_INT 8
61317: EQUAL
61318: IFFALSE 61328
// sBunker := true ;
61320: LD_ADDR_EXP 61
61324: PUSH
61325: LD_INT 1
61327: ST_TO_ADDR
// if p3 = 9 then
61328: LD_VAR 0 3
61332: PUSH
61333: LD_INT 9
61335: EQUAL
61336: IFFALSE 61346
// sHack := true ;
61338: LD_ADDR_EXP 62
61342: PUSH
61343: LD_INT 1
61345: ST_TO_ADDR
// if p3 = 10 then
61346: LD_VAR 0 3
61350: PUSH
61351: LD_INT 10
61353: EQUAL
61354: IFFALSE 61364
// sFire := true ;
61356: LD_ADDR_EXP 63
61360: PUSH
61361: LD_INT 1
61363: ST_TO_ADDR
// if p3 = 11 then
61364: LD_VAR 0 3
61368: PUSH
61369: LD_INT 11
61371: EQUAL
61372: IFFALSE 61382
// sRefresh := true ;
61374: LD_ADDR_EXP 64
61378: PUSH
61379: LD_INT 1
61381: ST_TO_ADDR
// if p3 = 12 then
61382: LD_VAR 0 3
61386: PUSH
61387: LD_INT 12
61389: EQUAL
61390: IFFALSE 61400
// sExp := true ;
61392: LD_ADDR_EXP 65
61396: PUSH
61397: LD_INT 1
61399: ST_TO_ADDR
// if p3 = 13 then
61400: LD_VAR 0 3
61404: PUSH
61405: LD_INT 13
61407: EQUAL
61408: IFFALSE 61418
// sDepot := true ;
61410: LD_ADDR_EXP 66
61414: PUSH
61415: LD_INT 1
61417: ST_TO_ADDR
// if p3 = 14 then
61418: LD_VAR 0 3
61422: PUSH
61423: LD_INT 14
61425: EQUAL
61426: IFFALSE 61436
// sFlag := true ;
61428: LD_ADDR_EXP 67
61432: PUSH
61433: LD_INT 1
61435: ST_TO_ADDR
// if p3 = 15 then
61436: LD_VAR 0 3
61440: PUSH
61441: LD_INT 15
61443: EQUAL
61444: IFFALSE 61454
// sKamikadze := true ;
61446: LD_ADDR_EXP 75
61450: PUSH
61451: LD_INT 1
61453: ST_TO_ADDR
// if p3 = 16 then
61454: LD_VAR 0 3
61458: PUSH
61459: LD_INT 16
61461: EQUAL
61462: IFFALSE 61472
// sTroll := true ;
61464: LD_ADDR_EXP 76
61468: PUSH
61469: LD_INT 1
61471: ST_TO_ADDR
// if p3 = 17 then
61472: LD_VAR 0 3
61476: PUSH
61477: LD_INT 17
61479: EQUAL
61480: IFFALSE 61490
// sSlow := true ;
61482: LD_ADDR_EXP 77
61486: PUSH
61487: LD_INT 1
61489: ST_TO_ADDR
// if p3 = 18 then
61490: LD_VAR 0 3
61494: PUSH
61495: LD_INT 18
61497: EQUAL
61498: IFFALSE 61508
// sLack := true ;
61500: LD_ADDR_EXP 78
61504: PUSH
61505: LD_INT 1
61507: ST_TO_ADDR
// if p3 = 19 then
61508: LD_VAR 0 3
61512: PUSH
61513: LD_INT 19
61515: EQUAL
61516: IFFALSE 61526
// sTank := true ;
61518: LD_ADDR_EXP 80
61522: PUSH
61523: LD_INT 1
61525: ST_TO_ADDR
// if p3 = 20 then
61526: LD_VAR 0 3
61530: PUSH
61531: LD_INT 20
61533: EQUAL
61534: IFFALSE 61544
// sRemote := true ;
61536: LD_ADDR_EXP 81
61540: PUSH
61541: LD_INT 1
61543: ST_TO_ADDR
// if p3 = 21 then
61544: LD_VAR 0 3
61548: PUSH
61549: LD_INT 21
61551: EQUAL
61552: IFFALSE 61562
// sPowell := true ;
61554: LD_ADDR_EXP 82
61558: PUSH
61559: LD_INT 1
61561: ST_TO_ADDR
// if p3 = 22 then
61562: LD_VAR 0 3
61566: PUSH
61567: LD_INT 22
61569: EQUAL
61570: IFFALSE 61580
// sTeleport := true ;
61572: LD_ADDR_EXP 85
61576: PUSH
61577: LD_INT 1
61579: ST_TO_ADDR
// if p3 = 23 then
61580: LD_VAR 0 3
61584: PUSH
61585: LD_INT 23
61587: EQUAL
61588: IFFALSE 61598
// sOilTower := true ;
61590: LD_ADDR_EXP 87
61594: PUSH
61595: LD_INT 1
61597: ST_TO_ADDR
// if p3 = 24 then
61598: LD_VAR 0 3
61602: PUSH
61603: LD_INT 24
61605: EQUAL
61606: IFFALSE 61616
// sShovel := true ;
61608: LD_ADDR_EXP 88
61612: PUSH
61613: LD_INT 1
61615: ST_TO_ADDR
// if p3 = 25 then
61616: LD_VAR 0 3
61620: PUSH
61621: LD_INT 25
61623: EQUAL
61624: IFFALSE 61634
// sSheik := true ;
61626: LD_ADDR_EXP 89
61630: PUSH
61631: LD_INT 1
61633: ST_TO_ADDR
// if p3 = 26 then
61634: LD_VAR 0 3
61638: PUSH
61639: LD_INT 26
61641: EQUAL
61642: IFFALSE 61652
// sEarthquake := true ;
61644: LD_ADDR_EXP 91
61648: PUSH
61649: LD_INT 1
61651: ST_TO_ADDR
// if p3 = 27 then
61652: LD_VAR 0 3
61656: PUSH
61657: LD_INT 27
61659: EQUAL
61660: IFFALSE 61670
// sAI := true ;
61662: LD_ADDR_EXP 92
61666: PUSH
61667: LD_INT 1
61669: ST_TO_ADDR
// if p3 = 28 then
61670: LD_VAR 0 3
61674: PUSH
61675: LD_INT 28
61677: EQUAL
61678: IFFALSE 61688
// sCargo := true ;
61680: LD_ADDR_EXP 95
61684: PUSH
61685: LD_INT 1
61687: ST_TO_ADDR
// if p3 = 29 then
61688: LD_VAR 0 3
61692: PUSH
61693: LD_INT 29
61695: EQUAL
61696: IFFALSE 61706
// sDLaser := true ;
61698: LD_ADDR_EXP 96
61702: PUSH
61703: LD_INT 1
61705: ST_TO_ADDR
// if p3 = 30 then
61706: LD_VAR 0 3
61710: PUSH
61711: LD_INT 30
61713: EQUAL
61714: IFFALSE 61724
// sExchange := true ;
61716: LD_ADDR_EXP 97
61720: PUSH
61721: LD_INT 1
61723: ST_TO_ADDR
// if p3 = 31 then
61724: LD_VAR 0 3
61728: PUSH
61729: LD_INT 31
61731: EQUAL
61732: IFFALSE 61742
// sFac := true ;
61734: LD_ADDR_EXP 98
61738: PUSH
61739: LD_INT 1
61741: ST_TO_ADDR
// if p3 = 32 then
61742: LD_VAR 0 3
61746: PUSH
61747: LD_INT 32
61749: EQUAL
61750: IFFALSE 61760
// sPower := true ;
61752: LD_ADDR_EXP 99
61756: PUSH
61757: LD_INT 1
61759: ST_TO_ADDR
// if p3 = 33 then
61760: LD_VAR 0 3
61764: PUSH
61765: LD_INT 33
61767: EQUAL
61768: IFFALSE 61778
// sRandom := true ;
61770: LD_ADDR_EXP 100
61774: PUSH
61775: LD_INT 1
61777: ST_TO_ADDR
// if p3 = 34 then
61778: LD_VAR 0 3
61782: PUSH
61783: LD_INT 34
61785: EQUAL
61786: IFFALSE 61796
// sShield := true ;
61788: LD_ADDR_EXP 101
61792: PUSH
61793: LD_INT 1
61795: ST_TO_ADDR
// if p3 = 35 then
61796: LD_VAR 0 3
61800: PUSH
61801: LD_INT 35
61803: EQUAL
61804: IFFALSE 61814
// sTime := true ;
61806: LD_ADDR_EXP 102
61810: PUSH
61811: LD_INT 1
61813: ST_TO_ADDR
// if p3 = 36 then
61814: LD_VAR 0 3
61818: PUSH
61819: LD_INT 36
61821: EQUAL
61822: IFFALSE 61832
// sTools := true ;
61824: LD_ADDR_EXP 103
61828: PUSH
61829: LD_INT 1
61831: ST_TO_ADDR
// if p3 = 101 then
61832: LD_VAR 0 3
61836: PUSH
61837: LD_INT 101
61839: EQUAL
61840: IFFALSE 61850
// sSold := true ;
61842: LD_ADDR_EXP 68
61846: PUSH
61847: LD_INT 1
61849: ST_TO_ADDR
// if p3 = 102 then
61850: LD_VAR 0 3
61854: PUSH
61855: LD_INT 102
61857: EQUAL
61858: IFFALSE 61868
// sDiff := true ;
61860: LD_ADDR_EXP 69
61864: PUSH
61865: LD_INT 1
61867: ST_TO_ADDR
// if p3 = 103 then
61868: LD_VAR 0 3
61872: PUSH
61873: LD_INT 103
61875: EQUAL
61876: IFFALSE 61886
// sFog := true ;
61878: LD_ADDR_EXP 72
61882: PUSH
61883: LD_INT 1
61885: ST_TO_ADDR
// if p3 = 104 then
61886: LD_VAR 0 3
61890: PUSH
61891: LD_INT 104
61893: EQUAL
61894: IFFALSE 61904
// sReset := true ;
61896: LD_ADDR_EXP 73
61900: PUSH
61901: LD_INT 1
61903: ST_TO_ADDR
// if p3 = 105 then
61904: LD_VAR 0 3
61908: PUSH
61909: LD_INT 105
61911: EQUAL
61912: IFFALSE 61922
// sSun := true ;
61914: LD_ADDR_EXP 74
61918: PUSH
61919: LD_INT 1
61921: ST_TO_ADDR
// if p3 = 106 then
61922: LD_VAR 0 3
61926: PUSH
61927: LD_INT 106
61929: EQUAL
61930: IFFALSE 61940
// sTiger := true ;
61932: LD_ADDR_EXP 70
61936: PUSH
61937: LD_INT 1
61939: ST_TO_ADDR
// if p3 = 107 then
61940: LD_VAR 0 3
61944: PUSH
61945: LD_INT 107
61947: EQUAL
61948: IFFALSE 61958
// sBomb := true ;
61950: LD_ADDR_EXP 71
61954: PUSH
61955: LD_INT 1
61957: ST_TO_ADDR
// if p3 = 108 then
61958: LD_VAR 0 3
61962: PUSH
61963: LD_INT 108
61965: EQUAL
61966: IFFALSE 61976
// sWound := true ;
61968: LD_ADDR_EXP 79
61972: PUSH
61973: LD_INT 1
61975: ST_TO_ADDR
// if p3 = 109 then
61976: LD_VAR 0 3
61980: PUSH
61981: LD_INT 109
61983: EQUAL
61984: IFFALSE 61994
// sBetray := true ;
61986: LD_ADDR_EXP 83
61990: PUSH
61991: LD_INT 1
61993: ST_TO_ADDR
// if p3 = 110 then
61994: LD_VAR 0 3
61998: PUSH
61999: LD_INT 110
62001: EQUAL
62002: IFFALSE 62012
// sContamin := true ;
62004: LD_ADDR_EXP 84
62008: PUSH
62009: LD_INT 1
62011: ST_TO_ADDR
// if p3 = 111 then
62012: LD_VAR 0 3
62016: PUSH
62017: LD_INT 111
62019: EQUAL
62020: IFFALSE 62030
// sOil := true ;
62022: LD_ADDR_EXP 86
62026: PUSH
62027: LD_INT 1
62029: ST_TO_ADDR
// if p3 = 112 then
62030: LD_VAR 0 3
62034: PUSH
62035: LD_INT 112
62037: EQUAL
62038: IFFALSE 62048
// sStu := true ;
62040: LD_ADDR_EXP 90
62044: PUSH
62045: LD_INT 1
62047: ST_TO_ADDR
// if p3 = 113 then
62048: LD_VAR 0 3
62052: PUSH
62053: LD_INT 113
62055: EQUAL
62056: IFFALSE 62066
// sBazooka := true ;
62058: LD_ADDR_EXP 93
62062: PUSH
62063: LD_INT 1
62065: ST_TO_ADDR
// if p3 = 114 then
62066: LD_VAR 0 3
62070: PUSH
62071: LD_INT 114
62073: EQUAL
62074: IFFALSE 62084
// sMortar := true ;
62076: LD_ADDR_EXP 94
62080: PUSH
62081: LD_INT 1
62083: ST_TO_ADDR
// if p3 = 115 then
62084: LD_VAR 0 3
62088: PUSH
62089: LD_INT 115
62091: EQUAL
62092: IFFALSE 62102
// sRanger := true ;
62094: LD_ADDR_EXP 104
62098: PUSH
62099: LD_INT 1
62101: ST_TO_ADDR
// if p3 = 116 then
62102: LD_VAR 0 3
62106: PUSH
62107: LD_INT 116
62109: EQUAL
62110: IFFALSE 62120
// sComputer := true ;
62112: LD_ADDR_EXP 105
62116: PUSH
62117: LD_INT 1
62119: ST_TO_ADDR
// if p3 = 117 then
62120: LD_VAR 0 3
62124: PUSH
62125: LD_INT 117
62127: EQUAL
62128: IFFALSE 62138
// s30 := true ;
62130: LD_ADDR_EXP 106
62134: PUSH
62135: LD_INT 1
62137: ST_TO_ADDR
// if p3 = 118 then
62138: LD_VAR 0 3
62142: PUSH
62143: LD_INT 118
62145: EQUAL
62146: IFFALSE 62156
// s60 := true ;
62148: LD_ADDR_EXP 107
62152: PUSH
62153: LD_INT 1
62155: ST_TO_ADDR
// end ; if p2 = hack_mode then
62156: LD_VAR 0 2
62160: PUSH
62161: LD_INT 101
62163: EQUAL
62164: IFFALSE 62292
// begin case p3 of 1 :
62166: LD_VAR 0 3
62170: PUSH
62171: LD_INT 1
62173: DOUBLE
62174: EQUAL
62175: IFTRUE 62179
62177: GO 62186
62179: POP
// hHackUnlimitedResources ; 2 :
62180: CALL 74555 0 0
62184: GO 62292
62186: LD_INT 2
62188: DOUBLE
62189: EQUAL
62190: IFTRUE 62194
62192: GO 62201
62194: POP
// hHackSetLevel10 ; 3 :
62195: CALL 74688 0 0
62199: GO 62292
62201: LD_INT 3
62203: DOUBLE
62204: EQUAL
62205: IFTRUE 62209
62207: GO 62216
62209: POP
// hHackSetLevel10YourUnits ; 4 :
62210: CALL 74773 0 0
62214: GO 62292
62216: LD_INT 4
62218: DOUBLE
62219: EQUAL
62220: IFTRUE 62224
62222: GO 62231
62224: POP
// hHackInvincible ; 5 :
62225: CALL 75221 0 0
62229: GO 62292
62231: LD_INT 5
62233: DOUBLE
62234: EQUAL
62235: IFTRUE 62239
62237: GO 62246
62239: POP
// hHackInvisible ; 6 :
62240: CALL 75332 0 0
62244: GO 62292
62246: LD_INT 6
62248: DOUBLE
62249: EQUAL
62250: IFTRUE 62254
62252: GO 62261
62254: POP
// hHackChangeYourSide ; 7 :
62255: CALL 75389 0 0
62259: GO 62292
62261: LD_INT 7
62263: DOUBLE
62264: EQUAL
62265: IFTRUE 62269
62267: GO 62276
62269: POP
// hHackChangeUnitSide ; 8 :
62270: CALL 75431 0 0
62274: GO 62292
62276: LD_INT 8
62278: DOUBLE
62279: EQUAL
62280: IFTRUE 62284
62282: GO 62291
62284: POP
// hHackFog ; end ;
62285: CALL 75532 0 0
62289: GO 62292
62291: POP
// end ; if p2 = game_save_mode then
62292: LD_VAR 0 2
62296: PUSH
62297: LD_INT 102
62299: EQUAL
62300: IFFALSE 62357
// begin if p3 = 1 then
62302: LD_VAR 0 3
62306: PUSH
62307: LD_INT 1
62309: EQUAL
62310: IFFALSE 62322
// globalGameSaveCounter := p4 ;
62312: LD_ADDR_EXP 50
62316: PUSH
62317: LD_VAR 0 4
62321: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
62322: LD_VAR 0 3
62326: PUSH
62327: LD_INT 2
62329: EQUAL
62330: IFFALSE 62338
62332: PUSH
62333: LD_EXP 50
62337: AND
62338: IFFALSE 62357
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
62340: LD_STRING setGameSaveCounter(
62342: PUSH
62343: LD_EXP 50
62347: STR
62348: PUSH
62349: LD_STRING )
62351: STR
62352: PPUSH
62353: CALL_OW 559
// end ; end ;
62357: LD_VAR 0 7
62361: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
62362: LD_INT 0
62364: PPUSH
// streamModeActive := false ;
62365: LD_ADDR_EXP 51
62369: PUSH
62370: LD_INT 0
62372: ST_TO_ADDR
// normalCounter := 36 ;
62373: LD_ADDR_EXP 52
62377: PUSH
62378: LD_INT 36
62380: ST_TO_ADDR
// hardcoreCounter := 18 ;
62381: LD_ADDR_EXP 53
62385: PUSH
62386: LD_INT 18
62388: ST_TO_ADDR
// sRocket := false ;
62389: LD_ADDR_EXP 56
62393: PUSH
62394: LD_INT 0
62396: ST_TO_ADDR
// sSpeed := false ;
62397: LD_ADDR_EXP 55
62401: PUSH
62402: LD_INT 0
62404: ST_TO_ADDR
// sEngine := false ;
62405: LD_ADDR_EXP 57
62409: PUSH
62410: LD_INT 0
62412: ST_TO_ADDR
// sSpec := false ;
62413: LD_ADDR_EXP 54
62417: PUSH
62418: LD_INT 0
62420: ST_TO_ADDR
// sLevel := false ;
62421: LD_ADDR_EXP 58
62425: PUSH
62426: LD_INT 0
62428: ST_TO_ADDR
// sArmoury := false ;
62429: LD_ADDR_EXP 59
62433: PUSH
62434: LD_INT 0
62436: ST_TO_ADDR
// sRadar := false ;
62437: LD_ADDR_EXP 60
62441: PUSH
62442: LD_INT 0
62444: ST_TO_ADDR
// sBunker := false ;
62445: LD_ADDR_EXP 61
62449: PUSH
62450: LD_INT 0
62452: ST_TO_ADDR
// sHack := false ;
62453: LD_ADDR_EXP 62
62457: PUSH
62458: LD_INT 0
62460: ST_TO_ADDR
// sFire := false ;
62461: LD_ADDR_EXP 63
62465: PUSH
62466: LD_INT 0
62468: ST_TO_ADDR
// sRefresh := false ;
62469: LD_ADDR_EXP 64
62473: PUSH
62474: LD_INT 0
62476: ST_TO_ADDR
// sExp := false ;
62477: LD_ADDR_EXP 65
62481: PUSH
62482: LD_INT 0
62484: ST_TO_ADDR
// sDepot := false ;
62485: LD_ADDR_EXP 66
62489: PUSH
62490: LD_INT 0
62492: ST_TO_ADDR
// sFlag := false ;
62493: LD_ADDR_EXP 67
62497: PUSH
62498: LD_INT 0
62500: ST_TO_ADDR
// sKamikadze := false ;
62501: LD_ADDR_EXP 75
62505: PUSH
62506: LD_INT 0
62508: ST_TO_ADDR
// sTroll := false ;
62509: LD_ADDR_EXP 76
62513: PUSH
62514: LD_INT 0
62516: ST_TO_ADDR
// sSlow := false ;
62517: LD_ADDR_EXP 77
62521: PUSH
62522: LD_INT 0
62524: ST_TO_ADDR
// sLack := false ;
62525: LD_ADDR_EXP 78
62529: PUSH
62530: LD_INT 0
62532: ST_TO_ADDR
// sTank := false ;
62533: LD_ADDR_EXP 80
62537: PUSH
62538: LD_INT 0
62540: ST_TO_ADDR
// sRemote := false ;
62541: LD_ADDR_EXP 81
62545: PUSH
62546: LD_INT 0
62548: ST_TO_ADDR
// sPowell := false ;
62549: LD_ADDR_EXP 82
62553: PUSH
62554: LD_INT 0
62556: ST_TO_ADDR
// sTeleport := false ;
62557: LD_ADDR_EXP 85
62561: PUSH
62562: LD_INT 0
62564: ST_TO_ADDR
// sOilTower := false ;
62565: LD_ADDR_EXP 87
62569: PUSH
62570: LD_INT 0
62572: ST_TO_ADDR
// sShovel := false ;
62573: LD_ADDR_EXP 88
62577: PUSH
62578: LD_INT 0
62580: ST_TO_ADDR
// sSheik := false ;
62581: LD_ADDR_EXP 89
62585: PUSH
62586: LD_INT 0
62588: ST_TO_ADDR
// sEarthquake := false ;
62589: LD_ADDR_EXP 91
62593: PUSH
62594: LD_INT 0
62596: ST_TO_ADDR
// sAI := false ;
62597: LD_ADDR_EXP 92
62601: PUSH
62602: LD_INT 0
62604: ST_TO_ADDR
// sCargo := false ;
62605: LD_ADDR_EXP 95
62609: PUSH
62610: LD_INT 0
62612: ST_TO_ADDR
// sDLaser := false ;
62613: LD_ADDR_EXP 96
62617: PUSH
62618: LD_INT 0
62620: ST_TO_ADDR
// sExchange := false ;
62621: LD_ADDR_EXP 97
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// sFac := false ;
62629: LD_ADDR_EXP 98
62633: PUSH
62634: LD_INT 0
62636: ST_TO_ADDR
// sPower := false ;
62637: LD_ADDR_EXP 99
62641: PUSH
62642: LD_INT 0
62644: ST_TO_ADDR
// sRandom := false ;
62645: LD_ADDR_EXP 100
62649: PUSH
62650: LD_INT 0
62652: ST_TO_ADDR
// sShield := false ;
62653: LD_ADDR_EXP 101
62657: PUSH
62658: LD_INT 0
62660: ST_TO_ADDR
// sTime := false ;
62661: LD_ADDR_EXP 102
62665: PUSH
62666: LD_INT 0
62668: ST_TO_ADDR
// sTools := false ;
62669: LD_ADDR_EXP 103
62673: PUSH
62674: LD_INT 0
62676: ST_TO_ADDR
// sSold := false ;
62677: LD_ADDR_EXP 68
62681: PUSH
62682: LD_INT 0
62684: ST_TO_ADDR
// sDiff := false ;
62685: LD_ADDR_EXP 69
62689: PUSH
62690: LD_INT 0
62692: ST_TO_ADDR
// sFog := false ;
62693: LD_ADDR_EXP 72
62697: PUSH
62698: LD_INT 0
62700: ST_TO_ADDR
// sReset := false ;
62701: LD_ADDR_EXP 73
62705: PUSH
62706: LD_INT 0
62708: ST_TO_ADDR
// sSun := false ;
62709: LD_ADDR_EXP 74
62713: PUSH
62714: LD_INT 0
62716: ST_TO_ADDR
// sTiger := false ;
62717: LD_ADDR_EXP 70
62721: PUSH
62722: LD_INT 0
62724: ST_TO_ADDR
// sBomb := false ;
62725: LD_ADDR_EXP 71
62729: PUSH
62730: LD_INT 0
62732: ST_TO_ADDR
// sWound := false ;
62733: LD_ADDR_EXP 79
62737: PUSH
62738: LD_INT 0
62740: ST_TO_ADDR
// sBetray := false ;
62741: LD_ADDR_EXP 83
62745: PUSH
62746: LD_INT 0
62748: ST_TO_ADDR
// sContamin := false ;
62749: LD_ADDR_EXP 84
62753: PUSH
62754: LD_INT 0
62756: ST_TO_ADDR
// sOil := false ;
62757: LD_ADDR_EXP 86
62761: PUSH
62762: LD_INT 0
62764: ST_TO_ADDR
// sStu := false ;
62765: LD_ADDR_EXP 90
62769: PUSH
62770: LD_INT 0
62772: ST_TO_ADDR
// sBazooka := false ;
62773: LD_ADDR_EXP 93
62777: PUSH
62778: LD_INT 0
62780: ST_TO_ADDR
// sMortar := false ;
62781: LD_ADDR_EXP 94
62785: PUSH
62786: LD_INT 0
62788: ST_TO_ADDR
// sRanger := false ;
62789: LD_ADDR_EXP 104
62793: PUSH
62794: LD_INT 0
62796: ST_TO_ADDR
// sComputer := false ;
62797: LD_ADDR_EXP 105
62801: PUSH
62802: LD_INT 0
62804: ST_TO_ADDR
// s30 := false ;
62805: LD_ADDR_EXP 106
62809: PUSH
62810: LD_INT 0
62812: ST_TO_ADDR
// s60 := false ;
62813: LD_ADDR_EXP 107
62817: PUSH
62818: LD_INT 0
62820: ST_TO_ADDR
// end ;
62821: LD_VAR 0 1
62825: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
62826: LD_INT 0
62828: PPUSH
62829: PPUSH
62830: PPUSH
62831: PPUSH
62832: PPUSH
62833: PPUSH
62834: PPUSH
// result := [ ] ;
62835: LD_ADDR_VAR 0 2
62839: PUSH
62840: EMPTY
62841: ST_TO_ADDR
// if campaign_id = 1 then
62842: LD_OWVAR 69
62846: PUSH
62847: LD_INT 1
62849: EQUAL
62850: IFFALSE 66016
// begin case mission_number of 1 :
62852: LD_OWVAR 70
62856: PUSH
62857: LD_INT 1
62859: DOUBLE
62860: EQUAL
62861: IFTRUE 62865
62863: GO 62941
62865: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
62866: LD_ADDR_VAR 0 2
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: LD_INT 4
62876: PUSH
62877: LD_INT 11
62879: PUSH
62880: LD_INT 12
62882: PUSH
62883: LD_INT 15
62885: PUSH
62886: LD_INT 16
62888: PUSH
62889: LD_INT 22
62891: PUSH
62892: LD_INT 23
62894: PUSH
62895: LD_INT 26
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 101
62911: PUSH
62912: LD_INT 102
62914: PUSH
62915: LD_INT 106
62917: PUSH
62918: LD_INT 116
62920: PUSH
62921: LD_INT 117
62923: PUSH
62924: LD_INT 118
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: ST_TO_ADDR
62939: GO 66014
62941: LD_INT 2
62943: DOUBLE
62944: EQUAL
62945: IFTRUE 62949
62947: GO 63033
62949: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
62950: LD_ADDR_VAR 0 2
62954: PUSH
62955: LD_INT 2
62957: PUSH
62958: LD_INT 4
62960: PUSH
62961: LD_INT 11
62963: PUSH
62964: LD_INT 12
62966: PUSH
62967: LD_INT 15
62969: PUSH
62970: LD_INT 16
62972: PUSH
62973: LD_INT 22
62975: PUSH
62976: LD_INT 23
62978: PUSH
62979: LD_INT 26
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 101
62995: PUSH
62996: LD_INT 102
62998: PUSH
62999: LD_INT 105
63001: PUSH
63002: LD_INT 106
63004: PUSH
63005: LD_INT 108
63007: PUSH
63008: LD_INT 116
63010: PUSH
63011: LD_INT 117
63013: PUSH
63014: LD_INT 118
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: ST_TO_ADDR
63031: GO 66014
63033: LD_INT 3
63035: DOUBLE
63036: EQUAL
63037: IFTRUE 63041
63039: GO 63129
63041: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
63042: LD_ADDR_VAR 0 2
63046: PUSH
63047: LD_INT 2
63049: PUSH
63050: LD_INT 4
63052: PUSH
63053: LD_INT 5
63055: PUSH
63056: LD_INT 11
63058: PUSH
63059: LD_INT 12
63061: PUSH
63062: LD_INT 15
63064: PUSH
63065: LD_INT 16
63067: PUSH
63068: LD_INT 22
63070: PUSH
63071: LD_INT 26
63073: PUSH
63074: LD_INT 36
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 101
63091: PUSH
63092: LD_INT 102
63094: PUSH
63095: LD_INT 105
63097: PUSH
63098: LD_INT 106
63100: PUSH
63101: LD_INT 108
63103: PUSH
63104: LD_INT 116
63106: PUSH
63107: LD_INT 117
63109: PUSH
63110: LD_INT 118
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: ST_TO_ADDR
63127: GO 66014
63129: LD_INT 4
63131: DOUBLE
63132: EQUAL
63133: IFTRUE 63137
63135: GO 63233
63137: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_INT 2
63145: PUSH
63146: LD_INT 4
63148: PUSH
63149: LD_INT 5
63151: PUSH
63152: LD_INT 8
63154: PUSH
63155: LD_INT 11
63157: PUSH
63158: LD_INT 12
63160: PUSH
63161: LD_INT 15
63163: PUSH
63164: LD_INT 16
63166: PUSH
63167: LD_INT 22
63169: PUSH
63170: LD_INT 23
63172: PUSH
63173: LD_INT 26
63175: PUSH
63176: LD_INT 36
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: LIST
63183: LIST
63184: LIST
63185: LIST
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 101
63195: PUSH
63196: LD_INT 102
63198: PUSH
63199: LD_INT 105
63201: PUSH
63202: LD_INT 106
63204: PUSH
63205: LD_INT 108
63207: PUSH
63208: LD_INT 116
63210: PUSH
63211: LD_INT 117
63213: PUSH
63214: LD_INT 118
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: ST_TO_ADDR
63231: GO 66014
63233: LD_INT 5
63235: DOUBLE
63236: EQUAL
63237: IFTRUE 63241
63239: GO 63353
63241: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
63242: LD_ADDR_VAR 0 2
63246: PUSH
63247: LD_INT 2
63249: PUSH
63250: LD_INT 4
63252: PUSH
63253: LD_INT 5
63255: PUSH
63256: LD_INT 6
63258: PUSH
63259: LD_INT 8
63261: PUSH
63262: LD_INT 11
63264: PUSH
63265: LD_INT 12
63267: PUSH
63268: LD_INT 15
63270: PUSH
63271: LD_INT 16
63273: PUSH
63274: LD_INT 22
63276: PUSH
63277: LD_INT 23
63279: PUSH
63280: LD_INT 25
63282: PUSH
63283: LD_INT 26
63285: PUSH
63286: LD_INT 36
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 101
63307: PUSH
63308: LD_INT 102
63310: PUSH
63311: LD_INT 105
63313: PUSH
63314: LD_INT 106
63316: PUSH
63317: LD_INT 108
63319: PUSH
63320: LD_INT 109
63322: PUSH
63323: LD_INT 112
63325: PUSH
63326: LD_INT 116
63328: PUSH
63329: LD_INT 117
63331: PUSH
63332: LD_INT 118
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: ST_TO_ADDR
63351: GO 66014
63353: LD_INT 6
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63361
63359: GO 63493
63361: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
63362: LD_ADDR_VAR 0 2
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 4
63372: PUSH
63373: LD_INT 5
63375: PUSH
63376: LD_INT 6
63378: PUSH
63379: LD_INT 8
63381: PUSH
63382: LD_INT 11
63384: PUSH
63385: LD_INT 12
63387: PUSH
63388: LD_INT 15
63390: PUSH
63391: LD_INT 16
63393: PUSH
63394: LD_INT 20
63396: PUSH
63397: LD_INT 21
63399: PUSH
63400: LD_INT 22
63402: PUSH
63403: LD_INT 23
63405: PUSH
63406: LD_INT 25
63408: PUSH
63409: LD_INT 26
63411: PUSH
63412: LD_INT 30
63414: PUSH
63415: LD_INT 31
63417: PUSH
63418: LD_INT 32
63420: PUSH
63421: LD_INT 36
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 101
63447: PUSH
63448: LD_INT 102
63450: PUSH
63451: LD_INT 105
63453: PUSH
63454: LD_INT 106
63456: PUSH
63457: LD_INT 108
63459: PUSH
63460: LD_INT 109
63462: PUSH
63463: LD_INT 112
63465: PUSH
63466: LD_INT 116
63468: PUSH
63469: LD_INT 117
63471: PUSH
63472: LD_INT 118
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: ST_TO_ADDR
63491: GO 66014
63493: LD_INT 7
63495: DOUBLE
63496: EQUAL
63497: IFTRUE 63501
63499: GO 63613
63501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
63502: LD_ADDR_VAR 0 2
63506: PUSH
63507: LD_INT 2
63509: PUSH
63510: LD_INT 4
63512: PUSH
63513: LD_INT 5
63515: PUSH
63516: LD_INT 7
63518: PUSH
63519: LD_INT 11
63521: PUSH
63522: LD_INT 12
63524: PUSH
63525: LD_INT 15
63527: PUSH
63528: LD_INT 16
63530: PUSH
63531: LD_INT 20
63533: PUSH
63534: LD_INT 21
63536: PUSH
63537: LD_INT 22
63539: PUSH
63540: LD_INT 23
63542: PUSH
63543: LD_INT 25
63545: PUSH
63546: LD_INT 26
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 101
63567: PUSH
63568: LD_INT 102
63570: PUSH
63571: LD_INT 103
63573: PUSH
63574: LD_INT 105
63576: PUSH
63577: LD_INT 106
63579: PUSH
63580: LD_INT 108
63582: PUSH
63583: LD_INT 112
63585: PUSH
63586: LD_INT 116
63588: PUSH
63589: LD_INT 117
63591: PUSH
63592: LD_INT 118
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: ST_TO_ADDR
63611: GO 66014
63613: LD_INT 8
63615: DOUBLE
63616: EQUAL
63617: IFTRUE 63621
63619: GO 63761
63621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
63622: LD_ADDR_VAR 0 2
63626: PUSH
63627: LD_INT 2
63629: PUSH
63630: LD_INT 4
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: LD_INT 6
63638: PUSH
63639: LD_INT 7
63641: PUSH
63642: LD_INT 8
63644: PUSH
63645: LD_INT 11
63647: PUSH
63648: LD_INT 12
63650: PUSH
63651: LD_INT 15
63653: PUSH
63654: LD_INT 16
63656: PUSH
63657: LD_INT 20
63659: PUSH
63660: LD_INT 21
63662: PUSH
63663: LD_INT 22
63665: PUSH
63666: LD_INT 23
63668: PUSH
63669: LD_INT 25
63671: PUSH
63672: LD_INT 26
63674: PUSH
63675: LD_INT 30
63677: PUSH
63678: LD_INT 31
63680: PUSH
63681: LD_INT 32
63683: PUSH
63684: LD_INT 36
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: PUSH
63709: LD_INT 101
63711: PUSH
63712: LD_INT 102
63714: PUSH
63715: LD_INT 103
63717: PUSH
63718: LD_INT 105
63720: PUSH
63721: LD_INT 106
63723: PUSH
63724: LD_INT 108
63726: PUSH
63727: LD_INT 109
63729: PUSH
63730: LD_INT 112
63732: PUSH
63733: LD_INT 116
63735: PUSH
63736: LD_INT 117
63738: PUSH
63739: LD_INT 118
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: ST_TO_ADDR
63759: GO 66014
63761: LD_INT 9
63763: DOUBLE
63764: EQUAL
63765: IFTRUE 63769
63767: GO 63917
63769: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
63770: LD_ADDR_VAR 0 2
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: LD_INT 4
63780: PUSH
63781: LD_INT 5
63783: PUSH
63784: LD_INT 6
63786: PUSH
63787: LD_INT 7
63789: PUSH
63790: LD_INT 8
63792: PUSH
63793: LD_INT 11
63795: PUSH
63796: LD_INT 12
63798: PUSH
63799: LD_INT 15
63801: PUSH
63802: LD_INT 16
63804: PUSH
63805: LD_INT 20
63807: PUSH
63808: LD_INT 21
63810: PUSH
63811: LD_INT 22
63813: PUSH
63814: LD_INT 23
63816: PUSH
63817: LD_INT 25
63819: PUSH
63820: LD_INT 26
63822: PUSH
63823: LD_INT 28
63825: PUSH
63826: LD_INT 30
63828: PUSH
63829: LD_INT 31
63831: PUSH
63832: LD_INT 32
63834: PUSH
63835: LD_INT 36
63837: PUSH
63838: EMPTY
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 101
63863: PUSH
63864: LD_INT 102
63866: PUSH
63867: LD_INT 103
63869: PUSH
63870: LD_INT 105
63872: PUSH
63873: LD_INT 106
63875: PUSH
63876: LD_INT 108
63878: PUSH
63879: LD_INT 109
63881: PUSH
63882: LD_INT 112
63884: PUSH
63885: LD_INT 114
63887: PUSH
63888: LD_INT 116
63890: PUSH
63891: LD_INT 117
63893: PUSH
63894: LD_INT 118
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: ST_TO_ADDR
63915: GO 66014
63917: LD_INT 10
63919: DOUBLE
63920: EQUAL
63921: IFTRUE 63925
63923: GO 64121
63925: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
63926: LD_ADDR_VAR 0 2
63930: PUSH
63931: LD_INT 2
63933: PUSH
63934: LD_INT 4
63936: PUSH
63937: LD_INT 5
63939: PUSH
63940: LD_INT 6
63942: PUSH
63943: LD_INT 7
63945: PUSH
63946: LD_INT 8
63948: PUSH
63949: LD_INT 9
63951: PUSH
63952: LD_INT 10
63954: PUSH
63955: LD_INT 11
63957: PUSH
63958: LD_INT 12
63960: PUSH
63961: LD_INT 13
63963: PUSH
63964: LD_INT 14
63966: PUSH
63967: LD_INT 15
63969: PUSH
63970: LD_INT 16
63972: PUSH
63973: LD_INT 17
63975: PUSH
63976: LD_INT 18
63978: PUSH
63979: LD_INT 19
63981: PUSH
63982: LD_INT 20
63984: PUSH
63985: LD_INT 21
63987: PUSH
63988: LD_INT 22
63990: PUSH
63991: LD_INT 23
63993: PUSH
63994: LD_INT 24
63996: PUSH
63997: LD_INT 25
63999: PUSH
64000: LD_INT 26
64002: PUSH
64003: LD_INT 28
64005: PUSH
64006: LD_INT 30
64008: PUSH
64009: LD_INT 31
64011: PUSH
64012: LD_INT 32
64014: PUSH
64015: LD_INT 36
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 101
64051: PUSH
64052: LD_INT 102
64054: PUSH
64055: LD_INT 103
64057: PUSH
64058: LD_INT 104
64060: PUSH
64061: LD_INT 105
64063: PUSH
64064: LD_INT 106
64066: PUSH
64067: LD_INT 107
64069: PUSH
64070: LD_INT 108
64072: PUSH
64073: LD_INT 109
64075: PUSH
64076: LD_INT 110
64078: PUSH
64079: LD_INT 111
64081: PUSH
64082: LD_INT 112
64084: PUSH
64085: LD_INT 114
64087: PUSH
64088: LD_INT 116
64090: PUSH
64091: LD_INT 117
64093: PUSH
64094: LD_INT 118
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: ST_TO_ADDR
64119: GO 66014
64121: LD_INT 11
64123: DOUBLE
64124: EQUAL
64125: IFTRUE 64129
64127: GO 64333
64129: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
64130: LD_ADDR_VAR 0 2
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 3
64140: PUSH
64141: LD_INT 4
64143: PUSH
64144: LD_INT 5
64146: PUSH
64147: LD_INT 6
64149: PUSH
64150: LD_INT 7
64152: PUSH
64153: LD_INT 8
64155: PUSH
64156: LD_INT 9
64158: PUSH
64159: LD_INT 10
64161: PUSH
64162: LD_INT 11
64164: PUSH
64165: LD_INT 12
64167: PUSH
64168: LD_INT 13
64170: PUSH
64171: LD_INT 14
64173: PUSH
64174: LD_INT 15
64176: PUSH
64177: LD_INT 16
64179: PUSH
64180: LD_INT 17
64182: PUSH
64183: LD_INT 18
64185: PUSH
64186: LD_INT 19
64188: PUSH
64189: LD_INT 20
64191: PUSH
64192: LD_INT 21
64194: PUSH
64195: LD_INT 22
64197: PUSH
64198: LD_INT 23
64200: PUSH
64201: LD_INT 24
64203: PUSH
64204: LD_INT 25
64206: PUSH
64207: LD_INT 26
64209: PUSH
64210: LD_INT 28
64212: PUSH
64213: LD_INT 30
64215: PUSH
64216: LD_INT 31
64218: PUSH
64219: LD_INT 32
64221: PUSH
64222: LD_INT 34
64224: PUSH
64225: LD_INT 36
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: LIST
64249: LIST
64250: LIST
64251: LIST
64252: LIST
64253: LIST
64254: LIST
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_INT 101
64263: PUSH
64264: LD_INT 102
64266: PUSH
64267: LD_INT 103
64269: PUSH
64270: LD_INT 104
64272: PUSH
64273: LD_INT 105
64275: PUSH
64276: LD_INT 106
64278: PUSH
64279: LD_INT 107
64281: PUSH
64282: LD_INT 108
64284: PUSH
64285: LD_INT 109
64287: PUSH
64288: LD_INT 110
64290: PUSH
64291: LD_INT 111
64293: PUSH
64294: LD_INT 112
64296: PUSH
64297: LD_INT 114
64299: PUSH
64300: LD_INT 116
64302: PUSH
64303: LD_INT 117
64305: PUSH
64306: LD_INT 118
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: ST_TO_ADDR
64331: GO 66014
64333: LD_INT 12
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64341
64339: GO 64561
64341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
64342: LD_ADDR_VAR 0 2
64346: PUSH
64347: LD_INT 1
64349: PUSH
64350: LD_INT 2
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: LD_INT 4
64358: PUSH
64359: LD_INT 5
64361: PUSH
64362: LD_INT 6
64364: PUSH
64365: LD_INT 7
64367: PUSH
64368: LD_INT 8
64370: PUSH
64371: LD_INT 9
64373: PUSH
64374: LD_INT 10
64376: PUSH
64377: LD_INT 11
64379: PUSH
64380: LD_INT 12
64382: PUSH
64383: LD_INT 13
64385: PUSH
64386: LD_INT 14
64388: PUSH
64389: LD_INT 15
64391: PUSH
64392: LD_INT 16
64394: PUSH
64395: LD_INT 17
64397: PUSH
64398: LD_INT 18
64400: PUSH
64401: LD_INT 19
64403: PUSH
64404: LD_INT 20
64406: PUSH
64407: LD_INT 21
64409: PUSH
64410: LD_INT 22
64412: PUSH
64413: LD_INT 23
64415: PUSH
64416: LD_INT 24
64418: PUSH
64419: LD_INT 25
64421: PUSH
64422: LD_INT 26
64424: PUSH
64425: LD_INT 27
64427: PUSH
64428: LD_INT 28
64430: PUSH
64431: LD_INT 30
64433: PUSH
64434: LD_INT 31
64436: PUSH
64437: LD_INT 32
64439: PUSH
64440: LD_INT 33
64442: PUSH
64443: LD_INT 34
64445: PUSH
64446: LD_INT 36
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 101
64487: PUSH
64488: LD_INT 102
64490: PUSH
64491: LD_INT 103
64493: PUSH
64494: LD_INT 104
64496: PUSH
64497: LD_INT 105
64499: PUSH
64500: LD_INT 106
64502: PUSH
64503: LD_INT 107
64505: PUSH
64506: LD_INT 108
64508: PUSH
64509: LD_INT 109
64511: PUSH
64512: LD_INT 110
64514: PUSH
64515: LD_INT 111
64517: PUSH
64518: LD_INT 112
64520: PUSH
64521: LD_INT 113
64523: PUSH
64524: LD_INT 114
64526: PUSH
64527: LD_INT 116
64529: PUSH
64530: LD_INT 117
64532: PUSH
64533: LD_INT 118
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: ST_TO_ADDR
64559: GO 66014
64561: LD_INT 13
64563: DOUBLE
64564: EQUAL
64565: IFTRUE 64569
64567: GO 64777
64569: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
64570: LD_ADDR_VAR 0 2
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: LD_INT 3
64583: PUSH
64584: LD_INT 4
64586: PUSH
64587: LD_INT 5
64589: PUSH
64590: LD_INT 8
64592: PUSH
64593: LD_INT 9
64595: PUSH
64596: LD_INT 10
64598: PUSH
64599: LD_INT 11
64601: PUSH
64602: LD_INT 12
64604: PUSH
64605: LD_INT 14
64607: PUSH
64608: LD_INT 15
64610: PUSH
64611: LD_INT 16
64613: PUSH
64614: LD_INT 17
64616: PUSH
64617: LD_INT 18
64619: PUSH
64620: LD_INT 19
64622: PUSH
64623: LD_INT 20
64625: PUSH
64626: LD_INT 21
64628: PUSH
64629: LD_INT 22
64631: PUSH
64632: LD_INT 23
64634: PUSH
64635: LD_INT 24
64637: PUSH
64638: LD_INT 25
64640: PUSH
64641: LD_INT 26
64643: PUSH
64644: LD_INT 27
64646: PUSH
64647: LD_INT 28
64649: PUSH
64650: LD_INT 30
64652: PUSH
64653: LD_INT 31
64655: PUSH
64656: LD_INT 32
64658: PUSH
64659: LD_INT 33
64661: PUSH
64662: LD_INT 34
64664: PUSH
64665: LD_INT 36
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 101
64703: PUSH
64704: LD_INT 102
64706: PUSH
64707: LD_INT 103
64709: PUSH
64710: LD_INT 104
64712: PUSH
64713: LD_INT 105
64715: PUSH
64716: LD_INT 106
64718: PUSH
64719: LD_INT 107
64721: PUSH
64722: LD_INT 108
64724: PUSH
64725: LD_INT 109
64727: PUSH
64728: LD_INT 110
64730: PUSH
64731: LD_INT 111
64733: PUSH
64734: LD_INT 112
64736: PUSH
64737: LD_INT 113
64739: PUSH
64740: LD_INT 114
64742: PUSH
64743: LD_INT 116
64745: PUSH
64746: LD_INT 117
64748: PUSH
64749: LD_INT 118
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: PUSH
64771: EMPTY
64772: LIST
64773: LIST
64774: ST_TO_ADDR
64775: GO 66014
64777: LD_INT 14
64779: DOUBLE
64780: EQUAL
64781: IFTRUE 64785
64783: GO 65009
64785: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
64786: LD_ADDR_VAR 0 2
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: LD_INT 2
64796: PUSH
64797: LD_INT 3
64799: PUSH
64800: LD_INT 4
64802: PUSH
64803: LD_INT 5
64805: PUSH
64806: LD_INT 6
64808: PUSH
64809: LD_INT 7
64811: PUSH
64812: LD_INT 8
64814: PUSH
64815: LD_INT 9
64817: PUSH
64818: LD_INT 10
64820: PUSH
64821: LD_INT 11
64823: PUSH
64824: LD_INT 12
64826: PUSH
64827: LD_INT 13
64829: PUSH
64830: LD_INT 14
64832: PUSH
64833: LD_INT 15
64835: PUSH
64836: LD_INT 16
64838: PUSH
64839: LD_INT 17
64841: PUSH
64842: LD_INT 18
64844: PUSH
64845: LD_INT 19
64847: PUSH
64848: LD_INT 20
64850: PUSH
64851: LD_INT 21
64853: PUSH
64854: LD_INT 22
64856: PUSH
64857: LD_INT 23
64859: PUSH
64860: LD_INT 24
64862: PUSH
64863: LD_INT 25
64865: PUSH
64866: LD_INT 26
64868: PUSH
64869: LD_INT 27
64871: PUSH
64872: LD_INT 28
64874: PUSH
64875: LD_INT 29
64877: PUSH
64878: LD_INT 30
64880: PUSH
64881: LD_INT 31
64883: PUSH
64884: LD_INT 32
64886: PUSH
64887: LD_INT 33
64889: PUSH
64890: LD_INT 34
64892: PUSH
64893: LD_INT 36
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 101
64935: PUSH
64936: LD_INT 102
64938: PUSH
64939: LD_INT 103
64941: PUSH
64942: LD_INT 104
64944: PUSH
64945: LD_INT 105
64947: PUSH
64948: LD_INT 106
64950: PUSH
64951: LD_INT 107
64953: PUSH
64954: LD_INT 108
64956: PUSH
64957: LD_INT 109
64959: PUSH
64960: LD_INT 110
64962: PUSH
64963: LD_INT 111
64965: PUSH
64966: LD_INT 112
64968: PUSH
64969: LD_INT 113
64971: PUSH
64972: LD_INT 114
64974: PUSH
64975: LD_INT 116
64977: PUSH
64978: LD_INT 117
64980: PUSH
64981: LD_INT 118
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: ST_TO_ADDR
65007: GO 66014
65009: LD_INT 15
65011: DOUBLE
65012: EQUAL
65013: IFTRUE 65017
65015: GO 65241
65017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
65018: LD_ADDR_VAR 0 2
65022: PUSH
65023: LD_INT 1
65025: PUSH
65026: LD_INT 2
65028: PUSH
65029: LD_INT 3
65031: PUSH
65032: LD_INT 4
65034: PUSH
65035: LD_INT 5
65037: PUSH
65038: LD_INT 6
65040: PUSH
65041: LD_INT 7
65043: PUSH
65044: LD_INT 8
65046: PUSH
65047: LD_INT 9
65049: PUSH
65050: LD_INT 10
65052: PUSH
65053: LD_INT 11
65055: PUSH
65056: LD_INT 12
65058: PUSH
65059: LD_INT 13
65061: PUSH
65062: LD_INT 14
65064: PUSH
65065: LD_INT 15
65067: PUSH
65068: LD_INT 16
65070: PUSH
65071: LD_INT 17
65073: PUSH
65074: LD_INT 18
65076: PUSH
65077: LD_INT 19
65079: PUSH
65080: LD_INT 20
65082: PUSH
65083: LD_INT 21
65085: PUSH
65086: LD_INT 22
65088: PUSH
65089: LD_INT 23
65091: PUSH
65092: LD_INT 24
65094: PUSH
65095: LD_INT 25
65097: PUSH
65098: LD_INT 26
65100: PUSH
65101: LD_INT 27
65103: PUSH
65104: LD_INT 28
65106: PUSH
65107: LD_INT 29
65109: PUSH
65110: LD_INT 30
65112: PUSH
65113: LD_INT 31
65115: PUSH
65116: LD_INT 32
65118: PUSH
65119: LD_INT 33
65121: PUSH
65122: LD_INT 34
65124: PUSH
65125: LD_INT 36
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 101
65167: PUSH
65168: LD_INT 102
65170: PUSH
65171: LD_INT 103
65173: PUSH
65174: LD_INT 104
65176: PUSH
65177: LD_INT 105
65179: PUSH
65180: LD_INT 106
65182: PUSH
65183: LD_INT 107
65185: PUSH
65186: LD_INT 108
65188: PUSH
65189: LD_INT 109
65191: PUSH
65192: LD_INT 110
65194: PUSH
65195: LD_INT 111
65197: PUSH
65198: LD_INT 112
65200: PUSH
65201: LD_INT 113
65203: PUSH
65204: LD_INT 114
65206: PUSH
65207: LD_INT 116
65209: PUSH
65210: LD_INT 117
65212: PUSH
65213: LD_INT 118
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: ST_TO_ADDR
65239: GO 66014
65241: LD_INT 16
65243: DOUBLE
65244: EQUAL
65245: IFTRUE 65249
65247: GO 65385
65249: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
65250: LD_ADDR_VAR 0 2
65254: PUSH
65255: LD_INT 2
65257: PUSH
65258: LD_INT 4
65260: PUSH
65261: LD_INT 5
65263: PUSH
65264: LD_INT 7
65266: PUSH
65267: LD_INT 11
65269: PUSH
65270: LD_INT 12
65272: PUSH
65273: LD_INT 15
65275: PUSH
65276: LD_INT 16
65278: PUSH
65279: LD_INT 20
65281: PUSH
65282: LD_INT 21
65284: PUSH
65285: LD_INT 22
65287: PUSH
65288: LD_INT 23
65290: PUSH
65291: LD_INT 25
65293: PUSH
65294: LD_INT 26
65296: PUSH
65297: LD_INT 30
65299: PUSH
65300: LD_INT 31
65302: PUSH
65303: LD_INT 32
65305: PUSH
65306: LD_INT 33
65308: PUSH
65309: LD_INT 34
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: PUSH
65333: LD_INT 101
65335: PUSH
65336: LD_INT 102
65338: PUSH
65339: LD_INT 103
65341: PUSH
65342: LD_INT 106
65344: PUSH
65345: LD_INT 108
65347: PUSH
65348: LD_INT 112
65350: PUSH
65351: LD_INT 113
65353: PUSH
65354: LD_INT 114
65356: PUSH
65357: LD_INT 116
65359: PUSH
65360: LD_INT 117
65362: PUSH
65363: LD_INT 118
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: LIST
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: ST_TO_ADDR
65383: GO 66014
65385: LD_INT 17
65387: DOUBLE
65388: EQUAL
65389: IFTRUE 65393
65391: GO 65617
65393: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
65394: LD_ADDR_VAR 0 2
65398: PUSH
65399: LD_INT 1
65401: PUSH
65402: LD_INT 2
65404: PUSH
65405: LD_INT 3
65407: PUSH
65408: LD_INT 4
65410: PUSH
65411: LD_INT 5
65413: PUSH
65414: LD_INT 6
65416: PUSH
65417: LD_INT 7
65419: PUSH
65420: LD_INT 8
65422: PUSH
65423: LD_INT 9
65425: PUSH
65426: LD_INT 10
65428: PUSH
65429: LD_INT 11
65431: PUSH
65432: LD_INT 12
65434: PUSH
65435: LD_INT 13
65437: PUSH
65438: LD_INT 14
65440: PUSH
65441: LD_INT 15
65443: PUSH
65444: LD_INT 16
65446: PUSH
65447: LD_INT 17
65449: PUSH
65450: LD_INT 18
65452: PUSH
65453: LD_INT 19
65455: PUSH
65456: LD_INT 20
65458: PUSH
65459: LD_INT 21
65461: PUSH
65462: LD_INT 22
65464: PUSH
65465: LD_INT 23
65467: PUSH
65468: LD_INT 24
65470: PUSH
65471: LD_INT 25
65473: PUSH
65474: LD_INT 26
65476: PUSH
65477: LD_INT 27
65479: PUSH
65480: LD_INT 28
65482: PUSH
65483: LD_INT 29
65485: PUSH
65486: LD_INT 30
65488: PUSH
65489: LD_INT 31
65491: PUSH
65492: LD_INT 32
65494: PUSH
65495: LD_INT 33
65497: PUSH
65498: LD_INT 34
65500: PUSH
65501: LD_INT 36
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: LIST
65527: LIST
65528: LIST
65529: LIST
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 101
65543: PUSH
65544: LD_INT 102
65546: PUSH
65547: LD_INT 103
65549: PUSH
65550: LD_INT 104
65552: PUSH
65553: LD_INT 105
65555: PUSH
65556: LD_INT 106
65558: PUSH
65559: LD_INT 107
65561: PUSH
65562: LD_INT 108
65564: PUSH
65565: LD_INT 109
65567: PUSH
65568: LD_INT 110
65570: PUSH
65571: LD_INT 111
65573: PUSH
65574: LD_INT 112
65576: PUSH
65577: LD_INT 113
65579: PUSH
65580: LD_INT 114
65582: PUSH
65583: LD_INT 116
65585: PUSH
65586: LD_INT 117
65588: PUSH
65589: LD_INT 118
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: ST_TO_ADDR
65615: GO 66014
65617: LD_INT 18
65619: DOUBLE
65620: EQUAL
65621: IFTRUE 65625
65623: GO 65773
65625: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
65626: LD_ADDR_VAR 0 2
65630: PUSH
65631: LD_INT 2
65633: PUSH
65634: LD_INT 4
65636: PUSH
65637: LD_INT 5
65639: PUSH
65640: LD_INT 7
65642: PUSH
65643: LD_INT 11
65645: PUSH
65646: LD_INT 12
65648: PUSH
65649: LD_INT 15
65651: PUSH
65652: LD_INT 16
65654: PUSH
65655: LD_INT 20
65657: PUSH
65658: LD_INT 21
65660: PUSH
65661: LD_INT 22
65663: PUSH
65664: LD_INT 23
65666: PUSH
65667: LD_INT 25
65669: PUSH
65670: LD_INT 26
65672: PUSH
65673: LD_INT 30
65675: PUSH
65676: LD_INT 31
65678: PUSH
65679: LD_INT 32
65681: PUSH
65682: LD_INT 33
65684: PUSH
65685: LD_INT 34
65687: PUSH
65688: LD_INT 35
65690: PUSH
65691: LD_INT 36
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 101
65719: PUSH
65720: LD_INT 102
65722: PUSH
65723: LD_INT 103
65725: PUSH
65726: LD_INT 106
65728: PUSH
65729: LD_INT 108
65731: PUSH
65732: LD_INT 112
65734: PUSH
65735: LD_INT 113
65737: PUSH
65738: LD_INT 114
65740: PUSH
65741: LD_INT 115
65743: PUSH
65744: LD_INT 116
65746: PUSH
65747: LD_INT 117
65749: PUSH
65750: LD_INT 118
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: ST_TO_ADDR
65771: GO 66014
65773: LD_INT 19
65775: DOUBLE
65776: EQUAL
65777: IFTRUE 65781
65779: GO 66013
65781: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
65782: LD_ADDR_VAR 0 2
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 3
65795: PUSH
65796: LD_INT 4
65798: PUSH
65799: LD_INT 5
65801: PUSH
65802: LD_INT 6
65804: PUSH
65805: LD_INT 7
65807: PUSH
65808: LD_INT 8
65810: PUSH
65811: LD_INT 9
65813: PUSH
65814: LD_INT 10
65816: PUSH
65817: LD_INT 11
65819: PUSH
65820: LD_INT 12
65822: PUSH
65823: LD_INT 13
65825: PUSH
65826: LD_INT 14
65828: PUSH
65829: LD_INT 15
65831: PUSH
65832: LD_INT 16
65834: PUSH
65835: LD_INT 17
65837: PUSH
65838: LD_INT 18
65840: PUSH
65841: LD_INT 19
65843: PUSH
65844: LD_INT 20
65846: PUSH
65847: LD_INT 21
65849: PUSH
65850: LD_INT 22
65852: PUSH
65853: LD_INT 23
65855: PUSH
65856: LD_INT 24
65858: PUSH
65859: LD_INT 25
65861: PUSH
65862: LD_INT 26
65864: PUSH
65865: LD_INT 27
65867: PUSH
65868: LD_INT 28
65870: PUSH
65871: LD_INT 29
65873: PUSH
65874: LD_INT 30
65876: PUSH
65877: LD_INT 31
65879: PUSH
65880: LD_INT 32
65882: PUSH
65883: LD_INT 33
65885: PUSH
65886: LD_INT 34
65888: PUSH
65889: LD_INT 35
65891: PUSH
65892: LD_INT 36
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 101
65935: PUSH
65936: LD_INT 102
65938: PUSH
65939: LD_INT 103
65941: PUSH
65942: LD_INT 104
65944: PUSH
65945: LD_INT 105
65947: PUSH
65948: LD_INT 106
65950: PUSH
65951: LD_INT 107
65953: PUSH
65954: LD_INT 108
65956: PUSH
65957: LD_INT 109
65959: PUSH
65960: LD_INT 110
65962: PUSH
65963: LD_INT 111
65965: PUSH
65966: LD_INT 112
65968: PUSH
65969: LD_INT 113
65971: PUSH
65972: LD_INT 114
65974: PUSH
65975: LD_INT 115
65977: PUSH
65978: LD_INT 116
65980: PUSH
65981: LD_INT 117
65983: PUSH
65984: LD_INT 118
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: ST_TO_ADDR
66011: GO 66014
66013: POP
// end else
66014: GO 66245
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
66016: LD_ADDR_VAR 0 2
66020: PUSH
66021: LD_INT 1
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: LD_INT 3
66029: PUSH
66030: LD_INT 4
66032: PUSH
66033: LD_INT 5
66035: PUSH
66036: LD_INT 6
66038: PUSH
66039: LD_INT 7
66041: PUSH
66042: LD_INT 8
66044: PUSH
66045: LD_INT 9
66047: PUSH
66048: LD_INT 10
66050: PUSH
66051: LD_INT 11
66053: PUSH
66054: LD_INT 12
66056: PUSH
66057: LD_INT 13
66059: PUSH
66060: LD_INT 14
66062: PUSH
66063: LD_INT 15
66065: PUSH
66066: LD_INT 16
66068: PUSH
66069: LD_INT 17
66071: PUSH
66072: LD_INT 18
66074: PUSH
66075: LD_INT 19
66077: PUSH
66078: LD_INT 20
66080: PUSH
66081: LD_INT 21
66083: PUSH
66084: LD_INT 22
66086: PUSH
66087: LD_INT 23
66089: PUSH
66090: LD_INT 24
66092: PUSH
66093: LD_INT 25
66095: PUSH
66096: LD_INT 26
66098: PUSH
66099: LD_INT 27
66101: PUSH
66102: LD_INT 28
66104: PUSH
66105: LD_INT 29
66107: PUSH
66108: LD_INT 30
66110: PUSH
66111: LD_INT 31
66113: PUSH
66114: LD_INT 32
66116: PUSH
66117: LD_INT 33
66119: PUSH
66120: LD_INT 34
66122: PUSH
66123: LD_INT 35
66125: PUSH
66126: LD_INT 36
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: LIST
66134: LIST
66135: LIST
66136: LIST
66137: LIST
66138: LIST
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 101
66169: PUSH
66170: LD_INT 102
66172: PUSH
66173: LD_INT 103
66175: PUSH
66176: LD_INT 104
66178: PUSH
66179: LD_INT 105
66181: PUSH
66182: LD_INT 106
66184: PUSH
66185: LD_INT 107
66187: PUSH
66188: LD_INT 108
66190: PUSH
66191: LD_INT 109
66193: PUSH
66194: LD_INT 110
66196: PUSH
66197: LD_INT 111
66199: PUSH
66200: LD_INT 112
66202: PUSH
66203: LD_INT 113
66205: PUSH
66206: LD_INT 114
66208: PUSH
66209: LD_INT 115
66211: PUSH
66212: LD_INT 116
66214: PUSH
66215: LD_INT 117
66217: PUSH
66218: LD_INT 118
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// if result then
66245: LD_VAR 0 2
66249: IFFALSE 67035
// begin normal :=  ;
66251: LD_ADDR_VAR 0 5
66255: PUSH
66256: LD_STRING 
66258: ST_TO_ADDR
// hardcore :=  ;
66259: LD_ADDR_VAR 0 6
66263: PUSH
66264: LD_STRING 
66266: ST_TO_ADDR
// active :=  ;
66267: LD_ADDR_VAR 0 7
66271: PUSH
66272: LD_STRING 
66274: ST_TO_ADDR
// for i = 1 to normalCounter do
66275: LD_ADDR_VAR 0 8
66279: PUSH
66280: DOUBLE
66281: LD_INT 1
66283: DEC
66284: ST_TO_ADDR
66285: LD_EXP 52
66289: PUSH
66290: FOR_TO
66291: IFFALSE 66392
// begin tmp := 0 ;
66293: LD_ADDR_VAR 0 3
66297: PUSH
66298: LD_STRING 0
66300: ST_TO_ADDR
// if result [ 1 ] then
66301: LD_VAR 0 2
66305: PUSH
66306: LD_INT 1
66308: ARRAY
66309: IFFALSE 66374
// if result [ 1 ] [ 1 ] = i then
66311: LD_VAR 0 2
66315: PUSH
66316: LD_INT 1
66318: ARRAY
66319: PUSH
66320: LD_INT 1
66322: ARRAY
66323: PUSH
66324: LD_VAR 0 8
66328: EQUAL
66329: IFFALSE 66374
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
66331: LD_ADDR_VAR 0 2
66335: PUSH
66336: LD_VAR 0 2
66340: PPUSH
66341: LD_INT 1
66343: PPUSH
66344: LD_VAR 0 2
66348: PUSH
66349: LD_INT 1
66351: ARRAY
66352: PPUSH
66353: LD_INT 1
66355: PPUSH
66356: CALL_OW 3
66360: PPUSH
66361: CALL_OW 1
66365: ST_TO_ADDR
// tmp := 1 ;
66366: LD_ADDR_VAR 0 3
66370: PUSH
66371: LD_STRING 1
66373: ST_TO_ADDR
// end ; normal := normal & tmp ;
66374: LD_ADDR_VAR 0 5
66378: PUSH
66379: LD_VAR 0 5
66383: PUSH
66384: LD_VAR 0 3
66388: STR
66389: ST_TO_ADDR
// end ;
66390: GO 66290
66392: POP
66393: POP
// for i = 1 to hardcoreCounter do
66394: LD_ADDR_VAR 0 8
66398: PUSH
66399: DOUBLE
66400: LD_INT 1
66402: DEC
66403: ST_TO_ADDR
66404: LD_EXP 53
66408: PUSH
66409: FOR_TO
66410: IFFALSE 66515
// begin tmp := 0 ;
66412: LD_ADDR_VAR 0 3
66416: PUSH
66417: LD_STRING 0
66419: ST_TO_ADDR
// if result [ 2 ] then
66420: LD_VAR 0 2
66424: PUSH
66425: LD_INT 2
66427: ARRAY
66428: IFFALSE 66497
// if result [ 2 ] [ 1 ] = 100 + i then
66430: LD_VAR 0 2
66434: PUSH
66435: LD_INT 2
66437: ARRAY
66438: PUSH
66439: LD_INT 1
66441: ARRAY
66442: PUSH
66443: LD_INT 100
66445: PUSH
66446: LD_VAR 0 8
66450: PLUS
66451: EQUAL
66452: IFFALSE 66497
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
66454: LD_ADDR_VAR 0 2
66458: PUSH
66459: LD_VAR 0 2
66463: PPUSH
66464: LD_INT 2
66466: PPUSH
66467: LD_VAR 0 2
66471: PUSH
66472: LD_INT 2
66474: ARRAY
66475: PPUSH
66476: LD_INT 1
66478: PPUSH
66479: CALL_OW 3
66483: PPUSH
66484: CALL_OW 1
66488: ST_TO_ADDR
// tmp := 1 ;
66489: LD_ADDR_VAR 0 3
66493: PUSH
66494: LD_STRING 1
66496: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
66497: LD_ADDR_VAR 0 6
66501: PUSH
66502: LD_VAR 0 6
66506: PUSH
66507: LD_VAR 0 3
66511: STR
66512: ST_TO_ADDR
// end ;
66513: GO 66409
66515: POP
66516: POP
// if isGameLoad then
66517: LD_VAR 0 1
66521: IFFALSE 66996
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
66523: LD_ADDR_VAR 0 4
66527: PUSH
66528: LD_EXP 56
66532: PUSH
66533: LD_EXP 55
66537: PUSH
66538: LD_EXP 57
66542: PUSH
66543: LD_EXP 54
66547: PUSH
66548: LD_EXP 58
66552: PUSH
66553: LD_EXP 59
66557: PUSH
66558: LD_EXP 60
66562: PUSH
66563: LD_EXP 61
66567: PUSH
66568: LD_EXP 62
66572: PUSH
66573: LD_EXP 63
66577: PUSH
66578: LD_EXP 64
66582: PUSH
66583: LD_EXP 65
66587: PUSH
66588: LD_EXP 66
66592: PUSH
66593: LD_EXP 67
66597: PUSH
66598: LD_EXP 75
66602: PUSH
66603: LD_EXP 76
66607: PUSH
66608: LD_EXP 77
66612: PUSH
66613: LD_EXP 78
66617: PUSH
66618: LD_EXP 80
66622: PUSH
66623: LD_EXP 81
66627: PUSH
66628: LD_EXP 82
66632: PUSH
66633: LD_EXP 85
66637: PUSH
66638: LD_EXP 87
66642: PUSH
66643: LD_EXP 88
66647: PUSH
66648: LD_EXP 89
66652: PUSH
66653: LD_EXP 91
66657: PUSH
66658: LD_EXP 92
66662: PUSH
66663: LD_EXP 95
66667: PUSH
66668: LD_EXP 96
66672: PUSH
66673: LD_EXP 97
66677: PUSH
66678: LD_EXP 98
66682: PUSH
66683: LD_EXP 99
66687: PUSH
66688: LD_EXP 100
66692: PUSH
66693: LD_EXP 101
66697: PUSH
66698: LD_EXP 102
66702: PUSH
66703: LD_EXP 103
66707: PUSH
66708: LD_EXP 68
66712: PUSH
66713: LD_EXP 69
66717: PUSH
66718: LD_EXP 72
66722: PUSH
66723: LD_EXP 73
66727: PUSH
66728: LD_EXP 74
66732: PUSH
66733: LD_EXP 70
66737: PUSH
66738: LD_EXP 71
66742: PUSH
66743: LD_EXP 79
66747: PUSH
66748: LD_EXP 83
66752: PUSH
66753: LD_EXP 84
66757: PUSH
66758: LD_EXP 86
66762: PUSH
66763: LD_EXP 90
66767: PUSH
66768: LD_EXP 93
66772: PUSH
66773: LD_EXP 94
66777: PUSH
66778: LD_EXP 104
66782: PUSH
66783: LD_EXP 105
66787: PUSH
66788: LD_EXP 106
66792: PUSH
66793: LD_EXP 107
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: LIST
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: LIST
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: LIST
66829: LIST
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// tmp :=  ;
66854: LD_ADDR_VAR 0 3
66858: PUSH
66859: LD_STRING 
66861: ST_TO_ADDR
// for i = 1 to normalCounter do
66862: LD_ADDR_VAR 0 8
66866: PUSH
66867: DOUBLE
66868: LD_INT 1
66870: DEC
66871: ST_TO_ADDR
66872: LD_EXP 52
66876: PUSH
66877: FOR_TO
66878: IFFALSE 66914
// begin if flags [ i ] then
66880: LD_VAR 0 4
66884: PUSH
66885: LD_VAR 0 8
66889: ARRAY
66890: IFFALSE 66912
// tmp := tmp & i & ; ;
66892: LD_ADDR_VAR 0 3
66896: PUSH
66897: LD_VAR 0 3
66901: PUSH
66902: LD_VAR 0 8
66906: STR
66907: PUSH
66908: LD_STRING ;
66910: STR
66911: ST_TO_ADDR
// end ;
66912: GO 66877
66914: POP
66915: POP
// for i = 1 to hardcoreCounter do
66916: LD_ADDR_VAR 0 8
66920: PUSH
66921: DOUBLE
66922: LD_INT 1
66924: DEC
66925: ST_TO_ADDR
66926: LD_EXP 53
66930: PUSH
66931: FOR_TO
66932: IFFALSE 66978
// begin if flags [ normalCounter + i ] then
66934: LD_VAR 0 4
66938: PUSH
66939: LD_EXP 52
66943: PUSH
66944: LD_VAR 0 8
66948: PLUS
66949: ARRAY
66950: IFFALSE 66976
// tmp := tmp & ( 100 + i ) & ; ;
66952: LD_ADDR_VAR 0 3
66956: PUSH
66957: LD_VAR 0 3
66961: PUSH
66962: LD_INT 100
66964: PUSH
66965: LD_VAR 0 8
66969: PLUS
66970: STR
66971: PUSH
66972: LD_STRING ;
66974: STR
66975: ST_TO_ADDR
// end ;
66976: GO 66931
66978: POP
66979: POP
// if tmp then
66980: LD_VAR 0 3
66984: IFFALSE 66996
// active := tmp ;
66986: LD_ADDR_VAR 0 7
66990: PUSH
66991: LD_VAR 0 3
66995: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
66996: LD_STRING getStreamItemsFromMission("
66998: PUSH
66999: LD_VAR 0 5
67003: STR
67004: PUSH
67005: LD_STRING ","
67007: STR
67008: PUSH
67009: LD_VAR 0 6
67013: STR
67014: PUSH
67015: LD_STRING ","
67017: STR
67018: PUSH
67019: LD_VAR 0 7
67023: STR
67024: PUSH
67025: LD_STRING ")
67027: STR
67028: PPUSH
67029: CALL_OW 559
// end else
67033: GO 67042
// ToLua ( getStreamItemsFromMission("","","") ) ;
67035: LD_STRING getStreamItemsFromMission("","","")
67037: PPUSH
67038: CALL_OW 559
// end ;
67042: LD_VAR 0 2
67046: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
67047: LD_EXP 51
67051: IFFALSE 67059
67053: PUSH
67054: LD_EXP 56
67058: AND
67059: IFFALSE 67183
67061: GO 67063
67063: DISABLE
67064: LD_INT 0
67066: PPUSH
67067: PPUSH
// begin enable ;
67068: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
67069: LD_ADDR_VAR 0 2
67073: PUSH
67074: LD_INT 22
67076: PUSH
67077: LD_OWVAR 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: LD_INT 34
67091: PUSH
67092: LD_INT 7
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 34
67101: PUSH
67102: LD_INT 45
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 34
67111: PUSH
67112: LD_INT 28
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: LD_INT 34
67121: PUSH
67122: LD_INT 47
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PPUSH
67140: CALL_OW 69
67144: ST_TO_ADDR
// if not tmp then
67145: LD_VAR 0 2
67149: NOT
67150: IFFALSE 67154
// exit ;
67152: GO 67183
// for i in tmp do
67154: LD_ADDR_VAR 0 1
67158: PUSH
67159: LD_VAR 0 2
67163: PUSH
67164: FOR_IN
67165: IFFALSE 67181
// begin SetLives ( i , 0 ) ;
67167: LD_VAR 0 1
67171: PPUSH
67172: LD_INT 0
67174: PPUSH
67175: CALL_OW 234
// end ;
67179: GO 67164
67181: POP
67182: POP
// end ;
67183: PPOPN 2
67185: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
67186: LD_EXP 51
67190: IFFALSE 67198
67192: PUSH
67193: LD_EXP 57
67197: AND
67198: IFFALSE 67282
67200: GO 67202
67202: DISABLE
67203: LD_INT 0
67205: PPUSH
67206: PPUSH
// begin enable ;
67207: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
67208: LD_ADDR_VAR 0 2
67212: PUSH
67213: LD_INT 22
67215: PUSH
67216: LD_OWVAR 2
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 32
67227: PUSH
67228: LD_INT 3
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PPUSH
67239: CALL_OW 69
67243: ST_TO_ADDR
// if not tmp then
67244: LD_VAR 0 2
67248: NOT
67249: IFFALSE 67253
// exit ;
67251: GO 67282
// for i in tmp do
67253: LD_ADDR_VAR 0 1
67257: PUSH
67258: LD_VAR 0 2
67262: PUSH
67263: FOR_IN
67264: IFFALSE 67280
// begin SetLives ( i , 0 ) ;
67266: LD_VAR 0 1
67270: PPUSH
67271: LD_INT 0
67273: PPUSH
67274: CALL_OW 234
// end ;
67278: GO 67263
67280: POP
67281: POP
// end ;
67282: PPOPN 2
67284: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
67285: LD_EXP 51
67289: IFFALSE 67297
67291: PUSH
67292: LD_EXP 54
67296: AND
67297: IFFALSE 67390
67299: GO 67301
67301: DISABLE
67302: LD_INT 0
67304: PPUSH
// begin enable ;
67305: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
67306: LD_ADDR_VAR 0 1
67310: PUSH
67311: LD_INT 22
67313: PUSH
67314: LD_OWVAR 2
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: LD_INT 25
67328: PUSH
67329: LD_INT 5
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 25
67338: PUSH
67339: LD_INT 9
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 25
67348: PUSH
67349: LD_INT 8
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: EMPTY
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PPUSH
67366: CALL_OW 69
67370: PUSH
67371: FOR_IN
67372: IFFALSE 67388
// begin SetClass ( i , 1 ) ;
67374: LD_VAR 0 1
67378: PPUSH
67379: LD_INT 1
67381: PPUSH
67382: CALL_OW 336
// end ;
67386: GO 67371
67388: POP
67389: POP
// end ;
67390: PPOPN 1
67392: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
67393: LD_EXP 51
67397: IFFALSE 67405
67399: PUSH
67400: LD_EXP 55
67404: AND
67405: IFFALSE 67417
67407: PUSH
67408: LD_OWVAR 65
67412: PUSH
67413: LD_INT 7
67415: LESS
67416: AND
67417: IFFALSE 67431
67419: GO 67421
67421: DISABLE
// begin enable ;
67422: ENABLE
// game_speed := 7 ;
67423: LD_ADDR_OWVAR 65
67427: PUSH
67428: LD_INT 7
67430: ST_TO_ADDR
// end ;
67431: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
67432: LD_EXP 51
67436: IFFALSE 67444
67438: PUSH
67439: LD_EXP 58
67443: AND
67444: IFFALSE 67646
67446: GO 67448
67448: DISABLE
67449: LD_INT 0
67451: PPUSH
67452: PPUSH
67453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67454: LD_ADDR_VAR 0 3
67458: PUSH
67459: LD_INT 81
67461: PUSH
67462: LD_OWVAR 2
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 21
67473: PUSH
67474: LD_INT 1
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PPUSH
67485: CALL_OW 69
67489: ST_TO_ADDR
// if not tmp then
67490: LD_VAR 0 3
67494: NOT
67495: IFFALSE 67499
// exit ;
67497: GO 67646
// if tmp > 5 then
67499: LD_VAR 0 3
67503: PUSH
67504: LD_INT 5
67506: GREATER
67507: IFFALSE 67519
// k := 5 else
67509: LD_ADDR_VAR 0 2
67513: PUSH
67514: LD_INT 5
67516: ST_TO_ADDR
67517: GO 67529
// k := tmp ;
67519: LD_ADDR_VAR 0 2
67523: PUSH
67524: LD_VAR 0 3
67528: ST_TO_ADDR
// for i := 1 to k do
67529: LD_ADDR_VAR 0 1
67533: PUSH
67534: DOUBLE
67535: LD_INT 1
67537: DEC
67538: ST_TO_ADDR
67539: LD_VAR 0 2
67543: PUSH
67544: FOR_TO
67545: IFFALSE 67644
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
67547: LD_VAR 0 3
67551: PUSH
67552: LD_VAR 0 1
67556: ARRAY
67557: PPUSH
67558: LD_VAR 0 1
67562: PUSH
67563: LD_INT 4
67565: MOD
67566: PUSH
67567: LD_INT 1
67569: PLUS
67570: PPUSH
67571: CALL_OW 259
67575: PUSH
67576: LD_INT 10
67578: LESS
67579: IFFALSE 67642
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
67581: LD_VAR 0 3
67585: PUSH
67586: LD_VAR 0 1
67590: ARRAY
67591: PPUSH
67592: LD_VAR 0 1
67596: PUSH
67597: LD_INT 4
67599: MOD
67600: PUSH
67601: LD_INT 1
67603: PLUS
67604: PPUSH
67605: LD_VAR 0 3
67609: PUSH
67610: LD_VAR 0 1
67614: ARRAY
67615: PPUSH
67616: LD_VAR 0 1
67620: PUSH
67621: LD_INT 4
67623: MOD
67624: PUSH
67625: LD_INT 1
67627: PLUS
67628: PPUSH
67629: CALL_OW 259
67633: PUSH
67634: LD_INT 1
67636: PLUS
67637: PPUSH
67638: CALL_OW 237
67642: GO 67544
67644: POP
67645: POP
// end ;
67646: PPOPN 3
67648: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
67649: LD_EXP 51
67653: IFFALSE 67661
67655: PUSH
67656: LD_EXP 59
67660: AND
67661: IFFALSE 67681
67663: GO 67665
67665: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
67666: LD_INT 4
67668: PPUSH
67669: LD_OWVAR 2
67673: PPUSH
67674: LD_INT 0
67676: PPUSH
67677: CALL_OW 324
67681: END
// every 0 0$1 trigger StreamModeActive and sShovel do
67682: LD_EXP 51
67686: IFFALSE 67694
67688: PUSH
67689: LD_EXP 88
67693: AND
67694: IFFALSE 67714
67696: GO 67698
67698: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
67699: LD_INT 19
67701: PPUSH
67702: LD_OWVAR 2
67706: PPUSH
67707: LD_INT 0
67709: PPUSH
67710: CALL_OW 324
67714: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
67715: LD_EXP 51
67719: IFFALSE 67727
67721: PUSH
67722: LD_EXP 60
67726: AND
67727: IFFALSE 67829
67729: GO 67731
67731: DISABLE
67732: LD_INT 0
67734: PPUSH
67735: PPUSH
// begin enable ;
67736: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
67737: LD_ADDR_VAR 0 2
67741: PUSH
67742: LD_INT 22
67744: PUSH
67745: LD_OWVAR 2
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: PUSH
67754: LD_INT 2
67756: PUSH
67757: LD_INT 34
67759: PUSH
67760: LD_INT 11
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 34
67769: PUSH
67770: LD_INT 30
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: LIST
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PPUSH
67786: CALL_OW 69
67790: ST_TO_ADDR
// if not tmp then
67791: LD_VAR 0 2
67795: NOT
67796: IFFALSE 67800
// exit ;
67798: GO 67829
// for i in tmp do
67800: LD_ADDR_VAR 0 1
67804: PUSH
67805: LD_VAR 0 2
67809: PUSH
67810: FOR_IN
67811: IFFALSE 67827
// begin SetLives ( i , 0 ) ;
67813: LD_VAR 0 1
67817: PPUSH
67818: LD_INT 0
67820: PPUSH
67821: CALL_OW 234
// end ;
67825: GO 67810
67827: POP
67828: POP
// end ;
67829: PPOPN 2
67831: END
// every 0 0$1 trigger StreamModeActive and sBunker do
67832: LD_EXP 51
67836: IFFALSE 67844
67838: PUSH
67839: LD_EXP 61
67843: AND
67844: IFFALSE 67864
67846: GO 67848
67848: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
67849: LD_INT 32
67851: PPUSH
67852: LD_OWVAR 2
67856: PPUSH
67857: LD_INT 0
67859: PPUSH
67860: CALL_OW 324
67864: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
67865: LD_EXP 51
67869: IFFALSE 67877
67871: PUSH
67872: LD_EXP 62
67876: AND
67877: IFFALSE 68060
67879: GO 67881
67881: DISABLE
67882: LD_INT 0
67884: PPUSH
67885: PPUSH
67886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
67887: LD_ADDR_VAR 0 2
67891: PUSH
67892: LD_INT 22
67894: PUSH
67895: LD_OWVAR 2
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: LD_INT 33
67906: PUSH
67907: LD_INT 3
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PPUSH
67918: CALL_OW 69
67922: ST_TO_ADDR
// if not tmp then
67923: LD_VAR 0 2
67927: NOT
67928: IFFALSE 67932
// exit ;
67930: GO 68060
// side := 0 ;
67932: LD_ADDR_VAR 0 3
67936: PUSH
67937: LD_INT 0
67939: ST_TO_ADDR
// for i := 1 to 8 do
67940: LD_ADDR_VAR 0 1
67944: PUSH
67945: DOUBLE
67946: LD_INT 1
67948: DEC
67949: ST_TO_ADDR
67950: LD_INT 8
67952: PUSH
67953: FOR_TO
67954: IFFALSE 68004
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
67956: LD_OWVAR 2
67960: PUSH
67961: LD_VAR 0 1
67965: NONEQUAL
67966: IFFALSE 67988
67968: PUSH
67969: LD_OWVAR 2
67973: PPUSH
67974: LD_VAR 0 1
67978: PPUSH
67979: CALL_OW 81
67983: PUSH
67984: LD_INT 2
67986: EQUAL
67987: AND
67988: IFFALSE 68002
// begin side := i ;
67990: LD_ADDR_VAR 0 3
67994: PUSH
67995: LD_VAR 0 1
67999: ST_TO_ADDR
// break ;
68000: GO 68004
// end ;
68002: GO 67953
68004: POP
68005: POP
// if not side then
68006: LD_VAR 0 3
68010: NOT
68011: IFFALSE 68015
// exit ;
68013: GO 68060
// for i := 1 to tmp do
68015: LD_ADDR_VAR 0 1
68019: PUSH
68020: DOUBLE
68021: LD_INT 1
68023: DEC
68024: ST_TO_ADDR
68025: LD_VAR 0 2
68029: PUSH
68030: FOR_TO
68031: IFFALSE 68058
// if Prob ( 60 ) then
68033: LD_INT 60
68035: PPUSH
68036: CALL_OW 13
68040: IFFALSE 68056
// SetSide ( i , side ) ;
68042: LD_VAR 0 1
68046: PPUSH
68047: LD_VAR 0 3
68051: PPUSH
68052: CALL_OW 235
68056: GO 68030
68058: POP
68059: POP
// end ;
68060: PPOPN 3
68062: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
68063: LD_EXP 51
68067: IFFALSE 68075
68069: PUSH
68070: LD_EXP 64
68074: AND
68075: IFFALSE 68194
68077: GO 68079
68079: DISABLE
68080: LD_INT 0
68082: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
68083: LD_ADDR_VAR 0 1
68087: PUSH
68088: LD_INT 22
68090: PUSH
68091: LD_OWVAR 2
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 21
68102: PUSH
68103: LD_INT 1
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: LD_INT 23
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: LIST
68131: PPUSH
68132: CALL_OW 69
68136: PUSH
68137: FOR_IN
68138: IFFALSE 68192
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
68140: LD_VAR 0 1
68144: PPUSH
68145: CALL_OW 257
68149: PUSH
68150: LD_INT 1
68152: PUSH
68153: LD_INT 2
68155: PUSH
68156: LD_INT 3
68158: PUSH
68159: LD_INT 4
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: LIST
68166: LIST
68167: IN
68168: IFFALSE 68190
// SetClass ( un , rand ( 1 , 4 ) ) ;
68170: LD_VAR 0 1
68174: PPUSH
68175: LD_INT 1
68177: PPUSH
68178: LD_INT 4
68180: PPUSH
68181: CALL_OW 12
68185: PPUSH
68186: CALL_OW 336
68190: GO 68137
68192: POP
68193: POP
// end ;
68194: PPOPN 1
68196: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
68197: LD_EXP 51
68201: IFFALSE 68209
68203: PUSH
68204: LD_EXP 63
68208: AND
68209: IFFALSE 68288
68211: GO 68213
68213: DISABLE
68214: LD_INT 0
68216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68217: LD_ADDR_VAR 0 1
68221: PUSH
68222: LD_INT 22
68224: PUSH
68225: LD_OWVAR 2
68229: PUSH
68230: EMPTY
68231: LIST
68232: LIST
68233: PUSH
68234: LD_INT 21
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PPUSH
68248: CALL_OW 69
68252: ST_TO_ADDR
// if not tmp then
68253: LD_VAR 0 1
68257: NOT
68258: IFFALSE 68262
// exit ;
68260: GO 68288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
68262: LD_VAR 0 1
68266: PUSH
68267: LD_INT 1
68269: PPUSH
68270: LD_VAR 0 1
68274: PPUSH
68275: CALL_OW 12
68279: ARRAY
68280: PPUSH
68281: LD_INT 100
68283: PPUSH
68284: CALL_OW 234
// end ;
68288: PPOPN 1
68290: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
68291: LD_EXP 51
68295: IFFALSE 68303
68297: PUSH
68298: LD_EXP 65
68302: AND
68303: IFFALSE 68401
68305: GO 68307
68307: DISABLE
68308: LD_INT 0
68310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68311: LD_ADDR_VAR 0 1
68315: PUSH
68316: LD_INT 22
68318: PUSH
68319: LD_OWVAR 2
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 21
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PPUSH
68342: CALL_OW 69
68346: ST_TO_ADDR
// if not tmp then
68347: LD_VAR 0 1
68351: NOT
68352: IFFALSE 68356
// exit ;
68354: GO 68401
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
68356: LD_VAR 0 1
68360: PUSH
68361: LD_INT 1
68363: PPUSH
68364: LD_VAR 0 1
68368: PPUSH
68369: CALL_OW 12
68373: ARRAY
68374: PPUSH
68375: LD_INT 1
68377: PPUSH
68378: LD_INT 4
68380: PPUSH
68381: CALL_OW 12
68385: PPUSH
68386: LD_INT 3000
68388: PPUSH
68389: LD_INT 9000
68391: PPUSH
68392: CALL_OW 12
68396: PPUSH
68397: CALL_OW 492
// end ;
68401: PPOPN 1
68403: END
// every 0 0$1 trigger StreamModeActive and sDepot do
68404: LD_EXP 51
68408: IFFALSE 68416
68410: PUSH
68411: LD_EXP 66
68415: AND
68416: IFFALSE 68436
68418: GO 68420
68420: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
68421: LD_INT 1
68423: PPUSH
68424: LD_OWVAR 2
68428: PPUSH
68429: LD_INT 0
68431: PPUSH
68432: CALL_OW 324
68436: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
68437: LD_EXP 51
68441: IFFALSE 68449
68443: PUSH
68444: LD_EXP 67
68448: AND
68449: IFFALSE 68532
68451: GO 68453
68453: DISABLE
68454: LD_INT 0
68456: PPUSH
68457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
68458: LD_ADDR_VAR 0 2
68462: PUSH
68463: LD_INT 22
68465: PUSH
68466: LD_OWVAR 2
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: PUSH
68475: LD_INT 21
68477: PUSH
68478: LD_INT 3
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PPUSH
68489: CALL_OW 69
68493: ST_TO_ADDR
// if not tmp then
68494: LD_VAR 0 2
68498: NOT
68499: IFFALSE 68503
// exit ;
68501: GO 68532
// for i in tmp do
68503: LD_ADDR_VAR 0 1
68507: PUSH
68508: LD_VAR 0 2
68512: PUSH
68513: FOR_IN
68514: IFFALSE 68530
// SetBLevel ( i , 10 ) ;
68516: LD_VAR 0 1
68520: PPUSH
68521: LD_INT 10
68523: PPUSH
68524: CALL_OW 241
68528: GO 68513
68530: POP
68531: POP
// end ;
68532: PPOPN 2
68534: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
68535: LD_EXP 51
68539: IFFALSE 68547
68541: PUSH
68542: LD_EXP 68
68546: AND
68547: IFFALSE 68658
68549: GO 68551
68551: DISABLE
68552: LD_INT 0
68554: PPUSH
68555: PPUSH
68556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68557: LD_ADDR_VAR 0 3
68561: PUSH
68562: LD_INT 22
68564: PUSH
68565: LD_OWVAR 2
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: PUSH
68574: LD_INT 25
68576: PUSH
68577: LD_INT 1
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: PPUSH
68588: CALL_OW 69
68592: ST_TO_ADDR
// if not tmp then
68593: LD_VAR 0 3
68597: NOT
68598: IFFALSE 68602
// exit ;
68600: GO 68658
// un := tmp [ rand ( 1 , tmp ) ] ;
68602: LD_ADDR_VAR 0 2
68606: PUSH
68607: LD_VAR 0 3
68611: PUSH
68612: LD_INT 1
68614: PPUSH
68615: LD_VAR 0 3
68619: PPUSH
68620: CALL_OW 12
68624: ARRAY
68625: ST_TO_ADDR
// if Crawls ( un ) then
68626: LD_VAR 0 2
68630: PPUSH
68631: CALL_OW 318
68635: IFFALSE 68646
// ComWalk ( un ) ;
68637: LD_VAR 0 2
68641: PPUSH
68642: CALL_OW 138
// SetClass ( un , class_sniper ) ;
68646: LD_VAR 0 2
68650: PPUSH
68651: LD_INT 5
68653: PPUSH
68654: CALL_OW 336
// end ;
68658: PPOPN 3
68660: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
68661: LD_EXP 51
68665: IFFALSE 68673
68667: PUSH
68668: LD_EXP 69
68672: AND
68673: IFFALSE 68685
68675: PUSH
68676: LD_OWVAR 67
68680: PUSH
68681: LD_INT 4
68683: LESS
68684: AND
68685: IFFALSE 68704
68687: GO 68689
68689: DISABLE
// begin Difficulty := Difficulty + 1 ;
68690: LD_ADDR_OWVAR 67
68694: PUSH
68695: LD_OWVAR 67
68699: PUSH
68700: LD_INT 1
68702: PLUS
68703: ST_TO_ADDR
// end ;
68704: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
68705: LD_EXP 51
68709: IFFALSE 68717
68711: PUSH
68712: LD_EXP 70
68716: AND
68717: IFFALSE 68820
68719: GO 68721
68721: DISABLE
68722: LD_INT 0
68724: PPUSH
// begin for i := 1 to 5 do
68725: LD_ADDR_VAR 0 1
68729: PUSH
68730: DOUBLE
68731: LD_INT 1
68733: DEC
68734: ST_TO_ADDR
68735: LD_INT 5
68737: PUSH
68738: FOR_TO
68739: IFFALSE 68818
// begin uc_nation := nation_nature ;
68741: LD_ADDR_OWVAR 21
68745: PUSH
68746: LD_INT 0
68748: ST_TO_ADDR
// uc_side := 0 ;
68749: LD_ADDR_OWVAR 20
68753: PUSH
68754: LD_INT 0
68756: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68757: LD_ADDR_OWVAR 29
68761: PUSH
68762: LD_INT 12
68764: PUSH
68765: LD_INT 12
68767: PUSH
68768: EMPTY
68769: LIST
68770: LIST
68771: ST_TO_ADDR
// hc_agressivity := 20 ;
68772: LD_ADDR_OWVAR 35
68776: PUSH
68777: LD_INT 20
68779: ST_TO_ADDR
// hc_class := class_tiger ;
68780: LD_ADDR_OWVAR 28
68784: PUSH
68785: LD_INT 14
68787: ST_TO_ADDR
// hc_gallery :=  ;
68788: LD_ADDR_OWVAR 33
68792: PUSH
68793: LD_STRING 
68795: ST_TO_ADDR
// hc_name :=  ;
68796: LD_ADDR_OWVAR 26
68800: PUSH
68801: LD_STRING 
68803: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
68804: CALL_OW 44
68808: PPUSH
68809: LD_INT 0
68811: PPUSH
68812: CALL_OW 51
// end ;
68816: GO 68738
68818: POP
68819: POP
// end ;
68820: PPOPN 1
68822: END
// every 0 0$1 trigger StreamModeActive and sBomb do
68823: LD_EXP 51
68827: IFFALSE 68835
68829: PUSH
68830: LD_EXP 71
68834: AND
68835: IFFALSE 68844
68837: GO 68839
68839: DISABLE
// StreamSibBomb ;
68840: CALL 68845 0 0
68844: END
// export function StreamSibBomb ; var i , x , y ; begin
68845: LD_INT 0
68847: PPUSH
68848: PPUSH
68849: PPUSH
68850: PPUSH
// result := false ;
68851: LD_ADDR_VAR 0 1
68855: PUSH
68856: LD_INT 0
68858: ST_TO_ADDR
// for i := 1 to 16 do
68859: LD_ADDR_VAR 0 2
68863: PUSH
68864: DOUBLE
68865: LD_INT 1
68867: DEC
68868: ST_TO_ADDR
68869: LD_INT 16
68871: PUSH
68872: FOR_TO
68873: IFFALSE 69072
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68875: LD_ADDR_VAR 0 3
68879: PUSH
68880: LD_INT 10
68882: PUSH
68883: LD_INT 20
68885: PUSH
68886: LD_INT 30
68888: PUSH
68889: LD_INT 40
68891: PUSH
68892: LD_INT 50
68894: PUSH
68895: LD_INT 60
68897: PUSH
68898: LD_INT 70
68900: PUSH
68901: LD_INT 80
68903: PUSH
68904: LD_INT 90
68906: PUSH
68907: LD_INT 100
68909: PUSH
68910: LD_INT 110
68912: PUSH
68913: LD_INT 120
68915: PUSH
68916: LD_INT 130
68918: PUSH
68919: LD_INT 140
68921: PUSH
68922: LD_INT 150
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 1
68944: PPUSH
68945: LD_INT 15
68947: PPUSH
68948: CALL_OW 12
68952: ARRAY
68953: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
68954: LD_ADDR_VAR 0 4
68958: PUSH
68959: LD_INT 10
68961: PUSH
68962: LD_INT 20
68964: PUSH
68965: LD_INT 30
68967: PUSH
68968: LD_INT 40
68970: PUSH
68971: LD_INT 50
68973: PUSH
68974: LD_INT 60
68976: PUSH
68977: LD_INT 70
68979: PUSH
68980: LD_INT 80
68982: PUSH
68983: LD_INT 90
68985: PUSH
68986: LD_INT 100
68988: PUSH
68989: LD_INT 110
68991: PUSH
68992: LD_INT 120
68994: PUSH
68995: LD_INT 130
68997: PUSH
68998: LD_INT 140
69000: PUSH
69001: LD_INT 150
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 1
69023: PPUSH
69024: LD_INT 15
69026: PPUSH
69027: CALL_OW 12
69031: ARRAY
69032: ST_TO_ADDR
// if ValidHex ( x , y ) then
69033: LD_VAR 0 3
69037: PPUSH
69038: LD_VAR 0 4
69042: PPUSH
69043: CALL_OW 488
69047: IFFALSE 69070
// begin result := [ x , y ] ;
69049: LD_ADDR_VAR 0 1
69053: PUSH
69054: LD_VAR 0 3
69058: PUSH
69059: LD_VAR 0 4
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: ST_TO_ADDR
// break ;
69068: GO 69072
// end ; end ;
69070: GO 68872
69072: POP
69073: POP
// if result then
69074: LD_VAR 0 1
69078: IFFALSE 69138
// begin ToLua ( playSibBomb() ) ;
69080: LD_STRING playSibBomb()
69082: PPUSH
69083: CALL_OW 559
// wait ( 0 0$14 ) ;
69087: LD_INT 490
69089: PPUSH
69090: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
69094: LD_VAR 0 1
69098: PUSH
69099: LD_INT 1
69101: ARRAY
69102: PPUSH
69103: LD_VAR 0 1
69107: PUSH
69108: LD_INT 2
69110: ARRAY
69111: PPUSH
69112: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
69116: LD_VAR 0 1
69120: PUSH
69121: LD_INT 1
69123: ARRAY
69124: PPUSH
69125: LD_VAR 0 1
69129: PUSH
69130: LD_INT 2
69132: ARRAY
69133: PPUSH
69134: CALL_OW 429
// end ; end ;
69138: LD_VAR 0 1
69142: RET
// every 0 0$1 trigger StreamModeActive and sReset do
69143: LD_EXP 51
69147: IFFALSE 69155
69149: PUSH
69150: LD_EXP 73
69154: AND
69155: IFFALSE 69167
69157: GO 69159
69159: DISABLE
// YouLost (  ) ;
69160: LD_STRING 
69162: PPUSH
69163: CALL_OW 104
69167: END
// every 0 0$1 trigger StreamModeActive and sFog do
69168: LD_EXP 51
69172: IFFALSE 69180
69174: PUSH
69175: LD_EXP 72
69179: AND
69180: IFFALSE 69194
69182: GO 69184
69184: DISABLE
// FogOff ( your_side ) ;
69185: LD_OWVAR 2
69189: PPUSH
69190: CALL_OW 344
69194: END
// every 0 0$1 trigger StreamModeActive and sSun do
69195: LD_EXP 51
69199: IFFALSE 69207
69201: PUSH
69202: LD_EXP 74
69206: AND
69207: IFFALSE 69235
69209: GO 69211
69211: DISABLE
// begin solar_recharge_percent := 0 ;
69212: LD_ADDR_OWVAR 79
69216: PUSH
69217: LD_INT 0
69219: ST_TO_ADDR
// wait ( 5 5$00 ) ;
69220: LD_INT 10500
69222: PPUSH
69223: CALL_OW 67
// solar_recharge_percent := 100 ;
69227: LD_ADDR_OWVAR 79
69231: PUSH
69232: LD_INT 100
69234: ST_TO_ADDR
// end ;
69235: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
69236: LD_EXP 51
69240: IFFALSE 69248
69242: PUSH
69243: LD_EXP 75
69247: AND
69248: IFFALSE 69487
69250: GO 69252
69252: DISABLE
69253: LD_INT 0
69255: PPUSH
69256: PPUSH
69257: PPUSH
// begin tmp := [ ] ;
69258: LD_ADDR_VAR 0 3
69262: PUSH
69263: EMPTY
69264: ST_TO_ADDR
// for i := 1 to 6 do
69265: LD_ADDR_VAR 0 1
69269: PUSH
69270: DOUBLE
69271: LD_INT 1
69273: DEC
69274: ST_TO_ADDR
69275: LD_INT 6
69277: PUSH
69278: FOR_TO
69279: IFFALSE 69384
// begin uc_nation := nation_nature ;
69281: LD_ADDR_OWVAR 21
69285: PUSH
69286: LD_INT 0
69288: ST_TO_ADDR
// uc_side := 0 ;
69289: LD_ADDR_OWVAR 20
69293: PUSH
69294: LD_INT 0
69296: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
69297: LD_ADDR_OWVAR 29
69301: PUSH
69302: LD_INT 12
69304: PUSH
69305: LD_INT 12
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: ST_TO_ADDR
// hc_agressivity := 20 ;
69312: LD_ADDR_OWVAR 35
69316: PUSH
69317: LD_INT 20
69319: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
69320: LD_ADDR_OWVAR 28
69324: PUSH
69325: LD_INT 17
69327: ST_TO_ADDR
// hc_gallery :=  ;
69328: LD_ADDR_OWVAR 33
69332: PUSH
69333: LD_STRING 
69335: ST_TO_ADDR
// hc_name :=  ;
69336: LD_ADDR_OWVAR 26
69340: PUSH
69341: LD_STRING 
69343: ST_TO_ADDR
// un := CreateHuman ;
69344: LD_ADDR_VAR 0 2
69348: PUSH
69349: CALL_OW 44
69353: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
69354: LD_VAR 0 2
69358: PPUSH
69359: LD_INT 1
69361: PPUSH
69362: CALL_OW 51
// tmp := tmp ^ un ;
69366: LD_ADDR_VAR 0 3
69370: PUSH
69371: LD_VAR 0 3
69375: PUSH
69376: LD_VAR 0 2
69380: ADD
69381: ST_TO_ADDR
// end ;
69382: GO 69278
69384: POP
69385: POP
// repeat wait ( 0 0$1 ) ;
69386: LD_INT 35
69388: PPUSH
69389: CALL_OW 67
// for un in tmp do
69393: LD_ADDR_VAR 0 2
69397: PUSH
69398: LD_VAR 0 3
69402: PUSH
69403: FOR_IN
69404: IFFALSE 69478
// begin if IsDead ( un ) then
69406: LD_VAR 0 2
69410: PPUSH
69411: CALL_OW 301
69415: IFFALSE 69435
// begin tmp := tmp diff un ;
69417: LD_ADDR_VAR 0 3
69421: PUSH
69422: LD_VAR 0 3
69426: PUSH
69427: LD_VAR 0 2
69431: DIFF
69432: ST_TO_ADDR
// continue ;
69433: GO 69403
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
69435: LD_VAR 0 2
69439: PPUSH
69440: LD_INT 3
69442: PUSH
69443: LD_INT 22
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PPUSH
69457: CALL_OW 69
69461: PPUSH
69462: LD_VAR 0 2
69466: PPUSH
69467: CALL_OW 74
69471: PPUSH
69472: CALL_OW 115
// end ;
69476: GO 69403
69478: POP
69479: POP
// until not tmp ;
69480: LD_VAR 0 3
69484: NOT
69485: IFFALSE 69386
// end ;
69487: PPOPN 3
69489: END
// every 0 0$1 trigger StreamModeActive and sTroll do
69490: LD_EXP 51
69494: IFFALSE 69502
69496: PUSH
69497: LD_EXP 76
69501: AND
69502: IFFALSE 69556
69504: GO 69506
69506: DISABLE
// begin ToLua ( displayTroll(); ) ;
69507: LD_STRING displayTroll();
69509: PPUSH
69510: CALL_OW 559
// wait ( 3 3$00 ) ;
69514: LD_INT 6300
69516: PPUSH
69517: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69521: LD_STRING hideTroll();
69523: PPUSH
69524: CALL_OW 559
// wait ( 1 1$00 ) ;
69528: LD_INT 2100
69530: PPUSH
69531: CALL_OW 67
// ToLua ( displayTroll(); ) ;
69535: LD_STRING displayTroll();
69537: PPUSH
69538: CALL_OW 559
// wait ( 1 1$00 ) ;
69542: LD_INT 2100
69544: PPUSH
69545: CALL_OW 67
// ToLua ( hideTroll(); ) ;
69549: LD_STRING hideTroll();
69551: PPUSH
69552: CALL_OW 559
// end ;
69556: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
69557: LD_EXP 51
69561: IFFALSE 69569
69563: PUSH
69564: LD_EXP 77
69568: AND
69569: IFFALSE 69632
69571: GO 69573
69573: DISABLE
69574: LD_INT 0
69576: PPUSH
// begin p := 0 ;
69577: LD_ADDR_VAR 0 1
69581: PUSH
69582: LD_INT 0
69584: ST_TO_ADDR
// repeat game_speed := 1 ;
69585: LD_ADDR_OWVAR 65
69589: PUSH
69590: LD_INT 1
69592: ST_TO_ADDR
// wait ( 0 0$1 ) ;
69593: LD_INT 35
69595: PPUSH
69596: CALL_OW 67
// p := p + 1 ;
69600: LD_ADDR_VAR 0 1
69604: PUSH
69605: LD_VAR 0 1
69609: PUSH
69610: LD_INT 1
69612: PLUS
69613: ST_TO_ADDR
// until p >= 60 ;
69614: LD_VAR 0 1
69618: PUSH
69619: LD_INT 60
69621: GREATEREQUAL
69622: IFFALSE 69585
// game_speed := 4 ;
69624: LD_ADDR_OWVAR 65
69628: PUSH
69629: LD_INT 4
69631: ST_TO_ADDR
// end ;
69632: PPOPN 1
69634: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
69635: LD_EXP 51
69639: IFFALSE 69647
69641: PUSH
69642: LD_EXP 78
69646: AND
69647: IFFALSE 69793
69649: GO 69651
69651: DISABLE
69652: LD_INT 0
69654: PPUSH
69655: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69656: LD_ADDR_VAR 0 1
69660: PUSH
69661: LD_INT 22
69663: PUSH
69664: LD_OWVAR 2
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: LD_INT 30
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 30
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: LIST
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PPUSH
69705: CALL_OW 69
69709: ST_TO_ADDR
// if not depot then
69710: LD_VAR 0 1
69714: NOT
69715: IFFALSE 69719
// exit ;
69717: GO 69793
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
69719: LD_ADDR_VAR 0 2
69723: PUSH
69724: LD_VAR 0 1
69728: PUSH
69729: LD_INT 1
69731: PPUSH
69732: LD_VAR 0 1
69736: PPUSH
69737: CALL_OW 12
69741: ARRAY
69742: PPUSH
69743: CALL_OW 274
69747: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
69748: LD_VAR 0 2
69752: PPUSH
69753: LD_INT 1
69755: PPUSH
69756: LD_INT 0
69758: PPUSH
69759: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
69763: LD_VAR 0 2
69767: PPUSH
69768: LD_INT 2
69770: PPUSH
69771: LD_INT 0
69773: PPUSH
69774: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
69778: LD_VAR 0 2
69782: PPUSH
69783: LD_INT 3
69785: PPUSH
69786: LD_INT 0
69788: PPUSH
69789: CALL_OW 277
// end ;
69793: PPOPN 2
69795: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
69796: LD_EXP 51
69800: IFFALSE 69808
69802: PUSH
69803: LD_EXP 79
69807: AND
69808: IFFALSE 69905
69810: GO 69812
69812: DISABLE
69813: LD_INT 0
69815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69816: LD_ADDR_VAR 0 1
69820: PUSH
69821: LD_INT 22
69823: PUSH
69824: LD_OWVAR 2
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 21
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: PUSH
69846: LD_INT 23
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: LIST
69864: PPUSH
69865: CALL_OW 69
69869: ST_TO_ADDR
// if not tmp then
69870: LD_VAR 0 1
69874: NOT
69875: IFFALSE 69879
// exit ;
69877: GO 69905
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
69879: LD_VAR 0 1
69883: PUSH
69884: LD_INT 1
69886: PPUSH
69887: LD_VAR 0 1
69891: PPUSH
69892: CALL_OW 12
69896: ARRAY
69897: PPUSH
69898: LD_INT 200
69900: PPUSH
69901: CALL_OW 234
// end ;
69905: PPOPN 1
69907: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
69908: LD_EXP 51
69912: IFFALSE 69920
69914: PUSH
69915: LD_EXP 80
69919: AND
69920: IFFALSE 69999
69922: GO 69924
69924: DISABLE
69925: LD_INT 0
69927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
69928: LD_ADDR_VAR 0 1
69932: PUSH
69933: LD_INT 22
69935: PUSH
69936: LD_OWVAR 2
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 21
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PPUSH
69959: CALL_OW 69
69963: ST_TO_ADDR
// if not tmp then
69964: LD_VAR 0 1
69968: NOT
69969: IFFALSE 69973
// exit ;
69971: GO 69999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
69973: LD_VAR 0 1
69977: PUSH
69978: LD_INT 1
69980: PPUSH
69981: LD_VAR 0 1
69985: PPUSH
69986: CALL_OW 12
69990: ARRAY
69991: PPUSH
69992: LD_INT 60
69994: PPUSH
69995: CALL_OW 234
// end ;
69999: PPOPN 1
70001: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
70002: LD_EXP 51
70006: IFFALSE 70014
70008: PUSH
70009: LD_EXP 81
70013: AND
70014: IFFALSE 70113
70016: GO 70018
70018: DISABLE
70019: LD_INT 0
70021: PPUSH
70022: PPUSH
// begin enable ;
70023: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
70024: LD_ADDR_VAR 0 1
70028: PUSH
70029: LD_INT 22
70031: PUSH
70032: LD_OWVAR 2
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 61
70043: PUSH
70044: EMPTY
70045: LIST
70046: PUSH
70047: LD_INT 33
70049: PUSH
70050: LD_INT 2
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: LIST
70061: PPUSH
70062: CALL_OW 69
70066: ST_TO_ADDR
// if not tmp then
70067: LD_VAR 0 1
70071: NOT
70072: IFFALSE 70076
// exit ;
70074: GO 70113
// for i in tmp do
70076: LD_ADDR_VAR 0 2
70080: PUSH
70081: LD_VAR 0 1
70085: PUSH
70086: FOR_IN
70087: IFFALSE 70111
// if IsControledBy ( i ) then
70089: LD_VAR 0 2
70093: PPUSH
70094: CALL_OW 312
70098: IFFALSE 70109
// ComUnlink ( i ) ;
70100: LD_VAR 0 2
70104: PPUSH
70105: CALL_OW 136
70109: GO 70086
70111: POP
70112: POP
// end ;
70113: PPOPN 2
70115: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
70116: LD_EXP 51
70120: IFFALSE 70128
70122: PUSH
70123: LD_EXP 82
70127: AND
70128: IFFALSE 70268
70130: GO 70132
70132: DISABLE
70133: LD_INT 0
70135: PPUSH
70136: PPUSH
// begin ToLua ( displayPowell(); ) ;
70137: LD_STRING displayPowell();
70139: PPUSH
70140: CALL_OW 559
// uc_side := 0 ;
70144: LD_ADDR_OWVAR 20
70148: PUSH
70149: LD_INT 0
70151: ST_TO_ADDR
// uc_nation := 2 ;
70152: LD_ADDR_OWVAR 21
70156: PUSH
70157: LD_INT 2
70159: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
70160: LD_ADDR_OWVAR 37
70164: PUSH
70165: LD_INT 14
70167: ST_TO_ADDR
// vc_engine := engine_siberite ;
70168: LD_ADDR_OWVAR 39
70172: PUSH
70173: LD_INT 3
70175: ST_TO_ADDR
// vc_control := control_apeman ;
70176: LD_ADDR_OWVAR 38
70180: PUSH
70181: LD_INT 5
70183: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
70184: LD_ADDR_OWVAR 40
70188: PUSH
70189: LD_INT 29
70191: ST_TO_ADDR
// un := CreateVehicle ;
70192: LD_ADDR_VAR 0 2
70196: PUSH
70197: CALL_OW 45
70201: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
70202: LD_VAR 0 2
70206: PPUSH
70207: LD_INT 1
70209: PPUSH
70210: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
70214: LD_INT 35
70216: PPUSH
70217: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
70221: LD_VAR 0 2
70225: PPUSH
70226: LD_INT 22
70228: PUSH
70229: LD_OWVAR 2
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PPUSH
70238: CALL_OW 69
70242: PPUSH
70243: LD_VAR 0 2
70247: PPUSH
70248: CALL_OW 74
70252: PPUSH
70253: CALL_OW 115
// until IsDead ( un ) ;
70257: LD_VAR 0 2
70261: PPUSH
70262: CALL_OW 301
70266: IFFALSE 70214
// end ;
70268: PPOPN 2
70270: END
// every 0 0$1 trigger StreamModeActive and sStu do
70271: LD_EXP 51
70275: IFFALSE 70283
70277: PUSH
70278: LD_EXP 90
70282: AND
70283: IFFALSE 70299
70285: GO 70287
70287: DISABLE
// begin ToLua ( displayStucuk(); ) ;
70288: LD_STRING displayStucuk();
70290: PPUSH
70291: CALL_OW 559
// ResetFog ;
70295: CALL_OW 335
// end ;
70299: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
70300: LD_EXP 51
70304: IFFALSE 70312
70306: PUSH
70307: LD_EXP 83
70311: AND
70312: IFFALSE 70453
70314: GO 70316
70316: DISABLE
70317: LD_INT 0
70319: PPUSH
70320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70321: LD_ADDR_VAR 0 2
70325: PUSH
70326: LD_INT 22
70328: PUSH
70329: LD_OWVAR 2
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 21
70340: PUSH
70341: LD_INT 1
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PPUSH
70352: CALL_OW 69
70356: ST_TO_ADDR
// if not tmp then
70357: LD_VAR 0 2
70361: NOT
70362: IFFALSE 70366
// exit ;
70364: GO 70453
// un := tmp [ rand ( 1 , tmp ) ] ;
70366: LD_ADDR_VAR 0 1
70370: PUSH
70371: LD_VAR 0 2
70375: PUSH
70376: LD_INT 1
70378: PPUSH
70379: LD_VAR 0 2
70383: PPUSH
70384: CALL_OW 12
70388: ARRAY
70389: ST_TO_ADDR
// SetSide ( un , 0 ) ;
70390: LD_VAR 0 1
70394: PPUSH
70395: LD_INT 0
70397: PPUSH
70398: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
70402: LD_VAR 0 1
70406: PPUSH
70407: LD_OWVAR 3
70411: PUSH
70412: LD_VAR 0 1
70416: DIFF
70417: PPUSH
70418: LD_VAR 0 1
70422: PPUSH
70423: CALL_OW 74
70427: PPUSH
70428: CALL_OW 115
// wait ( 0 0$20 ) ;
70432: LD_INT 700
70434: PPUSH
70435: CALL_OW 67
// SetSide ( un , your_side ) ;
70439: LD_VAR 0 1
70443: PPUSH
70444: LD_OWVAR 2
70448: PPUSH
70449: CALL_OW 235
// end ;
70453: PPOPN 2
70455: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
70456: LD_EXP 51
70460: IFFALSE 70468
70462: PUSH
70463: LD_EXP 84
70467: AND
70468: IFFALSE 70574
70470: GO 70472
70472: DISABLE
70473: LD_INT 0
70475: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70476: LD_ADDR_VAR 0 1
70480: PUSH
70481: LD_INT 22
70483: PUSH
70484: LD_OWVAR 2
70488: PUSH
70489: EMPTY
70490: LIST
70491: LIST
70492: PUSH
70493: LD_INT 2
70495: PUSH
70496: LD_INT 30
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 30
70508: PUSH
70509: LD_INT 1
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: LIST
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PPUSH
70525: CALL_OW 69
70529: ST_TO_ADDR
// if not depot then
70530: LD_VAR 0 1
70534: NOT
70535: IFFALSE 70539
// exit ;
70537: GO 70574
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
70539: LD_VAR 0 1
70543: PUSH
70544: LD_INT 1
70546: ARRAY
70547: PPUSH
70548: CALL_OW 250
70552: PPUSH
70553: LD_VAR 0 1
70557: PUSH
70558: LD_INT 1
70560: ARRAY
70561: PPUSH
70562: CALL_OW 251
70566: PPUSH
70567: LD_INT 70
70569: PPUSH
70570: CALL_OW 495
// end ;
70574: PPOPN 1
70576: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
70577: LD_EXP 51
70581: IFFALSE 70589
70583: PUSH
70584: LD_EXP 85
70588: AND
70589: IFFALSE 70800
70591: GO 70593
70593: DISABLE
70594: LD_INT 0
70596: PPUSH
70597: PPUSH
70598: PPUSH
70599: PPUSH
70600: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: LD_INT 22
70608: PUSH
70609: LD_OWVAR 2
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 21
70620: PUSH
70621: LD_INT 1
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PPUSH
70632: CALL_OW 69
70636: ST_TO_ADDR
// if not tmp then
70637: LD_VAR 0 5
70641: NOT
70642: IFFALSE 70646
// exit ;
70644: GO 70800
// for i in tmp do
70646: LD_ADDR_VAR 0 1
70650: PUSH
70651: LD_VAR 0 5
70655: PUSH
70656: FOR_IN
70657: IFFALSE 70798
// begin d := rand ( 0 , 5 ) ;
70659: LD_ADDR_VAR 0 4
70663: PUSH
70664: LD_INT 0
70666: PPUSH
70667: LD_INT 5
70669: PPUSH
70670: CALL_OW 12
70674: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
70675: LD_ADDR_VAR 0 2
70679: PUSH
70680: LD_VAR 0 1
70684: PPUSH
70685: CALL_OW 250
70689: PPUSH
70690: LD_VAR 0 4
70694: PPUSH
70695: LD_INT 3
70697: PPUSH
70698: LD_INT 12
70700: PPUSH
70701: CALL_OW 12
70705: PPUSH
70706: CALL_OW 272
70710: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
70711: LD_ADDR_VAR 0 3
70715: PUSH
70716: LD_VAR 0 1
70720: PPUSH
70721: CALL_OW 251
70725: PPUSH
70726: LD_VAR 0 4
70730: PPUSH
70731: LD_INT 3
70733: PPUSH
70734: LD_INT 12
70736: PPUSH
70737: CALL_OW 12
70741: PPUSH
70742: CALL_OW 273
70746: ST_TO_ADDR
// if ValidHex ( x , y ) then
70747: LD_VAR 0 2
70751: PPUSH
70752: LD_VAR 0 3
70756: PPUSH
70757: CALL_OW 488
70761: IFFALSE 70796
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
70763: LD_VAR 0 1
70767: PPUSH
70768: LD_VAR 0 2
70772: PPUSH
70773: LD_VAR 0 3
70777: PPUSH
70778: LD_INT 3
70780: PPUSH
70781: LD_INT 6
70783: PPUSH
70784: CALL_OW 12
70788: PPUSH
70789: LD_INT 1
70791: PPUSH
70792: CALL_OW 483
// end ;
70796: GO 70656
70798: POP
70799: POP
// end ;
70800: PPOPN 5
70802: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
70803: LD_EXP 51
70807: IFFALSE 70815
70809: PUSH
70810: LD_EXP 86
70814: AND
70815: IFFALSE 70909
70817: GO 70819
70819: DISABLE
70820: LD_INT 0
70822: PPUSH
70823: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
70824: LD_ADDR_VAR 0 2
70828: PUSH
70829: LD_INT 22
70831: PUSH
70832: LD_OWVAR 2
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 32
70843: PUSH
70844: LD_INT 1
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 21
70853: PUSH
70854: LD_INT 2
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: LIST
70865: PPUSH
70866: CALL_OW 69
70870: ST_TO_ADDR
// if not tmp then
70871: LD_VAR 0 2
70875: NOT
70876: IFFALSE 70880
// exit ;
70878: GO 70909
// for i in tmp do
70880: LD_ADDR_VAR 0 1
70884: PUSH
70885: LD_VAR 0 2
70889: PUSH
70890: FOR_IN
70891: IFFALSE 70907
// SetFuel ( i , 0 ) ;
70893: LD_VAR 0 1
70897: PPUSH
70898: LD_INT 0
70900: PPUSH
70901: CALL_OW 240
70905: GO 70890
70907: POP
70908: POP
// end ;
70909: PPOPN 2
70911: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
70912: LD_EXP 51
70916: IFFALSE 70924
70918: PUSH
70919: LD_EXP 87
70923: AND
70924: IFFALSE 70990
70926: GO 70928
70928: DISABLE
70929: LD_INT 0
70931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70932: LD_ADDR_VAR 0 1
70936: PUSH
70937: LD_INT 22
70939: PUSH
70940: LD_OWVAR 2
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 30
70951: PUSH
70952: LD_INT 29
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PPUSH
70963: CALL_OW 69
70967: ST_TO_ADDR
// if not tmp then
70968: LD_VAR 0 1
70972: NOT
70973: IFFALSE 70977
// exit ;
70975: GO 70990
// DestroyUnit ( tmp [ 1 ] ) ;
70977: LD_VAR 0 1
70981: PUSH
70982: LD_INT 1
70984: ARRAY
70985: PPUSH
70986: CALL_OW 65
// end ;
70990: PPOPN 1
70992: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
70993: LD_EXP 51
70997: IFFALSE 71005
70999: PUSH
71000: LD_EXP 89
71004: AND
71005: IFFALSE 71134
71007: GO 71009
71009: DISABLE
71010: LD_INT 0
71012: PPUSH
// begin uc_side := 0 ;
71013: LD_ADDR_OWVAR 20
71017: PUSH
71018: LD_INT 0
71020: ST_TO_ADDR
// uc_nation := nation_arabian ;
71021: LD_ADDR_OWVAR 21
71025: PUSH
71026: LD_INT 2
71028: ST_TO_ADDR
// hc_gallery :=  ;
71029: LD_ADDR_OWVAR 33
71033: PUSH
71034: LD_STRING 
71036: ST_TO_ADDR
// hc_name :=  ;
71037: LD_ADDR_OWVAR 26
71041: PUSH
71042: LD_STRING 
71044: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
71045: LD_INT 1
71047: PPUSH
71048: LD_INT 11
71050: PPUSH
71051: LD_INT 10
71053: PPUSH
71054: CALL_OW 380
// un := CreateHuman ;
71058: LD_ADDR_VAR 0 1
71062: PUSH
71063: CALL_OW 44
71067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71068: LD_VAR 0 1
71072: PPUSH
71073: LD_INT 1
71075: PPUSH
71076: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
71080: LD_INT 35
71082: PPUSH
71083: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
71087: LD_VAR 0 1
71091: PPUSH
71092: LD_INT 22
71094: PUSH
71095: LD_OWVAR 2
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PPUSH
71104: CALL_OW 69
71108: PPUSH
71109: LD_VAR 0 1
71113: PPUSH
71114: CALL_OW 74
71118: PPUSH
71119: CALL_OW 115
// until IsDead ( un ) ;
71123: LD_VAR 0 1
71127: PPUSH
71128: CALL_OW 301
71132: IFFALSE 71080
// end ;
71134: PPOPN 1
71136: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
71137: LD_EXP 51
71141: IFFALSE 71149
71143: PUSH
71144: LD_EXP 91
71148: AND
71149: IFFALSE 71161
71151: GO 71153
71153: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
71154: LD_STRING earthquake(getX(game), 0, 32)
71156: PPUSH
71157: CALL_OW 559
71161: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
71162: LD_EXP 51
71166: IFFALSE 71174
71168: PUSH
71169: LD_EXP 92
71173: AND
71174: IFFALSE 71265
71176: GO 71178
71178: DISABLE
71179: LD_INT 0
71181: PPUSH
// begin enable ;
71182: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
71183: LD_ADDR_VAR 0 1
71187: PUSH
71188: LD_INT 22
71190: PUSH
71191: LD_OWVAR 2
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 21
71202: PUSH
71203: LD_INT 2
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 33
71212: PUSH
71213: LD_INT 3
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: LIST
71224: PPUSH
71225: CALL_OW 69
71229: ST_TO_ADDR
// if not tmp then
71230: LD_VAR 0 1
71234: NOT
71235: IFFALSE 71239
// exit ;
71237: GO 71265
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
71239: LD_VAR 0 1
71243: PUSH
71244: LD_INT 1
71246: PPUSH
71247: LD_VAR 0 1
71251: PPUSH
71252: CALL_OW 12
71256: ARRAY
71257: PPUSH
71258: LD_INT 1
71260: PPUSH
71261: CALL_OW 234
// end ;
71265: PPOPN 1
71267: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
71268: LD_EXP 51
71272: IFFALSE 71280
71274: PUSH
71275: LD_EXP 93
71279: AND
71280: IFFALSE 71421
71282: GO 71284
71284: DISABLE
71285: LD_INT 0
71287: PPUSH
71288: PPUSH
71289: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71290: LD_ADDR_VAR 0 3
71294: PUSH
71295: LD_INT 22
71297: PUSH
71298: LD_OWVAR 2
71302: PUSH
71303: EMPTY
71304: LIST
71305: LIST
71306: PUSH
71307: LD_INT 25
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PPUSH
71321: CALL_OW 69
71325: ST_TO_ADDR
// if not tmp then
71326: LD_VAR 0 3
71330: NOT
71331: IFFALSE 71335
// exit ;
71333: GO 71421
// un := tmp [ rand ( 1 , tmp ) ] ;
71335: LD_ADDR_VAR 0 2
71339: PUSH
71340: LD_VAR 0 3
71344: PUSH
71345: LD_INT 1
71347: PPUSH
71348: LD_VAR 0 3
71352: PPUSH
71353: CALL_OW 12
71357: ARRAY
71358: ST_TO_ADDR
// if Crawls ( un ) then
71359: LD_VAR 0 2
71363: PPUSH
71364: CALL_OW 318
71368: IFFALSE 71379
// ComWalk ( un ) ;
71370: LD_VAR 0 2
71374: PPUSH
71375: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
71379: LD_VAR 0 2
71383: PPUSH
71384: LD_INT 9
71386: PPUSH
71387: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
71391: LD_INT 28
71393: PPUSH
71394: LD_OWVAR 2
71398: PPUSH
71399: LD_INT 2
71401: PPUSH
71402: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
71406: LD_INT 29
71408: PPUSH
71409: LD_OWVAR 2
71413: PPUSH
71414: LD_INT 2
71416: PPUSH
71417: CALL_OW 322
// end ;
71421: PPOPN 3
71423: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
71424: LD_EXP 51
71428: IFFALSE 71436
71430: PUSH
71431: LD_EXP 94
71435: AND
71436: IFFALSE 71547
71438: GO 71440
71440: DISABLE
71441: LD_INT 0
71443: PPUSH
71444: PPUSH
71445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71446: LD_ADDR_VAR 0 3
71450: PUSH
71451: LD_INT 22
71453: PUSH
71454: LD_OWVAR 2
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 25
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: EMPTY
71470: LIST
71471: LIST
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PPUSH
71477: CALL_OW 69
71481: ST_TO_ADDR
// if not tmp then
71482: LD_VAR 0 3
71486: NOT
71487: IFFALSE 71491
// exit ;
71489: GO 71547
// un := tmp [ rand ( 1 , tmp ) ] ;
71491: LD_ADDR_VAR 0 2
71495: PUSH
71496: LD_VAR 0 3
71500: PUSH
71501: LD_INT 1
71503: PPUSH
71504: LD_VAR 0 3
71508: PPUSH
71509: CALL_OW 12
71513: ARRAY
71514: ST_TO_ADDR
// if Crawls ( un ) then
71515: LD_VAR 0 2
71519: PPUSH
71520: CALL_OW 318
71524: IFFALSE 71535
// ComWalk ( un ) ;
71526: LD_VAR 0 2
71530: PPUSH
71531: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71535: LD_VAR 0 2
71539: PPUSH
71540: LD_INT 8
71542: PPUSH
71543: CALL_OW 336
// end ;
71547: PPOPN 3
71549: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
71550: LD_EXP 51
71554: IFFALSE 71562
71556: PUSH
71557: LD_EXP 95
71561: AND
71562: IFFALSE 71706
71564: GO 71566
71566: DISABLE
71567: LD_INT 0
71569: PPUSH
71570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
71571: LD_ADDR_VAR 0 2
71575: PUSH
71576: LD_INT 22
71578: PUSH
71579: LD_OWVAR 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 21
71590: PUSH
71591: LD_INT 2
71593: PUSH
71594: EMPTY
71595: LIST
71596: LIST
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 34
71603: PUSH
71604: LD_INT 12
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 34
71613: PUSH
71614: LD_INT 51
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: PUSH
71621: LD_INT 34
71623: PUSH
71624: LD_INT 32
71626: PUSH
71627: EMPTY
71628: LIST
71629: LIST
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: LIST
71641: PPUSH
71642: CALL_OW 69
71646: ST_TO_ADDR
// if not tmp then
71647: LD_VAR 0 2
71651: NOT
71652: IFFALSE 71656
// exit ;
71654: GO 71706
// for i in tmp do
71656: LD_ADDR_VAR 0 1
71660: PUSH
71661: LD_VAR 0 2
71665: PUSH
71666: FOR_IN
71667: IFFALSE 71704
// if GetCargo ( i , mat_artifact ) = 0 then
71669: LD_VAR 0 1
71673: PPUSH
71674: LD_INT 4
71676: PPUSH
71677: CALL_OW 289
71681: PUSH
71682: LD_INT 0
71684: EQUAL
71685: IFFALSE 71702
// SetCargo ( i , mat_siberit , 100 ) ;
71687: LD_VAR 0 1
71691: PPUSH
71692: LD_INT 3
71694: PPUSH
71695: LD_INT 100
71697: PPUSH
71698: CALL_OW 290
71702: GO 71666
71704: POP
71705: POP
// end ;
71706: PPOPN 2
71708: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
71709: LD_EXP 51
71713: IFFALSE 71721
71715: PUSH
71716: LD_EXP 96
71720: AND
71721: IFFALSE 71904
71723: GO 71725
71725: DISABLE
71726: LD_INT 0
71728: PPUSH
71729: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71730: LD_ADDR_VAR 0 2
71734: PUSH
71735: LD_INT 22
71737: PUSH
71738: LD_OWVAR 2
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PPUSH
71747: CALL_OW 69
71751: ST_TO_ADDR
// if not tmp then
71752: LD_VAR 0 2
71756: NOT
71757: IFFALSE 71761
// exit ;
71759: GO 71904
// for i := 1 to 2 do
71761: LD_ADDR_VAR 0 1
71765: PUSH
71766: DOUBLE
71767: LD_INT 1
71769: DEC
71770: ST_TO_ADDR
71771: LD_INT 2
71773: PUSH
71774: FOR_TO
71775: IFFALSE 71902
// begin uc_side := your_side ;
71777: LD_ADDR_OWVAR 20
71781: PUSH
71782: LD_OWVAR 2
71786: ST_TO_ADDR
// uc_nation := nation_american ;
71787: LD_ADDR_OWVAR 21
71791: PUSH
71792: LD_INT 1
71794: ST_TO_ADDR
// vc_chassis := us_morphling ;
71795: LD_ADDR_OWVAR 37
71799: PUSH
71800: LD_INT 5
71802: ST_TO_ADDR
// vc_engine := engine_siberite ;
71803: LD_ADDR_OWVAR 39
71807: PUSH
71808: LD_INT 3
71810: ST_TO_ADDR
// vc_control := control_computer ;
71811: LD_ADDR_OWVAR 38
71815: PUSH
71816: LD_INT 3
71818: ST_TO_ADDR
// vc_weapon := us_double_laser ;
71819: LD_ADDR_OWVAR 40
71823: PUSH
71824: LD_INT 10
71826: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
71827: LD_VAR 0 2
71831: PUSH
71832: LD_INT 1
71834: ARRAY
71835: PPUSH
71836: CALL_OW 310
71840: NOT
71841: IFFALSE 71888
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
71843: CALL_OW 45
71847: PPUSH
71848: LD_VAR 0 2
71852: PUSH
71853: LD_INT 1
71855: ARRAY
71856: PPUSH
71857: CALL_OW 250
71861: PPUSH
71862: LD_VAR 0 2
71866: PUSH
71867: LD_INT 1
71869: ARRAY
71870: PPUSH
71871: CALL_OW 251
71875: PPUSH
71876: LD_INT 12
71878: PPUSH
71879: LD_INT 1
71881: PPUSH
71882: CALL_OW 50
71886: GO 71900
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
71888: CALL_OW 45
71892: PPUSH
71893: LD_INT 1
71895: PPUSH
71896: CALL_OW 51
// end ;
71900: GO 71774
71902: POP
71903: POP
// end ;
71904: PPOPN 2
71906: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
71907: LD_EXP 51
71911: IFFALSE 71919
71913: PUSH
71914: LD_EXP 97
71918: AND
71919: IFFALSE 72141
71921: GO 71923
71923: DISABLE
71924: LD_INT 0
71926: PPUSH
71927: PPUSH
71928: PPUSH
71929: PPUSH
71930: PPUSH
71931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71932: LD_ADDR_VAR 0 6
71936: PUSH
71937: LD_INT 22
71939: PUSH
71940: LD_OWVAR 2
71944: PUSH
71945: EMPTY
71946: LIST
71947: LIST
71948: PUSH
71949: LD_INT 21
71951: PUSH
71952: LD_INT 1
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 3
71961: PUSH
71962: LD_INT 23
71964: PUSH
71965: LD_INT 0
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: LIST
71980: PPUSH
71981: CALL_OW 69
71985: ST_TO_ADDR
// if not tmp then
71986: LD_VAR 0 6
71990: NOT
71991: IFFALSE 71995
// exit ;
71993: GO 72141
// s1 := rand ( 1 , 4 ) ;
71995: LD_ADDR_VAR 0 2
71999: PUSH
72000: LD_INT 1
72002: PPUSH
72003: LD_INT 4
72005: PPUSH
72006: CALL_OW 12
72010: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
72011: LD_ADDR_VAR 0 4
72015: PUSH
72016: LD_VAR 0 6
72020: PUSH
72021: LD_INT 1
72023: ARRAY
72024: PPUSH
72025: LD_VAR 0 2
72029: PPUSH
72030: CALL_OW 259
72034: ST_TO_ADDR
// if s1 = 1 then
72035: LD_VAR 0 2
72039: PUSH
72040: LD_INT 1
72042: EQUAL
72043: IFFALSE 72063
// s2 := rand ( 2 , 4 ) else
72045: LD_ADDR_VAR 0 3
72049: PUSH
72050: LD_INT 2
72052: PPUSH
72053: LD_INT 4
72055: PPUSH
72056: CALL_OW 12
72060: ST_TO_ADDR
72061: GO 72071
// s2 := 1 ;
72063: LD_ADDR_VAR 0 3
72067: PUSH
72068: LD_INT 1
72070: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
72071: LD_ADDR_VAR 0 5
72075: PUSH
72076: LD_VAR 0 6
72080: PUSH
72081: LD_INT 1
72083: ARRAY
72084: PPUSH
72085: LD_VAR 0 3
72089: PPUSH
72090: CALL_OW 259
72094: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
72095: LD_VAR 0 6
72099: PUSH
72100: LD_INT 1
72102: ARRAY
72103: PPUSH
72104: LD_VAR 0 2
72108: PPUSH
72109: LD_VAR 0 5
72113: PPUSH
72114: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
72118: LD_VAR 0 6
72122: PUSH
72123: LD_INT 1
72125: ARRAY
72126: PPUSH
72127: LD_VAR 0 3
72131: PPUSH
72132: LD_VAR 0 4
72136: PPUSH
72137: CALL_OW 237
// end ;
72141: PPOPN 6
72143: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
72144: LD_EXP 51
72148: IFFALSE 72156
72150: PUSH
72151: LD_EXP 98
72155: AND
72156: IFFALSE 72235
72158: GO 72160
72160: DISABLE
72161: LD_INT 0
72163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
72164: LD_ADDR_VAR 0 1
72168: PUSH
72169: LD_INT 22
72171: PUSH
72172: LD_OWVAR 2
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 30
72183: PUSH
72184: LD_INT 3
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PPUSH
72195: CALL_OW 69
72199: ST_TO_ADDR
// if not tmp then
72200: LD_VAR 0 1
72204: NOT
72205: IFFALSE 72209
// exit ;
72207: GO 72235
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
72209: LD_VAR 0 1
72213: PUSH
72214: LD_INT 1
72216: PPUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: CALL_OW 12
72226: ARRAY
72227: PPUSH
72228: LD_INT 1
72230: PPUSH
72231: CALL_OW 234
// end ;
72235: PPOPN 1
72237: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
72238: LD_EXP 51
72242: IFFALSE 72250
72244: PUSH
72245: LD_EXP 99
72249: AND
72250: IFFALSE 72362
72252: GO 72254
72254: DISABLE
72255: LD_INT 0
72257: PPUSH
72258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
72259: LD_ADDR_VAR 0 2
72263: PUSH
72264: LD_INT 22
72266: PUSH
72267: LD_OWVAR 2
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 2
72278: PUSH
72279: LD_INT 30
72281: PUSH
72282: LD_INT 27
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 30
72291: PUSH
72292: LD_INT 26
72294: PUSH
72295: EMPTY
72296: LIST
72297: LIST
72298: PUSH
72299: LD_INT 30
72301: PUSH
72302: LD_INT 28
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: PUSH
72309: EMPTY
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: PUSH
72315: EMPTY
72316: LIST
72317: LIST
72318: PPUSH
72319: CALL_OW 69
72323: ST_TO_ADDR
// if not tmp then
72324: LD_VAR 0 2
72328: NOT
72329: IFFALSE 72333
// exit ;
72331: GO 72362
// for i in tmp do
72333: LD_ADDR_VAR 0 1
72337: PUSH
72338: LD_VAR 0 2
72342: PUSH
72343: FOR_IN
72344: IFFALSE 72360
// SetLives ( i , 1 ) ;
72346: LD_VAR 0 1
72350: PPUSH
72351: LD_INT 1
72353: PPUSH
72354: CALL_OW 234
72358: GO 72343
72360: POP
72361: POP
// end ;
72362: PPOPN 2
72364: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
72365: LD_EXP 51
72369: IFFALSE 72377
72371: PUSH
72372: LD_EXP 100
72376: AND
72377: IFFALSE 72664
72379: GO 72381
72381: DISABLE
72382: LD_INT 0
72384: PPUSH
72385: PPUSH
72386: PPUSH
// begin i := rand ( 1 , 7 ) ;
72387: LD_ADDR_VAR 0 1
72391: PUSH
72392: LD_INT 1
72394: PPUSH
72395: LD_INT 7
72397: PPUSH
72398: CALL_OW 12
72402: ST_TO_ADDR
// case i of 1 :
72403: LD_VAR 0 1
72407: PUSH
72408: LD_INT 1
72410: DOUBLE
72411: EQUAL
72412: IFTRUE 72416
72414: GO 72426
72416: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
72417: LD_STRING earthquake(getX(game), 0, 32)
72419: PPUSH
72420: CALL_OW 559
72424: GO 72664
72426: LD_INT 2
72428: DOUBLE
72429: EQUAL
72430: IFTRUE 72434
72432: GO 72448
72434: POP
// begin ToLua ( displayStucuk(); ) ;
72435: LD_STRING displayStucuk();
72437: PPUSH
72438: CALL_OW 559
// ResetFog ;
72442: CALL_OW 335
// end ; 3 :
72446: GO 72664
72448: LD_INT 3
72450: DOUBLE
72451: EQUAL
72452: IFTRUE 72456
72454: GO 72560
72456: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
72457: LD_ADDR_VAR 0 2
72461: PUSH
72462: LD_INT 22
72464: PUSH
72465: LD_OWVAR 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 25
72476: PUSH
72477: LD_INT 1
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PPUSH
72488: CALL_OW 69
72492: ST_TO_ADDR
// if not tmp then
72493: LD_VAR 0 2
72497: NOT
72498: IFFALSE 72502
// exit ;
72500: GO 72664
// un := tmp [ rand ( 1 , tmp ) ] ;
72502: LD_ADDR_VAR 0 3
72506: PUSH
72507: LD_VAR 0 2
72511: PUSH
72512: LD_INT 1
72514: PPUSH
72515: LD_VAR 0 2
72519: PPUSH
72520: CALL_OW 12
72524: ARRAY
72525: ST_TO_ADDR
// if Crawls ( un ) then
72526: LD_VAR 0 3
72530: PPUSH
72531: CALL_OW 318
72535: IFFALSE 72546
// ComWalk ( un ) ;
72537: LD_VAR 0 3
72541: PPUSH
72542: CALL_OW 138
// SetClass ( un , class_mortar ) ;
72546: LD_VAR 0 3
72550: PPUSH
72551: LD_INT 8
72553: PPUSH
72554: CALL_OW 336
// end ; 4 :
72558: GO 72664
72560: LD_INT 4
72562: DOUBLE
72563: EQUAL
72564: IFTRUE 72568
72566: GO 72642
72568: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
72569: LD_ADDR_VAR 0 2
72573: PUSH
72574: LD_INT 22
72576: PUSH
72577: LD_OWVAR 2
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 30
72588: PUSH
72589: LD_INT 29
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PPUSH
72600: CALL_OW 69
72604: ST_TO_ADDR
// if not tmp then
72605: LD_VAR 0 2
72609: NOT
72610: IFFALSE 72614
// exit ;
72612: GO 72664
// CenterNowOnUnits ( tmp [ 1 ] ) ;
72614: LD_VAR 0 2
72618: PUSH
72619: LD_INT 1
72621: ARRAY
72622: PPUSH
72623: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
72627: LD_VAR 0 2
72631: PUSH
72632: LD_INT 1
72634: ARRAY
72635: PPUSH
72636: CALL_OW 65
// end ; 5 .. 7 :
72640: GO 72664
72642: LD_INT 5
72644: DOUBLE
72645: GREATEREQUAL
72646: IFFALSE 72654
72648: LD_INT 7
72650: DOUBLE
72651: LESSEQUAL
72652: IFTRUE 72656
72654: GO 72663
72656: POP
// StreamSibBomb ; end ;
72657: CALL 68845 0 0
72661: GO 72664
72663: POP
// end ;
72664: PPOPN 3
72666: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
72667: LD_EXP 51
72671: IFFALSE 72679
72673: PUSH
72674: LD_EXP 101
72678: AND
72679: IFFALSE 72835
72681: GO 72683
72683: DISABLE
72684: LD_INT 0
72686: PPUSH
72687: PPUSH
72688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
72689: LD_ADDR_VAR 0 2
72693: PUSH
72694: LD_INT 81
72696: PUSH
72697: LD_OWVAR 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 2
72708: PUSH
72709: LD_INT 21
72711: PUSH
72712: LD_INT 1
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 21
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PPUSH
72738: CALL_OW 69
72742: ST_TO_ADDR
// if not tmp then
72743: LD_VAR 0 2
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 72835
// p := 0 ;
72752: LD_ADDR_VAR 0 3
72756: PUSH
72757: LD_INT 0
72759: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
72760: LD_INT 35
72762: PPUSH
72763: CALL_OW 67
// p := p + 1 ;
72767: LD_ADDR_VAR 0 3
72771: PUSH
72772: LD_VAR 0 3
72776: PUSH
72777: LD_INT 1
72779: PLUS
72780: ST_TO_ADDR
// for i in tmp do
72781: LD_ADDR_VAR 0 1
72785: PUSH
72786: LD_VAR 0 2
72790: PUSH
72791: FOR_IN
72792: IFFALSE 72823
// if GetLives ( i ) < 1000 then
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 256
72803: PUSH
72804: LD_INT 1000
72806: LESS
72807: IFFALSE 72821
// SetLives ( i , 1000 ) ;
72809: LD_VAR 0 1
72813: PPUSH
72814: LD_INT 1000
72816: PPUSH
72817: CALL_OW 234
72821: GO 72791
72823: POP
72824: POP
// until p > 20 ;
72825: LD_VAR 0 3
72829: PUSH
72830: LD_INT 20
72832: GREATER
72833: IFFALSE 72760
// end ;
72835: PPOPN 3
72837: END
// every 0 0$1 trigger StreamModeActive and sTime do
72838: LD_EXP 51
72842: IFFALSE 72850
72844: PUSH
72845: LD_EXP 102
72849: AND
72850: IFFALSE 72885
72852: GO 72854
72854: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
72855: LD_INT 28
72857: PPUSH
72858: LD_OWVAR 2
72862: PPUSH
72863: LD_INT 2
72865: PPUSH
72866: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
72870: LD_INT 30
72872: PPUSH
72873: LD_OWVAR 2
72877: PPUSH
72878: LD_INT 2
72880: PPUSH
72881: CALL_OW 322
// end ;
72885: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
72886: LD_EXP 51
72890: IFFALSE 72898
72892: PUSH
72893: LD_EXP 103
72897: AND
72898: IFFALSE 73019
72900: GO 72902
72902: DISABLE
72903: LD_INT 0
72905: PPUSH
72906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
72907: LD_ADDR_VAR 0 2
72911: PUSH
72912: LD_INT 22
72914: PUSH
72915: LD_OWVAR 2
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 21
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: LD_INT 23
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: LIST
72955: PPUSH
72956: CALL_OW 69
72960: ST_TO_ADDR
// if not tmp then
72961: LD_VAR 0 2
72965: NOT
72966: IFFALSE 72970
// exit ;
72968: GO 73019
// for i in tmp do
72970: LD_ADDR_VAR 0 1
72974: PUSH
72975: LD_VAR 0 2
72979: PUSH
72980: FOR_IN
72981: IFFALSE 73017
// begin if Crawls ( i ) then
72983: LD_VAR 0 1
72987: PPUSH
72988: CALL_OW 318
72992: IFFALSE 73003
// ComWalk ( i ) ;
72994: LD_VAR 0 1
72998: PPUSH
72999: CALL_OW 138
// SetClass ( i , 2 ) ;
73003: LD_VAR 0 1
73007: PPUSH
73008: LD_INT 2
73010: PPUSH
73011: CALL_OW 336
// end ;
73015: GO 72980
73017: POP
73018: POP
// end ;
73019: PPOPN 2
73021: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
73022: LD_EXP 51
73026: IFFALSE 73034
73028: PUSH
73029: LD_EXP 104
73033: AND
73034: IFFALSE 73324
73036: GO 73038
73038: DISABLE
73039: LD_INT 0
73041: PPUSH
73042: PPUSH
73043: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
73044: LD_OWVAR 2
73048: PPUSH
73049: LD_INT 9
73051: PPUSH
73052: LD_INT 1
73054: PPUSH
73055: LD_INT 1
73057: PPUSH
73058: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
73062: LD_INT 9
73064: PPUSH
73065: LD_OWVAR 2
73069: PPUSH
73070: CALL_OW 343
// uc_side := 9 ;
73074: LD_ADDR_OWVAR 20
73078: PUSH
73079: LD_INT 9
73081: ST_TO_ADDR
// uc_nation := 2 ;
73082: LD_ADDR_OWVAR 21
73086: PUSH
73087: LD_INT 2
73089: ST_TO_ADDR
// hc_name := Dark Warrior ;
73090: LD_ADDR_OWVAR 26
73094: PUSH
73095: LD_STRING Dark Warrior
73097: ST_TO_ADDR
// hc_gallery :=  ;
73098: LD_ADDR_OWVAR 33
73102: PUSH
73103: LD_STRING 
73105: ST_TO_ADDR
// hc_noskilllimit := true ;
73106: LD_ADDR_OWVAR 76
73110: PUSH
73111: LD_INT 1
73113: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
73114: LD_ADDR_OWVAR 31
73118: PUSH
73119: LD_INT 30
73121: PUSH
73122: LD_INT 30
73124: PUSH
73125: LD_INT 30
73127: PUSH
73128: LD_INT 30
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: LIST
73135: LIST
73136: ST_TO_ADDR
// un := CreateHuman ;
73137: LD_ADDR_VAR 0 3
73141: PUSH
73142: CALL_OW 44
73146: ST_TO_ADDR
// hc_noskilllimit := false ;
73147: LD_ADDR_OWVAR 76
73151: PUSH
73152: LD_INT 0
73154: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
73155: LD_VAR 0 3
73159: PPUSH
73160: LD_INT 1
73162: PPUSH
73163: CALL_OW 51
// ToLua ( playRanger() ) ;
73167: LD_STRING playRanger()
73169: PPUSH
73170: CALL_OW 559
// p := 0 ;
73174: LD_ADDR_VAR 0 2
73178: PUSH
73179: LD_INT 0
73181: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
73182: LD_INT 35
73184: PPUSH
73185: CALL_OW 67
// p := p + 1 ;
73189: LD_ADDR_VAR 0 2
73193: PUSH
73194: LD_VAR 0 2
73198: PUSH
73199: LD_INT 1
73201: PLUS
73202: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
73203: LD_VAR 0 3
73207: PPUSH
73208: CALL_OW 256
73212: PUSH
73213: LD_INT 1000
73215: LESS
73216: IFFALSE 73230
// SetLives ( un , 1000 ) ;
73218: LD_VAR 0 3
73222: PPUSH
73223: LD_INT 1000
73225: PPUSH
73226: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
73230: LD_VAR 0 3
73234: PPUSH
73235: LD_INT 81
73237: PUSH
73238: LD_OWVAR 2
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 91
73249: PUSH
73250: LD_VAR 0 3
73254: PUSH
73255: LD_INT 30
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: LIST
73262: PUSH
73263: EMPTY
73264: LIST
73265: LIST
73266: PPUSH
73267: CALL_OW 69
73271: PPUSH
73272: LD_VAR 0 3
73276: PPUSH
73277: CALL_OW 74
73281: PPUSH
73282: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
73286: LD_VAR 0 2
73290: PUSH
73291: LD_INT 80
73293: GREATER
73294: IFTRUE 73307
73296: PUSH
73297: LD_VAR 0 3
73301: PPUSH
73302: CALL_OW 301
73306: OR
73307: IFFALSE 73182
// if un then
73309: LD_VAR 0 3
73313: IFFALSE 73324
// RemoveUnit ( un ) ;
73315: LD_VAR 0 3
73319: PPUSH
73320: CALL_OW 64
// end ;
73324: PPOPN 3
73326: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
73327: LD_EXP 105
73331: IFFALSE 73447
73333: GO 73335
73335: DISABLE
73336: LD_INT 0
73338: PPUSH
73339: PPUSH
73340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
73341: LD_ADDR_VAR 0 2
73345: PUSH
73346: LD_INT 81
73348: PUSH
73349: LD_OWVAR 2
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 21
73360: PUSH
73361: LD_INT 1
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PPUSH
73372: CALL_OW 69
73376: ST_TO_ADDR
// ToLua ( playComputer() ) ;
73377: LD_STRING playComputer()
73379: PPUSH
73380: CALL_OW 559
// if not tmp then
73384: LD_VAR 0 2
73388: NOT
73389: IFFALSE 73393
// exit ;
73391: GO 73447
// for i in tmp do
73393: LD_ADDR_VAR 0 1
73397: PUSH
73398: LD_VAR 0 2
73402: PUSH
73403: FOR_IN
73404: IFFALSE 73445
// for j := 1 to 4 do
73406: LD_ADDR_VAR 0 3
73410: PUSH
73411: DOUBLE
73412: LD_INT 1
73414: DEC
73415: ST_TO_ADDR
73416: LD_INT 4
73418: PUSH
73419: FOR_TO
73420: IFFALSE 73441
// SetSkill ( i , j , 10 ) ;
73422: LD_VAR 0 1
73426: PPUSH
73427: LD_VAR 0 3
73431: PPUSH
73432: LD_INT 10
73434: PPUSH
73435: CALL_OW 237
73439: GO 73419
73441: POP
73442: POP
73443: GO 73403
73445: POP
73446: POP
// end ;
73447: PPOPN 3
73449: END
// every 0 0$1 trigger s30 do var i , tmp ;
73450: LD_EXP 106
73454: IFFALSE 73523
73456: GO 73458
73458: DISABLE
73459: LD_INT 0
73461: PPUSH
73462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: LD_INT 22
73470: PUSH
73471: LD_OWVAR 2
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PPUSH
73480: CALL_OW 69
73484: ST_TO_ADDR
// if not tmp then
73485: LD_VAR 0 2
73489: NOT
73490: IFFALSE 73494
// exit ;
73492: GO 73523
// for i in tmp do
73494: LD_ADDR_VAR 0 1
73498: PUSH
73499: LD_VAR 0 2
73503: PUSH
73504: FOR_IN
73505: IFFALSE 73521
// SetLives ( i , 300 ) ;
73507: LD_VAR 0 1
73511: PPUSH
73512: LD_INT 300
73514: PPUSH
73515: CALL_OW 234
73519: GO 73504
73521: POP
73522: POP
// end ;
73523: PPOPN 2
73525: END
// every 0 0$1 trigger s60 do var i , tmp ;
73526: LD_EXP 107
73530: IFFALSE 73599
73532: GO 73534
73534: DISABLE
73535: LD_INT 0
73537: PPUSH
73538: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
73539: LD_ADDR_VAR 0 2
73543: PUSH
73544: LD_INT 22
73546: PUSH
73547: LD_OWVAR 2
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PPUSH
73556: CALL_OW 69
73560: ST_TO_ADDR
// if not tmp then
73561: LD_VAR 0 2
73565: NOT
73566: IFFALSE 73570
// exit ;
73568: GO 73599
// for i in tmp do
73570: LD_ADDR_VAR 0 1
73574: PUSH
73575: LD_VAR 0 2
73579: PUSH
73580: FOR_IN
73581: IFFALSE 73597
// SetLives ( i , 600 ) ;
73583: LD_VAR 0 1
73587: PPUSH
73588: LD_INT 600
73590: PPUSH
73591: CALL_OW 234
73595: GO 73580
73597: POP
73598: POP
// end ;
73599: PPOPN 2
73601: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
73602: LD_INT 0
73604: PPUSH
// case cmd of 301 :
73605: LD_VAR 0 1
73609: PUSH
73610: LD_INT 301
73612: DOUBLE
73613: EQUAL
73614: IFTRUE 73618
73616: GO 73650
73618: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
73619: LD_VAR 0 6
73623: PPUSH
73624: LD_VAR 0 7
73628: PPUSH
73629: LD_VAR 0 8
73633: PPUSH
73634: LD_VAR 0 4
73638: PPUSH
73639: LD_VAR 0 5
73643: PPUSH
73644: CALL 74863 0 5
73648: GO 73771
73650: LD_INT 302
73652: DOUBLE
73653: EQUAL
73654: IFTRUE 73658
73656: GO 73695
73658: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
73659: LD_VAR 0 6
73663: PPUSH
73664: LD_VAR 0 7
73668: PPUSH
73669: LD_VAR 0 8
73673: PPUSH
73674: LD_VAR 0 9
73678: PPUSH
73679: LD_VAR 0 4
73683: PPUSH
73684: LD_VAR 0 5
73688: PPUSH
73689: CALL 74954 0 6
73693: GO 73771
73695: LD_INT 303
73697: DOUBLE
73698: EQUAL
73699: IFTRUE 73703
73701: GO 73740
73703: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
73704: LD_VAR 0 6
73708: PPUSH
73709: LD_VAR 0 7
73713: PPUSH
73714: LD_VAR 0 8
73718: PPUSH
73719: LD_VAR 0 9
73723: PPUSH
73724: LD_VAR 0 4
73728: PPUSH
73729: LD_VAR 0 5
73733: PPUSH
73734: CALL 73776 0 6
73738: GO 73771
73740: LD_INT 304
73742: DOUBLE
73743: EQUAL
73744: IFTRUE 73748
73746: GO 73770
73748: POP
// hHackTeleport ( unit , x , y ) ; end ;
73749: LD_VAR 0 2
73753: PPUSH
73754: LD_VAR 0 4
73758: PPUSH
73759: LD_VAR 0 5
73763: PPUSH
73764: CALL 75547 0 3
73768: GO 73771
73770: POP
// end ;
73771: LD_VAR 0 12
73775: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
73776: LD_INT 0
73778: PPUSH
73779: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
73780: LD_VAR 0 1
73784: PUSH
73785: LD_INT 1
73787: LESS
73788: IFTRUE 73800
73790: PUSH
73791: LD_VAR 0 1
73795: PUSH
73796: LD_INT 3
73798: GREATER
73799: OR
73800: IFTRUE 73818
73802: PUSH
73803: LD_VAR 0 5
73807: PPUSH
73808: LD_VAR 0 6
73812: PPUSH
73813: CALL_OW 428
73817: OR
73818: IFFALSE 73822
// exit ;
73820: GO 74550
// uc_side := your_side ;
73822: LD_ADDR_OWVAR 20
73826: PUSH
73827: LD_OWVAR 2
73831: ST_TO_ADDR
// uc_nation := nation ;
73832: LD_ADDR_OWVAR 21
73836: PUSH
73837: LD_VAR 0 1
73841: ST_TO_ADDR
// bc_level = 1 ;
73842: LD_ADDR_OWVAR 43
73846: PUSH
73847: LD_INT 1
73849: ST_TO_ADDR
// case btype of 1 :
73850: LD_VAR 0 2
73854: PUSH
73855: LD_INT 1
73857: DOUBLE
73858: EQUAL
73859: IFTRUE 73863
73861: GO 73874
73863: POP
// bc_type := b_depot ; 2 :
73864: LD_ADDR_OWVAR 42
73868: PUSH
73869: LD_INT 0
73871: ST_TO_ADDR
73872: GO 74494
73874: LD_INT 2
73876: DOUBLE
73877: EQUAL
73878: IFTRUE 73882
73880: GO 73893
73882: POP
// bc_type := b_warehouse ; 3 :
73883: LD_ADDR_OWVAR 42
73887: PUSH
73888: LD_INT 1
73890: ST_TO_ADDR
73891: GO 74494
73893: LD_INT 3
73895: DOUBLE
73896: EQUAL
73897: IFTRUE 73901
73899: GO 73912
73901: POP
// bc_type := b_lab ; 4 .. 9 :
73902: LD_ADDR_OWVAR 42
73906: PUSH
73907: LD_INT 6
73909: ST_TO_ADDR
73910: GO 74494
73912: LD_INT 4
73914: DOUBLE
73915: GREATEREQUAL
73916: IFFALSE 73924
73918: LD_INT 9
73920: DOUBLE
73921: LESSEQUAL
73922: IFTRUE 73926
73924: GO 73986
73926: POP
// begin bc_type := b_lab_half ;
73927: LD_ADDR_OWVAR 42
73931: PUSH
73932: LD_INT 7
73934: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
73935: LD_ADDR_OWVAR 44
73939: PUSH
73940: LD_INT 10
73942: PUSH
73943: LD_INT 11
73945: PUSH
73946: LD_INT 12
73948: PUSH
73949: LD_INT 15
73951: PUSH
73952: LD_INT 14
73954: PUSH
73955: LD_INT 13
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: PUSH
73966: LD_VAR 0 2
73970: PUSH
73971: LD_INT 3
73973: MINUS
73974: ARRAY
73975: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
73976: LD_ADDR_OWVAR 45
73980: PUSH
73981: LD_INT 9
73983: ST_TO_ADDR
// end ; 10 .. 13 :
73984: GO 74494
73986: LD_INT 10
73988: DOUBLE
73989: GREATEREQUAL
73990: IFFALSE 73998
73992: LD_INT 13
73994: DOUBLE
73995: LESSEQUAL
73996: IFTRUE 74000
73998: GO 74077
74000: POP
// begin bc_type := b_lab_full ;
74001: LD_ADDR_OWVAR 42
74005: PUSH
74006: LD_INT 8
74008: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
74009: LD_ADDR_OWVAR 44
74013: PUSH
74014: LD_INT 10
74016: PUSH
74017: LD_INT 12
74019: PUSH
74020: LD_INT 14
74022: PUSH
74023: LD_INT 13
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: PUSH
74032: LD_VAR 0 2
74036: PUSH
74037: LD_INT 9
74039: MINUS
74040: ARRAY
74041: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
74042: LD_ADDR_OWVAR 45
74046: PUSH
74047: LD_INT 11
74049: PUSH
74050: LD_INT 15
74052: PUSH
74053: LD_INT 12
74055: PUSH
74056: LD_INT 15
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: PUSH
74065: LD_VAR 0 2
74069: PUSH
74070: LD_INT 9
74072: MINUS
74073: ARRAY
74074: ST_TO_ADDR
// end ; 14 :
74075: GO 74494
74077: LD_INT 14
74079: DOUBLE
74080: EQUAL
74081: IFTRUE 74085
74083: GO 74096
74085: POP
// bc_type := b_workshop ; 15 :
74086: LD_ADDR_OWVAR 42
74090: PUSH
74091: LD_INT 2
74093: ST_TO_ADDR
74094: GO 74494
74096: LD_INT 15
74098: DOUBLE
74099: EQUAL
74100: IFTRUE 74104
74102: GO 74115
74104: POP
// bc_type := b_factory ; 16 :
74105: LD_ADDR_OWVAR 42
74109: PUSH
74110: LD_INT 3
74112: ST_TO_ADDR
74113: GO 74494
74115: LD_INT 16
74117: DOUBLE
74118: EQUAL
74119: IFTRUE 74123
74121: GO 74134
74123: POP
// bc_type := b_ext_gun ; 17 :
74124: LD_ADDR_OWVAR 42
74128: PUSH
74129: LD_INT 17
74131: ST_TO_ADDR
74132: GO 74494
74134: LD_INT 17
74136: DOUBLE
74137: EQUAL
74138: IFTRUE 74142
74140: GO 74170
74142: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
74143: LD_ADDR_OWVAR 42
74147: PUSH
74148: LD_INT 19
74150: PUSH
74151: LD_INT 23
74153: PUSH
74154: LD_INT 19
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: LIST
74161: PUSH
74162: LD_VAR 0 1
74166: ARRAY
74167: ST_TO_ADDR
74168: GO 74494
74170: LD_INT 18
74172: DOUBLE
74173: EQUAL
74174: IFTRUE 74178
74176: GO 74189
74178: POP
// bc_type := b_ext_radar ; 19 :
74179: LD_ADDR_OWVAR 42
74183: PUSH
74184: LD_INT 20
74186: ST_TO_ADDR
74187: GO 74494
74189: LD_INT 19
74191: DOUBLE
74192: EQUAL
74193: IFTRUE 74197
74195: GO 74208
74197: POP
// bc_type := b_ext_radio ; 20 :
74198: LD_ADDR_OWVAR 42
74202: PUSH
74203: LD_INT 22
74205: ST_TO_ADDR
74206: GO 74494
74208: LD_INT 20
74210: DOUBLE
74211: EQUAL
74212: IFTRUE 74216
74214: GO 74227
74216: POP
// bc_type := b_ext_siberium ; 21 :
74217: LD_ADDR_OWVAR 42
74221: PUSH
74222: LD_INT 21
74224: ST_TO_ADDR
74225: GO 74494
74227: LD_INT 21
74229: DOUBLE
74230: EQUAL
74231: IFTRUE 74235
74233: GO 74246
74235: POP
// bc_type := b_ext_computer ; 22 :
74236: LD_ADDR_OWVAR 42
74240: PUSH
74241: LD_INT 24
74243: ST_TO_ADDR
74244: GO 74494
74246: LD_INT 22
74248: DOUBLE
74249: EQUAL
74250: IFTRUE 74254
74252: GO 74265
74254: POP
// bc_type := b_ext_track ; 23 :
74255: LD_ADDR_OWVAR 42
74259: PUSH
74260: LD_INT 16
74262: ST_TO_ADDR
74263: GO 74494
74265: LD_INT 23
74267: DOUBLE
74268: EQUAL
74269: IFTRUE 74273
74271: GO 74284
74273: POP
// bc_type := b_ext_laser ; 24 :
74274: LD_ADDR_OWVAR 42
74278: PUSH
74279: LD_INT 25
74281: ST_TO_ADDR
74282: GO 74494
74284: LD_INT 24
74286: DOUBLE
74287: EQUAL
74288: IFTRUE 74292
74290: GO 74303
74292: POP
// bc_type := b_control_tower ; 25 :
74293: LD_ADDR_OWVAR 42
74297: PUSH
74298: LD_INT 36
74300: ST_TO_ADDR
74301: GO 74494
74303: LD_INT 25
74305: DOUBLE
74306: EQUAL
74307: IFTRUE 74311
74309: GO 74322
74311: POP
// bc_type := b_breastwork ; 26 :
74312: LD_ADDR_OWVAR 42
74316: PUSH
74317: LD_INT 31
74319: ST_TO_ADDR
74320: GO 74494
74322: LD_INT 26
74324: DOUBLE
74325: EQUAL
74326: IFTRUE 74330
74328: GO 74341
74330: POP
// bc_type := b_bunker ; 27 :
74331: LD_ADDR_OWVAR 42
74335: PUSH
74336: LD_INT 32
74338: ST_TO_ADDR
74339: GO 74494
74341: LD_INT 27
74343: DOUBLE
74344: EQUAL
74345: IFTRUE 74349
74347: GO 74360
74349: POP
// bc_type := b_turret ; 28 :
74350: LD_ADDR_OWVAR 42
74354: PUSH
74355: LD_INT 33
74357: ST_TO_ADDR
74358: GO 74494
74360: LD_INT 28
74362: DOUBLE
74363: EQUAL
74364: IFTRUE 74368
74366: GO 74379
74368: POP
// bc_type := b_armoury ; 29 :
74369: LD_ADDR_OWVAR 42
74373: PUSH
74374: LD_INT 4
74376: ST_TO_ADDR
74377: GO 74494
74379: LD_INT 29
74381: DOUBLE
74382: EQUAL
74383: IFTRUE 74387
74385: GO 74398
74387: POP
// bc_type := b_barracks ; 30 :
74388: LD_ADDR_OWVAR 42
74392: PUSH
74393: LD_INT 5
74395: ST_TO_ADDR
74396: GO 74494
74398: LD_INT 30
74400: DOUBLE
74401: EQUAL
74402: IFTRUE 74406
74404: GO 74417
74406: POP
// bc_type := b_solar_power ; 31 :
74407: LD_ADDR_OWVAR 42
74411: PUSH
74412: LD_INT 27
74414: ST_TO_ADDR
74415: GO 74494
74417: LD_INT 31
74419: DOUBLE
74420: EQUAL
74421: IFTRUE 74425
74423: GO 74436
74425: POP
// bc_type := b_oil_power ; 32 :
74426: LD_ADDR_OWVAR 42
74430: PUSH
74431: LD_INT 26
74433: ST_TO_ADDR
74434: GO 74494
74436: LD_INT 32
74438: DOUBLE
74439: EQUAL
74440: IFTRUE 74444
74442: GO 74455
74444: POP
// bc_type := b_siberite_power ; 33 :
74445: LD_ADDR_OWVAR 42
74449: PUSH
74450: LD_INT 28
74452: ST_TO_ADDR
74453: GO 74494
74455: LD_INT 33
74457: DOUBLE
74458: EQUAL
74459: IFTRUE 74463
74461: GO 74474
74463: POP
// bc_type := b_oil_mine ; 34 :
74464: LD_ADDR_OWVAR 42
74468: PUSH
74469: LD_INT 29
74471: ST_TO_ADDR
74472: GO 74494
74474: LD_INT 34
74476: DOUBLE
74477: EQUAL
74478: IFTRUE 74482
74480: GO 74493
74482: POP
// bc_type := b_siberite_mine ; end ;
74483: LD_ADDR_OWVAR 42
74487: PUSH
74488: LD_INT 30
74490: ST_TO_ADDR
74491: GO 74494
74493: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
74494: LD_ADDR_VAR 0 8
74498: PUSH
74499: LD_VAR 0 5
74503: PPUSH
74504: LD_VAR 0 6
74508: PPUSH
74509: LD_VAR 0 3
74513: PPUSH
74514: CALL_OW 47
74518: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
74519: LD_OWVAR 42
74523: PUSH
74524: LD_INT 32
74526: PUSH
74527: LD_INT 33
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: IN
74534: IFFALSE 74550
// PlaceWeaponTurret ( b , weapon ) ;
74536: LD_VAR 0 8
74540: PPUSH
74541: LD_VAR 0 4
74545: PPUSH
74546: CALL_OW 431
// end ;
74550: LD_VAR 0 7
74554: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
74555: LD_INT 0
74557: PPUSH
74558: PPUSH
74559: PPUSH
74560: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
74561: LD_ADDR_VAR 0 4
74565: PUSH
74566: LD_INT 22
74568: PUSH
74569: LD_OWVAR 2
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: LD_INT 2
74580: PUSH
74581: LD_INT 30
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: EMPTY
74588: LIST
74589: LIST
74590: PUSH
74591: LD_INT 30
74593: PUSH
74594: LD_INT 1
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: LIST
74605: PUSH
74606: EMPTY
74607: LIST
74608: LIST
74609: PPUSH
74610: CALL_OW 69
74614: ST_TO_ADDR
// if not tmp then
74615: LD_VAR 0 4
74619: NOT
74620: IFFALSE 74624
// exit ;
74622: GO 74683
// for i in tmp do
74624: LD_ADDR_VAR 0 2
74628: PUSH
74629: LD_VAR 0 4
74633: PUSH
74634: FOR_IN
74635: IFFALSE 74681
// for j = 1 to 3 do
74637: LD_ADDR_VAR 0 3
74641: PUSH
74642: DOUBLE
74643: LD_INT 1
74645: DEC
74646: ST_TO_ADDR
74647: LD_INT 3
74649: PUSH
74650: FOR_TO
74651: IFFALSE 74677
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
74653: LD_VAR 0 2
74657: PPUSH
74658: CALL_OW 274
74662: PPUSH
74663: LD_VAR 0 3
74667: PPUSH
74668: LD_INT 99999
74670: PPUSH
74671: CALL_OW 277
74675: GO 74650
74677: POP
74678: POP
74679: GO 74634
74681: POP
74682: POP
// end ;
74683: LD_VAR 0 1
74687: RET
// export function hHackSetLevel10 ; var i , j ; begin
74688: LD_INT 0
74690: PPUSH
74691: PPUSH
74692: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74693: LD_ADDR_VAR 0 2
74697: PUSH
74698: LD_INT 21
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: PPUSH
74708: CALL_OW 69
74712: PUSH
74713: FOR_IN
74714: IFFALSE 74766
// if IsSelected ( i ) then
74716: LD_VAR 0 2
74720: PPUSH
74721: CALL_OW 306
74725: IFFALSE 74764
// begin for j := 1 to 4 do
74727: LD_ADDR_VAR 0 3
74731: PUSH
74732: DOUBLE
74733: LD_INT 1
74735: DEC
74736: ST_TO_ADDR
74737: LD_INT 4
74739: PUSH
74740: FOR_TO
74741: IFFALSE 74762
// SetSkill ( i , j , 10 ) ;
74743: LD_VAR 0 2
74747: PPUSH
74748: LD_VAR 0 3
74752: PPUSH
74753: LD_INT 10
74755: PPUSH
74756: CALL_OW 237
74760: GO 74740
74762: POP
74763: POP
// end ;
74764: GO 74713
74766: POP
74767: POP
// end ;
74768: LD_VAR 0 1
74772: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
74773: LD_INT 0
74775: PPUSH
74776: PPUSH
74777: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
74778: LD_ADDR_VAR 0 2
74782: PUSH
74783: LD_INT 22
74785: PUSH
74786: LD_OWVAR 2
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 21
74797: PUSH
74798: LD_INT 1
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PPUSH
74809: CALL_OW 69
74813: PUSH
74814: FOR_IN
74815: IFFALSE 74856
// begin for j := 1 to 4 do
74817: LD_ADDR_VAR 0 3
74821: PUSH
74822: DOUBLE
74823: LD_INT 1
74825: DEC
74826: ST_TO_ADDR
74827: LD_INT 4
74829: PUSH
74830: FOR_TO
74831: IFFALSE 74852
// SetSkill ( i , j , 10 ) ;
74833: LD_VAR 0 2
74837: PPUSH
74838: LD_VAR 0 3
74842: PPUSH
74843: LD_INT 10
74845: PPUSH
74846: CALL_OW 237
74850: GO 74830
74852: POP
74853: POP
// end ;
74854: GO 74814
74856: POP
74857: POP
// end ;
74858: LD_VAR 0 1
74862: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
74863: LD_INT 0
74865: PPUSH
// uc_side := your_side ;
74866: LD_ADDR_OWVAR 20
74870: PUSH
74871: LD_OWVAR 2
74875: ST_TO_ADDR
// uc_nation := nation ;
74876: LD_ADDR_OWVAR 21
74880: PUSH
74881: LD_VAR 0 1
74885: ST_TO_ADDR
// InitHc ;
74886: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
74890: LD_INT 0
74892: PPUSH
74893: LD_VAR 0 2
74897: PPUSH
74898: LD_VAR 0 3
74902: PPUSH
74903: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
74907: LD_VAR 0 4
74911: PPUSH
74912: LD_VAR 0 5
74916: PPUSH
74917: CALL_OW 428
74921: PUSH
74922: LD_INT 0
74924: EQUAL
74925: IFFALSE 74949
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
74927: CALL_OW 44
74931: PPUSH
74932: LD_VAR 0 4
74936: PPUSH
74937: LD_VAR 0 5
74941: PPUSH
74942: LD_INT 1
74944: PPUSH
74945: CALL_OW 48
// end ;
74949: LD_VAR 0 6
74953: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
74954: LD_INT 0
74956: PPUSH
74957: PPUSH
// uc_side := your_side ;
74958: LD_ADDR_OWVAR 20
74962: PUSH
74963: LD_OWVAR 2
74967: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
74968: LD_VAR 0 1
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: LD_INT 2
74978: PUSH
74979: LD_INT 3
74981: PUSH
74982: LD_INT 4
74984: PUSH
74985: LD_INT 5
74987: PUSH
74988: EMPTY
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: IN
74995: IFFALSE 75007
// uc_nation := nation_american else
74997: LD_ADDR_OWVAR 21
75001: PUSH
75002: LD_INT 1
75004: ST_TO_ADDR
75005: GO 75050
// if chassis in [ 11 , 12 , 13 , 14 ] then
75007: LD_VAR 0 1
75011: PUSH
75012: LD_INT 11
75014: PUSH
75015: LD_INT 12
75017: PUSH
75018: LD_INT 13
75020: PUSH
75021: LD_INT 14
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: IN
75030: IFFALSE 75042
// uc_nation := nation_arabian else
75032: LD_ADDR_OWVAR 21
75036: PUSH
75037: LD_INT 2
75039: ST_TO_ADDR
75040: GO 75050
// uc_nation := nation_russian ;
75042: LD_ADDR_OWVAR 21
75046: PUSH
75047: LD_INT 3
75049: ST_TO_ADDR
// vc_chassis := chassis ;
75050: LD_ADDR_OWVAR 37
75054: PUSH
75055: LD_VAR 0 1
75059: ST_TO_ADDR
// vc_engine := engine ;
75060: LD_ADDR_OWVAR 39
75064: PUSH
75065: LD_VAR 0 2
75069: ST_TO_ADDR
// vc_control := control ;
75070: LD_ADDR_OWVAR 38
75074: PUSH
75075: LD_VAR 0 3
75079: ST_TO_ADDR
// vc_weapon := weapon ;
75080: LD_ADDR_OWVAR 40
75084: PUSH
75085: LD_VAR 0 4
75089: ST_TO_ADDR
// un := CreateVehicle ;
75090: LD_ADDR_VAR 0 8
75094: PUSH
75095: CALL_OW 45
75099: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
75100: LD_VAR 0 8
75104: PPUSH
75105: LD_INT 0
75107: PPUSH
75108: LD_INT 5
75110: PPUSH
75111: CALL_OW 12
75115: PPUSH
75116: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
75120: LD_VAR 0 8
75124: PPUSH
75125: LD_VAR 0 5
75129: PPUSH
75130: LD_VAR 0 6
75134: PPUSH
75135: LD_INT 1
75137: PPUSH
75138: CALL_OW 48
// end ;
75142: LD_VAR 0 7
75146: RET
// export hInvincible ; every 1 do
75147: GO 75149
75149: DISABLE
// hInvincible := [ ] ;
75150: LD_ADDR_EXP 108
75154: PUSH
75155: EMPTY
75156: ST_TO_ADDR
75157: END
// every 10 do var i ;
75158: GO 75160
75160: DISABLE
75161: LD_INT 0
75163: PPUSH
// begin enable ;
75164: ENABLE
// if not hInvincible then
75165: LD_EXP 108
75169: NOT
75170: IFFALSE 75174
// exit ;
75172: GO 75218
// for i in hInvincible do
75174: LD_ADDR_VAR 0 1
75178: PUSH
75179: LD_EXP 108
75183: PUSH
75184: FOR_IN
75185: IFFALSE 75216
// if GetLives ( i ) < 1000 then
75187: LD_VAR 0 1
75191: PPUSH
75192: CALL_OW 256
75196: PUSH
75197: LD_INT 1000
75199: LESS
75200: IFFALSE 75214
// SetLives ( i , 1000 ) ;
75202: LD_VAR 0 1
75206: PPUSH
75207: LD_INT 1000
75209: PPUSH
75210: CALL_OW 234
75214: GO 75184
75216: POP
75217: POP
// end ;
75218: PPOPN 1
75220: END
// export function hHackInvincible ; var i ; begin
75221: LD_INT 0
75223: PPUSH
75224: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
75225: LD_ADDR_VAR 0 2
75229: PUSH
75230: LD_INT 2
75232: PUSH
75233: LD_INT 21
75235: PUSH
75236: LD_INT 1
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 21
75245: PUSH
75246: LD_INT 2
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: LIST
75257: PPUSH
75258: CALL_OW 69
75262: PUSH
75263: FOR_IN
75264: IFFALSE 75325
// if IsSelected ( i ) then
75266: LD_VAR 0 2
75270: PPUSH
75271: CALL_OW 306
75275: IFFALSE 75323
// begin if i in hInvincible then
75277: LD_VAR 0 2
75281: PUSH
75282: LD_EXP 108
75286: IN
75287: IFFALSE 75307
// hInvincible := hInvincible diff i else
75289: LD_ADDR_EXP 108
75293: PUSH
75294: LD_EXP 108
75298: PUSH
75299: LD_VAR 0 2
75303: DIFF
75304: ST_TO_ADDR
75305: GO 75323
// hInvincible := hInvincible union i ;
75307: LD_ADDR_EXP 108
75311: PUSH
75312: LD_EXP 108
75316: PUSH
75317: LD_VAR 0 2
75321: UNION
75322: ST_TO_ADDR
// end ;
75323: GO 75263
75325: POP
75326: POP
// end ;
75327: LD_VAR 0 1
75331: RET
// export function hHackInvisible ; var i , j ; begin
75332: LD_INT 0
75334: PPUSH
75335: PPUSH
75336: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
75337: LD_ADDR_VAR 0 2
75341: PUSH
75342: LD_INT 21
75344: PUSH
75345: LD_INT 1
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PPUSH
75352: CALL_OW 69
75356: PUSH
75357: FOR_IN
75358: IFFALSE 75382
// if IsSelected ( i ) then
75360: LD_VAR 0 2
75364: PPUSH
75365: CALL_OW 306
75369: IFFALSE 75380
// ComForceInvisible ( i ) ;
75371: LD_VAR 0 2
75375: PPUSH
75376: CALL_OW 496
75380: GO 75357
75382: POP
75383: POP
// end ;
75384: LD_VAR 0 1
75388: RET
// export function hHackChangeYourSide ; begin
75389: LD_INT 0
75391: PPUSH
// if your_side = 8 then
75392: LD_OWVAR 2
75396: PUSH
75397: LD_INT 8
75399: EQUAL
75400: IFFALSE 75412
// your_side := 0 else
75402: LD_ADDR_OWVAR 2
75406: PUSH
75407: LD_INT 0
75409: ST_TO_ADDR
75410: GO 75426
// your_side := your_side + 1 ;
75412: LD_ADDR_OWVAR 2
75416: PUSH
75417: LD_OWVAR 2
75421: PUSH
75422: LD_INT 1
75424: PLUS
75425: ST_TO_ADDR
// end ;
75426: LD_VAR 0 1
75430: RET
// export function hHackChangeUnitSide ; var i , j ; begin
75431: LD_INT 0
75433: PPUSH
75434: PPUSH
75435: PPUSH
// for i in all_units do
75436: LD_ADDR_VAR 0 2
75440: PUSH
75441: LD_OWVAR 3
75445: PUSH
75446: FOR_IN
75447: IFFALSE 75525
// if IsSelected ( i ) then
75449: LD_VAR 0 2
75453: PPUSH
75454: CALL_OW 306
75458: IFFALSE 75523
// begin j := GetSide ( i ) ;
75460: LD_ADDR_VAR 0 3
75464: PUSH
75465: LD_VAR 0 2
75469: PPUSH
75470: CALL_OW 255
75474: ST_TO_ADDR
// if j = 8 then
75475: LD_VAR 0 3
75479: PUSH
75480: LD_INT 8
75482: EQUAL
75483: IFFALSE 75495
// j := 0 else
75485: LD_ADDR_VAR 0 3
75489: PUSH
75490: LD_INT 0
75492: ST_TO_ADDR
75493: GO 75509
// j := j + 1 ;
75495: LD_ADDR_VAR 0 3
75499: PUSH
75500: LD_VAR 0 3
75504: PUSH
75505: LD_INT 1
75507: PLUS
75508: ST_TO_ADDR
// SetSide ( i , j ) ;
75509: LD_VAR 0 2
75513: PPUSH
75514: LD_VAR 0 3
75518: PPUSH
75519: CALL_OW 235
// end ;
75523: GO 75446
75525: POP
75526: POP
// end ;
75527: LD_VAR 0 1
75531: RET
// export function hHackFog ; begin
75532: LD_INT 0
75534: PPUSH
// FogOff ( true ) ;
75535: LD_INT 1
75537: PPUSH
75538: CALL_OW 344
// end ;
75542: LD_VAR 0 1
75546: RET
// export function hHackTeleport ( unit , x , y ) ; begin
75547: LD_INT 0
75549: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
75550: LD_VAR 0 1
75554: PPUSH
75555: LD_VAR 0 2
75559: PPUSH
75560: LD_VAR 0 3
75564: PPUSH
75565: LD_INT 1
75567: PPUSH
75568: LD_INT 1
75570: PPUSH
75571: CALL_OW 483
// CenterOnXY ( x , y ) ;
75575: LD_VAR 0 2
75579: PPUSH
75580: LD_VAR 0 3
75584: PPUSH
75585: CALL_OW 84
// end ;
75589: LD_VAR 0 4
75593: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
75594: LD_INT 0
75596: PPUSH
75597: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
75598: LD_VAR 0 1
75602: NOT
75603: IFTRUE 75622
75605: PUSH
75606: LD_VAR 0 2
75610: PPUSH
75611: LD_VAR 0 3
75615: PPUSH
75616: CALL_OW 488
75620: NOT
75621: OR
75622: IFTRUE 75657
75624: PUSH
75625: LD_VAR 0 1
75629: PPUSH
75630: CALL_OW 266
75634: PUSH
75635: LD_INT 3
75637: NONEQUAL
75638: IFFALSE 75656
75640: PUSH
75641: LD_VAR 0 1
75645: PPUSH
75646: CALL_OW 247
75650: PUSH
75651: LD_INT 1
75653: EQUAL
75654: NOT
75655: AND
75656: OR
75657: IFFALSE 75661
// exit ;
75659: GO 75943
// if GetType ( factory ) = unit_human then
75661: LD_VAR 0 1
75665: PPUSH
75666: CALL_OW 247
75670: PUSH
75671: LD_INT 1
75673: EQUAL
75674: IFFALSE 75691
// factory := IsInUnit ( factory ) ;
75676: LD_ADDR_VAR 0 1
75680: PUSH
75681: LD_VAR 0 1
75685: PPUSH
75686: CALL_OW 310
75690: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
75691: LD_VAR 0 1
75695: PPUSH
75696: CALL_OW 266
75700: PUSH
75701: LD_INT 3
75703: NONEQUAL
75704: IFFALSE 75708
// exit ;
75706: GO 75943
// for i := 1 to Count ( factoryWaypoints ) do
75708: LD_ADDR_VAR 0 5
75712: PUSH
75713: DOUBLE
75714: LD_INT 1
75716: DEC
75717: ST_TO_ADDR
75718: LD_EXP 109
75722: PPUSH
75723: CALL 19770 0 1
75727: PUSH
75728: FOR_TO
75729: IFFALSE 75891
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
75731: LD_VAR 0 2
75735: PPUSH
75736: LD_VAR 0 3
75740: PPUSH
75741: CALL_OW 428
75745: PUSH
75746: LD_EXP 109
75750: PUSH
75751: LD_VAR 0 5
75755: ARRAY
75756: PUSH
75757: LD_INT 2
75759: ARRAY
75760: EQUAL
75761: IFFALSE 75793
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
75763: LD_ADDR_EXP 109
75767: PUSH
75768: LD_EXP 109
75772: PPUSH
75773: LD_VAR 0 5
75777: PPUSH
75778: CALL_OW 3
75782: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75783: CALL 75948 0 0
// exit ;
75787: POP
75788: POP
75789: GO 75943
// end else
75791: GO 75889
// if factory = factoryWaypoints [ i ] [ 2 ] then
75793: LD_VAR 0 1
75797: PUSH
75798: LD_EXP 109
75802: PUSH
75803: LD_VAR 0 5
75807: ARRAY
75808: PUSH
75809: LD_INT 2
75811: ARRAY
75812: EQUAL
75813: IFFALSE 75889
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
75815: LD_ADDR_EXP 109
75819: PUSH
75820: LD_EXP 109
75824: PPUSH
75825: LD_VAR 0 5
75829: PPUSH
75830: CALL_OW 3
75834: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
75835: LD_ADDR_EXP 109
75839: PUSH
75840: LD_EXP 109
75844: PPUSH
75845: LD_VAR 0 1
75849: PPUSH
75850: CALL_OW 255
75854: PUSH
75855: LD_VAR 0 1
75859: PUSH
75860: LD_VAR 0 2
75864: PUSH
75865: LD_VAR 0 3
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: PPUSH
75876: CALL 55702 0 2
75880: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75881: CALL 75948 0 0
// exit ;
75885: POP
75886: POP
75887: GO 75943
// end ; end ;
75889: GO 75728
75891: POP
75892: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
75893: LD_ADDR_EXP 109
75897: PUSH
75898: LD_EXP 109
75902: PPUSH
75903: LD_VAR 0 1
75907: PPUSH
75908: CALL_OW 255
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: LD_VAR 0 2
75922: PUSH
75923: LD_VAR 0 3
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: PPUSH
75934: CALL 55702 0 2
75938: ST_TO_ADDR
// UpdateFactoryWaypoints ;
75939: CALL 75948 0 0
// end ;
75943: LD_VAR 0 4
75947: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
75948: LD_INT 0
75950: PPUSH
75951: PPUSH
75952: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
75953: LD_STRING resetFactoryWaypoint();
75955: PPUSH
75956: CALL_OW 559
// if factoryWaypoints then
75960: LD_EXP 109
75964: IFFALSE 76085
// begin list := factoryWaypoints ;
75966: LD_ADDR_VAR 0 3
75970: PUSH
75971: LD_EXP 109
75975: ST_TO_ADDR
// for i := 1 to list do
75976: LD_ADDR_VAR 0 2
75980: PUSH
75981: DOUBLE
75982: LD_INT 1
75984: DEC
75985: ST_TO_ADDR
75986: LD_VAR 0 3
75990: PUSH
75991: FOR_TO
75992: IFFALSE 76083
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
75994: LD_STRING setFactoryWaypointXY(
75996: PUSH
75997: LD_VAR 0 3
76001: PUSH
76002: LD_VAR 0 2
76006: ARRAY
76007: PUSH
76008: LD_INT 1
76010: ARRAY
76011: STR
76012: PUSH
76013: LD_STRING ,
76015: STR
76016: PUSH
76017: LD_VAR 0 3
76021: PUSH
76022: LD_VAR 0 2
76026: ARRAY
76027: PUSH
76028: LD_INT 2
76030: ARRAY
76031: STR
76032: PUSH
76033: LD_STRING ,
76035: STR
76036: PUSH
76037: LD_VAR 0 3
76041: PUSH
76042: LD_VAR 0 2
76046: ARRAY
76047: PUSH
76048: LD_INT 3
76050: ARRAY
76051: STR
76052: PUSH
76053: LD_STRING ,
76055: STR
76056: PUSH
76057: LD_VAR 0 3
76061: PUSH
76062: LD_VAR 0 2
76066: ARRAY
76067: PUSH
76068: LD_INT 4
76070: ARRAY
76071: STR
76072: PUSH
76073: LD_STRING )
76075: STR
76076: PPUSH
76077: CALL_OW 559
76081: GO 75991
76083: POP
76084: POP
// end ; end ;
76085: LD_VAR 0 1
76089: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
76090: LD_INT 0
76092: PPUSH
// if HexInfo ( x , y ) = warehouse then
76093: LD_VAR 0 2
76097: PPUSH
76098: LD_VAR 0 3
76102: PPUSH
76103: CALL_OW 428
76107: PUSH
76108: LD_VAR 0 1
76112: EQUAL
76113: IFFALSE 76140
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
76115: LD_ADDR_EXP 111
76119: PUSH
76120: LD_EXP 111
76124: PPUSH
76125: LD_VAR 0 1
76129: PPUSH
76130: LD_INT 0
76132: PPUSH
76133: CALL_OW 1
76137: ST_TO_ADDR
76138: GO 76191
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
76140: LD_ADDR_EXP 111
76144: PUSH
76145: LD_EXP 111
76149: PPUSH
76150: LD_VAR 0 1
76154: PPUSH
76155: LD_VAR 0 1
76159: PPUSH
76160: CALL_OW 255
76164: PUSH
76165: LD_VAR 0 1
76169: PUSH
76170: LD_VAR 0 2
76174: PUSH
76175: LD_VAR 0 3
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: PPUSH
76186: CALL_OW 1
76190: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
76191: CALL 76200 0 0
// end ;
76195: LD_VAR 0 4
76199: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
76200: LD_INT 0
76202: PPUSH
76203: PPUSH
76204: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
76205: LD_STRING resetWarehouseGatheringPoints();
76207: PPUSH
76208: CALL_OW 559
// if warehouseGatheringPoints then
76212: LD_EXP 111
76216: IFFALSE 76342
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
76218: LD_ADDR_VAR 0 3
76222: PUSH
76223: LD_EXP 111
76227: PPUSH
76228: CALL 59636 0 1
76232: ST_TO_ADDR
// for i := 1 to list do
76233: LD_ADDR_VAR 0 2
76237: PUSH
76238: DOUBLE
76239: LD_INT 1
76241: DEC
76242: ST_TO_ADDR
76243: LD_VAR 0 3
76247: PUSH
76248: FOR_TO
76249: IFFALSE 76340
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
76251: LD_STRING setWarehouseGatheringPointXY(
76253: PUSH
76254: LD_VAR 0 3
76258: PUSH
76259: LD_VAR 0 2
76263: ARRAY
76264: PUSH
76265: LD_INT 1
76267: ARRAY
76268: STR
76269: PUSH
76270: LD_STRING ,
76272: STR
76273: PUSH
76274: LD_VAR 0 3
76278: PUSH
76279: LD_VAR 0 2
76283: ARRAY
76284: PUSH
76285: LD_INT 2
76287: ARRAY
76288: STR
76289: PUSH
76290: LD_STRING ,
76292: STR
76293: PUSH
76294: LD_VAR 0 3
76298: PUSH
76299: LD_VAR 0 2
76303: ARRAY
76304: PUSH
76305: LD_INT 3
76307: ARRAY
76308: STR
76309: PUSH
76310: LD_STRING ,
76312: STR
76313: PUSH
76314: LD_VAR 0 3
76318: PUSH
76319: LD_VAR 0 2
76323: ARRAY
76324: PUSH
76325: LD_INT 4
76327: ARRAY
76328: STR
76329: PUSH
76330: LD_STRING )
76332: STR
76333: PPUSH
76334: CALL_OW 559
76338: GO 76248
76340: POP
76341: POP
// end ; end ;
76342: LD_VAR 0 1
76346: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
76347: LD_EXP 111
76351: IFFALSE 77046
76353: GO 76355
76355: DISABLE
76356: LD_INT 0
76358: PPUSH
76359: PPUSH
76360: PPUSH
76361: PPUSH
76362: PPUSH
76363: PPUSH
76364: PPUSH
76365: PPUSH
76366: PPUSH
// begin enable ;
76367: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
76368: LD_ADDR_VAR 0 3
76372: PUSH
76373: LD_EXP 111
76377: PPUSH
76378: CALL 59636 0 1
76382: ST_TO_ADDR
// if not list then
76383: LD_VAR 0 3
76387: NOT
76388: IFFALSE 76392
// exit ;
76390: GO 77046
// for i := 1 to list do
76392: LD_ADDR_VAR 0 1
76396: PUSH
76397: DOUBLE
76398: LD_INT 1
76400: DEC
76401: ST_TO_ADDR
76402: LD_VAR 0 3
76406: PUSH
76407: FOR_TO
76408: IFFALSE 77044
// begin depot := list [ i ] [ 2 ] ;
76410: LD_ADDR_VAR 0 8
76414: PUSH
76415: LD_VAR 0 3
76419: PUSH
76420: LD_VAR 0 1
76424: ARRAY
76425: PUSH
76426: LD_INT 2
76428: ARRAY
76429: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
76430: LD_ADDR_VAR 0 5
76434: PUSH
76435: LD_VAR 0 3
76439: PUSH
76440: LD_VAR 0 1
76444: ARRAY
76445: PUSH
76446: LD_INT 1
76448: ARRAY
76449: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
76450: LD_VAR 0 8
76454: PPUSH
76455: CALL_OW 301
76459: IFTRUE 76478
76461: PUSH
76462: LD_VAR 0 5
76466: PUSH
76467: LD_VAR 0 8
76471: PPUSH
76472: CALL_OW 255
76476: NONEQUAL
76477: OR
76478: IFFALSE 76507
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
76480: LD_ADDR_EXP 111
76484: PUSH
76485: LD_EXP 111
76489: PPUSH
76490: LD_VAR 0 8
76494: PPUSH
76495: LD_INT 0
76497: PPUSH
76498: CALL_OW 1
76502: ST_TO_ADDR
// exit ;
76503: POP
76504: POP
76505: GO 77046
// end ; x := list [ i ] [ 3 ] ;
76507: LD_ADDR_VAR 0 6
76511: PUSH
76512: LD_VAR 0 3
76516: PUSH
76517: LD_VAR 0 1
76521: ARRAY
76522: PUSH
76523: LD_INT 3
76525: ARRAY
76526: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
76527: LD_ADDR_VAR 0 7
76531: PUSH
76532: LD_VAR 0 3
76536: PUSH
76537: LD_VAR 0 1
76541: ARRAY
76542: PUSH
76543: LD_INT 4
76545: ARRAY
76546: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
76547: LD_ADDR_VAR 0 9
76551: PUSH
76552: LD_VAR 0 6
76556: PPUSH
76557: LD_VAR 0 7
76561: PPUSH
76562: LD_INT 16
76564: PPUSH
76565: CALL 58210 0 3
76569: ST_TO_ADDR
// if not cratesNearbyPoint then
76570: LD_VAR 0 9
76574: NOT
76575: IFFALSE 76581
// exit ;
76577: POP
76578: POP
76579: GO 77046
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
76581: LD_ADDR_VAR 0 4
76585: PUSH
76586: LD_INT 22
76588: PUSH
76589: LD_VAR 0 5
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: PUSH
76598: LD_INT 3
76600: PUSH
76601: LD_INT 60
76603: PUSH
76604: EMPTY
76605: LIST
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 91
76613: PUSH
76614: LD_VAR 0 8
76618: PUSH
76619: LD_INT 6
76621: PUSH
76622: EMPTY
76623: LIST
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: PUSH
76630: LD_INT 25
76632: PUSH
76633: LD_INT 2
76635: PUSH
76636: EMPTY
76637: LIST
76638: LIST
76639: PUSH
76640: LD_INT 25
76642: PUSH
76643: LD_INT 16
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: LIST
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: LIST
76659: LIST
76660: PPUSH
76661: CALL_OW 69
76665: PUSH
76666: LD_VAR 0 8
76670: PPUSH
76671: CALL_OW 313
76675: PPUSH
76676: LD_INT 3
76678: PUSH
76679: LD_INT 60
76681: PUSH
76682: EMPTY
76683: LIST
76684: PUSH
76685: EMPTY
76686: LIST
76687: LIST
76688: PUSH
76689: LD_INT 2
76691: PUSH
76692: LD_INT 25
76694: PUSH
76695: LD_INT 2
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: LD_INT 25
76704: PUSH
76705: LD_INT 16
76707: PUSH
76708: EMPTY
76709: LIST
76710: LIST
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: LIST
76716: PUSH
76717: EMPTY
76718: LIST
76719: LIST
76720: PPUSH
76721: CALL_OW 72
76725: UNION
76726: ST_TO_ADDR
// if tmp then
76727: LD_VAR 0 4
76731: IFFALSE 76811
// begin tmp := ShrinkArray ( tmp , 3 ) ;
76733: LD_ADDR_VAR 0 4
76737: PUSH
76738: LD_VAR 0 4
76742: PPUSH
76743: LD_INT 3
76745: PPUSH
76746: CALL 56017 0 2
76750: ST_TO_ADDR
// for j in tmp do
76751: LD_ADDR_VAR 0 2
76755: PUSH
76756: LD_VAR 0 4
76760: PUSH
76761: FOR_IN
76762: IFFALSE 76805
// begin if IsInUnit ( j ) then
76764: LD_VAR 0 2
76768: PPUSH
76769: CALL_OW 310
76773: IFFALSE 76784
// ComExit ( j ) ;
76775: LD_VAR 0 2
76779: PPUSH
76780: CALL 56100 0 1
// AddComCollect ( j , x , y ) ;
76784: LD_VAR 0 2
76788: PPUSH
76789: LD_VAR 0 6
76793: PPUSH
76794: LD_VAR 0 7
76798: PPUSH
76799: CALL_OW 177
// end ;
76803: GO 76761
76805: POP
76806: POP
// exit ;
76807: POP
76808: POP
76809: GO 77046
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
76811: LD_ADDR_VAR 0 4
76815: PUSH
76816: LD_INT 22
76818: PUSH
76819: LD_VAR 0 5
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 91
76830: PUSH
76831: LD_VAR 0 8
76835: PUSH
76836: LD_INT 8
76838: PUSH
76839: EMPTY
76840: LIST
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 2
76846: PUSH
76847: LD_INT 34
76849: PUSH
76850: LD_INT 12
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 34
76859: PUSH
76860: LD_INT 51
76862: PUSH
76863: EMPTY
76864: LIST
76865: LIST
76866: PUSH
76867: LD_INT 34
76869: PUSH
76870: LD_INT 32
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 34
76879: PUSH
76880: LD_INT 89
76882: PUSH
76883: EMPTY
76884: LIST
76885: LIST
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: LIST
76891: LIST
76892: LIST
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: LIST
76898: PPUSH
76899: CALL_OW 69
76903: ST_TO_ADDR
// if tmp then
76904: LD_VAR 0 4
76908: IFFALSE 77042
// begin for j in tmp do
76910: LD_ADDR_VAR 0 2
76914: PUSH
76915: LD_VAR 0 4
76919: PUSH
76920: FOR_IN
76921: IFFALSE 77040
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
76923: LD_VAR 0 2
76927: PPUSH
76928: CALL_OW 262
76932: PUSH
76933: LD_INT 3
76935: EQUAL
76936: IFTRUE 76953
76938: PUSH
76939: LD_VAR 0 2
76943: PPUSH
76944: CALL_OW 261
76948: PUSH
76949: LD_INT 20
76951: GREATER
76952: OR
76953: IFFALSE 76967
76955: PUSH
76956: LD_VAR 0 2
76960: PPUSH
76961: CALL_OW 314
76965: NOT
76966: AND
76967: IFFALSE 76997
76969: PUSH
76970: LD_VAR 0 2
76974: PPUSH
76975: CALL_OW 263
76979: PUSH
76980: LD_INT 1
76982: NONEQUAL
76983: IFTRUE 76996
76985: PUSH
76986: LD_VAR 0 2
76990: PPUSH
76991: CALL_OW 311
76995: OR
76996: AND
76997: IFFALSE 77038
// begin ComCollect ( j , x , y ) ;
76999: LD_VAR 0 2
77003: PPUSH
77004: LD_VAR 0 6
77008: PPUSH
77009: LD_VAR 0 7
77013: PPUSH
77014: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
77018: LD_VAR 0 2
77022: PPUSH
77023: LD_VAR 0 8
77027: PPUSH
77028: CALL_OW 172
// exit ;
77032: POP
77033: POP
77034: POP
77035: POP
77036: GO 77046
// end ;
77038: GO 76920
77040: POP
77041: POP
// end ; end ;
77042: GO 76407
77044: POP
77045: POP
// end ; end_of_file
77046: PPOPN 9
77048: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
77049: LD_VAR 0 1
77053: PPUSH
77054: LD_VAR 0 2
77058: PPUSH
77059: LD_VAR 0 3
77063: PPUSH
77064: LD_VAR 0 4
77068: PPUSH
77069: LD_VAR 0 5
77073: PPUSH
77074: LD_VAR 0 6
77078: PPUSH
77079: CALL 61142 0 6
// end ;
77083: PPOPN 6
77085: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
77086: LD_INT 0
77088: PPUSH
// begin if not units then
77089: LD_VAR 0 1
77093: NOT
77094: IFFALSE 77098
// exit ;
77096: GO 77098
// end ;
77098: PPOPN 7
77100: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
77101: CALL 61029 0 0
// end ; end_of_file
77105: PPOPN 1
77107: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
77108: LD_VAR 0 1
77112: PUSH
77113: LD_INT 200
77115: DOUBLE
77116: GREATEREQUAL
77117: IFFALSE 77125
77119: LD_INT 299
77121: DOUBLE
77122: LESSEQUAL
77123: IFTRUE 77127
77125: GO 77159
77127: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
77128: LD_VAR 0 1
77132: PPUSH
77133: LD_VAR 0 2
77137: PPUSH
77138: LD_VAR 0 3
77142: PPUSH
77143: LD_VAR 0 4
77147: PPUSH
77148: LD_VAR 0 5
77152: PPUSH
77153: CALL 77940 0 5
77157: GO 77236
77159: LD_INT 300
77161: DOUBLE
77162: GREATEREQUAL
77163: IFFALSE 77171
77165: LD_INT 399
77167: DOUBLE
77168: LESSEQUAL
77169: IFTRUE 77173
77171: GO 77235
77173: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
77174: LD_VAR 0 1
77178: PPUSH
77179: LD_VAR 0 2
77183: PPUSH
77184: LD_VAR 0 3
77188: PPUSH
77189: LD_VAR 0 4
77193: PPUSH
77194: LD_VAR 0 5
77198: PPUSH
77199: LD_VAR 0 6
77203: PPUSH
77204: LD_VAR 0 7
77208: PPUSH
77209: LD_VAR 0 8
77213: PPUSH
77214: LD_VAR 0 9
77218: PPUSH
77219: LD_VAR 0 10
77223: PPUSH
77224: LD_VAR 0 11
77228: PPUSH
77229: CALL 73602 0 11
77233: GO 77236
77235: POP
// end ;
77236: PPOPN 11
77238: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
77239: LD_VAR 0 1
77243: PPUSH
77244: LD_VAR 0 2
77248: PPUSH
77249: LD_VAR 0 3
77253: PPUSH
77254: LD_VAR 0 4
77258: PPUSH
77259: LD_VAR 0 5
77263: PPUSH
77264: CALL 77321 0 5
// end ; end_of_file
77268: PPOPN 5
77270: END
// export function SOS_UnitDestroyed ( un ) ; begin
77271: LD_INT 0
77273: PPUSH
// ComRadiation ( un ) ;
77274: LD_VAR 0 1
77278: PPUSH
77279: CALL 78360 0 1
// end ;
77283: LD_VAR 0 2
77287: RET
// export function SOS_UnitKamikazed ( un ) ; begin
77288: LD_INT 0
77290: PPUSH
// ComRadiation ( un ) ;
77291: LD_VAR 0 1
77295: PPUSH
77296: CALL 78360 0 1
// end ;
77300: LD_VAR 0 2
77304: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
77305: LD_INT 0
77307: PPUSH
// end ;
77308: LD_VAR 0 4
77312: RET
// export function SOS_Command ( cmd ) ; begin
77313: LD_INT 0
77315: PPUSH
// end ;
77316: LD_VAR 0 2
77320: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
77321: LD_INT 0
77323: PPUSH
// end ;
77324: LD_VAR 0 6
77328: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
77329: LD_INT 0
77331: PPUSH
77332: PPUSH
77333: PPUSH
77334: PPUSH
// if not vehicle or not factory then
77335: LD_VAR 0 1
77339: NOT
77340: IFTRUE 77349
77342: PUSH
77343: LD_VAR 0 2
77347: NOT
77348: OR
77349: IFFALSE 77353
// exit ;
77351: GO 77935
// if not factoryWaypoints then
77353: LD_EXP 109
77357: NOT
77358: IFFALSE 77362
// exit ;
77360: GO 77935
// for i := 1 to Count ( factoryWaypoints ) do
77362: LD_ADDR_VAR 0 4
77366: PUSH
77367: DOUBLE
77368: LD_INT 1
77370: DEC
77371: ST_TO_ADDR
77372: LD_EXP 109
77376: PPUSH
77377: CALL 19770 0 1
77381: PUSH
77382: FOR_TO
77383: IFFALSE 77933
// if factoryWaypoints [ i ] [ 2 ] = factory then
77385: LD_EXP 109
77389: PUSH
77390: LD_VAR 0 4
77394: ARRAY
77395: PUSH
77396: LD_INT 2
77398: ARRAY
77399: PUSH
77400: LD_VAR 0 2
77404: EQUAL
77405: IFFALSE 77931
// begin if GetControl ( vehicle ) = control_manual then
77407: LD_VAR 0 1
77411: PPUSH
77412: CALL_OW 263
77416: PUSH
77417: LD_INT 1
77419: EQUAL
77420: IFFALSE 77784
// begin driver := IsDrivenBy ( vehicle ) ;
77422: LD_ADDR_VAR 0 5
77426: PUSH
77427: LD_VAR 0 1
77431: PPUSH
77432: CALL_OW 311
77436: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
77437: LD_VAR 0 5
77441: PUSH
77442: LD_EXP 110
77446: IN
77447: IFTRUE 77461
77449: PUSH
77450: LD_VAR 0 1
77454: PUSH
77455: LD_EXP 110
77459: IN
77460: OR
77461: IFFALSE 77467
// exit ;
77463: POP
77464: POP
77465: GO 77935
// if not HasTask ( driver ) then
77467: LD_VAR 0 5
77471: PPUSH
77472: CALL_OW 314
77476: NOT
77477: IFFALSE 77782
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
77479: LD_ADDR_EXP 110
77483: PUSH
77484: LD_EXP 110
77488: PPUSH
77489: LD_VAR 0 5
77493: PPUSH
77494: CALL 55702 0 2
77498: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
77499: LD_ADDR_EXP 110
77503: PUSH
77504: LD_EXP 110
77508: PPUSH
77509: LD_VAR 0 1
77513: PPUSH
77514: CALL 55702 0 2
77518: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77519: LD_ADDR_VAR 0 6
77523: PUSH
77524: LD_EXP 109
77528: PUSH
77529: LD_VAR 0 4
77533: ARRAY
77534: PUSH
77535: LD_INT 3
77537: ARRAY
77538: PPUSH
77539: LD_EXP 109
77543: PUSH
77544: LD_VAR 0 4
77548: ARRAY
77549: PUSH
77550: LD_INT 4
77552: ARRAY
77553: PPUSH
77554: CALL_OW 428
77558: ST_TO_ADDR
// if hex then
77559: LD_VAR 0 6
77563: IFFALSE 77581
// ComMoveUnit ( driver , hex ) else
77565: LD_VAR 0 5
77569: PPUSH
77570: LD_VAR 0 6
77574: PPUSH
77575: CALL_OW 112
77579: GO 77665
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
77581: LD_VAR 0 1
77585: PPUSH
77586: LD_EXP 109
77590: PUSH
77591: LD_VAR 0 4
77595: ARRAY
77596: PUSH
77597: LD_INT 3
77599: ARRAY
77600: PPUSH
77601: LD_EXP 109
77605: PUSH
77606: LD_VAR 0 4
77610: ARRAY
77611: PUSH
77612: LD_INT 4
77614: ARRAY
77615: PPUSH
77616: CALL_OW 297
77620: PUSH
77621: LD_INT 0
77623: GREATER
77624: IFFALSE 77665
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77626: LD_VAR 0 5
77630: PPUSH
77631: LD_EXP 109
77635: PUSH
77636: LD_VAR 0 4
77640: ARRAY
77641: PUSH
77642: LD_INT 3
77644: ARRAY
77645: PPUSH
77646: LD_EXP 109
77650: PUSH
77651: LD_VAR 0 4
77655: ARRAY
77656: PUSH
77657: LD_INT 4
77659: ARRAY
77660: PPUSH
77661: CALL_OW 111
// AddComExitVehicle ( driver ) ;
77665: LD_VAR 0 5
77669: PPUSH
77670: CALL_OW 181
// if Multiplayer then
77674: LD_OWVAR 4
77678: IFFALSE 77727
// begin repeat wait ( 10 ) ;
77680: LD_INT 10
77682: PPUSH
77683: CALL_OW 67
// until not IsInUnit ( driver ) ;
77687: LD_VAR 0 5
77691: PPUSH
77692: CALL_OW 310
77696: NOT
77697: IFFALSE 77680
// if not HasTask ( driver ) then
77699: LD_VAR 0 5
77703: PPUSH
77704: CALL_OW 314
77708: NOT
77709: IFFALSE 77725
// ComEnterUnit ( driver , factory ) ;
77711: LD_VAR 0 5
77715: PPUSH
77716: LD_VAR 0 2
77720: PPUSH
77721: CALL_OW 120
// end else
77725: GO 77741
// AddComEnterUnit ( driver , factory ) ;
77727: LD_VAR 0 5
77731: PPUSH
77732: LD_VAR 0 2
77736: PPUSH
77737: CALL_OW 180
// wait ( 0 0$1 ) ;
77741: LD_INT 35
77743: PPUSH
77744: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
77748: LD_ADDR_EXP 110
77752: PUSH
77753: LD_EXP 110
77757: PUSH
77758: LD_VAR 0 5
77762: DIFF
77763: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
77764: LD_ADDR_EXP 110
77768: PUSH
77769: LD_EXP 110
77773: PUSH
77774: LD_VAR 0 1
77778: DIFF
77779: ST_TO_ADDR
// break ;
77780: GO 77933
// end ; end else
77782: GO 77931
// if GetControl ( vehicle ) = control_remote then
77784: LD_VAR 0 1
77788: PPUSH
77789: CALL_OW 263
77793: PUSH
77794: LD_INT 2
77796: EQUAL
77797: IFFALSE 77883
// begin wait ( 0 0$2 ) ;
77799: LD_INT 70
77801: PPUSH
77802: CALL_OW 67
// repeat wait ( 10 ) ;
77806: LD_INT 10
77808: PPUSH
77809: CALL_OW 67
// Connect ( vehicle ) ;
77813: LD_VAR 0 1
77817: PPUSH
77818: CALL 26014 0 1
// until IsControledBy ( vehicle ) ;
77822: LD_VAR 0 1
77826: PPUSH
77827: CALL_OW 312
77831: IFFALSE 77806
// wait ( 10 ) ;
77833: LD_INT 10
77835: PPUSH
77836: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77840: LD_VAR 0 1
77844: PPUSH
77845: LD_EXP 109
77849: PUSH
77850: LD_VAR 0 4
77854: ARRAY
77855: PUSH
77856: LD_INT 3
77858: ARRAY
77859: PPUSH
77860: LD_EXP 109
77864: PUSH
77865: LD_VAR 0 4
77869: ARRAY
77870: PUSH
77871: LD_INT 4
77873: ARRAY
77874: PPUSH
77875: CALL_OW 111
// break ;
77879: GO 77933
// end else
77881: GO 77931
// begin wait ( 0 0$3 ) ;
77883: LD_INT 105
77885: PPUSH
77886: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
77890: LD_VAR 0 1
77894: PPUSH
77895: LD_EXP 109
77899: PUSH
77900: LD_VAR 0 4
77904: ARRAY
77905: PUSH
77906: LD_INT 3
77908: ARRAY
77909: PPUSH
77910: LD_EXP 109
77914: PUSH
77915: LD_VAR 0 4
77919: ARRAY
77920: PUSH
77921: LD_INT 4
77923: ARRAY
77924: PPUSH
77925: CALL_OW 111
// break ;
77929: GO 77933
// end ; end ;
77931: GO 77382
77933: POP
77934: POP
// end ;
77935: LD_VAR 0 3
77939: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
77940: LD_INT 0
77942: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
77943: LD_VAR 0 1
77947: PUSH
77948: LD_INT 250
77950: EQUAL
77951: IFFALSE 77968
77953: PUSH
77954: LD_VAR 0 2
77958: PPUSH
77959: CALL_OW 264
77963: PUSH
77964: LD_INT 81
77966: EQUAL
77967: AND
77968: IFFALSE 77989
// MinerPlaceMine ( unit , x , y ) ;
77970: LD_VAR 0 2
77974: PPUSH
77975: LD_VAR 0 4
77979: PPUSH
77980: LD_VAR 0 5
77984: PPUSH
77985: CALL 81121 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
77989: LD_VAR 0 1
77993: PUSH
77994: LD_INT 251
77996: EQUAL
77997: IFFALSE 78014
77999: PUSH
78000: LD_VAR 0 2
78004: PPUSH
78005: CALL_OW 264
78009: PUSH
78010: LD_INT 81
78012: EQUAL
78013: AND
78014: IFFALSE 78035
// MinerDetonateMine ( unit , x , y ) ;
78016: LD_VAR 0 2
78020: PPUSH
78021: LD_VAR 0 4
78025: PPUSH
78026: LD_VAR 0 5
78030: PPUSH
78031: CALL 81400 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
78035: LD_VAR 0 1
78039: PUSH
78040: LD_INT 252
78042: EQUAL
78043: IFFALSE 78060
78045: PUSH
78046: LD_VAR 0 2
78050: PPUSH
78051: CALL_OW 264
78055: PUSH
78056: LD_INT 81
78058: EQUAL
78059: AND
78060: IFFALSE 78081
// MinerCreateMinefield ( unit , x , y ) ;
78062: LD_VAR 0 2
78066: PPUSH
78067: LD_VAR 0 4
78071: PPUSH
78072: LD_VAR 0 5
78076: PPUSH
78077: CALL 81819 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
78081: LD_VAR 0 1
78085: PUSH
78086: LD_INT 253
78088: EQUAL
78089: IFFALSE 78106
78091: PUSH
78092: LD_VAR 0 2
78096: PPUSH
78097: CALL_OW 257
78101: PUSH
78102: LD_INT 5
78104: EQUAL
78105: AND
78106: IFFALSE 78127
// ComBinocular ( unit , x , y ) ;
78108: LD_VAR 0 2
78112: PPUSH
78113: LD_VAR 0 4
78117: PPUSH
78118: LD_VAR 0 5
78122: PPUSH
78123: CALL 82194 0 3
// if selectedUnit then
78127: LD_VAR 0 3
78131: IFFALSE 78191
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
78133: LD_VAR 0 1
78137: PUSH
78138: LD_INT 254
78140: EQUAL
78141: IFFALSE 78158
78143: PUSH
78144: LD_VAR 0 2
78148: PPUSH
78149: CALL_OW 264
78153: PUSH
78154: LD_INT 99
78156: EQUAL
78157: AND
78158: IFFALSE 78175
78160: PUSH
78161: LD_VAR 0 3
78165: PPUSH
78166: CALL_OW 263
78170: PUSH
78171: LD_INT 3
78173: EQUAL
78174: AND
78175: IFFALSE 78191
// HackDestroyVehicle ( unit , selectedUnit ) ;
78177: LD_VAR 0 2
78181: PPUSH
78182: LD_VAR 0 3
78186: PPUSH
78187: CALL 80481 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
78191: LD_VAR 0 1
78195: PUSH
78196: LD_INT 255
78198: EQUAL
78199: IFFALSE 78223
78201: PUSH
78202: LD_VAR 0 2
78206: PPUSH
78207: CALL_OW 264
78211: PUSH
78212: LD_INT 14
78214: PUSH
78215: LD_INT 53
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: IN
78222: AND
78223: IFFALSE 78241
78225: PUSH
78226: LD_VAR 0 4
78230: PPUSH
78231: LD_VAR 0 5
78235: PPUSH
78236: CALL_OW 488
78240: AND
78241: IFFALSE 78265
// CutTreeXYR ( unit , x , y , 12 ) ;
78243: LD_VAR 0 2
78247: PPUSH
78248: LD_VAR 0 4
78252: PPUSH
78253: LD_VAR 0 5
78257: PPUSH
78258: LD_INT 12
78260: PPUSH
78261: CALL 78456 0 4
// if cmd = 256 then
78265: LD_VAR 0 1
78269: PUSH
78270: LD_INT 256
78272: EQUAL
78273: IFFALSE 78294
// SetFactoryWaypoint ( unit , x , y ) ;
78275: LD_VAR 0 2
78279: PPUSH
78280: LD_VAR 0 4
78284: PPUSH
78285: LD_VAR 0 5
78289: PPUSH
78290: CALL 75594 0 3
// if cmd = 257 then
78294: LD_VAR 0 1
78298: PUSH
78299: LD_INT 257
78301: EQUAL
78302: IFFALSE 78323
// SetWarehouseGatheringPoint ( unit , x , y ) ;
78304: LD_VAR 0 2
78308: PPUSH
78309: LD_VAR 0 4
78313: PPUSH
78314: LD_VAR 0 5
78318: PPUSH
78319: CALL 76090 0 3
// if cmd = 258 then
78323: LD_VAR 0 1
78327: PUSH
78328: LD_INT 258
78330: EQUAL
78331: IFFALSE 78355
// BurnTreeXYR ( unit , x , y , 8 ) ;
78333: LD_VAR 0 2
78337: PPUSH
78338: LD_VAR 0 4
78342: PPUSH
78343: LD_VAR 0 5
78347: PPUSH
78348: LD_INT 8
78350: PPUSH
78351: CALL 78856 0 4
// end ;
78355: LD_VAR 0 6
78359: RET
// export function ComRadiation ( un ) ; var eff ; begin
78360: LD_INT 0
78362: PPUSH
78363: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
78364: LD_VAR 0 1
78368: PPUSH
78369: CALL_OW 264
78373: PUSH
78374: LD_INT 91
78376: NONEQUAL
78377: IFFALSE 78381
// exit ;
78379: GO 78451
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
78381: LD_INT 68
78383: PPUSH
78384: LD_VAR 0 1
78388: PPUSH
78389: CALL_OW 255
78393: PPUSH
78394: CALL_OW 321
78398: PUSH
78399: LD_INT 2
78401: EQUAL
78402: IFFALSE 78414
// eff := 50 else
78404: LD_ADDR_VAR 0 3
78408: PUSH
78409: LD_INT 50
78411: ST_TO_ADDR
78412: GO 78422
// eff := 25 ;
78414: LD_ADDR_VAR 0 3
78418: PUSH
78419: LD_INT 25
78421: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
78422: LD_VAR 0 1
78426: PPUSH
78427: CALL_OW 250
78431: PPUSH
78432: LD_VAR 0 1
78436: PPUSH
78437: CALL_OW 251
78441: PPUSH
78442: LD_VAR 0 3
78446: PPUSH
78447: CALL_OW 495
// end ;
78451: LD_VAR 0 2
78455: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
78456: LD_INT 0
78458: PPUSH
78459: PPUSH
78460: PPUSH
78461: PPUSH
78462: PPUSH
78463: PPUSH
78464: PPUSH
78465: PPUSH
78466: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
78467: LD_VAR 0 1
78471: PPUSH
78472: CALL_OW 302
78476: NOT
78477: IFTRUE 78496
78479: PUSH
78480: LD_VAR 0 2
78484: PPUSH
78485: LD_VAR 0 3
78489: PPUSH
78490: CALL_OW 488
78494: NOT
78495: OR
78496: IFTRUE 78505
78498: PUSH
78499: LD_VAR 0 4
78503: NOT
78504: OR
78505: IFFALSE 78509
// exit ;
78507: GO 78851
// list := [ ] ;
78509: LD_ADDR_VAR 0 13
78513: PUSH
78514: EMPTY
78515: ST_TO_ADDR
// if x - r < 0 then
78516: LD_VAR 0 2
78520: PUSH
78521: LD_VAR 0 4
78525: MINUS
78526: PUSH
78527: LD_INT 0
78529: LESS
78530: IFFALSE 78542
// min_x := 0 else
78532: LD_ADDR_VAR 0 7
78536: PUSH
78537: LD_INT 0
78539: ST_TO_ADDR
78540: GO 78558
// min_x := x - r ;
78542: LD_ADDR_VAR 0 7
78546: PUSH
78547: LD_VAR 0 2
78551: PUSH
78552: LD_VAR 0 4
78556: MINUS
78557: ST_TO_ADDR
// if y - r < 0 then
78558: LD_VAR 0 3
78562: PUSH
78563: LD_VAR 0 4
78567: MINUS
78568: PUSH
78569: LD_INT 0
78571: LESS
78572: IFFALSE 78584
// min_y := 0 else
78574: LD_ADDR_VAR 0 8
78578: PUSH
78579: LD_INT 0
78581: ST_TO_ADDR
78582: GO 78600
// min_y := y - r ;
78584: LD_ADDR_VAR 0 8
78588: PUSH
78589: LD_VAR 0 3
78593: PUSH
78594: LD_VAR 0 4
78598: MINUS
78599: ST_TO_ADDR
// max_x := x + r ;
78600: LD_ADDR_VAR 0 9
78604: PUSH
78605: LD_VAR 0 2
78609: PUSH
78610: LD_VAR 0 4
78614: PLUS
78615: ST_TO_ADDR
// max_y := y + r ;
78616: LD_ADDR_VAR 0 10
78620: PUSH
78621: LD_VAR 0 3
78625: PUSH
78626: LD_VAR 0 4
78630: PLUS
78631: ST_TO_ADDR
// for _x = min_x to max_x do
78632: LD_ADDR_VAR 0 11
78636: PUSH
78637: DOUBLE
78638: LD_VAR 0 7
78642: DEC
78643: ST_TO_ADDR
78644: LD_VAR 0 9
78648: PUSH
78649: FOR_TO
78650: IFFALSE 78769
// for _y = min_y to max_y do
78652: LD_ADDR_VAR 0 12
78656: PUSH
78657: DOUBLE
78658: LD_VAR 0 8
78662: DEC
78663: ST_TO_ADDR
78664: LD_VAR 0 10
78668: PUSH
78669: FOR_TO
78670: IFFALSE 78765
// begin if not ValidHex ( _x , _y ) then
78672: LD_VAR 0 11
78676: PPUSH
78677: LD_VAR 0 12
78681: PPUSH
78682: CALL_OW 488
78686: NOT
78687: IFFALSE 78691
// continue ;
78689: GO 78669
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
78691: LD_VAR 0 11
78695: PPUSH
78696: LD_VAR 0 12
78700: PPUSH
78701: CALL_OW 351
78705: IFFALSE 78723
78707: PUSH
78708: LD_VAR 0 11
78712: PPUSH
78713: LD_VAR 0 12
78717: PPUSH
78718: CALL_OW 554
78722: AND
78723: IFFALSE 78763
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
78725: LD_ADDR_VAR 0 13
78729: PUSH
78730: LD_VAR 0 13
78734: PPUSH
78735: LD_VAR 0 13
78739: PUSH
78740: LD_INT 1
78742: PLUS
78743: PPUSH
78744: LD_VAR 0 11
78748: PUSH
78749: LD_VAR 0 12
78753: PUSH
78754: EMPTY
78755: LIST
78756: LIST
78757: PPUSH
78758: CALL_OW 2
78762: ST_TO_ADDR
// end ;
78763: GO 78669
78765: POP
78766: POP
78767: GO 78649
78769: POP
78770: POP
// if not list then
78771: LD_VAR 0 13
78775: NOT
78776: IFFALSE 78780
// exit ;
78778: GO 78851
// for i in list do
78780: LD_ADDR_VAR 0 6
78784: PUSH
78785: LD_VAR 0 13
78789: PUSH
78790: FOR_IN
78791: IFFALSE 78849
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
78793: LD_VAR 0 1
78797: PPUSH
78798: LD_STRING M
78800: PUSH
78801: LD_VAR 0 6
78805: PUSH
78806: LD_INT 1
78808: ARRAY
78809: PUSH
78810: LD_VAR 0 6
78814: PUSH
78815: LD_INT 2
78817: ARRAY
78818: PUSH
78819: LD_INT 0
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: LD_INT 0
78827: PUSH
78828: LD_INT 0
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: LIST
78837: LIST
78838: LIST
78839: PUSH
78840: EMPTY
78841: LIST
78842: PPUSH
78843: CALL_OW 447
78847: GO 78790
78849: POP
78850: POP
// end ;
78851: LD_VAR 0 5
78855: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
78856: LD_INT 0
78858: PPUSH
78859: PPUSH
78860: PPUSH
78861: PPUSH
78862: PPUSH
78863: PPUSH
78864: PPUSH
78865: PPUSH
78866: PPUSH
78867: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
78868: LD_VAR 0 1
78872: PPUSH
78873: CALL_OW 302
78877: NOT
78878: IFTRUE 78897
78880: PUSH
78881: LD_VAR 0 2
78885: PPUSH
78886: LD_VAR 0 3
78890: PPUSH
78891: CALL_OW 488
78895: NOT
78896: OR
78897: IFTRUE 78906
78899: PUSH
78900: LD_VAR 0 4
78904: NOT
78905: OR
78906: IFFALSE 78910
// exit ;
78908: GO 79427
// list := [ ] ;
78910: LD_ADDR_VAR 0 13
78914: PUSH
78915: EMPTY
78916: ST_TO_ADDR
// if x - r < 0 then
78917: LD_VAR 0 2
78921: PUSH
78922: LD_VAR 0 4
78926: MINUS
78927: PUSH
78928: LD_INT 0
78930: LESS
78931: IFFALSE 78943
// min_x := 0 else
78933: LD_ADDR_VAR 0 7
78937: PUSH
78938: LD_INT 0
78940: ST_TO_ADDR
78941: GO 78959
// min_x := x - r ;
78943: LD_ADDR_VAR 0 7
78947: PUSH
78948: LD_VAR 0 2
78952: PUSH
78953: LD_VAR 0 4
78957: MINUS
78958: ST_TO_ADDR
// if y - r < 0 then
78959: LD_VAR 0 3
78963: PUSH
78964: LD_VAR 0 4
78968: MINUS
78969: PUSH
78970: LD_INT 0
78972: LESS
78973: IFFALSE 78985
// min_y := 0 else
78975: LD_ADDR_VAR 0 8
78979: PUSH
78980: LD_INT 0
78982: ST_TO_ADDR
78983: GO 79001
// min_y := y - r ;
78985: LD_ADDR_VAR 0 8
78989: PUSH
78990: LD_VAR 0 3
78994: PUSH
78995: LD_VAR 0 4
78999: MINUS
79000: ST_TO_ADDR
// max_x := x + r ;
79001: LD_ADDR_VAR 0 9
79005: PUSH
79006: LD_VAR 0 2
79010: PUSH
79011: LD_VAR 0 4
79015: PLUS
79016: ST_TO_ADDR
// max_y := y + r ;
79017: LD_ADDR_VAR 0 10
79021: PUSH
79022: LD_VAR 0 3
79026: PUSH
79027: LD_VAR 0 4
79031: PLUS
79032: ST_TO_ADDR
// for _x = min_x to max_x do
79033: LD_ADDR_VAR 0 11
79037: PUSH
79038: DOUBLE
79039: LD_VAR 0 7
79043: DEC
79044: ST_TO_ADDR
79045: LD_VAR 0 9
79049: PUSH
79050: FOR_TO
79051: IFFALSE 79170
// for _y = min_y to max_y do
79053: LD_ADDR_VAR 0 12
79057: PUSH
79058: DOUBLE
79059: LD_VAR 0 8
79063: DEC
79064: ST_TO_ADDR
79065: LD_VAR 0 10
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79166
// begin if not ValidHex ( _x , _y ) then
79073: LD_VAR 0 11
79077: PPUSH
79078: LD_VAR 0 12
79082: PPUSH
79083: CALL_OW 488
79087: NOT
79088: IFFALSE 79092
// continue ;
79090: GO 79070
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
79092: LD_VAR 0 11
79096: PPUSH
79097: LD_VAR 0 12
79101: PPUSH
79102: CALL_OW 351
79106: IFFALSE 79124
79108: PUSH
79109: LD_VAR 0 11
79113: PPUSH
79114: LD_VAR 0 12
79118: PPUSH
79119: CALL_OW 554
79123: AND
79124: IFFALSE 79164
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
79126: LD_ADDR_VAR 0 13
79130: PUSH
79131: LD_VAR 0 13
79135: PPUSH
79136: LD_VAR 0 13
79140: PUSH
79141: LD_INT 1
79143: PLUS
79144: PPUSH
79145: LD_VAR 0 11
79149: PUSH
79150: LD_VAR 0 12
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: PPUSH
79159: CALL_OW 2
79163: ST_TO_ADDR
// end ;
79164: GO 79070
79166: POP
79167: POP
79168: GO 79050
79170: POP
79171: POP
// if not list then
79172: LD_VAR 0 13
79176: NOT
79177: IFFALSE 79181
// exit ;
79179: GO 79427
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
79181: LD_ADDR_VAR 0 13
79185: PUSH
79186: LD_VAR 0 1
79190: PPUSH
79191: LD_VAR 0 13
79195: PPUSH
79196: LD_INT 1
79198: PPUSH
79199: LD_INT 1
79201: PPUSH
79202: CALL 23142 0 4
79206: ST_TO_ADDR
// ComStop ( flame ) ;
79207: LD_VAR 0 1
79211: PPUSH
79212: CALL_OW 141
// for i in list do
79216: LD_ADDR_VAR 0 6
79220: PUSH
79221: LD_VAR 0 13
79225: PUSH
79226: FOR_IN
79227: IFFALSE 79258
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
79229: LD_VAR 0 1
79233: PPUSH
79234: LD_VAR 0 6
79238: PUSH
79239: LD_INT 1
79241: ARRAY
79242: PPUSH
79243: LD_VAR 0 6
79247: PUSH
79248: LD_INT 2
79250: ARRAY
79251: PPUSH
79252: CALL_OW 176
79256: GO 79226
79258: POP
79259: POP
// repeat wait ( 0 0$1 ) ;
79260: LD_INT 35
79262: PPUSH
79263: CALL_OW 67
// task := GetTaskList ( flame ) ;
79267: LD_ADDR_VAR 0 14
79271: PUSH
79272: LD_VAR 0 1
79276: PPUSH
79277: CALL_OW 437
79281: ST_TO_ADDR
// if not task then
79282: LD_VAR 0 14
79286: NOT
79287: IFFALSE 79291
// exit ;
79289: GO 79427
// if task [ 1 ] [ 1 ] <> | then
79291: LD_VAR 0 14
79295: PUSH
79296: LD_INT 1
79298: ARRAY
79299: PUSH
79300: LD_INT 1
79302: ARRAY
79303: PUSH
79304: LD_STRING |
79306: NONEQUAL
79307: IFFALSE 79311
// exit ;
79309: GO 79427
// _x := task [ 1 ] [ 2 ] ;
79311: LD_ADDR_VAR 0 11
79315: PUSH
79316: LD_VAR 0 14
79320: PUSH
79321: LD_INT 1
79323: ARRAY
79324: PUSH
79325: LD_INT 2
79327: ARRAY
79328: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
79329: LD_ADDR_VAR 0 12
79333: PUSH
79334: LD_VAR 0 14
79338: PUSH
79339: LD_INT 1
79341: ARRAY
79342: PUSH
79343: LD_INT 3
79345: ARRAY
79346: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
79347: LD_VAR 0 11
79351: PPUSH
79352: LD_VAR 0 12
79356: PPUSH
79357: CALL_OW 351
79361: NOT
79362: IFTRUE 79381
79364: PUSH
79365: LD_VAR 0 11
79369: PPUSH
79370: LD_VAR 0 12
79374: PPUSH
79375: CALL_OW 554
79379: NOT
79380: OR
79381: IFFALSE 79415
// begin task := Delete ( task , 1 ) ;
79383: LD_ADDR_VAR 0 14
79387: PUSH
79388: LD_VAR 0 14
79392: PPUSH
79393: LD_INT 1
79395: PPUSH
79396: CALL_OW 3
79400: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
79401: LD_VAR 0 1
79405: PPUSH
79406: LD_VAR 0 14
79410: PPUSH
79411: CALL_OW 446
// end ; until not HasTask ( flame ) ;
79415: LD_VAR 0 1
79419: PPUSH
79420: CALL_OW 314
79424: NOT
79425: IFFALSE 79260
// end ;
79427: LD_VAR 0 5
79431: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
79432: LD_EXP 113
79436: NOT
79437: IFFALSE 79487
79439: GO 79441
79441: DISABLE
// begin initHack := true ;
79442: LD_ADDR_EXP 113
79446: PUSH
79447: LD_INT 1
79449: ST_TO_ADDR
// hackTanks := [ ] ;
79450: LD_ADDR_EXP 114
79454: PUSH
79455: EMPTY
79456: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
79457: LD_ADDR_EXP 115
79461: PUSH
79462: EMPTY
79463: ST_TO_ADDR
// hackLimit := 3 ;
79464: LD_ADDR_EXP 116
79468: PUSH
79469: LD_INT 3
79471: ST_TO_ADDR
// hackDist := 12 ;
79472: LD_ADDR_EXP 117
79476: PUSH
79477: LD_INT 12
79479: ST_TO_ADDR
// hackCounter := [ ] ;
79480: LD_ADDR_EXP 118
79484: PUSH
79485: EMPTY
79486: ST_TO_ADDR
// end ;
79487: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
79488: LD_EXP 113
79492: IFFALSE 79510
79494: PUSH
79495: LD_INT 34
79497: PUSH
79498: LD_INT 99
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PPUSH
79505: CALL_OW 69
79509: AND
79510: IFFALSE 79763
79512: GO 79514
79514: DISABLE
79515: LD_INT 0
79517: PPUSH
79518: PPUSH
// begin enable ;
79519: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
79520: LD_ADDR_VAR 0 1
79524: PUSH
79525: LD_INT 34
79527: PUSH
79528: LD_INT 99
79530: PUSH
79531: EMPTY
79532: LIST
79533: LIST
79534: PPUSH
79535: CALL_OW 69
79539: PUSH
79540: FOR_IN
79541: IFFALSE 79761
// begin if not i in hackTanks then
79543: LD_VAR 0 1
79547: PUSH
79548: LD_EXP 114
79552: IN
79553: NOT
79554: IFFALSE 79637
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
79556: LD_ADDR_EXP 114
79560: PUSH
79561: LD_EXP 114
79565: PPUSH
79566: LD_EXP 114
79570: PUSH
79571: LD_INT 1
79573: PLUS
79574: PPUSH
79575: LD_VAR 0 1
79579: PPUSH
79580: CALL_OW 1
79584: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
79585: LD_ADDR_EXP 115
79589: PUSH
79590: LD_EXP 115
79594: PPUSH
79595: LD_EXP 115
79599: PUSH
79600: LD_INT 1
79602: PLUS
79603: PPUSH
79604: EMPTY
79605: PPUSH
79606: CALL_OW 1
79610: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
79611: LD_ADDR_EXP 118
79615: PUSH
79616: LD_EXP 118
79620: PPUSH
79621: LD_EXP 118
79625: PUSH
79626: LD_INT 1
79628: PLUS
79629: PPUSH
79630: EMPTY
79631: PPUSH
79632: CALL_OW 1
79636: ST_TO_ADDR
// end ; if not IsOk ( i ) then
79637: LD_VAR 0 1
79641: PPUSH
79642: CALL_OW 302
79646: NOT
79647: IFFALSE 79660
// begin HackUnlinkAll ( i ) ;
79649: LD_VAR 0 1
79653: PPUSH
79654: CALL 79766 0 1
// continue ;
79658: GO 79540
// end ; HackCheckCapturedStatus ( i ) ;
79660: LD_VAR 0 1
79664: PPUSH
79665: CALL 80211 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
79669: LD_ADDR_VAR 0 2
79673: PUSH
79674: LD_INT 81
79676: PUSH
79677: LD_VAR 0 1
79681: PPUSH
79682: CALL_OW 255
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: PUSH
79691: LD_INT 33
79693: PUSH
79694: LD_INT 3
79696: PUSH
79697: EMPTY
79698: LIST
79699: LIST
79700: PUSH
79701: LD_INT 91
79703: PUSH
79704: LD_VAR 0 1
79708: PUSH
79709: LD_EXP 117
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: LIST
79718: PUSH
79719: LD_INT 50
79721: PUSH
79722: EMPTY
79723: LIST
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: LIST
79729: LIST
79730: PPUSH
79731: CALL_OW 69
79735: ST_TO_ADDR
// if not tmp then
79736: LD_VAR 0 2
79740: NOT
79741: IFFALSE 79745
// continue ;
79743: GO 79540
// HackLink ( i , tmp ) ;
79745: LD_VAR 0 1
79749: PPUSH
79750: LD_VAR 0 2
79754: PPUSH
79755: CALL 79902 0 2
// end ;
79759: GO 79540
79761: POP
79762: POP
// end ;
79763: PPOPN 2
79765: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
79766: LD_INT 0
79768: PPUSH
79769: PPUSH
79770: PPUSH
// if not hack in hackTanks then
79771: LD_VAR 0 1
79775: PUSH
79776: LD_EXP 114
79780: IN
79781: NOT
79782: IFFALSE 79786
// exit ;
79784: GO 79897
// index := GetElementIndex ( hackTanks , hack ) ;
79786: LD_ADDR_VAR 0 4
79790: PUSH
79791: LD_EXP 114
79795: PPUSH
79796: LD_VAR 0 1
79800: PPUSH
79801: CALL 22437 0 2
79805: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
79806: LD_EXP 115
79810: PUSH
79811: LD_VAR 0 4
79815: ARRAY
79816: IFFALSE 79897
// begin for i in hackTanksCaptured [ index ] do
79818: LD_ADDR_VAR 0 3
79822: PUSH
79823: LD_EXP 115
79827: PUSH
79828: LD_VAR 0 4
79832: ARRAY
79833: PUSH
79834: FOR_IN
79835: IFFALSE 79861
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
79837: LD_VAR 0 3
79841: PUSH
79842: LD_INT 1
79844: ARRAY
79845: PPUSH
79846: LD_VAR 0 3
79850: PUSH
79851: LD_INT 2
79853: ARRAY
79854: PPUSH
79855: CALL_OW 235
79859: GO 79834
79861: POP
79862: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
79863: LD_ADDR_EXP 115
79867: PUSH
79868: LD_EXP 115
79872: PPUSH
79873: LD_VAR 0 4
79877: PPUSH
79878: EMPTY
79879: PPUSH
79880: CALL_OW 1
79884: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
79885: LD_VAR 0 1
79889: PPUSH
79890: LD_INT 0
79892: PPUSH
79893: CALL_OW 505
// end ; end ;
79897: LD_VAR 0 2
79901: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
79902: LD_INT 0
79904: PPUSH
79905: PPUSH
79906: PPUSH
// if not hack in hackTanks or not vehicles then
79907: LD_VAR 0 1
79911: PUSH
79912: LD_EXP 114
79916: IN
79917: NOT
79918: IFTRUE 79927
79920: PUSH
79921: LD_VAR 0 2
79925: NOT
79926: OR
79927: IFFALSE 79931
// exit ;
79929: GO 80206
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
79931: LD_ADDR_VAR 0 2
79935: PUSH
79936: LD_VAR 0 1
79940: PPUSH
79941: LD_VAR 0 2
79945: PPUSH
79946: LD_INT 1
79948: PPUSH
79949: LD_INT 1
79951: PPUSH
79952: CALL 23089 0 4
79956: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
79957: LD_ADDR_VAR 0 5
79961: PUSH
79962: LD_EXP 114
79966: PPUSH
79967: LD_VAR 0 1
79971: PPUSH
79972: CALL 22437 0 2
79976: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
79977: LD_EXP 115
79981: PUSH
79982: LD_VAR 0 5
79986: ARRAY
79987: PUSH
79988: LD_EXP 116
79992: LESS
79993: IFFALSE 80182
// begin for i := 1 to vehicles do
79995: LD_ADDR_VAR 0 4
79999: PUSH
80000: DOUBLE
80001: LD_INT 1
80003: DEC
80004: ST_TO_ADDR
80005: LD_VAR 0 2
80009: PUSH
80010: FOR_TO
80011: IFFALSE 80180
// begin if hackTanksCaptured [ index ] = hackLimit then
80013: LD_EXP 115
80017: PUSH
80018: LD_VAR 0 5
80022: ARRAY
80023: PUSH
80024: LD_EXP 116
80028: EQUAL
80029: IFFALSE 80033
// break ;
80031: GO 80180
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
80033: LD_ADDR_EXP 118
80037: PUSH
80038: LD_EXP 118
80042: PPUSH
80043: LD_VAR 0 5
80047: PPUSH
80048: LD_EXP 118
80052: PUSH
80053: LD_VAR 0 5
80057: ARRAY
80058: PUSH
80059: LD_INT 1
80061: PLUS
80062: PPUSH
80063: CALL_OW 1
80067: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
80068: LD_ADDR_EXP 115
80072: PUSH
80073: LD_EXP 115
80077: PPUSH
80078: LD_VAR 0 5
80082: PUSH
80083: LD_EXP 115
80087: PUSH
80088: LD_VAR 0 5
80092: ARRAY
80093: PUSH
80094: LD_INT 1
80096: PLUS
80097: PUSH
80098: EMPTY
80099: LIST
80100: LIST
80101: PPUSH
80102: LD_VAR 0 2
80106: PUSH
80107: LD_VAR 0 4
80111: ARRAY
80112: PUSH
80113: LD_VAR 0 2
80117: PUSH
80118: LD_VAR 0 4
80122: ARRAY
80123: PPUSH
80124: CALL_OW 255
80128: PUSH
80129: EMPTY
80130: LIST
80131: LIST
80132: PPUSH
80133: CALL 22654 0 3
80137: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
80138: LD_VAR 0 2
80142: PUSH
80143: LD_VAR 0 4
80147: ARRAY
80148: PPUSH
80149: LD_VAR 0 1
80153: PPUSH
80154: CALL_OW 255
80158: PPUSH
80159: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
80163: LD_VAR 0 2
80167: PUSH
80168: LD_VAR 0 4
80172: ARRAY
80173: PPUSH
80174: CALL_OW 141
// end ;
80178: GO 80010
80180: POP
80181: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80182: LD_VAR 0 1
80186: PPUSH
80187: LD_EXP 115
80191: PUSH
80192: LD_VAR 0 5
80196: ARRAY
80197: PUSH
80198: LD_INT 0
80200: PLUS
80201: PPUSH
80202: CALL_OW 505
// end ;
80206: LD_VAR 0 3
80210: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
80211: LD_INT 0
80213: PPUSH
80214: PPUSH
80215: PPUSH
80216: PPUSH
// if not hack in hackTanks then
80217: LD_VAR 0 1
80221: PUSH
80222: LD_EXP 114
80226: IN
80227: NOT
80228: IFFALSE 80232
// exit ;
80230: GO 80476
// index := GetElementIndex ( hackTanks , hack ) ;
80232: LD_ADDR_VAR 0 4
80236: PUSH
80237: LD_EXP 114
80241: PPUSH
80242: LD_VAR 0 1
80246: PPUSH
80247: CALL 22437 0 2
80251: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
80252: LD_ADDR_VAR 0 3
80256: PUSH
80257: DOUBLE
80258: LD_EXP 115
80262: PUSH
80263: LD_VAR 0 4
80267: ARRAY
80268: INC
80269: ST_TO_ADDR
80270: LD_INT 1
80272: PUSH
80273: FOR_DOWNTO
80274: IFFALSE 80450
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
80276: LD_ADDR_VAR 0 5
80280: PUSH
80281: LD_EXP 115
80285: PUSH
80286: LD_VAR 0 4
80290: ARRAY
80291: PUSH
80292: LD_VAR 0 3
80296: ARRAY
80297: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
80298: LD_VAR 0 5
80302: PUSH
80303: LD_INT 1
80305: ARRAY
80306: PPUSH
80307: CALL_OW 302
80311: NOT
80312: IFTRUE 80340
80314: PUSH
80315: LD_VAR 0 5
80319: PUSH
80320: LD_INT 1
80322: ARRAY
80323: PPUSH
80324: CALL_OW 255
80328: PUSH
80329: LD_VAR 0 1
80333: PPUSH
80334: CALL_OW 255
80338: NONEQUAL
80339: OR
80340: IFFALSE 80448
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
80342: LD_VAR 0 5
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PPUSH
80351: CALL_OW 305
80355: IFFALSE 80383
80357: PUSH
80358: LD_VAR 0 5
80362: PUSH
80363: LD_INT 1
80365: ARRAY
80366: PPUSH
80367: CALL_OW 255
80371: PUSH
80372: LD_VAR 0 1
80376: PPUSH
80377: CALL_OW 255
80381: EQUAL
80382: AND
80383: IFFALSE 80407
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
80385: LD_VAR 0 5
80389: PUSH
80390: LD_INT 1
80392: ARRAY
80393: PPUSH
80394: LD_VAR 0 5
80398: PUSH
80399: LD_INT 2
80401: ARRAY
80402: PPUSH
80403: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
80407: LD_ADDR_EXP 115
80411: PUSH
80412: LD_EXP 115
80416: PPUSH
80417: LD_VAR 0 4
80421: PPUSH
80422: LD_EXP 115
80426: PUSH
80427: LD_VAR 0 4
80431: ARRAY
80432: PPUSH
80433: LD_VAR 0 3
80437: PPUSH
80438: CALL_OW 3
80442: PPUSH
80443: CALL_OW 1
80447: ST_TO_ADDR
// end ; end ;
80448: GO 80273
80450: POP
80451: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
80452: LD_VAR 0 1
80456: PPUSH
80457: LD_EXP 115
80461: PUSH
80462: LD_VAR 0 4
80466: ARRAY
80467: PUSH
80468: LD_INT 0
80470: PLUS
80471: PPUSH
80472: CALL_OW 505
// end ;
80476: LD_VAR 0 2
80480: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
80481: LD_INT 0
80483: PPUSH
80484: PPUSH
80485: PPUSH
80486: PPUSH
// if not hack in hackTanks then
80487: LD_VAR 0 1
80491: PUSH
80492: LD_EXP 114
80496: IN
80497: NOT
80498: IFFALSE 80502
// exit ;
80500: GO 80587
// index := GetElementIndex ( hackTanks , hack ) ;
80502: LD_ADDR_VAR 0 5
80506: PUSH
80507: LD_EXP 114
80511: PPUSH
80512: LD_VAR 0 1
80516: PPUSH
80517: CALL 22437 0 2
80521: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
80522: LD_ADDR_VAR 0 4
80526: PUSH
80527: DOUBLE
80528: LD_INT 1
80530: DEC
80531: ST_TO_ADDR
80532: LD_EXP 115
80536: PUSH
80537: LD_VAR 0 5
80541: ARRAY
80542: PUSH
80543: FOR_TO
80544: IFFALSE 80585
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
80546: LD_EXP 115
80550: PUSH
80551: LD_VAR 0 5
80555: ARRAY
80556: PUSH
80557: LD_VAR 0 4
80561: ARRAY
80562: PUSH
80563: LD_INT 1
80565: ARRAY
80566: PUSH
80567: LD_VAR 0 2
80571: EQUAL
80572: IFFALSE 80583
// KillUnit ( vehicle ) ;
80574: LD_VAR 0 2
80578: PPUSH
80579: CALL_OW 66
80583: GO 80543
80585: POP
80586: POP
// end ;
80587: LD_VAR 0 3
80591: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
80592: LD_EXP 119
80596: NOT
80597: IFFALSE 80632
80599: GO 80601
80601: DISABLE
// begin initMiner := true ;
80602: LD_ADDR_EXP 119
80606: PUSH
80607: LD_INT 1
80609: ST_TO_ADDR
// minersList := [ ] ;
80610: LD_ADDR_EXP 120
80614: PUSH
80615: EMPTY
80616: ST_TO_ADDR
// minerMinesList := [ ] ;
80617: LD_ADDR_EXP 121
80621: PUSH
80622: EMPTY
80623: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
80624: LD_ADDR_EXP 122
80628: PUSH
80629: LD_INT 5
80631: ST_TO_ADDR
// end ;
80632: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
80633: LD_EXP 119
80637: IFFALSE 80655
80639: PUSH
80640: LD_INT 34
80642: PUSH
80643: LD_INT 81
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PPUSH
80650: CALL_OW 69
80654: AND
80655: IFFALSE 81118
80657: GO 80659
80659: DISABLE
80660: LD_INT 0
80662: PPUSH
80663: PPUSH
80664: PPUSH
80665: PPUSH
// begin enable ;
80666: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
80667: LD_ADDR_VAR 0 1
80671: PUSH
80672: LD_INT 34
80674: PUSH
80675: LD_INT 81
80677: PUSH
80678: EMPTY
80679: LIST
80680: LIST
80681: PPUSH
80682: CALL_OW 69
80686: PUSH
80687: FOR_IN
80688: IFFALSE 80760
// begin if not i in minersList then
80690: LD_VAR 0 1
80694: PUSH
80695: LD_EXP 120
80699: IN
80700: NOT
80701: IFFALSE 80758
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
80703: LD_ADDR_EXP 120
80707: PUSH
80708: LD_EXP 120
80712: PPUSH
80713: LD_EXP 120
80717: PUSH
80718: LD_INT 1
80720: PLUS
80721: PPUSH
80722: LD_VAR 0 1
80726: PPUSH
80727: CALL_OW 1
80731: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
80732: LD_ADDR_EXP 121
80736: PUSH
80737: LD_EXP 121
80741: PPUSH
80742: LD_EXP 121
80746: PUSH
80747: LD_INT 1
80749: PLUS
80750: PPUSH
80751: EMPTY
80752: PPUSH
80753: CALL_OW 1
80757: ST_TO_ADDR
// end end ;
80758: GO 80687
80760: POP
80761: POP
// for i := minerMinesList downto 1 do
80762: LD_ADDR_VAR 0 1
80766: PUSH
80767: DOUBLE
80768: LD_EXP 121
80772: INC
80773: ST_TO_ADDR
80774: LD_INT 1
80776: PUSH
80777: FOR_DOWNTO
80778: IFFALSE 81116
// begin if IsLive ( minersList [ i ] ) then
80780: LD_EXP 120
80784: PUSH
80785: LD_VAR 0 1
80789: ARRAY
80790: PPUSH
80791: CALL_OW 300
80795: IFFALSE 80823
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
80797: LD_EXP 120
80801: PUSH
80802: LD_VAR 0 1
80806: ARRAY
80807: PPUSH
80808: LD_EXP 121
80812: PUSH
80813: LD_VAR 0 1
80817: ARRAY
80818: PPUSH
80819: CALL_OW 505
// if not minerMinesList [ i ] then
80823: LD_EXP 121
80827: PUSH
80828: LD_VAR 0 1
80832: ARRAY
80833: NOT
80834: IFFALSE 80838
// continue ;
80836: GO 80777
// for j := minerMinesList [ i ] downto 1 do
80838: LD_ADDR_VAR 0 2
80842: PUSH
80843: DOUBLE
80844: LD_EXP 121
80848: PUSH
80849: LD_VAR 0 1
80853: ARRAY
80854: INC
80855: ST_TO_ADDR
80856: LD_INT 1
80858: PUSH
80859: FOR_DOWNTO
80860: IFFALSE 81112
// begin side := GetSide ( minersList [ i ] ) ;
80862: LD_ADDR_VAR 0 3
80866: PUSH
80867: LD_EXP 120
80871: PUSH
80872: LD_VAR 0 1
80876: ARRAY
80877: PPUSH
80878: CALL_OW 255
80882: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
80883: LD_ADDR_VAR 0 4
80887: PUSH
80888: LD_EXP 121
80892: PUSH
80893: LD_VAR 0 1
80897: ARRAY
80898: PUSH
80899: LD_VAR 0 2
80903: ARRAY
80904: PUSH
80905: LD_INT 1
80907: ARRAY
80908: PPUSH
80909: LD_EXP 121
80913: PUSH
80914: LD_VAR 0 1
80918: ARRAY
80919: PUSH
80920: LD_VAR 0 2
80924: ARRAY
80925: PUSH
80926: LD_INT 2
80928: ARRAY
80929: PPUSH
80930: CALL_OW 428
80934: ST_TO_ADDR
// if not tmp then
80935: LD_VAR 0 4
80939: NOT
80940: IFFALSE 80944
// continue ;
80942: GO 80859
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
80944: LD_VAR 0 4
80948: PUSH
80949: LD_INT 81
80951: PUSH
80952: LD_VAR 0 3
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: PPUSH
80961: CALL_OW 69
80965: IN
80966: IFFALSE 81016
80968: PUSH
80969: LD_EXP 121
80973: PUSH
80974: LD_VAR 0 1
80978: ARRAY
80979: PUSH
80980: LD_VAR 0 2
80984: ARRAY
80985: PUSH
80986: LD_INT 1
80988: ARRAY
80989: PPUSH
80990: LD_EXP 121
80994: PUSH
80995: LD_VAR 0 1
80999: ARRAY
81000: PUSH
81001: LD_VAR 0 2
81005: ARRAY
81006: PUSH
81007: LD_INT 2
81009: ARRAY
81010: PPUSH
81011: CALL_OW 458
81015: AND
81016: IFFALSE 81110
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
81018: LD_EXP 121
81022: PUSH
81023: LD_VAR 0 1
81027: ARRAY
81028: PUSH
81029: LD_VAR 0 2
81033: ARRAY
81034: PUSH
81035: LD_INT 1
81037: ARRAY
81038: PPUSH
81039: LD_EXP 121
81043: PUSH
81044: LD_VAR 0 1
81048: ARRAY
81049: PUSH
81050: LD_VAR 0 2
81054: ARRAY
81055: PUSH
81056: LD_INT 2
81058: ARRAY
81059: PPUSH
81060: LD_VAR 0 3
81064: PPUSH
81065: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
81069: LD_ADDR_EXP 121
81073: PUSH
81074: LD_EXP 121
81078: PPUSH
81079: LD_VAR 0 1
81083: PPUSH
81084: LD_EXP 121
81088: PUSH
81089: LD_VAR 0 1
81093: ARRAY
81094: PPUSH
81095: LD_VAR 0 2
81099: PPUSH
81100: CALL_OW 3
81104: PPUSH
81105: CALL_OW 1
81109: ST_TO_ADDR
// end ; end ;
81110: GO 80859
81112: POP
81113: POP
// end ;
81114: GO 80777
81116: POP
81117: POP
// end ;
81118: PPOPN 4
81120: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
81121: LD_INT 0
81123: PPUSH
81124: PPUSH
// result := false ;
81125: LD_ADDR_VAR 0 4
81129: PUSH
81130: LD_INT 0
81132: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
81133: LD_VAR 0 1
81137: PPUSH
81138: CALL_OW 264
81142: PUSH
81143: LD_INT 81
81145: EQUAL
81146: NOT
81147: IFFALSE 81151
// exit ;
81149: GO 81395
// index := GetElementIndex ( minersList , unit ) ;
81151: LD_ADDR_VAR 0 5
81155: PUSH
81156: LD_EXP 120
81160: PPUSH
81161: LD_VAR 0 1
81165: PPUSH
81166: CALL 22437 0 2
81170: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
81171: LD_EXP 121
81175: PUSH
81176: LD_VAR 0 5
81180: ARRAY
81181: PUSH
81182: LD_EXP 122
81186: GREATEREQUAL
81187: IFFALSE 81191
// exit ;
81189: GO 81395
// ComMoveXY ( unit , x , y ) ;
81191: LD_VAR 0 1
81195: PPUSH
81196: LD_VAR 0 2
81200: PPUSH
81201: LD_VAR 0 3
81205: PPUSH
81206: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
81210: LD_INT 35
81212: PPUSH
81213: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
81217: LD_VAR 0 1
81221: PPUSH
81222: LD_VAR 0 2
81226: PPUSH
81227: LD_VAR 0 3
81231: PPUSH
81232: CALL 54483 0 3
81236: NOT
81237: IFFALSE 81250
81239: PUSH
81240: LD_VAR 0 1
81244: PPUSH
81245: CALL_OW 314
81249: AND
81250: IFFALSE 81254
// exit ;
81252: GO 81395
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
81254: LD_VAR 0 2
81258: PPUSH
81259: LD_VAR 0 3
81263: PPUSH
81264: CALL_OW 428
81268: PUSH
81269: LD_VAR 0 1
81273: EQUAL
81274: IFFALSE 81288
81276: PUSH
81277: LD_VAR 0 1
81281: PPUSH
81282: CALL_OW 314
81286: NOT
81287: AND
81288: IFFALSE 81210
// PlaySoundXY ( x , y , PlantMine ) ;
81290: LD_VAR 0 2
81294: PPUSH
81295: LD_VAR 0 3
81299: PPUSH
81300: LD_STRING PlantMine
81302: PPUSH
81303: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
81307: LD_VAR 0 2
81311: PPUSH
81312: LD_VAR 0 3
81316: PPUSH
81317: LD_VAR 0 1
81321: PPUSH
81322: CALL_OW 255
81326: PPUSH
81327: LD_INT 0
81329: PPUSH
81330: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
81334: LD_ADDR_EXP 121
81338: PUSH
81339: LD_EXP 121
81343: PPUSH
81344: LD_VAR 0 5
81348: PUSH
81349: LD_EXP 121
81353: PUSH
81354: LD_VAR 0 5
81358: ARRAY
81359: PUSH
81360: LD_INT 1
81362: PLUS
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: PPUSH
81368: LD_VAR 0 2
81372: PUSH
81373: LD_VAR 0 3
81377: PUSH
81378: EMPTY
81379: LIST
81380: LIST
81381: PPUSH
81382: CALL 22654 0 3
81386: ST_TO_ADDR
// result := true ;
81387: LD_ADDR_VAR 0 4
81391: PUSH
81392: LD_INT 1
81394: ST_TO_ADDR
// end ;
81395: LD_VAR 0 4
81399: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
81400: LD_INT 0
81402: PPUSH
81403: PPUSH
81404: PPUSH
// if not unit in minersList then
81405: LD_VAR 0 1
81409: PUSH
81410: LD_EXP 120
81414: IN
81415: NOT
81416: IFFALSE 81420
// exit ;
81418: GO 81814
// index := GetElementIndex ( minersList , unit ) ;
81420: LD_ADDR_VAR 0 6
81424: PUSH
81425: LD_EXP 120
81429: PPUSH
81430: LD_VAR 0 1
81434: PPUSH
81435: CALL 22437 0 2
81439: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
81440: LD_ADDR_VAR 0 5
81444: PUSH
81445: DOUBLE
81446: LD_EXP 121
81450: PUSH
81451: LD_VAR 0 6
81455: ARRAY
81456: INC
81457: ST_TO_ADDR
81458: LD_INT 1
81460: PUSH
81461: FOR_DOWNTO
81462: IFFALSE 81625
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
81464: LD_EXP 121
81468: PUSH
81469: LD_VAR 0 6
81473: ARRAY
81474: PUSH
81475: LD_VAR 0 5
81479: ARRAY
81480: PUSH
81481: LD_INT 1
81483: ARRAY
81484: PUSH
81485: LD_VAR 0 2
81489: EQUAL
81490: IFFALSE 81520
81492: PUSH
81493: LD_EXP 121
81497: PUSH
81498: LD_VAR 0 6
81502: ARRAY
81503: PUSH
81504: LD_VAR 0 5
81508: ARRAY
81509: PUSH
81510: LD_INT 2
81512: ARRAY
81513: PUSH
81514: LD_VAR 0 3
81518: EQUAL
81519: AND
81520: IFFALSE 81623
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81522: LD_EXP 121
81526: PUSH
81527: LD_VAR 0 6
81531: ARRAY
81532: PUSH
81533: LD_VAR 0 5
81537: ARRAY
81538: PUSH
81539: LD_INT 1
81541: ARRAY
81542: PPUSH
81543: LD_EXP 121
81547: PUSH
81548: LD_VAR 0 6
81552: ARRAY
81553: PUSH
81554: LD_VAR 0 5
81558: ARRAY
81559: PUSH
81560: LD_INT 2
81562: ARRAY
81563: PPUSH
81564: LD_VAR 0 1
81568: PPUSH
81569: CALL_OW 255
81573: PPUSH
81574: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81578: LD_ADDR_EXP 121
81582: PUSH
81583: LD_EXP 121
81587: PPUSH
81588: LD_VAR 0 6
81592: PPUSH
81593: LD_EXP 121
81597: PUSH
81598: LD_VAR 0 6
81602: ARRAY
81603: PPUSH
81604: LD_VAR 0 5
81608: PPUSH
81609: CALL_OW 3
81613: PPUSH
81614: CALL_OW 1
81618: ST_TO_ADDR
// exit ;
81619: POP
81620: POP
81621: GO 81814
// end ; end ;
81623: GO 81461
81625: POP
81626: POP
// for i := minerMinesList [ index ] downto 1 do
81627: LD_ADDR_VAR 0 5
81631: PUSH
81632: DOUBLE
81633: LD_EXP 121
81637: PUSH
81638: LD_VAR 0 6
81642: ARRAY
81643: INC
81644: ST_TO_ADDR
81645: LD_INT 1
81647: PUSH
81648: FOR_DOWNTO
81649: IFFALSE 81812
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
81651: LD_EXP 121
81655: PUSH
81656: LD_VAR 0 6
81660: ARRAY
81661: PUSH
81662: LD_VAR 0 5
81666: ARRAY
81667: PUSH
81668: LD_INT 1
81670: ARRAY
81671: PPUSH
81672: LD_EXP 121
81676: PUSH
81677: LD_VAR 0 6
81681: ARRAY
81682: PUSH
81683: LD_VAR 0 5
81687: ARRAY
81688: PUSH
81689: LD_INT 2
81691: ARRAY
81692: PPUSH
81693: LD_VAR 0 2
81697: PPUSH
81698: LD_VAR 0 3
81702: PPUSH
81703: CALL_OW 298
81707: PUSH
81708: LD_INT 6
81710: LESS
81711: IFFALSE 81810
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
81713: LD_EXP 121
81717: PUSH
81718: LD_VAR 0 6
81722: ARRAY
81723: PUSH
81724: LD_VAR 0 5
81728: ARRAY
81729: PUSH
81730: LD_INT 1
81732: ARRAY
81733: PPUSH
81734: LD_EXP 121
81738: PUSH
81739: LD_VAR 0 6
81743: ARRAY
81744: PUSH
81745: LD_VAR 0 5
81749: ARRAY
81750: PUSH
81751: LD_INT 2
81753: ARRAY
81754: PPUSH
81755: LD_VAR 0 1
81759: PPUSH
81760: CALL_OW 255
81764: PPUSH
81765: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
81769: LD_ADDR_EXP 121
81773: PUSH
81774: LD_EXP 121
81778: PPUSH
81779: LD_VAR 0 6
81783: PPUSH
81784: LD_EXP 121
81788: PUSH
81789: LD_VAR 0 6
81793: ARRAY
81794: PPUSH
81795: LD_VAR 0 5
81799: PPUSH
81800: CALL_OW 3
81804: PPUSH
81805: CALL_OW 1
81809: ST_TO_ADDR
// end ; end ;
81810: GO 81648
81812: POP
81813: POP
// end ;
81814: LD_VAR 0 4
81818: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
81819: LD_INT 0
81821: PPUSH
81822: PPUSH
81823: PPUSH
81824: PPUSH
81825: PPUSH
81826: PPUSH
81827: PPUSH
81828: PPUSH
81829: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
81830: LD_VAR 0 1
81834: PPUSH
81835: CALL_OW 264
81839: PUSH
81840: LD_INT 81
81842: EQUAL
81843: NOT
81844: IFTRUE 81859
81846: PUSH
81847: LD_VAR 0 1
81851: PUSH
81852: LD_EXP 120
81856: IN
81857: NOT
81858: OR
81859: IFFALSE 81863
// exit ;
81861: GO 82189
// index := GetElementIndex ( minersList , unit ) ;
81863: LD_ADDR_VAR 0 6
81867: PUSH
81868: LD_EXP 120
81872: PPUSH
81873: LD_VAR 0 1
81877: PPUSH
81878: CALL 22437 0 2
81882: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
81883: LD_ADDR_VAR 0 8
81887: PUSH
81888: LD_EXP 122
81892: PUSH
81893: LD_EXP 121
81897: PUSH
81898: LD_VAR 0 6
81902: ARRAY
81903: MINUS
81904: ST_TO_ADDR
// if not minesFreeAmount then
81905: LD_VAR 0 8
81909: NOT
81910: IFFALSE 81914
// exit ;
81912: GO 82189
// tmp := [ ] ;
81914: LD_ADDR_VAR 0 7
81918: PUSH
81919: EMPTY
81920: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
81921: LD_ADDR_VAR 0 5
81925: PUSH
81926: DOUBLE
81927: LD_INT 1
81929: DEC
81930: ST_TO_ADDR
81931: LD_VAR 0 8
81935: PUSH
81936: FOR_TO
81937: IFFALSE 82136
// begin _d := rand ( 0 , 5 ) ;
81939: LD_ADDR_VAR 0 11
81943: PUSH
81944: LD_INT 0
81946: PPUSH
81947: LD_INT 5
81949: PPUSH
81950: CALL_OW 12
81954: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
81955: LD_ADDR_VAR 0 12
81959: PUSH
81960: LD_INT 2
81962: PPUSH
81963: LD_INT 6
81965: PPUSH
81966: CALL_OW 12
81970: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
81971: LD_ADDR_VAR 0 9
81975: PUSH
81976: LD_VAR 0 2
81980: PPUSH
81981: LD_VAR 0 11
81985: PPUSH
81986: LD_VAR 0 12
81990: PPUSH
81991: CALL_OW 272
81995: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
81996: LD_ADDR_VAR 0 10
82000: PUSH
82001: LD_VAR 0 3
82005: PPUSH
82006: LD_VAR 0 11
82010: PPUSH
82011: LD_VAR 0 12
82015: PPUSH
82016: CALL_OW 273
82020: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
82021: LD_VAR 0 9
82025: PPUSH
82026: LD_VAR 0 10
82030: PPUSH
82031: CALL_OW 488
82035: IFFALSE 82059
82037: PUSH
82038: LD_VAR 0 9
82042: PUSH
82043: LD_VAR 0 10
82047: PUSH
82048: EMPTY
82049: LIST
82050: LIST
82051: PUSH
82052: LD_VAR 0 7
82056: IN
82057: NOT
82058: AND
82059: IFFALSE 82078
82061: PUSH
82062: LD_VAR 0 9
82066: PPUSH
82067: LD_VAR 0 10
82071: PPUSH
82072: CALL_OW 458
82076: NOT
82077: AND
82078: IFFALSE 82120
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
82080: LD_ADDR_VAR 0 7
82084: PUSH
82085: LD_VAR 0 7
82089: PPUSH
82090: LD_VAR 0 7
82094: PUSH
82095: LD_INT 1
82097: PLUS
82098: PPUSH
82099: LD_VAR 0 9
82103: PUSH
82104: LD_VAR 0 10
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: PPUSH
82113: CALL_OW 1
82117: ST_TO_ADDR
82118: GO 82134
// i := i - 1 ;
82120: LD_ADDR_VAR 0 5
82124: PUSH
82125: LD_VAR 0 5
82129: PUSH
82130: LD_INT 1
82132: MINUS
82133: ST_TO_ADDR
// end ;
82134: GO 81936
82136: POP
82137: POP
// for i in tmp do
82138: LD_ADDR_VAR 0 5
82142: PUSH
82143: LD_VAR 0 7
82147: PUSH
82148: FOR_IN
82149: IFFALSE 82187
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
82151: LD_VAR 0 1
82155: PPUSH
82156: LD_VAR 0 5
82160: PUSH
82161: LD_INT 1
82163: ARRAY
82164: PPUSH
82165: LD_VAR 0 5
82169: PUSH
82170: LD_INT 2
82172: ARRAY
82173: PPUSH
82174: CALL 81121 0 3
82178: NOT
82179: IFFALSE 82185
// exit ;
82181: POP
82182: POP
82183: GO 82189
82185: GO 82148
82187: POP
82188: POP
// end ;
82189: LD_VAR 0 4
82193: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
82194: LD_INT 0
82196: PPUSH
82197: PPUSH
82198: PPUSH
82199: PPUSH
82200: PPUSH
82201: PPUSH
82202: PPUSH
82203: PPUSH
82204: PPUSH
// if GetClass ( unit ) <> class_sniper then
82205: LD_VAR 0 1
82209: PPUSH
82210: CALL_OW 257
82214: PUSH
82215: LD_INT 5
82217: NONEQUAL
82218: IFFALSE 82222
// exit ;
82220: GO 82692
// dist := 8 ;
82222: LD_ADDR_VAR 0 5
82226: PUSH
82227: LD_INT 8
82229: ST_TO_ADDR
// viewRange := 12 ;
82230: LD_ADDR_VAR 0 8
82234: PUSH
82235: LD_INT 12
82237: ST_TO_ADDR
// side := GetSide ( unit ) ;
82238: LD_ADDR_VAR 0 6
82242: PUSH
82243: LD_VAR 0 1
82247: PPUSH
82248: CALL_OW 255
82252: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
82253: LD_INT 61
82255: PPUSH
82256: LD_VAR 0 6
82260: PPUSH
82261: CALL_OW 321
82265: PUSH
82266: LD_INT 2
82268: EQUAL
82269: IFFALSE 82279
// viewRange := 16 ;
82271: LD_ADDR_VAR 0 8
82275: PUSH
82276: LD_INT 16
82278: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
82279: LD_VAR 0 1
82283: PPUSH
82284: LD_VAR 0 2
82288: PPUSH
82289: LD_VAR 0 3
82293: PPUSH
82294: CALL_OW 297
82298: PUSH
82299: LD_VAR 0 5
82303: GREATER
82304: IFFALSE 82383
// begin ComMoveXY ( unit , x , y ) ;
82306: LD_VAR 0 1
82310: PPUSH
82311: LD_VAR 0 2
82315: PPUSH
82316: LD_VAR 0 3
82320: PPUSH
82321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
82325: LD_INT 35
82327: PPUSH
82328: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
82332: LD_VAR 0 1
82336: PPUSH
82337: LD_VAR 0 2
82341: PPUSH
82342: LD_VAR 0 3
82346: PPUSH
82347: CALL 54483 0 3
82351: NOT
82352: IFFALSE 82356
// exit ;
82354: GO 82692
// until GetDistUnitXY ( unit , x , y ) < dist ;
82356: LD_VAR 0 1
82360: PPUSH
82361: LD_VAR 0 2
82365: PPUSH
82366: LD_VAR 0 3
82370: PPUSH
82371: CALL_OW 297
82375: PUSH
82376: LD_VAR 0 5
82380: LESS
82381: IFFALSE 82325
// end ; ComTurnXY ( unit , x , y ) ;
82383: LD_VAR 0 1
82387: PPUSH
82388: LD_VAR 0 2
82392: PPUSH
82393: LD_VAR 0 3
82397: PPUSH
82398: CALL_OW 118
// repeat if Multiplayer then
82402: LD_OWVAR 4
82406: IFFALSE 82417
// wait ( 35 ) else
82408: LD_INT 35
82410: PPUSH
82411: CALL_OW 67
82415: GO 82424
// wait ( 5 ) ;
82417: LD_INT 5
82419: PPUSH
82420: CALL_OW 67
// _d := GetDir ( unit ) ;
82424: LD_ADDR_VAR 0 11
82428: PUSH
82429: LD_VAR 0 1
82433: PPUSH
82434: CALL_OW 254
82438: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
82439: LD_ADDR_VAR 0 7
82443: PUSH
82444: LD_VAR 0 1
82448: PPUSH
82449: CALL_OW 250
82453: PPUSH
82454: LD_VAR 0 1
82458: PPUSH
82459: CALL_OW 251
82463: PPUSH
82464: LD_VAR 0 2
82468: PPUSH
82469: LD_VAR 0 3
82473: PPUSH
82474: CALL 57119 0 4
82478: ST_TO_ADDR
// until dir = _d ;
82479: LD_VAR 0 7
82483: PUSH
82484: LD_VAR 0 11
82488: EQUAL
82489: IFFALSE 82402
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
82491: LD_ADDR_VAR 0 9
82495: PUSH
82496: LD_VAR 0 1
82500: PPUSH
82501: CALL_OW 250
82505: PPUSH
82506: LD_VAR 0 7
82510: PPUSH
82511: LD_VAR 0 5
82515: PPUSH
82516: CALL_OW 272
82520: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
82521: LD_ADDR_VAR 0 10
82525: PUSH
82526: LD_VAR 0 1
82530: PPUSH
82531: CALL_OW 251
82535: PPUSH
82536: LD_VAR 0 7
82540: PPUSH
82541: LD_VAR 0 5
82545: PPUSH
82546: CALL_OW 273
82550: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
82551: LD_VAR 0 9
82555: PPUSH
82556: LD_VAR 0 10
82560: PPUSH
82561: CALL_OW 488
82565: NOT
82566: IFFALSE 82570
// exit ;
82568: GO 82692
// ComAnimCustom ( unit , 1 ) ;
82570: LD_VAR 0 1
82574: PPUSH
82575: LD_INT 1
82577: PPUSH
82578: CALL_OW 592
// p := 0 ;
82582: LD_ADDR_VAR 0 12
82586: PUSH
82587: LD_INT 0
82589: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
82590: LD_VAR 0 9
82594: PPUSH
82595: LD_VAR 0 10
82599: PPUSH
82600: LD_VAR 0 6
82604: PPUSH
82605: LD_VAR 0 8
82609: PPUSH
82610: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
82614: LD_INT 35
82616: PPUSH
82617: CALL_OW 67
// p := Inc ( p ) ;
82621: LD_ADDR_VAR 0 12
82625: PUSH
82626: LD_VAR 0 12
82630: PPUSH
82631: CALL 57075 0 1
82635: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
82636: LD_VAR 0 12
82640: PUSH
82641: LD_INT 3
82643: EQUAL
82644: IFTRUE 82658
82646: PUSH
82647: LD_VAR 0 1
82651: PPUSH
82652: CALL_OW 302
82656: NOT
82657: OR
82658: IFTRUE 82671
82660: PUSH
82661: LD_VAR 0 1
82665: PPUSH
82666: CALL_OW 301
82670: OR
82671: IFFALSE 82614
// RemoveSeeing ( _x , _y , side ) ;
82673: LD_VAR 0 9
82677: PPUSH
82678: LD_VAR 0 10
82682: PPUSH
82683: LD_VAR 0 6
82687: PPUSH
82688: CALL_OW 331
// end ; end_of_file
82692: LD_VAR 0 4
82696: RET
