// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// PrepareNature ;
  28: CALL 16326 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6834 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4030 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4030 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4030 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4030 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4030 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4030 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4030 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5232 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4845 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4030 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4030 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4030 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareTrap ;
2882: CALL 2895 0 0
// PrepareBunkiers ;
2886: CALL 3485 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
// uc_side = 1 ;
3491: LD_ADDR_OWVAR 20
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// uc_nation = nation_american ;
3499: LD_ADDR_OWVAR 21
3503: PUSH
3504: LD_INT 1
3506: ST_TO_ADDR
// bc_level = 1 ;
3507: LD_ADDR_OWVAR 43
3511: PUSH
3512: LD_INT 1
3514: ST_TO_ADDR
// bc_type = b_breastwork ;
3515: LD_ADDR_OWVAR 42
3519: PUSH
3520: LD_INT 31
3522: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3523: LD_ADDR_VAR 0 4
3527: PUSH
3528: LD_INT 104
3530: PPUSH
3531: LD_INT 59
3533: PPUSH
3534: LD_INT 4
3536: PPUSH
3537: CALL_OW 47
3541: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3542: LD_ADDR_EXP 82
3546: PUSH
3547: LD_EXP 82
3551: PUSH
3552: LD_VAR 0 4
3556: ADD
3557: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3558: LD_EXP 59
3562: PPUSH
3563: LD_VAR 0 4
3567: PPUSH
3568: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3572: LD_ADDR_VAR 0 4
3576: PUSH
3577: LD_INT 101
3579: PPUSH
3580: LD_INT 55
3582: PPUSH
3583: LD_INT 4
3585: PPUSH
3586: CALL_OW 47
3590: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3591: LD_ADDR_EXP 82
3595: PUSH
3596: LD_EXP 82
3600: PUSH
3601: LD_VAR 0 4
3605: ADD
3606: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3607: LD_EXP 59
3611: PPUSH
3612: LD_VAR 0 4
3616: PPUSH
3617: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3621: LD_ADDR_VAR 0 4
3625: PUSH
3626: LD_INT 132
3628: PPUSH
3629: LD_INT 62
3631: PPUSH
3632: LD_INT 1
3634: PPUSH
3635: CALL_OW 47
3639: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3640: LD_ADDR_EXP 83
3644: PUSH
3645: LD_EXP 83
3649: PUSH
3650: LD_VAR 0 4
3654: ADD
3655: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3656: LD_EXP 59
3660: PPUSH
3661: LD_VAR 0 4
3665: PPUSH
3666: CALL 5086 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 134
3677: PPUSH
3678: LD_INT 66
3680: PPUSH
3681: LD_INT 1
3683: PPUSH
3684: CALL_OW 47
3688: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3689: LD_ADDR_EXP 83
3693: PUSH
3694: LD_EXP 83
3698: PUSH
3699: LD_VAR 0 4
3703: ADD
3704: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3705: LD_EXP 59
3709: PPUSH
3710: LD_VAR 0 4
3714: PPUSH
3715: CALL 5086 0 2
// bc_type = b_depot ;
3719: LD_ADDR_OWVAR 42
3723: PUSH
3724: LD_INT 0
3726: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3727: LD_ADDR_EXP 84
3731: PUSH
3732: LD_INT 92
3734: PPUSH
3735: LD_INT 51
3737: PPUSH
3738: LD_INT 2
3740: PPUSH
3741: CALL_OW 47
3745: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3746: LD_ADDR_EXP 85
3750: PUSH
3751: LD_INT 193
3753: ST_TO_ADDR
// amLeftEngs = [ ] ;
3754: LD_ADDR_EXP 86
3758: PUSH
3759: EMPTY
3760: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 1
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: LD_INT 1
3779: PPUSH
3780: LD_INT 2
3782: PPUSH
3783: CALL_OW 12
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: LIST
3792: PUSH
3793: LD_OWVAR 67
3797: ARRAY
3798: PUSH
3799: FOR_TO
3800: IFFALSE 3891
// begin uc_nation = 1 ;
3802: LD_ADDR_OWVAR 21
3806: PUSH
3807: LD_INT 1
3809: ST_TO_ADDR
// uc_side = 1 ;
3810: LD_ADDR_OWVAR 20
3814: PUSH
3815: LD_INT 1
3817: ST_TO_ADDR
// hc_gallery =  ;
3818: LD_ADDR_OWVAR 33
3822: PUSH
3823: LD_STRING 
3825: ST_TO_ADDR
// hc_name =  ;
3826: LD_ADDR_OWVAR 26
3830: PUSH
3831: LD_STRING 
3833: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3834: LD_INT 0
3836: PPUSH
3837: LD_INT 2
3839: PPUSH
3840: LD_EXP 59
3844: PPUSH
3845: CALL_OW 380
// un = CreateHuman ;
3849: LD_ADDR_VAR 0 3
3853: PUSH
3854: CALL_OW 44
3858: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3859: LD_ADDR_EXP 86
3863: PUSH
3864: LD_EXP 86
3868: PUSH
3869: LD_VAR 0 3
3873: ADD
3874: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3875: LD_VAR 0 3
3879: PPUSH
3880: LD_EXP 84
3884: PPUSH
3885: CALL_OW 52
// end ;
3889: GO 3799
3891: POP
3892: POP
// if Difficulty = 3 then
3893: LD_OWVAR 67
3897: PUSH
3898: LD_INT 3
3900: EQUAL
3901: IFFALSE 4025
// begin amRightEngs = [ ] ;
3903: LD_ADDR_EXP 87
3907: PUSH
3908: EMPTY
3909: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3910: LD_ADDR_VAR 0 2
3914: PUSH
3915: DOUBLE
3916: LD_INT 1
3918: DEC
3919: ST_TO_ADDR
3920: LD_INT 1
3922: PPUSH
3923: LD_INT 2
3925: PPUSH
3926: CALL_OW 12
3930: PUSH
3931: FOR_TO
3932: IFFALSE 4023
// begin uc_nation = 1 ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_INT 1
3941: ST_TO_ADDR
// uc_side = 1 ;
3942: LD_ADDR_OWVAR 20
3946: PUSH
3947: LD_INT 1
3949: ST_TO_ADDR
// hc_gallery =  ;
3950: LD_ADDR_OWVAR 33
3954: PUSH
3955: LD_STRING 
3957: ST_TO_ADDR
// hc_name =  ;
3958: LD_ADDR_OWVAR 26
3962: PUSH
3963: LD_STRING 
3965: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3966: LD_INT 0
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: LD_EXP 59
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 3
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3991: LD_ADDR_EXP 87
3995: PUSH
3996: LD_EXP 87
4000: PUSH
4001: LD_VAR 0 3
4005: ADD
4006: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4007: LD_VAR 0 3
4011: PPUSH
4012: LD_EXP 85
4016: PPUSH
4017: CALL_OW 52
// end ;
4021: GO 3931
4023: POP
4024: POP
// end ; end ; end_of_file
4025: LD_VAR 0 1
4029: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
4030: LD_INT 0
4032: PPUSH
4033: PPUSH
// if exist_mode then
4034: LD_VAR 0 2
4038: IFFALSE 4063
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4040: LD_ADDR_VAR 0 4
4044: PUSH
4045: LD_EXP 49
4049: PUSH
4050: LD_VAR 0 1
4054: STR
4055: PPUSH
4056: CALL_OW 34
4060: ST_TO_ADDR
4061: GO 4078
// unit := NewCharacter ( ident ) ;
4063: LD_ADDR_VAR 0 4
4067: PUSH
4068: LD_VAR 0 1
4072: PPUSH
4073: CALL_OW 25
4077: ST_TO_ADDR
// result := unit ;
4078: LD_ADDR_VAR 0 3
4082: PUSH
4083: LD_VAR 0 4
4087: ST_TO_ADDR
// end ;
4088: LD_VAR 0 3
4092: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4093: LD_INT 0
4095: PPUSH
4096: PPUSH
4097: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4098: LD_ADDR_VAR 0 1
4102: PUSH
4103: LD_VAR 0 1
4107: PUSH
4108: LD_EXP 62
4112: PUSH
4113: LD_EXP 63
4117: PUSH
4118: LD_EXP 64
4122: PUSH
4123: LD_EXP 65
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: DIFF
4134: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4135: LD_ADDR_VAR 0 7
4139: PUSH
4140: LD_VAR 0 1
4144: PUSH
4145: LD_INT 1
4147: PPUSH
4148: LD_VAR 0 1
4152: PPUSH
4153: CALL_OW 12
4157: ARRAY
4158: ST_TO_ADDR
// if radio then
4159: LD_VAR 0 4
4163: IFFALSE 4212
// begin if GetSex ( speaker ) = sex_male then
4165: LD_VAR 0 7
4169: PPUSH
4170: CALL_OW 258
4174: PUSH
4175: LD_INT 1
4177: EQUAL
4178: IFFALSE 4196
// SayRadio ( speaker , dialogMID ) else
4180: LD_VAR 0 7
4184: PPUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: CALL_OW 94
4194: GO 4210
// SayRadio ( speaker , dialogFID ) ;
4196: LD_VAR 0 7
4200: PPUSH
4201: LD_VAR 0 3
4205: PPUSH
4206: CALL_OW 94
// end else
4210: GO 4257
// begin if GetSex ( speaker ) = sex_male then
4212: LD_VAR 0 7
4216: PPUSH
4217: CALL_OW 258
4221: PUSH
4222: LD_INT 1
4224: EQUAL
4225: IFFALSE 4243
// Say ( speaker , dialogMID ) else
4227: LD_VAR 0 7
4231: PPUSH
4232: LD_VAR 0 2
4236: PPUSH
4237: CALL_OW 88
4241: GO 4257
// Say ( speaker , dialogFID ) ;
4243: LD_VAR 0 7
4247: PPUSH
4248: LD_VAR 0 3
4252: PPUSH
4253: CALL_OW 88
// end ; result := speaker ;
4257: LD_ADDR_VAR 0 5
4261: PUSH
4262: LD_VAR 0 7
4266: ST_TO_ADDR
// end ;
4267: LD_VAR 0 5
4271: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4272: LD_INT 0
4274: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4275: LD_VAR 0 1
4279: PPUSH
4280: CALL_OW 255
4284: PUSH
4285: LD_VAR 0 3
4289: EQUAL
4290: PUSH
4291: LD_VAR 0 1
4295: PPUSH
4296: CALL_OW 302
4300: AND
4301: IFFALSE 4323
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4303: LD_VAR 0 1
4307: PPUSH
4308: LD_EXP 48
4312: PUSH
4313: LD_VAR 0 2
4317: STR
4318: PPUSH
4319: CALL_OW 38
// end ;
4323: LD_VAR 0 4
4327: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4328: LD_INT 0
4330: PPUSH
4331: PPUSH
4332: PPUSH
// resultCharactersToSave = [ ] ;
4333: LD_ADDR_VAR 0 6
4337: PUSH
4338: EMPTY
4339: ST_TO_ADDR
// for unit in characters do
4340: LD_ADDR_VAR 0 5
4344: PUSH
4345: LD_VAR 0 1
4349: PUSH
4350: FOR_IN
4351: IFFALSE 4399
// if GetSide ( unit ) = side and IsOK ( unit ) then
4353: LD_VAR 0 5
4357: PPUSH
4358: CALL_OW 255
4362: PUSH
4363: LD_VAR 0 3
4367: EQUAL
4368: PUSH
4369: LD_VAR 0 5
4373: PPUSH
4374: CALL_OW 302
4378: AND
4379: IFFALSE 4397
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4381: LD_ADDR_VAR 0 6
4385: PUSH
4386: LD_VAR 0 6
4390: PUSH
4391: LD_VAR 0 5
4395: ADD
4396: ST_TO_ADDR
4397: GO 4350
4399: POP
4400: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4401: LD_VAR 0 6
4405: PPUSH
4406: LD_EXP 48
4410: PUSH
4411: LD_VAR 0 2
4415: STR
4416: PPUSH
4417: CALL_OW 38
// end ;
4421: LD_VAR 0 4
4425: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4426: LD_INT 0
4428: PPUSH
4429: PPUSH
4430: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4431: LD_ADDR_VAR 0 3
4435: PUSH
4436: LD_STRING QMoreInfo
4438: PPUSH
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL_OW 98
4448: ST_TO_ADDR
// case dec of 1 :
4449: LD_VAR 0 3
4453: PUSH
4454: LD_INT 1
4456: DOUBLE
4457: EQUAL
4458: IFTRUE 4462
4460: GO 4522
4462: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4463: LD_EXP 62
4467: PPUSH
4468: LD_STRING D2a-Bur-1
4470: PPUSH
4471: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4475: LD_EXP 76
4479: PPUSH
4480: LD_STRING D2a-Pla-1
4482: PPUSH
4483: CALL_OW 88
// q1 = q diff 1 ;
4487: LD_ADDR_VAR 0 4
4491: PUSH
4492: LD_VAR 0 1
4496: PUSH
4497: LD_INT 1
4499: DIFF
4500: ST_TO_ADDR
// if q1 >= 2 then
4501: LD_VAR 0 4
4505: PUSH
4506: LD_INT 2
4508: GREATEREQUAL
4509: IFFALSE 4520
// Question1 ( q1 ) ;
4511: LD_VAR 0 4
4515: PPUSH
4516: CALL 4426 0 1
// end ; 2 :
4520: GO 4659
4522: LD_INT 2
4524: DOUBLE
4525: EQUAL
4526: IFTRUE 4530
4528: GO 4590
4530: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4531: LD_EXP 62
4535: PPUSH
4536: LD_STRING D2b-Bur-1
4538: PPUSH
4539: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4543: LD_EXP 76
4547: PPUSH
4548: LD_STRING D2b-Pla-1
4550: PPUSH
4551: CALL_OW 88
// q1 = q diff 2 ;
4555: LD_ADDR_VAR 0 4
4559: PUSH
4560: LD_VAR 0 1
4564: PUSH
4565: LD_INT 2
4567: DIFF
4568: ST_TO_ADDR
// if q1 >= 2 then
4569: LD_VAR 0 4
4573: PUSH
4574: LD_INT 2
4576: GREATEREQUAL
4577: IFFALSE 4588
// Question1 ( q1 ) ;
4579: LD_VAR 0 4
4583: PPUSH
4584: CALL 4426 0 1
// end ; 3 :
4588: GO 4659
4590: LD_INT 3
4592: DOUBLE
4593: EQUAL
4594: IFTRUE 4598
4596: GO 4658
4598: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4599: LD_EXP 62
4603: PPUSH
4604: LD_STRING D2c-Bur-1
4606: PPUSH
4607: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4611: LD_EXP 76
4615: PPUSH
4616: LD_STRING D2c-Pla-1
4618: PPUSH
4619: CALL_OW 88
// q1 = q diff 3 ;
4623: LD_ADDR_VAR 0 4
4627: PUSH
4628: LD_VAR 0 1
4632: PUSH
4633: LD_INT 3
4635: DIFF
4636: ST_TO_ADDR
// if q1 >= 2 then
4637: LD_VAR 0 4
4641: PUSH
4642: LD_INT 2
4644: GREATEREQUAL
4645: IFFALSE 4656
// Question1 ( q1 ) ;
4647: LD_VAR 0 4
4651: PPUSH
4652: CALL 4426 0 1
// end ; end ;
4656: GO 4659
4658: POP
// end ;
4659: LD_VAR 0 2
4663: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4664: LD_INT 0
4666: PPUSH
4667: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4668: LD_VAR 0 1
4672: PPUSH
4673: CALL_OW 302
4677: NOT
4678: PUSH
4679: LD_VAR 0 2
4683: PPUSH
4684: CALL_OW 302
4688: NOT
4689: OR
4690: PUSH
4691: LD_VAR 0 3
4695: PPUSH
4696: CALL_OW 302
4700: NOT
4701: OR
4702: PUSH
4703: LD_VAR 0 3
4707: PPUSH
4708: CALL_OW 261
4712: PUSH
4713: LD_INT 100
4715: EQUAL
4716: OR
4717: IFFALSE 4721
// exit ;
4719: GO 4840
// AddComTransport ( engineer , depot , mat_oil ) ;
4721: LD_VAR 0 1
4725: PPUSH
4726: LD_VAR 0 2
4730: PPUSH
4731: LD_INT 2
4733: PPUSH
4734: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4738: LD_INT 35
4740: PPUSH
4741: CALL_OW 67
// until Carry ( engineer ) ;
4745: LD_VAR 0 1
4749: PPUSH
4750: CALL_OW 281
4754: IFFALSE 4738
// RemoveTasks ( engineer ) ;
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4765: LD_VAR 0 1
4769: PPUSH
4770: LD_STRING O
4772: PUSH
4773: LD_INT 0
4775: PUSH
4776: LD_INT 0
4778: PUSH
4779: LD_VAR 0 3
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: LD_INT 0
4789: PUSH
4790: LD_INT 0
4792: PUSH
4793: EMPTY
4794: LIST
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: PPUSH
4805: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4809: LD_INT 35
4811: PPUSH
4812: CALL_OW 67
// until not Carry ( engineer ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: CALL_OW 281
4825: NOT
4826: IFFALSE 4809
// SetFuel ( vehicle , 100 ) ;
4828: LD_VAR 0 3
4832: PPUSH
4833: LD_INT 100
4835: PPUSH
4836: CALL_OW 240
// end ;
4840: LD_VAR 0 4
4844: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4845: LD_INT 0
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4852: LD_ADDR_VAR 0 8
4856: PUSH
4857: LD_INT 48
4859: PUSH
4860: LD_INT 49
4862: PUSH
4863: LD_INT 50
4865: PUSH
4866: LD_INT 20
4868: PUSH
4869: LD_INT 1
4871: PUSH
4872: LD_INT 51
4874: PUSH
4875: LD_INT 52
4877: PUSH
4878: LD_INT 69
4880: PUSH
4881: LD_INT 39
4883: PUSH
4884: LD_INT 34
4886: PUSH
4887: LD_INT 40
4889: PUSH
4890: LD_INT 53
4892: PUSH
4893: LD_INT 71
4895: PUSH
4896: LD_INT 57
4898: PUSH
4899: LD_INT 58
4901: PUSH
4902: LD_INT 44
4904: PUSH
4905: LD_INT 32
4907: PUSH
4908: LD_INT 27
4910: PUSH
4911: LD_INT 23
4913: PUSH
4914: LD_INT 33
4916: PUSH
4917: LD_INT 59
4919: PUSH
4920: LD_INT 54
4922: PUSH
4923: LD_INT 55
4925: PUSH
4926: LD_INT 56
4928: PUSH
4929: LD_INT 63
4931: PUSH
4932: LD_INT 64
4934: PUSH
4935: LD_INT 65
4937: PUSH
4938: LD_INT 30
4940: PUSH
4941: LD_INT 31
4943: PUSH
4944: LD_INT 21
4946: PUSH
4947: LD_INT 22
4949: PUSH
4950: LD_INT 25
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: LIST
4957: LIST
4958: LIST
4959: LIST
4960: LIST
4961: LIST
4962: LIST
4963: LIST
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: LIST
4976: LIST
4977: LIST
4978: LIST
4979: LIST
4980: LIST
4981: LIST
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4987: LD_ADDR_VAR 0 5
4991: PUSH
4992: DOUBLE
4993: LD_INT 1
4995: DEC
4996: ST_TO_ADDR
4997: LD_VAR 0 8
5001: PUSH
5002: FOR_TO
5003: IFFALSE 5079
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5005: LD_VAR 0 8
5009: PUSH
5010: LD_VAR 0 5
5014: ARRAY
5015: PPUSH
5016: LD_VAR 0 1
5020: PPUSH
5021: CALL_OW 321
5025: PUSH
5026: LD_INT 1
5028: EQUAL
5029: PUSH
5030: LD_VAR 0 8
5034: PUSH
5035: LD_VAR 0 5
5039: ARRAY
5040: PPUSH
5041: LD_VAR 0 3
5045: PPUSH
5046: CALL_OW 482
5050: PUSH
5051: LD_INT 1
5053: EQUAL
5054: AND
5055: IFFALSE 5077
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5057: LD_VAR 0 2
5061: PPUSH
5062: LD_VAR 0 8
5066: PUSH
5067: LD_VAR 0 5
5071: ARRAY
5072: PPUSH
5073: CALL_OW 184
5077: GO 5002
5079: POP
5080: POP
// end ;
5081: LD_VAR 0 4
5085: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5086: LD_INT 0
5088: PPUSH
5089: PPUSH
5090: PPUSH
// uc_side := GetSide ( b ) ;
5091: LD_ADDR_OWVAR 20
5095: PUSH
5096: LD_VAR 0 2
5100: PPUSH
5101: CALL_OW 255
5105: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5106: LD_ADDR_OWVAR 21
5110: PUSH
5111: LD_VAR 0 2
5115: PPUSH
5116: CALL_OW 248
5120: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5121: LD_INT 0
5123: PPUSH
5124: LD_INT 1
5126: PPUSH
5127: LD_VAR 0 1
5131: PPUSH
5132: CALL_OW 380
// un = CreateHuman ;
5136: LD_ADDR_VAR 0 4
5140: PUSH
5141: CALL_OW 44
5145: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5146: LD_ADDR_VAR 0 5
5150: PUSH
5151: LD_VAR 0 2
5155: PPUSH
5156: CALL_OW 254
5160: PUSH
5161: LD_INT 3
5163: MINUS
5164: ST_TO_ADDR
// if dir < 0 then
5165: LD_VAR 0 5
5169: PUSH
5170: LD_INT 0
5172: LESS
5173: IFFALSE 5189
// dir := 6 + dir ;
5175: LD_ADDR_VAR 0 5
5179: PUSH
5180: LD_INT 6
5182: PUSH
5183: LD_VAR 0 5
5187: PLUS
5188: ST_TO_ADDR
// SetDir ( un , dir ) ;
5189: LD_VAR 0 4
5193: PPUSH
5194: LD_VAR 0 5
5198: PPUSH
5199: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5203: LD_VAR 0 4
5207: PPUSH
5208: LD_VAR 0 2
5212: PPUSH
5213: CALL_OW 52
// result = un ;
5217: LD_ADDR_VAR 0 3
5221: PUSH
5222: LD_VAR 0 4
5226: ST_TO_ADDR
// end ;
5227: LD_VAR 0 3
5231: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5232: LD_INT 0
5234: PPUSH
5235: PPUSH
// dir := GetDir ( b ) - 3 ;
5236: LD_ADDR_VAR 0 4
5240: PUSH
5241: LD_VAR 0 2
5245: PPUSH
5246: CALL_OW 254
5250: PUSH
5251: LD_INT 3
5253: MINUS
5254: ST_TO_ADDR
// if dir < 0 then
5255: LD_VAR 0 4
5259: PUSH
5260: LD_INT 0
5262: LESS
5263: IFFALSE 5279
// dir := 6 + dir ;
5265: LD_ADDR_VAR 0 4
5269: PUSH
5270: LD_INT 6
5272: PUSH
5273: LD_VAR 0 4
5277: PLUS
5278: ST_TO_ADDR
// SetDir ( un , dir ) ;
5279: LD_VAR 0 1
5283: PPUSH
5284: LD_VAR 0 4
5288: PPUSH
5289: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5293: LD_VAR 0 1
5297: PPUSH
5298: LD_VAR 0 2
5302: PPUSH
5303: CALL_OW 52
// result = un ;
5307: LD_ADDR_VAR 0 3
5311: PUSH
5312: LD_VAR 0 1
5316: ST_TO_ADDR
// end ;
5317: LD_VAR 0 3
5321: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5322: LD_INT 0
5324: PPUSH
5325: PPUSH
5326: PPUSH
// tmp = [ ] ;
5327: LD_ADDR_VAR 0 5
5331: PUSH
5332: EMPTY
5333: ST_TO_ADDR
// if not vehicles then
5334: LD_VAR 0 1
5338: NOT
5339: IFFALSE 5343
// exit ;
5341: GO 5460
// for i in vehicles do
5343: LD_ADDR_VAR 0 4
5347: PUSH
5348: LD_VAR 0 1
5352: PUSH
5353: FOR_IN
5354: IFFALSE 5444
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5356: LD_ADDR_VAR 0 5
5360: PUSH
5361: LD_VAR 0 5
5365: PPUSH
5366: LD_INT 1
5368: PPUSH
5369: LD_VAR 0 4
5373: PPUSH
5374: CALL_OW 265
5378: PUSH
5379: LD_VAR 0 4
5383: PPUSH
5384: CALL_OW 262
5388: PUSH
5389: LD_VAR 0 4
5393: PPUSH
5394: CALL_OW 263
5398: PUSH
5399: LD_VAR 0 4
5403: PPUSH
5404: CALL_OW 264
5408: PUSH
5409: LD_VAR 0 4
5413: PPUSH
5414: CALL_OW 261
5418: PUSH
5419: LD_VAR 0 4
5423: PPUSH
5424: CALL_OW 256
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: LIST
5435: LIST
5436: PPUSH
5437: CALL_OW 2
5441: ST_TO_ADDR
5442: GO 5353
5444: POP
5445: POP
// SaveVariable ( tmp , ident ) ;
5446: LD_VAR 0 5
5450: PPUSH
5451: LD_VAR 0 2
5455: PPUSH
5456: CALL_OW 39
// end ;
5460: LD_VAR 0 3
5464: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5465: LD_INT 0
5467: PPUSH
5468: PPUSH
5469: PPUSH
// buildingsToSave = [ ] ;
5470: LD_ADDR_VAR 0 5
5474: PUSH
5475: EMPTY
5476: ST_TO_ADDR
// if not buildings then
5477: LD_VAR 0 1
5481: NOT
5482: IFFALSE 5486
// exit ;
5484: GO 6061
// for i in buildings do
5486: LD_ADDR_VAR 0 4
5490: PUSH
5491: LD_VAR 0 1
5495: PUSH
5496: FOR_IN
5497: IFFALSE 6045
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5499: LD_VAR 0 4
5503: PPUSH
5504: CALL_OW 266
5508: PUSH
5509: LD_INT 6
5511: PUSH
5512: LD_INT 7
5514: PUSH
5515: LD_INT 8
5517: PUSH
5518: EMPTY
5519: LIST
5520: LIST
5521: LIST
5522: IN
5523: IFFALSE 5648
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5525: LD_ADDR_VAR 0 5
5529: PUSH
5530: LD_VAR 0 5
5534: PUSH
5535: LD_VAR 0 4
5539: PPUSH
5540: CALL_OW 266
5544: PUSH
5545: LD_VAR 0 4
5549: PPUSH
5550: CALL_OW 250
5554: PUSH
5555: LD_VAR 0 4
5559: PPUSH
5560: CALL_OW 251
5564: PUSH
5565: LD_VAR 0 4
5569: PPUSH
5570: CALL_OW 254
5574: PUSH
5575: LD_VAR 0 4
5579: PPUSH
5580: CALL_OW 267
5584: PUSH
5585: LD_VAR 0 4
5589: PPUSH
5590: CALL_OW 248
5594: PUSH
5595: LD_VAR 0 4
5599: PPUSH
5600: CALL_OW 256
5604: PUSH
5605: LD_VAR 0 4
5609: PPUSH
5610: LD_INT 1
5612: PPUSH
5613: CALL_OW 268
5617: PUSH
5618: LD_VAR 0 4
5622: PPUSH
5623: LD_INT 2
5625: PPUSH
5626: CALL_OW 268
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: LIST
5637: LIST
5638: LIST
5639: LIST
5640: LIST
5641: PUSH
5642: EMPTY
5643: LIST
5644: ADD
5645: ST_TO_ADDR
5646: GO 6043
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5648: LD_VAR 0 4
5652: PPUSH
5653: CALL_OW 266
5657: PUSH
5658: LD_INT 32
5660: PUSH
5661: LD_INT 33
5663: PUSH
5664: EMPTY
5665: LIST
5666: LIST
5667: IN
5668: IFFALSE 5776
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5670: LD_ADDR_VAR 0 5
5674: PUSH
5675: LD_VAR 0 5
5679: PUSH
5680: LD_VAR 0 4
5684: PPUSH
5685: CALL_OW 266
5689: PUSH
5690: LD_VAR 0 4
5694: PPUSH
5695: CALL_OW 250
5699: PUSH
5700: LD_VAR 0 4
5704: PPUSH
5705: CALL_OW 251
5709: PUSH
5710: LD_VAR 0 4
5714: PPUSH
5715: CALL_OW 254
5719: PUSH
5720: LD_VAR 0 4
5724: PPUSH
5725: CALL_OW 267
5729: PUSH
5730: LD_VAR 0 4
5734: PPUSH
5735: CALL_OW 248
5739: PUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: CALL_OW 256
5749: PUSH
5750: LD_VAR 0 4
5754: PPUSH
5755: CALL_OW 269
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: PUSH
5770: EMPTY
5771: LIST
5772: ADD
5773: ST_TO_ADDR
5774: GO 6043
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5776: LD_VAR 0 4
5780: PPUSH
5781: CALL_OW 266
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: LD_INT 1
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: IN
5796: IFFALSE 5950
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5798: LD_ADDR_VAR 0 5
5802: PUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_VAR 0 4
5812: PPUSH
5813: CALL_OW 266
5817: PUSH
5818: LD_VAR 0 4
5822: PPUSH
5823: CALL_OW 250
5827: PUSH
5828: LD_VAR 0 4
5832: PPUSH
5833: CALL_OW 251
5837: PUSH
5838: LD_VAR 0 4
5842: PPUSH
5843: CALL_OW 254
5847: PUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 267
5857: PUSH
5858: LD_VAR 0 4
5862: PPUSH
5863: CALL_OW 248
5867: PUSH
5868: LD_VAR 0 4
5872: PPUSH
5873: CALL_OW 256
5877: PUSH
5878: LD_VAR 0 4
5882: PPUSH
5883: CALL_OW 274
5887: PPUSH
5888: LD_INT 1
5890: PPUSH
5891: CALL_OW 275
5895: PUSH
5896: LD_VAR 0 4
5900: PPUSH
5901: CALL_OW 274
5905: PPUSH
5906: LD_INT 2
5908: PPUSH
5909: CALL_OW 275
5913: PUSH
5914: LD_VAR 0 4
5918: PPUSH
5919: CALL_OW 274
5923: PPUSH
5924: LD_INT 3
5926: PPUSH
5927: CALL_OW 275
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: LIST
5940: LIST
5941: LIST
5942: LIST
5943: PUSH
5944: EMPTY
5945: LIST
5946: ADD
5947: ST_TO_ADDR
5948: GO 6043
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5950: LD_ADDR_VAR 0 5
5954: PUSH
5955: LD_VAR 0 5
5959: PUSH
5960: LD_VAR 0 4
5964: PPUSH
5965: CALL_OW 266
5969: PUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: CALL_OW 250
5979: PUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 251
5989: PUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: CALL_OW 254
5999: PUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: CALL_OW 267
6009: PUSH
6010: LD_VAR 0 4
6014: PPUSH
6015: CALL_OW 248
6019: PUSH
6020: LD_VAR 0 4
6024: PPUSH
6025: CALL_OW 256
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: ADD
6042: ST_TO_ADDR
// end ;
6043: GO 5496
6045: POP
6046: POP
// SaveVariable ( buildingsToSave , ident ) ;
6047: LD_VAR 0 5
6051: PPUSH
6052: LD_VAR 0 2
6056: PPUSH
6057: CALL_OW 39
// end ;
6061: LD_VAR 0 3
6065: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6066: LD_INT 0
6068: PPUSH
6069: PPUSH
6070: PPUSH
6071: PPUSH
6072: PPUSH
// belkovTeam = [ ] ;
6073: LD_ADDR_EXP 73
6077: PUSH
6078: EMPTY
6079: ST_TO_ADDR
// if belkovReturn then
6080: LD_EXP 6
6084: IFFALSE 6102
// belkovTeam = belkovTeam ^ Belkov ;
6086: LD_ADDR_EXP 73
6090: PUSH
6091: LD_EXP 73
6095: PUSH
6096: LD_EXP 64
6100: ADD
6101: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6102: LD_ADDR_EXP 73
6106: PUSH
6107: LD_EXP 73
6111: PUSH
6112: LD_EXP 68
6116: ADD
6117: ST_TO_ADDR
// for unit in other_survivors do
6118: LD_ADDR_VAR 0 3
6122: PUSH
6123: LD_EXP 66
6127: PUSH
6128: FOR_IN
6129: IFFALSE 6170
// if IsOK ( unit ) and belkovTeam < 5 then
6131: LD_VAR 0 3
6135: PPUSH
6136: CALL_OW 302
6140: PUSH
6141: LD_EXP 73
6145: PUSH
6146: LD_INT 5
6148: LESS
6149: AND
6150: IFFALSE 6168
// belkovTeam = belkovTeam ^ unit ;
6152: LD_ADDR_EXP 73
6156: PUSH
6157: LD_EXP 73
6161: PUSH
6162: LD_VAR 0 3
6166: ADD
6167: ST_TO_ADDR
6168: GO 6128
6170: POP
6171: POP
// if belkovTeam < 5 then
6172: LD_EXP 73
6176: PUSH
6177: LD_INT 5
6179: LESS
6180: IFFALSE 6306
// begin restRandSolds = 5 - belkovTeam ;
6182: LD_ADDR_VAR 0 4
6186: PUSH
6187: LD_INT 5
6189: PUSH
6190: LD_EXP 73
6194: MINUS
6195: ST_TO_ADDR
// for i := 1 to restRandSolds do
6196: LD_ADDR_VAR 0 2
6200: PUSH
6201: DOUBLE
6202: LD_INT 1
6204: DEC
6205: ST_TO_ADDR
6206: LD_VAR 0 4
6210: PUSH
6211: FOR_TO
6212: IFFALSE 6304
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6214: LD_ADDR_VAR 0 3
6218: PUSH
6219: LD_EXP 69
6223: PPUSH
6224: LD_INT 25
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: PPUSH
6237: CALL_OW 72
6241: PUSH
6242: LD_EXP 67
6246: DIFF
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6300
// if not unit in belkovTeam then
6251: LD_VAR 0 3
6255: PUSH
6256: LD_EXP 73
6260: IN
6261: NOT
6262: IFFALSE 6298
// begin belkovTeam = belkovTeam ^ unit ;
6264: LD_ADDR_EXP 73
6268: PUSH
6269: LD_EXP 73
6273: PUSH
6274: LD_VAR 0 3
6278: ADD
6279: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6280: LD_ADDR_EXP 69
6284: PUSH
6285: LD_EXP 69
6289: PUSH
6290: LD_VAR 0 3
6294: DIFF
6295: ST_TO_ADDR
// break ;
6296: GO 6300
// end ;
6298: GO 6248
6300: POP
6301: POP
6302: GO 6211
6304: POP
6305: POP
// end ; tmp = belkovTeam diff Belkov ;
6306: LD_ADDR_VAR 0 5
6310: PUSH
6311: LD_EXP 73
6315: PUSH
6316: LD_EXP 64
6320: DIFF
6321: ST_TO_ADDR
// if tmp < 4 then
6322: LD_VAR 0 5
6326: PUSH
6327: LD_INT 4
6329: LESS
6330: IFFALSE 6414
// begin for i := 1 to 4 - tmp do
6332: LD_ADDR_VAR 0 2
6336: PUSH
6337: DOUBLE
6338: LD_INT 1
6340: DEC
6341: ST_TO_ADDR
6342: LD_INT 4
6344: PUSH
6345: LD_VAR 0 5
6349: MINUS
6350: PUSH
6351: FOR_TO
6352: IFFALSE 6412
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6354: LD_INT 0
6356: PPUSH
6357: LD_INT 1
6359: PPUSH
6360: LD_INT 2
6362: PPUSH
6363: CALL_OW 12
6367: PPUSH
6368: CALL_OW 381
// unit = CreateHuman ;
6372: LD_ADDR_VAR 0 3
6376: PUSH
6377: CALL_OW 44
6381: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6382: LD_ADDR_EXP 73
6386: PUSH
6387: LD_EXP 73
6391: PUSH
6392: LD_VAR 0 3
6396: ADD
6397: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6398: LD_VAR 0 3
6402: PPUSH
6403: LD_INT 209
6405: PPUSH
6406: CALL_OW 52
// end ;
6410: GO 6351
6412: POP
6413: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6414: LD_STRING 01_Kirilenkova
6416: PPUSH
6417: CALL_OW 28
6421: IFFALSE 6441
// belkovTeam = belkovTeam ^ Kirilenkova else
6423: LD_ADDR_EXP 73
6427: PUSH
6428: LD_EXP 73
6432: PUSH
6433: LD_EXP 65
6437: ADD
6438: ST_TO_ADDR
6439: GO 6517
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6441: LD_ADDR_EXP 73
6445: PUSH
6446: LD_EXP 73
6450: PUSH
6451: LD_EXP 69
6455: PPUSH
6456: LD_INT 25
6458: PUSH
6459: LD_INT 4
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PUSH
6466: EMPTY
6467: LIST
6468: PPUSH
6469: CALL_OW 72
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: ADD
6478: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6479: LD_ADDR_EXP 69
6483: PUSH
6484: LD_EXP 69
6488: PUSH
6489: LD_EXP 69
6493: PPUSH
6494: LD_INT 25
6496: PUSH
6497: LD_INT 4
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: PPUSH
6507: CALL_OW 72
6511: PUSH
6512: LD_INT 1
6514: ARRAY
6515: DIFF
6516: ST_TO_ADDR
// end ; end ;
6517: LD_VAR 0 1
6521: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6526: LD_EXP 78
6530: NOT
6531: PUSH
6532: LD_EXP 78
6536: PPUSH
6537: CALL_OW 302
6541: NOT
6542: OR
6543: IFFALSE 6646
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6545: LD_ADDR_VAR 0 2
6549: PUSH
6550: LD_EXP 77
6554: PPUSH
6555: LD_INT 50
6557: PUSH
6558: EMPTY
6559: LIST
6560: PPUSH
6561: CALL_OW 72
6565: PUSH
6566: LD_EXP 79
6570: DIFF
6571: ST_TO_ADDR
// if soldsOK then
6572: LD_VAR 0 2
6576: IFFALSE 6646
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6578: LD_VAR 0 2
6582: PUSH
6583: LD_INT 1
6585: ARRAY
6586: PPUSH
6587: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6591: LD_VAR 0 2
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: PPUSH
6600: LD_INT 112
6602: PPUSH
6603: LD_INT 96
6605: PPUSH
6606: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6610: LD_VAR 0 2
6614: PUSH
6615: LD_INT 1
6617: ARRAY
6618: PPUSH
6619: LD_INT 3
6621: PPUSH
6622: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6626: LD_ADDR_EXP 77
6630: PUSH
6631: LD_EXP 77
6635: PUSH
6636: LD_VAR 0 2
6640: PUSH
6641: LD_INT 1
6643: ARRAY
6644: DIFF
6645: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6646: LD_EXP 79
6650: NOT
6651: PUSH
6652: LD_EXP 79
6656: PPUSH
6657: CALL_OW 302
6661: NOT
6662: OR
6663: IFFALSE 6766
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6665: LD_ADDR_VAR 0 2
6669: PUSH
6670: LD_EXP 77
6674: PPUSH
6675: LD_INT 50
6677: PUSH
6678: EMPTY
6679: LIST
6680: PPUSH
6681: CALL_OW 72
6685: PUSH
6686: LD_EXP 78
6690: DIFF
6691: ST_TO_ADDR
// if soldsOK then
6692: LD_VAR 0 2
6696: IFFALSE 6766
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6698: LD_VAR 0 2
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6711: LD_VAR 0 2
6715: PUSH
6716: LD_INT 1
6718: ARRAY
6719: PPUSH
6720: LD_INT 112
6722: PPUSH
6723: LD_INT 96
6725: PPUSH
6726: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6730: LD_VAR 0 2
6734: PUSH
6735: LD_INT 1
6737: ARRAY
6738: PPUSH
6739: LD_INT 3
6741: PPUSH
6742: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6746: LD_ADDR_EXP 77
6750: PUSH
6751: LD_EXP 77
6755: PUSH
6756: LD_VAR 0 2
6760: PUSH
6761: LD_INT 1
6763: ARRAY
6764: DIFF
6765: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6766: LD_EXP 78
6770: PUSH
6771: LD_EXP 79
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6784: LD_EXP 78
6788: PUSH
6789: LD_EXP 79
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PPUSH
6798: LD_INT 112
6800: PPUSH
6801: LD_INT 96
6803: PPUSH
6804: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6808: LD_EXP 78
6812: PUSH
6813: LD_EXP 79
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: LD_INT 3
6824: PPUSH
6825: CALL_OW 235
// end ; end_of_file
6829: LD_VAR 0 1
6833: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6834: LD_INT 0
6836: PPUSH
6837: PPUSH
6838: PPUSH
6839: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6840: LD_EXP 62
6844: PPUSH
6845: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6849: LD_EXP 62
6853: PPUSH
6854: LD_INT 163
6856: PPUSH
6857: LD_INT 108
6859: PPUSH
6860: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6864: LD_EXP 62
6868: PPUSH
6869: LD_EXP 67
6873: PPUSH
6874: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6878: LD_ADDR_VAR 0 2
6882: PUSH
6883: LD_INT 22
6885: PUSH
6886: LD_INT 3
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 21
6895: PUSH
6896: LD_INT 1
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PUSH
6912: LD_EXP 62
6916: DIFF
6917: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6918: LD_ADDR_VAR 0 4
6922: PUSH
6923: DOUBLE
6924: LD_INT 1
6926: DEC
6927: ST_TO_ADDR
6928: LD_EXP 52
6932: PUSH
6933: FOR_TO
6934: IFFALSE 7052
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6936: LD_ADDR_VAR 0 3
6940: PUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_EXP 52
6950: PUSH
6951: LD_VAR 0 4
6955: ARRAY
6956: PUSH
6957: LD_INT 1
6959: ARRAY
6960: PPUSH
6961: LD_EXP 52
6965: PUSH
6966: LD_VAR 0 4
6970: ARRAY
6971: PUSH
6972: LD_INT 2
6974: ARRAY
6975: PPUSH
6976: CALL_OW 73
6980: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6981: LD_VAR 0 3
6985: PPUSH
6986: LD_EXP 52
6990: PUSH
6991: LD_VAR 0 4
6995: ARRAY
6996: PUSH
6997: LD_INT 1
6999: ARRAY
7000: PPUSH
7001: LD_EXP 52
7005: PUSH
7006: LD_VAR 0 4
7010: ARRAY
7011: PUSH
7012: LD_INT 2
7014: ARRAY
7015: PPUSH
7016: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7020: LD_VAR 0 3
7024: PPUSH
7025: LD_EXP 67
7029: PPUSH
7030: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7034: LD_ADDR_VAR 0 2
7038: PUSH
7039: LD_VAR 0 2
7043: PUSH
7044: LD_VAR 0 3
7048: DIFF
7049: ST_TO_ADDR
// end ;
7050: GO 6933
7052: POP
7053: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7054: LD_EXP 62
7058: PPUSH
7059: CALL_OW 87
// wait ( 0 0$1 ) ;
7063: LD_INT 35
7065: PPUSH
7066: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7070: LD_EXP 62
7074: PPUSH
7075: LD_EXP 67
7079: PPUSH
7080: CALL_OW 296
7084: PUSH
7085: LD_INT 4
7087: LESS
7088: IFFALSE 7054
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7090: LD_EXP 62
7094: PUSH
7095: LD_EXP 67
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: PPUSH
7104: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7108: LD_EXP 67
7112: PPUSH
7113: LD_EXP 62
7117: PPUSH
7118: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7122: LD_EXP 67
7126: PPUSH
7127: LD_STRING D1-Kur-1
7129: PPUSH
7130: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7134: LD_EXP 62
7138: PPUSH
7139: LD_STRING D1-Bur-1
7141: PPUSH
7142: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7146: LD_EXP 67
7150: PPUSH
7151: LD_STRING D1-Kur-2
7153: PPUSH
7154: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7158: LD_EXP 62
7162: PPUSH
7163: LD_STRING D1-Bur-2
7165: PPUSH
7166: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7170: LD_EXP 67
7174: PPUSH
7175: LD_STRING D1-Kur-3
7177: PPUSH
7178: CALL_OW 88
// if IsOK ( Gnyevko ) then
7182: LD_EXP 63
7186: PPUSH
7187: CALL_OW 302
7191: IFFALSE 7205
// Say ( Kurin , D1-Kur-3a ) ;
7193: LD_EXP 67
7197: PPUSH
7198: LD_STRING D1-Kur-3a
7200: PPUSH
7201: CALL_OW 88
// InGameOff ;
7205: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7209: LD_INT 22
7211: PUSH
7212: LD_INT 3
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 1
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 69
7237: PUSH
7238: LD_EXP 62
7242: PUSH
7243: LD_EXP 63
7247: PUSH
7248: EMPTY
7249: LIST
7250: LIST
7251: DIFF
7252: PPUSH
7253: LD_INT 6
7255: PPUSH
7256: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7260: LD_EXP 70
7264: PPUSH
7265: LD_INT 3
7267: PPUSH
7268: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7272: LD_INT 9
7274: PPUSH
7275: LD_INT 22
7277: PUSH
7278: LD_INT 6
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 21
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 70
7303: PUSH
7304: LD_EXP 67
7308: DIFF
7309: PPUSH
7310: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7314: LD_EXP 66
7318: PPUSH
7319: LD_INT 95
7321: PPUSH
7322: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7326: LD_EXP 64
7330: PPUSH
7331: LD_INT 95
7333: PPUSH
7334: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7338: LD_EXP 65
7342: PPUSH
7343: CALL_OW 305
7347: IFFALSE 7361
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7349: LD_EXP 65
7353: PPUSH
7354: LD_INT 83
7356: PPUSH
7357: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7361: LD_STRING 01_Gnyevko
7363: PPUSH
7364: CALL_OW 28
7368: NOT
7369: IFFALSE 7383
// SetSide ( randomMech , 3 ) ;
7371: LD_EXP 71
7375: PPUSH
7376: LD_INT 3
7378: PPUSH
7379: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7383: LD_STRING M1
7385: PPUSH
7386: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7390: LD_INT 3
7392: PPUSH
7393: LD_INT 6
7395: PPUSH
7396: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7400: LD_INT 3
7402: PPUSH
7403: LD_INT 7
7405: PPUSH
7406: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7410: LD_INT 6
7412: PPUSH
7413: LD_INT 6
7415: PPUSH
7416: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7420: LD_INT 6
7422: PPUSH
7423: LD_INT 7
7425: PPUSH
7426: CALL_OW 334
// SaveForQuickRestart ;
7430: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7434: LD_EXP 66
7438: PPUSH
7439: LD_INT 95
7441: PPUSH
7442: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7446: LD_EXP 64
7450: PPUSH
7451: LD_INT 95
7453: PPUSH
7454: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7458: LD_EXP 65
7462: PPUSH
7463: CALL_OW 305
7467: IFFALSE 7481
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7469: LD_EXP 65
7473: PPUSH
7474: LD_INT 83
7476: PPUSH
7477: CALL_OW 120
// end ;
7481: LD_VAR 0 1
7485: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7486: LD_EXP 20
7490: NOT
7491: PUSH
7492: LD_INT 20
7494: PPUSH
7495: LD_INT 22
7497: PUSH
7498: LD_INT 3
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 2
7507: PUSH
7508: LD_INT 21
7510: PUSH
7511: LD_INT 1
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 21
7520: PUSH
7521: LD_INT 2
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: PPUSH
7537: CALL_OW 70
7541: PUSH
7542: LD_INT 0
7544: GREATER
7545: AND
7546: IFFALSE 7920
7548: GO 7550
7550: DISABLE
7551: LD_INT 0
7553: PPUSH
// begin enable ;
7554: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7555: LD_ADDR_VAR 0 1
7559: PUSH
7560: LD_INT 20
7562: PPUSH
7563: LD_INT 22
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 2
7575: PUSH
7576: LD_INT 21
7578: PUSH
7579: LD_INT 1
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 21
7588: PUSH
7589: LD_INT 2
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 70
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7897
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7613: LD_VAR 0 1
7617: PPUSH
7618: LD_VAR 0 1
7622: PPUSH
7623: CALL_OW 250
7627: PPUSH
7628: LD_VAR 0 1
7632: PPUSH
7633: CALL_OW 251
7637: PUSH
7638: LD_INT 5
7640: PLUS
7641: PPUSH
7642: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7646: LD_EXP 7
7650: NOT
7651: PUSH
7652: LD_EXP 33
7656: NOT
7657: AND
7658: IFFALSE 7721
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7660: LD_VAR 0 1
7664: PUSH
7665: LD_EXP 62
7669: NONEQUAL
7670: PUSH
7671: LD_EXP 70
7675: PPUSH
7676: CALL_OW 302
7680: AND
7681: IFFALSE 7695
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7683: LD_EXP 70
7687: PPUSH
7688: LD_STRING D1b-Kov-1
7690: PPUSH
7691: CALL_OW 88
// if unit = Burlak then
7695: LD_VAR 0 1
7699: PUSH
7700: LD_EXP 62
7704: EQUAL
7705: IFFALSE 7719
// Say ( Burlak , D1b-Bur-1 ) ;
7707: LD_EXP 62
7711: PPUSH
7712: LD_STRING D1b-Bur-1
7714: PPUSH
7715: CALL_OW 88
// end else
7719: GO 7740
// if not dialogLoopBlocker then
7721: LD_EXP 33
7725: NOT
7726: IFFALSE 7740
// Say ( Platonov , D8-Pla-1 ) ;
7728: LD_EXP 76
7732: PPUSH
7733: LD_STRING D8-Pla-1
7735: PPUSH
7736: CALL_OW 88
// if not dialogLoopBlocker then
7740: LD_EXP 33
7744: NOT
7745: IFFALSE 7755
// dialogLoopBlocker = true ;
7747: LD_ADDR_EXP 33
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7755: LD_INT 20
7757: PPUSH
7758: LD_INT 22
7760: PUSH
7761: LD_INT 3
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: PUSH
7768: LD_INT 2
7770: PUSH
7771: LD_INT 21
7773: PUSH
7774: LD_INT 1
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 21
7783: PUSH
7784: LD_INT 2
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: EMPTY
7792: LIST
7793: LIST
7794: LIST
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PPUSH
7800: CALL_OW 70
7804: PPUSH
7805: LD_VAR 0 1
7809: PPUSH
7810: CALL_OW 250
7814: PPUSH
7815: LD_VAR 0 1
7819: PPUSH
7820: CALL_OW 251
7824: PUSH
7825: LD_INT 5
7827: PLUS
7828: PPUSH
7829: CALL_OW 111
// wait ( 0 0$1 ) ;
7833: LD_INT 35
7835: PPUSH
7836: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7840: LD_INT 20
7842: PPUSH
7843: LD_INT 22
7845: PUSH
7846: LD_INT 3
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 2
7855: PUSH
7856: LD_INT 21
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 21
7868: PUSH
7869: LD_INT 2
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: EMPTY
7877: LIST
7878: LIST
7879: LIST
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 70
7889: PUSH
7890: LD_INT 0
7892: EQUAL
7893: IFFALSE 7755
// end ;
7895: GO 7610
7897: POP
7898: POP
// if dialogLoopBlocker then
7899: LD_EXP 33
7903: IFFALSE 7920
// begin wait ( 0 0$5 ) ;
7905: LD_INT 175
7907: PPUSH
7908: CALL_OW 67
// dialogLoopBlocker = false ;
7912: LD_ADDR_EXP 33
7916: PUSH
7917: LD_INT 0
7919: ST_TO_ADDR
// end ; end ;
7920: PPOPN 1
7922: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7923: LD_EXP 19
7927: NOT
7928: PUSH
7929: LD_INT 8
7931: PPUSH
7932: LD_INT 22
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 2
7944: PUSH
7945: LD_INT 21
7947: PUSH
7948: LD_INT 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 21
7957: PUSH
7958: LD_INT 2
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: PUSH
7970: EMPTY
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 71
7978: PUSH
7979: LD_INT 0
7981: GREATER
7982: AND
7983: IFFALSE 8118
7985: GO 7987
7987: DISABLE
7988: LD_INT 0
7990: PPUSH
// begin enable ;
7991: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7992: LD_ADDR_VAR 0 1
7996: PUSH
7997: LD_INT 8
7999: PPUSH
8000: LD_INT 22
8002: PUSH
8003: LD_INT 3
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: LD_INT 21
8015: PUSH
8016: LD_INT 1
8018: PUSH
8019: EMPTY
8020: LIST
8021: LIST
8022: PUSH
8023: LD_INT 21
8025: PUSH
8026: LD_INT 2
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PPUSH
8042: CALL_OW 71
8046: PUSH
8047: FOR_IN
8048: IFFALSE 8101
// begin ComMoveXY ( unit , 114 , 98 ) ;
8050: LD_VAR 0 1
8054: PPUSH
8055: LD_INT 114
8057: PPUSH
8058: LD_INT 98
8060: PPUSH
8061: CALL_OW 111
// if dialogLoopBlocker then
8065: LD_EXP 33
8069: IFFALSE 8075
// exit ;
8071: POP
8072: POP
8073: GO 8118
// dialogLoopBlocker = true ;
8075: LD_ADDR_EXP 33
8079: PUSH
8080: LD_INT 1
8082: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8083: LD_EXP 76
8087: PPUSH
8088: LD_STRING D8-Pla-1
8090: PPUSH
8091: CALL_OW 88
// exit ;
8095: POP
8096: POP
8097: GO 8118
// end ;
8099: GO 8047
8101: POP
8102: POP
// wait ( 0 0$5 ) ;
8103: LD_INT 175
8105: PPUSH
8106: CALL_OW 67
// dialogLoopBlocker = false ;
8110: LD_ADDR_EXP 33
8114: PUSH
8115: LD_INT 0
8117: ST_TO_ADDR
// end ;
8118: PPOPN 1
8120: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8121: LD_EXP 7
8125: NOT
8126: PUSH
8127: LD_INT 9
8129: PPUSH
8130: LD_INT 22
8132: PUSH
8133: LD_INT 3
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 21
8142: PUSH
8143: LD_INT 1
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PPUSH
8154: CALL_OW 70
8158: PUSH
8159: LD_INT 0
8161: GREATER
8162: AND
8163: IFFALSE 8180
8165: GO 8167
8167: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8168: LD_EXP 67
8172: PPUSH
8173: LD_STRING D1a-Kur-1
8175: PPUSH
8176: CALL_OW 88
8180: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
8181: LD_EXP 7
8185: NOT
8186: PUSH
8187: LD_EXP 62
8191: PPUSH
8192: CALL_OW 302
8196: AND
8197: PUSH
8198: LD_INT 8
8200: PPUSH
8201: LD_INT 22
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: PUSH
8211: LD_INT 21
8213: PUSH
8214: LD_INT 1
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: EMPTY
8222: LIST
8223: LIST
8224: PPUSH
8225: CALL_OW 70
8229: PUSH
8230: LD_INT 0
8232: GREATER
8233: AND
8234: IFFALSE 8734
8236: GO 8238
8238: DISABLE
8239: LD_INT 0
8241: PPUSH
8242: PPUSH
8243: PPUSH
8244: PPUSH
// begin enable ;
8245: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_INT 22
8253: PUSH
8254: LD_INT 3
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 21
8263: PUSH
8264: LD_INT 1
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PPUSH
8275: CALL_OW 69
8279: PUSH
8280: FOR_IN
8281: IFFALSE 8732
// if See ( 6 , unit ) then
8283: LD_INT 6
8285: PPUSH
8286: LD_VAR 0 2
8290: PPUSH
8291: CALL_OW 292
8295: IFFALSE 8730
// begin meetPlatonov = true ;
8297: LD_ADDR_EXP 7
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// InGameOn ;
8305: CALL_OW 8
// DialogueOn ;
8309: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
8313: LD_ADDR_VAR 0 4
8317: PUSH
8318: LD_EXP 77
8322: PPUSH
8323: LD_INT 26
8325: PUSH
8326: LD_INT 1
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 72
8337: PPUSH
8338: LD_STRING D2-RSol1-1
8340: PPUSH
8341: LD_STRING 
8343: PPUSH
8344: LD_INT 0
8346: PPUSH
8347: CALL 4093 0 4
8351: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
8352: LD_EXP 62
8356: PPUSH
8357: LD_STRING D2-Bur-1
8359: PPUSH
8360: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
8364: LD_VAR 0 4
8368: PPUSH
8369: LD_STRING D2-RSol1-2
8371: PPUSH
8372: CALL_OW 88
// DialogueOff ;
8376: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8380: LD_ADDR_VAR 0 3
8384: PUSH
8385: LD_INT 22
8387: PUSH
8388: LD_INT 3
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_INT 21
8397: PUSH
8398: LD_INT 1
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 50
8407: PUSH
8408: EMPTY
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: LIST
8415: PPUSH
8416: CALL_OW 69
8420: ST_TO_ADDR
// for i := 1 to yourUnits do
8421: LD_ADDR_VAR 0 1
8425: PUSH
8426: DOUBLE
8427: LD_INT 1
8429: DEC
8430: ST_TO_ADDR
8431: LD_VAR 0 3
8435: PUSH
8436: FOR_TO
8437: IFFALSE 8506
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8439: LD_VAR 0 3
8443: PUSH
8444: LD_VAR 0 1
8448: ARRAY
8449: PPUSH
8450: LD_EXP 53
8454: PUSH
8455: LD_VAR 0 1
8459: ARRAY
8460: PUSH
8461: LD_INT 1
8463: ARRAY
8464: PPUSH
8465: LD_EXP 53
8469: PUSH
8470: LD_VAR 0 1
8474: ARRAY
8475: PUSH
8476: LD_INT 2
8478: ARRAY
8479: PPUSH
8480: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8484: LD_VAR 0 3
8488: PUSH
8489: LD_VAR 0 1
8493: ARRAY
8494: PPUSH
8495: LD_EXP 76
8499: PPUSH
8500: CALL_OW 179
// end ;
8504: GO 8436
8506: POP
8507: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8508: LD_EXP 62
8512: PPUSH
8513: CALL_OW 87
// wait ( 0 0$1 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8524: LD_EXP 62
8528: PPUSH
8529: LD_EXP 76
8533: PPUSH
8534: CALL_OW 296
8538: PUSH
8539: LD_INT 4
8541: LESS
8542: IFFALSE 8508
// ComTurnUnit ( Platonov , Burlak ) ;
8544: LD_EXP 76
8548: PPUSH
8549: LD_EXP 62
8553: PPUSH
8554: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8558: LD_EXP 76
8562: PPUSH
8563: LD_STRING D2-Pla-2
8565: PPUSH
8566: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8570: LD_EXP 62
8574: PPUSH
8575: LD_STRING D2-Bur-2
8577: PPUSH
8578: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8582: LD_EXP 76
8586: PPUSH
8587: LD_STRING D2-Pla-3
8589: PPUSH
8590: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8594: LD_EXP 62
8598: PPUSH
8599: LD_STRING D2-Bur-3
8601: PPUSH
8602: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8606: LD_EXP 76
8610: PPUSH
8611: LD_STRING D2-Pla-4
8613: PPUSH
8614: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8618: LD_EXP 62
8622: PPUSH
8623: LD_STRING D2-Bur-4
8625: PPUSH
8626: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8630: LD_EXP 76
8634: PPUSH
8635: LD_STRING D2-Pla-5
8637: PPUSH
8638: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8642: LD_INT 1
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 3
8650: PUSH
8651: LD_INT 4
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL 4426 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8664: LD_EXP 76
8668: PPUSH
8669: LD_STRING D3-Pla-1
8671: PPUSH
8672: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8676: LD_EXP 62
8680: PPUSH
8681: LD_STRING D3-Bur-1
8683: PPUSH
8684: CALL_OW 88
// InGameOff ;
8688: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8692: LD_STRING M2a
8694: PPUSH
8695: CALL_OW 337
// ComFree ( Platonov ) ;
8699: LD_EXP 76
8703: PPUSH
8704: CALL_OW 139
// SetSide ( beria , 3 ) ;
8708: LD_INT 106
8710: PPUSH
8711: LD_INT 3
8713: PPUSH
8714: CALL_OW 235
// canExitBase = false ;
8718: LD_ADDR_EXP 19
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// exit ;
8726: POP
8727: POP
8728: GO 8734
// end ;
8730: GO 8280
8732: POP
8733: POP
// end ;
8734: PPOPN 4
8736: END
// export function Dial_LabConstructed ; begin
8737: LD_INT 0
8739: PPUSH
// labConstructed = true ;
8740: LD_ADDR_EXP 8
8744: PUSH
8745: LD_INT 1
8747: ST_TO_ADDR
// DialogueOn ;
8748: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8752: LD_EXP 62
8756: PPUSH
8757: LD_STRING D5a-Bur-1
8759: PPUSH
8760: CALL_OW 88
// if workshopConstructed then
8764: LD_EXP 9
8768: IFFALSE 8784
// Say ( Platonov , D5a-Pla-1 ) else
8770: LD_EXP 76
8774: PPUSH
8775: LD_STRING D5a-Pla-1
8777: PPUSH
8778: CALL_OW 88
8782: GO 8796
// Say ( Platonov , D5a-Pla-1a ) ;
8784: LD_EXP 76
8788: PPUSH
8789: LD_STRING D5a-Pla-1a
8791: PPUSH
8792: CALL_OW 88
// DialogueOff ;
8796: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8800: LD_STRING M2b
8802: PPUSH
8803: CALL_OW 337
// end ;
8807: LD_VAR 0 1
8811: RET
// export function Dial_WorkshopConstructed ; begin
8812: LD_INT 0
8814: PPUSH
// workshopConstructed = true ;
8815: LD_ADDR_EXP 9
8819: PUSH
8820: LD_INT 1
8822: ST_TO_ADDR
// DialogueOn ;
8823: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8827: LD_EXP 62
8831: PPUSH
8832: LD_STRING D5b-Bur-1
8834: PPUSH
8835: CALL_OW 88
// if labConstructed then
8839: LD_EXP 8
8843: IFFALSE 8859
// Say ( Platonov , D5b-Pla-1 ) else
8845: LD_EXP 76
8849: PPUSH
8850: LD_STRING D5b-Pla-1
8852: PPUSH
8853: CALL_OW 88
8857: GO 8871
// Say ( Platonov , D5b-Pla-1a ) ;
8859: LD_EXP 76
8863: PPUSH
8864: LD_STRING D5b-Pla-1a
8866: PPUSH
8867: CALL_OW 88
// DialogueOff ;
8871: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8875: LD_STRING M2c
8877: PPUSH
8878: CALL_OW 337
// end ;
8882: LD_VAR 0 1
8886: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
8887: LD_INT 0
8889: PPUSH
// wait ( 0 0$1 ) ;
8890: LD_INT 35
8892: PPUSH
8893: CALL_OW 67
// CenterNowOnUnits ( building ) ;
8897: LD_VAR 0 1
8901: PPUSH
8902: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8906: LD_INT 22
8908: PUSH
8909: LD_INT 3
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PPUSH
8930: CALL_OW 69
8934: PPUSH
8935: CALL_OW 141
// DialogueOn ;
8939: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
8943: LD_EXP 76
8947: PPUSH
8948: LD_STRING D6-Pla-1
8950: PPUSH
8951: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8955: LD_EXP 62
8959: PPUSH
8960: LD_STRING D6-Bur-1
8962: PPUSH
8963: CALL_OW 88
// DialogueOff ;
8967: CALL_OW 7
// case GetBType ( building ) of b_lab :
8971: LD_VAR 0 1
8975: PPUSH
8976: CALL_OW 266
8980: PUSH
8981: LD_INT 6
8983: DOUBLE
8984: EQUAL
8985: IFTRUE 8989
8987: GO 9029
8989: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
8990: LD_INT 106
8992: PPUSH
8993: CALL_OW 274
8997: PPUSH
8998: LD_INT 1
9000: PPUSH
9001: LD_INT 106
9003: PPUSH
9004: CALL_OW 274
9008: PPUSH
9009: LD_INT 1
9011: PPUSH
9012: CALL_OW 275
9016: PUSH
9017: LD_EXP 54
9021: PLUS
9022: PPUSH
9023: CALL_OW 277
9027: GO 9222
9029: LD_INT 2
9031: DOUBLE
9032: EQUAL
9033: IFTRUE 9037
9035: GO 9077
9037: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9038: LD_INT 106
9040: PPUSH
9041: CALL_OW 274
9045: PPUSH
9046: LD_INT 1
9048: PPUSH
9049: LD_INT 106
9051: PPUSH
9052: CALL_OW 274
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: CALL_OW 275
9064: PUSH
9065: LD_EXP 55
9069: PLUS
9070: PPUSH
9071: CALL_OW 277
9075: GO 9222
9077: LD_INT 26
9079: DOUBLE
9080: EQUAL
9081: IFTRUE 9085
9083: GO 9125
9085: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9086: LD_INT 106
9088: PPUSH
9089: CALL_OW 274
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: LD_INT 106
9099: PPUSH
9100: CALL_OW 274
9104: PPUSH
9105: LD_INT 1
9107: PPUSH
9108: CALL_OW 275
9112: PUSH
9113: LD_EXP 56
9117: PLUS
9118: PPUSH
9119: CALL_OW 277
9123: GO 9222
9125: LD_INT 4
9127: DOUBLE
9128: EQUAL
9129: IFTRUE 9133
9131: GO 9173
9133: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9134: LD_INT 106
9136: PPUSH
9137: CALL_OW 274
9141: PPUSH
9142: LD_INT 1
9144: PPUSH
9145: LD_INT 106
9147: PPUSH
9148: CALL_OW 274
9152: PPUSH
9153: LD_INT 1
9155: PPUSH
9156: CALL_OW 275
9160: PUSH
9161: LD_EXP 57
9165: PLUS
9166: PPUSH
9167: CALL_OW 277
9171: GO 9222
9173: LD_INT 31
9175: DOUBLE
9176: EQUAL
9177: IFTRUE 9181
9179: GO 9221
9181: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9182: LD_INT 106
9184: PPUSH
9185: CALL_OW 274
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: LD_INT 106
9195: PPUSH
9196: CALL_OW 274
9200: PPUSH
9201: LD_INT 1
9203: PPUSH
9204: CALL_OW 275
9208: PUSH
9209: LD_EXP 58
9213: PLUS
9214: PPUSH
9215: CALL_OW 277
9219: GO 9222
9221: POP
// RemoveUnit ( building ) ;
9222: LD_VAR 0 1
9226: PPUSH
9227: CALL_OW 64
// end ;
9231: LD_VAR 0 2
9235: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9236: LD_EXP 9
9240: PUSH
9241: LD_EXP 8
9245: AND
9246: IFFALSE 9355
9248: GO 9250
9250: DISABLE
// begin DialogueOn ;
9251: CALL_OW 6
// if engineResearched then
9255: LD_EXP 10
9259: IFFALSE 9287
// begin Say ( Burlak , D7b-Bur-1 ) ;
9261: LD_EXP 62
9265: PPUSH
9266: LD_STRING D7b-Bur-1
9268: PPUSH
9269: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9273: LD_EXP 76
9277: PPUSH
9278: LD_STRING D7b-Pla-1
9280: PPUSH
9281: CALL_OW 88
// end else
9285: GO 9311
// begin Say ( Burlak , D7a-Bur-1 ) ;
9287: LD_EXP 62
9291: PPUSH
9292: LD_STRING D7a-Bur-1
9294: PPUSH
9295: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9299: LD_EXP 76
9303: PPUSH
9304: LD_STRING D7a-Pla-1
9306: PPUSH
9307: CALL_OW 88
// end ; DialogueOff ;
9311: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9315: LD_STRING M2
9317: PPUSH
9318: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9322: LD_INT 3
9324: PPUSH
9325: LD_EXP 76
9329: PPUSH
9330: CALL_OW 250
9334: PPUSH
9335: LD_EXP 76
9339: PPUSH
9340: CALL_OW 251
9344: PPUSH
9345: LD_INT 5
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: CALL_OW 56
// end ;
9355: END
// export function Dial_NewCrates ( x , y ) ; begin
9356: LD_INT 0
9358: PPUSH
// wait ( 0 0$18 ) ;
9359: LD_INT 630
9361: PPUSH
9362: CALL_OW 67
// if not spawnCrates then
9366: LD_EXP 21
9370: NOT
9371: IFFALSE 9375
// exit ;
9373: GO 9406
// ComMoveXY ( Platonov , x , y ) ;
9375: LD_EXP 76
9379: PPUSH
9380: LD_VAR 0 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PPUSH
9390: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9394: LD_EXP 76
9398: PPUSH
9399: LD_STRING D4-Pla-1
9401: PPUSH
9402: CALL_OW 88
// end ;
9406: LD_VAR 0 3
9410: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9411: LD_INT 0
9413: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9414: LD_ADDR_EXP 13
9418: PUSH
9419: LD_INT 22
9421: PUSH
9422: LD_INT 3
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 21
9431: PUSH
9432: LD_INT 2
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: EMPTY
9440: LIST
9441: LIST
9442: PPUSH
9443: CALL_OW 69
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: ST_TO_ADDR
// constructedFirstVehicle = true ;
9452: LD_ADDR_EXP 12
9456: PUSH
9457: LD_INT 1
9459: ST_TO_ADDR
// InGameOn ;
9460: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9464: LD_VAR 0 1
9468: PPUSH
9469: CALL_OW 87
// wait ( 0 0$3 ) ;
9473: LD_INT 105
9475: PPUSH
9476: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9480: LD_EXP 62
9484: PPUSH
9485: LD_STRING D9-Bur-1
9487: PPUSH
9488: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9492: LD_EXP 76
9496: PPUSH
9497: LD_EXP 13
9501: PPUSH
9502: CALL_OW 250
9506: PPUSH
9507: LD_EXP 13
9511: PPUSH
9512: CALL_OW 251
9516: PPUSH
9517: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9521: LD_INT 35
9523: PPUSH
9524: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9528: LD_EXP 76
9532: PPUSH
9533: LD_EXP 13
9537: PPUSH
9538: CALL_OW 296
9542: PUSH
9543: LD_INT 4
9545: LESS
9546: IFFALSE 9521
// ComTurnUnit ( Platonov , firstVeh ) ;
9548: LD_EXP 76
9552: PPUSH
9553: LD_EXP 13
9557: PPUSH
9558: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9562: LD_EXP 76
9566: PPUSH
9567: LD_STRING D9-Pla-1
9569: PPUSH
9570: CALL_OW 88
// InGameOff ;
9574: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9578: LD_STRING M3
9580: PPUSH
9581: CALL_OW 337
// canExitBase = true ;
9585: LD_ADDR_EXP 19
9589: PUSH
9590: LD_INT 1
9592: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9593: LD_EXP 76
9597: PPUSH
9598: LD_INT 112
9600: PPUSH
9601: LD_INT 97
9603: PPUSH
9604: CALL_OW 111
// end ;
9608: LD_VAR 0 2
9612: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9613: LD_EXP 13
9617: PPUSH
9618: LD_INT 9
9620: PPUSH
9621: CALL_OW 308
9625: PUSH
9626: LD_EXP 14
9630: NOT
9631: AND
9632: IFFALSE 10486
9634: GO 9636
9636: DISABLE
9637: LD_INT 0
9639: PPUSH
9640: PPUSH
9641: PPUSH
// begin vehicleForKurin = true ;
9642: LD_ADDR_EXP 14
9646: PUSH
9647: LD_INT 1
9649: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9650: LD_ADDR_VAR 0 2
9654: PUSH
9655: LD_EXP 69
9659: PPUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 2
9665: PUSH
9666: EMPTY
9667: LIST
9668: LIST
9669: PPUSH
9670: CALL_OW 72
9674: PUSH
9675: LD_INT 1
9677: ARRAY
9678: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_EXP 69
9688: PPUSH
9689: LD_INT 25
9691: PUSH
9692: LD_INT 3
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PPUSH
9699: CALL_OW 72
9703: PUSH
9704: LD_INT 1
9706: ARRAY
9707: ST_TO_ADDR
// InGameOn ;
9708: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9712: LD_EXP 67
9716: PPUSH
9717: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9721: LD_EXP 13
9725: PPUSH
9726: LD_EXP 67
9730: PPUSH
9731: CALL_OW 250
9735: PPUSH
9736: LD_EXP 67
9740: PPUSH
9741: CALL_OW 251
9745: PPUSH
9746: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9750: LD_EXP 67
9754: PPUSH
9755: LD_STRING D10-Kur-1
9757: PPUSH
9758: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9762: LD_INT 35
9764: PPUSH
9765: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9769: LD_EXP 13
9773: PPUSH
9774: LD_EXP 67
9778: PPUSH
9779: CALL_OW 250
9783: PPUSH
9784: LD_EXP 67
9788: PPUSH
9789: CALL_OW 251
9793: PPUSH
9794: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9798: LD_EXP 13
9802: PPUSH
9803: LD_EXP 67
9807: PPUSH
9808: CALL_OW 296
9812: PUSH
9813: LD_INT 9
9815: LESS
9816: IFFALSE 9762
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9818: LD_EXP 13
9822: PPUSH
9823: CALL_OW 313
9827: PPUSH
9828: CALL_OW 121
// wait ( 0 0$1 ) ;
9832: LD_INT 35
9834: PPUSH
9835: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
9839: LD_EXP 13
9843: PPUSH
9844: CALL_OW 256
9848: PUSH
9849: LD_INT 1000
9851: LESS
9852: IFFALSE 9884
// begin ComExitBuilding ( mech ) ;
9854: LD_VAR 0 3
9858: PPUSH
9859: CALL_OW 122
// wait ( 0 0$1 ) ;
9863: LD_INT 35
9865: PPUSH
9866: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
9870: LD_VAR 0 3
9874: PPUSH
9875: LD_EXP 13
9879: PPUSH
9880: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
9884: LD_EXP 13
9888: PPUSH
9889: CALL_OW 261
9893: PUSH
9894: LD_INT 90
9896: LESS
9897: IFFALSE 9932
// begin ComExitBuilding ( eng ) ;
9899: LD_VAR 0 2
9903: PPUSH
9904: CALL_OW 122
// wait ( 0 0$1 ) ;
9908: LD_INT 35
9910: PPUSH
9911: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
9915: LD_VAR 0 2
9919: PPUSH
9920: LD_INT 71
9922: PPUSH
9923: LD_EXP 13
9927: PPUSH
9928: CALL 4664 0 3
// end ; repeat wait ( 0 0$1 ) ;
9932: LD_INT 35
9934: PPUSH
9935: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
9939: LD_EXP 13
9943: PPUSH
9944: CALL_OW 256
9948: PUSH
9949: LD_INT 1000
9951: EQUAL
9952: PUSH
9953: LD_EXP 13
9957: PPUSH
9958: CALL_OW 261
9962: PUSH
9963: LD_INT 90
9965: GREATER
9966: AND
9967: IFFALSE 9932
// if UnitsInside ( firstVeh ) then
9969: LD_EXP 13
9973: PPUSH
9974: CALL_OW 313
9978: IFFALSE 9998
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
9980: LD_EXP 13
9984: PPUSH
9985: CALL_OW 313
9989: PUSH
9990: LD_INT 1
9992: ARRAY
9993: PPUSH
9994: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
9998: LD_VAR 0 2
10002: PPUSH
10003: LD_INT 71
10005: PPUSH
10006: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10010: LD_EXP 13
10014: PPUSH
10015: LD_INT 6
10017: PPUSH
10018: CALL_OW 235
// if belkovReturn then
10022: LD_EXP 6
10026: IFFALSE 10112
// begin if IsInUnit ( Belkov ) then
10028: LD_EXP 64
10032: PPUSH
10033: CALL_OW 310
10037: IFFALSE 10048
// ComExitBuilding ( Belkov ) ;
10039: LD_EXP 64
10043: PPUSH
10044: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10048: LD_INT 35
10050: PPUSH
10051: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10055: LD_EXP 64
10059: PPUSH
10060: LD_EXP 13
10064: PPUSH
10065: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10069: LD_EXP 64
10073: PPUSH
10074: CALL_OW 310
10078: PUSH
10079: LD_EXP 13
10083: EQUAL
10084: IFFALSE 10048
// Say ( Belkov , D10-Bel-1 ) ;
10086: LD_EXP 64
10090: PPUSH
10091: LD_STRING D10-Bel-1
10093: PPUSH
10094: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10098: LD_EXP 67
10102: PPUSH
10103: LD_STRING D10-Kur-2
10105: PPUSH
10106: CALL_OW 88
// end else
10110: GO 10238
// begin if IsInUnit ( Belkov2 ) then
10112: LD_EXP 68
10116: PPUSH
10117: CALL_OW 310
10121: IFFALSE 10132
// ComExitBuilding ( Belkov2 ) ;
10123: LD_EXP 68
10127: PPUSH
10128: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10132: LD_INT 35
10134: PPUSH
10135: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10139: LD_EXP 68
10143: PPUSH
10144: LD_EXP 13
10148: PPUSH
10149: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10153: LD_EXP 68
10157: PPUSH
10158: CALL_OW 310
10162: PUSH
10163: LD_EXP 13
10167: EQUAL
10168: IFFALSE 10132
// meetBelkovBrother = true ;
10170: LD_ADDR_EXP 4
10174: PUSH
10175: LD_INT 1
10177: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10178: LD_EXP 68
10182: PPUSH
10183: LD_STRING D10-Bel-1
10185: PPUSH
10186: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10190: LD_EXP 62
10194: PPUSH
10195: LD_STRING D10-Bur-1
10197: PPUSH
10198: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10202: LD_EXP 68
10206: PPUSH
10207: LD_STRING D10-Bel-2
10209: PPUSH
10210: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10214: LD_EXP 62
10218: PPUSH
10219: LD_STRING D10-Bur-2
10221: PPUSH
10222: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10226: LD_EXP 67
10230: PPUSH
10231: LD_STRING D10-Kur-2a
10233: PPUSH
10234: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10238: LD_ADDR_EXP 74
10242: PUSH
10243: EMPTY
10244: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10245: LD_ADDR_EXP 75
10249: PUSH
10250: EMPTY
10251: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10252: LD_ADDR_EXP 22
10256: PUSH
10257: LD_INT 1
10259: ST_TO_ADDR
// CreateBelkovTeam ;
10260: CALL 6066 0 0
// ComExitBuilding ( belkovTeam ) ;
10264: LD_EXP 73
10268: PPUSH
10269: CALL_OW 122
// wait ( 0 0$1 ) ;
10273: LD_INT 35
10275: PPUSH
10276: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10280: LD_ADDR_EXP 72
10284: PUSH
10285: LD_INT 22
10287: PUSH
10288: LD_INT 6
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 21
10297: PUSH
10298: LD_INT 2
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: PPUSH
10309: CALL_OW 69
10313: PUSH
10314: LD_INT 1
10316: ARRAY
10317: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10318: LD_ADDR_EXP 73
10322: PUSH
10323: LD_EXP 73
10327: PUSH
10328: LD_EXP 72
10332: ADD
10333: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10334: LD_EXP 73
10338: PPUSH
10339: LD_INT 147
10341: PPUSH
10342: LD_INT 102
10344: PPUSH
10345: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10349: LD_EXP 73
10353: PPUSH
10354: LD_INT 133
10356: PPUSH
10357: LD_INT 94
10359: PPUSH
10360: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10364: LD_EXP 73
10368: PPUSH
10369: LD_INT 123
10371: PPUSH
10372: LD_INT 74
10374: PPUSH
10375: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10379: LD_EXP 73
10383: PPUSH
10384: LD_INT 111
10386: PPUSH
10387: LD_INT 48
10389: PPUSH
10390: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10394: LD_EXP 73
10398: PPUSH
10399: LD_INT 122
10401: PPUSH
10402: LD_INT 43
10404: PPUSH
10405: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10409: LD_EXP 73
10413: PPUSH
10414: LD_INT 129
10416: PPUSH
10417: LD_INT 32
10419: PPUSH
10420: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10424: LD_EXP 73
10428: PPUSH
10429: LD_INT 132
10431: PPUSH
10432: LD_INT 22
10434: PPUSH
10435: CALL_OW 171
// wait ( 0 0$8 ) ;
10439: LD_INT 280
10441: PPUSH
10442: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10446: LD_EXP 67
10450: PPUSH
10451: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10455: LD_EXP 67
10459: PPUSH
10460: LD_STRING D10-Kur-2b
10462: PPUSH
10463: CALL_OW 88
// InGameOff ;
10467: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10471: LD_STRING M4
10473: PPUSH
10474: CALL_OW 337
// backToBeria1 = true ;
10478: LD_ADDR_EXP 15
10482: PUSH
10483: LD_INT 1
10485: ST_TO_ADDR
// end ;
10486: PPOPN 3
10488: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10489: LD_INT 9
10491: PPUSH
10492: LD_INT 22
10494: PUSH
10495: LD_INT 3
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 21
10504: PUSH
10505: LD_INT 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 70
10520: PUSH
10521: LD_EXP 14
10525: AND
10526: IFFALSE 10543
10528: GO 10530
10530: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10531: LD_EXP 67
10535: PPUSH
10536: LD_STRING D1a-Kur-1a
10538: PPUSH
10539: CALL_OW 88
10543: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10544: LD_EXP 22
10548: IFFALSE 10951
10550: GO 10552
10552: DISABLE
10553: LD_INT 0
10555: PPUSH
10556: PPUSH
// begin enable ;
10557: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10558: LD_INT 10
10560: PPUSH
10561: LD_INT 22
10563: PUSH
10564: LD_INT 6
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PPUSH
10571: CALL_OW 70
10575: PUSH
10576: LD_INT 0
10578: EQUAL
10579: IFFALSE 10583
// exit ;
10581: GO 10951
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10583: LD_ADDR_VAR 0 1
10587: PUSH
10588: LD_INT 10
10590: PPUSH
10591: LD_INT 22
10593: PUSH
10594: LD_INT 6
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 70
10605: PUSH
10606: FOR_IN
10607: IFFALSE 10937
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10609: LD_VAR 0 1
10613: PPUSH
10614: CALL_OW 247
10618: PUSH
10619: LD_INT 1
10621: EQUAL
10622: PUSH
10623: LD_VAR 0 1
10627: PUSH
10628: LD_EXP 64
10632: EQUAL
10633: NOT
10634: PUSH
10635: LD_VAR 0 1
10639: PUSH
10640: LD_EXP 68
10644: EQUAL
10645: NOT
10646: AND
10647: PUSH
10648: LD_VAR 0 1
10652: PUSH
10653: LD_EXP 65
10657: EQUAL
10658: NOT
10659: AND
10660: AND
10661: IFFALSE 10702
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10663: LD_ADDR_EXP 23
10667: PUSH
10668: LD_EXP 23
10672: PUSH
10673: LD_INT 1
10675: PLUS
10676: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10677: LD_ADDR_EXP 74
10681: PUSH
10682: LD_EXP 74
10686: PUSH
10687: LD_VAR 0 1
10691: ADD
10692: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10693: LD_VAR 0 1
10697: PPUSH
10698: CALL_OW 64
// end ; if unit = Kirilenkova then
10702: LD_VAR 0 1
10706: PUSH
10707: LD_EXP 65
10711: EQUAL
10712: IFFALSE 10735
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10714: LD_EXP 65
10718: PPUSH
10719: LD_STRING 02_TmpKirilenkova
10721: PPUSH
10722: CALL_OW 38
// RemoveUnit ( unit ) ;
10726: LD_VAR 0 1
10730: PPUSH
10731: CALL_OW 64
// end ; if unit = Belkov2 then
10735: LD_VAR 0 1
10739: PUSH
10740: LD_EXP 68
10744: EQUAL
10745: IFFALSE 10768
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10747: LD_EXP 68
10751: PPUSH
10752: LD_STRING 02_TmpBelkov2
10754: PPUSH
10755: CALL_OW 38
// RemoveUnit ( unit ) ;
10759: LD_VAR 0 1
10763: PPUSH
10764: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10768: LD_VAR 0 1
10772: PPUSH
10773: CALL_OW 247
10777: PUSH
10778: LD_INT 2
10780: EQUAL
10781: IFFALSE 10935
// begin driver = UnitsInside ( unit ) ;
10783: LD_ADDR_VAR 0 2
10787: PUSH
10788: LD_VAR 0 1
10792: PPUSH
10793: CALL_OW 313
10797: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10798: LD_VAR 0 2
10802: PUSH
10803: LD_INT 1
10805: ARRAY
10806: PUSH
10807: LD_EXP 64
10811: EQUAL
10812: IFFALSE 10837
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10814: LD_EXP 64
10818: PPUSH
10819: LD_STRING 02_TmpBelkov
10821: PPUSH
10822: CALL_OW 38
// RemoveUnit ( unit ) ;
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 64
// end else
10835: GO 10858
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10837: LD_EXP 68
10841: PPUSH
10842: LD_STRING 02_TmpBelkov2
10844: PPUSH
10845: CALL_OW 38
// RemoveUnit ( unit ) ;
10849: LD_VAR 0 1
10853: PPUSH
10854: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
10858: LD_ADDR_EXP 75
10862: PUSH
10863: LD_EXP 75
10867: PUSH
10868: LD_VAR 0 1
10872: PPUSH
10873: CALL_OW 265
10877: PUSH
10878: LD_VAR 0 1
10882: PPUSH
10883: CALL_OW 262
10887: PUSH
10888: LD_VAR 0 1
10892: PPUSH
10893: CALL_OW 263
10897: PUSH
10898: LD_VAR 0 1
10902: PPUSH
10903: CALL_OW 264
10907: PUSH
10908: LD_VAR 0 1
10912: PPUSH
10913: CALL_OW 261
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: ADD
10925: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10926: LD_VAR 0 1
10930: PPUSH
10931: CALL_OW 64
// end ; end ;
10935: GO 10606
10937: POP
10938: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
10939: LD_EXP 74
10943: PPUSH
10944: LD_STRING 02_TmpBelkovTeam
10946: PPUSH
10947: CALL_OW 38
// end ;
10951: PPOPN 2
10953: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
10954: LD_INT 8
10956: PPUSH
10957: LD_INT 22
10959: PUSH
10960: LD_INT 3
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 21
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: PUSH
10977: EMPTY
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 71
10985: PUSH
10986: LD_INT 0
10988: EQUAL
10989: PUSH
10990: LD_EXP 15
10994: AND
10995: IFFALSE 11181
10997: GO 10999
10999: DISABLE
11000: LD_INT 0
11002: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11003: LD_ADDR_VAR 0 1
11007: PUSH
11008: LD_EXP 69
11012: PPUSH
11013: LD_INT 25
11015: PUSH
11016: LD_INT 2
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 72
11027: ST_TO_ADDR
// backToBeria1 = false ;
11028: LD_ADDR_EXP 15
11032: PUSH
11033: LD_INT 0
11035: ST_TO_ADDR
// canExitBase = false ;
11036: LD_ADDR_EXP 19
11040: PUSH
11041: LD_INT 0
11043: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11044: LD_EXP 76
11048: PPUSH
11049: LD_STRING D11-Pla-1
11051: PPUSH
11052: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11056: LD_INT 22
11058: PUSH
11059: LD_INT 3
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: LD_INT 21
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: PPUSH
11080: CALL_OW 69
11084: PUSH
11085: LD_INT 1
11087: GREATER
11088: IFFALSE 11104
// Say ( Burlak , D11-Bur-1a ) else
11090: LD_EXP 62
11094: PPUSH
11095: LD_STRING D11-Bur-1a
11097: PPUSH
11098: CALL_OW 88
11102: GO 11116
// Say ( Burlak , D11-Bur-1 ) ;
11104: LD_EXP 62
11108: PPUSH
11109: LD_STRING D11-Bur-1
11111: PPUSH
11112: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11116: LD_STRING M5
11118: PPUSH
11119: CALL_OW 337
// construcMoreVehicles = true ;
11123: LD_ADDR_EXP 17
11127: PUSH
11128: LD_INT 1
11130: ST_TO_ADDR
// spawnCrates = true ;
11131: LD_ADDR_EXP 21
11135: PUSH
11136: LD_INT 1
11138: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11139: LD_VAR 0 1
11143: PPUSH
11144: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11148: LD_VAR 0 1
11152: PPUSH
11153: LD_INT 2
11155: PPUSH
11156: LD_INT 159
11158: PPUSH
11159: LD_INT 112
11161: PPUSH
11162: LD_INT 0
11164: PPUSH
11165: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11169: LD_VAR 0 1
11173: PPUSH
11174: LD_INT 71
11176: PPUSH
11177: CALL_OW 180
// end ;
11181: PPOPN 1
11183: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11184: LD_EXP 18
11188: PUSH
11189: LD_INT 22
11191: PUSH
11192: LD_INT 3
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PUSH
11199: LD_INT 21
11201: PUSH
11202: LD_INT 1
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PPUSH
11213: CALL_OW 69
11217: GREATEREQUAL
11218: IFFALSE 12346
11220: GO 11222
11222: DISABLE
11223: LD_INT 0
11225: PPUSH
11226: PPUSH
// begin canRemoveBelkovUnits = false ;
11227: LD_ADDR_EXP 22
11231: PUSH
11232: LD_INT 0
11234: ST_TO_ADDR
// spawnCrates = false ;
11235: LD_ADDR_EXP 21
11239: PUSH
11240: LD_INT 0
11242: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11243: LD_INT 22
11245: PUSH
11246: LD_INT 3
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: LD_INT 2
11255: PUSH
11256: LD_INT 21
11258: PUSH
11259: LD_INT 1
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: LD_INT 21
11268: PUSH
11269: LD_INT 2
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PPUSH
11285: CALL_OW 69
11289: PPUSH
11290: CALL_OW 141
// InGameOn ;
11294: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11298: LD_EXP 76
11302: PPUSH
11303: CALL_OW 85
// DialogueOn ;
11307: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11311: LD_EXP 62
11315: PPUSH
11316: LD_STRING D12-Bur-1
11318: PPUSH
11319: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11323: LD_EXP 76
11327: PPUSH
11328: LD_STRING D12-Pla-1
11330: PPUSH
11331: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11335: LD_EXP 62
11339: PPUSH
11340: LD_STRING D12-Bur-2
11342: PPUSH
11343: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11347: LD_EXP 76
11351: PPUSH
11352: LD_STRING D12-Pla-2
11354: PPUSH
11355: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11359: LD_EXP 62
11363: PPUSH
11364: LD_STRING D12-Bur-3
11366: PPUSH
11367: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11371: LD_EXP 76
11375: PPUSH
11376: LD_STRING D12-Pla-3
11378: PPUSH
11379: CALL_OW 88
// DialogueOff ;
11383: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11387: LD_INT 6
11389: PPUSH
11390: LD_INT 1
11392: PPUSH
11393: LD_INT 1
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: CALL_OW 80
// PrepareAmerican ;
11403: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11407: CALL 1132 0 0
// if IsOK ( Belkov ) then
11411: LD_EXP 64
11415: PPUSH
11416: CALL_OW 302
11420: IFFALSE 11434
// tmpBelkov = Belkov else
11422: LD_ADDR_VAR 0 1
11426: PUSH
11427: LD_EXP 64
11431: ST_TO_ADDR
11432: GO 11444
// tmpBelkov = Belkov2 ;
11434: LD_ADDR_VAR 0 1
11438: PUSH
11439: LD_EXP 68
11443: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11444: LD_EXP 72
11448: PPUSH
11449: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11453: LD_EXP 80
11457: PPUSH
11458: LD_STRING D13-Sol1-1
11460: PPUSH
11461: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_STRING D13-Bel-1
11472: PPUSH
11473: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11477: LD_EXP 67
11481: PPUSH
11482: LD_STRING D13-Kur-1
11484: PPUSH
11485: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_STRING D13-Bel-2
11496: PPUSH
11497: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11501: LD_EXP 73
11505: PPUSH
11506: LD_INT 121
11508: PPUSH
11509: LD_INT 29
11511: PPUSH
11512: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11516: LD_INT 35
11518: PPUSH
11519: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11523: LD_EXP 72
11527: PPUSH
11528: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11532: LD_ADDR_VAR 0 2
11536: PUSH
11537: LD_EXP 73
11541: PPUSH
11542: LD_INT 21
11544: PUSH
11545: LD_INT 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 56
11554: PUSH
11555: EMPTY
11556: LIST
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PPUSH
11562: CALL_OW 72
11566: PPUSH
11567: LD_EXP 72
11571: PPUSH
11572: CALL_OW 74
11576: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11577: LD_EXP 72
11581: PPUSH
11582: LD_VAR 0 2
11586: PPUSH
11587: CALL_OW 296
11591: PUSH
11592: LD_INT 5
11594: LESS
11595: IFFALSE 11608
// ComStop ( kirovVehicle ) else
11597: LD_EXP 72
11601: PPUSH
11602: CALL_OW 141
11606: GO 11623
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11608: LD_EXP 73
11612: PPUSH
11613: LD_INT 121
11615: PPUSH
11616: LD_INT 29
11618: PPUSH
11619: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11623: LD_EXP 73
11627: PPUSH
11628: LD_EXP 80
11632: PPUSH
11633: CALL_OW 74
11637: PPUSH
11638: LD_EXP 80
11642: PPUSH
11643: CALL_OW 296
11647: PUSH
11648: LD_INT 5
11650: LESS
11651: IFFALSE 11516
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11653: LD_EXP 72
11657: PUSH
11658: LD_EXP 80
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: PPUSH
11667: CALL_OW 87
// ComWalk ( trapTeam ) ;
11671: LD_EXP 81
11675: PPUSH
11676: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11680: LD_EXP 81
11684: PPUSH
11685: LD_EXP 72
11689: PPUSH
11690: CALL_OW 179
// ComStop ( belkovTeam ) ;
11694: LD_EXP 73
11698: PPUSH
11699: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11703: LD_EXP 73
11707: PPUSH
11708: LD_EXP 80
11712: PPUSH
11713: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11717: LD_INT 25
11719: PPUSH
11720: LD_INT 22
11722: PUSH
11723: LD_INT 1
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 21
11732: PUSH
11733: LD_INT 1
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: PPUSH
11744: CALL_OW 70
11748: PPUSH
11749: LD_INT 111
11751: PPUSH
11752: LD_INT 13
11754: PPUSH
11755: CALL_OW 171
// music_class = music_combat ;
11759: LD_ADDR_OWVAR 72
11763: PUSH
11764: LD_INT 1
11766: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11767: LD_INT 35
11769: PPUSH
11770: CALL_OW 67
// DialogueOn ;
11774: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11778: LD_EXP 80
11782: PPUSH
11783: LD_STRING D14-Sol1-1
11785: PPUSH
11786: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_STRING D14-Bel-1
11797: PPUSH
11798: CALL_OW 88
// DialogueOff ;
11802: CALL_OW 7
// immortalBelkovTeam = true ;
11806: LD_ADDR_EXP 24
11810: PUSH
11811: LD_INT 1
11813: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11814: LD_INT 6
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: LD_INT 2
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
11830: LD_EXP 73
11834: PPUSH
11835: LD_INT 107
11837: PPUSH
11838: LD_INT 5
11840: PPUSH
11841: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
11845: LD_EXP 72
11849: PPUSH
11850: LD_INT 107
11852: PPUSH
11853: LD_INT 5
11855: PPUSH
11856: CALL_OW 111
// wait ( 0 0$2 ) ;
11860: LD_INT 70
11862: PPUSH
11863: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
11867: LD_EXP 73
11871: PPUSH
11872: LD_INT 101
11874: PPUSH
11875: LD_INT 19
11877: PPUSH
11878: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
11882: LD_EXP 72
11886: PPUSH
11887: LD_INT 101
11889: PPUSH
11890: LD_INT 19
11892: PPUSH
11893: CALL_OW 111
// wait ( 0 0$2 ) ;
11897: LD_INT 70
11899: PPUSH
11900: CALL_OW 67
// immortalVehLive = 400 ;
11904: LD_ADDR_EXP 25
11908: PUSH
11909: LD_INT 400
11911: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
11912: LD_EXP 72
11916: PPUSH
11917: LD_INT 500
11919: PPUSH
11920: CALL_OW 234
// wait ( 0 0$3 ) ;
11924: LD_INT 105
11926: PPUSH
11927: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 121
// wait ( 0 0$1 ) ;
11940: LD_INT 35
11942: PPUSH
11943: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
11947: LD_EXP 80
11951: PPUSH
11952: LD_EXP 72
11956: PPUSH
11957: CALL_OW 120
// AddComHold ( trapTeam ) ;
11961: LD_EXP 81
11965: PPUSH
11966: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
11970: LD_EXP 73
11974: PPUSH
11975: LD_INT 88
11977: PPUSH
11978: LD_INT 18
11980: PPUSH
11981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11985: LD_INT 35
11987: PPUSH
11988: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12001: LD_VAR 0 1
12005: PPUSH
12006: LD_INT 15
12008: PPUSH
12009: CALL_OW 308
12013: IFFALSE 11985
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12015: LD_ADDR_EXP 88
12019: PUSH
12020: LD_INT 22
12022: PUSH
12023: LD_INT 1
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 21
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PPUSH
12044: CALL_OW 69
12048: PUSH
12049: LD_INT 1
12051: ARRAY
12052: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12053: LD_INT 28
12055: PPUSH
12056: LD_INT 22
12058: PUSH
12059: LD_INT 1
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 21
12068: PUSH
12069: LD_INT 1
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 70
12084: PPUSH
12085: LD_INT 113
12087: PPUSH
12088: LD_INT 29
12090: PPUSH
12091: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12095: LD_EXP 88
12099: PPUSH
12100: LD_INT 118
12102: PPUSH
12103: LD_INT 25
12105: PPUSH
12106: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: LD_STRING D14-Bel-1a
12117: PPUSH
12118: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12122: LD_EXP 67
12126: PPUSH
12127: LD_STRING D14-Kur-1
12129: PPUSH
12130: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12134: LD_VAR 0 1
12138: PPUSH
12139: LD_STRING D14-Bel-2
12141: PPUSH
12142: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12146: LD_EXP 67
12150: PPUSH
12151: LD_STRING D14-Kur-2
12153: PPUSH
12154: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12158: LD_EXP 76
12162: PPUSH
12163: CALL_OW 85
// wait ( 0 0$2 ) ;
12167: LD_INT 70
12169: PPUSH
12170: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12174: LD_EXP 62
12178: PPUSH
12179: LD_STRING D14a-Bur-1
12181: PPUSH
12182: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12186: LD_EXP 76
12190: PPUSH
12191: LD_STRING D14a-Pla-1
12193: PPUSH
12194: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12198: LD_EXP 62
12202: PPUSH
12203: LD_STRING D14a-Bur-2
12205: PPUSH
12206: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12210: LD_EXP 76
12214: PPUSH
12215: LD_STRING D14a-Pla-2
12217: PPUSH
12218: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12222: LD_EXP 62
12226: PPUSH
12227: LD_STRING D14a-Bur-3
12229: PPUSH
12230: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12234: LD_EXP 76
12238: PPUSH
12239: LD_STRING D14a-Pla-3
12241: PPUSH
12242: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12246: LD_EXP 62
12250: PPUSH
12251: LD_STRING D14a-Bur-4
12253: PPUSH
12254: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12258: LD_EXP 76
12262: PPUSH
12263: LD_STRING D14a-Pla-4
12265: PPUSH
12266: CALL_OW 88
// InGameOff ;
12270: CALL_OW 9
// immortalBelkovTeam = false ;
12274: LD_ADDR_EXP 24
12278: PUSH
12279: LD_INT 0
12281: ST_TO_ADDR
// activateAMAI = true ;
12282: LD_ADDR_EXP 27
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// canExitBase = true ;
12290: LD_ADDR_EXP 19
12294: PUSH
12295: LD_INT 1
12297: ST_TO_ADDR
// canExploreMap = true ;
12298: LD_ADDR_EXP 20
12302: PUSH
12303: LD_INT 1
12305: ST_TO_ADDR
// construcMoreVehicles = false ;
12306: LD_ADDR_EXP 17
12310: PUSH
12311: LD_INT 0
12313: ST_TO_ADDR
// activateBelkovAI = true ;
12314: LD_ADDR_EXP 28
12318: PUSH
12319: LD_INT 1
12321: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12322: LD_STRING M6
12324: PPUSH
12325: CALL_OW 337
// music_class = 0 ;
12329: LD_ADDR_OWVAR 72
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12337: LD_EXP 81
12341: PPUSH
12342: CALL_OW 139
// end ;
12346: PPOPN 2
12348: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12349: LD_EXP 88
12353: PPUSH
12354: LD_INT 118
12356: PPUSH
12357: LD_INT 25
12359: PPUSH
12360: CALL_OW 297
12364: PUSH
12365: LD_INT 6
12367: LESS
12368: IFFALSE 12463
12370: GO 12372
12372: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12373: LD_EXP 80
12377: PPUSH
12378: CALL_OW 121
// uc_side = 1 ;
12382: LD_ADDR_OWVAR 20
12386: PUSH
12387: LD_INT 1
12389: ST_TO_ADDR
// uc_nation = 1 ;
12390: LD_ADDR_OWVAR 21
12394: PUSH
12395: LD_INT 1
12397: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12398: LD_INT 0
12400: PPUSH
12401: LD_EXP 59
12405: PPUSH
12406: CALL_OW 383
// amMech = CreateHuman ;
12410: LD_ADDR_EXP 89
12414: PUSH
12415: CALL_OW 44
12419: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12420: LD_EXP 89
12424: PPUSH
12425: LD_INT 27
12427: PPUSH
12428: LD_INT 0
12430: PPUSH
12431: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12435: LD_EXP 89
12439: PPUSH
12440: LD_EXP 88
12444: PPUSH
12445: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12449: LD_EXP 89
12453: PPUSH
12454: LD_EXP 88
12458: PPUSH
12459: CALL_OW 180
// end ;
12463: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12464: LD_EXP 89
12468: PPUSH
12469: CALL_OW 302
12473: PUSH
12474: LD_INT 22
12476: PUSH
12477: LD_INT 1
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: LD_INT 21
12486: PUSH
12487: LD_INT 2
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 50
12496: PUSH
12497: EMPTY
12498: LIST
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: LIST
12504: PPUSH
12505: CALL_OW 69
12509: AND
12510: IFFALSE 12763
12512: GO 12514
12514: DISABLE
12515: LD_INT 0
12517: PPUSH
// begin enable ;
12518: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12519: LD_ADDR_VAR 0 1
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_INT 3
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: LD_INT 21
12539: PUSH
12540: LD_INT 1
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 21
12549: PUSH
12550: LD_INT 2
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: PUSH
12557: EMPTY
12558: LIST
12559: LIST
12560: LIST
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PPUSH
12571: LD_EXP 89
12575: PPUSH
12576: CALL_OW 74
12580: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12581: LD_VAR 0 1
12585: PPUSH
12586: LD_EXP 89
12590: PPUSH
12591: CALL_OW 296
12595: PUSH
12596: LD_INT 13
12598: LESS
12599: IFFALSE 12652
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12601: LD_EXP 89
12605: PPUSH
12606: LD_INT 22
12608: PUSH
12609: LD_INT 1
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PUSH
12616: LD_INT 21
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 50
12628: PUSH
12629: EMPTY
12630: LIST
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: PPUSH
12637: CALL_OW 69
12641: PUSH
12642: LD_INT 1
12644: ARRAY
12645: PPUSH
12646: CALL_OW 120
12650: GO 12763
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12652: LD_INT 22
12654: PUSH
12655: LD_INT 1
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: LD_INT 21
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 50
12674: PUSH
12675: EMPTY
12676: LIST
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: LIST
12682: PPUSH
12683: CALL_OW 69
12687: PUSH
12688: LD_INT 1
12690: ARRAY
12691: PPUSH
12692: CALL_OW 256
12696: PUSH
12697: LD_INT 1000
12699: EQUAL
12700: PUSH
12701: LD_EXP 89
12705: PPUSH
12706: CALL_OW 310
12710: NOT
12711: AND
12712: IFFALSE 12763
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12714: LD_EXP 89
12718: PPUSH
12719: LD_INT 22
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 21
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 50
12741: PUSH
12742: EMPTY
12743: LIST
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: PPUSH
12750: CALL_OW 69
12754: PUSH
12755: LD_INT 1
12757: ARRAY
12758: PPUSH
12759: CALL_OW 120
// end ; end ;
12763: PPOPN 1
12765: END
// every 0 0$1 trigger immortalBelkovTeam do
12766: LD_EXP 24
12770: IFFALSE 12857
12772: GO 12774
12774: DISABLE
// begin enable ;
12775: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
12776: LD_EXP 73
12780: PPUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 1
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: PPUSH
12791: CALL_OW 72
12795: PPUSH
12796: LD_INT 1000
12798: PPUSH
12799: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
12803: LD_EXP 73
12807: PPUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PPUSH
12818: CALL_OW 72
12822: IFFALSE 12857
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
12824: LD_EXP 73
12828: PPUSH
12829: LD_INT 21
12831: PUSH
12832: LD_INT 2
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: PPUSH
12839: CALL_OW 72
12843: PUSH
12844: LD_INT 1
12846: ARRAY
12847: PPUSH
12848: LD_EXP 25
12852: PPUSH
12853: CALL_OW 234
// end ;
12857: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
12858: LD_EXP 20
12862: PUSH
12863: LD_EXP 37
12867: NOT
12868: AND
12869: PUSH
12870: LD_EXP 61
12874: PUSH
12875: LD_INT 0
12877: GREATER
12878: AND
12879: IFFALSE 12899
12881: GO 12883
12883: DISABLE
// begin enable ;
12884: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
12885: LD_ADDR_EXP 61
12889: PUSH
12890: LD_EXP 61
12894: PUSH
12895: LD_INT 35
12897: MINUS
12898: ST_TO_ADDR
// end ;
12899: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
12900: LD_EXP 20
12904: IFFALSE 12988
12906: GO 12908
12908: DISABLE
12909: LD_INT 0
12911: PPUSH
12912: PPUSH
// begin tmp = trapTeam ;
12913: LD_ADDR_VAR 0 2
12917: PUSH
12918: LD_EXP 81
12922: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
12923: LD_ADDR_VAR 0 2
12927: PUSH
12928: LD_VAR 0 2
12932: PUSH
12933: LD_EXP 80
12937: DIFF
12938: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
12939: LD_ADDR_VAR 0 1
12943: PUSH
12944: DOUBLE
12945: LD_INT 1
12947: DEC
12948: ST_TO_ADDR
12949: LD_INT 2
12951: PPUSH
12952: LD_INT 3
12954: PPUSH
12955: CALL_OW 12
12959: PUSH
12960: FOR_TO
12961: IFFALSE 12986
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
12963: LD_VAR 0 2
12967: PUSH
12968: LD_VAR 0 1
12972: ARRAY
12973: PPUSH
12974: LD_INT 87
12976: PPUSH
12977: LD_INT 18
12979: PPUSH
12980: CALL_OW 114
12984: GO 12960
12986: POP
12987: POP
// end ;
12988: PPOPN 2
12990: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
12991: LD_EXP 61
12995: PUSH
12996: LD_INT 70
12998: LESS
12999: PUSH
13000: LD_EXP 81
13004: AND
13005: IFFALSE 13034
13007: GO 13009
13009: DISABLE
// begin enable ;
13010: ENABLE
// activateBelkovAI = false ;
13011: LD_ADDR_EXP 28
13015: PUSH
13016: LD_INT 0
13018: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13019: LD_EXP 73
13023: PPUSH
13024: LD_INT 120
13026: PPUSH
13027: LD_INT 28
13029: PPUSH
13030: CALL_OW 114
// end ;
13034: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13035: LD_EXP 29
13039: NOT
13040: PUSH
13041: LD_EXP 30
13045: NOT
13046: OR
13047: PUSH
13048: LD_EXP 20
13052: AND
13053: IFFALSE 13515
13055: GO 13057
13057: DISABLE
13058: LD_INT 0
13060: PPUSH
// begin enable ;
13061: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13062: LD_ADDR_VAR 0 1
13066: PUSH
13067: LD_INT 22
13069: PUSH
13070: LD_INT 1
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: LD_INT 21
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 30
13089: PUSH
13090: LD_INT 31
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: EMPTY
13098: LIST
13099: LIST
13100: LIST
13101: PPUSH
13102: CALL_OW 69
13106: PUSH
13107: FOR_IN
13108: IFFALSE 13513
// begin if See ( 3 , bunker ) then
13110: LD_INT 3
13112: PPUSH
13113: LD_VAR 0 1
13117: PPUSH
13118: CALL_OW 292
13122: IFFALSE 13511
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13124: LD_VAR 0 1
13128: PUSH
13129: LD_EXP 82
13133: IN
13134: PUSH
13135: LD_EXP 29
13139: NOT
13140: AND
13141: PUSH
13142: LD_INT 18
13144: PPUSH
13145: LD_INT 22
13147: PUSH
13148: LD_INT 3
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: EMPTY
13156: LIST
13157: PPUSH
13158: CALL_OW 70
13162: NOT
13163: AND
13164: IFFALSE 13357
// begin sawLeftBunker = true ;
13166: LD_ADDR_EXP 29
13170: PUSH
13171: LD_INT 1
13173: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13174: LD_VAR 0 1
13178: PPUSH
13179: CALL_OW 85
// DialogueOn ;
13183: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13187: LD_EXP 62
13191: PPUSH
13192: LD_STRING D15-Bur-1
13194: PPUSH
13195: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13199: LD_EXP 63
13203: PPUSH
13204: CALL_OW 302
13208: PUSH
13209: LD_EXP 70
13213: PPUSH
13214: CALL_OW 302
13218: OR
13219: IFFALSE 13314
// begin if IsOK ( Gnyevko ) then
13221: LD_EXP 63
13225: PPUSH
13226: CALL_OW 302
13230: IFFALSE 13244
// Say ( Gnyevko , D15-Gny-1 ) ;
13232: LD_EXP 63
13236: PPUSH
13237: LD_STRING D15-Gny-1
13239: PPUSH
13240: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13244: LD_EXP 70
13248: PPUSH
13249: CALL_OW 302
13253: IFFALSE 13267
// Say ( Kovalyuk , D15-Kov-1 ) ;
13255: LD_EXP 70
13259: PPUSH
13260: LD_STRING D15-Kov-1
13262: PPUSH
13263: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13267: LD_EXP 62
13271: PPUSH
13272: LD_STRING D15-Bur-2
13274: PPUSH
13275: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13279: LD_EXP 70
13283: PPUSH
13284: CALL_OW 302
13288: IFFALSE 13302
// Say ( Kovalyuk , D15-Kov-2 ) ;
13290: LD_EXP 70
13294: PPUSH
13295: LD_STRING D15-Kov-2
13297: PPUSH
13298: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13302: LD_EXP 62
13306: PPUSH
13307: LD_STRING D15-Bur-3
13309: PPUSH
13310: CALL_OW 88
// end ; DialogueOff ;
13314: CALL_OW 7
// if raportForPlatonov = 2 then
13318: LD_EXP 39
13322: PUSH
13323: LD_INT 2
13325: EQUAL
13326: IFFALSE 13338
// raportForPlatonov = 1 else
13328: LD_ADDR_EXP 39
13332: PUSH
13333: LD_INT 1
13335: ST_TO_ADDR
13336: GO 13346
// raportForPlatonov = 3 ;
13338: LD_ADDR_EXP 39
13342: PUSH
13343: LD_INT 3
13345: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13346: LD_STRING M7
13348: PPUSH
13349: CALL_OW 337
// exit ;
13353: POP
13354: POP
13355: GO 13515
// end ; if bunker in rightBunkers and not sawRightBunker then
13357: LD_VAR 0 1
13361: PUSH
13362: LD_EXP 83
13366: IN
13367: PUSH
13368: LD_EXP 30
13372: NOT
13373: AND
13374: IFFALSE 13511
// begin sawRightBunker = true ;
13376: LD_ADDR_EXP 30
13380: PUSH
13381: LD_INT 1
13383: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13384: LD_VAR 0 1
13388: PPUSH
13389: CALL_OW 85
// DialogueOn ;
13393: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13397: LD_EXP 70
13401: PPUSH
13402: CALL_OW 302
13406: IFFALSE 13475
// begin if sawLeftBunker then
13408: LD_EXP 29
13412: IFFALSE 13428
// Say ( Kovalyuk , D16-Kov-1a ) else
13414: LD_EXP 70
13418: PPUSH
13419: LD_STRING D16-Kov-1a
13421: PPUSH
13422: CALL_OW 88
13426: GO 13440
// Say ( Kovalyuk , D16-Kov-1 ) ;
13428: LD_EXP 70
13432: PPUSH
13433: LD_STRING D16-Kov-1
13435: PPUSH
13436: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13440: LD_EXP 62
13444: PPUSH
13445: LD_STRING D16-Bur-1
13447: PPUSH
13448: CALL_OW 88
// if IsOK ( Gnyevko ) then
13452: LD_EXP 63
13456: PPUSH
13457: CALL_OW 302
13461: IFFALSE 13475
// Say ( Gnyevko , D16-Gny-1 ) ;
13463: LD_EXP 63
13467: PPUSH
13468: LD_STRING D16-Gny-1
13470: PPUSH
13471: CALL_OW 88
// end ; DialogueOff ;
13475: CALL_OW 7
// if raportForPlatonov = 3 then
13479: LD_EXP 39
13483: PUSH
13484: LD_INT 3
13486: EQUAL
13487: IFFALSE 13499
// raportForPlatonov = 1 else
13489: LD_ADDR_EXP 39
13493: PUSH
13494: LD_INT 1
13496: ST_TO_ADDR
13497: GO 13507
// raportForPlatonov = 2 ;
13499: LD_ADDR_EXP 39
13503: PUSH
13504: LD_INT 2
13506: ST_TO_ADDR
// exit ;
13507: POP
13508: POP
13509: GO 13515
// end ; end ; end ;
13511: GO 13107
13513: POP
13514: POP
// end ;
13515: PPOPN 1
13517: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13518: LD_EXP 32
13522: NOT
13523: PUSH
13524: LD_EXP 83
13528: AND
13529: PUSH
13530: LD_EXP 20
13534: AND
13535: PUSH
13536: LD_EXP 70
13540: PPUSH
13541: CALL_OW 302
13545: PUSH
13546: LD_EXP 63
13550: PPUSH
13551: CALL_OW 302
13555: OR
13556: AND
13557: IFFALSE 13745
13559: GO 13561
13561: DISABLE
13562: LD_INT 0
13564: PPUSH
// begin enable ;
13565: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13566: LD_ADDR_VAR 0 1
13570: PUSH
13571: LD_INT 22
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 2
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 1
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 21
13596: PUSH
13597: LD_INT 2
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PPUSH
13613: CALL_OW 69
13617: PUSH
13618: FOR_IN
13619: IFFALSE 13743
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 320
13630: PUSH
13631: LD_EXP 83
13635: PUSH
13636: LD_INT 1
13638: ARRAY
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 1
13645: PPUSH
13646: CALL_OW 320
13650: PUSH
13651: LD_EXP 83
13655: PUSH
13656: LD_INT 2
13658: ARRAY
13659: EQUAL
13660: OR
13661: IFFALSE 13741
// begin dialogAttackRightBunkers = true ;
13663: LD_ADDR_EXP 32
13667: PUSH
13668: LD_INT 1
13670: ST_TO_ADDR
// DialogueOn ;
13671: CALL_OW 6
// if IsOK ( Gnyevko ) then
13675: LD_EXP 63
13679: PPUSH
13680: CALL_OW 302
13684: IFFALSE 13698
// Say ( Gnyevko , D16A-Gny-1 ) ;
13686: LD_EXP 63
13690: PPUSH
13691: LD_STRING D16A-Gny-1
13693: PPUSH
13694: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13698: LD_EXP 70
13702: PPUSH
13703: CALL_OW 302
13707: IFFALSE 13721
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13709: LD_EXP 70
13713: PPUSH
13714: LD_STRING D16A-Kov-1
13716: PPUSH
13717: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13721: LD_EXP 62
13725: PPUSH
13726: LD_STRING D16A-Bur-1
13728: PPUSH
13729: CALL_OW 88
// DialogueOff ;
13733: CALL_OW 7
// exit ;
13737: POP
13738: POP
13739: GO 13745
// end ; end ;
13741: GO 13618
13743: POP
13744: POP
// end ;
13745: PPOPN 1
13747: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
13748: LD_INT 18
13750: PPUSH
13751: LD_INT 22
13753: PUSH
13754: LD_INT 3
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: PUSH
13761: EMPTY
13762: LIST
13763: PPUSH
13764: CALL_OW 70
13768: PUSH
13769: LD_EXP 29
13773: NOT
13774: AND
13775: IFFALSE 14158
13777: GO 13779
13779: DISABLE
13780: LD_INT 0
13782: PPUSH
// begin sawLeftBunker = true ;
13783: LD_ADDR_EXP 29
13787: PUSH
13788: LD_INT 1
13790: ST_TO_ADDR
// if playerGetSupport then
13791: LD_EXP 34
13795: IFFALSE 13814
// decsToChoose = [ 1 , 3 ] else
13797: LD_ADDR_VAR 0 1
13801: PUSH
13802: LD_INT 1
13804: PUSH
13805: LD_INT 3
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: ST_TO_ADDR
13812: GO 13833
// decsToChoose = [ 1 , 2 , 3 ] ;
13814: LD_ADDR_VAR 0 1
13818: PUSH
13819: LD_INT 1
13821: PUSH
13822: LD_INT 2
13824: PUSH
13825: LD_INT 3
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
13833: LD_STRING QAttackBw
13835: PPUSH
13836: LD_VAR 0 1
13840: PPUSH
13841: CALL_OW 98
13845: PUSH
13846: LD_INT 1
13848: DOUBLE
13849: EQUAL
13850: IFTRUE 13854
13852: GO 13947
13854: POP
// begin DialogueOn ;
13855: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
13859: LD_EXP 62
13863: PPUSH
13864: LD_STRING D17-Bur-1
13866: PPUSH
13867: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
13871: LD_EXP 76
13875: PPUSH
13876: LD_STRING D17-Pla-1
13878: PPUSH
13879: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
13883: LD_EXP 62
13887: PPUSH
13888: LD_STRING D17-Bur-2
13890: PPUSH
13891: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
13895: LD_EXP 76
13899: PPUSH
13900: LD_STRING D17-Pla-2
13902: PPUSH
13903: CALL_OW 94
// DialogueOff ;
13907: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
13911: LD_EXP 42
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: LD_INT 3
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: IN
13926: NOT
13927: IFFALSE 13945
// begin initiative = 1 ;
13929: LD_ADDR_EXP 42
13933: PUSH
13934: LD_INT 1
13936: ST_TO_ADDR
// platonovOpinion = 2 ;
13937: LD_ADDR_EXP 5
13941: PUSH
13942: LD_INT 2
13944: ST_TO_ADDR
// end ; end ; 2 :
13945: GO 14088
13947: LD_INT 2
13949: DOUBLE
13950: EQUAL
13951: IFTRUE 13955
13953: GO 14060
13955: POP
// begin DialogueOn ;
13956: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
13960: LD_EXP 62
13964: PPUSH
13965: LD_STRING D18-Bur-1
13967: PPUSH
13968: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
13972: LD_EXP 76
13976: PPUSH
13977: LD_STRING D18-Pla-1
13979: PPUSH
13980: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
13984: LD_EXP 62
13988: PPUSH
13989: LD_STRING D18-Bur-2
13991: PPUSH
13992: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
13996: LD_EXP 76
14000: PPUSH
14001: LD_STRING D18-Pla-2
14003: PPUSH
14004: CALL_OW 94
// DialogueOff ;
14008: CALL_OW 7
// playerGetSupport = true ;
14012: LD_ADDR_EXP 34
14016: PUSH
14017: LD_INT 1
14019: ST_TO_ADDR
// medalForGetSupport = false ;
14020: LD_ADDR_EXP 40
14024: PUSH
14025: LD_INT 0
14027: ST_TO_ADDR
// PlatonovSendSupport ;
14028: CALL 6522 0 0
// if initiative <> 3 then
14032: LD_EXP 42
14036: PUSH
14037: LD_INT 3
14039: NONEQUAL
14040: IFFALSE 14058
// begin initiative = 1 ;
14042: LD_ADDR_EXP 42
14046: PUSH
14047: LD_INT 1
14049: ST_TO_ADDR
// platonovOpinion = 2 ;
14050: LD_ADDR_EXP 5
14054: PUSH
14055: LD_INT 2
14057: ST_TO_ADDR
// end ; end ; 3 :
14058: GO 14088
14060: LD_INT 3
14062: DOUBLE
14063: EQUAL
14064: IFTRUE 14068
14066: GO 14087
14068: POP
// begin initiative = 3 ;
14069: LD_ADDR_EXP 42
14073: PUSH
14074: LD_INT 3
14076: ST_TO_ADDR
// platonovOpinion = 0 ;
14077: LD_ADDR_EXP 5
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// end ; end ;
14085: GO 14088
14087: POP
// if IsOK ( Gnyevko ) then
14088: LD_EXP 63
14092: PPUSH
14093: CALL_OW 302
14097: IFFALSE 14123
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14099: LD_EXP 63
14103: PPUSH
14104: LD_STRING D19-Gny-1
14106: PPUSH
14107: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14111: LD_EXP 62
14115: PPUSH
14116: LD_STRING D19-Bur-1
14118: PPUSH
14119: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14123: LD_EXP 70
14127: PPUSH
14128: CALL_OW 302
14132: IFFALSE 14158
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14134: LD_EXP 70
14138: PPUSH
14139: LD_STRING D19-Kov-1
14141: PPUSH
14142: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14146: LD_EXP 62
14150: PPUSH
14151: LD_STRING D19-Bur-2
14153: PPUSH
14154: CALL_OW 88
// end ; end ;
14158: PPOPN 1
14160: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14161: LD_EXP 31
14165: NOT
14166: PUSH
14167: LD_EXP 82
14171: AND
14172: PUSH
14173: LD_EXP 20
14177: AND
14178: PUSH
14179: LD_INT 18
14181: PPUSH
14182: LD_INT 22
14184: PUSH
14185: LD_INT 3
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: PPUSH
14195: CALL_OW 70
14199: PUSH
14200: LD_INT 0
14202: EQUAL
14203: AND
14204: PUSH
14205: LD_EXP 70
14209: PPUSH
14210: CALL_OW 302
14214: PUSH
14215: LD_EXP 63
14219: PPUSH
14220: CALL_OW 302
14224: OR
14225: AND
14226: IFFALSE 14414
14228: GO 14230
14230: DISABLE
14231: LD_INT 0
14233: PPUSH
// begin enable ;
14234: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14235: LD_ADDR_VAR 0 1
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 21
14255: PUSH
14256: LD_INT 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 21
14265: PUSH
14266: LD_INT 2
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PPUSH
14282: CALL_OW 69
14286: PUSH
14287: FOR_IN
14288: IFFALSE 14412
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14290: LD_VAR 0 1
14294: PPUSH
14295: CALL_OW 320
14299: PUSH
14300: LD_EXP 82
14304: PUSH
14305: LD_INT 1
14307: ARRAY
14308: EQUAL
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 320
14319: PUSH
14320: LD_EXP 82
14324: PUSH
14325: LD_INT 2
14327: ARRAY
14328: EQUAL
14329: OR
14330: IFFALSE 14410
// begin dialogAttackLeftBunkers = true ;
14332: LD_ADDR_EXP 31
14336: PUSH
14337: LD_INT 1
14339: ST_TO_ADDR
// DialogueOn ;
14340: CALL_OW 6
// if IsOK ( Gnyevko ) then
14344: LD_EXP 63
14348: PPUSH
14349: CALL_OW 302
14353: IFFALSE 14367
// Say ( Gnyevko , D19A-Gny-1 ) ;
14355: LD_EXP 63
14359: PPUSH
14360: LD_STRING D19A-Gny-1
14362: PPUSH
14363: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14367: LD_EXP 70
14371: PPUSH
14372: CALL_OW 302
14376: IFFALSE 14390
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14378: LD_EXP 70
14382: PPUSH
14383: LD_STRING D19A-Kov-1
14385: PPUSH
14386: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14390: LD_EXP 62
14394: PPUSH
14395: LD_STRING D16A-Bur-1
14397: PPUSH
14398: CALL_OW 88
// DialogueOff ;
14402: CALL_OW 7
// exit ;
14406: POP
14407: POP
14408: GO 14414
// end ; end ;
14410: GO 14287
14412: POP
14413: POP
// end ;
14414: PPOPN 1
14416: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14417: LD_EXP 82
14421: NOT
14422: PUSH
14423: LD_INT 17
14425: PPUSH
14426: LD_INT 22
14428: PUSH
14429: LD_INT 1
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: LD_INT 21
14438: PUSH
14439: LD_INT 3
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 30
14448: PUSH
14449: LD_INT 31
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: LD_INT 50
14458: PUSH
14459: EMPTY
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: LIST
14467: PPUSH
14468: CALL_OW 70
14472: PUSH
14473: LD_INT 0
14475: EQUAL
14476: OR
14477: PUSH
14478: LD_EXP 20
14482: AND
14483: IFFALSE 14534
14485: GO 14487
14487: DISABLE
// begin leftBunkers = [ ] ;
14488: LD_ADDR_EXP 82
14492: PUSH
14493: EMPTY
14494: ST_TO_ADDR
// DialogueOn ;
14495: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14499: LD_EXP 62
14503: PPUSH
14504: LD_STRING D20-Bur-1
14506: PPUSH
14507: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14511: LD_EXP 76
14515: PPUSH
14516: LD_STRING D20-Pla-1
14518: PPUSH
14519: CALL_OW 88
// DialogueOff ;
14523: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14527: LD_STRING M8
14529: PPUSH
14530: CALL_OW 337
// end ;
14534: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14535: LD_EXP 83
14539: NOT
14540: PUSH
14541: LD_INT 16
14543: PPUSH
14544: LD_INT 22
14546: PUSH
14547: LD_INT 1
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 3
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 30
14566: PUSH
14567: LD_INT 31
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: LD_INT 50
14576: PUSH
14577: EMPTY
14578: LIST
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 70
14590: PUSH
14591: LD_INT 0
14593: EQUAL
14594: OR
14595: PUSH
14596: LD_EXP 20
14600: AND
14601: IFFALSE 14645
14603: GO 14605
14605: DISABLE
// begin rightBunkers = [ ] ;
14606: LD_ADDR_EXP 83
14610: PUSH
14611: EMPTY
14612: ST_TO_ADDR
// DialogueOn ;
14613: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14617: LD_EXP 62
14621: PPUSH
14622: LD_STRING D20a-Bur-1
14624: PPUSH
14625: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14629: LD_EXP 76
14633: PPUSH
14634: LD_STRING D20a-Pla-1
14636: PPUSH
14637: CALL_OW 88
// DialogueOff ;
14641: CALL_OW 7
// end ;
14645: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14646: LD_EXP 35
14650: NOT
14651: PUSH
14652: LD_EXP 73
14656: AND
14657: IFFALSE 15152
14659: GO 14661
14661: DISABLE
14662: LD_INT 0
14664: PPUSH
14665: PPUSH
14666: PPUSH
// begin enable ;
14667: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14668: LD_ADDR_VAR 0 1
14672: PUSH
14673: LD_INT 22
14675: PUSH
14676: LD_INT 3
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: LD_INT 2
14685: PUSH
14686: LD_INT 21
14688: PUSH
14689: LD_INT 1
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: PUSH
14696: LD_INT 21
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 69
14719: PUSH
14720: FOR_IN
14721: IFFALSE 15150
// for trapUnit in trapTeam do
14723: LD_ADDR_VAR 0 2
14727: PUSH
14728: LD_EXP 81
14732: PUSH
14733: FOR_IN
14734: IFFALSE 15146
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
14736: LD_VAR 0 1
14740: PPUSH
14741: LD_VAR 0 2
14745: PPUSH
14746: CALL_OW 296
14750: PUSH
14751: LD_INT 16
14753: LESS
14754: IFFALSE 15144
// begin saveBelkovDecision = true ;
14756: LD_ADDR_EXP 35
14760: PUSH
14761: LD_INT 1
14763: ST_TO_ADDR
// if playerGetSupport then
14764: LD_EXP 34
14768: IFFALSE 14787
// decsToChoose = [ 1 , 3 ] else
14770: LD_ADDR_VAR 0 3
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: LD_INT 3
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: ST_TO_ADDR
14785: GO 14806
// decsToChoose = [ 1 , 2 , 3 ] ;
14787: LD_ADDR_VAR 0 3
14791: PUSH
14792: LD_INT 1
14794: PUSH
14795: LD_INT 2
14797: PUSH
14798: LD_INT 3
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
14806: LD_STRING QAttackAm
14808: PPUSH
14809: LD_VAR 0 3
14813: PPUSH
14814: CALL_OW 98
14818: PUSH
14819: LD_INT 1
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14896
14827: POP
// begin DialogueOn ;
14828: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
14832: LD_EXP 62
14836: PPUSH
14837: LD_STRING D21-Bur-1
14839: PPUSH
14840: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
14844: LD_EXP 76
14848: PPUSH
14849: LD_STRING D21-Pla-1
14851: PPUSH
14852: CALL_OW 94
// DialogueOff ;
14856: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14860: LD_EXP 42
14864: PUSH
14865: LD_INT 2
14867: PUSH
14868: LD_INT 3
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: IN
14875: NOT
14876: IFFALSE 14894
// begin initiative = 1 ;
14878: LD_ADDR_EXP 42
14882: PUSH
14883: LD_INT 1
14885: ST_TO_ADDR
// platonovOpinion = 2 ;
14886: LD_ADDR_EXP 5
14890: PUSH
14891: LD_INT 2
14893: ST_TO_ADDR
// end ; end ; 2 :
14894: GO 15088
14896: LD_INT 2
14898: DOUBLE
14899: EQUAL
14900: IFTRUE 14904
14902: GO 15060
14904: POP
// begin DialogueOn ;
14905: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
14909: LD_EXP 62
14913: PPUSH
14914: LD_STRING D22-Bur-1
14916: PPUSH
14917: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
14921: LD_EXP 34
14925: PUSH
14926: LD_EXP 82
14930: PUSH
14931: LD_INT 0
14933: EQUAL
14934: PUSH
14935: LD_EXP 83
14939: PUSH
14940: LD_INT 0
14942: EQUAL
14943: OR
14944: AND
14945: IFFALSE 14959
// Say ( Platonov , D22-Pla-1b ) ;
14947: LD_EXP 76
14951: PPUSH
14952: LD_STRING D22-Pla-1b
14954: PPUSH
14955: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
14959: LD_EXP 34
14963: PUSH
14964: LD_EXP 82
14968: PUSH
14969: LD_EXP 83
14973: OR
14974: AND
14975: IFFALSE 14989
// Say ( Platonov , D22-Pla-1a ) ;
14977: LD_EXP 76
14981: PPUSH
14982: LD_STRING D22-Pla-1a
14984: PPUSH
14985: CALL_OW 88
// if not playerGetSupport then
14989: LD_EXP 34
14993: NOT
14994: IFFALSE 15028
// begin Say ( Platonov , D22-Pla-1 ) ;
14996: LD_EXP 76
15000: PPUSH
15001: LD_STRING D22-Pla-1
15003: PPUSH
15004: CALL_OW 88
// playerGetSupport = true ;
15008: LD_ADDR_EXP 34
15012: PUSH
15013: LD_INT 1
15015: ST_TO_ADDR
// medalForGetSupport = false ;
15016: LD_ADDR_EXP 40
15020: PUSH
15021: LD_INT 0
15023: ST_TO_ADDR
// PlatonovSendSupport ;
15024: CALL 6522 0 0
// end ; DialogueOff ;
15028: CALL_OW 7
// if initiative <> 3 then
15032: LD_EXP 42
15036: PUSH
15037: LD_INT 3
15039: NONEQUAL
15040: IFFALSE 15058
// begin initiative = 2 ;
15042: LD_ADDR_EXP 42
15046: PUSH
15047: LD_INT 2
15049: ST_TO_ADDR
// platonovOpinion = 1 ;
15050: LD_ADDR_EXP 5
15054: PUSH
15055: LD_INT 1
15057: ST_TO_ADDR
// end ; end ; 3 :
15058: GO 15088
15060: LD_INT 3
15062: DOUBLE
15063: EQUAL
15064: IFTRUE 15068
15066: GO 15087
15068: POP
// begin initiative = 3 ;
15069: LD_ADDR_EXP 42
15073: PUSH
15074: LD_INT 3
15076: ST_TO_ADDR
// platonovOpinion = 0 ;
15077: LD_ADDR_EXP 5
15081: PUSH
15082: LD_INT 0
15084: ST_TO_ADDR
// end ; end ;
15085: GO 15088
15087: POP
// if IsOK ( Gnyevko ) then
15088: LD_EXP 63
15092: PPUSH
15093: CALL_OW 302
15097: IFFALSE 15123
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15099: LD_EXP 63
15103: PPUSH
15104: LD_STRING D23-Gny-1
15106: PPUSH
15107: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15111: LD_EXP 62
15115: PPUSH
15116: LD_STRING D23-Bur-1
15118: PPUSH
15119: CALL_OW 88
// end ; saveBelkovObjective = true ;
15123: LD_ADDR_EXP 36
15127: PUSH
15128: LD_INT 1
15130: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15131: LD_STRING M9
15133: PPUSH
15134: CALL_OW 337
// exit ;
15138: POP
15139: POP
15140: POP
15141: POP
15142: GO 15152
// end ;
15144: GO 14733
15146: POP
15147: POP
15148: GO 14720
15150: POP
15151: POP
// end ;
15152: PPOPN 3
15154: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15155: LD_EXP 20
15159: PUSH
15160: LD_EXP 81
15164: NOT
15165: AND
15166: PUSH
15167: LD_EXP 37
15171: NOT
15172: AND
15173: IFFALSE 15213
15175: GO 15177
15177: DISABLE
// begin belkovSaved = true ;
15178: LD_ADDR_EXP 37
15182: PUSH
15183: LD_INT 1
15185: ST_TO_ADDR
// activateBelkovAI = false ;
15186: LD_ADDR_EXP 28
15190: PUSH
15191: LD_INT 0
15193: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15194: LD_EXP 73
15198: PPUSH
15199: LD_INT 3
15201: PPUSH
15202: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15206: LD_STRING M9a
15208: PPUSH
15209: CALL_OW 337
// end ;
15213: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15214: LD_EXP 35
15218: PUSH
15219: LD_EXP 64
15223: PPUSH
15224: CALL_OW 301
15228: PUSH
15229: LD_EXP 68
15233: PPUSH
15234: CALL_OW 301
15238: PUSH
15239: LD_EXP 64
15243: PPUSH
15244: CALL_OW 255
15248: PUSH
15249: LD_INT 6
15251: EQUAL
15252: PUSH
15253: LD_EXP 68
15257: PPUSH
15258: CALL_OW 255
15262: PUSH
15263: LD_INT 6
15265: EQUAL
15266: OR
15267: AND
15268: OR
15269: AND
15270: IFFALSE 15290
15272: GO 15274
15274: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15275: LD_STRING M9a
15277: PPUSH
15278: CALL_OW 337
// saveBelkovObjective = false ;
15282: LD_ADDR_EXP 36
15286: PUSH
15287: LD_INT 0
15289: ST_TO_ADDR
// end ;
15290: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15291: LD_EXP 37
15295: PUSH
15296: LD_EXP 62
15300: PPUSH
15301: LD_EXP 64
15305: PPUSH
15306: CALL_OW 296
15310: PUSH
15311: LD_INT 14
15313: LESS
15314: PUSH
15315: LD_EXP 6
15319: AND
15320: PUSH
15321: LD_EXP 62
15325: PPUSH
15326: LD_EXP 68
15330: PPUSH
15331: CALL_OW 296
15335: PUSH
15336: LD_INT 14
15338: LESS
15339: PUSH
15340: LD_EXP 6
15344: NOT
15345: AND
15346: OR
15347: AND
15348: IFFALSE 15644
15350: GO 15352
15352: DISABLE
// begin InGameOn ;
15353: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15357: LD_EXP 64
15361: PPUSH
15362: CALL_OW 302
15366: PUSH
15367: LD_EXP 6
15371: AND
15372: IFFALSE 15468
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15374: LD_EXP 62
15378: PUSH
15379: LD_EXP 64
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PPUSH
15388: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15392: LD_EXP 62
15396: PPUSH
15397: LD_EXP 64
15401: PPUSH
15402: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15406: LD_EXP 64
15410: PPUSH
15411: LD_EXP 62
15415: PPUSH
15416: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15420: LD_EXP 64
15424: PPUSH
15425: LD_STRING D24-Bel-1
15427: PPUSH
15428: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15432: LD_EXP 62
15436: PPUSH
15437: LD_STRING D24-Bur-1
15439: PPUSH
15440: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15444: LD_EXP 64
15448: PPUSH
15449: LD_STRING D24-Bel-2
15451: PPUSH
15452: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15456: LD_EXP 62
15460: PPUSH
15461: LD_STRING D24-Bur-2
15463: PPUSH
15464: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15468: LD_EXP 68
15472: PPUSH
15473: CALL_OW 302
15477: PUSH
15478: LD_EXP 6
15482: NOT
15483: AND
15484: IFFALSE 15592
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15486: LD_EXP 62
15490: PUSH
15491: LD_EXP 68
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: PPUSH
15500: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15504: LD_EXP 62
15508: PPUSH
15509: LD_EXP 68
15513: PPUSH
15514: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15518: LD_EXP 68
15522: PPUSH
15523: LD_EXP 62
15527: PPUSH
15528: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15532: LD_EXP 68
15536: PPUSH
15537: LD_STRING D24-Bel-1
15539: PPUSH
15540: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15544: LD_EXP 62
15548: PPUSH
15549: LD_STRING D24-Bur-1
15551: PPUSH
15552: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15556: LD_EXP 62
15560: PPUSH
15561: LD_STRING D24-Bur-1a
15563: PPUSH
15564: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15568: LD_EXP 68
15572: PPUSH
15573: LD_STRING D24-Bel-2
15575: PPUSH
15576: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15580: LD_EXP 62
15584: PPUSH
15585: LD_STRING D24-Bur-2
15587: PPUSH
15588: CALL_OW 88
// end ; if captureBelkovVehicle then
15592: LD_EXP 38
15596: IFFALSE 15610
// Say ( Burlak , D24-Bur-2a ) ;
15598: LD_EXP 62
15602: PPUSH
15603: LD_STRING D24-Bur-2a
15605: PPUSH
15606: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15610: LD_EXP 76
15614: PPUSH
15615: LD_STRING D24-Pla-2
15617: PPUSH
15618: CALL_OW 94
// if leftBunkers then
15622: LD_EXP 82
15626: IFFALSE 15640
// SayRadio ( Platonov , D24-Pla-2a ) ;
15628: LD_EXP 76
15632: PPUSH
15633: LD_STRING D24-Pla-2a
15635: PPUSH
15636: CALL_OW 94
// InGameOff ;
15640: CALL_OW 9
// end ;
15644: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15645: LD_INT 22
15647: PPUSH
15648: LD_INT 22
15650: PUSH
15651: LD_INT 3
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PUSH
15658: LD_INT 21
15660: PUSH
15661: LD_INT 2
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PPUSH
15672: CALL_OW 70
15676: PUSH
15677: LD_EXP 70
15681: PPUSH
15682: CALL_OW 302
15686: PUSH
15687: LD_EXP 63
15691: PPUSH
15692: CALL_OW 302
15696: OR
15697: AND
15698: IFFALSE 15781
15700: GO 15702
15702: DISABLE
// begin DialogueOn ;
15703: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15707: LD_EXP 62
15711: PPUSH
15712: LD_STRING D26-Bur-1
15714: PPUSH
15715: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15719: LD_EXP 70
15723: PPUSH
15724: CALL_OW 302
15728: IFFALSE 15742
// Say ( Kovalyuk , D26-Kov-1 ) ;
15730: LD_EXP 70
15734: PPUSH
15735: LD_STRING D26-Kov-1
15737: PPUSH
15738: CALL_OW 88
// if IsOk ( Gnyevko ) then
15742: LD_EXP 63
15746: PPUSH
15747: CALL_OW 302
15751: IFFALSE 15765
// Say ( Gnyevko , D26-Gny-1 ) ;
15753: LD_EXP 63
15757: PPUSH
15758: LD_STRING D26-Gny-1
15760: PPUSH
15761: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
15765: LD_EXP 62
15769: PPUSH
15770: LD_STRING D26-Bur-2
15772: PPUSH
15773: CALL_OW 88
// DialogueOff ;
15777: CALL_OW 7
// end ;
15781: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
15782: LD_EXP 20
15786: PUSH
15787: LD_EXP 62
15791: PPUSH
15792: LD_INT 8
15794: PPUSH
15795: CALL_OW 308
15799: NOT
15800: PUSH
15801: LD_EXP 62
15805: PPUSH
15806: CALL_OW 310
15810: PPUSH
15811: CALL_OW 310
15815: PPUSH
15816: LD_INT 8
15818: PPUSH
15819: CALL_OW 308
15823: NOT
15824: AND
15825: AND
15826: PUSH
15827: LD_EXP 39
15831: PUSH
15832: LD_INT 1
15834: NEG
15835: EQUAL
15836: AND
15837: IFFALSE 15851
15839: GO 15841
15841: DISABLE
// begin enable ;
15842: ENABLE
// raportForPlatonov = 0 ;
15843: LD_ADDR_EXP 39
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// end ;
15851: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
15852: LD_EXP 20
15856: PUSH
15857: LD_EXP 39
15861: PUSH
15862: LD_INT 0
15864: GREATEREQUAL
15865: AND
15866: PUSH
15867: LD_EXP 16
15871: NOT
15872: AND
15873: PUSH
15874: LD_EXP 62
15878: PPUSH
15879: LD_INT 8
15881: PPUSH
15882: CALL_OW 308
15886: PUSH
15887: LD_EXP 62
15891: PPUSH
15892: CALL_OW 310
15896: PPUSH
15897: CALL_OW 310
15901: PPUSH
15902: LD_INT 8
15904: PPUSH
15905: CALL_OW 308
15909: PUSH
15910: LD_EXP 16
15914: NOT
15915: AND
15916: OR
15917: AND
15918: IFFALSE 16209
15920: GO 15922
15922: DISABLE
// begin enable ;
15923: ENABLE
// DialogueOn ;
15924: CALL_OW 6
// case raportForPlatonov of 0 :
15928: LD_EXP 39
15932: PUSH
15933: LD_INT 0
15935: DOUBLE
15936: EQUAL
15937: IFTRUE 15941
15939: GO 15968
15941: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
15942: LD_EXP 76
15946: PPUSH
15947: LD_STRING D25a-Pla-1
15949: PPUSH
15950: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
15954: LD_EXP 62
15958: PPUSH
15959: LD_STRING D25a-Bur-1
15961: PPUSH
15962: CALL_OW 88
// end ; 1 :
15966: GO 16184
15968: LD_INT 1
15970: DOUBLE
15971: EQUAL
15972: IFTRUE 15976
15974: GO 16039
15976: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
15977: LD_EXP 76
15981: PPUSH
15982: LD_STRING D25-Pla-1
15984: PPUSH
15985: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
15989: LD_EXP 62
15993: PPUSH
15994: LD_STRING D25-Bur-1
15996: PPUSH
15997: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16001: LD_EXP 62
16005: PPUSH
16006: LD_STRING D25b-Bur-1
16008: PPUSH
16009: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16013: LD_EXP 76
16017: PPUSH
16018: LD_STRING D25b-Pla-1
16020: PPUSH
16021: CALL_OW 88
// playerGetSupport = true ;
16025: LD_ADDR_EXP 34
16029: PUSH
16030: LD_INT 1
16032: ST_TO_ADDR
// PlatonovSendSupport ;
16033: CALL 6522 0 0
// end ; 2 :
16037: GO 16184
16039: LD_INT 2
16041: DOUBLE
16042: EQUAL
16043: IFTRUE 16047
16045: GO 16093
16047: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16048: LD_EXP 76
16052: PPUSH
16053: LD_STRING D25-Pla-1
16055: PPUSH
16056: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16060: LD_EXP 62
16064: PPUSH
16065: LD_STRING D25-Bur-1a
16067: PPUSH
16068: CALL_OW 88
// if not sawLeftBunker then
16072: LD_EXP 29
16076: NOT
16077: IFFALSE 16091
// Say ( Platonov , D25c-Pla-1 ) ;
16079: LD_EXP 76
16083: PPUSH
16084: LD_STRING D25c-Pla-1
16086: PPUSH
16087: CALL_OW 88
// end ; 3 :
16091: GO 16184
16093: LD_INT 3
16095: DOUBLE
16096: EQUAL
16097: IFTRUE 16101
16099: GO 16183
16101: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16102: LD_EXP 76
16106: PPUSH
16107: LD_STRING D25-Pla-1
16109: PPUSH
16110: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16114: LD_EXP 62
16118: PPUSH
16119: LD_STRING D25a-Bur-1b
16121: PPUSH
16122: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16126: LD_EXP 62
16130: PPUSH
16131: LD_STRING D25b-Bur-1
16133: PPUSH
16134: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16138: LD_EXP 76
16142: PPUSH
16143: LD_STRING D25b-Pla-1
16145: PPUSH
16146: CALL_OW 88
// playerGetSupport = true ;
16150: LD_ADDR_EXP 34
16154: PUSH
16155: LD_INT 1
16157: ST_TO_ADDR
// PlatonovSendSupport ;
16158: CALL 6522 0 0
// if not sawRightBunker then
16162: LD_EXP 30
16166: NOT
16167: IFFALSE 16181
// Say ( Platonov , D25c-Pla-1 ) ;
16169: LD_EXP 76
16173: PPUSH
16174: LD_STRING D25c-Pla-1
16176: PPUSH
16177: CALL_OW 88
// end ; end ;
16181: GO 16184
16183: POP
// raportForPlatonov = - 1 ;
16184: LD_ADDR_EXP 39
16188: PUSH
16189: LD_INT 1
16191: NEG
16192: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16193: LD_EXP 76
16197: PPUSH
16198: LD_STRING D25c-Pla-1a
16200: PPUSH
16201: CALL_OW 88
// DialogueOff ;
16205: CALL_OW 7
// end ;
16209: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16210: LD_INT 19
16212: PPUSH
16213: LD_INT 22
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: PPUSH
16226: CALL_OW 70
16230: PUSH
16231: LD_INT 0
16233: GREATER
16234: IFFALSE 16254
16236: GO 16238
16238: DISABLE
// begin northMapExplored = true ;
16239: LD_ADDR_EXP 41
16243: PUSH
16244: LD_INT 1
16246: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16247: LD_STRING M10
16249: PPUSH
16250: CALL_OW 337
// end ;
16254: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16255: LD_EXP 82
16259: NOT
16260: PUSH
16261: LD_EXP 41
16265: AND
16266: PUSH
16267: LD_EXP 37
16271: PUSH
16272: LD_EXP 36
16276: NOT
16277: OR
16278: AND
16279: IFFALSE 16299
16281: GO 16283
16283: DISABLE
// begin backToBeria2 = true ;
16284: LD_ADDR_EXP 16
16288: PUSH
16289: LD_INT 1
16291: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16292: LD_STRING M10a
16294: PPUSH
16295: CALL_OW 337
// end ;
16299: END
// every 0 0$1 do
16300: GO 16302
16302: DISABLE
// begin enable ;
16303: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16304: LD_EXP 67
16308: PUSH
16309: LD_EXP 76
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PPUSH
16318: LD_INT 1000
16320: PPUSH
16321: CALL_OW 234
// end ; end_of_file
16325: END
// export function PrepareNature ; var i , un ; begin
16326: LD_INT 0
16328: PPUSH
16329: PPUSH
16330: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: DOUBLE
16337: LD_INT 1
16339: DEC
16340: ST_TO_ADDR
16341: LD_EXP 45
16345: PUSH
16346: LD_INT 1
16348: ARRAY
16349: PUSH
16350: FOR_TO
16351: IFFALSE 16461
// begin uc_side = 0 ;
16353: LD_ADDR_OWVAR 20
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// uc_nation = nation_nature ;
16361: LD_ADDR_OWVAR 21
16365: PUSH
16366: LD_INT 0
16368: ST_TO_ADDR
// hc_class = class_apeman ;
16369: LD_ADDR_OWVAR 28
16373: PUSH
16374: LD_INT 12
16376: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16377: LD_ADDR_OWVAR 31
16381: PUSH
16382: LD_EXP 46
16386: PUSH
16387: LD_INT 1
16389: ARRAY
16390: PUSH
16391: LD_EXP 46
16395: PUSH
16396: LD_INT 2
16398: ARRAY
16399: PUSH
16400: LD_EXP 46
16404: PUSH
16405: LD_INT 3
16407: ARRAY
16408: PUSH
16409: LD_EXP 46
16413: PUSH
16414: LD_INT 4
16416: ARRAY
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16424: LD_ADDR_OWVAR 35
16428: PUSH
16429: LD_EXP 47
16433: ST_TO_ADDR
// un = CreateHuman ;
16434: LD_ADDR_VAR 0 3
16438: PUSH
16439: CALL_OW 44
16443: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16444: LD_VAR 0 3
16448: PPUSH
16449: LD_INT 21
16451: PPUSH
16452: LD_INT 0
16454: PPUSH
16455: CALL_OW 49
// end ;
16459: GO 16350
16461: POP
16462: POP
// for i := 1 to animalsAmount [ 2 ] do
16463: LD_ADDR_VAR 0 2
16467: PUSH
16468: DOUBLE
16469: LD_INT 1
16471: DEC
16472: ST_TO_ADDR
16473: LD_EXP 45
16477: PUSH
16478: LD_INT 2
16480: ARRAY
16481: PUSH
16482: FOR_TO
16483: IFFALSE 16593
// begin uc_side = 0 ;
16485: LD_ADDR_OWVAR 20
16489: PUSH
16490: LD_INT 0
16492: ST_TO_ADDR
// uc_nation = nation_nature ;
16493: LD_ADDR_OWVAR 21
16497: PUSH
16498: LD_INT 0
16500: ST_TO_ADDR
// hc_class = class_phororhacos ;
16501: LD_ADDR_OWVAR 28
16505: PUSH
16506: LD_INT 18
16508: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16509: LD_ADDR_OWVAR 31
16513: PUSH
16514: LD_EXP 46
16518: PUSH
16519: LD_INT 1
16521: ARRAY
16522: PUSH
16523: LD_EXP 46
16527: PUSH
16528: LD_INT 2
16530: ARRAY
16531: PUSH
16532: LD_EXP 46
16536: PUSH
16537: LD_INT 3
16539: ARRAY
16540: PUSH
16541: LD_EXP 46
16545: PUSH
16546: LD_INT 4
16548: ARRAY
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16556: LD_ADDR_OWVAR 35
16560: PUSH
16561: LD_EXP 47
16565: ST_TO_ADDR
// un = CreateHuman ;
16566: LD_ADDR_VAR 0 3
16570: PUSH
16571: CALL_OW 44
16575: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16576: LD_VAR 0 3
16580: PPUSH
16581: LD_INT 21
16583: PPUSH
16584: LD_INT 0
16586: PPUSH
16587: CALL_OW 49
// end ;
16591: GO 16482
16593: POP
16594: POP
// for i := 1 to animalsAmount [ 3 ] do
16595: LD_ADDR_VAR 0 2
16599: PUSH
16600: DOUBLE
16601: LD_INT 1
16603: DEC
16604: ST_TO_ADDR
16605: LD_EXP 45
16609: PUSH
16610: LD_INT 3
16612: ARRAY
16613: PUSH
16614: FOR_TO
16615: IFFALSE 16725
// begin uc_side = 0 ;
16617: LD_ADDR_OWVAR 20
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// uc_nation = nation_nature ;
16625: LD_ADDR_OWVAR 21
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// hc_class = class_tiger ;
16633: LD_ADDR_OWVAR 28
16637: PUSH
16638: LD_INT 14
16640: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16641: LD_ADDR_OWVAR 31
16645: PUSH
16646: LD_EXP 46
16650: PUSH
16651: LD_INT 1
16653: ARRAY
16654: PUSH
16655: LD_EXP 46
16659: PUSH
16660: LD_INT 2
16662: ARRAY
16663: PUSH
16664: LD_EXP 46
16668: PUSH
16669: LD_INT 3
16671: ARRAY
16672: PUSH
16673: LD_EXP 46
16677: PUSH
16678: LD_INT 4
16680: ARRAY
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16688: LD_ADDR_OWVAR 35
16692: PUSH
16693: LD_EXP 47
16697: ST_TO_ADDR
// un = CreateHuman ;
16698: LD_ADDR_VAR 0 3
16702: PUSH
16703: CALL_OW 44
16707: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16708: LD_VAR 0 3
16712: PPUSH
16713: LD_INT 21
16715: PPUSH
16716: LD_INT 0
16718: PPUSH
16719: CALL_OW 49
// end ;
16723: GO 16614
16725: POP
16726: POP
// for i := 1 to animalsAmount [ 4 ] do
16727: LD_ADDR_VAR 0 2
16731: PUSH
16732: DOUBLE
16733: LD_INT 1
16735: DEC
16736: ST_TO_ADDR
16737: LD_EXP 45
16741: PUSH
16742: LD_INT 4
16744: ARRAY
16745: PUSH
16746: FOR_TO
16747: IFFALSE 16857
// begin uc_side = 0 ;
16749: LD_ADDR_OWVAR 20
16753: PUSH
16754: LD_INT 0
16756: ST_TO_ADDR
// uc_nation = nation_nature ;
16757: LD_ADDR_OWVAR 21
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// hc_class = 21 ;
16765: LD_ADDR_OWVAR 28
16769: PUSH
16770: LD_INT 21
16772: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16773: LD_ADDR_OWVAR 31
16777: PUSH
16778: LD_EXP 46
16782: PUSH
16783: LD_INT 1
16785: ARRAY
16786: PUSH
16787: LD_EXP 46
16791: PUSH
16792: LD_INT 2
16794: ARRAY
16795: PUSH
16796: LD_EXP 46
16800: PUSH
16801: LD_INT 3
16803: ARRAY
16804: PUSH
16805: LD_EXP 46
16809: PUSH
16810: LD_INT 4
16812: ARRAY
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16820: LD_ADDR_OWVAR 35
16824: PUSH
16825: LD_EXP 47
16829: ST_TO_ADDR
// un = CreateHuman ;
16830: LD_ADDR_VAR 0 3
16834: PUSH
16835: CALL_OW 44
16839: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16840: LD_VAR 0 3
16844: PPUSH
16845: LD_INT 21
16847: PPUSH
16848: LD_INT 0
16850: PPUSH
16851: CALL_OW 49
// end ;
16855: GO 16746
16857: POP
16858: POP
// end ; end_of_file
16859: LD_VAR 0 1
16863: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
16864: LD_EXP 21
16868: IFFALSE 17097
16870: GO 16872
16872: DISABLE
16873: LD_INT 0
16875: PPUSH
16876: PPUSH
16877: PPUSH
16878: PPUSH
16879: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
16880: LD_ADDR_VAR 0 4
16884: PUSH
16885: LD_INT 22
16887: PUSH
16888: LD_INT 3
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: PUSH
16895: LD_INT 21
16897: PUSH
16898: LD_INT 1
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 25
16907: PUSH
16908: LD_INT 2
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: PPUSH
16920: CALL_OW 69
16924: ST_TO_ADDR
// wait ( 0 0$40 ) ;
16925: LD_INT 1400
16927: PPUSH
16928: CALL_OW 67
// carryCratesEngs = 0 ;
16932: LD_ADDR_VAR 0 3
16936: PUSH
16937: LD_INT 0
16939: ST_TO_ADDR
// for unit in playerEngs do
16940: LD_ADDR_VAR 0 2
16944: PUSH
16945: LD_VAR 0 4
16949: PUSH
16950: FOR_IN
16951: IFFALSE 16979
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
16953: LD_ADDR_VAR 0 3
16957: PUSH
16958: LD_VAR 0 3
16962: PUSH
16963: LD_VAR 0 2
16967: PPUSH
16968: LD_INT 1
16970: PPUSH
16971: CALL_OW 289
16975: PLUS
16976: ST_TO_ADDR
16977: GO 16950
16979: POP
16980: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
16981: LD_INT 106
16983: PPUSH
16984: CALL_OW 274
16988: PPUSH
16989: LD_INT 1
16991: PPUSH
16992: CALL_OW 275
16996: PUSH
16997: LD_INT 50
16999: LESS
17000: PUSH
17001: LD_INT 8
17003: PPUSH
17004: LD_INT 1
17006: PPUSH
17007: CALL_OW 287
17011: PUSH
17012: LD_INT 10
17014: MUL
17015: PUSH
17016: LD_INT 106
17018: PPUSH
17019: CALL_OW 274
17023: PPUSH
17024: LD_INT 1
17026: PPUSH
17027: CALL_OW 275
17031: PLUS
17032: PUSH
17033: LD_VAR 0 3
17037: PLUS
17038: PUSH
17039: LD_INT 50
17041: LESS
17042: AND
17043: IFFALSE 17055
// spawnNextCrates = true else
17045: LD_ADDR_VAR 0 5
17049: PUSH
17050: LD_INT 1
17052: ST_TO_ADDR
17053: GO 17063
// spawnNextCrates = false ;
17055: LD_ADDR_VAR 0 5
17059: PUSH
17060: LD_INT 0
17062: ST_TO_ADDR
// if spawnNextCrates then
17063: LD_VAR 0 5
17067: IFFALSE 17090
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17069: LD_INT 1
17071: PPUSH
17072: LD_INT 5
17074: PPUSH
17075: CALL_OW 12
17079: PPUSH
17080: LD_INT 26
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: CALL_OW 55
// until not spawnCrates ;
17090: LD_EXP 21
17094: NOT
17095: IFFALSE 16880
// end ; end_of_file
17097: PPOPN 5
17099: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 266
17109: PUSH
17110: LD_INT 6
17112: EQUAL
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_INT 3
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: LD_INT 30
17126: PUSH
17127: LD_INT 6
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PUSH
17134: EMPTY
17135: LIST
17136: LIST
17137: PPUSH
17138: CALL_OW 69
17142: PUSH
17143: LD_INT 1
17145: GREATER
17146: AND
17147: PUSH
17148: LD_EXP 11
17152: NOT
17153: AND
17154: IFFALSE 17165
// Dial_StopConstructAgainSameBuilding ( building ) ;
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL 8887 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17165: LD_VAR 0 1
17169: PPUSH
17170: CALL_OW 266
17174: PUSH
17175: LD_INT 2
17177: EQUAL
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 3
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 30
17191: PUSH
17192: LD_INT 2
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PPUSH
17203: CALL_OW 69
17207: PUSH
17208: LD_INT 1
17210: GREATER
17211: AND
17212: PUSH
17213: LD_EXP 11
17217: NOT
17218: AND
17219: IFFALSE 17230
// Dial_StopConstructAgainSameBuilding ( building ) ;
17221: LD_VAR 0 1
17225: PPUSH
17226: CALL 8887 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17230: LD_VAR 0 1
17234: PPUSH
17235: CALL_OW 255
17239: PUSH
17240: LD_INT 3
17242: EQUAL
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 266
17253: PUSH
17254: LD_INT 26
17256: PUSH
17257: LD_INT 4
17259: PUSH
17260: LD_INT 31
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: LIST
17267: IN
17268: AND
17269: PUSH
17270: LD_VAR 0 1
17274: PPUSH
17275: LD_INT 8
17277: PPUSH
17278: CALL_OW 308
17282: AND
17283: IFFALSE 17294
// Dial_StopConstructAgainSameBuilding ( building ) ;
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL 8887 0 1
// end ;
17294: PPOPN 2
17296: END
// on BuildingComplete ( building ) do var sold , platSold ;
17297: LD_INT 0
17299: PPUSH
17300: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17301: LD_VAR 0 1
17305: PPUSH
17306: CALL_OW 255
17310: PUSH
17311: LD_INT 3
17313: EQUAL
17314: PUSH
17315: LD_VAR 0 1
17319: PPUSH
17320: CALL_OW 266
17324: PUSH
17325: LD_INT 6
17327: EQUAL
17328: AND
17329: PUSH
17330: LD_EXP 8
17334: NOT
17335: AND
17336: IFFALSE 17342
// Dial_LabConstructed ;
17338: CALL 8737 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17342: LD_VAR 0 1
17346: PPUSH
17347: CALL_OW 255
17351: PUSH
17352: LD_INT 3
17354: EQUAL
17355: PUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 266
17365: PUSH
17366: LD_INT 2
17368: EQUAL
17369: AND
17370: PUSH
17371: LD_EXP 9
17375: NOT
17376: AND
17377: IFFALSE 17383
// Dial_WorkshopConstructed ;
17379: CALL 8812 0 0
// if GetSide ( building ) = 6 then
17383: LD_VAR 0 1
17387: PPUSH
17388: CALL_OW 255
17392: PUSH
17393: LD_INT 6
17395: EQUAL
17396: IFFALSE 17607
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 266
17407: PUSH
17408: LD_INT 31
17410: EQUAL
17411: PUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: LD_INT 9
17419: PPUSH
17420: CALL_OW 308
17424: AND
17425: IFFALSE 17476
// begin if UnitsInside ( ru2_arm2 ) then
17427: LD_INT 209
17429: PPUSH
17430: CALL_OW 313
17434: IFFALSE 17476
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: LD_INT 209
17443: PPUSH
17444: CALL_OW 313
17448: PUSH
17449: LD_INT 1
17451: ARRAY
17452: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17453: LD_VAR 0 2
17457: PPUSH
17458: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17462: LD_VAR 0 2
17466: PPUSH
17467: LD_VAR 0 1
17471: PPUSH
17472: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 266
17485: PUSH
17486: LD_INT 31
17488: EQUAL
17489: PUSH
17490: LD_VAR 0 1
17494: PPUSH
17495: LD_INT 8
17497: PPUSH
17498: CALL_OW 308
17502: AND
17503: IFFALSE 17539
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17505: LD_ADDR_VAR 0 2
17509: PUSH
17510: LD_EXP 77
17514: PPUSH
17515: LD_VAR 0 1
17519: PPUSH
17520: CALL_OW 74
17524: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17525: LD_VAR 0 2
17529: PPUSH
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17539: LD_VAR 0 1
17543: PPUSH
17544: CALL_OW 266
17548: PUSH
17549: LD_INT 2
17551: EQUAL
17552: IFFALSE 17607
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17554: LD_EXP 69
17558: PPUSH
17559: LD_INT 25
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 72
17573: PPUSH
17574: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17578: LD_EXP 69
17582: PPUSH
17583: LD_INT 25
17585: PUSH
17586: LD_INT 3
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PPUSH
17593: CALL_OW 72
17597: PPUSH
17598: LD_VAR 0 1
17602: PPUSH
17603: CALL_OW 180
// end ; end ; end ;
17607: PPOPN 3
17609: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17610: LD_VAR 0 1
17614: PUSH
17615: LD_INT 47
17617: EQUAL
17618: PUSH
17619: LD_VAR 0 2
17623: PPUSH
17624: CALL_OW 255
17628: PUSH
17629: LD_INT 3
17631: EQUAL
17632: AND
17633: IFFALSE 17643
// engineResearched = true ;
17635: LD_ADDR_EXP 10
17639: PUSH
17640: LD_INT 1
17642: ST_TO_ADDR
// if tech = tech_Tech1 then
17643: LD_VAR 0 1
17647: PUSH
17648: LD_INT 48
17650: EQUAL
17651: IFFALSE 17673
// begin wait ( 0 0$5 ) ;
17653: LD_INT 175
17655: PPUSH
17656: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17660: LD_INT 83
17662: PPUSH
17663: LD_INT 1500
17665: PPUSH
17666: LD_INT 0
17668: PPUSH
17669: CALL_OW 486
// end ; end ;
17673: PPOPN 2
17675: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17676: LD_VAR 0 2
17680: PPUSH
17681: CALL_OW 255
17685: PUSH
17686: LD_OWVAR 2
17690: EQUAL
17691: PUSH
17692: LD_VAR 0 2
17696: PPUSH
17697: CALL_OW 302
17701: AND
17702: PUSH
17703: LD_EXP 12
17707: NOT
17708: AND
17709: PUSH
17710: LD_EXP 17
17714: NOT
17715: AND
17716: IFFALSE 17727
// Dial_FirstVehConstructed ( factory ) ;
17718: LD_VAR 0 2
17722: PPUSH
17723: CALL 9411 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17727: LD_VAR 0 2
17731: PPUSH
17732: CALL_OW 255
17736: PUSH
17737: LD_OWVAR 2
17741: EQUAL
17742: PUSH
17743: LD_EXP 14
17747: NOT
17748: AND
17749: PUSH
17750: LD_EXP 13
17754: PPUSH
17755: CALL_OW 302
17759: NOT
17760: AND
17761: IFFALSE 17773
// firstVeh = vehicle ;
17763: LD_ADDR_EXP 13
17767: PUSH
17768: LD_VAR 0 1
17772: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
17773: LD_VAR 0 2
17777: PPUSH
17778: CALL_OW 255
17782: PUSH
17783: LD_OWVAR 2
17787: EQUAL
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 302
17798: AND
17799: PUSH
17800: LD_EXP 17
17804: AND
17805: IFFALSE 17821
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
17807: LD_ADDR_EXP 18
17811: PUSH
17812: LD_EXP 18
17816: PUSH
17817: LD_INT 1
17819: PLUS
17820: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 255
17830: PUSH
17831: LD_OWVAR 2
17835: EQUAL
17836: PUSH
17837: LD_VAR 0 2
17841: PPUSH
17842: CALL_OW 248
17846: PUSH
17847: LD_INT 3
17849: EQUAL
17850: AND
17851: IFFALSE 17867
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
17853: LD_ADDR_EXP 44
17857: PUSH
17858: LD_EXP 44
17862: PUSH
17863: LD_INT 1
17865: PLUS
17866: ST_TO_ADDR
// end ;
17867: PPOPN 2
17869: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
17870: LD_EXP 19
17874: NOT
17875: PUSH
17876: LD_VAR 0 5
17880: PUSH
17881: LD_INT 1
17883: EQUAL
17884: AND
17885: IFFALSE 17901
// Dial_NewCrates ( x , y ) ;
17887: LD_VAR 0 2
17891: PPUSH
17892: LD_VAR 0 3
17896: PPUSH
17897: CALL 9356 0 2
// end ;
17901: PPOPN 5
17903: END
// on Command ( com ) do var i , j , temp , order , destiny ;
17904: LD_INT 0
17906: PPUSH
17907: PPUSH
17908: PPUSH
17909: PPUSH
17910: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
17911: LD_ADDR_VAR 0 2
17915: PUSH
17916: LD_INT 22
17918: PUSH
17919: LD_INT 3
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 21
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PPUSH
17940: CALL_OW 69
17944: PUSH
17945: FOR_IN
17946: IFFALSE 18139
// if GetTaskList ( i ) > 0 then
17948: LD_VAR 0 2
17952: PPUSH
17953: CALL_OW 437
17957: PUSH
17958: LD_INT 0
17960: GREATER
17961: IFFALSE 18137
// for j = 1 to GetTaskList ( i ) do
17963: LD_ADDR_VAR 0 3
17967: PUSH
17968: DOUBLE
17969: LD_INT 1
17971: DEC
17972: ST_TO_ADDR
17973: LD_VAR 0 2
17977: PPUSH
17978: CALL_OW 437
17982: PUSH
17983: FOR_TO
17984: IFFALSE 18135
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
17986: LD_ADDR_VAR 0 4
17990: PUSH
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 437
18000: PUSH
18001: LD_VAR 0 3
18005: ARRAY
18006: PUSH
18007: LD_INT 4
18009: ARRAY
18010: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18011: LD_VAR 0 4
18015: PUSH
18016: LD_INT 71
18018: EQUAL
18019: PUSH
18020: LD_VAR 0 4
18024: PPUSH
18025: CALL_OW 255
18029: PUSH
18030: LD_INT 6
18032: EQUAL
18033: PUSH
18034: LD_VAR 0 2
18038: PPUSH
18039: CALL_OW 437
18043: PUSH
18044: LD_VAR 0 3
18048: ARRAY
18049: PUSH
18050: LD_INT 1
18052: ARRAY
18053: PUSH
18054: LD_STRING e
18056: EQUAL
18057: AND
18058: PUSH
18059: LD_VAR 0 4
18063: PPUSH
18064: CALL_OW 247
18068: PUSH
18069: LD_INT 2
18071: EQUAL
18072: AND
18073: OR
18074: IFFALSE 18087
// SetTaskList ( i , [ ] ) ;
18076: LD_VAR 0 2
18080: PPUSH
18081: EMPTY
18082: PPUSH
18083: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18087: LD_VAR 0 4
18091: PUSH
18092: LD_INT 106
18094: EQUAL
18095: PUSH
18096: LD_VAR 0 2
18100: PPUSH
18101: CALL_OW 437
18105: PUSH
18106: LD_VAR 0 3
18110: ARRAY
18111: PUSH
18112: LD_INT 1
18114: ARRAY
18115: PUSH
18116: LD_STRING Y
18118: EQUAL
18119: AND
18120: IFFALSE 18133
// SetTaskList ( i , [ ] ) ;
18122: LD_VAR 0 2
18126: PPUSH
18127: EMPTY
18128: PPUSH
18129: CALL_OW 446
// end ;
18133: GO 17983
18135: POP
18136: POP
18137: GO 17945
18139: POP
18140: POP
// end ;
18141: PPOPN 6
18143: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 255
18153: PUSH
18154: LD_INT 1
18156: EQUAL
18157: PUSH
18158: LD_VAR 0 1
18162: PPUSH
18163: CALL_OW 247
18167: PUSH
18168: LD_INT 1
18170: EQUAL
18171: AND
18172: IFFALSE 18230
// begin if unit in amLeftEngs then
18174: LD_VAR 0 1
18178: PUSH
18179: LD_EXP 86
18183: IN
18184: IFFALSE 18202
// amLeftEngs = amLeftEngs diff unit ;
18186: LD_ADDR_EXP 86
18190: PUSH
18191: LD_EXP 86
18195: PUSH
18196: LD_VAR 0 1
18200: DIFF
18201: ST_TO_ADDR
// if unit in amRightEngs then
18202: LD_VAR 0 1
18206: PUSH
18207: LD_EXP 87
18211: IN
18212: IFFALSE 18230
// amRightEngs = amRightEngs diff unit ;
18214: LD_ADDR_EXP 87
18218: PUSH
18219: LD_EXP 87
18223: PUSH
18224: LD_VAR 0 1
18228: DIFF
18229: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18230: LD_VAR 0 1
18234: PPUSH
18235: CALL_OW 255
18239: PUSH
18240: LD_INT 6
18242: EQUAL
18243: PUSH
18244: LD_VAR 0 1
18248: PPUSH
18249: CALL_OW 247
18253: PUSH
18254: LD_INT 1
18256: EQUAL
18257: AND
18258: IFFALSE 18288
// if unit in belkovTeam then
18260: LD_VAR 0 1
18264: PUSH
18265: LD_EXP 73
18269: IN
18270: IFFALSE 18288
// belkovTeam = belkovTeam diff unit ;
18272: LD_ADDR_EXP 73
18276: PUSH
18277: LD_EXP 73
18281: PUSH
18282: LD_VAR 0 1
18286: DIFF
18287: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 255
18297: PUSH
18298: LD_INT 3
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 247
18311: PUSH
18312: LD_INT 1
18314: EQUAL
18315: AND
18316: IFFALSE 18332
// lostComradesCounter = lostComradesCounter + 1 ;
18318: LD_ADDR_EXP 43
18322: PUSH
18323: LD_EXP 43
18327: PUSH
18328: LD_INT 1
18330: PLUS
18331: ST_TO_ADDR
// if unit = Burlak then
18332: LD_VAR 0 1
18336: PUSH
18337: LD_EXP 62
18341: EQUAL
18342: IFFALSE 18348
// BurlakIsDead ;
18344: CALL 19645 0 0
// if unit in platSoldiers then
18348: LD_VAR 0 1
18352: PUSH
18353: LD_EXP 77
18357: IN
18358: IFFALSE 18376
// platSoldiers = platSoldiers diff unit ;
18360: LD_ADDR_EXP 77
18364: PUSH
18365: LD_EXP 77
18369: PUSH
18370: LD_VAR 0 1
18374: DIFF
18375: ST_TO_ADDR
// end ;
18376: PPOPN 1
18378: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18379: LD_VAR 0 1
18383: PPUSH
18384: CALL_OW 255
18388: PUSH
18389: LD_INT 1
18391: EQUAL
18392: PUSH
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 247
18402: PUSH
18403: LD_INT 3
18405: EQUAL
18406: AND
18407: IFFALSE 18465
// begin if unit in leftBunkers then
18409: LD_VAR 0 1
18413: PUSH
18414: LD_EXP 82
18418: IN
18419: IFFALSE 18437
// leftBunkers = leftBunkers diff unit ;
18421: LD_ADDR_EXP 82
18425: PUSH
18426: LD_EXP 82
18430: PUSH
18431: LD_VAR 0 1
18435: DIFF
18436: ST_TO_ADDR
// if unit in rightBunkers then
18437: LD_VAR 0 1
18441: PUSH
18442: LD_EXP 83
18446: IN
18447: IFFALSE 18465
// rightBunkers = rightBunkers diff unit ;
18449: LD_ADDR_EXP 83
18453: PUSH
18454: LD_EXP 83
18458: PUSH
18459: LD_VAR 0 1
18463: DIFF
18464: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 255
18474: PUSH
18475: LD_INT 1
18477: EQUAL
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 247
18488: PUSH
18489: LD_INT 1
18491: EQUAL
18492: AND
18493: IFFALSE 18523
// if unit in trapTeam then
18495: LD_VAR 0 1
18499: PUSH
18500: LD_EXP 81
18504: IN
18505: IFFALSE 18523
// trapTeam = trapTeam diff unit ;
18507: LD_ADDR_EXP 81
18511: PUSH
18512: LD_EXP 81
18516: PUSH
18517: LD_VAR 0 1
18521: DIFF
18522: ST_TO_ADDR
// end ;
18523: PPOPN 1
18525: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18526: LD_VAR 0 3
18530: PUSH
18531: LD_INT 1
18533: EQUAL
18534: IFFALSE 18544
// captureBelkovVehicle = true ;
18536: LD_ADDR_EXP 38
18540: PUSH
18541: LD_INT 1
18543: ST_TO_ADDR
// if original_side = 6 then
18544: LD_VAR 0 3
18548: PUSH
18549: LD_INT 6
18551: EQUAL
18552: IFFALSE 18596
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18554: LD_VAR 0 1
18558: PUSH
18559: LD_VAR 0 2
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PPUSH
18568: LD_INT 118
18570: PPUSH
18571: LD_INT 25
18573: PPUSH
18574: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18578: LD_VAR 0 1
18582: PUSH
18583: LD_VAR 0 2
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PPUSH
18592: CALL_OW 139
// end ; end ;
18596: PPOPN 4
18598: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18599: LD_VAR 0 1
18603: PUSH
18604: LD_INT 3
18606: EQUAL
18607: PUSH
18608: LD_VAR 0 2
18612: PUSH
18613: LD_INT 6
18615: EQUAL
18616: AND
18617: IFFALSE 18623
// AttackComrades ;
18619: CALL 19660 0 0
// end ;
18623: PPOPN 2
18625: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18626: LD_VAR 0 2
18630: PUSH
18631: LD_INT 6
18633: EQUAL
18634: IFFALSE 18648
// SetSide ( building , 3 ) ;
18636: LD_VAR 0 1
18640: PPUSH
18641: LD_INT 3
18643: PPUSH
18644: CALL_OW 235
// end ; end_of_file
18648: PPOPN 3
18650: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18651: LD_EXP 16
18655: PUSH
18656: LD_INT 8
18658: PPUSH
18659: LD_INT 22
18661: PUSH
18662: LD_INT 3
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 21
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 71
18687: PUSH
18688: LD_INT 0
18690: EQUAL
18691: AND
18692: IFFALSE 18793
18694: GO 18696
18696: DISABLE
// begin enable ;
18697: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18698: LD_EXP 36
18702: NOT
18703: PUSH
18704: LD_EXP 64
18708: PPUSH
18709: CALL_OW 302
18713: PUSH
18714: LD_EXP 68
18718: PPUSH
18719: CALL_OW 302
18723: OR
18724: AND
18725: IFFALSE 18772
// begin case Query ( QContMission ) of 1 :
18727: LD_STRING QContMission
18729: PPUSH
18730: CALL_OW 97
18734: PUSH
18735: LD_INT 1
18737: DOUBLE
18738: EQUAL
18739: IFTRUE 18743
18741: GO 18750
18743: POP
// begin FinishMission ;
18744: CALL 18794 0 0
// end ; 2 :
18748: GO 18770
18750: LD_INT 2
18752: DOUBLE
18753: EQUAL
18754: IFTRUE 18758
18756: GO 18769
18758: POP
// begin saveBelkovObjective = true ;
18759: LD_ADDR_EXP 36
18763: PUSH
18764: LD_INT 1
18766: ST_TO_ADDR
// end ; end ;
18767: GO 18770
18769: POP
// end else
18770: GO 18783
// if not belkovSaved then
18772: LD_EXP 37
18776: NOT
18777: IFFALSE 18783
// FinishMission ;
18779: CALL 18794 0 0
// if belkovSaved then
18783: LD_EXP 37
18787: IFFALSE 18793
// FinishMission ;
18789: CALL 18794 0 0
// end ;
18793: END
// function FinishMission ; begin
18794: LD_INT 0
18796: PPUSH
// SetRewards ;
18797: CALL 18818 0 0
// SavePlayerCharacters ;
18801: CALL 19108 0 0
// SaveGlobalVariables ;
18805: CALL 19325 0 0
// YouWin ;
18809: CALL_OW 103
// end ;
18813: LD_VAR 0 1
18817: RET
// function SetRewards ; begin
18818: LD_INT 0
18820: PPUSH
// case initiative of 1 :
18821: LD_EXP 42
18825: PUSH
18826: LD_INT 1
18828: DOUBLE
18829: EQUAL
18830: IFTRUE 18834
18832: GO 18847
18834: POP
// AddMedal ( Initiative , 1 ) ; 2 :
18835: LD_STRING Initiative
18837: PPUSH
18838: LD_INT 1
18840: PPUSH
18841: CALL_OW 101
18845: GO 18892
18847: LD_INT 2
18849: DOUBLE
18850: EQUAL
18851: IFTRUE 18855
18853: GO 18869
18855: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
18856: LD_STRING Initiative
18858: PPUSH
18859: LD_INT 2
18861: NEG
18862: PPUSH
18863: CALL_OW 101
18867: GO 18892
18869: LD_INT 3
18871: DOUBLE
18872: EQUAL
18873: IFTRUE 18877
18875: GO 18891
18877: POP
// AddMedal ( Initiative , - 1 ) ; end ;
18878: LD_STRING Initiative
18880: PPUSH
18881: LD_INT 1
18883: NEG
18884: PPUSH
18885: CALL_OW 101
18889: GO 18892
18891: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
18892: LD_EXP 37
18896: PUSH
18897: LD_EXP 64
18901: PPUSH
18902: CALL_OW 302
18906: PUSH
18907: LD_EXP 68
18911: PPUSH
18912: CALL_OW 302
18916: OR
18917: AND
18918: IFFALSE 18930
// AddMedal ( Belkov , 1 ) ;
18920: LD_STRING Belkov
18922: PPUSH
18923: LD_INT 1
18925: PPUSH
18926: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
18930: LD_EXP 37
18934: NOT
18935: PUSH
18936: LD_EXP 36
18940: NOT
18941: AND
18942: IFFALSE 18955
// AddMedal ( Belkov , - 1 ) ;
18944: LD_STRING Belkov
18946: PPUSH
18947: LD_INT 1
18949: NEG
18950: PPUSH
18951: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
18955: LD_EXP 37
18959: NOT
18960: PUSH
18961: LD_EXP 36
18965: AND
18966: IFFALSE 18979
// AddMedal ( Belkov , - 2 ) ;
18968: LD_STRING Belkov
18970: PPUSH
18971: LD_INT 2
18973: NEG
18974: PPUSH
18975: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
18979: LD_EXP 37
18983: PUSH
18984: LD_EXP 6
18988: PUSH
18989: LD_EXP 64
18993: PPUSH
18994: CALL_OW 301
18998: AND
18999: AND
19000: PUSH
19001: LD_EXP 6
19005: NOT
19006: PUSH
19007: LD_EXP 68
19011: PPUSH
19012: CALL_OW 301
19016: AND
19017: OR
19018: IFFALSE 19031
// AddMedal ( Belkov , - 2 ) ;
19020: LD_STRING Belkov
19022: PPUSH
19023: LD_INT 2
19025: NEG
19026: PPUSH
19027: CALL_OW 101
// if lostComradesCounter = 0 then
19031: LD_EXP 43
19035: PUSH
19036: LD_INT 0
19038: EQUAL
19039: IFFALSE 19053
// AddMedal ( NoLosses , 1 ) else
19041: LD_STRING NoLosses
19043: PPUSH
19044: LD_INT 1
19046: PPUSH
19047: CALL_OW 101
19051: GO 19063
// AddMedal ( NoLosses , 0 ) ;
19053: LD_STRING NoLosses
19055: PPUSH
19056: LD_INT 0
19058: PPUSH
19059: CALL_OW 101
// GiveMedals ( Main ) ;
19063: LD_STRING Main
19065: PPUSH
19066: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19070: LD_INT 22
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 1
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PPUSH
19094: CALL_OW 69
19098: PPUSH
19099: CALL_OW 43
// end ;
19103: LD_VAR 0 1
19107: RET
// function SavePlayerCharacters ; var othersYour ; begin
19108: LD_INT 0
19110: PPUSH
19111: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19112: LD_EXP 62
19116: PPUSH
19117: LD_STRING Burlak
19119: PPUSH
19120: LD_INT 3
19122: PPUSH
19123: CALL 4272 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19127: LD_EXP 63
19131: PPUSH
19132: LD_STRING Gnyevko
19134: PPUSH
19135: LD_INT 3
19137: PPUSH
19138: CALL 4272 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19142: LD_EXP 70
19146: PPUSH
19147: LD_STRING Kovalyuk
19149: PPUSH
19150: LD_INT 3
19152: PPUSH
19153: CALL 4272 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19157: LD_EXP 64
19161: PPUSH
19162: LD_STRING Belkov
19164: PPUSH
19165: LD_INT 3
19167: PPUSH
19168: CALL 4272 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19172: LD_EXP 68
19176: PPUSH
19177: LD_STRING Belkov2
19179: PPUSH
19180: LD_INT 3
19182: PPUSH
19183: CALL 4272 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19187: LD_EXP 65
19191: PPUSH
19192: LD_STRING Kirilenkova
19194: PPUSH
19195: LD_INT 3
19197: PPUSH
19198: CALL 4272 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19202: LD_ADDR_VAR 0 2
19206: PUSH
19207: LD_INT 22
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 21
19219: PUSH
19220: LD_INT 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: PUSH
19236: LD_EXP 62
19240: PUSH
19241: LD_EXP 63
19245: PUSH
19246: LD_EXP 64
19250: PUSH
19251: LD_EXP 68
19255: PUSH
19256: LD_EXP 70
19260: PUSH
19261: LD_EXP 65
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: DIFF
19274: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19275: LD_VAR 0 2
19279: PPUSH
19280: LD_STRING other_survivors
19282: PPUSH
19283: LD_INT 3
19285: PPUSH
19286: CALL 4328 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19290: LD_EXP 77
19294: PPUSH
19295: LD_STRING other_beria
19297: PPUSH
19298: LD_INT 6
19300: PPUSH
19301: CALL 4328 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19305: LD_EXP 69
19309: PPUSH
19310: LD_STRING other_kirov
19312: PPUSH
19313: LD_INT 6
19315: PPUSH
19316: CALL 4328 0 3
// end ;
19320: LD_VAR 0 1
19324: RET
// function SaveGlobalVariables ; var vehicles ; begin
19325: LD_INT 0
19327: PPUSH
19328: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_INT 22
19336: PUSH
19337: LD_INT 3
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 21
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: LD_INT 50
19356: PUSH
19357: EMPTY
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: ST_TO_ADDR
// if vehicles then
19370: LD_VAR 0 2
19374: IFFALSE 19388
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_STRING 02_Vehicles_1
19383: PPUSH
19384: CALL 5322 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19388: LD_INT 8
19390: PPUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 3
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: PPUSH
19404: CALL_OW 70
19408: PPUSH
19409: LD_STRING 02_BeriaBase_2
19411: PPUSH
19412: CALL 5465 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19416: LD_INT 9
19418: PPUSH
19419: LD_INT 22
19421: PUSH
19422: LD_INT 6
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 21
19431: PUSH
19432: LD_INT 3
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PPUSH
19443: CALL_OW 70
19447: PPUSH
19448: LD_STRING 02_KirovBase_3
19450: PPUSH
19451: CALL 5465 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19455: LD_INT 22
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 50
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: LD_INT 3
19483: PUSH
19484: LD_INT 95
19486: PUSH
19487: LD_INT 8
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PPUSH
19509: LD_STRING 02_OtherBuildings_4
19511: PPUSH
19512: CALL 5465 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19516: LD_INT 22
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 3
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 50
19538: PUSH
19539: EMPTY
19540: LIST
19541: PUSH
19542: LD_INT 23
19544: PUSH
19545: LD_INT 1
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PPUSH
19563: LD_STRING 02_AmericanBuildings_5
19565: PPUSH
19566: CALL 5465 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19570: LD_EXP 4
19574: PPUSH
19575: LD_STRING 02_MeetBelkovBrother_6
19577: PPUSH
19578: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19582: LD_INT 106
19584: PPUSH
19585: CALL_OW 274
19589: PPUSH
19590: LD_INT 1
19592: PPUSH
19593: CALL_OW 275
19597: PPUSH
19598: LD_STRING 02_BeriaResourceCrates_7
19600: PPUSH
19601: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19605: LD_INT 106
19607: PPUSH
19608: CALL_OW 274
19612: PPUSH
19613: LD_INT 2
19615: PPUSH
19616: CALL_OW 275
19620: PPUSH
19621: LD_STRING 02_BeriaResourceOil_8
19623: PPUSH
19624: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19628: LD_EXP 5
19632: PPUSH
19633: LD_STRING 02_PlatonovOpinion_9
19635: PPUSH
19636: CALL_OW 39
// end ; end_of_file
19640: LD_VAR 0 1
19644: RET
// export function BurlakIsDead ; begin
19645: LD_INT 0
19647: PPUSH
// YouLost ( Burlak ) ;
19648: LD_STRING Burlak
19650: PPUSH
19651: CALL_OW 104
// end ;
19655: LD_VAR 0 1
19659: RET
// export function AttackComrades ; begin
19660: LD_INT 0
19662: PPUSH
// YouLost ( SelfAttack ) ;
19663: LD_STRING SelfAttack
19665: PPUSH
19666: CALL_OW 104
// end ; end_of_file
19670: LD_VAR 0 1
19674: RET
// every 0 0$1 do var engs ;
19675: GO 19677
19677: DISABLE
19678: LD_INT 0
19680: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19681: LD_ADDR_VAR 0 1
19685: PUSH
19686: LD_EXP 69
19690: PPUSH
19691: LD_INT 25
19693: PUSH
19694: LD_INT 2
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PPUSH
19701: CALL_OW 72
19705: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 122
// wait ( 0 0$1 ) ;
19715: LD_INT 35
19717: PPUSH
19718: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_INT 31
19729: PPUSH
19730: LD_INT 146
19732: PPUSH
19733: LD_INT 107
19735: PPUSH
19736: LD_INT 1
19738: PPUSH
19739: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
19743: LD_VAR 0 1
19747: PPUSH
19748: LD_INT 31
19750: PPUSH
19751: LD_INT 176
19753: PPUSH
19754: LD_INT 123
19756: PPUSH
19757: LD_INT 5
19759: PPUSH
19760: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
19764: LD_VAR 0 1
19768: PPUSH
19769: LD_INT 31
19771: PPUSH
19772: LD_INT 170
19774: PPUSH
19775: LD_INT 102
19777: PPUSH
19778: LD_INT 4
19780: PPUSH
19781: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
19785: LD_VAR 0 1
19789: PPUSH
19790: LD_INT 31
19792: PPUSH
19793: LD_INT 173
19795: PPUSH
19796: LD_INT 105
19798: PPUSH
19799: LD_INT 4
19801: PPUSH
19802: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
19806: LD_VAR 0 1
19810: PPUSH
19811: LD_INT 71
19813: PPUSH
19814: CALL_OW 180
// end ;
19818: PPOPN 1
19820: END
// every 0 0$1 trigger activateAMAI do
19821: LD_EXP 27
19825: IFFALSE 19849
19827: GO 19829
19829: DISABLE
// begin enable ;
19830: ENABLE
// RepairDamageLeftBunkers ;
19831: CALL 19850 0 0
// if Difficulty = 3 then
19835: LD_OWVAR 67
19839: PUSH
19840: LD_INT 3
19842: EQUAL
19843: IFFALSE 19849
// RepairDamageRightBunkers ;
19845: CALL 20058 0 0
// end ;
19849: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
19855: LD_EXP 86
19859: NOT
19860: PUSH
19861: LD_INT 17
19863: PPUSH
19864: LD_INT 22
19866: PUSH
19867: LD_INT 1
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 21
19876: PUSH
19877: LD_INT 3
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: LD_INT 30
19886: PUSH
19887: LD_INT 31
19889: PUSH
19890: EMPTY
19891: LIST
19892: LIST
19893: PUSH
19894: LD_INT 3
19896: PUSH
19897: LD_INT 24
19899: PUSH
19900: LD_INT 1000
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: PPUSH
19917: CALL_OW 70
19921: PUSH
19922: LD_INT 0
19924: EQUAL
19925: OR
19926: IFFALSE 19930
// exit ;
19928: GO 20053
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
19930: LD_EXP 86
19934: PPUSH
19935: LD_INT 3
19937: PUSH
19938: LD_INT 60
19940: PUSH
19941: EMPTY
19942: LIST
19943: PUSH
19944: EMPTY
19945: LIST
19946: LIST
19947: PPUSH
19948: CALL_OW 72
19952: PPUSH
19953: CALL_OW 122
// for bunker in leftBunkers do
19957: LD_ADDR_VAR 0 3
19961: PUSH
19962: LD_EXP 82
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20019
// if GetLives ( bunker ) < 1000 then
19970: LD_VAR 0 3
19974: PPUSH
19975: CALL_OW 256
19979: PUSH
19980: LD_INT 1000
19982: LESS
19983: IFFALSE 20017
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
19985: LD_EXP 86
19989: PPUSH
19990: LD_INT 3
19992: PUSH
19993: LD_INT 60
19995: PUSH
19996: EMPTY
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: PPUSH
20003: CALL_OW 72
20007: PPUSH
20008: LD_VAR 0 3
20012: PPUSH
20013: CALL_OW 190
20017: GO 19967
20019: POP
20020: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20021: LD_EXP 86
20025: PPUSH
20026: LD_INT 3
20028: PUSH
20029: LD_INT 60
20031: PUSH
20032: EMPTY
20033: LIST
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PPUSH
20039: CALL_OW 72
20043: PPUSH
20044: LD_EXP 84
20048: PPUSH
20049: CALL_OW 180
// end ;
20053: LD_VAR 0 1
20057: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20058: LD_INT 0
20060: PPUSH
20061: PPUSH
20062: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20063: LD_EXP 87
20067: NOT
20068: PUSH
20069: LD_INT 16
20071: PPUSH
20072: LD_INT 22
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 21
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 30
20094: PUSH
20095: LD_INT 31
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 3
20104: PUSH
20105: LD_INT 24
20107: PUSH
20108: LD_INT 1000
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 70
20129: PUSH
20130: LD_INT 0
20132: EQUAL
20133: OR
20134: IFFALSE 20138
// exit ;
20136: GO 20261
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20138: LD_EXP 87
20142: PPUSH
20143: LD_INT 3
20145: PUSH
20146: LD_INT 60
20148: PUSH
20149: EMPTY
20150: LIST
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PPUSH
20156: CALL_OW 72
20160: PPUSH
20161: CALL_OW 122
// for bunker in rightBunkers do
20165: LD_ADDR_VAR 0 3
20169: PUSH
20170: LD_EXP 83
20174: PUSH
20175: FOR_IN
20176: IFFALSE 20227
// if GetLives ( bunker ) < 1000 then
20178: LD_VAR 0 3
20182: PPUSH
20183: CALL_OW 256
20187: PUSH
20188: LD_INT 1000
20190: LESS
20191: IFFALSE 20225
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20193: LD_EXP 87
20197: PPUSH
20198: LD_INT 3
20200: PUSH
20201: LD_INT 60
20203: PUSH
20204: EMPTY
20205: LIST
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: PPUSH
20211: CALL_OW 72
20215: PPUSH
20216: LD_VAR 0 3
20220: PPUSH
20221: CALL_OW 190
20225: GO 20175
20227: POP
20228: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20229: LD_EXP 87
20233: PPUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 60
20239: PUSH
20240: EMPTY
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 72
20251: PPUSH
20252: LD_EXP 85
20256: PPUSH
20257: CALL_OW 180
// end ;
20261: LD_VAR 0 1
20265: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20266: LD_EXP 28
20270: PUSH
20271: LD_EXP 73
20275: AND
20276: IFFALSE 20413
20278: GO 20280
20280: DISABLE
20281: LD_INT 0
20283: PPUSH
20284: PPUSH
20285: PPUSH
// begin enable ;
20286: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20287: LD_ADDR_VAR 0 2
20291: PUSH
20292: LD_EXP 73
20296: PPUSH
20297: LD_INT 25
20299: PUSH
20300: LD_INT 4
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PPUSH
20307: CALL_OW 72
20311: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20312: LD_ADDR_VAR 0 3
20316: PUSH
20317: LD_EXP 73
20321: PPUSH
20322: LD_INT 3
20324: PUSH
20325: LD_INT 24
20327: PUSH
20328: LD_INT 650
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 72
20343: ST_TO_ADDR
// if not damaged and med then
20344: LD_VAR 0 3
20348: NOT
20349: PUSH
20350: LD_VAR 0 2
20354: AND
20355: IFFALSE 20374
// ComMoveXY ( med , 83 , 17 ) else
20357: LD_VAR 0 2
20361: PPUSH
20362: LD_INT 83
20364: PPUSH
20365: LD_INT 17
20367: PPUSH
20368: CALL_OW 111
20372: GO 20413
// if med then
20374: LD_VAR 0 2
20378: IFFALSE 20413
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20380: LD_VAR 0 3
20384: PPUSH
20385: LD_INT 83
20387: PPUSH
20388: LD_INT 17
20390: PPUSH
20391: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20395: LD_VAR 0 2
20399: PPUSH
20400: LD_VAR 0 3
20404: PUSH
20405: LD_INT 1
20407: ARRAY
20408: PPUSH
20409: CALL_OW 128
// end ; end ; end_of_file
20413: PPOPN 3
20415: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20416: LD_INT 22
20418: PUSH
20419: LD_INT 3
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 23
20428: PUSH
20429: LD_INT 1
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 30
20438: PUSH
20439: LD_INT 0
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PPUSH
20451: CALL_OW 69
20455: PUSH
20456: LD_INT 2
20458: EQUAL
20459: IFFALSE 20471
20461: GO 20463
20463: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20464: LD_STRING ACH_DEPOT
20466: PPUSH
20467: CALL_OW 543
20471: END
// every 1 trigger achievement_ConstructVehicles = 3 do
20472: LD_EXP 44
20476: PUSH
20477: LD_INT 3
20479: EQUAL
20480: IFFALSE 20492
20482: GO 20484
20484: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20485: LD_STRING ACH_WORKSHOP
20487: PPUSH
20488: CALL_OW 543
20492: END
// every 1 trigger captureBelkovVehicle do
20493: LD_EXP 38
20497: IFFALSE 20509
20499: GO 20501
20501: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
20502: LD_STRING ACH_RETAKE
20504: PPUSH
20505: CALL_OW 543
20509: END
