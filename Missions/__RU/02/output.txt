// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 21 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareRussian ;
  12: CALL 351 0 0
// Action ;
  16: CALL 5554 0 0
// end ;
  20: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  21: LD_INT 0
  23: PPUSH
// debug := false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_STRING 01_
  39: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_STRING 02_
  47: ST_TO_ADDR
// beriaVisited := false ;
  48: LD_ADDR_EXP 4
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  56: LD_ADDR_EXP 5
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// kirovHasTank := false ;
  64: LD_ADDR_EXP 6
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// blockNorth := true ;
  72: LD_ADDR_EXP 7
  76: PUSH
  77: LD_INT 1
  79: ST_TO_ADDR
// hasLab := false ;
  80: LD_ADDR_EXP 9
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// hasWorkshop := false ;
  88: LD_ADDR_EXP 10
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// hasToBuildTank := false ;
  96: LD_ADDR_EXP 11
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// hasTank := false ;
 104: LD_ADDR_EXP 12
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 112: LD_ADDR_EXP 8
 116: PUSH
 117: LD_INT 60
 119: ST_TO_ADDR
// allianceAttacked := false ;
 120: LD_ADDR_EXP 13
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// hasAllTanks := false ;
 128: LD_ADDR_EXP 14
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// vehCounter := 0 ;
 136: LD_ADDR_EXP 15
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// vehCaptured := false ;
 144: LD_ADDR_EXP 16
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// americanTrap := false ;
 152: LD_ADDR_EXP 17
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// belkovTrapped := false ;
 160: LD_ADDR_EXP 18
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// belkovDied := false ;
 168: LD_ADDR_EXP 19
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// belkovSaved := false ;
 176: LD_ADDR_EXP 28
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// westOutpostDiscovered := false ;
 184: LD_ADDR_EXP 20
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 192: LD_ADDR_EXP 21
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// westOutpostDestroyed := false ;
 200: LD_ADDR_EXP 22
 204: PUSH
 205: LD_INT 0
 207: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 208: LD_ADDR_EXP 23
 212: PUSH
 213: LD_INT 0
 215: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 216: LD_ADDR_EXP 24
 220: PUSH
 221: LD_INT 0
 223: ST_TO_ADDR
// reinforcementsGained := false ;
 224: LD_ADDR_EXP 25
 228: PUSH
 229: LD_INT 0
 231: ST_TO_ADDR
// allMapPointsSpotted := false ;
 232: LD_ADDR_EXP 26
 236: PUSH
 237: LD_INT 0
 239: ST_TO_ADDR
// mapSpotCounter := 0 ;
 240: LD_ADDR_EXP 27
 244: PUSH
 245: LD_INT 0
 247: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 248: LD_ADDR_EXP 29
 252: PUSH
 253: LD_INT 0
 255: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 256: LD_ADDR_EXP 30
 260: PUSH
 261: LD_INT 0
 263: ST_TO_ADDR
// initiative := false ;
 264: LD_ADDR_EXP 31
 268: PUSH
 269: LD_INT 0
 271: ST_TO_ADDR
// belkovBrother := false ;
 272: LD_ADDR_EXP 32
 276: PUSH
 277: LD_INT 0
 279: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 280: LD_ADDR_EXP 33
 284: PUSH
 285: LD_INT 1
 287: ST_TO_ADDR
// end ;
 288: LD_VAR 0 1
 292: RET
// every 0 0$1 trigger vehCounter >= 5 do
 293: LD_EXP 15
 297: PUSH
 298: LD_INT 5
 300: GREATEREQUAL
 301: IFFALSE 313
 303: GO 305
 305: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 306: LD_STRING ACH_WORKSHOP
 308: PPUSH
 309: CALL_OW 543
 313: END
// every 0 0$1 trigger vehCaptured do
 314: LD_EXP 16
 318: IFFALSE 330
 320: GO 322
 322: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 323: LD_STRING ACH_RETAKE
 325: PPUSH
 326: CALL_OW 543
 330: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 331: LD_INT 193
 333: PPUSH
 334: CALL_OW 301
 338: IFFALSE 350
 340: GO 342
 342: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 343: LD_STRING ACH_DEPOT
 345: PPUSH
 346: CALL_OW 543
 350: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 351: LD_INT 0
 353: PPUSH
 354: PPUSH
 355: PPUSH
 356: PPUSH
 357: PPUSH
// uc_side := 6 ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_INT 6
 365: ST_TO_ADDR
// uc_nation := 3 ;
 366: LD_ADDR_OWVAR 21
 370: PUSH
 371: LD_INT 3
 373: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 374: LD_INT 71
 376: PPUSH
 377: LD_STRING kirov
 379: PPUSH
 380: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 384: LD_ADDR_EXP 38
 388: PUSH
 389: LD_STRING Kurin
 391: PPUSH
 392: CALL_OW 25
 396: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 397: LD_EXP 38
 401: PPUSH
 402: LD_INT 117
 404: PPUSH
 405: LD_INT 108
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 415: LD_EXP 38
 419: PPUSH
 420: LD_INT 2
 422: PPUSH
 423: CALL 55978 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 427: LD_ADDR_EXP 39
 431: PUSH
 432: LD_STRING Kovalyuk
 434: PPUSH
 435: CALL_OW 25
 439: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 440: LD_EXP 39
 444: PPUSH
 445: LD_INT 71
 447: PPUSH
 448: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 3 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 452: LD_ADDR_VAR 0 4
 456: PUSH
 457: LD_INT 95
 459: PUSH
 460: LD_INT 1
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 209
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: LD_INT 3
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: LIST
 484: PUSH
 485: LD_INT 83
 487: PUSH
 488: LD_INT 4
 490: PUSH
 491: LD_INT 2
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 71
 501: PUSH
 502: LD_INT 2
 504: PUSH
 505: LD_INT 2
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 71
 515: PUSH
 516: LD_INT 3
 518: PUSH
 519: LD_INT 1
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: LIST
 531: LIST
 532: LIST
 533: ST_TO_ADDR
// for i in tmp do
 534: LD_ADDR_VAR 0 2
 538: PUSH
 539: LD_VAR 0 4
 543: PUSH
 544: FOR_IN
 545: IFFALSE 651
// for j := 1 to i [ 3 ] do
 547: LD_ADDR_VAR 0 3
 551: PUSH
 552: DOUBLE
 553: LD_INT 1
 555: DEC
 556: ST_TO_ADDR
 557: LD_VAR 0 2
 561: PUSH
 562: LD_INT 3
 564: ARRAY
 565: PUSH
 566: FOR_TO
 567: IFFALSE 647
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 569: LD_INT 0
 571: PPUSH
 572: LD_VAR 0 2
 576: PUSH
 577: LD_INT 2
 579: ARRAY
 580: PPUSH
 581: LD_INT 2
 583: PPUSH
 584: CALL_OW 380
// un := CreateHuman ;
 588: LD_ADDR_VAR 0 5
 592: PUSH
 593: CALL_OW 44
 597: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 598: LD_VAR 0 5
 602: PPUSH
 603: LD_VAR 0 2
 607: PUSH
 608: LD_INT 1
 610: ARRAY
 611: PPUSH
 612: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 616: LD_ADDR_EXP 43
 620: PUSH
 621: LD_EXP 43
 625: PPUSH
 626: LD_EXP 43
 630: PUSH
 631: LD_INT 1
 633: PLUS
 634: PPUSH
 635: LD_VAR 0 5
 639: PPUSH
 640: CALL_OW 1
 644: ST_TO_ADDR
// end ;
 645: GO 566
 647: POP
 648: POP
 649: GO 544
 651: POP
 652: POP
// SetBName ( beria , beria ) ;
 653: LD_INT 106
 655: PPUSH
 656: LD_STRING beria
 658: PPUSH
 659: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 663: LD_ADDR_EXP 40
 667: PUSH
 668: LD_STRING Platonov
 670: PPUSH
 671: CALL_OW 25
 675: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 676: LD_EXP 40
 680: PPUSH
 681: LD_INT 66
 683: PPUSH
 684: LD_INT 99
 686: PPUSH
 687: LD_INT 0
 689: PPUSH
 690: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 694: LD_EXP 40
 698: PPUSH
 699: LD_INT 0
 701: PPUSH
 702: CALL 55978 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 706: LD_ADDR_EXP 41
 710: PUSH
 711: LD_STRING Kuklajs
 713: PPUSH
 714: CALL_OW 25
 718: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 719: LD_ADDR_EXP 42
 723: PUSH
 724: LD_STRING Benko
 726: PPUSH
 727: CALL_OW 25
 731: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 732: LD_EXP 41
 736: PPUSH
 737: LD_INT 76
 739: PPUSH
 740: LD_INT 99
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 750: LD_EXP 42
 754: PPUSH
 755: LD_INT 68
 757: PPUSH
 758: LD_INT 88
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 768: LD_EXP 41
 772: PUSH
 773: LD_EXP 42
 777: PUSH
 778: EMPTY
 779: LIST
 780: LIST
 781: PPUSH
 782: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 786: LD_ADDR_EXP 44
 790: PUSH
 791: LD_EXP 44
 795: PPUSH
 796: LD_EXP 44
 800: PUSH
 801: LD_INT 1
 803: PLUS
 804: PPUSH
 805: LD_EXP 41
 809: PPUSH
 810: CALL_OW 1
 814: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 815: LD_ADDR_EXP 44
 819: PUSH
 820: LD_EXP 44
 824: PPUSH
 825: LD_EXP 44
 829: PUSH
 830: LD_INT 1
 832: PLUS
 833: PPUSH
 834: LD_EXP 42
 838: PPUSH
 839: CALL_OW 1
 843: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 844: LD_ADDR_VAR 0 4
 848: PUSH
 849: LD_INT 63
 851: PUSH
 852: LD_INT 86
 854: PUSH
 855: LD_INT 0
 857: PUSH
 858: EMPTY
 859: LIST
 860: LIST
 861: LIST
 862: PUSH
 863: LD_INT 74
 865: PUSH
 866: LD_INT 94
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 77
 879: PUSH
 880: LD_INT 103
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: LIST
 895: ST_TO_ADDR
// for i in tmp do
 896: LD_ADDR_VAR 0 2
 900: PUSH
 901: LD_VAR 0 4
 905: PUSH
 906: FOR_IN
 907: IFFALSE 1034
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
 909: LD_INT 0
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: LD_INT 3
 917: PUSH
 918: LD_INT 2
 920: PUSH
 921: LD_INT 2
 923: PUSH
 924: LD_INT 1
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: LIST
 931: LIST
 932: PUSH
 933: LD_OWVAR 67
 937: ARRAY
 938: PPUSH
 939: CALL_OW 380
// un := CreateHuman ;
 943: LD_ADDR_VAR 0 5
 947: PUSH
 948: CALL_OW 44
 952: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
 953: LD_VAR 0 5
 957: PPUSH
 958: LD_VAR 0 2
 962: PUSH
 963: LD_INT 3
 965: ARRAY
 966: PPUSH
 967: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
 971: LD_VAR 0 5
 975: PPUSH
 976: LD_VAR 0 2
 980: PUSH
 981: LD_INT 1
 983: ARRAY
 984: PPUSH
 985: LD_VAR 0 2
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: CALL_OW 428
 998: PPUSH
 999: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1003: LD_ADDR_EXP 44
1007: PUSH
1008: LD_EXP 44
1012: PPUSH
1013: LD_EXP 44
1017: PUSH
1018: LD_INT 1
1020: PLUS
1021: PPUSH
1022: LD_VAR 0 5
1026: PPUSH
1027: CALL_OW 1
1031: ST_TO_ADDR
// end ;
1032: GO 906
1034: POP
1035: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1036: LD_EXP 2
1040: PUSH
1041: LD_STRING Gnyevko
1043: STR
1044: PPUSH
1045: CALL_OW 28
1049: NOT
1050: PUSH
1051: LD_EXP 1
1055: NOT
1056: AND
1057: IFFALSE 1084
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1059: LD_INT 1
1061: PPUSH
1062: LD_INT 2
1064: PPUSH
1065: LD_INT 1
1067: PPUSH
1068: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1072: CALL_OW 44
1076: PPUSH
1077: LD_INT 106
1079: PPUSH
1080: CALL_OW 52
// end ; end ;
1084: LD_VAR 0 1
1088: RET
// export function PrepareBurlak ; var i ; begin
1089: LD_INT 0
1091: PPUSH
1092: PPUSH
// uc_side := 3 ;
1093: LD_ADDR_OWVAR 20
1097: PUSH
1098: LD_INT 3
1100: ST_TO_ADDR
// uc_nation := 3 ;
1101: LD_ADDR_OWVAR 21
1105: PUSH
1106: LD_INT 3
1108: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1109: LD_ADDR_EXP 34
1113: PUSH
1114: LD_STRING Burlak
1116: PPUSH
1117: LD_EXP 1
1121: NOT
1122: PPUSH
1123: LD_EXP 2
1127: PPUSH
1128: CALL 16196 0 3
1132: ST_TO_ADDR
// uc_side := 6 ;
1133: LD_ADDR_OWVAR 20
1137: PUSH
1138: LD_INT 6
1140: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1141: LD_ADDR_EXP 35
1145: PUSH
1146: LD_STRING Gnyevko
1148: PPUSH
1149: LD_EXP 1
1153: NOT
1154: PPUSH
1155: LD_EXP 2
1159: PPUSH
1160: CALL 16196 0 3
1164: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1165: LD_ADDR_EXP 37
1169: PUSH
1170: LD_STRING Kirilenkova
1172: PPUSH
1173: LD_EXP 1
1177: NOT
1178: PPUSH
1179: LD_EXP 2
1183: PPUSH
1184: CALL 16196 0 3
1188: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1189: LD_ADDR_EXP 36
1193: PUSH
1194: LD_STRING Belkov
1196: PPUSH
1197: LD_EXP 1
1201: NOT
1202: PPUSH
1203: LD_EXP 2
1207: PPUSH
1208: CALL 16196 0 3
1212: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1213: LD_ADDR_EXP 45
1217: PUSH
1218: LD_STRING 01_OtherSurvivors
1220: PPUSH
1221: CALL_OW 31
1225: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1226: LD_ADDR_VAR 0 1
1230: PUSH
1231: LD_EXP 34
1235: PUSH
1236: LD_EXP 35
1240: PUSH
1241: LD_EXP 37
1245: PUSH
1246: LD_EXP 36
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: LIST
1255: LIST
1256: PUSH
1257: LD_EXP 45
1261: UNION
1262: ST_TO_ADDR
// end ;
1263: LD_VAR 0 1
1267: RET
// every 0 0$2 trigger beriaVisited do var tmp ;
1268: LD_EXP 4
1272: IFFALSE 1429
1274: GO 1276
1276: DISABLE
1277: LD_INT 0
1279: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1280: LD_ADDR_VAR 0 1
1284: PUSH
1285: LD_EXP 43
1289: PPUSH
1290: LD_INT 25
1292: PUSH
1293: LD_INT 2
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: PPUSH
1300: CALL_OW 72
1304: ST_TO_ADDR
// if not tmp then
1305: LD_VAR 0 1
1309: NOT
1310: IFFALSE 1314
// exit ;
1312: GO 1429
// wait ( 0 0$5 ) ;
1314: LD_INT 175
1316: PPUSH
1317: CALL_OW 67
// ComExit ( tmp ) ;
1321: LD_VAR 0 1
1325: PPUSH
1326: CALL 53321 0 1
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1330: LD_VAR 0 1
1334: PPUSH
1335: LD_INT 2
1337: PPUSH
1338: LD_INT 113
1340: PPUSH
1341: LD_INT 113
1343: PPUSH
1344: LD_INT 0
1346: PPUSH
1347: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1351: LD_INT 83
1353: PPUSH
1354: LD_INT 46
1356: PPUSH
1357: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1361: LD_INT 83
1363: PPUSH
1364: LD_INT 47
1366: PPUSH
1367: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1371: LD_VAR 0 1
1375: PPUSH
1376: LD_INT 26
1378: PPUSH
1379: LD_INT 116
1381: PPUSH
1382: LD_INT 98
1384: PPUSH
1385: LD_INT 0
1387: PPUSH
1388: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1392: LD_INT 35
1394: PPUSH
1395: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1399: LD_VAR 0 1
1403: PPUSH
1404: LD_INT 60
1406: PUSH
1407: EMPTY
1408: LIST
1409: PPUSH
1410: CALL_OW 72
1414: NOT
1415: IFFALSE 1392
// ComEnterUnit ( tmp , kirov ) ;
1417: LD_VAR 0 1
1421: PPUSH
1422: LD_INT 71
1424: PPUSH
1425: CALL_OW 120
// end ;
1429: PPOPN 1
1431: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1432: LD_INT 0
1434: PPUSH
1435: PPUSH
1436: PPUSH
1437: PPUSH
1438: PPUSH
1439: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1440: LD_ADDR_VAR 0 3
1444: PUSH
1445: LD_INT 22
1447: PUSH
1448: LD_INT 6
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PUSH
1455: LD_INT 21
1457: PUSH
1458: LD_INT 2
1460: PUSH
1461: EMPTY
1462: LIST
1463: LIST
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: PPUSH
1469: CALL_OW 69
1473: ST_TO_ADDR
// if not belkovTank then
1474: LD_VAR 0 3
1478: NOT
1479: IFFALSE 1572
// begin uc_side := 6 ;
1481: LD_ADDR_OWVAR 20
1485: PUSH
1486: LD_INT 6
1488: ST_TO_ADDR
// uc_nation := 3 ;
1489: LD_ADDR_OWVAR 21
1493: PUSH
1494: LD_INT 3
1496: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1497: LD_INT 21
1499: PPUSH
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: LD_INT 42
1508: PPUSH
1509: LD_INT 100
1511: PPUSH
1512: CALL 21060 0 5
// belkovTank := CreateVehicle ;
1516: LD_ADDR_VAR 0 3
1520: PUSH
1521: CALL_OW 45
1525: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1526: LD_VAR 0 3
1530: PPUSH
1531: LD_INT 5
1533: PPUSH
1534: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1538: LD_VAR 0 3
1542: PPUSH
1543: LD_INT 127
1545: PPUSH
1546: LD_INT 118
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1556: LD_EXP 36
1560: PPUSH
1561: LD_VAR 0 3
1565: PPUSH
1566: CALL_OW 120
// end else
1570: GO 1586
// begin belkovTank := belkovTank [ 1 ] ;
1572: LD_ADDR_VAR 0 3
1576: PUSH
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 1
1584: ARRAY
1585: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1586: LD_VAR 0 3
1590: PPUSH
1591: LD_INT 71
1593: PPUSH
1594: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1598: LD_VAR 0 3
1602: PPUSH
1603: LD_INT 71
1605: PPUSH
1606: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1610: LD_VAR 0 3
1614: PPUSH
1615: CALL_OW 256
1619: PUSH
1620: LD_INT 1000
1622: LESS
1623: IFFALSE 1736
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1625: LD_ADDR_VAR 0 4
1629: PUSH
1630: LD_EXP 43
1634: PPUSH
1635: LD_INT 25
1637: PUSH
1638: LD_INT 3
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: PPUSH
1645: CALL_OW 72
1649: ST_TO_ADDR
// if not mech then
1650: LD_VAR 0 4
1654: NOT
1655: IFFALSE 1671
// SetLives ( belkovTank , 1000 ) else
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 1000
1664: PPUSH
1665: CALL_OW 234
1669: GO 1736
// begin ComExit ( mech ) ;
1671: LD_VAR 0 4
1675: PPUSH
1676: CALL 53321 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1680: LD_VAR 0 4
1684: PPUSH
1685: LD_VAR 0 3
1689: PPUSH
1690: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1694: LD_VAR 0 4
1698: PPUSH
1699: LD_INT 22
1701: PUSH
1702: LD_INT 6
1704: PUSH
1705: EMPTY
1706: LIST
1707: LIST
1708: PUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 2
1714: PUSH
1715: EMPTY
1716: LIST
1717: LIST
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: PPUSH
1723: CALL_OW 69
1727: PUSH
1728: LD_INT 1
1730: ARRAY
1731: PPUSH
1732: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1736: LD_INT 70
1738: PPUSH
1739: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1743: LD_VAR 0 3
1747: PPUSH
1748: CALL_OW 256
1752: PUSH
1753: LD_INT 1000
1755: EQUAL
1756: IFFALSE 1736
// if mech then
1758: LD_VAR 0 4
1762: IFFALSE 1806
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_INT 22
1771: PUSH
1772: LD_INT 6
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: LD_INT 30
1781: PUSH
1782: LD_INT 2
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: PUSH
1789: EMPTY
1790: LIST
1791: LIST
1792: PPUSH
1793: CALL_OW 69
1797: PUSH
1798: LD_INT 1
1800: ARRAY
1801: PPUSH
1802: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
1806: LD_EXP 36
1810: PPUSH
1811: LD_INT 107
1813: PPUSH
1814: LD_INT 104
1816: PPUSH
1817: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
1821: LD_EXP 36
1825: PPUSH
1826: LD_INT 95
1828: PPUSH
1829: LD_INT 101
1831: PPUSH
1832: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
1836: LD_EXP 36
1840: PPUSH
1841: LD_INT 89
1843: PPUSH
1844: LD_INT 100
1846: PPUSH
1847: CALL_OW 171
// wait ( 0 0$2 ) ;
1851: LD_INT 70
1853: PPUSH
1854: CALL_OW 67
// for i in belkovTeam do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: LD_EXP 45
1867: PUSH
1868: FOR_IN
1869: IFFALSE 1897
// begin ComExit ( i ) ;
1871: LD_VAR 0 2
1875: PPUSH
1876: CALL 53321 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
1880: LD_VAR 0 2
1884: PPUSH
1885: LD_INT 89
1887: PPUSH
1888: LD_INT 100
1890: PPUSH
1891: CALL_OW 171
// end ;
1895: GO 1868
1897: POP
1898: POP
// tmp := Belkov union belkovTeam ;
1899: LD_ADDR_VAR 0 5
1903: PUSH
1904: LD_EXP 36
1908: PUSH
1909: LD_EXP 45
1913: UNION
1914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
1915: LD_INT 35
1917: PPUSH
1918: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1922: LD_VAR 0 5
1926: PPUSH
1927: LD_INT 60
1929: PUSH
1930: EMPTY
1931: LIST
1932: PPUSH
1933: CALL_OW 72
1937: NOT
1938: IFFALSE 1915
// ComMoveXY ( tmp , 71 , 65 ) ;
1940: LD_VAR 0 5
1944: PPUSH
1945: LD_INT 71
1947: PPUSH
1948: LD_INT 65
1950: PPUSH
1951: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
1955: LD_VAR 0 5
1959: PPUSH
1960: LD_INT 61
1962: PPUSH
1963: LD_INT 37
1965: PPUSH
1966: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
1970: LD_VAR 0 5
1974: PPUSH
1975: LD_INT 67
1977: PPUSH
1978: LD_INT 17
1980: PPUSH
1981: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
1985: LD_VAR 0 5
1989: PPUSH
1990: LD_INT 70
1992: PPUSH
1993: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
1997: LD_EXP 36
2001: PPUSH
2002: LD_INT 63
2004: PPUSH
2005: LD_INT 8
2007: PPUSH
2008: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2012: LD_EXP 36
2016: PPUSH
2017: LD_INT 105
2019: PPUSH
2020: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2024: LD_EXP 36
2028: PPUSH
2029: LD_INT 86
2031: PPUSH
2032: LD_INT 37
2034: PPUSH
2035: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2039: LD_EXP 36
2043: PPUSH
2044: LD_INT 105
2046: PPUSH
2047: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2051: LD_VAR 0 5
2055: PPUSH
2056: LD_INT 88
2058: PPUSH
2059: LD_INT 29
2061: PPUSH
2062: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2066: LD_INT 35
2068: PPUSH
2069: CALL_OW 67
// for i in tmp do
2073: LD_ADDR_VAR 0 2
2077: PUSH
2078: LD_VAR 0 5
2082: PUSH
2083: FOR_IN
2084: IFFALSE 2115
// if not HasTask ( i ) then
2086: LD_VAR 0 2
2090: PPUSH
2091: CALL_OW 314
2095: NOT
2096: IFFALSE 2113
// AddComMoveXY ( tmp , 88 , 29 ) ;
2098: LD_VAR 0 5
2102: PPUSH
2103: LD_INT 88
2105: PPUSH
2106: LD_INT 29
2108: PPUSH
2109: CALL_OW 171
2113: GO 2083
2115: POP
2116: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2117: LD_VAR 0 5
2121: PPUSH
2122: LD_INT 95
2124: PUSH
2125: LD_INT 6
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 72
2136: IFFALSE 2230
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2138: LD_ADDR_VAR 0 2
2142: PUSH
2143: LD_VAR 0 5
2147: PPUSH
2148: LD_INT 95
2150: PUSH
2151: LD_INT 6
2153: PUSH
2154: EMPTY
2155: LIST
2156: LIST
2157: PPUSH
2158: CALL_OW 72
2162: PUSH
2163: FOR_IN
2164: IFFALSE 2228
// begin if i = Belkov then
2166: LD_VAR 0 2
2170: PUSH
2171: LD_EXP 36
2175: EQUAL
2176: IFFALSE 2217
// begin belkovTank := IsInUnit ( Belkov ) ;
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_EXP 36
2187: PPUSH
2188: CALL_OW 310
2192: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2193: LD_ADDR_VAR 0 6
2197: PUSH
2198: LD_VAR 0 3
2202: PPUSH
2203: CALL_OW 261
2207: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2208: LD_VAR 0 3
2212: PPUSH
2213: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2217: LD_VAR 0 2
2221: PPUSH
2222: CALL_OW 64
// end ;
2226: GO 2163
2228: POP
2229: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2230: LD_VAR 0 5
2234: PPUSH
2235: LD_INT 52
2237: PUSH
2238: EMPTY
2239: LIST
2240: PPUSH
2241: CALL_OW 72
2245: NOT
2246: IFFALSE 2066
// wait ( 1 1$20 ) ;
2248: LD_INT 2800
2250: PPUSH
2251: CALL_OW 67
// if fuel < 50 then
2255: LD_VAR 0 6
2259: PUSH
2260: LD_INT 50
2262: LESS
2263: IFFALSE 2273
// fuel := 50 ;
2265: LD_ADDR_VAR 0 6
2269: PUSH
2270: LD_INT 50
2272: ST_TO_ADDR
// uc_side := 6 ;
2273: LD_ADDR_OWVAR 20
2277: PUSH
2278: LD_INT 6
2280: ST_TO_ADDR
// uc_nation := 3 ;
2281: LD_ADDR_OWVAR 21
2285: PUSH
2286: LD_INT 3
2288: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2289: LD_INT 21
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: LD_INT 42
2300: PPUSH
2301: LD_VAR 0 6
2305: PUSH
2306: LD_INT 5
2308: MINUS
2309: PPUSH
2310: CALL 21060 0 5
// belkovTank := CreateVehicle ;
2314: LD_ADDR_VAR 0 3
2318: PUSH
2319: CALL_OW 45
2323: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2324: LD_VAR 0 3
2328: PPUSH
2329: LD_INT 2
2331: PPUSH
2332: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2336: LD_VAR 0 3
2340: PPUSH
2341: LD_INT 60
2343: PPUSH
2344: LD_INT 3
2346: PPUSH
2347: LD_INT 0
2349: PPUSH
2350: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2354: LD_EXP 36
2358: PPUSH
2359: LD_VAR 0 3
2363: PPUSH
2364: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2368: LD_EXP 36
2372: PPUSH
2373: LD_INT 72
2375: PPUSH
2376: LD_INT 26
2378: PPUSH
2379: CALL_OW 111
// wait ( 0 0$2 ) ;
2383: LD_INT 70
2385: PPUSH
2386: CALL_OW 67
// for i in belkovTeam do
2390: LD_ADDR_VAR 0 2
2394: PUSH
2395: LD_EXP 45
2399: PUSH
2400: FOR_IN
2401: IFFALSE 2445
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2403: LD_VAR 0 2
2407: PPUSH
2408: LD_INT 60
2410: PPUSH
2411: LD_INT 3
2413: PPUSH
2414: LD_INT 0
2416: PPUSH
2417: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2421: LD_VAR 0 2
2425: PPUSH
2426: LD_INT 65
2428: PPUSH
2429: LD_INT 18
2431: PPUSH
2432: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2436: LD_INT 28
2438: PPUSH
2439: CALL_OW 67
// end ;
2443: GO 2400
2445: POP
2446: POP
// repeat wait ( 0 0$1 ) ;
2447: LD_INT 35
2449: PPUSH
2450: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2454: LD_EXP 14
2458: PUSH
2459: LD_EXP 45
2463: PPUSH
2464: LD_INT 60
2466: PUSH
2467: EMPTY
2468: LIST
2469: PPUSH
2470: CALL_OW 72
2474: NOT
2475: AND
2476: IFFALSE 2447
// americanTrap := true ;
2478: LD_ADDR_EXP 17
2482: PUSH
2483: LD_INT 1
2485: ST_TO_ADDR
// end ;
2486: LD_VAR 0 1
2490: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2491: LD_EXP 4
2495: PUSH
2496: LD_EXP 40
2500: PPUSH
2501: CALL_OW 302
2505: AND
2506: IFFALSE 2826
2508: GO 2510
2510: DISABLE
2511: LD_INT 0
2513: PPUSH
2514: PPUSH
2515: PPUSH
2516: PPUSH
// begin enable ;
2517: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2518: LD_EXP 8
2522: PUSH
2523: LD_INT 0
2525: GREATER
2526: PUSH
2527: LD_EXP 40
2531: PPUSH
2532: CALL_OW 314
2536: NOT
2537: AND
2538: IFFALSE 2707
// begin dir := rand ( 0 , 5 ) ;
2540: LD_ADDR_VAR 0 4
2544: PUSH
2545: LD_INT 0
2547: PPUSH
2548: LD_INT 5
2550: PPUSH
2551: CALL_OW 12
2555: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2556: LD_ADDR_VAR 0 1
2560: PUSH
2561: LD_EXP 40
2565: PPUSH
2566: CALL_OW 250
2570: PPUSH
2571: LD_VAR 0 4
2575: PPUSH
2576: LD_INT 5
2578: PPUSH
2579: CALL_OW 272
2583: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2584: LD_ADDR_VAR 0 2
2588: PUSH
2589: LD_EXP 40
2593: PPUSH
2594: CALL_OW 251
2598: PPUSH
2599: LD_VAR 0 4
2603: PPUSH
2604: LD_INT 5
2606: PPUSH
2607: CALL_OW 273
2611: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2612: LD_VAR 0 1
2616: PPUSH
2617: LD_VAR 0 2
2621: PPUSH
2622: CALL_OW 488
2626: PUSH
2627: LD_INT 106
2629: PPUSH
2630: LD_VAR 0 1
2634: PPUSH
2635: LD_VAR 0 2
2639: PPUSH
2640: CALL_OW 297
2644: PUSH
2645: LD_INT 26
2647: LESS
2648: AND
2649: IFFALSE 2672
// AddComMoveXY ( Platonov , x , y ) else
2651: LD_EXP 40
2655: PPUSH
2656: LD_VAR 0 1
2660: PPUSH
2661: LD_VAR 0 2
2665: PPUSH
2666: CALL_OW 171
2670: GO 2687
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2672: LD_EXP 40
2676: PPUSH
2677: LD_INT 64
2679: PPUSH
2680: LD_INT 96
2682: PPUSH
2683: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2687: LD_EXP 40
2691: PPUSH
2692: LD_INT 105
2694: PPUSH
2695: LD_INT 315
2697: PPUSH
2698: CALL_OW 12
2702: PPUSH
2703: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2707: LD_EXP 8
2711: PUSH
2712: LD_INT 0
2714: LESSEQUAL
2715: IFFALSE 2761
// begin if not IsAt ( Platonov , 64 , 96 ) then
2717: LD_EXP 40
2721: PPUSH
2722: LD_INT 64
2724: PPUSH
2725: LD_INT 96
2727: PPUSH
2728: CALL_OW 307
2732: NOT
2733: IFFALSE 2759
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2735: LD_EXP 40
2739: PPUSH
2740: LD_INT 64
2742: PPUSH
2743: LD_INT 96
2745: PPUSH
2746: CALL_OW 111
// AddComHold ( Platonov ) ;
2750: LD_EXP 40
2754: PPUSH
2755: CALL_OW 200
// end ; end else
2759: GO 2826
// if tick mod 0 0$75 = 0 0$00 then
2761: LD_OWVAR 1
2765: PUSH
2766: LD_INT 2625
2768: MOD
2769: PUSH
2770: LD_INT 0
2772: EQUAL
2773: IFFALSE 2826
// begin amount := rand ( 2 , 5 ) ;
2775: LD_ADDR_VAR 0 3
2779: PUSH
2780: LD_INT 2
2782: PPUSH
2783: LD_INT 5
2785: PPUSH
2786: CALL_OW 12
2790: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
2791: LD_ADDR_EXP 8
2795: PUSH
2796: LD_EXP 8
2800: PUSH
2801: LD_VAR 0 3
2805: PUSH
2806: LD_INT 10
2808: MUL
2809: MINUS
2810: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
2811: LD_VAR 0 3
2815: PPUSH
2816: LD_INT 5
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: CALL_OW 55
// end ; end ;
2826: PPOPN 4
2828: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
2829: LD_INT 106
2831: PPUSH
2832: CALL_OW 274
2836: PPUSH
2837: LD_INT 2
2839: PPUSH
2840: CALL_OW 275
2844: PUSH
2845: LD_INT 30
2847: LESS
2848: IFFALSE 3000
2850: GO 2852
2852: DISABLE
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
2857: LD_ADDR_VAR 0 2
2861: PUSH
2862: LD_EXP 43
2866: PPUSH
2867: LD_INT 3
2869: PUSH
2870: LD_INT 60
2872: PUSH
2873: EMPTY
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: LD_INT 25
2882: PUSH
2883: LD_INT 2
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: PUSH
2890: EMPTY
2891: LIST
2892: LIST
2893: PPUSH
2894: CALL_OW 72
2898: ST_TO_ADDR
// if not eng then
2899: LD_VAR 0 2
2903: NOT
2904: IFFALSE 2908
// exit ;
2906: GO 3000
// ComExit ( eng ) ;
2908: LD_VAR 0 2
2912: PPUSH
2913: CALL 53321 0 1
// for i := 1 to 5 do
2917: LD_ADDR_VAR 0 1
2921: PUSH
2922: DOUBLE
2923: LD_INT 1
2925: DEC
2926: ST_TO_ADDR
2927: LD_INT 5
2929: PUSH
2930: FOR_TO
2931: IFFALSE 2974
// begin AddComTransport ( eng , kirov , mat_oil ) ;
2933: LD_VAR 0 2
2937: PPUSH
2938: LD_INT 71
2940: PPUSH
2941: LD_INT 2
2943: PPUSH
2944: CALL_OW 211
// AddComMoveXY ( eng , 67 , 99 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 67
2955: PPUSH
2956: LD_INT 99
2958: PPUSH
2959: CALL_OW 171
// AddComUnload ( eng ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: CALL_OW 219
// end ;
2972: GO 2930
2974: POP
2975: POP
// AddComMoveUnit ( eng , kirov ) ;
2976: LD_VAR 0 2
2980: PPUSH
2981: LD_INT 71
2983: PPUSH
2984: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
2988: LD_VAR 0 2
2992: PPUSH
2993: LD_INT 71
2995: PPUSH
2996: CALL_OW 180
// end ;
3000: PPOPN 2
3002: END
// export function SendReinforcements ; var i ; begin
3003: LD_INT 0
3005: PPUSH
3006: PPUSH
// reinforcementsGained := true ;
3007: LD_ADDR_EXP 25
3011: PUSH
3012: LD_INT 1
3014: ST_TO_ADDR
// for i := 1 to [ 3 , 3 , 2 , 2 ] [ Difficulty ] do
3015: LD_ADDR_VAR 0 2
3019: PUSH
3020: DOUBLE
3021: LD_INT 1
3023: DEC
3024: ST_TO_ADDR
3025: LD_INT 3
3027: PUSH
3028: LD_INT 3
3030: PUSH
3031: LD_INT 2
3033: PUSH
3034: LD_INT 2
3036: PUSH
3037: EMPTY
3038: LIST
3039: LIST
3040: LIST
3041: LIST
3042: PUSH
3043: LD_OWVAR 67
3047: ARRAY
3048: PUSH
3049: FOR_TO
3050: IFFALSE 3132
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3052: LD_EXP 44
3056: PUSH
3057: LD_VAR 0 2
3061: ARRAY
3062: PPUSH
3063: CALL 53321 0 1
3067: IFFALSE 3076
// wait ( 0 0$0.3 ) ;
3069: LD_INT 10
3071: PPUSH
3072: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3076: LD_EXP 44
3080: PUSH
3081: LD_VAR 0 2
3085: ARRAY
3086: PPUSH
3087: LD_INT 75
3089: PPUSH
3090: LD_INT 84
3092: PPUSH
3093: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3097: LD_EXP 44
3101: PUSH
3102: LD_VAR 0 2
3106: ARRAY
3107: PPUSH
3108: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3112: LD_EXP 44
3116: PUSH
3117: LD_VAR 0 2
3121: ARRAY
3122: PPUSH
3123: LD_INT 3
3125: PPUSH
3126: CALL_OW 235
// end ;
3130: GO 3049
3132: POP
3133: POP
// end ;
3134: LD_VAR 0 1
3138: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3139: LD_EXP 21
3143: PUSH
3144: LD_EXP 18
3148: AND
3149: PUSH
3150: LD_EXP 43
3154: PPUSH
3155: LD_INT 25
3157: PUSH
3158: LD_INT 3
3160: PUSH
3161: EMPTY
3162: LIST
3163: LIST
3164: PPUSH
3165: CALL_OW 72
3169: AND
3170: IFFALSE 3327
3172: GO 3174
3174: DISABLE
3175: LD_INT 0
3177: PPUSH
3178: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3179: LD_ADDR_VAR 0 1
3183: PUSH
3184: LD_EXP 43
3188: PPUSH
3189: LD_INT 25
3191: PUSH
3192: LD_INT 3
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 72
3203: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3204: LD_ADDR_VAR 0 2
3208: PUSH
3209: LD_INT 22
3211: PUSH
3212: LD_INT 6
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: LD_INT 30
3221: PUSH
3222: LD_INT 2
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PPUSH
3233: CALL_OW 69
3237: ST_TO_ADDR
// if not fac then
3238: LD_VAR 0 2
3242: NOT
3243: IFFALSE 3247
// exit ;
3245: GO 3327
// fac := fac [ 1 ] ;
3247: LD_ADDR_VAR 0 2
3251: PUSH
3252: LD_VAR 0 2
3256: PUSH
3257: LD_INT 1
3259: ARRAY
3260: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3261: LD_VAR 0 2
3265: PPUSH
3266: CALL_OW 313
3270: PUSH
3271: LD_INT 0
3273: EQUAL
3274: IFFALSE 3306
// begin ComExit ( mech ) ;
3276: LD_VAR 0 1
3280: PPUSH
3281: CALL 53321 0 1
// wait ( 3 ) ;
3285: LD_INT 3
3287: PPUSH
3288: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3292: LD_VAR 0 1
3296: PPUSH
3297: LD_VAR 0 2
3301: PPUSH
3302: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3306: LD_VAR 0 2
3310: PPUSH
3311: LD_INT 21
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 1
3319: PPUSH
3320: LD_INT 42
3322: PPUSH
3323: CALL_OW 125
// end ;
3327: PPOPN 2
3329: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3330: LD_INT 0
3332: PPUSH
3333: PPUSH
3334: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 90
3342: PPUSH
3343: LD_INT 100
3345: PPUSH
3346: CALL_OW 111
// wait ( 0 0$10 ) ;
3350: LD_INT 350
3352: PPUSH
3353: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3357: LD_VAR 0 1
3361: PPUSH
3362: LD_INT 0
3364: PPUSH
3365: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3369: LD_INT 35
3371: PPUSH
3372: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3376: LD_ADDR_VAR 0 4
3380: PUSH
3381: LD_VAR 0 1
3385: PPUSH
3386: CALL_OW 110
3390: ST_TO_ADDR
// if tag = 0 then
3391: LD_VAR 0 4
3395: PUSH
3396: LD_INT 0
3398: EQUAL
3399: IFFALSE 3470
// begin if not HasTask ( vehicle ) then
3401: LD_VAR 0 1
3405: PPUSH
3406: CALL_OW 314
3410: NOT
3411: IFFALSE 3428
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3413: LD_VAR 0 1
3417: PPUSH
3418: LD_INT 83
3420: PPUSH
3421: LD_INT 68
3423: PPUSH
3424: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3428: LD_VAR 0 1
3432: PPUSH
3433: CALL_OW 256
3437: PUSH
3438: LD_INT 750
3440: LESS
3441: IFFALSE 3470
// begin SetTag ( vehicle , 1 ) ;
3443: LD_VAR 0 1
3447: PPUSH
3448: LD_INT 1
3450: PPUSH
3451: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3455: LD_VAR 0 1
3459: PPUSH
3460: LD_INT 93
3462: PPUSH
3463: LD_INT 102
3465: PPUSH
3466: CALL_OW 111
// end ; end ; if tag = 1 then
3470: LD_VAR 0 4
3474: PUSH
3475: LD_INT 1
3477: EQUAL
3478: IFFALSE 3568
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3480: LD_VAR 0 1
3484: PPUSH
3485: LD_INT 113
3487: PPUSH
3488: LD_INT 106
3490: PPUSH
3491: CALL_OW 307
3495: NOT
3496: PUSH
3497: LD_VAR 0 1
3501: PPUSH
3502: CALL_OW 314
3506: NOT
3507: AND
3508: IFFALSE 3525
// ComMoveXY ( vehicle , 113 , 106 ) ;
3510: LD_VAR 0 1
3514: PPUSH
3515: LD_INT 113
3517: PPUSH
3518: LD_INT 106
3520: PPUSH
3521: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3525: LD_VAR 0 1
3529: PPUSH
3530: LD_INT 113
3532: PPUSH
3533: LD_INT 106
3535: PPUSH
3536: CALL_OW 307
3540: IFFALSE 3568
// begin SetTag ( vehicle , 2 ) ;
3542: LD_VAR 0 1
3546: PPUSH
3547: LD_INT 2
3549: PPUSH
3550: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL_OW 311
3563: PPUSH
3564: CALL 54625 0 1
// end ; end ; if tag = 2 then
3568: LD_VAR 0 4
3572: PUSH
3573: LD_INT 2
3575: EQUAL
3576: IFFALSE 3640
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3578: LD_VAR 0 1
3582: PPUSH
3583: CALL_OW 256
3587: PUSH
3588: LD_INT 1000
3590: EQUAL
3591: PUSH
3592: LD_VAR 0 1
3596: PPUSH
3597: CALL_OW 311
3601: AND
3602: IFFALSE 3640
// begin ComMoveUnit ( vehicle , kirov ) ;
3604: LD_VAR 0 1
3608: PPUSH
3609: LD_INT 71
3611: PPUSH
3612: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3616: LD_VAR 0 1
3620: PPUSH
3621: LD_INT 71
3623: PPUSH
3624: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3628: LD_VAR 0 1
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3640: LD_VAR 0 1
3644: PPUSH
3645: CALL_OW 301
3649: PUSH
3650: LD_EXP 23
3654: OR
3655: IFFALSE 3369
// if eastOutpostDestroyed then
3657: LD_EXP 23
3661: IFFALSE 3678
// ComMoveXY ( vehicle , 111 , 105 ) ;
3663: LD_VAR 0 1
3667: PPUSH
3668: LD_INT 111
3670: PPUSH
3671: LD_INT 105
3673: PPUSH
3674: CALL_OW 111
// end ; end_of_file
3678: LD_VAR 0 2
3682: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3683: LD_INT 0
3685: PPUSH
3686: PPUSH
3687: PPUSH
3688: PPUSH
// uc_side := 1 ;
3689: LD_ADDR_OWVAR 20
3693: PUSH
3694: LD_INT 1
3696: ST_TO_ADDR
// uc_nation := 1 ;
3697: LD_ADDR_OWVAR 21
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// usWestForces := [ ] ;
3705: LD_ADDR_EXP 46
3709: PUSH
3710: EMPTY
3711: ST_TO_ADDR
// usEastForces := [ ] ;
3712: LD_ADDR_EXP 47
3716: PUSH
3717: EMPTY
3718: ST_TO_ADDR
// bc_type := b_depot ;
3719: LD_ADDR_OWVAR 42
3723: PUSH
3724: LD_INT 0
3726: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
3727: LD_ADDR_OWVAR 43
3731: PUSH
3732: LD_OWVAR 67
3736: PUSH
3737: LD_INT 1
3739: MINUS
3740: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 5 ) ;
3741: LD_INT 48
3743: PPUSH
3744: LD_INT 54
3746: PPUSH
3747: LD_INT 5
3749: PPUSH
3750: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
3754: LD_ADDR_VAR 0 4
3758: PUSH
3759: LD_INT 55
3761: PUSH
3762: LD_INT 55
3764: PUSH
3765: LD_INT 4
3767: PUSH
3768: EMPTY
3769: LIST
3770: LIST
3771: LIST
3772: PUSH
3773: LD_INT 59
3775: PUSH
3776: LD_INT 61
3778: PUSH
3779: LD_INT 4
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: ST_TO_ADDR
// if Difficulty > 1 then
3791: LD_OWVAR 67
3795: PUSH
3796: LD_INT 1
3798: GREATER
3799: IFFALSE 3835
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
3801: LD_ADDR_VAR 0 4
3805: PUSH
3806: LD_VAR 0 4
3810: PPUSH
3811: LD_VAR 0 4
3815: PPUSH
3816: LD_INT 46
3818: PUSH
3819: LD_INT 64
3821: PUSH
3822: LD_INT 0
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: LIST
3829: PPUSH
3830: CALL_OW 2
3834: ST_TO_ADDR
// if Difficulty > 2 then
3835: LD_OWVAR 67
3839: PUSH
3840: LD_INT 2
3842: GREATER
3843: IFFALSE 3879
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
3845: LD_ADDR_VAR 0 4
3849: PUSH
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_VAR 0 4
3859: PPUSH
3860: LD_INT 36
3862: PUSH
3863: LD_INT 48
3865: PUSH
3866: LD_INT 3
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: PPUSH
3874: CALL_OW 2
3878: ST_TO_ADDR
// bc_type := b_breastwork ;
3879: LD_ADDR_OWVAR 42
3883: PUSH
3884: LD_INT 31
3886: ST_TO_ADDR
// for i in tmp do
3887: LD_ADDR_VAR 0 2
3891: PUSH
3892: LD_VAR 0 4
3896: PUSH
3897: FOR_IN
3898: IFFALSE 4042
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
3900: LD_VAR 0 2
3904: PUSH
3905: LD_INT 1
3907: ARRAY
3908: PPUSH
3909: LD_VAR 0 2
3913: PUSH
3914: LD_INT 2
3916: ARRAY
3917: PPUSH
3918: LD_VAR 0 2
3922: PUSH
3923: LD_INT 3
3925: ARRAY
3926: PPUSH
3927: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
3931: LD_INT 0
3933: PPUSH
3934: LD_OWVAR 67
3938: PPUSH
3939: CALL_OW 381
// un := CreateHuman ;
3943: LD_ADDR_VAR 0 3
3947: PUSH
3948: CALL_OW 44
3952: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
3953: LD_ADDR_EXP 46
3957: PUSH
3958: LD_EXP 46
3962: PPUSH
3963: LD_EXP 46
3967: PUSH
3968: LD_INT 1
3970: PLUS
3971: PPUSH
3972: LD_VAR 0 3
3976: PPUSH
3977: CALL_OW 1
3981: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
3982: LD_VAR 0 3
3986: PPUSH
3987: LD_VAR 0 2
3991: PUSH
3992: LD_INT 3
3994: ARRAY
3995: PUSH
3996: LD_INT 3
3998: PLUS
3999: PUSH
4000: LD_INT 6
4002: MOD
4003: PPUSH
4004: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4008: LD_VAR 0 3
4012: PPUSH
4013: LD_VAR 0 2
4017: PUSH
4018: LD_INT 1
4020: ARRAY
4021: PPUSH
4022: LD_VAR 0 2
4026: PUSH
4027: LD_INT 2
4029: ARRAY
4030: PPUSH
4031: CALL_OW 428
4035: PPUSH
4036: CALL_OW 52
// end ;
4040: GO 3897
4042: POP
4043: POP
// for i := 1 to 2 do
4044: LD_ADDR_VAR 0 2
4048: PUSH
4049: DOUBLE
4050: LD_INT 1
4052: DEC
4053: ST_TO_ADDR
4054: LD_INT 2
4056: PUSH
4057: FOR_TO
4058: IFFALSE 4134
// begin PrepareEngineer ( false , Difficulty ) ;
4060: LD_INT 0
4062: PPUSH
4063: LD_OWVAR 67
4067: PPUSH
4068: CALL_OW 382
// un := CreateHuman ;
4072: LD_ADDR_VAR 0 3
4076: PUSH
4077: CALL_OW 44
4081: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4082: LD_ADDR_EXP 46
4086: PUSH
4087: LD_EXP 46
4091: PPUSH
4092: LD_EXP 46
4096: PUSH
4097: LD_INT 1
4099: PLUS
4100: PPUSH
4101: LD_VAR 0 3
4105: PPUSH
4106: CALL_OW 1
4110: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4111: LD_VAR 0 3
4115: PPUSH
4116: LD_INT 54
4118: PPUSH
4119: LD_INT 58
4121: PPUSH
4122: LD_INT 2
4124: PPUSH
4125: LD_INT 0
4127: PPUSH
4128: CALL_OW 50
// end ;
4132: GO 4057
4134: POP
4135: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4136: LD_ADDR_VAR 0 4
4140: PUSH
4141: LD_INT 87
4143: PUSH
4144: LD_INT 62
4146: PUSH
4147: LD_INT 1
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: LIST
4154: PUSH
4155: LD_INT 89
4157: PUSH
4158: LD_INT 67
4160: PUSH
4161: LD_INT 1
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: LIST
4168: PUSH
4169: EMPTY
4170: LIST
4171: LIST
4172: ST_TO_ADDR
// if Difficulty > 2 then
4173: LD_OWVAR 67
4177: PUSH
4178: LD_INT 2
4180: GREATER
4181: IFFALSE 4217
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4183: LD_ADDR_VAR 0 4
4187: PUSH
4188: LD_VAR 0 4
4192: PPUSH
4193: LD_VAR 0 4
4197: PPUSH
4198: LD_INT 88
4200: PUSH
4201: LD_INT 53
4203: PUSH
4204: LD_INT 2
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: LIST
4211: PPUSH
4212: CALL_OW 2
4216: ST_TO_ADDR
// bc_type := b_breastwork ;
4217: LD_ADDR_OWVAR 42
4221: PUSH
4222: LD_INT 31
4224: ST_TO_ADDR
// for i in tmp do
4225: LD_ADDR_VAR 0 2
4229: PUSH
4230: LD_VAR 0 4
4234: PUSH
4235: FOR_IN
4236: IFFALSE 4380
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4238: LD_VAR 0 2
4242: PUSH
4243: LD_INT 1
4245: ARRAY
4246: PPUSH
4247: LD_VAR 0 2
4251: PUSH
4252: LD_INT 2
4254: ARRAY
4255: PPUSH
4256: LD_VAR 0 2
4260: PUSH
4261: LD_INT 3
4263: ARRAY
4264: PPUSH
4265: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_OWVAR 67
4276: PPUSH
4277: CALL_OW 381
// un := CreateHuman ;
4281: LD_ADDR_VAR 0 3
4285: PUSH
4286: CALL_OW 44
4290: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4291: LD_ADDR_EXP 47
4295: PUSH
4296: LD_EXP 47
4300: PPUSH
4301: LD_EXP 47
4305: PUSH
4306: LD_INT 1
4308: PLUS
4309: PPUSH
4310: LD_VAR 0 3
4314: PPUSH
4315: CALL_OW 1
4319: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4320: LD_VAR 0 3
4324: PPUSH
4325: LD_VAR 0 2
4329: PUSH
4330: LD_INT 3
4332: ARRAY
4333: PUSH
4334: LD_INT 3
4336: PLUS
4337: PUSH
4338: LD_INT 6
4340: MOD
4341: PPUSH
4342: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4346: LD_VAR 0 3
4350: PPUSH
4351: LD_VAR 0 2
4355: PUSH
4356: LD_INT 1
4358: ARRAY
4359: PPUSH
4360: LD_VAR 0 2
4364: PUSH
4365: LD_INT 2
4367: ARRAY
4368: PPUSH
4369: CALL_OW 428
4373: PPUSH
4374: CALL_OW 52
// end ;
4378: GO 4235
4380: POP
4381: POP
// for i := 1 to 2 do
4382: LD_ADDR_VAR 0 2
4386: PUSH
4387: DOUBLE
4388: LD_INT 1
4390: DEC
4391: ST_TO_ADDR
4392: LD_INT 2
4394: PUSH
4395: FOR_TO
4396: IFFALSE 4472
// begin PrepareEngineer ( false , Difficulty ) ;
4398: LD_INT 0
4400: PPUSH
4401: LD_OWVAR 67
4405: PPUSH
4406: CALL_OW 382
// un := CreateHuman ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 44
4419: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4420: LD_ADDR_EXP 47
4424: PUSH
4425: LD_EXP 47
4429: PPUSH
4430: LD_EXP 47
4434: PUSH
4435: LD_INT 1
4437: PLUS
4438: PPUSH
4439: LD_VAR 0 3
4443: PPUSH
4444: CALL_OW 1
4448: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4449: LD_VAR 0 3
4453: PPUSH
4454: LD_INT 95
4456: PPUSH
4457: LD_INT 65
4459: PPUSH
4460: LD_INT 2
4462: PPUSH
4463: LD_INT 0
4465: PPUSH
4466: CALL_OW 50
// end ;
4470: GO 4395
4472: POP
4473: POP
// end ;
4474: LD_VAR 0 1
4478: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4479: LD_INT 0
4481: PPUSH
4482: PPUSH
4483: PPUSH
// usTrapForces := [ ] ;
4484: LD_ADDR_EXP 48
4488: PUSH
4489: EMPTY
4490: ST_TO_ADDR
// uc_side := 1 ;
4491: LD_ADDR_OWVAR 20
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// uc_nation := 1 ;
4499: LD_ADDR_OWVAR 21
4503: PUSH
4504: LD_INT 1
4506: ST_TO_ADDR
// PrepareSoldier ( sex_male , Difficulty ) ;
4507: LD_INT 1
4509: PPUSH
4510: LD_OWVAR 67
4514: PPUSH
4515: CALL_OW 381
// un := CreateHuman ;
4519: LD_ADDR_VAR 0 3
4523: PUSH
4524: CALL_OW 44
4528: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4529: LD_ADDR_EXP 48
4533: PUSH
4534: LD_EXP 48
4538: PPUSH
4539: LD_VAR 0 3
4543: PPUSH
4544: CALL 52933 0 2
4548: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4549: LD_ADDR_VAR 0 2
4553: PUSH
4554: DOUBLE
4555: LD_INT 1
4557: DEC
4558: ST_TO_ADDR
4559: LD_INT 5
4561: PUSH
4562: LD_INT 6
4564: PUSH
4565: LD_INT 7
4567: PUSH
4568: LD_INT 8
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_OWVAR 67
4581: ARRAY
4582: PUSH
4583: FOR_TO
4584: IFFALSE 4630
// begin PrepareSoldier ( false , Difficulty ) ;
4586: LD_INT 0
4588: PPUSH
4589: LD_OWVAR 67
4593: PPUSH
4594: CALL_OW 381
// un := CreateHuman ;
4598: LD_ADDR_VAR 0 3
4602: PUSH
4603: CALL_OW 44
4607: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4608: LD_ADDR_EXP 48
4612: PUSH
4613: LD_EXP 48
4617: PPUSH
4618: LD_VAR 0 3
4622: PPUSH
4623: CALL 52933 0 2
4627: ST_TO_ADDR
// end ;
4628: GO 4583
4630: POP
4631: POP
// for i := 1 to 2 do
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: DOUBLE
4638: LD_INT 1
4640: DEC
4641: ST_TO_ADDR
4642: LD_INT 2
4644: PUSH
4645: FOR_TO
4646: IFFALSE 4692
// begin PrepareScientist ( false , Difficulty ) ;
4648: LD_INT 0
4650: PPUSH
4651: LD_OWVAR 67
4655: PPUSH
4656: CALL_OW 384
// un := CreateHuman ;
4660: LD_ADDR_VAR 0 3
4664: PUSH
4665: CALL_OW 44
4669: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4670: LD_ADDR_EXP 48
4674: PUSH
4675: LD_EXP 48
4679: PPUSH
4680: LD_VAR 0 3
4684: PPUSH
4685: CALL 52933 0 2
4689: ST_TO_ADDR
// end ;
4690: GO 4645
4692: POP
4693: POP
// end ;
4694: LD_VAR 0 1
4698: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4699: LD_EXP 46
4703: IFFALSE 5273
4705: GO 4707
4707: DISABLE
4708: LD_INT 0
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
// begin enable ;
4715: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4716: LD_ADDR_VAR 0 3
4720: PUSH
4721: LD_INT 8
4723: PPUSH
4724: LD_INT 22
4726: PUSH
4727: LD_INT 1
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 21
4736: PUSH
4737: LD_INT 3
4739: PUSH
4740: EMPTY
4741: LIST
4742: LIST
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PPUSH
4748: CALL_OW 70
4752: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
4753: LD_ADDR_VAR 0 4
4757: PUSH
4758: LD_EXP 46
4762: PPUSH
4763: LD_INT 25
4765: PUSH
4766: LD_INT 2
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 72
4777: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
4778: LD_ADDR_VAR 0 5
4782: PUSH
4783: LD_EXP 46
4787: PPUSH
4788: LD_INT 25
4790: PUSH
4791: LD_INT 1
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: PPUSH
4798: CALL_OW 72
4802: ST_TO_ADDR
// if eng then
4803: LD_VAR 0 4
4807: IFFALSE 5001
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
4809: LD_VAR 0 3
4813: PPUSH
4814: LD_INT 3
4816: PUSH
4817: LD_INT 24
4819: PUSH
4820: LD_INT 1000
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: PPUSH
4831: CALL_OW 72
4835: IFFALSE 4947
// begin for i in eng do
4837: LD_ADDR_VAR 0 1
4841: PUSH
4842: LD_VAR 0 4
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4943
// if IsInUnit ( i ) then
4850: LD_VAR 0 1
4854: PPUSH
4855: CALL_OW 310
4859: IFFALSE 4872
// ComExit ( i ) else
4861: LD_VAR 0 1
4865: PPUSH
4866: CALL 53321 0 1
4870: GO 4941
// if IsOk ( i ) and not HasTask ( i ) then
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 302
4881: PUSH
4882: LD_VAR 0 1
4886: PPUSH
4887: CALL_OW 314
4891: NOT
4892: AND
4893: IFFALSE 4941
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: LD_VAR 0 3
4904: PPUSH
4905: LD_INT 3
4907: PUSH
4908: LD_INT 24
4910: PUSH
4911: LD_INT 1000
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: EMPTY
4919: LIST
4920: LIST
4921: PPUSH
4922: CALL_OW 72
4926: PPUSH
4927: LD_VAR 0 1
4931: PPUSH
4932: CALL_OW 74
4936: PPUSH
4937: CALL_OW 130
4941: GO 4847
4943: POP
4944: POP
// end else
4945: GO 5001
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
4947: LD_VAR 0 3
4951: PPUSH
4952: LD_INT 30
4954: PUSH
4955: LD_INT 0
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PPUSH
4962: CALL_OW 72
4966: IFFALSE 5001
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
4968: LD_VAR 0 4
4972: PPUSH
4973: LD_VAR 0 3
4977: PPUSH
4978: LD_INT 30
4980: PUSH
4981: LD_INT 0
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PPUSH
4988: CALL_OW 72
4992: PUSH
4993: LD_INT 1
4995: ARRAY
4996: PPUSH
4997: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5001: LD_VAR 0 5
5005: PPUSH
5006: LD_INT 50
5008: PUSH
5009: EMPTY
5010: LIST
5011: PPUSH
5012: CALL_OW 72
5016: PUSH
5017: LD_INT 18
5019: PPUSH
5020: LD_INT 81
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PPUSH
5030: CALL_OW 70
5034: PUSH
5035: LD_INT 1
5037: GREATER
5038: AND
5039: PUSH
5040: LD_INT 18
5042: PPUSH
5043: LD_INT 22
5045: PUSH
5046: LD_INT 1
5048: PUSH
5049: EMPTY
5050: LIST
5051: LIST
5052: PPUSH
5053: CALL_OW 70
5057: NOT
5058: AND
5059: IFFALSE 5113
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5061: LD_ADDR_VAR 0 1
5065: PUSH
5066: LD_VAR 0 5
5070: PPUSH
5071: LD_INT 50
5073: PUSH
5074: EMPTY
5075: LIST
5076: PPUSH
5077: CALL_OW 72
5081: PUSH
5082: FOR_IN
5083: IFFALSE 5111
// begin ComExit ( i ) ;
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL 53321 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_INT 46
5101: PPUSH
5102: LD_INT 62
5104: PPUSH
5105: CALL_OW 174
// end ;
5109: GO 5082
5111: POP
5112: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5113: LD_INT 18
5115: PPUSH
5116: LD_INT 81
5118: PUSH
5119: LD_INT 1
5121: PUSH
5122: EMPTY
5123: LIST
5124: LIST
5125: PPUSH
5126: CALL_OW 70
5130: NOT
5131: PUSH
5132: LD_VAR 0 5
5136: PPUSH
5137: LD_INT 3
5139: PUSH
5140: LD_INT 54
5142: PUSH
5143: EMPTY
5144: LIST
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 50
5152: PUSH
5153: EMPTY
5154: LIST
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PPUSH
5160: CALL_OW 72
5164: AND
5165: PUSH
5166: LD_VAR 0 3
5170: PPUSH
5171: LD_INT 30
5173: PUSH
5174: LD_INT 31
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: PUSH
5181: LD_INT 58
5183: PUSH
5184: EMPTY
5185: LIST
5186: PUSH
5187: EMPTY
5188: LIST
5189: LIST
5190: PPUSH
5191: CALL_OW 72
5195: AND
5196: IFFALSE 5273
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5198: LD_VAR 0 5
5202: PPUSH
5203: LD_INT 3
5205: PUSH
5206: LD_INT 54
5208: PUSH
5209: EMPTY
5210: LIST
5211: PUSH
5212: EMPTY
5213: LIST
5214: LIST
5215: PUSH
5216: LD_INT 50
5218: PUSH
5219: EMPTY
5220: LIST
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PPUSH
5226: CALL_OW 72
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: LD_VAR 0 3
5239: PPUSH
5240: LD_INT 30
5242: PUSH
5243: LD_INT 31
5245: PUSH
5246: EMPTY
5247: LIST
5248: LIST
5249: PUSH
5250: LD_INT 58
5252: PUSH
5253: EMPTY
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: PPUSH
5260: CALL_OW 72
5264: PUSH
5265: LD_INT 1
5267: ARRAY
5268: PPUSH
5269: CALL_OW 120
// end ;
5273: PPOPN 5
5275: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5276: LD_EXP 47
5280: IFFALSE 5551
5282: GO 5284
5284: DISABLE
5285: LD_INT 0
5287: PPUSH
5288: PPUSH
5289: PPUSH
// begin enable ;
5290: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5291: LD_ADDR_VAR 0 2
5295: PUSH
5296: LD_INT 15
5298: PPUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 21
5311: PUSH
5312: LD_INT 3
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: PPUSH
5323: CALL_OW 70
5327: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_EXP 47
5337: PPUSH
5338: LD_INT 25
5340: PUSH
5341: LD_INT 2
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PPUSH
5348: CALL_OW 72
5352: ST_TO_ADDR
// if eng then
5353: LD_VAR 0 3
5357: IFFALSE 5551
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5359: LD_VAR 0 2
5363: PPUSH
5364: LD_INT 3
5366: PUSH
5367: LD_INT 24
5369: PUSH
5370: LD_INT 1000
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PPUSH
5381: CALL_OW 72
5385: IFFALSE 5497
// begin for i in eng do
5387: LD_ADDR_VAR 0 1
5391: PUSH
5392: LD_VAR 0 3
5396: PUSH
5397: FOR_IN
5398: IFFALSE 5493
// if IsInUnit ( i ) then
5400: LD_VAR 0 1
5404: PPUSH
5405: CALL_OW 310
5409: IFFALSE 5422
// ComExit ( i ) else
5411: LD_VAR 0 1
5415: PPUSH
5416: CALL 53321 0 1
5420: GO 5491
// if IsOk ( i ) and not HasTask ( i ) then
5422: LD_VAR 0 1
5426: PPUSH
5427: CALL_OW 302
5431: PUSH
5432: LD_VAR 0 1
5436: PPUSH
5437: CALL_OW 314
5441: NOT
5442: AND
5443: IFFALSE 5491
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5445: LD_VAR 0 1
5449: PPUSH
5450: LD_VAR 0 2
5454: PPUSH
5455: LD_INT 3
5457: PUSH
5458: LD_INT 24
5460: PUSH
5461: LD_INT 1000
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 72
5476: PPUSH
5477: LD_VAR 0 1
5481: PPUSH
5482: CALL_OW 74
5486: PPUSH
5487: CALL_OW 130
5491: GO 5397
5493: POP
5494: POP
// end else
5495: GO 5551
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5497: LD_VAR 0 2
5501: PPUSH
5502: LD_INT 30
5504: PUSH
5505: LD_INT 0
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: IFFALSE 5551
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5518: LD_VAR 0 3
5522: PPUSH
5523: LD_VAR 0 2
5527: PPUSH
5528: LD_INT 30
5530: PUSH
5531: LD_INT 0
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PPUSH
5538: CALL_OW 72
5542: PUSH
5543: LD_INT 1
5545: ARRAY
5546: PPUSH
5547: CALL_OW 120
// end ; end_of_file
5551: PPOPN 3
5553: END
// export function Action ; var i , tmp ; begin
5554: LD_INT 0
5556: PPUSH
5557: PPUSH
5558: PPUSH
// InGameOn ;
5559: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5563: LD_INT 112
5565: PPUSH
5566: LD_INT 107
5568: PPUSH
5569: LD_INT 3
5571: PPUSH
5572: LD_INT 12
5574: NEG
5575: PPUSH
5576: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5580: LD_INT 121
5582: PPUSH
5583: LD_INT 113
5585: PPUSH
5586: CALL_OW 86
// tmp := PrepareBurlak ;
5590: LD_ADDR_VAR 0 3
5594: PUSH
5595: CALL 1089 0 0
5599: ST_TO_ADDR
// for i in tmp do
5600: LD_ADDR_VAR 0 2
5604: PUSH
5605: LD_VAR 0 3
5609: PUSH
5610: FOR_IN
5611: IFFALSE 5664
// begin SetDir ( i , 5 ) ;
5613: LD_VAR 0 2
5617: PPUSH
5618: LD_INT 5
5620: PPUSH
5621: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5625: LD_VAR 0 2
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: LD_INT 0
5635: PPUSH
5636: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 121
5647: PPUSH
5648: LD_INT 111
5650: PPUSH
5651: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5655: LD_INT 28
5657: PPUSH
5658: CALL_OW 67
// end ;
5662: GO 5610
5664: POP
5665: POP
// CenterOnUnits ( Kurin ) ;
5666: LD_EXP 38
5670: PPUSH
5671: CALL_OW 85
// repeat wait ( 0 0$1 ) ;
5675: LD_INT 35
5677: PPUSH
5678: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5682: LD_EXP 34
5686: PPUSH
5687: LD_EXP 38
5691: PPUSH
5692: CALL_OW 296
5696: PUSH
5697: LD_INT 6
5699: LESS
5700: IFFALSE 5675
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5702: LD_EXP 34
5706: PUSH
5707: LD_EXP 35
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PPUSH
5716: LD_EXP 38
5720: PPUSH
5721: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
5725: LD_ADDR_VAR 0 2
5729: PUSH
5730: LD_VAR 0 3
5734: PUSH
5735: LD_EXP 34
5739: PUSH
5740: LD_EXP 35
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: DIFF
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5796
// if GetClass ( i ) = class_soldier then
5753: LD_VAR 0 2
5757: PPUSH
5758: CALL_OW 257
5762: PUSH
5763: LD_INT 1
5765: EQUAL
5766: IFFALSE 5782
// ComEnterUnit ( i , ru2_arm1 ) else
5768: LD_VAR 0 2
5772: PPUSH
5773: LD_INT 95
5775: PPUSH
5776: CALL_OW 120
5780: GO 5794
// ComEnterUnit ( i , ru_lab ) ;
5782: LD_VAR 0 2
5786: PPUSH
5787: LD_INT 83
5789: PPUSH
5790: CALL_OW 120
5794: GO 5750
5796: POP
5797: POP
// Say ( Kurin , D1-Kur-1 ) ;
5798: LD_EXP 38
5802: PPUSH
5803: LD_STRING D1-Kur-1
5805: PPUSH
5806: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
5810: LD_EXP 34
5814: PPUSH
5815: LD_STRING D1-Bur-1
5817: PPUSH
5818: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5822: LD_INT 10
5824: PPUSH
5825: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
5829: LD_EXP 38
5833: PPUSH
5834: LD_STRING D1-Kur-2
5836: PPUSH
5837: CALL_OW 88
// ComExit ( Kovalyuk ) ;
5841: LD_EXP 39
5845: PPUSH
5846: CALL 53321 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
5850: LD_EXP 39
5854: PPUSH
5855: LD_INT 115
5857: PPUSH
5858: LD_INT 108
5860: PPUSH
5861: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
5865: LD_EXP 39
5869: PPUSH
5870: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
5874: LD_EXP 34
5878: PPUSH
5879: LD_STRING D1-Bur-2
5881: PPUSH
5882: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
5886: LD_EXP 38
5890: PPUSH
5891: LD_STRING D1-Kur-3
5893: PPUSH
5894: CALL_OW 88
// if Gnyevko then
5898: LD_EXP 35
5902: IFFALSE 5916
// Say ( Kurin , D1-Kur-3a ) ;
5904: LD_EXP 38
5908: PPUSH
5909: LD_STRING D1-Kur-3a
5911: PPUSH
5912: CALL_OW 88
// InGameOff ;
5916: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5920: LD_STRING M1
5922: PPUSH
5923: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
5927: LD_INT 112
5929: PPUSH
5930: LD_INT 107
5932: PPUSH
5933: LD_INT 3
5935: PPUSH
5936: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
5940: LD_INT 66
5942: PPUSH
5943: LD_INT 99
5945: PPUSH
5946: LD_INT 3
5948: PPUSH
5949: LD_INT 7
5951: NEG
5952: PPUSH
5953: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
5957: LD_INT 66
5959: PPUSH
5960: LD_INT 99
5962: PPUSH
5963: LD_INT 3
5965: PPUSH
5966: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
5970: LD_EXP 39
5974: PPUSH
5975: LD_INT 3
5977: PPUSH
5978: CALL_OW 235
// if Gnyevko then
5982: LD_EXP 35
5986: IFFALSE 6000
// SetSide ( Gnyevko , 3 ) ;
5988: LD_EXP 35
5992: PPUSH
5993: LD_INT 3
5995: PPUSH
5996: CALL_OW 235
// SaveForQuickRestart ;
6000: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6004: LD_EXP 38
6008: PPUSH
6009: LD_INT 71
6011: PPUSH
6012: CALL_OW 120
// wait ( 0 0$2 ) ;
6016: LD_INT 70
6018: PPUSH
6019: CALL_OW 67
// ComExit ( kirovBaseSquad [ 1 ] ) ;
6023: LD_EXP 43
6027: PUSH
6028: LD_INT 1
6030: ARRAY
6031: PPUSH
6032: CALL 53321 0 1
// AddComEnterUnit ( kirovBaseSquad [ 1 ] , HexInfo ( 98 , 98 ) ) ;
6036: LD_EXP 43
6040: PUSH
6041: LD_INT 1
6043: ARRAY
6044: PPUSH
6045: LD_INT 98
6047: PPUSH
6048: LD_INT 98
6050: PPUSH
6051: CALL_OW 428
6055: PPUSH
6056: CALL_OW 180
// wait ( 0 0$12 ) ;
6060: LD_INT 420
6062: PPUSH
6063: CALL_OW 67
// kurinDontWannaTalk := true ;
6067: LD_ADDR_EXP 5
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// end ;
6075: LD_VAR 0 1
6079: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6080: LD_EXP 5
6084: PUSH
6085: LD_INT 22
6087: PUSH
6088: LD_INT 3
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 91
6097: PUSH
6098: LD_INT 71
6100: PUSH
6101: LD_INT 8
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PPUSH
6113: CALL_OW 69
6117: AND
6118: IFFALSE 6305
6120: GO 6122
6122: DISABLE
6123: LD_INT 0
6125: PPUSH
6126: PPUSH
// begin enable ;
6127: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6128: LD_ADDR_VAR 0 2
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_INT 3
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PUSH
6143: LD_INT 91
6145: PUSH
6146: LD_INT 71
6148: PUSH
6149: LD_INT 14
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PPUSH
6161: CALL_OW 69
6165: ST_TO_ADDR
// InGameOn ;
6166: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6170: LD_INT 116
6172: PPUSH
6173: LD_INT 107
6175: PPUSH
6176: LD_INT 3
6178: PPUSH
6179: LD_INT 3
6181: PPUSH
6182: CALL_OW 330
// ComExit ( Kurin ) ;
6186: LD_EXP 38
6190: PPUSH
6191: CALL 53321 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6195: LD_EXP 38
6199: PPUSH
6200: LD_VAR 0 2
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6213: LD_EXP 38
6217: PPUSH
6218: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6222: LD_VAR 0 2
6226: PPUSH
6227: LD_INT 87
6229: PPUSH
6230: LD_INT 99
6232: PPUSH
6233: CALL_OW 111
// if kirovHasTank then
6237: LD_EXP 6
6241: IFFALSE 6257
// Say ( Kurin , D1a-Kur-1a ) else
6243: LD_EXP 38
6247: PPUSH
6248: LD_STRING D1a-Kur-1a
6250: PPUSH
6251: CALL_OW 88
6255: GO 6269
// Say ( Kurin , D1a-Kur-1 ) ;
6257: LD_EXP 38
6261: PPUSH
6262: LD_STRING D1a-Kur-1
6264: PPUSH
6265: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6269: LD_EXP 38
6273: PPUSH
6274: LD_INT 71
6276: PPUSH
6277: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6281: LD_INT 116
6283: PPUSH
6284: LD_INT 107
6286: PPUSH
6287: LD_INT 3
6289: PPUSH
6290: CALL_OW 331
// wait ( 0 0$3 ) ;
6294: LD_INT 105
6296: PPUSH
6297: CALL_OW 67
// InGameOff ;
6301: CALL_OW 9
// end ;
6305: PPOPN 2
6307: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6308: LD_INT 22
6310: PUSH
6311: LD_INT 3
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 95
6320: PUSH
6321: LD_INT 4
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: PPUSH
6332: CALL_OW 69
6336: PUSH
6337: LD_EXP 7
6341: AND
6342: IFFALSE 6681
6344: GO 6346
6346: DISABLE
6347: LD_INT 0
6349: PPUSH
6350: PPUSH
6351: PPUSH
6352: PPUSH
6353: PPUSH
// begin enable ;
6354: ENABLE
// blockNorth := false ;
6355: LD_ADDR_EXP 7
6359: PUSH
6360: LD_INT 0
6362: ST_TO_ADDR
// InGameOn ;
6363: CALL_OW 8
// DialogueOn ;
6367: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6371: LD_ADDR_VAR 0 2
6375: PUSH
6376: LD_INT 22
6378: PUSH
6379: LD_INT 3
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: LD_INT 95
6388: PUSH
6389: LD_INT 4
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PPUSH
6400: CALL_OW 69
6404: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6405: LD_EXP 39
6409: PUSH
6410: LD_VAR 0 2
6414: IN
6415: PUSH
6416: LD_EXP 39
6420: PPUSH
6421: CALL_OW 302
6425: AND
6426: IFFALSE 6442
// Say ( Kovalyuk , D1b-Kov-1 ) else
6428: LD_EXP 39
6432: PPUSH
6433: LD_STRING D1b-Kov-1
6435: PPUSH
6436: CALL_OW 88
6440: GO 6477
// if Burlak in tmp and IsOk ( Burlak ) then
6442: LD_EXP 34
6446: PUSH
6447: LD_VAR 0 2
6451: IN
6452: PUSH
6453: LD_EXP 34
6457: PPUSH
6458: CALL_OW 302
6462: AND
6463: IFFALSE 6477
// Say ( Burlak , D1b-Bur-1 ) ;
6465: LD_EXP 34
6469: PPUSH
6470: LD_STRING D1b-Bur-1
6472: PPUSH
6473: CALL_OW 88
// DialogueOff ;
6477: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6481: LD_INT 22
6483: PUSH
6484: LD_INT 3
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 3
6493: PUSH
6494: LD_INT 21
6496: PUSH
6497: LD_INT 3
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PPUSH
6512: CALL_OW 69
6516: PPUSH
6517: CALL_OW 141
// for i in tmp do
6521: LD_ADDR_VAR 0 1
6525: PUSH
6526: LD_VAR 0 2
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6660
// begin d := rand ( 2 , 3 ) ;
6534: LD_ADDR_VAR 0 5
6538: PUSH
6539: LD_INT 2
6541: PPUSH
6542: LD_INT 3
6544: PPUSH
6545: CALL_OW 12
6549: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6550: LD_ADDR_VAR 0 3
6554: PUSH
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 250
6564: PPUSH
6565: LD_VAR 0 5
6569: PPUSH
6570: LD_INT 6
6572: PPUSH
6573: CALL_OW 272
6577: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6578: LD_ADDR_VAR 0 4
6582: PUSH
6583: LD_VAR 0 1
6587: PPUSH
6588: CALL_OW 251
6592: PPUSH
6593: LD_VAR 0 5
6597: PPUSH
6598: LD_INT 6
6600: PPUSH
6601: CALL_OW 273
6605: ST_TO_ADDR
// if ValidHex ( x , y ) then
6606: LD_VAR 0 3
6610: PPUSH
6611: LD_VAR 0 4
6615: PPUSH
6616: CALL_OW 488
6620: IFFALSE 6643
// ComMoveXY ( i , x , y ) else
6622: LD_VAR 0 1
6626: PPUSH
6627: LD_VAR 0 3
6631: PPUSH
6632: LD_VAR 0 4
6636: PPUSH
6637: CALL_OW 111
6641: GO 6658
// ComMoveXY ( i , 79 , 85 ) ;
6643: LD_VAR 0 1
6647: PPUSH
6648: LD_INT 79
6650: PPUSH
6651: LD_INT 85
6653: PPUSH
6654: CALL_OW 111
// end ;
6658: GO 6531
6660: POP
6661: POP
// wait ( 0 0$5 ) ;
6662: LD_INT 175
6664: PPUSH
6665: CALL_OW 67
// InGameOff ;
6669: CALL_OW 9
// blockNorth := true ;
6673: LD_ADDR_EXP 7
6677: PUSH
6678: LD_INT 1
6680: ST_TO_ADDR
// end ;
6681: PPOPN 5
6683: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
6684: LD_EXP 44
6688: PPUSH
6689: LD_INT 101
6691: PUSH
6692: LD_INT 3
6694: PUSH
6695: EMPTY
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 72
6703: PUSH
6704: LD_EXP 4
6708: NOT
6709: AND
6710: IFFALSE 7112
6712: GO 6714
6714: DISABLE
6715: LD_INT 0
6717: PPUSH
6718: PPUSH
6719: PPUSH
6720: PPUSH
6721: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
6722: LD_ADDR_VAR 0 5
6726: PUSH
6727: LD_EXP 44
6731: PPUSH
6732: LD_EXP 34
6736: PPUSH
6737: CALL_OW 74
6741: ST_TO_ADDR
// InGameOn ;
6742: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
6746: LD_VAR 0 5
6750: PPUSH
6751: CALL_OW 250
6755: PPUSH
6756: LD_VAR 0 5
6760: PPUSH
6761: CALL_OW 251
6765: PPUSH
6766: LD_INT 3
6768: PPUSH
6769: LD_INT 6
6771: PPUSH
6772: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
6776: LD_VAR 0 5
6780: PPUSH
6781: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
6785: LD_VAR 0 5
6789: PPUSH
6790: LD_EXP 34
6794: PPUSH
6795: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
6799: LD_VAR 0 5
6803: PPUSH
6804: LD_STRING D2-RSol1-1
6806: PPUSH
6807: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
6811: LD_ADDR_VAR 0 3
6815: PUSH
6816: LD_VAR 0 5
6820: PPUSH
6821: CALL_OW 250
6825: PPUSH
6826: LD_VAR 0 5
6830: PPUSH
6831: CALL_OW 254
6835: PPUSH
6836: LD_INT 3
6838: PPUSH
6839: CALL_OW 272
6843: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
6844: LD_ADDR_VAR 0 4
6848: PUSH
6849: LD_VAR 0 5
6853: PPUSH
6854: CALL_OW 251
6858: PPUSH
6859: LD_VAR 0 5
6863: PPUSH
6864: CALL_OW 254
6868: PPUSH
6869: LD_INT 3
6871: PPUSH
6872: CALL_OW 273
6876: ST_TO_ADDR
// if ValidHex ( x , y ) then
6877: LD_VAR 0 3
6881: PPUSH
6882: LD_VAR 0 4
6886: PPUSH
6887: CALL_OW 488
6891: IFFALSE 6923
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
6893: LD_EXP 35
6897: PUSH
6898: LD_EXP 39
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: LD_VAR 0 3
6911: PPUSH
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 111
6921: GO 6946
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
6923: LD_EXP 35
6927: PUSH
6928: LD_EXP 39
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PPUSH
6937: LD_VAR 0 5
6941: PPUSH
6942: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
6946: LD_EXP 34
6950: PPUSH
6951: LD_VAR 0 5
6955: PPUSH
6956: CALL_OW 112
// p := 0 ;
6960: LD_ADDR_VAR 0 2
6964: PUSH
6965: LD_INT 0
6967: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
6968: LD_INT 35
6970: PPUSH
6971: CALL_OW 67
// p := p + 1 ;
6975: LD_ADDR_VAR 0 2
6979: PUSH
6980: LD_VAR 0 2
6984: PUSH
6985: LD_INT 1
6987: PLUS
6988: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
6989: LD_VAR 0 2
6993: PUSH
6994: LD_INT 10
6996: GREATER
6997: PUSH
6998: LD_EXP 34
7002: PPUSH
7003: LD_VAR 0 5
7007: PPUSH
7008: CALL_OW 296
7012: PUSH
7013: LD_INT 6
7015: LESS
7016: OR
7017: IFFALSE 6968
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7019: LD_EXP 34
7023: PUSH
7024: LD_EXP 35
7028: PUSH
7029: LD_EXP 39
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: LD_VAR 0 5
7043: PPUSH
7044: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7048: LD_EXP 34
7052: PPUSH
7053: LD_STRING D2-Bur-1
7055: PPUSH
7056: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7060: LD_VAR 0 5
7064: PPUSH
7065: LD_STRING D2-RSol1-2
7067: PPUSH
7068: CALL_OW 88
// ComHold ( nearestGuard ) ;
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7081: LD_VAR 0 5
7085: PPUSH
7086: CALL_OW 250
7090: PPUSH
7091: LD_VAR 0 5
7095: PPUSH
7096: CALL_OW 251
7100: PPUSH
7101: LD_INT 3
7103: PPUSH
7104: CALL_OW 331
// InGameOff ;
7108: CALL_OW 9
// end ;
7112: PPOPN 5
7114: END
// every 0 0$2 trigger See ( 3 , Platonov ) do var p ;
7115: LD_INT 3
7117: PPUSH
7118: LD_EXP 40
7122: PPUSH
7123: CALL_OW 292
7127: IFFALSE 7483
7129: GO 7131
7131: DISABLE
7132: LD_INT 0
7134: PPUSH
// begin InGameOn ;
7135: CALL_OW 8
// beriaVisited := true ;
7139: LD_ADDR_EXP 4
7143: PUSH
7144: LD_INT 1
7146: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7147: LD_EXP 34
7151: PPUSH
7152: LD_EXP 40
7156: PPUSH
7157: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7161: LD_EXP 35
7165: PUSH
7166: LD_EXP 39
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: PPUSH
7175: LD_INT 68
7177: PPUSH
7178: LD_INT 99
7180: PPUSH
7181: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7185: LD_EXP 40
7189: PPUSH
7190: LD_EXP 34
7194: PPUSH
7195: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7199: LD_EXP 40
7203: PPUSH
7204: LD_STRING D2-Pla-2
7206: PPUSH
7207: CALL_OW 88
// p := 0 ;
7211: LD_ADDR_VAR 0 1
7215: PUSH
7216: LD_INT 0
7218: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7219: LD_INT 35
7221: PPUSH
7222: CALL_OW 67
// p := p + 1 ;
7226: LD_ADDR_VAR 0 1
7230: PUSH
7231: LD_VAR 0 1
7235: PUSH
7236: LD_INT 1
7238: PLUS
7239: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7240: LD_EXP 34
7244: PPUSH
7245: LD_EXP 40
7249: PPUSH
7250: CALL_OW 296
7254: PUSH
7255: LD_INT 6
7257: LESS
7258: PUSH
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 8
7266: GREATER
7267: OR
7268: IFFALSE 7219
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7270: LD_EXP 34
7274: PUSH
7275: LD_EXP 35
7279: PUSH
7280: LD_EXP 39
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: LIST
7289: PPUSH
7290: LD_EXP 40
7294: PPUSH
7295: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7299: LD_EXP 34
7303: PPUSH
7304: LD_STRING D2-Bur-2
7306: PPUSH
7307: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7311: LD_INT 6
7313: PPUSH
7314: LD_INT 3
7316: PPUSH
7317: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7321: LD_EXP 40
7325: PPUSH
7326: LD_STRING D2-Pla-3
7328: PPUSH
7329: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7333: LD_EXP 34
7337: PPUSH
7338: LD_STRING D2-Bur-3
7340: PPUSH
7341: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7345: LD_EXP 40
7349: PPUSH
7350: LD_STRING D2-Pla-4
7352: PPUSH
7353: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7357: LD_EXP 34
7361: PPUSH
7362: LD_STRING D2-Bur-4
7364: PPUSH
7365: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7369: LD_EXP 40
7373: PPUSH
7374: LD_STRING D2-Pla-5
7376: PPUSH
7377: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7381: LD_INT 1
7383: PUSH
7384: LD_INT 2
7386: PUSH
7387: LD_INT 3
7389: PUSH
7390: LD_INT 4
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: PPUSH
7399: CALL 7486 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7403: LD_EXP 40
7407: PPUSH
7408: LD_STRING D3-Pla-1
7410: PPUSH
7411: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7415: LD_EXP 34
7419: PPUSH
7420: LD_STRING D3-Bur-1
7422: PPUSH
7423: CALL_OW 88
// InGameOff ;
7427: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7431: LD_STRING M2a
7433: PPUSH
7434: CALL_OW 337
// SetSide ( beria , 3 ) ;
7438: LD_INT 106
7440: PPUSH
7441: LD_INT 3
7443: PPUSH
7444: CALL_OW 235
// if not Gnyevko then
7448: LD_EXP 35
7452: NOT
7453: IFFALSE 7474
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7455: LD_INT 106
7457: PPUSH
7458: CALL_OW 313
7462: PUSH
7463: LD_INT 1
7465: ARRAY
7466: PPUSH
7467: LD_INT 3
7469: PPUSH
7470: CALL_OW 235
// ComFree ( Platonov ) ;
7474: LD_EXP 40
7478: PPUSH
7479: CALL_OW 139
// end ;
7483: PPOPN 1
7485: END
// function AskPlatonov ( questions ) ; var q ; begin
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7490: LD_ADDR_VAR 0 3
7494: PUSH
7495: LD_STRING QMoreInfo
7497: PPUSH
7498: LD_VAR 0 1
7502: PPUSH
7503: CALL_OW 98
7507: ST_TO_ADDR
// case q of 1 :
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 1
7515: DOUBLE
7516: EQUAL
7517: IFTRUE 7521
7519: GO 7548
7521: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7522: LD_EXP 34
7526: PPUSH
7527: LD_STRING D2a-Bur-1
7529: PPUSH
7530: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7534: LD_EXP 40
7538: PPUSH
7539: LD_STRING D2a-Pla-1
7541: PPUSH
7542: CALL_OW 88
// end ; 2 :
7546: GO 7619
7548: LD_INT 2
7550: DOUBLE
7551: EQUAL
7552: IFTRUE 7556
7554: GO 7583
7556: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7557: LD_EXP 34
7561: PPUSH
7562: LD_STRING D2b-Bur-1
7564: PPUSH
7565: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7569: LD_EXP 40
7573: PPUSH
7574: LD_STRING D2b-Pla-1
7576: PPUSH
7577: CALL_OW 88
// end ; 3 :
7581: GO 7619
7583: LD_INT 3
7585: DOUBLE
7586: EQUAL
7587: IFTRUE 7591
7589: GO 7618
7591: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7592: LD_EXP 34
7596: PPUSH
7597: LD_STRING D2c-Bur-1
7599: PPUSH
7600: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7604: LD_EXP 40
7608: PPUSH
7609: LD_STRING D2c-Pla-1
7611: PPUSH
7612: CALL_OW 88
// end ; end ;
7616: GO 7619
7618: POP
// if q < 4 and questions > 2 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 4
7626: LESS
7627: PUSH
7628: LD_VAR 0 1
7632: PUSH
7633: LD_INT 2
7635: GREATER
7636: AND
7637: IFFALSE 7654
// AskPlatonov ( questions diff q ) ;
7639: LD_VAR 0 1
7643: PUSH
7644: LD_VAR 0 3
7648: DIFF
7649: PPUSH
7650: CALL 7486 0 1
// end ;
7654: LD_VAR 0 2
7658: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7659: LD_INT 0
7661: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_VAR 0 1
7671: PPUSH
7672: LD_VAR 0 2
7676: PPUSH
7677: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7681: LD_INT 35
7683: PPUSH
7684: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 ;
7688: LD_EXP 40
7692: PPUSH
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_VAR 0 2
7702: PPUSH
7703: CALL_OW 297
7707: PUSH
7708: LD_INT 5
7710: LESS
7711: IFFALSE 7681
// ComStop ( Platonov ) ;
7713: LD_EXP 40
7717: PPUSH
7718: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
7722: LD_EXP 40
7726: PPUSH
7727: LD_STRING D4-Pla-1
7729: PPUSH
7730: CALL_OW 88
// end ;
7734: LD_VAR 0 3
7738: RET
// every 0 0$2 trigger hasLab do
7739: LD_EXP 9
7743: IFFALSE 7807
7745: GO 7747
7747: DISABLE
// begin DialogueOn ;
7748: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
7752: LD_EXP 34
7756: PPUSH
7757: LD_STRING D5a-Bur-1
7759: PPUSH
7760: CALL_OW 88
// if hasWorkshop then
7764: LD_EXP 10
7768: IFFALSE 7784
// Say ( Platonov , D5a-Pla-1 ) else
7770: LD_EXP 40
7774: PPUSH
7775: LD_STRING D5a-Pla-1
7777: PPUSH
7778: CALL_OW 88
7782: GO 7796
// Say ( Platonov , D5a-Pla-1a ) ;
7784: LD_EXP 40
7788: PPUSH
7789: LD_STRING D5a-Pla-1a
7791: PPUSH
7792: CALL_OW 88
// DialogueOff ;
7796: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
7800: LD_STRING M2b
7802: PPUSH
7803: CALL_OW 337
// end ;
7807: END
// every 0 0$2 trigger hasWorkshop do
7808: LD_EXP 10
7812: IFFALSE 7876
7814: GO 7816
7816: DISABLE
// begin DialogueOn ;
7817: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
7821: LD_EXP 34
7825: PPUSH
7826: LD_STRING D5b-Bur-1
7828: PPUSH
7829: CALL_OW 88
// if hasLab then
7833: LD_EXP 9
7837: IFFALSE 7853
// Say ( Platonov , D5b-Pla-1 ) else
7839: LD_EXP 40
7843: PPUSH
7844: LD_STRING D5b-Pla-1
7846: PPUSH
7847: CALL_OW 88
7851: GO 7865
// Say ( Platonov , D5b-Pla-1a ) ;
7853: LD_EXP 40
7857: PPUSH
7858: LD_STRING D5b-Pla-1a
7860: PPUSH
7861: CALL_OW 88
// DialogueOff ;
7865: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
7869: LD_STRING M2c
7871: PPUSH
7872: CALL_OW 337
// end ;
7876: END
// every 0 0$2 trigger hasLab and hasWorkshop do
7877: LD_EXP 9
7881: PUSH
7882: LD_EXP 10
7886: AND
7887: IFFALSE 7988
7889: GO 7891
7891: DISABLE
// begin wait ( 0 0$2 ) ;
7892: LD_INT 70
7894: PPUSH
7895: CALL_OW 67
// DialogueOn ;
7899: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
7903: LD_INT 47
7905: PPUSH
7906: LD_INT 3
7908: PPUSH
7909: CALL_OW 321
7913: PUSH
7914: LD_INT 2
7916: EQUAL
7917: IFFALSE 7945
// begin Say ( Burlak , D7b-Bur-1 ) ;
7919: LD_EXP 34
7923: PPUSH
7924: LD_STRING D7b-Bur-1
7926: PPUSH
7927: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
7931: LD_EXP 40
7935: PPUSH
7936: LD_STRING D7b-Pla-1
7938: PPUSH
7939: CALL_OW 88
// end else
7943: GO 7969
// begin Say ( Burlak , D7a-Bur-1 ) ;
7945: LD_EXP 34
7949: PPUSH
7950: LD_STRING D7a-Bur-1
7952: PPUSH
7953: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
7957: LD_EXP 40
7961: PPUSH
7962: LD_STRING D7a-Pla-1
7964: PPUSH
7965: CALL_OW 88
// end ; DialogueOff ;
7969: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
7973: LD_STRING M2
7975: PPUSH
7976: CALL_OW 337
// hasToBuildTank := true ;
7980: LD_ADDR_EXP 11
7984: PUSH
7985: LD_INT 1
7987: ST_TO_ADDR
// end ;
7988: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
7989: LD_EXP 4
7993: PUSH
7994: LD_EXP 9
7998: NOT
7999: PUSH
8000: LD_EXP 10
8004: NOT
8005: OR
8006: PUSH
8007: LD_EXP 11
8011: OR
8012: AND
8013: PUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 3
8026: PUSH
8027: LD_INT 91
8029: PUSH
8030: LD_INT 106
8032: PUSH
8033: LD_INT 32
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: PPUSH
8049: CALL_OW 69
8053: AND
8054: IFFALSE 8163
8056: GO 8058
8058: DISABLE
8059: LD_INT 0
8061: PPUSH
// begin enable ;
8062: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8063: LD_ADDR_VAR 0 1
8067: PUSH
8068: LD_INT 22
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_INT 3
8080: PUSH
8081: LD_INT 91
8083: PUSH
8084: LD_INT 106
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: LIST
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PPUSH
8103: CALL_OW 69
8107: ST_TO_ADDR
// InGameOn ;
8108: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8112: LD_VAR 0 1
8116: PUSH
8117: LD_INT 1
8119: ARRAY
8120: PPUSH
8121: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8125: LD_VAR 0 1
8129: PPUSH
8130: LD_INT 66
8132: PPUSH
8133: LD_INT 99
8135: PPUSH
8136: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D8-Pla-1
8147: PPUSH
8148: CALL_OW 88
// wait ( 0 0$3 ) ;
8152: LD_INT 105
8154: PPUSH
8155: CALL_OW 67
// InGameOff ;
8159: CALL_OW 9
// end ;
8163: PPOPN 1
8165: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) do var tmp ;
8166: LD_INT 22
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 2
8178: PUSH
8179: LD_INT 30
8181: PUSH
8182: LD_INT 4
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 30
8191: PUSH
8192: LD_INT 31
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PPUSH
8208: CALL_OW 69
8212: IFFALSE 8352
8214: GO 8216
8216: DISABLE
8217: LD_INT 0
8219: PPUSH
// begin enable ;
8220: ENABLE
// InGameOn ;
8221: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8225: LD_ADDR_VAR 0 1
8229: PUSH
8230: LD_INT 22
8232: PUSH
8233: LD_INT 3
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: LD_INT 30
8245: PUSH
8246: LD_INT 4
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: LD_INT 30
8255: PUSH
8256: LD_INT 31
8258: PUSH
8259: EMPTY
8260: LIST
8261: LIST
8262: PUSH
8263: EMPTY
8264: LIST
8265: LIST
8266: LIST
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PPUSH
8272: CALL_OW 69
8276: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8277: LD_EXP 40
8281: PPUSH
8282: LD_VAR 0 1
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: PPUSH
8291: CALL_OW 112
// wait ( 0 0$2 ) ;
8295: LD_INT 70
8297: PPUSH
8298: CALL_OW 67
// ComHold ( Platonov ) ;
8302: LD_EXP 40
8306: PPUSH
8307: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D6-Pla-1
8318: PPUSH
8319: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8323: LD_EXP 34
8327: PPUSH
8328: LD_STRING D6-Bur-1
8330: PPUSH
8331: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8335: LD_VAR 0 1
8339: PUSH
8340: LD_INT 1
8342: ARRAY
8343: PPUSH
8344: CALL_OW 64
// InGameOff ;
8348: CALL_OW 9
// end ;
8352: PPOPN 1
8354: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
8355: LD_INT 22
8357: PUSH
8358: LD_INT 3
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 92
8367: PUSH
8368: LD_INT 112
8370: PUSH
8371: LD_INT 155
8373: PUSH
8374: LD_INT 8
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: PPUSH
8387: CALL_OW 69
8391: PUSH
8392: LD_INT 2
8394: LESS
8395: PUSH
8396: LD_EXP 34
8400: PPUSH
8401: LD_INT 112
8403: PPUSH
8404: LD_INT 155
8406: PPUSH
8407: CALL_OW 297
8411: PUSH
8412: LD_INT 8
8414: LESS
8415: AND
8416: IFFALSE 8650
8418: GO 8420
8420: DISABLE
8421: LD_INT 0
8423: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
8424: LD_INT 112
8426: PPUSH
8427: LD_INT 155
8429: PPUSH
8430: LD_INT 3
8432: PPUSH
8433: LD_INT 4
8435: NEG
8436: PPUSH
8437: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
8441: LD_INT 1
8443: PPUSH
8444: LD_EXP 34
8448: PPUSH
8449: CALL_OW 471
// uc_side := 1 ;
8453: LD_ADDR_OWVAR 20
8457: PUSH
8458: LD_INT 1
8460: ST_TO_ADDR
// uc_nation := 1 ;
8461: LD_ADDR_OWVAR 21
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
8469: LD_ADDR_VAR 0 1
8473: PUSH
8474: LD_STRING Dickens
8476: PPUSH
8477: CALL_OW 25
8481: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
8482: LD_VAR 0 1
8486: PPUSH
8487: LD_INT 112
8489: PPUSH
8490: LD_INT 155
8492: PPUSH
8493: LD_INT 1
8495: PPUSH
8496: CALL_OW 48
// wait ( 0 0$2 ) ;
8500: LD_INT 70
8502: PPUSH
8503: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
8507: LD_VAR 0 1
8511: PPUSH
8512: LD_EXP 34
8516: PPUSH
8517: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
8521: LD_VAR 0 1
8525: PPUSH
8526: LD_STRING DUsSpawnSol
8528: PPUSH
8529: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
8533: LD_INT 1
8535: PPUSH
8536: LD_EXP 34
8540: PPUSH
8541: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
8545: LD_INT 112
8547: PPUSH
8548: LD_INT 155
8550: PPUSH
8551: LD_INT 3
8553: PPUSH
8554: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
8558: LD_VAR 0 1
8562: PPUSH
8563: LD_INT 77
8565: PPUSH
8566: LD_INT 152
8568: PPUSH
8569: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
8580: LD_VAR 0 1
8584: PPUSH
8585: CALL_OW 302
8589: NOT
8590: PUSH
8591: LD_VAR 0 1
8595: PPUSH
8596: LD_INT 77
8598: PPUSH
8599: LD_INT 152
8601: PPUSH
8602: CALL_OW 307
8606: OR
8607: IFFALSE 8573
// if not IsOk ( Dickens ) then
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 302
8618: NOT
8619: IFFALSE 8623
// exit ;
8621: GO 8650
// RemoveUnit ( Dickens ) ;
8623: LD_VAR 0 1
8627: PPUSH
8628: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
8632: LD_VAR 0 1
8636: PPUSH
8637: LD_EXP 3
8641: PUSH
8642: LD_STRING Dickens
8644: STR
8645: PPUSH
8646: CALL_OW 38
// end ;
8650: PPOPN 1
8652: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
8653: LD_EXP 34
8657: PPUSH
8658: CALL_OW 256
8662: PUSH
8663: LD_INT 600
8665: LESS
8666: IFFALSE 8683
8668: GO 8670
8670: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
8671: LD_EXP 34
8675: PPUSH
8676: LD_STRING DUsSpawnBur
8678: PPUSH
8679: CALL_OW 88
8683: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
8684: LD_EXP 12
8688: IFFALSE 9718
8690: GO 8692
8692: DISABLE
8693: LD_INT 0
8695: PPUSH
8696: PPUSH
8697: PPUSH
8698: PPUSH
// begin hasToBuildTank := false ;
8699: LD_ADDR_EXP 11
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// kurinDontWannaTalk := false ;
8707: LD_ADDR_EXP 5
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
8715: LD_ADDR_VAR 0 2
8719: PUSH
8720: LD_INT 22
8722: PUSH
8723: LD_INT 3
8725: PUSH
8726: EMPTY
8727: LIST
8728: LIST
8729: PUSH
8730: LD_INT 21
8732: PUSH
8733: LD_INT 2
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PPUSH
8744: CALL_OW 69
8748: ST_TO_ADDR
// InGameOn ;
8749: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
8753: LD_VAR 0 2
8757: PUSH
8758: LD_INT 1
8760: ARRAY
8761: PPUSH
8762: CALL_OW 85
// wait ( 0 0$1 ) ;
8766: LD_INT 35
8768: PPUSH
8769: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
8773: LD_EXP 34
8777: PPUSH
8778: LD_STRING D9-Bur-1
8780: PPUSH
8781: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8785: LD_EXP 40
8789: PPUSH
8790: LD_VAR 0 2
8794: PUSH
8795: LD_INT 1
8797: ARRAY
8798: PPUSH
8799: CALL_OW 112
// p := 0 ;
8803: LD_ADDR_VAR 0 3
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8811: LD_INT 35
8813: PPUSH
8814: CALL_OW 67
// p := p + 1 ;
8818: LD_ADDR_VAR 0 3
8822: PUSH
8823: LD_VAR 0 3
8827: PUSH
8828: LD_INT 1
8830: PLUS
8831: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
8832: LD_EXP 40
8836: PPUSH
8837: LD_VAR 0 2
8841: PUSH
8842: LD_INT 1
8844: ARRAY
8845: PPUSH
8846: CALL_OW 296
8850: PUSH
8851: LD_INT 8
8853: LESS
8854: PUSH
8855: LD_VAR 0 3
8859: PUSH
8860: LD_INT 8
8862: GREATER
8863: OR
8864: IFFALSE 8811
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
8866: LD_EXP 40
8870: PPUSH
8871: LD_VAR 0 2
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
8884: LD_EXP 40
8888: PPUSH
8889: LD_STRING D9-Pla-1
8891: PPUSH
8892: CALL_OW 88
// ComFree ( Platonov ) ;
8896: LD_EXP 40
8900: PPUSH
8901: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
8905: LD_EXP 40
8909: PPUSH
8910: LD_INT 64
8912: PPUSH
8913: LD_INT 98
8915: PPUSH
8916: CALL_OW 171
// InGameOff ;
8920: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
8924: LD_STRING M3
8926: PPUSH
8927: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
8931: LD_EXP 41
8935: PPUSH
8936: LD_INT 70
8938: PPUSH
8939: LD_INT 108
8941: PPUSH
8942: CALL_OW 111
// AddComHold ( Kuklajs ) ;
8946: LD_EXP 41
8950: PPUSH
8951: CALL_OW 200
// belkovBrother := false ;
8955: LD_ADDR_EXP 32
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
8963: LD_EXP 2
8967: PUSH
8968: LD_STRING Belkov
8970: STR
8971: PPUSH
8972: CALL_OW 28
8976: NOT
8977: PUSH
8978: LD_EXP 1
8982: NOT
8983: AND
8984: IFFALSE 9019
// begin Belkov := NewCharacter ( Belkov2 ) ;
8986: LD_ADDR_EXP 36
8990: PUSH
8991: LD_STRING Belkov2
8993: PPUSH
8994: CALL_OW 25
8998: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
8999: LD_EXP 36
9003: PPUSH
9004: LD_INT 71
9006: PPUSH
9007: CALL_OW 52
// belkovBrother := true ;
9011: LD_ADDR_EXP 32
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// end ; wait ( 1 ) ;
9019: LD_INT 1
9021: PPUSH
9022: CALL_OW 67
// ComExit ( Belkov ) ;
9026: LD_EXP 36
9030: PPUSH
9031: CALL 53321 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9035: LD_EXP 36
9039: PPUSH
9040: LD_INT 113
9042: PPUSH
9043: LD_INT 104
9045: PPUSH
9046: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9050: LD_EXP 36
9054: PPUSH
9055: LD_INT 116
9057: PPUSH
9058: LD_INT 108
9060: PPUSH
9061: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9065: LD_INT 35
9067: PPUSH
9068: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9072: LD_INT 22
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 21
9084: PUSH
9085: LD_INT 2
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 91
9094: PUSH
9095: LD_INT 71
9097: PUSH
9098: LD_INT 8
9100: PUSH
9101: EMPTY
9102: LIST
9103: LIST
9104: LIST
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: PPUSH
9111: CALL_OW 69
9115: IFFALSE 9065
// InGameOn ;
9117: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9121: LD_ADDR_VAR 0 2
9125: PUSH
9126: LD_INT 22
9128: PUSH
9129: LD_INT 3
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 21
9138: PUSH
9139: LD_INT 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: LD_INT 91
9148: PUSH
9149: LD_INT 71
9151: PUSH
9152: LD_INT 8
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: LIST
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PPUSH
9165: CALL_OW 69
9169: ST_TO_ADDR
// if belkovTeam < 3 then
9170: LD_EXP 45
9174: PUSH
9175: LD_INT 3
9177: LESS
9178: IFFALSE 9263
// begin for i := belkovTeam to 3 do
9180: LD_ADDR_VAR 0 1
9184: PUSH
9185: DOUBLE
9186: LD_EXP 45
9190: DEC
9191: ST_TO_ADDR
9192: LD_INT 3
9194: PUSH
9195: FOR_TO
9196: IFFALSE 9261
// begin un := kirovBaseSquad [ 2 ] ;
9198: LD_ADDR_VAR 0 4
9202: PUSH
9203: LD_EXP 43
9207: PUSH
9208: LD_INT 2
9210: ARRAY
9211: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 2 ) ;
9212: LD_ADDR_EXP 43
9216: PUSH
9217: LD_EXP 43
9221: PPUSH
9222: LD_INT 2
9224: PPUSH
9225: CALL_OW 3
9229: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9230: LD_ADDR_EXP 45
9234: PUSH
9235: LD_EXP 45
9239: PPUSH
9240: LD_EXP 45
9244: PUSH
9245: LD_INT 1
9247: PLUS
9248: PPUSH
9249: LD_VAR 0 4
9253: PPUSH
9254: CALL_OW 1
9258: ST_TO_ADDR
// end ;
9259: GO 9195
9261: POP
9262: POP
// end ; ComExit ( Kurin ) ;
9263: LD_EXP 38
9267: PPUSH
9268: CALL 53321 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
9272: LD_EXP 38
9276: PPUSH
9277: LD_VAR 0 2
9281: PUSH
9282: LD_INT 1
9284: ARRAY
9285: PPUSH
9286: CALL_OW 179
// wait ( 0 0$1 ) ;
9290: LD_INT 35
9292: PPUSH
9293: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
9297: LD_VAR 0 2
9301: PUSH
9302: LD_INT 1
9304: ARRAY
9305: PPUSH
9306: CALL_OW 141
// Say ( Kurin , D10-Kur-1 ) ;
9310: LD_EXP 38
9314: PPUSH
9315: LD_STRING D10-Kur-1
9317: PPUSH
9318: CALL_OW 88
// Say ( Belkov , D10-Bel-1 ) ;
9322: LD_EXP 36
9326: PPUSH
9327: LD_STRING D10-Bel-1
9329: PPUSH
9330: CALL_OW 88
// if belkovBrother then
9334: LD_EXP 32
9338: IFFALSE 9390
// begin Say ( Burlak , D10-Bur-1 ) ;
9340: LD_EXP 34
9344: PPUSH
9345: LD_STRING D10-Bur-1
9347: PPUSH
9348: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
9352: LD_EXP 36
9356: PPUSH
9357: LD_STRING D10-Bel-2
9359: PPUSH
9360: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9364: LD_EXP 34
9368: PPUSH
9369: LD_STRING D10-Bur-2
9371: PPUSH
9372: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9376: LD_EXP 38
9380: PPUSH
9381: LD_STRING D10-Kur-2a
9383: PPUSH
9384: CALL_OW 88
// end else
9388: GO 9402
// begin Say ( Kurin , D10-Kur-2 ) end ;
9390: LD_EXP 38
9394: PPUSH
9395: LD_STRING D10-Kur-2
9397: PPUSH
9398: CALL_OW 88
// un := IsDrivenBy ( tmp [ 1 ] ) ;
9402: LD_ADDR_VAR 0 4
9406: PUSH
9407: LD_VAR 0 2
9411: PUSH
9412: LD_INT 1
9414: ARRAY
9415: PPUSH
9416: CALL_OW 311
9420: ST_TO_ADDR
// ComExit ( un ) ;
9421: LD_VAR 0 4
9425: PPUSH
9426: CALL 53321 0 1
// AddComTurnUnit ( un , Kurin ) ;
9430: LD_VAR 0 4
9434: PPUSH
9435: LD_EXP 38
9439: PPUSH
9440: CALL_OW 179
// wait ( 0 0$0.3 ) ;
9444: LD_INT 10
9446: PPUSH
9447: CALL_OW 67
// ComEnterUnit ( Belkov , tmp [ 1 ] ) ;
9451: LD_EXP 36
9455: PPUSH
9456: LD_VAR 0 2
9460: PUSH
9461: LD_INT 1
9463: ARRAY
9464: PPUSH
9465: CALL_OW 120
// wait ( 0 0$2 ) ;
9469: LD_INT 70
9471: PPUSH
9472: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
9476: LD_EXP 38
9480: PPUSH
9481: LD_STRING D10-Kur-2b
9483: PPUSH
9484: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
9488: LD_VAR 0 4
9492: PPUSH
9493: LD_INT 66
9495: PPUSH
9496: LD_INT 97
9498: PPUSH
9499: CALL_OW 111
// wait ( 0 0$5 ) ;
9503: LD_INT 175
9505: PPUSH
9506: CALL_OW 67
// InGameOff ;
9510: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
9514: LD_EXP 33
9518: PPUSH
9519: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
9523: LD_STRING M4
9525: PPUSH
9526: CALL_OW 337
// wait ( 0 0$6 ) ;
9530: LD_INT 210
9532: PPUSH
9533: CALL_OW 67
// kurinDontWannaTalk := true ;
9537: LD_ADDR_EXP 5
9541: PUSH
9542: LD_INT 1
9544: ST_TO_ADDR
// wait ( 0 0$4 ) ;
9545: LD_INT 140
9547: PPUSH
9548: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
9552: LD_INT 35
9554: PPUSH
9555: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
9559: LD_EXP 34
9563: PPUSH
9564: CALL_OW 310
9568: PUSH
9569: LD_EXP 34
9573: PPUSH
9574: LD_INT 106
9576: PPUSH
9577: CALL_OW 296
9581: PUSH
9582: LD_INT 12
9584: LESS
9585: OR
9586: IFFALSE 9552
// DialogueOn ;
9588: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
9592: LD_EXP 40
9596: PPUSH
9597: LD_STRING D11-Pla-1
9599: PPUSH
9600: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
9604: LD_EXP 34
9608: PPUSH
9609: LD_STRING D11-Bur-1
9611: PPUSH
9612: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
9616: LD_INT 22
9618: PUSH
9619: LD_INT 3
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 21
9628: PUSH
9629: LD_INT 1
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 69
9644: PUSH
9645: LD_INT 1
9647: GREATER
9648: IFFALSE 9662
// Say ( Burlak , D11-Bur-1a ) ;
9650: LD_EXP 34
9654: PPUSH
9655: LD_STRING D11-Bur-1a
9657: PPUSH
9658: CALL_OW 88
// DialogueOff ;
9662: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
9666: LD_ADDR_EXP 8
9670: PUSH
9671: LD_INT 160
9673: PUSH
9674: LD_INT 150
9676: PUSH
9677: LD_INT 140
9679: PUSH
9680: LD_INT 120
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: PUSH
9689: LD_OWVAR 67
9693: ARRAY
9694: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
9695: LD_STRING M5
9697: PPUSH
9698: CALL_OW 337
// kirovHasTank := true ;
9702: LD_ADDR_EXP 6
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// hasToBuildTank := true ;
9710: LD_ADDR_EXP 11
9714: PUSH
9715: LD_INT 1
9717: ST_TO_ADDR
// end ;
9718: PPOPN 4
9720: END
// every 0 0$2 trigger allianceAttacked do
9721: LD_EXP 13
9725: IFFALSE 9764
9727: GO 9729
9729: DISABLE
// begin DialogueOn ;
9730: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
9734: LD_EXP 38
9738: PPUSH
9739: LD_STRING DArestKur
9741: PPUSH
9742: CALL_OW 88
// dwait ( 0 0$1 ) ;
9746: LD_INT 35
9748: PPUSH
9749: CALL_OW 68
// YouLost ( SelfAttack ) ;
9753: LD_STRING SelfAttack
9755: PPUSH
9756: CALL_OW 104
// DialogueOff ;
9760: CALL_OW 7
// end ;
9764: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
9765: LD_INT 22
9767: PUSH
9768: LD_INT 3
9770: PUSH
9771: EMPTY
9772: LIST
9773: LIST
9774: PUSH
9775: LD_INT 21
9777: PUSH
9778: LD_INT 2
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PPUSH
9789: CALL_OW 69
9793: PUSH
9794: LD_INT 22
9796: PUSH
9797: LD_INT 3
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 1
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: PPUSH
9818: CALL_OW 69
9822: GREATEREQUAL
9823: PUSH
9824: LD_EXP 6
9828: AND
9829: IFFALSE 9999
9831: GO 9833
9833: DISABLE
// begin hasToBuildTank := false ;
9834: LD_ADDR_EXP 11
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// blockNorth := false ;
9842: LD_ADDR_EXP 7
9846: PUSH
9847: LD_INT 0
9849: ST_TO_ADDR
// InGameOn ;
9850: CALL_OW 8
// wait ( 0 0$2 ) ;
9854: LD_INT 70
9856: PPUSH
9857: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
9861: LD_INT 106
9863: PPUSH
9864: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
9868: LD_EXP 40
9872: PPUSH
9873: LD_INT 65
9875: PPUSH
9876: LD_INT 97
9878: PPUSH
9879: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
9883: LD_EXP 40
9887: PPUSH
9888: LD_EXP 34
9892: PPUSH
9893: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
9897: LD_EXP 34
9901: PPUSH
9902: LD_STRING D12-Bur-1
9904: PPUSH
9905: CALL_OW 88
// wait ( 0 0$1 ) ;
9909: LD_INT 35
9911: PPUSH
9912: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
9916: LD_EXP 40
9920: PPUSH
9921: LD_STRING D12-Pla-1
9923: PPUSH
9924: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
9928: LD_EXP 34
9932: PPUSH
9933: LD_STRING D12-Bur-2
9935: PPUSH
9936: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
9940: LD_EXP 40
9944: PPUSH
9945: LD_STRING D12-Pla-2
9947: PPUSH
9948: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
9952: LD_EXP 34
9956: PPUSH
9957: LD_STRING D12-Bur-3
9959: PPUSH
9960: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
9964: LD_EXP 40
9968: PPUSH
9969: LD_STRING D12-Pla-3
9971: PPUSH
9972: CALL_OW 88
// hasAllTanks := true ;
9976: LD_ADDR_EXP 14
9980: PUSH
9981: LD_INT 1
9983: ST_TO_ADDR
// InGameOff ;
9984: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
9988: LD_STRING M6
9990: PPUSH
9991: CALL_OW 337
// PrepareAmerican ;
9995: CALL 3683 0 0
// end ;
9999: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10000: LD_EXP 17
10004: IFFALSE 11649
10006: GO 10008
10008: DISABLE
10009: LD_INT 0
10011: PPUSH
10012: PPUSH
10013: PPUSH
10014: PPUSH
10015: PPUSH
10016: PPUSH
10017: PPUSH
// begin PrepareAmericanTrap ;
10018: CALL 4479 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10022: LD_ADDR_VAR 0 2
10026: PUSH
10027: LD_EXP 48
10031: PPUSH
10032: LD_INT 26
10034: PUSH
10035: LD_INT 1
10037: PUSH
10038: EMPTY
10039: LIST
10040: LIST
10041: PPUSH
10042: CALL_OW 72
10046: PUSH
10047: LD_INT 1
10049: ARRAY
10050: ST_TO_ADDR
// InGameOn ;
10051: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10055: LD_INT 69
10057: PPUSH
10058: LD_INT 22
10060: PPUSH
10061: CALL_OW 86
// wait ( 0 0$1 ) ;
10065: LD_INT 35
10067: PPUSH
10068: CALL_OW 67
// DialogueOn ;
10072: CALL_OW 6
// game_speed := 4 ;
10076: LD_ADDR_OWVAR 65
10080: PUSH
10081: LD_INT 4
10083: ST_TO_ADDR
// SayRadio ( usSol , D13-Sol1-1 ) ;
10084: LD_VAR 0 2
10088: PPUSH
10089: LD_STRING D13-Sol1-1
10091: PPUSH
10092: CALL_OW 94
// SayRadio ( Belkov , D13-Bel-1 ) ;
10096: LD_EXP 36
10100: PPUSH
10101: LD_STRING D13-Bel-1
10103: PPUSH
10104: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10108: LD_EXP 38
10112: PPUSH
10113: LD_STRING D13-Kur-1
10115: PPUSH
10116: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10120: LD_INT 10
10122: PPUSH
10123: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10127: LD_EXP 36
10131: PPUSH
10132: LD_STRING D13-Bel-2
10134: PPUSH
10135: CALL_OW 94
// DialogueOff ;
10139: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10143: LD_EXP 36
10147: PPUSH
10148: LD_INT 76
10150: PPUSH
10151: LD_INT 20
10153: PPUSH
10154: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10158: LD_EXP 45
10162: PPUSH
10163: LD_INT 72
10165: PPUSH
10166: LD_INT 20
10168: PPUSH
10169: CALL_OW 111
// wait ( 0 0$2 ) ;
10173: LD_INT 70
10175: PPUSH
10176: CALL_OW 67
// for i in usTrapForces do
10180: LD_ADDR_VAR 0 1
10184: PUSH
10185: LD_EXP 48
10189: PUSH
10190: FOR_IN
10191: IFFALSE 10224
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
10193: LD_VAR 0 1
10197: PPUSH
10198: LD_INT 7
10200: PPUSH
10201: LD_INT 0
10203: PPUSH
10204: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
10208: LD_VAR 0 1
10212: PPUSH
10213: LD_EXP 36
10217: PPUSH
10218: CALL_OW 119
// end ;
10222: GO 10190
10224: POP
10225: POP
// wait ( 0 0$0.3 ) ;
10226: LD_INT 10
10228: PPUSH
10229: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
10233: LD_EXP 48
10237: PPUSH
10238: LD_INT 65
10240: PPUSH
10241: LD_INT 18
10243: PPUSH
10244: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
10248: LD_INT 70
10250: PPUSH
10251: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
10255: LD_EXP 48
10259: PPUSH
10260: LD_INT 101
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 72
10274: PUSH
10275: LD_INT 3
10277: GREATER
10278: IFFALSE 10248
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
10280: LD_INT 65
10282: PPUSH
10283: LD_INT 18
10285: PPUSH
10286: LD_INT 3
10288: PPUSH
10289: LD_INT 26
10291: NEG
10292: PPUSH
10293: CALL_OW 330
// DialogueOn ;
10297: CALL_OW 6
// Say ( usSol , D14-Sol1-1 ) ;
10301: LD_VAR 0 2
10305: PPUSH
10306: LD_STRING D14-Sol1-1
10308: PPUSH
10309: CALL_OW 88
// Say ( Belkov , D14-Bel-1 ) ;
10313: LD_EXP 36
10317: PPUSH
10318: LD_STRING D14-Bel-1
10320: PPUSH
10321: CALL_OW 88
// DialogueOff ;
10325: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
10329: LD_INT 65
10331: PPUSH
10332: LD_INT 18
10334: PPUSH
10335: LD_INT 3
10337: PPUSH
10338: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
10342: LD_EXP 45
10346: PPUSH
10347: LD_INT 31
10349: PPUSH
10350: LD_INT 9
10352: PPUSH
10353: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
10357: LD_EXP 48
10361: PPUSH
10362: LD_INT 50
10364: PPUSH
10365: LD_INT 16
10367: PPUSH
10368: CALL_OW 174
// wait ( 0 0$2 ) ;
10372: LD_INT 70
10374: PPUSH
10375: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
10379: LD_ADDR_VAR 0 6
10383: PUSH
10384: LD_EXP 36
10388: PPUSH
10389: CALL_OW 310
10393: ST_TO_ADDR
// if not belkovTank then
10394: LD_VAR 0 6
10398: NOT
10399: IFFALSE 10439
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10401: LD_ADDR_VAR 0 6
10405: PUSH
10406: LD_INT 22
10408: PUSH
10409: LD_INT 6
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 21
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: PPUSH
10430: CALL_OW 69
10434: PUSH
10435: LD_INT 1
10437: ARRAY
10438: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
10439: LD_EXP 36
10443: PPUSH
10444: LD_INT 58
10446: PPUSH
10447: LD_INT 21
10449: PPUSH
10450: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
10454: LD_EXP 36
10458: PPUSH
10459: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
10463: LD_EXP 36
10467: PPUSH
10468: LD_INT 53
10470: PPUSH
10471: LD_INT 18
10473: PPUSH
10474: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
10478: LD_EXP 36
10482: PPUSH
10483: LD_INT 31
10485: PPUSH
10486: LD_INT 9
10488: PPUSH
10489: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10493: LD_INT 35
10495: PPUSH
10496: CALL_OW 67
// for i in Belkov union belkovTeam do
10500: LD_ADDR_VAR 0 1
10504: PUSH
10505: LD_EXP 36
10509: PUSH
10510: LD_EXP 45
10514: UNION
10515: PUSH
10516: FOR_IN
10517: IFFALSE 10548
// if GetLives ( i ) < 800 then
10519: LD_VAR 0 1
10523: PPUSH
10524: CALL_OW 256
10528: PUSH
10529: LD_INT 800
10531: LESS
10532: IFFALSE 10546
// SetLives ( i , 800 ) ;
10534: LD_VAR 0 1
10538: PPUSH
10539: LD_INT 800
10541: PPUSH
10542: CALL_OW 234
10546: GO 10516
10548: POP
10549: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
10550: LD_EXP 36
10554: PPUSH
10555: LD_INT 31
10557: PPUSH
10558: LD_INT 9
10560: PPUSH
10561: CALL_OW 297
10565: PUSH
10566: LD_INT 4
10568: LESS
10569: IFFALSE 10493
// for i := 1 to Difficulty do
10571: LD_ADDR_VAR 0 1
10575: PUSH
10576: DOUBLE
10577: LD_INT 1
10579: DEC
10580: ST_TO_ADDR
10581: LD_OWVAR 67
10585: PUSH
10586: FOR_TO
10587: IFFALSE 10629
// if i <= belkovTeam then
10589: LD_VAR 0 1
10593: PUSH
10594: LD_EXP 45
10598: LESSEQUAL
10599: IFFALSE 10627
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
10601: LD_EXP 45
10605: PUSH
10606: LD_VAR 0 1
10610: ARRAY
10611: PPUSH
10612: LD_INT 600
10614: PPUSH
10615: LD_INT 800
10617: PPUSH
10618: CALL_OW 12
10622: PPUSH
10623: CALL_OW 234
10627: GO 10586
10629: POP
10630: POP
// SetLives ( Belkov , 820 ) ;
10631: LD_EXP 36
10635: PPUSH
10636: LD_INT 820
10638: PPUSH
10639: CALL_OW 234
// InGameOff ;
10643: CALL_OW 9
// DialogueOn ;
10647: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
10651: LD_EXP 36
10655: PPUSH
10656: LD_STRING D14-Bel-1a
10658: PPUSH
10659: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
10663: LD_EXP 38
10667: PPUSH
10668: LD_STRING D14-Kur-1
10670: PPUSH
10671: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
10675: LD_EXP 36
10679: PPUSH
10680: LD_STRING D14-Bel-2
10682: PPUSH
10683: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
10687: LD_EXP 38
10691: PPUSH
10692: LD_STRING D14-Kur-2
10694: PPUSH
10695: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
10699: LD_EXP 34
10703: PPUSH
10704: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
10708: LD_EXP 34
10712: PPUSH
10713: LD_STRING D14a-Bur-1
10715: PPUSH
10716: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
10720: LD_EXP 40
10724: PPUSH
10725: LD_STRING D14a-Pla-1
10727: PPUSH
10728: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
10732: LD_EXP 34
10736: PPUSH
10737: LD_STRING D14a-Bur-2
10739: PPUSH
10740: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
10744: LD_EXP 40
10748: PPUSH
10749: LD_STRING D14a-Pla-2
10751: PPUSH
10752: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
10756: LD_EXP 34
10760: PPUSH
10761: LD_STRING D14a-Bur-3
10763: PPUSH
10764: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
10768: LD_EXP 40
10772: PPUSH
10773: LD_STRING D14a-Pla-3
10775: PPUSH
10776: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
10780: LD_EXP 34
10784: PPUSH
10785: LD_STRING D14a-Bur-4
10787: PPUSH
10788: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
10792: LD_EXP 40
10796: PPUSH
10797: LD_STRING D14a-Pla-4
10799: PPUSH
10800: CALL_OW 88
// DialogueOff ;
10804: CALL_OW 7
// belkovTrapped := true ;
10808: LD_ADDR_EXP 18
10812: PUSH
10813: LD_INT 1
10815: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
10816: LD_EXP 48
10820: PPUSH
10821: LD_INT 68
10823: PPUSH
10824: LD_INT 16
10826: PPUSH
10827: CALL_OW 111
// if belkovTank then
10831: LD_VAR 0 6
10835: IFFALSE 10874
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
10837: LD_EXP 48
10841: PUSH
10842: LD_INT 1
10844: ARRAY
10845: PPUSH
10846: LD_VAR 0 6
10850: PPUSH
10851: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
10855: LD_EXP 48
10859: PUSH
10860: LD_INT 1
10862: ARRAY
10863: PPUSH
10864: LD_INT 69
10866: PPUSH
10867: LD_INT 20
10869: PPUSH
10870: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
10874: LD_EXP 36
10878: PPUSH
10879: LD_INT 40
10881: PPUSH
10882: LD_INT 17
10884: PPUSH
10885: CALL_OW 111
// AddComHold ( Belkov ) ;
10889: LD_EXP 36
10893: PPUSH
10894: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
10898: LD_ADDR_VAR 0 3
10902: PUSH
10903: LD_INT 44
10905: PUSH
10906: LD_INT 18
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 42
10915: PUSH
10916: LD_INT 16
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 40
10925: PUSH
10926: LD_INT 15
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 44
10935: PUSH
10936: LD_INT 20
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 42
10945: PUSH
10946: LD_INT 20
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 42
10955: PUSH
10956: LD_INT 12
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 42
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: ST_TO_ADDR
// for i in belkovTeam do
10982: LD_ADDR_VAR 0 1
10986: PUSH
10987: LD_EXP 45
10991: PUSH
10992: FOR_IN
10993: IFFALSE 11059
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
10995: LD_VAR 0 1
10999: PPUSH
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 1
11007: ARRAY
11008: PUSH
11009: LD_INT 1
11011: ARRAY
11012: PPUSH
11013: LD_VAR 0 3
11017: PUSH
11018: LD_INT 1
11020: ARRAY
11021: PUSH
11022: LD_INT 2
11024: ARRAY
11025: PPUSH
11026: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11030: LD_ADDR_VAR 0 3
11034: PUSH
11035: LD_VAR 0 3
11039: PPUSH
11040: LD_INT 1
11042: PPUSH
11043: CALL_OW 3
11047: ST_TO_ADDR
// AddComCrawl ( i ) ;
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 197
// end ;
11057: GO 10992
11059: POP
11060: POP
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11061: LD_ADDR_VAR 0 7
11065: PUSH
11066: LD_INT 9450
11068: PUSH
11069: LD_INT 8400
11071: PUSH
11072: LD_INT 6650
11074: PUSH
11075: LD_INT 5250
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: PUSH
11084: LD_OWVAR 67
11088: ARRAY
11089: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11090: LD_INT 35
11092: PPUSH
11093: CALL_OW 67
// timer := timer - 0 0$1 ;
11097: LD_ADDR_VAR 0 7
11101: PUSH
11102: LD_VAR 0 7
11106: PUSH
11107: LD_INT 35
11109: MINUS
11110: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
11111: LD_INT 19
11113: PPUSH
11114: LD_INT 22
11116: PUSH
11117: LD_INT 3
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PPUSH
11124: CALL_OW 70
11128: IFFALSE 11138
// timer := 0 0$0 ;
11130: LD_ADDR_VAR 0 7
11134: PUSH
11135: LD_INT 0
11137: ST_TO_ADDR
// until timer <= 0 ;
11138: LD_VAR 0 7
11142: PUSH
11143: LD_INT 0
11145: LESSEQUAL
11146: IFFALSE 11090
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
11148: LD_EXP 48
11152: PPUSH
11153: LD_INT 50
11155: PUSH
11156: EMPTY
11157: LIST
11158: PPUSH
11159: CALL_OW 72
11163: NOT
11164: IFFALSE 11168
// exit ;
11166: GO 11649
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
11168: LD_ADDR_VAR 0 4
11172: PUSH
11173: LD_EXP 48
11177: PPUSH
11178: LD_INT 25
11180: PUSH
11181: LD_INT 1
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: PUSH
11188: LD_INT 3
11190: PUSH
11191: LD_INT 54
11193: PUSH
11194: EMPTY
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PPUSH
11205: CALL_OW 72
11209: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
11210: LD_ADDR_VAR 0 5
11214: PUSH
11215: LD_EXP 48
11219: PPUSH
11220: LD_INT 25
11222: PUSH
11223: LD_INT 4
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: LD_INT 54
11235: PUSH
11236: EMPTY
11237: LIST
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 72
11251: ST_TO_ADDR
// for i in sol do
11252: LD_ADDR_VAR 0 1
11256: PUSH
11257: LD_VAR 0 4
11261: PUSH
11262: FOR_IN
11263: IFFALSE 11279
// SetTag ( i , 0 ) ;
11265: LD_VAR 0 1
11269: PPUSH
11270: LD_INT 0
11272: PPUSH
11273: CALL_OW 109
11277: GO 11262
11279: POP
11280: POP
// ComMoveXY ( sci , 60 , 8 ) ;
11281: LD_VAR 0 5
11285: PPUSH
11286: LD_INT 60
11288: PPUSH
11289: LD_INT 8
11291: PPUSH
11292: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
11296: LD_INT 22
11298: PUSH
11299: LD_INT 1
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 69
11324: IFFALSE 11365
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
11326: LD_INT 22
11328: PUSH
11329: LD_INT 1
11331: PUSH
11332: EMPTY
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 21
11338: PUSH
11339: LD_INT 2
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: PPUSH
11350: CALL_OW 69
11354: PPUSH
11355: LD_INT 53
11357: PPUSH
11358: LD_INT 24
11360: PPUSH
11361: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
11365: LD_INT 18
11367: PPUSH
11368: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
11372: LD_ADDR_VAR 0 4
11376: PUSH
11377: LD_EXP 48
11381: PPUSH
11382: LD_INT 25
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 50
11394: PUSH
11395: EMPTY
11396: LIST
11397: PUSH
11398: LD_INT 3
11400: PUSH
11401: LD_INT 54
11403: PUSH
11404: EMPTY
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: PPUSH
11416: CALL_OW 72
11420: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
11421: LD_VAR 0 4
11425: PPUSH
11426: LD_INT 0
11428: PPUSH
11429: CALL 50451 0 2
11433: PUSH
11434: LD_VAR 0 4
11438: EQUAL
11439: IFFALSE 11478
// begin wait ( 0 0$3 ) ;
11441: LD_INT 105
11443: PPUSH
11444: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
11448: LD_VAR 0 4
11452: PPUSH
11453: LD_INT 41
11455: PPUSH
11456: LD_INT 18
11458: PPUSH
11459: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
11463: LD_VAR 0 5
11467: PPUSH
11468: LD_INT 60
11470: PPUSH
11471: LD_INT 8
11473: PPUSH
11474: CALL_OW 111
// end ; for i in sol do
11478: LD_ADDR_VAR 0 1
11482: PUSH
11483: LD_VAR 0 4
11487: PUSH
11488: FOR_IN
11489: IFFALSE 11564
// if GetLives ( i ) < 800 then
11491: LD_VAR 0 1
11495: PPUSH
11496: CALL_OW 256
11500: PUSH
11501: LD_INT 800
11503: LESS
11504: IFFALSE 11535
// begin SetTag ( i , 1 ) ;
11506: LD_VAR 0 1
11510: PPUSH
11511: LD_INT 1
11513: PPUSH
11514: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
11518: LD_VAR 0 1
11522: PPUSH
11523: LD_INT 60
11525: PPUSH
11526: LD_INT 8
11528: PPUSH
11529: CALL_OW 111
// end else
11533: GO 11562
// if GetLives ( i ) = 1000 then
11535: LD_VAR 0 1
11539: PPUSH
11540: CALL_OW 256
11544: PUSH
11545: LD_INT 1000
11547: EQUAL
11548: IFFALSE 11562
// SetTag ( i , 0 ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_INT 0
11557: PPUSH
11558: CALL_OW 109
11562: GO 11488
11564: POP
11565: POP
// until belkovDied or not sol ;
11566: LD_EXP 19
11570: PUSH
11571: LD_VAR 0 4
11575: NOT
11576: OR
11577: IFFALSE 11365
// if not sol then
11579: LD_VAR 0 4
11583: NOT
11584: IFFALSE 11588
// exit ;
11586: GO 11649
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
11588: LD_VAR 0 4
11592: PUSH
11593: LD_VAR 0 5
11597: ADD
11598: PPUSH
11599: LD_INT 56
11601: PPUSH
11602: LD_INT 25
11604: PPUSH
11605: CALL_OW 111
// wait ( 0 0$30 ) ;
11609: LD_INT 1050
11611: PPUSH
11612: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
11616: LD_EXP 48
11620: PPUSH
11621: LD_INT 66
11623: PPUSH
11624: LD_INT 96
11626: PPUSH
11627: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
11631: LD_VAR 0 5
11635: PPUSH
11636: LD_VAR 0 4
11640: PUSH
11641: LD_INT 1
11643: ARRAY
11644: PPUSH
11645: CALL_OW 112
// end ;
11649: PPOPN 7
11651: END
// every 0 0$2 trigger not initiative and belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
11652: LD_EXP 31
11656: NOT
11657: PUSH
11658: LD_EXP 18
11662: AND
11663: PUSH
11664: LD_EXP 19
11668: NOT
11669: AND
11670: PUSH
11671: LD_INT 9
11673: PPUSH
11674: LD_INT 22
11676: PUSH
11677: LD_INT 3
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 70
11688: AND
11689: IFFALSE 12009
11691: GO 11693
11693: DISABLE
// begin case Query ( QAttackAm ) of 1 :
11694: LD_STRING QAttackAm
11696: PPUSH
11697: CALL_OW 97
11701: PUSH
11702: LD_INT 1
11704: DOUBLE
11705: EQUAL
11706: IFTRUE 11710
11708: GO 11777
11710: POP
// begin initiative := true ;
11711: LD_ADDR_EXP 31
11715: PUSH
11716: LD_INT 1
11718: ST_TO_ADDR
// DialogueOn ;
11719: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
11723: LD_EXP 34
11727: PPUSH
11728: LD_STRING D17-Bur-1
11730: PPUSH
11731: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
11735: LD_EXP 40
11739: PPUSH
11740: LD_STRING D17-Pla-1
11742: PPUSH
11743: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
11747: LD_EXP 34
11751: PPUSH
11752: LD_STRING D17-Bur-2
11754: PPUSH
11755: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
11759: LD_EXP 40
11763: PPUSH
11764: LD_STRING D17-Pla-2
11766: PPUSH
11767: CALL_OW 94
// DialogueOff ;
11771: CALL_OW 7
// end ; 2 :
11775: GO 11939
11777: LD_INT 2
11779: DOUBLE
11780: EQUAL
11781: IFTRUE 11785
11783: GO 11877
11785: POP
// begin initiative := true ;
11786: LD_ADDR_EXP 31
11790: PUSH
11791: LD_INT 1
11793: ST_TO_ADDR
// DialogueOn ;
11794: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
11798: LD_EXP 34
11802: PPUSH
11803: LD_STRING D18-Bur-1
11805: PPUSH
11806: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
11810: LD_EXP 40
11814: PPUSH
11815: LD_STRING D18-Pla-1
11817: PPUSH
11818: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
11822: LD_EXP 34
11826: PPUSH
11827: LD_STRING D18-Bur-2
11829: PPUSH
11830: CALL_OW 88
// if not reinforcementsGained then
11834: LD_EXP 25
11838: NOT
11839: IFFALSE 11859
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
11841: LD_EXP 40
11845: PPUSH
11846: LD_STRING D18-Pla-2
11848: PPUSH
11849: CALL_OW 94
// SendReinforcements ;
11853: CALL 3003 0 0
// end else
11857: GO 11871
// SayRadio ( Platonov , D22-Pla-1b ) ;
11859: LD_EXP 40
11863: PPUSH
11864: LD_STRING D22-Pla-1b
11866: PPUSH
11867: CALL_OW 94
// DialogueOff ;
11871: CALL_OW 7
// end ; 3 :
11875: GO 11939
11877: LD_INT 3
11879: DOUBLE
11880: EQUAL
11881: IFTRUE 11885
11883: GO 11938
11885: POP
// begin if IsOk ( Gnyevko ) then
11886: LD_EXP 35
11890: PPUSH
11891: CALL_OW 302
11895: IFFALSE 11911
// Say ( Gnyevko , D19A-Gny-1 ) else
11897: LD_EXP 35
11901: PPUSH
11902: LD_STRING D19A-Gny-1
11904: PPUSH
11905: CALL_OW 88
11909: GO 11934
// if IsOk ( Kovalyuk ) then
11911: LD_EXP 39
11915: PPUSH
11916: CALL_OW 302
11920: IFFALSE 11934
// Say ( Kovalyuk , D19A-Kov-1 ) ;
11922: LD_EXP 39
11926: PPUSH
11927: LD_STRING D19A-Kov-1
11929: PPUSH
11930: CALL_OW 88
// exit ;
11934: GO 12009
// end ; end ;
11936: GO 11939
11938: POP
// if IsOk ( Gnyevko ) then
11939: LD_EXP 35
11943: PPUSH
11944: CALL_OW 302
11948: IFFALSE 11974
// begin Say ( Gnyevko , D19-Gny-1 ) ;
11950: LD_EXP 35
11954: PPUSH
11955: LD_STRING D19-Gny-1
11957: PPUSH
11958: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
11962: LD_EXP 34
11966: PPUSH
11967: LD_STRING D19-Bur-1
11969: PPUSH
11970: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
11974: LD_EXP 39
11978: PPUSH
11979: CALL_OW 302
11983: IFFALSE 12009
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
11985: LD_EXP 39
11989: PPUSH
11990: LD_STRING D19-Kov-1
11992: PPUSH
11993: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
11997: LD_EXP 34
12001: PPUSH
12002: LD_STRING D19-Bur-2
12004: PPUSH
12005: CALL_OW 88
// end ; end ;
12009: END
// every 0 0$2 trigger not initiative and belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12010: LD_EXP 31
12014: NOT
12015: PUSH
12016: LD_EXP 18
12020: AND
12021: PUSH
12022: LD_EXP 19
12026: NOT
12027: AND
12028: PUSH
12029: LD_INT 16
12031: PPUSH
12032: LD_INT 22
12034: PUSH
12035: LD_INT 3
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PPUSH
12042: CALL_OW 70
12046: AND
12047: IFFALSE 12275
12049: GO 12051
12051: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12052: LD_STRING QAttackBw
12054: PPUSH
12055: CALL_OW 97
12059: PUSH
12060: LD_INT 1
12062: DOUBLE
12063: EQUAL
12064: IFTRUE 12068
12066: GO 12111
12068: POP
// begin initiative := true ;
12069: LD_ADDR_EXP 31
12073: PUSH
12074: LD_INT 1
12076: ST_TO_ADDR
// DialogueOn ;
12077: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12081: LD_EXP 34
12085: PPUSH
12086: LD_STRING D21-Bur-1
12088: PPUSH
12089: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12093: LD_EXP 40
12097: PPUSH
12098: LD_STRING D21-Pla-1
12100: PPUSH
12101: CALL_OW 94
// DialogueOff ;
12105: CALL_OW 7
// end ; 2 :
12109: GO 12226
12111: LD_INT 2
12113: DOUBLE
12114: EQUAL
12115: IFTRUE 12119
12117: GO 12214
12119: POP
// begin initiative := true ;
12120: LD_ADDR_EXP 31
12124: PUSH
12125: LD_INT 1
12127: ST_TO_ADDR
// DialogueOn ;
12128: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
12132: LD_EXP 34
12136: PPUSH
12137: LD_STRING D22-Bur-1
12139: PPUSH
12140: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
12144: LD_EXP 25
12148: NOT
12149: PUSH
12150: LD_EXP 22
12154: AND
12155: IFFALSE 12175
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
12157: LD_EXP 40
12161: PPUSH
12162: LD_STRING D22-Pla-1
12164: PPUSH
12165: CALL_OW 94
// SendReinforcements ;
12169: CALL 3003 0 0
// end else
12173: GO 12208
// if not westOutpostDestroyed then
12175: LD_EXP 22
12179: NOT
12180: IFFALSE 12196
// SayRadio ( Platonov , D22-Pla-1a ) else
12182: LD_EXP 40
12186: PPUSH
12187: LD_STRING D22-Pla-1a
12189: PPUSH
12190: CALL_OW 94
12194: GO 12208
// SayRadio ( Platonov , D22-Pla-1b ) ;
12196: LD_EXP 40
12200: PPUSH
12201: LD_STRING D22-Pla-1b
12203: PPUSH
12204: CALL_OW 94
// DialogueOff ;
12208: CALL_OW 7
// end ; 3 :
12212: GO 12226
12214: LD_INT 3
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12225
12222: POP
// begin end ; end ;
12223: GO 12226
12225: POP
// ChangeMissionObjectives ( M9 ) ;
12226: LD_STRING M9
12228: PPUSH
12229: CALL_OW 337
// wait ( 0 0$1 ) ;
12233: LD_INT 35
12235: PPUSH
12236: CALL_OW 67
// if IsOk ( Gnyevko ) then
12240: LD_EXP 35
12244: PPUSH
12245: CALL_OW 302
12249: IFFALSE 12275
// begin Say ( Gnyevko , D23-Gny-1 ) ;
12251: LD_EXP 35
12255: PPUSH
12256: LD_STRING D23-Gny-1
12258: PPUSH
12259: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
12263: LD_EXP 34
12267: PPUSH
12268: LD_STRING D23-Bur-1
12270: PPUSH
12271: CALL_OW 88
// end ; end ;
12275: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
12276: LD_EXP 18
12280: PUSH
12281: LD_EXP 19
12285: AND
12286: PUSH
12287: LD_EXP 28
12291: NOT
12292: AND
12293: PUSH
12294: LD_EXP 45
12298: PPUSH
12299: LD_INT 91
12301: PUSH
12302: LD_EXP 34
12306: PUSH
12307: LD_INT 8
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 72
12319: AND
12320: IFFALSE 12364
12322: GO 12324
12324: DISABLE
12325: LD_INT 0
12327: PPUSH
// begin for i in belkovTeam do
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_EXP 45
12337: PUSH
12338: FOR_IN
12339: IFFALSE 12355
// SetSide ( i , 3 ) ;
12341: LD_VAR 0 1
12345: PPUSH
12346: LD_INT 3
12348: PPUSH
12349: CALL_OW 235
12353: GO 12338
12355: POP
12356: POP
// ChangeMissionObjectives ( M9a ) ;
12357: LD_STRING M9a
12359: PPUSH
12360: CALL_OW 337
// end ;
12364: PPOPN 1
12366: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
12367: LD_EXP 34
12371: PPUSH
12372: LD_EXP 36
12376: PPUSH
12377: CALL_OW 296
12381: PUSH
12382: LD_INT 6
12384: LESS
12385: PUSH
12386: LD_EXP 18
12390: AND
12391: PUSH
12392: LD_EXP 36
12396: PPUSH
12397: CALL_OW 302
12401: AND
12402: PUSH
12403: LD_INT 3
12405: PPUSH
12406: CALL_OW 463
12410: NOT
12411: AND
12412: IFFALSE 12727
12414: GO 12416
12416: DISABLE
12417: LD_INT 0
12419: PPUSH
12420: PPUSH
// begin InGameOn ;
12421: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
12425: LD_EXP 34
12429: PPUSH
12430: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
12434: LD_EXP 34
12438: PPUSH
12439: LD_INT 37
12441: PPUSH
12442: LD_INT 17
12444: PPUSH
12445: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
12449: LD_EXP 34
12453: PPUSH
12454: LD_EXP 36
12458: PPUSH
12459: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
12463: LD_EXP 36
12467: PPUSH
12468: LD_EXP 34
12472: PPUSH
12473: CALL_OW 119
// p := 0 ;
12477: LD_ADDR_VAR 0 2
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12485: LD_INT 35
12487: PPUSH
12488: CALL_OW 67
// p := p + 1 ;
12492: LD_ADDR_VAR 0 2
12496: PUSH
12497: LD_VAR 0 2
12501: PUSH
12502: LD_INT 1
12504: PLUS
12505: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
12506: LD_EXP 34
12510: PPUSH
12511: LD_EXP 36
12515: PPUSH
12516: CALL_OW 296
12520: PUSH
12521: LD_INT 4
12523: LESS
12524: PUSH
12525: LD_VAR 0 2
12529: PUSH
12530: LD_INT 6
12532: GREATER
12533: OR
12534: IFFALSE 12485
// ComTurnUnit ( Burlak , Belkov ) ;
12536: LD_EXP 34
12540: PPUSH
12541: LD_EXP 36
12545: PPUSH
12546: CALL_OW 119
// DialogueOn ;
12550: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
12554: LD_EXP 36
12558: PPUSH
12559: LD_STRING D24-Bel-1
12561: PPUSH
12562: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
12566: LD_EXP 34
12570: PPUSH
12571: LD_STRING D24-Bur-1
12573: PPUSH
12574: CALL_OW 88
// if belkovBrother then
12578: LD_EXP 32
12582: IFFALSE 12596
// Say ( Burlak , D24-Bur-1a ) ;
12584: LD_EXP 34
12588: PPUSH
12589: LD_STRING D24-Bur-1a
12591: PPUSH
12592: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
12596: LD_EXP 36
12600: PPUSH
12601: LD_STRING D24-Bel-2
12603: PPUSH
12604: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
12608: LD_EXP 34
12612: PPUSH
12613: LD_STRING D24-Bur-2
12615: PPUSH
12616: CALL_OW 88
// if vehCaptured then
12620: LD_EXP 16
12624: IFFALSE 12638
// Say ( Burlak , D24-Bur-2a ) ;
12626: LD_EXP 34
12630: PPUSH
12631: LD_STRING D24-Bur-2a
12633: PPUSH
12634: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
12638: LD_EXP 40
12642: PPUSH
12643: LD_STRING D24-Pla-2
12645: PPUSH
12646: CALL_OW 94
// if not westOutpostDestroyed then
12650: LD_EXP 22
12654: NOT
12655: IFFALSE 12669
// SayRadio ( Platonov , D24-Pla-2a ) ;
12657: LD_EXP 40
12661: PPUSH
12662: LD_STRING D24-Pla-2a
12664: PPUSH
12665: CALL_OW 94
// DialogueOff ;
12669: CALL_OW 7
// InGameOff ;
12673: CALL_OW 9
// belkovSaved := true ;
12677: LD_ADDR_EXP 28
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// for i in belkovTeam union Belkov do
12685: LD_ADDR_VAR 0 1
12689: PUSH
12690: LD_EXP 45
12694: PUSH
12695: LD_EXP 36
12699: UNION
12700: PUSH
12701: FOR_IN
12702: IFFALSE 12718
// SetSide ( i , 3 ) ;
12704: LD_VAR 0 1
12708: PPUSH
12709: LD_INT 3
12711: PPUSH
12712: CALL_OW 235
12716: GO 12701
12718: POP
12719: POP
// ChangeMissionObjectives ( M9a ) ;
12720: LD_STRING M9a
12722: PPUSH
12723: CALL_OW 337
// end ;
12727: PPOPN 2
12729: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
12730: LD_INT 3
12732: PPUSH
12733: LD_INT 22
12735: PUSH
12736: LD_INT 1
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PUSH
12743: LD_INT 95
12745: PUSH
12746: LD_INT 8
12748: PUSH
12749: EMPTY
12750: LIST
12751: LIST
12752: PUSH
12753: EMPTY
12754: LIST
12755: LIST
12756: PPUSH
12757: CALL_OW 69
12761: PPUSH
12762: CALL 56099 0 2
12766: IFFALSE 12951
12768: GO 12770
12770: DISABLE
// begin DialogueOn ;
12771: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
12775: LD_INT 49
12777: PPUSH
12778: LD_INT 57
12780: PPUSH
12781: LD_INT 3
12783: PPUSH
12784: LD_INT 12
12786: NEG
12787: PPUSH
12788: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
12792: LD_INT 49
12794: PPUSH
12795: LD_INT 57
12797: PPUSH
12798: LD_INT 3
12800: PPUSH
12801: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
12805: LD_INT 49
12807: PPUSH
12808: LD_INT 57
12810: PPUSH
12811: CALL_OW 84
// if not eastOutpostDiscovered then
12815: LD_EXP 21
12819: NOT
12820: IFFALSE 12860
// begin Say ( Burlak , D15-Bur-1 ) ;
12822: LD_EXP 34
12826: PPUSH
12827: LD_STRING D15-Bur-1
12829: PPUSH
12830: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING D15-Gny-1
12841: PPUSH
12842: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
12846: LD_EXP 39
12850: PPUSH
12851: LD_STRING D15-Kov-1
12853: PPUSH
12854: CALL_OW 88
// end else
12858: GO 12896
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
12860: LD_EXP 39
12864: PPUSH
12865: LD_STRING D16-Kov-1
12867: PPUSH
12868: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
12872: LD_EXP 34
12876: PPUSH
12877: LD_STRING D16-Bur-1
12879: PPUSH
12880: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
12884: LD_EXP 35
12888: PPUSH
12889: LD_STRING D16-Gny-1
12891: PPUSH
12892: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
12896: LD_EXP 34
12900: PPUSH
12901: LD_STRING D15-Bur-2
12903: PPUSH
12904: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
12908: LD_EXP 39
12912: PPUSH
12913: LD_STRING D15-Kov-2
12915: PPUSH
12916: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
12920: LD_EXP 34
12924: PPUSH
12925: LD_STRING D15-Bur-3
12927: PPUSH
12928: CALL_OW 88
// DialogueOff ;
12932: CALL_OW 7
// westOutpostDiscovered := true ;
12936: LD_ADDR_EXP 20
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
12944: LD_STRING M7
12946: PPUSH
12947: CALL_OW 337
// end ;
12951: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
12952: LD_INT 3
12954: PPUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 1
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 95
12967: PUSH
12968: LD_INT 15
12970: PUSH
12971: EMPTY
12972: LIST
12973: LIST
12974: PUSH
12975: EMPTY
12976: LIST
12977: LIST
12978: PPUSH
12979: CALL_OW 69
12983: PPUSH
12984: CALL 56099 0 2
12988: IFFALSE 13130
12990: GO 12992
12992: DISABLE
// begin DialogueOn ;
12993: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
12997: LD_INT 95
12999: PPUSH
13000: LD_INT 65
13002: PPUSH
13003: LD_INT 3
13005: PPUSH
13006: LD_INT 12
13008: NEG
13009: PPUSH
13010: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13014: LD_INT 95
13016: PPUSH
13017: LD_INT 65
13019: PPUSH
13020: LD_INT 3
13022: PPUSH
13023: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13027: LD_INT 95
13029: PPUSH
13030: LD_INT 65
13032: PPUSH
13033: CALL_OW 84
// if not westOutpostDiscovered then
13037: LD_EXP 20
13041: NOT
13042: IFFALSE 13082
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13044: LD_EXP 39
13048: PPUSH
13049: LD_STRING D16-Kov-1
13051: PPUSH
13052: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13056: LD_EXP 34
13060: PPUSH
13061: LD_STRING D16-Bur-1
13063: PPUSH
13064: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13068: LD_EXP 35
13072: PPUSH
13073: LD_STRING D16-Gny-1
13075: PPUSH
13076: CALL_OW 88
// end else
13080: GO 13118
// begin Say ( Burlak , D15-Bur-1 ) ;
13082: LD_EXP 34
13086: PPUSH
13087: LD_STRING D15-Bur-1
13089: PPUSH
13090: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13094: LD_EXP 35
13098: PPUSH
13099: LD_STRING D15-Gny-1
13101: PPUSH
13102: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13106: LD_EXP 39
13110: PPUSH
13111: LD_STRING D15-Kov-1
13113: PPUSH
13114: CALL_OW 88
// end ; DialogueOff ;
13118: CALL_OW 7
// eastOutpostDiscovered := true ;
13122: LD_ADDR_EXP 21
13126: PUSH
13127: LD_INT 1
13129: ST_TO_ADDR
// end ;
13130: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
13131: LD_INT 8
13133: PPUSH
13134: LD_INT 22
13136: PUSH
13137: LD_INT 1
13139: PUSH
13140: EMPTY
13141: LIST
13142: LIST
13143: PUSH
13144: LD_INT 50
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PPUSH
13154: CALL_OW 70
13158: PUSH
13159: LD_INT 0
13161: EQUAL
13162: PUSH
13163: LD_EXP 20
13167: AND
13168: IFFALSE 13212
13170: GO 13172
13172: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
13173: LD_EXP 34
13177: PPUSH
13178: LD_STRING D20-Bur-1
13180: PPUSH
13181: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13185: LD_EXP 40
13189: PPUSH
13190: LD_STRING D20-Pla-1
13192: PPUSH
13193: CALL_OW 94
// westOutpostDestroyed := true ;
13197: LD_ADDR_EXP 22
13201: PUSH
13202: LD_INT 1
13204: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
13205: LD_STRING M8
13207: PPUSH
13208: CALL_OW 337
// end ;
13212: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
13213: LD_INT 15
13215: PPUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 1
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 50
13228: PUSH
13229: EMPTY
13230: LIST
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PPUSH
13236: CALL_OW 70
13240: PUSH
13241: LD_INT 0
13243: EQUAL
13244: PUSH
13245: LD_EXP 21
13249: AND
13250: IFFALSE 13380
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
13258: LD_EXP 34
13262: PPUSH
13263: LD_STRING D20-Bur-1
13265: PPUSH
13266: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
13270: LD_EXP 40
13274: PPUSH
13275: LD_STRING D20-Pla-1
13277: PPUSH
13278: CALL_OW 94
// eastOutpostDestroyed := true ;
13282: LD_ADDR_EXP 23
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// wait ( 0 0$1 ) ;
13290: LD_INT 35
13292: PPUSH
13293: CALL_OW 67
// stop_talking := true ;
13297: LD_ADDR_OWVAR 56
13301: PUSH
13302: LD_INT 1
13304: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
13305: LD_ADDR_VAR 0 1
13309: PUSH
13310: LD_INT 22
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: PUSH
13320: LD_INT 23
13322: PUSH
13323: LD_INT 3
13325: PUSH
13326: EMPTY
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 21
13332: PUSH
13333: LD_INT 1
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: LIST
13344: PPUSH
13345: CALL_OW 69
13349: PUSH
13350: FOR_IN
13351: IFFALSE 13370
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
13353: LD_VAR 0 1
13357: PPUSH
13358: LD_INT 1
13360: PPUSH
13361: LD_INT 1500
13363: PPUSH
13364: CALL_OW 591
13368: GO 13350
13370: POP
13371: POP
// stop_talking := false ;
13372: LD_ADDR_OWVAR 56
13376: PUSH
13377: LD_INT 0
13379: ST_TO_ADDR
// end ;
13380: PPOPN 1
13382: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
13383: LD_INT 19
13385: PPUSH
13386: LD_INT 22
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 21
13398: PUSH
13399: LD_INT 2
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PPUSH
13410: CALL_OW 70
13414: IFFALSE 13522
13416: GO 13418
13418: DISABLE
// begin DialogueOn ;
13419: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
13423: LD_INT 19
13425: PPUSH
13426: LD_INT 22
13428: PUSH
13429: LD_INT 3
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: PUSH
13436: LD_INT 21
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PPUSH
13450: CALL_OW 70
13454: PPUSH
13455: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
13459: LD_EXP 34
13463: PPUSH
13464: LD_STRING D26-Bur-1
13466: PPUSH
13467: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
13471: LD_EXP 39
13475: PPUSH
13476: LD_STRING D26-Kov-1
13478: PPUSH
13479: CALL_OW 88
// if IsOk ( Gnyevko ) then
13483: LD_EXP 35
13487: PPUSH
13488: CALL_OW 302
13492: IFFALSE 13518
// begin Say ( Gnyevko , D26-Gny-1 ) ;
13494: LD_EXP 35
13498: PPUSH
13499: LD_STRING D26-Gny-1
13501: PPUSH
13502: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
13506: LD_EXP 34
13510: PPUSH
13511: LD_STRING D26-Bur-2
13513: PPUSH
13514: CALL_OW 88
// end ; DialogueOff ;
13518: CALL_OW 7
// end ;
13522: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
13523: LD_EXP 21
13527: PUSH
13528: LD_EXP 23
13532: NOT
13533: AND
13534: PUSH
13535: LD_INT 17
13537: PPUSH
13538: LD_INT 22
13540: PUSH
13541: LD_INT 3
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: LD_INT 24
13553: PUSH
13554: LD_INT 1000
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: PPUSH
13569: CALL_OW 70
13573: PUSH
13574: LD_INT 1
13576: GREATER
13577: AND
13578: IFFALSE 13641
13580: GO 13582
13582: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
13583: LD_EXP 35
13587: PPUSH
13588: LD_STRING D16A-Gny-1
13590: PPUSH
13591: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13595: LD_EXP 39
13599: PPUSH
13600: LD_STRING D16A-Kov-1
13602: PPUSH
13603: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
13607: LD_EXP 35
13611: PPUSH
13612: CALL_OW 302
13616: PUSH
13617: LD_EXP 39
13621: PPUSH
13622: CALL_OW 302
13626: OR
13627: IFFALSE 13641
// Say ( Burlak , D16A-Bur-1 ) ;
13629: LD_EXP 34
13633: PPUSH
13634: LD_STRING D16A-Bur-1
13636: PPUSH
13637: CALL_OW 88
// end ;
13641: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
13642: LD_INT 3
13644: PPUSH
13645: LD_INT 9
13647: PPUSH
13648: CALL_OW 294
13652: IFFALSE 13665
13654: GO 13656
13656: DISABLE
// begin westOutpostWeakPointSpotted := true ;
13657: LD_ADDR_EXP 24
13661: PUSH
13662: LD_INT 1
13664: ST_TO_ADDR
// end ;
13665: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
13666: LD_INT 3
13668: PPUSH
13669: LD_INT 10
13671: PPUSH
13672: CALL_OW 294
13676: IFFALSE 13696
13678: GO 13680
13680: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
13681: LD_ADDR_EXP 27
13685: PUSH
13686: LD_EXP 27
13690: PPUSH
13691: CALL 54286 0 1
13695: ST_TO_ADDR
13696: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
13697: LD_INT 3
13699: PPUSH
13700: LD_INT 11
13702: PPUSH
13703: CALL_OW 294
13707: IFFALSE 13727
13709: GO 13711
13711: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
13712: LD_ADDR_EXP 27
13716: PUSH
13717: LD_EXP 27
13721: PPUSH
13722: CALL 54286 0 1
13726: ST_TO_ADDR
13727: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
13728: LD_INT 3
13730: PPUSH
13731: LD_INT 12
13733: PPUSH
13734: CALL_OW 294
13738: IFFALSE 13758
13740: GO 13742
13742: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
13743: LD_ADDR_EXP 27
13747: PUSH
13748: LD_EXP 27
13752: PPUSH
13753: CALL 54286 0 1
13757: ST_TO_ADDR
13758: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
13759: LD_INT 3
13761: PPUSH
13762: LD_INT 13
13764: PPUSH
13765: CALL_OW 294
13769: IFFALSE 13789
13771: GO 13773
13773: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
13774: LD_ADDR_EXP 27
13778: PUSH
13779: LD_EXP 27
13783: PPUSH
13784: CALL 54286 0 1
13788: ST_TO_ADDR
13789: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
13790: LD_INT 3
13792: PPUSH
13793: LD_INT 14
13795: PPUSH
13796: CALL_OW 294
13800: IFFALSE 13820
13802: GO 13804
13804: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
13805: LD_ADDR_EXP 27
13809: PUSH
13810: LD_EXP 27
13814: PPUSH
13815: CALL 54286 0 1
13819: ST_TO_ADDR
13820: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
13821: LD_EXP 27
13825: PUSH
13826: LD_INT 5
13828: GREATEREQUAL
13829: PUSH
13830: LD_EXP 14
13834: AND
13835: IFFALSE 13855
13837: GO 13839
13839: DISABLE
// begin allMapPointsSpotted := true ;
13840: LD_ADDR_EXP 26
13844: PUSH
13845: LD_INT 1
13847: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
13848: LD_STRING M10
13850: PPUSH
13851: CALL_OW 337
// end ;
13855: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
13856: LD_EXP 26
13860: PUSH
13861: LD_EXP 22
13865: AND
13866: IFFALSE 13878
13868: GO 13870
13870: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
13871: LD_STRING M10a
13873: PPUSH
13874: CALL_OW 337
// end ;
13878: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
13879: LD_EXP 14
13883: IFFALSE 14537
13885: GO 13887
13887: DISABLE
13888: LD_INT 0
13890: PPUSH
13891: PPUSH
13892: PPUSH
13893: PPUSH
13894: PPUSH
// begin wasOutsideBeria := false ;
13895: LD_ADDR_VAR 0 3
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// wantToTalk := false ;
13903: LD_ADDR_VAR 0 2
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// westOutpostReported := false ;
13911: LD_ADDR_VAR 0 4
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// eastOutpostReported := false ;
13919: LD_ADDR_VAR 0 5
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// timer := 0 0$0 ;
13927: LD_ADDR_VAR 0 1
13931: PUSH
13932: LD_INT 0
13934: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
13935: LD_INT 70
13937: PPUSH
13938: CALL_OW 67
// timer := timer + 0 0$2 ;
13942: LD_ADDR_VAR 0 1
13946: PUSH
13947: LD_VAR 0 1
13951: PUSH
13952: LD_INT 70
13954: PLUS
13955: ST_TO_ADDR
// if timer >= 0 0$30 then
13956: LD_VAR 0 1
13960: PUSH
13961: LD_INT 1050
13963: GREATEREQUAL
13964: IFFALSE 13974
// wantToTalk := true ;
13966: LD_ADDR_VAR 0 2
13970: PUSH
13971: LD_INT 1
13973: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 30 ] ] ] ) then
13974: LD_INT 22
13976: PUSH
13977: LD_INT 3
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: LD_INT 91
13989: PUSH
13990: LD_INT 106
13992: PUSH
13993: LD_INT 30
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 69
14013: IFFALSE 14023
// wasOutsideBeria := true ;
14015: LD_ADDR_VAR 0 3
14019: PUSH
14020: LD_INT 1
14022: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14023: LD_VAR 0 2
14027: PUSH
14028: LD_VAR 0 3
14032: AND
14033: PUSH
14034: LD_EXP 34
14038: PPUSH
14039: LD_EXP 40
14043: PPUSH
14044: CALL_OW 296
14048: PUSH
14049: LD_INT 8
14051: LESS
14052: PUSH
14053: LD_EXP 34
14057: PPUSH
14058: CALL_OW 310
14062: PPUSH
14063: LD_EXP 40
14067: PPUSH
14068: CALL_OW 296
14072: PUSH
14073: LD_INT 8
14075: LESS
14076: OR
14077: AND
14078: IFFALSE 14426
// begin timer := 0 0$0 ;
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: LD_INT 0
14087: ST_TO_ADDR
// wantToTalk := false ;
14088: LD_ADDR_VAR 0 2
14092: PUSH
14093: LD_INT 0
14095: ST_TO_ADDR
// wasOutsideBeria := false ;
14096: LD_ADDR_VAR 0 3
14100: PUSH
14101: LD_INT 0
14103: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14104: LD_EXP 40
14108: PPUSH
14109: CALL_OW 87
// DialogueOn ;
14113: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14117: LD_EXP 40
14121: PPUSH
14122: LD_STRING D25-Pla-1
14124: PPUSH
14125: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14129: LD_VAR 0 4
14133: NOT
14134: PUSH
14135: LD_VAR 0 5
14139: NOT
14140: AND
14141: PUSH
14142: LD_EXP 20
14146: AND
14147: PUSH
14148: LD_EXP 21
14152: AND
14153: IFFALSE 14233
// begin westOutpostReported := true ;
14155: LD_ADDR_VAR 0 4
14159: PUSH
14160: LD_INT 1
14162: ST_TO_ADDR
// eastOutpostReported := true ;
14163: LD_ADDR_VAR 0 5
14167: PUSH
14168: LD_INT 1
14170: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
14171: LD_EXP 34
14175: PPUSH
14176: LD_STRING D25-Bur-1
14178: PPUSH
14179: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14183: LD_EXP 24
14187: PUSH
14188: LD_EXP 22
14192: NOT
14193: AND
14194: IFFALSE 14231
// begin Say ( Burlak , D25b-Bur-1 ) ;
14196: LD_EXP 34
14200: PPUSH
14201: LD_STRING D25b-Bur-1
14203: PPUSH
14204: CALL_OW 88
// if not reinforcementsGained then
14208: LD_EXP 25
14212: NOT
14213: IFFALSE 14231
// begin Say ( Platonov , D25b-Pla-1 ) ;
14215: LD_EXP 40
14219: PPUSH
14220: LD_STRING D25b-Pla-1
14222: PPUSH
14223: CALL_OW 88
// SendReinforcements ( ) ;
14227: CALL 3003 0 0
// end ; end ; end else
14231: GO 14422
// if not westOutpostReported and westOutpostDiscovered then
14233: LD_VAR 0 4
14237: NOT
14238: PUSH
14239: LD_EXP 20
14243: AND
14244: IFFALSE 14316
// begin westOutpostReported := true ;
14246: LD_ADDR_VAR 0 4
14250: PUSH
14251: LD_INT 1
14253: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
14254: LD_EXP 34
14258: PPUSH
14259: LD_STRING D25a-Bur-1b
14261: PPUSH
14262: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
14266: LD_EXP 24
14270: PUSH
14271: LD_EXP 22
14275: NOT
14276: AND
14277: IFFALSE 14314
// begin Say ( Burlak , D25b-Bur-1 ) ;
14279: LD_EXP 34
14283: PPUSH
14284: LD_STRING D25b-Bur-1
14286: PPUSH
14287: CALL_OW 88
// if not reinforcementsGained then
14291: LD_EXP 25
14295: NOT
14296: IFFALSE 14314
// begin Say ( Platonov , D25b-Pla-1 ) ;
14298: LD_EXP 40
14302: PPUSH
14303: LD_STRING D25b-Pla-1
14305: PPUSH
14306: CALL_OW 88
// SendReinforcements ( ) ;
14310: CALL 3003 0 0
// end ; end ; end else
14314: GO 14422
// if not eastOutpostReported and eastOutpostDiscovered then
14316: LD_VAR 0 5
14320: NOT
14321: PUSH
14322: LD_EXP 21
14326: AND
14327: IFFALSE 14351
// begin eastOutpostReported := true ;
14329: LD_ADDR_VAR 0 5
14333: PUSH
14334: LD_INT 1
14336: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
14337: LD_EXP 34
14341: PPUSH
14342: LD_STRING D25a-Bur-1a
14344: PPUSH
14345: CALL_OW 88
// end else
14349: GO 14422
// if not westOutpostDiscovered or not eastOutpostDiscovered then
14351: LD_EXP 20
14355: NOT
14356: PUSH
14357: LD_EXP 21
14361: NOT
14362: OR
14363: IFFALSE 14391
// begin Say ( Burlak , D25a-Bur-1 ) ;
14365: LD_EXP 34
14369: PPUSH
14370: LD_STRING D25a-Bur-1
14372: PPUSH
14373: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
14377: LD_EXP 40
14381: PPUSH
14382: LD_STRING D25c-Pla-1
14384: PPUSH
14385: CALL_OW 88
// end else
14389: GO 14422
// if not allMapPointsSpotted then
14391: LD_EXP 26
14395: NOT
14396: IFFALSE 14422
// begin Say ( Burlak , D25a-Bur-1 ) ;
14398: LD_EXP 34
14402: PPUSH
14403: LD_STRING D25a-Bur-1
14405: PPUSH
14406: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
14410: LD_EXP 40
14414: PPUSH
14415: LD_STRING D25c-Pla-1a
14417: PPUSH
14418: CALL_OW 88
// end ; DialogueOff ;
14422: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
14426: LD_EXP 26
14430: PUSH
14431: LD_EXP 22
14435: AND
14436: IFFALSE 13935
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
14438: LD_INT 22
14440: PUSH
14441: LD_INT 3
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: LD_INT 21
14450: PUSH
14451: LD_INT 1
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 91
14460: PUSH
14461: LD_EXP 40
14465: PUSH
14466: LD_INT 10
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: LIST
14473: PUSH
14474: EMPTY
14475: LIST
14476: LIST
14477: LIST
14478: PPUSH
14479: CALL_OW 69
14483: IFFALSE 14526
// begin if not belkovDied and not belkovSaved then
14485: LD_EXP 19
14489: NOT
14490: PUSH
14491: LD_EXP 28
14495: NOT
14496: AND
14497: IFFALSE 14520
// begin if Query ( QContMission ) = 1 then
14499: LD_STRING QContMission
14501: PPUSH
14502: CALL_OW 97
14506: PUSH
14507: LD_INT 1
14509: EQUAL
14510: IFFALSE 14518
// begin EndMission ;
14512: CALL 14540 0 0
// exit ;
14516: GO 14537
// end ; end else
14518: GO 14526
// begin EndMission ;
14520: CALL 14540 0 0
// exit ;
14524: GO 14537
// end ; end ; wait ( 0 0$10 ) ;
14526: LD_INT 350
14528: PPUSH
14529: CALL_OW 67
// until false ;
14533: LD_INT 0
14535: IFFALSE 14438
// end ;
14537: PPOPN 5
14539: END
// function EndMission ; var i , tmp ; begin
14540: LD_INT 0
14542: PPUSH
14543: PPUSH
14544: PPUSH
// if initiative then
14545: LD_EXP 31
14549: IFFALSE 14563
// AddMedal ( Initiative , 1 ) else
14551: LD_STRING Initiative
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 101
14561: GO 14594
// if not eastOutpostDestroyed then
14563: LD_EXP 23
14567: NOT
14568: IFFALSE 14583
// AddMedal ( Initiative , - 2 ) else
14570: LD_STRING Initiative
14572: PPUSH
14573: LD_INT 2
14575: NEG
14576: PPUSH
14577: CALL_OW 101
14581: GO 14594
// AddMedal ( Initiative , - 1 ) ;
14583: LD_STRING Initiative
14585: PPUSH
14586: LD_INT 1
14588: NEG
14589: PPUSH
14590: CALL_OW 101
// if not belkovDied and belkovSaved then
14594: LD_EXP 19
14598: NOT
14599: PUSH
14600: LD_EXP 28
14604: AND
14605: IFFALSE 14619
// AddMedal ( Belkov , 1 ) else
14607: LD_STRING Belkov
14609: PPUSH
14610: LD_INT 1
14612: PPUSH
14613: CALL_OW 101
14617: GO 14714
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
14619: LD_EXP 45
14623: PPUSH
14624: LD_INT 22
14626: PUSH
14627: LD_INT 3
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: PPUSH
14634: CALL_OW 72
14638: IFFALSE 14652
// AddMedal ( Belkov , 2 ) else
14640: LD_STRING Belkov
14642: PPUSH
14643: LD_INT 2
14645: PPUSH
14646: CALL_OW 101
14650: GO 14714
// if belkovDied then
14652: LD_EXP 19
14656: IFFALSE 14671
// AddMedal ( Belkov , - 1 ) else
14658: LD_STRING Belkov
14660: PPUSH
14661: LD_INT 1
14663: NEG
14664: PPUSH
14665: CALL_OW 101
14669: GO 14714
// if not belkovSaved then
14671: LD_EXP 28
14675: NOT
14676: IFFALSE 14691
// AddMedal ( Belkov , - 2 ) else
14678: LD_STRING Belkov
14680: PPUSH
14681: LD_INT 2
14683: NEG
14684: PPUSH
14685: CALL_OW 101
14689: GO 14714
// if belkovDied and belkovSaved then
14691: LD_EXP 19
14695: PUSH
14696: LD_EXP 28
14700: AND
14701: IFFALSE 14714
// AddMedal ( Belkov , - 3 ) ;
14703: LD_STRING Belkov
14705: PPUSH
14706: LD_INT 3
14708: NEG
14709: PPUSH
14710: CALL_OW 101
// if playerTeamDeadCounter = 0 then
14714: LD_EXP 30
14718: PUSH
14719: LD_INT 0
14721: EQUAL
14722: IFFALSE 14736
// AddMedal ( NoLosses , 1 ) else
14724: LD_STRING NoLosses
14726: PPUSH
14727: LD_INT 1
14729: PPUSH
14730: CALL_OW 101
14734: GO 14747
// AddMedal ( NoLosses , - 1 ) ;
14736: LD_STRING NoLosses
14738: PPUSH
14739: LD_INT 1
14741: NEG
14742: PPUSH
14743: CALL_OW 101
// GiveMedals ( Main ) ;
14747: LD_STRING Main
14749: PPUSH
14750: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
14754: LD_INT 22
14756: PUSH
14757: LD_INT 3
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 23
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 21
14776: PUSH
14777: LD_INT 1
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 69
14793: PPUSH
14794: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
14798: LD_EXP 34
14802: PPUSH
14803: LD_EXP 3
14807: PUSH
14808: LD_STRING Burlak
14810: STR
14811: PPUSH
14812: CALL_OW 38
// if IsLive ( Gnyevko ) then
14816: LD_EXP 35
14820: PPUSH
14821: CALL_OW 300
14825: IFFALSE 14845
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
14827: LD_EXP 35
14831: PPUSH
14832: LD_EXP 3
14836: PUSH
14837: LD_STRING Gnyevko
14839: STR
14840: PPUSH
14841: CALL_OW 38
// if IsLive ( Kovalyuk ) then
14845: LD_EXP 39
14849: PPUSH
14850: CALL_OW 300
14854: IFFALSE 14874
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
14856: LD_EXP 39
14860: PPUSH
14861: LD_EXP 3
14865: PUSH
14866: LD_STRING Kovalyuk
14868: STR
14869: PPUSH
14870: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
14874: LD_EXP 36
14878: PPUSH
14879: CALL_OW 300
14883: PUSH
14884: LD_EXP 28
14888: AND
14889: IFFALSE 14909
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
14891: LD_EXP 36
14895: PPUSH
14896: LD_EXP 3
14900: PUSH
14901: LD_STRING Belkov
14903: STR
14904: PPUSH
14905: CALL_OW 38
// if IsLive ( Kirilenkova ) then
14909: LD_EXP 37
14913: PPUSH
14914: CALL_OW 300
14918: IFFALSE 14938
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
14920: LD_EXP 37
14924: PPUSH
14925: LD_EXP 3
14929: PUSH
14930: LD_STRING Kirilenkova
14932: STR
14933: PPUSH
14934: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
14938: LD_INT 22
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 23
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PUSH
14958: LD_INT 21
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 69
14977: PUSH
14978: LD_EXP 34
14982: PUSH
14983: LD_EXP 35
14987: PUSH
14988: LD_EXP 39
14992: PUSH
14993: LD_EXP 36
14997: PUSH
14998: LD_EXP 37
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: DIFF
15010: PPUSH
15011: LD_EXP 3
15015: PUSH
15016: LD_STRING burlakTeam
15018: STR
15019: PPUSH
15020: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15024: LD_INT 22
15026: PUSH
15027: LD_INT 6
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: LD_INT 23
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 21
15046: PUSH
15047: LD_INT 1
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: PUSH
15064: LD_EXP 40
15068: PUSH
15069: LD_EXP 38
15073: PUSH
15074: LD_EXP 36
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: LD_EXP 45
15088: UNION
15089: DIFF
15090: PPUSH
15091: LD_EXP 3
15095: PUSH
15096: LD_STRING kirovTeam
15098: STR
15099: PPUSH
15100: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15104: LD_EXP 23
15108: PPUSH
15109: LD_STRING 02_EasternOutpostDestroyed
15111: PPUSH
15112: CALL_OW 39
// tmp := [ ] ;
15116: LD_ADDR_VAR 0 3
15120: PUSH
15121: EMPTY
15122: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15123: LD_ADDR_VAR 0 2
15127: PUSH
15128: LD_INT 22
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 21
15140: PUSH
15141: LD_INT 3
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 69
15156: PUSH
15157: FOR_IN
15158: IFFALSE 15234
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15160: LD_ADDR_VAR 0 3
15164: PUSH
15165: LD_VAR 0 3
15169: PPUSH
15170: LD_VAR 0 2
15174: PPUSH
15175: CALL_OW 266
15179: PUSH
15180: LD_VAR 0 2
15184: PPUSH
15185: CALL_OW 267
15189: PUSH
15190: LD_VAR 0 2
15194: PPUSH
15195: CALL_OW 250
15199: PUSH
15200: LD_VAR 0 2
15204: PPUSH
15205: CALL_OW 251
15209: PUSH
15210: LD_VAR 0 2
15214: PPUSH
15215: CALL_OW 254
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: PPUSH
15227: CALL 52933 0 2
15231: ST_TO_ADDR
15232: GO 15157
15234: POP
15235: POP
// SaveVariable ( tmp , 02_Beria ) ;
15236: LD_VAR 0 3
15240: PPUSH
15241: LD_STRING 02_Beria
15243: PPUSH
15244: CALL_OW 39
// tmp := [ ] ;
15248: LD_ADDR_VAR 0 3
15252: PUSH
15253: EMPTY
15254: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
15255: LD_ADDR_VAR 0 2
15259: PUSH
15260: LD_INT 22
15262: PUSH
15263: LD_INT 6
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 21
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PPUSH
15284: CALL_OW 69
15288: PUSH
15289: FOR_IN
15290: IFFALSE 15366
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
15292: LD_ADDR_VAR 0 3
15296: PUSH
15297: LD_VAR 0 3
15301: PPUSH
15302: LD_VAR 0 2
15306: PPUSH
15307: CALL_OW 266
15311: PUSH
15312: LD_VAR 0 2
15316: PPUSH
15317: CALL_OW 267
15321: PUSH
15322: LD_VAR 0 2
15326: PPUSH
15327: CALL_OW 250
15331: PUSH
15332: LD_VAR 0 2
15336: PPUSH
15337: CALL_OW 251
15341: PUSH
15342: LD_VAR 0 2
15346: PPUSH
15347: CALL_OW 254
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL 52933 0 2
15363: ST_TO_ADDR
15364: GO 15289
15366: POP
15367: POP
// SaveVariable ( tmp , 02_Kirov ) ;
15368: LD_VAR 0 3
15372: PPUSH
15373: LD_STRING 02_Kirov
15375: PPUSH
15376: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
15380: LD_INT 22
15382: PUSH
15383: LD_INT 3
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: PPUSH
15404: CALL_OW 69
15408: PPUSH
15409: CALL 18298 0 1
15413: PPUSH
15414: LD_STRING 02_VehiclesCount
15416: PPUSH
15417: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
15421: LD_INT 22
15423: PUSH
15424: LD_INT 6
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 21
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PPUSH
15445: CALL_OW 69
15449: PPUSH
15450: CALL 18298 0 1
15454: PPUSH
15455: LD_STRING 02_KirovVehiclesCount
15457: PPUSH
15458: CALL_OW 39
// YouWin ;
15462: CALL_OW 103
// end ; end_of_file
15466: LD_VAR 0 1
15470: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
15471: LD_INT 420
15473: PPUSH
15474: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
15478: LD_VAR 0 2
15482: PPUSH
15483: LD_VAR 0 3
15487: PPUSH
15488: CALL 7659 0 2
// end ;
15492: PPOPN 5
15494: END
// on UnitDestroyed ( un ) do begin if un = Burlak then
15495: LD_VAR 0 1
15499: PUSH
15500: LD_EXP 34
15504: EQUAL
15505: IFFALSE 15514
// YouLost ( Burlak ) ;
15507: LD_STRING Burlak
15509: PPUSH
15510: CALL_OW 104
// if un = Platonov then
15514: LD_VAR 0 1
15518: PUSH
15519: LD_EXP 40
15523: EQUAL
15524: IFFALSE 15533
// YouLost ( Platonov ) ;
15526: LD_STRING Platonov
15528: PPUSH
15529: CALL_OW 104
// if un = Kurin then
15533: LD_VAR 0 1
15537: PUSH
15538: LD_EXP 38
15542: EQUAL
15543: IFFALSE 15552
// YouLost ( Kurin ) ;
15545: LD_STRING Kurin
15547: PPUSH
15548: CALL_OW 104
// if un = Belkov then
15552: LD_VAR 0 1
15556: PUSH
15557: LD_EXP 36
15561: EQUAL
15562: IFFALSE 15572
// belkovDied := true ;
15564: LD_ADDR_EXP 19
15568: PUSH
15569: LD_INT 1
15571: ST_TO_ADDR
// if un in belkovTeam then
15572: LD_VAR 0 1
15576: PUSH
15577: LD_EXP 45
15581: IN
15582: IFFALSE 15615
// begin belkovTeam := belkovTeam diff un ;
15584: LD_ADDR_EXP 45
15588: PUSH
15589: LD_EXP 45
15593: PUSH
15594: LD_VAR 0 1
15598: DIFF
15599: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
15600: LD_ADDR_EXP 29
15604: PUSH
15605: LD_EXP 29
15609: PPUSH
15610: CALL 54286 0 1
15614: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
15615: LD_VAR 0 1
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_INT 3
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 21
15632: PUSH
15633: LD_INT 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 23
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: PPUSH
15655: CALL_OW 69
15659: IN
15660: IFFALSE 15677
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
15662: LD_ADDR_EXP 30
15666: PUSH
15667: LD_EXP 30
15671: PPUSH
15672: CALL 54286 0 1
15676: ST_TO_ADDR
// if un in usWestForces then
15677: LD_VAR 0 1
15681: PUSH
15682: LD_EXP 46
15686: IN
15687: IFFALSE 15705
// usWestForces := usWestForces diff un ;
15689: LD_ADDR_EXP 46
15693: PUSH
15694: LD_EXP 46
15698: PUSH
15699: LD_VAR 0 1
15703: DIFF
15704: ST_TO_ADDR
// if un in usEastForces then
15705: LD_VAR 0 1
15709: PUSH
15710: LD_EXP 47
15714: IN
15715: IFFALSE 15733
// usEastForces := usEastForces diff un ;
15717: LD_ADDR_EXP 47
15721: PUSH
15722: LD_EXP 47
15726: PUSH
15727: LD_VAR 0 1
15731: DIFF
15732: ST_TO_ADDR
// end ;
15733: PPOPN 1
15735: END
// on BuildingComplete ( b ) do var mech ;
15736: LD_INT 0
15738: PPUSH
// begin if GetSide ( b ) = 3 then
15739: LD_VAR 0 1
15743: PPUSH
15744: CALL_OW 255
15748: PUSH
15749: LD_INT 3
15751: EQUAL
15752: IFFALSE 15811
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
15754: LD_VAR 0 1
15758: PPUSH
15759: CALL_OW 266
15763: PUSH
15764: LD_INT 6
15766: PUSH
15767: LD_INT 7
15769: PUSH
15770: LD_INT 8
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: LIST
15777: IN
15778: IFFALSE 15788
// hasLab := true ;
15780: LD_ADDR_EXP 9
15784: PUSH
15785: LD_INT 1
15787: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
15788: LD_VAR 0 1
15792: PPUSH
15793: CALL_OW 266
15797: PUSH
15798: LD_INT 2
15800: EQUAL
15801: IFFALSE 15811
// hasWorkshop := true ;
15803: LD_ADDR_EXP 10
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
15811: LD_VAR 0 1
15815: PPUSH
15816: CALL_OW 255
15820: PUSH
15821: LD_INT 6
15823: EQUAL
15824: IFFALSE 15898
// begin if GetBType ( b ) = b_workshop then
15826: LD_VAR 0 1
15830: PPUSH
15831: CALL_OW 266
15835: PUSH
15836: LD_INT 2
15838: EQUAL
15839: IFFALSE 15898
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
15841: LD_ADDR_VAR 0 2
15845: PUSH
15846: LD_EXP 43
15850: PPUSH
15851: LD_INT 25
15853: PUSH
15854: LD_INT 3
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 72
15865: ST_TO_ADDR
// if not mech then
15866: LD_VAR 0 2
15870: NOT
15871: IFFALSE 15875
// exit ;
15873: GO 15898
// ComExit ( mech ) ;
15875: LD_VAR 0 2
15879: PPUSH
15880: CALL 53321 0 1
// AddComEnterUnit ( mech , b ) ;
15884: LD_VAR 0 2
15888: PPUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 180
// end ; end ; end ;
15898: PPOPN 2
15900: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) = 3 then
15901: LD_VAR 0 1
15905: PPUSH
15906: CALL_OW 255
15910: PUSH
15911: LD_INT 3
15913: EQUAL
15914: IFFALSE 15939
// begin hasTank := true ;
15916: LD_ADDR_EXP 12
15920: PUSH
15921: LD_INT 1
15923: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
15924: LD_ADDR_EXP 15
15928: PUSH
15929: LD_EXP 15
15933: PPUSH
15934: CALL 54286 0 1
15938: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
15939: LD_VAR 0 1
15943: PPUSH
15944: CALL_OW 255
15948: PUSH
15949: LD_INT 6
15951: EQUAL
15952: IFFALSE 15963
// KirovAttack ( vehicle ) ;
15954: LD_VAR 0 1
15958: PPUSH
15959: CALL 3330 0 1
// end ;
15963: PPOPN 2
15965: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
15966: LD_VAR 0 1
15970: PUSH
15971: LD_EXP 33
15975: EQUAL
15976: IFFALSE 15982
// BelkovAttackScript ;
15978: CALL 1432 0 0
// end ;
15982: PPOPN 1
15984: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
15985: LD_INT 0
15987: PPUSH
// begin if side = 1 then
15988: LD_VAR 0 3
15992: PUSH
15993: LD_INT 1
15995: EQUAL
15996: IFFALSE 16006
// vehCaptured := true ;
15998: LD_ADDR_EXP 16
16002: PUSH
16003: LD_INT 1
16005: ST_TO_ADDR
// if side = 6 then
16006: LD_VAR 0 3
16010: PUSH
16011: LD_INT 6
16013: EQUAL
16014: IFFALSE 16162
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] ] ) then
16016: LD_INT 22
16018: PUSH
16019: LD_INT 6
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 25
16028: PUSH
16029: LD_INT 3
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PPUSH
16040: CALL_OW 69
16044: IFFALSE 16162
// begin fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
16046: LD_ADDR_VAR 0 5
16050: PUSH
16051: LD_INT 22
16053: PUSH
16054: LD_INT 6
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 30
16063: PUSH
16064: LD_INT 2
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PPUSH
16075: CALL_OW 69
16079: ST_TO_ADDR
// if not fac then
16080: LD_VAR 0 5
16084: NOT
16085: IFFALSE 16089
// exit ;
16087: GO 16162
// fac := fac [ 1 ] ;
16089: LD_ADDR_VAR 0 5
16093: PUSH
16094: LD_VAR 0 5
16098: PUSH
16099: LD_INT 1
16101: ARRAY
16102: ST_TO_ADDR
// ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
16103: LD_VAR 0 5
16107: PPUSH
16108: LD_INT 21
16110: PPUSH
16111: LD_INT 1
16113: PPUSH
16114: LD_INT 1
16116: PPUSH
16117: LD_INT 42
16119: PPUSH
16120: CALL_OW 125
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , class_mechanic ] ] ) , fac ) ;
16124: LD_INT 22
16126: PUSH
16127: LD_INT 6
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 25
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PPUSH
16153: LD_VAR 0 5
16157: PPUSH
16158: CALL_OW 120
// end ; end ;
16162: PPOPN 5
16164: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16165: LD_VAR 0 1
16169: PUSH
16170: LD_INT 3
16172: EQUAL
16173: PUSH
16174: LD_VAR 0 2
16178: PUSH
16179: LD_INT 6
16181: EQUAL
16182: AND
16183: IFFALSE 16193
// allianceAttacked := true ;
16185: LD_ADDR_EXP 13
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// end ; end_of_file
16193: PPOPN 2
16195: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16196: LD_INT 0
16198: PPUSH
16199: PPUSH
// if exist_mode then
16200: LD_VAR 0 2
16204: IFFALSE 16229
// unit := CreateCharacter ( prefix & ident ) else
16206: LD_ADDR_VAR 0 5
16210: PUSH
16211: LD_VAR 0 3
16215: PUSH
16216: LD_VAR 0 1
16220: STR
16221: PPUSH
16222: CALL_OW 34
16226: ST_TO_ADDR
16227: GO 16244
// unit := NewCharacter ( ident ) ;
16229: LD_ADDR_VAR 0 5
16233: PUSH
16234: LD_VAR 0 1
16238: PPUSH
16239: CALL_OW 25
16243: ST_TO_ADDR
// result := unit ;
16244: LD_ADDR_VAR 0 4
16248: PUSH
16249: LD_VAR 0 5
16253: ST_TO_ADDR
// end ;
16254: LD_VAR 0 4
16258: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16259: LD_INT 0
16261: PPUSH
16262: PPUSH
// if not side or not nation then
16263: LD_VAR 0 1
16267: NOT
16268: PUSH
16269: LD_VAR 0 2
16273: NOT
16274: OR
16275: IFFALSE 16279
// exit ;
16277: GO 17047
// case nation of nation_american :
16279: LD_VAR 0 2
16283: PUSH
16284: LD_INT 1
16286: DOUBLE
16287: EQUAL
16288: IFTRUE 16292
16290: GO 16506
16292: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16293: LD_ADDR_VAR 0 4
16297: PUSH
16298: LD_INT 35
16300: PUSH
16301: LD_INT 45
16303: PUSH
16304: LD_INT 46
16306: PUSH
16307: LD_INT 47
16309: PUSH
16310: LD_INT 82
16312: PUSH
16313: LD_INT 83
16315: PUSH
16316: LD_INT 84
16318: PUSH
16319: LD_INT 85
16321: PUSH
16322: LD_INT 86
16324: PUSH
16325: LD_INT 1
16327: PUSH
16328: LD_INT 2
16330: PUSH
16331: LD_INT 6
16333: PUSH
16334: LD_INT 15
16336: PUSH
16337: LD_INT 16
16339: PUSH
16340: LD_INT 7
16342: PUSH
16343: LD_INT 12
16345: PUSH
16346: LD_INT 13
16348: PUSH
16349: LD_INT 10
16351: PUSH
16352: LD_INT 14
16354: PUSH
16355: LD_INT 20
16357: PUSH
16358: LD_INT 21
16360: PUSH
16361: LD_INT 22
16363: PUSH
16364: LD_INT 25
16366: PUSH
16367: LD_INT 32
16369: PUSH
16370: LD_INT 27
16372: PUSH
16373: LD_INT 36
16375: PUSH
16376: LD_INT 69
16378: PUSH
16379: LD_INT 39
16381: PUSH
16382: LD_INT 34
16384: PUSH
16385: LD_INT 40
16387: PUSH
16388: LD_INT 48
16390: PUSH
16391: LD_INT 49
16393: PUSH
16394: LD_INT 50
16396: PUSH
16397: LD_INT 51
16399: PUSH
16400: LD_INT 52
16402: PUSH
16403: LD_INT 53
16405: PUSH
16406: LD_INT 54
16408: PUSH
16409: LD_INT 55
16411: PUSH
16412: LD_INT 56
16414: PUSH
16415: LD_INT 57
16417: PUSH
16418: LD_INT 58
16420: PUSH
16421: LD_INT 59
16423: PUSH
16424: LD_INT 60
16426: PUSH
16427: LD_INT 61
16429: PUSH
16430: LD_INT 62
16432: PUSH
16433: LD_INT 80
16435: PUSH
16436: LD_INT 82
16438: PUSH
16439: LD_INT 83
16441: PUSH
16442: LD_INT 84
16444: PUSH
16445: LD_INT 85
16447: PUSH
16448: LD_INT 86
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: ST_TO_ADDR
16504: GO 16971
16506: LD_INT 2
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16740
16514: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
16515: LD_ADDR_VAR 0 4
16519: PUSH
16520: LD_INT 35
16522: PUSH
16523: LD_INT 45
16525: PUSH
16526: LD_INT 46
16528: PUSH
16529: LD_INT 47
16531: PUSH
16532: LD_INT 82
16534: PUSH
16535: LD_INT 83
16537: PUSH
16538: LD_INT 84
16540: PUSH
16541: LD_INT 85
16543: PUSH
16544: LD_INT 87
16546: PUSH
16547: LD_INT 70
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: LD_INT 11
16555: PUSH
16556: LD_INT 3
16558: PUSH
16559: LD_INT 4
16561: PUSH
16562: LD_INT 5
16564: PUSH
16565: LD_INT 6
16567: PUSH
16568: LD_INT 15
16570: PUSH
16571: LD_INT 18
16573: PUSH
16574: LD_INT 7
16576: PUSH
16577: LD_INT 17
16579: PUSH
16580: LD_INT 8
16582: PUSH
16583: LD_INT 20
16585: PUSH
16586: LD_INT 21
16588: PUSH
16589: LD_INT 22
16591: PUSH
16592: LD_INT 72
16594: PUSH
16595: LD_INT 26
16597: PUSH
16598: LD_INT 69
16600: PUSH
16601: LD_INT 39
16603: PUSH
16604: LD_INT 40
16606: PUSH
16607: LD_INT 41
16609: PUSH
16610: LD_INT 42
16612: PUSH
16613: LD_INT 43
16615: PUSH
16616: LD_INT 48
16618: PUSH
16619: LD_INT 49
16621: PUSH
16622: LD_INT 50
16624: PUSH
16625: LD_INT 51
16627: PUSH
16628: LD_INT 52
16630: PUSH
16631: LD_INT 53
16633: PUSH
16634: LD_INT 54
16636: PUSH
16637: LD_INT 55
16639: PUSH
16640: LD_INT 56
16642: PUSH
16643: LD_INT 60
16645: PUSH
16646: LD_INT 61
16648: PUSH
16649: LD_INT 62
16651: PUSH
16652: LD_INT 66
16654: PUSH
16655: LD_INT 67
16657: PUSH
16658: LD_INT 68
16660: PUSH
16661: LD_INT 81
16663: PUSH
16664: LD_INT 82
16666: PUSH
16667: LD_INT 83
16669: PUSH
16670: LD_INT 84
16672: PUSH
16673: LD_INT 85
16675: PUSH
16676: LD_INT 87
16678: PUSH
16679: LD_INT 88
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: ST_TO_ADDR
16738: GO 16971
16740: LD_INT 3
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16970
16748: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16749: LD_ADDR_VAR 0 4
16753: PUSH
16754: LD_INT 46
16756: PUSH
16757: LD_INT 47
16759: PUSH
16760: LD_INT 1
16762: PUSH
16763: LD_INT 2
16765: PUSH
16766: LD_INT 82
16768: PUSH
16769: LD_INT 83
16771: PUSH
16772: LD_INT 84
16774: PUSH
16775: LD_INT 85
16777: PUSH
16778: LD_INT 86
16780: PUSH
16781: LD_INT 11
16783: PUSH
16784: LD_INT 9
16786: PUSH
16787: LD_INT 20
16789: PUSH
16790: LD_INT 19
16792: PUSH
16793: LD_INT 21
16795: PUSH
16796: LD_INT 24
16798: PUSH
16799: LD_INT 22
16801: PUSH
16802: LD_INT 25
16804: PUSH
16805: LD_INT 28
16807: PUSH
16808: LD_INT 29
16810: PUSH
16811: LD_INT 30
16813: PUSH
16814: LD_INT 31
16816: PUSH
16817: LD_INT 37
16819: PUSH
16820: LD_INT 38
16822: PUSH
16823: LD_INT 32
16825: PUSH
16826: LD_INT 27
16828: PUSH
16829: LD_INT 33
16831: PUSH
16832: LD_INT 69
16834: PUSH
16835: LD_INT 39
16837: PUSH
16838: LD_INT 34
16840: PUSH
16841: LD_INT 40
16843: PUSH
16844: LD_INT 71
16846: PUSH
16847: LD_INT 23
16849: PUSH
16850: LD_INT 44
16852: PUSH
16853: LD_INT 48
16855: PUSH
16856: LD_INT 49
16858: PUSH
16859: LD_INT 50
16861: PUSH
16862: LD_INT 51
16864: PUSH
16865: LD_INT 52
16867: PUSH
16868: LD_INT 53
16870: PUSH
16871: LD_INT 54
16873: PUSH
16874: LD_INT 55
16876: PUSH
16877: LD_INT 56
16879: PUSH
16880: LD_INT 57
16882: PUSH
16883: LD_INT 58
16885: PUSH
16886: LD_INT 59
16888: PUSH
16889: LD_INT 63
16891: PUSH
16892: LD_INT 64
16894: PUSH
16895: LD_INT 65
16897: PUSH
16898: LD_INT 82
16900: PUSH
16901: LD_INT 83
16903: PUSH
16904: LD_INT 84
16906: PUSH
16907: LD_INT 85
16909: PUSH
16910: LD_INT 86
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: ST_TO_ADDR
16968: GO 16971
16970: POP
// if state > - 1 and state < 3 then
16971: LD_VAR 0 3
16975: PUSH
16976: LD_INT 1
16978: NEG
16979: GREATER
16980: PUSH
16981: LD_VAR 0 3
16985: PUSH
16986: LD_INT 3
16988: LESS
16989: AND
16990: IFFALSE 17047
// for i in result do
16992: LD_ADDR_VAR 0 5
16996: PUSH
16997: LD_VAR 0 4
17001: PUSH
17002: FOR_IN
17003: IFFALSE 17045
// if GetTech ( i , side ) <> state then
17005: LD_VAR 0 5
17009: PPUSH
17010: LD_VAR 0 1
17014: PPUSH
17015: CALL_OW 321
17019: PUSH
17020: LD_VAR 0 3
17024: NONEQUAL
17025: IFFALSE 17043
// result := result diff i ;
17027: LD_ADDR_VAR 0 4
17031: PUSH
17032: LD_VAR 0 4
17036: PUSH
17037: LD_VAR 0 5
17041: DIFF
17042: ST_TO_ADDR
17043: GO 17002
17045: POP
17046: POP
// end ;
17047: LD_VAR 0 4
17051: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17052: LD_INT 0
17054: PPUSH
17055: PPUSH
17056: PPUSH
// result := true ;
17057: LD_ADDR_VAR 0 3
17061: PUSH
17062: LD_INT 1
17064: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17065: LD_ADDR_VAR 0 5
17069: PUSH
17070: LD_VAR 0 2
17074: PPUSH
17075: CALL_OW 480
17079: ST_TO_ADDR
// if not tmp then
17080: LD_VAR 0 5
17084: NOT
17085: IFFALSE 17089
// exit ;
17087: GO 17138
// for i in tmp do
17089: LD_ADDR_VAR 0 4
17093: PUSH
17094: LD_VAR 0 5
17098: PUSH
17099: FOR_IN
17100: IFFALSE 17136
// if GetTech ( i , side ) <> state_researched then
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_VAR 0 1
17111: PPUSH
17112: CALL_OW 321
17116: PUSH
17117: LD_INT 2
17119: NONEQUAL
17120: IFFALSE 17134
// begin result := false ;
17122: LD_ADDR_VAR 0 3
17126: PUSH
17127: LD_INT 0
17129: ST_TO_ADDR
// exit ;
17130: POP
17131: POP
17132: GO 17138
// end ;
17134: GO 17099
17136: POP
17137: POP
// end ;
17138: LD_VAR 0 3
17142: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
17150: PPUSH
17151: PPUSH
17152: PPUSH
17153: PPUSH
17154: PPUSH
17155: PPUSH
17156: PPUSH
17157: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17158: LD_VAR 0 1
17162: NOT
17163: PUSH
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 257
17173: PUSH
17174: LD_INT 9
17176: NONEQUAL
17177: OR
17178: IFFALSE 17182
// exit ;
17180: GO 17755
// side := GetSide ( unit ) ;
17182: LD_ADDR_VAR 0 9
17186: PUSH
17187: LD_VAR 0 1
17191: PPUSH
17192: CALL_OW 255
17196: ST_TO_ADDR
// tech_space := tech_spacanom ;
17197: LD_ADDR_VAR 0 12
17201: PUSH
17202: LD_INT 29
17204: ST_TO_ADDR
// tech_time := tech_taurad ;
17205: LD_ADDR_VAR 0 13
17209: PUSH
17210: LD_INT 28
17212: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17213: LD_ADDR_VAR 0 11
17217: PUSH
17218: LD_VAR 0 1
17222: PPUSH
17223: CALL_OW 310
17227: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17228: LD_VAR 0 11
17232: PPUSH
17233: CALL_OW 247
17237: PUSH
17238: LD_INT 2
17240: EQUAL
17241: IFFALSE 17245
// exit ;
17243: GO 17755
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17245: LD_ADDR_VAR 0 8
17249: PUSH
17250: LD_INT 81
17252: PUSH
17253: LD_VAR 0 9
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: LD_INT 21
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: PPUSH
17283: CALL_OW 69
17287: ST_TO_ADDR
// if not tmp then
17288: LD_VAR 0 8
17292: NOT
17293: IFFALSE 17297
// exit ;
17295: GO 17755
// if in_unit then
17297: LD_VAR 0 11
17301: IFFALSE 17325
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17303: LD_ADDR_VAR 0 10
17307: PUSH
17308: LD_VAR 0 8
17312: PPUSH
17313: LD_VAR 0 11
17317: PPUSH
17318: CALL_OW 74
17322: ST_TO_ADDR
17323: GO 17345
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17325: LD_ADDR_VAR 0 10
17329: PUSH
17330: LD_VAR 0 8
17334: PPUSH
17335: LD_VAR 0 1
17339: PPUSH
17340: CALL_OW 74
17344: ST_TO_ADDR
// if not enemy then
17345: LD_VAR 0 10
17349: NOT
17350: IFFALSE 17354
// exit ;
17352: GO 17755
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17354: LD_VAR 0 11
17358: PUSH
17359: LD_VAR 0 11
17363: PPUSH
17364: LD_VAR 0 10
17368: PPUSH
17369: CALL_OW 296
17373: PUSH
17374: LD_INT 13
17376: GREATER
17377: AND
17378: PUSH
17379: LD_VAR 0 1
17383: PPUSH
17384: LD_VAR 0 10
17388: PPUSH
17389: CALL_OW 296
17393: PUSH
17394: LD_INT 12
17396: GREATER
17397: OR
17398: IFFALSE 17402
// exit ;
17400: GO 17755
// missile := [ 1 ] ;
17402: LD_ADDR_VAR 0 14
17406: PUSH
17407: LD_INT 1
17409: PUSH
17410: EMPTY
17411: LIST
17412: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17413: LD_VAR 0 9
17417: PPUSH
17418: LD_VAR 0 12
17422: PPUSH
17423: CALL_OW 325
17427: IFFALSE 17456
// missile := Insert ( missile , missile + 1 , 2 ) ;
17429: LD_ADDR_VAR 0 14
17433: PUSH
17434: LD_VAR 0 14
17438: PPUSH
17439: LD_VAR 0 14
17443: PUSH
17444: LD_INT 1
17446: PLUS
17447: PPUSH
17448: LD_INT 2
17450: PPUSH
17451: CALL_OW 2
17455: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17456: LD_VAR 0 9
17460: PPUSH
17461: LD_VAR 0 13
17465: PPUSH
17466: CALL_OW 325
17470: PUSH
17471: LD_VAR 0 10
17475: PPUSH
17476: CALL_OW 255
17480: PPUSH
17481: LD_VAR 0 13
17485: PPUSH
17486: CALL_OW 325
17490: NOT
17491: AND
17492: IFFALSE 17521
// missile := Insert ( missile , missile + 1 , 3 ) ;
17494: LD_ADDR_VAR 0 14
17498: PUSH
17499: LD_VAR 0 14
17503: PPUSH
17504: LD_VAR 0 14
17508: PUSH
17509: LD_INT 1
17511: PLUS
17512: PPUSH
17513: LD_INT 3
17515: PPUSH
17516: CALL_OW 2
17520: ST_TO_ADDR
// if missile < 2 then
17521: LD_VAR 0 14
17525: PUSH
17526: LD_INT 2
17528: LESS
17529: IFFALSE 17533
// exit ;
17531: GO 17755
// x := GetX ( enemy ) ;
17533: LD_ADDR_VAR 0 4
17537: PUSH
17538: LD_VAR 0 10
17542: PPUSH
17543: CALL_OW 250
17547: ST_TO_ADDR
// y := GetY ( enemy ) ;
17548: LD_ADDR_VAR 0 5
17552: PUSH
17553: LD_VAR 0 10
17557: PPUSH
17558: CALL_OW 251
17562: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17563: LD_ADDR_VAR 0 6
17567: PUSH
17568: LD_VAR 0 4
17572: PUSH
17573: LD_INT 1
17575: NEG
17576: PPUSH
17577: LD_INT 1
17579: PPUSH
17580: CALL_OW 12
17584: PLUS
17585: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17586: LD_ADDR_VAR 0 7
17590: PUSH
17591: LD_VAR 0 5
17595: PUSH
17596: LD_INT 1
17598: NEG
17599: PPUSH
17600: LD_INT 1
17602: PPUSH
17603: CALL_OW 12
17607: PLUS
17608: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17609: LD_VAR 0 6
17613: PPUSH
17614: LD_VAR 0 7
17618: PPUSH
17619: CALL_OW 488
17623: NOT
17624: IFFALSE 17646
// begin _x := x ;
17626: LD_ADDR_VAR 0 6
17630: PUSH
17631: LD_VAR 0 4
17635: ST_TO_ADDR
// _y := y ;
17636: LD_ADDR_VAR 0 7
17640: PUSH
17641: LD_VAR 0 5
17645: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17646: LD_ADDR_VAR 0 3
17650: PUSH
17651: LD_INT 1
17653: PPUSH
17654: LD_VAR 0 14
17658: PPUSH
17659: CALL_OW 12
17663: ST_TO_ADDR
// case i of 1 :
17664: LD_VAR 0 3
17668: PUSH
17669: LD_INT 1
17671: DOUBLE
17672: EQUAL
17673: IFTRUE 17677
17675: GO 17694
17677: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17678: LD_VAR 0 1
17682: PPUSH
17683: LD_VAR 0 10
17687: PPUSH
17688: CALL_OW 115
17692: GO 17755
17694: LD_INT 2
17696: DOUBLE
17697: EQUAL
17698: IFTRUE 17702
17700: GO 17724
17702: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17703: LD_VAR 0 1
17707: PPUSH
17708: LD_VAR 0 6
17712: PPUSH
17713: LD_VAR 0 7
17717: PPUSH
17718: CALL_OW 153
17722: GO 17755
17724: LD_INT 3
17726: DOUBLE
17727: EQUAL
17728: IFTRUE 17732
17730: GO 17754
17732: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17733: LD_VAR 0 1
17737: PPUSH
17738: LD_VAR 0 6
17742: PPUSH
17743: LD_VAR 0 7
17747: PPUSH
17748: CALL_OW 154
17752: GO 17755
17754: POP
// end ;
17755: LD_VAR 0 2
17759: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17760: LD_INT 0
17762: PPUSH
17763: PPUSH
17764: PPUSH
17765: PPUSH
17766: PPUSH
17767: PPUSH
// if not unit or not building then
17768: LD_VAR 0 1
17772: NOT
17773: PUSH
17774: LD_VAR 0 2
17778: NOT
17779: OR
17780: IFFALSE 17784
// exit ;
17782: GO 17942
// x := GetX ( building ) ;
17784: LD_ADDR_VAR 0 5
17788: PUSH
17789: LD_VAR 0 2
17793: PPUSH
17794: CALL_OW 250
17798: ST_TO_ADDR
// y := GetY ( building ) ;
17799: LD_ADDR_VAR 0 6
17803: PUSH
17804: LD_VAR 0 2
17808: PPUSH
17809: CALL_OW 251
17813: ST_TO_ADDR
// for i = 0 to 5 do
17814: LD_ADDR_VAR 0 4
17818: PUSH
17819: DOUBLE
17820: LD_INT 0
17822: DEC
17823: ST_TO_ADDR
17824: LD_INT 5
17826: PUSH
17827: FOR_TO
17828: IFFALSE 17940
// begin _x := ShiftX ( x , i , 3 ) ;
17830: LD_ADDR_VAR 0 7
17834: PUSH
17835: LD_VAR 0 5
17839: PPUSH
17840: LD_VAR 0 4
17844: PPUSH
17845: LD_INT 3
17847: PPUSH
17848: CALL_OW 272
17852: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17853: LD_ADDR_VAR 0 8
17857: PUSH
17858: LD_VAR 0 6
17862: PPUSH
17863: LD_VAR 0 4
17867: PPUSH
17868: LD_INT 3
17870: PPUSH
17871: CALL_OW 273
17875: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17876: LD_VAR 0 7
17880: PPUSH
17881: LD_VAR 0 8
17885: PPUSH
17886: CALL_OW 488
17890: NOT
17891: IFFALSE 17895
// continue ;
17893: GO 17827
// if HexInfo ( _x , _y ) = 0 then
17895: LD_VAR 0 7
17899: PPUSH
17900: LD_VAR 0 8
17904: PPUSH
17905: CALL_OW 428
17909: PUSH
17910: LD_INT 0
17912: EQUAL
17913: IFFALSE 17938
// begin ComMoveXY ( unit , _x , _y ) ;
17915: LD_VAR 0 1
17919: PPUSH
17920: LD_VAR 0 7
17924: PPUSH
17925: LD_VAR 0 8
17929: PPUSH
17930: CALL_OW 111
// exit ;
17934: POP
17935: POP
17936: GO 17942
// end ; end ;
17938: GO 17827
17940: POP
17941: POP
// end ;
17942: LD_VAR 0 3
17946: RET
// export function ScanBase ( side , base_area ) ; begin
17947: LD_INT 0
17949: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17950: LD_ADDR_VAR 0 3
17954: PUSH
17955: LD_VAR 0 2
17959: PPUSH
17960: LD_INT 81
17962: PUSH
17963: LD_VAR 0 1
17967: PUSH
17968: EMPTY
17969: LIST
17970: LIST
17971: PPUSH
17972: CALL_OW 70
17976: ST_TO_ADDR
// end ;
17977: LD_VAR 0 3
17981: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17982: LD_INT 0
17984: PPUSH
17985: PPUSH
17986: PPUSH
17987: PPUSH
// result := false ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_INT 0
17995: ST_TO_ADDR
// side := GetSide ( unit ) ;
17996: LD_ADDR_VAR 0 3
18000: PUSH
18001: LD_VAR 0 1
18005: PPUSH
18006: CALL_OW 255
18010: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18011: LD_ADDR_VAR 0 4
18015: PUSH
18016: LD_VAR 0 1
18020: PPUSH
18021: CALL_OW 248
18025: ST_TO_ADDR
// case nat of 1 :
18026: LD_VAR 0 4
18030: PUSH
18031: LD_INT 1
18033: DOUBLE
18034: EQUAL
18035: IFTRUE 18039
18037: GO 18050
18039: POP
// tech := tech_lassight ; 2 :
18040: LD_ADDR_VAR 0 5
18044: PUSH
18045: LD_INT 12
18047: ST_TO_ADDR
18048: GO 18089
18050: LD_INT 2
18052: DOUBLE
18053: EQUAL
18054: IFTRUE 18058
18056: GO 18069
18058: POP
// tech := tech_mortar ; 3 :
18059: LD_ADDR_VAR 0 5
18063: PUSH
18064: LD_INT 41
18066: ST_TO_ADDR
18067: GO 18089
18069: LD_INT 3
18071: DOUBLE
18072: EQUAL
18073: IFTRUE 18077
18075: GO 18088
18077: POP
// tech := tech_bazooka ; end ;
18078: LD_ADDR_VAR 0 5
18082: PUSH
18083: LD_INT 44
18085: ST_TO_ADDR
18086: GO 18089
18088: POP
// if Researched ( side , tech ) then
18089: LD_VAR 0 3
18093: PPUSH
18094: LD_VAR 0 5
18098: PPUSH
18099: CALL_OW 325
18103: IFFALSE 18130
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18105: LD_ADDR_VAR 0 2
18109: PUSH
18110: LD_INT 5
18112: PUSH
18113: LD_INT 8
18115: PUSH
18116: LD_INT 9
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: PUSH
18124: LD_VAR 0 4
18128: ARRAY
18129: ST_TO_ADDR
// end ;
18130: LD_VAR 0 2
18134: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18135: LD_INT 0
18137: PPUSH
18138: PPUSH
18139: PPUSH
// if not mines then
18140: LD_VAR 0 2
18144: NOT
18145: IFFALSE 18149
// exit ;
18147: GO 18293
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18149: LD_ADDR_VAR 0 5
18153: PUSH
18154: LD_INT 81
18156: PUSH
18157: LD_VAR 0 1
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 3
18168: PUSH
18169: LD_INT 21
18171: PUSH
18172: LD_INT 3
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: ST_TO_ADDR
// for i in mines do
18192: LD_ADDR_VAR 0 4
18196: PUSH
18197: LD_VAR 0 2
18201: PUSH
18202: FOR_IN
18203: IFFALSE 18291
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18205: LD_VAR 0 4
18209: PUSH
18210: LD_INT 1
18212: ARRAY
18213: PPUSH
18214: LD_VAR 0 4
18218: PUSH
18219: LD_INT 2
18221: ARRAY
18222: PPUSH
18223: CALL_OW 458
18227: NOT
18228: IFFALSE 18232
// continue ;
18230: GO 18202
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18232: LD_VAR 0 4
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: LD_VAR 0 4
18245: PUSH
18246: LD_INT 2
18248: ARRAY
18249: PPUSH
18250: CALL_OW 428
18254: PUSH
18255: LD_VAR 0 5
18259: IN
18260: IFFALSE 18289
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18262: LD_VAR 0 4
18266: PUSH
18267: LD_INT 1
18269: ARRAY
18270: PPUSH
18271: LD_VAR 0 4
18275: PUSH
18276: LD_INT 2
18278: ARRAY
18279: PPUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 456
// end ;
18289: GO 18202
18291: POP
18292: POP
// end ;
18293: LD_VAR 0 3
18297: RET
// export function Count ( array ) ; var i ; begin
18298: LD_INT 0
18300: PPUSH
18301: PPUSH
// result := 0 ;
18302: LD_ADDR_VAR 0 2
18306: PUSH
18307: LD_INT 0
18309: ST_TO_ADDR
// for i in array do
18310: LD_ADDR_VAR 0 3
18314: PUSH
18315: LD_VAR 0 1
18319: PUSH
18320: FOR_IN
18321: IFFALSE 18345
// if i then
18323: LD_VAR 0 3
18327: IFFALSE 18343
// result := result + 1 ;
18329: LD_ADDR_VAR 0 2
18333: PUSH
18334: LD_VAR 0 2
18338: PUSH
18339: LD_INT 1
18341: PLUS
18342: ST_TO_ADDR
18343: GO 18320
18345: POP
18346: POP
// end ;
18347: LD_VAR 0 2
18351: RET
// export function IsEmpty ( building ) ; begin
18352: LD_INT 0
18354: PPUSH
// if not building then
18355: LD_VAR 0 1
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18407
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18364: LD_ADDR_VAR 0 2
18368: PUSH
18369: LD_VAR 0 1
18373: PUSH
18374: LD_INT 22
18376: PUSH
18377: LD_VAR 0 1
18381: PPUSH
18382: CALL_OW 255
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 58
18393: PUSH
18394: EMPTY
18395: LIST
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PPUSH
18401: CALL_OW 69
18405: IN
18406: ST_TO_ADDR
// end ;
18407: LD_VAR 0 2
18411: RET
// export function IsNotFull ( building ) ; begin
18412: LD_INT 0
18414: PPUSH
// if not building then
18415: LD_VAR 0 1
18419: NOT
18420: IFFALSE 18424
// exit ;
18422: GO 18443
// result := UnitsInside ( building ) < 6 ;
18424: LD_ADDR_VAR 0 2
18428: PUSH
18429: LD_VAR 0 1
18433: PPUSH
18434: CALL_OW 313
18438: PUSH
18439: LD_INT 6
18441: LESS
18442: ST_TO_ADDR
// end ;
18443: LD_VAR 0 2
18447: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18448: LD_INT 0
18450: PPUSH
18451: PPUSH
18452: PPUSH
18453: PPUSH
// tmp := [ ] ;
18454: LD_ADDR_VAR 0 3
18458: PUSH
18459: EMPTY
18460: ST_TO_ADDR
// list := [ ] ;
18461: LD_ADDR_VAR 0 5
18465: PUSH
18466: EMPTY
18467: ST_TO_ADDR
// for i = 16 to 25 do
18468: LD_ADDR_VAR 0 4
18472: PUSH
18473: DOUBLE
18474: LD_INT 16
18476: DEC
18477: ST_TO_ADDR
18478: LD_INT 25
18480: PUSH
18481: FOR_TO
18482: IFFALSE 18555
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18484: LD_ADDR_VAR 0 3
18488: PUSH
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 22
18496: PUSH
18497: LD_VAR 0 1
18501: PPUSH
18502: CALL_OW 255
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: LD_INT 91
18513: PUSH
18514: LD_VAR 0 1
18518: PUSH
18519: LD_INT 6
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 30
18529: PUSH
18530: LD_VAR 0 4
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: PUSH
18544: EMPTY
18545: LIST
18546: PPUSH
18547: CALL_OW 69
18551: ADD
18552: ST_TO_ADDR
18553: GO 18481
18555: POP
18556: POP
// for i = 1 to tmp do
18557: LD_ADDR_VAR 0 4
18561: PUSH
18562: DOUBLE
18563: LD_INT 1
18565: DEC
18566: ST_TO_ADDR
18567: LD_VAR 0 3
18571: PUSH
18572: FOR_TO
18573: IFFALSE 18661
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18575: LD_ADDR_VAR 0 5
18579: PUSH
18580: LD_VAR 0 5
18584: PUSH
18585: LD_VAR 0 3
18589: PUSH
18590: LD_VAR 0 4
18594: ARRAY
18595: PPUSH
18596: CALL_OW 266
18600: PUSH
18601: LD_VAR 0 3
18605: PUSH
18606: LD_VAR 0 4
18610: ARRAY
18611: PPUSH
18612: CALL_OW 250
18616: PUSH
18617: LD_VAR 0 3
18621: PUSH
18622: LD_VAR 0 4
18626: ARRAY
18627: PPUSH
18628: CALL_OW 251
18632: PUSH
18633: LD_VAR 0 3
18637: PUSH
18638: LD_VAR 0 4
18642: ARRAY
18643: PPUSH
18644: CALL_OW 254
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: ADD
18658: ST_TO_ADDR
18659: GO 18572
18661: POP
18662: POP
// result := list ;
18663: LD_ADDR_VAR 0 2
18667: PUSH
18668: LD_VAR 0 5
18672: ST_TO_ADDR
// end ;
18673: LD_VAR 0 2
18677: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18678: LD_INT 0
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
// if not factory then
18687: LD_VAR 0 1
18691: NOT
18692: IFFALSE 18696
// exit ;
18694: GO 19289
// if control = control_apeman then
18696: LD_VAR 0 4
18700: PUSH
18701: LD_INT 5
18703: EQUAL
18704: IFFALSE 18813
// begin tmp := UnitsInside ( factory ) ;
18706: LD_ADDR_VAR 0 8
18710: PUSH
18711: LD_VAR 0 1
18715: PPUSH
18716: CALL_OW 313
18720: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18721: LD_VAR 0 8
18725: PPUSH
18726: LD_INT 25
18728: PUSH
18729: LD_INT 12
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PPUSH
18736: CALL_OW 72
18740: NOT
18741: IFFALSE 18751
// control := control_manual ;
18743: LD_ADDR_VAR 0 4
18747: PUSH
18748: LD_INT 1
18750: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18751: LD_ADDR_VAR 0 8
18755: PUSH
18756: LD_VAR 0 1
18760: PPUSH
18761: CALL 18448 0 1
18765: ST_TO_ADDR
// if tmp then
18766: LD_VAR 0 8
18770: IFFALSE 18813
// begin for i in tmp do
18772: LD_ADDR_VAR 0 7
18776: PUSH
18777: LD_VAR 0 8
18781: PUSH
18782: FOR_IN
18783: IFFALSE 18811
// if i [ 1 ] = b_ext_radio then
18785: LD_VAR 0 7
18789: PUSH
18790: LD_INT 1
18792: ARRAY
18793: PUSH
18794: LD_INT 22
18796: EQUAL
18797: IFFALSE 18809
// begin control := control_remote ;
18799: LD_ADDR_VAR 0 4
18803: PUSH
18804: LD_INT 2
18806: ST_TO_ADDR
// break ;
18807: GO 18811
// end ;
18809: GO 18782
18811: POP
18812: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18813: LD_VAR 0 1
18817: PPUSH
18818: LD_VAR 0 2
18822: PPUSH
18823: LD_VAR 0 3
18827: PPUSH
18828: LD_VAR 0 4
18832: PPUSH
18833: LD_VAR 0 5
18837: PPUSH
18838: CALL_OW 448
18842: IFFALSE 18877
// begin result := [ chassis , engine , control , weapon ] ;
18844: LD_ADDR_VAR 0 6
18848: PUSH
18849: LD_VAR 0 2
18853: PUSH
18854: LD_VAR 0 3
18858: PUSH
18859: LD_VAR 0 4
18863: PUSH
18864: LD_VAR 0 5
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: ST_TO_ADDR
// exit ;
18875: GO 19289
// end ; _chassis := AvailableChassisList ( factory ) ;
18877: LD_ADDR_VAR 0 9
18881: PUSH
18882: LD_VAR 0 1
18886: PPUSH
18887: CALL_OW 475
18891: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18892: LD_ADDR_VAR 0 11
18896: PUSH
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 476
18906: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18907: LD_ADDR_VAR 0 12
18911: PUSH
18912: LD_VAR 0 1
18916: PPUSH
18917: CALL_OW 477
18921: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18922: LD_ADDR_VAR 0 10
18926: PUSH
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 478
18936: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18937: LD_VAR 0 9
18941: NOT
18942: PUSH
18943: LD_VAR 0 11
18947: NOT
18948: OR
18949: PUSH
18950: LD_VAR 0 12
18954: NOT
18955: OR
18956: PUSH
18957: LD_VAR 0 10
18961: NOT
18962: OR
18963: IFFALSE 18998
// begin result := [ chassis , engine , control , weapon ] ;
18965: LD_ADDR_VAR 0 6
18969: PUSH
18970: LD_VAR 0 2
18974: PUSH
18975: LD_VAR 0 3
18979: PUSH
18980: LD_VAR 0 4
18984: PUSH
18985: LD_VAR 0 5
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: ST_TO_ADDR
// exit ;
18996: GO 19289
// end ; if not chassis in _chassis then
18998: LD_VAR 0 2
19002: PUSH
19003: LD_VAR 0 9
19007: IN
19008: NOT
19009: IFFALSE 19035
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19011: LD_ADDR_VAR 0 2
19015: PUSH
19016: LD_VAR 0 9
19020: PUSH
19021: LD_INT 1
19023: PPUSH
19024: LD_VAR 0 9
19028: PPUSH
19029: CALL_OW 12
19033: ARRAY
19034: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19035: LD_VAR 0 2
19039: PPUSH
19040: LD_VAR 0 3
19044: PPUSH
19045: CALL 19294 0 2
19049: NOT
19050: IFFALSE 19109
// repeat engine := _engine [ 1 ] ;
19052: LD_ADDR_VAR 0 3
19056: PUSH
19057: LD_VAR 0 11
19061: PUSH
19062: LD_INT 1
19064: ARRAY
19065: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19066: LD_ADDR_VAR 0 11
19070: PUSH
19071: LD_VAR 0 11
19075: PPUSH
19076: LD_INT 1
19078: PPUSH
19079: CALL_OW 3
19083: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19084: LD_VAR 0 2
19088: PPUSH
19089: LD_VAR 0 3
19093: PPUSH
19094: CALL 19294 0 2
19098: PUSH
19099: LD_VAR 0 11
19103: PUSH
19104: EMPTY
19105: EQUAL
19106: OR
19107: IFFALSE 19052
// if not control in _control then
19109: LD_VAR 0 4
19113: PUSH
19114: LD_VAR 0 12
19118: IN
19119: NOT
19120: IFFALSE 19146
// control := _control [ rand ( 1 , _control ) ] ;
19122: LD_ADDR_VAR 0 4
19126: PUSH
19127: LD_VAR 0 12
19131: PUSH
19132: LD_INT 1
19134: PPUSH
19135: LD_VAR 0 12
19139: PPUSH
19140: CALL_OW 12
19144: ARRAY
19145: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19146: LD_VAR 0 2
19150: PPUSH
19151: LD_VAR 0 5
19155: PPUSH
19156: CALL 19514 0 2
19160: NOT
19161: IFFALSE 19220
// repeat weapon := _weapon [ 1 ] ;
19163: LD_ADDR_VAR 0 5
19167: PUSH
19168: LD_VAR 0 10
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19177: LD_ADDR_VAR 0 10
19181: PUSH
19182: LD_VAR 0 10
19186: PPUSH
19187: LD_INT 1
19189: PPUSH
19190: CALL_OW 3
19194: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19195: LD_VAR 0 2
19199: PPUSH
19200: LD_VAR 0 5
19204: PPUSH
19205: CALL 19514 0 2
19209: PUSH
19210: LD_VAR 0 10
19214: PUSH
19215: EMPTY
19216: EQUAL
19217: OR
19218: IFFALSE 19163
// result := [ ] ;
19220: LD_ADDR_VAR 0 6
19224: PUSH
19225: EMPTY
19226: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19227: LD_VAR 0 1
19231: PPUSH
19232: LD_VAR 0 2
19236: PPUSH
19237: LD_VAR 0 3
19241: PPUSH
19242: LD_VAR 0 4
19246: PPUSH
19247: LD_VAR 0 5
19251: PPUSH
19252: CALL_OW 448
19256: IFFALSE 19289
// result := [ chassis , engine , control , weapon ] ;
19258: LD_ADDR_VAR 0 6
19262: PUSH
19263: LD_VAR 0 2
19267: PUSH
19268: LD_VAR 0 3
19272: PUSH
19273: LD_VAR 0 4
19277: PUSH
19278: LD_VAR 0 5
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: LIST
19287: LIST
19288: ST_TO_ADDR
// end ;
19289: LD_VAR 0 6
19293: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19294: LD_INT 0
19296: PPUSH
// if not chassis or not engine then
19297: LD_VAR 0 1
19301: NOT
19302: PUSH
19303: LD_VAR 0 2
19307: NOT
19308: OR
19309: IFFALSE 19313
// exit ;
19311: GO 19509
// case engine of engine_solar :
19313: LD_VAR 0 2
19317: PUSH
19318: LD_INT 2
19320: DOUBLE
19321: EQUAL
19322: IFTRUE 19326
19324: GO 19364
19326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19327: LD_ADDR_VAR 0 3
19331: PUSH
19332: LD_INT 11
19334: PUSH
19335: LD_INT 12
19337: PUSH
19338: LD_INT 13
19340: PUSH
19341: LD_INT 14
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: LD_INT 2
19349: PUSH
19350: LD_INT 3
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: LIST
19357: LIST
19358: LIST
19359: LIST
19360: LIST
19361: ST_TO_ADDR
19362: GO 19493
19364: LD_INT 1
19366: DOUBLE
19367: EQUAL
19368: IFTRUE 19372
19370: GO 19434
19372: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19373: LD_ADDR_VAR 0 3
19377: PUSH
19378: LD_INT 11
19380: PUSH
19381: LD_INT 12
19383: PUSH
19384: LD_INT 13
19386: PUSH
19387: LD_INT 14
19389: PUSH
19390: LD_INT 1
19392: PUSH
19393: LD_INT 2
19395: PUSH
19396: LD_INT 3
19398: PUSH
19399: LD_INT 4
19401: PUSH
19402: LD_INT 5
19404: PUSH
19405: LD_INT 21
19407: PUSH
19408: LD_INT 23
19410: PUSH
19411: LD_INT 22
19413: PUSH
19414: LD_INT 24
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: ST_TO_ADDR
19432: GO 19493
19434: LD_INT 3
19436: DOUBLE
19437: EQUAL
19438: IFTRUE 19442
19440: GO 19492
19442: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19443: LD_ADDR_VAR 0 3
19447: PUSH
19448: LD_INT 13
19450: PUSH
19451: LD_INT 14
19453: PUSH
19454: LD_INT 2
19456: PUSH
19457: LD_INT 3
19459: PUSH
19460: LD_INT 4
19462: PUSH
19463: LD_INT 5
19465: PUSH
19466: LD_INT 21
19468: PUSH
19469: LD_INT 22
19471: PUSH
19472: LD_INT 23
19474: PUSH
19475: LD_INT 24
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: LIST
19487: LIST
19488: LIST
19489: ST_TO_ADDR
19490: GO 19493
19492: POP
// result := ( chassis in result ) ;
19493: LD_ADDR_VAR 0 3
19497: PUSH
19498: LD_VAR 0 1
19502: PUSH
19503: LD_VAR 0 3
19507: IN
19508: ST_TO_ADDR
// end ;
19509: LD_VAR 0 3
19513: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19514: LD_INT 0
19516: PPUSH
// if not chassis or not weapon then
19517: LD_VAR 0 1
19521: NOT
19522: PUSH
19523: LD_VAR 0 2
19527: NOT
19528: OR
19529: IFFALSE 19533
// exit ;
19531: GO 20595
// case weapon of us_machine_gun :
19533: LD_VAR 0 2
19537: PUSH
19538: LD_INT 2
19540: DOUBLE
19541: EQUAL
19542: IFTRUE 19546
19544: GO 19576
19546: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19547: LD_ADDR_VAR 0 3
19551: PUSH
19552: LD_INT 1
19554: PUSH
19555: LD_INT 2
19557: PUSH
19558: LD_INT 3
19560: PUSH
19561: LD_INT 4
19563: PUSH
19564: LD_INT 5
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: ST_TO_ADDR
19574: GO 20579
19576: LD_INT 3
19578: DOUBLE
19579: EQUAL
19580: IFTRUE 19584
19582: GO 19614
19584: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19585: LD_ADDR_VAR 0 3
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: LD_INT 2
19595: PUSH
19596: LD_INT 3
19598: PUSH
19599: LD_INT 4
19601: PUSH
19602: LD_INT 5
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: ST_TO_ADDR
19612: GO 20579
19614: LD_INT 11
19616: DOUBLE
19617: EQUAL
19618: IFTRUE 19622
19620: GO 19652
19622: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19623: LD_ADDR_VAR 0 3
19627: PUSH
19628: LD_INT 1
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: LD_INT 3
19636: PUSH
19637: LD_INT 4
19639: PUSH
19640: LD_INT 5
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: LIST
19647: LIST
19648: LIST
19649: ST_TO_ADDR
19650: GO 20579
19652: LD_INT 4
19654: DOUBLE
19655: EQUAL
19656: IFTRUE 19660
19658: GO 19686
19660: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19661: LD_ADDR_VAR 0 3
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 3
19671: PUSH
19672: LD_INT 4
19674: PUSH
19675: LD_INT 5
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: LIST
19682: LIST
19683: ST_TO_ADDR
19684: GO 20579
19686: LD_INT 5
19688: DOUBLE
19689: EQUAL
19690: IFTRUE 19694
19692: GO 19720
19694: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19695: LD_ADDR_VAR 0 3
19699: PUSH
19700: LD_INT 2
19702: PUSH
19703: LD_INT 3
19705: PUSH
19706: LD_INT 4
19708: PUSH
19709: LD_INT 5
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: LIST
19717: ST_TO_ADDR
19718: GO 20579
19720: LD_INT 9
19722: DOUBLE
19723: EQUAL
19724: IFTRUE 19728
19726: GO 19754
19728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: LD_INT 2
19736: PUSH
19737: LD_INT 3
19739: PUSH
19740: LD_INT 4
19742: PUSH
19743: LD_INT 5
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: ST_TO_ADDR
19752: GO 20579
19754: LD_INT 7
19756: DOUBLE
19757: EQUAL
19758: IFTRUE 19762
19760: GO 19788
19762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: LD_INT 2
19770: PUSH
19771: LD_INT 3
19773: PUSH
19774: LD_INT 4
19776: PUSH
19777: LD_INT 5
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: ST_TO_ADDR
19786: GO 20579
19788: LD_INT 12
19790: DOUBLE
19791: EQUAL
19792: IFTRUE 19796
19794: GO 19822
19796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19797: LD_ADDR_VAR 0 3
19801: PUSH
19802: LD_INT 2
19804: PUSH
19805: LD_INT 3
19807: PUSH
19808: LD_INT 4
19810: PUSH
19811: LD_INT 5
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: ST_TO_ADDR
19820: GO 20579
19822: LD_INT 13
19824: DOUBLE
19825: EQUAL
19826: IFTRUE 19830
19828: GO 19856
19830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19831: LD_ADDR_VAR 0 3
19835: PUSH
19836: LD_INT 2
19838: PUSH
19839: LD_INT 3
19841: PUSH
19842: LD_INT 4
19844: PUSH
19845: LD_INT 5
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: ST_TO_ADDR
19854: GO 20579
19856: LD_INT 14
19858: DOUBLE
19859: EQUAL
19860: IFTRUE 19864
19862: GO 19882
19864: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_INT 4
19872: PUSH
19873: LD_INT 5
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: ST_TO_ADDR
19880: GO 20579
19882: LD_INT 6
19884: DOUBLE
19885: EQUAL
19886: IFTRUE 19890
19888: GO 19908
19890: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19891: LD_ADDR_VAR 0 3
19895: PUSH
19896: LD_INT 4
19898: PUSH
19899: LD_INT 5
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: ST_TO_ADDR
19906: GO 20579
19908: LD_INT 10
19910: DOUBLE
19911: EQUAL
19912: IFTRUE 19916
19914: GO 19934
19916: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19917: LD_ADDR_VAR 0 3
19921: PUSH
19922: LD_INT 4
19924: PUSH
19925: LD_INT 5
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: ST_TO_ADDR
19932: GO 20579
19934: LD_INT 22
19936: DOUBLE
19937: EQUAL
19938: IFTRUE 19942
19940: GO 19968
19942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19943: LD_ADDR_VAR 0 3
19947: PUSH
19948: LD_INT 11
19950: PUSH
19951: LD_INT 12
19953: PUSH
19954: LD_INT 13
19956: PUSH
19957: LD_INT 14
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: LIST
19964: LIST
19965: ST_TO_ADDR
19966: GO 20579
19968: LD_INT 23
19970: DOUBLE
19971: EQUAL
19972: IFTRUE 19976
19974: GO 20002
19976: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19977: LD_ADDR_VAR 0 3
19981: PUSH
19982: LD_INT 11
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: LD_INT 13
19990: PUSH
19991: LD_INT 14
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: ST_TO_ADDR
20000: GO 20579
20002: LD_INT 24
20004: DOUBLE
20005: EQUAL
20006: IFTRUE 20010
20008: GO 20036
20010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20011: LD_ADDR_VAR 0 3
20015: PUSH
20016: LD_INT 11
20018: PUSH
20019: LD_INT 12
20021: PUSH
20022: LD_INT 13
20024: PUSH
20025: LD_INT 14
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: ST_TO_ADDR
20034: GO 20579
20036: LD_INT 30
20038: DOUBLE
20039: EQUAL
20040: IFTRUE 20044
20042: GO 20070
20044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20045: LD_ADDR_VAR 0 3
20049: PUSH
20050: LD_INT 11
20052: PUSH
20053: LD_INT 12
20055: PUSH
20056: LD_INT 13
20058: PUSH
20059: LD_INT 14
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: LIST
20066: LIST
20067: ST_TO_ADDR
20068: GO 20579
20070: LD_INT 25
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20096
20078: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20079: LD_ADDR_VAR 0 3
20083: PUSH
20084: LD_INT 13
20086: PUSH
20087: LD_INT 14
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: ST_TO_ADDR
20094: GO 20579
20096: LD_INT 27
20098: DOUBLE
20099: EQUAL
20100: IFTRUE 20104
20102: GO 20122
20104: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20105: LD_ADDR_VAR 0 3
20109: PUSH
20110: LD_INT 13
20112: PUSH
20113: LD_INT 14
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: ST_TO_ADDR
20120: GO 20579
20122: LD_EXP 112
20126: DOUBLE
20127: EQUAL
20128: IFTRUE 20132
20130: GO 20158
20132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20133: LD_ADDR_VAR 0 3
20137: PUSH
20138: LD_INT 11
20140: PUSH
20141: LD_INT 12
20143: PUSH
20144: LD_INT 13
20146: PUSH
20147: LD_INT 14
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: ST_TO_ADDR
20156: GO 20579
20158: LD_INT 28
20160: DOUBLE
20161: EQUAL
20162: IFTRUE 20166
20164: GO 20184
20166: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 13
20174: PUSH
20175: LD_INT 14
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: ST_TO_ADDR
20182: GO 20579
20184: LD_INT 29
20186: DOUBLE
20187: EQUAL
20188: IFTRUE 20192
20190: GO 20210
20192: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_INT 13
20200: PUSH
20201: LD_INT 14
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: ST_TO_ADDR
20208: GO 20579
20210: LD_INT 31
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20236
20218: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20219: LD_ADDR_VAR 0 3
20223: PUSH
20224: LD_INT 13
20226: PUSH
20227: LD_INT 14
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: ST_TO_ADDR
20234: GO 20579
20236: LD_INT 26
20238: DOUBLE
20239: EQUAL
20240: IFTRUE 20244
20242: GO 20262
20244: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: LD_INT 13
20252: PUSH
20253: LD_INT 14
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: ST_TO_ADDR
20260: GO 20579
20262: LD_INT 42
20264: DOUBLE
20265: EQUAL
20266: IFTRUE 20270
20268: GO 20296
20270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20271: LD_ADDR_VAR 0 3
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 22
20281: PUSH
20282: LD_INT 23
20284: PUSH
20285: LD_INT 24
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: ST_TO_ADDR
20294: GO 20579
20296: LD_INT 43
20298: DOUBLE
20299: EQUAL
20300: IFTRUE 20304
20302: GO 20330
20304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20305: LD_ADDR_VAR 0 3
20309: PUSH
20310: LD_INT 21
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_INT 23
20318: PUSH
20319: LD_INT 24
20321: PUSH
20322: EMPTY
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: ST_TO_ADDR
20328: GO 20579
20330: LD_INT 44
20332: DOUBLE
20333: EQUAL
20334: IFTRUE 20338
20336: GO 20364
20338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20339: LD_ADDR_VAR 0 3
20343: PUSH
20344: LD_INT 21
20346: PUSH
20347: LD_INT 22
20349: PUSH
20350: LD_INT 23
20352: PUSH
20353: LD_INT 24
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: LIST
20360: LIST
20361: ST_TO_ADDR
20362: GO 20579
20364: LD_INT 45
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20398
20372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20373: LD_ADDR_VAR 0 3
20377: PUSH
20378: LD_INT 21
20380: PUSH
20381: LD_INT 22
20383: PUSH
20384: LD_INT 23
20386: PUSH
20387: LD_INT 24
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: ST_TO_ADDR
20396: GO 20579
20398: LD_INT 49
20400: DOUBLE
20401: EQUAL
20402: IFTRUE 20406
20404: GO 20432
20406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20407: LD_ADDR_VAR 0 3
20411: PUSH
20412: LD_INT 21
20414: PUSH
20415: LD_INT 22
20417: PUSH
20418: LD_INT 23
20420: PUSH
20421: LD_INT 24
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: ST_TO_ADDR
20430: GO 20579
20432: LD_INT 51
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20466
20440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20441: LD_ADDR_VAR 0 3
20445: PUSH
20446: LD_INT 21
20448: PUSH
20449: LD_INT 22
20451: PUSH
20452: LD_INT 23
20454: PUSH
20455: LD_INT 24
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: LIST
20462: LIST
20463: ST_TO_ADDR
20464: GO 20579
20466: LD_INT 52
20468: DOUBLE
20469: EQUAL
20470: IFTRUE 20474
20472: GO 20500
20474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20475: LD_ADDR_VAR 0 3
20479: PUSH
20480: LD_INT 21
20482: PUSH
20483: LD_INT 22
20485: PUSH
20486: LD_INT 23
20488: PUSH
20489: LD_INT 24
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: ST_TO_ADDR
20498: GO 20579
20500: LD_INT 53
20502: DOUBLE
20503: EQUAL
20504: IFTRUE 20508
20506: GO 20526
20508: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20509: LD_ADDR_VAR 0 3
20513: PUSH
20514: LD_INT 23
20516: PUSH
20517: LD_INT 24
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: ST_TO_ADDR
20524: GO 20579
20526: LD_INT 46
20528: DOUBLE
20529: EQUAL
20530: IFTRUE 20534
20532: GO 20552
20534: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20535: LD_ADDR_VAR 0 3
20539: PUSH
20540: LD_INT 23
20542: PUSH
20543: LD_INT 24
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: ST_TO_ADDR
20550: GO 20579
20552: LD_INT 47
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20578
20560: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20561: LD_ADDR_VAR 0 3
20565: PUSH
20566: LD_INT 23
20568: PUSH
20569: LD_INT 24
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: ST_TO_ADDR
20576: GO 20579
20578: POP
// result := ( chassis in result ) ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 1
20588: PUSH
20589: LD_VAR 0 3
20593: IN
20594: ST_TO_ADDR
// end ;
20595: LD_VAR 0 3
20599: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20600: LD_INT 0
20602: PPUSH
20603: PPUSH
20604: PPUSH
20605: PPUSH
20606: PPUSH
20607: PPUSH
20608: PPUSH
// result := array ;
20609: LD_ADDR_VAR 0 5
20613: PUSH
20614: LD_VAR 0 1
20618: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20619: LD_VAR 0 1
20623: NOT
20624: PUSH
20625: LD_VAR 0 2
20629: NOT
20630: OR
20631: PUSH
20632: LD_VAR 0 3
20636: NOT
20637: OR
20638: PUSH
20639: LD_VAR 0 2
20643: PUSH
20644: LD_VAR 0 1
20648: GREATER
20649: OR
20650: PUSH
20651: LD_VAR 0 3
20655: PUSH
20656: LD_VAR 0 1
20660: GREATER
20661: OR
20662: IFFALSE 20666
// exit ;
20664: GO 20962
// if direction then
20666: LD_VAR 0 4
20670: IFFALSE 20734
// begin d := 1 ;
20672: LD_ADDR_VAR 0 9
20676: PUSH
20677: LD_INT 1
20679: ST_TO_ADDR
// if i_from > i_to then
20680: LD_VAR 0 2
20684: PUSH
20685: LD_VAR 0 3
20689: GREATER
20690: IFFALSE 20716
// length := ( array - i_from ) + i_to else
20692: LD_ADDR_VAR 0 11
20696: PUSH
20697: LD_VAR 0 1
20701: PUSH
20702: LD_VAR 0 2
20706: MINUS
20707: PUSH
20708: LD_VAR 0 3
20712: PLUS
20713: ST_TO_ADDR
20714: GO 20732
// length := i_to - i_from ;
20716: LD_ADDR_VAR 0 11
20720: PUSH
20721: LD_VAR 0 3
20725: PUSH
20726: LD_VAR 0 2
20730: MINUS
20731: ST_TO_ADDR
// end else
20732: GO 20795
// begin d := - 1 ;
20734: LD_ADDR_VAR 0 9
20738: PUSH
20739: LD_INT 1
20741: NEG
20742: ST_TO_ADDR
// if i_from > i_to then
20743: LD_VAR 0 2
20747: PUSH
20748: LD_VAR 0 3
20752: GREATER
20753: IFFALSE 20773
// length := i_from - i_to else
20755: LD_ADDR_VAR 0 11
20759: PUSH
20760: LD_VAR 0 2
20764: PUSH
20765: LD_VAR 0 3
20769: MINUS
20770: ST_TO_ADDR
20771: GO 20795
// length := ( array - i_to ) + i_from ;
20773: LD_ADDR_VAR 0 11
20777: PUSH
20778: LD_VAR 0 1
20782: PUSH
20783: LD_VAR 0 3
20787: MINUS
20788: PUSH
20789: LD_VAR 0 2
20793: PLUS
20794: ST_TO_ADDR
// end ; if not length then
20795: LD_VAR 0 11
20799: NOT
20800: IFFALSE 20804
// exit ;
20802: GO 20962
// tmp := array ;
20804: LD_ADDR_VAR 0 10
20808: PUSH
20809: LD_VAR 0 1
20813: ST_TO_ADDR
// for i = 1 to length do
20814: LD_ADDR_VAR 0 6
20818: PUSH
20819: DOUBLE
20820: LD_INT 1
20822: DEC
20823: ST_TO_ADDR
20824: LD_VAR 0 11
20828: PUSH
20829: FOR_TO
20830: IFFALSE 20950
// begin for j = 1 to array do
20832: LD_ADDR_VAR 0 7
20836: PUSH
20837: DOUBLE
20838: LD_INT 1
20840: DEC
20841: ST_TO_ADDR
20842: LD_VAR 0 1
20846: PUSH
20847: FOR_TO
20848: IFFALSE 20936
// begin k := j + d ;
20850: LD_ADDR_VAR 0 8
20854: PUSH
20855: LD_VAR 0 7
20859: PUSH
20860: LD_VAR 0 9
20864: PLUS
20865: ST_TO_ADDR
// if k > array then
20866: LD_VAR 0 8
20870: PUSH
20871: LD_VAR 0 1
20875: GREATER
20876: IFFALSE 20886
// k := 1 ;
20878: LD_ADDR_VAR 0 8
20882: PUSH
20883: LD_INT 1
20885: ST_TO_ADDR
// if not k then
20886: LD_VAR 0 8
20890: NOT
20891: IFFALSE 20903
// k := array ;
20893: LD_ADDR_VAR 0 8
20897: PUSH
20898: LD_VAR 0 1
20902: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20903: LD_ADDR_VAR 0 10
20907: PUSH
20908: LD_VAR 0 10
20912: PPUSH
20913: LD_VAR 0 8
20917: PPUSH
20918: LD_VAR 0 1
20922: PUSH
20923: LD_VAR 0 7
20927: ARRAY
20928: PPUSH
20929: CALL_OW 1
20933: ST_TO_ADDR
// end ;
20934: GO 20847
20936: POP
20937: POP
// array := tmp ;
20938: LD_ADDR_VAR 0 1
20942: PUSH
20943: LD_VAR 0 10
20947: ST_TO_ADDR
// end ;
20948: GO 20829
20950: POP
20951: POP
// result := array ;
20952: LD_ADDR_VAR 0 5
20956: PUSH
20957: LD_VAR 0 1
20961: ST_TO_ADDR
// end ;
20962: LD_VAR 0 5
20966: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20967: LD_INT 0
20969: PPUSH
20970: PPUSH
// result := 0 ;
20971: LD_ADDR_VAR 0 3
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// if not array or not value in array then
20979: LD_VAR 0 1
20983: NOT
20984: PUSH
20985: LD_VAR 0 2
20989: PUSH
20990: LD_VAR 0 1
20994: IN
20995: NOT
20996: OR
20997: IFFALSE 21001
// exit ;
20999: GO 21055
// for i = 1 to array do
21001: LD_ADDR_VAR 0 4
21005: PUSH
21006: DOUBLE
21007: LD_INT 1
21009: DEC
21010: ST_TO_ADDR
21011: LD_VAR 0 1
21015: PUSH
21016: FOR_TO
21017: IFFALSE 21053
// if value = array [ i ] then
21019: LD_VAR 0 2
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: LD_VAR 0 4
21033: ARRAY
21034: EQUAL
21035: IFFALSE 21051
// begin result := i ;
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: LD_VAR 0 4
21046: ST_TO_ADDR
// exit ;
21047: POP
21048: POP
21049: GO 21055
// end ;
21051: GO 21016
21053: POP
21054: POP
// end ;
21055: LD_VAR 0 3
21059: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21060: LD_INT 0
21062: PPUSH
// vc_chassis := chassis ;
21063: LD_ADDR_OWVAR 37
21067: PUSH
21068: LD_VAR 0 1
21072: ST_TO_ADDR
// vc_engine := engine ;
21073: LD_ADDR_OWVAR 39
21077: PUSH
21078: LD_VAR 0 2
21082: ST_TO_ADDR
// vc_control := control ;
21083: LD_ADDR_OWVAR 38
21087: PUSH
21088: LD_VAR 0 3
21092: ST_TO_ADDR
// vc_weapon := weapon ;
21093: LD_ADDR_OWVAR 40
21097: PUSH
21098: LD_VAR 0 4
21102: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21103: LD_ADDR_OWVAR 41
21107: PUSH
21108: LD_VAR 0 5
21112: ST_TO_ADDR
// end ;
21113: LD_VAR 0 6
21117: RET
// export function WantPlant ( unit ) ; var task ; begin
21118: LD_INT 0
21120: PPUSH
21121: PPUSH
// result := false ;
21122: LD_ADDR_VAR 0 2
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21130: LD_ADDR_VAR 0 3
21134: PUSH
21135: LD_VAR 0 1
21139: PPUSH
21140: CALL_OW 437
21144: ST_TO_ADDR
// if task then
21145: LD_VAR 0 3
21149: IFFALSE 21177
// if task [ 1 ] [ 1 ] = p then
21151: LD_VAR 0 3
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PUSH
21160: LD_INT 1
21162: ARRAY
21163: PUSH
21164: LD_STRING p
21166: EQUAL
21167: IFFALSE 21177
// result := true ;
21169: LD_ADDR_VAR 0 2
21173: PUSH
21174: LD_INT 1
21176: ST_TO_ADDR
// end ;
21177: LD_VAR 0 2
21181: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21182: LD_INT 0
21184: PPUSH
21185: PPUSH
21186: PPUSH
21187: PPUSH
// if pos < 1 then
21188: LD_VAR 0 2
21192: PUSH
21193: LD_INT 1
21195: LESS
21196: IFFALSE 21200
// exit ;
21198: GO 21503
// if pos = 1 then
21200: LD_VAR 0 2
21204: PUSH
21205: LD_INT 1
21207: EQUAL
21208: IFFALSE 21241
// result := Replace ( arr , pos [ 1 ] , value ) else
21210: LD_ADDR_VAR 0 4
21214: PUSH
21215: LD_VAR 0 1
21219: PPUSH
21220: LD_VAR 0 2
21224: PUSH
21225: LD_INT 1
21227: ARRAY
21228: PPUSH
21229: LD_VAR 0 3
21233: PPUSH
21234: CALL_OW 1
21238: ST_TO_ADDR
21239: GO 21503
// begin tmp := arr ;
21241: LD_ADDR_VAR 0 6
21245: PUSH
21246: LD_VAR 0 1
21250: ST_TO_ADDR
// s_arr := [ tmp ] ;
21251: LD_ADDR_VAR 0 7
21255: PUSH
21256: LD_VAR 0 6
21260: PUSH
21261: EMPTY
21262: LIST
21263: ST_TO_ADDR
// for i = 1 to pos - 1 do
21264: LD_ADDR_VAR 0 5
21268: PUSH
21269: DOUBLE
21270: LD_INT 1
21272: DEC
21273: ST_TO_ADDR
21274: LD_VAR 0 2
21278: PUSH
21279: LD_INT 1
21281: MINUS
21282: PUSH
21283: FOR_TO
21284: IFFALSE 21329
// begin tmp := tmp [ pos [ i ] ] ;
21286: LD_ADDR_VAR 0 6
21290: PUSH
21291: LD_VAR 0 6
21295: PUSH
21296: LD_VAR 0 2
21300: PUSH
21301: LD_VAR 0 5
21305: ARRAY
21306: ARRAY
21307: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21308: LD_ADDR_VAR 0 7
21312: PUSH
21313: LD_VAR 0 7
21317: PUSH
21318: LD_VAR 0 6
21322: PUSH
21323: EMPTY
21324: LIST
21325: ADD
21326: ST_TO_ADDR
// end ;
21327: GO 21283
21329: POP
21330: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21331: LD_ADDR_VAR 0 6
21335: PUSH
21336: LD_VAR 0 6
21340: PPUSH
21341: LD_VAR 0 2
21345: PUSH
21346: LD_VAR 0 2
21350: ARRAY
21351: PPUSH
21352: LD_VAR 0 3
21356: PPUSH
21357: CALL_OW 1
21361: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21362: LD_ADDR_VAR 0 7
21366: PUSH
21367: LD_VAR 0 7
21371: PPUSH
21372: LD_VAR 0 7
21376: PPUSH
21377: LD_VAR 0 6
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
// for i = s_arr downto 2 do
21387: LD_ADDR_VAR 0 5
21391: PUSH
21392: DOUBLE
21393: LD_VAR 0 7
21397: INC
21398: ST_TO_ADDR
21399: LD_INT 2
21401: PUSH
21402: FOR_DOWNTO
21403: IFFALSE 21487
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21405: LD_ADDR_VAR 0 6
21409: PUSH
21410: LD_VAR 0 7
21414: PUSH
21415: LD_VAR 0 5
21419: PUSH
21420: LD_INT 1
21422: MINUS
21423: ARRAY
21424: PPUSH
21425: LD_VAR 0 2
21429: PUSH
21430: LD_VAR 0 5
21434: PUSH
21435: LD_INT 1
21437: MINUS
21438: ARRAY
21439: PPUSH
21440: LD_VAR 0 7
21444: PUSH
21445: LD_VAR 0 5
21449: ARRAY
21450: PPUSH
21451: CALL_OW 1
21455: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21456: LD_ADDR_VAR 0 7
21460: PUSH
21461: LD_VAR 0 7
21465: PPUSH
21466: LD_VAR 0 5
21470: PUSH
21471: LD_INT 1
21473: MINUS
21474: PPUSH
21475: LD_VAR 0 6
21479: PPUSH
21480: CALL_OW 1
21484: ST_TO_ADDR
// end ;
21485: GO 21402
21487: POP
21488: POP
// result := s_arr [ 1 ] ;
21489: LD_ADDR_VAR 0 4
21493: PUSH
21494: LD_VAR 0 7
21498: PUSH
21499: LD_INT 1
21501: ARRAY
21502: ST_TO_ADDR
// end ; end ;
21503: LD_VAR 0 4
21507: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21508: LD_INT 0
21510: PPUSH
21511: PPUSH
// if not list then
21512: LD_VAR 0 1
21516: NOT
21517: IFFALSE 21521
// exit ;
21519: GO 21612
// i := list [ pos1 ] ;
21521: LD_ADDR_VAR 0 5
21525: PUSH
21526: LD_VAR 0 1
21530: PUSH
21531: LD_VAR 0 2
21535: ARRAY
21536: ST_TO_ADDR
// if not i then
21537: LD_VAR 0 5
21541: NOT
21542: IFFALSE 21546
// exit ;
21544: GO 21612
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21546: LD_ADDR_VAR 0 1
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: LD_VAR 0 2
21560: PPUSH
21561: LD_VAR 0 1
21565: PUSH
21566: LD_VAR 0 3
21570: ARRAY
21571: PPUSH
21572: CALL_OW 1
21576: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21577: LD_ADDR_VAR 0 1
21581: PUSH
21582: LD_VAR 0 1
21586: PPUSH
21587: LD_VAR 0 3
21591: PPUSH
21592: LD_VAR 0 5
21596: PPUSH
21597: CALL_OW 1
21601: ST_TO_ADDR
// result := list ;
21602: LD_ADDR_VAR 0 4
21606: PUSH
21607: LD_VAR 0 1
21611: ST_TO_ADDR
// end ;
21612: LD_VAR 0 4
21616: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21617: LD_INT 0
21619: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21620: LD_ADDR_VAR 0 5
21624: PUSH
21625: LD_VAR 0 1
21629: PPUSH
21630: CALL_OW 250
21634: PPUSH
21635: LD_VAR 0 1
21639: PPUSH
21640: CALL_OW 251
21644: PPUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: LD_VAR 0 3
21654: PPUSH
21655: LD_VAR 0 4
21659: PPUSH
21660: CALL 21670 0 5
21664: ST_TO_ADDR
// end ;
21665: LD_VAR 0 5
21669: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21670: LD_INT 0
21672: PPUSH
21673: PPUSH
21674: PPUSH
21675: PPUSH
// if not list then
21676: LD_VAR 0 3
21680: NOT
21681: IFFALSE 21685
// exit ;
21683: GO 22073
// result := [ ] ;
21685: LD_ADDR_VAR 0 6
21689: PUSH
21690: EMPTY
21691: ST_TO_ADDR
// for i in list do
21692: LD_ADDR_VAR 0 7
21696: PUSH
21697: LD_VAR 0 3
21701: PUSH
21702: FOR_IN
21703: IFFALSE 21905
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21705: LD_ADDR_VAR 0 9
21709: PUSH
21710: LD_VAR 0 7
21714: PPUSH
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL_OW 297
21729: ST_TO_ADDR
// if not result then
21730: LD_VAR 0 6
21734: NOT
21735: IFFALSE 21761
// result := [ [ i , tmp ] ] else
21737: LD_ADDR_VAR 0 6
21741: PUSH
21742: LD_VAR 0 7
21746: PUSH
21747: LD_VAR 0 9
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: ST_TO_ADDR
21759: GO 21903
// begin if result [ result ] [ 2 ] < tmp then
21761: LD_VAR 0 6
21765: PUSH
21766: LD_VAR 0 6
21770: ARRAY
21771: PUSH
21772: LD_INT 2
21774: ARRAY
21775: PUSH
21776: LD_VAR 0 9
21780: LESS
21781: IFFALSE 21823
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21783: LD_ADDR_VAR 0 6
21787: PUSH
21788: LD_VAR 0 6
21792: PPUSH
21793: LD_VAR 0 6
21797: PUSH
21798: LD_INT 1
21800: PLUS
21801: PPUSH
21802: LD_VAR 0 7
21806: PUSH
21807: LD_VAR 0 9
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 2
21820: ST_TO_ADDR
21821: GO 21903
// for j = 1 to result do
21823: LD_ADDR_VAR 0 8
21827: PUSH
21828: DOUBLE
21829: LD_INT 1
21831: DEC
21832: ST_TO_ADDR
21833: LD_VAR 0 6
21837: PUSH
21838: FOR_TO
21839: IFFALSE 21901
// begin if tmp < result [ j ] [ 2 ] then
21841: LD_VAR 0 9
21845: PUSH
21846: LD_VAR 0 6
21850: PUSH
21851: LD_VAR 0 8
21855: ARRAY
21856: PUSH
21857: LD_INT 2
21859: ARRAY
21860: LESS
21861: IFFALSE 21899
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21863: LD_ADDR_VAR 0 6
21867: PUSH
21868: LD_VAR 0 6
21872: PPUSH
21873: LD_VAR 0 8
21877: PPUSH
21878: LD_VAR 0 7
21882: PUSH
21883: LD_VAR 0 9
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PPUSH
21892: CALL_OW 2
21896: ST_TO_ADDR
// break ;
21897: GO 21901
// end ; end ;
21899: GO 21838
21901: POP
21902: POP
// end ; end ;
21903: GO 21702
21905: POP
21906: POP
// if result and not asc then
21907: LD_VAR 0 6
21911: PUSH
21912: LD_VAR 0 4
21916: NOT
21917: AND
21918: IFFALSE 21993
// begin tmp := result ;
21920: LD_ADDR_VAR 0 9
21924: PUSH
21925: LD_VAR 0 6
21929: ST_TO_ADDR
// for i = tmp downto 1 do
21930: LD_ADDR_VAR 0 7
21934: PUSH
21935: DOUBLE
21936: LD_VAR 0 9
21940: INC
21941: ST_TO_ADDR
21942: LD_INT 1
21944: PUSH
21945: FOR_DOWNTO
21946: IFFALSE 21991
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21948: LD_ADDR_VAR 0 6
21952: PUSH
21953: LD_VAR 0 6
21957: PPUSH
21958: LD_VAR 0 9
21962: PUSH
21963: LD_VAR 0 7
21967: MINUS
21968: PUSH
21969: LD_INT 1
21971: PLUS
21972: PPUSH
21973: LD_VAR 0 9
21977: PUSH
21978: LD_VAR 0 7
21982: ARRAY
21983: PPUSH
21984: CALL_OW 1
21988: ST_TO_ADDR
21989: GO 21945
21991: POP
21992: POP
// end ; tmp := [ ] ;
21993: LD_ADDR_VAR 0 9
21997: PUSH
21998: EMPTY
21999: ST_TO_ADDR
// if mode then
22000: LD_VAR 0 5
22004: IFFALSE 22073
// begin for i = 1 to result do
22006: LD_ADDR_VAR 0 7
22010: PUSH
22011: DOUBLE
22012: LD_INT 1
22014: DEC
22015: ST_TO_ADDR
22016: LD_VAR 0 6
22020: PUSH
22021: FOR_TO
22022: IFFALSE 22061
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22024: LD_ADDR_VAR 0 9
22028: PUSH
22029: LD_VAR 0 9
22033: PPUSH
22034: LD_VAR 0 7
22038: PPUSH
22039: LD_VAR 0 6
22043: PUSH
22044: LD_VAR 0 7
22048: ARRAY
22049: PUSH
22050: LD_INT 1
22052: ARRAY
22053: PPUSH
22054: CALL_OW 1
22058: ST_TO_ADDR
22059: GO 22021
22061: POP
22062: POP
// result := tmp ;
22063: LD_ADDR_VAR 0 6
22067: PUSH
22068: LD_VAR 0 9
22072: ST_TO_ADDR
// end ; end ;
22073: LD_VAR 0 6
22077: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22078: LD_INT 0
22080: PPUSH
22081: PPUSH
22082: PPUSH
22083: PPUSH
22084: PPUSH
22085: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22086: LD_ADDR_VAR 0 5
22090: PUSH
22091: LD_INT 0
22093: PUSH
22094: LD_INT 0
22096: PUSH
22097: LD_INT 0
22099: PUSH
22100: EMPTY
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: ST_TO_ADDR
// if not x or not y then
22108: LD_VAR 0 2
22112: NOT
22113: PUSH
22114: LD_VAR 0 3
22118: NOT
22119: OR
22120: IFFALSE 22124
// exit ;
22122: GO 23776
// if not range then
22124: LD_VAR 0 4
22128: NOT
22129: IFFALSE 22139
// range := 10 ;
22131: LD_ADDR_VAR 0 4
22135: PUSH
22136: LD_INT 10
22138: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22139: LD_ADDR_VAR 0 8
22143: PUSH
22144: LD_INT 81
22146: PUSH
22147: LD_VAR 0 1
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: LD_INT 92
22158: PUSH
22159: LD_VAR 0 2
22163: PUSH
22164: LD_VAR 0 3
22168: PUSH
22169: LD_VAR 0 4
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: LIST
22179: PUSH
22180: LD_INT 3
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 69
22206: ST_TO_ADDR
// if not tmp then
22207: LD_VAR 0 8
22211: NOT
22212: IFFALSE 22216
// exit ;
22214: GO 23776
// for i in tmp do
22216: LD_ADDR_VAR 0 6
22220: PUSH
22221: LD_VAR 0 8
22225: PUSH
22226: FOR_IN
22227: IFFALSE 23751
// begin points := [ 0 , 0 , 0 ] ;
22229: LD_ADDR_VAR 0 9
22233: PUSH
22234: LD_INT 0
22236: PUSH
22237: LD_INT 0
22239: PUSH
22240: LD_INT 0
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: ST_TO_ADDR
// bpoints := 1 ;
22248: LD_ADDR_VAR 0 10
22252: PUSH
22253: LD_INT 1
22255: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22256: LD_VAR 0 6
22260: PPUSH
22261: CALL_OW 247
22265: PUSH
22266: LD_INT 1
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22852
22274: POP
// begin if GetClass ( i ) = 1 then
22275: LD_VAR 0 6
22279: PPUSH
22280: CALL_OW 257
22284: PUSH
22285: LD_INT 1
22287: EQUAL
22288: IFFALSE 22309
// points := [ 10 , 5 , 3 ] ;
22290: LD_ADDR_VAR 0 9
22294: PUSH
22295: LD_INT 10
22297: PUSH
22298: LD_INT 5
22300: PUSH
22301: LD_INT 3
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22309: LD_VAR 0 6
22313: PPUSH
22314: CALL_OW 257
22318: PUSH
22319: LD_INT 2
22321: PUSH
22322: LD_INT 3
22324: PUSH
22325: LD_INT 4
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: IN
22333: IFFALSE 22354
// points := [ 3 , 2 , 1 ] ;
22335: LD_ADDR_VAR 0 9
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: LD_INT 2
22345: PUSH
22346: LD_INT 1
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22354: LD_VAR 0 6
22358: PPUSH
22359: CALL_OW 257
22363: PUSH
22364: LD_INT 5
22366: EQUAL
22367: IFFALSE 22388
// points := [ 130 , 5 , 2 ] ;
22369: LD_ADDR_VAR 0 9
22373: PUSH
22374: LD_INT 130
22376: PUSH
22377: LD_INT 5
22379: PUSH
22380: LD_INT 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: LIST
22387: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22388: LD_VAR 0 6
22392: PPUSH
22393: CALL_OW 257
22397: PUSH
22398: LD_INT 8
22400: EQUAL
22401: IFFALSE 22422
// points := [ 35 , 35 , 30 ] ;
22403: LD_ADDR_VAR 0 9
22407: PUSH
22408: LD_INT 35
22410: PUSH
22411: LD_INT 35
22413: PUSH
22414: LD_INT 30
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22422: LD_VAR 0 6
22426: PPUSH
22427: CALL_OW 257
22431: PUSH
22432: LD_INT 9
22434: EQUAL
22435: IFFALSE 22456
// points := [ 20 , 55 , 40 ] ;
22437: LD_ADDR_VAR 0 9
22441: PUSH
22442: LD_INT 20
22444: PUSH
22445: LD_INT 55
22447: PUSH
22448: LD_INT 40
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: LIST
22455: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22456: LD_VAR 0 6
22460: PPUSH
22461: CALL_OW 257
22465: PUSH
22466: LD_INT 12
22468: PUSH
22469: LD_INT 16
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: IN
22476: IFFALSE 22497
// points := [ 5 , 3 , 2 ] ;
22478: LD_ADDR_VAR 0 9
22482: PUSH
22483: LD_INT 5
22485: PUSH
22486: LD_INT 3
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: LIST
22496: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22497: LD_VAR 0 6
22501: PPUSH
22502: CALL_OW 257
22506: PUSH
22507: LD_INT 17
22509: EQUAL
22510: IFFALSE 22531
// points := [ 100 , 50 , 75 ] ;
22512: LD_ADDR_VAR 0 9
22516: PUSH
22517: LD_INT 100
22519: PUSH
22520: LD_INT 50
22522: PUSH
22523: LD_INT 75
22525: PUSH
22526: EMPTY
22527: LIST
22528: LIST
22529: LIST
22530: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22531: LD_VAR 0 6
22535: PPUSH
22536: CALL_OW 257
22540: PUSH
22541: LD_INT 15
22543: EQUAL
22544: IFFALSE 22565
// points := [ 10 , 5 , 3 ] ;
22546: LD_ADDR_VAR 0 9
22550: PUSH
22551: LD_INT 10
22553: PUSH
22554: LD_INT 5
22556: PUSH
22557: LD_INT 3
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22565: LD_VAR 0 6
22569: PPUSH
22570: CALL_OW 257
22574: PUSH
22575: LD_INT 14
22577: EQUAL
22578: IFFALSE 22599
// points := [ 10 , 0 , 0 ] ;
22580: LD_ADDR_VAR 0 9
22584: PUSH
22585: LD_INT 10
22587: PUSH
22588: LD_INT 0
22590: PUSH
22591: LD_INT 0
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22599: LD_VAR 0 6
22603: PPUSH
22604: CALL_OW 257
22608: PUSH
22609: LD_INT 11
22611: EQUAL
22612: IFFALSE 22633
// points := [ 30 , 10 , 5 ] ;
22614: LD_ADDR_VAR 0 9
22618: PUSH
22619: LD_INT 30
22621: PUSH
22622: LD_INT 10
22624: PUSH
22625: LD_INT 5
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: LIST
22632: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22633: LD_VAR 0 1
22637: PPUSH
22638: LD_INT 5
22640: PPUSH
22641: CALL_OW 321
22645: PUSH
22646: LD_INT 2
22648: EQUAL
22649: IFFALSE 22666
// bpoints := bpoints * 1.8 ;
22651: LD_ADDR_VAR 0 10
22655: PUSH
22656: LD_VAR 0 10
22660: PUSH
22661: LD_REAL  1.80000000000000E+0000
22664: MUL
22665: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22666: LD_VAR 0 6
22670: PPUSH
22671: CALL_OW 257
22675: PUSH
22676: LD_INT 1
22678: PUSH
22679: LD_INT 2
22681: PUSH
22682: LD_INT 3
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: IN
22694: PUSH
22695: LD_VAR 0 1
22699: PPUSH
22700: LD_INT 51
22702: PPUSH
22703: CALL_OW 321
22707: PUSH
22708: LD_INT 2
22710: EQUAL
22711: AND
22712: IFFALSE 22729
// bpoints := bpoints * 1.2 ;
22714: LD_ADDR_VAR 0 10
22718: PUSH
22719: LD_VAR 0 10
22723: PUSH
22724: LD_REAL  1.20000000000000E+0000
22727: MUL
22728: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22729: LD_VAR 0 6
22733: PPUSH
22734: CALL_OW 257
22738: PUSH
22739: LD_INT 5
22741: PUSH
22742: LD_INT 7
22744: PUSH
22745: LD_INT 9
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: LIST
22752: IN
22753: PUSH
22754: LD_VAR 0 1
22758: PPUSH
22759: LD_INT 52
22761: PPUSH
22762: CALL_OW 321
22766: PUSH
22767: LD_INT 2
22769: EQUAL
22770: AND
22771: IFFALSE 22788
// bpoints := bpoints * 1.5 ;
22773: LD_ADDR_VAR 0 10
22777: PUSH
22778: LD_VAR 0 10
22782: PUSH
22783: LD_REAL  1.50000000000000E+0000
22786: MUL
22787: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22788: LD_VAR 0 1
22792: PPUSH
22793: LD_INT 66
22795: PPUSH
22796: CALL_OW 321
22800: PUSH
22801: LD_INT 2
22803: EQUAL
22804: IFFALSE 22821
// bpoints := bpoints * 1.1 ;
22806: LD_ADDR_VAR 0 10
22810: PUSH
22811: LD_VAR 0 10
22815: PUSH
22816: LD_REAL  1.10000000000000E+0000
22819: MUL
22820: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22821: LD_ADDR_VAR 0 10
22825: PUSH
22826: LD_VAR 0 10
22830: PUSH
22831: LD_VAR 0 6
22835: PPUSH
22836: LD_INT 1
22838: PPUSH
22839: CALL_OW 259
22843: PUSH
22844: LD_REAL  1.15000000000000E+0000
22847: MUL
22848: MUL
22849: ST_TO_ADDR
// end ; unit_vehicle :
22850: GO 23680
22852: LD_INT 2
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 23668
22860: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22861: LD_VAR 0 6
22865: PPUSH
22866: CALL_OW 264
22870: PUSH
22871: LD_INT 2
22873: PUSH
22874: LD_INT 42
22876: PUSH
22877: LD_INT 24
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: LIST
22884: IN
22885: IFFALSE 22906
// points := [ 25 , 5 , 3 ] ;
22887: LD_ADDR_VAR 0 9
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 5
22897: PUSH
22898: LD_INT 3
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22906: LD_VAR 0 6
22910: PPUSH
22911: CALL_OW 264
22915: PUSH
22916: LD_INT 4
22918: PUSH
22919: LD_INT 43
22921: PUSH
22922: LD_INT 25
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: LIST
22929: IN
22930: IFFALSE 22951
// points := [ 40 , 15 , 5 ] ;
22932: LD_ADDR_VAR 0 9
22936: PUSH
22937: LD_INT 40
22939: PUSH
22940: LD_INT 15
22942: PUSH
22943: LD_INT 5
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: LIST
22950: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22951: LD_VAR 0 6
22955: PPUSH
22956: CALL_OW 264
22960: PUSH
22961: LD_INT 3
22963: PUSH
22964: LD_INT 23
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: IN
22971: IFFALSE 22992
// points := [ 7 , 25 , 8 ] ;
22973: LD_ADDR_VAR 0 9
22977: PUSH
22978: LD_INT 7
22980: PUSH
22981: LD_INT 25
22983: PUSH
22984: LD_INT 8
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22992: LD_VAR 0 6
22996: PPUSH
22997: CALL_OW 264
23001: PUSH
23002: LD_INT 5
23004: PUSH
23005: LD_INT 27
23007: PUSH
23008: LD_INT 44
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: IN
23016: IFFALSE 23037
// points := [ 14 , 50 , 16 ] ;
23018: LD_ADDR_VAR 0 9
23022: PUSH
23023: LD_INT 14
23025: PUSH
23026: LD_INT 50
23028: PUSH
23029: LD_INT 16
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: LIST
23036: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23037: LD_VAR 0 6
23041: PPUSH
23042: CALL_OW 264
23046: PUSH
23047: LD_INT 6
23049: PUSH
23050: LD_INT 46
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: IN
23057: IFFALSE 23078
// points := [ 32 , 120 , 70 ] ;
23059: LD_ADDR_VAR 0 9
23063: PUSH
23064: LD_INT 32
23066: PUSH
23067: LD_INT 120
23069: PUSH
23070: LD_INT 70
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: LIST
23077: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23078: LD_VAR 0 6
23082: PPUSH
23083: CALL_OW 264
23087: PUSH
23088: LD_INT 7
23090: PUSH
23091: LD_INT 28
23093: PUSH
23094: LD_INT 45
23096: PUSH
23097: LD_EXP 112
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: LIST
23106: LIST
23107: IN
23108: IFFALSE 23129
// points := [ 35 , 20 , 45 ] ;
23110: LD_ADDR_VAR 0 9
23114: PUSH
23115: LD_INT 35
23117: PUSH
23118: LD_INT 20
23120: PUSH
23121: LD_INT 45
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: LIST
23128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23129: LD_VAR 0 6
23133: PPUSH
23134: CALL_OW 264
23138: PUSH
23139: LD_INT 47
23141: PUSH
23142: EMPTY
23143: LIST
23144: IN
23145: IFFALSE 23166
// points := [ 67 , 45 , 75 ] ;
23147: LD_ADDR_VAR 0 9
23151: PUSH
23152: LD_INT 67
23154: PUSH
23155: LD_INT 45
23157: PUSH
23158: LD_INT 75
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23166: LD_VAR 0 6
23170: PPUSH
23171: CALL_OW 264
23175: PUSH
23176: LD_INT 26
23178: PUSH
23179: EMPTY
23180: LIST
23181: IN
23182: IFFALSE 23203
// points := [ 120 , 30 , 80 ] ;
23184: LD_ADDR_VAR 0 9
23188: PUSH
23189: LD_INT 120
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 80
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23203: LD_VAR 0 6
23207: PPUSH
23208: CALL_OW 264
23212: PUSH
23213: LD_INT 22
23215: PUSH
23216: EMPTY
23217: LIST
23218: IN
23219: IFFALSE 23240
// points := [ 40 , 1 , 1 ] ;
23221: LD_ADDR_VAR 0 9
23225: PUSH
23226: LD_INT 40
23228: PUSH
23229: LD_INT 1
23231: PUSH
23232: LD_INT 1
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: LIST
23239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23240: LD_VAR 0 6
23244: PPUSH
23245: CALL_OW 264
23249: PUSH
23250: LD_INT 29
23252: PUSH
23253: EMPTY
23254: LIST
23255: IN
23256: IFFALSE 23277
// points := [ 70 , 200 , 400 ] ;
23258: LD_ADDR_VAR 0 9
23262: PUSH
23263: LD_INT 70
23265: PUSH
23266: LD_INT 200
23268: PUSH
23269: LD_INT 400
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: LIST
23276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23277: LD_VAR 0 6
23281: PPUSH
23282: CALL_OW 264
23286: PUSH
23287: LD_INT 14
23289: PUSH
23290: LD_INT 53
23292: PUSH
23293: EMPTY
23294: LIST
23295: LIST
23296: IN
23297: IFFALSE 23318
// points := [ 40 , 10 , 20 ] ;
23299: LD_ADDR_VAR 0 9
23303: PUSH
23304: LD_INT 40
23306: PUSH
23307: LD_INT 10
23309: PUSH
23310: LD_INT 20
23312: PUSH
23313: EMPTY
23314: LIST
23315: LIST
23316: LIST
23317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23318: LD_VAR 0 6
23322: PPUSH
23323: CALL_OW 264
23327: PUSH
23328: LD_INT 9
23330: PUSH
23331: EMPTY
23332: LIST
23333: IN
23334: IFFALSE 23355
// points := [ 5 , 70 , 20 ] ;
23336: LD_ADDR_VAR 0 9
23340: PUSH
23341: LD_INT 5
23343: PUSH
23344: LD_INT 70
23346: PUSH
23347: LD_INT 20
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23355: LD_VAR 0 6
23359: PPUSH
23360: CALL_OW 264
23364: PUSH
23365: LD_INT 10
23367: PUSH
23368: EMPTY
23369: LIST
23370: IN
23371: IFFALSE 23392
// points := [ 35 , 110 , 70 ] ;
23373: LD_ADDR_VAR 0 9
23377: PUSH
23378: LD_INT 35
23380: PUSH
23381: LD_INT 110
23383: PUSH
23384: LD_INT 70
23386: PUSH
23387: EMPTY
23388: LIST
23389: LIST
23390: LIST
23391: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23392: LD_VAR 0 6
23396: PPUSH
23397: CALL_OW 265
23401: PUSH
23402: LD_INT 25
23404: EQUAL
23405: IFFALSE 23426
// points := [ 80 , 65 , 100 ] ;
23407: LD_ADDR_VAR 0 9
23411: PUSH
23412: LD_INT 80
23414: PUSH
23415: LD_INT 65
23417: PUSH
23418: LD_INT 100
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: LIST
23425: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23426: LD_VAR 0 6
23430: PPUSH
23431: CALL_OW 263
23435: PUSH
23436: LD_INT 1
23438: EQUAL
23439: IFFALSE 23474
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23441: LD_ADDR_VAR 0 10
23445: PUSH
23446: LD_VAR 0 10
23450: PUSH
23451: LD_VAR 0 6
23455: PPUSH
23456: CALL_OW 311
23460: PPUSH
23461: LD_INT 3
23463: PPUSH
23464: CALL_OW 259
23468: PUSH
23469: LD_INT 4
23471: MUL
23472: MUL
23473: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23474: LD_VAR 0 6
23478: PPUSH
23479: CALL_OW 263
23483: PUSH
23484: LD_INT 2
23486: EQUAL
23487: IFFALSE 23538
// begin j := IsControledBy ( i ) ;
23489: LD_ADDR_VAR 0 7
23493: PUSH
23494: LD_VAR 0 6
23498: PPUSH
23499: CALL_OW 312
23503: ST_TO_ADDR
// if j then
23504: LD_VAR 0 7
23508: IFFALSE 23538
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23510: LD_ADDR_VAR 0 10
23514: PUSH
23515: LD_VAR 0 10
23519: PUSH
23520: LD_VAR 0 7
23524: PPUSH
23525: LD_INT 3
23527: PPUSH
23528: CALL_OW 259
23532: PUSH
23533: LD_INT 3
23535: MUL
23536: MUL
23537: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23538: LD_VAR 0 6
23542: PPUSH
23543: CALL_OW 264
23547: PUSH
23548: LD_INT 5
23550: PUSH
23551: LD_INT 6
23553: PUSH
23554: LD_INT 46
23556: PUSH
23557: LD_INT 44
23559: PUSH
23560: LD_INT 47
23562: PUSH
23563: LD_INT 45
23565: PUSH
23566: LD_INT 28
23568: PUSH
23569: LD_INT 7
23571: PUSH
23572: LD_INT 27
23574: PUSH
23575: LD_INT 29
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: IN
23590: PUSH
23591: LD_VAR 0 1
23595: PPUSH
23596: LD_INT 52
23598: PPUSH
23599: CALL_OW 321
23603: PUSH
23604: LD_INT 2
23606: EQUAL
23607: AND
23608: IFFALSE 23625
// bpoints := bpoints * 1.2 ;
23610: LD_ADDR_VAR 0 10
23614: PUSH
23615: LD_VAR 0 10
23619: PUSH
23620: LD_REAL  1.20000000000000E+0000
23623: MUL
23624: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23625: LD_VAR 0 6
23629: PPUSH
23630: CALL_OW 264
23634: PUSH
23635: LD_INT 6
23637: PUSH
23638: LD_INT 46
23640: PUSH
23641: LD_INT 47
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: IN
23649: IFFALSE 23666
// bpoints := bpoints * 1.2 ;
23651: LD_ADDR_VAR 0 10
23655: PUSH
23656: LD_VAR 0 10
23660: PUSH
23661: LD_REAL  1.20000000000000E+0000
23664: MUL
23665: ST_TO_ADDR
// end ; unit_building :
23666: GO 23680
23668: LD_INT 3
23670: DOUBLE
23671: EQUAL
23672: IFTRUE 23676
23674: GO 23679
23676: POP
// ; end ;
23677: GO 23680
23679: POP
// for j = 1 to 3 do
23680: LD_ADDR_VAR 0 7
23684: PUSH
23685: DOUBLE
23686: LD_INT 1
23688: DEC
23689: ST_TO_ADDR
23690: LD_INT 3
23692: PUSH
23693: FOR_TO
23694: IFFALSE 23747
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23696: LD_ADDR_VAR 0 5
23700: PUSH
23701: LD_VAR 0 5
23705: PPUSH
23706: LD_VAR 0 7
23710: PPUSH
23711: LD_VAR 0 5
23715: PUSH
23716: LD_VAR 0 7
23720: ARRAY
23721: PUSH
23722: LD_VAR 0 9
23726: PUSH
23727: LD_VAR 0 7
23731: ARRAY
23732: PUSH
23733: LD_VAR 0 10
23737: MUL
23738: PLUS
23739: PPUSH
23740: CALL_OW 1
23744: ST_TO_ADDR
23745: GO 23693
23747: POP
23748: POP
// end ;
23749: GO 22226
23751: POP
23752: POP
// result := Replace ( result , 4 , tmp ) ;
23753: LD_ADDR_VAR 0 5
23757: PUSH
23758: LD_VAR 0 5
23762: PPUSH
23763: LD_INT 4
23765: PPUSH
23766: LD_VAR 0 8
23770: PPUSH
23771: CALL_OW 1
23775: ST_TO_ADDR
// end ;
23776: LD_VAR 0 5
23780: RET
// export function DangerAtRange ( unit , range ) ; begin
23781: LD_INT 0
23783: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23784: LD_ADDR_VAR 0 3
23788: PUSH
23789: LD_VAR 0 1
23793: PPUSH
23794: CALL_OW 255
23798: PPUSH
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL_OW 250
23808: PPUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 251
23818: PPUSH
23819: LD_VAR 0 2
23823: PPUSH
23824: CALL 22078 0 4
23828: ST_TO_ADDR
// end ;
23829: LD_VAR 0 3
23833: RET
// export function DangerInArea ( side , area ) ; begin
23834: LD_INT 0
23836: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23837: LD_ADDR_VAR 0 3
23841: PUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: LD_INT 81
23849: PUSH
23850: LD_VAR 0 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PPUSH
23859: CALL_OW 70
23863: ST_TO_ADDR
// end ;
23864: LD_VAR 0 3
23868: RET
// export function IsExtension ( b ) ; begin
23869: LD_INT 0
23871: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23872: LD_ADDR_VAR 0 2
23876: PUSH
23877: LD_VAR 0 1
23881: PUSH
23882: LD_INT 23
23884: PUSH
23885: LD_INT 20
23887: PUSH
23888: LD_INT 22
23890: PUSH
23891: LD_INT 17
23893: PUSH
23894: LD_INT 24
23896: PUSH
23897: LD_INT 21
23899: PUSH
23900: LD_INT 19
23902: PUSH
23903: LD_INT 16
23905: PUSH
23906: LD_INT 25
23908: PUSH
23909: LD_INT 18
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: IN
23924: ST_TO_ADDR
// end ;
23925: LD_VAR 0 2
23929: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
23930: LD_INT 0
23932: PPUSH
23933: PPUSH
23934: PPUSH
// result := [ ] ;
23935: LD_ADDR_VAR 0 4
23939: PUSH
23940: EMPTY
23941: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23942: LD_ADDR_VAR 0 5
23946: PUSH
23947: LD_VAR 0 2
23951: PPUSH
23952: LD_INT 21
23954: PUSH
23955: LD_INT 3
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 70
23966: ST_TO_ADDR
// if not tmp then
23967: LD_VAR 0 5
23971: NOT
23972: IFFALSE 23976
// exit ;
23974: GO 24040
// if checkLink then
23976: LD_VAR 0 3
23980: IFFALSE 24030
// begin for i in tmp do
23982: LD_ADDR_VAR 0 6
23986: PUSH
23987: LD_VAR 0 5
23991: PUSH
23992: FOR_IN
23993: IFFALSE 24028
// if GetBase ( i ) <> base then
23995: LD_VAR 0 6
23999: PPUSH
24000: CALL_OW 274
24004: PUSH
24005: LD_VAR 0 1
24009: NONEQUAL
24010: IFFALSE 24026
// ComLinkToBase ( base , i ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_VAR 0 6
24021: PPUSH
24022: CALL_OW 169
24026: GO 23992
24028: POP
24029: POP
// end ; result := tmp ;
24030: LD_ADDR_VAR 0 4
24034: PUSH
24035: LD_VAR 0 5
24039: ST_TO_ADDR
// end ;
24040: LD_VAR 0 4
24044: RET
// export function ComComplete ( units , b ) ; var i ; begin
24045: LD_INT 0
24047: PPUSH
24048: PPUSH
// if not units then
24049: LD_VAR 0 1
24053: NOT
24054: IFFALSE 24058
// exit ;
24056: GO 24148
// for i in units do
24058: LD_ADDR_VAR 0 4
24062: PUSH
24063: LD_VAR 0 1
24067: PUSH
24068: FOR_IN
24069: IFFALSE 24146
// if BuildingStatus ( b ) = bs_build then
24071: LD_VAR 0 2
24075: PPUSH
24076: CALL_OW 461
24080: PUSH
24081: LD_INT 1
24083: EQUAL
24084: IFFALSE 24144
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24086: LD_VAR 0 4
24090: PPUSH
24091: LD_STRING h
24093: PUSH
24094: LD_VAR 0 2
24098: PPUSH
24099: CALL_OW 250
24103: PUSH
24104: LD_VAR 0 2
24108: PPUSH
24109: CALL_OW 251
24113: PUSH
24114: LD_VAR 0 2
24118: PUSH
24119: LD_INT 0
24121: PUSH
24122: LD_INT 0
24124: PUSH
24125: LD_INT 0
24127: PUSH
24128: EMPTY
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: PUSH
24137: EMPTY
24138: LIST
24139: PPUSH
24140: CALL_OW 446
24144: GO 24068
24146: POP
24147: POP
// end ;
24148: LD_VAR 0 3
24152: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24153: LD_INT 0
24155: PPUSH
24156: PPUSH
24157: PPUSH
24158: PPUSH
24159: PPUSH
24160: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24161: LD_VAR 0 1
24165: NOT
24166: PUSH
24167: LD_VAR 0 1
24171: PPUSH
24172: CALL_OW 263
24176: PUSH
24177: LD_INT 2
24179: NONEQUAL
24180: OR
24181: IFFALSE 24185
// exit ;
24183: GO 24501
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24185: LD_ADDR_VAR 0 6
24189: PUSH
24190: LD_INT 22
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 255
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 2
24209: PUSH
24210: LD_INT 30
24212: PUSH
24213: LD_INT 36
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 34
24222: PUSH
24223: LD_INT 31
24225: PUSH
24226: EMPTY
24227: LIST
24228: LIST
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 69
24243: ST_TO_ADDR
// if not tmp then
24244: LD_VAR 0 6
24248: NOT
24249: IFFALSE 24253
// exit ;
24251: GO 24501
// result := [ ] ;
24253: LD_ADDR_VAR 0 2
24257: PUSH
24258: EMPTY
24259: ST_TO_ADDR
// for i in tmp do
24260: LD_ADDR_VAR 0 3
24264: PUSH
24265: LD_VAR 0 6
24269: PUSH
24270: FOR_IN
24271: IFFALSE 24342
// begin t := UnitsInside ( i ) ;
24273: LD_ADDR_VAR 0 4
24277: PUSH
24278: LD_VAR 0 3
24282: PPUSH
24283: CALL_OW 313
24287: ST_TO_ADDR
// if t then
24288: LD_VAR 0 4
24292: IFFALSE 24340
// for j in t do
24294: LD_ADDR_VAR 0 7
24298: PUSH
24299: LD_VAR 0 4
24303: PUSH
24304: FOR_IN
24305: IFFALSE 24338
// result := Replace ( result , result + 1 , j ) ;
24307: LD_ADDR_VAR 0 2
24311: PUSH
24312: LD_VAR 0 2
24316: PPUSH
24317: LD_VAR 0 2
24321: PUSH
24322: LD_INT 1
24324: PLUS
24325: PPUSH
24326: LD_VAR 0 7
24330: PPUSH
24331: CALL_OW 1
24335: ST_TO_ADDR
24336: GO 24304
24338: POP
24339: POP
// end ;
24340: GO 24270
24342: POP
24343: POP
// if not result then
24344: LD_VAR 0 2
24348: NOT
24349: IFFALSE 24353
// exit ;
24351: GO 24501
// mech := result [ 1 ] ;
24353: LD_ADDR_VAR 0 5
24357: PUSH
24358: LD_VAR 0 2
24362: PUSH
24363: LD_INT 1
24365: ARRAY
24366: ST_TO_ADDR
// if result > 1 then
24367: LD_VAR 0 2
24371: PUSH
24372: LD_INT 1
24374: GREATER
24375: IFFALSE 24487
// begin for i = 2 to result do
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: DOUBLE
24383: LD_INT 2
24385: DEC
24386: ST_TO_ADDR
24387: LD_VAR 0 2
24391: PUSH
24392: FOR_TO
24393: IFFALSE 24485
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24395: LD_ADDR_VAR 0 4
24399: PUSH
24400: LD_VAR 0 2
24404: PUSH
24405: LD_VAR 0 3
24409: ARRAY
24410: PPUSH
24411: LD_INT 3
24413: PPUSH
24414: CALL_OW 259
24418: PUSH
24419: LD_VAR 0 2
24423: PUSH
24424: LD_VAR 0 3
24428: ARRAY
24429: PPUSH
24430: CALL_OW 432
24434: MINUS
24435: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24436: LD_VAR 0 4
24440: PUSH
24441: LD_VAR 0 5
24445: PPUSH
24446: LD_INT 3
24448: PPUSH
24449: CALL_OW 259
24453: PUSH
24454: LD_VAR 0 5
24458: PPUSH
24459: CALL_OW 432
24463: MINUS
24464: GREATEREQUAL
24465: IFFALSE 24483
// mech := result [ i ] ;
24467: LD_ADDR_VAR 0 5
24471: PUSH
24472: LD_VAR 0 2
24476: PUSH
24477: LD_VAR 0 3
24481: ARRAY
24482: ST_TO_ADDR
// end ;
24483: GO 24392
24485: POP
24486: POP
// end ; ComLinkTo ( vehicle , mech ) ;
24487: LD_VAR 0 1
24491: PPUSH
24492: LD_VAR 0 5
24496: PPUSH
24497: CALL_OW 135
// end ;
24501: LD_VAR 0 2
24505: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24506: LD_INT 0
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
24512: PPUSH
24513: PPUSH
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
24519: PPUSH
24520: PPUSH
// result := [ ] ;
24521: LD_ADDR_VAR 0 7
24525: PUSH
24526: EMPTY
24527: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 266
24537: PUSH
24538: LD_INT 0
24540: PUSH
24541: LD_INT 1
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: IN
24548: NOT
24549: IFFALSE 24553
// exit ;
24551: GO 26187
// if name then
24553: LD_VAR 0 3
24557: IFFALSE 24573
// SetBName ( base_dep , name ) ;
24559: LD_VAR 0 1
24563: PPUSH
24564: LD_VAR 0 3
24568: PPUSH
24569: CALL_OW 500
// base := GetBase ( base_dep ) ;
24573: LD_ADDR_VAR 0 15
24577: PUSH
24578: LD_VAR 0 1
24582: PPUSH
24583: CALL_OW 274
24587: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24588: LD_ADDR_VAR 0 16
24592: PUSH
24593: LD_VAR 0 1
24597: PPUSH
24598: CALL_OW 255
24602: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24603: LD_ADDR_VAR 0 17
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 248
24617: ST_TO_ADDR
// if sources then
24618: LD_VAR 0 5
24622: IFFALSE 24669
// for i = 1 to 3 do
24624: LD_ADDR_VAR 0 8
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_INT 3
24636: PUSH
24637: FOR_TO
24638: IFFALSE 24667
// AddResourceType ( base , i , sources [ i ] ) ;
24640: LD_VAR 0 15
24644: PPUSH
24645: LD_VAR 0 8
24649: PPUSH
24650: LD_VAR 0 5
24654: PUSH
24655: LD_VAR 0 8
24659: ARRAY
24660: PPUSH
24661: CALL_OW 276
24665: GO 24637
24667: POP
24668: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
24669: LD_ADDR_VAR 0 18
24673: PUSH
24674: LD_VAR 0 15
24678: PPUSH
24679: LD_VAR 0 2
24683: PPUSH
24684: LD_INT 1
24686: PPUSH
24687: CALL 23930 0 3
24691: ST_TO_ADDR
// InitHc ;
24692: CALL_OW 19
// InitUc ;
24696: CALL_OW 18
// uc_side := side ;
24700: LD_ADDR_OWVAR 20
24704: PUSH
24705: LD_VAR 0 16
24709: ST_TO_ADDR
// uc_nation := nation ;
24710: LD_ADDR_OWVAR 21
24714: PUSH
24715: LD_VAR 0 17
24719: ST_TO_ADDR
// if buildings then
24720: LD_VAR 0 18
24724: IFFALSE 26046
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24726: LD_ADDR_VAR 0 19
24730: PUSH
24731: LD_VAR 0 18
24735: PPUSH
24736: LD_INT 2
24738: PUSH
24739: LD_INT 30
24741: PUSH
24742: LD_INT 29
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: PUSH
24749: LD_INT 30
24751: PUSH
24752: LD_INT 30
24754: PUSH
24755: EMPTY
24756: LIST
24757: LIST
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: LIST
24763: PPUSH
24764: CALL_OW 72
24768: ST_TO_ADDR
// if tmp then
24769: LD_VAR 0 19
24773: IFFALSE 24821
// for i in tmp do
24775: LD_ADDR_VAR 0 8
24779: PUSH
24780: LD_VAR 0 19
24784: PUSH
24785: FOR_IN
24786: IFFALSE 24819
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24788: LD_VAR 0 8
24792: PPUSH
24793: CALL_OW 250
24797: PPUSH
24798: LD_VAR 0 8
24802: PPUSH
24803: CALL_OW 251
24807: PPUSH
24808: LD_VAR 0 16
24812: PPUSH
24813: CALL_OW 441
24817: GO 24785
24819: POP
24820: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24821: LD_VAR 0 18
24825: PPUSH
24826: LD_INT 2
24828: PUSH
24829: LD_INT 30
24831: PUSH
24832: LD_INT 32
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 30
24841: PUSH
24842: LD_INT 33
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: EMPTY
24850: LIST
24851: LIST
24852: LIST
24853: PPUSH
24854: CALL_OW 72
24858: IFFALSE 24946
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24860: LD_ADDR_VAR 0 8
24864: PUSH
24865: LD_VAR 0 18
24869: PPUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 30
24875: PUSH
24876: LD_INT 32
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: LD_INT 30
24885: PUSH
24886: LD_INT 33
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 72
24902: PUSH
24903: FOR_IN
24904: IFFALSE 24944
// begin if not GetBWeapon ( i ) then
24906: LD_VAR 0 8
24910: PPUSH
24911: CALL_OW 269
24915: NOT
24916: IFFALSE 24942
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24918: LD_VAR 0 8
24922: PPUSH
24923: LD_VAR 0 8
24927: PPUSH
24928: LD_VAR 0 2
24932: PPUSH
24933: CALL 26192 0 2
24937: PPUSH
24938: CALL_OW 431
// end ;
24942: GO 24903
24944: POP
24945: POP
// end ; for i = 1 to personel do
24946: LD_ADDR_VAR 0 8
24950: PUSH
24951: DOUBLE
24952: LD_INT 1
24954: DEC
24955: ST_TO_ADDR
24956: LD_VAR 0 6
24960: PUSH
24961: FOR_TO
24962: IFFALSE 26026
// begin if i > 4 then
24964: LD_VAR 0 8
24968: PUSH
24969: LD_INT 4
24971: GREATER
24972: IFFALSE 24976
// break ;
24974: GO 26026
// case i of 1 :
24976: LD_VAR 0 8
24980: PUSH
24981: LD_INT 1
24983: DOUBLE
24984: EQUAL
24985: IFTRUE 24989
24987: GO 25069
24989: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24990: LD_ADDR_VAR 0 12
24994: PUSH
24995: LD_VAR 0 18
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_VAR 0 16
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 58
25014: PUSH
25015: EMPTY
25016: LIST
25017: PUSH
25018: LD_INT 2
25020: PUSH
25021: LD_INT 30
25023: PUSH
25024: LD_INT 32
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 30
25033: PUSH
25034: LD_INT 4
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: PUSH
25041: LD_INT 30
25043: PUSH
25044: LD_INT 5
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: LIST
25061: PPUSH
25062: CALL_OW 72
25066: ST_TO_ADDR
25067: GO 25291
25069: LD_INT 2
25071: DOUBLE
25072: EQUAL
25073: IFTRUE 25077
25075: GO 25139
25077: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25078: LD_ADDR_VAR 0 12
25082: PUSH
25083: LD_VAR 0 18
25087: PPUSH
25088: LD_INT 22
25090: PUSH
25091: LD_VAR 0 16
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: PUSH
25100: LD_INT 2
25102: PUSH
25103: LD_INT 30
25105: PUSH
25106: LD_INT 0
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: PUSH
25113: LD_INT 30
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: EMPTY
25120: LIST
25121: LIST
25122: PUSH
25123: EMPTY
25124: LIST
25125: LIST
25126: LIST
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PPUSH
25132: CALL_OW 72
25136: ST_TO_ADDR
25137: GO 25291
25139: LD_INT 3
25141: DOUBLE
25142: EQUAL
25143: IFTRUE 25147
25145: GO 25209
25147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25148: LD_ADDR_VAR 0 12
25152: PUSH
25153: LD_VAR 0 18
25157: PPUSH
25158: LD_INT 22
25160: PUSH
25161: LD_VAR 0 16
25165: PUSH
25166: EMPTY
25167: LIST
25168: LIST
25169: PUSH
25170: LD_INT 2
25172: PUSH
25173: LD_INT 30
25175: PUSH
25176: LD_INT 2
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: PUSH
25183: LD_INT 30
25185: PUSH
25186: LD_INT 3
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: PUSH
25193: EMPTY
25194: LIST
25195: LIST
25196: LIST
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: PPUSH
25202: CALL_OW 72
25206: ST_TO_ADDR
25207: GO 25291
25209: LD_INT 4
25211: DOUBLE
25212: EQUAL
25213: IFTRUE 25217
25215: GO 25290
25217: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25218: LD_ADDR_VAR 0 12
25222: PUSH
25223: LD_VAR 0 18
25227: PPUSH
25228: LD_INT 22
25230: PUSH
25231: LD_VAR 0 16
25235: PUSH
25236: EMPTY
25237: LIST
25238: LIST
25239: PUSH
25240: LD_INT 2
25242: PUSH
25243: LD_INT 30
25245: PUSH
25246: LD_INT 6
25248: PUSH
25249: EMPTY
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 30
25255: PUSH
25256: LD_INT 7
25258: PUSH
25259: EMPTY
25260: LIST
25261: LIST
25262: PUSH
25263: LD_INT 30
25265: PUSH
25266: LD_INT 8
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PPUSH
25283: CALL_OW 72
25287: ST_TO_ADDR
25288: GO 25291
25290: POP
// if i = 1 then
25291: LD_VAR 0 8
25295: PUSH
25296: LD_INT 1
25298: EQUAL
25299: IFFALSE 25410
// begin tmp := [ ] ;
25301: LD_ADDR_VAR 0 19
25305: PUSH
25306: EMPTY
25307: ST_TO_ADDR
// for j in f do
25308: LD_ADDR_VAR 0 9
25312: PUSH
25313: LD_VAR 0 12
25317: PUSH
25318: FOR_IN
25319: IFFALSE 25392
// if GetBType ( j ) = b_bunker then
25321: LD_VAR 0 9
25325: PPUSH
25326: CALL_OW 266
25330: PUSH
25331: LD_INT 32
25333: EQUAL
25334: IFFALSE 25361
// tmp := Insert ( tmp , 1 , j ) else
25336: LD_ADDR_VAR 0 19
25340: PUSH
25341: LD_VAR 0 19
25345: PPUSH
25346: LD_INT 1
25348: PPUSH
25349: LD_VAR 0 9
25353: PPUSH
25354: CALL_OW 2
25358: ST_TO_ADDR
25359: GO 25390
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25361: LD_ADDR_VAR 0 19
25365: PUSH
25366: LD_VAR 0 19
25370: PPUSH
25371: LD_VAR 0 19
25375: PUSH
25376: LD_INT 1
25378: PLUS
25379: PPUSH
25380: LD_VAR 0 9
25384: PPUSH
25385: CALL_OW 2
25389: ST_TO_ADDR
25390: GO 25318
25392: POP
25393: POP
// if tmp then
25394: LD_VAR 0 19
25398: IFFALSE 25410
// f := tmp ;
25400: LD_ADDR_VAR 0 12
25404: PUSH
25405: LD_VAR 0 19
25409: ST_TO_ADDR
// end ; x := personel [ i ] ;
25410: LD_ADDR_VAR 0 13
25414: PUSH
25415: LD_VAR 0 6
25419: PUSH
25420: LD_VAR 0 8
25424: ARRAY
25425: ST_TO_ADDR
// if x = - 1 then
25426: LD_VAR 0 13
25430: PUSH
25431: LD_INT 1
25433: NEG
25434: EQUAL
25435: IFFALSE 25644
// begin for j in f do
25437: LD_ADDR_VAR 0 9
25441: PUSH
25442: LD_VAR 0 12
25446: PUSH
25447: FOR_IN
25448: IFFALSE 25640
// repeat InitHc ;
25450: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25454: LD_VAR 0 9
25458: PPUSH
25459: CALL_OW 266
25463: PUSH
25464: LD_INT 5
25466: EQUAL
25467: IFFALSE 25537
// begin if UnitsInside ( j ) < 3 then
25469: LD_VAR 0 9
25473: PPUSH
25474: CALL_OW 313
25478: PUSH
25479: LD_INT 3
25481: LESS
25482: IFFALSE 25518
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25484: LD_INT 0
25486: PPUSH
25487: LD_INT 5
25489: PUSH
25490: LD_INT 8
25492: PUSH
25493: LD_INT 9
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: PUSH
25501: LD_VAR 0 17
25505: ARRAY
25506: PPUSH
25507: LD_VAR 0 4
25511: PPUSH
25512: CALL_OW 380
25516: GO 25535
// PrepareHuman ( false , i , skill ) ;
25518: LD_INT 0
25520: PPUSH
25521: LD_VAR 0 8
25525: PPUSH
25526: LD_VAR 0 4
25530: PPUSH
25531: CALL_OW 380
// end else
25535: GO 25554
// PrepareHuman ( false , i , skill ) ;
25537: LD_INT 0
25539: PPUSH
25540: LD_VAR 0 8
25544: PPUSH
25545: LD_VAR 0 4
25549: PPUSH
25550: CALL_OW 380
// un := CreateHuman ;
25554: LD_ADDR_VAR 0 14
25558: PUSH
25559: CALL_OW 44
25563: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25564: LD_ADDR_VAR 0 7
25568: PUSH
25569: LD_VAR 0 7
25573: PPUSH
25574: LD_INT 1
25576: PPUSH
25577: LD_VAR 0 14
25581: PPUSH
25582: CALL_OW 2
25586: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25587: LD_VAR 0 14
25591: PPUSH
25592: LD_VAR 0 9
25596: PPUSH
25597: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25601: LD_VAR 0 9
25605: PPUSH
25606: CALL_OW 313
25610: PUSH
25611: LD_INT 6
25613: EQUAL
25614: PUSH
25615: LD_VAR 0 9
25619: PPUSH
25620: CALL_OW 266
25624: PUSH
25625: LD_INT 32
25627: PUSH
25628: LD_INT 31
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: IN
25635: OR
25636: IFFALSE 25450
25638: GO 25447
25640: POP
25641: POP
// end else
25642: GO 26024
// for j = 1 to x do
25644: LD_ADDR_VAR 0 9
25648: PUSH
25649: DOUBLE
25650: LD_INT 1
25652: DEC
25653: ST_TO_ADDR
25654: LD_VAR 0 13
25658: PUSH
25659: FOR_TO
25660: IFFALSE 26022
// begin InitHc ;
25662: CALL_OW 19
// if not f then
25666: LD_VAR 0 12
25670: NOT
25671: IFFALSE 25760
// begin PrepareHuman ( false , i , skill ) ;
25673: LD_INT 0
25675: PPUSH
25676: LD_VAR 0 8
25680: PPUSH
25681: LD_VAR 0 4
25685: PPUSH
25686: CALL_OW 380
// un := CreateHuman ;
25690: LD_ADDR_VAR 0 14
25694: PUSH
25695: CALL_OW 44
25699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25700: LD_ADDR_VAR 0 7
25704: PUSH
25705: LD_VAR 0 7
25709: PPUSH
25710: LD_INT 1
25712: PPUSH
25713: LD_VAR 0 14
25717: PPUSH
25718: CALL_OW 2
25722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25723: LD_VAR 0 14
25727: PPUSH
25728: LD_VAR 0 1
25732: PPUSH
25733: CALL_OW 250
25737: PPUSH
25738: LD_VAR 0 1
25742: PPUSH
25743: CALL_OW 251
25747: PPUSH
25748: LD_INT 10
25750: PPUSH
25751: LD_INT 0
25753: PPUSH
25754: CALL_OW 50
// continue ;
25758: GO 25659
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25760: LD_VAR 0 12
25764: PUSH
25765: LD_INT 1
25767: ARRAY
25768: PPUSH
25769: CALL_OW 313
25773: PUSH
25774: LD_VAR 0 12
25778: PUSH
25779: LD_INT 1
25781: ARRAY
25782: PPUSH
25783: CALL_OW 266
25787: PUSH
25788: LD_INT 32
25790: PUSH
25791: LD_INT 31
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: IN
25798: AND
25799: PUSH
25800: LD_VAR 0 12
25804: PUSH
25805: LD_INT 1
25807: ARRAY
25808: PPUSH
25809: CALL_OW 313
25813: PUSH
25814: LD_INT 6
25816: EQUAL
25817: OR
25818: IFFALSE 25838
// f := Delete ( f , 1 ) ;
25820: LD_ADDR_VAR 0 12
25824: PUSH
25825: LD_VAR 0 12
25829: PPUSH
25830: LD_INT 1
25832: PPUSH
25833: CALL_OW 3
25837: ST_TO_ADDR
// if not f then
25838: LD_VAR 0 12
25842: NOT
25843: IFFALSE 25861
// begin x := x + 2 ;
25845: LD_ADDR_VAR 0 13
25849: PUSH
25850: LD_VAR 0 13
25854: PUSH
25855: LD_INT 2
25857: PLUS
25858: ST_TO_ADDR
// continue ;
25859: GO 25659
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25861: LD_VAR 0 12
25865: PUSH
25866: LD_INT 1
25868: ARRAY
25869: PPUSH
25870: CALL_OW 266
25874: PUSH
25875: LD_INT 5
25877: EQUAL
25878: IFFALSE 25952
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25880: LD_VAR 0 12
25884: PUSH
25885: LD_INT 1
25887: ARRAY
25888: PPUSH
25889: CALL_OW 313
25893: PUSH
25894: LD_INT 3
25896: LESS
25897: IFFALSE 25933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25899: LD_INT 0
25901: PPUSH
25902: LD_INT 5
25904: PUSH
25905: LD_INT 8
25907: PUSH
25908: LD_INT 9
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: LIST
25915: PUSH
25916: LD_VAR 0 17
25920: ARRAY
25921: PPUSH
25922: LD_VAR 0 4
25926: PPUSH
25927: CALL_OW 380
25931: GO 25950
// PrepareHuman ( false , i , skill ) ;
25933: LD_INT 0
25935: PPUSH
25936: LD_VAR 0 8
25940: PPUSH
25941: LD_VAR 0 4
25945: PPUSH
25946: CALL_OW 380
// end else
25950: GO 25969
// PrepareHuman ( false , i , skill ) ;
25952: LD_INT 0
25954: PPUSH
25955: LD_VAR 0 8
25959: PPUSH
25960: LD_VAR 0 4
25964: PPUSH
25965: CALL_OW 380
// un := CreateHuman ;
25969: LD_ADDR_VAR 0 14
25973: PUSH
25974: CALL_OW 44
25978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25979: LD_ADDR_VAR 0 7
25983: PUSH
25984: LD_VAR 0 7
25988: PPUSH
25989: LD_INT 1
25991: PPUSH
25992: LD_VAR 0 14
25996: PPUSH
25997: CALL_OW 2
26001: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26002: LD_VAR 0 14
26006: PPUSH
26007: LD_VAR 0 12
26011: PUSH
26012: LD_INT 1
26014: ARRAY
26015: PPUSH
26016: CALL_OW 52
// end ;
26020: GO 25659
26022: POP
26023: POP
// end ;
26024: GO 24961
26026: POP
26027: POP
// result := result ^ buildings ;
26028: LD_ADDR_VAR 0 7
26032: PUSH
26033: LD_VAR 0 7
26037: PUSH
26038: LD_VAR 0 18
26042: ADD
26043: ST_TO_ADDR
// end else
26044: GO 26187
// begin for i = 1 to personel do
26046: LD_ADDR_VAR 0 8
26050: PUSH
26051: DOUBLE
26052: LD_INT 1
26054: DEC
26055: ST_TO_ADDR
26056: LD_VAR 0 6
26060: PUSH
26061: FOR_TO
26062: IFFALSE 26185
// begin if i > 4 then
26064: LD_VAR 0 8
26068: PUSH
26069: LD_INT 4
26071: GREATER
26072: IFFALSE 26076
// break ;
26074: GO 26185
// x := personel [ i ] ;
26076: LD_ADDR_VAR 0 13
26080: PUSH
26081: LD_VAR 0 6
26085: PUSH
26086: LD_VAR 0 8
26090: ARRAY
26091: ST_TO_ADDR
// if x = - 1 then
26092: LD_VAR 0 13
26096: PUSH
26097: LD_INT 1
26099: NEG
26100: EQUAL
26101: IFFALSE 26105
// continue ;
26103: GO 26061
// PrepareHuman ( false , i , skill ) ;
26105: LD_INT 0
26107: PPUSH
26108: LD_VAR 0 8
26112: PPUSH
26113: LD_VAR 0 4
26117: PPUSH
26118: CALL_OW 380
// un := CreateHuman ;
26122: LD_ADDR_VAR 0 14
26126: PUSH
26127: CALL_OW 44
26131: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26132: LD_VAR 0 14
26136: PPUSH
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL_OW 250
26146: PPUSH
26147: LD_VAR 0 1
26151: PPUSH
26152: CALL_OW 251
26156: PPUSH
26157: LD_INT 10
26159: PPUSH
26160: LD_INT 0
26162: PPUSH
26163: CALL_OW 50
// result := result ^ un ;
26167: LD_ADDR_VAR 0 7
26171: PUSH
26172: LD_VAR 0 7
26176: PUSH
26177: LD_VAR 0 14
26181: ADD
26182: ST_TO_ADDR
// end ;
26183: GO 26061
26185: POP
26186: POP
// end ; end ;
26187: LD_VAR 0 7
26191: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26192: LD_INT 0
26194: PPUSH
26195: PPUSH
26196: PPUSH
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
26201: PPUSH
26202: PPUSH
26203: PPUSH
26204: PPUSH
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
26209: PPUSH
// result := false ;
26210: LD_ADDR_VAR 0 3
26214: PUSH
26215: LD_INT 0
26217: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26218: LD_VAR 0 1
26222: NOT
26223: PUSH
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 266
26233: PUSH
26234: LD_INT 32
26236: PUSH
26237: LD_INT 33
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: IN
26244: NOT
26245: OR
26246: IFFALSE 26250
// exit ;
26248: GO 27359
// nat := GetNation ( tower ) ;
26250: LD_ADDR_VAR 0 12
26254: PUSH
26255: LD_VAR 0 1
26259: PPUSH
26260: CALL_OW 248
26264: ST_TO_ADDR
// side := GetSide ( tower ) ;
26265: LD_ADDR_VAR 0 16
26269: PUSH
26270: LD_VAR 0 1
26274: PPUSH
26275: CALL_OW 255
26279: ST_TO_ADDR
// x := GetX ( tower ) ;
26280: LD_ADDR_VAR 0 10
26284: PUSH
26285: LD_VAR 0 1
26289: PPUSH
26290: CALL_OW 250
26294: ST_TO_ADDR
// y := GetY ( tower ) ;
26295: LD_ADDR_VAR 0 11
26299: PUSH
26300: LD_VAR 0 1
26304: PPUSH
26305: CALL_OW 251
26309: ST_TO_ADDR
// if not x or not y then
26310: LD_VAR 0 10
26314: NOT
26315: PUSH
26316: LD_VAR 0 11
26320: NOT
26321: OR
26322: IFFALSE 26326
// exit ;
26324: GO 27359
// weapon := 0 ;
26326: LD_ADDR_VAR 0 18
26330: PUSH
26331: LD_INT 0
26333: ST_TO_ADDR
// fac_list := [ ] ;
26334: LD_ADDR_VAR 0 17
26338: PUSH
26339: EMPTY
26340: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
26341: LD_ADDR_VAR 0 6
26345: PUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 274
26355: PPUSH
26356: LD_VAR 0 2
26360: PPUSH
26361: LD_INT 0
26363: PPUSH
26364: CALL 23930 0 3
26368: PPUSH
26369: LD_INT 30
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PPUSH
26379: CALL_OW 72
26383: ST_TO_ADDR
// if not factories then
26384: LD_VAR 0 6
26388: NOT
26389: IFFALSE 26393
// exit ;
26391: GO 27359
// for i in factories do
26393: LD_ADDR_VAR 0 8
26397: PUSH
26398: LD_VAR 0 6
26402: PUSH
26403: FOR_IN
26404: IFFALSE 26429
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26406: LD_ADDR_VAR 0 17
26410: PUSH
26411: LD_VAR 0 17
26415: PUSH
26416: LD_VAR 0 8
26420: PPUSH
26421: CALL_OW 478
26425: UNION
26426: ST_TO_ADDR
26427: GO 26403
26429: POP
26430: POP
// if not fac_list then
26431: LD_VAR 0 17
26435: NOT
26436: IFFALSE 26440
// exit ;
26438: GO 27359
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26440: LD_ADDR_VAR 0 5
26444: PUSH
26445: LD_INT 4
26447: PUSH
26448: LD_INT 5
26450: PUSH
26451: LD_INT 9
26453: PUSH
26454: LD_INT 10
26456: PUSH
26457: LD_INT 6
26459: PUSH
26460: LD_INT 7
26462: PUSH
26463: LD_INT 11
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 27
26477: PUSH
26478: LD_INT 28
26480: PUSH
26481: LD_INT 26
26483: PUSH
26484: LD_INT 30
26486: PUSH
26487: EMPTY
26488: LIST
26489: LIST
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 43
26495: PUSH
26496: LD_INT 44
26498: PUSH
26499: LD_INT 46
26501: PUSH
26502: LD_INT 45
26504: PUSH
26505: LD_INT 47
26507: PUSH
26508: LD_INT 49
26510: PUSH
26511: EMPTY
26512: LIST
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: PUSH
26524: LD_VAR 0 12
26528: ARRAY
26529: ST_TO_ADDR
// list := list isect fac_list ;
26530: LD_ADDR_VAR 0 5
26534: PUSH
26535: LD_VAR 0 5
26539: PUSH
26540: LD_VAR 0 17
26544: ISECT
26545: ST_TO_ADDR
// if not list then
26546: LD_VAR 0 5
26550: NOT
26551: IFFALSE 26555
// exit ;
26553: GO 27359
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26555: LD_VAR 0 12
26559: PUSH
26560: LD_INT 3
26562: EQUAL
26563: PUSH
26564: LD_INT 49
26566: PUSH
26567: LD_VAR 0 5
26571: IN
26572: AND
26573: PUSH
26574: LD_INT 31
26576: PPUSH
26577: LD_VAR 0 16
26581: PPUSH
26582: CALL_OW 321
26586: PUSH
26587: LD_INT 2
26589: EQUAL
26590: AND
26591: IFFALSE 26651
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26593: LD_INT 22
26595: PUSH
26596: LD_VAR 0 16
26600: PUSH
26601: EMPTY
26602: LIST
26603: LIST
26604: PUSH
26605: LD_INT 35
26607: PUSH
26608: LD_INT 49
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 91
26617: PUSH
26618: LD_VAR 0 1
26622: PUSH
26623: LD_INT 10
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: PPUSH
26636: CALL_OW 69
26640: NOT
26641: IFFALSE 26651
// weapon := ru_time_lapser ;
26643: LD_ADDR_VAR 0 18
26647: PUSH
26648: LD_INT 49
26650: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26651: LD_VAR 0 12
26655: PUSH
26656: LD_INT 1
26658: PUSH
26659: LD_INT 2
26661: PUSH
26662: EMPTY
26663: LIST
26664: LIST
26665: IN
26666: PUSH
26667: LD_INT 11
26669: PUSH
26670: LD_VAR 0 5
26674: IN
26675: PUSH
26676: LD_INT 30
26678: PUSH
26679: LD_VAR 0 5
26683: IN
26684: OR
26685: AND
26686: PUSH
26687: LD_INT 6
26689: PPUSH
26690: LD_VAR 0 16
26694: PPUSH
26695: CALL_OW 321
26699: PUSH
26700: LD_INT 2
26702: EQUAL
26703: AND
26704: IFFALSE 26869
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26706: LD_INT 22
26708: PUSH
26709: LD_VAR 0 16
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: LD_INT 35
26723: PUSH
26724: LD_INT 11
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 35
26733: PUSH
26734: LD_INT 30
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 91
26748: PUSH
26749: LD_VAR 0 1
26753: PUSH
26754: LD_INT 18
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 69
26771: NOT
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_VAR 0 16
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 30
26790: PUSH
26791: LD_INT 32
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: LD_INT 30
26800: PUSH
26801: LD_INT 33
26803: PUSH
26804: EMPTY
26805: LIST
26806: LIST
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 91
26815: PUSH
26816: LD_VAR 0 1
26820: PUSH
26821: LD_INT 12
26823: PUSH
26824: EMPTY
26825: LIST
26826: LIST
26827: LIST
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: PUSH
26834: EMPTY
26835: LIST
26836: PPUSH
26837: CALL_OW 69
26841: PUSH
26842: LD_INT 2
26844: GREATER
26845: AND
26846: IFFALSE 26869
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26848: LD_ADDR_VAR 0 18
26852: PUSH
26853: LD_INT 11
26855: PUSH
26856: LD_INT 30
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_VAR 0 12
26867: ARRAY
26868: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26869: LD_VAR 0 18
26873: NOT
26874: PUSH
26875: LD_INT 40
26877: PPUSH
26878: LD_VAR 0 16
26882: PPUSH
26883: CALL_OW 321
26887: PUSH
26888: LD_INT 2
26890: EQUAL
26891: AND
26892: PUSH
26893: LD_INT 7
26895: PUSH
26896: LD_VAR 0 5
26900: IN
26901: PUSH
26902: LD_INT 28
26904: PUSH
26905: LD_VAR 0 5
26909: IN
26910: OR
26911: PUSH
26912: LD_INT 45
26914: PUSH
26915: LD_VAR 0 5
26919: IN
26920: OR
26921: AND
26922: IFFALSE 27176
// begin hex := GetHexInfo ( x , y ) ;
26924: LD_ADDR_VAR 0 4
26928: PUSH
26929: LD_VAR 0 10
26933: PPUSH
26934: LD_VAR 0 11
26938: PPUSH
26939: CALL_OW 546
26943: ST_TO_ADDR
// if hex [ 1 ] then
26944: LD_VAR 0 4
26948: PUSH
26949: LD_INT 1
26951: ARRAY
26952: IFFALSE 26956
// exit ;
26954: GO 27359
// height := hex [ 2 ] ;
26956: LD_ADDR_VAR 0 15
26960: PUSH
26961: LD_VAR 0 4
26965: PUSH
26966: LD_INT 2
26968: ARRAY
26969: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26970: LD_ADDR_VAR 0 14
26974: PUSH
26975: LD_INT 0
26977: PUSH
26978: LD_INT 2
26980: PUSH
26981: LD_INT 3
26983: PUSH
26984: LD_INT 5
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
// for i in tmp do
26993: LD_ADDR_VAR 0 8
26997: PUSH
26998: LD_VAR 0 14
27002: PUSH
27003: FOR_IN
27004: IFFALSE 27174
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27006: LD_ADDR_VAR 0 9
27010: PUSH
27011: LD_VAR 0 10
27015: PPUSH
27016: LD_VAR 0 8
27020: PPUSH
27021: LD_INT 5
27023: PPUSH
27024: CALL_OW 272
27028: PUSH
27029: LD_VAR 0 11
27033: PPUSH
27034: LD_VAR 0 8
27038: PPUSH
27039: LD_INT 5
27041: PPUSH
27042: CALL_OW 273
27046: PUSH
27047: EMPTY
27048: LIST
27049: LIST
27050: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27051: LD_VAR 0 9
27055: PUSH
27056: LD_INT 1
27058: ARRAY
27059: PPUSH
27060: LD_VAR 0 9
27064: PUSH
27065: LD_INT 2
27067: ARRAY
27068: PPUSH
27069: CALL_OW 488
27073: IFFALSE 27172
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27075: LD_ADDR_VAR 0 4
27079: PUSH
27080: LD_VAR 0 9
27084: PUSH
27085: LD_INT 1
27087: ARRAY
27088: PPUSH
27089: LD_VAR 0 9
27093: PUSH
27094: LD_INT 2
27096: ARRAY
27097: PPUSH
27098: CALL_OW 546
27102: ST_TO_ADDR
// if hex [ 1 ] then
27103: LD_VAR 0 4
27107: PUSH
27108: LD_INT 1
27110: ARRAY
27111: IFFALSE 27115
// continue ;
27113: GO 27003
// h := hex [ 2 ] ;
27115: LD_ADDR_VAR 0 13
27119: PUSH
27120: LD_VAR 0 4
27124: PUSH
27125: LD_INT 2
27127: ARRAY
27128: ST_TO_ADDR
// if h + 7 < height then
27129: LD_VAR 0 13
27133: PUSH
27134: LD_INT 7
27136: PLUS
27137: PUSH
27138: LD_VAR 0 15
27142: LESS
27143: IFFALSE 27172
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27145: LD_ADDR_VAR 0 18
27149: PUSH
27150: LD_INT 7
27152: PUSH
27153: LD_INT 28
27155: PUSH
27156: LD_INT 45
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: PUSH
27164: LD_VAR 0 12
27168: ARRAY
27169: ST_TO_ADDR
// break ;
27170: GO 27174
// end ; end ; end ;
27172: GO 27003
27174: POP
27175: POP
// end ; if not weapon then
27176: LD_VAR 0 18
27180: NOT
27181: IFFALSE 27241
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27183: LD_ADDR_VAR 0 5
27187: PUSH
27188: LD_VAR 0 5
27192: PUSH
27193: LD_INT 11
27195: PUSH
27196: LD_INT 30
27198: PUSH
27199: LD_INT 49
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: DIFF
27207: ST_TO_ADDR
// if not list then
27208: LD_VAR 0 5
27212: NOT
27213: IFFALSE 27217
// exit ;
27215: GO 27359
// weapon := list [ rand ( 1 , list ) ] ;
27217: LD_ADDR_VAR 0 18
27221: PUSH
27222: LD_VAR 0 5
27226: PUSH
27227: LD_INT 1
27229: PPUSH
27230: LD_VAR 0 5
27234: PPUSH
27235: CALL_OW 12
27239: ARRAY
27240: ST_TO_ADDR
// end ; if weapon then
27241: LD_VAR 0 18
27245: IFFALSE 27359
// begin tmp := CostOfWeapon ( weapon ) ;
27247: LD_ADDR_VAR 0 14
27251: PUSH
27252: LD_VAR 0 18
27256: PPUSH
27257: CALL_OW 451
27261: ST_TO_ADDR
// j := GetBase ( tower ) ;
27262: LD_ADDR_VAR 0 9
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 274
27276: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27277: LD_VAR 0 9
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL_OW 275
27289: PUSH
27290: LD_VAR 0 14
27294: PUSH
27295: LD_INT 1
27297: ARRAY
27298: GREATEREQUAL
27299: PUSH
27300: LD_VAR 0 9
27304: PPUSH
27305: LD_INT 2
27307: PPUSH
27308: CALL_OW 275
27312: PUSH
27313: LD_VAR 0 14
27317: PUSH
27318: LD_INT 2
27320: ARRAY
27321: GREATEREQUAL
27322: AND
27323: PUSH
27324: LD_VAR 0 9
27328: PPUSH
27329: LD_INT 3
27331: PPUSH
27332: CALL_OW 275
27336: PUSH
27337: LD_VAR 0 14
27341: PUSH
27342: LD_INT 3
27344: ARRAY
27345: GREATEREQUAL
27346: AND
27347: IFFALSE 27359
// result := weapon ;
27349: LD_ADDR_VAR 0 3
27353: PUSH
27354: LD_VAR 0 18
27358: ST_TO_ADDR
// end ; end ;
27359: LD_VAR 0 3
27363: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27364: LD_INT 0
27366: PPUSH
27367: PPUSH
// result := true ;
27368: LD_ADDR_VAR 0 3
27372: PUSH
27373: LD_INT 1
27375: ST_TO_ADDR
// if array1 = array2 then
27376: LD_VAR 0 1
27380: PUSH
27381: LD_VAR 0 2
27385: EQUAL
27386: IFFALSE 27446
// begin for i = 1 to array1 do
27388: LD_ADDR_VAR 0 4
27392: PUSH
27393: DOUBLE
27394: LD_INT 1
27396: DEC
27397: ST_TO_ADDR
27398: LD_VAR 0 1
27402: PUSH
27403: FOR_TO
27404: IFFALSE 27442
// if array1 [ i ] <> array2 [ i ] then
27406: LD_VAR 0 1
27410: PUSH
27411: LD_VAR 0 4
27415: ARRAY
27416: PUSH
27417: LD_VAR 0 2
27421: PUSH
27422: LD_VAR 0 4
27426: ARRAY
27427: NONEQUAL
27428: IFFALSE 27440
// begin result := false ;
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: LD_INT 0
27437: ST_TO_ADDR
// break ;
27438: GO 27442
// end ;
27440: GO 27403
27442: POP
27443: POP
// end else
27444: GO 27454
// result := false ;
27446: LD_ADDR_VAR 0 3
27450: PUSH
27451: LD_INT 0
27453: ST_TO_ADDR
// end ;
27454: LD_VAR 0 3
27458: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
// if not array1 or not array2 then
27463: LD_VAR 0 1
27467: NOT
27468: PUSH
27469: LD_VAR 0 2
27473: NOT
27474: OR
27475: IFFALSE 27479
// exit ;
27477: GO 27543
// result := true ;
27479: LD_ADDR_VAR 0 3
27483: PUSH
27484: LD_INT 1
27486: ST_TO_ADDR
// for i = 1 to array1 do
27487: LD_ADDR_VAR 0 4
27491: PUSH
27492: DOUBLE
27493: LD_INT 1
27495: DEC
27496: ST_TO_ADDR
27497: LD_VAR 0 1
27501: PUSH
27502: FOR_TO
27503: IFFALSE 27541
// if array1 [ i ] <> array2 [ i ] then
27505: LD_VAR 0 1
27509: PUSH
27510: LD_VAR 0 4
27514: ARRAY
27515: PUSH
27516: LD_VAR 0 2
27520: PUSH
27521: LD_VAR 0 4
27525: ARRAY
27526: NONEQUAL
27527: IFFALSE 27539
// begin result := false ;
27529: LD_ADDR_VAR 0 3
27533: PUSH
27534: LD_INT 0
27536: ST_TO_ADDR
// break ;
27537: GO 27541
// end ;
27539: GO 27502
27541: POP
27542: POP
// end ;
27543: LD_VAR 0 3
27547: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27548: LD_INT 0
27550: PPUSH
27551: PPUSH
27552: PPUSH
// pom := GetBase ( fac ) ;
27553: LD_ADDR_VAR 0 5
27557: PUSH
27558: LD_VAR 0 1
27562: PPUSH
27563: CALL_OW 274
27567: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27568: LD_ADDR_VAR 0 4
27572: PUSH
27573: LD_VAR 0 2
27577: PUSH
27578: LD_INT 1
27580: ARRAY
27581: PPUSH
27582: LD_VAR 0 2
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: PPUSH
27591: LD_VAR 0 2
27595: PUSH
27596: LD_INT 3
27598: ARRAY
27599: PPUSH
27600: LD_VAR 0 2
27604: PUSH
27605: LD_INT 4
27607: ARRAY
27608: PPUSH
27609: CALL_OW 449
27613: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27614: LD_ADDR_VAR 0 3
27618: PUSH
27619: LD_VAR 0 5
27623: PPUSH
27624: LD_INT 1
27626: PPUSH
27627: CALL_OW 275
27631: PUSH
27632: LD_VAR 0 4
27636: PUSH
27637: LD_INT 1
27639: ARRAY
27640: GREATEREQUAL
27641: PUSH
27642: LD_VAR 0 5
27646: PPUSH
27647: LD_INT 2
27649: PPUSH
27650: CALL_OW 275
27654: PUSH
27655: LD_VAR 0 4
27659: PUSH
27660: LD_INT 2
27662: ARRAY
27663: GREATEREQUAL
27664: AND
27665: PUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: LD_INT 3
27673: PPUSH
27674: CALL_OW 275
27678: PUSH
27679: LD_VAR 0 4
27683: PUSH
27684: LD_INT 3
27686: ARRAY
27687: GREATEREQUAL
27688: AND
27689: ST_TO_ADDR
// end ;
27690: LD_VAR 0 3
27694: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27695: LD_INT 0
27697: PPUSH
27698: PPUSH
27699: PPUSH
27700: PPUSH
// pom := GetBase ( building ) ;
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_VAR 0 1
27710: PPUSH
27711: CALL_OW 274
27715: ST_TO_ADDR
// if not pom then
27716: LD_VAR 0 3
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 27895
// btype := GetBType ( building ) ;
27725: LD_ADDR_VAR 0 5
27729: PUSH
27730: LD_VAR 0 1
27734: PPUSH
27735: CALL_OW 266
27739: ST_TO_ADDR
// if btype = b_armoury then
27740: LD_VAR 0 5
27744: PUSH
27745: LD_INT 4
27747: EQUAL
27748: IFFALSE 27758
// btype := b_barracks ;
27750: LD_ADDR_VAR 0 5
27754: PUSH
27755: LD_INT 5
27757: ST_TO_ADDR
// if btype = b_depot then
27758: LD_VAR 0 5
27762: PUSH
27763: LD_INT 0
27765: EQUAL
27766: IFFALSE 27776
// btype := b_warehouse ;
27768: LD_ADDR_VAR 0 5
27772: PUSH
27773: LD_INT 1
27775: ST_TO_ADDR
// if btype = b_workshop then
27776: LD_VAR 0 5
27780: PUSH
27781: LD_INT 2
27783: EQUAL
27784: IFFALSE 27794
// btype := b_factory ;
27786: LD_ADDR_VAR 0 5
27790: PUSH
27791: LD_INT 3
27793: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27794: LD_ADDR_VAR 0 4
27798: PUSH
27799: LD_VAR 0 5
27803: PPUSH
27804: LD_VAR 0 1
27808: PPUSH
27809: CALL_OW 248
27813: PPUSH
27814: CALL_OW 450
27818: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27819: LD_ADDR_VAR 0 2
27823: PUSH
27824: LD_VAR 0 3
27828: PPUSH
27829: LD_INT 1
27831: PPUSH
27832: CALL_OW 275
27836: PUSH
27837: LD_VAR 0 4
27841: PUSH
27842: LD_INT 1
27844: ARRAY
27845: GREATEREQUAL
27846: PUSH
27847: LD_VAR 0 3
27851: PPUSH
27852: LD_INT 2
27854: PPUSH
27855: CALL_OW 275
27859: PUSH
27860: LD_VAR 0 4
27864: PUSH
27865: LD_INT 2
27867: ARRAY
27868: GREATEREQUAL
27869: AND
27870: PUSH
27871: LD_VAR 0 3
27875: PPUSH
27876: LD_INT 3
27878: PPUSH
27879: CALL_OW 275
27883: PUSH
27884: LD_VAR 0 4
27888: PUSH
27889: LD_INT 3
27891: ARRAY
27892: GREATEREQUAL
27893: AND
27894: ST_TO_ADDR
// end ;
27895: LD_VAR 0 2
27899: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
27904: PPUSH
// pom := GetBase ( building ) ;
27905: LD_ADDR_VAR 0 4
27909: PUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 274
27919: ST_TO_ADDR
// if not pom then
27920: LD_VAR 0 4
27924: NOT
27925: IFFALSE 27929
// exit ;
27927: GO 28030
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27929: LD_ADDR_VAR 0 5
27933: PUSH
27934: LD_VAR 0 2
27938: PPUSH
27939: LD_VAR 0 1
27943: PPUSH
27944: CALL_OW 248
27948: PPUSH
27949: CALL_OW 450
27953: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27954: LD_ADDR_VAR 0 3
27958: PUSH
27959: LD_VAR 0 4
27963: PPUSH
27964: LD_INT 1
27966: PPUSH
27967: CALL_OW 275
27971: PUSH
27972: LD_VAR 0 5
27976: PUSH
27977: LD_INT 1
27979: ARRAY
27980: GREATEREQUAL
27981: PUSH
27982: LD_VAR 0 4
27986: PPUSH
27987: LD_INT 2
27989: PPUSH
27990: CALL_OW 275
27994: PUSH
27995: LD_VAR 0 5
27999: PUSH
28000: LD_INT 2
28002: ARRAY
28003: GREATEREQUAL
28004: AND
28005: PUSH
28006: LD_VAR 0 4
28010: PPUSH
28011: LD_INT 3
28013: PPUSH
28014: CALL_OW 275
28018: PUSH
28019: LD_VAR 0 5
28023: PUSH
28024: LD_INT 3
28026: ARRAY
28027: GREATEREQUAL
28028: AND
28029: ST_TO_ADDR
// end ;
28030: LD_VAR 0 3
28034: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28035: LD_INT 0
28037: PPUSH
28038: PPUSH
28039: PPUSH
28040: PPUSH
28041: PPUSH
28042: PPUSH
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
28047: PPUSH
// result := false ;
28048: LD_ADDR_VAR 0 8
28052: PUSH
28053: LD_INT 0
28055: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28056: LD_VAR 0 5
28060: NOT
28061: PUSH
28062: LD_VAR 0 1
28066: NOT
28067: OR
28068: PUSH
28069: LD_VAR 0 2
28073: NOT
28074: OR
28075: PUSH
28076: LD_VAR 0 3
28080: NOT
28081: OR
28082: IFFALSE 28086
// exit ;
28084: GO 28900
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28086: LD_ADDR_VAR 0 14
28090: PUSH
28091: LD_VAR 0 1
28095: PPUSH
28096: LD_VAR 0 2
28100: PPUSH
28101: LD_VAR 0 3
28105: PPUSH
28106: LD_VAR 0 4
28110: PPUSH
28111: LD_VAR 0 5
28115: PUSH
28116: LD_INT 1
28118: ARRAY
28119: PPUSH
28120: CALL_OW 248
28124: PPUSH
28125: LD_INT 0
28127: PPUSH
28128: CALL 30137 0 6
28132: ST_TO_ADDR
// if not hexes then
28133: LD_VAR 0 14
28137: NOT
28138: IFFALSE 28142
// exit ;
28140: GO 28900
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28142: LD_ADDR_VAR 0 17
28146: PUSH
28147: LD_VAR 0 5
28151: PPUSH
28152: LD_INT 22
28154: PUSH
28155: LD_VAR 0 13
28159: PPUSH
28160: CALL_OW 255
28164: PUSH
28165: EMPTY
28166: LIST
28167: LIST
28168: PUSH
28169: LD_INT 2
28171: PUSH
28172: LD_INT 30
28174: PUSH
28175: LD_INT 0
28177: PUSH
28178: EMPTY
28179: LIST
28180: LIST
28181: PUSH
28182: LD_INT 30
28184: PUSH
28185: LD_INT 1
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: LIST
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PPUSH
28201: CALL_OW 72
28205: ST_TO_ADDR
// for i = 1 to hexes do
28206: LD_ADDR_VAR 0 9
28210: PUSH
28211: DOUBLE
28212: LD_INT 1
28214: DEC
28215: ST_TO_ADDR
28216: LD_VAR 0 14
28220: PUSH
28221: FOR_TO
28222: IFFALSE 28898
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28224: LD_ADDR_VAR 0 13
28228: PUSH
28229: LD_VAR 0 14
28233: PUSH
28234: LD_VAR 0 9
28238: ARRAY
28239: PUSH
28240: LD_INT 1
28242: ARRAY
28243: PPUSH
28244: LD_VAR 0 14
28248: PUSH
28249: LD_VAR 0 9
28253: ARRAY
28254: PUSH
28255: LD_INT 2
28257: ARRAY
28258: PPUSH
28259: CALL_OW 428
28263: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28264: LD_VAR 0 14
28268: PUSH
28269: LD_VAR 0 9
28273: ARRAY
28274: PUSH
28275: LD_INT 1
28277: ARRAY
28278: PPUSH
28279: LD_VAR 0 14
28283: PUSH
28284: LD_VAR 0 9
28288: ARRAY
28289: PUSH
28290: LD_INT 2
28292: ARRAY
28293: PPUSH
28294: CALL_OW 351
28298: PUSH
28299: LD_VAR 0 14
28303: PUSH
28304: LD_VAR 0 9
28308: ARRAY
28309: PUSH
28310: LD_INT 1
28312: ARRAY
28313: PPUSH
28314: LD_VAR 0 14
28318: PUSH
28319: LD_VAR 0 9
28323: ARRAY
28324: PUSH
28325: LD_INT 2
28327: ARRAY
28328: PPUSH
28329: CALL_OW 488
28333: NOT
28334: OR
28335: PUSH
28336: LD_VAR 0 13
28340: PPUSH
28341: CALL_OW 247
28345: PUSH
28346: LD_INT 3
28348: EQUAL
28349: OR
28350: IFFALSE 28356
// exit ;
28352: POP
28353: POP
28354: GO 28900
// if not tmp then
28356: LD_VAR 0 13
28360: NOT
28361: IFFALSE 28365
// continue ;
28363: GO 28221
// result := true ;
28365: LD_ADDR_VAR 0 8
28369: PUSH
28370: LD_INT 1
28372: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
28373: LD_VAR 0 6
28377: PUSH
28378: LD_VAR 0 13
28382: PPUSH
28383: CALL_OW 247
28387: PUSH
28388: LD_INT 2
28390: EQUAL
28391: AND
28392: PUSH
28393: LD_VAR 0 13
28397: PPUSH
28398: CALL_OW 263
28402: PUSH
28403: LD_INT 1
28405: EQUAL
28406: AND
28407: IFFALSE 28571
// begin if IsDrivenBy ( tmp ) then
28409: LD_VAR 0 13
28413: PPUSH
28414: CALL_OW 311
28418: IFFALSE 28422
// continue ;
28420: GO 28221
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
28422: LD_VAR 0 6
28426: PPUSH
28427: LD_INT 3
28429: PUSH
28430: LD_INT 60
28432: PUSH
28433: EMPTY
28434: LIST
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: PUSH
28440: LD_INT 3
28442: PUSH
28443: LD_INT 55
28445: PUSH
28446: EMPTY
28447: LIST
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: EMPTY
28454: LIST
28455: LIST
28456: PPUSH
28457: CALL_OW 72
28461: IFFALSE 28569
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
28463: LD_ADDR_VAR 0 18
28467: PUSH
28468: LD_VAR 0 6
28472: PPUSH
28473: LD_INT 3
28475: PUSH
28476: LD_INT 60
28478: PUSH
28479: EMPTY
28480: LIST
28481: PUSH
28482: EMPTY
28483: LIST
28484: LIST
28485: PUSH
28486: LD_INT 3
28488: PUSH
28489: LD_INT 55
28491: PUSH
28492: EMPTY
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PPUSH
28503: CALL_OW 72
28507: PUSH
28508: LD_INT 1
28510: ARRAY
28511: ST_TO_ADDR
// if IsInUnit ( driver ) then
28512: LD_VAR 0 18
28516: PPUSH
28517: CALL_OW 310
28521: IFFALSE 28532
// ComExit ( driver ) ;
28523: LD_VAR 0 18
28527: PPUSH
28528: CALL 53321 0 1
// AddComEnterUnit ( driver , tmp ) ;
28532: LD_VAR 0 18
28536: PPUSH
28537: LD_VAR 0 13
28541: PPUSH
28542: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
28546: LD_VAR 0 18
28550: PPUSH
28551: LD_VAR 0 7
28555: PPUSH
28556: CALL_OW 173
// AddComExitVehicle ( driver ) ;
28560: LD_VAR 0 18
28564: PPUSH
28565: CALL_OW 181
// end ; continue ;
28569: GO 28221
// end ; if not cleaners or not tmp in cleaners then
28571: LD_VAR 0 6
28575: NOT
28576: PUSH
28577: LD_VAR 0 13
28581: PUSH
28582: LD_VAR 0 6
28586: IN
28587: NOT
28588: OR
28589: IFFALSE 28896
// begin if dep then
28591: LD_VAR 0 17
28595: IFFALSE 28731
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28597: LD_ADDR_VAR 0 16
28601: PUSH
28602: LD_VAR 0 17
28606: PUSH
28607: LD_INT 1
28609: ARRAY
28610: PPUSH
28611: CALL_OW 250
28615: PPUSH
28616: LD_VAR 0 17
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PPUSH
28625: CALL_OW 254
28629: PPUSH
28630: LD_INT 5
28632: PPUSH
28633: CALL_OW 272
28637: PUSH
28638: LD_VAR 0 17
28642: PUSH
28643: LD_INT 1
28645: ARRAY
28646: PPUSH
28647: CALL_OW 251
28651: PPUSH
28652: LD_VAR 0 17
28656: PUSH
28657: LD_INT 1
28659: ARRAY
28660: PPUSH
28661: CALL_OW 254
28665: PPUSH
28666: LD_INT 5
28668: PPUSH
28669: CALL_OW 273
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28678: LD_VAR 0 16
28682: PUSH
28683: LD_INT 1
28685: ARRAY
28686: PPUSH
28687: LD_VAR 0 16
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: CALL_OW 488
28700: IFFALSE 28731
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28702: LD_VAR 0 13
28706: PPUSH
28707: LD_VAR 0 16
28711: PUSH
28712: LD_INT 1
28714: ARRAY
28715: PPUSH
28716: LD_VAR 0 16
28720: PUSH
28721: LD_INT 2
28723: ARRAY
28724: PPUSH
28725: CALL_OW 111
// continue ;
28729: GO 28221
// end ; end ; r := GetDir ( tmp ) ;
28731: LD_ADDR_VAR 0 15
28735: PUSH
28736: LD_VAR 0 13
28740: PPUSH
28741: CALL_OW 254
28745: ST_TO_ADDR
// if r = 5 then
28746: LD_VAR 0 15
28750: PUSH
28751: LD_INT 5
28753: EQUAL
28754: IFFALSE 28764
// r := 0 ;
28756: LD_ADDR_VAR 0 15
28760: PUSH
28761: LD_INT 0
28763: ST_TO_ADDR
// for j = r to 5 do
28764: LD_ADDR_VAR 0 10
28768: PUSH
28769: DOUBLE
28770: LD_VAR 0 15
28774: DEC
28775: ST_TO_ADDR
28776: LD_INT 5
28778: PUSH
28779: FOR_TO
28780: IFFALSE 28894
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28782: LD_ADDR_VAR 0 11
28786: PUSH
28787: LD_VAR 0 13
28791: PPUSH
28792: CALL_OW 250
28796: PPUSH
28797: LD_VAR 0 10
28801: PPUSH
28802: LD_INT 2
28804: PPUSH
28805: CALL_OW 272
28809: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28810: LD_ADDR_VAR 0 12
28814: PUSH
28815: LD_VAR 0 13
28819: PPUSH
28820: CALL_OW 251
28824: PPUSH
28825: LD_VAR 0 10
28829: PPUSH
28830: LD_INT 2
28832: PPUSH
28833: CALL_OW 273
28837: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28838: LD_VAR 0 11
28842: PPUSH
28843: LD_VAR 0 12
28847: PPUSH
28848: CALL_OW 488
28852: PUSH
28853: LD_VAR 0 11
28857: PPUSH
28858: LD_VAR 0 12
28862: PPUSH
28863: CALL_OW 428
28867: NOT
28868: AND
28869: IFFALSE 28892
// begin ComMoveXY ( tmp , _x , _y ) ;
28871: LD_VAR 0 13
28875: PPUSH
28876: LD_VAR 0 11
28880: PPUSH
28881: LD_VAR 0 12
28885: PPUSH
28886: CALL_OW 111
// break ;
28890: GO 28894
// end ; end ;
28892: GO 28779
28894: POP
28895: POP
// end ; end ;
28896: GO 28221
28898: POP
28899: POP
// end ;
28900: LD_VAR 0 8
28904: RET
// export function BuildingTechInvented ( side , btype ) ; begin
28905: LD_INT 0
28907: PPUSH
// result := true ;
28908: LD_ADDR_VAR 0 3
28912: PUSH
28913: LD_INT 1
28915: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
28916: LD_VAR 0 2
28920: PUSH
28921: LD_INT 24
28923: DOUBLE
28924: EQUAL
28925: IFTRUE 28935
28927: LD_INT 33
28929: DOUBLE
28930: EQUAL
28931: IFTRUE 28935
28933: GO 28960
28935: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
28936: LD_ADDR_VAR 0 3
28940: PUSH
28941: LD_INT 32
28943: PPUSH
28944: LD_VAR 0 1
28948: PPUSH
28949: CALL_OW 321
28953: PUSH
28954: LD_INT 2
28956: EQUAL
28957: ST_TO_ADDR
28958: GO 29280
28960: LD_INT 20
28962: DOUBLE
28963: EQUAL
28964: IFTRUE 28968
28966: GO 28993
28968: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_INT 6
28976: PPUSH
28977: LD_VAR 0 1
28981: PPUSH
28982: CALL_OW 321
28986: PUSH
28987: LD_INT 2
28989: EQUAL
28990: ST_TO_ADDR
28991: GO 29280
28993: LD_INT 22
28995: DOUBLE
28996: EQUAL
28997: IFTRUE 29007
28999: LD_INT 36
29001: DOUBLE
29002: EQUAL
29003: IFTRUE 29007
29005: GO 29032
29007: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29008: LD_ADDR_VAR 0 3
29012: PUSH
29013: LD_INT 15
29015: PPUSH
29016: LD_VAR 0 1
29020: PPUSH
29021: CALL_OW 321
29025: PUSH
29026: LD_INT 2
29028: EQUAL
29029: ST_TO_ADDR
29030: GO 29280
29032: LD_INT 30
29034: DOUBLE
29035: EQUAL
29036: IFTRUE 29040
29038: GO 29065
29040: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29041: LD_ADDR_VAR 0 3
29045: PUSH
29046: LD_INT 20
29048: PPUSH
29049: LD_VAR 0 1
29053: PPUSH
29054: CALL_OW 321
29058: PUSH
29059: LD_INT 2
29061: EQUAL
29062: ST_TO_ADDR
29063: GO 29280
29065: LD_INT 28
29067: DOUBLE
29068: EQUAL
29069: IFTRUE 29079
29071: LD_INT 21
29073: DOUBLE
29074: EQUAL
29075: IFTRUE 29079
29077: GO 29104
29079: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_INT 21
29087: PPUSH
29088: LD_VAR 0 1
29092: PPUSH
29093: CALL_OW 321
29097: PUSH
29098: LD_INT 2
29100: EQUAL
29101: ST_TO_ADDR
29102: GO 29280
29104: LD_INT 16
29106: DOUBLE
29107: EQUAL
29108: IFTRUE 29112
29110: GO 29139
29112: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29113: LD_ADDR_VAR 0 3
29117: PUSH
29118: LD_EXP 119
29122: PPUSH
29123: LD_VAR 0 1
29127: PPUSH
29128: CALL_OW 321
29132: PUSH
29133: LD_INT 2
29135: EQUAL
29136: ST_TO_ADDR
29137: GO 29280
29139: LD_INT 19
29141: DOUBLE
29142: EQUAL
29143: IFTRUE 29153
29145: LD_INT 23
29147: DOUBLE
29148: EQUAL
29149: IFTRUE 29153
29151: GO 29180
29153: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29154: LD_ADDR_VAR 0 3
29158: PUSH
29159: LD_EXP 118
29163: PPUSH
29164: LD_VAR 0 1
29168: PPUSH
29169: CALL_OW 321
29173: PUSH
29174: LD_INT 2
29176: EQUAL
29177: ST_TO_ADDR
29178: GO 29280
29180: LD_INT 17
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29213
29188: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29189: LD_ADDR_VAR 0 3
29193: PUSH
29194: LD_INT 39
29196: PPUSH
29197: LD_VAR 0 1
29201: PPUSH
29202: CALL_OW 321
29206: PUSH
29207: LD_INT 2
29209: EQUAL
29210: ST_TO_ADDR
29211: GO 29280
29213: LD_INT 18
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29246
29221: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_INT 40
29229: PPUSH
29230: LD_VAR 0 1
29234: PPUSH
29235: CALL_OW 321
29239: PUSH
29240: LD_INT 2
29242: EQUAL
29243: ST_TO_ADDR
29244: GO 29280
29246: LD_INT 27
29248: DOUBLE
29249: EQUAL
29250: IFTRUE 29254
29252: GO 29279
29254: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29255: LD_ADDR_VAR 0 3
29259: PUSH
29260: LD_INT 35
29262: PPUSH
29263: LD_VAR 0 1
29267: PPUSH
29268: CALL_OW 321
29272: PUSH
29273: LD_INT 2
29275: EQUAL
29276: ST_TO_ADDR
29277: GO 29280
29279: POP
// end ;
29280: LD_VAR 0 3
29284: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
// result := false ;
29298: LD_ADDR_VAR 0 6
29302: PUSH
29303: LD_INT 0
29305: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
29306: LD_VAR 0 1
29310: NOT
29311: PUSH
29312: LD_VAR 0 1
29316: PPUSH
29317: CALL_OW 266
29321: PUSH
29322: LD_INT 0
29324: PUSH
29325: LD_INT 1
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: IN
29332: NOT
29333: OR
29334: PUSH
29335: LD_VAR 0 2
29339: NOT
29340: OR
29341: PUSH
29342: LD_VAR 0 5
29346: PUSH
29347: LD_INT 0
29349: PUSH
29350: LD_INT 1
29352: PUSH
29353: LD_INT 2
29355: PUSH
29356: LD_INT 3
29358: PUSH
29359: LD_INT 4
29361: PUSH
29362: LD_INT 5
29364: PUSH
29365: EMPTY
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: IN
29373: NOT
29374: OR
29375: PUSH
29376: LD_VAR 0 3
29380: PPUSH
29381: LD_VAR 0 4
29385: PPUSH
29386: CALL_OW 488
29390: NOT
29391: OR
29392: IFFALSE 29396
// exit ;
29394: GO 30132
// side := GetSide ( depot ) ;
29396: LD_ADDR_VAR 0 9
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: CALL_OW 255
29410: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
29411: LD_VAR 0 9
29415: PPUSH
29416: LD_VAR 0 2
29420: PPUSH
29421: CALL 28905 0 2
29425: NOT
29426: IFFALSE 29430
// exit ;
29428: GO 30132
// pom := GetBase ( depot ) ;
29430: LD_ADDR_VAR 0 10
29434: PUSH
29435: LD_VAR 0 1
29439: PPUSH
29440: CALL_OW 274
29444: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
29445: LD_ADDR_VAR 0 11
29449: PUSH
29450: LD_VAR 0 2
29454: PPUSH
29455: LD_VAR 0 1
29459: PPUSH
29460: CALL_OW 248
29464: PPUSH
29465: CALL_OW 450
29469: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
29470: LD_VAR 0 10
29474: PPUSH
29475: LD_INT 1
29477: PPUSH
29478: CALL_OW 275
29482: PUSH
29483: LD_VAR 0 11
29487: PUSH
29488: LD_INT 1
29490: ARRAY
29491: GREATEREQUAL
29492: PUSH
29493: LD_VAR 0 10
29497: PPUSH
29498: LD_INT 2
29500: PPUSH
29501: CALL_OW 275
29505: PUSH
29506: LD_VAR 0 11
29510: PUSH
29511: LD_INT 2
29513: ARRAY
29514: GREATEREQUAL
29515: AND
29516: PUSH
29517: LD_VAR 0 10
29521: PPUSH
29522: LD_INT 3
29524: PPUSH
29525: CALL_OW 275
29529: PUSH
29530: LD_VAR 0 11
29534: PUSH
29535: LD_INT 3
29537: ARRAY
29538: GREATEREQUAL
29539: AND
29540: NOT
29541: IFFALSE 29545
// exit ;
29543: GO 30132
// if GetBType ( depot ) = b_depot then
29545: LD_VAR 0 1
29549: PPUSH
29550: CALL_OW 266
29554: PUSH
29555: LD_INT 0
29557: EQUAL
29558: IFFALSE 29570
// dist := 28 else
29560: LD_ADDR_VAR 0 14
29564: PUSH
29565: LD_INT 28
29567: ST_TO_ADDR
29568: GO 29578
// dist := 36 ;
29570: LD_ADDR_VAR 0 14
29574: PUSH
29575: LD_INT 36
29577: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
29578: LD_VAR 0 1
29582: PPUSH
29583: LD_VAR 0 3
29587: PPUSH
29588: LD_VAR 0 4
29592: PPUSH
29593: CALL_OW 297
29597: PUSH
29598: LD_VAR 0 14
29602: GREATER
29603: IFFALSE 29607
// exit ;
29605: GO 30132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
29607: LD_ADDR_VAR 0 12
29611: PUSH
29612: LD_VAR 0 2
29616: PPUSH
29617: LD_VAR 0 3
29621: PPUSH
29622: LD_VAR 0 4
29626: PPUSH
29627: LD_VAR 0 5
29631: PPUSH
29632: LD_VAR 0 1
29636: PPUSH
29637: CALL_OW 248
29641: PPUSH
29642: LD_INT 0
29644: PPUSH
29645: CALL 30137 0 6
29649: ST_TO_ADDR
// if not hexes then
29650: LD_VAR 0 12
29654: NOT
29655: IFFALSE 29659
// exit ;
29657: GO 30132
// hex := GetHexInfo ( x , y ) ;
29659: LD_ADDR_VAR 0 15
29663: PUSH
29664: LD_VAR 0 3
29668: PPUSH
29669: LD_VAR 0 4
29673: PPUSH
29674: CALL_OW 546
29678: ST_TO_ADDR
// if hex [ 1 ] then
29679: LD_VAR 0 15
29683: PUSH
29684: LD_INT 1
29686: ARRAY
29687: IFFALSE 29691
// exit ;
29689: GO 30132
// height := hex [ 2 ] ;
29691: LD_ADDR_VAR 0 13
29695: PUSH
29696: LD_VAR 0 15
29700: PUSH
29701: LD_INT 2
29703: ARRAY
29704: ST_TO_ADDR
// for i = 1 to hexes do
29705: LD_ADDR_VAR 0 7
29709: PUSH
29710: DOUBLE
29711: LD_INT 1
29713: DEC
29714: ST_TO_ADDR
29715: LD_VAR 0 12
29719: PUSH
29720: FOR_TO
29721: IFFALSE 30051
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
29723: LD_VAR 0 12
29727: PUSH
29728: LD_VAR 0 7
29732: ARRAY
29733: PUSH
29734: LD_INT 1
29736: ARRAY
29737: PPUSH
29738: LD_VAR 0 12
29742: PUSH
29743: LD_VAR 0 7
29747: ARRAY
29748: PUSH
29749: LD_INT 2
29751: ARRAY
29752: PPUSH
29753: CALL_OW 488
29757: NOT
29758: PUSH
29759: LD_VAR 0 12
29763: PUSH
29764: LD_VAR 0 7
29768: ARRAY
29769: PUSH
29770: LD_INT 1
29772: ARRAY
29773: PPUSH
29774: LD_VAR 0 12
29778: PUSH
29779: LD_VAR 0 7
29783: ARRAY
29784: PUSH
29785: LD_INT 2
29787: ARRAY
29788: PPUSH
29789: CALL_OW 428
29793: PUSH
29794: LD_INT 0
29796: GREATER
29797: OR
29798: PUSH
29799: LD_VAR 0 12
29803: PUSH
29804: LD_VAR 0 7
29808: ARRAY
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: LD_VAR 0 12
29818: PUSH
29819: LD_VAR 0 7
29823: ARRAY
29824: PUSH
29825: LD_INT 2
29827: ARRAY
29828: PPUSH
29829: CALL_OW 351
29833: OR
29834: IFFALSE 29840
// exit ;
29836: POP
29837: POP
29838: GO 30132
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29840: LD_ADDR_VAR 0 8
29844: PUSH
29845: LD_VAR 0 12
29849: PUSH
29850: LD_VAR 0 7
29854: ARRAY
29855: PUSH
29856: LD_INT 1
29858: ARRAY
29859: PPUSH
29860: LD_VAR 0 12
29864: PUSH
29865: LD_VAR 0 7
29869: ARRAY
29870: PUSH
29871: LD_INT 2
29873: ARRAY
29874: PPUSH
29875: CALL_OW 546
29879: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29880: LD_VAR 0 8
29884: PUSH
29885: LD_INT 1
29887: ARRAY
29888: PUSH
29889: LD_VAR 0 8
29893: PUSH
29894: LD_INT 2
29896: ARRAY
29897: PUSH
29898: LD_VAR 0 13
29902: PUSH
29903: LD_INT 2
29905: PLUS
29906: GREATER
29907: OR
29908: PUSH
29909: LD_VAR 0 8
29913: PUSH
29914: LD_INT 2
29916: ARRAY
29917: PUSH
29918: LD_VAR 0 13
29922: PUSH
29923: LD_INT 2
29925: MINUS
29926: LESS
29927: OR
29928: PUSH
29929: LD_VAR 0 8
29933: PUSH
29934: LD_INT 3
29936: ARRAY
29937: PUSH
29938: LD_INT 0
29940: PUSH
29941: LD_INT 8
29943: PUSH
29944: LD_INT 9
29946: PUSH
29947: LD_INT 10
29949: PUSH
29950: LD_INT 11
29952: PUSH
29953: LD_INT 12
29955: PUSH
29956: LD_INT 13
29958: PUSH
29959: LD_INT 16
29961: PUSH
29962: LD_INT 17
29964: PUSH
29965: LD_INT 18
29967: PUSH
29968: LD_INT 19
29970: PUSH
29971: LD_INT 20
29973: PUSH
29974: LD_INT 21
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: LIST
29990: LIST
29991: IN
29992: NOT
29993: OR
29994: PUSH
29995: LD_VAR 0 8
29999: PUSH
30000: LD_INT 5
30002: ARRAY
30003: NOT
30004: OR
30005: PUSH
30006: LD_VAR 0 8
30010: PUSH
30011: LD_INT 6
30013: ARRAY
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: LD_INT 2
30020: PUSH
30021: LD_INT 7
30023: PUSH
30024: LD_INT 9
30026: PUSH
30027: LD_INT 10
30029: PUSH
30030: LD_INT 11
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: IN
30041: NOT
30042: OR
30043: IFFALSE 30049
// exit ;
30045: POP
30046: POP
30047: GO 30132
// end ;
30049: GO 29720
30051: POP
30052: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30053: LD_VAR 0 9
30057: PPUSH
30058: LD_VAR 0 3
30062: PPUSH
30063: LD_VAR 0 4
30067: PPUSH
30068: LD_INT 20
30070: PPUSH
30071: CALL 22078 0 4
30075: PUSH
30076: LD_INT 4
30078: ARRAY
30079: IFFALSE 30083
// exit ;
30081: GO 30132
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30083: LD_VAR 0 2
30087: PUSH
30088: LD_INT 29
30090: PUSH
30091: LD_INT 30
30093: PUSH
30094: EMPTY
30095: LIST
30096: LIST
30097: IN
30098: PUSH
30099: LD_VAR 0 3
30103: PPUSH
30104: LD_VAR 0 4
30108: PPUSH
30109: LD_VAR 0 9
30113: PPUSH
30114: CALL_OW 440
30118: NOT
30119: AND
30120: IFFALSE 30124
// exit ;
30122: GO 30132
// result := true ;
30124: LD_ADDR_VAR 0 6
30128: PUSH
30129: LD_INT 1
30131: ST_TO_ADDR
// end ;
30132: LD_VAR 0 6
30136: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30137: LD_INT 0
30139: PPUSH
30140: PPUSH
30141: PPUSH
30142: PPUSH
30143: PPUSH
30144: PPUSH
30145: PPUSH
30146: PPUSH
30147: PPUSH
30148: PPUSH
30149: PPUSH
30150: PPUSH
30151: PPUSH
30152: PPUSH
30153: PPUSH
30154: PPUSH
30155: PPUSH
30156: PPUSH
30157: PPUSH
30158: PPUSH
30159: PPUSH
30160: PPUSH
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
30165: PPUSH
30166: PPUSH
30167: PPUSH
30168: PPUSH
30169: PPUSH
30170: PPUSH
30171: PPUSH
30172: PPUSH
30173: PPUSH
30174: PPUSH
30175: PPUSH
30176: PPUSH
30177: PPUSH
30178: PPUSH
30179: PPUSH
30180: PPUSH
30181: PPUSH
30182: PPUSH
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
30187: PPUSH
30188: PPUSH
30189: PPUSH
30190: PPUSH
30191: PPUSH
30192: PPUSH
30193: PPUSH
30194: PPUSH
30195: PPUSH
30196: PPUSH
// result = [ ] ;
30197: LD_ADDR_VAR 0 7
30201: PUSH
30202: EMPTY
30203: ST_TO_ADDR
// temp_list = [ ] ;
30204: LD_ADDR_VAR 0 9
30208: PUSH
30209: EMPTY
30210: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30211: LD_VAR 0 4
30215: PUSH
30216: LD_INT 0
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 3
30227: PUSH
30228: LD_INT 4
30230: PUSH
30231: LD_INT 5
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: IN
30242: NOT
30243: PUSH
30244: LD_VAR 0 1
30248: PUSH
30249: LD_INT 0
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: IN
30259: PUSH
30260: LD_VAR 0 5
30264: PUSH
30265: LD_INT 1
30267: PUSH
30268: LD_INT 2
30270: PUSH
30271: LD_INT 3
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: LIST
30278: IN
30279: NOT
30280: AND
30281: OR
30282: IFFALSE 30286
// exit ;
30284: GO 48677
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
30286: LD_VAR 0 1
30290: PUSH
30291: LD_INT 6
30293: PUSH
30294: LD_INT 7
30296: PUSH
30297: LD_INT 8
30299: PUSH
30300: LD_INT 13
30302: PUSH
30303: LD_INT 12
30305: PUSH
30306: LD_INT 15
30308: PUSH
30309: LD_INT 11
30311: PUSH
30312: LD_INT 14
30314: PUSH
30315: LD_INT 10
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: LIST
30327: LIST
30328: IN
30329: IFFALSE 30339
// btype = b_lab ;
30331: LD_ADDR_VAR 0 1
30335: PUSH
30336: LD_INT 6
30338: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
30339: LD_VAR 0 6
30343: PUSH
30344: LD_INT 0
30346: PUSH
30347: LD_INT 1
30349: PUSH
30350: LD_INT 2
30352: PUSH
30353: EMPTY
30354: LIST
30355: LIST
30356: LIST
30357: IN
30358: NOT
30359: PUSH
30360: LD_VAR 0 1
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: LD_INT 1
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 6
30379: PUSH
30380: LD_INT 36
30382: PUSH
30383: LD_INT 4
30385: PUSH
30386: LD_INT 5
30388: PUSH
30389: LD_INT 31
30391: PUSH
30392: LD_INT 32
30394: PUSH
30395: LD_INT 33
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: IN
30411: NOT
30412: PUSH
30413: LD_VAR 0 6
30417: PUSH
30418: LD_INT 1
30420: EQUAL
30421: AND
30422: OR
30423: PUSH
30424: LD_VAR 0 1
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 3
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: IN
30439: NOT
30440: PUSH
30441: LD_VAR 0 6
30445: PUSH
30446: LD_INT 2
30448: EQUAL
30449: AND
30450: OR
30451: IFFALSE 30461
// mode = 0 ;
30453: LD_ADDR_VAR 0 6
30457: PUSH
30458: LD_INT 0
30460: ST_TO_ADDR
// case mode of 0 :
30461: LD_VAR 0 6
30465: PUSH
30466: LD_INT 0
30468: DOUBLE
30469: EQUAL
30470: IFTRUE 30474
30472: GO 41927
30474: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
30475: LD_ADDR_VAR 0 11
30479: PUSH
30480: LD_INT 0
30482: PUSH
30483: LD_INT 0
30485: PUSH
30486: EMPTY
30487: LIST
30488: LIST
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: LD_INT 1
30495: NEG
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 1
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 1
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: NEG
30534: PUSH
30535: LD_INT 0
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PUSH
30542: LD_INT 1
30544: NEG
30545: PUSH
30546: LD_INT 1
30548: NEG
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 1
30556: NEG
30557: PUSH
30558: LD_INT 2
30560: NEG
30561: PUSH
30562: EMPTY
30563: LIST
30564: LIST
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: LD_INT 2
30571: NEG
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 1
30582: NEG
30583: PUSH
30584: EMPTY
30585: LIST
30586: LIST
30587: PUSH
30588: LD_INT 1
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 1
30610: NEG
30611: PUSH
30612: LD_INT 1
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 3
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: LD_INT 3
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: LD_INT 2
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30668: LD_ADDR_VAR 0 12
30672: PUSH
30673: LD_INT 0
30675: PUSH
30676: LD_INT 0
30678: PUSH
30679: EMPTY
30680: LIST
30681: LIST
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: LD_INT 1
30688: NEG
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 1
30696: PUSH
30697: LD_INT 0
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 1
30706: PUSH
30707: LD_INT 1
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: LD_INT 1
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 1
30726: NEG
30727: PUSH
30728: LD_INT 0
30730: PUSH
30731: EMPTY
30732: LIST
30733: LIST
30734: PUSH
30735: LD_INT 1
30737: NEG
30738: PUSH
30739: LD_INT 1
30741: NEG
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 1
30749: PUSH
30750: LD_INT 1
30752: NEG
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: PUSH
30758: LD_INT 2
30760: PUSH
30761: LD_INT 0
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: PUSH
30768: LD_INT 2
30770: PUSH
30771: LD_INT 1
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 1
30780: NEG
30781: PUSH
30782: LD_INT 1
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: PUSH
30789: LD_INT 2
30791: NEG
30792: PUSH
30793: LD_INT 0
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: LD_INT 2
30802: NEG
30803: PUSH
30804: LD_INT 1
30806: NEG
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: PUSH
30812: LD_INT 2
30814: NEG
30815: PUSH
30816: LD_INT 1
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: PUSH
30823: LD_INT 3
30825: NEG
30826: PUSH
30827: LD_INT 0
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PUSH
30834: LD_INT 3
30836: NEG
30837: PUSH
30838: LD_INT 1
30840: NEG
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30864: LD_ADDR_VAR 0 13
30868: PUSH
30869: LD_INT 0
30871: PUSH
30872: LD_INT 0
30874: PUSH
30875: EMPTY
30876: LIST
30877: LIST
30878: PUSH
30879: LD_INT 0
30881: PUSH
30882: LD_INT 1
30884: NEG
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: LD_INT 0
30895: PUSH
30896: EMPTY
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 1
30902: PUSH
30903: LD_INT 1
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: PUSH
30910: LD_INT 0
30912: PUSH
30913: LD_INT 1
30915: PUSH
30916: EMPTY
30917: LIST
30918: LIST
30919: PUSH
30920: LD_INT 1
30922: NEG
30923: PUSH
30924: LD_INT 0
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PUSH
30931: LD_INT 1
30933: NEG
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: LD_INT 2
30949: NEG
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 1
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: PUSH
30965: LD_INT 2
30967: PUSH
30968: LD_INT 2
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 1
30977: PUSH
30978: LD_INT 2
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: NEG
30988: PUSH
30989: LD_INT 1
30991: NEG
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: PUSH
30997: LD_INT 2
30999: NEG
31000: PUSH
31001: LD_INT 2
31003: NEG
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: PUSH
31009: LD_INT 2
31011: NEG
31012: PUSH
31013: LD_INT 3
31015: NEG
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 3
31023: NEG
31024: PUSH
31025: LD_INT 2
31027: NEG
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: PUSH
31033: LD_INT 3
31035: NEG
31036: PUSH
31037: LD_INT 3
31039: NEG
31040: PUSH
31041: EMPTY
31042: LIST
31043: LIST
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31063: LD_ADDR_VAR 0 14
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 0
31080: PUSH
31081: LD_INT 1
31083: NEG
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: PUSH
31089: LD_INT 1
31091: PUSH
31092: LD_INT 0
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 0
31111: PUSH
31112: LD_INT 1
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: PUSH
31119: LD_INT 1
31121: NEG
31122: PUSH
31123: LD_INT 0
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: LD_INT 1
31132: NEG
31133: PUSH
31134: LD_INT 1
31136: NEG
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PUSH
31142: LD_INT 1
31144: NEG
31145: PUSH
31146: LD_INT 2
31148: NEG
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 0
31156: PUSH
31157: LD_INT 2
31159: NEG
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: PUSH
31168: LD_INT 1
31170: NEG
31171: PUSH
31172: EMPTY
31173: LIST
31174: LIST
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: LD_INT 2
31181: PUSH
31182: EMPTY
31183: LIST
31184: LIST
31185: PUSH
31186: LD_INT 0
31188: PUSH
31189: LD_INT 2
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: LD_INT 1
31198: NEG
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 1
31209: NEG
31210: PUSH
31211: LD_INT 3
31213: NEG
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: PUSH
31219: LD_INT 0
31221: PUSH
31222: LD_INT 3
31224: NEG
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: LD_INT 1
31232: PUSH
31233: LD_INT 2
31235: NEG
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: EMPTY
31242: LIST
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31259: LD_ADDR_VAR 0 15
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: LD_INT 0
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 0
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 1
31297: PUSH
31298: LD_INT 1
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: PUSH
31305: LD_INT 0
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: PUSH
31315: LD_INT 1
31317: NEG
31318: PUSH
31319: LD_INT 0
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PUSH
31326: LD_INT 1
31328: NEG
31329: PUSH
31330: LD_INT 1
31332: NEG
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: PUSH
31338: LD_INT 1
31340: PUSH
31341: LD_INT 1
31343: NEG
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: PUSH
31349: LD_INT 2
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: PUSH
31359: LD_INT 2
31361: PUSH
31362: LD_INT 1
31364: PUSH
31365: EMPTY
31366: LIST
31367: LIST
31368: PUSH
31369: LD_INT 1
31371: NEG
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 2
31382: NEG
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 2
31393: NEG
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 2
31405: PUSH
31406: LD_INT 1
31408: NEG
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 3
31416: PUSH
31417: LD_INT 0
31419: PUSH
31420: EMPTY
31421: LIST
31422: LIST
31423: PUSH
31424: LD_INT 3
31426: PUSH
31427: LD_INT 1
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
31452: LD_ADDR_VAR 0 16
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: LD_INT 0
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 1
31490: PUSH
31491: LD_INT 1
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 0
31500: PUSH
31501: LD_INT 1
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: LD_INT 1
31510: NEG
31511: PUSH
31512: LD_INT 0
31514: PUSH
31515: EMPTY
31516: LIST
31517: LIST
31518: PUSH
31519: LD_INT 1
31521: NEG
31522: PUSH
31523: LD_INT 1
31525: NEG
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 1
31533: NEG
31534: PUSH
31535: LD_INT 2
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 2
31545: PUSH
31546: LD_INT 1
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: PUSH
31556: LD_INT 2
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 1
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 2
31575: NEG
31576: PUSH
31577: LD_INT 1
31579: NEG
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: PUSH
31585: LD_INT 2
31587: NEG
31588: PUSH
31589: LD_INT 2
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 3
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 3
31609: PUSH
31610: LD_INT 3
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31645: LD_ADDR_VAR 0 17
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 2
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 2
31770: PUSH
31771: LD_INT 1
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 2
31780: PUSH
31781: LD_INT 2
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: PUSH
31788: LD_INT 1
31790: PUSH
31791: LD_INT 2
31793: PUSH
31794: EMPTY
31795: LIST
31796: LIST
31797: PUSH
31798: LD_INT 0
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 1
31810: NEG
31811: PUSH
31812: LD_INT 1
31814: PUSH
31815: EMPTY
31816: LIST
31817: LIST
31818: PUSH
31819: LD_INT 2
31821: NEG
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 2
31832: NEG
31833: PUSH
31834: LD_INT 1
31836: NEG
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: PUSH
31842: LD_INT 2
31844: NEG
31845: PUSH
31846: LD_INT 2
31848: NEG
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31875: LD_ADDR_VAR 0 18
31879: PUSH
31880: LD_INT 0
31882: PUSH
31883: LD_INT 0
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 0
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 1
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 1
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 0
31923: PUSH
31924: LD_INT 1
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: NEG
31934: PUSH
31935: LD_INT 0
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 1
31948: NEG
31949: PUSH
31950: EMPTY
31951: LIST
31952: LIST
31953: PUSH
31954: LD_INT 1
31956: NEG
31957: PUSH
31958: LD_INT 2
31960: NEG
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 1
31979: PUSH
31980: LD_INT 1
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 0
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 2
32000: PUSH
32001: LD_INT 1
32003: PUSH
32004: EMPTY
32005: LIST
32006: LIST
32007: PUSH
32008: LD_INT 2
32010: PUSH
32011: LD_INT 2
32013: PUSH
32014: EMPTY
32015: LIST
32016: LIST
32017: PUSH
32018: LD_INT 1
32020: PUSH
32021: LD_INT 2
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: LD_INT 2
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: PUSH
32038: LD_INT 1
32040: NEG
32041: PUSH
32042: LD_INT 1
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 2
32051: NEG
32052: PUSH
32053: LD_INT 0
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 1
32066: NEG
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: PUSH
32072: LD_INT 2
32074: NEG
32075: PUSH
32076: LD_INT 2
32078: NEG
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: LIST
32088: LIST
32089: LIST
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: LIST
32095: LIST
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32105: LD_ADDR_VAR 0 19
32109: PUSH
32110: LD_INT 0
32112: PUSH
32113: LD_INT 0
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 0
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 1
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 0
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: NEG
32164: PUSH
32165: LD_INT 0
32167: PUSH
32168: EMPTY
32169: LIST
32170: LIST
32171: PUSH
32172: LD_INT 1
32174: NEG
32175: PUSH
32176: LD_INT 1
32178: NEG
32179: PUSH
32180: EMPTY
32181: LIST
32182: LIST
32183: PUSH
32184: LD_INT 1
32186: NEG
32187: PUSH
32188: LD_INT 2
32190: NEG
32191: PUSH
32192: EMPTY
32193: LIST
32194: LIST
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: LD_INT 2
32201: NEG
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: PUSH
32207: LD_INT 1
32209: PUSH
32210: LD_INT 1
32212: NEG
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 2
32220: PUSH
32221: LD_INT 0
32223: PUSH
32224: EMPTY
32225: LIST
32226: LIST
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: PUSH
32238: LD_INT 2
32240: PUSH
32241: LD_INT 2
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 1
32250: PUSH
32251: LD_INT 2
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 0
32260: PUSH
32261: LD_INT 2
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: PUSH
32268: LD_INT 1
32270: NEG
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 2
32281: NEG
32282: PUSH
32283: LD_INT 0
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 2
32292: NEG
32293: PUSH
32294: LD_INT 1
32296: NEG
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PUSH
32302: LD_INT 2
32304: NEG
32305: PUSH
32306: LD_INT 2
32308: NEG
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32335: LD_ADDR_VAR 0 20
32339: PUSH
32340: LD_INT 0
32342: PUSH
32343: LD_INT 0
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 1
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 1
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 1
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: NEG
32394: PUSH
32395: LD_INT 0
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: NEG
32405: PUSH
32406: LD_INT 1
32408: NEG
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: PUSH
32414: LD_INT 1
32416: NEG
32417: PUSH
32418: LD_INT 2
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: LD_INT 2
32431: NEG
32432: PUSH
32433: EMPTY
32434: LIST
32435: LIST
32436: PUSH
32437: LD_INT 1
32439: PUSH
32440: LD_INT 1
32442: NEG
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 2
32450: PUSH
32451: LD_INT 0
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 2
32460: PUSH
32461: LD_INT 1
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 2
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 2
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: PUSH
32488: LD_INT 0
32490: PUSH
32491: LD_INT 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 1
32500: NEG
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: NEG
32512: PUSH
32513: LD_INT 0
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: PUSH
32520: LD_INT 2
32522: NEG
32523: PUSH
32524: LD_INT 1
32526: NEG
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: PUSH
32532: LD_INT 2
32534: NEG
32535: PUSH
32536: LD_INT 2
32538: NEG
32539: PUSH
32540: EMPTY
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32565: LD_ADDR_VAR 0 21
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: LD_INT 0
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: LD_INT 1
32585: NEG
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: LD_INT 1
32593: PUSH
32594: LD_INT 0
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 1
32603: PUSH
32604: LD_INT 1
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 1
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 1
32623: NEG
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: NEG
32635: PUSH
32636: LD_INT 1
32638: NEG
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 1
32646: NEG
32647: PUSH
32648: LD_INT 2
32650: NEG
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PUSH
32656: LD_INT 0
32658: PUSH
32659: LD_INT 2
32661: NEG
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: PUSH
32670: LD_INT 1
32672: NEG
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 2
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 2
32700: PUSH
32701: LD_INT 2
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 2
32713: PUSH
32714: EMPTY
32715: LIST
32716: LIST
32717: PUSH
32718: LD_INT 0
32720: PUSH
32721: LD_INT 2
32723: PUSH
32724: EMPTY
32725: LIST
32726: LIST
32727: PUSH
32728: LD_INT 1
32730: NEG
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: NEG
32742: PUSH
32743: LD_INT 0
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 2
32752: NEG
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: PUSH
32762: LD_INT 2
32764: NEG
32765: PUSH
32766: LD_INT 2
32768: NEG
32769: PUSH
32770: EMPTY
32771: LIST
32772: LIST
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32795: LD_ADDR_VAR 0 22
32799: PUSH
32800: LD_INT 0
32802: PUSH
32803: LD_INT 0
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: PUSH
32810: LD_INT 0
32812: PUSH
32813: LD_INT 1
32815: NEG
32816: PUSH
32817: EMPTY
32818: LIST
32819: LIST
32820: PUSH
32821: LD_INT 1
32823: PUSH
32824: LD_INT 0
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: LD_INT 1
32833: PUSH
32834: LD_INT 1
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 1
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: NEG
32854: PUSH
32855: LD_INT 0
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: NEG
32865: PUSH
32866: LD_INT 1
32868: NEG
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: PUSH
32874: LD_INT 1
32876: NEG
32877: PUSH
32878: LD_INT 2
32880: NEG
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 0
32888: PUSH
32889: LD_INT 2
32891: NEG
32892: PUSH
32893: EMPTY
32894: LIST
32895: LIST
32896: PUSH
32897: LD_INT 1
32899: PUSH
32900: LD_INT 1
32902: NEG
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 2
32910: PUSH
32911: LD_INT 0
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 2
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 0
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: NEG
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: NEG
32972: PUSH
32973: LD_INT 0
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_INT 2
32982: NEG
32983: PUSH
32984: LD_INT 1
32986: NEG
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PUSH
32992: LD_INT 2
32994: NEG
32995: PUSH
32996: LD_INT 2
32998: NEG
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: EMPTY
33005: LIST
33006: LIST
33007: LIST
33008: LIST
33009: LIST
33010: LIST
33011: LIST
33012: LIST
33013: LIST
33014: LIST
33015: LIST
33016: LIST
33017: LIST
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33025: LD_ADDR_VAR 0 23
33029: PUSH
33030: LD_INT 0
33032: PUSH
33033: LD_INT 0
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 0
33042: PUSH
33043: LD_INT 1
33045: NEG
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 1
33053: PUSH
33054: LD_INT 0
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 1
33063: PUSH
33064: LD_INT 1
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: NEG
33084: PUSH
33085: LD_INT 0
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: NEG
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: NEG
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: EMPTY
33113: LIST
33114: LIST
33115: PUSH
33116: LD_INT 0
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: LD_INT 1
33132: NEG
33133: PUSH
33134: EMPTY
33135: LIST
33136: LIST
33137: PUSH
33138: LD_INT 2
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 2
33150: PUSH
33151: LD_INT 1
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 2
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 2
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: NEG
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: NEG
33202: PUSH
33203: LD_INT 0
33205: PUSH
33206: EMPTY
33207: LIST
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: NEG
33213: PUSH
33214: LD_INT 1
33216: NEG
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: PUSH
33222: LD_INT 2
33224: NEG
33225: PUSH
33226: LD_INT 2
33228: NEG
33229: PUSH
33230: EMPTY
33231: LIST
33232: LIST
33233: PUSH
33234: LD_INT 2
33236: NEG
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: NEG
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 1
33260: PUSH
33261: LD_INT 2
33263: NEG
33264: PUSH
33265: EMPTY
33266: LIST
33267: LIST
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 1
33274: NEG
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
33305: LD_ADDR_VAR 0 24
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 0
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 1
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 2
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 1
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 0
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: EMPTY
33465: LIST
33466: LIST
33467: PUSH
33468: LD_INT 1
33470: NEG
33471: PUSH
33472: LD_INT 1
33474: PUSH
33475: EMPTY
33476: LIST
33477: LIST
33478: PUSH
33479: LD_INT 2
33481: NEG
33482: PUSH
33483: LD_INT 0
33485: PUSH
33486: EMPTY
33487: LIST
33488: LIST
33489: PUSH
33490: LD_INT 2
33492: NEG
33493: PUSH
33494: LD_INT 1
33496: NEG
33497: PUSH
33498: EMPTY
33499: LIST
33500: LIST
33501: PUSH
33502: LD_INT 2
33504: NEG
33505: PUSH
33506: LD_INT 2
33508: NEG
33509: PUSH
33510: EMPTY
33511: LIST
33512: LIST
33513: PUSH
33514: LD_INT 1
33516: PUSH
33517: LD_INT 2
33519: NEG
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: PUSH
33525: LD_INT 2
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: EMPTY
33533: LIST
33534: LIST
33535: PUSH
33536: LD_INT 3
33538: PUSH
33539: LD_INT 1
33541: PUSH
33542: EMPTY
33543: LIST
33544: LIST
33545: PUSH
33546: LD_INT 3
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: EMPTY
33553: LIST
33554: LIST
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
33581: LD_ADDR_VAR 0 25
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: LD_INT 0
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 1
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 0
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: LD_INT 1
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 1
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 1
33639: NEG
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: NEG
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: NEG
33663: PUSH
33664: LD_INT 2
33666: NEG
33667: PUSH
33668: EMPTY
33669: LIST
33670: LIST
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: LD_INT 2
33677: NEG
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: LD_INT 1
33688: NEG
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: PUSH
33694: LD_INT 2
33696: PUSH
33697: LD_INT 0
33699: PUSH
33700: EMPTY
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 1
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: LD_INT 2
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PUSH
33724: LD_INT 1
33726: PUSH
33727: LD_INT 2
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 0
33736: PUSH
33737: LD_INT 2
33739: PUSH
33740: EMPTY
33741: LIST
33742: LIST
33743: PUSH
33744: LD_INT 1
33746: NEG
33747: PUSH
33748: LD_INT 1
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: LD_INT 2
33757: NEG
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: PUSH
33766: LD_INT 2
33768: NEG
33769: PUSH
33770: LD_INT 1
33772: NEG
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: NEG
33781: PUSH
33782: LD_INT 2
33784: NEG
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 3
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 3
33802: PUSH
33803: LD_INT 2
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: PUSH
33810: LD_INT 2
33812: PUSH
33813: LD_INT 3
33815: PUSH
33816: EMPTY
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 1
33822: PUSH
33823: LD_INT 3
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: LIST
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33855: LD_ADDR_VAR 0 26
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: LD_INT 0
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 0
33872: PUSH
33873: LD_INT 1
33875: NEG
33876: PUSH
33877: EMPTY
33878: LIST
33879: LIST
33880: PUSH
33881: LD_INT 1
33883: PUSH
33884: LD_INT 0
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: LD_INT 1
33893: PUSH
33894: LD_INT 1
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: PUSH
33901: LD_INT 0
33903: PUSH
33904: LD_INT 1
33906: PUSH
33907: EMPTY
33908: LIST
33909: LIST
33910: PUSH
33911: LD_INT 1
33913: NEG
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: EMPTY
33919: LIST
33920: LIST
33921: PUSH
33922: LD_INT 1
33924: NEG
33925: PUSH
33926: LD_INT 1
33928: NEG
33929: PUSH
33930: EMPTY
33931: LIST
33932: LIST
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 0
33948: PUSH
33949: LD_INT 2
33951: NEG
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 1
33962: NEG
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: PUSH
33968: LD_INT 2
33970: PUSH
33971: LD_INT 0
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 1
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: PUSH
33988: LD_INT 2
33990: PUSH
33991: LD_INT 2
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 1
34000: PUSH
34001: LD_INT 2
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 2
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: NEG
34021: PUSH
34022: LD_INT 1
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: NEG
34032: PUSH
34033: LD_INT 0
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 2
34042: NEG
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: EMPTY
34049: LIST
34050: LIST
34051: PUSH
34052: LD_INT 2
34054: NEG
34055: PUSH
34056: LD_INT 2
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 2
34066: PUSH
34067: LD_INT 3
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 3
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: PUSH
34095: LD_INT 2
34097: NEG
34098: PUSH
34099: LD_INT 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PUSH
34106: EMPTY
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: LIST
34121: LIST
34122: LIST
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34131: LD_ADDR_VAR 0 27
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 0
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 0
34148: PUSH
34149: LD_INT 1
34151: NEG
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 1
34159: PUSH
34160: LD_INT 0
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: PUSH
34167: LD_INT 1
34169: PUSH
34170: LD_INT 1
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: PUSH
34187: LD_INT 1
34189: NEG
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 1
34200: NEG
34201: PUSH
34202: LD_INT 1
34204: NEG
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 2
34216: NEG
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: PUSH
34222: LD_INT 0
34224: PUSH
34225: LD_INT 2
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 2
34246: PUSH
34247: LD_INT 0
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 2
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 2
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 0
34286: PUSH
34287: LD_INT 2
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: NEG
34297: PUSH
34298: LD_INT 1
34300: PUSH
34301: EMPTY
34302: LIST
34303: LIST
34304: PUSH
34305: LD_INT 2
34307: NEG
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 2
34318: NEG
34319: PUSH
34320: LD_INT 1
34322: NEG
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: NEG
34331: PUSH
34332: LD_INT 2
34334: NEG
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: LD_INT 1
34342: NEG
34343: PUSH
34344: LD_INT 2
34346: PUSH
34347: EMPTY
34348: LIST
34349: LIST
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: EMPTY
34359: LIST
34360: LIST
34361: PUSH
34362: LD_INT 3
34364: NEG
34365: PUSH
34366: LD_INT 1
34368: NEG
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 3
34376: NEG
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34411: LD_ADDR_VAR 0 28
34415: PUSH
34416: LD_INT 0
34418: PUSH
34419: LD_INT 0
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 0
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 0
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 1
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: PUSH
34457: LD_INT 0
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: PUSH
34467: LD_INT 1
34469: NEG
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: PUSH
34482: LD_INT 1
34484: NEG
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: LD_INT 2
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: LD_INT 2
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 2
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 0
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 1
34576: NEG
34577: PUSH
34578: LD_INT 1
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: NEG
34588: PUSH
34589: LD_INT 0
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: PUSH
34596: LD_INT 2
34598: NEG
34599: PUSH
34600: LD_INT 1
34602: NEG
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 2
34614: NEG
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 2
34622: NEG
34623: PUSH
34624: LD_INT 3
34626: NEG
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 1
34634: NEG
34635: PUSH
34636: LD_INT 3
34638: NEG
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: LD_INT 3
34646: NEG
34647: PUSH
34648: LD_INT 1
34650: NEG
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 3
34658: NEG
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: LIST
34683: LIST
34684: LIST
34685: LIST
34686: LIST
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34693: LD_ADDR_VAR 0 29
34697: PUSH
34698: LD_INT 0
34700: PUSH
34701: LD_INT 0
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 0
34710: PUSH
34711: LD_INT 1
34713: NEG
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 1
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 1
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: LD_INT 0
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 1
34797: PUSH
34798: LD_INT 1
34800: NEG
34801: PUSH
34802: EMPTY
34803: LIST
34804: LIST
34805: PUSH
34806: LD_INT 2
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: EMPTY
34813: LIST
34814: LIST
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: LD_INT 1
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 1
34828: PUSH
34829: LD_INT 2
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: LD_INT 2
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: PUSH
34846: LD_INT 1
34848: NEG
34849: PUSH
34850: LD_INT 1
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: NEG
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: EMPTY
34866: LIST
34867: LIST
34868: PUSH
34869: LD_INT 2
34871: NEG
34872: PUSH
34873: LD_INT 2
34875: NEG
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: PUSH
34881: LD_INT 2
34883: NEG
34884: PUSH
34885: LD_INT 3
34887: NEG
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 3
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: LD_INT 3
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: PUSH
34924: LD_INT 1
34926: NEG
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: LD_INT 3
34937: NEG
34938: PUSH
34939: LD_INT 2
34941: NEG
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: EMPTY
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34972: LD_ADDR_VAR 0 30
34976: PUSH
34977: LD_INT 0
34979: PUSH
34980: LD_INT 0
34982: PUSH
34983: EMPTY
34984: LIST
34985: LIST
34986: PUSH
34987: LD_INT 0
34989: PUSH
34990: LD_INT 1
34992: NEG
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: LD_INT 0
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: PUSH
35008: LD_INT 1
35010: PUSH
35011: LD_INT 1
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: PUSH
35018: LD_INT 0
35020: PUSH
35021: LD_INT 1
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: NEG
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 1
35041: NEG
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: LD_INT 2
35057: NEG
35058: PUSH
35059: EMPTY
35060: LIST
35061: LIST
35062: PUSH
35063: LD_INT 0
35065: PUSH
35066: LD_INT 2
35068: NEG
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: LD_INT 1
35079: NEG
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 2
35087: PUSH
35088: LD_INT 0
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: LD_INT 2
35097: PUSH
35098: LD_INT 1
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 2
35107: PUSH
35108: LD_INT 2
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 1
35117: PUSH
35118: LD_INT 2
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: PUSH
35125: LD_INT 1
35127: NEG
35128: PUSH
35129: LD_INT 1
35131: PUSH
35132: EMPTY
35133: LIST
35134: LIST
35135: PUSH
35136: LD_INT 2
35138: NEG
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: NEG
35150: PUSH
35151: LD_INT 1
35153: NEG
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 1
35161: NEG
35162: PUSH
35163: LD_INT 3
35165: NEG
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: PUSH
35174: LD_INT 2
35176: NEG
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 3
35184: PUSH
35185: LD_INT 2
35187: PUSH
35188: EMPTY
35189: LIST
35190: LIST
35191: PUSH
35192: LD_INT 2
35194: PUSH
35195: LD_INT 3
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: NEG
35205: PUSH
35206: LD_INT 1
35208: PUSH
35209: EMPTY
35210: LIST
35211: LIST
35212: PUSH
35213: LD_INT 3
35215: NEG
35216: PUSH
35217: LD_INT 1
35219: NEG
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: LIST
35233: LIST
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35250: LD_ADDR_VAR 0 31
35254: PUSH
35255: LD_INT 0
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 0
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: LD_INT 0
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: PUSH
35286: LD_INT 1
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 0
35298: PUSH
35299: LD_INT 1
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: NEG
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: PUSH
35329: LD_INT 1
35331: NEG
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: EMPTY
35338: LIST
35339: LIST
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 2
35364: PUSH
35365: LD_INT 1
35367: PUSH
35368: EMPTY
35369: LIST
35370: LIST
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: LD_INT 2
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: PUSH
35382: LD_INT 1
35384: PUSH
35385: LD_INT 2
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 2
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 1
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: LD_INT 2
35415: NEG
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: PUSH
35425: LD_INT 2
35427: NEG
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 2
35439: NEG
35440: PUSH
35441: LD_INT 3
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 2
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 3
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 1
35472: PUSH
35473: LD_INT 3
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 2
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 3
35493: NEG
35494: PUSH
35495: LD_INT 2
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: LIST
35507: LIST
35508: LIST
35509: LIST
35510: LIST
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: LIST
35518: LIST
35519: LIST
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: LIST
35525: LIST
35526: LIST
35527: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35528: LD_ADDR_VAR 0 32
35532: PUSH
35533: LD_INT 0
35535: PUSH
35536: LD_INT 0
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: PUSH
35543: LD_INT 0
35545: PUSH
35546: LD_INT 1
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 1
35556: PUSH
35557: LD_INT 0
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 1
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 0
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 1
35586: NEG
35587: PUSH
35588: LD_INT 0
35590: PUSH
35591: EMPTY
35592: LIST
35593: LIST
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: NEG
35610: PUSH
35611: LD_INT 2
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: LD_INT 2
35624: NEG
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: LD_INT 1
35646: PUSH
35647: EMPTY
35648: LIST
35649: LIST
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: LD_INT 2
35656: PUSH
35657: EMPTY
35658: LIST
35659: LIST
35660: PUSH
35661: LD_INT 1
35663: PUSH
35664: LD_INT 2
35666: PUSH
35667: EMPTY
35668: LIST
35669: LIST
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: LD_INT 1
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: LD_INT 0
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 2
35705: NEG
35706: PUSH
35707: LD_INT 1
35709: NEG
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 1
35717: NEG
35718: PUSH
35719: LD_INT 3
35721: NEG
35722: PUSH
35723: EMPTY
35724: LIST
35725: LIST
35726: PUSH
35727: LD_INT 1
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: PUSH
35748: LD_INT 2
35750: PUSH
35751: LD_INT 3
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: PUSH
35758: LD_INT 2
35760: NEG
35761: PUSH
35762: LD_INT 1
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: PUSH
35769: LD_INT 3
35771: NEG
35772: PUSH
35773: LD_INT 1
35775: NEG
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35806: LD_ADDR_VAR 0 33
35810: PUSH
35811: LD_INT 0
35813: PUSH
35814: LD_INT 0
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: LD_INT 1
35826: NEG
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: PUSH
35832: LD_INT 1
35834: PUSH
35835: LD_INT 0
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: PUSH
35842: LD_INT 1
35844: PUSH
35845: LD_INT 1
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 0
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PUSH
35873: LD_INT 1
35875: NEG
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 1
35887: NEG
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 1
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 0
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 2
35961: NEG
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 2
35984: NEG
35985: PUSH
35986: LD_INT 2
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 2
35996: NEG
35997: PUSH
35998: LD_INT 3
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 1
36011: NEG
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 3
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: LD_INT 3
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 2
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 3
36050: NEG
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: LIST
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36085: LD_ADDR_VAR 0 34
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 0
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: PUSH
36100: LD_INT 0
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 0
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 1
36123: PUSH
36124: LD_INT 1
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: PUSH
36131: LD_INT 0
36133: PUSH
36134: LD_INT 1
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 1
36143: NEG
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 1
36154: NEG
36155: PUSH
36156: LD_INT 1
36158: NEG
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: PUSH
36164: LD_INT 1
36166: NEG
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: LD_INT 2
36181: NEG
36182: PUSH
36183: EMPTY
36184: LIST
36185: LIST
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: LD_INT 1
36192: NEG
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 2
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 2
36210: PUSH
36211: LD_INT 2
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 1
36220: PUSH
36221: LD_INT 2
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 1
36230: NEG
36231: PUSH
36232: LD_INT 1
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: PUSH
36239: LD_INT 2
36241: NEG
36242: PUSH
36243: LD_INT 0
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 2
36252: NEG
36253: PUSH
36254: LD_INT 1
36256: NEG
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 2
36264: NEG
36265: PUSH
36266: LD_INT 2
36268: NEG
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 1
36276: NEG
36277: PUSH
36278: LD_INT 3
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 2
36291: NEG
36292: PUSH
36293: EMPTY
36294: LIST
36295: LIST
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 3
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: EMPTY
36325: LIST
36326: LIST
36327: PUSH
36328: LD_INT 3
36330: NEG
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36365: LD_ADDR_VAR 0 35
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: LD_INT 0
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PUSH
36380: LD_INT 0
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 0
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 1
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 0
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 1
36434: NEG
36435: PUSH
36436: LD_INT 1
36438: NEG
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: NEG
36457: PUSH
36458: LD_INT 1
36460: NEG
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36477: LD_ADDR_VAR 0 36
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 0
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: LD_INT 0
36508: PUSH
36509: EMPTY
36510: LIST
36511: LIST
36512: PUSH
36513: LD_INT 1
36515: PUSH
36516: LD_INT 1
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: PUSH
36523: LD_INT 0
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: EMPTY
36530: LIST
36531: LIST
36532: PUSH
36533: LD_INT 1
36535: NEG
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: LD_INT 1
36550: NEG
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: LD_INT 2
36562: NEG
36563: PUSH
36564: EMPTY
36565: LIST
36566: LIST
36567: PUSH
36568: LD_INT 1
36570: PUSH
36571: LD_INT 2
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36589: LD_ADDR_VAR 0 37
36593: PUSH
36594: LD_INT 0
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 0
36606: PUSH
36607: LD_INT 1
36609: NEG
36610: PUSH
36611: EMPTY
36612: LIST
36613: LIST
36614: PUSH
36615: LD_INT 1
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 1
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 0
36637: PUSH
36638: LD_INT 1
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: NEG
36648: PUSH
36649: LD_INT 0
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
36701: LD_ADDR_VAR 0 38
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: LD_INT 0
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: PUSH
36716: LD_INT 0
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 1
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 0
36749: PUSH
36750: LD_INT 1
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 1
36759: NEG
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 1
36774: NEG
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: LD_INT 2
36782: PUSH
36783: LD_INT 1
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: EMPTY
36799: LIST
36800: LIST
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36813: LD_ADDR_VAR 0 39
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: NEG
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 0
36861: PUSH
36862: LD_INT 1
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 1
36882: NEG
36883: PUSH
36884: LD_INT 1
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: NEG
36895: PUSH
36896: LD_INT 2
36898: NEG
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 2
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36925: LD_ADDR_VAR 0 40
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 0
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 0
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: PUSH
36954: LD_INT 0
36956: PUSH
36957: EMPTY
36958: LIST
36959: LIST
36960: PUSH
36961: LD_INT 1
36963: PUSH
36964: LD_INT 1
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: PUSH
36971: LD_INT 0
36973: PUSH
36974: LD_INT 1
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 1
36983: NEG
36984: PUSH
36985: LD_INT 0
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: LD_INT 1
36998: NEG
36999: PUSH
37000: EMPTY
37001: LIST
37002: LIST
37003: PUSH
37004: LD_INT 1
37006: PUSH
37007: LD_INT 1
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 1
37017: NEG
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37037: LD_ADDR_VAR 0 41
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: LD_INT 0
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PUSH
37052: LD_INT 0
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: EMPTY
37060: LIST
37061: LIST
37062: PUSH
37063: LD_INT 1
37065: PUSH
37066: LD_INT 0
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 1
37075: PUSH
37076: LD_INT 1
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: LD_INT 1
37110: NEG
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: LD_INT 2
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 2
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 2
37151: PUSH
37152: LD_INT 1
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 2
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 1
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 1
37185: PUSH
37186: EMPTY
37187: LIST
37188: LIST
37189: PUSH
37190: LD_INT 2
37192: NEG
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: PUSH
37201: LD_INT 2
37203: NEG
37204: PUSH
37205: LD_INT 1
37207: NEG
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 2
37215: NEG
37216: PUSH
37217: LD_INT 2
37219: NEG
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 2
37227: NEG
37228: PUSH
37229: LD_INT 3
37231: NEG
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 1
37242: NEG
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 1
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: PUSH
37268: LD_INT 3
37270: PUSH
37271: LD_INT 2
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: LD_INT 3
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: PUSH
37291: LD_INT 3
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: PUSH
37298: LD_INT 2
37300: NEG
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 3
37311: NEG
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: LD_INT 1
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 3
37334: NEG
37335: PUSH
37336: LD_INT 2
37338: NEG
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 3
37346: NEG
37347: PUSH
37348: LD_INT 3
37350: NEG
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: LIST
37360: LIST
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37387: LD_ADDR_VAR 0 42
37391: PUSH
37392: LD_INT 0
37394: PUSH
37395: LD_INT 0
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: LD_INT 1
37407: NEG
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: LD_INT 1
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: PUSH
37433: LD_INT 0
37435: PUSH
37436: LD_INT 1
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 1
37445: NEG
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: PUSH
37454: LD_INT 1
37456: NEG
37457: PUSH
37458: LD_INT 1
37460: NEG
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: LD_INT 1
37468: NEG
37469: PUSH
37470: LD_INT 2
37472: NEG
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 2
37483: NEG
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: PUSH
37489: LD_INT 1
37491: PUSH
37492: LD_INT 1
37494: NEG
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 2
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: LD_INT 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 0
37532: PUSH
37533: LD_INT 2
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 1
37542: NEG
37543: PUSH
37544: LD_INT 1
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 2
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: NEG
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: LD_INT 2
37565: NEG
37566: PUSH
37567: LD_INT 2
37569: NEG
37570: PUSH
37571: EMPTY
37572: LIST
37573: LIST
37574: PUSH
37575: LD_INT 2
37577: NEG
37578: PUSH
37579: LD_INT 3
37581: NEG
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 3
37593: NEG
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: PUSH
37599: LD_INT 0
37601: PUSH
37602: LD_INT 3
37604: NEG
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 2
37615: NEG
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 3
37623: PUSH
37624: LD_INT 2
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: LD_INT 3
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 3
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 1
37653: PUSH
37654: LD_INT 3
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 3
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 1
37673: NEG
37674: PUSH
37675: LD_INT 2
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 3
37684: NEG
37685: PUSH
37686: LD_INT 2
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 3
37696: NEG
37697: PUSH
37698: LD_INT 3
37700: NEG
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: EMPTY
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37737: LD_ADDR_VAR 0 43
37741: PUSH
37742: LD_INT 0
37744: PUSH
37745: LD_INT 0
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: LD_INT 1
37757: NEG
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: PUSH
37763: LD_INT 1
37765: PUSH
37766: LD_INT 0
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: PUSH
37773: LD_INT 1
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: NEG
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: NEG
37807: PUSH
37808: LD_INT 1
37810: NEG
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 1
37818: NEG
37819: PUSH
37820: LD_INT 2
37822: NEG
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 2
37833: NEG
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 1
37844: NEG
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 2
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 2
37862: PUSH
37863: LD_INT 1
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: LD_INT 2
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 0
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: LD_INT 1
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: NEG
37904: PUSH
37905: LD_INT 0
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 2
37914: NEG
37915: PUSH
37916: LD_INT 1
37918: NEG
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: LD_INT 1
37926: NEG
37927: PUSH
37928: LD_INT 3
37930: NEG
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 3
37941: NEG
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: LD_INT 2
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 2
37960: PUSH
37961: LD_INT 1
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 3
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 1
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 3
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 3
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 2
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 3
38033: NEG
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 3
38044: NEG
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38085: LD_ADDR_VAR 0 44
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 0
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 1
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: LD_INT 0
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 1
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: LD_INT 0
38147: PUSH
38148: EMPTY
38149: LIST
38150: LIST
38151: PUSH
38152: LD_INT 1
38154: NEG
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 1
38166: NEG
38167: PUSH
38168: LD_INT 2
38170: NEG
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 1
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 2
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 2
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 2
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: PUSH
38220: LD_INT 2
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 1
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 2
38240: NEG
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 2
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 3
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 3
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 3
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 3
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: PUSH
38329: LD_INT 3
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 3
38359: NEG
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 3
38370: NEG
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 3
38382: NEG
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 3
38394: NEG
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38435: LD_ADDR_VAR 0 45
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 0
38452: PUSH
38453: LD_INT 1
38455: NEG
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: LD_INT 1
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 0
38483: PUSH
38484: LD_INT 1
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: LD_INT 0
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 1
38504: NEG
38505: PUSH
38506: LD_INT 1
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 1
38516: NEG
38517: PUSH
38518: LD_INT 2
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: NEG
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: PUSH
38537: LD_INT 1
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 1
38553: PUSH
38554: EMPTY
38555: LIST
38556: LIST
38557: PUSH
38558: LD_INT 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 1
38570: PUSH
38571: LD_INT 2
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 0
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: LD_INT 1
38590: NEG
38591: PUSH
38592: LD_INT 1
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 2
38601: NEG
38602: PUSH
38603: LD_INT 1
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 2
38613: NEG
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: NEG
38626: PUSH
38627: LD_INT 3
38629: NEG
38630: PUSH
38631: EMPTY
38632: LIST
38633: LIST
38634: PUSH
38635: LD_INT 1
38637: NEG
38638: PUSH
38639: LD_INT 3
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 3
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 2
38663: NEG
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 3
38671: PUSH
38672: LD_INT 2
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 3
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 0
38711: PUSH
38712: LD_INT 3
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: LD_INT 2
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 3
38732: NEG
38733: PUSH
38734: LD_INT 2
38736: NEG
38737: PUSH
38738: EMPTY
38739: LIST
38740: LIST
38741: PUSH
38742: LD_INT 3
38744: NEG
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38785: LD_ADDR_VAR 0 46
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: LD_INT 0
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: PUSH
38800: LD_INT 0
38802: PUSH
38803: LD_INT 1
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: NEG
38855: PUSH
38856: LD_INT 1
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 1
38866: NEG
38867: PUSH
38868: LD_INT 2
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: LD_INT 2
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 1
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 2
38900: PUSH
38901: LD_INT 0
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: PUSH
38908: LD_INT 2
38910: PUSH
38911: LD_INT 1
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 1
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 1
38940: NEG
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: NEG
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: EMPTY
38957: LIST
38958: LIST
38959: PUSH
38960: LD_INT 2
38962: NEG
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 1
38974: NEG
38975: PUSH
38976: LD_INT 3
38978: NEG
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: LD_INT 3
38989: NEG
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: PUSH
38998: LD_INT 2
39000: NEG
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 1
39039: PUSH
39040: LD_INT 3
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 3
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 1
39059: NEG
39060: PUSH
39061: LD_INT 2
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 2
39070: NEG
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PUSH
39079: LD_INT 3
39081: NEG
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: EMPTY
39087: LIST
39088: LIST
39089: PUSH
39090: LD_INT 3
39092: NEG
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39133: LD_ADDR_VAR 0 47
39137: PUSH
39138: LD_INT 0
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 1
39153: NEG
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 0
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 0
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: LD_INT 1
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: LD_INT 2
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: LD_INT 2
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 2
39248: NEG
39249: PUSH
39250: LD_INT 1
39252: NEG
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: PUSH
39258: LD_INT 2
39260: NEG
39261: PUSH
39262: LD_INT 2
39264: NEG
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39284: LD_ADDR_VAR 0 48
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 0
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 0
39301: PUSH
39302: LD_INT 1
39304: NEG
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 0
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 1
39342: NEG
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: NEG
39354: PUSH
39355: LD_INT 1
39357: NEG
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 0
39377: PUSH
39378: LD_INT 2
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 1
39388: PUSH
39389: LD_INT 1
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 2
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39431: LD_ADDR_VAR 0 49
39435: PUSH
39436: LD_INT 0
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 0
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 1
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 1
39489: NEG
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: EMPTY
39518: LIST
39519: LIST
39520: PUSH
39521: LD_INT 2
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 2
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 2
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 2
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39575: LD_ADDR_VAR 0 50
39579: PUSH
39580: LD_INT 0
39582: PUSH
39583: LD_INT 0
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 0
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: EMPTY
39598: LIST
39599: LIST
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: LD_INT 1
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: LD_INT 1
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: NEG
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 1
39644: NEG
39645: PUSH
39646: LD_INT 1
39648: NEG
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 1
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 2
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: LD_INT 2
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 2
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 1
39696: NEG
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39719: LD_ADDR_VAR 0 51
39723: PUSH
39724: LD_INT 0
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 0
39736: PUSH
39737: LD_INT 1
39739: NEG
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 1
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: LD_INT 1
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 0
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 0
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 1
39788: NEG
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 1
39800: PUSH
39801: LD_INT 2
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 0
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: LD_INT 0
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39866: LD_ADDR_VAR 0 52
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: LD_INT 0
39883: PUSH
39884: LD_INT 1
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 1
39894: PUSH
39895: LD_INT 0
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: LD_INT 1
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 0
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: LD_INT 0
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: LD_INT 1
39935: NEG
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 1
39947: NEG
39948: PUSH
39949: LD_INT 2
39951: NEG
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 1
39959: NEG
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: LD_INT 2
39970: NEG
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: LD_INT 1
39985: NEG
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: NEG
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40017: LD_ADDR_VAR 0 53
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 0
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 1
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 1
40090: NEG
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 2
40102: NEG
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: LD_INT 0
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: PUSH
40153: LD_INT 2
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: PUSH
40160: LD_INT 1
40162: PUSH
40163: LD_INT 2
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: LD_INT 1
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 2
40216: NEG
40217: PUSH
40218: LD_INT 2
40220: NEG
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40247: LD_ADDR_VAR 0 54
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 0
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 1
40328: NEG
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 1
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 2
40446: NEG
40447: PUSH
40448: LD_INT 2
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40477: LD_ADDR_VAR 0 55
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 0
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 0
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 1
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: NEG
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: EMPTY
40565: LIST
40566: LIST
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 2
40592: PUSH
40593: LD_INT 0
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 1
40622: PUSH
40623: LD_INT 2
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 2
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: LD_INT 1
40668: NEG
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 2
40676: NEG
40677: PUSH
40678: LD_INT 2
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40707: LD_ADDR_VAR 0 56
40711: PUSH
40712: LD_INT 0
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 0
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: LD_INT 0
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: LD_INT 2
40792: NEG
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 2
40822: PUSH
40823: LD_INT 0
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 2
40832: PUSH
40833: LD_INT 1
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 2
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 2
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: NEG
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 2
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40937: LD_ADDR_VAR 0 57
40941: PUSH
40942: LD_INT 0
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 0
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 1
40965: PUSH
40966: LD_INT 0
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 1
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: NEG
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: PUSH
41042: LD_INT 1
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 2
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 2
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 2
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: NEG
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 1
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 2
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41167: LD_ADDR_VAR 0 58
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 0
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 1
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 1
41240: NEG
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 1
41248: NEG
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 1
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 2
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 2
41366: NEG
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41397: LD_ADDR_VAR 0 59
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: LD_INT 0
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: LD_INT 1
41417: NEG
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 1
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: LD_INT 0
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41485: LD_ADDR_VAR 0 60
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 0
41495: PUSH
41496: EMPTY
41497: LIST
41498: LIST
41499: PUSH
41500: LD_INT 0
41502: PUSH
41503: LD_INT 1
41505: NEG
41506: PUSH
41507: EMPTY
41508: LIST
41509: LIST
41510: PUSH
41511: LD_INT 1
41513: PUSH
41514: LD_INT 0
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: LD_INT 1
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: LD_INT 1
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 1
41554: NEG
41555: PUSH
41556: LD_INT 1
41558: NEG
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41573: LD_ADDR_VAR 0 61
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: LD_INT 0
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: NEG
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 1
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 1
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 1
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41661: LD_ADDR_VAR 0 62
41665: PUSH
41666: LD_INT 0
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 1
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 0
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41749: LD_ADDR_VAR 0 63
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: LD_INT 0
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 1
41818: NEG
41819: PUSH
41820: LD_INT 1
41822: NEG
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41837: LD_ADDR_VAR 0 64
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: ST_TO_ADDR
// end ; 1 :
41925: GO 47822
41927: LD_INT 1
41929: DOUBLE
41930: EQUAL
41931: IFTRUE 41935
41933: GO 44558
41935: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41936: LD_ADDR_VAR 0 11
41940: PUSH
41941: LD_INT 1
41943: NEG
41944: PUSH
41945: LD_INT 3
41947: NEG
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 3
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 2
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: LIST
41979: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41980: LD_ADDR_VAR 0 12
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: LD_INT 1
41990: NEG
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 0
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: LD_INT 1
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42021: LD_ADDR_VAR 0 13
42025: PUSH
42026: LD_INT 3
42028: PUSH
42029: LD_INT 2
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 3
42038: PUSH
42039: LD_INT 3
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: LD_INT 3
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42061: LD_ADDR_VAR 0 14
42065: PUSH
42066: LD_INT 1
42068: PUSH
42069: LD_INT 3
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 3
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: LD_INT 1
42088: NEG
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: LIST
42101: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42102: LD_ADDR_VAR 0 15
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: NEG
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 3
42131: NEG
42132: PUSH
42133: LD_INT 1
42135: NEG
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: LIST
42145: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42146: LD_ADDR_VAR 0 16
42150: PUSH
42151: LD_INT 2
42153: NEG
42154: PUSH
42155: LD_INT 3
42157: NEG
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 3
42165: NEG
42166: PUSH
42167: LD_INT 2
42169: NEG
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 3
42177: NEG
42178: PUSH
42179: LD_INT 3
42181: NEG
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42192: LD_ADDR_VAR 0 17
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: LD_INT 3
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: LD_INT 3
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 2
42225: NEG
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: LIST
42235: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42236: LD_ADDR_VAR 0 18
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 3
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 3
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: LIST
42276: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42277: LD_ADDR_VAR 0 19
42281: PUSH
42282: LD_INT 3
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 3
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: LIST
42316: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42317: LD_ADDR_VAR 0 20
42321: PUSH
42322: LD_INT 1
42324: PUSH
42325: LD_INT 3
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 0
42334: PUSH
42335: LD_INT 3
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42358: LD_ADDR_VAR 0 21
42362: PUSH
42363: LD_INT 2
42365: NEG
42366: PUSH
42367: LD_INT 1
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 3
42376: NEG
42377: PUSH
42378: LD_INT 0
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 3
42387: NEG
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42402: LD_ADDR_VAR 0 22
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: LD_INT 3
42413: NEG
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 3
42421: NEG
42422: PUSH
42423: LD_INT 2
42425: NEG
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: LD_INT 3
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
42448: LD_ADDR_VAR 0 23
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: NEG
42467: PUSH
42468: LD_INT 4
42470: NEG
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PUSH
42476: LD_INT 1
42478: PUSH
42479: LD_INT 3
42481: NEG
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: LIST
42491: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
42492: LD_ADDR_VAR 0 24
42496: PUSH
42497: LD_INT 3
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 1
42512: NEG
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: PUSH
42518: LD_INT 4
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: LIST
42532: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
42533: LD_ADDR_VAR 0 25
42537: PUSH
42538: LD_INT 3
42540: PUSH
42541: LD_INT 3
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 4
42550: PUSH
42551: LD_INT 3
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 3
42560: PUSH
42561: LD_INT 4
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
42573: LD_ADDR_VAR 0 26
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: LD_INT 3
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 4
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: LIST
42613: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
42614: LD_ADDR_VAR 0 27
42618: PUSH
42619: LD_INT 3
42621: NEG
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 3
42632: NEG
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 4
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
42658: LD_ADDR_VAR 0 28
42662: PUSH
42663: LD_INT 3
42665: NEG
42666: PUSH
42667: LD_INT 3
42669: NEG
42670: PUSH
42671: EMPTY
42672: LIST
42673: LIST
42674: PUSH
42675: LD_INT 3
42677: NEG
42678: PUSH
42679: LD_INT 4
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 4
42689: NEG
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: LIST
42703: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
42704: LD_ADDR_VAR 0 29
42708: PUSH
42709: LD_INT 1
42711: NEG
42712: PUSH
42713: LD_INT 3
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: LD_INT 3
42726: NEG
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 1
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 4
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 0
42757: PUSH
42758: LD_INT 4
42760: NEG
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 5
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 5
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 4
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: NEG
42814: PUSH
42815: LD_INT 6
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 0
42825: PUSH
42826: LD_INT 6
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: LD_INT 5
42839: NEG
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42859: LD_ADDR_VAR 0 30
42863: PUSH
42864: LD_INT 2
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 3
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 4
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 4
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 4
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 5
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 5
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 5
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 6
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 6
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: LIST
43000: LIST
43001: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43002: LD_ADDR_VAR 0 31
43006: PUSH
43007: LD_INT 3
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 3
43019: PUSH
43020: LD_INT 3
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 2
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 4
43039: PUSH
43040: LD_INT 3
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 4
43049: PUSH
43050: LD_INT 4
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 4
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 5
43069: PUSH
43070: LD_INT 4
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 5
43079: PUSH
43080: LD_INT 5
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 4
43089: PUSH
43090: LD_INT 5
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 6
43099: PUSH
43100: LD_INT 5
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: LD_INT 6
43109: PUSH
43110: LD_INT 6
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 5
43119: PUSH
43120: LD_INT 6
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43141: LD_ADDR_VAR 0 32
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 0
43158: PUSH
43159: LD_INT 3
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: NEG
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: LD_INT 4
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 0
43189: PUSH
43190: LD_INT 4
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: LD_INT 0
43220: PUSH
43221: LD_INT 5
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 1
43230: NEG
43231: PUSH
43232: LD_INT 4
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: PUSH
43242: LD_INT 6
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 0
43251: PUSH
43252: LD_INT 6
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: LD_INT 1
43261: NEG
43262: PUSH
43263: LD_INT 5
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
43284: LD_ADDR_VAR 0 33
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 3
43302: NEG
43303: PUSH
43304: LD_INT 0
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 3
43313: NEG
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 3
43325: NEG
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 4
43336: NEG
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 4
43347: NEG
43348: PUSH
43349: LD_INT 1
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 4
43359: NEG
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 5
43370: NEG
43371: PUSH
43372: LD_INT 0
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 5
43381: NEG
43382: PUSH
43383: LD_INT 1
43385: NEG
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 5
43393: NEG
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 6
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 6
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: LIST
43432: LIST
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: LIST
43438: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
43439: LD_ADDR_VAR 0 34
43443: PUSH
43444: LD_INT 2
43446: NEG
43447: PUSH
43448: LD_INT 3
43450: NEG
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 3
43458: NEG
43459: PUSH
43460: LD_INT 2
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 3
43470: NEG
43471: PUSH
43472: LD_INT 3
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: NEG
43483: PUSH
43484: LD_INT 4
43486: NEG
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 4
43494: NEG
43495: PUSH
43496: LD_INT 3
43498: NEG
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 4
43506: NEG
43507: PUSH
43508: LD_INT 4
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 4
43518: NEG
43519: PUSH
43520: LD_INT 5
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 5
43530: NEG
43531: PUSH
43532: LD_INT 4
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 5
43542: NEG
43543: PUSH
43544: LD_INT 5
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 5
43554: NEG
43555: PUSH
43556: LD_INT 6
43558: NEG
43559: PUSH
43560: EMPTY
43561: LIST
43562: LIST
43563: PUSH
43564: LD_INT 6
43566: NEG
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 6
43578: NEG
43579: PUSH
43580: LD_INT 6
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
43602: LD_ADDR_VAR 0 41
43606: PUSH
43607: LD_INT 0
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 1
43620: NEG
43621: PUSH
43622: LD_INT 3
43624: NEG
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 1
43632: PUSH
43633: LD_INT 2
43635: NEG
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: LIST
43645: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
43646: LD_ADDR_VAR 0 42
43650: PUSH
43651: LD_INT 2
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 3
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: LIST
43686: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
43687: LD_ADDR_VAR 0 43
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 3
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: LIST
43726: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
43727: LD_ADDR_VAR 0 44
43731: PUSH
43732: LD_INT 0
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 3
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43768: LD_ADDR_VAR 0 45
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 1
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 3
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43812: LD_ADDR_VAR 0 46
43816: PUSH
43817: LD_INT 2
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 2
43831: NEG
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 3
43843: NEG
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43858: LD_ADDR_VAR 0 47
43862: PUSH
43863: LD_INT 2
43865: NEG
43866: PUSH
43867: LD_INT 3
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 3
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43891: LD_ADDR_VAR 0 48
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: LD_INT 2
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 2
43909: PUSH
43910: LD_INT 1
43912: NEG
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43922: LD_ADDR_VAR 0 49
43926: PUSH
43927: LD_INT 3
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 3
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43951: LD_ADDR_VAR 0 50
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43980: LD_ADDR_VAR 0 51
43984: PUSH
43985: LD_INT 1
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44011: LD_ADDR_VAR 0 52
44015: PUSH
44016: LD_INT 3
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 3
44030: NEG
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44044: LD_ADDR_VAR 0 53
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: LD_INT 3
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: LD_INT 3
44066: NEG
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 1
44074: PUSH
44075: LD_INT 2
44077: NEG
44078: PUSH
44079: EMPTY
44080: LIST
44081: LIST
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44088: LD_ADDR_VAR 0 54
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 3
44106: PUSH
44107: LD_INT 0
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 3
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44129: LD_ADDR_VAR 0 55
44133: PUSH
44134: LD_INT 3
44136: PUSH
44137: LD_INT 2
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 3
44146: PUSH
44147: LD_INT 3
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 2
44156: PUSH
44157: LD_INT 3
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44169: LD_ADDR_VAR 0 56
44173: PUSH
44174: LD_INT 1
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 0
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: EMPTY
44191: LIST
44192: LIST
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: LIST
44209: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44210: LD_ADDR_VAR 0 57
44214: PUSH
44215: LD_INT 2
44217: NEG
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: LD_INT 1
44243: NEG
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: LIST
44253: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44254: LD_ADDR_VAR 0 58
44258: PUSH
44259: LD_INT 2
44261: NEG
44262: PUSH
44263: LD_INT 3
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 3
44273: NEG
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 3
44285: NEG
44286: PUSH
44287: LD_INT 3
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: EMPTY
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
44300: LD_ADDR_VAR 0 59
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: PUSH
44331: LD_INT 1
44333: NEG
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: LIST
44343: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44344: LD_ADDR_VAR 0 60
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: LD_INT 1
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: LD_INT 0
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: LIST
44384: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44385: LD_ADDR_VAR 0 61
44389: PUSH
44390: LD_INT 2
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 2
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: LIST
44424: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44425: LD_ADDR_VAR 0 62
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: LIST
44465: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44466: LD_ADDR_VAR 0 63
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: LIST
44509: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44510: LD_ADDR_VAR 0 64
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 2
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 2
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: LIST
44555: ST_TO_ADDR
// end ; 2 :
44556: GO 47822
44558: LD_INT 2
44560: DOUBLE
44561: EQUAL
44562: IFTRUE 44566
44564: GO 47821
44566: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
44567: LD_ADDR_VAR 0 29
44571: PUSH
44572: LD_INT 4
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 4
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 5
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 5
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 4
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 3
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 3
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: EMPTY
44641: LIST
44642: LIST
44643: PUSH
44644: LD_INT 3
44646: PUSH
44647: LD_INT 2
44649: NEG
44650: PUSH
44651: EMPTY
44652: LIST
44653: LIST
44654: PUSH
44655: LD_INT 5
44657: PUSH
44658: LD_INT 2
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: LD_INT 3
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: PUSH
44675: LD_INT 3
44677: PUSH
44678: LD_INT 2
44680: PUSH
44681: EMPTY
44682: LIST
44683: LIST
44684: PUSH
44685: LD_INT 4
44687: PUSH
44688: LD_INT 3
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 4
44697: PUSH
44698: LD_INT 4
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 3
44707: PUSH
44708: LD_INT 4
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 3
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 4
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 2
44747: PUSH
44748: LD_INT 4
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 4
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 3
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 4
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: LD_INT 5
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 5
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: NEG
44808: PUSH
44809: LD_INT 4
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 3
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 2
44829: PUSH
44830: LD_INT 5
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: LD_INT 3
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 3
44850: NEG
44851: PUSH
44852: LD_INT 0
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 3
44861: NEG
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 2
44873: NEG
44874: PUSH
44875: LD_INT 0
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: NEG
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 3
44895: NEG
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 4
44906: NEG
44907: PUSH
44908: LD_INT 0
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 4
44917: NEG
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 4
44929: NEG
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 4
44952: NEG
44953: PUSH
44954: LD_INT 4
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 4
44964: NEG
44965: PUSH
44966: LD_INT 5
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 3
44976: NEG
44977: PUSH
44978: LD_INT 4
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 4
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 5
45012: NEG
45013: PUSH
45014: LD_INT 4
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 5
45024: NEG
45025: PUSH
45026: LD_INT 5
45028: NEG
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 3
45036: NEG
45037: PUSH
45038: LD_INT 5
45040: NEG
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 5
45048: NEG
45049: PUSH
45050: LD_INT 3
45052: NEG
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: LIST
45101: LIST
45102: LIST
45103: LIST
45104: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45105: LD_ADDR_VAR 0 30
45109: PUSH
45110: LD_INT 4
45112: PUSH
45113: LD_INT 4
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 4
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 5
45132: PUSH
45133: LD_INT 4
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 5
45142: PUSH
45143: LD_INT 5
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 4
45152: PUSH
45153: LD_INT 5
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 3
45162: PUSH
45163: LD_INT 4
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 3
45172: PUSH
45173: LD_INT 3
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 5
45182: PUSH
45183: LD_INT 3
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 5
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 3
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 0
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: PUSH
45223: LD_INT 3
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 4
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: LD_INT 4
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 3
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 2
45274: PUSH
45275: LD_INT 4
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: NEG
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 4
45295: NEG
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 4
45306: NEG
45307: PUSH
45308: LD_INT 1
45310: NEG
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 3
45318: NEG
45319: PUSH
45320: LD_INT 0
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 4
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 5
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 5
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 5
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: LD_INT 2
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 3
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 4
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 2
45421: NEG
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 2
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 3
45445: NEG
45446: PUSH
45447: LD_INT 2
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 4
45457: NEG
45458: PUSH
45459: LD_INT 3
45461: NEG
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 4
45469: NEG
45470: PUSH
45471: LD_INT 4
45473: NEG
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: LD_INT 4
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 4
45493: NEG
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: LD_INT 4
45508: NEG
45509: PUSH
45510: EMPTY
45511: LIST
45512: LIST
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: LD_INT 5
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 4
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 3
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 3
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 4
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 5
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: LD_INT 3
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 5
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: LIST
45637: LIST
45638: LIST
45639: LIST
45640: LIST
45641: LIST
45642: LIST
45643: LIST
45644: LIST
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
45652: LD_ADDR_VAR 0 31
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 4
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 3
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: PUSH
45680: LD_INT 4
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: LD_INT 1
45689: PUSH
45690: LD_INT 5
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 0
45699: PUSH
45700: LD_INT 5
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 4
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 2
45731: PUSH
45732: LD_INT 5
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 2
45741: NEG
45742: PUSH
45743: LD_INT 3
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 3
45752: NEG
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 3
45763: NEG
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 2
45786: NEG
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 3
45797: NEG
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 4
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 4
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 4
45831: NEG
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 2
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 4
45854: NEG
45855: PUSH
45856: LD_INT 4
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 4
45866: NEG
45867: PUSH
45868: LD_INT 5
45870: NEG
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 3
45878: NEG
45879: PUSH
45880: LD_INT 4
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 4
45902: NEG
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: PUSH
45912: LD_INT 5
45914: NEG
45915: PUSH
45916: LD_INT 4
45918: NEG
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: PUSH
45924: LD_INT 5
45926: NEG
45927: PUSH
45928: LD_INT 5
45930: NEG
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 3
45938: NEG
45939: PUSH
45940: LD_INT 5
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 5
45950: NEG
45951: PUSH
45952: LD_INT 3
45954: NEG
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 3
45965: NEG
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 4
45976: NEG
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: PUSH
45985: LD_INT 3
45987: NEG
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: PUSH
45996: LD_INT 2
45998: NEG
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 3
46021: NEG
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 1
46029: NEG
46030: PUSH
46031: LD_INT 4
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 4
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 4
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 4
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 5
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 5
46095: PUSH
46096: LD_INT 1
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 4
46105: PUSH
46106: LD_INT 1
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 3
46136: PUSH
46137: LD_INT 2
46139: NEG
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: LD_INT 5
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: LIST
46196: LIST
46197: LIST
46198: LIST
46199: LIST
46200: LIST
46201: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46202: LD_ADDR_VAR 0 32
46206: PUSH
46207: LD_INT 4
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 4
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 3
46232: NEG
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 3
46243: NEG
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 4
46254: NEG
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 5
46265: NEG
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 5
46276: NEG
46277: PUSH
46278: LD_INT 1
46280: NEG
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 5
46288: NEG
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: NEG
46301: PUSH
46302: LD_INT 2
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: LD_INT 4
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: LD_INT 2
46335: NEG
46336: PUSH
46337: LD_INT 3
46339: NEG
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: LD_INT 2
46351: NEG
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: LD_INT 2
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: LD_INT 3
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 4
46383: NEG
46384: PUSH
46385: LD_INT 4
46387: NEG
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: PUSH
46393: LD_INT 2
46395: NEG
46396: PUSH
46397: LD_INT 4
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 4
46407: NEG
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 0
46419: PUSH
46420: LD_INT 4
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 5
46433: NEG
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: LD_INT 4
46444: NEG
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: LD_INT 3
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: LD_INT 3
46466: NEG
46467: PUSH
46468: EMPTY
46469: LIST
46470: LIST
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: LD_INT 4
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 5
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 2
46498: PUSH
46499: LD_INT 3
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 5
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 3
46521: PUSH
46522: LD_INT 0
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 4
46542: PUSH
46543: LD_INT 0
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 4
46552: PUSH
46553: LD_INT 1
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 2
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 2
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 4
46604: PUSH
46605: LD_INT 2
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 4
46614: PUSH
46615: LD_INT 4
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 4
46624: PUSH
46625: LD_INT 3
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 5
46634: PUSH
46635: LD_INT 4
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 5
46644: PUSH
46645: LD_INT 5
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 4
46654: PUSH
46655: LD_INT 5
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: PUSH
46665: LD_INT 4
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 3
46674: PUSH
46675: LD_INT 3
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 5
46684: PUSH
46685: LD_INT 3
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 3
46694: PUSH
46695: LD_INT 5
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
46749: LD_ADDR_VAR 0 33
46753: PUSH
46754: LD_INT 4
46756: NEG
46757: PUSH
46758: LD_INT 4
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 4
46768: NEG
46769: PUSH
46770: LD_INT 5
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: NEG
46781: PUSH
46782: LD_INT 4
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: NEG
46793: PUSH
46794: LD_INT 3
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 4
46804: NEG
46805: PUSH
46806: LD_INT 3
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 5
46816: NEG
46817: PUSH
46818: LD_INT 4
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 5
46828: NEG
46829: PUSH
46830: LD_INT 5
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 3
46840: NEG
46841: PUSH
46842: LD_INT 5
46844: NEG
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 5
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 3
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 0
46875: PUSH
46876: LD_INT 4
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: LD_INT 3
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 2
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 1
46919: NEG
46920: PUSH
46921: LD_INT 3
46923: NEG
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: NEG
46932: PUSH
46933: LD_INT 4
46935: NEG
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 2
46943: PUSH
46944: LD_INT 2
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: LD_INT 4
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 4
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 4
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 5
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 5
46997: PUSH
46998: LD_INT 1
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 4
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 3
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 3
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 3
47038: PUSH
47039: LD_INT 2
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 5
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 3
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 3
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 4
47079: PUSH
47080: LD_INT 3
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 4
47089: PUSH
47090: LD_INT 4
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 3
47099: PUSH
47100: LD_INT 4
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 3
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 2
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 4
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: PUSH
47140: LD_INT 4
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: LD_INT 4
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: LD_INT 4
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: LD_INT 5
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: LD_INT 5
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 1
47210: NEG
47211: PUSH
47212: LD_INT 3
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: LD_INT 5
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 3
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
47287: LD_ADDR_VAR 0 34
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 4
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: LD_INT 5
47308: NEG
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 4
47319: NEG
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 3
47330: NEG
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 0
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 1
47349: NEG
47350: PUSH
47351: LD_INT 4
47353: NEG
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 1
47361: NEG
47362: PUSH
47363: LD_INT 5
47365: NEG
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: PUSH
47374: LD_INT 3
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 2
47384: NEG
47385: PUSH
47386: LD_INT 5
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 3
47396: PUSH
47397: LD_INT 0
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 4
47417: PUSH
47418: LD_INT 0
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 4
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 2
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: LD_INT 2
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 4
47479: PUSH
47480: LD_INT 2
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 4
47489: PUSH
47490: LD_INT 4
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 4
47499: PUSH
47500: LD_INT 3
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 5
47509: PUSH
47510: LD_INT 4
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 5
47519: PUSH
47520: LD_INT 5
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 4
47529: PUSH
47530: LD_INT 5
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 4
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 3
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 5
47559: PUSH
47560: LD_INT 3
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 3
47569: PUSH
47570: LD_INT 5
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 3
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 3
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 4
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 4
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 3
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 2
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: LD_INT 4
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 4
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 4
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 3
47695: NEG
47696: PUSH
47697: LD_INT 0
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 3
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 4
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 5
47728: NEG
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 5
47739: NEG
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 5
47751: NEG
47752: PUSH
47753: LD_INT 2
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: NEG
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// end ; end ;
47819: GO 47822
47821: POP
// case btype of b_depot , b_warehouse :
47822: LD_VAR 0 1
47826: PUSH
47827: LD_INT 0
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47841
47833: LD_INT 1
47835: DOUBLE
47836: EQUAL
47837: IFTRUE 47841
47839: GO 48042
47841: POP
// case nation of nation_american :
47842: LD_VAR 0 5
47846: PUSH
47847: LD_INT 1
47849: DOUBLE
47850: EQUAL
47851: IFTRUE 47855
47853: GO 47911
47855: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
47856: LD_ADDR_VAR 0 9
47860: PUSH
47861: LD_VAR 0 11
47865: PUSH
47866: LD_VAR 0 12
47870: PUSH
47871: LD_VAR 0 13
47875: PUSH
47876: LD_VAR 0 14
47880: PUSH
47881: LD_VAR 0 15
47885: PUSH
47886: LD_VAR 0 16
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: PUSH
47899: LD_VAR 0 4
47903: PUSH
47904: LD_INT 1
47906: PLUS
47907: ARRAY
47908: ST_TO_ADDR
47909: GO 48040
47911: LD_INT 2
47913: DOUBLE
47914: EQUAL
47915: IFTRUE 47919
47917: GO 47975
47919: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
47920: LD_ADDR_VAR 0 9
47924: PUSH
47925: LD_VAR 0 17
47929: PUSH
47930: LD_VAR 0 18
47934: PUSH
47935: LD_VAR 0 19
47939: PUSH
47940: LD_VAR 0 20
47944: PUSH
47945: LD_VAR 0 21
47949: PUSH
47950: LD_VAR 0 22
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: PUSH
47963: LD_VAR 0 4
47967: PUSH
47968: LD_INT 1
47970: PLUS
47971: ARRAY
47972: ST_TO_ADDR
47973: GO 48040
47975: LD_INT 3
47977: DOUBLE
47978: EQUAL
47979: IFTRUE 47983
47981: GO 48039
47983: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47984: LD_ADDR_VAR 0 9
47988: PUSH
47989: LD_VAR 0 23
47993: PUSH
47994: LD_VAR 0 24
47998: PUSH
47999: LD_VAR 0 25
48003: PUSH
48004: LD_VAR 0 26
48008: PUSH
48009: LD_VAR 0 27
48013: PUSH
48014: LD_VAR 0 28
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: LIST
48023: LIST
48024: LIST
48025: LIST
48026: PUSH
48027: LD_VAR 0 4
48031: PUSH
48032: LD_INT 1
48034: PLUS
48035: ARRAY
48036: ST_TO_ADDR
48037: GO 48040
48039: POP
48040: GO 48595
48042: LD_INT 2
48044: DOUBLE
48045: EQUAL
48046: IFTRUE 48056
48048: LD_INT 3
48050: DOUBLE
48051: EQUAL
48052: IFTRUE 48056
48054: GO 48112
48056: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48057: LD_ADDR_VAR 0 9
48061: PUSH
48062: LD_VAR 0 29
48066: PUSH
48067: LD_VAR 0 30
48071: PUSH
48072: LD_VAR 0 31
48076: PUSH
48077: LD_VAR 0 32
48081: PUSH
48082: LD_VAR 0 33
48086: PUSH
48087: LD_VAR 0 34
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: PUSH
48100: LD_VAR 0 4
48104: PUSH
48105: LD_INT 1
48107: PLUS
48108: ARRAY
48109: ST_TO_ADDR
48110: GO 48595
48112: LD_INT 16
48114: DOUBLE
48115: EQUAL
48116: IFTRUE 48174
48118: LD_INT 17
48120: DOUBLE
48121: EQUAL
48122: IFTRUE 48174
48124: LD_INT 18
48126: DOUBLE
48127: EQUAL
48128: IFTRUE 48174
48130: LD_INT 19
48132: DOUBLE
48133: EQUAL
48134: IFTRUE 48174
48136: LD_INT 22
48138: DOUBLE
48139: EQUAL
48140: IFTRUE 48174
48142: LD_INT 20
48144: DOUBLE
48145: EQUAL
48146: IFTRUE 48174
48148: LD_INT 21
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48174
48154: LD_INT 23
48156: DOUBLE
48157: EQUAL
48158: IFTRUE 48174
48160: LD_INT 24
48162: DOUBLE
48163: EQUAL
48164: IFTRUE 48174
48166: LD_INT 25
48168: DOUBLE
48169: EQUAL
48170: IFTRUE 48174
48172: GO 48230
48174: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48175: LD_ADDR_VAR 0 9
48179: PUSH
48180: LD_VAR 0 35
48184: PUSH
48185: LD_VAR 0 36
48189: PUSH
48190: LD_VAR 0 37
48194: PUSH
48195: LD_VAR 0 38
48199: PUSH
48200: LD_VAR 0 39
48204: PUSH
48205: LD_VAR 0 40
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: PUSH
48218: LD_VAR 0 4
48222: PUSH
48223: LD_INT 1
48225: PLUS
48226: ARRAY
48227: ST_TO_ADDR
48228: GO 48595
48230: LD_INT 6
48232: DOUBLE
48233: EQUAL
48234: IFTRUE 48286
48236: LD_INT 7
48238: DOUBLE
48239: EQUAL
48240: IFTRUE 48286
48242: LD_INT 8
48244: DOUBLE
48245: EQUAL
48246: IFTRUE 48286
48248: LD_INT 13
48250: DOUBLE
48251: EQUAL
48252: IFTRUE 48286
48254: LD_INT 12
48256: DOUBLE
48257: EQUAL
48258: IFTRUE 48286
48260: LD_INT 15
48262: DOUBLE
48263: EQUAL
48264: IFTRUE 48286
48266: LD_INT 11
48268: DOUBLE
48269: EQUAL
48270: IFTRUE 48286
48272: LD_INT 14
48274: DOUBLE
48275: EQUAL
48276: IFTRUE 48286
48278: LD_INT 10
48280: DOUBLE
48281: EQUAL
48282: IFTRUE 48286
48284: GO 48342
48286: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
48287: LD_ADDR_VAR 0 9
48291: PUSH
48292: LD_VAR 0 41
48296: PUSH
48297: LD_VAR 0 42
48301: PUSH
48302: LD_VAR 0 43
48306: PUSH
48307: LD_VAR 0 44
48311: PUSH
48312: LD_VAR 0 45
48316: PUSH
48317: LD_VAR 0 46
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: PUSH
48330: LD_VAR 0 4
48334: PUSH
48335: LD_INT 1
48337: PLUS
48338: ARRAY
48339: ST_TO_ADDR
48340: GO 48595
48342: LD_INT 36
48344: DOUBLE
48345: EQUAL
48346: IFTRUE 48350
48348: GO 48406
48350: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
48351: LD_ADDR_VAR 0 9
48355: PUSH
48356: LD_VAR 0 47
48360: PUSH
48361: LD_VAR 0 48
48365: PUSH
48366: LD_VAR 0 49
48370: PUSH
48371: LD_VAR 0 50
48375: PUSH
48376: LD_VAR 0 51
48380: PUSH
48381: LD_VAR 0 52
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: PUSH
48394: LD_VAR 0 4
48398: PUSH
48399: LD_INT 1
48401: PLUS
48402: ARRAY
48403: ST_TO_ADDR
48404: GO 48595
48406: LD_INT 4
48408: DOUBLE
48409: EQUAL
48410: IFTRUE 48432
48412: LD_INT 5
48414: DOUBLE
48415: EQUAL
48416: IFTRUE 48432
48418: LD_INT 34
48420: DOUBLE
48421: EQUAL
48422: IFTRUE 48432
48424: LD_INT 37
48426: DOUBLE
48427: EQUAL
48428: IFTRUE 48432
48430: GO 48488
48432: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
48433: LD_ADDR_VAR 0 9
48437: PUSH
48438: LD_VAR 0 53
48442: PUSH
48443: LD_VAR 0 54
48447: PUSH
48448: LD_VAR 0 55
48452: PUSH
48453: LD_VAR 0 56
48457: PUSH
48458: LD_VAR 0 57
48462: PUSH
48463: LD_VAR 0 58
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: PUSH
48476: LD_VAR 0 4
48480: PUSH
48481: LD_INT 1
48483: PLUS
48484: ARRAY
48485: ST_TO_ADDR
48486: GO 48595
48488: LD_INT 31
48490: DOUBLE
48491: EQUAL
48492: IFTRUE 48538
48494: LD_INT 32
48496: DOUBLE
48497: EQUAL
48498: IFTRUE 48538
48500: LD_INT 33
48502: DOUBLE
48503: EQUAL
48504: IFTRUE 48538
48506: LD_INT 27
48508: DOUBLE
48509: EQUAL
48510: IFTRUE 48538
48512: LD_INT 26
48514: DOUBLE
48515: EQUAL
48516: IFTRUE 48538
48518: LD_INT 28
48520: DOUBLE
48521: EQUAL
48522: IFTRUE 48538
48524: LD_INT 29
48526: DOUBLE
48527: EQUAL
48528: IFTRUE 48538
48530: LD_INT 30
48532: DOUBLE
48533: EQUAL
48534: IFTRUE 48538
48536: GO 48594
48538: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
48539: LD_ADDR_VAR 0 9
48543: PUSH
48544: LD_VAR 0 59
48548: PUSH
48549: LD_VAR 0 60
48553: PUSH
48554: LD_VAR 0 61
48558: PUSH
48559: LD_VAR 0 62
48563: PUSH
48564: LD_VAR 0 63
48568: PUSH
48569: LD_VAR 0 64
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: PUSH
48582: LD_VAR 0 4
48586: PUSH
48587: LD_INT 1
48589: PLUS
48590: ARRAY
48591: ST_TO_ADDR
48592: GO 48595
48594: POP
// temp_list2 = [ ] ;
48595: LD_ADDR_VAR 0 10
48599: PUSH
48600: EMPTY
48601: ST_TO_ADDR
// for i in temp_list do
48602: LD_ADDR_VAR 0 8
48606: PUSH
48607: LD_VAR 0 9
48611: PUSH
48612: FOR_IN
48613: IFFALSE 48665
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
48615: LD_ADDR_VAR 0 10
48619: PUSH
48620: LD_VAR 0 10
48624: PUSH
48625: LD_VAR 0 8
48629: PUSH
48630: LD_INT 1
48632: ARRAY
48633: PUSH
48634: LD_VAR 0 2
48638: PLUS
48639: PUSH
48640: LD_VAR 0 8
48644: PUSH
48645: LD_INT 2
48647: ARRAY
48648: PUSH
48649: LD_VAR 0 3
48653: PLUS
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: EMPTY
48660: LIST
48661: ADD
48662: ST_TO_ADDR
48663: GO 48612
48665: POP
48666: POP
// result = temp_list2 ;
48667: LD_ADDR_VAR 0 7
48671: PUSH
48672: LD_VAR 0 10
48676: ST_TO_ADDR
// end ;
48677: LD_VAR 0 7
48681: RET
// export function EnemyInRange ( unit , dist ) ; begin
48682: LD_INT 0
48684: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
48685: LD_ADDR_VAR 0 3
48689: PUSH
48690: LD_VAR 0 1
48694: PPUSH
48695: CALL_OW 255
48699: PPUSH
48700: LD_VAR 0 1
48704: PPUSH
48705: CALL_OW 250
48709: PPUSH
48710: LD_VAR 0 1
48714: PPUSH
48715: CALL_OW 251
48719: PPUSH
48720: LD_VAR 0 2
48724: PPUSH
48725: CALL 22078 0 4
48729: PUSH
48730: LD_INT 4
48732: ARRAY
48733: ST_TO_ADDR
// end ;
48734: LD_VAR 0 3
48738: RET
// export function PlayerSeeMe ( unit ) ; begin
48739: LD_INT 0
48741: PPUSH
// result := See ( your_side , unit ) ;
48742: LD_ADDR_VAR 0 2
48746: PUSH
48747: LD_OWVAR 2
48751: PPUSH
48752: LD_VAR 0 1
48756: PPUSH
48757: CALL_OW 292
48761: ST_TO_ADDR
// end ;
48762: LD_VAR 0 2
48766: RET
// export function ReverseDir ( unit ) ; begin
48767: LD_INT 0
48769: PPUSH
// if not unit then
48770: LD_VAR 0 1
48774: NOT
48775: IFFALSE 48779
// exit ;
48777: GO 48802
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48779: LD_ADDR_VAR 0 2
48783: PUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 254
48793: PUSH
48794: LD_INT 3
48796: PLUS
48797: PUSH
48798: LD_INT 6
48800: MOD
48801: ST_TO_ADDR
// end ;
48802: LD_VAR 0 2
48806: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
48807: LD_INT 0
48809: PPUSH
48810: PPUSH
48811: PPUSH
48812: PPUSH
48813: PPUSH
// if not hexes then
48814: LD_VAR 0 2
48818: NOT
48819: IFFALSE 48823
// exit ;
48821: GO 48971
// dist := 9999 ;
48823: LD_ADDR_VAR 0 5
48827: PUSH
48828: LD_INT 9999
48830: ST_TO_ADDR
// for i = 1 to hexes do
48831: LD_ADDR_VAR 0 4
48835: PUSH
48836: DOUBLE
48837: LD_INT 1
48839: DEC
48840: ST_TO_ADDR
48841: LD_VAR 0 2
48845: PUSH
48846: FOR_TO
48847: IFFALSE 48959
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
48849: LD_VAR 0 1
48853: PPUSH
48854: LD_VAR 0 2
48858: PUSH
48859: LD_VAR 0 4
48863: ARRAY
48864: PUSH
48865: LD_INT 1
48867: ARRAY
48868: PPUSH
48869: LD_VAR 0 2
48873: PUSH
48874: LD_VAR 0 4
48878: ARRAY
48879: PUSH
48880: LD_INT 2
48882: ARRAY
48883: PPUSH
48884: CALL_OW 297
48888: PUSH
48889: LD_VAR 0 5
48893: LESS
48894: IFFALSE 48957
// begin hex := hexes [ i ] ;
48896: LD_ADDR_VAR 0 7
48900: PUSH
48901: LD_VAR 0 2
48905: PUSH
48906: LD_VAR 0 4
48910: ARRAY
48911: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48912: LD_ADDR_VAR 0 5
48916: PUSH
48917: LD_VAR 0 1
48921: PPUSH
48922: LD_VAR 0 2
48926: PUSH
48927: LD_VAR 0 4
48931: ARRAY
48932: PUSH
48933: LD_INT 1
48935: ARRAY
48936: PPUSH
48937: LD_VAR 0 2
48941: PUSH
48942: LD_VAR 0 4
48946: ARRAY
48947: PUSH
48948: LD_INT 2
48950: ARRAY
48951: PPUSH
48952: CALL_OW 297
48956: ST_TO_ADDR
// end ; end ;
48957: GO 48846
48959: POP
48960: POP
// result := hex ;
48961: LD_ADDR_VAR 0 3
48965: PUSH
48966: LD_VAR 0 7
48970: ST_TO_ADDR
// end ;
48971: LD_VAR 0 3
48975: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48976: LD_INT 0
48978: PPUSH
48979: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48980: LD_VAR 0 1
48984: NOT
48985: PUSH
48986: LD_VAR 0 1
48990: PUSH
48991: LD_INT 21
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 23
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PPUSH
49015: CALL_OW 69
49019: IN
49020: NOT
49021: OR
49022: IFFALSE 49026
// exit ;
49024: GO 49073
// for i = 1 to 3 do
49026: LD_ADDR_VAR 0 3
49030: PUSH
49031: DOUBLE
49032: LD_INT 1
49034: DEC
49035: ST_TO_ADDR
49036: LD_INT 3
49038: PUSH
49039: FOR_TO
49040: IFFALSE 49071
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49042: LD_VAR 0 1
49046: PPUSH
49047: CALL_OW 250
49051: PPUSH
49052: LD_VAR 0 1
49056: PPUSH
49057: CALL_OW 251
49061: PPUSH
49062: LD_INT 1
49064: PPUSH
49065: CALL_OW 453
49069: GO 49039
49071: POP
49072: POP
// end ;
49073: LD_VAR 0 2
49077: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49078: LD_INT 0
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49086: LD_VAR 0 1
49090: NOT
49091: PUSH
49092: LD_VAR 0 2
49096: NOT
49097: OR
49098: PUSH
49099: LD_VAR 0 1
49103: PPUSH
49104: CALL_OW 314
49108: OR
49109: IFFALSE 49113
// exit ;
49111: GO 49554
// x := GetX ( enemy_unit ) ;
49113: LD_ADDR_VAR 0 7
49117: PUSH
49118: LD_VAR 0 2
49122: PPUSH
49123: CALL_OW 250
49127: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49128: LD_ADDR_VAR 0 8
49132: PUSH
49133: LD_VAR 0 2
49137: PPUSH
49138: CALL_OW 251
49142: ST_TO_ADDR
// if not x or not y then
49143: LD_VAR 0 7
49147: NOT
49148: PUSH
49149: LD_VAR 0 8
49153: NOT
49154: OR
49155: IFFALSE 49159
// exit ;
49157: GO 49554
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49159: LD_ADDR_VAR 0 6
49163: PUSH
49164: LD_VAR 0 7
49168: PPUSH
49169: LD_INT 0
49171: PPUSH
49172: LD_INT 4
49174: PPUSH
49175: CALL_OW 272
49179: PUSH
49180: LD_VAR 0 8
49184: PPUSH
49185: LD_INT 0
49187: PPUSH
49188: LD_INT 4
49190: PPUSH
49191: CALL_OW 273
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_VAR 0 7
49204: PPUSH
49205: LD_INT 1
49207: PPUSH
49208: LD_INT 4
49210: PPUSH
49211: CALL_OW 272
49215: PUSH
49216: LD_VAR 0 8
49220: PPUSH
49221: LD_INT 1
49223: PPUSH
49224: LD_INT 4
49226: PPUSH
49227: CALL_OW 273
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: LD_VAR 0 7
49240: PPUSH
49241: LD_INT 2
49243: PPUSH
49244: LD_INT 4
49246: PPUSH
49247: CALL_OW 272
49251: PUSH
49252: LD_VAR 0 8
49256: PPUSH
49257: LD_INT 2
49259: PPUSH
49260: LD_INT 4
49262: PPUSH
49263: CALL_OW 273
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_VAR 0 7
49276: PPUSH
49277: LD_INT 3
49279: PPUSH
49280: LD_INT 4
49282: PPUSH
49283: CALL_OW 272
49287: PUSH
49288: LD_VAR 0 8
49292: PPUSH
49293: LD_INT 3
49295: PPUSH
49296: LD_INT 4
49298: PPUSH
49299: CALL_OW 273
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_VAR 0 7
49312: PPUSH
49313: LD_INT 4
49315: PPUSH
49316: LD_INT 4
49318: PPUSH
49319: CALL_OW 272
49323: PUSH
49324: LD_VAR 0 8
49328: PPUSH
49329: LD_INT 4
49331: PPUSH
49332: LD_INT 4
49334: PPUSH
49335: CALL_OW 273
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_VAR 0 7
49348: PPUSH
49349: LD_INT 5
49351: PPUSH
49352: LD_INT 4
49354: PPUSH
49355: CALL_OW 272
49359: PUSH
49360: LD_VAR 0 8
49364: PPUSH
49365: LD_INT 5
49367: PPUSH
49368: LD_INT 4
49370: PPUSH
49371: CALL_OW 273
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: ST_TO_ADDR
// for i = tmp downto 1 do
49388: LD_ADDR_VAR 0 4
49392: PUSH
49393: DOUBLE
49394: LD_VAR 0 6
49398: INC
49399: ST_TO_ADDR
49400: LD_INT 1
49402: PUSH
49403: FOR_DOWNTO
49404: IFFALSE 49505
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
49406: LD_VAR 0 6
49410: PUSH
49411: LD_VAR 0 4
49415: ARRAY
49416: PUSH
49417: LD_INT 1
49419: ARRAY
49420: PPUSH
49421: LD_VAR 0 6
49425: PUSH
49426: LD_VAR 0 4
49430: ARRAY
49431: PUSH
49432: LD_INT 2
49434: ARRAY
49435: PPUSH
49436: CALL_OW 488
49440: NOT
49441: PUSH
49442: LD_VAR 0 6
49446: PUSH
49447: LD_VAR 0 4
49451: ARRAY
49452: PUSH
49453: LD_INT 1
49455: ARRAY
49456: PPUSH
49457: LD_VAR 0 6
49461: PUSH
49462: LD_VAR 0 4
49466: ARRAY
49467: PUSH
49468: LD_INT 2
49470: ARRAY
49471: PPUSH
49472: CALL_OW 428
49476: PUSH
49477: LD_INT 0
49479: NONEQUAL
49480: OR
49481: IFFALSE 49503
// tmp := Delete ( tmp , i ) ;
49483: LD_ADDR_VAR 0 6
49487: PUSH
49488: LD_VAR 0 6
49492: PPUSH
49493: LD_VAR 0 4
49497: PPUSH
49498: CALL_OW 3
49502: ST_TO_ADDR
49503: GO 49403
49505: POP
49506: POP
// j := GetClosestHex ( unit , tmp ) ;
49507: LD_ADDR_VAR 0 5
49511: PUSH
49512: LD_VAR 0 1
49516: PPUSH
49517: LD_VAR 0 6
49521: PPUSH
49522: CALL 48807 0 2
49526: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
49527: LD_VAR 0 1
49531: PPUSH
49532: LD_VAR 0 5
49536: PUSH
49537: LD_INT 1
49539: ARRAY
49540: PPUSH
49541: LD_VAR 0 5
49545: PUSH
49546: LD_INT 2
49548: ARRAY
49549: PPUSH
49550: CALL_OW 111
// end ;
49554: LD_VAR 0 3
49558: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
49559: LD_INT 0
49561: PPUSH
49562: PPUSH
49563: PPUSH
// uc_side = 0 ;
49564: LD_ADDR_OWVAR 20
49568: PUSH
49569: LD_INT 0
49571: ST_TO_ADDR
// uc_nation = 0 ;
49572: LD_ADDR_OWVAR 21
49576: PUSH
49577: LD_INT 0
49579: ST_TO_ADDR
// InitHc_All ( ) ;
49580: CALL_OW 584
// InitVc ;
49584: CALL_OW 20
// if mastodonts then
49588: LD_VAR 0 6
49592: IFFALSE 49659
// for i = 1 to mastodonts do
49594: LD_ADDR_VAR 0 11
49598: PUSH
49599: DOUBLE
49600: LD_INT 1
49602: DEC
49603: ST_TO_ADDR
49604: LD_VAR 0 6
49608: PUSH
49609: FOR_TO
49610: IFFALSE 49657
// begin vc_chassis := 31 ;
49612: LD_ADDR_OWVAR 37
49616: PUSH
49617: LD_INT 31
49619: ST_TO_ADDR
// vc_control := control_rider ;
49620: LD_ADDR_OWVAR 38
49624: PUSH
49625: LD_INT 4
49627: ST_TO_ADDR
// animal := CreateVehicle ;
49628: LD_ADDR_VAR 0 12
49632: PUSH
49633: CALL_OW 45
49637: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49638: LD_VAR 0 12
49642: PPUSH
49643: LD_VAR 0 8
49647: PPUSH
49648: LD_INT 0
49650: PPUSH
49651: CALL 51847 0 3
// end ;
49655: GO 49609
49657: POP
49658: POP
// if horses then
49659: LD_VAR 0 5
49663: IFFALSE 49730
// for i = 1 to horses do
49665: LD_ADDR_VAR 0 11
49669: PUSH
49670: DOUBLE
49671: LD_INT 1
49673: DEC
49674: ST_TO_ADDR
49675: LD_VAR 0 5
49679: PUSH
49680: FOR_TO
49681: IFFALSE 49728
// begin hc_class := 21 ;
49683: LD_ADDR_OWVAR 28
49687: PUSH
49688: LD_INT 21
49690: ST_TO_ADDR
// hc_gallery :=  ;
49691: LD_ADDR_OWVAR 33
49695: PUSH
49696: LD_STRING 
49698: ST_TO_ADDR
// animal := CreateHuman ;
49699: LD_ADDR_VAR 0 12
49703: PUSH
49704: CALL_OW 44
49708: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49709: LD_VAR 0 12
49713: PPUSH
49714: LD_VAR 0 8
49718: PPUSH
49719: LD_INT 0
49721: PPUSH
49722: CALL 51847 0 3
// end ;
49726: GO 49680
49728: POP
49729: POP
// if birds then
49730: LD_VAR 0 1
49734: IFFALSE 49801
// for i = 1 to birds do
49736: LD_ADDR_VAR 0 11
49740: PUSH
49741: DOUBLE
49742: LD_INT 1
49744: DEC
49745: ST_TO_ADDR
49746: LD_VAR 0 1
49750: PUSH
49751: FOR_TO
49752: IFFALSE 49799
// begin hc_class = 18 ;
49754: LD_ADDR_OWVAR 28
49758: PUSH
49759: LD_INT 18
49761: ST_TO_ADDR
// hc_gallery =  ;
49762: LD_ADDR_OWVAR 33
49766: PUSH
49767: LD_STRING 
49769: ST_TO_ADDR
// animal := CreateHuman ;
49770: LD_ADDR_VAR 0 12
49774: PUSH
49775: CALL_OW 44
49779: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49780: LD_VAR 0 12
49784: PPUSH
49785: LD_VAR 0 8
49789: PPUSH
49790: LD_INT 0
49792: PPUSH
49793: CALL 51847 0 3
// end ;
49797: GO 49751
49799: POP
49800: POP
// if tigers then
49801: LD_VAR 0 2
49805: IFFALSE 49889
// for i = 1 to tigers do
49807: LD_ADDR_VAR 0 11
49811: PUSH
49812: DOUBLE
49813: LD_INT 1
49815: DEC
49816: ST_TO_ADDR
49817: LD_VAR 0 2
49821: PUSH
49822: FOR_TO
49823: IFFALSE 49887
// begin hc_class = class_tiger ;
49825: LD_ADDR_OWVAR 28
49829: PUSH
49830: LD_INT 14
49832: ST_TO_ADDR
// hc_gallery =  ;
49833: LD_ADDR_OWVAR 33
49837: PUSH
49838: LD_STRING 
49840: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49841: LD_ADDR_OWVAR 35
49845: PUSH
49846: LD_INT 7
49848: NEG
49849: PPUSH
49850: LD_INT 7
49852: PPUSH
49853: CALL_OW 12
49857: ST_TO_ADDR
// animal := CreateHuman ;
49858: LD_ADDR_VAR 0 12
49862: PUSH
49863: CALL_OW 44
49867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49868: LD_VAR 0 12
49872: PPUSH
49873: LD_VAR 0 8
49877: PPUSH
49878: LD_INT 0
49880: PPUSH
49881: CALL 51847 0 3
// end ;
49885: GO 49822
49887: POP
49888: POP
// if apemans then
49889: LD_VAR 0 3
49893: IFFALSE 50016
// for i = 1 to apemans do
49895: LD_ADDR_VAR 0 11
49899: PUSH
49900: DOUBLE
49901: LD_INT 1
49903: DEC
49904: ST_TO_ADDR
49905: LD_VAR 0 3
49909: PUSH
49910: FOR_TO
49911: IFFALSE 50014
// begin hc_class = class_apeman ;
49913: LD_ADDR_OWVAR 28
49917: PUSH
49918: LD_INT 12
49920: ST_TO_ADDR
// hc_gallery =  ;
49921: LD_ADDR_OWVAR 33
49925: PUSH
49926: LD_STRING 
49928: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
49929: LD_ADDR_OWVAR 35
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PPUSH
49938: LD_INT 2
49940: PPUSH
49941: CALL_OW 12
49945: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49946: LD_ADDR_OWVAR 31
49950: PUSH
49951: LD_INT 1
49953: PPUSH
49954: LD_INT 3
49956: PPUSH
49957: CALL_OW 12
49961: PUSH
49962: LD_INT 1
49964: PPUSH
49965: LD_INT 3
49967: PPUSH
49968: CALL_OW 12
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// animal := CreateHuman ;
49985: LD_ADDR_VAR 0 12
49989: PUSH
49990: CALL_OW 44
49994: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49995: LD_VAR 0 12
49999: PPUSH
50000: LD_VAR 0 8
50004: PPUSH
50005: LD_INT 0
50007: PPUSH
50008: CALL 51847 0 3
// end ;
50012: GO 49910
50014: POP
50015: POP
// if enchidnas then
50016: LD_VAR 0 4
50020: IFFALSE 50087
// for i = 1 to enchidnas do
50022: LD_ADDR_VAR 0 11
50026: PUSH
50027: DOUBLE
50028: LD_INT 1
50030: DEC
50031: ST_TO_ADDR
50032: LD_VAR 0 4
50036: PUSH
50037: FOR_TO
50038: IFFALSE 50085
// begin hc_class = 13 ;
50040: LD_ADDR_OWVAR 28
50044: PUSH
50045: LD_INT 13
50047: ST_TO_ADDR
// hc_gallery =  ;
50048: LD_ADDR_OWVAR 33
50052: PUSH
50053: LD_STRING 
50055: ST_TO_ADDR
// animal := CreateHuman ;
50056: LD_ADDR_VAR 0 12
50060: PUSH
50061: CALL_OW 44
50065: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50066: LD_VAR 0 12
50070: PPUSH
50071: LD_VAR 0 8
50075: PPUSH
50076: LD_INT 0
50078: PPUSH
50079: CALL 51847 0 3
// end ;
50083: GO 50037
50085: POP
50086: POP
// if fishes then
50087: LD_VAR 0 7
50091: IFFALSE 50158
// for i = 1 to fishes do
50093: LD_ADDR_VAR 0 11
50097: PUSH
50098: DOUBLE
50099: LD_INT 1
50101: DEC
50102: ST_TO_ADDR
50103: LD_VAR 0 7
50107: PUSH
50108: FOR_TO
50109: IFFALSE 50156
// begin hc_class = 20 ;
50111: LD_ADDR_OWVAR 28
50115: PUSH
50116: LD_INT 20
50118: ST_TO_ADDR
// hc_gallery =  ;
50119: LD_ADDR_OWVAR 33
50123: PUSH
50124: LD_STRING 
50126: ST_TO_ADDR
// animal := CreateHuman ;
50127: LD_ADDR_VAR 0 12
50131: PUSH
50132: CALL_OW 44
50136: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50137: LD_VAR 0 12
50141: PPUSH
50142: LD_VAR 0 9
50146: PPUSH
50147: LD_INT 0
50149: PPUSH
50150: CALL 51847 0 3
// end ;
50154: GO 50108
50156: POP
50157: POP
// end ;
50158: LD_VAR 0 10
50162: RET
// export function WantHeal ( sci , unit ) ; begin
50163: LD_INT 0
50165: PPUSH
// if GetTaskList ( sci ) > 0 then
50166: LD_VAR 0 1
50170: PPUSH
50171: CALL_OW 437
50175: PUSH
50176: LD_INT 0
50178: GREATER
50179: IFFALSE 50249
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50181: LD_VAR 0 1
50185: PPUSH
50186: CALL_OW 437
50190: PUSH
50191: LD_INT 1
50193: ARRAY
50194: PUSH
50195: LD_INT 1
50197: ARRAY
50198: PUSH
50199: LD_STRING l
50201: EQUAL
50202: PUSH
50203: LD_VAR 0 1
50207: PPUSH
50208: CALL_OW 437
50212: PUSH
50213: LD_INT 1
50215: ARRAY
50216: PUSH
50217: LD_INT 4
50219: ARRAY
50220: PUSH
50221: LD_VAR 0 2
50225: EQUAL
50226: AND
50227: IFFALSE 50239
// result := true else
50229: LD_ADDR_VAR 0 3
50233: PUSH
50234: LD_INT 1
50236: ST_TO_ADDR
50237: GO 50247
// result := false ;
50239: LD_ADDR_VAR 0 3
50243: PUSH
50244: LD_INT 0
50246: ST_TO_ADDR
// end else
50247: GO 50257
// result := false ;
50249: LD_ADDR_VAR 0 3
50253: PUSH
50254: LD_INT 0
50256: ST_TO_ADDR
// end ;
50257: LD_VAR 0 3
50261: RET
// export function HealTarget ( sci ) ; begin
50262: LD_INT 0
50264: PPUSH
// if not sci then
50265: LD_VAR 0 1
50269: NOT
50270: IFFALSE 50274
// exit ;
50272: GO 50339
// result := 0 ;
50274: LD_ADDR_VAR 0 2
50278: PUSH
50279: LD_INT 0
50281: ST_TO_ADDR
// if GetTaskList ( sci ) then
50282: LD_VAR 0 1
50286: PPUSH
50287: CALL_OW 437
50291: IFFALSE 50339
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
50293: LD_VAR 0 1
50297: PPUSH
50298: CALL_OW 437
50302: PUSH
50303: LD_INT 1
50305: ARRAY
50306: PUSH
50307: LD_INT 1
50309: ARRAY
50310: PUSH
50311: LD_STRING l
50313: EQUAL
50314: IFFALSE 50339
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
50316: LD_ADDR_VAR 0 2
50320: PUSH
50321: LD_VAR 0 1
50325: PPUSH
50326: CALL_OW 437
50330: PUSH
50331: LD_INT 1
50333: ARRAY
50334: PUSH
50335: LD_INT 4
50337: ARRAY
50338: ST_TO_ADDR
// end ;
50339: LD_VAR 0 2
50343: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
50344: LD_INT 0
50346: PPUSH
50347: PPUSH
50348: PPUSH
50349: PPUSH
// if not base_units then
50350: LD_VAR 0 1
50354: NOT
50355: IFFALSE 50359
// exit ;
50357: GO 50446
// result := false ;
50359: LD_ADDR_VAR 0 2
50363: PUSH
50364: LD_INT 0
50366: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
50367: LD_ADDR_VAR 0 5
50371: PUSH
50372: LD_VAR 0 1
50376: PPUSH
50377: LD_INT 21
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PPUSH
50387: CALL_OW 72
50391: ST_TO_ADDR
// if not tmp then
50392: LD_VAR 0 5
50396: NOT
50397: IFFALSE 50401
// exit ;
50399: GO 50446
// for i in tmp do
50401: LD_ADDR_VAR 0 3
50405: PUSH
50406: LD_VAR 0 5
50410: PUSH
50411: FOR_IN
50412: IFFALSE 50444
// begin result := EnemyInRange ( i , 22 ) ;
50414: LD_ADDR_VAR 0 2
50418: PUSH
50419: LD_VAR 0 3
50423: PPUSH
50424: LD_INT 22
50426: PPUSH
50427: CALL 48682 0 2
50431: ST_TO_ADDR
// if result then
50432: LD_VAR 0 2
50436: IFFALSE 50442
// exit ;
50438: POP
50439: POP
50440: GO 50446
// end ;
50442: GO 50411
50444: POP
50445: POP
// end ;
50446: LD_VAR 0 2
50450: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
50451: LD_INT 0
50453: PPUSH
50454: PPUSH
// if not units then
50455: LD_VAR 0 1
50459: NOT
50460: IFFALSE 50464
// exit ;
50462: GO 50534
// result := [ ] ;
50464: LD_ADDR_VAR 0 3
50468: PUSH
50469: EMPTY
50470: ST_TO_ADDR
// for i in units do
50471: LD_ADDR_VAR 0 4
50475: PUSH
50476: LD_VAR 0 1
50480: PUSH
50481: FOR_IN
50482: IFFALSE 50532
// if GetTag ( i ) = tag then
50484: LD_VAR 0 4
50488: PPUSH
50489: CALL_OW 110
50493: PUSH
50494: LD_VAR 0 2
50498: EQUAL
50499: IFFALSE 50530
// result := Replace ( result , result + 1 , i ) ;
50501: LD_ADDR_VAR 0 3
50505: PUSH
50506: LD_VAR 0 3
50510: PPUSH
50511: LD_VAR 0 3
50515: PUSH
50516: LD_INT 1
50518: PLUS
50519: PPUSH
50520: LD_VAR 0 4
50524: PPUSH
50525: CALL_OW 1
50529: ST_TO_ADDR
50530: GO 50481
50532: POP
50533: POP
// end ;
50534: LD_VAR 0 3
50538: RET
// export function IsDriver ( un ) ; begin
50539: LD_INT 0
50541: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
50542: LD_ADDR_VAR 0 2
50546: PUSH
50547: LD_VAR 0 1
50551: PUSH
50552: LD_INT 55
50554: PUSH
50555: EMPTY
50556: LIST
50557: PPUSH
50558: CALL_OW 69
50562: IN
50563: ST_TO_ADDR
// end ;
50564: LD_VAR 0 2
50568: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
50569: LD_INT 0
50571: PPUSH
50572: PPUSH
// list := [ ] ;
50573: LD_ADDR_VAR 0 5
50577: PUSH
50578: EMPTY
50579: ST_TO_ADDR
// case d of 0 :
50580: LD_VAR 0 3
50584: PUSH
50585: LD_INT 0
50587: DOUBLE
50588: EQUAL
50589: IFTRUE 50593
50591: GO 50726
50593: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
50594: LD_ADDR_VAR 0 5
50598: PUSH
50599: LD_VAR 0 1
50603: PUSH
50604: LD_INT 4
50606: MINUS
50607: PUSH
50608: LD_VAR 0 2
50612: PUSH
50613: LD_INT 4
50615: MINUS
50616: PUSH
50617: LD_INT 2
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: LIST
50624: PUSH
50625: LD_VAR 0 1
50629: PUSH
50630: LD_INT 3
50632: MINUS
50633: PUSH
50634: LD_VAR 0 2
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: LIST
50646: PUSH
50647: LD_VAR 0 1
50651: PUSH
50652: LD_INT 4
50654: PLUS
50655: PUSH
50656: LD_VAR 0 2
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PUSH
50669: LD_VAR 0 1
50673: PUSH
50674: LD_INT 3
50676: PLUS
50677: PUSH
50678: LD_VAR 0 2
50682: PUSH
50683: LD_INT 3
50685: PLUS
50686: PUSH
50687: LD_INT 5
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: PUSH
50695: LD_VAR 0 1
50699: PUSH
50700: LD_VAR 0 2
50704: PUSH
50705: LD_INT 4
50707: PLUS
50708: PUSH
50709: LD_INT 0
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// end ; 1 :
50724: GO 51424
50726: LD_INT 1
50728: DOUBLE
50729: EQUAL
50730: IFTRUE 50734
50732: GO 50867
50734: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
50735: LD_ADDR_VAR 0 5
50739: PUSH
50740: LD_VAR 0 1
50744: PUSH
50745: LD_VAR 0 2
50749: PUSH
50750: LD_INT 4
50752: MINUS
50753: PUSH
50754: LD_INT 3
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: LIST
50761: PUSH
50762: LD_VAR 0 1
50766: PUSH
50767: LD_INT 3
50769: MINUS
50770: PUSH
50771: LD_VAR 0 2
50775: PUSH
50776: LD_INT 3
50778: MINUS
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: LIST
50787: PUSH
50788: LD_VAR 0 1
50792: PUSH
50793: LD_INT 4
50795: MINUS
50796: PUSH
50797: LD_VAR 0 2
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: PUSH
50810: LD_VAR 0 1
50814: PUSH
50815: LD_VAR 0 2
50819: PUSH
50820: LD_INT 3
50822: PLUS
50823: PUSH
50824: LD_INT 0
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: PUSH
50832: LD_VAR 0 1
50836: PUSH
50837: LD_INT 4
50839: PLUS
50840: PUSH
50841: LD_VAR 0 2
50845: PUSH
50846: LD_INT 4
50848: PLUS
50849: PUSH
50850: LD_INT 5
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: LIST
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: ST_TO_ADDR
// end ; 2 :
50865: GO 51424
50867: LD_INT 2
50869: DOUBLE
50870: EQUAL
50871: IFTRUE 50875
50873: GO 51004
50875: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50876: LD_ADDR_VAR 0 5
50880: PUSH
50881: LD_VAR 0 1
50885: PUSH
50886: LD_VAR 0 2
50890: PUSH
50891: LD_INT 3
50893: MINUS
50894: PUSH
50895: LD_INT 3
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: LIST
50902: PUSH
50903: LD_VAR 0 1
50907: PUSH
50908: LD_INT 4
50910: PLUS
50911: PUSH
50912: LD_VAR 0 2
50916: PUSH
50917: LD_INT 4
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: PUSH
50925: LD_VAR 0 1
50929: PUSH
50930: LD_VAR 0 2
50934: PUSH
50935: LD_INT 4
50937: PLUS
50938: PUSH
50939: LD_INT 0
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: PUSH
50947: LD_VAR 0 1
50951: PUSH
50952: LD_INT 3
50954: MINUS
50955: PUSH
50956: LD_VAR 0 2
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: LIST
50968: PUSH
50969: LD_VAR 0 1
50973: PUSH
50974: LD_INT 4
50976: MINUS
50977: PUSH
50978: LD_VAR 0 2
50982: PUSH
50983: LD_INT 4
50985: MINUS
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: ST_TO_ADDR
// end ; 3 :
51002: GO 51424
51004: LD_INT 3
51006: DOUBLE
51007: EQUAL
51008: IFTRUE 51012
51010: GO 51145
51012: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51013: LD_ADDR_VAR 0 5
51017: PUSH
51018: LD_VAR 0 1
51022: PUSH
51023: LD_INT 3
51025: PLUS
51026: PUSH
51027: LD_VAR 0 2
51031: PUSH
51032: LD_INT 4
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: PUSH
51040: LD_VAR 0 1
51044: PUSH
51045: LD_INT 4
51047: PLUS
51048: PUSH
51049: LD_VAR 0 2
51053: PUSH
51054: LD_INT 4
51056: PLUS
51057: PUSH
51058: LD_INT 5
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: PUSH
51066: LD_VAR 0 1
51070: PUSH
51071: LD_INT 4
51073: MINUS
51074: PUSH
51075: LD_VAR 0 2
51079: PUSH
51080: LD_INT 1
51082: PUSH
51083: EMPTY
51084: LIST
51085: LIST
51086: LIST
51087: PUSH
51088: LD_VAR 0 1
51092: PUSH
51093: LD_VAR 0 2
51097: PUSH
51098: LD_INT 4
51100: MINUS
51101: PUSH
51102: LD_INT 3
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: LIST
51109: PUSH
51110: LD_VAR 0 1
51114: PUSH
51115: LD_INT 3
51117: MINUS
51118: PUSH
51119: LD_VAR 0 2
51123: PUSH
51124: LD_INT 3
51126: MINUS
51127: PUSH
51128: LD_INT 2
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: LIST
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: LIST
51140: LIST
51141: LIST
51142: ST_TO_ADDR
// end ; 4 :
51143: GO 51424
51145: LD_INT 4
51147: DOUBLE
51148: EQUAL
51149: IFTRUE 51153
51151: GO 51286
51153: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51154: LD_ADDR_VAR 0 5
51158: PUSH
51159: LD_VAR 0 1
51163: PUSH
51164: LD_VAR 0 2
51168: PUSH
51169: LD_INT 4
51171: PLUS
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: LIST
51180: PUSH
51181: LD_VAR 0 1
51185: PUSH
51186: LD_INT 3
51188: PLUS
51189: PUSH
51190: LD_VAR 0 2
51194: PUSH
51195: LD_INT 3
51197: PLUS
51198: PUSH
51199: LD_INT 5
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: PUSH
51207: LD_VAR 0 1
51211: PUSH
51212: LD_INT 4
51214: PLUS
51215: PUSH
51216: LD_VAR 0 2
51220: PUSH
51221: LD_INT 4
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: LIST
51228: PUSH
51229: LD_VAR 0 1
51233: PUSH
51234: LD_VAR 0 2
51238: PUSH
51239: LD_INT 3
51241: MINUS
51242: PUSH
51243: LD_INT 3
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: PUSH
51251: LD_VAR 0 1
51255: PUSH
51256: LD_INT 4
51258: MINUS
51259: PUSH
51260: LD_VAR 0 2
51264: PUSH
51265: LD_INT 4
51267: MINUS
51268: PUSH
51269: LD_INT 2
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: LIST
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: ST_TO_ADDR
// end ; 5 :
51284: GO 51424
51286: LD_INT 5
51288: DOUBLE
51289: EQUAL
51290: IFTRUE 51294
51292: GO 51423
51294: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51295: LD_ADDR_VAR 0 5
51299: PUSH
51300: LD_VAR 0 1
51304: PUSH
51305: LD_INT 4
51307: MINUS
51308: PUSH
51309: LD_VAR 0 2
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: LIST
51321: PUSH
51322: LD_VAR 0 1
51326: PUSH
51327: LD_VAR 0 2
51331: PUSH
51332: LD_INT 4
51334: MINUS
51335: PUSH
51336: LD_INT 3
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: LIST
51343: PUSH
51344: LD_VAR 0 1
51348: PUSH
51349: LD_INT 4
51351: PLUS
51352: PUSH
51353: LD_VAR 0 2
51357: PUSH
51358: LD_INT 4
51360: PLUS
51361: PUSH
51362: LD_INT 5
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: LIST
51369: PUSH
51370: LD_VAR 0 1
51374: PUSH
51375: LD_INT 3
51377: PLUS
51378: PUSH
51379: LD_VAR 0 2
51383: PUSH
51384: LD_INT 4
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: LIST
51391: PUSH
51392: LD_VAR 0 1
51396: PUSH
51397: LD_VAR 0 2
51401: PUSH
51402: LD_INT 3
51404: PLUS
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: LIST
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// end ; end ;
51421: GO 51424
51423: POP
// result := list ;
51424: LD_ADDR_VAR 0 4
51428: PUSH
51429: LD_VAR 0 5
51433: ST_TO_ADDR
// end ;
51434: LD_VAR 0 4
51438: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
51439: LD_INT 0
51441: PPUSH
51442: PPUSH
51443: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
51444: LD_VAR 0 1
51448: NOT
51449: PUSH
51450: LD_VAR 0 2
51454: PUSH
51455: LD_INT 1
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: LD_INT 4
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: IN
51473: NOT
51474: OR
51475: IFFALSE 51479
// exit ;
51477: GO 51571
// tmp := [ ] ;
51479: LD_ADDR_VAR 0 5
51483: PUSH
51484: EMPTY
51485: ST_TO_ADDR
// for i in units do
51486: LD_ADDR_VAR 0 4
51490: PUSH
51491: LD_VAR 0 1
51495: PUSH
51496: FOR_IN
51497: IFFALSE 51540
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
51499: LD_ADDR_VAR 0 5
51503: PUSH
51504: LD_VAR 0 5
51508: PPUSH
51509: LD_VAR 0 5
51513: PUSH
51514: LD_INT 1
51516: PLUS
51517: PPUSH
51518: LD_VAR 0 4
51522: PPUSH
51523: LD_VAR 0 2
51527: PPUSH
51528: CALL_OW 259
51532: PPUSH
51533: CALL_OW 2
51537: ST_TO_ADDR
51538: GO 51496
51540: POP
51541: POP
// if not tmp then
51542: LD_VAR 0 5
51546: NOT
51547: IFFALSE 51551
// exit ;
51549: GO 51571
// result := SortListByListDesc ( units , tmp ) ;
51551: LD_ADDR_VAR 0 3
51555: PUSH
51556: LD_VAR 0 1
51560: PPUSH
51561: LD_VAR 0 5
51565: PPUSH
51566: CALL_OW 77
51570: ST_TO_ADDR
// end ;
51571: LD_VAR 0 3
51575: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
51576: LD_INT 0
51578: PPUSH
51579: PPUSH
51580: PPUSH
// result := false ;
51581: LD_ADDR_VAR 0 3
51585: PUSH
51586: LD_INT 0
51588: ST_TO_ADDR
// x := GetX ( building ) ;
51589: LD_ADDR_VAR 0 4
51593: PUSH
51594: LD_VAR 0 2
51598: PPUSH
51599: CALL_OW 250
51603: ST_TO_ADDR
// y := GetY ( building ) ;
51604: LD_ADDR_VAR 0 5
51608: PUSH
51609: LD_VAR 0 2
51613: PPUSH
51614: CALL_OW 251
51618: ST_TO_ADDR
// if not building or not x or not y then
51619: LD_VAR 0 2
51623: NOT
51624: PUSH
51625: LD_VAR 0 4
51629: NOT
51630: OR
51631: PUSH
51632: LD_VAR 0 5
51636: NOT
51637: OR
51638: IFFALSE 51642
// exit ;
51640: GO 51734
// if GetTaskList ( unit ) then
51642: LD_VAR 0 1
51646: PPUSH
51647: CALL_OW 437
51651: IFFALSE 51734
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51653: LD_STRING e
51655: PUSH
51656: LD_VAR 0 1
51660: PPUSH
51661: CALL_OW 437
51665: PUSH
51666: LD_INT 1
51668: ARRAY
51669: PUSH
51670: LD_INT 1
51672: ARRAY
51673: EQUAL
51674: PUSH
51675: LD_VAR 0 4
51679: PUSH
51680: LD_VAR 0 1
51684: PPUSH
51685: CALL_OW 437
51689: PUSH
51690: LD_INT 1
51692: ARRAY
51693: PUSH
51694: LD_INT 2
51696: ARRAY
51697: EQUAL
51698: AND
51699: PUSH
51700: LD_VAR 0 5
51704: PUSH
51705: LD_VAR 0 1
51709: PPUSH
51710: CALL_OW 437
51714: PUSH
51715: LD_INT 1
51717: ARRAY
51718: PUSH
51719: LD_INT 3
51721: ARRAY
51722: EQUAL
51723: AND
51724: IFFALSE 51734
// result := true end ;
51726: LD_ADDR_VAR 0 3
51730: PUSH
51731: LD_INT 1
51733: ST_TO_ADDR
// end ;
51734: LD_VAR 0 3
51738: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
51739: LD_INT 0
51741: PPUSH
// result := false ;
51742: LD_ADDR_VAR 0 4
51746: PUSH
51747: LD_INT 0
51749: ST_TO_ADDR
// if GetTaskList ( unit ) then
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 437
51759: IFFALSE 51842
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
51761: LD_STRING M
51763: PUSH
51764: LD_VAR 0 1
51768: PPUSH
51769: CALL_OW 437
51773: PUSH
51774: LD_INT 1
51776: ARRAY
51777: PUSH
51778: LD_INT 1
51780: ARRAY
51781: EQUAL
51782: PUSH
51783: LD_VAR 0 2
51787: PUSH
51788: LD_VAR 0 1
51792: PPUSH
51793: CALL_OW 437
51797: PUSH
51798: LD_INT 1
51800: ARRAY
51801: PUSH
51802: LD_INT 2
51804: ARRAY
51805: EQUAL
51806: AND
51807: PUSH
51808: LD_VAR 0 3
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 437
51822: PUSH
51823: LD_INT 1
51825: ARRAY
51826: PUSH
51827: LD_INT 3
51829: ARRAY
51830: EQUAL
51831: AND
51832: IFFALSE 51842
// result := true ;
51834: LD_ADDR_VAR 0 4
51838: PUSH
51839: LD_INT 1
51841: ST_TO_ADDR
// end ; end ;
51842: LD_VAR 0 4
51846: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
51847: LD_INT 0
51849: PPUSH
51850: PPUSH
51851: PPUSH
51852: PPUSH
// if not unit or not area then
51853: LD_VAR 0 1
51857: NOT
51858: PUSH
51859: LD_VAR 0 2
51863: NOT
51864: OR
51865: IFFALSE 51869
// exit ;
51867: GO 52033
// tmp := AreaToList ( area , i ) ;
51869: LD_ADDR_VAR 0 6
51873: PUSH
51874: LD_VAR 0 2
51878: PPUSH
51879: LD_VAR 0 5
51883: PPUSH
51884: CALL_OW 517
51888: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
51889: LD_ADDR_VAR 0 5
51893: PUSH
51894: DOUBLE
51895: LD_INT 1
51897: DEC
51898: ST_TO_ADDR
51899: LD_VAR 0 6
51903: PUSH
51904: LD_INT 1
51906: ARRAY
51907: PUSH
51908: FOR_TO
51909: IFFALSE 52031
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51911: LD_ADDR_VAR 0 7
51915: PUSH
51916: LD_VAR 0 6
51920: PUSH
51921: LD_INT 1
51923: ARRAY
51924: PUSH
51925: LD_VAR 0 5
51929: ARRAY
51930: PUSH
51931: LD_VAR 0 6
51935: PUSH
51936: LD_INT 2
51938: ARRAY
51939: PUSH
51940: LD_VAR 0 5
51944: ARRAY
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51950: LD_VAR 0 7
51954: PUSH
51955: LD_INT 1
51957: ARRAY
51958: PPUSH
51959: LD_VAR 0 7
51963: PUSH
51964: LD_INT 2
51966: ARRAY
51967: PPUSH
51968: CALL_OW 428
51972: PUSH
51973: LD_INT 0
51975: EQUAL
51976: IFFALSE 52029
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51978: LD_VAR 0 1
51982: PPUSH
51983: LD_VAR 0 7
51987: PUSH
51988: LD_INT 1
51990: ARRAY
51991: PPUSH
51992: LD_VAR 0 7
51996: PUSH
51997: LD_INT 2
51999: ARRAY
52000: PPUSH
52001: LD_VAR 0 3
52005: PPUSH
52006: CALL_OW 48
// result := IsPlaced ( unit ) ;
52010: LD_ADDR_VAR 0 4
52014: PUSH
52015: LD_VAR 0 1
52019: PPUSH
52020: CALL_OW 305
52024: ST_TO_ADDR
// exit ;
52025: POP
52026: POP
52027: GO 52033
// end ; end ;
52029: GO 51908
52031: POP
52032: POP
// end ;
52033: LD_VAR 0 4
52037: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52038: LD_INT 0
52040: PPUSH
52041: PPUSH
52042: PPUSH
// if not side or side > 8 then
52043: LD_VAR 0 1
52047: NOT
52048: PUSH
52049: LD_VAR 0 1
52053: PUSH
52054: LD_INT 8
52056: GREATER
52057: OR
52058: IFFALSE 52062
// exit ;
52060: GO 52249
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52062: LD_ADDR_VAR 0 4
52066: PUSH
52067: LD_INT 22
52069: PUSH
52070: LD_VAR 0 1
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: PUSH
52079: LD_INT 21
52081: PUSH
52082: LD_INT 3
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PPUSH
52093: CALL_OW 69
52097: ST_TO_ADDR
// if not tmp then
52098: LD_VAR 0 4
52102: NOT
52103: IFFALSE 52107
// exit ;
52105: GO 52249
// enable_addtolog := true ;
52107: LD_ADDR_OWVAR 81
52111: PUSH
52112: LD_INT 1
52114: ST_TO_ADDR
// AddToLog ( [ ) ;
52115: LD_STRING [
52117: PPUSH
52118: CALL_OW 561
// for i in tmp do
52122: LD_ADDR_VAR 0 3
52126: PUSH
52127: LD_VAR 0 4
52131: PUSH
52132: FOR_IN
52133: IFFALSE 52240
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52135: LD_STRING [
52137: PUSH
52138: LD_VAR 0 3
52142: PPUSH
52143: CALL_OW 266
52147: STR
52148: PUSH
52149: LD_STRING , 
52151: STR
52152: PUSH
52153: LD_VAR 0 3
52157: PPUSH
52158: CALL_OW 250
52162: STR
52163: PUSH
52164: LD_STRING , 
52166: STR
52167: PUSH
52168: LD_VAR 0 3
52172: PPUSH
52173: CALL_OW 251
52177: STR
52178: PUSH
52179: LD_STRING , 
52181: STR
52182: PUSH
52183: LD_VAR 0 3
52187: PPUSH
52188: CALL_OW 254
52192: STR
52193: PUSH
52194: LD_STRING , 
52196: STR
52197: PUSH
52198: LD_VAR 0 3
52202: PPUSH
52203: LD_INT 1
52205: PPUSH
52206: CALL_OW 268
52210: STR
52211: PUSH
52212: LD_STRING , 
52214: STR
52215: PUSH
52216: LD_VAR 0 3
52220: PPUSH
52221: LD_INT 2
52223: PPUSH
52224: CALL_OW 268
52228: STR
52229: PUSH
52230: LD_STRING ],
52232: STR
52233: PPUSH
52234: CALL_OW 561
// end ;
52238: GO 52132
52240: POP
52241: POP
// AddToLog ( ]; ) ;
52242: LD_STRING ];
52244: PPUSH
52245: CALL_OW 561
// end ;
52249: LD_VAR 0 2
52253: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52254: LD_INT 0
52256: PPUSH
52257: PPUSH
52258: PPUSH
52259: PPUSH
52260: PPUSH
// if not area or not rate or not max then
52261: LD_VAR 0 1
52265: NOT
52266: PUSH
52267: LD_VAR 0 2
52271: NOT
52272: OR
52273: PUSH
52274: LD_VAR 0 4
52278: NOT
52279: OR
52280: IFFALSE 52284
// exit ;
52282: GO 52476
// while 1 do
52284: LD_INT 1
52286: IFFALSE 52476
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52288: LD_ADDR_VAR 0 9
52292: PUSH
52293: LD_VAR 0 1
52297: PPUSH
52298: LD_INT 1
52300: PPUSH
52301: CALL_OW 287
52305: PUSH
52306: LD_INT 10
52308: MUL
52309: ST_TO_ADDR
// r := rate / 10 ;
52310: LD_ADDR_VAR 0 7
52314: PUSH
52315: LD_VAR 0 2
52319: PUSH
52320: LD_INT 10
52322: DIVREAL
52323: ST_TO_ADDR
// time := 1 1$00 ;
52324: LD_ADDR_VAR 0 8
52328: PUSH
52329: LD_INT 2100
52331: ST_TO_ADDR
// if amount < min then
52332: LD_VAR 0 9
52336: PUSH
52337: LD_VAR 0 3
52341: LESS
52342: IFFALSE 52360
// r := r * 2 else
52344: LD_ADDR_VAR 0 7
52348: PUSH
52349: LD_VAR 0 7
52353: PUSH
52354: LD_INT 2
52356: MUL
52357: ST_TO_ADDR
52358: GO 52386
// if amount > max then
52360: LD_VAR 0 9
52364: PUSH
52365: LD_VAR 0 4
52369: GREATER
52370: IFFALSE 52386
// r := r / 2 ;
52372: LD_ADDR_VAR 0 7
52376: PUSH
52377: LD_VAR 0 7
52381: PUSH
52382: LD_INT 2
52384: DIVREAL
52385: ST_TO_ADDR
// time := time / r ;
52386: LD_ADDR_VAR 0 8
52390: PUSH
52391: LD_VAR 0 8
52395: PUSH
52396: LD_VAR 0 7
52400: DIVREAL
52401: ST_TO_ADDR
// if time < 0 then
52402: LD_VAR 0 8
52406: PUSH
52407: LD_INT 0
52409: LESS
52410: IFFALSE 52427
// time := time * - 1 ;
52412: LD_ADDR_VAR 0 8
52416: PUSH
52417: LD_VAR 0 8
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: MUL
52426: ST_TO_ADDR
// wait ( time ) ;
52427: LD_VAR 0 8
52431: PPUSH
52432: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
52436: LD_INT 35
52438: PPUSH
52439: LD_INT 875
52441: PPUSH
52442: CALL_OW 12
52446: PPUSH
52447: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
52451: LD_INT 1
52453: PPUSH
52454: LD_INT 5
52456: PPUSH
52457: CALL_OW 12
52461: PPUSH
52462: LD_VAR 0 1
52466: PPUSH
52467: LD_INT 1
52469: PPUSH
52470: CALL_OW 55
// end ;
52474: GO 52284
// end ;
52476: LD_VAR 0 5
52480: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
52481: LD_INT 0
52483: PPUSH
52484: PPUSH
52485: PPUSH
52486: PPUSH
52487: PPUSH
52488: PPUSH
52489: PPUSH
52490: PPUSH
// if not turrets or not factories then
52491: LD_VAR 0 1
52495: NOT
52496: PUSH
52497: LD_VAR 0 2
52501: NOT
52502: OR
52503: IFFALSE 52507
// exit ;
52505: GO 52814
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
52507: LD_ADDR_VAR 0 10
52511: PUSH
52512: LD_INT 5
52514: PUSH
52515: LD_INT 6
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 2
52524: PUSH
52525: LD_INT 4
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 3
52534: PUSH
52535: LD_INT 5
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 24
52549: PUSH
52550: LD_INT 25
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 23
52559: PUSH
52560: LD_INT 27
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 42
52573: PUSH
52574: LD_INT 43
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 44
52583: PUSH
52584: LD_INT 46
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 45
52593: PUSH
52594: LD_INT 47
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: LIST
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: LIST
52610: ST_TO_ADDR
// result := [ ] ;
52611: LD_ADDR_VAR 0 3
52615: PUSH
52616: EMPTY
52617: ST_TO_ADDR
// for i in turrets do
52618: LD_ADDR_VAR 0 4
52622: PUSH
52623: LD_VAR 0 1
52627: PUSH
52628: FOR_IN
52629: IFFALSE 52812
// begin nat := GetNation ( i ) ;
52631: LD_ADDR_VAR 0 7
52635: PUSH
52636: LD_VAR 0 4
52640: PPUSH
52641: CALL_OW 248
52645: ST_TO_ADDR
// weapon := 0 ;
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: LD_INT 0
52653: ST_TO_ADDR
// if not nat then
52654: LD_VAR 0 7
52658: NOT
52659: IFFALSE 52663
// continue ;
52661: GO 52628
// for j in list [ nat ] do
52663: LD_ADDR_VAR 0 5
52667: PUSH
52668: LD_VAR 0 10
52672: PUSH
52673: LD_VAR 0 7
52677: ARRAY
52678: PUSH
52679: FOR_IN
52680: IFFALSE 52721
// if GetBWeapon ( i ) = j [ 1 ] then
52682: LD_VAR 0 4
52686: PPUSH
52687: CALL_OW 269
52691: PUSH
52692: LD_VAR 0 5
52696: PUSH
52697: LD_INT 1
52699: ARRAY
52700: EQUAL
52701: IFFALSE 52719
// begin weapon := j [ 2 ] ;
52703: LD_ADDR_VAR 0 8
52707: PUSH
52708: LD_VAR 0 5
52712: PUSH
52713: LD_INT 2
52715: ARRAY
52716: ST_TO_ADDR
// break ;
52717: GO 52721
// end ;
52719: GO 52679
52721: POP
52722: POP
// if not weapon then
52723: LD_VAR 0 8
52727: NOT
52728: IFFALSE 52732
// continue ;
52730: GO 52628
// for k in factories do
52732: LD_ADDR_VAR 0 6
52736: PUSH
52737: LD_VAR 0 2
52741: PUSH
52742: FOR_IN
52743: IFFALSE 52808
// begin weapons := AvailableWeaponList ( k ) ;
52745: LD_ADDR_VAR 0 9
52749: PUSH
52750: LD_VAR 0 6
52754: PPUSH
52755: CALL_OW 478
52759: ST_TO_ADDR
// if not weapons then
52760: LD_VAR 0 9
52764: NOT
52765: IFFALSE 52769
// continue ;
52767: GO 52742
// if weapon in weapons then
52769: LD_VAR 0 8
52773: PUSH
52774: LD_VAR 0 9
52778: IN
52779: IFFALSE 52806
// begin result := [ i , weapon ] ;
52781: LD_ADDR_VAR 0 3
52785: PUSH
52786: LD_VAR 0 4
52790: PUSH
52791: LD_VAR 0 8
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: ST_TO_ADDR
// exit ;
52800: POP
52801: POP
52802: POP
52803: POP
52804: GO 52814
// end ; end ;
52806: GO 52742
52808: POP
52809: POP
// end ;
52810: GO 52628
52812: POP
52813: POP
// end ;
52814: LD_VAR 0 3
52818: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
52819: LD_INT 0
52821: PPUSH
// if not side or side > 8 then
52822: LD_VAR 0 3
52826: NOT
52827: PUSH
52828: LD_VAR 0 3
52832: PUSH
52833: LD_INT 8
52835: GREATER
52836: OR
52837: IFFALSE 52841
// exit ;
52839: GO 52900
// if not range then
52841: LD_VAR 0 4
52845: NOT
52846: IFFALSE 52857
// range := - 12 ;
52848: LD_ADDR_VAR 0 4
52852: PUSH
52853: LD_INT 12
52855: NEG
52856: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
52857: LD_VAR 0 1
52861: PPUSH
52862: LD_VAR 0 2
52866: PPUSH
52867: LD_VAR 0 3
52871: PPUSH
52872: LD_VAR 0 4
52876: PPUSH
52877: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
52881: LD_VAR 0 1
52885: PPUSH
52886: LD_VAR 0 2
52890: PPUSH
52891: LD_VAR 0 3
52895: PPUSH
52896: CALL_OW 331
// end ;
52900: LD_VAR 0 5
52904: RET
// export function Video ( mode ) ; begin
52905: LD_INT 0
52907: PPUSH
// ingame_video = mode ;
52908: LD_ADDR_OWVAR 52
52912: PUSH
52913: LD_VAR 0 1
52917: ST_TO_ADDR
// interface_hidden = mode ;
52918: LD_ADDR_OWVAR 54
52922: PUSH
52923: LD_VAR 0 1
52927: ST_TO_ADDR
// end ;
52928: LD_VAR 0 2
52932: RET
// export function Join ( array , element ) ; begin
52933: LD_INT 0
52935: PPUSH
// result := Replace ( array , array + 1 , element ) ;
52936: LD_ADDR_VAR 0 3
52940: PUSH
52941: LD_VAR 0 1
52945: PPUSH
52946: LD_VAR 0 1
52950: PUSH
52951: LD_INT 1
52953: PLUS
52954: PPUSH
52955: LD_VAR 0 2
52959: PPUSH
52960: CALL_OW 1
52964: ST_TO_ADDR
// end ;
52965: LD_VAR 0 3
52969: RET
// export function JoinUnion ( array , element ) ; begin
52970: LD_INT 0
52972: PPUSH
// result := array union element ;
52973: LD_ADDR_VAR 0 3
52977: PUSH
52978: LD_VAR 0 1
52982: PUSH
52983: LD_VAR 0 2
52987: UNION
52988: ST_TO_ADDR
// end ;
52989: LD_VAR 0 3
52993: RET
// export function GetBehemoths ( side ) ; begin
52994: LD_INT 0
52996: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52997: LD_ADDR_VAR 0 2
53001: PUSH
53002: LD_INT 22
53004: PUSH
53005: LD_VAR 0 1
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 31
53016: PUSH
53017: LD_INT 25
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PPUSH
53028: CALL_OW 69
53032: ST_TO_ADDR
// end ;
53033: LD_VAR 0 2
53037: RET
// export function Shuffle ( array ) ; var i , index ; begin
53038: LD_INT 0
53040: PPUSH
53041: PPUSH
53042: PPUSH
// result := [ ] ;
53043: LD_ADDR_VAR 0 2
53047: PUSH
53048: EMPTY
53049: ST_TO_ADDR
// if not array then
53050: LD_VAR 0 1
53054: NOT
53055: IFFALSE 53059
// exit ;
53057: GO 53158
// Randomize ;
53059: CALL_OW 10
// for i = array downto 1 do
53063: LD_ADDR_VAR 0 3
53067: PUSH
53068: DOUBLE
53069: LD_VAR 0 1
53073: INC
53074: ST_TO_ADDR
53075: LD_INT 1
53077: PUSH
53078: FOR_DOWNTO
53079: IFFALSE 53156
// begin index := rand ( 1 , array ) ;
53081: LD_ADDR_VAR 0 4
53085: PUSH
53086: LD_INT 1
53088: PPUSH
53089: LD_VAR 0 1
53093: PPUSH
53094: CALL_OW 12
53098: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53099: LD_ADDR_VAR 0 2
53103: PUSH
53104: LD_VAR 0 2
53108: PPUSH
53109: LD_VAR 0 2
53113: PUSH
53114: LD_INT 1
53116: PLUS
53117: PPUSH
53118: LD_VAR 0 1
53122: PUSH
53123: LD_VAR 0 4
53127: ARRAY
53128: PPUSH
53129: CALL_OW 2
53133: ST_TO_ADDR
// array := Delete ( array , index ) ;
53134: LD_ADDR_VAR 0 1
53138: PUSH
53139: LD_VAR 0 1
53143: PPUSH
53144: LD_VAR 0 4
53148: PPUSH
53149: CALL_OW 3
53153: ST_TO_ADDR
// end ;
53154: GO 53078
53156: POP
53157: POP
// end ;
53158: LD_VAR 0 2
53162: RET
// export function GetBaseMaterials ( base ) ; begin
53163: LD_INT 0
53165: PPUSH
// result := [ 0 , 0 , 0 ] ;
53166: LD_ADDR_VAR 0 2
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// if not base then
53185: LD_VAR 0 1
53189: NOT
53190: IFFALSE 53194
// exit ;
53192: GO 53243
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53194: LD_ADDR_VAR 0 2
53198: PUSH
53199: LD_VAR 0 1
53203: PPUSH
53204: LD_INT 1
53206: PPUSH
53207: CALL_OW 275
53211: PUSH
53212: LD_VAR 0 1
53216: PPUSH
53217: LD_INT 2
53219: PPUSH
53220: CALL_OW 275
53224: PUSH
53225: LD_VAR 0 1
53229: PPUSH
53230: LD_INT 3
53232: PPUSH
53233: CALL_OW 275
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// end ;
53243: LD_VAR 0 2
53247: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53248: LD_INT 0
53250: PPUSH
53251: PPUSH
// result := array ;
53252: LD_ADDR_VAR 0 3
53256: PUSH
53257: LD_VAR 0 1
53261: ST_TO_ADDR
// if size > 0 then
53262: LD_VAR 0 2
53266: PUSH
53267: LD_INT 0
53269: GREATER
53270: IFFALSE 53316
// for i := array downto size do
53272: LD_ADDR_VAR 0 4
53276: PUSH
53277: DOUBLE
53278: LD_VAR 0 1
53282: INC
53283: ST_TO_ADDR
53284: LD_VAR 0 2
53288: PUSH
53289: FOR_DOWNTO
53290: IFFALSE 53314
// result := Delete ( result , result ) ;
53292: LD_ADDR_VAR 0 3
53296: PUSH
53297: LD_VAR 0 3
53301: PPUSH
53302: LD_VAR 0 3
53306: PPUSH
53307: CALL_OW 3
53311: ST_TO_ADDR
53312: GO 53289
53314: POP
53315: POP
// end ;
53316: LD_VAR 0 3
53320: RET
// export function ComExit ( unit ) ; var tmp ; begin
53321: LD_INT 0
53323: PPUSH
53324: PPUSH
// if not IsInUnit ( unit ) then
53325: LD_VAR 0 1
53329: PPUSH
53330: CALL_OW 310
53334: NOT
53335: IFFALSE 53339
// exit ;
53337: GO 53399
// tmp := IsInUnit ( unit ) ;
53339: LD_ADDR_VAR 0 3
53343: PUSH
53344: LD_VAR 0 1
53348: PPUSH
53349: CALL_OW 310
53353: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
53354: LD_VAR 0 3
53358: PPUSH
53359: CALL_OW 247
53363: PUSH
53364: LD_INT 2
53366: EQUAL
53367: IFFALSE 53380
// ComExitVehicle ( unit ) else
53369: LD_VAR 0 1
53373: PPUSH
53374: CALL_OW 121
53378: GO 53389
// ComExitBuilding ( unit ) ;
53380: LD_VAR 0 1
53384: PPUSH
53385: CALL_OW 122
// result := tmp ;
53389: LD_ADDR_VAR 0 2
53393: PUSH
53394: LD_VAR 0 3
53398: ST_TO_ADDR
// end ;
53399: LD_VAR 0 2
53403: RET
// export function ComExitAll ( units ) ; var i ; begin
53404: LD_INT 0
53406: PPUSH
53407: PPUSH
// if not units then
53408: LD_VAR 0 1
53412: NOT
53413: IFFALSE 53417
// exit ;
53415: GO 53443
// for i in units do
53417: LD_ADDR_VAR 0 3
53421: PUSH
53422: LD_VAR 0 1
53426: PUSH
53427: FOR_IN
53428: IFFALSE 53441
// ComExit ( i ) ;
53430: LD_VAR 0 3
53434: PPUSH
53435: CALL 53321 0 1
53439: GO 53427
53441: POP
53442: POP
// end ;
53443: LD_VAR 0 2
53447: RET
// export function ResetHc ; begin
53448: LD_INT 0
53450: PPUSH
// InitHc ;
53451: CALL_OW 19
// hc_importance := 0 ;
53455: LD_ADDR_OWVAR 32
53459: PUSH
53460: LD_INT 0
53462: ST_TO_ADDR
// end ;
53463: LD_VAR 0 1
53467: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
53468: LD_INT 0
53470: PPUSH
53471: PPUSH
53472: PPUSH
// _x := ( x1 + x2 ) div 2 ;
53473: LD_ADDR_VAR 0 6
53477: PUSH
53478: LD_VAR 0 1
53482: PUSH
53483: LD_VAR 0 3
53487: PLUS
53488: PUSH
53489: LD_INT 2
53491: DIV
53492: ST_TO_ADDR
// if _x < 0 then
53493: LD_VAR 0 6
53497: PUSH
53498: LD_INT 0
53500: LESS
53501: IFFALSE 53518
// _x := _x * - 1 ;
53503: LD_ADDR_VAR 0 6
53507: PUSH
53508: LD_VAR 0 6
53512: PUSH
53513: LD_INT 1
53515: NEG
53516: MUL
53517: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
53518: LD_ADDR_VAR 0 7
53522: PUSH
53523: LD_VAR 0 2
53527: PUSH
53528: LD_VAR 0 4
53532: PLUS
53533: PUSH
53534: LD_INT 2
53536: DIV
53537: ST_TO_ADDR
// if _y < 0 then
53538: LD_VAR 0 7
53542: PUSH
53543: LD_INT 0
53545: LESS
53546: IFFALSE 53563
// _y := _y * - 1 ;
53548: LD_ADDR_VAR 0 7
53552: PUSH
53553: LD_VAR 0 7
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: MUL
53562: ST_TO_ADDR
// result := [ _x , _y ] ;
53563: LD_ADDR_VAR 0 5
53567: PUSH
53568: LD_VAR 0 6
53572: PUSH
53573: LD_VAR 0 7
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: ST_TO_ADDR
// end ;
53582: LD_VAR 0 5
53586: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
53587: LD_INT 0
53589: PPUSH
53590: PPUSH
53591: PPUSH
53592: PPUSH
// task := GetTaskList ( unit ) ;
53593: LD_ADDR_VAR 0 7
53597: PUSH
53598: LD_VAR 0 1
53602: PPUSH
53603: CALL_OW 437
53607: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
53608: LD_VAR 0 7
53612: NOT
53613: PUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: LD_VAR 0 2
53623: PPUSH
53624: CALL_OW 308
53628: NOT
53629: AND
53630: IFFALSE 53634
// exit ;
53632: GO 53752
// if IsInArea ( unit , area ) then
53634: LD_VAR 0 1
53638: PPUSH
53639: LD_VAR 0 2
53643: PPUSH
53644: CALL_OW 308
53648: IFFALSE 53666
// begin ComMoveToArea ( unit , goAway ) ;
53650: LD_VAR 0 1
53654: PPUSH
53655: LD_VAR 0 3
53659: PPUSH
53660: CALL_OW 113
// exit ;
53664: GO 53752
// end ; if task [ 1 ] [ 1 ] <> M then
53666: LD_VAR 0 7
53670: PUSH
53671: LD_INT 1
53673: ARRAY
53674: PUSH
53675: LD_INT 1
53677: ARRAY
53678: PUSH
53679: LD_STRING M
53681: NONEQUAL
53682: IFFALSE 53686
// exit ;
53684: GO 53752
// x := task [ 1 ] [ 2 ] ;
53686: LD_ADDR_VAR 0 5
53690: PUSH
53691: LD_VAR 0 7
53695: PUSH
53696: LD_INT 1
53698: ARRAY
53699: PUSH
53700: LD_INT 2
53702: ARRAY
53703: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
53704: LD_ADDR_VAR 0 6
53708: PUSH
53709: LD_VAR 0 7
53713: PUSH
53714: LD_INT 1
53716: ARRAY
53717: PUSH
53718: LD_INT 3
53720: ARRAY
53721: ST_TO_ADDR
// if InArea ( x , y , area ) then
53722: LD_VAR 0 5
53726: PPUSH
53727: LD_VAR 0 6
53731: PPUSH
53732: LD_VAR 0 2
53736: PPUSH
53737: CALL_OW 309
53741: IFFALSE 53752
// ComStop ( unit ) ;
53743: LD_VAR 0 1
53747: PPUSH
53748: CALL_OW 141
// end ;
53752: LD_VAR 0 4
53756: RET
// export function Abs ( value ) ; begin
53757: LD_INT 0
53759: PPUSH
// result := value ;
53760: LD_ADDR_VAR 0 2
53764: PUSH
53765: LD_VAR 0 1
53769: ST_TO_ADDR
// if value < 0 then
53770: LD_VAR 0 1
53774: PUSH
53775: LD_INT 0
53777: LESS
53778: IFFALSE 53795
// result := value * - 1 ;
53780: LD_ADDR_VAR 0 2
53784: PUSH
53785: LD_VAR 0 1
53789: PUSH
53790: LD_INT 1
53792: NEG
53793: MUL
53794: ST_TO_ADDR
// end ;
53795: LD_VAR 0 2
53799: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
53800: LD_INT 0
53802: PPUSH
53803: PPUSH
53804: PPUSH
53805: PPUSH
53806: PPUSH
53807: PPUSH
53808: PPUSH
53809: PPUSH
// if not unit or not building then
53810: LD_VAR 0 1
53814: NOT
53815: PUSH
53816: LD_VAR 0 2
53820: NOT
53821: OR
53822: IFFALSE 53826
// exit ;
53824: GO 54052
// x := GetX ( building ) ;
53826: LD_ADDR_VAR 0 4
53830: PUSH
53831: LD_VAR 0 2
53835: PPUSH
53836: CALL_OW 250
53840: ST_TO_ADDR
// y := GetY ( building ) ;
53841: LD_ADDR_VAR 0 6
53845: PUSH
53846: LD_VAR 0 2
53850: PPUSH
53851: CALL_OW 251
53855: ST_TO_ADDR
// d := GetDir ( building ) ;
53856: LD_ADDR_VAR 0 8
53860: PUSH
53861: LD_VAR 0 2
53865: PPUSH
53866: CALL_OW 254
53870: ST_TO_ADDR
// r := 4 ;
53871: LD_ADDR_VAR 0 9
53875: PUSH
53876: LD_INT 4
53878: ST_TO_ADDR
// for i := 1 to 5 do
53879: LD_ADDR_VAR 0 10
53883: PUSH
53884: DOUBLE
53885: LD_INT 1
53887: DEC
53888: ST_TO_ADDR
53889: LD_INT 5
53891: PUSH
53892: FOR_TO
53893: IFFALSE 54050
// begin _x := ShiftX ( x , d , r + i ) ;
53895: LD_ADDR_VAR 0 5
53899: PUSH
53900: LD_VAR 0 4
53904: PPUSH
53905: LD_VAR 0 8
53909: PPUSH
53910: LD_VAR 0 9
53914: PUSH
53915: LD_VAR 0 10
53919: PLUS
53920: PPUSH
53921: CALL_OW 272
53925: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
53926: LD_ADDR_VAR 0 7
53930: PUSH
53931: LD_VAR 0 6
53935: PPUSH
53936: LD_VAR 0 8
53940: PPUSH
53941: LD_VAR 0 9
53945: PUSH
53946: LD_VAR 0 10
53950: PLUS
53951: PPUSH
53952: CALL_OW 273
53956: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
53957: LD_VAR 0 5
53961: PPUSH
53962: LD_VAR 0 7
53966: PPUSH
53967: CALL_OW 488
53971: PUSH
53972: LD_VAR 0 5
53976: PPUSH
53977: LD_VAR 0 7
53981: PPUSH
53982: CALL_OW 428
53986: PPUSH
53987: CALL_OW 247
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: IN
54002: NOT
54003: AND
54004: IFFALSE 54048
// begin ComMoveXY ( unit , _x , _y ) ;
54006: LD_VAR 0 1
54010: PPUSH
54011: LD_VAR 0 5
54015: PPUSH
54016: LD_VAR 0 7
54020: PPUSH
54021: CALL_OW 111
// result := [ _x , _y ] ;
54025: LD_ADDR_VAR 0 3
54029: PUSH
54030: LD_VAR 0 5
54034: PUSH
54035: LD_VAR 0 7
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// exit ;
54044: POP
54045: POP
54046: GO 54052
// end ; end ;
54048: GO 53892
54050: POP
54051: POP
// end ;
54052: LD_VAR 0 3
54056: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54057: LD_INT 0
54059: PPUSH
54060: PPUSH
54061: PPUSH
// result := 0 ;
54062: LD_ADDR_VAR 0 3
54066: PUSH
54067: LD_INT 0
54069: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54070: LD_VAR 0 1
54074: PUSH
54075: LD_INT 0
54077: LESS
54078: PUSH
54079: LD_VAR 0 1
54083: PUSH
54084: LD_INT 8
54086: GREATER
54087: OR
54088: PUSH
54089: LD_VAR 0 2
54093: PUSH
54094: LD_INT 0
54096: LESS
54097: OR
54098: PUSH
54099: LD_VAR 0 2
54103: PUSH
54104: LD_INT 8
54106: GREATER
54107: OR
54108: IFFALSE 54112
// exit ;
54110: GO 54187
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54112: LD_ADDR_VAR 0 4
54116: PUSH
54117: LD_INT 22
54119: PUSH
54120: LD_VAR 0 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PPUSH
54129: CALL_OW 69
54133: PUSH
54134: FOR_IN
54135: IFFALSE 54185
// begin un := UnitShoot ( i ) ;
54137: LD_ADDR_VAR 0 5
54141: PUSH
54142: LD_VAR 0 4
54146: PPUSH
54147: CALL_OW 504
54151: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54152: LD_VAR 0 5
54156: PPUSH
54157: CALL_OW 255
54161: PUSH
54162: LD_VAR 0 1
54166: EQUAL
54167: IFFALSE 54183
// begin result := un ;
54169: LD_ADDR_VAR 0 3
54173: PUSH
54174: LD_VAR 0 5
54178: ST_TO_ADDR
// exit ;
54179: POP
54180: POP
54181: GO 54187
// end ; end ;
54183: GO 54134
54185: POP
54186: POP
// end ;
54187: LD_VAR 0 3
54191: RET
// export function GetCargoBay ( units ) ; begin
54192: LD_INT 0
54194: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54195: LD_ADDR_VAR 0 2
54199: PUSH
54200: LD_VAR 0 1
54204: PPUSH
54205: LD_INT 2
54207: PUSH
54208: LD_INT 34
54210: PUSH
54211: LD_INT 12
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 34
54220: PUSH
54221: LD_INT 51
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 34
54230: PUSH
54231: LD_INT 32
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 34
54240: PUSH
54241: LD_EXP 108
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: PPUSH
54257: CALL_OW 72
54261: ST_TO_ADDR
// end ;
54262: LD_VAR 0 2
54266: RET
// export function Negate ( value ) ; begin
54267: LD_INT 0
54269: PPUSH
// result := not value ;
54270: LD_ADDR_VAR 0 2
54274: PUSH
54275: LD_VAR 0 1
54279: NOT
54280: ST_TO_ADDR
// end ;
54281: LD_VAR 0 2
54285: RET
// export function Inc ( value ) ; begin
54286: LD_INT 0
54288: PPUSH
// result := value + 1 ;
54289: LD_ADDR_VAR 0 2
54293: PUSH
54294: LD_VAR 0 1
54298: PUSH
54299: LD_INT 1
54301: PLUS
54302: ST_TO_ADDR
// end ;
54303: LD_VAR 0 2
54307: RET
// export function Dec ( value ) ; begin
54308: LD_INT 0
54310: PPUSH
// result := value - 1 ;
54311: LD_ADDR_VAR 0 2
54315: PUSH
54316: LD_VAR 0 1
54320: PUSH
54321: LD_INT 1
54323: MINUS
54324: ST_TO_ADDR
// end ;
54325: LD_VAR 0 2
54329: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
54330: LD_INT 0
54332: PPUSH
54333: PPUSH
54334: PPUSH
54335: PPUSH
54336: PPUSH
54337: PPUSH
54338: PPUSH
54339: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
54340: LD_VAR 0 1
54344: PPUSH
54345: LD_VAR 0 2
54349: PPUSH
54350: CALL_OW 488
54354: NOT
54355: PUSH
54356: LD_VAR 0 3
54360: PPUSH
54361: LD_VAR 0 4
54365: PPUSH
54366: CALL_OW 488
54370: NOT
54371: OR
54372: IFFALSE 54385
// begin result := - 1 ;
54374: LD_ADDR_VAR 0 5
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: ST_TO_ADDR
// exit ;
54383: GO 54620
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
54385: LD_ADDR_VAR 0 12
54389: PUSH
54390: LD_VAR 0 1
54394: PPUSH
54395: LD_VAR 0 2
54399: PPUSH
54400: LD_VAR 0 3
54404: PPUSH
54405: LD_VAR 0 4
54409: PPUSH
54410: CALL 53468 0 4
54414: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
54415: LD_ADDR_VAR 0 11
54419: PUSH
54420: LD_VAR 0 1
54424: PPUSH
54425: LD_VAR 0 2
54429: PPUSH
54430: LD_VAR 0 12
54434: PUSH
54435: LD_INT 1
54437: ARRAY
54438: PPUSH
54439: LD_VAR 0 12
54443: PUSH
54444: LD_INT 2
54446: ARRAY
54447: PPUSH
54448: CALL_OW 298
54452: ST_TO_ADDR
// distance := 9999 ;
54453: LD_ADDR_VAR 0 10
54457: PUSH
54458: LD_INT 9999
54460: ST_TO_ADDR
// for i := 0 to 5 do
54461: LD_ADDR_VAR 0 6
54465: PUSH
54466: DOUBLE
54467: LD_INT 0
54469: DEC
54470: ST_TO_ADDR
54471: LD_INT 5
54473: PUSH
54474: FOR_TO
54475: IFFALSE 54618
// begin _x := ShiftX ( x1 , i , centerDist ) ;
54477: LD_ADDR_VAR 0 7
54481: PUSH
54482: LD_VAR 0 1
54486: PPUSH
54487: LD_VAR 0 6
54491: PPUSH
54492: LD_VAR 0 11
54496: PPUSH
54497: CALL_OW 272
54501: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
54502: LD_ADDR_VAR 0 8
54506: PUSH
54507: LD_VAR 0 2
54511: PPUSH
54512: LD_VAR 0 6
54516: PPUSH
54517: LD_VAR 0 11
54521: PPUSH
54522: CALL_OW 273
54526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54527: LD_VAR 0 7
54531: PPUSH
54532: LD_VAR 0 8
54536: PPUSH
54537: CALL_OW 488
54541: NOT
54542: IFFALSE 54546
// continue ;
54544: GO 54474
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
54546: LD_ADDR_VAR 0 9
54550: PUSH
54551: LD_VAR 0 12
54555: PUSH
54556: LD_INT 1
54558: ARRAY
54559: PPUSH
54560: LD_VAR 0 12
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: LD_VAR 0 7
54573: PPUSH
54574: LD_VAR 0 8
54578: PPUSH
54579: CALL_OW 298
54583: ST_TO_ADDR
// if tmp < distance then
54584: LD_VAR 0 9
54588: PUSH
54589: LD_VAR 0 10
54593: LESS
54594: IFFALSE 54616
// begin result := i ;
54596: LD_ADDR_VAR 0 5
54600: PUSH
54601: LD_VAR 0 6
54605: ST_TO_ADDR
// distance := tmp ;
54606: LD_ADDR_VAR 0 10
54610: PUSH
54611: LD_VAR 0 9
54615: ST_TO_ADDR
// end ; end ;
54616: GO 54474
54618: POP
54619: POP
// end ;
54620: LD_VAR 0 5
54624: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54625: LD_INT 0
54627: PPUSH
54628: PPUSH
// if not driver or not IsInUnit ( driver ) then
54629: LD_VAR 0 1
54633: NOT
54634: PUSH
54635: LD_VAR 0 1
54639: PPUSH
54640: CALL_OW 310
54644: NOT
54645: OR
54646: IFFALSE 54650
// exit ;
54648: GO 54740
// vehicle := IsInUnit ( driver ) ;
54650: LD_ADDR_VAR 0 3
54654: PUSH
54655: LD_VAR 0 1
54659: PPUSH
54660: CALL_OW 310
54664: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54665: LD_VAR 0 1
54669: PPUSH
54670: LD_STRING \
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 0
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 0
54684: PUSH
54685: LD_INT 0
54687: PUSH
54688: LD_INT 0
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: PUSH
54700: LD_STRING E
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_VAR 0 3
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 0
54719: PUSH
54720: LD_INT 0
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PPUSH
54736: CALL_OW 446
// end ;
54740: LD_VAR 0 2
54744: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
54745: LD_INT 0
54747: PPUSH
54748: PPUSH
// if not driver or not IsInUnit ( driver ) then
54749: LD_VAR 0 1
54753: NOT
54754: PUSH
54755: LD_VAR 0 1
54759: PPUSH
54760: CALL_OW 310
54764: NOT
54765: OR
54766: IFFALSE 54770
// exit ;
54768: GO 54860
// vehicle := IsInUnit ( driver ) ;
54770: LD_ADDR_VAR 0 3
54774: PUSH
54775: LD_VAR 0 1
54779: PPUSH
54780: CALL_OW 310
54784: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
54785: LD_VAR 0 1
54789: PPUSH
54790: LD_STRING \
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: PUSH
54820: LD_STRING E
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: LD_INT 0
54828: PUSH
54829: LD_VAR 0 3
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PPUSH
54856: CALL_OW 447
// end ;
54860: LD_VAR 0 2
54864: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
54865: LD_INT 0
54867: PPUSH
54868: PPUSH
54869: PPUSH
// tmp := [ ] ;
54870: LD_ADDR_VAR 0 5
54874: PUSH
54875: EMPTY
54876: ST_TO_ADDR
// for i in units do
54877: LD_ADDR_VAR 0 4
54881: PUSH
54882: LD_VAR 0 1
54886: PUSH
54887: FOR_IN
54888: IFFALSE 54926
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
54890: LD_ADDR_VAR 0 5
54894: PUSH
54895: LD_VAR 0 5
54899: PPUSH
54900: LD_VAR 0 5
54904: PUSH
54905: LD_INT 1
54907: PLUS
54908: PPUSH
54909: LD_VAR 0 4
54913: PPUSH
54914: CALL_OW 256
54918: PPUSH
54919: CALL_OW 2
54923: ST_TO_ADDR
54924: GO 54887
54926: POP
54927: POP
// if not tmp then
54928: LD_VAR 0 5
54932: NOT
54933: IFFALSE 54937
// exit ;
54935: GO 54985
// if asc then
54937: LD_VAR 0 2
54941: IFFALSE 54965
// result := SortListByListAsc ( units , tmp ) else
54943: LD_ADDR_VAR 0 3
54947: PUSH
54948: LD_VAR 0 1
54952: PPUSH
54953: LD_VAR 0 5
54957: PPUSH
54958: CALL_OW 76
54962: ST_TO_ADDR
54963: GO 54985
// result := SortListByListDesc ( units , tmp ) ;
54965: LD_ADDR_VAR 0 3
54969: PUSH
54970: LD_VAR 0 1
54974: PPUSH
54975: LD_VAR 0 5
54979: PPUSH
54980: CALL_OW 77
54984: ST_TO_ADDR
// end ;
54985: LD_VAR 0 3
54989: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
54990: LD_INT 0
54992: PPUSH
54993: PPUSH
// task := GetTaskList ( mech ) ;
54994: LD_ADDR_VAR 0 4
54998: PUSH
54999: LD_VAR 0 1
55003: PPUSH
55004: CALL_OW 437
55008: ST_TO_ADDR
// if not task then
55009: LD_VAR 0 4
55013: NOT
55014: IFFALSE 55018
// exit ;
55016: GO 55060
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55018: LD_ADDR_VAR 0 3
55022: PUSH
55023: LD_VAR 0 4
55027: PUSH
55028: LD_INT 1
55030: ARRAY
55031: PUSH
55032: LD_INT 1
55034: ARRAY
55035: PUSH
55036: LD_STRING r
55038: EQUAL
55039: PUSH
55040: LD_VAR 0 4
55044: PUSH
55045: LD_INT 1
55047: ARRAY
55048: PUSH
55049: LD_INT 4
55051: ARRAY
55052: PUSH
55053: LD_VAR 0 2
55057: EQUAL
55058: AND
55059: ST_TO_ADDR
// end ;
55060: LD_VAR 0 3
55064: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55065: LD_INT 0
55067: PPUSH
// SetDir ( unit , d ) ;
55068: LD_VAR 0 1
55072: PPUSH
55073: LD_VAR 0 4
55077: PPUSH
55078: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55082: LD_VAR 0 1
55086: PPUSH
55087: LD_VAR 0 2
55091: PPUSH
55092: LD_VAR 0 3
55096: PPUSH
55097: LD_VAR 0 5
55101: PPUSH
55102: CALL_OW 48
// end ;
55106: LD_VAR 0 6
55110: RET
// export function ToNaturalNumber ( number ) ; begin
55111: LD_INT 0
55113: PPUSH
// result := number div 1 ;
55114: LD_ADDR_VAR 0 2
55118: PUSH
55119: LD_VAR 0 1
55123: PUSH
55124: LD_INT 1
55126: DIV
55127: ST_TO_ADDR
// if number < 0 then
55128: LD_VAR 0 1
55132: PUSH
55133: LD_INT 0
55135: LESS
55136: IFFALSE 55146
// result := 0 ;
55138: LD_ADDR_VAR 0 2
55142: PUSH
55143: LD_INT 0
55145: ST_TO_ADDR
// end ;
55146: LD_VAR 0 2
55150: RET
// export function SortByClass ( units , class ) ; var un ; begin
55151: LD_INT 0
55153: PPUSH
55154: PPUSH
// if not units or not class then
55155: LD_VAR 0 1
55159: NOT
55160: PUSH
55161: LD_VAR 0 2
55165: NOT
55166: OR
55167: IFFALSE 55171
// exit ;
55169: GO 55266
// result := [ ] ;
55171: LD_ADDR_VAR 0 3
55175: PUSH
55176: EMPTY
55177: ST_TO_ADDR
// for un in units do
55178: LD_ADDR_VAR 0 4
55182: PUSH
55183: LD_VAR 0 1
55187: PUSH
55188: FOR_IN
55189: IFFALSE 55264
// if GetClass ( un ) = class then
55191: LD_VAR 0 4
55195: PPUSH
55196: CALL_OW 257
55200: PUSH
55201: LD_VAR 0 2
55205: EQUAL
55206: IFFALSE 55233
// result := Insert ( result , 1 , un ) else
55208: LD_ADDR_VAR 0 3
55212: PUSH
55213: LD_VAR 0 3
55217: PPUSH
55218: LD_INT 1
55220: PPUSH
55221: LD_VAR 0 4
55225: PPUSH
55226: CALL_OW 2
55230: ST_TO_ADDR
55231: GO 55262
// result := Replace ( result , result + 1 , un ) ;
55233: LD_ADDR_VAR 0 3
55237: PUSH
55238: LD_VAR 0 3
55242: PPUSH
55243: LD_VAR 0 3
55247: PUSH
55248: LD_INT 1
55250: PLUS
55251: PPUSH
55252: LD_VAR 0 4
55256: PPUSH
55257: CALL_OW 1
55261: ST_TO_ADDR
55262: GO 55188
55264: POP
55265: POP
// end ;
55266: LD_VAR 0 3
55270: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55271: LD_INT 0
55273: PPUSH
55274: PPUSH
55275: PPUSH
55276: PPUSH
55277: PPUSH
55278: PPUSH
55279: PPUSH
// result := [ ] ;
55280: LD_ADDR_VAR 0 4
55284: PUSH
55285: EMPTY
55286: ST_TO_ADDR
// if x - r < 0 then
55287: LD_VAR 0 1
55291: PUSH
55292: LD_VAR 0 3
55296: MINUS
55297: PUSH
55298: LD_INT 0
55300: LESS
55301: IFFALSE 55313
// min_x := 0 else
55303: LD_ADDR_VAR 0 8
55307: PUSH
55308: LD_INT 0
55310: ST_TO_ADDR
55311: GO 55329
// min_x := x - r ;
55313: LD_ADDR_VAR 0 8
55317: PUSH
55318: LD_VAR 0 1
55322: PUSH
55323: LD_VAR 0 3
55327: MINUS
55328: ST_TO_ADDR
// if y - r < 0 then
55329: LD_VAR 0 2
55333: PUSH
55334: LD_VAR 0 3
55338: MINUS
55339: PUSH
55340: LD_INT 0
55342: LESS
55343: IFFALSE 55355
// min_y := 0 else
55345: LD_ADDR_VAR 0 7
55349: PUSH
55350: LD_INT 0
55352: ST_TO_ADDR
55353: GO 55371
// min_y := y - r ;
55355: LD_ADDR_VAR 0 7
55359: PUSH
55360: LD_VAR 0 2
55364: PUSH
55365: LD_VAR 0 3
55369: MINUS
55370: ST_TO_ADDR
// max_x := x + r ;
55371: LD_ADDR_VAR 0 9
55375: PUSH
55376: LD_VAR 0 1
55380: PUSH
55381: LD_VAR 0 3
55385: PLUS
55386: ST_TO_ADDR
// max_y := y + r ;
55387: LD_ADDR_VAR 0 10
55391: PUSH
55392: LD_VAR 0 2
55396: PUSH
55397: LD_VAR 0 3
55401: PLUS
55402: ST_TO_ADDR
// for _x = min_x to max_x do
55403: LD_ADDR_VAR 0 5
55407: PUSH
55408: DOUBLE
55409: LD_VAR 0 8
55413: DEC
55414: ST_TO_ADDR
55415: LD_VAR 0 9
55419: PUSH
55420: FOR_TO
55421: IFFALSE 55522
// for _y = min_y to max_y do
55423: LD_ADDR_VAR 0 6
55427: PUSH
55428: DOUBLE
55429: LD_VAR 0 7
55433: DEC
55434: ST_TO_ADDR
55435: LD_VAR 0 10
55439: PUSH
55440: FOR_TO
55441: IFFALSE 55518
// begin if not ValidHex ( _x , _y ) then
55443: LD_VAR 0 5
55447: PPUSH
55448: LD_VAR 0 6
55452: PPUSH
55453: CALL_OW 488
55457: NOT
55458: IFFALSE 55462
// continue ;
55460: GO 55440
// if GetResourceTypeXY ( _x , _y ) then
55462: LD_VAR 0 5
55466: PPUSH
55467: LD_VAR 0 6
55471: PPUSH
55472: CALL_OW 283
55476: IFFALSE 55516
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
55478: LD_ADDR_VAR 0 4
55482: PUSH
55483: LD_VAR 0 4
55487: PPUSH
55488: LD_VAR 0 4
55492: PUSH
55493: LD_INT 1
55495: PLUS
55496: PPUSH
55497: LD_VAR 0 5
55501: PUSH
55502: LD_VAR 0 6
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PPUSH
55511: CALL_OW 1
55515: ST_TO_ADDR
// end ;
55516: GO 55440
55518: POP
55519: POP
55520: GO 55420
55522: POP
55523: POP
// end ;
55524: LD_VAR 0 4
55528: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
55529: LD_INT 0
55531: PPUSH
55532: PPUSH
55533: PPUSH
55534: PPUSH
55535: PPUSH
55536: PPUSH
55537: PPUSH
55538: PPUSH
// if not units then
55539: LD_VAR 0 1
55543: NOT
55544: IFFALSE 55548
// exit ;
55546: GO 55973
// result := UnitFilter ( units , [ f_ok ] ) ;
55548: LD_ADDR_VAR 0 3
55552: PUSH
55553: LD_VAR 0 1
55557: PPUSH
55558: LD_INT 50
55560: PUSH
55561: EMPTY
55562: LIST
55563: PPUSH
55564: CALL_OW 72
55568: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
55569: LD_ADDR_VAR 0 8
55573: PUSH
55574: LD_VAR 0 1
55578: PUSH
55579: LD_INT 1
55581: ARRAY
55582: PPUSH
55583: CALL_OW 255
55587: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
55588: LD_ADDR_VAR 0 10
55592: PUSH
55593: LD_INT 29
55595: PUSH
55596: LD_EXP 111
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: ST_TO_ADDR
// if not result then
55605: LD_VAR 0 3
55609: NOT
55610: IFFALSE 55614
// exit ;
55612: GO 55973
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
55614: LD_ADDR_VAR 0 5
55618: PUSH
55619: LD_INT 81
55621: PUSH
55622: LD_VAR 0 8
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PPUSH
55631: CALL_OW 69
55635: ST_TO_ADDR
// for i in result do
55636: LD_ADDR_VAR 0 4
55640: PUSH
55641: LD_VAR 0 3
55645: PUSH
55646: FOR_IN
55647: IFFALSE 55971
// begin tag := GetTag ( i ) + 1 ;
55649: LD_ADDR_VAR 0 9
55653: PUSH
55654: LD_VAR 0 4
55658: PPUSH
55659: CALL_OW 110
55663: PUSH
55664: LD_INT 1
55666: PLUS
55667: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
55668: LD_ADDR_VAR 0 7
55672: PUSH
55673: LD_VAR 0 4
55677: PPUSH
55678: CALL_OW 250
55682: PPUSH
55683: LD_VAR 0 4
55687: PPUSH
55688: CALL_OW 251
55692: PPUSH
55693: LD_INT 6
55695: PPUSH
55696: CALL 55271 0 3
55700: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
55701: LD_VAR 0 7
55705: PUSH
55706: LD_VAR 0 4
55710: PPUSH
55711: CALL_OW 264
55715: PUSH
55716: LD_VAR 0 10
55720: IN
55721: NOT
55722: AND
55723: IFFALSE 55762
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
55725: LD_VAR 0 4
55729: PPUSH
55730: LD_VAR 0 7
55734: PUSH
55735: LD_INT 1
55737: ARRAY
55738: PUSH
55739: LD_INT 1
55741: ARRAY
55742: PPUSH
55743: LD_VAR 0 7
55747: PUSH
55748: LD_INT 1
55750: ARRAY
55751: PUSH
55752: LD_INT 2
55754: ARRAY
55755: PPUSH
55756: CALL_OW 116
55760: GO 55969
// if path > tag then
55762: LD_VAR 0 2
55766: PUSH
55767: LD_VAR 0 9
55771: GREATER
55772: IFFALSE 55939
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
55774: LD_ADDR_VAR 0 6
55778: PUSH
55779: LD_VAR 0 5
55783: PPUSH
55784: LD_INT 91
55786: PUSH
55787: LD_VAR 0 4
55791: PUSH
55792: LD_INT 12
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: PPUSH
55800: CALL_OW 72
55804: ST_TO_ADDR
// if nearEnemy then
55805: LD_VAR 0 6
55809: IFFALSE 55837
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
55811: LD_VAR 0 4
55815: PPUSH
55816: LD_VAR 0 6
55820: PPUSH
55821: LD_VAR 0 4
55825: PPUSH
55826: CALL_OW 74
55830: PPUSH
55831: CALL_OW 115
55835: GO 55937
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
55837: LD_VAR 0 4
55841: PPUSH
55842: LD_VAR 0 2
55846: PUSH
55847: LD_VAR 0 9
55851: ARRAY
55852: PUSH
55853: LD_INT 1
55855: ARRAY
55856: PPUSH
55857: LD_VAR 0 2
55861: PUSH
55862: LD_VAR 0 9
55866: ARRAY
55867: PUSH
55868: LD_INT 2
55870: ARRAY
55871: PPUSH
55872: CALL_OW 297
55876: PUSH
55877: LD_INT 6
55879: GREATER
55880: IFFALSE 55923
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
55882: LD_VAR 0 4
55886: PPUSH
55887: LD_VAR 0 2
55891: PUSH
55892: LD_VAR 0 9
55896: ARRAY
55897: PUSH
55898: LD_INT 1
55900: ARRAY
55901: PPUSH
55902: LD_VAR 0 2
55906: PUSH
55907: LD_VAR 0 9
55911: ARRAY
55912: PUSH
55913: LD_INT 2
55915: ARRAY
55916: PPUSH
55917: CALL_OW 114
55921: GO 55937
// SetTag ( i , tag ) ;
55923: LD_VAR 0 4
55927: PPUSH
55928: LD_VAR 0 9
55932: PPUSH
55933: CALL_OW 109
// end else
55937: GO 55969
// if enemy then
55939: LD_VAR 0 5
55943: IFFALSE 55969
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
55945: LD_VAR 0 4
55949: PPUSH
55950: LD_VAR 0 5
55954: PPUSH
55955: LD_VAR 0 4
55959: PPUSH
55960: CALL_OW 74
55964: PPUSH
55965: CALL_OW 115
// end ;
55969: GO 55646
55971: POP
55972: POP
// end ;
55973: LD_VAR 0 3
55977: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
55978: LD_INT 0
55980: PPUSH
55981: PPUSH
55982: PPUSH
// if not unit or IsInUnit ( unit ) then
55983: LD_VAR 0 1
55987: NOT
55988: PUSH
55989: LD_VAR 0 1
55993: PPUSH
55994: CALL_OW 310
55998: OR
55999: IFFALSE 56003
// exit ;
56001: GO 56094
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56003: LD_ADDR_VAR 0 4
56007: PUSH
56008: LD_VAR 0 1
56012: PPUSH
56013: CALL_OW 250
56017: PPUSH
56018: LD_VAR 0 2
56022: PPUSH
56023: LD_INT 1
56025: PPUSH
56026: CALL_OW 272
56030: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56031: LD_ADDR_VAR 0 5
56035: PUSH
56036: LD_VAR 0 1
56040: PPUSH
56041: CALL_OW 251
56045: PPUSH
56046: LD_VAR 0 2
56050: PPUSH
56051: LD_INT 1
56053: PPUSH
56054: CALL_OW 273
56058: ST_TO_ADDR
// if ValidHex ( x , y ) then
56059: LD_VAR 0 4
56063: PPUSH
56064: LD_VAR 0 5
56068: PPUSH
56069: CALL_OW 488
56073: IFFALSE 56094
// ComTurnXY ( unit , x , y ) ;
56075: LD_VAR 0 1
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: LD_VAR 0 5
56089: PPUSH
56090: CALL_OW 118
// end ;
56094: LD_VAR 0 3
56098: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56099: LD_INT 0
56101: PPUSH
56102: PPUSH
// result := false ;
56103: LD_ADDR_VAR 0 3
56107: PUSH
56108: LD_INT 0
56110: ST_TO_ADDR
// if not units then
56111: LD_VAR 0 2
56115: NOT
56116: IFFALSE 56120
// exit ;
56118: GO 56165
// for i in units do
56120: LD_ADDR_VAR 0 4
56124: PUSH
56125: LD_VAR 0 2
56129: PUSH
56130: FOR_IN
56131: IFFALSE 56163
// if See ( side , i ) then
56133: LD_VAR 0 1
56137: PPUSH
56138: LD_VAR 0 4
56142: PPUSH
56143: CALL_OW 292
56147: IFFALSE 56161
// begin result := true ;
56149: LD_ADDR_VAR 0 3
56153: PUSH
56154: LD_INT 1
56156: ST_TO_ADDR
// exit ;
56157: POP
56158: POP
56159: GO 56165
// end ;
56161: GO 56130
56163: POP
56164: POP
// end ;
56165: LD_VAR 0 3
56169: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56170: LD_INT 0
56172: PPUSH
56173: PPUSH
56174: PPUSH
56175: PPUSH
// if not unit or not points then
56176: LD_VAR 0 1
56180: NOT
56181: PUSH
56182: LD_VAR 0 2
56186: NOT
56187: OR
56188: IFFALSE 56192
// exit ;
56190: GO 56282
// dist := 99999 ;
56192: LD_ADDR_VAR 0 5
56196: PUSH
56197: LD_INT 99999
56199: ST_TO_ADDR
// for i in points do
56200: LD_ADDR_VAR 0 4
56204: PUSH
56205: LD_VAR 0 2
56209: PUSH
56210: FOR_IN
56211: IFFALSE 56280
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56213: LD_ADDR_VAR 0 6
56217: PUSH
56218: LD_VAR 0 1
56222: PPUSH
56223: LD_VAR 0 4
56227: PUSH
56228: LD_INT 1
56230: ARRAY
56231: PPUSH
56232: LD_VAR 0 4
56236: PUSH
56237: LD_INT 2
56239: ARRAY
56240: PPUSH
56241: CALL_OW 297
56245: ST_TO_ADDR
// if tmpDist < dist then
56246: LD_VAR 0 6
56250: PUSH
56251: LD_VAR 0 5
56255: LESS
56256: IFFALSE 56278
// begin result := i ;
56258: LD_ADDR_VAR 0 3
56262: PUSH
56263: LD_VAR 0 4
56267: ST_TO_ADDR
// dist := tmpDist ;
56268: LD_ADDR_VAR 0 5
56272: PUSH
56273: LD_VAR 0 6
56277: ST_TO_ADDR
// end ; end ;
56278: GO 56210
56280: POP
56281: POP
// end ; end_of_file
56282: LD_VAR 0 3
56286: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
56287: LD_INT 0
56289: PPUSH
// if p2 = 100 then
56290: LD_VAR 0 2
56294: PUSH
56295: LD_INT 100
56297: EQUAL
56298: IFFALSE 57301
// begin if not StreamModeActive then
56300: LD_EXP 49
56304: NOT
56305: IFFALSE 56315
// StreamModeActive := true ;
56307: LD_ADDR_EXP 49
56311: PUSH
56312: LD_INT 1
56314: ST_TO_ADDR
// if p3 = 0 then
56315: LD_VAR 0 3
56319: PUSH
56320: LD_INT 0
56322: EQUAL
56323: IFFALSE 56329
// InitStreamMode ;
56325: CALL 57461 0 0
// if p3 = 1 then
56329: LD_VAR 0 3
56333: PUSH
56334: LD_INT 1
56336: EQUAL
56337: IFFALSE 56347
// sRocket := true ;
56339: LD_ADDR_EXP 54
56343: PUSH
56344: LD_INT 1
56346: ST_TO_ADDR
// if p3 = 2 then
56347: LD_VAR 0 3
56351: PUSH
56352: LD_INT 2
56354: EQUAL
56355: IFFALSE 56365
// sSpeed := true ;
56357: LD_ADDR_EXP 53
56361: PUSH
56362: LD_INT 1
56364: ST_TO_ADDR
// if p3 = 3 then
56365: LD_VAR 0 3
56369: PUSH
56370: LD_INT 3
56372: EQUAL
56373: IFFALSE 56383
// sEngine := true ;
56375: LD_ADDR_EXP 55
56379: PUSH
56380: LD_INT 1
56382: ST_TO_ADDR
// if p3 = 4 then
56383: LD_VAR 0 3
56387: PUSH
56388: LD_INT 4
56390: EQUAL
56391: IFFALSE 56401
// sSpec := true ;
56393: LD_ADDR_EXP 52
56397: PUSH
56398: LD_INT 1
56400: ST_TO_ADDR
// if p3 = 5 then
56401: LD_VAR 0 3
56405: PUSH
56406: LD_INT 5
56408: EQUAL
56409: IFFALSE 56419
// sLevel := true ;
56411: LD_ADDR_EXP 56
56415: PUSH
56416: LD_INT 1
56418: ST_TO_ADDR
// if p3 = 6 then
56419: LD_VAR 0 3
56423: PUSH
56424: LD_INT 6
56426: EQUAL
56427: IFFALSE 56437
// sArmoury := true ;
56429: LD_ADDR_EXP 57
56433: PUSH
56434: LD_INT 1
56436: ST_TO_ADDR
// if p3 = 7 then
56437: LD_VAR 0 3
56441: PUSH
56442: LD_INT 7
56444: EQUAL
56445: IFFALSE 56455
// sRadar := true ;
56447: LD_ADDR_EXP 58
56451: PUSH
56452: LD_INT 1
56454: ST_TO_ADDR
// if p3 = 8 then
56455: LD_VAR 0 3
56459: PUSH
56460: LD_INT 8
56462: EQUAL
56463: IFFALSE 56473
// sBunker := true ;
56465: LD_ADDR_EXP 59
56469: PUSH
56470: LD_INT 1
56472: ST_TO_ADDR
// if p3 = 9 then
56473: LD_VAR 0 3
56477: PUSH
56478: LD_INT 9
56480: EQUAL
56481: IFFALSE 56491
// sHack := true ;
56483: LD_ADDR_EXP 60
56487: PUSH
56488: LD_INT 1
56490: ST_TO_ADDR
// if p3 = 10 then
56491: LD_VAR 0 3
56495: PUSH
56496: LD_INT 10
56498: EQUAL
56499: IFFALSE 56509
// sFire := true ;
56501: LD_ADDR_EXP 61
56505: PUSH
56506: LD_INT 1
56508: ST_TO_ADDR
// if p3 = 11 then
56509: LD_VAR 0 3
56513: PUSH
56514: LD_INT 11
56516: EQUAL
56517: IFFALSE 56527
// sRefresh := true ;
56519: LD_ADDR_EXP 62
56523: PUSH
56524: LD_INT 1
56526: ST_TO_ADDR
// if p3 = 12 then
56527: LD_VAR 0 3
56531: PUSH
56532: LD_INT 12
56534: EQUAL
56535: IFFALSE 56545
// sExp := true ;
56537: LD_ADDR_EXP 63
56541: PUSH
56542: LD_INT 1
56544: ST_TO_ADDR
// if p3 = 13 then
56545: LD_VAR 0 3
56549: PUSH
56550: LD_INT 13
56552: EQUAL
56553: IFFALSE 56563
// sDepot := true ;
56555: LD_ADDR_EXP 64
56559: PUSH
56560: LD_INT 1
56562: ST_TO_ADDR
// if p3 = 14 then
56563: LD_VAR 0 3
56567: PUSH
56568: LD_INT 14
56570: EQUAL
56571: IFFALSE 56581
// sFlag := true ;
56573: LD_ADDR_EXP 65
56577: PUSH
56578: LD_INT 1
56580: ST_TO_ADDR
// if p3 = 15 then
56581: LD_VAR 0 3
56585: PUSH
56586: LD_INT 15
56588: EQUAL
56589: IFFALSE 56599
// sKamikadze := true ;
56591: LD_ADDR_EXP 73
56595: PUSH
56596: LD_INT 1
56598: ST_TO_ADDR
// if p3 = 16 then
56599: LD_VAR 0 3
56603: PUSH
56604: LD_INT 16
56606: EQUAL
56607: IFFALSE 56617
// sTroll := true ;
56609: LD_ADDR_EXP 74
56613: PUSH
56614: LD_INT 1
56616: ST_TO_ADDR
// if p3 = 17 then
56617: LD_VAR 0 3
56621: PUSH
56622: LD_INT 17
56624: EQUAL
56625: IFFALSE 56635
// sSlow := true ;
56627: LD_ADDR_EXP 75
56631: PUSH
56632: LD_INT 1
56634: ST_TO_ADDR
// if p3 = 18 then
56635: LD_VAR 0 3
56639: PUSH
56640: LD_INT 18
56642: EQUAL
56643: IFFALSE 56653
// sLack := true ;
56645: LD_ADDR_EXP 76
56649: PUSH
56650: LD_INT 1
56652: ST_TO_ADDR
// if p3 = 19 then
56653: LD_VAR 0 3
56657: PUSH
56658: LD_INT 19
56660: EQUAL
56661: IFFALSE 56671
// sTank := true ;
56663: LD_ADDR_EXP 78
56667: PUSH
56668: LD_INT 1
56670: ST_TO_ADDR
// if p3 = 20 then
56671: LD_VAR 0 3
56675: PUSH
56676: LD_INT 20
56678: EQUAL
56679: IFFALSE 56689
// sRemote := true ;
56681: LD_ADDR_EXP 79
56685: PUSH
56686: LD_INT 1
56688: ST_TO_ADDR
// if p3 = 21 then
56689: LD_VAR 0 3
56693: PUSH
56694: LD_INT 21
56696: EQUAL
56697: IFFALSE 56707
// sPowell := true ;
56699: LD_ADDR_EXP 80
56703: PUSH
56704: LD_INT 1
56706: ST_TO_ADDR
// if p3 = 22 then
56707: LD_VAR 0 3
56711: PUSH
56712: LD_INT 22
56714: EQUAL
56715: IFFALSE 56725
// sTeleport := true ;
56717: LD_ADDR_EXP 83
56721: PUSH
56722: LD_INT 1
56724: ST_TO_ADDR
// if p3 = 23 then
56725: LD_VAR 0 3
56729: PUSH
56730: LD_INT 23
56732: EQUAL
56733: IFFALSE 56743
// sOilTower := true ;
56735: LD_ADDR_EXP 85
56739: PUSH
56740: LD_INT 1
56742: ST_TO_ADDR
// if p3 = 24 then
56743: LD_VAR 0 3
56747: PUSH
56748: LD_INT 24
56750: EQUAL
56751: IFFALSE 56761
// sShovel := true ;
56753: LD_ADDR_EXP 86
56757: PUSH
56758: LD_INT 1
56760: ST_TO_ADDR
// if p3 = 25 then
56761: LD_VAR 0 3
56765: PUSH
56766: LD_INT 25
56768: EQUAL
56769: IFFALSE 56779
// sSheik := true ;
56771: LD_ADDR_EXP 87
56775: PUSH
56776: LD_INT 1
56778: ST_TO_ADDR
// if p3 = 26 then
56779: LD_VAR 0 3
56783: PUSH
56784: LD_INT 26
56786: EQUAL
56787: IFFALSE 56797
// sEarthquake := true ;
56789: LD_ADDR_EXP 89
56793: PUSH
56794: LD_INT 1
56796: ST_TO_ADDR
// if p3 = 27 then
56797: LD_VAR 0 3
56801: PUSH
56802: LD_INT 27
56804: EQUAL
56805: IFFALSE 56815
// sAI := true ;
56807: LD_ADDR_EXP 90
56811: PUSH
56812: LD_INT 1
56814: ST_TO_ADDR
// if p3 = 28 then
56815: LD_VAR 0 3
56819: PUSH
56820: LD_INT 28
56822: EQUAL
56823: IFFALSE 56833
// sCargo := true ;
56825: LD_ADDR_EXP 93
56829: PUSH
56830: LD_INT 1
56832: ST_TO_ADDR
// if p3 = 29 then
56833: LD_VAR 0 3
56837: PUSH
56838: LD_INT 29
56840: EQUAL
56841: IFFALSE 56851
// sDLaser := true ;
56843: LD_ADDR_EXP 94
56847: PUSH
56848: LD_INT 1
56850: ST_TO_ADDR
// if p3 = 30 then
56851: LD_VAR 0 3
56855: PUSH
56856: LD_INT 30
56858: EQUAL
56859: IFFALSE 56869
// sExchange := true ;
56861: LD_ADDR_EXP 95
56865: PUSH
56866: LD_INT 1
56868: ST_TO_ADDR
// if p3 = 31 then
56869: LD_VAR 0 3
56873: PUSH
56874: LD_INT 31
56876: EQUAL
56877: IFFALSE 56887
// sFac := true ;
56879: LD_ADDR_EXP 96
56883: PUSH
56884: LD_INT 1
56886: ST_TO_ADDR
// if p3 = 32 then
56887: LD_VAR 0 3
56891: PUSH
56892: LD_INT 32
56894: EQUAL
56895: IFFALSE 56905
// sPower := true ;
56897: LD_ADDR_EXP 97
56901: PUSH
56902: LD_INT 1
56904: ST_TO_ADDR
// if p3 = 33 then
56905: LD_VAR 0 3
56909: PUSH
56910: LD_INT 33
56912: EQUAL
56913: IFFALSE 56923
// sRandom := true ;
56915: LD_ADDR_EXP 98
56919: PUSH
56920: LD_INT 1
56922: ST_TO_ADDR
// if p3 = 34 then
56923: LD_VAR 0 3
56927: PUSH
56928: LD_INT 34
56930: EQUAL
56931: IFFALSE 56941
// sShield := true ;
56933: LD_ADDR_EXP 99
56937: PUSH
56938: LD_INT 1
56940: ST_TO_ADDR
// if p3 = 35 then
56941: LD_VAR 0 3
56945: PUSH
56946: LD_INT 35
56948: EQUAL
56949: IFFALSE 56959
// sTime := true ;
56951: LD_ADDR_EXP 100
56955: PUSH
56956: LD_INT 1
56958: ST_TO_ADDR
// if p3 = 36 then
56959: LD_VAR 0 3
56963: PUSH
56964: LD_INT 36
56966: EQUAL
56967: IFFALSE 56977
// sTools := true ;
56969: LD_ADDR_EXP 101
56973: PUSH
56974: LD_INT 1
56976: ST_TO_ADDR
// if p3 = 101 then
56977: LD_VAR 0 3
56981: PUSH
56982: LD_INT 101
56984: EQUAL
56985: IFFALSE 56995
// sSold := true ;
56987: LD_ADDR_EXP 66
56991: PUSH
56992: LD_INT 1
56994: ST_TO_ADDR
// if p3 = 102 then
56995: LD_VAR 0 3
56999: PUSH
57000: LD_INT 102
57002: EQUAL
57003: IFFALSE 57013
// sDiff := true ;
57005: LD_ADDR_EXP 67
57009: PUSH
57010: LD_INT 1
57012: ST_TO_ADDR
// if p3 = 103 then
57013: LD_VAR 0 3
57017: PUSH
57018: LD_INT 103
57020: EQUAL
57021: IFFALSE 57031
// sFog := true ;
57023: LD_ADDR_EXP 70
57027: PUSH
57028: LD_INT 1
57030: ST_TO_ADDR
// if p3 = 104 then
57031: LD_VAR 0 3
57035: PUSH
57036: LD_INT 104
57038: EQUAL
57039: IFFALSE 57049
// sReset := true ;
57041: LD_ADDR_EXP 71
57045: PUSH
57046: LD_INT 1
57048: ST_TO_ADDR
// if p3 = 105 then
57049: LD_VAR 0 3
57053: PUSH
57054: LD_INT 105
57056: EQUAL
57057: IFFALSE 57067
// sSun := true ;
57059: LD_ADDR_EXP 72
57063: PUSH
57064: LD_INT 1
57066: ST_TO_ADDR
// if p3 = 106 then
57067: LD_VAR 0 3
57071: PUSH
57072: LD_INT 106
57074: EQUAL
57075: IFFALSE 57085
// sTiger := true ;
57077: LD_ADDR_EXP 68
57081: PUSH
57082: LD_INT 1
57084: ST_TO_ADDR
// if p3 = 107 then
57085: LD_VAR 0 3
57089: PUSH
57090: LD_INT 107
57092: EQUAL
57093: IFFALSE 57103
// sBomb := true ;
57095: LD_ADDR_EXP 69
57099: PUSH
57100: LD_INT 1
57102: ST_TO_ADDR
// if p3 = 108 then
57103: LD_VAR 0 3
57107: PUSH
57108: LD_INT 108
57110: EQUAL
57111: IFFALSE 57121
// sWound := true ;
57113: LD_ADDR_EXP 77
57117: PUSH
57118: LD_INT 1
57120: ST_TO_ADDR
// if p3 = 109 then
57121: LD_VAR 0 3
57125: PUSH
57126: LD_INT 109
57128: EQUAL
57129: IFFALSE 57139
// sBetray := true ;
57131: LD_ADDR_EXP 81
57135: PUSH
57136: LD_INT 1
57138: ST_TO_ADDR
// if p3 = 110 then
57139: LD_VAR 0 3
57143: PUSH
57144: LD_INT 110
57146: EQUAL
57147: IFFALSE 57157
// sContamin := true ;
57149: LD_ADDR_EXP 82
57153: PUSH
57154: LD_INT 1
57156: ST_TO_ADDR
// if p3 = 111 then
57157: LD_VAR 0 3
57161: PUSH
57162: LD_INT 111
57164: EQUAL
57165: IFFALSE 57175
// sOil := true ;
57167: LD_ADDR_EXP 84
57171: PUSH
57172: LD_INT 1
57174: ST_TO_ADDR
// if p3 = 112 then
57175: LD_VAR 0 3
57179: PUSH
57180: LD_INT 112
57182: EQUAL
57183: IFFALSE 57193
// sStu := true ;
57185: LD_ADDR_EXP 88
57189: PUSH
57190: LD_INT 1
57192: ST_TO_ADDR
// if p3 = 113 then
57193: LD_VAR 0 3
57197: PUSH
57198: LD_INT 113
57200: EQUAL
57201: IFFALSE 57211
// sBazooka := true ;
57203: LD_ADDR_EXP 91
57207: PUSH
57208: LD_INT 1
57210: ST_TO_ADDR
// if p3 = 114 then
57211: LD_VAR 0 3
57215: PUSH
57216: LD_INT 114
57218: EQUAL
57219: IFFALSE 57229
// sMortar := true ;
57221: LD_ADDR_EXP 92
57225: PUSH
57226: LD_INT 1
57228: ST_TO_ADDR
// if p3 = 115 then
57229: LD_VAR 0 3
57233: PUSH
57234: LD_INT 115
57236: EQUAL
57237: IFFALSE 57247
// sRanger := true ;
57239: LD_ADDR_EXP 102
57243: PUSH
57244: LD_INT 1
57246: ST_TO_ADDR
// if p3 = 116 then
57247: LD_VAR 0 3
57251: PUSH
57252: LD_INT 116
57254: EQUAL
57255: IFFALSE 57265
// sComputer := true ;
57257: LD_ADDR_EXP 103
57261: PUSH
57262: LD_INT 1
57264: ST_TO_ADDR
// if p3 = 117 then
57265: LD_VAR 0 3
57269: PUSH
57270: LD_INT 117
57272: EQUAL
57273: IFFALSE 57283
// s30 := true ;
57275: LD_ADDR_EXP 104
57279: PUSH
57280: LD_INT 1
57282: ST_TO_ADDR
// if p3 = 118 then
57283: LD_VAR 0 3
57287: PUSH
57288: LD_INT 118
57290: EQUAL
57291: IFFALSE 57301
// s60 := true ;
57293: LD_ADDR_EXP 105
57297: PUSH
57298: LD_INT 1
57300: ST_TO_ADDR
// end ; if p2 = 101 then
57301: LD_VAR 0 2
57305: PUSH
57306: LD_INT 101
57308: EQUAL
57309: IFFALSE 57437
// begin case p3 of 1 :
57311: LD_VAR 0 3
57315: PUSH
57316: LD_INT 1
57318: DOUBLE
57319: EQUAL
57320: IFTRUE 57324
57322: GO 57331
57324: POP
// hHackUnlimitedResources ; 2 :
57325: CALL 69033 0 0
57329: GO 57437
57331: LD_INT 2
57333: DOUBLE
57334: EQUAL
57335: IFTRUE 57339
57337: GO 57346
57339: POP
// hHackSetLevel10 ; 3 :
57340: CALL 69166 0 0
57344: GO 57437
57346: LD_INT 3
57348: DOUBLE
57349: EQUAL
57350: IFTRUE 57354
57352: GO 57361
57354: POP
// hHackSetLevel10YourUnits ; 4 :
57355: CALL 69251 0 0
57359: GO 57437
57361: LD_INT 4
57363: DOUBLE
57364: EQUAL
57365: IFTRUE 57369
57367: GO 57376
57369: POP
// hHackInvincible ; 5 :
57370: CALL 69699 0 0
57374: GO 57437
57376: LD_INT 5
57378: DOUBLE
57379: EQUAL
57380: IFTRUE 57384
57382: GO 57391
57384: POP
// hHackInvisible ; 6 :
57385: CALL 69810 0 0
57389: GO 57437
57391: LD_INT 6
57393: DOUBLE
57394: EQUAL
57395: IFTRUE 57399
57397: GO 57406
57399: POP
// hHackChangeYourSide ; 7 :
57400: CALL 69867 0 0
57404: GO 57437
57406: LD_INT 7
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57414
57412: GO 57421
57414: POP
// hHackChangeUnitSide ; 8 :
57415: CALL 69909 0 0
57419: GO 57437
57421: LD_INT 8
57423: DOUBLE
57424: EQUAL
57425: IFTRUE 57429
57427: GO 57436
57429: POP
// hHackFog ; end ;
57430: CALL 70010 0 0
57434: GO 57437
57436: POP
// end ; end ;
57437: LD_VAR 0 7
57441: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
57442: GO 57444
57444: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
57445: LD_STRING initStreamRollete();
57447: PPUSH
57448: CALL_OW 559
// InitStreamMode ;
57452: CALL 57461 0 0
// DefineStreamItems ( ) ;
57456: CALL 57925 0 0
// end ;
57460: END
// function InitStreamMode ; begin
57461: LD_INT 0
57463: PPUSH
// streamModeActive := false ;
57464: LD_ADDR_EXP 49
57468: PUSH
57469: LD_INT 0
57471: ST_TO_ADDR
// normalCounter := 36 ;
57472: LD_ADDR_EXP 50
57476: PUSH
57477: LD_INT 36
57479: ST_TO_ADDR
// hardcoreCounter := 16 ;
57480: LD_ADDR_EXP 51
57484: PUSH
57485: LD_INT 16
57487: ST_TO_ADDR
// sRocket := false ;
57488: LD_ADDR_EXP 54
57492: PUSH
57493: LD_INT 0
57495: ST_TO_ADDR
// sSpeed := false ;
57496: LD_ADDR_EXP 53
57500: PUSH
57501: LD_INT 0
57503: ST_TO_ADDR
// sEngine := false ;
57504: LD_ADDR_EXP 55
57508: PUSH
57509: LD_INT 0
57511: ST_TO_ADDR
// sSpec := false ;
57512: LD_ADDR_EXP 52
57516: PUSH
57517: LD_INT 0
57519: ST_TO_ADDR
// sLevel := false ;
57520: LD_ADDR_EXP 56
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
// sArmoury := false ;
57528: LD_ADDR_EXP 57
57532: PUSH
57533: LD_INT 0
57535: ST_TO_ADDR
// sRadar := false ;
57536: LD_ADDR_EXP 58
57540: PUSH
57541: LD_INT 0
57543: ST_TO_ADDR
// sBunker := false ;
57544: LD_ADDR_EXP 59
57548: PUSH
57549: LD_INT 0
57551: ST_TO_ADDR
// sHack := false ;
57552: LD_ADDR_EXP 60
57556: PUSH
57557: LD_INT 0
57559: ST_TO_ADDR
// sFire := false ;
57560: LD_ADDR_EXP 61
57564: PUSH
57565: LD_INT 0
57567: ST_TO_ADDR
// sRefresh := false ;
57568: LD_ADDR_EXP 62
57572: PUSH
57573: LD_INT 0
57575: ST_TO_ADDR
// sExp := false ;
57576: LD_ADDR_EXP 63
57580: PUSH
57581: LD_INT 0
57583: ST_TO_ADDR
// sDepot := false ;
57584: LD_ADDR_EXP 64
57588: PUSH
57589: LD_INT 0
57591: ST_TO_ADDR
// sFlag := false ;
57592: LD_ADDR_EXP 65
57596: PUSH
57597: LD_INT 0
57599: ST_TO_ADDR
// sKamikadze := false ;
57600: LD_ADDR_EXP 73
57604: PUSH
57605: LD_INT 0
57607: ST_TO_ADDR
// sTroll := false ;
57608: LD_ADDR_EXP 74
57612: PUSH
57613: LD_INT 0
57615: ST_TO_ADDR
// sSlow := false ;
57616: LD_ADDR_EXP 75
57620: PUSH
57621: LD_INT 0
57623: ST_TO_ADDR
// sLack := false ;
57624: LD_ADDR_EXP 76
57628: PUSH
57629: LD_INT 0
57631: ST_TO_ADDR
// sTank := false ;
57632: LD_ADDR_EXP 78
57636: PUSH
57637: LD_INT 0
57639: ST_TO_ADDR
// sRemote := false ;
57640: LD_ADDR_EXP 79
57644: PUSH
57645: LD_INT 0
57647: ST_TO_ADDR
// sPowell := false ;
57648: LD_ADDR_EXP 80
57652: PUSH
57653: LD_INT 0
57655: ST_TO_ADDR
// sTeleport := false ;
57656: LD_ADDR_EXP 83
57660: PUSH
57661: LD_INT 0
57663: ST_TO_ADDR
// sOilTower := false ;
57664: LD_ADDR_EXP 85
57668: PUSH
57669: LD_INT 0
57671: ST_TO_ADDR
// sShovel := false ;
57672: LD_ADDR_EXP 86
57676: PUSH
57677: LD_INT 0
57679: ST_TO_ADDR
// sSheik := false ;
57680: LD_ADDR_EXP 87
57684: PUSH
57685: LD_INT 0
57687: ST_TO_ADDR
// sEarthquake := false ;
57688: LD_ADDR_EXP 89
57692: PUSH
57693: LD_INT 0
57695: ST_TO_ADDR
// sAI := false ;
57696: LD_ADDR_EXP 90
57700: PUSH
57701: LD_INT 0
57703: ST_TO_ADDR
// sCargo := false ;
57704: LD_ADDR_EXP 93
57708: PUSH
57709: LD_INT 0
57711: ST_TO_ADDR
// sDLaser := false ;
57712: LD_ADDR_EXP 94
57716: PUSH
57717: LD_INT 0
57719: ST_TO_ADDR
// sExchange := false ;
57720: LD_ADDR_EXP 95
57724: PUSH
57725: LD_INT 0
57727: ST_TO_ADDR
// sFac := false ;
57728: LD_ADDR_EXP 96
57732: PUSH
57733: LD_INT 0
57735: ST_TO_ADDR
// sPower := false ;
57736: LD_ADDR_EXP 97
57740: PUSH
57741: LD_INT 0
57743: ST_TO_ADDR
// sRandom := false ;
57744: LD_ADDR_EXP 98
57748: PUSH
57749: LD_INT 0
57751: ST_TO_ADDR
// sShield := false ;
57752: LD_ADDR_EXP 99
57756: PUSH
57757: LD_INT 0
57759: ST_TO_ADDR
// sTime := false ;
57760: LD_ADDR_EXP 100
57764: PUSH
57765: LD_INT 0
57767: ST_TO_ADDR
// sTools := false ;
57768: LD_ADDR_EXP 101
57772: PUSH
57773: LD_INT 0
57775: ST_TO_ADDR
// sSold := false ;
57776: LD_ADDR_EXP 66
57780: PUSH
57781: LD_INT 0
57783: ST_TO_ADDR
// sDiff := false ;
57784: LD_ADDR_EXP 67
57788: PUSH
57789: LD_INT 0
57791: ST_TO_ADDR
// sFog := false ;
57792: LD_ADDR_EXP 70
57796: PUSH
57797: LD_INT 0
57799: ST_TO_ADDR
// sReset := false ;
57800: LD_ADDR_EXP 71
57804: PUSH
57805: LD_INT 0
57807: ST_TO_ADDR
// sSun := false ;
57808: LD_ADDR_EXP 72
57812: PUSH
57813: LD_INT 0
57815: ST_TO_ADDR
// sTiger := false ;
57816: LD_ADDR_EXP 68
57820: PUSH
57821: LD_INT 0
57823: ST_TO_ADDR
// sBomb := false ;
57824: LD_ADDR_EXP 69
57828: PUSH
57829: LD_INT 0
57831: ST_TO_ADDR
// sWound := false ;
57832: LD_ADDR_EXP 77
57836: PUSH
57837: LD_INT 0
57839: ST_TO_ADDR
// sBetray := false ;
57840: LD_ADDR_EXP 81
57844: PUSH
57845: LD_INT 0
57847: ST_TO_ADDR
// sContamin := false ;
57848: LD_ADDR_EXP 82
57852: PUSH
57853: LD_INT 0
57855: ST_TO_ADDR
// sOil := false ;
57856: LD_ADDR_EXP 84
57860: PUSH
57861: LD_INT 0
57863: ST_TO_ADDR
// sStu := false ;
57864: LD_ADDR_EXP 88
57868: PUSH
57869: LD_INT 0
57871: ST_TO_ADDR
// sBazooka := false ;
57872: LD_ADDR_EXP 91
57876: PUSH
57877: LD_INT 0
57879: ST_TO_ADDR
// sMortar := false ;
57880: LD_ADDR_EXP 92
57884: PUSH
57885: LD_INT 0
57887: ST_TO_ADDR
// sRanger := false ;
57888: LD_ADDR_EXP 102
57892: PUSH
57893: LD_INT 0
57895: ST_TO_ADDR
// sComputer := false ;
57896: LD_ADDR_EXP 103
57900: PUSH
57901: LD_INT 0
57903: ST_TO_ADDR
// s30 := false ;
57904: LD_ADDR_EXP 104
57908: PUSH
57909: LD_INT 0
57911: ST_TO_ADDR
// s60 := false ;
57912: LD_ADDR_EXP 105
57916: PUSH
57917: LD_INT 0
57919: ST_TO_ADDR
// end ;
57920: LD_VAR 0 1
57924: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
57925: LD_INT 0
57927: PPUSH
57928: PPUSH
57929: PPUSH
57930: PPUSH
57931: PPUSH
// result := [ ] ;
57932: LD_ADDR_VAR 0 1
57936: PUSH
57937: EMPTY
57938: ST_TO_ADDR
// if campaign_id = 1 then
57939: LD_OWVAR 69
57943: PUSH
57944: LD_INT 1
57946: EQUAL
57947: IFFALSE 61113
// begin case mission_number of 1 :
57949: LD_OWVAR 70
57953: PUSH
57954: LD_INT 1
57956: DOUBLE
57957: EQUAL
57958: IFTRUE 57962
57960: GO 58038
57962: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
57963: LD_ADDR_VAR 0 1
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 4
57973: PUSH
57974: LD_INT 11
57976: PUSH
57977: LD_INT 12
57979: PUSH
57980: LD_INT 15
57982: PUSH
57983: LD_INT 16
57985: PUSH
57986: LD_INT 22
57988: PUSH
57989: LD_INT 23
57991: PUSH
57992: LD_INT 26
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 101
58008: PUSH
58009: LD_INT 102
58011: PUSH
58012: LD_INT 106
58014: PUSH
58015: LD_INT 116
58017: PUSH
58018: LD_INT 117
58020: PUSH
58021: LD_INT 118
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: ST_TO_ADDR
58036: GO 61111
58038: LD_INT 2
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58046
58044: GO 58130
58046: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
58047: LD_ADDR_VAR 0 1
58051: PUSH
58052: LD_INT 2
58054: PUSH
58055: LD_INT 4
58057: PUSH
58058: LD_INT 11
58060: PUSH
58061: LD_INT 12
58063: PUSH
58064: LD_INT 15
58066: PUSH
58067: LD_INT 16
58069: PUSH
58070: LD_INT 22
58072: PUSH
58073: LD_INT 23
58075: PUSH
58076: LD_INT 26
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 101
58092: PUSH
58093: LD_INT 102
58095: PUSH
58096: LD_INT 105
58098: PUSH
58099: LD_INT 106
58101: PUSH
58102: LD_INT 108
58104: PUSH
58105: LD_INT 116
58107: PUSH
58108: LD_INT 117
58110: PUSH
58111: LD_INT 118
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: ST_TO_ADDR
58128: GO 61111
58130: LD_INT 3
58132: DOUBLE
58133: EQUAL
58134: IFTRUE 58138
58136: GO 58226
58138: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
58139: LD_ADDR_VAR 0 1
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: LD_INT 4
58149: PUSH
58150: LD_INT 5
58152: PUSH
58153: LD_INT 11
58155: PUSH
58156: LD_INT 12
58158: PUSH
58159: LD_INT 15
58161: PUSH
58162: LD_INT 16
58164: PUSH
58165: LD_INT 22
58167: PUSH
58168: LD_INT 26
58170: PUSH
58171: LD_INT 36
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 101
58188: PUSH
58189: LD_INT 102
58191: PUSH
58192: LD_INT 105
58194: PUSH
58195: LD_INT 106
58197: PUSH
58198: LD_INT 108
58200: PUSH
58201: LD_INT 116
58203: PUSH
58204: LD_INT 117
58206: PUSH
58207: LD_INT 118
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: ST_TO_ADDR
58224: GO 61111
58226: LD_INT 4
58228: DOUBLE
58229: EQUAL
58230: IFTRUE 58234
58232: GO 58330
58234: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
58235: LD_ADDR_VAR 0 1
58239: PUSH
58240: LD_INT 2
58242: PUSH
58243: LD_INT 4
58245: PUSH
58246: LD_INT 5
58248: PUSH
58249: LD_INT 8
58251: PUSH
58252: LD_INT 11
58254: PUSH
58255: LD_INT 12
58257: PUSH
58258: LD_INT 15
58260: PUSH
58261: LD_INT 16
58263: PUSH
58264: LD_INT 22
58266: PUSH
58267: LD_INT 23
58269: PUSH
58270: LD_INT 26
58272: PUSH
58273: LD_INT 36
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 101
58292: PUSH
58293: LD_INT 102
58295: PUSH
58296: LD_INT 105
58298: PUSH
58299: LD_INT 106
58301: PUSH
58302: LD_INT 108
58304: PUSH
58305: LD_INT 116
58307: PUSH
58308: LD_INT 117
58310: PUSH
58311: LD_INT 118
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: ST_TO_ADDR
58328: GO 61111
58330: LD_INT 5
58332: DOUBLE
58333: EQUAL
58334: IFTRUE 58338
58336: GO 58450
58338: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
58339: LD_ADDR_VAR 0 1
58343: PUSH
58344: LD_INT 2
58346: PUSH
58347: LD_INT 4
58349: PUSH
58350: LD_INT 5
58352: PUSH
58353: LD_INT 6
58355: PUSH
58356: LD_INT 8
58358: PUSH
58359: LD_INT 11
58361: PUSH
58362: LD_INT 12
58364: PUSH
58365: LD_INT 15
58367: PUSH
58368: LD_INT 16
58370: PUSH
58371: LD_INT 22
58373: PUSH
58374: LD_INT 23
58376: PUSH
58377: LD_INT 25
58379: PUSH
58380: LD_INT 26
58382: PUSH
58383: LD_INT 36
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 101
58404: PUSH
58405: LD_INT 102
58407: PUSH
58408: LD_INT 105
58410: PUSH
58411: LD_INT 106
58413: PUSH
58414: LD_INT 108
58416: PUSH
58417: LD_INT 109
58419: PUSH
58420: LD_INT 112
58422: PUSH
58423: LD_INT 116
58425: PUSH
58426: LD_INT 117
58428: PUSH
58429: LD_INT 118
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: ST_TO_ADDR
58448: GO 61111
58450: LD_INT 6
58452: DOUBLE
58453: EQUAL
58454: IFTRUE 58458
58456: GO 58590
58458: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
58459: LD_ADDR_VAR 0 1
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 4
58469: PUSH
58470: LD_INT 5
58472: PUSH
58473: LD_INT 6
58475: PUSH
58476: LD_INT 8
58478: PUSH
58479: LD_INT 11
58481: PUSH
58482: LD_INT 12
58484: PUSH
58485: LD_INT 15
58487: PUSH
58488: LD_INT 16
58490: PUSH
58491: LD_INT 20
58493: PUSH
58494: LD_INT 21
58496: PUSH
58497: LD_INT 22
58499: PUSH
58500: LD_INT 23
58502: PUSH
58503: LD_INT 25
58505: PUSH
58506: LD_INT 26
58508: PUSH
58509: LD_INT 30
58511: PUSH
58512: LD_INT 31
58514: PUSH
58515: LD_INT 32
58517: PUSH
58518: LD_INT 36
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 101
58544: PUSH
58545: LD_INT 102
58547: PUSH
58548: LD_INT 105
58550: PUSH
58551: LD_INT 106
58553: PUSH
58554: LD_INT 108
58556: PUSH
58557: LD_INT 109
58559: PUSH
58560: LD_INT 112
58562: PUSH
58563: LD_INT 116
58565: PUSH
58566: LD_INT 117
58568: PUSH
58569: LD_INT 118
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: LIST
58582: LIST
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: ST_TO_ADDR
58588: GO 61111
58590: LD_INT 7
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58598
58596: GO 58710
58598: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
58599: LD_ADDR_VAR 0 1
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 4
58609: PUSH
58610: LD_INT 5
58612: PUSH
58613: LD_INT 7
58615: PUSH
58616: LD_INT 11
58618: PUSH
58619: LD_INT 12
58621: PUSH
58622: LD_INT 15
58624: PUSH
58625: LD_INT 16
58627: PUSH
58628: LD_INT 20
58630: PUSH
58631: LD_INT 21
58633: PUSH
58634: LD_INT 22
58636: PUSH
58637: LD_INT 23
58639: PUSH
58640: LD_INT 25
58642: PUSH
58643: LD_INT 26
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 101
58664: PUSH
58665: LD_INT 102
58667: PUSH
58668: LD_INT 103
58670: PUSH
58671: LD_INT 105
58673: PUSH
58674: LD_INT 106
58676: PUSH
58677: LD_INT 108
58679: PUSH
58680: LD_INT 112
58682: PUSH
58683: LD_INT 116
58685: PUSH
58686: LD_INT 117
58688: PUSH
58689: LD_INT 118
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: ST_TO_ADDR
58708: GO 61111
58710: LD_INT 8
58712: DOUBLE
58713: EQUAL
58714: IFTRUE 58718
58716: GO 58858
58718: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
58719: LD_ADDR_VAR 0 1
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 4
58729: PUSH
58730: LD_INT 5
58732: PUSH
58733: LD_INT 6
58735: PUSH
58736: LD_INT 7
58738: PUSH
58739: LD_INT 8
58741: PUSH
58742: LD_INT 11
58744: PUSH
58745: LD_INT 12
58747: PUSH
58748: LD_INT 15
58750: PUSH
58751: LD_INT 16
58753: PUSH
58754: LD_INT 20
58756: PUSH
58757: LD_INT 21
58759: PUSH
58760: LD_INT 22
58762: PUSH
58763: LD_INT 23
58765: PUSH
58766: LD_INT 25
58768: PUSH
58769: LD_INT 26
58771: PUSH
58772: LD_INT 30
58774: PUSH
58775: LD_INT 31
58777: PUSH
58778: LD_INT 32
58780: PUSH
58781: LD_INT 36
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 101
58808: PUSH
58809: LD_INT 102
58811: PUSH
58812: LD_INT 103
58814: PUSH
58815: LD_INT 105
58817: PUSH
58818: LD_INT 106
58820: PUSH
58821: LD_INT 108
58823: PUSH
58824: LD_INT 109
58826: PUSH
58827: LD_INT 112
58829: PUSH
58830: LD_INT 116
58832: PUSH
58833: LD_INT 117
58835: PUSH
58836: LD_INT 118
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: ST_TO_ADDR
58856: GO 61111
58858: LD_INT 9
58860: DOUBLE
58861: EQUAL
58862: IFTRUE 58866
58864: GO 59014
58866: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
58867: LD_ADDR_VAR 0 1
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 4
58877: PUSH
58878: LD_INT 5
58880: PUSH
58881: LD_INT 6
58883: PUSH
58884: LD_INT 7
58886: PUSH
58887: LD_INT 8
58889: PUSH
58890: LD_INT 11
58892: PUSH
58893: LD_INT 12
58895: PUSH
58896: LD_INT 15
58898: PUSH
58899: LD_INT 16
58901: PUSH
58902: LD_INT 20
58904: PUSH
58905: LD_INT 21
58907: PUSH
58908: LD_INT 22
58910: PUSH
58911: LD_INT 23
58913: PUSH
58914: LD_INT 25
58916: PUSH
58917: LD_INT 26
58919: PUSH
58920: LD_INT 28
58922: PUSH
58923: LD_INT 30
58925: PUSH
58926: LD_INT 31
58928: PUSH
58929: LD_INT 32
58931: PUSH
58932: LD_INT 36
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 101
58960: PUSH
58961: LD_INT 102
58963: PUSH
58964: LD_INT 103
58966: PUSH
58967: LD_INT 105
58969: PUSH
58970: LD_INT 106
58972: PUSH
58973: LD_INT 108
58975: PUSH
58976: LD_INT 109
58978: PUSH
58979: LD_INT 112
58981: PUSH
58982: LD_INT 114
58984: PUSH
58985: LD_INT 116
58987: PUSH
58988: LD_INT 117
58990: PUSH
58991: LD_INT 118
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: ST_TO_ADDR
59012: GO 61111
59014: LD_INT 10
59016: DOUBLE
59017: EQUAL
59018: IFTRUE 59022
59020: GO 59218
59022: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
59023: LD_ADDR_VAR 0 1
59027: PUSH
59028: LD_INT 2
59030: PUSH
59031: LD_INT 4
59033: PUSH
59034: LD_INT 5
59036: PUSH
59037: LD_INT 6
59039: PUSH
59040: LD_INT 7
59042: PUSH
59043: LD_INT 8
59045: PUSH
59046: LD_INT 9
59048: PUSH
59049: LD_INT 10
59051: PUSH
59052: LD_INT 11
59054: PUSH
59055: LD_INT 12
59057: PUSH
59058: LD_INT 13
59060: PUSH
59061: LD_INT 14
59063: PUSH
59064: LD_INT 15
59066: PUSH
59067: LD_INT 16
59069: PUSH
59070: LD_INT 17
59072: PUSH
59073: LD_INT 18
59075: PUSH
59076: LD_INT 19
59078: PUSH
59079: LD_INT 20
59081: PUSH
59082: LD_INT 21
59084: PUSH
59085: LD_INT 22
59087: PUSH
59088: LD_INT 23
59090: PUSH
59091: LD_INT 24
59093: PUSH
59094: LD_INT 25
59096: PUSH
59097: LD_INT 26
59099: PUSH
59100: LD_INT 28
59102: PUSH
59103: LD_INT 30
59105: PUSH
59106: LD_INT 31
59108: PUSH
59109: LD_INT 32
59111: PUSH
59112: LD_INT 36
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 101
59148: PUSH
59149: LD_INT 102
59151: PUSH
59152: LD_INT 103
59154: PUSH
59155: LD_INT 104
59157: PUSH
59158: LD_INT 105
59160: PUSH
59161: LD_INT 106
59163: PUSH
59164: LD_INT 107
59166: PUSH
59167: LD_INT 108
59169: PUSH
59170: LD_INT 109
59172: PUSH
59173: LD_INT 110
59175: PUSH
59176: LD_INT 111
59178: PUSH
59179: LD_INT 112
59181: PUSH
59182: LD_INT 114
59184: PUSH
59185: LD_INT 116
59187: PUSH
59188: LD_INT 117
59190: PUSH
59191: LD_INT 118
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: LIST
59208: LIST
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: ST_TO_ADDR
59216: GO 61111
59218: LD_INT 11
59220: DOUBLE
59221: EQUAL
59222: IFTRUE 59226
59224: GO 59430
59226: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
59227: LD_ADDR_VAR 0 1
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 3
59237: PUSH
59238: LD_INT 4
59240: PUSH
59241: LD_INT 5
59243: PUSH
59244: LD_INT 6
59246: PUSH
59247: LD_INT 7
59249: PUSH
59250: LD_INT 8
59252: PUSH
59253: LD_INT 9
59255: PUSH
59256: LD_INT 10
59258: PUSH
59259: LD_INT 11
59261: PUSH
59262: LD_INT 12
59264: PUSH
59265: LD_INT 13
59267: PUSH
59268: LD_INT 14
59270: PUSH
59271: LD_INT 15
59273: PUSH
59274: LD_INT 16
59276: PUSH
59277: LD_INT 17
59279: PUSH
59280: LD_INT 18
59282: PUSH
59283: LD_INT 19
59285: PUSH
59286: LD_INT 20
59288: PUSH
59289: LD_INT 21
59291: PUSH
59292: LD_INT 22
59294: PUSH
59295: LD_INT 23
59297: PUSH
59298: LD_INT 24
59300: PUSH
59301: LD_INT 25
59303: PUSH
59304: LD_INT 26
59306: PUSH
59307: LD_INT 28
59309: PUSH
59310: LD_INT 30
59312: PUSH
59313: LD_INT 31
59315: PUSH
59316: LD_INT 32
59318: PUSH
59319: LD_INT 34
59321: PUSH
59322: LD_INT 36
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: LIST
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: LIST
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 101
59360: PUSH
59361: LD_INT 102
59363: PUSH
59364: LD_INT 103
59366: PUSH
59367: LD_INT 104
59369: PUSH
59370: LD_INT 105
59372: PUSH
59373: LD_INT 106
59375: PUSH
59376: LD_INT 107
59378: PUSH
59379: LD_INT 108
59381: PUSH
59382: LD_INT 109
59384: PUSH
59385: LD_INT 110
59387: PUSH
59388: LD_INT 111
59390: PUSH
59391: LD_INT 112
59393: PUSH
59394: LD_INT 114
59396: PUSH
59397: LD_INT 116
59399: PUSH
59400: LD_INT 117
59402: PUSH
59403: LD_INT 118
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: ST_TO_ADDR
59428: GO 61111
59430: LD_INT 12
59432: DOUBLE
59433: EQUAL
59434: IFTRUE 59438
59436: GO 59658
59438: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
59439: LD_ADDR_VAR 0 1
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: LD_INT 2
59449: PUSH
59450: LD_INT 3
59452: PUSH
59453: LD_INT 4
59455: PUSH
59456: LD_INT 5
59458: PUSH
59459: LD_INT 6
59461: PUSH
59462: LD_INT 7
59464: PUSH
59465: LD_INT 8
59467: PUSH
59468: LD_INT 9
59470: PUSH
59471: LD_INT 10
59473: PUSH
59474: LD_INT 11
59476: PUSH
59477: LD_INT 12
59479: PUSH
59480: LD_INT 13
59482: PUSH
59483: LD_INT 14
59485: PUSH
59486: LD_INT 15
59488: PUSH
59489: LD_INT 16
59491: PUSH
59492: LD_INT 17
59494: PUSH
59495: LD_INT 18
59497: PUSH
59498: LD_INT 19
59500: PUSH
59501: LD_INT 20
59503: PUSH
59504: LD_INT 21
59506: PUSH
59507: LD_INT 22
59509: PUSH
59510: LD_INT 23
59512: PUSH
59513: LD_INT 24
59515: PUSH
59516: LD_INT 25
59518: PUSH
59519: LD_INT 26
59521: PUSH
59522: LD_INT 27
59524: PUSH
59525: LD_INT 28
59527: PUSH
59528: LD_INT 30
59530: PUSH
59531: LD_INT 31
59533: PUSH
59534: LD_INT 32
59536: PUSH
59537: LD_INT 33
59539: PUSH
59540: LD_INT 34
59542: PUSH
59543: LD_INT 36
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 101
59584: PUSH
59585: LD_INT 102
59587: PUSH
59588: LD_INT 103
59590: PUSH
59591: LD_INT 104
59593: PUSH
59594: LD_INT 105
59596: PUSH
59597: LD_INT 106
59599: PUSH
59600: LD_INT 107
59602: PUSH
59603: LD_INT 108
59605: PUSH
59606: LD_INT 109
59608: PUSH
59609: LD_INT 110
59611: PUSH
59612: LD_INT 111
59614: PUSH
59615: LD_INT 112
59617: PUSH
59618: LD_INT 113
59620: PUSH
59621: LD_INT 114
59623: PUSH
59624: LD_INT 116
59626: PUSH
59627: LD_INT 117
59629: PUSH
59630: LD_INT 118
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: ST_TO_ADDR
59656: GO 61111
59658: LD_INT 13
59660: DOUBLE
59661: EQUAL
59662: IFTRUE 59666
59664: GO 59874
59666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
59667: LD_ADDR_VAR 0 1
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: LD_INT 3
59680: PUSH
59681: LD_INT 4
59683: PUSH
59684: LD_INT 5
59686: PUSH
59687: LD_INT 8
59689: PUSH
59690: LD_INT 9
59692: PUSH
59693: LD_INT 10
59695: PUSH
59696: LD_INT 11
59698: PUSH
59699: LD_INT 12
59701: PUSH
59702: LD_INT 14
59704: PUSH
59705: LD_INT 15
59707: PUSH
59708: LD_INT 16
59710: PUSH
59711: LD_INT 17
59713: PUSH
59714: LD_INT 18
59716: PUSH
59717: LD_INT 19
59719: PUSH
59720: LD_INT 20
59722: PUSH
59723: LD_INT 21
59725: PUSH
59726: LD_INT 22
59728: PUSH
59729: LD_INT 23
59731: PUSH
59732: LD_INT 24
59734: PUSH
59735: LD_INT 25
59737: PUSH
59738: LD_INT 26
59740: PUSH
59741: LD_INT 27
59743: PUSH
59744: LD_INT 28
59746: PUSH
59747: LD_INT 30
59749: PUSH
59750: LD_INT 31
59752: PUSH
59753: LD_INT 32
59755: PUSH
59756: LD_INT 33
59758: PUSH
59759: LD_INT 34
59761: PUSH
59762: LD_INT 36
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 101
59800: PUSH
59801: LD_INT 102
59803: PUSH
59804: LD_INT 103
59806: PUSH
59807: LD_INT 104
59809: PUSH
59810: LD_INT 105
59812: PUSH
59813: LD_INT 106
59815: PUSH
59816: LD_INT 107
59818: PUSH
59819: LD_INT 108
59821: PUSH
59822: LD_INT 109
59824: PUSH
59825: LD_INT 110
59827: PUSH
59828: LD_INT 111
59830: PUSH
59831: LD_INT 112
59833: PUSH
59834: LD_INT 113
59836: PUSH
59837: LD_INT 114
59839: PUSH
59840: LD_INT 116
59842: PUSH
59843: LD_INT 117
59845: PUSH
59846: LD_INT 118
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: ST_TO_ADDR
59872: GO 61111
59874: LD_INT 14
59876: DOUBLE
59877: EQUAL
59878: IFTRUE 59882
59880: GO 60106
59882: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
59883: LD_ADDR_VAR 0 1
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 2
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: LD_INT 4
59899: PUSH
59900: LD_INT 5
59902: PUSH
59903: LD_INT 6
59905: PUSH
59906: LD_INT 7
59908: PUSH
59909: LD_INT 8
59911: PUSH
59912: LD_INT 9
59914: PUSH
59915: LD_INT 10
59917: PUSH
59918: LD_INT 11
59920: PUSH
59921: LD_INT 12
59923: PUSH
59924: LD_INT 13
59926: PUSH
59927: LD_INT 14
59929: PUSH
59930: LD_INT 15
59932: PUSH
59933: LD_INT 16
59935: PUSH
59936: LD_INT 17
59938: PUSH
59939: LD_INT 18
59941: PUSH
59942: LD_INT 19
59944: PUSH
59945: LD_INT 20
59947: PUSH
59948: LD_INT 21
59950: PUSH
59951: LD_INT 22
59953: PUSH
59954: LD_INT 23
59956: PUSH
59957: LD_INT 24
59959: PUSH
59960: LD_INT 25
59962: PUSH
59963: LD_INT 26
59965: PUSH
59966: LD_INT 27
59968: PUSH
59969: LD_INT 28
59971: PUSH
59972: LD_INT 29
59974: PUSH
59975: LD_INT 30
59977: PUSH
59978: LD_INT 31
59980: PUSH
59981: LD_INT 32
59983: PUSH
59984: LD_INT 33
59986: PUSH
59987: LD_INT 34
59989: PUSH
59990: LD_INT 36
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: LIST
60023: LIST
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 101
60032: PUSH
60033: LD_INT 102
60035: PUSH
60036: LD_INT 103
60038: PUSH
60039: LD_INT 104
60041: PUSH
60042: LD_INT 105
60044: PUSH
60045: LD_INT 106
60047: PUSH
60048: LD_INT 107
60050: PUSH
60051: LD_INT 108
60053: PUSH
60054: LD_INT 109
60056: PUSH
60057: LD_INT 110
60059: PUSH
60060: LD_INT 111
60062: PUSH
60063: LD_INT 112
60065: PUSH
60066: LD_INT 113
60068: PUSH
60069: LD_INT 114
60071: PUSH
60072: LD_INT 116
60074: PUSH
60075: LD_INT 117
60077: PUSH
60078: LD_INT 118
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: ST_TO_ADDR
60104: GO 61111
60106: LD_INT 15
60108: DOUBLE
60109: EQUAL
60110: IFTRUE 60114
60112: GO 60338
60114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
60115: LD_ADDR_VAR 0 1
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: LD_INT 2
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 4
60131: PUSH
60132: LD_INT 5
60134: PUSH
60135: LD_INT 6
60137: PUSH
60138: LD_INT 7
60140: PUSH
60141: LD_INT 8
60143: PUSH
60144: LD_INT 9
60146: PUSH
60147: LD_INT 10
60149: PUSH
60150: LD_INT 11
60152: PUSH
60153: LD_INT 12
60155: PUSH
60156: LD_INT 13
60158: PUSH
60159: LD_INT 14
60161: PUSH
60162: LD_INT 15
60164: PUSH
60165: LD_INT 16
60167: PUSH
60168: LD_INT 17
60170: PUSH
60171: LD_INT 18
60173: PUSH
60174: LD_INT 19
60176: PUSH
60177: LD_INT 20
60179: PUSH
60180: LD_INT 21
60182: PUSH
60183: LD_INT 22
60185: PUSH
60186: LD_INT 23
60188: PUSH
60189: LD_INT 24
60191: PUSH
60192: LD_INT 25
60194: PUSH
60195: LD_INT 26
60197: PUSH
60198: LD_INT 27
60200: PUSH
60201: LD_INT 28
60203: PUSH
60204: LD_INT 29
60206: PUSH
60207: LD_INT 30
60209: PUSH
60210: LD_INT 31
60212: PUSH
60213: LD_INT 32
60215: PUSH
60216: LD_INT 33
60218: PUSH
60219: LD_INT 34
60221: PUSH
60222: LD_INT 36
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 101
60264: PUSH
60265: LD_INT 102
60267: PUSH
60268: LD_INT 103
60270: PUSH
60271: LD_INT 104
60273: PUSH
60274: LD_INT 105
60276: PUSH
60277: LD_INT 106
60279: PUSH
60280: LD_INT 107
60282: PUSH
60283: LD_INT 108
60285: PUSH
60286: LD_INT 109
60288: PUSH
60289: LD_INT 110
60291: PUSH
60292: LD_INT 111
60294: PUSH
60295: LD_INT 112
60297: PUSH
60298: LD_INT 113
60300: PUSH
60301: LD_INT 114
60303: PUSH
60304: LD_INT 116
60306: PUSH
60307: LD_INT 117
60309: PUSH
60310: LD_INT 118
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: ST_TO_ADDR
60336: GO 61111
60338: LD_INT 16
60340: DOUBLE
60341: EQUAL
60342: IFTRUE 60346
60344: GO 60482
60346: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
60347: LD_ADDR_VAR 0 1
60351: PUSH
60352: LD_INT 2
60354: PUSH
60355: LD_INT 4
60357: PUSH
60358: LD_INT 5
60360: PUSH
60361: LD_INT 7
60363: PUSH
60364: LD_INT 11
60366: PUSH
60367: LD_INT 12
60369: PUSH
60370: LD_INT 15
60372: PUSH
60373: LD_INT 16
60375: PUSH
60376: LD_INT 20
60378: PUSH
60379: LD_INT 21
60381: PUSH
60382: LD_INT 22
60384: PUSH
60385: LD_INT 23
60387: PUSH
60388: LD_INT 25
60390: PUSH
60391: LD_INT 26
60393: PUSH
60394: LD_INT 30
60396: PUSH
60397: LD_INT 31
60399: PUSH
60400: LD_INT 32
60402: PUSH
60403: LD_INT 33
60405: PUSH
60406: LD_INT 34
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 101
60432: PUSH
60433: LD_INT 102
60435: PUSH
60436: LD_INT 103
60438: PUSH
60439: LD_INT 106
60441: PUSH
60442: LD_INT 108
60444: PUSH
60445: LD_INT 112
60447: PUSH
60448: LD_INT 113
60450: PUSH
60451: LD_INT 114
60453: PUSH
60454: LD_INT 116
60456: PUSH
60457: LD_INT 117
60459: PUSH
60460: LD_INT 118
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: ST_TO_ADDR
60480: GO 61111
60482: LD_INT 17
60484: DOUBLE
60485: EQUAL
60486: IFTRUE 60490
60488: GO 60714
60490: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
60491: LD_ADDR_VAR 0 1
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: LD_INT 2
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: LD_INT 4
60507: PUSH
60508: LD_INT 5
60510: PUSH
60511: LD_INT 6
60513: PUSH
60514: LD_INT 7
60516: PUSH
60517: LD_INT 8
60519: PUSH
60520: LD_INT 9
60522: PUSH
60523: LD_INT 10
60525: PUSH
60526: LD_INT 11
60528: PUSH
60529: LD_INT 12
60531: PUSH
60532: LD_INT 13
60534: PUSH
60535: LD_INT 14
60537: PUSH
60538: LD_INT 15
60540: PUSH
60541: LD_INT 16
60543: PUSH
60544: LD_INT 17
60546: PUSH
60547: LD_INT 18
60549: PUSH
60550: LD_INT 19
60552: PUSH
60553: LD_INT 20
60555: PUSH
60556: LD_INT 21
60558: PUSH
60559: LD_INT 22
60561: PUSH
60562: LD_INT 23
60564: PUSH
60565: LD_INT 24
60567: PUSH
60568: LD_INT 25
60570: PUSH
60571: LD_INT 26
60573: PUSH
60574: LD_INT 27
60576: PUSH
60577: LD_INT 28
60579: PUSH
60580: LD_INT 29
60582: PUSH
60583: LD_INT 30
60585: PUSH
60586: LD_INT 31
60588: PUSH
60589: LD_INT 32
60591: PUSH
60592: LD_INT 33
60594: PUSH
60595: LD_INT 34
60597: PUSH
60598: LD_INT 36
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: LIST
60624: LIST
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 101
60640: PUSH
60641: LD_INT 102
60643: PUSH
60644: LD_INT 103
60646: PUSH
60647: LD_INT 104
60649: PUSH
60650: LD_INT 105
60652: PUSH
60653: LD_INT 106
60655: PUSH
60656: LD_INT 107
60658: PUSH
60659: LD_INT 108
60661: PUSH
60662: LD_INT 109
60664: PUSH
60665: LD_INT 110
60667: PUSH
60668: LD_INT 111
60670: PUSH
60671: LD_INT 112
60673: PUSH
60674: LD_INT 113
60676: PUSH
60677: LD_INT 114
60679: PUSH
60680: LD_INT 116
60682: PUSH
60683: LD_INT 117
60685: PUSH
60686: LD_INT 118
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: LIST
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: ST_TO_ADDR
60712: GO 61111
60714: LD_INT 18
60716: DOUBLE
60717: EQUAL
60718: IFTRUE 60722
60720: GO 60870
60722: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
60723: LD_ADDR_VAR 0 1
60727: PUSH
60728: LD_INT 2
60730: PUSH
60731: LD_INT 4
60733: PUSH
60734: LD_INT 5
60736: PUSH
60737: LD_INT 7
60739: PUSH
60740: LD_INT 11
60742: PUSH
60743: LD_INT 12
60745: PUSH
60746: LD_INT 15
60748: PUSH
60749: LD_INT 16
60751: PUSH
60752: LD_INT 20
60754: PUSH
60755: LD_INT 21
60757: PUSH
60758: LD_INT 22
60760: PUSH
60761: LD_INT 23
60763: PUSH
60764: LD_INT 25
60766: PUSH
60767: LD_INT 26
60769: PUSH
60770: LD_INT 30
60772: PUSH
60773: LD_INT 31
60775: PUSH
60776: LD_INT 32
60778: PUSH
60779: LD_INT 33
60781: PUSH
60782: LD_INT 34
60784: PUSH
60785: LD_INT 35
60787: PUSH
60788: LD_INT 36
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: LIST
60809: LIST
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 101
60816: PUSH
60817: LD_INT 102
60819: PUSH
60820: LD_INT 103
60822: PUSH
60823: LD_INT 106
60825: PUSH
60826: LD_INT 108
60828: PUSH
60829: LD_INT 112
60831: PUSH
60832: LD_INT 113
60834: PUSH
60835: LD_INT 114
60837: PUSH
60838: LD_INT 115
60840: PUSH
60841: LD_INT 116
60843: PUSH
60844: LD_INT 117
60846: PUSH
60847: LD_INT 118
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: LIST
60855: LIST
60856: LIST
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: LIST
60862: LIST
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: ST_TO_ADDR
60868: GO 61111
60870: LD_INT 19
60872: DOUBLE
60873: EQUAL
60874: IFTRUE 60878
60876: GO 61110
60878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
60879: LD_ADDR_VAR 0 1
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 4
60895: PUSH
60896: LD_INT 5
60898: PUSH
60899: LD_INT 6
60901: PUSH
60902: LD_INT 7
60904: PUSH
60905: LD_INT 8
60907: PUSH
60908: LD_INT 9
60910: PUSH
60911: LD_INT 10
60913: PUSH
60914: LD_INT 11
60916: PUSH
60917: LD_INT 12
60919: PUSH
60920: LD_INT 13
60922: PUSH
60923: LD_INT 14
60925: PUSH
60926: LD_INT 15
60928: PUSH
60929: LD_INT 16
60931: PUSH
60932: LD_INT 17
60934: PUSH
60935: LD_INT 18
60937: PUSH
60938: LD_INT 19
60940: PUSH
60941: LD_INT 20
60943: PUSH
60944: LD_INT 21
60946: PUSH
60947: LD_INT 22
60949: PUSH
60950: LD_INT 23
60952: PUSH
60953: LD_INT 24
60955: PUSH
60956: LD_INT 25
60958: PUSH
60959: LD_INT 26
60961: PUSH
60962: LD_INT 27
60964: PUSH
60965: LD_INT 28
60967: PUSH
60968: LD_INT 29
60970: PUSH
60971: LD_INT 30
60973: PUSH
60974: LD_INT 31
60976: PUSH
60977: LD_INT 32
60979: PUSH
60980: LD_INT 33
60982: PUSH
60983: LD_INT 34
60985: PUSH
60986: LD_INT 35
60988: PUSH
60989: LD_INT 36
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 101
61032: PUSH
61033: LD_INT 102
61035: PUSH
61036: LD_INT 103
61038: PUSH
61039: LD_INT 104
61041: PUSH
61042: LD_INT 105
61044: PUSH
61045: LD_INT 106
61047: PUSH
61048: LD_INT 107
61050: PUSH
61051: LD_INT 108
61053: PUSH
61054: LD_INT 109
61056: PUSH
61057: LD_INT 110
61059: PUSH
61060: LD_INT 111
61062: PUSH
61063: LD_INT 112
61065: PUSH
61066: LD_INT 113
61068: PUSH
61069: LD_INT 114
61071: PUSH
61072: LD_INT 115
61074: PUSH
61075: LD_INT 116
61077: PUSH
61078: LD_INT 117
61080: PUSH
61081: LD_INT 118
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: ST_TO_ADDR
61108: GO 61111
61110: POP
// end else
61111: GO 61342
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
61113: LD_ADDR_VAR 0 1
61117: PUSH
61118: LD_INT 1
61120: PUSH
61121: LD_INT 2
61123: PUSH
61124: LD_INT 3
61126: PUSH
61127: LD_INT 4
61129: PUSH
61130: LD_INT 5
61132: PUSH
61133: LD_INT 6
61135: PUSH
61136: LD_INT 7
61138: PUSH
61139: LD_INT 8
61141: PUSH
61142: LD_INT 9
61144: PUSH
61145: LD_INT 10
61147: PUSH
61148: LD_INT 11
61150: PUSH
61151: LD_INT 12
61153: PUSH
61154: LD_INT 13
61156: PUSH
61157: LD_INT 14
61159: PUSH
61160: LD_INT 15
61162: PUSH
61163: LD_INT 16
61165: PUSH
61166: LD_INT 17
61168: PUSH
61169: LD_INT 18
61171: PUSH
61172: LD_INT 19
61174: PUSH
61175: LD_INT 20
61177: PUSH
61178: LD_INT 21
61180: PUSH
61181: LD_INT 22
61183: PUSH
61184: LD_INT 23
61186: PUSH
61187: LD_INT 24
61189: PUSH
61190: LD_INT 25
61192: PUSH
61193: LD_INT 26
61195: PUSH
61196: LD_INT 27
61198: PUSH
61199: LD_INT 28
61201: PUSH
61202: LD_INT 29
61204: PUSH
61205: LD_INT 30
61207: PUSH
61208: LD_INT 31
61210: PUSH
61211: LD_INT 32
61213: PUSH
61214: LD_INT 33
61216: PUSH
61217: LD_INT 34
61219: PUSH
61220: LD_INT 35
61222: PUSH
61223: LD_INT 36
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: LIST
61253: LIST
61254: LIST
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 101
61266: PUSH
61267: LD_INT 102
61269: PUSH
61270: LD_INT 103
61272: PUSH
61273: LD_INT 104
61275: PUSH
61276: LD_INT 105
61278: PUSH
61279: LD_INT 106
61281: PUSH
61282: LD_INT 107
61284: PUSH
61285: LD_INT 108
61287: PUSH
61288: LD_INT 109
61290: PUSH
61291: LD_INT 110
61293: PUSH
61294: LD_INT 111
61296: PUSH
61297: LD_INT 112
61299: PUSH
61300: LD_INT 113
61302: PUSH
61303: LD_INT 114
61305: PUSH
61306: LD_INT 115
61308: PUSH
61309: LD_INT 116
61311: PUSH
61312: LD_INT 117
61314: PUSH
61315: LD_INT 118
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: LIST
61331: LIST
61332: LIST
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// if result then
61342: LD_VAR 0 1
61346: IFFALSE 61635
// begin normal :=  ;
61348: LD_ADDR_VAR 0 3
61352: PUSH
61353: LD_STRING 
61355: ST_TO_ADDR
// hardcore :=  ;
61356: LD_ADDR_VAR 0 4
61360: PUSH
61361: LD_STRING 
61363: ST_TO_ADDR
// for i = 1 to normalCounter do
61364: LD_ADDR_VAR 0 5
61368: PUSH
61369: DOUBLE
61370: LD_INT 1
61372: DEC
61373: ST_TO_ADDR
61374: LD_EXP 50
61378: PUSH
61379: FOR_TO
61380: IFFALSE 61481
// begin tmp := 0 ;
61382: LD_ADDR_VAR 0 2
61386: PUSH
61387: LD_STRING 0
61389: ST_TO_ADDR
// if result [ 1 ] then
61390: LD_VAR 0 1
61394: PUSH
61395: LD_INT 1
61397: ARRAY
61398: IFFALSE 61463
// if result [ 1 ] [ 1 ] = i then
61400: LD_VAR 0 1
61404: PUSH
61405: LD_INT 1
61407: ARRAY
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_VAR 0 5
61417: EQUAL
61418: IFFALSE 61463
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
61420: LD_ADDR_VAR 0 1
61424: PUSH
61425: LD_VAR 0 1
61429: PPUSH
61430: LD_INT 1
61432: PPUSH
61433: LD_VAR 0 1
61437: PUSH
61438: LD_INT 1
61440: ARRAY
61441: PPUSH
61442: LD_INT 1
61444: PPUSH
61445: CALL_OW 3
61449: PPUSH
61450: CALL_OW 1
61454: ST_TO_ADDR
// tmp := 1 ;
61455: LD_ADDR_VAR 0 2
61459: PUSH
61460: LD_STRING 1
61462: ST_TO_ADDR
// end ; normal := normal & tmp ;
61463: LD_ADDR_VAR 0 3
61467: PUSH
61468: LD_VAR 0 3
61472: PUSH
61473: LD_VAR 0 2
61477: STR
61478: ST_TO_ADDR
// end ;
61479: GO 61379
61481: POP
61482: POP
// for i = 1 to hardcoreCounter do
61483: LD_ADDR_VAR 0 5
61487: PUSH
61488: DOUBLE
61489: LD_INT 1
61491: DEC
61492: ST_TO_ADDR
61493: LD_EXP 51
61497: PUSH
61498: FOR_TO
61499: IFFALSE 61604
// begin tmp := 0 ;
61501: LD_ADDR_VAR 0 2
61505: PUSH
61506: LD_STRING 0
61508: ST_TO_ADDR
// if result [ 2 ] then
61509: LD_VAR 0 1
61513: PUSH
61514: LD_INT 2
61516: ARRAY
61517: IFFALSE 61586
// if result [ 2 ] [ 1 ] = 100 + i then
61519: LD_VAR 0 1
61523: PUSH
61524: LD_INT 2
61526: ARRAY
61527: PUSH
61528: LD_INT 1
61530: ARRAY
61531: PUSH
61532: LD_INT 100
61534: PUSH
61535: LD_VAR 0 5
61539: PLUS
61540: EQUAL
61541: IFFALSE 61586
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
61543: LD_ADDR_VAR 0 1
61547: PUSH
61548: LD_VAR 0 1
61552: PPUSH
61553: LD_INT 2
61555: PPUSH
61556: LD_VAR 0 1
61560: PUSH
61561: LD_INT 2
61563: ARRAY
61564: PPUSH
61565: LD_INT 1
61567: PPUSH
61568: CALL_OW 3
61572: PPUSH
61573: CALL_OW 1
61577: ST_TO_ADDR
// tmp := 1 ;
61578: LD_ADDR_VAR 0 2
61582: PUSH
61583: LD_STRING 1
61585: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
61586: LD_ADDR_VAR 0 4
61590: PUSH
61591: LD_VAR 0 4
61595: PUSH
61596: LD_VAR 0 2
61600: STR
61601: ST_TO_ADDR
// end ;
61602: GO 61498
61604: POP
61605: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
61606: LD_STRING getStreamItemsFromMission("
61608: PUSH
61609: LD_VAR 0 3
61613: STR
61614: PUSH
61615: LD_STRING ","
61617: STR
61618: PUSH
61619: LD_VAR 0 4
61623: STR
61624: PUSH
61625: LD_STRING ")
61627: STR
61628: PPUSH
61629: CALL_OW 559
// end else
61633: GO 61642
// ToLua ( getStreamItemsFromMission("","") ) ;
61635: LD_STRING getStreamItemsFromMission("","")
61637: PPUSH
61638: CALL_OW 559
// end ;
61642: LD_VAR 0 1
61646: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
61647: LD_EXP 49
61651: PUSH
61652: LD_EXP 54
61656: AND
61657: IFFALSE 61781
61659: GO 61661
61661: DISABLE
61662: LD_INT 0
61664: PPUSH
61665: PPUSH
// begin enable ;
61666: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
61667: LD_ADDR_VAR 0 2
61671: PUSH
61672: LD_INT 22
61674: PUSH
61675: LD_OWVAR 2
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 34
61689: PUSH
61690: LD_INT 7
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 34
61699: PUSH
61700: LD_INT 45
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 34
61709: PUSH
61710: LD_INT 28
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: PUSH
61717: LD_INT 34
61719: PUSH
61720: LD_INT 47
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PPUSH
61738: CALL_OW 69
61742: ST_TO_ADDR
// if not tmp then
61743: LD_VAR 0 2
61747: NOT
61748: IFFALSE 61752
// exit ;
61750: GO 61781
// for i in tmp do
61752: LD_ADDR_VAR 0 1
61756: PUSH
61757: LD_VAR 0 2
61761: PUSH
61762: FOR_IN
61763: IFFALSE 61779
// begin SetLives ( i , 0 ) ;
61765: LD_VAR 0 1
61769: PPUSH
61770: LD_INT 0
61772: PPUSH
61773: CALL_OW 234
// end ;
61777: GO 61762
61779: POP
61780: POP
// end ;
61781: PPOPN 2
61783: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
61784: LD_EXP 49
61788: PUSH
61789: LD_EXP 55
61793: AND
61794: IFFALSE 61878
61796: GO 61798
61798: DISABLE
61799: LD_INT 0
61801: PPUSH
61802: PPUSH
// begin enable ;
61803: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
61804: LD_ADDR_VAR 0 2
61808: PUSH
61809: LD_INT 22
61811: PUSH
61812: LD_OWVAR 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: LD_INT 32
61823: PUSH
61824: LD_INT 3
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PPUSH
61835: CALL_OW 69
61839: ST_TO_ADDR
// if not tmp then
61840: LD_VAR 0 2
61844: NOT
61845: IFFALSE 61849
// exit ;
61847: GO 61878
// for i in tmp do
61849: LD_ADDR_VAR 0 1
61853: PUSH
61854: LD_VAR 0 2
61858: PUSH
61859: FOR_IN
61860: IFFALSE 61876
// begin SetLives ( i , 0 ) ;
61862: LD_VAR 0 1
61866: PPUSH
61867: LD_INT 0
61869: PPUSH
61870: CALL_OW 234
// end ;
61874: GO 61859
61876: POP
61877: POP
// end ;
61878: PPOPN 2
61880: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
61881: LD_EXP 49
61885: PUSH
61886: LD_EXP 52
61890: AND
61891: IFFALSE 61984
61893: GO 61895
61895: DISABLE
61896: LD_INT 0
61898: PPUSH
// begin enable ;
61899: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
61900: LD_ADDR_VAR 0 1
61904: PUSH
61905: LD_INT 22
61907: PUSH
61908: LD_OWVAR 2
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: PUSH
61920: LD_INT 25
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 25
61932: PUSH
61933: LD_INT 9
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 25
61942: PUSH
61943: LD_INT 8
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PPUSH
61960: CALL_OW 69
61964: PUSH
61965: FOR_IN
61966: IFFALSE 61982
// begin SetClass ( i , 1 ) ;
61968: LD_VAR 0 1
61972: PPUSH
61973: LD_INT 1
61975: PPUSH
61976: CALL_OW 336
// end ;
61980: GO 61965
61982: POP
61983: POP
// end ;
61984: PPOPN 1
61986: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
61987: LD_EXP 49
61991: PUSH
61992: LD_EXP 53
61996: AND
61997: PUSH
61998: LD_OWVAR 65
62002: PUSH
62003: LD_INT 7
62005: LESS
62006: AND
62007: IFFALSE 62021
62009: GO 62011
62011: DISABLE
// begin enable ;
62012: ENABLE
// game_speed := 7 ;
62013: LD_ADDR_OWVAR 65
62017: PUSH
62018: LD_INT 7
62020: ST_TO_ADDR
// end ;
62021: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
62022: LD_EXP 49
62026: PUSH
62027: LD_EXP 56
62031: AND
62032: IFFALSE 62234
62034: GO 62036
62036: DISABLE
62037: LD_INT 0
62039: PPUSH
62040: PPUSH
62041: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62042: LD_ADDR_VAR 0 3
62046: PUSH
62047: LD_INT 81
62049: PUSH
62050: LD_OWVAR 2
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 21
62061: PUSH
62062: LD_INT 1
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PPUSH
62073: CALL_OW 69
62077: ST_TO_ADDR
// if not tmp then
62078: LD_VAR 0 3
62082: NOT
62083: IFFALSE 62087
// exit ;
62085: GO 62234
// if tmp > 5 then
62087: LD_VAR 0 3
62091: PUSH
62092: LD_INT 5
62094: GREATER
62095: IFFALSE 62107
// k := 5 else
62097: LD_ADDR_VAR 0 2
62101: PUSH
62102: LD_INT 5
62104: ST_TO_ADDR
62105: GO 62117
// k := tmp ;
62107: LD_ADDR_VAR 0 2
62111: PUSH
62112: LD_VAR 0 3
62116: ST_TO_ADDR
// for i := 1 to k do
62117: LD_ADDR_VAR 0 1
62121: PUSH
62122: DOUBLE
62123: LD_INT 1
62125: DEC
62126: ST_TO_ADDR
62127: LD_VAR 0 2
62131: PUSH
62132: FOR_TO
62133: IFFALSE 62232
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
62135: LD_VAR 0 3
62139: PUSH
62140: LD_VAR 0 1
62144: ARRAY
62145: PPUSH
62146: LD_VAR 0 1
62150: PUSH
62151: LD_INT 4
62153: MOD
62154: PUSH
62155: LD_INT 1
62157: PLUS
62158: PPUSH
62159: CALL_OW 259
62163: PUSH
62164: LD_INT 10
62166: LESS
62167: IFFALSE 62230
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
62169: LD_VAR 0 3
62173: PUSH
62174: LD_VAR 0 1
62178: ARRAY
62179: PPUSH
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 4
62187: MOD
62188: PUSH
62189: LD_INT 1
62191: PLUS
62192: PPUSH
62193: LD_VAR 0 3
62197: PUSH
62198: LD_VAR 0 1
62202: ARRAY
62203: PPUSH
62204: LD_VAR 0 1
62208: PUSH
62209: LD_INT 4
62211: MOD
62212: PUSH
62213: LD_INT 1
62215: PLUS
62216: PPUSH
62217: CALL_OW 259
62221: PUSH
62222: LD_INT 1
62224: PLUS
62225: PPUSH
62226: CALL_OW 237
62230: GO 62132
62232: POP
62233: POP
// end ;
62234: PPOPN 3
62236: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
62237: LD_EXP 49
62241: PUSH
62242: LD_EXP 57
62246: AND
62247: IFFALSE 62267
62249: GO 62251
62251: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
62252: LD_INT 4
62254: PPUSH
62255: LD_OWVAR 2
62259: PPUSH
62260: LD_INT 0
62262: PPUSH
62263: CALL_OW 324
62267: END
// every 0 0$1 trigger StreamModeActive and sShovel do
62268: LD_EXP 49
62272: PUSH
62273: LD_EXP 86
62277: AND
62278: IFFALSE 62298
62280: GO 62282
62282: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
62283: LD_INT 19
62285: PPUSH
62286: LD_OWVAR 2
62290: PPUSH
62291: LD_INT 0
62293: PPUSH
62294: CALL_OW 324
62298: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
62299: LD_EXP 49
62303: PUSH
62304: LD_EXP 58
62308: AND
62309: IFFALSE 62411
62311: GO 62313
62313: DISABLE
62314: LD_INT 0
62316: PPUSH
62317: PPUSH
// begin enable ;
62318: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
62319: LD_ADDR_VAR 0 2
62323: PUSH
62324: LD_INT 22
62326: PUSH
62327: LD_OWVAR 2
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 34
62341: PUSH
62342: LD_INT 11
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 34
62351: PUSH
62352: LD_INT 30
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PPUSH
62368: CALL_OW 69
62372: ST_TO_ADDR
// if not tmp then
62373: LD_VAR 0 2
62377: NOT
62378: IFFALSE 62382
// exit ;
62380: GO 62411
// for i in tmp do
62382: LD_ADDR_VAR 0 1
62386: PUSH
62387: LD_VAR 0 2
62391: PUSH
62392: FOR_IN
62393: IFFALSE 62409
// begin SetLives ( i , 0 ) ;
62395: LD_VAR 0 1
62399: PPUSH
62400: LD_INT 0
62402: PPUSH
62403: CALL_OW 234
// end ;
62407: GO 62392
62409: POP
62410: POP
// end ;
62411: PPOPN 2
62413: END
// every 0 0$1 trigger StreamModeActive and sBunker do
62414: LD_EXP 49
62418: PUSH
62419: LD_EXP 59
62423: AND
62424: IFFALSE 62444
62426: GO 62428
62428: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
62429: LD_INT 32
62431: PPUSH
62432: LD_OWVAR 2
62436: PPUSH
62437: LD_INT 0
62439: PPUSH
62440: CALL_OW 324
62444: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
62445: LD_EXP 49
62449: PUSH
62450: LD_EXP 60
62454: AND
62455: IFFALSE 62636
62457: GO 62459
62459: DISABLE
62460: LD_INT 0
62462: PPUSH
62463: PPUSH
62464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
62465: LD_ADDR_VAR 0 2
62469: PUSH
62470: LD_INT 22
62472: PUSH
62473: LD_OWVAR 2
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 33
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PPUSH
62496: CALL_OW 69
62500: ST_TO_ADDR
// if not tmp then
62501: LD_VAR 0 2
62505: NOT
62506: IFFALSE 62510
// exit ;
62508: GO 62636
// side := 0 ;
62510: LD_ADDR_VAR 0 3
62514: PUSH
62515: LD_INT 0
62517: ST_TO_ADDR
// for i := 1 to 8 do
62518: LD_ADDR_VAR 0 1
62522: PUSH
62523: DOUBLE
62524: LD_INT 1
62526: DEC
62527: ST_TO_ADDR
62528: LD_INT 8
62530: PUSH
62531: FOR_TO
62532: IFFALSE 62580
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
62534: LD_OWVAR 2
62538: PUSH
62539: LD_VAR 0 1
62543: NONEQUAL
62544: PUSH
62545: LD_OWVAR 2
62549: PPUSH
62550: LD_VAR 0 1
62554: PPUSH
62555: CALL_OW 81
62559: PUSH
62560: LD_INT 2
62562: EQUAL
62563: AND
62564: IFFALSE 62578
// begin side := i ;
62566: LD_ADDR_VAR 0 3
62570: PUSH
62571: LD_VAR 0 1
62575: ST_TO_ADDR
// break ;
62576: GO 62580
// end ;
62578: GO 62531
62580: POP
62581: POP
// if not side then
62582: LD_VAR 0 3
62586: NOT
62587: IFFALSE 62591
// exit ;
62589: GO 62636
// for i := 1 to tmp do
62591: LD_ADDR_VAR 0 1
62595: PUSH
62596: DOUBLE
62597: LD_INT 1
62599: DEC
62600: ST_TO_ADDR
62601: LD_VAR 0 2
62605: PUSH
62606: FOR_TO
62607: IFFALSE 62634
// if Prob ( 60 ) then
62609: LD_INT 60
62611: PPUSH
62612: CALL_OW 13
62616: IFFALSE 62632
// SetSide ( i , side ) ;
62618: LD_VAR 0 1
62622: PPUSH
62623: LD_VAR 0 3
62627: PPUSH
62628: CALL_OW 235
62632: GO 62606
62634: POP
62635: POP
// end ;
62636: PPOPN 3
62638: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
62639: LD_EXP 49
62643: PUSH
62644: LD_EXP 62
62648: AND
62649: IFFALSE 62768
62651: GO 62653
62653: DISABLE
62654: LD_INT 0
62656: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
62657: LD_ADDR_VAR 0 1
62661: PUSH
62662: LD_INT 22
62664: PUSH
62665: LD_OWVAR 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 21
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 3
62686: PUSH
62687: LD_INT 23
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: PPUSH
62706: CALL_OW 69
62710: PUSH
62711: FOR_IN
62712: IFFALSE 62766
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
62714: LD_VAR 0 1
62718: PPUSH
62719: CALL_OW 257
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: LD_INT 2
62729: PUSH
62730: LD_INT 3
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: IN
62742: IFFALSE 62764
// SetClass ( un , rand ( 1 , 4 ) ) ;
62744: LD_VAR 0 1
62748: PPUSH
62749: LD_INT 1
62751: PPUSH
62752: LD_INT 4
62754: PPUSH
62755: CALL_OW 12
62759: PPUSH
62760: CALL_OW 336
62764: GO 62711
62766: POP
62767: POP
// end ;
62768: PPOPN 1
62770: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
62771: LD_EXP 49
62775: PUSH
62776: LD_EXP 61
62780: AND
62781: IFFALSE 62860
62783: GO 62785
62785: DISABLE
62786: LD_INT 0
62788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
62789: LD_ADDR_VAR 0 1
62793: PUSH
62794: LD_INT 22
62796: PUSH
62797: LD_OWVAR 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 21
62808: PUSH
62809: LD_INT 3
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PPUSH
62820: CALL_OW 69
62824: ST_TO_ADDR
// if not tmp then
62825: LD_VAR 0 1
62829: NOT
62830: IFFALSE 62834
// exit ;
62832: GO 62860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
62834: LD_VAR 0 1
62838: PUSH
62839: LD_INT 1
62841: PPUSH
62842: LD_VAR 0 1
62846: PPUSH
62847: CALL_OW 12
62851: ARRAY
62852: PPUSH
62853: LD_INT 100
62855: PPUSH
62856: CALL_OW 234
// end ;
62860: PPOPN 1
62862: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
62863: LD_EXP 49
62867: PUSH
62868: LD_EXP 63
62872: AND
62873: IFFALSE 62971
62875: GO 62877
62877: DISABLE
62878: LD_INT 0
62880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62881: LD_ADDR_VAR 0 1
62885: PUSH
62886: LD_INT 22
62888: PUSH
62889: LD_OWVAR 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 21
62900: PUSH
62901: LD_INT 1
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: PPUSH
62912: CALL_OW 69
62916: ST_TO_ADDR
// if not tmp then
62917: LD_VAR 0 1
62921: NOT
62922: IFFALSE 62926
// exit ;
62924: GO 62971
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
62926: LD_VAR 0 1
62930: PUSH
62931: LD_INT 1
62933: PPUSH
62934: LD_VAR 0 1
62938: PPUSH
62939: CALL_OW 12
62943: ARRAY
62944: PPUSH
62945: LD_INT 1
62947: PPUSH
62948: LD_INT 4
62950: PPUSH
62951: CALL_OW 12
62955: PPUSH
62956: LD_INT 3000
62958: PPUSH
62959: LD_INT 9000
62961: PPUSH
62962: CALL_OW 12
62966: PPUSH
62967: CALL_OW 492
// end ;
62971: PPOPN 1
62973: END
// every 0 0$1 trigger StreamModeActive and sDepot do
62974: LD_EXP 49
62978: PUSH
62979: LD_EXP 64
62983: AND
62984: IFFALSE 63004
62986: GO 62988
62988: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
62989: LD_INT 1
62991: PPUSH
62992: LD_OWVAR 2
62996: PPUSH
62997: LD_INT 0
62999: PPUSH
63000: CALL_OW 324
63004: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
63005: LD_EXP 49
63009: PUSH
63010: LD_EXP 65
63014: AND
63015: IFFALSE 63098
63017: GO 63019
63019: DISABLE
63020: LD_INT 0
63022: PPUSH
63023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
63024: LD_ADDR_VAR 0 2
63028: PUSH
63029: LD_INT 22
63031: PUSH
63032: LD_OWVAR 2
63036: PUSH
63037: EMPTY
63038: LIST
63039: LIST
63040: PUSH
63041: LD_INT 21
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PPUSH
63055: CALL_OW 69
63059: ST_TO_ADDR
// if not tmp then
63060: LD_VAR 0 2
63064: NOT
63065: IFFALSE 63069
// exit ;
63067: GO 63098
// for i in tmp do
63069: LD_ADDR_VAR 0 1
63073: PUSH
63074: LD_VAR 0 2
63078: PUSH
63079: FOR_IN
63080: IFFALSE 63096
// SetBLevel ( i , 10 ) ;
63082: LD_VAR 0 1
63086: PPUSH
63087: LD_INT 10
63089: PPUSH
63090: CALL_OW 241
63094: GO 63079
63096: POP
63097: POP
// end ;
63098: PPOPN 2
63100: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
63101: LD_EXP 49
63105: PUSH
63106: LD_EXP 66
63110: AND
63111: IFFALSE 63222
63113: GO 63115
63115: DISABLE
63116: LD_INT 0
63118: PPUSH
63119: PPUSH
63120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63121: LD_ADDR_VAR 0 3
63125: PUSH
63126: LD_INT 22
63128: PUSH
63129: LD_OWVAR 2
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: PUSH
63138: LD_INT 25
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PPUSH
63152: CALL_OW 69
63156: ST_TO_ADDR
// if not tmp then
63157: LD_VAR 0 3
63161: NOT
63162: IFFALSE 63166
// exit ;
63164: GO 63222
// un := tmp [ rand ( 1 , tmp ) ] ;
63166: LD_ADDR_VAR 0 2
63170: PUSH
63171: LD_VAR 0 3
63175: PUSH
63176: LD_INT 1
63178: PPUSH
63179: LD_VAR 0 3
63183: PPUSH
63184: CALL_OW 12
63188: ARRAY
63189: ST_TO_ADDR
// if Crawls ( un ) then
63190: LD_VAR 0 2
63194: PPUSH
63195: CALL_OW 318
63199: IFFALSE 63210
// ComWalk ( un ) ;
63201: LD_VAR 0 2
63205: PPUSH
63206: CALL_OW 138
// SetClass ( un , class_sniper ) ;
63210: LD_VAR 0 2
63214: PPUSH
63215: LD_INT 5
63217: PPUSH
63218: CALL_OW 336
// end ;
63222: PPOPN 3
63224: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
63225: LD_EXP 49
63229: PUSH
63230: LD_EXP 67
63234: AND
63235: PUSH
63236: LD_OWVAR 67
63240: PUSH
63241: LD_INT 4
63243: LESS
63244: AND
63245: IFFALSE 63264
63247: GO 63249
63249: DISABLE
// begin Difficulty := Difficulty + 1 ;
63250: LD_ADDR_OWVAR 67
63254: PUSH
63255: LD_OWVAR 67
63259: PUSH
63260: LD_INT 1
63262: PLUS
63263: ST_TO_ADDR
// end ;
63264: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
63265: LD_EXP 49
63269: PUSH
63270: LD_EXP 68
63274: AND
63275: IFFALSE 63378
63277: GO 63279
63279: DISABLE
63280: LD_INT 0
63282: PPUSH
// begin for i := 1 to 5 do
63283: LD_ADDR_VAR 0 1
63287: PUSH
63288: DOUBLE
63289: LD_INT 1
63291: DEC
63292: ST_TO_ADDR
63293: LD_INT 5
63295: PUSH
63296: FOR_TO
63297: IFFALSE 63376
// begin uc_nation := nation_nature ;
63299: LD_ADDR_OWVAR 21
63303: PUSH
63304: LD_INT 0
63306: ST_TO_ADDR
// uc_side := 0 ;
63307: LD_ADDR_OWVAR 20
63311: PUSH
63312: LD_INT 0
63314: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63315: LD_ADDR_OWVAR 29
63319: PUSH
63320: LD_INT 12
63322: PUSH
63323: LD_INT 12
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: ST_TO_ADDR
// hc_agressivity := 20 ;
63330: LD_ADDR_OWVAR 35
63334: PUSH
63335: LD_INT 20
63337: ST_TO_ADDR
// hc_class := class_tiger ;
63338: LD_ADDR_OWVAR 28
63342: PUSH
63343: LD_INT 14
63345: ST_TO_ADDR
// hc_gallery :=  ;
63346: LD_ADDR_OWVAR 33
63350: PUSH
63351: LD_STRING 
63353: ST_TO_ADDR
// hc_name :=  ;
63354: LD_ADDR_OWVAR 26
63358: PUSH
63359: LD_STRING 
63361: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
63362: CALL_OW 44
63366: PPUSH
63367: LD_INT 0
63369: PPUSH
63370: CALL_OW 51
// end ;
63374: GO 63296
63376: POP
63377: POP
// end ;
63378: PPOPN 1
63380: END
// every 0 0$1 trigger StreamModeActive and sBomb do
63381: LD_EXP 49
63385: PUSH
63386: LD_EXP 69
63390: AND
63391: IFFALSE 63400
63393: GO 63395
63395: DISABLE
// StreamSibBomb ;
63396: CALL 63401 0 0
63400: END
// export function StreamSibBomb ; var i , x , y ; begin
63401: LD_INT 0
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
// result := false ;
63407: LD_ADDR_VAR 0 1
63411: PUSH
63412: LD_INT 0
63414: ST_TO_ADDR
// for i := 1 to 16 do
63415: LD_ADDR_VAR 0 2
63419: PUSH
63420: DOUBLE
63421: LD_INT 1
63423: DEC
63424: ST_TO_ADDR
63425: LD_INT 16
63427: PUSH
63428: FOR_TO
63429: IFFALSE 63628
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63431: LD_ADDR_VAR 0 3
63435: PUSH
63436: LD_INT 10
63438: PUSH
63439: LD_INT 20
63441: PUSH
63442: LD_INT 30
63444: PUSH
63445: LD_INT 40
63447: PUSH
63448: LD_INT 50
63450: PUSH
63451: LD_INT 60
63453: PUSH
63454: LD_INT 70
63456: PUSH
63457: LD_INT 80
63459: PUSH
63460: LD_INT 90
63462: PUSH
63463: LD_INT 100
63465: PUSH
63466: LD_INT 110
63468: PUSH
63469: LD_INT 120
63471: PUSH
63472: LD_INT 130
63474: PUSH
63475: LD_INT 140
63477: PUSH
63478: LD_INT 150
63480: PUSH
63481: EMPTY
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 1
63500: PPUSH
63501: LD_INT 15
63503: PPUSH
63504: CALL_OW 12
63508: ARRAY
63509: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_INT 10
63517: PUSH
63518: LD_INT 20
63520: PUSH
63521: LD_INT 30
63523: PUSH
63524: LD_INT 40
63526: PUSH
63527: LD_INT 50
63529: PUSH
63530: LD_INT 60
63532: PUSH
63533: LD_INT 70
63535: PUSH
63536: LD_INT 80
63538: PUSH
63539: LD_INT 90
63541: PUSH
63542: LD_INT 100
63544: PUSH
63545: LD_INT 110
63547: PUSH
63548: LD_INT 120
63550: PUSH
63551: LD_INT 130
63553: PUSH
63554: LD_INT 140
63556: PUSH
63557: LD_INT 150
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: PPUSH
63580: LD_INT 15
63582: PPUSH
63583: CALL_OW 12
63587: ARRAY
63588: ST_TO_ADDR
// if ValidHex ( x , y ) then
63589: LD_VAR 0 3
63593: PPUSH
63594: LD_VAR 0 4
63598: PPUSH
63599: CALL_OW 488
63603: IFFALSE 63626
// begin result := [ x , y ] ;
63605: LD_ADDR_VAR 0 1
63609: PUSH
63610: LD_VAR 0 3
63614: PUSH
63615: LD_VAR 0 4
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: ST_TO_ADDR
// break ;
63624: GO 63628
// end ; end ;
63626: GO 63428
63628: POP
63629: POP
// if result then
63630: LD_VAR 0 1
63634: IFFALSE 63694
// begin ToLua ( playSibBomb() ) ;
63636: LD_STRING playSibBomb()
63638: PPUSH
63639: CALL_OW 559
// wait ( 0 0$14 ) ;
63643: LD_INT 490
63645: PPUSH
63646: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
63650: LD_VAR 0 1
63654: PUSH
63655: LD_INT 1
63657: ARRAY
63658: PPUSH
63659: LD_VAR 0 1
63663: PUSH
63664: LD_INT 2
63666: ARRAY
63667: PPUSH
63668: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
63672: LD_VAR 0 1
63676: PUSH
63677: LD_INT 1
63679: ARRAY
63680: PPUSH
63681: LD_VAR 0 1
63685: PUSH
63686: LD_INT 2
63688: ARRAY
63689: PPUSH
63690: CALL_OW 429
// end ; end ;
63694: LD_VAR 0 1
63698: RET
// every 0 0$1 trigger StreamModeActive and sReset do
63699: LD_EXP 49
63703: PUSH
63704: LD_EXP 71
63708: AND
63709: IFFALSE 63721
63711: GO 63713
63713: DISABLE
// YouLost (  ) ;
63714: LD_STRING 
63716: PPUSH
63717: CALL_OW 104
63721: END
// every 0 0$1 trigger StreamModeActive and sFog do
63722: LD_EXP 49
63726: PUSH
63727: LD_EXP 70
63731: AND
63732: IFFALSE 63746
63734: GO 63736
63736: DISABLE
// FogOff ( your_side ) ;
63737: LD_OWVAR 2
63741: PPUSH
63742: CALL_OW 344
63746: END
// every 0 0$1 trigger StreamModeActive and sSun do
63747: LD_EXP 49
63751: PUSH
63752: LD_EXP 72
63756: AND
63757: IFFALSE 63785
63759: GO 63761
63761: DISABLE
// begin solar_recharge_percent := 0 ;
63762: LD_ADDR_OWVAR 79
63766: PUSH
63767: LD_INT 0
63769: ST_TO_ADDR
// wait ( 5 5$00 ) ;
63770: LD_INT 10500
63772: PPUSH
63773: CALL_OW 67
// solar_recharge_percent := 100 ;
63777: LD_ADDR_OWVAR 79
63781: PUSH
63782: LD_INT 100
63784: ST_TO_ADDR
// end ;
63785: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
63786: LD_EXP 49
63790: PUSH
63791: LD_EXP 73
63795: AND
63796: IFFALSE 64035
63798: GO 63800
63800: DISABLE
63801: LD_INT 0
63803: PPUSH
63804: PPUSH
63805: PPUSH
// begin tmp := [ ] ;
63806: LD_ADDR_VAR 0 3
63810: PUSH
63811: EMPTY
63812: ST_TO_ADDR
// for i := 1 to 6 do
63813: LD_ADDR_VAR 0 1
63817: PUSH
63818: DOUBLE
63819: LD_INT 1
63821: DEC
63822: ST_TO_ADDR
63823: LD_INT 6
63825: PUSH
63826: FOR_TO
63827: IFFALSE 63932
// begin uc_nation := nation_nature ;
63829: LD_ADDR_OWVAR 21
63833: PUSH
63834: LD_INT 0
63836: ST_TO_ADDR
// uc_side := 0 ;
63837: LD_ADDR_OWVAR 20
63841: PUSH
63842: LD_INT 0
63844: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
63845: LD_ADDR_OWVAR 29
63849: PUSH
63850: LD_INT 12
63852: PUSH
63853: LD_INT 12
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: ST_TO_ADDR
// hc_agressivity := 20 ;
63860: LD_ADDR_OWVAR 35
63864: PUSH
63865: LD_INT 20
63867: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
63868: LD_ADDR_OWVAR 28
63872: PUSH
63873: LD_INT 17
63875: ST_TO_ADDR
// hc_gallery :=  ;
63876: LD_ADDR_OWVAR 33
63880: PUSH
63881: LD_STRING 
63883: ST_TO_ADDR
// hc_name :=  ;
63884: LD_ADDR_OWVAR 26
63888: PUSH
63889: LD_STRING 
63891: ST_TO_ADDR
// un := CreateHuman ;
63892: LD_ADDR_VAR 0 2
63896: PUSH
63897: CALL_OW 44
63901: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
63902: LD_VAR 0 2
63906: PPUSH
63907: LD_INT 1
63909: PPUSH
63910: CALL_OW 51
// tmp := tmp ^ un ;
63914: LD_ADDR_VAR 0 3
63918: PUSH
63919: LD_VAR 0 3
63923: PUSH
63924: LD_VAR 0 2
63928: ADD
63929: ST_TO_ADDR
// end ;
63930: GO 63826
63932: POP
63933: POP
// repeat wait ( 0 0$1 ) ;
63934: LD_INT 35
63936: PPUSH
63937: CALL_OW 67
// for un in tmp do
63941: LD_ADDR_VAR 0 2
63945: PUSH
63946: LD_VAR 0 3
63950: PUSH
63951: FOR_IN
63952: IFFALSE 64026
// begin if IsDead ( un ) then
63954: LD_VAR 0 2
63958: PPUSH
63959: CALL_OW 301
63963: IFFALSE 63983
// begin tmp := tmp diff un ;
63965: LD_ADDR_VAR 0 3
63969: PUSH
63970: LD_VAR 0 3
63974: PUSH
63975: LD_VAR 0 2
63979: DIFF
63980: ST_TO_ADDR
// continue ;
63981: GO 63951
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
63983: LD_VAR 0 2
63987: PPUSH
63988: LD_INT 3
63990: PUSH
63991: LD_INT 22
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PPUSH
64005: CALL_OW 69
64009: PPUSH
64010: LD_VAR 0 2
64014: PPUSH
64015: CALL_OW 74
64019: PPUSH
64020: CALL_OW 115
// end ;
64024: GO 63951
64026: POP
64027: POP
// until not tmp ;
64028: LD_VAR 0 3
64032: NOT
64033: IFFALSE 63934
// end ;
64035: PPOPN 3
64037: END
// every 0 0$1 trigger StreamModeActive and sTroll do
64038: LD_EXP 49
64042: PUSH
64043: LD_EXP 74
64047: AND
64048: IFFALSE 64102
64050: GO 64052
64052: DISABLE
// begin ToLua ( displayTroll(); ) ;
64053: LD_STRING displayTroll();
64055: PPUSH
64056: CALL_OW 559
// wait ( 3 3$00 ) ;
64060: LD_INT 6300
64062: PPUSH
64063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64067: LD_STRING hideTroll();
64069: PPUSH
64070: CALL_OW 559
// wait ( 1 1$00 ) ;
64074: LD_INT 2100
64076: PPUSH
64077: CALL_OW 67
// ToLua ( displayTroll(); ) ;
64081: LD_STRING displayTroll();
64083: PPUSH
64084: CALL_OW 559
// wait ( 1 1$00 ) ;
64088: LD_INT 2100
64090: PPUSH
64091: CALL_OW 67
// ToLua ( hideTroll(); ) ;
64095: LD_STRING hideTroll();
64097: PPUSH
64098: CALL_OW 559
// end ;
64102: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
64103: LD_EXP 49
64107: PUSH
64108: LD_EXP 75
64112: AND
64113: IFFALSE 64176
64115: GO 64117
64117: DISABLE
64118: LD_INT 0
64120: PPUSH
// begin p := 0 ;
64121: LD_ADDR_VAR 0 1
64125: PUSH
64126: LD_INT 0
64128: ST_TO_ADDR
// repeat game_speed := 1 ;
64129: LD_ADDR_OWVAR 65
64133: PUSH
64134: LD_INT 1
64136: ST_TO_ADDR
// wait ( 0 0$1 ) ;
64137: LD_INT 35
64139: PPUSH
64140: CALL_OW 67
// p := p + 1 ;
64144: LD_ADDR_VAR 0 1
64148: PUSH
64149: LD_VAR 0 1
64153: PUSH
64154: LD_INT 1
64156: PLUS
64157: ST_TO_ADDR
// until p >= 60 ;
64158: LD_VAR 0 1
64162: PUSH
64163: LD_INT 60
64165: GREATEREQUAL
64166: IFFALSE 64129
// game_speed := 4 ;
64168: LD_ADDR_OWVAR 65
64172: PUSH
64173: LD_INT 4
64175: ST_TO_ADDR
// end ;
64176: PPOPN 1
64178: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
64179: LD_EXP 49
64183: PUSH
64184: LD_EXP 76
64188: AND
64189: IFFALSE 64335
64191: GO 64193
64193: DISABLE
64194: LD_INT 0
64196: PPUSH
64197: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
64198: LD_ADDR_VAR 0 1
64202: PUSH
64203: LD_INT 22
64205: PUSH
64206: LD_OWVAR 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 2
64217: PUSH
64218: LD_INT 30
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 30
64230: PUSH
64231: LD_INT 1
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: LIST
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PPUSH
64247: CALL_OW 69
64251: ST_TO_ADDR
// if not depot then
64252: LD_VAR 0 1
64256: NOT
64257: IFFALSE 64261
// exit ;
64259: GO 64335
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
64261: LD_ADDR_VAR 0 2
64265: PUSH
64266: LD_VAR 0 1
64270: PUSH
64271: LD_INT 1
64273: PPUSH
64274: LD_VAR 0 1
64278: PPUSH
64279: CALL_OW 12
64283: ARRAY
64284: PPUSH
64285: CALL_OW 274
64289: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
64290: LD_VAR 0 2
64294: PPUSH
64295: LD_INT 1
64297: PPUSH
64298: LD_INT 0
64300: PPUSH
64301: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
64305: LD_VAR 0 2
64309: PPUSH
64310: LD_INT 2
64312: PPUSH
64313: LD_INT 0
64315: PPUSH
64316: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
64320: LD_VAR 0 2
64324: PPUSH
64325: LD_INT 3
64327: PPUSH
64328: LD_INT 0
64330: PPUSH
64331: CALL_OW 277
// end ;
64335: PPOPN 2
64337: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
64338: LD_EXP 49
64342: PUSH
64343: LD_EXP 77
64347: AND
64348: IFFALSE 64445
64350: GO 64352
64352: DISABLE
64353: LD_INT 0
64355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64356: LD_ADDR_VAR 0 1
64360: PUSH
64361: LD_INT 22
64363: PUSH
64364: LD_OWVAR 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 21
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 3
64385: PUSH
64386: LD_INT 23
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: LIST
64404: PPUSH
64405: CALL_OW 69
64409: ST_TO_ADDR
// if not tmp then
64410: LD_VAR 0 1
64414: NOT
64415: IFFALSE 64419
// exit ;
64417: GO 64445
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
64419: LD_VAR 0 1
64423: PUSH
64424: LD_INT 1
64426: PPUSH
64427: LD_VAR 0 1
64431: PPUSH
64432: CALL_OW 12
64436: ARRAY
64437: PPUSH
64438: LD_INT 200
64440: PPUSH
64441: CALL_OW 234
// end ;
64445: PPOPN 1
64447: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
64448: LD_EXP 49
64452: PUSH
64453: LD_EXP 78
64457: AND
64458: IFFALSE 64537
64460: GO 64462
64462: DISABLE
64463: LD_INT 0
64465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
64466: LD_ADDR_VAR 0 1
64470: PUSH
64471: LD_INT 22
64473: PUSH
64474: LD_OWVAR 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 21
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PPUSH
64497: CALL_OW 69
64501: ST_TO_ADDR
// if not tmp then
64502: LD_VAR 0 1
64506: NOT
64507: IFFALSE 64511
// exit ;
64509: GO 64537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
64511: LD_VAR 0 1
64515: PUSH
64516: LD_INT 1
64518: PPUSH
64519: LD_VAR 0 1
64523: PPUSH
64524: CALL_OW 12
64528: ARRAY
64529: PPUSH
64530: LD_INT 60
64532: PPUSH
64533: CALL_OW 234
// end ;
64537: PPOPN 1
64539: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
64540: LD_EXP 49
64544: PUSH
64545: LD_EXP 79
64549: AND
64550: IFFALSE 64649
64552: GO 64554
64554: DISABLE
64555: LD_INT 0
64557: PPUSH
64558: PPUSH
// begin enable ;
64559: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
64560: LD_ADDR_VAR 0 1
64564: PUSH
64565: LD_INT 22
64567: PUSH
64568: LD_OWVAR 2
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 61
64579: PUSH
64580: EMPTY
64581: LIST
64582: PUSH
64583: LD_INT 33
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: PPUSH
64598: CALL_OW 69
64602: ST_TO_ADDR
// if not tmp then
64603: LD_VAR 0 1
64607: NOT
64608: IFFALSE 64612
// exit ;
64610: GO 64649
// for i in tmp do
64612: LD_ADDR_VAR 0 2
64616: PUSH
64617: LD_VAR 0 1
64621: PUSH
64622: FOR_IN
64623: IFFALSE 64647
// if IsControledBy ( i ) then
64625: LD_VAR 0 2
64629: PPUSH
64630: CALL_OW 312
64634: IFFALSE 64645
// ComUnlink ( i ) ;
64636: LD_VAR 0 2
64640: PPUSH
64641: CALL_OW 136
64645: GO 64622
64647: POP
64648: POP
// end ;
64649: PPOPN 2
64651: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
64652: LD_EXP 49
64656: PUSH
64657: LD_EXP 80
64661: AND
64662: IFFALSE 64802
64664: GO 64666
64666: DISABLE
64667: LD_INT 0
64669: PPUSH
64670: PPUSH
// begin ToLua ( displayPowell(); ) ;
64671: LD_STRING displayPowell();
64673: PPUSH
64674: CALL_OW 559
// uc_side := 0 ;
64678: LD_ADDR_OWVAR 20
64682: PUSH
64683: LD_INT 0
64685: ST_TO_ADDR
// uc_nation := 2 ;
64686: LD_ADDR_OWVAR 21
64690: PUSH
64691: LD_INT 2
64693: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
64694: LD_ADDR_OWVAR 37
64698: PUSH
64699: LD_INT 14
64701: ST_TO_ADDR
// vc_engine := engine_siberite ;
64702: LD_ADDR_OWVAR 39
64706: PUSH
64707: LD_INT 3
64709: ST_TO_ADDR
// vc_control := control_apeman ;
64710: LD_ADDR_OWVAR 38
64714: PUSH
64715: LD_INT 5
64717: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
64718: LD_ADDR_OWVAR 40
64722: PUSH
64723: LD_INT 29
64725: ST_TO_ADDR
// un := CreateVehicle ;
64726: LD_ADDR_VAR 0 2
64730: PUSH
64731: CALL_OW 45
64735: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64736: LD_VAR 0 2
64740: PPUSH
64741: LD_INT 1
64743: PPUSH
64744: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64748: LD_INT 35
64750: PPUSH
64751: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64755: LD_VAR 0 2
64759: PPUSH
64760: LD_INT 22
64762: PUSH
64763: LD_OWVAR 2
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PPUSH
64772: CALL_OW 69
64776: PPUSH
64777: LD_VAR 0 2
64781: PPUSH
64782: CALL_OW 74
64786: PPUSH
64787: CALL_OW 115
// until IsDead ( un ) ;
64791: LD_VAR 0 2
64795: PPUSH
64796: CALL_OW 301
64800: IFFALSE 64748
// end ;
64802: PPOPN 2
64804: END
// every 0 0$1 trigger StreamModeActive and sStu do
64805: LD_EXP 49
64809: PUSH
64810: LD_EXP 88
64814: AND
64815: IFFALSE 64831
64817: GO 64819
64819: DISABLE
// begin ToLua ( displayStucuk(); ) ;
64820: LD_STRING displayStucuk();
64822: PPUSH
64823: CALL_OW 559
// ResetFog ;
64827: CALL_OW 335
// end ;
64831: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
64832: LD_EXP 49
64836: PUSH
64837: LD_EXP 81
64841: AND
64842: IFFALSE 64983
64844: GO 64846
64846: DISABLE
64847: LD_INT 0
64849: PPUSH
64850: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64851: LD_ADDR_VAR 0 2
64855: PUSH
64856: LD_INT 22
64858: PUSH
64859: LD_OWVAR 2
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: PUSH
64868: LD_INT 21
64870: PUSH
64871: LD_INT 1
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PPUSH
64882: CALL_OW 69
64886: ST_TO_ADDR
// if not tmp then
64887: LD_VAR 0 2
64891: NOT
64892: IFFALSE 64896
// exit ;
64894: GO 64983
// un := tmp [ rand ( 1 , tmp ) ] ;
64896: LD_ADDR_VAR 0 1
64900: PUSH
64901: LD_VAR 0 2
64905: PUSH
64906: LD_INT 1
64908: PPUSH
64909: LD_VAR 0 2
64913: PPUSH
64914: CALL_OW 12
64918: ARRAY
64919: ST_TO_ADDR
// SetSide ( un , 0 ) ;
64920: LD_VAR 0 1
64924: PPUSH
64925: LD_INT 0
64927: PPUSH
64928: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
64932: LD_VAR 0 1
64936: PPUSH
64937: LD_OWVAR 3
64941: PUSH
64942: LD_VAR 0 1
64946: DIFF
64947: PPUSH
64948: LD_VAR 0 1
64952: PPUSH
64953: CALL_OW 74
64957: PPUSH
64958: CALL_OW 115
// wait ( 0 0$20 ) ;
64962: LD_INT 700
64964: PPUSH
64965: CALL_OW 67
// SetSide ( un , your_side ) ;
64969: LD_VAR 0 1
64973: PPUSH
64974: LD_OWVAR 2
64978: PPUSH
64979: CALL_OW 235
// end ;
64983: PPOPN 2
64985: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
64986: LD_EXP 49
64990: PUSH
64991: LD_EXP 82
64995: AND
64996: IFFALSE 65102
64998: GO 65000
65000: DISABLE
65001: LD_INT 0
65003: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65004: LD_ADDR_VAR 0 1
65008: PUSH
65009: LD_INT 22
65011: PUSH
65012: LD_OWVAR 2
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: LD_INT 30
65026: PUSH
65027: LD_INT 0
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: LD_INT 30
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: EMPTY
65045: LIST
65046: LIST
65047: LIST
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PPUSH
65053: CALL_OW 69
65057: ST_TO_ADDR
// if not depot then
65058: LD_VAR 0 1
65062: NOT
65063: IFFALSE 65067
// exit ;
65065: GO 65102
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
65067: LD_VAR 0 1
65071: PUSH
65072: LD_INT 1
65074: ARRAY
65075: PPUSH
65076: CALL_OW 250
65080: PPUSH
65081: LD_VAR 0 1
65085: PUSH
65086: LD_INT 1
65088: ARRAY
65089: PPUSH
65090: CALL_OW 251
65094: PPUSH
65095: LD_INT 70
65097: PPUSH
65098: CALL_OW 495
// end ;
65102: PPOPN 1
65104: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
65105: LD_EXP 49
65109: PUSH
65110: LD_EXP 83
65114: AND
65115: IFFALSE 65326
65117: GO 65119
65119: DISABLE
65120: LD_INT 0
65122: PPUSH
65123: PPUSH
65124: PPUSH
65125: PPUSH
65126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
65127: LD_ADDR_VAR 0 5
65131: PUSH
65132: LD_INT 22
65134: PUSH
65135: LD_OWVAR 2
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: PUSH
65144: LD_INT 21
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: EMPTY
65155: LIST
65156: LIST
65157: PPUSH
65158: CALL_OW 69
65162: ST_TO_ADDR
// if not tmp then
65163: LD_VAR 0 5
65167: NOT
65168: IFFALSE 65172
// exit ;
65170: GO 65326
// for i in tmp do
65172: LD_ADDR_VAR 0 1
65176: PUSH
65177: LD_VAR 0 5
65181: PUSH
65182: FOR_IN
65183: IFFALSE 65324
// begin d := rand ( 0 , 5 ) ;
65185: LD_ADDR_VAR 0 4
65189: PUSH
65190: LD_INT 0
65192: PPUSH
65193: LD_INT 5
65195: PPUSH
65196: CALL_OW 12
65200: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
65201: LD_ADDR_VAR 0 2
65205: PUSH
65206: LD_VAR 0 1
65210: PPUSH
65211: CALL_OW 250
65215: PPUSH
65216: LD_VAR 0 4
65220: PPUSH
65221: LD_INT 3
65223: PPUSH
65224: LD_INT 12
65226: PPUSH
65227: CALL_OW 12
65231: PPUSH
65232: CALL_OW 272
65236: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
65237: LD_ADDR_VAR 0 3
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 251
65251: PPUSH
65252: LD_VAR 0 4
65256: PPUSH
65257: LD_INT 3
65259: PPUSH
65260: LD_INT 12
65262: PPUSH
65263: CALL_OW 12
65267: PPUSH
65268: CALL_OW 273
65272: ST_TO_ADDR
// if ValidHex ( x , y ) then
65273: LD_VAR 0 2
65277: PPUSH
65278: LD_VAR 0 3
65282: PPUSH
65283: CALL_OW 488
65287: IFFALSE 65322
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
65289: LD_VAR 0 1
65293: PPUSH
65294: LD_VAR 0 2
65298: PPUSH
65299: LD_VAR 0 3
65303: PPUSH
65304: LD_INT 3
65306: PPUSH
65307: LD_INT 6
65309: PPUSH
65310: CALL_OW 12
65314: PPUSH
65315: LD_INT 1
65317: PPUSH
65318: CALL_OW 483
// end ;
65322: GO 65182
65324: POP
65325: POP
// end ;
65326: PPOPN 5
65328: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
65329: LD_EXP 49
65333: PUSH
65334: LD_EXP 84
65338: AND
65339: IFFALSE 65433
65341: GO 65343
65343: DISABLE
65344: LD_INT 0
65346: PPUSH
65347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
65348: LD_ADDR_VAR 0 2
65352: PUSH
65353: LD_INT 22
65355: PUSH
65356: LD_OWVAR 2
65360: PUSH
65361: EMPTY
65362: LIST
65363: LIST
65364: PUSH
65365: LD_INT 32
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 21
65377: PUSH
65378: LD_INT 2
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: LIST
65389: PPUSH
65390: CALL_OW 69
65394: ST_TO_ADDR
// if not tmp then
65395: LD_VAR 0 2
65399: NOT
65400: IFFALSE 65404
// exit ;
65402: GO 65433
// for i in tmp do
65404: LD_ADDR_VAR 0 1
65408: PUSH
65409: LD_VAR 0 2
65413: PUSH
65414: FOR_IN
65415: IFFALSE 65431
// SetFuel ( i , 0 ) ;
65417: LD_VAR 0 1
65421: PPUSH
65422: LD_INT 0
65424: PPUSH
65425: CALL_OW 240
65429: GO 65414
65431: POP
65432: POP
// end ;
65433: PPOPN 2
65435: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
65436: LD_EXP 49
65440: PUSH
65441: LD_EXP 85
65445: AND
65446: IFFALSE 65512
65448: GO 65450
65450: DISABLE
65451: LD_INT 0
65453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65454: LD_ADDR_VAR 0 1
65458: PUSH
65459: LD_INT 22
65461: PUSH
65462: LD_OWVAR 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 30
65473: PUSH
65474: LD_INT 29
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PPUSH
65485: CALL_OW 69
65489: ST_TO_ADDR
// if not tmp then
65490: LD_VAR 0 1
65494: NOT
65495: IFFALSE 65499
// exit ;
65497: GO 65512
// DestroyUnit ( tmp [ 1 ] ) ;
65499: LD_VAR 0 1
65503: PUSH
65504: LD_INT 1
65506: ARRAY
65507: PPUSH
65508: CALL_OW 65
// end ;
65512: PPOPN 1
65514: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
65515: LD_EXP 49
65519: PUSH
65520: LD_EXP 87
65524: AND
65525: IFFALSE 65654
65527: GO 65529
65529: DISABLE
65530: LD_INT 0
65532: PPUSH
// begin uc_side := 0 ;
65533: LD_ADDR_OWVAR 20
65537: PUSH
65538: LD_INT 0
65540: ST_TO_ADDR
// uc_nation := nation_arabian ;
65541: LD_ADDR_OWVAR 21
65545: PUSH
65546: LD_INT 2
65548: ST_TO_ADDR
// hc_gallery :=  ;
65549: LD_ADDR_OWVAR 33
65553: PUSH
65554: LD_STRING 
65556: ST_TO_ADDR
// hc_name :=  ;
65557: LD_ADDR_OWVAR 26
65561: PUSH
65562: LD_STRING 
65564: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
65565: LD_INT 1
65567: PPUSH
65568: LD_INT 11
65570: PPUSH
65571: LD_INT 10
65573: PPUSH
65574: CALL_OW 380
// un := CreateHuman ;
65578: LD_ADDR_VAR 0 1
65582: PUSH
65583: CALL_OW 44
65587: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65588: LD_VAR 0 1
65592: PPUSH
65593: LD_INT 1
65595: PPUSH
65596: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
65600: LD_INT 35
65602: PPUSH
65603: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
65607: LD_VAR 0 1
65611: PPUSH
65612: LD_INT 22
65614: PUSH
65615: LD_OWVAR 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PPUSH
65624: CALL_OW 69
65628: PPUSH
65629: LD_VAR 0 1
65633: PPUSH
65634: CALL_OW 74
65638: PPUSH
65639: CALL_OW 115
// until IsDead ( un ) ;
65643: LD_VAR 0 1
65647: PPUSH
65648: CALL_OW 301
65652: IFFALSE 65600
// end ;
65654: PPOPN 1
65656: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
65657: LD_EXP 49
65661: PUSH
65662: LD_EXP 89
65666: AND
65667: IFFALSE 65679
65669: GO 65671
65671: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
65672: LD_STRING earthquake(getX(game), 0, 32)
65674: PPUSH
65675: CALL_OW 559
65679: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
65680: LD_EXP 49
65684: PUSH
65685: LD_EXP 90
65689: AND
65690: IFFALSE 65781
65692: GO 65694
65694: DISABLE
65695: LD_INT 0
65697: PPUSH
// begin enable ;
65698: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
65699: LD_ADDR_VAR 0 1
65703: PUSH
65704: LD_INT 22
65706: PUSH
65707: LD_OWVAR 2
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 21
65718: PUSH
65719: LD_INT 2
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 33
65728: PUSH
65729: LD_INT 3
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: PPUSH
65741: CALL_OW 69
65745: ST_TO_ADDR
// if not tmp then
65746: LD_VAR 0 1
65750: NOT
65751: IFFALSE 65755
// exit ;
65753: GO 65781
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65755: LD_VAR 0 1
65759: PUSH
65760: LD_INT 1
65762: PPUSH
65763: LD_VAR 0 1
65767: PPUSH
65768: CALL_OW 12
65772: ARRAY
65773: PPUSH
65774: LD_INT 1
65776: PPUSH
65777: CALL_OW 234
// end ;
65781: PPOPN 1
65783: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
65784: LD_EXP 49
65788: PUSH
65789: LD_EXP 91
65793: AND
65794: IFFALSE 65935
65796: GO 65798
65798: DISABLE
65799: LD_INT 0
65801: PPUSH
65802: PPUSH
65803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65804: LD_ADDR_VAR 0 3
65808: PUSH
65809: LD_INT 22
65811: PUSH
65812: LD_OWVAR 2
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 25
65823: PUSH
65824: LD_INT 1
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: PPUSH
65835: CALL_OW 69
65839: ST_TO_ADDR
// if not tmp then
65840: LD_VAR 0 3
65844: NOT
65845: IFFALSE 65849
// exit ;
65847: GO 65935
// un := tmp [ rand ( 1 , tmp ) ] ;
65849: LD_ADDR_VAR 0 2
65853: PUSH
65854: LD_VAR 0 3
65858: PUSH
65859: LD_INT 1
65861: PPUSH
65862: LD_VAR 0 3
65866: PPUSH
65867: CALL_OW 12
65871: ARRAY
65872: ST_TO_ADDR
// if Crawls ( un ) then
65873: LD_VAR 0 2
65877: PPUSH
65878: CALL_OW 318
65882: IFFALSE 65893
// ComWalk ( un ) ;
65884: LD_VAR 0 2
65888: PPUSH
65889: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
65893: LD_VAR 0 2
65897: PPUSH
65898: LD_INT 9
65900: PPUSH
65901: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
65905: LD_INT 28
65907: PPUSH
65908: LD_OWVAR 2
65912: PPUSH
65913: LD_INT 2
65915: PPUSH
65916: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
65920: LD_INT 29
65922: PPUSH
65923: LD_OWVAR 2
65927: PPUSH
65928: LD_INT 2
65930: PPUSH
65931: CALL_OW 322
// end ;
65935: PPOPN 3
65937: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
65938: LD_EXP 49
65942: PUSH
65943: LD_EXP 92
65947: AND
65948: IFFALSE 66059
65950: GO 65952
65952: DISABLE
65953: LD_INT 0
65955: PPUSH
65956: PPUSH
65957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65958: LD_ADDR_VAR 0 3
65962: PUSH
65963: LD_INT 22
65965: PUSH
65966: LD_OWVAR 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 25
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PPUSH
65989: CALL_OW 69
65993: ST_TO_ADDR
// if not tmp then
65994: LD_VAR 0 3
65998: NOT
65999: IFFALSE 66003
// exit ;
66001: GO 66059
// un := tmp [ rand ( 1 , tmp ) ] ;
66003: LD_ADDR_VAR 0 2
66007: PUSH
66008: LD_VAR 0 3
66012: PUSH
66013: LD_INT 1
66015: PPUSH
66016: LD_VAR 0 3
66020: PPUSH
66021: CALL_OW 12
66025: ARRAY
66026: ST_TO_ADDR
// if Crawls ( un ) then
66027: LD_VAR 0 2
66031: PPUSH
66032: CALL_OW 318
66036: IFFALSE 66047
// ComWalk ( un ) ;
66038: LD_VAR 0 2
66042: PPUSH
66043: CALL_OW 138
// SetClass ( un , class_mortar ) ;
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_INT 8
66054: PPUSH
66055: CALL_OW 336
// end ;
66059: PPOPN 3
66061: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
66062: LD_EXP 49
66066: PUSH
66067: LD_EXP 93
66071: AND
66072: IFFALSE 66216
66074: GO 66076
66076: DISABLE
66077: LD_INT 0
66079: PPUSH
66080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
66081: LD_ADDR_VAR 0 2
66085: PUSH
66086: LD_INT 22
66088: PUSH
66089: LD_OWVAR 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 21
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: LD_INT 34
66113: PUSH
66114: LD_INT 12
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: PUSH
66121: LD_INT 34
66123: PUSH
66124: LD_INT 51
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 34
66133: PUSH
66134: LD_INT 32
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: LIST
66151: PPUSH
66152: CALL_OW 69
66156: ST_TO_ADDR
// if not tmp then
66157: LD_VAR 0 2
66161: NOT
66162: IFFALSE 66166
// exit ;
66164: GO 66216
// for i in tmp do
66166: LD_ADDR_VAR 0 1
66170: PUSH
66171: LD_VAR 0 2
66175: PUSH
66176: FOR_IN
66177: IFFALSE 66214
// if GetCargo ( i , mat_artifact ) = 0 then
66179: LD_VAR 0 1
66183: PPUSH
66184: LD_INT 4
66186: PPUSH
66187: CALL_OW 289
66191: PUSH
66192: LD_INT 0
66194: EQUAL
66195: IFFALSE 66212
// SetCargo ( i , mat_siberit , 100 ) ;
66197: LD_VAR 0 1
66201: PPUSH
66202: LD_INT 3
66204: PPUSH
66205: LD_INT 100
66207: PPUSH
66208: CALL_OW 290
66212: GO 66176
66214: POP
66215: POP
// end ;
66216: PPOPN 2
66218: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
66219: LD_EXP 49
66223: PUSH
66224: LD_EXP 94
66228: AND
66229: IFFALSE 66412
66231: GO 66233
66233: DISABLE
66234: LD_INT 0
66236: PPUSH
66237: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66238: LD_ADDR_VAR 0 2
66242: PUSH
66243: LD_INT 22
66245: PUSH
66246: LD_OWVAR 2
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PPUSH
66255: CALL_OW 69
66259: ST_TO_ADDR
// if not tmp then
66260: LD_VAR 0 2
66264: NOT
66265: IFFALSE 66269
// exit ;
66267: GO 66412
// for i := 1 to 2 do
66269: LD_ADDR_VAR 0 1
66273: PUSH
66274: DOUBLE
66275: LD_INT 1
66277: DEC
66278: ST_TO_ADDR
66279: LD_INT 2
66281: PUSH
66282: FOR_TO
66283: IFFALSE 66410
// begin uc_side := your_side ;
66285: LD_ADDR_OWVAR 20
66289: PUSH
66290: LD_OWVAR 2
66294: ST_TO_ADDR
// uc_nation := nation_american ;
66295: LD_ADDR_OWVAR 21
66299: PUSH
66300: LD_INT 1
66302: ST_TO_ADDR
// vc_chassis := us_morphling ;
66303: LD_ADDR_OWVAR 37
66307: PUSH
66308: LD_INT 5
66310: ST_TO_ADDR
// vc_engine := engine_siberite ;
66311: LD_ADDR_OWVAR 39
66315: PUSH
66316: LD_INT 3
66318: ST_TO_ADDR
// vc_control := control_computer ;
66319: LD_ADDR_OWVAR 38
66323: PUSH
66324: LD_INT 3
66326: ST_TO_ADDR
// vc_weapon := us_double_laser ;
66327: LD_ADDR_OWVAR 40
66331: PUSH
66332: LD_INT 10
66334: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
66335: LD_VAR 0 2
66339: PUSH
66340: LD_INT 1
66342: ARRAY
66343: PPUSH
66344: CALL_OW 310
66348: NOT
66349: IFFALSE 66396
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
66351: CALL_OW 45
66355: PPUSH
66356: LD_VAR 0 2
66360: PUSH
66361: LD_INT 1
66363: ARRAY
66364: PPUSH
66365: CALL_OW 250
66369: PPUSH
66370: LD_VAR 0 2
66374: PUSH
66375: LD_INT 1
66377: ARRAY
66378: PPUSH
66379: CALL_OW 251
66383: PPUSH
66384: LD_INT 12
66386: PPUSH
66387: LD_INT 1
66389: PPUSH
66390: CALL_OW 50
66394: GO 66408
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
66396: CALL_OW 45
66400: PPUSH
66401: LD_INT 1
66403: PPUSH
66404: CALL_OW 51
// end ;
66408: GO 66282
66410: POP
66411: POP
// end ;
66412: PPOPN 2
66414: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
66415: LD_EXP 49
66419: PUSH
66420: LD_EXP 95
66424: AND
66425: IFFALSE 66647
66427: GO 66429
66429: DISABLE
66430: LD_INT 0
66432: PPUSH
66433: PPUSH
66434: PPUSH
66435: PPUSH
66436: PPUSH
66437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
66438: LD_ADDR_VAR 0 6
66442: PUSH
66443: LD_INT 22
66445: PUSH
66446: LD_OWVAR 2
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 21
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 3
66467: PUSH
66468: LD_INT 23
66470: PUSH
66471: LD_INT 0
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: LIST
66486: PPUSH
66487: CALL_OW 69
66491: ST_TO_ADDR
// if not tmp then
66492: LD_VAR 0 6
66496: NOT
66497: IFFALSE 66501
// exit ;
66499: GO 66647
// s1 := rand ( 1 , 4 ) ;
66501: LD_ADDR_VAR 0 2
66505: PUSH
66506: LD_INT 1
66508: PPUSH
66509: LD_INT 4
66511: PPUSH
66512: CALL_OW 12
66516: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
66517: LD_ADDR_VAR 0 4
66521: PUSH
66522: LD_VAR 0 6
66526: PUSH
66527: LD_INT 1
66529: ARRAY
66530: PPUSH
66531: LD_VAR 0 2
66535: PPUSH
66536: CALL_OW 259
66540: ST_TO_ADDR
// if s1 = 1 then
66541: LD_VAR 0 2
66545: PUSH
66546: LD_INT 1
66548: EQUAL
66549: IFFALSE 66569
// s2 := rand ( 2 , 4 ) else
66551: LD_ADDR_VAR 0 3
66555: PUSH
66556: LD_INT 2
66558: PPUSH
66559: LD_INT 4
66561: PPUSH
66562: CALL_OW 12
66566: ST_TO_ADDR
66567: GO 66577
// s2 := 1 ;
66569: LD_ADDR_VAR 0 3
66573: PUSH
66574: LD_INT 1
66576: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
66577: LD_ADDR_VAR 0 5
66581: PUSH
66582: LD_VAR 0 6
66586: PUSH
66587: LD_INT 1
66589: ARRAY
66590: PPUSH
66591: LD_VAR 0 3
66595: PPUSH
66596: CALL_OW 259
66600: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
66601: LD_VAR 0 6
66605: PUSH
66606: LD_INT 1
66608: ARRAY
66609: PPUSH
66610: LD_VAR 0 2
66614: PPUSH
66615: LD_VAR 0 5
66619: PPUSH
66620: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
66624: LD_VAR 0 6
66628: PUSH
66629: LD_INT 1
66631: ARRAY
66632: PPUSH
66633: LD_VAR 0 3
66637: PPUSH
66638: LD_VAR 0 4
66642: PPUSH
66643: CALL_OW 237
// end ;
66647: PPOPN 6
66649: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
66650: LD_EXP 49
66654: PUSH
66655: LD_EXP 96
66659: AND
66660: IFFALSE 66739
66662: GO 66664
66664: DISABLE
66665: LD_INT 0
66667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
66668: LD_ADDR_VAR 0 1
66672: PUSH
66673: LD_INT 22
66675: PUSH
66676: LD_OWVAR 2
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 30
66687: PUSH
66688: LD_INT 3
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PPUSH
66699: CALL_OW 69
66703: ST_TO_ADDR
// if not tmp then
66704: LD_VAR 0 1
66708: NOT
66709: IFFALSE 66713
// exit ;
66711: GO 66739
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
66713: LD_VAR 0 1
66717: PUSH
66718: LD_INT 1
66720: PPUSH
66721: LD_VAR 0 1
66725: PPUSH
66726: CALL_OW 12
66730: ARRAY
66731: PPUSH
66732: LD_INT 1
66734: PPUSH
66735: CALL_OW 234
// end ;
66739: PPOPN 1
66741: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
66742: LD_EXP 49
66746: PUSH
66747: LD_EXP 97
66751: AND
66752: IFFALSE 66864
66754: GO 66756
66756: DISABLE
66757: LD_INT 0
66759: PPUSH
66760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
66761: LD_ADDR_VAR 0 2
66765: PUSH
66766: LD_INT 22
66768: PUSH
66769: LD_OWVAR 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 2
66780: PUSH
66781: LD_INT 30
66783: PUSH
66784: LD_INT 27
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: LD_INT 30
66793: PUSH
66794: LD_INT 26
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 30
66803: PUSH
66804: LD_INT 28
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: EMPTY
66812: LIST
66813: LIST
66814: LIST
66815: LIST
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PPUSH
66821: CALL_OW 69
66825: ST_TO_ADDR
// if not tmp then
66826: LD_VAR 0 2
66830: NOT
66831: IFFALSE 66835
// exit ;
66833: GO 66864
// for i in tmp do
66835: LD_ADDR_VAR 0 1
66839: PUSH
66840: LD_VAR 0 2
66844: PUSH
66845: FOR_IN
66846: IFFALSE 66862
// SetLives ( i , 1 ) ;
66848: LD_VAR 0 1
66852: PPUSH
66853: LD_INT 1
66855: PPUSH
66856: CALL_OW 234
66860: GO 66845
66862: POP
66863: POP
// end ;
66864: PPOPN 2
66866: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
66867: LD_EXP 49
66871: PUSH
66872: LD_EXP 98
66876: AND
66877: IFFALSE 67164
66879: GO 66881
66881: DISABLE
66882: LD_INT 0
66884: PPUSH
66885: PPUSH
66886: PPUSH
// begin i := rand ( 1 , 7 ) ;
66887: LD_ADDR_VAR 0 1
66891: PUSH
66892: LD_INT 1
66894: PPUSH
66895: LD_INT 7
66897: PPUSH
66898: CALL_OW 12
66902: ST_TO_ADDR
// case i of 1 :
66903: LD_VAR 0 1
66907: PUSH
66908: LD_INT 1
66910: DOUBLE
66911: EQUAL
66912: IFTRUE 66916
66914: GO 66926
66916: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
66917: LD_STRING earthquake(getX(game), 0, 32)
66919: PPUSH
66920: CALL_OW 559
66924: GO 67164
66926: LD_INT 2
66928: DOUBLE
66929: EQUAL
66930: IFTRUE 66934
66932: GO 66948
66934: POP
// begin ToLua ( displayStucuk(); ) ;
66935: LD_STRING displayStucuk();
66937: PPUSH
66938: CALL_OW 559
// ResetFog ;
66942: CALL_OW 335
// end ; 3 :
66946: GO 67164
66948: LD_INT 3
66950: DOUBLE
66951: EQUAL
66952: IFTRUE 66956
66954: GO 67060
66956: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66957: LD_ADDR_VAR 0 2
66961: PUSH
66962: LD_INT 22
66964: PUSH
66965: LD_OWVAR 2
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 25
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PPUSH
66988: CALL_OW 69
66992: ST_TO_ADDR
// if not tmp then
66993: LD_VAR 0 2
66997: NOT
66998: IFFALSE 67002
// exit ;
67000: GO 67164
// un := tmp [ rand ( 1 , tmp ) ] ;
67002: LD_ADDR_VAR 0 3
67006: PUSH
67007: LD_VAR 0 2
67011: PUSH
67012: LD_INT 1
67014: PPUSH
67015: LD_VAR 0 2
67019: PPUSH
67020: CALL_OW 12
67024: ARRAY
67025: ST_TO_ADDR
// if Crawls ( un ) then
67026: LD_VAR 0 3
67030: PPUSH
67031: CALL_OW 318
67035: IFFALSE 67046
// ComWalk ( un ) ;
67037: LD_VAR 0 3
67041: PPUSH
67042: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67046: LD_VAR 0 3
67050: PPUSH
67051: LD_INT 8
67053: PPUSH
67054: CALL_OW 336
// end ; 4 :
67058: GO 67164
67060: LD_INT 4
67062: DOUBLE
67063: EQUAL
67064: IFTRUE 67068
67066: GO 67142
67068: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67069: LD_ADDR_VAR 0 2
67073: PUSH
67074: LD_INT 22
67076: PUSH
67077: LD_OWVAR 2
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 30
67088: PUSH
67089: LD_INT 29
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PPUSH
67100: CALL_OW 69
67104: ST_TO_ADDR
// if not tmp then
67105: LD_VAR 0 2
67109: NOT
67110: IFFALSE 67114
// exit ;
67112: GO 67164
// CenterNowOnUnits ( tmp [ 1 ] ) ;
67114: LD_VAR 0 2
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PPUSH
67123: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
67127: LD_VAR 0 2
67131: PUSH
67132: LD_INT 1
67134: ARRAY
67135: PPUSH
67136: CALL_OW 65
// end ; 5 .. 7 :
67140: GO 67164
67142: LD_INT 5
67144: DOUBLE
67145: GREATEREQUAL
67146: IFFALSE 67154
67148: LD_INT 7
67150: DOUBLE
67151: LESSEQUAL
67152: IFTRUE 67156
67154: GO 67163
67156: POP
// StreamSibBomb ; end ;
67157: CALL 63401 0 0
67161: GO 67164
67163: POP
// end ;
67164: PPOPN 3
67166: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
67167: LD_EXP 49
67171: PUSH
67172: LD_EXP 99
67176: AND
67177: IFFALSE 67333
67179: GO 67181
67181: DISABLE
67182: LD_INT 0
67184: PPUSH
67185: PPUSH
67186: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
67187: LD_ADDR_VAR 0 2
67191: PUSH
67192: LD_INT 81
67194: PUSH
67195: LD_OWVAR 2
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: PUSH
67204: LD_INT 2
67206: PUSH
67207: LD_INT 21
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_INT 21
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PPUSH
67236: CALL_OW 69
67240: ST_TO_ADDR
// if not tmp then
67241: LD_VAR 0 2
67245: NOT
67246: IFFALSE 67250
// exit ;
67248: GO 67333
// p := 0 ;
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: LD_INT 0
67257: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67258: LD_INT 35
67260: PPUSH
67261: CALL_OW 67
// p := p + 1 ;
67265: LD_ADDR_VAR 0 3
67269: PUSH
67270: LD_VAR 0 3
67274: PUSH
67275: LD_INT 1
67277: PLUS
67278: ST_TO_ADDR
// for i in tmp do
67279: LD_ADDR_VAR 0 1
67283: PUSH
67284: LD_VAR 0 2
67288: PUSH
67289: FOR_IN
67290: IFFALSE 67321
// if GetLives ( i ) < 1000 then
67292: LD_VAR 0 1
67296: PPUSH
67297: CALL_OW 256
67301: PUSH
67302: LD_INT 1000
67304: LESS
67305: IFFALSE 67319
// SetLives ( i , 1000 ) ;
67307: LD_VAR 0 1
67311: PPUSH
67312: LD_INT 1000
67314: PPUSH
67315: CALL_OW 234
67319: GO 67289
67321: POP
67322: POP
// until p > 20 ;
67323: LD_VAR 0 3
67327: PUSH
67328: LD_INT 20
67330: GREATER
67331: IFFALSE 67258
// end ;
67333: PPOPN 3
67335: END
// every 0 0$1 trigger StreamModeActive and sTime do
67336: LD_EXP 49
67340: PUSH
67341: LD_EXP 100
67345: AND
67346: IFFALSE 67381
67348: GO 67350
67350: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
67351: LD_INT 28
67353: PPUSH
67354: LD_OWVAR 2
67358: PPUSH
67359: LD_INT 2
67361: PPUSH
67362: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
67366: LD_INT 30
67368: PPUSH
67369: LD_OWVAR 2
67373: PPUSH
67374: LD_INT 2
67376: PPUSH
67377: CALL_OW 322
// end ;
67381: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
67382: LD_EXP 49
67386: PUSH
67387: LD_EXP 101
67391: AND
67392: IFFALSE 67513
67394: GO 67396
67396: DISABLE
67397: LD_INT 0
67399: PPUSH
67400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67401: LD_ADDR_VAR 0 2
67405: PUSH
67406: LD_INT 22
67408: PUSH
67409: LD_OWVAR 2
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 21
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 23
67433: PUSH
67434: LD_INT 0
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: EMPTY
67446: LIST
67447: LIST
67448: LIST
67449: PPUSH
67450: CALL_OW 69
67454: ST_TO_ADDR
// if not tmp then
67455: LD_VAR 0 2
67459: NOT
67460: IFFALSE 67464
// exit ;
67462: GO 67513
// for i in tmp do
67464: LD_ADDR_VAR 0 1
67468: PUSH
67469: LD_VAR 0 2
67473: PUSH
67474: FOR_IN
67475: IFFALSE 67511
// begin if Crawls ( i ) then
67477: LD_VAR 0 1
67481: PPUSH
67482: CALL_OW 318
67486: IFFALSE 67497
// ComWalk ( i ) ;
67488: LD_VAR 0 1
67492: PPUSH
67493: CALL_OW 138
// SetClass ( i , 2 ) ;
67497: LD_VAR 0 1
67501: PPUSH
67502: LD_INT 2
67504: PPUSH
67505: CALL_OW 336
// end ;
67509: GO 67474
67511: POP
67512: POP
// end ;
67513: PPOPN 2
67515: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
67516: LD_EXP 49
67520: PUSH
67521: LD_EXP 102
67525: AND
67526: IFFALSE 67814
67528: GO 67530
67530: DISABLE
67531: LD_INT 0
67533: PPUSH
67534: PPUSH
67535: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
67536: LD_OWVAR 2
67540: PPUSH
67541: LD_INT 9
67543: PPUSH
67544: LD_INT 1
67546: PPUSH
67547: LD_INT 1
67549: PPUSH
67550: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
67554: LD_INT 9
67556: PPUSH
67557: LD_OWVAR 2
67561: PPUSH
67562: CALL_OW 343
// uc_side := 9 ;
67566: LD_ADDR_OWVAR 20
67570: PUSH
67571: LD_INT 9
67573: ST_TO_ADDR
// uc_nation := 2 ;
67574: LD_ADDR_OWVAR 21
67578: PUSH
67579: LD_INT 2
67581: ST_TO_ADDR
// hc_name := Dark Warrior ;
67582: LD_ADDR_OWVAR 26
67586: PUSH
67587: LD_STRING Dark Warrior
67589: ST_TO_ADDR
// hc_gallery :=  ;
67590: LD_ADDR_OWVAR 33
67594: PUSH
67595: LD_STRING 
67597: ST_TO_ADDR
// hc_noskilllimit := true ;
67598: LD_ADDR_OWVAR 76
67602: PUSH
67603: LD_INT 1
67605: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
67606: LD_ADDR_OWVAR 31
67610: PUSH
67611: LD_INT 30
67613: PUSH
67614: LD_INT 30
67616: PUSH
67617: LD_INT 30
67619: PUSH
67620: LD_INT 30
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: ST_TO_ADDR
// un := CreateHuman ;
67629: LD_ADDR_VAR 0 3
67633: PUSH
67634: CALL_OW 44
67638: ST_TO_ADDR
// hc_noskilllimit := false ;
67639: LD_ADDR_OWVAR 76
67643: PUSH
67644: LD_INT 0
67646: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67647: LD_VAR 0 3
67651: PPUSH
67652: LD_INT 1
67654: PPUSH
67655: CALL_OW 51
// ToLua ( playRanger() ) ;
67659: LD_STRING playRanger()
67661: PPUSH
67662: CALL_OW 559
// p := 0 ;
67666: LD_ADDR_VAR 0 2
67670: PUSH
67671: LD_INT 0
67673: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
67674: LD_INT 35
67676: PPUSH
67677: CALL_OW 67
// p := p + 1 ;
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: LD_VAR 0 2
67690: PUSH
67691: LD_INT 1
67693: PLUS
67694: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
67695: LD_VAR 0 3
67699: PPUSH
67700: CALL_OW 256
67704: PUSH
67705: LD_INT 1000
67707: LESS
67708: IFFALSE 67722
// SetLives ( un , 1000 ) ;
67710: LD_VAR 0 3
67714: PPUSH
67715: LD_INT 1000
67717: PPUSH
67718: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
67722: LD_VAR 0 3
67726: PPUSH
67727: LD_INT 81
67729: PUSH
67730: LD_OWVAR 2
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 91
67741: PUSH
67742: LD_VAR 0 3
67746: PUSH
67747: LD_INT 30
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PPUSH
67759: CALL_OW 69
67763: PPUSH
67764: LD_VAR 0 3
67768: PPUSH
67769: CALL_OW 74
67773: PPUSH
67774: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
67778: LD_VAR 0 2
67782: PUSH
67783: LD_INT 80
67785: GREATER
67786: PUSH
67787: LD_VAR 0 3
67791: PPUSH
67792: CALL_OW 301
67796: OR
67797: IFFALSE 67674
// if un then
67799: LD_VAR 0 3
67803: IFFALSE 67814
// RemoveUnit ( un ) ;
67805: LD_VAR 0 3
67809: PPUSH
67810: CALL_OW 64
// end ;
67814: PPOPN 3
67816: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
67817: LD_EXP 103
67821: IFFALSE 67937
67823: GO 67825
67825: DISABLE
67826: LD_INT 0
67828: PPUSH
67829: PPUSH
67830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
67831: LD_ADDR_VAR 0 2
67835: PUSH
67836: LD_INT 81
67838: PUSH
67839: LD_OWVAR 2
67843: PUSH
67844: EMPTY
67845: LIST
67846: LIST
67847: PUSH
67848: LD_INT 21
67850: PUSH
67851: LD_INT 1
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PPUSH
67862: CALL_OW 69
67866: ST_TO_ADDR
// ToLua ( playComputer() ) ;
67867: LD_STRING playComputer()
67869: PPUSH
67870: CALL_OW 559
// if not tmp then
67874: LD_VAR 0 2
67878: NOT
67879: IFFALSE 67883
// exit ;
67881: GO 67937
// for i in tmp do
67883: LD_ADDR_VAR 0 1
67887: PUSH
67888: LD_VAR 0 2
67892: PUSH
67893: FOR_IN
67894: IFFALSE 67935
// for j := 1 to 4 do
67896: LD_ADDR_VAR 0 3
67900: PUSH
67901: DOUBLE
67902: LD_INT 1
67904: DEC
67905: ST_TO_ADDR
67906: LD_INT 4
67908: PUSH
67909: FOR_TO
67910: IFFALSE 67931
// SetSkill ( i , j , 10 ) ;
67912: LD_VAR 0 1
67916: PPUSH
67917: LD_VAR 0 3
67921: PPUSH
67922: LD_INT 10
67924: PPUSH
67925: CALL_OW 237
67929: GO 67909
67931: POP
67932: POP
67933: GO 67893
67935: POP
67936: POP
// end ;
67937: PPOPN 3
67939: END
// every 0 0$1 trigger s30 do var i , tmp ;
67940: LD_EXP 104
67944: IFFALSE 68013
67946: GO 67948
67948: DISABLE
67949: LD_INT 0
67951: PPUSH
67952: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67953: LD_ADDR_VAR 0 2
67957: PUSH
67958: LD_INT 22
67960: PUSH
67961: LD_OWVAR 2
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PPUSH
67970: CALL_OW 69
67974: ST_TO_ADDR
// if not tmp then
67975: LD_VAR 0 2
67979: NOT
67980: IFFALSE 67984
// exit ;
67982: GO 68013
// for i in tmp do
67984: LD_ADDR_VAR 0 1
67988: PUSH
67989: LD_VAR 0 2
67993: PUSH
67994: FOR_IN
67995: IFFALSE 68011
// SetLives ( i , 300 ) ;
67997: LD_VAR 0 1
68001: PPUSH
68002: LD_INT 300
68004: PPUSH
68005: CALL_OW 234
68009: GO 67994
68011: POP
68012: POP
// end ;
68013: PPOPN 2
68015: END
// every 0 0$1 trigger s60 do var i , tmp ;
68016: LD_EXP 105
68020: IFFALSE 68089
68022: GO 68024
68024: DISABLE
68025: LD_INT 0
68027: PPUSH
68028: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
68029: LD_ADDR_VAR 0 2
68033: PUSH
68034: LD_INT 22
68036: PUSH
68037: LD_OWVAR 2
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PPUSH
68046: CALL_OW 69
68050: ST_TO_ADDR
// if not tmp then
68051: LD_VAR 0 2
68055: NOT
68056: IFFALSE 68060
// exit ;
68058: GO 68089
// for i in tmp do
68060: LD_ADDR_VAR 0 1
68064: PUSH
68065: LD_VAR 0 2
68069: PUSH
68070: FOR_IN
68071: IFFALSE 68087
// SetLives ( i , 600 ) ;
68073: LD_VAR 0 1
68077: PPUSH
68078: LD_INT 600
68080: PPUSH
68081: CALL_OW 234
68085: GO 68070
68087: POP
68088: POP
// end ;
68089: PPOPN 2
68091: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
68092: LD_INT 0
68094: PPUSH
// case cmd of 301 :
68095: LD_VAR 0 1
68099: PUSH
68100: LD_INT 301
68102: DOUBLE
68103: EQUAL
68104: IFTRUE 68108
68106: GO 68140
68108: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
68109: LD_VAR 0 6
68113: PPUSH
68114: LD_VAR 0 7
68118: PPUSH
68119: LD_VAR 0 8
68123: PPUSH
68124: LD_VAR 0 4
68128: PPUSH
68129: LD_VAR 0 5
68133: PPUSH
68134: CALL 69341 0 5
68138: GO 68261
68140: LD_INT 302
68142: DOUBLE
68143: EQUAL
68144: IFTRUE 68148
68146: GO 68185
68148: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
68149: LD_VAR 0 6
68153: PPUSH
68154: LD_VAR 0 7
68158: PPUSH
68159: LD_VAR 0 8
68163: PPUSH
68164: LD_VAR 0 9
68168: PPUSH
68169: LD_VAR 0 4
68173: PPUSH
68174: LD_VAR 0 5
68178: PPUSH
68179: CALL 69432 0 6
68183: GO 68261
68185: LD_INT 303
68187: DOUBLE
68188: EQUAL
68189: IFTRUE 68193
68191: GO 68230
68193: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
68194: LD_VAR 0 6
68198: PPUSH
68199: LD_VAR 0 7
68203: PPUSH
68204: LD_VAR 0 8
68208: PPUSH
68209: LD_VAR 0 9
68213: PPUSH
68214: LD_VAR 0 4
68218: PPUSH
68219: LD_VAR 0 5
68223: PPUSH
68224: CALL 68266 0 6
68228: GO 68261
68230: LD_INT 304
68232: DOUBLE
68233: EQUAL
68234: IFTRUE 68238
68236: GO 68260
68238: POP
// hHackTeleport ( unit , x , y ) ; end ;
68239: LD_VAR 0 2
68243: PPUSH
68244: LD_VAR 0 4
68248: PPUSH
68249: LD_VAR 0 5
68253: PPUSH
68254: CALL 70025 0 3
68258: GO 68261
68260: POP
// end ;
68261: LD_VAR 0 12
68265: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
68266: LD_INT 0
68268: PPUSH
68269: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
68270: LD_VAR 0 1
68274: PUSH
68275: LD_INT 1
68277: LESS
68278: PUSH
68279: LD_VAR 0 1
68283: PUSH
68284: LD_INT 3
68286: GREATER
68287: OR
68288: PUSH
68289: LD_VAR 0 5
68293: PPUSH
68294: LD_VAR 0 6
68298: PPUSH
68299: CALL_OW 428
68303: OR
68304: IFFALSE 68308
// exit ;
68306: GO 69028
// uc_side := your_side ;
68308: LD_ADDR_OWVAR 20
68312: PUSH
68313: LD_OWVAR 2
68317: ST_TO_ADDR
// uc_nation := nation ;
68318: LD_ADDR_OWVAR 21
68322: PUSH
68323: LD_VAR 0 1
68327: ST_TO_ADDR
// bc_level = 1 ;
68328: LD_ADDR_OWVAR 43
68332: PUSH
68333: LD_INT 1
68335: ST_TO_ADDR
// case btype of 1 :
68336: LD_VAR 0 2
68340: PUSH
68341: LD_INT 1
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68349
68347: GO 68360
68349: POP
// bc_type := b_depot ; 2 :
68350: LD_ADDR_OWVAR 42
68354: PUSH
68355: LD_INT 0
68357: ST_TO_ADDR
68358: GO 68972
68360: LD_INT 2
68362: DOUBLE
68363: EQUAL
68364: IFTRUE 68368
68366: GO 68379
68368: POP
// bc_type := b_warehouse ; 3 :
68369: LD_ADDR_OWVAR 42
68373: PUSH
68374: LD_INT 1
68376: ST_TO_ADDR
68377: GO 68972
68379: LD_INT 3
68381: DOUBLE
68382: EQUAL
68383: IFTRUE 68387
68385: GO 68398
68387: POP
// bc_type := b_lab ; 4 .. 9 :
68388: LD_ADDR_OWVAR 42
68392: PUSH
68393: LD_INT 6
68395: ST_TO_ADDR
68396: GO 68972
68398: LD_INT 4
68400: DOUBLE
68401: GREATEREQUAL
68402: IFFALSE 68410
68404: LD_INT 9
68406: DOUBLE
68407: LESSEQUAL
68408: IFTRUE 68412
68410: GO 68464
68412: POP
// begin bc_type := b_lab_half ;
68413: LD_ADDR_OWVAR 42
68417: PUSH
68418: LD_INT 7
68420: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
68421: LD_ADDR_OWVAR 44
68425: PUSH
68426: LD_INT 10
68428: PUSH
68429: LD_INT 11
68431: PUSH
68432: LD_INT 12
68434: PUSH
68435: LD_INT 15
68437: PUSH
68438: LD_INT 14
68440: PUSH
68441: LD_INT 13
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: PUSH
68452: LD_VAR 0 2
68456: PUSH
68457: LD_INT 3
68459: MINUS
68460: ARRAY
68461: ST_TO_ADDR
// end ; 10 .. 13 :
68462: GO 68972
68464: LD_INT 10
68466: DOUBLE
68467: GREATEREQUAL
68468: IFFALSE 68476
68470: LD_INT 13
68472: DOUBLE
68473: LESSEQUAL
68474: IFTRUE 68478
68476: GO 68555
68478: POP
// begin bc_type := b_lab_full ;
68479: LD_ADDR_OWVAR 42
68483: PUSH
68484: LD_INT 8
68486: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
68487: LD_ADDR_OWVAR 44
68491: PUSH
68492: LD_INT 10
68494: PUSH
68495: LD_INT 12
68497: PUSH
68498: LD_INT 14
68500: PUSH
68501: LD_INT 13
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: LIST
68508: LIST
68509: PUSH
68510: LD_VAR 0 2
68514: PUSH
68515: LD_INT 9
68517: MINUS
68518: ARRAY
68519: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
68520: LD_ADDR_OWVAR 45
68524: PUSH
68525: LD_INT 11
68527: PUSH
68528: LD_INT 15
68530: PUSH
68531: LD_INT 12
68533: PUSH
68534: LD_INT 15
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: PUSH
68543: LD_VAR 0 2
68547: PUSH
68548: LD_INT 9
68550: MINUS
68551: ARRAY
68552: ST_TO_ADDR
// end ; 14 :
68553: GO 68972
68555: LD_INT 14
68557: DOUBLE
68558: EQUAL
68559: IFTRUE 68563
68561: GO 68574
68563: POP
// bc_type := b_workshop ; 15 :
68564: LD_ADDR_OWVAR 42
68568: PUSH
68569: LD_INT 2
68571: ST_TO_ADDR
68572: GO 68972
68574: LD_INT 15
68576: DOUBLE
68577: EQUAL
68578: IFTRUE 68582
68580: GO 68593
68582: POP
// bc_type := b_factory ; 16 :
68583: LD_ADDR_OWVAR 42
68587: PUSH
68588: LD_INT 3
68590: ST_TO_ADDR
68591: GO 68972
68593: LD_INT 16
68595: DOUBLE
68596: EQUAL
68597: IFTRUE 68601
68599: GO 68612
68601: POP
// bc_type := b_ext_gun ; 17 :
68602: LD_ADDR_OWVAR 42
68606: PUSH
68607: LD_INT 17
68609: ST_TO_ADDR
68610: GO 68972
68612: LD_INT 17
68614: DOUBLE
68615: EQUAL
68616: IFTRUE 68620
68618: GO 68648
68620: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
68621: LD_ADDR_OWVAR 42
68625: PUSH
68626: LD_INT 19
68628: PUSH
68629: LD_INT 23
68631: PUSH
68632: LD_INT 19
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: LIST
68639: PUSH
68640: LD_VAR 0 1
68644: ARRAY
68645: ST_TO_ADDR
68646: GO 68972
68648: LD_INT 18
68650: DOUBLE
68651: EQUAL
68652: IFTRUE 68656
68654: GO 68667
68656: POP
// bc_type := b_ext_radar ; 19 :
68657: LD_ADDR_OWVAR 42
68661: PUSH
68662: LD_INT 20
68664: ST_TO_ADDR
68665: GO 68972
68667: LD_INT 19
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68675
68673: GO 68686
68675: POP
// bc_type := b_ext_radio ; 20 :
68676: LD_ADDR_OWVAR 42
68680: PUSH
68681: LD_INT 22
68683: ST_TO_ADDR
68684: GO 68972
68686: LD_INT 20
68688: DOUBLE
68689: EQUAL
68690: IFTRUE 68694
68692: GO 68705
68694: POP
// bc_type := b_ext_siberium ; 21 :
68695: LD_ADDR_OWVAR 42
68699: PUSH
68700: LD_INT 21
68702: ST_TO_ADDR
68703: GO 68972
68705: LD_INT 21
68707: DOUBLE
68708: EQUAL
68709: IFTRUE 68713
68711: GO 68724
68713: POP
// bc_type := b_ext_computer ; 22 :
68714: LD_ADDR_OWVAR 42
68718: PUSH
68719: LD_INT 24
68721: ST_TO_ADDR
68722: GO 68972
68724: LD_INT 22
68726: DOUBLE
68727: EQUAL
68728: IFTRUE 68732
68730: GO 68743
68732: POP
// bc_type := b_ext_track ; 23 :
68733: LD_ADDR_OWVAR 42
68737: PUSH
68738: LD_INT 16
68740: ST_TO_ADDR
68741: GO 68972
68743: LD_INT 23
68745: DOUBLE
68746: EQUAL
68747: IFTRUE 68751
68749: GO 68762
68751: POP
// bc_type := b_ext_laser ; 24 :
68752: LD_ADDR_OWVAR 42
68756: PUSH
68757: LD_INT 25
68759: ST_TO_ADDR
68760: GO 68972
68762: LD_INT 24
68764: DOUBLE
68765: EQUAL
68766: IFTRUE 68770
68768: GO 68781
68770: POP
// bc_type := b_control_tower ; 25 :
68771: LD_ADDR_OWVAR 42
68775: PUSH
68776: LD_INT 36
68778: ST_TO_ADDR
68779: GO 68972
68781: LD_INT 25
68783: DOUBLE
68784: EQUAL
68785: IFTRUE 68789
68787: GO 68800
68789: POP
// bc_type := b_breastwork ; 26 :
68790: LD_ADDR_OWVAR 42
68794: PUSH
68795: LD_INT 31
68797: ST_TO_ADDR
68798: GO 68972
68800: LD_INT 26
68802: DOUBLE
68803: EQUAL
68804: IFTRUE 68808
68806: GO 68819
68808: POP
// bc_type := b_bunker ; 27 :
68809: LD_ADDR_OWVAR 42
68813: PUSH
68814: LD_INT 32
68816: ST_TO_ADDR
68817: GO 68972
68819: LD_INT 27
68821: DOUBLE
68822: EQUAL
68823: IFTRUE 68827
68825: GO 68838
68827: POP
// bc_type := b_turret ; 28 :
68828: LD_ADDR_OWVAR 42
68832: PUSH
68833: LD_INT 33
68835: ST_TO_ADDR
68836: GO 68972
68838: LD_INT 28
68840: DOUBLE
68841: EQUAL
68842: IFTRUE 68846
68844: GO 68857
68846: POP
// bc_type := b_armoury ; 29 :
68847: LD_ADDR_OWVAR 42
68851: PUSH
68852: LD_INT 4
68854: ST_TO_ADDR
68855: GO 68972
68857: LD_INT 29
68859: DOUBLE
68860: EQUAL
68861: IFTRUE 68865
68863: GO 68876
68865: POP
// bc_type := b_barracks ; 30 :
68866: LD_ADDR_OWVAR 42
68870: PUSH
68871: LD_INT 5
68873: ST_TO_ADDR
68874: GO 68972
68876: LD_INT 30
68878: DOUBLE
68879: EQUAL
68880: IFTRUE 68884
68882: GO 68895
68884: POP
// bc_type := b_solar_power ; 31 :
68885: LD_ADDR_OWVAR 42
68889: PUSH
68890: LD_INT 27
68892: ST_TO_ADDR
68893: GO 68972
68895: LD_INT 31
68897: DOUBLE
68898: EQUAL
68899: IFTRUE 68903
68901: GO 68914
68903: POP
// bc_type := b_oil_power ; 32 :
68904: LD_ADDR_OWVAR 42
68908: PUSH
68909: LD_INT 26
68911: ST_TO_ADDR
68912: GO 68972
68914: LD_INT 32
68916: DOUBLE
68917: EQUAL
68918: IFTRUE 68922
68920: GO 68933
68922: POP
// bc_type := b_siberite_power ; 33 :
68923: LD_ADDR_OWVAR 42
68927: PUSH
68928: LD_INT 28
68930: ST_TO_ADDR
68931: GO 68972
68933: LD_INT 33
68935: DOUBLE
68936: EQUAL
68937: IFTRUE 68941
68939: GO 68952
68941: POP
// bc_type := b_oil_mine ; 34 :
68942: LD_ADDR_OWVAR 42
68946: PUSH
68947: LD_INT 29
68949: ST_TO_ADDR
68950: GO 68972
68952: LD_INT 34
68954: DOUBLE
68955: EQUAL
68956: IFTRUE 68960
68958: GO 68971
68960: POP
// bc_type := b_siberite_mine ; end ;
68961: LD_ADDR_OWVAR 42
68965: PUSH
68966: LD_INT 30
68968: ST_TO_ADDR
68969: GO 68972
68971: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
68972: LD_ADDR_VAR 0 8
68976: PUSH
68977: LD_VAR 0 5
68981: PPUSH
68982: LD_VAR 0 6
68986: PPUSH
68987: LD_VAR 0 3
68991: PPUSH
68992: CALL_OW 47
68996: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
68997: LD_OWVAR 42
69001: PUSH
69002: LD_INT 32
69004: PUSH
69005: LD_INT 33
69007: PUSH
69008: EMPTY
69009: LIST
69010: LIST
69011: IN
69012: IFFALSE 69028
// PlaceWeaponTurret ( b , weapon ) ;
69014: LD_VAR 0 8
69018: PPUSH
69019: LD_VAR 0 4
69023: PPUSH
69024: CALL_OW 431
// end ;
69028: LD_VAR 0 7
69032: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
69033: LD_INT 0
69035: PPUSH
69036: PPUSH
69037: PPUSH
69038: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69039: LD_ADDR_VAR 0 4
69043: PUSH
69044: LD_INT 22
69046: PUSH
69047: LD_OWVAR 2
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 2
69058: PUSH
69059: LD_INT 30
69061: PUSH
69062: LD_INT 0
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 30
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PPUSH
69088: CALL_OW 69
69092: ST_TO_ADDR
// if not tmp then
69093: LD_VAR 0 4
69097: NOT
69098: IFFALSE 69102
// exit ;
69100: GO 69161
// for i in tmp do
69102: LD_ADDR_VAR 0 2
69106: PUSH
69107: LD_VAR 0 4
69111: PUSH
69112: FOR_IN
69113: IFFALSE 69159
// for j = 1 to 3 do
69115: LD_ADDR_VAR 0 3
69119: PUSH
69120: DOUBLE
69121: LD_INT 1
69123: DEC
69124: ST_TO_ADDR
69125: LD_INT 3
69127: PUSH
69128: FOR_TO
69129: IFFALSE 69155
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
69131: LD_VAR 0 2
69135: PPUSH
69136: CALL_OW 274
69140: PPUSH
69141: LD_VAR 0 3
69145: PPUSH
69146: LD_INT 99999
69148: PPUSH
69149: CALL_OW 277
69153: GO 69128
69155: POP
69156: POP
69157: GO 69112
69159: POP
69160: POP
// end ;
69161: LD_VAR 0 1
69165: RET
// export function hHackSetLevel10 ; var i , j ; begin
69166: LD_INT 0
69168: PPUSH
69169: PPUSH
69170: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69171: LD_ADDR_VAR 0 2
69175: PUSH
69176: LD_INT 21
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PPUSH
69186: CALL_OW 69
69190: PUSH
69191: FOR_IN
69192: IFFALSE 69244
// if IsSelected ( i ) then
69194: LD_VAR 0 2
69198: PPUSH
69199: CALL_OW 306
69203: IFFALSE 69242
// begin for j := 1 to 4 do
69205: LD_ADDR_VAR 0 3
69209: PUSH
69210: DOUBLE
69211: LD_INT 1
69213: DEC
69214: ST_TO_ADDR
69215: LD_INT 4
69217: PUSH
69218: FOR_TO
69219: IFFALSE 69240
// SetSkill ( i , j , 10 ) ;
69221: LD_VAR 0 2
69225: PPUSH
69226: LD_VAR 0 3
69230: PPUSH
69231: LD_INT 10
69233: PPUSH
69234: CALL_OW 237
69238: GO 69218
69240: POP
69241: POP
// end ;
69242: GO 69191
69244: POP
69245: POP
// end ;
69246: LD_VAR 0 1
69250: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
69255: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
69256: LD_ADDR_VAR 0 2
69260: PUSH
69261: LD_INT 22
69263: PUSH
69264: LD_OWVAR 2
69268: PUSH
69269: EMPTY
69270: LIST
69271: LIST
69272: PUSH
69273: LD_INT 21
69275: PUSH
69276: LD_INT 1
69278: PUSH
69279: EMPTY
69280: LIST
69281: LIST
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PPUSH
69287: CALL_OW 69
69291: PUSH
69292: FOR_IN
69293: IFFALSE 69334
// begin for j := 1 to 4 do
69295: LD_ADDR_VAR 0 3
69299: PUSH
69300: DOUBLE
69301: LD_INT 1
69303: DEC
69304: ST_TO_ADDR
69305: LD_INT 4
69307: PUSH
69308: FOR_TO
69309: IFFALSE 69330
// SetSkill ( i , j , 10 ) ;
69311: LD_VAR 0 2
69315: PPUSH
69316: LD_VAR 0 3
69320: PPUSH
69321: LD_INT 10
69323: PPUSH
69324: CALL_OW 237
69328: GO 69308
69330: POP
69331: POP
// end ;
69332: GO 69292
69334: POP
69335: POP
// end ;
69336: LD_VAR 0 1
69340: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
69341: LD_INT 0
69343: PPUSH
// uc_side := your_side ;
69344: LD_ADDR_OWVAR 20
69348: PUSH
69349: LD_OWVAR 2
69353: ST_TO_ADDR
// uc_nation := nation ;
69354: LD_ADDR_OWVAR 21
69358: PUSH
69359: LD_VAR 0 1
69363: ST_TO_ADDR
// InitHc ;
69364: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
69368: LD_INT 0
69370: PPUSH
69371: LD_VAR 0 2
69375: PPUSH
69376: LD_VAR 0 3
69380: PPUSH
69381: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
69385: LD_VAR 0 4
69389: PPUSH
69390: LD_VAR 0 5
69394: PPUSH
69395: CALL_OW 428
69399: PUSH
69400: LD_INT 0
69402: EQUAL
69403: IFFALSE 69427
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
69405: CALL_OW 44
69409: PPUSH
69410: LD_VAR 0 4
69414: PPUSH
69415: LD_VAR 0 5
69419: PPUSH
69420: LD_INT 1
69422: PPUSH
69423: CALL_OW 48
// end ;
69427: LD_VAR 0 6
69431: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
69432: LD_INT 0
69434: PPUSH
69435: PPUSH
// uc_side := your_side ;
69436: LD_ADDR_OWVAR 20
69440: PUSH
69441: LD_OWVAR 2
69445: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
69446: LD_VAR 0 1
69450: PUSH
69451: LD_INT 1
69453: PUSH
69454: LD_INT 2
69456: PUSH
69457: LD_INT 3
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 5
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: IN
69473: IFFALSE 69485
// uc_nation := nation_american else
69475: LD_ADDR_OWVAR 21
69479: PUSH
69480: LD_INT 1
69482: ST_TO_ADDR
69483: GO 69528
// if chassis in [ 11 , 12 , 13 , 14 ] then
69485: LD_VAR 0 1
69489: PUSH
69490: LD_INT 11
69492: PUSH
69493: LD_INT 12
69495: PUSH
69496: LD_INT 13
69498: PUSH
69499: LD_INT 14
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: LIST
69506: LIST
69507: IN
69508: IFFALSE 69520
// uc_nation := nation_arabian else
69510: LD_ADDR_OWVAR 21
69514: PUSH
69515: LD_INT 2
69517: ST_TO_ADDR
69518: GO 69528
// uc_nation := nation_russian ;
69520: LD_ADDR_OWVAR 21
69524: PUSH
69525: LD_INT 3
69527: ST_TO_ADDR
// vc_chassis := chassis ;
69528: LD_ADDR_OWVAR 37
69532: PUSH
69533: LD_VAR 0 1
69537: ST_TO_ADDR
// vc_engine := engine ;
69538: LD_ADDR_OWVAR 39
69542: PUSH
69543: LD_VAR 0 2
69547: ST_TO_ADDR
// vc_control := control ;
69548: LD_ADDR_OWVAR 38
69552: PUSH
69553: LD_VAR 0 3
69557: ST_TO_ADDR
// vc_weapon := weapon ;
69558: LD_ADDR_OWVAR 40
69562: PUSH
69563: LD_VAR 0 4
69567: ST_TO_ADDR
// un := CreateVehicle ;
69568: LD_ADDR_VAR 0 8
69572: PUSH
69573: CALL_OW 45
69577: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
69578: LD_VAR 0 8
69582: PPUSH
69583: LD_INT 0
69585: PPUSH
69586: LD_INT 5
69588: PPUSH
69589: CALL_OW 12
69593: PPUSH
69594: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
69598: LD_VAR 0 8
69602: PPUSH
69603: LD_VAR 0 5
69607: PPUSH
69608: LD_VAR 0 6
69612: PPUSH
69613: LD_INT 1
69615: PPUSH
69616: CALL_OW 48
// end ;
69620: LD_VAR 0 7
69624: RET
// export hInvincible ; every 1 do
69625: GO 69627
69627: DISABLE
// hInvincible := [ ] ;
69628: LD_ADDR_EXP 106
69632: PUSH
69633: EMPTY
69634: ST_TO_ADDR
69635: END
// every 10 do var i ;
69636: GO 69638
69638: DISABLE
69639: LD_INT 0
69641: PPUSH
// begin enable ;
69642: ENABLE
// if not hInvincible then
69643: LD_EXP 106
69647: NOT
69648: IFFALSE 69652
// exit ;
69650: GO 69696
// for i in hInvincible do
69652: LD_ADDR_VAR 0 1
69656: PUSH
69657: LD_EXP 106
69661: PUSH
69662: FOR_IN
69663: IFFALSE 69694
// if GetLives ( i ) < 1000 then
69665: LD_VAR 0 1
69669: PPUSH
69670: CALL_OW 256
69674: PUSH
69675: LD_INT 1000
69677: LESS
69678: IFFALSE 69692
// SetLives ( i , 1000 ) ;
69680: LD_VAR 0 1
69684: PPUSH
69685: LD_INT 1000
69687: PPUSH
69688: CALL_OW 234
69692: GO 69662
69694: POP
69695: POP
// end ;
69696: PPOPN 1
69698: END
// export function hHackInvincible ; var i ; begin
69699: LD_INT 0
69701: PPUSH
69702: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
69703: LD_ADDR_VAR 0 2
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 21
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 21
69723: PUSH
69724: LD_INT 2
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: LIST
69735: PPUSH
69736: CALL_OW 69
69740: PUSH
69741: FOR_IN
69742: IFFALSE 69803
// if IsSelected ( i ) then
69744: LD_VAR 0 2
69748: PPUSH
69749: CALL_OW 306
69753: IFFALSE 69801
// begin if i in hInvincible then
69755: LD_VAR 0 2
69759: PUSH
69760: LD_EXP 106
69764: IN
69765: IFFALSE 69785
// hInvincible := hInvincible diff i else
69767: LD_ADDR_EXP 106
69771: PUSH
69772: LD_EXP 106
69776: PUSH
69777: LD_VAR 0 2
69781: DIFF
69782: ST_TO_ADDR
69783: GO 69801
// hInvincible := hInvincible union i ;
69785: LD_ADDR_EXP 106
69789: PUSH
69790: LD_EXP 106
69794: PUSH
69795: LD_VAR 0 2
69799: UNION
69800: ST_TO_ADDR
// end ;
69801: GO 69741
69803: POP
69804: POP
// end ;
69805: LD_VAR 0 1
69809: RET
// export function hHackInvisible ; var i , j ; begin
69810: LD_INT 0
69812: PPUSH
69813: PPUSH
69814: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
69815: LD_ADDR_VAR 0 2
69819: PUSH
69820: LD_INT 21
69822: PUSH
69823: LD_INT 1
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PPUSH
69830: CALL_OW 69
69834: PUSH
69835: FOR_IN
69836: IFFALSE 69860
// if IsSelected ( i ) then
69838: LD_VAR 0 2
69842: PPUSH
69843: CALL_OW 306
69847: IFFALSE 69858
// ComForceInvisible ( i ) ;
69849: LD_VAR 0 2
69853: PPUSH
69854: CALL_OW 496
69858: GO 69835
69860: POP
69861: POP
// end ;
69862: LD_VAR 0 1
69866: RET
// export function hHackChangeYourSide ; begin
69867: LD_INT 0
69869: PPUSH
// if your_side = 8 then
69870: LD_OWVAR 2
69874: PUSH
69875: LD_INT 8
69877: EQUAL
69878: IFFALSE 69890
// your_side := 0 else
69880: LD_ADDR_OWVAR 2
69884: PUSH
69885: LD_INT 0
69887: ST_TO_ADDR
69888: GO 69904
// your_side := your_side + 1 ;
69890: LD_ADDR_OWVAR 2
69894: PUSH
69895: LD_OWVAR 2
69899: PUSH
69900: LD_INT 1
69902: PLUS
69903: ST_TO_ADDR
// end ;
69904: LD_VAR 0 1
69908: RET
// export function hHackChangeUnitSide ; var i , j ; begin
69909: LD_INT 0
69911: PPUSH
69912: PPUSH
69913: PPUSH
// for i in all_units do
69914: LD_ADDR_VAR 0 2
69918: PUSH
69919: LD_OWVAR 3
69923: PUSH
69924: FOR_IN
69925: IFFALSE 70003
// if IsSelected ( i ) then
69927: LD_VAR 0 2
69931: PPUSH
69932: CALL_OW 306
69936: IFFALSE 70001
// begin j := GetSide ( i ) ;
69938: LD_ADDR_VAR 0 3
69942: PUSH
69943: LD_VAR 0 2
69947: PPUSH
69948: CALL_OW 255
69952: ST_TO_ADDR
// if j = 8 then
69953: LD_VAR 0 3
69957: PUSH
69958: LD_INT 8
69960: EQUAL
69961: IFFALSE 69973
// j := 0 else
69963: LD_ADDR_VAR 0 3
69967: PUSH
69968: LD_INT 0
69970: ST_TO_ADDR
69971: GO 69987
// j := j + 1 ;
69973: LD_ADDR_VAR 0 3
69977: PUSH
69978: LD_VAR 0 3
69982: PUSH
69983: LD_INT 1
69985: PLUS
69986: ST_TO_ADDR
// SetSide ( i , j ) ;
69987: LD_VAR 0 2
69991: PPUSH
69992: LD_VAR 0 3
69996: PPUSH
69997: CALL_OW 235
// end ;
70001: GO 69924
70003: POP
70004: POP
// end ;
70005: LD_VAR 0 1
70009: RET
// export function hHackFog ; begin
70010: LD_INT 0
70012: PPUSH
// FogOff ( true ) ;
70013: LD_INT 1
70015: PPUSH
70016: CALL_OW 344
// end ;
70020: LD_VAR 0 1
70024: RET
// export function hHackTeleport ( unit , x , y ) ; begin
70025: LD_INT 0
70027: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
70028: LD_VAR 0 1
70032: PPUSH
70033: LD_VAR 0 2
70037: PPUSH
70038: LD_VAR 0 3
70042: PPUSH
70043: LD_INT 1
70045: PPUSH
70046: LD_INT 1
70048: PPUSH
70049: CALL_OW 483
// CenterOnXY ( x , y ) ;
70053: LD_VAR 0 2
70057: PPUSH
70058: LD_VAR 0 3
70062: PPUSH
70063: CALL_OW 84
// end ; end_of_file
70067: LD_VAR 0 4
70071: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
70072: LD_INT 0
70074: PPUSH
// ar_miner := 81 ;
70075: LD_ADDR_EXP 114
70079: PUSH
70080: LD_INT 81
70082: ST_TO_ADDR
// ar_crane := 88 ;
70083: LD_ADDR_EXP 113
70087: PUSH
70088: LD_INT 88
70090: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
70091: LD_ADDR_EXP 108
70095: PUSH
70096: LD_INT 89
70098: ST_TO_ADDR
// us_hack := 99 ;
70099: LD_ADDR_EXP 109
70103: PUSH
70104: LD_INT 99
70106: ST_TO_ADDR
// us_artillery := 97 ;
70107: LD_ADDR_EXP 110
70111: PUSH
70112: LD_INT 97
70114: ST_TO_ADDR
// ar_bio_bomb := 91 ;
70115: LD_ADDR_EXP 111
70119: PUSH
70120: LD_INT 91
70122: ST_TO_ADDR
// ar_mortar := 92 ;
70123: LD_ADDR_EXP 112
70127: PUSH
70128: LD_INT 92
70130: ST_TO_ADDR
// ru_radar := 98 ;
70131: LD_ADDR_EXP 107
70135: PUSH
70136: LD_INT 98
70138: ST_TO_ADDR
// tech_Artillery := 80 ;
70139: LD_ADDR_EXP 115
70143: PUSH
70144: LD_INT 80
70146: ST_TO_ADDR
// tech_RadMat := 81 ;
70147: LD_ADDR_EXP 116
70151: PUSH
70152: LD_INT 81
70154: ST_TO_ADDR
// tech_BasicTools := 82 ;
70155: LD_ADDR_EXP 117
70159: PUSH
70160: LD_INT 82
70162: ST_TO_ADDR
// tech_Cargo := 83 ;
70163: LD_ADDR_EXP 118
70167: PUSH
70168: LD_INT 83
70170: ST_TO_ADDR
// tech_Track := 84 ;
70171: LD_ADDR_EXP 119
70175: PUSH
70176: LD_INT 84
70178: ST_TO_ADDR
// tech_Crane := 85 ;
70179: LD_ADDR_EXP 120
70183: PUSH
70184: LD_INT 85
70186: ST_TO_ADDR
// tech_Bulldozer := 86 ;
70187: LD_ADDR_EXP 121
70191: PUSH
70192: LD_INT 86
70194: ST_TO_ADDR
// tech_Hovercraft := 87 ;
70195: LD_ADDR_EXP 122
70199: PUSH
70200: LD_INT 87
70202: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
70203: LD_ADDR_EXP 123
70207: PUSH
70208: LD_INT 88
70210: ST_TO_ADDR
// class_mastodont := 31 ;
70211: LD_ADDR_EXP 124
70215: PUSH
70216: LD_INT 31
70218: ST_TO_ADDR
// class_horse := 21 ;
70219: LD_ADDR_EXP 125
70223: PUSH
70224: LD_INT 21
70226: ST_TO_ADDR
// end ;
70227: LD_VAR 0 1
70231: RET
// every 1 do
70232: GO 70234
70234: DISABLE
// InitGlobalVariables ;
70235: CALL 70072 0 0
70239: END
