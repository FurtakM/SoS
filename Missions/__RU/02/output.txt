// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51378 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57853 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57853 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16999 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16999 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16999 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16999 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 55099 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21839 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 55099 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 55099 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21839 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 55099 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 55099 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 55099 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 56401 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54701 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54701 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54701 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 55099 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 55099 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55099 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 55099 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 55099 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 55099 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8819
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8596: LD_ADDR_VAR 0 1
8600: PUSH
8601: LD_INT 21
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 4
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 70
8661: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8662: LD_EXP 40
8666: PPUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8676: LD_INT 35
8678: PPUSH
8679: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8683: LD_EXP 40
8687: PPUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 296
8697: PUSH
8698: LD_INT 6
8700: LESS
8701: IFFALSE 8676
// InGameOn ;
8703: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8707: LD_EXP 40
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
8721: LD_EXP 40
8725: PPUSH
8726: LD_STRING D6-Pla-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8733: LD_EXP 34
8737: PPUSH
8738: LD_STRING D6-Bur-1
8740: PPUSH
8741: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8745: LD_VAR 0 1
8749: PUSH
8750: LD_INT 1
8752: ARRAY
8753: PPUSH
8754: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8758: LD_VAR 0 1
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PPUSH
8767: CALL_OW 266
8771: PUSH
8772: LD_INT 31
8774: EQUAL
8775: IFFALSE 8797
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8777: LD_INT 106
8779: PPUSH
8780: CALL_OW 274
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 10
8790: PPUSH
8791: CALL_OW 276
8795: GO 8815
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8797: LD_INT 106
8799: PPUSH
8800: CALL_OW 274
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_INT 30
8810: PPUSH
8811: CALL_OW 276
// InGameOff ;
8815: CALL_OW 9
// end ;
8819: PPOPN 1
8821: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8822: LD_EXP 4
8826: PUSH
8827: LD_INT 21
8829: PPUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 23
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 71
8869: AND
8870: IFFALSE 9168
8872: GO 8874
8874: DISABLE
8875: LD_INT 0
8877: PPUSH
8878: PPUSH
// begin enable ;
8879: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: LD_INT 21
8887: PPUSH
8888: LD_INT 22
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 71
8927: PUSH
8928: LD_INT 1
8930: ARRAY
8931: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8932: LD_EXP 40
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8953: LD_EXP 40
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 296
8967: PUSH
8968: LD_INT 6
8970: LESS
8971: IFFALSE 8946
// InGameOn ;
8973: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8977: LD_EXP 40
8981: PPUSH
8982: LD_VAR 0 1
8986: PPUSH
8987: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
8991: LD_EXP 40
8995: PPUSH
8996: LD_STRING DPlatAngry
8998: PPUSH
8999: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9003: LD_EXP 34
9007: PPUSH
9008: LD_STRING D6-Bur-1
9010: PPUSH
9011: CALL_OW 88
// RemoveUnit ( tmp ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 64
// InGameOff ;
9024: CALL_OW 9
// amount := 0 ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9036: LD_VAR 0 1
9040: PPUSH
9041: CALL_OW 266
9045: PUSH
9046: LD_INT 31
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9065
9054: POP
// amount := 10 ; b_lab :
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 10
9062: ST_TO_ADDR
9063: GO 9142
9065: LD_INT 6
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9084
9073: POP
// amount := 20 ; b_armoury :
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: LD_INT 20
9081: ST_TO_ADDR
9082: GO 9142
9084: LD_INT 4
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9103
9092: POP
// amount := 30 ; b_workshop :
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 30
9100: ST_TO_ADDR
9101: GO 9142
9103: LD_INT 2
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9122
9111: POP
// amount := 40 ; b_oil_power :
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: LD_INT 40
9119: ST_TO_ADDR
9120: GO 9142
9122: LD_INT 26
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9141
9130: POP
// amount := 20 ; end ;
9131: LD_ADDR_VAR 0 2
9135: PUSH
9136: LD_INT 20
9138: ST_TO_ADDR
9139: GO 9142
9141: POP
// if amount then
9142: LD_VAR 0 2
9146: IFFALSE 9168
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9148: LD_INT 106
9150: PPUSH
9151: CALL_OW 274
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 276
// end ;
9168: PPOPN 2
9170: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9171: LD_INT 22
9173: PUSH
9174: LD_INT 3
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 92
9183: PUSH
9184: LD_INT 112
9186: PUSH
9187: LD_INT 155
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 2
9210: LESS
9211: PUSH
9212: LD_EXP 34
9216: PPUSH
9217: LD_INT 112
9219: PPUSH
9220: LD_INT 155
9222: PPUSH
9223: CALL_OW 297
9227: PUSH
9228: LD_INT 8
9230: LESS
9231: AND
9232: IFFALSE 9445
9234: GO 9236
9236: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9237: LD_INT 112
9239: PPUSH
9240: LD_INT 155
9242: PPUSH
9243: LD_INT 3
9245: PPUSH
9246: LD_INT 4
9248: NEG
9249: PPUSH
9250: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9254: LD_INT 1
9256: PPUSH
9257: LD_EXP 34
9261: PPUSH
9262: CALL_OW 471
// uc_side := 1 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// uc_nation := 1 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9282: LD_ADDR_EXP 49
9286: PUSH
9287: LD_STRING Dickens
9289: PPUSH
9290: CALL_OW 25
9294: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9295: LD_EXP 49
9299: PPUSH
9300: LD_INT 112
9302: PPUSH
9303: LD_INT 155
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 48
// wait ( 0 0$2 ) ;
9313: LD_INT 70
9315: PPUSH
9316: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9320: LD_EXP 49
9324: PPUSH
9325: LD_EXP 34
9329: PPUSH
9330: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9334: LD_EXP 49
9338: PPUSH
9339: LD_STRING DUsSpawnSol
9341: PPUSH
9342: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9346: LD_INT 1
9348: PPUSH
9349: LD_EXP 34
9353: PPUSH
9354: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9358: LD_INT 112
9360: PPUSH
9361: LD_INT 155
9363: PPUSH
9364: LD_INT 3
9366: PPUSH
9367: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9371: LD_EXP 49
9375: PPUSH
9376: LD_INT 77
9378: PPUSH
9379: LD_INT 152
9381: PPUSH
9382: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9393: LD_EXP 49
9397: PPUSH
9398: CALL_OW 302
9402: NOT
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 77
9411: PPUSH
9412: LD_INT 152
9414: PPUSH
9415: CALL_OW 307
9419: OR
9420: IFFALSE 9386
// if not IsOk ( Dickens ) then
9422: LD_EXP 49
9426: PPUSH
9427: CALL_OW 302
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 9445
// RemoveUnit ( Dickens ) ;
9436: LD_EXP 49
9440: PPUSH
9441: CALL_OW 64
// end ;
9445: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9446: LD_EXP 34
9450: PPUSH
9451: CALL_OW 256
9455: PUSH
9456: LD_INT 600
9458: LESS
9459: IFFALSE 9476
9461: GO 9463
9463: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DUsSpawnBur
9471: PPUSH
9472: CALL_OW 88
9476: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9477: LD_EXP 12
9481: IFFALSE 10543
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin hasToBuildTank := false ;
9492: LD_ADDR_EXP 11
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9500: LD_ADDR_EXP 5
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: LD_INT 22
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// InGameOn ;
9542: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9546: LD_VAR 0 2
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL_OW 85
// wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9566: LD_EXP 34
9570: PPUSH
9571: LD_STRING D9-Bur-1
9573: PPUSH
9574: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9578: LD_EXP 40
9582: PPUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 112
// p := 0 ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9604: LD_INT 35
9606: PPUSH
9607: CALL_OW 67
// p := p + 1 ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 1
9623: PLUS
9624: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_VAR 0 2
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 8
9646: LESS
9647: PUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 8
9655: GREATER
9656: OR
9657: IFFALSE 9604
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING D9-Pla-1
9684: PPUSH
9685: CALL_OW 88
// ComFree ( Platonov ) ;
9689: LD_EXP 40
9693: PPUSH
9694: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9698: LD_EXP 40
9702: PPUSH
9703: LD_INT 64
9705: PPUSH
9706: LD_INT 98
9708: PPUSH
9709: CALL_OW 171
// InGameOff ;
9713: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9717: LD_STRING M3
9719: PPUSH
9720: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9724: LD_EXP 41
9728: PPUSH
9729: LD_INT 70
9731: PPUSH
9732: LD_INT 108
9734: PPUSH
9735: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9739: LD_EXP 41
9743: PPUSH
9744: CALL_OW 200
// wait ( 1 ) ;
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 67
// ComExit ( Belkov ) ;
9755: LD_EXP 36
9759: PPUSH
9760: CALL 55099 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9764: LD_EXP 36
9768: PPUSH
9769: LD_INT 113
9771: PPUSH
9772: LD_INT 104
9774: PPUSH
9775: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9779: LD_EXP 36
9783: PPUSH
9784: LD_INT 116
9786: PPUSH
9787: LD_INT 108
9789: PPUSH
9790: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 91
9823: PUSH
9824: LD_INT 71
9826: PUSH
9827: LD_INT 8
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 69
9844: IFFALSE 9794
// InGameOn ;
9846: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 91
9877: PUSH
9878: LD_INT 71
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// if belkovTeam < 3 then
9899: LD_EXP 45
9903: PUSH
9904: LD_INT 3
9906: LESS
9907: IFFALSE 9992
// begin for i := belkovTeam to 3 do
9909: LD_ADDR_VAR 0 1
9913: PUSH
9914: DOUBLE
9915: LD_EXP 45
9919: DEC
9920: ST_TO_ADDR
9921: LD_INT 3
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9990
// begin un := kirovBaseSquad [ 1 ] ;
9927: LD_ADDR_VAR 0 4
9931: PUSH
9932: LD_EXP 43
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9941: LD_ADDR_EXP 43
9945: PUSH
9946: LD_EXP 43
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 3
9958: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 45
9973: PUSH
9974: LD_INT 1
9976: PLUS
9977: PPUSH
9978: LD_VAR 0 4
9982: PPUSH
9983: CALL_OW 1
9987: ST_TO_ADDR
// end ;
9988: GO 9924
9990: POP
9991: POP
// end ; if Kirilenkova then
9992: LD_EXP 37
9996: IFFALSE 10020
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9998: LD_ADDR_EXP 45
10002: PUSH
10003: LD_EXP 45
10007: PPUSH
10008: LD_EXP 37
10012: PPUSH
10013: CALL 54701 0 2
10017: ST_TO_ADDR
10018: GO 10059
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
10020: LD_ADDR_EXP 45
10024: PUSH
10025: LD_EXP 45
10029: PPUSH
10030: LD_EXP 43
10034: PPUSH
10035: LD_INT 25
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 72
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: CALL 54701 0 2
10058: ST_TO_ADDR
// ComExit ( Kurin ) ;
10059: LD_EXP 38
10063: PPUSH
10064: CALL 55099 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10068: LD_EXP 38
10072: PPUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: CALL_OW 179
// wait ( 0 0$1 ) ;
10086: LD_INT 35
10088: PPUSH
10089: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 1
10118: ARRAY
10119: PPUSH
10120: CALL_OW 311
10124: ST_TO_ADDR
// ComExit ( un ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 55099 0 1
// wait ( 0 0$1 ) ;
10134: LD_INT 35
10136: PPUSH
10137: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10141: LD_VAR 0 4
10145: PPUSH
10146: LD_EXP 38
10150: PPUSH
10151: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10155: LD_EXP 36
10159: PPUSH
10160: LD_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10173: LD_INT 10
10175: PPUSH
10176: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10180: LD_EXP 38
10184: PPUSH
10185: LD_STRING D10-Kur-1
10187: PPUSH
10188: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10192: LD_EXP 36
10196: PPUSH
10197: LD_INT 122
10199: PPUSH
10200: LD_INT 112
10202: PPUSH
10203: CALL_OW 176
// wait ( 0 0$2 ) ;
10207: LD_INT 70
10209: PPUSH
10210: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10214: LD_EXP 36
10218: PPUSH
10219: LD_STRING D10-Bel-1
10221: PPUSH
10222: CALL_OW 88
// if belkovBrother then
10226: LD_EXP 32
10230: IFFALSE 10282
// begin Say ( Burlak , D10-Bur-1 ) ;
10232: LD_EXP 34
10236: PPUSH
10237: LD_STRING D10-Bur-1
10239: PPUSH
10240: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10244: LD_EXP 36
10248: PPUSH
10249: LD_STRING D10-Bel-2
10251: PPUSH
10252: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10256: LD_EXP 34
10260: PPUSH
10261: LD_STRING D10-Bur-2
10263: PPUSH
10264: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10268: LD_EXP 38
10272: PPUSH
10273: LD_STRING D10-Kur-2a
10275: PPUSH
10276: CALL_OW 88
// end else
10280: GO 10294
// begin Say ( Kurin , D10-Kur-2 ) end ;
10282: LD_EXP 38
10286: PPUSH
10287: LD_STRING D10-Kur-2
10289: PPUSH
10290: CALL_OW 88
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10301: LD_EXP 38
10305: PPUSH
10306: LD_STRING D10-Kur-2b
10308: PPUSH
10309: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10313: LD_VAR 0 4
10317: PPUSH
10318: LD_INT 66
10320: PPUSH
10321: LD_INT 97
10323: PPUSH
10324: CALL_OW 111
// wait ( 0 0$5 ) ;
10328: LD_INT 175
10330: PPUSH
10331: CALL_OW 67
// InGameOff ;
10335: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10339: LD_EXP 33
10343: PPUSH
10344: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10348: LD_STRING M4
10350: PPUSH
10351: CALL_OW 337
// wait ( 0 0$6 ) ;
10355: LD_INT 210
10357: PPUSH
10358: CALL_OW 67
// kurinDontWannaTalk := true ;
10362: LD_ADDR_EXP 5
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10370: LD_INT 140
10372: PPUSH
10373: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10377: LD_INT 35
10379: PPUSH
10380: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10384: LD_EXP 34
10388: PPUSH
10389: CALL_OW 310
10393: PUSH
10394: LD_EXP 34
10398: PPUSH
10399: LD_INT 106
10401: PPUSH
10402: CALL_OW 296
10406: PUSH
10407: LD_INT 12
10409: LESS
10410: OR
10411: IFFALSE 10377
// DialogueOn ;
10413: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D11-Pla-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10429: LD_EXP 34
10433: PPUSH
10434: LD_STRING D11-Bur-1
10436: PPUSH
10437: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PUSH
10470: LD_INT 1
10472: GREATER
10473: IFFALSE 10487
// Say ( Burlak , D11-Bur-1a ) ;
10475: LD_EXP 34
10479: PPUSH
10480: LD_STRING D11-Bur-1a
10482: PPUSH
10483: CALL_OW 88
// DialogueOff ;
10487: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10491: LD_ADDR_EXP 8
10495: PUSH
10496: LD_INT 160
10498: PUSH
10499: LD_INT 150
10501: PUSH
10502: LD_INT 140
10504: PUSH
10505: LD_INT 120
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_OWVAR 67
10518: ARRAY
10519: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10520: LD_STRING M5
10522: PPUSH
10523: CALL_OW 337
// kirovHasTank := true ;
10527: LD_ADDR_EXP 6
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// hasToBuildTank := true ;
10535: LD_ADDR_EXP 11
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// end ;
10543: PPOPN 4
10545: END
// every 0 0$2 trigger allianceAttacked do
10546: LD_EXP 13
10550: IFFALSE 10589
10552: GO 10554
10554: DISABLE
// begin DialogueOn ;
10555: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10559: LD_EXP 38
10563: PPUSH
10564: LD_STRING DArestKur
10566: PPUSH
10567: CALL_OW 88
// dwait ( 0 0$1 ) ;
10571: LD_INT 35
10573: PPUSH
10574: CALL_OW 68
// YouLost ( SelfAttack ) ;
10578: LD_STRING SelfAttack
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10590: LD_INT 22
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: GREATEREQUAL
10648: PUSH
10649: LD_EXP 6
10653: AND
10654: IFFALSE 10824
10656: GO 10658
10658: DISABLE
// begin hasToBuildTank := false ;
10659: LD_ADDR_EXP 11
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// blockNorth := false ;
10667: LD_ADDR_EXP 7
10671: PUSH
10672: LD_INT 0
10674: ST_TO_ADDR
// InGameOn ;
10675: CALL_OW 8
// wait ( 0 0$2 ) ;
10679: LD_INT 70
10681: PPUSH
10682: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10686: LD_INT 106
10688: PPUSH
10689: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10693: LD_EXP 40
10697: PPUSH
10698: LD_INT 65
10700: PPUSH
10701: LD_INT 97
10703: PPUSH
10704: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10708: LD_EXP 40
10712: PPUSH
10713: LD_EXP 34
10717: PPUSH
10718: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10722: LD_EXP 34
10726: PPUSH
10727: LD_STRING D12-Bur-1
10729: PPUSH
10730: CALL_OW 88
// wait ( 0 0$1 ) ;
10734: LD_INT 35
10736: PPUSH
10737: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10741: LD_EXP 40
10745: PPUSH
10746: LD_STRING D12-Pla-1
10748: PPUSH
10749: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10753: LD_EXP 34
10757: PPUSH
10758: LD_STRING D12-Bur-2
10760: PPUSH
10761: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10765: LD_EXP 40
10769: PPUSH
10770: LD_STRING D12-Pla-2
10772: PPUSH
10773: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10777: LD_EXP 34
10781: PPUSH
10782: LD_STRING D12-Bur-3
10784: PPUSH
10785: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10789: LD_EXP 40
10793: PPUSH
10794: LD_STRING D12-Pla-3
10796: PPUSH
10797: CALL_OW 88
// hasAllTanks := true ;
10801: LD_ADDR_EXP 14
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// InGameOff ;
10809: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10813: LD_STRING M6
10815: PPUSH
10816: CALL_OW 337
// PrepareAmerican ;
10820: CALL 3961 0 0
// end ;
10824: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10825: LD_EXP 17
10829: IFFALSE 12593
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
// begin PrepareAmericanTrap ;
10843: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_EXP 48
10856: PPUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 72
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10876: LD_INT 22
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 60
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: PPUSH
10919: CALL_OW 141
// InGameOn ;
10923: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10927: LD_INT 69
10929: PPUSH
10930: LD_INT 22
10932: PPUSH
10933: CALL_OW 86
// wait ( 0 0$1 ) ;
10937: LD_INT 35
10939: PPUSH
10940: CALL_OW 67
// DialogueOn ;
10944: CALL_OW 6
// game_speed := 4 ;
10948: LD_ADDR_OWVAR 65
10952: PUSH
10953: LD_INT 4
10955: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_STRING D13-Sol1-1
10963: PPUSH
10964: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10968: LD_EXP 36
10972: PPUSH
10973: LD_STRING D13-Bel-1
10975: PPUSH
10976: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10980: LD_EXP 38
10984: PPUSH
10985: LD_STRING D13-Kur-1
10987: PPUSH
10988: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10992: LD_INT 10
10994: PPUSH
10995: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10999: LD_EXP 36
11003: PPUSH
11004: LD_STRING D13-Bel-2
11006: PPUSH
11007: CALL_OW 94
// DialogueOff ;
11011: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11015: LD_EXP 36
11019: PPUSH
11020: LD_INT 76
11022: PPUSH
11023: LD_INT 20
11025: PPUSH
11026: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11030: LD_EXP 45
11034: PPUSH
11035: LD_INT 72
11037: PPUSH
11038: LD_INT 20
11040: PPUSH
11041: CALL_OW 111
// wait ( 0 0$2 ) ;
11045: LD_INT 70
11047: PPUSH
11048: CALL_OW 67
// for i in usTrapForces do
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_EXP 48
11061: PUSH
11062: FOR_IN
11063: IFFALSE 11096
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11065: LD_VAR 0 1
11069: PPUSH
11070: LD_INT 7
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_EXP 36
11089: PPUSH
11090: CALL_OW 119
// end ;
11094: GO 11062
11096: POP
11097: POP
// wait ( 0 0$0.3 ) ;
11098: LD_INT 10
11100: PPUSH
11101: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11105: LD_EXP 48
11109: PPUSH
11110: LD_INT 65
11112: PPUSH
11113: LD_INT 18
11115: PPUSH
11116: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11120: LD_INT 70
11122: PPUSH
11123: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11127: LD_EXP 48
11131: PPUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 72
11146: PUSH
11147: LD_INT 3
11149: GREATER
11150: IFFALSE 11120
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11152: LD_INT 65
11154: PPUSH
11155: LD_INT 18
11157: PPUSH
11158: LD_INT 3
11160: PPUSH
11161: LD_INT 26
11163: NEG
11164: PPUSH
11165: CALL_OW 330
// DialogueOn ;
11169: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_STRING D14-Sol1-1
11180: PPUSH
11181: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11185: LD_EXP 36
11189: PPUSH
11190: LD_STRING D14-Bel-1
11192: PPUSH
11193: CALL_OW 88
// DialogueOff ;
11197: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11201: LD_INT 65
11203: PPUSH
11204: LD_INT 18
11206: PPUSH
11207: LD_INT 3
11209: PPUSH
11210: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11214: LD_EXP 45
11218: PPUSH
11219: LD_INT 31
11221: PPUSH
11222: LD_INT 9
11224: PPUSH
11225: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11229: LD_EXP 48
11233: PPUSH
11234: LD_INT 50
11236: PPUSH
11237: LD_INT 16
11239: PPUSH
11240: CALL_OW 174
// wait ( 0 0$2 ) ;
11244: LD_INT 70
11246: PPUSH
11247: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11251: LD_ADDR_VAR 0 6
11255: PUSH
11256: LD_EXP 36
11260: PPUSH
11261: CALL_OW 310
11265: ST_TO_ADDR
// if not belkovTank then
11266: LD_VAR 0 6
11270: NOT
11271: IFFALSE 11311
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11273: LD_ADDR_VAR 0 6
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 6
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 58
11318: PPUSH
11319: LD_INT 21
11321: PPUSH
11322: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11326: LD_EXP 36
11330: PPUSH
11331: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11335: LD_EXP 36
11339: PPUSH
11340: LD_INT 53
11342: PPUSH
11343: LD_INT 18
11345: PPUSH
11346: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11350: LD_EXP 36
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 9
11360: PPUSH
11361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11365: LD_INT 35
11367: PPUSH
11368: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_EXP 36
11381: PUSH
11382: LD_EXP 45
11386: UNION
11387: PUSH
11388: LD_VAR 0 6
11392: UNION
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11426
// if GetLives ( i ) < 800 then
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 256
11406: PUSH
11407: LD_INT 800
11409: LESS
11410: IFFALSE 11424
// SetLives ( i , 800 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 800
11419: PPUSH
11420: CALL_OW 234
11424: GO 11394
11426: POP
11427: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11428: LD_EXP 36
11432: PPUSH
11433: LD_INT 31
11435: PPUSH
11436: LD_INT 9
11438: PPUSH
11439: CALL_OW 297
11443: PUSH
11444: LD_INT 4
11446: LESS
11447: IFFALSE 11365
// for i := 1 to Difficulty do
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_OWVAR 67
11463: PUSH
11464: FOR_TO
11465: IFFALSE 11507
// if i <= belkovTeam then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 45
11476: LESSEQUAL
11477: IFFALSE 11505
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11479: LD_EXP 45
11483: PUSH
11484: LD_VAR 0 1
11488: ARRAY
11489: PPUSH
11490: LD_INT 600
11492: PPUSH
11493: LD_INT 800
11495: PPUSH
11496: CALL_OW 12
11500: PPUSH
11501: CALL_OW 234
11505: GO 11464
11507: POP
11508: POP
// SetLives ( Belkov , 820 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_INT 820
11516: PPUSH
11517: CALL_OW 234
// InGameOff ;
11521: CALL_OW 9
// DialogueOn ;
11525: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11529: LD_EXP 36
11533: PPUSH
11534: LD_STRING D14-Bel-1a
11536: PPUSH
11537: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11541: LD_EXP 38
11545: PPUSH
11546: LD_STRING D14-Kur-1
11548: PPUSH
11549: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11553: LD_EXP 36
11557: PPUSH
11558: LD_STRING D14-Bel-2
11560: PPUSH
11561: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11565: LD_EXP 38
11569: PPUSH
11570: LD_STRING D14-Kur-2
11572: PPUSH
11573: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11577: LD_EXP 34
11581: PPUSH
11582: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11586: LD_EXP 34
11590: PPUSH
11591: LD_STRING D14a-Bur-1
11593: PPUSH
11594: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11598: LD_EXP 40
11602: PPUSH
11603: LD_STRING D14a-Pla-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D14a-Bur-2
11617: PPUSH
11618: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11622: LD_EXP 40
11626: PPUSH
11627: LD_STRING D14a-Pla-2
11629: PPUSH
11630: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_STRING D14a-Bur-3
11641: PPUSH
11642: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11646: LD_EXP 40
11650: PPUSH
11651: LD_STRING D14a-Pla-3
11653: PPUSH
11654: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11658: LD_EXP 34
11662: PPUSH
11663: LD_STRING D14a-Bur-4
11665: PPUSH
11666: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11670: LD_EXP 40
11674: PPUSH
11675: LD_STRING D14a-Pla-4
11677: PPUSH
11678: CALL_OW 88
// DialogueOff ;
11682: CALL_OW 7
// belkovTrapped := true ;
11686: LD_ADDR_EXP 18
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11694: LD_EXP 48
11698: PPUSH
11699: LD_INT 68
11701: PPUSH
11702: LD_INT 16
11704: PPUSH
11705: CALL_OW 111
// if belkovTank then
11709: LD_VAR 0 6
11713: IFFALSE 11752
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11715: LD_EXP 48
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 6
11728: PPUSH
11729: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11733: LD_EXP 48
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: PPUSH
11742: LD_INT 69
11744: PPUSH
11745: LD_INT 20
11747: PPUSH
11748: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11752: LD_EXP 36
11756: PPUSH
11757: LD_INT 40
11759: PPUSH
11760: LD_INT 17
11762: PPUSH
11763: CALL_OW 111
// AddComHold ( Belkov ) ;
11767: LD_EXP 36
11771: PPUSH
11772: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 44
11783: PUSH
11784: LD_INT 18
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 42
11793: PUSH
11794: LD_INT 16
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 40
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 44
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 42
11823: PUSH
11824: LD_INT 20
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 42
11833: PUSH
11834: LD_INT 12
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 42
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_EXP 45
11869: PPUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11952
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_INT 2
11917: ARRAY
11918: PPUSH
11919: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 3
11940: ST_TO_ADDR
// AddComCrawl ( i ) ;
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 197
// end ;
11950: GO 11885
11952: POP
11953: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11954: LD_EXP 45
11958: PPUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: IFFALSE 12005
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11975: LD_EXP 45
11979: PPUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 18
12000: PPUSH
12001: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12005: LD_ADDR_VAR 0 7
12009: PUSH
12010: LD_INT 9450
12012: PUSH
12013: LD_INT 8400
12015: PUSH
12016: LD_INT 6650
12018: PUSH
12019: LD_INT 5250
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_OWVAR 67
12032: ARRAY
12033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12034: LD_INT 35
12036: PPUSH
12037: CALL_OW 67
// timer := timer - 0 0$1 ;
12041: LD_ADDR_VAR 0 7
12045: PUSH
12046: LD_VAR 0 7
12050: PUSH
12051: LD_INT 35
12053: MINUS
12054: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12055: LD_INT 19
12057: PPUSH
12058: LD_INT 22
12060: PUSH
12061: LD_INT 3
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 70
12072: IFFALSE 12082
// timer := 0 0$0 ;
12074: LD_ADDR_VAR 0 7
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// until timer <= 0 ;
12082: LD_VAR 0 7
12086: PUSH
12087: LD_INT 0
12089: LESSEQUAL
12090: IFFALSE 12034
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12092: LD_EXP 48
12096: PPUSH
12097: LD_INT 50
12099: PUSH
12100: EMPTY
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12593
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_EXP 48
12121: PPUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 54
12137: PUSH
12138: EMPTY
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: LD_EXP 48
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 54
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 72
12195: ST_TO_ADDR
// for i in sol do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12223
// SetTag ( i , 0 ) ;
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 109
12221: GO 12206
12223: POP
12224: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12225: LD_VAR 0 5
12229: PPUSH
12230: LD_INT 60
12232: PPUSH
12233: LD_INT 8
12235: PPUSH
12236: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12240: LD_INT 22
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: IFFALSE 12309
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12270: LD_INT 22
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: PPUSH
12299: LD_INT 53
12301: PPUSH
12302: LD_INT 24
12304: PPUSH
12305: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12309: LD_INT 18
12311: PPUSH
12312: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: LD_EXP 48
12325: PPUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 50
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: LD_INT 54
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12365: LD_VAR 0 4
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL 52270 0 2
12377: PUSH
12378: LD_VAR 0 4
12382: EQUAL
12383: IFFALSE 12422
// begin wait ( 0 0$3 ) ;
12385: LD_INT 105
12387: PPUSH
12388: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12392: LD_VAR 0 4
12396: PPUSH
12397: LD_INT 41
12399: PPUSH
12400: LD_INT 18
12402: PPUSH
12403: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12407: LD_VAR 0 5
12411: PPUSH
12412: LD_INT 60
12414: PPUSH
12415: LD_INT 8
12417: PPUSH
12418: CALL_OW 111
// end ; for i in sol do
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: LD_VAR 0 4
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12508
// if GetLives ( i ) < 800 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 800
12447: LESS
12448: IFFALSE 12479
// begin SetTag ( i , 1 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_INT 60
12469: PPUSH
12470: LD_INT 8
12472: PPUSH
12473: CALL_OW 111
// end else
12477: GO 12506
// if GetLives ( i ) = 1000 then
12479: LD_VAR 0 1
12483: PPUSH
12484: CALL_OW 256
12488: PUSH
12489: LD_INT 1000
12491: EQUAL
12492: IFFALSE 12506
// SetTag ( i , 0 ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 109
12506: GO 12432
12508: POP
12509: POP
// until belkovDied or not sol ;
12510: LD_EXP 19
12514: PUSH
12515: LD_VAR 0 4
12519: NOT
12520: OR
12521: IFFALSE 12309
// if not sol then
12523: LD_VAR 0 4
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12593
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12532: LD_VAR 0 4
12536: PUSH
12537: LD_VAR 0 5
12541: ADD
12542: PPUSH
12543: LD_INT 56
12545: PPUSH
12546: LD_INT 25
12548: PPUSH
12549: CALL_OW 111
// wait ( 0 0$30 ) ;
12553: LD_INT 1050
12555: PPUSH
12556: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12560: LD_EXP 48
12564: PPUSH
12565: LD_INT 66
12567: PPUSH
12568: LD_INT 96
12570: PPUSH
12571: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_VAR 0 4
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 112
// end ;
12593: PPOPN 7
12595: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12596: LD_EXP 18
12600: PUSH
12601: LD_EXP 19
12605: NOT
12606: AND
12607: PUSH
12608: LD_INT 9
12610: PPUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 70
12625: AND
12626: IFFALSE 12946
12628: GO 12630
12630: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12631: LD_STRING QAttackAm
12633: PPUSH
12634: CALL_OW 97
12638: PUSH
12639: LD_INT 1
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12714
12647: POP
// begin initiative := true ;
12648: LD_ADDR_EXP 31
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// DialogueOn ;
12656: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12660: LD_EXP 34
12664: PPUSH
12665: LD_STRING D17-Bur-1
12667: PPUSH
12668: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12672: LD_EXP 40
12676: PPUSH
12677: LD_STRING D17-Pla-1
12679: PPUSH
12680: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12684: LD_EXP 34
12688: PPUSH
12689: LD_STRING D17-Bur-2
12691: PPUSH
12692: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12696: LD_EXP 40
12700: PPUSH
12701: LD_STRING D17-Pla-2
12703: PPUSH
12704: CALL_OW 94
// DialogueOff ;
12708: CALL_OW 7
// end ; 2 :
12712: GO 12876
12714: LD_INT 2
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12814
12722: POP
// begin initiative := true ;
12723: LD_ADDR_EXP 31
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// DialogueOn ;
12731: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12735: LD_EXP 34
12739: PPUSH
12740: LD_STRING D18-Bur-1
12742: PPUSH
12743: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12747: LD_EXP 40
12751: PPUSH
12752: LD_STRING D18-Pla-1
12754: PPUSH
12755: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12759: LD_EXP 34
12763: PPUSH
12764: LD_STRING D18-Bur-2
12766: PPUSH
12767: CALL_OW 88
// if not reinforcementsGained then
12771: LD_EXP 25
12775: NOT
12776: IFFALSE 12796
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12778: LD_EXP 40
12782: PPUSH
12783: LD_STRING D18-Pla-2
12785: PPUSH
12786: CALL_OW 94
// SendReinforcements ;
12790: CALL 3302 0 0
// end else
12794: GO 12808
// SayRadio ( Platonov , D22-Pla-1b ) ;
12796: LD_EXP 40
12800: PPUSH
12801: LD_STRING D22-Pla-1b
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// end ; 3 :
12812: GO 12876
12814: LD_INT 3
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12875
12822: POP
// begin if IsOk ( Gnyevko ) then
12823: LD_EXP 35
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12848
// Say ( Gnyevko , D19A-Gny-1 ) else
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING D19A-Gny-1
12841: PPUSH
12842: CALL_OW 88
12846: GO 12871
// if IsOk ( Kovalyuk ) then
12848: LD_EXP 39
12852: PPUSH
12853: CALL_OW 302
12857: IFFALSE 12871
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12859: LD_EXP 39
12863: PPUSH
12864: LD_STRING D19A-Kov-1
12866: PPUSH
12867: CALL_OW 88
// exit ;
12871: GO 12946
// end ; end ;
12873: GO 12876
12875: POP
// if IsOk ( Gnyevko ) then
12876: LD_EXP 35
12880: PPUSH
12881: CALL_OW 302
12885: IFFALSE 12911
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12887: LD_EXP 35
12891: PPUSH
12892: LD_STRING D19-Gny-1
12894: PPUSH
12895: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12899: LD_EXP 34
12903: PPUSH
12904: LD_STRING D19-Bur-1
12906: PPUSH
12907: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12911: LD_EXP 39
12915: PPUSH
12916: CALL_OW 302
12920: IFFALSE 12946
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12922: LD_EXP 39
12926: PPUSH
12927: LD_STRING D19-Kov-1
12929: PPUSH
12930: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12934: LD_EXP 34
12938: PPUSH
12939: LD_STRING D19-Bur-2
12941: PPUSH
12942: CALL_OW 88
// end ; end ;
12946: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12947: LD_EXP 18
12951: PUSH
12952: LD_EXP 19
12956: NOT
12957: AND
12958: PUSH
12959: LD_INT 16
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 70
12976: AND
12977: IFFALSE 13205
12979: GO 12981
12981: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12982: LD_STRING QAttackBw
12984: PPUSH
12985: CALL_OW 97
12989: PUSH
12990: LD_INT 1
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13041
12998: POP
// begin initiative := true ;
12999: LD_ADDR_EXP 31
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// DialogueOn ;
13007: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13011: LD_EXP 34
13015: PPUSH
13016: LD_STRING D21-Bur-1
13018: PPUSH
13019: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13023: LD_EXP 40
13027: PPUSH
13028: LD_STRING D21-Pla-1
13030: PPUSH
13031: CALL_OW 94
// DialogueOff ;
13035: CALL_OW 7
// end ; 2 :
13039: GO 13156
13041: LD_INT 2
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13144
13049: POP
// begin initiative := true ;
13050: LD_ADDR_EXP 31
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// DialogueOn ;
13058: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_STRING D22-Bur-1
13069: PPUSH
13070: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13074: LD_EXP 25
13078: NOT
13079: PUSH
13080: LD_EXP 22
13084: AND
13085: IFFALSE 13105
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1
13094: PPUSH
13095: CALL_OW 94
// SendReinforcements ;
13099: CALL 3302 0 0
// end else
13103: GO 13138
// if not westOutpostDestroyed then
13105: LD_EXP 22
13109: NOT
13110: IFFALSE 13126
// SayRadio ( Platonov , D22-Pla-1a ) else
13112: LD_EXP 40
13116: PPUSH
13117: LD_STRING D22-Pla-1a
13119: PPUSH
13120: CALL_OW 94
13124: GO 13138
// SayRadio ( Platonov , D22-Pla-1b ) ;
13126: LD_EXP 40
13130: PPUSH
13131: LD_STRING D22-Pla-1b
13133: PPUSH
13134: CALL_OW 94
// DialogueOff ;
13138: CALL_OW 7
// end ; 3 :
13142: GO 13156
13144: LD_INT 3
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13155
13152: POP
// begin end ; end ;
13153: GO 13156
13155: POP
// ChangeMissionObjectives ( M9 ) ;
13156: LD_STRING M9
13158: PPUSH
13159: CALL_OW 337
// wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// if IsOk ( Gnyevko ) then
13170: LD_EXP 35
13174: PPUSH
13175: CALL_OW 302
13179: IFFALSE 13205
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13181: LD_EXP 35
13185: PPUSH
13186: LD_STRING D23-Gny-1
13188: PPUSH
13189: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13193: LD_EXP 34
13197: PPUSH
13198: LD_STRING D23-Bur-1
13200: PPUSH
13201: CALL_OW 88
// end ; end ;
13205: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13206: LD_EXP 18
13210: PUSH
13211: LD_EXP 19
13215: AND
13216: PUSH
13217: LD_EXP 28
13221: NOT
13222: AND
13223: PUSH
13224: LD_EXP 45
13228: PPUSH
13229: LD_INT 91
13231: PUSH
13232: LD_EXP 34
13236: PUSH
13237: LD_INT 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 72
13249: AND
13250: IFFALSE 13294
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
// begin for i in belkovTeam do
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_EXP 45
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13285
// SetSide ( i , 3 ) ;
13271: LD_VAR 0 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: CALL_OW 235
13283: GO 13268
13285: POP
13286: POP
// ChangeMissionObjectives ( M9a ) ;
13287: LD_STRING M9a
13289: PPUSH
13290: CALL_OW 337
// end ;
13294: PPOPN 1
13296: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13297: LD_EXP 34
13301: PPUSH
13302: LD_EXP 36
13306: PPUSH
13307: CALL_OW 296
13311: PUSH
13312: LD_INT 6
13314: LESS
13315: PUSH
13316: LD_EXP 18
13320: AND
13321: PUSH
13322: LD_EXP 36
13326: PPUSH
13327: CALL_OW 302
13331: AND
13332: PUSH
13333: LD_INT 3
13335: PPUSH
13336: CALL_OW 463
13340: NOT
13341: AND
13342: IFFALSE 13657
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
13350: PPUSH
// begin InGameOn ;
13351: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13355: LD_EXP 34
13359: PPUSH
13360: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13364: LD_EXP 34
13368: PPUSH
13369: LD_INT 37
13371: PPUSH
13372: LD_INT 17
13374: PPUSH
13375: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13379: LD_EXP 34
13383: PPUSH
13384: LD_EXP 36
13388: PPUSH
13389: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13393: LD_EXP 36
13397: PPUSH
13398: LD_EXP 34
13402: PPUSH
13403: CALL_OW 119
// p := 0 ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// p := p + 1 ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_VAR 0 2
13431: PUSH
13432: LD_INT 1
13434: PLUS
13435: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13436: LD_EXP 34
13440: PPUSH
13441: LD_EXP 36
13445: PPUSH
13446: CALL_OW 296
13450: PUSH
13451: LD_INT 4
13453: LESS
13454: PUSH
13455: LD_VAR 0 2
13459: PUSH
13460: LD_INT 6
13462: GREATER
13463: OR
13464: IFFALSE 13415
// ComTurnUnit ( Burlak , Belkov ) ;
13466: LD_EXP 34
13470: PPUSH
13471: LD_EXP 36
13475: PPUSH
13476: CALL_OW 119
// DialogueOn ;
13480: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13484: LD_EXP 36
13488: PPUSH
13489: LD_STRING D24-Bel-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13496: LD_EXP 34
13500: PPUSH
13501: LD_STRING D24-Bur-1
13503: PPUSH
13504: CALL_OW 88
// if belkovBrother then
13508: LD_EXP 32
13512: IFFALSE 13526
// Say ( Burlak , D24-Bur-1a ) ;
13514: LD_EXP 34
13518: PPUSH
13519: LD_STRING D24-Bur-1a
13521: PPUSH
13522: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13526: LD_EXP 36
13530: PPUSH
13531: LD_STRING D24-Bel-2
13533: PPUSH
13534: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13538: LD_EXP 34
13542: PPUSH
13543: LD_STRING D24-Bur-2
13545: PPUSH
13546: CALL_OW 88
// if vehCaptured then
13550: LD_EXP 16
13554: IFFALSE 13568
// Say ( Burlak , D24-Bur-2a ) ;
13556: LD_EXP 34
13560: PPUSH
13561: LD_STRING D24-Bur-2a
13563: PPUSH
13564: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13568: LD_EXP 40
13572: PPUSH
13573: LD_STRING D24-Pla-2
13575: PPUSH
13576: CALL_OW 94
// if not westOutpostDestroyed then
13580: LD_EXP 22
13584: NOT
13585: IFFALSE 13599
// SayRadio ( Platonov , D24-Pla-2a ) ;
13587: LD_EXP 40
13591: PPUSH
13592: LD_STRING D24-Pla-2a
13594: PPUSH
13595: CALL_OW 94
// DialogueOff ;
13599: CALL_OW 7
// InGameOff ;
13603: CALL_OW 9
// belkovSaved := true ;
13607: LD_ADDR_EXP 28
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_EXP 45
13624: PUSH
13625: LD_EXP 36
13629: UNION
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// SetSide ( i , 3 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 3
13641: PPUSH
13642: CALL_OW 235
13646: GO 13631
13648: POP
13649: POP
// ChangeMissionObjectives ( M9a ) ;
13650: LD_STRING M9a
13652: PPUSH
13653: CALL_OW 337
// end ;
13657: PPOPN 2
13659: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13660: LD_INT 3
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 95
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: CALL 57974 0 2
13696: IFFALSE 13881
13698: GO 13700
13700: DISABLE
// begin DialogueOn ;
13701: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13705: LD_INT 49
13707: PPUSH
13708: LD_INT 57
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: LD_INT 12
13716: NEG
13717: PPUSH
13718: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13722: LD_INT 49
13724: PPUSH
13725: LD_INT 57
13727: PPUSH
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13735: LD_INT 49
13737: PPUSH
13738: LD_INT 57
13740: PPUSH
13741: CALL_OW 84
// if not eastOutpostDiscovered then
13745: LD_EXP 21
13749: NOT
13750: IFFALSE 13790
// begin Say ( Burlak , D15-Bur-1 ) ;
13752: LD_EXP 34
13756: PPUSH
13757: LD_STRING D15-Bur-1
13759: PPUSH
13760: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13764: LD_EXP 35
13768: PPUSH
13769: LD_STRING D15-Gny-1
13771: PPUSH
13772: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13776: LD_EXP 39
13780: PPUSH
13781: LD_STRING D15-Kov-1
13783: PPUSH
13784: CALL_OW 88
// end else
13788: GO 13826
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13790: LD_EXP 39
13794: PPUSH
13795: LD_STRING D16-Kov-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13802: LD_EXP 34
13806: PPUSH
13807: LD_STRING D16-Bur-1
13809: PPUSH
13810: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13814: LD_EXP 35
13818: PPUSH
13819: LD_STRING D16-Gny-1
13821: PPUSH
13822: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13826: LD_EXP 34
13830: PPUSH
13831: LD_STRING D15-Bur-2
13833: PPUSH
13834: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13838: LD_EXP 39
13842: PPUSH
13843: LD_STRING D15-Kov-2
13845: PPUSH
13846: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13850: LD_EXP 34
13854: PPUSH
13855: LD_STRING D15-Bur-3
13857: PPUSH
13858: CALL_OW 88
// DialogueOff ;
13862: CALL_OW 7
// westOutpostDiscovered := true ;
13866: LD_ADDR_EXP 20
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13874: LD_STRING M7
13876: PPUSH
13877: CALL_OW 337
// end ;
13881: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13882: LD_INT 3
13884: PPUSH
13885: LD_INT 22
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 95
13897: PUSH
13898: LD_INT 15
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL 57974 0 2
13918: IFFALSE 14059
13920: GO 13922
13922: DISABLE
// begin DialogueOn ;
13923: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13927: LD_INT 95
13929: PPUSH
13930: LD_INT 65
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 12
13938: NEG
13939: PPUSH
13940: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13944: LD_INT 95
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: LD_INT 3
13952: PPUSH
13953: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13957: LD_INT 95
13959: PPUSH
13960: LD_INT 65
13962: PPUSH
13963: CALL_OW 84
// if westOutpostDiscovered then
13967: LD_EXP 20
13971: IFFALSE 14011
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13973: LD_EXP 39
13977: PPUSH
13978: LD_STRING D16-Kov-1
13980: PPUSH
13981: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13985: LD_EXP 34
13989: PPUSH
13990: LD_STRING D16-Bur-1
13992: PPUSH
13993: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13997: LD_EXP 35
14001: PPUSH
14002: LD_STRING D16-Gny-1
14004: PPUSH
14005: CALL_OW 88
// end else
14009: GO 14047
// begin Say ( Burlak , D15-Bur-1 ) ;
14011: LD_EXP 34
14015: PPUSH
14016: LD_STRING D15-Bur-1
14018: PPUSH
14019: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14023: LD_EXP 35
14027: PPUSH
14028: LD_STRING D15-Gny-1
14030: PPUSH
14031: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14035: LD_EXP 39
14039: PPUSH
14040: LD_STRING D15-Kov-1
14042: PPUSH
14043: CALL_OW 88
// end ; DialogueOff ;
14047: CALL_OW 7
// eastOutpostDiscovered := true ;
14051: LD_ADDR_EXP 21
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// end ;
14059: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14060: LD_INT 8
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 50
14075: PUSH
14076: EMPTY
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: PUSH
14092: LD_EXP 20
14096: AND
14097: IFFALSE 14141
14099: GO 14101
14101: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14102: LD_EXP 34
14106: PPUSH
14107: LD_STRING D20-Bur-1
14109: PPUSH
14110: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14114: LD_EXP 40
14118: PPUSH
14119: LD_STRING D20-Pla-1
14121: PPUSH
14122: CALL_OW 94
// westOutpostDestroyed := true ;
14126: LD_ADDR_EXP 22
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14134: LD_STRING M8
14136: PPUSH
14137: CALL_OW 337
// end ;
14141: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14142: LD_INT 15
14144: PPUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 50
14157: PUSH
14158: EMPTY
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 70
14169: PUSH
14170: LD_INT 0
14172: EQUAL
14173: PUSH
14174: LD_EXP 21
14178: AND
14179: IFFALSE 14309
14181: GO 14183
14183: DISABLE
14184: LD_INT 0
14186: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14187: LD_EXP 34
14191: PPUSH
14192: LD_STRING D20-Bur-1
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14199: LD_EXP 40
14203: PPUSH
14204: LD_STRING D20-Pla-1
14206: PPUSH
14207: CALL_OW 94
// eastOutpostDestroyed := true ;
14211: LD_ADDR_EXP 23
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// stop_talking := true ;
14226: LD_ADDR_OWVAR 56
14230: PUSH
14231: LD_INT 1
14233: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 23
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: FOR_IN
14280: IFFALSE 14299
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14282: LD_VAR 0 1
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_INT 1500
14292: PPUSH
14293: CALL_OW 591
14297: GO 14279
14299: POP
14300: POP
// stop_talking := false ;
14301: LD_ADDR_OWVAR 56
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// end ;
14309: PPOPN 1
14311: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14312: LD_INT 19
14314: PPUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 70
14343: IFFALSE 14451
14345: GO 14347
14347: DISABLE
// begin DialogueOn ;
14348: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14352: LD_INT 19
14354: PPUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 70
14383: PPUSH
14384: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14388: LD_EXP 34
14392: PPUSH
14393: LD_STRING D26-Bur-1
14395: PPUSH
14396: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14400: LD_EXP 39
14404: PPUSH
14405: LD_STRING D26-Kov-1
14407: PPUSH
14408: CALL_OW 88
// if IsOk ( Gnyevko ) then
14412: LD_EXP 35
14416: PPUSH
14417: CALL_OW 302
14421: IFFALSE 14447
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14423: LD_EXP 35
14427: PPUSH
14428: LD_STRING D26-Gny-1
14430: PPUSH
14431: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14435: LD_EXP 34
14439: PPUSH
14440: LD_STRING D26-Bur-2
14442: PPUSH
14443: CALL_OW 88
// end ; DialogueOff ;
14447: CALL_OW 7
// end ;
14451: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14452: LD_EXP 21
14456: PUSH
14457: LD_EXP 23
14461: NOT
14462: AND
14463: PUSH
14464: LD_INT 17
14466: PPUSH
14467: LD_INT 22
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: LD_INT 1000
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: PUSH
14503: LD_INT 1
14505: GREATER
14506: AND
14507: IFFALSE 14570
14509: GO 14511
14511: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14512: LD_EXP 35
14516: PPUSH
14517: LD_STRING D16A-Gny-1
14519: PPUSH
14520: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14524: LD_EXP 39
14528: PPUSH
14529: LD_STRING D16A-Kov-1
14531: PPUSH
14532: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14536: LD_EXP 35
14540: PPUSH
14541: CALL_OW 302
14545: PUSH
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 302
14555: OR
14556: IFFALSE 14570
// Say ( Burlak , D16A-Bur-1 ) ;
14558: LD_EXP 34
14562: PPUSH
14563: LD_STRING D16A-Bur-1
14565: PPUSH
14566: CALL_OW 88
// end ;
14570: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14571: LD_INT 3
14573: PPUSH
14574: LD_INT 9
14576: PPUSH
14577: CALL_OW 294
14581: IFFALSE 14594
14583: GO 14585
14585: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14586: LD_ADDR_EXP 24
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 10
14600: PPUSH
14601: CALL_OW 294
14605: IFFALSE 14625
14607: GO 14609
14609: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14610: LD_ADDR_EXP 27
14614: PUSH
14615: LD_EXP 27
14619: PPUSH
14620: CALL 56062 0 1
14624: ST_TO_ADDR
14625: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 11
14631: PPUSH
14632: CALL_OW 294
14636: IFFALSE 14656
14638: GO 14640
14640: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14641: LD_ADDR_EXP 27
14645: PUSH
14646: LD_EXP 27
14650: PPUSH
14651: CALL 56062 0 1
14655: ST_TO_ADDR
14656: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14657: LD_INT 3
14659: PPUSH
14660: LD_INT 12
14662: PPUSH
14663: CALL_OW 294
14667: IFFALSE 14687
14669: GO 14671
14671: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14672: LD_ADDR_EXP 27
14676: PUSH
14677: LD_EXP 27
14681: PPUSH
14682: CALL 56062 0 1
14686: ST_TO_ADDR
14687: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14688: LD_INT 3
14690: PPUSH
14691: LD_INT 13
14693: PPUSH
14694: CALL_OW 294
14698: IFFALSE 14718
14700: GO 14702
14702: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14703: LD_ADDR_EXP 27
14707: PUSH
14708: LD_EXP 27
14712: PPUSH
14713: CALL 56062 0 1
14717: ST_TO_ADDR
14718: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14719: LD_INT 3
14721: PPUSH
14722: LD_INT 14
14724: PPUSH
14725: CALL_OW 294
14729: IFFALSE 14749
14731: GO 14733
14733: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14734: LD_ADDR_EXP 27
14738: PUSH
14739: LD_EXP 27
14743: PPUSH
14744: CALL 56062 0 1
14748: ST_TO_ADDR
14749: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14750: LD_EXP 27
14754: PUSH
14755: LD_INT 5
14757: GREATEREQUAL
14758: PUSH
14759: LD_EXP 14
14763: AND
14764: IFFALSE 14784
14766: GO 14768
14768: DISABLE
// begin allMapPointsSpotted := true ;
14769: LD_ADDR_EXP 26
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14777: LD_STRING M10
14779: PPUSH
14780: CALL_OW 337
// end ;
14784: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14785: LD_EXP 26
14789: PUSH
14790: LD_EXP 22
14794: AND
14795: IFFALSE 14807
14797: GO 14799
14799: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14800: LD_STRING M10a
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14808: LD_EXP 14
14812: IFFALSE 15445
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
// begin wasOutsideBeria := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// wantToTalk := false ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// westOutpostReported := false ;
14840: LD_ADDR_VAR 0 4
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// eastOutpostReported := false ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// timer := 0 0$0 ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14864: LD_INT 70
14866: PPUSH
14867: CALL_OW 67
// timer := timer + 0 0$2 ;
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 70
14883: PLUS
14884: ST_TO_ADDR
// if timer >= 0 0$30 then
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1050
14892: GREATEREQUAL
14893: IFFALSE 14903
// wantToTalk := true ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 9
14920: GREATER
14921: IFFALSE 14931
// wasOutsideBeria := true ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14931: LD_VAR 0 2
14935: PUSH
14936: LD_VAR 0 3
14940: AND
14941: PUSH
14942: LD_EXP 34
14946: PPUSH
14947: LD_EXP 40
14951: PPUSH
14952: CALL_OW 296
14956: PUSH
14957: LD_INT 8
14959: LESS
14960: PUSH
14961: LD_EXP 34
14965: PPUSH
14966: CALL_OW 310
14970: PPUSH
14971: LD_EXP 40
14975: PPUSH
14976: CALL_OW 296
14980: PUSH
14981: LD_INT 8
14983: LESS
14984: OR
14985: AND
14986: IFFALSE 15334
// begin timer := 0 0$0 ;
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// wantToTalk := false ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// wasOutsideBeria := false ;
15004: LD_ADDR_VAR 0 3
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15012: LD_EXP 40
15016: PPUSH
15017: CALL_OW 87
// DialogueOn ;
15021: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15025: LD_EXP 40
15029: PPUSH
15030: LD_STRING D25-Pla-1
15032: PPUSH
15033: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15037: LD_VAR 0 4
15041: NOT
15042: PUSH
15043: LD_VAR 0 5
15047: NOT
15048: AND
15049: PUSH
15050: LD_EXP 20
15054: AND
15055: PUSH
15056: LD_EXP 21
15060: AND
15061: IFFALSE 15141
// begin westOutpostReported := true ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// eastOutpostReported := true ;
15071: LD_ADDR_VAR 0 5
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15079: LD_EXP 34
15083: PPUSH
15084: LD_STRING D25-Bur-1
15086: PPUSH
15087: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15091: LD_EXP 24
15095: PUSH
15096: LD_EXP 22
15100: NOT
15101: AND
15102: IFFALSE 15139
// begin Say ( Burlak , D25b-Bur-1 ) ;
15104: LD_EXP 34
15108: PPUSH
15109: LD_STRING D25b-Bur-1
15111: PPUSH
15112: CALL_OW 88
// if not reinforcementsGained then
15116: LD_EXP 25
15120: NOT
15121: IFFALSE 15139
// begin Say ( Platonov , D25b-Pla-1 ) ;
15123: LD_EXP 40
15127: PPUSH
15128: LD_STRING D25b-Pla-1
15130: PPUSH
15131: CALL_OW 88
// SendReinforcements ( ) ;
15135: CALL 3302 0 0
// end ; end ; end else
15139: GO 15330
// if not westOutpostReported and westOutpostDiscovered then
15141: LD_VAR 0 4
15145: NOT
15146: PUSH
15147: LD_EXP 20
15151: AND
15152: IFFALSE 15224
// begin westOutpostReported := true ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15162: LD_EXP 34
15166: PPUSH
15167: LD_STRING D25a-Bur-1b
15169: PPUSH
15170: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15174: LD_EXP 24
15178: PUSH
15179: LD_EXP 22
15183: NOT
15184: AND
15185: IFFALSE 15222
// begin Say ( Burlak , D25b-Bur-1 ) ;
15187: LD_EXP 34
15191: PPUSH
15192: LD_STRING D25b-Bur-1
15194: PPUSH
15195: CALL_OW 88
// if not reinforcementsGained then
15199: LD_EXP 25
15203: NOT
15204: IFFALSE 15222
// begin Say ( Platonov , D25b-Pla-1 ) ;
15206: LD_EXP 40
15210: PPUSH
15211: LD_STRING D25b-Pla-1
15213: PPUSH
15214: CALL_OW 88
// SendReinforcements ( ) ;
15218: CALL 3302 0 0
// end ; end ; end else
15222: GO 15330
// if not eastOutpostReported and eastOutpostDiscovered then
15224: LD_VAR 0 5
15228: NOT
15229: PUSH
15230: LD_EXP 21
15234: AND
15235: IFFALSE 15259
// begin eastOutpostReported := true ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15245: LD_EXP 34
15249: PPUSH
15250: LD_STRING D25a-Bur-1a
15252: PPUSH
15253: CALL_OW 88
// end else
15257: GO 15330
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15259: LD_EXP 20
15263: NOT
15264: PUSH
15265: LD_EXP 21
15269: NOT
15270: OR
15271: IFFALSE 15299
// begin Say ( Burlak , D25a-Bur-1 ) ;
15273: LD_EXP 34
15277: PPUSH
15278: LD_STRING D25a-Bur-1
15280: PPUSH
15281: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15285: LD_EXP 40
15289: PPUSH
15290: LD_STRING D25c-Pla-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15330
// if not allMapPointsSpotted then
15299: LD_EXP 26
15303: NOT
15304: IFFALSE 15330
// begin Say ( Burlak , D25a-Bur-1 ) ;
15306: LD_EXP 34
15310: PPUSH
15311: LD_STRING D25a-Bur-1
15313: PPUSH
15314: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15318: LD_EXP 40
15322: PPUSH
15323: LD_STRING D25c-Pla-1a
15325: PPUSH
15326: CALL_OW 88
// end ; DialogueOff ;
15330: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15334: LD_EXP 26
15338: PUSH
15339: LD_EXP 22
15343: AND
15344: IFFALSE 14864
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15346: LD_INT 22
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 91
15368: PUSH
15369: LD_EXP 40
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: IFFALSE 15434
// begin if not belkovDied and not belkovSaved then
15393: LD_EXP 19
15397: NOT
15398: PUSH
15399: LD_EXP 28
15403: NOT
15404: AND
15405: IFFALSE 15428
// begin if Query ( QContMission ) = 1 then
15407: LD_STRING QContMission
15409: PPUSH
15410: CALL_OW 97
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: IFFALSE 15426
// begin EndMission ;
15420: CALL 15448 0 0
// exit ;
15424: GO 15445
// end ; end else
15426: GO 15434
// begin EndMission ;
15428: CALL 15448 0 0
// exit ;
15432: GO 15445
// end ; end ; wait ( 0 0$10 ) ;
15434: LD_INT 350
15436: PPUSH
15437: CALL_OW 67
// until false ;
15441: LD_INT 0
15443: IFFALSE 15346
// end ;
15445: PPOPN 5
15447: END
// function EndMission ; var i , tmp ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
// if initiative then
15453: LD_EXP 31
15457: IFFALSE 15471
// AddMedal ( Initiative , 1 ) else
15459: LD_STRING Initiative
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 101
15469: GO 15502
// if not eastOutpostDestroyed then
15471: LD_EXP 23
15475: NOT
15476: IFFALSE 15491
// AddMedal ( Initiative , - 2 ) else
15478: LD_STRING Initiative
15480: PPUSH
15481: LD_INT 2
15483: NEG
15484: PPUSH
15485: CALL_OW 101
15489: GO 15502
// AddMedal ( Initiative , - 1 ) ;
15491: LD_STRING Initiative
15493: PPUSH
15494: LD_INT 1
15496: NEG
15497: PPUSH
15498: CALL_OW 101
// if not belkovDied and belkovSaved then
15502: LD_EXP 19
15506: NOT
15507: PUSH
15508: LD_EXP 28
15512: AND
15513: IFFALSE 15527
// AddMedal ( Belkov , 1 ) else
15515: LD_STRING Belkov
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 101
15525: GO 15622
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15527: LD_EXP 45
15531: PPUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: IFFALSE 15560
// AddMedal ( Belkov , 2 ) else
15548: LD_STRING Belkov
15550: PPUSH
15551: LD_INT 2
15553: PPUSH
15554: CALL_OW 101
15558: GO 15622
// if belkovDied then
15560: LD_EXP 19
15564: IFFALSE 15579
// AddMedal ( Belkov , - 1 ) else
15566: LD_STRING Belkov
15568: PPUSH
15569: LD_INT 1
15571: NEG
15572: PPUSH
15573: CALL_OW 101
15577: GO 15622
// if not belkovSaved then
15579: LD_EXP 28
15583: NOT
15584: IFFALSE 15599
// AddMedal ( Belkov , - 2 ) else
15586: LD_STRING Belkov
15588: PPUSH
15589: LD_INT 2
15591: NEG
15592: PPUSH
15593: CALL_OW 101
15597: GO 15622
// if belkovDied and belkovSaved then
15599: LD_EXP 19
15603: PUSH
15604: LD_EXP 28
15608: AND
15609: IFFALSE 15622
// AddMedal ( Belkov , - 3 ) ;
15611: LD_STRING Belkov
15613: PPUSH
15614: LD_INT 3
15616: NEG
15617: PPUSH
15618: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15622: LD_EXP 30
15626: PUSH
15627: LD_INT 0
15629: EQUAL
15630: IFFALSE 15644
// AddMedal ( NoLosses , 1 ) else
15632: LD_STRING NoLosses
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 101
15642: GO 15655
// AddMedal ( NoLosses , - 1 ) ;
15644: LD_STRING NoLosses
15646: PPUSH
15647: LD_INT 1
15649: NEG
15650: PPUSH
15651: CALL_OW 101
// GiveMedals ( Main ) ;
15655: LD_STRING Main
15657: PPUSH
15658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15662: LD_INT 22
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 21
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15706: LD_EXP 34
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING Burlak
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if IsLive ( Gnyevko ) then
15724: LD_EXP 35
15728: PPUSH
15729: CALL_OW 300
15733: IFFALSE 15753
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15735: LD_EXP 35
15739: PPUSH
15740: LD_EXP 3
15744: PUSH
15745: LD_STRING Gnyevko
15747: STR
15748: PPUSH
15749: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15753: LD_EXP 39
15757: PPUSH
15758: CALL_OW 300
15762: IFFALSE 15782
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15764: LD_EXP 39
15768: PPUSH
15769: LD_EXP 3
15773: PUSH
15774: LD_STRING Kovalyuk
15776: STR
15777: PPUSH
15778: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15782: LD_EXP 36
15786: PPUSH
15787: CALL_OW 300
15791: PUSH
15792: LD_EXP 28
15796: AND
15797: IFFALSE 15817
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15799: LD_EXP 36
15803: PPUSH
15804: LD_EXP 3
15808: PUSH
15809: LD_STRING Belkov
15811: STR
15812: PPUSH
15813: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15817: LD_EXP 37
15821: PPUSH
15822: CALL_OW 300
15826: IFFALSE 15846
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15828: LD_EXP 37
15832: PPUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_STRING Kirilenkova
15840: STR
15841: PPUSH
15842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 23
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_EXP 34
15890: PUSH
15891: LD_EXP 35
15895: PUSH
15896: LD_EXP 39
15900: PUSH
15901: LD_EXP 36
15905: PUSH
15906: LD_EXP 37
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: DIFF
15918: PPUSH
15919: LD_EXP 3
15923: PUSH
15924: LD_STRING burlakTeam
15926: STR
15927: PPUSH
15928: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15932: LD_INT 22
15934: PUSH
15935: LD_INT 6
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 23
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 21
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: PUSH
15972: LD_EXP 40
15976: PUSH
15977: LD_EXP 38
15981: PUSH
15982: LD_EXP 36
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_EXP 45
15996: UNION
15997: DIFF
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING kirovTeam
16006: STR
16007: PPUSH
16008: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16012: LD_EXP 23
16016: PPUSH
16017: LD_STRING 02_EasternOutpostDestroyed
16019: PPUSH
16020: CALL_OW 39
// tmp := [ ] ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: EMPTY
16030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 21
16048: PUSH
16049: LD_INT 3
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16142
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 267
16097: PUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 250
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 251
16117: PUSH
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 254
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL 54701 0 2
16139: ST_TO_ADDR
16140: GO 16065
16142: POP
16143: POP
// SaveVariable ( tmp , 02_Beria ) ;
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_STRING 02_Beria
16151: PPUSH
16152: CALL_OW 39
// tmp := [ ] ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 6
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16274
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 267
16229: PUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 250
16239: PUSH
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 251
16249: PUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 254
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL 54701 0 2
16271: ST_TO_ADDR
16272: GO 16197
16274: POP
16275: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_STRING 02_Kirov
16283: PPUSH
16284: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16288: LD_INT 22
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PPUSH
16317: CALL 19101 0 1
16321: PPUSH
16322: LD_STRING 02_VehiclesCount
16324: PPUSH
16325: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16329: LD_INT 22
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PPUSH
16358: CALL 19101 0 1
16362: PPUSH
16363: LD_STRING 02_KirovVehiclesCount
16365: PPUSH
16366: CALL_OW 39
// YouWin ;
16370: CALL_OW 103
// end ; end_of_file
16374: LD_VAR 0 1
16378: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16379: LD_INT 420
16381: PPUSH
16382: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL 8000 0 2
// end ;
16400: PPOPN 5
16402: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL 75255 0 1
// if un = Burlak then
16412: LD_VAR 0 1
16416: PUSH
16417: LD_EXP 34
16421: EQUAL
16422: IFFALSE 16431
// YouLost ( Burlak ) ;
16424: LD_STRING Burlak
16426: PPUSH
16427: CALL_OW 104
// if un = Platonov then
16431: LD_VAR 0 1
16435: PUSH
16436: LD_EXP 40
16440: EQUAL
16441: IFFALSE 16450
// YouLost ( Platonov ) ;
16443: LD_STRING Platonov
16445: PPUSH
16446: CALL_OW 104
// if un = Kurin then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 38
16459: EQUAL
16460: IFFALSE 16469
// YouLost ( Kurin ) ;
16462: LD_STRING Kurin
16464: PPUSH
16465: CALL_OW 104
// if un = Belkov then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_EXP 36
16478: EQUAL
16479: IFFALSE 16489
// belkovDied := true ;
16481: LD_ADDR_EXP 19
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if un in belkovTeam then
16489: LD_VAR 0 1
16493: PUSH
16494: LD_EXP 45
16498: IN
16499: IFFALSE 16532
// begin belkovTeam := belkovTeam diff un ;
16501: LD_ADDR_EXP 45
16505: PUSH
16506: LD_EXP 45
16510: PUSH
16511: LD_VAR 0 1
16515: DIFF
16516: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16517: LD_ADDR_EXP 29
16521: PUSH
16522: LD_EXP 29
16526: PPUSH
16527: CALL 56062 0 1
16531: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: IN
16577: IFFALSE 16594
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16579: LD_ADDR_EXP 30
16583: PUSH
16584: LD_EXP 30
16588: PPUSH
16589: CALL 56062 0 1
16593: ST_TO_ADDR
// if un in usWestForces then
16594: LD_VAR 0 1
16598: PUSH
16599: LD_EXP 46
16603: IN
16604: IFFALSE 16622
// usWestForces := usWestForces diff un ;
16606: LD_ADDR_EXP 46
16610: PUSH
16611: LD_EXP 46
16615: PUSH
16616: LD_VAR 0 1
16620: DIFF
16621: ST_TO_ADDR
// if un in usEastForces then
16622: LD_VAR 0 1
16626: PUSH
16627: LD_EXP 47
16631: IN
16632: IFFALSE 16650
// usEastForces := usEastForces diff un ;
16634: LD_ADDR_EXP 47
16638: PUSH
16639: LD_EXP 47
16643: PUSH
16644: LD_VAR 0 1
16648: DIFF
16649: ST_TO_ADDR
// if un = Dickens then
16650: LD_VAR 0 1
16654: PUSH
16655: LD_EXP 49
16659: EQUAL
16660: IFFALSE 16678
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
16662: LD_INT 1
16664: PPUSH
16665: LD_EXP 3
16669: PUSH
16670: LD_STRING DickensKilled
16672: STR
16673: PPUSH
16674: CALL_OW 39
// end ;
16678: PPOPN 1
16680: END
// on BuildingComplete ( b ) do var mech ;
16681: LD_INT 0
16683: PPUSH
// begin if GetSide ( b ) = 3 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 3
16696: EQUAL
16697: IFFALSE 16756
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 6
16711: PUSH
16712: LD_INT 7
16714: PUSH
16715: LD_INT 8
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: IN
16723: IFFALSE 16733
// hasLab := true ;
16725: LD_ADDR_EXP 9
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: IFFALSE 16756
// hasWorkshop := true ;
16748: LD_ADDR_EXP 10
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 255
16765: PUSH
16766: LD_INT 6
16768: EQUAL
16769: IFFALSE 16843
// begin if GetBType ( b ) = b_workshop then
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 266
16780: PUSH
16781: LD_INT 2
16783: EQUAL
16784: IFFALSE 16843
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_EXP 43
16795: PPUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 72
16810: ST_TO_ADDR
// if not mech then
16811: LD_VAR 0 2
16815: NOT
16816: IFFALSE 16820
// exit ;
16818: GO 16843
// ComExit ( mech ) ;
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL 55099 0 1
// AddComEnterUnit ( mech , b ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 180
// end ; end ; end ;
16843: PPOPN 2
16845: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL 75375 0 2
// if GetSide ( vehicle ) = 3 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 3
16872: EQUAL
16873: IFFALSE 16898
// begin hasTank := true ;
16875: LD_ADDR_EXP 12
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16883: LD_ADDR_EXP 15
16887: PUSH
16888: LD_EXP 15
16892: PPUSH
16893: CALL 56062 0 1
16897: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 255
16907: PUSH
16908: LD_INT 6
16910: EQUAL
16911: IFFALSE 16922
// KirovAttack ( vehicle ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL 3608 0 1
// end ;
16922: PPOPN 2
16924: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16925: LD_VAR 0 1
16929: PUSH
16930: LD_EXP 33
16934: EQUAL
16935: IFFALSE 16941
// BelkovAttackScript ;
16937: CALL 1673 0 0
// end ;
16941: PPOPN 1
16943: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16944: LD_INT 0
16946: PPUSH
// begin if side = 1 then
16947: LD_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: IFFALSE 16965
// vehCaptured := true ;
16957: LD_ADDR_EXP 16
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// end ;
16965: PPOPN 5
16967: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 3
16975: EQUAL
16976: PUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 6
16984: EQUAL
16985: AND
16986: IFFALSE 16996
// allianceAttacked := true ;
16988: LD_ADDR_EXP 13
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// end ; end_of_file
16996: PPOPN 2
16998: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
// if exist_mode then
17003: LD_VAR 0 2
17007: IFFALSE 17032
// unit := CreateCharacter ( prefix & ident ) else
17009: LD_ADDR_VAR 0 5
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 1
17023: STR
17024: PPUSH
17025: CALL_OW 34
17029: ST_TO_ADDR
17030: GO 17047
// unit := NewCharacter ( ident ) ;
17032: LD_ADDR_VAR 0 5
17036: PUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 25
17046: ST_TO_ADDR
// result := unit ;
17047: LD_ADDR_VAR 0 4
17051: PUSH
17052: LD_VAR 0 5
17056: ST_TO_ADDR
// end ;
17057: LD_VAR 0 4
17061: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
// if not side or not nation then
17066: LD_VAR 0 1
17070: NOT
17071: PUSH
17072: LD_VAR 0 2
17076: NOT
17077: OR
17078: IFFALSE 17082
// exit ;
17080: GO 17850
// case nation of nation_american :
17082: LD_VAR 0 2
17086: PUSH
17087: LD_INT 1
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17309
17095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17096: LD_ADDR_VAR 0 4
17100: PUSH
17101: LD_INT 35
17103: PUSH
17104: LD_INT 45
17106: PUSH
17107: LD_INT 46
17109: PUSH
17110: LD_INT 47
17112: PUSH
17113: LD_INT 82
17115: PUSH
17116: LD_INT 83
17118: PUSH
17119: LD_INT 84
17121: PUSH
17122: LD_INT 85
17124: PUSH
17125: LD_INT 86
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: LD_INT 6
17136: PUSH
17137: LD_INT 15
17139: PUSH
17140: LD_INT 16
17142: PUSH
17143: LD_INT 7
17145: PUSH
17146: LD_INT 12
17148: PUSH
17149: LD_INT 13
17151: PUSH
17152: LD_INT 10
17154: PUSH
17155: LD_INT 14
17157: PUSH
17158: LD_INT 20
17160: PUSH
17161: LD_INT 21
17163: PUSH
17164: LD_INT 22
17166: PUSH
17167: LD_INT 25
17169: PUSH
17170: LD_INT 32
17172: PUSH
17173: LD_INT 27
17175: PUSH
17176: LD_INT 36
17178: PUSH
17179: LD_INT 69
17181: PUSH
17182: LD_INT 39
17184: PUSH
17185: LD_INT 34
17187: PUSH
17188: LD_INT 40
17190: PUSH
17191: LD_INT 48
17193: PUSH
17194: LD_INT 49
17196: PUSH
17197: LD_INT 50
17199: PUSH
17200: LD_INT 51
17202: PUSH
17203: LD_INT 52
17205: PUSH
17206: LD_INT 53
17208: PUSH
17209: LD_INT 54
17211: PUSH
17212: LD_INT 55
17214: PUSH
17215: LD_INT 56
17217: PUSH
17218: LD_INT 57
17220: PUSH
17221: LD_INT 58
17223: PUSH
17224: LD_INT 59
17226: PUSH
17227: LD_INT 60
17229: PUSH
17230: LD_INT 61
17232: PUSH
17233: LD_INT 62
17235: PUSH
17236: LD_INT 80
17238: PUSH
17239: LD_INT 82
17241: PUSH
17242: LD_INT 83
17244: PUSH
17245: LD_INT 84
17247: PUSH
17248: LD_INT 85
17250: PUSH
17251: LD_INT 86
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 17774
17309: LD_INT 2
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17543
17317: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17318: LD_ADDR_VAR 0 4
17322: PUSH
17323: LD_INT 35
17325: PUSH
17326: LD_INT 45
17328: PUSH
17329: LD_INT 46
17331: PUSH
17332: LD_INT 47
17334: PUSH
17335: LD_INT 82
17337: PUSH
17338: LD_INT 83
17340: PUSH
17341: LD_INT 84
17343: PUSH
17344: LD_INT 85
17346: PUSH
17347: LD_INT 87
17349: PUSH
17350: LD_INT 70
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: LD_INT 11
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: LD_INT 4
17364: PUSH
17365: LD_INT 5
17367: PUSH
17368: LD_INT 6
17370: PUSH
17371: LD_INT 15
17373: PUSH
17374: LD_INT 18
17376: PUSH
17377: LD_INT 7
17379: PUSH
17380: LD_INT 17
17382: PUSH
17383: LD_INT 8
17385: PUSH
17386: LD_INT 20
17388: PUSH
17389: LD_INT 21
17391: PUSH
17392: LD_INT 22
17394: PUSH
17395: LD_INT 72
17397: PUSH
17398: LD_INT 26
17400: PUSH
17401: LD_INT 69
17403: PUSH
17404: LD_INT 39
17406: PUSH
17407: LD_INT 40
17409: PUSH
17410: LD_INT 41
17412: PUSH
17413: LD_INT 42
17415: PUSH
17416: LD_INT 43
17418: PUSH
17419: LD_INT 48
17421: PUSH
17422: LD_INT 49
17424: PUSH
17425: LD_INT 50
17427: PUSH
17428: LD_INT 51
17430: PUSH
17431: LD_INT 52
17433: PUSH
17434: LD_INT 53
17436: PUSH
17437: LD_INT 54
17439: PUSH
17440: LD_INT 55
17442: PUSH
17443: LD_INT 56
17445: PUSH
17446: LD_INT 60
17448: PUSH
17449: LD_INT 61
17451: PUSH
17452: LD_INT 62
17454: PUSH
17455: LD_INT 66
17457: PUSH
17458: LD_INT 67
17460: PUSH
17461: LD_INT 68
17463: PUSH
17464: LD_INT 81
17466: PUSH
17467: LD_INT 82
17469: PUSH
17470: LD_INT 83
17472: PUSH
17473: LD_INT 84
17475: PUSH
17476: LD_INT 85
17478: PUSH
17479: LD_INT 87
17481: PUSH
17482: LD_INT 88
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: ST_TO_ADDR
17541: GO 17774
17543: LD_INT 3
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17773
17551: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17552: LD_ADDR_VAR 0 4
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: LD_INT 47
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 82
17571: PUSH
17572: LD_INT 83
17574: PUSH
17575: LD_INT 84
17577: PUSH
17578: LD_INT 85
17580: PUSH
17581: LD_INT 86
17583: PUSH
17584: LD_INT 11
17586: PUSH
17587: LD_INT 9
17589: PUSH
17590: LD_INT 20
17592: PUSH
17593: LD_INT 19
17595: PUSH
17596: LD_INT 21
17598: PUSH
17599: LD_INT 24
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_INT 25
17607: PUSH
17608: LD_INT 28
17610: PUSH
17611: LD_INT 29
17613: PUSH
17614: LD_INT 30
17616: PUSH
17617: LD_INT 31
17619: PUSH
17620: LD_INT 37
17622: PUSH
17623: LD_INT 38
17625: PUSH
17626: LD_INT 32
17628: PUSH
17629: LD_INT 27
17631: PUSH
17632: LD_INT 33
17634: PUSH
17635: LD_INT 69
17637: PUSH
17638: LD_INT 39
17640: PUSH
17641: LD_INT 34
17643: PUSH
17644: LD_INT 40
17646: PUSH
17647: LD_INT 71
17649: PUSH
17650: LD_INT 23
17652: PUSH
17653: LD_INT 44
17655: PUSH
17656: LD_INT 48
17658: PUSH
17659: LD_INT 49
17661: PUSH
17662: LD_INT 50
17664: PUSH
17665: LD_INT 51
17667: PUSH
17668: LD_INT 52
17670: PUSH
17671: LD_INT 53
17673: PUSH
17674: LD_INT 54
17676: PUSH
17677: LD_INT 55
17679: PUSH
17680: LD_INT 56
17682: PUSH
17683: LD_INT 57
17685: PUSH
17686: LD_INT 58
17688: PUSH
17689: LD_INT 59
17691: PUSH
17692: LD_INT 63
17694: PUSH
17695: LD_INT 64
17697: PUSH
17698: LD_INT 65
17700: PUSH
17701: LD_INT 82
17703: PUSH
17704: LD_INT 83
17706: PUSH
17707: LD_INT 84
17709: PUSH
17710: LD_INT 85
17712: PUSH
17713: LD_INT 86
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
17771: GO 17774
17773: POP
// if state > - 1 and state < 3 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: GREATER
17783: PUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 3
17791: LESS
17792: AND
17793: IFFALSE 17850
// for i in result do
17795: LD_ADDR_VAR 0 5
17799: PUSH
17800: LD_VAR 0 4
17804: PUSH
17805: FOR_IN
17806: IFFALSE 17848
// if GetTech ( i , side ) <> state then
17808: LD_VAR 0 5
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 321
17822: PUSH
17823: LD_VAR 0 3
17827: NONEQUAL
17828: IFFALSE 17846
// result := result diff i ;
17830: LD_ADDR_VAR 0 4
17834: PUSH
17835: LD_VAR 0 4
17839: PUSH
17840: LD_VAR 0 5
17844: DIFF
17845: ST_TO_ADDR
17846: GO 17805
17848: POP
17849: POP
// end ;
17850: LD_VAR 0 4
17854: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
17859: PPUSH
// result := true ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: LD_INT 1
17867: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17868: LD_ADDR_VAR 0 5
17872: PUSH
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 480
17882: ST_TO_ADDR
// if not tmp then
17883: LD_VAR 0 5
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 17941
// for i in tmp do
17892: LD_ADDR_VAR 0 4
17896: PUSH
17897: LD_VAR 0 5
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17939
// if GetTech ( i , side ) <> state_researched then
17905: LD_VAR 0 4
17909: PPUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 321
17919: PUSH
17920: LD_INT 2
17922: NONEQUAL
17923: IFFALSE 17937
// begin result := false ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
// exit ;
17933: POP
17934: POP
17935: GO 17941
// end ;
17937: GO 17902
17939: POP
17940: POP
// end ;
17941: LD_VAR 0 3
17945: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17946: LD_INT 0
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
17955: PPUSH
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17961: LD_VAR 0 1
17965: NOT
17966: PUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 257
17976: PUSH
17977: LD_INT 9
17979: NONEQUAL
17980: OR
17981: IFFALSE 17985
// exit ;
17983: GO 18558
// side := GetSide ( unit ) ;
17985: LD_ADDR_VAR 0 9
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 255
17999: ST_TO_ADDR
// tech_space := tech_spacanom ;
18000: LD_ADDR_VAR 0 12
18004: PUSH
18005: LD_INT 29
18007: ST_TO_ADDR
// tech_time := tech_taurad ;
18008: LD_ADDR_VAR 0 13
18012: PUSH
18013: LD_INT 28
18015: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18016: LD_ADDR_VAR 0 11
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 310
18030: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18031: LD_VAR 0 11
18035: PPUSH
18036: CALL_OW 247
18040: PUSH
18041: LD_INT 2
18043: EQUAL
18044: IFFALSE 18048
// exit ;
18046: GO 18558
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18048: LD_ADDR_VAR 0 8
18052: PUSH
18053: LD_INT 81
18055: PUSH
18056: LD_VAR 0 9
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: ST_TO_ADDR
// if not tmp then
18091: LD_VAR 0 8
18095: NOT
18096: IFFALSE 18100
// exit ;
18098: GO 18558
// if in_unit then
18100: LD_VAR 0 11
18104: IFFALSE 18128
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18106: LD_ADDR_VAR 0 10
18110: PUSH
18111: LD_VAR 0 8
18115: PPUSH
18116: LD_VAR 0 11
18120: PPUSH
18121: CALL_OW 74
18125: ST_TO_ADDR
18126: GO 18148
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18128: LD_ADDR_VAR 0 10
18132: PUSH
18133: LD_VAR 0 8
18137: PPUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 74
18147: ST_TO_ADDR
// if not enemy then
18148: LD_VAR 0 10
18152: NOT
18153: IFFALSE 18157
// exit ;
18155: GO 18558
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18157: LD_VAR 0 11
18161: PUSH
18162: LD_VAR 0 11
18166: PPUSH
18167: LD_VAR 0 10
18171: PPUSH
18172: CALL_OW 296
18176: PUSH
18177: LD_INT 13
18179: GREATER
18180: AND
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_VAR 0 10
18191: PPUSH
18192: CALL_OW 296
18196: PUSH
18197: LD_INT 12
18199: GREATER
18200: OR
18201: IFFALSE 18205
// exit ;
18203: GO 18558
// missile := [ 1 ] ;
18205: LD_ADDR_VAR 0 14
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18216: LD_VAR 0 9
18220: PPUSH
18221: LD_VAR 0 12
18225: PPUSH
18226: CALL_OW 325
18230: IFFALSE 18259
// missile := Replace ( missile , missile + 1 , 2 ) ;
18232: LD_ADDR_VAR 0 14
18236: PUSH
18237: LD_VAR 0 14
18241: PPUSH
18242: LD_VAR 0 14
18246: PUSH
18247: LD_INT 1
18249: PLUS
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18259: LD_VAR 0 9
18263: PPUSH
18264: LD_VAR 0 13
18268: PPUSH
18269: CALL_OW 325
18273: PUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 255
18283: PPUSH
18284: LD_VAR 0 13
18288: PPUSH
18289: CALL_OW 325
18293: NOT
18294: AND
18295: IFFALSE 18324
// missile := Replace ( missile , missile + 1 , 3 ) ;
18297: LD_ADDR_VAR 0 14
18301: PUSH
18302: LD_VAR 0 14
18306: PPUSH
18307: LD_VAR 0 14
18311: PUSH
18312: LD_INT 1
18314: PLUS
18315: PPUSH
18316: LD_INT 3
18318: PPUSH
18319: CALL_OW 1
18323: ST_TO_ADDR
// if missile < 2 then
18324: LD_VAR 0 14
18328: PUSH
18329: LD_INT 2
18331: LESS
18332: IFFALSE 18336
// exit ;
18334: GO 18558
// x := GetX ( enemy ) ;
18336: LD_ADDR_VAR 0 4
18340: PUSH
18341: LD_VAR 0 10
18345: PPUSH
18346: CALL_OW 250
18350: ST_TO_ADDR
// y := GetY ( enemy ) ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_VAR 0 10
18360: PPUSH
18361: CALL_OW 251
18365: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18366: LD_ADDR_VAR 0 6
18370: PUSH
18371: LD_VAR 0 4
18375: PUSH
18376: LD_INT 1
18378: NEG
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 12
18387: PLUS
18388: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18389: LD_ADDR_VAR 0 7
18393: PUSH
18394: LD_VAR 0 5
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 12
18410: PLUS
18411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18412: LD_VAR 0 6
18416: PPUSH
18417: LD_VAR 0 7
18421: PPUSH
18422: CALL_OW 488
18426: NOT
18427: IFFALSE 18449
// begin _x := x ;
18429: LD_ADDR_VAR 0 6
18433: PUSH
18434: LD_VAR 0 4
18438: ST_TO_ADDR
// _y := y ;
18439: LD_ADDR_VAR 0 7
18443: PUSH
18444: LD_VAR 0 5
18448: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18449: LD_ADDR_VAR 0 3
18453: PUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_VAR 0 14
18461: PPUSH
18462: CALL_OW 12
18466: ST_TO_ADDR
// case i of 1 :
18467: LD_VAR 0 3
18471: PUSH
18472: LD_INT 1
18474: DOUBLE
18475: EQUAL
18476: IFTRUE 18480
18478: GO 18497
18480: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_VAR 0 10
18490: PPUSH
18491: CALL_OW 115
18495: GO 18558
18497: LD_INT 2
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18527
18505: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18506: LD_VAR 0 1
18510: PPUSH
18511: LD_VAR 0 6
18515: PPUSH
18516: LD_VAR 0 7
18520: PPUSH
18521: CALL_OW 153
18525: GO 18558
18527: LD_INT 3
18529: DOUBLE
18530: EQUAL
18531: IFTRUE 18535
18533: GO 18557
18535: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18536: LD_VAR 0 1
18540: PPUSH
18541: LD_VAR 0 6
18545: PPUSH
18546: LD_VAR 0 7
18550: PPUSH
18551: CALL_OW 154
18555: GO 18558
18557: POP
// end ;
18558: LD_VAR 0 2
18562: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
// if not unit or not building then
18571: LD_VAR 0 1
18575: NOT
18576: PUSH
18577: LD_VAR 0 2
18581: NOT
18582: OR
18583: IFFALSE 18587
// exit ;
18585: GO 18745
// x := GetX ( building ) ;
18587: LD_ADDR_VAR 0 5
18591: PUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: CALL_OW 250
18601: ST_TO_ADDR
// y := GetY ( building ) ;
18602: LD_ADDR_VAR 0 6
18606: PUSH
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 251
18616: ST_TO_ADDR
// for i = 0 to 5 do
18617: LD_ADDR_VAR 0 4
18621: PUSH
18622: DOUBLE
18623: LD_INT 0
18625: DEC
18626: ST_TO_ADDR
18627: LD_INT 5
18629: PUSH
18630: FOR_TO
18631: IFFALSE 18743
// begin _x := ShiftX ( x , i , 3 ) ;
18633: LD_ADDR_VAR 0 7
18637: PUSH
18638: LD_VAR 0 5
18642: PPUSH
18643: LD_VAR 0 4
18647: PPUSH
18648: LD_INT 3
18650: PPUSH
18651: CALL_OW 272
18655: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18656: LD_ADDR_VAR 0 8
18660: PUSH
18661: LD_VAR 0 6
18665: PPUSH
18666: LD_VAR 0 4
18670: PPUSH
18671: LD_INT 3
18673: PPUSH
18674: CALL_OW 273
18678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18679: LD_VAR 0 7
18683: PPUSH
18684: LD_VAR 0 8
18688: PPUSH
18689: CALL_OW 488
18693: NOT
18694: IFFALSE 18698
// continue ;
18696: GO 18630
// if HexInfo ( _x , _y ) = 0 then
18698: LD_VAR 0 7
18702: PPUSH
18703: LD_VAR 0 8
18707: PPUSH
18708: CALL_OW 428
18712: PUSH
18713: LD_INT 0
18715: EQUAL
18716: IFFALSE 18741
// begin ComMoveXY ( unit , _x , _y ) ;
18718: LD_VAR 0 1
18722: PPUSH
18723: LD_VAR 0 7
18727: PPUSH
18728: LD_VAR 0 8
18732: PPUSH
18733: CALL_OW 111
// exit ;
18737: POP
18738: POP
18739: GO 18745
// end ; end ;
18741: GO 18630
18743: POP
18744: POP
// end ;
18745: LD_VAR 0 3
18749: RET
// export function ScanBase ( side , base_area ) ; begin
18750: LD_INT 0
18752: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_VAR 0 2
18762: PPUSH
18763: LD_INT 81
18765: PUSH
18766: LD_VAR 0 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 70
18779: ST_TO_ADDR
// end ;
18780: LD_VAR 0 3
18784: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
18789: PPUSH
18790: PPUSH
// result := false ;
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: LD_INT 0
18798: ST_TO_ADDR
// side := GetSide ( unit ) ;
18799: LD_ADDR_VAR 0 3
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 255
18813: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18814: LD_ADDR_VAR 0 4
18818: PUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 248
18828: ST_TO_ADDR
// case nat of 1 :
18829: LD_VAR 0 4
18833: PUSH
18834: LD_INT 1
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18853
18842: POP
// tech := tech_lassight ; 2 :
18843: LD_ADDR_VAR 0 5
18847: PUSH
18848: LD_INT 12
18850: ST_TO_ADDR
18851: GO 18892
18853: LD_INT 2
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18872
18861: POP
// tech := tech_mortar ; 3 :
18862: LD_ADDR_VAR 0 5
18866: PUSH
18867: LD_INT 41
18869: ST_TO_ADDR
18870: GO 18892
18872: LD_INT 3
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18891
18880: POP
// tech := tech_bazooka ; end ;
18881: LD_ADDR_VAR 0 5
18885: PUSH
18886: LD_INT 44
18888: ST_TO_ADDR
18889: GO 18892
18891: POP
// if Researched ( side , tech ) then
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_VAR 0 5
18901: PPUSH
18902: CALL_OW 325
18906: IFFALSE 18933
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: LD_INT 5
18915: PUSH
18916: LD_INT 8
18918: PUSH
18919: LD_INT 9
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: LD_VAR 0 4
18931: ARRAY
18932: ST_TO_ADDR
// end ;
18933: LD_VAR 0 2
18937: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
18942: PPUSH
// if not mines then
18943: LD_VAR 0 2
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18952: LD_ADDR_VAR 0 5
18956: PUSH
18957: LD_INT 81
18959: PUSH
18960: LD_VAR 0 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 3
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 69
18994: ST_TO_ADDR
// for i in mines do
18995: LD_ADDR_VAR 0 4
18999: PUSH
19000: LD_VAR 0 2
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19094
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19008: LD_VAR 0 4
19012: PUSH
19013: LD_INT 1
19015: ARRAY
19016: PPUSH
19017: LD_VAR 0 4
19021: PUSH
19022: LD_INT 2
19024: ARRAY
19025: PPUSH
19026: CALL_OW 458
19030: NOT
19031: IFFALSE 19035
// continue ;
19033: GO 19005
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19035: LD_VAR 0 4
19039: PUSH
19040: LD_INT 1
19042: ARRAY
19043: PPUSH
19044: LD_VAR 0 4
19048: PUSH
19049: LD_INT 2
19051: ARRAY
19052: PPUSH
19053: CALL_OW 428
19057: PUSH
19058: LD_VAR 0 5
19062: IN
19063: IFFALSE 19092
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19065: LD_VAR 0 4
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: LD_VAR 0 4
19078: PUSH
19079: LD_INT 2
19081: ARRAY
19082: PPUSH
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 456
// end ;
19092: GO 19005
19094: POP
19095: POP
// end ;
19096: LD_VAR 0 3
19100: RET
// export function Count ( array ) ; begin
19101: LD_INT 0
19103: PPUSH
// result := array + 0 ;
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 0
19116: PLUS
19117: ST_TO_ADDR
// end ;
19118: LD_VAR 0 2
19122: RET
// export function IsEmpty ( building ) ; begin
19123: LD_INT 0
19125: PPUSH
// if not building then
19126: LD_VAR 0 1
19130: NOT
19131: IFFALSE 19135
// exit ;
19133: GO 19178
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19135: LD_ADDR_VAR 0 2
19139: PUSH
19140: LD_VAR 0 1
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 255
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 58
19164: PUSH
19165: EMPTY
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: IN
19177: ST_TO_ADDR
// end ;
19178: LD_VAR 0 2
19182: RET
// export function IsNotFull ( building ) ; var places ; begin
19183: LD_INT 0
19185: PPUSH
19186: PPUSH
// if not building then
19187: LD_VAR 0 1
19191: NOT
19192: IFFALSE 19196
// exit ;
19194: GO 19224
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: LD_VAR 0 1
19205: PPUSH
19206: LD_INT 3
19208: PUSH
19209: LD_INT 62
19211: PUSH
19212: EMPTY
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PPUSH
19219: CALL_OW 72
19223: ST_TO_ADDR
// end ;
19224: LD_VAR 0 2
19228: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
// tmp := [ ] ;
19235: LD_ADDR_VAR 0 3
19239: PUSH
19240: EMPTY
19241: ST_TO_ADDR
// list := [ ] ;
19242: LD_ADDR_VAR 0 5
19246: PUSH
19247: EMPTY
19248: ST_TO_ADDR
// for i = 16 to 25 do
19249: LD_ADDR_VAR 0 4
19253: PUSH
19254: DOUBLE
19255: LD_INT 16
19257: DEC
19258: ST_TO_ADDR
19259: LD_INT 25
19261: PUSH
19262: FOR_TO
19263: IFFALSE 19336
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 255
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 91
19294: PUSH
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 6
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 30
19310: PUSH
19311: LD_VAR 0 4
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ADD
19333: ST_TO_ADDR
19334: GO 19262
19336: POP
19337: POP
// for i = 1 to tmp do
19338: LD_ADDR_VAR 0 4
19342: PUSH
19343: DOUBLE
19344: LD_INT 1
19346: DEC
19347: ST_TO_ADDR
19348: LD_VAR 0 3
19352: PUSH
19353: FOR_TO
19354: IFFALSE 19442
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: LD_VAR 0 5
19365: PUSH
19366: LD_VAR 0 3
19370: PUSH
19371: LD_VAR 0 4
19375: ARRAY
19376: PPUSH
19377: CALL_OW 266
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 4
19391: ARRAY
19392: PPUSH
19393: CALL_OW 250
19397: PUSH
19398: LD_VAR 0 3
19402: PUSH
19403: LD_VAR 0 4
19407: ARRAY
19408: PPUSH
19409: CALL_OW 251
19413: PUSH
19414: LD_VAR 0 3
19418: PUSH
19419: LD_VAR 0 4
19423: ARRAY
19424: PPUSH
19425: CALL_OW 254
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: ADD
19439: ST_TO_ADDR
19440: GO 19353
19442: POP
19443: POP
// result := list ;
19444: LD_ADDR_VAR 0 2
19448: PUSH
19449: LD_VAR 0 5
19453: ST_TO_ADDR
// end ;
19454: LD_VAR 0 2
19458: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
// if not factory then
19468: LD_VAR 0 1
19472: NOT
19473: IFFALSE 19477
// exit ;
19475: GO 20070
// if control = control_apeman then
19477: LD_VAR 0 4
19481: PUSH
19482: LD_INT 5
19484: EQUAL
19485: IFFALSE 19594
// begin tmp := UnitsInside ( factory ) ;
19487: LD_ADDR_VAR 0 8
19491: PUSH
19492: LD_VAR 0 1
19496: PPUSH
19497: CALL_OW 313
19501: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19502: LD_VAR 0 8
19506: PPUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 72
19521: NOT
19522: IFFALSE 19532
// control := control_manual ;
19524: LD_ADDR_VAR 0 4
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19532: LD_ADDR_VAR 0 8
19536: PUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL 19229 0 1
19546: ST_TO_ADDR
// if tmp then
19547: LD_VAR 0 8
19551: IFFALSE 19594
// begin for i in tmp do
19553: LD_ADDR_VAR 0 7
19557: PUSH
19558: LD_VAR 0 8
19562: PUSH
19563: FOR_IN
19564: IFFALSE 19592
// if i [ 1 ] = b_ext_radio then
19566: LD_VAR 0 7
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PUSH
19575: LD_INT 22
19577: EQUAL
19578: IFFALSE 19590
// begin control := control_remote ;
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 2
19587: ST_TO_ADDR
// break ;
19588: GO 19592
// end ;
19590: GO 19563
19592: POP
19593: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 3
19608: PPUSH
19609: LD_VAR 0 4
19613: PPUSH
19614: LD_VAR 0 5
19618: PPUSH
19619: CALL_OW 448
19623: IFFALSE 19658
// begin result := [ chassis , engine , control , weapon ] ;
19625: LD_ADDR_VAR 0 6
19629: PUSH
19630: LD_VAR 0 2
19634: PUSH
19635: LD_VAR 0 3
19639: PUSH
19640: LD_VAR 0 4
19644: PUSH
19645: LD_VAR 0 5
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
// exit ;
19656: GO 20070
// end ; _chassis := AvailableChassisList ( factory ) ;
19658: LD_ADDR_VAR 0 9
19662: PUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL_OW 475
19672: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19673: LD_ADDR_VAR 0 11
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL_OW 476
19687: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19688: LD_ADDR_VAR 0 12
19692: PUSH
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 477
19702: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19703: LD_ADDR_VAR 0 10
19707: PUSH
19708: LD_VAR 0 1
19712: PPUSH
19713: CALL_OW 478
19717: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19718: LD_VAR 0 9
19722: NOT
19723: PUSH
19724: LD_VAR 0 11
19728: NOT
19729: OR
19730: PUSH
19731: LD_VAR 0 12
19735: NOT
19736: OR
19737: PUSH
19738: LD_VAR 0 10
19742: NOT
19743: OR
19744: IFFALSE 19779
// begin result := [ chassis , engine , control , weapon ] ;
19746: LD_ADDR_VAR 0 6
19750: PUSH
19751: LD_VAR 0 2
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_VAR 0 4
19765: PUSH
19766: LD_VAR 0 5
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// exit ;
19777: GO 20070
// end ; if not chassis in _chassis then
19779: LD_VAR 0 2
19783: PUSH
19784: LD_VAR 0 9
19788: IN
19789: NOT
19790: IFFALSE 19816
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19792: LD_ADDR_VAR 0 2
19796: PUSH
19797: LD_VAR 0 9
19801: PUSH
19802: LD_INT 1
19804: PPUSH
19805: LD_VAR 0 9
19809: PPUSH
19810: CALL_OW 12
19814: ARRAY
19815: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: CALL 20075 0 2
19830: NOT
19831: IFFALSE 19890
// repeat engine := _engine [ 1 ] ;
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_VAR 0 11
19842: PUSH
19843: LD_INT 1
19845: ARRAY
19846: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19847: LD_ADDR_VAR 0 11
19851: PUSH
19852: LD_VAR 0 11
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 3
19864: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: CALL 20075 0 2
19879: PUSH
19880: LD_VAR 0 11
19884: PUSH
19885: EMPTY
19886: EQUAL
19887: OR
19888: IFFALSE 19833
// if not control in _control then
19890: LD_VAR 0 4
19894: PUSH
19895: LD_VAR 0 12
19899: IN
19900: NOT
19901: IFFALSE 19927
// control := _control [ rand ( 1 , _control ) ] ;
19903: LD_ADDR_VAR 0 4
19907: PUSH
19908: LD_VAR 0 12
19912: PUSH
19913: LD_INT 1
19915: PPUSH
19916: LD_VAR 0 12
19920: PPUSH
19921: CALL_OW 12
19925: ARRAY
19926: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_VAR 0 5
19936: PPUSH
19937: CALL 20295 0 2
19941: NOT
19942: IFFALSE 20001
// repeat weapon := _weapon [ 1 ] ;
19944: LD_ADDR_VAR 0 5
19948: PUSH
19949: LD_VAR 0 10
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19958: LD_ADDR_VAR 0 10
19962: PUSH
19963: LD_VAR 0 10
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 3
19975: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 5
19985: PPUSH
19986: CALL 20295 0 2
19990: PUSH
19991: LD_VAR 0 10
19995: PUSH
19996: EMPTY
19997: EQUAL
19998: OR
19999: IFFALSE 19944
// result := [ ] ;
20001: LD_ADDR_VAR 0 6
20005: PUSH
20006: EMPTY
20007: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: LD_VAR 0 3
20022: PPUSH
20023: LD_VAR 0 4
20027: PPUSH
20028: LD_VAR 0 5
20032: PPUSH
20033: CALL_OW 448
20037: IFFALSE 20070
// result := [ chassis , engine , control , weapon ] ;
20039: LD_ADDR_VAR 0 6
20043: PUSH
20044: LD_VAR 0 2
20048: PUSH
20049: LD_VAR 0 3
20053: PUSH
20054: LD_VAR 0 4
20058: PUSH
20059: LD_VAR 0 5
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// end ;
20070: LD_VAR 0 6
20074: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20075: LD_INT 0
20077: PPUSH
// if not chassis or not engine then
20078: LD_VAR 0 1
20082: NOT
20083: PUSH
20084: LD_VAR 0 2
20088: NOT
20089: OR
20090: IFFALSE 20094
// exit ;
20092: GO 20290
// case engine of engine_solar :
20094: LD_VAR 0 2
20098: PUSH
20099: LD_INT 2
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20145
20107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_INT 11
20115: PUSH
20116: LD_INT 12
20118: PUSH
20119: LD_INT 13
20121: PUSH
20122: LD_INT 14
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
20143: GO 20274
20145: LD_INT 1
20147: DOUBLE
20148: EQUAL
20149: IFTRUE 20153
20151: GO 20215
20153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 13
20167: PUSH
20168: LD_INT 14
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 3
20179: PUSH
20180: LD_INT 4
20182: PUSH
20183: LD_INT 5
20185: PUSH
20186: LD_INT 21
20188: PUSH
20189: LD_INT 23
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_INT 24
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: ST_TO_ADDR
20213: GO 20274
20215: LD_INT 3
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20273
20223: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 13
20231: PUSH
20232: LD_INT 14
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: LD_INT 4
20243: PUSH
20244: LD_INT 5
20246: PUSH
20247: LD_INT 21
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 23
20255: PUSH
20256: LD_INT 24
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: ST_TO_ADDR
20271: GO 20274
20273: POP
// result := ( chassis in result ) ;
20274: LD_ADDR_VAR 0 3
20278: PUSH
20279: LD_VAR 0 1
20283: PUSH
20284: LD_VAR 0 3
20288: IN
20289: ST_TO_ADDR
// end ;
20290: LD_VAR 0 3
20294: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20295: LD_INT 0
20297: PPUSH
// if not chassis or not weapon then
20298: LD_VAR 0 1
20302: NOT
20303: PUSH
20304: LD_VAR 0 2
20308: NOT
20309: OR
20310: IFFALSE 20314
// exit ;
20312: GO 21374
// case weapon of us_machine_gun :
20314: LD_VAR 0 2
20318: PUSH
20319: LD_INT 2
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20357
20327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: LD_INT 4
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 21358
20357: LD_INT 3
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20395
20365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 3
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
20393: GO 21358
20395: LD_INT 11
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20433
20403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: LD_INT 4
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: ST_TO_ADDR
20431: GO 21358
20433: LD_INT 4
20435: DOUBLE
20436: EQUAL
20437: IFTRUE 20441
20439: GO 20467
20441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 3
20452: PUSH
20453: LD_INT 4
20455: PUSH
20456: LD_INT 5
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: ST_TO_ADDR
20465: GO 21358
20467: LD_INT 5
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20501
20475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 3
20486: PUSH
20487: LD_INT 4
20489: PUSH
20490: LD_INT 5
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 21358
20501: LD_INT 9
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20535
20509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 4
20523: PUSH
20524: LD_INT 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 21358
20535: LD_INT 7
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20569
20543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 4
20557: PUSH
20558: LD_INT 5
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
20567: GO 21358
20569: LD_INT 12
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20603
20577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: LD_INT 3
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
20601: GO 21358
20603: LD_INT 13
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20637
20611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 3
20622: PUSH
20623: LD_INT 4
20625: PUSH
20626: LD_INT 5
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 21358
20637: LD_INT 14
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20663
20645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 4
20653: PUSH
20654: LD_INT 5
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 21358
20663: LD_INT 6
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20689
20671: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 4
20679: PUSH
20680: LD_INT 5
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: ST_TO_ADDR
20687: GO 21358
20689: LD_INT 10
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20715
20697: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20698: LD_ADDR_VAR 0 3
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: LD_INT 5
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: ST_TO_ADDR
20713: GO 21358
20715: LD_INT 22
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20749
20723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20724: LD_ADDR_VAR 0 3
20728: PUSH
20729: LD_INT 11
20731: PUSH
20732: LD_INT 12
20734: PUSH
20735: LD_INT 13
20737: PUSH
20738: LD_INT 14
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
20747: GO 21358
20749: LD_INT 23
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20783
20757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20758: LD_ADDR_VAR 0 3
20762: PUSH
20763: LD_INT 11
20765: PUSH
20766: LD_INT 12
20768: PUSH
20769: LD_INT 13
20771: PUSH
20772: LD_INT 14
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 21358
20783: LD_INT 24
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20817
20791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_INT 11
20799: PUSH
20800: LD_INT 12
20802: PUSH
20803: LD_INT 13
20805: PUSH
20806: LD_INT 14
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 21358
20817: LD_INT 30
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20851
20825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 11
20833: PUSH
20834: LD_INT 12
20836: PUSH
20837: LD_INT 13
20839: PUSH
20840: LD_INT 14
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
20849: GO 21358
20851: LD_INT 25
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20877
20859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_INT 13
20867: PUSH
20868: LD_INT 14
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: ST_TO_ADDR
20875: GO 21358
20877: LD_INT 27
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20903
20885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20886: LD_ADDR_VAR 0 3
20890: PUSH
20891: LD_INT 13
20893: PUSH
20894: LD_INT 14
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: ST_TO_ADDR
20901: GO 21358
20903: LD_INT 92
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20937
20911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: LD_INT 11
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: LD_INT 13
20925: PUSH
20926: LD_INT 14
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: ST_TO_ADDR
20935: GO 21358
20937: LD_INT 28
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20963
20945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 13
20953: PUSH
20954: LD_INT 14
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: ST_TO_ADDR
20961: GO 21358
20963: LD_INT 29
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20989
20971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20972: LD_ADDR_VAR 0 3
20976: PUSH
20977: LD_INT 13
20979: PUSH
20980: LD_INT 14
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 21358
20989: LD_INT 31
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21015
20997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20998: LD_ADDR_VAR 0 3
21002: PUSH
21003: LD_INT 13
21005: PUSH
21006: LD_INT 14
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: ST_TO_ADDR
21013: GO 21358
21015: LD_INT 26
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21041
21023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 13
21031: PUSH
21032: LD_INT 14
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: ST_TO_ADDR
21039: GO 21358
21041: LD_INT 42
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21075
21049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: LD_INT 21
21057: PUSH
21058: LD_INT 22
21060: PUSH
21061: LD_INT 23
21063: PUSH
21064: LD_INT 24
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
21073: GO 21358
21075: LD_INT 43
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21109
21083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 21
21091: PUSH
21092: LD_INT 22
21094: PUSH
21095: LD_INT 23
21097: PUSH
21098: LD_INT 24
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 21358
21109: LD_INT 44
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21143
21117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_INT 23
21131: PUSH
21132: LD_INT 24
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: ST_TO_ADDR
21141: GO 21358
21143: LD_INT 45
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21177
21151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21152: LD_ADDR_VAR 0 3
21156: PUSH
21157: LD_INT 21
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 23
21165: PUSH
21166: LD_INT 24
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 21358
21177: LD_INT 49
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21211
21185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21186: LD_ADDR_VAR 0 3
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 22
21196: PUSH
21197: LD_INT 23
21199: PUSH
21200: LD_INT 24
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 21358
21211: LD_INT 51
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21245
21219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_INT 23
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: ST_TO_ADDR
21243: GO 21358
21245: LD_INT 52
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21279
21253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: LD_INT 21
21261: PUSH
21262: LD_INT 22
21264: PUSH
21265: LD_INT 23
21267: PUSH
21268: LD_INT 24
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21358
21279: LD_INT 53
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21305
21287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 23
21295: PUSH
21296: LD_INT 24
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
21303: GO 21358
21305: LD_INT 46
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21331
21313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 24
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21358
21331: LD_INT 47
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21357
21339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 23
21347: PUSH
21348: LD_INT 24
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: ST_TO_ADDR
21355: GO 21358
21357: POP
// result := ( chassis in result ) ;
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_VAR 0 1
21367: PUSH
21368: LD_VAR 0 3
21372: IN
21373: ST_TO_ADDR
// end ;
21374: LD_VAR 0 3
21378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
21387: PPUSH
// result := array ;
21388: LD_ADDR_VAR 0 5
21392: PUSH
21393: LD_VAR 0 1
21397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21398: LD_VAR 0 1
21402: NOT
21403: PUSH
21404: LD_VAR 0 2
21408: NOT
21409: OR
21410: PUSH
21411: LD_VAR 0 3
21415: NOT
21416: OR
21417: PUSH
21418: LD_VAR 0 2
21422: PUSH
21423: LD_VAR 0 1
21427: GREATER
21428: OR
21429: PUSH
21430: LD_VAR 0 3
21434: PUSH
21435: LD_VAR 0 1
21439: GREATER
21440: OR
21441: IFFALSE 21445
// exit ;
21443: GO 21741
// if direction then
21445: LD_VAR 0 4
21449: IFFALSE 21513
// begin d := 1 ;
21451: LD_ADDR_VAR 0 9
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if i_from > i_to then
21459: LD_VAR 0 2
21463: PUSH
21464: LD_VAR 0 3
21468: GREATER
21469: IFFALSE 21495
// length := ( array - i_from ) + i_to else
21471: LD_ADDR_VAR 0 11
21475: PUSH
21476: LD_VAR 0 1
21480: PUSH
21481: LD_VAR 0 2
21485: MINUS
21486: PUSH
21487: LD_VAR 0 3
21491: PLUS
21492: ST_TO_ADDR
21493: GO 21511
// length := i_to - i_from ;
21495: LD_ADDR_VAR 0 11
21499: PUSH
21500: LD_VAR 0 3
21504: PUSH
21505: LD_VAR 0 2
21509: MINUS
21510: ST_TO_ADDR
// end else
21511: GO 21574
// begin d := - 1 ;
21513: LD_ADDR_VAR 0 9
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: ST_TO_ADDR
// if i_from > i_to then
21522: LD_VAR 0 2
21526: PUSH
21527: LD_VAR 0 3
21531: GREATER
21532: IFFALSE 21552
// length := i_from - i_to else
21534: LD_ADDR_VAR 0 11
21538: PUSH
21539: LD_VAR 0 2
21543: PUSH
21544: LD_VAR 0 3
21548: MINUS
21549: ST_TO_ADDR
21550: GO 21574
// length := ( array - i_to ) + i_from ;
21552: LD_ADDR_VAR 0 11
21556: PUSH
21557: LD_VAR 0 1
21561: PUSH
21562: LD_VAR 0 3
21566: MINUS
21567: PUSH
21568: LD_VAR 0 2
21572: PLUS
21573: ST_TO_ADDR
// end ; if not length then
21574: LD_VAR 0 11
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21741
// tmp := array ;
21583: LD_ADDR_VAR 0 10
21587: PUSH
21588: LD_VAR 0 1
21592: ST_TO_ADDR
// for i = 1 to length do
21593: LD_ADDR_VAR 0 6
21597: PUSH
21598: DOUBLE
21599: LD_INT 1
21601: DEC
21602: ST_TO_ADDR
21603: LD_VAR 0 11
21607: PUSH
21608: FOR_TO
21609: IFFALSE 21729
// begin for j = 1 to array do
21611: LD_ADDR_VAR 0 7
21615: PUSH
21616: DOUBLE
21617: LD_INT 1
21619: DEC
21620: ST_TO_ADDR
21621: LD_VAR 0 1
21625: PUSH
21626: FOR_TO
21627: IFFALSE 21715
// begin k := j + d ;
21629: LD_ADDR_VAR 0 8
21633: PUSH
21634: LD_VAR 0 7
21638: PUSH
21639: LD_VAR 0 9
21643: PLUS
21644: ST_TO_ADDR
// if k > array then
21645: LD_VAR 0 8
21649: PUSH
21650: LD_VAR 0 1
21654: GREATER
21655: IFFALSE 21665
// k := 1 ;
21657: LD_ADDR_VAR 0 8
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if not k then
21665: LD_VAR 0 8
21669: NOT
21670: IFFALSE 21682
// k := array ;
21672: LD_ADDR_VAR 0 8
21676: PUSH
21677: LD_VAR 0 1
21681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21682: LD_ADDR_VAR 0 10
21686: PUSH
21687: LD_VAR 0 10
21691: PPUSH
21692: LD_VAR 0 8
21696: PPUSH
21697: LD_VAR 0 1
21701: PUSH
21702: LD_VAR 0 7
21706: ARRAY
21707: PPUSH
21708: CALL_OW 1
21712: ST_TO_ADDR
// end ;
21713: GO 21626
21715: POP
21716: POP
// array := tmp ;
21717: LD_ADDR_VAR 0 1
21721: PUSH
21722: LD_VAR 0 10
21726: ST_TO_ADDR
// end ;
21727: GO 21608
21729: POP
21730: POP
// result := array ;
21731: LD_ADDR_VAR 0 5
21735: PUSH
21736: LD_VAR 0 1
21740: ST_TO_ADDR
// end ;
21741: LD_VAR 0 5
21745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21746: LD_INT 0
21748: PPUSH
21749: PPUSH
// result := 0 ;
21750: LD_ADDR_VAR 0 3
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// if not array or not value in array then
21758: LD_VAR 0 1
21762: NOT
21763: PUSH
21764: LD_VAR 0 2
21768: PUSH
21769: LD_VAR 0 1
21773: IN
21774: NOT
21775: OR
21776: IFFALSE 21780
// exit ;
21778: GO 21834
// for i = 1 to array do
21780: LD_ADDR_VAR 0 4
21784: PUSH
21785: DOUBLE
21786: LD_INT 1
21788: DEC
21789: ST_TO_ADDR
21790: LD_VAR 0 1
21794: PUSH
21795: FOR_TO
21796: IFFALSE 21832
// if value = array [ i ] then
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 1
21807: PUSH
21808: LD_VAR 0 4
21812: ARRAY
21813: EQUAL
21814: IFFALSE 21830
// begin result := i ;
21816: LD_ADDR_VAR 0 3
21820: PUSH
21821: LD_VAR 0 4
21825: ST_TO_ADDR
// exit ;
21826: POP
21827: POP
21828: GO 21834
// end ;
21830: GO 21795
21832: POP
21833: POP
// end ;
21834: LD_VAR 0 3
21838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21839: LD_INT 0
21841: PPUSH
// vc_chassis := chassis ;
21842: LD_ADDR_OWVAR 37
21846: PUSH
21847: LD_VAR 0 1
21851: ST_TO_ADDR
// vc_engine := engine ;
21852: LD_ADDR_OWVAR 39
21856: PUSH
21857: LD_VAR 0 2
21861: ST_TO_ADDR
// vc_control := control ;
21862: LD_ADDR_OWVAR 38
21866: PUSH
21867: LD_VAR 0 3
21871: ST_TO_ADDR
// vc_weapon := weapon ;
21872: LD_ADDR_OWVAR 40
21876: PUSH
21877: LD_VAR 0 4
21881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21882: LD_ADDR_OWVAR 41
21886: PUSH
21887: LD_VAR 0 5
21891: ST_TO_ADDR
// end ;
21892: LD_VAR 0 6
21896: RET
// export function WantPlant ( unit ) ; var task ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
// result := false ;
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 0
21908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21909: LD_ADDR_VAR 0 3
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 437
21923: ST_TO_ADDR
// if task then
21924: LD_VAR 0 3
21928: IFFALSE 21956
// if task [ 1 ] [ 1 ] = p then
21930: LD_VAR 0 3
21934: PUSH
21935: LD_INT 1
21937: ARRAY
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PUSH
21943: LD_STRING p
21945: EQUAL
21946: IFFALSE 21956
// result := true ;
21948: LD_ADDR_VAR 0 2
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 2
21960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// if pos < 1 then
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: LESS
21975: IFFALSE 21979
// exit ;
21977: GO 22282
// if pos = 1 then
21979: LD_VAR 0 2
21983: PUSH
21984: LD_INT 1
21986: EQUAL
21987: IFFALSE 22020
// result := Replace ( arr , pos [ 1 ] , value ) else
21989: LD_ADDR_VAR 0 4
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_VAR 0 2
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: CALL_OW 1
22017: ST_TO_ADDR
22018: GO 22282
// begin tmp := arr ;
22020: LD_ADDR_VAR 0 6
22024: PUSH
22025: LD_VAR 0 1
22029: ST_TO_ADDR
// s_arr := [ tmp ] ;
22030: LD_ADDR_VAR 0 7
22034: PUSH
22035: LD_VAR 0 6
22039: PUSH
22040: EMPTY
22041: LIST
22042: ST_TO_ADDR
// for i = 1 to pos - 1 do
22043: LD_ADDR_VAR 0 5
22047: PUSH
22048: DOUBLE
22049: LD_INT 1
22051: DEC
22052: ST_TO_ADDR
22053: LD_VAR 0 2
22057: PUSH
22058: LD_INT 1
22060: MINUS
22061: PUSH
22062: FOR_TO
22063: IFFALSE 22108
// begin tmp := tmp [ pos [ i ] ] ;
22065: LD_ADDR_VAR 0 6
22069: PUSH
22070: LD_VAR 0 6
22074: PUSH
22075: LD_VAR 0 2
22079: PUSH
22080: LD_VAR 0 5
22084: ARRAY
22085: ARRAY
22086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22087: LD_ADDR_VAR 0 7
22091: PUSH
22092: LD_VAR 0 7
22096: PUSH
22097: LD_VAR 0 6
22101: PUSH
22102: EMPTY
22103: LIST
22104: ADD
22105: ST_TO_ADDR
// end ;
22106: GO 22062
22108: POP
22109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22110: LD_ADDR_VAR 0 6
22114: PUSH
22115: LD_VAR 0 6
22119: PPUSH
22120: LD_VAR 0 2
22124: PUSH
22125: LD_VAR 0 2
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 1
22140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22141: LD_ADDR_VAR 0 7
22145: PUSH
22146: LD_VAR 0 7
22150: PPUSH
22151: LD_VAR 0 7
22155: PPUSH
22156: LD_VAR 0 6
22160: PPUSH
22161: CALL_OW 1
22165: ST_TO_ADDR
// for i = s_arr downto 2 do
22166: LD_ADDR_VAR 0 5
22170: PUSH
22171: DOUBLE
22172: LD_VAR 0 7
22176: INC
22177: ST_TO_ADDR
22178: LD_INT 2
22180: PUSH
22181: FOR_DOWNTO
22182: IFFALSE 22266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22184: LD_ADDR_VAR 0 6
22188: PUSH
22189: LD_VAR 0 7
22193: PUSH
22194: LD_VAR 0 5
22198: PUSH
22199: LD_INT 1
22201: MINUS
22202: ARRAY
22203: PPUSH
22204: LD_VAR 0 2
22208: PUSH
22209: LD_VAR 0 5
22213: PUSH
22214: LD_INT 1
22216: MINUS
22217: ARRAY
22218: PPUSH
22219: LD_VAR 0 7
22223: PUSH
22224: LD_VAR 0 5
22228: ARRAY
22229: PPUSH
22230: CALL_OW 1
22234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22235: LD_ADDR_VAR 0 7
22239: PUSH
22240: LD_VAR 0 7
22244: PPUSH
22245: LD_VAR 0 5
22249: PUSH
22250: LD_INT 1
22252: MINUS
22253: PPUSH
22254: LD_VAR 0 6
22258: PPUSH
22259: CALL_OW 1
22263: ST_TO_ADDR
// end ;
22264: GO 22181
22266: POP
22267: POP
// result := s_arr [ 1 ] ;
22268: LD_ADDR_VAR 0 4
22272: PUSH
22273: LD_VAR 0 7
22277: PUSH
22278: LD_INT 1
22280: ARRAY
22281: ST_TO_ADDR
// end ; end ;
22282: LD_VAR 0 4
22286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22287: LD_INT 0
22289: PPUSH
22290: PPUSH
// if not list then
22291: LD_VAR 0 1
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22391
// i := list [ pos1 ] ;
22300: LD_ADDR_VAR 0 5
22304: PUSH
22305: LD_VAR 0 1
22309: PUSH
22310: LD_VAR 0 2
22314: ARRAY
22315: ST_TO_ADDR
// if not i then
22316: LD_VAR 0 5
22320: NOT
22321: IFFALSE 22325
// exit ;
22323: GO 22391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22325: LD_ADDR_VAR 0 1
22329: PUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_VAR 0 1
22344: PUSH
22345: LD_VAR 0 3
22349: ARRAY
22350: PPUSH
22351: CALL_OW 1
22355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22356: LD_ADDR_VAR 0 1
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: LD_VAR 0 3
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL_OW 1
22380: ST_TO_ADDR
// result := list ;
22381: LD_ADDR_VAR 0 4
22385: PUSH
22386: LD_VAR 0 1
22390: ST_TO_ADDR
// end ;
22391: LD_VAR 0 4
22395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22396: LD_INT 0
22398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22399: LD_ADDR_VAR 0 5
22403: PUSH
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 250
22413: PPUSH
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 251
22423: PPUSH
22424: LD_VAR 0 2
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: LD_VAR 0 4
22438: PPUSH
22439: CALL 22817 0 5
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 5
22448: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22449: LD_INT 0
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
// if not list or not unit then
22455: LD_VAR 0 2
22459: NOT
22460: PUSH
22461: LD_VAR 0 1
22465: NOT
22466: OR
22467: IFFALSE 22471
// exit ;
22469: GO 22812
// result := [ ] ;
22471: LD_ADDR_VAR 0 5
22475: PUSH
22476: EMPTY
22477: ST_TO_ADDR
// for i in list do
22478: LD_ADDR_VAR 0 6
22482: PUSH
22483: LD_VAR 0 2
22487: PUSH
22488: FOR_IN
22489: IFFALSE 22707
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22491: LD_ADDR_VAR 0 8
22495: PUSH
22496: LD_VAR 0 1
22500: PPUSH
22501: LD_VAR 0 6
22505: PUSH
22506: LD_INT 1
22508: ARRAY
22509: PPUSH
22510: LD_VAR 0 6
22514: PUSH
22515: LD_INT 2
22517: ARRAY
22518: PPUSH
22519: CALL_OW 297
22523: ST_TO_ADDR
// if not Count ( result ) then
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL 19101 0 1
22533: NOT
22534: IFFALSE 22567
// begin result := Join ( result , [ i , tmp ] ) ;
22536: LD_ADDR_VAR 0 5
22540: PUSH
22541: LD_VAR 0 5
22545: PPUSH
22546: LD_VAR 0 6
22550: PUSH
22551: LD_VAR 0 8
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL 54701 0 2
22564: ST_TO_ADDR
// continue ;
22565: GO 22488
// end ; if result [ result ] [ 2 ] <= tmp then
22567: LD_VAR 0 5
22571: PUSH
22572: LD_VAR 0 5
22576: ARRAY
22577: PUSH
22578: LD_INT 2
22580: ARRAY
22581: PUSH
22582: LD_VAR 0 8
22586: LESSEQUAL
22587: IFFALSE 22620
// result := Join ( result , [ i , tmp ] ) else
22589: LD_ADDR_VAR 0 5
22593: PUSH
22594: LD_VAR 0 5
22598: PPUSH
22599: LD_VAR 0 6
22603: PUSH
22604: LD_VAR 0 8
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PPUSH
22613: CALL 54701 0 2
22617: ST_TO_ADDR
22618: GO 22705
// begin for j := 1 to Count ( result ) do
22620: LD_ADDR_VAR 0 7
22624: PUSH
22625: DOUBLE
22626: LD_INT 1
22628: DEC
22629: ST_TO_ADDR
22630: LD_VAR 0 5
22634: PPUSH
22635: CALL 19101 0 1
22639: PUSH
22640: FOR_TO
22641: IFFALSE 22703
// begin if tmp < result [ j ] [ 2 ] then
22643: LD_VAR 0 8
22647: PUSH
22648: LD_VAR 0 5
22652: PUSH
22653: LD_VAR 0 7
22657: ARRAY
22658: PUSH
22659: LD_INT 2
22661: ARRAY
22662: LESS
22663: IFFALSE 22701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22665: LD_ADDR_VAR 0 5
22669: PUSH
22670: LD_VAR 0 5
22674: PPUSH
22675: LD_VAR 0 7
22679: PPUSH
22680: LD_VAR 0 6
22684: PUSH
22685: LD_VAR 0 8
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PPUSH
22694: CALL_OW 2
22698: ST_TO_ADDR
// break ;
22699: GO 22703
// end ; end ;
22701: GO 22640
22703: POP
22704: POP
// end ; end ;
22705: GO 22488
22707: POP
22708: POP
// if result and not asc then
22709: LD_VAR 0 5
22713: PUSH
22714: LD_VAR 0 3
22718: NOT
22719: AND
22720: IFFALSE 22737
// result := ReverseArray ( result ) ;
22722: LD_ADDR_VAR 0 5
22726: PUSH
22727: LD_VAR 0 5
22731: PPUSH
22732: CALL 49977 0 1
22736: ST_TO_ADDR
// tmp := [ ] ;
22737: LD_ADDR_VAR 0 8
22741: PUSH
22742: EMPTY
22743: ST_TO_ADDR
// if mode then
22744: LD_VAR 0 4
22748: IFFALSE 22812
// begin for i := 1 to result do
22750: LD_ADDR_VAR 0 6
22754: PUSH
22755: DOUBLE
22756: LD_INT 1
22758: DEC
22759: ST_TO_ADDR
22760: LD_VAR 0 5
22764: PUSH
22765: FOR_TO
22766: IFFALSE 22800
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22768: LD_ADDR_VAR 0 8
22772: PUSH
22773: LD_VAR 0 8
22777: PPUSH
22778: LD_VAR 0 5
22782: PUSH
22783: LD_VAR 0 6
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: CALL 54701 0 2
22797: ST_TO_ADDR
22798: GO 22765
22800: POP
22801: POP
// result := tmp ;
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_VAR 0 8
22811: ST_TO_ADDR
// end ; end ;
22812: LD_VAR 0 5
22816: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22817: LD_INT 0
22819: PPUSH
22820: PPUSH
22821: PPUSH
22822: PPUSH
// if not list then
22823: LD_VAR 0 3
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 23220
// result := [ ] ;
22832: LD_ADDR_VAR 0 6
22836: PUSH
22837: EMPTY
22838: ST_TO_ADDR
// for i in list do
22839: LD_ADDR_VAR 0 7
22843: PUSH
22844: LD_VAR 0 3
22848: PUSH
22849: FOR_IN
22850: IFFALSE 23052
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22852: LD_ADDR_VAR 0 9
22856: PUSH
22857: LD_VAR 0 7
22861: PPUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_VAR 0 2
22871: PPUSH
22872: CALL_OW 297
22876: ST_TO_ADDR
// if not result then
22877: LD_VAR 0 6
22881: NOT
22882: IFFALSE 22908
// result := [ [ i , tmp ] ] else
22884: LD_ADDR_VAR 0 6
22888: PUSH
22889: LD_VAR 0 7
22893: PUSH
22894: LD_VAR 0 9
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: ST_TO_ADDR
22906: GO 23050
// begin if result [ result ] [ 2 ] < tmp then
22908: LD_VAR 0 6
22912: PUSH
22913: LD_VAR 0 6
22917: ARRAY
22918: PUSH
22919: LD_INT 2
22921: ARRAY
22922: PUSH
22923: LD_VAR 0 9
22927: LESS
22928: IFFALSE 22970
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22930: LD_ADDR_VAR 0 6
22934: PUSH
22935: LD_VAR 0 6
22939: PPUSH
22940: LD_VAR 0 6
22944: PUSH
22945: LD_INT 1
22947: PLUS
22948: PPUSH
22949: LD_VAR 0 7
22953: PUSH
22954: LD_VAR 0 9
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PPUSH
22963: CALL_OW 2
22967: ST_TO_ADDR
22968: GO 23050
// for j = 1 to result do
22970: LD_ADDR_VAR 0 8
22974: PUSH
22975: DOUBLE
22976: LD_INT 1
22978: DEC
22979: ST_TO_ADDR
22980: LD_VAR 0 6
22984: PUSH
22985: FOR_TO
22986: IFFALSE 23048
// begin if tmp < result [ j ] [ 2 ] then
22988: LD_VAR 0 9
22992: PUSH
22993: LD_VAR 0 6
22997: PUSH
22998: LD_VAR 0 8
23002: ARRAY
23003: PUSH
23004: LD_INT 2
23006: ARRAY
23007: LESS
23008: IFFALSE 23046
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23010: LD_ADDR_VAR 0 6
23014: PUSH
23015: LD_VAR 0 6
23019: PPUSH
23020: LD_VAR 0 8
23024: PPUSH
23025: LD_VAR 0 7
23029: PUSH
23030: LD_VAR 0 9
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PPUSH
23039: CALL_OW 2
23043: ST_TO_ADDR
// break ;
23044: GO 23048
// end ; end ;
23046: GO 22985
23048: POP
23049: POP
// end ; end ;
23050: GO 22849
23052: POP
23053: POP
// if result and not asc then
23054: LD_VAR 0 6
23058: PUSH
23059: LD_VAR 0 4
23063: NOT
23064: AND
23065: IFFALSE 23140
// begin tmp := result ;
23067: LD_ADDR_VAR 0 9
23071: PUSH
23072: LD_VAR 0 6
23076: ST_TO_ADDR
// for i = tmp downto 1 do
23077: LD_ADDR_VAR 0 7
23081: PUSH
23082: DOUBLE
23083: LD_VAR 0 9
23087: INC
23088: ST_TO_ADDR
23089: LD_INT 1
23091: PUSH
23092: FOR_DOWNTO
23093: IFFALSE 23138
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23095: LD_ADDR_VAR 0 6
23099: PUSH
23100: LD_VAR 0 6
23104: PPUSH
23105: LD_VAR 0 9
23109: PUSH
23110: LD_VAR 0 7
23114: MINUS
23115: PUSH
23116: LD_INT 1
23118: PLUS
23119: PPUSH
23120: LD_VAR 0 9
23124: PUSH
23125: LD_VAR 0 7
23129: ARRAY
23130: PPUSH
23131: CALL_OW 1
23135: ST_TO_ADDR
23136: GO 23092
23138: POP
23139: POP
// end ; tmp := [ ] ;
23140: LD_ADDR_VAR 0 9
23144: PUSH
23145: EMPTY
23146: ST_TO_ADDR
// if mode then
23147: LD_VAR 0 5
23151: IFFALSE 23220
// begin for i = 1 to result do
23153: LD_ADDR_VAR 0 7
23157: PUSH
23158: DOUBLE
23159: LD_INT 1
23161: DEC
23162: ST_TO_ADDR
23163: LD_VAR 0 6
23167: PUSH
23168: FOR_TO
23169: IFFALSE 23208
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23171: LD_ADDR_VAR 0 9
23175: PUSH
23176: LD_VAR 0 9
23180: PPUSH
23181: LD_VAR 0 7
23185: PPUSH
23186: LD_VAR 0 6
23190: PUSH
23191: LD_VAR 0 7
23195: ARRAY
23196: PUSH
23197: LD_INT 1
23199: ARRAY
23200: PPUSH
23201: CALL_OW 1
23205: ST_TO_ADDR
23206: GO 23168
23208: POP
23209: POP
// result := tmp ;
23210: LD_ADDR_VAR 0 6
23214: PUSH
23215: LD_VAR 0 9
23219: ST_TO_ADDR
// end ; end ;
23220: LD_VAR 0 6
23224: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23225: LD_INT 0
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23233: LD_ADDR_VAR 0 5
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// if not x or not y then
23255: LD_VAR 0 2
23259: NOT
23260: PUSH
23261: LD_VAR 0 3
23265: NOT
23266: OR
23267: IFFALSE 23271
// exit ;
23269: GO 24921
// if not range then
23271: LD_VAR 0 4
23275: NOT
23276: IFFALSE 23286
// range := 10 ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_INT 10
23285: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23286: LD_ADDR_VAR 0 8
23290: PUSH
23291: LD_INT 81
23293: PUSH
23294: LD_VAR 0 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 92
23305: PUSH
23306: LD_VAR 0 2
23310: PUSH
23311: LD_VAR 0 3
23315: PUSH
23316: LD_VAR 0 4
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 69
23353: ST_TO_ADDR
// if not tmp then
23354: LD_VAR 0 8
23358: NOT
23359: IFFALSE 23363
// exit ;
23361: GO 24921
// for i in tmp do
23363: LD_ADDR_VAR 0 6
23367: PUSH
23368: LD_VAR 0 8
23372: PUSH
23373: FOR_IN
23374: IFFALSE 24896
// begin points := [ 0 , 0 , 0 ] ;
23376: LD_ADDR_VAR 0 9
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: ST_TO_ADDR
// bpoints := 1 ;
23395: LD_ADDR_VAR 0 10
23399: PUSH
23400: LD_INT 1
23402: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23403: LD_VAR 0 6
23407: PPUSH
23408: CALL_OW 247
23412: PUSH
23413: LD_INT 1
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23999
23421: POP
// begin if GetClass ( i ) = 1 then
23422: LD_VAR 0 6
23426: PPUSH
23427: CALL_OW 257
23431: PUSH
23432: LD_INT 1
23434: EQUAL
23435: IFFALSE 23456
// points := [ 10 , 5 , 3 ] ;
23437: LD_ADDR_VAR 0 9
23441: PUSH
23442: LD_INT 10
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23456: LD_VAR 0 6
23460: PPUSH
23461: CALL_OW 257
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: LD_INT 4
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: IN
23480: IFFALSE 23501
// points := [ 3 , 2 , 1 ] ;
23482: LD_ADDR_VAR 0 9
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23501: LD_VAR 0 6
23505: PPUSH
23506: CALL_OW 257
23510: PUSH
23511: LD_INT 5
23513: EQUAL
23514: IFFALSE 23535
// points := [ 130 , 5 , 2 ] ;
23516: LD_ADDR_VAR 0 9
23520: PUSH
23521: LD_INT 130
23523: PUSH
23524: LD_INT 5
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23535: LD_VAR 0 6
23539: PPUSH
23540: CALL_OW 257
23544: PUSH
23545: LD_INT 8
23547: EQUAL
23548: IFFALSE 23569
// points := [ 35 , 35 , 30 ] ;
23550: LD_ADDR_VAR 0 9
23554: PUSH
23555: LD_INT 35
23557: PUSH
23558: LD_INT 35
23560: PUSH
23561: LD_INT 30
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23569: LD_VAR 0 6
23573: PPUSH
23574: CALL_OW 257
23578: PUSH
23579: LD_INT 9
23581: EQUAL
23582: IFFALSE 23603
// points := [ 20 , 55 , 40 ] ;
23584: LD_ADDR_VAR 0 9
23588: PUSH
23589: LD_INT 20
23591: PUSH
23592: LD_INT 55
23594: PUSH
23595: LD_INT 40
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23603: LD_VAR 0 6
23607: PPUSH
23608: CALL_OW 257
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 16
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: IN
23623: IFFALSE 23644
// points := [ 5 , 3 , 2 ] ;
23625: LD_ADDR_VAR 0 9
23629: PUSH
23630: LD_INT 5
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23644: LD_VAR 0 6
23648: PPUSH
23649: CALL_OW 257
23653: PUSH
23654: LD_INT 17
23656: EQUAL
23657: IFFALSE 23678
// points := [ 100 , 50 , 75 ] ;
23659: LD_ADDR_VAR 0 9
23663: PUSH
23664: LD_INT 100
23666: PUSH
23667: LD_INT 50
23669: PUSH
23670: LD_INT 75
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23678: LD_VAR 0 6
23682: PPUSH
23683: CALL_OW 257
23687: PUSH
23688: LD_INT 15
23690: EQUAL
23691: IFFALSE 23712
// points := [ 10 , 5 , 3 ] ;
23693: LD_ADDR_VAR 0 9
23697: PUSH
23698: LD_INT 10
23700: PUSH
23701: LD_INT 5
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23712: LD_VAR 0 6
23716: PPUSH
23717: CALL_OW 257
23721: PUSH
23722: LD_INT 14
23724: EQUAL
23725: IFFALSE 23746
// points := [ 10 , 0 , 0 ] ;
23727: LD_ADDR_VAR 0 9
23731: PUSH
23732: LD_INT 10
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23746: LD_VAR 0 6
23750: PPUSH
23751: CALL_OW 257
23755: PUSH
23756: LD_INT 11
23758: EQUAL
23759: IFFALSE 23780
// points := [ 30 , 10 , 5 ] ;
23761: LD_ADDR_VAR 0 9
23765: PUSH
23766: LD_INT 30
23768: PUSH
23769: LD_INT 10
23771: PUSH
23772: LD_INT 5
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23780: LD_VAR 0 1
23784: PPUSH
23785: LD_INT 5
23787: PPUSH
23788: CALL_OW 321
23792: PUSH
23793: LD_INT 2
23795: EQUAL
23796: IFFALSE 23813
// bpoints := bpoints * 1.8 ;
23798: LD_ADDR_VAR 0 10
23802: PUSH
23803: LD_VAR 0 10
23807: PUSH
23808: LD_REAL  1.80000000000000E+0000
23811: MUL
23812: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23813: LD_VAR 0 6
23817: PPUSH
23818: CALL_OW 257
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 4
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: IN
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_INT 51
23849: PPUSH
23850: CALL_OW 321
23854: PUSH
23855: LD_INT 2
23857: EQUAL
23858: AND
23859: IFFALSE 23876
// bpoints := bpoints * 1.2 ;
23861: LD_ADDR_VAR 0 10
23865: PUSH
23866: LD_VAR 0 10
23870: PUSH
23871: LD_REAL  1.20000000000000E+0000
23874: MUL
23875: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23876: LD_VAR 0 6
23880: PPUSH
23881: CALL_OW 257
23885: PUSH
23886: LD_INT 5
23888: PUSH
23889: LD_INT 7
23891: PUSH
23892: LD_INT 9
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: IN
23900: PUSH
23901: LD_VAR 0 1
23905: PPUSH
23906: LD_INT 52
23908: PPUSH
23909: CALL_OW 321
23913: PUSH
23914: LD_INT 2
23916: EQUAL
23917: AND
23918: IFFALSE 23935
// bpoints := bpoints * 1.5 ;
23920: LD_ADDR_VAR 0 10
23924: PUSH
23925: LD_VAR 0 10
23929: PUSH
23930: LD_REAL  1.50000000000000E+0000
23933: MUL
23934: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 66
23942: PPUSH
23943: CALL_OW 321
23947: PUSH
23948: LD_INT 2
23950: EQUAL
23951: IFFALSE 23968
// bpoints := bpoints * 1.1 ;
23953: LD_ADDR_VAR 0 10
23957: PUSH
23958: LD_VAR 0 10
23962: PUSH
23963: LD_REAL  1.10000000000000E+0000
23966: MUL
23967: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23968: LD_ADDR_VAR 0 10
23972: PUSH
23973: LD_VAR 0 10
23977: PUSH
23978: LD_VAR 0 6
23982: PPUSH
23983: LD_INT 1
23985: PPUSH
23986: CALL_OW 259
23990: PUSH
23991: LD_REAL  1.15000000000000E+0000
23994: MUL
23995: MUL
23996: ST_TO_ADDR
// end ; unit_vehicle :
23997: GO 24825
23999: LD_INT 2
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24813
24007: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24008: LD_VAR 0 6
24012: PPUSH
24013: CALL_OW 264
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 42
24023: PUSH
24024: LD_INT 24
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: IN
24032: IFFALSE 24053
// points := [ 25 , 5 , 3 ] ;
24034: LD_ADDR_VAR 0 9
24038: PUSH
24039: LD_INT 25
24041: PUSH
24042: LD_INT 5
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24053: LD_VAR 0 6
24057: PPUSH
24058: CALL_OW 264
24062: PUSH
24063: LD_INT 4
24065: PUSH
24066: LD_INT 43
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: IN
24077: IFFALSE 24098
// points := [ 40 , 15 , 5 ] ;
24079: LD_ADDR_VAR 0 9
24083: PUSH
24084: LD_INT 40
24086: PUSH
24087: LD_INT 15
24089: PUSH
24090: LD_INT 5
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24098: LD_VAR 0 6
24102: PPUSH
24103: CALL_OW 264
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 23
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24139
// points := [ 7 , 25 , 8 ] ;
24120: LD_ADDR_VAR 0 9
24124: PUSH
24125: LD_INT 7
24127: PUSH
24128: LD_INT 25
24130: PUSH
24131: LD_INT 8
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24139: LD_VAR 0 6
24143: PPUSH
24144: CALL_OW 264
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: LD_INT 27
24154: PUSH
24155: LD_INT 44
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: IN
24163: IFFALSE 24184
// points := [ 14 , 50 , 16 ] ;
24165: LD_ADDR_VAR 0 9
24169: PUSH
24170: LD_INT 14
24172: PUSH
24173: LD_INT 50
24175: PUSH
24176: LD_INT 16
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24184: LD_VAR 0 6
24188: PPUSH
24189: CALL_OW 264
24193: PUSH
24194: LD_INT 6
24196: PUSH
24197: LD_INT 46
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: IN
24204: IFFALSE 24225
// points := [ 32 , 120 , 70 ] ;
24206: LD_ADDR_VAR 0 9
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: LD_INT 120
24216: PUSH
24217: LD_INT 70
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24225: LD_VAR 0 6
24229: PPUSH
24230: CALL_OW 264
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 28
24240: PUSH
24241: LD_INT 45
24243: PUSH
24244: LD_INT 92
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: IN
24253: IFFALSE 24274
// points := [ 35 , 20 , 45 ] ;
24255: LD_ADDR_VAR 0 9
24259: PUSH
24260: LD_INT 35
24262: PUSH
24263: LD_INT 20
24265: PUSH
24266: LD_INT 45
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24274: LD_VAR 0 6
24278: PPUSH
24279: CALL_OW 264
24283: PUSH
24284: LD_INT 47
24286: PUSH
24287: EMPTY
24288: LIST
24289: IN
24290: IFFALSE 24311
// points := [ 67 , 45 , 75 ] ;
24292: LD_ADDR_VAR 0 9
24296: PUSH
24297: LD_INT 67
24299: PUSH
24300: LD_INT 45
24302: PUSH
24303: LD_INT 75
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 264
24320: PUSH
24321: LD_INT 26
24323: PUSH
24324: EMPTY
24325: LIST
24326: IN
24327: IFFALSE 24348
// points := [ 120 , 30 , 80 ] ;
24329: LD_ADDR_VAR 0 9
24333: PUSH
24334: LD_INT 120
24336: PUSH
24337: LD_INT 30
24339: PUSH
24340: LD_INT 80
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24348: LD_VAR 0 6
24352: PPUSH
24353: CALL_OW 264
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: EMPTY
24362: LIST
24363: IN
24364: IFFALSE 24385
// points := [ 40 , 1 , 1 ] ;
24366: LD_ADDR_VAR 0 9
24370: PUSH
24371: LD_INT 40
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24385: LD_VAR 0 6
24389: PPUSH
24390: CALL_OW 264
24394: PUSH
24395: LD_INT 29
24397: PUSH
24398: EMPTY
24399: LIST
24400: IN
24401: IFFALSE 24422
// points := [ 70 , 200 , 400 ] ;
24403: LD_ADDR_VAR 0 9
24407: PUSH
24408: LD_INT 70
24410: PUSH
24411: LD_INT 200
24413: PUSH
24414: LD_INT 400
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24422: LD_VAR 0 6
24426: PPUSH
24427: CALL_OW 264
24431: PUSH
24432: LD_INT 14
24434: PUSH
24435: LD_INT 53
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: IN
24442: IFFALSE 24463
// points := [ 40 , 10 , 20 ] ;
24444: LD_ADDR_VAR 0 9
24448: PUSH
24449: LD_INT 40
24451: PUSH
24452: LD_INT 10
24454: PUSH
24455: LD_INT 20
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24463: LD_VAR 0 6
24467: PPUSH
24468: CALL_OW 264
24472: PUSH
24473: LD_INT 9
24475: PUSH
24476: EMPTY
24477: LIST
24478: IN
24479: IFFALSE 24500
// points := [ 5 , 70 , 20 ] ;
24481: LD_ADDR_VAR 0 9
24485: PUSH
24486: LD_INT 5
24488: PUSH
24489: LD_INT 70
24491: PUSH
24492: LD_INT 20
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24500: LD_VAR 0 6
24504: PPUSH
24505: CALL_OW 264
24509: PUSH
24510: LD_INT 10
24512: PUSH
24513: EMPTY
24514: LIST
24515: IN
24516: IFFALSE 24537
// points := [ 35 , 110 , 70 ] ;
24518: LD_ADDR_VAR 0 9
24522: PUSH
24523: LD_INT 35
24525: PUSH
24526: LD_INT 110
24528: PUSH
24529: LD_INT 70
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24537: LD_VAR 0 6
24541: PPUSH
24542: CALL_OW 265
24546: PUSH
24547: LD_INT 25
24549: EQUAL
24550: IFFALSE 24571
// points := [ 80 , 65 , 100 ] ;
24552: LD_ADDR_VAR 0 9
24556: PUSH
24557: LD_INT 80
24559: PUSH
24560: LD_INT 65
24562: PUSH
24563: LD_INT 100
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24571: LD_VAR 0 6
24575: PPUSH
24576: CALL_OW 263
24580: PUSH
24581: LD_INT 1
24583: EQUAL
24584: IFFALSE 24619
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24586: LD_ADDR_VAR 0 10
24590: PUSH
24591: LD_VAR 0 10
24595: PUSH
24596: LD_VAR 0 6
24600: PPUSH
24601: CALL_OW 311
24605: PPUSH
24606: LD_INT 3
24608: PPUSH
24609: CALL_OW 259
24613: PUSH
24614: LD_INT 4
24616: MUL
24617: MUL
24618: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24619: LD_VAR 0 6
24623: PPUSH
24624: CALL_OW 263
24628: PUSH
24629: LD_INT 2
24631: EQUAL
24632: IFFALSE 24683
// begin j := IsControledBy ( i ) ;
24634: LD_ADDR_VAR 0 7
24638: PUSH
24639: LD_VAR 0 6
24643: PPUSH
24644: CALL_OW 312
24648: ST_TO_ADDR
// if j then
24649: LD_VAR 0 7
24653: IFFALSE 24683
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24655: LD_ADDR_VAR 0 10
24659: PUSH
24660: LD_VAR 0 10
24664: PUSH
24665: LD_VAR 0 7
24669: PPUSH
24670: LD_INT 3
24672: PPUSH
24673: CALL_OW 259
24677: PUSH
24678: LD_INT 3
24680: MUL
24681: MUL
24682: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24683: LD_VAR 0 6
24687: PPUSH
24688: CALL_OW 264
24692: PUSH
24693: LD_INT 5
24695: PUSH
24696: LD_INT 6
24698: PUSH
24699: LD_INT 46
24701: PUSH
24702: LD_INT 44
24704: PUSH
24705: LD_INT 47
24707: PUSH
24708: LD_INT 45
24710: PUSH
24711: LD_INT 28
24713: PUSH
24714: LD_INT 7
24716: PUSH
24717: LD_INT 27
24719: PUSH
24720: LD_INT 29
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: IN
24735: PUSH
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 52
24743: PPUSH
24744: CALL_OW 321
24748: PUSH
24749: LD_INT 2
24751: EQUAL
24752: AND
24753: IFFALSE 24770
// bpoints := bpoints * 1.2 ;
24755: LD_ADDR_VAR 0 10
24759: PUSH
24760: LD_VAR 0 10
24764: PUSH
24765: LD_REAL  1.20000000000000E+0000
24768: MUL
24769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24770: LD_VAR 0 6
24774: PPUSH
24775: CALL_OW 264
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 46
24785: PUSH
24786: LD_INT 47
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: IN
24794: IFFALSE 24811
// bpoints := bpoints * 1.2 ;
24796: LD_ADDR_VAR 0 10
24800: PUSH
24801: LD_VAR 0 10
24805: PUSH
24806: LD_REAL  1.20000000000000E+0000
24809: MUL
24810: ST_TO_ADDR
// end ; unit_building :
24811: GO 24825
24813: LD_INT 3
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24824
24821: POP
// ; end ;
24822: GO 24825
24824: POP
// for j = 1 to 3 do
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: DOUBLE
24831: LD_INT 1
24833: DEC
24834: ST_TO_ADDR
24835: LD_INT 3
24837: PUSH
24838: FOR_TO
24839: IFFALSE 24892
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24841: LD_ADDR_VAR 0 5
24845: PUSH
24846: LD_VAR 0 5
24850: PPUSH
24851: LD_VAR 0 7
24855: PPUSH
24856: LD_VAR 0 5
24860: PUSH
24861: LD_VAR 0 7
24865: ARRAY
24866: PUSH
24867: LD_VAR 0 9
24871: PUSH
24872: LD_VAR 0 7
24876: ARRAY
24877: PUSH
24878: LD_VAR 0 10
24882: MUL
24883: PLUS
24884: PPUSH
24885: CALL_OW 1
24889: ST_TO_ADDR
24890: GO 24838
24892: POP
24893: POP
// end ;
24894: GO 23373
24896: POP
24897: POP
// result := Replace ( result , 4 , tmp ) ;
24898: LD_ADDR_VAR 0 5
24902: PUSH
24903: LD_VAR 0 5
24907: PPUSH
24908: LD_INT 4
24910: PPUSH
24911: LD_VAR 0 8
24915: PPUSH
24916: CALL_OW 1
24920: ST_TO_ADDR
// end ;
24921: LD_VAR 0 5
24925: RET
// export function DangerAtRange ( unit , range ) ; begin
24926: LD_INT 0
24928: PPUSH
// if not unit then
24929: LD_VAR 0 1
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 24983
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 255
24952: PPUSH
24953: LD_VAR 0 1
24957: PPUSH
24958: CALL_OW 250
24962: PPUSH
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 251
24972: PPUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: CALL 23225 0 4
24982: ST_TO_ADDR
// end ;
24983: LD_VAR 0 3
24987: RET
// export function DangerInArea ( side , area ) ; begin
24988: LD_INT 0
24990: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24991: LD_ADDR_VAR 0 3
24995: PUSH
24996: LD_VAR 0 2
25000: PPUSH
25001: LD_INT 81
25003: PUSH
25004: LD_VAR 0 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PPUSH
25013: CALL_OW 70
25017: ST_TO_ADDR
// end ;
25018: LD_VAR 0 3
25022: RET
// export function IsExtension ( b ) ; begin
25023: LD_INT 0
25025: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_VAR 0 1
25035: PUSH
25036: LD_INT 23
25038: PUSH
25039: LD_INT 20
25041: PUSH
25042: LD_INT 22
25044: PUSH
25045: LD_INT 17
25047: PUSH
25048: LD_INT 24
25050: PUSH
25051: LD_INT 21
25053: PUSH
25054: LD_INT 19
25056: PUSH
25057: LD_INT 16
25059: PUSH
25060: LD_INT 25
25062: PUSH
25063: LD_INT 18
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: IN
25078: ST_TO_ADDR
// end ;
25079: LD_VAR 0 2
25083: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25084: LD_INT 0
25086: PPUSH
25087: PPUSH
25088: PPUSH
// result := [ ] ;
25089: LD_ADDR_VAR 0 4
25093: PUSH
25094: EMPTY
25095: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25096: LD_ADDR_VAR 0 5
25100: PUSH
25101: LD_VAR 0 2
25105: PPUSH
25106: LD_INT 21
25108: PUSH
25109: LD_INT 3
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 70
25120: ST_TO_ADDR
// if not tmp then
25121: LD_VAR 0 5
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25194
// if checkLink then
25130: LD_VAR 0 3
25134: IFFALSE 25184
// begin for i in tmp do
25136: LD_ADDR_VAR 0 6
25140: PUSH
25141: LD_VAR 0 5
25145: PUSH
25146: FOR_IN
25147: IFFALSE 25182
// if GetBase ( i ) <> base then
25149: LD_VAR 0 6
25153: PPUSH
25154: CALL_OW 274
25158: PUSH
25159: LD_VAR 0 1
25163: NONEQUAL
25164: IFFALSE 25180
// ComLinkToBase ( base , i ) ;
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_VAR 0 6
25175: PPUSH
25176: CALL_OW 169
25180: GO 25146
25182: POP
25183: POP
// end ; result := tmp ;
25184: LD_ADDR_VAR 0 4
25188: PUSH
25189: LD_VAR 0 5
25193: ST_TO_ADDR
// end ;
25194: LD_VAR 0 4
25198: RET
// export function ComComplete ( units , b ) ; var i ; begin
25199: LD_INT 0
25201: PPUSH
25202: PPUSH
// if not units then
25203: LD_VAR 0 1
25207: NOT
25208: IFFALSE 25212
// exit ;
25210: GO 25302
// for i in units do
25212: LD_ADDR_VAR 0 4
25216: PUSH
25217: LD_VAR 0 1
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25300
// if BuildingStatus ( b ) = bs_build then
25225: LD_VAR 0 2
25229: PPUSH
25230: CALL_OW 461
25234: PUSH
25235: LD_INT 1
25237: EQUAL
25238: IFFALSE 25298
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_STRING h
25247: PUSH
25248: LD_VAR 0 2
25252: PPUSH
25253: CALL_OW 250
25257: PUSH
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 251
25267: PUSH
25268: LD_VAR 0 2
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: PUSH
25291: EMPTY
25292: LIST
25293: PPUSH
25294: CALL_OW 446
25298: GO 25222
25300: POP
25301: POP
// end ;
25302: LD_VAR 0 3
25306: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25307: LD_INT 0
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25315: LD_VAR 0 1
25319: NOT
25320: PUSH
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 263
25330: PUSH
25331: LD_INT 2
25333: NONEQUAL
25334: OR
25335: IFFALSE 25339
// exit ;
25337: GO 25655
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25339: LD_ADDR_VAR 0 6
25343: PUSH
25344: LD_INT 22
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 255
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 30
25366: PUSH
25367: LD_INT 36
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 34
25376: PUSH
25377: LD_INT 31
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PPUSH
25393: CALL_OW 69
25397: ST_TO_ADDR
// if not tmp then
25398: LD_VAR 0 6
25402: NOT
25403: IFFALSE 25407
// exit ;
25405: GO 25655
// result := [ ] ;
25407: LD_ADDR_VAR 0 2
25411: PUSH
25412: EMPTY
25413: ST_TO_ADDR
// for i in tmp do
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_VAR 0 6
25423: PUSH
25424: FOR_IN
25425: IFFALSE 25496
// begin t := UnitsInside ( i ) ;
25427: LD_ADDR_VAR 0 4
25431: PUSH
25432: LD_VAR 0 3
25436: PPUSH
25437: CALL_OW 313
25441: ST_TO_ADDR
// if t then
25442: LD_VAR 0 4
25446: IFFALSE 25494
// for j in t do
25448: LD_ADDR_VAR 0 7
25452: PUSH
25453: LD_VAR 0 4
25457: PUSH
25458: FOR_IN
25459: IFFALSE 25492
// result := Replace ( result , result + 1 , j ) ;
25461: LD_ADDR_VAR 0 2
25465: PUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 2
25475: PUSH
25476: LD_INT 1
25478: PLUS
25479: PPUSH
25480: LD_VAR 0 7
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
25490: GO 25458
25492: POP
25493: POP
// end ;
25494: GO 25424
25496: POP
25497: POP
// if not result then
25498: LD_VAR 0 2
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25655
// mech := result [ 1 ] ;
25507: LD_ADDR_VAR 0 5
25511: PUSH
25512: LD_VAR 0 2
25516: PUSH
25517: LD_INT 1
25519: ARRAY
25520: ST_TO_ADDR
// if result > 1 then
25521: LD_VAR 0 2
25525: PUSH
25526: LD_INT 1
25528: GREATER
25529: IFFALSE 25641
// begin for i = 2 to result do
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: DOUBLE
25537: LD_INT 2
25539: DEC
25540: ST_TO_ADDR
25541: LD_VAR 0 2
25545: PUSH
25546: FOR_TO
25547: IFFALSE 25639
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25549: LD_ADDR_VAR 0 4
25553: PUSH
25554: LD_VAR 0 2
25558: PUSH
25559: LD_VAR 0 3
25563: ARRAY
25564: PPUSH
25565: LD_INT 3
25567: PPUSH
25568: CALL_OW 259
25572: PUSH
25573: LD_VAR 0 2
25577: PUSH
25578: LD_VAR 0 3
25582: ARRAY
25583: PPUSH
25584: CALL_OW 432
25588: MINUS
25589: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25590: LD_VAR 0 4
25594: PUSH
25595: LD_VAR 0 5
25599: PPUSH
25600: LD_INT 3
25602: PPUSH
25603: CALL_OW 259
25607: PUSH
25608: LD_VAR 0 5
25612: PPUSH
25613: CALL_OW 432
25617: MINUS
25618: GREATEREQUAL
25619: IFFALSE 25637
// mech := result [ i ] ;
25621: LD_ADDR_VAR 0 5
25625: PUSH
25626: LD_VAR 0 2
25630: PUSH
25631: LD_VAR 0 3
25635: ARRAY
25636: ST_TO_ADDR
// end ;
25637: GO 25546
25639: POP
25640: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 5
25650: PPUSH
25651: CALL_OW 135
// end ;
25655: LD_VAR 0 2
25659: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
// result := [ ] ;
25675: LD_ADDR_VAR 0 7
25679: PUSH
25680: EMPTY
25681: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 266
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: IN
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 27341
// if name then
25707: LD_VAR 0 3
25711: IFFALSE 25727
// SetBName ( base_dep , name ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 500
// base := GetBase ( base_dep ) ;
25727: LD_ADDR_VAR 0 15
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 274
25741: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25742: LD_ADDR_VAR 0 16
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 255
25756: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25757: LD_ADDR_VAR 0 17
25761: PUSH
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 248
25771: ST_TO_ADDR
// if sources then
25772: LD_VAR 0 5
25776: IFFALSE 25823
// for i = 1 to 3 do
25778: LD_ADDR_VAR 0 8
25782: PUSH
25783: DOUBLE
25784: LD_INT 1
25786: DEC
25787: ST_TO_ADDR
25788: LD_INT 3
25790: PUSH
25791: FOR_TO
25792: IFFALSE 25821
// AddResourceType ( base , i , sources [ i ] ) ;
25794: LD_VAR 0 15
25798: PPUSH
25799: LD_VAR 0 8
25803: PPUSH
25804: LD_VAR 0 5
25808: PUSH
25809: LD_VAR 0 8
25813: ARRAY
25814: PPUSH
25815: CALL_OW 276
25819: GO 25791
25821: POP
25822: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25823: LD_ADDR_VAR 0 18
25827: PUSH
25828: LD_VAR 0 15
25832: PPUSH
25833: LD_VAR 0 2
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL 25084 0 3
25845: ST_TO_ADDR
// InitHc ;
25846: CALL_OW 19
// InitUc ;
25850: CALL_OW 18
// uc_side := side ;
25854: LD_ADDR_OWVAR 20
25858: PUSH
25859: LD_VAR 0 16
25863: ST_TO_ADDR
// uc_nation := nation ;
25864: LD_ADDR_OWVAR 21
25868: PUSH
25869: LD_VAR 0 17
25873: ST_TO_ADDR
// if buildings then
25874: LD_VAR 0 18
25878: IFFALSE 27200
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25880: LD_ADDR_VAR 0 19
25884: PUSH
25885: LD_VAR 0 18
25889: PPUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 30
25895: PUSH
25896: LD_INT 29
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 30
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: PPUSH
25918: CALL_OW 72
25922: ST_TO_ADDR
// if tmp then
25923: LD_VAR 0 19
25927: IFFALSE 25975
// for i in tmp do
25929: LD_ADDR_VAR 0 8
25933: PUSH
25934: LD_VAR 0 19
25938: PUSH
25939: FOR_IN
25940: IFFALSE 25973
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25942: LD_VAR 0 8
25946: PPUSH
25947: CALL_OW 250
25951: PPUSH
25952: LD_VAR 0 8
25956: PPUSH
25957: CALL_OW 251
25961: PPUSH
25962: LD_VAR 0 16
25966: PPUSH
25967: CALL_OW 441
25971: GO 25939
25973: POP
25974: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25975: LD_VAR 0 18
25979: PPUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 32
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 30
25995: PUSH
25996: LD_INT 33
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: PPUSH
26008: CALL_OW 72
26012: IFFALSE 26100
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26014: LD_ADDR_VAR 0 8
26018: PUSH
26019: LD_VAR 0 18
26023: PPUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 32
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 30
26039: PUSH
26040: LD_INT 33
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 72
26056: PUSH
26057: FOR_IN
26058: IFFALSE 26098
// begin if not GetBWeapon ( i ) then
26060: LD_VAR 0 8
26064: PPUSH
26065: CALL_OW 269
26069: NOT
26070: IFFALSE 26096
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26072: LD_VAR 0 8
26076: PPUSH
26077: LD_VAR 0 8
26081: PPUSH
26082: LD_VAR 0 2
26086: PPUSH
26087: CALL 27346 0 2
26091: PPUSH
26092: CALL_OW 431
// end ;
26096: GO 26057
26098: POP
26099: POP
// end ; for i = 1 to personel do
26100: LD_ADDR_VAR 0 8
26104: PUSH
26105: DOUBLE
26106: LD_INT 1
26108: DEC
26109: ST_TO_ADDR
26110: LD_VAR 0 6
26114: PUSH
26115: FOR_TO
26116: IFFALSE 27180
// begin if i > 4 then
26118: LD_VAR 0 8
26122: PUSH
26123: LD_INT 4
26125: GREATER
26126: IFFALSE 26130
// break ;
26128: GO 27180
// case i of 1 :
26130: LD_VAR 0 8
26134: PUSH
26135: LD_INT 1
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26223
26143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26144: LD_ADDR_VAR 0 12
26148: PUSH
26149: LD_VAR 0 18
26153: PPUSH
26154: LD_INT 22
26156: PUSH
26157: LD_VAR 0 16
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 58
26168: PUSH
26169: EMPTY
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 30
26177: PUSH
26178: LD_INT 32
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 30
26187: PUSH
26188: LD_INT 4
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 30
26197: PUSH
26198: LD_INT 5
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: PPUSH
26216: CALL_OW 72
26220: ST_TO_ADDR
26221: GO 26445
26223: LD_INT 2
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26293
26231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_VAR 0 18
26241: PPUSH
26242: LD_INT 22
26244: PUSH
26245: LD_VAR 0 16
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 30
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 30
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PPUSH
26286: CALL_OW 72
26290: ST_TO_ADDR
26291: GO 26445
26293: LD_INT 3
26295: DOUBLE
26296: EQUAL
26297: IFTRUE 26301
26299: GO 26363
26301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26302: LD_ADDR_VAR 0 12
26306: PUSH
26307: LD_VAR 0 18
26311: PPUSH
26312: LD_INT 22
26314: PUSH
26315: LD_VAR 0 16
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 30
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 30
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PPUSH
26356: CALL_OW 72
26360: ST_TO_ADDR
26361: GO 26445
26363: LD_INT 4
26365: DOUBLE
26366: EQUAL
26367: IFTRUE 26371
26369: GO 26444
26371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26372: LD_ADDR_VAR 0 12
26376: PUSH
26377: LD_VAR 0 18
26381: PPUSH
26382: LD_INT 22
26384: PUSH
26385: LD_VAR 0 16
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 6
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 30
26409: PUSH
26410: LD_INT 7
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 30
26419: PUSH
26420: LD_INT 8
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 72
26441: ST_TO_ADDR
26442: GO 26445
26444: POP
// if i = 1 then
26445: LD_VAR 0 8
26449: PUSH
26450: LD_INT 1
26452: EQUAL
26453: IFFALSE 26564
// begin tmp := [ ] ;
26455: LD_ADDR_VAR 0 19
26459: PUSH
26460: EMPTY
26461: ST_TO_ADDR
// for j in f do
26462: LD_ADDR_VAR 0 9
26466: PUSH
26467: LD_VAR 0 12
26471: PUSH
26472: FOR_IN
26473: IFFALSE 26546
// if GetBType ( j ) = b_bunker then
26475: LD_VAR 0 9
26479: PPUSH
26480: CALL_OW 266
26484: PUSH
26485: LD_INT 32
26487: EQUAL
26488: IFFALSE 26515
// tmp := Insert ( tmp , 1 , j ) else
26490: LD_ADDR_VAR 0 19
26494: PUSH
26495: LD_VAR 0 19
26499: PPUSH
26500: LD_INT 1
26502: PPUSH
26503: LD_VAR 0 9
26507: PPUSH
26508: CALL_OW 2
26512: ST_TO_ADDR
26513: GO 26544
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26515: LD_ADDR_VAR 0 19
26519: PUSH
26520: LD_VAR 0 19
26524: PPUSH
26525: LD_VAR 0 19
26529: PUSH
26530: LD_INT 1
26532: PLUS
26533: PPUSH
26534: LD_VAR 0 9
26538: PPUSH
26539: CALL_OW 2
26543: ST_TO_ADDR
26544: GO 26472
26546: POP
26547: POP
// if tmp then
26548: LD_VAR 0 19
26552: IFFALSE 26564
// f := tmp ;
26554: LD_ADDR_VAR 0 12
26558: PUSH
26559: LD_VAR 0 19
26563: ST_TO_ADDR
// end ; x := personel [ i ] ;
26564: LD_ADDR_VAR 0 13
26568: PUSH
26569: LD_VAR 0 6
26573: PUSH
26574: LD_VAR 0 8
26578: ARRAY
26579: ST_TO_ADDR
// if x = - 1 then
26580: LD_VAR 0 13
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: EQUAL
26589: IFFALSE 26798
// begin for j in f do
26591: LD_ADDR_VAR 0 9
26595: PUSH
26596: LD_VAR 0 12
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26794
// repeat InitHc ;
26604: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26608: LD_VAR 0 9
26612: PPUSH
26613: CALL_OW 266
26617: PUSH
26618: LD_INT 5
26620: EQUAL
26621: IFFALSE 26691
// begin if UnitsInside ( j ) < 3 then
26623: LD_VAR 0 9
26627: PPUSH
26628: CALL_OW 313
26632: PUSH
26633: LD_INT 3
26635: LESS
26636: IFFALSE 26672
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26638: LD_INT 0
26640: PPUSH
26641: LD_INT 5
26643: PUSH
26644: LD_INT 8
26646: PUSH
26647: LD_INT 9
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: PUSH
26655: LD_VAR 0 17
26659: ARRAY
26660: PPUSH
26661: LD_VAR 0 4
26665: PPUSH
26666: CALL_OW 380
26670: GO 26689
// PrepareHuman ( false , i , skill ) ;
26672: LD_INT 0
26674: PPUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: LD_VAR 0 4
26684: PPUSH
26685: CALL_OW 380
// end else
26689: GO 26708
// PrepareHuman ( false , i , skill ) ;
26691: LD_INT 0
26693: PPUSH
26694: LD_VAR 0 8
26698: PPUSH
26699: LD_VAR 0 4
26703: PPUSH
26704: CALL_OW 380
// un := CreateHuman ;
26708: LD_ADDR_VAR 0 14
26712: PUSH
26713: CALL_OW 44
26717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26718: LD_ADDR_VAR 0 7
26722: PUSH
26723: LD_VAR 0 7
26727: PPUSH
26728: LD_INT 1
26730: PPUSH
26731: LD_VAR 0 14
26735: PPUSH
26736: CALL_OW 2
26740: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26741: LD_VAR 0 14
26745: PPUSH
26746: LD_VAR 0 9
26750: PPUSH
26751: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26755: LD_VAR 0 9
26759: PPUSH
26760: CALL_OW 313
26764: PUSH
26765: LD_INT 6
26767: EQUAL
26768: PUSH
26769: LD_VAR 0 9
26773: PPUSH
26774: CALL_OW 266
26778: PUSH
26779: LD_INT 32
26781: PUSH
26782: LD_INT 31
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: IN
26789: OR
26790: IFFALSE 26604
26792: GO 26601
26794: POP
26795: POP
// end else
26796: GO 27178
// for j = 1 to x do
26798: LD_ADDR_VAR 0 9
26802: PUSH
26803: DOUBLE
26804: LD_INT 1
26806: DEC
26807: ST_TO_ADDR
26808: LD_VAR 0 13
26812: PUSH
26813: FOR_TO
26814: IFFALSE 27176
// begin InitHc ;
26816: CALL_OW 19
// if not f then
26820: LD_VAR 0 12
26824: NOT
26825: IFFALSE 26914
// begin PrepareHuman ( false , i , skill ) ;
26827: LD_INT 0
26829: PPUSH
26830: LD_VAR 0 8
26834: PPUSH
26835: LD_VAR 0 4
26839: PPUSH
26840: CALL_OW 380
// un := CreateHuman ;
26844: LD_ADDR_VAR 0 14
26848: PUSH
26849: CALL_OW 44
26853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26854: LD_ADDR_VAR 0 7
26858: PUSH
26859: LD_VAR 0 7
26863: PPUSH
26864: LD_INT 1
26866: PPUSH
26867: LD_VAR 0 14
26871: PPUSH
26872: CALL_OW 2
26876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26877: LD_VAR 0 14
26881: PPUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 250
26891: PPUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 251
26901: PPUSH
26902: LD_INT 10
26904: PPUSH
26905: LD_INT 0
26907: PPUSH
26908: CALL_OW 50
// continue ;
26912: GO 26813
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26914: LD_VAR 0 12
26918: PUSH
26919: LD_INT 1
26921: ARRAY
26922: PPUSH
26923: CALL_OW 313
26927: PUSH
26928: LD_VAR 0 12
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: PPUSH
26937: CALL_OW 266
26941: PUSH
26942: LD_INT 32
26944: PUSH
26945: LD_INT 31
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: IN
26952: AND
26953: PUSH
26954: LD_VAR 0 12
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: CALL_OW 313
26967: PUSH
26968: LD_INT 6
26970: EQUAL
26971: OR
26972: IFFALSE 26992
// f := Delete ( f , 1 ) ;
26974: LD_ADDR_VAR 0 12
26978: PUSH
26979: LD_VAR 0 12
26983: PPUSH
26984: LD_INT 1
26986: PPUSH
26987: CALL_OW 3
26991: ST_TO_ADDR
// if not f then
26992: LD_VAR 0 12
26996: NOT
26997: IFFALSE 27015
// begin x := x + 2 ;
26999: LD_ADDR_VAR 0 13
27003: PUSH
27004: LD_VAR 0 13
27008: PUSH
27009: LD_INT 2
27011: PLUS
27012: ST_TO_ADDR
// continue ;
27013: GO 26813
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27015: LD_VAR 0 12
27019: PUSH
27020: LD_INT 1
27022: ARRAY
27023: PPUSH
27024: CALL_OW 266
27028: PUSH
27029: LD_INT 5
27031: EQUAL
27032: IFFALSE 27106
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27034: LD_VAR 0 12
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: CALL_OW 313
27047: PUSH
27048: LD_INT 3
27050: LESS
27051: IFFALSE 27087
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27053: LD_INT 0
27055: PPUSH
27056: LD_INT 5
27058: PUSH
27059: LD_INT 8
27061: PUSH
27062: LD_INT 9
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: PUSH
27070: LD_VAR 0 17
27074: ARRAY
27075: PPUSH
27076: LD_VAR 0 4
27080: PPUSH
27081: CALL_OW 380
27085: GO 27104
// PrepareHuman ( false , i , skill ) ;
27087: LD_INT 0
27089: PPUSH
27090: LD_VAR 0 8
27094: PPUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: CALL_OW 380
// end else
27104: GO 27123
// PrepareHuman ( false , i , skill ) ;
27106: LD_INT 0
27108: PPUSH
27109: LD_VAR 0 8
27113: PPUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: CALL_OW 380
// un := CreateHuman ;
27123: LD_ADDR_VAR 0 14
27127: PUSH
27128: CALL_OW 44
27132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27133: LD_ADDR_VAR 0 7
27137: PUSH
27138: LD_VAR 0 7
27142: PPUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_VAR 0 14
27150: PPUSH
27151: CALL_OW 2
27155: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27156: LD_VAR 0 14
27160: PPUSH
27161: LD_VAR 0 12
27165: PUSH
27166: LD_INT 1
27168: ARRAY
27169: PPUSH
27170: CALL_OW 52
// end ;
27174: GO 26813
27176: POP
27177: POP
// end ;
27178: GO 26115
27180: POP
27181: POP
// result := result ^ buildings ;
27182: LD_ADDR_VAR 0 7
27186: PUSH
27187: LD_VAR 0 7
27191: PUSH
27192: LD_VAR 0 18
27196: ADD
27197: ST_TO_ADDR
// end else
27198: GO 27341
// begin for i = 1 to personel do
27200: LD_ADDR_VAR 0 8
27204: PUSH
27205: DOUBLE
27206: LD_INT 1
27208: DEC
27209: ST_TO_ADDR
27210: LD_VAR 0 6
27214: PUSH
27215: FOR_TO
27216: IFFALSE 27339
// begin if i > 4 then
27218: LD_VAR 0 8
27222: PUSH
27223: LD_INT 4
27225: GREATER
27226: IFFALSE 27230
// break ;
27228: GO 27339
// x := personel [ i ] ;
27230: LD_ADDR_VAR 0 13
27234: PUSH
27235: LD_VAR 0 6
27239: PUSH
27240: LD_VAR 0 8
27244: ARRAY
27245: ST_TO_ADDR
// if x = - 1 then
27246: LD_VAR 0 13
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: EQUAL
27255: IFFALSE 27259
// continue ;
27257: GO 27215
// PrepareHuman ( false , i , skill ) ;
27259: LD_INT 0
27261: PPUSH
27262: LD_VAR 0 8
27266: PPUSH
27267: LD_VAR 0 4
27271: PPUSH
27272: CALL_OW 380
// un := CreateHuman ;
27276: LD_ADDR_VAR 0 14
27280: PUSH
27281: CALL_OW 44
27285: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27286: LD_VAR 0 14
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 250
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 251
27310: PPUSH
27311: LD_INT 10
27313: PPUSH
27314: LD_INT 0
27316: PPUSH
27317: CALL_OW 50
// result := result ^ un ;
27321: LD_ADDR_VAR 0 7
27325: PUSH
27326: LD_VAR 0 7
27330: PUSH
27331: LD_VAR 0 14
27335: ADD
27336: ST_TO_ADDR
// end ;
27337: GO 27215
27339: POP
27340: POP
// end ; end ;
27341: LD_VAR 0 7
27345: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
// result := false ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_INT 0
27371: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27372: LD_VAR 0 1
27376: NOT
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 266
27387: PUSH
27388: LD_INT 32
27390: PUSH
27391: LD_INT 33
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: IN
27398: NOT
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 28513
// nat := GetNation ( tower ) ;
27404: LD_ADDR_VAR 0 12
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 248
27418: ST_TO_ADDR
// side := GetSide ( tower ) ;
27419: LD_ADDR_VAR 0 16
27423: PUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 255
27433: ST_TO_ADDR
// x := GetX ( tower ) ;
27434: LD_ADDR_VAR 0 10
27438: PUSH
27439: LD_VAR 0 1
27443: PPUSH
27444: CALL_OW 250
27448: ST_TO_ADDR
// y := GetY ( tower ) ;
27449: LD_ADDR_VAR 0 11
27453: PUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 251
27463: ST_TO_ADDR
// if not x or not y then
27464: LD_VAR 0 10
27468: NOT
27469: PUSH
27470: LD_VAR 0 11
27474: NOT
27475: OR
27476: IFFALSE 27480
// exit ;
27478: GO 28513
// weapon := 0 ;
27480: LD_ADDR_VAR 0 18
27484: PUSH
27485: LD_INT 0
27487: ST_TO_ADDR
// fac_list := [ ] ;
27488: LD_ADDR_VAR 0 17
27492: PUSH
27493: EMPTY
27494: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27495: LD_ADDR_VAR 0 6
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 274
27509: PPUSH
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_INT 0
27517: PPUSH
27518: CALL 25084 0 3
27522: PPUSH
27523: LD_INT 30
27525: PUSH
27526: LD_INT 3
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 72
27537: ST_TO_ADDR
// if not factories then
27538: LD_VAR 0 6
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 28513
// for i in factories do
27547: LD_ADDR_VAR 0 8
27551: PUSH
27552: LD_VAR 0 6
27556: PUSH
27557: FOR_IN
27558: IFFALSE 27583
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27560: LD_ADDR_VAR 0 17
27564: PUSH
27565: LD_VAR 0 17
27569: PUSH
27570: LD_VAR 0 8
27574: PPUSH
27575: CALL_OW 478
27579: UNION
27580: ST_TO_ADDR
27581: GO 27557
27583: POP
27584: POP
// if not fac_list then
27585: LD_VAR 0 17
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 28513
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27594: LD_ADDR_VAR 0 5
27598: PUSH
27599: LD_INT 4
27601: PUSH
27602: LD_INT 5
27604: PUSH
27605: LD_INT 9
27607: PUSH
27608: LD_INT 10
27610: PUSH
27611: LD_INT 6
27613: PUSH
27614: LD_INT 7
27616: PUSH
27617: LD_INT 11
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 27
27631: PUSH
27632: LD_INT 28
27634: PUSH
27635: LD_INT 26
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 43
27649: PUSH
27650: LD_INT 44
27652: PUSH
27653: LD_INT 46
27655: PUSH
27656: LD_INT 45
27658: PUSH
27659: LD_INT 47
27661: PUSH
27662: LD_INT 49
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: PUSH
27678: LD_VAR 0 12
27682: ARRAY
27683: ST_TO_ADDR
// list := list isect fac_list ;
27684: LD_ADDR_VAR 0 5
27688: PUSH
27689: LD_VAR 0 5
27693: PUSH
27694: LD_VAR 0 17
27698: ISECT
27699: ST_TO_ADDR
// if not list then
27700: LD_VAR 0 5
27704: NOT
27705: IFFALSE 27709
// exit ;
27707: GO 28513
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27709: LD_VAR 0 12
27713: PUSH
27714: LD_INT 3
27716: EQUAL
27717: PUSH
27718: LD_INT 49
27720: PUSH
27721: LD_VAR 0 5
27725: IN
27726: AND
27727: PUSH
27728: LD_INT 31
27730: PPUSH
27731: LD_VAR 0 16
27735: PPUSH
27736: CALL_OW 321
27740: PUSH
27741: LD_INT 2
27743: EQUAL
27744: AND
27745: IFFALSE 27805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27747: LD_INT 22
27749: PUSH
27750: LD_VAR 0 16
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 35
27761: PUSH
27762: LD_INT 49
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 91
27771: PUSH
27772: LD_VAR 0 1
27776: PUSH
27777: LD_INT 10
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: NOT
27795: IFFALSE 27805
// weapon := ru_time_lapser ;
27797: LD_ADDR_VAR 0 18
27801: PUSH
27802: LD_INT 49
27804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27805: LD_VAR 0 12
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: IN
27820: PUSH
27821: LD_INT 11
27823: PUSH
27824: LD_VAR 0 5
27828: IN
27829: PUSH
27830: LD_INT 30
27832: PUSH
27833: LD_VAR 0 5
27837: IN
27838: OR
27839: AND
27840: PUSH
27841: LD_INT 6
27843: PPUSH
27844: LD_VAR 0 16
27848: PPUSH
27849: CALL_OW 321
27853: PUSH
27854: LD_INT 2
27856: EQUAL
27857: AND
27858: IFFALSE 28023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27860: LD_INT 22
27862: PUSH
27863: LD_VAR 0 16
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 35
27877: PUSH
27878: LD_INT 11
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 35
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 91
27902: PUSH
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 18
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: NOT
27926: PUSH
27927: LD_INT 22
27929: PUSH
27930: LD_VAR 0 16
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: LD_INT 30
27944: PUSH
27945: LD_INT 32
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 33
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 91
27969: PUSH
27970: LD_VAR 0 1
27974: PUSH
27975: LD_INT 12
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: PPUSH
27991: CALL_OW 69
27995: PUSH
27996: LD_INT 2
27998: GREATER
27999: AND
28000: IFFALSE 28023
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28002: LD_ADDR_VAR 0 18
28006: PUSH
28007: LD_INT 11
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_VAR 0 12
28021: ARRAY
28022: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28023: LD_VAR 0 18
28027: NOT
28028: PUSH
28029: LD_INT 40
28031: PPUSH
28032: LD_VAR 0 16
28036: PPUSH
28037: CALL_OW 321
28041: PUSH
28042: LD_INT 2
28044: EQUAL
28045: AND
28046: PUSH
28047: LD_INT 7
28049: PUSH
28050: LD_VAR 0 5
28054: IN
28055: PUSH
28056: LD_INT 28
28058: PUSH
28059: LD_VAR 0 5
28063: IN
28064: OR
28065: PUSH
28066: LD_INT 45
28068: PUSH
28069: LD_VAR 0 5
28073: IN
28074: OR
28075: AND
28076: IFFALSE 28330
// begin hex := GetHexInfo ( x , y ) ;
28078: LD_ADDR_VAR 0 4
28082: PUSH
28083: LD_VAR 0 10
28087: PPUSH
28088: LD_VAR 0 11
28092: PPUSH
28093: CALL_OW 546
28097: ST_TO_ADDR
// if hex [ 1 ] then
28098: LD_VAR 0 4
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: IFFALSE 28110
// exit ;
28108: GO 28513
// height := hex [ 2 ] ;
28110: LD_ADDR_VAR 0 15
28114: PUSH
28115: LD_VAR 0 4
28119: PUSH
28120: LD_INT 2
28122: ARRAY
28123: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28124: LD_ADDR_VAR 0 14
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 3
28137: PUSH
28138: LD_INT 5
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// for i in tmp do
28147: LD_ADDR_VAR 0 8
28151: PUSH
28152: LD_VAR 0 14
28156: PUSH
28157: FOR_IN
28158: IFFALSE 28328
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28160: LD_ADDR_VAR 0 9
28164: PUSH
28165: LD_VAR 0 10
28169: PPUSH
28170: LD_VAR 0 8
28174: PPUSH
28175: LD_INT 5
28177: PPUSH
28178: CALL_OW 272
28182: PUSH
28183: LD_VAR 0 11
28187: PPUSH
28188: LD_VAR 0 8
28192: PPUSH
28193: LD_INT 5
28195: PPUSH
28196: CALL_OW 273
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28205: LD_VAR 0 9
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PPUSH
28214: LD_VAR 0 9
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: CALL_OW 488
28227: IFFALSE 28326
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28229: LD_ADDR_VAR 0 4
28233: PUSH
28234: LD_VAR 0 9
28238: PUSH
28239: LD_INT 1
28241: ARRAY
28242: PPUSH
28243: LD_VAR 0 9
28247: PUSH
28248: LD_INT 2
28250: ARRAY
28251: PPUSH
28252: CALL_OW 546
28256: ST_TO_ADDR
// if hex [ 1 ] then
28257: LD_VAR 0 4
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: IFFALSE 28269
// continue ;
28267: GO 28157
// h := hex [ 2 ] ;
28269: LD_ADDR_VAR 0 13
28273: PUSH
28274: LD_VAR 0 4
28278: PUSH
28279: LD_INT 2
28281: ARRAY
28282: ST_TO_ADDR
// if h + 7 < height then
28283: LD_VAR 0 13
28287: PUSH
28288: LD_INT 7
28290: PLUS
28291: PUSH
28292: LD_VAR 0 15
28296: LESS
28297: IFFALSE 28326
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28299: LD_ADDR_VAR 0 18
28303: PUSH
28304: LD_INT 7
28306: PUSH
28307: LD_INT 28
28309: PUSH
28310: LD_INT 45
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: PUSH
28318: LD_VAR 0 12
28322: ARRAY
28323: ST_TO_ADDR
// break ;
28324: GO 28328
// end ; end ; end ;
28326: GO 28157
28328: POP
28329: POP
// end ; if not weapon then
28330: LD_VAR 0 18
28334: NOT
28335: IFFALSE 28395
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28337: LD_ADDR_VAR 0 5
28341: PUSH
28342: LD_VAR 0 5
28346: PUSH
28347: LD_INT 11
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 49
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: DIFF
28361: ST_TO_ADDR
// if not list then
28362: LD_VAR 0 5
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28513
// weapon := list [ rand ( 1 , list ) ] ;
28371: LD_ADDR_VAR 0 18
28375: PUSH
28376: LD_VAR 0 5
28380: PUSH
28381: LD_INT 1
28383: PPUSH
28384: LD_VAR 0 5
28388: PPUSH
28389: CALL_OW 12
28393: ARRAY
28394: ST_TO_ADDR
// end ; if weapon then
28395: LD_VAR 0 18
28399: IFFALSE 28513
// begin tmp := CostOfWeapon ( weapon ) ;
28401: LD_ADDR_VAR 0 14
28405: PUSH
28406: LD_VAR 0 18
28410: PPUSH
28411: CALL_OW 451
28415: ST_TO_ADDR
// j := GetBase ( tower ) ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 274
28430: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28431: LD_VAR 0 9
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 275
28443: PUSH
28444: LD_VAR 0 14
28448: PUSH
28449: LD_INT 1
28451: ARRAY
28452: GREATEREQUAL
28453: PUSH
28454: LD_VAR 0 9
28458: PPUSH
28459: LD_INT 2
28461: PPUSH
28462: CALL_OW 275
28466: PUSH
28467: LD_VAR 0 14
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: GREATEREQUAL
28476: AND
28477: PUSH
28478: LD_VAR 0 9
28482: PPUSH
28483: LD_INT 3
28485: PPUSH
28486: CALL_OW 275
28490: PUSH
28491: LD_VAR 0 14
28495: PUSH
28496: LD_INT 3
28498: ARRAY
28499: GREATEREQUAL
28500: AND
28501: IFFALSE 28513
// result := weapon ;
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_VAR 0 18
28512: ST_TO_ADDR
// end ; end ;
28513: LD_VAR 0 3
28517: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28518: LD_INT 0
28520: PPUSH
28521: PPUSH
// result := true ;
28522: LD_ADDR_VAR 0 3
28526: PUSH
28527: LD_INT 1
28529: ST_TO_ADDR
// if array1 = array2 then
28530: LD_VAR 0 1
28534: PUSH
28535: LD_VAR 0 2
28539: EQUAL
28540: IFFALSE 28600
// begin for i = 1 to array1 do
28542: LD_ADDR_VAR 0 4
28546: PUSH
28547: DOUBLE
28548: LD_INT 1
28550: DEC
28551: ST_TO_ADDR
28552: LD_VAR 0 1
28556: PUSH
28557: FOR_TO
28558: IFFALSE 28596
// if array1 [ i ] <> array2 [ i ] then
28560: LD_VAR 0 1
28564: PUSH
28565: LD_VAR 0 4
28569: ARRAY
28570: PUSH
28571: LD_VAR 0 2
28575: PUSH
28576: LD_VAR 0 4
28580: ARRAY
28581: NONEQUAL
28582: IFFALSE 28594
// begin result := false ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// break ;
28592: GO 28596
// end ;
28594: GO 28557
28596: POP
28597: POP
// end else
28598: GO 28608
// result := false ;
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 0
28607: ST_TO_ADDR
// end ;
28608: LD_VAR 0 3
28612: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
// if not array1 or not array2 then
28617: LD_VAR 0 1
28621: NOT
28622: PUSH
28623: LD_VAR 0 2
28627: NOT
28628: OR
28629: IFFALSE 28633
// exit ;
28631: GO 28697
// result := true ;
28633: LD_ADDR_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: ST_TO_ADDR
// for i = 1 to array1 do
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: DOUBLE
28647: LD_INT 1
28649: DEC
28650: ST_TO_ADDR
28651: LD_VAR 0 1
28655: PUSH
28656: FOR_TO
28657: IFFALSE 28695
// if array1 [ i ] <> array2 [ i ] then
28659: LD_VAR 0 1
28663: PUSH
28664: LD_VAR 0 4
28668: ARRAY
28669: PUSH
28670: LD_VAR 0 2
28674: PUSH
28675: LD_VAR 0 4
28679: ARRAY
28680: NONEQUAL
28681: IFFALSE 28693
// begin result := false ;
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 0
28690: ST_TO_ADDR
// break ;
28691: GO 28695
// end ;
28693: GO 28656
28695: POP
28696: POP
// end ;
28697: LD_VAR 0 3
28701: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
28706: PPUSH
// pom := GetBase ( fac ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 274
28721: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_VAR 0 2
28731: PUSH
28732: LD_INT 1
28734: ARRAY
28735: PPUSH
28736: LD_VAR 0 2
28740: PUSH
28741: LD_INT 2
28743: ARRAY
28744: PPUSH
28745: LD_VAR 0 2
28749: PUSH
28750: LD_INT 3
28752: ARRAY
28753: PPUSH
28754: LD_VAR 0 2
28758: PUSH
28759: LD_INT 4
28761: ARRAY
28762: PPUSH
28763: CALL_OW 449
28767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28768: LD_ADDR_VAR 0 3
28772: PUSH
28773: LD_VAR 0 5
28777: PPUSH
28778: LD_INT 1
28780: PPUSH
28781: CALL_OW 275
28785: PUSH
28786: LD_VAR 0 4
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: GREATEREQUAL
28795: PUSH
28796: LD_VAR 0 5
28800: PPUSH
28801: LD_INT 2
28803: PPUSH
28804: CALL_OW 275
28808: PUSH
28809: LD_VAR 0 4
28813: PUSH
28814: LD_INT 2
28816: ARRAY
28817: GREATEREQUAL
28818: AND
28819: PUSH
28820: LD_VAR 0 5
28824: PPUSH
28825: LD_INT 3
28827: PPUSH
28828: CALL_OW 275
28832: PUSH
28833: LD_VAR 0 4
28837: PUSH
28838: LD_INT 3
28840: ARRAY
28841: GREATEREQUAL
28842: AND
28843: ST_TO_ADDR
// end ;
28844: LD_VAR 0 3
28848: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28849: LD_INT 0
28851: PPUSH
28852: PPUSH
28853: PPUSH
28854: PPUSH
// pom := GetBase ( building ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 274
28869: ST_TO_ADDR
// if not pom then
28870: LD_VAR 0 3
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 29049
// btype := GetBType ( building ) ;
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: LD_VAR 0 1
28888: PPUSH
28889: CALL_OW 266
28893: ST_TO_ADDR
// if btype = b_armoury then
28894: LD_VAR 0 5
28898: PUSH
28899: LD_INT 4
28901: EQUAL
28902: IFFALSE 28912
// btype := b_barracks ;
28904: LD_ADDR_VAR 0 5
28908: PUSH
28909: LD_INT 5
28911: ST_TO_ADDR
// if btype = b_depot then
28912: LD_VAR 0 5
28916: PUSH
28917: LD_INT 0
28919: EQUAL
28920: IFFALSE 28930
// btype := b_warehouse ;
28922: LD_ADDR_VAR 0 5
28926: PUSH
28927: LD_INT 1
28929: ST_TO_ADDR
// if btype = b_workshop then
28930: LD_VAR 0 5
28934: PUSH
28935: LD_INT 2
28937: EQUAL
28938: IFFALSE 28948
// btype := b_factory ;
28940: LD_ADDR_VAR 0 5
28944: PUSH
28945: LD_INT 3
28947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28948: LD_ADDR_VAR 0 4
28952: PUSH
28953: LD_VAR 0 5
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 248
28967: PPUSH
28968: CALL_OW 450
28972: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28973: LD_ADDR_VAR 0 2
28977: PUSH
28978: LD_VAR 0 3
28982: PPUSH
28983: LD_INT 1
28985: PPUSH
28986: CALL_OW 275
28990: PUSH
28991: LD_VAR 0 4
28995: PUSH
28996: LD_INT 1
28998: ARRAY
28999: GREATEREQUAL
29000: PUSH
29001: LD_VAR 0 3
29005: PPUSH
29006: LD_INT 2
29008: PPUSH
29009: CALL_OW 275
29013: PUSH
29014: LD_VAR 0 4
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: GREATEREQUAL
29023: AND
29024: PUSH
29025: LD_VAR 0 3
29029: PPUSH
29030: LD_INT 3
29032: PPUSH
29033: CALL_OW 275
29037: PUSH
29038: LD_VAR 0 4
29042: PUSH
29043: LD_INT 3
29045: ARRAY
29046: GREATEREQUAL
29047: AND
29048: ST_TO_ADDR
// end ;
29049: LD_VAR 0 2
29053: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29054: LD_INT 0
29056: PPUSH
29057: PPUSH
29058: PPUSH
// pom := GetBase ( building ) ;
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 274
29073: ST_TO_ADDR
// if not pom then
29074: LD_VAR 0 4
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29184
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: LD_VAR 0 1
29097: PPUSH
29098: CALL_OW 248
29102: PPUSH
29103: CALL_OW 450
29107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29108: LD_ADDR_VAR 0 3
29112: PUSH
29113: LD_VAR 0 4
29117: PPUSH
29118: LD_INT 1
29120: PPUSH
29121: CALL_OW 275
29125: PUSH
29126: LD_VAR 0 5
29130: PUSH
29131: LD_INT 1
29133: ARRAY
29134: GREATEREQUAL
29135: PUSH
29136: LD_VAR 0 4
29140: PPUSH
29141: LD_INT 2
29143: PPUSH
29144: CALL_OW 275
29148: PUSH
29149: LD_VAR 0 5
29153: PUSH
29154: LD_INT 2
29156: ARRAY
29157: GREATEREQUAL
29158: AND
29159: PUSH
29160: LD_VAR 0 4
29164: PPUSH
29165: LD_INT 3
29167: PPUSH
29168: CALL_OW 275
29172: PUSH
29173: LD_VAR 0 5
29177: PUSH
29178: LD_INT 3
29180: ARRAY
29181: GREATEREQUAL
29182: AND
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 3
29188: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
29199: PPUSH
29200: PPUSH
29201: PPUSH
// result := false ;
29202: LD_ADDR_VAR 0 8
29206: PUSH
29207: LD_INT 0
29209: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29210: LD_VAR 0 5
29214: NOT
29215: PUSH
29216: LD_VAR 0 1
29220: NOT
29221: OR
29222: PUSH
29223: LD_VAR 0 2
29227: NOT
29228: OR
29229: PUSH
29230: LD_VAR 0 3
29234: NOT
29235: OR
29236: IFFALSE 29240
// exit ;
29238: GO 30054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29240: LD_ADDR_VAR 0 14
29244: PUSH
29245: LD_VAR 0 1
29249: PPUSH
29250: LD_VAR 0 2
29254: PPUSH
29255: LD_VAR 0 3
29259: PPUSH
29260: LD_VAR 0 4
29264: PPUSH
29265: LD_VAR 0 5
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: CALL_OW 248
29278: PPUSH
29279: LD_INT 0
29281: PPUSH
29282: CALL 31307 0 6
29286: ST_TO_ADDR
// if not hexes then
29287: LD_VAR 0 14
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 30054
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29296: LD_ADDR_VAR 0 17
29300: PUSH
29301: LD_VAR 0 5
29305: PPUSH
29306: LD_INT 22
29308: PUSH
29309: LD_VAR 0 13
29313: PPUSH
29314: CALL_OW 255
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 30
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 30
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PPUSH
29355: CALL_OW 72
29359: ST_TO_ADDR
// for i = 1 to hexes do
29360: LD_ADDR_VAR 0 9
29364: PUSH
29365: DOUBLE
29366: LD_INT 1
29368: DEC
29369: ST_TO_ADDR
29370: LD_VAR 0 14
29374: PUSH
29375: FOR_TO
29376: IFFALSE 30052
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29378: LD_ADDR_VAR 0 13
29382: PUSH
29383: LD_VAR 0 14
29387: PUSH
29388: LD_VAR 0 9
29392: ARRAY
29393: PUSH
29394: LD_INT 1
29396: ARRAY
29397: PPUSH
29398: LD_VAR 0 14
29402: PUSH
29403: LD_VAR 0 9
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PPUSH
29413: CALL_OW 428
29417: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29418: LD_VAR 0 14
29422: PUSH
29423: LD_VAR 0 9
29427: ARRAY
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 14
29437: PUSH
29438: LD_VAR 0 9
29442: ARRAY
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: PPUSH
29448: CALL_OW 351
29452: PUSH
29453: LD_VAR 0 14
29457: PUSH
29458: LD_VAR 0 9
29462: ARRAY
29463: PUSH
29464: LD_INT 1
29466: ARRAY
29467: PPUSH
29468: LD_VAR 0 14
29472: PUSH
29473: LD_VAR 0 9
29477: ARRAY
29478: PUSH
29479: LD_INT 2
29481: ARRAY
29482: PPUSH
29483: CALL_OW 488
29487: NOT
29488: OR
29489: PUSH
29490: LD_VAR 0 13
29494: PPUSH
29495: CALL_OW 247
29499: PUSH
29500: LD_INT 3
29502: EQUAL
29503: OR
29504: IFFALSE 29510
// exit ;
29506: POP
29507: POP
29508: GO 30054
// if not tmp then
29510: LD_VAR 0 13
29514: NOT
29515: IFFALSE 29519
// continue ;
29517: GO 29375
// result := true ;
29519: LD_ADDR_VAR 0 8
29523: PUSH
29524: LD_INT 1
29526: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29527: LD_VAR 0 6
29531: PUSH
29532: LD_VAR 0 13
29536: PPUSH
29537: CALL_OW 247
29541: PUSH
29542: LD_INT 2
29544: EQUAL
29545: AND
29546: PUSH
29547: LD_VAR 0 13
29551: PPUSH
29552: CALL_OW 263
29556: PUSH
29557: LD_INT 1
29559: EQUAL
29560: AND
29561: IFFALSE 29725
// begin if IsDrivenBy ( tmp ) then
29563: LD_VAR 0 13
29567: PPUSH
29568: CALL_OW 311
29572: IFFALSE 29576
// continue ;
29574: GO 29375
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29576: LD_VAR 0 6
29580: PPUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 60
29586: PUSH
29587: EMPTY
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 55
29599: PUSH
29600: EMPTY
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 72
29615: IFFALSE 29723
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29617: LD_ADDR_VAR 0 18
29621: PUSH
29622: LD_VAR 0 6
29626: PPUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 60
29632: PUSH
29633: EMPTY
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 55
29645: PUSH
29646: EMPTY
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PPUSH
29657: CALL_OW 72
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: ST_TO_ADDR
// if IsInUnit ( driver ) then
29666: LD_VAR 0 18
29670: PPUSH
29671: CALL_OW 310
29675: IFFALSE 29686
// ComExit ( driver ) ;
29677: LD_VAR 0 18
29681: PPUSH
29682: CALL 55099 0 1
// AddComEnterUnit ( driver , tmp ) ;
29686: LD_VAR 0 18
29690: PPUSH
29691: LD_VAR 0 13
29695: PPUSH
29696: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29700: LD_VAR 0 18
29704: PPUSH
29705: LD_VAR 0 7
29709: PPUSH
29710: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29714: LD_VAR 0 18
29718: PPUSH
29719: CALL_OW 181
// end ; continue ;
29723: GO 29375
// end ; if not cleaners or not tmp in cleaners then
29725: LD_VAR 0 6
29729: NOT
29730: PUSH
29731: LD_VAR 0 13
29735: PUSH
29736: LD_VAR 0 6
29740: IN
29741: NOT
29742: OR
29743: IFFALSE 30050
// begin if dep then
29745: LD_VAR 0 17
29749: IFFALSE 29885
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29751: LD_ADDR_VAR 0 16
29755: PUSH
29756: LD_VAR 0 17
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: PPUSH
29765: CALL_OW 250
29769: PPUSH
29770: LD_VAR 0 17
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: PPUSH
29779: CALL_OW 254
29783: PPUSH
29784: LD_INT 5
29786: PPUSH
29787: CALL_OW 272
29791: PUSH
29792: LD_VAR 0 17
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PPUSH
29801: CALL_OW 251
29805: PPUSH
29806: LD_VAR 0 17
29810: PUSH
29811: LD_INT 1
29813: ARRAY
29814: PPUSH
29815: CALL_OW 254
29819: PPUSH
29820: LD_INT 5
29822: PPUSH
29823: CALL_OW 273
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29832: LD_VAR 0 16
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: LD_VAR 0 16
29845: PUSH
29846: LD_INT 2
29848: ARRAY
29849: PPUSH
29850: CALL_OW 488
29854: IFFALSE 29885
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29856: LD_VAR 0 13
29860: PPUSH
29861: LD_VAR 0 16
29865: PUSH
29866: LD_INT 1
29868: ARRAY
29869: PPUSH
29870: LD_VAR 0 16
29874: PUSH
29875: LD_INT 2
29877: ARRAY
29878: PPUSH
29879: CALL_OW 111
// continue ;
29883: GO 29375
// end ; end ; r := GetDir ( tmp ) ;
29885: LD_ADDR_VAR 0 15
29889: PUSH
29890: LD_VAR 0 13
29894: PPUSH
29895: CALL_OW 254
29899: ST_TO_ADDR
// if r = 5 then
29900: LD_VAR 0 15
29904: PUSH
29905: LD_INT 5
29907: EQUAL
29908: IFFALSE 29918
// r := 0 ;
29910: LD_ADDR_VAR 0 15
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// for j = r to 5 do
29918: LD_ADDR_VAR 0 10
29922: PUSH
29923: DOUBLE
29924: LD_VAR 0 15
29928: DEC
29929: ST_TO_ADDR
29930: LD_INT 5
29932: PUSH
29933: FOR_TO
29934: IFFALSE 30048
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29936: LD_ADDR_VAR 0 11
29940: PUSH
29941: LD_VAR 0 13
29945: PPUSH
29946: CALL_OW 250
29950: PPUSH
29951: LD_VAR 0 10
29955: PPUSH
29956: LD_INT 2
29958: PPUSH
29959: CALL_OW 272
29963: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29964: LD_ADDR_VAR 0 12
29968: PUSH
29969: LD_VAR 0 13
29973: PPUSH
29974: CALL_OW 251
29978: PPUSH
29979: LD_VAR 0 10
29983: PPUSH
29984: LD_INT 2
29986: PPUSH
29987: CALL_OW 273
29991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29992: LD_VAR 0 11
29996: PPUSH
29997: LD_VAR 0 12
30001: PPUSH
30002: CALL_OW 488
30006: PUSH
30007: LD_VAR 0 11
30011: PPUSH
30012: LD_VAR 0 12
30016: PPUSH
30017: CALL_OW 428
30021: NOT
30022: AND
30023: IFFALSE 30046
// begin ComMoveXY ( tmp , _x , _y ) ;
30025: LD_VAR 0 13
30029: PPUSH
30030: LD_VAR 0 11
30034: PPUSH
30035: LD_VAR 0 12
30039: PPUSH
30040: CALL_OW 111
// break ;
30044: GO 30048
// end ; end ;
30046: GO 29933
30048: POP
30049: POP
// end ; end ;
30050: GO 29375
30052: POP
30053: POP
// end ;
30054: LD_VAR 0 8
30058: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30059: LD_INT 0
30061: PPUSH
// result := true ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 1
30069: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30070: LD_VAR 0 2
30074: PUSH
30075: LD_INT 24
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30089
30081: LD_INT 33
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30114
30089: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_INT 32
30097: PPUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 321
30107: PUSH
30108: LD_INT 2
30110: EQUAL
30111: ST_TO_ADDR
30112: GO 30430
30114: LD_INT 20
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30147
30122: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 6
30130: PPUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 321
30140: PUSH
30141: LD_INT 2
30143: EQUAL
30144: ST_TO_ADDR
30145: GO 30430
30147: LD_INT 22
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30161
30153: LD_INT 36
30155: DOUBLE
30156: EQUAL
30157: IFTRUE 30161
30159: GO 30186
30161: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30162: LD_ADDR_VAR 0 3
30166: PUSH
30167: LD_INT 15
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 321
30179: PUSH
30180: LD_INT 2
30182: EQUAL
30183: ST_TO_ADDR
30184: GO 30430
30186: LD_INT 30
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30219
30194: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 20
30202: PPUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 321
30212: PUSH
30213: LD_INT 2
30215: EQUAL
30216: ST_TO_ADDR
30217: GO 30430
30219: LD_INT 28
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30233
30225: LD_INT 21
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30258
30233: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 21
30241: PPUSH
30242: LD_VAR 0 1
30246: PPUSH
30247: CALL_OW 321
30251: PUSH
30252: LD_INT 2
30254: EQUAL
30255: ST_TO_ADDR
30256: GO 30430
30258: LD_INT 16
30260: DOUBLE
30261: EQUAL
30262: IFTRUE 30266
30264: GO 30291
30266: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 84
30274: PPUSH
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 321
30284: PUSH
30285: LD_INT 2
30287: EQUAL
30288: ST_TO_ADDR
30289: GO 30430
30291: LD_INT 19
30293: DOUBLE
30294: EQUAL
30295: IFTRUE 30305
30297: LD_INT 23
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30330
30305: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30306: LD_ADDR_VAR 0 3
30310: PUSH
30311: LD_INT 83
30313: PPUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 321
30323: PUSH
30324: LD_INT 2
30326: EQUAL
30327: ST_TO_ADDR
30328: GO 30430
30330: LD_INT 17
30332: DOUBLE
30333: EQUAL
30334: IFTRUE 30338
30336: GO 30363
30338: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30339: LD_ADDR_VAR 0 3
30343: PUSH
30344: LD_INT 39
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 321
30356: PUSH
30357: LD_INT 2
30359: EQUAL
30360: ST_TO_ADDR
30361: GO 30430
30363: LD_INT 18
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30396
30371: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30372: LD_ADDR_VAR 0 3
30376: PUSH
30377: LD_INT 40
30379: PPUSH
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 321
30389: PUSH
30390: LD_INT 2
30392: EQUAL
30393: ST_TO_ADDR
30394: GO 30430
30396: LD_INT 27
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30429
30404: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 35
30412: PPUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 321
30422: PUSH
30423: LD_INT 2
30425: EQUAL
30426: ST_TO_ADDR
30427: GO 30430
30429: POP
// end ;
30430: LD_VAR 0 3
30434: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30435: LD_INT 0
30437: PPUSH
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
30446: PPUSH
30447: PPUSH
// result := false ;
30448: LD_ADDR_VAR 0 6
30452: PUSH
30453: LD_INT 0
30455: ST_TO_ADDR
// if btype = b_depot then
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 0
30463: EQUAL
30464: IFFALSE 30476
// begin result := true ;
30466: LD_ADDR_VAR 0 6
30470: PUSH
30471: LD_INT 1
30473: ST_TO_ADDR
// exit ;
30474: GO 31302
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30476: LD_VAR 0 1
30480: NOT
30481: PUSH
30482: LD_VAR 0 1
30486: PPUSH
30487: CALL_OW 266
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: IN
30502: NOT
30503: OR
30504: PUSH
30505: LD_VAR 0 2
30509: NOT
30510: OR
30511: PUSH
30512: LD_VAR 0 5
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: IN
30543: NOT
30544: OR
30545: PUSH
30546: LD_VAR 0 3
30550: PPUSH
30551: LD_VAR 0 4
30555: PPUSH
30556: CALL_OW 488
30560: NOT
30561: OR
30562: IFFALSE 30566
// exit ;
30564: GO 31302
// side := GetSide ( depot ) ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 255
30580: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: CALL 30059 0 2
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 31302
// pom := GetBase ( depot ) ;
30600: LD_ADDR_VAR 0 10
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 274
30614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30615: LD_ADDR_VAR 0 11
30619: PUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: LD_VAR 0 1
30629: PPUSH
30630: CALL_OW 248
30634: PPUSH
30635: CALL_OW 450
30639: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30640: LD_VAR 0 10
30644: PPUSH
30645: LD_INT 1
30647: PPUSH
30648: CALL_OW 275
30652: PUSH
30653: LD_VAR 0 11
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: GREATEREQUAL
30662: PUSH
30663: LD_VAR 0 10
30667: PPUSH
30668: LD_INT 2
30670: PPUSH
30671: CALL_OW 275
30675: PUSH
30676: LD_VAR 0 11
30680: PUSH
30681: LD_INT 2
30683: ARRAY
30684: GREATEREQUAL
30685: AND
30686: PUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: LD_INT 3
30694: PPUSH
30695: CALL_OW 275
30699: PUSH
30700: LD_VAR 0 11
30704: PUSH
30705: LD_INT 3
30707: ARRAY
30708: GREATEREQUAL
30709: AND
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 31302
// if GetBType ( depot ) = b_depot then
30715: LD_VAR 0 1
30719: PPUSH
30720: CALL_OW 266
30724: PUSH
30725: LD_INT 0
30727: EQUAL
30728: IFFALSE 30740
// dist := 28 else
30730: LD_ADDR_VAR 0 14
30734: PUSH
30735: LD_INT 28
30737: ST_TO_ADDR
30738: GO 30748
// dist := 36 ;
30740: LD_ADDR_VAR 0 14
30744: PUSH
30745: LD_INT 36
30747: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 3
30757: PPUSH
30758: LD_VAR 0 4
30762: PPUSH
30763: CALL_OW 297
30767: PUSH
30768: LD_VAR 0 14
30772: GREATER
30773: IFFALSE 30777
// exit ;
30775: GO 31302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30777: LD_ADDR_VAR 0 12
30781: PUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 4
30796: PPUSH
30797: LD_VAR 0 5
30801: PPUSH
30802: LD_VAR 0 1
30806: PPUSH
30807: CALL_OW 248
30811: PPUSH
30812: LD_INT 0
30814: PPUSH
30815: CALL 31307 0 6
30819: ST_TO_ADDR
// if not hexes then
30820: LD_VAR 0 12
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 31302
// hex := GetHexInfo ( x , y ) ;
30829: LD_ADDR_VAR 0 15
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_VAR 0 4
30843: PPUSH
30844: CALL_OW 546
30848: ST_TO_ADDR
// if hex [ 1 ] then
30849: LD_VAR 0 15
30853: PUSH
30854: LD_INT 1
30856: ARRAY
30857: IFFALSE 30861
// exit ;
30859: GO 31302
// height := hex [ 2 ] ;
30861: LD_ADDR_VAR 0 13
30865: PUSH
30866: LD_VAR 0 15
30870: PUSH
30871: LD_INT 2
30873: ARRAY
30874: ST_TO_ADDR
// for i = 1 to hexes do
30875: LD_ADDR_VAR 0 7
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_VAR 0 12
30889: PUSH
30890: FOR_TO
30891: IFFALSE 31221
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30893: LD_VAR 0 12
30897: PUSH
30898: LD_VAR 0 7
30902: ARRAY
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: LD_VAR 0 12
30912: PUSH
30913: LD_VAR 0 7
30917: ARRAY
30918: PUSH
30919: LD_INT 2
30921: ARRAY
30922: PPUSH
30923: CALL_OW 488
30927: NOT
30928: PUSH
30929: LD_VAR 0 12
30933: PUSH
30934: LD_VAR 0 7
30938: ARRAY
30939: PUSH
30940: LD_INT 1
30942: ARRAY
30943: PPUSH
30944: LD_VAR 0 12
30948: PUSH
30949: LD_VAR 0 7
30953: ARRAY
30954: PUSH
30955: LD_INT 2
30957: ARRAY
30958: PPUSH
30959: CALL_OW 428
30963: PUSH
30964: LD_INT 0
30966: GREATER
30967: OR
30968: PUSH
30969: LD_VAR 0 12
30973: PUSH
30974: LD_VAR 0 7
30978: ARRAY
30979: PUSH
30980: LD_INT 1
30982: ARRAY
30983: PPUSH
30984: LD_VAR 0 12
30988: PUSH
30989: LD_VAR 0 7
30993: ARRAY
30994: PUSH
30995: LD_INT 2
30997: ARRAY
30998: PPUSH
30999: CALL_OW 351
31003: OR
31004: IFFALSE 31010
// exit ;
31006: POP
31007: POP
31008: GO 31302
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31010: LD_ADDR_VAR 0 8
31014: PUSH
31015: LD_VAR 0 12
31019: PUSH
31020: LD_VAR 0 7
31024: ARRAY
31025: PUSH
31026: LD_INT 1
31028: ARRAY
31029: PPUSH
31030: LD_VAR 0 12
31034: PUSH
31035: LD_VAR 0 7
31039: ARRAY
31040: PUSH
31041: LD_INT 2
31043: ARRAY
31044: PPUSH
31045: CALL_OW 546
31049: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31050: LD_VAR 0 8
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PUSH
31059: LD_VAR 0 8
31063: PUSH
31064: LD_INT 2
31066: ARRAY
31067: PUSH
31068: LD_VAR 0 13
31072: PUSH
31073: LD_INT 2
31075: PLUS
31076: GREATER
31077: OR
31078: PUSH
31079: LD_VAR 0 8
31083: PUSH
31084: LD_INT 2
31086: ARRAY
31087: PUSH
31088: LD_VAR 0 13
31092: PUSH
31093: LD_INT 2
31095: MINUS
31096: LESS
31097: OR
31098: PUSH
31099: LD_VAR 0 8
31103: PUSH
31104: LD_INT 3
31106: ARRAY
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 8
31113: PUSH
31114: LD_INT 9
31116: PUSH
31117: LD_INT 10
31119: PUSH
31120: LD_INT 11
31122: PUSH
31123: LD_INT 12
31125: PUSH
31126: LD_INT 13
31128: PUSH
31129: LD_INT 16
31131: PUSH
31132: LD_INT 17
31134: PUSH
31135: LD_INT 18
31137: PUSH
31138: LD_INT 19
31140: PUSH
31141: LD_INT 20
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: IN
31162: NOT
31163: OR
31164: PUSH
31165: LD_VAR 0 8
31169: PUSH
31170: LD_INT 5
31172: ARRAY
31173: NOT
31174: OR
31175: PUSH
31176: LD_VAR 0 8
31180: PUSH
31181: LD_INT 6
31183: ARRAY
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 7
31193: PUSH
31194: LD_INT 9
31196: PUSH
31197: LD_INT 10
31199: PUSH
31200: LD_INT 11
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: IN
31211: NOT
31212: OR
31213: IFFALSE 31219
// exit ;
31215: POP
31216: POP
31217: GO 31302
// end ;
31219: GO 30890
31221: POP
31222: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31223: LD_VAR 0 9
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: LD_VAR 0 4
31237: PPUSH
31238: LD_INT 20
31240: PPUSH
31241: CALL 23225 0 4
31245: PUSH
31246: LD_INT 4
31248: ARRAY
31249: IFFALSE 31253
// exit ;
31251: GO 31302
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31253: LD_VAR 0 2
31257: PUSH
31258: LD_INT 29
31260: PUSH
31261: LD_INT 30
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: IN
31268: PUSH
31269: LD_VAR 0 3
31273: PPUSH
31274: LD_VAR 0 4
31278: PPUSH
31279: LD_VAR 0 9
31283: PPUSH
31284: CALL_OW 440
31288: NOT
31289: AND
31290: IFFALSE 31294
// exit ;
31292: GO 31302
// result := true ;
31294: LD_ADDR_VAR 0 6
31298: PUSH
31299: LD_INT 1
31301: ST_TO_ADDR
// end ;
31302: LD_VAR 0 6
31306: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31307: LD_INT 0
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
// result = [ ] ;
31367: LD_ADDR_VAR 0 7
31371: PUSH
31372: EMPTY
31373: ST_TO_ADDR
// temp_list = [ ] ;
31374: LD_ADDR_VAR 0 9
31378: PUSH
31379: EMPTY
31380: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31381: LD_VAR 0 4
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: LD_INT 4
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: IN
31412: NOT
31413: PUSH
31414: LD_VAR 0 1
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: IN
31429: PUSH
31430: LD_VAR 0 5
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: IN
31449: NOT
31450: AND
31451: OR
31452: IFFALSE 31456
// exit ;
31454: GO 49847
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31456: LD_VAR 0 1
31460: PUSH
31461: LD_INT 6
31463: PUSH
31464: LD_INT 7
31466: PUSH
31467: LD_INT 8
31469: PUSH
31470: LD_INT 13
31472: PUSH
31473: LD_INT 12
31475: PUSH
31476: LD_INT 15
31478: PUSH
31479: LD_INT 11
31481: PUSH
31482: LD_INT 14
31484: PUSH
31485: LD_INT 10
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: IN
31499: IFFALSE 31509
// btype = b_lab ;
31501: LD_ADDR_VAR 0 1
31505: PUSH
31506: LD_INT 6
31508: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31509: LD_VAR 0 6
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: IN
31528: NOT
31529: PUSH
31530: LD_VAR 0 1
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 6
31549: PUSH
31550: LD_INT 36
31552: PUSH
31553: LD_INT 4
31555: PUSH
31556: LD_INT 5
31558: PUSH
31559: LD_INT 31
31561: PUSH
31562: LD_INT 32
31564: PUSH
31565: LD_INT 33
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: IN
31581: NOT
31582: PUSH
31583: LD_VAR 0 6
31587: PUSH
31588: LD_INT 1
31590: EQUAL
31591: AND
31592: OR
31593: PUSH
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: IN
31609: NOT
31610: PUSH
31611: LD_VAR 0 6
31615: PUSH
31616: LD_INT 2
31618: EQUAL
31619: AND
31620: OR
31621: IFFALSE 31631
// mode = 0 ;
31623: LD_ADDR_VAR 0 6
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// case mode of 0 :
31631: LD_VAR 0 6
31635: PUSH
31636: LD_INT 0
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 43097
31644: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31645: LD_ADDR_VAR 0 11
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 3
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31838: LD_ADDR_VAR 0 12
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32034: LD_ADDR_VAR 0 13
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 2
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: NEG
32206: PUSH
32207: LD_INT 3
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32233: LD_ADDR_VAR 0 14
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 3
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32429: LD_ADDR_VAR 0 15
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32622: LD_ADDR_VAR 0 16
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32815: LD_ADDR_VAR 0 17
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33045: LD_ADDR_VAR 0 18
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33275: LD_ADDR_VAR 0 19
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33505: LD_ADDR_VAR 0 20
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33735: LD_ADDR_VAR 0 21
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: NEG
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33965: LD_ADDR_VAR 0 22
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34195: LD_ADDR_VAR 0 23
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 3
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34475: LD_ADDR_VAR 0 24
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34751: LD_ADDR_VAR 0 25
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35025: LD_ADDR_VAR 0 26
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35301: LD_ADDR_VAR 0 27
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35581: LD_ADDR_VAR 0 28
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 3
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 3
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 3
35816: NEG
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35863: LD_ADDR_VAR 0 29
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 3
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 3
36107: NEG
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36142: LD_ADDR_VAR 0 30
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 2
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 3
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 3
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: LD_INT 3
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36420: LD_ADDR_VAR 0 31
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36698: LD_ADDR_VAR 0 32
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: NEG
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36976: LD_ADDR_VAR 0 33
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37255: LD_ADDR_VAR 0 34
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 3
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 3
37500: NEG
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37535: LD_ADDR_VAR 0 35
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37647: LD_ADDR_VAR 0 36
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37759: LD_ADDR_VAR 0 37
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37871: LD_ADDR_VAR 0 38
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37983: LD_ADDR_VAR 0 39
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38095: LD_ADDR_VAR 0 40
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38207: LD_ADDR_VAR 0 41
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 3
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38557: LD_ADDR_VAR 0 42
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: NEG
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38907: LD_ADDR_VAR 0 43
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39255: LD_ADDR_VAR 0 44
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: LD_INT 3
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 3
39529: NEG
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 3
39564: NEG
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39605: LD_ADDR_VAR 0 45
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 3
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 3
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 3
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39955: LD_ADDR_VAR 0 46
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40303: LD_ADDR_VAR 0 47
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40454: LD_ADDR_VAR 0 48
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40601: LD_ADDR_VAR 0 49
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40745: LD_ADDR_VAR 0 50
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40889: LD_ADDR_VAR 0 51
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41036: LD_ADDR_VAR 0 52
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41187: LD_ADDR_VAR 0 53
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41417: LD_ADDR_VAR 0 54
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41647: LD_ADDR_VAR 0 55
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41877: LD_ADDR_VAR 0 56
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 57
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 58
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42567: LD_ADDR_VAR 0 59
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42655: LD_ADDR_VAR 0 60
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42743: LD_ADDR_VAR 0 61
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42831: LD_ADDR_VAR 0 62
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42919: LD_ADDR_VAR 0 63
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43007: LD_ADDR_VAR 0 64
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
// end ; 1 :
43095: GO 48992
43097: LD_INT 1
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 45728
43105: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43106: LD_ADDR_VAR 0 11
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43150: LD_ADDR_VAR 0 12
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43191: LD_ADDR_VAR 0 13
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43231: LD_ADDR_VAR 0 14
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43272: LD_ADDR_VAR 0 15
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43316: LD_ADDR_VAR 0 16
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43362: LD_ADDR_VAR 0 17
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 3
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43406: LD_ADDR_VAR 0 18
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43447: LD_ADDR_VAR 0 19
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43487: LD_ADDR_VAR 0 20
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 3
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 21
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43572: LD_ADDR_VAR 0 22
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43618: LD_ADDR_VAR 0 23
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 4
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43662: LD_ADDR_VAR 0 24
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 4
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43703: LD_ADDR_VAR 0 25
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43743: LD_ADDR_VAR 0 26
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43784: LD_ADDR_VAR 0 27
43788: PUSH
43789: LD_INT 3
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 4
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43828: LD_ADDR_VAR 0 28
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: LD_INT 4
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 4
43859: NEG
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43874: LD_ADDR_VAR 0 29
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 3
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 4
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 4
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 3
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 5
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 5
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 4
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 6
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 6
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 5
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44029: LD_ADDR_VAR 0 30
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 4
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 5
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 6
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 6
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44172: LD_ADDR_VAR 0 31
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 4
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 4
44219: PUSH
44220: LD_INT 4
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 4
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 4
44259: PUSH
44260: LD_INT 5
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 6
44269: PUSH
44270: LD_INT 5
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 6
44279: PUSH
44280: LD_INT 6
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: PUSH
44290: LD_INT 6
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44311: LD_ADDR_VAR 0 32
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 4
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 5
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 5
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 4
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 6
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 6
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 5
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44454: LD_ADDR_VAR 0 33
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 4
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 4
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 4
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 5
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 5
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 5
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 6
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 6
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44609: LD_ADDR_VAR 0 34
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 3
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 4
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 4
44664: NEG
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 4
44676: NEG
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 4
44688: NEG
44689: PUSH
44690: LD_INT 5
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 5
44700: NEG
44701: PUSH
44702: LD_INT 4
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 5
44712: NEG
44713: PUSH
44714: LD_INT 5
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 5
44724: NEG
44725: PUSH
44726: LD_INT 6
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 6
44736: NEG
44737: PUSH
44738: LD_INT 5
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 6
44748: NEG
44749: PUSH
44750: LD_INT 6
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44772: LD_ADDR_VAR 0 41
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44816: LD_ADDR_VAR 0 42
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44857: LD_ADDR_VAR 0 43
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44897: LD_ADDR_VAR 0 44
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44938: LD_ADDR_VAR 0 45
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44982: LD_ADDR_VAR 0 46
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45028: LD_ADDR_VAR 0 47
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 3
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45061: LD_ADDR_VAR 0 48
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45092: LD_ADDR_VAR 0 49
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45121: LD_ADDR_VAR 0 50
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45150: LD_ADDR_VAR 0 51
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45181: LD_ADDR_VAR 0 52
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45214: LD_ADDR_VAR 0 53
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45258: LD_ADDR_VAR 0 54
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45299: LD_ADDR_VAR 0 55
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45339: LD_ADDR_VAR 0 56
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45380: LD_ADDR_VAR 0 57
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45424: LD_ADDR_VAR 0 58
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45470: LD_ADDR_VAR 0 59
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45514: LD_ADDR_VAR 0 60
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45555: LD_ADDR_VAR 0 61
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45595: LD_ADDR_VAR 0 62
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45636: LD_ADDR_VAR 0 63
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45680: LD_ADDR_VAR 0 64
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// end ; 2 :
45726: GO 48992
45728: LD_INT 2
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45736
45734: GO 48991
45736: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45737: LD_ADDR_VAR 0 29
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 5
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 4
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 5
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 4
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 4
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: LD_INT 4
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 3
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 4
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 4
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 5
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 5
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 5
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 4
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 4
46122: NEG
46123: PUSH
46124: LD_INT 4
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 4
46134: NEG
46135: PUSH
46136: LD_INT 5
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 4
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 4
46170: NEG
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 5
46182: NEG
46183: PUSH
46184: LD_INT 4
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: NEG
46195: PUSH
46196: LD_INT 5
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: LD_INT 5
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 5
46218: NEG
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46275: LD_ADDR_VAR 0 30
46279: PUSH
46280: LD_INT 4
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 4
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 5
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 5
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 4
46322: PUSH
46323: LD_INT 5
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 5
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 3
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 4
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 4
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 4
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 4
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 4
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 4
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 5
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 5
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 5
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: NEG
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: NEG
46580: PUSH
46581: LD_INT 4
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 4
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 4
46639: NEG
46640: PUSH
46641: LD_INT 4
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 4
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 4
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 4
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 5
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 4
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 5
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 5
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46822: LD_ADDR_VAR 0 31
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 4
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 5
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 5
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 4
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 4
47024: NEG
47025: PUSH
47026: LD_INT 4
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 4
47036: NEG
47037: PUSH
47038: LD_INT 5
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 4
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 4
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 5
47084: NEG
47085: PUSH
47086: LD_INT 4
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 5
47096: NEG
47097: PUSH
47098: LD_INT 5
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 5
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 4
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 4
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 4
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 4
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 5
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 4
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 5
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47372: LD_ADDR_VAR 0 32
47376: PUSH
47377: LD_INT 4
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 4
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 5
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 5
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: LD_INT 4
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 3
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 4
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 4
47553: NEG
47554: PUSH
47555: LD_INT 4
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 4
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 4
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 4
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 5
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 4
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 5
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 5
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 4
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 4
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 5
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 5
47814: PUSH
47815: LD_INT 5
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 5
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 5
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47919: LD_ADDR_VAR 0 33
47923: PUSH
47924: LD_INT 4
47926: NEG
47927: PUSH
47928: LD_INT 4
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 4
47938: NEG
47939: PUSH
47940: LD_INT 5
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 4
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 4
47974: NEG
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 5
47986: NEG
47987: PUSH
47988: LD_INT 4
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 5
47998: NEG
47999: PUSH
48000: LD_INT 5
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: LD_INT 5
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 5
48022: NEG
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 3
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 4
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 4
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 4
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 4
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 5
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 4
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 5
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 4
48259: PUSH
48260: LD_INT 4
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 4
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 4
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 4
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 4
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 4
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 5
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 5
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 5
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48457: LD_ADDR_VAR 0 34
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 5
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 4
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 5
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 5
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 4
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 4
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 4
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: LD_INT 4
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 4
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 5
48679: PUSH
48680: LD_INT 4
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: LD_INT 5
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 4
48699: PUSH
48700: LD_INT 5
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 4
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 5
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: LD_INT 5
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 4
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 4
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 4
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 4
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 5
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 5
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 5
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// end ; end ;
48989: GO 48992
48991: POP
// case btype of b_depot , b_warehouse :
48992: LD_VAR 0 1
48996: PUSH
48997: LD_INT 0
48999: DOUBLE
49000: EQUAL
49001: IFTRUE 49011
49003: LD_INT 1
49005: DOUBLE
49006: EQUAL
49007: IFTRUE 49011
49009: GO 49212
49011: POP
// case nation of nation_american :
49012: LD_VAR 0 5
49016: PUSH
49017: LD_INT 1
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49025
49023: GO 49081
49025: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 11
49035: PUSH
49036: LD_VAR 0 12
49040: PUSH
49041: LD_VAR 0 13
49045: PUSH
49046: LD_VAR 0 14
49050: PUSH
49051: LD_VAR 0 15
49055: PUSH
49056: LD_VAR 0 16
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: PUSH
49069: LD_VAR 0 4
49073: PUSH
49074: LD_INT 1
49076: PLUS
49077: ARRAY
49078: ST_TO_ADDR
49079: GO 49210
49081: LD_INT 2
49083: DOUBLE
49084: EQUAL
49085: IFTRUE 49089
49087: GO 49145
49089: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_VAR 0 17
49099: PUSH
49100: LD_VAR 0 18
49104: PUSH
49105: LD_VAR 0 19
49109: PUSH
49110: LD_VAR 0 20
49114: PUSH
49115: LD_VAR 0 21
49119: PUSH
49120: LD_VAR 0 22
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: PUSH
49133: LD_VAR 0 4
49137: PUSH
49138: LD_INT 1
49140: PLUS
49141: ARRAY
49142: ST_TO_ADDR
49143: GO 49210
49145: LD_INT 3
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49153
49151: GO 49209
49153: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49154: LD_ADDR_VAR 0 9
49158: PUSH
49159: LD_VAR 0 23
49163: PUSH
49164: LD_VAR 0 24
49168: PUSH
49169: LD_VAR 0 25
49173: PUSH
49174: LD_VAR 0 26
49178: PUSH
49179: LD_VAR 0 27
49183: PUSH
49184: LD_VAR 0 28
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: LD_VAR 0 4
49201: PUSH
49202: LD_INT 1
49204: PLUS
49205: ARRAY
49206: ST_TO_ADDR
49207: GO 49210
49209: POP
49210: GO 49765
49212: LD_INT 2
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49226
49218: LD_INT 3
49220: DOUBLE
49221: EQUAL
49222: IFTRUE 49226
49224: GO 49282
49226: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_VAR 0 29
49236: PUSH
49237: LD_VAR 0 30
49241: PUSH
49242: LD_VAR 0 31
49246: PUSH
49247: LD_VAR 0 32
49251: PUSH
49252: LD_VAR 0 33
49256: PUSH
49257: LD_VAR 0 34
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: LD_VAR 0 4
49274: PUSH
49275: LD_INT 1
49277: PLUS
49278: ARRAY
49279: ST_TO_ADDR
49280: GO 49765
49282: LD_INT 16
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49344
49288: LD_INT 17
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49344
49294: LD_INT 18
49296: DOUBLE
49297: EQUAL
49298: IFTRUE 49344
49300: LD_INT 19
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49344
49306: LD_INT 22
49308: DOUBLE
49309: EQUAL
49310: IFTRUE 49344
49312: LD_INT 20
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49344
49318: LD_INT 21
49320: DOUBLE
49321: EQUAL
49322: IFTRUE 49344
49324: LD_INT 23
49326: DOUBLE
49327: EQUAL
49328: IFTRUE 49344
49330: LD_INT 24
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49344
49336: LD_INT 25
49338: DOUBLE
49339: EQUAL
49340: IFTRUE 49344
49342: GO 49400
49344: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49345: LD_ADDR_VAR 0 9
49349: PUSH
49350: LD_VAR 0 35
49354: PUSH
49355: LD_VAR 0 36
49359: PUSH
49360: LD_VAR 0 37
49364: PUSH
49365: LD_VAR 0 38
49369: PUSH
49370: LD_VAR 0 39
49374: PUSH
49375: LD_VAR 0 40
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: PUSH
49388: LD_VAR 0 4
49392: PUSH
49393: LD_INT 1
49395: PLUS
49396: ARRAY
49397: ST_TO_ADDR
49398: GO 49765
49400: LD_INT 6
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49456
49406: LD_INT 7
49408: DOUBLE
49409: EQUAL
49410: IFTRUE 49456
49412: LD_INT 8
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49456
49418: LD_INT 13
49420: DOUBLE
49421: EQUAL
49422: IFTRUE 49456
49424: LD_INT 12
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49456
49430: LD_INT 15
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49456
49436: LD_INT 11
49438: DOUBLE
49439: EQUAL
49440: IFTRUE 49456
49442: LD_INT 14
49444: DOUBLE
49445: EQUAL
49446: IFTRUE 49456
49448: LD_INT 10
49450: DOUBLE
49451: EQUAL
49452: IFTRUE 49456
49454: GO 49512
49456: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49457: LD_ADDR_VAR 0 9
49461: PUSH
49462: LD_VAR 0 41
49466: PUSH
49467: LD_VAR 0 42
49471: PUSH
49472: LD_VAR 0 43
49476: PUSH
49477: LD_VAR 0 44
49481: PUSH
49482: LD_VAR 0 45
49486: PUSH
49487: LD_VAR 0 46
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: PUSH
49500: LD_VAR 0 4
49504: PUSH
49505: LD_INT 1
49507: PLUS
49508: ARRAY
49509: ST_TO_ADDR
49510: GO 49765
49512: LD_INT 36
49514: DOUBLE
49515: EQUAL
49516: IFTRUE 49520
49518: GO 49576
49520: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49521: LD_ADDR_VAR 0 9
49525: PUSH
49526: LD_VAR 0 47
49530: PUSH
49531: LD_VAR 0 48
49535: PUSH
49536: LD_VAR 0 49
49540: PUSH
49541: LD_VAR 0 50
49545: PUSH
49546: LD_VAR 0 51
49550: PUSH
49551: LD_VAR 0 52
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: PUSH
49564: LD_VAR 0 4
49568: PUSH
49569: LD_INT 1
49571: PLUS
49572: ARRAY
49573: ST_TO_ADDR
49574: GO 49765
49576: LD_INT 4
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49602
49582: LD_INT 5
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49602
49588: LD_INT 34
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49602
49594: LD_INT 37
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49658
49602: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49603: LD_ADDR_VAR 0 9
49607: PUSH
49608: LD_VAR 0 53
49612: PUSH
49613: LD_VAR 0 54
49617: PUSH
49618: LD_VAR 0 55
49622: PUSH
49623: LD_VAR 0 56
49627: PUSH
49628: LD_VAR 0 57
49632: PUSH
49633: LD_VAR 0 58
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: PUSH
49646: LD_VAR 0 4
49650: PUSH
49651: LD_INT 1
49653: PLUS
49654: ARRAY
49655: ST_TO_ADDR
49656: GO 49765
49658: LD_INT 31
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49708
49664: LD_INT 32
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49708
49670: LD_INT 33
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49708
49676: LD_INT 27
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49708
49682: LD_INT 26
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49708
49688: LD_INT 28
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49708
49694: LD_INT 29
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49708
49700: LD_INT 30
49702: DOUBLE
49703: EQUAL
49704: IFTRUE 49708
49706: GO 49764
49708: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49709: LD_ADDR_VAR 0 9
49713: PUSH
49714: LD_VAR 0 59
49718: PUSH
49719: LD_VAR 0 60
49723: PUSH
49724: LD_VAR 0 61
49728: PUSH
49729: LD_VAR 0 62
49733: PUSH
49734: LD_VAR 0 63
49738: PUSH
49739: LD_VAR 0 64
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: PUSH
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 1
49759: PLUS
49760: ARRAY
49761: ST_TO_ADDR
49762: GO 49765
49764: POP
// temp_list2 = [ ] ;
49765: LD_ADDR_VAR 0 10
49769: PUSH
49770: EMPTY
49771: ST_TO_ADDR
// for i in temp_list do
49772: LD_ADDR_VAR 0 8
49776: PUSH
49777: LD_VAR 0 9
49781: PUSH
49782: FOR_IN
49783: IFFALSE 49835
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49785: LD_ADDR_VAR 0 10
49789: PUSH
49790: LD_VAR 0 10
49794: PUSH
49795: LD_VAR 0 8
49799: PUSH
49800: LD_INT 1
49802: ARRAY
49803: PUSH
49804: LD_VAR 0 2
49808: PLUS
49809: PUSH
49810: LD_VAR 0 8
49814: PUSH
49815: LD_INT 2
49817: ARRAY
49818: PUSH
49819: LD_VAR 0 3
49823: PLUS
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: ADD
49832: ST_TO_ADDR
49833: GO 49782
49835: POP
49836: POP
// result = temp_list2 ;
49837: LD_ADDR_VAR 0 7
49841: PUSH
49842: LD_VAR 0 10
49846: ST_TO_ADDR
// end ;
49847: LD_VAR 0 7
49851: RET
// export function EnemyInRange ( unit , dist ) ; begin
49852: LD_INT 0
49854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_VAR 0 1
49864: PPUSH
49865: CALL_OW 255
49869: PPUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 250
49879: PPUSH
49880: LD_VAR 0 1
49884: PPUSH
49885: CALL_OW 251
49889: PPUSH
49890: LD_VAR 0 2
49894: PPUSH
49895: CALL 23225 0 4
49899: PUSH
49900: LD_INT 4
49902: ARRAY
49903: ST_TO_ADDR
// end ;
49904: LD_VAR 0 3
49908: RET
// export function PlayerSeeMe ( unit ) ; begin
49909: LD_INT 0
49911: PPUSH
// result := See ( your_side , unit ) ;
49912: LD_ADDR_VAR 0 2
49916: PUSH
49917: LD_OWVAR 2
49921: PPUSH
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 292
49931: ST_TO_ADDR
// end ;
49932: LD_VAR 0 2
49936: RET
// export function ReverseDir ( unit ) ; begin
49937: LD_INT 0
49939: PPUSH
// if not unit then
49940: LD_VAR 0 1
49944: NOT
49945: IFFALSE 49949
// exit ;
49947: GO 49972
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49949: LD_ADDR_VAR 0 2
49953: PUSH
49954: LD_VAR 0 1
49958: PPUSH
49959: CALL_OW 254
49963: PUSH
49964: LD_INT 3
49966: PLUS
49967: PUSH
49968: LD_INT 6
49970: MOD
49971: ST_TO_ADDR
// end ;
49972: LD_VAR 0 2
49976: RET
// export function ReverseArray ( array ) ; var i ; begin
49977: LD_INT 0
49979: PPUSH
49980: PPUSH
// if not array then
49981: LD_VAR 0 1
49985: NOT
49986: IFFALSE 49990
// exit ;
49988: GO 50045
// result := [ ] ;
49990: LD_ADDR_VAR 0 2
49994: PUSH
49995: EMPTY
49996: ST_TO_ADDR
// for i := array downto 1 do
49997: LD_ADDR_VAR 0 3
50001: PUSH
50002: DOUBLE
50003: LD_VAR 0 1
50007: INC
50008: ST_TO_ADDR
50009: LD_INT 1
50011: PUSH
50012: FOR_DOWNTO
50013: IFFALSE 50043
// result := Join ( result , array [ i ] ) ;
50015: LD_ADDR_VAR 0 2
50019: PUSH
50020: LD_VAR 0 2
50024: PPUSH
50025: LD_VAR 0 1
50029: PUSH
50030: LD_VAR 0 3
50034: ARRAY
50035: PPUSH
50036: CALL 54701 0 2
50040: ST_TO_ADDR
50041: GO 50012
50043: POP
50044: POP
// end ;
50045: LD_VAR 0 2
50049: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
// if not unit or not hexes then
50058: LD_VAR 0 1
50062: NOT
50063: PUSH
50064: LD_VAR 0 2
50068: NOT
50069: OR
50070: IFFALSE 50074
// exit ;
50072: GO 50197
// dist := 9999 ;
50074: LD_ADDR_VAR 0 5
50078: PUSH
50079: LD_INT 9999
50081: ST_TO_ADDR
// for i = 1 to hexes do
50082: LD_ADDR_VAR 0 4
50086: PUSH
50087: DOUBLE
50088: LD_INT 1
50090: DEC
50091: ST_TO_ADDR
50092: LD_VAR 0 2
50096: PUSH
50097: FOR_TO
50098: IFFALSE 50185
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50100: LD_ADDR_VAR 0 6
50104: PUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: LD_VAR 0 2
50114: PUSH
50115: LD_VAR 0 4
50119: ARRAY
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PPUSH
50125: LD_VAR 0 2
50129: PUSH
50130: LD_VAR 0 4
50134: ARRAY
50135: PUSH
50136: LD_INT 2
50138: ARRAY
50139: PPUSH
50140: CALL_OW 297
50144: ST_TO_ADDR
// if tdist < dist then
50145: LD_VAR 0 6
50149: PUSH
50150: LD_VAR 0 5
50154: LESS
50155: IFFALSE 50183
// begin hex := hexes [ i ] ;
50157: LD_ADDR_VAR 0 8
50161: PUSH
50162: LD_VAR 0 2
50166: PUSH
50167: LD_VAR 0 4
50171: ARRAY
50172: ST_TO_ADDR
// dist := tdist ;
50173: LD_ADDR_VAR 0 5
50177: PUSH
50178: LD_VAR 0 6
50182: ST_TO_ADDR
// end ; end ;
50183: GO 50097
50185: POP
50186: POP
// result := hex ;
50187: LD_ADDR_VAR 0 3
50191: PUSH
50192: LD_VAR 0 8
50196: ST_TO_ADDR
// end ;
50197: LD_VAR 0 3
50201: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50206: LD_VAR 0 1
50210: NOT
50211: PUSH
50212: LD_VAR 0 1
50216: PUSH
50217: LD_INT 21
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 23
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PPUSH
50241: CALL_OW 69
50245: IN
50246: NOT
50247: OR
50248: IFFALSE 50252
// exit ;
50250: GO 50299
// for i = 1 to 3 do
50252: LD_ADDR_VAR 0 3
50256: PUSH
50257: DOUBLE
50258: LD_INT 1
50260: DEC
50261: ST_TO_ADDR
50262: LD_INT 3
50264: PUSH
50265: FOR_TO
50266: IFFALSE 50297
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50268: LD_VAR 0 1
50272: PPUSH
50273: CALL_OW 250
50277: PPUSH
50278: LD_VAR 0 1
50282: PPUSH
50283: CALL_OW 251
50287: PPUSH
50288: LD_INT 1
50290: PPUSH
50291: CALL_OW 453
50295: GO 50265
50297: POP
50298: POP
// end ;
50299: LD_VAR 0 2
50303: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50304: LD_INT 0
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
50312: LD_VAR 0 1
50316: NOT
50317: PUSH
50318: LD_VAR 0 2
50322: NOT
50323: OR
50324: PUSH
50325: LD_VAR 0 1
50329: PPUSH
50330: CALL_OW 314
50334: OR
50335: IFFALSE 50339
// exit ;
50337: GO 50806
// if GetLives ( i ) < 250 then
50339: LD_VAR 0 4
50343: PPUSH
50344: CALL_OW 256
50348: PUSH
50349: LD_INT 250
50351: LESS
50352: IFFALSE 50365
// begin ComAutodestruct ( i ) ;
50354: LD_VAR 0 4
50358: PPUSH
50359: CALL 50202 0 1
// exit ;
50363: GO 50806
// end ; x := GetX ( enemy_unit ) ;
50365: LD_ADDR_VAR 0 7
50369: PUSH
50370: LD_VAR 0 2
50374: PPUSH
50375: CALL_OW 250
50379: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50380: LD_ADDR_VAR 0 8
50384: PUSH
50385: LD_VAR 0 2
50389: PPUSH
50390: CALL_OW 251
50394: ST_TO_ADDR
// if not x or not y then
50395: LD_VAR 0 7
50399: NOT
50400: PUSH
50401: LD_VAR 0 8
50405: NOT
50406: OR
50407: IFFALSE 50411
// exit ;
50409: GO 50806
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50411: LD_ADDR_VAR 0 6
50415: PUSH
50416: LD_VAR 0 7
50420: PPUSH
50421: LD_INT 0
50423: PPUSH
50424: LD_INT 4
50426: PPUSH
50427: CALL_OW 272
50431: PUSH
50432: LD_VAR 0 8
50436: PPUSH
50437: LD_INT 0
50439: PPUSH
50440: LD_INT 4
50442: PPUSH
50443: CALL_OW 273
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_VAR 0 7
50456: PPUSH
50457: LD_INT 1
50459: PPUSH
50460: LD_INT 4
50462: PPUSH
50463: CALL_OW 272
50467: PUSH
50468: LD_VAR 0 8
50472: PPUSH
50473: LD_INT 1
50475: PPUSH
50476: LD_INT 4
50478: PPUSH
50479: CALL_OW 273
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_VAR 0 7
50492: PPUSH
50493: LD_INT 2
50495: PPUSH
50496: LD_INT 4
50498: PPUSH
50499: CALL_OW 272
50503: PUSH
50504: LD_VAR 0 8
50508: PPUSH
50509: LD_INT 2
50511: PPUSH
50512: LD_INT 4
50514: PPUSH
50515: CALL_OW 273
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_VAR 0 7
50528: PPUSH
50529: LD_INT 3
50531: PPUSH
50532: LD_INT 4
50534: PPUSH
50535: CALL_OW 272
50539: PUSH
50540: LD_VAR 0 8
50544: PPUSH
50545: LD_INT 3
50547: PPUSH
50548: LD_INT 4
50550: PPUSH
50551: CALL_OW 273
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_VAR 0 7
50564: PPUSH
50565: LD_INT 4
50567: PPUSH
50568: LD_INT 4
50570: PPUSH
50571: CALL_OW 272
50575: PUSH
50576: LD_VAR 0 8
50580: PPUSH
50581: LD_INT 4
50583: PPUSH
50584: LD_INT 4
50586: PPUSH
50587: CALL_OW 273
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_VAR 0 7
50600: PPUSH
50601: LD_INT 5
50603: PPUSH
50604: LD_INT 4
50606: PPUSH
50607: CALL_OW 272
50611: PUSH
50612: LD_VAR 0 8
50616: PPUSH
50617: LD_INT 5
50619: PPUSH
50620: LD_INT 4
50622: PPUSH
50623: CALL_OW 273
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: ST_TO_ADDR
// for i = tmp downto 1 do
50640: LD_ADDR_VAR 0 4
50644: PUSH
50645: DOUBLE
50646: LD_VAR 0 6
50650: INC
50651: ST_TO_ADDR
50652: LD_INT 1
50654: PUSH
50655: FOR_DOWNTO
50656: IFFALSE 50757
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50658: LD_VAR 0 6
50662: PUSH
50663: LD_VAR 0 4
50667: ARRAY
50668: PUSH
50669: LD_INT 1
50671: ARRAY
50672: PPUSH
50673: LD_VAR 0 6
50677: PUSH
50678: LD_VAR 0 4
50682: ARRAY
50683: PUSH
50684: LD_INT 2
50686: ARRAY
50687: PPUSH
50688: CALL_OW 488
50692: NOT
50693: PUSH
50694: LD_VAR 0 6
50698: PUSH
50699: LD_VAR 0 4
50703: ARRAY
50704: PUSH
50705: LD_INT 1
50707: ARRAY
50708: PPUSH
50709: LD_VAR 0 6
50713: PUSH
50714: LD_VAR 0 4
50718: ARRAY
50719: PUSH
50720: LD_INT 2
50722: ARRAY
50723: PPUSH
50724: CALL_OW 428
50728: PUSH
50729: LD_INT 0
50731: NONEQUAL
50732: OR
50733: IFFALSE 50755
// tmp := Delete ( tmp , i ) ;
50735: LD_ADDR_VAR 0 6
50739: PUSH
50740: LD_VAR 0 6
50744: PPUSH
50745: LD_VAR 0 4
50749: PPUSH
50750: CALL_OW 3
50754: ST_TO_ADDR
50755: GO 50655
50757: POP
50758: POP
// j := GetClosestHex ( unit , tmp ) ;
50759: LD_ADDR_VAR 0 5
50763: PUSH
50764: LD_VAR 0 1
50768: PPUSH
50769: LD_VAR 0 6
50773: PPUSH
50774: CALL 50050 0 2
50778: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50779: LD_VAR 0 1
50783: PPUSH
50784: LD_VAR 0 5
50788: PUSH
50789: LD_INT 1
50791: ARRAY
50792: PPUSH
50793: LD_VAR 0 5
50797: PUSH
50798: LD_INT 2
50800: ARRAY
50801: PPUSH
50802: CALL_OW 111
// end ;
50806: LD_VAR 0 3
50810: RET
// export function PrepareApemanSoldier ( ) ; begin
50811: LD_INT 0
50813: PPUSH
// uc_nation := 0 ;
50814: LD_ADDR_OWVAR 21
50818: PUSH
50819: LD_INT 0
50821: ST_TO_ADDR
// hc_sex := sex_male ;
50822: LD_ADDR_OWVAR 27
50826: PUSH
50827: LD_INT 1
50829: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50830: LD_ADDR_OWVAR 28
50834: PUSH
50835: LD_INT 15
50837: ST_TO_ADDR
// hc_gallery :=  ;
50838: LD_ADDR_OWVAR 33
50842: PUSH
50843: LD_STRING 
50845: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50846: LD_ADDR_OWVAR 31
50850: PUSH
50851: LD_INT 0
50853: PPUSH
50854: LD_INT 3
50856: PPUSH
50857: CALL_OW 12
50861: PUSH
50862: LD_INT 0
50864: PPUSH
50865: LD_INT 3
50867: PPUSH
50868: CALL_OW 12
50872: PUSH
50873: LD_INT 0
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
// end ;
50885: LD_VAR 0 1
50889: RET
// export function PrepareApemanEngineer ( ) ; begin
50890: LD_INT 0
50892: PPUSH
// uc_nation := 0 ;
50893: LD_ADDR_OWVAR 21
50897: PUSH
50898: LD_INT 0
50900: ST_TO_ADDR
// hc_sex := sex_male ;
50901: LD_ADDR_OWVAR 27
50905: PUSH
50906: LD_INT 1
50908: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50909: LD_ADDR_OWVAR 28
50913: PUSH
50914: LD_INT 16
50916: ST_TO_ADDR
// hc_gallery :=  ;
50917: LD_ADDR_OWVAR 33
50921: PUSH
50922: LD_STRING 
50924: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50925: LD_ADDR_OWVAR 31
50929: PUSH
50930: LD_INT 0
50932: PPUSH
50933: LD_INT 3
50935: PPUSH
50936: CALL_OW 12
50940: PUSH
50941: LD_INT 0
50943: PPUSH
50944: LD_INT 3
50946: PPUSH
50947: CALL_OW 12
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 0
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: ST_TO_ADDR
// end ;
50964: LD_VAR 0 1
50968: RET
// export function PrepareApeman ( agressivity ) ; begin
50969: LD_INT 0
50971: PPUSH
// uc_side := 0 ;
50972: LD_ADDR_OWVAR 20
50976: PUSH
50977: LD_INT 0
50979: ST_TO_ADDR
// uc_nation := 0 ;
50980: LD_ADDR_OWVAR 21
50984: PUSH
50985: LD_INT 0
50987: ST_TO_ADDR
// hc_sex := sex_male ;
50988: LD_ADDR_OWVAR 27
50992: PUSH
50993: LD_INT 1
50995: ST_TO_ADDR
// hc_class := class_apeman ;
50996: LD_ADDR_OWVAR 28
51000: PUSH
51001: LD_INT 12
51003: ST_TO_ADDR
// hc_gallery :=  ;
51004: LD_ADDR_OWVAR 33
51008: PUSH
51009: LD_STRING 
51011: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51012: LD_ADDR_OWVAR 35
51016: PUSH
51017: LD_VAR 0 1
51021: NEG
51022: PPUSH
51023: LD_VAR 0 1
51027: PPUSH
51028: CALL_OW 12
51032: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51033: LD_ADDR_OWVAR 31
51037: PUSH
51038: LD_INT 0
51040: PPUSH
51041: LD_INT 3
51043: PPUSH
51044: CALL_OW 12
51048: PUSH
51049: LD_INT 0
51051: PPUSH
51052: LD_INT 3
51054: PPUSH
51055: CALL_OW 12
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: ST_TO_ADDR
// end ;
51072: LD_VAR 0 2
51076: RET
// export function PrepareTiger ( agressivity ) ; begin
51077: LD_INT 0
51079: PPUSH
// uc_side := 0 ;
51080: LD_ADDR_OWVAR 20
51084: PUSH
51085: LD_INT 0
51087: ST_TO_ADDR
// uc_nation := 0 ;
51088: LD_ADDR_OWVAR 21
51092: PUSH
51093: LD_INT 0
51095: ST_TO_ADDR
// hc_class := class_tiger ;
51096: LD_ADDR_OWVAR 28
51100: PUSH
51101: LD_INT 14
51103: ST_TO_ADDR
// hc_gallery :=  ;
51104: LD_ADDR_OWVAR 33
51108: PUSH
51109: LD_STRING 
51111: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51112: LD_ADDR_OWVAR 35
51116: PUSH
51117: LD_VAR 0 1
51121: NEG
51122: PPUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 12
51132: ST_TO_ADDR
// end ;
51133: LD_VAR 0 2
51137: RET
// export function PrepareEnchidna ( ) ; begin
51138: LD_INT 0
51140: PPUSH
// uc_side := 0 ;
51141: LD_ADDR_OWVAR 20
51145: PUSH
51146: LD_INT 0
51148: ST_TO_ADDR
// uc_nation := 0 ;
51149: LD_ADDR_OWVAR 21
51153: PUSH
51154: LD_INT 0
51156: ST_TO_ADDR
// hc_class := class_baggie ;
51157: LD_ADDR_OWVAR 28
51161: PUSH
51162: LD_INT 13
51164: ST_TO_ADDR
// hc_gallery :=  ;
51165: LD_ADDR_OWVAR 33
51169: PUSH
51170: LD_STRING 
51172: ST_TO_ADDR
// end ;
51173: LD_VAR 0 1
51177: RET
// export function PrepareFrog ( ) ; begin
51178: LD_INT 0
51180: PPUSH
// uc_side := 0 ;
51181: LD_ADDR_OWVAR 20
51185: PUSH
51186: LD_INT 0
51188: ST_TO_ADDR
// uc_nation := 0 ;
51189: LD_ADDR_OWVAR 21
51193: PUSH
51194: LD_INT 0
51196: ST_TO_ADDR
// hc_class := class_frog ;
51197: LD_ADDR_OWVAR 28
51201: PUSH
51202: LD_INT 19
51204: ST_TO_ADDR
// hc_gallery :=  ;
51205: LD_ADDR_OWVAR 33
51209: PUSH
51210: LD_STRING 
51212: ST_TO_ADDR
// end ;
51213: LD_VAR 0 1
51217: RET
// export function PrepareFish ( ) ; begin
51218: LD_INT 0
51220: PPUSH
// uc_side := 0 ;
51221: LD_ADDR_OWVAR 20
51225: PUSH
51226: LD_INT 0
51228: ST_TO_ADDR
// uc_nation := 0 ;
51229: LD_ADDR_OWVAR 21
51233: PUSH
51234: LD_INT 0
51236: ST_TO_ADDR
// hc_class := class_fish ;
51237: LD_ADDR_OWVAR 28
51241: PUSH
51242: LD_INT 20
51244: ST_TO_ADDR
// hc_gallery :=  ;
51245: LD_ADDR_OWVAR 33
51249: PUSH
51250: LD_STRING 
51252: ST_TO_ADDR
// end ;
51253: LD_VAR 0 1
51257: RET
// export function PrepareBird ( ) ; begin
51258: LD_INT 0
51260: PPUSH
// uc_side := 0 ;
51261: LD_ADDR_OWVAR 20
51265: PUSH
51266: LD_INT 0
51268: ST_TO_ADDR
// uc_nation := 0 ;
51269: LD_ADDR_OWVAR 21
51273: PUSH
51274: LD_INT 0
51276: ST_TO_ADDR
// hc_class := class_phororhacos ;
51277: LD_ADDR_OWVAR 28
51281: PUSH
51282: LD_INT 18
51284: ST_TO_ADDR
// hc_gallery :=  ;
51285: LD_ADDR_OWVAR 33
51289: PUSH
51290: LD_STRING 
51292: ST_TO_ADDR
// end ;
51293: LD_VAR 0 1
51297: RET
// export function PrepareHorse ( ) ; begin
51298: LD_INT 0
51300: PPUSH
// uc_side := 0 ;
51301: LD_ADDR_OWVAR 20
51305: PUSH
51306: LD_INT 0
51308: ST_TO_ADDR
// uc_nation := 0 ;
51309: LD_ADDR_OWVAR 21
51313: PUSH
51314: LD_INT 0
51316: ST_TO_ADDR
// hc_class := class_horse ;
51317: LD_ADDR_OWVAR 28
51321: PUSH
51322: LD_INT 21
51324: ST_TO_ADDR
// hc_gallery :=  ;
51325: LD_ADDR_OWVAR 33
51329: PUSH
51330: LD_STRING 
51332: ST_TO_ADDR
// end ;
51333: LD_VAR 0 1
51337: RET
// export function PrepareMastodont ( ) ; begin
51338: LD_INT 0
51340: PPUSH
// uc_side := 0 ;
51341: LD_ADDR_OWVAR 20
51345: PUSH
51346: LD_INT 0
51348: ST_TO_ADDR
// uc_nation := 0 ;
51349: LD_ADDR_OWVAR 21
51353: PUSH
51354: LD_INT 0
51356: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51357: LD_ADDR_OWVAR 37
51361: PUSH
51362: LD_INT 31
51364: ST_TO_ADDR
// vc_control := control_rider ;
51365: LD_ADDR_OWVAR 38
51369: PUSH
51370: LD_INT 4
51372: ST_TO_ADDR
// end ;
51373: LD_VAR 0 1
51377: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51378: LD_INT 0
51380: PPUSH
51381: PPUSH
51382: PPUSH
// uc_side = 0 ;
51383: LD_ADDR_OWVAR 20
51387: PUSH
51388: LD_INT 0
51390: ST_TO_ADDR
// uc_nation = 0 ;
51391: LD_ADDR_OWVAR 21
51395: PUSH
51396: LD_INT 0
51398: ST_TO_ADDR
// InitHc_All ( ) ;
51399: CALL_OW 584
// InitVc ;
51403: CALL_OW 20
// if mastodonts then
51407: LD_VAR 0 6
51411: IFFALSE 51478
// for i = 1 to mastodonts do
51413: LD_ADDR_VAR 0 11
51417: PUSH
51418: DOUBLE
51419: LD_INT 1
51421: DEC
51422: ST_TO_ADDR
51423: LD_VAR 0 6
51427: PUSH
51428: FOR_TO
51429: IFFALSE 51476
// begin vc_chassis := 31 ;
51431: LD_ADDR_OWVAR 37
51435: PUSH
51436: LD_INT 31
51438: ST_TO_ADDR
// vc_control := control_rider ;
51439: LD_ADDR_OWVAR 38
51443: PUSH
51444: LD_INT 4
51446: ST_TO_ADDR
// animal := CreateVehicle ;
51447: LD_ADDR_VAR 0 12
51451: PUSH
51452: CALL_OW 45
51456: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51457: LD_VAR 0 12
51461: PPUSH
51462: LD_VAR 0 8
51466: PPUSH
51467: LD_INT 0
51469: PPUSH
51470: CALL 53606 0 3
// end ;
51474: GO 51428
51476: POP
51477: POP
// if horses then
51478: LD_VAR 0 5
51482: IFFALSE 51549
// for i = 1 to horses do
51484: LD_ADDR_VAR 0 11
51488: PUSH
51489: DOUBLE
51490: LD_INT 1
51492: DEC
51493: ST_TO_ADDR
51494: LD_VAR 0 5
51498: PUSH
51499: FOR_TO
51500: IFFALSE 51547
// begin hc_class := 21 ;
51502: LD_ADDR_OWVAR 28
51506: PUSH
51507: LD_INT 21
51509: ST_TO_ADDR
// hc_gallery :=  ;
51510: LD_ADDR_OWVAR 33
51514: PUSH
51515: LD_STRING 
51517: ST_TO_ADDR
// animal := CreateHuman ;
51518: LD_ADDR_VAR 0 12
51522: PUSH
51523: CALL_OW 44
51527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51528: LD_VAR 0 12
51532: PPUSH
51533: LD_VAR 0 8
51537: PPUSH
51538: LD_INT 0
51540: PPUSH
51541: CALL 53606 0 3
// end ;
51545: GO 51499
51547: POP
51548: POP
// if birds then
51549: LD_VAR 0 1
51553: IFFALSE 51620
// for i = 1 to birds do
51555: LD_ADDR_VAR 0 11
51559: PUSH
51560: DOUBLE
51561: LD_INT 1
51563: DEC
51564: ST_TO_ADDR
51565: LD_VAR 0 1
51569: PUSH
51570: FOR_TO
51571: IFFALSE 51618
// begin hc_class := 18 ;
51573: LD_ADDR_OWVAR 28
51577: PUSH
51578: LD_INT 18
51580: ST_TO_ADDR
// hc_gallery =  ;
51581: LD_ADDR_OWVAR 33
51585: PUSH
51586: LD_STRING 
51588: ST_TO_ADDR
// animal := CreateHuman ;
51589: LD_ADDR_VAR 0 12
51593: PUSH
51594: CALL_OW 44
51598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51599: LD_VAR 0 12
51603: PPUSH
51604: LD_VAR 0 8
51608: PPUSH
51609: LD_INT 0
51611: PPUSH
51612: CALL 53606 0 3
// end ;
51616: GO 51570
51618: POP
51619: POP
// if tigers then
51620: LD_VAR 0 2
51624: IFFALSE 51708
// for i = 1 to tigers do
51626: LD_ADDR_VAR 0 11
51630: PUSH
51631: DOUBLE
51632: LD_INT 1
51634: DEC
51635: ST_TO_ADDR
51636: LD_VAR 0 2
51640: PUSH
51641: FOR_TO
51642: IFFALSE 51706
// begin hc_class = class_tiger ;
51644: LD_ADDR_OWVAR 28
51648: PUSH
51649: LD_INT 14
51651: ST_TO_ADDR
// hc_gallery =  ;
51652: LD_ADDR_OWVAR 33
51656: PUSH
51657: LD_STRING 
51659: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51660: LD_ADDR_OWVAR 35
51664: PUSH
51665: LD_INT 7
51667: NEG
51668: PPUSH
51669: LD_INT 7
51671: PPUSH
51672: CALL_OW 12
51676: ST_TO_ADDR
// animal := CreateHuman ;
51677: LD_ADDR_VAR 0 12
51681: PUSH
51682: CALL_OW 44
51686: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51687: LD_VAR 0 12
51691: PPUSH
51692: LD_VAR 0 8
51696: PPUSH
51697: LD_INT 0
51699: PPUSH
51700: CALL 53606 0 3
// end ;
51704: GO 51641
51706: POP
51707: POP
// if apemans then
51708: LD_VAR 0 3
51712: IFFALSE 51835
// for i = 1 to apemans do
51714: LD_ADDR_VAR 0 11
51718: PUSH
51719: DOUBLE
51720: LD_INT 1
51722: DEC
51723: ST_TO_ADDR
51724: LD_VAR 0 3
51728: PUSH
51729: FOR_TO
51730: IFFALSE 51833
// begin hc_class = class_apeman ;
51732: LD_ADDR_OWVAR 28
51736: PUSH
51737: LD_INT 12
51739: ST_TO_ADDR
// hc_gallery =  ;
51740: LD_ADDR_OWVAR 33
51744: PUSH
51745: LD_STRING 
51747: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51748: LD_ADDR_OWVAR 35
51752: PUSH
51753: LD_INT 2
51755: NEG
51756: PPUSH
51757: LD_INT 2
51759: PPUSH
51760: CALL_OW 12
51764: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51765: LD_ADDR_OWVAR 31
51769: PUSH
51770: LD_INT 1
51772: PPUSH
51773: LD_INT 3
51775: PPUSH
51776: CALL_OW 12
51780: PUSH
51781: LD_INT 1
51783: PPUSH
51784: LD_INT 3
51786: PPUSH
51787: CALL_OW 12
51791: PUSH
51792: LD_INT 0
51794: PUSH
51795: LD_INT 0
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: ST_TO_ADDR
// animal := CreateHuman ;
51804: LD_ADDR_VAR 0 12
51808: PUSH
51809: CALL_OW 44
51813: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51814: LD_VAR 0 12
51818: PPUSH
51819: LD_VAR 0 8
51823: PPUSH
51824: LD_INT 0
51826: PPUSH
51827: CALL 53606 0 3
// end ;
51831: GO 51729
51833: POP
51834: POP
// if enchidnas then
51835: LD_VAR 0 4
51839: IFFALSE 51906
// for i = 1 to enchidnas do
51841: LD_ADDR_VAR 0 11
51845: PUSH
51846: DOUBLE
51847: LD_INT 1
51849: DEC
51850: ST_TO_ADDR
51851: LD_VAR 0 4
51855: PUSH
51856: FOR_TO
51857: IFFALSE 51904
// begin hc_class = 13 ;
51859: LD_ADDR_OWVAR 28
51863: PUSH
51864: LD_INT 13
51866: ST_TO_ADDR
// hc_gallery =  ;
51867: LD_ADDR_OWVAR 33
51871: PUSH
51872: LD_STRING 
51874: ST_TO_ADDR
// animal := CreateHuman ;
51875: LD_ADDR_VAR 0 12
51879: PUSH
51880: CALL_OW 44
51884: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51885: LD_VAR 0 12
51889: PPUSH
51890: LD_VAR 0 8
51894: PPUSH
51895: LD_INT 0
51897: PPUSH
51898: CALL 53606 0 3
// end ;
51902: GO 51856
51904: POP
51905: POP
// if fishes then
51906: LD_VAR 0 7
51910: IFFALSE 51977
// for i = 1 to fishes do
51912: LD_ADDR_VAR 0 11
51916: PUSH
51917: DOUBLE
51918: LD_INT 1
51920: DEC
51921: ST_TO_ADDR
51922: LD_VAR 0 7
51926: PUSH
51927: FOR_TO
51928: IFFALSE 51975
// begin hc_class = 20 ;
51930: LD_ADDR_OWVAR 28
51934: PUSH
51935: LD_INT 20
51937: ST_TO_ADDR
// hc_gallery =  ;
51938: LD_ADDR_OWVAR 33
51942: PUSH
51943: LD_STRING 
51945: ST_TO_ADDR
// animal := CreateHuman ;
51946: LD_ADDR_VAR 0 12
51950: PUSH
51951: CALL_OW 44
51955: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51956: LD_VAR 0 12
51960: PPUSH
51961: LD_VAR 0 9
51965: PPUSH
51966: LD_INT 0
51968: PPUSH
51969: CALL 53606 0 3
// end ;
51973: GO 51927
51975: POP
51976: POP
// end ;
51977: LD_VAR 0 10
51981: RET
// export function WantHeal ( sci , unit ) ; begin
51982: LD_INT 0
51984: PPUSH
// if GetTaskList ( sci ) > 0 then
51985: LD_VAR 0 1
51989: PPUSH
51990: CALL_OW 437
51994: PUSH
51995: LD_INT 0
51997: GREATER
51998: IFFALSE 52068
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
52000: LD_VAR 0 1
52004: PPUSH
52005: CALL_OW 437
52009: PUSH
52010: LD_INT 1
52012: ARRAY
52013: PUSH
52014: LD_INT 1
52016: ARRAY
52017: PUSH
52018: LD_STRING l
52020: EQUAL
52021: PUSH
52022: LD_VAR 0 1
52026: PPUSH
52027: CALL_OW 437
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PUSH
52036: LD_INT 4
52038: ARRAY
52039: PUSH
52040: LD_VAR 0 2
52044: EQUAL
52045: AND
52046: IFFALSE 52058
// result := true else
52048: LD_ADDR_VAR 0 3
52052: PUSH
52053: LD_INT 1
52055: ST_TO_ADDR
52056: GO 52066
// result := false ;
52058: LD_ADDR_VAR 0 3
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
// end else
52066: GO 52076
// result := false ;
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_INT 0
52075: ST_TO_ADDR
// end ;
52076: LD_VAR 0 3
52080: RET
// export function HealTarget ( sci ) ; begin
52081: LD_INT 0
52083: PPUSH
// if not sci then
52084: LD_VAR 0 1
52088: NOT
52089: IFFALSE 52093
// exit ;
52091: GO 52158
// result := 0 ;
52093: LD_ADDR_VAR 0 2
52097: PUSH
52098: LD_INT 0
52100: ST_TO_ADDR
// if GetTaskList ( sci ) then
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL_OW 437
52110: IFFALSE 52158
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52112: LD_VAR 0 1
52116: PPUSH
52117: CALL_OW 437
52121: PUSH
52122: LD_INT 1
52124: ARRAY
52125: PUSH
52126: LD_INT 1
52128: ARRAY
52129: PUSH
52130: LD_STRING l
52132: EQUAL
52133: IFFALSE 52158
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52135: LD_ADDR_VAR 0 2
52139: PUSH
52140: LD_VAR 0 1
52144: PPUSH
52145: CALL_OW 437
52149: PUSH
52150: LD_INT 1
52152: ARRAY
52153: PUSH
52154: LD_INT 4
52156: ARRAY
52157: ST_TO_ADDR
// end ;
52158: LD_VAR 0 2
52162: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52163: LD_INT 0
52165: PPUSH
52166: PPUSH
52167: PPUSH
52168: PPUSH
// if not base_units then
52169: LD_VAR 0 1
52173: NOT
52174: IFFALSE 52178
// exit ;
52176: GO 52265
// result := false ;
52178: LD_ADDR_VAR 0 2
52182: PUSH
52183: LD_INT 0
52185: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52186: LD_ADDR_VAR 0 5
52190: PUSH
52191: LD_VAR 0 1
52195: PPUSH
52196: LD_INT 21
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PPUSH
52206: CALL_OW 72
52210: ST_TO_ADDR
// if not tmp then
52211: LD_VAR 0 5
52215: NOT
52216: IFFALSE 52220
// exit ;
52218: GO 52265
// for i in tmp do
52220: LD_ADDR_VAR 0 3
52224: PUSH
52225: LD_VAR 0 5
52229: PUSH
52230: FOR_IN
52231: IFFALSE 52263
// begin result := EnemyInRange ( i , 22 ) ;
52233: LD_ADDR_VAR 0 2
52237: PUSH
52238: LD_VAR 0 3
52242: PPUSH
52243: LD_INT 22
52245: PPUSH
52246: CALL 49852 0 2
52250: ST_TO_ADDR
// if result then
52251: LD_VAR 0 2
52255: IFFALSE 52261
// exit ;
52257: POP
52258: POP
52259: GO 52265
// end ;
52261: GO 52230
52263: POP
52264: POP
// end ;
52265: LD_VAR 0 2
52269: RET
// export function FilterByTag ( units , tag ) ; begin
52270: LD_INT 0
52272: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52273: LD_ADDR_VAR 0 3
52277: PUSH
52278: LD_VAR 0 1
52282: PPUSH
52283: LD_INT 120
52285: PUSH
52286: LD_VAR 0 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PPUSH
52295: CALL_OW 72
52299: ST_TO_ADDR
// end ;
52300: LD_VAR 0 3
52304: RET
// export function IsDriver ( un ) ; begin
52305: LD_INT 0
52307: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52308: LD_ADDR_VAR 0 2
52312: PUSH
52313: LD_VAR 0 1
52317: PUSH
52318: LD_INT 55
52320: PUSH
52321: EMPTY
52322: LIST
52323: PPUSH
52324: CALL_OW 69
52328: IN
52329: ST_TO_ADDR
// end ;
52330: LD_VAR 0 2
52334: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52335: LD_INT 0
52337: PPUSH
52338: PPUSH
// list := [ ] ;
52339: LD_ADDR_VAR 0 5
52343: PUSH
52344: EMPTY
52345: ST_TO_ADDR
// case d of 0 :
52346: LD_VAR 0 3
52350: PUSH
52351: LD_INT 0
52353: DOUBLE
52354: EQUAL
52355: IFTRUE 52359
52357: GO 52492
52359: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52360: LD_ADDR_VAR 0 5
52364: PUSH
52365: LD_VAR 0 1
52369: PUSH
52370: LD_INT 4
52372: MINUS
52373: PUSH
52374: LD_VAR 0 2
52378: PUSH
52379: LD_INT 4
52381: MINUS
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: PUSH
52391: LD_VAR 0 1
52395: PUSH
52396: LD_INT 3
52398: MINUS
52399: PUSH
52400: LD_VAR 0 2
52404: PUSH
52405: LD_INT 1
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: LIST
52412: PUSH
52413: LD_VAR 0 1
52417: PUSH
52418: LD_INT 4
52420: PLUS
52421: PUSH
52422: LD_VAR 0 2
52426: PUSH
52427: LD_INT 4
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: PUSH
52435: LD_VAR 0 1
52439: PUSH
52440: LD_INT 3
52442: PLUS
52443: PUSH
52444: LD_VAR 0 2
52448: PUSH
52449: LD_INT 3
52451: PLUS
52452: PUSH
52453: LD_INT 5
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: PUSH
52461: LD_VAR 0 1
52465: PUSH
52466: LD_VAR 0 2
52470: PUSH
52471: LD_INT 4
52473: PLUS
52474: PUSH
52475: LD_INT 0
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: ST_TO_ADDR
// end ; 1 :
52490: GO 53190
52492: LD_INT 1
52494: DOUBLE
52495: EQUAL
52496: IFTRUE 52500
52498: GO 52633
52500: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52501: LD_ADDR_VAR 0 5
52505: PUSH
52506: LD_VAR 0 1
52510: PUSH
52511: LD_VAR 0 2
52515: PUSH
52516: LD_INT 4
52518: MINUS
52519: PUSH
52520: LD_INT 3
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: LIST
52527: PUSH
52528: LD_VAR 0 1
52532: PUSH
52533: LD_INT 3
52535: MINUS
52536: PUSH
52537: LD_VAR 0 2
52541: PUSH
52542: LD_INT 3
52544: MINUS
52545: PUSH
52546: LD_INT 2
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: PUSH
52554: LD_VAR 0 1
52558: PUSH
52559: LD_INT 4
52561: MINUS
52562: PUSH
52563: LD_VAR 0 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: LIST
52575: PUSH
52576: LD_VAR 0 1
52580: PUSH
52581: LD_VAR 0 2
52585: PUSH
52586: LD_INT 3
52588: PLUS
52589: PUSH
52590: LD_INT 0
52592: PUSH
52593: EMPTY
52594: LIST
52595: LIST
52596: LIST
52597: PUSH
52598: LD_VAR 0 1
52602: PUSH
52603: LD_INT 4
52605: PLUS
52606: PUSH
52607: LD_VAR 0 2
52611: PUSH
52612: LD_INT 4
52614: PLUS
52615: PUSH
52616: LD_INT 5
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// end ; 2 :
52631: GO 53190
52633: LD_INT 2
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52641
52639: GO 52770
52641: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52642: LD_ADDR_VAR 0 5
52646: PUSH
52647: LD_VAR 0 1
52651: PUSH
52652: LD_VAR 0 2
52656: PUSH
52657: LD_INT 3
52659: MINUS
52660: PUSH
52661: LD_INT 3
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: LIST
52668: PUSH
52669: LD_VAR 0 1
52673: PUSH
52674: LD_INT 4
52676: PLUS
52677: PUSH
52678: LD_VAR 0 2
52682: PUSH
52683: LD_INT 4
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: LIST
52690: PUSH
52691: LD_VAR 0 1
52695: PUSH
52696: LD_VAR 0 2
52700: PUSH
52701: LD_INT 4
52703: PLUS
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: LIST
52712: PUSH
52713: LD_VAR 0 1
52717: PUSH
52718: LD_INT 3
52720: MINUS
52721: PUSH
52722: LD_VAR 0 2
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: LIST
52734: PUSH
52735: LD_VAR 0 1
52739: PUSH
52740: LD_INT 4
52742: MINUS
52743: PUSH
52744: LD_VAR 0 2
52748: PUSH
52749: LD_INT 4
52751: MINUS
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: LIST
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: ST_TO_ADDR
// end ; 3 :
52768: GO 53190
52770: LD_INT 3
52772: DOUBLE
52773: EQUAL
52774: IFTRUE 52778
52776: GO 52911
52778: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52779: LD_ADDR_VAR 0 5
52783: PUSH
52784: LD_VAR 0 1
52788: PUSH
52789: LD_INT 3
52791: PLUS
52792: PUSH
52793: LD_VAR 0 2
52797: PUSH
52798: LD_INT 4
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: PUSH
52806: LD_VAR 0 1
52810: PUSH
52811: LD_INT 4
52813: PLUS
52814: PUSH
52815: LD_VAR 0 2
52819: PUSH
52820: LD_INT 4
52822: PLUS
52823: PUSH
52824: LD_INT 5
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: LIST
52831: PUSH
52832: LD_VAR 0 1
52836: PUSH
52837: LD_INT 4
52839: MINUS
52840: PUSH
52841: LD_VAR 0 2
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: EMPTY
52850: LIST
52851: LIST
52852: LIST
52853: PUSH
52854: LD_VAR 0 1
52858: PUSH
52859: LD_VAR 0 2
52863: PUSH
52864: LD_INT 4
52866: MINUS
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: LIST
52875: PUSH
52876: LD_VAR 0 1
52880: PUSH
52881: LD_INT 3
52883: MINUS
52884: PUSH
52885: LD_VAR 0 2
52889: PUSH
52890: LD_INT 3
52892: MINUS
52893: PUSH
52894: LD_INT 2
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: LIST
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: ST_TO_ADDR
// end ; 4 :
52909: GO 53190
52911: LD_INT 4
52913: DOUBLE
52914: EQUAL
52915: IFTRUE 52919
52917: GO 53052
52919: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52920: LD_ADDR_VAR 0 5
52924: PUSH
52925: LD_VAR 0 1
52929: PUSH
52930: LD_VAR 0 2
52934: PUSH
52935: LD_INT 4
52937: PLUS
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: PUSH
52947: LD_VAR 0 1
52951: PUSH
52952: LD_INT 3
52954: PLUS
52955: PUSH
52956: LD_VAR 0 2
52960: PUSH
52961: LD_INT 3
52963: PLUS
52964: PUSH
52965: LD_INT 5
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: LIST
52972: PUSH
52973: LD_VAR 0 1
52977: PUSH
52978: LD_INT 4
52980: PLUS
52981: PUSH
52982: LD_VAR 0 2
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: LIST
52994: PUSH
52995: LD_VAR 0 1
52999: PUSH
53000: LD_VAR 0 2
53004: PUSH
53005: LD_INT 3
53007: MINUS
53008: PUSH
53009: LD_INT 3
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: LIST
53016: PUSH
53017: LD_VAR 0 1
53021: PUSH
53022: LD_INT 4
53024: MINUS
53025: PUSH
53026: LD_VAR 0 2
53030: PUSH
53031: LD_INT 4
53033: MINUS
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: LIST
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// end ; 5 :
53050: GO 53190
53052: LD_INT 5
53054: DOUBLE
53055: EQUAL
53056: IFTRUE 53060
53058: GO 53189
53060: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53061: LD_ADDR_VAR 0 5
53065: PUSH
53066: LD_VAR 0 1
53070: PUSH
53071: LD_INT 4
53073: MINUS
53074: PUSH
53075: LD_VAR 0 2
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: PUSH
53088: LD_VAR 0 1
53092: PUSH
53093: LD_VAR 0 2
53097: PUSH
53098: LD_INT 4
53100: MINUS
53101: PUSH
53102: LD_INT 3
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: LIST
53109: PUSH
53110: LD_VAR 0 1
53114: PUSH
53115: LD_INT 4
53117: PLUS
53118: PUSH
53119: LD_VAR 0 2
53123: PUSH
53124: LD_INT 4
53126: PLUS
53127: PUSH
53128: LD_INT 5
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: LIST
53135: PUSH
53136: LD_VAR 0 1
53140: PUSH
53141: LD_INT 3
53143: PLUS
53144: PUSH
53145: LD_VAR 0 2
53149: PUSH
53150: LD_INT 4
53152: PUSH
53153: EMPTY
53154: LIST
53155: LIST
53156: LIST
53157: PUSH
53158: LD_VAR 0 1
53162: PUSH
53163: LD_VAR 0 2
53167: PUSH
53168: LD_INT 3
53170: PLUS
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: LIST
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// end ; end ;
53187: GO 53190
53189: POP
// result := list ;
53190: LD_ADDR_VAR 0 4
53194: PUSH
53195: LD_VAR 0 5
53199: ST_TO_ADDR
// end ;
53200: LD_VAR 0 4
53204: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53205: LD_INT 0
53207: PPUSH
53208: PPUSH
53209: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53210: LD_VAR 0 1
53214: NOT
53215: PUSH
53216: LD_VAR 0 2
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 3
53229: PUSH
53230: LD_INT 4
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: IN
53239: NOT
53240: OR
53241: IFFALSE 53245
// exit ;
53243: GO 53328
// tmp := [ ] ;
53245: LD_ADDR_VAR 0 5
53249: PUSH
53250: EMPTY
53251: ST_TO_ADDR
// for i in units do
53252: LD_ADDR_VAR 0 4
53256: PUSH
53257: LD_VAR 0 1
53261: PUSH
53262: FOR_IN
53263: IFFALSE 53297
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53265: LD_ADDR_VAR 0 5
53269: PUSH
53270: LD_VAR 0 5
53274: PPUSH
53275: LD_VAR 0 4
53279: PPUSH
53280: LD_VAR 0 2
53284: PPUSH
53285: CALL_OW 259
53289: PPUSH
53290: CALL 54701 0 2
53294: ST_TO_ADDR
53295: GO 53262
53297: POP
53298: POP
// if not tmp then
53299: LD_VAR 0 5
53303: NOT
53304: IFFALSE 53308
// exit ;
53306: GO 53328
// result := SortListByListDesc ( units , tmp ) ;
53308: LD_ADDR_VAR 0 3
53312: PUSH
53313: LD_VAR 0 1
53317: PPUSH
53318: LD_VAR 0 5
53322: PPUSH
53323: CALL_OW 77
53327: ST_TO_ADDR
// end ;
53328: LD_VAR 0 3
53332: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53333: LD_INT 0
53335: PPUSH
53336: PPUSH
53337: PPUSH
// result := false ;
53338: LD_ADDR_VAR 0 3
53342: PUSH
53343: LD_INT 0
53345: ST_TO_ADDR
// if not building then
53346: LD_VAR 0 2
53350: NOT
53351: IFFALSE 53355
// exit ;
53353: GO 53493
// x := GetX ( building ) ;
53355: LD_ADDR_VAR 0 4
53359: PUSH
53360: LD_VAR 0 2
53364: PPUSH
53365: CALL_OW 250
53369: ST_TO_ADDR
// y := GetY ( building ) ;
53370: LD_ADDR_VAR 0 5
53374: PUSH
53375: LD_VAR 0 2
53379: PPUSH
53380: CALL_OW 251
53384: ST_TO_ADDR
// if not x or not y then
53385: LD_VAR 0 4
53389: NOT
53390: PUSH
53391: LD_VAR 0 5
53395: NOT
53396: OR
53397: IFFALSE 53401
// exit ;
53399: GO 53493
// if GetTaskList ( unit ) then
53401: LD_VAR 0 1
53405: PPUSH
53406: CALL_OW 437
53410: IFFALSE 53493
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53412: LD_STRING e
53414: PUSH
53415: LD_VAR 0 1
53419: PPUSH
53420: CALL_OW 437
53424: PUSH
53425: LD_INT 1
53427: ARRAY
53428: PUSH
53429: LD_INT 1
53431: ARRAY
53432: EQUAL
53433: PUSH
53434: LD_VAR 0 4
53438: PUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL_OW 437
53448: PUSH
53449: LD_INT 1
53451: ARRAY
53452: PUSH
53453: LD_INT 2
53455: ARRAY
53456: EQUAL
53457: AND
53458: PUSH
53459: LD_VAR 0 5
53463: PUSH
53464: LD_VAR 0 1
53468: PPUSH
53469: CALL_OW 437
53473: PUSH
53474: LD_INT 1
53476: ARRAY
53477: PUSH
53478: LD_INT 3
53480: ARRAY
53481: EQUAL
53482: AND
53483: IFFALSE 53493
// result := true end ;
53485: LD_ADDR_VAR 0 3
53489: PUSH
53490: LD_INT 1
53492: ST_TO_ADDR
// end ;
53493: LD_VAR 0 3
53497: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53498: LD_INT 0
53500: PPUSH
// result := false ;
53501: LD_ADDR_VAR 0 4
53505: PUSH
53506: LD_INT 0
53508: ST_TO_ADDR
// if GetTaskList ( unit ) then
53509: LD_VAR 0 1
53513: PPUSH
53514: CALL_OW 437
53518: IFFALSE 53601
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53520: LD_STRING M
53522: PUSH
53523: LD_VAR 0 1
53527: PPUSH
53528: CALL_OW 437
53532: PUSH
53533: LD_INT 1
53535: ARRAY
53536: PUSH
53537: LD_INT 1
53539: ARRAY
53540: EQUAL
53541: PUSH
53542: LD_VAR 0 2
53546: PUSH
53547: LD_VAR 0 1
53551: PPUSH
53552: CALL_OW 437
53556: PUSH
53557: LD_INT 1
53559: ARRAY
53560: PUSH
53561: LD_INT 2
53563: ARRAY
53564: EQUAL
53565: AND
53566: PUSH
53567: LD_VAR 0 3
53571: PUSH
53572: LD_VAR 0 1
53576: PPUSH
53577: CALL_OW 437
53581: PUSH
53582: LD_INT 1
53584: ARRAY
53585: PUSH
53586: LD_INT 3
53588: ARRAY
53589: EQUAL
53590: AND
53591: IFFALSE 53601
// result := true ;
53593: LD_ADDR_VAR 0 4
53597: PUSH
53598: LD_INT 1
53600: ST_TO_ADDR
// end ; end ;
53601: LD_VAR 0 4
53605: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53606: LD_INT 0
53608: PPUSH
53609: PPUSH
53610: PPUSH
53611: PPUSH
// if not unit or not area then
53612: LD_VAR 0 1
53616: NOT
53617: PUSH
53618: LD_VAR 0 2
53622: NOT
53623: OR
53624: IFFALSE 53628
// exit ;
53626: GO 53804
// tmp := AreaToList ( area , i ) ;
53628: LD_ADDR_VAR 0 6
53632: PUSH
53633: LD_VAR 0 2
53637: PPUSH
53638: LD_VAR 0 5
53642: PPUSH
53643: CALL_OW 517
53647: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53648: LD_ADDR_VAR 0 5
53652: PUSH
53653: DOUBLE
53654: LD_INT 1
53656: DEC
53657: ST_TO_ADDR
53658: LD_VAR 0 6
53662: PUSH
53663: LD_INT 1
53665: ARRAY
53666: PUSH
53667: FOR_TO
53668: IFFALSE 53802
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53670: LD_ADDR_VAR 0 7
53674: PUSH
53675: LD_VAR 0 6
53679: PUSH
53680: LD_INT 1
53682: ARRAY
53683: PUSH
53684: LD_VAR 0 5
53688: ARRAY
53689: PUSH
53690: LD_VAR 0 6
53694: PUSH
53695: LD_INT 2
53697: ARRAY
53698: PUSH
53699: LD_VAR 0 5
53703: ARRAY
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53709: LD_INT 92
53711: PUSH
53712: LD_VAR 0 7
53716: PUSH
53717: LD_INT 1
53719: ARRAY
53720: PUSH
53721: LD_VAR 0 7
53725: PUSH
53726: LD_INT 2
53728: ARRAY
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: PPUSH
53739: CALL_OW 69
53743: PUSH
53744: LD_INT 0
53746: EQUAL
53747: IFFALSE 53800
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53749: LD_VAR 0 1
53753: PPUSH
53754: LD_VAR 0 7
53758: PUSH
53759: LD_INT 1
53761: ARRAY
53762: PPUSH
53763: LD_VAR 0 7
53767: PUSH
53768: LD_INT 2
53770: ARRAY
53771: PPUSH
53772: LD_VAR 0 3
53776: PPUSH
53777: CALL_OW 48
// result := IsPlaced ( unit ) ;
53781: LD_ADDR_VAR 0 4
53785: PUSH
53786: LD_VAR 0 1
53790: PPUSH
53791: CALL_OW 305
53795: ST_TO_ADDR
// exit ;
53796: POP
53797: POP
53798: GO 53804
// end ; end ;
53800: GO 53667
53802: POP
53803: POP
// end ;
53804: LD_VAR 0 4
53808: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53809: LD_INT 0
53811: PPUSH
53812: PPUSH
53813: PPUSH
// if not side or side > 8 then
53814: LD_VAR 0 1
53818: NOT
53819: PUSH
53820: LD_VAR 0 1
53824: PUSH
53825: LD_INT 8
53827: GREATER
53828: OR
53829: IFFALSE 53833
// exit ;
53831: GO 54020
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53833: LD_ADDR_VAR 0 4
53837: PUSH
53838: LD_INT 22
53840: PUSH
53841: LD_VAR 0 1
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 21
53852: PUSH
53853: LD_INT 3
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PPUSH
53864: CALL_OW 69
53868: ST_TO_ADDR
// if not tmp then
53869: LD_VAR 0 4
53873: NOT
53874: IFFALSE 53878
// exit ;
53876: GO 54020
// enable_addtolog := true ;
53878: LD_ADDR_OWVAR 81
53882: PUSH
53883: LD_INT 1
53885: ST_TO_ADDR
// AddToLog ( [ ) ;
53886: LD_STRING [
53888: PPUSH
53889: CALL_OW 561
// for i in tmp do
53893: LD_ADDR_VAR 0 3
53897: PUSH
53898: LD_VAR 0 4
53902: PUSH
53903: FOR_IN
53904: IFFALSE 54011
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53906: LD_STRING [
53908: PUSH
53909: LD_VAR 0 3
53913: PPUSH
53914: CALL_OW 266
53918: STR
53919: PUSH
53920: LD_STRING , 
53922: STR
53923: PUSH
53924: LD_VAR 0 3
53928: PPUSH
53929: CALL_OW 250
53933: STR
53934: PUSH
53935: LD_STRING , 
53937: STR
53938: PUSH
53939: LD_VAR 0 3
53943: PPUSH
53944: CALL_OW 251
53948: STR
53949: PUSH
53950: LD_STRING , 
53952: STR
53953: PUSH
53954: LD_VAR 0 3
53958: PPUSH
53959: CALL_OW 254
53963: STR
53964: PUSH
53965: LD_STRING , 
53967: STR
53968: PUSH
53969: LD_VAR 0 3
53973: PPUSH
53974: LD_INT 1
53976: PPUSH
53977: CALL_OW 268
53981: STR
53982: PUSH
53983: LD_STRING , 
53985: STR
53986: PUSH
53987: LD_VAR 0 3
53991: PPUSH
53992: LD_INT 2
53994: PPUSH
53995: CALL_OW 268
53999: STR
54000: PUSH
54001: LD_STRING ],
54003: STR
54004: PPUSH
54005: CALL_OW 561
// end ;
54009: GO 53903
54011: POP
54012: POP
// AddToLog ( ]; ) ;
54013: LD_STRING ];
54015: PPUSH
54016: CALL_OW 561
// end ;
54020: LD_VAR 0 2
54024: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54025: LD_INT 0
54027: PPUSH
54028: PPUSH
54029: PPUSH
54030: PPUSH
54031: PPUSH
// if not area or not rate or not max then
54032: LD_VAR 0 1
54036: NOT
54037: PUSH
54038: LD_VAR 0 2
54042: NOT
54043: OR
54044: PUSH
54045: LD_VAR 0 4
54049: NOT
54050: OR
54051: IFFALSE 54055
// exit ;
54053: GO 54244
// while 1 do
54055: LD_INT 1
54057: IFFALSE 54244
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54059: LD_ADDR_VAR 0 9
54063: PUSH
54064: LD_VAR 0 1
54068: PPUSH
54069: LD_INT 1
54071: PPUSH
54072: CALL_OW 287
54076: PUSH
54077: LD_INT 10
54079: MUL
54080: ST_TO_ADDR
// r := rate / 10 ;
54081: LD_ADDR_VAR 0 7
54085: PUSH
54086: LD_VAR 0 2
54090: PUSH
54091: LD_INT 10
54093: DIVREAL
54094: ST_TO_ADDR
// time := 1 1$00 ;
54095: LD_ADDR_VAR 0 8
54099: PUSH
54100: LD_INT 2100
54102: ST_TO_ADDR
// if amount < min then
54103: LD_VAR 0 9
54107: PUSH
54108: LD_VAR 0 3
54112: LESS
54113: IFFALSE 54131
// r := r * 2 else
54115: LD_ADDR_VAR 0 7
54119: PUSH
54120: LD_VAR 0 7
54124: PUSH
54125: LD_INT 2
54127: MUL
54128: ST_TO_ADDR
54129: GO 54157
// if amount > max then
54131: LD_VAR 0 9
54135: PUSH
54136: LD_VAR 0 4
54140: GREATER
54141: IFFALSE 54157
// r := r / 2 ;
54143: LD_ADDR_VAR 0 7
54147: PUSH
54148: LD_VAR 0 7
54152: PUSH
54153: LD_INT 2
54155: DIVREAL
54156: ST_TO_ADDR
// time := time / r ;
54157: LD_ADDR_VAR 0 8
54161: PUSH
54162: LD_VAR 0 8
54166: PUSH
54167: LD_VAR 0 7
54171: DIVREAL
54172: ST_TO_ADDR
// if time < 0 then
54173: LD_VAR 0 8
54177: PUSH
54178: LD_INT 0
54180: LESS
54181: IFFALSE 54198
// time := time * - 1 ;
54183: LD_ADDR_VAR 0 8
54187: PUSH
54188: LD_VAR 0 8
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: MUL
54197: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54198: LD_VAR 0 8
54202: PUSH
54203: LD_INT 35
54205: PPUSH
54206: LD_INT 875
54208: PPUSH
54209: CALL_OW 12
54213: PLUS
54214: PPUSH
54215: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54219: LD_INT 1
54221: PPUSH
54222: LD_INT 5
54224: PPUSH
54225: CALL_OW 12
54229: PPUSH
54230: LD_VAR 0 1
54234: PPUSH
54235: LD_INT 1
54237: PPUSH
54238: CALL_OW 55
// end ;
54242: GO 54055
// end ;
54244: LD_VAR 0 5
54248: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54249: LD_INT 0
54251: PPUSH
54252: PPUSH
54253: PPUSH
54254: PPUSH
54255: PPUSH
54256: PPUSH
54257: PPUSH
54258: PPUSH
// if not turrets or not factories then
54259: LD_VAR 0 1
54263: NOT
54264: PUSH
54265: LD_VAR 0 2
54269: NOT
54270: OR
54271: IFFALSE 54275
// exit ;
54273: GO 54582
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54275: LD_ADDR_VAR 0 10
54279: PUSH
54280: LD_INT 5
54282: PUSH
54283: LD_INT 6
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 2
54292: PUSH
54293: LD_INT 4
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 5
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 24
54317: PUSH
54318: LD_INT 25
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 23
54327: PUSH
54328: LD_INT 27
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 42
54341: PUSH
54342: LD_INT 43
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 44
54351: PUSH
54352: LD_INT 46
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 45
54361: PUSH
54362: LD_INT 47
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: LIST
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: LIST
54378: ST_TO_ADDR
// result := [ ] ;
54379: LD_ADDR_VAR 0 3
54383: PUSH
54384: EMPTY
54385: ST_TO_ADDR
// for i in turrets do
54386: LD_ADDR_VAR 0 4
54390: PUSH
54391: LD_VAR 0 1
54395: PUSH
54396: FOR_IN
54397: IFFALSE 54580
// begin nat := GetNation ( i ) ;
54399: LD_ADDR_VAR 0 7
54403: PUSH
54404: LD_VAR 0 4
54408: PPUSH
54409: CALL_OW 248
54413: ST_TO_ADDR
// weapon := 0 ;
54414: LD_ADDR_VAR 0 8
54418: PUSH
54419: LD_INT 0
54421: ST_TO_ADDR
// if not nat then
54422: LD_VAR 0 7
54426: NOT
54427: IFFALSE 54431
// continue ;
54429: GO 54396
// for j in list [ nat ] do
54431: LD_ADDR_VAR 0 5
54435: PUSH
54436: LD_VAR 0 10
54440: PUSH
54441: LD_VAR 0 7
54445: ARRAY
54446: PUSH
54447: FOR_IN
54448: IFFALSE 54489
// if GetBWeapon ( i ) = j [ 1 ] then
54450: LD_VAR 0 4
54454: PPUSH
54455: CALL_OW 269
54459: PUSH
54460: LD_VAR 0 5
54464: PUSH
54465: LD_INT 1
54467: ARRAY
54468: EQUAL
54469: IFFALSE 54487
// begin weapon := j [ 2 ] ;
54471: LD_ADDR_VAR 0 8
54475: PUSH
54476: LD_VAR 0 5
54480: PUSH
54481: LD_INT 2
54483: ARRAY
54484: ST_TO_ADDR
// break ;
54485: GO 54489
// end ;
54487: GO 54447
54489: POP
54490: POP
// if not weapon then
54491: LD_VAR 0 8
54495: NOT
54496: IFFALSE 54500
// continue ;
54498: GO 54396
// for k in factories do
54500: LD_ADDR_VAR 0 6
54504: PUSH
54505: LD_VAR 0 2
54509: PUSH
54510: FOR_IN
54511: IFFALSE 54576
// begin weapons := AvailableWeaponList ( k ) ;
54513: LD_ADDR_VAR 0 9
54517: PUSH
54518: LD_VAR 0 6
54522: PPUSH
54523: CALL_OW 478
54527: ST_TO_ADDR
// if not weapons then
54528: LD_VAR 0 9
54532: NOT
54533: IFFALSE 54537
// continue ;
54535: GO 54510
// if weapon in weapons then
54537: LD_VAR 0 8
54541: PUSH
54542: LD_VAR 0 9
54546: IN
54547: IFFALSE 54574
// begin result := [ i , weapon ] ;
54549: LD_ADDR_VAR 0 3
54553: PUSH
54554: LD_VAR 0 4
54558: PUSH
54559: LD_VAR 0 8
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: ST_TO_ADDR
// exit ;
54568: POP
54569: POP
54570: POP
54571: POP
54572: GO 54582
// end ; end ;
54574: GO 54510
54576: POP
54577: POP
// end ;
54578: GO 54396
54580: POP
54581: POP
// end ;
54582: LD_VAR 0 3
54586: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54587: LD_INT 0
54589: PPUSH
// if not side or side > 8 then
54590: LD_VAR 0 3
54594: NOT
54595: PUSH
54596: LD_VAR 0 3
54600: PUSH
54601: LD_INT 8
54603: GREATER
54604: OR
54605: IFFALSE 54609
// exit ;
54607: GO 54668
// if not range then
54609: LD_VAR 0 4
54613: NOT
54614: IFFALSE 54625
// range := - 12 ;
54616: LD_ADDR_VAR 0 4
54620: PUSH
54621: LD_INT 12
54623: NEG
54624: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54625: LD_VAR 0 1
54629: PPUSH
54630: LD_VAR 0 2
54634: PPUSH
54635: LD_VAR 0 3
54639: PPUSH
54640: LD_VAR 0 4
54644: PPUSH
54645: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54649: LD_VAR 0 1
54653: PPUSH
54654: LD_VAR 0 2
54658: PPUSH
54659: LD_VAR 0 3
54663: PPUSH
54664: CALL_OW 331
// end ;
54668: LD_VAR 0 5
54672: RET
// export function Video ( mode ) ; begin
54673: LD_INT 0
54675: PPUSH
// ingame_video = mode ;
54676: LD_ADDR_OWVAR 52
54680: PUSH
54681: LD_VAR 0 1
54685: ST_TO_ADDR
// interface_hidden = mode ;
54686: LD_ADDR_OWVAR 54
54690: PUSH
54691: LD_VAR 0 1
54695: ST_TO_ADDR
// end ;
54696: LD_VAR 0 2
54700: RET
// export function Join ( array , element ) ; begin
54701: LD_INT 0
54703: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54704: LD_ADDR_VAR 0 3
54708: PUSH
54709: LD_VAR 0 1
54713: PPUSH
54714: LD_VAR 0 1
54718: PUSH
54719: LD_INT 1
54721: PLUS
54722: PPUSH
54723: LD_VAR 0 2
54727: PPUSH
54728: CALL_OW 1
54732: ST_TO_ADDR
// end ;
54733: LD_VAR 0 3
54737: RET
// export function JoinUnion ( array , element ) ; begin
54738: LD_INT 0
54740: PPUSH
// result := array union element ;
54741: LD_ADDR_VAR 0 3
54745: PUSH
54746: LD_VAR 0 1
54750: PUSH
54751: LD_VAR 0 2
54755: UNION
54756: ST_TO_ADDR
// end ;
54757: LD_VAR 0 3
54761: RET
// export function GetBehemoths ( side ) ; begin
54762: LD_INT 0
54764: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54765: LD_ADDR_VAR 0 2
54769: PUSH
54770: LD_INT 22
54772: PUSH
54773: LD_VAR 0 1
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 31
54784: PUSH
54785: LD_INT 25
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PPUSH
54796: CALL_OW 69
54800: ST_TO_ADDR
// end ;
54801: LD_VAR 0 2
54805: RET
// export function Shuffle ( array ) ; var i , index ; begin
54806: LD_INT 0
54808: PPUSH
54809: PPUSH
54810: PPUSH
// result := [ ] ;
54811: LD_ADDR_VAR 0 2
54815: PUSH
54816: EMPTY
54817: ST_TO_ADDR
// if not array then
54818: LD_VAR 0 1
54822: NOT
54823: IFFALSE 54827
// exit ;
54825: GO 54926
// Randomize ;
54827: CALL_OW 10
// for i = array downto 1 do
54831: LD_ADDR_VAR 0 3
54835: PUSH
54836: DOUBLE
54837: LD_VAR 0 1
54841: INC
54842: ST_TO_ADDR
54843: LD_INT 1
54845: PUSH
54846: FOR_DOWNTO
54847: IFFALSE 54924
// begin index := rand ( 1 , array ) ;
54849: LD_ADDR_VAR 0 4
54853: PUSH
54854: LD_INT 1
54856: PPUSH
54857: LD_VAR 0 1
54861: PPUSH
54862: CALL_OW 12
54866: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54867: LD_ADDR_VAR 0 2
54871: PUSH
54872: LD_VAR 0 2
54876: PPUSH
54877: LD_VAR 0 2
54881: PUSH
54882: LD_INT 1
54884: PLUS
54885: PPUSH
54886: LD_VAR 0 1
54890: PUSH
54891: LD_VAR 0 4
54895: ARRAY
54896: PPUSH
54897: CALL_OW 2
54901: ST_TO_ADDR
// array := Delete ( array , index ) ;
54902: LD_ADDR_VAR 0 1
54906: PUSH
54907: LD_VAR 0 1
54911: PPUSH
54912: LD_VAR 0 4
54916: PPUSH
54917: CALL_OW 3
54921: ST_TO_ADDR
// end ;
54922: GO 54846
54924: POP
54925: POP
// end ;
54926: LD_VAR 0 2
54930: RET
// export function GetBaseMaterials ( base ) ; begin
54931: LD_INT 0
54933: PPUSH
// result := [ 0 , 0 , 0 ] ;
54934: LD_ADDR_VAR 0 2
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// if not base then
54953: LD_VAR 0 1
54957: NOT
54958: IFFALSE 54962
// exit ;
54960: GO 55011
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54962: LD_ADDR_VAR 0 2
54966: PUSH
54967: LD_VAR 0 1
54971: PPUSH
54972: LD_INT 1
54974: PPUSH
54975: CALL_OW 275
54979: PUSH
54980: LD_VAR 0 1
54984: PPUSH
54985: LD_INT 2
54987: PPUSH
54988: CALL_OW 275
54992: PUSH
54993: LD_VAR 0 1
54997: PPUSH
54998: LD_INT 3
55000: PPUSH
55001: CALL_OW 275
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: LIST
55010: ST_TO_ADDR
// end ;
55011: LD_VAR 0 2
55015: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55016: LD_INT 0
55018: PPUSH
55019: PPUSH
// result := array ;
55020: LD_ADDR_VAR 0 3
55024: PUSH
55025: LD_VAR 0 1
55029: ST_TO_ADDR
// if size >= result then
55030: LD_VAR 0 2
55034: PUSH
55035: LD_VAR 0 3
55039: GREATEREQUAL
55040: IFFALSE 55044
// exit ;
55042: GO 55094
// if size then
55044: LD_VAR 0 2
55048: IFFALSE 55094
// for i := array downto size do
55050: LD_ADDR_VAR 0 4
55054: PUSH
55055: DOUBLE
55056: LD_VAR 0 1
55060: INC
55061: ST_TO_ADDR
55062: LD_VAR 0 2
55066: PUSH
55067: FOR_DOWNTO
55068: IFFALSE 55092
// result := Delete ( result , result ) ;
55070: LD_ADDR_VAR 0 3
55074: PUSH
55075: LD_VAR 0 3
55079: PPUSH
55080: LD_VAR 0 3
55084: PPUSH
55085: CALL_OW 3
55089: ST_TO_ADDR
55090: GO 55067
55092: POP
55093: POP
// end ;
55094: LD_VAR 0 3
55098: RET
// export function ComExit ( unit ) ; var tmp ; begin
55099: LD_INT 0
55101: PPUSH
55102: PPUSH
// if not IsInUnit ( unit ) then
55103: LD_VAR 0 1
55107: PPUSH
55108: CALL_OW 310
55112: NOT
55113: IFFALSE 55117
// exit ;
55115: GO 55177
// tmp := IsInUnit ( unit ) ;
55117: LD_ADDR_VAR 0 3
55121: PUSH
55122: LD_VAR 0 1
55126: PPUSH
55127: CALL_OW 310
55131: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55132: LD_VAR 0 3
55136: PPUSH
55137: CALL_OW 247
55141: PUSH
55142: LD_INT 2
55144: EQUAL
55145: IFFALSE 55158
// ComExitVehicle ( unit ) else
55147: LD_VAR 0 1
55151: PPUSH
55152: CALL_OW 121
55156: GO 55167
// ComExitBuilding ( unit ) ;
55158: LD_VAR 0 1
55162: PPUSH
55163: CALL_OW 122
// result := tmp ;
55167: LD_ADDR_VAR 0 2
55171: PUSH
55172: LD_VAR 0 3
55176: ST_TO_ADDR
// end ;
55177: LD_VAR 0 2
55181: RET
// export function ComExitAll ( units ) ; var i ; begin
55182: LD_INT 0
55184: PPUSH
55185: PPUSH
// if not units then
55186: LD_VAR 0 1
55190: NOT
55191: IFFALSE 55195
// exit ;
55193: GO 55221
// for i in units do
55195: LD_ADDR_VAR 0 3
55199: PUSH
55200: LD_VAR 0 1
55204: PUSH
55205: FOR_IN
55206: IFFALSE 55219
// ComExit ( i ) ;
55208: LD_VAR 0 3
55212: PPUSH
55213: CALL 55099 0 1
55217: GO 55205
55219: POP
55220: POP
// end ;
55221: LD_VAR 0 2
55225: RET
// export function ResetHc ; begin
55226: LD_INT 0
55228: PPUSH
// InitHc ;
55229: CALL_OW 19
// hc_importance := 0 ;
55233: LD_ADDR_OWVAR 32
55237: PUSH
55238: LD_INT 0
55240: ST_TO_ADDR
// end ;
55241: LD_VAR 0 1
55245: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55246: LD_INT 0
55248: PPUSH
55249: PPUSH
55250: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55251: LD_ADDR_VAR 0 6
55255: PUSH
55256: LD_VAR 0 1
55260: PUSH
55261: LD_VAR 0 3
55265: PLUS
55266: PUSH
55267: LD_INT 2
55269: DIV
55270: ST_TO_ADDR
// if _x < 0 then
55271: LD_VAR 0 6
55275: PUSH
55276: LD_INT 0
55278: LESS
55279: IFFALSE 55296
// _x := _x * - 1 ;
55281: LD_ADDR_VAR 0 6
55285: PUSH
55286: LD_VAR 0 6
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: MUL
55295: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55296: LD_ADDR_VAR 0 7
55300: PUSH
55301: LD_VAR 0 2
55305: PUSH
55306: LD_VAR 0 4
55310: PLUS
55311: PUSH
55312: LD_INT 2
55314: DIV
55315: ST_TO_ADDR
// if _y < 0 then
55316: LD_VAR 0 7
55320: PUSH
55321: LD_INT 0
55323: LESS
55324: IFFALSE 55341
// _y := _y * - 1 ;
55326: LD_ADDR_VAR 0 7
55330: PUSH
55331: LD_VAR 0 7
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: MUL
55340: ST_TO_ADDR
// result := [ _x , _y ] ;
55341: LD_ADDR_VAR 0 5
55345: PUSH
55346: LD_VAR 0 6
55350: PUSH
55351: LD_VAR 0 7
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: ST_TO_ADDR
// end ;
55360: LD_VAR 0 5
55364: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55365: LD_INT 0
55367: PPUSH
55368: PPUSH
55369: PPUSH
55370: PPUSH
// task := GetTaskList ( unit ) ;
55371: LD_ADDR_VAR 0 7
55375: PUSH
55376: LD_VAR 0 1
55380: PPUSH
55381: CALL_OW 437
55385: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55386: LD_VAR 0 7
55390: NOT
55391: PUSH
55392: LD_VAR 0 1
55396: PPUSH
55397: LD_VAR 0 2
55401: PPUSH
55402: CALL_OW 308
55406: NOT
55407: AND
55408: IFFALSE 55412
// exit ;
55410: GO 55530
// if IsInArea ( unit , area ) then
55412: LD_VAR 0 1
55416: PPUSH
55417: LD_VAR 0 2
55421: PPUSH
55422: CALL_OW 308
55426: IFFALSE 55444
// begin ComMoveToArea ( unit , goAway ) ;
55428: LD_VAR 0 1
55432: PPUSH
55433: LD_VAR 0 3
55437: PPUSH
55438: CALL_OW 113
// exit ;
55442: GO 55530
// end ; if task [ 1 ] [ 1 ] <> M then
55444: LD_VAR 0 7
55448: PUSH
55449: LD_INT 1
55451: ARRAY
55452: PUSH
55453: LD_INT 1
55455: ARRAY
55456: PUSH
55457: LD_STRING M
55459: NONEQUAL
55460: IFFALSE 55464
// exit ;
55462: GO 55530
// x := task [ 1 ] [ 2 ] ;
55464: LD_ADDR_VAR 0 5
55468: PUSH
55469: LD_VAR 0 7
55473: PUSH
55474: LD_INT 1
55476: ARRAY
55477: PUSH
55478: LD_INT 2
55480: ARRAY
55481: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55482: LD_ADDR_VAR 0 6
55486: PUSH
55487: LD_VAR 0 7
55491: PUSH
55492: LD_INT 1
55494: ARRAY
55495: PUSH
55496: LD_INT 3
55498: ARRAY
55499: ST_TO_ADDR
// if InArea ( x , y , area ) then
55500: LD_VAR 0 5
55504: PPUSH
55505: LD_VAR 0 6
55509: PPUSH
55510: LD_VAR 0 2
55514: PPUSH
55515: CALL_OW 309
55519: IFFALSE 55530
// ComStop ( unit ) ;
55521: LD_VAR 0 1
55525: PPUSH
55526: CALL_OW 141
// end ;
55530: LD_VAR 0 4
55534: RET
// export function Abs ( value ) ; begin
55535: LD_INT 0
55537: PPUSH
// result := value ;
55538: LD_ADDR_VAR 0 2
55542: PUSH
55543: LD_VAR 0 1
55547: ST_TO_ADDR
// if value < 0 then
55548: LD_VAR 0 1
55552: PUSH
55553: LD_INT 0
55555: LESS
55556: IFFALSE 55573
// result := value * - 1 ;
55558: LD_ADDR_VAR 0 2
55562: PUSH
55563: LD_VAR 0 1
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: MUL
55572: ST_TO_ADDR
// end ;
55573: LD_VAR 0 2
55577: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55578: LD_INT 0
55580: PPUSH
55581: PPUSH
55582: PPUSH
55583: PPUSH
55584: PPUSH
55585: PPUSH
55586: PPUSH
55587: PPUSH
// if not unit or not building then
55588: LD_VAR 0 1
55592: NOT
55593: PUSH
55594: LD_VAR 0 2
55598: NOT
55599: OR
55600: IFFALSE 55604
// exit ;
55602: GO 55830
// x := GetX ( building ) ;
55604: LD_ADDR_VAR 0 4
55608: PUSH
55609: LD_VAR 0 2
55613: PPUSH
55614: CALL_OW 250
55618: ST_TO_ADDR
// y := GetY ( building ) ;
55619: LD_ADDR_VAR 0 6
55623: PUSH
55624: LD_VAR 0 2
55628: PPUSH
55629: CALL_OW 251
55633: ST_TO_ADDR
// d := GetDir ( building ) ;
55634: LD_ADDR_VAR 0 8
55638: PUSH
55639: LD_VAR 0 2
55643: PPUSH
55644: CALL_OW 254
55648: ST_TO_ADDR
// r := 4 ;
55649: LD_ADDR_VAR 0 9
55653: PUSH
55654: LD_INT 4
55656: ST_TO_ADDR
// for i := 1 to 5 do
55657: LD_ADDR_VAR 0 10
55661: PUSH
55662: DOUBLE
55663: LD_INT 1
55665: DEC
55666: ST_TO_ADDR
55667: LD_INT 5
55669: PUSH
55670: FOR_TO
55671: IFFALSE 55828
// begin _x := ShiftX ( x , d , r + i ) ;
55673: LD_ADDR_VAR 0 5
55677: PUSH
55678: LD_VAR 0 4
55682: PPUSH
55683: LD_VAR 0 8
55687: PPUSH
55688: LD_VAR 0 9
55692: PUSH
55693: LD_VAR 0 10
55697: PLUS
55698: PPUSH
55699: CALL_OW 272
55703: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55704: LD_ADDR_VAR 0 7
55708: PUSH
55709: LD_VAR 0 6
55713: PPUSH
55714: LD_VAR 0 8
55718: PPUSH
55719: LD_VAR 0 9
55723: PUSH
55724: LD_VAR 0 10
55728: PLUS
55729: PPUSH
55730: CALL_OW 273
55734: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55735: LD_VAR 0 5
55739: PPUSH
55740: LD_VAR 0 7
55744: PPUSH
55745: CALL_OW 488
55749: PUSH
55750: LD_VAR 0 5
55754: PPUSH
55755: LD_VAR 0 7
55759: PPUSH
55760: CALL_OW 428
55764: PPUSH
55765: CALL_OW 247
55769: PUSH
55770: LD_INT 3
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: IN
55780: NOT
55781: AND
55782: IFFALSE 55826
// begin ComMoveXY ( unit , _x , _y ) ;
55784: LD_VAR 0 1
55788: PPUSH
55789: LD_VAR 0 5
55793: PPUSH
55794: LD_VAR 0 7
55798: PPUSH
55799: CALL_OW 111
// result := [ _x , _y ] ;
55803: LD_ADDR_VAR 0 3
55807: PUSH
55808: LD_VAR 0 5
55812: PUSH
55813: LD_VAR 0 7
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: ST_TO_ADDR
// exit ;
55822: POP
55823: POP
55824: GO 55830
// end ; end ;
55826: GO 55670
55828: POP
55829: POP
// end ;
55830: LD_VAR 0 3
55834: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55835: LD_INT 0
55837: PPUSH
55838: PPUSH
55839: PPUSH
// result := 0 ;
55840: LD_ADDR_VAR 0 3
55844: PUSH
55845: LD_INT 0
55847: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55848: LD_VAR 0 1
55852: PUSH
55853: LD_INT 0
55855: LESS
55856: PUSH
55857: LD_VAR 0 1
55861: PUSH
55862: LD_INT 8
55864: GREATER
55865: OR
55866: PUSH
55867: LD_VAR 0 2
55871: PUSH
55872: LD_INT 0
55874: LESS
55875: OR
55876: PUSH
55877: LD_VAR 0 2
55881: PUSH
55882: LD_INT 8
55884: GREATER
55885: OR
55886: IFFALSE 55890
// exit ;
55888: GO 55965
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55890: LD_ADDR_VAR 0 4
55894: PUSH
55895: LD_INT 22
55897: PUSH
55898: LD_VAR 0 2
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PPUSH
55907: CALL_OW 69
55911: PUSH
55912: FOR_IN
55913: IFFALSE 55963
// begin un := UnitShoot ( i ) ;
55915: LD_ADDR_VAR 0 5
55919: PUSH
55920: LD_VAR 0 4
55924: PPUSH
55925: CALL_OW 504
55929: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55930: LD_VAR 0 5
55934: PPUSH
55935: CALL_OW 255
55939: PUSH
55940: LD_VAR 0 1
55944: EQUAL
55945: IFFALSE 55961
// begin result := un ;
55947: LD_ADDR_VAR 0 3
55951: PUSH
55952: LD_VAR 0 5
55956: ST_TO_ADDR
// exit ;
55957: POP
55958: POP
55959: GO 55965
// end ; end ;
55961: GO 55912
55963: POP
55964: POP
// end ;
55965: LD_VAR 0 3
55969: RET
// export function GetCargoBay ( units ) ; begin
55970: LD_INT 0
55972: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55973: LD_ADDR_VAR 0 2
55977: PUSH
55978: LD_VAR 0 1
55982: PPUSH
55983: LD_INT 2
55985: PUSH
55986: LD_INT 34
55988: PUSH
55989: LD_INT 12
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 34
55998: PUSH
55999: LD_INT 51
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 34
56008: PUSH
56009: LD_INT 32
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 34
56018: PUSH
56019: LD_INT 89
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: LIST
56030: LIST
56031: LIST
56032: PPUSH
56033: CALL_OW 72
56037: ST_TO_ADDR
// end ;
56038: LD_VAR 0 2
56042: RET
// export function Negate ( value ) ; begin
56043: LD_INT 0
56045: PPUSH
// result := not value ;
56046: LD_ADDR_VAR 0 2
56050: PUSH
56051: LD_VAR 0 1
56055: NOT
56056: ST_TO_ADDR
// end ;
56057: LD_VAR 0 2
56061: RET
// export function Inc ( value ) ; begin
56062: LD_INT 0
56064: PPUSH
// result := value + 1 ;
56065: LD_ADDR_VAR 0 2
56069: PUSH
56070: LD_VAR 0 1
56074: PUSH
56075: LD_INT 1
56077: PLUS
56078: ST_TO_ADDR
// end ;
56079: LD_VAR 0 2
56083: RET
// export function Dec ( value ) ; begin
56084: LD_INT 0
56086: PPUSH
// result := value - 1 ;
56087: LD_ADDR_VAR 0 2
56091: PUSH
56092: LD_VAR 0 1
56096: PUSH
56097: LD_INT 1
56099: MINUS
56100: ST_TO_ADDR
// end ;
56101: LD_VAR 0 2
56105: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56106: LD_INT 0
56108: PPUSH
56109: PPUSH
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56116: LD_VAR 0 1
56120: PPUSH
56121: LD_VAR 0 2
56125: PPUSH
56126: CALL_OW 488
56130: NOT
56131: PUSH
56132: LD_VAR 0 3
56136: PPUSH
56137: LD_VAR 0 4
56141: PPUSH
56142: CALL_OW 488
56146: NOT
56147: OR
56148: IFFALSE 56161
// begin result := - 1 ;
56150: LD_ADDR_VAR 0 5
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: ST_TO_ADDR
// exit ;
56159: GO 56396
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56161: LD_ADDR_VAR 0 12
56165: PUSH
56166: LD_VAR 0 1
56170: PPUSH
56171: LD_VAR 0 2
56175: PPUSH
56176: LD_VAR 0 3
56180: PPUSH
56181: LD_VAR 0 4
56185: PPUSH
56186: CALL 55246 0 4
56190: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56191: LD_ADDR_VAR 0 11
56195: PUSH
56196: LD_VAR 0 1
56200: PPUSH
56201: LD_VAR 0 2
56205: PPUSH
56206: LD_VAR 0 12
56210: PUSH
56211: LD_INT 1
56213: ARRAY
56214: PPUSH
56215: LD_VAR 0 12
56219: PUSH
56220: LD_INT 2
56222: ARRAY
56223: PPUSH
56224: CALL_OW 298
56228: ST_TO_ADDR
// distance := 9999 ;
56229: LD_ADDR_VAR 0 10
56233: PUSH
56234: LD_INT 9999
56236: ST_TO_ADDR
// for i := 0 to 5 do
56237: LD_ADDR_VAR 0 6
56241: PUSH
56242: DOUBLE
56243: LD_INT 0
56245: DEC
56246: ST_TO_ADDR
56247: LD_INT 5
56249: PUSH
56250: FOR_TO
56251: IFFALSE 56394
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56253: LD_ADDR_VAR 0 7
56257: PUSH
56258: LD_VAR 0 1
56262: PPUSH
56263: LD_VAR 0 6
56267: PPUSH
56268: LD_VAR 0 11
56272: PPUSH
56273: CALL_OW 272
56277: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56278: LD_ADDR_VAR 0 8
56282: PUSH
56283: LD_VAR 0 2
56287: PPUSH
56288: LD_VAR 0 6
56292: PPUSH
56293: LD_VAR 0 11
56297: PPUSH
56298: CALL_OW 273
56302: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56303: LD_VAR 0 7
56307: PPUSH
56308: LD_VAR 0 8
56312: PPUSH
56313: CALL_OW 488
56317: NOT
56318: IFFALSE 56322
// continue ;
56320: GO 56250
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56322: LD_ADDR_VAR 0 9
56326: PUSH
56327: LD_VAR 0 12
56331: PUSH
56332: LD_INT 1
56334: ARRAY
56335: PPUSH
56336: LD_VAR 0 12
56340: PUSH
56341: LD_INT 2
56343: ARRAY
56344: PPUSH
56345: LD_VAR 0 7
56349: PPUSH
56350: LD_VAR 0 8
56354: PPUSH
56355: CALL_OW 298
56359: ST_TO_ADDR
// if tmp < distance then
56360: LD_VAR 0 9
56364: PUSH
56365: LD_VAR 0 10
56369: LESS
56370: IFFALSE 56392
// begin result := i ;
56372: LD_ADDR_VAR 0 5
56376: PUSH
56377: LD_VAR 0 6
56381: ST_TO_ADDR
// distance := tmp ;
56382: LD_ADDR_VAR 0 10
56386: PUSH
56387: LD_VAR 0 9
56391: ST_TO_ADDR
// end ; end ;
56392: GO 56250
56394: POP
56395: POP
// end ;
56396: LD_VAR 0 5
56400: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56401: LD_INT 0
56403: PPUSH
56404: PPUSH
// if not driver or not IsInUnit ( driver ) then
56405: LD_VAR 0 1
56409: NOT
56410: PUSH
56411: LD_VAR 0 1
56415: PPUSH
56416: CALL_OW 310
56420: NOT
56421: OR
56422: IFFALSE 56426
// exit ;
56424: GO 56516
// vehicle := IsInUnit ( driver ) ;
56426: LD_ADDR_VAR 0 3
56430: PUSH
56431: LD_VAR 0 1
56435: PPUSH
56436: CALL_OW 310
56440: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56441: LD_VAR 0 1
56445: PPUSH
56446: LD_STRING \
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 0
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: PUSH
56476: LD_STRING E
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_VAR 0 3
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PPUSH
56512: CALL_OW 446
// end ;
56516: LD_VAR 0 2
56520: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56521: LD_INT 0
56523: PPUSH
56524: PPUSH
// if not driver or not IsInUnit ( driver ) then
56525: LD_VAR 0 1
56529: NOT
56530: PUSH
56531: LD_VAR 0 1
56535: PPUSH
56536: CALL_OW 310
56540: NOT
56541: OR
56542: IFFALSE 56546
// exit ;
56544: GO 56636
// vehicle := IsInUnit ( driver ) ;
56546: LD_ADDR_VAR 0 3
56550: PUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: CALL_OW 310
56560: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56561: LD_VAR 0 1
56565: PPUSH
56566: LD_STRING \
56568: PUSH
56569: LD_INT 0
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 0
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: PUSH
56596: LD_STRING E
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_VAR 0 3
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PPUSH
56632: CALL_OW 447
// end ;
56636: LD_VAR 0 2
56640: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56641: LD_INT 0
56643: PPUSH
56644: PPUSH
56645: PPUSH
// tmp := [ ] ;
56646: LD_ADDR_VAR 0 5
56650: PUSH
56651: EMPTY
56652: ST_TO_ADDR
// for i in units do
56653: LD_ADDR_VAR 0 4
56657: PUSH
56658: LD_VAR 0 1
56662: PUSH
56663: FOR_IN
56664: IFFALSE 56702
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56666: LD_ADDR_VAR 0 5
56670: PUSH
56671: LD_VAR 0 5
56675: PPUSH
56676: LD_VAR 0 5
56680: PUSH
56681: LD_INT 1
56683: PLUS
56684: PPUSH
56685: LD_VAR 0 4
56689: PPUSH
56690: CALL_OW 256
56694: PPUSH
56695: CALL_OW 2
56699: ST_TO_ADDR
56700: GO 56663
56702: POP
56703: POP
// if not tmp then
56704: LD_VAR 0 5
56708: NOT
56709: IFFALSE 56713
// exit ;
56711: GO 56761
// if asc then
56713: LD_VAR 0 2
56717: IFFALSE 56741
// result := SortListByListAsc ( units , tmp ) else
56719: LD_ADDR_VAR 0 3
56723: PUSH
56724: LD_VAR 0 1
56728: PPUSH
56729: LD_VAR 0 5
56733: PPUSH
56734: CALL_OW 76
56738: ST_TO_ADDR
56739: GO 56761
// result := SortListByListDesc ( units , tmp ) ;
56741: LD_ADDR_VAR 0 3
56745: PUSH
56746: LD_VAR 0 1
56750: PPUSH
56751: LD_VAR 0 5
56755: PPUSH
56756: CALL_OW 77
56760: ST_TO_ADDR
// end ;
56761: LD_VAR 0 3
56765: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56766: LD_INT 0
56768: PPUSH
56769: PPUSH
// task := GetTaskList ( mech ) ;
56770: LD_ADDR_VAR 0 4
56774: PUSH
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 437
56784: ST_TO_ADDR
// if not task then
56785: LD_VAR 0 4
56789: NOT
56790: IFFALSE 56794
// exit ;
56792: GO 56836
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56794: LD_ADDR_VAR 0 3
56798: PUSH
56799: LD_VAR 0 4
56803: PUSH
56804: LD_INT 1
56806: ARRAY
56807: PUSH
56808: LD_INT 1
56810: ARRAY
56811: PUSH
56812: LD_STRING r
56814: EQUAL
56815: PUSH
56816: LD_VAR 0 4
56820: PUSH
56821: LD_INT 1
56823: ARRAY
56824: PUSH
56825: LD_INT 4
56827: ARRAY
56828: PUSH
56829: LD_VAR 0 2
56833: EQUAL
56834: AND
56835: ST_TO_ADDR
// end ;
56836: LD_VAR 0 3
56840: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56841: LD_INT 0
56843: PPUSH
// SetDir ( unit , d ) ;
56844: LD_VAR 0 1
56848: PPUSH
56849: LD_VAR 0 4
56853: PPUSH
56854: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56858: LD_VAR 0 1
56862: PPUSH
56863: LD_VAR 0 2
56867: PPUSH
56868: LD_VAR 0 3
56872: PPUSH
56873: LD_VAR 0 5
56877: PPUSH
56878: CALL_OW 48
// end ;
56882: LD_VAR 0 6
56886: RET
// export function ToNaturalNumber ( number ) ; begin
56887: LD_INT 0
56889: PPUSH
// result := number div 1 ;
56890: LD_ADDR_VAR 0 2
56894: PUSH
56895: LD_VAR 0 1
56899: PUSH
56900: LD_INT 1
56902: DIV
56903: ST_TO_ADDR
// if number < 0 then
56904: LD_VAR 0 1
56908: PUSH
56909: LD_INT 0
56911: LESS
56912: IFFALSE 56922
// result := 0 ;
56914: LD_ADDR_VAR 0 2
56918: PUSH
56919: LD_INT 0
56921: ST_TO_ADDR
// end ;
56922: LD_VAR 0 2
56926: RET
// export function SortByClass ( units , class ) ; var un ; begin
56927: LD_INT 0
56929: PPUSH
56930: PPUSH
// if not units or not class then
56931: LD_VAR 0 1
56935: NOT
56936: PUSH
56937: LD_VAR 0 2
56941: NOT
56942: OR
56943: IFFALSE 56947
// exit ;
56945: GO 57042
// result := [ ] ;
56947: LD_ADDR_VAR 0 3
56951: PUSH
56952: EMPTY
56953: ST_TO_ADDR
// for un in units do
56954: LD_ADDR_VAR 0 4
56958: PUSH
56959: LD_VAR 0 1
56963: PUSH
56964: FOR_IN
56965: IFFALSE 57040
// if GetClass ( un ) = class then
56967: LD_VAR 0 4
56971: PPUSH
56972: CALL_OW 257
56976: PUSH
56977: LD_VAR 0 2
56981: EQUAL
56982: IFFALSE 57009
// result := Insert ( result , 1 , un ) else
56984: LD_ADDR_VAR 0 3
56988: PUSH
56989: LD_VAR 0 3
56993: PPUSH
56994: LD_INT 1
56996: PPUSH
56997: LD_VAR 0 4
57001: PPUSH
57002: CALL_OW 2
57006: ST_TO_ADDR
57007: GO 57038
// result := Replace ( result , result + 1 , un ) ;
57009: LD_ADDR_VAR 0 3
57013: PUSH
57014: LD_VAR 0 3
57018: PPUSH
57019: LD_VAR 0 3
57023: PUSH
57024: LD_INT 1
57026: PLUS
57027: PPUSH
57028: LD_VAR 0 4
57032: PPUSH
57033: CALL_OW 1
57037: ST_TO_ADDR
57038: GO 56964
57040: POP
57041: POP
// end ;
57042: LD_VAR 0 3
57046: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57047: LD_INT 0
57049: PPUSH
57050: PPUSH
57051: PPUSH
57052: PPUSH
57053: PPUSH
57054: PPUSH
57055: PPUSH
// result := [ ] ;
57056: LD_ADDR_VAR 0 4
57060: PUSH
57061: EMPTY
57062: ST_TO_ADDR
// if x - r < 0 then
57063: LD_VAR 0 1
57067: PUSH
57068: LD_VAR 0 3
57072: MINUS
57073: PUSH
57074: LD_INT 0
57076: LESS
57077: IFFALSE 57089
// min_x := 0 else
57079: LD_ADDR_VAR 0 8
57083: PUSH
57084: LD_INT 0
57086: ST_TO_ADDR
57087: GO 57105
// min_x := x - r ;
57089: LD_ADDR_VAR 0 8
57093: PUSH
57094: LD_VAR 0 1
57098: PUSH
57099: LD_VAR 0 3
57103: MINUS
57104: ST_TO_ADDR
// if y - r < 0 then
57105: LD_VAR 0 2
57109: PUSH
57110: LD_VAR 0 3
57114: MINUS
57115: PUSH
57116: LD_INT 0
57118: LESS
57119: IFFALSE 57131
// min_y := 0 else
57121: LD_ADDR_VAR 0 7
57125: PUSH
57126: LD_INT 0
57128: ST_TO_ADDR
57129: GO 57147
// min_y := y - r ;
57131: LD_ADDR_VAR 0 7
57135: PUSH
57136: LD_VAR 0 2
57140: PUSH
57141: LD_VAR 0 3
57145: MINUS
57146: ST_TO_ADDR
// max_x := x + r ;
57147: LD_ADDR_VAR 0 9
57151: PUSH
57152: LD_VAR 0 1
57156: PUSH
57157: LD_VAR 0 3
57161: PLUS
57162: ST_TO_ADDR
// max_y := y + r ;
57163: LD_ADDR_VAR 0 10
57167: PUSH
57168: LD_VAR 0 2
57172: PUSH
57173: LD_VAR 0 3
57177: PLUS
57178: ST_TO_ADDR
// for _x = min_x to max_x do
57179: LD_ADDR_VAR 0 5
57183: PUSH
57184: DOUBLE
57185: LD_VAR 0 8
57189: DEC
57190: ST_TO_ADDR
57191: LD_VAR 0 9
57195: PUSH
57196: FOR_TO
57197: IFFALSE 57298
// for _y = min_y to max_y do
57199: LD_ADDR_VAR 0 6
57203: PUSH
57204: DOUBLE
57205: LD_VAR 0 7
57209: DEC
57210: ST_TO_ADDR
57211: LD_VAR 0 10
57215: PUSH
57216: FOR_TO
57217: IFFALSE 57294
// begin if not ValidHex ( _x , _y ) then
57219: LD_VAR 0 5
57223: PPUSH
57224: LD_VAR 0 6
57228: PPUSH
57229: CALL_OW 488
57233: NOT
57234: IFFALSE 57238
// continue ;
57236: GO 57216
// if GetResourceTypeXY ( _x , _y ) then
57238: LD_VAR 0 5
57242: PPUSH
57243: LD_VAR 0 6
57247: PPUSH
57248: CALL_OW 283
57252: IFFALSE 57292
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57254: LD_ADDR_VAR 0 4
57258: PUSH
57259: LD_VAR 0 4
57263: PPUSH
57264: LD_VAR 0 4
57268: PUSH
57269: LD_INT 1
57271: PLUS
57272: PPUSH
57273: LD_VAR 0 5
57277: PUSH
57278: LD_VAR 0 6
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PPUSH
57287: CALL_OW 1
57291: ST_TO_ADDR
// end ;
57292: GO 57216
57294: POP
57295: POP
57296: GO 57196
57298: POP
57299: POP
// end ;
57300: LD_VAR 0 4
57304: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57305: LD_INT 0
57307: PPUSH
57308: PPUSH
57309: PPUSH
57310: PPUSH
57311: PPUSH
57312: PPUSH
57313: PPUSH
57314: PPUSH
// if not units then
57315: LD_VAR 0 1
57319: NOT
57320: IFFALSE 57324
// exit ;
57322: GO 57848
// result := UnitFilter ( units , [ f_ok ] ) ;
57324: LD_ADDR_VAR 0 3
57328: PUSH
57329: LD_VAR 0 1
57333: PPUSH
57334: LD_INT 50
57336: PUSH
57337: EMPTY
57338: LIST
57339: PPUSH
57340: CALL_OW 72
57344: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57345: LD_ADDR_VAR 0 8
57349: PUSH
57350: LD_VAR 0 1
57354: PUSH
57355: LD_INT 1
57357: ARRAY
57358: PPUSH
57359: CALL_OW 255
57363: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57364: LD_ADDR_VAR 0 10
57368: PUSH
57369: LD_INT 29
57371: PUSH
57372: LD_INT 91
57374: PUSH
57375: LD_INT 49
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// if not result then
57383: LD_VAR 0 3
57387: NOT
57388: IFFALSE 57392
// exit ;
57390: GO 57848
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57392: LD_ADDR_VAR 0 5
57396: PUSH
57397: LD_INT 81
57399: PUSH
57400: LD_VAR 0 8
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PPUSH
57409: CALL_OW 69
57413: ST_TO_ADDR
// for i in result do
57414: LD_ADDR_VAR 0 4
57418: PUSH
57419: LD_VAR 0 3
57423: PUSH
57424: FOR_IN
57425: IFFALSE 57846
// begin tag := GetTag ( i ) + 1 ;
57427: LD_ADDR_VAR 0 9
57431: PUSH
57432: LD_VAR 0 4
57436: PPUSH
57437: CALL_OW 110
57441: PUSH
57442: LD_INT 1
57444: PLUS
57445: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57446: LD_ADDR_VAR 0 7
57450: PUSH
57451: LD_VAR 0 4
57455: PPUSH
57456: CALL_OW 250
57460: PPUSH
57461: LD_VAR 0 4
57465: PPUSH
57466: CALL_OW 251
57470: PPUSH
57471: LD_INT 6
57473: PPUSH
57474: CALL 57047 0 3
57478: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57479: LD_VAR 0 4
57483: PPUSH
57484: CALL_OW 247
57488: PUSH
57489: LD_INT 2
57491: EQUAL
57492: PUSH
57493: LD_VAR 0 7
57497: AND
57498: PUSH
57499: LD_VAR 0 4
57503: PPUSH
57504: CALL_OW 264
57508: PUSH
57509: LD_VAR 0 10
57513: IN
57514: NOT
57515: AND
57516: IFFALSE 57555
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57518: LD_VAR 0 4
57522: PPUSH
57523: LD_VAR 0 7
57527: PUSH
57528: LD_INT 1
57530: ARRAY
57531: PUSH
57532: LD_INT 1
57534: ARRAY
57535: PPUSH
57536: LD_VAR 0 7
57540: PUSH
57541: LD_INT 1
57543: ARRAY
57544: PUSH
57545: LD_INT 2
57547: ARRAY
57548: PPUSH
57549: CALL_OW 116
57553: GO 57844
// if path > tag then
57555: LD_VAR 0 2
57559: PUSH
57560: LD_VAR 0 9
57564: GREATER
57565: IFFALSE 57773
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57567: LD_ADDR_VAR 0 6
57571: PUSH
57572: LD_VAR 0 5
57576: PPUSH
57577: LD_INT 91
57579: PUSH
57580: LD_VAR 0 4
57584: PUSH
57585: LD_INT 8
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: LIST
57592: PPUSH
57593: CALL_OW 72
57597: ST_TO_ADDR
// if nearEnemy then
57598: LD_VAR 0 6
57602: IFFALSE 57671
// begin if GetWeapon ( i ) = ru_time_lapser then
57604: LD_VAR 0 4
57608: PPUSH
57609: CALL_OW 264
57613: PUSH
57614: LD_INT 49
57616: EQUAL
57617: IFFALSE 57645
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57619: LD_VAR 0 4
57623: PPUSH
57624: LD_VAR 0 6
57628: PPUSH
57629: LD_VAR 0 4
57633: PPUSH
57634: CALL_OW 74
57638: PPUSH
57639: CALL_OW 112
57643: GO 57669
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57645: LD_VAR 0 4
57649: PPUSH
57650: LD_VAR 0 6
57654: PPUSH
57655: LD_VAR 0 4
57659: PPUSH
57660: CALL_OW 74
57664: PPUSH
57665: CALL 58773 0 2
// end else
57669: GO 57771
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57671: LD_VAR 0 4
57675: PPUSH
57676: LD_VAR 0 2
57680: PUSH
57681: LD_VAR 0 9
57685: ARRAY
57686: PUSH
57687: LD_INT 1
57689: ARRAY
57690: PPUSH
57691: LD_VAR 0 2
57695: PUSH
57696: LD_VAR 0 9
57700: ARRAY
57701: PUSH
57702: LD_INT 2
57704: ARRAY
57705: PPUSH
57706: CALL_OW 297
57710: PUSH
57711: LD_INT 6
57713: GREATER
57714: IFFALSE 57757
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57716: LD_VAR 0 4
57720: PPUSH
57721: LD_VAR 0 2
57725: PUSH
57726: LD_VAR 0 9
57730: ARRAY
57731: PUSH
57732: LD_INT 1
57734: ARRAY
57735: PPUSH
57736: LD_VAR 0 2
57740: PUSH
57741: LD_VAR 0 9
57745: ARRAY
57746: PUSH
57747: LD_INT 2
57749: ARRAY
57750: PPUSH
57751: CALL_OW 114
57755: GO 57771
// SetTag ( i , tag ) ;
57757: LD_VAR 0 4
57761: PPUSH
57762: LD_VAR 0 9
57766: PPUSH
57767: CALL_OW 109
// end else
57771: GO 57844
// if enemy then
57773: LD_VAR 0 5
57777: IFFALSE 57844
// begin if GetWeapon ( i ) = ru_time_lapser then
57779: LD_VAR 0 4
57783: PPUSH
57784: CALL_OW 264
57788: PUSH
57789: LD_INT 49
57791: EQUAL
57792: IFFALSE 57820
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57794: LD_VAR 0 4
57798: PPUSH
57799: LD_VAR 0 5
57803: PPUSH
57804: LD_VAR 0 4
57808: PPUSH
57809: CALL_OW 74
57813: PPUSH
57814: CALL_OW 112
57818: GO 57844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57820: LD_VAR 0 4
57824: PPUSH
57825: LD_VAR 0 5
57829: PPUSH
57830: LD_VAR 0 4
57834: PPUSH
57835: CALL_OW 74
57839: PPUSH
57840: CALL 58773 0 2
// end ; end ;
57844: GO 57424
57846: POP
57847: POP
// end ;
57848: LD_VAR 0 3
57852: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57853: LD_INT 0
57855: PPUSH
57856: PPUSH
57857: PPUSH
// if not unit or IsInUnit ( unit ) then
57858: LD_VAR 0 1
57862: NOT
57863: PUSH
57864: LD_VAR 0 1
57868: PPUSH
57869: CALL_OW 310
57873: OR
57874: IFFALSE 57878
// exit ;
57876: GO 57969
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57878: LD_ADDR_VAR 0 4
57882: PUSH
57883: LD_VAR 0 1
57887: PPUSH
57888: CALL_OW 250
57892: PPUSH
57893: LD_VAR 0 2
57897: PPUSH
57898: LD_INT 1
57900: PPUSH
57901: CALL_OW 272
57905: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57906: LD_ADDR_VAR 0 5
57910: PUSH
57911: LD_VAR 0 1
57915: PPUSH
57916: CALL_OW 251
57920: PPUSH
57921: LD_VAR 0 2
57925: PPUSH
57926: LD_INT 1
57928: PPUSH
57929: CALL_OW 273
57933: ST_TO_ADDR
// if ValidHex ( x , y ) then
57934: LD_VAR 0 4
57938: PPUSH
57939: LD_VAR 0 5
57943: PPUSH
57944: CALL_OW 488
57948: IFFALSE 57969
// ComTurnXY ( unit , x , y ) ;
57950: LD_VAR 0 1
57954: PPUSH
57955: LD_VAR 0 4
57959: PPUSH
57960: LD_VAR 0 5
57964: PPUSH
57965: CALL_OW 118
// end ;
57969: LD_VAR 0 3
57973: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57974: LD_INT 0
57976: PPUSH
57977: PPUSH
// result := false ;
57978: LD_ADDR_VAR 0 3
57982: PUSH
57983: LD_INT 0
57985: ST_TO_ADDR
// if not units then
57986: LD_VAR 0 2
57990: NOT
57991: IFFALSE 57995
// exit ;
57993: GO 58040
// for i in units do
57995: LD_ADDR_VAR 0 4
57999: PUSH
58000: LD_VAR 0 2
58004: PUSH
58005: FOR_IN
58006: IFFALSE 58038
// if See ( side , i ) then
58008: LD_VAR 0 1
58012: PPUSH
58013: LD_VAR 0 4
58017: PPUSH
58018: CALL_OW 292
58022: IFFALSE 58036
// begin result := true ;
58024: LD_ADDR_VAR 0 3
58028: PUSH
58029: LD_INT 1
58031: ST_TO_ADDR
// exit ;
58032: POP
58033: POP
58034: GO 58040
// end ;
58036: GO 58005
58038: POP
58039: POP
// end ;
58040: LD_VAR 0 3
58044: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58045: LD_INT 0
58047: PPUSH
58048: PPUSH
58049: PPUSH
58050: PPUSH
// if not unit or not points then
58051: LD_VAR 0 1
58055: NOT
58056: PUSH
58057: LD_VAR 0 2
58061: NOT
58062: OR
58063: IFFALSE 58067
// exit ;
58065: GO 58157
// dist := 99999 ;
58067: LD_ADDR_VAR 0 5
58071: PUSH
58072: LD_INT 99999
58074: ST_TO_ADDR
// for i in points do
58075: LD_ADDR_VAR 0 4
58079: PUSH
58080: LD_VAR 0 2
58084: PUSH
58085: FOR_IN
58086: IFFALSE 58155
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58088: LD_ADDR_VAR 0 6
58092: PUSH
58093: LD_VAR 0 1
58097: PPUSH
58098: LD_VAR 0 4
58102: PUSH
58103: LD_INT 1
58105: ARRAY
58106: PPUSH
58107: LD_VAR 0 4
58111: PUSH
58112: LD_INT 2
58114: ARRAY
58115: PPUSH
58116: CALL_OW 297
58120: ST_TO_ADDR
// if tmpDist < dist then
58121: LD_VAR 0 6
58125: PUSH
58126: LD_VAR 0 5
58130: LESS
58131: IFFALSE 58153
// begin result := i ;
58133: LD_ADDR_VAR 0 3
58137: PUSH
58138: LD_VAR 0 4
58142: ST_TO_ADDR
// dist := tmpDist ;
58143: LD_ADDR_VAR 0 5
58147: PUSH
58148: LD_VAR 0 6
58152: ST_TO_ADDR
// end ; end ;
58153: GO 58085
58155: POP
58156: POP
// end ;
58157: LD_VAR 0 3
58161: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58162: LD_INT 0
58164: PPUSH
// uc_side := side ;
58165: LD_ADDR_OWVAR 20
58169: PUSH
58170: LD_VAR 0 1
58174: ST_TO_ADDR
// uc_nation := 3 ;
58175: LD_ADDR_OWVAR 21
58179: PUSH
58180: LD_INT 3
58182: ST_TO_ADDR
// vc_chassis := 25 ;
58183: LD_ADDR_OWVAR 37
58187: PUSH
58188: LD_INT 25
58190: ST_TO_ADDR
// vc_engine := engine_siberite ;
58191: LD_ADDR_OWVAR 39
58195: PUSH
58196: LD_INT 3
58198: ST_TO_ADDR
// vc_control := control_computer ;
58199: LD_ADDR_OWVAR 38
58203: PUSH
58204: LD_INT 3
58206: ST_TO_ADDR
// vc_weapon := 59 ;
58207: LD_ADDR_OWVAR 40
58211: PUSH
58212: LD_INT 59
58214: ST_TO_ADDR
// result := CreateVehicle ;
58215: LD_ADDR_VAR 0 5
58219: PUSH
58220: CALL_OW 45
58224: ST_TO_ADDR
// SetDir ( result , d ) ;
58225: LD_VAR 0 5
58229: PPUSH
58230: LD_VAR 0 4
58234: PPUSH
58235: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58239: LD_VAR 0 5
58243: PPUSH
58244: LD_VAR 0 2
58248: PPUSH
58249: LD_VAR 0 3
58253: PPUSH
58254: LD_INT 0
58256: PPUSH
58257: CALL_OW 48
// end ;
58261: LD_VAR 0 5
58265: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58266: LD_INT 0
58268: PPUSH
58269: PPUSH
58270: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58271: LD_ADDR_VAR 0 2
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: LD_INT 0
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58294: LD_VAR 0 1
58298: NOT
58299: PUSH
58300: LD_VAR 0 1
58304: PPUSH
58305: CALL_OW 264
58309: PUSH
58310: LD_INT 12
58312: PUSH
58313: LD_INT 51
58315: PUSH
58316: LD_INT 32
58318: PUSH
58319: LD_INT 89
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: IN
58328: NOT
58329: OR
58330: IFFALSE 58334
// exit ;
58332: GO 58432
// for i := 1 to 3 do
58334: LD_ADDR_VAR 0 3
58338: PUSH
58339: DOUBLE
58340: LD_INT 1
58342: DEC
58343: ST_TO_ADDR
58344: LD_INT 3
58346: PUSH
58347: FOR_TO
58348: IFFALSE 58430
// begin tmp := GetCargo ( cargo , i ) ;
58350: LD_ADDR_VAR 0 4
58354: PUSH
58355: LD_VAR 0 1
58359: PPUSH
58360: LD_VAR 0 3
58364: PPUSH
58365: CALL_OW 289
58369: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58370: LD_ADDR_VAR 0 2
58374: PUSH
58375: LD_VAR 0 2
58379: PPUSH
58380: LD_VAR 0 3
58384: PPUSH
58385: LD_VAR 0 4
58389: PPUSH
58390: CALL_OW 1
58394: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58395: LD_ADDR_VAR 0 2
58399: PUSH
58400: LD_VAR 0 2
58404: PPUSH
58405: LD_INT 4
58407: PPUSH
58408: LD_VAR 0 2
58412: PUSH
58413: LD_INT 4
58415: ARRAY
58416: PUSH
58417: LD_VAR 0 4
58421: PLUS
58422: PPUSH
58423: CALL_OW 1
58427: ST_TO_ADDR
// end ;
58428: GO 58347
58430: POP
58431: POP
// end ;
58432: LD_VAR 0 2
58436: RET
// export function Length ( array ) ; begin
58437: LD_INT 0
58439: PPUSH
// result := array + 0 ;
58440: LD_ADDR_VAR 0 2
58444: PUSH
58445: LD_VAR 0 1
58449: PUSH
58450: LD_INT 0
58452: PLUS
58453: ST_TO_ADDR
// end ;
58454: LD_VAR 0 2
58458: RET
// export function PrepareArray ( array ) ; begin
58459: LD_INT 0
58461: PPUSH
// result := array diff 0 ;
58462: LD_ADDR_VAR 0 2
58466: PUSH
58467: LD_VAR 0 1
58471: PUSH
58472: LD_INT 0
58474: DIFF
58475: ST_TO_ADDR
// if not result [ 1 ] then
58476: LD_VAR 0 2
58480: PUSH
58481: LD_INT 1
58483: ARRAY
58484: NOT
58485: IFFALSE 58505
// result := Delete ( result , 1 ) ;
58487: LD_ADDR_VAR 0 2
58491: PUSH
58492: LD_VAR 0 2
58496: PPUSH
58497: LD_INT 1
58499: PPUSH
58500: CALL_OW 3
58504: ST_TO_ADDR
// end ;
58505: LD_VAR 0 2
58509: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58510: LD_INT 0
58512: PPUSH
58513: PPUSH
58514: PPUSH
58515: PPUSH
// sibRocketRange := 25 ;
58516: LD_ADDR_VAR 0 6
58520: PUSH
58521: LD_INT 25
58523: ST_TO_ADDR
// result := false ;
58524: LD_ADDR_VAR 0 4
58528: PUSH
58529: LD_INT 0
58531: ST_TO_ADDR
// for i := 0 to 5 do
58532: LD_ADDR_VAR 0 5
58536: PUSH
58537: DOUBLE
58538: LD_INT 0
58540: DEC
58541: ST_TO_ADDR
58542: LD_INT 5
58544: PUSH
58545: FOR_TO
58546: IFFALSE 58613
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58548: LD_VAR 0 1
58552: PPUSH
58553: LD_VAR 0 5
58557: PPUSH
58558: LD_VAR 0 6
58562: PPUSH
58563: CALL_OW 272
58567: PPUSH
58568: LD_VAR 0 2
58572: PPUSH
58573: LD_VAR 0 5
58577: PPUSH
58578: LD_VAR 0 6
58582: PPUSH
58583: CALL_OW 273
58587: PPUSH
58588: LD_VAR 0 3
58592: PPUSH
58593: CALL_OW 309
58597: IFFALSE 58611
// begin result := true ;
58599: LD_ADDR_VAR 0 4
58603: PUSH
58604: LD_INT 1
58606: ST_TO_ADDR
// exit ;
58607: POP
58608: POP
58609: GO 58615
// end ;
58611: GO 58545
58613: POP
58614: POP
// end ;
58615: LD_VAR 0 4
58619: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58620: LD_INT 0
58622: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58623: LD_VAR 0 1
58627: PPUSH
58628: LD_VAR 0 2
58632: PPUSH
58633: LD_INT 0
58635: PPUSH
58636: LD_INT 0
58638: PPUSH
58639: LD_INT 1
58641: PPUSH
58642: LD_INT 0
58644: PPUSH
58645: CALL_OW 587
// end ;
58649: LD_VAR 0 3
58653: RET
// export function CenterOnNow ( unit ) ; begin
58654: LD_INT 0
58656: PPUSH
// result := IsInUnit ( unit ) ;
58657: LD_ADDR_VAR 0 2
58661: PUSH
58662: LD_VAR 0 1
58666: PPUSH
58667: CALL_OW 310
58671: ST_TO_ADDR
// if not result then
58672: LD_VAR 0 2
58676: NOT
58677: IFFALSE 58689
// result := unit ;
58679: LD_ADDR_VAR 0 2
58683: PUSH
58684: LD_VAR 0 1
58688: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58689: LD_VAR 0 1
58693: PPUSH
58694: CALL_OW 87
// end ;
58698: LD_VAR 0 2
58702: RET
// export function ComMoveHex ( unit , hex ) ; begin
58703: LD_INT 0
58705: PPUSH
// if not hex then
58706: LD_VAR 0 2
58710: NOT
58711: IFFALSE 58715
// exit ;
58713: GO 58768
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58715: LD_VAR 0 2
58719: PUSH
58720: LD_INT 1
58722: ARRAY
58723: PPUSH
58724: LD_VAR 0 2
58728: PUSH
58729: LD_INT 2
58731: ARRAY
58732: PPUSH
58733: CALL_OW 428
58737: IFFALSE 58741
// exit ;
58739: GO 58768
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58741: LD_VAR 0 1
58745: PPUSH
58746: LD_VAR 0 2
58750: PUSH
58751: LD_INT 1
58753: ARRAY
58754: PPUSH
58755: LD_VAR 0 2
58759: PUSH
58760: LD_INT 2
58762: ARRAY
58763: PPUSH
58764: CALL_OW 111
// end ;
58768: LD_VAR 0 3
58772: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58773: LD_INT 0
58775: PPUSH
58776: PPUSH
58777: PPUSH
// if not unit or not enemy then
58778: LD_VAR 0 1
58782: NOT
58783: PUSH
58784: LD_VAR 0 2
58788: NOT
58789: OR
58790: IFFALSE 58794
// exit ;
58792: GO 58918
// x := GetX ( enemy ) ;
58794: LD_ADDR_VAR 0 4
58798: PUSH
58799: LD_VAR 0 2
58803: PPUSH
58804: CALL_OW 250
58808: ST_TO_ADDR
// y := GetY ( enemy ) ;
58809: LD_ADDR_VAR 0 5
58813: PUSH
58814: LD_VAR 0 2
58818: PPUSH
58819: CALL_OW 251
58823: ST_TO_ADDR
// if ValidHex ( x , y ) then
58824: LD_VAR 0 4
58828: PPUSH
58829: LD_VAR 0 5
58833: PPUSH
58834: CALL_OW 488
58838: IFFALSE 58918
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
58840: LD_VAR 0 2
58844: PPUSH
58845: CALL_OW 247
58849: PUSH
58850: LD_INT 3
58852: PUSH
58853: LD_INT 2
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: IN
58860: PUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: CALL_OW 255
58870: PPUSH
58871: LD_VAR 0 2
58875: PPUSH
58876: CALL_OW 292
58880: AND
58881: IFFALSE 58899
// ComAttackUnit ( unit , enemy ) else
58883: LD_VAR 0 1
58887: PPUSH
58888: LD_VAR 0 2
58892: PPUSH
58893: CALL_OW 115
58897: GO 58918
// ComAgressiveMove ( unit , x , y ) ;
58899: LD_VAR 0 1
58903: PPUSH
58904: LD_VAR 0 4
58908: PPUSH
58909: LD_VAR 0 5
58913: PPUSH
58914: CALL_OW 114
// end ;
58918: LD_VAR 0 3
58922: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58923: LD_INT 0
58925: PPUSH
58926: PPUSH
58927: PPUSH
// list := AreaToList ( area , 0 ) ;
58928: LD_ADDR_VAR 0 5
58932: PUSH
58933: LD_VAR 0 1
58937: PPUSH
58938: LD_INT 0
58940: PPUSH
58941: CALL_OW 517
58945: ST_TO_ADDR
// if not list then
58946: LD_VAR 0 5
58950: NOT
58951: IFFALSE 58955
// exit ;
58953: GO 59085
// if all then
58955: LD_VAR 0 2
58959: IFFALSE 59047
// begin for i := 1 to list [ 1 ] do
58961: LD_ADDR_VAR 0 4
58965: PUSH
58966: DOUBLE
58967: LD_INT 1
58969: DEC
58970: ST_TO_ADDR
58971: LD_VAR 0 5
58975: PUSH
58976: LD_INT 1
58978: ARRAY
58979: PUSH
58980: FOR_TO
58981: IFFALSE 59043
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58983: LD_ADDR_VAR 0 3
58987: PUSH
58988: LD_VAR 0 3
58992: PPUSH
58993: LD_VAR 0 3
58997: PUSH
58998: LD_INT 1
59000: PLUS
59001: PPUSH
59002: LD_VAR 0 5
59006: PUSH
59007: LD_INT 1
59009: ARRAY
59010: PUSH
59011: LD_VAR 0 4
59015: ARRAY
59016: PUSH
59017: LD_VAR 0 5
59021: PUSH
59022: LD_INT 2
59024: ARRAY
59025: PUSH
59026: LD_VAR 0 4
59030: ARRAY
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PPUSH
59036: CALL_OW 1
59040: ST_TO_ADDR
59041: GO 58980
59043: POP
59044: POP
// exit ;
59045: GO 59085
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59047: LD_ADDR_VAR 0 3
59051: PUSH
59052: LD_VAR 0 5
59056: PUSH
59057: LD_INT 1
59059: ARRAY
59060: PUSH
59061: LD_INT 1
59063: ARRAY
59064: PUSH
59065: LD_VAR 0 5
59069: PUSH
59070: LD_INT 2
59072: ARRAY
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: ST_TO_ADDR
// end ;
59085: LD_VAR 0 3
59089: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59090: LD_INT 0
59092: PPUSH
59093: PPUSH
// list := AreaToList ( area , 0 ) ;
59094: LD_ADDR_VAR 0 4
59098: PUSH
59099: LD_VAR 0 1
59103: PPUSH
59104: LD_INT 0
59106: PPUSH
59107: CALL_OW 517
59111: ST_TO_ADDR
// if not list then
59112: LD_VAR 0 4
59116: NOT
59117: IFFALSE 59121
// exit ;
59119: GO 59162
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59121: LD_ADDR_VAR 0 3
59125: PUSH
59126: LD_VAR 0 4
59130: PUSH
59131: LD_INT 1
59133: ARRAY
59134: PUSH
59135: LD_INT 1
59137: ARRAY
59138: PUSH
59139: LD_VAR 0 4
59143: PUSH
59144: LD_INT 2
59146: ARRAY
59147: PUSH
59148: LD_INT 1
59150: ARRAY
59151: PUSH
59152: LD_VAR 0 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: ST_TO_ADDR
// end ;
59162: LD_VAR 0 3
59166: RET
// export function First ( array ) ; begin
59167: LD_INT 0
59169: PPUSH
// if not array then
59170: LD_VAR 0 1
59174: NOT
59175: IFFALSE 59179
// exit ;
59177: GO 59193
// result := array [ 1 ] ;
59179: LD_ADDR_VAR 0 2
59183: PUSH
59184: LD_VAR 0 1
59188: PUSH
59189: LD_INT 1
59191: ARRAY
59192: ST_TO_ADDR
// end ;
59193: LD_VAR 0 2
59197: RET
// export function Last ( array ) ; begin
59198: LD_INT 0
59200: PPUSH
// if not array then
59201: LD_VAR 0 1
59205: NOT
59206: IFFALSE 59210
// exit ;
59208: GO 59226
// result := array [ array ] ;
59210: LD_ADDR_VAR 0 2
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_VAR 0 1
59224: ARRAY
59225: ST_TO_ADDR
// end ; end_of_file
59226: LD_VAR 0 2
59230: RET
// export globalGameSaveCounter ; every 0 0$1 do
59231: GO 59233
59233: DISABLE
// begin enable ;
59234: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59235: LD_STRING updateTimer(
59237: PUSH
59238: LD_OWVAR 1
59242: STR
59243: PUSH
59244: LD_STRING );
59246: STR
59247: PPUSH
59248: CALL_OW 559
// end ;
59252: END
// every 0 0$1 do
59253: GO 59255
59255: DISABLE
// begin globalGameSaveCounter := 0 ;
59256: LD_ADDR_EXP 50
59260: PUSH
59261: LD_INT 0
59263: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59264: LD_STRING setGameSaveCounter(0)
59266: PPUSH
59267: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59271: LD_STRING initStreamRollete();
59273: PPUSH
59274: CALL_OW 559
// InitStreamMode ;
59278: CALL 60604 0 0
// DefineStreamItems ( false ) ;
59282: LD_INT 0
59284: PPUSH
59285: CALL 61068 0 1
// end ;
59289: END
// export function SOS_MapStart ( ) ; begin
59290: LD_INT 0
59292: PPUSH
// if streamModeActive then
59293: LD_EXP 51
59297: IFFALSE 59306
// DefineStreamItems ( true ) ;
59299: LD_INT 1
59301: PPUSH
59302: CALL 61068 0 1
// UpdateLuaVariables ( ) ;
59306: CALL 59323 0 0
// UpdateFactoryWaypoints ( ) ;
59310: CALL 73937 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59314: CALL 74194 0 0
// end ;
59318: LD_VAR 0 1
59322: RET
// function UpdateLuaVariables ( ) ; begin
59323: LD_INT 0
59325: PPUSH
// if globalGameSaveCounter then
59326: LD_EXP 50
59330: IFFALSE 59364
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59332: LD_ADDR_EXP 50
59336: PUSH
59337: LD_EXP 50
59341: PPUSH
59342: CALL 56062 0 1
59346: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59347: LD_STRING setGameSaveCounter(
59349: PUSH
59350: LD_EXP 50
59354: STR
59355: PUSH
59356: LD_STRING )
59358: STR
59359: PPUSH
59360: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59364: LD_STRING setGameDifficulty(
59366: PUSH
59367: LD_OWVAR 67
59371: STR
59372: PUSH
59373: LD_STRING )
59375: STR
59376: PPUSH
59377: CALL_OW 559
// end ;
59381: LD_VAR 0 1
59385: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59386: LD_INT 0
59388: PPUSH
// if p2 = stream_mode then
59389: LD_VAR 0 2
59393: PUSH
59394: LD_INT 100
59396: EQUAL
59397: IFFALSE 60400
// begin if not StreamModeActive then
59399: LD_EXP 51
59403: NOT
59404: IFFALSE 59414
// StreamModeActive := true ;
59406: LD_ADDR_EXP 51
59410: PUSH
59411: LD_INT 1
59413: ST_TO_ADDR
// if p3 = 0 then
59414: LD_VAR 0 3
59418: PUSH
59419: LD_INT 0
59421: EQUAL
59422: IFFALSE 59428
// InitStreamMode ;
59424: CALL 60604 0 0
// if p3 = 1 then
59428: LD_VAR 0 3
59432: PUSH
59433: LD_INT 1
59435: EQUAL
59436: IFFALSE 59446
// sRocket := true ;
59438: LD_ADDR_EXP 56
59442: PUSH
59443: LD_INT 1
59445: ST_TO_ADDR
// if p3 = 2 then
59446: LD_VAR 0 3
59450: PUSH
59451: LD_INT 2
59453: EQUAL
59454: IFFALSE 59464
// sSpeed := true ;
59456: LD_ADDR_EXP 55
59460: PUSH
59461: LD_INT 1
59463: ST_TO_ADDR
// if p3 = 3 then
59464: LD_VAR 0 3
59468: PUSH
59469: LD_INT 3
59471: EQUAL
59472: IFFALSE 59482
// sEngine := true ;
59474: LD_ADDR_EXP 57
59478: PUSH
59479: LD_INT 1
59481: ST_TO_ADDR
// if p3 = 4 then
59482: LD_VAR 0 3
59486: PUSH
59487: LD_INT 4
59489: EQUAL
59490: IFFALSE 59500
// sSpec := true ;
59492: LD_ADDR_EXP 54
59496: PUSH
59497: LD_INT 1
59499: ST_TO_ADDR
// if p3 = 5 then
59500: LD_VAR 0 3
59504: PUSH
59505: LD_INT 5
59507: EQUAL
59508: IFFALSE 59518
// sLevel := true ;
59510: LD_ADDR_EXP 58
59514: PUSH
59515: LD_INT 1
59517: ST_TO_ADDR
// if p3 = 6 then
59518: LD_VAR 0 3
59522: PUSH
59523: LD_INT 6
59525: EQUAL
59526: IFFALSE 59536
// sArmoury := true ;
59528: LD_ADDR_EXP 59
59532: PUSH
59533: LD_INT 1
59535: ST_TO_ADDR
// if p3 = 7 then
59536: LD_VAR 0 3
59540: PUSH
59541: LD_INT 7
59543: EQUAL
59544: IFFALSE 59554
// sRadar := true ;
59546: LD_ADDR_EXP 60
59550: PUSH
59551: LD_INT 1
59553: ST_TO_ADDR
// if p3 = 8 then
59554: LD_VAR 0 3
59558: PUSH
59559: LD_INT 8
59561: EQUAL
59562: IFFALSE 59572
// sBunker := true ;
59564: LD_ADDR_EXP 61
59568: PUSH
59569: LD_INT 1
59571: ST_TO_ADDR
// if p3 = 9 then
59572: LD_VAR 0 3
59576: PUSH
59577: LD_INT 9
59579: EQUAL
59580: IFFALSE 59590
// sHack := true ;
59582: LD_ADDR_EXP 62
59586: PUSH
59587: LD_INT 1
59589: ST_TO_ADDR
// if p3 = 10 then
59590: LD_VAR 0 3
59594: PUSH
59595: LD_INT 10
59597: EQUAL
59598: IFFALSE 59608
// sFire := true ;
59600: LD_ADDR_EXP 63
59604: PUSH
59605: LD_INT 1
59607: ST_TO_ADDR
// if p3 = 11 then
59608: LD_VAR 0 3
59612: PUSH
59613: LD_INT 11
59615: EQUAL
59616: IFFALSE 59626
// sRefresh := true ;
59618: LD_ADDR_EXP 64
59622: PUSH
59623: LD_INT 1
59625: ST_TO_ADDR
// if p3 = 12 then
59626: LD_VAR 0 3
59630: PUSH
59631: LD_INT 12
59633: EQUAL
59634: IFFALSE 59644
// sExp := true ;
59636: LD_ADDR_EXP 65
59640: PUSH
59641: LD_INT 1
59643: ST_TO_ADDR
// if p3 = 13 then
59644: LD_VAR 0 3
59648: PUSH
59649: LD_INT 13
59651: EQUAL
59652: IFFALSE 59662
// sDepot := true ;
59654: LD_ADDR_EXP 66
59658: PUSH
59659: LD_INT 1
59661: ST_TO_ADDR
// if p3 = 14 then
59662: LD_VAR 0 3
59666: PUSH
59667: LD_INT 14
59669: EQUAL
59670: IFFALSE 59680
// sFlag := true ;
59672: LD_ADDR_EXP 67
59676: PUSH
59677: LD_INT 1
59679: ST_TO_ADDR
// if p3 = 15 then
59680: LD_VAR 0 3
59684: PUSH
59685: LD_INT 15
59687: EQUAL
59688: IFFALSE 59698
// sKamikadze := true ;
59690: LD_ADDR_EXP 75
59694: PUSH
59695: LD_INT 1
59697: ST_TO_ADDR
// if p3 = 16 then
59698: LD_VAR 0 3
59702: PUSH
59703: LD_INT 16
59705: EQUAL
59706: IFFALSE 59716
// sTroll := true ;
59708: LD_ADDR_EXP 76
59712: PUSH
59713: LD_INT 1
59715: ST_TO_ADDR
// if p3 = 17 then
59716: LD_VAR 0 3
59720: PUSH
59721: LD_INT 17
59723: EQUAL
59724: IFFALSE 59734
// sSlow := true ;
59726: LD_ADDR_EXP 77
59730: PUSH
59731: LD_INT 1
59733: ST_TO_ADDR
// if p3 = 18 then
59734: LD_VAR 0 3
59738: PUSH
59739: LD_INT 18
59741: EQUAL
59742: IFFALSE 59752
// sLack := true ;
59744: LD_ADDR_EXP 78
59748: PUSH
59749: LD_INT 1
59751: ST_TO_ADDR
// if p3 = 19 then
59752: LD_VAR 0 3
59756: PUSH
59757: LD_INT 19
59759: EQUAL
59760: IFFALSE 59770
// sTank := true ;
59762: LD_ADDR_EXP 80
59766: PUSH
59767: LD_INT 1
59769: ST_TO_ADDR
// if p3 = 20 then
59770: LD_VAR 0 3
59774: PUSH
59775: LD_INT 20
59777: EQUAL
59778: IFFALSE 59788
// sRemote := true ;
59780: LD_ADDR_EXP 81
59784: PUSH
59785: LD_INT 1
59787: ST_TO_ADDR
// if p3 = 21 then
59788: LD_VAR 0 3
59792: PUSH
59793: LD_INT 21
59795: EQUAL
59796: IFFALSE 59806
// sPowell := true ;
59798: LD_ADDR_EXP 82
59802: PUSH
59803: LD_INT 1
59805: ST_TO_ADDR
// if p3 = 22 then
59806: LD_VAR 0 3
59810: PUSH
59811: LD_INT 22
59813: EQUAL
59814: IFFALSE 59824
// sTeleport := true ;
59816: LD_ADDR_EXP 85
59820: PUSH
59821: LD_INT 1
59823: ST_TO_ADDR
// if p3 = 23 then
59824: LD_VAR 0 3
59828: PUSH
59829: LD_INT 23
59831: EQUAL
59832: IFFALSE 59842
// sOilTower := true ;
59834: LD_ADDR_EXP 87
59838: PUSH
59839: LD_INT 1
59841: ST_TO_ADDR
// if p3 = 24 then
59842: LD_VAR 0 3
59846: PUSH
59847: LD_INT 24
59849: EQUAL
59850: IFFALSE 59860
// sShovel := true ;
59852: LD_ADDR_EXP 88
59856: PUSH
59857: LD_INT 1
59859: ST_TO_ADDR
// if p3 = 25 then
59860: LD_VAR 0 3
59864: PUSH
59865: LD_INT 25
59867: EQUAL
59868: IFFALSE 59878
// sSheik := true ;
59870: LD_ADDR_EXP 89
59874: PUSH
59875: LD_INT 1
59877: ST_TO_ADDR
// if p3 = 26 then
59878: LD_VAR 0 3
59882: PUSH
59883: LD_INT 26
59885: EQUAL
59886: IFFALSE 59896
// sEarthquake := true ;
59888: LD_ADDR_EXP 91
59892: PUSH
59893: LD_INT 1
59895: ST_TO_ADDR
// if p3 = 27 then
59896: LD_VAR 0 3
59900: PUSH
59901: LD_INT 27
59903: EQUAL
59904: IFFALSE 59914
// sAI := true ;
59906: LD_ADDR_EXP 92
59910: PUSH
59911: LD_INT 1
59913: ST_TO_ADDR
// if p3 = 28 then
59914: LD_VAR 0 3
59918: PUSH
59919: LD_INT 28
59921: EQUAL
59922: IFFALSE 59932
// sCargo := true ;
59924: LD_ADDR_EXP 95
59928: PUSH
59929: LD_INT 1
59931: ST_TO_ADDR
// if p3 = 29 then
59932: LD_VAR 0 3
59936: PUSH
59937: LD_INT 29
59939: EQUAL
59940: IFFALSE 59950
// sDLaser := true ;
59942: LD_ADDR_EXP 96
59946: PUSH
59947: LD_INT 1
59949: ST_TO_ADDR
// if p3 = 30 then
59950: LD_VAR 0 3
59954: PUSH
59955: LD_INT 30
59957: EQUAL
59958: IFFALSE 59968
// sExchange := true ;
59960: LD_ADDR_EXP 97
59964: PUSH
59965: LD_INT 1
59967: ST_TO_ADDR
// if p3 = 31 then
59968: LD_VAR 0 3
59972: PUSH
59973: LD_INT 31
59975: EQUAL
59976: IFFALSE 59986
// sFac := true ;
59978: LD_ADDR_EXP 98
59982: PUSH
59983: LD_INT 1
59985: ST_TO_ADDR
// if p3 = 32 then
59986: LD_VAR 0 3
59990: PUSH
59991: LD_INT 32
59993: EQUAL
59994: IFFALSE 60004
// sPower := true ;
59996: LD_ADDR_EXP 99
60000: PUSH
60001: LD_INT 1
60003: ST_TO_ADDR
// if p3 = 33 then
60004: LD_VAR 0 3
60008: PUSH
60009: LD_INT 33
60011: EQUAL
60012: IFFALSE 60022
// sRandom := true ;
60014: LD_ADDR_EXP 100
60018: PUSH
60019: LD_INT 1
60021: ST_TO_ADDR
// if p3 = 34 then
60022: LD_VAR 0 3
60026: PUSH
60027: LD_INT 34
60029: EQUAL
60030: IFFALSE 60040
// sShield := true ;
60032: LD_ADDR_EXP 101
60036: PUSH
60037: LD_INT 1
60039: ST_TO_ADDR
// if p3 = 35 then
60040: LD_VAR 0 3
60044: PUSH
60045: LD_INT 35
60047: EQUAL
60048: IFFALSE 60058
// sTime := true ;
60050: LD_ADDR_EXP 102
60054: PUSH
60055: LD_INT 1
60057: ST_TO_ADDR
// if p3 = 36 then
60058: LD_VAR 0 3
60062: PUSH
60063: LD_INT 36
60065: EQUAL
60066: IFFALSE 60076
// sTools := true ;
60068: LD_ADDR_EXP 103
60072: PUSH
60073: LD_INT 1
60075: ST_TO_ADDR
// if p3 = 101 then
60076: LD_VAR 0 3
60080: PUSH
60081: LD_INT 101
60083: EQUAL
60084: IFFALSE 60094
// sSold := true ;
60086: LD_ADDR_EXP 68
60090: PUSH
60091: LD_INT 1
60093: ST_TO_ADDR
// if p3 = 102 then
60094: LD_VAR 0 3
60098: PUSH
60099: LD_INT 102
60101: EQUAL
60102: IFFALSE 60112
// sDiff := true ;
60104: LD_ADDR_EXP 69
60108: PUSH
60109: LD_INT 1
60111: ST_TO_ADDR
// if p3 = 103 then
60112: LD_VAR 0 3
60116: PUSH
60117: LD_INT 103
60119: EQUAL
60120: IFFALSE 60130
// sFog := true ;
60122: LD_ADDR_EXP 72
60126: PUSH
60127: LD_INT 1
60129: ST_TO_ADDR
// if p3 = 104 then
60130: LD_VAR 0 3
60134: PUSH
60135: LD_INT 104
60137: EQUAL
60138: IFFALSE 60148
// sReset := true ;
60140: LD_ADDR_EXP 73
60144: PUSH
60145: LD_INT 1
60147: ST_TO_ADDR
// if p3 = 105 then
60148: LD_VAR 0 3
60152: PUSH
60153: LD_INT 105
60155: EQUAL
60156: IFFALSE 60166
// sSun := true ;
60158: LD_ADDR_EXP 74
60162: PUSH
60163: LD_INT 1
60165: ST_TO_ADDR
// if p3 = 106 then
60166: LD_VAR 0 3
60170: PUSH
60171: LD_INT 106
60173: EQUAL
60174: IFFALSE 60184
// sTiger := true ;
60176: LD_ADDR_EXP 70
60180: PUSH
60181: LD_INT 1
60183: ST_TO_ADDR
// if p3 = 107 then
60184: LD_VAR 0 3
60188: PUSH
60189: LD_INT 107
60191: EQUAL
60192: IFFALSE 60202
// sBomb := true ;
60194: LD_ADDR_EXP 71
60198: PUSH
60199: LD_INT 1
60201: ST_TO_ADDR
// if p3 = 108 then
60202: LD_VAR 0 3
60206: PUSH
60207: LD_INT 108
60209: EQUAL
60210: IFFALSE 60220
// sWound := true ;
60212: LD_ADDR_EXP 79
60216: PUSH
60217: LD_INT 1
60219: ST_TO_ADDR
// if p3 = 109 then
60220: LD_VAR 0 3
60224: PUSH
60225: LD_INT 109
60227: EQUAL
60228: IFFALSE 60238
// sBetray := true ;
60230: LD_ADDR_EXP 83
60234: PUSH
60235: LD_INT 1
60237: ST_TO_ADDR
// if p3 = 110 then
60238: LD_VAR 0 3
60242: PUSH
60243: LD_INT 110
60245: EQUAL
60246: IFFALSE 60256
// sContamin := true ;
60248: LD_ADDR_EXP 84
60252: PUSH
60253: LD_INT 1
60255: ST_TO_ADDR
// if p3 = 111 then
60256: LD_VAR 0 3
60260: PUSH
60261: LD_INT 111
60263: EQUAL
60264: IFFALSE 60274
// sOil := true ;
60266: LD_ADDR_EXP 86
60270: PUSH
60271: LD_INT 1
60273: ST_TO_ADDR
// if p3 = 112 then
60274: LD_VAR 0 3
60278: PUSH
60279: LD_INT 112
60281: EQUAL
60282: IFFALSE 60292
// sStu := true ;
60284: LD_ADDR_EXP 90
60288: PUSH
60289: LD_INT 1
60291: ST_TO_ADDR
// if p3 = 113 then
60292: LD_VAR 0 3
60296: PUSH
60297: LD_INT 113
60299: EQUAL
60300: IFFALSE 60310
// sBazooka := true ;
60302: LD_ADDR_EXP 93
60306: PUSH
60307: LD_INT 1
60309: ST_TO_ADDR
// if p3 = 114 then
60310: LD_VAR 0 3
60314: PUSH
60315: LD_INT 114
60317: EQUAL
60318: IFFALSE 60328
// sMortar := true ;
60320: LD_ADDR_EXP 94
60324: PUSH
60325: LD_INT 1
60327: ST_TO_ADDR
// if p3 = 115 then
60328: LD_VAR 0 3
60332: PUSH
60333: LD_INT 115
60335: EQUAL
60336: IFFALSE 60346
// sRanger := true ;
60338: LD_ADDR_EXP 104
60342: PUSH
60343: LD_INT 1
60345: ST_TO_ADDR
// if p3 = 116 then
60346: LD_VAR 0 3
60350: PUSH
60351: LD_INT 116
60353: EQUAL
60354: IFFALSE 60364
// sComputer := true ;
60356: LD_ADDR_EXP 105
60360: PUSH
60361: LD_INT 1
60363: ST_TO_ADDR
// if p3 = 117 then
60364: LD_VAR 0 3
60368: PUSH
60369: LD_INT 117
60371: EQUAL
60372: IFFALSE 60382
// s30 := true ;
60374: LD_ADDR_EXP 106
60378: PUSH
60379: LD_INT 1
60381: ST_TO_ADDR
// if p3 = 118 then
60382: LD_VAR 0 3
60386: PUSH
60387: LD_INT 118
60389: EQUAL
60390: IFFALSE 60400
// s60 := true ;
60392: LD_ADDR_EXP 107
60396: PUSH
60397: LD_INT 1
60399: ST_TO_ADDR
// end ; if p2 = hack_mode then
60400: LD_VAR 0 2
60404: PUSH
60405: LD_INT 101
60407: EQUAL
60408: IFFALSE 60536
// begin case p3 of 1 :
60410: LD_VAR 0 3
60414: PUSH
60415: LD_INT 1
60417: DOUBLE
60418: EQUAL
60419: IFTRUE 60423
60421: GO 60430
60423: POP
// hHackUnlimitedResources ; 2 :
60424: CALL 72683 0 0
60428: GO 60536
60430: LD_INT 2
60432: DOUBLE
60433: EQUAL
60434: IFTRUE 60438
60436: GO 60445
60438: POP
// hHackSetLevel10 ; 3 :
60439: CALL 72816 0 0
60443: GO 60536
60445: LD_INT 3
60447: DOUBLE
60448: EQUAL
60449: IFTRUE 60453
60451: GO 60460
60453: POP
// hHackSetLevel10YourUnits ; 4 :
60454: CALL 72901 0 0
60458: GO 60536
60460: LD_INT 4
60462: DOUBLE
60463: EQUAL
60464: IFTRUE 60468
60466: GO 60475
60468: POP
// hHackInvincible ; 5 :
60469: CALL 73349 0 0
60473: GO 60536
60475: LD_INT 5
60477: DOUBLE
60478: EQUAL
60479: IFTRUE 60483
60481: GO 60490
60483: POP
// hHackInvisible ; 6 :
60484: CALL 73460 0 0
60488: GO 60536
60490: LD_INT 6
60492: DOUBLE
60493: EQUAL
60494: IFTRUE 60498
60496: GO 60505
60498: POP
// hHackChangeYourSide ; 7 :
60499: CALL 73517 0 0
60503: GO 60536
60505: LD_INT 7
60507: DOUBLE
60508: EQUAL
60509: IFTRUE 60513
60511: GO 60520
60513: POP
// hHackChangeUnitSide ; 8 :
60514: CALL 73559 0 0
60518: GO 60536
60520: LD_INT 8
60522: DOUBLE
60523: EQUAL
60524: IFTRUE 60528
60526: GO 60535
60528: POP
// hHackFog ; end ;
60529: CALL 73660 0 0
60533: GO 60536
60535: POP
// end ; if p2 = game_save_mode then
60536: LD_VAR 0 2
60540: PUSH
60541: LD_INT 102
60543: EQUAL
60544: IFFALSE 60599
// begin if p3 = 1 then
60546: LD_VAR 0 3
60550: PUSH
60551: LD_INT 1
60553: EQUAL
60554: IFFALSE 60566
// globalGameSaveCounter := p4 ;
60556: LD_ADDR_EXP 50
60560: PUSH
60561: LD_VAR 0 4
60565: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
60566: LD_VAR 0 3
60570: PUSH
60571: LD_INT 2
60573: EQUAL
60574: PUSH
60575: LD_EXP 50
60579: AND
60580: IFFALSE 60599
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
60582: LD_STRING setGameSaveCounter(
60584: PUSH
60585: LD_EXP 50
60589: STR
60590: PUSH
60591: LD_STRING )
60593: STR
60594: PPUSH
60595: CALL_OW 559
// end ; end ;
60599: LD_VAR 0 7
60603: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
60604: LD_INT 0
60606: PPUSH
// streamModeActive := false ;
60607: LD_ADDR_EXP 51
60611: PUSH
60612: LD_INT 0
60614: ST_TO_ADDR
// normalCounter := 36 ;
60615: LD_ADDR_EXP 52
60619: PUSH
60620: LD_INT 36
60622: ST_TO_ADDR
// hardcoreCounter := 18 ;
60623: LD_ADDR_EXP 53
60627: PUSH
60628: LD_INT 18
60630: ST_TO_ADDR
// sRocket := false ;
60631: LD_ADDR_EXP 56
60635: PUSH
60636: LD_INT 0
60638: ST_TO_ADDR
// sSpeed := false ;
60639: LD_ADDR_EXP 55
60643: PUSH
60644: LD_INT 0
60646: ST_TO_ADDR
// sEngine := false ;
60647: LD_ADDR_EXP 57
60651: PUSH
60652: LD_INT 0
60654: ST_TO_ADDR
// sSpec := false ;
60655: LD_ADDR_EXP 54
60659: PUSH
60660: LD_INT 0
60662: ST_TO_ADDR
// sLevel := false ;
60663: LD_ADDR_EXP 58
60667: PUSH
60668: LD_INT 0
60670: ST_TO_ADDR
// sArmoury := false ;
60671: LD_ADDR_EXP 59
60675: PUSH
60676: LD_INT 0
60678: ST_TO_ADDR
// sRadar := false ;
60679: LD_ADDR_EXP 60
60683: PUSH
60684: LD_INT 0
60686: ST_TO_ADDR
// sBunker := false ;
60687: LD_ADDR_EXP 61
60691: PUSH
60692: LD_INT 0
60694: ST_TO_ADDR
// sHack := false ;
60695: LD_ADDR_EXP 62
60699: PUSH
60700: LD_INT 0
60702: ST_TO_ADDR
// sFire := false ;
60703: LD_ADDR_EXP 63
60707: PUSH
60708: LD_INT 0
60710: ST_TO_ADDR
// sRefresh := false ;
60711: LD_ADDR_EXP 64
60715: PUSH
60716: LD_INT 0
60718: ST_TO_ADDR
// sExp := false ;
60719: LD_ADDR_EXP 65
60723: PUSH
60724: LD_INT 0
60726: ST_TO_ADDR
// sDepot := false ;
60727: LD_ADDR_EXP 66
60731: PUSH
60732: LD_INT 0
60734: ST_TO_ADDR
// sFlag := false ;
60735: LD_ADDR_EXP 67
60739: PUSH
60740: LD_INT 0
60742: ST_TO_ADDR
// sKamikadze := false ;
60743: LD_ADDR_EXP 75
60747: PUSH
60748: LD_INT 0
60750: ST_TO_ADDR
// sTroll := false ;
60751: LD_ADDR_EXP 76
60755: PUSH
60756: LD_INT 0
60758: ST_TO_ADDR
// sSlow := false ;
60759: LD_ADDR_EXP 77
60763: PUSH
60764: LD_INT 0
60766: ST_TO_ADDR
// sLack := false ;
60767: LD_ADDR_EXP 78
60771: PUSH
60772: LD_INT 0
60774: ST_TO_ADDR
// sTank := false ;
60775: LD_ADDR_EXP 80
60779: PUSH
60780: LD_INT 0
60782: ST_TO_ADDR
// sRemote := false ;
60783: LD_ADDR_EXP 81
60787: PUSH
60788: LD_INT 0
60790: ST_TO_ADDR
// sPowell := false ;
60791: LD_ADDR_EXP 82
60795: PUSH
60796: LD_INT 0
60798: ST_TO_ADDR
// sTeleport := false ;
60799: LD_ADDR_EXP 85
60803: PUSH
60804: LD_INT 0
60806: ST_TO_ADDR
// sOilTower := false ;
60807: LD_ADDR_EXP 87
60811: PUSH
60812: LD_INT 0
60814: ST_TO_ADDR
// sShovel := false ;
60815: LD_ADDR_EXP 88
60819: PUSH
60820: LD_INT 0
60822: ST_TO_ADDR
// sSheik := false ;
60823: LD_ADDR_EXP 89
60827: PUSH
60828: LD_INT 0
60830: ST_TO_ADDR
// sEarthquake := false ;
60831: LD_ADDR_EXP 91
60835: PUSH
60836: LD_INT 0
60838: ST_TO_ADDR
// sAI := false ;
60839: LD_ADDR_EXP 92
60843: PUSH
60844: LD_INT 0
60846: ST_TO_ADDR
// sCargo := false ;
60847: LD_ADDR_EXP 95
60851: PUSH
60852: LD_INT 0
60854: ST_TO_ADDR
// sDLaser := false ;
60855: LD_ADDR_EXP 96
60859: PUSH
60860: LD_INT 0
60862: ST_TO_ADDR
// sExchange := false ;
60863: LD_ADDR_EXP 97
60867: PUSH
60868: LD_INT 0
60870: ST_TO_ADDR
// sFac := false ;
60871: LD_ADDR_EXP 98
60875: PUSH
60876: LD_INT 0
60878: ST_TO_ADDR
// sPower := false ;
60879: LD_ADDR_EXP 99
60883: PUSH
60884: LD_INT 0
60886: ST_TO_ADDR
// sRandom := false ;
60887: LD_ADDR_EXP 100
60891: PUSH
60892: LD_INT 0
60894: ST_TO_ADDR
// sShield := false ;
60895: LD_ADDR_EXP 101
60899: PUSH
60900: LD_INT 0
60902: ST_TO_ADDR
// sTime := false ;
60903: LD_ADDR_EXP 102
60907: PUSH
60908: LD_INT 0
60910: ST_TO_ADDR
// sTools := false ;
60911: LD_ADDR_EXP 103
60915: PUSH
60916: LD_INT 0
60918: ST_TO_ADDR
// sSold := false ;
60919: LD_ADDR_EXP 68
60923: PUSH
60924: LD_INT 0
60926: ST_TO_ADDR
// sDiff := false ;
60927: LD_ADDR_EXP 69
60931: PUSH
60932: LD_INT 0
60934: ST_TO_ADDR
// sFog := false ;
60935: LD_ADDR_EXP 72
60939: PUSH
60940: LD_INT 0
60942: ST_TO_ADDR
// sReset := false ;
60943: LD_ADDR_EXP 73
60947: PUSH
60948: LD_INT 0
60950: ST_TO_ADDR
// sSun := false ;
60951: LD_ADDR_EXP 74
60955: PUSH
60956: LD_INT 0
60958: ST_TO_ADDR
// sTiger := false ;
60959: LD_ADDR_EXP 70
60963: PUSH
60964: LD_INT 0
60966: ST_TO_ADDR
// sBomb := false ;
60967: LD_ADDR_EXP 71
60971: PUSH
60972: LD_INT 0
60974: ST_TO_ADDR
// sWound := false ;
60975: LD_ADDR_EXP 79
60979: PUSH
60980: LD_INT 0
60982: ST_TO_ADDR
// sBetray := false ;
60983: LD_ADDR_EXP 83
60987: PUSH
60988: LD_INT 0
60990: ST_TO_ADDR
// sContamin := false ;
60991: LD_ADDR_EXP 84
60995: PUSH
60996: LD_INT 0
60998: ST_TO_ADDR
// sOil := false ;
60999: LD_ADDR_EXP 86
61003: PUSH
61004: LD_INT 0
61006: ST_TO_ADDR
// sStu := false ;
61007: LD_ADDR_EXP 90
61011: PUSH
61012: LD_INT 0
61014: ST_TO_ADDR
// sBazooka := false ;
61015: LD_ADDR_EXP 93
61019: PUSH
61020: LD_INT 0
61022: ST_TO_ADDR
// sMortar := false ;
61023: LD_ADDR_EXP 94
61027: PUSH
61028: LD_INT 0
61030: ST_TO_ADDR
// sRanger := false ;
61031: LD_ADDR_EXP 104
61035: PUSH
61036: LD_INT 0
61038: ST_TO_ADDR
// sComputer := false ;
61039: LD_ADDR_EXP 105
61043: PUSH
61044: LD_INT 0
61046: ST_TO_ADDR
// s30 := false ;
61047: LD_ADDR_EXP 106
61051: PUSH
61052: LD_INT 0
61054: ST_TO_ADDR
// s60 := false ;
61055: LD_ADDR_EXP 107
61059: PUSH
61060: LD_INT 0
61062: ST_TO_ADDR
// end ;
61063: LD_VAR 0 1
61067: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61068: LD_INT 0
61070: PPUSH
61071: PPUSH
61072: PPUSH
61073: PPUSH
61074: PPUSH
61075: PPUSH
61076: PPUSH
// result := [ ] ;
61077: LD_ADDR_VAR 0 2
61081: PUSH
61082: EMPTY
61083: ST_TO_ADDR
// if campaign_id = 1 then
61084: LD_OWVAR 69
61088: PUSH
61089: LD_INT 1
61091: EQUAL
61092: IFFALSE 64258
// begin case mission_number of 1 :
61094: LD_OWVAR 70
61098: PUSH
61099: LD_INT 1
61101: DOUBLE
61102: EQUAL
61103: IFTRUE 61107
61105: GO 61183
61107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61108: LD_ADDR_VAR 0 2
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: LD_INT 4
61118: PUSH
61119: LD_INT 11
61121: PUSH
61122: LD_INT 12
61124: PUSH
61125: LD_INT 15
61127: PUSH
61128: LD_INT 16
61130: PUSH
61131: LD_INT 22
61133: PUSH
61134: LD_INT 23
61136: PUSH
61137: LD_INT 26
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 101
61153: PUSH
61154: LD_INT 102
61156: PUSH
61157: LD_INT 106
61159: PUSH
61160: LD_INT 116
61162: PUSH
61163: LD_INT 117
61165: PUSH
61166: LD_INT 118
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: ST_TO_ADDR
61181: GO 64256
61183: LD_INT 2
61185: DOUBLE
61186: EQUAL
61187: IFTRUE 61191
61189: GO 61275
61191: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61192: LD_ADDR_VAR 0 2
61196: PUSH
61197: LD_INT 2
61199: PUSH
61200: LD_INT 4
61202: PUSH
61203: LD_INT 11
61205: PUSH
61206: LD_INT 12
61208: PUSH
61209: LD_INT 15
61211: PUSH
61212: LD_INT 16
61214: PUSH
61215: LD_INT 22
61217: PUSH
61218: LD_INT 23
61220: PUSH
61221: LD_INT 26
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 101
61237: PUSH
61238: LD_INT 102
61240: PUSH
61241: LD_INT 105
61243: PUSH
61244: LD_INT 106
61246: PUSH
61247: LD_INT 108
61249: PUSH
61250: LD_INT 116
61252: PUSH
61253: LD_INT 117
61255: PUSH
61256: LD_INT 118
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: ST_TO_ADDR
61273: GO 64256
61275: LD_INT 3
61277: DOUBLE
61278: EQUAL
61279: IFTRUE 61283
61281: GO 61371
61283: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61284: LD_ADDR_VAR 0 2
61288: PUSH
61289: LD_INT 2
61291: PUSH
61292: LD_INT 4
61294: PUSH
61295: LD_INT 5
61297: PUSH
61298: LD_INT 11
61300: PUSH
61301: LD_INT 12
61303: PUSH
61304: LD_INT 15
61306: PUSH
61307: LD_INT 16
61309: PUSH
61310: LD_INT 22
61312: PUSH
61313: LD_INT 26
61315: PUSH
61316: LD_INT 36
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: LIST
61324: LIST
61325: LIST
61326: LIST
61327: LIST
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 101
61333: PUSH
61334: LD_INT 102
61336: PUSH
61337: LD_INT 105
61339: PUSH
61340: LD_INT 106
61342: PUSH
61343: LD_INT 108
61345: PUSH
61346: LD_INT 116
61348: PUSH
61349: LD_INT 117
61351: PUSH
61352: LD_INT 118
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: ST_TO_ADDR
61369: GO 64256
61371: LD_INT 4
61373: DOUBLE
61374: EQUAL
61375: IFTRUE 61379
61377: GO 61475
61379: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61380: LD_ADDR_VAR 0 2
61384: PUSH
61385: LD_INT 2
61387: PUSH
61388: LD_INT 4
61390: PUSH
61391: LD_INT 5
61393: PUSH
61394: LD_INT 8
61396: PUSH
61397: LD_INT 11
61399: PUSH
61400: LD_INT 12
61402: PUSH
61403: LD_INT 15
61405: PUSH
61406: LD_INT 16
61408: PUSH
61409: LD_INT 22
61411: PUSH
61412: LD_INT 23
61414: PUSH
61415: LD_INT 26
61417: PUSH
61418: LD_INT 36
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 101
61437: PUSH
61438: LD_INT 102
61440: PUSH
61441: LD_INT 105
61443: PUSH
61444: LD_INT 106
61446: PUSH
61447: LD_INT 108
61449: PUSH
61450: LD_INT 116
61452: PUSH
61453: LD_INT 117
61455: PUSH
61456: LD_INT 118
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: ST_TO_ADDR
61473: GO 64256
61475: LD_INT 5
61477: DOUBLE
61478: EQUAL
61479: IFTRUE 61483
61481: GO 61595
61483: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
61484: LD_ADDR_VAR 0 2
61488: PUSH
61489: LD_INT 2
61491: PUSH
61492: LD_INT 4
61494: PUSH
61495: LD_INT 5
61497: PUSH
61498: LD_INT 6
61500: PUSH
61501: LD_INT 8
61503: PUSH
61504: LD_INT 11
61506: PUSH
61507: LD_INT 12
61509: PUSH
61510: LD_INT 15
61512: PUSH
61513: LD_INT 16
61515: PUSH
61516: LD_INT 22
61518: PUSH
61519: LD_INT 23
61521: PUSH
61522: LD_INT 25
61524: PUSH
61525: LD_INT 26
61527: PUSH
61528: LD_INT 36
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 101
61549: PUSH
61550: LD_INT 102
61552: PUSH
61553: LD_INT 105
61555: PUSH
61556: LD_INT 106
61558: PUSH
61559: LD_INT 108
61561: PUSH
61562: LD_INT 109
61564: PUSH
61565: LD_INT 112
61567: PUSH
61568: LD_INT 116
61570: PUSH
61571: LD_INT 117
61573: PUSH
61574: LD_INT 118
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: PUSH
61589: EMPTY
61590: LIST
61591: LIST
61592: ST_TO_ADDR
61593: GO 64256
61595: LD_INT 6
61597: DOUBLE
61598: EQUAL
61599: IFTRUE 61603
61601: GO 61735
61603: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
61604: LD_ADDR_VAR 0 2
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: LD_INT 4
61614: PUSH
61615: LD_INT 5
61617: PUSH
61618: LD_INT 6
61620: PUSH
61621: LD_INT 8
61623: PUSH
61624: LD_INT 11
61626: PUSH
61627: LD_INT 12
61629: PUSH
61630: LD_INT 15
61632: PUSH
61633: LD_INT 16
61635: PUSH
61636: LD_INT 20
61638: PUSH
61639: LD_INT 21
61641: PUSH
61642: LD_INT 22
61644: PUSH
61645: LD_INT 23
61647: PUSH
61648: LD_INT 25
61650: PUSH
61651: LD_INT 26
61653: PUSH
61654: LD_INT 30
61656: PUSH
61657: LD_INT 31
61659: PUSH
61660: LD_INT 32
61662: PUSH
61663: LD_INT 36
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 101
61689: PUSH
61690: LD_INT 102
61692: PUSH
61693: LD_INT 105
61695: PUSH
61696: LD_INT 106
61698: PUSH
61699: LD_INT 108
61701: PUSH
61702: LD_INT 109
61704: PUSH
61705: LD_INT 112
61707: PUSH
61708: LD_INT 116
61710: PUSH
61711: LD_INT 117
61713: PUSH
61714: LD_INT 118
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: ST_TO_ADDR
61733: GO 64256
61735: LD_INT 7
61737: DOUBLE
61738: EQUAL
61739: IFTRUE 61743
61741: GO 61855
61743: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
61744: LD_ADDR_VAR 0 2
61748: PUSH
61749: LD_INT 2
61751: PUSH
61752: LD_INT 4
61754: PUSH
61755: LD_INT 5
61757: PUSH
61758: LD_INT 7
61760: PUSH
61761: LD_INT 11
61763: PUSH
61764: LD_INT 12
61766: PUSH
61767: LD_INT 15
61769: PUSH
61770: LD_INT 16
61772: PUSH
61773: LD_INT 20
61775: PUSH
61776: LD_INT 21
61778: PUSH
61779: LD_INT 22
61781: PUSH
61782: LD_INT 23
61784: PUSH
61785: LD_INT 25
61787: PUSH
61788: LD_INT 26
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 101
61809: PUSH
61810: LD_INT 102
61812: PUSH
61813: LD_INT 103
61815: PUSH
61816: LD_INT 105
61818: PUSH
61819: LD_INT 106
61821: PUSH
61822: LD_INT 108
61824: PUSH
61825: LD_INT 112
61827: PUSH
61828: LD_INT 116
61830: PUSH
61831: LD_INT 117
61833: PUSH
61834: LD_INT 118
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: LIST
61841: LIST
61842: LIST
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: LIST
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: ST_TO_ADDR
61853: GO 64256
61855: LD_INT 8
61857: DOUBLE
61858: EQUAL
61859: IFTRUE 61863
61861: GO 62003
61863: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
61864: LD_ADDR_VAR 0 2
61868: PUSH
61869: LD_INT 2
61871: PUSH
61872: LD_INT 4
61874: PUSH
61875: LD_INT 5
61877: PUSH
61878: LD_INT 6
61880: PUSH
61881: LD_INT 7
61883: PUSH
61884: LD_INT 8
61886: PUSH
61887: LD_INT 11
61889: PUSH
61890: LD_INT 12
61892: PUSH
61893: LD_INT 15
61895: PUSH
61896: LD_INT 16
61898: PUSH
61899: LD_INT 20
61901: PUSH
61902: LD_INT 21
61904: PUSH
61905: LD_INT 22
61907: PUSH
61908: LD_INT 23
61910: PUSH
61911: LD_INT 25
61913: PUSH
61914: LD_INT 26
61916: PUSH
61917: LD_INT 30
61919: PUSH
61920: LD_INT 31
61922: PUSH
61923: LD_INT 32
61925: PUSH
61926: LD_INT 36
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: LIST
61939: LIST
61940: LIST
61941: LIST
61942: LIST
61943: LIST
61944: LIST
61945: LIST
61946: LIST
61947: LIST
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 101
61953: PUSH
61954: LD_INT 102
61956: PUSH
61957: LD_INT 103
61959: PUSH
61960: LD_INT 105
61962: PUSH
61963: LD_INT 106
61965: PUSH
61966: LD_INT 108
61968: PUSH
61969: LD_INT 109
61971: PUSH
61972: LD_INT 112
61974: PUSH
61975: LD_INT 116
61977: PUSH
61978: LD_INT 117
61980: PUSH
61981: LD_INT 118
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: ST_TO_ADDR
62001: GO 64256
62003: LD_INT 9
62005: DOUBLE
62006: EQUAL
62007: IFTRUE 62011
62009: GO 62159
62011: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62012: LD_ADDR_VAR 0 2
62016: PUSH
62017: LD_INT 2
62019: PUSH
62020: LD_INT 4
62022: PUSH
62023: LD_INT 5
62025: PUSH
62026: LD_INT 6
62028: PUSH
62029: LD_INT 7
62031: PUSH
62032: LD_INT 8
62034: PUSH
62035: LD_INT 11
62037: PUSH
62038: LD_INT 12
62040: PUSH
62041: LD_INT 15
62043: PUSH
62044: LD_INT 16
62046: PUSH
62047: LD_INT 20
62049: PUSH
62050: LD_INT 21
62052: PUSH
62053: LD_INT 22
62055: PUSH
62056: LD_INT 23
62058: PUSH
62059: LD_INT 25
62061: PUSH
62062: LD_INT 26
62064: PUSH
62065: LD_INT 28
62067: PUSH
62068: LD_INT 30
62070: PUSH
62071: LD_INT 31
62073: PUSH
62074: LD_INT 32
62076: PUSH
62077: LD_INT 36
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 101
62105: PUSH
62106: LD_INT 102
62108: PUSH
62109: LD_INT 103
62111: PUSH
62112: LD_INT 105
62114: PUSH
62115: LD_INT 106
62117: PUSH
62118: LD_INT 108
62120: PUSH
62121: LD_INT 109
62123: PUSH
62124: LD_INT 112
62126: PUSH
62127: LD_INT 114
62129: PUSH
62130: LD_INT 116
62132: PUSH
62133: LD_INT 117
62135: PUSH
62136: LD_INT 118
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: ST_TO_ADDR
62157: GO 64256
62159: LD_INT 10
62161: DOUBLE
62162: EQUAL
62163: IFTRUE 62167
62165: GO 62363
62167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62168: LD_ADDR_VAR 0 2
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 4
62178: PUSH
62179: LD_INT 5
62181: PUSH
62182: LD_INT 6
62184: PUSH
62185: LD_INT 7
62187: PUSH
62188: LD_INT 8
62190: PUSH
62191: LD_INT 9
62193: PUSH
62194: LD_INT 10
62196: PUSH
62197: LD_INT 11
62199: PUSH
62200: LD_INT 12
62202: PUSH
62203: LD_INT 13
62205: PUSH
62206: LD_INT 14
62208: PUSH
62209: LD_INT 15
62211: PUSH
62212: LD_INT 16
62214: PUSH
62215: LD_INT 17
62217: PUSH
62218: LD_INT 18
62220: PUSH
62221: LD_INT 19
62223: PUSH
62224: LD_INT 20
62226: PUSH
62227: LD_INT 21
62229: PUSH
62230: LD_INT 22
62232: PUSH
62233: LD_INT 23
62235: PUSH
62236: LD_INT 24
62238: PUSH
62239: LD_INT 25
62241: PUSH
62242: LD_INT 26
62244: PUSH
62245: LD_INT 28
62247: PUSH
62248: LD_INT 30
62250: PUSH
62251: LD_INT 31
62253: PUSH
62254: LD_INT 32
62256: PUSH
62257: LD_INT 36
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 101
62293: PUSH
62294: LD_INT 102
62296: PUSH
62297: LD_INT 103
62299: PUSH
62300: LD_INT 104
62302: PUSH
62303: LD_INT 105
62305: PUSH
62306: LD_INT 106
62308: PUSH
62309: LD_INT 107
62311: PUSH
62312: LD_INT 108
62314: PUSH
62315: LD_INT 109
62317: PUSH
62318: LD_INT 110
62320: PUSH
62321: LD_INT 111
62323: PUSH
62324: LD_INT 112
62326: PUSH
62327: LD_INT 114
62329: PUSH
62330: LD_INT 116
62332: PUSH
62333: LD_INT 117
62335: PUSH
62336: LD_INT 118
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: PUSH
62357: EMPTY
62358: LIST
62359: LIST
62360: ST_TO_ADDR
62361: GO 64256
62363: LD_INT 11
62365: DOUBLE
62366: EQUAL
62367: IFTRUE 62371
62369: GO 62575
62371: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62372: LD_ADDR_VAR 0 2
62376: PUSH
62377: LD_INT 2
62379: PUSH
62380: LD_INT 3
62382: PUSH
62383: LD_INT 4
62385: PUSH
62386: LD_INT 5
62388: PUSH
62389: LD_INT 6
62391: PUSH
62392: LD_INT 7
62394: PUSH
62395: LD_INT 8
62397: PUSH
62398: LD_INT 9
62400: PUSH
62401: LD_INT 10
62403: PUSH
62404: LD_INT 11
62406: PUSH
62407: LD_INT 12
62409: PUSH
62410: LD_INT 13
62412: PUSH
62413: LD_INT 14
62415: PUSH
62416: LD_INT 15
62418: PUSH
62419: LD_INT 16
62421: PUSH
62422: LD_INT 17
62424: PUSH
62425: LD_INT 18
62427: PUSH
62428: LD_INT 19
62430: PUSH
62431: LD_INT 20
62433: PUSH
62434: LD_INT 21
62436: PUSH
62437: LD_INT 22
62439: PUSH
62440: LD_INT 23
62442: PUSH
62443: LD_INT 24
62445: PUSH
62446: LD_INT 25
62448: PUSH
62449: LD_INT 26
62451: PUSH
62452: LD_INT 28
62454: PUSH
62455: LD_INT 30
62457: PUSH
62458: LD_INT 31
62460: PUSH
62461: LD_INT 32
62463: PUSH
62464: LD_INT 34
62466: PUSH
62467: LD_INT 36
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: LIST
62481: LIST
62482: LIST
62483: LIST
62484: LIST
62485: LIST
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 101
62505: PUSH
62506: LD_INT 102
62508: PUSH
62509: LD_INT 103
62511: PUSH
62512: LD_INT 104
62514: PUSH
62515: LD_INT 105
62517: PUSH
62518: LD_INT 106
62520: PUSH
62521: LD_INT 107
62523: PUSH
62524: LD_INT 108
62526: PUSH
62527: LD_INT 109
62529: PUSH
62530: LD_INT 110
62532: PUSH
62533: LD_INT 111
62535: PUSH
62536: LD_INT 112
62538: PUSH
62539: LD_INT 114
62541: PUSH
62542: LD_INT 116
62544: PUSH
62545: LD_INT 117
62547: PUSH
62548: LD_INT 118
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: ST_TO_ADDR
62573: GO 64256
62575: LD_INT 12
62577: DOUBLE
62578: EQUAL
62579: IFTRUE 62583
62581: GO 62803
62583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
62584: LD_ADDR_VAR 0 2
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: LD_INT 4
62600: PUSH
62601: LD_INT 5
62603: PUSH
62604: LD_INT 6
62606: PUSH
62607: LD_INT 7
62609: PUSH
62610: LD_INT 8
62612: PUSH
62613: LD_INT 9
62615: PUSH
62616: LD_INT 10
62618: PUSH
62619: LD_INT 11
62621: PUSH
62622: LD_INT 12
62624: PUSH
62625: LD_INT 13
62627: PUSH
62628: LD_INT 14
62630: PUSH
62631: LD_INT 15
62633: PUSH
62634: LD_INT 16
62636: PUSH
62637: LD_INT 17
62639: PUSH
62640: LD_INT 18
62642: PUSH
62643: LD_INT 19
62645: PUSH
62646: LD_INT 20
62648: PUSH
62649: LD_INT 21
62651: PUSH
62652: LD_INT 22
62654: PUSH
62655: LD_INT 23
62657: PUSH
62658: LD_INT 24
62660: PUSH
62661: LD_INT 25
62663: PUSH
62664: LD_INT 26
62666: PUSH
62667: LD_INT 27
62669: PUSH
62670: LD_INT 28
62672: PUSH
62673: LD_INT 30
62675: PUSH
62676: LD_INT 31
62678: PUSH
62679: LD_INT 32
62681: PUSH
62682: LD_INT 33
62684: PUSH
62685: LD_INT 34
62687: PUSH
62688: LD_INT 36
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 101
62729: PUSH
62730: LD_INT 102
62732: PUSH
62733: LD_INT 103
62735: PUSH
62736: LD_INT 104
62738: PUSH
62739: LD_INT 105
62741: PUSH
62742: LD_INT 106
62744: PUSH
62745: LD_INT 107
62747: PUSH
62748: LD_INT 108
62750: PUSH
62751: LD_INT 109
62753: PUSH
62754: LD_INT 110
62756: PUSH
62757: LD_INT 111
62759: PUSH
62760: LD_INT 112
62762: PUSH
62763: LD_INT 113
62765: PUSH
62766: LD_INT 114
62768: PUSH
62769: LD_INT 116
62771: PUSH
62772: LD_INT 117
62774: PUSH
62775: LD_INT 118
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: LIST
62784: LIST
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: ST_TO_ADDR
62801: GO 64256
62803: LD_INT 13
62805: DOUBLE
62806: EQUAL
62807: IFTRUE 62811
62809: GO 63019
62811: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
62812: LD_ADDR_VAR 0 2
62816: PUSH
62817: LD_INT 1
62819: PUSH
62820: LD_INT 2
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: LD_INT 4
62828: PUSH
62829: LD_INT 5
62831: PUSH
62832: LD_INT 8
62834: PUSH
62835: LD_INT 9
62837: PUSH
62838: LD_INT 10
62840: PUSH
62841: LD_INT 11
62843: PUSH
62844: LD_INT 12
62846: PUSH
62847: LD_INT 14
62849: PUSH
62850: LD_INT 15
62852: PUSH
62853: LD_INT 16
62855: PUSH
62856: LD_INT 17
62858: PUSH
62859: LD_INT 18
62861: PUSH
62862: LD_INT 19
62864: PUSH
62865: LD_INT 20
62867: PUSH
62868: LD_INT 21
62870: PUSH
62871: LD_INT 22
62873: PUSH
62874: LD_INT 23
62876: PUSH
62877: LD_INT 24
62879: PUSH
62880: LD_INT 25
62882: PUSH
62883: LD_INT 26
62885: PUSH
62886: LD_INT 27
62888: PUSH
62889: LD_INT 28
62891: PUSH
62892: LD_INT 30
62894: PUSH
62895: LD_INT 31
62897: PUSH
62898: LD_INT 32
62900: PUSH
62901: LD_INT 33
62903: PUSH
62904: LD_INT 34
62906: PUSH
62907: LD_INT 36
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: LIST
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: LIST
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: PUSH
62943: LD_INT 101
62945: PUSH
62946: LD_INT 102
62948: PUSH
62949: LD_INT 103
62951: PUSH
62952: LD_INT 104
62954: PUSH
62955: LD_INT 105
62957: PUSH
62958: LD_INT 106
62960: PUSH
62961: LD_INT 107
62963: PUSH
62964: LD_INT 108
62966: PUSH
62967: LD_INT 109
62969: PUSH
62970: LD_INT 110
62972: PUSH
62973: LD_INT 111
62975: PUSH
62976: LD_INT 112
62978: PUSH
62979: LD_INT 113
62981: PUSH
62982: LD_INT 114
62984: PUSH
62985: LD_INT 116
62987: PUSH
62988: LD_INT 117
62990: PUSH
62991: LD_INT 118
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: ST_TO_ADDR
63017: GO 64256
63019: LD_INT 14
63021: DOUBLE
63022: EQUAL
63023: IFTRUE 63027
63025: GO 63251
63027: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63028: LD_ADDR_VAR 0 2
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 2
63038: PUSH
63039: LD_INT 3
63041: PUSH
63042: LD_INT 4
63044: PUSH
63045: LD_INT 5
63047: PUSH
63048: LD_INT 6
63050: PUSH
63051: LD_INT 7
63053: PUSH
63054: LD_INT 8
63056: PUSH
63057: LD_INT 9
63059: PUSH
63060: LD_INT 10
63062: PUSH
63063: LD_INT 11
63065: PUSH
63066: LD_INT 12
63068: PUSH
63069: LD_INT 13
63071: PUSH
63072: LD_INT 14
63074: PUSH
63075: LD_INT 15
63077: PUSH
63078: LD_INT 16
63080: PUSH
63081: LD_INT 17
63083: PUSH
63084: LD_INT 18
63086: PUSH
63087: LD_INT 19
63089: PUSH
63090: LD_INT 20
63092: PUSH
63093: LD_INT 21
63095: PUSH
63096: LD_INT 22
63098: PUSH
63099: LD_INT 23
63101: PUSH
63102: LD_INT 24
63104: PUSH
63105: LD_INT 25
63107: PUSH
63108: LD_INT 26
63110: PUSH
63111: LD_INT 27
63113: PUSH
63114: LD_INT 28
63116: PUSH
63117: LD_INT 29
63119: PUSH
63120: LD_INT 30
63122: PUSH
63123: LD_INT 31
63125: PUSH
63126: LD_INT 32
63128: PUSH
63129: LD_INT 33
63131: PUSH
63132: LD_INT 34
63134: PUSH
63135: LD_INT 36
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 101
63177: PUSH
63178: LD_INT 102
63180: PUSH
63181: LD_INT 103
63183: PUSH
63184: LD_INT 104
63186: PUSH
63187: LD_INT 105
63189: PUSH
63190: LD_INT 106
63192: PUSH
63193: LD_INT 107
63195: PUSH
63196: LD_INT 108
63198: PUSH
63199: LD_INT 109
63201: PUSH
63202: LD_INT 110
63204: PUSH
63205: LD_INT 111
63207: PUSH
63208: LD_INT 112
63210: PUSH
63211: LD_INT 113
63213: PUSH
63214: LD_INT 114
63216: PUSH
63217: LD_INT 116
63219: PUSH
63220: LD_INT 117
63222: PUSH
63223: LD_INT 118
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: LIST
63239: LIST
63240: LIST
63241: LIST
63242: LIST
63243: LIST
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: ST_TO_ADDR
63249: GO 64256
63251: LD_INT 15
63253: DOUBLE
63254: EQUAL
63255: IFTRUE 63259
63257: GO 63483
63259: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63260: LD_ADDR_VAR 0 2
63264: PUSH
63265: LD_INT 1
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: LD_INT 4
63276: PUSH
63277: LD_INT 5
63279: PUSH
63280: LD_INT 6
63282: PUSH
63283: LD_INT 7
63285: PUSH
63286: LD_INT 8
63288: PUSH
63289: LD_INT 9
63291: PUSH
63292: LD_INT 10
63294: PUSH
63295: LD_INT 11
63297: PUSH
63298: LD_INT 12
63300: PUSH
63301: LD_INT 13
63303: PUSH
63304: LD_INT 14
63306: PUSH
63307: LD_INT 15
63309: PUSH
63310: LD_INT 16
63312: PUSH
63313: LD_INT 17
63315: PUSH
63316: LD_INT 18
63318: PUSH
63319: LD_INT 19
63321: PUSH
63322: LD_INT 20
63324: PUSH
63325: LD_INT 21
63327: PUSH
63328: LD_INT 22
63330: PUSH
63331: LD_INT 23
63333: PUSH
63334: LD_INT 24
63336: PUSH
63337: LD_INT 25
63339: PUSH
63340: LD_INT 26
63342: PUSH
63343: LD_INT 27
63345: PUSH
63346: LD_INT 28
63348: PUSH
63349: LD_INT 29
63351: PUSH
63352: LD_INT 30
63354: PUSH
63355: LD_INT 31
63357: PUSH
63358: LD_INT 32
63360: PUSH
63361: LD_INT 33
63363: PUSH
63364: LD_INT 34
63366: PUSH
63367: LD_INT 36
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: PUSH
63407: LD_INT 101
63409: PUSH
63410: LD_INT 102
63412: PUSH
63413: LD_INT 103
63415: PUSH
63416: LD_INT 104
63418: PUSH
63419: LD_INT 105
63421: PUSH
63422: LD_INT 106
63424: PUSH
63425: LD_INT 107
63427: PUSH
63428: LD_INT 108
63430: PUSH
63431: LD_INT 109
63433: PUSH
63434: LD_INT 110
63436: PUSH
63437: LD_INT 111
63439: PUSH
63440: LD_INT 112
63442: PUSH
63443: LD_INT 113
63445: PUSH
63446: LD_INT 114
63448: PUSH
63449: LD_INT 116
63451: PUSH
63452: LD_INT 117
63454: PUSH
63455: LD_INT 118
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: LIST
63462: LIST
63463: LIST
63464: LIST
63465: LIST
63466: LIST
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: ST_TO_ADDR
63481: GO 64256
63483: LD_INT 16
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63491
63489: GO 63627
63491: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
63492: LD_ADDR_VAR 0 2
63496: PUSH
63497: LD_INT 2
63499: PUSH
63500: LD_INT 4
63502: PUSH
63503: LD_INT 5
63505: PUSH
63506: LD_INT 7
63508: PUSH
63509: LD_INT 11
63511: PUSH
63512: LD_INT 12
63514: PUSH
63515: LD_INT 15
63517: PUSH
63518: LD_INT 16
63520: PUSH
63521: LD_INT 20
63523: PUSH
63524: LD_INT 21
63526: PUSH
63527: LD_INT 22
63529: PUSH
63530: LD_INT 23
63532: PUSH
63533: LD_INT 25
63535: PUSH
63536: LD_INT 26
63538: PUSH
63539: LD_INT 30
63541: PUSH
63542: LD_INT 31
63544: PUSH
63545: LD_INT 32
63547: PUSH
63548: LD_INT 33
63550: PUSH
63551: LD_INT 34
63553: PUSH
63554: EMPTY
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 101
63577: PUSH
63578: LD_INT 102
63580: PUSH
63581: LD_INT 103
63583: PUSH
63584: LD_INT 106
63586: PUSH
63587: LD_INT 108
63589: PUSH
63590: LD_INT 112
63592: PUSH
63593: LD_INT 113
63595: PUSH
63596: LD_INT 114
63598: PUSH
63599: LD_INT 116
63601: PUSH
63602: LD_INT 117
63604: PUSH
63605: LD_INT 118
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: ST_TO_ADDR
63625: GO 64256
63627: LD_INT 17
63629: DOUBLE
63630: EQUAL
63631: IFTRUE 63635
63633: GO 63859
63635: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
63636: LD_ADDR_VAR 0 2
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 2
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 4
63652: PUSH
63653: LD_INT 5
63655: PUSH
63656: LD_INT 6
63658: PUSH
63659: LD_INT 7
63661: PUSH
63662: LD_INT 8
63664: PUSH
63665: LD_INT 9
63667: PUSH
63668: LD_INT 10
63670: PUSH
63671: LD_INT 11
63673: PUSH
63674: LD_INT 12
63676: PUSH
63677: LD_INT 13
63679: PUSH
63680: LD_INT 14
63682: PUSH
63683: LD_INT 15
63685: PUSH
63686: LD_INT 16
63688: PUSH
63689: LD_INT 17
63691: PUSH
63692: LD_INT 18
63694: PUSH
63695: LD_INT 19
63697: PUSH
63698: LD_INT 20
63700: PUSH
63701: LD_INT 21
63703: PUSH
63704: LD_INT 22
63706: PUSH
63707: LD_INT 23
63709: PUSH
63710: LD_INT 24
63712: PUSH
63713: LD_INT 25
63715: PUSH
63716: LD_INT 26
63718: PUSH
63719: LD_INT 27
63721: PUSH
63722: LD_INT 28
63724: PUSH
63725: LD_INT 29
63727: PUSH
63728: LD_INT 30
63730: PUSH
63731: LD_INT 31
63733: PUSH
63734: LD_INT 32
63736: PUSH
63737: LD_INT 33
63739: PUSH
63740: LD_INT 34
63742: PUSH
63743: LD_INT 36
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 101
63785: PUSH
63786: LD_INT 102
63788: PUSH
63789: LD_INT 103
63791: PUSH
63792: LD_INT 104
63794: PUSH
63795: LD_INT 105
63797: PUSH
63798: LD_INT 106
63800: PUSH
63801: LD_INT 107
63803: PUSH
63804: LD_INT 108
63806: PUSH
63807: LD_INT 109
63809: PUSH
63810: LD_INT 110
63812: PUSH
63813: LD_INT 111
63815: PUSH
63816: LD_INT 112
63818: PUSH
63819: LD_INT 113
63821: PUSH
63822: LD_INT 114
63824: PUSH
63825: LD_INT 116
63827: PUSH
63828: LD_INT 117
63830: PUSH
63831: LD_INT 118
63833: PUSH
63834: EMPTY
63835: LIST
63836: LIST
63837: LIST
63838: LIST
63839: LIST
63840: LIST
63841: LIST
63842: LIST
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: ST_TO_ADDR
63857: GO 64256
63859: LD_INT 18
63861: DOUBLE
63862: EQUAL
63863: IFTRUE 63867
63865: GO 64015
63867: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
63868: LD_ADDR_VAR 0 2
63872: PUSH
63873: LD_INT 2
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: LD_INT 5
63881: PUSH
63882: LD_INT 7
63884: PUSH
63885: LD_INT 11
63887: PUSH
63888: LD_INT 12
63890: PUSH
63891: LD_INT 15
63893: PUSH
63894: LD_INT 16
63896: PUSH
63897: LD_INT 20
63899: PUSH
63900: LD_INT 21
63902: PUSH
63903: LD_INT 22
63905: PUSH
63906: LD_INT 23
63908: PUSH
63909: LD_INT 25
63911: PUSH
63912: LD_INT 26
63914: PUSH
63915: LD_INT 30
63917: PUSH
63918: LD_INT 31
63920: PUSH
63921: LD_INT 32
63923: PUSH
63924: LD_INT 33
63926: PUSH
63927: LD_INT 34
63929: PUSH
63930: LD_INT 35
63932: PUSH
63933: LD_INT 36
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 101
63961: PUSH
63962: LD_INT 102
63964: PUSH
63965: LD_INT 103
63967: PUSH
63968: LD_INT 106
63970: PUSH
63971: LD_INT 108
63973: PUSH
63974: LD_INT 112
63976: PUSH
63977: LD_INT 113
63979: PUSH
63980: LD_INT 114
63982: PUSH
63983: LD_INT 115
63985: PUSH
63986: LD_INT 116
63988: PUSH
63989: LD_INT 117
63991: PUSH
63992: LD_INT 118
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: PUSH
64009: EMPTY
64010: LIST
64011: LIST
64012: ST_TO_ADDR
64013: GO 64256
64015: LD_INT 19
64017: DOUBLE
64018: EQUAL
64019: IFTRUE 64023
64021: GO 64255
64023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64024: LD_ADDR_VAR 0 2
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: LD_INT 4
64040: PUSH
64041: LD_INT 5
64043: PUSH
64044: LD_INT 6
64046: PUSH
64047: LD_INT 7
64049: PUSH
64050: LD_INT 8
64052: PUSH
64053: LD_INT 9
64055: PUSH
64056: LD_INT 10
64058: PUSH
64059: LD_INT 11
64061: PUSH
64062: LD_INT 12
64064: PUSH
64065: LD_INT 13
64067: PUSH
64068: LD_INT 14
64070: PUSH
64071: LD_INT 15
64073: PUSH
64074: LD_INT 16
64076: PUSH
64077: LD_INT 17
64079: PUSH
64080: LD_INT 18
64082: PUSH
64083: LD_INT 19
64085: PUSH
64086: LD_INT 20
64088: PUSH
64089: LD_INT 21
64091: PUSH
64092: LD_INT 22
64094: PUSH
64095: LD_INT 23
64097: PUSH
64098: LD_INT 24
64100: PUSH
64101: LD_INT 25
64103: PUSH
64104: LD_INT 26
64106: PUSH
64107: LD_INT 27
64109: PUSH
64110: LD_INT 28
64112: PUSH
64113: LD_INT 29
64115: PUSH
64116: LD_INT 30
64118: PUSH
64119: LD_INT 31
64121: PUSH
64122: LD_INT 32
64124: PUSH
64125: LD_INT 33
64127: PUSH
64128: LD_INT 34
64130: PUSH
64131: LD_INT 35
64133: PUSH
64134: LD_INT 36
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: PUSH
64175: LD_INT 101
64177: PUSH
64178: LD_INT 102
64180: PUSH
64181: LD_INT 103
64183: PUSH
64184: LD_INT 104
64186: PUSH
64187: LD_INT 105
64189: PUSH
64190: LD_INT 106
64192: PUSH
64193: LD_INT 107
64195: PUSH
64196: LD_INT 108
64198: PUSH
64199: LD_INT 109
64201: PUSH
64202: LD_INT 110
64204: PUSH
64205: LD_INT 111
64207: PUSH
64208: LD_INT 112
64210: PUSH
64211: LD_INT 113
64213: PUSH
64214: LD_INT 114
64216: PUSH
64217: LD_INT 115
64219: PUSH
64220: LD_INT 116
64222: PUSH
64223: LD_INT 117
64225: PUSH
64226: LD_INT 118
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: ST_TO_ADDR
64253: GO 64256
64255: POP
// end else
64256: GO 64487
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64258: LD_ADDR_VAR 0 2
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: LD_INT 3
64271: PUSH
64272: LD_INT 4
64274: PUSH
64275: LD_INT 5
64277: PUSH
64278: LD_INT 6
64280: PUSH
64281: LD_INT 7
64283: PUSH
64284: LD_INT 8
64286: PUSH
64287: LD_INT 9
64289: PUSH
64290: LD_INT 10
64292: PUSH
64293: LD_INT 11
64295: PUSH
64296: LD_INT 12
64298: PUSH
64299: LD_INT 13
64301: PUSH
64302: LD_INT 14
64304: PUSH
64305: LD_INT 15
64307: PUSH
64308: LD_INT 16
64310: PUSH
64311: LD_INT 17
64313: PUSH
64314: LD_INT 18
64316: PUSH
64317: LD_INT 19
64319: PUSH
64320: LD_INT 20
64322: PUSH
64323: LD_INT 21
64325: PUSH
64326: LD_INT 22
64328: PUSH
64329: LD_INT 23
64331: PUSH
64332: LD_INT 24
64334: PUSH
64335: LD_INT 25
64337: PUSH
64338: LD_INT 26
64340: PUSH
64341: LD_INT 27
64343: PUSH
64344: LD_INT 28
64346: PUSH
64347: LD_INT 29
64349: PUSH
64350: LD_INT 30
64352: PUSH
64353: LD_INT 31
64355: PUSH
64356: LD_INT 32
64358: PUSH
64359: LD_INT 33
64361: PUSH
64362: LD_INT 34
64364: PUSH
64365: LD_INT 35
64367: PUSH
64368: LD_INT 36
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 101
64411: PUSH
64412: LD_INT 102
64414: PUSH
64415: LD_INT 103
64417: PUSH
64418: LD_INT 104
64420: PUSH
64421: LD_INT 105
64423: PUSH
64424: LD_INT 106
64426: PUSH
64427: LD_INT 107
64429: PUSH
64430: LD_INT 108
64432: PUSH
64433: LD_INT 109
64435: PUSH
64436: LD_INT 110
64438: PUSH
64439: LD_INT 111
64441: PUSH
64442: LD_INT 112
64444: PUSH
64445: LD_INT 113
64447: PUSH
64448: LD_INT 114
64450: PUSH
64451: LD_INT 115
64453: PUSH
64454: LD_INT 116
64456: PUSH
64457: LD_INT 117
64459: PUSH
64460: LD_INT 118
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: PUSH
64483: EMPTY
64484: LIST
64485: LIST
64486: ST_TO_ADDR
// if result then
64487: LD_VAR 0 2
64491: IFFALSE 65277
// begin normal :=  ;
64493: LD_ADDR_VAR 0 5
64497: PUSH
64498: LD_STRING 
64500: ST_TO_ADDR
// hardcore :=  ;
64501: LD_ADDR_VAR 0 6
64505: PUSH
64506: LD_STRING 
64508: ST_TO_ADDR
// active :=  ;
64509: LD_ADDR_VAR 0 7
64513: PUSH
64514: LD_STRING 
64516: ST_TO_ADDR
// for i = 1 to normalCounter do
64517: LD_ADDR_VAR 0 8
64521: PUSH
64522: DOUBLE
64523: LD_INT 1
64525: DEC
64526: ST_TO_ADDR
64527: LD_EXP 52
64531: PUSH
64532: FOR_TO
64533: IFFALSE 64634
// begin tmp := 0 ;
64535: LD_ADDR_VAR 0 3
64539: PUSH
64540: LD_STRING 0
64542: ST_TO_ADDR
// if result [ 1 ] then
64543: LD_VAR 0 2
64547: PUSH
64548: LD_INT 1
64550: ARRAY
64551: IFFALSE 64616
// if result [ 1 ] [ 1 ] = i then
64553: LD_VAR 0 2
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: PUSH
64562: LD_INT 1
64564: ARRAY
64565: PUSH
64566: LD_VAR 0 8
64570: EQUAL
64571: IFFALSE 64616
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
64573: LD_ADDR_VAR 0 2
64577: PUSH
64578: LD_VAR 0 2
64582: PPUSH
64583: LD_INT 1
64585: PPUSH
64586: LD_VAR 0 2
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PPUSH
64595: LD_INT 1
64597: PPUSH
64598: CALL_OW 3
64602: PPUSH
64603: CALL_OW 1
64607: ST_TO_ADDR
// tmp := 1 ;
64608: LD_ADDR_VAR 0 3
64612: PUSH
64613: LD_STRING 1
64615: ST_TO_ADDR
// end ; normal := normal & tmp ;
64616: LD_ADDR_VAR 0 5
64620: PUSH
64621: LD_VAR 0 5
64625: PUSH
64626: LD_VAR 0 3
64630: STR
64631: ST_TO_ADDR
// end ;
64632: GO 64532
64634: POP
64635: POP
// for i = 1 to hardcoreCounter do
64636: LD_ADDR_VAR 0 8
64640: PUSH
64641: DOUBLE
64642: LD_INT 1
64644: DEC
64645: ST_TO_ADDR
64646: LD_EXP 53
64650: PUSH
64651: FOR_TO
64652: IFFALSE 64757
// begin tmp := 0 ;
64654: LD_ADDR_VAR 0 3
64658: PUSH
64659: LD_STRING 0
64661: ST_TO_ADDR
// if result [ 2 ] then
64662: LD_VAR 0 2
64666: PUSH
64667: LD_INT 2
64669: ARRAY
64670: IFFALSE 64739
// if result [ 2 ] [ 1 ] = 100 + i then
64672: LD_VAR 0 2
64676: PUSH
64677: LD_INT 2
64679: ARRAY
64680: PUSH
64681: LD_INT 1
64683: ARRAY
64684: PUSH
64685: LD_INT 100
64687: PUSH
64688: LD_VAR 0 8
64692: PLUS
64693: EQUAL
64694: IFFALSE 64739
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
64696: LD_ADDR_VAR 0 2
64700: PUSH
64701: LD_VAR 0 2
64705: PPUSH
64706: LD_INT 2
64708: PPUSH
64709: LD_VAR 0 2
64713: PUSH
64714: LD_INT 2
64716: ARRAY
64717: PPUSH
64718: LD_INT 1
64720: PPUSH
64721: CALL_OW 3
64725: PPUSH
64726: CALL_OW 1
64730: ST_TO_ADDR
// tmp := 1 ;
64731: LD_ADDR_VAR 0 3
64735: PUSH
64736: LD_STRING 1
64738: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
64739: LD_ADDR_VAR 0 6
64743: PUSH
64744: LD_VAR 0 6
64748: PUSH
64749: LD_VAR 0 3
64753: STR
64754: ST_TO_ADDR
// end ;
64755: GO 64651
64757: POP
64758: POP
// if isGameLoad then
64759: LD_VAR 0 1
64763: IFFALSE 65238
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
64765: LD_ADDR_VAR 0 4
64769: PUSH
64770: LD_EXP 56
64774: PUSH
64775: LD_EXP 55
64779: PUSH
64780: LD_EXP 57
64784: PUSH
64785: LD_EXP 54
64789: PUSH
64790: LD_EXP 58
64794: PUSH
64795: LD_EXP 59
64799: PUSH
64800: LD_EXP 60
64804: PUSH
64805: LD_EXP 61
64809: PUSH
64810: LD_EXP 62
64814: PUSH
64815: LD_EXP 63
64819: PUSH
64820: LD_EXP 64
64824: PUSH
64825: LD_EXP 65
64829: PUSH
64830: LD_EXP 66
64834: PUSH
64835: LD_EXP 67
64839: PUSH
64840: LD_EXP 75
64844: PUSH
64845: LD_EXP 76
64849: PUSH
64850: LD_EXP 77
64854: PUSH
64855: LD_EXP 78
64859: PUSH
64860: LD_EXP 80
64864: PUSH
64865: LD_EXP 81
64869: PUSH
64870: LD_EXP 82
64874: PUSH
64875: LD_EXP 85
64879: PUSH
64880: LD_EXP 87
64884: PUSH
64885: LD_EXP 88
64889: PUSH
64890: LD_EXP 89
64894: PUSH
64895: LD_EXP 91
64899: PUSH
64900: LD_EXP 92
64904: PUSH
64905: LD_EXP 95
64909: PUSH
64910: LD_EXP 96
64914: PUSH
64915: LD_EXP 97
64919: PUSH
64920: LD_EXP 98
64924: PUSH
64925: LD_EXP 99
64929: PUSH
64930: LD_EXP 100
64934: PUSH
64935: LD_EXP 101
64939: PUSH
64940: LD_EXP 102
64944: PUSH
64945: LD_EXP 103
64949: PUSH
64950: LD_EXP 68
64954: PUSH
64955: LD_EXP 69
64959: PUSH
64960: LD_EXP 72
64964: PUSH
64965: LD_EXP 73
64969: PUSH
64970: LD_EXP 74
64974: PUSH
64975: LD_EXP 70
64979: PUSH
64980: LD_EXP 71
64984: PUSH
64985: LD_EXP 79
64989: PUSH
64990: LD_EXP 83
64994: PUSH
64995: LD_EXP 84
64999: PUSH
65000: LD_EXP 86
65004: PUSH
65005: LD_EXP 90
65009: PUSH
65010: LD_EXP 93
65014: PUSH
65015: LD_EXP 94
65019: PUSH
65020: LD_EXP 104
65024: PUSH
65025: LD_EXP 105
65029: PUSH
65030: LD_EXP 106
65034: PUSH
65035: LD_EXP 107
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: LIST
65044: LIST
65045: LIST
65046: LIST
65047: LIST
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: LIST
65055: LIST
65056: LIST
65057: LIST
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: ST_TO_ADDR
// tmp :=  ;
65096: LD_ADDR_VAR 0 3
65100: PUSH
65101: LD_STRING 
65103: ST_TO_ADDR
// for i = 1 to normalCounter do
65104: LD_ADDR_VAR 0 8
65108: PUSH
65109: DOUBLE
65110: LD_INT 1
65112: DEC
65113: ST_TO_ADDR
65114: LD_EXP 52
65118: PUSH
65119: FOR_TO
65120: IFFALSE 65156
// begin if flags [ i ] then
65122: LD_VAR 0 4
65126: PUSH
65127: LD_VAR 0 8
65131: ARRAY
65132: IFFALSE 65154
// tmp := tmp & i & ; ;
65134: LD_ADDR_VAR 0 3
65138: PUSH
65139: LD_VAR 0 3
65143: PUSH
65144: LD_VAR 0 8
65148: STR
65149: PUSH
65150: LD_STRING ;
65152: STR
65153: ST_TO_ADDR
// end ;
65154: GO 65119
65156: POP
65157: POP
// for i = 1 to hardcoreCounter do
65158: LD_ADDR_VAR 0 8
65162: PUSH
65163: DOUBLE
65164: LD_INT 1
65166: DEC
65167: ST_TO_ADDR
65168: LD_EXP 53
65172: PUSH
65173: FOR_TO
65174: IFFALSE 65220
// begin if flags [ normalCounter + i ] then
65176: LD_VAR 0 4
65180: PUSH
65181: LD_EXP 52
65185: PUSH
65186: LD_VAR 0 8
65190: PLUS
65191: ARRAY
65192: IFFALSE 65218
// tmp := tmp & ( 100 + i ) & ; ;
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_VAR 0 3
65203: PUSH
65204: LD_INT 100
65206: PUSH
65207: LD_VAR 0 8
65211: PLUS
65212: STR
65213: PUSH
65214: LD_STRING ;
65216: STR
65217: ST_TO_ADDR
// end ;
65218: GO 65173
65220: POP
65221: POP
// if tmp then
65222: LD_VAR 0 3
65226: IFFALSE 65238
// active := tmp ;
65228: LD_ADDR_VAR 0 7
65232: PUSH
65233: LD_VAR 0 3
65237: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65238: LD_STRING getStreamItemsFromMission("
65240: PUSH
65241: LD_VAR 0 5
65245: STR
65246: PUSH
65247: LD_STRING ","
65249: STR
65250: PUSH
65251: LD_VAR 0 6
65255: STR
65256: PUSH
65257: LD_STRING ","
65259: STR
65260: PUSH
65261: LD_VAR 0 7
65265: STR
65266: PUSH
65267: LD_STRING ")
65269: STR
65270: PPUSH
65271: CALL_OW 559
// end else
65275: GO 65284
// ToLua ( getStreamItemsFromMission("","","") ) ;
65277: LD_STRING getStreamItemsFromMission("","","")
65279: PPUSH
65280: CALL_OW 559
// end ;
65284: LD_VAR 0 2
65288: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65289: LD_EXP 51
65293: PUSH
65294: LD_EXP 56
65298: AND
65299: IFFALSE 65423
65301: GO 65303
65303: DISABLE
65304: LD_INT 0
65306: PPUSH
65307: PPUSH
// begin enable ;
65308: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65309: LD_ADDR_VAR 0 2
65313: PUSH
65314: LD_INT 22
65316: PUSH
65317: LD_OWVAR 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 2
65328: PUSH
65329: LD_INT 34
65331: PUSH
65332: LD_INT 7
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 34
65341: PUSH
65342: LD_INT 45
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 34
65351: PUSH
65352: LD_INT 28
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 34
65361: PUSH
65362: LD_INT 47
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: EMPTY
65370: LIST
65371: LIST
65372: LIST
65373: LIST
65374: LIST
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PPUSH
65380: CALL_OW 69
65384: ST_TO_ADDR
// if not tmp then
65385: LD_VAR 0 2
65389: NOT
65390: IFFALSE 65394
// exit ;
65392: GO 65423
// for i in tmp do
65394: LD_ADDR_VAR 0 1
65398: PUSH
65399: LD_VAR 0 2
65403: PUSH
65404: FOR_IN
65405: IFFALSE 65421
// begin SetLives ( i , 0 ) ;
65407: LD_VAR 0 1
65411: PPUSH
65412: LD_INT 0
65414: PPUSH
65415: CALL_OW 234
// end ;
65419: GO 65404
65421: POP
65422: POP
// end ;
65423: PPOPN 2
65425: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65426: LD_EXP 51
65430: PUSH
65431: LD_EXP 57
65435: AND
65436: IFFALSE 65520
65438: GO 65440
65440: DISABLE
65441: LD_INT 0
65443: PPUSH
65444: PPUSH
// begin enable ;
65445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
65446: LD_ADDR_VAR 0 2
65450: PUSH
65451: LD_INT 22
65453: PUSH
65454: LD_OWVAR 2
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 32
65465: PUSH
65466: LD_INT 3
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PPUSH
65477: CALL_OW 69
65481: ST_TO_ADDR
// if not tmp then
65482: LD_VAR 0 2
65486: NOT
65487: IFFALSE 65491
// exit ;
65489: GO 65520
// for i in tmp do
65491: LD_ADDR_VAR 0 1
65495: PUSH
65496: LD_VAR 0 2
65500: PUSH
65501: FOR_IN
65502: IFFALSE 65518
// begin SetLives ( i , 0 ) ;
65504: LD_VAR 0 1
65508: PPUSH
65509: LD_INT 0
65511: PPUSH
65512: CALL_OW 234
// end ;
65516: GO 65501
65518: POP
65519: POP
// end ;
65520: PPOPN 2
65522: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
65523: LD_EXP 51
65527: PUSH
65528: LD_EXP 54
65532: AND
65533: IFFALSE 65626
65535: GO 65537
65537: DISABLE
65538: LD_INT 0
65540: PPUSH
// begin enable ;
65541: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
65542: LD_ADDR_VAR 0 1
65546: PUSH
65547: LD_INT 22
65549: PUSH
65550: LD_OWVAR 2
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 2
65561: PUSH
65562: LD_INT 25
65564: PUSH
65565: LD_INT 5
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 25
65574: PUSH
65575: LD_INT 9
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 25
65584: PUSH
65585: LD_INT 8
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PPUSH
65602: CALL_OW 69
65606: PUSH
65607: FOR_IN
65608: IFFALSE 65624
// begin SetClass ( i , 1 ) ;
65610: LD_VAR 0 1
65614: PPUSH
65615: LD_INT 1
65617: PPUSH
65618: CALL_OW 336
// end ;
65622: GO 65607
65624: POP
65625: POP
// end ;
65626: PPOPN 1
65628: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
65629: LD_EXP 51
65633: PUSH
65634: LD_EXP 55
65638: AND
65639: PUSH
65640: LD_OWVAR 65
65644: PUSH
65645: LD_INT 7
65647: LESS
65648: AND
65649: IFFALSE 65663
65651: GO 65653
65653: DISABLE
// begin enable ;
65654: ENABLE
// game_speed := 7 ;
65655: LD_ADDR_OWVAR 65
65659: PUSH
65660: LD_INT 7
65662: ST_TO_ADDR
// end ;
65663: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
65664: LD_EXP 51
65668: PUSH
65669: LD_EXP 58
65673: AND
65674: IFFALSE 65876
65676: GO 65678
65678: DISABLE
65679: LD_INT 0
65681: PPUSH
65682: PPUSH
65683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65684: LD_ADDR_VAR 0 3
65688: PUSH
65689: LD_INT 81
65691: PUSH
65692: LD_OWVAR 2
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 21
65703: PUSH
65704: LD_INT 1
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PPUSH
65715: CALL_OW 69
65719: ST_TO_ADDR
// if not tmp then
65720: LD_VAR 0 3
65724: NOT
65725: IFFALSE 65729
// exit ;
65727: GO 65876
// if tmp > 5 then
65729: LD_VAR 0 3
65733: PUSH
65734: LD_INT 5
65736: GREATER
65737: IFFALSE 65749
// k := 5 else
65739: LD_ADDR_VAR 0 2
65743: PUSH
65744: LD_INT 5
65746: ST_TO_ADDR
65747: GO 65759
// k := tmp ;
65749: LD_ADDR_VAR 0 2
65753: PUSH
65754: LD_VAR 0 3
65758: ST_TO_ADDR
// for i := 1 to k do
65759: LD_ADDR_VAR 0 1
65763: PUSH
65764: DOUBLE
65765: LD_INT 1
65767: DEC
65768: ST_TO_ADDR
65769: LD_VAR 0 2
65773: PUSH
65774: FOR_TO
65775: IFFALSE 65874
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
65777: LD_VAR 0 3
65781: PUSH
65782: LD_VAR 0 1
65786: ARRAY
65787: PPUSH
65788: LD_VAR 0 1
65792: PUSH
65793: LD_INT 4
65795: MOD
65796: PUSH
65797: LD_INT 1
65799: PLUS
65800: PPUSH
65801: CALL_OW 259
65805: PUSH
65806: LD_INT 10
65808: LESS
65809: IFFALSE 65872
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
65811: LD_VAR 0 3
65815: PUSH
65816: LD_VAR 0 1
65820: ARRAY
65821: PPUSH
65822: LD_VAR 0 1
65826: PUSH
65827: LD_INT 4
65829: MOD
65830: PUSH
65831: LD_INT 1
65833: PLUS
65834: PPUSH
65835: LD_VAR 0 3
65839: PUSH
65840: LD_VAR 0 1
65844: ARRAY
65845: PPUSH
65846: LD_VAR 0 1
65850: PUSH
65851: LD_INT 4
65853: MOD
65854: PUSH
65855: LD_INT 1
65857: PLUS
65858: PPUSH
65859: CALL_OW 259
65863: PUSH
65864: LD_INT 1
65866: PLUS
65867: PPUSH
65868: CALL_OW 237
65872: GO 65774
65874: POP
65875: POP
// end ;
65876: PPOPN 3
65878: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
65879: LD_EXP 51
65883: PUSH
65884: LD_EXP 59
65888: AND
65889: IFFALSE 65909
65891: GO 65893
65893: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
65894: LD_INT 4
65896: PPUSH
65897: LD_OWVAR 2
65901: PPUSH
65902: LD_INT 0
65904: PPUSH
65905: CALL_OW 324
65909: END
// every 0 0$1 trigger StreamModeActive and sShovel do
65910: LD_EXP 51
65914: PUSH
65915: LD_EXP 88
65919: AND
65920: IFFALSE 65940
65922: GO 65924
65924: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
65925: LD_INT 19
65927: PPUSH
65928: LD_OWVAR 2
65932: PPUSH
65933: LD_INT 0
65935: PPUSH
65936: CALL_OW 324
65940: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
65941: LD_EXP 51
65945: PUSH
65946: LD_EXP 60
65950: AND
65951: IFFALSE 66053
65953: GO 65955
65955: DISABLE
65956: LD_INT 0
65958: PPUSH
65959: PPUSH
// begin enable ;
65960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
65961: LD_ADDR_VAR 0 2
65965: PUSH
65966: LD_INT 22
65968: PUSH
65969: LD_OWVAR 2
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: PUSH
65978: LD_INT 2
65980: PUSH
65981: LD_INT 34
65983: PUSH
65984: LD_INT 11
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 34
65993: PUSH
65994: LD_INT 30
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PPUSH
66010: CALL_OW 69
66014: ST_TO_ADDR
// if not tmp then
66015: LD_VAR 0 2
66019: NOT
66020: IFFALSE 66024
// exit ;
66022: GO 66053
// for i in tmp do
66024: LD_ADDR_VAR 0 1
66028: PUSH
66029: LD_VAR 0 2
66033: PUSH
66034: FOR_IN
66035: IFFALSE 66051
// begin SetLives ( i , 0 ) ;
66037: LD_VAR 0 1
66041: PPUSH
66042: LD_INT 0
66044: PPUSH
66045: CALL_OW 234
// end ;
66049: GO 66034
66051: POP
66052: POP
// end ;
66053: PPOPN 2
66055: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66056: LD_EXP 51
66060: PUSH
66061: LD_EXP 61
66065: AND
66066: IFFALSE 66086
66068: GO 66070
66070: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66071: LD_INT 32
66073: PPUSH
66074: LD_OWVAR 2
66078: PPUSH
66079: LD_INT 0
66081: PPUSH
66082: CALL_OW 324
66086: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66087: LD_EXP 51
66091: PUSH
66092: LD_EXP 62
66096: AND
66097: IFFALSE 66278
66099: GO 66101
66101: DISABLE
66102: LD_INT 0
66104: PPUSH
66105: PPUSH
66106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66107: LD_ADDR_VAR 0 2
66111: PUSH
66112: LD_INT 22
66114: PUSH
66115: LD_OWVAR 2
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 33
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PPUSH
66138: CALL_OW 69
66142: ST_TO_ADDR
// if not tmp then
66143: LD_VAR 0 2
66147: NOT
66148: IFFALSE 66152
// exit ;
66150: GO 66278
// side := 0 ;
66152: LD_ADDR_VAR 0 3
66156: PUSH
66157: LD_INT 0
66159: ST_TO_ADDR
// for i := 1 to 8 do
66160: LD_ADDR_VAR 0 1
66164: PUSH
66165: DOUBLE
66166: LD_INT 1
66168: DEC
66169: ST_TO_ADDR
66170: LD_INT 8
66172: PUSH
66173: FOR_TO
66174: IFFALSE 66222
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66176: LD_OWVAR 2
66180: PUSH
66181: LD_VAR 0 1
66185: NONEQUAL
66186: PUSH
66187: LD_OWVAR 2
66191: PPUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: CALL_OW 81
66201: PUSH
66202: LD_INT 2
66204: EQUAL
66205: AND
66206: IFFALSE 66220
// begin side := i ;
66208: LD_ADDR_VAR 0 3
66212: PUSH
66213: LD_VAR 0 1
66217: ST_TO_ADDR
// break ;
66218: GO 66222
// end ;
66220: GO 66173
66222: POP
66223: POP
// if not side then
66224: LD_VAR 0 3
66228: NOT
66229: IFFALSE 66233
// exit ;
66231: GO 66278
// for i := 1 to tmp do
66233: LD_ADDR_VAR 0 1
66237: PUSH
66238: DOUBLE
66239: LD_INT 1
66241: DEC
66242: ST_TO_ADDR
66243: LD_VAR 0 2
66247: PUSH
66248: FOR_TO
66249: IFFALSE 66276
// if Prob ( 60 ) then
66251: LD_INT 60
66253: PPUSH
66254: CALL_OW 13
66258: IFFALSE 66274
// SetSide ( i , side ) ;
66260: LD_VAR 0 1
66264: PPUSH
66265: LD_VAR 0 3
66269: PPUSH
66270: CALL_OW 235
66274: GO 66248
66276: POP
66277: POP
// end ;
66278: PPOPN 3
66280: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66281: LD_EXP 51
66285: PUSH
66286: LD_EXP 64
66290: AND
66291: IFFALSE 66410
66293: GO 66295
66295: DISABLE
66296: LD_INT 0
66298: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66299: LD_ADDR_VAR 0 1
66303: PUSH
66304: LD_INT 22
66306: PUSH
66307: LD_OWVAR 2
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 21
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: PUSH
66329: LD_INT 23
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: LIST
66347: PPUSH
66348: CALL_OW 69
66352: PUSH
66353: FOR_IN
66354: IFFALSE 66408
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66356: LD_VAR 0 1
66360: PPUSH
66361: CALL_OW 257
66365: PUSH
66366: LD_INT 1
66368: PUSH
66369: LD_INT 2
66371: PUSH
66372: LD_INT 3
66374: PUSH
66375: LD_INT 4
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: IN
66384: IFFALSE 66406
// SetClass ( un , rand ( 1 , 4 ) ) ;
66386: LD_VAR 0 1
66390: PPUSH
66391: LD_INT 1
66393: PPUSH
66394: LD_INT 4
66396: PPUSH
66397: CALL_OW 12
66401: PPUSH
66402: CALL_OW 336
66406: GO 66353
66408: POP
66409: POP
// end ;
66410: PPOPN 1
66412: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66413: LD_EXP 51
66417: PUSH
66418: LD_EXP 63
66422: AND
66423: IFFALSE 66502
66425: GO 66427
66427: DISABLE
66428: LD_INT 0
66430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66431: LD_ADDR_VAR 0 1
66435: PUSH
66436: LD_INT 22
66438: PUSH
66439: LD_OWVAR 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 21
66450: PUSH
66451: LD_INT 3
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PPUSH
66462: CALL_OW 69
66466: ST_TO_ADDR
// if not tmp then
66467: LD_VAR 0 1
66471: NOT
66472: IFFALSE 66476
// exit ;
66474: GO 66502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
66476: LD_VAR 0 1
66480: PUSH
66481: LD_INT 1
66483: PPUSH
66484: LD_VAR 0 1
66488: PPUSH
66489: CALL_OW 12
66493: ARRAY
66494: PPUSH
66495: LD_INT 100
66497: PPUSH
66498: CALL_OW 234
// end ;
66502: PPOPN 1
66504: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
66505: LD_EXP 51
66509: PUSH
66510: LD_EXP 65
66514: AND
66515: IFFALSE 66613
66517: GO 66519
66519: DISABLE
66520: LD_INT 0
66522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66523: LD_ADDR_VAR 0 1
66527: PUSH
66528: LD_INT 22
66530: PUSH
66531: LD_OWVAR 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 21
66542: PUSH
66543: LD_INT 1
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PPUSH
66554: CALL_OW 69
66558: ST_TO_ADDR
// if not tmp then
66559: LD_VAR 0 1
66563: NOT
66564: IFFALSE 66568
// exit ;
66566: GO 66613
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
66568: LD_VAR 0 1
66572: PUSH
66573: LD_INT 1
66575: PPUSH
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 12
66585: ARRAY
66586: PPUSH
66587: LD_INT 1
66589: PPUSH
66590: LD_INT 4
66592: PPUSH
66593: CALL_OW 12
66597: PPUSH
66598: LD_INT 3000
66600: PPUSH
66601: LD_INT 9000
66603: PPUSH
66604: CALL_OW 12
66608: PPUSH
66609: CALL_OW 492
// end ;
66613: PPOPN 1
66615: END
// every 0 0$1 trigger StreamModeActive and sDepot do
66616: LD_EXP 51
66620: PUSH
66621: LD_EXP 66
66625: AND
66626: IFFALSE 66646
66628: GO 66630
66630: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
66631: LD_INT 1
66633: PPUSH
66634: LD_OWVAR 2
66638: PPUSH
66639: LD_INT 0
66641: PPUSH
66642: CALL_OW 324
66646: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
66647: LD_EXP 51
66651: PUSH
66652: LD_EXP 67
66656: AND
66657: IFFALSE 66740
66659: GO 66661
66661: DISABLE
66662: LD_INT 0
66664: PPUSH
66665: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66666: LD_ADDR_VAR 0 2
66670: PUSH
66671: LD_INT 22
66673: PUSH
66674: LD_OWVAR 2
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 21
66685: PUSH
66686: LD_INT 3
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PPUSH
66697: CALL_OW 69
66701: ST_TO_ADDR
// if not tmp then
66702: LD_VAR 0 2
66706: NOT
66707: IFFALSE 66711
// exit ;
66709: GO 66740
// for i in tmp do
66711: LD_ADDR_VAR 0 1
66715: PUSH
66716: LD_VAR 0 2
66720: PUSH
66721: FOR_IN
66722: IFFALSE 66738
// SetBLevel ( i , 10 ) ;
66724: LD_VAR 0 1
66728: PPUSH
66729: LD_INT 10
66731: PPUSH
66732: CALL_OW 241
66736: GO 66721
66738: POP
66739: POP
// end ;
66740: PPOPN 2
66742: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
66743: LD_EXP 51
66747: PUSH
66748: LD_EXP 68
66752: AND
66753: IFFALSE 66864
66755: GO 66757
66757: DISABLE
66758: LD_INT 0
66760: PPUSH
66761: PPUSH
66762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
66763: LD_ADDR_VAR 0 3
66767: PUSH
66768: LD_INT 22
66770: PUSH
66771: LD_OWVAR 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 25
66782: PUSH
66783: LD_INT 1
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: PPUSH
66794: CALL_OW 69
66798: ST_TO_ADDR
// if not tmp then
66799: LD_VAR 0 3
66803: NOT
66804: IFFALSE 66808
// exit ;
66806: GO 66864
// un := tmp [ rand ( 1 , tmp ) ] ;
66808: LD_ADDR_VAR 0 2
66812: PUSH
66813: LD_VAR 0 3
66817: PUSH
66818: LD_INT 1
66820: PPUSH
66821: LD_VAR 0 3
66825: PPUSH
66826: CALL_OW 12
66830: ARRAY
66831: ST_TO_ADDR
// if Crawls ( un ) then
66832: LD_VAR 0 2
66836: PPUSH
66837: CALL_OW 318
66841: IFFALSE 66852
// ComWalk ( un ) ;
66843: LD_VAR 0 2
66847: PPUSH
66848: CALL_OW 138
// SetClass ( un , class_sniper ) ;
66852: LD_VAR 0 2
66856: PPUSH
66857: LD_INT 5
66859: PPUSH
66860: CALL_OW 336
// end ;
66864: PPOPN 3
66866: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
66867: LD_EXP 51
66871: PUSH
66872: LD_EXP 69
66876: AND
66877: PUSH
66878: LD_OWVAR 67
66882: PUSH
66883: LD_INT 4
66885: LESS
66886: AND
66887: IFFALSE 66906
66889: GO 66891
66891: DISABLE
// begin Difficulty := Difficulty + 1 ;
66892: LD_ADDR_OWVAR 67
66896: PUSH
66897: LD_OWVAR 67
66901: PUSH
66902: LD_INT 1
66904: PLUS
66905: ST_TO_ADDR
// end ;
66906: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
66907: LD_EXP 51
66911: PUSH
66912: LD_EXP 70
66916: AND
66917: IFFALSE 67020
66919: GO 66921
66921: DISABLE
66922: LD_INT 0
66924: PPUSH
// begin for i := 1 to 5 do
66925: LD_ADDR_VAR 0 1
66929: PUSH
66930: DOUBLE
66931: LD_INT 1
66933: DEC
66934: ST_TO_ADDR
66935: LD_INT 5
66937: PUSH
66938: FOR_TO
66939: IFFALSE 67018
// begin uc_nation := nation_nature ;
66941: LD_ADDR_OWVAR 21
66945: PUSH
66946: LD_INT 0
66948: ST_TO_ADDR
// uc_side := 0 ;
66949: LD_ADDR_OWVAR 20
66953: PUSH
66954: LD_INT 0
66956: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
66957: LD_ADDR_OWVAR 29
66961: PUSH
66962: LD_INT 12
66964: PUSH
66965: LD_INT 12
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// hc_agressivity := 20 ;
66972: LD_ADDR_OWVAR 35
66976: PUSH
66977: LD_INT 20
66979: ST_TO_ADDR
// hc_class := class_tiger ;
66980: LD_ADDR_OWVAR 28
66984: PUSH
66985: LD_INT 14
66987: ST_TO_ADDR
// hc_gallery :=  ;
66988: LD_ADDR_OWVAR 33
66992: PUSH
66993: LD_STRING 
66995: ST_TO_ADDR
// hc_name :=  ;
66996: LD_ADDR_OWVAR 26
67000: PUSH
67001: LD_STRING 
67003: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67004: CALL_OW 44
67008: PPUSH
67009: LD_INT 0
67011: PPUSH
67012: CALL_OW 51
// end ;
67016: GO 66938
67018: POP
67019: POP
// end ;
67020: PPOPN 1
67022: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67023: LD_EXP 51
67027: PUSH
67028: LD_EXP 71
67032: AND
67033: IFFALSE 67042
67035: GO 67037
67037: DISABLE
// StreamSibBomb ;
67038: CALL 67043 0 0
67042: END
// export function StreamSibBomb ; var i , x , y ; begin
67043: LD_INT 0
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
// result := false ;
67049: LD_ADDR_VAR 0 1
67053: PUSH
67054: LD_INT 0
67056: ST_TO_ADDR
// for i := 1 to 16 do
67057: LD_ADDR_VAR 0 2
67061: PUSH
67062: DOUBLE
67063: LD_INT 1
67065: DEC
67066: ST_TO_ADDR
67067: LD_INT 16
67069: PUSH
67070: FOR_TO
67071: IFFALSE 67270
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: LD_INT 10
67080: PUSH
67081: LD_INT 20
67083: PUSH
67084: LD_INT 30
67086: PUSH
67087: LD_INT 40
67089: PUSH
67090: LD_INT 50
67092: PUSH
67093: LD_INT 60
67095: PUSH
67096: LD_INT 70
67098: PUSH
67099: LD_INT 80
67101: PUSH
67102: LD_INT 90
67104: PUSH
67105: LD_INT 100
67107: PUSH
67108: LD_INT 110
67110: PUSH
67111: LD_INT 120
67113: PUSH
67114: LD_INT 130
67116: PUSH
67117: LD_INT 140
67119: PUSH
67120: LD_INT 150
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: LIST
67127: LIST
67128: LIST
67129: LIST
67130: LIST
67131: LIST
67132: LIST
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PPUSH
67143: LD_INT 15
67145: PPUSH
67146: CALL_OW 12
67150: ARRAY
67151: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67152: LD_ADDR_VAR 0 4
67156: PUSH
67157: LD_INT 10
67159: PUSH
67160: LD_INT 20
67162: PUSH
67163: LD_INT 30
67165: PUSH
67166: LD_INT 40
67168: PUSH
67169: LD_INT 50
67171: PUSH
67172: LD_INT 60
67174: PUSH
67175: LD_INT 70
67177: PUSH
67178: LD_INT 80
67180: PUSH
67181: LD_INT 90
67183: PUSH
67184: LD_INT 100
67186: PUSH
67187: LD_INT 110
67189: PUSH
67190: LD_INT 120
67192: PUSH
67193: LD_INT 130
67195: PUSH
67196: LD_INT 140
67198: PUSH
67199: LD_INT 150
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: LIST
67206: LIST
67207: LIST
67208: LIST
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 1
67221: PPUSH
67222: LD_INT 15
67224: PPUSH
67225: CALL_OW 12
67229: ARRAY
67230: ST_TO_ADDR
// if ValidHex ( x , y ) then
67231: LD_VAR 0 3
67235: PPUSH
67236: LD_VAR 0 4
67240: PPUSH
67241: CALL_OW 488
67245: IFFALSE 67268
// begin result := [ x , y ] ;
67247: LD_ADDR_VAR 0 1
67251: PUSH
67252: LD_VAR 0 3
67256: PUSH
67257: LD_VAR 0 4
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: ST_TO_ADDR
// break ;
67266: GO 67270
// end ; end ;
67268: GO 67070
67270: POP
67271: POP
// if result then
67272: LD_VAR 0 1
67276: IFFALSE 67336
// begin ToLua ( playSibBomb() ) ;
67278: LD_STRING playSibBomb()
67280: PPUSH
67281: CALL_OW 559
// wait ( 0 0$14 ) ;
67285: LD_INT 490
67287: PPUSH
67288: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67292: LD_VAR 0 1
67296: PUSH
67297: LD_INT 1
67299: ARRAY
67300: PPUSH
67301: LD_VAR 0 1
67305: PUSH
67306: LD_INT 2
67308: ARRAY
67309: PPUSH
67310: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67314: LD_VAR 0 1
67318: PUSH
67319: LD_INT 1
67321: ARRAY
67322: PPUSH
67323: LD_VAR 0 1
67327: PUSH
67328: LD_INT 2
67330: ARRAY
67331: PPUSH
67332: CALL_OW 429
// end ; end ;
67336: LD_VAR 0 1
67340: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67341: LD_EXP 51
67345: PUSH
67346: LD_EXP 73
67350: AND
67351: IFFALSE 67363
67353: GO 67355
67355: DISABLE
// YouLost (  ) ;
67356: LD_STRING 
67358: PPUSH
67359: CALL_OW 104
67363: END
// every 0 0$1 trigger StreamModeActive and sFog do
67364: LD_EXP 51
67368: PUSH
67369: LD_EXP 72
67373: AND
67374: IFFALSE 67388
67376: GO 67378
67378: DISABLE
// FogOff ( your_side ) ;
67379: LD_OWVAR 2
67383: PPUSH
67384: CALL_OW 344
67388: END
// every 0 0$1 trigger StreamModeActive and sSun do
67389: LD_EXP 51
67393: PUSH
67394: LD_EXP 74
67398: AND
67399: IFFALSE 67427
67401: GO 67403
67403: DISABLE
// begin solar_recharge_percent := 0 ;
67404: LD_ADDR_OWVAR 79
67408: PUSH
67409: LD_INT 0
67411: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67412: LD_INT 10500
67414: PPUSH
67415: CALL_OW 67
// solar_recharge_percent := 100 ;
67419: LD_ADDR_OWVAR 79
67423: PUSH
67424: LD_INT 100
67426: ST_TO_ADDR
// end ;
67427: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67428: LD_EXP 51
67432: PUSH
67433: LD_EXP 75
67437: AND
67438: IFFALSE 67677
67440: GO 67442
67442: DISABLE
67443: LD_INT 0
67445: PPUSH
67446: PPUSH
67447: PPUSH
// begin tmp := [ ] ;
67448: LD_ADDR_VAR 0 3
67452: PUSH
67453: EMPTY
67454: ST_TO_ADDR
// for i := 1 to 6 do
67455: LD_ADDR_VAR 0 1
67459: PUSH
67460: DOUBLE
67461: LD_INT 1
67463: DEC
67464: ST_TO_ADDR
67465: LD_INT 6
67467: PUSH
67468: FOR_TO
67469: IFFALSE 67574
// begin uc_nation := nation_nature ;
67471: LD_ADDR_OWVAR 21
67475: PUSH
67476: LD_INT 0
67478: ST_TO_ADDR
// uc_side := 0 ;
67479: LD_ADDR_OWVAR 20
67483: PUSH
67484: LD_INT 0
67486: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67487: LD_ADDR_OWVAR 29
67491: PUSH
67492: LD_INT 12
67494: PUSH
67495: LD_INT 12
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// hc_agressivity := 20 ;
67502: LD_ADDR_OWVAR 35
67506: PUSH
67507: LD_INT 20
67509: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
67510: LD_ADDR_OWVAR 28
67514: PUSH
67515: LD_INT 17
67517: ST_TO_ADDR
// hc_gallery :=  ;
67518: LD_ADDR_OWVAR 33
67522: PUSH
67523: LD_STRING 
67525: ST_TO_ADDR
// hc_name :=  ;
67526: LD_ADDR_OWVAR 26
67530: PUSH
67531: LD_STRING 
67533: ST_TO_ADDR
// un := CreateHuman ;
67534: LD_ADDR_VAR 0 2
67538: PUSH
67539: CALL_OW 44
67543: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
67544: LD_VAR 0 2
67548: PPUSH
67549: LD_INT 1
67551: PPUSH
67552: CALL_OW 51
// tmp := tmp ^ un ;
67556: LD_ADDR_VAR 0 3
67560: PUSH
67561: LD_VAR 0 3
67565: PUSH
67566: LD_VAR 0 2
67570: ADD
67571: ST_TO_ADDR
// end ;
67572: GO 67468
67574: POP
67575: POP
// repeat wait ( 0 0$1 ) ;
67576: LD_INT 35
67578: PPUSH
67579: CALL_OW 67
// for un in tmp do
67583: LD_ADDR_VAR 0 2
67587: PUSH
67588: LD_VAR 0 3
67592: PUSH
67593: FOR_IN
67594: IFFALSE 67668
// begin if IsDead ( un ) then
67596: LD_VAR 0 2
67600: PPUSH
67601: CALL_OW 301
67605: IFFALSE 67625
// begin tmp := tmp diff un ;
67607: LD_ADDR_VAR 0 3
67611: PUSH
67612: LD_VAR 0 3
67616: PUSH
67617: LD_VAR 0 2
67621: DIFF
67622: ST_TO_ADDR
// continue ;
67623: GO 67593
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
67625: LD_VAR 0 2
67629: PPUSH
67630: LD_INT 3
67632: PUSH
67633: LD_INT 22
67635: PUSH
67636: LD_INT 0
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PPUSH
67647: CALL_OW 69
67651: PPUSH
67652: LD_VAR 0 2
67656: PPUSH
67657: CALL_OW 74
67661: PPUSH
67662: CALL_OW 115
// end ;
67666: GO 67593
67668: POP
67669: POP
// until not tmp ;
67670: LD_VAR 0 3
67674: NOT
67675: IFFALSE 67576
// end ;
67677: PPOPN 3
67679: END
// every 0 0$1 trigger StreamModeActive and sTroll do
67680: LD_EXP 51
67684: PUSH
67685: LD_EXP 76
67689: AND
67690: IFFALSE 67744
67692: GO 67694
67694: DISABLE
// begin ToLua ( displayTroll(); ) ;
67695: LD_STRING displayTroll();
67697: PPUSH
67698: CALL_OW 559
// wait ( 3 3$00 ) ;
67702: LD_INT 6300
67704: PPUSH
67705: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67709: LD_STRING hideTroll();
67711: PPUSH
67712: CALL_OW 559
// wait ( 1 1$00 ) ;
67716: LD_INT 2100
67718: PPUSH
67719: CALL_OW 67
// ToLua ( displayTroll(); ) ;
67723: LD_STRING displayTroll();
67725: PPUSH
67726: CALL_OW 559
// wait ( 1 1$00 ) ;
67730: LD_INT 2100
67732: PPUSH
67733: CALL_OW 67
// ToLua ( hideTroll(); ) ;
67737: LD_STRING hideTroll();
67739: PPUSH
67740: CALL_OW 559
// end ;
67744: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
67745: LD_EXP 51
67749: PUSH
67750: LD_EXP 77
67754: AND
67755: IFFALSE 67818
67757: GO 67759
67759: DISABLE
67760: LD_INT 0
67762: PPUSH
// begin p := 0 ;
67763: LD_ADDR_VAR 0 1
67767: PUSH
67768: LD_INT 0
67770: ST_TO_ADDR
// repeat game_speed := 1 ;
67771: LD_ADDR_OWVAR 65
67775: PUSH
67776: LD_INT 1
67778: ST_TO_ADDR
// wait ( 0 0$1 ) ;
67779: LD_INT 35
67781: PPUSH
67782: CALL_OW 67
// p := p + 1 ;
67786: LD_ADDR_VAR 0 1
67790: PUSH
67791: LD_VAR 0 1
67795: PUSH
67796: LD_INT 1
67798: PLUS
67799: ST_TO_ADDR
// until p >= 60 ;
67800: LD_VAR 0 1
67804: PUSH
67805: LD_INT 60
67807: GREATEREQUAL
67808: IFFALSE 67771
// game_speed := 4 ;
67810: LD_ADDR_OWVAR 65
67814: PUSH
67815: LD_INT 4
67817: ST_TO_ADDR
// end ;
67818: PPOPN 1
67820: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
67821: LD_EXP 51
67825: PUSH
67826: LD_EXP 78
67830: AND
67831: IFFALSE 67977
67833: GO 67835
67835: DISABLE
67836: LD_INT 0
67838: PPUSH
67839: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67840: LD_ADDR_VAR 0 1
67844: PUSH
67845: LD_INT 22
67847: PUSH
67848: LD_OWVAR 2
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: PUSH
67857: LD_INT 2
67859: PUSH
67860: LD_INT 30
67862: PUSH
67863: LD_INT 0
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 30
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: PUSH
67885: EMPTY
67886: LIST
67887: LIST
67888: PPUSH
67889: CALL_OW 69
67893: ST_TO_ADDR
// if not depot then
67894: LD_VAR 0 1
67898: NOT
67899: IFFALSE 67903
// exit ;
67901: GO 67977
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
67903: LD_ADDR_VAR 0 2
67907: PUSH
67908: LD_VAR 0 1
67912: PUSH
67913: LD_INT 1
67915: PPUSH
67916: LD_VAR 0 1
67920: PPUSH
67921: CALL_OW 12
67925: ARRAY
67926: PPUSH
67927: CALL_OW 274
67931: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
67932: LD_VAR 0 2
67936: PPUSH
67937: LD_INT 1
67939: PPUSH
67940: LD_INT 0
67942: PPUSH
67943: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
67947: LD_VAR 0 2
67951: PPUSH
67952: LD_INT 2
67954: PPUSH
67955: LD_INT 0
67957: PPUSH
67958: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
67962: LD_VAR 0 2
67966: PPUSH
67967: LD_INT 3
67969: PPUSH
67970: LD_INT 0
67972: PPUSH
67973: CALL_OW 277
// end ;
67977: PPOPN 2
67979: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
67980: LD_EXP 51
67984: PUSH
67985: LD_EXP 79
67989: AND
67990: IFFALSE 68087
67992: GO 67994
67994: DISABLE
67995: LD_INT 0
67997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
67998: LD_ADDR_VAR 0 1
68002: PUSH
68003: LD_INT 22
68005: PUSH
68006: LD_OWVAR 2
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: PUSH
68015: LD_INT 21
68017: PUSH
68018: LD_INT 1
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: LD_INT 23
68030: PUSH
68031: LD_INT 0
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: LIST
68046: PPUSH
68047: CALL_OW 69
68051: ST_TO_ADDR
// if not tmp then
68052: LD_VAR 0 1
68056: NOT
68057: IFFALSE 68061
// exit ;
68059: GO 68087
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68061: LD_VAR 0 1
68065: PUSH
68066: LD_INT 1
68068: PPUSH
68069: LD_VAR 0 1
68073: PPUSH
68074: CALL_OW 12
68078: ARRAY
68079: PPUSH
68080: LD_INT 200
68082: PPUSH
68083: CALL_OW 234
// end ;
68087: PPOPN 1
68089: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68090: LD_EXP 51
68094: PUSH
68095: LD_EXP 80
68099: AND
68100: IFFALSE 68179
68102: GO 68104
68104: DISABLE
68105: LD_INT 0
68107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68108: LD_ADDR_VAR 0 1
68112: PUSH
68113: LD_INT 22
68115: PUSH
68116: LD_OWVAR 2
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: PUSH
68125: LD_INT 21
68127: PUSH
68128: LD_INT 2
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PPUSH
68139: CALL_OW 69
68143: ST_TO_ADDR
// if not tmp then
68144: LD_VAR 0 1
68148: NOT
68149: IFFALSE 68153
// exit ;
68151: GO 68179
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68153: LD_VAR 0 1
68157: PUSH
68158: LD_INT 1
68160: PPUSH
68161: LD_VAR 0 1
68165: PPUSH
68166: CALL_OW 12
68170: ARRAY
68171: PPUSH
68172: LD_INT 60
68174: PPUSH
68175: CALL_OW 234
// end ;
68179: PPOPN 1
68181: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68182: LD_EXP 51
68186: PUSH
68187: LD_EXP 81
68191: AND
68192: IFFALSE 68291
68194: GO 68196
68196: DISABLE
68197: LD_INT 0
68199: PPUSH
68200: PPUSH
// begin enable ;
68201: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68202: LD_ADDR_VAR 0 1
68206: PUSH
68207: LD_INT 22
68209: PUSH
68210: LD_OWVAR 2
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 61
68221: PUSH
68222: EMPTY
68223: LIST
68224: PUSH
68225: LD_INT 33
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: LIST
68239: PPUSH
68240: CALL_OW 69
68244: ST_TO_ADDR
// if not tmp then
68245: LD_VAR 0 1
68249: NOT
68250: IFFALSE 68254
// exit ;
68252: GO 68291
// for i in tmp do
68254: LD_ADDR_VAR 0 2
68258: PUSH
68259: LD_VAR 0 1
68263: PUSH
68264: FOR_IN
68265: IFFALSE 68289
// if IsControledBy ( i ) then
68267: LD_VAR 0 2
68271: PPUSH
68272: CALL_OW 312
68276: IFFALSE 68287
// ComUnlink ( i ) ;
68278: LD_VAR 0 2
68282: PPUSH
68283: CALL_OW 136
68287: GO 68264
68289: POP
68290: POP
// end ;
68291: PPOPN 2
68293: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68294: LD_EXP 51
68298: PUSH
68299: LD_EXP 82
68303: AND
68304: IFFALSE 68444
68306: GO 68308
68308: DISABLE
68309: LD_INT 0
68311: PPUSH
68312: PPUSH
// begin ToLua ( displayPowell(); ) ;
68313: LD_STRING displayPowell();
68315: PPUSH
68316: CALL_OW 559
// uc_side := 0 ;
68320: LD_ADDR_OWVAR 20
68324: PUSH
68325: LD_INT 0
68327: ST_TO_ADDR
// uc_nation := 2 ;
68328: LD_ADDR_OWVAR 21
68332: PUSH
68333: LD_INT 2
68335: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68336: LD_ADDR_OWVAR 37
68340: PUSH
68341: LD_INT 14
68343: ST_TO_ADDR
// vc_engine := engine_siberite ;
68344: LD_ADDR_OWVAR 39
68348: PUSH
68349: LD_INT 3
68351: ST_TO_ADDR
// vc_control := control_apeman ;
68352: LD_ADDR_OWVAR 38
68356: PUSH
68357: LD_INT 5
68359: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68360: LD_ADDR_OWVAR 40
68364: PUSH
68365: LD_INT 29
68367: ST_TO_ADDR
// un := CreateVehicle ;
68368: LD_ADDR_VAR 0 2
68372: PUSH
68373: CALL_OW 45
68377: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68378: LD_VAR 0 2
68382: PPUSH
68383: LD_INT 1
68385: PPUSH
68386: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68390: LD_INT 35
68392: PPUSH
68393: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68397: LD_VAR 0 2
68401: PPUSH
68402: LD_INT 22
68404: PUSH
68405: LD_OWVAR 2
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PPUSH
68414: CALL_OW 69
68418: PPUSH
68419: LD_VAR 0 2
68423: PPUSH
68424: CALL_OW 74
68428: PPUSH
68429: CALL_OW 115
// until IsDead ( un ) ;
68433: LD_VAR 0 2
68437: PPUSH
68438: CALL_OW 301
68442: IFFALSE 68390
// end ;
68444: PPOPN 2
68446: END
// every 0 0$1 trigger StreamModeActive and sStu do
68447: LD_EXP 51
68451: PUSH
68452: LD_EXP 90
68456: AND
68457: IFFALSE 68473
68459: GO 68461
68461: DISABLE
// begin ToLua ( displayStucuk(); ) ;
68462: LD_STRING displayStucuk();
68464: PPUSH
68465: CALL_OW 559
// ResetFog ;
68469: CALL_OW 335
// end ;
68473: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
68474: LD_EXP 51
68478: PUSH
68479: LD_EXP 83
68483: AND
68484: IFFALSE 68625
68486: GO 68488
68488: DISABLE
68489: LD_INT 0
68491: PPUSH
68492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68493: LD_ADDR_VAR 0 2
68497: PUSH
68498: LD_INT 22
68500: PUSH
68501: LD_OWVAR 2
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 21
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PPUSH
68524: CALL_OW 69
68528: ST_TO_ADDR
// if not tmp then
68529: LD_VAR 0 2
68533: NOT
68534: IFFALSE 68538
// exit ;
68536: GO 68625
// un := tmp [ rand ( 1 , tmp ) ] ;
68538: LD_ADDR_VAR 0 1
68542: PUSH
68543: LD_VAR 0 2
68547: PUSH
68548: LD_INT 1
68550: PPUSH
68551: LD_VAR 0 2
68555: PPUSH
68556: CALL_OW 12
68560: ARRAY
68561: ST_TO_ADDR
// SetSide ( un , 0 ) ;
68562: LD_VAR 0 1
68566: PPUSH
68567: LD_INT 0
68569: PPUSH
68570: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
68574: LD_VAR 0 1
68578: PPUSH
68579: LD_OWVAR 3
68583: PUSH
68584: LD_VAR 0 1
68588: DIFF
68589: PPUSH
68590: LD_VAR 0 1
68594: PPUSH
68595: CALL_OW 74
68599: PPUSH
68600: CALL_OW 115
// wait ( 0 0$20 ) ;
68604: LD_INT 700
68606: PPUSH
68607: CALL_OW 67
// SetSide ( un , your_side ) ;
68611: LD_VAR 0 1
68615: PPUSH
68616: LD_OWVAR 2
68620: PPUSH
68621: CALL_OW 235
// end ;
68625: PPOPN 2
68627: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
68628: LD_EXP 51
68632: PUSH
68633: LD_EXP 84
68637: AND
68638: IFFALSE 68744
68640: GO 68642
68642: DISABLE
68643: LD_INT 0
68645: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68646: LD_ADDR_VAR 0 1
68650: PUSH
68651: LD_INT 22
68653: PUSH
68654: LD_OWVAR 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 30
68668: PUSH
68669: LD_INT 0
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 30
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PPUSH
68695: CALL_OW 69
68699: ST_TO_ADDR
// if not depot then
68700: LD_VAR 0 1
68704: NOT
68705: IFFALSE 68709
// exit ;
68707: GO 68744
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 1
68716: ARRAY
68717: PPUSH
68718: CALL_OW 250
68722: PPUSH
68723: LD_VAR 0 1
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PPUSH
68732: CALL_OW 251
68736: PPUSH
68737: LD_INT 70
68739: PPUSH
68740: CALL_OW 495
// end ;
68744: PPOPN 1
68746: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
68747: LD_EXP 51
68751: PUSH
68752: LD_EXP 85
68756: AND
68757: IFFALSE 68968
68759: GO 68761
68761: DISABLE
68762: LD_INT 0
68764: PPUSH
68765: PPUSH
68766: PPUSH
68767: PPUSH
68768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
68769: LD_ADDR_VAR 0 5
68773: PUSH
68774: LD_INT 22
68776: PUSH
68777: LD_OWVAR 2
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 21
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PPUSH
68800: CALL_OW 69
68804: ST_TO_ADDR
// if not tmp then
68805: LD_VAR 0 5
68809: NOT
68810: IFFALSE 68814
// exit ;
68812: GO 68968
// for i in tmp do
68814: LD_ADDR_VAR 0 1
68818: PUSH
68819: LD_VAR 0 5
68823: PUSH
68824: FOR_IN
68825: IFFALSE 68966
// begin d := rand ( 0 , 5 ) ;
68827: LD_ADDR_VAR 0 4
68831: PUSH
68832: LD_INT 0
68834: PPUSH
68835: LD_INT 5
68837: PPUSH
68838: CALL_OW 12
68842: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
68843: LD_ADDR_VAR 0 2
68847: PUSH
68848: LD_VAR 0 1
68852: PPUSH
68853: CALL_OW 250
68857: PPUSH
68858: LD_VAR 0 4
68862: PPUSH
68863: LD_INT 3
68865: PPUSH
68866: LD_INT 12
68868: PPUSH
68869: CALL_OW 12
68873: PPUSH
68874: CALL_OW 272
68878: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
68879: LD_ADDR_VAR 0 3
68883: PUSH
68884: LD_VAR 0 1
68888: PPUSH
68889: CALL_OW 251
68893: PPUSH
68894: LD_VAR 0 4
68898: PPUSH
68899: LD_INT 3
68901: PPUSH
68902: LD_INT 12
68904: PPUSH
68905: CALL_OW 12
68909: PPUSH
68910: CALL_OW 273
68914: ST_TO_ADDR
// if ValidHex ( x , y ) then
68915: LD_VAR 0 2
68919: PPUSH
68920: LD_VAR 0 3
68924: PPUSH
68925: CALL_OW 488
68929: IFFALSE 68964
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
68931: LD_VAR 0 1
68935: PPUSH
68936: LD_VAR 0 2
68940: PPUSH
68941: LD_VAR 0 3
68945: PPUSH
68946: LD_INT 3
68948: PPUSH
68949: LD_INT 6
68951: PPUSH
68952: CALL_OW 12
68956: PPUSH
68957: LD_INT 1
68959: PPUSH
68960: CALL_OW 483
// end ;
68964: GO 68824
68966: POP
68967: POP
// end ;
68968: PPOPN 5
68970: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
68971: LD_EXP 51
68975: PUSH
68976: LD_EXP 86
68980: AND
68981: IFFALSE 69075
68983: GO 68985
68985: DISABLE
68986: LD_INT 0
68988: PPUSH
68989: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
68990: LD_ADDR_VAR 0 2
68994: PUSH
68995: LD_INT 22
68997: PUSH
68998: LD_OWVAR 2
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 32
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 21
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: LIST
69031: PPUSH
69032: CALL_OW 69
69036: ST_TO_ADDR
// if not tmp then
69037: LD_VAR 0 2
69041: NOT
69042: IFFALSE 69046
// exit ;
69044: GO 69075
// for i in tmp do
69046: LD_ADDR_VAR 0 1
69050: PUSH
69051: LD_VAR 0 2
69055: PUSH
69056: FOR_IN
69057: IFFALSE 69073
// SetFuel ( i , 0 ) ;
69059: LD_VAR 0 1
69063: PPUSH
69064: LD_INT 0
69066: PPUSH
69067: CALL_OW 240
69071: GO 69056
69073: POP
69074: POP
// end ;
69075: PPOPN 2
69077: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69078: LD_EXP 51
69082: PUSH
69083: LD_EXP 87
69087: AND
69088: IFFALSE 69154
69090: GO 69092
69092: DISABLE
69093: LD_INT 0
69095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69096: LD_ADDR_VAR 0 1
69100: PUSH
69101: LD_INT 22
69103: PUSH
69104: LD_OWVAR 2
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 30
69115: PUSH
69116: LD_INT 29
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PPUSH
69127: CALL_OW 69
69131: ST_TO_ADDR
// if not tmp then
69132: LD_VAR 0 1
69136: NOT
69137: IFFALSE 69141
// exit ;
69139: GO 69154
// DestroyUnit ( tmp [ 1 ] ) ;
69141: LD_VAR 0 1
69145: PUSH
69146: LD_INT 1
69148: ARRAY
69149: PPUSH
69150: CALL_OW 65
// end ;
69154: PPOPN 1
69156: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69157: LD_EXP 51
69161: PUSH
69162: LD_EXP 89
69166: AND
69167: IFFALSE 69296
69169: GO 69171
69171: DISABLE
69172: LD_INT 0
69174: PPUSH
// begin uc_side := 0 ;
69175: LD_ADDR_OWVAR 20
69179: PUSH
69180: LD_INT 0
69182: ST_TO_ADDR
// uc_nation := nation_arabian ;
69183: LD_ADDR_OWVAR 21
69187: PUSH
69188: LD_INT 2
69190: ST_TO_ADDR
// hc_gallery :=  ;
69191: LD_ADDR_OWVAR 33
69195: PUSH
69196: LD_STRING 
69198: ST_TO_ADDR
// hc_name :=  ;
69199: LD_ADDR_OWVAR 26
69203: PUSH
69204: LD_STRING 
69206: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69207: LD_INT 1
69209: PPUSH
69210: LD_INT 11
69212: PPUSH
69213: LD_INT 10
69215: PPUSH
69216: CALL_OW 380
// un := CreateHuman ;
69220: LD_ADDR_VAR 0 1
69224: PUSH
69225: CALL_OW 44
69229: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69230: LD_VAR 0 1
69234: PPUSH
69235: LD_INT 1
69237: PPUSH
69238: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69242: LD_INT 35
69244: PPUSH
69245: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69249: LD_VAR 0 1
69253: PPUSH
69254: LD_INT 22
69256: PUSH
69257: LD_OWVAR 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PPUSH
69266: CALL_OW 69
69270: PPUSH
69271: LD_VAR 0 1
69275: PPUSH
69276: CALL_OW 74
69280: PPUSH
69281: CALL_OW 115
// until IsDead ( un ) ;
69285: LD_VAR 0 1
69289: PPUSH
69290: CALL_OW 301
69294: IFFALSE 69242
// end ;
69296: PPOPN 1
69298: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69299: LD_EXP 51
69303: PUSH
69304: LD_EXP 91
69308: AND
69309: IFFALSE 69321
69311: GO 69313
69313: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69314: LD_STRING earthquake(getX(game), 0, 32)
69316: PPUSH
69317: CALL_OW 559
69321: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69322: LD_EXP 51
69326: PUSH
69327: LD_EXP 92
69331: AND
69332: IFFALSE 69423
69334: GO 69336
69336: DISABLE
69337: LD_INT 0
69339: PPUSH
// begin enable ;
69340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69341: LD_ADDR_VAR 0 1
69345: PUSH
69346: LD_INT 22
69348: PUSH
69349: LD_OWVAR 2
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 21
69360: PUSH
69361: LD_INT 2
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 33
69370: PUSH
69371: LD_INT 3
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: LIST
69382: PPUSH
69383: CALL_OW 69
69387: ST_TO_ADDR
// if not tmp then
69388: LD_VAR 0 1
69392: NOT
69393: IFFALSE 69397
// exit ;
69395: GO 69423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69397: LD_VAR 0 1
69401: PUSH
69402: LD_INT 1
69404: PPUSH
69405: LD_VAR 0 1
69409: PPUSH
69410: CALL_OW 12
69414: ARRAY
69415: PPUSH
69416: LD_INT 1
69418: PPUSH
69419: CALL_OW 234
// end ;
69423: PPOPN 1
69425: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69426: LD_EXP 51
69430: PUSH
69431: LD_EXP 93
69435: AND
69436: IFFALSE 69577
69438: GO 69440
69440: DISABLE
69441: LD_INT 0
69443: PPUSH
69444: PPUSH
69445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69446: LD_ADDR_VAR 0 3
69450: PUSH
69451: LD_INT 22
69453: PUSH
69454: LD_OWVAR 2
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 25
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PPUSH
69477: CALL_OW 69
69481: ST_TO_ADDR
// if not tmp then
69482: LD_VAR 0 3
69486: NOT
69487: IFFALSE 69491
// exit ;
69489: GO 69577
// un := tmp [ rand ( 1 , tmp ) ] ;
69491: LD_ADDR_VAR 0 2
69495: PUSH
69496: LD_VAR 0 3
69500: PUSH
69501: LD_INT 1
69503: PPUSH
69504: LD_VAR 0 3
69508: PPUSH
69509: CALL_OW 12
69513: ARRAY
69514: ST_TO_ADDR
// if Crawls ( un ) then
69515: LD_VAR 0 2
69519: PPUSH
69520: CALL_OW 318
69524: IFFALSE 69535
// ComWalk ( un ) ;
69526: LD_VAR 0 2
69530: PPUSH
69531: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
69535: LD_VAR 0 2
69539: PPUSH
69540: LD_INT 9
69542: PPUSH
69543: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
69547: LD_INT 28
69549: PPUSH
69550: LD_OWVAR 2
69554: PPUSH
69555: LD_INT 2
69557: PPUSH
69558: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
69562: LD_INT 29
69564: PPUSH
69565: LD_OWVAR 2
69569: PPUSH
69570: LD_INT 2
69572: PPUSH
69573: CALL_OW 322
// end ;
69577: PPOPN 3
69579: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
69580: LD_EXP 51
69584: PUSH
69585: LD_EXP 94
69589: AND
69590: IFFALSE 69701
69592: GO 69594
69594: DISABLE
69595: LD_INT 0
69597: PPUSH
69598: PPUSH
69599: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
69600: LD_ADDR_VAR 0 3
69604: PUSH
69605: LD_INT 22
69607: PUSH
69608: LD_OWVAR 2
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 25
69619: PUSH
69620: LD_INT 1
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PPUSH
69631: CALL_OW 69
69635: ST_TO_ADDR
// if not tmp then
69636: LD_VAR 0 3
69640: NOT
69641: IFFALSE 69645
// exit ;
69643: GO 69701
// un := tmp [ rand ( 1 , tmp ) ] ;
69645: LD_ADDR_VAR 0 2
69649: PUSH
69650: LD_VAR 0 3
69654: PUSH
69655: LD_INT 1
69657: PPUSH
69658: LD_VAR 0 3
69662: PPUSH
69663: CALL_OW 12
69667: ARRAY
69668: ST_TO_ADDR
// if Crawls ( un ) then
69669: LD_VAR 0 2
69673: PPUSH
69674: CALL_OW 318
69678: IFFALSE 69689
// ComWalk ( un ) ;
69680: LD_VAR 0 2
69684: PPUSH
69685: CALL_OW 138
// SetClass ( un , class_mortar ) ;
69689: LD_VAR 0 2
69693: PPUSH
69694: LD_INT 8
69696: PPUSH
69697: CALL_OW 336
// end ;
69701: PPOPN 3
69703: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
69704: LD_EXP 51
69708: PUSH
69709: LD_EXP 95
69713: AND
69714: IFFALSE 69858
69716: GO 69718
69718: DISABLE
69719: LD_INT 0
69721: PPUSH
69722: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
69723: LD_ADDR_VAR 0 2
69727: PUSH
69728: LD_INT 22
69730: PUSH
69731: LD_OWVAR 2
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: PUSH
69740: LD_INT 21
69742: PUSH
69743: LD_INT 2
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: LD_INT 2
69752: PUSH
69753: LD_INT 34
69755: PUSH
69756: LD_INT 12
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 34
69765: PUSH
69766: LD_INT 51
69768: PUSH
69769: EMPTY
69770: LIST
69771: LIST
69772: PUSH
69773: LD_INT 34
69775: PUSH
69776: LD_INT 32
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: PPUSH
69794: CALL_OW 69
69798: ST_TO_ADDR
// if not tmp then
69799: LD_VAR 0 2
69803: NOT
69804: IFFALSE 69808
// exit ;
69806: GO 69858
// for i in tmp do
69808: LD_ADDR_VAR 0 1
69812: PUSH
69813: LD_VAR 0 2
69817: PUSH
69818: FOR_IN
69819: IFFALSE 69856
// if GetCargo ( i , mat_artifact ) = 0 then
69821: LD_VAR 0 1
69825: PPUSH
69826: LD_INT 4
69828: PPUSH
69829: CALL_OW 289
69833: PUSH
69834: LD_INT 0
69836: EQUAL
69837: IFFALSE 69854
// SetCargo ( i , mat_siberit , 100 ) ;
69839: LD_VAR 0 1
69843: PPUSH
69844: LD_INT 3
69846: PPUSH
69847: LD_INT 100
69849: PPUSH
69850: CALL_OW 290
69854: GO 69818
69856: POP
69857: POP
// end ;
69858: PPOPN 2
69860: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
69861: LD_EXP 51
69865: PUSH
69866: LD_EXP 96
69870: AND
69871: IFFALSE 70054
69873: GO 69875
69875: DISABLE
69876: LD_INT 0
69878: PPUSH
69879: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69880: LD_ADDR_VAR 0 2
69884: PUSH
69885: LD_INT 22
69887: PUSH
69888: LD_OWVAR 2
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PPUSH
69897: CALL_OW 69
69901: ST_TO_ADDR
// if not tmp then
69902: LD_VAR 0 2
69906: NOT
69907: IFFALSE 69911
// exit ;
69909: GO 70054
// for i := 1 to 2 do
69911: LD_ADDR_VAR 0 1
69915: PUSH
69916: DOUBLE
69917: LD_INT 1
69919: DEC
69920: ST_TO_ADDR
69921: LD_INT 2
69923: PUSH
69924: FOR_TO
69925: IFFALSE 70052
// begin uc_side := your_side ;
69927: LD_ADDR_OWVAR 20
69931: PUSH
69932: LD_OWVAR 2
69936: ST_TO_ADDR
// uc_nation := nation_american ;
69937: LD_ADDR_OWVAR 21
69941: PUSH
69942: LD_INT 1
69944: ST_TO_ADDR
// vc_chassis := us_morphling ;
69945: LD_ADDR_OWVAR 37
69949: PUSH
69950: LD_INT 5
69952: ST_TO_ADDR
// vc_engine := engine_siberite ;
69953: LD_ADDR_OWVAR 39
69957: PUSH
69958: LD_INT 3
69960: ST_TO_ADDR
// vc_control := control_computer ;
69961: LD_ADDR_OWVAR 38
69965: PUSH
69966: LD_INT 3
69968: ST_TO_ADDR
// vc_weapon := us_double_laser ;
69969: LD_ADDR_OWVAR 40
69973: PUSH
69974: LD_INT 10
69976: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
69977: LD_VAR 0 2
69981: PUSH
69982: LD_INT 1
69984: ARRAY
69985: PPUSH
69986: CALL_OW 310
69990: NOT
69991: IFFALSE 70038
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
69993: CALL_OW 45
69997: PPUSH
69998: LD_VAR 0 2
70002: PUSH
70003: LD_INT 1
70005: ARRAY
70006: PPUSH
70007: CALL_OW 250
70011: PPUSH
70012: LD_VAR 0 2
70016: PUSH
70017: LD_INT 1
70019: ARRAY
70020: PPUSH
70021: CALL_OW 251
70025: PPUSH
70026: LD_INT 12
70028: PPUSH
70029: LD_INT 1
70031: PPUSH
70032: CALL_OW 50
70036: GO 70050
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70038: CALL_OW 45
70042: PPUSH
70043: LD_INT 1
70045: PPUSH
70046: CALL_OW 51
// end ;
70050: GO 69924
70052: POP
70053: POP
// end ;
70054: PPOPN 2
70056: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70057: LD_EXP 51
70061: PUSH
70062: LD_EXP 97
70066: AND
70067: IFFALSE 70289
70069: GO 70071
70071: DISABLE
70072: LD_INT 0
70074: PPUSH
70075: PPUSH
70076: PPUSH
70077: PPUSH
70078: PPUSH
70079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70080: LD_ADDR_VAR 0 6
70084: PUSH
70085: LD_INT 22
70087: PUSH
70088: LD_OWVAR 2
70092: PUSH
70093: EMPTY
70094: LIST
70095: LIST
70096: PUSH
70097: LD_INT 21
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: PUSH
70107: LD_INT 3
70109: PUSH
70110: LD_INT 23
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: LIST
70128: PPUSH
70129: CALL_OW 69
70133: ST_TO_ADDR
// if not tmp then
70134: LD_VAR 0 6
70138: NOT
70139: IFFALSE 70143
// exit ;
70141: GO 70289
// s1 := rand ( 1 , 4 ) ;
70143: LD_ADDR_VAR 0 2
70147: PUSH
70148: LD_INT 1
70150: PPUSH
70151: LD_INT 4
70153: PPUSH
70154: CALL_OW 12
70158: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70159: LD_ADDR_VAR 0 4
70163: PUSH
70164: LD_VAR 0 6
70168: PUSH
70169: LD_INT 1
70171: ARRAY
70172: PPUSH
70173: LD_VAR 0 2
70177: PPUSH
70178: CALL_OW 259
70182: ST_TO_ADDR
// if s1 = 1 then
70183: LD_VAR 0 2
70187: PUSH
70188: LD_INT 1
70190: EQUAL
70191: IFFALSE 70211
// s2 := rand ( 2 , 4 ) else
70193: LD_ADDR_VAR 0 3
70197: PUSH
70198: LD_INT 2
70200: PPUSH
70201: LD_INT 4
70203: PPUSH
70204: CALL_OW 12
70208: ST_TO_ADDR
70209: GO 70219
// s2 := 1 ;
70211: LD_ADDR_VAR 0 3
70215: PUSH
70216: LD_INT 1
70218: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70219: LD_ADDR_VAR 0 5
70223: PUSH
70224: LD_VAR 0 6
70228: PUSH
70229: LD_INT 1
70231: ARRAY
70232: PPUSH
70233: LD_VAR 0 3
70237: PPUSH
70238: CALL_OW 259
70242: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70243: LD_VAR 0 6
70247: PUSH
70248: LD_INT 1
70250: ARRAY
70251: PPUSH
70252: LD_VAR 0 2
70256: PPUSH
70257: LD_VAR 0 5
70261: PPUSH
70262: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70266: LD_VAR 0 6
70270: PUSH
70271: LD_INT 1
70273: ARRAY
70274: PPUSH
70275: LD_VAR 0 3
70279: PPUSH
70280: LD_VAR 0 4
70284: PPUSH
70285: CALL_OW 237
// end ;
70289: PPOPN 6
70291: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70292: LD_EXP 51
70296: PUSH
70297: LD_EXP 98
70301: AND
70302: IFFALSE 70381
70304: GO 70306
70306: DISABLE
70307: LD_INT 0
70309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70310: LD_ADDR_VAR 0 1
70314: PUSH
70315: LD_INT 22
70317: PUSH
70318: LD_OWVAR 2
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 30
70329: PUSH
70330: LD_INT 3
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PPUSH
70341: CALL_OW 69
70345: ST_TO_ADDR
// if not tmp then
70346: LD_VAR 0 1
70350: NOT
70351: IFFALSE 70355
// exit ;
70353: GO 70381
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70355: LD_VAR 0 1
70359: PUSH
70360: LD_INT 1
70362: PPUSH
70363: LD_VAR 0 1
70367: PPUSH
70368: CALL_OW 12
70372: ARRAY
70373: PPUSH
70374: LD_INT 1
70376: PPUSH
70377: CALL_OW 234
// end ;
70381: PPOPN 1
70383: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70384: LD_EXP 51
70388: PUSH
70389: LD_EXP 99
70393: AND
70394: IFFALSE 70506
70396: GO 70398
70398: DISABLE
70399: LD_INT 0
70401: PPUSH
70402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70403: LD_ADDR_VAR 0 2
70407: PUSH
70408: LD_INT 22
70410: PUSH
70411: LD_OWVAR 2
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PUSH
70420: LD_INT 2
70422: PUSH
70423: LD_INT 30
70425: PUSH
70426: LD_INT 27
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 30
70435: PUSH
70436: LD_INT 26
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: PUSH
70443: LD_INT 30
70445: PUSH
70446: LD_INT 28
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PPUSH
70463: CALL_OW 69
70467: ST_TO_ADDR
// if not tmp then
70468: LD_VAR 0 2
70472: NOT
70473: IFFALSE 70477
// exit ;
70475: GO 70506
// for i in tmp do
70477: LD_ADDR_VAR 0 1
70481: PUSH
70482: LD_VAR 0 2
70486: PUSH
70487: FOR_IN
70488: IFFALSE 70504
// SetLives ( i , 1 ) ;
70490: LD_VAR 0 1
70494: PPUSH
70495: LD_INT 1
70497: PPUSH
70498: CALL_OW 234
70502: GO 70487
70504: POP
70505: POP
// end ;
70506: PPOPN 2
70508: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
70509: LD_EXP 51
70513: PUSH
70514: LD_EXP 100
70518: AND
70519: IFFALSE 70806
70521: GO 70523
70523: DISABLE
70524: LD_INT 0
70526: PPUSH
70527: PPUSH
70528: PPUSH
// begin i := rand ( 1 , 7 ) ;
70529: LD_ADDR_VAR 0 1
70533: PUSH
70534: LD_INT 1
70536: PPUSH
70537: LD_INT 7
70539: PPUSH
70540: CALL_OW 12
70544: ST_TO_ADDR
// case i of 1 :
70545: LD_VAR 0 1
70549: PUSH
70550: LD_INT 1
70552: DOUBLE
70553: EQUAL
70554: IFTRUE 70558
70556: GO 70568
70558: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
70559: LD_STRING earthquake(getX(game), 0, 32)
70561: PPUSH
70562: CALL_OW 559
70566: GO 70806
70568: LD_INT 2
70570: DOUBLE
70571: EQUAL
70572: IFTRUE 70576
70574: GO 70590
70576: POP
// begin ToLua ( displayStucuk(); ) ;
70577: LD_STRING displayStucuk();
70579: PPUSH
70580: CALL_OW 559
// ResetFog ;
70584: CALL_OW 335
// end ; 3 :
70588: GO 70806
70590: LD_INT 3
70592: DOUBLE
70593: EQUAL
70594: IFTRUE 70598
70596: GO 70702
70598: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70599: LD_ADDR_VAR 0 2
70603: PUSH
70604: LD_INT 22
70606: PUSH
70607: LD_OWVAR 2
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 25
70618: PUSH
70619: LD_INT 1
70621: PUSH
70622: EMPTY
70623: LIST
70624: LIST
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PPUSH
70630: CALL_OW 69
70634: ST_TO_ADDR
// if not tmp then
70635: LD_VAR 0 2
70639: NOT
70640: IFFALSE 70644
// exit ;
70642: GO 70806
// un := tmp [ rand ( 1 , tmp ) ] ;
70644: LD_ADDR_VAR 0 3
70648: PUSH
70649: LD_VAR 0 2
70653: PUSH
70654: LD_INT 1
70656: PPUSH
70657: LD_VAR 0 2
70661: PPUSH
70662: CALL_OW 12
70666: ARRAY
70667: ST_TO_ADDR
// if Crawls ( un ) then
70668: LD_VAR 0 3
70672: PPUSH
70673: CALL_OW 318
70677: IFFALSE 70688
// ComWalk ( un ) ;
70679: LD_VAR 0 3
70683: PPUSH
70684: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70688: LD_VAR 0 3
70692: PPUSH
70693: LD_INT 8
70695: PPUSH
70696: CALL_OW 336
// end ; 4 :
70700: GO 70806
70702: LD_INT 4
70704: DOUBLE
70705: EQUAL
70706: IFTRUE 70710
70708: GO 70784
70710: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
70711: LD_ADDR_VAR 0 2
70715: PUSH
70716: LD_INT 22
70718: PUSH
70719: LD_OWVAR 2
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 30
70730: PUSH
70731: LD_INT 29
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PPUSH
70742: CALL_OW 69
70746: ST_TO_ADDR
// if not tmp then
70747: LD_VAR 0 2
70751: NOT
70752: IFFALSE 70756
// exit ;
70754: GO 70806
// CenterNowOnUnits ( tmp [ 1 ] ) ;
70756: LD_VAR 0 2
70760: PUSH
70761: LD_INT 1
70763: ARRAY
70764: PPUSH
70765: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
70769: LD_VAR 0 2
70773: PUSH
70774: LD_INT 1
70776: ARRAY
70777: PPUSH
70778: CALL_OW 65
// end ; 5 .. 7 :
70782: GO 70806
70784: LD_INT 5
70786: DOUBLE
70787: GREATEREQUAL
70788: IFFALSE 70796
70790: LD_INT 7
70792: DOUBLE
70793: LESSEQUAL
70794: IFTRUE 70798
70796: GO 70805
70798: POP
// StreamSibBomb ; end ;
70799: CALL 67043 0 0
70803: GO 70806
70805: POP
// end ;
70806: PPOPN 3
70808: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
70809: LD_EXP 51
70813: PUSH
70814: LD_EXP 101
70818: AND
70819: IFFALSE 70975
70821: GO 70823
70823: DISABLE
70824: LD_INT 0
70826: PPUSH
70827: PPUSH
70828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
70829: LD_ADDR_VAR 0 2
70833: PUSH
70834: LD_INT 81
70836: PUSH
70837: LD_OWVAR 2
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: LD_INT 21
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 21
70861: PUSH
70862: LD_INT 2
70864: PUSH
70865: EMPTY
70866: LIST
70867: LIST
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: LIST
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PPUSH
70878: CALL_OW 69
70882: ST_TO_ADDR
// if not tmp then
70883: LD_VAR 0 2
70887: NOT
70888: IFFALSE 70892
// exit ;
70890: GO 70975
// p := 0 ;
70892: LD_ADDR_VAR 0 3
70896: PUSH
70897: LD_INT 0
70899: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
70900: LD_INT 35
70902: PPUSH
70903: CALL_OW 67
// p := p + 1 ;
70907: LD_ADDR_VAR 0 3
70911: PUSH
70912: LD_VAR 0 3
70916: PUSH
70917: LD_INT 1
70919: PLUS
70920: ST_TO_ADDR
// for i in tmp do
70921: LD_ADDR_VAR 0 1
70925: PUSH
70926: LD_VAR 0 2
70930: PUSH
70931: FOR_IN
70932: IFFALSE 70963
// if GetLives ( i ) < 1000 then
70934: LD_VAR 0 1
70938: PPUSH
70939: CALL_OW 256
70943: PUSH
70944: LD_INT 1000
70946: LESS
70947: IFFALSE 70961
// SetLives ( i , 1000 ) ;
70949: LD_VAR 0 1
70953: PPUSH
70954: LD_INT 1000
70956: PPUSH
70957: CALL_OW 234
70961: GO 70931
70963: POP
70964: POP
// until p > 20 ;
70965: LD_VAR 0 3
70969: PUSH
70970: LD_INT 20
70972: GREATER
70973: IFFALSE 70900
// end ;
70975: PPOPN 3
70977: END
// every 0 0$1 trigger StreamModeActive and sTime do
70978: LD_EXP 51
70982: PUSH
70983: LD_EXP 102
70987: AND
70988: IFFALSE 71023
70990: GO 70992
70992: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
70993: LD_INT 28
70995: PPUSH
70996: LD_OWVAR 2
71000: PPUSH
71001: LD_INT 2
71003: PPUSH
71004: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71008: LD_INT 30
71010: PPUSH
71011: LD_OWVAR 2
71015: PPUSH
71016: LD_INT 2
71018: PPUSH
71019: CALL_OW 322
// end ;
71023: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71024: LD_EXP 51
71028: PUSH
71029: LD_EXP 103
71033: AND
71034: IFFALSE 71155
71036: GO 71038
71038: DISABLE
71039: LD_INT 0
71041: PPUSH
71042: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71043: LD_ADDR_VAR 0 2
71047: PUSH
71048: LD_INT 22
71050: PUSH
71051: LD_OWVAR 2
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 21
71062: PUSH
71063: LD_INT 1
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 3
71072: PUSH
71073: LD_INT 23
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: EMPTY
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: PPUSH
71092: CALL_OW 69
71096: ST_TO_ADDR
// if not tmp then
71097: LD_VAR 0 2
71101: NOT
71102: IFFALSE 71106
// exit ;
71104: GO 71155
// for i in tmp do
71106: LD_ADDR_VAR 0 1
71110: PUSH
71111: LD_VAR 0 2
71115: PUSH
71116: FOR_IN
71117: IFFALSE 71153
// begin if Crawls ( i ) then
71119: LD_VAR 0 1
71123: PPUSH
71124: CALL_OW 318
71128: IFFALSE 71139
// ComWalk ( i ) ;
71130: LD_VAR 0 1
71134: PPUSH
71135: CALL_OW 138
// SetClass ( i , 2 ) ;
71139: LD_VAR 0 1
71143: PPUSH
71144: LD_INT 2
71146: PPUSH
71147: CALL_OW 336
// end ;
71151: GO 71116
71153: POP
71154: POP
// end ;
71155: PPOPN 2
71157: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71158: LD_EXP 51
71162: PUSH
71163: LD_EXP 104
71167: AND
71168: IFFALSE 71456
71170: GO 71172
71172: DISABLE
71173: LD_INT 0
71175: PPUSH
71176: PPUSH
71177: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71178: LD_OWVAR 2
71182: PPUSH
71183: LD_INT 9
71185: PPUSH
71186: LD_INT 1
71188: PPUSH
71189: LD_INT 1
71191: PPUSH
71192: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71196: LD_INT 9
71198: PPUSH
71199: LD_OWVAR 2
71203: PPUSH
71204: CALL_OW 343
// uc_side := 9 ;
71208: LD_ADDR_OWVAR 20
71212: PUSH
71213: LD_INT 9
71215: ST_TO_ADDR
// uc_nation := 2 ;
71216: LD_ADDR_OWVAR 21
71220: PUSH
71221: LD_INT 2
71223: ST_TO_ADDR
// hc_name := Dark Warrior ;
71224: LD_ADDR_OWVAR 26
71228: PUSH
71229: LD_STRING Dark Warrior
71231: ST_TO_ADDR
// hc_gallery :=  ;
71232: LD_ADDR_OWVAR 33
71236: PUSH
71237: LD_STRING 
71239: ST_TO_ADDR
// hc_noskilllimit := true ;
71240: LD_ADDR_OWVAR 76
71244: PUSH
71245: LD_INT 1
71247: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71248: LD_ADDR_OWVAR 31
71252: PUSH
71253: LD_INT 30
71255: PUSH
71256: LD_INT 30
71258: PUSH
71259: LD_INT 30
71261: PUSH
71262: LD_INT 30
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: LIST
71269: LIST
71270: ST_TO_ADDR
// un := CreateHuman ;
71271: LD_ADDR_VAR 0 3
71275: PUSH
71276: CALL_OW 44
71280: ST_TO_ADDR
// hc_noskilllimit := false ;
71281: LD_ADDR_OWVAR 76
71285: PUSH
71286: LD_INT 0
71288: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71289: LD_VAR 0 3
71293: PPUSH
71294: LD_INT 1
71296: PPUSH
71297: CALL_OW 51
// ToLua ( playRanger() ) ;
71301: LD_STRING playRanger()
71303: PPUSH
71304: CALL_OW 559
// p := 0 ;
71308: LD_ADDR_VAR 0 2
71312: PUSH
71313: LD_INT 0
71315: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71316: LD_INT 35
71318: PPUSH
71319: CALL_OW 67
// p := p + 1 ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_INT 1
71335: PLUS
71336: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71337: LD_VAR 0 3
71341: PPUSH
71342: CALL_OW 256
71346: PUSH
71347: LD_INT 1000
71349: LESS
71350: IFFALSE 71364
// SetLives ( un , 1000 ) ;
71352: LD_VAR 0 3
71356: PPUSH
71357: LD_INT 1000
71359: PPUSH
71360: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71364: LD_VAR 0 3
71368: PPUSH
71369: LD_INT 81
71371: PUSH
71372: LD_OWVAR 2
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: LD_INT 91
71383: PUSH
71384: LD_VAR 0 3
71388: PUSH
71389: LD_INT 30
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: LIST
71396: PUSH
71397: EMPTY
71398: LIST
71399: LIST
71400: PPUSH
71401: CALL_OW 69
71405: PPUSH
71406: LD_VAR 0 3
71410: PPUSH
71411: CALL_OW 74
71415: PPUSH
71416: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71420: LD_VAR 0 2
71424: PUSH
71425: LD_INT 80
71427: GREATER
71428: PUSH
71429: LD_VAR 0 3
71433: PPUSH
71434: CALL_OW 301
71438: OR
71439: IFFALSE 71316
// if un then
71441: LD_VAR 0 3
71445: IFFALSE 71456
// RemoveUnit ( un ) ;
71447: LD_VAR 0 3
71451: PPUSH
71452: CALL_OW 64
// end ;
71456: PPOPN 3
71458: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
71459: LD_EXP 105
71463: IFFALSE 71579
71465: GO 71467
71467: DISABLE
71468: LD_INT 0
71470: PPUSH
71471: PPUSH
71472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
71473: LD_ADDR_VAR 0 2
71477: PUSH
71478: LD_INT 81
71480: PUSH
71481: LD_OWVAR 2
71485: PUSH
71486: EMPTY
71487: LIST
71488: LIST
71489: PUSH
71490: LD_INT 21
71492: PUSH
71493: LD_INT 1
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PPUSH
71504: CALL_OW 69
71508: ST_TO_ADDR
// ToLua ( playComputer() ) ;
71509: LD_STRING playComputer()
71511: PPUSH
71512: CALL_OW 559
// if not tmp then
71516: LD_VAR 0 2
71520: NOT
71521: IFFALSE 71525
// exit ;
71523: GO 71579
// for i in tmp do
71525: LD_ADDR_VAR 0 1
71529: PUSH
71530: LD_VAR 0 2
71534: PUSH
71535: FOR_IN
71536: IFFALSE 71577
// for j := 1 to 4 do
71538: LD_ADDR_VAR 0 3
71542: PUSH
71543: DOUBLE
71544: LD_INT 1
71546: DEC
71547: ST_TO_ADDR
71548: LD_INT 4
71550: PUSH
71551: FOR_TO
71552: IFFALSE 71573
// SetSkill ( i , j , 10 ) ;
71554: LD_VAR 0 1
71558: PPUSH
71559: LD_VAR 0 3
71563: PPUSH
71564: LD_INT 10
71566: PPUSH
71567: CALL_OW 237
71571: GO 71551
71573: POP
71574: POP
71575: GO 71535
71577: POP
71578: POP
// end ;
71579: PPOPN 3
71581: END
// every 0 0$1 trigger s30 do var i , tmp ;
71582: LD_EXP 106
71586: IFFALSE 71655
71588: GO 71590
71590: DISABLE
71591: LD_INT 0
71593: PPUSH
71594: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71595: LD_ADDR_VAR 0 2
71599: PUSH
71600: LD_INT 22
71602: PUSH
71603: LD_OWVAR 2
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PPUSH
71612: CALL_OW 69
71616: ST_TO_ADDR
// if not tmp then
71617: LD_VAR 0 2
71621: NOT
71622: IFFALSE 71626
// exit ;
71624: GO 71655
// for i in tmp do
71626: LD_ADDR_VAR 0 1
71630: PUSH
71631: LD_VAR 0 2
71635: PUSH
71636: FOR_IN
71637: IFFALSE 71653
// SetLives ( i , 300 ) ;
71639: LD_VAR 0 1
71643: PPUSH
71644: LD_INT 300
71646: PPUSH
71647: CALL_OW 234
71651: GO 71636
71653: POP
71654: POP
// end ;
71655: PPOPN 2
71657: END
// every 0 0$1 trigger s60 do var i , tmp ;
71658: LD_EXP 107
71662: IFFALSE 71731
71664: GO 71666
71666: DISABLE
71667: LD_INT 0
71669: PPUSH
71670: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
71671: LD_ADDR_VAR 0 2
71675: PUSH
71676: LD_INT 22
71678: PUSH
71679: LD_OWVAR 2
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PPUSH
71688: CALL_OW 69
71692: ST_TO_ADDR
// if not tmp then
71693: LD_VAR 0 2
71697: NOT
71698: IFFALSE 71702
// exit ;
71700: GO 71731
// for i in tmp do
71702: LD_ADDR_VAR 0 1
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: FOR_IN
71713: IFFALSE 71729
// SetLives ( i , 600 ) ;
71715: LD_VAR 0 1
71719: PPUSH
71720: LD_INT 600
71722: PPUSH
71723: CALL_OW 234
71727: GO 71712
71729: POP
71730: POP
// end ;
71731: PPOPN 2
71733: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
71734: LD_INT 0
71736: PPUSH
// case cmd of 301 :
71737: LD_VAR 0 1
71741: PUSH
71742: LD_INT 301
71744: DOUBLE
71745: EQUAL
71746: IFTRUE 71750
71748: GO 71782
71750: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
71751: LD_VAR 0 6
71755: PPUSH
71756: LD_VAR 0 7
71760: PPUSH
71761: LD_VAR 0 8
71765: PPUSH
71766: LD_VAR 0 4
71770: PPUSH
71771: LD_VAR 0 5
71775: PPUSH
71776: CALL 72991 0 5
71780: GO 71903
71782: LD_INT 302
71784: DOUBLE
71785: EQUAL
71786: IFTRUE 71790
71788: GO 71827
71790: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
71791: LD_VAR 0 6
71795: PPUSH
71796: LD_VAR 0 7
71800: PPUSH
71801: LD_VAR 0 8
71805: PPUSH
71806: LD_VAR 0 9
71810: PPUSH
71811: LD_VAR 0 4
71815: PPUSH
71816: LD_VAR 0 5
71820: PPUSH
71821: CALL 73082 0 6
71825: GO 71903
71827: LD_INT 303
71829: DOUBLE
71830: EQUAL
71831: IFTRUE 71835
71833: GO 71872
71835: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
71836: LD_VAR 0 6
71840: PPUSH
71841: LD_VAR 0 7
71845: PPUSH
71846: LD_VAR 0 8
71850: PPUSH
71851: LD_VAR 0 9
71855: PPUSH
71856: LD_VAR 0 4
71860: PPUSH
71861: LD_VAR 0 5
71865: PPUSH
71866: CALL 71908 0 6
71870: GO 71903
71872: LD_INT 304
71874: DOUBLE
71875: EQUAL
71876: IFTRUE 71880
71878: GO 71902
71880: POP
// hHackTeleport ( unit , x , y ) ; end ;
71881: LD_VAR 0 2
71885: PPUSH
71886: LD_VAR 0 4
71890: PPUSH
71891: LD_VAR 0 5
71895: PPUSH
71896: CALL 73675 0 3
71900: GO 71903
71902: POP
// end ;
71903: LD_VAR 0 12
71907: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
71908: LD_INT 0
71910: PPUSH
71911: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
71912: LD_VAR 0 1
71916: PUSH
71917: LD_INT 1
71919: LESS
71920: PUSH
71921: LD_VAR 0 1
71925: PUSH
71926: LD_INT 3
71928: GREATER
71929: OR
71930: PUSH
71931: LD_VAR 0 5
71935: PPUSH
71936: LD_VAR 0 6
71940: PPUSH
71941: CALL_OW 428
71945: OR
71946: IFFALSE 71950
// exit ;
71948: GO 72678
// uc_side := your_side ;
71950: LD_ADDR_OWVAR 20
71954: PUSH
71955: LD_OWVAR 2
71959: ST_TO_ADDR
// uc_nation := nation ;
71960: LD_ADDR_OWVAR 21
71964: PUSH
71965: LD_VAR 0 1
71969: ST_TO_ADDR
// bc_level = 1 ;
71970: LD_ADDR_OWVAR 43
71974: PUSH
71975: LD_INT 1
71977: ST_TO_ADDR
// case btype of 1 :
71978: LD_VAR 0 2
71982: PUSH
71983: LD_INT 1
71985: DOUBLE
71986: EQUAL
71987: IFTRUE 71991
71989: GO 72002
71991: POP
// bc_type := b_depot ; 2 :
71992: LD_ADDR_OWVAR 42
71996: PUSH
71997: LD_INT 0
71999: ST_TO_ADDR
72000: GO 72622
72002: LD_INT 2
72004: DOUBLE
72005: EQUAL
72006: IFTRUE 72010
72008: GO 72021
72010: POP
// bc_type := b_warehouse ; 3 :
72011: LD_ADDR_OWVAR 42
72015: PUSH
72016: LD_INT 1
72018: ST_TO_ADDR
72019: GO 72622
72021: LD_INT 3
72023: DOUBLE
72024: EQUAL
72025: IFTRUE 72029
72027: GO 72040
72029: POP
// bc_type := b_lab ; 4 .. 9 :
72030: LD_ADDR_OWVAR 42
72034: PUSH
72035: LD_INT 6
72037: ST_TO_ADDR
72038: GO 72622
72040: LD_INT 4
72042: DOUBLE
72043: GREATEREQUAL
72044: IFFALSE 72052
72046: LD_INT 9
72048: DOUBLE
72049: LESSEQUAL
72050: IFTRUE 72054
72052: GO 72114
72054: POP
// begin bc_type := b_lab_half ;
72055: LD_ADDR_OWVAR 42
72059: PUSH
72060: LD_INT 7
72062: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72063: LD_ADDR_OWVAR 44
72067: PUSH
72068: LD_INT 10
72070: PUSH
72071: LD_INT 11
72073: PUSH
72074: LD_INT 12
72076: PUSH
72077: LD_INT 15
72079: PUSH
72080: LD_INT 14
72082: PUSH
72083: LD_INT 13
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: PUSH
72094: LD_VAR 0 2
72098: PUSH
72099: LD_INT 3
72101: MINUS
72102: ARRAY
72103: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72104: LD_ADDR_OWVAR 45
72108: PUSH
72109: LD_INT 9
72111: ST_TO_ADDR
// end ; 10 .. 13 :
72112: GO 72622
72114: LD_INT 10
72116: DOUBLE
72117: GREATEREQUAL
72118: IFFALSE 72126
72120: LD_INT 13
72122: DOUBLE
72123: LESSEQUAL
72124: IFTRUE 72128
72126: GO 72205
72128: POP
// begin bc_type := b_lab_full ;
72129: LD_ADDR_OWVAR 42
72133: PUSH
72134: LD_INT 8
72136: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72137: LD_ADDR_OWVAR 44
72141: PUSH
72142: LD_INT 10
72144: PUSH
72145: LD_INT 12
72147: PUSH
72148: LD_INT 14
72150: PUSH
72151: LD_INT 13
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: LIST
72158: LIST
72159: PUSH
72160: LD_VAR 0 2
72164: PUSH
72165: LD_INT 9
72167: MINUS
72168: ARRAY
72169: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72170: LD_ADDR_OWVAR 45
72174: PUSH
72175: LD_INT 11
72177: PUSH
72178: LD_INT 15
72180: PUSH
72181: LD_INT 12
72183: PUSH
72184: LD_INT 15
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: PUSH
72193: LD_VAR 0 2
72197: PUSH
72198: LD_INT 9
72200: MINUS
72201: ARRAY
72202: ST_TO_ADDR
// end ; 14 :
72203: GO 72622
72205: LD_INT 14
72207: DOUBLE
72208: EQUAL
72209: IFTRUE 72213
72211: GO 72224
72213: POP
// bc_type := b_workshop ; 15 :
72214: LD_ADDR_OWVAR 42
72218: PUSH
72219: LD_INT 2
72221: ST_TO_ADDR
72222: GO 72622
72224: LD_INT 15
72226: DOUBLE
72227: EQUAL
72228: IFTRUE 72232
72230: GO 72243
72232: POP
// bc_type := b_factory ; 16 :
72233: LD_ADDR_OWVAR 42
72237: PUSH
72238: LD_INT 3
72240: ST_TO_ADDR
72241: GO 72622
72243: LD_INT 16
72245: DOUBLE
72246: EQUAL
72247: IFTRUE 72251
72249: GO 72262
72251: POP
// bc_type := b_ext_gun ; 17 :
72252: LD_ADDR_OWVAR 42
72256: PUSH
72257: LD_INT 17
72259: ST_TO_ADDR
72260: GO 72622
72262: LD_INT 17
72264: DOUBLE
72265: EQUAL
72266: IFTRUE 72270
72268: GO 72298
72270: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72271: LD_ADDR_OWVAR 42
72275: PUSH
72276: LD_INT 19
72278: PUSH
72279: LD_INT 23
72281: PUSH
72282: LD_INT 19
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PUSH
72290: LD_VAR 0 1
72294: ARRAY
72295: ST_TO_ADDR
72296: GO 72622
72298: LD_INT 18
72300: DOUBLE
72301: EQUAL
72302: IFTRUE 72306
72304: GO 72317
72306: POP
// bc_type := b_ext_radar ; 19 :
72307: LD_ADDR_OWVAR 42
72311: PUSH
72312: LD_INT 20
72314: ST_TO_ADDR
72315: GO 72622
72317: LD_INT 19
72319: DOUBLE
72320: EQUAL
72321: IFTRUE 72325
72323: GO 72336
72325: POP
// bc_type := b_ext_radio ; 20 :
72326: LD_ADDR_OWVAR 42
72330: PUSH
72331: LD_INT 22
72333: ST_TO_ADDR
72334: GO 72622
72336: LD_INT 20
72338: DOUBLE
72339: EQUAL
72340: IFTRUE 72344
72342: GO 72355
72344: POP
// bc_type := b_ext_siberium ; 21 :
72345: LD_ADDR_OWVAR 42
72349: PUSH
72350: LD_INT 21
72352: ST_TO_ADDR
72353: GO 72622
72355: LD_INT 21
72357: DOUBLE
72358: EQUAL
72359: IFTRUE 72363
72361: GO 72374
72363: POP
// bc_type := b_ext_computer ; 22 :
72364: LD_ADDR_OWVAR 42
72368: PUSH
72369: LD_INT 24
72371: ST_TO_ADDR
72372: GO 72622
72374: LD_INT 22
72376: DOUBLE
72377: EQUAL
72378: IFTRUE 72382
72380: GO 72393
72382: POP
// bc_type := b_ext_track ; 23 :
72383: LD_ADDR_OWVAR 42
72387: PUSH
72388: LD_INT 16
72390: ST_TO_ADDR
72391: GO 72622
72393: LD_INT 23
72395: DOUBLE
72396: EQUAL
72397: IFTRUE 72401
72399: GO 72412
72401: POP
// bc_type := b_ext_laser ; 24 :
72402: LD_ADDR_OWVAR 42
72406: PUSH
72407: LD_INT 25
72409: ST_TO_ADDR
72410: GO 72622
72412: LD_INT 24
72414: DOUBLE
72415: EQUAL
72416: IFTRUE 72420
72418: GO 72431
72420: POP
// bc_type := b_control_tower ; 25 :
72421: LD_ADDR_OWVAR 42
72425: PUSH
72426: LD_INT 36
72428: ST_TO_ADDR
72429: GO 72622
72431: LD_INT 25
72433: DOUBLE
72434: EQUAL
72435: IFTRUE 72439
72437: GO 72450
72439: POP
// bc_type := b_breastwork ; 26 :
72440: LD_ADDR_OWVAR 42
72444: PUSH
72445: LD_INT 31
72447: ST_TO_ADDR
72448: GO 72622
72450: LD_INT 26
72452: DOUBLE
72453: EQUAL
72454: IFTRUE 72458
72456: GO 72469
72458: POP
// bc_type := b_bunker ; 27 :
72459: LD_ADDR_OWVAR 42
72463: PUSH
72464: LD_INT 32
72466: ST_TO_ADDR
72467: GO 72622
72469: LD_INT 27
72471: DOUBLE
72472: EQUAL
72473: IFTRUE 72477
72475: GO 72488
72477: POP
// bc_type := b_turret ; 28 :
72478: LD_ADDR_OWVAR 42
72482: PUSH
72483: LD_INT 33
72485: ST_TO_ADDR
72486: GO 72622
72488: LD_INT 28
72490: DOUBLE
72491: EQUAL
72492: IFTRUE 72496
72494: GO 72507
72496: POP
// bc_type := b_armoury ; 29 :
72497: LD_ADDR_OWVAR 42
72501: PUSH
72502: LD_INT 4
72504: ST_TO_ADDR
72505: GO 72622
72507: LD_INT 29
72509: DOUBLE
72510: EQUAL
72511: IFTRUE 72515
72513: GO 72526
72515: POP
// bc_type := b_barracks ; 30 :
72516: LD_ADDR_OWVAR 42
72520: PUSH
72521: LD_INT 5
72523: ST_TO_ADDR
72524: GO 72622
72526: LD_INT 30
72528: DOUBLE
72529: EQUAL
72530: IFTRUE 72534
72532: GO 72545
72534: POP
// bc_type := b_solar_power ; 31 :
72535: LD_ADDR_OWVAR 42
72539: PUSH
72540: LD_INT 27
72542: ST_TO_ADDR
72543: GO 72622
72545: LD_INT 31
72547: DOUBLE
72548: EQUAL
72549: IFTRUE 72553
72551: GO 72564
72553: POP
// bc_type := b_oil_power ; 32 :
72554: LD_ADDR_OWVAR 42
72558: PUSH
72559: LD_INT 26
72561: ST_TO_ADDR
72562: GO 72622
72564: LD_INT 32
72566: DOUBLE
72567: EQUAL
72568: IFTRUE 72572
72570: GO 72583
72572: POP
// bc_type := b_siberite_power ; 33 :
72573: LD_ADDR_OWVAR 42
72577: PUSH
72578: LD_INT 28
72580: ST_TO_ADDR
72581: GO 72622
72583: LD_INT 33
72585: DOUBLE
72586: EQUAL
72587: IFTRUE 72591
72589: GO 72602
72591: POP
// bc_type := b_oil_mine ; 34 :
72592: LD_ADDR_OWVAR 42
72596: PUSH
72597: LD_INT 29
72599: ST_TO_ADDR
72600: GO 72622
72602: LD_INT 34
72604: DOUBLE
72605: EQUAL
72606: IFTRUE 72610
72608: GO 72621
72610: POP
// bc_type := b_siberite_mine ; end ;
72611: LD_ADDR_OWVAR 42
72615: PUSH
72616: LD_INT 30
72618: ST_TO_ADDR
72619: GO 72622
72621: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
72622: LD_ADDR_VAR 0 8
72626: PUSH
72627: LD_VAR 0 5
72631: PPUSH
72632: LD_VAR 0 6
72636: PPUSH
72637: LD_VAR 0 3
72641: PPUSH
72642: CALL_OW 47
72646: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
72647: LD_OWVAR 42
72651: PUSH
72652: LD_INT 32
72654: PUSH
72655: LD_INT 33
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: IN
72662: IFFALSE 72678
// PlaceWeaponTurret ( b , weapon ) ;
72664: LD_VAR 0 8
72668: PPUSH
72669: LD_VAR 0 4
72673: PPUSH
72674: CALL_OW 431
// end ;
72678: LD_VAR 0 7
72682: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
72683: LD_INT 0
72685: PPUSH
72686: PPUSH
72687: PPUSH
72688: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
72689: LD_ADDR_VAR 0 4
72693: PUSH
72694: LD_INT 22
72696: PUSH
72697: LD_OWVAR 2
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 2
72708: PUSH
72709: LD_INT 30
72711: PUSH
72712: LD_INT 0
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 30
72721: PUSH
72722: LD_INT 1
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: LIST
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PPUSH
72738: CALL_OW 69
72742: ST_TO_ADDR
// if not tmp then
72743: LD_VAR 0 4
72747: NOT
72748: IFFALSE 72752
// exit ;
72750: GO 72811
// for i in tmp do
72752: LD_ADDR_VAR 0 2
72756: PUSH
72757: LD_VAR 0 4
72761: PUSH
72762: FOR_IN
72763: IFFALSE 72809
// for j = 1 to 3 do
72765: LD_ADDR_VAR 0 3
72769: PUSH
72770: DOUBLE
72771: LD_INT 1
72773: DEC
72774: ST_TO_ADDR
72775: LD_INT 3
72777: PUSH
72778: FOR_TO
72779: IFFALSE 72805
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
72781: LD_VAR 0 2
72785: PPUSH
72786: CALL_OW 274
72790: PPUSH
72791: LD_VAR 0 3
72795: PPUSH
72796: LD_INT 99999
72798: PPUSH
72799: CALL_OW 277
72803: GO 72778
72805: POP
72806: POP
72807: GO 72762
72809: POP
72810: POP
// end ;
72811: LD_VAR 0 1
72815: RET
// export function hHackSetLevel10 ; var i , j ; begin
72816: LD_INT 0
72818: PPUSH
72819: PPUSH
72820: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
72821: LD_ADDR_VAR 0 2
72825: PUSH
72826: LD_INT 21
72828: PUSH
72829: LD_INT 1
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PPUSH
72836: CALL_OW 69
72840: PUSH
72841: FOR_IN
72842: IFFALSE 72894
// if IsSelected ( i ) then
72844: LD_VAR 0 2
72848: PPUSH
72849: CALL_OW 306
72853: IFFALSE 72892
// begin for j := 1 to 4 do
72855: LD_ADDR_VAR 0 3
72859: PUSH
72860: DOUBLE
72861: LD_INT 1
72863: DEC
72864: ST_TO_ADDR
72865: LD_INT 4
72867: PUSH
72868: FOR_TO
72869: IFFALSE 72890
// SetSkill ( i , j , 10 ) ;
72871: LD_VAR 0 2
72875: PPUSH
72876: LD_VAR 0 3
72880: PPUSH
72881: LD_INT 10
72883: PPUSH
72884: CALL_OW 237
72888: GO 72868
72890: POP
72891: POP
// end ;
72892: GO 72841
72894: POP
72895: POP
// end ;
72896: LD_VAR 0 1
72900: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
72901: LD_INT 0
72903: PPUSH
72904: PPUSH
72905: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
72906: LD_ADDR_VAR 0 2
72910: PUSH
72911: LD_INT 22
72913: PUSH
72914: LD_OWVAR 2
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 21
72925: PUSH
72926: LD_INT 1
72928: PUSH
72929: EMPTY
72930: LIST
72931: LIST
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PPUSH
72937: CALL_OW 69
72941: PUSH
72942: FOR_IN
72943: IFFALSE 72984
// begin for j := 1 to 4 do
72945: LD_ADDR_VAR 0 3
72949: PUSH
72950: DOUBLE
72951: LD_INT 1
72953: DEC
72954: ST_TO_ADDR
72955: LD_INT 4
72957: PUSH
72958: FOR_TO
72959: IFFALSE 72980
// SetSkill ( i , j , 10 ) ;
72961: LD_VAR 0 2
72965: PPUSH
72966: LD_VAR 0 3
72970: PPUSH
72971: LD_INT 10
72973: PPUSH
72974: CALL_OW 237
72978: GO 72958
72980: POP
72981: POP
// end ;
72982: GO 72942
72984: POP
72985: POP
// end ;
72986: LD_VAR 0 1
72990: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
72991: LD_INT 0
72993: PPUSH
// uc_side := your_side ;
72994: LD_ADDR_OWVAR 20
72998: PUSH
72999: LD_OWVAR 2
73003: ST_TO_ADDR
// uc_nation := nation ;
73004: LD_ADDR_OWVAR 21
73008: PUSH
73009: LD_VAR 0 1
73013: ST_TO_ADDR
// InitHc ;
73014: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73018: LD_INT 0
73020: PPUSH
73021: LD_VAR 0 2
73025: PPUSH
73026: LD_VAR 0 3
73030: PPUSH
73031: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73035: LD_VAR 0 4
73039: PPUSH
73040: LD_VAR 0 5
73044: PPUSH
73045: CALL_OW 428
73049: PUSH
73050: LD_INT 0
73052: EQUAL
73053: IFFALSE 73077
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73055: CALL_OW 44
73059: PPUSH
73060: LD_VAR 0 4
73064: PPUSH
73065: LD_VAR 0 5
73069: PPUSH
73070: LD_INT 1
73072: PPUSH
73073: CALL_OW 48
// end ;
73077: LD_VAR 0 6
73081: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73082: LD_INT 0
73084: PPUSH
73085: PPUSH
// uc_side := your_side ;
73086: LD_ADDR_OWVAR 20
73090: PUSH
73091: LD_OWVAR 2
73095: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73096: LD_VAR 0 1
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: LD_INT 2
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: LD_INT 4
73112: PUSH
73113: LD_INT 5
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: LIST
73120: LIST
73121: LIST
73122: IN
73123: IFFALSE 73135
// uc_nation := nation_american else
73125: LD_ADDR_OWVAR 21
73129: PUSH
73130: LD_INT 1
73132: ST_TO_ADDR
73133: GO 73178
// if chassis in [ 11 , 12 , 13 , 14 ] then
73135: LD_VAR 0 1
73139: PUSH
73140: LD_INT 11
73142: PUSH
73143: LD_INT 12
73145: PUSH
73146: LD_INT 13
73148: PUSH
73149: LD_INT 14
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: IN
73158: IFFALSE 73170
// uc_nation := nation_arabian else
73160: LD_ADDR_OWVAR 21
73164: PUSH
73165: LD_INT 2
73167: ST_TO_ADDR
73168: GO 73178
// uc_nation := nation_russian ;
73170: LD_ADDR_OWVAR 21
73174: PUSH
73175: LD_INT 3
73177: ST_TO_ADDR
// vc_chassis := chassis ;
73178: LD_ADDR_OWVAR 37
73182: PUSH
73183: LD_VAR 0 1
73187: ST_TO_ADDR
// vc_engine := engine ;
73188: LD_ADDR_OWVAR 39
73192: PUSH
73193: LD_VAR 0 2
73197: ST_TO_ADDR
// vc_control := control ;
73198: LD_ADDR_OWVAR 38
73202: PUSH
73203: LD_VAR 0 3
73207: ST_TO_ADDR
// vc_weapon := weapon ;
73208: LD_ADDR_OWVAR 40
73212: PUSH
73213: LD_VAR 0 4
73217: ST_TO_ADDR
// un := CreateVehicle ;
73218: LD_ADDR_VAR 0 8
73222: PUSH
73223: CALL_OW 45
73227: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73228: LD_VAR 0 8
73232: PPUSH
73233: LD_INT 0
73235: PPUSH
73236: LD_INT 5
73238: PPUSH
73239: CALL_OW 12
73243: PPUSH
73244: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73248: LD_VAR 0 8
73252: PPUSH
73253: LD_VAR 0 5
73257: PPUSH
73258: LD_VAR 0 6
73262: PPUSH
73263: LD_INT 1
73265: PPUSH
73266: CALL_OW 48
// end ;
73270: LD_VAR 0 7
73274: RET
// export hInvincible ; every 1 do
73275: GO 73277
73277: DISABLE
// hInvincible := [ ] ;
73278: LD_ADDR_EXP 108
73282: PUSH
73283: EMPTY
73284: ST_TO_ADDR
73285: END
// every 10 do var i ;
73286: GO 73288
73288: DISABLE
73289: LD_INT 0
73291: PPUSH
// begin enable ;
73292: ENABLE
// if not hInvincible then
73293: LD_EXP 108
73297: NOT
73298: IFFALSE 73302
// exit ;
73300: GO 73346
// for i in hInvincible do
73302: LD_ADDR_VAR 0 1
73306: PUSH
73307: LD_EXP 108
73311: PUSH
73312: FOR_IN
73313: IFFALSE 73344
// if GetLives ( i ) < 1000 then
73315: LD_VAR 0 1
73319: PPUSH
73320: CALL_OW 256
73324: PUSH
73325: LD_INT 1000
73327: LESS
73328: IFFALSE 73342
// SetLives ( i , 1000 ) ;
73330: LD_VAR 0 1
73334: PPUSH
73335: LD_INT 1000
73337: PPUSH
73338: CALL_OW 234
73342: GO 73312
73344: POP
73345: POP
// end ;
73346: PPOPN 1
73348: END
// export function hHackInvincible ; var i ; begin
73349: LD_INT 0
73351: PPUSH
73352: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73353: LD_ADDR_VAR 0 2
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: LD_INT 21
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 21
73373: PUSH
73374: LD_INT 2
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: LIST
73385: PPUSH
73386: CALL_OW 69
73390: PUSH
73391: FOR_IN
73392: IFFALSE 73453
// if IsSelected ( i ) then
73394: LD_VAR 0 2
73398: PPUSH
73399: CALL_OW 306
73403: IFFALSE 73451
// begin if i in hInvincible then
73405: LD_VAR 0 2
73409: PUSH
73410: LD_EXP 108
73414: IN
73415: IFFALSE 73435
// hInvincible := hInvincible diff i else
73417: LD_ADDR_EXP 108
73421: PUSH
73422: LD_EXP 108
73426: PUSH
73427: LD_VAR 0 2
73431: DIFF
73432: ST_TO_ADDR
73433: GO 73451
// hInvincible := hInvincible union i ;
73435: LD_ADDR_EXP 108
73439: PUSH
73440: LD_EXP 108
73444: PUSH
73445: LD_VAR 0 2
73449: UNION
73450: ST_TO_ADDR
// end ;
73451: GO 73391
73453: POP
73454: POP
// end ;
73455: LD_VAR 0 1
73459: RET
// export function hHackInvisible ; var i , j ; begin
73460: LD_INT 0
73462: PPUSH
73463: PPUSH
73464: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73465: LD_ADDR_VAR 0 2
73469: PUSH
73470: LD_INT 21
73472: PUSH
73473: LD_INT 1
73475: PUSH
73476: EMPTY
73477: LIST
73478: LIST
73479: PPUSH
73480: CALL_OW 69
73484: PUSH
73485: FOR_IN
73486: IFFALSE 73510
// if IsSelected ( i ) then
73488: LD_VAR 0 2
73492: PPUSH
73493: CALL_OW 306
73497: IFFALSE 73508
// ComForceInvisible ( i ) ;
73499: LD_VAR 0 2
73503: PPUSH
73504: CALL_OW 496
73508: GO 73485
73510: POP
73511: POP
// end ;
73512: LD_VAR 0 1
73516: RET
// export function hHackChangeYourSide ; begin
73517: LD_INT 0
73519: PPUSH
// if your_side = 8 then
73520: LD_OWVAR 2
73524: PUSH
73525: LD_INT 8
73527: EQUAL
73528: IFFALSE 73540
// your_side := 0 else
73530: LD_ADDR_OWVAR 2
73534: PUSH
73535: LD_INT 0
73537: ST_TO_ADDR
73538: GO 73554
// your_side := your_side + 1 ;
73540: LD_ADDR_OWVAR 2
73544: PUSH
73545: LD_OWVAR 2
73549: PUSH
73550: LD_INT 1
73552: PLUS
73553: ST_TO_ADDR
// end ;
73554: LD_VAR 0 1
73558: RET
// export function hHackChangeUnitSide ; var i , j ; begin
73559: LD_INT 0
73561: PPUSH
73562: PPUSH
73563: PPUSH
// for i in all_units do
73564: LD_ADDR_VAR 0 2
73568: PUSH
73569: LD_OWVAR 3
73573: PUSH
73574: FOR_IN
73575: IFFALSE 73653
// if IsSelected ( i ) then
73577: LD_VAR 0 2
73581: PPUSH
73582: CALL_OW 306
73586: IFFALSE 73651
// begin j := GetSide ( i ) ;
73588: LD_ADDR_VAR 0 3
73592: PUSH
73593: LD_VAR 0 2
73597: PPUSH
73598: CALL_OW 255
73602: ST_TO_ADDR
// if j = 8 then
73603: LD_VAR 0 3
73607: PUSH
73608: LD_INT 8
73610: EQUAL
73611: IFFALSE 73623
// j := 0 else
73613: LD_ADDR_VAR 0 3
73617: PUSH
73618: LD_INT 0
73620: ST_TO_ADDR
73621: GO 73637
// j := j + 1 ;
73623: LD_ADDR_VAR 0 3
73627: PUSH
73628: LD_VAR 0 3
73632: PUSH
73633: LD_INT 1
73635: PLUS
73636: ST_TO_ADDR
// SetSide ( i , j ) ;
73637: LD_VAR 0 2
73641: PPUSH
73642: LD_VAR 0 3
73646: PPUSH
73647: CALL_OW 235
// end ;
73651: GO 73574
73653: POP
73654: POP
// end ;
73655: LD_VAR 0 1
73659: RET
// export function hHackFog ; begin
73660: LD_INT 0
73662: PPUSH
// FogOff ( true ) ;
73663: LD_INT 1
73665: PPUSH
73666: CALL_OW 344
// end ;
73670: LD_VAR 0 1
73674: RET
// export function hHackTeleport ( unit , x , y ) ; begin
73675: LD_INT 0
73677: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
73678: LD_VAR 0 1
73682: PPUSH
73683: LD_VAR 0 2
73687: PPUSH
73688: LD_VAR 0 3
73692: PPUSH
73693: LD_INT 1
73695: PPUSH
73696: LD_INT 1
73698: PPUSH
73699: CALL_OW 483
// CenterOnXY ( x , y ) ;
73703: LD_VAR 0 2
73707: PPUSH
73708: LD_VAR 0 3
73712: PPUSH
73713: CALL_OW 84
// end ;
73717: LD_VAR 0 4
73721: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
73722: LD_INT 0
73724: PPUSH
73725: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
73726: LD_VAR 0 1
73730: NOT
73731: PUSH
73732: LD_VAR 0 2
73736: PPUSH
73737: LD_VAR 0 3
73741: PPUSH
73742: CALL_OW 488
73746: NOT
73747: OR
73748: PUSH
73749: LD_VAR 0 1
73753: PPUSH
73754: CALL_OW 266
73758: PUSH
73759: LD_INT 3
73761: NONEQUAL
73762: PUSH
73763: LD_VAR 0 1
73767: PPUSH
73768: CALL_OW 247
73772: PUSH
73773: LD_INT 1
73775: EQUAL
73776: NOT
73777: AND
73778: OR
73779: IFFALSE 73783
// exit ;
73781: GO 73932
// if GetType ( factory ) = unit_human then
73783: LD_VAR 0 1
73787: PPUSH
73788: CALL_OW 247
73792: PUSH
73793: LD_INT 1
73795: EQUAL
73796: IFFALSE 73813
// factory := IsInUnit ( factory ) ;
73798: LD_ADDR_VAR 0 1
73802: PUSH
73803: LD_VAR 0 1
73807: PPUSH
73808: CALL_OW 310
73812: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
73813: LD_VAR 0 1
73817: PPUSH
73818: CALL_OW 266
73822: PUSH
73823: LD_INT 3
73825: NONEQUAL
73826: IFFALSE 73830
// exit ;
73828: GO 73932
// if HexInfo ( x , y ) = factory then
73830: LD_VAR 0 2
73834: PPUSH
73835: LD_VAR 0 3
73839: PPUSH
73840: CALL_OW 428
73844: PUSH
73845: LD_VAR 0 1
73849: EQUAL
73850: IFFALSE 73877
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
73852: LD_ADDR_EXP 109
73856: PUSH
73857: LD_EXP 109
73861: PPUSH
73862: LD_VAR 0 1
73866: PPUSH
73867: LD_INT 0
73869: PPUSH
73870: CALL_OW 1
73874: ST_TO_ADDR
73875: GO 73928
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
73877: LD_ADDR_EXP 109
73881: PUSH
73882: LD_EXP 109
73886: PPUSH
73887: LD_VAR 0 1
73891: PPUSH
73892: LD_VAR 0 1
73896: PPUSH
73897: CALL_OW 255
73901: PUSH
73902: LD_VAR 0 1
73906: PUSH
73907: LD_VAR 0 2
73911: PUSH
73912: LD_VAR 0 3
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: PPUSH
73923: CALL_OW 1
73927: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73928: CALL 73937 0 0
// end ;
73932: LD_VAR 0 4
73936: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
73937: LD_INT 0
73939: PPUSH
73940: PPUSH
73941: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73942: LD_STRING resetFactoryWaypoint();
73944: PPUSH
73945: CALL_OW 559
// if factoryWaypoints then
73949: LD_EXP 109
73953: IFFALSE 74079
// begin list := PrepareArray ( factoryWaypoints ) ;
73955: LD_ADDR_VAR 0 3
73959: PUSH
73960: LD_EXP 109
73964: PPUSH
73965: CALL 58459 0 1
73969: ST_TO_ADDR
// for i := 1 to list do
73970: LD_ADDR_VAR 0 2
73974: PUSH
73975: DOUBLE
73976: LD_INT 1
73978: DEC
73979: ST_TO_ADDR
73980: LD_VAR 0 3
73984: PUSH
73985: FOR_TO
73986: IFFALSE 74077
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
73988: LD_STRING setFactoryWaypointXY(
73990: PUSH
73991: LD_VAR 0 3
73995: PUSH
73996: LD_VAR 0 2
74000: ARRAY
74001: PUSH
74002: LD_INT 1
74004: ARRAY
74005: STR
74006: PUSH
74007: LD_STRING ,
74009: STR
74010: PUSH
74011: LD_VAR 0 3
74015: PUSH
74016: LD_VAR 0 2
74020: ARRAY
74021: PUSH
74022: LD_INT 2
74024: ARRAY
74025: STR
74026: PUSH
74027: LD_STRING ,
74029: STR
74030: PUSH
74031: LD_VAR 0 3
74035: PUSH
74036: LD_VAR 0 2
74040: ARRAY
74041: PUSH
74042: LD_INT 3
74044: ARRAY
74045: STR
74046: PUSH
74047: LD_STRING ,
74049: STR
74050: PUSH
74051: LD_VAR 0 3
74055: PUSH
74056: LD_VAR 0 2
74060: ARRAY
74061: PUSH
74062: LD_INT 4
74064: ARRAY
74065: STR
74066: PUSH
74067: LD_STRING )
74069: STR
74070: PPUSH
74071: CALL_OW 559
74075: GO 73985
74077: POP
74078: POP
// end ; end ;
74079: LD_VAR 0 1
74083: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74084: LD_INT 0
74086: PPUSH
// if HexInfo ( x , y ) = warehouse then
74087: LD_VAR 0 2
74091: PPUSH
74092: LD_VAR 0 3
74096: PPUSH
74097: CALL_OW 428
74101: PUSH
74102: LD_VAR 0 1
74106: EQUAL
74107: IFFALSE 74134
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74109: LD_ADDR_EXP 110
74113: PUSH
74114: LD_EXP 110
74118: PPUSH
74119: LD_VAR 0 1
74123: PPUSH
74124: LD_INT 0
74126: PPUSH
74127: CALL_OW 1
74131: ST_TO_ADDR
74132: GO 74185
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74134: LD_ADDR_EXP 110
74138: PUSH
74139: LD_EXP 110
74143: PPUSH
74144: LD_VAR 0 1
74148: PPUSH
74149: LD_VAR 0 1
74153: PPUSH
74154: CALL_OW 255
74158: PUSH
74159: LD_VAR 0 1
74163: PUSH
74164: LD_VAR 0 2
74168: PUSH
74169: LD_VAR 0 3
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: LIST
74178: LIST
74179: PPUSH
74180: CALL_OW 1
74184: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74185: CALL 74194 0 0
// end ;
74189: LD_VAR 0 4
74193: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74194: LD_INT 0
74196: PPUSH
74197: PPUSH
74198: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74199: LD_STRING resetWarehouseGatheringPoints();
74201: PPUSH
74202: CALL_OW 559
// if warehouseGatheringPoints then
74206: LD_EXP 110
74210: IFFALSE 74336
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74212: LD_ADDR_VAR 0 3
74216: PUSH
74217: LD_EXP 110
74221: PPUSH
74222: CALL 58459 0 1
74226: ST_TO_ADDR
// for i := 1 to list do
74227: LD_ADDR_VAR 0 2
74231: PUSH
74232: DOUBLE
74233: LD_INT 1
74235: DEC
74236: ST_TO_ADDR
74237: LD_VAR 0 3
74241: PUSH
74242: FOR_TO
74243: IFFALSE 74334
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74245: LD_STRING setWarehouseGatheringPointXY(
74247: PUSH
74248: LD_VAR 0 3
74252: PUSH
74253: LD_VAR 0 2
74257: ARRAY
74258: PUSH
74259: LD_INT 1
74261: ARRAY
74262: STR
74263: PUSH
74264: LD_STRING ,
74266: STR
74267: PUSH
74268: LD_VAR 0 3
74272: PUSH
74273: LD_VAR 0 2
74277: ARRAY
74278: PUSH
74279: LD_INT 2
74281: ARRAY
74282: STR
74283: PUSH
74284: LD_STRING ,
74286: STR
74287: PUSH
74288: LD_VAR 0 3
74292: PUSH
74293: LD_VAR 0 2
74297: ARRAY
74298: PUSH
74299: LD_INT 3
74301: ARRAY
74302: STR
74303: PUSH
74304: LD_STRING ,
74306: STR
74307: PUSH
74308: LD_VAR 0 3
74312: PUSH
74313: LD_VAR 0 2
74317: ARRAY
74318: PUSH
74319: LD_INT 4
74321: ARRAY
74322: STR
74323: PUSH
74324: LD_STRING )
74326: STR
74327: PPUSH
74328: CALL_OW 559
74332: GO 74242
74334: POP
74335: POP
// end ; end ;
74336: LD_VAR 0 1
74340: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74341: LD_EXP 110
74345: IFFALSE 75030
74347: GO 74349
74349: DISABLE
74350: LD_INT 0
74352: PPUSH
74353: PPUSH
74354: PPUSH
74355: PPUSH
74356: PPUSH
74357: PPUSH
74358: PPUSH
74359: PPUSH
74360: PPUSH
// begin enable ;
74361: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74362: LD_ADDR_VAR 0 3
74366: PUSH
74367: LD_EXP 110
74371: PPUSH
74372: CALL 58459 0 1
74376: ST_TO_ADDR
// if not list then
74377: LD_VAR 0 3
74381: NOT
74382: IFFALSE 74386
// exit ;
74384: GO 75030
// for i := 1 to list do
74386: LD_ADDR_VAR 0 1
74390: PUSH
74391: DOUBLE
74392: LD_INT 1
74394: DEC
74395: ST_TO_ADDR
74396: LD_VAR 0 3
74400: PUSH
74401: FOR_TO
74402: IFFALSE 75028
// begin depot := list [ i ] [ 2 ] ;
74404: LD_ADDR_VAR 0 8
74408: PUSH
74409: LD_VAR 0 3
74413: PUSH
74414: LD_VAR 0 1
74418: ARRAY
74419: PUSH
74420: LD_INT 2
74422: ARRAY
74423: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74424: LD_ADDR_VAR 0 5
74428: PUSH
74429: LD_VAR 0 3
74433: PUSH
74434: LD_VAR 0 1
74438: ARRAY
74439: PUSH
74440: LD_INT 1
74442: ARRAY
74443: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
74444: LD_VAR 0 8
74448: PPUSH
74449: CALL_OW 301
74453: PUSH
74454: LD_VAR 0 5
74458: PUSH
74459: LD_VAR 0 8
74463: PPUSH
74464: CALL_OW 255
74468: NONEQUAL
74469: OR
74470: IFFALSE 74499
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
74472: LD_ADDR_EXP 110
74476: PUSH
74477: LD_EXP 110
74481: PPUSH
74482: LD_VAR 0 8
74486: PPUSH
74487: LD_INT 0
74489: PPUSH
74490: CALL_OW 1
74494: ST_TO_ADDR
// exit ;
74495: POP
74496: POP
74497: GO 75030
// end ; x := list [ i ] [ 3 ] ;
74499: LD_ADDR_VAR 0 6
74503: PUSH
74504: LD_VAR 0 3
74508: PUSH
74509: LD_VAR 0 1
74513: ARRAY
74514: PUSH
74515: LD_INT 3
74517: ARRAY
74518: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
74519: LD_ADDR_VAR 0 7
74523: PUSH
74524: LD_VAR 0 3
74528: PUSH
74529: LD_VAR 0 1
74533: ARRAY
74534: PUSH
74535: LD_INT 4
74537: ARRAY
74538: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
74539: LD_ADDR_VAR 0 9
74543: PUSH
74544: LD_VAR 0 6
74548: PPUSH
74549: LD_VAR 0 7
74553: PPUSH
74554: LD_INT 16
74556: PPUSH
74557: CALL 57047 0 3
74561: ST_TO_ADDR
// if not cratesNearbyPoint then
74562: LD_VAR 0 9
74566: NOT
74567: IFFALSE 74573
// exit ;
74569: POP
74570: POP
74571: GO 75030
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
74573: LD_ADDR_VAR 0 4
74577: PUSH
74578: LD_INT 22
74580: PUSH
74581: LD_VAR 0 5
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 3
74592: PUSH
74593: LD_INT 60
74595: PUSH
74596: EMPTY
74597: LIST
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 91
74605: PUSH
74606: LD_VAR 0 8
74610: PUSH
74611: LD_INT 6
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: LIST
74618: PUSH
74619: LD_INT 2
74621: PUSH
74622: LD_INT 25
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: EMPTY
74629: LIST
74630: LIST
74631: PUSH
74632: LD_INT 25
74634: PUSH
74635: LD_INT 16
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: EMPTY
74643: LIST
74644: LIST
74645: LIST
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: LIST
74651: LIST
74652: PPUSH
74653: CALL_OW 69
74657: PUSH
74658: LD_VAR 0 8
74662: PPUSH
74663: CALL_OW 313
74667: PPUSH
74668: LD_INT 3
74670: PUSH
74671: LD_INT 60
74673: PUSH
74674: EMPTY
74675: LIST
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 2
74683: PUSH
74684: LD_INT 25
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 25
74696: PUSH
74697: LD_INT 16
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PPUSH
74713: CALL_OW 72
74717: UNION
74718: ST_TO_ADDR
// if tmp then
74719: LD_VAR 0 4
74723: IFFALSE 74803
// begin tmp := ShrinkArray ( tmp , 3 ) ;
74725: LD_ADDR_VAR 0 4
74729: PUSH
74730: LD_VAR 0 4
74734: PPUSH
74735: LD_INT 3
74737: PPUSH
74738: CALL 55016 0 2
74742: ST_TO_ADDR
// for j in tmp do
74743: LD_ADDR_VAR 0 2
74747: PUSH
74748: LD_VAR 0 4
74752: PUSH
74753: FOR_IN
74754: IFFALSE 74797
// begin if IsInUnit ( j ) then
74756: LD_VAR 0 2
74760: PPUSH
74761: CALL_OW 310
74765: IFFALSE 74776
// ComExit ( j ) ;
74767: LD_VAR 0 2
74771: PPUSH
74772: CALL 55099 0 1
// AddComCollect ( j , x , y ) ;
74776: LD_VAR 0 2
74780: PPUSH
74781: LD_VAR 0 6
74785: PPUSH
74786: LD_VAR 0 7
74790: PPUSH
74791: CALL_OW 177
// end ;
74795: GO 74753
74797: POP
74798: POP
// exit ;
74799: POP
74800: POP
74801: GO 75030
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
74803: LD_ADDR_VAR 0 4
74807: PUSH
74808: LD_INT 22
74810: PUSH
74811: LD_VAR 0 5
74815: PUSH
74816: EMPTY
74817: LIST
74818: LIST
74819: PUSH
74820: LD_INT 91
74822: PUSH
74823: LD_VAR 0 8
74827: PUSH
74828: LD_INT 8
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 2
74838: PUSH
74839: LD_INT 34
74841: PUSH
74842: LD_INT 12
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: PUSH
74849: LD_INT 34
74851: PUSH
74852: LD_INT 51
74854: PUSH
74855: EMPTY
74856: LIST
74857: LIST
74858: PUSH
74859: LD_INT 34
74861: PUSH
74862: LD_INT 32
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 34
74871: PUSH
74872: LD_INT 89
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: LIST
74883: LIST
74884: LIST
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: LIST
74890: PPUSH
74891: CALL_OW 69
74895: ST_TO_ADDR
// if tmp then
74896: LD_VAR 0 4
74900: IFFALSE 75026
// begin for j in tmp do
74902: LD_ADDR_VAR 0 2
74906: PUSH
74907: LD_VAR 0 4
74911: PUSH
74912: FOR_IN
74913: IFFALSE 75024
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
74915: LD_VAR 0 2
74919: PPUSH
74920: CALL_OW 262
74924: PUSH
74925: LD_INT 3
74927: EQUAL
74928: PUSH
74929: LD_VAR 0 2
74933: PPUSH
74934: CALL_OW 261
74938: PUSH
74939: LD_INT 20
74941: GREATER
74942: OR
74943: PUSH
74944: LD_VAR 0 2
74948: PPUSH
74949: CALL_OW 314
74953: NOT
74954: AND
74955: PUSH
74956: LD_VAR 0 2
74960: PPUSH
74961: CALL_OW 263
74965: PUSH
74966: LD_INT 1
74968: NONEQUAL
74969: PUSH
74970: LD_VAR 0 2
74974: PPUSH
74975: CALL_OW 311
74979: OR
74980: AND
74981: IFFALSE 75022
// begin ComCollect ( j , x , y ) ;
74983: LD_VAR 0 2
74987: PPUSH
74988: LD_VAR 0 6
74992: PPUSH
74993: LD_VAR 0 7
74997: PPUSH
74998: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75002: LD_VAR 0 2
75006: PPUSH
75007: LD_VAR 0 8
75011: PPUSH
75012: CALL_OW 172
// exit ;
75016: POP
75017: POP
75018: POP
75019: POP
75020: GO 75030
// end ;
75022: GO 74912
75024: POP
75025: POP
// end ; end ;
75026: GO 74401
75028: POP
75029: POP
// end ; end_of_file
75030: PPOPN 9
75032: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75033: LD_VAR 0 1
75037: PPUSH
75038: LD_VAR 0 2
75042: PPUSH
75043: LD_VAR 0 3
75047: PPUSH
75048: LD_VAR 0 4
75052: PPUSH
75053: LD_VAR 0 5
75057: PPUSH
75058: LD_VAR 0 6
75062: PPUSH
75063: CALL 59386 0 6
// end ;
75067: PPOPN 6
75069: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75070: LD_INT 0
75072: PPUSH
// begin if not units then
75073: LD_VAR 0 1
75077: NOT
75078: IFFALSE 75082
// exit ;
75080: GO 75082
// end ;
75082: PPOPN 7
75084: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75085: CALL 59290 0 0
// end ; end_of_file
75089: PPOPN 1
75091: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75092: LD_VAR 0 1
75096: PUSH
75097: LD_INT 200
75099: DOUBLE
75100: GREATEREQUAL
75101: IFFALSE 75109
75103: LD_INT 299
75105: DOUBLE
75106: LESSEQUAL
75107: IFTRUE 75111
75109: GO 75143
75111: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75112: LD_VAR 0 1
75116: PPUSH
75117: LD_VAR 0 2
75121: PPUSH
75122: LD_VAR 0 3
75126: PPUSH
75127: LD_VAR 0 4
75131: PPUSH
75132: LD_VAR 0 5
75136: PPUSH
75137: CALL 75631 0 5
75141: GO 75220
75143: LD_INT 300
75145: DOUBLE
75146: GREATEREQUAL
75147: IFFALSE 75155
75149: LD_INT 399
75151: DOUBLE
75152: LESSEQUAL
75153: IFTRUE 75157
75155: GO 75219
75157: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75158: LD_VAR 0 1
75162: PPUSH
75163: LD_VAR 0 2
75167: PPUSH
75168: LD_VAR 0 3
75172: PPUSH
75173: LD_VAR 0 4
75177: PPUSH
75178: LD_VAR 0 5
75182: PPUSH
75183: LD_VAR 0 6
75187: PPUSH
75188: LD_VAR 0 7
75192: PPUSH
75193: LD_VAR 0 8
75197: PPUSH
75198: LD_VAR 0 9
75202: PPUSH
75203: LD_VAR 0 10
75207: PPUSH
75208: LD_VAR 0 11
75212: PPUSH
75213: CALL 71734 0 11
75217: GO 75220
75219: POP
// end ;
75220: PPOPN 11
75222: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75223: LD_VAR 0 1
75227: PPUSH
75228: LD_VAR 0 2
75232: PPUSH
75233: LD_VAR 0 3
75237: PPUSH
75238: LD_VAR 0 4
75242: PPUSH
75243: LD_VAR 0 5
75247: PPUSH
75248: CALL 75367 0 5
// end ; end_of_file
75252: PPOPN 5
75254: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
75255: LD_INT 0
75257: PPUSH
75258: PPUSH
75259: PPUSH
75260: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
75261: LD_VAR 0 1
75265: PPUSH
75266: CALL_OW 264
75270: PUSH
75271: LD_INT 91
75273: EQUAL
75274: IFFALSE 75346
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75276: LD_INT 68
75278: PPUSH
75279: LD_VAR 0 1
75283: PPUSH
75284: CALL_OW 255
75288: PPUSH
75289: CALL_OW 321
75293: PUSH
75294: LD_INT 2
75296: EQUAL
75297: IFFALSE 75309
// eff := 70 else
75299: LD_ADDR_VAR 0 4
75303: PUSH
75304: LD_INT 70
75306: ST_TO_ADDR
75307: GO 75317
// eff := 30 ;
75309: LD_ADDR_VAR 0 4
75313: PUSH
75314: LD_INT 30
75316: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75317: LD_VAR 0 1
75321: PPUSH
75322: CALL_OW 250
75326: PPUSH
75327: LD_VAR 0 1
75331: PPUSH
75332: CALL_OW 251
75336: PPUSH
75337: LD_VAR 0 4
75341: PPUSH
75342: CALL_OW 495
// end ; end ;
75346: LD_VAR 0 2
75350: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75351: LD_INT 0
75353: PPUSH
// end ;
75354: LD_VAR 0 4
75358: RET
// export function SOS_Command ( cmd ) ; begin
75359: LD_INT 0
75361: PPUSH
// end ;
75362: LD_VAR 0 2
75366: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75367: LD_INT 0
75369: PPUSH
// end ;
75370: LD_VAR 0 6
75374: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
75375: LD_INT 0
75377: PPUSH
75378: PPUSH
// if not vehicle or not factory then
75379: LD_VAR 0 1
75383: NOT
75384: PUSH
75385: LD_VAR 0 2
75389: NOT
75390: OR
75391: IFFALSE 75395
// exit ;
75393: GO 75626
// if factoryWaypoints >= factory then
75395: LD_EXP 109
75399: PUSH
75400: LD_VAR 0 2
75404: GREATEREQUAL
75405: IFFALSE 75626
// if factoryWaypoints [ factory ] then
75407: LD_EXP 109
75411: PUSH
75412: LD_VAR 0 2
75416: ARRAY
75417: IFFALSE 75626
// begin if GetControl ( vehicle ) = control_manual then
75419: LD_VAR 0 1
75423: PPUSH
75424: CALL_OW 263
75428: PUSH
75429: LD_INT 1
75431: EQUAL
75432: IFFALSE 75513
// begin driver := IsDrivenBy ( vehicle ) ;
75434: LD_ADDR_VAR 0 4
75438: PUSH
75439: LD_VAR 0 1
75443: PPUSH
75444: CALL_OW 311
75448: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75449: LD_VAR 0 4
75453: PPUSH
75454: LD_EXP 109
75458: PUSH
75459: LD_VAR 0 2
75463: ARRAY
75464: PUSH
75465: LD_INT 3
75467: ARRAY
75468: PPUSH
75469: LD_EXP 109
75473: PUSH
75474: LD_VAR 0 2
75478: ARRAY
75479: PUSH
75480: LD_INT 4
75482: ARRAY
75483: PPUSH
75484: CALL_OW 171
// AddComExitVehicle ( driver ) ;
75488: LD_VAR 0 4
75492: PPUSH
75493: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
75497: LD_VAR 0 4
75501: PPUSH
75502: LD_VAR 0 2
75506: PPUSH
75507: CALL_OW 180
// end else
75511: GO 75626
// if GetControl ( vehicle ) = control_remote then
75513: LD_VAR 0 1
75517: PPUSH
75518: CALL_OW 263
75522: PUSH
75523: LD_INT 2
75525: EQUAL
75526: IFFALSE 75587
// begin wait ( 0 0$2 ) ;
75528: LD_INT 70
75530: PPUSH
75531: CALL_OW 67
// if Connect ( vehicle ) then
75535: LD_VAR 0 1
75539: PPUSH
75540: CALL 25307 0 1
75544: IFFALSE 75585
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75546: LD_VAR 0 1
75550: PPUSH
75551: LD_EXP 109
75555: PUSH
75556: LD_VAR 0 2
75560: ARRAY
75561: PUSH
75562: LD_INT 3
75564: ARRAY
75565: PPUSH
75566: LD_EXP 109
75570: PUSH
75571: LD_VAR 0 2
75575: ARRAY
75576: PUSH
75577: LD_INT 4
75579: ARRAY
75580: PPUSH
75581: CALL_OW 171
// end else
75585: GO 75626
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
75587: LD_VAR 0 1
75591: PPUSH
75592: LD_EXP 109
75596: PUSH
75597: LD_VAR 0 2
75601: ARRAY
75602: PUSH
75603: LD_INT 3
75605: ARRAY
75606: PPUSH
75607: LD_EXP 109
75611: PUSH
75612: LD_VAR 0 2
75616: ARRAY
75617: PUSH
75618: LD_INT 4
75620: ARRAY
75621: PPUSH
75622: CALL_OW 171
// end ; end ;
75626: LD_VAR 0 3
75630: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
75631: LD_INT 0
75633: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
75634: LD_VAR 0 1
75638: PUSH
75639: LD_INT 250
75641: EQUAL
75642: PUSH
75643: LD_VAR 0 2
75647: PPUSH
75648: CALL_OW 264
75652: PUSH
75653: LD_INT 81
75655: EQUAL
75656: AND
75657: IFFALSE 75678
// MinerPlaceMine ( unit , x , y ) ;
75659: LD_VAR 0 2
75663: PPUSH
75664: LD_VAR 0 4
75668: PPUSH
75669: LD_VAR 0 5
75673: PPUSH
75674: CALL 78668 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
75678: LD_VAR 0 1
75682: PUSH
75683: LD_INT 251
75685: EQUAL
75686: PUSH
75687: LD_VAR 0 2
75691: PPUSH
75692: CALL_OW 264
75696: PUSH
75697: LD_INT 81
75699: EQUAL
75700: AND
75701: IFFALSE 75722
// MinerDetonateMine ( unit , x , y ) ;
75703: LD_VAR 0 2
75707: PPUSH
75708: LD_VAR 0 4
75712: PPUSH
75713: LD_VAR 0 5
75717: PPUSH
75718: CALL 78943 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
75722: LD_VAR 0 1
75726: PUSH
75727: LD_INT 252
75729: EQUAL
75730: PUSH
75731: LD_VAR 0 2
75735: PPUSH
75736: CALL_OW 264
75740: PUSH
75741: LD_INT 81
75743: EQUAL
75744: AND
75745: IFFALSE 75766
// MinerCreateMinefield ( unit , x , y ) ;
75747: LD_VAR 0 2
75751: PPUSH
75752: LD_VAR 0 4
75756: PPUSH
75757: LD_VAR 0 5
75761: PPUSH
75762: CALL 79360 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
75766: LD_VAR 0 1
75770: PUSH
75771: LD_INT 253
75773: EQUAL
75774: PUSH
75775: LD_VAR 0 2
75779: PPUSH
75780: CALL_OW 257
75784: PUSH
75785: LD_INT 5
75787: EQUAL
75788: AND
75789: IFFALSE 75810
// ComBinocular ( unit , x , y ) ;
75791: LD_VAR 0 2
75795: PPUSH
75796: LD_VAR 0 4
75800: PPUSH
75801: LD_VAR 0 5
75805: PPUSH
75806: CALL 79729 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
75810: LD_VAR 0 1
75814: PUSH
75815: LD_INT 254
75817: EQUAL
75818: PUSH
75819: LD_VAR 0 2
75823: PPUSH
75824: CALL_OW 264
75828: PUSH
75829: LD_INT 99
75831: EQUAL
75832: AND
75833: PUSH
75834: LD_VAR 0 3
75838: PPUSH
75839: CALL_OW 263
75843: PUSH
75844: LD_INT 3
75846: EQUAL
75847: AND
75848: IFFALSE 75864
// HackDestroyVehicle ( unit , selectedUnit ) ;
75850: LD_VAR 0 2
75854: PPUSH
75855: LD_VAR 0 3
75859: PPUSH
75860: CALL 78032 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
75864: LD_VAR 0 1
75868: PUSH
75869: LD_INT 255
75871: EQUAL
75872: PUSH
75873: LD_VAR 0 2
75877: PPUSH
75878: CALL_OW 264
75882: PUSH
75883: LD_INT 14
75885: PUSH
75886: LD_INT 53
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: IN
75893: AND
75894: PUSH
75895: LD_VAR 0 4
75899: PPUSH
75900: LD_VAR 0 5
75904: PPUSH
75905: CALL_OW 488
75909: AND
75910: IFFALSE 75934
// CutTreeXYR ( unit , x , y , 12 ) ;
75912: LD_VAR 0 2
75916: PPUSH
75917: LD_VAR 0 4
75921: PPUSH
75922: LD_VAR 0 5
75926: PPUSH
75927: LD_INT 12
75929: PPUSH
75930: CALL 76029 0 4
// if cmd = 256 then
75934: LD_VAR 0 1
75938: PUSH
75939: LD_INT 256
75941: EQUAL
75942: IFFALSE 75963
// SetFactoryWaypoint ( unit , x , y ) ;
75944: LD_VAR 0 2
75948: PPUSH
75949: LD_VAR 0 4
75953: PPUSH
75954: LD_VAR 0 5
75958: PPUSH
75959: CALL 73722 0 3
// if cmd = 257 then
75963: LD_VAR 0 1
75967: PUSH
75968: LD_INT 257
75970: EQUAL
75971: IFFALSE 75992
// SetWarehouseGatheringPoint ( unit , x , y ) ;
75973: LD_VAR 0 2
75977: PPUSH
75978: LD_VAR 0 4
75982: PPUSH
75983: LD_VAR 0 5
75987: PPUSH
75988: CALL 74084 0 3
// if cmd = 258 then
75992: LD_VAR 0 1
75996: PUSH
75997: LD_INT 258
75999: EQUAL
76000: IFFALSE 76024
// BurnTreeXYR ( unit , x , y , 8 ) ;
76002: LD_VAR 0 2
76006: PPUSH
76007: LD_VAR 0 4
76011: PPUSH
76012: LD_VAR 0 5
76016: PPUSH
76017: LD_INT 8
76019: PPUSH
76020: CALL 76423 0 4
// end ;
76024: LD_VAR 0 6
76028: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76029: LD_INT 0
76031: PPUSH
76032: PPUSH
76033: PPUSH
76034: PPUSH
76035: PPUSH
76036: PPUSH
76037: PPUSH
76038: PPUSH
76039: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76040: LD_VAR 0 1
76044: PPUSH
76045: CALL_OW 302
76049: NOT
76050: PUSH
76051: LD_VAR 0 2
76055: PPUSH
76056: LD_VAR 0 3
76060: PPUSH
76061: CALL_OW 488
76065: NOT
76066: OR
76067: PUSH
76068: LD_VAR 0 4
76072: NOT
76073: OR
76074: IFFALSE 76078
// exit ;
76076: GO 76418
// list := [ ] ;
76078: LD_ADDR_VAR 0 13
76082: PUSH
76083: EMPTY
76084: ST_TO_ADDR
// if x - r < 0 then
76085: LD_VAR 0 2
76089: PUSH
76090: LD_VAR 0 4
76094: MINUS
76095: PUSH
76096: LD_INT 0
76098: LESS
76099: IFFALSE 76111
// min_x := 0 else
76101: LD_ADDR_VAR 0 7
76105: PUSH
76106: LD_INT 0
76108: ST_TO_ADDR
76109: GO 76127
// min_x := x - r ;
76111: LD_ADDR_VAR 0 7
76115: PUSH
76116: LD_VAR 0 2
76120: PUSH
76121: LD_VAR 0 4
76125: MINUS
76126: ST_TO_ADDR
// if y - r < 0 then
76127: LD_VAR 0 3
76131: PUSH
76132: LD_VAR 0 4
76136: MINUS
76137: PUSH
76138: LD_INT 0
76140: LESS
76141: IFFALSE 76153
// min_y := 0 else
76143: LD_ADDR_VAR 0 8
76147: PUSH
76148: LD_INT 0
76150: ST_TO_ADDR
76151: GO 76169
// min_y := y - r ;
76153: LD_ADDR_VAR 0 8
76157: PUSH
76158: LD_VAR 0 3
76162: PUSH
76163: LD_VAR 0 4
76167: MINUS
76168: ST_TO_ADDR
// max_x := x + r ;
76169: LD_ADDR_VAR 0 9
76173: PUSH
76174: LD_VAR 0 2
76178: PUSH
76179: LD_VAR 0 4
76183: PLUS
76184: ST_TO_ADDR
// max_y := y + r ;
76185: LD_ADDR_VAR 0 10
76189: PUSH
76190: LD_VAR 0 3
76194: PUSH
76195: LD_VAR 0 4
76199: PLUS
76200: ST_TO_ADDR
// for _x = min_x to max_x do
76201: LD_ADDR_VAR 0 11
76205: PUSH
76206: DOUBLE
76207: LD_VAR 0 7
76211: DEC
76212: ST_TO_ADDR
76213: LD_VAR 0 9
76217: PUSH
76218: FOR_TO
76219: IFFALSE 76336
// for _y = min_y to max_y do
76221: LD_ADDR_VAR 0 12
76225: PUSH
76226: DOUBLE
76227: LD_VAR 0 8
76231: DEC
76232: ST_TO_ADDR
76233: LD_VAR 0 10
76237: PUSH
76238: FOR_TO
76239: IFFALSE 76332
// begin if not ValidHex ( _x , _y ) then
76241: LD_VAR 0 11
76245: PPUSH
76246: LD_VAR 0 12
76250: PPUSH
76251: CALL_OW 488
76255: NOT
76256: IFFALSE 76260
// continue ;
76258: GO 76238
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76260: LD_VAR 0 11
76264: PPUSH
76265: LD_VAR 0 12
76269: PPUSH
76270: CALL_OW 351
76274: PUSH
76275: LD_VAR 0 11
76279: PPUSH
76280: LD_VAR 0 12
76284: PPUSH
76285: CALL_OW 554
76289: AND
76290: IFFALSE 76330
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76292: LD_ADDR_VAR 0 13
76296: PUSH
76297: LD_VAR 0 13
76301: PPUSH
76302: LD_VAR 0 13
76306: PUSH
76307: LD_INT 1
76309: PLUS
76310: PPUSH
76311: LD_VAR 0 11
76315: PUSH
76316: LD_VAR 0 12
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PPUSH
76325: CALL_OW 2
76329: ST_TO_ADDR
// end ;
76330: GO 76238
76332: POP
76333: POP
76334: GO 76218
76336: POP
76337: POP
// if not list then
76338: LD_VAR 0 13
76342: NOT
76343: IFFALSE 76347
// exit ;
76345: GO 76418
// for i in list do
76347: LD_ADDR_VAR 0 6
76351: PUSH
76352: LD_VAR 0 13
76356: PUSH
76357: FOR_IN
76358: IFFALSE 76416
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76360: LD_VAR 0 1
76364: PPUSH
76365: LD_STRING M
76367: PUSH
76368: LD_VAR 0 6
76372: PUSH
76373: LD_INT 1
76375: ARRAY
76376: PUSH
76377: LD_VAR 0 6
76381: PUSH
76382: LD_INT 2
76384: ARRAY
76385: PUSH
76386: LD_INT 0
76388: PUSH
76389: LD_INT 0
76391: PUSH
76392: LD_INT 0
76394: PUSH
76395: LD_INT 0
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: PUSH
76407: EMPTY
76408: LIST
76409: PPUSH
76410: CALL_OW 447
76414: GO 76357
76416: POP
76417: POP
// end ;
76418: LD_VAR 0 5
76422: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76423: LD_INT 0
76425: PPUSH
76426: PPUSH
76427: PPUSH
76428: PPUSH
76429: PPUSH
76430: PPUSH
76431: PPUSH
76432: PPUSH
76433: PPUSH
76434: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76435: LD_VAR 0 1
76439: PPUSH
76440: CALL_OW 302
76444: NOT
76445: PUSH
76446: LD_VAR 0 2
76450: PPUSH
76451: LD_VAR 0 3
76455: PPUSH
76456: CALL_OW 488
76460: NOT
76461: OR
76462: PUSH
76463: LD_VAR 0 4
76467: NOT
76468: OR
76469: IFFALSE 76473
// exit ;
76471: GO 76986
// list := [ ] ;
76473: LD_ADDR_VAR 0 13
76477: PUSH
76478: EMPTY
76479: ST_TO_ADDR
// if x - r < 0 then
76480: LD_VAR 0 2
76484: PUSH
76485: LD_VAR 0 4
76489: MINUS
76490: PUSH
76491: LD_INT 0
76493: LESS
76494: IFFALSE 76506
// min_x := 0 else
76496: LD_ADDR_VAR 0 7
76500: PUSH
76501: LD_INT 0
76503: ST_TO_ADDR
76504: GO 76522
// min_x := x - r ;
76506: LD_ADDR_VAR 0 7
76510: PUSH
76511: LD_VAR 0 2
76515: PUSH
76516: LD_VAR 0 4
76520: MINUS
76521: ST_TO_ADDR
// if y - r < 0 then
76522: LD_VAR 0 3
76526: PUSH
76527: LD_VAR 0 4
76531: MINUS
76532: PUSH
76533: LD_INT 0
76535: LESS
76536: IFFALSE 76548
// min_y := 0 else
76538: LD_ADDR_VAR 0 8
76542: PUSH
76543: LD_INT 0
76545: ST_TO_ADDR
76546: GO 76564
// min_y := y - r ;
76548: LD_ADDR_VAR 0 8
76552: PUSH
76553: LD_VAR 0 3
76557: PUSH
76558: LD_VAR 0 4
76562: MINUS
76563: ST_TO_ADDR
// max_x := x + r ;
76564: LD_ADDR_VAR 0 9
76568: PUSH
76569: LD_VAR 0 2
76573: PUSH
76574: LD_VAR 0 4
76578: PLUS
76579: ST_TO_ADDR
// max_y := y + r ;
76580: LD_ADDR_VAR 0 10
76584: PUSH
76585: LD_VAR 0 3
76589: PUSH
76590: LD_VAR 0 4
76594: PLUS
76595: ST_TO_ADDR
// for _x = min_x to max_x do
76596: LD_ADDR_VAR 0 11
76600: PUSH
76601: DOUBLE
76602: LD_VAR 0 7
76606: DEC
76607: ST_TO_ADDR
76608: LD_VAR 0 9
76612: PUSH
76613: FOR_TO
76614: IFFALSE 76731
// for _y = min_y to max_y do
76616: LD_ADDR_VAR 0 12
76620: PUSH
76621: DOUBLE
76622: LD_VAR 0 8
76626: DEC
76627: ST_TO_ADDR
76628: LD_VAR 0 10
76632: PUSH
76633: FOR_TO
76634: IFFALSE 76727
// begin if not ValidHex ( _x , _y ) then
76636: LD_VAR 0 11
76640: PPUSH
76641: LD_VAR 0 12
76645: PPUSH
76646: CALL_OW 488
76650: NOT
76651: IFFALSE 76655
// continue ;
76653: GO 76633
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76655: LD_VAR 0 11
76659: PPUSH
76660: LD_VAR 0 12
76664: PPUSH
76665: CALL_OW 351
76669: PUSH
76670: LD_VAR 0 11
76674: PPUSH
76675: LD_VAR 0 12
76679: PPUSH
76680: CALL_OW 554
76684: AND
76685: IFFALSE 76725
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76687: LD_ADDR_VAR 0 13
76691: PUSH
76692: LD_VAR 0 13
76696: PPUSH
76697: LD_VAR 0 13
76701: PUSH
76702: LD_INT 1
76704: PLUS
76705: PPUSH
76706: LD_VAR 0 11
76710: PUSH
76711: LD_VAR 0 12
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PPUSH
76720: CALL_OW 2
76724: ST_TO_ADDR
// end ;
76725: GO 76633
76727: POP
76728: POP
76729: GO 76613
76731: POP
76732: POP
// if not list then
76733: LD_VAR 0 13
76737: NOT
76738: IFFALSE 76742
// exit ;
76740: GO 76986
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
76742: LD_ADDR_VAR 0 13
76746: PUSH
76747: LD_VAR 0 1
76751: PPUSH
76752: LD_VAR 0 13
76756: PPUSH
76757: LD_INT 1
76759: PPUSH
76760: LD_INT 1
76762: PPUSH
76763: CALL 22449 0 4
76767: ST_TO_ADDR
// ComStop ( flame ) ;
76768: LD_VAR 0 1
76772: PPUSH
76773: CALL_OW 141
// for i in list do
76777: LD_ADDR_VAR 0 6
76781: PUSH
76782: LD_VAR 0 13
76786: PUSH
76787: FOR_IN
76788: IFFALSE 76819
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
76790: LD_VAR 0 1
76794: PPUSH
76795: LD_VAR 0 6
76799: PUSH
76800: LD_INT 1
76802: ARRAY
76803: PPUSH
76804: LD_VAR 0 6
76808: PUSH
76809: LD_INT 2
76811: ARRAY
76812: PPUSH
76813: CALL_OW 176
76817: GO 76787
76819: POP
76820: POP
// repeat wait ( 0 0$1 ) ;
76821: LD_INT 35
76823: PPUSH
76824: CALL_OW 67
// task := GetTaskList ( flame ) ;
76828: LD_ADDR_VAR 0 14
76832: PUSH
76833: LD_VAR 0 1
76837: PPUSH
76838: CALL_OW 437
76842: ST_TO_ADDR
// if not task then
76843: LD_VAR 0 14
76847: NOT
76848: IFFALSE 76852
// exit ;
76850: GO 76986
// if task [ 1 ] [ 1 ] <> | then
76852: LD_VAR 0 14
76856: PUSH
76857: LD_INT 1
76859: ARRAY
76860: PUSH
76861: LD_INT 1
76863: ARRAY
76864: PUSH
76865: LD_STRING |
76867: NONEQUAL
76868: IFFALSE 76872
// exit ;
76870: GO 76986
// _x := task [ 1 ] [ 2 ] ;
76872: LD_ADDR_VAR 0 11
76876: PUSH
76877: LD_VAR 0 14
76881: PUSH
76882: LD_INT 1
76884: ARRAY
76885: PUSH
76886: LD_INT 2
76888: ARRAY
76889: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
76890: LD_ADDR_VAR 0 12
76894: PUSH
76895: LD_VAR 0 14
76899: PUSH
76900: LD_INT 1
76902: ARRAY
76903: PUSH
76904: LD_INT 3
76906: ARRAY
76907: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
76908: LD_VAR 0 11
76912: PPUSH
76913: LD_VAR 0 12
76917: PPUSH
76918: CALL_OW 351
76922: NOT
76923: PUSH
76924: LD_VAR 0 11
76928: PPUSH
76929: LD_VAR 0 12
76933: PPUSH
76934: CALL_OW 554
76938: NOT
76939: OR
76940: IFFALSE 76974
// begin task := Delete ( task , 1 ) ;
76942: LD_ADDR_VAR 0 14
76946: PUSH
76947: LD_VAR 0 14
76951: PPUSH
76952: LD_INT 1
76954: PPUSH
76955: CALL_OW 3
76959: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
76960: LD_VAR 0 1
76964: PPUSH
76965: LD_VAR 0 14
76969: PPUSH
76970: CALL_OW 446
// end ; until not HasTask ( flame ) ;
76974: LD_VAR 0 1
76978: PPUSH
76979: CALL_OW 314
76983: NOT
76984: IFFALSE 76821
// end ;
76986: LD_VAR 0 5
76990: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
76991: LD_EXP 112
76995: NOT
76996: IFFALSE 77046
76998: GO 77000
77000: DISABLE
// begin initHack := true ;
77001: LD_ADDR_EXP 112
77005: PUSH
77006: LD_INT 1
77008: ST_TO_ADDR
// hackTanks := [ ] ;
77009: LD_ADDR_EXP 113
77013: PUSH
77014: EMPTY
77015: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77016: LD_ADDR_EXP 114
77020: PUSH
77021: EMPTY
77022: ST_TO_ADDR
// hackLimit := 3 ;
77023: LD_ADDR_EXP 115
77027: PUSH
77028: LD_INT 3
77030: ST_TO_ADDR
// hackDist := 12 ;
77031: LD_ADDR_EXP 116
77035: PUSH
77036: LD_INT 12
77038: ST_TO_ADDR
// hackCounter := [ ] ;
77039: LD_ADDR_EXP 117
77043: PUSH
77044: EMPTY
77045: ST_TO_ADDR
// end ;
77046: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77047: LD_EXP 112
77051: PUSH
77052: LD_INT 34
77054: PUSH
77055: LD_INT 99
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PPUSH
77062: CALL_OW 69
77066: AND
77067: IFFALSE 77320
77069: GO 77071
77071: DISABLE
77072: LD_INT 0
77074: PPUSH
77075: PPUSH
// begin enable ;
77076: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77077: LD_ADDR_VAR 0 1
77081: PUSH
77082: LD_INT 34
77084: PUSH
77085: LD_INT 99
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: PPUSH
77092: CALL_OW 69
77096: PUSH
77097: FOR_IN
77098: IFFALSE 77318
// begin if not i in hackTanks then
77100: LD_VAR 0 1
77104: PUSH
77105: LD_EXP 113
77109: IN
77110: NOT
77111: IFFALSE 77194
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77113: LD_ADDR_EXP 113
77117: PUSH
77118: LD_EXP 113
77122: PPUSH
77123: LD_EXP 113
77127: PUSH
77128: LD_INT 1
77130: PLUS
77131: PPUSH
77132: LD_VAR 0 1
77136: PPUSH
77137: CALL_OW 1
77141: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77142: LD_ADDR_EXP 114
77146: PUSH
77147: LD_EXP 114
77151: PPUSH
77152: LD_EXP 114
77156: PUSH
77157: LD_INT 1
77159: PLUS
77160: PPUSH
77161: EMPTY
77162: PPUSH
77163: CALL_OW 1
77167: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77168: LD_ADDR_EXP 117
77172: PUSH
77173: LD_EXP 117
77177: PPUSH
77178: LD_EXP 117
77182: PUSH
77183: LD_INT 1
77185: PLUS
77186: PPUSH
77187: EMPTY
77188: PPUSH
77189: CALL_OW 1
77193: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77194: LD_VAR 0 1
77198: PPUSH
77199: CALL_OW 302
77203: NOT
77204: IFFALSE 77217
// begin HackUnlinkAll ( i ) ;
77206: LD_VAR 0 1
77210: PPUSH
77211: CALL 77323 0 1
// continue ;
77215: GO 77097
// end ; HackCheckCapturedStatus ( i ) ;
77217: LD_VAR 0 1
77221: PPUSH
77222: CALL 77766 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77226: LD_ADDR_VAR 0 2
77230: PUSH
77231: LD_INT 81
77233: PUSH
77234: LD_VAR 0 1
77238: PPUSH
77239: CALL_OW 255
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 33
77250: PUSH
77251: LD_INT 3
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 91
77260: PUSH
77261: LD_VAR 0 1
77265: PUSH
77266: LD_EXP 116
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 50
77278: PUSH
77279: EMPTY
77280: LIST
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: PPUSH
77288: CALL_OW 69
77292: ST_TO_ADDR
// if not tmp then
77293: LD_VAR 0 2
77297: NOT
77298: IFFALSE 77302
// continue ;
77300: GO 77097
// HackLink ( i , tmp ) ;
77302: LD_VAR 0 1
77306: PPUSH
77307: LD_VAR 0 2
77311: PPUSH
77312: CALL 77459 0 2
// end ;
77316: GO 77097
77318: POP
77319: POP
// end ;
77320: PPOPN 2
77322: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77323: LD_INT 0
77325: PPUSH
77326: PPUSH
77327: PPUSH
// if not hack in hackTanks then
77328: LD_VAR 0 1
77332: PUSH
77333: LD_EXP 113
77337: IN
77338: NOT
77339: IFFALSE 77343
// exit ;
77341: GO 77454
// index := GetElementIndex ( hackTanks , hack ) ;
77343: LD_ADDR_VAR 0 4
77347: PUSH
77348: LD_EXP 113
77352: PPUSH
77353: LD_VAR 0 1
77357: PPUSH
77358: CALL 21746 0 2
77362: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77363: LD_EXP 114
77367: PUSH
77368: LD_VAR 0 4
77372: ARRAY
77373: IFFALSE 77454
// begin for i in hackTanksCaptured [ index ] do
77375: LD_ADDR_VAR 0 3
77379: PUSH
77380: LD_EXP 114
77384: PUSH
77385: LD_VAR 0 4
77389: ARRAY
77390: PUSH
77391: FOR_IN
77392: IFFALSE 77418
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77394: LD_VAR 0 3
77398: PUSH
77399: LD_INT 1
77401: ARRAY
77402: PPUSH
77403: LD_VAR 0 3
77407: PUSH
77408: LD_INT 2
77410: ARRAY
77411: PPUSH
77412: CALL_OW 235
77416: GO 77391
77418: POP
77419: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77420: LD_ADDR_EXP 114
77424: PUSH
77425: LD_EXP 114
77429: PPUSH
77430: LD_VAR 0 4
77434: PPUSH
77435: EMPTY
77436: PPUSH
77437: CALL_OW 1
77441: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77442: LD_VAR 0 1
77446: PPUSH
77447: LD_INT 0
77449: PPUSH
77450: CALL_OW 505
// end ; end ;
77454: LD_VAR 0 2
77458: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
77459: LD_INT 0
77461: PPUSH
77462: PPUSH
77463: PPUSH
// if not hack in hackTanks or not vehicles then
77464: LD_VAR 0 1
77468: PUSH
77469: LD_EXP 113
77473: IN
77474: NOT
77475: PUSH
77476: LD_VAR 0 2
77480: NOT
77481: OR
77482: IFFALSE 77486
// exit ;
77484: GO 77761
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
77486: LD_ADDR_VAR 0 2
77490: PUSH
77491: LD_VAR 0 1
77495: PPUSH
77496: LD_VAR 0 2
77500: PPUSH
77501: LD_INT 1
77503: PPUSH
77504: LD_INT 1
77506: PPUSH
77507: CALL 22396 0 4
77511: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
77512: LD_ADDR_VAR 0 5
77516: PUSH
77517: LD_EXP 113
77521: PPUSH
77522: LD_VAR 0 1
77526: PPUSH
77527: CALL 21746 0 2
77531: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
77532: LD_EXP 114
77536: PUSH
77537: LD_VAR 0 5
77541: ARRAY
77542: PUSH
77543: LD_EXP 115
77547: LESS
77548: IFFALSE 77737
// begin for i := 1 to vehicles do
77550: LD_ADDR_VAR 0 4
77554: PUSH
77555: DOUBLE
77556: LD_INT 1
77558: DEC
77559: ST_TO_ADDR
77560: LD_VAR 0 2
77564: PUSH
77565: FOR_TO
77566: IFFALSE 77735
// begin if hackTanksCaptured [ index ] = hackLimit then
77568: LD_EXP 114
77572: PUSH
77573: LD_VAR 0 5
77577: ARRAY
77578: PUSH
77579: LD_EXP 115
77583: EQUAL
77584: IFFALSE 77588
// break ;
77586: GO 77735
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
77588: LD_ADDR_EXP 117
77592: PUSH
77593: LD_EXP 117
77597: PPUSH
77598: LD_VAR 0 5
77602: PPUSH
77603: LD_EXP 117
77607: PUSH
77608: LD_VAR 0 5
77612: ARRAY
77613: PUSH
77614: LD_INT 1
77616: PLUS
77617: PPUSH
77618: CALL_OW 1
77622: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
77623: LD_ADDR_EXP 114
77627: PUSH
77628: LD_EXP 114
77632: PPUSH
77633: LD_VAR 0 5
77637: PUSH
77638: LD_EXP 114
77642: PUSH
77643: LD_VAR 0 5
77647: ARRAY
77648: PUSH
77649: LD_INT 1
77651: PLUS
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: PPUSH
77657: LD_VAR 0 2
77661: PUSH
77662: LD_VAR 0 4
77666: ARRAY
77667: PUSH
77668: LD_VAR 0 2
77672: PUSH
77673: LD_VAR 0 4
77677: ARRAY
77678: PPUSH
77679: CALL_OW 255
77683: PUSH
77684: EMPTY
77685: LIST
77686: LIST
77687: PPUSH
77688: CALL 21961 0 3
77692: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
77693: LD_VAR 0 2
77697: PUSH
77698: LD_VAR 0 4
77702: ARRAY
77703: PPUSH
77704: LD_VAR 0 1
77708: PPUSH
77709: CALL_OW 255
77713: PPUSH
77714: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
77718: LD_VAR 0 2
77722: PUSH
77723: LD_VAR 0 4
77727: ARRAY
77728: PPUSH
77729: CALL_OW 141
// end ;
77733: GO 77565
77735: POP
77736: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
77737: LD_VAR 0 1
77741: PPUSH
77742: LD_EXP 114
77746: PUSH
77747: LD_VAR 0 5
77751: ARRAY
77752: PUSH
77753: LD_INT 0
77755: PLUS
77756: PPUSH
77757: CALL_OW 505
// end ;
77761: LD_VAR 0 3
77765: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
77766: LD_INT 0
77768: PPUSH
77769: PPUSH
77770: PPUSH
77771: PPUSH
// if not hack in hackTanks then
77772: LD_VAR 0 1
77776: PUSH
77777: LD_EXP 113
77781: IN
77782: NOT
77783: IFFALSE 77787
// exit ;
77785: GO 78027
// index := GetElementIndex ( hackTanks , hack ) ;
77787: LD_ADDR_VAR 0 4
77791: PUSH
77792: LD_EXP 113
77796: PPUSH
77797: LD_VAR 0 1
77801: PPUSH
77802: CALL 21746 0 2
77806: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
77807: LD_ADDR_VAR 0 3
77811: PUSH
77812: DOUBLE
77813: LD_EXP 114
77817: PUSH
77818: LD_VAR 0 4
77822: ARRAY
77823: INC
77824: ST_TO_ADDR
77825: LD_INT 1
77827: PUSH
77828: FOR_DOWNTO
77829: IFFALSE 78001
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
77831: LD_ADDR_VAR 0 5
77835: PUSH
77836: LD_EXP 114
77840: PUSH
77841: LD_VAR 0 4
77845: ARRAY
77846: PUSH
77847: LD_VAR 0 3
77851: ARRAY
77852: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
77853: LD_VAR 0 5
77857: PUSH
77858: LD_INT 1
77860: ARRAY
77861: PPUSH
77862: CALL_OW 302
77866: NOT
77867: PUSH
77868: LD_VAR 0 5
77872: PUSH
77873: LD_INT 1
77875: ARRAY
77876: PPUSH
77877: CALL_OW 255
77881: PUSH
77882: LD_VAR 0 1
77886: PPUSH
77887: CALL_OW 255
77891: NONEQUAL
77892: OR
77893: IFFALSE 77999
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
77895: LD_VAR 0 5
77899: PUSH
77900: LD_INT 1
77902: ARRAY
77903: PPUSH
77904: CALL_OW 305
77908: PUSH
77909: LD_VAR 0 5
77913: PUSH
77914: LD_INT 1
77916: ARRAY
77917: PPUSH
77918: CALL_OW 255
77922: PUSH
77923: LD_VAR 0 1
77927: PPUSH
77928: CALL_OW 255
77932: EQUAL
77933: AND
77934: IFFALSE 77958
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
77936: LD_VAR 0 5
77940: PUSH
77941: LD_INT 1
77943: ARRAY
77944: PPUSH
77945: LD_VAR 0 5
77949: PUSH
77950: LD_INT 2
77952: ARRAY
77953: PPUSH
77954: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
77958: LD_ADDR_EXP 114
77962: PUSH
77963: LD_EXP 114
77967: PPUSH
77968: LD_VAR 0 4
77972: PPUSH
77973: LD_EXP 114
77977: PUSH
77978: LD_VAR 0 4
77982: ARRAY
77983: PPUSH
77984: LD_VAR 0 3
77988: PPUSH
77989: CALL_OW 3
77993: PPUSH
77994: CALL_OW 1
77998: ST_TO_ADDR
// end ; end ;
77999: GO 77828
78001: POP
78002: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78003: LD_VAR 0 1
78007: PPUSH
78008: LD_EXP 114
78012: PUSH
78013: LD_VAR 0 4
78017: ARRAY
78018: PUSH
78019: LD_INT 0
78021: PLUS
78022: PPUSH
78023: CALL_OW 505
// end ;
78027: LD_VAR 0 2
78031: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78032: LD_INT 0
78034: PPUSH
78035: PPUSH
78036: PPUSH
78037: PPUSH
// if not hack in hackTanks then
78038: LD_VAR 0 1
78042: PUSH
78043: LD_EXP 113
78047: IN
78048: NOT
78049: IFFALSE 78053
// exit ;
78051: GO 78138
// index := GetElementIndex ( hackTanks , hack ) ;
78053: LD_ADDR_VAR 0 5
78057: PUSH
78058: LD_EXP 113
78062: PPUSH
78063: LD_VAR 0 1
78067: PPUSH
78068: CALL 21746 0 2
78072: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78073: LD_ADDR_VAR 0 4
78077: PUSH
78078: DOUBLE
78079: LD_INT 1
78081: DEC
78082: ST_TO_ADDR
78083: LD_EXP 114
78087: PUSH
78088: LD_VAR 0 5
78092: ARRAY
78093: PUSH
78094: FOR_TO
78095: IFFALSE 78136
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78097: LD_EXP 114
78101: PUSH
78102: LD_VAR 0 5
78106: ARRAY
78107: PUSH
78108: LD_VAR 0 4
78112: ARRAY
78113: PUSH
78114: LD_INT 1
78116: ARRAY
78117: PUSH
78118: LD_VAR 0 2
78122: EQUAL
78123: IFFALSE 78134
// KillUnit ( vehicle ) ;
78125: LD_VAR 0 2
78129: PPUSH
78130: CALL_OW 66
78134: GO 78094
78136: POP
78137: POP
// end ;
78138: LD_VAR 0 3
78142: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78143: LD_EXP 118
78147: NOT
78148: IFFALSE 78183
78150: GO 78152
78152: DISABLE
// begin initMiner := true ;
78153: LD_ADDR_EXP 118
78157: PUSH
78158: LD_INT 1
78160: ST_TO_ADDR
// minersList := [ ] ;
78161: LD_ADDR_EXP 119
78165: PUSH
78166: EMPTY
78167: ST_TO_ADDR
// minerMinesList := [ ] ;
78168: LD_ADDR_EXP 120
78172: PUSH
78173: EMPTY
78174: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78175: LD_ADDR_EXP 121
78179: PUSH
78180: LD_INT 5
78182: ST_TO_ADDR
// end ;
78183: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78184: LD_EXP 118
78188: PUSH
78189: LD_INT 34
78191: PUSH
78192: LD_INT 81
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PPUSH
78199: CALL_OW 69
78203: AND
78204: IFFALSE 78665
78206: GO 78208
78208: DISABLE
78209: LD_INT 0
78211: PPUSH
78212: PPUSH
78213: PPUSH
78214: PPUSH
// begin enable ;
78215: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78216: LD_ADDR_VAR 0 1
78220: PUSH
78221: LD_INT 34
78223: PUSH
78224: LD_INT 81
78226: PUSH
78227: EMPTY
78228: LIST
78229: LIST
78230: PPUSH
78231: CALL_OW 69
78235: PUSH
78236: FOR_IN
78237: IFFALSE 78309
// begin if not i in minersList then
78239: LD_VAR 0 1
78243: PUSH
78244: LD_EXP 119
78248: IN
78249: NOT
78250: IFFALSE 78307
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78252: LD_ADDR_EXP 119
78256: PUSH
78257: LD_EXP 119
78261: PPUSH
78262: LD_EXP 119
78266: PUSH
78267: LD_INT 1
78269: PLUS
78270: PPUSH
78271: LD_VAR 0 1
78275: PPUSH
78276: CALL_OW 1
78280: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78281: LD_ADDR_EXP 120
78285: PUSH
78286: LD_EXP 120
78290: PPUSH
78291: LD_EXP 120
78295: PUSH
78296: LD_INT 1
78298: PLUS
78299: PPUSH
78300: EMPTY
78301: PPUSH
78302: CALL_OW 1
78306: ST_TO_ADDR
// end end ;
78307: GO 78236
78309: POP
78310: POP
// for i := minerMinesList downto 1 do
78311: LD_ADDR_VAR 0 1
78315: PUSH
78316: DOUBLE
78317: LD_EXP 120
78321: INC
78322: ST_TO_ADDR
78323: LD_INT 1
78325: PUSH
78326: FOR_DOWNTO
78327: IFFALSE 78663
// begin if IsLive ( minersList [ i ] ) then
78329: LD_EXP 119
78333: PUSH
78334: LD_VAR 0 1
78338: ARRAY
78339: PPUSH
78340: CALL_OW 300
78344: IFFALSE 78372
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78346: LD_EXP 119
78350: PUSH
78351: LD_VAR 0 1
78355: ARRAY
78356: PPUSH
78357: LD_EXP 120
78361: PUSH
78362: LD_VAR 0 1
78366: ARRAY
78367: PPUSH
78368: CALL_OW 505
// if not minerMinesList [ i ] then
78372: LD_EXP 120
78376: PUSH
78377: LD_VAR 0 1
78381: ARRAY
78382: NOT
78383: IFFALSE 78387
// continue ;
78385: GO 78326
// for j := minerMinesList [ i ] downto 1 do
78387: LD_ADDR_VAR 0 2
78391: PUSH
78392: DOUBLE
78393: LD_EXP 120
78397: PUSH
78398: LD_VAR 0 1
78402: ARRAY
78403: INC
78404: ST_TO_ADDR
78405: LD_INT 1
78407: PUSH
78408: FOR_DOWNTO
78409: IFFALSE 78659
// begin side := GetSide ( minersList [ i ] ) ;
78411: LD_ADDR_VAR 0 3
78415: PUSH
78416: LD_EXP 119
78420: PUSH
78421: LD_VAR 0 1
78425: ARRAY
78426: PPUSH
78427: CALL_OW 255
78431: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78432: LD_ADDR_VAR 0 4
78436: PUSH
78437: LD_EXP 120
78441: PUSH
78442: LD_VAR 0 1
78446: ARRAY
78447: PUSH
78448: LD_VAR 0 2
78452: ARRAY
78453: PUSH
78454: LD_INT 1
78456: ARRAY
78457: PPUSH
78458: LD_EXP 120
78462: PUSH
78463: LD_VAR 0 1
78467: ARRAY
78468: PUSH
78469: LD_VAR 0 2
78473: ARRAY
78474: PUSH
78475: LD_INT 2
78477: ARRAY
78478: PPUSH
78479: CALL_OW 428
78483: ST_TO_ADDR
// if not tmp then
78484: LD_VAR 0 4
78488: NOT
78489: IFFALSE 78493
// continue ;
78491: GO 78408
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
78493: LD_VAR 0 4
78497: PUSH
78498: LD_INT 81
78500: PUSH
78501: LD_VAR 0 3
78505: PUSH
78506: EMPTY
78507: LIST
78508: LIST
78509: PPUSH
78510: CALL_OW 69
78514: IN
78515: PUSH
78516: LD_EXP 120
78520: PUSH
78521: LD_VAR 0 1
78525: ARRAY
78526: PUSH
78527: LD_VAR 0 2
78531: ARRAY
78532: PUSH
78533: LD_INT 1
78535: ARRAY
78536: PPUSH
78537: LD_EXP 120
78541: PUSH
78542: LD_VAR 0 1
78546: ARRAY
78547: PUSH
78548: LD_VAR 0 2
78552: ARRAY
78553: PUSH
78554: LD_INT 2
78556: ARRAY
78557: PPUSH
78558: CALL_OW 458
78562: AND
78563: IFFALSE 78657
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
78565: LD_EXP 120
78569: PUSH
78570: LD_VAR 0 1
78574: ARRAY
78575: PUSH
78576: LD_VAR 0 2
78580: ARRAY
78581: PUSH
78582: LD_INT 1
78584: ARRAY
78585: PPUSH
78586: LD_EXP 120
78590: PUSH
78591: LD_VAR 0 1
78595: ARRAY
78596: PUSH
78597: LD_VAR 0 2
78601: ARRAY
78602: PUSH
78603: LD_INT 2
78605: ARRAY
78606: PPUSH
78607: LD_VAR 0 3
78611: PPUSH
78612: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
78616: LD_ADDR_EXP 120
78620: PUSH
78621: LD_EXP 120
78625: PPUSH
78626: LD_VAR 0 1
78630: PPUSH
78631: LD_EXP 120
78635: PUSH
78636: LD_VAR 0 1
78640: ARRAY
78641: PPUSH
78642: LD_VAR 0 2
78646: PPUSH
78647: CALL_OW 3
78651: PPUSH
78652: CALL_OW 1
78656: ST_TO_ADDR
// end ; end ;
78657: GO 78408
78659: POP
78660: POP
// end ;
78661: GO 78326
78663: POP
78664: POP
// end ;
78665: PPOPN 4
78667: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
78668: LD_INT 0
78670: PPUSH
78671: PPUSH
// result := false ;
78672: LD_ADDR_VAR 0 4
78676: PUSH
78677: LD_INT 0
78679: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
78680: LD_VAR 0 1
78684: PPUSH
78685: CALL_OW 264
78689: PUSH
78690: LD_INT 81
78692: EQUAL
78693: NOT
78694: IFFALSE 78698
// exit ;
78696: GO 78938
// index := GetElementIndex ( minersList , unit ) ;
78698: LD_ADDR_VAR 0 5
78702: PUSH
78703: LD_EXP 119
78707: PPUSH
78708: LD_VAR 0 1
78712: PPUSH
78713: CALL 21746 0 2
78717: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
78718: LD_EXP 120
78722: PUSH
78723: LD_VAR 0 5
78727: ARRAY
78728: PUSH
78729: LD_EXP 121
78733: GREATEREQUAL
78734: IFFALSE 78738
// exit ;
78736: GO 78938
// ComMoveXY ( unit , x , y ) ;
78738: LD_VAR 0 1
78742: PPUSH
78743: LD_VAR 0 2
78747: PPUSH
78748: LD_VAR 0 3
78752: PPUSH
78753: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
78757: LD_INT 35
78759: PPUSH
78760: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
78764: LD_VAR 0 1
78768: PPUSH
78769: LD_VAR 0 2
78773: PPUSH
78774: LD_VAR 0 3
78778: PPUSH
78779: CALL 53498 0 3
78783: NOT
78784: PUSH
78785: LD_VAR 0 1
78789: PPUSH
78790: CALL_OW 314
78794: AND
78795: IFFALSE 78799
// exit ;
78797: GO 78938
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
78799: LD_VAR 0 2
78803: PPUSH
78804: LD_VAR 0 3
78808: PPUSH
78809: CALL_OW 428
78813: PUSH
78814: LD_VAR 0 1
78818: EQUAL
78819: PUSH
78820: LD_VAR 0 1
78824: PPUSH
78825: CALL_OW 314
78829: NOT
78830: AND
78831: IFFALSE 78757
// PlaySoundXY ( x , y , PlantMine ) ;
78833: LD_VAR 0 2
78837: PPUSH
78838: LD_VAR 0 3
78842: PPUSH
78843: LD_STRING PlantMine
78845: PPUSH
78846: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
78850: LD_VAR 0 2
78854: PPUSH
78855: LD_VAR 0 3
78859: PPUSH
78860: LD_VAR 0 1
78864: PPUSH
78865: CALL_OW 255
78869: PPUSH
78870: LD_INT 0
78872: PPUSH
78873: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
78877: LD_ADDR_EXP 120
78881: PUSH
78882: LD_EXP 120
78886: PPUSH
78887: LD_VAR 0 5
78891: PUSH
78892: LD_EXP 120
78896: PUSH
78897: LD_VAR 0 5
78901: ARRAY
78902: PUSH
78903: LD_INT 1
78905: PLUS
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PPUSH
78911: LD_VAR 0 2
78915: PUSH
78916: LD_VAR 0 3
78920: PUSH
78921: EMPTY
78922: LIST
78923: LIST
78924: PPUSH
78925: CALL 21961 0 3
78929: ST_TO_ADDR
// result := true ;
78930: LD_ADDR_VAR 0 4
78934: PUSH
78935: LD_INT 1
78937: ST_TO_ADDR
// end ;
78938: LD_VAR 0 4
78942: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
78943: LD_INT 0
78945: PPUSH
78946: PPUSH
78947: PPUSH
// if not unit in minersList then
78948: LD_VAR 0 1
78952: PUSH
78953: LD_EXP 119
78957: IN
78958: NOT
78959: IFFALSE 78963
// exit ;
78961: GO 79355
// index := GetElementIndex ( minersList , unit ) ;
78963: LD_ADDR_VAR 0 6
78967: PUSH
78968: LD_EXP 119
78972: PPUSH
78973: LD_VAR 0 1
78977: PPUSH
78978: CALL 21746 0 2
78982: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
78983: LD_ADDR_VAR 0 5
78987: PUSH
78988: DOUBLE
78989: LD_EXP 120
78993: PUSH
78994: LD_VAR 0 6
78998: ARRAY
78999: INC
79000: ST_TO_ADDR
79001: LD_INT 1
79003: PUSH
79004: FOR_DOWNTO
79005: IFFALSE 79166
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79007: LD_EXP 120
79011: PUSH
79012: LD_VAR 0 6
79016: ARRAY
79017: PUSH
79018: LD_VAR 0 5
79022: ARRAY
79023: PUSH
79024: LD_INT 1
79026: ARRAY
79027: PUSH
79028: LD_VAR 0 2
79032: EQUAL
79033: PUSH
79034: LD_EXP 120
79038: PUSH
79039: LD_VAR 0 6
79043: ARRAY
79044: PUSH
79045: LD_VAR 0 5
79049: ARRAY
79050: PUSH
79051: LD_INT 2
79053: ARRAY
79054: PUSH
79055: LD_VAR 0 3
79059: EQUAL
79060: AND
79061: IFFALSE 79164
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79063: LD_EXP 120
79067: PUSH
79068: LD_VAR 0 6
79072: ARRAY
79073: PUSH
79074: LD_VAR 0 5
79078: ARRAY
79079: PUSH
79080: LD_INT 1
79082: ARRAY
79083: PPUSH
79084: LD_EXP 120
79088: PUSH
79089: LD_VAR 0 6
79093: ARRAY
79094: PUSH
79095: LD_VAR 0 5
79099: ARRAY
79100: PUSH
79101: LD_INT 2
79103: ARRAY
79104: PPUSH
79105: LD_VAR 0 1
79109: PPUSH
79110: CALL_OW 255
79114: PPUSH
79115: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79119: LD_ADDR_EXP 120
79123: PUSH
79124: LD_EXP 120
79128: PPUSH
79129: LD_VAR 0 6
79133: PPUSH
79134: LD_EXP 120
79138: PUSH
79139: LD_VAR 0 6
79143: ARRAY
79144: PPUSH
79145: LD_VAR 0 5
79149: PPUSH
79150: CALL_OW 3
79154: PPUSH
79155: CALL_OW 1
79159: ST_TO_ADDR
// exit ;
79160: POP
79161: POP
79162: GO 79355
// end ; end ;
79164: GO 79004
79166: POP
79167: POP
// for i := minerMinesList [ index ] downto 1 do
79168: LD_ADDR_VAR 0 5
79172: PUSH
79173: DOUBLE
79174: LD_EXP 120
79178: PUSH
79179: LD_VAR 0 6
79183: ARRAY
79184: INC
79185: ST_TO_ADDR
79186: LD_INT 1
79188: PUSH
79189: FOR_DOWNTO
79190: IFFALSE 79353
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79192: LD_EXP 120
79196: PUSH
79197: LD_VAR 0 6
79201: ARRAY
79202: PUSH
79203: LD_VAR 0 5
79207: ARRAY
79208: PUSH
79209: LD_INT 1
79211: ARRAY
79212: PPUSH
79213: LD_EXP 120
79217: PUSH
79218: LD_VAR 0 6
79222: ARRAY
79223: PUSH
79224: LD_VAR 0 5
79228: ARRAY
79229: PUSH
79230: LD_INT 2
79232: ARRAY
79233: PPUSH
79234: LD_VAR 0 2
79238: PPUSH
79239: LD_VAR 0 3
79243: PPUSH
79244: CALL_OW 298
79248: PUSH
79249: LD_INT 6
79251: LESS
79252: IFFALSE 79351
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79254: LD_EXP 120
79258: PUSH
79259: LD_VAR 0 6
79263: ARRAY
79264: PUSH
79265: LD_VAR 0 5
79269: ARRAY
79270: PUSH
79271: LD_INT 1
79273: ARRAY
79274: PPUSH
79275: LD_EXP 120
79279: PUSH
79280: LD_VAR 0 6
79284: ARRAY
79285: PUSH
79286: LD_VAR 0 5
79290: ARRAY
79291: PUSH
79292: LD_INT 2
79294: ARRAY
79295: PPUSH
79296: LD_VAR 0 1
79300: PPUSH
79301: CALL_OW 255
79305: PPUSH
79306: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79310: LD_ADDR_EXP 120
79314: PUSH
79315: LD_EXP 120
79319: PPUSH
79320: LD_VAR 0 6
79324: PPUSH
79325: LD_EXP 120
79329: PUSH
79330: LD_VAR 0 6
79334: ARRAY
79335: PPUSH
79336: LD_VAR 0 5
79340: PPUSH
79341: CALL_OW 3
79345: PPUSH
79346: CALL_OW 1
79350: ST_TO_ADDR
// end ; end ;
79351: GO 79189
79353: POP
79354: POP
// end ;
79355: LD_VAR 0 4
79359: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79360: LD_INT 0
79362: PPUSH
79363: PPUSH
79364: PPUSH
79365: PPUSH
79366: PPUSH
79367: PPUSH
79368: PPUSH
79369: PPUSH
79370: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79371: LD_VAR 0 1
79375: PPUSH
79376: CALL_OW 264
79380: PUSH
79381: LD_INT 81
79383: EQUAL
79384: NOT
79385: PUSH
79386: LD_VAR 0 1
79390: PUSH
79391: LD_EXP 119
79395: IN
79396: NOT
79397: OR
79398: IFFALSE 79402
// exit ;
79400: GO 79724
// index := GetElementIndex ( minersList , unit ) ;
79402: LD_ADDR_VAR 0 6
79406: PUSH
79407: LD_EXP 119
79411: PPUSH
79412: LD_VAR 0 1
79416: PPUSH
79417: CALL 21746 0 2
79421: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79422: LD_ADDR_VAR 0 8
79426: PUSH
79427: LD_EXP 121
79431: PUSH
79432: LD_EXP 120
79436: PUSH
79437: LD_VAR 0 6
79441: ARRAY
79442: MINUS
79443: ST_TO_ADDR
// if not minesFreeAmount then
79444: LD_VAR 0 8
79448: NOT
79449: IFFALSE 79453
// exit ;
79451: GO 79724
// tmp := [ ] ;
79453: LD_ADDR_VAR 0 7
79457: PUSH
79458: EMPTY
79459: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
79460: LD_ADDR_VAR 0 5
79464: PUSH
79465: DOUBLE
79466: LD_INT 1
79468: DEC
79469: ST_TO_ADDR
79470: LD_VAR 0 8
79474: PUSH
79475: FOR_TO
79476: IFFALSE 79671
// begin _d := rand ( 0 , 5 ) ;
79478: LD_ADDR_VAR 0 11
79482: PUSH
79483: LD_INT 0
79485: PPUSH
79486: LD_INT 5
79488: PPUSH
79489: CALL_OW 12
79493: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
79494: LD_ADDR_VAR 0 12
79498: PUSH
79499: LD_INT 2
79501: PPUSH
79502: LD_INT 6
79504: PPUSH
79505: CALL_OW 12
79509: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
79510: LD_ADDR_VAR 0 9
79514: PUSH
79515: LD_VAR 0 2
79519: PPUSH
79520: LD_VAR 0 11
79524: PPUSH
79525: LD_VAR 0 12
79529: PPUSH
79530: CALL_OW 272
79534: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
79535: LD_ADDR_VAR 0 10
79539: PUSH
79540: LD_VAR 0 3
79544: PPUSH
79545: LD_VAR 0 11
79549: PPUSH
79550: LD_VAR 0 12
79554: PPUSH
79555: CALL_OW 273
79559: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
79560: LD_VAR 0 9
79564: PPUSH
79565: LD_VAR 0 10
79569: PPUSH
79570: CALL_OW 488
79574: PUSH
79575: LD_VAR 0 9
79579: PUSH
79580: LD_VAR 0 10
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: PUSH
79589: LD_VAR 0 7
79593: IN
79594: NOT
79595: AND
79596: PUSH
79597: LD_VAR 0 9
79601: PPUSH
79602: LD_VAR 0 10
79606: PPUSH
79607: CALL_OW 458
79611: NOT
79612: AND
79613: IFFALSE 79655
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
79615: LD_ADDR_VAR 0 7
79619: PUSH
79620: LD_VAR 0 7
79624: PPUSH
79625: LD_VAR 0 7
79629: PUSH
79630: LD_INT 1
79632: PLUS
79633: PPUSH
79634: LD_VAR 0 9
79638: PUSH
79639: LD_VAR 0 10
79643: PUSH
79644: EMPTY
79645: LIST
79646: LIST
79647: PPUSH
79648: CALL_OW 1
79652: ST_TO_ADDR
79653: GO 79669
// i := i - 1 ;
79655: LD_ADDR_VAR 0 5
79659: PUSH
79660: LD_VAR 0 5
79664: PUSH
79665: LD_INT 1
79667: MINUS
79668: ST_TO_ADDR
// end ;
79669: GO 79475
79671: POP
79672: POP
// for i in tmp do
79673: LD_ADDR_VAR 0 5
79677: PUSH
79678: LD_VAR 0 7
79682: PUSH
79683: FOR_IN
79684: IFFALSE 79722
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
79686: LD_VAR 0 1
79690: PPUSH
79691: LD_VAR 0 5
79695: PUSH
79696: LD_INT 1
79698: ARRAY
79699: PPUSH
79700: LD_VAR 0 5
79704: PUSH
79705: LD_INT 2
79707: ARRAY
79708: PPUSH
79709: CALL 78668 0 3
79713: NOT
79714: IFFALSE 79720
// exit ;
79716: POP
79717: POP
79718: GO 79724
79720: GO 79683
79722: POP
79723: POP
// end ;
79724: LD_VAR 0 4
79728: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
79729: LD_INT 0
79731: PPUSH
79732: PPUSH
79733: PPUSH
79734: PPUSH
79735: PPUSH
79736: PPUSH
79737: PPUSH
// if not GetClass ( unit ) = class_sniper then
79738: LD_VAR 0 1
79742: PPUSH
79743: CALL_OW 257
79747: PUSH
79748: LD_INT 5
79750: EQUAL
79751: NOT
79752: IFFALSE 79756
// exit ;
79754: GO 80144
// dist := 8 ;
79756: LD_ADDR_VAR 0 5
79760: PUSH
79761: LD_INT 8
79763: ST_TO_ADDR
// viewRange := 12 ;
79764: LD_ADDR_VAR 0 7
79768: PUSH
79769: LD_INT 12
79771: ST_TO_ADDR
// side := GetSide ( unit ) ;
79772: LD_ADDR_VAR 0 6
79776: PUSH
79777: LD_VAR 0 1
79781: PPUSH
79782: CALL_OW 255
79786: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
79787: LD_INT 61
79789: PPUSH
79790: LD_VAR 0 6
79794: PPUSH
79795: CALL_OW 321
79799: PUSH
79800: LD_INT 2
79802: EQUAL
79803: IFFALSE 79813
// viewRange := 16 ;
79805: LD_ADDR_VAR 0 7
79809: PUSH
79810: LD_INT 16
79812: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
79813: LD_VAR 0 1
79817: PPUSH
79818: LD_VAR 0 2
79822: PPUSH
79823: LD_VAR 0 3
79827: PPUSH
79828: CALL_OW 297
79832: PUSH
79833: LD_VAR 0 5
79837: GREATER
79838: IFFALSE 79917
// begin ComMoveXY ( unit , x , y ) ;
79840: LD_VAR 0 1
79844: PPUSH
79845: LD_VAR 0 2
79849: PPUSH
79850: LD_VAR 0 3
79854: PPUSH
79855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79859: LD_INT 35
79861: PPUSH
79862: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
79866: LD_VAR 0 1
79870: PPUSH
79871: LD_VAR 0 2
79875: PPUSH
79876: LD_VAR 0 3
79880: PPUSH
79881: CALL 53498 0 3
79885: NOT
79886: IFFALSE 79890
// exit ;
79888: GO 80144
// until GetDistUnitXY ( unit , x , y ) < dist ;
79890: LD_VAR 0 1
79894: PPUSH
79895: LD_VAR 0 2
79899: PPUSH
79900: LD_VAR 0 3
79904: PPUSH
79905: CALL_OW 297
79909: PUSH
79910: LD_VAR 0 5
79914: LESS
79915: IFFALSE 79859
// end ; ComTurnXY ( unit , x , y ) ;
79917: LD_VAR 0 1
79921: PPUSH
79922: LD_VAR 0 2
79926: PPUSH
79927: LD_VAR 0 3
79931: PPUSH
79932: CALL_OW 118
// wait ( 5 ) ;
79936: LD_INT 5
79938: PPUSH
79939: CALL_OW 67
// _d := GetDir ( unit ) ;
79943: LD_ADDR_VAR 0 10
79947: PUSH
79948: LD_VAR 0 1
79952: PPUSH
79953: CALL_OW 254
79957: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
79958: LD_ADDR_VAR 0 8
79962: PUSH
79963: LD_VAR 0 1
79967: PPUSH
79968: CALL_OW 250
79972: PPUSH
79973: LD_VAR 0 10
79977: PPUSH
79978: LD_VAR 0 5
79982: PPUSH
79983: CALL_OW 272
79987: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
79988: LD_ADDR_VAR 0 9
79992: PUSH
79993: LD_VAR 0 1
79997: PPUSH
79998: CALL_OW 251
80002: PPUSH
80003: LD_VAR 0 10
80007: PPUSH
80008: LD_VAR 0 5
80012: PPUSH
80013: CALL_OW 273
80017: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80018: LD_VAR 0 8
80022: PPUSH
80023: LD_VAR 0 9
80027: PPUSH
80028: CALL_OW 488
80032: NOT
80033: IFFALSE 80037
// exit ;
80035: GO 80144
// ComAnimCustom ( unit , 1 ) ;
80037: LD_VAR 0 1
80041: PPUSH
80042: LD_INT 1
80044: PPUSH
80045: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80049: LD_VAR 0 8
80053: PPUSH
80054: LD_VAR 0 9
80058: PPUSH
80059: LD_VAR 0 6
80063: PPUSH
80064: LD_VAR 0 7
80068: PPUSH
80069: CALL_OW 330
// repeat wait ( 1 ) ;
80073: LD_INT 1
80075: PPUSH
80076: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80080: LD_VAR 0 1
80084: PPUSH
80085: CALL_OW 316
80089: PUSH
80090: LD_VAR 0 1
80094: PPUSH
80095: CALL_OW 314
80099: OR
80100: PUSH
80101: LD_VAR 0 1
80105: PPUSH
80106: CALL_OW 302
80110: NOT
80111: OR
80112: PUSH
80113: LD_VAR 0 1
80117: PPUSH
80118: CALL_OW 301
80122: OR
80123: IFFALSE 80073
// RemoveSeeing ( _x , _y , side ) ;
80125: LD_VAR 0 8
80129: PPUSH
80130: LD_VAR 0 9
80134: PPUSH
80135: LD_VAR 0 6
80139: PPUSH
80140: CALL_OW 331
// end ; end_of_file
80144: LD_VAR 0 4
80148: RET
