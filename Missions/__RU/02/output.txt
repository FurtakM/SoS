// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1112 0 0
// CreateNature ;
  28: CALL 16596 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6956 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: LIST
 683: PUSH
 684: LD_OWVAR 67
 688: ARRAY
 689: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 690: LD_ADDR_EXP 60
 694: PUSH
 695: LD_INT 3
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 1
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 2
 718: PUSH
 719: LD_INT 1
 721: PUSH
 722: LD_INT 1
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 3
 733: PUSH
 734: LD_INT 2
 736: PUSH
 737: LD_INT 1
 739: PUSH
 740: LD_INT 1
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PUSH
 754: LD_OWVAR 67
 758: ARRAY
 759: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 760: LD_ADDR_EXP 61
 764: PUSH
 765: LD_INT 21000
 767: PUSH
 768: LD_INT 16800
 770: PUSH
 771: LD_INT 12600
 773: PUSH
 774: EMPTY
 775: LIST
 776: LIST
 777: LIST
 778: PUSH
 779: LD_OWVAR 67
 783: ARRAY
 784: ST_TO_ADDR
// end ;
 785: LD_VAR 0 1
 789: RET
// every 0 0$1 trigger debugMode do var i ;
 790: LD_EXP 50
 794: IFFALSE 1109
 796: GO 798
 798: DISABLE
 799: LD_INT 0
 801: PPUSH
// begin enable ;
 802: ENABLE
// FogOff ( your_side ) ;
 803: LD_OWVAR 2
 807: PPUSH
 808: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 812: LD_ADDR_VAR 0 1
 816: PUSH
 817: LD_INT 22
 819: PUSH
 820: LD_OWVAR 2
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 2
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: LD_INT 1
 837: PUSH
 838: EMPTY
 839: LIST
 840: LIST
 841: PUSH
 842: LD_INT 21
 844: PUSH
 845: LD_INT 2
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: PUSH
 866: FOR_IN
 867: IFFALSE 883
// SetLives ( i , 1000 ) ;
 869: LD_VAR 0 1
 873: PPUSH
 874: LD_INT 1000
 876: PPUSH
 877: CALL_OW 234
 881: GO 866
 883: POP
 884: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: LD_INT 22
 892: PUSH
 893: LD_OWVAR 2
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PUSH
 902: LD_INT 21
 904: PUSH
 905: LD_INT 1
 907: PUSH
 908: EMPTY
 909: LIST
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PPUSH
 916: CALL_OW 69
 920: PUSH
 921: FOR_IN
 922: IFFALSE 986
// begin SetSkill ( i , skill_combat , 10 ) ;
 924: LD_VAR 0 1
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: LD_INT 10
 934: PPUSH
 935: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 939: LD_VAR 0 1
 943: PPUSH
 944: LD_INT 2
 946: PPUSH
 947: LD_INT 10
 949: PPUSH
 950: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 954: LD_VAR 0 1
 958: PPUSH
 959: LD_INT 3
 961: PPUSH
 962: LD_INT 10
 964: PPUSH
 965: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 969: LD_VAR 0 1
 973: PPUSH
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 10
 979: PPUSH
 980: CALL_OW 237
// end ;
 984: GO 921
 986: POP
 987: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 988: LD_ADDR_VAR 0 1
 992: PUSH
 993: LD_INT 22
 995: PUSH
 996: LD_OWVAR 2
1000: PUSH
1001: EMPTY
1002: LIST
1003: LIST
1004: PUSH
1005: LD_INT 2
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 0
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 30
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: EMPTY
1025: LIST
1026: LIST
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: PPUSH
1037: CALL_OW 69
1041: PUSH
1042: FOR_IN
1043: IFFALSE 1107
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1045: LD_VAR 0 1
1049: PPUSH
1050: CALL_OW 274
1054: PPUSH
1055: LD_INT 1
1057: PPUSH
1058: LD_INT 9999
1060: PPUSH
1061: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: CALL_OW 274
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 9999
1080: PPUSH
1081: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 274
1094: PPUSH
1095: LD_INT 3
1097: PPUSH
1098: LD_INT 9999
1100: PPUSH
1101: CALL_OW 277
// end ;
1105: GO 1042
1107: POP
1108: POP
// end ; end_of_file
1109: PPOPN 1
1111: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1112: LD_INT 0
1114: PPUSH
// PrepareCharactersFromPreviousMission ;
1115: CALL 1534 0 0
// PrepareKirovBase ;
1119: CALL 1729 0 0
// PrepareBeriaBase ;
1123: CALL 2494 0 0
// end ;
1127: LD_VAR 0 1
1131: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1132: LD_INT 0
1134: PPUSH
1135: PPUSH
1136: PPUSH
1137: PPUSH
// belkovTeam = [ ] ;
1138: LD_ADDR_EXP 73
1142: PUSH
1143: EMPTY
1144: ST_TO_ADDR
// uc_side = 6 ;
1145: LD_ADDR_OWVAR 20
1149: PUSH
1150: LD_INT 6
1152: ST_TO_ADDR
// uc_nation = nation_russian ;
1153: LD_ADDR_OWVAR 21
1157: PUSH
1158: LD_INT 3
1160: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1161: LD_ADDR_OWVAR 37
1165: PUSH
1166: LD_EXP 75
1170: PUSH
1171: LD_INT 1
1173: ARRAY
1174: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1175: LD_ADDR_OWVAR 39
1179: PUSH
1180: LD_EXP 75
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1189: LD_ADDR_OWVAR 38
1193: PUSH
1194: LD_EXP 75
1198: PUSH
1199: LD_INT 3
1201: ARRAY
1202: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1203: LD_ADDR_OWVAR 40
1207: PUSH
1208: LD_EXP 75
1212: PUSH
1213: LD_INT 4
1215: ARRAY
1216: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1217: LD_ADDR_OWVAR 41
1221: PUSH
1222: LD_EXP 75
1226: PUSH
1227: LD_INT 5
1229: ARRAY
1230: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1231: LD_ADDR_EXP 72
1235: PUSH
1236: CALL_OW 45
1240: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1241: LD_EXP 72
1245: PPUSH
1246: LD_INT 3
1248: PPUSH
1249: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1253: LD_EXP 72
1257: PPUSH
1258: LD_INT 11
1260: PPUSH
1261: LD_INT 0
1263: PPUSH
1264: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1268: LD_ADDR_EXP 73
1272: PUSH
1273: LD_EXP 73
1277: PUSH
1278: LD_EXP 72
1282: ADD
1283: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1284: LD_STRING 02_TmpBelkov
1286: PPUSH
1287: CALL_OW 28
1291: IFFALSE 1336
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1293: LD_ADDR_EXP 64
1297: PUSH
1298: LD_STRING 02_TmpBelkov
1300: PPUSH
1301: CALL_OW 34
1305: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1306: LD_EXP 64
1310: PPUSH
1311: LD_EXP 72
1315: PPUSH
1316: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1320: LD_ADDR_EXP 73
1324: PUSH
1325: LD_EXP 73
1329: PUSH
1330: LD_EXP 64
1334: ADD
1335: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1336: LD_STRING 02_TmpBelkov2
1338: PPUSH
1339: CALL_OW 28
1343: IFFALSE 1415
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1345: LD_ADDR_EXP 68
1349: PUSH
1350: LD_STRING 02_TmpBelkov2
1352: PPUSH
1353: CALL_OW 34
1357: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1358: LD_STRING 02_TmpBelkov
1360: PPUSH
1361: CALL_OW 28
1365: NOT
1366: IFFALSE 1384
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1368: LD_EXP 68
1372: PPUSH
1373: LD_EXP 72
1377: PPUSH
1378: CALL_OW 52
1382: GO 1399
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1384: LD_EXP 68
1388: PPUSH
1389: LD_INT 11
1391: PPUSH
1392: LD_INT 0
1394: PPUSH
1395: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1399: LD_ADDR_EXP 73
1403: PUSH
1404: LD_EXP 73
1408: PUSH
1409: LD_EXP 68
1413: ADD
1414: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1415: LD_STRING 02_TmpKirilenkova
1417: PPUSH
1418: CALL_OW 28
1422: IFFALSE 1468
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1424: LD_ADDR_EXP 65
1428: PUSH
1429: LD_STRING 02_TmpKirilenkova
1431: PPUSH
1432: CALL_OW 34
1436: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1437: LD_EXP 65
1441: PPUSH
1442: LD_INT 11
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1452: LD_ADDR_EXP 73
1456: PUSH
1457: LD_EXP 73
1461: PUSH
1462: LD_EXP 65
1466: ADD
1467: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_STRING 02_TmpBelkovTeam
1475: PPUSH
1476: CALL_OW 31
1480: ST_TO_ADDR
// for unit in others do
1481: LD_ADDR_VAR 0 2
1485: PUSH
1486: LD_VAR 0 3
1490: PUSH
1491: FOR_IN
1492: IFFALSE 1527
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1494: LD_VAR 0 2
1498: PPUSH
1499: LD_INT 11
1501: PPUSH
1502: LD_INT 0
1504: PPUSH
1505: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1509: LD_ADDR_EXP 73
1513: PUSH
1514: LD_EXP 73
1518: PUSH
1519: LD_VAR 0 2
1523: ADD
1524: ST_TO_ADDR
// end ;
1525: GO 1491
1527: POP
1528: POP
// end ;
1529: LD_VAR 0 1
1533: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1534: LD_INT 0
1536: PPUSH
1537: PPUSH
// uc_side = 3 ;
1538: LD_ADDR_OWVAR 20
1542: PUSH
1543: LD_INT 3
1545: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1546: LD_ADDR_EXP 62
1550: PUSH
1551: LD_STRING Burlak
1553: PPUSH
1554: LD_INT 1
1556: PPUSH
1557: CALL 4115 0 2
1561: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1562: LD_ADDR_EXP 63
1566: PUSH
1567: LD_STRING Gnyevko
1569: PPUSH
1570: LD_INT 1
1572: PPUSH
1573: CALL 4115 0 2
1577: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1578: LD_ADDR_EXP 64
1582: PUSH
1583: LD_STRING Belkov
1585: PPUSH
1586: LD_INT 1
1588: PPUSH
1589: CALL 4115 0 2
1593: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1594: LD_ADDR_EXP 65
1598: PUSH
1599: LD_STRING Kirilenkova
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: CALL 4115 0 2
1609: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1610: LD_EXP 62
1614: PPUSH
1615: LD_INT 5
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1625: LD_EXP 63
1629: PPUSH
1630: LD_INT 3
1632: PPUSH
1633: LD_INT 0
1635: PPUSH
1636: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1640: LD_EXP 64
1644: PPUSH
1645: LD_INT 3
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1655: LD_EXP 65
1659: PPUSH
1660: LD_INT 3
1662: PPUSH
1663: LD_INT 0
1665: PPUSH
1666: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1670: LD_EXP 62
1674: PPUSH
1675: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1679: LD_ADDR_EXP 66
1683: PUSH
1684: LD_STRING 01_other_survivors
1686: PPUSH
1687: CALL_OW 31
1691: ST_TO_ADDR
// for i in other_survivors do
1692: LD_ADDR_VAR 0 2
1696: PUSH
1697: LD_EXP 66
1701: PUSH
1702: FOR_IN
1703: IFFALSE 1722
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1705: LD_VAR 0 2
1709: PPUSH
1710: LD_INT 3
1712: PPUSH
1713: LD_INT 0
1715: PPUSH
1716: CALL_OW 49
1720: GO 1702
1722: POP
1723: POP
// end ;
1724: LD_VAR 0 1
1728: RET
// function PrepareKirovBase ; var i , un ; begin
1729: LD_INT 0
1731: PPUSH
1732: PPUSH
1733: PPUSH
// SetBName ( kirov , kirov ) ;
1734: LD_INT 71
1736: PPUSH
1737: LD_STRING kirov
1739: PPUSH
1740: CALL_OW 500
// uc_side = 6 ;
1744: LD_ADDR_OWVAR 20
1748: PUSH
1749: LD_INT 6
1751: ST_TO_ADDR
// uc_nation = 3 ;
1752: LD_ADDR_OWVAR 21
1756: PUSH
1757: LD_INT 3
1759: ST_TO_ADDR
// hc_gallery =  ;
1760: LD_ADDR_OWVAR 33
1764: PUSH
1765: LD_STRING 
1767: ST_TO_ADDR
// hc_name =  ;
1768: LD_ADDR_OWVAR 26
1772: PUSH
1773: LD_STRING 
1775: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1776: LD_ADDR_EXP 67
1780: PUSH
1781: LD_STRING Kurin
1783: PPUSH
1784: LD_INT 0
1786: PPUSH
1787: CALL 4115 0 2
1791: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1792: LD_ADDR_EXP 70
1796: PUSH
1797: LD_STRING Kovalyuk
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL 4115 0 2
1807: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1808: LD_ADDR_EXP 68
1812: PUSH
1813: LD_STRING Belkov2
1815: PPUSH
1816: LD_INT 0
1818: PPUSH
1819: CALL 4115 0 2
1823: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1824: LD_EXP 67
1828: PPUSH
1829: LD_INT 4
1831: PPUSH
1832: LD_INT 0
1834: PPUSH
1835: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1839: LD_EXP 70
1843: PPUSH
1844: LD_INT 161
1846: PPUSH
1847: LD_INT 108
1849: PPUSH
1850: LD_INT 6
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 50
// ComHold ( Kurin ) ;
1860: LD_EXP 67
1864: PPUSH
1865: CALL_OW 140
// otherKirovUnits = [ ] ;
1869: LD_ADDR_EXP 69
1873: PUSH
1874: EMPTY
1875: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1876: LD_ADDR_EXP 51
1880: PUSH
1881: LD_EXP 51
1885: PPUSH
1886: LD_INT 1
1888: PPUSH
1889: LD_EXP 51
1893: PUSH
1894: LD_INT 1
1896: ARRAY
1897: PUSH
1898: LD_EXP 66
1902: PPUSH
1903: LD_INT 25
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: EMPTY
1910: LIST
1911: LIST
1912: PPUSH
1913: CALL_OW 72
1917: MINUS
1918: PPUSH
1919: CALL_OW 1
1923: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1924: LD_ADDR_VAR 0 2
1928: PUSH
1929: DOUBLE
1930: LD_INT 1
1932: DEC
1933: ST_TO_ADDR
1934: LD_EXP 51
1938: PUSH
1939: LD_INT 1
1941: ARRAY
1942: PUSH
1943: FOR_TO
1944: IFFALSE 2123
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1946: LD_INT 0
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 1
1954: PPUSH
1955: LD_INT 3
1957: PPUSH
1958: CALL_OW 12
1962: PPUSH
1963: CALL_OW 380
// un = CreateHuman ;
1967: LD_ADDR_VAR 0 3
1971: PUSH
1972: CALL_OW 44
1976: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1977: LD_ADDR_EXP 69
1981: PUSH
1982: LD_EXP 69
1986: PUSH
1987: LD_VAR 0 3
1991: ADD
1992: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1993: LD_INT 9
1995: PPUSH
1996: LD_INT 22
1998: PUSH
1999: LD_INT 6
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 21
2008: PUSH
2009: LD_INT 3
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: PUSH
2016: LD_INT 30
2018: PUSH
2019: LD_INT 31
2021: PUSH
2022: EMPTY
2023: LIST
2024: LIST
2025: PUSH
2026: LD_INT 58
2028: PUSH
2029: EMPTY
2030: LIST
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PPUSH
2038: CALL_OW 70
2042: IFFALSE 2109
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2044: LD_VAR 0 3
2048: PPUSH
2049: LD_INT 9
2051: PPUSH
2052: LD_INT 22
2054: PUSH
2055: LD_INT 6
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PUSH
2062: LD_INT 21
2064: PUSH
2065: LD_INT 3
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: PUSH
2072: LD_INT 30
2074: PUSH
2075: LD_INT 31
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 58
2084: PUSH
2085: EMPTY
2086: LIST
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PPUSH
2094: CALL_OW 70
2098: PUSH
2099: LD_INT 1
2101: ARRAY
2102: PPUSH
2103: CALL 5354 0 2
2107: GO 2121
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2109: LD_VAR 0 3
2113: PPUSH
2114: LD_INT 209
2116: PPUSH
2117: CALL_OW 52
// end ;
2121: GO 1943
2123: POP
2124: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2125: LD_INT 0
2127: PPUSH
2128: LD_INT 1
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 12
2141: PPUSH
2142: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2146: CALL_OW 44
2150: PPUSH
2151: LD_INT 209
2153: PPUSH
2154: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2158: LD_ADDR_VAR 0 2
2162: PUSH
2163: DOUBLE
2164: LD_INT 1
2166: DEC
2167: ST_TO_ADDR
2168: LD_EXP 51
2172: PUSH
2173: LD_INT 2
2175: ARRAY
2176: PUSH
2177: FOR_TO
2178: IFFALSE 2241
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2180: LD_INT 0
2182: PPUSH
2183: LD_INT 2
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 12
2196: PPUSH
2197: CALL_OW 380
// un = CreateHuman ;
2201: LD_ADDR_VAR 0 3
2205: PUSH
2206: CALL_OW 44
2210: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2211: LD_ADDR_EXP 69
2215: PUSH
2216: LD_EXP 69
2220: PUSH
2221: LD_VAR 0 3
2225: ADD
2226: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2227: LD_VAR 0 3
2231: PPUSH
2232: LD_INT 71
2234: PPUSH
2235: CALL_OW 52
// end ;
2239: GO 2177
2241: POP
2242: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: DOUBLE
2249: LD_INT 1
2251: DEC
2252: ST_TO_ADDR
2253: LD_EXP 51
2257: PUSH
2258: LD_INT 3
2260: ARRAY
2261: PUSH
2262: FOR_TO
2263: IFFALSE 2326
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2265: LD_INT 0
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: LD_INT 3
2276: PPUSH
2277: CALL_OW 12
2281: PPUSH
2282: CALL_OW 380
// un = CreateHuman ;
2286: LD_ADDR_VAR 0 3
2290: PUSH
2291: CALL_OW 44
2295: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2296: LD_ADDR_EXP 69
2300: PUSH
2301: LD_EXP 69
2305: PUSH
2306: LD_VAR 0 3
2310: ADD
2311: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2312: LD_VAR 0 3
2316: PPUSH
2317: LD_INT 71
2319: PPUSH
2320: CALL_OW 52
// end ;
2324: GO 2262
2326: POP
2327: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2328: LD_ADDR_VAR 0 2
2332: PUSH
2333: DOUBLE
2334: LD_INT 1
2336: DEC
2337: ST_TO_ADDR
2338: LD_EXP 51
2342: PUSH
2343: LD_INT 4
2345: ARRAY
2346: PUSH
2347: FOR_TO
2348: IFFALSE 2411
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 4
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 3
2361: PPUSH
2362: CALL_OW 12
2366: PPUSH
2367: CALL_OW 380
// un = CreateHuman ;
2371: LD_ADDR_VAR 0 3
2375: PUSH
2376: CALL_OW 44
2380: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2381: LD_ADDR_EXP 69
2385: PUSH
2386: LD_EXP 69
2390: PUSH
2391: LD_VAR 0 3
2395: ADD
2396: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2397: LD_VAR 0 3
2401: PPUSH
2402: LD_INT 83
2404: PPUSH
2405: CALL_OW 52
// end ;
2409: GO 2347
2411: POP
2412: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2413: LD_INT 6
2415: PPUSH
2416: LD_INT 83
2418: PPUSH
2419: LD_INT 3
2421: PPUSH
2422: CALL 4967 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2426: LD_STRING 01_Gnyevko
2428: PPUSH
2429: CALL_OW 28
2433: NOT
2434: IFFALSE 2477
// begin PrepareMechanic ( sex_male , 3 ) ;
2436: LD_INT 1
2438: PPUSH
2439: LD_INT 3
2441: PPUSH
2442: CALL_OW 383
// randomMech = CreateHuman ;
2446: LD_ADDR_EXP 71
2450: PUSH
2451: CALL_OW 44
2455: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2456: LD_EXP 71
2460: PPUSH
2461: LD_INT 161
2463: PPUSH
2464: LD_INT 108
2466: PPUSH
2467: LD_INT 6
2469: PPUSH
2470: LD_INT 0
2472: PPUSH
2473: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2477: LD_EXP 68
2481: PPUSH
2482: LD_INT 95
2484: PPUSH
2485: CALL_OW 52
// end ;
2489: LD_VAR 0 1
2493: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2494: LD_INT 0
2496: PPUSH
2497: PPUSH
2498: PPUSH
2499: PPUSH
2500: PPUSH
// SetBName ( beria , beria ) ;
2501: LD_INT 106
2503: PPUSH
2504: LD_STRING beria
2506: PPUSH
2507: CALL_OW 500
// uc_side = 6 ;
2511: LD_ADDR_OWVAR 20
2515: PUSH
2516: LD_INT 6
2518: ST_TO_ADDR
// uc_nation = 3 ;
2519: LD_ADDR_OWVAR 21
2523: PUSH
2524: LD_INT 3
2526: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2527: LD_ADDR_EXP 76
2531: PUSH
2532: LD_STRING Platonov
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 4115 0 2
2542: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2543: LD_EXP 76
2547: PPUSH
2548: LD_INT 112
2550: PPUSH
2551: LD_INT 97
2553: PPUSH
2554: LD_INT 0
2556: PPUSH
2557: CALL_OW 48
// ComHold ( Platonov ) ;
2561: LD_EXP 76
2565: PPUSH
2566: CALL_OW 140
// platSoldiers = [ ] ;
2570: LD_ADDR_EXP 77
2574: PUSH
2575: EMPTY
2576: ST_TO_ADDR
// unitsTemp = [ ] ;
2577: LD_ADDR_VAR 0 4
2581: PUSH
2582: EMPTY
2583: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2584: LD_ADDR_EXP 78
2588: PUSH
2589: LD_STRING Kuklajs
2591: PPUSH
2592: LD_INT 0
2594: PPUSH
2595: CALL 4115 0 2
2599: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2600: LD_ADDR_EXP 77
2604: PUSH
2605: LD_EXP 77
2609: PUSH
2610: LD_EXP 78
2614: ADD
2615: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2616: LD_EXP 78
2620: PPUSH
2621: LD_INT 110
2623: PPUSH
2624: LD_INT 97
2626: PPUSH
2627: LD_INT 6
2629: PPUSH
2630: LD_INT 0
2632: PPUSH
2633: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2637: LD_ADDR_EXP 79
2641: PUSH
2642: LD_STRING Benko
2644: PPUSH
2645: LD_INT 0
2647: PPUSH
2648: CALL 4115 0 2
2652: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2653: LD_ADDR_EXP 77
2657: PUSH
2658: LD_EXP 77
2662: PUSH
2663: LD_EXP 79
2667: ADD
2668: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2669: LD_ADDR_VAR 0 4
2673: PUSH
2674: LD_VAR 0 4
2678: PUSH
2679: LD_EXP 79
2683: ADD
2684: ST_TO_ADDR
// for i := 1 to 2 do
2685: LD_ADDR_VAR 0 2
2689: PUSH
2690: DOUBLE
2691: LD_INT 1
2693: DEC
2694: ST_TO_ADDR
2695: LD_INT 2
2697: PUSH
2698: FOR_TO
2699: IFFALSE 2766
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2701: LD_INT 0
2703: PPUSH
2704: LD_INT 1
2706: PPUSH
2707: LD_INT 1
2709: PPUSH
2710: LD_INT 3
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: CALL_OW 380
// un = CreateHuman ;
2722: LD_ADDR_VAR 0 3
2726: PUSH
2727: CALL_OW 44
2731: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2732: LD_ADDR_EXP 77
2736: PUSH
2737: LD_EXP 77
2741: PUSH
2742: LD_VAR 0 3
2746: ADD
2747: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2748: LD_ADDR_VAR 0 4
2752: PUSH
2753: LD_VAR 0 4
2757: PUSH
2758: LD_VAR 0 3
2762: ADD
2763: ST_TO_ADDR
// end ;
2764: GO 2698
2766: POP
2767: POP
// for i := 1 to unitsTemp do
2768: LD_ADDR_VAR 0 2
2772: PUSH
2773: DOUBLE
2774: LD_INT 1
2776: DEC
2777: ST_TO_ADDR
2778: LD_VAR 0 4
2782: PUSH
2783: FOR_TO
2784: IFFALSE 2872
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2786: LD_ADDR_VAR 0 5
2790: PUSH
2791: LD_INT 8
2793: PPUSH
2794: LD_INT 22
2796: PUSH
2797: LD_INT 6
2799: PUSH
2800: EMPTY
2801: LIST
2802: LIST
2803: PUSH
2804: LD_INT 30
2806: PUSH
2807: LD_INT 31
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: PPUSH
2818: CALL_OW 70
2822: PUSH
2823: LD_VAR 0 2
2827: ARRAY
2828: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2829: LD_VAR 0 4
2833: PUSH
2834: LD_VAR 0 2
2838: ARRAY
2839: PPUSH
2840: LD_VAR 0 5
2844: PPUSH
2845: CALL_OW 250
2849: PPUSH
2850: LD_VAR 0 5
2854: PPUSH
2855: CALL_OW 251
2859: PPUSH
2860: LD_INT 2
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 50
// end ;
2870: GO 2783
2872: POP
2873: POP
// end ; end_of_file
2874: LD_VAR 0 1
2878: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2879: LD_INT 0
2881: PPUSH
// PrepareBunkiers ;
2882: CALL 3485 0 0
// PrepareTrap ;
2886: CALL 2895 0 0
// end ;
2890: LD_VAR 0 1
2894: RET
// function PrepareTrap ; var i , un ; begin
2895: LD_INT 0
2897: PPUSH
2898: PPUSH
2899: PPUSH
// trapTeam = [ ] ;
2900: LD_ADDR_EXP 81
2904: PUSH
2905: EMPTY
2906: ST_TO_ADDR
// uc_nation = 1 ;
2907: LD_ADDR_OWVAR 21
2911: PUSH
2912: LD_INT 1
2914: ST_TO_ADDR
// uc_side = 1 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 1
2922: ST_TO_ADDR
// hc_gallery =  ;
2923: LD_ADDR_OWVAR 33
2927: PUSH
2928: LD_STRING 
2930: ST_TO_ADDR
// hc_name =  ;
2931: LD_ADDR_OWVAR 26
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_importance = 100 ;
2939: LD_ADDR_OWVAR 32
2943: PUSH
2944: LD_INT 100
2946: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 1
2952: PPUSH
2953: LD_EXP 59
2957: PUSH
2958: LD_INT 1
2960: PLUS
2961: PPUSH
2962: CALL_OW 380
// trapCommander = CreateHuman ;
2966: LD_ADDR_EXP 80
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2976: LD_EXP 80
2980: PPUSH
2981: LD_INT 13
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2991: LD_EXP 80
2995: PPUSH
2996: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3000: LD_ADDR_EXP 81
3004: PUSH
3005: LD_EXP 81
3009: PUSH
3010: LD_EXP 80
3014: ADD
3015: ST_TO_ADDR
// hc_importance = 0 ;
3016: LD_ADDR_OWVAR 32
3020: PUSH
3021: LD_INT 0
3023: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3024: LD_ADDR_VAR 0 2
3028: PUSH
3029: DOUBLE
3030: LD_INT 1
3032: DEC
3033: ST_TO_ADDR
3034: LD_EXP 60
3038: PUSH
3039: LD_INT 1
3041: ARRAY
3042: PUSH
3043: FOR_TO
3044: IFFALSE 3136
// begin hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 59
3064: PPUSH
3065: CALL_OW 380
// un = CreateHuman ;
3069: LD_ADDR_VAR 0 3
3073: PUSH
3074: CALL_OW 44
3078: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3079: LD_VAR 0 3
3083: PPUSH
3084: LD_INT 12
3086: PPUSH
3087: LD_INT 0
3089: PPUSH
3090: CALL_OW 49
// ComCrawl ( un ) ;
3094: LD_VAR 0 3
3098: PPUSH
3099: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3103: LD_VAR 0 3
3107: PPUSH
3108: LD_INT 116
3110: PPUSH
3111: LD_INT 21
3113: PPUSH
3114: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3118: LD_ADDR_EXP 81
3122: PUSH
3123: LD_EXP 81
3127: PUSH
3128: LD_VAR 0 3
3132: ADD
3133: ST_TO_ADDR
// end ;
3134: GO 3043
3136: POP
3137: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3138: LD_ADDR_VAR 0 2
3142: PUSH
3143: DOUBLE
3144: LD_INT 1
3146: DEC
3147: ST_TO_ADDR
3148: LD_EXP 60
3152: PUSH
3153: LD_INT 2
3155: ARRAY
3156: PUSH
3157: FOR_TO
3158: IFFALSE 3250
// begin hc_name =  ;
3160: LD_ADDR_OWVAR 26
3164: PUSH
3165: LD_STRING 
3167: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3168: LD_INT 0
3170: PPUSH
3171: LD_INT 1
3173: PPUSH
3174: LD_EXP 59
3178: PPUSH
3179: CALL_OW 380
// un = CreateHuman ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3193: LD_VAR 0 3
3197: PPUSH
3198: LD_INT 14
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// ComCrawl ( un ) ;
3208: LD_VAR 0 3
3212: PPUSH
3213: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3217: LD_VAR 0 3
3221: PPUSH
3222: LD_INT 116
3224: PPUSH
3225: LD_INT 21
3227: PPUSH
3228: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3232: LD_ADDR_EXP 81
3236: PUSH
3237: LD_EXP 81
3241: PUSH
3242: LD_VAR 0 3
3246: ADD
3247: ST_TO_ADDR
// end ;
3248: GO 3157
3250: POP
3251: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3252: LD_ADDR_VAR 0 2
3256: PUSH
3257: DOUBLE
3258: LD_INT 1
3260: DEC
3261: ST_TO_ADDR
3262: LD_EXP 60
3266: PUSH
3267: LD_INT 3
3269: ARRAY
3270: PUSH
3271: FOR_TO
3272: IFFALSE 3364
// begin hc_name =  ;
3274: LD_ADDR_OWVAR 26
3278: PUSH
3279: LD_STRING 
3281: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3282: LD_INT 0
3284: PPUSH
3285: LD_INT 1
3287: PPUSH
3288: LD_EXP 59
3292: PPUSH
3293: CALL_OW 380
// un = CreateHuman ;
3297: LD_ADDR_VAR 0 3
3301: PUSH
3302: CALL_OW 44
3306: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3307: LD_VAR 0 3
3311: PPUSH
3312: LD_INT 23
3314: PPUSH
3315: LD_INT 0
3317: PPUSH
3318: CALL_OW 49
// ComCrawl ( un ) ;
3322: LD_VAR 0 3
3326: PPUSH
3327: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3331: LD_VAR 0 3
3335: PPUSH
3336: LD_INT 109
3338: PPUSH
3339: LD_INT 8
3341: PPUSH
3342: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3346: LD_ADDR_EXP 81
3350: PUSH
3351: LD_EXP 81
3355: PUSH
3356: LD_VAR 0 3
3360: ADD
3361: ST_TO_ADDR
// end ;
3362: GO 3271
3364: POP
3365: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3366: LD_ADDR_VAR 0 2
3370: PUSH
3371: DOUBLE
3372: LD_INT 1
3374: DEC
3375: ST_TO_ADDR
3376: LD_EXP 60
3380: PUSH
3381: LD_INT 4
3383: ARRAY
3384: PUSH
3385: FOR_TO
3386: IFFALSE 3478
// begin hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 1
3401: PPUSH
3402: LD_EXP 59
3406: PPUSH
3407: CALL_OW 380
// un = CreateHuman ;
3411: LD_ADDR_VAR 0 3
3415: PUSH
3416: CALL_OW 44
3420: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3421: LD_VAR 0 3
3425: PPUSH
3426: LD_INT 24
3428: PPUSH
3429: LD_INT 0
3431: PPUSH
3432: CALL_OW 49
// ComCrawl ( un ) ;
3436: LD_VAR 0 3
3440: PPUSH
3441: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3445: LD_VAR 0 3
3449: PPUSH
3450: LD_INT 109
3452: PPUSH
3453: LD_INT 8
3455: PPUSH
3456: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3460: LD_ADDR_EXP 81
3464: PUSH
3465: LD_EXP 81
3469: PUSH
3470: LD_VAR 0 3
3474: ADD
3475: ST_TO_ADDR
// end ;
3476: GO 3385
3478: POP
3479: POP
// end ;
3480: LD_VAR 0 1
3484: RET
// function PrepareBunkiers ; var i , un , bunker , animal ; begin
3485: LD_INT 0
3487: PPUSH
3488: PPUSH
3489: PPUSH
3490: PPUSH
3491: PPUSH
// for animal in FilterUnitsInArea ( LeftHillArea , [ [ f_side , 0 ] ] ) do
3492: LD_ADDR_VAR 0 5
3496: PUSH
3497: LD_INT 17
3499: PPUSH
3500: LD_INT 22
3502: PUSH
3503: LD_INT 0
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: PPUSH
3513: CALL_OW 70
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3532
// RemoveUnit ( animal ) ;
3521: LD_VAR 0 5
3525: PPUSH
3526: CALL_OW 64
3530: GO 3518
3532: POP
3533: POP
// uc_side = 1 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 1
3541: ST_TO_ADDR
// uc_nation = nation_american ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// bc_level = 1 ;
3550: LD_ADDR_OWVAR 43
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// bc_type = b_breastwork ;
3558: LD_ADDR_OWVAR 42
3562: PUSH
3563: LD_INT 31
3565: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_INT 104
3573: PPUSH
3574: LD_INT 59
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: CALL_OW 47
3584: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3585: LD_ADDR_EXP 82
3589: PUSH
3590: LD_EXP 82
3594: PUSH
3595: LD_VAR 0 4
3599: ADD
3600: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3601: LD_EXP 59
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 101
3622: PPUSH
3623: LD_INT 55
3625: PPUSH
3626: LD_INT 4
3628: PPUSH
3629: CALL_OW 47
3633: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3634: LD_ADDR_EXP 82
3638: PUSH
3639: LD_EXP 82
3643: PUSH
3644: LD_VAR 0 4
3648: ADD
3649: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3650: LD_EXP 59
3654: PPUSH
3655: LD_VAR 0 4
3659: PPUSH
3660: CALL 5208 0 2
// for animal in FilterUnitsInArea ( RightHillArea , [ [ f_side , 0 ] ] ) do
3664: LD_ADDR_VAR 0 5
3668: PUSH
3669: LD_INT 16
3671: PPUSH
3672: LD_INT 22
3674: PUSH
3675: LD_INT 0
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: EMPTY
3683: LIST
3684: PPUSH
3685: CALL_OW 70
3689: PUSH
3690: FOR_IN
3691: IFFALSE 3704
// RemoveUnit ( animal ) ;
3693: LD_VAR 0 5
3697: PPUSH
3698: CALL_OW 64
3702: GO 3690
3704: POP
3705: POP
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3706: LD_ADDR_VAR 0 4
3710: PUSH
3711: LD_INT 132
3713: PPUSH
3714: LD_INT 62
3716: PPUSH
3717: LD_INT 1
3719: PPUSH
3720: CALL_OW 47
3724: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3725: LD_ADDR_EXP 83
3729: PUSH
3730: LD_EXP 83
3734: PUSH
3735: LD_VAR 0 4
3739: ADD
3740: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3741: LD_EXP 59
3745: PPUSH
3746: LD_VAR 0 4
3750: PPUSH
3751: CALL 5208 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3755: LD_ADDR_VAR 0 4
3759: PUSH
3760: LD_INT 134
3762: PPUSH
3763: LD_INT 66
3765: PPUSH
3766: LD_INT 1
3768: PPUSH
3769: CALL_OW 47
3773: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3774: LD_ADDR_EXP 83
3778: PUSH
3779: LD_EXP 83
3783: PUSH
3784: LD_VAR 0 4
3788: ADD
3789: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3790: LD_EXP 59
3794: PPUSH
3795: LD_VAR 0 4
3799: PPUSH
3800: CALL 5208 0 2
// bc_type = b_depot ;
3804: LD_ADDR_OWVAR 42
3808: PUSH
3809: LD_INT 0
3811: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3812: LD_ADDR_EXP 84
3816: PUSH
3817: LD_INT 92
3819: PPUSH
3820: LD_INT 51
3822: PPUSH
3823: LD_INT 2
3825: PPUSH
3826: CALL_OW 47
3830: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3831: LD_ADDR_EXP 85
3835: PUSH
3836: LD_INT 193
3838: ST_TO_ADDR
// amLeftEngs = [ ] ;
3839: LD_ADDR_EXP 86
3843: PUSH
3844: EMPTY
3845: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3846: LD_ADDR_VAR 0 2
3850: PUSH
3851: DOUBLE
3852: LD_INT 1
3854: DEC
3855: ST_TO_ADDR
3856: LD_INT 1
3858: PUSH
3859: LD_INT 1
3861: PUSH
3862: LD_INT 1
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: CALL_OW 12
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: LIST
3877: PUSH
3878: LD_OWVAR 67
3882: ARRAY
3883: PUSH
3884: FOR_TO
3885: IFFALSE 3976
// begin uc_nation = 1 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// uc_side = 1 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// hc_gallery =  ;
3903: LD_ADDR_OWVAR 33
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// hc_name =  ;
3911: LD_ADDR_OWVAR 26
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3919: LD_INT 0
3921: PPUSH
3922: LD_INT 2
3924: PPUSH
3925: LD_EXP 59
3929: PPUSH
3930: CALL_OW 380
// un = CreateHuman ;
3934: LD_ADDR_VAR 0 3
3938: PUSH
3939: CALL_OW 44
3943: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3944: LD_ADDR_EXP 86
3948: PUSH
3949: LD_EXP 86
3953: PUSH
3954: LD_VAR 0 3
3958: ADD
3959: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3960: LD_VAR 0 3
3964: PPUSH
3965: LD_EXP 84
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3884
3976: POP
3977: POP
// if Difficulty = 3 then
3978: LD_OWVAR 67
3982: PUSH
3983: LD_INT 3
3985: EQUAL
3986: IFFALSE 4110
// begin amRightEngs = [ ] ;
3988: LD_ADDR_EXP 87
3992: PUSH
3993: EMPTY
3994: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3995: LD_ADDR_VAR 0 2
3999: PUSH
4000: DOUBLE
4001: LD_INT 1
4003: DEC
4004: ST_TO_ADDR
4005: LD_INT 1
4007: PPUSH
4008: LD_INT 2
4010: PPUSH
4011: CALL_OW 12
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4108
// begin uc_nation = 1 ;
4019: LD_ADDR_OWVAR 21
4023: PUSH
4024: LD_INT 1
4026: ST_TO_ADDR
// uc_side = 1 ;
4027: LD_ADDR_OWVAR 20
4031: PUSH
4032: LD_INT 1
4034: ST_TO_ADDR
// hc_gallery =  ;
4035: LD_ADDR_OWVAR 33
4039: PUSH
4040: LD_STRING 
4042: ST_TO_ADDR
// hc_name =  ;
4043: LD_ADDR_OWVAR 26
4047: PUSH
4048: LD_STRING 
4050: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
4051: LD_INT 0
4053: PPUSH
4054: LD_INT 2
4056: PPUSH
4057: LD_EXP 59
4061: PPUSH
4062: CALL_OW 380
// un = CreateHuman ;
4066: LD_ADDR_VAR 0 3
4070: PUSH
4071: CALL_OW 44
4075: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
4076: LD_ADDR_EXP 87
4080: PUSH
4081: LD_EXP 87
4085: PUSH
4086: LD_VAR 0 3
4090: ADD
4091: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_EXP 85
4101: PPUSH
4102: CALL_OW 52
// end ;
4106: GO 4016
4108: POP
4109: POP
// end ; end ; end_of_file
4110: LD_VAR 0 1
4114: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4115: LD_INT 0
4117: PPUSH
4118: PPUSH
// if exist_mode then
4119: LD_VAR 0 2
4123: IFFALSE 4148
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4125: LD_ADDR_VAR 0 4
4129: PUSH
4130: LD_EXP 49
4134: PUSH
4135: LD_VAR 0 1
4139: STR
4140: PPUSH
4141: CALL_OW 34
4145: ST_TO_ADDR
4146: GO 4163
// unit := NewCharacter ( ident ) ;
4148: LD_ADDR_VAR 0 4
4152: PUSH
4153: LD_VAR 0 1
4157: PPUSH
4158: CALL_OW 25
4162: ST_TO_ADDR
// result := unit ;
4163: LD_ADDR_VAR 0 3
4167: PUSH
4168: LD_VAR 0 4
4172: ST_TO_ADDR
// end ;
4173: LD_VAR 0 3
4177: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4178: LD_INT 0
4180: PPUSH
4181: PPUSH
4182: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4183: LD_ADDR_VAR 0 1
4187: PUSH
4188: LD_VAR 0 1
4192: PUSH
4193: LD_EXP 62
4197: PUSH
4198: LD_EXP 63
4202: PUSH
4203: LD_EXP 64
4207: PUSH
4208: LD_EXP 65
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: DIFF
4219: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: LD_VAR 0 1
4229: PUSH
4230: LD_INT 1
4232: PPUSH
4233: LD_VAR 0 1
4237: PPUSH
4238: CALL_OW 12
4242: ARRAY
4243: ST_TO_ADDR
// if radio then
4244: LD_VAR 0 4
4248: IFFALSE 4297
// begin if GetSex ( speaker ) = sex_male then
4250: LD_VAR 0 7
4254: PPUSH
4255: CALL_OW 258
4259: PUSH
4260: LD_INT 1
4262: EQUAL
4263: IFFALSE 4281
// SayRadio ( speaker , dialogMID ) else
4265: LD_VAR 0 7
4269: PPUSH
4270: LD_VAR 0 2
4274: PPUSH
4275: CALL_OW 94
4279: GO 4295
// SayRadio ( speaker , dialogFID ) ;
4281: LD_VAR 0 7
4285: PPUSH
4286: LD_VAR 0 3
4290: PPUSH
4291: CALL_OW 94
// end else
4295: GO 4342
// begin if GetSex ( speaker ) = sex_male then
4297: LD_VAR 0 7
4301: PPUSH
4302: CALL_OW 258
4306: PUSH
4307: LD_INT 1
4309: EQUAL
4310: IFFALSE 4328
// Say ( speaker , dialogMID ) else
4312: LD_VAR 0 7
4316: PPUSH
4317: LD_VAR 0 2
4321: PPUSH
4322: CALL_OW 88
4326: GO 4342
// Say ( speaker , dialogFID ) ;
4328: LD_VAR 0 7
4332: PPUSH
4333: LD_VAR 0 3
4337: PPUSH
4338: CALL_OW 88
// end ; result := speaker ;
4342: LD_ADDR_VAR 0 5
4346: PUSH
4347: LD_VAR 0 7
4351: ST_TO_ADDR
// end ;
4352: LD_VAR 0 5
4356: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4357: LD_INT 0
4359: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4360: LD_VAR 0 1
4364: PPUSH
4365: CALL_OW 255
4369: PUSH
4370: LD_VAR 0 3
4374: EQUAL
4375: PUSH
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 302
4385: AND
4386: IFFALSE 4408
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4388: LD_VAR 0 1
4392: PPUSH
4393: LD_EXP 48
4397: PUSH
4398: LD_VAR 0 2
4402: STR
4403: PPUSH
4404: CALL_OW 38
// end ;
4408: LD_VAR 0 4
4412: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4413: LD_INT 0
4415: PPUSH
4416: PPUSH
4417: PPUSH
// resultCharactersToSave = [ ] ;
4418: LD_ADDR_VAR 0 6
4422: PUSH
4423: EMPTY
4424: ST_TO_ADDR
// for unit in characters do
4425: LD_ADDR_VAR 0 5
4429: PUSH
4430: LD_VAR 0 1
4434: PUSH
4435: FOR_IN
4436: IFFALSE 4484
// if GetSide ( unit ) = side and IsOK ( unit ) then
4438: LD_VAR 0 5
4442: PPUSH
4443: CALL_OW 255
4447: PUSH
4448: LD_VAR 0 3
4452: EQUAL
4453: PUSH
4454: LD_VAR 0 5
4458: PPUSH
4459: CALL_OW 302
4463: AND
4464: IFFALSE 4482
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 6
4475: PUSH
4476: LD_VAR 0 5
4480: ADD
4481: ST_TO_ADDR
4482: GO 4435
4484: POP
4485: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4486: LD_VAR 0 6
4490: PPUSH
4491: LD_EXP 48
4495: PUSH
4496: LD_VAR 0 2
4500: STR
4501: PPUSH
4502: CALL_OW 38
// end ;
4506: LD_VAR 0 4
4510: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4511: LD_INT 0
4513: PPUSH
4514: PPUSH
4515: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4516: LD_ADDR_VAR 0 3
4520: PUSH
4521: LD_STRING QMoreInfo
4523: PPUSH
4524: LD_VAR 0 1
4528: PPUSH
4529: CALL_OW 98
4533: ST_TO_ADDR
// case dec of 1 :
4534: LD_VAR 0 3
4538: PUSH
4539: LD_INT 1
4541: DOUBLE
4542: EQUAL
4543: IFTRUE 4547
4545: GO 4607
4547: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4548: LD_EXP 62
4552: PPUSH
4553: LD_STRING D2a-Bur-1
4555: PPUSH
4556: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4560: LD_EXP 76
4564: PPUSH
4565: LD_STRING D2a-Pla-1
4567: PPUSH
4568: CALL_OW 88
// q1 = q diff 1 ;
4572: LD_ADDR_VAR 0 4
4576: PUSH
4577: LD_VAR 0 1
4581: PUSH
4582: LD_INT 1
4584: DIFF
4585: ST_TO_ADDR
// if q1 >= 2 then
4586: LD_VAR 0 4
4590: PUSH
4591: LD_INT 2
4593: GREATEREQUAL
4594: IFFALSE 4605
// Question1 ( q1 ) ;
4596: LD_VAR 0 4
4600: PPUSH
4601: CALL 4511 0 1
// end ; 2 :
4605: GO 4744
4607: LD_INT 2
4609: DOUBLE
4610: EQUAL
4611: IFTRUE 4615
4613: GO 4675
4615: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4616: LD_EXP 62
4620: PPUSH
4621: LD_STRING D2b-Bur-1
4623: PPUSH
4624: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4628: LD_EXP 76
4632: PPUSH
4633: LD_STRING D2b-Pla-1
4635: PPUSH
4636: CALL_OW 88
// q1 = q diff 2 ;
4640: LD_ADDR_VAR 0 4
4644: PUSH
4645: LD_VAR 0 1
4649: PUSH
4650: LD_INT 2
4652: DIFF
4653: ST_TO_ADDR
// if q1 >= 2 then
4654: LD_VAR 0 4
4658: PUSH
4659: LD_INT 2
4661: GREATEREQUAL
4662: IFFALSE 4673
// Question1 ( q1 ) ;
4664: LD_VAR 0 4
4668: PPUSH
4669: CALL 4511 0 1
// end ; 3 :
4673: GO 4744
4675: LD_INT 3
4677: DOUBLE
4678: EQUAL
4679: IFTRUE 4683
4681: GO 4743
4683: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4684: LD_EXP 62
4688: PPUSH
4689: LD_STRING D2c-Bur-1
4691: PPUSH
4692: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4696: LD_EXP 76
4700: PPUSH
4701: LD_STRING D2c-Pla-1
4703: PPUSH
4704: CALL_OW 88
// q1 = q diff 3 ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_VAR 0 1
4717: PUSH
4718: LD_INT 3
4720: DIFF
4721: ST_TO_ADDR
// if q1 >= 2 then
4722: LD_VAR 0 4
4726: PUSH
4727: LD_INT 2
4729: GREATEREQUAL
4730: IFFALSE 4741
// Question1 ( q1 ) ;
4732: LD_VAR 0 4
4736: PPUSH
4737: CALL 4511 0 1
// end ; end ;
4741: GO 4744
4743: POP
// end ;
4744: LD_VAR 0 2
4748: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4749: LD_INT 0
4751: PPUSH
4752: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL_OW 302
4762: NOT
4763: PUSH
4764: LD_VAR 0 2
4768: PPUSH
4769: CALL_OW 302
4773: NOT
4774: OR
4775: PUSH
4776: LD_VAR 0 3
4780: PPUSH
4781: CALL_OW 302
4785: NOT
4786: OR
4787: PUSH
4788: LD_VAR 0 3
4792: PPUSH
4793: CALL_OW 261
4797: PUSH
4798: LD_INT 100
4800: EQUAL
4801: OR
4802: PUSH
4803: LD_VAR 0 2
4807: PPUSH
4808: CALL_OW 266
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: LD_INT 1
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: IN
4823: NOT
4824: OR
4825: IFFALSE 4829
// exit ;
4827: GO 4962
// AddComTransport ( engineer , depot , mat_oil ) ;
4829: LD_VAR 0 1
4833: PPUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: LD_INT 2
4841: PPUSH
4842: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4846: LD_INT 35
4848: PPUSH
4849: CALL_OW 67
// until Carry ( engineer ) ;
4853: LD_VAR 0 1
4857: PPUSH
4858: CALL_OW 281
4862: IFFALSE 4846
// RemoveTasks ( engineer ) ;
4864: LD_VAR 0 1
4868: PPUSH
4869: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4873: LD_VAR 0 1
4877: PPUSH
4878: LD_STRING O
4880: PUSH
4881: LD_INT 0
4883: PUSH
4884: LD_INT 0
4886: PUSH
4887: LD_VAR 0 3
4891: PUSH
4892: LD_INT 0
4894: PUSH
4895: LD_INT 0
4897: PUSH
4898: LD_INT 0
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: PUSH
4910: EMPTY
4911: LIST
4912: PPUSH
4913: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4917: LD_INT 35
4919: PPUSH
4920: CALL_OW 67
// until not Carry ( engineer ) ;
4924: LD_VAR 0 1
4928: PPUSH
4929: CALL_OW 281
4933: NOT
4934: IFFALSE 4917
// SetFuel ( vehicle , 100 ) ;
4936: LD_VAR 0 3
4940: PPUSH
4941: LD_INT 100
4943: PPUSH
4944: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4948: LD_VAR 0 1
4952: PPUSH
4953: LD_VAR 0 2
4957: PPUSH
4958: CALL_OW 180
// end ;
4962: LD_VAR 0 4
4966: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4967: LD_INT 0
4969: PPUSH
4970: PPUSH
4971: PPUSH
4972: PPUSH
4973: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4974: LD_ADDR_VAR 0 8
4978: PUSH
4979: LD_INT 48
4981: PUSH
4982: LD_INT 49
4984: PUSH
4985: LD_INT 50
4987: PUSH
4988: LD_INT 20
4990: PUSH
4991: LD_INT 1
4993: PUSH
4994: LD_INT 51
4996: PUSH
4997: LD_INT 52
4999: PUSH
5000: LD_INT 69
5002: PUSH
5003: LD_INT 39
5005: PUSH
5006: LD_INT 34
5008: PUSH
5009: LD_INT 40
5011: PUSH
5012: LD_INT 53
5014: PUSH
5015: LD_INT 71
5017: PUSH
5018: LD_INT 57
5020: PUSH
5021: LD_INT 58
5023: PUSH
5024: LD_INT 44
5026: PUSH
5027: LD_INT 32
5029: PUSH
5030: LD_INT 27
5032: PUSH
5033: LD_INT 23
5035: PUSH
5036: LD_INT 33
5038: PUSH
5039: LD_INT 59
5041: PUSH
5042: LD_INT 54
5044: PUSH
5045: LD_INT 55
5047: PUSH
5048: LD_INT 56
5050: PUSH
5051: LD_INT 63
5053: PUSH
5054: LD_INT 64
5056: PUSH
5057: LD_INT 65
5059: PUSH
5060: LD_INT 30
5062: PUSH
5063: LD_INT 31
5065: PUSH
5066: LD_INT 21
5068: PUSH
5069: LD_INT 22
5071: PUSH
5072: LD_INT 25
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5109: LD_ADDR_VAR 0 5
5113: PUSH
5114: DOUBLE
5115: LD_INT 1
5117: DEC
5118: ST_TO_ADDR
5119: LD_VAR 0 8
5123: PUSH
5124: FOR_TO
5125: IFFALSE 5201
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5127: LD_VAR 0 8
5131: PUSH
5132: LD_VAR 0 5
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 1
5142: PPUSH
5143: CALL_OW 321
5147: PUSH
5148: LD_INT 1
5150: EQUAL
5151: PUSH
5152: LD_VAR 0 8
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PPUSH
5163: LD_VAR 0 3
5167: PPUSH
5168: CALL_OW 482
5172: PUSH
5173: LD_INT 1
5175: EQUAL
5176: AND
5177: IFFALSE 5199
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5179: LD_VAR 0 2
5183: PPUSH
5184: LD_VAR 0 8
5188: PUSH
5189: LD_VAR 0 5
5193: ARRAY
5194: PPUSH
5195: CALL_OW 184
5199: GO 5124
5201: POP
5202: POP
// end ;
5203: LD_VAR 0 4
5207: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5208: LD_INT 0
5210: PPUSH
5211: PPUSH
5212: PPUSH
// uc_side := GetSide ( b ) ;
5213: LD_ADDR_OWVAR 20
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: CALL_OW 255
5227: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5228: LD_ADDR_OWVAR 21
5232: PUSH
5233: LD_VAR 0 2
5237: PPUSH
5238: CALL_OW 248
5242: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 1
5248: PPUSH
5249: LD_VAR 0 1
5253: PPUSH
5254: CALL_OW 380
// un = CreateHuman ;
5258: LD_ADDR_VAR 0 4
5262: PUSH
5263: CALL_OW 44
5267: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5268: LD_ADDR_VAR 0 5
5272: PUSH
5273: LD_VAR 0 2
5277: PPUSH
5278: CALL_OW 254
5282: PUSH
5283: LD_INT 3
5285: MINUS
5286: ST_TO_ADDR
// if dir < 0 then
5287: LD_VAR 0 5
5291: PUSH
5292: LD_INT 0
5294: LESS
5295: IFFALSE 5311
// dir := 6 + dir ;
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_VAR 0 5
5309: PLUS
5310: ST_TO_ADDR
// SetDir ( un , dir ) ;
5311: LD_VAR 0 4
5315: PPUSH
5316: LD_VAR 0 5
5320: PPUSH
5321: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5325: LD_VAR 0 4
5329: PPUSH
5330: LD_VAR 0 2
5334: PPUSH
5335: CALL_OW 52
// result = un ;
5339: LD_ADDR_VAR 0 3
5343: PUSH
5344: LD_VAR 0 4
5348: ST_TO_ADDR
// end ;
5349: LD_VAR 0 3
5353: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5354: LD_INT 0
5356: PPUSH
5357: PPUSH
// dir := GetDir ( b ) - 3 ;
5358: LD_ADDR_VAR 0 4
5362: PUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 254
5372: PUSH
5373: LD_INT 3
5375: MINUS
5376: ST_TO_ADDR
// if dir < 0 then
5377: LD_VAR 0 4
5381: PUSH
5382: LD_INT 0
5384: LESS
5385: IFFALSE 5401
// dir := 6 + dir ;
5387: LD_ADDR_VAR 0 4
5391: PUSH
5392: LD_INT 6
5394: PUSH
5395: LD_VAR 0 4
5399: PLUS
5400: ST_TO_ADDR
// SetDir ( un , dir ) ;
5401: LD_VAR 0 1
5405: PPUSH
5406: LD_VAR 0 4
5410: PPUSH
5411: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_VAR 0 2
5424: PPUSH
5425: CALL_OW 52
// result = un ;
5429: LD_ADDR_VAR 0 3
5433: PUSH
5434: LD_VAR 0 1
5438: ST_TO_ADDR
// end ;
5439: LD_VAR 0 3
5443: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5444: LD_INT 0
5446: PPUSH
5447: PPUSH
5448: PPUSH
// tmp = [ ] ;
5449: LD_ADDR_VAR 0 5
5453: PUSH
5454: EMPTY
5455: ST_TO_ADDR
// if not vehicles then
5456: LD_VAR 0 1
5460: NOT
5461: IFFALSE 5465
// exit ;
5463: GO 5582
// for i in vehicles do
5465: LD_ADDR_VAR 0 4
5469: PUSH
5470: LD_VAR 0 1
5474: PUSH
5475: FOR_IN
5476: IFFALSE 5566
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5478: LD_ADDR_VAR 0 5
5482: PUSH
5483: LD_VAR 0 5
5487: PPUSH
5488: LD_INT 1
5490: PPUSH
5491: LD_VAR 0 4
5495: PPUSH
5496: CALL_OW 265
5500: PUSH
5501: LD_VAR 0 4
5505: PPUSH
5506: CALL_OW 262
5510: PUSH
5511: LD_VAR 0 4
5515: PPUSH
5516: CALL_OW 263
5520: PUSH
5521: LD_VAR 0 4
5525: PPUSH
5526: CALL_OW 264
5530: PUSH
5531: LD_VAR 0 4
5535: PPUSH
5536: CALL_OW 261
5540: PUSH
5541: LD_VAR 0 4
5545: PPUSH
5546: CALL_OW 256
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 2
5563: ST_TO_ADDR
5564: GO 5475
5566: POP
5567: POP
// SaveVariable ( tmp , ident ) ;
5568: LD_VAR 0 5
5572: PPUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 39
// end ;
5582: LD_VAR 0 3
5586: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5587: LD_INT 0
5589: PPUSH
5590: PPUSH
5591: PPUSH
// buildingsToSave = [ ] ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: EMPTY
5598: ST_TO_ADDR
// if not buildings then
5599: LD_VAR 0 1
5603: NOT
5604: IFFALSE 5608
// exit ;
5606: GO 6183
// for i in buildings do
5608: LD_ADDR_VAR 0 4
5612: PUSH
5613: LD_VAR 0 1
5617: PUSH
5618: FOR_IN
5619: IFFALSE 6167
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5621: LD_VAR 0 4
5625: PPUSH
5626: CALL_OW 266
5630: PUSH
5631: LD_INT 6
5633: PUSH
5634: LD_INT 7
5636: PUSH
5637: LD_INT 8
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: LIST
5644: IN
5645: IFFALSE 5770
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5647: LD_ADDR_VAR 0 5
5651: PUSH
5652: LD_VAR 0 5
5656: PUSH
5657: LD_VAR 0 4
5661: PPUSH
5662: CALL_OW 266
5666: PUSH
5667: LD_VAR 0 4
5671: PPUSH
5672: CALL_OW 250
5676: PUSH
5677: LD_VAR 0 4
5681: PPUSH
5682: CALL_OW 251
5686: PUSH
5687: LD_VAR 0 4
5691: PPUSH
5692: CALL_OW 254
5696: PUSH
5697: LD_VAR 0 4
5701: PPUSH
5702: CALL_OW 267
5706: PUSH
5707: LD_VAR 0 4
5711: PPUSH
5712: CALL_OW 248
5716: PUSH
5717: LD_VAR 0 4
5721: PPUSH
5722: CALL_OW 256
5726: PUSH
5727: LD_VAR 0 4
5731: PPUSH
5732: LD_INT 1
5734: PPUSH
5735: CALL_OW 268
5739: PUSH
5740: LD_VAR 0 4
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: CALL_OW 268
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: LIST
5763: PUSH
5764: EMPTY
5765: LIST
5766: ADD
5767: ST_TO_ADDR
5768: GO 6165
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5770: LD_VAR 0 4
5774: PPUSH
5775: CALL_OW 266
5779: PUSH
5780: LD_INT 32
5782: PUSH
5783: LD_INT 33
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: IN
5790: IFFALSE 5898
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5792: LD_ADDR_VAR 0 5
5796: PUSH
5797: LD_VAR 0 5
5801: PUSH
5802: LD_VAR 0 4
5806: PPUSH
5807: CALL_OW 266
5811: PUSH
5812: LD_VAR 0 4
5816: PPUSH
5817: CALL_OW 250
5821: PUSH
5822: LD_VAR 0 4
5826: PPUSH
5827: CALL_OW 251
5831: PUSH
5832: LD_VAR 0 4
5836: PPUSH
5837: CALL_OW 254
5841: PUSH
5842: LD_VAR 0 4
5846: PPUSH
5847: CALL_OW 267
5851: PUSH
5852: LD_VAR 0 4
5856: PPUSH
5857: CALL_OW 248
5861: PUSH
5862: LD_VAR 0 4
5866: PPUSH
5867: CALL_OW 256
5871: PUSH
5872: LD_VAR 0 4
5876: PPUSH
5877: CALL_OW 269
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: PUSH
5892: EMPTY
5893: LIST
5894: ADD
5895: ST_TO_ADDR
5896: GO 6165
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5898: LD_VAR 0 4
5902: PPUSH
5903: CALL_OW 266
5907: PUSH
5908: LD_INT 0
5910: PUSH
5911: LD_INT 1
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: IN
5918: IFFALSE 6072
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5920: LD_ADDR_VAR 0 5
5924: PUSH
5925: LD_VAR 0 5
5929: PUSH
5930: LD_VAR 0 4
5934: PPUSH
5935: CALL_OW 266
5939: PUSH
5940: LD_VAR 0 4
5944: PPUSH
5945: CALL_OW 250
5949: PUSH
5950: LD_VAR 0 4
5954: PPUSH
5955: CALL_OW 251
5959: PUSH
5960: LD_VAR 0 4
5964: PPUSH
5965: CALL_OW 254
5969: PUSH
5970: LD_VAR 0 4
5974: PPUSH
5975: CALL_OW 267
5979: PUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 248
5989: PUSH
5990: LD_VAR 0 4
5994: PPUSH
5995: CALL_OW 256
5999: PUSH
6000: LD_VAR 0 4
6004: PPUSH
6005: CALL_OW 274
6009: PPUSH
6010: LD_INT 1
6012: PPUSH
6013: CALL_OW 275
6017: PUSH
6018: LD_VAR 0 4
6022: PPUSH
6023: CALL_OW 274
6027: PPUSH
6028: LD_INT 2
6030: PPUSH
6031: CALL_OW 275
6035: PUSH
6036: LD_VAR 0 4
6040: PPUSH
6041: CALL_OW 274
6045: PPUSH
6046: LD_INT 3
6048: PPUSH
6049: CALL_OW 275
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: PUSH
6066: EMPTY
6067: LIST
6068: ADD
6069: ST_TO_ADDR
6070: GO 6165
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: LD_VAR 0 5
6081: PUSH
6082: LD_VAR 0 4
6086: PPUSH
6087: CALL_OW 266
6091: PUSH
6092: LD_VAR 0 4
6096: PPUSH
6097: CALL_OW 250
6101: PUSH
6102: LD_VAR 0 4
6106: PPUSH
6107: CALL_OW 251
6111: PUSH
6112: LD_VAR 0 4
6116: PPUSH
6117: CALL_OW 254
6121: PUSH
6122: LD_VAR 0 4
6126: PPUSH
6127: CALL_OW 267
6131: PUSH
6132: LD_VAR 0 4
6136: PPUSH
6137: CALL_OW 248
6141: PUSH
6142: LD_VAR 0 4
6146: PPUSH
6147: CALL_OW 256
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: PUSH
6161: EMPTY
6162: LIST
6163: ADD
6164: ST_TO_ADDR
// end ;
6165: GO 5618
6167: POP
6168: POP
// SaveVariable ( buildingsToSave , ident ) ;
6169: LD_VAR 0 5
6173: PPUSH
6174: LD_VAR 0 2
6178: PPUSH
6179: CALL_OW 39
// end ;
6183: LD_VAR 0 3
6187: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6188: LD_INT 0
6190: PPUSH
6191: PPUSH
6192: PPUSH
6193: PPUSH
6194: PPUSH
// belkovTeam = [ ] ;
6195: LD_ADDR_EXP 73
6199: PUSH
6200: EMPTY
6201: ST_TO_ADDR
// if belkovReturn then
6202: LD_EXP 6
6206: IFFALSE 6224
// belkovTeam = belkovTeam ^ Belkov ;
6208: LD_ADDR_EXP 73
6212: PUSH
6213: LD_EXP 73
6217: PUSH
6218: LD_EXP 64
6222: ADD
6223: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6224: LD_ADDR_EXP 73
6228: PUSH
6229: LD_EXP 73
6233: PUSH
6234: LD_EXP 68
6238: ADD
6239: ST_TO_ADDR
// for unit in other_survivors do
6240: LD_ADDR_VAR 0 3
6244: PUSH
6245: LD_EXP 66
6249: PUSH
6250: FOR_IN
6251: IFFALSE 6292
// if IsOK ( unit ) and belkovTeam < 5 then
6253: LD_VAR 0 3
6257: PPUSH
6258: CALL_OW 302
6262: PUSH
6263: LD_EXP 73
6267: PUSH
6268: LD_INT 5
6270: LESS
6271: AND
6272: IFFALSE 6290
// belkovTeam = belkovTeam ^ unit ;
6274: LD_ADDR_EXP 73
6278: PUSH
6279: LD_EXP 73
6283: PUSH
6284: LD_VAR 0 3
6288: ADD
6289: ST_TO_ADDR
6290: GO 6250
6292: POP
6293: POP
// if belkovTeam < 5 then
6294: LD_EXP 73
6298: PUSH
6299: LD_INT 5
6301: LESS
6302: IFFALSE 6428
// begin restRandSolds = 5 - belkovTeam ;
6304: LD_ADDR_VAR 0 4
6308: PUSH
6309: LD_INT 5
6311: PUSH
6312: LD_EXP 73
6316: MINUS
6317: ST_TO_ADDR
// for i := 1 to restRandSolds do
6318: LD_ADDR_VAR 0 2
6322: PUSH
6323: DOUBLE
6324: LD_INT 1
6326: DEC
6327: ST_TO_ADDR
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_TO
6334: IFFALSE 6426
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: LD_EXP 69
6345: PPUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: EMPTY
6357: LIST
6358: PPUSH
6359: CALL_OW 72
6363: PUSH
6364: LD_EXP 67
6368: DIFF
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6422
// if not unit in belkovTeam then
6373: LD_VAR 0 3
6377: PUSH
6378: LD_EXP 73
6382: IN
6383: NOT
6384: IFFALSE 6420
// begin belkovTeam = belkovTeam ^ unit ;
6386: LD_ADDR_EXP 73
6390: PUSH
6391: LD_EXP 73
6395: PUSH
6396: LD_VAR 0 3
6400: ADD
6401: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6402: LD_ADDR_EXP 69
6406: PUSH
6407: LD_EXP 69
6411: PUSH
6412: LD_VAR 0 3
6416: DIFF
6417: ST_TO_ADDR
// break ;
6418: GO 6422
// end ;
6420: GO 6370
6422: POP
6423: POP
6424: GO 6333
6426: POP
6427: POP
// end ; tmp = belkovTeam diff Belkov ;
6428: LD_ADDR_VAR 0 5
6432: PUSH
6433: LD_EXP 73
6437: PUSH
6438: LD_EXP 64
6442: DIFF
6443: ST_TO_ADDR
// if tmp < 4 then
6444: LD_VAR 0 5
6448: PUSH
6449: LD_INT 4
6451: LESS
6452: IFFALSE 6536
// begin for i := 1 to 4 - tmp do
6454: LD_ADDR_VAR 0 2
6458: PUSH
6459: DOUBLE
6460: LD_INT 1
6462: DEC
6463: ST_TO_ADDR
6464: LD_INT 4
6466: PUSH
6467: LD_VAR 0 5
6471: MINUS
6472: PUSH
6473: FOR_TO
6474: IFFALSE 6534
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6476: LD_INT 0
6478: PPUSH
6479: LD_INT 1
6481: PPUSH
6482: LD_INT 2
6484: PPUSH
6485: CALL_OW 12
6489: PPUSH
6490: CALL_OW 381
// unit = CreateHuman ;
6494: LD_ADDR_VAR 0 3
6498: PUSH
6499: CALL_OW 44
6503: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6504: LD_ADDR_EXP 73
6508: PUSH
6509: LD_EXP 73
6513: PUSH
6514: LD_VAR 0 3
6518: ADD
6519: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6520: LD_VAR 0 3
6524: PPUSH
6525: LD_INT 209
6527: PPUSH
6528: CALL_OW 52
// end ;
6532: GO 6473
6534: POP
6535: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6536: LD_STRING 01_Kirilenkova
6538: PPUSH
6539: CALL_OW 28
6543: IFFALSE 6563
// belkovTeam = belkovTeam ^ Kirilenkova else
6545: LD_ADDR_EXP 73
6549: PUSH
6550: LD_EXP 73
6554: PUSH
6555: LD_EXP 65
6559: ADD
6560: ST_TO_ADDR
6561: GO 6639
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6563: LD_ADDR_EXP 73
6567: PUSH
6568: LD_EXP 73
6572: PUSH
6573: LD_EXP 69
6577: PPUSH
6578: LD_INT 25
6580: PUSH
6581: LD_INT 4
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: PPUSH
6591: CALL_OW 72
6595: PUSH
6596: LD_INT 1
6598: ARRAY
6599: ADD
6600: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6601: LD_ADDR_EXP 69
6605: PUSH
6606: LD_EXP 69
6610: PUSH
6611: LD_EXP 69
6615: PPUSH
6616: LD_INT 25
6618: PUSH
6619: LD_INT 4
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PUSH
6626: EMPTY
6627: LIST
6628: PPUSH
6629: CALL_OW 72
6633: PUSH
6634: LD_INT 1
6636: ARRAY
6637: DIFF
6638: ST_TO_ADDR
// end ; end ;
6639: LD_VAR 0 1
6643: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6644: LD_INT 0
6646: PPUSH
6647: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6648: LD_EXP 78
6652: NOT
6653: PUSH
6654: LD_EXP 78
6658: PPUSH
6659: CALL_OW 302
6663: NOT
6664: OR
6665: IFFALSE 6768
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6667: LD_ADDR_VAR 0 2
6671: PUSH
6672: LD_EXP 77
6676: PPUSH
6677: LD_INT 50
6679: PUSH
6680: EMPTY
6681: LIST
6682: PPUSH
6683: CALL_OW 72
6687: PUSH
6688: LD_EXP 79
6692: DIFF
6693: ST_TO_ADDR
// if soldsOK then
6694: LD_VAR 0 2
6698: IFFALSE 6768
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6700: LD_VAR 0 2
6704: PUSH
6705: LD_INT 1
6707: ARRAY
6708: PPUSH
6709: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6713: LD_VAR 0 2
6717: PUSH
6718: LD_INT 1
6720: ARRAY
6721: PPUSH
6722: LD_INT 112
6724: PPUSH
6725: LD_INT 96
6727: PPUSH
6728: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6732: LD_VAR 0 2
6736: PUSH
6737: LD_INT 1
6739: ARRAY
6740: PPUSH
6741: LD_INT 3
6743: PPUSH
6744: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6748: LD_ADDR_EXP 77
6752: PUSH
6753: LD_EXP 77
6757: PUSH
6758: LD_VAR 0 2
6762: PUSH
6763: LD_INT 1
6765: ARRAY
6766: DIFF
6767: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6768: LD_EXP 79
6772: NOT
6773: PUSH
6774: LD_EXP 79
6778: PPUSH
6779: CALL_OW 302
6783: NOT
6784: OR
6785: IFFALSE 6888
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6787: LD_ADDR_VAR 0 2
6791: PUSH
6792: LD_EXP 77
6796: PPUSH
6797: LD_INT 50
6799: PUSH
6800: EMPTY
6801: LIST
6802: PPUSH
6803: CALL_OW 72
6807: PUSH
6808: LD_EXP 78
6812: DIFF
6813: ST_TO_ADDR
// if soldsOK then
6814: LD_VAR 0 2
6818: IFFALSE 6888
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 1
6827: ARRAY
6828: PPUSH
6829: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6833: LD_VAR 0 2
6837: PUSH
6838: LD_INT 1
6840: ARRAY
6841: PPUSH
6842: LD_INT 112
6844: PPUSH
6845: LD_INT 96
6847: PPUSH
6848: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6852: LD_VAR 0 2
6856: PUSH
6857: LD_INT 1
6859: ARRAY
6860: PPUSH
6861: LD_INT 3
6863: PPUSH
6864: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6868: LD_ADDR_EXP 77
6872: PUSH
6873: LD_EXP 77
6877: PUSH
6878: LD_VAR 0 2
6882: PUSH
6883: LD_INT 1
6885: ARRAY
6886: DIFF
6887: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6888: LD_EXP 78
6892: PUSH
6893: LD_EXP 79
6897: PUSH
6898: EMPTY
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6906: LD_EXP 78
6910: PUSH
6911: LD_EXP 79
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PPUSH
6920: LD_INT 112
6922: PPUSH
6923: LD_INT 96
6925: PPUSH
6926: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6930: LD_EXP 78
6934: PUSH
6935: LD_EXP 79
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: LD_INT 3
6946: PPUSH
6947: CALL_OW 235
// end ; end_of_file
6951: LD_VAR 0 1
6955: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6962: LD_EXP 62
6966: PPUSH
6967: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6971: LD_EXP 62
6975: PPUSH
6976: LD_INT 163
6978: PPUSH
6979: LD_INT 108
6981: PPUSH
6982: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6986: LD_EXP 62
6990: PPUSH
6991: LD_EXP 67
6995: PPUSH
6996: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
7000: LD_ADDR_VAR 0 2
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 21
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: PUSH
7034: LD_EXP 62
7038: DIFF
7039: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
7040: LD_ADDR_VAR 0 4
7044: PUSH
7045: DOUBLE
7046: LD_INT 1
7048: DEC
7049: ST_TO_ADDR
7050: LD_EXP 52
7054: PUSH
7055: FOR_TO
7056: IFFALSE 7174
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7058: LD_ADDR_VAR 0 3
7062: PUSH
7063: LD_VAR 0 2
7067: PPUSH
7068: LD_EXP 52
7072: PUSH
7073: LD_VAR 0 4
7077: ARRAY
7078: PUSH
7079: LD_INT 1
7081: ARRAY
7082: PPUSH
7083: LD_EXP 52
7087: PUSH
7088: LD_VAR 0 4
7092: ARRAY
7093: PUSH
7094: LD_INT 2
7096: ARRAY
7097: PPUSH
7098: CALL_OW 73
7102: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7103: LD_VAR 0 3
7107: PPUSH
7108: LD_EXP 52
7112: PUSH
7113: LD_VAR 0 4
7117: ARRAY
7118: PUSH
7119: LD_INT 1
7121: ARRAY
7122: PPUSH
7123: LD_EXP 52
7127: PUSH
7128: LD_VAR 0 4
7132: ARRAY
7133: PUSH
7134: LD_INT 2
7136: ARRAY
7137: PPUSH
7138: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7142: LD_VAR 0 3
7146: PPUSH
7147: LD_EXP 67
7151: PPUSH
7152: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7156: LD_ADDR_VAR 0 2
7160: PUSH
7161: LD_VAR 0 2
7165: PUSH
7166: LD_VAR 0 3
7170: DIFF
7171: ST_TO_ADDR
// end ;
7172: GO 7055
7174: POP
7175: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7176: LD_EXP 62
7180: PPUSH
7181: CALL_OW 87
// wait ( 0 0$1 ) ;
7185: LD_INT 35
7187: PPUSH
7188: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7192: LD_EXP 62
7196: PPUSH
7197: LD_EXP 67
7201: PPUSH
7202: CALL_OW 296
7206: PUSH
7207: LD_INT 4
7209: LESS
7210: IFFALSE 7176
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7212: LD_EXP 62
7216: PUSH
7217: LD_EXP 67
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PPUSH
7226: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7230: LD_EXP 67
7234: PPUSH
7235: LD_EXP 62
7239: PPUSH
7240: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7244: LD_EXP 67
7248: PPUSH
7249: LD_STRING D1-Kur-1
7251: PPUSH
7252: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7256: LD_EXP 62
7260: PPUSH
7261: LD_STRING D1-Bur-1
7263: PPUSH
7264: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7268: LD_EXP 67
7272: PPUSH
7273: LD_STRING D1-Kur-2
7275: PPUSH
7276: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7280: LD_EXP 62
7284: PPUSH
7285: LD_STRING D1-Bur-2
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7292: LD_EXP 67
7296: PPUSH
7297: LD_STRING D1-Kur-3
7299: PPUSH
7300: CALL_OW 88
// if IsOK ( Gnyevko ) then
7304: LD_EXP 63
7308: PPUSH
7309: CALL_OW 302
7313: IFFALSE 7327
// Say ( Kurin , D1-Kur-3a ) ;
7315: LD_EXP 67
7319: PPUSH
7320: LD_STRING D1-Kur-3a
7322: PPUSH
7323: CALL_OW 88
// InGameOff ;
7327: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7331: LD_INT 22
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 21
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 69
7359: PUSH
7360: LD_EXP 62
7364: PUSH
7365: LD_EXP 63
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: DIFF
7374: PPUSH
7375: LD_INT 6
7377: PPUSH
7378: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7382: LD_EXP 70
7386: PPUSH
7387: LD_INT 3
7389: PPUSH
7390: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7394: LD_INT 9
7396: PPUSH
7397: LD_INT 22
7399: PUSH
7400: LD_INT 6
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 21
7409: PUSH
7410: LD_INT 1
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PPUSH
7421: CALL_OW 70
7425: PUSH
7426: LD_EXP 67
7430: DIFF
7431: PPUSH
7432: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7436: LD_EXP 66
7440: PPUSH
7441: LD_INT 95
7443: PPUSH
7444: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7448: LD_EXP 64
7452: PPUSH
7453: LD_INT 95
7455: PPUSH
7456: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7460: LD_EXP 65
7464: PPUSH
7465: CALL_OW 305
7469: IFFALSE 7483
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7471: LD_EXP 65
7475: PPUSH
7476: LD_INT 83
7478: PPUSH
7479: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7483: LD_STRING 01_Gnyevko
7485: PPUSH
7486: CALL_OW 28
7490: NOT
7491: IFFALSE 7505
// SetSide ( randomMech , 3 ) ;
7493: LD_EXP 71
7497: PPUSH
7498: LD_INT 3
7500: PPUSH
7501: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7505: LD_STRING M1
7507: PPUSH
7508: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7512: LD_INT 3
7514: PPUSH
7515: LD_INT 6
7517: PPUSH
7518: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7522: LD_INT 3
7524: PPUSH
7525: LD_INT 7
7527: PPUSH
7528: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7532: LD_INT 6
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7542: LD_INT 6
7544: PPUSH
7545: LD_INT 7
7547: PPUSH
7548: CALL_OW 334
// SaveForQuickRestart ;
7552: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7556: LD_EXP 66
7560: PPUSH
7561: LD_INT 95
7563: PPUSH
7564: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7568: LD_EXP 64
7572: PPUSH
7573: LD_INT 95
7575: PPUSH
7576: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7580: LD_EXP 65
7584: PPUSH
7585: CALL_OW 305
7589: IFFALSE 7603
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7591: LD_EXP 65
7595: PPUSH
7596: LD_INT 83
7598: PPUSH
7599: CALL_OW 120
// end ;
7603: LD_VAR 0 1
7607: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7608: LD_EXP 20
7612: NOT
7613: PUSH
7614: LD_INT 20
7616: PPUSH
7617: LD_INT 22
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: PUSH
7627: LD_INT 2
7629: PUSH
7630: LD_INT 21
7632: PUSH
7633: LD_INT 1
7635: PUSH
7636: EMPTY
7637: LIST
7638: LIST
7639: PUSH
7640: LD_INT 21
7642: PUSH
7643: LD_INT 2
7645: PUSH
7646: EMPTY
7647: LIST
7648: LIST
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 70
7663: PUSH
7664: LD_INT 0
7666: GREATER
7667: AND
7668: IFFALSE 8042
7670: GO 7672
7672: DISABLE
7673: LD_INT 0
7675: PPUSH
// begin enable ;
7676: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7677: LD_ADDR_VAR 0 1
7681: PUSH
7682: LD_INT 20
7684: PPUSH
7685: LD_INT 22
7687: PUSH
7688: LD_INT 3
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 2
7697: PUSH
7698: LD_INT 21
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PUSH
7708: LD_INT 21
7710: PUSH
7711: LD_INT 2
7713: PUSH
7714: EMPTY
7715: LIST
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PPUSH
7727: CALL_OW 70
7731: PUSH
7732: FOR_IN
7733: IFFALSE 8019
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_VAR 0 1
7744: PPUSH
7745: CALL_OW 250
7749: PPUSH
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 251
7759: PUSH
7760: LD_INT 5
7762: PLUS
7763: PPUSH
7764: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7768: LD_EXP 7
7772: NOT
7773: PUSH
7774: LD_EXP 33
7778: NOT
7779: AND
7780: IFFALSE 7843
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7782: LD_VAR 0 1
7786: PUSH
7787: LD_EXP 62
7791: NONEQUAL
7792: PUSH
7793: LD_EXP 70
7797: PPUSH
7798: CALL_OW 302
7802: AND
7803: IFFALSE 7817
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7805: LD_EXP 70
7809: PPUSH
7810: LD_STRING D1b-Kov-1
7812: PPUSH
7813: CALL_OW 88
// if unit = Burlak then
7817: LD_VAR 0 1
7821: PUSH
7822: LD_EXP 62
7826: EQUAL
7827: IFFALSE 7841
// Say ( Burlak , D1b-Bur-1 ) ;
7829: LD_EXP 62
7833: PPUSH
7834: LD_STRING D1b-Bur-1
7836: PPUSH
7837: CALL_OW 88
// end else
7841: GO 7862
// if not dialogLoopBlocker then
7843: LD_EXP 33
7847: NOT
7848: IFFALSE 7862
// Say ( Platonov , D8-Pla-1 ) ;
7850: LD_EXP 76
7854: PPUSH
7855: LD_STRING D8-Pla-1
7857: PPUSH
7858: CALL_OW 88
// if not dialogLoopBlocker then
7862: LD_EXP 33
7866: NOT
7867: IFFALSE 7877
// dialogLoopBlocker = true ;
7869: LD_ADDR_EXP 33
7873: PUSH
7874: LD_INT 1
7876: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7877: LD_INT 20
7879: PPUSH
7880: LD_INT 22
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 2
7892: PUSH
7893: LD_INT 21
7895: PUSH
7896: LD_INT 1
7898: PUSH
7899: EMPTY
7900: LIST
7901: LIST
7902: PUSH
7903: LD_INT 21
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 70
7926: PPUSH
7927: LD_VAR 0 1
7931: PPUSH
7932: CALL_OW 250
7936: PPUSH
7937: LD_VAR 0 1
7941: PPUSH
7942: CALL_OW 251
7946: PUSH
7947: LD_INT 5
7949: PLUS
7950: PPUSH
7951: CALL_OW 111
// wait ( 0 0$1 ) ;
7955: LD_INT 35
7957: PPUSH
7958: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7962: LD_INT 20
7964: PPUSH
7965: LD_INT 22
7967: PUSH
7968: LD_INT 3
7970: PUSH
7971: EMPTY
7972: LIST
7973: LIST
7974: PUSH
7975: LD_INT 2
7977: PUSH
7978: LD_INT 21
7980: PUSH
7981: LD_INT 1
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 21
7990: PUSH
7991: LD_INT 2
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PPUSH
8007: CALL_OW 70
8011: PUSH
8012: LD_INT 0
8014: EQUAL
8015: IFFALSE 7877
// end ;
8017: GO 7732
8019: POP
8020: POP
// if dialogLoopBlocker then
8021: LD_EXP 33
8025: IFFALSE 8042
// begin wait ( 0 0$5 ) ;
8027: LD_INT 175
8029: PPUSH
8030: CALL_OW 67
// dialogLoopBlocker = false ;
8034: LD_ADDR_EXP 33
8038: PUSH
8039: LD_INT 0
8041: ST_TO_ADDR
// end ; end ;
8042: PPOPN 1
8044: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
8045: LD_EXP 19
8049: NOT
8050: PUSH
8051: LD_INT 8
8053: PPUSH
8054: LD_INT 22
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 2
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 1
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_INT 21
8079: PUSH
8080: LD_INT 2
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 71
8100: PUSH
8101: LD_INT 0
8103: GREATER
8104: AND
8105: IFFALSE 8240
8107: GO 8109
8109: DISABLE
8110: LD_INT 0
8112: PPUSH
// begin enable ;
8113: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8114: LD_ADDR_VAR 0 1
8118: PUSH
8119: LD_INT 8
8121: PPUSH
8122: LD_INT 22
8124: PUSH
8125: LD_INT 3
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 2
8134: PUSH
8135: LD_INT 21
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 21
8147: PUSH
8148: LD_INT 2
8150: PUSH
8151: EMPTY
8152: LIST
8153: LIST
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PPUSH
8164: CALL_OW 71
8168: PUSH
8169: FOR_IN
8170: IFFALSE 8223
// begin ComMoveXY ( unit , 114 , 98 ) ;
8172: LD_VAR 0 1
8176: PPUSH
8177: LD_INT 114
8179: PPUSH
8180: LD_INT 98
8182: PPUSH
8183: CALL_OW 111
// if dialogLoopBlocker then
8187: LD_EXP 33
8191: IFFALSE 8197
// exit ;
8193: POP
8194: POP
8195: GO 8240
// dialogLoopBlocker = true ;
8197: LD_ADDR_EXP 33
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8205: LD_EXP 76
8209: PPUSH
8210: LD_STRING D8-Pla-1
8212: PPUSH
8213: CALL_OW 88
// exit ;
8217: POP
8218: POP
8219: GO 8240
// end ;
8221: GO 8169
8223: POP
8224: POP
// wait ( 0 0$5 ) ;
8225: LD_INT 175
8227: PPUSH
8228: CALL_OW 67
// dialogLoopBlocker = false ;
8232: LD_ADDR_EXP 33
8236: PUSH
8237: LD_INT 0
8239: ST_TO_ADDR
// end ;
8240: PPOPN 1
8242: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8243: LD_EXP 7
8247: NOT
8248: PUSH
8249: LD_INT 9
8251: PPUSH
8252: LD_INT 22
8254: PUSH
8255: LD_INT 3
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 21
8264: PUSH
8265: LD_INT 1
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PPUSH
8276: CALL_OW 70
8280: PUSH
8281: LD_INT 0
8283: GREATER
8284: AND
8285: IFFALSE 8302
8287: GO 8289
8289: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8290: LD_EXP 67
8294: PPUSH
8295: LD_STRING D1a-Kur-1
8297: PPUSH
8298: CALL_OW 88
8302: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8303: LD_EXP 7
8307: NOT
8308: PUSH
8309: LD_EXP 62
8313: PPUSH
8314: CALL_OW 302
8318: AND
8319: PUSH
8320: LD_INT 29
8322: PPUSH
8323: LD_INT 22
8325: PUSH
8326: LD_INT 3
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 21
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PPUSH
8347: CALL_OW 70
8351: PUSH
8352: LD_INT 0
8354: GREATER
8355: AND
8356: IFFALSE 8983
8358: GO 8360
8360: DISABLE
8361: LD_INT 0
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
// begin enable ;
8368: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8369: LD_ADDR_VAR 0 2
8373: PUSH
8374: LD_INT 22
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: EMPTY
8381: LIST
8382: LIST
8383: PUSH
8384: LD_INT 21
8386: PUSH
8387: LD_INT 1
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: PUSH
8403: FOR_IN
8404: IFFALSE 8981
// if See ( 6 , unit ) then
8406: LD_INT 6
8408: PPUSH
8409: LD_VAR 0 2
8413: PPUSH
8414: CALL_OW 292
8418: IFFALSE 8979
// begin meetPlatonov = true ;
8420: LD_ADDR_EXP 7
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// InGameOn ;
8428: CALL_OW 8
// DialogueOn ;
8432: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8436: LD_ADDR_VAR 0 4
8440: PUSH
8441: LD_EXP 77
8445: PPUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PPUSH
8456: CALL_OW 72
8460: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8461: LD_ADDR_VAR 0 4
8465: PUSH
8466: LD_VAR 0 4
8470: PUSH
8471: LD_INT 8
8473: PPUSH
8474: LD_INT 22
8476: PUSH
8477: LD_INT 6
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: LD_INT 21
8486: PUSH
8487: LD_INT 3
8489: PUSH
8490: EMPTY
8491: LIST
8492: LIST
8493: PUSH
8494: LD_INT 30
8496: PUSH
8497: LD_INT 31
8499: PUSH
8500: EMPTY
8501: LIST
8502: LIST
8503: PUSH
8504: LD_INT 3
8506: PUSH
8507: LD_INT 58
8509: PUSH
8510: EMPTY
8511: LIST
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 70
8527: ADD
8528: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8529: LD_ADDR_VAR 0 5
8533: PUSH
8534: LD_VAR 0 4
8538: PPUSH
8539: LD_VAR 0 2
8543: PPUSH
8544: CALL_OW 74
8548: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8549: LD_VAR 0 5
8553: PPUSH
8554: CALL_OW 247
8558: PUSH
8559: LD_INT 3
8561: EQUAL
8562: IFFALSE 8583
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8564: LD_ADDR_VAR 0 5
8568: PUSH
8569: LD_VAR 0 5
8573: PPUSH
8574: CALL_OW 313
8578: PUSH
8579: LD_INT 1
8581: ARRAY
8582: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8583: LD_VAR 0 5
8587: PPUSH
8588: LD_STRING D2-RSol1-1
8590: PPUSH
8591: LD_STRING 
8593: PPUSH
8594: LD_INT 0
8596: PPUSH
8597: CALL 4178 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8601: LD_EXP 62
8605: PPUSH
8606: LD_STRING D2-Bur-1
8608: PPUSH
8609: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8613: LD_VAR 0 5
8617: PPUSH
8618: LD_STRING D2-RSol1-2
8620: PPUSH
8621: CALL_OW 88
// DialogueOff ;
8625: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8629: LD_ADDR_VAR 0 3
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 50
8656: PUSH
8657: EMPTY
8658: LIST
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: LIST
8664: PPUSH
8665: CALL_OW 69
8669: ST_TO_ADDR
// for i := 1 to yourUnits do
8670: LD_ADDR_VAR 0 1
8674: PUSH
8675: DOUBLE
8676: LD_INT 1
8678: DEC
8679: ST_TO_ADDR
8680: LD_VAR 0 3
8684: PUSH
8685: FOR_TO
8686: IFFALSE 8755
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8688: LD_VAR 0 3
8692: PUSH
8693: LD_VAR 0 1
8697: ARRAY
8698: PPUSH
8699: LD_EXP 53
8703: PUSH
8704: LD_VAR 0 1
8708: ARRAY
8709: PUSH
8710: LD_INT 1
8712: ARRAY
8713: PPUSH
8714: LD_EXP 53
8718: PUSH
8719: LD_VAR 0 1
8723: ARRAY
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8733: LD_VAR 0 3
8737: PUSH
8738: LD_VAR 0 1
8742: ARRAY
8743: PPUSH
8744: LD_EXP 76
8748: PPUSH
8749: CALL_OW 179
// end ;
8753: GO 8685
8755: POP
8756: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8757: LD_EXP 62
8761: PPUSH
8762: CALL_OW 87
// wait ( 0 0$1 ) ;
8766: LD_INT 35
8768: PPUSH
8769: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8773: LD_EXP 62
8777: PPUSH
8778: LD_EXP 76
8782: PPUSH
8783: CALL_OW 296
8787: PUSH
8788: LD_INT 4
8790: LESS
8791: IFFALSE 8757
// ComTurnUnit ( Platonov , Burlak ) ;
8793: LD_EXP 76
8797: PPUSH
8798: LD_EXP 62
8802: PPUSH
8803: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8807: LD_EXP 76
8811: PPUSH
8812: LD_STRING D2-Pla-2
8814: PPUSH
8815: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8819: LD_EXP 62
8823: PPUSH
8824: LD_STRING D2-Bur-2
8826: PPUSH
8827: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8831: LD_EXP 76
8835: PPUSH
8836: LD_STRING D2-Pla-3
8838: PPUSH
8839: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8843: LD_EXP 62
8847: PPUSH
8848: LD_STRING D2-Bur-3
8850: PPUSH
8851: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8855: LD_EXP 76
8859: PPUSH
8860: LD_STRING D2-Pla-4
8862: PPUSH
8863: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8867: LD_EXP 62
8871: PPUSH
8872: LD_STRING D2-Bur-4
8874: PPUSH
8875: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8879: LD_EXP 76
8883: PPUSH
8884: LD_STRING D2-Pla-5
8886: PPUSH
8887: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8891: LD_INT 1
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: LD_INT 3
8899: PUSH
8900: LD_INT 4
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PPUSH
8909: CALL 4511 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8913: LD_EXP 76
8917: PPUSH
8918: LD_STRING D3-Pla-1
8920: PPUSH
8921: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8925: LD_EXP 62
8929: PPUSH
8930: LD_STRING D3-Bur-1
8932: PPUSH
8933: CALL_OW 88
// InGameOff ;
8937: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8941: LD_STRING M2a
8943: PPUSH
8944: CALL_OW 337
// ComFree ( Platonov ) ;
8948: LD_EXP 76
8952: PPUSH
8953: CALL_OW 139
// SetSide ( beria , 3 ) ;
8957: LD_INT 106
8959: PPUSH
8960: LD_INT 3
8962: PPUSH
8963: CALL_OW 235
// canExitBase = false ;
8967: LD_ADDR_EXP 19
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// exit ;
8975: POP
8976: POP
8977: GO 8983
// end ;
8979: GO 8403
8981: POP
8982: POP
// end ;
8983: PPOPN 5
8985: END
// export function Dial_LabConstructed ; begin
8986: LD_INT 0
8988: PPUSH
// labConstructed = true ;
8989: LD_ADDR_EXP 8
8993: PUSH
8994: LD_INT 1
8996: ST_TO_ADDR
// DialogueOn ;
8997: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9001: LD_EXP 62
9005: PPUSH
9006: LD_STRING D5a-Bur-1
9008: PPUSH
9009: CALL_OW 88
// if workshopConstructed then
9013: LD_EXP 9
9017: IFFALSE 9033
// Say ( Platonov , D5a-Pla-1 ) else
9019: LD_EXP 76
9023: PPUSH
9024: LD_STRING D5a-Pla-1
9026: PPUSH
9027: CALL_OW 88
9031: GO 9045
// Say ( Platonov , D5a-Pla-1a ) ;
9033: LD_EXP 76
9037: PPUSH
9038: LD_STRING D5a-Pla-1a
9040: PPUSH
9041: CALL_OW 88
// DialogueOff ;
9045: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
9049: LD_STRING M2b
9051: PPUSH
9052: CALL_OW 337
// end ;
9056: LD_VAR 0 1
9060: RET
// export function Dial_WorkshopConstructed ; begin
9061: LD_INT 0
9063: PPUSH
// workshopConstructed = true ;
9064: LD_ADDR_EXP 9
9068: PUSH
9069: LD_INT 1
9071: ST_TO_ADDR
// DialogueOn ;
9072: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
9076: LD_EXP 62
9080: PPUSH
9081: LD_STRING D5b-Bur-1
9083: PPUSH
9084: CALL_OW 88
// if labConstructed then
9088: LD_EXP 8
9092: IFFALSE 9108
// Say ( Platonov , D5b-Pla-1 ) else
9094: LD_EXP 76
9098: PPUSH
9099: LD_STRING D5b-Pla-1
9101: PPUSH
9102: CALL_OW 88
9106: GO 9120
// Say ( Platonov , D5b-Pla-1a ) ;
9108: LD_EXP 76
9112: PPUSH
9113: LD_STRING D5b-Pla-1a
9115: PPUSH
9116: CALL_OW 88
// DialogueOff ;
9120: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9124: LD_STRING M2c
9126: PPUSH
9127: CALL_OW 337
// end ;
9131: LD_VAR 0 1
9135: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9136: LD_INT 0
9138: PPUSH
// wait ( 0 0$1 ) ;
9139: LD_INT 35
9141: PPUSH
9142: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9146: LD_VAR 0 1
9150: PPUSH
9151: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9155: LD_INT 22
9157: PUSH
9158: LD_INT 3
9160: PUSH
9161: EMPTY
9162: LIST
9163: LIST
9164: PUSH
9165: LD_INT 21
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 69
9183: PPUSH
9184: CALL_OW 141
// DialogueOn ;
9188: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9192: LD_EXP 76
9196: PPUSH
9197: LD_STRING D6-Pla-1
9199: PPUSH
9200: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9204: LD_EXP 62
9208: PPUSH
9209: LD_STRING D6-Bur-1
9211: PPUSH
9212: CALL_OW 88
// DialogueOff ;
9216: CALL_OW 7
// case GetBType ( building ) of b_lab :
9220: LD_VAR 0 1
9224: PPUSH
9225: CALL_OW 266
9229: PUSH
9230: LD_INT 6
9232: DOUBLE
9233: EQUAL
9234: IFTRUE 9238
9236: GO 9278
9238: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9239: LD_INT 106
9241: PPUSH
9242: CALL_OW 274
9246: PPUSH
9247: LD_INT 1
9249: PPUSH
9250: LD_INT 106
9252: PPUSH
9253: CALL_OW 274
9257: PPUSH
9258: LD_INT 1
9260: PPUSH
9261: CALL_OW 275
9265: PUSH
9266: LD_EXP 54
9270: PLUS
9271: PPUSH
9272: CALL_OW 277
9276: GO 9471
9278: LD_INT 2
9280: DOUBLE
9281: EQUAL
9282: IFTRUE 9286
9284: GO 9326
9286: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9287: LD_INT 106
9289: PPUSH
9290: CALL_OW 274
9294: PPUSH
9295: LD_INT 1
9297: PPUSH
9298: LD_INT 106
9300: PPUSH
9301: CALL_OW 274
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 275
9313: PUSH
9314: LD_EXP 55
9318: PLUS
9319: PPUSH
9320: CALL_OW 277
9324: GO 9471
9326: LD_INT 26
9328: DOUBLE
9329: EQUAL
9330: IFTRUE 9334
9332: GO 9374
9334: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9335: LD_INT 106
9337: PPUSH
9338: CALL_OW 274
9342: PPUSH
9343: LD_INT 1
9345: PPUSH
9346: LD_INT 106
9348: PPUSH
9349: CALL_OW 274
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: CALL_OW 275
9361: PUSH
9362: LD_EXP 56
9366: PLUS
9367: PPUSH
9368: CALL_OW 277
9372: GO 9471
9374: LD_INT 4
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9422
9382: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9383: LD_INT 106
9385: PPUSH
9386: CALL_OW 274
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_INT 106
9396: PPUSH
9397: CALL_OW 274
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: CALL_OW 275
9409: PUSH
9410: LD_EXP 57
9414: PLUS
9415: PPUSH
9416: CALL_OW 277
9420: GO 9471
9422: LD_INT 31
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9470
9430: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9431: LD_INT 106
9433: PPUSH
9434: CALL_OW 274
9438: PPUSH
9439: LD_INT 1
9441: PPUSH
9442: LD_INT 106
9444: PPUSH
9445: CALL_OW 274
9449: PPUSH
9450: LD_INT 1
9452: PPUSH
9453: CALL_OW 275
9457: PUSH
9458: LD_EXP 58
9462: PLUS
9463: PPUSH
9464: CALL_OW 277
9468: GO 9471
9470: POP
// RemoveUnit ( building ) ;
9471: LD_VAR 0 1
9475: PPUSH
9476: CALL_OW 64
// end ;
9480: LD_VAR 0 2
9484: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9485: LD_EXP 9
9489: PUSH
9490: LD_EXP 8
9494: AND
9495: IFFALSE 9604
9497: GO 9499
9499: DISABLE
// begin DialogueOn ;
9500: CALL_OW 6
// if engineResearched then
9504: LD_EXP 10
9508: IFFALSE 9536
// begin Say ( Burlak , D7b-Bur-1 ) ;
9510: LD_EXP 62
9514: PPUSH
9515: LD_STRING D7b-Bur-1
9517: PPUSH
9518: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9522: LD_EXP 76
9526: PPUSH
9527: LD_STRING D7b-Pla-1
9529: PPUSH
9530: CALL_OW 88
// end else
9534: GO 9560
// begin Say ( Burlak , D7a-Bur-1 ) ;
9536: LD_EXP 62
9540: PPUSH
9541: LD_STRING D7a-Bur-1
9543: PPUSH
9544: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9548: LD_EXP 76
9552: PPUSH
9553: LD_STRING D7a-Pla-1
9555: PPUSH
9556: CALL_OW 88
// end ; DialogueOff ;
9560: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9564: LD_STRING M2
9566: PPUSH
9567: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9571: LD_INT 3
9573: PPUSH
9574: LD_EXP 76
9578: PPUSH
9579: CALL_OW 250
9583: PPUSH
9584: LD_EXP 76
9588: PPUSH
9589: CALL_OW 251
9593: PPUSH
9594: LD_INT 5
9596: PPUSH
9597: LD_INT 1
9599: PPUSH
9600: CALL_OW 56
// end ;
9604: END
// export function Dial_NewCrates ( x , y ) ; begin
9605: LD_INT 0
9607: PPUSH
// wait ( 0 0$18 ) ;
9608: LD_INT 630
9610: PPUSH
9611: CALL_OW 67
// if not spawnCrates then
9615: LD_EXP 21
9619: NOT
9620: IFFALSE 9624
// exit ;
9622: GO 9655
// ComMoveXY ( Platonov , x , y ) ;
9624: LD_EXP 76
9628: PPUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9643: LD_EXP 76
9647: PPUSH
9648: LD_STRING D4-Pla-1
9650: PPUSH
9651: CALL_OW 88
// end ;
9655: LD_VAR 0 3
9659: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9660: LD_INT 0
9662: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9663: LD_ADDR_EXP 13
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 3
9673: PUSH
9674: EMPTY
9675: LIST
9676: LIST
9677: PUSH
9678: LD_INT 21
9680: PUSH
9681: LD_INT 2
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: PPUSH
9692: CALL_OW 69
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: ST_TO_ADDR
// constructedFirstVehicle = true ;
9701: LD_ADDR_EXP 12
9705: PUSH
9706: LD_INT 1
9708: ST_TO_ADDR
// InGameOn ;
9709: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9713: LD_VAR 0 1
9717: PPUSH
9718: CALL_OW 87
// wait ( 0 0$3 ) ;
9722: LD_INT 105
9724: PPUSH
9725: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9729: LD_EXP 62
9733: PPUSH
9734: LD_STRING D9-Bur-1
9736: PPUSH
9737: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9741: LD_EXP 76
9745: PPUSH
9746: LD_EXP 13
9750: PPUSH
9751: CALL_OW 250
9755: PPUSH
9756: LD_EXP 13
9760: PPUSH
9761: CALL_OW 251
9765: PPUSH
9766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9770: LD_INT 35
9772: PPUSH
9773: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9777: LD_EXP 76
9781: PPUSH
9782: LD_EXP 13
9786: PPUSH
9787: CALL_OW 296
9791: PUSH
9792: LD_INT 4
9794: LESS
9795: IFFALSE 9770
// ComTurnUnit ( Platonov , firstVeh ) ;
9797: LD_EXP 76
9801: PPUSH
9802: LD_EXP 13
9806: PPUSH
9807: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9811: LD_EXP 76
9815: PPUSH
9816: LD_STRING D9-Pla-1
9818: PPUSH
9819: CALL_OW 88
// InGameOff ;
9823: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9827: LD_STRING M3
9829: PPUSH
9830: CALL_OW 337
// canExitBase = true ;
9834: LD_ADDR_EXP 19
9838: PUSH
9839: LD_INT 1
9841: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9842: LD_EXP 76
9846: PPUSH
9847: LD_INT 112
9849: PPUSH
9850: LD_INT 97
9852: PPUSH
9853: CALL_OW 111
// end ;
9857: LD_VAR 0 2
9861: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9862: LD_EXP 13
9866: PPUSH
9867: LD_INT 9
9869: PPUSH
9870: CALL_OW 308
9874: PUSH
9875: LD_EXP 14
9879: NOT
9880: AND
9881: IFFALSE 10735
9883: GO 9885
9885: DISABLE
9886: LD_INT 0
9888: PPUSH
9889: PPUSH
9890: PPUSH
// begin vehicleForKurin = true ;
9891: LD_ADDR_EXP 14
9895: PUSH
9896: LD_INT 1
9898: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9899: LD_ADDR_VAR 0 2
9903: PUSH
9904: LD_EXP 69
9908: PPUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 2
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: PPUSH
9919: CALL_OW 72
9923: PUSH
9924: LD_INT 1
9926: ARRAY
9927: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9928: LD_ADDR_VAR 0 3
9932: PUSH
9933: LD_EXP 69
9937: PPUSH
9938: LD_INT 25
9940: PUSH
9941: LD_INT 3
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: PPUSH
9948: CALL_OW 72
9952: PUSH
9953: LD_INT 1
9955: ARRAY
9956: ST_TO_ADDR
// InGameOn ;
9957: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9961: LD_EXP 67
9965: PPUSH
9966: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9970: LD_EXP 13
9974: PPUSH
9975: LD_EXP 67
9979: PPUSH
9980: CALL_OW 250
9984: PPUSH
9985: LD_EXP 67
9989: PPUSH
9990: CALL_OW 251
9994: PPUSH
9995: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9999: LD_EXP 67
10003: PPUSH
10004: LD_STRING D10-Kur-1
10006: PPUSH
10007: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10011: LD_INT 35
10013: PPUSH
10014: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10018: LD_EXP 13
10022: PPUSH
10023: LD_EXP 67
10027: PPUSH
10028: CALL_OW 250
10032: PPUSH
10033: LD_EXP 67
10037: PPUSH
10038: CALL_OW 251
10042: PPUSH
10043: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
10047: LD_EXP 13
10051: PPUSH
10052: LD_EXP 67
10056: PPUSH
10057: CALL_OW 296
10061: PUSH
10062: LD_INT 9
10064: LESS
10065: IFFALSE 10011
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
10067: LD_EXP 13
10071: PPUSH
10072: CALL_OW 313
10076: PPUSH
10077: CALL_OW 121
// wait ( 0 0$1 ) ;
10081: LD_INT 35
10083: PPUSH
10084: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10088: LD_EXP 13
10092: PPUSH
10093: CALL_OW 256
10097: PUSH
10098: LD_INT 1000
10100: LESS
10101: IFFALSE 10133
// begin ComExitBuilding ( mech ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: CALL_OW 122
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10119: LD_VAR 0 3
10123: PPUSH
10124: LD_EXP 13
10128: PPUSH
10129: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10133: LD_EXP 13
10137: PPUSH
10138: CALL_OW 261
10142: PUSH
10143: LD_INT 90
10145: LESS
10146: IFFALSE 10181
// begin ComExitBuilding ( eng ) ;
10148: LD_VAR 0 2
10152: PPUSH
10153: CALL_OW 122
// wait ( 0 0$1 ) ;
10157: LD_INT 35
10159: PPUSH
10160: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_INT 71
10171: PPUSH
10172: LD_EXP 13
10176: PPUSH
10177: CALL 4749 0 3
// end ; repeat wait ( 0 0$1 ) ;
10181: LD_INT 35
10183: PPUSH
10184: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10188: LD_EXP 13
10192: PPUSH
10193: CALL_OW 256
10197: PUSH
10198: LD_INT 1000
10200: EQUAL
10201: PUSH
10202: LD_EXP 13
10206: PPUSH
10207: CALL_OW 261
10211: PUSH
10212: LD_INT 90
10214: GREATER
10215: AND
10216: IFFALSE 10181
// if UnitsInside ( firstVeh ) then
10218: LD_EXP 13
10222: PPUSH
10223: CALL_OW 313
10227: IFFALSE 10247
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10229: LD_EXP 13
10233: PPUSH
10234: CALL_OW 313
10238: PUSH
10239: LD_INT 1
10241: ARRAY
10242: PPUSH
10243: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10247: LD_VAR 0 2
10251: PPUSH
10252: LD_INT 71
10254: PPUSH
10255: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10259: LD_EXP 13
10263: PPUSH
10264: LD_INT 6
10266: PPUSH
10267: CALL_OW 235
// if belkovReturn then
10271: LD_EXP 6
10275: IFFALSE 10361
// begin if IsInUnit ( Belkov ) then
10277: LD_EXP 64
10281: PPUSH
10282: CALL_OW 310
10286: IFFALSE 10297
// ComExitBuilding ( Belkov ) ;
10288: LD_EXP 64
10292: PPUSH
10293: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10297: LD_INT 35
10299: PPUSH
10300: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10304: LD_EXP 64
10308: PPUSH
10309: LD_EXP 13
10313: PPUSH
10314: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10318: LD_EXP 64
10322: PPUSH
10323: CALL_OW 310
10327: PUSH
10328: LD_EXP 13
10332: EQUAL
10333: IFFALSE 10297
// Say ( Belkov , D10-Bel-1 ) ;
10335: LD_EXP 64
10339: PPUSH
10340: LD_STRING D10-Bel-1
10342: PPUSH
10343: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10347: LD_EXP 67
10351: PPUSH
10352: LD_STRING D10-Kur-2
10354: PPUSH
10355: CALL_OW 88
// end else
10359: GO 10487
// begin if IsInUnit ( Belkov2 ) then
10361: LD_EXP 68
10365: PPUSH
10366: CALL_OW 310
10370: IFFALSE 10381
// ComExitBuilding ( Belkov2 ) ;
10372: LD_EXP 68
10376: PPUSH
10377: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10381: LD_INT 35
10383: PPUSH
10384: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10388: LD_EXP 68
10392: PPUSH
10393: LD_EXP 13
10397: PPUSH
10398: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10402: LD_EXP 68
10406: PPUSH
10407: CALL_OW 310
10411: PUSH
10412: LD_EXP 13
10416: EQUAL
10417: IFFALSE 10381
// meetBelkovBrother = true ;
10419: LD_ADDR_EXP 4
10423: PUSH
10424: LD_INT 1
10426: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10427: LD_EXP 68
10431: PPUSH
10432: LD_STRING D10-Bel-1
10434: PPUSH
10435: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10439: LD_EXP 62
10443: PPUSH
10444: LD_STRING D10-Bur-1
10446: PPUSH
10447: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10451: LD_EXP 68
10455: PPUSH
10456: LD_STRING D10-Bel-2
10458: PPUSH
10459: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10463: LD_EXP 62
10467: PPUSH
10468: LD_STRING D10-Bur-2
10470: PPUSH
10471: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10475: LD_EXP 67
10479: PPUSH
10480: LD_STRING D10-Kur-2a
10482: PPUSH
10483: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10487: LD_ADDR_EXP 74
10491: PUSH
10492: EMPTY
10493: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10494: LD_ADDR_EXP 75
10498: PUSH
10499: EMPTY
10500: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10501: LD_ADDR_EXP 22
10505: PUSH
10506: LD_INT 1
10508: ST_TO_ADDR
// CreateBelkovTeam ;
10509: CALL 6188 0 0
// ComExitBuilding ( belkovTeam ) ;
10513: LD_EXP 73
10517: PPUSH
10518: CALL_OW 122
// wait ( 0 0$1 ) ;
10522: LD_INT 35
10524: PPUSH
10525: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10529: LD_ADDR_EXP 72
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_INT 6
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 21
10546: PUSH
10547: LD_INT 2
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: PPUSH
10558: CALL_OW 69
10562: PUSH
10563: LD_INT 1
10565: ARRAY
10566: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10567: LD_ADDR_EXP 73
10571: PUSH
10572: LD_EXP 73
10576: PUSH
10577: LD_EXP 72
10581: ADD
10582: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10583: LD_EXP 73
10587: PPUSH
10588: LD_INT 147
10590: PPUSH
10591: LD_INT 102
10593: PPUSH
10594: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10598: LD_EXP 73
10602: PPUSH
10603: LD_INT 133
10605: PPUSH
10606: LD_INT 94
10608: PPUSH
10609: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10613: LD_EXP 73
10617: PPUSH
10618: LD_INT 123
10620: PPUSH
10621: LD_INT 74
10623: PPUSH
10624: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10628: LD_EXP 73
10632: PPUSH
10633: LD_INT 111
10635: PPUSH
10636: LD_INT 48
10638: PPUSH
10639: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10643: LD_EXP 73
10647: PPUSH
10648: LD_INT 122
10650: PPUSH
10651: LD_INT 43
10653: PPUSH
10654: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10658: LD_EXP 73
10662: PPUSH
10663: LD_INT 129
10665: PPUSH
10666: LD_INT 32
10668: PPUSH
10669: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10673: LD_EXP 73
10677: PPUSH
10678: LD_INT 132
10680: PPUSH
10681: LD_INT 22
10683: PPUSH
10684: CALL_OW 171
// wait ( 0 0$8 ) ;
10688: LD_INT 280
10690: PPUSH
10691: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10695: LD_EXP 67
10699: PPUSH
10700: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10704: LD_EXP 67
10708: PPUSH
10709: LD_STRING D10-Kur-2b
10711: PPUSH
10712: CALL_OW 88
// InGameOff ;
10716: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10720: LD_STRING M4
10722: PPUSH
10723: CALL_OW 337
// backToBeria1 = true ;
10727: LD_ADDR_EXP 15
10731: PUSH
10732: LD_INT 1
10734: ST_TO_ADDR
// end ;
10735: PPOPN 3
10737: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10738: LD_INT 9
10740: PPUSH
10741: LD_INT 22
10743: PUSH
10744: LD_INT 3
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 21
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 70
10769: PUSH
10770: LD_EXP 14
10774: AND
10775: IFFALSE 10792
10777: GO 10779
10779: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10780: LD_EXP 67
10784: PPUSH
10785: LD_STRING D1a-Kur-1a
10787: PPUSH
10788: CALL_OW 88
10792: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10793: LD_EXP 22
10797: IFFALSE 11200
10799: GO 10801
10801: DISABLE
10802: LD_INT 0
10804: PPUSH
10805: PPUSH
// begin enable ;
10806: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10807: LD_INT 10
10809: PPUSH
10810: LD_INT 22
10812: PUSH
10813: LD_INT 6
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PPUSH
10820: CALL_OW 70
10824: PUSH
10825: LD_INT 0
10827: EQUAL
10828: IFFALSE 10832
// exit ;
10830: GO 11200
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10832: LD_ADDR_VAR 0 1
10836: PUSH
10837: LD_INT 10
10839: PPUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 6
10845: PUSH
10846: EMPTY
10847: LIST
10848: LIST
10849: PPUSH
10850: CALL_OW 70
10854: PUSH
10855: FOR_IN
10856: IFFALSE 11186
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10858: LD_VAR 0 1
10862: PPUSH
10863: CALL_OW 247
10867: PUSH
10868: LD_INT 1
10870: EQUAL
10871: PUSH
10872: LD_VAR 0 1
10876: PUSH
10877: LD_EXP 64
10881: EQUAL
10882: NOT
10883: PUSH
10884: LD_VAR 0 1
10888: PUSH
10889: LD_EXP 68
10893: EQUAL
10894: NOT
10895: AND
10896: PUSH
10897: LD_VAR 0 1
10901: PUSH
10902: LD_EXP 65
10906: EQUAL
10907: NOT
10908: AND
10909: AND
10910: IFFALSE 10951
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10912: LD_ADDR_EXP 23
10916: PUSH
10917: LD_EXP 23
10921: PUSH
10922: LD_INT 1
10924: PLUS
10925: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10926: LD_ADDR_EXP 74
10930: PUSH
10931: LD_EXP 74
10935: PUSH
10936: LD_VAR 0 1
10940: ADD
10941: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10942: LD_VAR 0 1
10946: PPUSH
10947: CALL_OW 64
// end ; if unit = Kirilenkova then
10951: LD_VAR 0 1
10955: PUSH
10956: LD_EXP 65
10960: EQUAL
10961: IFFALSE 10984
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10963: LD_EXP 65
10967: PPUSH
10968: LD_STRING 02_TmpKirilenkova
10970: PPUSH
10971: CALL_OW 38
// RemoveUnit ( unit ) ;
10975: LD_VAR 0 1
10979: PPUSH
10980: CALL_OW 64
// end ; if unit = Belkov2 then
10984: LD_VAR 0 1
10988: PUSH
10989: LD_EXP 68
10993: EQUAL
10994: IFFALSE 11017
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10996: LD_EXP 68
11000: PPUSH
11001: LD_STRING 02_TmpBelkov2
11003: PPUSH
11004: CALL_OW 38
// RemoveUnit ( unit ) ;
11008: LD_VAR 0 1
11012: PPUSH
11013: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
11017: LD_VAR 0 1
11021: PPUSH
11022: CALL_OW 247
11026: PUSH
11027: LD_INT 2
11029: EQUAL
11030: IFFALSE 11184
// begin driver = UnitsInside ( unit ) ;
11032: LD_ADDR_VAR 0 2
11036: PUSH
11037: LD_VAR 0 1
11041: PPUSH
11042: CALL_OW 313
11046: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
11047: LD_VAR 0 2
11051: PUSH
11052: LD_INT 1
11054: ARRAY
11055: PUSH
11056: LD_EXP 64
11060: EQUAL
11061: IFFALSE 11086
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
11063: LD_EXP 64
11067: PPUSH
11068: LD_STRING 02_TmpBelkov
11070: PPUSH
11071: CALL_OW 38
// RemoveUnit ( unit ) ;
11075: LD_VAR 0 1
11079: PPUSH
11080: CALL_OW 64
// end else
11084: GO 11107
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11086: LD_EXP 68
11090: PPUSH
11091: LD_STRING 02_TmpBelkov2
11093: PPUSH
11094: CALL_OW 38
// RemoveUnit ( unit ) ;
11098: LD_VAR 0 1
11102: PPUSH
11103: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11107: LD_ADDR_EXP 75
11111: PUSH
11112: LD_EXP 75
11116: PUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 265
11126: PUSH
11127: LD_VAR 0 1
11131: PPUSH
11132: CALL_OW 262
11136: PUSH
11137: LD_VAR 0 1
11141: PPUSH
11142: CALL_OW 263
11146: PUSH
11147: LD_VAR 0 1
11151: PPUSH
11152: CALL_OW 264
11156: PUSH
11157: LD_VAR 0 1
11161: PPUSH
11162: CALL_OW 261
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: ADD
11174: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11175: LD_VAR 0 1
11179: PPUSH
11180: CALL_OW 64
// end ; end ;
11184: GO 10855
11186: POP
11187: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11188: LD_EXP 74
11192: PPUSH
11193: LD_STRING 02_TmpBelkovTeam
11195: PPUSH
11196: CALL_OW 38
// end ;
11200: PPOPN 2
11202: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11203: LD_INT 8
11205: PPUSH
11206: LD_INT 22
11208: PUSH
11209: LD_INT 3
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 21
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: PPUSH
11230: CALL_OW 71
11234: PUSH
11235: LD_INT 0
11237: EQUAL
11238: PUSH
11239: LD_EXP 15
11243: AND
11244: IFFALSE 11451
11246: GO 11248
11248: DISABLE
11249: LD_INT 0
11251: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11252: LD_ADDR_VAR 0 1
11256: PUSH
11257: LD_EXP 69
11261: PPUSH
11262: LD_INT 25
11264: PUSH
11265: LD_INT 2
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 72
11276: ST_TO_ADDR
// backToBeria1 = false ;
11277: LD_ADDR_EXP 15
11281: PUSH
11282: LD_INT 0
11284: ST_TO_ADDR
// canExitBase = false ;
11285: LD_ADDR_EXP 19
11289: PUSH
11290: LD_INT 0
11292: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11293: LD_EXP 76
11297: PPUSH
11298: LD_STRING D11-Pla-1
11300: PPUSH
11301: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11305: LD_INT 22
11307: PUSH
11308: LD_INT 3
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: LD_INT 21
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: PPUSH
11329: CALL_OW 69
11333: PUSH
11334: LD_INT 1
11336: GREATER
11337: IFFALSE 11353
// Say ( Burlak , D11-Bur-1a ) else
11339: LD_EXP 62
11343: PPUSH
11344: LD_STRING D11-Bur-1a
11346: PPUSH
11347: CALL_OW 88
11351: GO 11365
// Say ( Burlak , D11-Bur-1 ) ;
11353: LD_EXP 62
11357: PPUSH
11358: LD_STRING D11-Bur-1
11360: PPUSH
11361: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11365: LD_STRING M5
11367: PPUSH
11368: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11372: LD_INT 1
11374: PPUSH
11375: LD_INT 5
11377: PPUSH
11378: CALL_OW 12
11382: PPUSH
11383: LD_INT 26
11385: PPUSH
11386: LD_INT 1
11388: PPUSH
11389: CALL_OW 55
// construcMoreVehicles = true ;
11393: LD_ADDR_EXP 17
11397: PUSH
11398: LD_INT 1
11400: ST_TO_ADDR
// spawnCrates = true ;
11401: LD_ADDR_EXP 21
11405: PUSH
11406: LD_INT 1
11408: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 2
11425: PPUSH
11426: LD_INT 159
11428: PPUSH
11429: LD_INT 112
11431: PPUSH
11432: LD_INT 0
11434: PPUSH
11435: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11439: LD_VAR 0 1
11443: PPUSH
11444: LD_INT 71
11446: PPUSH
11447: CALL_OW 180
// end ;
11451: PPOPN 1
11453: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11454: LD_EXP 18
11458: PUSH
11459: LD_INT 22
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: PUSH
11469: LD_INT 21
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 69
11487: GREATEREQUAL
11488: IFFALSE 12616
11490: GO 11492
11492: DISABLE
11493: LD_INT 0
11495: PPUSH
11496: PPUSH
// begin canRemoveBelkovUnits = false ;
11497: LD_ADDR_EXP 22
11501: PUSH
11502: LD_INT 0
11504: ST_TO_ADDR
// spawnCrates = false ;
11505: LD_ADDR_EXP 21
11509: PUSH
11510: LD_INT 0
11512: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: LD_INT 21
11528: PUSH
11529: LD_INT 1
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: EMPTY
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PPUSH
11560: CALL_OW 141
// InGameOn ;
11564: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11568: LD_EXP 76
11572: PPUSH
11573: CALL_OW 85
// DialogueOn ;
11577: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11581: LD_EXP 62
11585: PPUSH
11586: LD_STRING D12-Bur-1
11588: PPUSH
11589: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11593: LD_EXP 76
11597: PPUSH
11598: LD_STRING D12-Pla-1
11600: PPUSH
11601: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11605: LD_EXP 62
11609: PPUSH
11610: LD_STRING D12-Bur-2
11612: PPUSH
11613: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11617: LD_EXP 76
11621: PPUSH
11622: LD_STRING D12-Pla-2
11624: PPUSH
11625: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11629: LD_EXP 62
11633: PPUSH
11634: LD_STRING D12-Bur-3
11636: PPUSH
11637: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11641: LD_EXP 76
11645: PPUSH
11646: LD_STRING D12-Pla-3
11648: PPUSH
11649: CALL_OW 88
// DialogueOff ;
11653: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11657: LD_INT 6
11659: PPUSH
11660: LD_INT 1
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: LD_INT 1
11668: PPUSH
11669: CALL_OW 80
// PrepareAmerican ;
11673: CALL 2879 0 0
// PrepareBelkovReturnTeam ;
11677: CALL 1132 0 0
// if IsOK ( Belkov ) then
11681: LD_EXP 64
11685: PPUSH
11686: CALL_OW 302
11690: IFFALSE 11704
// tmpBelkov = Belkov else
11692: LD_ADDR_VAR 0 1
11696: PUSH
11697: LD_EXP 64
11701: ST_TO_ADDR
11702: GO 11714
// tmpBelkov = Belkov2 ;
11704: LD_ADDR_VAR 0 1
11708: PUSH
11709: LD_EXP 68
11713: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11714: LD_EXP 72
11718: PPUSH
11719: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11723: LD_EXP 80
11727: PPUSH
11728: LD_STRING D13-Sol1-1
11730: PPUSH
11731: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11735: LD_VAR 0 1
11739: PPUSH
11740: LD_STRING D13-Bel-1
11742: PPUSH
11743: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11747: LD_EXP 67
11751: PPUSH
11752: LD_STRING D13-Kur-1
11754: PPUSH
11755: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11759: LD_VAR 0 1
11763: PPUSH
11764: LD_STRING D13-Bel-2
11766: PPUSH
11767: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11771: LD_EXP 73
11775: PPUSH
11776: LD_INT 121
11778: PPUSH
11779: LD_INT 29
11781: PPUSH
11782: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11786: LD_INT 35
11788: PPUSH
11789: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11793: LD_EXP 72
11797: PPUSH
11798: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11802: LD_ADDR_VAR 0 2
11806: PUSH
11807: LD_EXP 73
11811: PPUSH
11812: LD_INT 21
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 56
11824: PUSH
11825: EMPTY
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 72
11836: PPUSH
11837: LD_EXP 72
11841: PPUSH
11842: CALL_OW 74
11846: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11847: LD_EXP 72
11851: PPUSH
11852: LD_VAR 0 2
11856: PPUSH
11857: CALL_OW 296
11861: PUSH
11862: LD_INT 5
11864: LESS
11865: IFFALSE 11878
// ComStop ( kirovVehicle ) else
11867: LD_EXP 72
11871: PPUSH
11872: CALL_OW 141
11876: GO 11893
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11878: LD_EXP 73
11882: PPUSH
11883: LD_INT 121
11885: PPUSH
11886: LD_INT 29
11888: PPUSH
11889: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11893: LD_EXP 73
11897: PPUSH
11898: LD_EXP 80
11902: PPUSH
11903: CALL_OW 74
11907: PPUSH
11908: LD_EXP 80
11912: PPUSH
11913: CALL_OW 296
11917: PUSH
11918: LD_INT 5
11920: LESS
11921: IFFALSE 11786
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11923: LD_EXP 72
11927: PUSH
11928: LD_EXP 80
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: PPUSH
11937: CALL_OW 87
// ComWalk ( trapTeam ) ;
11941: LD_EXP 81
11945: PPUSH
11946: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11950: LD_EXP 81
11954: PPUSH
11955: LD_EXP 72
11959: PPUSH
11960: CALL_OW 179
// ComStop ( belkovTeam ) ;
11964: LD_EXP 73
11968: PPUSH
11969: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11973: LD_EXP 73
11977: PPUSH
11978: LD_EXP 80
11982: PPUSH
11983: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11987: LD_INT 25
11989: PPUSH
11990: LD_INT 22
11992: PUSH
11993: LD_INT 1
11995: PUSH
11996: EMPTY
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 21
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PPUSH
12014: CALL_OW 70
12018: PPUSH
12019: LD_INT 111
12021: PPUSH
12022: LD_INT 13
12024: PPUSH
12025: CALL_OW 171
// music_class = music_combat ;
12029: LD_ADDR_OWVAR 72
12033: PUSH
12034: LD_INT 1
12036: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12037: LD_INT 35
12039: PPUSH
12040: CALL_OW 67
// DialogueOn ;
12044: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
12048: LD_EXP 80
12052: PPUSH
12053: LD_STRING D14-Sol1-1
12055: PPUSH
12056: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
12060: LD_VAR 0 1
12064: PPUSH
12065: LD_STRING D14-Bel-1
12067: PPUSH
12068: CALL_OW 88
// DialogueOff ;
12072: CALL_OW 7
// immortalBelkovTeam = true ;
12076: LD_ADDR_EXP 24
12080: PUSH
12081: LD_INT 1
12083: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
12084: LD_INT 6
12086: PPUSH
12087: LD_INT 1
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: LD_INT 1
12095: PPUSH
12096: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12100: LD_EXP 73
12104: PPUSH
12105: LD_INT 107
12107: PPUSH
12108: LD_INT 5
12110: PPUSH
12111: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12115: LD_EXP 72
12119: PPUSH
12120: LD_INT 107
12122: PPUSH
12123: LD_INT 5
12125: PPUSH
12126: CALL_OW 111
// wait ( 0 0$2 ) ;
12130: LD_INT 70
12132: PPUSH
12133: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12137: LD_EXP 73
12141: PPUSH
12142: LD_INT 101
12144: PPUSH
12145: LD_INT 19
12147: PPUSH
12148: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12152: LD_EXP 72
12156: PPUSH
12157: LD_INT 101
12159: PPUSH
12160: LD_INT 19
12162: PPUSH
12163: CALL_OW 111
// wait ( 0 0$2 ) ;
12167: LD_INT 70
12169: PPUSH
12170: CALL_OW 67
// immortalVehLive = 400 ;
12174: LD_ADDR_EXP 25
12178: PUSH
12179: LD_INT 400
12181: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12182: LD_EXP 72
12186: PPUSH
12187: LD_INT 500
12189: PPUSH
12190: CALL_OW 234
// wait ( 0 0$3 ) ;
12194: LD_INT 105
12196: PPUSH
12197: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12201: LD_VAR 0 1
12205: PPUSH
12206: CALL_OW 121
// wait ( 0 0$1 ) ;
12210: LD_INT 35
12212: PPUSH
12213: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12217: LD_EXP 80
12221: PPUSH
12222: LD_EXP 72
12226: PPUSH
12227: CALL_OW 120
// AddComHold ( trapTeam ) ;
12231: LD_EXP 81
12235: PPUSH
12236: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12240: LD_EXP 73
12244: PPUSH
12245: LD_INT 88
12247: PPUSH
12248: LD_INT 18
12250: PPUSH
12251: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12255: LD_INT 35
12257: PPUSH
12258: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12262: LD_VAR 0 1
12266: PPUSH
12267: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12271: LD_VAR 0 1
12275: PPUSH
12276: LD_INT 15
12278: PPUSH
12279: CALL_OW 308
12283: IFFALSE 12255
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12285: LD_ADDR_EXP 88
12289: PUSH
12290: LD_INT 22
12292: PUSH
12293: LD_INT 1
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: PUSH
12300: LD_INT 21
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: PPUSH
12314: CALL_OW 69
12318: PUSH
12319: LD_INT 1
12321: ARRAY
12322: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12323: LD_INT 28
12325: PPUSH
12326: LD_INT 22
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 21
12338: PUSH
12339: LD_INT 1
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: PPUSH
12350: CALL_OW 70
12354: PPUSH
12355: LD_INT 113
12357: PPUSH
12358: LD_INT 29
12360: PPUSH
12361: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12365: LD_EXP 88
12369: PPUSH
12370: LD_INT 118
12372: PPUSH
12373: LD_INT 25
12375: PPUSH
12376: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12380: LD_VAR 0 1
12384: PPUSH
12385: LD_STRING D14-Bel-1a
12387: PPUSH
12388: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12392: LD_EXP 67
12396: PPUSH
12397: LD_STRING D14-Kur-1
12399: PPUSH
12400: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12404: LD_VAR 0 1
12408: PPUSH
12409: LD_STRING D14-Bel-2
12411: PPUSH
12412: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12416: LD_EXP 67
12420: PPUSH
12421: LD_STRING D14-Kur-2
12423: PPUSH
12424: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12428: LD_EXP 76
12432: PPUSH
12433: CALL_OW 85
// wait ( 0 0$2 ) ;
12437: LD_INT 70
12439: PPUSH
12440: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12444: LD_EXP 62
12448: PPUSH
12449: LD_STRING D14a-Bur-1
12451: PPUSH
12452: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12456: LD_EXP 76
12460: PPUSH
12461: LD_STRING D14a-Pla-1
12463: PPUSH
12464: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12468: LD_EXP 62
12472: PPUSH
12473: LD_STRING D14a-Bur-2
12475: PPUSH
12476: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12480: LD_EXP 76
12484: PPUSH
12485: LD_STRING D14a-Pla-2
12487: PPUSH
12488: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12492: LD_EXP 62
12496: PPUSH
12497: LD_STRING D14a-Bur-3
12499: PPUSH
12500: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12504: LD_EXP 76
12508: PPUSH
12509: LD_STRING D14a-Pla-3
12511: PPUSH
12512: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12516: LD_EXP 62
12520: PPUSH
12521: LD_STRING D14a-Bur-4
12523: PPUSH
12524: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12528: LD_EXP 76
12532: PPUSH
12533: LD_STRING D14a-Pla-4
12535: PPUSH
12536: CALL_OW 88
// InGameOff ;
12540: CALL_OW 9
// immortalBelkovTeam = false ;
12544: LD_ADDR_EXP 24
12548: PUSH
12549: LD_INT 0
12551: ST_TO_ADDR
// activateAMAI = true ;
12552: LD_ADDR_EXP 27
12556: PUSH
12557: LD_INT 1
12559: ST_TO_ADDR
// canExitBase = true ;
12560: LD_ADDR_EXP 19
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// canExploreMap = true ;
12568: LD_ADDR_EXP 20
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// construcMoreVehicles = false ;
12576: LD_ADDR_EXP 17
12580: PUSH
12581: LD_INT 0
12583: ST_TO_ADDR
// activateBelkovAI = true ;
12584: LD_ADDR_EXP 28
12588: PUSH
12589: LD_INT 1
12591: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12592: LD_STRING M6
12594: PPUSH
12595: CALL_OW 337
// music_class = 0 ;
12599: LD_ADDR_OWVAR 72
12603: PUSH
12604: LD_INT 0
12606: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12607: LD_EXP 81
12611: PPUSH
12612: CALL_OW 139
// end ;
12616: PPOPN 2
12618: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12619: LD_EXP 88
12623: PPUSH
12624: LD_INT 118
12626: PPUSH
12627: LD_INT 25
12629: PPUSH
12630: CALL_OW 297
12634: PUSH
12635: LD_INT 6
12637: LESS
12638: IFFALSE 12733
12640: GO 12642
12642: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12643: LD_EXP 80
12647: PPUSH
12648: CALL_OW 121
// uc_side = 1 ;
12652: LD_ADDR_OWVAR 20
12656: PUSH
12657: LD_INT 1
12659: ST_TO_ADDR
// uc_nation = 1 ;
12660: LD_ADDR_OWVAR 21
12664: PUSH
12665: LD_INT 1
12667: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12668: LD_INT 0
12670: PPUSH
12671: LD_EXP 59
12675: PPUSH
12676: CALL_OW 383
// amMech = CreateHuman ;
12680: LD_ADDR_EXP 89
12684: PUSH
12685: CALL_OW 44
12689: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12690: LD_EXP 89
12694: PPUSH
12695: LD_INT 27
12697: PPUSH
12698: LD_INT 0
12700: PPUSH
12701: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12705: LD_EXP 89
12709: PPUSH
12710: LD_EXP 88
12714: PPUSH
12715: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12719: LD_EXP 89
12723: PPUSH
12724: LD_EXP 88
12728: PPUSH
12729: CALL_OW 180
// end ;
12733: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12734: LD_EXP 89
12738: PPUSH
12739: CALL_OW 302
12743: PUSH
12744: LD_INT 22
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: LD_INT 21
12756: PUSH
12757: LD_INT 2
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 50
12766: PUSH
12767: EMPTY
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: AND
12780: IFFALSE 13033
12782: GO 12784
12784: DISABLE
12785: LD_INT 0
12787: PPUSH
// begin enable ;
12788: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12789: LD_ADDR_VAR 0 1
12793: PUSH
12794: LD_INT 22
12796: PUSH
12797: LD_INT 3
12799: PUSH
12800: EMPTY
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 2
12806: PUSH
12807: LD_INT 21
12809: PUSH
12810: LD_INT 1
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PPUSH
12836: CALL_OW 69
12840: PPUSH
12841: LD_EXP 89
12845: PPUSH
12846: CALL_OW 74
12850: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12851: LD_VAR 0 1
12855: PPUSH
12856: LD_EXP 89
12860: PPUSH
12861: CALL_OW 296
12865: PUSH
12866: LD_INT 13
12868: LESS
12869: IFFALSE 12922
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12871: LD_EXP 89
12875: PPUSH
12876: LD_INT 22
12878: PUSH
12879: LD_INT 1
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: PUSH
12886: LD_INT 21
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: EMPTY
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: PPUSH
12907: CALL_OW 69
12911: PUSH
12912: LD_INT 1
12914: ARRAY
12915: PPUSH
12916: CALL_OW 120
12920: GO 13033
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12922: LD_INT 22
12924: PUSH
12925: LD_INT 1
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 21
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 50
12944: PUSH
12945: EMPTY
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: PUSH
12958: LD_INT 1
12960: ARRAY
12961: PPUSH
12962: CALL_OW 256
12966: PUSH
12967: LD_INT 1000
12969: EQUAL
12970: PUSH
12971: LD_EXP 89
12975: PPUSH
12976: CALL_OW 310
12980: NOT
12981: AND
12982: IFFALSE 13033
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
12984: LD_EXP 89
12988: PPUSH
12989: LD_INT 22
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: PUSH
12999: LD_INT 21
13001: PUSH
13002: LD_INT 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 50
13011: PUSH
13012: EMPTY
13013: LIST
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: LIST
13019: PPUSH
13020: CALL_OW 69
13024: PUSH
13025: LD_INT 1
13027: ARRAY
13028: PPUSH
13029: CALL_OW 120
// end ; end ;
13033: PPOPN 1
13035: END
// every 0 0$1 trigger immortalBelkovTeam do
13036: LD_EXP 24
13040: IFFALSE 13127
13042: GO 13044
13044: DISABLE
// begin enable ;
13045: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
13046: LD_EXP 73
13050: PPUSH
13051: LD_INT 21
13053: PUSH
13054: LD_INT 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PPUSH
13061: CALL_OW 72
13065: PPUSH
13066: LD_INT 1000
13068: PPUSH
13069: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
13073: LD_EXP 73
13077: PPUSH
13078: LD_INT 21
13080: PUSH
13081: LD_INT 2
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PPUSH
13088: CALL_OW 72
13092: IFFALSE 13127
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13094: LD_EXP 73
13098: PPUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PPUSH
13109: CALL_OW 72
13113: PUSH
13114: LD_INT 1
13116: ARRAY
13117: PPUSH
13118: LD_EXP 25
13122: PPUSH
13123: CALL_OW 234
// end ;
13127: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13128: LD_EXP 20
13132: PUSH
13133: LD_EXP 37
13137: NOT
13138: AND
13139: PUSH
13140: LD_EXP 61
13144: PUSH
13145: LD_INT 0
13147: GREATER
13148: AND
13149: IFFALSE 13169
13151: GO 13153
13153: DISABLE
// begin enable ;
13154: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13155: LD_ADDR_EXP 61
13159: PUSH
13160: LD_EXP 61
13164: PUSH
13165: LD_INT 35
13167: MINUS
13168: ST_TO_ADDR
// end ;
13169: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13170: LD_EXP 20
13174: IFFALSE 13258
13176: GO 13178
13178: DISABLE
13179: LD_INT 0
13181: PPUSH
13182: PPUSH
// begin tmp = trapTeam ;
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_EXP 81
13192: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_VAR 0 2
13202: PUSH
13203: LD_EXP 80
13207: DIFF
13208: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: DOUBLE
13215: LD_INT 1
13217: DEC
13218: ST_TO_ADDR
13219: LD_INT 2
13221: PPUSH
13222: LD_INT 3
13224: PPUSH
13225: CALL_OW 12
13229: PUSH
13230: FOR_TO
13231: IFFALSE 13256
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13233: LD_VAR 0 2
13237: PUSH
13238: LD_VAR 0 1
13242: ARRAY
13243: PPUSH
13244: LD_INT 87
13246: PPUSH
13247: LD_INT 18
13249: PPUSH
13250: CALL_OW 114
13254: GO 13230
13256: POP
13257: POP
// end ;
13258: PPOPN 2
13260: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13261: LD_EXP 61
13265: PUSH
13266: LD_INT 70
13268: LESS
13269: PUSH
13270: LD_EXP 81
13274: AND
13275: IFFALSE 13304
13277: GO 13279
13279: DISABLE
// begin enable ;
13280: ENABLE
// activateBelkovAI = false ;
13281: LD_ADDR_EXP 28
13285: PUSH
13286: LD_INT 0
13288: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13289: LD_EXP 73
13293: PPUSH
13294: LD_INT 120
13296: PPUSH
13297: LD_INT 28
13299: PPUSH
13300: CALL_OW 114
// end ;
13304: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13305: LD_EXP 29
13309: NOT
13310: PUSH
13311: LD_EXP 30
13315: NOT
13316: OR
13317: PUSH
13318: LD_EXP 20
13322: AND
13323: IFFALSE 13785
13325: GO 13327
13327: DISABLE
13328: LD_INT 0
13330: PPUSH
// begin enable ;
13331: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13332: LD_ADDR_VAR 0 1
13336: PUSH
13337: LD_INT 22
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 21
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 30
13359: PUSH
13360: LD_INT 31
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: PUSH
13377: FOR_IN
13378: IFFALSE 13783
// begin if See ( 3 , bunker ) then
13380: LD_INT 3
13382: PPUSH
13383: LD_VAR 0 1
13387: PPUSH
13388: CALL_OW 292
13392: IFFALSE 13781
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13394: LD_VAR 0 1
13398: PUSH
13399: LD_EXP 82
13403: IN
13404: PUSH
13405: LD_EXP 29
13409: NOT
13410: AND
13411: PUSH
13412: LD_INT 18
13414: PPUSH
13415: LD_INT 22
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: PPUSH
13428: CALL_OW 70
13432: NOT
13433: AND
13434: IFFALSE 13627
// begin sawLeftBunker = true ;
13436: LD_ADDR_EXP 29
13440: PUSH
13441: LD_INT 1
13443: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13444: LD_VAR 0 1
13448: PPUSH
13449: CALL_OW 85
// DialogueOn ;
13453: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13457: LD_EXP 62
13461: PPUSH
13462: LD_STRING D15-Bur-1
13464: PPUSH
13465: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13469: LD_EXP 63
13473: PPUSH
13474: CALL_OW 302
13478: PUSH
13479: LD_EXP 70
13483: PPUSH
13484: CALL_OW 302
13488: OR
13489: IFFALSE 13584
// begin if IsOK ( Gnyevko ) then
13491: LD_EXP 63
13495: PPUSH
13496: CALL_OW 302
13500: IFFALSE 13514
// Say ( Gnyevko , D15-Gny-1 ) ;
13502: LD_EXP 63
13506: PPUSH
13507: LD_STRING D15-Gny-1
13509: PPUSH
13510: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13514: LD_EXP 70
13518: PPUSH
13519: CALL_OW 302
13523: IFFALSE 13537
// Say ( Kovalyuk , D15-Kov-1 ) ;
13525: LD_EXP 70
13529: PPUSH
13530: LD_STRING D15-Kov-1
13532: PPUSH
13533: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13537: LD_EXP 62
13541: PPUSH
13542: LD_STRING D15-Bur-2
13544: PPUSH
13545: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13549: LD_EXP 70
13553: PPUSH
13554: CALL_OW 302
13558: IFFALSE 13572
// Say ( Kovalyuk , D15-Kov-2 ) ;
13560: LD_EXP 70
13564: PPUSH
13565: LD_STRING D15-Kov-2
13567: PPUSH
13568: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13572: LD_EXP 62
13576: PPUSH
13577: LD_STRING D15-Bur-3
13579: PPUSH
13580: CALL_OW 88
// end ; DialogueOff ;
13584: CALL_OW 7
// if raportForPlatonov = 2 then
13588: LD_EXP 39
13592: PUSH
13593: LD_INT 2
13595: EQUAL
13596: IFFALSE 13608
// raportForPlatonov = 1 else
13598: LD_ADDR_EXP 39
13602: PUSH
13603: LD_INT 1
13605: ST_TO_ADDR
13606: GO 13616
// raportForPlatonov = 3 ;
13608: LD_ADDR_EXP 39
13612: PUSH
13613: LD_INT 3
13615: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13616: LD_STRING M7
13618: PPUSH
13619: CALL_OW 337
// exit ;
13623: POP
13624: POP
13625: GO 13785
// end ; if bunker in rightBunkers and not sawRightBunker then
13627: LD_VAR 0 1
13631: PUSH
13632: LD_EXP 83
13636: IN
13637: PUSH
13638: LD_EXP 30
13642: NOT
13643: AND
13644: IFFALSE 13781
// begin sawRightBunker = true ;
13646: LD_ADDR_EXP 30
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13654: LD_VAR 0 1
13658: PPUSH
13659: CALL_OW 85
// DialogueOn ;
13663: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13667: LD_EXP 70
13671: PPUSH
13672: CALL_OW 302
13676: IFFALSE 13745
// begin if sawLeftBunker then
13678: LD_EXP 29
13682: IFFALSE 13698
// Say ( Kovalyuk , D16-Kov-1a ) else
13684: LD_EXP 70
13688: PPUSH
13689: LD_STRING D16-Kov-1a
13691: PPUSH
13692: CALL_OW 88
13696: GO 13710
// Say ( Kovalyuk , D16-Kov-1 ) ;
13698: LD_EXP 70
13702: PPUSH
13703: LD_STRING D16-Kov-1
13705: PPUSH
13706: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13710: LD_EXP 62
13714: PPUSH
13715: LD_STRING D16-Bur-1
13717: PPUSH
13718: CALL_OW 88
// if IsOK ( Gnyevko ) then
13722: LD_EXP 63
13726: PPUSH
13727: CALL_OW 302
13731: IFFALSE 13745
// Say ( Gnyevko , D16-Gny-1 ) ;
13733: LD_EXP 63
13737: PPUSH
13738: LD_STRING D16-Gny-1
13740: PPUSH
13741: CALL_OW 88
// end ; DialogueOff ;
13745: CALL_OW 7
// if raportForPlatonov = 3 then
13749: LD_EXP 39
13753: PUSH
13754: LD_INT 3
13756: EQUAL
13757: IFFALSE 13769
// raportForPlatonov = 1 else
13759: LD_ADDR_EXP 39
13763: PUSH
13764: LD_INT 1
13766: ST_TO_ADDR
13767: GO 13777
// raportForPlatonov = 2 ;
13769: LD_ADDR_EXP 39
13773: PUSH
13774: LD_INT 2
13776: ST_TO_ADDR
// exit ;
13777: POP
13778: POP
13779: GO 13785
// end ; end ; end ;
13781: GO 13377
13783: POP
13784: POP
// end ;
13785: PPOPN 1
13787: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13788: LD_EXP 32
13792: NOT
13793: PUSH
13794: LD_EXP 83
13798: AND
13799: PUSH
13800: LD_EXP 20
13804: AND
13805: PUSH
13806: LD_EXP 70
13810: PPUSH
13811: CALL_OW 302
13815: PUSH
13816: LD_EXP 63
13820: PPUSH
13821: CALL_OW 302
13825: OR
13826: AND
13827: IFFALSE 14015
13829: GO 13831
13831: DISABLE
13832: LD_INT 0
13834: PPUSH
// begin enable ;
13835: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13836: LD_ADDR_VAR 0 1
13840: PUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 2
13853: PUSH
13854: LD_INT 21
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 21
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: PPUSH
13883: CALL_OW 69
13887: PUSH
13888: FOR_IN
13889: IFFALSE 14013
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13891: LD_VAR 0 1
13895: PPUSH
13896: CALL_OW 320
13900: PUSH
13901: LD_EXP 83
13905: PUSH
13906: LD_INT 1
13908: ARRAY
13909: EQUAL
13910: PUSH
13911: LD_VAR 0 1
13915: PPUSH
13916: CALL_OW 320
13920: PUSH
13921: LD_EXP 83
13925: PUSH
13926: LD_INT 2
13928: ARRAY
13929: EQUAL
13930: OR
13931: IFFALSE 14011
// begin dialogAttackRightBunkers = true ;
13933: LD_ADDR_EXP 32
13937: PUSH
13938: LD_INT 1
13940: ST_TO_ADDR
// DialogueOn ;
13941: CALL_OW 6
// if IsOK ( Gnyevko ) then
13945: LD_EXP 63
13949: PPUSH
13950: CALL_OW 302
13954: IFFALSE 13968
// Say ( Gnyevko , D16A-Gny-1 ) ;
13956: LD_EXP 63
13960: PPUSH
13961: LD_STRING D16A-Gny-1
13963: PPUSH
13964: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13968: LD_EXP 70
13972: PPUSH
13973: CALL_OW 302
13977: IFFALSE 13991
// Say ( Kovalyuk , D16A-Kov-1 ) ;
13979: LD_EXP 70
13983: PPUSH
13984: LD_STRING D16A-Kov-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13991: LD_EXP 62
13995: PPUSH
13996: LD_STRING D16A-Bur-1
13998: PPUSH
13999: CALL_OW 88
// DialogueOff ;
14003: CALL_OW 7
// exit ;
14007: POP
14008: POP
14009: GO 14015
// end ; end ;
14011: GO 13888
14013: POP
14014: POP
// end ;
14015: PPOPN 1
14017: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
14018: LD_INT 18
14020: PPUSH
14021: LD_INT 22
14023: PUSH
14024: LD_INT 3
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: EMPTY
14032: LIST
14033: PPUSH
14034: CALL_OW 70
14038: PUSH
14039: LD_EXP 29
14043: NOT
14044: AND
14045: IFFALSE 14428
14047: GO 14049
14049: DISABLE
14050: LD_INT 0
14052: PPUSH
// begin sawLeftBunker = true ;
14053: LD_ADDR_EXP 29
14057: PUSH
14058: LD_INT 1
14060: ST_TO_ADDR
// if playerGetSupport then
14061: LD_EXP 34
14065: IFFALSE 14084
// decsToChoose = [ 1 , 3 ] else
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: LD_INT 1
14074: PUSH
14075: LD_INT 3
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 14103
// decsToChoose = [ 1 , 2 , 3 ] ;
14084: LD_ADDR_VAR 0 1
14088: PUSH
14089: LD_INT 1
14091: PUSH
14092: LD_INT 2
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14103: LD_STRING QAttackBw
14105: PPUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 98
14115: PUSH
14116: LD_INT 1
14118: DOUBLE
14119: EQUAL
14120: IFTRUE 14124
14122: GO 14217
14124: POP
// begin DialogueOn ;
14125: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14129: LD_EXP 62
14133: PPUSH
14134: LD_STRING D17-Bur-1
14136: PPUSH
14137: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14141: LD_EXP 76
14145: PPUSH
14146: LD_STRING D17-Pla-1
14148: PPUSH
14149: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14153: LD_EXP 62
14157: PPUSH
14158: LD_STRING D17-Bur-2
14160: PPUSH
14161: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14165: LD_EXP 76
14169: PPUSH
14170: LD_STRING D17-Pla-2
14172: PPUSH
14173: CALL_OW 94
// DialogueOff ;
14177: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14181: LD_EXP 42
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 3
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: IN
14196: NOT
14197: IFFALSE 14215
// begin initiative = 1 ;
14199: LD_ADDR_EXP 42
14203: PUSH
14204: LD_INT 1
14206: ST_TO_ADDR
// platonovOpinion = 2 ;
14207: LD_ADDR_EXP 5
14211: PUSH
14212: LD_INT 2
14214: ST_TO_ADDR
// end ; end ; 2 :
14215: GO 14358
14217: LD_INT 2
14219: DOUBLE
14220: EQUAL
14221: IFTRUE 14225
14223: GO 14330
14225: POP
// begin DialogueOn ;
14226: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14230: LD_EXP 62
14234: PPUSH
14235: LD_STRING D18-Bur-1
14237: PPUSH
14238: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14242: LD_EXP 76
14246: PPUSH
14247: LD_STRING D18-Pla-1
14249: PPUSH
14250: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14254: LD_EXP 62
14258: PPUSH
14259: LD_STRING D18-Bur-2
14261: PPUSH
14262: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14266: LD_EXP 76
14270: PPUSH
14271: LD_STRING D18-Pla-2
14273: PPUSH
14274: CALL_OW 94
// DialogueOff ;
14278: CALL_OW 7
// playerGetSupport = true ;
14282: LD_ADDR_EXP 34
14286: PUSH
14287: LD_INT 1
14289: ST_TO_ADDR
// medalForGetSupport = false ;
14290: LD_ADDR_EXP 40
14294: PUSH
14295: LD_INT 0
14297: ST_TO_ADDR
// PlatonovSendSupport ;
14298: CALL 6644 0 0
// if initiative <> 3 then
14302: LD_EXP 42
14306: PUSH
14307: LD_INT 3
14309: NONEQUAL
14310: IFFALSE 14328
// begin initiative = 1 ;
14312: LD_ADDR_EXP 42
14316: PUSH
14317: LD_INT 1
14319: ST_TO_ADDR
// platonovOpinion = 2 ;
14320: LD_ADDR_EXP 5
14324: PUSH
14325: LD_INT 2
14327: ST_TO_ADDR
// end ; end ; 3 :
14328: GO 14358
14330: LD_INT 3
14332: DOUBLE
14333: EQUAL
14334: IFTRUE 14338
14336: GO 14357
14338: POP
// begin initiative = 3 ;
14339: LD_ADDR_EXP 42
14343: PUSH
14344: LD_INT 3
14346: ST_TO_ADDR
// platonovOpinion = 0 ;
14347: LD_ADDR_EXP 5
14351: PUSH
14352: LD_INT 0
14354: ST_TO_ADDR
// end ; end ;
14355: GO 14358
14357: POP
// if IsOK ( Gnyevko ) then
14358: LD_EXP 63
14362: PPUSH
14363: CALL_OW 302
14367: IFFALSE 14393
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14369: LD_EXP 63
14373: PPUSH
14374: LD_STRING D19-Gny-1
14376: PPUSH
14377: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14381: LD_EXP 62
14385: PPUSH
14386: LD_STRING D19-Bur-1
14388: PPUSH
14389: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14393: LD_EXP 70
14397: PPUSH
14398: CALL_OW 302
14402: IFFALSE 14428
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14404: LD_EXP 70
14408: PPUSH
14409: LD_STRING D19-Kov-1
14411: PPUSH
14412: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14416: LD_EXP 62
14420: PPUSH
14421: LD_STRING D19-Bur-2
14423: PPUSH
14424: CALL_OW 88
// end ; end ;
14428: PPOPN 1
14430: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14431: LD_EXP 31
14435: NOT
14436: PUSH
14437: LD_EXP 82
14441: AND
14442: PUSH
14443: LD_EXP 20
14447: AND
14448: PUSH
14449: LD_INT 18
14451: PPUSH
14452: LD_INT 22
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: PPUSH
14465: CALL_OW 70
14469: PUSH
14470: LD_INT 0
14472: EQUAL
14473: AND
14474: PUSH
14475: LD_EXP 70
14479: PPUSH
14480: CALL_OW 302
14484: PUSH
14485: LD_EXP 63
14489: PPUSH
14490: CALL_OW 302
14494: OR
14495: AND
14496: IFFALSE 14684
14498: GO 14500
14500: DISABLE
14501: LD_INT 0
14503: PPUSH
// begin enable ;
14504: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14505: LD_ADDR_VAR 0 1
14509: PUSH
14510: LD_INT 22
14512: PUSH
14513: LD_INT 3
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 2
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 1
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: LD_INT 21
14535: PUSH
14536: LD_INT 2
14538: PUSH
14539: EMPTY
14540: LIST
14541: LIST
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: PUSH
14557: FOR_IN
14558: IFFALSE 14682
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14560: LD_VAR 0 1
14564: PPUSH
14565: CALL_OW 320
14569: PUSH
14570: LD_EXP 82
14574: PUSH
14575: LD_INT 1
14577: ARRAY
14578: EQUAL
14579: PUSH
14580: LD_VAR 0 1
14584: PPUSH
14585: CALL_OW 320
14589: PUSH
14590: LD_EXP 82
14594: PUSH
14595: LD_INT 2
14597: ARRAY
14598: EQUAL
14599: OR
14600: IFFALSE 14680
// begin dialogAttackLeftBunkers = true ;
14602: LD_ADDR_EXP 31
14606: PUSH
14607: LD_INT 1
14609: ST_TO_ADDR
// DialogueOn ;
14610: CALL_OW 6
// if IsOK ( Gnyevko ) then
14614: LD_EXP 63
14618: PPUSH
14619: CALL_OW 302
14623: IFFALSE 14637
// Say ( Gnyevko , D19A-Gny-1 ) ;
14625: LD_EXP 63
14629: PPUSH
14630: LD_STRING D19A-Gny-1
14632: PPUSH
14633: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14637: LD_EXP 70
14641: PPUSH
14642: CALL_OW 302
14646: IFFALSE 14660
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14648: LD_EXP 70
14652: PPUSH
14653: LD_STRING D19A-Kov-1
14655: PPUSH
14656: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14660: LD_EXP 62
14664: PPUSH
14665: LD_STRING D16A-Bur-1
14667: PPUSH
14668: CALL_OW 88
// DialogueOff ;
14672: CALL_OW 7
// exit ;
14676: POP
14677: POP
14678: GO 14684
// end ; end ;
14680: GO 14557
14682: POP
14683: POP
// end ;
14684: PPOPN 1
14686: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14687: LD_EXP 82
14691: NOT
14692: PUSH
14693: LD_INT 17
14695: PPUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 1
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 3
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 30
14718: PUSH
14719: LD_INT 31
14721: PUSH
14722: EMPTY
14723: LIST
14724: LIST
14725: PUSH
14726: LD_INT 50
14728: PUSH
14729: EMPTY
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 70
14742: PUSH
14743: LD_INT 0
14745: EQUAL
14746: OR
14747: PUSH
14748: LD_EXP 20
14752: AND
14753: IFFALSE 14804
14755: GO 14757
14757: DISABLE
// begin leftBunkers = [ ] ;
14758: LD_ADDR_EXP 82
14762: PUSH
14763: EMPTY
14764: ST_TO_ADDR
// DialogueOn ;
14765: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14769: LD_EXP 62
14773: PPUSH
14774: LD_STRING D20-Bur-1
14776: PPUSH
14777: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14781: LD_EXP 76
14785: PPUSH
14786: LD_STRING D20-Pla-1
14788: PPUSH
14789: CALL_OW 88
// DialogueOff ;
14793: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14797: LD_STRING M8
14799: PPUSH
14800: CALL_OW 337
// end ;
14804: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14805: LD_EXP 83
14809: NOT
14810: PUSH
14811: LD_INT 16
14813: PPUSH
14814: LD_INT 22
14816: PUSH
14817: LD_INT 1
14819: PUSH
14820: EMPTY
14821: LIST
14822: LIST
14823: PUSH
14824: LD_INT 21
14826: PUSH
14827: LD_INT 3
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 31
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 50
14846: PUSH
14847: EMPTY
14848: LIST
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: PPUSH
14856: CALL_OW 70
14860: PUSH
14861: LD_INT 0
14863: EQUAL
14864: OR
14865: PUSH
14866: LD_EXP 20
14870: AND
14871: IFFALSE 14915
14873: GO 14875
14875: DISABLE
// begin rightBunkers = [ ] ;
14876: LD_ADDR_EXP 83
14880: PUSH
14881: EMPTY
14882: ST_TO_ADDR
// DialogueOn ;
14883: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14887: LD_EXP 62
14891: PPUSH
14892: LD_STRING D20a-Bur-1
14894: PPUSH
14895: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14899: LD_EXP 76
14903: PPUSH
14904: LD_STRING D20a-Pla-1
14906: PPUSH
14907: CALL_OW 88
// DialogueOff ;
14911: CALL_OW 7
// end ;
14915: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14916: LD_EXP 35
14920: NOT
14921: PUSH
14922: LD_EXP 73
14926: AND
14927: IFFALSE 15422
14929: GO 14931
14931: DISABLE
14932: LD_INT 0
14934: PPUSH
14935: PPUSH
14936: PPUSH
// begin enable ;
14937: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14938: LD_ADDR_VAR 0 1
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 3
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PUSH
14953: LD_INT 2
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 1
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 21
14968: PUSH
14969: LD_INT 2
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15420
// for trapUnit in trapTeam do
14993: LD_ADDR_VAR 0 2
14997: PUSH
14998: LD_EXP 81
15002: PUSH
15003: FOR_IN
15004: IFFALSE 15416
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
15006: LD_VAR 0 1
15010: PPUSH
15011: LD_VAR 0 2
15015: PPUSH
15016: CALL_OW 296
15020: PUSH
15021: LD_INT 16
15023: LESS
15024: IFFALSE 15414
// begin saveBelkovDecision = true ;
15026: LD_ADDR_EXP 35
15030: PUSH
15031: LD_INT 1
15033: ST_TO_ADDR
// if playerGetSupport then
15034: LD_EXP 34
15038: IFFALSE 15057
// decsToChoose = [ 1 , 3 ] else
15040: LD_ADDR_VAR 0 3
15044: PUSH
15045: LD_INT 1
15047: PUSH
15048: LD_INT 3
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
15055: GO 15076
// decsToChoose = [ 1 , 2 , 3 ] ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_INT 1
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: LD_INT 3
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
15076: LD_STRING QAttackAm
15078: PPUSH
15079: LD_VAR 0 3
15083: PPUSH
15084: CALL_OW 98
15088: PUSH
15089: LD_INT 1
15091: DOUBLE
15092: EQUAL
15093: IFTRUE 15097
15095: GO 15166
15097: POP
// begin DialogueOn ;
15098: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15102: LD_EXP 62
15106: PPUSH
15107: LD_STRING D21-Bur-1
15109: PPUSH
15110: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15114: LD_EXP 76
15118: PPUSH
15119: LD_STRING D21-Pla-1
15121: PPUSH
15122: CALL_OW 94
// DialogueOff ;
15126: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15130: LD_EXP 42
15134: PUSH
15135: LD_INT 2
15137: PUSH
15138: LD_INT 3
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: IN
15145: NOT
15146: IFFALSE 15164
// begin initiative = 1 ;
15148: LD_ADDR_EXP 42
15152: PUSH
15153: LD_INT 1
15155: ST_TO_ADDR
// platonovOpinion = 2 ;
15156: LD_ADDR_EXP 5
15160: PUSH
15161: LD_INT 2
15163: ST_TO_ADDR
// end ; end ; 2 :
15164: GO 15358
15166: LD_INT 2
15168: DOUBLE
15169: EQUAL
15170: IFTRUE 15174
15172: GO 15330
15174: POP
// begin DialogueOn ;
15175: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15179: LD_EXP 62
15183: PPUSH
15184: LD_STRING D22-Bur-1
15186: PPUSH
15187: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15191: LD_EXP 34
15195: PUSH
15196: LD_EXP 82
15200: PUSH
15201: LD_INT 0
15203: EQUAL
15204: PUSH
15205: LD_EXP 83
15209: PUSH
15210: LD_INT 0
15212: EQUAL
15213: OR
15214: AND
15215: IFFALSE 15229
// Say ( Platonov , D22-Pla-1b ) ;
15217: LD_EXP 76
15221: PPUSH
15222: LD_STRING D22-Pla-1b
15224: PPUSH
15225: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15229: LD_EXP 34
15233: PUSH
15234: LD_EXP 82
15238: PUSH
15239: LD_EXP 83
15243: OR
15244: AND
15245: IFFALSE 15259
// Say ( Platonov , D22-Pla-1a ) ;
15247: LD_EXP 76
15251: PPUSH
15252: LD_STRING D22-Pla-1a
15254: PPUSH
15255: CALL_OW 88
// if not playerGetSupport then
15259: LD_EXP 34
15263: NOT
15264: IFFALSE 15298
// begin Say ( Platonov , D22-Pla-1 ) ;
15266: LD_EXP 76
15270: PPUSH
15271: LD_STRING D22-Pla-1
15273: PPUSH
15274: CALL_OW 88
// playerGetSupport = true ;
15278: LD_ADDR_EXP 34
15282: PUSH
15283: LD_INT 1
15285: ST_TO_ADDR
// medalForGetSupport = false ;
15286: LD_ADDR_EXP 40
15290: PUSH
15291: LD_INT 0
15293: ST_TO_ADDR
// PlatonovSendSupport ;
15294: CALL 6644 0 0
// end ; DialogueOff ;
15298: CALL_OW 7
// if initiative <> 3 then
15302: LD_EXP 42
15306: PUSH
15307: LD_INT 3
15309: NONEQUAL
15310: IFFALSE 15328
// begin initiative = 2 ;
15312: LD_ADDR_EXP 42
15316: PUSH
15317: LD_INT 2
15319: ST_TO_ADDR
// platonovOpinion = 1 ;
15320: LD_ADDR_EXP 5
15324: PUSH
15325: LD_INT 1
15327: ST_TO_ADDR
// end ; end ; 3 :
15328: GO 15358
15330: LD_INT 3
15332: DOUBLE
15333: EQUAL
15334: IFTRUE 15338
15336: GO 15357
15338: POP
// begin initiative = 3 ;
15339: LD_ADDR_EXP 42
15343: PUSH
15344: LD_INT 3
15346: ST_TO_ADDR
// platonovOpinion = 0 ;
15347: LD_ADDR_EXP 5
15351: PUSH
15352: LD_INT 0
15354: ST_TO_ADDR
// end ; end ;
15355: GO 15358
15357: POP
// if IsOK ( Gnyevko ) then
15358: LD_EXP 63
15362: PPUSH
15363: CALL_OW 302
15367: IFFALSE 15393
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15369: LD_EXP 63
15373: PPUSH
15374: LD_STRING D23-Gny-1
15376: PPUSH
15377: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15381: LD_EXP 62
15385: PPUSH
15386: LD_STRING D23-Bur-1
15388: PPUSH
15389: CALL_OW 88
// end ; saveBelkovObjective = true ;
15393: LD_ADDR_EXP 36
15397: PUSH
15398: LD_INT 1
15400: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15401: LD_STRING M9
15403: PPUSH
15404: CALL_OW 337
// exit ;
15408: POP
15409: POP
15410: POP
15411: POP
15412: GO 15422
// end ;
15414: GO 15003
15416: POP
15417: POP
15418: GO 14990
15420: POP
15421: POP
// end ;
15422: PPOPN 3
15424: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15425: LD_EXP 20
15429: PUSH
15430: LD_EXP 81
15434: NOT
15435: AND
15436: PUSH
15437: LD_EXP 37
15441: NOT
15442: AND
15443: IFFALSE 15483
15445: GO 15447
15447: DISABLE
// begin belkovSaved = true ;
15448: LD_ADDR_EXP 37
15452: PUSH
15453: LD_INT 1
15455: ST_TO_ADDR
// activateBelkovAI = false ;
15456: LD_ADDR_EXP 28
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15464: LD_EXP 73
15468: PPUSH
15469: LD_INT 3
15471: PPUSH
15472: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15476: LD_STRING M9a
15478: PPUSH
15479: CALL_OW 337
// end ;
15483: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15484: LD_EXP 35
15488: PUSH
15489: LD_EXP 64
15493: PPUSH
15494: CALL_OW 301
15498: PUSH
15499: LD_EXP 68
15503: PPUSH
15504: CALL_OW 301
15508: PUSH
15509: LD_EXP 64
15513: PPUSH
15514: CALL_OW 255
15518: PUSH
15519: LD_INT 6
15521: EQUAL
15522: PUSH
15523: LD_EXP 68
15527: PPUSH
15528: CALL_OW 255
15532: PUSH
15533: LD_INT 6
15535: EQUAL
15536: OR
15537: AND
15538: OR
15539: AND
15540: IFFALSE 15560
15542: GO 15544
15544: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15545: LD_STRING M9a
15547: PPUSH
15548: CALL_OW 337
// saveBelkovObjective = false ;
15552: LD_ADDR_EXP 36
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// end ;
15560: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15561: LD_EXP 37
15565: PUSH
15566: LD_EXP 62
15570: PPUSH
15571: LD_EXP 64
15575: PPUSH
15576: CALL_OW 296
15580: PUSH
15581: LD_INT 14
15583: LESS
15584: PUSH
15585: LD_EXP 6
15589: AND
15590: PUSH
15591: LD_EXP 62
15595: PPUSH
15596: LD_EXP 68
15600: PPUSH
15601: CALL_OW 296
15605: PUSH
15606: LD_INT 14
15608: LESS
15609: PUSH
15610: LD_EXP 6
15614: NOT
15615: AND
15616: OR
15617: AND
15618: IFFALSE 15914
15620: GO 15622
15622: DISABLE
// begin InGameOn ;
15623: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15627: LD_EXP 64
15631: PPUSH
15632: CALL_OW 302
15636: PUSH
15637: LD_EXP 6
15641: AND
15642: IFFALSE 15738
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15644: LD_EXP 62
15648: PUSH
15649: LD_EXP 64
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15662: LD_EXP 62
15666: PPUSH
15667: LD_EXP 64
15671: PPUSH
15672: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15676: LD_EXP 64
15680: PPUSH
15681: LD_EXP 62
15685: PPUSH
15686: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15690: LD_EXP 64
15694: PPUSH
15695: LD_STRING D24-Bel-1
15697: PPUSH
15698: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15702: LD_EXP 62
15706: PPUSH
15707: LD_STRING D24-Bur-1
15709: PPUSH
15710: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15714: LD_EXP 64
15718: PPUSH
15719: LD_STRING D24-Bel-2
15721: PPUSH
15722: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15726: LD_EXP 62
15730: PPUSH
15731: LD_STRING D24-Bur-2
15733: PPUSH
15734: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15738: LD_EXP 68
15742: PPUSH
15743: CALL_OW 302
15747: PUSH
15748: LD_EXP 6
15752: NOT
15753: AND
15754: IFFALSE 15862
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15756: LD_EXP 62
15760: PUSH
15761: LD_EXP 68
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PPUSH
15770: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15774: LD_EXP 62
15778: PPUSH
15779: LD_EXP 68
15783: PPUSH
15784: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15788: LD_EXP 68
15792: PPUSH
15793: LD_EXP 62
15797: PPUSH
15798: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15802: LD_EXP 68
15806: PPUSH
15807: LD_STRING D24-Bel-1
15809: PPUSH
15810: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15814: LD_EXP 62
15818: PPUSH
15819: LD_STRING D24-Bur-1
15821: PPUSH
15822: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15826: LD_EXP 62
15830: PPUSH
15831: LD_STRING D24-Bur-1a
15833: PPUSH
15834: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15838: LD_EXP 68
15842: PPUSH
15843: LD_STRING D24-Bel-2
15845: PPUSH
15846: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15850: LD_EXP 62
15854: PPUSH
15855: LD_STRING D24-Bur-2
15857: PPUSH
15858: CALL_OW 88
// end ; if captureBelkovVehicle then
15862: LD_EXP 38
15866: IFFALSE 15880
// Say ( Burlak , D24-Bur-2a ) ;
15868: LD_EXP 62
15872: PPUSH
15873: LD_STRING D24-Bur-2a
15875: PPUSH
15876: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15880: LD_EXP 76
15884: PPUSH
15885: LD_STRING D24-Pla-2
15887: PPUSH
15888: CALL_OW 94
// if leftBunkers then
15892: LD_EXP 82
15896: IFFALSE 15910
// SayRadio ( Platonov , D24-Pla-2a ) ;
15898: LD_EXP 76
15902: PPUSH
15903: LD_STRING D24-Pla-2a
15905: PPUSH
15906: CALL_OW 94
// InGameOff ;
15910: CALL_OW 9
// end ;
15914: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15915: LD_INT 22
15917: PPUSH
15918: LD_INT 22
15920: PUSH
15921: LD_INT 3
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 2
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 70
15946: PUSH
15947: LD_EXP 70
15951: PPUSH
15952: CALL_OW 302
15956: PUSH
15957: LD_EXP 63
15961: PPUSH
15962: CALL_OW 302
15966: OR
15967: AND
15968: IFFALSE 16051
15970: GO 15972
15972: DISABLE
// begin DialogueOn ;
15973: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
15977: LD_EXP 62
15981: PPUSH
15982: LD_STRING D26-Bur-1
15984: PPUSH
15985: CALL_OW 88
// if IsOk ( Kovalyuk ) then
15989: LD_EXP 70
15993: PPUSH
15994: CALL_OW 302
15998: IFFALSE 16012
// Say ( Kovalyuk , D26-Kov-1 ) ;
16000: LD_EXP 70
16004: PPUSH
16005: LD_STRING D26-Kov-1
16007: PPUSH
16008: CALL_OW 88
// if IsOk ( Gnyevko ) then
16012: LD_EXP 63
16016: PPUSH
16017: CALL_OW 302
16021: IFFALSE 16035
// Say ( Gnyevko , D26-Gny-1 ) ;
16023: LD_EXP 63
16027: PPUSH
16028: LD_STRING D26-Gny-1
16030: PPUSH
16031: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
16035: LD_EXP 62
16039: PPUSH
16040: LD_STRING D26-Bur-2
16042: PPUSH
16043: CALL_OW 88
// DialogueOff ;
16047: CALL_OW 7
// end ;
16051: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
16052: LD_EXP 20
16056: PUSH
16057: LD_EXP 62
16061: PPUSH
16062: LD_INT 8
16064: PPUSH
16065: CALL_OW 308
16069: NOT
16070: PUSH
16071: LD_EXP 62
16075: PPUSH
16076: CALL_OW 310
16080: PPUSH
16081: CALL_OW 310
16085: PPUSH
16086: LD_INT 8
16088: PPUSH
16089: CALL_OW 308
16093: NOT
16094: AND
16095: AND
16096: PUSH
16097: LD_EXP 39
16101: PUSH
16102: LD_INT 1
16104: NEG
16105: EQUAL
16106: AND
16107: IFFALSE 16121
16109: GO 16111
16111: DISABLE
// begin enable ;
16112: ENABLE
// raportForPlatonov = 0 ;
16113: LD_ADDR_EXP 39
16117: PUSH
16118: LD_INT 0
16120: ST_TO_ADDR
// end ;
16121: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16122: LD_EXP 20
16126: PUSH
16127: LD_EXP 39
16131: PUSH
16132: LD_INT 0
16134: GREATEREQUAL
16135: AND
16136: PUSH
16137: LD_EXP 16
16141: NOT
16142: AND
16143: PUSH
16144: LD_EXP 62
16148: PPUSH
16149: LD_INT 8
16151: PPUSH
16152: CALL_OW 308
16156: PUSH
16157: LD_EXP 62
16161: PPUSH
16162: CALL_OW 310
16166: PPUSH
16167: CALL_OW 310
16171: PPUSH
16172: LD_INT 8
16174: PPUSH
16175: CALL_OW 308
16179: PUSH
16180: LD_EXP 16
16184: NOT
16185: AND
16186: OR
16187: AND
16188: IFFALSE 16479
16190: GO 16192
16192: DISABLE
// begin enable ;
16193: ENABLE
// DialogueOn ;
16194: CALL_OW 6
// case raportForPlatonov of 0 :
16198: LD_EXP 39
16202: PUSH
16203: LD_INT 0
16205: DOUBLE
16206: EQUAL
16207: IFTRUE 16211
16209: GO 16238
16211: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16212: LD_EXP 76
16216: PPUSH
16217: LD_STRING D25a-Pla-1
16219: PPUSH
16220: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16224: LD_EXP 62
16228: PPUSH
16229: LD_STRING D25a-Bur-1
16231: PPUSH
16232: CALL_OW 88
// end ; 1 :
16236: GO 16454
16238: LD_INT 1
16240: DOUBLE
16241: EQUAL
16242: IFTRUE 16246
16244: GO 16309
16246: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16247: LD_EXP 76
16251: PPUSH
16252: LD_STRING D25-Pla-1
16254: PPUSH
16255: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16259: LD_EXP 62
16263: PPUSH
16264: LD_STRING D25-Bur-1
16266: PPUSH
16267: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16271: LD_EXP 62
16275: PPUSH
16276: LD_STRING D25b-Bur-1
16278: PPUSH
16279: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16283: LD_EXP 76
16287: PPUSH
16288: LD_STRING D25b-Pla-1
16290: PPUSH
16291: CALL_OW 88
// playerGetSupport = true ;
16295: LD_ADDR_EXP 34
16299: PUSH
16300: LD_INT 1
16302: ST_TO_ADDR
// PlatonovSendSupport ;
16303: CALL 6644 0 0
// end ; 2 :
16307: GO 16454
16309: LD_INT 2
16311: DOUBLE
16312: EQUAL
16313: IFTRUE 16317
16315: GO 16363
16317: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16318: LD_EXP 76
16322: PPUSH
16323: LD_STRING D25-Pla-1
16325: PPUSH
16326: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16330: LD_EXP 62
16334: PPUSH
16335: LD_STRING D25-Bur-1a
16337: PPUSH
16338: CALL_OW 88
// if not sawLeftBunker then
16342: LD_EXP 29
16346: NOT
16347: IFFALSE 16361
// Say ( Platonov , D25c-Pla-1 ) ;
16349: LD_EXP 76
16353: PPUSH
16354: LD_STRING D25c-Pla-1
16356: PPUSH
16357: CALL_OW 88
// end ; 3 :
16361: GO 16454
16363: LD_INT 3
16365: DOUBLE
16366: EQUAL
16367: IFTRUE 16371
16369: GO 16453
16371: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16372: LD_EXP 76
16376: PPUSH
16377: LD_STRING D25-Pla-1
16379: PPUSH
16380: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16384: LD_EXP 62
16388: PPUSH
16389: LD_STRING D25a-Bur-1b
16391: PPUSH
16392: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16396: LD_EXP 62
16400: PPUSH
16401: LD_STRING D25b-Bur-1
16403: PPUSH
16404: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16408: LD_EXP 76
16412: PPUSH
16413: LD_STRING D25b-Pla-1
16415: PPUSH
16416: CALL_OW 88
// playerGetSupport = true ;
16420: LD_ADDR_EXP 34
16424: PUSH
16425: LD_INT 1
16427: ST_TO_ADDR
// PlatonovSendSupport ;
16428: CALL 6644 0 0
// if not sawRightBunker then
16432: LD_EXP 30
16436: NOT
16437: IFFALSE 16451
// Say ( Platonov , D25c-Pla-1 ) ;
16439: LD_EXP 76
16443: PPUSH
16444: LD_STRING D25c-Pla-1
16446: PPUSH
16447: CALL_OW 88
// end ; end ;
16451: GO 16454
16453: POP
// raportForPlatonov = - 1 ;
16454: LD_ADDR_EXP 39
16458: PUSH
16459: LD_INT 1
16461: NEG
16462: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16463: LD_EXP 76
16467: PPUSH
16468: LD_STRING D25c-Pla-1a
16470: PPUSH
16471: CALL_OW 88
// DialogueOff ;
16475: CALL_OW 7
// end ;
16479: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16480: LD_INT 19
16482: PPUSH
16483: LD_INT 22
16485: PUSH
16486: LD_INT 3
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: PPUSH
16496: CALL_OW 70
16500: PUSH
16501: LD_INT 0
16503: GREATER
16504: IFFALSE 16524
16506: GO 16508
16508: DISABLE
// begin northMapExplored = true ;
16509: LD_ADDR_EXP 41
16513: PUSH
16514: LD_INT 1
16516: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16517: LD_STRING M10
16519: PPUSH
16520: CALL_OW 337
// end ;
16524: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16525: LD_EXP 82
16529: NOT
16530: PUSH
16531: LD_EXP 41
16535: AND
16536: PUSH
16537: LD_EXP 37
16541: PUSH
16542: LD_EXP 36
16546: NOT
16547: OR
16548: AND
16549: IFFALSE 16569
16551: GO 16553
16553: DISABLE
// begin backToBeria2 = true ;
16554: LD_ADDR_EXP 16
16558: PUSH
16559: LD_INT 1
16561: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16562: LD_STRING M10a
16564: PPUSH
16565: CALL_OW 337
// end ;
16569: END
// every 0 0$1 do
16570: GO 16572
16572: DISABLE
// begin enable ;
16573: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16574: LD_EXP 67
16578: PUSH
16579: LD_EXP 76
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PPUSH
16588: LD_INT 1000
16590: PPUSH
16591: CALL_OW 234
// end ; end_of_file
16595: END
// export function CreateNature ; var i , un ; begin
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
16600: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16601: LD_ADDR_VAR 0 2
16605: PUSH
16606: DOUBLE
16607: LD_INT 1
16609: DEC
16610: ST_TO_ADDR
16611: LD_EXP 45
16615: PUSH
16616: LD_INT 1
16618: ARRAY
16619: PUSH
16620: FOR_TO
16621: IFFALSE 16731
// begin uc_side = 0 ;
16623: LD_ADDR_OWVAR 20
16627: PUSH
16628: LD_INT 0
16630: ST_TO_ADDR
// uc_nation = nation_nature ;
16631: LD_ADDR_OWVAR 21
16635: PUSH
16636: LD_INT 0
16638: ST_TO_ADDR
// hc_class = class_apeman ;
16639: LD_ADDR_OWVAR 28
16643: PUSH
16644: LD_INT 12
16646: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16647: LD_ADDR_OWVAR 31
16651: PUSH
16652: LD_EXP 46
16656: PUSH
16657: LD_INT 1
16659: ARRAY
16660: PUSH
16661: LD_EXP 46
16665: PUSH
16666: LD_INT 2
16668: ARRAY
16669: PUSH
16670: LD_EXP 46
16674: PUSH
16675: LD_INT 3
16677: ARRAY
16678: PUSH
16679: LD_EXP 46
16683: PUSH
16684: LD_INT 4
16686: ARRAY
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16694: LD_ADDR_OWVAR 35
16698: PUSH
16699: LD_EXP 47
16703: ST_TO_ADDR
// un = CreateHuman ;
16704: LD_ADDR_VAR 0 3
16708: PUSH
16709: CALL_OW 44
16713: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16714: LD_VAR 0 3
16718: PPUSH
16719: LD_INT 21
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 49
// end ;
16729: GO 16620
16731: POP
16732: POP
// for i := 1 to animalsAmount [ 2 ] do
16733: LD_ADDR_VAR 0 2
16737: PUSH
16738: DOUBLE
16739: LD_INT 1
16741: DEC
16742: ST_TO_ADDR
16743: LD_EXP 45
16747: PUSH
16748: LD_INT 2
16750: ARRAY
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16863
// begin uc_side = 0 ;
16755: LD_ADDR_OWVAR 20
16759: PUSH
16760: LD_INT 0
16762: ST_TO_ADDR
// uc_nation = nation_nature ;
16763: LD_ADDR_OWVAR 21
16767: PUSH
16768: LD_INT 0
16770: ST_TO_ADDR
// hc_class = class_phororhacos ;
16771: LD_ADDR_OWVAR 28
16775: PUSH
16776: LD_INT 18
16778: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16779: LD_ADDR_OWVAR 31
16783: PUSH
16784: LD_EXP 46
16788: PUSH
16789: LD_INT 1
16791: ARRAY
16792: PUSH
16793: LD_EXP 46
16797: PUSH
16798: LD_INT 2
16800: ARRAY
16801: PUSH
16802: LD_EXP 46
16806: PUSH
16807: LD_INT 3
16809: ARRAY
16810: PUSH
16811: LD_EXP 46
16815: PUSH
16816: LD_INT 4
16818: ARRAY
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16826: LD_ADDR_OWVAR 35
16830: PUSH
16831: LD_EXP 47
16835: ST_TO_ADDR
// un = CreateHuman ;
16836: LD_ADDR_VAR 0 3
16840: PUSH
16841: CALL_OW 44
16845: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16846: LD_VAR 0 3
16850: PPUSH
16851: LD_INT 21
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 49
// end ;
16861: GO 16752
16863: POP
16864: POP
// for i := 1 to animalsAmount [ 3 ] do
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: DOUBLE
16871: LD_INT 1
16873: DEC
16874: ST_TO_ADDR
16875: LD_EXP 45
16879: PUSH
16880: LD_INT 3
16882: ARRAY
16883: PUSH
16884: FOR_TO
16885: IFFALSE 16995
// begin uc_side = 0 ;
16887: LD_ADDR_OWVAR 20
16891: PUSH
16892: LD_INT 0
16894: ST_TO_ADDR
// uc_nation = nation_nature ;
16895: LD_ADDR_OWVAR 21
16899: PUSH
16900: LD_INT 0
16902: ST_TO_ADDR
// hc_class = class_tiger ;
16903: LD_ADDR_OWVAR 28
16907: PUSH
16908: LD_INT 14
16910: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16911: LD_ADDR_OWVAR 31
16915: PUSH
16916: LD_EXP 46
16920: PUSH
16921: LD_INT 1
16923: ARRAY
16924: PUSH
16925: LD_EXP 46
16929: PUSH
16930: LD_INT 2
16932: ARRAY
16933: PUSH
16934: LD_EXP 46
16938: PUSH
16939: LD_INT 3
16941: ARRAY
16942: PUSH
16943: LD_EXP 46
16947: PUSH
16948: LD_INT 4
16950: ARRAY
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16958: LD_ADDR_OWVAR 35
16962: PUSH
16963: LD_EXP 47
16967: ST_TO_ADDR
// un = CreateHuman ;
16968: LD_ADDR_VAR 0 3
16972: PUSH
16973: CALL_OW 44
16977: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16978: LD_VAR 0 3
16982: PPUSH
16983: LD_INT 21
16985: PPUSH
16986: LD_INT 0
16988: PPUSH
16989: CALL_OW 49
// end ;
16993: GO 16884
16995: POP
16996: POP
// for i := 1 to animalsAmount [ 4 ] do
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: DOUBLE
17003: LD_INT 1
17005: DEC
17006: ST_TO_ADDR
17007: LD_EXP 45
17011: PUSH
17012: LD_INT 4
17014: ARRAY
17015: PUSH
17016: FOR_TO
17017: IFFALSE 17127
// begin uc_side = 0 ;
17019: LD_ADDR_OWVAR 20
17023: PUSH
17024: LD_INT 0
17026: ST_TO_ADDR
// uc_nation = nation_nature ;
17027: LD_ADDR_OWVAR 21
17031: PUSH
17032: LD_INT 0
17034: ST_TO_ADDR
// hc_class = 21 ;
17035: LD_ADDR_OWVAR 28
17039: PUSH
17040: LD_INT 21
17042: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
17043: LD_ADDR_OWVAR 31
17047: PUSH
17048: LD_EXP 46
17052: PUSH
17053: LD_INT 1
17055: ARRAY
17056: PUSH
17057: LD_EXP 46
17061: PUSH
17062: LD_INT 2
17064: ARRAY
17065: PUSH
17066: LD_EXP 46
17070: PUSH
17071: LD_INT 3
17073: ARRAY
17074: PUSH
17075: LD_EXP 46
17079: PUSH
17080: LD_INT 4
17082: ARRAY
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17090: LD_ADDR_OWVAR 35
17094: PUSH
17095: LD_EXP 47
17099: ST_TO_ADDR
// un = CreateHuman ;
17100: LD_ADDR_VAR 0 3
17104: PUSH
17105: CALL_OW 44
17109: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17110: LD_VAR 0 3
17114: PPUSH
17115: LD_INT 21
17117: PPUSH
17118: LD_INT 0
17120: PPUSH
17121: CALL_OW 49
// end ;
17125: GO 17016
17127: POP
17128: POP
// end ; end_of_file
17129: LD_VAR 0 1
17133: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17134: LD_EXP 21
17138: IFFALSE 17367
17140: GO 17142
17142: DISABLE
17143: LD_INT 0
17145: PPUSH
17146: PPUSH
17147: PPUSH
17148: PPUSH
17149: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17150: LD_ADDR_VAR 0 4
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 1
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 25
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17195: LD_INT 700
17197: PPUSH
17198: CALL_OW 67
// carryCratesEngs = 0 ;
17202: LD_ADDR_VAR 0 3
17206: PUSH
17207: LD_INT 0
17209: ST_TO_ADDR
// for unit in playerEngs do
17210: LD_ADDR_VAR 0 2
17214: PUSH
17215: LD_VAR 0 4
17219: PUSH
17220: FOR_IN
17221: IFFALSE 17249
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17223: LD_ADDR_VAR 0 3
17227: PUSH
17228: LD_VAR 0 3
17232: PUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL_OW 289
17245: PLUS
17246: ST_TO_ADDR
17247: GO 17220
17249: POP
17250: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17251: LD_INT 106
17253: PPUSH
17254: CALL_OW 274
17258: PPUSH
17259: LD_INT 1
17261: PPUSH
17262: CALL_OW 275
17266: PUSH
17267: LD_INT 50
17269: LESS
17270: PUSH
17271: LD_INT 8
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: CALL_OW 287
17281: PUSH
17282: LD_INT 10
17284: MUL
17285: PUSH
17286: LD_INT 106
17288: PPUSH
17289: CALL_OW 274
17293: PPUSH
17294: LD_INT 1
17296: PPUSH
17297: CALL_OW 275
17301: PLUS
17302: PUSH
17303: LD_VAR 0 3
17307: PLUS
17308: PUSH
17309: LD_INT 50
17311: LESS
17312: AND
17313: IFFALSE 17325
// spawnNextCrates = true else
17315: LD_ADDR_VAR 0 5
17319: PUSH
17320: LD_INT 1
17322: ST_TO_ADDR
17323: GO 17333
// spawnNextCrates = false ;
17325: LD_ADDR_VAR 0 5
17329: PUSH
17330: LD_INT 0
17332: ST_TO_ADDR
// if spawnNextCrates then
17333: LD_VAR 0 5
17337: IFFALSE 17360
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 5
17344: PPUSH
17345: CALL_OW 12
17349: PPUSH
17350: LD_INT 26
17352: PPUSH
17353: LD_INT 1
17355: PPUSH
17356: CALL_OW 55
// until not spawnCrates ;
17360: LD_EXP 21
17364: NOT
17365: IFFALSE 17150
// end ; end_of_file
17367: PPOPN 5
17369: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17370: LD_VAR 0 1
17374: PPUSH
17375: CALL_OW 266
17379: PUSH
17380: LD_INT 6
17382: EQUAL
17383: PUSH
17384: LD_INT 22
17386: PUSH
17387: LD_INT 3
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 30
17396: PUSH
17397: LD_INT 6
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: PPUSH
17408: CALL_OW 69
17412: PUSH
17413: LD_INT 1
17415: GREATER
17416: AND
17417: PUSH
17418: LD_EXP 11
17422: NOT
17423: AND
17424: IFFALSE 17435
// Dial_StopConstructAgainSameBuilding ( building ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: CALL 9136 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 266
17444: PUSH
17445: LD_INT 2
17447: EQUAL
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_INT 3
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: LD_INT 30
17461: PUSH
17462: LD_INT 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PPUSH
17473: CALL_OW 69
17477: PUSH
17478: LD_INT 1
17480: GREATER
17481: AND
17482: PUSH
17483: LD_EXP 11
17487: NOT
17488: AND
17489: IFFALSE 17500
// Dial_StopConstructAgainSameBuilding ( building ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: CALL 9136 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 255
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: PUSH
17514: LD_VAR 0 1
17518: PPUSH
17519: CALL_OW 266
17523: PUSH
17524: LD_INT 26
17526: PUSH
17527: LD_INT 4
17529: PUSH
17530: LD_INT 31
17532: PUSH
17533: EMPTY
17534: LIST
17535: LIST
17536: LIST
17537: IN
17538: AND
17539: PUSH
17540: LD_VAR 0 1
17544: PPUSH
17545: LD_INT 8
17547: PPUSH
17548: CALL_OW 308
17552: AND
17553: IFFALSE 17564
// Dial_StopConstructAgainSameBuilding ( building ) ;
17555: LD_VAR 0 1
17559: PPUSH
17560: CALL 9136 0 1
// end ;
17564: PPOPN 2
17566: END
// on BuildingComplete ( building ) do var sold , platSold ;
17567: LD_INT 0
17569: PPUSH
17570: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17571: LD_VAR 0 1
17575: PPUSH
17576: CALL_OW 255
17580: PUSH
17581: LD_INT 3
17583: EQUAL
17584: PUSH
17585: LD_VAR 0 1
17589: PPUSH
17590: CALL_OW 266
17594: PUSH
17595: LD_INT 6
17597: EQUAL
17598: AND
17599: PUSH
17600: LD_EXP 8
17604: NOT
17605: AND
17606: IFFALSE 17612
// Dial_LabConstructed ;
17608: CALL 8986 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17612: LD_VAR 0 1
17616: PPUSH
17617: CALL_OW 255
17621: PUSH
17622: LD_INT 3
17624: EQUAL
17625: PUSH
17626: LD_VAR 0 1
17630: PPUSH
17631: CALL_OW 266
17635: PUSH
17636: LD_INT 2
17638: EQUAL
17639: AND
17640: PUSH
17641: LD_EXP 9
17645: NOT
17646: AND
17647: IFFALSE 17653
// Dial_WorkshopConstructed ;
17649: CALL 9061 0 0
// if GetSide ( building ) = 6 then
17653: LD_VAR 0 1
17657: PPUSH
17658: CALL_OW 255
17662: PUSH
17663: LD_INT 6
17665: EQUAL
17666: IFFALSE 17877
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 266
17677: PUSH
17678: LD_INT 31
17680: EQUAL
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: LD_INT 9
17689: PPUSH
17690: CALL_OW 308
17694: AND
17695: IFFALSE 17746
// begin if UnitsInside ( ru2_arm2 ) then
17697: LD_INT 209
17699: PPUSH
17700: CALL_OW 313
17704: IFFALSE 17746
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17706: LD_ADDR_VAR 0 2
17710: PUSH
17711: LD_INT 209
17713: PPUSH
17714: CALL_OW 313
17718: PUSH
17719: LD_INT 1
17721: ARRAY
17722: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17732: LD_VAR 0 2
17736: PPUSH
17737: LD_VAR 0 1
17741: PPUSH
17742: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 266
17755: PUSH
17756: LD_INT 31
17758: EQUAL
17759: PUSH
17760: LD_VAR 0 1
17764: PPUSH
17765: LD_INT 8
17767: PPUSH
17768: CALL_OW 308
17772: AND
17773: IFFALSE 17809
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17775: LD_ADDR_VAR 0 2
17779: PUSH
17780: LD_EXP 77
17784: PPUSH
17785: LD_VAR 0 1
17789: PPUSH
17790: CALL_OW 74
17794: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 266
17818: PUSH
17819: LD_INT 2
17821: EQUAL
17822: IFFALSE 17877
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17824: LD_EXP 69
17828: PPUSH
17829: LD_INT 25
17831: PUSH
17832: LD_INT 3
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 72
17843: PPUSH
17844: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17848: LD_EXP 69
17852: PPUSH
17853: LD_INT 25
17855: PUSH
17856: LD_INT 3
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PPUSH
17863: CALL_OW 72
17867: PPUSH
17868: LD_VAR 0 1
17872: PPUSH
17873: CALL_OW 180
// end ; end ; end ;
17877: PPOPN 3
17879: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17880: LD_VAR 0 1
17884: PUSH
17885: LD_INT 47
17887: EQUAL
17888: PUSH
17889: LD_VAR 0 2
17893: PPUSH
17894: CALL_OW 255
17898: PUSH
17899: LD_INT 3
17901: EQUAL
17902: AND
17903: IFFALSE 17913
// engineResearched = true ;
17905: LD_ADDR_EXP 10
17909: PUSH
17910: LD_INT 1
17912: ST_TO_ADDR
// if tech = tech_Tech1 then
17913: LD_VAR 0 1
17917: PUSH
17918: LD_INT 48
17920: EQUAL
17921: IFFALSE 17943
// begin wait ( 0 0$5 ) ;
17923: LD_INT 175
17925: PPUSH
17926: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17930: LD_INT 83
17932: PPUSH
17933: LD_INT 1500
17935: PPUSH
17936: LD_INT 0
17938: PPUSH
17939: CALL_OW 486
// end ; end ;
17943: PPOPN 2
17945: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17946: LD_VAR 0 2
17950: PPUSH
17951: CALL_OW 255
17955: PUSH
17956: LD_OWVAR 2
17960: EQUAL
17961: PUSH
17962: LD_VAR 0 2
17966: PPUSH
17967: CALL_OW 302
17971: AND
17972: PUSH
17973: LD_EXP 12
17977: NOT
17978: AND
17979: PUSH
17980: LD_EXP 17
17984: NOT
17985: AND
17986: IFFALSE 17997
// Dial_FirstVehConstructed ( factory ) ;
17988: LD_VAR 0 2
17992: PPUSH
17993: CALL 9660 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
17997: LD_VAR 0 2
18001: PPUSH
18002: CALL_OW 255
18006: PUSH
18007: LD_OWVAR 2
18011: EQUAL
18012: PUSH
18013: LD_EXP 14
18017: NOT
18018: AND
18019: PUSH
18020: LD_EXP 13
18024: PPUSH
18025: CALL_OW 302
18029: NOT
18030: AND
18031: IFFALSE 18043
// firstVeh = vehicle ;
18033: LD_ADDR_EXP 13
18037: PUSH
18038: LD_VAR 0 1
18042: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
18043: LD_VAR 0 2
18047: PPUSH
18048: CALL_OW 255
18052: PUSH
18053: LD_OWVAR 2
18057: EQUAL
18058: PUSH
18059: LD_VAR 0 2
18063: PPUSH
18064: CALL_OW 302
18068: AND
18069: PUSH
18070: LD_EXP 17
18074: AND
18075: IFFALSE 18091
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
18077: LD_ADDR_EXP 18
18081: PUSH
18082: LD_EXP 18
18086: PUSH
18087: LD_INT 1
18089: PLUS
18090: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 255
18100: PUSH
18101: LD_OWVAR 2
18105: EQUAL
18106: PUSH
18107: LD_VAR 0 2
18111: PPUSH
18112: CALL_OW 248
18116: PUSH
18117: LD_INT 3
18119: EQUAL
18120: AND
18121: IFFALSE 18137
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18123: LD_ADDR_EXP 44
18127: PUSH
18128: LD_EXP 44
18132: PUSH
18133: LD_INT 1
18135: PLUS
18136: ST_TO_ADDR
// end ;
18137: PPOPN 2
18139: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18140: LD_EXP 19
18144: NOT
18145: PUSH
18146: LD_VAR 0 5
18150: PUSH
18151: LD_INT 1
18153: EQUAL
18154: AND
18155: IFFALSE 18171
// Dial_NewCrates ( x , y ) ;
18157: LD_VAR 0 2
18161: PPUSH
18162: LD_VAR 0 3
18166: PPUSH
18167: CALL 9605 0 2
// end ;
18171: PPOPN 5
18173: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18174: LD_INT 0
18176: PPUSH
18177: PPUSH
18178: PPUSH
18179: PPUSH
18180: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18181: LD_ADDR_VAR 0 2
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_INT 3
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PUSH
18196: LD_INT 21
18198: PUSH
18199: LD_INT 1
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PPUSH
18210: CALL_OW 69
18214: PUSH
18215: FOR_IN
18216: IFFALSE 18409
// if GetTaskList ( i ) > 0 then
18218: LD_VAR 0 2
18222: PPUSH
18223: CALL_OW 437
18227: PUSH
18228: LD_INT 0
18230: GREATER
18231: IFFALSE 18407
// for j = 1 to GetTaskList ( i ) do
18233: LD_ADDR_VAR 0 3
18237: PUSH
18238: DOUBLE
18239: LD_INT 1
18241: DEC
18242: ST_TO_ADDR
18243: LD_VAR 0 2
18247: PPUSH
18248: CALL_OW 437
18252: PUSH
18253: FOR_TO
18254: IFFALSE 18405
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18256: LD_ADDR_VAR 0 4
18260: PUSH
18261: LD_VAR 0 2
18265: PPUSH
18266: CALL_OW 437
18270: PUSH
18271: LD_VAR 0 3
18275: ARRAY
18276: PUSH
18277: LD_INT 4
18279: ARRAY
18280: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18281: LD_VAR 0 4
18285: PUSH
18286: LD_INT 71
18288: EQUAL
18289: PUSH
18290: LD_VAR 0 4
18294: PPUSH
18295: CALL_OW 255
18299: PUSH
18300: LD_INT 6
18302: EQUAL
18303: PUSH
18304: LD_VAR 0 2
18308: PPUSH
18309: CALL_OW 437
18313: PUSH
18314: LD_VAR 0 3
18318: ARRAY
18319: PUSH
18320: LD_INT 1
18322: ARRAY
18323: PUSH
18324: LD_STRING e
18326: EQUAL
18327: AND
18328: PUSH
18329: LD_VAR 0 4
18333: PPUSH
18334: CALL_OW 247
18338: PUSH
18339: LD_INT 2
18341: EQUAL
18342: AND
18343: OR
18344: IFFALSE 18357
// SetTaskList ( i , [ ] ) ;
18346: LD_VAR 0 2
18350: PPUSH
18351: EMPTY
18352: PPUSH
18353: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18357: LD_VAR 0 4
18361: PUSH
18362: LD_INT 106
18364: EQUAL
18365: PUSH
18366: LD_VAR 0 2
18370: PPUSH
18371: CALL_OW 437
18375: PUSH
18376: LD_VAR 0 3
18380: ARRAY
18381: PUSH
18382: LD_INT 1
18384: ARRAY
18385: PUSH
18386: LD_STRING Y
18388: EQUAL
18389: AND
18390: IFFALSE 18403
// SetTaskList ( i , [ ] ) ;
18392: LD_VAR 0 2
18396: PPUSH
18397: EMPTY
18398: PPUSH
18399: CALL_OW 446
// end ;
18403: GO 18253
18405: POP
18406: POP
18407: GO 18215
18409: POP
18410: POP
// end ;
18411: PPOPN 6
18413: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18414: LD_VAR 0 1
18418: PPUSH
18419: CALL_OW 255
18423: PUSH
18424: LD_INT 1
18426: EQUAL
18427: PUSH
18428: LD_VAR 0 1
18432: PPUSH
18433: CALL_OW 247
18437: PUSH
18438: LD_INT 1
18440: EQUAL
18441: AND
18442: IFFALSE 18500
// begin if unit in amLeftEngs then
18444: LD_VAR 0 1
18448: PUSH
18449: LD_EXP 86
18453: IN
18454: IFFALSE 18472
// amLeftEngs = amLeftEngs diff unit ;
18456: LD_ADDR_EXP 86
18460: PUSH
18461: LD_EXP 86
18465: PUSH
18466: LD_VAR 0 1
18470: DIFF
18471: ST_TO_ADDR
// if unit in amRightEngs then
18472: LD_VAR 0 1
18476: PUSH
18477: LD_EXP 87
18481: IN
18482: IFFALSE 18500
// amRightEngs = amRightEngs diff unit ;
18484: LD_ADDR_EXP 87
18488: PUSH
18489: LD_EXP 87
18493: PUSH
18494: LD_VAR 0 1
18498: DIFF
18499: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18500: LD_VAR 0 1
18504: PPUSH
18505: CALL_OW 255
18509: PUSH
18510: LD_INT 6
18512: EQUAL
18513: PUSH
18514: LD_VAR 0 1
18518: PPUSH
18519: CALL_OW 247
18523: PUSH
18524: LD_INT 1
18526: EQUAL
18527: AND
18528: IFFALSE 18558
// if unit in belkovTeam then
18530: LD_VAR 0 1
18534: PUSH
18535: LD_EXP 73
18539: IN
18540: IFFALSE 18558
// belkovTeam = belkovTeam diff unit ;
18542: LD_ADDR_EXP 73
18546: PUSH
18547: LD_EXP 73
18551: PUSH
18552: LD_VAR 0 1
18556: DIFF
18557: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18558: LD_VAR 0 1
18562: PPUSH
18563: CALL_OW 255
18567: PUSH
18568: LD_INT 3
18570: EQUAL
18571: PUSH
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 247
18581: PUSH
18582: LD_INT 1
18584: EQUAL
18585: AND
18586: IFFALSE 18602
// lostComradesCounter = lostComradesCounter + 1 ;
18588: LD_ADDR_EXP 43
18592: PUSH
18593: LD_EXP 43
18597: PUSH
18598: LD_INT 1
18600: PLUS
18601: ST_TO_ADDR
// if unit = Burlak then
18602: LD_VAR 0 1
18606: PUSH
18607: LD_EXP 62
18611: EQUAL
18612: IFFALSE 18618
// BurlakIsDead ;
18614: CALL 19929 0 0
// if unit = Beria then
18618: LD_VAR 0 1
18622: PUSH
18623: LD_INT 106
18625: EQUAL
18626: IFFALSE 18632
// BaseDestroyed ;
18628: CALL 19959 0 0
// if unit in platSoldiers then
18632: LD_VAR 0 1
18636: PUSH
18637: LD_EXP 77
18641: IN
18642: IFFALSE 18660
// platSoldiers = platSoldiers diff unit ;
18644: LD_ADDR_EXP 77
18648: PUSH
18649: LD_EXP 77
18653: PUSH
18654: LD_VAR 0 1
18658: DIFF
18659: ST_TO_ADDR
// end ;
18660: PPOPN 1
18662: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18663: LD_VAR 0 1
18667: PPUSH
18668: CALL_OW 255
18672: PUSH
18673: LD_INT 1
18675: EQUAL
18676: PUSH
18677: LD_VAR 0 1
18681: PPUSH
18682: CALL_OW 247
18686: PUSH
18687: LD_INT 3
18689: EQUAL
18690: AND
18691: IFFALSE 18749
// begin if unit in leftBunkers then
18693: LD_VAR 0 1
18697: PUSH
18698: LD_EXP 82
18702: IN
18703: IFFALSE 18721
// leftBunkers = leftBunkers diff unit ;
18705: LD_ADDR_EXP 82
18709: PUSH
18710: LD_EXP 82
18714: PUSH
18715: LD_VAR 0 1
18719: DIFF
18720: ST_TO_ADDR
// if unit in rightBunkers then
18721: LD_VAR 0 1
18725: PUSH
18726: LD_EXP 83
18730: IN
18731: IFFALSE 18749
// rightBunkers = rightBunkers diff unit ;
18733: LD_ADDR_EXP 83
18737: PUSH
18738: LD_EXP 83
18742: PUSH
18743: LD_VAR 0 1
18747: DIFF
18748: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18749: LD_VAR 0 1
18753: PPUSH
18754: CALL_OW 255
18758: PUSH
18759: LD_INT 1
18761: EQUAL
18762: PUSH
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 247
18772: PUSH
18773: LD_INT 1
18775: EQUAL
18776: AND
18777: IFFALSE 18807
// if unit in trapTeam then
18779: LD_VAR 0 1
18783: PUSH
18784: LD_EXP 81
18788: IN
18789: IFFALSE 18807
// trapTeam = trapTeam diff unit ;
18791: LD_ADDR_EXP 81
18795: PUSH
18796: LD_EXP 81
18800: PUSH
18801: LD_VAR 0 1
18805: DIFF
18806: ST_TO_ADDR
// end ;
18807: PPOPN 1
18809: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18810: LD_VAR 0 3
18814: PUSH
18815: LD_INT 1
18817: EQUAL
18818: IFFALSE 18828
// captureBelkovVehicle = true ;
18820: LD_ADDR_EXP 38
18824: PUSH
18825: LD_INT 1
18827: ST_TO_ADDR
// if original_side = 6 then
18828: LD_VAR 0 3
18832: PUSH
18833: LD_INT 6
18835: EQUAL
18836: IFFALSE 18880
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18838: LD_VAR 0 1
18842: PUSH
18843: LD_VAR 0 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PPUSH
18852: LD_INT 118
18854: PPUSH
18855: LD_INT 25
18857: PPUSH
18858: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18862: LD_VAR 0 1
18866: PUSH
18867: LD_VAR 0 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 139
// end ; end ;
18880: PPOPN 4
18882: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18883: LD_VAR 0 1
18887: PUSH
18888: LD_INT 3
18890: EQUAL
18891: PUSH
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 6
18899: EQUAL
18900: AND
18901: IFFALSE 18907
// AttackComrades ;
18903: CALL 19944 0 0
// end ;
18907: PPOPN 2
18909: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18910: LD_VAR 0 2
18914: PUSH
18915: LD_INT 6
18917: EQUAL
18918: IFFALSE 18932
// SetSide ( building , 3 ) ;
18920: LD_VAR 0 1
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: CALL_OW 235
// end ; end_of_file
18932: PPOPN 3
18934: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18935: LD_EXP 16
18939: PUSH
18940: LD_INT 8
18942: PPUSH
18943: LD_INT 22
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: EMPTY
18950: LIST
18951: LIST
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PPUSH
18967: CALL_OW 71
18971: PUSH
18972: LD_INT 0
18974: EQUAL
18975: AND
18976: IFFALSE 19077
18978: GO 18980
18980: DISABLE
// begin enable ;
18981: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
18982: LD_EXP 36
18986: NOT
18987: PUSH
18988: LD_EXP 64
18992: PPUSH
18993: CALL_OW 302
18997: PUSH
18998: LD_EXP 68
19002: PPUSH
19003: CALL_OW 302
19007: OR
19008: AND
19009: IFFALSE 19056
// begin case Query ( QContMission ) of 1 :
19011: LD_STRING QContMission
19013: PPUSH
19014: CALL_OW 97
19018: PUSH
19019: LD_INT 1
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19034
19027: POP
// begin FinishMission ;
19028: CALL 19078 0 0
// end ; 2 :
19032: GO 19054
19034: LD_INT 2
19036: DOUBLE
19037: EQUAL
19038: IFTRUE 19042
19040: GO 19053
19042: POP
// begin saveBelkovObjective = true ;
19043: LD_ADDR_EXP 36
19047: PUSH
19048: LD_INT 1
19050: ST_TO_ADDR
// end ; end ;
19051: GO 19054
19053: POP
// end else
19054: GO 19067
// if not belkovSaved then
19056: LD_EXP 37
19060: NOT
19061: IFFALSE 19067
// FinishMission ;
19063: CALL 19078 0 0
// if belkovSaved then
19067: LD_EXP 37
19071: IFFALSE 19077
// FinishMission ;
19073: CALL 19078 0 0
// end ;
19077: END
// function FinishMission ; begin
19078: LD_INT 0
19080: PPUSH
// SetRewards ;
19081: CALL 19102 0 0
// SavePlayerCharacters ;
19085: CALL 19392 0 0
// SaveGlobalVariables ;
19089: CALL 19609 0 0
// YouWin ;
19093: CALL_OW 103
// end ;
19097: LD_VAR 0 1
19101: RET
// function SetRewards ; begin
19102: LD_INT 0
19104: PPUSH
// case initiative of 1 :
19105: LD_EXP 42
19109: PUSH
19110: LD_INT 1
19112: DOUBLE
19113: EQUAL
19114: IFTRUE 19118
19116: GO 19131
19118: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19119: LD_STRING Initiative
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: CALL_OW 101
19129: GO 19176
19131: LD_INT 2
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19153
19139: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19140: LD_STRING Initiative
19142: PPUSH
19143: LD_INT 2
19145: NEG
19146: PPUSH
19147: CALL_OW 101
19151: GO 19176
19153: LD_INT 3
19155: DOUBLE
19156: EQUAL
19157: IFTRUE 19161
19159: GO 19175
19161: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19162: LD_STRING Initiative
19164: PPUSH
19165: LD_INT 1
19167: NEG
19168: PPUSH
19169: CALL_OW 101
19173: GO 19176
19175: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19176: LD_EXP 37
19180: PUSH
19181: LD_EXP 64
19185: PPUSH
19186: CALL_OW 302
19190: PUSH
19191: LD_EXP 68
19195: PPUSH
19196: CALL_OW 302
19200: OR
19201: AND
19202: IFFALSE 19214
// AddMedal ( Belkov , 1 ) ;
19204: LD_STRING Belkov
19206: PPUSH
19207: LD_INT 1
19209: PPUSH
19210: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19214: LD_EXP 37
19218: NOT
19219: PUSH
19220: LD_EXP 36
19224: NOT
19225: AND
19226: IFFALSE 19239
// AddMedal ( Belkov , - 1 ) ;
19228: LD_STRING Belkov
19230: PPUSH
19231: LD_INT 1
19233: NEG
19234: PPUSH
19235: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19239: LD_EXP 37
19243: NOT
19244: PUSH
19245: LD_EXP 36
19249: AND
19250: IFFALSE 19263
// AddMedal ( Belkov , - 2 ) ;
19252: LD_STRING Belkov
19254: PPUSH
19255: LD_INT 2
19257: NEG
19258: PPUSH
19259: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19263: LD_EXP 37
19267: PUSH
19268: LD_EXP 6
19272: PUSH
19273: LD_EXP 64
19277: PPUSH
19278: CALL_OW 301
19282: AND
19283: AND
19284: PUSH
19285: LD_EXP 6
19289: NOT
19290: PUSH
19291: LD_EXP 68
19295: PPUSH
19296: CALL_OW 301
19300: AND
19301: OR
19302: IFFALSE 19315
// AddMedal ( Belkov , - 2 ) ;
19304: LD_STRING Belkov
19306: PPUSH
19307: LD_INT 2
19309: NEG
19310: PPUSH
19311: CALL_OW 101
// if lostComradesCounter = 0 then
19315: LD_EXP 43
19319: PUSH
19320: LD_INT 0
19322: EQUAL
19323: IFFALSE 19337
// AddMedal ( NoLosses , 1 ) else
19325: LD_STRING NoLosses
19327: PPUSH
19328: LD_INT 1
19330: PPUSH
19331: CALL_OW 101
19335: GO 19347
// AddMedal ( NoLosses , 0 ) ;
19337: LD_STRING NoLosses
19339: PPUSH
19340: LD_INT 0
19342: PPUSH
19343: CALL_OW 101
// GiveMedals ( Main ) ;
19347: LD_STRING Main
19349: PPUSH
19350: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19354: LD_INT 22
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PUSH
19364: LD_INT 21
19366: PUSH
19367: LD_INT 1
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PPUSH
19378: CALL_OW 69
19382: PPUSH
19383: CALL_OW 43
// end ;
19387: LD_VAR 0 1
19391: RET
// function SavePlayerCharacters ; var othersYour ; begin
19392: LD_INT 0
19394: PPUSH
19395: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19396: LD_EXP 62
19400: PPUSH
19401: LD_STRING Burlak
19403: PPUSH
19404: LD_INT 3
19406: PPUSH
19407: CALL 4357 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19411: LD_EXP 63
19415: PPUSH
19416: LD_STRING Gnyevko
19418: PPUSH
19419: LD_INT 3
19421: PPUSH
19422: CALL 4357 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19426: LD_EXP 70
19430: PPUSH
19431: LD_STRING Kovalyuk
19433: PPUSH
19434: LD_INT 3
19436: PPUSH
19437: CALL 4357 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19441: LD_EXP 64
19445: PPUSH
19446: LD_STRING Belkov
19448: PPUSH
19449: LD_INT 3
19451: PPUSH
19452: CALL 4357 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19456: LD_EXP 68
19460: PPUSH
19461: LD_STRING Belkov2
19463: PPUSH
19464: LD_INT 3
19466: PPUSH
19467: CALL 4357 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19471: LD_EXP 65
19475: PPUSH
19476: LD_STRING Kirilenkova
19478: PPUSH
19479: LD_INT 3
19481: PPUSH
19482: CALL 4357 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19486: LD_ADDR_VAR 0 2
19490: PUSH
19491: LD_INT 22
19493: PUSH
19494: LD_INT 3
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 21
19503: PUSH
19504: LD_INT 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PPUSH
19515: CALL_OW 69
19519: PUSH
19520: LD_EXP 62
19524: PUSH
19525: LD_EXP 63
19529: PUSH
19530: LD_EXP 64
19534: PUSH
19535: LD_EXP 68
19539: PUSH
19540: LD_EXP 70
19544: PUSH
19545: LD_EXP 65
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: DIFF
19558: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19559: LD_VAR 0 2
19563: PPUSH
19564: LD_STRING other_survivors
19566: PPUSH
19567: LD_INT 3
19569: PPUSH
19570: CALL 4413 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19574: LD_EXP 77
19578: PPUSH
19579: LD_STRING other_beria
19581: PPUSH
19582: LD_INT 6
19584: PPUSH
19585: CALL 4413 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19589: LD_EXP 69
19593: PPUSH
19594: LD_STRING other_kirov
19596: PPUSH
19597: LD_INT 6
19599: PPUSH
19600: CALL 4413 0 3
// end ;
19604: LD_VAR 0 1
19608: RET
// function SaveGlobalVariables ; var vehicles ; begin
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19613: LD_ADDR_VAR 0 2
19617: PUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 50
19640: PUSH
19641: EMPTY
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: ST_TO_ADDR
// if vehicles then
19654: LD_VAR 0 2
19658: IFFALSE 19672
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19660: LD_VAR 0 2
19664: PPUSH
19665: LD_STRING 02_Vehicles_1
19667: PPUSH
19668: CALL 5444 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19672: LD_INT 8
19674: PPUSH
19675: LD_INT 21
19677: PUSH
19678: LD_INT 3
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: PPUSH
19688: CALL_OW 70
19692: PPUSH
19693: LD_STRING 02_BeriaBase_2
19695: PPUSH
19696: CALL 5587 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19700: LD_INT 9
19702: PPUSH
19703: LD_INT 22
19705: PUSH
19706: LD_INT 6
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PUSH
19713: LD_INT 21
19715: PUSH
19716: LD_INT 3
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PPUSH
19727: CALL_OW 70
19731: PPUSH
19732: LD_STRING 02_KirovBase_3
19734: PPUSH
19735: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19739: LD_INT 22
19741: PUSH
19742: LD_INT 3
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PUSH
19749: LD_INT 21
19751: PUSH
19752: LD_INT 3
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: LD_INT 50
19761: PUSH
19762: EMPTY
19763: LIST
19764: PUSH
19765: LD_INT 3
19767: PUSH
19768: LD_INT 95
19770: PUSH
19771: LD_INT 8
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: PPUSH
19788: CALL_OW 69
19792: PPUSH
19793: LD_STRING 02_OtherBuildings_4
19795: PPUSH
19796: CALL 5587 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19800: LD_INT 22
19802: PUSH
19803: LD_INT 1
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 50
19822: PUSH
19823: EMPTY
19824: LIST
19825: PUSH
19826: LD_INT 23
19828: PUSH
19829: LD_INT 1
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: PPUSH
19842: CALL_OW 69
19846: PPUSH
19847: LD_STRING 02_AmericanBuildings_5
19849: PPUSH
19850: CALL 5587 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19854: LD_EXP 4
19858: PPUSH
19859: LD_STRING 02_MeetBelkovBrother_6
19861: PPUSH
19862: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19866: LD_INT 106
19868: PPUSH
19869: CALL_OW 274
19873: PPUSH
19874: LD_INT 1
19876: PPUSH
19877: CALL_OW 275
19881: PPUSH
19882: LD_STRING 02_BeriaResourceCrates_7
19884: PPUSH
19885: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19889: LD_INT 106
19891: PPUSH
19892: CALL_OW 274
19896: PPUSH
19897: LD_INT 2
19899: PPUSH
19900: CALL_OW 275
19904: PPUSH
19905: LD_STRING 02_BeriaResourceOil_8
19907: PPUSH
19908: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19912: LD_EXP 5
19916: PPUSH
19917: LD_STRING 02_PlatonovOpinion_9
19919: PPUSH
19920: CALL_OW 39
// end ; end_of_file
19924: LD_VAR 0 1
19928: RET
// export function BurlakIsDead ; begin
19929: LD_INT 0
19931: PPUSH
// YouLost ( Burlak ) ;
19932: LD_STRING Burlak
19934: PPUSH
19935: CALL_OW 104
// end ;
19939: LD_VAR 0 1
19943: RET
// export function AttackComrades ; begin
19944: LD_INT 0
19946: PPUSH
// YouLost ( SelfAttack ) ;
19947: LD_STRING SelfAttack
19949: PPUSH
19950: CALL_OW 104
// end ;
19954: LD_VAR 0 1
19958: RET
// export function BaseDestroyed ; begin
19959: LD_INT 0
19961: PPUSH
// YouLost ( Base ) ;
19962: LD_STRING Base
19964: PPUSH
19965: CALL_OW 104
// end ; end_of_file
19969: LD_VAR 0 1
19973: RET
// every 0 0$1 do var engs ;
19974: GO 19976
19976: DISABLE
19977: LD_INT 0
19979: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
19980: LD_ADDR_VAR 0 1
19984: PUSH
19985: LD_EXP 69
19989: PPUSH
19990: LD_INT 25
19992: PUSH
19993: LD_INT 2
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PPUSH
20000: CALL_OW 72
20004: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 122
// wait ( 0 0$1 ) ;
20014: LD_INT 35
20016: PPUSH
20017: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
20021: LD_VAR 0 1
20025: PPUSH
20026: LD_INT 31
20028: PPUSH
20029: LD_INT 146
20031: PPUSH
20032: LD_INT 107
20034: PPUSH
20035: LD_INT 1
20037: PPUSH
20038: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
20042: LD_VAR 0 1
20046: PPUSH
20047: LD_INT 31
20049: PPUSH
20050: LD_INT 176
20052: PPUSH
20053: LD_INT 123
20055: PPUSH
20056: LD_INT 5
20058: PPUSH
20059: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
20063: LD_VAR 0 1
20067: PPUSH
20068: LD_INT 31
20070: PPUSH
20071: LD_INT 170
20073: PPUSH
20074: LD_INT 102
20076: PPUSH
20077: LD_INT 4
20079: PPUSH
20080: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
20084: LD_VAR 0 1
20088: PPUSH
20089: LD_INT 31
20091: PPUSH
20092: LD_INT 173
20094: PPUSH
20095: LD_INT 105
20097: PPUSH
20098: LD_INT 4
20100: PPUSH
20101: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20105: LD_VAR 0 1
20109: PPUSH
20110: LD_INT 71
20112: PPUSH
20113: CALL_OW 180
// end ;
20117: PPOPN 1
20119: END
// every 0 0$1 trigger activateAMAI do
20120: LD_EXP 27
20124: IFFALSE 20148
20126: GO 20128
20128: DISABLE
// begin enable ;
20129: ENABLE
// RepairDamageLeftBunkers ;
20130: CALL 20149 0 0
// if Difficulty = 3 then
20134: LD_OWVAR 67
20138: PUSH
20139: LD_INT 3
20141: EQUAL
20142: IFFALSE 20148
// RepairDamageRightBunkers ;
20144: CALL 20357 0 0
// end ;
20148: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20149: LD_INT 0
20151: PPUSH
20152: PPUSH
20153: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20154: LD_EXP 86
20158: NOT
20159: PUSH
20160: LD_INT 17
20162: PPUSH
20163: LD_INT 22
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 21
20175: PUSH
20176: LD_INT 3
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 30
20185: PUSH
20186: LD_INT 31
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: LD_INT 3
20195: PUSH
20196: LD_INT 24
20198: PUSH
20199: LD_INT 1000
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PPUSH
20216: CALL_OW 70
20220: PUSH
20221: LD_INT 0
20223: EQUAL
20224: OR
20225: IFFALSE 20229
// exit ;
20227: GO 20352
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20229: LD_EXP 86
20233: PPUSH
20234: LD_INT 3
20236: PUSH
20237: LD_INT 60
20239: PUSH
20240: EMPTY
20241: LIST
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 72
20251: PPUSH
20252: CALL_OW 122
// for bunker in leftBunkers do
20256: LD_ADDR_VAR 0 3
20260: PUSH
20261: LD_EXP 82
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20318
// if GetLives ( bunker ) < 1000 then
20269: LD_VAR 0 3
20273: PPUSH
20274: CALL_OW 256
20278: PUSH
20279: LD_INT 1000
20281: LESS
20282: IFFALSE 20316
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20284: LD_EXP 86
20288: PPUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 60
20294: PUSH
20295: EMPTY
20296: LIST
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PPUSH
20302: CALL_OW 72
20306: PPUSH
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 190
20316: GO 20266
20318: POP
20319: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20320: LD_EXP 86
20324: PPUSH
20325: LD_INT 3
20327: PUSH
20328: LD_INT 60
20330: PUSH
20331: EMPTY
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: PPUSH
20338: CALL_OW 72
20342: PPUSH
20343: LD_EXP 84
20347: PPUSH
20348: CALL_OW 180
// end ;
20352: LD_VAR 0 1
20356: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20357: LD_INT 0
20359: PPUSH
20360: PPUSH
20361: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20362: LD_EXP 87
20366: NOT
20367: PUSH
20368: LD_INT 16
20370: PPUSH
20371: LD_INT 22
20373: PUSH
20374: LD_INT 1
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: PUSH
20381: LD_INT 21
20383: PUSH
20384: LD_INT 3
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 30
20393: PUSH
20394: LD_INT 31
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: LD_INT 3
20403: PUSH
20404: LD_INT 24
20406: PUSH
20407: LD_INT 1000
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: LIST
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: PPUSH
20424: CALL_OW 70
20428: PUSH
20429: LD_INT 0
20431: EQUAL
20432: OR
20433: IFFALSE 20437
// exit ;
20435: GO 20560
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20437: LD_EXP 87
20441: PPUSH
20442: LD_INT 3
20444: PUSH
20445: LD_INT 60
20447: PUSH
20448: EMPTY
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 72
20459: PPUSH
20460: CALL_OW 122
// for bunker in rightBunkers do
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: LD_EXP 83
20473: PUSH
20474: FOR_IN
20475: IFFALSE 20526
// if GetLives ( bunker ) < 1000 then
20477: LD_VAR 0 3
20481: PPUSH
20482: CALL_OW 256
20486: PUSH
20487: LD_INT 1000
20489: LESS
20490: IFFALSE 20524
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20492: LD_EXP 87
20496: PPUSH
20497: LD_INT 3
20499: PUSH
20500: LD_INT 60
20502: PUSH
20503: EMPTY
20504: LIST
20505: PUSH
20506: EMPTY
20507: LIST
20508: LIST
20509: PPUSH
20510: CALL_OW 72
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL_OW 190
20524: GO 20474
20526: POP
20527: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20528: LD_EXP 87
20532: PPUSH
20533: LD_INT 3
20535: PUSH
20536: LD_INT 60
20538: PUSH
20539: EMPTY
20540: LIST
20541: PUSH
20542: EMPTY
20543: LIST
20544: LIST
20545: PPUSH
20546: CALL_OW 72
20550: PPUSH
20551: LD_EXP 85
20555: PPUSH
20556: CALL_OW 180
// end ;
20560: LD_VAR 0 1
20564: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20565: LD_EXP 28
20569: PUSH
20570: LD_EXP 73
20574: AND
20575: IFFALSE 20712
20577: GO 20579
20579: DISABLE
20580: LD_INT 0
20582: PPUSH
20583: PPUSH
20584: PPUSH
// begin enable ;
20585: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20586: LD_ADDR_VAR 0 2
20590: PUSH
20591: LD_EXP 73
20595: PPUSH
20596: LD_INT 25
20598: PUSH
20599: LD_INT 4
20601: PUSH
20602: EMPTY
20603: LIST
20604: LIST
20605: PPUSH
20606: CALL_OW 72
20610: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: LD_EXP 73
20620: PPUSH
20621: LD_INT 3
20623: PUSH
20624: LD_INT 24
20626: PUSH
20627: LD_INT 650
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: CALL_OW 72
20642: ST_TO_ADDR
// if not damaged and med then
20643: LD_VAR 0 3
20647: NOT
20648: PUSH
20649: LD_VAR 0 2
20653: AND
20654: IFFALSE 20673
// ComMoveXY ( med , 83 , 17 ) else
20656: LD_VAR 0 2
20660: PPUSH
20661: LD_INT 83
20663: PPUSH
20664: LD_INT 17
20666: PPUSH
20667: CALL_OW 111
20671: GO 20712
// if med then
20673: LD_VAR 0 2
20677: IFFALSE 20712
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20679: LD_VAR 0 3
20683: PPUSH
20684: LD_INT 83
20686: PPUSH
20687: LD_INT 17
20689: PPUSH
20690: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20694: LD_VAR 0 2
20698: PPUSH
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 1
20706: ARRAY
20707: PPUSH
20708: CALL_OW 128
// end ; end ; end_of_file
20712: PPOPN 3
20714: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20715: LD_INT 22
20717: PUSH
20718: LD_INT 3
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: PUSH
20725: LD_INT 23
20727: PUSH
20728: LD_INT 1
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 0
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PPUSH
20750: CALL_OW 69
20754: PUSH
20755: LD_INT 2
20757: EQUAL
20758: IFFALSE 20770
20760: GO 20762
20762: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20763: LD_STRING ACH_DEPOT
20765: PPUSH
20766: CALL_OW 543
20770: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20771: LD_EXP 44
20775: PUSH
20776: LD_INT 5
20778: EQUAL
20779: IFFALSE 20791
20781: GO 20783
20783: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20784: LD_STRING ACH_WORKSHOP
20786: PPUSH
20787: CALL_OW 543
20791: END
// every 1 trigger captureBelkovVehicle do
20792: LD_EXP 38
20796: IFFALSE 20808
20798: GO 20800
20800: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20801: LD_STRING ACH_RETAKE
20803: PPUSH
20804: CALL_OW 543
20808: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
20809: LD_VAR 0 2
20813: PUSH
20814: LD_INT 100
20816: EQUAL
20817: IFFALSE 21766
// begin if not StreamModeActive then
20819: LD_EXP 90
20823: NOT
20824: IFFALSE 20834
// StreamModeActive := true ;
20826: LD_ADDR_EXP 90
20830: PUSH
20831: LD_INT 1
20833: ST_TO_ADDR
// if p3 = 0 then
20834: LD_VAR 0 3
20838: PUSH
20839: LD_INT 0
20841: EQUAL
20842: IFFALSE 20848
// InitStreamMode ;
20844: CALL 21924 0 0
// if p3 = 1 then
20848: LD_VAR 0 3
20852: PUSH
20853: LD_INT 1
20855: EQUAL
20856: IFFALSE 20866
// sRocket := true ;
20858: LD_ADDR_EXP 95
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// if p3 = 2 then
20866: LD_VAR 0 3
20870: PUSH
20871: LD_INT 2
20873: EQUAL
20874: IFFALSE 20884
// sSpeed := true ;
20876: LD_ADDR_EXP 94
20880: PUSH
20881: LD_INT 1
20883: ST_TO_ADDR
// if p3 = 3 then
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 3
20891: EQUAL
20892: IFFALSE 20902
// sEngine := true ;
20894: LD_ADDR_EXP 96
20898: PUSH
20899: LD_INT 1
20901: ST_TO_ADDR
// if p3 = 4 then
20902: LD_VAR 0 3
20906: PUSH
20907: LD_INT 4
20909: EQUAL
20910: IFFALSE 20920
// sSpec := true ;
20912: LD_ADDR_EXP 93
20916: PUSH
20917: LD_INT 1
20919: ST_TO_ADDR
// if p3 = 5 then
20920: LD_VAR 0 3
20924: PUSH
20925: LD_INT 5
20927: EQUAL
20928: IFFALSE 20938
// sLevel := true ;
20930: LD_ADDR_EXP 97
20934: PUSH
20935: LD_INT 1
20937: ST_TO_ADDR
// if p3 = 6 then
20938: LD_VAR 0 3
20942: PUSH
20943: LD_INT 6
20945: EQUAL
20946: IFFALSE 20956
// sArmoury := true ;
20948: LD_ADDR_EXP 98
20952: PUSH
20953: LD_INT 1
20955: ST_TO_ADDR
// if p3 = 7 then
20956: LD_VAR 0 3
20960: PUSH
20961: LD_INT 7
20963: EQUAL
20964: IFFALSE 20974
// sRadar := true ;
20966: LD_ADDR_EXP 99
20970: PUSH
20971: LD_INT 1
20973: ST_TO_ADDR
// if p3 = 8 then
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 8
20981: EQUAL
20982: IFFALSE 20992
// sBunker := true ;
20984: LD_ADDR_EXP 100
20988: PUSH
20989: LD_INT 1
20991: ST_TO_ADDR
// if p3 = 9 then
20992: LD_VAR 0 3
20996: PUSH
20997: LD_INT 9
20999: EQUAL
21000: IFFALSE 21010
// sHack := true ;
21002: LD_ADDR_EXP 101
21006: PUSH
21007: LD_INT 1
21009: ST_TO_ADDR
// if p3 = 10 then
21010: LD_VAR 0 3
21014: PUSH
21015: LD_INT 10
21017: EQUAL
21018: IFFALSE 21028
// sFire := true ;
21020: LD_ADDR_EXP 102
21024: PUSH
21025: LD_INT 1
21027: ST_TO_ADDR
// if p3 = 11 then
21028: LD_VAR 0 3
21032: PUSH
21033: LD_INT 11
21035: EQUAL
21036: IFFALSE 21046
// sRefresh := true ;
21038: LD_ADDR_EXP 103
21042: PUSH
21043: LD_INT 1
21045: ST_TO_ADDR
// if p3 = 12 then
21046: LD_VAR 0 3
21050: PUSH
21051: LD_INT 12
21053: EQUAL
21054: IFFALSE 21064
// sExp := true ;
21056: LD_ADDR_EXP 104
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// if p3 = 13 then
21064: LD_VAR 0 3
21068: PUSH
21069: LD_INT 13
21071: EQUAL
21072: IFFALSE 21082
// sDepot := true ;
21074: LD_ADDR_EXP 105
21078: PUSH
21079: LD_INT 1
21081: ST_TO_ADDR
// if p3 = 14 then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 14
21089: EQUAL
21090: IFFALSE 21100
// sFlag := true ;
21092: LD_ADDR_EXP 106
21096: PUSH
21097: LD_INT 1
21099: ST_TO_ADDR
// if p3 = 15 then
21100: LD_VAR 0 3
21104: PUSH
21105: LD_INT 15
21107: EQUAL
21108: IFFALSE 21118
// sKamikadze := true ;
21110: LD_ADDR_EXP 114
21114: PUSH
21115: LD_INT 1
21117: ST_TO_ADDR
// if p3 = 16 then
21118: LD_VAR 0 3
21122: PUSH
21123: LD_INT 16
21125: EQUAL
21126: IFFALSE 21136
// sTroll := true ;
21128: LD_ADDR_EXP 115
21132: PUSH
21133: LD_INT 1
21135: ST_TO_ADDR
// if p3 = 17 then
21136: LD_VAR 0 3
21140: PUSH
21141: LD_INT 17
21143: EQUAL
21144: IFFALSE 21154
// sSlow := true ;
21146: LD_ADDR_EXP 116
21150: PUSH
21151: LD_INT 1
21153: ST_TO_ADDR
// if p3 = 18 then
21154: LD_VAR 0 3
21158: PUSH
21159: LD_INT 18
21161: EQUAL
21162: IFFALSE 21172
// sLack := true ;
21164: LD_ADDR_EXP 117
21168: PUSH
21169: LD_INT 1
21171: ST_TO_ADDR
// if p3 = 19 then
21172: LD_VAR 0 3
21176: PUSH
21177: LD_INT 19
21179: EQUAL
21180: IFFALSE 21190
// sTank := true ;
21182: LD_ADDR_EXP 119
21186: PUSH
21187: LD_INT 1
21189: ST_TO_ADDR
// if p3 = 20 then
21190: LD_VAR 0 3
21194: PUSH
21195: LD_INT 20
21197: EQUAL
21198: IFFALSE 21208
// sRemote := true ;
21200: LD_ADDR_EXP 120
21204: PUSH
21205: LD_INT 1
21207: ST_TO_ADDR
// if p3 = 21 then
21208: LD_VAR 0 3
21212: PUSH
21213: LD_INT 21
21215: EQUAL
21216: IFFALSE 21226
// sPowell := true ;
21218: LD_ADDR_EXP 121
21222: PUSH
21223: LD_INT 1
21225: ST_TO_ADDR
// if p3 = 22 then
21226: LD_VAR 0 3
21230: PUSH
21231: LD_INT 22
21233: EQUAL
21234: IFFALSE 21244
// sTeleport := true ;
21236: LD_ADDR_EXP 124
21240: PUSH
21241: LD_INT 1
21243: ST_TO_ADDR
// if p3 = 23 then
21244: LD_VAR 0 3
21248: PUSH
21249: LD_INT 23
21251: EQUAL
21252: IFFALSE 21262
// sOilTower := true ;
21254: LD_ADDR_EXP 126
21258: PUSH
21259: LD_INT 1
21261: ST_TO_ADDR
// if p3 = 24 then
21262: LD_VAR 0 3
21266: PUSH
21267: LD_INT 24
21269: EQUAL
21270: IFFALSE 21280
// sShovel := true ;
21272: LD_ADDR_EXP 127
21276: PUSH
21277: LD_INT 1
21279: ST_TO_ADDR
// if p3 = 25 then
21280: LD_VAR 0 3
21284: PUSH
21285: LD_INT 25
21287: EQUAL
21288: IFFALSE 21298
// sSheik := true ;
21290: LD_ADDR_EXP 128
21294: PUSH
21295: LD_INT 1
21297: ST_TO_ADDR
// if p3 = 26 then
21298: LD_VAR 0 3
21302: PUSH
21303: LD_INT 26
21305: EQUAL
21306: IFFALSE 21316
// sEarthquake := true ;
21308: LD_ADDR_EXP 130
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// if p3 = 27 then
21316: LD_VAR 0 3
21320: PUSH
21321: LD_INT 27
21323: EQUAL
21324: IFFALSE 21334
// sAI := true ;
21326: LD_ADDR_EXP 131
21330: PUSH
21331: LD_INT 1
21333: ST_TO_ADDR
// if p3 = 28 then
21334: LD_VAR 0 3
21338: PUSH
21339: LD_INT 28
21341: EQUAL
21342: IFFALSE 21352
// sCargo := true ;
21344: LD_ADDR_EXP 134
21348: PUSH
21349: LD_INT 1
21351: ST_TO_ADDR
// if p3 = 29 then
21352: LD_VAR 0 3
21356: PUSH
21357: LD_INT 29
21359: EQUAL
21360: IFFALSE 21370
// sDLaser := true ;
21362: LD_ADDR_EXP 135
21366: PUSH
21367: LD_INT 1
21369: ST_TO_ADDR
// if p3 = 30 then
21370: LD_VAR 0 3
21374: PUSH
21375: LD_INT 30
21377: EQUAL
21378: IFFALSE 21388
// sExchange := true ;
21380: LD_ADDR_EXP 136
21384: PUSH
21385: LD_INT 1
21387: ST_TO_ADDR
// if p3 = 31 then
21388: LD_VAR 0 3
21392: PUSH
21393: LD_INT 31
21395: EQUAL
21396: IFFALSE 21406
// sFac := true ;
21398: LD_ADDR_EXP 137
21402: PUSH
21403: LD_INT 1
21405: ST_TO_ADDR
// if p3 = 32 then
21406: LD_VAR 0 3
21410: PUSH
21411: LD_INT 32
21413: EQUAL
21414: IFFALSE 21424
// sPower := true ;
21416: LD_ADDR_EXP 138
21420: PUSH
21421: LD_INT 1
21423: ST_TO_ADDR
// if p3 = 33 then
21424: LD_VAR 0 3
21428: PUSH
21429: LD_INT 33
21431: EQUAL
21432: IFFALSE 21442
// sRandom := true ;
21434: LD_ADDR_EXP 139
21438: PUSH
21439: LD_INT 1
21441: ST_TO_ADDR
// if p3 = 34 then
21442: LD_VAR 0 3
21446: PUSH
21447: LD_INT 34
21449: EQUAL
21450: IFFALSE 21460
// sShield := true ;
21452: LD_ADDR_EXP 140
21456: PUSH
21457: LD_INT 1
21459: ST_TO_ADDR
// if p3 = 35 then
21460: LD_VAR 0 3
21464: PUSH
21465: LD_INT 35
21467: EQUAL
21468: IFFALSE 21478
// sTime := true ;
21470: LD_ADDR_EXP 141
21474: PUSH
21475: LD_INT 1
21477: ST_TO_ADDR
// if p3 = 36 then
21478: LD_VAR 0 3
21482: PUSH
21483: LD_INT 36
21485: EQUAL
21486: IFFALSE 21496
// sTools := true ;
21488: LD_ADDR_EXP 142
21492: PUSH
21493: LD_INT 1
21495: ST_TO_ADDR
// if p3 = 101 then
21496: LD_VAR 0 3
21500: PUSH
21501: LD_INT 101
21503: EQUAL
21504: IFFALSE 21514
// sSold := true ;
21506: LD_ADDR_EXP 107
21510: PUSH
21511: LD_INT 1
21513: ST_TO_ADDR
// if p3 = 102 then
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 102
21521: EQUAL
21522: IFFALSE 21532
// sDiff := true ;
21524: LD_ADDR_EXP 108
21528: PUSH
21529: LD_INT 1
21531: ST_TO_ADDR
// if p3 = 103 then
21532: LD_VAR 0 3
21536: PUSH
21537: LD_INT 103
21539: EQUAL
21540: IFFALSE 21550
// sFog := true ;
21542: LD_ADDR_EXP 111
21546: PUSH
21547: LD_INT 1
21549: ST_TO_ADDR
// if p3 = 104 then
21550: LD_VAR 0 3
21554: PUSH
21555: LD_INT 104
21557: EQUAL
21558: IFFALSE 21568
// sReset := true ;
21560: LD_ADDR_EXP 112
21564: PUSH
21565: LD_INT 1
21567: ST_TO_ADDR
// if p3 = 105 then
21568: LD_VAR 0 3
21572: PUSH
21573: LD_INT 105
21575: EQUAL
21576: IFFALSE 21586
// sSun := true ;
21578: LD_ADDR_EXP 113
21582: PUSH
21583: LD_INT 1
21585: ST_TO_ADDR
// if p3 = 106 then
21586: LD_VAR 0 3
21590: PUSH
21591: LD_INT 106
21593: EQUAL
21594: IFFALSE 21604
// sTiger := true ;
21596: LD_ADDR_EXP 109
21600: PUSH
21601: LD_INT 1
21603: ST_TO_ADDR
// if p3 = 107 then
21604: LD_VAR 0 3
21608: PUSH
21609: LD_INT 107
21611: EQUAL
21612: IFFALSE 21622
// sBomb := true ;
21614: LD_ADDR_EXP 110
21618: PUSH
21619: LD_INT 1
21621: ST_TO_ADDR
// if p3 = 108 then
21622: LD_VAR 0 3
21626: PUSH
21627: LD_INT 108
21629: EQUAL
21630: IFFALSE 21640
// sWound := true ;
21632: LD_ADDR_EXP 118
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if p3 = 109 then
21640: LD_VAR 0 3
21644: PUSH
21645: LD_INT 109
21647: EQUAL
21648: IFFALSE 21658
// sBetray := true ;
21650: LD_ADDR_EXP 122
21654: PUSH
21655: LD_INT 1
21657: ST_TO_ADDR
// if p3 = 110 then
21658: LD_VAR 0 3
21662: PUSH
21663: LD_INT 110
21665: EQUAL
21666: IFFALSE 21676
// sContamin := true ;
21668: LD_ADDR_EXP 123
21672: PUSH
21673: LD_INT 1
21675: ST_TO_ADDR
// if p3 = 111 then
21676: LD_VAR 0 3
21680: PUSH
21681: LD_INT 111
21683: EQUAL
21684: IFFALSE 21694
// sOil := true ;
21686: LD_ADDR_EXP 125
21690: PUSH
21691: LD_INT 1
21693: ST_TO_ADDR
// if p3 = 112 then
21694: LD_VAR 0 3
21698: PUSH
21699: LD_INT 112
21701: EQUAL
21702: IFFALSE 21712
// sStu := true ;
21704: LD_ADDR_EXP 129
21708: PUSH
21709: LD_INT 1
21711: ST_TO_ADDR
// if p3 = 113 then
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 113
21719: EQUAL
21720: IFFALSE 21730
// sBazooka := true ;
21722: LD_ADDR_EXP 132
21726: PUSH
21727: LD_INT 1
21729: ST_TO_ADDR
// if p3 = 114 then
21730: LD_VAR 0 3
21734: PUSH
21735: LD_INT 114
21737: EQUAL
21738: IFFALSE 21748
// sMortar := true ;
21740: LD_ADDR_EXP 133
21744: PUSH
21745: LD_INT 1
21747: ST_TO_ADDR
// if p3 = 115 then
21748: LD_VAR 0 3
21752: PUSH
21753: LD_INT 115
21755: EQUAL
21756: IFFALSE 21766
// sRanger := true ;
21758: LD_ADDR_EXP 143
21762: PUSH
21763: LD_INT 1
21765: ST_TO_ADDR
// end ; if p2 = 101 then
21766: LD_VAR 0 2
21770: PUSH
21771: LD_INT 101
21773: EQUAL
21774: IFFALSE 21902
// begin case p3 of 1 :
21776: LD_VAR 0 3
21780: PUSH
21781: LD_INT 1
21783: DOUBLE
21784: EQUAL
21785: IFTRUE 21789
21787: GO 21796
21789: POP
// hHackUnlimitedResources ; 2 :
21790: CALL 32937 0 0
21794: GO 21902
21796: LD_INT 2
21798: DOUBLE
21799: EQUAL
21800: IFTRUE 21804
21802: GO 21811
21804: POP
// hHackSetLevel10 ; 3 :
21805: CALL 33070 0 0
21809: GO 21902
21811: LD_INT 3
21813: DOUBLE
21814: EQUAL
21815: IFTRUE 21819
21817: GO 21826
21819: POP
// hHackSetLevel10YourUnits ; 4 :
21820: CALL 33155 0 0
21824: GO 21902
21826: LD_INT 4
21828: DOUBLE
21829: EQUAL
21830: IFTRUE 21834
21832: GO 21841
21834: POP
// hHackInvincible ; 5 :
21835: CALL 33603 0 0
21839: GO 21902
21841: LD_INT 5
21843: DOUBLE
21844: EQUAL
21845: IFTRUE 21849
21847: GO 21856
21849: POP
// hHackInvisible ; 6 :
21850: CALL 33714 0 0
21854: GO 21902
21856: LD_INT 6
21858: DOUBLE
21859: EQUAL
21860: IFTRUE 21864
21862: GO 21871
21864: POP
// hHackChangeYourSide ; 7 :
21865: CALL 33771 0 0
21869: GO 21902
21871: LD_INT 7
21873: DOUBLE
21874: EQUAL
21875: IFTRUE 21879
21877: GO 21886
21879: POP
// hHackChangeUnitSide ; 8 :
21880: CALL 33813 0 0
21884: GO 21902
21886: LD_INT 8
21888: DOUBLE
21889: EQUAL
21890: IFTRUE 21894
21892: GO 21901
21894: POP
// hHackFog ; end ;
21895: CALL 33914 0 0
21899: GO 21902
21901: POP
// end ; end ;
21902: PPOPN 6
21904: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
21905: GO 21907
21907: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21908: LD_STRING initStreamRollete();
21910: PPUSH
21911: CALL_OW 559
// InitStreamMode ;
21915: CALL 21924 0 0
// DefineStreamItems ( ) ;
21919: CALL 22364 0 0
// end ;
21923: END
// function InitStreamMode ; begin
21924: LD_INT 0
21926: PPUSH
// streamModeActive := false ;
21927: LD_ADDR_EXP 90
21931: PUSH
21932: LD_INT 0
21934: ST_TO_ADDR
// normalCounter := 36 ;
21935: LD_ADDR_EXP 91
21939: PUSH
21940: LD_INT 36
21942: ST_TO_ADDR
// hardcoreCounter := 16 ;
21943: LD_ADDR_EXP 92
21947: PUSH
21948: LD_INT 16
21950: ST_TO_ADDR
// sRocket := false ;
21951: LD_ADDR_EXP 95
21955: PUSH
21956: LD_INT 0
21958: ST_TO_ADDR
// sSpeed := false ;
21959: LD_ADDR_EXP 94
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
// sEngine := false ;
21967: LD_ADDR_EXP 96
21971: PUSH
21972: LD_INT 0
21974: ST_TO_ADDR
// sSpec := false ;
21975: LD_ADDR_EXP 93
21979: PUSH
21980: LD_INT 0
21982: ST_TO_ADDR
// sLevel := false ;
21983: LD_ADDR_EXP 97
21987: PUSH
21988: LD_INT 0
21990: ST_TO_ADDR
// sArmoury := false ;
21991: LD_ADDR_EXP 98
21995: PUSH
21996: LD_INT 0
21998: ST_TO_ADDR
// sRadar := false ;
21999: LD_ADDR_EXP 99
22003: PUSH
22004: LD_INT 0
22006: ST_TO_ADDR
// sBunker := false ;
22007: LD_ADDR_EXP 100
22011: PUSH
22012: LD_INT 0
22014: ST_TO_ADDR
// sHack := false ;
22015: LD_ADDR_EXP 101
22019: PUSH
22020: LD_INT 0
22022: ST_TO_ADDR
// sFire := false ;
22023: LD_ADDR_EXP 102
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// sRefresh := false ;
22031: LD_ADDR_EXP 103
22035: PUSH
22036: LD_INT 0
22038: ST_TO_ADDR
// sExp := false ;
22039: LD_ADDR_EXP 104
22043: PUSH
22044: LD_INT 0
22046: ST_TO_ADDR
// sDepot := false ;
22047: LD_ADDR_EXP 105
22051: PUSH
22052: LD_INT 0
22054: ST_TO_ADDR
// sFlag := false ;
22055: LD_ADDR_EXP 106
22059: PUSH
22060: LD_INT 0
22062: ST_TO_ADDR
// sKamikadze := false ;
22063: LD_ADDR_EXP 114
22067: PUSH
22068: LD_INT 0
22070: ST_TO_ADDR
// sTroll := false ;
22071: LD_ADDR_EXP 115
22075: PUSH
22076: LD_INT 0
22078: ST_TO_ADDR
// sSlow := false ;
22079: LD_ADDR_EXP 116
22083: PUSH
22084: LD_INT 0
22086: ST_TO_ADDR
// sLack := false ;
22087: LD_ADDR_EXP 117
22091: PUSH
22092: LD_INT 0
22094: ST_TO_ADDR
// sTank := false ;
22095: LD_ADDR_EXP 119
22099: PUSH
22100: LD_INT 0
22102: ST_TO_ADDR
// sRemote := false ;
22103: LD_ADDR_EXP 120
22107: PUSH
22108: LD_INT 0
22110: ST_TO_ADDR
// sPowell := false ;
22111: LD_ADDR_EXP 121
22115: PUSH
22116: LD_INT 0
22118: ST_TO_ADDR
// sTeleport := false ;
22119: LD_ADDR_EXP 124
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// sOilTower := false ;
22127: LD_ADDR_EXP 126
22131: PUSH
22132: LD_INT 0
22134: ST_TO_ADDR
// sShovel := false ;
22135: LD_ADDR_EXP 127
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// sSheik := false ;
22143: LD_ADDR_EXP 128
22147: PUSH
22148: LD_INT 0
22150: ST_TO_ADDR
// sEarthquake := false ;
22151: LD_ADDR_EXP 130
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
// sAI := false ;
22159: LD_ADDR_EXP 131
22163: PUSH
22164: LD_INT 0
22166: ST_TO_ADDR
// sCargo := false ;
22167: LD_ADDR_EXP 134
22171: PUSH
22172: LD_INT 0
22174: ST_TO_ADDR
// sDLaser := false ;
22175: LD_ADDR_EXP 135
22179: PUSH
22180: LD_INT 0
22182: ST_TO_ADDR
// sExchange := false ;
22183: LD_ADDR_EXP 136
22187: PUSH
22188: LD_INT 0
22190: ST_TO_ADDR
// sFac := false ;
22191: LD_ADDR_EXP 137
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// sPower := false ;
22199: LD_ADDR_EXP 138
22203: PUSH
22204: LD_INT 0
22206: ST_TO_ADDR
// sRandom := false ;
22207: LD_ADDR_EXP 139
22211: PUSH
22212: LD_INT 0
22214: ST_TO_ADDR
// sShield := false ;
22215: LD_ADDR_EXP 140
22219: PUSH
22220: LD_INT 0
22222: ST_TO_ADDR
// sTime := false ;
22223: LD_ADDR_EXP 141
22227: PUSH
22228: LD_INT 0
22230: ST_TO_ADDR
// sTools := false ;
22231: LD_ADDR_EXP 142
22235: PUSH
22236: LD_INT 0
22238: ST_TO_ADDR
// sSold := false ;
22239: LD_ADDR_EXP 107
22243: PUSH
22244: LD_INT 0
22246: ST_TO_ADDR
// sDiff := false ;
22247: LD_ADDR_EXP 108
22251: PUSH
22252: LD_INT 0
22254: ST_TO_ADDR
// sFog := false ;
22255: LD_ADDR_EXP 111
22259: PUSH
22260: LD_INT 0
22262: ST_TO_ADDR
// sReset := false ;
22263: LD_ADDR_EXP 112
22267: PUSH
22268: LD_INT 0
22270: ST_TO_ADDR
// sSun := false ;
22271: LD_ADDR_EXP 113
22275: PUSH
22276: LD_INT 0
22278: ST_TO_ADDR
// sTiger := false ;
22279: LD_ADDR_EXP 109
22283: PUSH
22284: LD_INT 0
22286: ST_TO_ADDR
// sBomb := false ;
22287: LD_ADDR_EXP 110
22291: PUSH
22292: LD_INT 0
22294: ST_TO_ADDR
// sWound := false ;
22295: LD_ADDR_EXP 118
22299: PUSH
22300: LD_INT 0
22302: ST_TO_ADDR
// sBetray := false ;
22303: LD_ADDR_EXP 122
22307: PUSH
22308: LD_INT 0
22310: ST_TO_ADDR
// sContamin := false ;
22311: LD_ADDR_EXP 123
22315: PUSH
22316: LD_INT 0
22318: ST_TO_ADDR
// sOil := false ;
22319: LD_ADDR_EXP 125
22323: PUSH
22324: LD_INT 0
22326: ST_TO_ADDR
// sStu := false ;
22327: LD_ADDR_EXP 129
22331: PUSH
22332: LD_INT 0
22334: ST_TO_ADDR
// sBazooka := false ;
22335: LD_ADDR_EXP 132
22339: PUSH
22340: LD_INT 0
22342: ST_TO_ADDR
// sMortar := false ;
22343: LD_ADDR_EXP 133
22347: PUSH
22348: LD_INT 0
22350: ST_TO_ADDR
// sRanger := false ;
22351: LD_ADDR_EXP 143
22355: PUSH
22356: LD_INT 0
22358: ST_TO_ADDR
// end ;
22359: LD_VAR 0 1
22363: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22364: LD_INT 0
22366: PPUSH
22367: PPUSH
22368: PPUSH
22369: PPUSH
22370: PPUSH
// result := [ ] ;
22371: LD_ADDR_VAR 0 1
22375: PUSH
22376: EMPTY
22377: ST_TO_ADDR
// if campaign_id = 1 then
22378: LD_OWVAR 69
22382: PUSH
22383: LD_INT 1
22385: EQUAL
22386: IFFALSE 25324
// begin case mission_number of 1 :
22388: LD_OWVAR 70
22392: PUSH
22393: LD_INT 1
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22465
22401: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
22402: LD_ADDR_VAR 0 1
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: LD_INT 4
22412: PUSH
22413: LD_INT 11
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 15
22421: PUSH
22422: LD_INT 16
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: LD_INT 26
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: LIST
22440: LIST
22441: LIST
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 101
22447: PUSH
22448: LD_INT 102
22450: PUSH
22451: LD_INT 106
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: LIST
22458: PUSH
22459: EMPTY
22460: LIST
22461: LIST
22462: ST_TO_ADDR
22463: GO 25322
22465: LD_INT 2
22467: DOUBLE
22468: EQUAL
22469: IFTRUE 22473
22471: GO 22545
22473: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
22474: LD_ADDR_VAR 0 1
22478: PUSH
22479: LD_INT 2
22481: PUSH
22482: LD_INT 4
22484: PUSH
22485: LD_INT 11
22487: PUSH
22488: LD_INT 12
22490: PUSH
22491: LD_INT 15
22493: PUSH
22494: LD_INT 16
22496: PUSH
22497: LD_INT 22
22499: PUSH
22500: LD_INT 23
22502: PUSH
22503: LD_INT 26
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: PUSH
22517: LD_INT 101
22519: PUSH
22520: LD_INT 102
22522: PUSH
22523: LD_INT 105
22525: PUSH
22526: LD_INT 106
22528: PUSH
22529: LD_INT 108
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: ST_TO_ADDR
22543: GO 25322
22545: LD_INT 3
22547: DOUBLE
22548: EQUAL
22549: IFTRUE 22553
22551: GO 22629
22553: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
22554: LD_ADDR_VAR 0 1
22558: PUSH
22559: LD_INT 2
22561: PUSH
22562: LD_INT 4
22564: PUSH
22565: LD_INT 5
22567: PUSH
22568: LD_INT 11
22570: PUSH
22571: LD_INT 12
22573: PUSH
22574: LD_INT 15
22576: PUSH
22577: LD_INT 16
22579: PUSH
22580: LD_INT 22
22582: PUSH
22583: LD_INT 26
22585: PUSH
22586: LD_INT 36
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 101
22603: PUSH
22604: LD_INT 102
22606: PUSH
22607: LD_INT 105
22609: PUSH
22610: LD_INT 106
22612: PUSH
22613: LD_INT 108
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: ST_TO_ADDR
22627: GO 25322
22629: LD_INT 4
22631: DOUBLE
22632: EQUAL
22633: IFTRUE 22637
22635: GO 22721
22637: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
22638: LD_ADDR_VAR 0 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 11
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 15
22663: PUSH
22664: LD_INT 16
22666: PUSH
22667: LD_INT 22
22669: PUSH
22670: LD_INT 23
22672: PUSH
22673: LD_INT 26
22675: PUSH
22676: LD_INT 36
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 101
22695: PUSH
22696: LD_INT 102
22698: PUSH
22699: LD_INT 105
22701: PUSH
22702: LD_INT 106
22704: PUSH
22705: LD_INT 108
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: ST_TO_ADDR
22719: GO 25322
22721: LD_INT 5
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22829
22729: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
22730: LD_ADDR_VAR 0 1
22734: PUSH
22735: LD_INT 2
22737: PUSH
22738: LD_INT 4
22740: PUSH
22741: LD_INT 5
22743: PUSH
22744: LD_INT 6
22746: PUSH
22747: LD_INT 8
22749: PUSH
22750: LD_INT 11
22752: PUSH
22753: LD_INT 12
22755: PUSH
22756: LD_INT 15
22758: PUSH
22759: LD_INT 16
22761: PUSH
22762: LD_INT 22
22764: PUSH
22765: LD_INT 23
22767: PUSH
22768: LD_INT 25
22770: PUSH
22771: LD_INT 26
22773: PUSH
22774: LD_INT 36
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 101
22795: PUSH
22796: LD_INT 102
22798: PUSH
22799: LD_INT 105
22801: PUSH
22802: LD_INT 106
22804: PUSH
22805: LD_INT 108
22807: PUSH
22808: LD_INT 109
22810: PUSH
22811: LD_INT 112
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: ST_TO_ADDR
22827: GO 25322
22829: LD_INT 6
22831: DOUBLE
22832: EQUAL
22833: IFTRUE 22837
22835: GO 22957
22837: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
22838: LD_ADDR_VAR 0 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 4
22848: PUSH
22849: LD_INT 5
22851: PUSH
22852: LD_INT 6
22854: PUSH
22855: LD_INT 8
22857: PUSH
22858: LD_INT 11
22860: PUSH
22861: LD_INT 12
22863: PUSH
22864: LD_INT 15
22866: PUSH
22867: LD_INT 16
22869: PUSH
22870: LD_INT 20
22872: PUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 22
22878: PUSH
22879: LD_INT 23
22881: PUSH
22882: LD_INT 25
22884: PUSH
22885: LD_INT 26
22887: PUSH
22888: LD_INT 30
22890: PUSH
22891: LD_INT 31
22893: PUSH
22894: LD_INT 32
22896: PUSH
22897: LD_INT 36
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: PUSH
22921: LD_INT 101
22923: PUSH
22924: LD_INT 102
22926: PUSH
22927: LD_INT 105
22929: PUSH
22930: LD_INT 106
22932: PUSH
22933: LD_INT 108
22935: PUSH
22936: LD_INT 109
22938: PUSH
22939: LD_INT 112
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: PUSH
22951: EMPTY
22952: LIST
22953: LIST
22954: ST_TO_ADDR
22955: GO 25322
22957: LD_INT 7
22959: DOUBLE
22960: EQUAL
22961: IFTRUE 22965
22963: GO 23065
22965: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
22966: LD_ADDR_VAR 0 1
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 4
22976: PUSH
22977: LD_INT 5
22979: PUSH
22980: LD_INT 7
22982: PUSH
22983: LD_INT 11
22985: PUSH
22986: LD_INT 12
22988: PUSH
22989: LD_INT 15
22991: PUSH
22992: LD_INT 16
22994: PUSH
22995: LD_INT 20
22997: PUSH
22998: LD_INT 21
23000: PUSH
23001: LD_INT 22
23003: PUSH
23004: LD_INT 23
23006: PUSH
23007: LD_INT 25
23009: PUSH
23010: LD_INT 26
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: PUSH
23029: LD_INT 101
23031: PUSH
23032: LD_INT 102
23034: PUSH
23035: LD_INT 103
23037: PUSH
23038: LD_INT 105
23040: PUSH
23041: LD_INT 106
23043: PUSH
23044: LD_INT 108
23046: PUSH
23047: LD_INT 112
23049: PUSH
23050: EMPTY
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: ST_TO_ADDR
23063: GO 25322
23065: LD_INT 8
23067: DOUBLE
23068: EQUAL
23069: IFTRUE 23073
23071: GO 23201
23073: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
23074: LD_ADDR_VAR 0 1
23078: PUSH
23079: LD_INT 2
23081: PUSH
23082: LD_INT 4
23084: PUSH
23085: LD_INT 5
23087: PUSH
23088: LD_INT 6
23090: PUSH
23091: LD_INT 7
23093: PUSH
23094: LD_INT 8
23096: PUSH
23097: LD_INT 11
23099: PUSH
23100: LD_INT 12
23102: PUSH
23103: LD_INT 15
23105: PUSH
23106: LD_INT 16
23108: PUSH
23109: LD_INT 20
23111: PUSH
23112: LD_INT 21
23114: PUSH
23115: LD_INT 22
23117: PUSH
23118: LD_INT 23
23120: PUSH
23121: LD_INT 25
23123: PUSH
23124: LD_INT 26
23126: PUSH
23127: LD_INT 30
23129: PUSH
23130: LD_INT 31
23132: PUSH
23133: LD_INT 32
23135: PUSH
23136: LD_INT 36
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: PUSH
23161: LD_INT 101
23163: PUSH
23164: LD_INT 102
23166: PUSH
23167: LD_INT 103
23169: PUSH
23170: LD_INT 105
23172: PUSH
23173: LD_INT 106
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 112
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: ST_TO_ADDR
23199: GO 25322
23201: LD_INT 9
23203: DOUBLE
23204: EQUAL
23205: IFTRUE 23209
23207: GO 23345
23209: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
23210: LD_ADDR_VAR 0 1
23214: PUSH
23215: LD_INT 2
23217: PUSH
23218: LD_INT 4
23220: PUSH
23221: LD_INT 5
23223: PUSH
23224: LD_INT 6
23226: PUSH
23227: LD_INT 7
23229: PUSH
23230: LD_INT 8
23232: PUSH
23233: LD_INT 11
23235: PUSH
23236: LD_INT 12
23238: PUSH
23239: LD_INT 15
23241: PUSH
23242: LD_INT 16
23244: PUSH
23245: LD_INT 20
23247: PUSH
23248: LD_INT 21
23250: PUSH
23251: LD_INT 22
23253: PUSH
23254: LD_INT 23
23256: PUSH
23257: LD_INT 25
23259: PUSH
23260: LD_INT 26
23262: PUSH
23263: LD_INT 28
23265: PUSH
23266: LD_INT 30
23268: PUSH
23269: LD_INT 31
23271: PUSH
23272: LD_INT 32
23274: PUSH
23275: LD_INT 36
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 101
23303: PUSH
23304: LD_INT 102
23306: PUSH
23307: LD_INT 103
23309: PUSH
23310: LD_INT 105
23312: PUSH
23313: LD_INT 106
23315: PUSH
23316: LD_INT 108
23318: PUSH
23319: LD_INT 109
23321: PUSH
23322: LD_INT 112
23324: PUSH
23325: LD_INT 114
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: ST_TO_ADDR
23343: GO 25322
23345: LD_INT 10
23347: DOUBLE
23348: EQUAL
23349: IFTRUE 23353
23351: GO 23537
23353: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
23354: LD_ADDR_VAR 0 1
23358: PUSH
23359: LD_INT 2
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: LD_INT 6
23370: PUSH
23371: LD_INT 7
23373: PUSH
23374: LD_INT 8
23376: PUSH
23377: LD_INT 9
23379: PUSH
23380: LD_INT 10
23382: PUSH
23383: LD_INT 11
23385: PUSH
23386: LD_INT 12
23388: PUSH
23389: LD_INT 13
23391: PUSH
23392: LD_INT 14
23394: PUSH
23395: LD_INT 15
23397: PUSH
23398: LD_INT 16
23400: PUSH
23401: LD_INT 17
23403: PUSH
23404: LD_INT 18
23406: PUSH
23407: LD_INT 19
23409: PUSH
23410: LD_INT 20
23412: PUSH
23413: LD_INT 21
23415: PUSH
23416: LD_INT 22
23418: PUSH
23419: LD_INT 23
23421: PUSH
23422: LD_INT 24
23424: PUSH
23425: LD_INT 25
23427: PUSH
23428: LD_INT 26
23430: PUSH
23431: LD_INT 28
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 31
23439: PUSH
23440: LD_INT 32
23442: PUSH
23443: LD_INT 36
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: PUSH
23477: LD_INT 101
23479: PUSH
23480: LD_INT 102
23482: PUSH
23483: LD_INT 103
23485: PUSH
23486: LD_INT 104
23488: PUSH
23489: LD_INT 105
23491: PUSH
23492: LD_INT 106
23494: PUSH
23495: LD_INT 107
23497: PUSH
23498: LD_INT 108
23500: PUSH
23501: LD_INT 109
23503: PUSH
23504: LD_INT 110
23506: PUSH
23507: LD_INT 111
23509: PUSH
23510: LD_INT 112
23512: PUSH
23513: LD_INT 114
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: ST_TO_ADDR
23535: GO 25322
23537: LD_INT 11
23539: DOUBLE
23540: EQUAL
23541: IFTRUE 23545
23543: GO 23737
23545: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
23546: LD_ADDR_VAR 0 1
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: LD_INT 3
23556: PUSH
23557: LD_INT 4
23559: PUSH
23560: LD_INT 5
23562: PUSH
23563: LD_INT 6
23565: PUSH
23566: LD_INT 7
23568: PUSH
23569: LD_INT 8
23571: PUSH
23572: LD_INT 9
23574: PUSH
23575: LD_INT 10
23577: PUSH
23578: LD_INT 11
23580: PUSH
23581: LD_INT 12
23583: PUSH
23584: LD_INT 13
23586: PUSH
23587: LD_INT 14
23589: PUSH
23590: LD_INT 15
23592: PUSH
23593: LD_INT 16
23595: PUSH
23596: LD_INT 17
23598: PUSH
23599: LD_INT 18
23601: PUSH
23602: LD_INT 19
23604: PUSH
23605: LD_INT 20
23607: PUSH
23608: LD_INT 21
23610: PUSH
23611: LD_INT 22
23613: PUSH
23614: LD_INT 23
23616: PUSH
23617: LD_INT 24
23619: PUSH
23620: LD_INT 25
23622: PUSH
23623: LD_INT 26
23625: PUSH
23626: LD_INT 28
23628: PUSH
23629: LD_INT 30
23631: PUSH
23632: LD_INT 31
23634: PUSH
23635: LD_INT 32
23637: PUSH
23638: LD_INT 34
23640: PUSH
23641: LD_INT 36
23643: PUSH
23644: EMPTY
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 101
23679: PUSH
23680: LD_INT 102
23682: PUSH
23683: LD_INT 103
23685: PUSH
23686: LD_INT 104
23688: PUSH
23689: LD_INT 105
23691: PUSH
23692: LD_INT 106
23694: PUSH
23695: LD_INT 107
23697: PUSH
23698: LD_INT 108
23700: PUSH
23701: LD_INT 109
23703: PUSH
23704: LD_INT 110
23706: PUSH
23707: LD_INT 111
23709: PUSH
23710: LD_INT 112
23712: PUSH
23713: LD_INT 114
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: PUSH
23731: EMPTY
23732: LIST
23733: LIST
23734: ST_TO_ADDR
23735: GO 25322
23737: LD_INT 12
23739: DOUBLE
23740: EQUAL
23741: IFTRUE 23745
23743: GO 23953
23745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
23746: LD_ADDR_VAR 0 1
23750: PUSH
23751: LD_INT 1
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: LD_INT 3
23759: PUSH
23760: LD_INT 4
23762: PUSH
23763: LD_INT 5
23765: PUSH
23766: LD_INT 6
23768: PUSH
23769: LD_INT 7
23771: PUSH
23772: LD_INT 8
23774: PUSH
23775: LD_INT 9
23777: PUSH
23778: LD_INT 10
23780: PUSH
23781: LD_INT 11
23783: PUSH
23784: LD_INT 12
23786: PUSH
23787: LD_INT 13
23789: PUSH
23790: LD_INT 14
23792: PUSH
23793: LD_INT 15
23795: PUSH
23796: LD_INT 16
23798: PUSH
23799: LD_INT 17
23801: PUSH
23802: LD_INT 18
23804: PUSH
23805: LD_INT 19
23807: PUSH
23808: LD_INT 20
23810: PUSH
23811: LD_INT 21
23813: PUSH
23814: LD_INT 22
23816: PUSH
23817: LD_INT 23
23819: PUSH
23820: LD_INT 24
23822: PUSH
23823: LD_INT 25
23825: PUSH
23826: LD_INT 26
23828: PUSH
23829: LD_INT 27
23831: PUSH
23832: LD_INT 28
23834: PUSH
23835: LD_INT 30
23837: PUSH
23838: LD_INT 31
23840: PUSH
23841: LD_INT 32
23843: PUSH
23844: LD_INT 33
23846: PUSH
23847: LD_INT 34
23849: PUSH
23850: LD_INT 36
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: LIST
23869: LIST
23870: LIST
23871: LIST
23872: LIST
23873: LIST
23874: LIST
23875: LIST
23876: LIST
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 101
23891: PUSH
23892: LD_INT 102
23894: PUSH
23895: LD_INT 103
23897: PUSH
23898: LD_INT 104
23900: PUSH
23901: LD_INT 105
23903: PUSH
23904: LD_INT 106
23906: PUSH
23907: LD_INT 107
23909: PUSH
23910: LD_INT 108
23912: PUSH
23913: LD_INT 109
23915: PUSH
23916: LD_INT 110
23918: PUSH
23919: LD_INT 111
23921: PUSH
23922: LD_INT 112
23924: PUSH
23925: LD_INT 113
23927: PUSH
23928: LD_INT 114
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: ST_TO_ADDR
23951: GO 25322
23953: LD_INT 13
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 24157
23961: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
23962: LD_ADDR_VAR 0 1
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: LD_INT 2
23972: PUSH
23973: LD_INT 3
23975: PUSH
23976: LD_INT 4
23978: PUSH
23979: LD_INT 5
23981: PUSH
23982: LD_INT 8
23984: PUSH
23985: LD_INT 9
23987: PUSH
23988: LD_INT 10
23990: PUSH
23991: LD_INT 11
23993: PUSH
23994: LD_INT 12
23996: PUSH
23997: LD_INT 14
23999: PUSH
24000: LD_INT 15
24002: PUSH
24003: LD_INT 16
24005: PUSH
24006: LD_INT 17
24008: PUSH
24009: LD_INT 18
24011: PUSH
24012: LD_INT 19
24014: PUSH
24015: LD_INT 20
24017: PUSH
24018: LD_INT 21
24020: PUSH
24021: LD_INT 22
24023: PUSH
24024: LD_INT 23
24026: PUSH
24027: LD_INT 24
24029: PUSH
24030: LD_INT 25
24032: PUSH
24033: LD_INT 26
24035: PUSH
24036: LD_INT 27
24038: PUSH
24039: LD_INT 28
24041: PUSH
24042: LD_INT 30
24044: PUSH
24045: LD_INT 31
24047: PUSH
24048: LD_INT 32
24050: PUSH
24051: LD_INT 33
24053: PUSH
24054: LD_INT 34
24056: PUSH
24057: LD_INT 36
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 101
24095: PUSH
24096: LD_INT 102
24098: PUSH
24099: LD_INT 103
24101: PUSH
24102: LD_INT 104
24104: PUSH
24105: LD_INT 105
24107: PUSH
24108: LD_INT 106
24110: PUSH
24111: LD_INT 107
24113: PUSH
24114: LD_INT 108
24116: PUSH
24117: LD_INT 109
24119: PUSH
24120: LD_INT 110
24122: PUSH
24123: LD_INT 111
24125: PUSH
24126: LD_INT 112
24128: PUSH
24129: LD_INT 113
24131: PUSH
24132: LD_INT 114
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: ST_TO_ADDR
24155: GO 25322
24157: LD_INT 14
24159: DOUBLE
24160: EQUAL
24161: IFTRUE 24165
24163: GO 24377
24165: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
24166: LD_ADDR_VAR 0 1
24170: PUSH
24171: LD_INT 1
24173: PUSH
24174: LD_INT 2
24176: PUSH
24177: LD_INT 3
24179: PUSH
24180: LD_INT 4
24182: PUSH
24183: LD_INT 5
24185: PUSH
24186: LD_INT 6
24188: PUSH
24189: LD_INT 7
24191: PUSH
24192: LD_INT 8
24194: PUSH
24195: LD_INT 9
24197: PUSH
24198: LD_INT 10
24200: PUSH
24201: LD_INT 11
24203: PUSH
24204: LD_INT 12
24206: PUSH
24207: LD_INT 13
24209: PUSH
24210: LD_INT 14
24212: PUSH
24213: LD_INT 15
24215: PUSH
24216: LD_INT 16
24218: PUSH
24219: LD_INT 17
24221: PUSH
24222: LD_INT 18
24224: PUSH
24225: LD_INT 19
24227: PUSH
24228: LD_INT 20
24230: PUSH
24231: LD_INT 21
24233: PUSH
24234: LD_INT 22
24236: PUSH
24237: LD_INT 23
24239: PUSH
24240: LD_INT 24
24242: PUSH
24243: LD_INT 25
24245: PUSH
24246: LD_INT 26
24248: PUSH
24249: LD_INT 27
24251: PUSH
24252: LD_INT 28
24254: PUSH
24255: LD_INT 29
24257: PUSH
24258: LD_INT 30
24260: PUSH
24261: LD_INT 31
24263: PUSH
24264: LD_INT 32
24266: PUSH
24267: LD_INT 33
24269: PUSH
24270: LD_INT 34
24272: PUSH
24273: LD_INT 36
24275: PUSH
24276: EMPTY
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: LIST
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: PUSH
24313: LD_INT 101
24315: PUSH
24316: LD_INT 102
24318: PUSH
24319: LD_INT 103
24321: PUSH
24322: LD_INT 104
24324: PUSH
24325: LD_INT 105
24327: PUSH
24328: LD_INT 106
24330: PUSH
24331: LD_INT 107
24333: PUSH
24334: LD_INT 108
24336: PUSH
24337: LD_INT 109
24339: PUSH
24340: LD_INT 110
24342: PUSH
24343: LD_INT 111
24345: PUSH
24346: LD_INT 112
24348: PUSH
24349: LD_INT 113
24351: PUSH
24352: LD_INT 114
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: ST_TO_ADDR
24375: GO 25322
24377: LD_INT 15
24379: DOUBLE
24380: EQUAL
24381: IFTRUE 24385
24383: GO 24597
24385: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_INT 1
24393: PUSH
24394: LD_INT 2
24396: PUSH
24397: LD_INT 3
24399: PUSH
24400: LD_INT 4
24402: PUSH
24403: LD_INT 5
24405: PUSH
24406: LD_INT 6
24408: PUSH
24409: LD_INT 7
24411: PUSH
24412: LD_INT 8
24414: PUSH
24415: LD_INT 9
24417: PUSH
24418: LD_INT 10
24420: PUSH
24421: LD_INT 11
24423: PUSH
24424: LD_INT 12
24426: PUSH
24427: LD_INT 13
24429: PUSH
24430: LD_INT 14
24432: PUSH
24433: LD_INT 15
24435: PUSH
24436: LD_INT 16
24438: PUSH
24439: LD_INT 17
24441: PUSH
24442: LD_INT 18
24444: PUSH
24445: LD_INT 19
24447: PUSH
24448: LD_INT 20
24450: PUSH
24451: LD_INT 21
24453: PUSH
24454: LD_INT 22
24456: PUSH
24457: LD_INT 23
24459: PUSH
24460: LD_INT 24
24462: PUSH
24463: LD_INT 25
24465: PUSH
24466: LD_INT 26
24468: PUSH
24469: LD_INT 27
24471: PUSH
24472: LD_INT 28
24474: PUSH
24475: LD_INT 29
24477: PUSH
24478: LD_INT 30
24480: PUSH
24481: LD_INT 31
24483: PUSH
24484: LD_INT 32
24486: PUSH
24487: LD_INT 33
24489: PUSH
24490: LD_INT 34
24492: PUSH
24493: LD_INT 36
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: LIST
24526: LIST
24527: LIST
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: PUSH
24533: LD_INT 101
24535: PUSH
24536: LD_INT 102
24538: PUSH
24539: LD_INT 103
24541: PUSH
24542: LD_INT 104
24544: PUSH
24545: LD_INT 105
24547: PUSH
24548: LD_INT 106
24550: PUSH
24551: LD_INT 107
24553: PUSH
24554: LD_INT 108
24556: PUSH
24557: LD_INT 109
24559: PUSH
24560: LD_INT 110
24562: PUSH
24563: LD_INT 111
24565: PUSH
24566: LD_INT 112
24568: PUSH
24569: LD_INT 113
24571: PUSH
24572: LD_INT 114
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: PUSH
24591: EMPTY
24592: LIST
24593: LIST
24594: ST_TO_ADDR
24595: GO 25322
24597: LD_INT 16
24599: DOUBLE
24600: EQUAL
24601: IFTRUE 24605
24603: GO 24729
24605: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
24606: LD_ADDR_VAR 0 1
24610: PUSH
24611: LD_INT 2
24613: PUSH
24614: LD_INT 4
24616: PUSH
24617: LD_INT 5
24619: PUSH
24620: LD_INT 7
24622: PUSH
24623: LD_INT 11
24625: PUSH
24626: LD_INT 12
24628: PUSH
24629: LD_INT 15
24631: PUSH
24632: LD_INT 16
24634: PUSH
24635: LD_INT 20
24637: PUSH
24638: LD_INT 21
24640: PUSH
24641: LD_INT 22
24643: PUSH
24644: LD_INT 23
24646: PUSH
24647: LD_INT 25
24649: PUSH
24650: LD_INT 26
24652: PUSH
24653: LD_INT 30
24655: PUSH
24656: LD_INT 31
24658: PUSH
24659: LD_INT 32
24661: PUSH
24662: LD_INT 33
24664: PUSH
24665: LD_INT 34
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: PUSH
24689: LD_INT 101
24691: PUSH
24692: LD_INT 102
24694: PUSH
24695: LD_INT 103
24697: PUSH
24698: LD_INT 106
24700: PUSH
24701: LD_INT 108
24703: PUSH
24704: LD_INT 112
24706: PUSH
24707: LD_INT 113
24709: PUSH
24710: LD_INT 114
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: ST_TO_ADDR
24727: GO 25322
24729: LD_INT 17
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24949
24737: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
24738: LD_ADDR_VAR 0 1
24742: PUSH
24743: LD_INT 1
24745: PUSH
24746: LD_INT 2
24748: PUSH
24749: LD_INT 3
24751: PUSH
24752: LD_INT 4
24754: PUSH
24755: LD_INT 5
24757: PUSH
24758: LD_INT 6
24760: PUSH
24761: LD_INT 7
24763: PUSH
24764: LD_INT 8
24766: PUSH
24767: LD_INT 9
24769: PUSH
24770: LD_INT 10
24772: PUSH
24773: LD_INT 11
24775: PUSH
24776: LD_INT 12
24778: PUSH
24779: LD_INT 13
24781: PUSH
24782: LD_INT 14
24784: PUSH
24785: LD_INT 15
24787: PUSH
24788: LD_INT 16
24790: PUSH
24791: LD_INT 17
24793: PUSH
24794: LD_INT 18
24796: PUSH
24797: LD_INT 19
24799: PUSH
24800: LD_INT 20
24802: PUSH
24803: LD_INT 21
24805: PUSH
24806: LD_INT 22
24808: PUSH
24809: LD_INT 23
24811: PUSH
24812: LD_INT 24
24814: PUSH
24815: LD_INT 25
24817: PUSH
24818: LD_INT 26
24820: PUSH
24821: LD_INT 27
24823: PUSH
24824: LD_INT 28
24826: PUSH
24827: LD_INT 29
24829: PUSH
24830: LD_INT 30
24832: PUSH
24833: LD_INT 31
24835: PUSH
24836: LD_INT 32
24838: PUSH
24839: LD_INT 33
24841: PUSH
24842: LD_INT 34
24844: PUSH
24845: LD_INT 36
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: LD_INT 101
24887: PUSH
24888: LD_INT 102
24890: PUSH
24891: LD_INT 103
24893: PUSH
24894: LD_INT 104
24896: PUSH
24897: LD_INT 105
24899: PUSH
24900: LD_INT 106
24902: PUSH
24903: LD_INT 107
24905: PUSH
24906: LD_INT 108
24908: PUSH
24909: LD_INT 109
24911: PUSH
24912: LD_INT 110
24914: PUSH
24915: LD_INT 111
24917: PUSH
24918: LD_INT 112
24920: PUSH
24921: LD_INT 113
24923: PUSH
24924: LD_INT 114
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: ST_TO_ADDR
24947: GO 25322
24949: LD_INT 18
24951: DOUBLE
24952: EQUAL
24953: IFTRUE 24957
24955: GO 25093
24957: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
24958: LD_ADDR_VAR 0 1
24962: PUSH
24963: LD_INT 2
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: LD_INT 7
24974: PUSH
24975: LD_INT 11
24977: PUSH
24978: LD_INT 12
24980: PUSH
24981: LD_INT 15
24983: PUSH
24984: LD_INT 16
24986: PUSH
24987: LD_INT 20
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 22
24995: PUSH
24996: LD_INT 23
24998: PUSH
24999: LD_INT 25
25001: PUSH
25002: LD_INT 26
25004: PUSH
25005: LD_INT 30
25007: PUSH
25008: LD_INT 31
25010: PUSH
25011: LD_INT 32
25013: PUSH
25014: LD_INT 33
25016: PUSH
25017: LD_INT 34
25019: PUSH
25020: LD_INT 35
25022: PUSH
25023: LD_INT 36
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: LIST
25030: LIST
25031: LIST
25032: LIST
25033: LIST
25034: LIST
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: PUSH
25049: LD_INT 101
25051: PUSH
25052: LD_INT 102
25054: PUSH
25055: LD_INT 103
25057: PUSH
25058: LD_INT 106
25060: PUSH
25061: LD_INT 108
25063: PUSH
25064: LD_INT 112
25066: PUSH
25067: LD_INT 113
25069: PUSH
25070: LD_INT 114
25072: PUSH
25073: LD_INT 115
25075: PUSH
25076: EMPTY
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: ST_TO_ADDR
25091: GO 25322
25093: LD_INT 19
25095: DOUBLE
25096: EQUAL
25097: IFTRUE 25101
25099: GO 25321
25101: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
25102: LD_ADDR_VAR 0 1
25106: PUSH
25107: LD_INT 1
25109: PUSH
25110: LD_INT 2
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: LD_INT 4
25118: PUSH
25119: LD_INT 5
25121: PUSH
25122: LD_INT 6
25124: PUSH
25125: LD_INT 7
25127: PUSH
25128: LD_INT 8
25130: PUSH
25131: LD_INT 9
25133: PUSH
25134: LD_INT 10
25136: PUSH
25137: LD_INT 11
25139: PUSH
25140: LD_INT 12
25142: PUSH
25143: LD_INT 13
25145: PUSH
25146: LD_INT 14
25148: PUSH
25149: LD_INT 15
25151: PUSH
25152: LD_INT 16
25154: PUSH
25155: LD_INT 17
25157: PUSH
25158: LD_INT 18
25160: PUSH
25161: LD_INT 19
25163: PUSH
25164: LD_INT 20
25166: PUSH
25167: LD_INT 21
25169: PUSH
25170: LD_INT 22
25172: PUSH
25173: LD_INT 23
25175: PUSH
25176: LD_INT 24
25178: PUSH
25179: LD_INT 25
25181: PUSH
25182: LD_INT 26
25184: PUSH
25185: LD_INT 27
25187: PUSH
25188: LD_INT 28
25190: PUSH
25191: LD_INT 29
25193: PUSH
25194: LD_INT 30
25196: PUSH
25197: LD_INT 31
25199: PUSH
25200: LD_INT 32
25202: PUSH
25203: LD_INT 33
25205: PUSH
25206: LD_INT 34
25208: PUSH
25209: LD_INT 35
25211: PUSH
25212: LD_INT 36
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: PUSH
25253: LD_INT 101
25255: PUSH
25256: LD_INT 102
25258: PUSH
25259: LD_INT 103
25261: PUSH
25262: LD_INT 104
25264: PUSH
25265: LD_INT 105
25267: PUSH
25268: LD_INT 106
25270: PUSH
25271: LD_INT 107
25273: PUSH
25274: LD_INT 108
25276: PUSH
25277: LD_INT 109
25279: PUSH
25280: LD_INT 110
25282: PUSH
25283: LD_INT 111
25285: PUSH
25286: LD_INT 112
25288: PUSH
25289: LD_INT 113
25291: PUSH
25292: LD_INT 114
25294: PUSH
25295: LD_INT 115
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: ST_TO_ADDR
25319: GO 25322
25321: POP
// end else
25322: GO 25541
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
25324: LD_ADDR_VAR 0 1
25328: PUSH
25329: LD_INT 1
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 3
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: LD_INT 5
25343: PUSH
25344: LD_INT 6
25346: PUSH
25347: LD_INT 7
25349: PUSH
25350: LD_INT 8
25352: PUSH
25353: LD_INT 9
25355: PUSH
25356: LD_INT 10
25358: PUSH
25359: LD_INT 11
25361: PUSH
25362: LD_INT 12
25364: PUSH
25365: LD_INT 13
25367: PUSH
25368: LD_INT 14
25370: PUSH
25371: LD_INT 15
25373: PUSH
25374: LD_INT 16
25376: PUSH
25377: LD_INT 17
25379: PUSH
25380: LD_INT 18
25382: PUSH
25383: LD_INT 19
25385: PUSH
25386: LD_INT 20
25388: PUSH
25389: LD_INT 21
25391: PUSH
25392: LD_INT 22
25394: PUSH
25395: LD_INT 23
25397: PUSH
25398: LD_INT 24
25400: PUSH
25401: LD_INT 25
25403: PUSH
25404: LD_INT 26
25406: PUSH
25407: LD_INT 27
25409: PUSH
25410: LD_INT 28
25412: PUSH
25413: LD_INT 29
25415: PUSH
25416: LD_INT 30
25418: PUSH
25419: LD_INT 31
25421: PUSH
25422: LD_INT 32
25424: PUSH
25425: LD_INT 33
25427: PUSH
25428: LD_INT 34
25430: PUSH
25431: LD_INT 35
25433: PUSH
25434: LD_INT 36
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 101
25477: PUSH
25478: LD_INT 102
25480: PUSH
25481: LD_INT 103
25483: PUSH
25484: LD_INT 104
25486: PUSH
25487: LD_INT 105
25489: PUSH
25490: LD_INT 106
25492: PUSH
25493: LD_INT 107
25495: PUSH
25496: LD_INT 108
25498: PUSH
25499: LD_INT 109
25501: PUSH
25502: LD_INT 110
25504: PUSH
25505: LD_INT 111
25507: PUSH
25508: LD_INT 112
25510: PUSH
25511: LD_INT 113
25513: PUSH
25514: LD_INT 114
25516: PUSH
25517: LD_INT 115
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: PUSH
25537: EMPTY
25538: LIST
25539: LIST
25540: ST_TO_ADDR
// if result then
25541: LD_VAR 0 1
25545: IFFALSE 25834
// begin normal :=  ;
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: LD_STRING 
25554: ST_TO_ADDR
// hardcore :=  ;
25555: LD_ADDR_VAR 0 4
25559: PUSH
25560: LD_STRING 
25562: ST_TO_ADDR
// for i = 1 to normalCounter do
25563: LD_ADDR_VAR 0 5
25567: PUSH
25568: DOUBLE
25569: LD_INT 1
25571: DEC
25572: ST_TO_ADDR
25573: LD_EXP 91
25577: PUSH
25578: FOR_TO
25579: IFFALSE 25680
// begin tmp := 0 ;
25581: LD_ADDR_VAR 0 2
25585: PUSH
25586: LD_STRING 0
25588: ST_TO_ADDR
// if result [ 1 ] then
25589: LD_VAR 0 1
25593: PUSH
25594: LD_INT 1
25596: ARRAY
25597: IFFALSE 25662
// if result [ 1 ] [ 1 ] = i then
25599: LD_VAR 0 1
25603: PUSH
25604: LD_INT 1
25606: ARRAY
25607: PUSH
25608: LD_INT 1
25610: ARRAY
25611: PUSH
25612: LD_VAR 0 5
25616: EQUAL
25617: IFFALSE 25662
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25619: LD_ADDR_VAR 0 1
25623: PUSH
25624: LD_VAR 0 1
25628: PPUSH
25629: LD_INT 1
25631: PPUSH
25632: LD_VAR 0 1
25636: PUSH
25637: LD_INT 1
25639: ARRAY
25640: PPUSH
25641: LD_INT 1
25643: PPUSH
25644: CALL_OW 3
25648: PPUSH
25649: CALL_OW 1
25653: ST_TO_ADDR
// tmp := 1 ;
25654: LD_ADDR_VAR 0 2
25658: PUSH
25659: LD_STRING 1
25661: ST_TO_ADDR
// end ; normal := normal & tmp ;
25662: LD_ADDR_VAR 0 3
25666: PUSH
25667: LD_VAR 0 3
25671: PUSH
25672: LD_VAR 0 2
25676: STR
25677: ST_TO_ADDR
// end ;
25678: GO 25578
25680: POP
25681: POP
// for i = 1 to hardcoreCounter do
25682: LD_ADDR_VAR 0 5
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_EXP 92
25696: PUSH
25697: FOR_TO
25698: IFFALSE 25803
// begin tmp := 0 ;
25700: LD_ADDR_VAR 0 2
25704: PUSH
25705: LD_STRING 0
25707: ST_TO_ADDR
// if result [ 2 ] then
25708: LD_VAR 0 1
25712: PUSH
25713: LD_INT 2
25715: ARRAY
25716: IFFALSE 25785
// if result [ 2 ] [ 1 ] = 100 + i then
25718: LD_VAR 0 1
25722: PUSH
25723: LD_INT 2
25725: ARRAY
25726: PUSH
25727: LD_INT 1
25729: ARRAY
25730: PUSH
25731: LD_INT 100
25733: PUSH
25734: LD_VAR 0 5
25738: PLUS
25739: EQUAL
25740: IFFALSE 25785
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
25742: LD_ADDR_VAR 0 1
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: LD_INT 2
25754: PPUSH
25755: LD_VAR 0 1
25759: PUSH
25760: LD_INT 2
25762: ARRAY
25763: PPUSH
25764: LD_INT 1
25766: PPUSH
25767: CALL_OW 3
25771: PPUSH
25772: CALL_OW 1
25776: ST_TO_ADDR
// tmp := 1 ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_STRING 1
25784: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
25785: LD_ADDR_VAR 0 4
25789: PUSH
25790: LD_VAR 0 4
25794: PUSH
25795: LD_VAR 0 2
25799: STR
25800: ST_TO_ADDR
// end ;
25801: GO 25697
25803: POP
25804: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
25805: LD_STRING getStreamItemsFromMission("
25807: PUSH
25808: LD_VAR 0 3
25812: STR
25813: PUSH
25814: LD_STRING ","
25816: STR
25817: PUSH
25818: LD_VAR 0 4
25822: STR
25823: PUSH
25824: LD_STRING ")
25826: STR
25827: PPUSH
25828: CALL_OW 559
// end else
25832: GO 25841
// ToLua ( getStreamItemsFromMission("","") ) ;
25834: LD_STRING getStreamItemsFromMission("","")
25836: PPUSH
25837: CALL_OW 559
// end ;
25841: LD_VAR 0 1
25845: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25846: LD_EXP 90
25850: PUSH
25851: LD_EXP 95
25855: AND
25856: IFFALSE 25980
25858: GO 25860
25860: DISABLE
25861: LD_INT 0
25863: PPUSH
25864: PPUSH
// begin enable ;
25865: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25866: LD_ADDR_VAR 0 2
25870: PUSH
25871: LD_INT 22
25873: PUSH
25874: LD_OWVAR 2
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: LD_INT 2
25885: PUSH
25886: LD_INT 34
25888: PUSH
25889: LD_INT 7
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 34
25898: PUSH
25899: LD_INT 45
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PUSH
25906: LD_INT 34
25908: PUSH
25909: LD_INT 28
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: PUSH
25916: LD_INT 34
25918: PUSH
25919: LD_INT 47
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: PPUSH
25937: CALL_OW 69
25941: ST_TO_ADDR
// if not tmp then
25942: LD_VAR 0 2
25946: NOT
25947: IFFALSE 25951
// exit ;
25949: GO 25980
// for i in tmp do
25951: LD_ADDR_VAR 0 1
25955: PUSH
25956: LD_VAR 0 2
25960: PUSH
25961: FOR_IN
25962: IFFALSE 25978
// begin SetLives ( i , 0 ) ;
25964: LD_VAR 0 1
25968: PPUSH
25969: LD_INT 0
25971: PPUSH
25972: CALL_OW 234
// end ;
25976: GO 25961
25978: POP
25979: POP
// end ;
25980: PPOPN 2
25982: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25983: LD_EXP 90
25987: PUSH
25988: LD_EXP 96
25992: AND
25993: IFFALSE 26077
25995: GO 25997
25997: DISABLE
25998: LD_INT 0
26000: PPUSH
26001: PPUSH
// begin enable ;
26002: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26003: LD_ADDR_VAR 0 2
26007: PUSH
26008: LD_INT 22
26010: PUSH
26011: LD_OWVAR 2
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: LD_INT 32
26022: PUSH
26023: LD_INT 3
26025: PUSH
26026: EMPTY
26027: LIST
26028: LIST
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 69
26038: ST_TO_ADDR
// if not tmp then
26039: LD_VAR 0 2
26043: NOT
26044: IFFALSE 26048
// exit ;
26046: GO 26077
// for i in tmp do
26048: LD_ADDR_VAR 0 1
26052: PUSH
26053: LD_VAR 0 2
26057: PUSH
26058: FOR_IN
26059: IFFALSE 26075
// begin SetLives ( i , 0 ) ;
26061: LD_VAR 0 1
26065: PPUSH
26066: LD_INT 0
26068: PPUSH
26069: CALL_OW 234
// end ;
26073: GO 26058
26075: POP
26076: POP
// end ;
26077: PPOPN 2
26079: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26080: LD_EXP 90
26084: PUSH
26085: LD_EXP 93
26089: AND
26090: IFFALSE 26183
26092: GO 26094
26094: DISABLE
26095: LD_INT 0
26097: PPUSH
// begin enable ;
26098: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26099: LD_ADDR_VAR 0 1
26103: PUSH
26104: LD_INT 22
26106: PUSH
26107: LD_OWVAR 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 2
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 5
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 9
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: LD_INT 25
26141: PUSH
26142: LD_INT 8
26144: PUSH
26145: EMPTY
26146: LIST
26147: LIST
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PPUSH
26159: CALL_OW 69
26163: PUSH
26164: FOR_IN
26165: IFFALSE 26181
// begin SetClass ( i , 1 ) ;
26167: LD_VAR 0 1
26171: PPUSH
26172: LD_INT 1
26174: PPUSH
26175: CALL_OW 336
// end ;
26179: GO 26164
26181: POP
26182: POP
// end ;
26183: PPOPN 1
26185: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26186: LD_EXP 90
26190: PUSH
26191: LD_EXP 94
26195: AND
26196: PUSH
26197: LD_OWVAR 65
26201: PUSH
26202: LD_INT 7
26204: LESS
26205: AND
26206: IFFALSE 26220
26208: GO 26210
26210: DISABLE
// begin enable ;
26211: ENABLE
// game_speed := 7 ;
26212: LD_ADDR_OWVAR 65
26216: PUSH
26217: LD_INT 7
26219: ST_TO_ADDR
// end ;
26220: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26221: LD_EXP 90
26225: PUSH
26226: LD_EXP 97
26230: AND
26231: IFFALSE 26433
26233: GO 26235
26235: DISABLE
26236: LD_INT 0
26238: PPUSH
26239: PPUSH
26240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26241: LD_ADDR_VAR 0 3
26245: PUSH
26246: LD_INT 81
26248: PUSH
26249: LD_OWVAR 2
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PUSH
26258: LD_INT 21
26260: PUSH
26261: LD_INT 1
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: EMPTY
26269: LIST
26270: LIST
26271: PPUSH
26272: CALL_OW 69
26276: ST_TO_ADDR
// if not tmp then
26277: LD_VAR 0 3
26281: NOT
26282: IFFALSE 26286
// exit ;
26284: GO 26433
// if tmp > 5 then
26286: LD_VAR 0 3
26290: PUSH
26291: LD_INT 5
26293: GREATER
26294: IFFALSE 26306
// k := 5 else
26296: LD_ADDR_VAR 0 2
26300: PUSH
26301: LD_INT 5
26303: ST_TO_ADDR
26304: GO 26316
// k := tmp ;
26306: LD_ADDR_VAR 0 2
26310: PUSH
26311: LD_VAR 0 3
26315: ST_TO_ADDR
// for i := 1 to k do
26316: LD_ADDR_VAR 0 1
26320: PUSH
26321: DOUBLE
26322: LD_INT 1
26324: DEC
26325: ST_TO_ADDR
26326: LD_VAR 0 2
26330: PUSH
26331: FOR_TO
26332: IFFALSE 26431
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26334: LD_VAR 0 3
26338: PUSH
26339: LD_VAR 0 1
26343: ARRAY
26344: PPUSH
26345: LD_VAR 0 1
26349: PUSH
26350: LD_INT 4
26352: MOD
26353: PUSH
26354: LD_INT 1
26356: PLUS
26357: PPUSH
26358: CALL_OW 259
26362: PUSH
26363: LD_INT 10
26365: LESS
26366: IFFALSE 26429
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26368: LD_VAR 0 3
26372: PUSH
26373: LD_VAR 0 1
26377: ARRAY
26378: PPUSH
26379: LD_VAR 0 1
26383: PUSH
26384: LD_INT 4
26386: MOD
26387: PUSH
26388: LD_INT 1
26390: PLUS
26391: PPUSH
26392: LD_VAR 0 3
26396: PUSH
26397: LD_VAR 0 1
26401: ARRAY
26402: PPUSH
26403: LD_VAR 0 1
26407: PUSH
26408: LD_INT 4
26410: MOD
26411: PUSH
26412: LD_INT 1
26414: PLUS
26415: PPUSH
26416: CALL_OW 259
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: PPUSH
26425: CALL_OW 237
26429: GO 26331
26431: POP
26432: POP
// end ;
26433: PPOPN 3
26435: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26436: LD_EXP 90
26440: PUSH
26441: LD_EXP 98
26445: AND
26446: IFFALSE 26466
26448: GO 26450
26450: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26451: LD_INT 4
26453: PPUSH
26454: LD_OWVAR 2
26458: PPUSH
26459: LD_INT 0
26461: PPUSH
26462: CALL_OW 324
26466: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26467: LD_EXP 90
26471: PUSH
26472: LD_EXP 127
26476: AND
26477: IFFALSE 26497
26479: GO 26481
26481: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26482: LD_INT 19
26484: PPUSH
26485: LD_OWVAR 2
26489: PPUSH
26490: LD_INT 0
26492: PPUSH
26493: CALL_OW 324
26497: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26498: LD_EXP 90
26502: PUSH
26503: LD_EXP 99
26507: AND
26508: IFFALSE 26610
26510: GO 26512
26512: DISABLE
26513: LD_INT 0
26515: PPUSH
26516: PPUSH
// begin enable ;
26517: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26518: LD_ADDR_VAR 0 2
26522: PUSH
26523: LD_INT 22
26525: PUSH
26526: LD_OWVAR 2
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 34
26540: PUSH
26541: LD_INT 11
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PUSH
26548: LD_INT 34
26550: PUSH
26551: LD_INT 30
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: ST_TO_ADDR
// if not tmp then
26572: LD_VAR 0 2
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26610
// for i in tmp do
26581: LD_ADDR_VAR 0 1
26585: PUSH
26586: LD_VAR 0 2
26590: PUSH
26591: FOR_IN
26592: IFFALSE 26608
// begin SetLives ( i , 0 ) ;
26594: LD_VAR 0 1
26598: PPUSH
26599: LD_INT 0
26601: PPUSH
26602: CALL_OW 234
// end ;
26606: GO 26591
26608: POP
26609: POP
// end ;
26610: PPOPN 2
26612: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26613: LD_EXP 90
26617: PUSH
26618: LD_EXP 100
26622: AND
26623: IFFALSE 26643
26625: GO 26627
26627: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26628: LD_INT 32
26630: PPUSH
26631: LD_OWVAR 2
26635: PPUSH
26636: LD_INT 0
26638: PPUSH
26639: CALL_OW 324
26643: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26644: LD_EXP 90
26648: PUSH
26649: LD_EXP 101
26653: AND
26654: IFFALSE 26835
26656: GO 26658
26658: DISABLE
26659: LD_INT 0
26661: PPUSH
26662: PPUSH
26663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26664: LD_ADDR_VAR 0 2
26668: PUSH
26669: LD_INT 22
26671: PUSH
26672: LD_OWVAR 2
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: PUSH
26681: LD_INT 33
26683: PUSH
26684: LD_INT 3
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PPUSH
26695: CALL_OW 69
26699: ST_TO_ADDR
// if not tmp then
26700: LD_VAR 0 2
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26835
// side := 0 ;
26709: LD_ADDR_VAR 0 3
26713: PUSH
26714: LD_INT 0
26716: ST_TO_ADDR
// for i := 1 to 8 do
26717: LD_ADDR_VAR 0 1
26721: PUSH
26722: DOUBLE
26723: LD_INT 1
26725: DEC
26726: ST_TO_ADDR
26727: LD_INT 8
26729: PUSH
26730: FOR_TO
26731: IFFALSE 26779
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26733: LD_OWVAR 2
26737: PUSH
26738: LD_VAR 0 1
26742: NONEQUAL
26743: PUSH
26744: LD_OWVAR 2
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 81
26758: PUSH
26759: LD_INT 2
26761: EQUAL
26762: AND
26763: IFFALSE 26777
// begin side := i ;
26765: LD_ADDR_VAR 0 3
26769: PUSH
26770: LD_VAR 0 1
26774: ST_TO_ADDR
// break ;
26775: GO 26779
// end ;
26777: GO 26730
26779: POP
26780: POP
// if not side then
26781: LD_VAR 0 3
26785: NOT
26786: IFFALSE 26790
// exit ;
26788: GO 26835
// for i := 1 to tmp do
26790: LD_ADDR_VAR 0 1
26794: PUSH
26795: DOUBLE
26796: LD_INT 1
26798: DEC
26799: ST_TO_ADDR
26800: LD_VAR 0 2
26804: PUSH
26805: FOR_TO
26806: IFFALSE 26833
// if Prob ( 60 ) then
26808: LD_INT 60
26810: PPUSH
26811: CALL_OW 13
26815: IFFALSE 26831
// SetSide ( i , side ) ;
26817: LD_VAR 0 1
26821: PPUSH
26822: LD_VAR 0 3
26826: PPUSH
26827: CALL_OW 235
26831: GO 26805
26833: POP
26834: POP
// end ;
26835: PPOPN 3
26837: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26838: LD_EXP 90
26842: PUSH
26843: LD_EXP 103
26847: AND
26848: IFFALSE 26967
26850: GO 26852
26852: DISABLE
26853: LD_INT 0
26855: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 22
26863: PUSH
26864: LD_OWVAR 2
26868: PUSH
26869: EMPTY
26870: LIST
26871: LIST
26872: PUSH
26873: LD_INT 21
26875: PUSH
26876: LD_INT 1
26878: PUSH
26879: EMPTY
26880: LIST
26881: LIST
26882: PUSH
26883: LD_INT 3
26885: PUSH
26886: LD_INT 23
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: LIST
26904: PPUSH
26905: CALL_OW 69
26909: PUSH
26910: FOR_IN
26911: IFFALSE 26965
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 257
26922: PUSH
26923: LD_INT 1
26925: PUSH
26926: LD_INT 2
26928: PUSH
26929: LD_INT 3
26931: PUSH
26932: LD_INT 4
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: IN
26941: IFFALSE 26963
// SetClass ( un , rand ( 1 , 4 ) ) ;
26943: LD_VAR 0 1
26947: PPUSH
26948: LD_INT 1
26950: PPUSH
26951: LD_INT 4
26953: PPUSH
26954: CALL_OW 12
26958: PPUSH
26959: CALL_OW 336
26963: GO 26910
26965: POP
26966: POP
// end ;
26967: PPOPN 1
26969: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26970: LD_EXP 90
26974: PUSH
26975: LD_EXP 102
26979: AND
26980: IFFALSE 27059
26982: GO 26984
26984: DISABLE
26985: LD_INT 0
26987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26988: LD_ADDR_VAR 0 1
26992: PUSH
26993: LD_INT 22
26995: PUSH
26996: LD_OWVAR 2
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 21
27007: PUSH
27008: LD_INT 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PPUSH
27019: CALL_OW 69
27023: ST_TO_ADDR
// if not tmp then
27024: LD_VAR 0 1
27028: NOT
27029: IFFALSE 27033
// exit ;
27031: GO 27059
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27033: LD_VAR 0 1
27037: PUSH
27038: LD_INT 1
27040: PPUSH
27041: LD_VAR 0 1
27045: PPUSH
27046: CALL_OW 12
27050: ARRAY
27051: PPUSH
27052: LD_INT 100
27054: PPUSH
27055: CALL_OW 234
// end ;
27059: PPOPN 1
27061: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27062: LD_EXP 90
27066: PUSH
27067: LD_EXP 104
27071: AND
27072: IFFALSE 27170
27074: GO 27076
27076: DISABLE
27077: LD_INT 0
27079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: LD_INT 22
27087: PUSH
27088: LD_OWVAR 2
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: LD_INT 21
27099: PUSH
27100: LD_INT 1
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: PUSH
27107: EMPTY
27108: LIST
27109: LIST
27110: PPUSH
27111: CALL_OW 69
27115: ST_TO_ADDR
// if not tmp then
27116: LD_VAR 0 1
27120: NOT
27121: IFFALSE 27125
// exit ;
27123: GO 27170
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27125: LD_VAR 0 1
27129: PUSH
27130: LD_INT 1
27132: PPUSH
27133: LD_VAR 0 1
27137: PPUSH
27138: CALL_OW 12
27142: ARRAY
27143: PPUSH
27144: LD_INT 1
27146: PPUSH
27147: LD_INT 4
27149: PPUSH
27150: CALL_OW 12
27154: PPUSH
27155: LD_INT 3000
27157: PPUSH
27158: LD_INT 9000
27160: PPUSH
27161: CALL_OW 12
27165: PPUSH
27166: CALL_OW 492
// end ;
27170: PPOPN 1
27172: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27173: LD_EXP 90
27177: PUSH
27178: LD_EXP 105
27182: AND
27183: IFFALSE 27203
27185: GO 27187
27187: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27188: LD_INT 1
27190: PPUSH
27191: LD_OWVAR 2
27195: PPUSH
27196: LD_INT 0
27198: PPUSH
27199: CALL_OW 324
27203: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27204: LD_EXP 90
27208: PUSH
27209: LD_EXP 106
27213: AND
27214: IFFALSE 27297
27216: GO 27218
27218: DISABLE
27219: LD_INT 0
27221: PPUSH
27222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27223: LD_ADDR_VAR 0 2
27227: PUSH
27228: LD_INT 22
27230: PUSH
27231: LD_OWVAR 2
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: LD_INT 21
27242: PUSH
27243: LD_INT 3
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PPUSH
27254: CALL_OW 69
27258: ST_TO_ADDR
// if not tmp then
27259: LD_VAR 0 2
27263: NOT
27264: IFFALSE 27268
// exit ;
27266: GO 27297
// for i in tmp do
27268: LD_ADDR_VAR 0 1
27272: PUSH
27273: LD_VAR 0 2
27277: PUSH
27278: FOR_IN
27279: IFFALSE 27295
// SetBLevel ( i , 10 ) ;
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_INT 10
27288: PPUSH
27289: CALL_OW 241
27293: GO 27278
27295: POP
27296: POP
// end ;
27297: PPOPN 2
27299: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27300: LD_EXP 90
27304: PUSH
27305: LD_EXP 107
27309: AND
27310: IFFALSE 27421
27312: GO 27314
27314: DISABLE
27315: LD_INT 0
27317: PPUSH
27318: PPUSH
27319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_INT 22
27327: PUSH
27328: LD_OWVAR 2
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: PUSH
27337: LD_INT 25
27339: PUSH
27340: LD_INT 1
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PPUSH
27351: CALL_OW 69
27355: ST_TO_ADDR
// if not tmp then
27356: LD_VAR 0 3
27360: NOT
27361: IFFALSE 27365
// exit ;
27363: GO 27421
// un := tmp [ rand ( 1 , tmp ) ] ;
27365: LD_ADDR_VAR 0 2
27369: PUSH
27370: LD_VAR 0 3
27374: PUSH
27375: LD_INT 1
27377: PPUSH
27378: LD_VAR 0 3
27382: PPUSH
27383: CALL_OW 12
27387: ARRAY
27388: ST_TO_ADDR
// if Crawls ( un ) then
27389: LD_VAR 0 2
27393: PPUSH
27394: CALL_OW 318
27398: IFFALSE 27409
// ComWalk ( un ) ;
27400: LD_VAR 0 2
27404: PPUSH
27405: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_INT 5
27416: PPUSH
27417: CALL_OW 336
// end ;
27421: PPOPN 3
27423: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
27424: LD_EXP 90
27428: PUSH
27429: LD_EXP 108
27433: AND
27434: PUSH
27435: LD_OWVAR 67
27439: PUSH
27440: LD_INT 3
27442: LESS
27443: AND
27444: IFFALSE 27463
27446: GO 27448
27448: DISABLE
// Difficulty := Difficulty + 1 ;
27449: LD_ADDR_OWVAR 67
27453: PUSH
27454: LD_OWVAR 67
27458: PUSH
27459: LD_INT 1
27461: PLUS
27462: ST_TO_ADDR
27463: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27464: LD_EXP 90
27468: PUSH
27469: LD_EXP 109
27473: AND
27474: IFFALSE 27577
27476: GO 27478
27478: DISABLE
27479: LD_INT 0
27481: PPUSH
// begin for i := 1 to 5 do
27482: LD_ADDR_VAR 0 1
27486: PUSH
27487: DOUBLE
27488: LD_INT 1
27490: DEC
27491: ST_TO_ADDR
27492: LD_INT 5
27494: PUSH
27495: FOR_TO
27496: IFFALSE 27575
// begin uc_nation := nation_nature ;
27498: LD_ADDR_OWVAR 21
27502: PUSH
27503: LD_INT 0
27505: ST_TO_ADDR
// uc_side := 0 ;
27506: LD_ADDR_OWVAR 20
27510: PUSH
27511: LD_INT 0
27513: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27514: LD_ADDR_OWVAR 29
27518: PUSH
27519: LD_INT 12
27521: PUSH
27522: LD_INT 12
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: ST_TO_ADDR
// hc_agressivity := 20 ;
27529: LD_ADDR_OWVAR 35
27533: PUSH
27534: LD_INT 20
27536: ST_TO_ADDR
// hc_class := class_tiger ;
27537: LD_ADDR_OWVAR 28
27541: PUSH
27542: LD_INT 14
27544: ST_TO_ADDR
// hc_gallery :=  ;
27545: LD_ADDR_OWVAR 33
27549: PUSH
27550: LD_STRING 
27552: ST_TO_ADDR
// hc_name :=  ;
27553: LD_ADDR_OWVAR 26
27557: PUSH
27558: LD_STRING 
27560: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27561: CALL_OW 44
27565: PPUSH
27566: LD_INT 0
27568: PPUSH
27569: CALL_OW 51
// end ;
27573: GO 27495
27575: POP
27576: POP
// end ;
27577: PPOPN 1
27579: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27580: LD_EXP 90
27584: PUSH
27585: LD_EXP 110
27589: AND
27590: IFFALSE 27599
27592: GO 27594
27594: DISABLE
// StreamSibBomb ;
27595: CALL 27600 0 0
27599: END
// export function StreamSibBomb ; var i , x , y ; begin
27600: LD_INT 0
27602: PPUSH
27603: PPUSH
27604: PPUSH
27605: PPUSH
// result := false ;
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_INT 0
27613: ST_TO_ADDR
// for i := 1 to 16 do
27614: LD_ADDR_VAR 0 2
27618: PUSH
27619: DOUBLE
27620: LD_INT 1
27622: DEC
27623: ST_TO_ADDR
27624: LD_INT 16
27626: PUSH
27627: FOR_TO
27628: IFFALSE 27827
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27630: LD_ADDR_VAR 0 3
27634: PUSH
27635: LD_INT 10
27637: PUSH
27638: LD_INT 20
27640: PUSH
27641: LD_INT 30
27643: PUSH
27644: LD_INT 40
27646: PUSH
27647: LD_INT 50
27649: PUSH
27650: LD_INT 60
27652: PUSH
27653: LD_INT 70
27655: PUSH
27656: LD_INT 80
27658: PUSH
27659: LD_INT 90
27661: PUSH
27662: LD_INT 100
27664: PUSH
27665: LD_INT 110
27667: PUSH
27668: LD_INT 120
27670: PUSH
27671: LD_INT 130
27673: PUSH
27674: LD_INT 140
27676: PUSH
27677: LD_INT 150
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 1
27699: PPUSH
27700: LD_INT 15
27702: PPUSH
27703: CALL_OW 12
27707: ARRAY
27708: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27709: LD_ADDR_VAR 0 4
27713: PUSH
27714: LD_INT 10
27716: PUSH
27717: LD_INT 20
27719: PUSH
27720: LD_INT 30
27722: PUSH
27723: LD_INT 40
27725: PUSH
27726: LD_INT 50
27728: PUSH
27729: LD_INT 60
27731: PUSH
27732: LD_INT 70
27734: PUSH
27735: LD_INT 80
27737: PUSH
27738: LD_INT 90
27740: PUSH
27741: LD_INT 100
27743: PUSH
27744: LD_INT 110
27746: PUSH
27747: LD_INT 120
27749: PUSH
27750: LD_INT 130
27752: PUSH
27753: LD_INT 140
27755: PUSH
27756: LD_INT 150
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PPUSH
27779: LD_INT 15
27781: PPUSH
27782: CALL_OW 12
27786: ARRAY
27787: ST_TO_ADDR
// if ValidHex ( x , y ) then
27788: LD_VAR 0 3
27792: PPUSH
27793: LD_VAR 0 4
27797: PPUSH
27798: CALL_OW 488
27802: IFFALSE 27825
// begin result := [ x , y ] ;
27804: LD_ADDR_VAR 0 1
27808: PUSH
27809: LD_VAR 0 3
27813: PUSH
27814: LD_VAR 0 4
27818: PUSH
27819: EMPTY
27820: LIST
27821: LIST
27822: ST_TO_ADDR
// break ;
27823: GO 27827
// end ; end ;
27825: GO 27627
27827: POP
27828: POP
// if result then
27829: LD_VAR 0 1
27833: IFFALSE 27893
// begin ToLua ( playSibBomb() ) ;
27835: LD_STRING playSibBomb()
27837: PPUSH
27838: CALL_OW 559
// wait ( 0 0$14 ) ;
27842: LD_INT 490
27844: PPUSH
27845: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27849: LD_VAR 0 1
27853: PUSH
27854: LD_INT 1
27856: ARRAY
27857: PPUSH
27858: LD_VAR 0 1
27862: PUSH
27863: LD_INT 2
27865: ARRAY
27866: PPUSH
27867: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27871: LD_VAR 0 1
27875: PUSH
27876: LD_INT 1
27878: ARRAY
27879: PPUSH
27880: LD_VAR 0 1
27884: PUSH
27885: LD_INT 2
27887: ARRAY
27888: PPUSH
27889: CALL_OW 429
// end ; end ;
27893: LD_VAR 0 1
27897: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27898: LD_EXP 90
27902: PUSH
27903: LD_EXP 112
27907: AND
27908: IFFALSE 27920
27910: GO 27912
27912: DISABLE
// YouLost (  ) ;
27913: LD_STRING 
27915: PPUSH
27916: CALL_OW 104
27920: END
// every 0 0$1 trigger StreamModeActive and sFog do
27921: LD_EXP 90
27925: PUSH
27926: LD_EXP 111
27930: AND
27931: IFFALSE 27945
27933: GO 27935
27935: DISABLE
// FogOff ( your_side ) ;
27936: LD_OWVAR 2
27940: PPUSH
27941: CALL_OW 344
27945: END
// every 0 0$1 trigger StreamModeActive and sSun do
27946: LD_EXP 90
27950: PUSH
27951: LD_EXP 113
27955: AND
27956: IFFALSE 27984
27958: GO 27960
27960: DISABLE
// begin solar_recharge_percent := 0 ;
27961: LD_ADDR_OWVAR 79
27965: PUSH
27966: LD_INT 0
27968: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27969: LD_INT 10500
27971: PPUSH
27972: CALL_OW 67
// solar_recharge_percent := 100 ;
27976: LD_ADDR_OWVAR 79
27980: PUSH
27981: LD_INT 100
27983: ST_TO_ADDR
// end ;
27984: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27985: LD_EXP 90
27989: PUSH
27990: LD_EXP 114
27994: AND
27995: IFFALSE 28234
27997: GO 27999
27999: DISABLE
28000: LD_INT 0
28002: PPUSH
28003: PPUSH
28004: PPUSH
// begin tmp := [ ] ;
28005: LD_ADDR_VAR 0 3
28009: PUSH
28010: EMPTY
28011: ST_TO_ADDR
// for i := 1 to 6 do
28012: LD_ADDR_VAR 0 1
28016: PUSH
28017: DOUBLE
28018: LD_INT 1
28020: DEC
28021: ST_TO_ADDR
28022: LD_INT 6
28024: PUSH
28025: FOR_TO
28026: IFFALSE 28131
// begin uc_nation := nation_nature ;
28028: LD_ADDR_OWVAR 21
28032: PUSH
28033: LD_INT 0
28035: ST_TO_ADDR
// uc_side := 0 ;
28036: LD_ADDR_OWVAR 20
28040: PUSH
28041: LD_INT 0
28043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28044: LD_ADDR_OWVAR 29
28048: PUSH
28049: LD_INT 12
28051: PUSH
28052: LD_INT 12
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: ST_TO_ADDR
// hc_agressivity := 20 ;
28059: LD_ADDR_OWVAR 35
28063: PUSH
28064: LD_INT 20
28066: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28067: LD_ADDR_OWVAR 28
28071: PUSH
28072: LD_INT 17
28074: ST_TO_ADDR
// hc_gallery :=  ;
28075: LD_ADDR_OWVAR 33
28079: PUSH
28080: LD_STRING 
28082: ST_TO_ADDR
// hc_name :=  ;
28083: LD_ADDR_OWVAR 26
28087: PUSH
28088: LD_STRING 
28090: ST_TO_ADDR
// un := CreateHuman ;
28091: LD_ADDR_VAR 0 2
28095: PUSH
28096: CALL_OW 44
28100: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28101: LD_VAR 0 2
28105: PPUSH
28106: LD_INT 1
28108: PPUSH
28109: CALL_OW 51
// tmp := tmp ^ un ;
28113: LD_ADDR_VAR 0 3
28117: PUSH
28118: LD_VAR 0 3
28122: PUSH
28123: LD_VAR 0 2
28127: ADD
28128: ST_TO_ADDR
// end ;
28129: GO 28025
28131: POP
28132: POP
// repeat wait ( 0 0$1 ) ;
28133: LD_INT 35
28135: PPUSH
28136: CALL_OW 67
// for un in tmp do
28140: LD_ADDR_VAR 0 2
28144: PUSH
28145: LD_VAR 0 3
28149: PUSH
28150: FOR_IN
28151: IFFALSE 28225
// begin if IsDead ( un ) then
28153: LD_VAR 0 2
28157: PPUSH
28158: CALL_OW 301
28162: IFFALSE 28182
// begin tmp := tmp diff un ;
28164: LD_ADDR_VAR 0 3
28168: PUSH
28169: LD_VAR 0 3
28173: PUSH
28174: LD_VAR 0 2
28178: DIFF
28179: ST_TO_ADDR
// continue ;
28180: GO 28150
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28182: LD_VAR 0 2
28186: PPUSH
28187: LD_INT 3
28189: PUSH
28190: LD_INT 22
28192: PUSH
28193: LD_INT 0
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: PPUSH
28204: CALL_OW 69
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: CALL_OW 74
28218: PPUSH
28219: CALL_OW 115
// end ;
28223: GO 28150
28225: POP
28226: POP
// until not tmp ;
28227: LD_VAR 0 3
28231: NOT
28232: IFFALSE 28133
// end ;
28234: PPOPN 3
28236: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28237: LD_EXP 90
28241: PUSH
28242: LD_EXP 115
28246: AND
28247: IFFALSE 28301
28249: GO 28251
28251: DISABLE
// begin ToLua ( displayTroll(); ) ;
28252: LD_STRING displayTroll();
28254: PPUSH
28255: CALL_OW 559
// wait ( 3 3$00 ) ;
28259: LD_INT 6300
28261: PPUSH
28262: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28266: LD_STRING hideTroll();
28268: PPUSH
28269: CALL_OW 559
// wait ( 1 1$00 ) ;
28273: LD_INT 2100
28275: PPUSH
28276: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28280: LD_STRING displayTroll();
28282: PPUSH
28283: CALL_OW 559
// wait ( 1 1$00 ) ;
28287: LD_INT 2100
28289: PPUSH
28290: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28294: LD_STRING hideTroll();
28296: PPUSH
28297: CALL_OW 559
// end ;
28301: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28302: LD_EXP 90
28306: PUSH
28307: LD_EXP 116
28311: AND
28312: IFFALSE 28375
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin p := 0 ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 0
28327: ST_TO_ADDR
// repeat game_speed := 1 ;
28328: LD_ADDR_OWVAR 65
28332: PUSH
28333: LD_INT 1
28335: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28336: LD_INT 35
28338: PPUSH
28339: CALL_OW 67
// p := p + 1 ;
28343: LD_ADDR_VAR 0 1
28347: PUSH
28348: LD_VAR 0 1
28352: PUSH
28353: LD_INT 1
28355: PLUS
28356: ST_TO_ADDR
// until p >= 60 ;
28357: LD_VAR 0 1
28361: PUSH
28362: LD_INT 60
28364: GREATEREQUAL
28365: IFFALSE 28328
// game_speed := 4 ;
28367: LD_ADDR_OWVAR 65
28371: PUSH
28372: LD_INT 4
28374: ST_TO_ADDR
// end ;
28375: PPOPN 1
28377: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28378: LD_EXP 90
28382: PUSH
28383: LD_EXP 117
28387: AND
28388: IFFALSE 28534
28390: GO 28392
28392: DISABLE
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28397: LD_ADDR_VAR 0 1
28401: PUSH
28402: LD_INT 22
28404: PUSH
28405: LD_OWVAR 2
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: PUSH
28417: LD_INT 30
28419: PUSH
28420: LD_INT 0
28422: PUSH
28423: EMPTY
28424: LIST
28425: LIST
28426: PUSH
28427: LD_INT 30
28429: PUSH
28430: LD_INT 1
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: EMPTY
28438: LIST
28439: LIST
28440: LIST
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PPUSH
28446: CALL_OW 69
28450: ST_TO_ADDR
// if not depot then
28451: LD_VAR 0 1
28455: NOT
28456: IFFALSE 28460
// exit ;
28458: GO 28534
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28460: LD_ADDR_VAR 0 2
28464: PUSH
28465: LD_VAR 0 1
28469: PUSH
28470: LD_INT 1
28472: PPUSH
28473: LD_VAR 0 1
28477: PPUSH
28478: CALL_OW 12
28482: ARRAY
28483: PPUSH
28484: CALL_OW 274
28488: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: LD_INT 0
28499: PPUSH
28500: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_INT 2
28511: PPUSH
28512: LD_INT 0
28514: PPUSH
28515: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_INT 3
28526: PPUSH
28527: LD_INT 0
28529: PPUSH
28530: CALL_OW 277
// end ;
28534: PPOPN 2
28536: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28537: LD_EXP 90
28541: PUSH
28542: LD_EXP 118
28546: AND
28547: IFFALSE 28644
28549: GO 28551
28551: DISABLE
28552: LD_INT 0
28554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28555: LD_ADDR_VAR 0 1
28559: PUSH
28560: LD_INT 22
28562: PUSH
28563: LD_OWVAR 2
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 21
28574: PUSH
28575: LD_INT 1
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 3
28584: PUSH
28585: LD_INT 23
28587: PUSH
28588: LD_INT 0
28590: PUSH
28591: EMPTY
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: LIST
28603: PPUSH
28604: CALL_OW 69
28608: ST_TO_ADDR
// if not tmp then
28609: LD_VAR 0 1
28613: NOT
28614: IFFALSE 28618
// exit ;
28616: GO 28644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28618: LD_VAR 0 1
28622: PUSH
28623: LD_INT 1
28625: PPUSH
28626: LD_VAR 0 1
28630: PPUSH
28631: CALL_OW 12
28635: ARRAY
28636: PPUSH
28637: LD_INT 200
28639: PPUSH
28640: CALL_OW 234
// end ;
28644: PPOPN 1
28646: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28647: LD_EXP 90
28651: PUSH
28652: LD_EXP 119
28656: AND
28657: IFFALSE 28736
28659: GO 28661
28661: DISABLE
28662: LD_INT 0
28664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28665: LD_ADDR_VAR 0 1
28669: PUSH
28670: LD_INT 22
28672: PUSH
28673: LD_OWVAR 2
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 21
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PPUSH
28696: CALL_OW 69
28700: ST_TO_ADDR
// if not tmp then
28701: LD_VAR 0 1
28705: NOT
28706: IFFALSE 28710
// exit ;
28708: GO 28736
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28710: LD_VAR 0 1
28714: PUSH
28715: LD_INT 1
28717: PPUSH
28718: LD_VAR 0 1
28722: PPUSH
28723: CALL_OW 12
28727: ARRAY
28728: PPUSH
28729: LD_INT 60
28731: PPUSH
28732: CALL_OW 234
// end ;
28736: PPOPN 1
28738: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28739: LD_EXP 90
28743: PUSH
28744: LD_EXP 120
28748: AND
28749: IFFALSE 28848
28751: GO 28753
28753: DISABLE
28754: LD_INT 0
28756: PPUSH
28757: PPUSH
// begin enable ;
28758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28759: LD_ADDR_VAR 0 1
28763: PUSH
28764: LD_INT 22
28766: PUSH
28767: LD_OWVAR 2
28771: PUSH
28772: EMPTY
28773: LIST
28774: LIST
28775: PUSH
28776: LD_INT 61
28778: PUSH
28779: EMPTY
28780: LIST
28781: PUSH
28782: LD_INT 33
28784: PUSH
28785: LD_INT 2
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 1
28806: NOT
28807: IFFALSE 28811
// exit ;
28809: GO 28848
// for i in tmp do
28811: LD_ADDR_VAR 0 2
28815: PUSH
28816: LD_VAR 0 1
28820: PUSH
28821: FOR_IN
28822: IFFALSE 28846
// if IsControledBy ( i ) then
28824: LD_VAR 0 2
28828: PPUSH
28829: CALL_OW 312
28833: IFFALSE 28844
// ComUnlink ( i ) ;
28835: LD_VAR 0 2
28839: PPUSH
28840: CALL_OW 136
28844: GO 28821
28846: POP
28847: POP
// end ;
28848: PPOPN 2
28850: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28851: LD_EXP 90
28855: PUSH
28856: LD_EXP 121
28860: AND
28861: IFFALSE 29001
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
// begin ToLua ( displayPowell(); ) ;
28870: LD_STRING displayPowell();
28872: PPUSH
28873: CALL_OW 559
// uc_side := 0 ;
28877: LD_ADDR_OWVAR 20
28881: PUSH
28882: LD_INT 0
28884: ST_TO_ADDR
// uc_nation := 2 ;
28885: LD_ADDR_OWVAR 21
28889: PUSH
28890: LD_INT 2
28892: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28893: LD_ADDR_OWVAR 37
28897: PUSH
28898: LD_INT 14
28900: ST_TO_ADDR
// vc_engine := engine_siberite ;
28901: LD_ADDR_OWVAR 39
28905: PUSH
28906: LD_INT 3
28908: ST_TO_ADDR
// vc_control := control_apeman ;
28909: LD_ADDR_OWVAR 38
28913: PUSH
28914: LD_INT 5
28916: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28917: LD_ADDR_OWVAR 40
28921: PUSH
28922: LD_INT 29
28924: ST_TO_ADDR
// un := CreateVehicle ;
28925: LD_ADDR_VAR 0 2
28929: PUSH
28930: CALL_OW 45
28934: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28935: LD_VAR 0 2
28939: PPUSH
28940: LD_INT 1
28942: PPUSH
28943: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28947: LD_INT 35
28949: PPUSH
28950: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28954: LD_VAR 0 2
28958: PPUSH
28959: LD_INT 22
28961: PUSH
28962: LD_OWVAR 2
28966: PUSH
28967: EMPTY
28968: LIST
28969: LIST
28970: PPUSH
28971: CALL_OW 69
28975: PPUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL_OW 74
28985: PPUSH
28986: CALL_OW 115
// until IsDead ( un ) ;
28990: LD_VAR 0 2
28994: PPUSH
28995: CALL_OW 301
28999: IFFALSE 28947
// end ;
29001: PPOPN 2
29003: END
// every 0 0$1 trigger StreamModeActive and sStu do
29004: LD_EXP 90
29008: PUSH
29009: LD_EXP 129
29013: AND
29014: IFFALSE 29030
29016: GO 29018
29018: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29019: LD_STRING displayStucuk();
29021: PPUSH
29022: CALL_OW 559
// ResetFog ;
29026: CALL_OW 335
// end ;
29030: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29031: LD_EXP 90
29035: PUSH
29036: LD_EXP 122
29040: AND
29041: IFFALSE 29182
29043: GO 29045
29045: DISABLE
29046: LD_INT 0
29048: PPUSH
29049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29050: LD_ADDR_VAR 0 2
29054: PUSH
29055: LD_INT 22
29057: PUSH
29058: LD_OWVAR 2
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 21
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 69
29085: ST_TO_ADDR
// if not tmp then
29086: LD_VAR 0 2
29090: NOT
29091: IFFALSE 29095
// exit ;
29093: GO 29182
// un := tmp [ rand ( 1 , tmp ) ] ;
29095: LD_ADDR_VAR 0 1
29099: PUSH
29100: LD_VAR 0 2
29104: PUSH
29105: LD_INT 1
29107: PPUSH
29108: LD_VAR 0 2
29112: PPUSH
29113: CALL_OW 12
29117: ARRAY
29118: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29119: LD_VAR 0 1
29123: PPUSH
29124: LD_INT 0
29126: PPUSH
29127: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29131: LD_VAR 0 1
29135: PPUSH
29136: LD_OWVAR 3
29140: PUSH
29141: LD_VAR 0 1
29145: DIFF
29146: PPUSH
29147: LD_VAR 0 1
29151: PPUSH
29152: CALL_OW 74
29156: PPUSH
29157: CALL_OW 115
// wait ( 0 0$20 ) ;
29161: LD_INT 700
29163: PPUSH
29164: CALL_OW 67
// SetSide ( un , your_side ) ;
29168: LD_VAR 0 1
29172: PPUSH
29173: LD_OWVAR 2
29177: PPUSH
29178: CALL_OW 235
// end ;
29182: PPOPN 2
29184: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29185: LD_EXP 90
29189: PUSH
29190: LD_EXP 123
29194: AND
29195: IFFALSE 29301
29197: GO 29199
29199: DISABLE
29200: LD_INT 0
29202: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29203: LD_ADDR_VAR 0 1
29207: PUSH
29208: LD_INT 22
29210: PUSH
29211: LD_OWVAR 2
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: PUSH
29220: LD_INT 2
29222: PUSH
29223: LD_INT 30
29225: PUSH
29226: LD_INT 0
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PUSH
29233: LD_INT 30
29235: PUSH
29236: LD_INT 1
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PUSH
29243: EMPTY
29244: LIST
29245: LIST
29246: LIST
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PPUSH
29252: CALL_OW 69
29256: ST_TO_ADDR
// if not depot then
29257: LD_VAR 0 1
29261: NOT
29262: IFFALSE 29266
// exit ;
29264: GO 29301
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29266: LD_VAR 0 1
29270: PUSH
29271: LD_INT 1
29273: ARRAY
29274: PPUSH
29275: CALL_OW 250
29279: PPUSH
29280: LD_VAR 0 1
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: CALL_OW 251
29293: PPUSH
29294: LD_INT 70
29296: PPUSH
29297: CALL_OW 495
// end ;
29301: PPOPN 1
29303: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29304: LD_EXP 90
29308: PUSH
29309: LD_EXP 124
29313: AND
29314: IFFALSE 29525
29316: GO 29318
29318: DISABLE
29319: LD_INT 0
29321: PPUSH
29322: PPUSH
29323: PPUSH
29324: PPUSH
29325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29326: LD_ADDR_VAR 0 5
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_OWVAR 2
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: LIST
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 69
29361: ST_TO_ADDR
// if not tmp then
29362: LD_VAR 0 5
29366: NOT
29367: IFFALSE 29371
// exit ;
29369: GO 29525
// for i in tmp do
29371: LD_ADDR_VAR 0 1
29375: PUSH
29376: LD_VAR 0 5
29380: PUSH
29381: FOR_IN
29382: IFFALSE 29523
// begin d := rand ( 0 , 5 ) ;
29384: LD_ADDR_VAR 0 4
29388: PUSH
29389: LD_INT 0
29391: PPUSH
29392: LD_INT 5
29394: PPUSH
29395: CALL_OW 12
29399: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29400: LD_ADDR_VAR 0 2
29404: PUSH
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL_OW 250
29414: PPUSH
29415: LD_VAR 0 4
29419: PPUSH
29420: LD_INT 3
29422: PPUSH
29423: LD_INT 12
29425: PPUSH
29426: CALL_OW 12
29430: PPUSH
29431: CALL_OW 272
29435: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29436: LD_ADDR_VAR 0 3
29440: PUSH
29441: LD_VAR 0 1
29445: PPUSH
29446: CALL_OW 251
29450: PPUSH
29451: LD_VAR 0 4
29455: PPUSH
29456: LD_INT 3
29458: PPUSH
29459: LD_INT 12
29461: PPUSH
29462: CALL_OW 12
29466: PPUSH
29467: CALL_OW 273
29471: ST_TO_ADDR
// if ValidHex ( x , y ) then
29472: LD_VAR 0 2
29476: PPUSH
29477: LD_VAR 0 3
29481: PPUSH
29482: CALL_OW 488
29486: IFFALSE 29521
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_VAR 0 2
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: LD_INT 3
29505: PPUSH
29506: LD_INT 6
29508: PPUSH
29509: CALL_OW 12
29513: PPUSH
29514: LD_INT 1
29516: PPUSH
29517: CALL_OW 483
// end ;
29521: GO 29381
29523: POP
29524: POP
// end ;
29525: PPOPN 5
29527: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29528: LD_EXP 90
29532: PUSH
29533: LD_EXP 125
29537: AND
29538: IFFALSE 29632
29540: GO 29542
29542: DISABLE
29543: LD_INT 0
29545: PPUSH
29546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29547: LD_ADDR_VAR 0 2
29551: PUSH
29552: LD_INT 22
29554: PUSH
29555: LD_OWVAR 2
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 32
29566: PUSH
29567: LD_INT 1
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 21
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: PPUSH
29589: CALL_OW 69
29593: ST_TO_ADDR
// if not tmp then
29594: LD_VAR 0 2
29598: NOT
29599: IFFALSE 29603
// exit ;
29601: GO 29632
// for i in tmp do
29603: LD_ADDR_VAR 0 1
29607: PUSH
29608: LD_VAR 0 2
29612: PUSH
29613: FOR_IN
29614: IFFALSE 29630
// SetFuel ( i , 0 ) ;
29616: LD_VAR 0 1
29620: PPUSH
29621: LD_INT 0
29623: PPUSH
29624: CALL_OW 240
29628: GO 29613
29630: POP
29631: POP
// end ;
29632: PPOPN 2
29634: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29635: LD_EXP 90
29639: PUSH
29640: LD_EXP 126
29644: AND
29645: IFFALSE 29711
29647: GO 29649
29649: DISABLE
29650: LD_INT 0
29652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29653: LD_ADDR_VAR 0 1
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 30
29672: PUSH
29673: LD_INT 29
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: PPUSH
29684: CALL_OW 69
29688: ST_TO_ADDR
// if not tmp then
29689: LD_VAR 0 1
29693: NOT
29694: IFFALSE 29698
// exit ;
29696: GO 29711
// DestroyUnit ( tmp [ 1 ] ) ;
29698: LD_VAR 0 1
29702: PUSH
29703: LD_INT 1
29705: ARRAY
29706: PPUSH
29707: CALL_OW 65
// end ;
29711: PPOPN 1
29713: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29714: LD_EXP 90
29718: PUSH
29719: LD_EXP 128
29723: AND
29724: IFFALSE 29853
29726: GO 29728
29728: DISABLE
29729: LD_INT 0
29731: PPUSH
// begin uc_side := 0 ;
29732: LD_ADDR_OWVAR 20
29736: PUSH
29737: LD_INT 0
29739: ST_TO_ADDR
// uc_nation := nation_arabian ;
29740: LD_ADDR_OWVAR 21
29744: PUSH
29745: LD_INT 2
29747: ST_TO_ADDR
// hc_gallery :=  ;
29748: LD_ADDR_OWVAR 33
29752: PUSH
29753: LD_STRING 
29755: ST_TO_ADDR
// hc_name :=  ;
29756: LD_ADDR_OWVAR 26
29760: PUSH
29761: LD_STRING 
29763: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 11
29769: PPUSH
29770: LD_INT 10
29772: PPUSH
29773: CALL_OW 380
// un := CreateHuman ;
29777: LD_ADDR_VAR 0 1
29781: PUSH
29782: CALL_OW 44
29786: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29787: LD_VAR 0 1
29791: PPUSH
29792: LD_INT 1
29794: PPUSH
29795: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29799: LD_INT 35
29801: PPUSH
29802: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29806: LD_VAR 0 1
29810: PPUSH
29811: LD_INT 22
29813: PUSH
29814: LD_OWVAR 2
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PPUSH
29823: CALL_OW 69
29827: PPUSH
29828: LD_VAR 0 1
29832: PPUSH
29833: CALL_OW 74
29837: PPUSH
29838: CALL_OW 115
// until IsDead ( un ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: CALL_OW 301
29851: IFFALSE 29799
// end ;
29853: PPOPN 1
29855: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29856: LD_EXP 90
29860: PUSH
29861: LD_EXP 130
29865: AND
29866: IFFALSE 29878
29868: GO 29870
29870: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29871: LD_STRING earthquake(getX(game), 0, 32)
29873: PPUSH
29874: CALL_OW 559
29878: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29879: LD_EXP 90
29883: PUSH
29884: LD_EXP 131
29888: AND
29889: IFFALSE 29980
29891: GO 29893
29893: DISABLE
29894: LD_INT 0
29896: PPUSH
// begin enable ;
29897: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29898: LD_ADDR_VAR 0 1
29902: PUSH
29903: LD_INT 22
29905: PUSH
29906: LD_OWVAR 2
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: LD_INT 21
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: EMPTY
29922: LIST
29923: LIST
29924: PUSH
29925: LD_INT 33
29927: PUSH
29928: LD_INT 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: LIST
29939: PPUSH
29940: CALL_OW 69
29944: ST_TO_ADDR
// if not tmp then
29945: LD_VAR 0 1
29949: NOT
29950: IFFALSE 29954
// exit ;
29952: GO 29980
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29954: LD_VAR 0 1
29958: PUSH
29959: LD_INT 1
29961: PPUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: CALL_OW 12
29971: ARRAY
29972: PPUSH
29973: LD_INT 1
29975: PPUSH
29976: CALL_OW 234
// end ;
29980: PPOPN 1
29982: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29983: LD_EXP 90
29987: PUSH
29988: LD_EXP 132
29992: AND
29993: IFFALSE 30134
29995: GO 29997
29997: DISABLE
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
30002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: LD_INT 22
30010: PUSH
30011: LD_OWVAR 2
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 25
30022: PUSH
30023: LD_INT 1
30025: PUSH
30026: EMPTY
30027: LIST
30028: LIST
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 69
30038: ST_TO_ADDR
// if not tmp then
30039: LD_VAR 0 3
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30134
// un := tmp [ rand ( 1 , tmp ) ] ;
30048: LD_ADDR_VAR 0 2
30052: PUSH
30053: LD_VAR 0 3
30057: PUSH
30058: LD_INT 1
30060: PPUSH
30061: LD_VAR 0 3
30065: PPUSH
30066: CALL_OW 12
30070: ARRAY
30071: ST_TO_ADDR
// if Crawls ( un ) then
30072: LD_VAR 0 2
30076: PPUSH
30077: CALL_OW 318
30081: IFFALSE 30092
// ComWalk ( un ) ;
30083: LD_VAR 0 2
30087: PPUSH
30088: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30092: LD_VAR 0 2
30096: PPUSH
30097: LD_INT 9
30099: PPUSH
30100: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30104: LD_INT 28
30106: PPUSH
30107: LD_OWVAR 2
30111: PPUSH
30112: LD_INT 2
30114: PPUSH
30115: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30119: LD_INT 29
30121: PPUSH
30122: LD_OWVAR 2
30126: PPUSH
30127: LD_INT 2
30129: PPUSH
30130: CALL_OW 322
// end ;
30134: PPOPN 3
30136: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30137: LD_EXP 90
30141: PUSH
30142: LD_EXP 133
30146: AND
30147: IFFALSE 30258
30149: GO 30151
30151: DISABLE
30152: LD_INT 0
30154: PPUSH
30155: PPUSH
30156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30157: LD_ADDR_VAR 0 3
30161: PUSH
30162: LD_INT 22
30164: PUSH
30165: LD_OWVAR 2
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 25
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PPUSH
30188: CALL_OW 69
30192: ST_TO_ADDR
// if not tmp then
30193: LD_VAR 0 3
30197: NOT
30198: IFFALSE 30202
// exit ;
30200: GO 30258
// un := tmp [ rand ( 1 , tmp ) ] ;
30202: LD_ADDR_VAR 0 2
30206: PUSH
30207: LD_VAR 0 3
30211: PUSH
30212: LD_INT 1
30214: PPUSH
30215: LD_VAR 0 3
30219: PPUSH
30220: CALL_OW 12
30224: ARRAY
30225: ST_TO_ADDR
// if Crawls ( un ) then
30226: LD_VAR 0 2
30230: PPUSH
30231: CALL_OW 318
30235: IFFALSE 30246
// ComWalk ( un ) ;
30237: LD_VAR 0 2
30241: PPUSH
30242: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_INT 8
30253: PPUSH
30254: CALL_OW 336
// end ;
30258: PPOPN 3
30260: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30261: LD_EXP 90
30265: PUSH
30266: LD_EXP 134
30270: AND
30271: IFFALSE 30415
30273: GO 30275
30275: DISABLE
30276: LD_INT 0
30278: PPUSH
30279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30280: LD_ADDR_VAR 0 2
30284: PUSH
30285: LD_INT 22
30287: PUSH
30288: LD_OWVAR 2
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: PUSH
30297: LD_INT 21
30299: PUSH
30300: LD_INT 2
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 34
30312: PUSH
30313: LD_INT 12
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 34
30322: PUSH
30323: LD_INT 51
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 34
30332: PUSH
30333: LD_INT 32
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: LIST
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: LIST
30350: PPUSH
30351: CALL_OW 69
30355: ST_TO_ADDR
// if not tmp then
30356: LD_VAR 0 2
30360: NOT
30361: IFFALSE 30365
// exit ;
30363: GO 30415
// for i in tmp do
30365: LD_ADDR_VAR 0 1
30369: PUSH
30370: LD_VAR 0 2
30374: PUSH
30375: FOR_IN
30376: IFFALSE 30413
// if GetCargo ( i , mat_artifact ) = 0 then
30378: LD_VAR 0 1
30382: PPUSH
30383: LD_INT 4
30385: PPUSH
30386: CALL_OW 289
30390: PUSH
30391: LD_INT 0
30393: EQUAL
30394: IFFALSE 30411
// SetCargo ( i , mat_siberit , 100 ) ;
30396: LD_VAR 0 1
30400: PPUSH
30401: LD_INT 3
30403: PPUSH
30404: LD_INT 100
30406: PPUSH
30407: CALL_OW 290
30411: GO 30375
30413: POP
30414: POP
// end ;
30415: PPOPN 2
30417: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30418: LD_EXP 90
30422: PUSH
30423: LD_EXP 135
30427: AND
30428: IFFALSE 30611
30430: GO 30432
30432: DISABLE
30433: LD_INT 0
30435: PPUSH
30436: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30437: LD_ADDR_VAR 0 2
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_OWVAR 2
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PPUSH
30454: CALL_OW 69
30458: ST_TO_ADDR
// if not tmp then
30459: LD_VAR 0 2
30463: NOT
30464: IFFALSE 30468
// exit ;
30466: GO 30611
// for i := 1 to 2 do
30468: LD_ADDR_VAR 0 1
30472: PUSH
30473: DOUBLE
30474: LD_INT 1
30476: DEC
30477: ST_TO_ADDR
30478: LD_INT 2
30480: PUSH
30481: FOR_TO
30482: IFFALSE 30609
// begin uc_side := your_side ;
30484: LD_ADDR_OWVAR 20
30488: PUSH
30489: LD_OWVAR 2
30493: ST_TO_ADDR
// uc_nation := nation_american ;
30494: LD_ADDR_OWVAR 21
30498: PUSH
30499: LD_INT 1
30501: ST_TO_ADDR
// vc_chassis := us_morphling ;
30502: LD_ADDR_OWVAR 37
30506: PUSH
30507: LD_INT 5
30509: ST_TO_ADDR
// vc_engine := engine_siberite ;
30510: LD_ADDR_OWVAR 39
30514: PUSH
30515: LD_INT 3
30517: ST_TO_ADDR
// vc_control := control_computer ;
30518: LD_ADDR_OWVAR 38
30522: PUSH
30523: LD_INT 3
30525: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30526: LD_ADDR_OWVAR 40
30530: PUSH
30531: LD_INT 10
30533: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30534: LD_VAR 0 2
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PPUSH
30543: CALL_OW 310
30547: NOT
30548: IFFALSE 30595
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30550: CALL_OW 45
30554: PPUSH
30555: LD_VAR 0 2
30559: PUSH
30560: LD_INT 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 250
30568: PPUSH
30569: LD_VAR 0 2
30573: PUSH
30574: LD_INT 1
30576: ARRAY
30577: PPUSH
30578: CALL_OW 251
30582: PPUSH
30583: LD_INT 12
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 50
30593: GO 30607
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30595: CALL_OW 45
30599: PPUSH
30600: LD_INT 1
30602: PPUSH
30603: CALL_OW 51
// end ;
30607: GO 30481
30609: POP
30610: POP
// end ;
30611: PPOPN 2
30613: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30614: LD_EXP 90
30618: PUSH
30619: LD_EXP 136
30623: AND
30624: IFFALSE 30846
30626: GO 30628
30628: DISABLE
30629: LD_INT 0
30631: PPUSH
30632: PPUSH
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30637: LD_ADDR_VAR 0 6
30641: PUSH
30642: LD_INT 22
30644: PUSH
30645: LD_OWVAR 2
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: PUSH
30654: LD_INT 21
30656: PUSH
30657: LD_INT 1
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 3
30666: PUSH
30667: LD_INT 23
30669: PUSH
30670: LD_INT 0
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: LIST
30685: PPUSH
30686: CALL_OW 69
30690: ST_TO_ADDR
// if not tmp then
30691: LD_VAR 0 6
30695: NOT
30696: IFFALSE 30700
// exit ;
30698: GO 30846
// s1 := rand ( 1 , 4 ) ;
30700: LD_ADDR_VAR 0 2
30704: PUSH
30705: LD_INT 1
30707: PPUSH
30708: LD_INT 4
30710: PPUSH
30711: CALL_OW 12
30715: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_VAR 0 6
30725: PUSH
30726: LD_INT 1
30728: ARRAY
30729: PPUSH
30730: LD_VAR 0 2
30734: PPUSH
30735: CALL_OW 259
30739: ST_TO_ADDR
// if s1 = 1 then
30740: LD_VAR 0 2
30744: PUSH
30745: LD_INT 1
30747: EQUAL
30748: IFFALSE 30768
// s2 := rand ( 2 , 4 ) else
30750: LD_ADDR_VAR 0 3
30754: PUSH
30755: LD_INT 2
30757: PPUSH
30758: LD_INT 4
30760: PPUSH
30761: CALL_OW 12
30765: ST_TO_ADDR
30766: GO 30776
// s2 := 1 ;
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_INT 1
30775: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30776: LD_ADDR_VAR 0 5
30780: PUSH
30781: LD_VAR 0 6
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: LD_VAR 0 3
30794: PPUSH
30795: CALL_OW 259
30799: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30800: LD_VAR 0 6
30804: PUSH
30805: LD_INT 1
30807: ARRAY
30808: PPUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: LD_VAR 0 5
30818: PPUSH
30819: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30823: LD_VAR 0 6
30827: PUSH
30828: LD_INT 1
30830: ARRAY
30831: PPUSH
30832: LD_VAR 0 3
30836: PPUSH
30837: LD_VAR 0 4
30841: PPUSH
30842: CALL_OW 237
// end ;
30846: PPOPN 6
30848: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30849: LD_EXP 90
30853: PUSH
30854: LD_EXP 137
30858: AND
30859: IFFALSE 30938
30861: GO 30863
30863: DISABLE
30864: LD_INT 0
30866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30867: LD_ADDR_VAR 0 1
30871: PUSH
30872: LD_INT 22
30874: PUSH
30875: LD_OWVAR 2
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 69
30902: ST_TO_ADDR
// if not tmp then
30903: LD_VAR 0 1
30907: NOT
30908: IFFALSE 30912
// exit ;
30910: GO 30938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30912: LD_VAR 0 1
30916: PUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_VAR 0 1
30924: PPUSH
30925: CALL_OW 12
30929: ARRAY
30930: PPUSH
30931: LD_INT 1
30933: PPUSH
30934: CALL_OW 234
// end ;
30938: PPOPN 1
30940: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30941: LD_EXP 90
30945: PUSH
30946: LD_EXP 138
30950: AND
30951: IFFALSE 31063
30953: GO 30955
30955: DISABLE
30956: LD_INT 0
30958: PPUSH
30959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30960: LD_ADDR_VAR 0 2
30964: PUSH
30965: LD_INT 22
30967: PUSH
30968: LD_OWVAR 2
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: PUSH
30977: LD_INT 2
30979: PUSH
30980: LD_INT 30
30982: PUSH
30983: LD_INT 27
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 30
30992: PUSH
30993: LD_INT 26
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: LD_INT 30
31002: PUSH
31003: LD_INT 28
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: LIST
31014: LIST
31015: PUSH
31016: EMPTY
31017: LIST
31018: LIST
31019: PPUSH
31020: CALL_OW 69
31024: ST_TO_ADDR
// if not tmp then
31025: LD_VAR 0 2
31029: NOT
31030: IFFALSE 31034
// exit ;
31032: GO 31063
// for i in tmp do
31034: LD_ADDR_VAR 0 1
31038: PUSH
31039: LD_VAR 0 2
31043: PUSH
31044: FOR_IN
31045: IFFALSE 31061
// SetLives ( i , 1 ) ;
31047: LD_VAR 0 1
31051: PPUSH
31052: LD_INT 1
31054: PPUSH
31055: CALL_OW 234
31059: GO 31044
31061: POP
31062: POP
// end ;
31063: PPOPN 2
31065: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31066: LD_EXP 90
31070: PUSH
31071: LD_EXP 139
31075: AND
31076: IFFALSE 31350
31078: GO 31080
31080: DISABLE
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
// begin i := rand ( 1 , 7 ) ;
31086: LD_ADDR_VAR 0 1
31090: PUSH
31091: LD_INT 1
31093: PPUSH
31094: LD_INT 7
31096: PPUSH
31097: CALL_OW 12
31101: ST_TO_ADDR
// case i of 1 :
31102: LD_VAR 0 1
31106: PUSH
31107: LD_INT 1
31109: DOUBLE
31110: EQUAL
31111: IFTRUE 31115
31113: GO 31125
31115: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31116: LD_STRING earthquake(getX(game), 0, 32)
31118: PPUSH
31119: CALL_OW 559
31123: GO 31350
31125: LD_INT 2
31127: DOUBLE
31128: EQUAL
31129: IFTRUE 31133
31131: GO 31147
31133: POP
// begin ToLua ( displayStucuk(); ) ;
31134: LD_STRING displayStucuk();
31136: PPUSH
31137: CALL_OW 559
// ResetFog ;
31141: CALL_OW 335
// end ; 3 :
31145: GO 31350
31147: LD_INT 3
31149: DOUBLE
31150: EQUAL
31151: IFTRUE 31155
31153: GO 31259
31155: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31156: LD_ADDR_VAR 0 2
31160: PUSH
31161: LD_INT 22
31163: PUSH
31164: LD_OWVAR 2
31168: PUSH
31169: EMPTY
31170: LIST
31171: LIST
31172: PUSH
31173: LD_INT 25
31175: PUSH
31176: LD_INT 1
31178: PUSH
31179: EMPTY
31180: LIST
31181: LIST
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PPUSH
31187: CALL_OW 69
31191: ST_TO_ADDR
// if not tmp then
31192: LD_VAR 0 2
31196: NOT
31197: IFFALSE 31201
// exit ;
31199: GO 31350
// un := tmp [ rand ( 1 , tmp ) ] ;
31201: LD_ADDR_VAR 0 3
31205: PUSH
31206: LD_VAR 0 2
31210: PUSH
31211: LD_INT 1
31213: PPUSH
31214: LD_VAR 0 2
31218: PPUSH
31219: CALL_OW 12
31223: ARRAY
31224: ST_TO_ADDR
// if Crawls ( un ) then
31225: LD_VAR 0 3
31229: PPUSH
31230: CALL_OW 318
31234: IFFALSE 31245
// ComWalk ( un ) ;
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31245: LD_VAR 0 3
31249: PPUSH
31250: LD_INT 8
31252: PPUSH
31253: CALL_OW 336
// end ; 4 :
31257: GO 31350
31259: LD_INT 4
31261: DOUBLE
31262: EQUAL
31263: IFTRUE 31267
31265: GO 31328
31267: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31268: LD_ADDR_VAR 0 2
31272: PUSH
31273: LD_INT 22
31275: PUSH
31276: LD_OWVAR 2
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 30
31287: PUSH
31288: LD_INT 29
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PPUSH
31299: CALL_OW 69
31303: ST_TO_ADDR
// if not tmp then
31304: LD_VAR 0 2
31308: NOT
31309: IFFALSE 31313
// exit ;
31311: GO 31350
// DestroyUnit ( tmp [ 1 ] ) ;
31313: LD_VAR 0 2
31317: PUSH
31318: LD_INT 1
31320: ARRAY
31321: PPUSH
31322: CALL_OW 65
// end ; 5 .. 7 :
31326: GO 31350
31328: LD_INT 5
31330: DOUBLE
31331: GREATEREQUAL
31332: IFFALSE 31340
31334: LD_INT 7
31336: DOUBLE
31337: LESSEQUAL
31338: IFTRUE 31342
31340: GO 31349
31342: POP
// StreamSibBomb ; end ;
31343: CALL 27600 0 0
31347: GO 31350
31349: POP
// end ;
31350: PPOPN 3
31352: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31353: LD_EXP 90
31357: PUSH
31358: LD_EXP 140
31362: AND
31363: IFFALSE 31519
31365: GO 31367
31367: DISABLE
31368: LD_INT 0
31370: PPUSH
31371: PPUSH
31372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31373: LD_ADDR_VAR 0 2
31377: PUSH
31378: LD_INT 81
31380: PUSH
31381: LD_OWVAR 2
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 2
31392: PUSH
31393: LD_INT 21
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 21
31405: PUSH
31406: LD_INT 2
31408: PUSH
31409: EMPTY
31410: LIST
31411: LIST
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: LIST
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PPUSH
31422: CALL_OW 69
31426: ST_TO_ADDR
// if not tmp then
31427: LD_VAR 0 2
31431: NOT
31432: IFFALSE 31436
// exit ;
31434: GO 31519
// p := 0 ;
31436: LD_ADDR_VAR 0 3
31440: PUSH
31441: LD_INT 0
31443: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31444: LD_INT 35
31446: PPUSH
31447: CALL_OW 67
// p := p + 1 ;
31451: LD_ADDR_VAR 0 3
31455: PUSH
31456: LD_VAR 0 3
31460: PUSH
31461: LD_INT 1
31463: PLUS
31464: ST_TO_ADDR
// for i in tmp do
31465: LD_ADDR_VAR 0 1
31469: PUSH
31470: LD_VAR 0 2
31474: PUSH
31475: FOR_IN
31476: IFFALSE 31507
// if GetLives ( i ) < 1000 then
31478: LD_VAR 0 1
31482: PPUSH
31483: CALL_OW 256
31487: PUSH
31488: LD_INT 1000
31490: LESS
31491: IFFALSE 31505
// SetLives ( i , 1000 ) ;
31493: LD_VAR 0 1
31497: PPUSH
31498: LD_INT 1000
31500: PPUSH
31501: CALL_OW 234
31505: GO 31475
31507: POP
31508: POP
// until p > 20 ;
31509: LD_VAR 0 3
31513: PUSH
31514: LD_INT 20
31516: GREATER
31517: IFFALSE 31444
// end ;
31519: PPOPN 3
31521: END
// every 0 0$1 trigger StreamModeActive and sTime do
31522: LD_EXP 90
31526: PUSH
31527: LD_EXP 141
31531: AND
31532: IFFALSE 31567
31534: GO 31536
31536: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31537: LD_INT 28
31539: PPUSH
31540: LD_OWVAR 2
31544: PPUSH
31545: LD_INT 2
31547: PPUSH
31548: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31552: LD_INT 30
31554: PPUSH
31555: LD_OWVAR 2
31559: PPUSH
31560: LD_INT 2
31562: PPUSH
31563: CALL_OW 322
// end ;
31567: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31568: LD_EXP 90
31572: PUSH
31573: LD_EXP 142
31577: AND
31578: IFFALSE 31699
31580: GO 31582
31582: DISABLE
31583: LD_INT 0
31585: PPUSH
31586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31587: LD_ADDR_VAR 0 2
31591: PUSH
31592: LD_INT 22
31594: PUSH
31595: LD_OWVAR 2
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 21
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 3
31616: PUSH
31617: LD_INT 23
31619: PUSH
31620: LD_INT 0
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: PPUSH
31636: CALL_OW 69
31640: ST_TO_ADDR
// if not tmp then
31641: LD_VAR 0 2
31645: NOT
31646: IFFALSE 31650
// exit ;
31648: GO 31699
// for i in tmp do
31650: LD_ADDR_VAR 0 1
31654: PUSH
31655: LD_VAR 0 2
31659: PUSH
31660: FOR_IN
31661: IFFALSE 31697
// begin if Crawls ( i ) then
31663: LD_VAR 0 1
31667: PPUSH
31668: CALL_OW 318
31672: IFFALSE 31683
// ComWalk ( i ) ;
31674: LD_VAR 0 1
31678: PPUSH
31679: CALL_OW 138
// SetClass ( i , 2 ) ;
31683: LD_VAR 0 1
31687: PPUSH
31688: LD_INT 2
31690: PPUSH
31691: CALL_OW 336
// end ;
31695: GO 31660
31697: POP
31698: POP
// end ;
31699: PPOPN 2
31701: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31702: LD_EXP 90
31706: PUSH
31707: LD_EXP 143
31711: AND
31712: IFFALSE 31993
31714: GO 31716
31716: DISABLE
31717: LD_INT 0
31719: PPUSH
31720: PPUSH
31721: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31722: LD_OWVAR 2
31726: PPUSH
31727: LD_INT 9
31729: PPUSH
31730: LD_INT 1
31732: PPUSH
31733: LD_INT 1
31735: PPUSH
31736: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31740: LD_INT 9
31742: PPUSH
31743: LD_OWVAR 2
31747: PPUSH
31748: CALL_OW 343
// uc_side := 9 ;
31752: LD_ADDR_OWVAR 20
31756: PUSH
31757: LD_INT 9
31759: ST_TO_ADDR
// uc_nation := 2 ;
31760: LD_ADDR_OWVAR 21
31764: PUSH
31765: LD_INT 2
31767: ST_TO_ADDR
// hc_name := Dark Warrior ;
31768: LD_ADDR_OWVAR 26
31772: PUSH
31773: LD_STRING Dark Warrior
31775: ST_TO_ADDR
// hc_gallery :=  ;
31776: LD_ADDR_OWVAR 33
31780: PUSH
31781: LD_STRING 
31783: ST_TO_ADDR
// hc_noskilllimit := true ;
31784: LD_ADDR_OWVAR 76
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31792: LD_ADDR_OWVAR 31
31796: PUSH
31797: LD_INT 30
31799: PUSH
31800: LD_INT 30
31802: PUSH
31803: LD_INT 30
31805: PUSH
31806: LD_INT 30
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: ST_TO_ADDR
// un := CreateHuman ;
31815: LD_ADDR_VAR 0 3
31819: PUSH
31820: CALL_OW 44
31824: ST_TO_ADDR
// hc_noskilllimit := false ;
31825: LD_ADDR_OWVAR 76
31829: PUSH
31830: LD_INT 0
31832: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31833: LD_VAR 0 3
31837: PPUSH
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 51
// p := 0 ;
31845: LD_ADDR_VAR 0 2
31849: PUSH
31850: LD_INT 0
31852: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31853: LD_INT 35
31855: PPUSH
31856: CALL_OW 67
// p := p + 1 ;
31860: LD_ADDR_VAR 0 2
31864: PUSH
31865: LD_VAR 0 2
31869: PUSH
31870: LD_INT 1
31872: PLUS
31873: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 256
31883: PUSH
31884: LD_INT 1000
31886: LESS
31887: IFFALSE 31901
// SetLives ( un , 1000 ) ;
31889: LD_VAR 0 3
31893: PPUSH
31894: LD_INT 1000
31896: PPUSH
31897: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31901: LD_VAR 0 3
31905: PPUSH
31906: LD_INT 81
31908: PUSH
31909: LD_OWVAR 2
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: LD_INT 91
31920: PUSH
31921: LD_VAR 0 3
31925: PUSH
31926: LD_INT 30
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: LIST
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PPUSH
31938: CALL_OW 69
31942: PPUSH
31943: LD_VAR 0 3
31947: PPUSH
31948: CALL_OW 74
31952: PPUSH
31953: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
31957: LD_VAR 0 2
31961: PUSH
31962: LD_INT 60
31964: GREATER
31965: PUSH
31966: LD_VAR 0 3
31970: PPUSH
31971: CALL_OW 301
31975: OR
31976: IFFALSE 31853
// if un then
31978: LD_VAR 0 3
31982: IFFALSE 31993
// RemoveUnit ( un ) ;
31984: LD_VAR 0 3
31988: PPUSH
31989: CALL_OW 64
// end ;
31993: PPOPN 3
31995: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31996: LD_INT 0
31998: PPUSH
// case cmd of 301 :
31999: LD_VAR 0 1
32003: PUSH
32004: LD_INT 301
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32044
32012: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32013: LD_VAR 0 6
32017: PPUSH
32018: LD_VAR 0 7
32022: PPUSH
32023: LD_VAR 0 8
32027: PPUSH
32028: LD_VAR 0 4
32032: PPUSH
32033: LD_VAR 0 5
32037: PPUSH
32038: CALL 33245 0 5
32042: GO 32165
32044: LD_INT 302
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32089
32052: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32053: LD_VAR 0 6
32057: PPUSH
32058: LD_VAR 0 7
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: LD_VAR 0 9
32072: PPUSH
32073: LD_VAR 0 4
32077: PPUSH
32078: LD_VAR 0 5
32082: PPUSH
32083: CALL 33336 0 6
32087: GO 32165
32089: LD_INT 303
32091: DOUBLE
32092: EQUAL
32093: IFTRUE 32097
32095: GO 32134
32097: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32098: LD_VAR 0 6
32102: PPUSH
32103: LD_VAR 0 7
32107: PPUSH
32108: LD_VAR 0 8
32112: PPUSH
32113: LD_VAR 0 9
32117: PPUSH
32118: LD_VAR 0 4
32122: PPUSH
32123: LD_VAR 0 5
32127: PPUSH
32128: CALL 32170 0 6
32132: GO 32165
32134: LD_INT 304
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32164
32142: POP
// hHackTeleport ( unit , x , y ) ; end ;
32143: LD_VAR 0 2
32147: PPUSH
32148: LD_VAR 0 4
32152: PPUSH
32153: LD_VAR 0 5
32157: PPUSH
32158: CALL 33929 0 3
32162: GO 32165
32164: POP
// end ;
32165: LD_VAR 0 12
32169: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32170: LD_INT 0
32172: PPUSH
32173: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32174: LD_VAR 0 1
32178: PUSH
32179: LD_INT 1
32181: LESS
32182: PUSH
32183: LD_VAR 0 1
32187: PUSH
32188: LD_INT 3
32190: GREATER
32191: OR
32192: PUSH
32193: LD_VAR 0 5
32197: PPUSH
32198: LD_VAR 0 6
32202: PPUSH
32203: CALL_OW 428
32207: OR
32208: IFFALSE 32212
// exit ;
32210: GO 32932
// uc_side := your_side ;
32212: LD_ADDR_OWVAR 20
32216: PUSH
32217: LD_OWVAR 2
32221: ST_TO_ADDR
// uc_nation := nation ;
32222: LD_ADDR_OWVAR 21
32226: PUSH
32227: LD_VAR 0 1
32231: ST_TO_ADDR
// bc_level = 1 ;
32232: LD_ADDR_OWVAR 43
32236: PUSH
32237: LD_INT 1
32239: ST_TO_ADDR
// case btype of 1 :
32240: LD_VAR 0 2
32244: PUSH
32245: LD_INT 1
32247: DOUBLE
32248: EQUAL
32249: IFTRUE 32253
32251: GO 32264
32253: POP
// bc_type := b_depot ; 2 :
32254: LD_ADDR_OWVAR 42
32258: PUSH
32259: LD_INT 0
32261: ST_TO_ADDR
32262: GO 32876
32264: LD_INT 2
32266: DOUBLE
32267: EQUAL
32268: IFTRUE 32272
32270: GO 32283
32272: POP
// bc_type := b_warehouse ; 3 :
32273: LD_ADDR_OWVAR 42
32277: PUSH
32278: LD_INT 1
32280: ST_TO_ADDR
32281: GO 32876
32283: LD_INT 3
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32302
32291: POP
// bc_type := b_lab ; 4 .. 9 :
32292: LD_ADDR_OWVAR 42
32296: PUSH
32297: LD_INT 6
32299: ST_TO_ADDR
32300: GO 32876
32302: LD_INT 4
32304: DOUBLE
32305: GREATEREQUAL
32306: IFFALSE 32314
32308: LD_INT 9
32310: DOUBLE
32311: LESSEQUAL
32312: IFTRUE 32316
32314: GO 32368
32316: POP
// begin bc_type := b_lab_half ;
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 7
32324: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32325: LD_ADDR_OWVAR 44
32329: PUSH
32330: LD_INT 10
32332: PUSH
32333: LD_INT 11
32335: PUSH
32336: LD_INT 12
32338: PUSH
32339: LD_INT 15
32341: PUSH
32342: LD_INT 14
32344: PUSH
32345: LD_INT 13
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: LIST
32354: LIST
32355: PUSH
32356: LD_VAR 0 2
32360: PUSH
32361: LD_INT 3
32363: MINUS
32364: ARRAY
32365: ST_TO_ADDR
// end ; 10 .. 13 :
32366: GO 32876
32368: LD_INT 10
32370: DOUBLE
32371: GREATEREQUAL
32372: IFFALSE 32380
32374: LD_INT 13
32376: DOUBLE
32377: LESSEQUAL
32378: IFTRUE 32382
32380: GO 32459
32382: POP
// begin bc_type := b_lab_full ;
32383: LD_ADDR_OWVAR 42
32387: PUSH
32388: LD_INT 8
32390: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32391: LD_ADDR_OWVAR 44
32395: PUSH
32396: LD_INT 10
32398: PUSH
32399: LD_INT 12
32401: PUSH
32402: LD_INT 14
32404: PUSH
32405: LD_INT 13
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: LD_VAR 0 2
32418: PUSH
32419: LD_INT 9
32421: MINUS
32422: ARRAY
32423: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32424: LD_ADDR_OWVAR 45
32428: PUSH
32429: LD_INT 11
32431: PUSH
32432: LD_INT 15
32434: PUSH
32435: LD_INT 12
32437: PUSH
32438: LD_INT 15
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: PUSH
32447: LD_VAR 0 2
32451: PUSH
32452: LD_INT 9
32454: MINUS
32455: ARRAY
32456: ST_TO_ADDR
// end ; 14 :
32457: GO 32876
32459: LD_INT 14
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32478
32467: POP
// bc_type := b_workshop ; 15 :
32468: LD_ADDR_OWVAR 42
32472: PUSH
32473: LD_INT 2
32475: ST_TO_ADDR
32476: GO 32876
32478: LD_INT 15
32480: DOUBLE
32481: EQUAL
32482: IFTRUE 32486
32484: GO 32497
32486: POP
// bc_type := b_factory ; 16 :
32487: LD_ADDR_OWVAR 42
32491: PUSH
32492: LD_INT 3
32494: ST_TO_ADDR
32495: GO 32876
32497: LD_INT 16
32499: DOUBLE
32500: EQUAL
32501: IFTRUE 32505
32503: GO 32516
32505: POP
// bc_type := b_ext_gun ; 17 :
32506: LD_ADDR_OWVAR 42
32510: PUSH
32511: LD_INT 17
32513: ST_TO_ADDR
32514: GO 32876
32516: LD_INT 17
32518: DOUBLE
32519: EQUAL
32520: IFTRUE 32524
32522: GO 32552
32524: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32525: LD_ADDR_OWVAR 42
32529: PUSH
32530: LD_INT 19
32532: PUSH
32533: LD_INT 23
32535: PUSH
32536: LD_INT 19
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: LD_VAR 0 1
32548: ARRAY
32549: ST_TO_ADDR
32550: GO 32876
32552: LD_INT 18
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32571
32560: POP
// bc_type := b_ext_radar ; 19 :
32561: LD_ADDR_OWVAR 42
32565: PUSH
32566: LD_INT 20
32568: ST_TO_ADDR
32569: GO 32876
32571: LD_INT 19
32573: DOUBLE
32574: EQUAL
32575: IFTRUE 32579
32577: GO 32590
32579: POP
// bc_type := b_ext_radio ; 20 :
32580: LD_ADDR_OWVAR 42
32584: PUSH
32585: LD_INT 22
32587: ST_TO_ADDR
32588: GO 32876
32590: LD_INT 20
32592: DOUBLE
32593: EQUAL
32594: IFTRUE 32598
32596: GO 32609
32598: POP
// bc_type := b_ext_siberium ; 21 :
32599: LD_ADDR_OWVAR 42
32603: PUSH
32604: LD_INT 21
32606: ST_TO_ADDR
32607: GO 32876
32609: LD_INT 21
32611: DOUBLE
32612: EQUAL
32613: IFTRUE 32617
32615: GO 32628
32617: POP
// bc_type := b_ext_computer ; 22 :
32618: LD_ADDR_OWVAR 42
32622: PUSH
32623: LD_INT 24
32625: ST_TO_ADDR
32626: GO 32876
32628: LD_INT 22
32630: DOUBLE
32631: EQUAL
32632: IFTRUE 32636
32634: GO 32647
32636: POP
// bc_type := b_ext_track ; 23 :
32637: LD_ADDR_OWVAR 42
32641: PUSH
32642: LD_INT 16
32644: ST_TO_ADDR
32645: GO 32876
32647: LD_INT 23
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32666
32655: POP
// bc_type := b_ext_laser ; 24 :
32656: LD_ADDR_OWVAR 42
32660: PUSH
32661: LD_INT 25
32663: ST_TO_ADDR
32664: GO 32876
32666: LD_INT 24
32668: DOUBLE
32669: EQUAL
32670: IFTRUE 32674
32672: GO 32685
32674: POP
// bc_type := b_control_tower ; 25 :
32675: LD_ADDR_OWVAR 42
32679: PUSH
32680: LD_INT 36
32682: ST_TO_ADDR
32683: GO 32876
32685: LD_INT 25
32687: DOUBLE
32688: EQUAL
32689: IFTRUE 32693
32691: GO 32704
32693: POP
// bc_type := b_breastwork ; 26 :
32694: LD_ADDR_OWVAR 42
32698: PUSH
32699: LD_INT 31
32701: ST_TO_ADDR
32702: GO 32876
32704: LD_INT 26
32706: DOUBLE
32707: EQUAL
32708: IFTRUE 32712
32710: GO 32723
32712: POP
// bc_type := b_bunker ; 27 :
32713: LD_ADDR_OWVAR 42
32717: PUSH
32718: LD_INT 32
32720: ST_TO_ADDR
32721: GO 32876
32723: LD_INT 27
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32742
32731: POP
// bc_type := b_turret ; 28 :
32732: LD_ADDR_OWVAR 42
32736: PUSH
32737: LD_INT 33
32739: ST_TO_ADDR
32740: GO 32876
32742: LD_INT 28
32744: DOUBLE
32745: EQUAL
32746: IFTRUE 32750
32748: GO 32761
32750: POP
// bc_type := b_armoury ; 29 :
32751: LD_ADDR_OWVAR 42
32755: PUSH
32756: LD_INT 4
32758: ST_TO_ADDR
32759: GO 32876
32761: LD_INT 29
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32780
32769: POP
// bc_type := b_barracks ; 30 :
32770: LD_ADDR_OWVAR 42
32774: PUSH
32775: LD_INT 5
32777: ST_TO_ADDR
32778: GO 32876
32780: LD_INT 30
32782: DOUBLE
32783: EQUAL
32784: IFTRUE 32788
32786: GO 32799
32788: POP
// bc_type := b_solar_power ; 31 :
32789: LD_ADDR_OWVAR 42
32793: PUSH
32794: LD_INT 27
32796: ST_TO_ADDR
32797: GO 32876
32799: LD_INT 31
32801: DOUBLE
32802: EQUAL
32803: IFTRUE 32807
32805: GO 32818
32807: POP
// bc_type := b_oil_power ; 32 :
32808: LD_ADDR_OWVAR 42
32812: PUSH
32813: LD_INT 26
32815: ST_TO_ADDR
32816: GO 32876
32818: LD_INT 32
32820: DOUBLE
32821: EQUAL
32822: IFTRUE 32826
32824: GO 32837
32826: POP
// bc_type := b_siberite_power ; 33 :
32827: LD_ADDR_OWVAR 42
32831: PUSH
32832: LD_INT 28
32834: ST_TO_ADDR
32835: GO 32876
32837: LD_INT 33
32839: DOUBLE
32840: EQUAL
32841: IFTRUE 32845
32843: GO 32856
32845: POP
// bc_type := b_oil_mine ; 34 :
32846: LD_ADDR_OWVAR 42
32850: PUSH
32851: LD_INT 29
32853: ST_TO_ADDR
32854: GO 32876
32856: LD_INT 34
32858: DOUBLE
32859: EQUAL
32860: IFTRUE 32864
32862: GO 32875
32864: POP
// bc_type := b_siberite_mine ; end ;
32865: LD_ADDR_OWVAR 42
32869: PUSH
32870: LD_INT 30
32872: ST_TO_ADDR
32873: GO 32876
32875: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32876: LD_ADDR_VAR 0 8
32880: PUSH
32881: LD_VAR 0 5
32885: PPUSH
32886: LD_VAR 0 6
32890: PPUSH
32891: LD_VAR 0 3
32895: PPUSH
32896: CALL_OW 47
32900: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32901: LD_OWVAR 42
32905: PUSH
32906: LD_INT 32
32908: PUSH
32909: LD_INT 33
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: IN
32916: IFFALSE 32932
// PlaceWeaponTurret ( b , weapon ) ;
32918: LD_VAR 0 8
32922: PPUSH
32923: LD_VAR 0 4
32927: PPUSH
32928: CALL_OW 431
// end ;
32932: LD_VAR 0 7
32936: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32937: LD_INT 0
32939: PPUSH
32940: PPUSH
32941: PPUSH
32942: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32943: LD_ADDR_VAR 0 4
32947: PUSH
32948: LD_INT 22
32950: PUSH
32951: LD_OWVAR 2
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: LD_INT 30
32965: PUSH
32966: LD_INT 0
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 30
32975: PUSH
32976: LD_INT 1
32978: PUSH
32979: EMPTY
32980: LIST
32981: LIST
32982: PUSH
32983: EMPTY
32984: LIST
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 69
32996: ST_TO_ADDR
// if not tmp then
32997: LD_VAR 0 4
33001: NOT
33002: IFFALSE 33006
// exit ;
33004: GO 33065
// for i in tmp do
33006: LD_ADDR_VAR 0 2
33010: PUSH
33011: LD_VAR 0 4
33015: PUSH
33016: FOR_IN
33017: IFFALSE 33063
// for j = 1 to 3 do
33019: LD_ADDR_VAR 0 3
33023: PUSH
33024: DOUBLE
33025: LD_INT 1
33027: DEC
33028: ST_TO_ADDR
33029: LD_INT 3
33031: PUSH
33032: FOR_TO
33033: IFFALSE 33059
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33035: LD_VAR 0 2
33039: PPUSH
33040: CALL_OW 274
33044: PPUSH
33045: LD_VAR 0 3
33049: PPUSH
33050: LD_INT 99999
33052: PPUSH
33053: CALL_OW 277
33057: GO 33032
33059: POP
33060: POP
33061: GO 33016
33063: POP
33064: POP
// end ;
33065: LD_VAR 0 1
33069: RET
// export function hHackSetLevel10 ; var i , j ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33075: LD_ADDR_VAR 0 2
33079: PUSH
33080: LD_INT 21
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 69
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33148
// if IsSelected ( i ) then
33098: LD_VAR 0 2
33102: PPUSH
33103: CALL_OW 306
33107: IFFALSE 33146
// begin for j := 1 to 4 do
33109: LD_ADDR_VAR 0 3
33113: PUSH
33114: DOUBLE
33115: LD_INT 1
33117: DEC
33118: ST_TO_ADDR
33119: LD_INT 4
33121: PUSH
33122: FOR_TO
33123: IFFALSE 33144
// SetSkill ( i , j , 10 ) ;
33125: LD_VAR 0 2
33129: PPUSH
33130: LD_VAR 0 3
33134: PPUSH
33135: LD_INT 10
33137: PPUSH
33138: CALL_OW 237
33142: GO 33122
33144: POP
33145: POP
// end ;
33146: GO 33095
33148: POP
33149: POP
// end ;
33150: LD_VAR 0 1
33154: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33155: LD_INT 0
33157: PPUSH
33158: PPUSH
33159: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 22
33167: PUSH
33168: LD_OWVAR 2
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PUSH
33177: LD_INT 21
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 69
33195: PUSH
33196: FOR_IN
33197: IFFALSE 33238
// begin for j := 1 to 4 do
33199: LD_ADDR_VAR 0 3
33203: PUSH
33204: DOUBLE
33205: LD_INT 1
33207: DEC
33208: ST_TO_ADDR
33209: LD_INT 4
33211: PUSH
33212: FOR_TO
33213: IFFALSE 33234
// SetSkill ( i , j , 10 ) ;
33215: LD_VAR 0 2
33219: PPUSH
33220: LD_VAR 0 3
33224: PPUSH
33225: LD_INT 10
33227: PPUSH
33228: CALL_OW 237
33232: GO 33212
33234: POP
33235: POP
// end ;
33236: GO 33196
33238: POP
33239: POP
// end ;
33240: LD_VAR 0 1
33244: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33245: LD_INT 0
33247: PPUSH
// uc_side := your_side ;
33248: LD_ADDR_OWVAR 20
33252: PUSH
33253: LD_OWVAR 2
33257: ST_TO_ADDR
// uc_nation := nation ;
33258: LD_ADDR_OWVAR 21
33262: PUSH
33263: LD_VAR 0 1
33267: ST_TO_ADDR
// InitHc ;
33268: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33272: LD_INT 0
33274: PPUSH
33275: LD_VAR 0 2
33279: PPUSH
33280: LD_VAR 0 3
33284: PPUSH
33285: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33289: LD_VAR 0 4
33293: PPUSH
33294: LD_VAR 0 5
33298: PPUSH
33299: CALL_OW 428
33303: PUSH
33304: LD_INT 0
33306: EQUAL
33307: IFFALSE 33331
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33309: CALL_OW 44
33313: PPUSH
33314: LD_VAR 0 4
33318: PPUSH
33319: LD_VAR 0 5
33323: PPUSH
33324: LD_INT 1
33326: PPUSH
33327: CALL_OW 48
// end ;
33331: LD_VAR 0 6
33335: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
// uc_side := your_side ;
33340: LD_ADDR_OWVAR 20
33344: PUSH
33345: LD_OWVAR 2
33349: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33350: LD_VAR 0 1
33354: PUSH
33355: LD_INT 1
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: LD_INT 3
33363: PUSH
33364: LD_INT 4
33366: PUSH
33367: LD_INT 5
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: IN
33377: IFFALSE 33389
// uc_nation := nation_american else
33379: LD_ADDR_OWVAR 21
33383: PUSH
33384: LD_INT 1
33386: ST_TO_ADDR
33387: GO 33432
// if chassis in [ 11 , 12 , 13 , 14 ] then
33389: LD_VAR 0 1
33393: PUSH
33394: LD_INT 11
33396: PUSH
33397: LD_INT 12
33399: PUSH
33400: LD_INT 13
33402: PUSH
33403: LD_INT 14
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: IN
33412: IFFALSE 33424
// uc_nation := nation_arabian else
33414: LD_ADDR_OWVAR 21
33418: PUSH
33419: LD_INT 2
33421: ST_TO_ADDR
33422: GO 33432
// uc_nation := nation_russian ;
33424: LD_ADDR_OWVAR 21
33428: PUSH
33429: LD_INT 3
33431: ST_TO_ADDR
// vc_chassis := chassis ;
33432: LD_ADDR_OWVAR 37
33436: PUSH
33437: LD_VAR 0 1
33441: ST_TO_ADDR
// vc_engine := engine ;
33442: LD_ADDR_OWVAR 39
33446: PUSH
33447: LD_VAR 0 2
33451: ST_TO_ADDR
// vc_control := control ;
33452: LD_ADDR_OWVAR 38
33456: PUSH
33457: LD_VAR 0 3
33461: ST_TO_ADDR
// vc_weapon := weapon ;
33462: LD_ADDR_OWVAR 40
33466: PUSH
33467: LD_VAR 0 4
33471: ST_TO_ADDR
// un := CreateVehicle ;
33472: LD_ADDR_VAR 0 8
33476: PUSH
33477: CALL_OW 45
33481: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33482: LD_VAR 0 8
33486: PPUSH
33487: LD_INT 0
33489: PPUSH
33490: LD_INT 5
33492: PPUSH
33493: CALL_OW 12
33497: PPUSH
33498: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33502: LD_VAR 0 8
33506: PPUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: LD_VAR 0 6
33516: PPUSH
33517: LD_INT 1
33519: PPUSH
33520: CALL_OW 48
// end ;
33524: LD_VAR 0 7
33528: RET
// export hInvincible ; every 1 do
33529: GO 33531
33531: DISABLE
// hInvincible := [ ] ;
33532: LD_ADDR_EXP 144
33536: PUSH
33537: EMPTY
33538: ST_TO_ADDR
33539: END
// every 10 do var i ;
33540: GO 33542
33542: DISABLE
33543: LD_INT 0
33545: PPUSH
// begin enable ;
33546: ENABLE
// if not hInvincible then
33547: LD_EXP 144
33551: NOT
33552: IFFALSE 33556
// exit ;
33554: GO 33600
// for i in hInvincible do
33556: LD_ADDR_VAR 0 1
33560: PUSH
33561: LD_EXP 144
33565: PUSH
33566: FOR_IN
33567: IFFALSE 33598
// if GetLives ( i ) < 1000 then
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 256
33578: PUSH
33579: LD_INT 1000
33581: LESS
33582: IFFALSE 33596
// SetLives ( i , 1000 ) ;
33584: LD_VAR 0 1
33588: PPUSH
33589: LD_INT 1000
33591: PPUSH
33592: CALL_OW 234
33596: GO 33566
33598: POP
33599: POP
// end ;
33600: PPOPN 1
33602: END
// export function hHackInvincible ; var i ; begin
33603: LD_INT 0
33605: PPUSH
33606: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33607: LD_ADDR_VAR 0 2
33611: PUSH
33612: LD_INT 2
33614: PUSH
33615: LD_INT 21
33617: PUSH
33618: LD_INT 1
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: PUSH
33625: LD_INT 21
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: LIST
33639: PPUSH
33640: CALL_OW 69
33644: PUSH
33645: FOR_IN
33646: IFFALSE 33707
// if IsSelected ( i ) then
33648: LD_VAR 0 2
33652: PPUSH
33653: CALL_OW 306
33657: IFFALSE 33705
// begin if i in hInvincible then
33659: LD_VAR 0 2
33663: PUSH
33664: LD_EXP 144
33668: IN
33669: IFFALSE 33689
// hInvincible := hInvincible diff i else
33671: LD_ADDR_EXP 144
33675: PUSH
33676: LD_EXP 144
33680: PUSH
33681: LD_VAR 0 2
33685: DIFF
33686: ST_TO_ADDR
33687: GO 33705
// hInvincible := hInvincible union i ;
33689: LD_ADDR_EXP 144
33693: PUSH
33694: LD_EXP 144
33698: PUSH
33699: LD_VAR 0 2
33703: UNION
33704: ST_TO_ADDR
// end ;
33705: GO 33645
33707: POP
33708: POP
// end ;
33709: LD_VAR 0 1
33713: RET
// export function hHackInvisible ; var i , j ; begin
33714: LD_INT 0
33716: PPUSH
33717: PPUSH
33718: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 21
33726: PUSH
33727: LD_INT 1
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PPUSH
33734: CALL_OW 69
33738: PUSH
33739: FOR_IN
33740: IFFALSE 33764
// if IsSelected ( i ) then
33742: LD_VAR 0 2
33746: PPUSH
33747: CALL_OW 306
33751: IFFALSE 33762
// ComForceInvisible ( i ) ;
33753: LD_VAR 0 2
33757: PPUSH
33758: CALL_OW 496
33762: GO 33739
33764: POP
33765: POP
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeYourSide ; begin
33771: LD_INT 0
33773: PPUSH
// if your_side = 8 then
33774: LD_OWVAR 2
33778: PUSH
33779: LD_INT 8
33781: EQUAL
33782: IFFALSE 33794
// your_side := 0 else
33784: LD_ADDR_OWVAR 2
33788: PUSH
33789: LD_INT 0
33791: ST_TO_ADDR
33792: GO 33808
// your_side := your_side + 1 ;
33794: LD_ADDR_OWVAR 2
33798: PUSH
33799: LD_OWVAR 2
33803: PUSH
33804: LD_INT 1
33806: PLUS
33807: ST_TO_ADDR
// end ;
33808: LD_VAR 0 1
33812: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33813: LD_INT 0
33815: PPUSH
33816: PPUSH
33817: PPUSH
// for i in all_units do
33818: LD_ADDR_VAR 0 2
33822: PUSH
33823: LD_OWVAR 3
33827: PUSH
33828: FOR_IN
33829: IFFALSE 33907
// if IsSelected ( i ) then
33831: LD_VAR 0 2
33835: PPUSH
33836: CALL_OW 306
33840: IFFALSE 33905
// begin j := GetSide ( i ) ;
33842: LD_ADDR_VAR 0 3
33846: PUSH
33847: LD_VAR 0 2
33851: PPUSH
33852: CALL_OW 255
33856: ST_TO_ADDR
// if j = 8 then
33857: LD_VAR 0 3
33861: PUSH
33862: LD_INT 8
33864: EQUAL
33865: IFFALSE 33877
// j := 0 else
33867: LD_ADDR_VAR 0 3
33871: PUSH
33872: LD_INT 0
33874: ST_TO_ADDR
33875: GO 33891
// j := j + 1 ;
33877: LD_ADDR_VAR 0 3
33881: PUSH
33882: LD_VAR 0 3
33886: PUSH
33887: LD_INT 1
33889: PLUS
33890: ST_TO_ADDR
// SetSide ( i , j ) ;
33891: LD_VAR 0 2
33895: PPUSH
33896: LD_VAR 0 3
33900: PPUSH
33901: CALL_OW 235
// end ;
33905: GO 33828
33907: POP
33908: POP
// end ;
33909: LD_VAR 0 1
33913: RET
// export function hHackFog ; begin
33914: LD_INT 0
33916: PPUSH
// FogOff ( true ) ;
33917: LD_INT 1
33919: PPUSH
33920: CALL_OW 344
// end ;
33924: LD_VAR 0 1
33928: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33929: LD_INT 0
33931: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33932: LD_VAR 0 1
33936: PPUSH
33937: LD_VAR 0 2
33941: PPUSH
33942: LD_VAR 0 3
33946: PPUSH
33947: LD_INT 1
33949: PPUSH
33950: LD_INT 1
33952: PPUSH
33953: CALL_OW 483
// CenterOnXY ( x , y ) ;
33957: LD_VAR 0 2
33961: PPUSH
33962: LD_VAR 0 3
33966: PPUSH
33967: CALL_OW 84
// end ; end_of_file
33971: LD_VAR 0 4
33975: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33976: LD_INT 0
33978: PPUSH
33979: PPUSH
33980: PPUSH
33981: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 264
33991: PUSH
33992: LD_EXP 155
33996: EQUAL
33997: IFFALSE 34069
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33999: LD_INT 68
34001: PPUSH
34002: LD_VAR 0 1
34006: PPUSH
34007: CALL_OW 255
34011: PPUSH
34012: CALL_OW 321
34016: PUSH
34017: LD_INT 2
34019: EQUAL
34020: IFFALSE 34032
// eff := 70 else
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_INT 70
34029: ST_TO_ADDR
34030: GO 34040
// eff := 30 ;
34032: LD_ADDR_VAR 0 4
34036: PUSH
34037: LD_INT 30
34039: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34040: LD_VAR 0 1
34044: PPUSH
34045: CALL_OW 250
34049: PPUSH
34050: LD_VAR 0 1
34054: PPUSH
34055: CALL_OW 251
34059: PPUSH
34060: LD_VAR 0 4
34064: PPUSH
34065: CALL_OW 495
// end ; end ;
34069: LD_VAR 0 2
34073: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34074: LD_INT 0
34076: PPUSH
// end ;
34077: LD_VAR 0 4
34081: RET
// export function SOS_Command ( cmd ) ; begin
34082: LD_INT 0
34084: PPUSH
// end ;
34085: LD_VAR 0 2
34089: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34090: LD_INT 0
34092: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34093: LD_VAR 0 1
34097: PUSH
34098: LD_INT 254
34100: EQUAL
34101: PUSH
34102: LD_VAR 0 2
34106: PPUSH
34107: CALL_OW 264
34111: PUSH
34112: LD_EXP 153
34116: EQUAL
34117: AND
34118: PUSH
34119: LD_VAR 0 3
34123: PPUSH
34124: CALL_OW 263
34128: PUSH
34129: LD_INT 3
34131: EQUAL
34132: AND
34133: IFFALSE 34149
// HackDestroyVehicle ( unit , selectedUnit ) ;
34135: LD_VAR 0 2
34139: PPUSH
34140: LD_VAR 0 3
34144: PPUSH
34145: CALL 35658 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34149: LD_VAR 0 1
34153: PUSH
34154: LD_INT 255
34156: EQUAL
34157: PUSH
34158: LD_VAR 0 2
34162: PPUSH
34163: CALL_OW 264
34167: PUSH
34168: LD_INT 14
34170: PUSH
34171: LD_INT 53
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: IN
34178: AND
34179: PUSH
34180: LD_VAR 0 4
34184: PPUSH
34185: LD_VAR 0 5
34189: PPUSH
34190: CALL_OW 488
34194: AND
34195: IFFALSE 34219
// CutTreeXYR ( unit , x , y , 12 ) ;
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 4
34206: PPUSH
34207: LD_VAR 0 5
34211: PPUSH
34212: LD_INT 12
34214: PPUSH
34215: CALL 34224 0 4
// end ;
34219: LD_VAR 0 6
34223: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34224: LD_INT 0
34226: PPUSH
34227: PPUSH
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34235: LD_VAR 0 1
34239: NOT
34240: PUSH
34241: LD_VAR 0 2
34245: PPUSH
34246: LD_VAR 0 3
34250: PPUSH
34251: CALL_OW 488
34255: NOT
34256: OR
34257: PUSH
34258: LD_VAR 0 4
34262: NOT
34263: OR
34264: IFFALSE 34268
// exit ;
34266: GO 34608
// list := [ ] ;
34268: LD_ADDR_VAR 0 13
34272: PUSH
34273: EMPTY
34274: ST_TO_ADDR
// if x - r < 0 then
34275: LD_VAR 0 2
34279: PUSH
34280: LD_VAR 0 4
34284: MINUS
34285: PUSH
34286: LD_INT 0
34288: LESS
34289: IFFALSE 34301
// min_x := 0 else
34291: LD_ADDR_VAR 0 7
34295: PUSH
34296: LD_INT 0
34298: ST_TO_ADDR
34299: GO 34317
// min_x := x - r ;
34301: LD_ADDR_VAR 0 7
34305: PUSH
34306: LD_VAR 0 2
34310: PUSH
34311: LD_VAR 0 4
34315: MINUS
34316: ST_TO_ADDR
// if y - r < 0 then
34317: LD_VAR 0 3
34321: PUSH
34322: LD_VAR 0 4
34326: MINUS
34327: PUSH
34328: LD_INT 0
34330: LESS
34331: IFFALSE 34343
// min_y := 0 else
34333: LD_ADDR_VAR 0 8
34337: PUSH
34338: LD_INT 0
34340: ST_TO_ADDR
34341: GO 34359
// min_y := y - r ;
34343: LD_ADDR_VAR 0 8
34347: PUSH
34348: LD_VAR 0 3
34352: PUSH
34353: LD_VAR 0 4
34357: MINUS
34358: ST_TO_ADDR
// max_x := x + r ;
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_VAR 0 2
34368: PUSH
34369: LD_VAR 0 4
34373: PLUS
34374: ST_TO_ADDR
// max_y := y + r ;
34375: LD_ADDR_VAR 0 10
34379: PUSH
34380: LD_VAR 0 3
34384: PUSH
34385: LD_VAR 0 4
34389: PLUS
34390: ST_TO_ADDR
// for _x = min_x to max_x do
34391: LD_ADDR_VAR 0 11
34395: PUSH
34396: DOUBLE
34397: LD_VAR 0 7
34401: DEC
34402: ST_TO_ADDR
34403: LD_VAR 0 9
34407: PUSH
34408: FOR_TO
34409: IFFALSE 34526
// for _y = min_y to max_y do
34411: LD_ADDR_VAR 0 12
34415: PUSH
34416: DOUBLE
34417: LD_VAR 0 8
34421: DEC
34422: ST_TO_ADDR
34423: LD_VAR 0 10
34427: PUSH
34428: FOR_TO
34429: IFFALSE 34522
// begin if not ValidHex ( _x , _y ) then
34431: LD_VAR 0 11
34435: PPUSH
34436: LD_VAR 0 12
34440: PPUSH
34441: CALL_OW 488
34445: NOT
34446: IFFALSE 34450
// continue ;
34448: GO 34428
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34450: LD_VAR 0 11
34454: PPUSH
34455: LD_VAR 0 12
34459: PPUSH
34460: CALL_OW 351
34464: PUSH
34465: LD_VAR 0 11
34469: PPUSH
34470: LD_VAR 0 12
34474: PPUSH
34475: CALL_OW 554
34479: AND
34480: IFFALSE 34520
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34482: LD_ADDR_VAR 0 13
34486: PUSH
34487: LD_VAR 0 13
34491: PPUSH
34492: LD_VAR 0 13
34496: PUSH
34497: LD_INT 1
34499: PLUS
34500: PPUSH
34501: LD_VAR 0 11
34505: PUSH
34506: LD_VAR 0 12
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PPUSH
34515: CALL_OW 2
34519: ST_TO_ADDR
// end ;
34520: GO 34428
34522: POP
34523: POP
34524: GO 34408
34526: POP
34527: POP
// if not list then
34528: LD_VAR 0 13
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34608
// for i in list do
34537: LD_ADDR_VAR 0 6
34541: PUSH
34542: LD_VAR 0 13
34546: PUSH
34547: FOR_IN
34548: IFFALSE 34606
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34550: LD_VAR 0 1
34554: PPUSH
34555: LD_STRING M
34557: PUSH
34558: LD_VAR 0 6
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PUSH
34567: LD_VAR 0 6
34571: PUSH
34572: LD_INT 2
34574: ARRAY
34575: PUSH
34576: LD_INT 0
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 0
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: EMPTY
34589: LIST
34590: LIST
34591: LIST
34592: LIST
34593: LIST
34594: LIST
34595: LIST
34596: PUSH
34597: EMPTY
34598: LIST
34599: PPUSH
34600: CALL_OW 447
34604: GO 34547
34606: POP
34607: POP
// end ;
34608: LD_VAR 0 5
34612: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
34613: LD_EXP 145
34617: NOT
34618: IFFALSE 34668
34620: GO 34622
34622: DISABLE
// begin initHack := true ;
34623: LD_ADDR_EXP 145
34627: PUSH
34628: LD_INT 1
34630: ST_TO_ADDR
// hackTanks := [ ] ;
34631: LD_ADDR_EXP 146
34635: PUSH
34636: EMPTY
34637: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
34638: LD_ADDR_EXP 147
34642: PUSH
34643: EMPTY
34644: ST_TO_ADDR
// hackLimit := 3 ;
34645: LD_ADDR_EXP 148
34649: PUSH
34650: LD_INT 3
34652: ST_TO_ADDR
// hackDist := 12 ;
34653: LD_ADDR_EXP 149
34657: PUSH
34658: LD_INT 12
34660: ST_TO_ADDR
// hackCounter := [ ] ;
34661: LD_ADDR_EXP 150
34665: PUSH
34666: EMPTY
34667: ST_TO_ADDR
// end ;
34668: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
34669: LD_EXP 145
34673: PUSH
34674: LD_INT 34
34676: PUSH
34677: LD_EXP 153
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PPUSH
34686: CALL_OW 69
34690: AND
34691: IFFALSE 34946
34693: GO 34695
34695: DISABLE
34696: LD_INT 0
34698: PPUSH
34699: PPUSH
// begin enable ;
34700: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
34701: LD_ADDR_VAR 0 1
34705: PUSH
34706: LD_INT 34
34708: PUSH
34709: LD_EXP 153
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PPUSH
34718: CALL_OW 69
34722: PUSH
34723: FOR_IN
34724: IFFALSE 34944
// begin if not i in hackTanks then
34726: LD_VAR 0 1
34730: PUSH
34731: LD_EXP 146
34735: IN
34736: NOT
34737: IFFALSE 34820
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
34739: LD_ADDR_EXP 146
34743: PUSH
34744: LD_EXP 146
34748: PPUSH
34749: LD_EXP 146
34753: PUSH
34754: LD_INT 1
34756: PLUS
34757: PPUSH
34758: LD_VAR 0 1
34762: PPUSH
34763: CALL_OW 1
34767: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
34768: LD_ADDR_EXP 147
34772: PUSH
34773: LD_EXP 147
34777: PPUSH
34778: LD_EXP 147
34782: PUSH
34783: LD_INT 1
34785: PLUS
34786: PPUSH
34787: EMPTY
34788: PPUSH
34789: CALL_OW 1
34793: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
34794: LD_ADDR_EXP 150
34798: PUSH
34799: LD_EXP 150
34803: PPUSH
34804: LD_EXP 150
34808: PUSH
34809: LD_INT 1
34811: PLUS
34812: PPUSH
34813: EMPTY
34814: PPUSH
34815: CALL_OW 1
34819: ST_TO_ADDR
// end ; if not IsOk ( i ) then
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL_OW 302
34829: NOT
34830: IFFALSE 34843
// begin HackUnlinkAll ( i ) ;
34832: LD_VAR 0 1
34836: PPUSH
34837: CALL 34949 0 1
// continue ;
34841: GO 34723
// end ; HackCheckCapturedStatus ( i ) ;
34843: LD_VAR 0 1
34847: PPUSH
34848: CALL 35392 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
34852: LD_ADDR_VAR 0 2
34856: PUSH
34857: LD_INT 81
34859: PUSH
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 255
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 33
34876: PUSH
34877: LD_INT 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 91
34886: PUSH
34887: LD_VAR 0 1
34891: PUSH
34892: LD_EXP 149
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 50
34904: PUSH
34905: EMPTY
34906: LIST
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: LIST
34912: LIST
34913: PPUSH
34914: CALL_OW 69
34918: ST_TO_ADDR
// if not tmp then
34919: LD_VAR 0 2
34923: NOT
34924: IFFALSE 34928
// continue ;
34926: GO 34723
// HackLink ( i , tmp ) ;
34928: LD_VAR 0 1
34932: PPUSH
34933: LD_VAR 0 2
34937: PPUSH
34938: CALL 35085 0 2
// end ;
34942: GO 34723
34944: POP
34945: POP
// end ;
34946: PPOPN 2
34948: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
34949: LD_INT 0
34951: PPUSH
34952: PPUSH
34953: PPUSH
// if not hack in hackTanks then
34954: LD_VAR 0 1
34958: PUSH
34959: LD_EXP 146
34963: IN
34964: NOT
34965: IFFALSE 34969
// exit ;
34967: GO 35080
// index := GetElementIndex ( hackTanks , hack ) ;
34969: LD_ADDR_VAR 0 4
34973: PUSH
34974: LD_EXP 146
34978: PPUSH
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL 40636 0 2
34988: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
34989: LD_EXP 147
34993: PUSH
34994: LD_VAR 0 4
34998: ARRAY
34999: IFFALSE 35080
// begin for i in hackTanksCaptured [ index ] do
35001: LD_ADDR_VAR 0 3
35005: PUSH
35006: LD_EXP 147
35010: PUSH
35011: LD_VAR 0 4
35015: ARRAY
35016: PUSH
35017: FOR_IN
35018: IFFALSE 35044
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35020: LD_VAR 0 3
35024: PUSH
35025: LD_INT 1
35027: ARRAY
35028: PPUSH
35029: LD_VAR 0 3
35033: PUSH
35034: LD_INT 2
35036: ARRAY
35037: PPUSH
35038: CALL_OW 235
35042: GO 35017
35044: POP
35045: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35046: LD_ADDR_EXP 147
35050: PUSH
35051: LD_EXP 147
35055: PPUSH
35056: LD_VAR 0 4
35060: PPUSH
35061: EMPTY
35062: PPUSH
35063: CALL_OW 1
35067: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35068: LD_VAR 0 1
35072: PPUSH
35073: LD_INT 0
35075: PPUSH
35076: CALL_OW 505
// end ; end ;
35080: LD_VAR 0 2
35084: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35085: LD_INT 0
35087: PPUSH
35088: PPUSH
35089: PPUSH
// if not hack in hackTanks or not vehicles then
35090: LD_VAR 0 1
35094: PUSH
35095: LD_EXP 146
35099: IN
35100: NOT
35101: PUSH
35102: LD_VAR 0 2
35106: NOT
35107: OR
35108: IFFALSE 35112
// exit ;
35110: GO 35387
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35112: LD_ADDR_VAR 0 2
35116: PUSH
35117: LD_VAR 0 1
35121: PPUSH
35122: LD_VAR 0 2
35126: PPUSH
35127: LD_INT 1
35129: PPUSH
35130: LD_INT 1
35132: PPUSH
35133: CALL 41286 0 4
35137: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35138: LD_ADDR_VAR 0 5
35142: PUSH
35143: LD_EXP 146
35147: PPUSH
35148: LD_VAR 0 1
35152: PPUSH
35153: CALL 40636 0 2
35157: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35158: LD_EXP 147
35162: PUSH
35163: LD_VAR 0 5
35167: ARRAY
35168: PUSH
35169: LD_EXP 148
35173: LESS
35174: IFFALSE 35363
// begin for i := 1 to vehicles do
35176: LD_ADDR_VAR 0 4
35180: PUSH
35181: DOUBLE
35182: LD_INT 1
35184: DEC
35185: ST_TO_ADDR
35186: LD_VAR 0 2
35190: PUSH
35191: FOR_TO
35192: IFFALSE 35361
// begin if hackTanksCaptured [ index ] = hackLimit then
35194: LD_EXP 147
35198: PUSH
35199: LD_VAR 0 5
35203: ARRAY
35204: PUSH
35205: LD_EXP 148
35209: EQUAL
35210: IFFALSE 35214
// break ;
35212: GO 35361
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35214: LD_ADDR_EXP 150
35218: PUSH
35219: LD_EXP 150
35223: PPUSH
35224: LD_VAR 0 5
35228: PPUSH
35229: LD_EXP 150
35233: PUSH
35234: LD_VAR 0 5
35238: ARRAY
35239: PUSH
35240: LD_INT 1
35242: PLUS
35243: PPUSH
35244: CALL_OW 1
35248: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35249: LD_ADDR_EXP 147
35253: PUSH
35254: LD_EXP 147
35258: PPUSH
35259: LD_VAR 0 5
35263: PUSH
35264: LD_EXP 147
35268: PUSH
35269: LD_VAR 0 5
35273: ARRAY
35274: PUSH
35275: LD_INT 1
35277: PLUS
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PPUSH
35283: LD_VAR 0 2
35287: PUSH
35288: LD_VAR 0 4
35292: ARRAY
35293: PUSH
35294: LD_VAR 0 2
35298: PUSH
35299: LD_VAR 0 4
35303: ARRAY
35304: PPUSH
35305: CALL_OW 255
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PPUSH
35314: CALL 40851 0 3
35318: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35319: LD_VAR 0 2
35323: PUSH
35324: LD_VAR 0 4
35328: ARRAY
35329: PPUSH
35330: LD_VAR 0 1
35334: PPUSH
35335: CALL_OW 255
35339: PPUSH
35340: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35344: LD_VAR 0 2
35348: PUSH
35349: LD_VAR 0 4
35353: ARRAY
35354: PPUSH
35355: CALL_OW 141
// end ;
35359: GO 35191
35361: POP
35362: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35363: LD_VAR 0 1
35367: PPUSH
35368: LD_EXP 147
35372: PUSH
35373: LD_VAR 0 5
35377: ARRAY
35378: PUSH
35379: LD_INT 0
35381: PLUS
35382: PPUSH
35383: CALL_OW 505
// end ;
35387: LD_VAR 0 3
35391: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35392: LD_INT 0
35394: PPUSH
35395: PPUSH
35396: PPUSH
35397: PPUSH
// if not hack in hackTanks then
35398: LD_VAR 0 1
35402: PUSH
35403: LD_EXP 146
35407: IN
35408: NOT
35409: IFFALSE 35413
// exit ;
35411: GO 35653
// index := GetElementIndex ( hackTanks , hack ) ;
35413: LD_ADDR_VAR 0 4
35417: PUSH
35418: LD_EXP 146
35422: PPUSH
35423: LD_VAR 0 1
35427: PPUSH
35428: CALL 40636 0 2
35432: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: DOUBLE
35439: LD_EXP 147
35443: PUSH
35444: LD_VAR 0 4
35448: ARRAY
35449: INC
35450: ST_TO_ADDR
35451: LD_INT 1
35453: PUSH
35454: FOR_DOWNTO
35455: IFFALSE 35627
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
35457: LD_ADDR_VAR 0 5
35461: PUSH
35462: LD_EXP 147
35466: PUSH
35467: LD_VAR 0 4
35471: ARRAY
35472: PUSH
35473: LD_VAR 0 3
35477: ARRAY
35478: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
35479: LD_VAR 0 5
35483: PUSH
35484: LD_INT 1
35486: ARRAY
35487: PPUSH
35488: CALL_OW 302
35492: NOT
35493: PUSH
35494: LD_VAR 0 5
35498: PUSH
35499: LD_INT 1
35501: ARRAY
35502: PPUSH
35503: CALL_OW 255
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 255
35517: NONEQUAL
35518: OR
35519: IFFALSE 35625
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
35521: LD_VAR 0 5
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: CALL_OW 305
35534: PUSH
35535: LD_VAR 0 5
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: PPUSH
35544: CALL_OW 255
35548: PUSH
35549: LD_VAR 0 1
35553: PPUSH
35554: CALL_OW 255
35558: EQUAL
35559: AND
35560: IFFALSE 35584
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
35562: LD_VAR 0 5
35566: PUSH
35567: LD_INT 1
35569: ARRAY
35570: PPUSH
35571: LD_VAR 0 5
35575: PUSH
35576: LD_INT 2
35578: ARRAY
35579: PPUSH
35580: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
35584: LD_ADDR_EXP 147
35588: PUSH
35589: LD_EXP 147
35593: PPUSH
35594: LD_VAR 0 4
35598: PPUSH
35599: LD_EXP 147
35603: PUSH
35604: LD_VAR 0 4
35608: ARRAY
35609: PPUSH
35610: LD_VAR 0 3
35614: PPUSH
35615: CALL_OW 3
35619: PPUSH
35620: CALL_OW 1
35624: ST_TO_ADDR
// end ; end ;
35625: GO 35454
35627: POP
35628: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35629: LD_VAR 0 1
35633: PPUSH
35634: LD_EXP 147
35638: PUSH
35639: LD_VAR 0 4
35643: ARRAY
35644: PUSH
35645: LD_INT 0
35647: PLUS
35648: PPUSH
35649: CALL_OW 505
// end ;
35653: LD_VAR 0 2
35657: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
35658: LD_INT 0
35660: PPUSH
35661: PPUSH
35662: PPUSH
35663: PPUSH
// if not hack in hackTanks then
35664: LD_VAR 0 1
35668: PUSH
35669: LD_EXP 146
35673: IN
35674: NOT
35675: IFFALSE 35679
// exit ;
35677: GO 35764
// index := GetElementIndex ( hackTanks , hack ) ;
35679: LD_ADDR_VAR 0 5
35683: PUSH
35684: LD_EXP 146
35688: PPUSH
35689: LD_VAR 0 1
35693: PPUSH
35694: CALL 40636 0 2
35698: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
35699: LD_ADDR_VAR 0 4
35703: PUSH
35704: DOUBLE
35705: LD_INT 1
35707: DEC
35708: ST_TO_ADDR
35709: LD_EXP 147
35713: PUSH
35714: LD_VAR 0 5
35718: ARRAY
35719: PUSH
35720: FOR_TO
35721: IFFALSE 35762
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
35723: LD_EXP 147
35727: PUSH
35728: LD_VAR 0 5
35732: ARRAY
35733: PUSH
35734: LD_VAR 0 4
35738: ARRAY
35739: PUSH
35740: LD_INT 1
35742: ARRAY
35743: PUSH
35744: LD_VAR 0 2
35748: EQUAL
35749: IFFALSE 35760
// KillUnit ( vehicle ) ;
35751: LD_VAR 0 2
35755: PPUSH
35756: CALL_OW 66
35760: GO 35720
35762: POP
35763: POP
// end ; end_of_file
35764: LD_VAR 0 3
35768: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
35769: LD_INT 0
35771: PPUSH
// ar_crane := 88 ;
35772: LD_ADDR_EXP 157
35776: PUSH
35777: LD_INT 88
35779: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
35780: LD_ADDR_EXP 152
35784: PUSH
35785: LD_INT 89
35787: ST_TO_ADDR
// us_hack := 99 ;
35788: LD_ADDR_EXP 153
35792: PUSH
35793: LD_INT 99
35795: ST_TO_ADDR
// us_artillery := 97 ;
35796: LD_ADDR_EXP 154
35800: PUSH
35801: LD_INT 97
35803: ST_TO_ADDR
// ar_bio_bomb := 91 ;
35804: LD_ADDR_EXP 155
35808: PUSH
35809: LD_INT 91
35811: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
35812: LD_ADDR_EXP 156
35816: PUSH
35817: LD_INT 92
35819: ST_TO_ADDR
// ru_radar := 98 ;
35820: LD_ADDR_EXP 151
35824: PUSH
35825: LD_INT 98
35827: ST_TO_ADDR
// tech_Artillery := 80 ;
35828: LD_ADDR_EXP 158
35832: PUSH
35833: LD_INT 80
35835: ST_TO_ADDR
// tech_RadMat := 81 ;
35836: LD_ADDR_EXP 159
35840: PUSH
35841: LD_INT 81
35843: ST_TO_ADDR
// tech_BasicTools := 82 ;
35844: LD_ADDR_EXP 160
35848: PUSH
35849: LD_INT 82
35851: ST_TO_ADDR
// tech_Cargo := 83 ;
35852: LD_ADDR_EXP 161
35856: PUSH
35857: LD_INT 83
35859: ST_TO_ADDR
// tech_Track := 84 ;
35860: LD_ADDR_EXP 162
35864: PUSH
35865: LD_INT 84
35867: ST_TO_ADDR
// tech_Crane := 85 ;
35868: LD_ADDR_EXP 163
35872: PUSH
35873: LD_INT 85
35875: ST_TO_ADDR
// tech_Bulldozer := 86 ;
35876: LD_ADDR_EXP 164
35880: PUSH
35881: LD_INT 86
35883: ST_TO_ADDR
// tech_Hovercraft := 87 ;
35884: LD_ADDR_EXP 165
35888: PUSH
35889: LD_INT 87
35891: ST_TO_ADDR
// end ;
35892: LD_VAR 0 1
35896: RET
// every 1 do
35897: GO 35899
35899: DISABLE
// InitGlobalVariables ; end_of_file
35900: CALL 35769 0 0
35904: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35905: LD_INT 0
35907: PPUSH
35908: PPUSH
// if exist_mode then
35909: LD_VAR 0 2
35913: IFFALSE 35938
// unit := CreateCharacter ( prefix & ident ) else
35915: LD_ADDR_VAR 0 5
35919: PUSH
35920: LD_VAR 0 3
35924: PUSH
35925: LD_VAR 0 1
35929: STR
35930: PPUSH
35931: CALL_OW 34
35935: ST_TO_ADDR
35936: GO 35953
// unit := NewCharacter ( ident ) ;
35938: LD_ADDR_VAR 0 5
35942: PUSH
35943: LD_VAR 0 1
35947: PPUSH
35948: CALL_OW 25
35952: ST_TO_ADDR
// result := unit ;
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: LD_VAR 0 5
35962: ST_TO_ADDR
// end ;
35963: LD_VAR 0 4
35967: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35968: LD_INT 0
35970: PPUSH
35971: PPUSH
// if not side or not nation then
35972: LD_VAR 0 1
35976: NOT
35977: PUSH
35978: LD_VAR 0 2
35982: NOT
35983: OR
35984: IFFALSE 35988
// exit ;
35986: GO 36752
// case nation of nation_american :
35988: LD_VAR 0 2
35992: PUSH
35993: LD_INT 1
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36215
36001: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
36002: LD_ADDR_VAR 0 4
36006: PUSH
36007: LD_INT 35
36009: PUSH
36010: LD_INT 45
36012: PUSH
36013: LD_INT 46
36015: PUSH
36016: LD_INT 47
36018: PUSH
36019: LD_INT 82
36021: PUSH
36022: LD_INT 83
36024: PUSH
36025: LD_INT 84
36027: PUSH
36028: LD_INT 85
36030: PUSH
36031: LD_INT 86
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: LD_INT 2
36039: PUSH
36040: LD_INT 6
36042: PUSH
36043: LD_INT 15
36045: PUSH
36046: LD_INT 16
36048: PUSH
36049: LD_INT 7
36051: PUSH
36052: LD_INT 12
36054: PUSH
36055: LD_INT 13
36057: PUSH
36058: LD_INT 10
36060: PUSH
36061: LD_INT 14
36063: PUSH
36064: LD_INT 20
36066: PUSH
36067: LD_INT 21
36069: PUSH
36070: LD_INT 22
36072: PUSH
36073: LD_INT 25
36075: PUSH
36076: LD_INT 32
36078: PUSH
36079: LD_INT 27
36081: PUSH
36082: LD_INT 36
36084: PUSH
36085: LD_INT 69
36087: PUSH
36088: LD_INT 39
36090: PUSH
36091: LD_INT 34
36093: PUSH
36094: LD_INT 40
36096: PUSH
36097: LD_INT 48
36099: PUSH
36100: LD_INT 49
36102: PUSH
36103: LD_INT 50
36105: PUSH
36106: LD_INT 51
36108: PUSH
36109: LD_INT 52
36111: PUSH
36112: LD_INT 53
36114: PUSH
36115: LD_INT 54
36117: PUSH
36118: LD_INT 55
36120: PUSH
36121: LD_INT 56
36123: PUSH
36124: LD_INT 57
36126: PUSH
36127: LD_INT 58
36129: PUSH
36130: LD_INT 59
36132: PUSH
36133: LD_INT 60
36135: PUSH
36136: LD_INT 61
36138: PUSH
36139: LD_INT 62
36141: PUSH
36142: LD_INT 80
36144: PUSH
36145: LD_INT 82
36147: PUSH
36148: LD_INT 83
36150: PUSH
36151: LD_INT 84
36153: PUSH
36154: LD_INT 85
36156: PUSH
36157: LD_INT 86
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: ST_TO_ADDR
36213: GO 36676
36215: LD_INT 2
36217: DOUBLE
36218: EQUAL
36219: IFTRUE 36223
36221: GO 36445
36223: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
36224: LD_ADDR_VAR 0 4
36228: PUSH
36229: LD_INT 35
36231: PUSH
36232: LD_INT 45
36234: PUSH
36235: LD_INT 46
36237: PUSH
36238: LD_INT 47
36240: PUSH
36241: LD_INT 82
36243: PUSH
36244: LD_INT 83
36246: PUSH
36247: LD_INT 84
36249: PUSH
36250: LD_INT 85
36252: PUSH
36253: LD_INT 87
36255: PUSH
36256: LD_INT 70
36258: PUSH
36259: LD_INT 1
36261: PUSH
36262: LD_INT 11
36264: PUSH
36265: LD_INT 3
36267: PUSH
36268: LD_INT 4
36270: PUSH
36271: LD_INT 5
36273: PUSH
36274: LD_INT 6
36276: PUSH
36277: LD_INT 15
36279: PUSH
36280: LD_INT 18
36282: PUSH
36283: LD_INT 7
36285: PUSH
36286: LD_INT 17
36288: PUSH
36289: LD_INT 8
36291: PUSH
36292: LD_INT 20
36294: PUSH
36295: LD_INT 21
36297: PUSH
36298: LD_INT 22
36300: PUSH
36301: LD_INT 72
36303: PUSH
36304: LD_INT 26
36306: PUSH
36307: LD_INT 69
36309: PUSH
36310: LD_INT 39
36312: PUSH
36313: LD_INT 40
36315: PUSH
36316: LD_INT 41
36318: PUSH
36319: LD_INT 42
36321: PUSH
36322: LD_INT 43
36324: PUSH
36325: LD_INT 48
36327: PUSH
36328: LD_INT 49
36330: PUSH
36331: LD_INT 50
36333: PUSH
36334: LD_INT 51
36336: PUSH
36337: LD_INT 52
36339: PUSH
36340: LD_INT 53
36342: PUSH
36343: LD_INT 54
36345: PUSH
36346: LD_INT 55
36348: PUSH
36349: LD_INT 56
36351: PUSH
36352: LD_INT 60
36354: PUSH
36355: LD_INT 61
36357: PUSH
36358: LD_INT 62
36360: PUSH
36361: LD_INT 66
36363: PUSH
36364: LD_INT 67
36366: PUSH
36367: LD_INT 68
36369: PUSH
36370: LD_INT 81
36372: PUSH
36373: LD_INT 82
36375: PUSH
36376: LD_INT 83
36378: PUSH
36379: LD_INT 84
36381: PUSH
36382: LD_INT 85
36384: PUSH
36385: LD_INT 87
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
36443: GO 36676
36445: LD_INT 3
36447: DOUBLE
36448: EQUAL
36449: IFTRUE 36453
36451: GO 36675
36453: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
36454: LD_ADDR_VAR 0 4
36458: PUSH
36459: LD_INT 46
36461: PUSH
36462: LD_INT 47
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: LD_INT 2
36470: PUSH
36471: LD_INT 82
36473: PUSH
36474: LD_INT 83
36476: PUSH
36477: LD_INT 84
36479: PUSH
36480: LD_INT 85
36482: PUSH
36483: LD_INT 86
36485: PUSH
36486: LD_INT 11
36488: PUSH
36489: LD_INT 9
36491: PUSH
36492: LD_INT 20
36494: PUSH
36495: LD_INT 19
36497: PUSH
36498: LD_INT 21
36500: PUSH
36501: LD_INT 24
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: LD_INT 25
36509: PUSH
36510: LD_INT 28
36512: PUSH
36513: LD_INT 29
36515: PUSH
36516: LD_INT 30
36518: PUSH
36519: LD_INT 31
36521: PUSH
36522: LD_INT 37
36524: PUSH
36525: LD_INT 38
36527: PUSH
36528: LD_INT 32
36530: PUSH
36531: LD_INT 27
36533: PUSH
36534: LD_INT 33
36536: PUSH
36537: LD_INT 69
36539: PUSH
36540: LD_INT 39
36542: PUSH
36543: LD_INT 34
36545: PUSH
36546: LD_INT 40
36548: PUSH
36549: LD_INT 71
36551: PUSH
36552: LD_INT 23
36554: PUSH
36555: LD_INT 44
36557: PUSH
36558: LD_INT 48
36560: PUSH
36561: LD_INT 49
36563: PUSH
36564: LD_INT 50
36566: PUSH
36567: LD_INT 51
36569: PUSH
36570: LD_INT 52
36572: PUSH
36573: LD_INT 53
36575: PUSH
36576: LD_INT 54
36578: PUSH
36579: LD_INT 55
36581: PUSH
36582: LD_INT 56
36584: PUSH
36585: LD_INT 57
36587: PUSH
36588: LD_INT 58
36590: PUSH
36591: LD_INT 59
36593: PUSH
36594: LD_INT 63
36596: PUSH
36597: LD_INT 64
36599: PUSH
36600: LD_INT 65
36602: PUSH
36603: LD_INT 82
36605: PUSH
36606: LD_INT 83
36608: PUSH
36609: LD_INT 84
36611: PUSH
36612: LD_INT 85
36614: PUSH
36615: LD_INT 86
36617: PUSH
36618: EMPTY
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: ST_TO_ADDR
36673: GO 36676
36675: POP
// if state > - 1 and state < 3 then
36676: LD_VAR 0 3
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: GREATER
36685: PUSH
36686: LD_VAR 0 3
36690: PUSH
36691: LD_INT 3
36693: LESS
36694: AND
36695: IFFALSE 36752
// for i in result do
36697: LD_ADDR_VAR 0 5
36701: PUSH
36702: LD_VAR 0 4
36706: PUSH
36707: FOR_IN
36708: IFFALSE 36750
// if GetTech ( i , side ) <> state then
36710: LD_VAR 0 5
36714: PPUSH
36715: LD_VAR 0 1
36719: PPUSH
36720: CALL_OW 321
36724: PUSH
36725: LD_VAR 0 3
36729: NONEQUAL
36730: IFFALSE 36748
// result := result diff i ;
36732: LD_ADDR_VAR 0 4
36736: PUSH
36737: LD_VAR 0 4
36741: PUSH
36742: LD_VAR 0 5
36746: DIFF
36747: ST_TO_ADDR
36748: GO 36707
36750: POP
36751: POP
// end ;
36752: LD_VAR 0 4
36756: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
36757: LD_INT 0
36759: PPUSH
36760: PPUSH
36761: PPUSH
// result := true ;
36762: LD_ADDR_VAR 0 3
36766: PUSH
36767: LD_INT 1
36769: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
36770: LD_ADDR_VAR 0 5
36774: PUSH
36775: LD_VAR 0 2
36779: PPUSH
36780: CALL_OW 480
36784: ST_TO_ADDR
// if not tmp then
36785: LD_VAR 0 5
36789: NOT
36790: IFFALSE 36794
// exit ;
36792: GO 36843
// for i in tmp do
36794: LD_ADDR_VAR 0 4
36798: PUSH
36799: LD_VAR 0 5
36803: PUSH
36804: FOR_IN
36805: IFFALSE 36841
// if GetTech ( i , side ) <> state_researched then
36807: LD_VAR 0 4
36811: PPUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 321
36821: PUSH
36822: LD_INT 2
36824: NONEQUAL
36825: IFFALSE 36839
// begin result := false ;
36827: LD_ADDR_VAR 0 3
36831: PUSH
36832: LD_INT 0
36834: ST_TO_ADDR
// exit ;
36835: POP
36836: POP
36837: GO 36843
// end ;
36839: GO 36804
36841: POP
36842: POP
// end ;
36843: LD_VAR 0 3
36847: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36848: LD_INT 0
36850: PPUSH
36851: PPUSH
36852: PPUSH
36853: PPUSH
36854: PPUSH
36855: PPUSH
36856: PPUSH
36857: PPUSH
36858: PPUSH
36859: PPUSH
36860: PPUSH
36861: PPUSH
36862: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36863: LD_VAR 0 1
36867: NOT
36868: PUSH
36869: LD_VAR 0 1
36873: PPUSH
36874: CALL_OW 257
36878: PUSH
36879: LD_INT 9
36881: NONEQUAL
36882: OR
36883: IFFALSE 36887
// exit ;
36885: GO 37460
// side := GetSide ( unit ) ;
36887: LD_ADDR_VAR 0 9
36891: PUSH
36892: LD_VAR 0 1
36896: PPUSH
36897: CALL_OW 255
36901: ST_TO_ADDR
// tech_space := tech_spacanom ;
36902: LD_ADDR_VAR 0 12
36906: PUSH
36907: LD_INT 29
36909: ST_TO_ADDR
// tech_time := tech_taurad ;
36910: LD_ADDR_VAR 0 13
36914: PUSH
36915: LD_INT 28
36917: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36918: LD_ADDR_VAR 0 11
36922: PUSH
36923: LD_VAR 0 1
36927: PPUSH
36928: CALL_OW 310
36932: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36933: LD_VAR 0 11
36937: PPUSH
36938: CALL_OW 247
36942: PUSH
36943: LD_INT 2
36945: EQUAL
36946: IFFALSE 36950
// exit ;
36948: GO 37460
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36950: LD_ADDR_VAR 0 8
36954: PUSH
36955: LD_INT 81
36957: PUSH
36958: LD_VAR 0 9
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 3
36969: PUSH
36970: LD_INT 21
36972: PUSH
36973: LD_INT 3
36975: PUSH
36976: EMPTY
36977: LIST
36978: LIST
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PPUSH
36988: CALL_OW 69
36992: ST_TO_ADDR
// if not tmp then
36993: LD_VAR 0 8
36997: NOT
36998: IFFALSE 37002
// exit ;
37000: GO 37460
// if in_unit then
37002: LD_VAR 0 11
37006: IFFALSE 37030
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
37008: LD_ADDR_VAR 0 10
37012: PUSH
37013: LD_VAR 0 8
37017: PPUSH
37018: LD_VAR 0 11
37022: PPUSH
37023: CALL_OW 74
37027: ST_TO_ADDR
37028: GO 37050
// enemy := NearestUnitToUnit ( tmp , unit ) ;
37030: LD_ADDR_VAR 0 10
37034: PUSH
37035: LD_VAR 0 8
37039: PPUSH
37040: LD_VAR 0 1
37044: PPUSH
37045: CALL_OW 74
37049: ST_TO_ADDR
// if not enemy then
37050: LD_VAR 0 10
37054: NOT
37055: IFFALSE 37059
// exit ;
37057: GO 37460
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
37059: LD_VAR 0 11
37063: PUSH
37064: LD_VAR 0 11
37068: PPUSH
37069: LD_VAR 0 10
37073: PPUSH
37074: CALL_OW 296
37078: PUSH
37079: LD_INT 13
37081: GREATER
37082: AND
37083: PUSH
37084: LD_VAR 0 1
37088: PPUSH
37089: LD_VAR 0 10
37093: PPUSH
37094: CALL_OW 296
37098: PUSH
37099: LD_INT 12
37101: GREATER
37102: OR
37103: IFFALSE 37107
// exit ;
37105: GO 37460
// missile := [ 1 ] ;
37107: LD_ADDR_VAR 0 14
37111: PUSH
37112: LD_INT 1
37114: PUSH
37115: EMPTY
37116: LIST
37117: ST_TO_ADDR
// if Researched ( side , tech_space ) then
37118: LD_VAR 0 9
37122: PPUSH
37123: LD_VAR 0 12
37127: PPUSH
37128: CALL_OW 325
37132: IFFALSE 37161
// missile := Insert ( missile , missile + 1 , 2 ) ;
37134: LD_ADDR_VAR 0 14
37138: PUSH
37139: LD_VAR 0 14
37143: PPUSH
37144: LD_VAR 0 14
37148: PUSH
37149: LD_INT 1
37151: PLUS
37152: PPUSH
37153: LD_INT 2
37155: PPUSH
37156: CALL_OW 2
37160: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
37161: LD_VAR 0 9
37165: PPUSH
37166: LD_VAR 0 13
37170: PPUSH
37171: CALL_OW 325
37175: PUSH
37176: LD_VAR 0 10
37180: PPUSH
37181: CALL_OW 255
37185: PPUSH
37186: LD_VAR 0 13
37190: PPUSH
37191: CALL_OW 325
37195: NOT
37196: AND
37197: IFFALSE 37226
// missile := Insert ( missile , missile + 1 , 3 ) ;
37199: LD_ADDR_VAR 0 14
37203: PUSH
37204: LD_VAR 0 14
37208: PPUSH
37209: LD_VAR 0 14
37213: PUSH
37214: LD_INT 1
37216: PLUS
37217: PPUSH
37218: LD_INT 3
37220: PPUSH
37221: CALL_OW 2
37225: ST_TO_ADDR
// if missile < 2 then
37226: LD_VAR 0 14
37230: PUSH
37231: LD_INT 2
37233: LESS
37234: IFFALSE 37238
// exit ;
37236: GO 37460
// x := GetX ( enemy ) ;
37238: LD_ADDR_VAR 0 4
37242: PUSH
37243: LD_VAR 0 10
37247: PPUSH
37248: CALL_OW 250
37252: ST_TO_ADDR
// y := GetY ( enemy ) ;
37253: LD_ADDR_VAR 0 5
37257: PUSH
37258: LD_VAR 0 10
37262: PPUSH
37263: CALL_OW 251
37267: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
37268: LD_ADDR_VAR 0 6
37272: PUSH
37273: LD_VAR 0 4
37277: PUSH
37278: LD_INT 1
37280: NEG
37281: PPUSH
37282: LD_INT 1
37284: PPUSH
37285: CALL_OW 12
37289: PLUS
37290: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
37291: LD_ADDR_VAR 0 7
37295: PUSH
37296: LD_VAR 0 5
37300: PUSH
37301: LD_INT 1
37303: NEG
37304: PPUSH
37305: LD_INT 1
37307: PPUSH
37308: CALL_OW 12
37312: PLUS
37313: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37314: LD_VAR 0 6
37318: PPUSH
37319: LD_VAR 0 7
37323: PPUSH
37324: CALL_OW 488
37328: NOT
37329: IFFALSE 37351
// begin _x := x ;
37331: LD_ADDR_VAR 0 6
37335: PUSH
37336: LD_VAR 0 4
37340: ST_TO_ADDR
// _y := y ;
37341: LD_ADDR_VAR 0 7
37345: PUSH
37346: LD_VAR 0 5
37350: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
37351: LD_ADDR_VAR 0 3
37355: PUSH
37356: LD_INT 1
37358: PPUSH
37359: LD_VAR 0 14
37363: PPUSH
37364: CALL_OW 12
37368: ST_TO_ADDR
// case i of 1 :
37369: LD_VAR 0 3
37373: PUSH
37374: LD_INT 1
37376: DOUBLE
37377: EQUAL
37378: IFTRUE 37382
37380: GO 37399
37382: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
37383: LD_VAR 0 1
37387: PPUSH
37388: LD_VAR 0 10
37392: PPUSH
37393: CALL_OW 115
37397: GO 37460
37399: LD_INT 2
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37429
37407: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
37408: LD_VAR 0 1
37412: PPUSH
37413: LD_VAR 0 6
37417: PPUSH
37418: LD_VAR 0 7
37422: PPUSH
37423: CALL_OW 153
37427: GO 37460
37429: LD_INT 3
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37459
37437: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
37438: LD_VAR 0 1
37442: PPUSH
37443: LD_VAR 0 6
37447: PPUSH
37448: LD_VAR 0 7
37452: PPUSH
37453: CALL_OW 154
37457: GO 37460
37459: POP
// end ;
37460: LD_VAR 0 2
37464: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
37465: LD_INT 0
37467: PPUSH
37468: PPUSH
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// if not unit or not building then
37473: LD_VAR 0 1
37477: NOT
37478: PUSH
37479: LD_VAR 0 2
37483: NOT
37484: OR
37485: IFFALSE 37489
// exit ;
37487: GO 37647
// x := GetX ( building ) ;
37489: LD_ADDR_VAR 0 5
37493: PUSH
37494: LD_VAR 0 2
37498: PPUSH
37499: CALL_OW 250
37503: ST_TO_ADDR
// y := GetY ( building ) ;
37504: LD_ADDR_VAR 0 6
37508: PUSH
37509: LD_VAR 0 2
37513: PPUSH
37514: CALL_OW 251
37518: ST_TO_ADDR
// for i = 0 to 5 do
37519: LD_ADDR_VAR 0 4
37523: PUSH
37524: DOUBLE
37525: LD_INT 0
37527: DEC
37528: ST_TO_ADDR
37529: LD_INT 5
37531: PUSH
37532: FOR_TO
37533: IFFALSE 37645
// begin _x := ShiftX ( x , i , 3 ) ;
37535: LD_ADDR_VAR 0 7
37539: PUSH
37540: LD_VAR 0 5
37544: PPUSH
37545: LD_VAR 0 4
37549: PPUSH
37550: LD_INT 3
37552: PPUSH
37553: CALL_OW 272
37557: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
37558: LD_ADDR_VAR 0 8
37562: PUSH
37563: LD_VAR 0 6
37567: PPUSH
37568: LD_VAR 0 4
37572: PPUSH
37573: LD_INT 3
37575: PPUSH
37576: CALL_OW 273
37580: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
37581: LD_VAR 0 7
37585: PPUSH
37586: LD_VAR 0 8
37590: PPUSH
37591: CALL_OW 488
37595: NOT
37596: IFFALSE 37600
// continue ;
37598: GO 37532
// if HexInfo ( _x , _y ) = 0 then
37600: LD_VAR 0 7
37604: PPUSH
37605: LD_VAR 0 8
37609: PPUSH
37610: CALL_OW 428
37614: PUSH
37615: LD_INT 0
37617: EQUAL
37618: IFFALSE 37643
// begin ComMoveXY ( unit , _x , _y ) ;
37620: LD_VAR 0 1
37624: PPUSH
37625: LD_VAR 0 7
37629: PPUSH
37630: LD_VAR 0 8
37634: PPUSH
37635: CALL_OW 111
// exit ;
37639: POP
37640: POP
37641: GO 37647
// end ; end ;
37643: GO 37532
37645: POP
37646: POP
// end ;
37647: LD_VAR 0 3
37651: RET
// export function ScanBase ( side , base_area ) ; begin
37652: LD_INT 0
37654: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
37655: LD_ADDR_VAR 0 3
37659: PUSH
37660: LD_VAR 0 2
37664: PPUSH
37665: LD_INT 81
37667: PUSH
37668: LD_VAR 0 1
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PPUSH
37677: CALL_OW 70
37681: ST_TO_ADDR
// end ;
37682: LD_VAR 0 3
37686: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
37687: LD_INT 0
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
// result := false ;
37693: LD_ADDR_VAR 0 2
37697: PUSH
37698: LD_INT 0
37700: ST_TO_ADDR
// side := GetSide ( unit ) ;
37701: LD_ADDR_VAR 0 3
37705: PUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: CALL_OW 255
37715: ST_TO_ADDR
// nat := GetNation ( unit ) ;
37716: LD_ADDR_VAR 0 4
37720: PUSH
37721: LD_VAR 0 1
37725: PPUSH
37726: CALL_OW 248
37730: ST_TO_ADDR
// case nat of 1 :
37731: LD_VAR 0 4
37735: PUSH
37736: LD_INT 1
37738: DOUBLE
37739: EQUAL
37740: IFTRUE 37744
37742: GO 37755
37744: POP
// tech := tech_lassight ; 2 :
37745: LD_ADDR_VAR 0 5
37749: PUSH
37750: LD_INT 12
37752: ST_TO_ADDR
37753: GO 37794
37755: LD_INT 2
37757: DOUBLE
37758: EQUAL
37759: IFTRUE 37763
37761: GO 37774
37763: POP
// tech := tech_mortar ; 3 :
37764: LD_ADDR_VAR 0 5
37768: PUSH
37769: LD_INT 41
37771: ST_TO_ADDR
37772: GO 37794
37774: LD_INT 3
37776: DOUBLE
37777: EQUAL
37778: IFTRUE 37782
37780: GO 37793
37782: POP
// tech := tech_bazooka ; end ;
37783: LD_ADDR_VAR 0 5
37787: PUSH
37788: LD_INT 44
37790: ST_TO_ADDR
37791: GO 37794
37793: POP
// if Researched ( side , tech ) then
37794: LD_VAR 0 3
37798: PPUSH
37799: LD_VAR 0 5
37803: PPUSH
37804: CALL_OW 325
37808: IFFALSE 37835
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37810: LD_ADDR_VAR 0 2
37814: PUSH
37815: LD_INT 5
37817: PUSH
37818: LD_INT 8
37820: PUSH
37821: LD_INT 9
37823: PUSH
37824: EMPTY
37825: LIST
37826: LIST
37827: LIST
37828: PUSH
37829: LD_VAR 0 4
37833: ARRAY
37834: ST_TO_ADDR
// end ;
37835: LD_VAR 0 2
37839: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37840: LD_INT 0
37842: PPUSH
37843: PPUSH
37844: PPUSH
// if not mines then
37845: LD_VAR 0 2
37849: NOT
37850: IFFALSE 37854
// exit ;
37852: GO 37998
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37854: LD_ADDR_VAR 0 5
37858: PUSH
37859: LD_INT 81
37861: PUSH
37862: LD_VAR 0 1
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 3
37873: PUSH
37874: LD_INT 21
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PPUSH
37892: CALL_OW 69
37896: ST_TO_ADDR
// for i in mines do
37897: LD_ADDR_VAR 0 4
37901: PUSH
37902: LD_VAR 0 2
37906: PUSH
37907: FOR_IN
37908: IFFALSE 37996
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37910: LD_VAR 0 4
37914: PUSH
37915: LD_INT 1
37917: ARRAY
37918: PPUSH
37919: LD_VAR 0 4
37923: PUSH
37924: LD_INT 2
37926: ARRAY
37927: PPUSH
37928: CALL_OW 458
37932: NOT
37933: IFFALSE 37937
// continue ;
37935: GO 37907
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37937: LD_VAR 0 4
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PPUSH
37946: LD_VAR 0 4
37950: PUSH
37951: LD_INT 2
37953: ARRAY
37954: PPUSH
37955: CALL_OW 428
37959: PUSH
37960: LD_VAR 0 5
37964: IN
37965: IFFALSE 37994
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37967: LD_VAR 0 4
37971: PUSH
37972: LD_INT 1
37974: ARRAY
37975: PPUSH
37976: LD_VAR 0 4
37980: PUSH
37981: LD_INT 2
37983: ARRAY
37984: PPUSH
37985: LD_VAR 0 1
37989: PPUSH
37990: CALL_OW 456
// end ;
37994: GO 37907
37996: POP
37997: POP
// end ;
37998: LD_VAR 0 3
38002: RET
// export function Count ( array ) ; var i ; begin
38003: LD_INT 0
38005: PPUSH
38006: PPUSH
// result := 0 ;
38007: LD_ADDR_VAR 0 2
38011: PUSH
38012: LD_INT 0
38014: ST_TO_ADDR
// for i in array do
38015: LD_ADDR_VAR 0 3
38019: PUSH
38020: LD_VAR 0 1
38024: PUSH
38025: FOR_IN
38026: IFFALSE 38050
// if i then
38028: LD_VAR 0 3
38032: IFFALSE 38048
// result := result + 1 ;
38034: LD_ADDR_VAR 0 2
38038: PUSH
38039: LD_VAR 0 2
38043: PUSH
38044: LD_INT 1
38046: PLUS
38047: ST_TO_ADDR
38048: GO 38025
38050: POP
38051: POP
// end ;
38052: LD_VAR 0 2
38056: RET
// export function IsEmpty ( building ) ; begin
38057: LD_INT 0
38059: PPUSH
// if not building then
38060: LD_VAR 0 1
38064: NOT
38065: IFFALSE 38069
// exit ;
38067: GO 38112
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
38069: LD_ADDR_VAR 0 2
38073: PUSH
38074: LD_VAR 0 1
38078: PUSH
38079: LD_INT 22
38081: PUSH
38082: LD_VAR 0 1
38086: PPUSH
38087: CALL_OW 255
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 58
38098: PUSH
38099: EMPTY
38100: LIST
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PPUSH
38106: CALL_OW 69
38110: IN
38111: ST_TO_ADDR
// end ;
38112: LD_VAR 0 2
38116: RET
// export function IsNotFull ( building ) ; begin
38117: LD_INT 0
38119: PPUSH
// if not building then
38120: LD_VAR 0 1
38124: NOT
38125: IFFALSE 38129
// exit ;
38127: GO 38148
// result := UnitsInside ( building ) < 6 ;
38129: LD_ADDR_VAR 0 2
38133: PUSH
38134: LD_VAR 0 1
38138: PPUSH
38139: CALL_OW 313
38143: PUSH
38144: LD_INT 6
38146: LESS
38147: ST_TO_ADDR
// end ;
38148: LD_VAR 0 2
38152: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
38153: LD_INT 0
38155: PPUSH
38156: PPUSH
38157: PPUSH
38158: PPUSH
// tmp := [ ] ;
38159: LD_ADDR_VAR 0 3
38163: PUSH
38164: EMPTY
38165: ST_TO_ADDR
// list := [ ] ;
38166: LD_ADDR_VAR 0 5
38170: PUSH
38171: EMPTY
38172: ST_TO_ADDR
// for i = 16 to 25 do
38173: LD_ADDR_VAR 0 4
38177: PUSH
38178: DOUBLE
38179: LD_INT 16
38181: DEC
38182: ST_TO_ADDR
38183: LD_INT 25
38185: PUSH
38186: FOR_TO
38187: IFFALSE 38260
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
38189: LD_ADDR_VAR 0 3
38193: PUSH
38194: LD_VAR 0 3
38198: PUSH
38199: LD_INT 22
38201: PUSH
38202: LD_VAR 0 1
38206: PPUSH
38207: CALL_OW 255
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 91
38218: PUSH
38219: LD_VAR 0 1
38223: PUSH
38224: LD_INT 6
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: PUSH
38232: LD_INT 30
38234: PUSH
38235: LD_VAR 0 4
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: LIST
38248: PUSH
38249: EMPTY
38250: LIST
38251: PPUSH
38252: CALL_OW 69
38256: ADD
38257: ST_TO_ADDR
38258: GO 38186
38260: POP
38261: POP
// for i = 1 to tmp do
38262: LD_ADDR_VAR 0 4
38266: PUSH
38267: DOUBLE
38268: LD_INT 1
38270: DEC
38271: ST_TO_ADDR
38272: LD_VAR 0 3
38276: PUSH
38277: FOR_TO
38278: IFFALSE 38366
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
38280: LD_ADDR_VAR 0 5
38284: PUSH
38285: LD_VAR 0 5
38289: PUSH
38290: LD_VAR 0 3
38294: PUSH
38295: LD_VAR 0 4
38299: ARRAY
38300: PPUSH
38301: CALL_OW 266
38305: PUSH
38306: LD_VAR 0 3
38310: PUSH
38311: LD_VAR 0 4
38315: ARRAY
38316: PPUSH
38317: CALL_OW 250
38321: PUSH
38322: LD_VAR 0 3
38326: PUSH
38327: LD_VAR 0 4
38331: ARRAY
38332: PPUSH
38333: CALL_OW 251
38337: PUSH
38338: LD_VAR 0 3
38342: PUSH
38343: LD_VAR 0 4
38347: ARRAY
38348: PPUSH
38349: CALL_OW 254
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: PUSH
38360: EMPTY
38361: LIST
38362: ADD
38363: ST_TO_ADDR
38364: GO 38277
38366: POP
38367: POP
// result := list ;
38368: LD_ADDR_VAR 0 2
38372: PUSH
38373: LD_VAR 0 5
38377: ST_TO_ADDR
// end ;
38378: LD_VAR 0 2
38382: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
38383: LD_INT 0
38385: PPUSH
38386: PPUSH
38387: PPUSH
38388: PPUSH
38389: PPUSH
38390: PPUSH
38391: PPUSH
// if not factory then
38392: LD_VAR 0 1
38396: NOT
38397: IFFALSE 38401
// exit ;
38399: GO 38994
// if control = control_apeman then
38401: LD_VAR 0 4
38405: PUSH
38406: LD_INT 5
38408: EQUAL
38409: IFFALSE 38518
// begin tmp := UnitsInside ( factory ) ;
38411: LD_ADDR_VAR 0 8
38415: PUSH
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 313
38425: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
38426: LD_VAR 0 8
38430: PPUSH
38431: LD_INT 25
38433: PUSH
38434: LD_INT 12
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PPUSH
38441: CALL_OW 72
38445: NOT
38446: IFFALSE 38456
// control := control_manual ;
38448: LD_ADDR_VAR 0 4
38452: PUSH
38453: LD_INT 1
38455: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
38456: LD_ADDR_VAR 0 8
38460: PUSH
38461: LD_VAR 0 1
38465: PPUSH
38466: CALL 38153 0 1
38470: ST_TO_ADDR
// if tmp then
38471: LD_VAR 0 8
38475: IFFALSE 38518
// begin for i in tmp do
38477: LD_ADDR_VAR 0 7
38481: PUSH
38482: LD_VAR 0 8
38486: PUSH
38487: FOR_IN
38488: IFFALSE 38516
// if i [ 1 ] = b_ext_radio then
38490: LD_VAR 0 7
38494: PUSH
38495: LD_INT 1
38497: ARRAY
38498: PUSH
38499: LD_INT 22
38501: EQUAL
38502: IFFALSE 38514
// begin control := control_remote ;
38504: LD_ADDR_VAR 0 4
38508: PUSH
38509: LD_INT 2
38511: ST_TO_ADDR
// break ;
38512: GO 38516
// end ;
38514: GO 38487
38516: POP
38517: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_VAR 0 2
38527: PPUSH
38528: LD_VAR 0 3
38532: PPUSH
38533: LD_VAR 0 4
38537: PPUSH
38538: LD_VAR 0 5
38542: PPUSH
38543: CALL_OW 448
38547: IFFALSE 38582
// begin result := [ chassis , engine , control , weapon ] ;
38549: LD_ADDR_VAR 0 6
38553: PUSH
38554: LD_VAR 0 2
38558: PUSH
38559: LD_VAR 0 3
38563: PUSH
38564: LD_VAR 0 4
38568: PUSH
38569: LD_VAR 0 5
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: ST_TO_ADDR
// exit ;
38580: GO 38994
// end ; _chassis := AvailableChassisList ( factory ) ;
38582: LD_ADDR_VAR 0 9
38586: PUSH
38587: LD_VAR 0 1
38591: PPUSH
38592: CALL_OW 475
38596: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
38597: LD_ADDR_VAR 0 11
38601: PUSH
38602: LD_VAR 0 1
38606: PPUSH
38607: CALL_OW 476
38611: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
38612: LD_ADDR_VAR 0 12
38616: PUSH
38617: LD_VAR 0 1
38621: PPUSH
38622: CALL_OW 477
38626: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
38627: LD_ADDR_VAR 0 10
38631: PUSH
38632: LD_VAR 0 1
38636: PPUSH
38637: CALL_OW 478
38641: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38642: LD_VAR 0 9
38646: NOT
38647: PUSH
38648: LD_VAR 0 11
38652: NOT
38653: OR
38654: PUSH
38655: LD_VAR 0 12
38659: NOT
38660: OR
38661: PUSH
38662: LD_VAR 0 10
38666: NOT
38667: OR
38668: IFFALSE 38703
// begin result := [ chassis , engine , control , weapon ] ;
38670: LD_ADDR_VAR 0 6
38674: PUSH
38675: LD_VAR 0 2
38679: PUSH
38680: LD_VAR 0 3
38684: PUSH
38685: LD_VAR 0 4
38689: PUSH
38690: LD_VAR 0 5
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: ST_TO_ADDR
// exit ;
38701: GO 38994
// end ; if not chassis in _chassis then
38703: LD_VAR 0 2
38707: PUSH
38708: LD_VAR 0 9
38712: IN
38713: NOT
38714: IFFALSE 38740
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38716: LD_ADDR_VAR 0 2
38720: PUSH
38721: LD_VAR 0 9
38725: PUSH
38726: LD_INT 1
38728: PPUSH
38729: LD_VAR 0 9
38733: PPUSH
38734: CALL_OW 12
38738: ARRAY
38739: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38740: LD_VAR 0 2
38744: PPUSH
38745: LD_VAR 0 3
38749: PPUSH
38750: CALL 38999 0 2
38754: NOT
38755: IFFALSE 38814
// repeat engine := _engine [ 1 ] ;
38757: LD_ADDR_VAR 0 3
38761: PUSH
38762: LD_VAR 0 11
38766: PUSH
38767: LD_INT 1
38769: ARRAY
38770: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38771: LD_ADDR_VAR 0 11
38775: PUSH
38776: LD_VAR 0 11
38780: PPUSH
38781: LD_INT 1
38783: PPUSH
38784: CALL_OW 3
38788: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38789: LD_VAR 0 2
38793: PPUSH
38794: LD_VAR 0 3
38798: PPUSH
38799: CALL 38999 0 2
38803: PUSH
38804: LD_VAR 0 11
38808: PUSH
38809: EMPTY
38810: EQUAL
38811: OR
38812: IFFALSE 38757
// if not control in _control then
38814: LD_VAR 0 4
38818: PUSH
38819: LD_VAR 0 12
38823: IN
38824: NOT
38825: IFFALSE 38851
// control := _control [ rand ( 1 , _control ) ] ;
38827: LD_ADDR_VAR 0 4
38831: PUSH
38832: LD_VAR 0 12
38836: PUSH
38837: LD_INT 1
38839: PPUSH
38840: LD_VAR 0 12
38844: PPUSH
38845: CALL_OW 12
38849: ARRAY
38850: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38851: LD_VAR 0 2
38855: PPUSH
38856: LD_VAR 0 5
38860: PPUSH
38861: CALL 39219 0 2
38865: NOT
38866: IFFALSE 38925
// repeat weapon := _weapon [ 1 ] ;
38868: LD_ADDR_VAR 0 5
38872: PUSH
38873: LD_VAR 0 10
38877: PUSH
38878: LD_INT 1
38880: ARRAY
38881: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38882: LD_ADDR_VAR 0 10
38886: PUSH
38887: LD_VAR 0 10
38891: PPUSH
38892: LD_INT 1
38894: PPUSH
38895: CALL_OW 3
38899: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38900: LD_VAR 0 2
38904: PPUSH
38905: LD_VAR 0 5
38909: PPUSH
38910: CALL 39219 0 2
38914: PUSH
38915: LD_VAR 0 10
38919: PUSH
38920: EMPTY
38921: EQUAL
38922: OR
38923: IFFALSE 38868
// result := [ ] ;
38925: LD_ADDR_VAR 0 6
38929: PUSH
38930: EMPTY
38931: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38932: LD_VAR 0 1
38936: PPUSH
38937: LD_VAR 0 2
38941: PPUSH
38942: LD_VAR 0 3
38946: PPUSH
38947: LD_VAR 0 4
38951: PPUSH
38952: LD_VAR 0 5
38956: PPUSH
38957: CALL_OW 448
38961: IFFALSE 38994
// result := [ chassis , engine , control , weapon ] ;
38963: LD_ADDR_VAR 0 6
38967: PUSH
38968: LD_VAR 0 2
38972: PUSH
38973: LD_VAR 0 3
38977: PUSH
38978: LD_VAR 0 4
38982: PUSH
38983: LD_VAR 0 5
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: ST_TO_ADDR
// end ;
38994: LD_VAR 0 6
38998: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38999: LD_INT 0
39001: PPUSH
// if not chassis or not engine then
39002: LD_VAR 0 1
39006: NOT
39007: PUSH
39008: LD_VAR 0 2
39012: NOT
39013: OR
39014: IFFALSE 39018
// exit ;
39016: GO 39214
// case engine of engine_solar :
39018: LD_VAR 0 2
39022: PUSH
39023: LD_INT 2
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39031
39029: GO 39069
39031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
39032: LD_ADDR_VAR 0 3
39036: PUSH
39037: LD_INT 11
39039: PUSH
39040: LD_INT 12
39042: PUSH
39043: LD_INT 13
39045: PUSH
39046: LD_INT 14
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 3
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: ST_TO_ADDR
39067: GO 39198
39069: LD_INT 1
39071: DOUBLE
39072: EQUAL
39073: IFTRUE 39077
39075: GO 39139
39077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
39078: LD_ADDR_VAR 0 3
39082: PUSH
39083: LD_INT 11
39085: PUSH
39086: LD_INT 12
39088: PUSH
39089: LD_INT 13
39091: PUSH
39092: LD_INT 14
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: LD_INT 2
39100: PUSH
39101: LD_INT 3
39103: PUSH
39104: LD_INT 4
39106: PUSH
39107: LD_INT 5
39109: PUSH
39110: LD_INT 21
39112: PUSH
39113: LD_INT 23
39115: PUSH
39116: LD_INT 22
39118: PUSH
39119: LD_INT 24
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: ST_TO_ADDR
39137: GO 39198
39139: LD_INT 3
39141: DOUBLE
39142: EQUAL
39143: IFTRUE 39147
39145: GO 39197
39147: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39148: LD_ADDR_VAR 0 3
39152: PUSH
39153: LD_INT 13
39155: PUSH
39156: LD_INT 14
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: LD_INT 4
39167: PUSH
39168: LD_INT 5
39170: PUSH
39171: LD_INT 21
39173: PUSH
39174: LD_INT 22
39176: PUSH
39177: LD_INT 23
39179: PUSH
39180: LD_INT 24
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: LIST
39187: LIST
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
39195: GO 39198
39197: POP
// result := ( chassis in result ) ;
39198: LD_ADDR_VAR 0 3
39202: PUSH
39203: LD_VAR 0 1
39207: PUSH
39208: LD_VAR 0 3
39212: IN
39213: ST_TO_ADDR
// end ;
39214: LD_VAR 0 3
39218: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
39219: LD_INT 0
39221: PPUSH
// if not chassis or not weapon then
39222: LD_VAR 0 1
39226: NOT
39227: PUSH
39228: LD_VAR 0 2
39232: NOT
39233: OR
39234: IFFALSE 39238
// exit ;
39236: GO 40264
// case weapon of us_machine_gun :
39238: LD_VAR 0 2
39242: PUSH
39243: LD_INT 2
39245: DOUBLE
39246: EQUAL
39247: IFTRUE 39251
39249: GO 39281
39251: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
39252: LD_ADDR_VAR 0 3
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 3
39265: PUSH
39266: LD_INT 4
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: ST_TO_ADDR
39279: GO 40248
39281: LD_INT 3
39283: DOUBLE
39284: EQUAL
39285: IFTRUE 39289
39287: GO 39319
39289: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
39290: LD_ADDR_VAR 0 3
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: LD_INT 2
39300: PUSH
39301: LD_INT 3
39303: PUSH
39304: LD_INT 4
39306: PUSH
39307: LD_INT 5
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
39317: GO 40248
39319: LD_INT 11
39321: DOUBLE
39322: EQUAL
39323: IFTRUE 39327
39325: GO 39357
39327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
39328: LD_ADDR_VAR 0 3
39332: PUSH
39333: LD_INT 1
39335: PUSH
39336: LD_INT 2
39338: PUSH
39339: LD_INT 3
39341: PUSH
39342: LD_INT 4
39344: PUSH
39345: LD_INT 5
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
39355: GO 40248
39357: LD_INT 4
39359: DOUBLE
39360: EQUAL
39361: IFTRUE 39365
39363: GO 39391
39365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
39366: LD_ADDR_VAR 0 3
39370: PUSH
39371: LD_INT 2
39373: PUSH
39374: LD_INT 3
39376: PUSH
39377: LD_INT 4
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: ST_TO_ADDR
39389: GO 40248
39391: LD_INT 5
39393: DOUBLE
39394: EQUAL
39395: IFTRUE 39399
39397: GO 39425
39399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_INT 2
39407: PUSH
39408: LD_INT 3
39410: PUSH
39411: LD_INT 4
39413: PUSH
39414: LD_INT 5
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: ST_TO_ADDR
39423: GO 40248
39425: LD_INT 9
39427: DOUBLE
39428: EQUAL
39429: IFTRUE 39433
39431: GO 39459
39433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_INT 2
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 4
39447: PUSH
39448: LD_INT 5
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: ST_TO_ADDR
39457: GO 40248
39459: LD_INT 7
39461: DOUBLE
39462: EQUAL
39463: IFTRUE 39467
39465: GO 39493
39467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
39468: LD_ADDR_VAR 0 3
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 4
39481: PUSH
39482: LD_INT 5
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: ST_TO_ADDR
39491: GO 40248
39493: LD_INT 12
39495: DOUBLE
39496: EQUAL
39497: IFTRUE 39501
39499: GO 39527
39501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
39502: LD_ADDR_VAR 0 3
39506: PUSH
39507: LD_INT 2
39509: PUSH
39510: LD_INT 3
39512: PUSH
39513: LD_INT 4
39515: PUSH
39516: LD_INT 5
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: ST_TO_ADDR
39525: GO 40248
39527: LD_INT 13
39529: DOUBLE
39530: EQUAL
39531: IFTRUE 39535
39533: GO 39561
39535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
39536: LD_ADDR_VAR 0 3
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: LD_INT 3
39546: PUSH
39547: LD_INT 4
39549: PUSH
39550: LD_INT 5
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: ST_TO_ADDR
39559: GO 40248
39561: LD_INT 14
39563: DOUBLE
39564: EQUAL
39565: IFTRUE 39569
39567: GO 39587
39569: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
39570: LD_ADDR_VAR 0 3
39574: PUSH
39575: LD_INT 4
39577: PUSH
39578: LD_INT 5
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: ST_TO_ADDR
39585: GO 40248
39587: LD_INT 6
39589: DOUBLE
39590: EQUAL
39591: IFTRUE 39595
39593: GO 39613
39595: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_INT 4
39603: PUSH
39604: LD_INT 5
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: ST_TO_ADDR
39611: GO 40248
39613: LD_INT 10
39615: DOUBLE
39616: EQUAL
39617: IFTRUE 39621
39619: GO 39639
39621: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
39622: LD_ADDR_VAR 0 3
39626: PUSH
39627: LD_INT 4
39629: PUSH
39630: LD_INT 5
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: ST_TO_ADDR
39637: GO 40248
39639: LD_INT 22
39641: DOUBLE
39642: EQUAL
39643: IFTRUE 39647
39645: GO 39673
39647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39648: LD_ADDR_VAR 0 3
39652: PUSH
39653: LD_INT 11
39655: PUSH
39656: LD_INT 12
39658: PUSH
39659: LD_INT 13
39661: PUSH
39662: LD_INT 14
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
39671: GO 40248
39673: LD_INT 23
39675: DOUBLE
39676: EQUAL
39677: IFTRUE 39681
39679: GO 39707
39681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39682: LD_ADDR_VAR 0 3
39686: PUSH
39687: LD_INT 11
39689: PUSH
39690: LD_INT 12
39692: PUSH
39693: LD_INT 13
39695: PUSH
39696: LD_INT 14
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: ST_TO_ADDR
39705: GO 40248
39707: LD_INT 24
39709: DOUBLE
39710: EQUAL
39711: IFTRUE 39715
39713: GO 39741
39715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39716: LD_ADDR_VAR 0 3
39720: PUSH
39721: LD_INT 11
39723: PUSH
39724: LD_INT 12
39726: PUSH
39727: LD_INT 13
39729: PUSH
39730: LD_INT 14
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: ST_TO_ADDR
39739: GO 40248
39741: LD_INT 30
39743: DOUBLE
39744: EQUAL
39745: IFTRUE 39749
39747: GO 39775
39749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39750: LD_ADDR_VAR 0 3
39754: PUSH
39755: LD_INT 11
39757: PUSH
39758: LD_INT 12
39760: PUSH
39761: LD_INT 13
39763: PUSH
39764: LD_INT 14
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: ST_TO_ADDR
39773: GO 40248
39775: LD_INT 25
39777: DOUBLE
39778: EQUAL
39779: IFTRUE 39783
39781: GO 39801
39783: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_INT 13
39791: PUSH
39792: LD_INT 14
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: ST_TO_ADDR
39799: GO 40248
39801: LD_INT 27
39803: DOUBLE
39804: EQUAL
39805: IFTRUE 39809
39807: GO 39827
39809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39810: LD_ADDR_VAR 0 3
39814: PUSH
39815: LD_INT 13
39817: PUSH
39818: LD_INT 14
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: ST_TO_ADDR
39825: GO 40248
39827: LD_INT 28
39829: DOUBLE
39830: EQUAL
39831: IFTRUE 39835
39833: GO 39853
39835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39836: LD_ADDR_VAR 0 3
39840: PUSH
39841: LD_INT 13
39843: PUSH
39844: LD_INT 14
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: ST_TO_ADDR
39851: GO 40248
39853: LD_INT 29
39855: DOUBLE
39856: EQUAL
39857: IFTRUE 39861
39859: GO 39879
39861: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39862: LD_ADDR_VAR 0 3
39866: PUSH
39867: LD_INT 13
39869: PUSH
39870: LD_INT 14
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: ST_TO_ADDR
39877: GO 40248
39879: LD_INT 31
39881: DOUBLE
39882: EQUAL
39883: IFTRUE 39887
39885: GO 39905
39887: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39888: LD_ADDR_VAR 0 3
39892: PUSH
39893: LD_INT 13
39895: PUSH
39896: LD_INT 14
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: ST_TO_ADDR
39903: GO 40248
39905: LD_INT 26
39907: DOUBLE
39908: EQUAL
39909: IFTRUE 39913
39911: GO 39931
39913: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 13
39921: PUSH
39922: LD_INT 14
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: ST_TO_ADDR
39929: GO 40248
39931: LD_INT 42
39933: DOUBLE
39934: EQUAL
39935: IFTRUE 39939
39937: GO 39965
39939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39940: LD_ADDR_VAR 0 3
39944: PUSH
39945: LD_INT 21
39947: PUSH
39948: LD_INT 22
39950: PUSH
39951: LD_INT 23
39953: PUSH
39954: LD_INT 24
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: ST_TO_ADDR
39963: GO 40248
39965: LD_INT 43
39967: DOUBLE
39968: EQUAL
39969: IFTRUE 39973
39971: GO 39999
39973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_INT 21
39981: PUSH
39982: LD_INT 22
39984: PUSH
39985: LD_INT 23
39987: PUSH
39988: LD_INT 24
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: ST_TO_ADDR
39997: GO 40248
39999: LD_INT 44
40001: DOUBLE
40002: EQUAL
40003: IFTRUE 40007
40005: GO 40033
40007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
40008: LD_ADDR_VAR 0 3
40012: PUSH
40013: LD_INT 21
40015: PUSH
40016: LD_INT 22
40018: PUSH
40019: LD_INT 23
40021: PUSH
40022: LD_INT 24
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: ST_TO_ADDR
40031: GO 40248
40033: LD_INT 45
40035: DOUBLE
40036: EQUAL
40037: IFTRUE 40041
40039: GO 40067
40041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
40042: LD_ADDR_VAR 0 3
40046: PUSH
40047: LD_INT 21
40049: PUSH
40050: LD_INT 22
40052: PUSH
40053: LD_INT 23
40055: PUSH
40056: LD_INT 24
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: ST_TO_ADDR
40065: GO 40248
40067: LD_INT 49
40069: DOUBLE
40070: EQUAL
40071: IFTRUE 40075
40073: GO 40101
40075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
40076: LD_ADDR_VAR 0 3
40080: PUSH
40081: LD_INT 21
40083: PUSH
40084: LD_INT 22
40086: PUSH
40087: LD_INT 23
40089: PUSH
40090: LD_INT 24
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
40099: GO 40248
40101: LD_INT 51
40103: DOUBLE
40104: EQUAL
40105: IFTRUE 40109
40107: GO 40135
40109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
40110: LD_ADDR_VAR 0 3
40114: PUSH
40115: LD_INT 21
40117: PUSH
40118: LD_INT 22
40120: PUSH
40121: LD_INT 23
40123: PUSH
40124: LD_INT 24
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
40133: GO 40248
40135: LD_INT 52
40137: DOUBLE
40138: EQUAL
40139: IFTRUE 40143
40141: GO 40169
40143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
40144: LD_ADDR_VAR 0 3
40148: PUSH
40149: LD_INT 21
40151: PUSH
40152: LD_INT 22
40154: PUSH
40155: LD_INT 23
40157: PUSH
40158: LD_INT 24
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
40167: GO 40248
40169: LD_INT 53
40171: DOUBLE
40172: EQUAL
40173: IFTRUE 40177
40175: GO 40195
40177: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
40178: LD_ADDR_VAR 0 3
40182: PUSH
40183: LD_INT 23
40185: PUSH
40186: LD_INT 24
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: ST_TO_ADDR
40193: GO 40248
40195: LD_INT 46
40197: DOUBLE
40198: EQUAL
40199: IFTRUE 40203
40201: GO 40221
40203: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
40204: LD_ADDR_VAR 0 3
40208: PUSH
40209: LD_INT 23
40211: PUSH
40212: LD_INT 24
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: ST_TO_ADDR
40219: GO 40248
40221: LD_INT 47
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40247
40229: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
40230: LD_ADDR_VAR 0 3
40234: PUSH
40235: LD_INT 23
40237: PUSH
40238: LD_INT 24
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: ST_TO_ADDR
40245: GO 40248
40247: POP
// result := ( chassis in result ) ;
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_VAR 0 1
40257: PUSH
40258: LD_VAR 0 3
40262: IN
40263: ST_TO_ADDR
// end ;
40264: LD_VAR 0 3
40268: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
40269: LD_INT 0
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
// result := array ;
40278: LD_ADDR_VAR 0 5
40282: PUSH
40283: LD_VAR 0 1
40287: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
40288: LD_VAR 0 1
40292: NOT
40293: PUSH
40294: LD_VAR 0 2
40298: NOT
40299: OR
40300: PUSH
40301: LD_VAR 0 3
40305: NOT
40306: OR
40307: PUSH
40308: LD_VAR 0 2
40312: PUSH
40313: LD_VAR 0 1
40317: GREATER
40318: OR
40319: PUSH
40320: LD_VAR 0 3
40324: PUSH
40325: LD_VAR 0 1
40329: GREATER
40330: OR
40331: IFFALSE 40335
// exit ;
40333: GO 40631
// if direction then
40335: LD_VAR 0 4
40339: IFFALSE 40403
// begin d := 1 ;
40341: LD_ADDR_VAR 0 9
40345: PUSH
40346: LD_INT 1
40348: ST_TO_ADDR
// if i_from > i_to then
40349: LD_VAR 0 2
40353: PUSH
40354: LD_VAR 0 3
40358: GREATER
40359: IFFALSE 40385
// length := ( array - i_from ) + i_to else
40361: LD_ADDR_VAR 0 11
40365: PUSH
40366: LD_VAR 0 1
40370: PUSH
40371: LD_VAR 0 2
40375: MINUS
40376: PUSH
40377: LD_VAR 0 3
40381: PLUS
40382: ST_TO_ADDR
40383: GO 40401
// length := i_to - i_from ;
40385: LD_ADDR_VAR 0 11
40389: PUSH
40390: LD_VAR 0 3
40394: PUSH
40395: LD_VAR 0 2
40399: MINUS
40400: ST_TO_ADDR
// end else
40401: GO 40464
// begin d := - 1 ;
40403: LD_ADDR_VAR 0 9
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: ST_TO_ADDR
// if i_from > i_to then
40412: LD_VAR 0 2
40416: PUSH
40417: LD_VAR 0 3
40421: GREATER
40422: IFFALSE 40442
// length := i_from - i_to else
40424: LD_ADDR_VAR 0 11
40428: PUSH
40429: LD_VAR 0 2
40433: PUSH
40434: LD_VAR 0 3
40438: MINUS
40439: ST_TO_ADDR
40440: GO 40464
// length := ( array - i_to ) + i_from ;
40442: LD_ADDR_VAR 0 11
40446: PUSH
40447: LD_VAR 0 1
40451: PUSH
40452: LD_VAR 0 3
40456: MINUS
40457: PUSH
40458: LD_VAR 0 2
40462: PLUS
40463: ST_TO_ADDR
// end ; if not length then
40464: LD_VAR 0 11
40468: NOT
40469: IFFALSE 40473
// exit ;
40471: GO 40631
// tmp := array ;
40473: LD_ADDR_VAR 0 10
40477: PUSH
40478: LD_VAR 0 1
40482: ST_TO_ADDR
// for i = 1 to length do
40483: LD_ADDR_VAR 0 6
40487: PUSH
40488: DOUBLE
40489: LD_INT 1
40491: DEC
40492: ST_TO_ADDR
40493: LD_VAR 0 11
40497: PUSH
40498: FOR_TO
40499: IFFALSE 40619
// begin for j = 1 to array do
40501: LD_ADDR_VAR 0 7
40505: PUSH
40506: DOUBLE
40507: LD_INT 1
40509: DEC
40510: ST_TO_ADDR
40511: LD_VAR 0 1
40515: PUSH
40516: FOR_TO
40517: IFFALSE 40605
// begin k := j + d ;
40519: LD_ADDR_VAR 0 8
40523: PUSH
40524: LD_VAR 0 7
40528: PUSH
40529: LD_VAR 0 9
40533: PLUS
40534: ST_TO_ADDR
// if k > array then
40535: LD_VAR 0 8
40539: PUSH
40540: LD_VAR 0 1
40544: GREATER
40545: IFFALSE 40555
// k := 1 ;
40547: LD_ADDR_VAR 0 8
40551: PUSH
40552: LD_INT 1
40554: ST_TO_ADDR
// if not k then
40555: LD_VAR 0 8
40559: NOT
40560: IFFALSE 40572
// k := array ;
40562: LD_ADDR_VAR 0 8
40566: PUSH
40567: LD_VAR 0 1
40571: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
40572: LD_ADDR_VAR 0 10
40576: PUSH
40577: LD_VAR 0 10
40581: PPUSH
40582: LD_VAR 0 8
40586: PPUSH
40587: LD_VAR 0 1
40591: PUSH
40592: LD_VAR 0 7
40596: ARRAY
40597: PPUSH
40598: CALL_OW 1
40602: ST_TO_ADDR
// end ;
40603: GO 40516
40605: POP
40606: POP
// array := tmp ;
40607: LD_ADDR_VAR 0 1
40611: PUSH
40612: LD_VAR 0 10
40616: ST_TO_ADDR
// end ;
40617: GO 40498
40619: POP
40620: POP
// result := array ;
40621: LD_ADDR_VAR 0 5
40625: PUSH
40626: LD_VAR 0 1
40630: ST_TO_ADDR
// end ;
40631: LD_VAR 0 5
40635: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40636: LD_INT 0
40638: PPUSH
40639: PPUSH
// result := 0 ;
40640: LD_ADDR_VAR 0 3
40644: PUSH
40645: LD_INT 0
40647: ST_TO_ADDR
// if not array or not value in array then
40648: LD_VAR 0 1
40652: NOT
40653: PUSH
40654: LD_VAR 0 2
40658: PUSH
40659: LD_VAR 0 1
40663: IN
40664: NOT
40665: OR
40666: IFFALSE 40670
// exit ;
40668: GO 40724
// for i = 1 to array do
40670: LD_ADDR_VAR 0 4
40674: PUSH
40675: DOUBLE
40676: LD_INT 1
40678: DEC
40679: ST_TO_ADDR
40680: LD_VAR 0 1
40684: PUSH
40685: FOR_TO
40686: IFFALSE 40722
// if value = array [ i ] then
40688: LD_VAR 0 2
40692: PUSH
40693: LD_VAR 0 1
40697: PUSH
40698: LD_VAR 0 4
40702: ARRAY
40703: EQUAL
40704: IFFALSE 40720
// begin result := i ;
40706: LD_ADDR_VAR 0 3
40710: PUSH
40711: LD_VAR 0 4
40715: ST_TO_ADDR
// exit ;
40716: POP
40717: POP
40718: GO 40724
// end ;
40720: GO 40685
40722: POP
40723: POP
// end ;
40724: LD_VAR 0 3
40728: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40729: LD_INT 0
40731: PPUSH
// vc_chassis := chassis ;
40732: LD_ADDR_OWVAR 37
40736: PUSH
40737: LD_VAR 0 1
40741: ST_TO_ADDR
// vc_engine := engine ;
40742: LD_ADDR_OWVAR 39
40746: PUSH
40747: LD_VAR 0 2
40751: ST_TO_ADDR
// vc_control := control ;
40752: LD_ADDR_OWVAR 38
40756: PUSH
40757: LD_VAR 0 3
40761: ST_TO_ADDR
// vc_weapon := weapon ;
40762: LD_ADDR_OWVAR 40
40766: PUSH
40767: LD_VAR 0 4
40771: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40772: LD_ADDR_OWVAR 41
40776: PUSH
40777: LD_VAR 0 5
40781: ST_TO_ADDR
// end ;
40782: LD_VAR 0 6
40786: RET
// export function WantPlant ( unit ) ; var task ; begin
40787: LD_INT 0
40789: PPUSH
40790: PPUSH
// result := false ;
40791: LD_ADDR_VAR 0 2
40795: PUSH
40796: LD_INT 0
40798: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40799: LD_ADDR_VAR 0 3
40803: PUSH
40804: LD_VAR 0 1
40808: PPUSH
40809: CALL_OW 437
40813: ST_TO_ADDR
// if task then
40814: LD_VAR 0 3
40818: IFFALSE 40846
// if task [ 1 ] [ 1 ] = p then
40820: LD_VAR 0 3
40824: PUSH
40825: LD_INT 1
40827: ARRAY
40828: PUSH
40829: LD_INT 1
40831: ARRAY
40832: PUSH
40833: LD_STRING p
40835: EQUAL
40836: IFFALSE 40846
// result := true ;
40838: LD_ADDR_VAR 0 2
40842: PUSH
40843: LD_INT 1
40845: ST_TO_ADDR
// end ;
40846: LD_VAR 0 2
40850: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40851: LD_INT 0
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
// if pos < 1 then
40857: LD_VAR 0 2
40861: PUSH
40862: LD_INT 1
40864: LESS
40865: IFFALSE 40869
// exit ;
40867: GO 41172
// if pos = 1 then
40869: LD_VAR 0 2
40873: PUSH
40874: LD_INT 1
40876: EQUAL
40877: IFFALSE 40910
// result := Replace ( arr , pos [ 1 ] , value ) else
40879: LD_ADDR_VAR 0 4
40883: PUSH
40884: LD_VAR 0 1
40888: PPUSH
40889: LD_VAR 0 2
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: LD_VAR 0 3
40902: PPUSH
40903: CALL_OW 1
40907: ST_TO_ADDR
40908: GO 41172
// begin tmp := arr ;
40910: LD_ADDR_VAR 0 6
40914: PUSH
40915: LD_VAR 0 1
40919: ST_TO_ADDR
// s_arr := [ tmp ] ;
40920: LD_ADDR_VAR 0 7
40924: PUSH
40925: LD_VAR 0 6
40929: PUSH
40930: EMPTY
40931: LIST
40932: ST_TO_ADDR
// for i = 1 to pos - 1 do
40933: LD_ADDR_VAR 0 5
40937: PUSH
40938: DOUBLE
40939: LD_INT 1
40941: DEC
40942: ST_TO_ADDR
40943: LD_VAR 0 2
40947: PUSH
40948: LD_INT 1
40950: MINUS
40951: PUSH
40952: FOR_TO
40953: IFFALSE 40998
// begin tmp := tmp [ pos [ i ] ] ;
40955: LD_ADDR_VAR 0 6
40959: PUSH
40960: LD_VAR 0 6
40964: PUSH
40965: LD_VAR 0 2
40969: PUSH
40970: LD_VAR 0 5
40974: ARRAY
40975: ARRAY
40976: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40977: LD_ADDR_VAR 0 7
40981: PUSH
40982: LD_VAR 0 7
40986: PUSH
40987: LD_VAR 0 6
40991: PUSH
40992: EMPTY
40993: LIST
40994: ADD
40995: ST_TO_ADDR
// end ;
40996: GO 40952
40998: POP
40999: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
41000: LD_ADDR_VAR 0 6
41004: PUSH
41005: LD_VAR 0 6
41009: PPUSH
41010: LD_VAR 0 2
41014: PUSH
41015: LD_VAR 0 2
41019: ARRAY
41020: PPUSH
41021: LD_VAR 0 3
41025: PPUSH
41026: CALL_OW 1
41030: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
41031: LD_ADDR_VAR 0 7
41035: PUSH
41036: LD_VAR 0 7
41040: PPUSH
41041: LD_VAR 0 7
41045: PPUSH
41046: LD_VAR 0 6
41050: PPUSH
41051: CALL_OW 1
41055: ST_TO_ADDR
// for i = s_arr downto 2 do
41056: LD_ADDR_VAR 0 5
41060: PUSH
41061: DOUBLE
41062: LD_VAR 0 7
41066: INC
41067: ST_TO_ADDR
41068: LD_INT 2
41070: PUSH
41071: FOR_DOWNTO
41072: IFFALSE 41156
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
41074: LD_ADDR_VAR 0 6
41078: PUSH
41079: LD_VAR 0 7
41083: PUSH
41084: LD_VAR 0 5
41088: PUSH
41089: LD_INT 1
41091: MINUS
41092: ARRAY
41093: PPUSH
41094: LD_VAR 0 2
41098: PUSH
41099: LD_VAR 0 5
41103: PUSH
41104: LD_INT 1
41106: MINUS
41107: ARRAY
41108: PPUSH
41109: LD_VAR 0 7
41113: PUSH
41114: LD_VAR 0 5
41118: ARRAY
41119: PPUSH
41120: CALL_OW 1
41124: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
41125: LD_ADDR_VAR 0 7
41129: PUSH
41130: LD_VAR 0 7
41134: PPUSH
41135: LD_VAR 0 5
41139: PUSH
41140: LD_INT 1
41142: MINUS
41143: PPUSH
41144: LD_VAR 0 6
41148: PPUSH
41149: CALL_OW 1
41153: ST_TO_ADDR
// end ;
41154: GO 41071
41156: POP
41157: POP
// result := s_arr [ 1 ] ;
41158: LD_ADDR_VAR 0 4
41162: PUSH
41163: LD_VAR 0 7
41167: PUSH
41168: LD_INT 1
41170: ARRAY
41171: ST_TO_ADDR
// end ; end ;
41172: LD_VAR 0 4
41176: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
41177: LD_INT 0
41179: PPUSH
41180: PPUSH
// if not list then
41181: LD_VAR 0 1
41185: NOT
41186: IFFALSE 41190
// exit ;
41188: GO 41281
// i := list [ pos1 ] ;
41190: LD_ADDR_VAR 0 5
41194: PUSH
41195: LD_VAR 0 1
41199: PUSH
41200: LD_VAR 0 2
41204: ARRAY
41205: ST_TO_ADDR
// if not i then
41206: LD_VAR 0 5
41210: NOT
41211: IFFALSE 41215
// exit ;
41213: GO 41281
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
41215: LD_ADDR_VAR 0 1
41219: PUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: LD_VAR 0 2
41229: PPUSH
41230: LD_VAR 0 1
41234: PUSH
41235: LD_VAR 0 3
41239: ARRAY
41240: PPUSH
41241: CALL_OW 1
41245: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
41246: LD_ADDR_VAR 0 1
41250: PUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: LD_VAR 0 3
41260: PPUSH
41261: LD_VAR 0 5
41265: PPUSH
41266: CALL_OW 1
41270: ST_TO_ADDR
// result := list ;
41271: LD_ADDR_VAR 0 4
41275: PUSH
41276: LD_VAR 0 1
41280: ST_TO_ADDR
// end ;
41281: LD_VAR 0 4
41285: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
41286: LD_INT 0
41288: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
41289: LD_ADDR_VAR 0 5
41293: PUSH
41294: LD_VAR 0 1
41298: PPUSH
41299: CALL_OW 250
41303: PPUSH
41304: LD_VAR 0 1
41308: PPUSH
41309: CALL_OW 251
41313: PPUSH
41314: LD_VAR 0 2
41318: PPUSH
41319: LD_VAR 0 3
41323: PPUSH
41324: LD_VAR 0 4
41328: PPUSH
41329: CALL 41339 0 5
41333: ST_TO_ADDR
// end ;
41334: LD_VAR 0 5
41338: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
41339: LD_INT 0
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
// if not list then
41345: LD_VAR 0 3
41349: NOT
41350: IFFALSE 41354
// exit ;
41352: GO 41742
// result := [ ] ;
41354: LD_ADDR_VAR 0 6
41358: PUSH
41359: EMPTY
41360: ST_TO_ADDR
// for i in list do
41361: LD_ADDR_VAR 0 7
41365: PUSH
41366: LD_VAR 0 3
41370: PUSH
41371: FOR_IN
41372: IFFALSE 41574
// begin tmp := GetDistUnitXY ( i , x , y ) ;
41374: LD_ADDR_VAR 0 9
41378: PUSH
41379: LD_VAR 0 7
41383: PPUSH
41384: LD_VAR 0 1
41388: PPUSH
41389: LD_VAR 0 2
41393: PPUSH
41394: CALL_OW 297
41398: ST_TO_ADDR
// if not result then
41399: LD_VAR 0 6
41403: NOT
41404: IFFALSE 41430
// result := [ [ i , tmp ] ] else
41406: LD_ADDR_VAR 0 6
41410: PUSH
41411: LD_VAR 0 7
41415: PUSH
41416: LD_VAR 0 9
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: ST_TO_ADDR
41428: GO 41572
// begin if result [ result ] [ 2 ] < tmp then
41430: LD_VAR 0 6
41434: PUSH
41435: LD_VAR 0 6
41439: ARRAY
41440: PUSH
41441: LD_INT 2
41443: ARRAY
41444: PUSH
41445: LD_VAR 0 9
41449: LESS
41450: IFFALSE 41492
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
41452: LD_ADDR_VAR 0 6
41456: PUSH
41457: LD_VAR 0 6
41461: PPUSH
41462: LD_VAR 0 6
41466: PUSH
41467: LD_INT 1
41469: PLUS
41470: PPUSH
41471: LD_VAR 0 7
41475: PUSH
41476: LD_VAR 0 9
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: CALL_OW 2
41489: ST_TO_ADDR
41490: GO 41572
// for j = 1 to result do
41492: LD_ADDR_VAR 0 8
41496: PUSH
41497: DOUBLE
41498: LD_INT 1
41500: DEC
41501: ST_TO_ADDR
41502: LD_VAR 0 6
41506: PUSH
41507: FOR_TO
41508: IFFALSE 41570
// begin if tmp < result [ j ] [ 2 ] then
41510: LD_VAR 0 9
41514: PUSH
41515: LD_VAR 0 6
41519: PUSH
41520: LD_VAR 0 8
41524: ARRAY
41525: PUSH
41526: LD_INT 2
41528: ARRAY
41529: LESS
41530: IFFALSE 41568
// begin result := Insert ( result , j , [ i , tmp ] ) ;
41532: LD_ADDR_VAR 0 6
41536: PUSH
41537: LD_VAR 0 6
41541: PPUSH
41542: LD_VAR 0 8
41546: PPUSH
41547: LD_VAR 0 7
41551: PUSH
41552: LD_VAR 0 9
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PPUSH
41561: CALL_OW 2
41565: ST_TO_ADDR
// break ;
41566: GO 41570
// end ; end ;
41568: GO 41507
41570: POP
41571: POP
// end ; end ;
41572: GO 41371
41574: POP
41575: POP
// if result and not asc then
41576: LD_VAR 0 6
41580: PUSH
41581: LD_VAR 0 4
41585: NOT
41586: AND
41587: IFFALSE 41662
// begin tmp := result ;
41589: LD_ADDR_VAR 0 9
41593: PUSH
41594: LD_VAR 0 6
41598: ST_TO_ADDR
// for i = tmp downto 1 do
41599: LD_ADDR_VAR 0 7
41603: PUSH
41604: DOUBLE
41605: LD_VAR 0 9
41609: INC
41610: ST_TO_ADDR
41611: LD_INT 1
41613: PUSH
41614: FOR_DOWNTO
41615: IFFALSE 41660
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41617: LD_ADDR_VAR 0 6
41621: PUSH
41622: LD_VAR 0 6
41626: PPUSH
41627: LD_VAR 0 9
41631: PUSH
41632: LD_VAR 0 7
41636: MINUS
41637: PUSH
41638: LD_INT 1
41640: PLUS
41641: PPUSH
41642: LD_VAR 0 9
41646: PUSH
41647: LD_VAR 0 7
41651: ARRAY
41652: PPUSH
41653: CALL_OW 1
41657: ST_TO_ADDR
41658: GO 41614
41660: POP
41661: POP
// end ; tmp := [ ] ;
41662: LD_ADDR_VAR 0 9
41666: PUSH
41667: EMPTY
41668: ST_TO_ADDR
// if mode then
41669: LD_VAR 0 5
41673: IFFALSE 41742
// begin for i = 1 to result do
41675: LD_ADDR_VAR 0 7
41679: PUSH
41680: DOUBLE
41681: LD_INT 1
41683: DEC
41684: ST_TO_ADDR
41685: LD_VAR 0 6
41689: PUSH
41690: FOR_TO
41691: IFFALSE 41730
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41693: LD_ADDR_VAR 0 9
41697: PUSH
41698: LD_VAR 0 9
41702: PPUSH
41703: LD_VAR 0 7
41707: PPUSH
41708: LD_VAR 0 6
41712: PUSH
41713: LD_VAR 0 7
41717: ARRAY
41718: PUSH
41719: LD_INT 1
41721: ARRAY
41722: PPUSH
41723: CALL_OW 1
41727: ST_TO_ADDR
41728: GO 41690
41730: POP
41731: POP
// result := tmp ;
41732: LD_ADDR_VAR 0 6
41736: PUSH
41737: LD_VAR 0 9
41741: ST_TO_ADDR
// end ; end ;
41742: LD_VAR 0 6
41746: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41747: LD_INT 0
41749: PPUSH
41750: PPUSH
41751: PPUSH
41752: PPUSH
41753: PPUSH
41754: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41755: LD_ADDR_VAR 0 5
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 0
41768: PUSH
41769: EMPTY
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: ST_TO_ADDR
// if not x or not y then
41777: LD_VAR 0 2
41781: NOT
41782: PUSH
41783: LD_VAR 0 3
41787: NOT
41788: OR
41789: IFFALSE 41793
// exit ;
41791: GO 43439
// if not range then
41793: LD_VAR 0 4
41797: NOT
41798: IFFALSE 41808
// range := 10 ;
41800: LD_ADDR_VAR 0 4
41804: PUSH
41805: LD_INT 10
41807: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41808: LD_ADDR_VAR 0 8
41812: PUSH
41813: LD_INT 81
41815: PUSH
41816: LD_VAR 0 1
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 92
41827: PUSH
41828: LD_VAR 0 2
41832: PUSH
41833: LD_VAR 0 3
41837: PUSH
41838: LD_VAR 0 4
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 21
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: ST_TO_ADDR
// if not tmp then
41876: LD_VAR 0 8
41880: NOT
41881: IFFALSE 41885
// exit ;
41883: GO 43439
// for i in tmp do
41885: LD_ADDR_VAR 0 6
41889: PUSH
41890: LD_VAR 0 8
41894: PUSH
41895: FOR_IN
41896: IFFALSE 43414
// begin points := [ 0 , 0 , 0 ] ;
41898: LD_ADDR_VAR 0 9
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: LD_INT 0
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: LIST
41916: ST_TO_ADDR
// bpoints := 1 ;
41917: LD_ADDR_VAR 0 10
41921: PUSH
41922: LD_INT 1
41924: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41925: LD_VAR 0 6
41929: PPUSH
41930: CALL_OW 247
41934: PUSH
41935: LD_INT 1
41937: DOUBLE
41938: EQUAL
41939: IFTRUE 41943
41941: GO 42521
41943: POP
// begin if GetClass ( i ) = 1 then
41944: LD_VAR 0 6
41948: PPUSH
41949: CALL_OW 257
41953: PUSH
41954: LD_INT 1
41956: EQUAL
41957: IFFALSE 41978
// points := [ 10 , 5 , 3 ] ;
41959: LD_ADDR_VAR 0 9
41963: PUSH
41964: LD_INT 10
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: LD_INT 3
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41978: LD_VAR 0 6
41982: PPUSH
41983: CALL_OW 257
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 4
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: LIST
42001: IN
42002: IFFALSE 42023
// points := [ 3 , 2 , 1 ] ;
42004: LD_ADDR_VAR 0 9
42008: PUSH
42009: LD_INT 3
42011: PUSH
42012: LD_INT 2
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: ST_TO_ADDR
// if GetClass ( i ) = 5 then
42023: LD_VAR 0 6
42027: PPUSH
42028: CALL_OW 257
42032: PUSH
42033: LD_INT 5
42035: EQUAL
42036: IFFALSE 42057
// points := [ 130 , 5 , 2 ] ;
42038: LD_ADDR_VAR 0 9
42042: PUSH
42043: LD_INT 130
42045: PUSH
42046: LD_INT 5
42048: PUSH
42049: LD_INT 2
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: LIST
42056: ST_TO_ADDR
// if GetClass ( i ) = 8 then
42057: LD_VAR 0 6
42061: PPUSH
42062: CALL_OW 257
42066: PUSH
42067: LD_INT 8
42069: EQUAL
42070: IFFALSE 42091
// points := [ 35 , 35 , 30 ] ;
42072: LD_ADDR_VAR 0 9
42076: PUSH
42077: LD_INT 35
42079: PUSH
42080: LD_INT 35
42082: PUSH
42083: LD_INT 30
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: ST_TO_ADDR
// if GetClass ( i ) = 9 then
42091: LD_VAR 0 6
42095: PPUSH
42096: CALL_OW 257
42100: PUSH
42101: LD_INT 9
42103: EQUAL
42104: IFFALSE 42125
// points := [ 20 , 55 , 40 ] ;
42106: LD_ADDR_VAR 0 9
42110: PUSH
42111: LD_INT 20
42113: PUSH
42114: LD_INT 55
42116: PUSH
42117: LD_INT 40
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
42125: LD_VAR 0 6
42129: PPUSH
42130: CALL_OW 257
42134: PUSH
42135: LD_INT 12
42137: PUSH
42138: LD_INT 16
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: IN
42145: IFFALSE 42166
// points := [ 5 , 3 , 2 ] ;
42147: LD_ADDR_VAR 0 9
42151: PUSH
42152: LD_INT 5
42154: PUSH
42155: LD_INT 3
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: LIST
42165: ST_TO_ADDR
// if GetClass ( i ) = 17 then
42166: LD_VAR 0 6
42170: PPUSH
42171: CALL_OW 257
42175: PUSH
42176: LD_INT 17
42178: EQUAL
42179: IFFALSE 42200
// points := [ 100 , 50 , 75 ] ;
42181: LD_ADDR_VAR 0 9
42185: PUSH
42186: LD_INT 100
42188: PUSH
42189: LD_INT 50
42191: PUSH
42192: LD_INT 75
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
// if GetClass ( i ) = 15 then
42200: LD_VAR 0 6
42204: PPUSH
42205: CALL_OW 257
42209: PUSH
42210: LD_INT 15
42212: EQUAL
42213: IFFALSE 42234
// points := [ 10 , 5 , 3 ] ;
42215: LD_ADDR_VAR 0 9
42219: PUSH
42220: LD_INT 10
42222: PUSH
42223: LD_INT 5
42225: PUSH
42226: LD_INT 3
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// if GetClass ( i ) = 14 then
42234: LD_VAR 0 6
42238: PPUSH
42239: CALL_OW 257
42243: PUSH
42244: LD_INT 14
42246: EQUAL
42247: IFFALSE 42268
// points := [ 10 , 0 , 0 ] ;
42249: LD_ADDR_VAR 0 9
42253: PUSH
42254: LD_INT 10
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: EMPTY
42264: LIST
42265: LIST
42266: LIST
42267: ST_TO_ADDR
// if GetClass ( i ) = 11 then
42268: LD_VAR 0 6
42272: PPUSH
42273: CALL_OW 257
42277: PUSH
42278: LD_INT 11
42280: EQUAL
42281: IFFALSE 42302
// points := [ 30 , 10 , 5 ] ;
42283: LD_ADDR_VAR 0 9
42287: PUSH
42288: LD_INT 30
42290: PUSH
42291: LD_INT 10
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: LIST
42301: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
42302: LD_VAR 0 1
42306: PPUSH
42307: LD_INT 5
42309: PPUSH
42310: CALL_OW 321
42314: PUSH
42315: LD_INT 2
42317: EQUAL
42318: IFFALSE 42335
// bpoints := bpoints * 1.8 ;
42320: LD_ADDR_VAR 0 10
42324: PUSH
42325: LD_VAR 0 10
42329: PUSH
42330: LD_REAL  1.80000000000000E+0000
42333: MUL
42334: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
42335: LD_VAR 0 6
42339: PPUSH
42340: CALL_OW 257
42344: PUSH
42345: LD_INT 1
42347: PUSH
42348: LD_INT 2
42350: PUSH
42351: LD_INT 3
42353: PUSH
42354: LD_INT 4
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: IN
42363: PUSH
42364: LD_VAR 0 1
42368: PPUSH
42369: LD_INT 51
42371: PPUSH
42372: CALL_OW 321
42376: PUSH
42377: LD_INT 2
42379: EQUAL
42380: AND
42381: IFFALSE 42398
// bpoints := bpoints * 1.2 ;
42383: LD_ADDR_VAR 0 10
42387: PUSH
42388: LD_VAR 0 10
42392: PUSH
42393: LD_REAL  1.20000000000000E+0000
42396: MUL
42397: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
42398: LD_VAR 0 6
42402: PPUSH
42403: CALL_OW 257
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: LD_INT 7
42413: PUSH
42414: LD_INT 9
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: LIST
42421: IN
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: LD_INT 52
42430: PPUSH
42431: CALL_OW 321
42435: PUSH
42436: LD_INT 2
42438: EQUAL
42439: AND
42440: IFFALSE 42457
// bpoints := bpoints * 1.5 ;
42442: LD_ADDR_VAR 0 10
42446: PUSH
42447: LD_VAR 0 10
42451: PUSH
42452: LD_REAL  1.50000000000000E+0000
42455: MUL
42456: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
42457: LD_VAR 0 1
42461: PPUSH
42462: LD_INT 66
42464: PPUSH
42465: CALL_OW 321
42469: PUSH
42470: LD_INT 2
42472: EQUAL
42473: IFFALSE 42490
// bpoints := bpoints * 1.1 ;
42475: LD_ADDR_VAR 0 10
42479: PUSH
42480: LD_VAR 0 10
42484: PUSH
42485: LD_REAL  1.10000000000000E+0000
42488: MUL
42489: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
42490: LD_ADDR_VAR 0 10
42494: PUSH
42495: LD_VAR 0 10
42499: PUSH
42500: LD_VAR 0 6
42504: PPUSH
42505: LD_INT 1
42507: PPUSH
42508: CALL_OW 259
42512: PUSH
42513: LD_REAL  1.15000000000000E+0000
42516: MUL
42517: MUL
42518: ST_TO_ADDR
// end ; unit_vehicle :
42519: GO 43343
42521: LD_INT 2
42523: DOUBLE
42524: EQUAL
42525: IFTRUE 42529
42527: GO 43331
42529: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
42530: LD_VAR 0 6
42534: PPUSH
42535: CALL_OW 264
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 42
42545: PUSH
42546: LD_INT 24
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: IN
42554: IFFALSE 42575
// points := [ 25 , 5 , 3 ] ;
42556: LD_ADDR_VAR 0 9
42560: PUSH
42561: LD_INT 25
42563: PUSH
42564: LD_INT 5
42566: PUSH
42567: LD_INT 3
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
42575: LD_VAR 0 6
42579: PPUSH
42580: CALL_OW 264
42584: PUSH
42585: LD_INT 4
42587: PUSH
42588: LD_INT 43
42590: PUSH
42591: LD_INT 25
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: LIST
42598: IN
42599: IFFALSE 42620
// points := [ 40 , 15 , 5 ] ;
42601: LD_ADDR_VAR 0 9
42605: PUSH
42606: LD_INT 40
42608: PUSH
42609: LD_INT 15
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: LIST
42619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42620: LD_VAR 0 6
42624: PPUSH
42625: CALL_OW 264
42629: PUSH
42630: LD_INT 3
42632: PUSH
42633: LD_INT 23
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: IN
42640: IFFALSE 42661
// points := [ 7 , 25 , 8 ] ;
42642: LD_ADDR_VAR 0 9
42646: PUSH
42647: LD_INT 7
42649: PUSH
42650: LD_INT 25
42652: PUSH
42653: LD_INT 8
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42661: LD_VAR 0 6
42665: PPUSH
42666: CALL_OW 264
42670: PUSH
42671: LD_INT 5
42673: PUSH
42674: LD_INT 27
42676: PUSH
42677: LD_INT 44
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: LIST
42684: IN
42685: IFFALSE 42706
// points := [ 14 , 50 , 16 ] ;
42687: LD_ADDR_VAR 0 9
42691: PUSH
42692: LD_INT 14
42694: PUSH
42695: LD_INT 50
42697: PUSH
42698: LD_INT 16
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: LIST
42705: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42706: LD_VAR 0 6
42710: PPUSH
42711: CALL_OW 264
42715: PUSH
42716: LD_INT 6
42718: PUSH
42719: LD_INT 46
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: IN
42726: IFFALSE 42747
// points := [ 32 , 120 , 70 ] ;
42728: LD_ADDR_VAR 0 9
42732: PUSH
42733: LD_INT 32
42735: PUSH
42736: LD_INT 120
42738: PUSH
42739: LD_INT 70
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: LIST
42746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
42747: LD_VAR 0 6
42751: PPUSH
42752: CALL_OW 264
42756: PUSH
42757: LD_INT 7
42759: PUSH
42760: LD_INT 28
42762: PUSH
42763: LD_INT 45
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: IN
42771: IFFALSE 42792
// points := [ 35 , 20 , 45 ] ;
42773: LD_ADDR_VAR 0 9
42777: PUSH
42778: LD_INT 35
42780: PUSH
42781: LD_INT 20
42783: PUSH
42784: LD_INT 45
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42792: LD_VAR 0 6
42796: PPUSH
42797: CALL_OW 264
42801: PUSH
42802: LD_INT 47
42804: PUSH
42805: EMPTY
42806: LIST
42807: IN
42808: IFFALSE 42829
// points := [ 67 , 45 , 75 ] ;
42810: LD_ADDR_VAR 0 9
42814: PUSH
42815: LD_INT 67
42817: PUSH
42818: LD_INT 45
42820: PUSH
42821: LD_INT 75
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42829: LD_VAR 0 6
42833: PPUSH
42834: CALL_OW 264
42838: PUSH
42839: LD_INT 26
42841: PUSH
42842: EMPTY
42843: LIST
42844: IN
42845: IFFALSE 42866
// points := [ 120 , 30 , 80 ] ;
42847: LD_ADDR_VAR 0 9
42851: PUSH
42852: LD_INT 120
42854: PUSH
42855: LD_INT 30
42857: PUSH
42858: LD_INT 80
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: LIST
42865: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42866: LD_VAR 0 6
42870: PPUSH
42871: CALL_OW 264
42875: PUSH
42876: LD_INT 22
42878: PUSH
42879: EMPTY
42880: LIST
42881: IN
42882: IFFALSE 42903
// points := [ 40 , 1 , 1 ] ;
42884: LD_ADDR_VAR 0 9
42888: PUSH
42889: LD_INT 40
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42903: LD_VAR 0 6
42907: PPUSH
42908: CALL_OW 264
42912: PUSH
42913: LD_INT 29
42915: PUSH
42916: EMPTY
42917: LIST
42918: IN
42919: IFFALSE 42940
// points := [ 70 , 200 , 400 ] ;
42921: LD_ADDR_VAR 0 9
42925: PUSH
42926: LD_INT 70
42928: PUSH
42929: LD_INT 200
42931: PUSH
42932: LD_INT 400
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: LIST
42939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42940: LD_VAR 0 6
42944: PPUSH
42945: CALL_OW 264
42949: PUSH
42950: LD_INT 14
42952: PUSH
42953: LD_INT 53
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: IN
42960: IFFALSE 42981
// points := [ 40 , 10 , 20 ] ;
42962: LD_ADDR_VAR 0 9
42966: PUSH
42967: LD_INT 40
42969: PUSH
42970: LD_INT 10
42972: PUSH
42973: LD_INT 20
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42981: LD_VAR 0 6
42985: PPUSH
42986: CALL_OW 264
42990: PUSH
42991: LD_INT 9
42993: PUSH
42994: EMPTY
42995: LIST
42996: IN
42997: IFFALSE 43018
// points := [ 5 , 70 , 20 ] ;
42999: LD_ADDR_VAR 0 9
43003: PUSH
43004: LD_INT 5
43006: PUSH
43007: LD_INT 70
43009: PUSH
43010: LD_INT 20
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: LIST
43017: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
43018: LD_VAR 0 6
43022: PPUSH
43023: CALL_OW 264
43027: PUSH
43028: LD_INT 10
43030: PUSH
43031: EMPTY
43032: LIST
43033: IN
43034: IFFALSE 43055
// points := [ 35 , 110 , 70 ] ;
43036: LD_ADDR_VAR 0 9
43040: PUSH
43041: LD_INT 35
43043: PUSH
43044: LD_INT 110
43046: PUSH
43047: LD_INT 70
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: LIST
43054: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
43055: LD_VAR 0 6
43059: PPUSH
43060: CALL_OW 265
43064: PUSH
43065: LD_INT 25
43067: EQUAL
43068: IFFALSE 43089
// points := [ 80 , 65 , 100 ] ;
43070: LD_ADDR_VAR 0 9
43074: PUSH
43075: LD_INT 80
43077: PUSH
43078: LD_INT 65
43080: PUSH
43081: LD_INT 100
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
43089: LD_VAR 0 6
43093: PPUSH
43094: CALL_OW 263
43098: PUSH
43099: LD_INT 1
43101: EQUAL
43102: IFFALSE 43137
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
43104: LD_ADDR_VAR 0 10
43108: PUSH
43109: LD_VAR 0 10
43113: PUSH
43114: LD_VAR 0 6
43118: PPUSH
43119: CALL_OW 311
43123: PPUSH
43124: LD_INT 3
43126: PPUSH
43127: CALL_OW 259
43131: PUSH
43132: LD_INT 4
43134: MUL
43135: MUL
43136: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
43137: LD_VAR 0 6
43141: PPUSH
43142: CALL_OW 263
43146: PUSH
43147: LD_INT 2
43149: EQUAL
43150: IFFALSE 43201
// begin j := IsControledBy ( i ) ;
43152: LD_ADDR_VAR 0 7
43156: PUSH
43157: LD_VAR 0 6
43161: PPUSH
43162: CALL_OW 312
43166: ST_TO_ADDR
// if j then
43167: LD_VAR 0 7
43171: IFFALSE 43201
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
43173: LD_ADDR_VAR 0 10
43177: PUSH
43178: LD_VAR 0 10
43182: PUSH
43183: LD_VAR 0 7
43187: PPUSH
43188: LD_INT 3
43190: PPUSH
43191: CALL_OW 259
43195: PUSH
43196: LD_INT 3
43198: MUL
43199: MUL
43200: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
43201: LD_VAR 0 6
43205: PPUSH
43206: CALL_OW 264
43210: PUSH
43211: LD_INT 5
43213: PUSH
43214: LD_INT 6
43216: PUSH
43217: LD_INT 46
43219: PUSH
43220: LD_INT 44
43222: PUSH
43223: LD_INT 47
43225: PUSH
43226: LD_INT 45
43228: PUSH
43229: LD_INT 28
43231: PUSH
43232: LD_INT 7
43234: PUSH
43235: LD_INT 27
43237: PUSH
43238: LD_INT 29
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: IN
43253: PUSH
43254: LD_VAR 0 1
43258: PPUSH
43259: LD_INT 52
43261: PPUSH
43262: CALL_OW 321
43266: PUSH
43267: LD_INT 2
43269: EQUAL
43270: AND
43271: IFFALSE 43288
// bpoints := bpoints * 1.2 ;
43273: LD_ADDR_VAR 0 10
43277: PUSH
43278: LD_VAR 0 10
43282: PUSH
43283: LD_REAL  1.20000000000000E+0000
43286: MUL
43287: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
43288: LD_VAR 0 6
43292: PPUSH
43293: CALL_OW 264
43297: PUSH
43298: LD_INT 6
43300: PUSH
43301: LD_INT 46
43303: PUSH
43304: LD_INT 47
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: LIST
43311: IN
43312: IFFALSE 43329
// bpoints := bpoints * 1.2 ;
43314: LD_ADDR_VAR 0 10
43318: PUSH
43319: LD_VAR 0 10
43323: PUSH
43324: LD_REAL  1.20000000000000E+0000
43327: MUL
43328: ST_TO_ADDR
// end ; unit_building :
43329: GO 43343
43331: LD_INT 3
43333: DOUBLE
43334: EQUAL
43335: IFTRUE 43339
43337: GO 43342
43339: POP
// ; end ;
43340: GO 43343
43342: POP
// for j = 1 to 3 do
43343: LD_ADDR_VAR 0 7
43347: PUSH
43348: DOUBLE
43349: LD_INT 1
43351: DEC
43352: ST_TO_ADDR
43353: LD_INT 3
43355: PUSH
43356: FOR_TO
43357: IFFALSE 43410
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
43359: LD_ADDR_VAR 0 5
43363: PUSH
43364: LD_VAR 0 5
43368: PPUSH
43369: LD_VAR 0 7
43373: PPUSH
43374: LD_VAR 0 5
43378: PUSH
43379: LD_VAR 0 7
43383: ARRAY
43384: PUSH
43385: LD_VAR 0 9
43389: PUSH
43390: LD_VAR 0 7
43394: ARRAY
43395: PUSH
43396: LD_VAR 0 10
43400: MUL
43401: PLUS
43402: PPUSH
43403: CALL_OW 1
43407: ST_TO_ADDR
43408: GO 43356
43410: POP
43411: POP
// end ;
43412: GO 41895
43414: POP
43415: POP
// result := Replace ( result , 4 , tmp ) ;
43416: LD_ADDR_VAR 0 5
43420: PUSH
43421: LD_VAR 0 5
43425: PPUSH
43426: LD_INT 4
43428: PPUSH
43429: LD_VAR 0 8
43433: PPUSH
43434: CALL_OW 1
43438: ST_TO_ADDR
// end ;
43439: LD_VAR 0 5
43443: RET
// export function DangerAtRange ( unit , range ) ; begin
43444: LD_INT 0
43446: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
43447: LD_ADDR_VAR 0 3
43451: PUSH
43452: LD_VAR 0 1
43456: PPUSH
43457: CALL_OW 255
43461: PPUSH
43462: LD_VAR 0 1
43466: PPUSH
43467: CALL_OW 250
43471: PPUSH
43472: LD_VAR 0 1
43476: PPUSH
43477: CALL_OW 251
43481: PPUSH
43482: LD_VAR 0 2
43486: PPUSH
43487: CALL 41747 0 4
43491: ST_TO_ADDR
// end ;
43492: LD_VAR 0 3
43496: RET
// export function DangerInArea ( side , area ) ; begin
43497: LD_INT 0
43499: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_VAR 0 2
43509: PPUSH
43510: LD_INT 81
43512: PUSH
43513: LD_VAR 0 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PPUSH
43522: CALL_OW 70
43526: ST_TO_ADDR
// end ;
43527: LD_VAR 0 3
43531: RET
// export function IsExtension ( b ) ; begin
43532: LD_INT 0
43534: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
43535: LD_ADDR_VAR 0 2
43539: PUSH
43540: LD_VAR 0 1
43544: PUSH
43545: LD_INT 23
43547: PUSH
43548: LD_INT 20
43550: PUSH
43551: LD_INT 22
43553: PUSH
43554: LD_INT 17
43556: PUSH
43557: LD_INT 24
43559: PUSH
43560: LD_INT 21
43562: PUSH
43563: LD_INT 19
43565: PUSH
43566: LD_INT 16
43568: PUSH
43569: LD_INT 25
43571: PUSH
43572: LD_INT 18
43574: PUSH
43575: EMPTY
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: IN
43587: ST_TO_ADDR
// end ;
43588: LD_VAR 0 2
43592: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
43593: LD_INT 0
43595: PPUSH
43596: PPUSH
43597: PPUSH
// result := [ ] ;
43598: LD_ADDR_VAR 0 3
43602: PUSH
43603: EMPTY
43604: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43605: LD_ADDR_VAR 0 4
43609: PUSH
43610: LD_VAR 0 2
43614: PPUSH
43615: LD_INT 21
43617: PUSH
43618: LD_INT 3
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PPUSH
43625: CALL_OW 70
43629: ST_TO_ADDR
// if not tmp then
43630: LD_VAR 0 4
43634: NOT
43635: IFFALSE 43639
// exit ;
43637: GO 43697
// for i in tmp do
43639: LD_ADDR_VAR 0 5
43643: PUSH
43644: LD_VAR 0 4
43648: PUSH
43649: FOR_IN
43650: IFFALSE 43685
// if GetBase ( i ) <> base then
43652: LD_VAR 0 5
43656: PPUSH
43657: CALL_OW 274
43661: PUSH
43662: LD_VAR 0 1
43666: NONEQUAL
43667: IFFALSE 43683
// ComLinkToBase ( base , i ) ;
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_VAR 0 5
43678: PPUSH
43679: CALL_OW 169
43683: GO 43649
43685: POP
43686: POP
// result := tmp ;
43687: LD_ADDR_VAR 0 3
43691: PUSH
43692: LD_VAR 0 4
43696: ST_TO_ADDR
// end ;
43697: LD_VAR 0 3
43701: RET
// export function ComComplete ( unit , b ) ; var i ; begin
43702: LD_INT 0
43704: PPUSH
43705: PPUSH
// if BuildingStatus ( b ) = bs_build then
43706: LD_VAR 0 2
43710: PPUSH
43711: CALL_OW 461
43715: PUSH
43716: LD_INT 1
43718: EQUAL
43719: IFFALSE 43779
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43721: LD_VAR 0 1
43725: PPUSH
43726: LD_STRING h
43728: PUSH
43729: LD_VAR 0 2
43733: PPUSH
43734: CALL_OW 250
43738: PUSH
43739: LD_VAR 0 2
43743: PPUSH
43744: CALL_OW 251
43748: PUSH
43749: LD_VAR 0 2
43753: PUSH
43754: LD_INT 0
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: PUSH
43772: EMPTY
43773: LIST
43774: PPUSH
43775: CALL_OW 446
// end ;
43779: LD_VAR 0 3
43783: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43784: LD_INT 0
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
43791: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
43792: LD_VAR 0 1
43796: NOT
43797: PUSH
43798: LD_VAR 0 1
43802: PPUSH
43803: CALL_OW 263
43807: PUSH
43808: LD_INT 2
43810: EQUAL
43811: NOT
43812: OR
43813: IFFALSE 43817
// exit ;
43815: GO 44133
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43817: LD_ADDR_VAR 0 6
43821: PUSH
43822: LD_INT 22
43824: PUSH
43825: LD_VAR 0 1
43829: PPUSH
43830: CALL_OW 255
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: LD_INT 30
43844: PUSH
43845: LD_INT 36
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 34
43854: PUSH
43855: LD_INT 31
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: LIST
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PPUSH
43871: CALL_OW 69
43875: ST_TO_ADDR
// if not tmp then
43876: LD_VAR 0 6
43880: NOT
43881: IFFALSE 43885
// exit ;
43883: GO 44133
// result := [ ] ;
43885: LD_ADDR_VAR 0 2
43889: PUSH
43890: EMPTY
43891: ST_TO_ADDR
// for i in tmp do
43892: LD_ADDR_VAR 0 3
43896: PUSH
43897: LD_VAR 0 6
43901: PUSH
43902: FOR_IN
43903: IFFALSE 43974
// begin t := UnitsInside ( i ) ;
43905: LD_ADDR_VAR 0 4
43909: PUSH
43910: LD_VAR 0 3
43914: PPUSH
43915: CALL_OW 313
43919: ST_TO_ADDR
// if t then
43920: LD_VAR 0 4
43924: IFFALSE 43972
// for j in t do
43926: LD_ADDR_VAR 0 7
43930: PUSH
43931: LD_VAR 0 4
43935: PUSH
43936: FOR_IN
43937: IFFALSE 43970
// result := Insert ( result , result + 1 , j ) ;
43939: LD_ADDR_VAR 0 2
43943: PUSH
43944: LD_VAR 0 2
43948: PPUSH
43949: LD_VAR 0 2
43953: PUSH
43954: LD_INT 1
43956: PLUS
43957: PPUSH
43958: LD_VAR 0 7
43962: PPUSH
43963: CALL_OW 2
43967: ST_TO_ADDR
43968: GO 43936
43970: POP
43971: POP
// end ;
43972: GO 43902
43974: POP
43975: POP
// if not result then
43976: LD_VAR 0 2
43980: NOT
43981: IFFALSE 43985
// exit ;
43983: GO 44133
// mech := result [ 1 ] ;
43985: LD_ADDR_VAR 0 5
43989: PUSH
43990: LD_VAR 0 2
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: ST_TO_ADDR
// if result > 1 then
43999: LD_VAR 0 2
44003: PUSH
44004: LD_INT 1
44006: GREATER
44007: IFFALSE 44119
// for i = 2 to result do
44009: LD_ADDR_VAR 0 3
44013: PUSH
44014: DOUBLE
44015: LD_INT 2
44017: DEC
44018: ST_TO_ADDR
44019: LD_VAR 0 2
44023: PUSH
44024: FOR_TO
44025: IFFALSE 44117
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
44027: LD_ADDR_VAR 0 4
44031: PUSH
44032: LD_VAR 0 2
44036: PUSH
44037: LD_VAR 0 3
44041: ARRAY
44042: PPUSH
44043: LD_INT 3
44045: PPUSH
44046: CALL_OW 259
44050: PUSH
44051: LD_VAR 0 2
44055: PUSH
44056: LD_VAR 0 3
44060: ARRAY
44061: PPUSH
44062: CALL_OW 432
44066: MINUS
44067: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
44068: LD_VAR 0 4
44072: PUSH
44073: LD_VAR 0 5
44077: PPUSH
44078: LD_INT 3
44080: PPUSH
44081: CALL_OW 259
44085: PUSH
44086: LD_VAR 0 5
44090: PPUSH
44091: CALL_OW 432
44095: MINUS
44096: GREATEREQUAL
44097: IFFALSE 44115
// mech := result [ i ] ;
44099: LD_ADDR_VAR 0 5
44103: PUSH
44104: LD_VAR 0 2
44108: PUSH
44109: LD_VAR 0 3
44113: ARRAY
44114: ST_TO_ADDR
// end ;
44115: GO 44024
44117: POP
44118: POP
// ComLinkTo ( vehicle , mech ) ;
44119: LD_VAR 0 1
44123: PPUSH
44124: LD_VAR 0 5
44128: PPUSH
44129: CALL_OW 135
// end ;
44133: LD_VAR 0 2
44137: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
44138: LD_INT 0
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
// result := [ ] ;
44153: LD_ADDR_VAR 0 7
44157: PUSH
44158: EMPTY
44159: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
44160: LD_VAR 0 1
44164: PPUSH
44165: CALL_OW 266
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: IN
44180: NOT
44181: IFFALSE 44185
// exit ;
44183: GO 45816
// if name then
44185: LD_VAR 0 3
44189: IFFALSE 44205
// SetBName ( base_dep , name ) ;
44191: LD_VAR 0 1
44195: PPUSH
44196: LD_VAR 0 3
44200: PPUSH
44201: CALL_OW 500
// base := GetBase ( base_dep ) ;
44205: LD_ADDR_VAR 0 15
44209: PUSH
44210: LD_VAR 0 1
44214: PPUSH
44215: CALL_OW 274
44219: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
44220: LD_ADDR_VAR 0 16
44224: PUSH
44225: LD_VAR 0 1
44229: PPUSH
44230: CALL_OW 255
44234: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
44235: LD_ADDR_VAR 0 17
44239: PUSH
44240: LD_VAR 0 1
44244: PPUSH
44245: CALL_OW 248
44249: ST_TO_ADDR
// if sources then
44250: LD_VAR 0 5
44254: IFFALSE 44301
// for i = 1 to 3 do
44256: LD_ADDR_VAR 0 8
44260: PUSH
44261: DOUBLE
44262: LD_INT 1
44264: DEC
44265: ST_TO_ADDR
44266: LD_INT 3
44268: PUSH
44269: FOR_TO
44270: IFFALSE 44299
// AddResourceType ( base , i , sources [ i ] ) ;
44272: LD_VAR 0 15
44276: PPUSH
44277: LD_VAR 0 8
44281: PPUSH
44282: LD_VAR 0 5
44286: PUSH
44287: LD_VAR 0 8
44291: ARRAY
44292: PPUSH
44293: CALL_OW 276
44297: GO 44269
44299: POP
44300: POP
// buildings := GetBaseBuildings ( base , area ) ;
44301: LD_ADDR_VAR 0 18
44305: PUSH
44306: LD_VAR 0 15
44310: PPUSH
44311: LD_VAR 0 2
44315: PPUSH
44316: CALL 43593 0 2
44320: ST_TO_ADDR
// InitHc ;
44321: CALL_OW 19
// InitUc ;
44325: CALL_OW 18
// uc_side := side ;
44329: LD_ADDR_OWVAR 20
44333: PUSH
44334: LD_VAR 0 16
44338: ST_TO_ADDR
// uc_nation := nation ;
44339: LD_ADDR_OWVAR 21
44343: PUSH
44344: LD_VAR 0 17
44348: ST_TO_ADDR
// if buildings then
44349: LD_VAR 0 18
44353: IFFALSE 45675
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
44355: LD_ADDR_VAR 0 19
44359: PUSH
44360: LD_VAR 0 18
44364: PPUSH
44365: LD_INT 2
44367: PUSH
44368: LD_INT 30
44370: PUSH
44371: LD_INT 29
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 30
44380: PUSH
44381: LD_INT 30
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: LIST
44392: PPUSH
44393: CALL_OW 72
44397: ST_TO_ADDR
// if tmp then
44398: LD_VAR 0 19
44402: IFFALSE 44450
// for i in tmp do
44404: LD_ADDR_VAR 0 8
44408: PUSH
44409: LD_VAR 0 19
44413: PUSH
44414: FOR_IN
44415: IFFALSE 44448
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
44417: LD_VAR 0 8
44421: PPUSH
44422: CALL_OW 250
44426: PPUSH
44427: LD_VAR 0 8
44431: PPUSH
44432: CALL_OW 251
44436: PPUSH
44437: LD_VAR 0 16
44441: PPUSH
44442: CALL_OW 441
44446: GO 44414
44448: POP
44449: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
44450: LD_VAR 0 18
44454: PPUSH
44455: LD_INT 2
44457: PUSH
44458: LD_INT 30
44460: PUSH
44461: LD_INT 32
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 30
44470: PUSH
44471: LD_INT 33
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: LIST
44482: PPUSH
44483: CALL_OW 72
44487: IFFALSE 44575
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
44489: LD_ADDR_VAR 0 8
44493: PUSH
44494: LD_VAR 0 18
44498: PPUSH
44499: LD_INT 2
44501: PUSH
44502: LD_INT 30
44504: PUSH
44505: LD_INT 32
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 30
44514: PUSH
44515: LD_INT 33
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: LIST
44526: PPUSH
44527: CALL_OW 72
44531: PUSH
44532: FOR_IN
44533: IFFALSE 44573
// begin if not GetBWeapon ( i ) then
44535: LD_VAR 0 8
44539: PPUSH
44540: CALL_OW 269
44544: NOT
44545: IFFALSE 44571
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
44547: LD_VAR 0 8
44551: PPUSH
44552: LD_VAR 0 8
44556: PPUSH
44557: LD_VAR 0 2
44561: PPUSH
44562: CALL 45821 0 2
44566: PPUSH
44567: CALL_OW 431
// end ;
44571: GO 44532
44573: POP
44574: POP
// end ; for i = 1 to personel do
44575: LD_ADDR_VAR 0 8
44579: PUSH
44580: DOUBLE
44581: LD_INT 1
44583: DEC
44584: ST_TO_ADDR
44585: LD_VAR 0 6
44589: PUSH
44590: FOR_TO
44591: IFFALSE 45655
// begin if i > 4 then
44593: LD_VAR 0 8
44597: PUSH
44598: LD_INT 4
44600: GREATER
44601: IFFALSE 44605
// break ;
44603: GO 45655
// case i of 1 :
44605: LD_VAR 0 8
44609: PUSH
44610: LD_INT 1
44612: DOUBLE
44613: EQUAL
44614: IFTRUE 44618
44616: GO 44698
44618: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44619: LD_ADDR_VAR 0 12
44623: PUSH
44624: LD_VAR 0 18
44628: PPUSH
44629: LD_INT 22
44631: PUSH
44632: LD_VAR 0 16
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 58
44643: PUSH
44644: EMPTY
44645: LIST
44646: PUSH
44647: LD_INT 2
44649: PUSH
44650: LD_INT 30
44652: PUSH
44653: LD_INT 32
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 30
44662: PUSH
44663: LD_INT 4
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 30
44672: PUSH
44673: LD_INT 5
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: LIST
44684: LIST
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: LIST
44690: PPUSH
44691: CALL_OW 72
44695: ST_TO_ADDR
44696: GO 44920
44698: LD_INT 2
44700: DOUBLE
44701: EQUAL
44702: IFTRUE 44706
44704: GO 44768
44706: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44707: LD_ADDR_VAR 0 12
44711: PUSH
44712: LD_VAR 0 18
44716: PPUSH
44717: LD_INT 22
44719: PUSH
44720: LD_VAR 0 16
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 2
44731: PUSH
44732: LD_INT 30
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: LD_INT 30
44744: PUSH
44745: LD_INT 1
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: LIST
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PPUSH
44761: CALL_OW 72
44765: ST_TO_ADDR
44766: GO 44920
44768: LD_INT 3
44770: DOUBLE
44771: EQUAL
44772: IFTRUE 44776
44774: GO 44838
44776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44777: LD_ADDR_VAR 0 12
44781: PUSH
44782: LD_VAR 0 18
44786: PPUSH
44787: LD_INT 22
44789: PUSH
44790: LD_VAR 0 16
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: LD_INT 2
44801: PUSH
44802: LD_INT 30
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 30
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: LIST
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PPUSH
44831: CALL_OW 72
44835: ST_TO_ADDR
44836: GO 44920
44838: LD_INT 4
44840: DOUBLE
44841: EQUAL
44842: IFTRUE 44846
44844: GO 44919
44846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44847: LD_ADDR_VAR 0 12
44851: PUSH
44852: LD_VAR 0 18
44856: PPUSH
44857: LD_INT 22
44859: PUSH
44860: LD_VAR 0 16
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 30
44874: PUSH
44875: LD_INT 6
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 30
44884: PUSH
44885: LD_INT 7
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 30
44894: PUSH
44895: LD_INT 8
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PPUSH
44912: CALL_OW 72
44916: ST_TO_ADDR
44917: GO 44920
44919: POP
// if i = 1 then
44920: LD_VAR 0 8
44924: PUSH
44925: LD_INT 1
44927: EQUAL
44928: IFFALSE 45039
// begin tmp := [ ] ;
44930: LD_ADDR_VAR 0 19
44934: PUSH
44935: EMPTY
44936: ST_TO_ADDR
// for j in f do
44937: LD_ADDR_VAR 0 9
44941: PUSH
44942: LD_VAR 0 12
44946: PUSH
44947: FOR_IN
44948: IFFALSE 45021
// if GetBType ( j ) = b_bunker then
44950: LD_VAR 0 9
44954: PPUSH
44955: CALL_OW 266
44959: PUSH
44960: LD_INT 32
44962: EQUAL
44963: IFFALSE 44990
// tmp := Insert ( tmp , 1 , j ) else
44965: LD_ADDR_VAR 0 19
44969: PUSH
44970: LD_VAR 0 19
44974: PPUSH
44975: LD_INT 1
44977: PPUSH
44978: LD_VAR 0 9
44982: PPUSH
44983: CALL_OW 2
44987: ST_TO_ADDR
44988: GO 45019
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44990: LD_ADDR_VAR 0 19
44994: PUSH
44995: LD_VAR 0 19
44999: PPUSH
45000: LD_VAR 0 19
45004: PUSH
45005: LD_INT 1
45007: PLUS
45008: PPUSH
45009: LD_VAR 0 9
45013: PPUSH
45014: CALL_OW 2
45018: ST_TO_ADDR
45019: GO 44947
45021: POP
45022: POP
// if tmp then
45023: LD_VAR 0 19
45027: IFFALSE 45039
// f := tmp ;
45029: LD_ADDR_VAR 0 12
45033: PUSH
45034: LD_VAR 0 19
45038: ST_TO_ADDR
// end ; x := personel [ i ] ;
45039: LD_ADDR_VAR 0 13
45043: PUSH
45044: LD_VAR 0 6
45048: PUSH
45049: LD_VAR 0 8
45053: ARRAY
45054: ST_TO_ADDR
// if x = - 1 then
45055: LD_VAR 0 13
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: EQUAL
45064: IFFALSE 45273
// begin for j in f do
45066: LD_ADDR_VAR 0 9
45070: PUSH
45071: LD_VAR 0 12
45075: PUSH
45076: FOR_IN
45077: IFFALSE 45269
// repeat InitHc ;
45079: CALL_OW 19
// if GetBType ( j ) = b_barracks then
45083: LD_VAR 0 9
45087: PPUSH
45088: CALL_OW 266
45092: PUSH
45093: LD_INT 5
45095: EQUAL
45096: IFFALSE 45166
// begin if UnitsInside ( j ) < 3 then
45098: LD_VAR 0 9
45102: PPUSH
45103: CALL_OW 313
45107: PUSH
45108: LD_INT 3
45110: LESS
45111: IFFALSE 45147
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45113: LD_INT 0
45115: PPUSH
45116: LD_INT 5
45118: PUSH
45119: LD_INT 8
45121: PUSH
45122: LD_INT 9
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: LIST
45129: PUSH
45130: LD_VAR 0 17
45134: ARRAY
45135: PPUSH
45136: LD_VAR 0 4
45140: PPUSH
45141: CALL_OW 380
45145: GO 45164
// PrepareHuman ( false , i , skill ) ;
45147: LD_INT 0
45149: PPUSH
45150: LD_VAR 0 8
45154: PPUSH
45155: LD_VAR 0 4
45159: PPUSH
45160: CALL_OW 380
// end else
45164: GO 45183
// PrepareHuman ( false , i , skill ) ;
45166: LD_INT 0
45168: PPUSH
45169: LD_VAR 0 8
45173: PPUSH
45174: LD_VAR 0 4
45178: PPUSH
45179: CALL_OW 380
// un := CreateHuman ;
45183: LD_ADDR_VAR 0 14
45187: PUSH
45188: CALL_OW 44
45192: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45193: LD_ADDR_VAR 0 7
45197: PUSH
45198: LD_VAR 0 7
45202: PPUSH
45203: LD_INT 1
45205: PPUSH
45206: LD_VAR 0 14
45210: PPUSH
45211: CALL_OW 2
45215: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
45216: LD_VAR 0 14
45220: PPUSH
45221: LD_VAR 0 9
45225: PPUSH
45226: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
45230: LD_VAR 0 9
45234: PPUSH
45235: CALL_OW 313
45239: PUSH
45240: LD_INT 6
45242: EQUAL
45243: PUSH
45244: LD_VAR 0 9
45248: PPUSH
45249: CALL_OW 266
45253: PUSH
45254: LD_INT 32
45256: PUSH
45257: LD_INT 31
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: IN
45264: OR
45265: IFFALSE 45079
45267: GO 45076
45269: POP
45270: POP
// end else
45271: GO 45653
// for j = 1 to x do
45273: LD_ADDR_VAR 0 9
45277: PUSH
45278: DOUBLE
45279: LD_INT 1
45281: DEC
45282: ST_TO_ADDR
45283: LD_VAR 0 13
45287: PUSH
45288: FOR_TO
45289: IFFALSE 45651
// begin InitHc ;
45291: CALL_OW 19
// if not f then
45295: LD_VAR 0 12
45299: NOT
45300: IFFALSE 45389
// begin PrepareHuman ( false , i , skill ) ;
45302: LD_INT 0
45304: PPUSH
45305: LD_VAR 0 8
45309: PPUSH
45310: LD_VAR 0 4
45314: PPUSH
45315: CALL_OW 380
// un := CreateHuman ;
45319: LD_ADDR_VAR 0 14
45323: PUSH
45324: CALL_OW 44
45328: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45329: LD_ADDR_VAR 0 7
45333: PUSH
45334: LD_VAR 0 7
45338: PPUSH
45339: LD_INT 1
45341: PPUSH
45342: LD_VAR 0 14
45346: PPUSH
45347: CALL_OW 2
45351: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45352: LD_VAR 0 14
45356: PPUSH
45357: LD_VAR 0 1
45361: PPUSH
45362: CALL_OW 250
45366: PPUSH
45367: LD_VAR 0 1
45371: PPUSH
45372: CALL_OW 251
45376: PPUSH
45377: LD_INT 10
45379: PPUSH
45380: LD_INT 0
45382: PPUSH
45383: CALL_OW 50
// continue ;
45387: GO 45288
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
45389: LD_VAR 0 12
45393: PUSH
45394: LD_INT 1
45396: ARRAY
45397: PPUSH
45398: CALL_OW 313
45402: PUSH
45403: LD_VAR 0 12
45407: PUSH
45408: LD_INT 1
45410: ARRAY
45411: PPUSH
45412: CALL_OW 266
45416: PUSH
45417: LD_INT 32
45419: PUSH
45420: LD_INT 31
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: IN
45427: AND
45428: PUSH
45429: LD_VAR 0 12
45433: PUSH
45434: LD_INT 1
45436: ARRAY
45437: PPUSH
45438: CALL_OW 313
45442: PUSH
45443: LD_INT 6
45445: EQUAL
45446: OR
45447: IFFALSE 45467
// f := Delete ( f , 1 ) ;
45449: LD_ADDR_VAR 0 12
45453: PUSH
45454: LD_VAR 0 12
45458: PPUSH
45459: LD_INT 1
45461: PPUSH
45462: CALL_OW 3
45466: ST_TO_ADDR
// if not f then
45467: LD_VAR 0 12
45471: NOT
45472: IFFALSE 45490
// begin x := x + 2 ;
45474: LD_ADDR_VAR 0 13
45478: PUSH
45479: LD_VAR 0 13
45483: PUSH
45484: LD_INT 2
45486: PLUS
45487: ST_TO_ADDR
// continue ;
45488: GO 45288
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
45490: LD_VAR 0 12
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: PPUSH
45499: CALL_OW 266
45503: PUSH
45504: LD_INT 5
45506: EQUAL
45507: IFFALSE 45581
// begin if UnitsInside ( f [ 1 ] ) < 3 then
45509: LD_VAR 0 12
45513: PUSH
45514: LD_INT 1
45516: ARRAY
45517: PPUSH
45518: CALL_OW 313
45522: PUSH
45523: LD_INT 3
45525: LESS
45526: IFFALSE 45562
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
45528: LD_INT 0
45530: PPUSH
45531: LD_INT 5
45533: PUSH
45534: LD_INT 8
45536: PUSH
45537: LD_INT 9
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: LD_VAR 0 17
45549: ARRAY
45550: PPUSH
45551: LD_VAR 0 4
45555: PPUSH
45556: CALL_OW 380
45560: GO 45579
// PrepareHuman ( false , i , skill ) ;
45562: LD_INT 0
45564: PPUSH
45565: LD_VAR 0 8
45569: PPUSH
45570: LD_VAR 0 4
45574: PPUSH
45575: CALL_OW 380
// end else
45579: GO 45598
// PrepareHuman ( false , i , skill ) ;
45581: LD_INT 0
45583: PPUSH
45584: LD_VAR 0 8
45588: PPUSH
45589: LD_VAR 0 4
45593: PPUSH
45594: CALL_OW 380
// un := CreateHuman ;
45598: LD_ADDR_VAR 0 14
45602: PUSH
45603: CALL_OW 44
45607: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45608: LD_ADDR_VAR 0 7
45612: PUSH
45613: LD_VAR 0 7
45617: PPUSH
45618: LD_INT 1
45620: PPUSH
45621: LD_VAR 0 14
45625: PPUSH
45626: CALL_OW 2
45630: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45631: LD_VAR 0 14
45635: PPUSH
45636: LD_VAR 0 12
45640: PUSH
45641: LD_INT 1
45643: ARRAY
45644: PPUSH
45645: CALL_OW 52
// end ;
45649: GO 45288
45651: POP
45652: POP
// end ;
45653: GO 44590
45655: POP
45656: POP
// result := result ^ buildings ;
45657: LD_ADDR_VAR 0 7
45661: PUSH
45662: LD_VAR 0 7
45666: PUSH
45667: LD_VAR 0 18
45671: ADD
45672: ST_TO_ADDR
// end else
45673: GO 45816
// begin for i = 1 to personel do
45675: LD_ADDR_VAR 0 8
45679: PUSH
45680: DOUBLE
45681: LD_INT 1
45683: DEC
45684: ST_TO_ADDR
45685: LD_VAR 0 6
45689: PUSH
45690: FOR_TO
45691: IFFALSE 45814
// begin if i > 4 then
45693: LD_VAR 0 8
45697: PUSH
45698: LD_INT 4
45700: GREATER
45701: IFFALSE 45705
// break ;
45703: GO 45814
// x := personel [ i ] ;
45705: LD_ADDR_VAR 0 13
45709: PUSH
45710: LD_VAR 0 6
45714: PUSH
45715: LD_VAR 0 8
45719: ARRAY
45720: ST_TO_ADDR
// if x = - 1 then
45721: LD_VAR 0 13
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: EQUAL
45730: IFFALSE 45734
// continue ;
45732: GO 45690
// PrepareHuman ( false , i , skill ) ;
45734: LD_INT 0
45736: PPUSH
45737: LD_VAR 0 8
45741: PPUSH
45742: LD_VAR 0 4
45746: PPUSH
45747: CALL_OW 380
// un := CreateHuman ;
45751: LD_ADDR_VAR 0 14
45755: PUSH
45756: CALL_OW 44
45760: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45761: LD_VAR 0 14
45765: PPUSH
45766: LD_VAR 0 1
45770: PPUSH
45771: CALL_OW 250
45775: PPUSH
45776: LD_VAR 0 1
45780: PPUSH
45781: CALL_OW 251
45785: PPUSH
45786: LD_INT 10
45788: PPUSH
45789: LD_INT 0
45791: PPUSH
45792: CALL_OW 50
// result := result ^ un ;
45796: LD_ADDR_VAR 0 7
45800: PUSH
45801: LD_VAR 0 7
45805: PUSH
45806: LD_VAR 0 14
45810: ADD
45811: ST_TO_ADDR
// end ;
45812: GO 45690
45814: POP
45815: POP
// end ; end ;
45816: LD_VAR 0 7
45820: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45821: LD_INT 0
45823: PPUSH
45824: PPUSH
45825: PPUSH
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
45830: PPUSH
45831: PPUSH
45832: PPUSH
45833: PPUSH
45834: PPUSH
45835: PPUSH
45836: PPUSH
45837: PPUSH
45838: PPUSH
// result := false ;
45839: LD_ADDR_VAR 0 3
45843: PUSH
45844: LD_INT 0
45846: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45847: LD_VAR 0 1
45851: NOT
45852: PUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL_OW 266
45862: PUSH
45863: LD_INT 32
45865: PUSH
45866: LD_INT 33
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: IN
45873: NOT
45874: OR
45875: IFFALSE 45879
// exit ;
45877: GO 47015
// nat := GetNation ( tower ) ;
45879: LD_ADDR_VAR 0 12
45883: PUSH
45884: LD_VAR 0 1
45888: PPUSH
45889: CALL_OW 248
45893: ST_TO_ADDR
// side := GetSide ( tower ) ;
45894: LD_ADDR_VAR 0 16
45898: PUSH
45899: LD_VAR 0 1
45903: PPUSH
45904: CALL_OW 255
45908: ST_TO_ADDR
// x := GetX ( tower ) ;
45909: LD_ADDR_VAR 0 10
45913: PUSH
45914: LD_VAR 0 1
45918: PPUSH
45919: CALL_OW 250
45923: ST_TO_ADDR
// y := GetY ( tower ) ;
45924: LD_ADDR_VAR 0 11
45928: PUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: CALL_OW 251
45938: ST_TO_ADDR
// if not x or not y then
45939: LD_VAR 0 10
45943: NOT
45944: PUSH
45945: LD_VAR 0 11
45949: NOT
45950: OR
45951: IFFALSE 45955
// exit ;
45953: GO 47015
// weapon := 0 ;
45955: LD_ADDR_VAR 0 18
45959: PUSH
45960: LD_INT 0
45962: ST_TO_ADDR
// fac_list := [ ] ;
45963: LD_ADDR_VAR 0 17
45967: PUSH
45968: EMPTY
45969: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
45970: LD_ADDR_VAR 0 6
45974: PUSH
45975: LD_VAR 0 1
45979: PPUSH
45980: CALL_OW 274
45984: PPUSH
45985: LD_VAR 0 2
45989: PPUSH
45990: CALL 43593 0 2
45994: PPUSH
45995: LD_INT 30
45997: PUSH
45998: LD_INT 3
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PPUSH
46005: CALL_OW 72
46009: ST_TO_ADDR
// if not factories then
46010: LD_VAR 0 6
46014: NOT
46015: IFFALSE 46019
// exit ;
46017: GO 47015
// for i in factories do
46019: LD_ADDR_VAR 0 8
46023: PUSH
46024: LD_VAR 0 6
46028: PUSH
46029: FOR_IN
46030: IFFALSE 46055
// fac_list := fac_list union AvailableWeaponList ( i ) ;
46032: LD_ADDR_VAR 0 17
46036: PUSH
46037: LD_VAR 0 17
46041: PUSH
46042: LD_VAR 0 8
46046: PPUSH
46047: CALL_OW 478
46051: UNION
46052: ST_TO_ADDR
46053: GO 46029
46055: POP
46056: POP
// if not fac_list then
46057: LD_VAR 0 17
46061: NOT
46062: IFFALSE 46066
// exit ;
46064: GO 47015
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
46066: LD_ADDR_VAR 0 5
46070: PUSH
46071: LD_INT 4
46073: PUSH
46074: LD_INT 5
46076: PUSH
46077: LD_INT 9
46079: PUSH
46080: LD_INT 10
46082: PUSH
46083: LD_INT 6
46085: PUSH
46086: LD_INT 7
46088: PUSH
46089: LD_INT 11
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 27
46103: PUSH
46104: LD_INT 28
46106: PUSH
46107: LD_INT 26
46109: PUSH
46110: LD_INT 30
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 43
46121: PUSH
46122: LD_INT 44
46124: PUSH
46125: LD_INT 46
46127: PUSH
46128: LD_INT 45
46130: PUSH
46131: LD_INT 47
46133: PUSH
46134: LD_INT 49
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: PUSH
46150: LD_VAR 0 12
46154: ARRAY
46155: ST_TO_ADDR
// for i in list do
46156: LD_ADDR_VAR 0 8
46160: PUSH
46161: LD_VAR 0 5
46165: PUSH
46166: FOR_IN
46167: IFFALSE 46200
// if not i in fac_list then
46169: LD_VAR 0 8
46173: PUSH
46174: LD_VAR 0 17
46178: IN
46179: NOT
46180: IFFALSE 46198
// list := list diff i ;
46182: LD_ADDR_VAR 0 5
46186: PUSH
46187: LD_VAR 0 5
46191: PUSH
46192: LD_VAR 0 8
46196: DIFF
46197: ST_TO_ADDR
46198: GO 46166
46200: POP
46201: POP
// if not list then
46202: LD_VAR 0 5
46206: NOT
46207: IFFALSE 46211
// exit ;
46209: GO 47015
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
46211: LD_VAR 0 12
46215: PUSH
46216: LD_INT 3
46218: EQUAL
46219: PUSH
46220: LD_INT 49
46222: PUSH
46223: LD_VAR 0 5
46227: IN
46228: AND
46229: PUSH
46230: LD_INT 31
46232: PPUSH
46233: LD_VAR 0 16
46237: PPUSH
46238: CALL_OW 321
46242: PUSH
46243: LD_INT 2
46245: EQUAL
46246: AND
46247: IFFALSE 46307
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
46249: LD_INT 22
46251: PUSH
46252: LD_VAR 0 16
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 35
46263: PUSH
46264: LD_INT 49
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 91
46273: PUSH
46274: LD_VAR 0 1
46278: PUSH
46279: LD_INT 10
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: LIST
46291: PPUSH
46292: CALL_OW 69
46296: NOT
46297: IFFALSE 46307
// weapon := ru_time_lapser ;
46299: LD_ADDR_VAR 0 18
46303: PUSH
46304: LD_INT 49
46306: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
46307: LD_VAR 0 12
46311: PUSH
46312: LD_INT 1
46314: PUSH
46315: LD_INT 2
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: IN
46322: PUSH
46323: LD_INT 11
46325: PUSH
46326: LD_VAR 0 5
46330: IN
46331: PUSH
46332: LD_INT 30
46334: PUSH
46335: LD_VAR 0 5
46339: IN
46340: OR
46341: AND
46342: PUSH
46343: LD_INT 6
46345: PPUSH
46346: LD_VAR 0 16
46350: PPUSH
46351: CALL_OW 321
46355: PUSH
46356: LD_INT 2
46358: EQUAL
46359: AND
46360: IFFALSE 46525
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
46362: LD_INT 22
46364: PUSH
46365: LD_VAR 0 16
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: LD_INT 35
46379: PUSH
46380: LD_INT 11
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: PUSH
46387: LD_INT 35
46389: PUSH
46390: LD_INT 30
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 91
46404: PUSH
46405: LD_VAR 0 1
46409: PUSH
46410: LD_INT 18
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: LIST
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: LIST
46422: PPUSH
46423: CALL_OW 69
46427: NOT
46428: PUSH
46429: LD_INT 22
46431: PUSH
46432: LD_VAR 0 16
46436: PUSH
46437: EMPTY
46438: LIST
46439: LIST
46440: PUSH
46441: LD_INT 2
46443: PUSH
46444: LD_INT 30
46446: PUSH
46447: LD_INT 32
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: PUSH
46454: LD_INT 30
46456: PUSH
46457: LD_INT 33
46459: PUSH
46460: EMPTY
46461: LIST
46462: LIST
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 91
46471: PUSH
46472: LD_VAR 0 1
46476: PUSH
46477: LD_INT 12
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: LIST
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: PUSH
46490: EMPTY
46491: LIST
46492: PPUSH
46493: CALL_OW 69
46497: PUSH
46498: LD_INT 2
46500: GREATER
46501: AND
46502: IFFALSE 46525
// weapon := [ us_radar , ar_radar ] [ nat ] ;
46504: LD_ADDR_VAR 0 18
46508: PUSH
46509: LD_INT 11
46511: PUSH
46512: LD_INT 30
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_VAR 0 12
46523: ARRAY
46524: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
46525: LD_VAR 0 18
46529: NOT
46530: PUSH
46531: LD_INT 40
46533: PPUSH
46534: LD_VAR 0 16
46538: PPUSH
46539: CALL_OW 321
46543: PUSH
46544: LD_INT 2
46546: EQUAL
46547: AND
46548: PUSH
46549: LD_INT 7
46551: PUSH
46552: LD_VAR 0 5
46556: IN
46557: PUSH
46558: LD_INT 28
46560: PUSH
46561: LD_VAR 0 5
46565: IN
46566: OR
46567: PUSH
46568: LD_INT 45
46570: PUSH
46571: LD_VAR 0 5
46575: IN
46576: OR
46577: AND
46578: IFFALSE 46832
// begin hex := GetHexInfo ( x , y ) ;
46580: LD_ADDR_VAR 0 4
46584: PUSH
46585: LD_VAR 0 10
46589: PPUSH
46590: LD_VAR 0 11
46594: PPUSH
46595: CALL_OW 546
46599: ST_TO_ADDR
// if hex [ 1 ] then
46600: LD_VAR 0 4
46604: PUSH
46605: LD_INT 1
46607: ARRAY
46608: IFFALSE 46612
// exit ;
46610: GO 47015
// height := hex [ 2 ] ;
46612: LD_ADDR_VAR 0 15
46616: PUSH
46617: LD_VAR 0 4
46621: PUSH
46622: LD_INT 2
46624: ARRAY
46625: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46626: LD_ADDR_VAR 0 14
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: LD_INT 2
46636: PUSH
46637: LD_INT 3
46639: PUSH
46640: LD_INT 5
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: ST_TO_ADDR
// for i in tmp do
46649: LD_ADDR_VAR 0 8
46653: PUSH
46654: LD_VAR 0 14
46658: PUSH
46659: FOR_IN
46660: IFFALSE 46830
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46662: LD_ADDR_VAR 0 9
46666: PUSH
46667: LD_VAR 0 10
46671: PPUSH
46672: LD_VAR 0 8
46676: PPUSH
46677: LD_INT 5
46679: PPUSH
46680: CALL_OW 272
46684: PUSH
46685: LD_VAR 0 11
46689: PPUSH
46690: LD_VAR 0 8
46694: PPUSH
46695: LD_INT 5
46697: PPUSH
46698: CALL_OW 273
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46707: LD_VAR 0 9
46711: PUSH
46712: LD_INT 1
46714: ARRAY
46715: PPUSH
46716: LD_VAR 0 9
46720: PUSH
46721: LD_INT 2
46723: ARRAY
46724: PPUSH
46725: CALL_OW 488
46729: IFFALSE 46828
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46731: LD_ADDR_VAR 0 4
46735: PUSH
46736: LD_VAR 0 9
46740: PUSH
46741: LD_INT 1
46743: ARRAY
46744: PPUSH
46745: LD_VAR 0 9
46749: PUSH
46750: LD_INT 2
46752: ARRAY
46753: PPUSH
46754: CALL_OW 546
46758: ST_TO_ADDR
// if hex [ 1 ] then
46759: LD_VAR 0 4
46763: PUSH
46764: LD_INT 1
46766: ARRAY
46767: IFFALSE 46771
// continue ;
46769: GO 46659
// h := hex [ 2 ] ;
46771: LD_ADDR_VAR 0 13
46775: PUSH
46776: LD_VAR 0 4
46780: PUSH
46781: LD_INT 2
46783: ARRAY
46784: ST_TO_ADDR
// if h + 7 < height then
46785: LD_VAR 0 13
46789: PUSH
46790: LD_INT 7
46792: PLUS
46793: PUSH
46794: LD_VAR 0 15
46798: LESS
46799: IFFALSE 46828
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46801: LD_ADDR_VAR 0 18
46805: PUSH
46806: LD_INT 7
46808: PUSH
46809: LD_INT 28
46811: PUSH
46812: LD_INT 45
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: LIST
46819: PUSH
46820: LD_VAR 0 12
46824: ARRAY
46825: ST_TO_ADDR
// break ;
46826: GO 46830
// end ; end ; end ;
46828: GO 46659
46830: POP
46831: POP
// end ; if not weapon then
46832: LD_VAR 0 18
46836: NOT
46837: IFFALSE 46897
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46839: LD_ADDR_VAR 0 5
46843: PUSH
46844: LD_VAR 0 5
46848: PUSH
46849: LD_INT 11
46851: PUSH
46852: LD_INT 30
46854: PUSH
46855: LD_INT 49
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: LIST
46862: DIFF
46863: ST_TO_ADDR
// if not list then
46864: LD_VAR 0 5
46868: NOT
46869: IFFALSE 46873
// exit ;
46871: GO 47015
// weapon := list [ rand ( 1 , list ) ] ;
46873: LD_ADDR_VAR 0 18
46877: PUSH
46878: LD_VAR 0 5
46882: PUSH
46883: LD_INT 1
46885: PPUSH
46886: LD_VAR 0 5
46890: PPUSH
46891: CALL_OW 12
46895: ARRAY
46896: ST_TO_ADDR
// end ; if weapon then
46897: LD_VAR 0 18
46901: IFFALSE 47015
// begin tmp := CostOfWeapon ( weapon ) ;
46903: LD_ADDR_VAR 0 14
46907: PUSH
46908: LD_VAR 0 18
46912: PPUSH
46913: CALL_OW 451
46917: ST_TO_ADDR
// j := GetBase ( tower ) ;
46918: LD_ADDR_VAR 0 9
46922: PUSH
46923: LD_VAR 0 1
46927: PPUSH
46928: CALL_OW 274
46932: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46933: LD_VAR 0 9
46937: PPUSH
46938: LD_INT 1
46940: PPUSH
46941: CALL_OW 275
46945: PUSH
46946: LD_VAR 0 14
46950: PUSH
46951: LD_INT 1
46953: ARRAY
46954: GREATEREQUAL
46955: PUSH
46956: LD_VAR 0 9
46960: PPUSH
46961: LD_INT 2
46963: PPUSH
46964: CALL_OW 275
46968: PUSH
46969: LD_VAR 0 14
46973: PUSH
46974: LD_INT 2
46976: ARRAY
46977: GREATEREQUAL
46978: AND
46979: PUSH
46980: LD_VAR 0 9
46984: PPUSH
46985: LD_INT 3
46987: PPUSH
46988: CALL_OW 275
46992: PUSH
46993: LD_VAR 0 14
46997: PUSH
46998: LD_INT 3
47000: ARRAY
47001: GREATEREQUAL
47002: AND
47003: IFFALSE 47015
// result := weapon ;
47005: LD_ADDR_VAR 0 3
47009: PUSH
47010: LD_VAR 0 18
47014: ST_TO_ADDR
// end ; end ;
47015: LD_VAR 0 3
47019: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
47020: LD_INT 0
47022: PPUSH
47023: PPUSH
// result := true ;
47024: LD_ADDR_VAR 0 3
47028: PUSH
47029: LD_INT 1
47031: ST_TO_ADDR
// if array1 = array2 then
47032: LD_VAR 0 1
47036: PUSH
47037: LD_VAR 0 2
47041: EQUAL
47042: IFFALSE 47102
// begin for i = 1 to array1 do
47044: LD_ADDR_VAR 0 4
47048: PUSH
47049: DOUBLE
47050: LD_INT 1
47052: DEC
47053: ST_TO_ADDR
47054: LD_VAR 0 1
47058: PUSH
47059: FOR_TO
47060: IFFALSE 47098
// if array1 [ i ] <> array2 [ i ] then
47062: LD_VAR 0 1
47066: PUSH
47067: LD_VAR 0 4
47071: ARRAY
47072: PUSH
47073: LD_VAR 0 2
47077: PUSH
47078: LD_VAR 0 4
47082: ARRAY
47083: NONEQUAL
47084: IFFALSE 47096
// begin result := false ;
47086: LD_ADDR_VAR 0 3
47090: PUSH
47091: LD_INT 0
47093: ST_TO_ADDR
// break ;
47094: GO 47098
// end ;
47096: GO 47059
47098: POP
47099: POP
// end else
47100: GO 47110
// result := false ;
47102: LD_ADDR_VAR 0 3
47106: PUSH
47107: LD_INT 0
47109: ST_TO_ADDR
// end ;
47110: LD_VAR 0 3
47114: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
47115: LD_INT 0
47117: PPUSH
47118: PPUSH
47119: PPUSH
// pom := GetBase ( fac ) ;
47120: LD_ADDR_VAR 0 5
47124: PUSH
47125: LD_VAR 0 1
47129: PPUSH
47130: CALL_OW 274
47134: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
47135: LD_ADDR_VAR 0 4
47139: PUSH
47140: LD_VAR 0 2
47144: PUSH
47145: LD_INT 1
47147: ARRAY
47148: PPUSH
47149: LD_VAR 0 2
47153: PUSH
47154: LD_INT 2
47156: ARRAY
47157: PPUSH
47158: LD_VAR 0 2
47162: PUSH
47163: LD_INT 3
47165: ARRAY
47166: PPUSH
47167: LD_VAR 0 2
47171: PUSH
47172: LD_INT 4
47174: ARRAY
47175: PPUSH
47176: CALL_OW 449
47180: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47181: LD_ADDR_VAR 0 3
47185: PUSH
47186: LD_VAR 0 5
47190: PPUSH
47191: LD_INT 1
47193: PPUSH
47194: CALL_OW 275
47198: PUSH
47199: LD_VAR 0 4
47203: PUSH
47204: LD_INT 1
47206: ARRAY
47207: GREATEREQUAL
47208: PUSH
47209: LD_VAR 0 5
47213: PPUSH
47214: LD_INT 2
47216: PPUSH
47217: CALL_OW 275
47221: PUSH
47222: LD_VAR 0 4
47226: PUSH
47227: LD_INT 2
47229: ARRAY
47230: GREATEREQUAL
47231: AND
47232: PUSH
47233: LD_VAR 0 5
47237: PPUSH
47238: LD_INT 3
47240: PPUSH
47241: CALL_OW 275
47245: PUSH
47246: LD_VAR 0 4
47250: PUSH
47251: LD_INT 3
47253: ARRAY
47254: GREATEREQUAL
47255: AND
47256: ST_TO_ADDR
// end ;
47257: LD_VAR 0 3
47261: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
47262: LD_INT 0
47264: PPUSH
47265: PPUSH
47266: PPUSH
47267: PPUSH
// pom := GetBase ( building ) ;
47268: LD_ADDR_VAR 0 3
47272: PUSH
47273: LD_VAR 0 1
47277: PPUSH
47278: CALL_OW 274
47282: ST_TO_ADDR
// if not pom then
47283: LD_VAR 0 3
47287: NOT
47288: IFFALSE 47292
// exit ;
47290: GO 47462
// btype := GetBType ( building ) ;
47292: LD_ADDR_VAR 0 5
47296: PUSH
47297: LD_VAR 0 1
47301: PPUSH
47302: CALL_OW 266
47306: ST_TO_ADDR
// if btype = b_armoury then
47307: LD_VAR 0 5
47311: PUSH
47312: LD_INT 4
47314: EQUAL
47315: IFFALSE 47325
// btype := b_barracks ;
47317: LD_ADDR_VAR 0 5
47321: PUSH
47322: LD_INT 5
47324: ST_TO_ADDR
// if btype = b_depot then
47325: LD_VAR 0 5
47329: PUSH
47330: LD_INT 0
47332: EQUAL
47333: IFFALSE 47343
// btype := b_warehouse ;
47335: LD_ADDR_VAR 0 5
47339: PUSH
47340: LD_INT 1
47342: ST_TO_ADDR
// if btype = b_workshop then
47343: LD_VAR 0 5
47347: PUSH
47348: LD_INT 2
47350: EQUAL
47351: IFFALSE 47361
// btype := b_factory ;
47353: LD_ADDR_VAR 0 5
47357: PUSH
47358: LD_INT 3
47360: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47361: LD_ADDR_VAR 0 4
47365: PUSH
47366: LD_VAR 0 5
47370: PPUSH
47371: LD_VAR 0 1
47375: PPUSH
47376: CALL_OW 248
47380: PPUSH
47381: CALL_OW 450
47385: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47386: LD_ADDR_VAR 0 2
47390: PUSH
47391: LD_VAR 0 3
47395: PPUSH
47396: LD_INT 1
47398: PPUSH
47399: CALL_OW 275
47403: PUSH
47404: LD_VAR 0 4
47408: PUSH
47409: LD_INT 1
47411: ARRAY
47412: GREATEREQUAL
47413: PUSH
47414: LD_VAR 0 3
47418: PPUSH
47419: LD_INT 2
47421: PPUSH
47422: CALL_OW 275
47426: PUSH
47427: LD_VAR 0 4
47431: PUSH
47432: LD_INT 2
47434: ARRAY
47435: GREATEREQUAL
47436: AND
47437: PUSH
47438: LD_VAR 0 3
47442: PPUSH
47443: LD_INT 3
47445: PPUSH
47446: CALL_OW 275
47450: PUSH
47451: LD_VAR 0 4
47455: PUSH
47456: LD_INT 3
47458: ARRAY
47459: GREATEREQUAL
47460: AND
47461: ST_TO_ADDR
// end ;
47462: LD_VAR 0 2
47466: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
47467: LD_INT 0
47469: PPUSH
47470: PPUSH
47471: PPUSH
// pom := GetBase ( building ) ;
47472: LD_ADDR_VAR 0 4
47476: PUSH
47477: LD_VAR 0 1
47481: PPUSH
47482: CALL_OW 274
47486: ST_TO_ADDR
// if not pom then
47487: LD_VAR 0 4
47491: NOT
47492: IFFALSE 47496
// exit ;
47494: GO 47597
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
47496: LD_ADDR_VAR 0 5
47500: PUSH
47501: LD_VAR 0 2
47505: PPUSH
47506: LD_VAR 0 1
47510: PPUSH
47511: CALL_OW 248
47515: PPUSH
47516: CALL_OW 450
47520: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47521: LD_ADDR_VAR 0 3
47525: PUSH
47526: LD_VAR 0 4
47530: PPUSH
47531: LD_INT 1
47533: PPUSH
47534: CALL_OW 275
47538: PUSH
47539: LD_VAR 0 5
47543: PUSH
47544: LD_INT 1
47546: ARRAY
47547: GREATEREQUAL
47548: PUSH
47549: LD_VAR 0 4
47553: PPUSH
47554: LD_INT 2
47556: PPUSH
47557: CALL_OW 275
47561: PUSH
47562: LD_VAR 0 5
47566: PUSH
47567: LD_INT 2
47569: ARRAY
47570: GREATEREQUAL
47571: AND
47572: PUSH
47573: LD_VAR 0 4
47577: PPUSH
47578: LD_INT 3
47580: PPUSH
47581: CALL_OW 275
47585: PUSH
47586: LD_VAR 0 5
47590: PUSH
47591: LD_INT 3
47593: ARRAY
47594: GREATEREQUAL
47595: AND
47596: ST_TO_ADDR
// end ;
47597: LD_VAR 0 3
47601: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
47602: LD_INT 0
47604: PPUSH
47605: PPUSH
47606: PPUSH
47607: PPUSH
47608: PPUSH
47609: PPUSH
47610: PPUSH
47611: PPUSH
47612: PPUSH
47613: PPUSH
// result := false ;
47614: LD_ADDR_VAR 0 6
47618: PUSH
47619: LD_INT 0
47621: ST_TO_ADDR
// if not base or not btype or not x or not y then
47622: LD_VAR 0 1
47626: NOT
47627: PUSH
47628: LD_VAR 0 2
47632: NOT
47633: OR
47634: PUSH
47635: LD_VAR 0 3
47639: NOT
47640: OR
47641: PUSH
47642: LD_VAR 0 4
47646: NOT
47647: OR
47648: IFFALSE 47652
// exit ;
47650: GO 48261
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
47652: LD_ADDR_VAR 0 12
47656: PUSH
47657: LD_VAR 0 2
47661: PPUSH
47662: LD_VAR 0 3
47666: PPUSH
47667: LD_VAR 0 4
47671: PPUSH
47672: LD_VAR 0 5
47676: PPUSH
47677: LD_VAR 0 1
47681: PUSH
47682: LD_INT 1
47684: ARRAY
47685: PPUSH
47686: CALL_OW 248
47690: PPUSH
47691: LD_INT 0
47693: PPUSH
47694: CALL 49098 0 6
47698: ST_TO_ADDR
// if not hexes then
47699: LD_VAR 0 12
47703: NOT
47704: IFFALSE 47708
// exit ;
47706: GO 48261
// for i = 1 to hexes do
47708: LD_ADDR_VAR 0 7
47712: PUSH
47713: DOUBLE
47714: LD_INT 1
47716: DEC
47717: ST_TO_ADDR
47718: LD_VAR 0 12
47722: PUSH
47723: FOR_TO
47724: IFFALSE 48259
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47726: LD_ADDR_VAR 0 11
47730: PUSH
47731: LD_VAR 0 12
47735: PUSH
47736: LD_VAR 0 7
47740: ARRAY
47741: PUSH
47742: LD_INT 1
47744: ARRAY
47745: PPUSH
47746: LD_VAR 0 12
47750: PUSH
47751: LD_VAR 0 7
47755: ARRAY
47756: PUSH
47757: LD_INT 2
47759: ARRAY
47760: PPUSH
47761: CALL_OW 428
47765: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47766: LD_VAR 0 12
47770: PUSH
47771: LD_VAR 0 7
47775: ARRAY
47776: PUSH
47777: LD_INT 1
47779: ARRAY
47780: PPUSH
47781: LD_VAR 0 12
47785: PUSH
47786: LD_VAR 0 7
47790: ARRAY
47791: PUSH
47792: LD_INT 2
47794: ARRAY
47795: PPUSH
47796: CALL_OW 351
47800: PUSH
47801: LD_VAR 0 12
47805: PUSH
47806: LD_VAR 0 7
47810: ARRAY
47811: PUSH
47812: LD_INT 1
47814: ARRAY
47815: PPUSH
47816: LD_VAR 0 12
47820: PUSH
47821: LD_VAR 0 7
47825: ARRAY
47826: PUSH
47827: LD_INT 2
47829: ARRAY
47830: PPUSH
47831: CALL_OW 488
47835: NOT
47836: OR
47837: PUSH
47838: LD_VAR 0 11
47842: PPUSH
47843: CALL_OW 247
47847: PUSH
47848: LD_INT 3
47850: EQUAL
47851: OR
47852: IFFALSE 47858
// exit ;
47854: POP
47855: POP
47856: GO 48261
// if not tmp or not tmp in base then
47858: LD_VAR 0 11
47862: NOT
47863: PUSH
47864: LD_VAR 0 11
47868: PUSH
47869: LD_VAR 0 1
47873: IN
47874: NOT
47875: OR
47876: IFFALSE 47880
// continue ;
47878: GO 47723
// result := true ;
47880: LD_ADDR_VAR 0 6
47884: PUSH
47885: LD_INT 1
47887: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47888: LD_ADDR_VAR 0 15
47892: PUSH
47893: LD_VAR 0 1
47897: PPUSH
47898: LD_INT 22
47900: PUSH
47901: LD_VAR 0 11
47905: PPUSH
47906: CALL_OW 255
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 30
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 30
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: LIST
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PPUSH
47947: CALL_OW 72
47951: ST_TO_ADDR
// if dep then
47952: LD_VAR 0 15
47956: IFFALSE 48092
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47958: LD_ADDR_VAR 0 14
47962: PUSH
47963: LD_VAR 0 15
47967: PUSH
47968: LD_INT 1
47970: ARRAY
47971: PPUSH
47972: CALL_OW 250
47976: PPUSH
47977: LD_VAR 0 15
47981: PUSH
47982: LD_INT 1
47984: ARRAY
47985: PPUSH
47986: CALL_OW 254
47990: PPUSH
47991: LD_INT 5
47993: PPUSH
47994: CALL_OW 272
47998: PUSH
47999: LD_VAR 0 15
48003: PUSH
48004: LD_INT 1
48006: ARRAY
48007: PPUSH
48008: CALL_OW 251
48012: PPUSH
48013: LD_VAR 0 15
48017: PUSH
48018: LD_INT 1
48020: ARRAY
48021: PPUSH
48022: CALL_OW 254
48026: PPUSH
48027: LD_INT 5
48029: PPUSH
48030: CALL_OW 273
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
48039: LD_VAR 0 14
48043: PUSH
48044: LD_INT 1
48046: ARRAY
48047: PPUSH
48048: LD_VAR 0 14
48052: PUSH
48053: LD_INT 2
48055: ARRAY
48056: PPUSH
48057: CALL_OW 488
48061: IFFALSE 48092
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
48063: LD_VAR 0 11
48067: PPUSH
48068: LD_VAR 0 14
48072: PUSH
48073: LD_INT 1
48075: ARRAY
48076: PPUSH
48077: LD_VAR 0 14
48081: PUSH
48082: LD_INT 2
48084: ARRAY
48085: PPUSH
48086: CALL_OW 111
// continue ;
48090: GO 47723
// end ; end ; r := GetDir ( tmp ) ;
48092: LD_ADDR_VAR 0 13
48096: PUSH
48097: LD_VAR 0 11
48101: PPUSH
48102: CALL_OW 254
48106: ST_TO_ADDR
// if r = 5 then
48107: LD_VAR 0 13
48111: PUSH
48112: LD_INT 5
48114: EQUAL
48115: IFFALSE 48125
// r := 0 ;
48117: LD_ADDR_VAR 0 13
48121: PUSH
48122: LD_INT 0
48124: ST_TO_ADDR
// for j = r to 5 do
48125: LD_ADDR_VAR 0 8
48129: PUSH
48130: DOUBLE
48131: LD_VAR 0 13
48135: DEC
48136: ST_TO_ADDR
48137: LD_INT 5
48139: PUSH
48140: FOR_TO
48141: IFFALSE 48255
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
48143: LD_ADDR_VAR 0 9
48147: PUSH
48148: LD_VAR 0 11
48152: PPUSH
48153: CALL_OW 250
48157: PPUSH
48158: LD_VAR 0 8
48162: PPUSH
48163: LD_INT 2
48165: PPUSH
48166: CALL_OW 272
48170: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
48171: LD_ADDR_VAR 0 10
48175: PUSH
48176: LD_VAR 0 11
48180: PPUSH
48181: CALL_OW 251
48185: PPUSH
48186: LD_VAR 0 8
48190: PPUSH
48191: LD_INT 2
48193: PPUSH
48194: CALL_OW 273
48198: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
48199: LD_VAR 0 9
48203: PPUSH
48204: LD_VAR 0 10
48208: PPUSH
48209: CALL_OW 488
48213: PUSH
48214: LD_VAR 0 9
48218: PPUSH
48219: LD_VAR 0 10
48223: PPUSH
48224: CALL_OW 428
48228: NOT
48229: AND
48230: IFFALSE 48253
// begin ComMoveXY ( tmp , _x , _y ) ;
48232: LD_VAR 0 11
48236: PPUSH
48237: LD_VAR 0 9
48241: PPUSH
48242: LD_VAR 0 10
48246: PPUSH
48247: CALL_OW 111
// break ;
48251: GO 48255
// end ; end ;
48253: GO 48140
48255: POP
48256: POP
// end ;
48257: GO 47723
48259: POP
48260: POP
// end ;
48261: LD_VAR 0 6
48265: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
48266: LD_INT 0
48268: PPUSH
48269: PPUSH
48270: PPUSH
48271: PPUSH
48272: PPUSH
48273: PPUSH
48274: PPUSH
48275: PPUSH
48276: PPUSH
48277: PPUSH
// result := false ;
48278: LD_ADDR_VAR 0 6
48282: PUSH
48283: LD_INT 0
48285: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48286: LD_VAR 0 1
48290: NOT
48291: PUSH
48292: LD_VAR 0 1
48296: PPUSH
48297: CALL_OW 266
48301: PUSH
48302: LD_INT 0
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: IN
48312: NOT
48313: OR
48314: PUSH
48315: LD_VAR 0 2
48319: NOT
48320: OR
48321: PUSH
48322: LD_VAR 0 5
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: PUSH
48333: LD_INT 2
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: LD_INT 4
48341: PUSH
48342: LD_INT 5
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: IN
48353: NOT
48354: OR
48355: PUSH
48356: LD_VAR 0 3
48360: PPUSH
48361: LD_VAR 0 4
48365: PPUSH
48366: CALL_OW 488
48370: NOT
48371: OR
48372: IFFALSE 48376
// exit ;
48374: GO 49093
// pom := GetBase ( depot ) ;
48376: LD_ADDR_VAR 0 10
48380: PUSH
48381: LD_VAR 0 1
48385: PPUSH
48386: CALL_OW 274
48390: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48391: LD_ADDR_VAR 0 11
48395: PUSH
48396: LD_VAR 0 2
48400: PPUSH
48401: LD_VAR 0 1
48405: PPUSH
48406: CALL_OW 248
48410: PPUSH
48411: CALL_OW 450
48415: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48416: LD_VAR 0 10
48420: PPUSH
48421: LD_INT 1
48423: PPUSH
48424: CALL_OW 275
48428: PUSH
48429: LD_VAR 0 11
48433: PUSH
48434: LD_INT 1
48436: ARRAY
48437: GREATEREQUAL
48438: PUSH
48439: LD_VAR 0 10
48443: PPUSH
48444: LD_INT 2
48446: PPUSH
48447: CALL_OW 275
48451: PUSH
48452: LD_VAR 0 11
48456: PUSH
48457: LD_INT 2
48459: ARRAY
48460: GREATEREQUAL
48461: AND
48462: PUSH
48463: LD_VAR 0 10
48467: PPUSH
48468: LD_INT 3
48470: PPUSH
48471: CALL_OW 275
48475: PUSH
48476: LD_VAR 0 11
48480: PUSH
48481: LD_INT 3
48483: ARRAY
48484: GREATEREQUAL
48485: AND
48486: NOT
48487: IFFALSE 48491
// exit ;
48489: GO 49093
// if GetBType ( depot ) = b_depot then
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 266
48500: PUSH
48501: LD_INT 0
48503: EQUAL
48504: IFFALSE 48516
// dist := 28 else
48506: LD_ADDR_VAR 0 14
48510: PUSH
48511: LD_INT 28
48513: ST_TO_ADDR
48514: GO 48524
// dist := 36 ;
48516: LD_ADDR_VAR 0 14
48520: PUSH
48521: LD_INT 36
48523: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48524: LD_VAR 0 1
48528: PPUSH
48529: LD_VAR 0 3
48533: PPUSH
48534: LD_VAR 0 4
48538: PPUSH
48539: CALL_OW 297
48543: PUSH
48544: LD_VAR 0 14
48548: GREATER
48549: IFFALSE 48553
// exit ;
48551: GO 49093
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48553: LD_ADDR_VAR 0 12
48557: PUSH
48558: LD_VAR 0 2
48562: PPUSH
48563: LD_VAR 0 3
48567: PPUSH
48568: LD_VAR 0 4
48572: PPUSH
48573: LD_VAR 0 5
48577: PPUSH
48578: LD_VAR 0 1
48582: PPUSH
48583: CALL_OW 248
48587: PPUSH
48588: LD_INT 0
48590: PPUSH
48591: CALL 49098 0 6
48595: ST_TO_ADDR
// if not hexes then
48596: LD_VAR 0 12
48600: NOT
48601: IFFALSE 48605
// exit ;
48603: GO 49093
// hex := GetHexInfo ( x , y ) ;
48605: LD_ADDR_VAR 0 15
48609: PUSH
48610: LD_VAR 0 3
48614: PPUSH
48615: LD_VAR 0 4
48619: PPUSH
48620: CALL_OW 546
48624: ST_TO_ADDR
// if hex [ 1 ] then
48625: LD_VAR 0 15
48629: PUSH
48630: LD_INT 1
48632: ARRAY
48633: IFFALSE 48637
// exit ;
48635: GO 49093
// height := hex [ 2 ] ;
48637: LD_ADDR_VAR 0 13
48641: PUSH
48642: LD_VAR 0 15
48646: PUSH
48647: LD_INT 2
48649: ARRAY
48650: ST_TO_ADDR
// for i = 1 to hexes do
48651: LD_ADDR_VAR 0 7
48655: PUSH
48656: DOUBLE
48657: LD_INT 1
48659: DEC
48660: ST_TO_ADDR
48661: LD_VAR 0 12
48665: PUSH
48666: FOR_TO
48667: IFFALSE 48997
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48669: LD_VAR 0 12
48673: PUSH
48674: LD_VAR 0 7
48678: ARRAY
48679: PUSH
48680: LD_INT 1
48682: ARRAY
48683: PPUSH
48684: LD_VAR 0 12
48688: PUSH
48689: LD_VAR 0 7
48693: ARRAY
48694: PUSH
48695: LD_INT 2
48697: ARRAY
48698: PPUSH
48699: CALL_OW 488
48703: NOT
48704: PUSH
48705: LD_VAR 0 12
48709: PUSH
48710: LD_VAR 0 7
48714: ARRAY
48715: PUSH
48716: LD_INT 1
48718: ARRAY
48719: PPUSH
48720: LD_VAR 0 12
48724: PUSH
48725: LD_VAR 0 7
48729: ARRAY
48730: PUSH
48731: LD_INT 2
48733: ARRAY
48734: PPUSH
48735: CALL_OW 428
48739: PUSH
48740: LD_INT 0
48742: GREATER
48743: OR
48744: PUSH
48745: LD_VAR 0 12
48749: PUSH
48750: LD_VAR 0 7
48754: ARRAY
48755: PUSH
48756: LD_INT 1
48758: ARRAY
48759: PPUSH
48760: LD_VAR 0 12
48764: PUSH
48765: LD_VAR 0 7
48769: ARRAY
48770: PUSH
48771: LD_INT 2
48773: ARRAY
48774: PPUSH
48775: CALL_OW 351
48779: OR
48780: IFFALSE 48786
// exit ;
48782: POP
48783: POP
48784: GO 49093
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48786: LD_ADDR_VAR 0 8
48790: PUSH
48791: LD_VAR 0 12
48795: PUSH
48796: LD_VAR 0 7
48800: ARRAY
48801: PUSH
48802: LD_INT 1
48804: ARRAY
48805: PPUSH
48806: LD_VAR 0 12
48810: PUSH
48811: LD_VAR 0 7
48815: ARRAY
48816: PUSH
48817: LD_INT 2
48819: ARRAY
48820: PPUSH
48821: CALL_OW 546
48825: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48826: LD_VAR 0 8
48830: PUSH
48831: LD_INT 1
48833: ARRAY
48834: PUSH
48835: LD_VAR 0 8
48839: PUSH
48840: LD_INT 2
48842: ARRAY
48843: PUSH
48844: LD_VAR 0 13
48848: PUSH
48849: LD_INT 2
48851: PLUS
48852: GREATER
48853: OR
48854: PUSH
48855: LD_VAR 0 8
48859: PUSH
48860: LD_INT 2
48862: ARRAY
48863: PUSH
48864: LD_VAR 0 13
48868: PUSH
48869: LD_INT 2
48871: MINUS
48872: LESS
48873: OR
48874: PUSH
48875: LD_VAR 0 8
48879: PUSH
48880: LD_INT 3
48882: ARRAY
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 8
48889: PUSH
48890: LD_INT 9
48892: PUSH
48893: LD_INT 10
48895: PUSH
48896: LD_INT 11
48898: PUSH
48899: LD_INT 12
48901: PUSH
48902: LD_INT 13
48904: PUSH
48905: LD_INT 16
48907: PUSH
48908: LD_INT 17
48910: PUSH
48911: LD_INT 18
48913: PUSH
48914: LD_INT 19
48916: PUSH
48917: LD_INT 20
48919: PUSH
48920: LD_INT 21
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: IN
48938: NOT
48939: OR
48940: PUSH
48941: LD_VAR 0 8
48945: PUSH
48946: LD_INT 5
48948: ARRAY
48949: NOT
48950: OR
48951: PUSH
48952: LD_VAR 0 8
48956: PUSH
48957: LD_INT 6
48959: ARRAY
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 7
48969: PUSH
48970: LD_INT 9
48972: PUSH
48973: LD_INT 10
48975: PUSH
48976: LD_INT 11
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: IN
48987: NOT
48988: OR
48989: IFFALSE 48995
// exit ;
48991: POP
48992: POP
48993: GO 49093
// end ;
48995: GO 48666
48997: POP
48998: POP
// side := GetSide ( depot ) ;
48999: LD_ADDR_VAR 0 9
49003: PUSH
49004: LD_VAR 0 1
49008: PPUSH
49009: CALL_OW 255
49013: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49014: LD_VAR 0 9
49018: PPUSH
49019: LD_VAR 0 3
49023: PPUSH
49024: LD_VAR 0 4
49028: PPUSH
49029: LD_INT 20
49031: PPUSH
49032: CALL 41747 0 4
49036: PUSH
49037: LD_INT 4
49039: ARRAY
49040: IFFALSE 49044
// exit ;
49042: GO 49093
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49044: LD_VAR 0 2
49048: PUSH
49049: LD_INT 29
49051: PUSH
49052: LD_INT 30
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: IN
49059: PUSH
49060: LD_VAR 0 3
49064: PPUSH
49065: LD_VAR 0 4
49069: PPUSH
49070: LD_VAR 0 9
49074: PPUSH
49075: CALL_OW 440
49079: NOT
49080: AND
49081: IFFALSE 49085
// exit ;
49083: GO 49093
// result := true ;
49085: LD_ADDR_VAR 0 6
49089: PUSH
49090: LD_INT 1
49092: ST_TO_ADDR
// end ;
49093: LD_VAR 0 6
49097: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49098: LD_INT 0
49100: PPUSH
49101: PPUSH
49102: PPUSH
49103: PPUSH
49104: PPUSH
49105: PPUSH
49106: PPUSH
49107: PPUSH
49108: PPUSH
49109: PPUSH
49110: PPUSH
49111: PPUSH
49112: PPUSH
49113: PPUSH
49114: PPUSH
49115: PPUSH
49116: PPUSH
49117: PPUSH
49118: PPUSH
49119: PPUSH
49120: PPUSH
49121: PPUSH
49122: PPUSH
49123: PPUSH
49124: PPUSH
49125: PPUSH
49126: PPUSH
49127: PPUSH
49128: PPUSH
49129: PPUSH
49130: PPUSH
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
49145: PPUSH
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
49151: PPUSH
49152: PPUSH
49153: PPUSH
49154: PPUSH
49155: PPUSH
49156: PPUSH
49157: PPUSH
// result = [ ] ;
49158: LD_ADDR_VAR 0 7
49162: PUSH
49163: EMPTY
49164: ST_TO_ADDR
// temp_list = [ ] ;
49165: LD_ADDR_VAR 0 9
49169: PUSH
49170: EMPTY
49171: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49172: LD_VAR 0 4
49176: PUSH
49177: LD_INT 0
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 3
49188: PUSH
49189: LD_INT 4
49191: PUSH
49192: LD_INT 5
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: IN
49203: NOT
49204: PUSH
49205: LD_VAR 0 1
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: LD_INT 1
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: IN
49220: PUSH
49221: LD_VAR 0 5
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 3
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: IN
49240: NOT
49241: AND
49242: OR
49243: IFFALSE 49247
// exit ;
49245: GO 67638
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49247: LD_VAR 0 1
49251: PUSH
49252: LD_INT 6
49254: PUSH
49255: LD_INT 7
49257: PUSH
49258: LD_INT 8
49260: PUSH
49261: LD_INT 13
49263: PUSH
49264: LD_INT 12
49266: PUSH
49267: LD_INT 15
49269: PUSH
49270: LD_INT 11
49272: PUSH
49273: LD_INT 14
49275: PUSH
49276: LD_INT 10
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: IN
49290: IFFALSE 49300
// btype = b_lab ;
49292: LD_ADDR_VAR 0 1
49296: PUSH
49297: LD_INT 6
49299: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49300: LD_VAR 0 6
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 2
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: IN
49319: NOT
49320: PUSH
49321: LD_VAR 0 1
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: LD_INT 2
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: LD_INT 6
49340: PUSH
49341: LD_INT 36
49343: PUSH
49344: LD_INT 4
49346: PUSH
49347: LD_INT 5
49349: PUSH
49350: LD_INT 31
49352: PUSH
49353: LD_INT 32
49355: PUSH
49356: LD_INT 33
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: IN
49372: NOT
49373: PUSH
49374: LD_VAR 0 6
49378: PUSH
49379: LD_INT 1
49381: EQUAL
49382: AND
49383: OR
49384: PUSH
49385: LD_VAR 0 1
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: IN
49400: NOT
49401: PUSH
49402: LD_VAR 0 6
49406: PUSH
49407: LD_INT 2
49409: EQUAL
49410: AND
49411: OR
49412: IFFALSE 49422
// mode = 0 ;
49414: LD_ADDR_VAR 0 6
49418: PUSH
49419: LD_INT 0
49421: ST_TO_ADDR
// case mode of 0 :
49422: LD_VAR 0 6
49426: PUSH
49427: LD_INT 0
49429: DOUBLE
49430: EQUAL
49431: IFTRUE 49435
49433: GO 60888
49435: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49436: LD_ADDR_VAR 0 11
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 0
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 0
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 1
49505: NEG
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: NEG
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: EMPTY
49524: LIST
49525: LIST
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: LD_INT 1
49543: NEG
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 1
49571: NEG
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 0
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 1
49602: NEG
49603: PUSH
49604: LD_INT 2
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49629: LD_ADDR_VAR 0 12
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 1
49667: PUSH
49668: LD_INT 1
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 1
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PUSH
49696: LD_INT 1
49698: NEG
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 2
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: LD_INT 2
49752: NEG
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 2
49763: NEG
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49825: LD_ADDR_VAR 0 13
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 1
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 1
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 2
49918: PUSH
49919: LD_INT 1
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: PUSH
49939: LD_INT 2
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 1
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 2
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 3
49984: NEG
49985: PUSH
49986: LD_INT 2
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 3
49996: NEG
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50024: LD_ADDR_VAR 0 14
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: NEG
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 1
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 2
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 2
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 1
50139: PUSH
50140: LD_INT 2
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: NEG
50160: PUSH
50161: LD_INT 1
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 3
50185: NEG
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50220: LD_ADDR_VAR 0 15
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 0
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 0
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: LD_INT 1
50304: NEG
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 2
50322: PUSH
50323: LD_INT 1
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: LD_INT 0
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 3
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50413: LD_ADDR_VAR 0 16
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 0
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: NEG
50472: PUSH
50473: LD_INT 0
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 1
50494: NEG
50495: PUSH
50496: LD_INT 2
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: PUSH
50517: LD_INT 2
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: LD_INT 2
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: LD_INT 1
50540: NEG
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50606: LD_ADDR_VAR 0 17
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 0
50623: PUSH
50624: LD_INT 1
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 1
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 1
50664: NEG
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 2
50691: NEG
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 0
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: PUSH
50722: LD_INT 0
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 2
50741: PUSH
50742: LD_INT 2
50744: PUSH
50745: EMPTY
50746: LIST
50747: LIST
50748: PUSH
50749: LD_INT 1
50751: PUSH
50752: LD_INT 2
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 2
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50836: LD_ADDR_VAR 0 18
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: LD_INT 2
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 2
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 2
50971: PUSH
50972: LD_INT 2
50974: PUSH
50975: EMPTY
50976: LIST
50977: LIST
50978: PUSH
50979: LD_INT 1
50981: PUSH
50982: LD_INT 2
50984: PUSH
50985: EMPTY
50986: LIST
50987: LIST
50988: PUSH
50989: LD_INT 0
50991: PUSH
50992: LD_INT 2
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 2
51012: NEG
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51066: LD_ADDR_VAR 0 19
51070: PUSH
51071: LD_INT 0
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: LD_INT 1
51086: NEG
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 1
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: LD_INT 1
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: NEG
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 1
51135: NEG
51136: PUSH
51137: LD_INT 1
51139: NEG
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 2
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 2
51191: PUSH
51192: LD_INT 1
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 2
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 0
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: LD_INT 1
51257: NEG
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 2
51265: NEG
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51296: LD_ADDR_VAR 0 20
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: LD_INT 0
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: LD_INT 1
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: NEG
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 1
51369: NEG
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: LD_INT 2
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: LD_INT 2
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: PUSH
51422: LD_INT 1
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 2
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 1
51441: PUSH
51442: LD_INT 2
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 0
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: NEG
51462: PUSH
51463: LD_INT 1
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 2
51472: NEG
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51526: LD_ADDR_VAR 0 21
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: EMPTY
51569: LIST
51570: LIST
51571: PUSH
51572: LD_INT 0
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: NEG
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: NEG
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: LD_INT 2
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 2
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: PUSH
51649: LD_INT 2
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 2
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: PUSH
51672: LD_INT 2
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: LD_INT 2
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 2
51702: NEG
51703: PUSH
51704: LD_INT 0
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 2
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: LD_INT 2
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51756: LD_ADDR_VAR 0 22
51760: PUSH
51761: LD_INT 0
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 0
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: LD_INT 0
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: LD_INT 1
51797: PUSH
51798: EMPTY
51799: LIST
51800: LIST
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 1
51814: NEG
51815: PUSH
51816: LD_INT 0
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: LD_INT 2
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 2
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 2
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 0
51911: PUSH
51912: LD_INT 2
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: PUSH
51919: LD_INT 1
51921: NEG
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 2
51943: NEG
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: LD_INT 2
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51986: LD_ADDR_VAR 0 23
51990: PUSH
51991: LD_INT 0
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 2
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: PUSH
52091: LD_INT 1
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 0
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 1
52131: PUSH
52132: LD_INT 2
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 1
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 2
52162: NEG
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: LD_INT 2
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: LD_INT 3
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: NEG
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 1
52221: PUSH
52222: LD_INT 2
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 1
52235: NEG
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52266: LD_ADDR_VAR 0 24
52270: PUSH
52271: LD_INT 0
52273: PUSH
52274: LD_INT 0
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 1
52304: PUSH
52305: LD_INT 1
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 1
52324: NEG
52325: PUSH
52326: LD_INT 0
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 1
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: NEG
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 1
52370: PUSH
52371: LD_INT 1
52373: NEG
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 2
52381: PUSH
52382: LD_INT 0
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 1
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 2
52401: PUSH
52402: LD_INT 2
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 1
52411: PUSH
52412: LD_INT 2
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 0
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 1
52431: NEG
52432: PUSH
52433: LD_INT 1
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: LD_INT 0
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 2
52453: NEG
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: NEG
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 1
52491: NEG
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 3
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 3
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52542: LD_ADDR_VAR 0 25
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: LD_INT 0
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 0
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: LD_INT 1
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 1
52600: NEG
52601: PUSH
52602: LD_INT 0
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 1
52615: NEG
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 1
52623: NEG
52624: PUSH
52625: LD_INT 2
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: LD_INT 1
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: LD_INT 2
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 0
52697: PUSH
52698: LD_INT 2
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: LD_INT 1
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 2
52718: NEG
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 2
52741: NEG
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 3
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 3
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 2
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52816: LD_ADDR_VAR 0 26
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: LD_INT 0
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 1
52897: NEG
52898: PUSH
52899: LD_INT 2
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: LD_INT 2
52912: NEG
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 1
52961: PUSH
52962: LD_INT 2
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: LD_INT 2
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 2
53015: NEG
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 2
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53092: LD_ADDR_VAR 0 27
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 2
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: LD_INT 1
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 2
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 1
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: LD_INT 2
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 1
53257: NEG
53258: PUSH
53259: LD_INT 1
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 2
53268: NEG
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 2
53291: NEG
53292: PUSH
53293: LD_INT 2
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: NEG
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 3
53337: NEG
53338: PUSH
53339: LD_INT 2
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53372: LD_ADDR_VAR 0 28
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 0
53389: PUSH
53390: LD_INT 1
53392: NEG
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 1
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 0
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: LD_INT 1
53453: NEG
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 2
53468: NEG
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: LD_INT 1
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: LD_INT 1
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 2
53507: PUSH
53508: LD_INT 2
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: LD_INT 2
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 2
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: NEG
53572: PUSH
53573: LD_INT 2
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: LD_INT 3
53587: NEG
53588: PUSH
53589: EMPTY
53590: LIST
53591: LIST
53592: PUSH
53593: LD_INT 1
53595: NEG
53596: PUSH
53597: LD_INT 3
53599: NEG
53600: PUSH
53601: EMPTY
53602: LIST
53603: LIST
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: LD_INT 1
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: LD_INT 2
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53654: LD_ADDR_VAR 0 29
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: LD_INT 0
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 0
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 1
53682: PUSH
53683: LD_INT 0
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 1
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 0
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 1
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 0
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 1
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 2
53769: PUSH
53770: LD_INT 0
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 2
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 1
53789: PUSH
53790: LD_INT 2
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: LD_INT 2
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: PUSH
53807: LD_INT 1
53809: NEG
53810: PUSH
53811: LD_INT 1
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: NEG
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: PUSH
53878: LD_INT 3
53880: PUSH
53881: EMPTY
53882: LIST
53883: LIST
53884: PUSH
53885: LD_INT 1
53887: NEG
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 3
53898: NEG
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: LIST
53932: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53933: LD_ADDR_VAR 0 30
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 0
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 0
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: LD_INT 0
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: LD_INT 2
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: LD_INT 2
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 2
54048: PUSH
54049: LD_INT 0
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 2
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 2
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: LD_INT 2
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 2
54099: NEG
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 2
54110: NEG
54111: PUSH
54112: LD_INT 1
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 3
54126: NEG
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 2
54137: NEG
54138: PUSH
54139: EMPTY
54140: LIST
54141: LIST
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 2
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 2
54155: PUSH
54156: LD_INT 3
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 3
54176: NEG
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54211: LD_ADDR_VAR 0 31
54215: PUSH
54216: LD_INT 0
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 0
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 1
54239: PUSH
54240: LD_INT 0
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: LD_INT 1
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: LD_INT 2
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 2
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: PUSH
54326: LD_INT 1
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_INT 2
54335: PUSH
54336: LD_INT 2
54338: PUSH
54339: EMPTY
54340: LIST
54341: LIST
54342: PUSH
54343: LD_INT 1
54345: PUSH
54346: LD_INT 2
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: LD_INT 2
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 2
54376: NEG
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 3
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54489: LD_ADDR_VAR 0 32
54493: PUSH
54494: LD_INT 0
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: EMPTY
54501: LIST
54502: LIST
54503: PUSH
54504: LD_INT 0
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 1
54517: PUSH
54518: LD_INT 0
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 1
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 0
54537: PUSH
54538: LD_INT 1
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: LD_INT 0
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: NEG
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 2
54585: NEG
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 1
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: LD_INT 1
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 2
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: NEG
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: LD_INT 2
54693: NEG
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: LD_INT 2
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: LD_INT 3
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 3
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54767: LD_ADDR_VAR 0 33
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: LD_INT 0
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 1
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 1
54836: NEG
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 2
54881: PUSH
54882: LD_INT 1
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: PUSH
54892: LD_INT 2
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 0
54901: PUSH
54902: LD_INT 2
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 0
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 2
54933: NEG
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: LD_INT 2
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55046: LD_ADDR_VAR 0 34
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: LD_INT 0
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 1
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 0
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: PUSH
55085: LD_INT 1
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 1
55104: NEG
55105: PUSH
55106: LD_INT 0
55108: PUSH
55109: EMPTY
55110: LIST
55111: LIST
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 2
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: LD_INT 2
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 1
55191: NEG
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 2
55202: NEG
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 1
55217: NEG
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 2
55225: NEG
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: EMPTY
55232: LIST
55233: LIST
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 3
55260: PUSH
55261: LD_INT 2
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: NEG
55281: PUSH
55282: LD_INT 1
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: PUSH
55289: LD_INT 3
55291: NEG
55292: PUSH
55293: LD_INT 1
55295: NEG
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: EMPTY
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55326: LD_ADDR_VAR 0 35
55330: PUSH
55331: LD_INT 0
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: LD_INT 1
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 1
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 1
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 1
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: NEG
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 1
55395: NEG
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 1
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 2
55417: NEG
55418: PUSH
55419: LD_INT 1
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55438: LD_ADDR_VAR 0 36
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: LD_INT 1
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 1
55496: NEG
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 2
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: LD_INT 2
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55550: LD_ADDR_VAR 0 37
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 0
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 1
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: LD_INT 1
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55662: LD_ADDR_VAR 0 38
55666: PUSH
55667: LD_INT 0
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 1
55720: NEG
55721: PUSH
55722: LD_INT 0
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: EMPTY
55738: LIST
55739: LIST
55740: PUSH
55741: LD_INT 2
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 2
55753: NEG
55754: PUSH
55755: LD_INT 1
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55774: LD_ADDR_VAR 0 39
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 0
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 0
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 0
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: LD_INT 0
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 1
55855: NEG
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55886: LD_ADDR_VAR 0 40
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 0
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 1
55944: NEG
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: LD_INT 1
55959: NEG
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: LD_INT 1
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55998: LD_ADDR_VAR 0 41
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: NEG
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: NEG
56177: PUSH
56178: LD_INT 2
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: NEG
56189: PUSH
56190: LD_INT 3
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: LD_INT 3
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 2
56251: PUSH
56252: LD_INT 3
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 3
56283: NEG
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 3
56295: NEG
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56348: LD_ADDR_VAR 0 42
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 1
56417: NEG
56418: PUSH
56419: LD_INT 1
56421: NEG
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 1
56429: NEG
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 1
56483: PUSH
56484: LD_INT 2
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: LD_INT 2
56514: NEG
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 2
56526: NEG
56527: PUSH
56528: LD_INT 2
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 2
56538: NEG
56539: PUSH
56540: LD_INT 3
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 2
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 3
56594: PUSH
56595: LD_INT 3
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 2
56604: PUSH
56605: LD_INT 3
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 1
56634: NEG
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 3
56645: NEG
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56698: LD_ADDR_VAR 0 43
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 0
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 1
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 2
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: PUSH
56821: LD_INT 2
56823: PUSH
56824: LD_INT 1
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: LD_INT 2
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 2
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 1
56853: NEG
56854: PUSH
56855: LD_INT 1
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 2
56875: NEG
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 3
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 0
56899: PUSH
56900: LD_INT 3
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 1
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: PUSH
56953: LD_INT 3
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 0
56962: PUSH
56963: LD_INT 3
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 2
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 3
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 3
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57046: LD_ADDR_VAR 0 44
57050: PUSH
57051: LD_INT 0
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: LD_INT 0
57077: PUSH
57078: EMPTY
57079: LIST
57080: LIST
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: LD_INT 1
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: LD_INT 1
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: NEG
57105: PUSH
57106: LD_INT 0
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: NEG
57128: PUSH
57129: LD_INT 2
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 1
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 2
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 2
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 2
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 1
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: LD_INT 0
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 2
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 2
57248: PUSH
57249: LD_INT 1
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 3
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 3
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 3
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 2
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 2
57309: NEG
57310: PUSH
57311: LD_INT 1
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: LD_INT 0
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 3
57355: NEG
57356: PUSH
57357: LD_INT 3
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57396: LD_ADDR_VAR 0 45
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: LD_INT 0
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 0
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 0
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 2
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 1
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: PUSH
57512: LD_INT 1
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: LD_INT 2
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 2
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: LD_INT 3
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 3
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 2
57624: NEG
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: LD_INT 2
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: LD_INT 2
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: NEG
57706: PUSH
57707: LD_INT 3
57709: NEG
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: LIST
57740: LIST
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57746: LD_ADDR_VAR 0 46
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 1
57766: NEG
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 1
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 1
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 0
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: NEG
57816: PUSH
57817: LD_INT 1
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 2
57831: NEG
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 0
57839: PUSH
57840: LD_INT 2
57842: NEG
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: LD_INT 1
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: LD_INT 2
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 1
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 2
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 3
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 3
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 1
57958: PUSH
57959: LD_INT 2
57961: NEG
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 2
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 3
57980: PUSH
57981: LD_INT 0
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 1
58020: NEG
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 2
58031: NEG
58032: PUSH
58033: LD_INT 1
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 3
58042: NEG
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 3
58053: NEG
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: LIST
58093: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58094: LD_ADDR_VAR 0 47
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: LD_INT 0
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: LD_INT 0
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 2
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 2
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 1
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58245: LD_ADDR_VAR 0 48
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 1
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: LD_INT 1
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: NEG
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: LD_INT 2
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 1
58349: PUSH
58350: LD_INT 1
58352: NEG
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: PUSH
58358: LD_INT 2
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 2
58370: PUSH
58371: LD_INT 1
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58392: LD_ADDR_VAR 0 49
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 0
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 0
58409: PUSH
58410: LD_INT 1
58412: NEG
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 0
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 1
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 0
58440: PUSH
58441: LD_INT 1
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 1
58450: NEG
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: LD_INT 1
58465: NEG
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: LD_INT 1
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: PUSH
58485: LD_INT 0
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 2
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 2
58504: PUSH
58505: LD_INT 2
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 1
58514: PUSH
58515: LD_INT 2
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58536: LD_ADDR_VAR 0 50
58540: PUSH
58541: LD_INT 0
58543: PUSH
58544: LD_INT 0
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 1
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 1
58574: PUSH
58575: LD_INT 1
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 1
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 1
58605: NEG
58606: PUSH
58607: LD_INT 1
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: LD_INT 2
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 1
58637: PUSH
58638: LD_INT 2
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 2
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: NEG
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58680: LD_ADDR_VAR 0 51
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: LD_INT 1
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 1
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: NEG
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 1
58761: PUSH
58762: LD_INT 2
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: LD_INT 1
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 2
58792: NEG
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: LD_INT 2
58803: NEG
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58827: LD_ADDR_VAR 0 52
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 0
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 0
58844: PUSH
58845: LD_INT 1
58847: NEG
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: LD_INT 0
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: PUSH
58863: LD_INT 1
58865: PUSH
58866: LD_INT 1
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 0
58875: PUSH
58876: LD_INT 1
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: NEG
58886: PUSH
58887: LD_INT 0
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: LD_INT 2
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 2
58931: NEG
58932: PUSH
58933: LD_INT 0
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 2
58942: NEG
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 2
58954: NEG
58955: PUSH
58956: LD_INT 2
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58978: LD_ADDR_VAR 0 53
58982: PUSH
58983: LD_INT 0
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 0
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: LD_INT 0
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: LD_INT 1
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 1
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 1
59051: NEG
59052: PUSH
59053: EMPTY
59054: LIST
59055: LIST
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: LD_INT 2
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 0
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 2
59165: NEG
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: NEG
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: LIST
59191: LIST
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: LIST
59206: LIST
59207: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59208: LD_ADDR_VAR 0 54
59212: PUSH
59213: LD_INT 0
59215: PUSH
59216: LD_INT 0
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 0
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: LD_INT 1
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 0
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 0
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 1
59281: NEG
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 1
59289: NEG
59290: PUSH
59291: LD_INT 2
59293: NEG
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 0
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 1
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: LD_INT 1
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: PUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 2
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: LD_INT 2
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 0
59363: PUSH
59364: LD_INT 2
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 1
59373: NEG
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: NEG
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 2
59395: NEG
59396: PUSH
59397: LD_INT 1
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: NEG
59408: PUSH
59409: LD_INT 2
59411: NEG
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59438: LD_ADDR_VAR 0 55
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 1
59458: NEG
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 0
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 0
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 0
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: NEG
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: LD_INT 2
59534: NEG
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: PUSH
59540: LD_INT 1
59542: PUSH
59543: LD_INT 1
59545: NEG
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 2
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 2
59563: PUSH
59564: LD_INT 1
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 2
59573: PUSH
59574: LD_INT 2
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 0
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: PUSH
59635: LD_INT 2
59637: NEG
59638: PUSH
59639: LD_INT 2
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: LIST
59658: LIST
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59668: LD_ADDR_VAR 0 56
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 1
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 1
59726: NEG
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 1
59737: NEG
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: LD_INT 2
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 0
59761: PUSH
59762: LD_INT 2
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: LD_INT 1
59775: NEG
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 2
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 2
59803: PUSH
59804: LD_INT 2
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: LD_INT 2
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 0
59823: PUSH
59824: LD_INT 2
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 1
59833: NEG
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 2
59844: NEG
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 2
59855: NEG
59856: PUSH
59857: LD_INT 1
59859: NEG
59860: PUSH
59861: EMPTY
59862: LIST
59863: LIST
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: LD_INT 2
59871: NEG
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59898: LD_ADDR_VAR 0 57
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 0
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: PUSH
59927: LD_INT 0
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 0
59946: PUSH
59947: LD_INT 1
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PUSH
59954: LD_INT 1
59956: NEG
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: LD_INT 1
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 1
59979: NEG
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 2
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 2
60013: PUSH
60014: LD_INT 0
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 2
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: LD_INT 2
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 0
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 1
60063: NEG
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 0
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: LD_INT 1
60089: NEG
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: NEG
60098: PUSH
60099: LD_INT 2
60101: NEG
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60128: LD_ADDR_VAR 0 58
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: LD_INT 0
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 0
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 0
60176: PUSH
60177: LD_INT 1
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 1
60186: NEG
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: LD_INT 2
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 0
60221: PUSH
60222: LD_INT 2
60224: NEG
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 1
60235: NEG
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 0
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: LD_INT 1
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: PUSH
60264: LD_INT 2
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: LD_INT 1
60273: PUSH
60274: LD_INT 2
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 0
60283: PUSH
60284: LD_INT 2
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 1
60293: NEG
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: NEG
60305: PUSH
60306: LD_INT 0
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 2
60315: NEG
60316: PUSH
60317: LD_INT 1
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: LD_INT 2
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: LIST
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60358: LD_ADDR_VAR 0 59
60362: PUSH
60363: LD_INT 0
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 0
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: PUSH
60387: LD_INT 0
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: LD_INT 1
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 0
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 1
60416: NEG
60417: PUSH
60418: LD_INT 0
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60446: LD_ADDR_VAR 0 60
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 0
60463: PUSH
60464: LD_INT 1
60466: NEG
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 1
60484: PUSH
60485: LD_INT 1
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: LD_INT 1
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 1
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60534: LD_ADDR_VAR 0 61
60538: PUSH
60539: LD_INT 0
60541: PUSH
60542: LD_INT 0
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: LD_INT 1
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 1
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: PUSH
60573: LD_INT 1
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: EMPTY
60587: LIST
60588: LIST
60589: PUSH
60590: LD_INT 1
60592: NEG
60593: PUSH
60594: LD_INT 0
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60622: LD_ADDR_VAR 0 62
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: LD_INT 0
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: LD_INT 1
60642: NEG
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 1
60650: PUSH
60651: LD_INT 0
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: LD_INT 1
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 0
60670: PUSH
60671: LD_INT 1
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 1
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: LIST
60705: LIST
60706: LIST
60707: LIST
60708: LIST
60709: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60710: LD_ADDR_VAR 0 63
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 0
60727: PUSH
60728: LD_INT 1
60730: NEG
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 1
60748: PUSH
60749: LD_INT 1
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 0
60758: PUSH
60759: LD_INT 1
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 0
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60798: LD_ADDR_VAR 0 64
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: ST_TO_ADDR
// end ; 1 :
60886: GO 66783
60888: LD_INT 1
60890: DOUBLE
60891: EQUAL
60892: IFTRUE 60896
60894: GO 63519
60896: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60897: LD_ADDR_VAR 0 11
60901: PUSH
60902: LD_INT 1
60904: NEG
60905: PUSH
60906: LD_INT 3
60908: NEG
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 2
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60941: LD_ADDR_VAR 0 12
60945: PUSH
60946: LD_INT 2
60948: PUSH
60949: LD_INT 1
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 3
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: LD_INT 1
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: LIST
60981: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60982: LD_ADDR_VAR 0 13
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 2
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: LD_INT 3
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61022: LD_ADDR_VAR 0 14
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 3
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: LD_INT 2
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: LIST
61062: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61063: LD_ADDR_VAR 0 15
61067: PUSH
61068: LD_INT 2
61070: NEG
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 3
61081: NEG
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 3
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61107: LD_ADDR_VAR 0 16
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 3
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 3
61126: NEG
61127: PUSH
61128: LD_INT 2
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 3
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: LIST
61152: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61153: LD_ADDR_VAR 0 17
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 0
61172: PUSH
61173: LD_INT 3
61175: NEG
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 1
61183: PUSH
61184: LD_INT 2
61186: NEG
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61197: LD_ADDR_VAR 0 18
61201: PUSH
61202: LD_INT 2
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: PUSH
61216: LD_INT 0
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61238: LD_ADDR_VAR 0 19
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: LD_INT 3
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: LIST
61277: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61278: LD_ADDR_VAR 0 20
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 3
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: LD_INT 2
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: LIST
61318: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61319: LD_ADDR_VAR 0 21
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 3
61337: NEG
61338: PUSH
61339: LD_INT 0
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: LD_INT 1
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61363: LD_ADDR_VAR 0 22
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: LD_INT 3
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 3
61382: NEG
61383: PUSH
61384: LD_INT 2
61386: NEG
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: NEG
61395: PUSH
61396: LD_INT 3
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61409: LD_ADDR_VAR 0 23
61413: PUSH
61414: LD_INT 0
61416: PUSH
61417: LD_INT 3
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 1
61427: NEG
61428: PUSH
61429: LD_INT 4
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: PUSH
61440: LD_INT 3
61442: NEG
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61453: LD_ADDR_VAR 0 24
61457: PUSH
61458: LD_INT 3
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: PUSH
61471: LD_INT 1
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 4
61481: PUSH
61482: LD_INT 1
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: LIST
61493: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61494: LD_ADDR_VAR 0 25
61498: PUSH
61499: LD_INT 3
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 4
61511: PUSH
61512: LD_INT 3
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 3
61521: PUSH
61522: LD_INT 4
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: EMPTY
61530: LIST
61531: LIST
61532: LIST
61533: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61534: LD_ADDR_VAR 0 26
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: LD_INT 4
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 1
61561: NEG
61562: PUSH
61563: LD_INT 3
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61575: LD_ADDR_VAR 0 27
61579: PUSH
61580: LD_INT 3
61582: NEG
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: LIST
61618: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61619: LD_ADDR_VAR 0 28
61623: PUSH
61624: LD_INT 3
61626: NEG
61627: PUSH
61628: LD_INT 3
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 3
61638: NEG
61639: PUSH
61640: LD_INT 4
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 4
61650: NEG
61651: PUSH
61652: LD_INT 3
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: LIST
61664: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61665: LD_ADDR_VAR 0 29
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 3
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 2
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 1
61706: NEG
61707: PUSH
61708: LD_INT 4
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 0
61718: PUSH
61719: LD_INT 4
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 3
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 1
61740: NEG
61741: PUSH
61742: LD_INT 5
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 5
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 4
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 1
61774: NEG
61775: PUSH
61776: LD_INT 6
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 0
61786: PUSH
61787: LD_INT 6
61789: NEG
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 1
61797: PUSH
61798: LD_INT 5
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61820: LD_ADDR_VAR 0 30
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 1
61830: NEG
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 3
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: EMPTY
61853: LIST
61854: LIST
61855: PUSH
61856: LD_INT 3
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 4
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 4
61879: PUSH
61880: LD_INT 1
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 4
61889: PUSH
61890: LD_INT 1
61892: NEG
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 5
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: LD_INT 5
61910: PUSH
61911: LD_INT 1
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: PUSH
61918: LD_INT 5
61920: PUSH
61921: LD_INT 1
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 6
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 6
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: LIST
61957: LIST
61958: LIST
61959: LIST
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61963: LD_ADDR_VAR 0 31
61967: PUSH
61968: LD_INT 3
61970: PUSH
61971: LD_INT 2
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: LD_INT 3
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: LD_INT 3
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: LD_INT 4
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: LD_INT 4
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 4
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 5
62030: PUSH
62031: LD_INT 4
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 5
62040: PUSH
62041: LD_INT 5
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 6
62060: PUSH
62061: LD_INT 5
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 6
62070: PUSH
62071: LD_INT 6
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 5
62080: PUSH
62081: LD_INT 6
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62102: LD_ADDR_VAR 0 32
62106: PUSH
62107: LD_INT 1
62109: PUSH
62110: LD_INT 3
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 0
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 1
62129: NEG
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: PUSH
62141: LD_INT 4
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 4
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 1
62160: NEG
62161: PUSH
62162: LD_INT 3
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: PUSH
62172: LD_INT 5
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 5
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 1
62191: NEG
62192: PUSH
62193: LD_INT 4
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 6
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 6
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 1
62222: NEG
62223: PUSH
62224: LD_INT 5
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62245: LD_ADDR_VAR 0 33
62249: PUSH
62250: LD_INT 2
62252: NEG
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: NEG
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 3
62274: NEG
62275: PUSH
62276: LD_INT 1
62278: NEG
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 3
62286: NEG
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 4
62297: NEG
62298: PUSH
62299: LD_INT 0
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 4
62308: NEG
62309: PUSH
62310: LD_INT 1
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 5
62331: NEG
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PUSH
62340: LD_INT 5
62342: NEG
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 5
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 6
62365: NEG
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 6
62376: NEG
62377: PUSH
62378: LD_INT 1
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62400: LD_ADDR_VAR 0 34
62404: PUSH
62405: LD_INT 2
62407: NEG
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 3
62419: NEG
62420: PUSH
62421: LD_INT 2
62423: NEG
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: NEG
62432: PUSH
62433: LD_INT 3
62435: NEG
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: LD_INT 4
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 4
62455: NEG
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 4
62467: NEG
62468: PUSH
62469: LD_INT 4
62471: NEG
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 4
62479: NEG
62480: PUSH
62481: LD_INT 5
62483: NEG
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 5
62491: NEG
62492: PUSH
62493: LD_INT 4
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 5
62503: NEG
62504: PUSH
62505: LD_INT 5
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 5
62515: NEG
62516: PUSH
62517: LD_INT 6
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 6
62527: NEG
62528: PUSH
62529: LD_INT 5
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 6
62539: NEG
62540: PUSH
62541: LD_INT 6
62543: NEG
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: LIST
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: LIST
62561: LIST
62562: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62563: LD_ADDR_VAR 0 41
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: PUSH
62594: LD_INT 2
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62607: LD_ADDR_VAR 0 42
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 2
62624: PUSH
62625: LD_INT 1
62627: NEG
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 3
62635: PUSH
62636: LD_INT 1
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: LIST
62647: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62648: LD_ADDR_VAR 0 43
62652: PUSH
62653: LD_INT 2
62655: PUSH
62656: LD_INT 2
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 3
62665: PUSH
62666: LD_INT 2
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 2
62675: PUSH
62676: LD_INT 3
62678: PUSH
62679: EMPTY
62680: LIST
62681: LIST
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: LIST
62687: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62688: LD_ADDR_VAR 0 44
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: LD_INT 2
62698: PUSH
62699: EMPTY
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 1
62705: PUSH
62706: LD_INT 3
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 1
62715: NEG
62716: PUSH
62717: LD_INT 2
62719: PUSH
62720: EMPTY
62721: LIST
62722: LIST
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62729: LD_ADDR_VAR 0 45
62733: PUSH
62734: LD_INT 2
62736: NEG
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 1
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: LIST
62772: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62773: LD_ADDR_VAR 0 46
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 2
62792: NEG
62793: PUSH
62794: LD_INT 3
62796: NEG
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: LD_INT 2
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: LIST
62818: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62819: LD_ADDR_VAR 0 47
62823: PUSH
62824: LD_INT 2
62826: NEG
62827: PUSH
62828: LD_INT 3
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: NEG
62839: PUSH
62840: LD_INT 3
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62852: LD_ADDR_VAR 0 48
62856: PUSH
62857: LD_INT 1
62859: PUSH
62860: LD_INT 2
62862: NEG
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: LD_INT 1
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: EMPTY
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62883: LD_ADDR_VAR 0 49
62887: PUSH
62888: LD_INT 3
62890: PUSH
62891: LD_INT 1
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 3
62900: PUSH
62901: LD_INT 2
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: EMPTY
62909: LIST
62910: LIST
62911: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62912: LD_ADDR_VAR 0 50
62916: PUSH
62917: LD_INT 2
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: PUSH
62927: LD_INT 1
62929: PUSH
62930: LD_INT 3
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62941: LD_ADDR_VAR 0 51
62945: PUSH
62946: LD_INT 1
62948: NEG
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 2
62959: NEG
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62972: LD_ADDR_VAR 0 52
62976: PUSH
62977: LD_INT 3
62979: NEG
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: NEG
62992: PUSH
62993: LD_INT 2
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63005: LD_ADDR_VAR 0 53
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 3
63016: NEG
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 0
63024: PUSH
63025: LD_INT 3
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: PUSH
63036: LD_INT 2
63038: NEG
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: LIST
63048: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63049: LD_ADDR_VAR 0 54
63053: PUSH
63054: LD_INT 2
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 3
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 3
63077: PUSH
63078: LD_INT 1
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: LIST
63089: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63090: LD_ADDR_VAR 0 55
63094: PUSH
63095: LD_INT 3
63097: PUSH
63098: LD_INT 2
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 3
63107: PUSH
63108: LD_INT 3
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 2
63117: PUSH
63118: LD_INT 3
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: LIST
63129: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63130: LD_ADDR_VAR 0 56
63134: PUSH
63135: LD_INT 1
63137: PUSH
63138: LD_INT 3
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: NEG
63158: PUSH
63159: LD_INT 2
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: LIST
63170: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63171: LD_ADDR_VAR 0 57
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: LD_INT 1
63182: PUSH
63183: EMPTY
63184: LIST
63185: LIST
63186: PUSH
63187: LD_INT 3
63189: NEG
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 3
63200: NEG
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63215: LD_ADDR_VAR 0 58
63219: PUSH
63220: LD_INT 2
63222: NEG
63223: PUSH
63224: LD_INT 3
63226: NEG
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 3
63234: NEG
63235: PUSH
63236: LD_INT 2
63238: NEG
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 3
63246: NEG
63247: PUSH
63248: LD_INT 3
63250: NEG
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: LIST
63260: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63261: LD_ADDR_VAR 0 59
63265: PUSH
63266: LD_INT 1
63268: NEG
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 0
63280: PUSH
63281: LD_INT 2
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 1
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63305: LD_ADDR_VAR 0 60
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: LD_INT 1
63315: NEG
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: PUSH
63321: LD_INT 2
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: LD_INT 1
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: LIST
63345: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63346: LD_ADDR_VAR 0 61
63350: PUSH
63351: LD_INT 2
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: PUSH
63361: LD_INT 2
63363: PUSH
63364: LD_INT 2
63366: PUSH
63367: EMPTY
63368: LIST
63369: LIST
63370: PUSH
63371: LD_INT 1
63373: PUSH
63374: LD_INT 2
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63386: LD_ADDR_VAR 0 62
63390: PUSH
63391: LD_INT 1
63393: PUSH
63394: LD_INT 2
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: LD_INT 2
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: NEG
63414: PUSH
63415: LD_INT 1
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: LIST
63426: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63427: LD_ADDR_VAR 0 63
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: LD_INT 2
63445: NEG
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 2
63456: NEG
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63471: LD_ADDR_VAR 0 64
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: NEG
63491: PUSH
63492: LD_INT 1
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 2
63502: NEG
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: LIST
63516: ST_TO_ADDR
// end ; 2 :
63517: GO 66783
63519: LD_INT 2
63521: DOUBLE
63522: EQUAL
63523: IFTRUE 63527
63525: GO 66782
63527: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63528: LD_ADDR_VAR 0 29
63532: PUSH
63533: LD_INT 4
63535: PUSH
63536: LD_INT 0
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: LD_INT 1
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 5
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 5
63566: PUSH
63567: LD_INT 1
63569: PUSH
63570: EMPTY
63571: LIST
63572: LIST
63573: PUSH
63574: LD_INT 4
63576: PUSH
63577: LD_INT 1
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: LD_INT 3
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 3
63596: PUSH
63597: LD_INT 1
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 3
63607: PUSH
63608: LD_INT 2
63610: NEG
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 5
63618: PUSH
63619: LD_INT 2
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 3
63628: PUSH
63629: LD_INT 3
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 3
63638: PUSH
63639: LD_INT 2
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 4
63648: PUSH
63649: LD_INT 3
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 4
63658: PUSH
63659: LD_INT 4
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 3
63668: PUSH
63669: LD_INT 4
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 2
63678: PUSH
63679: LD_INT 3
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 2
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: LD_INT 2
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 4
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 4
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 3
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: PUSH
63739: LD_INT 4
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 5
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 5
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 4
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: NEG
63780: PUSH
63781: LD_INT 3
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 5
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 2
63800: NEG
63801: PUSH
63802: LD_INT 3
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: LD_INT 1
63826: NEG
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: NEG
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 2
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 3
63856: NEG
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 4
63867: NEG
63868: PUSH
63869: LD_INT 0
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: EMPTY
63885: LIST
63886: LIST
63887: PUSH
63888: LD_INT 4
63890: NEG
63891: PUSH
63892: LD_INT 2
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: NEG
63903: PUSH
63904: LD_INT 2
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 4
63913: NEG
63914: PUSH
63915: LD_INT 4
63917: NEG
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 4
63925: NEG
63926: PUSH
63927: LD_INT 5
63929: NEG
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: LD_INT 3
63937: NEG
63938: PUSH
63939: LD_INT 4
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 3
63949: NEG
63950: PUSH
63951: LD_INT 3
63953: NEG
63954: PUSH
63955: EMPTY
63956: LIST
63957: LIST
63958: PUSH
63959: LD_INT 4
63961: NEG
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 5
63973: NEG
63974: PUSH
63975: LD_INT 4
63977: NEG
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 5
63985: NEG
63986: PUSH
63987: LD_INT 5
63989: NEG
63990: PUSH
63991: EMPTY
63992: LIST
63993: LIST
63994: PUSH
63995: LD_INT 3
63997: NEG
63998: PUSH
63999: LD_INT 5
64001: NEG
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 5
64009: NEG
64010: PUSH
64011: LD_INT 3
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64066: LD_ADDR_VAR 0 30
64070: PUSH
64071: LD_INT 4
64073: PUSH
64074: LD_INT 4
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PUSH
64081: LD_INT 4
64083: PUSH
64084: LD_INT 3
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 5
64093: PUSH
64094: LD_INT 4
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: LD_INT 5
64103: PUSH
64104: LD_INT 5
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 4
64113: PUSH
64114: LD_INT 5
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 3
64123: PUSH
64124: LD_INT 4
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 3
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 5
64143: PUSH
64144: LD_INT 3
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 3
64153: PUSH
64154: LD_INT 5
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 3
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 3
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 4
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 4
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 3
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 2
64228: PUSH
64229: EMPTY
64230: LIST
64231: LIST
64232: PUSH
64233: LD_INT 2
64235: PUSH
64236: LD_INT 4
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 2
64245: NEG
64246: PUSH
64247: LD_INT 2
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: LD_INT 4
64256: NEG
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: LD_INT 4
64267: NEG
64268: PUSH
64269: LD_INT 1
64271: NEG
64272: PUSH
64273: EMPTY
64274: LIST
64275: LIST
64276: PUSH
64277: LD_INT 3
64279: NEG
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 3
64290: NEG
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 4
64301: NEG
64302: PUSH
64303: LD_INT 1
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 5
64312: NEG
64313: PUSH
64314: LD_INT 0
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 5
64323: NEG
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 5
64335: NEG
64336: PUSH
64337: LD_INT 2
64339: NEG
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 3
64347: NEG
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: NEG
64359: PUSH
64360: LD_INT 3
64362: NEG
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: NEG
64371: PUSH
64372: LD_INT 4
64374: NEG
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 2
64382: NEG
64383: PUSH
64384: LD_INT 3
64386: NEG
64387: PUSH
64388: EMPTY
64389: LIST
64390: LIST
64391: PUSH
64392: LD_INT 2
64394: NEG
64395: PUSH
64396: LD_INT 2
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 3
64406: NEG
64407: PUSH
64408: LD_INT 2
64410: NEG
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: PUSH
64416: LD_INT 4
64418: NEG
64419: PUSH
64420: LD_INT 3
64422: NEG
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: LD_INT 4
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: LD_INT 4
64446: NEG
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 4
64454: NEG
64455: PUSH
64456: LD_INT 2
64458: NEG
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: LD_INT 0
64466: PUSH
64467: LD_INT 4
64469: NEG
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: LD_INT 5
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 1
64488: PUSH
64489: LD_INT 4
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 3
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 3
64513: NEG
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 1
64521: NEG
64522: PUSH
64523: LD_INT 4
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: NEG
64534: PUSH
64535: LD_INT 5
64537: NEG
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 2
64545: PUSH
64546: LD_INT 3
64548: NEG
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 2
64556: NEG
64557: PUSH
64558: LD_INT 5
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64613: LD_ADDR_VAR 0 31
64617: PUSH
64618: LD_INT 0
64620: PUSH
64621: LD_INT 4
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 3
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 1
64640: PUSH
64641: LD_INT 4
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: LD_INT 5
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 5
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 1
64670: NEG
64671: PUSH
64672: LD_INT 4
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: LD_INT 3
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: LD_INT 5
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 2
64702: NEG
64703: PUSH
64704: LD_INT 3
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 3
64713: NEG
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: NEG
64725: PUSH
64726: LD_INT 1
64728: NEG
64729: PUSH
64730: EMPTY
64731: LIST
64732: LIST
64733: PUSH
64734: LD_INT 2
64736: NEG
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 2
64747: NEG
64748: PUSH
64749: LD_INT 1
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 3
64758: NEG
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 4
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 4
64792: NEG
64793: PUSH
64794: LD_INT 2
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 2
64804: NEG
64805: PUSH
64806: LD_INT 2
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 4
64815: NEG
64816: PUSH
64817: LD_INT 4
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 4
64827: NEG
64828: PUSH
64829: LD_INT 5
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: LD_INT 4
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 3
64851: NEG
64852: PUSH
64853: LD_INT 3
64855: NEG
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 4
64863: NEG
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 5
64875: NEG
64876: PUSH
64877: LD_INT 4
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 5
64887: NEG
64888: PUSH
64889: LD_INT 5
64891: NEG
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: LD_INT 5
64903: NEG
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 5
64911: NEG
64912: PUSH
64913: LD_INT 3
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 0
64934: PUSH
64935: LD_INT 4
64937: NEG
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 1
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 2
64970: NEG
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: LD_INT 3
64982: NEG
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 1
64990: NEG
64991: PUSH
64992: LD_INT 4
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 2
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: NEG
65014: PUSH
65015: LD_INT 4
65017: NEG
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 4
65025: PUSH
65026: LD_INT 0
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 4
65035: PUSH
65036: LD_INT 1
65038: NEG
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 5
65046: PUSH
65047: LD_INT 0
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: LD_INT 1
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 4
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 3
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 3
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: PUSH
65098: LD_INT 2
65100: NEG
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: PUSH
65106: LD_INT 5
65108: PUSH
65109: LD_INT 2
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65163: LD_ADDR_VAR 0 32
65167: PUSH
65168: LD_INT 4
65170: NEG
65171: PUSH
65172: LD_INT 0
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 4
65181: NEG
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 4
65215: NEG
65216: PUSH
65217: LD_INT 1
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 5
65226: NEG
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: EMPTY
65232: LIST
65233: LIST
65234: PUSH
65235: LD_INT 5
65237: NEG
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 5
65249: NEG
65250: PUSH
65251: LD_INT 2
65253: NEG
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 3
65272: NEG
65273: PUSH
65274: LD_INT 3
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: LD_INT 4
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: LD_INT 2
65296: NEG
65297: PUSH
65298: LD_INT 3
65300: NEG
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 2
65308: NEG
65309: PUSH
65310: LD_INT 2
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 3
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 4
65332: NEG
65333: PUSH
65334: LD_INT 3
65336: NEG
65337: PUSH
65338: EMPTY
65339: LIST
65340: LIST
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: LD_INT 4
65348: NEG
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: NEG
65357: PUSH
65358: LD_INT 4
65360: NEG
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 4
65368: NEG
65369: PUSH
65370: LD_INT 2
65372: NEG
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 0
65380: PUSH
65381: LD_INT 4
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 0
65391: PUSH
65392: LD_INT 5
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 4
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: PUSH
65414: LD_INT 3
65416: NEG
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: LD_INT 4
65439: NEG
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: NEG
65448: PUSH
65449: LD_INT 5
65451: NEG
65452: PUSH
65453: EMPTY
65454: LIST
65455: LIST
65456: PUSH
65457: LD_INT 2
65459: PUSH
65460: LD_INT 3
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: NEG
65471: PUSH
65472: LD_INT 5
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 4
65503: PUSH
65504: LD_INT 0
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 4
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 3
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 2
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 2
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 2
65554: PUSH
65555: LD_INT 2
65557: NEG
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 4
65565: PUSH
65566: LD_INT 2
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: PUSH
65576: LD_INT 4
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 4
65585: PUSH
65586: LD_INT 3
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 5
65595: PUSH
65596: LD_INT 4
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 5
65605: PUSH
65606: LD_INT 5
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: PUSH
65616: LD_INT 5
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 3
65625: PUSH
65626: LD_INT 4
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_INT 3
65635: PUSH
65636: LD_INT 3
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 5
65645: PUSH
65646: LD_INT 3
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 3
65655: PUSH
65656: LD_INT 5
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65710: LD_ADDR_VAR 0 33
65714: PUSH
65715: LD_INT 4
65717: NEG
65718: PUSH
65719: LD_INT 4
65721: NEG
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: PUSH
65727: LD_INT 4
65729: NEG
65730: PUSH
65731: LD_INT 5
65733: NEG
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: PUSH
65739: LD_INT 3
65741: NEG
65742: PUSH
65743: LD_INT 4
65745: NEG
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 3
65753: NEG
65754: PUSH
65755: LD_INT 3
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: LD_INT 3
65769: NEG
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 5
65777: NEG
65778: PUSH
65779: LD_INT 4
65781: NEG
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 5
65789: NEG
65790: PUSH
65791: LD_INT 5
65793: NEG
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 3
65801: NEG
65802: PUSH
65803: LD_INT 5
65805: NEG
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 5
65813: NEG
65814: PUSH
65815: LD_INT 3
65817: NEG
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: LD_INT 3
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: LD_INT 0
65836: PUSH
65837: LD_INT 4
65839: NEG
65840: PUSH
65841: EMPTY
65842: LIST
65843: LIST
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: LD_INT 3
65850: NEG
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: LD_INT 2
65861: NEG
65862: PUSH
65863: EMPTY
65864: LIST
65865: LIST
65866: PUSH
65867: LD_INT 0
65869: PUSH
65870: LD_INT 2
65872: NEG
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: PUSH
65878: LD_INT 1
65880: NEG
65881: PUSH
65882: LD_INT 3
65884: NEG
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 1
65892: NEG
65893: PUSH
65894: LD_INT 4
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 2
65904: PUSH
65905: LD_INT 2
65907: NEG
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 2
65915: NEG
65916: PUSH
65917: LD_INT 4
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 4
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 4
65937: PUSH
65938: LD_INT 1
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 5
65948: PUSH
65949: LD_INT 0
65951: PUSH
65952: EMPTY
65953: LIST
65954: LIST
65955: PUSH
65956: LD_INT 5
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 4
65968: PUSH
65969: LD_INT 1
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 3
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 3
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: LD_INT 2
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 5
66010: PUSH
66011: LD_INT 2
66013: PUSH
66014: EMPTY
66015: LIST
66016: LIST
66017: PUSH
66018: LD_INT 3
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 3
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: LD_INT 3
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 4
66050: PUSH
66051: LD_INT 4
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 3
66060: PUSH
66061: LD_INT 4
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 2
66070: PUSH
66071: LD_INT 3
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 2
66080: PUSH
66081: LD_INT 2
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 4
66090: PUSH
66091: LD_INT 2
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: LD_INT 4
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 0
66110: PUSH
66111: LD_INT 4
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 0
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 1
66130: PUSH
66131: LD_INT 4
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 5
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 5
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: LD_INT 4
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: NEG
66172: PUSH
66173: LD_INT 3
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: LD_INT 5
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: LD_INT 3
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: LIST
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: LIST
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: LIST
66245: LIST
66246: LIST
66247: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66248: LD_ADDR_VAR 0 34
66252: PUSH
66253: LD_INT 0
66255: PUSH
66256: LD_INT 4
66258: NEG
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 0
66266: PUSH
66267: LD_INT 5
66269: NEG
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 4
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 1
66288: PUSH
66289: LD_INT 3
66291: NEG
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 0
66299: PUSH
66300: LD_INT 3
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 1
66310: NEG
66311: PUSH
66312: LD_INT 4
66314: NEG
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: LD_INT 5
66326: NEG
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 2
66334: PUSH
66335: LD_INT 3
66337: NEG
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 2
66345: NEG
66346: PUSH
66347: LD_INT 5
66349: NEG
66350: PUSH
66351: EMPTY
66352: LIST
66353: LIST
66354: PUSH
66355: LD_INT 3
66357: PUSH
66358: LD_INT 0
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 4
66388: PUSH
66389: LD_INT 1
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 3
66398: PUSH
66399: LD_INT 1
66401: PUSH
66402: EMPTY
66403: LIST
66404: LIST
66405: PUSH
66406: LD_INT 2
66408: PUSH
66409: LD_INT 0
66411: PUSH
66412: EMPTY
66413: LIST
66414: LIST
66415: PUSH
66416: LD_INT 2
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 2
66429: PUSH
66430: LD_INT 2
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 4
66440: PUSH
66441: LD_INT 2
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 4
66450: PUSH
66451: LD_INT 4
66453: PUSH
66454: EMPTY
66455: LIST
66456: LIST
66457: PUSH
66458: LD_INT 4
66460: PUSH
66461: LD_INT 3
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: LD_INT 5
66470: PUSH
66471: LD_INT 4
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 5
66480: PUSH
66481: LD_INT 5
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 4
66490: PUSH
66491: LD_INT 5
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 3
66500: PUSH
66501: LD_INT 4
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: LD_INT 3
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 5
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 3
66530: PUSH
66531: LD_INT 5
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 3
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: LD_INT 4
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: LD_INT 0
66580: PUSH
66581: LD_INT 4
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 1
66590: NEG
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: NEG
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 2
66612: PUSH
66613: LD_INT 4
66615: PUSH
66616: EMPTY
66617: LIST
66618: LIST
66619: PUSH
66620: LD_INT 2
66622: NEG
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 4
66633: NEG
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 4
66644: NEG
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 3
66656: NEG
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 3
66667: NEG
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 4
66678: NEG
66679: PUSH
66680: LD_INT 1
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 5
66689: NEG
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 5
66700: NEG
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: LD_INT 2
66716: NEG
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: PUSH
66722: LD_INT 3
66724: NEG
66725: PUSH
66726: LD_INT 2
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: EMPTY
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: LIST
66749: LIST
66750: LIST
66751: LIST
66752: LIST
66753: LIST
66754: LIST
66755: LIST
66756: LIST
66757: LIST
66758: LIST
66759: LIST
66760: LIST
66761: LIST
66762: LIST
66763: LIST
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: ST_TO_ADDR
// end ; end ;
66780: GO 66783
66782: POP
// case btype of b_depot , b_warehouse :
66783: LD_VAR 0 1
66787: PUSH
66788: LD_INT 0
66790: DOUBLE
66791: EQUAL
66792: IFTRUE 66802
66794: LD_INT 1
66796: DOUBLE
66797: EQUAL
66798: IFTRUE 66802
66800: GO 67003
66802: POP
// case nation of nation_american :
66803: LD_VAR 0 5
66807: PUSH
66808: LD_INT 1
66810: DOUBLE
66811: EQUAL
66812: IFTRUE 66816
66814: GO 66872
66816: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66817: LD_ADDR_VAR 0 9
66821: PUSH
66822: LD_VAR 0 11
66826: PUSH
66827: LD_VAR 0 12
66831: PUSH
66832: LD_VAR 0 13
66836: PUSH
66837: LD_VAR 0 14
66841: PUSH
66842: LD_VAR 0 15
66846: PUSH
66847: LD_VAR 0 16
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: PUSH
66860: LD_VAR 0 4
66864: PUSH
66865: LD_INT 1
66867: PLUS
66868: ARRAY
66869: ST_TO_ADDR
66870: GO 67001
66872: LD_INT 2
66874: DOUBLE
66875: EQUAL
66876: IFTRUE 66880
66878: GO 66936
66880: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66881: LD_ADDR_VAR 0 9
66885: PUSH
66886: LD_VAR 0 17
66890: PUSH
66891: LD_VAR 0 18
66895: PUSH
66896: LD_VAR 0 19
66900: PUSH
66901: LD_VAR 0 20
66905: PUSH
66906: LD_VAR 0 21
66910: PUSH
66911: LD_VAR 0 22
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: LIST
66920: LIST
66921: LIST
66922: LIST
66923: PUSH
66924: LD_VAR 0 4
66928: PUSH
66929: LD_INT 1
66931: PLUS
66932: ARRAY
66933: ST_TO_ADDR
66934: GO 67001
66936: LD_INT 3
66938: DOUBLE
66939: EQUAL
66940: IFTRUE 66944
66942: GO 67000
66944: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66945: LD_ADDR_VAR 0 9
66949: PUSH
66950: LD_VAR 0 23
66954: PUSH
66955: LD_VAR 0 24
66959: PUSH
66960: LD_VAR 0 25
66964: PUSH
66965: LD_VAR 0 26
66969: PUSH
66970: LD_VAR 0 27
66974: PUSH
66975: LD_VAR 0 28
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: LIST
66984: LIST
66985: LIST
66986: LIST
66987: PUSH
66988: LD_VAR 0 4
66992: PUSH
66993: LD_INT 1
66995: PLUS
66996: ARRAY
66997: ST_TO_ADDR
66998: GO 67001
67000: POP
67001: GO 67556
67003: LD_INT 2
67005: DOUBLE
67006: EQUAL
67007: IFTRUE 67017
67009: LD_INT 3
67011: DOUBLE
67012: EQUAL
67013: IFTRUE 67017
67015: GO 67073
67017: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67018: LD_ADDR_VAR 0 9
67022: PUSH
67023: LD_VAR 0 29
67027: PUSH
67028: LD_VAR 0 30
67032: PUSH
67033: LD_VAR 0 31
67037: PUSH
67038: LD_VAR 0 32
67042: PUSH
67043: LD_VAR 0 33
67047: PUSH
67048: LD_VAR 0 34
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: LIST
67059: LIST
67060: PUSH
67061: LD_VAR 0 4
67065: PUSH
67066: LD_INT 1
67068: PLUS
67069: ARRAY
67070: ST_TO_ADDR
67071: GO 67556
67073: LD_INT 16
67075: DOUBLE
67076: EQUAL
67077: IFTRUE 67135
67079: LD_INT 17
67081: DOUBLE
67082: EQUAL
67083: IFTRUE 67135
67085: LD_INT 18
67087: DOUBLE
67088: EQUAL
67089: IFTRUE 67135
67091: LD_INT 19
67093: DOUBLE
67094: EQUAL
67095: IFTRUE 67135
67097: LD_INT 22
67099: DOUBLE
67100: EQUAL
67101: IFTRUE 67135
67103: LD_INT 20
67105: DOUBLE
67106: EQUAL
67107: IFTRUE 67135
67109: LD_INT 21
67111: DOUBLE
67112: EQUAL
67113: IFTRUE 67135
67115: LD_INT 23
67117: DOUBLE
67118: EQUAL
67119: IFTRUE 67135
67121: LD_INT 24
67123: DOUBLE
67124: EQUAL
67125: IFTRUE 67135
67127: LD_INT 25
67129: DOUBLE
67130: EQUAL
67131: IFTRUE 67135
67133: GO 67191
67135: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67136: LD_ADDR_VAR 0 9
67140: PUSH
67141: LD_VAR 0 35
67145: PUSH
67146: LD_VAR 0 36
67150: PUSH
67151: LD_VAR 0 37
67155: PUSH
67156: LD_VAR 0 38
67160: PUSH
67161: LD_VAR 0 39
67165: PUSH
67166: LD_VAR 0 40
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: PUSH
67179: LD_VAR 0 4
67183: PUSH
67184: LD_INT 1
67186: PLUS
67187: ARRAY
67188: ST_TO_ADDR
67189: GO 67556
67191: LD_INT 6
67193: DOUBLE
67194: EQUAL
67195: IFTRUE 67247
67197: LD_INT 7
67199: DOUBLE
67200: EQUAL
67201: IFTRUE 67247
67203: LD_INT 8
67205: DOUBLE
67206: EQUAL
67207: IFTRUE 67247
67209: LD_INT 13
67211: DOUBLE
67212: EQUAL
67213: IFTRUE 67247
67215: LD_INT 12
67217: DOUBLE
67218: EQUAL
67219: IFTRUE 67247
67221: LD_INT 15
67223: DOUBLE
67224: EQUAL
67225: IFTRUE 67247
67227: LD_INT 11
67229: DOUBLE
67230: EQUAL
67231: IFTRUE 67247
67233: LD_INT 14
67235: DOUBLE
67236: EQUAL
67237: IFTRUE 67247
67239: LD_INT 10
67241: DOUBLE
67242: EQUAL
67243: IFTRUE 67247
67245: GO 67303
67247: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67248: LD_ADDR_VAR 0 9
67252: PUSH
67253: LD_VAR 0 41
67257: PUSH
67258: LD_VAR 0 42
67262: PUSH
67263: LD_VAR 0 43
67267: PUSH
67268: LD_VAR 0 44
67272: PUSH
67273: LD_VAR 0 45
67277: PUSH
67278: LD_VAR 0 46
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: LIST
67287: LIST
67288: LIST
67289: LIST
67290: PUSH
67291: LD_VAR 0 4
67295: PUSH
67296: LD_INT 1
67298: PLUS
67299: ARRAY
67300: ST_TO_ADDR
67301: GO 67556
67303: LD_INT 36
67305: DOUBLE
67306: EQUAL
67307: IFTRUE 67311
67309: GO 67367
67311: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67312: LD_ADDR_VAR 0 9
67316: PUSH
67317: LD_VAR 0 47
67321: PUSH
67322: LD_VAR 0 48
67326: PUSH
67327: LD_VAR 0 49
67331: PUSH
67332: LD_VAR 0 50
67336: PUSH
67337: LD_VAR 0 51
67341: PUSH
67342: LD_VAR 0 52
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: PUSH
67355: LD_VAR 0 4
67359: PUSH
67360: LD_INT 1
67362: PLUS
67363: ARRAY
67364: ST_TO_ADDR
67365: GO 67556
67367: LD_INT 4
67369: DOUBLE
67370: EQUAL
67371: IFTRUE 67393
67373: LD_INT 5
67375: DOUBLE
67376: EQUAL
67377: IFTRUE 67393
67379: LD_INT 34
67381: DOUBLE
67382: EQUAL
67383: IFTRUE 67393
67385: LD_INT 37
67387: DOUBLE
67388: EQUAL
67389: IFTRUE 67393
67391: GO 67449
67393: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67394: LD_ADDR_VAR 0 9
67398: PUSH
67399: LD_VAR 0 53
67403: PUSH
67404: LD_VAR 0 54
67408: PUSH
67409: LD_VAR 0 55
67413: PUSH
67414: LD_VAR 0 56
67418: PUSH
67419: LD_VAR 0 57
67423: PUSH
67424: LD_VAR 0 58
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: LIST
67433: LIST
67434: LIST
67435: LIST
67436: PUSH
67437: LD_VAR 0 4
67441: PUSH
67442: LD_INT 1
67444: PLUS
67445: ARRAY
67446: ST_TO_ADDR
67447: GO 67556
67449: LD_INT 31
67451: DOUBLE
67452: EQUAL
67453: IFTRUE 67499
67455: LD_INT 32
67457: DOUBLE
67458: EQUAL
67459: IFTRUE 67499
67461: LD_INT 33
67463: DOUBLE
67464: EQUAL
67465: IFTRUE 67499
67467: LD_INT 27
67469: DOUBLE
67470: EQUAL
67471: IFTRUE 67499
67473: LD_INT 26
67475: DOUBLE
67476: EQUAL
67477: IFTRUE 67499
67479: LD_INT 28
67481: DOUBLE
67482: EQUAL
67483: IFTRUE 67499
67485: LD_INT 29
67487: DOUBLE
67488: EQUAL
67489: IFTRUE 67499
67491: LD_INT 30
67493: DOUBLE
67494: EQUAL
67495: IFTRUE 67499
67497: GO 67555
67499: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67500: LD_ADDR_VAR 0 9
67504: PUSH
67505: LD_VAR 0 59
67509: PUSH
67510: LD_VAR 0 60
67514: PUSH
67515: LD_VAR 0 61
67519: PUSH
67520: LD_VAR 0 62
67524: PUSH
67525: LD_VAR 0 63
67529: PUSH
67530: LD_VAR 0 64
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: PUSH
67543: LD_VAR 0 4
67547: PUSH
67548: LD_INT 1
67550: PLUS
67551: ARRAY
67552: ST_TO_ADDR
67553: GO 67556
67555: POP
// temp_list2 = [ ] ;
67556: LD_ADDR_VAR 0 10
67560: PUSH
67561: EMPTY
67562: ST_TO_ADDR
// for i in temp_list do
67563: LD_ADDR_VAR 0 8
67567: PUSH
67568: LD_VAR 0 9
67572: PUSH
67573: FOR_IN
67574: IFFALSE 67626
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67576: LD_ADDR_VAR 0 10
67580: PUSH
67581: LD_VAR 0 10
67585: PUSH
67586: LD_VAR 0 8
67590: PUSH
67591: LD_INT 1
67593: ARRAY
67594: PUSH
67595: LD_VAR 0 2
67599: PLUS
67600: PUSH
67601: LD_VAR 0 8
67605: PUSH
67606: LD_INT 2
67608: ARRAY
67609: PUSH
67610: LD_VAR 0 3
67614: PLUS
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: EMPTY
67621: LIST
67622: ADD
67623: ST_TO_ADDR
67624: GO 67573
67626: POP
67627: POP
// result = temp_list2 ;
67628: LD_ADDR_VAR 0 7
67632: PUSH
67633: LD_VAR 0 10
67637: ST_TO_ADDR
// end ;
67638: LD_VAR 0 7
67642: RET
// export function EnemyInRange ( unit , dist ) ; begin
67643: LD_INT 0
67645: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67646: LD_ADDR_VAR 0 3
67650: PUSH
67651: LD_VAR 0 1
67655: PPUSH
67656: CALL_OW 255
67660: PPUSH
67661: LD_VAR 0 1
67665: PPUSH
67666: CALL_OW 250
67670: PPUSH
67671: LD_VAR 0 1
67675: PPUSH
67676: CALL_OW 251
67680: PPUSH
67681: LD_VAR 0 2
67685: PPUSH
67686: CALL 41747 0 4
67690: PUSH
67691: LD_INT 4
67693: ARRAY
67694: ST_TO_ADDR
// end ;
67695: LD_VAR 0 3
67699: RET
// export function PlayerSeeMe ( unit ) ; begin
67700: LD_INT 0
67702: PPUSH
// result := See ( your_side , unit ) ;
67703: LD_ADDR_VAR 0 2
67707: PUSH
67708: LD_OWVAR 2
67712: PPUSH
67713: LD_VAR 0 1
67717: PPUSH
67718: CALL_OW 292
67722: ST_TO_ADDR
// end ;
67723: LD_VAR 0 2
67727: RET
// export function ReverseDir ( unit ) ; begin
67728: LD_INT 0
67730: PPUSH
// if not unit then
67731: LD_VAR 0 1
67735: NOT
67736: IFFALSE 67740
// exit ;
67738: GO 67763
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67740: LD_ADDR_VAR 0 2
67744: PUSH
67745: LD_VAR 0 1
67749: PPUSH
67750: CALL_OW 254
67754: PUSH
67755: LD_INT 3
67757: PLUS
67758: PUSH
67759: LD_INT 6
67761: MOD
67762: ST_TO_ADDR
// end ;
67763: LD_VAR 0 2
67767: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
67768: LD_INT 0
67770: PPUSH
67771: PPUSH
67772: PPUSH
67773: PPUSH
67774: PPUSH
// if not hexes then
67775: LD_VAR 0 2
67779: NOT
67780: IFFALSE 67784
// exit ;
67782: GO 67932
// dist := 9999 ;
67784: LD_ADDR_VAR 0 5
67788: PUSH
67789: LD_INT 9999
67791: ST_TO_ADDR
// for i = 1 to hexes do
67792: LD_ADDR_VAR 0 4
67796: PUSH
67797: DOUBLE
67798: LD_INT 1
67800: DEC
67801: ST_TO_ADDR
67802: LD_VAR 0 2
67806: PUSH
67807: FOR_TO
67808: IFFALSE 67920
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
67810: LD_VAR 0 1
67814: PPUSH
67815: LD_VAR 0 2
67819: PUSH
67820: LD_VAR 0 4
67824: ARRAY
67825: PUSH
67826: LD_INT 1
67828: ARRAY
67829: PPUSH
67830: LD_VAR 0 2
67834: PUSH
67835: LD_VAR 0 4
67839: ARRAY
67840: PUSH
67841: LD_INT 2
67843: ARRAY
67844: PPUSH
67845: CALL_OW 297
67849: PUSH
67850: LD_VAR 0 5
67854: LESS
67855: IFFALSE 67918
// begin hex := hexes [ i ] ;
67857: LD_ADDR_VAR 0 7
67861: PUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_VAR 0 4
67871: ARRAY
67872: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67873: LD_ADDR_VAR 0 5
67877: PUSH
67878: LD_VAR 0 1
67882: PPUSH
67883: LD_VAR 0 2
67887: PUSH
67888: LD_VAR 0 4
67892: ARRAY
67893: PUSH
67894: LD_INT 1
67896: ARRAY
67897: PPUSH
67898: LD_VAR 0 2
67902: PUSH
67903: LD_VAR 0 4
67907: ARRAY
67908: PUSH
67909: LD_INT 2
67911: ARRAY
67912: PPUSH
67913: CALL_OW 297
67917: ST_TO_ADDR
// end ; end ;
67918: GO 67807
67920: POP
67921: POP
// result := hex ;
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_VAR 0 7
67931: ST_TO_ADDR
// end ;
67932: LD_VAR 0 3
67936: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67937: LD_INT 0
67939: PPUSH
67940: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67941: LD_VAR 0 1
67945: NOT
67946: PUSH
67947: LD_VAR 0 1
67951: PUSH
67952: LD_INT 21
67954: PUSH
67955: LD_INT 2
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 23
67964: PUSH
67965: LD_INT 2
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PPUSH
67976: CALL_OW 69
67980: IN
67981: NOT
67982: OR
67983: IFFALSE 67987
// exit ;
67985: GO 68034
// for i = 1 to 3 do
67987: LD_ADDR_VAR 0 3
67991: PUSH
67992: DOUBLE
67993: LD_INT 1
67995: DEC
67996: ST_TO_ADDR
67997: LD_INT 3
67999: PUSH
68000: FOR_TO
68001: IFFALSE 68032
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68003: LD_VAR 0 1
68007: PPUSH
68008: CALL_OW 250
68012: PPUSH
68013: LD_VAR 0 1
68017: PPUSH
68018: CALL_OW 251
68022: PPUSH
68023: LD_INT 1
68025: PPUSH
68026: CALL_OW 453
68030: GO 68000
68032: POP
68033: POP
// end ;
68034: LD_VAR 0 2
68038: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68047: LD_VAR 0 1
68051: NOT
68052: PUSH
68053: LD_VAR 0 2
68057: NOT
68058: OR
68059: PUSH
68060: LD_VAR 0 1
68064: PPUSH
68065: CALL_OW 314
68069: OR
68070: IFFALSE 68074
// exit ;
68072: GO 68515
// x := GetX ( enemy_unit ) ;
68074: LD_ADDR_VAR 0 7
68078: PUSH
68079: LD_VAR 0 2
68083: PPUSH
68084: CALL_OW 250
68088: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68089: LD_ADDR_VAR 0 8
68093: PUSH
68094: LD_VAR 0 2
68098: PPUSH
68099: CALL_OW 251
68103: ST_TO_ADDR
// if not x or not y then
68104: LD_VAR 0 7
68108: NOT
68109: PUSH
68110: LD_VAR 0 8
68114: NOT
68115: OR
68116: IFFALSE 68120
// exit ;
68118: GO 68515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68120: LD_ADDR_VAR 0 6
68124: PUSH
68125: LD_VAR 0 7
68129: PPUSH
68130: LD_INT 0
68132: PPUSH
68133: LD_INT 4
68135: PPUSH
68136: CALL_OW 272
68140: PUSH
68141: LD_VAR 0 8
68145: PPUSH
68146: LD_INT 0
68148: PPUSH
68149: LD_INT 4
68151: PPUSH
68152: CALL_OW 273
68156: PUSH
68157: EMPTY
68158: LIST
68159: LIST
68160: PUSH
68161: LD_VAR 0 7
68165: PPUSH
68166: LD_INT 1
68168: PPUSH
68169: LD_INT 4
68171: PPUSH
68172: CALL_OW 272
68176: PUSH
68177: LD_VAR 0 8
68181: PPUSH
68182: LD_INT 1
68184: PPUSH
68185: LD_INT 4
68187: PPUSH
68188: CALL_OW 273
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_VAR 0 7
68201: PPUSH
68202: LD_INT 2
68204: PPUSH
68205: LD_INT 4
68207: PPUSH
68208: CALL_OW 272
68212: PUSH
68213: LD_VAR 0 8
68217: PPUSH
68218: LD_INT 2
68220: PPUSH
68221: LD_INT 4
68223: PPUSH
68224: CALL_OW 273
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_VAR 0 7
68237: PPUSH
68238: LD_INT 3
68240: PPUSH
68241: LD_INT 4
68243: PPUSH
68244: CALL_OW 272
68248: PUSH
68249: LD_VAR 0 8
68253: PPUSH
68254: LD_INT 3
68256: PPUSH
68257: LD_INT 4
68259: PPUSH
68260: CALL_OW 273
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_VAR 0 7
68273: PPUSH
68274: LD_INT 4
68276: PPUSH
68277: LD_INT 4
68279: PPUSH
68280: CALL_OW 272
68284: PUSH
68285: LD_VAR 0 8
68289: PPUSH
68290: LD_INT 4
68292: PPUSH
68293: LD_INT 4
68295: PPUSH
68296: CALL_OW 273
68300: PUSH
68301: EMPTY
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 7
68309: PPUSH
68310: LD_INT 5
68312: PPUSH
68313: LD_INT 4
68315: PPUSH
68316: CALL_OW 272
68320: PUSH
68321: LD_VAR 0 8
68325: PPUSH
68326: LD_INT 5
68328: PPUSH
68329: LD_INT 4
68331: PPUSH
68332: CALL_OW 273
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: EMPTY
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: ST_TO_ADDR
// for i = tmp downto 1 do
68349: LD_ADDR_VAR 0 4
68353: PUSH
68354: DOUBLE
68355: LD_VAR 0 6
68359: INC
68360: ST_TO_ADDR
68361: LD_INT 1
68363: PUSH
68364: FOR_DOWNTO
68365: IFFALSE 68466
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68367: LD_VAR 0 6
68371: PUSH
68372: LD_VAR 0 4
68376: ARRAY
68377: PUSH
68378: LD_INT 1
68380: ARRAY
68381: PPUSH
68382: LD_VAR 0 6
68386: PUSH
68387: LD_VAR 0 4
68391: ARRAY
68392: PUSH
68393: LD_INT 2
68395: ARRAY
68396: PPUSH
68397: CALL_OW 488
68401: NOT
68402: PUSH
68403: LD_VAR 0 6
68407: PUSH
68408: LD_VAR 0 4
68412: ARRAY
68413: PUSH
68414: LD_INT 1
68416: ARRAY
68417: PPUSH
68418: LD_VAR 0 6
68422: PUSH
68423: LD_VAR 0 4
68427: ARRAY
68428: PUSH
68429: LD_INT 2
68431: ARRAY
68432: PPUSH
68433: CALL_OW 428
68437: PUSH
68438: LD_INT 0
68440: NONEQUAL
68441: OR
68442: IFFALSE 68464
// tmp := Delete ( tmp , i ) ;
68444: LD_ADDR_VAR 0 6
68448: PUSH
68449: LD_VAR 0 6
68453: PPUSH
68454: LD_VAR 0 4
68458: PPUSH
68459: CALL_OW 3
68463: ST_TO_ADDR
68464: GO 68364
68466: POP
68467: POP
// j := GetClosestHex ( unit , tmp ) ;
68468: LD_ADDR_VAR 0 5
68472: PUSH
68473: LD_VAR 0 1
68477: PPUSH
68478: LD_VAR 0 6
68482: PPUSH
68483: CALL 67768 0 2
68487: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68488: LD_VAR 0 1
68492: PPUSH
68493: LD_VAR 0 5
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PPUSH
68502: LD_VAR 0 5
68506: PUSH
68507: LD_INT 2
68509: ARRAY
68510: PPUSH
68511: CALL_OW 111
// end ;
68515: LD_VAR 0 3
68519: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68520: LD_INT 0
68522: PPUSH
68523: PPUSH
68524: PPUSH
// uc_side = 0 ;
68525: LD_ADDR_OWVAR 20
68529: PUSH
68530: LD_INT 0
68532: ST_TO_ADDR
// uc_nation = 0 ;
68533: LD_ADDR_OWVAR 21
68537: PUSH
68538: LD_INT 0
68540: ST_TO_ADDR
// InitHc ;
68541: CALL_OW 19
// InitVc ;
68545: CALL_OW 20
// if mastodonts then
68549: LD_VAR 0 6
68553: IFFALSE 68620
// for i = 1 to mastodonts do
68555: LD_ADDR_VAR 0 11
68559: PUSH
68560: DOUBLE
68561: LD_INT 1
68563: DEC
68564: ST_TO_ADDR
68565: LD_VAR 0 6
68569: PUSH
68570: FOR_TO
68571: IFFALSE 68618
// begin vc_chassis := 31 ;
68573: LD_ADDR_OWVAR 37
68577: PUSH
68578: LD_INT 31
68580: ST_TO_ADDR
// vc_control := control_rider ;
68581: LD_ADDR_OWVAR 38
68585: PUSH
68586: LD_INT 4
68588: ST_TO_ADDR
// animal := CreateVehicle ;
68589: LD_ADDR_VAR 0 12
68593: PUSH
68594: CALL_OW 45
68598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68599: LD_VAR 0 12
68603: PPUSH
68604: LD_VAR 0 8
68608: PPUSH
68609: LD_INT 0
68611: PPUSH
68612: CALL 70689 0 3
// end ;
68616: GO 68570
68618: POP
68619: POP
// if horses then
68620: LD_VAR 0 5
68624: IFFALSE 68691
// for i = 1 to horses do
68626: LD_ADDR_VAR 0 11
68630: PUSH
68631: DOUBLE
68632: LD_INT 1
68634: DEC
68635: ST_TO_ADDR
68636: LD_VAR 0 5
68640: PUSH
68641: FOR_TO
68642: IFFALSE 68689
// begin hc_class := 21 ;
68644: LD_ADDR_OWVAR 28
68648: PUSH
68649: LD_INT 21
68651: ST_TO_ADDR
// hc_gallery :=  ;
68652: LD_ADDR_OWVAR 33
68656: PUSH
68657: LD_STRING 
68659: ST_TO_ADDR
// animal := CreateHuman ;
68660: LD_ADDR_VAR 0 12
68664: PUSH
68665: CALL_OW 44
68669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68670: LD_VAR 0 12
68674: PPUSH
68675: LD_VAR 0 8
68679: PPUSH
68680: LD_INT 0
68682: PPUSH
68683: CALL 70689 0 3
// end ;
68687: GO 68641
68689: POP
68690: POP
// if birds then
68691: LD_VAR 0 1
68695: IFFALSE 68762
// for i = 1 to birds do
68697: LD_ADDR_VAR 0 11
68701: PUSH
68702: DOUBLE
68703: LD_INT 1
68705: DEC
68706: ST_TO_ADDR
68707: LD_VAR 0 1
68711: PUSH
68712: FOR_TO
68713: IFFALSE 68760
// begin hc_class = 18 ;
68715: LD_ADDR_OWVAR 28
68719: PUSH
68720: LD_INT 18
68722: ST_TO_ADDR
// hc_gallery =  ;
68723: LD_ADDR_OWVAR 33
68727: PUSH
68728: LD_STRING 
68730: ST_TO_ADDR
// animal := CreateHuman ;
68731: LD_ADDR_VAR 0 12
68735: PUSH
68736: CALL_OW 44
68740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68741: LD_VAR 0 12
68745: PPUSH
68746: LD_VAR 0 8
68750: PPUSH
68751: LD_INT 0
68753: PPUSH
68754: CALL 70689 0 3
// end ;
68758: GO 68712
68760: POP
68761: POP
// if tigers then
68762: LD_VAR 0 2
68766: IFFALSE 68850
// for i = 1 to tigers do
68768: LD_ADDR_VAR 0 11
68772: PUSH
68773: DOUBLE
68774: LD_INT 1
68776: DEC
68777: ST_TO_ADDR
68778: LD_VAR 0 2
68782: PUSH
68783: FOR_TO
68784: IFFALSE 68848
// begin hc_class = class_tiger ;
68786: LD_ADDR_OWVAR 28
68790: PUSH
68791: LD_INT 14
68793: ST_TO_ADDR
// hc_gallery =  ;
68794: LD_ADDR_OWVAR 33
68798: PUSH
68799: LD_STRING 
68801: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68802: LD_ADDR_OWVAR 35
68806: PUSH
68807: LD_INT 7
68809: NEG
68810: PPUSH
68811: LD_INT 7
68813: PPUSH
68814: CALL_OW 12
68818: ST_TO_ADDR
// animal := CreateHuman ;
68819: LD_ADDR_VAR 0 12
68823: PUSH
68824: CALL_OW 44
68828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68829: LD_VAR 0 12
68833: PPUSH
68834: LD_VAR 0 8
68838: PPUSH
68839: LD_INT 0
68841: PPUSH
68842: CALL 70689 0 3
// end ;
68846: GO 68783
68848: POP
68849: POP
// if apemans then
68850: LD_VAR 0 3
68854: IFFALSE 68977
// for i = 1 to apemans do
68856: LD_ADDR_VAR 0 11
68860: PUSH
68861: DOUBLE
68862: LD_INT 1
68864: DEC
68865: ST_TO_ADDR
68866: LD_VAR 0 3
68870: PUSH
68871: FOR_TO
68872: IFFALSE 68975
// begin hc_class = class_apeman ;
68874: LD_ADDR_OWVAR 28
68878: PUSH
68879: LD_INT 12
68881: ST_TO_ADDR
// hc_gallery =  ;
68882: LD_ADDR_OWVAR 33
68886: PUSH
68887: LD_STRING 
68889: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
68890: LD_ADDR_OWVAR 35
68894: PUSH
68895: LD_INT 5
68897: NEG
68898: PPUSH
68899: LD_INT 5
68901: PPUSH
68902: CALL_OW 12
68906: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68907: LD_ADDR_OWVAR 31
68911: PUSH
68912: LD_INT 1
68914: PPUSH
68915: LD_INT 3
68917: PPUSH
68918: CALL_OW 12
68922: PUSH
68923: LD_INT 1
68925: PPUSH
68926: LD_INT 3
68928: PPUSH
68929: CALL_OW 12
68933: PUSH
68934: LD_INT 0
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: LIST
68944: LIST
68945: ST_TO_ADDR
// animal := CreateHuman ;
68946: LD_ADDR_VAR 0 12
68950: PUSH
68951: CALL_OW 44
68955: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68956: LD_VAR 0 12
68960: PPUSH
68961: LD_VAR 0 8
68965: PPUSH
68966: LD_INT 0
68968: PPUSH
68969: CALL 70689 0 3
// end ;
68973: GO 68871
68975: POP
68976: POP
// if enchidnas then
68977: LD_VAR 0 4
68981: IFFALSE 69048
// for i = 1 to enchidnas do
68983: LD_ADDR_VAR 0 11
68987: PUSH
68988: DOUBLE
68989: LD_INT 1
68991: DEC
68992: ST_TO_ADDR
68993: LD_VAR 0 4
68997: PUSH
68998: FOR_TO
68999: IFFALSE 69046
// begin hc_class = 13 ;
69001: LD_ADDR_OWVAR 28
69005: PUSH
69006: LD_INT 13
69008: ST_TO_ADDR
// hc_gallery =  ;
69009: LD_ADDR_OWVAR 33
69013: PUSH
69014: LD_STRING 
69016: ST_TO_ADDR
// animal := CreateHuman ;
69017: LD_ADDR_VAR 0 12
69021: PUSH
69022: CALL_OW 44
69026: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69027: LD_VAR 0 12
69031: PPUSH
69032: LD_VAR 0 8
69036: PPUSH
69037: LD_INT 0
69039: PPUSH
69040: CALL 70689 0 3
// end ;
69044: GO 68998
69046: POP
69047: POP
// if fishes then
69048: LD_VAR 0 7
69052: IFFALSE 69119
// for i = 1 to fishes do
69054: LD_ADDR_VAR 0 11
69058: PUSH
69059: DOUBLE
69060: LD_INT 1
69062: DEC
69063: ST_TO_ADDR
69064: LD_VAR 0 7
69068: PUSH
69069: FOR_TO
69070: IFFALSE 69117
// begin hc_class = 20 ;
69072: LD_ADDR_OWVAR 28
69076: PUSH
69077: LD_INT 20
69079: ST_TO_ADDR
// hc_gallery =  ;
69080: LD_ADDR_OWVAR 33
69084: PUSH
69085: LD_STRING 
69087: ST_TO_ADDR
// animal := CreateHuman ;
69088: LD_ADDR_VAR 0 12
69092: PUSH
69093: CALL_OW 44
69097: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69098: LD_VAR 0 12
69102: PPUSH
69103: LD_VAR 0 9
69107: PPUSH
69108: LD_INT 0
69110: PPUSH
69111: CALL 70689 0 3
// end ;
69115: GO 69069
69117: POP
69118: POP
// end ;
69119: LD_VAR 0 10
69123: RET
// export function WantHeal ( sci , unit ) ; begin
69124: LD_INT 0
69126: PPUSH
// if GetTaskList ( sci ) > 0 then
69127: LD_VAR 0 1
69131: PPUSH
69132: CALL_OW 437
69136: PUSH
69137: LD_INT 0
69139: GREATER
69140: IFFALSE 69210
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69142: LD_VAR 0 1
69146: PPUSH
69147: CALL_OW 437
69151: PUSH
69152: LD_INT 1
69154: ARRAY
69155: PUSH
69156: LD_INT 1
69158: ARRAY
69159: PUSH
69160: LD_STRING l
69162: EQUAL
69163: PUSH
69164: LD_VAR 0 1
69168: PPUSH
69169: CALL_OW 437
69173: PUSH
69174: LD_INT 1
69176: ARRAY
69177: PUSH
69178: LD_INT 4
69180: ARRAY
69181: PUSH
69182: LD_VAR 0 2
69186: EQUAL
69187: AND
69188: IFFALSE 69200
// result := true else
69190: LD_ADDR_VAR 0 3
69194: PUSH
69195: LD_INT 1
69197: ST_TO_ADDR
69198: GO 69208
// result := false ;
69200: LD_ADDR_VAR 0 3
69204: PUSH
69205: LD_INT 0
69207: ST_TO_ADDR
// end else
69208: GO 69218
// result := false ;
69210: LD_ADDR_VAR 0 3
69214: PUSH
69215: LD_INT 0
69217: ST_TO_ADDR
// end ;
69218: LD_VAR 0 3
69222: RET
// export function HealTarget ( sci ) ; begin
69223: LD_INT 0
69225: PPUSH
// if not sci then
69226: LD_VAR 0 1
69230: NOT
69231: IFFALSE 69235
// exit ;
69233: GO 69300
// result := 0 ;
69235: LD_ADDR_VAR 0 2
69239: PUSH
69240: LD_INT 0
69242: ST_TO_ADDR
// if GetTaskList ( sci ) then
69243: LD_VAR 0 1
69247: PPUSH
69248: CALL_OW 437
69252: IFFALSE 69300
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69254: LD_VAR 0 1
69258: PPUSH
69259: CALL_OW 437
69263: PUSH
69264: LD_INT 1
69266: ARRAY
69267: PUSH
69268: LD_INT 1
69270: ARRAY
69271: PUSH
69272: LD_STRING l
69274: EQUAL
69275: IFFALSE 69300
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69277: LD_ADDR_VAR 0 2
69281: PUSH
69282: LD_VAR 0 1
69286: PPUSH
69287: CALL_OW 437
69291: PUSH
69292: LD_INT 1
69294: ARRAY
69295: PUSH
69296: LD_INT 4
69298: ARRAY
69299: ST_TO_ADDR
// end ;
69300: LD_VAR 0 2
69304: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69305: LD_INT 0
69307: PPUSH
69308: PPUSH
69309: PPUSH
69310: PPUSH
// if not base_units then
69311: LD_VAR 0 1
69315: NOT
69316: IFFALSE 69320
// exit ;
69318: GO 69407
// result := false ;
69320: LD_ADDR_VAR 0 2
69324: PUSH
69325: LD_INT 0
69327: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69328: LD_ADDR_VAR 0 5
69332: PUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: LD_INT 21
69340: PUSH
69341: LD_INT 3
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PPUSH
69348: CALL_OW 72
69352: ST_TO_ADDR
// if not tmp then
69353: LD_VAR 0 5
69357: NOT
69358: IFFALSE 69362
// exit ;
69360: GO 69407
// for i in tmp do
69362: LD_ADDR_VAR 0 3
69366: PUSH
69367: LD_VAR 0 5
69371: PUSH
69372: FOR_IN
69373: IFFALSE 69405
// begin result := EnemyInRange ( i , 22 ) ;
69375: LD_ADDR_VAR 0 2
69379: PUSH
69380: LD_VAR 0 3
69384: PPUSH
69385: LD_INT 22
69387: PPUSH
69388: CALL 67643 0 2
69392: ST_TO_ADDR
// if result then
69393: LD_VAR 0 2
69397: IFFALSE 69403
// exit ;
69399: POP
69400: POP
69401: GO 69407
// end ;
69403: GO 69372
69405: POP
69406: POP
// end ;
69407: LD_VAR 0 2
69411: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
69412: LD_INT 0
69414: PPUSH
69415: PPUSH
// if not units then
69416: LD_VAR 0 1
69420: NOT
69421: IFFALSE 69425
// exit ;
69423: GO 69495
// result := [ ] ;
69425: LD_ADDR_VAR 0 3
69429: PUSH
69430: EMPTY
69431: ST_TO_ADDR
// for i in units do
69432: LD_ADDR_VAR 0 4
69436: PUSH
69437: LD_VAR 0 1
69441: PUSH
69442: FOR_IN
69443: IFFALSE 69493
// if GetTag ( i ) = tag then
69445: LD_VAR 0 4
69449: PPUSH
69450: CALL_OW 110
69454: PUSH
69455: LD_VAR 0 2
69459: EQUAL
69460: IFFALSE 69491
// result := Insert ( result , result + 1 , i ) ;
69462: LD_ADDR_VAR 0 3
69466: PUSH
69467: LD_VAR 0 3
69471: PPUSH
69472: LD_VAR 0 3
69476: PUSH
69477: LD_INT 1
69479: PLUS
69480: PPUSH
69481: LD_VAR 0 4
69485: PPUSH
69486: CALL_OW 2
69490: ST_TO_ADDR
69491: GO 69442
69493: POP
69494: POP
// end ;
69495: LD_VAR 0 3
69499: RET
// export function IsDriver ( un ) ; begin
69500: LD_INT 0
69502: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69503: LD_ADDR_VAR 0 2
69507: PUSH
69508: LD_VAR 0 1
69512: PUSH
69513: LD_INT 55
69515: PUSH
69516: EMPTY
69517: LIST
69518: PPUSH
69519: CALL_OW 69
69523: IN
69524: ST_TO_ADDR
// end ;
69525: LD_VAR 0 2
69529: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69530: LD_INT 0
69532: PPUSH
69533: PPUSH
// list := [ ] ;
69534: LD_ADDR_VAR 0 5
69538: PUSH
69539: EMPTY
69540: ST_TO_ADDR
// case d of 0 :
69541: LD_VAR 0 3
69545: PUSH
69546: LD_INT 0
69548: DOUBLE
69549: EQUAL
69550: IFTRUE 69554
69552: GO 69687
69554: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69555: LD_ADDR_VAR 0 5
69559: PUSH
69560: LD_VAR 0 1
69564: PUSH
69565: LD_INT 4
69567: MINUS
69568: PUSH
69569: LD_VAR 0 2
69573: PUSH
69574: LD_INT 4
69576: MINUS
69577: PUSH
69578: LD_INT 2
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: LIST
69585: PUSH
69586: LD_VAR 0 1
69590: PUSH
69591: LD_INT 3
69593: MINUS
69594: PUSH
69595: LD_VAR 0 2
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: LIST
69607: PUSH
69608: LD_VAR 0 1
69612: PUSH
69613: LD_INT 4
69615: PLUS
69616: PUSH
69617: LD_VAR 0 2
69621: PUSH
69622: LD_INT 4
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: LIST
69629: PUSH
69630: LD_VAR 0 1
69634: PUSH
69635: LD_INT 3
69637: PLUS
69638: PUSH
69639: LD_VAR 0 2
69643: PUSH
69644: LD_INT 3
69646: PLUS
69647: PUSH
69648: LD_INT 5
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: LIST
69655: PUSH
69656: LD_VAR 0 1
69660: PUSH
69661: LD_VAR 0 2
69665: PUSH
69666: LD_INT 4
69668: PLUS
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: LIST
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: ST_TO_ADDR
// end ; 1 :
69685: GO 70385
69687: LD_INT 1
69689: DOUBLE
69690: EQUAL
69691: IFTRUE 69695
69693: GO 69828
69695: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69696: LD_ADDR_VAR 0 5
69700: PUSH
69701: LD_VAR 0 1
69705: PUSH
69706: LD_VAR 0 2
69710: PUSH
69711: LD_INT 4
69713: MINUS
69714: PUSH
69715: LD_INT 3
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: LIST
69722: PUSH
69723: LD_VAR 0 1
69727: PUSH
69728: LD_INT 3
69730: MINUS
69731: PUSH
69732: LD_VAR 0 2
69736: PUSH
69737: LD_INT 3
69739: MINUS
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: LIST
69748: PUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_INT 4
69756: MINUS
69757: PUSH
69758: LD_VAR 0 2
69762: PUSH
69763: LD_INT 1
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: LIST
69770: PUSH
69771: LD_VAR 0 1
69775: PUSH
69776: LD_VAR 0 2
69780: PUSH
69781: LD_INT 3
69783: PLUS
69784: PUSH
69785: LD_INT 0
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: LIST
69792: PUSH
69793: LD_VAR 0 1
69797: PUSH
69798: LD_INT 4
69800: PLUS
69801: PUSH
69802: LD_VAR 0 2
69806: PUSH
69807: LD_INT 4
69809: PLUS
69810: PUSH
69811: LD_INT 5
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: LIST
69818: PUSH
69819: EMPTY
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: ST_TO_ADDR
// end ; 2 :
69826: GO 70385
69828: LD_INT 2
69830: DOUBLE
69831: EQUAL
69832: IFTRUE 69836
69834: GO 69965
69836: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69837: LD_ADDR_VAR 0 5
69841: PUSH
69842: LD_VAR 0 1
69846: PUSH
69847: LD_VAR 0 2
69851: PUSH
69852: LD_INT 3
69854: MINUS
69855: PUSH
69856: LD_INT 3
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: LIST
69863: PUSH
69864: LD_VAR 0 1
69868: PUSH
69869: LD_INT 4
69871: PLUS
69872: PUSH
69873: LD_VAR 0 2
69877: PUSH
69878: LD_INT 4
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: LIST
69885: PUSH
69886: LD_VAR 0 1
69890: PUSH
69891: LD_VAR 0 2
69895: PUSH
69896: LD_INT 4
69898: PLUS
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: LIST
69907: PUSH
69908: LD_VAR 0 1
69912: PUSH
69913: LD_INT 3
69915: MINUS
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: LD_INT 1
69924: PUSH
69925: EMPTY
69926: LIST
69927: LIST
69928: LIST
69929: PUSH
69930: LD_VAR 0 1
69934: PUSH
69935: LD_INT 4
69937: MINUS
69938: PUSH
69939: LD_VAR 0 2
69943: PUSH
69944: LD_INT 4
69946: MINUS
69947: PUSH
69948: LD_INT 2
69950: PUSH
69951: EMPTY
69952: LIST
69953: LIST
69954: LIST
69955: PUSH
69956: EMPTY
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: ST_TO_ADDR
// end ; 3 :
69963: GO 70385
69965: LD_INT 3
69967: DOUBLE
69968: EQUAL
69969: IFTRUE 69973
69971: GO 70106
69973: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69974: LD_ADDR_VAR 0 5
69978: PUSH
69979: LD_VAR 0 1
69983: PUSH
69984: LD_INT 3
69986: PLUS
69987: PUSH
69988: LD_VAR 0 2
69992: PUSH
69993: LD_INT 4
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: LIST
70000: PUSH
70001: LD_VAR 0 1
70005: PUSH
70006: LD_INT 4
70008: PLUS
70009: PUSH
70010: LD_VAR 0 2
70014: PUSH
70015: LD_INT 4
70017: PLUS
70018: PUSH
70019: LD_INT 5
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: LIST
70026: PUSH
70027: LD_VAR 0 1
70031: PUSH
70032: LD_INT 4
70034: MINUS
70035: PUSH
70036: LD_VAR 0 2
70040: PUSH
70041: LD_INT 1
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: LIST
70048: PUSH
70049: LD_VAR 0 1
70053: PUSH
70054: LD_VAR 0 2
70058: PUSH
70059: LD_INT 4
70061: MINUS
70062: PUSH
70063: LD_INT 3
70065: PUSH
70066: EMPTY
70067: LIST
70068: LIST
70069: LIST
70070: PUSH
70071: LD_VAR 0 1
70075: PUSH
70076: LD_INT 3
70078: MINUS
70079: PUSH
70080: LD_VAR 0 2
70084: PUSH
70085: LD_INT 3
70087: MINUS
70088: PUSH
70089: LD_INT 2
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: LIST
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: ST_TO_ADDR
// end ; 4 :
70104: GO 70385
70106: LD_INT 4
70108: DOUBLE
70109: EQUAL
70110: IFTRUE 70114
70112: GO 70247
70114: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70115: LD_ADDR_VAR 0 5
70119: PUSH
70120: LD_VAR 0 1
70124: PUSH
70125: LD_VAR 0 2
70129: PUSH
70130: LD_INT 4
70132: PLUS
70133: PUSH
70134: LD_INT 0
70136: PUSH
70137: EMPTY
70138: LIST
70139: LIST
70140: LIST
70141: PUSH
70142: LD_VAR 0 1
70146: PUSH
70147: LD_INT 3
70149: PLUS
70150: PUSH
70151: LD_VAR 0 2
70155: PUSH
70156: LD_INT 3
70158: PLUS
70159: PUSH
70160: LD_INT 5
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: LIST
70167: PUSH
70168: LD_VAR 0 1
70172: PUSH
70173: LD_INT 4
70175: PLUS
70176: PUSH
70177: LD_VAR 0 2
70181: PUSH
70182: LD_INT 4
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: LIST
70189: PUSH
70190: LD_VAR 0 1
70194: PUSH
70195: LD_VAR 0 2
70199: PUSH
70200: LD_INT 3
70202: MINUS
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: LIST
70211: PUSH
70212: LD_VAR 0 1
70216: PUSH
70217: LD_INT 4
70219: MINUS
70220: PUSH
70221: LD_VAR 0 2
70225: PUSH
70226: LD_INT 4
70228: MINUS
70229: PUSH
70230: LD_INT 2
70232: PUSH
70233: EMPTY
70234: LIST
70235: LIST
70236: LIST
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: ST_TO_ADDR
// end ; 5 :
70245: GO 70385
70247: LD_INT 5
70249: DOUBLE
70250: EQUAL
70251: IFTRUE 70255
70253: GO 70384
70255: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70256: LD_ADDR_VAR 0 5
70260: PUSH
70261: LD_VAR 0 1
70265: PUSH
70266: LD_INT 4
70268: MINUS
70269: PUSH
70270: LD_VAR 0 2
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: LIST
70282: PUSH
70283: LD_VAR 0 1
70287: PUSH
70288: LD_VAR 0 2
70292: PUSH
70293: LD_INT 4
70295: MINUS
70296: PUSH
70297: LD_INT 3
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: LD_VAR 0 1
70309: PUSH
70310: LD_INT 4
70312: PLUS
70313: PUSH
70314: LD_VAR 0 2
70318: PUSH
70319: LD_INT 4
70321: PLUS
70322: PUSH
70323: LD_INT 5
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: LIST
70330: PUSH
70331: LD_VAR 0 1
70335: PUSH
70336: LD_INT 3
70338: PLUS
70339: PUSH
70340: LD_VAR 0 2
70344: PUSH
70345: LD_INT 4
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: LIST
70352: PUSH
70353: LD_VAR 0 1
70357: PUSH
70358: LD_VAR 0 2
70362: PUSH
70363: LD_INT 3
70365: PLUS
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: ST_TO_ADDR
// end ; end ;
70382: GO 70385
70384: POP
// result := list ;
70385: LD_ADDR_VAR 0 4
70389: PUSH
70390: LD_VAR 0 5
70394: ST_TO_ADDR
// end ;
70395: LD_VAR 0 4
70399: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70400: LD_INT 0
70402: PPUSH
70403: PPUSH
70404: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70405: LD_VAR 0 1
70409: NOT
70410: PUSH
70411: LD_VAR 0 2
70415: PUSH
70416: LD_INT 1
70418: PUSH
70419: LD_INT 2
70421: PUSH
70422: LD_INT 3
70424: PUSH
70425: LD_INT 4
70427: PUSH
70428: EMPTY
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: IN
70434: NOT
70435: OR
70436: IFFALSE 70440
// exit ;
70438: GO 70532
// tmp := [ ] ;
70440: LD_ADDR_VAR 0 5
70444: PUSH
70445: EMPTY
70446: ST_TO_ADDR
// for i in units do
70447: LD_ADDR_VAR 0 4
70451: PUSH
70452: LD_VAR 0 1
70456: PUSH
70457: FOR_IN
70458: IFFALSE 70501
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
70460: LD_ADDR_VAR 0 5
70464: PUSH
70465: LD_VAR 0 5
70469: PPUSH
70470: LD_VAR 0 5
70474: PUSH
70475: LD_INT 1
70477: PLUS
70478: PPUSH
70479: LD_VAR 0 4
70483: PPUSH
70484: LD_VAR 0 2
70488: PPUSH
70489: CALL_OW 259
70493: PPUSH
70494: CALL_OW 2
70498: ST_TO_ADDR
70499: GO 70457
70501: POP
70502: POP
// if not tmp then
70503: LD_VAR 0 5
70507: NOT
70508: IFFALSE 70512
// exit ;
70510: GO 70532
// result := SortListByListDesc ( units , tmp ) ;
70512: LD_ADDR_VAR 0 3
70516: PUSH
70517: LD_VAR 0 1
70521: PPUSH
70522: LD_VAR 0 5
70526: PPUSH
70527: CALL_OW 77
70531: ST_TO_ADDR
// end ;
70532: LD_VAR 0 3
70536: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70537: LD_INT 0
70539: PPUSH
70540: PPUSH
70541: PPUSH
// x := GetX ( building ) ;
70542: LD_ADDR_VAR 0 4
70546: PUSH
70547: LD_VAR 0 2
70551: PPUSH
70552: CALL_OW 250
70556: ST_TO_ADDR
// y := GetY ( building ) ;
70557: LD_ADDR_VAR 0 5
70561: PUSH
70562: LD_VAR 0 2
70566: PPUSH
70567: CALL_OW 251
70571: ST_TO_ADDR
// if GetTaskList ( unit ) then
70572: LD_VAR 0 1
70576: PPUSH
70577: CALL_OW 437
70581: IFFALSE 70676
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70583: LD_STRING e
70585: PUSH
70586: LD_VAR 0 1
70590: PPUSH
70591: CALL_OW 437
70595: PUSH
70596: LD_INT 1
70598: ARRAY
70599: PUSH
70600: LD_INT 1
70602: ARRAY
70603: EQUAL
70604: PUSH
70605: LD_VAR 0 4
70609: PUSH
70610: LD_VAR 0 1
70614: PPUSH
70615: CALL_OW 437
70619: PUSH
70620: LD_INT 1
70622: ARRAY
70623: PUSH
70624: LD_INT 2
70626: ARRAY
70627: EQUAL
70628: AND
70629: PUSH
70630: LD_VAR 0 5
70634: PUSH
70635: LD_VAR 0 1
70639: PPUSH
70640: CALL_OW 437
70644: PUSH
70645: LD_INT 1
70647: ARRAY
70648: PUSH
70649: LD_INT 3
70651: ARRAY
70652: EQUAL
70653: AND
70654: IFFALSE 70666
// result := true else
70656: LD_ADDR_VAR 0 3
70660: PUSH
70661: LD_INT 1
70663: ST_TO_ADDR
70664: GO 70674
// result := false ;
70666: LD_ADDR_VAR 0 3
70670: PUSH
70671: LD_INT 0
70673: ST_TO_ADDR
// end else
70674: GO 70684
// result := false ;
70676: LD_ADDR_VAR 0 3
70680: PUSH
70681: LD_INT 0
70683: ST_TO_ADDR
// end ;
70684: LD_VAR 0 3
70688: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70689: LD_INT 0
70691: PPUSH
70692: PPUSH
70693: PPUSH
70694: PPUSH
// if not unit or not area then
70695: LD_VAR 0 1
70699: NOT
70700: PUSH
70701: LD_VAR 0 2
70705: NOT
70706: OR
70707: IFFALSE 70711
// exit ;
70709: GO 70875
// tmp := AreaToList ( area , i ) ;
70711: LD_ADDR_VAR 0 6
70715: PUSH
70716: LD_VAR 0 2
70720: PPUSH
70721: LD_VAR 0 5
70725: PPUSH
70726: CALL_OW 517
70730: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70731: LD_ADDR_VAR 0 5
70735: PUSH
70736: DOUBLE
70737: LD_INT 1
70739: DEC
70740: ST_TO_ADDR
70741: LD_VAR 0 6
70745: PUSH
70746: LD_INT 1
70748: ARRAY
70749: PUSH
70750: FOR_TO
70751: IFFALSE 70873
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70753: LD_ADDR_VAR 0 7
70757: PUSH
70758: LD_VAR 0 6
70762: PUSH
70763: LD_INT 1
70765: ARRAY
70766: PUSH
70767: LD_VAR 0 5
70771: ARRAY
70772: PUSH
70773: LD_VAR 0 6
70777: PUSH
70778: LD_INT 2
70780: ARRAY
70781: PUSH
70782: LD_VAR 0 5
70786: ARRAY
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
70792: LD_VAR 0 7
70796: PUSH
70797: LD_INT 1
70799: ARRAY
70800: PPUSH
70801: LD_VAR 0 7
70805: PUSH
70806: LD_INT 2
70808: ARRAY
70809: PPUSH
70810: CALL_OW 428
70814: PUSH
70815: LD_INT 0
70817: EQUAL
70818: IFFALSE 70871
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70820: LD_VAR 0 1
70824: PPUSH
70825: LD_VAR 0 7
70829: PUSH
70830: LD_INT 1
70832: ARRAY
70833: PPUSH
70834: LD_VAR 0 7
70838: PUSH
70839: LD_INT 2
70841: ARRAY
70842: PPUSH
70843: LD_VAR 0 3
70847: PPUSH
70848: CALL_OW 48
// result := IsPlaced ( unit ) ;
70852: LD_ADDR_VAR 0 4
70856: PUSH
70857: LD_VAR 0 1
70861: PPUSH
70862: CALL_OW 305
70866: ST_TO_ADDR
// exit ;
70867: POP
70868: POP
70869: GO 70875
// end ; end ;
70871: GO 70750
70873: POP
70874: POP
// end ;
70875: LD_VAR 0 4
70879: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70880: LD_INT 0
70882: PPUSH
70883: PPUSH
70884: PPUSH
// if not side or side > 8 then
70885: LD_VAR 0 1
70889: NOT
70890: PUSH
70891: LD_VAR 0 1
70895: PUSH
70896: LD_INT 8
70898: GREATER
70899: OR
70900: IFFALSE 70904
// exit ;
70902: GO 71091
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70904: LD_ADDR_VAR 0 4
70908: PUSH
70909: LD_INT 22
70911: PUSH
70912: LD_VAR 0 1
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 21
70923: PUSH
70924: LD_INT 3
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PPUSH
70935: CALL_OW 69
70939: ST_TO_ADDR
// if not tmp then
70940: LD_VAR 0 4
70944: NOT
70945: IFFALSE 70949
// exit ;
70947: GO 71091
// enable_addtolog := true ;
70949: LD_ADDR_OWVAR 81
70953: PUSH
70954: LD_INT 1
70956: ST_TO_ADDR
// AddToLog ( [ ) ;
70957: LD_STRING [
70959: PPUSH
70960: CALL_OW 561
// for i in tmp do
70964: LD_ADDR_VAR 0 3
70968: PUSH
70969: LD_VAR 0 4
70973: PUSH
70974: FOR_IN
70975: IFFALSE 71082
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70977: LD_STRING [
70979: PUSH
70980: LD_VAR 0 3
70984: PPUSH
70985: CALL_OW 266
70989: STR
70990: PUSH
70991: LD_STRING , 
70993: STR
70994: PUSH
70995: LD_VAR 0 3
70999: PPUSH
71000: CALL_OW 250
71004: STR
71005: PUSH
71006: LD_STRING , 
71008: STR
71009: PUSH
71010: LD_VAR 0 3
71014: PPUSH
71015: CALL_OW 251
71019: STR
71020: PUSH
71021: LD_STRING , 
71023: STR
71024: PUSH
71025: LD_VAR 0 3
71029: PPUSH
71030: CALL_OW 254
71034: STR
71035: PUSH
71036: LD_STRING , 
71038: STR
71039: PUSH
71040: LD_VAR 0 3
71044: PPUSH
71045: LD_INT 1
71047: PPUSH
71048: CALL_OW 268
71052: STR
71053: PUSH
71054: LD_STRING , 
71056: STR
71057: PUSH
71058: LD_VAR 0 3
71062: PPUSH
71063: LD_INT 2
71065: PPUSH
71066: CALL_OW 268
71070: STR
71071: PUSH
71072: LD_STRING ],
71074: STR
71075: PPUSH
71076: CALL_OW 561
// end ;
71080: GO 70974
71082: POP
71083: POP
// AddToLog ( ]; ) ;
71084: LD_STRING ];
71086: PPUSH
71087: CALL_OW 561
// end ;
71091: LD_VAR 0 2
71095: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71096: LD_INT 0
71098: PPUSH
71099: PPUSH
71100: PPUSH
71101: PPUSH
71102: PPUSH
// if not area or not rate or not max then
71103: LD_VAR 0 1
71107: NOT
71108: PUSH
71109: LD_VAR 0 2
71113: NOT
71114: OR
71115: PUSH
71116: LD_VAR 0 4
71120: NOT
71121: OR
71122: IFFALSE 71126
// exit ;
71124: GO 71318
// while 1 do
71126: LD_INT 1
71128: IFFALSE 71318
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71130: LD_ADDR_VAR 0 9
71134: PUSH
71135: LD_VAR 0 1
71139: PPUSH
71140: LD_INT 1
71142: PPUSH
71143: CALL_OW 287
71147: PUSH
71148: LD_INT 10
71150: MUL
71151: ST_TO_ADDR
// r := rate / 10 ;
71152: LD_ADDR_VAR 0 7
71156: PUSH
71157: LD_VAR 0 2
71161: PUSH
71162: LD_INT 10
71164: DIVREAL
71165: ST_TO_ADDR
// time := 1 1$00 ;
71166: LD_ADDR_VAR 0 8
71170: PUSH
71171: LD_INT 2100
71173: ST_TO_ADDR
// if amount < min then
71174: LD_VAR 0 9
71178: PUSH
71179: LD_VAR 0 3
71183: LESS
71184: IFFALSE 71202
// r := r * 2 else
71186: LD_ADDR_VAR 0 7
71190: PUSH
71191: LD_VAR 0 7
71195: PUSH
71196: LD_INT 2
71198: MUL
71199: ST_TO_ADDR
71200: GO 71228
// if amount > max then
71202: LD_VAR 0 9
71206: PUSH
71207: LD_VAR 0 4
71211: GREATER
71212: IFFALSE 71228
// r := r / 2 ;
71214: LD_ADDR_VAR 0 7
71218: PUSH
71219: LD_VAR 0 7
71223: PUSH
71224: LD_INT 2
71226: DIVREAL
71227: ST_TO_ADDR
// time := time / r ;
71228: LD_ADDR_VAR 0 8
71232: PUSH
71233: LD_VAR 0 8
71237: PUSH
71238: LD_VAR 0 7
71242: DIVREAL
71243: ST_TO_ADDR
// if time < 0 then
71244: LD_VAR 0 8
71248: PUSH
71249: LD_INT 0
71251: LESS
71252: IFFALSE 71269
// time := time * - 1 ;
71254: LD_ADDR_VAR 0 8
71258: PUSH
71259: LD_VAR 0 8
71263: PUSH
71264: LD_INT 1
71266: NEG
71267: MUL
71268: ST_TO_ADDR
// wait ( time ) ;
71269: LD_VAR 0 8
71273: PPUSH
71274: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
71278: LD_INT 35
71280: PPUSH
71281: LD_INT 875
71283: PPUSH
71284: CALL_OW 12
71288: PPUSH
71289: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71293: LD_INT 1
71295: PPUSH
71296: LD_INT 5
71298: PPUSH
71299: CALL_OW 12
71303: PPUSH
71304: LD_VAR 0 1
71308: PPUSH
71309: LD_INT 1
71311: PPUSH
71312: CALL_OW 55
// end ;
71316: GO 71126
// end ;
71318: LD_VAR 0 5
71322: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71323: LD_INT 0
71325: PPUSH
71326: PPUSH
71327: PPUSH
71328: PPUSH
71329: PPUSH
71330: PPUSH
71331: PPUSH
71332: PPUSH
// if not turrets or not factories then
71333: LD_VAR 0 1
71337: NOT
71338: PUSH
71339: LD_VAR 0 2
71343: NOT
71344: OR
71345: IFFALSE 71349
// exit ;
71347: GO 71656
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
71349: LD_ADDR_VAR 0 10
71353: PUSH
71354: LD_INT 5
71356: PUSH
71357: LD_INT 6
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: PUSH
71364: LD_INT 2
71366: PUSH
71367: LD_INT 4
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 3
71376: PUSH
71377: LD_INT 5
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 24
71391: PUSH
71392: LD_INT 25
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: PUSH
71399: LD_INT 23
71401: PUSH
71402: LD_INT 27
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: PUSH
71413: LD_INT 42
71415: PUSH
71416: LD_INT 43
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: LD_INT 44
71425: PUSH
71426: LD_INT 46
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 45
71435: PUSH
71436: LD_INT 47
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: LIST
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: LIST
71452: ST_TO_ADDR
// result := [ ] ;
71453: LD_ADDR_VAR 0 3
71457: PUSH
71458: EMPTY
71459: ST_TO_ADDR
// for i in turrets do
71460: LD_ADDR_VAR 0 4
71464: PUSH
71465: LD_VAR 0 1
71469: PUSH
71470: FOR_IN
71471: IFFALSE 71654
// begin nat := GetNation ( i ) ;
71473: LD_ADDR_VAR 0 7
71477: PUSH
71478: LD_VAR 0 4
71482: PPUSH
71483: CALL_OW 248
71487: ST_TO_ADDR
// weapon := 0 ;
71488: LD_ADDR_VAR 0 8
71492: PUSH
71493: LD_INT 0
71495: ST_TO_ADDR
// if not nat then
71496: LD_VAR 0 7
71500: NOT
71501: IFFALSE 71505
// continue ;
71503: GO 71470
// for j in list [ nat ] do
71505: LD_ADDR_VAR 0 5
71509: PUSH
71510: LD_VAR 0 10
71514: PUSH
71515: LD_VAR 0 7
71519: ARRAY
71520: PUSH
71521: FOR_IN
71522: IFFALSE 71563
// if GetBWeapon ( i ) = j [ 1 ] then
71524: LD_VAR 0 4
71528: PPUSH
71529: CALL_OW 269
71533: PUSH
71534: LD_VAR 0 5
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: EQUAL
71543: IFFALSE 71561
// begin weapon := j [ 2 ] ;
71545: LD_ADDR_VAR 0 8
71549: PUSH
71550: LD_VAR 0 5
71554: PUSH
71555: LD_INT 2
71557: ARRAY
71558: ST_TO_ADDR
// break ;
71559: GO 71563
// end ;
71561: GO 71521
71563: POP
71564: POP
// if not weapon then
71565: LD_VAR 0 8
71569: NOT
71570: IFFALSE 71574
// continue ;
71572: GO 71470
// for k in factories do
71574: LD_ADDR_VAR 0 6
71578: PUSH
71579: LD_VAR 0 2
71583: PUSH
71584: FOR_IN
71585: IFFALSE 71650
// begin weapons := AvailableWeaponList ( k ) ;
71587: LD_ADDR_VAR 0 9
71591: PUSH
71592: LD_VAR 0 6
71596: PPUSH
71597: CALL_OW 478
71601: ST_TO_ADDR
// if not weapons then
71602: LD_VAR 0 9
71606: NOT
71607: IFFALSE 71611
// continue ;
71609: GO 71584
// if weapon in weapons then
71611: LD_VAR 0 8
71615: PUSH
71616: LD_VAR 0 9
71620: IN
71621: IFFALSE 71648
// begin result := [ i , weapon ] ;
71623: LD_ADDR_VAR 0 3
71627: PUSH
71628: LD_VAR 0 4
71632: PUSH
71633: LD_VAR 0 8
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: ST_TO_ADDR
// exit ;
71642: POP
71643: POP
71644: POP
71645: POP
71646: GO 71656
// end ; end ;
71648: GO 71584
71650: POP
71651: POP
// end ;
71652: GO 71470
71654: POP
71655: POP
// end ;
71656: LD_VAR 0 3
71660: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71661: LD_INT 0
71663: PPUSH
// if not side or side > 8 then
71664: LD_VAR 0 3
71668: NOT
71669: PUSH
71670: LD_VAR 0 3
71674: PUSH
71675: LD_INT 8
71677: GREATER
71678: OR
71679: IFFALSE 71683
// exit ;
71681: GO 71742
// if not range then
71683: LD_VAR 0 4
71687: NOT
71688: IFFALSE 71699
// range := - 12 ;
71690: LD_ADDR_VAR 0 4
71694: PUSH
71695: LD_INT 12
71697: NEG
71698: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71699: LD_VAR 0 1
71703: PPUSH
71704: LD_VAR 0 2
71708: PPUSH
71709: LD_VAR 0 3
71713: PPUSH
71714: LD_VAR 0 4
71718: PPUSH
71719: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71723: LD_VAR 0 1
71727: PPUSH
71728: LD_VAR 0 2
71732: PPUSH
71733: LD_VAR 0 3
71737: PPUSH
71738: CALL_OW 331
// end ;
71742: LD_VAR 0 5
71746: RET
// export function Video ( mode ) ; begin
71747: LD_INT 0
71749: PPUSH
// ingame_video = mode ;
71750: LD_ADDR_OWVAR 52
71754: PUSH
71755: LD_VAR 0 1
71759: ST_TO_ADDR
// interface_hidden = mode ;
71760: LD_ADDR_OWVAR 54
71764: PUSH
71765: LD_VAR 0 1
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 2
71774: RET
// export function Join ( array , element ) ; begin
71775: LD_INT 0
71777: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71778: LD_ADDR_VAR 0 3
71782: PUSH
71783: LD_VAR 0 1
71787: PPUSH
71788: LD_VAR 0 1
71792: PUSH
71793: LD_INT 1
71795: PLUS
71796: PPUSH
71797: LD_VAR 0 2
71801: PPUSH
71802: CALL_OW 1
71806: ST_TO_ADDR
// end ;
71807: LD_VAR 0 3
71811: RET
// export function JoinUnion ( array , element ) ; begin
71812: LD_INT 0
71814: PPUSH
// result := array union element ;
71815: LD_ADDR_VAR 0 3
71819: PUSH
71820: LD_VAR 0 1
71824: PUSH
71825: LD_VAR 0 2
71829: UNION
71830: ST_TO_ADDR
// end ;
71831: LD_VAR 0 3
71835: RET
// export function GetBehemoths ( side ) ; begin
71836: LD_INT 0
71838: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
71839: LD_ADDR_VAR 0 2
71843: PUSH
71844: LD_INT 22
71846: PUSH
71847: LD_VAR 0 1
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 31
71858: PUSH
71859: LD_INT 25
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PPUSH
71870: CALL_OW 69
71874: ST_TO_ADDR
// end ;
71875: LD_VAR 0 2
71879: RET
// export function Shuffle ( array ) ; var i , index ; begin
71880: LD_INT 0
71882: PPUSH
71883: PPUSH
71884: PPUSH
// result := [ ] ;
71885: LD_ADDR_VAR 0 2
71889: PUSH
71890: EMPTY
71891: ST_TO_ADDR
// if not array then
71892: LD_VAR 0 1
71896: NOT
71897: IFFALSE 71901
// exit ;
71899: GO 72000
// Randomize ;
71901: CALL_OW 10
// for i = array downto 1 do
71905: LD_ADDR_VAR 0 3
71909: PUSH
71910: DOUBLE
71911: LD_VAR 0 1
71915: INC
71916: ST_TO_ADDR
71917: LD_INT 1
71919: PUSH
71920: FOR_DOWNTO
71921: IFFALSE 71998
// begin index := rand ( 1 , array ) ;
71923: LD_ADDR_VAR 0 4
71927: PUSH
71928: LD_INT 1
71930: PPUSH
71931: LD_VAR 0 1
71935: PPUSH
71936: CALL_OW 12
71940: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71941: LD_ADDR_VAR 0 2
71945: PUSH
71946: LD_VAR 0 2
71950: PPUSH
71951: LD_VAR 0 2
71955: PUSH
71956: LD_INT 1
71958: PLUS
71959: PPUSH
71960: LD_VAR 0 1
71964: PUSH
71965: LD_VAR 0 4
71969: ARRAY
71970: PPUSH
71971: CALL_OW 2
71975: ST_TO_ADDR
// array := Delete ( array , index ) ;
71976: LD_ADDR_VAR 0 1
71980: PUSH
71981: LD_VAR 0 1
71985: PPUSH
71986: LD_VAR 0 4
71990: PPUSH
71991: CALL_OW 3
71995: ST_TO_ADDR
// end ;
71996: GO 71920
71998: POP
71999: POP
// end ;
72000: LD_VAR 0 2
72004: RET
// export function GetBaseMaterials ( base ) ; begin
72005: LD_INT 0
72007: PPUSH
// result := [ 0 , 0 , 0 ] ;
72008: LD_ADDR_VAR 0 2
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: LD_INT 0
72018: PUSH
72019: LD_INT 0
72021: PUSH
72022: EMPTY
72023: LIST
72024: LIST
72025: LIST
72026: ST_TO_ADDR
// if not base then
72027: LD_VAR 0 1
72031: NOT
72032: IFFALSE 72036
// exit ;
72034: GO 72085
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72036: LD_ADDR_VAR 0 2
72040: PUSH
72041: LD_VAR 0 1
72045: PPUSH
72046: LD_INT 1
72048: PPUSH
72049: CALL_OW 275
72053: PUSH
72054: LD_VAR 0 1
72058: PPUSH
72059: LD_INT 2
72061: PPUSH
72062: CALL_OW 275
72066: PUSH
72067: LD_VAR 0 1
72071: PPUSH
72072: LD_INT 3
72074: PPUSH
72075: CALL_OW 275
72079: PUSH
72080: EMPTY
72081: LIST
72082: LIST
72083: LIST
72084: ST_TO_ADDR
// end ;
72085: LD_VAR 0 2
72089: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72090: LD_INT 0
72092: PPUSH
72093: PPUSH
// result := array ;
72094: LD_ADDR_VAR 0 3
72098: PUSH
72099: LD_VAR 0 1
72103: ST_TO_ADDR
// if size > 0 then
72104: LD_VAR 0 2
72108: PUSH
72109: LD_INT 0
72111: GREATER
72112: IFFALSE 72158
// for i := array downto size do
72114: LD_ADDR_VAR 0 4
72118: PUSH
72119: DOUBLE
72120: LD_VAR 0 1
72124: INC
72125: ST_TO_ADDR
72126: LD_VAR 0 2
72130: PUSH
72131: FOR_DOWNTO
72132: IFFALSE 72156
// result := Delete ( result , result ) ;
72134: LD_ADDR_VAR 0 3
72138: PUSH
72139: LD_VAR 0 3
72143: PPUSH
72144: LD_VAR 0 3
72148: PPUSH
72149: CALL_OW 3
72153: ST_TO_ADDR
72154: GO 72131
72156: POP
72157: POP
// end ;
72158: LD_VAR 0 3
72162: RET
// export function ComExit ( unit ) ; var tmp ; begin
72163: LD_INT 0
72165: PPUSH
72166: PPUSH
// if not IsInUnit ( unit ) then
72167: LD_VAR 0 1
72171: PPUSH
72172: CALL_OW 310
72176: NOT
72177: IFFALSE 72181
// exit ;
72179: GO 72241
// tmp := IsInUnit ( unit ) ;
72181: LD_ADDR_VAR 0 3
72185: PUSH
72186: LD_VAR 0 1
72190: PPUSH
72191: CALL_OW 310
72195: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72196: LD_VAR 0 3
72200: PPUSH
72201: CALL_OW 247
72205: PUSH
72206: LD_INT 2
72208: EQUAL
72209: IFFALSE 72222
// ComExitVehicle ( unit ) else
72211: LD_VAR 0 1
72215: PPUSH
72216: CALL_OW 121
72220: GO 72231
// ComExitBuilding ( unit ) ;
72222: LD_VAR 0 1
72226: PPUSH
72227: CALL_OW 122
// result := tmp ;
72231: LD_ADDR_VAR 0 2
72235: PUSH
72236: LD_VAR 0 3
72240: ST_TO_ADDR
// end ;
72241: LD_VAR 0 2
72245: RET
// export function ResetHc ; begin
72246: LD_INT 0
72248: PPUSH
// InitHc ;
72249: CALL_OW 19
// hc_importance := 0 ;
72253: LD_ADDR_OWVAR 32
72257: PUSH
72258: LD_INT 0
72260: ST_TO_ADDR
// end ;
72261: LD_VAR 0 1
72265: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72266: LD_INT 0
72268: PPUSH
72269: PPUSH
72270: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72271: LD_ADDR_VAR 0 6
72275: PUSH
72276: LD_VAR 0 1
72280: PUSH
72281: LD_VAR 0 3
72285: PLUS
72286: PUSH
72287: LD_INT 2
72289: DIV
72290: ST_TO_ADDR
// if _x < 0 then
72291: LD_VAR 0 6
72295: PUSH
72296: LD_INT 0
72298: LESS
72299: IFFALSE 72316
// _x := _x * - 1 ;
72301: LD_ADDR_VAR 0 6
72305: PUSH
72306: LD_VAR 0 6
72310: PUSH
72311: LD_INT 1
72313: NEG
72314: MUL
72315: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72316: LD_ADDR_VAR 0 7
72320: PUSH
72321: LD_VAR 0 2
72325: PUSH
72326: LD_VAR 0 4
72330: PLUS
72331: PUSH
72332: LD_INT 2
72334: DIV
72335: ST_TO_ADDR
// if _y < 0 then
72336: LD_VAR 0 7
72340: PUSH
72341: LD_INT 0
72343: LESS
72344: IFFALSE 72361
// _y := _y * - 1 ;
72346: LD_ADDR_VAR 0 7
72350: PUSH
72351: LD_VAR 0 7
72355: PUSH
72356: LD_INT 1
72358: NEG
72359: MUL
72360: ST_TO_ADDR
// result := [ _x , _y ] ;
72361: LD_ADDR_VAR 0 5
72365: PUSH
72366: LD_VAR 0 6
72370: PUSH
72371: LD_VAR 0 7
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: ST_TO_ADDR
// end ;
72380: LD_VAR 0 5
72384: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72385: LD_INT 0
72387: PPUSH
72388: PPUSH
72389: PPUSH
72390: PPUSH
// task := GetTaskList ( unit ) ;
72391: LD_ADDR_VAR 0 7
72395: PUSH
72396: LD_VAR 0 1
72400: PPUSH
72401: CALL_OW 437
72405: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72406: LD_VAR 0 7
72410: NOT
72411: PUSH
72412: LD_VAR 0 1
72416: PPUSH
72417: LD_VAR 0 2
72421: PPUSH
72422: CALL_OW 308
72426: NOT
72427: AND
72428: IFFALSE 72432
// exit ;
72430: GO 72550
// if IsInArea ( unit , area ) then
72432: LD_VAR 0 1
72436: PPUSH
72437: LD_VAR 0 2
72441: PPUSH
72442: CALL_OW 308
72446: IFFALSE 72464
// begin ComMoveToArea ( unit , goAway ) ;
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_VAR 0 3
72457: PPUSH
72458: CALL_OW 113
// exit ;
72462: GO 72550
// end ; if task [ 1 ] [ 1 ] <> M then
72464: LD_VAR 0 7
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PUSH
72473: LD_INT 1
72475: ARRAY
72476: PUSH
72477: LD_STRING M
72479: NONEQUAL
72480: IFFALSE 72484
// exit ;
72482: GO 72550
// x := task [ 1 ] [ 2 ] ;
72484: LD_ADDR_VAR 0 5
72488: PUSH
72489: LD_VAR 0 7
72493: PUSH
72494: LD_INT 1
72496: ARRAY
72497: PUSH
72498: LD_INT 2
72500: ARRAY
72501: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72502: LD_ADDR_VAR 0 6
72506: PUSH
72507: LD_VAR 0 7
72511: PUSH
72512: LD_INT 1
72514: ARRAY
72515: PUSH
72516: LD_INT 3
72518: ARRAY
72519: ST_TO_ADDR
// if InArea ( x , y , area ) then
72520: LD_VAR 0 5
72524: PPUSH
72525: LD_VAR 0 6
72529: PPUSH
72530: LD_VAR 0 2
72534: PPUSH
72535: CALL_OW 309
72539: IFFALSE 72550
// ComStop ( unit ) ;
72541: LD_VAR 0 1
72545: PPUSH
72546: CALL_OW 141
// end ;
72550: LD_VAR 0 4
72554: RET
