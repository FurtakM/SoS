// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 42 0 0
// PrepareNature ;
   8: CALL 1776 0 0
// PrepareArabian ;
  12: CALL 2141 0 0
// PrepareAmerican ;
  16: CALL 6722 0 0
// PrepareRussian ;
  20: CALL 3097 0 0
// if debug then
  24: LD_EXP 1
  28: IFFALSE 37
// FogOff ( 2 ) ;
  30: LD_INT 2
  32: PPUSH
  33: CALL_OW 344
// Action ;
  37: CALL 8282 0 0
// end ;
  41: END
// export debug , prefix , baseConstructed , labConstructed , hiddenCameraAllowed , startAttackOnOmicron , spottedByPatrol , camAreas , russianAlert , activeGrishkoAI , allowHeikeAttack , allowToPatrol , omicronFall , loseCounter , hillBase , kirovDestroyed , beriaDestroyed , kaganDestroyed , escapeCounter , retreatFromOmicron , labCaptured , omarCountdown , kaiaKilledByRussian , kaganCaptured ; function Init ; begin
  42: LD_INT 0
  44: PPUSH
// debug := false ;
  45: LD_ADDR_EXP 1
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// prefix := 03_ ;
  53: LD_ADDR_EXP 2
  57: PUSH
  58: LD_STRING 03_
  60: ST_TO_ADDR
// baseConstructed := false ;
  61: LD_ADDR_EXP 3
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// labConstructed := false ;
  69: LD_ADDR_EXP 4
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// hiddenCameraAllowed := false ;
  77: LD_ADDR_EXP 5
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// russianAlert := false ;
  85: LD_ADDR_EXP 9
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// activeGrishkoAI := true ;
  93: LD_ADDR_EXP 10
  97: PUSH
  98: LD_INT 1
 100: ST_TO_ADDR
// allowHeikeAttack := false ;
 101: LD_ADDR_EXP 11
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// allowToPatrol := false ;
 109: LD_ADDR_EXP 12
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// omicronFall := false ;
 117: LD_ADDR_EXP 13
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// startAttackOnOmicron := false ;
 125: LD_ADDR_EXP 6
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// kirovDestroyed := false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// beriaDestroyed := false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// kaganDestroyed := false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// retreatFromOmicron := false ;
 157: LD_ADDR_EXP 20
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// spottedByPatrol := false ;
 165: LD_ADDR_EXP 7
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// omarCountdown := [ 25 25$00 , 24 24$00 , 23 23$00 ] [ Difficulty ] ;
 173: LD_ADDR_EXP 22
 177: PUSH
 178: LD_INT 52500
 180: PUSH
 181: LD_INT 50400
 183: PUSH
 184: LD_INT 48300
 186: PUSH
 187: EMPTY
 188: LIST
 189: LIST
 190: LIST
 191: PUSH
 192: LD_OWVAR 67
 196: ARRAY
 197: ST_TO_ADDR
// escapeCounter := 0 ;
 198: LD_ADDR_EXP 19
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// loseCounter := 0 ;
 206: LD_ADDR_EXP 14
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// labCaptured := false ;
 214: LD_ADDR_EXP 21
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// hillBase := false ;
 222: LD_ADDR_EXP 15
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// camAreas := [ camArea1 , camArea2 , camArea3 , camArea4 , camArea5 , camArea6 ] ;
 230: LD_ADDR_EXP 8
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 4
 240: PUSH
 241: LD_INT 5
 243: PUSH
 244: LD_INT 6
 246: PUSH
 247: LD_INT 7
 249: PUSH
 250: LD_INT 8
 252: PUSH
 253: EMPTY
 254: LIST
 255: LIST
 256: LIST
 257: LIST
 258: LIST
 259: LIST
 260: ST_TO_ADDR
// kaiaKilledByRussian := false ;
 261: LD_ADDR_EXP 23
 265: PUSH
 266: LD_INT 0
 268: ST_TO_ADDR
// kaganCaptured := false ;
 269: LD_ADDR_EXP 24
 273: PUSH
 274: LD_INT 0
 276: ST_TO_ADDR
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
// if exist_mode then
 286: LD_VAR 0 2
 290: IFFALSE 315
// unit := CreateCharacter ( prefix & ident ) else
 292: LD_ADDR_VAR 0 5
 296: PUSH
 297: LD_VAR 0 3
 301: PUSH
 302: LD_VAR 0 1
 306: STR
 307: PPUSH
 308: CALL_OW 34
 312: ST_TO_ADDR
 313: GO 330
// unit := NewCharacter ( ident ) ;
 315: LD_ADDR_VAR 0 5
 319: PUSH
 320: LD_VAR 0 1
 324: PPUSH
 325: CALL_OW 25
 329: ST_TO_ADDR
// result := unit ;
 330: LD_ADDR_VAR 0 4
 334: PUSH
 335: LD_VAR 0 5
 339: ST_TO_ADDR
// end ;
 340: LD_VAR 0 4
 344: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 345: LD_INT 0
 347: PPUSH
// uc_side := side ;
 348: LD_ADDR_OWVAR 20
 352: PUSH
 353: LD_VAR 0 1
 357: ST_TO_ADDR
// uc_nation := nation ;
 358: LD_ADDR_OWVAR 21
 362: PUSH
 363: LD_VAR 0 2
 367: ST_TO_ADDR
// vc_chassis := chassis ;
 368: LD_ADDR_OWVAR 37
 372: PUSH
 373: LD_VAR 0 3
 377: ST_TO_ADDR
// vc_engine := engine ;
 378: LD_ADDR_OWVAR 39
 382: PUSH
 383: LD_VAR 0 4
 387: ST_TO_ADDR
// vc_control := control ;
 388: LD_ADDR_OWVAR 38
 392: PUSH
 393: LD_VAR 0 5
 397: ST_TO_ADDR
// vc_weapon := weapon ;
 398: LD_ADDR_OWVAR 40
 402: PUSH
 403: LD_VAR 0 6
 407: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 408: LD_ADDR_OWVAR 41
 412: PUSH
 413: LD_VAR 0 7
 417: ST_TO_ADDR
// result := CreateVehicle ;
 418: LD_ADDR_VAR 0 8
 422: PUSH
 423: CALL_OW 45
 427: ST_TO_ADDR
// end ;
 428: LD_VAR 0 8
 432: RET
// export function SayX ( units , ident ) ; var i ; begin
 433: LD_INT 0
 435: PPUSH
 436: PPUSH
// result := false ;
 437: LD_ADDR_VAR 0 3
 441: PUSH
 442: LD_INT 0
 444: ST_TO_ADDR
// if not units then
 445: LD_VAR 0 1
 449: NOT
 450: IFFALSE 454
// exit ;
 452: GO 508
// for i in units do
 454: LD_ADDR_VAR 0 4
 458: PUSH
 459: LD_VAR 0 1
 463: PUSH
 464: FOR_IN
 465: IFFALSE 506
// if IsOk ( i ) then
 467: LD_VAR 0 4
 471: PPUSH
 472: CALL_OW 302
 476: IFFALSE 504
// begin Say ( i , ident ) ;
 478: LD_VAR 0 4
 482: PPUSH
 483: LD_VAR 0 2
 487: PPUSH
 488: CALL_OW 88
// result := i ;
 492: LD_ADDR_VAR 0 3
 496: PUSH
 497: LD_VAR 0 4
 501: ST_TO_ADDR
// break ;
 502: GO 506
// end ;
 504: GO 464
 506: POP
 507: POP
// end ;
 508: LD_VAR 0 3
 512: RET
// export function SeeUnit ( observer , unit ) ; var i , tmp ; begin
 513: LD_INT 0
 515: PPUSH
 516: PPUSH
 517: PPUSH
// if not observer or not unit then
 518: LD_VAR 0 1
 522: NOT
 523: PUSH
 524: LD_VAR 0 2
 528: NOT
 529: OR
 530: IFFALSE 534
// exit ;
 532: GO 582
// if not See ( GetSide ( observer ) , unit ) then
 534: LD_VAR 0 1
 538: PPUSH
 539: CALL_OW 255
 543: PPUSH
 544: LD_VAR 0 2
 548: PPUSH
 549: CALL_OW 292
 553: NOT
 554: IFFALSE 558
// exit ;
 556: GO 582
// result := GetDistUnits ( observer , unit ) < 12 ;
 558: LD_ADDR_VAR 0 3
 562: PUSH
 563: LD_VAR 0 1
 567: PPUSH
 568: LD_VAR 0 2
 572: PPUSH
 573: CALL_OW 296
 577: PUSH
 578: LD_INT 12
 580: LESS
 581: ST_TO_ADDR
// end ;
 582: LD_VAR 0 3
 586: RET
// export function PlaceUnitHex ( un , hex , mode ) ; begin
 587: LD_INT 0
 589: PPUSH
// if ValidHex ( hex [ 1 ] , hex [ 2 ] ) and HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
 590: LD_VAR 0 2
 594: PUSH
 595: LD_INT 1
 597: ARRAY
 598: PPUSH
 599: LD_VAR 0 2
 603: PUSH
 604: LD_INT 2
 606: ARRAY
 607: PPUSH
 608: CALL_OW 488
 612: PUSH
 613: LD_VAR 0 2
 617: PUSH
 618: LD_INT 1
 620: ARRAY
 621: PPUSH
 622: LD_VAR 0 2
 626: PUSH
 627: LD_INT 2
 629: ARRAY
 630: PPUSH
 631: CALL_OW 428
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: AND
 640: IFFALSE 674
// PlaceUnitXY ( un , hex [ 1 ] , hex [ 2 ] , mode ) ;
 642: LD_VAR 0 1
 646: PPUSH
 647: LD_VAR 0 2
 651: PUSH
 652: LD_INT 1
 654: ARRAY
 655: PPUSH
 656: LD_VAR 0 2
 660: PUSH
 661: LD_INT 2
 663: ARRAY
 664: PPUSH
 665: LD_VAR 0 3
 669: PPUSH
 670: CALL_OW 48
// end ;
 674: LD_VAR 0 4
 678: RET
// export function Video ( mode ) ; begin
 679: LD_INT 0
 681: PPUSH
// ingame_video = mode ;
 682: LD_ADDR_OWVAR 52
 686: PUSH
 687: LD_VAR 0 1
 691: ST_TO_ADDR
// interface_hidden = mode ;
 692: LD_ADDR_OWVAR 54
 696: PUSH
 697: LD_VAR 0 1
 701: ST_TO_ADDR
// end ;
 702: LD_VAR 0 2
 706: RET
// export function ReverseArray ( array ) ; var i ; begin
 707: LD_INT 0
 709: PPUSH
 710: PPUSH
// if not array then
 711: LD_VAR 0 1
 715: NOT
 716: IFFALSE 720
// exit ;
 718: GO 778
// result := [ ] ;
 720: LD_ADDR_VAR 0 2
 724: PUSH
 725: EMPTY
 726: ST_TO_ADDR
// for i := 1 to array do
 727: LD_ADDR_VAR 0 3
 731: PUSH
 732: DOUBLE
 733: LD_INT 1
 735: DEC
 736: ST_TO_ADDR
 737: LD_VAR 0 1
 741: PUSH
 742: FOR_TO
 743: IFFALSE 776
// result := Insert ( result , 1 , array [ i ] ) ;
 745: LD_ADDR_VAR 0 2
 749: PUSH
 750: LD_VAR 0 2
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: LD_VAR 0 1
 762: PUSH
 763: LD_VAR 0 3
 767: ARRAY
 768: PPUSH
 769: CALL_OW 2
 773: ST_TO_ADDR
 774: GO 742
 776: POP
 777: POP
// end ;
 778: LD_VAR 0 2
 782: RET
// export function ComExit ( unit ) ; begin
 783: LD_INT 0
 785: PPUSH
// result := IsInUnit ( unit ) ;
 786: LD_ADDR_VAR 0 2
 790: PUSH
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 310
 800: ST_TO_ADDR
// if not result then
 801: LD_VAR 0 2
 805: NOT
 806: IFFALSE 810
// exit ;
 808: GO 845
// if GetType ( result ) = unit_vehicle then
 810: LD_VAR 0 2
 814: PPUSH
 815: CALL_OW 247
 819: PUSH
 820: LD_INT 2
 822: EQUAL
 823: IFFALSE 836
// ComExitVehicle ( unit ) else
 825: LD_VAR 0 1
 829: PPUSH
 830: CALL_OW 121
 834: GO 845
// ComExitBuilding ( unit ) ;
 836: LD_VAR 0 1
 840: PPUSH
 841: CALL_OW 122
// end ;
 845: LD_VAR 0 2
 849: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
 850: LD_INT 0
 852: PPUSH
 853: PPUSH
// if not side or not nation then
 854: LD_VAR 0 1
 858: NOT
 859: PUSH
 860: LD_VAR 0 2
 864: NOT
 865: OR
 866: IFFALSE 870
// exit ;
 868: GO 1634
// case nation of nation_american :
 870: LD_VAR 0 2
 874: PUSH
 875: LD_INT 1
 877: DOUBLE
 878: EQUAL
 879: IFTRUE 883
 881: GO 1097
 883: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
 884: LD_ADDR_VAR 0 4
 888: PUSH
 889: LD_INT 35
 891: PUSH
 892: LD_INT 45
 894: PUSH
 895: LD_INT 46
 897: PUSH
 898: LD_INT 47
 900: PUSH
 901: LD_INT 82
 903: PUSH
 904: LD_INT 83
 906: PUSH
 907: LD_INT 84
 909: PUSH
 910: LD_INT 85
 912: PUSH
 913: LD_INT 86
 915: PUSH
 916: LD_INT 1
 918: PUSH
 919: LD_INT 2
 921: PUSH
 922: LD_INT 6
 924: PUSH
 925: LD_INT 15
 927: PUSH
 928: LD_INT 16
 930: PUSH
 931: LD_INT 7
 933: PUSH
 934: LD_INT 12
 936: PUSH
 937: LD_INT 13
 939: PUSH
 940: LD_INT 10
 942: PUSH
 943: LD_INT 14
 945: PUSH
 946: LD_INT 20
 948: PUSH
 949: LD_INT 21
 951: PUSH
 952: LD_INT 22
 954: PUSH
 955: LD_INT 25
 957: PUSH
 958: LD_INT 32
 960: PUSH
 961: LD_INT 27
 963: PUSH
 964: LD_INT 36
 966: PUSH
 967: LD_INT 69
 969: PUSH
 970: LD_INT 39
 972: PUSH
 973: LD_INT 34
 975: PUSH
 976: LD_INT 40
 978: PUSH
 979: LD_INT 48
 981: PUSH
 982: LD_INT 49
 984: PUSH
 985: LD_INT 50
 987: PUSH
 988: LD_INT 51
 990: PUSH
 991: LD_INT 52
 993: PUSH
 994: LD_INT 53
 996: PUSH
 997: LD_INT 54
 999: PUSH
1000: LD_INT 55
1002: PUSH
1003: LD_INT 56
1005: PUSH
1006: LD_INT 57
1008: PUSH
1009: LD_INT 58
1011: PUSH
1012: LD_INT 59
1014: PUSH
1015: LD_INT 60
1017: PUSH
1018: LD_INT 61
1020: PUSH
1021: LD_INT 62
1023: PUSH
1024: LD_INT 80
1026: PUSH
1027: LD_INT 82
1029: PUSH
1030: LD_INT 83
1032: PUSH
1033: LD_INT 84
1035: PUSH
1036: LD_INT 85
1038: PUSH
1039: LD_INT 86
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: LIST
1046: LIST
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: LIST
1061: LIST
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: LIST
1071: LIST
1072: LIST
1073: LIST
1074: LIST
1075: LIST
1076: LIST
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: LIST
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: LIST
1094: ST_TO_ADDR
1095: GO 1558
1097: LD_INT 2
1099: DOUBLE
1100: EQUAL
1101: IFTRUE 1105
1103: GO 1327
1105: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
1106: LD_ADDR_VAR 0 4
1110: PUSH
1111: LD_INT 35
1113: PUSH
1114: LD_INT 45
1116: PUSH
1117: LD_INT 46
1119: PUSH
1120: LD_INT 47
1122: PUSH
1123: LD_INT 82
1125: PUSH
1126: LD_INT 83
1128: PUSH
1129: LD_INT 84
1131: PUSH
1132: LD_INT 85
1134: PUSH
1135: LD_INT 87
1137: PUSH
1138: LD_INT 70
1140: PUSH
1141: LD_INT 1
1143: PUSH
1144: LD_INT 11
1146: PUSH
1147: LD_INT 3
1149: PUSH
1150: LD_INT 4
1152: PUSH
1153: LD_INT 5
1155: PUSH
1156: LD_INT 6
1158: PUSH
1159: LD_INT 15
1161: PUSH
1162: LD_INT 18
1164: PUSH
1165: LD_INT 7
1167: PUSH
1168: LD_INT 17
1170: PUSH
1171: LD_INT 8
1173: PUSH
1174: LD_INT 20
1176: PUSH
1177: LD_INT 21
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 72
1185: PUSH
1186: LD_INT 26
1188: PUSH
1189: LD_INT 69
1191: PUSH
1192: LD_INT 39
1194: PUSH
1195: LD_INT 40
1197: PUSH
1198: LD_INT 41
1200: PUSH
1201: LD_INT 42
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 48
1209: PUSH
1210: LD_INT 49
1212: PUSH
1213: LD_INT 50
1215: PUSH
1216: LD_INT 51
1218: PUSH
1219: LD_INT 52
1221: PUSH
1222: LD_INT 53
1224: PUSH
1225: LD_INT 54
1227: PUSH
1228: LD_INT 55
1230: PUSH
1231: LD_INT 56
1233: PUSH
1234: LD_INT 60
1236: PUSH
1237: LD_INT 61
1239: PUSH
1240: LD_INT 62
1242: PUSH
1243: LD_INT 66
1245: PUSH
1246: LD_INT 67
1248: PUSH
1249: LD_INT 68
1251: PUSH
1252: LD_INT 81
1254: PUSH
1255: LD_INT 82
1257: PUSH
1258: LD_INT 83
1260: PUSH
1261: LD_INT 84
1263: PUSH
1264: LD_INT 85
1266: PUSH
1267: LD_INT 87
1269: PUSH
1270: EMPTY
1271: LIST
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: LIST
1278: LIST
1279: LIST
1280: LIST
1281: LIST
1282: LIST
1283: LIST
1284: LIST
1285: LIST
1286: LIST
1287: LIST
1288: LIST
1289: LIST
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: LIST
1295: LIST
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: LIST
1303: LIST
1304: LIST
1305: LIST
1306: LIST
1307: LIST
1308: LIST
1309: LIST
1310: LIST
1311: LIST
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: LIST
1323: LIST
1324: ST_TO_ADDR
1325: GO 1558
1327: LD_INT 3
1329: DOUBLE
1330: EQUAL
1331: IFTRUE 1335
1333: GO 1557
1335: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
1336: LD_ADDR_VAR 0 4
1340: PUSH
1341: LD_INT 46
1343: PUSH
1344: LD_INT 47
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: LD_INT 2
1352: PUSH
1353: LD_INT 82
1355: PUSH
1356: LD_INT 83
1358: PUSH
1359: LD_INT 84
1361: PUSH
1362: LD_INT 85
1364: PUSH
1365: LD_INT 86
1367: PUSH
1368: LD_INT 11
1370: PUSH
1371: LD_INT 9
1373: PUSH
1374: LD_INT 20
1376: PUSH
1377: LD_INT 19
1379: PUSH
1380: LD_INT 21
1382: PUSH
1383: LD_INT 24
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 25
1391: PUSH
1392: LD_INT 28
1394: PUSH
1395: LD_INT 29
1397: PUSH
1398: LD_INT 30
1400: PUSH
1401: LD_INT 31
1403: PUSH
1404: LD_INT 37
1406: PUSH
1407: LD_INT 38
1409: PUSH
1410: LD_INT 32
1412: PUSH
1413: LD_INT 27
1415: PUSH
1416: LD_INT 33
1418: PUSH
1419: LD_INT 69
1421: PUSH
1422: LD_INT 39
1424: PUSH
1425: LD_INT 34
1427: PUSH
1428: LD_INT 40
1430: PUSH
1431: LD_INT 71
1433: PUSH
1434: LD_INT 23
1436: PUSH
1437: LD_INT 44
1439: PUSH
1440: LD_INT 48
1442: PUSH
1443: LD_INT 49
1445: PUSH
1446: LD_INT 50
1448: PUSH
1449: LD_INT 51
1451: PUSH
1452: LD_INT 52
1454: PUSH
1455: LD_INT 53
1457: PUSH
1458: LD_INT 54
1460: PUSH
1461: LD_INT 55
1463: PUSH
1464: LD_INT 56
1466: PUSH
1467: LD_INT 57
1469: PUSH
1470: LD_INT 58
1472: PUSH
1473: LD_INT 59
1475: PUSH
1476: LD_INT 63
1478: PUSH
1479: LD_INT 64
1481: PUSH
1482: LD_INT 65
1484: PUSH
1485: LD_INT 82
1487: PUSH
1488: LD_INT 83
1490: PUSH
1491: LD_INT 84
1493: PUSH
1494: LD_INT 85
1496: PUSH
1497: LD_INT 86
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: LIST
1506: LIST
1507: LIST
1508: LIST
1509: LIST
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: LIST
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: LIST
1523: LIST
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: LIST
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: LIST
1540: LIST
1541: LIST
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: LIST
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: ST_TO_ADDR
1555: GO 1558
1557: POP
// if state > - 1 and state < 3 then
1558: LD_VAR 0 3
1562: PUSH
1563: LD_INT 1
1565: NEG
1566: GREATER
1567: PUSH
1568: LD_VAR 0 3
1572: PUSH
1573: LD_INT 3
1575: LESS
1576: AND
1577: IFFALSE 1634
// for i in result do
1579: LD_ADDR_VAR 0 5
1583: PUSH
1584: LD_VAR 0 4
1588: PUSH
1589: FOR_IN
1590: IFFALSE 1632
// if GetTech ( i , side ) <> state then
1592: LD_VAR 0 5
1596: PPUSH
1597: LD_VAR 0 1
1601: PPUSH
1602: CALL_OW 321
1606: PUSH
1607: LD_VAR 0 3
1611: NONEQUAL
1612: IFFALSE 1630
// result := result diff i ;
1614: LD_ADDR_VAR 0 4
1618: PUSH
1619: LD_VAR 0 4
1623: PUSH
1624: LD_VAR 0 5
1628: DIFF
1629: ST_TO_ADDR
1630: GO 1589
1632: POP
1633: POP
// end ;
1634: LD_VAR 0 4
1638: RET
// export function SpawnApeman ( area , amount ) ; var i ; begin
1639: LD_INT 0
1641: PPUSH
1642: PPUSH
// InitUc ;
1643: CALL_OW 18
// InitHc ;
1647: CALL_OW 19
// uc_side := 0 ;
1651: LD_ADDR_OWVAR 20
1655: PUSH
1656: LD_INT 0
1658: ST_TO_ADDR
// uc_nation := 0 ;
1659: LD_ADDR_OWVAR 21
1663: PUSH
1664: LD_INT 0
1666: ST_TO_ADDR
// for i = 1 to amount do
1667: LD_ADDR_VAR 0 4
1671: PUSH
1672: DOUBLE
1673: LD_INT 1
1675: DEC
1676: ST_TO_ADDR
1677: LD_VAR 0 2
1681: PUSH
1682: FOR_TO
1683: IFFALSE 1765
// begin hc_attr := [ rand ( 9 , 12 ) , rand ( 9 , 12 ) ] ;
1685: LD_ADDR_OWVAR 29
1689: PUSH
1690: LD_INT 9
1692: PPUSH
1693: LD_INT 12
1695: PPUSH
1696: CALL_OW 12
1700: PUSH
1701: LD_INT 9
1703: PPUSH
1704: LD_INT 12
1706: PPUSH
1707: CALL_OW 12
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: ST_TO_ADDR
// hc_agressivity := rand ( - 1 , 1 ) ;
1716: LD_ADDR_OWVAR 35
1720: PUSH
1721: LD_INT 1
1723: NEG
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 12
1732: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
1733: LD_INT 0
1735: PPUSH
1736: LD_INT 12
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: CALL_OW 380
// PlaceUnitArea ( CreateHuman , area , false ) ;
1746: CALL_OW 44
1750: PPUSH
1751: LD_VAR 0 1
1755: PPUSH
1756: LD_INT 0
1758: PPUSH
1759: CALL_OW 49
// end ;
1763: GO 1682
1765: POP
1766: POP
// InitHc ;
1767: CALL_OW 19
// end ;
1771: LD_VAR 0 3
1775: RET
// export function PrepareNature ; var i ; begin
1776: LD_INT 0
1778: PPUSH
1779: PPUSH
// SpawnApeman ( natureArea , [ 5 , 4 , 3 ] [ Difficulty ] ) ;
1780: LD_INT 18
1782: PPUSH
1783: LD_INT 5
1785: PUSH
1786: LD_INT 4
1788: PUSH
1789: LD_INT 3
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: LIST
1796: PUSH
1797: LD_OWVAR 67
1801: ARRAY
1802: PPUSH
1803: CALL 1639 0 2
// for i := 1 to 3 do
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: DOUBLE
1813: LD_INT 1
1815: DEC
1816: ST_TO_ADDR
1817: LD_INT 3
1819: PUSH
1820: FOR_TO
1821: IFFALSE 1856
// begin hc_class := 21 ;
1823: LD_ADDR_OWVAR 28
1827: PUSH
1828: LD_INT 21
1830: ST_TO_ADDR
// hc_gallery :=  ;
1831: LD_ADDR_OWVAR 33
1835: PUSH
1836: LD_STRING 
1838: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1839: CALL_OW 44
1843: PPUSH
1844: LD_INT 18
1846: PPUSH
1847: LD_INT 0
1849: PPUSH
1850: CALL_OW 49
// end ;
1854: GO 1820
1856: POP
1857: POP
// for i := 1 to 2 do
1858: LD_ADDR_VAR 0 2
1862: PUSH
1863: DOUBLE
1864: LD_INT 1
1866: DEC
1867: ST_TO_ADDR
1868: LD_INT 2
1870: PUSH
1871: FOR_TO
1872: IFFALSE 1907
// begin hc_class := 18 ;
1874: LD_ADDR_OWVAR 28
1878: PUSH
1879: LD_INT 18
1881: ST_TO_ADDR
// hc_gallery :=  ;
1882: LD_ADDR_OWVAR 33
1886: PUSH
1887: LD_STRING 
1889: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1890: CALL_OW 44
1894: PPUSH
1895: LD_INT 18
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1871
1907: POP
1908: POP
// for i := 1 to 2 do
1909: LD_ADDR_VAR 0 2
1913: PUSH
1914: DOUBLE
1915: LD_INT 1
1917: DEC
1918: ST_TO_ADDR
1919: LD_INT 2
1921: PUSH
1922: FOR_TO
1923: IFFALSE 1958
// begin hc_class := 13 ;
1925: LD_ADDR_OWVAR 28
1929: PUSH
1930: LD_INT 13
1932: ST_TO_ADDR
// hc_gallery :=  ;
1933: LD_ADDR_OWVAR 33
1937: PUSH
1938: LD_STRING 
1940: ST_TO_ADDR
// PlaceUnitArea ( CreateHuman , natureArea , false ) ;
1941: CALL_OW 44
1945: PPUSH
1946: LD_INT 18
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 49
// end ;
1956: GO 1922
1958: POP
1959: POP
// end ;
1960: LD_VAR 0 1
1964: RET
// export function SeeEnemy ( sideList , enemySide , exceptUnits ) ; var i , s , tmp ; begin
1965: LD_INT 0
1967: PPUSH
1968: PPUSH
1969: PPUSH
1970: PPUSH
// result := false ;
1971: LD_ADDR_VAR 0 4
1975: PUSH
1976: LD_INT 0
1978: ST_TO_ADDR
// if not sideList or not enemySide then
1979: LD_VAR 0 1
1983: NOT
1984: PUSH
1985: LD_VAR 0 2
1989: NOT
1990: OR
1991: IFFALSE 1995
// exit ;
1993: GO 2136
// tmp := FilterAllUnits ( [ f_side , enemySide ] ) ;
1995: LD_ADDR_VAR 0 7
1999: PUSH
2000: LD_INT 22
2002: PUSH
2003: LD_VAR 0 2
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: ST_TO_ADDR
// if not tmp then
2017: LD_VAR 0 7
2021: NOT
2022: IFFALSE 2026
// exit ;
2024: GO 2136
// for s in sideList do
2026: LD_ADDR_VAR 0 6
2030: PUSH
2031: LD_VAR 0 1
2035: PUSH
2036: FOR_IN
2037: IFFALSE 2134
// for i in tmp do
2039: LD_ADDR_VAR 0 5
2043: PUSH
2044: LD_VAR 0 7
2048: PUSH
2049: FOR_IN
2050: IFFALSE 2130
// if See ( s , i ) then
2052: LD_VAR 0 6
2056: PPUSH
2057: LD_VAR 0 5
2061: PPUSH
2062: CALL_OW 292
2066: IFFALSE 2128
// begin result := NearestUnitToUnit ( FilterAllUnits ( [ f_side , s ] ) , i ) ;
2068: LD_ADDR_VAR 0 4
2072: PUSH
2073: LD_INT 22
2075: PUSH
2076: LD_VAR 0 6
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 69
2089: PPUSH
2090: LD_VAR 0 5
2094: PPUSH
2095: CALL_OW 74
2099: ST_TO_ADDR
// if exceptUnits then
2100: LD_VAR 0 3
2104: IFFALSE 2128
// if result in exceptUnits then
2106: LD_VAR 0 4
2110: PUSH
2111: LD_VAR 0 3
2115: IN
2116: IFFALSE 2122
// continue else
2118: GO 2049
2120: GO 2128
// exit ;
2122: POP
2123: POP
2124: POP
2125: POP
2126: GO 2136
// end ;
2128: GO 2049
2130: POP
2131: POP
2132: GO 2036
2134: POP
2135: POP
// end ; end_of_file
2136: LD_VAR 0 4
2140: RET
// export Heike , Givi , Mike , Ibrahim , Kamil , Kaia , Sophia , Markov , Omar , Kurt , Aviradze , Shariff , heikeSecondSquad , omarSquad , aviradzeSquad ; export function PrepareArabian ; var i ; begin
2141: LD_INT 0
2143: PPUSH
2144: PPUSH
// uc_side := 5 ;
2145: LD_ADDR_OWVAR 20
2149: PUSH
2150: LD_INT 5
2152: ST_TO_ADDR
// uc_nation := 2 ;
2153: LD_ADDR_OWVAR 21
2157: PUSH
2158: LD_INT 2
2160: ST_TO_ADDR
// Shariff := PrepareUnit ( Abdul , false ,  ) ;
2161: LD_ADDR_EXP 36
2165: PUSH
2166: LD_STRING Abdul
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: LD_STRING 
2174: PPUSH
2175: CALL 282 0 3
2179: ST_TO_ADDR
// uc_side := 2 ;
2180: LD_ADDR_OWVAR 20
2184: PUSH
2185: LD_INT 2
2187: ST_TO_ADDR
// uc_nation := 2 ;
2188: LD_ADDR_OWVAR 21
2192: PUSH
2193: LD_INT 2
2195: ST_TO_ADDR
// Heike := PrepareUnit ( Heike , ( not debug ) , prefix ) ;
2196: LD_ADDR_EXP 25
2200: PUSH
2201: LD_STRING Heike
2203: PPUSH
2204: LD_EXP 1
2208: NOT
2209: PPUSH
2210: LD_EXP 2
2214: PPUSH
2215: CALL 282 0 3
2219: ST_TO_ADDR
// Ibrahim := PrepareUnit ( Ibrahim , ( not debug ) , prefix ) ;
2220: LD_ADDR_EXP 28
2224: PUSH
2225: LD_STRING Ibrahim
2227: PPUSH
2228: LD_EXP 1
2232: NOT
2233: PPUSH
2234: LD_EXP 2
2238: PPUSH
2239: CALL 282 0 3
2243: ST_TO_ADDR
// Givi := PrepareUnit ( Givi , ( not debug ) , prefix ) ;
2244: LD_ADDR_EXP 26
2248: PUSH
2249: LD_STRING Givi
2251: PPUSH
2252: LD_EXP 1
2256: NOT
2257: PPUSH
2258: LD_EXP 2
2262: PPUSH
2263: CALL 282 0 3
2267: ST_TO_ADDR
// Kamil := PrepareUnit ( Kamil , ( not debug ) , prefix ) ;
2268: LD_ADDR_EXP 29
2272: PUSH
2273: LD_STRING Kamil
2275: PPUSH
2276: LD_EXP 1
2280: NOT
2281: PPUSH
2282: LD_EXP 2
2286: PPUSH
2287: CALL 282 0 3
2291: ST_TO_ADDR
// Kaia := PrepareUnit ( Kaia , ( not debug ) , prefix ) ;
2292: LD_ADDR_EXP 30
2296: PUSH
2297: LD_STRING Kaia
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_EXP 2
2310: PPUSH
2311: CALL 282 0 3
2315: ST_TO_ADDR
// Sophia := PrepareUnit ( Sophia , ( not debug ) , prefix ) ;
2316: LD_ADDR_EXP 31
2320: PUSH
2321: LD_STRING Sophia
2323: PPUSH
2324: LD_EXP 1
2328: NOT
2329: PPUSH
2330: LD_EXP 2
2334: PPUSH
2335: CALL 282 0 3
2339: ST_TO_ADDR
// Markov := PrepareUnit ( Markov , ( not debug ) , prefix ) ;
2340: LD_ADDR_EXP 32
2344: PUSH
2345: LD_STRING Markov
2347: PPUSH
2348: LD_EXP 1
2352: NOT
2353: PPUSH
2354: LD_EXP 2
2358: PPUSH
2359: CALL 282 0 3
2363: ST_TO_ADDR
// Aviradze := PrepareUnit ( Aviradze , ( not debug ) , prefix ) ;
2364: LD_ADDR_EXP 35
2368: PUSH
2369: LD_STRING Aviradze
2371: PPUSH
2372: LD_EXP 1
2376: NOT
2377: PPUSH
2378: LD_EXP 2
2382: PPUSH
2383: CALL 282 0 3
2387: ST_TO_ADDR
// aviradzeSquad := [ ] ;
2388: LD_ADDR_EXP 39
2392: PUSH
2393: EMPTY
2394: ST_TO_ADDR
// heikeSecondSquad := CreateCharacterSet ( 03_others ) ;
2395: LD_ADDR_EXP 37
2399: PUSH
2400: LD_STRING 03_others
2402: PPUSH
2403: CALL_OW 31
2407: ST_TO_ADDR
// uc_side := 5 ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_INT 5
2415: ST_TO_ADDR
// Kurt := PrepareUnit ( Kurt , false ,  ) ;
2416: LD_ADDR_EXP 34
2420: PUSH
2421: LD_STRING Kurt
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: LD_STRING 
2429: PPUSH
2430: CALL 282 0 3
2434: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , prefix ) ;
2435: LD_ADDR_EXP 27
2439: PUSH
2440: LD_STRING Mike
2442: PPUSH
2443: LD_EXP 1
2447: NOT
2448: PPUSH
2449: LD_EXP 2
2453: PPUSH
2454: CALL 282 0 3
2458: ST_TO_ADDR
// if Mike then
2459: LD_EXP 27
2463: IFFALSE 2486
// PlaceUnitXYR ( Mike , 142 , 63 , 2 , false ) ;
2465: LD_EXP 27
2469: PPUSH
2470: LD_INT 142
2472: PPUSH
2473: LD_INT 63
2475: PPUSH
2476: LD_INT 2
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: CALL_OW 50
// PlaceUnitXYR ( Kurt , 142 , 63 , 3 , false ) ;
2486: LD_EXP 34
2490: PPUSH
2491: LD_INT 142
2493: PPUSH
2494: LD_INT 63
2496: PPUSH
2497: LD_INT 3
2499: PPUSH
2500: LD_INT 0
2502: PPUSH
2503: CALL_OW 50
// ComHold ( [ Kurt , Mike ] ) ;
2507: LD_EXP 34
2511: PUSH
2512: LD_EXP 27
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PPUSH
2521: CALL_OW 140
// end ;
2525: LD_VAR 0 1
2529: RET
// export function PrepareOmarForces ; var i , un , veh ; begin
2530: LD_INT 0
2532: PPUSH
2533: PPUSH
2534: PPUSH
2535: PPUSH
// uc_side := 5 ;
2536: LD_ADDR_OWVAR 20
2540: PUSH
2541: LD_INT 5
2543: ST_TO_ADDR
// uc_nation := 2 ;
2544: LD_ADDR_OWVAR 21
2548: PUSH
2549: LD_INT 2
2551: ST_TO_ADDR
// InitHc ;
2552: CALL_OW 19
// Omar := PrepareUnit ( Omar , false ,  ) ;
2556: LD_ADDR_EXP 33
2560: PUSH
2561: LD_STRING Omar
2563: PPUSH
2564: LD_INT 0
2566: PPUSH
2567: LD_STRING 
2569: PPUSH
2570: CALL 282 0 3
2574: ST_TO_ADDR
// PlaceUnitXY ( Omar , 284 , 163 , false ) ;
2575: LD_EXP 33
2579: PPUSH
2580: LD_INT 284
2582: PPUSH
2583: LD_INT 163
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 48
// ComMoveXY ( Omar , 256 , 129 ) ;
2593: LD_EXP 33
2597: PPUSH
2598: LD_INT 256
2600: PPUSH
2601: LD_INT 129
2603: PPUSH
2604: CALL_OW 111
// wait ( 0 0$2 ) ;
2608: LD_INT 70
2610: PPUSH
2611: CALL_OW 67
// omarSquad := [ ] ;
2615: LD_ADDR_EXP 38
2619: PUSH
2620: EMPTY
2621: ST_TO_ADDR
// for i := 1 to 5 do
2622: LD_ADDR_VAR 0 2
2626: PUSH
2627: DOUBLE
2628: LD_INT 1
2630: DEC
2631: ST_TO_ADDR
2632: LD_INT 5
2634: PUSH
2635: FOR_TO
2636: IFFALSE 2842
// begin PrepareTank ( 5 , 2 , [ ar_medium_trike , ar_half_tracked ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ i mod 3 + 1 ] , 100 ) ;
2638: LD_INT 5
2640: PPUSH
2641: LD_INT 2
2643: PPUSH
2644: LD_INT 13
2646: PUSH
2647: LD_INT 14
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PUSH
2654: LD_VAR 0 2
2658: PUSH
2659: LD_INT 2
2661: MOD
2662: PUSH
2663: LD_INT 1
2665: PLUS
2666: ARRAY
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: LD_INT 1
2673: PPUSH
2674: LD_INT 25
2676: PUSH
2677: LD_INT 27
2679: PUSH
2680: LD_INT 26
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PUSH
2688: LD_VAR 0 2
2692: PUSH
2693: LD_INT 3
2695: MOD
2696: PUSH
2697: LD_INT 1
2699: PLUS
2700: ARRAY
2701: PPUSH
2702: LD_INT 100
2704: PPUSH
2705: CALL 345 0 7
// veh := CreateVehicle ;
2709: LD_ADDR_VAR 0 4
2713: PUSH
2714: CALL_OW 45
2718: ST_TO_ADDR
// SetDir ( veh , 5 ) ;
2719: LD_VAR 0 4
2723: PPUSH
2724: LD_INT 5
2726: PPUSH
2727: CALL_OW 233
// omarSquad := omarSquad union veh ;
2731: LD_ADDR_EXP 38
2735: PUSH
2736: LD_EXP 38
2740: PUSH
2741: LD_VAR 0 4
2745: UNION
2746: ST_TO_ADDR
// PlaceUnitXY ( veh , 284 , 163 , false ) ;
2747: LD_VAR 0 4
2751: PPUSH
2752: LD_INT 284
2754: PPUSH
2755: LD_INT 163
2757: PPUSH
2758: LD_INT 0
2760: PPUSH
2761: CALL_OW 48
// PrepareHuman ( false , 3 , 3 ) ;
2765: LD_INT 0
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: LD_INT 3
2773: PPUSH
2774: CALL_OW 380
// un := CreateHuman ;
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: CALL_OW 44
2787: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2788: LD_ADDR_EXP 38
2792: PUSH
2793: LD_EXP 38
2797: PUSH
2798: LD_VAR 0 3
2802: UNION
2803: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2804: LD_VAR 0 3
2808: PPUSH
2809: LD_VAR 0 4
2813: PPUSH
2814: CALL_OW 52
// ComMoveXY ( un , 271 , 144 ) ;
2818: LD_VAR 0 3
2822: PPUSH
2823: LD_INT 271
2825: PPUSH
2826: LD_INT 144
2828: PPUSH
2829: CALL_OW 111
// wait ( 0 0$2 ) ;
2833: LD_INT 70
2835: PPUSH
2836: CALL_OW 67
// end ;
2840: GO 2635
2842: POP
2843: POP
// for i := 1 to 3 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 1
2852: DEC
2853: ST_TO_ADDR
2854: LD_INT 3
2856: PUSH
2857: FOR_TO
2858: IFFALSE 2941
// begin PrepareHuman ( false , 1 , 3 ) ;
2860: LD_INT 0
2862: PPUSH
2863: LD_INT 1
2865: PPUSH
2866: LD_INT 3
2868: PPUSH
2869: CALL_OW 380
// un := CreateHuman ;
2873: LD_ADDR_VAR 0 3
2877: PUSH
2878: CALL_OW 44
2882: ST_TO_ADDR
// omarSquad := omarSquad union un ;
2883: LD_ADDR_EXP 38
2887: PUSH
2888: LD_EXP 38
2892: PUSH
2893: LD_VAR 0 3
2897: UNION
2898: ST_TO_ADDR
// PlaceUnitXY ( un , 284 , 163 , false ) ;
2899: LD_VAR 0 3
2903: PPUSH
2904: LD_INT 284
2906: PPUSH
2907: LD_INT 163
2909: PPUSH
2910: LD_INT 0
2912: PPUSH
2913: CALL_OW 48
// ComMoveXY ( un , 257 , 138 ) ;
2917: LD_VAR 0 3
2921: PPUSH
2922: LD_INT 257
2924: PPUSH
2925: LD_INT 138
2927: PPUSH
2928: CALL_OW 111
// wait ( 0 0$1 ) ;
2932: LD_INT 35
2934: PPUSH
2935: CALL_OW 67
// end ;
2939: GO 2857
2941: POP
2942: POP
// for i := 1 to 6 do
2943: LD_ADDR_VAR 0 2
2947: PUSH
2948: DOUBLE
2949: LD_INT 1
2951: DEC
2952: ST_TO_ADDR
2953: LD_INT 6
2955: PUSH
2956: FOR_TO
2957: IFFALSE 3090
// begin PrepareHuman ( false , [ 1 , 1 , 4 ] [ i mod 3 + 1 ] , 3 ) ;
2959: LD_INT 0
2961: PPUSH
2962: LD_INT 1
2964: PUSH
2965: LD_INT 1
2967: PUSH
2968: LD_INT 4
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: LIST
2975: PUSH
2976: LD_VAR 0 2
2980: PUSH
2981: LD_INT 3
2983: MOD
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: ARRAY
2989: PPUSH
2990: LD_INT 3
2992: PPUSH
2993: CALL_OW 380
// un := CreateHuman ;
2997: LD_ADDR_VAR 0 3
3001: PUSH
3002: CALL_OW 44
3006: ST_TO_ADDR
// omarSquad := omarSquad union un ;
3007: LD_ADDR_EXP 38
3011: PUSH
3012: LD_EXP 38
3016: PUSH
3017: LD_VAR 0 3
3021: UNION
3022: ST_TO_ADDR
// PlaceUnitXY ( un , 225 , 163 , false ) ;
3023: LD_VAR 0 3
3027: PPUSH
3028: LD_INT 225
3030: PPUSH
3031: LD_INT 163
3033: PPUSH
3034: LD_INT 0
3036: PPUSH
3037: CALL_OW 48
// if i = 1 then
3041: LD_VAR 0 2
3045: PUSH
3046: LD_INT 1
3048: EQUAL
3049: IFFALSE 3066
// SetAttr ( un , attr_speed , 12 ) ;
3051: LD_VAR 0 3
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: LD_INT 12
3061: PPUSH
3062: CALL_OW 239
// ComMoveXY ( un , 222 , 157 ) ;
3066: LD_VAR 0 3
3070: PPUSH
3071: LD_INT 222
3073: PPUSH
3074: LD_INT 157
3076: PPUSH
3077: CALL_OW 111
// wait ( 0 0$1 ) ;
3081: LD_INT 35
3083: PPUSH
3084: CALL_OW 67
// end ;
3088: GO 2956
3090: POP
3091: POP
// end ; end_of_file
3092: LD_VAR 0 1
3096: RET
// export Kurin , Grishko , Popov , Burlak ; export kirovBaseSquad , beriaBaseSquad , grishkoSquad , russianPatrol , russianOmicronAttackers , russianCargo , ruLab ; export function PrepareRussian ; var i , un , arm , bar , bun ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
3103: PPUSH
3104: PPUSH
// ruLab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ;
3105: LD_ADDR_EXP 50
3109: PUSH
3110: LD_INT 22
3112: PUSH
3113: LD_INT 3
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 30
3122: PUSH
3123: LD_INT 7
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PPUSH
3134: CALL_OW 69
3138: PUSH
3139: LD_INT 1
3141: ARRAY
3142: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_type , unit_building ] , [ f_nation , 3 ] ] ) do
3143: LD_ADDR_VAR 0 2
3147: PUSH
3148: LD_INT 21
3150: PUSH
3151: LD_INT 3
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PUSH
3158: LD_INT 23
3160: PUSH
3161: LD_INT 3
3163: PUSH
3164: EMPTY
3165: LIST
3166: LIST
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PPUSH
3172: CALL_OW 69
3176: PUSH
3177: FOR_IN
3178: IFFALSE 3194
// SetBLevel ( i , 5 ) ;
3180: LD_VAR 0 2
3184: PPUSH
3185: LD_INT 5
3187: PPUSH
3188: CALL_OW 241
3192: GO 3177
3194: POP
3195: POP
// SetBName ( kirov , kirov ) ;
3196: LD_INT 71
3198: PPUSH
3199: LD_STRING kirov
3201: PPUSH
3202: CALL_OW 500
// SetBName ( beria , beria ) ;
3206: LD_INT 106
3208: PPUSH
3209: LD_STRING beria
3211: PPUSH
3212: CALL_OW 500
// SetBName ( kagan , kagan ) ;
3216: LD_INT 112
3218: PPUSH
3219: LD_STRING kagan
3221: PPUSH
3222: CALL_OW 500
// uc_side := 6 ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_INT 6
3233: ST_TO_ADDR
// uc_nation := 3 ;
3234: LD_ADDR_OWVAR 21
3238: PUSH
3239: LD_INT 3
3241: ST_TO_ADDR
// bar := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
3242: LD_ADDR_VAR 0 5
3246: PUSH
3247: LD_INT 22
3249: PUSH
3250: LD_INT 6
3252: PUSH
3253: EMPTY
3254: LIST
3255: LIST
3256: PUSH
3257: LD_INT 30
3259: PUSH
3260: LD_INT 5
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: PPUSH
3271: CALL_OW 69
3275: PUSH
3276: LD_INT 1
3278: ARRAY
3279: ST_TO_ADDR
// arm := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) [ 1 ] ;
3280: LD_ADDR_VAR 0 4
3284: PUSH
3285: LD_INT 22
3287: PUSH
3288: LD_INT 6
3290: PUSH
3291: EMPTY
3292: LIST
3293: LIST
3294: PUSH
3295: LD_INT 30
3297: PUSH
3298: LD_INT 4
3300: PUSH
3301: EMPTY
3302: LIST
3303: LIST
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PPUSH
3309: CALL_OW 69
3313: PUSH
3314: LD_INT 1
3316: ARRAY
3317: ST_TO_ADDR
// kirovBaseSquad := [ ] ;
3318: LD_ADDR_EXP 44
3322: PUSH
3323: EMPTY
3324: ST_TO_ADDR
// beriaBaseSquad := [ ] ;
3325: LD_ADDR_EXP 45
3329: PUSH
3330: EMPTY
3331: ST_TO_ADDR
// russianPatrol := [ ] ;
3332: LD_ADDR_EXP 47
3336: PUSH
3337: EMPTY
3338: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
3339: LD_ADDR_EXP 40
3343: PUSH
3344: LD_STRING Kurin
3346: PPUSH
3347: LD_INT 0
3349: PPUSH
3350: LD_STRING 
3352: PPUSH
3353: CALL 282 0 3
3357: ST_TO_ADDR
// PlaceHumanInUnit ( Kurin , kirov ) ;
3358: LD_EXP 40
3362: PPUSH
3363: LD_INT 71
3365: PPUSH
3366: CALL_OW 52
// Popov := PrepareUnit ( Popov , false ,  ) ;
3370: LD_ADDR_EXP 42
3374: PUSH
3375: LD_STRING Popov
3377: PPUSH
3378: LD_INT 0
3380: PPUSH
3381: LD_STRING 
3383: PPUSH
3384: CALL 282 0 3
3388: ST_TO_ADDR
// PlaceHumanInUnit ( Popov , kirov ) ;
3389: LD_EXP 42
3393: PPUSH
3394: LD_INT 71
3396: PPUSH
3397: CALL_OW 52
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
3401: LD_ADDR_EXP 41
3405: PUSH
3406: LD_STRING Grishko
3408: PPUSH
3409: LD_INT 0
3411: PPUSH
3412: LD_STRING 
3414: PPUSH
3415: CALL 282 0 3
3419: ST_TO_ADDR
// PlaceUnitXY ( Grishko , 207 , 106 , false ) ;
3420: LD_EXP 41
3424: PPUSH
3425: LD_INT 207
3427: PPUSH
3428: LD_INT 106
3430: PPUSH
3431: LD_INT 0
3433: PPUSH
3434: CALL_OW 48
// ComTurnXY ( Grishko , 209 , 106 ) ;
3438: LD_EXP 41
3442: PPUSH
3443: LD_INT 209
3445: PPUSH
3446: LD_INT 106
3448: PPUSH
3449: CALL_OW 118
// for i := 1 to 2 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 2
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3522
// begin PrepareHuman ( false , 2 , 2 ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 2
3474: PPUSH
3475: LD_INT 2
3477: PPUSH
3478: CALL_OW 380
// un := CreateHuman ;
3482: LD_ADDR_VAR 0 3
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_INT 71
3499: PPUSH
3500: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3504: LD_ADDR_EXP 44
3508: PUSH
3509: LD_EXP 44
3513: PUSH
3514: LD_VAR 0 3
3518: UNION
3519: ST_TO_ADDR
// end ;
3520: GO 3466
3522: POP
3523: POP
// for i := 1 to [ 5 , 6 , 6 ] [ Difficulty ] do
3524: LD_ADDR_VAR 0 2
3528: PUSH
3529: DOUBLE
3530: LD_INT 1
3532: DEC
3533: ST_TO_ADDR
3534: LD_INT 5
3536: PUSH
3537: LD_INT 6
3539: PUSH
3540: LD_INT 6
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: LIST
3547: PUSH
3548: LD_OWVAR 67
3552: ARRAY
3553: PUSH
3554: FOR_TO
3555: IFFALSE 3629
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 1
3562: PPUSH
3563: LD_INT 2
3565: PUSH
3566: LD_INT 3
3568: PUSH
3569: LD_INT 4
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: LIST
3576: PUSH
3577: LD_OWVAR 67
3581: ARRAY
3582: PPUSH
3583: CALL_OW 380
// un := CreateHuman ;
3587: LD_ADDR_VAR 0 3
3591: PUSH
3592: CALL_OW 44
3596: ST_TO_ADDR
// PlaceHumanInUnit ( un , bar ) ;
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_VAR 0 5
3606: PPUSH
3607: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3611: LD_ADDR_EXP 44
3615: PUSH
3616: LD_EXP 44
3620: PUSH
3621: LD_VAR 0 3
3625: UNION
3626: ST_TO_ADDR
// end ;
3627: GO 3554
3629: POP
3630: POP
// for i := 1 to 3 do
3631: LD_ADDR_VAR 0 2
3635: PUSH
3636: DOUBLE
3637: LD_INT 1
3639: DEC
3640: ST_TO_ADDR
3641: LD_INT 3
3643: PUSH
3644: FOR_TO
3645: IFFALSE 3700
// begin PrepareHuman ( false , 3 , 3 ) ;
3647: LD_INT 0
3649: PPUSH
3650: LD_INT 3
3652: PPUSH
3653: LD_INT 3
3655: PPUSH
3656: CALL_OW 380
// un := CreateHuman ;
3660: LD_ADDR_VAR 0 3
3664: PUSH
3665: CALL_OW 44
3669: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_fac ) ;
3670: LD_VAR 0 3
3674: PPUSH
3675: LD_INT 92
3677: PPUSH
3678: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3682: LD_ADDR_EXP 44
3686: PUSH
3687: LD_EXP 44
3691: PUSH
3692: LD_VAR 0 3
3696: UNION
3697: ST_TO_ADDR
// end ;
3698: GO 3644
3700: POP
3701: POP
// for i := 1 to 2 do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_INT 2
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3771
// begin PrepareHuman ( false , 4 , 3 ) ;
3718: LD_INT 0
3720: PPUSH
3721: LD_INT 4
3723: PPUSH
3724: LD_INT 3
3726: PPUSH
3727: CALL_OW 380
// un := CreateHuman ;
3731: LD_ADDR_VAR 0 3
3735: PUSH
3736: CALL_OW 44
3740: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
3741: LD_VAR 0 3
3745: PPUSH
3746: LD_INT 83
3748: PPUSH
3749: CALL_OW 52
// kirovBaseSquad := kirovBaseSquad union un ;
3753: LD_ADDR_EXP 44
3757: PUSH
3758: LD_EXP 44
3762: PUSH
3763: LD_VAR 0 3
3767: UNION
3768: ST_TO_ADDR
// end ;
3769: GO 3715
3771: POP
3772: POP
// for i := 1 to 5 do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 5
3785: PUSH
3786: FOR_TO
3787: IFFALSE 3844
// begin PrepareHuman ( false , 1 , 3 ) ;
3789: LD_INT 0
3791: PPUSH
3792: LD_INT 1
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: CALL_OW 380
// un := CreateHuman ;
3802: LD_ADDR_VAR 0 3
3806: PUSH
3807: CALL_OW 44
3811: ST_TO_ADDR
// PlaceHumanInUnit ( un , arm ) ;
3812: LD_VAR 0 3
3816: PPUSH
3817: LD_VAR 0 4
3821: PPUSH
3822: CALL_OW 52
// grishkoSquad := grishkoSquad union un ;
3826: LD_ADDR_EXP 46
3830: PUSH
3831: LD_EXP 46
3835: PUSH
3836: LD_VAR 0 3
3840: UNION
3841: ST_TO_ADDR
// end ;
3842: GO 3786
3844: POP
3845: POP
// russianCargo := [ ] ;
3846: LD_ADDR_EXP 49
3850: PUSH
3851: EMPTY
3852: ST_TO_ADDR
// for i := 1 to 2 do
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: DOUBLE
3859: LD_INT 1
3861: DEC
3862: ST_TO_ADDR
3863: LD_INT 2
3865: PUSH
3866: FOR_TO
3867: IFFALSE 3999
// begin PrepareTank ( 6 , 3 , ru_medium_wheeled , engine_combustion , control_manual , ru_cargo_bay , 100 ) ;
3869: LD_INT 6
3871: PPUSH
3872: LD_INT 3
3874: PPUSH
3875: LD_INT 21
3877: PPUSH
3878: LD_INT 1
3880: PPUSH
3881: LD_INT 1
3883: PPUSH
3884: LD_INT 51
3886: PPUSH
3887: LD_INT 100
3889: PPUSH
3890: CALL 345 0 7
// un := CreateVehicle ;
3894: LD_ADDR_VAR 0 3
3898: PUSH
3899: CALL_OW 45
3903: ST_TO_ADDR
// russianCargo := russianCargo union un ;
3904: LD_ADDR_EXP 49
3908: PUSH
3909: LD_EXP 49
3913: PUSH
3914: LD_VAR 0 3
3918: UNION
3919: ST_TO_ADDR
// SetCargo ( un , mat_oil , 100 ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 2
3927: PPUSH
3928: LD_INT 100
3930: PPUSH
3931: CALL_OW 290
// SetDir ( un , 4 ) ;
3935: LD_VAR 0 3
3939: PPUSH
3940: LD_INT 4
3942: PPUSH
3943: CALL_OW 233
// PlaceUnitXYR ( un , 147 , 103 , 4 , false ) ;
3947: LD_VAR 0 3
3951: PPUSH
3952: LD_INT 147
3954: PPUSH
3955: LD_INT 103
3957: PPUSH
3958: LD_INT 4
3960: PPUSH
3961: LD_INT 0
3963: PPUSH
3964: CALL_OW 50
// PrepareHuman ( false , 1 , Difficulty ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 1
3973: PPUSH
3974: LD_OWVAR 67
3978: PPUSH
3979: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
3983: CALL_OW 44
3987: PPUSH
3988: LD_VAR 0 3
3992: PPUSH
3993: CALL_OW 52
// end ;
3997: GO 3866
3999: POP
4000: POP
// uc_side := 3 ;
4001: LD_ADDR_OWVAR 20
4005: PUSH
4006: LD_INT 3
4008: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
4009: LD_ADDR_EXP 43
4013: PUSH
4014: LD_STRING Burlak
4016: PPUSH
4017: LD_INT 0
4019: PPUSH
4020: LD_STRING 
4022: PPUSH
4023: CALL 282 0 3
4027: ST_TO_ADDR
// for i := 1 to 2 do
4028: LD_ADDR_VAR 0 2
4032: PUSH
4033: DOUBLE
4034: LD_INT 1
4036: DEC
4037: ST_TO_ADDR
4038: LD_INT 2
4040: PUSH
4041: FOR_TO
4042: IFFALSE 4135
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4044: LD_INT 0
4046: PPUSH
4047: LD_INT 1
4049: PPUSH
4050: LD_OWVAR 67
4054: PUSH
4055: LD_INT 1
4057: PLUS
4058: PPUSH
4059: CALL_OW 380
// un := CreateHuman ;
4063: LD_ADDR_VAR 0 3
4067: PUSH
4068: CALL_OW 44
4072: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) [ i ] ) ;
4073: LD_VAR 0 3
4077: PPUSH
4078: LD_INT 22
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: EMPTY
4085: LIST
4086: LIST
4087: PUSH
4088: LD_INT 30
4090: PUSH
4091: LD_INT 32
4093: PUSH
4094: EMPTY
4095: LIST
4096: LIST
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PPUSH
4102: CALL_OW 69
4106: PUSH
4107: LD_VAR 0 2
4111: ARRAY
4112: PPUSH
4113: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4117: LD_ADDR_EXP 45
4121: PUSH
4122: LD_EXP 45
4126: PUSH
4127: LD_VAR 0 3
4131: UNION
4132: ST_TO_ADDR
// end ;
4133: GO 4041
4135: POP
4136: POP
// for i := 1 to 2 do
4137: LD_ADDR_VAR 0 2
4141: PUSH
4142: DOUBLE
4143: LD_INT 1
4145: DEC
4146: ST_TO_ADDR
4147: LD_INT 2
4149: PUSH
4150: FOR_TO
4151: IFFALSE 4242
// begin PrepareHuman ( false , 1 , Difficulty + 1 ) ;
4153: LD_INT 0
4155: PPUSH
4156: LD_INT 1
4158: PPUSH
4159: LD_OWVAR 67
4163: PUSH
4164: LD_INT 1
4166: PLUS
4167: PPUSH
4168: CALL_OW 380
// un := CreateHuman ;
4172: LD_ADDR_VAR 0 3
4176: PUSH
4177: CALL_OW 44
4181: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ) ;
4182: LD_VAR 0 3
4186: PPUSH
4187: LD_INT 22
4189: PUSH
4190: LD_INT 3
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PUSH
4197: LD_INT 30
4199: PUSH
4200: LD_INT 5
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PPUSH
4211: CALL_OW 69
4215: PUSH
4216: LD_INT 1
4218: ARRAY
4219: PPUSH
4220: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4224: LD_ADDR_EXP 45
4228: PUSH
4229: LD_EXP 45
4233: PUSH
4234: LD_VAR 0 3
4238: UNION
4239: ST_TO_ADDR
// end ;
4240: GO 4150
4242: POP
4243: POP
// for i := 1 to 2 do
4244: LD_ADDR_VAR 0 2
4248: PUSH
4249: DOUBLE
4250: LD_INT 1
4252: DEC
4253: ST_TO_ADDR
4254: LD_INT 2
4256: PUSH
4257: FOR_TO
4258: IFFALSE 4345
// begin PrepareHuman ( false , 4 , Difficulty ) ;
4260: LD_INT 0
4262: PPUSH
4263: LD_INT 4
4265: PPUSH
4266: LD_OWVAR 67
4270: PPUSH
4271: CALL_OW 380
// un := CreateHuman ;
4275: LD_ADDR_VAR 0 3
4279: PUSH
4280: CALL_OW 44
4284: ST_TO_ADDR
// PlaceHumanInUnit ( un , FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_half ] ] ) [ 1 ] ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_INT 22
4292: PUSH
4293: LD_INT 3
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: LD_INT 30
4302: PUSH
4303: LD_INT 7
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4327: LD_ADDR_EXP 45
4331: PUSH
4332: LD_EXP 45
4336: PUSH
4337: LD_VAR 0 3
4341: UNION
4342: ST_TO_ADDR
// end ;
4343: GO 4257
4345: POP
4346: POP
// PrepareHuman ( false , 2 , Difficulty ) ;
4347: LD_INT 0
4349: PPUSH
4350: LD_INT 2
4352: PPUSH
4353: LD_OWVAR 67
4357: PPUSH
4358: CALL_OW 380
// un := CreateHuman ;
4362: LD_ADDR_VAR 0 3
4366: PUSH
4367: CALL_OW 44
4371: ST_TO_ADDR
// PlaceHumanInUnit ( un , beria ) ;
4372: LD_VAR 0 3
4376: PPUSH
4377: LD_INT 106
4379: PPUSH
4380: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4384: LD_ADDR_EXP 45
4388: PUSH
4389: LD_EXP 45
4393: PUSH
4394: LD_VAR 0 3
4398: UNION
4399: ST_TO_ADDR
// for i := 1 to 3 do
4400: LD_ADDR_VAR 0 2
4404: PUSH
4405: DOUBLE
4406: LD_INT 1
4408: DEC
4409: ST_TO_ADDR
4410: LD_INT 3
4412: PUSH
4413: FOR_TO
4414: IFFALSE 4536
// begin bun := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
4416: LD_ADDR_VAR 0 6
4420: PUSH
4421: LD_INT 22
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 30
4433: PUSH
4434: LD_INT 31
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: PPUSH
4445: CALL_OW 69
4449: PUSH
4450: LD_VAR 0 2
4454: ARRAY
4455: ST_TO_ADDR
// PrepareHuman ( false , 1 , Difficulty ) ;
4456: LD_INT 0
4458: PPUSH
4459: LD_INT 1
4461: PPUSH
4462: LD_OWVAR 67
4466: PPUSH
4467: CALL_OW 380
// un := CreateHuman ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: CALL_OW 44
4480: ST_TO_ADDR
// SetDir ( un , GetDir ( bun ) + 3 ) ;
4481: LD_VAR 0 3
4485: PPUSH
4486: LD_VAR 0 6
4490: PPUSH
4491: CALL_OW 254
4495: PUSH
4496: LD_INT 3
4498: PLUS
4499: PPUSH
4500: CALL_OW 233
// PlaceHumanInUnit ( un , bun ) ;
4504: LD_VAR 0 3
4508: PPUSH
4509: LD_VAR 0 6
4513: PPUSH
4514: CALL_OW 52
// beriaBaseSquad := beriaBaseSquad union un ;
4518: LD_ADDR_EXP 45
4522: PUSH
4523: LD_EXP 45
4527: PUSH
4528: LD_VAR 0 3
4532: UNION
4533: ST_TO_ADDR
// end ;
4534: GO 4413
4536: POP
4537: POP
// russianOmicronAttackers := [ ] ;
4538: LD_ADDR_EXP 48
4542: PUSH
4543: EMPTY
4544: ST_TO_ADDR
// for i := 1 to 6 do
4545: LD_ADDR_VAR 0 2
4549: PUSH
4550: DOUBLE
4551: LD_INT 1
4553: DEC
4554: ST_TO_ADDR
4555: LD_INT 6
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4783
// begin PrepareTank ( 3 , 3 , [ ru_medium_wheeled , ru_heavy_wheeled ] [ i mod 2 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
4561: LD_INT 3
4563: PPUSH
4564: LD_INT 3
4566: PPUSH
4567: LD_INT 21
4569: PUSH
4570: LD_INT 23
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: PUSH
4577: LD_VAR 0 2
4581: PUSH
4582: LD_INT 2
4584: MOD
4585: PUSH
4586: LD_INT 1
4588: PLUS
4589: ARRAY
4590: PPUSH
4591: LD_INT 1
4593: PPUSH
4594: LD_INT 1
4596: PPUSH
4597: LD_INT 43
4599: PUSH
4600: LD_INT 44
4602: PUSH
4603: LD_INT 42
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: LIST
4610: PUSH
4611: LD_VAR 0 2
4615: PUSH
4616: LD_INT 3
4618: MOD
4619: PUSH
4620: LD_INT 1
4622: PLUS
4623: ARRAY
4624: PPUSH
4625: LD_INT 100
4627: PPUSH
4628: CALL 345 0 7
// un := CreateVehicle ;
4632: LD_ADDR_VAR 0 3
4636: PUSH
4637: CALL_OW 45
4641: ST_TO_ADDR
// SetDir ( un , [ 0 , 5 ] [ rand ( 1 , 2 ) ] ) ;
4642: LD_VAR 0 3
4646: PPUSH
4647: LD_INT 0
4649: PUSH
4650: LD_INT 5
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 1
4659: PPUSH
4660: LD_INT 2
4662: PPUSH
4663: CALL_OW 12
4667: ARRAY
4668: PPUSH
4669: CALL_OW 233
// russianOmicronAttackers := russianOmicronAttackers union un ;
4673: LD_ADDR_EXP 48
4677: PUSH
4678: LD_EXP 48
4682: PUSH
4683: LD_VAR 0 3
4687: UNION
4688: ST_TO_ADDR
// PlaceUnitXYR ( un , 127 , 89 , 7 , false ) ;
4689: LD_VAR 0 3
4693: PPUSH
4694: LD_INT 127
4696: PPUSH
4697: LD_INT 89
4699: PPUSH
4700: LD_INT 7
4702: PPUSH
4703: LD_INT 0
4705: PPUSH
4706: CALL_OW 50
// uc_side := 3 ;
4710: LD_ADDR_OWVAR 20
4714: PUSH
4715: LD_INT 3
4717: ST_TO_ADDR
// PrepareHuman ( false , 3 , 3 ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 3
4723: PPUSH
4724: LD_INT 3
4726: PPUSH
4727: CALL_OW 380
// un := CreateHuman ;
4731: LD_ADDR_VAR 0 3
4735: PUSH
4736: CALL_OW 44
4740: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4741: LD_ADDR_EXP 48
4745: PUSH
4746: LD_EXP 48
4750: PUSH
4751: LD_VAR 0 3
4755: UNION
4756: ST_TO_ADDR
// PlaceHumanInUnit ( un , russianOmicronAttackers [ russianOmicronAttackers - 1 ] ) ;
4757: LD_VAR 0 3
4761: PPUSH
4762: LD_EXP 48
4766: PUSH
4767: LD_EXP 48
4771: PUSH
4772: LD_INT 1
4774: MINUS
4775: ARRAY
4776: PPUSH
4777: CALL_OW 52
// end ;
4781: GO 4558
4783: POP
4784: POP
// for i := 1 to 3 do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: DOUBLE
4791: LD_INT 1
4793: DEC
4794: ST_TO_ADDR
4795: LD_INT 3
4797: PUSH
4798: FOR_TO
4799: IFFALSE 4865
// begin PrepareHuman ( false , 1 , Difficulty ) ;
4801: LD_INT 0
4803: PPUSH
4804: LD_INT 1
4806: PPUSH
4807: LD_OWVAR 67
4811: PPUSH
4812: CALL_OW 380
// un := CreateHuman ;
4816: LD_ADDR_VAR 0 3
4820: PUSH
4821: CALL_OW 44
4825: ST_TO_ADDR
// russianOmicronAttackers := russianOmicronAttackers union un ;
4826: LD_ADDR_EXP 48
4830: PUSH
4831: LD_EXP 48
4835: PUSH
4836: LD_VAR 0 3
4840: UNION
4841: ST_TO_ADDR
// PlaceUnitXYR ( un , 91 , 60 , 3 , false ) ;
4842: LD_VAR 0 3
4846: PPUSH
4847: LD_INT 91
4849: PPUSH
4850: LD_INT 60
4852: PPUSH
4853: LD_INT 3
4855: PPUSH
4856: LD_INT 0
4858: PPUSH
4859: CALL_OW 50
// end ;
4863: GO 4798
4865: POP
4866: POP
// end ;
4867: LD_VAR 0 1
4871: RET
// every 0 0$3 do var i ;
4872: GO 4874
4874: DISABLE
4875: LD_INT 0
4877: PPUSH
// begin for i := 1 to 4 do
4878: LD_ADDR_VAR 0 1
4882: PUSH
4883: DOUBLE
4884: LD_INT 1
4886: DEC
4887: ST_TO_ADDR
4888: LD_INT 4
4890: PUSH
4891: FOR_TO
4892: IFFALSE 4911
// ComExitBuilding ( grishkoSquad [ i ] ) ;
4894: LD_EXP 46
4898: PUSH
4899: LD_VAR 0 1
4903: ARRAY
4904: PPUSH
4905: CALL_OW 122
4909: GO 4891
4911: POP
4912: POP
// wait ( 3 ) ;
4913: LD_INT 3
4915: PPUSH
4916: CALL_OW 67
// AddComEnterUnit ( grishkoSquad [ 1 ] , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) , grishkoSquad [ 1 ] ) ) ;
4920: LD_EXP 46
4924: PUSH
4925: LD_INT 1
4927: ARRAY
4928: PPUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 6
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: PPUSH
4958: LD_EXP 46
4962: PUSH
4963: LD_INT 1
4965: ARRAY
4966: PPUSH
4967: CALL_OW 74
4971: PPUSH
4972: CALL_OW 180
// ComMoveXY ( grishkoSquad [ 2 ] , 211 , 107 ) ;
4976: LD_EXP 46
4980: PUSH
4981: LD_INT 2
4983: ARRAY
4984: PPUSH
4985: LD_INT 211
4987: PPUSH
4988: LD_INT 107
4990: PPUSH
4991: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 2 ] , 209 , 106 ) ;
4995: LD_EXP 46
4999: PUSH
5000: LD_INT 2
5002: ARRAY
5003: PPUSH
5004: LD_INT 209
5006: PPUSH
5007: LD_INT 106
5009: PPUSH
5010: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 3 ] , 209 , 103 ) ;
5014: LD_EXP 46
5018: PUSH
5019: LD_INT 3
5021: ARRAY
5022: PPUSH
5023: LD_INT 209
5025: PPUSH
5026: LD_INT 103
5028: PPUSH
5029: CALL_OW 111
// AddComTurnXY ( grishkoSquad [ 3 ] , 209 , 106 ) ;
5033: LD_EXP 46
5037: PUSH
5038: LD_INT 3
5040: ARRAY
5041: PPUSH
5042: LD_INT 209
5044: PPUSH
5045: LD_INT 106
5047: PPUSH
5048: CALL_OW 178
// ComMoveXY ( grishkoSquad [ 4 ] , 227 , 117 ) ;
5052: LD_EXP 46
5056: PUSH
5057: LD_INT 4
5059: ARRAY
5060: PPUSH
5061: LD_INT 227
5063: PPUSH
5064: LD_INT 117
5066: PPUSH
5067: CALL_OW 111
// AddComHold ( grishkoSquad [ 4 ] ) ;
5071: LD_EXP 46
5075: PUSH
5076: LD_INT 4
5078: ARRAY
5079: PPUSH
5080: CALL_OW 200
// repeat wait ( 0 0$20 ) ;
5084: LD_INT 700
5086: PPUSH
5087: CALL_OW 67
// for i := 3 downto 2 do
5091: LD_ADDR_VAR 0 1
5095: PUSH
5096: DOUBLE
5097: LD_INT 3
5099: INC
5100: ST_TO_ADDR
5101: LD_INT 2
5103: PUSH
5104: FOR_DOWNTO
5105: IFFALSE 5272
// begin AddComAgressiveMove ( grishkoSquad [ i ] , 200 , 91 ) ;
5107: LD_EXP 46
5111: PUSH
5112: LD_VAR 0 1
5116: ARRAY
5117: PPUSH
5118: LD_INT 200
5120: PPUSH
5121: LD_INT 91
5123: PPUSH
5124: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5128: LD_EXP 46
5132: PUSH
5133: LD_VAR 0 1
5137: ARRAY
5138: PPUSH
5139: LD_INT 210
5141: PPUSH
5142: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 224 , 93 ) ;
5146: LD_EXP 46
5150: PUSH
5151: LD_VAR 0 1
5155: ARRAY
5156: PPUSH
5157: LD_INT 224
5159: PPUSH
5160: LD_INT 93
5162: PPUSH
5163: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5167: LD_EXP 46
5171: PUSH
5172: LD_VAR 0 1
5176: ARRAY
5177: PPUSH
5178: LD_INT 210
5180: PPUSH
5181: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 239 , 123 ) ;
5185: LD_EXP 46
5189: PUSH
5190: LD_VAR 0 1
5194: ARRAY
5195: PPUSH
5196: LD_INT 239
5198: PPUSH
5199: LD_INT 123
5201: PPUSH
5202: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$6 ) ;
5206: LD_EXP 46
5210: PUSH
5211: LD_VAR 0 1
5215: ARRAY
5216: PPUSH
5217: LD_INT 210
5219: PPUSH
5220: CALL_OW 202
// AddComAgressiveMove ( grishkoSquad [ i ] , 212 , 105 ) ;
5224: LD_EXP 46
5228: PUSH
5229: LD_VAR 0 1
5233: ARRAY
5234: PPUSH
5235: LD_INT 212
5237: PPUSH
5238: LD_INT 105
5240: PPUSH
5241: CALL_OW 174
// AddComWait ( grishkoSquad [ i ] , 0 0$20 ) ;
5245: LD_EXP 46
5249: PUSH
5250: LD_VAR 0 1
5254: ARRAY
5255: PPUSH
5256: LD_INT 700
5258: PPUSH
5259: CALL_OW 202
// wait ( 0 0$30 ) ;
5263: LD_INT 1050
5265: PPUSH
5266: CALL_OW 67
// end ;
5270: GO 5104
5272: POP
5273: POP
// until not activeGrishkoAI ;
5274: LD_EXP 10
5278: NOT
5279: IFFALSE 5084
// ComMoveXY ( grishkoSquad , 221 , 110 ) ;
5281: LD_EXP 46
5285: PPUSH
5286: LD_INT 221
5288: PPUSH
5289: LD_INT 110
5291: PPUSH
5292: CALL_OW 111
// AddComMoveXY ( grishkoSquad , 228 , 115 ) ;
5296: LD_EXP 46
5300: PPUSH
5301: LD_INT 228
5303: PPUSH
5304: LD_INT 115
5306: PPUSH
5307: CALL_OW 171
// AddComHold ( grishkoSquad ) ;
5311: LD_EXP 46
5315: PPUSH
5316: CALL_OW 200
// end ;
5320: PPOPN 1
5322: END
// every 0 0$1 trigger allowToPatrol do var un , i , j , patrol ;
5323: LD_EXP 12
5327: IFFALSE 5945
5329: GO 5331
5331: DISABLE
5332: LD_INT 0
5334: PPUSH
5335: PPUSH
5336: PPUSH
5337: PPUSH
// begin uc_side := 6 ;
5338: LD_ADDR_OWVAR 20
5342: PUSH
5343: LD_INT 6
5345: ST_TO_ADDR
// uc_nation := 3 ;
5346: LD_ADDR_OWVAR 21
5350: PUSH
5351: LD_INT 3
5353: ST_TO_ADDR
// for i := 1 to 3 do
5354: LD_ADDR_VAR 0 2
5358: PUSH
5359: DOUBLE
5360: LD_INT 1
5362: DEC
5363: ST_TO_ADDR
5364: LD_INT 3
5366: PUSH
5367: FOR_TO
5368: IFFALSE 5477
// begin PrepareHuman ( false , 1 , [ 2 , 3 , 4 ] [ Difficulty ] ) ;
5370: LD_INT 0
5372: PPUSH
5373: LD_INT 1
5375: PPUSH
5376: LD_INT 2
5378: PUSH
5379: LD_INT 3
5381: PUSH
5382: LD_INT 4
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: PUSH
5390: LD_OWVAR 67
5394: ARRAY
5395: PPUSH
5396: CALL_OW 380
// un := CreateHuman ;
5400: LD_ADDR_VAR 0 1
5404: PUSH
5405: CALL_OW 44
5409: ST_TO_ADDR
// russianPatrol := russianPatrol union un ;
5410: LD_ADDR_EXP 47
5414: PUSH
5415: LD_EXP 47
5419: PUSH
5420: LD_VAR 0 1
5424: UNION
5425: ST_TO_ADDR
// SetTag ( un , 1 ) ;
5426: LD_VAR 0 1
5430: PPUSH
5431: LD_INT 1
5433: PPUSH
5434: CALL_OW 109
// PlaceUnitArea ( un , southRoadSpawn , false ) ;
5438: LD_VAR 0 1
5442: PPUSH
5443: LD_INT 11
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// ComMoveXY ( un , 210 , 159 ) ;
5453: LD_VAR 0 1
5457: PPUSH
5458: LD_INT 210
5460: PPUSH
5461: LD_INT 159
5463: PPUSH
5464: CALL_OW 111
// wait ( 0 0$2 ) ;
5468: LD_INT 70
5470: PPUSH
5471: CALL_OW 67
// end ;
5475: GO 5367
5477: POP
5478: POP
// patrol := [ [ [ 172 , 76 ] , [ 150 , 38 ] , [ 148 , 9 ] , [ 165 , 38 ] ] , [ [ 191 , 77 ] , [ 168 , 42 ] , [ 166 , 11 ] , [ 151 , 12 ] ] , [ [ 221 , 88 ] , [ 217 , 64 ] , [ 232 , 66 ] , [ 200 , 56 ] ] ] ;
5479: LD_ADDR_VAR 0 4
5483: PUSH
5484: LD_INT 172
5486: PUSH
5487: LD_INT 76
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: LD_INT 150
5496: PUSH
5497: LD_INT 38
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 148
5506: PUSH
5507: LD_INT 9
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 165
5516: PUSH
5517: LD_INT 38
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PUSH
5530: LD_INT 191
5532: PUSH
5533: LD_INT 77
5535: PUSH
5536: EMPTY
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 168
5542: PUSH
5543: LD_INT 42
5545: PUSH
5546: EMPTY
5547: LIST
5548: LIST
5549: PUSH
5550: LD_INT 166
5552: PUSH
5553: LD_INT 11
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PUSH
5560: LD_INT 151
5562: PUSH
5563: LD_INT 12
5565: PUSH
5566: EMPTY
5567: LIST
5568: LIST
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 221
5578: PUSH
5579: LD_INT 88
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 217
5588: PUSH
5589: LD_INT 64
5591: PUSH
5592: EMPTY
5593: LIST
5594: LIST
5595: PUSH
5596: LD_INT 232
5598: PUSH
5599: LD_INT 66
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: PUSH
5606: LD_INT 200
5608: PUSH
5609: LD_INT 56
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: EMPTY
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: LIST
5626: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5627: LD_INT 35
5629: PPUSH
5630: CALL_OW 67
// for i := 1 to patrol do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 4
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5909
// begin if GetLives ( russianPatrol [ i ] ) < 990 and GetTag ( russianPatrol [ i ] ) = 1 then
5652: LD_EXP 47
5656: PUSH
5657: LD_VAR 0 2
5661: ARRAY
5662: PPUSH
5663: CALL_OW 256
5667: PUSH
5668: LD_INT 990
5670: LESS
5671: PUSH
5672: LD_EXP 47
5676: PUSH
5677: LD_VAR 0 2
5681: ARRAY
5682: PPUSH
5683: CALL_OW 110
5687: PUSH
5688: LD_INT 1
5690: EQUAL
5691: AND
5692: IFFALSE 5720
// begin spottedByPatrol := true ;
5694: LD_ADDR_EXP 7
5698: PUSH
5699: LD_INT 1
5701: ST_TO_ADDR
// SetTag ( russianPatrol [ i ] , 2 ) ;
5702: LD_EXP 47
5706: PUSH
5707: LD_VAR 0 2
5711: ARRAY
5712: PPUSH
5713: LD_INT 2
5715: PPUSH
5716: CALL_OW 109
// end ; if GetTag ( russianPatrol [ i ] ) = 2 then
5720: LD_EXP 47
5724: PUSH
5725: LD_VAR 0 2
5729: ARRAY
5730: PPUSH
5731: CALL_OW 110
5735: PUSH
5736: LD_INT 2
5738: EQUAL
5739: IFFALSE 5807
// begin ComMoveXY ( russianPatrol [ i ] , 166 , 101 ) ;
5741: LD_EXP 47
5745: PUSH
5746: LD_VAR 0 2
5750: ARRAY
5751: PPUSH
5752: LD_INT 166
5754: PPUSH
5755: LD_INT 101
5757: PPUSH
5758: CALL_OW 111
// if GetDistUnits ( russianPatrol [ i ] , kirov ) < 10 then
5762: LD_EXP 47
5766: PUSH
5767: LD_VAR 0 2
5771: ARRAY
5772: PPUSH
5773: LD_INT 71
5775: PPUSH
5776: CALL_OW 296
5780: PUSH
5781: LD_INT 10
5783: LESS
5784: IFFALSE 5805
// russianAlert := [ russianPatrol [ i ] ] ;
5786: LD_ADDR_EXP 9
5790: PUSH
5791: LD_EXP 47
5795: PUSH
5796: LD_VAR 0 2
5800: ARRAY
5801: PUSH
5802: EMPTY
5803: LIST
5804: ST_TO_ADDR
// continue ;
5805: GO 5649
// end ; if not HasTask ( russianPatrol [ i ] ) then
5807: LD_EXP 47
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: CALL_OW 314
5822: NOT
5823: IFFALSE 5907
// for j in patrol [ i ] do
5825: LD_ADDR_VAR 0 3
5829: PUSH
5830: LD_VAR 0 4
5834: PUSH
5835: LD_VAR 0 2
5839: ARRAY
5840: PUSH
5841: FOR_IN
5842: IFFALSE 5905
// begin AddComWait ( russianPatrol [ i ] , rand ( 0 0$1 , 0 0$5 ) ) ;
5844: LD_EXP 47
5848: PUSH
5849: LD_VAR 0 2
5853: ARRAY
5854: PPUSH
5855: LD_INT 35
5857: PPUSH
5858: LD_INT 175
5860: PPUSH
5861: CALL_OW 12
5865: PPUSH
5866: CALL_OW 202
// AddComAgressiveMove ( russianPatrol [ i ] , j [ 1 ] , j [ 2 ] ) ;
5870: LD_EXP 47
5874: PUSH
5875: LD_VAR 0 2
5879: ARRAY
5880: PPUSH
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 1
5888: ARRAY
5889: PPUSH
5890: LD_VAR 0 3
5894: PUSH
5895: LD_INT 2
5897: ARRAY
5898: PPUSH
5899: CALL_OW 174
// end ;
5903: GO 5841
5905: POP
5906: POP
// end ;
5907: GO 5649
5909: POP
5910: POP
// until not russianPatrol or russianAlert ;
5911: LD_EXP 47
5915: NOT
5916: PUSH
5917: LD_EXP 9
5921: OR
5922: IFFALSE 5627
// if russianPatrol then
5924: LD_EXP 47
5928: IFFALSE 5945
// ComAgressiveMove ( russianPatrol , 161 , 107 ) ;
5930: LD_EXP 47
5934: PPUSH
5935: LD_INT 161
5937: PPUSH
5938: LD_INT 107
5940: PPUSH
5941: CALL_OW 114
// end ;
5945: PPOPN 4
5947: END
// every 0 0$1 trigger startAttackOnOmicron and not omicronFall do var i , filter , tmp , enemy , x ;
5948: LD_EXP 6
5952: PUSH
5953: LD_EXP 13
5957: NOT
5958: AND
5959: IFFALSE 6400
5961: GO 5963
5963: DISABLE
5964: LD_INT 0
5966: PPUSH
5967: PPUSH
5968: PPUSH
5969: PPUSH
5970: PPUSH
// begin enable ;
5971: ENABLE
// filter := UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_EXP 48
5981: PPUSH
5982: LD_INT 21
5984: PUSH
5985: LD_INT 2
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: PPUSH
5992: CALL_OW 72
5996: ST_TO_ADDR
// enemy := FilterAllUnits ( [ f_side , 4 ] ) ;
5997: LD_ADDR_VAR 0 4
6001: PUSH
6002: LD_INT 22
6004: PUSH
6005: LD_INT 4
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// for i in filter do
6017: LD_ADDR_VAR 0 1
6021: PUSH
6022: LD_VAR 0 2
6026: PUSH
6027: FOR_IN
6028: IFFALSE 6398
// begin tmp := IsDrivenBy ( i ) ;
6030: LD_ADDR_VAR 0 3
6034: PUSH
6035: LD_VAR 0 1
6039: PPUSH
6040: CALL_OW 311
6044: ST_TO_ADDR
// if not tmp then
6045: LD_VAR 0 3
6049: NOT
6050: IFFALSE 6054
// continue ;
6052: GO 6027
// if GetFuel ( i ) > 90 and GetTag ( i ) = 2 then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 261
6063: PUSH
6064: LD_INT 90
6066: GREATER
6067: PUSH
6068: LD_VAR 0 1
6072: PPUSH
6073: CALL_OW 110
6077: PUSH
6078: LD_INT 2
6080: EQUAL
6081: AND
6082: IFFALSE 6098
// SetTag ( i , 0 ) else
6084: LD_VAR 0 1
6088: PPUSH
6089: LD_INT 0
6091: PPUSH
6092: CALL_OW 109
6096: GO 6149
// if GetTag ( i ) = 2 then
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 110
6107: PUSH
6108: LD_INT 2
6110: EQUAL
6111: IFFALSE 6149
// begin x := rand ( 1 , 2 ) ;
6113: LD_ADDR_VAR 0 5
6117: PUSH
6118: LD_INT 1
6120: PPUSH
6121: LD_INT 2
6123: PPUSH
6124: CALL_OW 12
6128: ST_TO_ADDR
// AddComMoveUnit ( i , russianCargo [ x ] ) ;
6129: LD_VAR 0 1
6133: PPUSH
6134: LD_EXP 49
6138: PUSH
6139: LD_VAR 0 5
6143: ARRAY
6144: PPUSH
6145: CALL_OW 172
// end ; if GetLives ( i ) >= 600 and not GetTag ( i ) then
6149: LD_VAR 0 1
6153: PPUSH
6154: CALL_OW 256
6158: PUSH
6159: LD_INT 600
6161: GREATEREQUAL
6162: PUSH
6163: LD_VAR 0 1
6167: PPUSH
6168: CALL_OW 110
6172: NOT
6173: AND
6174: IFFALSE 6200
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
6176: LD_VAR 0 1
6180: PPUSH
6181: LD_VAR 0 4
6185: PPUSH
6186: LD_VAR 0 1
6190: PPUSH
6191: CALL_OW 74
6195: PPUSH
6196: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
6200: LD_VAR 0 1
6204: PPUSH
6205: CALL_OW 256
6209: PUSH
6210: LD_INT 600
6212: LESS
6213: PUSH
6214: LD_VAR 0 1
6218: PPUSH
6219: CALL_OW 110
6223: NOT
6224: AND
6225: IFFALSE 6254
// begin SetTag ( i , 1 ) ;
6227: LD_VAR 0 1
6231: PPUSH
6232: LD_INT 1
6234: PPUSH
6235: CALL_OW 109
// ComMoveXY ( i , 62 , 22 ) ;
6239: LD_VAR 0 1
6243: PPUSH
6244: LD_INT 62
6246: PPUSH
6247: LD_INT 22
6249: PPUSH
6250: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 62 , 22 ) < 6 and tmp then
6254: LD_VAR 0 1
6258: PPUSH
6259: CALL_OW 110
6263: PUSH
6264: LD_INT 1
6266: EQUAL
6267: PUSH
6268: LD_VAR 0 1
6272: PPUSH
6273: LD_INT 62
6275: PPUSH
6276: LD_INT 22
6278: PPUSH
6279: CALL_OW 297
6283: PUSH
6284: LD_INT 6
6286: LESS
6287: AND
6288: PUSH
6289: LD_VAR 0 3
6293: AND
6294: IFFALSE 6396
// begin ComExitVehicle ( tmp ) ;
6296: LD_VAR 0 3
6300: PPUSH
6301: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
6305: LD_VAR 0 3
6309: PPUSH
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
6319: LD_INT 35
6321: PPUSH
6322: CALL_OW 67
// until GetLives ( i ) = 1000 ;
6326: LD_VAR 0 1
6330: PPUSH
6331: CALL_OW 256
6335: PUSH
6336: LD_INT 1000
6338: EQUAL
6339: IFFALSE 6319
// ComEnterUnit ( tmp , i ) ;
6341: LD_VAR 0 3
6345: PPUSH
6346: LD_VAR 0 1
6350: PPUSH
6351: CALL_OW 120
// if GetFuel ( i ) <= 90 then
6355: LD_VAR 0 1
6359: PPUSH
6360: CALL_OW 261
6364: PUSH
6365: LD_INT 90
6367: LESSEQUAL
6368: IFFALSE 6384
// SetTag ( i , 2 ) else
6370: LD_VAR 0 1
6374: PPUSH
6375: LD_INT 2
6377: PPUSH
6378: CALL_OW 109
6382: GO 6396
// SetTag ( i , 0 ) ;
6384: LD_VAR 0 1
6388: PPUSH
6389: LD_INT 0
6391: PPUSH
6392: CALL_OW 109
// end ; end ;
6396: GO 6027
6398: POP
6399: POP
// end ;
6400: PPOPN 5
6402: END
// every 0 0$2 trigger retreatFromOmicron do var i , tmp ;
6403: LD_EXP 20
6407: IFFALSE 6609
6409: GO 6411
6411: DISABLE
6412: LD_INT 0
6414: PPUSH
6415: PPUSH
// begin ComMoveXY ( russianCargo , 79 , 155 ) ;
6416: LD_EXP 49
6420: PPUSH
6421: LD_INT 79
6423: PPUSH
6424: LD_INT 155
6426: PPUSH
6427: CALL_OW 111
// AddComMoveToArea ( russianCargo , westEscapeArea ) ;
6431: LD_EXP 49
6435: PPUSH
6436: LD_INT 16
6438: PPUSH
6439: CALL_OW 173
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6443: LD_ADDR_VAR 0 2
6447: PUSH
6448: LD_EXP 48
6452: PPUSH
6453: LD_INT 50
6455: PUSH
6456: EMPTY
6457: LIST
6458: PPUSH
6459: CALL_OW 72
6463: ST_TO_ADDR
// for i in tmp do
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_VAR 0 2
6473: PUSH
6474: FOR_IN
6475: IFFALSE 6509
// begin ComAgressiveMove ( i , 123 , 60 ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 123
6484: PPUSH
6485: LD_INT 60
6487: PPUSH
6488: CALL_OW 114
// AddComAgressiveMove ( i , 153 , 103 ) ;
6492: LD_VAR 0 1
6496: PPUSH
6497: LD_INT 153
6499: PPUSH
6500: LD_INT 103
6502: PPUSH
6503: CALL_OW 174
// end ;
6507: GO 6474
6509: POP
6510: POP
// repeat wait ( 0 0$1 ) ;
6511: LD_INT 35
6513: PPUSH
6514: CALL_OW 67
// tmp := UnitFilter ( russianOmicronAttackers , [ f_ok ] ) ;
6518: LD_ADDR_VAR 0 2
6522: PUSH
6523: LD_EXP 48
6527: PPUSH
6528: LD_INT 50
6530: PUSH
6531: EMPTY
6532: LIST
6533: PPUSH
6534: CALL_OW 72
6538: ST_TO_ADDR
// for i in tmp do
6539: LD_ADDR_VAR 0 1
6543: PUSH
6544: LD_VAR 0 2
6548: PUSH
6549: FOR_IN
6550: IFFALSE 6600
// if not HasTask ( i ) then
6552: LD_VAR 0 1
6556: PPUSH
6557: CALL_OW 314
6561: NOT
6562: IFFALSE 6598
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) until not tmp ;
6564: LD_VAR 0 1
6568: PPUSH
6569: LD_INT 81
6571: PUSH
6572: LD_INT 3
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PPUSH
6579: CALL_OW 69
6583: PPUSH
6584: LD_VAR 0 1
6588: PPUSH
6589: CALL_OW 74
6593: PPUSH
6594: CALL_OW 115
6598: GO 6549
6600: POP
6601: POP
6602: LD_VAR 0 2
6606: NOT
6607: IFFALSE 6511
// end ;
6609: PPOPN 2
6611: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do var i ;
6612: LD_INT 22
6614: PUSH
6615: LD_INT 3
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 32
6624: PUSH
6625: LD_INT 1
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PPUSH
6636: CALL_OW 69
6640: IFFALSE 6719
6642: GO 6644
6644: DISABLE
6645: LD_INT 0
6647: PPUSH
// begin enable ;
6648: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_engine , engine_combustion ] ] ) do
6649: LD_ADDR_VAR 0 1
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_INT 3
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 32
6666: PUSH
6667: LD_INT 1
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PPUSH
6678: CALL_OW 69
6682: PUSH
6683: FOR_IN
6684: IFFALSE 6717
// if GetFuel ( i ) < 1 then
6686: LD_VAR 0 1
6690: PPUSH
6691: CALL_OW 261
6695: PUSH
6696: LD_INT 1
6698: LESS
6699: IFFALSE 6715
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: CALL_OW 311
6710: PPUSH
6711: CALL_OW 121
6715: GO 6683
6717: POP
6718: POP
// end ; end_of_file
6719: PPOPN 1
6721: END
// export omicronSquad ; export function PrepareAmerican ; var i , un ; begin
6722: LD_INT 0
6724: PPUSH
6725: PPUSH
6726: PPUSH
// SetBName ( omikron , omikron ) ;
6727: LD_INT 64
6729: PPUSH
6730: LD_STRING omikron
6732: PPUSH
6733: CALL_OW 500
// uc_side := 4 ;
6737: LD_ADDR_OWVAR 20
6741: PUSH
6742: LD_INT 4
6744: ST_TO_ADDR
// uc_nation := 1 ;
6745: LD_ADDR_OWVAR 21
6749: PUSH
6750: LD_INT 1
6752: ST_TO_ADDR
// omicronSquad := [ ] ;
6753: LD_ADDR_EXP 51
6757: PUSH
6758: EMPTY
6759: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) do
6760: LD_ADDR_VAR 0 2
6764: PUSH
6765: LD_INT 22
6767: PUSH
6768: LD_INT 4
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: LD_INT 30
6780: PUSH
6781: LD_INT 32
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 30
6790: PUSH
6791: LD_INT 31
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PPUSH
6807: CALL_OW 69
6811: PUSH
6812: FOR_IN
6813: IFFALSE 6870
// begin PrepareHuman ( false , 1 , 1 ) ;
6815: LD_INT 0
6817: PPUSH
6818: LD_INT 1
6820: PPUSH
6821: LD_INT 1
6823: PPUSH
6824: CALL_OW 380
// un := CreateHuman ;
6828: LD_ADDR_VAR 0 3
6832: PUSH
6833: CALL_OW 44
6837: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6838: LD_ADDR_EXP 51
6842: PUSH
6843: LD_EXP 51
6847: PUSH
6848: LD_VAR 0 3
6852: UNION
6853: ST_TO_ADDR
// PlaceHumanInUnit ( un , i ) ;
6854: LD_VAR 0 3
6858: PPUSH
6859: LD_VAR 0 2
6863: PPUSH
6864: CALL_OW 52
// end ;
6868: GO 6812
6870: POP
6871: POP
// for i := 1 to 3 do
6872: LD_ADDR_VAR 0 2
6876: PUSH
6877: DOUBLE
6878: LD_INT 1
6880: DEC
6881: ST_TO_ADDR
6882: LD_INT 3
6884: PUSH
6885: FOR_TO
6886: IFFALSE 6941
// begin PrepareHuman ( false , 2 , 2 ) ;
6888: LD_INT 0
6890: PPUSH
6891: LD_INT 2
6893: PPUSH
6894: LD_INT 2
6896: PPUSH
6897: CALL_OW 380
// un := CreateHuman ;
6901: LD_ADDR_VAR 0 3
6905: PUSH
6906: CALL_OW 44
6910: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6911: LD_ADDR_EXP 51
6915: PUSH
6916: LD_EXP 51
6920: PUSH
6921: LD_VAR 0 3
6925: UNION
6926: ST_TO_ADDR
// PlaceHumanInUnit ( un , omikron ) ;
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_INT 64
6934: PPUSH
6935: CALL_OW 52
// end ;
6939: GO 6885
6941: POP
6942: POP
// for i := 1 to 2 do
6943: LD_ADDR_VAR 0 2
6947: PUSH
6948: DOUBLE
6949: LD_INT 1
6951: DEC
6952: ST_TO_ADDR
6953: LD_INT 2
6955: PUSH
6956: FOR_TO
6957: IFFALSE 7096
// begin PrepareTank ( 4 , 1 , us_medium_wheeled , engine_solar , control_manual , us_light_gun , 100 ) ;
6959: LD_INT 4
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: LD_INT 2
6967: PPUSH
6968: LD_INT 2
6970: PPUSH
6971: LD_INT 1
6973: PPUSH
6974: LD_INT 3
6976: PPUSH
6977: LD_INT 100
6979: PPUSH
6980: CALL 345 0 7
// un := CreateVehicle ;
6984: LD_ADDR_VAR 0 3
6988: PUSH
6989: CALL_OW 45
6993: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
6994: LD_ADDR_EXP 51
6998: PUSH
6999: LD_EXP 51
7003: PUSH
7004: LD_VAR 0 3
7008: UNION
7009: ST_TO_ADDR
// PlaceUnitXYR ( un , 28 , 37 , 6 , false ) ;
7010: LD_VAR 0 3
7014: PPUSH
7015: LD_INT 28
7017: PPUSH
7018: LD_INT 37
7020: PPUSH
7021: LD_INT 6
7023: PPUSH
7024: LD_INT 0
7026: PPUSH
7027: CALL_OW 50
// PrepareHuman ( false , 3 , 2 ) ;
7031: LD_INT 0
7033: PPUSH
7034: LD_INT 3
7036: PPUSH
7037: LD_INT 2
7039: PPUSH
7040: CALL_OW 380
// un := CreateHuman ;
7044: LD_ADDR_VAR 0 3
7048: PUSH
7049: CALL_OW 44
7053: ST_TO_ADDR
// omicronSquad := omicronSquad union un ;
7054: LD_ADDR_EXP 51
7058: PUSH
7059: LD_EXP 51
7063: PUSH
7064: LD_VAR 0 3
7068: UNION
7069: ST_TO_ADDR
// PlaceHumanInUnit ( un , omicronSquad [ omicronSquad - 1 ] ) ;
7070: LD_VAR 0 3
7074: PPUSH
7075: LD_EXP 51
7079: PUSH
7080: LD_EXP 51
7084: PUSH
7085: LD_INT 1
7087: MINUS
7088: ARRAY
7089: PPUSH
7090: CALL_OW 52
// end ;
7094: GO 6956
7096: POP
7097: POP
// end ;
7098: LD_VAR 0 1
7102: RET
// export function SmallAmericanReinforcements ; var i , un , tmp ; begin
7103: LD_INT 0
7105: PPUSH
7106: PPUSH
7107: PPUSH
7108: PPUSH
// uc_side := 4 ;
7109: LD_ADDR_OWVAR 20
7113: PUSH
7114: LD_INT 4
7116: ST_TO_ADDR
// uc_nation := 1 ;
7117: LD_ADDR_OWVAR 21
7121: PUSH
7122: LD_INT 1
7124: ST_TO_ADDR
// tmp := [ ] ;
7125: LD_ADDR_VAR 0 4
7129: PUSH
7130: EMPTY
7131: ST_TO_ADDR
// PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 77 ) ;
7132: LD_INT 4
7134: PPUSH
7135: LD_INT 1
7137: PPUSH
7138: LD_INT 2
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: LD_INT 1
7146: PPUSH
7147: LD_INT 4
7149: PPUSH
7150: LD_INT 77
7152: PPUSH
7153: CALL 345 0 7
// un := CreateVehicle ;
7157: LD_ADDR_VAR 0 3
7161: PUSH
7162: CALL_OW 45
7166: ST_TO_ADDR
// tmp := tmp union un ;
7167: LD_ADDR_VAR 0 4
7171: PUSH
7172: LD_VAR 0 4
7176: PUSH
7177: LD_VAR 0 3
7181: UNION
7182: ST_TO_ADDR
// SetDir ( un , 2 ) ;
7183: LD_VAR 0 3
7187: PPUSH
7188: LD_INT 2
7190: PPUSH
7191: CALL_OW 233
// PlaceUnitXY ( un , 106 , 3 , false ) ;
7195: LD_VAR 0 3
7199: PPUSH
7200: LD_INT 106
7202: PPUSH
7203: LD_INT 3
7205: PPUSH
7206: LD_INT 0
7208: PPUSH
7209: CALL_OW 48
// PrepareHuman ( false , 3 , 2 ) ;
7213: LD_INT 0
7215: PPUSH
7216: LD_INT 3
7218: PPUSH
7219: LD_INT 2
7221: PPUSH
7222: CALL_OW 380
// un := CreateHuman ;
7226: LD_ADDR_VAR 0 3
7230: PUSH
7231: CALL_OW 44
7235: ST_TO_ADDR
// tmp := tmp union un ;
7236: LD_ADDR_VAR 0 4
7240: PUSH
7241: LD_VAR 0 4
7245: PUSH
7246: LD_VAR 0 3
7250: UNION
7251: ST_TO_ADDR
// PlaceHumanInUnit ( un , tmp [ tmp - 1 ] ) ;
7252: LD_VAR 0 3
7256: PPUSH
7257: LD_VAR 0 4
7261: PUSH
7262: LD_VAR 0 4
7266: PUSH
7267: LD_INT 1
7269: MINUS
7270: ARRAY
7271: PPUSH
7272: CALL_OW 52
// ComMoveXY ( un , 109 , 9 ) ;
7276: LD_VAR 0 3
7280: PPUSH
7281: LD_INT 109
7283: PPUSH
7284: LD_INT 9
7286: PPUSH
7287: CALL_OW 111
// wait ( 0 0$1 ) ;
7291: LD_INT 35
7293: PPUSH
7294: CALL_OW 67
// for i := 1 to 2 do
7298: LD_ADDR_VAR 0 2
7302: PUSH
7303: DOUBLE
7304: LD_INT 1
7306: DEC
7307: ST_TO_ADDR
7308: LD_INT 2
7310: PUSH
7311: FOR_TO
7312: IFFALSE 7376
// begin PrepareHuman ( false , 1 , 2 ) ;
7314: LD_INT 0
7316: PPUSH
7317: LD_INT 1
7319: PPUSH
7320: LD_INT 2
7322: PPUSH
7323: CALL_OW 380
// un := CreateHuman ;
7327: LD_ADDR_VAR 0 3
7331: PUSH
7332: CALL_OW 44
7336: ST_TO_ADDR
// tmp := tmp union un ;
7337: LD_ADDR_VAR 0 4
7341: PUSH
7342: LD_VAR 0 4
7346: PUSH
7347: LD_VAR 0 3
7351: UNION
7352: ST_TO_ADDR
// PlaceUnitXYR ( un , 105 , 2 , 2 , false ) ;
7353: LD_VAR 0 3
7357: PPUSH
7358: LD_INT 105
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: LD_INT 2
7366: PPUSH
7367: LD_INT 0
7369: PPUSH
7370: CALL_OW 50
// end ;
7374: GO 7311
7376: POP
7377: POP
// ComAgressiveMove ( tmp , 26 , 35 ) ;
7378: LD_VAR 0 4
7382: PPUSH
7383: LD_INT 26
7385: PPUSH
7386: LD_INT 35
7388: PPUSH
7389: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7393: LD_INT 35
7395: PPUSH
7396: CALL_OW 67
// if not UnitFilter ( tmp , [ f_ok ] ) then
7400: LD_VAR 0 4
7404: PPUSH
7405: LD_INT 50
7407: PUSH
7408: EMPTY
7409: LIST
7410: PPUSH
7411: CALL_OW 72
7415: NOT
7416: IFFALSE 7420
// exit ;
7418: GO 7547
// until UnitFilter ( tmp , [ f_dist , omikron , 12 ] ) = tmp ;
7420: LD_VAR 0 4
7424: PPUSH
7425: LD_INT 91
7427: PUSH
7428: LD_INT 64
7430: PUSH
7431: LD_INT 12
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: LIST
7438: PPUSH
7439: CALL_OW 72
7443: PUSH
7444: LD_VAR 0 4
7448: EQUAL
7449: IFFALSE 7393
// omicronSquad := omicronSquad union tmp ;
7451: LD_ADDR_EXP 51
7455: PUSH
7456: LD_EXP 51
7460: PUSH
7461: LD_VAR 0 4
7465: UNION
7466: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_class , 1 ] ) do
7467: LD_ADDR_VAR 0 2
7471: PUSH
7472: LD_VAR 0 4
7476: PPUSH
7477: LD_INT 25
7479: PUSH
7480: LD_INT 1
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: PPUSH
7487: CALL_OW 72
7491: PUSH
7492: FOR_IN
7493: IFFALSE 7545
// ComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_armoury ] ] ) , i ) ) ;
7495: LD_VAR 0 2
7499: PPUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 4
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 30
7512: PUSH
7513: LD_INT 4
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PPUSH
7524: CALL_OW 69
7528: PPUSH
7529: LD_VAR 0 2
7533: PPUSH
7534: CALL_OW 74
7538: PPUSH
7539: CALL_OW 120
7543: GO 7492
7545: POP
7546: POP
// end ;
7547: LD_VAR 0 1
7551: RET
// every 0 0$1 trigger not omicronFall do var i , filter , tmp , enemy ;
7552: LD_EXP 13
7556: NOT
7557: IFFALSE 8128
7559: GO 7561
7561: DISABLE
7562: LD_INT 0
7564: PPUSH
7565: PPUSH
7566: PPUSH
7567: PPUSH
// begin enable ;
7568: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7569: LD_ADDR_VAR 0 2
7573: PUSH
7574: LD_INT 22
7576: PUSH
7577: LD_INT 4
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 21
7586: PUSH
7587: LD_INT 3
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 24
7599: PUSH
7600: LD_INT 1000
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: ST_TO_ADDR
// tmp := UnitFilter ( omicronSquad , [ f_class , 2 ] ) ;
7621: LD_ADDR_VAR 0 3
7625: PUSH
7626: LD_EXP 51
7630: PPUSH
7631: LD_INT 25
7633: PUSH
7634: LD_INT 2
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: PPUSH
7641: CALL_OW 72
7645: ST_TO_ADDR
// if filter and tmp then
7646: LD_VAR 0 2
7650: PUSH
7651: LD_VAR 0 3
7655: AND
7656: IFFALSE 7729
// begin for i in tmp do
7658: LD_ADDR_VAR 0 1
7662: PUSH
7663: LD_VAR 0 3
7667: PUSH
7668: FOR_IN
7669: IFFALSE 7725
// if IsInUnit ( i ) then
7671: LD_VAR 0 1
7675: PPUSH
7676: CALL_OW 310
7680: IFFALSE 7693
// ComExitBuilding ( i ) else
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 122
7691: GO 7723
// if not HasTask ( i ) then
7693: LD_VAR 0 1
7697: PPUSH
7698: CALL_OW 314
7702: NOT
7703: IFFALSE 7723
// ComRepairBuilding ( i , filter [ 1 ] ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_VAR 0 2
7714: PUSH
7715: LD_INT 1
7717: ARRAY
7718: PPUSH
7719: CALL_OW 130
7723: GO 7668
7725: POP
7726: POP
// end else
7727: GO 7800
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
7729: LD_VAR 0 3
7733: PPUSH
7734: LD_INT 3
7736: PUSH
7737: LD_INT 54
7739: PUSH
7740: EMPTY
7741: LIST
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PPUSH
7747: CALL_OW 72
7751: IFFALSE 7800
// begin for i in UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) do
7753: LD_ADDR_VAR 0 1
7757: PUSH
7758: LD_VAR 0 3
7762: PPUSH
7763: LD_INT 3
7765: PUSH
7766: LD_INT 54
7768: PUSH
7769: EMPTY
7770: LIST
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PPUSH
7776: CALL_OW 72
7780: PUSH
7781: FOR_IN
7782: IFFALSE 7798
// ComEnterUnit ( i , omikron ) ;
7784: LD_VAR 0 1
7788: PPUSH
7789: LD_INT 64
7791: PPUSH
7792: CALL_OW 120
7796: GO 7781
7798: POP
7799: POP
// end ; filter := UnitFilter ( omicronSquad , [ f_type , unit_vehicle ] ) ;
7800: LD_ADDR_VAR 0 2
7804: PUSH
7805: LD_EXP 51
7809: PPUSH
7810: LD_INT 21
7812: PUSH
7813: LD_INT 2
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PPUSH
7820: CALL_OW 72
7824: ST_TO_ADDR
// if not filter then
7825: LD_VAR 0 2
7829: NOT
7830: IFFALSE 7834
// exit ;
7832: GO 8128
// enemy := FilterUnitsInArea ( omicronDefendArea , [ f_enemy , 4 ] ) ;
7834: LD_ADDR_VAR 0 4
7838: PUSH
7839: LD_INT 13
7841: PPUSH
7842: LD_INT 81
7844: PUSH
7845: LD_INT 4
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 70
7856: ST_TO_ADDR
// if enemy then
7857: LD_VAR 0 4
7861: IFFALSE 8128
// begin for i in filter do
7863: LD_ADDR_VAR 0 1
7867: PUSH
7868: LD_VAR 0 2
7872: PUSH
7873: FOR_IN
7874: IFFALSE 8126
// begin tmp := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 3
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not tmp then
7891: LD_VAR 0 3
7895: NOT
7896: IFFALSE 7900
// continue ;
7898: GO 7873
// if GetLives ( i ) >= 600 and GetTag ( i ) <> 1 then
7900: LD_VAR 0 1
7904: PPUSH
7905: CALL_OW 256
7909: PUSH
7910: LD_INT 600
7912: GREATEREQUAL
7913: PUSH
7914: LD_VAR 0 1
7918: PPUSH
7919: CALL_OW 110
7923: PUSH
7924: LD_INT 1
7926: NONEQUAL
7927: AND
7928: IFFALSE 7954
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
7930: LD_VAR 0 1
7934: PPUSH
7935: LD_VAR 0 4
7939: PPUSH
7940: LD_VAR 0 1
7944: PPUSH
7945: CALL_OW 74
7949: PPUSH
7950: CALL_OW 115
// if GetLives ( i ) < 600 and GetTag ( i ) <> 1 then
7954: LD_VAR 0 1
7958: PPUSH
7959: CALL_OW 256
7963: PUSH
7964: LD_INT 600
7966: LESS
7967: PUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 110
7977: PUSH
7978: LD_INT 1
7980: NONEQUAL
7981: AND
7982: IFFALSE 8011
// begin SetTag ( i , 1 ) ;
7984: LD_VAR 0 1
7988: PPUSH
7989: LD_INT 1
7991: PPUSH
7992: CALL_OW 109
// ComMoveXY ( i , 27 , 35 ) ;
7996: LD_VAR 0 1
8000: PPUSH
8001: LD_INT 27
8003: PPUSH
8004: LD_INT 35
8006: PPUSH
8007: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 27 , 35 ) < 6 and tmp then
8011: LD_VAR 0 1
8015: PPUSH
8016: CALL_OW 110
8020: PUSH
8021: LD_INT 1
8023: EQUAL
8024: PUSH
8025: LD_VAR 0 1
8029: PPUSH
8030: LD_INT 27
8032: PPUSH
8033: LD_INT 35
8035: PPUSH
8036: CALL_OW 297
8040: PUSH
8041: LD_INT 6
8043: LESS
8044: AND
8045: PUSH
8046: LD_VAR 0 3
8050: AND
8051: IFFALSE 8124
// begin ComExitVehicle ( tmp ) ;
8053: LD_VAR 0 3
8057: PPUSH
8058: CALL_OW 121
// AddComRepairVehicle ( tmp , i ) ;
8062: LD_VAR 0 3
8066: PPUSH
8067: LD_VAR 0 1
8071: PPUSH
8072: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
8076: LD_INT 35
8078: PPUSH
8079: CALL_OW 67
// until GetLives ( i ) = 1000 ;
8083: LD_VAR 0 1
8087: PPUSH
8088: CALL_OW 256
8092: PUSH
8093: LD_INT 1000
8095: EQUAL
8096: IFFALSE 8076
// ComEnterUnit ( tmp , i ) ;
8098: LD_VAR 0 3
8102: PPUSH
8103: LD_VAR 0 1
8107: PPUSH
8108: CALL_OW 120
// SetTag ( i , 0 ) ;
8112: LD_VAR 0 1
8116: PPUSH
8117: LD_INT 0
8119: PPUSH
8120: CALL_OW 109
// end ; end ;
8124: GO 7873
8126: POP
8127: POP
// end ; end ;
8128: PPOPN 4
8130: END
// every 0 0$1 trigger omicronFall do var i , tmp ;
8131: LD_EXP 13
8135: IFFALSE 8279
8137: GO 8139
8139: DISABLE
8140: LD_INT 0
8142: PPUSH
8143: PPUSH
// begin tmp := UnitFilter ( omicronSquad , [ [ f_type , unit_human ] , [ f_ok ] ] ) ;
8144: LD_ADDR_VAR 0 2
8148: PUSH
8149: LD_EXP 51
8153: PPUSH
8154: LD_INT 21
8156: PUSH
8157: LD_INT 1
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 50
8166: PUSH
8167: EMPTY
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PPUSH
8174: CALL_OW 72
8178: ST_TO_ADDR
// if not tmp then
8179: LD_VAR 0 2
8183: NOT
8184: IFFALSE 8188
// exit ;
8186: GO 8279
// repeat wait ( 0 0$1 ) ;
8188: LD_INT 35
8190: PPUSH
8191: CALL_OW 67
// for i in tmp do
8195: LD_ADDR_VAR 0 1
8199: PUSH
8200: LD_VAR 0 2
8204: PUSH
8205: FOR_IN
8206: IFFALSE 8270
// begin ComExit ( i ) ;
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL 783 0 1
// AddComMoveToArea ( i , omicronEscapeArea ) ;
8217: LD_VAR 0 1
8221: PPUSH
8222: LD_INT 14
8224: PPUSH
8225: CALL_OW 173
// if IsInArea ( i , omicronEscapeArea ) then
8229: LD_VAR 0 1
8233: PPUSH
8234: LD_INT 14
8236: PPUSH
8237: CALL_OW 308
8241: IFFALSE 8268
// begin tmp := tmp diff i ;
8243: LD_ADDR_VAR 0 2
8247: PUSH
8248: LD_VAR 0 2
8252: PUSH
8253: LD_VAR 0 1
8257: DIFF
8258: ST_TO_ADDR
// RemoveUnit ( i ) ;
8259: LD_VAR 0 1
8263: PPUSH
8264: CALL_OW 64
// end ; end ;
8268: GO 8205
8270: POP
8271: POP
// until not tmp ;
8272: LD_VAR 0 2
8276: NOT
8277: IFFALSE 8188
// end ; end_of_file
8279: PPOPN 2
8281: END
// export function Action ; var i , un , veh , tmp ; begin
8282: LD_INT 0
8284: PPUSH
8285: PPUSH
8286: PPUSH
8287: PPUSH
8288: PPUSH
// InGameOn ;
8289: CALL_OW 8
// CenterNowOnXY ( 179 , 5 ) ;
8293: LD_INT 179
8295: PPUSH
8296: LD_INT 5
8298: PPUSH
8299: CALL_OW 86
// veh := PrepareTank ( 2 , 2 , ar_light_trike , engine_combustion , control_manual , ar_double_machine_gun , 33 ) ;
8303: LD_ADDR_VAR 0 4
8307: PUSH
8308: LD_INT 2
8310: PPUSH
8311: LD_INT 2
8313: PPUSH
8314: LD_INT 12
8316: PPUSH
8317: LD_INT 1
8319: PPUSH
8320: LD_INT 1
8322: PPUSH
8323: LD_INT 24
8325: PPUSH
8326: LD_INT 33
8328: PPUSH
8329: CALL 345 0 7
8333: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8334: LD_VAR 0 4
8338: PPUSH
8339: LD_INT 2
8341: PPUSH
8342: CALL_OW 233
// PlaceUnitXY ( veh , 178 , 2 , false ) ;
8346: LD_VAR 0 4
8350: PPUSH
8351: LD_INT 178
8353: PPUSH
8354: LD_INT 2
8356: PPUSH
8357: LD_INT 0
8359: PPUSH
8360: CALL_OW 48
// PlaceHumanInUnit ( Heike , veh ) ;
8364: LD_EXP 25
8368: PPUSH
8369: LD_VAR 0 4
8373: PPUSH
8374: CALL_OW 52
// if Kamil then
8378: LD_EXP 29
8382: IFFALSE 8417
// begin PlaceUnitXY ( Kamil , 207 , 37 , false ) ;
8384: LD_EXP 29
8388: PPUSH
8389: LD_INT 207
8391: PPUSH
8392: LD_INT 37
8394: PPUSH
8395: LD_INT 0
8397: PPUSH
8398: CALL_OW 48
// ComTurnXY ( Kamil , 211 , 38 ) ;
8402: LD_EXP 29
8406: PPUSH
8407: LD_INT 211
8409: PPUSH
8410: LD_INT 38
8412: PPUSH
8413: CALL_OW 118
// end ; if Sophia then
8417: LD_EXP 31
8421: IFFALSE 8456
// begin PlaceUnitXY ( Sophia , 209 , 40 , false ) ;
8423: LD_EXP 31
8427: PPUSH
8428: LD_INT 209
8430: PPUSH
8431: LD_INT 40
8433: PPUSH
8434: LD_INT 0
8436: PPUSH
8437: CALL_OW 48
// ComTurnXY ( Sophia , 211 , 38 ) ;
8441: LD_EXP 31
8445: PPUSH
8446: LD_INT 211
8448: PPUSH
8449: LD_INT 38
8451: PPUSH
8452: CALL_OW 118
// end ; if Givi then
8456: LD_EXP 26
8460: IFFALSE 8495
// begin PlaceUnitXY ( Givi , 201 , 34 , false ) ;
8462: LD_EXP 26
8466: PPUSH
8467: LD_INT 201
8469: PPUSH
8470: LD_INT 34
8472: PPUSH
8473: LD_INT 0
8475: PPUSH
8476: CALL_OW 48
// ComTurnXY ( Givi , 206 , 36 ) ;
8480: LD_EXP 26
8484: PPUSH
8485: LD_INT 206
8487: PPUSH
8488: LD_INT 36
8490: PPUSH
8491: CALL_OW 118
// end ; if Ibrahim then
8495: LD_EXP 28
8499: IFFALSE 8534
// begin PlaceUnitXY ( Ibrahim , 202 , 39 , false ) ;
8501: LD_EXP 28
8505: PPUSH
8506: LD_INT 202
8508: PPUSH
8509: LD_INT 39
8511: PPUSH
8512: LD_INT 0
8514: PPUSH
8515: CALL_OW 48
// ComTurnXY ( Ibrahim , 206 , 36 ) ;
8519: LD_EXP 28
8523: PPUSH
8524: LD_INT 206
8526: PPUSH
8527: LD_INT 36
8529: PPUSH
8530: CALL_OW 118
// end ; if Markov then
8534: LD_EXP 32
8538: IFFALSE 8625
// begin veh := PrepareTank ( 2 , 2 , ar_medium_trike , engine_combustion , control_manual , ar_gatling_gun , 80 - 20 * Difficulty ) ;
8540: LD_ADDR_VAR 0 4
8544: PUSH
8545: LD_INT 2
8547: PPUSH
8548: LD_INT 2
8550: PPUSH
8551: LD_INT 13
8553: PPUSH
8554: LD_INT 1
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: LD_INT 25
8562: PPUSH
8563: LD_INT 80
8565: PUSH
8566: LD_INT 20
8568: PUSH
8569: LD_OWVAR 67
8573: MUL
8574: MINUS
8575: PPUSH
8576: CALL 345 0 7
8580: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
8581: LD_VAR 0 4
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: CALL_OW 233
// PlaceUnitXY ( veh , 197 , 35 , false ) ;
8593: LD_VAR 0 4
8597: PPUSH
8598: LD_INT 197
8600: PPUSH
8601: LD_INT 35
8603: PPUSH
8604: LD_INT 0
8606: PPUSH
8607: CALL_OW 48
// PlaceHumanInUnit ( Markov , veh ) ;
8611: LD_EXP 32
8615: PPUSH
8616: LD_VAR 0 4
8620: PPUSH
8621: CALL_OW 52
// end ; tmp := Kaia union heikeSecondSquad ;
8625: LD_ADDR_VAR 0 5
8629: PUSH
8630: LD_EXP 30
8634: PUSH
8635: LD_EXP 37
8639: UNION
8640: ST_TO_ADDR
// for i in tmp do
8641: LD_ADDR_VAR 0 2
8645: PUSH
8646: LD_VAR 0 5
8650: PUSH
8651: FOR_IN
8652: IFFALSE 8686
// begin PlaceUnitXYR ( i , 203 , 41 , 6 , false ) ;
8654: LD_VAR 0 2
8658: PPUSH
8659: LD_INT 203
8661: PPUSH
8662: LD_INT 41
8664: PPUSH
8665: LD_INT 6
8667: PPUSH
8668: LD_INT 0
8670: PPUSH
8671: CALL_OW 50
// ComHold ( i ) ;
8675: LD_VAR 0 2
8679: PPUSH
8680: CALL_OW 140
// end ;
8684: GO 8651
8686: POP
8687: POP
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) then
8688: LD_INT 22
8690: PUSH
8691: LD_INT 2
8693: PUSH
8694: EMPTY
8695: LIST
8696: LIST
8697: PUSH
8698: LD_INT 25
8700: PUSH
8701: LD_INT 2
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PPUSH
8712: CALL_OW 69
8716: NOT
8717: IFFALSE 8731
// SetClass ( Heike , 2 ) ;
8719: LD_EXP 25
8723: PPUSH
8724: LD_INT 2
8726: PPUSH
8727: CALL_OW 336
// ComMoveXY ( Heike , 183 , 12 ) ;
8731: LD_EXP 25
8735: PPUSH
8736: LD_INT 183
8738: PPUSH
8739: LD_INT 12
8741: PPUSH
8742: CALL_OW 111
// AddComMoveXY ( Heike , 188 , 20 ) ;
8746: LD_EXP 25
8750: PPUSH
8751: LD_INT 188
8753: PPUSH
8754: LD_INT 20
8756: PPUSH
8757: CALL_OW 171
// AddComMoveXY ( Heike , 191 , 25 ) ;
8761: LD_EXP 25
8765: PPUSH
8766: LD_INT 191
8768: PPUSH
8769: LD_INT 25
8771: PPUSH
8772: CALL_OW 171
// AddComMoveXY ( Heike , 203 , 29 ) ;
8776: LD_EXP 25
8780: PPUSH
8781: LD_INT 203
8783: PPUSH
8784: LD_INT 29
8786: PPUSH
8787: CALL_OW 171
// AddComExitVehicle ( Heike ) ;
8791: LD_EXP 25
8795: PPUSH
8796: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
8800: LD_INT 35
8802: PPUSH
8803: CALL_OW 67
// until not IsInUnit ( Heike ) ;
8807: LD_EXP 25
8811: PPUSH
8812: CALL_OW 310
8816: NOT
8817: IFFALSE 8800
// CenterOnUnits ( Heike ) ;
8819: LD_EXP 25
8823: PPUSH
8824: CALL_OW 85
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) diff [ Heike , Markov ] ;
8828: LD_ADDR_VAR 0 5
8832: PUSH
8833: LD_INT 22
8835: PUSH
8836: LD_INT 2
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: PPUSH
8857: CALL_OW 69
8861: PUSH
8862: LD_EXP 25
8866: PUSH
8867: LD_EXP 32
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: DIFF
8876: ST_TO_ADDR
// ComTurnUnit ( tmp , Heike ) ;
8877: LD_VAR 0 5
8881: PPUSH
8882: LD_EXP 25
8886: PPUSH
8887: CALL_OW 119
// if Givi then
8891: LD_EXP 26
8895: IFFALSE 8913
// ComTurnUnit ( Heike , Givi ) else
8897: LD_EXP 25
8901: PPUSH
8902: LD_EXP 26
8906: PPUSH
8907: CALL_OW 119
8911: GO 8931
// ComTurnUnit ( Heike , tmp [ 1 ] ) ;
8913: LD_EXP 25
8917: PPUSH
8918: LD_VAR 0 5
8922: PUSH
8923: LD_INT 1
8925: ARRAY
8926: PPUSH
8927: CALL_OW 119
// Say ( Heike , DH-Start-1 ) ;
8931: LD_EXP 25
8935: PPUSH
8936: LD_STRING DH-Start-1
8938: PPUSH
8939: CALL_OW 88
// if Givi then
8943: LD_EXP 26
8947: IFFALSE 8994
// begin Say ( Givi , DG-Start-2 ) ;
8949: LD_EXP 26
8953: PPUSH
8954: LD_STRING DG-Start-2
8956: PPUSH
8957: CALL_OW 88
// if not Mike then
8961: LD_EXP 27
8965: NOT
8966: IFFALSE 8992
// begin Say ( Givi , DG-Start-b-3 ) ;
8968: LD_EXP 26
8972: PPUSH
8973: LD_STRING DG-Start-b-3
8975: PPUSH
8976: CALL_OW 88
// Say ( Heike , DH-Start-b-4 ) ;
8980: LD_EXP 25
8984: PPUSH
8985: LD_STRING DH-Start-b-4
8987: PPUSH
8988: CALL_OW 88
// end ; end else
8992: GO 9059
// if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-Start-a-2 ) then
8994: LD_EXP 37
8998: PPUSH
8999: LD_INT 26
9001: PUSH
9002: LD_INT 1
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PPUSH
9009: CALL_OW 72
9013: PUSH
9014: LD_INT 1
9016: ARRAY
9017: PPUSH
9018: LD_STRING DArm-Start-a-2
9020: PPUSH
9021: CALL_OW 88
9025: NOT
9026: IFFALSE 9059
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-Start-a-2 ) ;
9028: LD_EXP 37
9032: PPUSH
9033: LD_INT 26
9035: PUSH
9036: LD_INT 2
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: PPUSH
9043: CALL_OW 72
9047: PUSH
9048: LD_INT 1
9050: ARRAY
9051: PPUSH
9052: LD_STRING DArf-Start-a-2
9054: PPUSH
9055: CALL_OW 88
// ComTurnXY ( Heike , 211 , 38 ) ;
9059: LD_EXP 25
9063: PPUSH
9064: LD_INT 211
9066: PPUSH
9067: LD_INT 38
9069: PPUSH
9070: CALL_OW 118
// wait ( 0 0$1 ) ;
9074: LD_INT 35
9076: PPUSH
9077: CALL_OW 67
// Say ( Heike , DH-Start-3 ) ;
9081: LD_EXP 25
9085: PPUSH
9086: LD_STRING DH-Start-3
9088: PPUSH
9089: CALL_OW 88
// Say ( Heike , DH-Start-4 ) ;
9093: LD_EXP 25
9097: PPUSH
9098: LD_STRING DH-Start-4
9100: PPUSH
9101: CALL_OW 88
// InGameOff ;
9105: CALL_OW 9
// ChangeMissionObjectives ( Prepare ) ;
9109: LD_STRING Prepare
9111: PPUSH
9112: CALL_OW 337
// SaveForQuickRestart ;
9116: CALL_OW 22
// wait ( 0 0$30 ) ;
9120: LD_INT 1050
9122: PPUSH
9123: CALL_OW 67
// if not Aviradze then
9127: LD_EXP 35
9131: NOT
9132: IFFALSE 9136
// exit ;
9134: GO 9340
// SetDir ( Aviradze , 4 ) ;
9136: LD_EXP 35
9140: PPUSH
9141: LD_INT 4
9143: PPUSH
9144: CALL_OW 233
// PlaceUnitXY ( Aviradze , 225 , 33 , false ) ;
9148: LD_EXP 35
9152: PPUSH
9153: LD_INT 225
9155: PPUSH
9156: LD_INT 33
9158: PPUSH
9159: LD_INT 0
9161: PPUSH
9162: CALL_OW 48
// for i := 1 to 2 do
9166: LD_ADDR_VAR 0 2
9170: PUSH
9171: DOUBLE
9172: LD_INT 1
9174: DEC
9175: ST_TO_ADDR
9176: LD_INT 2
9178: PUSH
9179: FOR_TO
9180: IFFALSE 9311
// begin uc_side := 2 ;
9182: LD_ADDR_OWVAR 20
9186: PUSH
9187: LD_INT 2
9189: ST_TO_ADDR
// uc_nation := 0 ;
9190: LD_ADDR_OWVAR 21
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
9198: LD_INT 0
9200: PPUSH
9201: LD_INT 12
9203: PPUSH
9204: LD_INT 1
9206: PPUSH
9207: CALL_OW 380
// hc_gallery :=  ;
9211: LD_ADDR_OWVAR 33
9215: PUSH
9216: LD_STRING 
9218: ST_TO_ADDR
// hc_name := [ Artudito , Textur ] [ i ] ;
9219: LD_ADDR_OWVAR 26
9223: PUSH
9224: LD_STRING Artudito
9226: PUSH
9227: LD_STRING Textur
9229: PUSH
9230: EMPTY
9231: LIST
9232: LIST
9233: PUSH
9234: LD_VAR 0 2
9238: ARRAY
9239: ST_TO_ADDR
// un := CreateHuman ;
9240: LD_ADDR_VAR 0 3
9244: PUSH
9245: CALL_OW 44
9249: ST_TO_ADDR
// PlaceUnitXY ( un , [ 224 , 226 ] [ i ] , [ 31 , 35 ] [ i ] , false ) ;
9250: LD_VAR 0 3
9254: PPUSH
9255: LD_INT 224
9257: PUSH
9258: LD_INT 226
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_VAR 0 2
9269: ARRAY
9270: PPUSH
9271: LD_INT 31
9273: PUSH
9274: LD_INT 35
9276: PUSH
9277: EMPTY
9278: LIST
9279: LIST
9280: PUSH
9281: LD_VAR 0 2
9285: ARRAY
9286: PPUSH
9287: LD_INT 0
9289: PPUSH
9290: CALL_OW 48
// ComMoveXY ( un , 215 , 36 ) ;
9294: LD_VAR 0 3
9298: PPUSH
9299: LD_INT 215
9301: PPUSH
9302: LD_INT 36
9304: PPUSH
9305: CALL_OW 111
// end ;
9309: GO 9179
9311: POP
9312: POP
// hc_name :=  ;
9313: LD_ADDR_OWVAR 26
9317: PUSH
9318: LD_STRING 
9320: ST_TO_ADDR
// InitHc ;
9321: CALL_OW 19
// ComMoveXY ( Aviradze , 215 , 36 ) ;
9325: LD_EXP 35
9329: PPUSH
9330: LD_INT 215
9332: PPUSH
9333: LD_INT 36
9335: PPUSH
9336: CALL_OW 111
// end ;
9340: LD_VAR 0 1
9344: RET
// every 0 0$2 trigger baseConstructed do var i , un , veh ;
9345: LD_EXP 3
9349: IFFALSE 10658
9351: GO 9353
9353: DISABLE
9354: LD_INT 0
9356: PPUSH
9357: PPUSH
9358: PPUSH
// begin DialogueOn ;
9359: CALL_OW 6
// Say ( Heike , DH-base-1 ) ;
9363: LD_EXP 25
9367: PPUSH
9368: LD_STRING DH-base-1
9370: PPUSH
9371: CALL_OW 88
// if Markov then
9375: LD_EXP 32
9379: IFFALSE 9431
// begin Say ( Markov , DMar-base-2 ) ;
9381: LD_EXP 32
9385: PPUSH
9386: LD_STRING DMar-base-2
9388: PPUSH
9389: CALL_OW 88
// Say ( Markov , DMar-base-3 ) ;
9393: LD_EXP 32
9397: PPUSH
9398: LD_STRING DMar-base-3
9400: PPUSH
9401: CALL_OW 88
// Say ( Heike , DH-base-4 ) ;
9405: LD_EXP 25
9409: PPUSH
9410: LD_STRING DH-base-4
9412: PPUSH
9413: CALL_OW 88
// Say ( Markov , DMar-base-5 ) ;
9417: LD_EXP 32
9421: PPUSH
9422: LD_STRING DMar-base-5
9424: PPUSH
9425: CALL_OW 88
// end else
9429: GO 9508
// begin if not Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_male ] ) [ 1 ] , DArm-base-a-2 ) then
9431: LD_EXP 37
9435: PPUSH
9436: LD_INT 26
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: PPUSH
9446: CALL_OW 72
9450: PUSH
9451: LD_INT 1
9453: ARRAY
9454: PPUSH
9455: LD_STRING DArm-base-a-2
9457: PPUSH
9458: CALL_OW 88
9462: NOT
9463: IFFALSE 9496
// Say ( UnitFilter ( heikeSecondSquad , [ f_sex , sex_female ] ) [ 1 ] , DArf-base-a-2 ) ;
9465: LD_EXP 37
9469: PPUSH
9470: LD_INT 26
9472: PUSH
9473: LD_INT 2
9475: PUSH
9476: EMPTY
9477: LIST
9478: LIST
9479: PPUSH
9480: CALL_OW 72
9484: PUSH
9485: LD_INT 1
9487: ARRAY
9488: PPUSH
9489: LD_STRING DArf-base-a-2
9491: PPUSH
9492: CALL_OW 88
// Say ( Heike , DH-base-a-3 ) ;
9496: LD_EXP 25
9500: PPUSH
9501: LD_STRING DH-base-a-3
9503: PPUSH
9504: CALL_OW 88
// end ; Say ( Aviradze , DA-base-6 ) ;
9508: LD_EXP 35
9512: PPUSH
9513: LD_STRING DA-base-6
9515: PPUSH
9516: CALL_OW 88
// Say ( Aviradze , DA-base-7 ) ;
9520: LD_EXP 35
9524: PPUSH
9525: LD_STRING DA-base-7
9527: PPUSH
9528: CALL_OW 88
// DialogueOff ;
9532: CALL_OW 7
// ChangeMissionObjectives ( Flamethrower ) ;
9536: LD_STRING Flamethrower
9538: PPUSH
9539: CALL_OW 337
// wait ( 2 2$00 ) ;
9543: LD_INT 4200
9545: PPUSH
9546: CALL_OW 67
// ComMoveXY ( [ Kurt , Mike ] , 203 , 37 ) ;
9550: LD_EXP 34
9554: PUSH
9555: LD_EXP 27
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PPUSH
9564: LD_INT 203
9566: PPUSH
9567: LD_INT 37
9569: PPUSH
9570: CALL_OW 111
// if not FilterAllUnits ( [ [ f_side , 2 ] , [ f_distxy , 203 , 37 , 10 ] ] ) then
9574: LD_INT 22
9576: PUSH
9577: LD_INT 2
9579: PUSH
9580: EMPTY
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 92
9586: PUSH
9587: LD_INT 203
9589: PUSH
9590: LD_INT 37
9592: PUSH
9593: LD_INT 10
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PPUSH
9606: CALL_OW 69
9610: NOT
9611: IFFALSE 9651
// AddComMoveXY ( [ Kurt , Mike ] , GetX ( Heike ) , GetY ( Heike ) ) ;
9613: LD_EXP 34
9617: PUSH
9618: LD_EXP 27
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PPUSH
9627: LD_EXP 25
9631: PPUSH
9632: CALL_OW 250
9636: PPUSH
9637: LD_EXP 25
9641: PPUSH
9642: CALL_OW 251
9646: PPUSH
9647: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9651: LD_INT 35
9653: PPUSH
9654: CALL_OW 67
// until See ( 2 , Kurt ) and ( GetDistUnits ( Kurt , Heike ) < 8 or GetDistUnits ( Kurt , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) , Kurt ) ) < 7 ) and not IsInArea ( Kurt , hillArea ) ;
9658: LD_INT 2
9660: PPUSH
9661: LD_EXP 34
9665: PPUSH
9666: CALL_OW 292
9670: PUSH
9671: LD_EXP 34
9675: PPUSH
9676: LD_EXP 25
9680: PPUSH
9681: CALL_OW 296
9685: PUSH
9686: LD_INT 8
9688: LESS
9689: PUSH
9690: LD_EXP 34
9694: PPUSH
9695: LD_INT 22
9697: PUSH
9698: LD_INT 2
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: PUSH
9705: LD_INT 21
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PPUSH
9719: CALL_OW 69
9723: PPUSH
9724: LD_EXP 34
9728: PPUSH
9729: CALL_OW 74
9733: PPUSH
9734: CALL_OW 296
9738: PUSH
9739: LD_INT 7
9741: LESS
9742: OR
9743: AND
9744: PUSH
9745: LD_EXP 34
9749: PPUSH
9750: LD_INT 10
9752: PPUSH
9753: CALL_OW 308
9757: NOT
9758: AND
9759: IFFALSE 9651
// InGameOn ;
9761: CALL_OW 8
// CenterNowOnUnits ( Kurt ) ;
9765: LD_EXP 34
9769: PPUSH
9770: CALL_OW 87
// if IsInUnit ( Heike ) then
9774: LD_EXP 25
9778: PPUSH
9779: CALL_OW 310
9783: IFFALSE 9794
// ComExitBuilding ( Heike ) ;
9785: LD_EXP 25
9789: PPUSH
9790: CALL_OW 122
// ComMoveUnit ( [ Kurt , Mike ] , Heike ) ;
9794: LD_EXP 34
9798: PUSH
9799: LD_EXP 27
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: LD_EXP 25
9812: PPUSH
9813: CALL_OW 112
// AddComTurnUnit ( Heike , Kurt ) ;
9817: LD_EXP 25
9821: PPUSH
9822: LD_EXP 34
9826: PPUSH
9827: CALL_OW 179
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_dist , Kurt , 10 ] , [ f_type , unit_building ] ] ) then
9831: LD_INT 22
9833: PUSH
9834: LD_INT 2
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: PUSH
9841: LD_INT 91
9843: PUSH
9844: LD_EXP 34
9848: PUSH
9849: LD_INT 10
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 21
9859: PUSH
9860: LD_INT 3
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 69
9876: IFFALSE 9902
// begin Say ( Kurt , DKs-scout-1 ) ;
9878: LD_EXP 34
9882: PPUSH
9883: LD_STRING DKs-scout-1
9885: PPUSH
9886: CALL_OW 88
// Say ( Heike , DH-scout-2 ) ;
9890: LD_EXP 25
9894: PPUSH
9895: LD_STRING DH-scout-2
9897: PPUSH
9898: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
9902: LD_INT 35
9904: PPUSH
9905: CALL_OW 67
// until GetDistUnits ( Heike , Kurt ) < 6 ;
9909: LD_EXP 25
9913: PPUSH
9914: LD_EXP 34
9918: PPUSH
9919: CALL_OW 296
9923: PUSH
9924: LD_INT 6
9926: LESS
9927: IFFALSE 9902
// ComTurnUnit ( [ Kurt , Mike ] , Heike ) ;
9929: LD_EXP 34
9933: PUSH
9934: LD_EXP 27
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: PPUSH
9943: LD_EXP 25
9947: PPUSH
9948: CALL_OW 119
// Say ( Kurt , DKs-scout-3 ) ;
9952: LD_EXP 34
9956: PPUSH
9957: LD_STRING DKs-scout-3
9959: PPUSH
9960: CALL_OW 88
// if Kaia then
9964: LD_EXP 30
9968: IFFALSE 10151
// begin if IsInUnit ( Kaia ) then
9970: LD_EXP 30
9974: PPUSH
9975: CALL_OW 310
9979: IFFALSE 9990
// ComExitBuilding ( Kaia ) ;
9981: LD_EXP 30
9985: PPUSH
9986: CALL_OW 122
// AddComMoveUnit ( Kaia , Kurt ) ;
9990: LD_EXP 30
9994: PPUSH
9995: LD_EXP 34
9999: PPUSH
10000: CALL_OW 172
// repeat wait ( 0 0$1 ) ;
10004: LD_INT 35
10006: PPUSH
10007: CALL_OW 67
// until GetDistUnits ( Kaia , Kurt ) < 6 ;
10011: LD_EXP 30
10015: PPUSH
10016: LD_EXP 34
10020: PPUSH
10021: CALL_OW 296
10025: PUSH
10026: LD_INT 6
10028: LESS
10029: IFFALSE 10004
// ComTurnUnit ( Kaia , Kurt ) ;
10031: LD_EXP 30
10035: PPUSH
10036: LD_EXP 34
10040: PPUSH
10041: CALL_OW 119
// Say ( Kaia , DK-scout-4 ) ;
10045: LD_EXP 30
10049: PPUSH
10050: LD_STRING DK-scout-4
10052: PPUSH
10053: CALL_OW 88
// ComTurnUnit ( Kurt , Kaia ) ;
10057: LD_EXP 34
10061: PPUSH
10062: LD_EXP 30
10066: PPUSH
10067: CALL_OW 119
// Say ( Kurt , DKs-scout-5 ) ;
10071: LD_EXP 34
10075: PPUSH
10076: LD_STRING DKs-scout-5
10078: PPUSH
10079: CALL_OW 88
// Say ( Kaia , DK-scout-6 ) ;
10083: LD_EXP 30
10087: PPUSH
10088: LD_STRING DK-scout-6
10090: PPUSH
10091: CALL_OW 88
// if Mike then
10095: LD_EXP 27
10099: IFFALSE 10151
// begin Say ( Mike , DM-scout-7 ) ;
10101: LD_EXP 27
10105: PPUSH
10106: LD_STRING DM-scout-7
10108: PPUSH
10109: CALL_OW 88
// ComTurnUnit ( Kaia , Mike ) ;
10113: LD_EXP 30
10117: PPUSH
10118: LD_EXP 27
10122: PPUSH
10123: CALL_OW 119
// Say ( Kaia , DK-scout-8 ) ;
10127: LD_EXP 30
10131: PPUSH
10132: LD_STRING DK-scout-8
10134: PPUSH
10135: CALL_OW 88
// Say ( Mike , DM-scout-9 ) ;
10139: LD_EXP 27
10143: PPUSH
10144: LD_STRING DM-scout-9
10146: PPUSH
10147: CALL_OW 88
// end ; end ; PlaceSeeing ( 184 , 100 , 2 , - 12 ) ;
10151: LD_INT 184
10153: PPUSH
10154: LD_INT 100
10156: PPUSH
10157: LD_INT 2
10159: PPUSH
10160: LD_INT 12
10162: NEG
10163: PPUSH
10164: CALL_OW 330
// RemoveSeeing ( 184 , 100 , 2 ) ;
10168: LD_INT 184
10170: PPUSH
10171: LD_INT 100
10173: PPUSH
10174: LD_INT 2
10176: PPUSH
10177: CALL_OW 331
// CenterOnXY ( 184 , 100 ) ;
10181: LD_INT 184
10183: PPUSH
10184: LD_INT 100
10186: PPUSH
10187: CALL_OW 84
// Say ( Kurt , DKs-scout-10 ) ;
10191: LD_EXP 34
10195: PPUSH
10196: LD_STRING DKs-scout-10
10198: PPUSH
10199: CALL_OW 88
// wait ( 0 0$1 ) ;
10203: LD_INT 35
10205: PPUSH
10206: CALL_OW 67
// PlaceSeeing ( 144 , 65 , 2 , - 12 ) ;
10210: LD_INT 144
10212: PPUSH
10213: LD_INT 65
10215: PPUSH
10216: LD_INT 2
10218: PPUSH
10219: LD_INT 12
10221: NEG
10222: PPUSH
10223: CALL_OW 330
// RemoveSeeing ( 144 , 65 , 2 ) ;
10227: LD_INT 144
10229: PPUSH
10230: LD_INT 65
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: CALL_OW 331
// CenterOnXY ( 144 , 65 ) ;
10240: LD_INT 144
10242: PPUSH
10243: LD_INT 65
10245: PPUSH
10246: CALL_OW 84
// Say ( Kurt , DKs-scout-11 ) ;
10250: LD_EXP 34
10254: PPUSH
10255: LD_STRING DKs-scout-11
10257: PPUSH
10258: CALL_OW 88
// wait ( 0 0$1 ) ;
10262: LD_INT 35
10264: PPUSH
10265: CALL_OW 67
// CenterNowOnUnits ( Kurt ) ;
10269: LD_EXP 34
10273: PPUSH
10274: CALL_OW 87
// if Mike and not Givi then
10278: LD_EXP 27
10282: PUSH
10283: LD_EXP 26
10287: NOT
10288: AND
10289: IFFALSE 10315
// begin Say ( Mike , DM-scout-a-1 ) ;
10291: LD_EXP 27
10295: PPUSH
10296: LD_STRING DM-scout-a-1
10298: PPUSH
10299: CALL_OW 88
// Say ( Heike , DH-scout-a-2 ) ;
10303: LD_EXP 25
10307: PPUSH
10308: LD_STRING DH-scout-a-2
10310: PPUSH
10311: CALL_OW 88
// end ; SetSide ( [ Kurt , Mike ] , 2 ) ;
10315: LD_EXP 34
10319: PUSH
10320: LD_EXP 27
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: PPUSH
10329: LD_INT 2
10331: PPUSH
10332: CALL_OW 235
// InGameOff ;
10336: CALL_OW 9
// ChangeMissionObjectives ( Hill ) ;
10340: LD_STRING Hill
10342: PPUSH
10343: CALL_OW 337
// allowToPatrol := true ;
10347: LD_ADDR_EXP 12
10351: PUSH
10352: LD_INT 1
10354: ST_TO_ADDR
// wait ( 1 1$30 ) ;
10355: LD_INT 3150
10357: PPUSH
10358: CALL_OW 67
// InitHc ;
10362: CALL_OW 19
// for i := 1 to [ 3 , 3 , 2 ] [ Difficulty ] do
10366: LD_ADDR_VAR 0 1
10370: PUSH
10371: DOUBLE
10372: LD_INT 1
10374: DEC
10375: ST_TO_ADDR
10376: LD_INT 3
10378: PUSH
10379: LD_INT 3
10381: PUSH
10382: LD_INT 2
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: LD_OWVAR 67
10394: ARRAY
10395: PUSH
10396: FOR_TO
10397: IFFALSE 10656
// begin uc_side := 2 ;
10399: LD_ADDR_OWVAR 20
10403: PUSH
10404: LD_INT 2
10406: ST_TO_ADDR
// uc_nation := 2 ;
10407: LD_ADDR_OWVAR 21
10411: PUSH
10412: LD_INT 2
10414: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 3 , 1 ] [ i mod 3 + 1 ] , [ 3 , 2 , 2 ] [ Difficulty ] ) ;
10415: LD_INT 0
10417: PPUSH
10418: LD_INT 1
10420: PUSH
10421: LD_INT 3
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: PUSH
10432: LD_VAR 0 1
10436: PUSH
10437: LD_INT 3
10439: MOD
10440: PUSH
10441: LD_INT 1
10443: PLUS
10444: ARRAY
10445: PPUSH
10446: LD_INT 3
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 2
10454: PUSH
10455: EMPTY
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: LD_OWVAR 67
10464: ARRAY
10465: PPUSH
10466: CALL_OW 380
// un := CreateHuman ;
10470: LD_ADDR_VAR 0 2
10474: PUSH
10475: CALL_OW 44
10479: ST_TO_ADDR
// heikeSecondSquad := heikeSecondSquad union un ;
10480: LD_ADDR_EXP 37
10484: PUSH
10485: LD_EXP 37
10489: PUSH
10490: LD_VAR 0 2
10494: UNION
10495: ST_TO_ADDR
// PrepareTank ( 2 , 2 , ar_medium_trike , [ engine_solar , engine_combustion ] [ i mod 2 + 1 ] , control_manual , [ ar_gun , ar_gatling_gun , ar_gun , ar_light_gun ] [ Difficulty + rand ( 0 , 1 ) ] , 77 ) ;
10496: LD_INT 2
10498: PPUSH
10499: LD_INT 2
10501: PPUSH
10502: LD_INT 13
10504: PPUSH
10505: LD_INT 2
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_VAR 0 1
10519: PUSH
10520: LD_INT 2
10522: MOD
10523: PUSH
10524: LD_INT 1
10526: PLUS
10527: ARRAY
10528: PPUSH
10529: LD_INT 1
10531: PPUSH
10532: LD_INT 27
10534: PUSH
10535: LD_INT 25
10537: PUSH
10538: LD_INT 27
10540: PUSH
10541: LD_INT 23
10543: PUSH
10544: EMPTY
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: LD_OWVAR 67
10554: PUSH
10555: LD_INT 0
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 12
10565: PLUS
10566: ARRAY
10567: PPUSH
10568: LD_INT 77
10570: PPUSH
10571: CALL 345 0 7
// veh := CreateVehicle ;
10575: LD_ADDR_VAR 0 3
10579: PUSH
10580: CALL_OW 45
10584: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
10585: LD_VAR 0 3
10589: PPUSH
10590: LD_INT 2
10592: PPUSH
10593: CALL_OW 233
// PlaceUnitXYR ( veh , 178 , 2 , 2 , false ) ;
10597: LD_VAR 0 3
10601: PPUSH
10602: LD_INT 178
10604: PPUSH
10605: LD_INT 2
10607: PPUSH
10608: LD_INT 2
10610: PPUSH
10611: LD_INT 0
10613: PPUSH
10614: CALL_OW 50
// PlaceHumanInUnit ( un , veh ) ;
10618: LD_VAR 0 2
10622: PPUSH
10623: LD_VAR 0 3
10627: PPUSH
10628: CALL_OW 52
// ComMoveXY ( un , 183 , 11 ) ;
10632: LD_VAR 0 2
10636: PPUSH
10637: LD_INT 183
10639: PPUSH
10640: LD_INT 11
10642: PPUSH
10643: CALL_OW 111
// wait ( 0 0$2 ) ;
10647: LD_INT 70
10649: PPUSH
10650: CALL_OW 67
// end ;
10654: GO 10396
10656: POP
10657: POP
// end ;
10658: PPOPN 3
10660: END
// every 0 0$2 trigger labConstructed and IsOk ( Aviradze ) do
10661: LD_EXP 4
10665: PUSH
10666: LD_EXP 35
10670: PPUSH
10671: CALL_OW 302
10675: AND
10676: IFFALSE 10725
10678: GO 10680
10680: DISABLE
// begin DialogueOn ;
10681: CALL_OW 6
// Say ( Aviradze , DA-lab-1 ) ;
10685: LD_EXP 35
10689: PPUSH
10690: LD_STRING DA-lab-1
10692: PPUSH
10693: CALL_OW 88
// Say ( Aviradze , DA-lab-2 ) ;
10697: LD_EXP 35
10701: PPUSH
10702: LD_STRING DA-lab-2
10704: PPUSH
10705: CALL_OW 88
// Say ( Heike , DH-lab-3 ) ;
10709: LD_EXP 25
10713: PPUSH
10714: LD_STRING DH-lab-3
10716: PPUSH
10717: CALL_OW 88
// DialogueOff ;
10721: CALL_OW 7
// end ;
10725: END
// every 0 0$2 trigger GetTech ( tech_HidCam , 2 ) = state_researched do var i ;
10726: LD_INT 17
10728: PPUSH
10729: LD_INT 2
10731: PPUSH
10732: CALL_OW 321
10736: PUSH
10737: LD_INT 2
10739: EQUAL
10740: IFFALSE 10872
10742: GO 10744
10744: DISABLE
10745: LD_INT 0
10747: PPUSH
// begin DialogueOn ;
10748: CALL_OW 6
// Say ( Aviradze , DA-Cam-1 ) ;
10752: LD_EXP 35
10756: PPUSH
10757: LD_STRING DA-Cam-1
10759: PPUSH
10760: CALL_OW 88
// Say ( Aviradze , DA-Cam-2 ) ;
10764: LD_EXP 35
10768: PPUSH
10769: LD_STRING DA-Cam-2
10771: PPUSH
10772: CALL_OW 88
// Say ( Aviradze , DA-Cam-3 ) ;
10776: LD_EXP 35
10780: PPUSH
10781: LD_STRING DA-Cam-3
10783: PPUSH
10784: CALL_OW 88
// Say ( Heike , DH-Cam-4 ) ;
10788: LD_EXP 25
10792: PPUSH
10793: LD_STRING DH-Cam-4
10795: PPUSH
10796: CALL_OW 88
// Say ( Kaia , DK-Cam-5 ) ;
10800: LD_EXP 30
10804: PPUSH
10805: LD_STRING DK-Cam-5
10807: PPUSH
10808: CALL_OW 88
// Say ( Kaia , DK-Cam-6 ) ;
10812: LD_EXP 30
10816: PPUSH
10817: LD_STRING DK-Cam-6
10819: PPUSH
10820: CALL_OW 88
// DialogueOff ;
10824: CALL_OW 7
// Query ( Camera ) ;
10828: LD_STRING Camera
10830: PPUSH
10831: CALL_OW 97
// hiddenCameraAllowed := true ;
10835: LD_ADDR_EXP 5
10839: PUSH
10840: LD_INT 1
10842: ST_TO_ADDR
// for i in camAreas do
10843: LD_ADDR_VAR 0 1
10847: PUSH
10848: LD_EXP 8
10852: PUSH
10853: FOR_IN
10854: IFFALSE 10870
// SetAreaMapShow ( i , 1 ) ;
10856: LD_VAR 0 1
10860: PPUSH
10861: LD_INT 1
10863: PPUSH
10864: CALL_OW 424
10868: GO 10853
10870: POP
10871: POP
// end ;
10872: PPOPN 1
10874: END
// every 0 0$1 trigger not camAreas and hiddenCameraAllowed do var i ;
10875: LD_EXP 8
10879: NOT
10880: PUSH
10881: LD_EXP 5
10885: AND
10886: IFFALSE 10984
10888: GO 10890
10890: DISABLE
10891: LD_INT 0
10893: PPUSH
// begin stop_talking := true ;
10894: LD_ADDR_OWVAR 56
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_nation , 2 ] ] ) do
10902: LD_ADDR_VAR 0 1
10906: PUSH
10907: LD_INT 22
10909: PUSH
10910: LD_INT 2
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 21
10919: PUSH
10920: LD_INT 1
10922: PUSH
10923: EMPTY
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 23
10929: PUSH
10930: LD_INT 2
10932: PUSH
10933: EMPTY
10934: LIST
10935: LIST
10936: PUSH
10937: EMPTY
10938: LIST
10939: LIST
10940: LIST
10941: PPUSH
10942: CALL_OW 69
10946: PUSH
10947: FOR_IN
10948: IFFALSE 10967
// AddExperience ( i , 2 , 450 ) ;
10950: LD_VAR 0 1
10954: PPUSH
10955: LD_INT 2
10957: PPUSH
10958: LD_INT 450
10960: PPUSH
10961: CALL_OW 492
10965: GO 10947
10967: POP
10968: POP
// stop_talking := false ;
10969: LD_ADDR_OWVAR 56
10973: PUSH
10974: LD_INT 0
10976: ST_TO_ADDR
// SetAchievement ( ACH_CAMERA ) ;
10977: LD_STRING ACH_CAMERA
10979: PPUSH
10980: CALL_OW 543
// end ;
10984: PPOPN 1
10986: END
// every 0 0$1 trigger russianAlert and not allowHeikeAttack do
10987: LD_EXP 9
10991: PUSH
10992: LD_EXP 11
10996: NOT
10997: AND
10998: IFFALSE 11091
11000: GO 11002
11002: DISABLE
// begin PlaceSeeing ( GetX ( russianAlert [ 1 ] ) , GetY ( russianAlert [ 1 ] ) , 2 , - 6 ) ;
11003: LD_EXP 9
11007: PUSH
11008: LD_INT 1
11010: ARRAY
11011: PPUSH
11012: CALL_OW 250
11016: PPUSH
11017: LD_EXP 9
11021: PUSH
11022: LD_INT 1
11024: ARRAY
11025: PPUSH
11026: CALL_OW 251
11030: PPUSH
11031: LD_INT 2
11033: PPUSH
11034: LD_INT 6
11036: NEG
11037: PPUSH
11038: CALL_OW 330
// CenterNowOnUnits ( russianAlert [ 1 ] ) ;
11042: LD_EXP 9
11046: PUSH
11047: LD_INT 1
11049: ARRAY
11050: PPUSH
11051: CALL_OW 87
// DialogueOn ;
11055: CALL_OW 6
// if spottedByPatrol then
11059: LD_EXP 7
11063: IFFALSE 11077
// Say ( Heike , DH-Spot-f-3 ) ;
11065: LD_EXP 25
11069: PPUSH
11070: LD_STRING DH-Spot-f-3
11072: PPUSH
11073: CALL_OW 88
// dwait ( 0 0$2 ) ;
11077: LD_INT 70
11079: PPUSH
11080: CALL_OW 68
// YouLost ( Spotted ) ;
11084: LD_STRING Spotted
11086: PPUSH
11087: CALL_OW 104
// end ;
11091: END
// every 0 0$3 trigger SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) do
11092: LD_INT 3
11094: PUSH
11095: LD_INT 6
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PPUSH
11102: LD_INT 2
11104: PPUSH
11105: LD_EXP 47
11109: PPUSH
11110: CALL 1965 0 3
11114: IFFALSE 11151
11116: GO 11118
11118: DISABLE
// russianAlert := SeeEnemy ( [ 3 , 6 ] , 2 , russianPatrol ) [ 1 ] ;
11119: LD_ADDR_EXP 9
11123: PUSH
11124: LD_INT 3
11126: PUSH
11127: LD_INT 6
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PPUSH
11134: LD_INT 2
11136: PPUSH
11137: LD_EXP 47
11141: PPUSH
11142: CALL 1965 0 3
11146: PUSH
11147: LD_INT 1
11149: ARRAY
11150: ST_TO_ADDR
11151: END
// every 0 0$1 trigger russianAlert do var i , tmp , towers , noncombat ;
11152: LD_EXP 9
11156: IFFALSE 11453
11158: GO 11160
11160: DISABLE
11161: LD_INT 0
11163: PPUSH
11164: PPUSH
11165: PPUSH
11166: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ [ f_class , 1 ] , [ f_inside ] ] ) ;
11167: LD_ADDR_VAR 0 2
11171: PUSH
11172: LD_EXP 44
11176: PPUSH
11177: LD_INT 25
11179: PUSH
11180: LD_INT 1
11182: PUSH
11183: EMPTY
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 54
11189: PUSH
11190: EMPTY
11191: LIST
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PPUSH
11197: CALL_OW 72
11201: ST_TO_ADDR
// towers := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_bunker ] ] ) ;
11202: LD_ADDR_VAR 0 3
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 6
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 30
11219: PUSH
11220: LD_INT 32
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: ST_TO_ADDR
// for i := 1 to tmp do
11236: LD_ADDR_VAR 0 1
11240: PUSH
11241: DOUBLE
11242: LD_INT 1
11244: DEC
11245: ST_TO_ADDR
11246: LD_VAR 0 2
11250: PUSH
11251: FOR_TO
11252: IFFALSE 11297
// begin ComExitBuilding ( tmp [ i ] ) ;
11254: LD_VAR 0 2
11258: PUSH
11259: LD_VAR 0 1
11263: ARRAY
11264: PPUSH
11265: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , towers [ i ] ) ;
11269: LD_VAR 0 2
11273: PUSH
11274: LD_VAR 0 1
11278: ARRAY
11279: PPUSH
11280: LD_VAR 0 3
11284: PUSH
11285: LD_VAR 0 1
11289: ARRAY
11290: PPUSH
11291: CALL_OW 180
// end ;
11295: GO 11251
11297: POP
11298: POP
// noncombat := Popov union UnitFilter ( kirovBaseSquad union beriaBaseSquad , [ f_not , [ f_class , 1 ] ] ) ;
11299: LD_ADDR_VAR 0 4
11303: PUSH
11304: LD_EXP 42
11308: PUSH
11309: LD_EXP 44
11313: PUSH
11314: LD_EXP 45
11318: UNION
11319: PPUSH
11320: LD_INT 3
11322: PUSH
11323: LD_INT 25
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PPUSH
11337: CALL_OW 72
11341: UNION
11342: ST_TO_ADDR
// for i in noncombat do
11343: LD_ADDR_VAR 0 1
11347: PUSH
11348: LD_VAR 0 4
11352: PUSH
11353: FOR_IN
11354: IFFALSE 11390
// begin if IsInUnit ( i ) then
11356: LD_VAR 0 1
11360: PPUSH
11361: CALL_OW 310
11365: IFFALSE 11376
// ComExitBuilding ( i ) ;
11367: LD_VAR 0 1
11371: PPUSH
11372: CALL_OW 122
// AddComMoveToArea ( i , westEscapeArea ) ;
11376: LD_VAR 0 1
11380: PPUSH
11381: LD_INT 16
11383: PPUSH
11384: CALL_OW 173
// end ;
11388: GO 11353
11390: POP
11391: POP
// if not allowHeikeAttack then
11392: LD_EXP 11
11396: NOT
11397: IFFALSE 11401
// exit ;
11399: GO 11453
// SayRadio ( Kurin , D9a-Kur-1 ) ;
11401: LD_EXP 40
11405: PPUSH
11406: LD_STRING D9a-Kur-1
11408: PPUSH
11409: CALL_OW 94
// SayRadio ( Burlak , D9a-Bur-1 ) ;
11413: LD_EXP 43
11417: PPUSH
11418: LD_STRING D9a-Bur-1
11420: PPUSH
11421: CALL_OW 94
// SayRadio ( Kurin , D9a-Kur-2 ) ;
11425: LD_EXP 40
11429: PPUSH
11430: LD_STRING D9a-Kur-2
11432: PPUSH
11433: CALL_OW 94
// omicronFall := true ;
11437: LD_ADDR_EXP 13
11441: PUSH
11442: LD_INT 1
11444: ST_TO_ADDR
// retreatFromOmicron := true ;
11445: LD_ADDR_EXP 20
11449: PUSH
11450: LD_INT 1
11452: ST_TO_ADDR
// end ;
11453: PPOPN 4
11455: END
// every 0 0$1 trigger FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do var i ;
11456: LD_INT 16
11458: PPUSH
11459: LD_INT 3
11461: PUSH
11462: LD_INT 22
11464: PUSH
11465: LD_INT 2
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: PUSH
11472: EMPTY
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 23
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: PPUSH
11490: CALL_OW 70
11494: IFFALSE 11577
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
// begin enable ;
11502: ENABLE
// for i in FilterUnitsInArea ( westEscapeArea , [ [ f_not , [ f_side , 2 ] ] , [ f_nation , 3 ] ] ) do
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_INT 16
11510: PPUSH
11511: LD_INT 3
11513: PUSH
11514: LD_INT 22
11516: PUSH
11517: LD_INT 2
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 23
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 70
11546: PUSH
11547: FOR_IN
11548: IFFALSE 11575
// begin escapeCounter := escapeCounter + 1 ;
11550: LD_ADDR_EXP 19
11554: PUSH
11555: LD_EXP 19
11559: PUSH
11560: LD_INT 1
11562: PLUS
11563: ST_TO_ADDR
// RemoveUnit ( i ) ;
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 64
// end ;
11573: GO 11547
11575: POP
11576: POP
// end ;
11577: PPOPN 1
11579: END
// every 0 0$1 trigger tick >= 6 6$30 + rand ( 0 , 1 1$30 ) do
11580: LD_OWVAR 1
11584: PUSH
11585: LD_INT 13650
11587: PUSH
11588: LD_INT 0
11590: PPUSH
11591: LD_INT 3150
11593: PPUSH
11594: CALL_OW 12
11598: PLUS
11599: GREATEREQUAL
11600: IFFALSE 11609
11602: GO 11604
11604: DISABLE
// SmallAmericanReinforcements ;
11605: CALL 7103 0 0
11609: END
// every 0 0$1 trigger tick >= 9 9$15 do
11610: LD_OWVAR 1
11614: PUSH
11615: LD_INT 19425
11617: GREATEREQUAL
11618: IFFALSE 11683
11620: GO 11622
11622: DISABLE
// begin ComAgressiveMove ( UnitFilter ( russianOmicronAttackers , [ f_type , unit_vehicle ] ) , 62 , 22 ) ;
11623: LD_EXP 48
11627: PPUSH
11628: LD_INT 21
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PPUSH
11638: CALL_OW 72
11642: PPUSH
11643: LD_INT 62
11645: PPUSH
11646: LD_INT 22
11648: PPUSH
11649: CALL_OW 114
// ComMoveXY ( russianCargo , 69 , 27 ) ;
11653: LD_EXP 49
11657: PPUSH
11658: LD_INT 69
11660: PPUSH
11661: LD_INT 27
11663: PPUSH
11664: CALL_OW 111
// wait ( 1 1$00 ) ;
11668: LD_INT 2100
11670: PPUSH
11671: CALL_OW 67
// startAttackOnOmicron := true ;
11675: LD_ADDR_EXP 6
11679: PUSH
11680: LD_INT 1
11682: ST_TO_ADDR
// end ;
11683: END
// every 0 0$2 trigger omarCountdown = 0 do var i , driver , veh , un , tmp , tmp2 , enemy ;
11684: LD_EXP 22
11688: PUSH
11689: LD_INT 0
11691: EQUAL
11692: IFFALSE 13565
11694: GO 11696
11696: DISABLE
11697: LD_INT 0
11699: PPUSH
11700: PPUSH
11701: PPUSH
11702: PPUSH
11703: PPUSH
11704: PPUSH
11705: PPUSH
// begin ChangeSideFog ( 5 , 2 ) ;
11706: LD_INT 5
11708: PPUSH
11709: LD_INT 2
11711: PPUSH
11712: CALL_OW 343
// PrepareOmarForces ;
11716: CALL 2530 0 0
// wait ( 0 0$03 ) ;
11720: LD_INT 105
11722: PPUSH
11723: CALL_OW 67
// allowHeikeAttack := true ;
11727: LD_ADDR_EXP 11
11731: PUSH
11732: LD_INT 1
11734: ST_TO_ADDR
// activeGrishkoAI := false ;
11735: LD_ADDR_EXP 10
11739: PUSH
11740: LD_INT 0
11742: ST_TO_ADDR
// if not hillBase then
11743: LD_EXP 15
11747: NOT
11748: IFFALSE 11757
// ChangeMissionObjectives ( HillDone ) ;
11750: LD_STRING HillDone
11752: PPUSH
11753: CALL_OW 337
// CenterOnUnits ( Omar ) ;
11757: LD_EXP 33
11761: PPUSH
11762: CALL_OW 85
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
11766: LD_ADDR_VAR 0 1
11770: PUSH
11771: LD_INT 22
11773: PUSH
11774: LD_INT 2
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 21
11783: PUSH
11784: LD_INT 1
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PPUSH
11795: CALL_OW 69
11799: PUSH
11800: FOR_IN
11801: IFFALSE 11825
// if HasTask ( i ) then
11803: LD_VAR 0 1
11807: PPUSH
11808: CALL_OW 314
11812: IFFALSE 11823
// ComHold ( i ) ;
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 140
11823: GO 11800
11825: POP
11826: POP
// DialogueOn ;
11827: CALL_OW 6
// SayRadio ( Omar , DO-assault-1 ) ;
11831: LD_EXP 33
11835: PPUSH
11836: LD_STRING DO-assault-1
11838: PPUSH
11839: CALL_OW 94
// DialogueOff ;
11843: CALL_OW 7
// for i in UnitFilter ( grishkoSquad , [ f_not , [ f_inside ] ] ) do
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_EXP 46
11856: PPUSH
11857: LD_INT 3
11859: PUSH
11860: LD_INT 54
11862: PUSH
11863: EMPTY
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 72
11874: PUSH
11875: FOR_IN
11876: IFFALSE 11895
// ComMoveXY ( i , 226 , 114 ) ;
11878: LD_VAR 0 1
11882: PPUSH
11883: LD_INT 226
11885: PPUSH
11886: LD_INT 114
11888: PPUSH
11889: CALL_OW 111
11893: GO 11875
11895: POP
11896: POP
// ComEnterUnit ( Grishko , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_armoury ] ] ) , Grishko ) ) ;
11897: LD_EXP 41
11901: PPUSH
11902: LD_INT 22
11904: PUSH
11905: LD_INT 6
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: PUSH
11912: LD_INT 30
11914: PUSH
11915: LD_INT 4
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: PPUSH
11931: LD_EXP 41
11935: PPUSH
11936: CALL_OW 74
11940: PPUSH
11941: CALL_OW 120
// ChangeMissionObjectives ( Attack ) ;
11945: LD_STRING Attack
11947: PPUSH
11948: CALL_OW 337
// music_class := music_combat ;
11952: LD_ADDR_OWVAR 72
11956: PUSH
11957: LD_INT 1
11959: ST_TO_ADDR
// music_nat := 4 ;
11960: LD_ADDR_OWVAR 71
11964: PUSH
11965: LD_INT 4
11967: ST_TO_ADDR
// DoNotAttack ( 5 , Grishko ) ;
11968: LD_INT 5
11970: PPUSH
11971: LD_EXP 41
11975: PPUSH
11976: CALL_OW 471
// DoNotAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
11980: LD_INT 6
11982: PPUSH
11983: LD_EXP 38
11987: PPUSH
11988: LD_INT 25
11990: PUSH
11991: LD_INT 1
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PPUSH
11998: CALL_OW 72
12002: PUSH
12003: LD_INT 4
12005: ARRAY
12006: PPUSH
12007: CALL_OW 471
// for i in UnitFilter ( omarSquad , [ f_not , [ f_class , 4 ] ] ) do
12011: LD_ADDR_VAR 0 1
12015: PUSH
12016: LD_EXP 38
12020: PPUSH
12021: LD_INT 3
12023: PUSH
12024: LD_INT 25
12026: PUSH
12027: LD_INT 4
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PPUSH
12038: CALL_OW 72
12042: PUSH
12043: FOR_IN
12044: IFFALSE 12063
// ComAgressiveMove ( i , 221 , 110 ) ;
12046: LD_VAR 0 1
12050: PPUSH
12051: LD_INT 221
12053: PPUSH
12054: LD_INT 110
12056: PPUSH
12057: CALL_OW 114
12061: GO 12043
12063: POP
12064: POP
// ComMoveXY ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , 214 , 124 ) ;
12065: LD_EXP 38
12069: PPUSH
12070: LD_INT 25
12072: PUSH
12073: LD_INT 4
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PPUSH
12080: CALL_OW 72
12084: PPUSH
12085: LD_INT 214
12087: PPUSH
12088: LD_INT 124
12090: PPUSH
12091: CALL_OW 111
// ComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 214 , 114 , 0 ) ;
12095: LD_EXP 38
12099: PPUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PPUSH
12110: CALL_OW 72
12114: PUSH
12115: LD_INT 4
12117: ARRAY
12118: PPUSH
12119: LD_INT 214
12121: PPUSH
12122: LD_INT 114
12124: PPUSH
12125: LD_INT 0
12127: PPUSH
12128: CALL_OW 132
// SayRadio ( Grishko , D9-Gri-1 ) ;
12132: LD_EXP 41
12136: PPUSH
12137: LD_STRING D9-Gri-1
12139: PPUSH
12140: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-1 ) ;
12144: LD_EXP 40
12148: PPUSH
12149: LD_STRING D9-Kur-1
12151: PPUSH
12152: CALL_OW 94
// wait ( 0 0$1 ) ;
12156: LD_INT 35
12158: PPUSH
12159: CALL_OW 67
// ComAgressiveMove ( Omar , 233 , 130 ) ;
12163: LD_EXP 33
12167: PPUSH
12168: LD_INT 233
12170: PPUSH
12171: LD_INT 130
12173: PPUSH
12174: CALL_OW 114
// SayRadio ( Grishko , D9-Gri-2 ) ;
12178: LD_EXP 41
12182: PPUSH
12183: LD_STRING D9-Gri-2
12185: PPUSH
12186: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-2 ) ;
12190: LD_EXP 40
12194: PPUSH
12195: LD_STRING D9-Kur-2
12197: PPUSH
12198: CALL_OW 94
// ComExitBuilding ( Grishko ) ;
12202: LD_EXP 41
12206: PPUSH
12207: CALL_OW 122
// AddComMoveXY ( Grishko , 211 , 104 ) ;
12211: LD_EXP 41
12215: PPUSH
12216: LD_INT 211
12218: PPUSH
12219: LD_INT 104
12221: PPUSH
12222: CALL_OW 171
// AddComHold ( Grishko ) ;
12226: LD_EXP 41
12230: PPUSH
12231: CALL_OW 200
// repeat wait ( 3 ) ;
12235: LD_INT 3
12237: PPUSH
12238: CALL_OW 67
// until not IsInUnit ( Grishko ) ;
12242: LD_EXP 41
12246: PPUSH
12247: CALL_OW 310
12251: NOT
12252: IFFALSE 12235
// ComAttackUnit ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , Grishko ) ;
12254: LD_EXP 38
12258: PPUSH
12259: LD_INT 34
12261: PUSH
12262: LD_INT 26
12264: PUSH
12265: EMPTY
12266: LIST
12267: LIST
12268: PPUSH
12269: CALL_OW 72
12273: PPUSH
12274: LD_EXP 41
12278: PPUSH
12279: CALL_OW 115
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_weapon , ar_flame_thrower ] ) , 215 , 106 ) ;
12283: LD_EXP 38
12287: PPUSH
12288: LD_INT 34
12290: PUSH
12291: LD_INT 26
12293: PUSH
12294: EMPTY
12295: LIST
12296: LIST
12297: PPUSH
12298: CALL_OW 72
12302: PPUSH
12303: LD_INT 215
12305: PPUSH
12306: LD_INT 106
12308: PPUSH
12309: CALL_OW 174
// repeat wait ( 3 ) ;
12313: LD_INT 3
12315: PPUSH
12316: CALL_OW 67
// until GetLives ( Grishko ) < 1000 ;
12320: LD_EXP 41
12324: PPUSH
12325: CALL_OW 256
12329: PUSH
12330: LD_INT 1000
12332: LESS
12333: IFFALSE 12313
// NormalAttack ( 5 , Grishko ) ;
12335: LD_INT 5
12337: PPUSH
12338: LD_EXP 41
12342: PPUSH
12343: CALL_OW 472
// NormalAttack ( 6 , UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] ) ;
12347: LD_INT 6
12349: PPUSH
12350: LD_EXP 38
12354: PPUSH
12355: LD_INT 25
12357: PUSH
12358: LD_INT 1
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 72
12369: PUSH
12370: LD_INT 4
12372: ARRAY
12373: PPUSH
12374: CALL_OW 472
// SayRadio ( Grishko , D9-Gri-3 ) ;
12378: LD_EXP 41
12382: PPUSH
12383: LD_STRING D9-Gri-3
12385: PPUSH
12386: CALL_OW 94
// SayRadio ( Kurin , D9-Kur-3 ) ;
12390: LD_EXP 40
12394: PPUSH
12395: LD_STRING D9-Kur-3
12397: PPUSH
12398: CALL_OW 94
// music_class := music_auto ;
12402: LD_ADDR_OWVAR 72
12406: PUSH
12407: LD_INT 0
12409: ST_TO_ADDR
// music_nat := music_auto ;
12410: LD_ADDR_OWVAR 71
12414: PUSH
12415: LD_INT 0
12417: ST_TO_ADDR
// for i in omarSquad do
12418: LD_ADDR_VAR 0 1
12422: PUSH
12423: LD_EXP 38
12427: PUSH
12428: FOR_IN
12429: IFFALSE 12571
// begin if GetType ( i ) = unit_vehicle and GetLives ( i ) < 1000 then
12431: LD_VAR 0 1
12435: PPUSH
12436: CALL_OW 247
12440: PUSH
12441: LD_INT 2
12443: EQUAL
12444: PUSH
12445: LD_VAR 0 1
12449: PPUSH
12450: CALL_OW 256
12454: PUSH
12455: LD_INT 1000
12457: LESS
12458: AND
12459: IFFALSE 12525
// begin driver := IsDrivenBy ( i ) ;
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: LD_VAR 0 1
12470: PPUSH
12471: CALL_OW 311
12475: ST_TO_ADDR
// veh := i ;
12476: LD_ADDR_VAR 0 3
12480: PUSH
12481: LD_VAR 0 1
12485: ST_TO_ADDR
// ComExitVehicle ( driver ) ;
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 121
// AddComRepairVehicle ( driver , veh ) ;
12495: LD_VAR 0 2
12499: PPUSH
12500: LD_VAR 0 3
12504: PPUSH
12505: CALL_OW 189
// AddComEnterUnit ( driver , veh ) ;
12509: LD_VAR 0 2
12513: PPUSH
12514: LD_VAR 0 3
12518: PPUSH
12519: CALL_OW 180
// end else
12523: GO 12569
// if GetLives ( i ) < 500 then
12525: LD_VAR 0 1
12529: PPUSH
12530: CALL_OW 256
12534: PUSH
12535: LD_INT 500
12537: LESS
12538: IFFALSE 12569
// begin AddComHeal ( UnitFilter ( omarSquad , [ f_class , 4 ] ) , i ) ;
12540: LD_EXP 38
12544: PPUSH
12545: LD_INT 25
12547: PUSH
12548: LD_INT 4
12550: PUSH
12551: EMPTY
12552: LIST
12553: LIST
12554: PPUSH
12555: CALL_OW 72
12559: PPUSH
12560: LD_VAR 0 1
12564: PPUSH
12565: CALL_OW 188
// end ; end ;
12569: GO 12428
12571: POP
12572: POP
// repeat wait ( 0 0$1 ) ;
12573: LD_INT 35
12575: PPUSH
12576: CALL_OW 67
// until not UnitFilter ( omarSquad , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] ] ) and not UnitFilter ( omarSquad , [ f_not , [ f_lives , 250 ] ] ) ;
12580: LD_EXP 38
12584: PPUSH
12585: LD_INT 3
12587: PUSH
12588: LD_INT 24
12590: PUSH
12591: LD_INT 1000
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 2
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 72
12620: NOT
12621: PUSH
12622: LD_EXP 38
12626: PPUSH
12627: LD_INT 3
12629: PUSH
12630: LD_INT 24
12632: PUSH
12633: LD_INT 250
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: EMPTY
12641: LIST
12642: LIST
12643: PPUSH
12644: CALL_OW 72
12648: NOT
12649: AND
12650: IFFALSE 12573
// wait ( 0 0$2 ) ;
12652: LD_INT 70
12654: PPUSH
12655: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ [ f_empty ] , [ f_type , unit_vehicle ] ] ) ;
12659: LD_ADDR_VAR 0 5
12663: PUSH
12664: LD_EXP 38
12668: PPUSH
12669: LD_INT 58
12671: PUSH
12672: EMPTY
12673: LIST
12674: PUSH
12675: LD_INT 21
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: EMPTY
12686: LIST
12687: LIST
12688: PPUSH
12689: CALL_OW 72
12693: ST_TO_ADDR
// tmp2 := UnitFilter ( omarSquad , [ [ f_class , 3 ] , [ f_not , [ f_driving ] ] ] ) ;
12694: LD_ADDR_VAR 0 6
12698: PUSH
12699: LD_EXP 38
12703: PPUSH
12704: LD_INT 25
12706: PUSH
12707: LD_INT 3
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 3
12716: PUSH
12717: LD_INT 55
12719: PUSH
12720: EMPTY
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: PPUSH
12731: CALL_OW 72
12735: ST_TO_ADDR
// for i := 1 to tmp do
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: DOUBLE
12742: LD_INT 1
12744: DEC
12745: ST_TO_ADDR
12746: LD_VAR 0 5
12750: PUSH
12751: FOR_TO
12752: IFFALSE 12782
// ComEnterUnit ( tmp2 [ i ] , tmp [ i ] ) ;
12754: LD_VAR 0 6
12758: PUSH
12759: LD_VAR 0 1
12763: ARRAY
12764: PPUSH
12765: LD_VAR 0 5
12769: PUSH
12770: LD_VAR 0 1
12774: ARRAY
12775: PPUSH
12776: CALL_OW 120
12780: GO 12751
12782: POP
12783: POP
// wait ( 0 0$5 ) ;
12784: LD_INT 175
12786: PPUSH
12787: CALL_OW 67
// ComMoveXY ( omarSquad , 199 , 141 ) ;
12791: LD_EXP 38
12795: PPUSH
12796: LD_INT 199
12798: PPUSH
12799: LD_INT 141
12801: PPUSH
12802: CALL_OW 111
// ComMoveXY ( Omar , 190 , 143 ) ;
12806: LD_EXP 33
12810: PPUSH
12811: LD_INT 190
12813: PPUSH
12814: LD_INT 143
12816: PPUSH
12817: CALL_OW 111
// AddComHold ( Omar ) ;
12821: LD_EXP 33
12825: PPUSH
12826: CALL_OW 200
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_or , [ f_class , 1 ] , [ f_class , 4 ] ] ) , 161 , 130 ) ;
12830: LD_EXP 38
12834: PPUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 25
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 25
12850: PUSH
12851: LD_INT 4
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: PPUSH
12863: CALL_OW 72
12867: PPUSH
12868: LD_INT 161
12870: PPUSH
12871: LD_INT 130
12873: PPUSH
12874: CALL_OW 174
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_class , 1 ] ) , 163 , 122 ) ;
12878: LD_EXP 38
12882: PPUSH
12883: LD_INT 25
12885: PUSH
12886: LD_INT 1
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 72
12897: PPUSH
12898: LD_INT 163
12900: PPUSH
12901: LD_INT 122
12903: PPUSH
12904: CALL_OW 174
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 165 , 118 , 0 ) ;
12908: LD_EXP 38
12912: PPUSH
12913: LD_INT 25
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PPUSH
12923: CALL_OW 72
12927: PUSH
12928: LD_INT 4
12930: ARRAY
12931: PPUSH
12932: LD_INT 165
12934: PPUSH
12935: LD_INT 118
12937: PPUSH
12938: LD_INT 0
12940: PPUSH
12941: CALL_OW 192
// AddComPlaceDelayedCharge ( UnitFilter ( omarSquad , [ f_class , 1 ] ) [ 4 ] , 159 , 116 , 0 ) ;
12945: LD_EXP 38
12949: PPUSH
12950: LD_INT 25
12952: PUSH
12953: LD_INT 1
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: PPUSH
12960: CALL_OW 72
12964: PUSH
12965: LD_INT 4
12967: ARRAY
12968: PPUSH
12969: LD_INT 159
12971: PPUSH
12972: LD_INT 116
12974: PPUSH
12975: LD_INT 0
12977: PPUSH
12978: CALL_OW 192
// AddComAgressiveMove ( UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) , 169 , 114 ) ;
12982: LD_EXP 38
12986: PPUSH
12987: LD_INT 21
12989: PUSH
12990: LD_INT 2
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PPUSH
12997: CALL_OW 72
13001: PPUSH
13002: LD_INT 169
13004: PPUSH
13005: LD_INT 114
13007: PPUSH
13008: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
13012: LD_INT 35
13014: PPUSH
13015: CALL_OW 67
// tmp := UnitFilter ( omarSquad , [ f_class , 1 ] ) ;
13019: LD_ADDR_VAR 0 5
13023: PUSH
13024: LD_EXP 38
13028: PPUSH
13029: LD_INT 25
13031: PUSH
13032: LD_INT 1
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PPUSH
13039: CALL_OW 72
13043: ST_TO_ADDR
// for i in tmp do
13044: LD_ADDR_VAR 0 1
13048: PUSH
13049: LD_VAR 0 5
13053: PUSH
13054: FOR_IN
13055: IFFALSE 13152
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 161 , 130 ) > 6 then
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 256
13066: PUSH
13067: LD_INT 600
13069: LESS
13070: PUSH
13071: LD_VAR 0 1
13075: PPUSH
13076: LD_INT 161
13078: PPUSH
13079: LD_INT 130
13081: PPUSH
13082: CALL_OW 297
13086: PUSH
13087: LD_INT 6
13089: GREATER
13090: AND
13091: IFFALSE 13108
// ComMoveXY ( i , 161 , 130 ) ;
13093: LD_VAR 0 1
13097: PPUSH
13098: LD_INT 161
13100: PPUSH
13101: LD_INT 130
13103: PPUSH
13104: CALL_OW 111
// if GetLives ( i ) = 1000 and not HasTask ( i ) then
13108: LD_VAR 0 1
13112: PPUSH
13113: CALL_OW 256
13117: PUSH
13118: LD_INT 1000
13120: EQUAL
13121: PUSH
13122: LD_VAR 0 1
13126: PPUSH
13127: CALL_OW 314
13131: NOT
13132: AND
13133: IFFALSE 13150
// ComAgressiveMove ( i , 160 , 109 ) ;
13135: LD_VAR 0 1
13139: PPUSH
13140: LD_INT 160
13142: PPUSH
13143: LD_INT 109
13145: PPUSH
13146: CALL_OW 114
// end ;
13150: GO 13054
13152: POP
13153: POP
// tmp := UnitFilter ( omarSquad , [ f_type , unit_vehicle ] ) ;
13154: LD_ADDR_VAR 0 5
13158: PUSH
13159: LD_EXP 38
13163: PPUSH
13164: LD_INT 21
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PPUSH
13174: CALL_OW 72
13178: ST_TO_ADDR
// for i in tmp do
13179: LD_ADDR_VAR 0 1
13183: PUSH
13184: LD_VAR 0 5
13188: PUSH
13189: FOR_IN
13190: IFFALSE 13456
// begin tmp2 := IsDrivenBy ( i ) ;
13192: LD_ADDR_VAR 0 6
13196: PUSH
13197: LD_VAR 0 1
13201: PPUSH
13202: CALL_OW 311
13206: ST_TO_ADDR
// if not tmp2 then
13207: LD_VAR 0 6
13211: NOT
13212: IFFALSE 13216
// continue ;
13214: GO 13189
// if GetLives ( i ) >= 600 and GetTag ( i ) = 1 then
13216: LD_VAR 0 1
13220: PPUSH
13221: CALL_OW 256
13225: PUSH
13226: LD_INT 600
13228: GREATEREQUAL
13229: PUSH
13230: LD_VAR 0 1
13234: PPUSH
13235: CALL_OW 110
13239: PUSH
13240: LD_INT 1
13242: EQUAL
13243: AND
13244: IFFALSE 13258
// SetTag ( i , 0 ) ;
13246: LD_VAR 0 1
13250: PPUSH
13251: LD_INT 0
13253: PPUSH
13254: CALL_OW 109
// if GetLives ( i ) >= 600 and not GetTag ( i ) then
13258: LD_VAR 0 1
13262: PPUSH
13263: CALL_OW 256
13267: PUSH
13268: LD_INT 600
13270: GREATEREQUAL
13271: PUSH
13272: LD_VAR 0 1
13276: PPUSH
13277: CALL_OW 110
13281: NOT
13282: AND
13283: IFFALSE 13309
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
13285: LD_VAR 0 1
13289: PPUSH
13290: LD_VAR 0 7
13294: PPUSH
13295: LD_VAR 0 1
13299: PPUSH
13300: CALL_OW 74
13304: PPUSH
13305: CALL_OW 115
// if GetLives ( i ) < 600 and not GetTag ( i ) then
13309: LD_VAR 0 1
13313: PPUSH
13314: CALL_OW 256
13318: PUSH
13319: LD_INT 600
13321: LESS
13322: PUSH
13323: LD_VAR 0 1
13327: PPUSH
13328: CALL_OW 110
13332: NOT
13333: AND
13334: IFFALSE 13363
// begin SetTag ( i , 1 ) ;
13336: LD_VAR 0 1
13340: PPUSH
13341: LD_INT 1
13343: PPUSH
13344: CALL_OW 109
// ComMoveXY ( i , 202 , 150 ) ;
13348: LD_VAR 0 1
13352: PPUSH
13353: LD_INT 202
13355: PPUSH
13356: LD_INT 150
13358: PPUSH
13359: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 202 , 150 ) < 6 and tmp2 then
13363: LD_VAR 0 1
13367: PPUSH
13368: CALL_OW 110
13372: PUSH
13373: LD_INT 1
13375: EQUAL
13376: PUSH
13377: LD_VAR 0 1
13381: PPUSH
13382: LD_INT 202
13384: PPUSH
13385: LD_INT 150
13387: PPUSH
13388: CALL_OW 297
13392: PUSH
13393: LD_INT 6
13395: LESS
13396: AND
13397: PUSH
13398: LD_VAR 0 6
13402: AND
13403: IFFALSE 13454
// begin ComExitVehicle ( tmp2 ) ;
13405: LD_VAR 0 6
13409: PPUSH
13410: CALL_OW 121
// AddComRepairVehicle ( tmp2 , i ) ;
13414: LD_VAR 0 6
13418: PPUSH
13419: LD_VAR 0 1
13423: PPUSH
13424: CALL_OW 189
// AddComWait ( tmp2 , 0 0$20 ) ;
13428: LD_VAR 0 6
13432: PPUSH
13433: LD_INT 700
13435: PPUSH
13436: CALL_OW 202
// AddComEnterUnit ( tmp2 , i ) ;
13440: LD_VAR 0 6
13444: PPUSH
13445: LD_VAR 0 1
13449: PPUSH
13450: CALL_OW 180
// end ; end ;
13454: GO 13189
13456: POP
13457: POP
// until kirovDestroyed ;
13458: LD_EXP 16
13462: IFFALSE 13012
// repeat wait ( 0 0$1 ) ;
13464: LD_INT 35
13466: PPUSH
13467: CALL_OW 67
// for i in omarSquad union Omar do
13471: LD_ADDR_VAR 0 1
13475: PUSH
13476: LD_EXP 38
13480: PUSH
13481: LD_EXP 33
13485: UNION
13486: PUSH
13487: FOR_IN
13488: IFFALSE 13532
// if IsInArea ( i , southRoadArea ) then
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 15
13497: PPUSH
13498: CALL_OW 308
13502: IFFALSE 13515
// RemoveUnit ( i ) else
13504: LD_VAR 0 1
13508: PPUSH
13509: CALL_OW 64
13513: GO 13530
// ComMoveXY ( i , 208 , 162 ) ;
13515: LD_VAR 0 1
13519: PPUSH
13520: LD_INT 208
13522: PPUSH
13523: LD_INT 162
13525: PPUSH
13526: CALL_OW 111
13530: GO 13487
13532: POP
13533: POP
// until not FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ;
13534: LD_INT 22
13536: PUSH
13537: LD_INT 5
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 21
13546: PUSH
13547: LD_INT 1
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PPUSH
13558: CALL_OW 69
13562: NOT
13563: IFFALSE 13464
// end ;
13565: PPOPN 7
13567: END
// every 0 0$1 trigger IsDead ( kirov ) do
13568: LD_INT 71
13570: PPUSH
13571: CALL_OW 301
13575: IFFALSE 13592
13577: GO 13579
13579: DISABLE
// Say ( Heike , DH-1-Kirov ) ;
13580: LD_EXP 25
13584: PPUSH
13585: LD_STRING DH-1-Kirov
13587: PPUSH
13588: CALL_OW 88
13592: END
// every 0 0$1 trigger See ( 2 , beria ) do
13593: LD_INT 2
13595: PPUSH
13596: LD_INT 106
13598: PPUSH
13599: CALL_OW 292
13603: IFFALSE 13620
13605: GO 13607
13607: DISABLE
// Say ( Heike , DH-1-Beria ) ;
13608: LD_EXP 25
13612: PPUSH
13613: LD_STRING DH-1-Beria
13615: PPUSH
13616: CALL_OW 88
13620: END
// every 0 0$1 trigger See ( 2 , kagan ) do
13621: LD_INT 2
13623: PPUSH
13624: LD_INT 112
13626: PPUSH
13627: CALL_OW 292
13631: IFFALSE 13876
13633: GO 13635
13635: DISABLE
// begin DialogueOn ;
13636: CALL_OW 6
// CenterNowOnUnits ( kagan ) ;
13640: LD_INT 112
13642: PPUSH
13643: CALL_OW 87
// Say ( Heike , DH-1-Kagan ) ;
13647: LD_EXP 25
13651: PPUSH
13652: LD_STRING DH-1-Kagan
13654: PPUSH
13655: CALL_OW 88
// if Kamil then
13659: LD_EXP 29
13663: IFFALSE 13701
// begin Say ( Kamil , DKam-Kagan-2 ) ;
13665: LD_EXP 29
13669: PPUSH
13670: LD_STRING DKam-Kagan-2
13672: PPUSH
13673: CALL_OW 88
// Say ( Givi , DG-Kagan-3 ) ;
13677: LD_EXP 26
13681: PPUSH
13682: LD_STRING DG-Kagan-3
13684: PPUSH
13685: CALL_OW 88
// Say ( Givi , DG-Kagan-4 ) ;
13689: LD_EXP 26
13693: PPUSH
13694: LD_STRING DG-Kagan-4
13696: PPUSH
13697: CALL_OW 88
// end ; case Query ( KaganBase ) of 1 :
13701: LD_STRING KaganBase
13703: PPUSH
13704: CALL_OW 97
13708: PUSH
13709: LD_INT 1
13711: DOUBLE
13712: EQUAL
13713: IFTRUE 13717
13715: GO 13812
13717: POP
// begin Say ( Heike , DH-Kagan-5 ) ;
13718: LD_EXP 25
13722: PPUSH
13723: LD_STRING DH-Kagan-5
13725: PPUSH
13726: CALL_OW 88
// Say ( Heike , DH-Kagan-6 ) ;
13730: LD_EXP 25
13734: PPUSH
13735: LD_STRING DH-Kagan-6
13737: PPUSH
13738: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-7 ) ;
13742: LD_EXP 36
13746: PPUSH
13747: LD_STRING DShar-Kagan-7
13749: PPUSH
13750: CALL_OW 94
// Say ( Heike , DH-Kagan-8 ) ;
13754: LD_EXP 25
13758: PPUSH
13759: LD_STRING DH-Kagan-8
13761: PPUSH
13762: CALL_OW 88
// Say ( Heike , DH-Kagan-9 ) ;
13766: LD_EXP 25
13770: PPUSH
13771: LD_STRING DH-Kagan-9
13773: PPUSH
13774: CALL_OW 88
// SayRadio ( Shariff , DShar-Kagan-10 ) ;
13778: LD_EXP 36
13782: PPUSH
13783: LD_STRING DShar-Kagan-10
13785: PPUSH
13786: CALL_OW 94
// Say ( Heike , DH-Kagan-11 ) ;
13790: LD_EXP 25
13794: PPUSH
13795: LD_STRING DH-Kagan-11
13797: PPUSH
13798: CALL_OW 88
// kaganCaptured := true ;
13802: LD_ADDR_EXP 24
13806: PUSH
13807: LD_INT 1
13809: ST_TO_ADDR
// end ; 2 :
13810: GO 13872
13812: LD_INT 2
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 13871
13820: POP
// begin Say ( Heike , DH-Kagan-a-5 ) ;
13821: LD_EXP 25
13825: PPUSH
13826: LD_STRING DH-Kagan-a-5
13828: PPUSH
13829: CALL_OW 88
// Say ( Heike , DH-Kagan-a-6 ) ;
13833: LD_EXP 25
13837: PPUSH
13838: LD_STRING DH-Kagan-a-6
13840: PPUSH
13841: CALL_OW 88
// Say ( Heike , DH-Kagan-a-7 ) ;
13845: LD_EXP 25
13849: PPUSH
13850: LD_STRING DH-Kagan-a-7
13852: PPUSH
13853: CALL_OW 88
// Say ( Givi , DG-Kagan-a-8 ) ;
13857: LD_EXP 26
13861: PPUSH
13862: LD_STRING DG-Kagan-a-8
13864: PPUSH
13865: CALL_OW 88
// end ; end ;
13869: GO 13872
13871: POP
// DialogueOff ;
13872: CALL_OW 7
// end ;
13876: END
// every 0 0$1 trigger startAttackOnOmicron and UnitFilter ( russianOmicronAttackers , [ f_inarea , russianOmParkingArea ] ) do
13877: LD_EXP 6
13881: PUSH
13882: LD_EXP 48
13886: PPUSH
13887: LD_INT 95
13889: PUSH
13890: LD_INT 19
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PPUSH
13897: CALL_OW 72
13901: AND
13902: IFFALSE 13979
13904: GO 13906
13906: DISABLE
// begin DialogueOn ;
13907: CALL_OW 6
// CenterNowOnXY ( 63 , 32 ) ;
13911: LD_INT 63
13913: PPUSH
13914: LD_INT 32
13916: PPUSH
13917: CALL_OW 86
// PlaceSeeing ( 63 , 32 , 2 , - 12 ) ;
13921: LD_INT 63
13923: PPUSH
13924: LD_INT 32
13926: PPUSH
13927: LD_INT 2
13929: PPUSH
13930: LD_INT 12
13932: NEG
13933: PPUSH
13934: CALL_OW 330
// Say ( Heike , DH-Omicron-1 ) ;
13938: LD_EXP 25
13942: PPUSH
13943: LD_STRING DH-Omicron-1
13945: PPUSH
13946: CALL_OW 88
// Say ( Mike , DM-Omicron-2 ) ;
13950: LD_EXP 27
13954: PPUSH
13955: LD_STRING DM-Omicron-2
13957: PPUSH
13958: CALL_OW 88
// RemoveSeeing ( 63 , 32 , 2 ) ;
13962: LD_INT 63
13964: PPUSH
13965: LD_INT 32
13967: PPUSH
13968: LD_INT 2
13970: PPUSH
13971: CALL_OW 331
// DialogueOff ;
13975: CALL_OW 7
// end ;
13979: END
// every 0 0$3 trigger See ( 2 , ruLab ) and IsOk ( ruLab ) and IsOk ( Heike ) and IsOk ( Aviradze ) and not InBattle ( 2 ) do var i , tmp , tmp2 , q , settings ;
13980: LD_INT 2
13982: PPUSH
13983: LD_EXP 50
13987: PPUSH
13988: CALL_OW 292
13992: PUSH
13993: LD_EXP 50
13997: PPUSH
13998: CALL_OW 302
14002: AND
14003: PUSH
14004: LD_EXP 25
14008: PPUSH
14009: CALL_OW 302
14013: AND
14014: PUSH
14015: LD_EXP 35
14019: PPUSH
14020: CALL_OW 302
14024: AND
14025: PUSH
14026: LD_INT 2
14028: PPUSH
14029: CALL_OW 463
14033: NOT
14034: AND
14035: IFFALSE 14598
14037: GO 14039
14039: DISABLE
14040: LD_INT 0
14042: PPUSH
14043: PPUSH
14044: PPUSH
14045: PPUSH
14046: PPUSH
// begin DialogueOn ;
14047: CALL_OW 6
// PlaceSeeing ( 111 , 90 , 2 , - 6 ) ;
14051: LD_INT 111
14053: PPUSH
14054: LD_INT 90
14056: PPUSH
14057: LD_INT 2
14059: PPUSH
14060: LD_INT 6
14062: NEG
14063: PPUSH
14064: CALL_OW 330
// CenterNowOnXY ( 111 , 90 ) ;
14068: LD_INT 111
14070: PPUSH
14071: LD_INT 90
14073: PPUSH
14074: CALL_OW 86
// Say ( Aviradze , DA-Cap-1 ) ;
14078: LD_EXP 35
14082: PPUSH
14083: LD_STRING DA-Cap-1
14085: PPUSH
14086: CALL_OW 88
// Say ( Heike , DH-Cap-2 ) ;
14090: LD_EXP 25
14094: PPUSH
14095: LD_STRING DH-Cap-2
14097: PPUSH
14098: CALL_OW 88
// DialogueOff ;
14102: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
14106: LD_INT 35
14108: PPUSH
14109: CALL_OW 67
// until beriaDestroyed and IsOk ( ruLab ) and IsOk ( Aviradze ) ;
14113: LD_EXP 17
14117: PUSH
14118: LD_EXP 50
14122: PPUSH
14123: CALL_OW 302
14127: AND
14128: PUSH
14129: LD_EXP 35
14133: PPUSH
14134: CALL_OW 302
14138: AND
14139: IFFALSE 14106
// tmp := heikeSecondSquad union [ Ibrahim , Kamil , Sophia , Kaia ] ;
14141: LD_ADDR_VAR 0 2
14145: PUSH
14146: LD_EXP 37
14150: PUSH
14151: LD_EXP 28
14155: PUSH
14156: LD_EXP 29
14160: PUSH
14161: LD_EXP 31
14165: PUSH
14166: LD_EXP 30
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: UNION
14177: ST_TO_ADDR
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
14178: LD_ADDR_VAR 0 2
14182: PUSH
14183: LD_VAR 0 2
14187: PPUSH
14188: LD_INT 50
14190: PUSH
14191: EMPTY
14192: LIST
14193: PPUSH
14194: CALL_OW 72
14198: ST_TO_ADDR
// if tmp < 2 then
14199: LD_VAR 0 2
14203: PUSH
14204: LD_INT 2
14206: LESS
14207: IFFALSE 14219
// q := 2 else
14209: LD_ADDR_VAR 0 4
14213: PUSH
14214: LD_INT 2
14216: ST_TO_ADDR
14217: GO 14232
// q := Query ( LabCap ) ;
14219: LD_ADDR_VAR 0 4
14223: PUSH
14224: LD_STRING LabCap
14226: PPUSH
14227: CALL_OW 97
14231: ST_TO_ADDR
// case q of 1 :
14232: LD_VAR 0 4
14236: PUSH
14237: LD_INT 1
14239: DOUBLE
14240: EQUAL
14241: IFTRUE 14245
14243: GO 14562
14245: POP
// begin DoNotAttack ( 2 , ruLab ) ;
14246: LD_INT 2
14248: PPUSH
14249: LD_EXP 50
14253: PPUSH
14254: CALL_OW 471
// labCaptured := true ;
14258: LD_ADDR_EXP 21
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// Say ( Heike , DH-Cap-a-1 ) ;
14266: LD_EXP 25
14270: PPUSH
14271: LD_STRING DH-Cap-a-1
14273: PPUSH
14274: CALL_OW 88
// Say ( Aviradze , DA-Cap-a-2 ) ;
14278: LD_EXP 35
14282: PPUSH
14283: LD_STRING DA-Cap-a-2
14285: PPUSH
14286: CALL_OW 88
// settings := [ Heike , sel_changeable ] ^ tmp ^ [ sel_not_hired , sel_not_changeable , Aviradze ] ;
14290: LD_ADDR_VAR 0 5
14294: PUSH
14295: LD_EXP 25
14299: PUSH
14300: LD_INT -3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: LD_VAR 0 2
14311: ADD
14312: PUSH
14313: LD_INT -2
14315: PUSH
14316: LD_INT -4
14318: PUSH
14319: LD_EXP 35
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: ADD
14329: ST_TO_ADDR
// tmp2 := CharacterSelection ( Select two characters to go with Aviradze , 2 , 2 , settings , [ ] ) ;
14330: LD_ADDR_VAR 0 3
14334: PUSH
14335: LD_STRING Select two characters to go with Aviradze
14337: PPUSH
14338: LD_INT 2
14340: PPUSH
14341: LD_INT 2
14343: PPUSH
14344: LD_VAR 0 5
14348: PPUSH
14349: EMPTY
14350: PPUSH
14351: CALL_OW 42
14355: ST_TO_ADDR
// SetSide ( ruLab , 8 ) ;
14356: LD_EXP 50
14360: PPUSH
14361: LD_INT 8
14363: PPUSH
14364: CALL_OW 235
// SetSide ( Aviradze , 8 ) ;
14368: LD_EXP 35
14372: PPUSH
14373: LD_INT 8
14375: PPUSH
14376: CALL_OW 235
// aviradzeSquad := [ Aviradze ] ;
14380: LD_ADDR_EXP 39
14384: PUSH
14385: LD_EXP 35
14389: PUSH
14390: EMPTY
14391: LIST
14392: ST_TO_ADDR
// if IsInUnit ( Aviradze ) then
14393: LD_EXP 35
14397: PPUSH
14398: CALL_OW 310
14402: IFFALSE 14413
// ComExit ( Aviradze ) ;
14404: LD_EXP 35
14408: PPUSH
14409: CALL 783 0 1
// wait ( 3 ) ;
14413: LD_INT 3
14415: PPUSH
14416: CALL_OW 67
// ComEnterUnit ( Aviradze , ruLab ) ;
14420: LD_EXP 35
14424: PPUSH
14425: LD_EXP 50
14429: PPUSH
14430: CALL_OW 120
// for i := 1 to 2 do
14434: LD_ADDR_VAR 0 1
14438: PUSH
14439: DOUBLE
14440: LD_INT 1
14442: DEC
14443: ST_TO_ADDR
14444: LD_INT 2
14446: PUSH
14447: FOR_TO
14448: IFFALSE 14551
// begin aviradzeSquad := aviradzeSquad union tmp2 [ i ] ;
14450: LD_ADDR_EXP 39
14454: PUSH
14455: LD_EXP 39
14459: PUSH
14460: LD_VAR 0 3
14464: PUSH
14465: LD_VAR 0 1
14469: ARRAY
14470: UNION
14471: ST_TO_ADDR
// SetSide ( tmp2 [ i ] , 8 ) ;
14472: LD_VAR 0 3
14476: PUSH
14477: LD_VAR 0 1
14481: ARRAY
14482: PPUSH
14483: LD_INT 8
14485: PPUSH
14486: CALL_OW 235
// if IsInUnit ( tmp2 [ i ] ) then
14490: LD_VAR 0 3
14494: PUSH
14495: LD_VAR 0 1
14499: ARRAY
14500: PPUSH
14501: CALL_OW 310
14505: IFFALSE 14522
// ComExit ( tmp2 [ i ] ) ;
14507: LD_VAR 0 3
14511: PUSH
14512: LD_VAR 0 1
14516: ARRAY
14517: PPUSH
14518: CALL 783 0 1
// wait ( 3 ) ;
14522: LD_INT 3
14524: PPUSH
14525: CALL_OW 67
// ComEnterUnit ( tmp2 [ i ] , ruLab ) ;
14529: LD_VAR 0 3
14533: PUSH
14534: LD_VAR 0 1
14538: ARRAY
14539: PPUSH
14540: LD_EXP 50
14544: PPUSH
14545: CALL_OW 120
// end ;
14549: GO 14447
14551: POP
14552: POP
// SetAchievement ( ACH_LAB ) ;
14553: LD_STRING ACH_LAB
14555: PPUSH
14556: CALL_OW 543
// end ; 2 :
14560: GO 14598
14562: LD_INT 2
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14597
14570: POP
// begin Say ( Heike , DH-Cap-b-1 ) ;
14571: LD_EXP 25
14575: PPUSH
14576: LD_STRING DH-Cap-b-1
14578: PPUSH
14579: CALL_OW 88
// Say ( Aviradze , DA-Cap-b-2 ) ;
14583: LD_EXP 35
14587: PPUSH
14588: LD_STRING DA-Cap-b-2
14590: PPUSH
14591: CALL_OW 88
// end ; end ;
14595: GO 14598
14597: POP
// end ;
14598: PPOPN 5
14600: END
// every 0 0$1 trigger FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) >= 2 do
14601: LD_INT 10
14603: PPUSH
14604: LD_INT 22
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 30
14616: PUSH
14617: LD_INT 31
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 70
14632: PUSH
14633: LD_INT 2
14635: GREATEREQUAL
14636: IFFALSE 14648
14638: GO 14640
14640: DISABLE
// SetAchievement ( ACH_KING ) ;
14641: LD_STRING ACH_KING
14643: PPUSH
14644: CALL_OW 543
14648: END
// every 0 0$1 trigger not allowHeikeAttack and FilterUnitsInArea ( hillArea , [ [ f_side , 2 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_armoury ] ] ] ) do
14649: LD_EXP 11
14653: NOT
14654: PUSH
14655: LD_INT 10
14657: PPUSH
14658: LD_INT 22
14660: PUSH
14661: LD_INT 2
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: PUSH
14668: LD_INT 2
14670: PUSH
14671: LD_INT 30
14673: PUSH
14674: LD_INT 31
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 30
14683: PUSH
14684: LD_INT 4
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PPUSH
14700: CALL_OW 70
14704: AND
14705: IFFALSE 14725
14707: GO 14709
14709: DISABLE
// begin hillBase := true ;
14710: LD_ADDR_EXP 15
14714: PUSH
14715: LD_INT 1
14717: ST_TO_ADDR
// ChangeMissionObjectives ( HillDone ) ;
14718: LD_STRING HillDone
14720: PPUSH
14721: CALL_OW 337
// end ;
14725: END
// every 0 0$1 trigger Kaia and GetLives ( Kaia ) < 3 do
14726: LD_EXP 30
14730: PUSH
14731: LD_EXP 30
14735: PPUSH
14736: CALL_OW 256
14740: PUSH
14741: LD_INT 3
14743: LESS
14744: AND
14745: IFFALSE 14791
14747: GO 14749
14749: DISABLE
// begin DialogueOn ;
14750: CALL_OW 6
// CenterNowOnUnits ( Kaia ) ;
14754: LD_EXP 30
14758: PPUSH
14759: CALL_OW 87
// ForceSay ( Kaia , DK-Kkilled-1 ) ;
14763: LD_EXP 30
14767: PPUSH
14768: LD_STRING DK-Kkilled-1
14770: PPUSH
14771: CALL_OW 91
// Say ( Heike , DH-Kkilled-2 ) ;
14775: LD_EXP 25
14779: PPUSH
14780: LD_STRING DH-Kkilled-2
14782: PPUSH
14783: CALL_OW 88
// DialogueOff ;
14787: CALL_OW 7
// end ;
14791: END
// every 0 0$1 trigger kaiaKilledByRussian do
14792: LD_EXP 23
14796: IFFALSE 14813
14798: GO 14800
14800: DISABLE
// Say ( Heike , DH-Kkilled-3 ) ;
14801: LD_EXP 25
14805: PPUSH
14806: LD_STRING DH-Kkilled-3
14808: PPUSH
14809: CALL_OW 88
14813: END
// every 0 0$1 trigger debug or ( kirovDestroyed and beriaDestroyed and ( kaganDestroyed or ( kaganCaptured and GetSide ( kagan ) = 2 ) ) ) do var i , tmp , tmp2 , cargo ;
14814: LD_EXP 1
14818: PUSH
14819: LD_EXP 16
14823: PUSH
14824: LD_EXP 17
14828: AND
14829: PUSH
14830: LD_EXP 18
14834: PUSH
14835: LD_EXP 24
14839: PUSH
14840: LD_INT 112
14842: PPUSH
14843: CALL_OW 255
14847: PUSH
14848: LD_INT 2
14850: EQUAL
14851: AND
14852: OR
14853: AND
14854: OR
14855: IFFALSE 16037
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
14863: PPUSH
14864: PPUSH
14865: PPUSH
// begin ChangeMissionObjectives ( GoToWest ) ;
14866: LD_STRING GoToWest
14868: PPUSH
14869: CALL_OW 337
// SetAreaMapShow ( goToWestArea , 1 ) ;
14873: LD_INT 17
14875: PPUSH
14876: LD_INT 1
14878: PPUSH
14879: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
14883: LD_INT 35
14885: PPUSH
14886: CALL_OW 67
// tmp := FilterUnitsInArea ( goToWestArea , [ [ f_side , 2 ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14890: LD_ADDR_VAR 0 2
14894: PUSH
14895: LD_INT 17
14897: PPUSH
14898: LD_INT 22
14900: PUSH
14901: LD_INT 2
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 2
14910: PUSH
14911: LD_INT 21
14913: PUSH
14914: LD_INT 1
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: PUSH
14921: LD_INT 21
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 3
14933: PUSH
14934: LD_INT 58
14936: PUSH
14937: EMPTY
14938: LIST
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: LIST
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PPUSH
14957: CALL_OW 70
14961: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 2 ] , [ f_not , [ f_driving ] ] , [ f_or , [ f_type , unit_human ] , [ [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ] ] ) ;
14962: LD_ADDR_VAR 0 3
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_INT 2
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: LD_INT 55
14982: PUSH
14983: EMPTY
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: LD_INT 2
14992: PUSH
14993: LD_INT 21
14995: PUSH
14996: LD_INT 1
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: PUSH
15003: LD_INT 21
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: LD_INT 58
15018: PUSH
15019: EMPTY
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: PPUSH
15040: CALL_OW 69
15044: ST_TO_ADDR
// until tmp + 0 = tmp2 + 0 ;
15045: LD_VAR 0 2
15049: PUSH
15050: LD_INT 0
15052: PLUS
15053: PUSH
15054: LD_VAR 0 3
15058: PUSH
15059: LD_INT 0
15061: PLUS
15062: EQUAL
15063: IFFALSE 14883
// SaveCharacters ( Heike , 04_1_Heike ) ;
15065: LD_EXP 25
15069: PPUSH
15070: LD_STRING 04_1_Heike
15072: PPUSH
15073: CALL_OW 38
// if Aviradze and not Aviradze in aviradzeSquad then
15077: LD_EXP 35
15081: PUSH
15082: LD_EXP 35
15086: PUSH
15087: LD_EXP 39
15091: IN
15092: NOT
15093: AND
15094: IFFALSE 15110
// SaveCharacters ( Aviradze , 04_1_Aviradze ) else
15096: LD_EXP 35
15100: PPUSH
15101: LD_STRING 04_1_Aviradze
15103: PPUSH
15104: CALL_OW 38
15108: GO 15128
// if Aviradze then
15110: LD_EXP 35
15114: IFFALSE 15128
// SaveCharacters ( Aviradze , 04_1_Aviradze_L ) ;
15116: LD_EXP 35
15120: PPUSH
15121: LD_STRING 04_1_Aviradze_L
15123: PPUSH
15124: CALL_OW 38
// if Ibrahim and not Ibrahim in aviradzeSquad then
15128: LD_EXP 28
15132: PUSH
15133: LD_EXP 28
15137: PUSH
15138: LD_EXP 39
15142: IN
15143: NOT
15144: AND
15145: IFFALSE 15161
// SaveCharacters ( Ibrahim , 04_1_Ibrahim ) else
15147: LD_EXP 28
15151: PPUSH
15152: LD_STRING 04_1_Ibrahim
15154: PPUSH
15155: CALL_OW 38
15159: GO 15179
// if Ibrahim then
15161: LD_EXP 28
15165: IFFALSE 15179
// SaveCharacters ( Ibrahim , 04_1_Ibrahim_L ) ;
15167: LD_EXP 28
15171: PPUSH
15172: LD_STRING 04_1_Ibrahim_L
15174: PPUSH
15175: CALL_OW 38
// if Kamil and not Kamil in aviradzeSquad then
15179: LD_EXP 29
15183: PUSH
15184: LD_EXP 29
15188: PUSH
15189: LD_EXP 39
15193: IN
15194: NOT
15195: AND
15196: IFFALSE 15212
// SaveCharacters ( Kamil , 04_1_Kamil ) else
15198: LD_EXP 29
15202: PPUSH
15203: LD_STRING 04_1_Kamil
15205: PPUSH
15206: CALL_OW 38
15210: GO 15230
// if Kamil then
15212: LD_EXP 29
15216: IFFALSE 15230
// SaveCharacters ( Kamil , 04_1_Kamil_L ) ;
15218: LD_EXP 29
15222: PPUSH
15223: LD_STRING 04_1_Kamil_L
15225: PPUSH
15226: CALL_OW 38
// if Sophia and not Sophia in aviradzeSquad then
15230: LD_EXP 31
15234: PUSH
15235: LD_EXP 31
15239: PUSH
15240: LD_EXP 39
15244: IN
15245: NOT
15246: AND
15247: IFFALSE 15263
// SaveCharacters ( Sophia , 04_1_Sophia ) else
15249: LD_EXP 31
15253: PPUSH
15254: LD_STRING 04_1_Sophia
15256: PPUSH
15257: CALL_OW 38
15261: GO 15281
// if Sophia then
15263: LD_EXP 31
15267: IFFALSE 15281
// SaveCharacters ( Sophia , 04_1_Sophia_L ) ;
15269: LD_EXP 31
15273: PPUSH
15274: LD_STRING 04_1_Sophia_L
15276: PPUSH
15277: CALL_OW 38
// if Kaia and not Kaia in aviradzeSquad then
15281: LD_EXP 30
15285: PUSH
15286: LD_EXP 30
15290: PUSH
15291: LD_EXP 39
15295: IN
15296: NOT
15297: AND
15298: IFFALSE 15314
// SaveCharacters ( Kaia , 04_1_Kaia ) else
15300: LD_EXP 30
15304: PPUSH
15305: LD_STRING 04_1_Kaia
15307: PPUSH
15308: CALL_OW 38
15312: GO 15332
// if Kaia then
15314: LD_EXP 30
15318: IFFALSE 15332
// SaveCharacters ( Kaia , 04_1_Kaia_L ) ;
15320: LD_EXP 30
15324: PPUSH
15325: LD_STRING 04_1_Kaia_L
15327: PPUSH
15328: CALL_OW 38
// if Givi then
15332: LD_EXP 26
15336: IFFALSE 15350
// SaveCharacters ( Givi , 04_1_Givi ) ;
15338: LD_EXP 26
15342: PPUSH
15343: LD_STRING 04_1_Givi
15345: PPUSH
15346: CALL_OW 38
// if Mike then
15350: LD_EXP 27
15354: IFFALSE 15368
// SaveCharacters ( Mike , 04_1_Mike ) ;
15356: LD_EXP 27
15360: PPUSH
15361: LD_STRING 04_1_Mike
15363: PPUSH
15364: CALL_OW 38
// if Markov then
15368: LD_EXP 32
15372: IFFALSE 15386
// SaveCharacters ( Markov , 04_1_Markov ) ;
15374: LD_EXP 32
15378: PPUSH
15379: LD_STRING 04_1_Markov
15381: PPUSH
15382: CALL_OW 38
// if Kurt then
15386: LD_EXP 34
15390: IFFALSE 15404
// SaveCharacters ( Kurt , 04_1_Kurt ) ;
15392: LD_EXP 34
15396: PPUSH
15397: LD_STRING 04_1_Kurt
15399: PPUSH
15400: CALL_OW 38
// if heikeSecondSquad diff aviradzeSquad then
15404: LD_EXP 37
15408: PUSH
15409: LD_EXP 39
15413: DIFF
15414: IFFALSE 15434
// SaveCharacters ( heikeSecondSquad diff aviradzeSquad , 04_1_others ) ;
15416: LD_EXP 37
15420: PUSH
15421: LD_EXP 39
15425: DIFF
15426: PPUSH
15427: LD_STRING 04_1_others
15429: PPUSH
15430: CALL_OW 38
// if aviradzeSquad and heikeSecondSquad then
15434: LD_EXP 39
15438: PUSH
15439: LD_EXP 37
15443: AND
15444: IFFALSE 15529
// begin tmp := [ ] ;
15446: LD_ADDR_VAR 0 2
15450: PUSH
15451: EMPTY
15452: ST_TO_ADDR
// for i in heikeSecondSquad do
15453: LD_ADDR_VAR 0 1
15457: PUSH
15458: LD_EXP 37
15462: PUSH
15463: FOR_IN
15464: IFFALSE 15509
// if i in aviradzeSquad then
15466: LD_VAR 0 1
15470: PUSH
15471: LD_EXP 39
15475: IN
15476: IFFALSE 15507
// tmp := Replace ( tmp , tmp + 1 , i ) ;
15478: LD_ADDR_VAR 0 2
15482: PUSH
15483: LD_VAR 0 2
15487: PPUSH
15488: LD_VAR 0 2
15492: PUSH
15493: LD_INT 1
15495: PLUS
15496: PPUSH
15497: LD_VAR 0 1
15501: PPUSH
15502: CALL_OW 1
15506: ST_TO_ADDR
15507: GO 15463
15509: POP
15510: POP
// if tmp then
15511: LD_VAR 0 2
15515: IFFALSE 15529
// SaveCharacters ( tmp , 04_1_others_L ) ;
15517: LD_VAR 0 2
15521: PPUSH
15522: LD_STRING 04_1_others_L
15524: PPUSH
15525: CALL_OW 38
// end ; tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 0 ] ] ) ;
15529: LD_ADDR_VAR 0 2
15533: PUSH
15534: LD_INT 22
15536: PUSH
15537: LD_INT 2
15539: PUSH
15540: EMPTY
15541: LIST
15542: LIST
15543: PUSH
15544: LD_INT 23
15546: PUSH
15547: LD_INT 0
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: EMPTY
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// if tmp then
15563: LD_VAR 0 2
15567: IFFALSE 15581
// SaveCharacters ( tmp , 04_1_apes ) ;
15569: LD_VAR 0 2
15573: PPUSH
15574: LD_STRING 04_1_apes
15576: PPUSH
15577: CALL_OW 38
// tmp := FilterUnitsInArea ( goToWestArea , [ f_type , unit_vehicle ] ) ;
15581: LD_ADDR_VAR 0 2
15585: PUSH
15586: LD_INT 17
15588: PPUSH
15589: LD_INT 21
15591: PUSH
15592: LD_INT 2
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: PPUSH
15599: CALL_OW 70
15603: ST_TO_ADDR
// if tmp then
15604: LD_VAR 0 2
15608: IFFALSE 15902
// begin tmp2 := [ ] ;
15610: LD_ADDR_VAR 0 3
15614: PUSH
15615: EMPTY
15616: ST_TO_ADDR
// for i in tmp do
15617: LD_ADDR_VAR 0 1
15621: PUSH
15622: LD_VAR 0 2
15626: PUSH
15627: FOR_IN
15628: IFFALSE 15888
// if GetWeapon ( i ) in [ ar_cargo_bay , us_cargo_bay , ru_cargo_bay ] then
15630: LD_VAR 0 1
15634: PPUSH
15635: CALL_OW 264
15639: PUSH
15640: LD_INT 32
15642: PUSH
15643: LD_INT 12
15645: PUSH
15646: LD_INT 51
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: LIST
15653: IN
15654: IFFALSE 15791
// begin cargo := [ GetCargo ( i , mat_cans ) , GetCargo ( i , mat_oil ) ] ;
15656: LD_ADDR_VAR 0 4
15660: PUSH
15661: LD_VAR 0 1
15665: PPUSH
15666: LD_INT 1
15668: PPUSH
15669: CALL_OW 289
15673: PUSH
15674: LD_VAR 0 1
15678: PPUSH
15679: LD_INT 2
15681: PPUSH
15682: CALL_OW 289
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: ST_TO_ADDR
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , cargo ] ) ;
15691: LD_ADDR_VAR 0 3
15695: PUSH
15696: LD_VAR 0 3
15700: PPUSH
15701: LD_VAR 0 3
15705: PUSH
15706: LD_INT 1
15708: PLUS
15709: PPUSH
15710: LD_VAR 0 1
15714: PPUSH
15715: CALL_OW 265
15719: PUSH
15720: LD_VAR 0 1
15724: PPUSH
15725: CALL_OW 262
15729: PUSH
15730: LD_VAR 0 1
15734: PPUSH
15735: CALL_OW 263
15739: PUSH
15740: LD_VAR 0 1
15744: PPUSH
15745: CALL_OW 264
15749: PUSH
15750: LD_VAR 0 1
15754: PPUSH
15755: CALL_OW 248
15759: PUSH
15760: LD_VAR 0 1
15764: PPUSH
15765: CALL_OW 256
15769: PUSH
15770: LD_VAR 0 4
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: PPUSH
15784: CALL_OW 1
15788: ST_TO_ADDR
// end else
15789: GO 15886
// tmp2 := Replace ( tmp2 , tmp2 + 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetNation ( i ) , GetLives ( i ) , [ ] ] ) ;
15791: LD_ADDR_VAR 0 3
15795: PUSH
15796: LD_VAR 0 3
15800: PPUSH
15801: LD_VAR 0 3
15805: PUSH
15806: LD_INT 1
15808: PLUS
15809: PPUSH
15810: LD_VAR 0 1
15814: PPUSH
15815: CALL_OW 265
15819: PUSH
15820: LD_VAR 0 1
15824: PPUSH
15825: CALL_OW 262
15829: PUSH
15830: LD_VAR 0 1
15834: PPUSH
15835: CALL_OW 263
15839: PUSH
15840: LD_VAR 0 1
15844: PPUSH
15845: CALL_OW 264
15849: PUSH
15850: LD_VAR 0 1
15854: PPUSH
15855: CALL_OW 248
15859: PUSH
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 256
15869: PUSH
15870: EMPTY
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 1
15885: ST_TO_ADDR
15886: GO 15627
15888: POP
15889: POP
// SaveVariable ( tmp2 , 04_1_Vehicles ) ;
15890: LD_VAR 0 3
15894: PPUSH
15895: LD_STRING 04_1_Vehicles
15897: PPUSH
15898: CALL_OW 39
// end ; SaveVariable ( labCaptured , 04_1_RuLabCaptured ) ;
15902: LD_EXP 21
15906: PPUSH
15907: LD_STRING 04_1_RuLabCaptured
15909: PPUSH
15910: CALL_OW 39
// SaveVariable ( escapeCounter , 04_1_EscapeCounter ) ;
15914: LD_EXP 19
15918: PPUSH
15919: LD_STRING 04_1_EscapeCounter
15921: PPUSH
15922: CALL_OW 39
// SaveVariable ( hillBase , 04_1_BaseHill ) ;
15926: LD_EXP 15
15930: PPUSH
15931: LD_STRING 04_1_BaseHill
15933: PPUSH
15934: CALL_OW 39
// SaveVariable ( tick , 04_1_Time ) ;
15938: LD_OWVAR 1
15942: PPUSH
15943: LD_STRING 04_1_Time
15945: PPUSH
15946: CALL_OW 39
// SaveVariable ( loseCounter , 04_1_DeadCounter ) ;
15950: LD_EXP 14
15954: PPUSH
15955: LD_STRING 04_1_DeadCounter
15957: PPUSH
15958: CALL_OW 39
// SaveVariable ( kaganCaptured * GetSide ( kagan ) = 2 , 04_1_KaganCaptured ) ;
15962: LD_EXP 24
15966: PUSH
15967: LD_INT 112
15969: PPUSH
15970: CALL_OW 255
15974: MUL
15975: PUSH
15976: LD_INT 2
15978: EQUAL
15979: PPUSH
15980: LD_STRING 04_1_KaganCaptured
15982: PPUSH
15983: CALL_OW 39
// SaveVariable ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_flame_thrower ] ] ) + 0 , 04_1_Flamethrower ) ;
15987: LD_INT 22
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 34
15999: PUSH
16000: LD_INT 26
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PUSH
16016: LD_INT 0
16018: PLUS
16019: PPUSH
16020: LD_STRING 04_1_Flamethrower
16022: PPUSH
16023: CALL_OW 39
// ChangeMap ( 1 , __x1\04_cont2 ) ;
16027: LD_INT 1
16029: PPUSH
16030: LD_STRING __x1\04_cont2
16032: PPUSH
16033: CALL_OW 340
// end ; end_of_file
16037: PPOPN 4
16039: END
// on BuildingComplete ( b ) do begin if GetBType ( b ) = b_depot and GetSide ( b ) = 2 then
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 266
16049: PUSH
16050: LD_INT 0
16052: EQUAL
16053: PUSH
16054: LD_VAR 0 1
16058: PPUSH
16059: CALL_OW 255
16063: PUSH
16064: LD_INT 2
16066: EQUAL
16067: AND
16068: IFFALSE 16078
// baseConstructed := true ;
16070: LD_ADDR_EXP 3
16074: PUSH
16075: LD_INT 1
16077: ST_TO_ADDR
// if GetBType ( b ) = b_lab and GetSide ( b ) = 2 then
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_INT 6
16090: EQUAL
16091: PUSH
16092: LD_VAR 0 1
16096: PPUSH
16097: CALL_OW 255
16101: PUSH
16102: LD_INT 2
16104: EQUAL
16105: AND
16106: IFFALSE 16116
// labConstructed := true ;
16108: LD_ADDR_EXP 4
16112: PUSH
16113: LD_INT 1
16115: ST_TO_ADDR
// end ;
16116: PPOPN 1
16118: END
// on UnitDestroyed ( un ) do begin if un = Heike then
16119: LD_VAR 0 1
16123: PUSH
16124: LD_EXP 25
16128: EQUAL
16129: IFFALSE 16138
// YouLost ( Heike ) ;
16131: LD_STRING Heike
16133: PPUSH
16134: CALL_OW 104
// if un = Omar then
16138: LD_VAR 0 1
16142: PUSH
16143: LD_EXP 33
16147: EQUAL
16148: IFFALSE 16157
// YouLost ( Omar ) ;
16150: LD_STRING Omar
16152: PPUSH
16153: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 2 ] , [ f_nation , 2 ] , [ f_type , unit_human ] ] ) then
16157: LD_VAR 0 1
16161: PUSH
16162: LD_INT 22
16164: PUSH
16165: LD_INT 2
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 23
16174: PUSH
16175: LD_INT 2
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PUSH
16182: LD_INT 21
16184: PUSH
16185: LD_INT 1
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 69
16201: IN
16202: IFFALSE 16218
// loseCounter := loseCounter + 1 ;
16204: LD_ADDR_EXP 14
16208: PUSH
16209: LD_EXP 14
16213: PUSH
16214: LD_INT 1
16216: PLUS
16217: ST_TO_ADDR
// if un = omikron then
16218: LD_VAR 0 1
16222: PUSH
16223: LD_INT 64
16225: EQUAL
16226: IFFALSE 16236
// omicronFall := true ;
16228: LD_ADDR_EXP 13
16232: PUSH
16233: LD_INT 1
16235: ST_TO_ADDR
// if un = kirov then
16236: LD_VAR 0 1
16240: PUSH
16241: LD_INT 71
16243: EQUAL
16244: IFFALSE 16261
// begin ChangeMissionObjectives ( KirovDone ) ;
16246: LD_STRING KirovDone
16248: PPUSH
16249: CALL_OW 337
// kirovDestroyed := true ;
16253: LD_ADDR_EXP 16
16257: PUSH
16258: LD_INT 1
16260: ST_TO_ADDR
// end ; if un = beria then
16261: LD_VAR 0 1
16265: PUSH
16266: LD_INT 106
16268: EQUAL
16269: IFFALSE 16286
// begin ChangeMissionObjectives ( BeriaDone ) ;
16271: LD_STRING BeriaDone
16273: PPUSH
16274: CALL_OW 337
// beriaDestroyed := true ;
16278: LD_ADDR_EXP 17
16282: PUSH
16283: LD_INT 1
16285: ST_TO_ADDR
// end ; if un = kagan then
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 112
16293: EQUAL
16294: IFFALSE 16311
// begin ChangeMissionObjectives ( KaganDone ) ;
16296: LD_STRING KaganDone
16298: PPUSH
16299: CALL_OW 337
// kaganDestroyed := true ;
16303: LD_ADDR_EXP 18
16307: PUSH
16308: LD_INT 1
16310: ST_TO_ADDR
// end ; if un in russianPatrol then
16311: LD_VAR 0 1
16315: PUSH
16316: LD_EXP 47
16320: IN
16321: IFFALSE 16362
// begin if GetTag ( un ) = 2 then
16323: LD_VAR 0 1
16327: PPUSH
16328: CALL_OW 110
16332: PUSH
16333: LD_INT 2
16335: EQUAL
16336: IFFALSE 16346
// spottedByPatrol := false ;
16338: LD_ADDR_EXP 7
16342: PUSH
16343: LD_INT 0
16345: ST_TO_ADDR
// russianPatrol := russianPatrol diff un ;
16346: LD_ADDR_EXP 47
16350: PUSH
16351: LD_EXP 47
16355: PUSH
16356: LD_VAR 0 1
16360: DIFF
16361: ST_TO_ADDR
// end ; if un in russianOmicronAttackers then
16362: LD_VAR 0 1
16366: PUSH
16367: LD_EXP 48
16371: IN
16372: IFFALSE 16390
// russianOmicronAttackers := russianOmicronAttackers diff un ;
16374: LD_ADDR_EXP 48
16378: PUSH
16379: LD_EXP 48
16383: PUSH
16384: LD_VAR 0 1
16388: DIFF
16389: ST_TO_ADDR
// end ;
16390: PPOPN 1
16392: END
// on UnitGoesToRed ( un ) do var i , sol , nearestBarracks ;
16393: LD_INT 0
16395: PPUSH
16396: PPUSH
16397: PPUSH
// begin if un in FilterAllUnits ( [ [ f_or , [ f_side , 3 ] , [ f_side , 4 ] , [ f_side , 6 ] ] , [ f_btype , b_bunker ] ] ) then
16398: LD_VAR 0 1
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: LD_INT 22
16408: PUSH
16409: LD_INT 3
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: PUSH
16416: LD_INT 22
16418: PUSH
16419: LD_INT 4
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: LD_INT 22
16428: PUSH
16429: LD_INT 6
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 30
16444: PUSH
16445: LD_INT 32
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PPUSH
16456: CALL_OW 69
16460: IN
16461: IFFALSE 16634
// begin sol := UnitsInside ( un ) ;
16463: LD_ADDR_VAR 0 3
16467: PUSH
16468: LD_VAR 0 1
16472: PPUSH
16473: CALL_OW 313
16477: ST_TO_ADDR
// if not sol then
16478: LD_VAR 0 3
16482: NOT
16483: IFFALSE 16487
// exit ;
16485: GO 16634
// nearestBarracks := FilterAllUnits ( [ [ f_side , GetSide ( un ) ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16487: LD_ADDR_VAR 0 4
16491: PUSH
16492: LD_INT 22
16494: PUSH
16495: LD_VAR 0 1
16499: PPUSH
16500: CALL_OW 255
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 30
16514: PUSH
16515: LD_INT 4
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 30
16524: PUSH
16525: LD_INT 5
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: PPUSH
16541: CALL_OW 69
16545: ST_TO_ADDR
// if not nearestBarracks then
16546: LD_VAR 0 4
16550: NOT
16551: IFFALSE 16555
// exit ;
16553: GO 16634
// for i in nearestBarracks do
16555: LD_ADDR_VAR 0 2
16559: PUSH
16560: LD_VAR 0 4
16564: PUSH
16565: FOR_IN
16566: IFFALSE 16601
// if UnitsInside ( i ) = 6 then
16568: LD_VAR 0 2
16572: PPUSH
16573: CALL_OW 313
16577: PUSH
16578: LD_INT 6
16580: EQUAL
16581: IFFALSE 16599
// nearestBarracks := nearestBarracks diff i ;
16583: LD_ADDR_VAR 0 4
16587: PUSH
16588: LD_VAR 0 4
16592: PUSH
16593: LD_VAR 0 2
16597: DIFF
16598: ST_TO_ADDR
16599: GO 16565
16601: POP
16602: POP
// if not nearestBarracks then
16603: LD_VAR 0 4
16607: NOT
16608: IFFALSE 16612
// exit ;
16610: GO 16634
// ComEnterUnit ( sol [ 1 ] , nearestBarracks [ 1 ] ) ;
16612: LD_VAR 0 3
16616: PUSH
16617: LD_INT 1
16619: ARRAY
16620: PPUSH
16621: LD_VAR 0 4
16625: PUSH
16626: LD_INT 1
16628: ARRAY
16629: PPUSH
16630: CALL_OW 120
// end ; end ;
16634: PPOPN 4
16636: END
// on HiddenCameraPlaced ( side , un , x , y ) do var i ;
16637: LD_INT 0
16639: PPUSH
// begin if not camAreas or not hiddenCameraAllowed then
16640: LD_EXP 8
16644: NOT
16645: PUSH
16646: LD_EXP 5
16650: NOT
16651: OR
16652: IFFALSE 16656
// exit ;
16654: GO 16724
// for i in camAreas do
16656: LD_ADDR_VAR 0 5
16660: PUSH
16661: LD_EXP 8
16665: PUSH
16666: FOR_IN
16667: IFFALSE 16722
// if InArea ( x , y , i ) then
16669: LD_VAR 0 3
16673: PPUSH
16674: LD_VAR 0 4
16678: PPUSH
16679: LD_VAR 0 5
16683: PPUSH
16684: CALL_OW 309
16688: IFFALSE 16720
// begin SetAreaMapShow ( i , 0 ) ;
16690: LD_VAR 0 5
16694: PPUSH
16695: LD_INT 0
16697: PPUSH
16698: CALL_OW 424
// camAreas := camAreas diff i ;
16702: LD_ADDR_EXP 8
16706: PUSH
16707: LD_EXP 8
16711: PUSH
16712: LD_VAR 0 5
16716: DIFF
16717: ST_TO_ADDR
// break ;
16718: GO 16722
// end ;
16720: GO 16666
16722: POP
16723: POP
// end ;
16724: PPOPN 5
16726: END
// on Contact ( s1 , s2 ) do begin if s1 = 2 and s2 in [ 5 , 8 ] then
16727: LD_VAR 0 1
16731: PUSH
16732: LD_INT 2
16734: EQUAL
16735: PUSH
16736: LD_VAR 0 2
16740: PUSH
16741: LD_INT 5
16743: PUSH
16744: LD_INT 8
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: IN
16751: AND
16752: IFFALSE 16761
// YouLost ( Ally ) ;
16754: LD_STRING Ally
16756: PPUSH
16757: CALL_OW 104
// end ;
16761: PPOPN 2
16763: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if un = Kaia and killerSide in [ 3 , 6 ] then
16764: LD_VAR 0 1
16768: PUSH
16769: LD_EXP 30
16773: EQUAL
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_INT 3
16782: PUSH
16783: LD_INT 6
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: IN
16790: AND
16791: IFFALSE 16822
// kaiaKilledByRussian := [ GetX ( un ) , GetY ( un ) ] ;
16793: LD_ADDR_EXP 23
16797: PUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 250
16807: PUSH
16808: LD_VAR 0 1
16812: PPUSH
16813: CALL_OW 251
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: ST_TO_ADDR
// end ; end_of_file
16822: PPOPN 3
16824: END
// every 0 0$30 + 0 0$12 trigger not allowHeikeAttack and GetResourceArea ( cratesArea , mat_cans ) < [ 20 , 16 , 12 ] [ Difficulty ] do
16825: LD_EXP 11
16829: NOT
16830: PUSH
16831: LD_INT 12
16833: PPUSH
16834: LD_INT 1
16836: PPUSH
16837: CALL_OW 287
16841: PUSH
16842: LD_INT 20
16844: PUSH
16845: LD_INT 16
16847: PUSH
16848: LD_INT 12
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: PUSH
16856: LD_OWVAR 67
16860: ARRAY
16861: LESS
16862: AND
16863: IFFALSE 16890
16865: GO 16867
16867: DISABLE
// begin enable ;
16868: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesArea , true ) ;
16869: LD_INT 1
16871: PPUSH
16872: LD_INT 5
16874: PPUSH
16875: CALL_OW 12
16879: PPUSH
16880: LD_INT 12
16882: PPUSH
16883: LD_INT 1
16885: PPUSH
16886: CALL_OW 55
// end ; end_of_file
16890: END
