// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam , immortalVehLive ; export kirovConstructedBunkers ; export activateAMAI , activateBelkovAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; export achievement_ConstructVehicles ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 373 0 0
// PrepareRussian ;
  24: CALL 1139 0 0
// CreateNature ;
  28: CALL 16627 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// immortalVehLive = 1000 ;
 203: LD_ADDR_EXP 25
 207: PUSH
 208: LD_INT 1000
 210: ST_TO_ADDR
// canExitBase = true ;
 211: LD_ADDR_EXP 19
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// canExploreMap = false ;
 219: LD_ADDR_EXP 20
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawLeftBunker = false ;
 227: LD_ADDR_EXP 29
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// sawRightBunker = false ;
 235: LD_ADDR_EXP 30
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogLoopBlocker = false ;
 243: LD_ADDR_EXP 33
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 251: LD_ADDR_EXP 31
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// playerGetSupport = false ;
 267: LD_ADDR_EXP 34
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// captureBelkovVehicle = false ;
 275: LD_ADDR_EXP 38
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// saveBelkovObjective = false ;
 283: LD_ADDR_EXP 36
 287: PUSH
 288: LD_INT 0
 290: ST_TO_ADDR
// medalForGetSupport = true ;
 291: LD_ADDR_EXP 40
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 299: LD_ADDR_EXP 39
 303: PUSH
 304: LD_INT 1
 306: NEG
 307: ST_TO_ADDR
// initiative = 0 ;
 308: LD_ADDR_EXP 42
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// lostComradesCounter = 0 ;
 316: LD_ADDR_EXP 43
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// northMapExplored = false ;
 324: LD_ADDR_EXP 41
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// activateAMAI = false ;
 340: LD_ADDR_EXP 27
 344: PUSH
 345: LD_INT 0
 347: ST_TO_ADDR
// activateBelkovAI = false ;
 348: LD_ADDR_EXP 28
 352: PUSH
 353: LD_INT 0
 355: ST_TO_ADDR
// achievement_ConstructVehicles = 0 ;
 356: LD_ADDR_EXP 44
 360: PUSH
 361: LD_INT 0
 363: ST_TO_ADDR
// MissionIntro ;
 364: CALL 6987 0 0
// end ; end_of_file
 368: LD_VAR 0 1
 372: RET
// export function InitMapConfig ; begin
 373: LD_INT 0
 375: PPUSH
// BaseMapConfig ;
 376: CALL 389 0 0
// MissionMapConfig ;
 380: CALL 475 0 0
// end ;
 384: LD_VAR 0 1
 388: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 389: LD_INT 0
 391: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 392: LD_ADDR_EXP 45
 396: PUSH
 397: LD_INT 2
 399: PUSH
 400: LD_INT 4
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: LD_INT 0
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: LIST
 414: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 415: LD_ADDR_EXP 46
 419: PUSH
 420: LD_INT 2
 422: PUSH
 423: LD_INT 2
 425: PUSH
 426: LD_INT 2
 428: PUSH
 429: LD_INT 2
 431: PUSH
 432: EMPTY
 433: LIST
 434: LIST
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// animalsAgression = 0 ;
 438: LD_ADDR_EXP 47
 442: PUSH
 443: LD_INT 0
 445: ST_TO_ADDR
// debugMode = 0 ;
 446: LD_ADDR_EXP 50
 450: PUSH
 451: LD_INT 0
 453: ST_TO_ADDR
// missionPrefix = 02_ ;
 454: LD_ADDR_EXP 48
 458: PUSH
 459: LD_STRING 02_
 461: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 462: LD_ADDR_EXP 49
 466: PUSH
 467: LD_STRING 01_
 469: ST_TO_ADDR
// end ;
 470: LD_VAR 0 1
 474: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 475: LD_INT 0
 477: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 478: LD_ADDR_EXP 52
 482: PUSH
 483: LD_INT 162
 485: PUSH
 486: LD_INT 107
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: PUSH
 493: LD_INT 162
 495: PUSH
 496: LD_INT 108
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 163
 505: PUSH
 506: LD_INT 109
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 163
 515: PUSH
 516: LD_INT 110
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: LD_INT 162
 525: PUSH
 526: LD_INT 109
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 161
 535: PUSH
 536: LD_INT 107
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 161
 545: PUSH
 546: LD_INT 106
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: LIST
 558: LIST
 559: LIST
 560: LIST
 561: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 562: LD_ADDR_EXP 53
 566: PUSH
 567: LD_INT 113
 569: PUSH
 570: LD_INT 96
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 114
 579: PUSH
 580: LD_INT 97
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: LD_INT 114
 589: PUSH
 590: LD_INT 98
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: LIST
 601: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 602: LD_ADDR_EXP 51
 606: PUSH
 607: LD_INT 10
 609: PUSH
 610: LD_INT 1
 612: PUSH
 613: LD_INT 2
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: LIST
 624: ST_TO_ADDR
// labCratesRefund = 20 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 20
 632: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 40
 640: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 20
 648: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 649: LD_ADDR_EXP 57
 653: PUSH
 654: LD_INT 30
 656: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 657: LD_ADDR_EXP 58
 661: PUSH
 662: LD_INT 10
 664: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 , 3 ] [ Difficulty ] ;
 665: LD_ADDR_EXP 59
 669: PUSH
 670: LD_INT 1
 672: PUSH
 673: LD_INT 2
 675: PUSH
 676: LD_INT 2
 678: PUSH
 679: LD_INT 3
 681: PUSH
 682: EMPTY
 683: LIST
 684: LIST
 685: LIST
 686: LIST
 687: PUSH
 688: LD_OWVAR 67
 692: ARRAY
 693: ST_TO_ADDR
// trapAmountPeople = [ [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] , [ 3 , 2 , 1 , 1 ] ] [ Difficulty ] ;
 694: LD_ADDR_EXP 60
 698: PUSH
 699: LD_INT 3
 701: PUSH
 702: LD_INT 2
 704: PUSH
 705: LD_INT 1
 707: PUSH
 708: LD_INT 1
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 3
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: LD_INT 1
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: LD_INT 2
 740: PUSH
 741: LD_INT 1
 743: PUSH
 744: LD_INT 1
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: PUSH
 753: LD_INT 3
 755: PUSH
 756: LD_INT 2
 758: PUSH
 759: LD_INT 1
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: LIST
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: LIST
 775: LIST
 776: PUSH
 777: LD_OWVAR 67
 781: ARRAY
 782: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 783: LD_ADDR_EXP 61
 787: PUSH
 788: LD_INT 21000
 790: PUSH
 791: LD_INT 16800
 793: PUSH
 794: LD_INT 12600
 796: PUSH
 797: LD_INT 10500
 799: PUSH
 800: EMPTY
 801: LIST
 802: LIST
 803: LIST
 804: LIST
 805: PUSH
 806: LD_OWVAR 67
 810: ARRAY
 811: ST_TO_ADDR
// end ;
 812: LD_VAR 0 1
 816: RET
// every 0 0$1 trigger debugMode do var i ;
 817: LD_EXP 50
 821: IFFALSE 1136
 823: GO 825
 825: DISABLE
 826: LD_INT 0
 828: PPUSH
// begin enable ;
 829: ENABLE
// FogOff ( your_side ) ;
 830: LD_OWVAR 2
 834: PPUSH
 835: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 839: LD_ADDR_VAR 0 1
 843: PUSH
 844: LD_INT 22
 846: PUSH
 847: LD_OWVAR 2
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: LD_INT 2
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: LD_INT 21
 871: PUSH
 872: LD_INT 2
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PUSH
 879: EMPTY
 880: LIST
 881: LIST
 882: LIST
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PPUSH
 888: CALL_OW 69
 892: PUSH
 893: FOR_IN
 894: IFFALSE 910
// SetLives ( i , 1000 ) ;
 896: LD_VAR 0 1
 900: PPUSH
 901: LD_INT 1000
 903: PPUSH
 904: CALL_OW 234
 908: GO 893
 910: POP
 911: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 912: LD_ADDR_VAR 0 1
 916: PUSH
 917: LD_INT 22
 919: PUSH
 920: LD_OWVAR 2
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 21
 931: PUSH
 932: LD_INT 1
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: PUSH
 948: FOR_IN
 949: IFFALSE 1013
// begin SetSkill ( i , skill_combat , 10 ) ;
 951: LD_VAR 0 1
 955: PPUSH
 956: LD_INT 1
 958: PPUSH
 959: LD_INT 10
 961: PPUSH
 962: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 966: LD_VAR 0 1
 970: PPUSH
 971: LD_INT 2
 973: PPUSH
 974: LD_INT 10
 976: PPUSH
 977: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 981: LD_VAR 0 1
 985: PPUSH
 986: LD_INT 3
 988: PPUSH
 989: LD_INT 10
 991: PPUSH
 992: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 996: LD_VAR 0 1
1000: PPUSH
1001: LD_INT 4
1003: PPUSH
1004: LD_INT 10
1006: PPUSH
1007: CALL_OW 237
// end ;
1011: GO 948
1013: POP
1014: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
1015: LD_ADDR_VAR 0 1
1019: PUSH
1020: LD_INT 22
1022: PUSH
1023: LD_OWVAR 2
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 2
1034: PUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 0
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: LD_INT 30
1047: PUSH
1048: LD_INT 1
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: PUSH
1060: EMPTY
1061: LIST
1062: LIST
1063: PPUSH
1064: CALL_OW 69
1068: PUSH
1069: FOR_IN
1070: IFFALSE 1134
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1072: LD_VAR 0 1
1076: PPUSH
1077: CALL_OW 274
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: LD_INT 9999
1087: PPUSH
1088: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1092: LD_VAR 0 1
1096: PPUSH
1097: CALL_OW 274
1101: PPUSH
1102: LD_INT 2
1104: PPUSH
1105: LD_INT 9999
1107: PPUSH
1108: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1112: LD_VAR 0 1
1116: PPUSH
1117: CALL_OW 274
1121: PPUSH
1122: LD_INT 3
1124: PPUSH
1125: LD_INT 9999
1127: PPUSH
1128: CALL_OW 277
// end ;
1132: GO 1069
1134: POP
1135: POP
// end ; end_of_file
1136: PPOPN 1
1138: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1139: LD_INT 0
1141: PPUSH
// PrepareCharactersFromPreviousMission ;
1142: CALL 1561 0 0
// PrepareKirovBase ;
1146: CALL 1756 0 0
// PrepareBeriaBase ;
1150: CALL 2521 0 0
// end ;
1154: LD_VAR 0 1
1158: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1159: LD_INT 0
1161: PPUSH
1162: PPUSH
1163: PPUSH
1164: PPUSH
// belkovTeam = [ ] ;
1165: LD_ADDR_EXP 73
1169: PUSH
1170: EMPTY
1171: ST_TO_ADDR
// uc_side = 6 ;
1172: LD_ADDR_OWVAR 20
1176: PUSH
1177: LD_INT 6
1179: ST_TO_ADDR
// uc_nation = nation_russian ;
1180: LD_ADDR_OWVAR 21
1184: PUSH
1185: LD_INT 3
1187: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1188: LD_ADDR_OWVAR 37
1192: PUSH
1193: LD_EXP 75
1197: PUSH
1198: LD_INT 1
1200: ARRAY
1201: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1202: LD_ADDR_OWVAR 39
1206: PUSH
1207: LD_EXP 75
1211: PUSH
1212: LD_INT 2
1214: ARRAY
1215: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1216: LD_ADDR_OWVAR 38
1220: PUSH
1221: LD_EXP 75
1225: PUSH
1226: LD_INT 3
1228: ARRAY
1229: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1230: LD_ADDR_OWVAR 40
1234: PUSH
1235: LD_EXP 75
1239: PUSH
1240: LD_INT 4
1242: ARRAY
1243: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1244: LD_ADDR_OWVAR 41
1248: PUSH
1249: LD_EXP 75
1253: PUSH
1254: LD_INT 5
1256: ARRAY
1257: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1258: LD_ADDR_EXP 72
1262: PUSH
1263: CALL_OW 45
1267: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1268: LD_EXP 72
1272: PPUSH
1273: LD_INT 3
1275: PPUSH
1276: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1280: LD_EXP 72
1284: PPUSH
1285: LD_INT 11
1287: PPUSH
1288: LD_INT 0
1290: PPUSH
1291: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1295: LD_ADDR_EXP 73
1299: PUSH
1300: LD_EXP 73
1304: PUSH
1305: LD_EXP 72
1309: ADD
1310: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1311: LD_STRING 02_TmpBelkov
1313: PPUSH
1314: CALL_OW 28
1318: IFFALSE 1363
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1320: LD_ADDR_EXP 64
1324: PUSH
1325: LD_STRING 02_TmpBelkov
1327: PPUSH
1328: CALL_OW 34
1332: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1333: LD_EXP 64
1337: PPUSH
1338: LD_EXP 72
1342: PPUSH
1343: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1347: LD_ADDR_EXP 73
1351: PUSH
1352: LD_EXP 73
1356: PUSH
1357: LD_EXP 64
1361: ADD
1362: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpBelkov2 ) then
1363: LD_STRING 02_TmpBelkov2
1365: PPUSH
1366: CALL_OW 28
1370: IFFALSE 1442
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1372: LD_ADDR_EXP 68
1376: PUSH
1377: LD_STRING 02_TmpBelkov2
1379: PPUSH
1380: CALL_OW 34
1384: ST_TO_ADDR
// if not TestCharacters ( 02_TmpBelkov ) then
1385: LD_STRING 02_TmpBelkov
1387: PPUSH
1388: CALL_OW 28
1392: NOT
1393: IFFALSE 1411
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) else
1395: LD_EXP 68
1399: PPUSH
1400: LD_EXP 72
1404: PPUSH
1405: CALL_OW 52
1409: GO 1426
// PlaceUnitArea ( Belkov2 , BelkovReturnArea , false ) ;
1411: LD_EXP 68
1415: PPUSH
1416: LD_INT 11
1418: PPUSH
1419: LD_INT 0
1421: PPUSH
1422: CALL_OW 49
// belkovTeam = belkovTeam ^ Belkov2 ;
1426: LD_ADDR_EXP 73
1430: PUSH
1431: LD_EXP 73
1435: PUSH
1436: LD_EXP 68
1440: ADD
1441: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1442: LD_STRING 02_TmpKirilenkova
1444: PPUSH
1445: CALL_OW 28
1449: IFFALSE 1495
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1451: LD_ADDR_EXP 65
1455: PUSH
1456: LD_STRING 02_TmpKirilenkova
1458: PPUSH
1459: CALL_OW 34
1463: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1464: LD_EXP 65
1468: PPUSH
1469: LD_INT 11
1471: PPUSH
1472: LD_INT 0
1474: PPUSH
1475: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1479: LD_ADDR_EXP 73
1483: PUSH
1484: LD_EXP 73
1488: PUSH
1489: LD_EXP 65
1493: ADD
1494: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1495: LD_ADDR_VAR 0 3
1499: PUSH
1500: LD_STRING 02_TmpBelkovTeam
1502: PPUSH
1503: CALL_OW 31
1507: ST_TO_ADDR
// for unit in others do
1508: LD_ADDR_VAR 0 2
1512: PUSH
1513: LD_VAR 0 3
1517: PUSH
1518: FOR_IN
1519: IFFALSE 1554
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1521: LD_VAR 0 2
1525: PPUSH
1526: LD_INT 11
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1536: LD_ADDR_EXP 73
1540: PUSH
1541: LD_EXP 73
1545: PUSH
1546: LD_VAR 0 2
1550: ADD
1551: ST_TO_ADDR
// end ;
1552: GO 1518
1554: POP
1555: POP
// end ;
1556: LD_VAR 0 1
1560: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1561: LD_INT 0
1563: PPUSH
1564: PPUSH
// uc_side = 3 ;
1565: LD_ADDR_OWVAR 20
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// Burlak = PrepareUnitEx ( Burlak , true ) ;
1573: LD_ADDR_EXP 62
1577: PUSH
1578: LD_STRING Burlak
1580: PPUSH
1581: LD_INT 1
1583: PPUSH
1584: CALL 4146 0 2
1588: ST_TO_ADDR
// Gnyevko = PrepareUnitEx ( Gnyevko , true ) ;
1589: LD_ADDR_EXP 63
1593: PUSH
1594: LD_STRING Gnyevko
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: CALL 4146 0 2
1604: ST_TO_ADDR
// Belkov = PrepareUnitEx ( Belkov , true ) ;
1605: LD_ADDR_EXP 64
1609: PUSH
1610: LD_STRING Belkov
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: CALL 4146 0 2
1620: ST_TO_ADDR
// Kirilenkova = PrepareUnitEx ( Kirilenkova , true ) ;
1621: LD_ADDR_EXP 65
1625: PUSH
1626: LD_STRING Kirilenkova
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: CALL 4146 0 2
1636: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1637: LD_EXP 62
1641: PPUSH
1642: LD_INT 5
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1652: LD_EXP 63
1656: PPUSH
1657: LD_INT 3
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1667: LD_EXP 64
1671: PPUSH
1672: LD_INT 3
1674: PPUSH
1675: LD_INT 0
1677: PPUSH
1678: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1682: LD_EXP 65
1686: PPUSH
1687: LD_INT 3
1689: PPUSH
1690: LD_INT 0
1692: PPUSH
1693: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1697: LD_EXP 62
1701: PPUSH
1702: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1706: LD_ADDR_EXP 66
1710: PUSH
1711: LD_STRING 01_other_survivors
1713: PPUSH
1714: CALL_OW 31
1718: ST_TO_ADDR
// for i in other_survivors do
1719: LD_ADDR_VAR 0 2
1723: PUSH
1724: LD_EXP 66
1728: PUSH
1729: FOR_IN
1730: IFFALSE 1749
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1732: LD_VAR 0 2
1736: PPUSH
1737: LD_INT 3
1739: PPUSH
1740: LD_INT 0
1742: PPUSH
1743: CALL_OW 49
1747: GO 1729
1749: POP
1750: POP
// end ;
1751: LD_VAR 0 1
1755: RET
// function PrepareKirovBase ; var i , un ; begin
1756: LD_INT 0
1758: PPUSH
1759: PPUSH
1760: PPUSH
// SetBName ( kirov , kirov ) ;
1761: LD_INT 71
1763: PPUSH
1764: LD_STRING kirov
1766: PPUSH
1767: CALL_OW 500
// uc_side = 6 ;
1771: LD_ADDR_OWVAR 20
1775: PUSH
1776: LD_INT 6
1778: ST_TO_ADDR
// uc_nation = 3 ;
1779: LD_ADDR_OWVAR 21
1783: PUSH
1784: LD_INT 3
1786: ST_TO_ADDR
// hc_gallery =  ;
1787: LD_ADDR_OWVAR 33
1791: PUSH
1792: LD_STRING 
1794: ST_TO_ADDR
// hc_name =  ;
1795: LD_ADDR_OWVAR 26
1799: PUSH
1800: LD_STRING 
1802: ST_TO_ADDR
// Kurin = PrepareUnitEx ( Kurin , false ) ;
1803: LD_ADDR_EXP 67
1807: PUSH
1808: LD_STRING Kurin
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL 4146 0 2
1818: ST_TO_ADDR
// Kovalyuk = PrepareUnitEx ( Kovalyuk , false ) ;
1819: LD_ADDR_EXP 70
1823: PUSH
1824: LD_STRING Kovalyuk
1826: PPUSH
1827: LD_INT 0
1829: PPUSH
1830: CALL 4146 0 2
1834: ST_TO_ADDR
// Belkov2 = PrepareUnitEx ( Belkov2 , false ) ;
1835: LD_ADDR_EXP 68
1839: PUSH
1840: LD_STRING Belkov2
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL 4146 0 2
1850: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1851: LD_EXP 67
1855: PPUSH
1856: LD_INT 4
1858: PPUSH
1859: LD_INT 0
1861: PPUSH
1862: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1866: LD_EXP 70
1870: PPUSH
1871: LD_INT 161
1873: PPUSH
1874: LD_INT 108
1876: PPUSH
1877: LD_INT 6
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 50
// ComHold ( Kurin ) ;
1887: LD_EXP 67
1891: PPUSH
1892: CALL_OW 140
// otherKirovUnits = [ ] ;
1896: LD_ADDR_EXP 69
1900: PUSH
1901: EMPTY
1902: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1903: LD_ADDR_EXP 51
1907: PUSH
1908: LD_EXP 51
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_EXP 51
1920: PUSH
1921: LD_INT 1
1923: ARRAY
1924: PUSH
1925: LD_EXP 66
1929: PPUSH
1930: LD_INT 25
1932: PUSH
1933: LD_INT 1
1935: PUSH
1936: EMPTY
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 72
1944: MINUS
1945: PPUSH
1946: CALL_OW 1
1950: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1951: LD_ADDR_VAR 0 2
1955: PUSH
1956: DOUBLE
1957: LD_INT 1
1959: DEC
1960: ST_TO_ADDR
1961: LD_EXP 51
1965: PUSH
1966: LD_INT 1
1968: ARRAY
1969: PUSH
1970: FOR_TO
1971: IFFALSE 2150
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1973: LD_INT 0
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: LD_INT 3
1984: PPUSH
1985: CALL_OW 12
1989: PPUSH
1990: CALL_OW 380
// un = CreateHuman ;
1994: LD_ADDR_VAR 0 3
1998: PUSH
1999: CALL_OW 44
2003: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2004: LD_ADDR_EXP 69
2008: PUSH
2009: LD_EXP 69
2013: PUSH
2014: LD_VAR 0 3
2018: ADD
2019: ST_TO_ADDR
// if FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
2020: LD_INT 9
2022: PPUSH
2023: LD_INT 22
2025: PUSH
2026: LD_INT 6
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: PUSH
2033: LD_INT 21
2035: PUSH
2036: LD_INT 3
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 30
2045: PUSH
2046: LD_INT 31
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: LIST
2064: PPUSH
2065: CALL_OW 70
2069: IFFALSE 2136
// PlaceSolBun ( un , FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
2071: LD_VAR 0 3
2075: PPUSH
2076: LD_INT 9
2078: PPUSH
2079: LD_INT 22
2081: PUSH
2082: LD_INT 6
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PUSH
2089: LD_INT 21
2091: PUSH
2092: LD_INT 3
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: PUSH
2099: LD_INT 30
2101: PUSH
2102: LD_INT 31
2104: PUSH
2105: EMPTY
2106: LIST
2107: LIST
2108: PUSH
2109: LD_INT 58
2111: PUSH
2112: EMPTY
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 70
2125: PUSH
2126: LD_INT 1
2128: ARRAY
2129: PPUSH
2130: CALL 5385 0 2
2134: GO 2148
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2136: LD_VAR 0 3
2140: PPUSH
2141: LD_INT 209
2143: PPUSH
2144: CALL_OW 52
// end ;
2148: GO 1970
2150: POP
2151: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2152: LD_INT 0
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 3
2163: PPUSH
2164: CALL_OW 12
2168: PPUSH
2169: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2173: CALL_OW 44
2177: PPUSH
2178: LD_INT 209
2180: PPUSH
2181: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: DOUBLE
2191: LD_INT 1
2193: DEC
2194: ST_TO_ADDR
2195: LD_EXP 51
2199: PUSH
2200: LD_INT 2
2202: ARRAY
2203: PUSH
2204: FOR_TO
2205: IFFALSE 2268
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 2
2212: PPUSH
2213: LD_INT 1
2215: PPUSH
2216: LD_INT 3
2218: PPUSH
2219: CALL_OW 12
2223: PPUSH
2224: CALL_OW 380
// un = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2238: LD_ADDR_EXP 69
2242: PUSH
2243: LD_EXP 69
2247: PUSH
2248: LD_VAR 0 3
2252: ADD
2253: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2254: LD_VAR 0 3
2258: PPUSH
2259: LD_INT 71
2261: PPUSH
2262: CALL_OW 52
// end ;
2266: GO 2204
2268: POP
2269: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: DOUBLE
2276: LD_INT 1
2278: DEC
2279: ST_TO_ADDR
2280: LD_EXP 51
2284: PUSH
2285: LD_INT 3
2287: ARRAY
2288: PUSH
2289: FOR_TO
2290: IFFALSE 2353
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2292: LD_INT 0
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: LD_INT 1
2300: PPUSH
2301: LD_INT 3
2303: PPUSH
2304: CALL_OW 12
2308: PPUSH
2309: CALL_OW 380
// un = CreateHuman ;
2313: LD_ADDR_VAR 0 3
2317: PUSH
2318: CALL_OW 44
2322: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2323: LD_ADDR_EXP 69
2327: PUSH
2328: LD_EXP 69
2332: PUSH
2333: LD_VAR 0 3
2337: ADD
2338: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2339: LD_VAR 0 3
2343: PPUSH
2344: LD_INT 71
2346: PPUSH
2347: CALL_OW 52
// end ;
2351: GO 2289
2353: POP
2354: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2355: LD_ADDR_VAR 0 2
2359: PUSH
2360: DOUBLE
2361: LD_INT 1
2363: DEC
2364: ST_TO_ADDR
2365: LD_EXP 51
2369: PUSH
2370: LD_INT 4
2372: ARRAY
2373: PUSH
2374: FOR_TO
2375: IFFALSE 2438
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2377: LD_INT 0
2379: PPUSH
2380: LD_INT 4
2382: PPUSH
2383: LD_INT 1
2385: PPUSH
2386: LD_INT 3
2388: PPUSH
2389: CALL_OW 12
2393: PPUSH
2394: CALL_OW 380
// un = CreateHuman ;
2398: LD_ADDR_VAR 0 3
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2408: LD_ADDR_EXP 69
2412: PUSH
2413: LD_EXP 69
2417: PUSH
2418: LD_VAR 0 3
2422: ADD
2423: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2424: LD_VAR 0 3
2428: PPUSH
2429: LD_INT 83
2431: PPUSH
2432: CALL_OW 52
// end ;
2436: GO 2374
2438: POP
2439: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2440: LD_INT 6
2442: PPUSH
2443: LD_INT 83
2445: PPUSH
2446: LD_INT 3
2448: PPUSH
2449: CALL 4998 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2453: LD_STRING 01_Gnyevko
2455: PPUSH
2456: CALL_OW 28
2460: NOT
2461: IFFALSE 2504
// begin PrepareMechanic ( sex_male , 3 ) ;
2463: LD_INT 1
2465: PPUSH
2466: LD_INT 3
2468: PPUSH
2469: CALL_OW 383
// randomMech = CreateHuman ;
2473: LD_ADDR_EXP 71
2477: PUSH
2478: CALL_OW 44
2482: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2483: LD_EXP 71
2487: PPUSH
2488: LD_INT 161
2490: PPUSH
2491: LD_INT 108
2493: PPUSH
2494: LD_INT 6
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 50
// end ; PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2504: LD_EXP 68
2508: PPUSH
2509: LD_INT 95
2511: PPUSH
2512: CALL_OW 52
// end ;
2516: LD_VAR 0 1
2520: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2521: LD_INT 0
2523: PPUSH
2524: PPUSH
2525: PPUSH
2526: PPUSH
2527: PPUSH
// SetBName ( beria , beria ) ;
2528: LD_INT 106
2530: PPUSH
2531: LD_STRING beria
2533: PPUSH
2534: CALL_OW 500
// uc_side = 6 ;
2538: LD_ADDR_OWVAR 20
2542: PUSH
2543: LD_INT 6
2545: ST_TO_ADDR
// uc_nation = 3 ;
2546: LD_ADDR_OWVAR 21
2550: PUSH
2551: LD_INT 3
2553: ST_TO_ADDR
// Platonov = PrepareUnitEx ( Platonov , false ) ;
2554: LD_ADDR_EXP 76
2558: PUSH
2559: LD_STRING Platonov
2561: PPUSH
2562: LD_INT 0
2564: PPUSH
2565: CALL 4146 0 2
2569: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2570: LD_EXP 76
2574: PPUSH
2575: LD_INT 112
2577: PPUSH
2578: LD_INT 97
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 48
// ComHold ( Platonov ) ;
2588: LD_EXP 76
2592: PPUSH
2593: CALL_OW 140
// platSoldiers = [ ] ;
2597: LD_ADDR_EXP 77
2601: PUSH
2602: EMPTY
2603: ST_TO_ADDR
// unitsTemp = [ ] ;
2604: LD_ADDR_VAR 0 4
2608: PUSH
2609: EMPTY
2610: ST_TO_ADDR
// Kuklajs = PrepareUnitEx ( Kuklajs , false ) ;
2611: LD_ADDR_EXP 78
2615: PUSH
2616: LD_STRING Kuklajs
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: CALL 4146 0 2
2626: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2627: LD_ADDR_EXP 77
2631: PUSH
2632: LD_EXP 77
2636: PUSH
2637: LD_EXP 78
2641: ADD
2642: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2643: LD_EXP 78
2647: PPUSH
2648: LD_INT 110
2650: PPUSH
2651: LD_INT 97
2653: PPUSH
2654: LD_INT 6
2656: PPUSH
2657: LD_INT 0
2659: PPUSH
2660: CALL_OW 50
// Benko = PrepareUnitEx ( Benko , false ) ;
2664: LD_ADDR_EXP 79
2668: PUSH
2669: LD_STRING Benko
2671: PPUSH
2672: LD_INT 0
2674: PPUSH
2675: CALL 4146 0 2
2679: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2680: LD_ADDR_EXP 77
2684: PUSH
2685: LD_EXP 77
2689: PUSH
2690: LD_EXP 79
2694: ADD
2695: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2696: LD_ADDR_VAR 0 4
2700: PUSH
2701: LD_VAR 0 4
2705: PUSH
2706: LD_EXP 79
2710: ADD
2711: ST_TO_ADDR
// for i := 1 to 2 do
2712: LD_ADDR_VAR 0 2
2716: PUSH
2717: DOUBLE
2718: LD_INT 1
2720: DEC
2721: ST_TO_ADDR
2722: LD_INT 2
2724: PUSH
2725: FOR_TO
2726: IFFALSE 2793
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2728: LD_INT 0
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_INT 3
2739: PPUSH
2740: CALL_OW 12
2744: PPUSH
2745: CALL_OW 380
// un = CreateHuman ;
2749: LD_ADDR_VAR 0 3
2753: PUSH
2754: CALL_OW 44
2758: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2759: LD_ADDR_EXP 77
2763: PUSH
2764: LD_EXP 77
2768: PUSH
2769: LD_VAR 0 3
2773: ADD
2774: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2775: LD_ADDR_VAR 0 4
2779: PUSH
2780: LD_VAR 0 4
2784: PUSH
2785: LD_VAR 0 3
2789: ADD
2790: ST_TO_ADDR
// end ;
2791: GO 2725
2793: POP
2794: POP
// for i := 1 to unitsTemp do
2795: LD_ADDR_VAR 0 2
2799: PUSH
2800: DOUBLE
2801: LD_INT 1
2803: DEC
2804: ST_TO_ADDR
2805: LD_VAR 0 4
2809: PUSH
2810: FOR_TO
2811: IFFALSE 2899
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2813: LD_ADDR_VAR 0 5
2817: PUSH
2818: LD_INT 8
2820: PPUSH
2821: LD_INT 22
2823: PUSH
2824: LD_INT 6
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PUSH
2831: LD_INT 30
2833: PUSH
2834: LD_INT 31
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: PPUSH
2845: CALL_OW 70
2849: PUSH
2850: LD_VAR 0 2
2854: ARRAY
2855: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2856: LD_VAR 0 4
2860: PUSH
2861: LD_VAR 0 2
2865: ARRAY
2866: PPUSH
2867: LD_VAR 0 5
2871: PPUSH
2872: CALL_OW 250
2876: PPUSH
2877: LD_VAR 0 5
2881: PPUSH
2882: CALL_OW 251
2886: PPUSH
2887: LD_INT 2
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 50
// end ;
2897: GO 2810
2899: POP
2900: POP
// end ; end_of_file
2901: LD_VAR 0 1
2905: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export amVeh , amMech ; export function PrepareAmerican ; begin
2906: LD_INT 0
2908: PPUSH
// PrepareBunkiers ;
2909: CALL 3512 0 0
// PrepareTrap ;
2913: CALL 2922 0 0
// end ;
2917: LD_VAR 0 1
2921: RET
// function PrepareTrap ; var i , un ; begin
2922: LD_INT 0
2924: PPUSH
2925: PPUSH
2926: PPUSH
// trapTeam = [ ] ;
2927: LD_ADDR_EXP 81
2931: PUSH
2932: EMPTY
2933: ST_TO_ADDR
// uc_nation = 1 ;
2934: LD_ADDR_OWVAR 21
2938: PUSH
2939: LD_INT 1
2941: ST_TO_ADDR
// uc_side = 1 ;
2942: LD_ADDR_OWVAR 20
2946: PUSH
2947: LD_INT 1
2949: ST_TO_ADDR
// hc_gallery =  ;
2950: LD_ADDR_OWVAR 33
2954: PUSH
2955: LD_STRING 
2957: ST_TO_ADDR
// hc_name =  ;
2958: LD_ADDR_OWVAR 26
2962: PUSH
2963: LD_STRING 
2965: ST_TO_ADDR
// hc_importance = 100 ;
2966: LD_ADDR_OWVAR 32
2970: PUSH
2971: LD_INT 100
2973: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2974: LD_INT 1
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_EXP 59
2984: PUSH
2985: LD_INT 1
2987: PLUS
2988: PPUSH
2989: CALL_OW 380
// trapCommander = CreateHuman ;
2993: LD_ADDR_EXP 80
2997: PUSH
2998: CALL_OW 44
3002: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
3003: LD_EXP 80
3007: PPUSH
3008: LD_INT 13
3010: PPUSH
3011: LD_INT 0
3013: PPUSH
3014: CALL_OW 49
// ComCrawl ( trapCommander ) ;
3018: LD_EXP 80
3022: PPUSH
3023: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
3027: LD_ADDR_EXP 81
3031: PUSH
3032: LD_EXP 81
3036: PUSH
3037: LD_EXP 80
3041: ADD
3042: ST_TO_ADDR
// hc_importance = 0 ;
3043: LD_ADDR_OWVAR 32
3047: PUSH
3048: LD_INT 0
3050: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
3051: LD_ADDR_VAR 0 2
3055: PUSH
3056: DOUBLE
3057: LD_INT 1
3059: DEC
3060: ST_TO_ADDR
3061: LD_EXP 60
3065: PUSH
3066: LD_INT 1
3068: ARRAY
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3163
// begin hc_name =  ;
3073: LD_ADDR_OWVAR 26
3077: PUSH
3078: LD_STRING 
3080: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3081: LD_INT 0
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: LD_EXP 59
3091: PPUSH
3092: CALL_OW 380
// un = CreateHuman ;
3096: LD_ADDR_VAR 0 3
3100: PUSH
3101: CALL_OW 44
3105: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3106: LD_VAR 0 3
3110: PPUSH
3111: LD_INT 12
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL_OW 49
// ComCrawl ( un ) ;
3121: LD_VAR 0 3
3125: PPUSH
3126: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3130: LD_VAR 0 3
3134: PPUSH
3135: LD_INT 116
3137: PPUSH
3138: LD_INT 21
3140: PPUSH
3141: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3145: LD_ADDR_EXP 81
3149: PUSH
3150: LD_EXP 81
3154: PUSH
3155: LD_VAR 0 3
3159: ADD
3160: ST_TO_ADDR
// end ;
3161: GO 3070
3163: POP
3164: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: DOUBLE
3171: LD_INT 1
3173: DEC
3174: ST_TO_ADDR
3175: LD_EXP 60
3179: PUSH
3180: LD_INT 2
3182: ARRAY
3183: PUSH
3184: FOR_TO
3185: IFFALSE 3277
// begin hc_name =  ;
3187: LD_ADDR_OWVAR 26
3191: PUSH
3192: LD_STRING 
3194: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3195: LD_INT 0
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_EXP 59
3205: PPUSH
3206: CALL_OW 380
// un = CreateHuman ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: CALL_OW 44
3219: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_INT 14
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 49
// ComCrawl ( un ) ;
3235: LD_VAR 0 3
3239: PPUSH
3240: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3244: LD_VAR 0 3
3248: PPUSH
3249: LD_INT 116
3251: PPUSH
3252: LD_INT 21
3254: PPUSH
3255: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3259: LD_ADDR_EXP 81
3263: PUSH
3264: LD_EXP 81
3268: PUSH
3269: LD_VAR 0 3
3273: ADD
3274: ST_TO_ADDR
// end ;
3275: GO 3184
3277: POP
3278: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3279: LD_ADDR_VAR 0 2
3283: PUSH
3284: DOUBLE
3285: LD_INT 1
3287: DEC
3288: ST_TO_ADDR
3289: LD_EXP 60
3293: PUSH
3294: LD_INT 3
3296: ARRAY
3297: PUSH
3298: FOR_TO
3299: IFFALSE 3391
// begin hc_name =  ;
3301: LD_ADDR_OWVAR 26
3305: PUSH
3306: LD_STRING 
3308: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3309: LD_INT 0
3311: PPUSH
3312: LD_INT 1
3314: PPUSH
3315: LD_EXP 59
3319: PPUSH
3320: CALL_OW 380
// un = CreateHuman ;
3324: LD_ADDR_VAR 0 3
3328: PUSH
3329: CALL_OW 44
3333: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3334: LD_VAR 0 3
3338: PPUSH
3339: LD_INT 23
3341: PPUSH
3342: LD_INT 0
3344: PPUSH
3345: CALL_OW 49
// ComCrawl ( un ) ;
3349: LD_VAR 0 3
3353: PPUSH
3354: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 109
3365: PPUSH
3366: LD_INT 8
3368: PPUSH
3369: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3373: LD_ADDR_EXP 81
3377: PUSH
3378: LD_EXP 81
3382: PUSH
3383: LD_VAR 0 3
3387: ADD
3388: ST_TO_ADDR
// end ;
3389: GO 3298
3391: POP
3392: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3393: LD_ADDR_VAR 0 2
3397: PUSH
3398: DOUBLE
3399: LD_INT 1
3401: DEC
3402: ST_TO_ADDR
3403: LD_EXP 60
3407: PUSH
3408: LD_INT 4
3410: ARRAY
3411: PUSH
3412: FOR_TO
3413: IFFALSE 3505
// begin hc_name =  ;
3415: LD_ADDR_OWVAR 26
3419: PUSH
3420: LD_STRING 
3422: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3423: LD_INT 0
3425: PPUSH
3426: LD_INT 1
3428: PPUSH
3429: LD_EXP 59
3433: PPUSH
3434: CALL_OW 380
// un = CreateHuman ;
3438: LD_ADDR_VAR 0 3
3442: PUSH
3443: CALL_OW 44
3447: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3448: LD_VAR 0 3
3452: PPUSH
3453: LD_INT 24
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 49
// ComCrawl ( un ) ;
3463: LD_VAR 0 3
3467: PPUSH
3468: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3472: LD_VAR 0 3
3476: PPUSH
3477: LD_INT 109
3479: PPUSH
3480: LD_INT 8
3482: PPUSH
3483: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3487: LD_ADDR_EXP 81
3491: PUSH
3492: LD_EXP 81
3496: PUSH
3497: LD_VAR 0 3
3501: ADD
3502: ST_TO_ADDR
// end ;
3503: GO 3412
3505: POP
3506: POP
// end ;
3507: LD_VAR 0 1
3511: RET
// function PrepareBunkiers ; var i , un , bunker , animal ; begin
3512: LD_INT 0
3514: PPUSH
3515: PPUSH
3516: PPUSH
3517: PPUSH
3518: PPUSH
// for animal in FilterUnitsInArea ( LeftHillArea , [ [ f_side , 0 ] ] ) do
3519: LD_ADDR_VAR 0 5
3523: PUSH
3524: LD_INT 17
3526: PPUSH
3527: LD_INT 22
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: PUSH
3537: EMPTY
3538: LIST
3539: PPUSH
3540: CALL_OW 70
3544: PUSH
3545: FOR_IN
3546: IFFALSE 3559
// RemoveUnit ( animal ) ;
3548: LD_VAR 0 5
3552: PPUSH
3553: CALL_OW 64
3557: GO 3545
3559: POP
3560: POP
// uc_side = 1 ;
3561: LD_ADDR_OWVAR 20
3565: PUSH
3566: LD_INT 1
3568: ST_TO_ADDR
// uc_nation = nation_american ;
3569: LD_ADDR_OWVAR 21
3573: PUSH
3574: LD_INT 1
3576: ST_TO_ADDR
// bc_level = 1 ;
3577: LD_ADDR_OWVAR 43
3581: PUSH
3582: LD_INT 1
3584: ST_TO_ADDR
// bc_type = b_breastwork ;
3585: LD_ADDR_OWVAR 42
3589: PUSH
3590: LD_INT 31
3592: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3593: LD_ADDR_VAR 0 4
3597: PUSH
3598: LD_INT 104
3600: PPUSH
3601: LD_INT 59
3603: PPUSH
3604: LD_INT 4
3606: PPUSH
3607: CALL_OW 47
3611: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3612: LD_ADDR_EXP 82
3616: PUSH
3617: LD_EXP 82
3621: PUSH
3622: LD_VAR 0 4
3626: ADD
3627: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3628: LD_EXP 59
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: CALL 5239 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3642: LD_ADDR_VAR 0 4
3646: PUSH
3647: LD_INT 101
3649: PPUSH
3650: LD_INT 55
3652: PPUSH
3653: LD_INT 4
3655: PPUSH
3656: CALL_OW 47
3660: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3661: LD_ADDR_EXP 82
3665: PUSH
3666: LD_EXP 82
3670: PUSH
3671: LD_VAR 0 4
3675: ADD
3676: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3677: LD_EXP 59
3681: PPUSH
3682: LD_VAR 0 4
3686: PPUSH
3687: CALL 5239 0 2
// for animal in FilterUnitsInArea ( RightHillArea , [ [ f_side , 0 ] ] ) do
3691: LD_ADDR_VAR 0 5
3695: PUSH
3696: LD_INT 16
3698: PPUSH
3699: LD_INT 22
3701: PUSH
3702: LD_INT 0
3704: PUSH
3705: EMPTY
3706: LIST
3707: LIST
3708: PUSH
3709: EMPTY
3710: LIST
3711: PPUSH
3712: CALL_OW 70
3716: PUSH
3717: FOR_IN
3718: IFFALSE 3731
// RemoveUnit ( animal ) ;
3720: LD_VAR 0 5
3724: PPUSH
3725: CALL_OW 64
3729: GO 3717
3731: POP
3732: POP
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3733: LD_ADDR_VAR 0 4
3737: PUSH
3738: LD_INT 132
3740: PPUSH
3741: LD_INT 62
3743: PPUSH
3744: LD_INT 1
3746: PPUSH
3747: CALL_OW 47
3751: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3752: LD_ADDR_EXP 83
3756: PUSH
3757: LD_EXP 83
3761: PUSH
3762: LD_VAR 0 4
3766: ADD
3767: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3768: LD_EXP 59
3772: PPUSH
3773: LD_VAR 0 4
3777: PPUSH
3778: CALL 5239 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3782: LD_ADDR_VAR 0 4
3786: PUSH
3787: LD_INT 134
3789: PPUSH
3790: LD_INT 66
3792: PPUSH
3793: LD_INT 1
3795: PPUSH
3796: CALL_OW 47
3800: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3801: LD_ADDR_EXP 83
3805: PUSH
3806: LD_EXP 83
3810: PUSH
3811: LD_VAR 0 4
3815: ADD
3816: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3817: LD_EXP 59
3821: PPUSH
3822: LD_VAR 0 4
3826: PPUSH
3827: CALL 5239 0 2
// bc_type = b_depot ;
3831: LD_ADDR_OWVAR 42
3835: PUSH
3836: LD_INT 0
3838: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3839: LD_ADDR_EXP 84
3843: PUSH
3844: LD_INT 92
3846: PPUSH
3847: LD_INT 51
3849: PPUSH
3850: LD_INT 2
3852: PPUSH
3853: CALL_OW 47
3857: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3858: LD_ADDR_EXP 85
3862: PUSH
3863: LD_INT 193
3865: ST_TO_ADDR
// amLeftEngs = [ ] ;
3866: LD_ADDR_EXP 86
3870: PUSH
3871: EMPTY
3872: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) , 2 ] [ Difficulty ] do
3873: LD_ADDR_VAR 0 2
3877: PUSH
3878: DOUBLE
3879: LD_INT 1
3881: DEC
3882: ST_TO_ADDR
3883: LD_INT 1
3885: PUSH
3886: LD_INT 1
3888: PUSH
3889: LD_INT 1
3891: PPUSH
3892: LD_INT 2
3894: PPUSH
3895: CALL_OW 12
3899: PUSH
3900: LD_INT 2
3902: PUSH
3903: EMPTY
3904: LIST
3905: LIST
3906: LIST
3907: LIST
3908: PUSH
3909: LD_OWVAR 67
3913: ARRAY
3914: PUSH
3915: FOR_TO
3916: IFFALSE 4007
// begin uc_nation = 1 ;
3918: LD_ADDR_OWVAR 21
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// uc_side = 1 ;
3926: LD_ADDR_OWVAR 20
3930: PUSH
3931: LD_INT 1
3933: ST_TO_ADDR
// hc_gallery =  ;
3934: LD_ADDR_OWVAR 33
3938: PUSH
3939: LD_STRING 
3941: ST_TO_ADDR
// hc_name =  ;
3942: LD_ADDR_OWVAR 26
3946: PUSH
3947: LD_STRING 
3949: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3950: LD_INT 0
3952: PPUSH
3953: LD_INT 2
3955: PPUSH
3956: LD_EXP 59
3960: PPUSH
3961: CALL_OW 380
// un = CreateHuman ;
3965: LD_ADDR_VAR 0 3
3969: PUSH
3970: CALL_OW 44
3974: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3975: LD_ADDR_EXP 86
3979: PUSH
3980: LD_EXP 86
3984: PUSH
3985: LD_VAR 0 3
3989: ADD
3990: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3991: LD_VAR 0 3
3995: PPUSH
3996: LD_EXP 84
4000: PPUSH
4001: CALL_OW 52
// end ;
4005: GO 3915
4007: POP
4008: POP
// if Difficulty >= 3 then
4009: LD_OWVAR 67
4013: PUSH
4014: LD_INT 3
4016: GREATEREQUAL
4017: IFFALSE 4141
// begin amRightEngs = [ ] ;
4019: LD_ADDR_EXP 87
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
4026: LD_ADDR_VAR 0 2
4030: PUSH
4031: DOUBLE
4032: LD_INT 1
4034: DEC
4035: ST_TO_ADDR
4036: LD_INT 1
4038: PPUSH
4039: LD_INT 2
4041: PPUSH
4042: CALL_OW 12
4046: PUSH
4047: FOR_TO
4048: IFFALSE 4139
// begin uc_nation = 1 ;
4050: LD_ADDR_OWVAR 21
4054: PUSH
4055: LD_INT 1
4057: ST_TO_ADDR
// uc_side = 1 ;
4058: LD_ADDR_OWVAR 20
4062: PUSH
4063: LD_INT 1
4065: ST_TO_ADDR
// hc_gallery =  ;
4066: LD_ADDR_OWVAR 33
4070: PUSH
4071: LD_STRING 
4073: ST_TO_ADDR
// hc_name =  ;
4074: LD_ADDR_OWVAR 26
4078: PUSH
4079: LD_STRING 
4081: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
4082: LD_INT 0
4084: PPUSH
4085: LD_INT 2
4087: PPUSH
4088: LD_EXP 59
4092: PPUSH
4093: CALL_OW 380
// un = CreateHuman ;
4097: LD_ADDR_VAR 0 3
4101: PUSH
4102: CALL_OW 44
4106: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
4107: LD_ADDR_EXP 87
4111: PUSH
4112: LD_EXP 87
4116: PUSH
4117: LD_VAR 0 3
4121: ADD
4122: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
4123: LD_VAR 0 3
4127: PPUSH
4128: LD_EXP 85
4132: PPUSH
4133: CALL_OW 52
// end ;
4137: GO 4047
4139: POP
4140: POP
// end ; end ; end_of_file
4141: LD_VAR 0 1
4145: RET
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
4146: LD_INT 0
4148: PPUSH
4149: PPUSH
// if exist_mode then
4150: LD_VAR 0 2
4154: IFFALSE 4179
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
4156: LD_ADDR_VAR 0 4
4160: PUSH
4161: LD_EXP 49
4165: PUSH
4166: LD_VAR 0 1
4170: STR
4171: PPUSH
4172: CALL_OW 34
4176: ST_TO_ADDR
4177: GO 4194
// unit := NewCharacter ( ident ) ;
4179: LD_ADDR_VAR 0 4
4183: PUSH
4184: LD_VAR 0 1
4188: PPUSH
4189: CALL_OW 25
4193: ST_TO_ADDR
// result := unit ;
4194: LD_ADDR_VAR 0 3
4198: PUSH
4199: LD_VAR 0 4
4203: ST_TO_ADDR
// end ;
4204: LD_VAR 0 3
4208: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4209: LD_INT 0
4211: PPUSH
4212: PPUSH
4213: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4214: LD_ADDR_VAR 0 1
4218: PUSH
4219: LD_VAR 0 1
4223: PUSH
4224: LD_EXP 62
4228: PUSH
4229: LD_EXP 63
4233: PUSH
4234: LD_EXP 64
4238: PUSH
4239: LD_EXP 65
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: LIST
4248: LIST
4249: DIFF
4250: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4251: LD_ADDR_VAR 0 7
4255: PUSH
4256: LD_VAR 0 1
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_VAR 0 1
4268: PPUSH
4269: CALL_OW 12
4273: ARRAY
4274: ST_TO_ADDR
// if radio then
4275: LD_VAR 0 4
4279: IFFALSE 4328
// begin if GetSex ( speaker ) = sex_male then
4281: LD_VAR 0 7
4285: PPUSH
4286: CALL_OW 258
4290: PUSH
4291: LD_INT 1
4293: EQUAL
4294: IFFALSE 4312
// SayRadio ( speaker , dialogMID ) else
4296: LD_VAR 0 7
4300: PPUSH
4301: LD_VAR 0 2
4305: PPUSH
4306: CALL_OW 94
4310: GO 4326
// SayRadio ( speaker , dialogFID ) ;
4312: LD_VAR 0 7
4316: PPUSH
4317: LD_VAR 0 3
4321: PPUSH
4322: CALL_OW 94
// end else
4326: GO 4373
// begin if GetSex ( speaker ) = sex_male then
4328: LD_VAR 0 7
4332: PPUSH
4333: CALL_OW 258
4337: PUSH
4338: LD_INT 1
4340: EQUAL
4341: IFFALSE 4359
// Say ( speaker , dialogMID ) else
4343: LD_VAR 0 7
4347: PPUSH
4348: LD_VAR 0 2
4352: PPUSH
4353: CALL_OW 88
4357: GO 4373
// Say ( speaker , dialogFID ) ;
4359: LD_VAR 0 7
4363: PPUSH
4364: LD_VAR 0 3
4368: PPUSH
4369: CALL_OW 88
// end ; result := speaker ;
4373: LD_ADDR_VAR 0 5
4377: PUSH
4378: LD_VAR 0 7
4382: ST_TO_ADDR
// end ;
4383: LD_VAR 0 5
4387: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4388: LD_INT 0
4390: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4391: LD_VAR 0 1
4395: PPUSH
4396: CALL_OW 255
4400: PUSH
4401: LD_VAR 0 3
4405: EQUAL
4406: PUSH
4407: LD_VAR 0 1
4411: PPUSH
4412: CALL_OW 302
4416: AND
4417: IFFALSE 4439
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4419: LD_VAR 0 1
4423: PPUSH
4424: LD_EXP 48
4428: PUSH
4429: LD_VAR 0 2
4433: STR
4434: PPUSH
4435: CALL_OW 38
// end ;
4439: LD_VAR 0 4
4443: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4444: LD_INT 0
4446: PPUSH
4447: PPUSH
4448: PPUSH
// resultCharactersToSave = [ ] ;
4449: LD_ADDR_VAR 0 6
4453: PUSH
4454: EMPTY
4455: ST_TO_ADDR
// for unit in characters do
4456: LD_ADDR_VAR 0 5
4460: PUSH
4461: LD_VAR 0 1
4465: PUSH
4466: FOR_IN
4467: IFFALSE 4515
// if GetSide ( unit ) = side and IsOK ( unit ) then
4469: LD_VAR 0 5
4473: PPUSH
4474: CALL_OW 255
4478: PUSH
4479: LD_VAR 0 3
4483: EQUAL
4484: PUSH
4485: LD_VAR 0 5
4489: PPUSH
4490: CALL_OW 302
4494: AND
4495: IFFALSE 4513
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4497: LD_ADDR_VAR 0 6
4501: PUSH
4502: LD_VAR 0 6
4506: PUSH
4507: LD_VAR 0 5
4511: ADD
4512: ST_TO_ADDR
4513: GO 4466
4515: POP
4516: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4517: LD_VAR 0 6
4521: PPUSH
4522: LD_EXP 48
4526: PUSH
4527: LD_VAR 0 2
4531: STR
4532: PPUSH
4533: CALL_OW 38
// end ;
4537: LD_VAR 0 4
4541: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4547: LD_ADDR_VAR 0 3
4551: PUSH
4552: LD_STRING QMoreInfo
4554: PPUSH
4555: LD_VAR 0 1
4559: PPUSH
4560: CALL_OW 98
4564: ST_TO_ADDR
// case dec of 1 :
4565: LD_VAR 0 3
4569: PUSH
4570: LD_INT 1
4572: DOUBLE
4573: EQUAL
4574: IFTRUE 4578
4576: GO 4638
4578: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4579: LD_EXP 62
4583: PPUSH
4584: LD_STRING D2a-Bur-1
4586: PPUSH
4587: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4591: LD_EXP 76
4595: PPUSH
4596: LD_STRING D2a-Pla-1
4598: PPUSH
4599: CALL_OW 88
// q1 = q diff 1 ;
4603: LD_ADDR_VAR 0 4
4607: PUSH
4608: LD_VAR 0 1
4612: PUSH
4613: LD_INT 1
4615: DIFF
4616: ST_TO_ADDR
// if q1 >= 2 then
4617: LD_VAR 0 4
4621: PUSH
4622: LD_INT 2
4624: GREATEREQUAL
4625: IFFALSE 4636
// Question1 ( q1 ) ;
4627: LD_VAR 0 4
4631: PPUSH
4632: CALL 4542 0 1
// end ; 2 :
4636: GO 4775
4638: LD_INT 2
4640: DOUBLE
4641: EQUAL
4642: IFTRUE 4646
4644: GO 4706
4646: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4647: LD_EXP 62
4651: PPUSH
4652: LD_STRING D2b-Bur-1
4654: PPUSH
4655: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4659: LD_EXP 76
4663: PPUSH
4664: LD_STRING D2b-Pla-1
4666: PPUSH
4667: CALL_OW 88
// q1 = q diff 2 ;
4671: LD_ADDR_VAR 0 4
4675: PUSH
4676: LD_VAR 0 1
4680: PUSH
4681: LD_INT 2
4683: DIFF
4684: ST_TO_ADDR
// if q1 >= 2 then
4685: LD_VAR 0 4
4689: PUSH
4690: LD_INT 2
4692: GREATEREQUAL
4693: IFFALSE 4704
// Question1 ( q1 ) ;
4695: LD_VAR 0 4
4699: PPUSH
4700: CALL 4542 0 1
// end ; 3 :
4704: GO 4775
4706: LD_INT 3
4708: DOUBLE
4709: EQUAL
4710: IFTRUE 4714
4712: GO 4774
4714: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4715: LD_EXP 62
4719: PPUSH
4720: LD_STRING D2c-Bur-1
4722: PPUSH
4723: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4727: LD_EXP 76
4731: PPUSH
4732: LD_STRING D2c-Pla-1
4734: PPUSH
4735: CALL_OW 88
// q1 = q diff 3 ;
4739: LD_ADDR_VAR 0 4
4743: PUSH
4744: LD_VAR 0 1
4748: PUSH
4749: LD_INT 3
4751: DIFF
4752: ST_TO_ADDR
// if q1 >= 2 then
4753: LD_VAR 0 4
4757: PUSH
4758: LD_INT 2
4760: GREATEREQUAL
4761: IFFALSE 4772
// Question1 ( q1 ) ;
4763: LD_VAR 0 4
4767: PPUSH
4768: CALL 4542 0 1
// end ; end ;
4772: GO 4775
4774: POP
// end ;
4775: LD_VAR 0 2
4779: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4780: LD_INT 0
4782: PPUSH
4783: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 or not GetBType ( depot ) in [ b_depot , b_warehouse ] then
4784: LD_VAR 0 1
4788: PPUSH
4789: CALL_OW 302
4793: NOT
4794: PUSH
4795: LD_VAR 0 2
4799: PPUSH
4800: CALL_OW 302
4804: NOT
4805: OR
4806: PUSH
4807: LD_VAR 0 3
4811: PPUSH
4812: CALL_OW 302
4816: NOT
4817: OR
4818: PUSH
4819: LD_VAR 0 3
4823: PPUSH
4824: CALL_OW 261
4828: PUSH
4829: LD_INT 100
4831: EQUAL
4832: OR
4833: PUSH
4834: LD_VAR 0 2
4838: PPUSH
4839: CALL_OW 266
4843: PUSH
4844: LD_INT 0
4846: PUSH
4847: LD_INT 1
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: IN
4854: NOT
4855: OR
4856: IFFALSE 4860
// exit ;
4858: GO 4993
// AddComTransport ( engineer , depot , mat_oil ) ;
4860: LD_VAR 0 1
4864: PPUSH
4865: LD_VAR 0 2
4869: PPUSH
4870: LD_INT 2
4872: PPUSH
4873: CALL_OW 211
// repeat wait ( 0 0$01 ) ;
4877: LD_INT 35
4879: PPUSH
4880: CALL_OW 67
// until Carry ( engineer ) ;
4884: LD_VAR 0 1
4888: PPUSH
4889: CALL_OW 281
4893: IFFALSE 4877
// RemoveTasks ( engineer ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4904: LD_VAR 0 1
4908: PPUSH
4909: LD_STRING O
4911: PUSH
4912: LD_INT 0
4914: PUSH
4915: LD_INT 0
4917: PUSH
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 0
4925: PUSH
4926: LD_INT 0
4928: PUSH
4929: LD_INT 0
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: LIST
4936: LIST
4937: LIST
4938: LIST
4939: LIST
4940: PUSH
4941: EMPTY
4942: LIST
4943: PPUSH
4944: CALL_OW 446
// repeat wait ( 0 0$01 ) ;
4948: LD_INT 35
4950: PPUSH
4951: CALL_OW 67
// until not Carry ( engineer ) ;
4955: LD_VAR 0 1
4959: PPUSH
4960: CALL_OW 281
4964: NOT
4965: IFFALSE 4948
// SetFuel ( vehicle , 100 ) ;
4967: LD_VAR 0 3
4971: PPUSH
4972: LD_INT 100
4974: PPUSH
4975: CALL_OW 240
// AddComEnterUnit ( engineer , depot ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_VAR 0 2
4988: PPUSH
4989: CALL_OW 180
// end ;
4993: LD_VAR 0 4
4997: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
5004: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
5005: LD_ADDR_VAR 0 8
5009: PUSH
5010: LD_INT 48
5012: PUSH
5013: LD_INT 49
5015: PUSH
5016: LD_INT 50
5018: PUSH
5019: LD_INT 20
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: LD_INT 51
5027: PUSH
5028: LD_INT 52
5030: PUSH
5031: LD_INT 69
5033: PUSH
5034: LD_INT 39
5036: PUSH
5037: LD_INT 34
5039: PUSH
5040: LD_INT 40
5042: PUSH
5043: LD_INT 53
5045: PUSH
5046: LD_INT 71
5048: PUSH
5049: LD_INT 57
5051: PUSH
5052: LD_INT 58
5054: PUSH
5055: LD_INT 44
5057: PUSH
5058: LD_INT 32
5060: PUSH
5061: LD_INT 27
5063: PUSH
5064: LD_INT 23
5066: PUSH
5067: LD_INT 33
5069: PUSH
5070: LD_INT 59
5072: PUSH
5073: LD_INT 54
5075: PUSH
5076: LD_INT 55
5078: PUSH
5079: LD_INT 56
5081: PUSH
5082: LD_INT 63
5084: PUSH
5085: LD_INT 64
5087: PUSH
5088: LD_INT 65
5090: PUSH
5091: LD_INT 30
5093: PUSH
5094: LD_INT 31
5096: PUSH
5097: LD_INT 21
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 25
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: LIST
5138: LIST
5139: ST_TO_ADDR
// for i = 1 to ru_tech_list do
5140: LD_ADDR_VAR 0 5
5144: PUSH
5145: DOUBLE
5146: LD_INT 1
5148: DEC
5149: ST_TO_ADDR
5150: LD_VAR 0 8
5154: PUSH
5155: FOR_TO
5156: IFFALSE 5232
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
5158: LD_VAR 0 8
5162: PUSH
5163: LD_VAR 0 5
5167: ARRAY
5168: PPUSH
5169: LD_VAR 0 1
5173: PPUSH
5174: CALL_OW 321
5178: PUSH
5179: LD_INT 1
5181: EQUAL
5182: PUSH
5183: LD_VAR 0 8
5187: PUSH
5188: LD_VAR 0 5
5192: ARRAY
5193: PPUSH
5194: LD_VAR 0 3
5198: PPUSH
5199: CALL_OW 482
5203: PUSH
5204: LD_INT 1
5206: EQUAL
5207: AND
5208: IFFALSE 5230
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5210: LD_VAR 0 2
5214: PPUSH
5215: LD_VAR 0 8
5219: PUSH
5220: LD_VAR 0 5
5224: ARRAY
5225: PPUSH
5226: CALL_OW 184
5230: GO 5155
5232: POP
5233: POP
// end ;
5234: LD_VAR 0 4
5238: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5239: LD_INT 0
5241: PPUSH
5242: PPUSH
5243: PPUSH
// uc_side := GetSide ( b ) ;
5244: LD_ADDR_OWVAR 20
5248: PUSH
5249: LD_VAR 0 2
5253: PPUSH
5254: CALL_OW 255
5258: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_VAR 0 2
5268: PPUSH
5269: CALL_OW 248
5273: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5274: LD_INT 0
5276: PPUSH
5277: LD_INT 1
5279: PPUSH
5280: LD_VAR 0 1
5284: PPUSH
5285: CALL_OW 380
// un = CreateHuman ;
5289: LD_ADDR_VAR 0 4
5293: PUSH
5294: CALL_OW 44
5298: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5299: LD_ADDR_VAR 0 5
5303: PUSH
5304: LD_VAR 0 2
5308: PPUSH
5309: CALL_OW 254
5313: PUSH
5314: LD_INT 3
5316: MINUS
5317: ST_TO_ADDR
// if dir < 0 then
5318: LD_VAR 0 5
5322: PUSH
5323: LD_INT 0
5325: LESS
5326: IFFALSE 5342
// dir := 6 + dir ;
5328: LD_ADDR_VAR 0 5
5332: PUSH
5333: LD_INT 6
5335: PUSH
5336: LD_VAR 0 5
5340: PLUS
5341: ST_TO_ADDR
// SetDir ( un , dir ) ;
5342: LD_VAR 0 4
5346: PPUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5356: LD_VAR 0 4
5360: PPUSH
5361: LD_VAR 0 2
5365: PPUSH
5366: CALL_OW 52
// result = un ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_VAR 0 4
5379: ST_TO_ADDR
// end ;
5380: LD_VAR 0 3
5384: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5385: LD_INT 0
5387: PPUSH
5388: PPUSH
// dir := GetDir ( b ) - 3 ;
5389: LD_ADDR_VAR 0 4
5393: PUSH
5394: LD_VAR 0 2
5398: PPUSH
5399: CALL_OW 254
5403: PUSH
5404: LD_INT 3
5406: MINUS
5407: ST_TO_ADDR
// if dir < 0 then
5408: LD_VAR 0 4
5412: PUSH
5413: LD_INT 0
5415: LESS
5416: IFFALSE 5432
// dir := 6 + dir ;
5418: LD_ADDR_VAR 0 4
5422: PUSH
5423: LD_INT 6
5425: PUSH
5426: LD_VAR 0 4
5430: PLUS
5431: ST_TO_ADDR
// SetDir ( un , dir ) ;
5432: LD_VAR 0 1
5436: PPUSH
5437: LD_VAR 0 4
5441: PPUSH
5442: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5446: LD_VAR 0 1
5450: PPUSH
5451: LD_VAR 0 2
5455: PPUSH
5456: CALL_OW 52
// result = un ;
5460: LD_ADDR_VAR 0 3
5464: PUSH
5465: LD_VAR 0 1
5469: ST_TO_ADDR
// end ;
5470: LD_VAR 0 3
5474: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5475: LD_INT 0
5477: PPUSH
5478: PPUSH
5479: PPUSH
// tmp = [ ] ;
5480: LD_ADDR_VAR 0 5
5484: PUSH
5485: EMPTY
5486: ST_TO_ADDR
// if not vehicles then
5487: LD_VAR 0 1
5491: NOT
5492: IFFALSE 5496
// exit ;
5494: GO 5613
// for i in vehicles do
5496: LD_ADDR_VAR 0 4
5500: PUSH
5501: LD_VAR 0 1
5505: PUSH
5506: FOR_IN
5507: IFFALSE 5597
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5509: LD_ADDR_VAR 0 5
5513: PUSH
5514: LD_VAR 0 5
5518: PPUSH
5519: LD_INT 1
5521: PPUSH
5522: LD_VAR 0 4
5526: PPUSH
5527: CALL_OW 265
5531: PUSH
5532: LD_VAR 0 4
5536: PPUSH
5537: CALL_OW 262
5541: PUSH
5542: LD_VAR 0 4
5546: PPUSH
5547: CALL_OW 263
5551: PUSH
5552: LD_VAR 0 4
5556: PPUSH
5557: CALL_OW 264
5561: PUSH
5562: LD_VAR 0 4
5566: PPUSH
5567: CALL_OW 261
5571: PUSH
5572: LD_VAR 0 4
5576: PPUSH
5577: CALL_OW 256
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: LIST
5586: LIST
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 2
5594: ST_TO_ADDR
5595: GO 5506
5597: POP
5598: POP
// SaveVariable ( tmp , ident ) ;
5599: LD_VAR 0 5
5603: PPUSH
5604: LD_VAR 0 2
5608: PPUSH
5609: CALL_OW 39
// end ;
5613: LD_VAR 0 3
5617: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5618: LD_INT 0
5620: PPUSH
5621: PPUSH
5622: PPUSH
// buildingsToSave = [ ] ;
5623: LD_ADDR_VAR 0 5
5627: PUSH
5628: EMPTY
5629: ST_TO_ADDR
// if not buildings then
5630: LD_VAR 0 1
5634: NOT
5635: IFFALSE 5639
// exit ;
5637: GO 6214
// for i in buildings do
5639: LD_ADDR_VAR 0 4
5643: PUSH
5644: LD_VAR 0 1
5648: PUSH
5649: FOR_IN
5650: IFFALSE 6198
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5652: LD_VAR 0 4
5656: PPUSH
5657: CALL_OW 266
5661: PUSH
5662: LD_INT 6
5664: PUSH
5665: LD_INT 7
5667: PUSH
5668: LD_INT 8
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: IN
5676: IFFALSE 5801
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5678: LD_ADDR_VAR 0 5
5682: PUSH
5683: LD_VAR 0 5
5687: PUSH
5688: LD_VAR 0 4
5692: PPUSH
5693: CALL_OW 266
5697: PUSH
5698: LD_VAR 0 4
5702: PPUSH
5703: CALL_OW 250
5707: PUSH
5708: LD_VAR 0 4
5712: PPUSH
5713: CALL_OW 251
5717: PUSH
5718: LD_VAR 0 4
5722: PPUSH
5723: CALL_OW 254
5727: PUSH
5728: LD_VAR 0 4
5732: PPUSH
5733: CALL_OW 267
5737: PUSH
5738: LD_VAR 0 4
5742: PPUSH
5743: CALL_OW 248
5747: PUSH
5748: LD_VAR 0 4
5752: PPUSH
5753: CALL_OW 256
5757: PUSH
5758: LD_VAR 0 4
5762: PPUSH
5763: LD_INT 1
5765: PPUSH
5766: CALL_OW 268
5770: PUSH
5771: LD_VAR 0 4
5775: PPUSH
5776: LD_INT 2
5778: PPUSH
5779: CALL_OW 268
5783: PUSH
5784: EMPTY
5785: LIST
5786: LIST
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: LIST
5792: LIST
5793: LIST
5794: PUSH
5795: EMPTY
5796: LIST
5797: ADD
5798: ST_TO_ADDR
5799: GO 6196
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5801: LD_VAR 0 4
5805: PPUSH
5806: CALL_OW 266
5810: PUSH
5811: LD_INT 32
5813: PUSH
5814: LD_INT 33
5816: PUSH
5817: EMPTY
5818: LIST
5819: LIST
5820: IN
5821: IFFALSE 5929
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5823: LD_ADDR_VAR 0 5
5827: PUSH
5828: LD_VAR 0 5
5832: PUSH
5833: LD_VAR 0 4
5837: PPUSH
5838: CALL_OW 266
5842: PUSH
5843: LD_VAR 0 4
5847: PPUSH
5848: CALL_OW 250
5852: PUSH
5853: LD_VAR 0 4
5857: PPUSH
5858: CALL_OW 251
5862: PUSH
5863: LD_VAR 0 4
5867: PPUSH
5868: CALL_OW 254
5872: PUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 267
5882: PUSH
5883: LD_VAR 0 4
5887: PPUSH
5888: CALL_OW 248
5892: PUSH
5893: LD_VAR 0 4
5897: PPUSH
5898: CALL_OW 256
5902: PUSH
5903: LD_VAR 0 4
5907: PPUSH
5908: CALL_OW 269
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: LIST
5917: LIST
5918: LIST
5919: LIST
5920: LIST
5921: LIST
5922: PUSH
5923: EMPTY
5924: LIST
5925: ADD
5926: ST_TO_ADDR
5927: GO 6196
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5929: LD_VAR 0 4
5933: PPUSH
5934: CALL_OW 266
5938: PUSH
5939: LD_INT 0
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: IN
5949: IFFALSE 6103
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5951: LD_ADDR_VAR 0 5
5955: PUSH
5956: LD_VAR 0 5
5960: PUSH
5961: LD_VAR 0 4
5965: PPUSH
5966: CALL_OW 266
5970: PUSH
5971: LD_VAR 0 4
5975: PPUSH
5976: CALL_OW 250
5980: PUSH
5981: LD_VAR 0 4
5985: PPUSH
5986: CALL_OW 251
5990: PUSH
5991: LD_VAR 0 4
5995: PPUSH
5996: CALL_OW 254
6000: PUSH
6001: LD_VAR 0 4
6005: PPUSH
6006: CALL_OW 267
6010: PUSH
6011: LD_VAR 0 4
6015: PPUSH
6016: CALL_OW 248
6020: PUSH
6021: LD_VAR 0 4
6025: PPUSH
6026: CALL_OW 256
6030: PUSH
6031: LD_VAR 0 4
6035: PPUSH
6036: CALL_OW 274
6040: PPUSH
6041: LD_INT 1
6043: PPUSH
6044: CALL_OW 275
6048: PUSH
6049: LD_VAR 0 4
6053: PPUSH
6054: CALL_OW 274
6058: PPUSH
6059: LD_INT 2
6061: PPUSH
6062: CALL_OW 275
6066: PUSH
6067: LD_VAR 0 4
6071: PPUSH
6072: CALL_OW 274
6076: PPUSH
6077: LD_INT 3
6079: PPUSH
6080: CALL_OW 275
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: ADD
6100: ST_TO_ADDR
6101: GO 6196
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
6103: LD_ADDR_VAR 0 5
6107: PUSH
6108: LD_VAR 0 5
6112: PUSH
6113: LD_VAR 0 4
6117: PPUSH
6118: CALL_OW 266
6122: PUSH
6123: LD_VAR 0 4
6127: PPUSH
6128: CALL_OW 250
6132: PUSH
6133: LD_VAR 0 4
6137: PPUSH
6138: CALL_OW 251
6142: PUSH
6143: LD_VAR 0 4
6147: PPUSH
6148: CALL_OW 254
6152: PUSH
6153: LD_VAR 0 4
6157: PPUSH
6158: CALL_OW 267
6162: PUSH
6163: LD_VAR 0 4
6167: PPUSH
6168: CALL_OW 248
6172: PUSH
6173: LD_VAR 0 4
6177: PPUSH
6178: CALL_OW 256
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: ADD
6195: ST_TO_ADDR
// end ;
6196: GO 5649
6198: POP
6199: POP
// SaveVariable ( buildingsToSave , ident ) ;
6200: LD_VAR 0 5
6204: PPUSH
6205: LD_VAR 0 2
6209: PPUSH
6210: CALL_OW 39
// end ;
6214: LD_VAR 0 3
6218: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6219: LD_INT 0
6221: PPUSH
6222: PPUSH
6223: PPUSH
6224: PPUSH
6225: PPUSH
// belkovTeam = [ ] ;
6226: LD_ADDR_EXP 73
6230: PUSH
6231: EMPTY
6232: ST_TO_ADDR
// if belkovReturn then
6233: LD_EXP 6
6237: IFFALSE 6255
// belkovTeam = belkovTeam ^ Belkov ;
6239: LD_ADDR_EXP 73
6243: PUSH
6244: LD_EXP 73
6248: PUSH
6249: LD_EXP 64
6253: ADD
6254: ST_TO_ADDR
// belkovTeam = belkovTeam ^ Belkov2 ;
6255: LD_ADDR_EXP 73
6259: PUSH
6260: LD_EXP 73
6264: PUSH
6265: LD_EXP 68
6269: ADD
6270: ST_TO_ADDR
// for unit in other_survivors do
6271: LD_ADDR_VAR 0 3
6275: PUSH
6276: LD_EXP 66
6280: PUSH
6281: FOR_IN
6282: IFFALSE 6323
// if IsOK ( unit ) and belkovTeam < 5 then
6284: LD_VAR 0 3
6288: PPUSH
6289: CALL_OW 302
6293: PUSH
6294: LD_EXP 73
6298: PUSH
6299: LD_INT 5
6301: LESS
6302: AND
6303: IFFALSE 6321
// belkovTeam = belkovTeam ^ unit ;
6305: LD_ADDR_EXP 73
6309: PUSH
6310: LD_EXP 73
6314: PUSH
6315: LD_VAR 0 3
6319: ADD
6320: ST_TO_ADDR
6321: GO 6281
6323: POP
6324: POP
// if belkovTeam < 5 then
6325: LD_EXP 73
6329: PUSH
6330: LD_INT 5
6332: LESS
6333: IFFALSE 6459
// begin restRandSolds = 5 - belkovTeam ;
6335: LD_ADDR_VAR 0 4
6339: PUSH
6340: LD_INT 5
6342: PUSH
6343: LD_EXP 73
6347: MINUS
6348: ST_TO_ADDR
// for i := 1 to restRandSolds do
6349: LD_ADDR_VAR 0 2
6353: PUSH
6354: DOUBLE
6355: LD_INT 1
6357: DEC
6358: ST_TO_ADDR
6359: LD_VAR 0 4
6363: PUSH
6364: FOR_TO
6365: IFFALSE 6457
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6367: LD_ADDR_VAR 0 3
6371: PUSH
6372: LD_EXP 69
6376: PPUSH
6377: LD_INT 25
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: EMPTY
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: PUSH
6395: LD_EXP 67
6399: DIFF
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6453
// if not unit in belkovTeam then
6404: LD_VAR 0 3
6408: PUSH
6409: LD_EXP 73
6413: IN
6414: NOT
6415: IFFALSE 6451
// begin belkovTeam = belkovTeam ^ unit ;
6417: LD_ADDR_EXP 73
6421: PUSH
6422: LD_EXP 73
6426: PUSH
6427: LD_VAR 0 3
6431: ADD
6432: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6433: LD_ADDR_EXP 69
6437: PUSH
6438: LD_EXP 69
6442: PUSH
6443: LD_VAR 0 3
6447: DIFF
6448: ST_TO_ADDR
// break ;
6449: GO 6453
// end ;
6451: GO 6401
6453: POP
6454: POP
6455: GO 6364
6457: POP
6458: POP
// end ; tmp = belkovTeam diff Belkov ;
6459: LD_ADDR_VAR 0 5
6463: PUSH
6464: LD_EXP 73
6468: PUSH
6469: LD_EXP 64
6473: DIFF
6474: ST_TO_ADDR
// if tmp < 4 then
6475: LD_VAR 0 5
6479: PUSH
6480: LD_INT 4
6482: LESS
6483: IFFALSE 6567
// begin for i := 1 to 4 - tmp do
6485: LD_ADDR_VAR 0 2
6489: PUSH
6490: DOUBLE
6491: LD_INT 1
6493: DEC
6494: ST_TO_ADDR
6495: LD_INT 4
6497: PUSH
6498: LD_VAR 0 5
6502: MINUS
6503: PUSH
6504: FOR_TO
6505: IFFALSE 6565
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6507: LD_INT 0
6509: PPUSH
6510: LD_INT 1
6512: PPUSH
6513: LD_INT 2
6515: PPUSH
6516: CALL_OW 12
6520: PPUSH
6521: CALL_OW 381
// unit = CreateHuman ;
6525: LD_ADDR_VAR 0 3
6529: PUSH
6530: CALL_OW 44
6534: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6535: LD_ADDR_EXP 73
6539: PUSH
6540: LD_EXP 73
6544: PUSH
6545: LD_VAR 0 3
6549: ADD
6550: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6551: LD_VAR 0 3
6555: PPUSH
6556: LD_INT 209
6558: PPUSH
6559: CALL_OW 52
// end ;
6563: GO 6504
6565: POP
6566: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6567: LD_STRING 01_Kirilenkova
6569: PPUSH
6570: CALL_OW 28
6574: IFFALSE 6594
// belkovTeam = belkovTeam ^ Kirilenkova else
6576: LD_ADDR_EXP 73
6580: PUSH
6581: LD_EXP 73
6585: PUSH
6586: LD_EXP 65
6590: ADD
6591: ST_TO_ADDR
6592: GO 6670
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6594: LD_ADDR_EXP 73
6598: PUSH
6599: LD_EXP 73
6603: PUSH
6604: LD_EXP 69
6608: PPUSH
6609: LD_INT 25
6611: PUSH
6612: LD_INT 4
6614: PUSH
6615: EMPTY
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: PPUSH
6622: CALL_OW 72
6626: PUSH
6627: LD_INT 1
6629: ARRAY
6630: ADD
6631: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6632: LD_ADDR_EXP 69
6636: PUSH
6637: LD_EXP 69
6641: PUSH
6642: LD_EXP 69
6646: PPUSH
6647: LD_INT 25
6649: PUSH
6650: LD_INT 4
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: PPUSH
6660: CALL_OW 72
6664: PUSH
6665: LD_INT 1
6667: ARRAY
6668: DIFF
6669: ST_TO_ADDR
// end ; end ;
6670: LD_VAR 0 1
6674: RET
// export function PlatonovSendSupport ; var soldsOk ; begin
6675: LD_INT 0
6677: PPUSH
6678: PPUSH
// if not Kuklajs or not IsOK ( Kuklajs ) then
6679: LD_EXP 78
6683: NOT
6684: PUSH
6685: LD_EXP 78
6689: PPUSH
6690: CALL_OW 302
6694: NOT
6695: OR
6696: IFFALSE 6799
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Benko ;
6698: LD_ADDR_VAR 0 2
6702: PUSH
6703: LD_EXP 77
6707: PPUSH
6708: LD_INT 50
6710: PUSH
6711: EMPTY
6712: LIST
6713: PPUSH
6714: CALL_OW 72
6718: PUSH
6719: LD_EXP 79
6723: DIFF
6724: ST_TO_ADDR
// if soldsOK then
6725: LD_VAR 0 2
6729: IFFALSE 6799
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6731: LD_VAR 0 2
6735: PUSH
6736: LD_INT 1
6738: ARRAY
6739: PPUSH
6740: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6744: LD_VAR 0 2
6748: PUSH
6749: LD_INT 1
6751: ARRAY
6752: PPUSH
6753: LD_INT 112
6755: PPUSH
6756: LD_INT 96
6758: PPUSH
6759: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6763: LD_VAR 0 2
6767: PUSH
6768: LD_INT 1
6770: ARRAY
6771: PPUSH
6772: LD_INT 3
6774: PPUSH
6775: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6779: LD_ADDR_EXP 77
6783: PUSH
6784: LD_EXP 77
6788: PUSH
6789: LD_VAR 0 2
6793: PUSH
6794: LD_INT 1
6796: ARRAY
6797: DIFF
6798: ST_TO_ADDR
// end ; end ; if not Benko or not IsOK ( Benko ) then
6799: LD_EXP 79
6803: NOT
6804: PUSH
6805: LD_EXP 79
6809: PPUSH
6810: CALL_OW 302
6814: NOT
6815: OR
6816: IFFALSE 6919
// begin soldsOk = UnitFilter ( platSoldiers , [ f_ok ] ) diff Kuklajs ;
6818: LD_ADDR_VAR 0 2
6822: PUSH
6823: LD_EXP 77
6827: PPUSH
6828: LD_INT 50
6830: PUSH
6831: EMPTY
6832: LIST
6833: PPUSH
6834: CALL_OW 72
6838: PUSH
6839: LD_EXP 78
6843: DIFF
6844: ST_TO_ADDR
// if soldsOK then
6845: LD_VAR 0 2
6849: IFFALSE 6919
// begin ComExitBuilding ( soldsOK [ 1 ] ) ;
6851: LD_VAR 0 2
6855: PUSH
6856: LD_INT 1
6858: ARRAY
6859: PPUSH
6860: CALL_OW 122
// AddComMoveXY ( soldsOK [ 1 ] , 112 , 96 ) ;
6864: LD_VAR 0 2
6868: PUSH
6869: LD_INT 1
6871: ARRAY
6872: PPUSH
6873: LD_INT 112
6875: PPUSH
6876: LD_INT 96
6878: PPUSH
6879: CALL_OW 171
// SetSide ( soldsOK [ 1 ] , 3 ) ;
6883: LD_VAR 0 2
6887: PUSH
6888: LD_INT 1
6890: ARRAY
6891: PPUSH
6892: LD_INT 3
6894: PPUSH
6895: CALL_OW 235
// platSoldiers = platSoldiers diff soldsOK [ 1 ] ;
6899: LD_ADDR_EXP 77
6903: PUSH
6904: LD_EXP 77
6908: PUSH
6909: LD_VAR 0 2
6913: PUSH
6914: LD_INT 1
6916: ARRAY
6917: DIFF
6918: ST_TO_ADDR
// end ; end ; ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6919: LD_EXP 78
6923: PUSH
6924: LD_EXP 79
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6937: LD_EXP 78
6941: PUSH
6942: LD_EXP 79
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PPUSH
6951: LD_INT 112
6953: PPUSH
6954: LD_INT 96
6956: PPUSH
6957: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6961: LD_EXP 78
6965: PUSH
6966: LD_EXP 79
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: LD_INT 3
6977: PPUSH
6978: CALL_OW 235
// end ; end_of_file
6982: LD_VAR 0 1
6986: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6987: LD_INT 0
6989: PPUSH
6990: PPUSH
6991: PPUSH
6992: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6993: LD_EXP 62
6997: PPUSH
6998: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
7002: LD_EXP 62
7006: PPUSH
7007: LD_INT 163
7009: PPUSH
7010: LD_INT 108
7012: PPUSH
7013: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
7017: LD_EXP 62
7021: PPUSH
7022: LD_EXP 67
7026: PPUSH
7027: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
7031: LD_ADDR_VAR 0 2
7035: PUSH
7036: LD_INT 22
7038: PUSH
7039: LD_INT 3
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 21
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PPUSH
7060: CALL_OW 69
7064: PUSH
7065: LD_EXP 62
7069: DIFF
7070: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
7071: LD_ADDR_VAR 0 4
7075: PUSH
7076: DOUBLE
7077: LD_INT 1
7079: DEC
7080: ST_TO_ADDR
7081: LD_EXP 52
7085: PUSH
7086: FOR_TO
7087: IFFALSE 7205
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7089: LD_ADDR_VAR 0 3
7093: PUSH
7094: LD_VAR 0 2
7098: PPUSH
7099: LD_EXP 52
7103: PUSH
7104: LD_VAR 0 4
7108: ARRAY
7109: PUSH
7110: LD_INT 1
7112: ARRAY
7113: PPUSH
7114: LD_EXP 52
7118: PUSH
7119: LD_VAR 0 4
7123: ARRAY
7124: PUSH
7125: LD_INT 2
7127: ARRAY
7128: PPUSH
7129: CALL_OW 73
7133: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
7134: LD_VAR 0 3
7138: PPUSH
7139: LD_EXP 52
7143: PUSH
7144: LD_VAR 0 4
7148: ARRAY
7149: PUSH
7150: LD_INT 1
7152: ARRAY
7153: PPUSH
7154: LD_EXP 52
7158: PUSH
7159: LD_VAR 0 4
7163: ARRAY
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: PPUSH
7169: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
7173: LD_VAR 0 3
7177: PPUSH
7178: LD_EXP 67
7182: PPUSH
7183: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
7187: LD_ADDR_VAR 0 2
7191: PUSH
7192: LD_VAR 0 2
7196: PUSH
7197: LD_VAR 0 3
7201: DIFF
7202: ST_TO_ADDR
// end ;
7203: GO 7086
7205: POP
7206: POP
// repeat CenterNowOnUnits ( Burlak ) ;
7207: LD_EXP 62
7211: PPUSH
7212: CALL_OW 87
// wait ( 0 0$1 ) ;
7216: LD_INT 35
7218: PPUSH
7219: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
7223: LD_EXP 62
7227: PPUSH
7228: LD_EXP 67
7232: PPUSH
7233: CALL_OW 296
7237: PUSH
7238: LD_INT 4
7240: LESS
7241: IFFALSE 7207
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
7243: LD_EXP 62
7247: PUSH
7248: LD_EXP 67
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PPUSH
7257: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
7261: LD_EXP 67
7265: PPUSH
7266: LD_EXP 62
7270: PPUSH
7271: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
7275: LD_EXP 67
7279: PPUSH
7280: LD_STRING D1-Kur-1
7282: PPUSH
7283: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
7287: LD_EXP 62
7291: PPUSH
7292: LD_STRING D1-Bur-1
7294: PPUSH
7295: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
7299: LD_EXP 67
7303: PPUSH
7304: LD_STRING D1-Kur-2
7306: PPUSH
7307: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
7311: LD_EXP 62
7315: PPUSH
7316: LD_STRING D1-Bur-2
7318: PPUSH
7319: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
7323: LD_EXP 67
7327: PPUSH
7328: LD_STRING D1-Kur-3
7330: PPUSH
7331: CALL_OW 88
// if IsOK ( Gnyevko ) then
7335: LD_EXP 63
7339: PPUSH
7340: CALL_OW 302
7344: IFFALSE 7358
// Say ( Kurin , D1-Kur-3a ) ;
7346: LD_EXP 67
7350: PPUSH
7351: LD_STRING D1-Kur-3a
7353: PPUSH
7354: CALL_OW 88
// InGameOff ;
7358: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
7362: LD_INT 22
7364: PUSH
7365: LD_INT 3
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: LD_INT 21
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PPUSH
7386: CALL_OW 69
7390: PUSH
7391: LD_EXP 62
7395: PUSH
7396: LD_EXP 63
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: DIFF
7405: PPUSH
7406: LD_INT 6
7408: PPUSH
7409: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
7413: LD_EXP 70
7417: PPUSH
7418: LD_INT 3
7420: PPUSH
7421: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
7425: LD_INT 9
7427: PPUSH
7428: LD_INT 22
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 21
7440: PUSH
7441: LD_INT 1
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PPUSH
7452: CALL_OW 70
7456: PUSH
7457: LD_EXP 67
7461: DIFF
7462: PPUSH
7463: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7467: LD_EXP 66
7471: PPUSH
7472: LD_INT 95
7474: PPUSH
7475: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7479: LD_EXP 64
7483: PPUSH
7484: LD_INT 95
7486: PPUSH
7487: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7491: LD_EXP 65
7495: PPUSH
7496: CALL_OW 305
7500: IFFALSE 7514
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7502: LD_EXP 65
7506: PPUSH
7507: LD_INT 83
7509: PPUSH
7510: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7514: LD_STRING 01_Gnyevko
7516: PPUSH
7517: CALL_OW 28
7521: NOT
7522: IFFALSE 7536
// SetSide ( randomMech , 3 ) ;
7524: LD_EXP 71
7528: PPUSH
7529: LD_INT 3
7531: PPUSH
7532: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7536: LD_STRING M1
7538: PPUSH
7539: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7543: LD_INT 3
7545: PPUSH
7546: LD_INT 6
7548: PPUSH
7549: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7553: LD_INT 3
7555: PPUSH
7556: LD_INT 7
7558: PPUSH
7559: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7563: LD_INT 6
7565: PPUSH
7566: LD_INT 6
7568: PPUSH
7569: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7573: LD_INT 6
7575: PPUSH
7576: LD_INT 7
7578: PPUSH
7579: CALL_OW 334
// SaveForQuickRestart ;
7583: CALL_OW 22
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7587: LD_EXP 66
7591: PPUSH
7592: LD_INT 95
7594: PPUSH
7595: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7599: LD_EXP 64
7603: PPUSH
7604: LD_INT 95
7606: PPUSH
7607: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7611: LD_EXP 65
7615: PPUSH
7616: CALL_OW 305
7620: IFFALSE 7634
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7622: LD_EXP 65
7626: PPUSH
7627: LD_INT 83
7629: PPUSH
7630: CALL_OW 120
// end ;
7634: LD_VAR 0 1
7638: RET
// every 1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7639: LD_EXP 20
7643: NOT
7644: PUSH
7645: LD_INT 20
7647: PPUSH
7648: LD_INT 22
7650: PUSH
7651: LD_INT 3
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: PUSH
7658: LD_INT 2
7660: PUSH
7661: LD_INT 21
7663: PUSH
7664: LD_INT 1
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 21
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PPUSH
7690: CALL_OW 70
7694: PUSH
7695: LD_INT 0
7697: GREATER
7698: AND
7699: IFFALSE 8073
7701: GO 7703
7703: DISABLE
7704: LD_INT 0
7706: PPUSH
// begin enable ;
7707: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7708: LD_ADDR_VAR 0 1
7712: PUSH
7713: LD_INT 20
7715: PPUSH
7716: LD_INT 22
7718: PUSH
7719: LD_INT 3
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 2
7728: PUSH
7729: LD_INT 21
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 21
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: LIST
7753: PUSH
7754: EMPTY
7755: LIST
7756: LIST
7757: PPUSH
7758: CALL_OW 70
7762: PUSH
7763: FOR_IN
7764: IFFALSE 8050
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 250
7780: PPUSH
7781: LD_VAR 0 1
7785: PPUSH
7786: CALL_OW 251
7790: PUSH
7791: LD_INT 5
7793: PLUS
7794: PPUSH
7795: CALL_OW 111
// if not meetPlatonov and not dialogLoopBlocker then
7799: LD_EXP 7
7803: NOT
7804: PUSH
7805: LD_EXP 33
7809: NOT
7810: AND
7811: IFFALSE 7874
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7813: LD_VAR 0 1
7817: PUSH
7818: LD_EXP 62
7822: NONEQUAL
7823: PUSH
7824: LD_EXP 70
7828: PPUSH
7829: CALL_OW 302
7833: AND
7834: IFFALSE 7848
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7836: LD_EXP 70
7840: PPUSH
7841: LD_STRING D1b-Kov-1
7843: PPUSH
7844: CALL_OW 88
// if unit = Burlak then
7848: LD_VAR 0 1
7852: PUSH
7853: LD_EXP 62
7857: EQUAL
7858: IFFALSE 7872
// Say ( Burlak , D1b-Bur-1 ) ;
7860: LD_EXP 62
7864: PPUSH
7865: LD_STRING D1b-Bur-1
7867: PPUSH
7868: CALL_OW 88
// end else
7872: GO 7893
// if not dialogLoopBlocker then
7874: LD_EXP 33
7878: NOT
7879: IFFALSE 7893
// Say ( Platonov , D8-Pla-1 ) ;
7881: LD_EXP 76
7885: PPUSH
7886: LD_STRING D8-Pla-1
7888: PPUSH
7889: CALL_OW 88
// if not dialogLoopBlocker then
7893: LD_EXP 33
7897: NOT
7898: IFFALSE 7908
// dialogLoopBlocker = true ;
7900: LD_ADDR_EXP 33
7904: PUSH
7905: LD_INT 1
7907: ST_TO_ADDR
// repeat ComMoveXY ( FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7908: LD_INT 20
7910: PPUSH
7911: LD_INT 22
7913: PUSH
7914: LD_INT 3
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PUSH
7921: LD_INT 2
7923: PUSH
7924: LD_INT 21
7926: PUSH
7927: LD_INT 1
7929: PUSH
7930: EMPTY
7931: LIST
7932: LIST
7933: PUSH
7934: LD_INT 21
7936: PUSH
7937: LD_INT 2
7939: PUSH
7940: EMPTY
7941: LIST
7942: LIST
7943: PUSH
7944: EMPTY
7945: LIST
7946: LIST
7947: LIST
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PPUSH
7953: CALL_OW 70
7957: PPUSH
7958: LD_VAR 0 1
7962: PPUSH
7963: CALL_OW 250
7967: PPUSH
7968: LD_VAR 0 1
7972: PPUSH
7973: CALL_OW 251
7977: PUSH
7978: LD_INT 5
7980: PLUS
7981: PPUSH
7982: CALL_OW 111
// wait ( 0 0$1 ) ;
7986: LD_INT 35
7988: PPUSH
7989: CALL_OW 67
// until FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) = 0 ;
7993: LD_INT 20
7995: PPUSH
7996: LD_INT 22
7998: PUSH
7999: LD_INT 3
8001: PUSH
8002: EMPTY
8003: LIST
8004: LIST
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 21
8021: PUSH
8022: LD_INT 2
8024: PUSH
8025: EMPTY
8026: LIST
8027: LIST
8028: PUSH
8029: EMPTY
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PPUSH
8038: CALL_OW 70
8042: PUSH
8043: LD_INT 0
8045: EQUAL
8046: IFFALSE 7908
// end ;
8048: GO 7763
8050: POP
8051: POP
// if dialogLoopBlocker then
8052: LD_EXP 33
8056: IFFALSE 8073
// begin wait ( 0 0$5 ) ;
8058: LD_INT 175
8060: PPUSH
8061: CALL_OW 67
// dialogLoopBlocker = false ;
8065: LD_ADDR_EXP 33
8069: PUSH
8070: LD_INT 0
8072: ST_TO_ADDR
// end ; end ;
8073: PPOPN 1
8075: END
// every 1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
8076: LD_EXP 19
8080: NOT
8081: PUSH
8082: LD_INT 8
8084: PPUSH
8085: LD_INT 22
8087: PUSH
8088: LD_INT 3
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 21
8100: PUSH
8101: LD_INT 1
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: LD_INT 21
8110: PUSH
8111: LD_INT 2
8113: PUSH
8114: EMPTY
8115: LIST
8116: LIST
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PPUSH
8127: CALL_OW 71
8131: PUSH
8132: LD_INT 0
8134: GREATER
8135: AND
8136: IFFALSE 8271
8138: GO 8140
8140: DISABLE
8141: LD_INT 0
8143: PPUSH
// begin enable ;
8144: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
8145: LD_ADDR_VAR 0 1
8149: PUSH
8150: LD_INT 8
8152: PPUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 3
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: LD_INT 21
8168: PUSH
8169: LD_INT 1
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 21
8178: PUSH
8179: LD_INT 2
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PUSH
8191: EMPTY
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 71
8199: PUSH
8200: FOR_IN
8201: IFFALSE 8254
// begin ComMoveXY ( unit , 114 , 98 ) ;
8203: LD_VAR 0 1
8207: PPUSH
8208: LD_INT 114
8210: PPUSH
8211: LD_INT 98
8213: PPUSH
8214: CALL_OW 111
// if dialogLoopBlocker then
8218: LD_EXP 33
8222: IFFALSE 8228
// exit ;
8224: POP
8225: POP
8226: GO 8271
// dialogLoopBlocker = true ;
8228: LD_ADDR_EXP 33
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
8236: LD_EXP 76
8240: PPUSH
8241: LD_STRING D8-Pla-1
8243: PPUSH
8244: CALL_OW 88
// exit ;
8248: POP
8249: POP
8250: GO 8271
// end ;
8252: GO 8200
8254: POP
8255: POP
// wait ( 0 0$5 ) ;
8256: LD_INT 175
8258: PPUSH
8259: CALL_OW 67
// dialogLoopBlocker = false ;
8263: LD_ADDR_EXP 33
8267: PUSH
8268: LD_INT 0
8270: ST_TO_ADDR
// end ;
8271: PPOPN 1
8273: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8274: LD_EXP 7
8278: NOT
8279: PUSH
8280: LD_INT 9
8282: PPUSH
8283: LD_INT 22
8285: PUSH
8286: LD_INT 3
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_INT 21
8295: PUSH
8296: LD_INT 1
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: EMPTY
8304: LIST
8305: LIST
8306: PPUSH
8307: CALL_OW 70
8311: PUSH
8312: LD_INT 0
8314: GREATER
8315: AND
8316: IFFALSE 8333
8318: GO 8320
8320: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
8321: LD_EXP 67
8325: PPUSH
8326: LD_STRING D1a-Kur-1
8328: PPUSH
8329: CALL_OW 88
8333: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( MeetBeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldiers , nearRandom ;
8334: LD_EXP 7
8338: NOT
8339: PUSH
8340: LD_EXP 62
8344: PPUSH
8345: CALL_OW 302
8349: AND
8350: PUSH
8351: LD_INT 29
8353: PPUSH
8354: LD_INT 22
8356: PUSH
8357: LD_INT 3
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 21
8366: PUSH
8367: LD_INT 1
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PPUSH
8378: CALL_OW 70
8382: PUSH
8383: LD_INT 0
8385: GREATER
8386: AND
8387: IFFALSE 9014
8389: GO 8391
8391: DISABLE
8392: LD_INT 0
8394: PPUSH
8395: PPUSH
8396: PPUSH
8397: PPUSH
8398: PPUSH
// begin enable ;
8399: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
8400: LD_ADDR_VAR 0 2
8404: PUSH
8405: LD_INT 22
8407: PUSH
8408: LD_INT 3
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 21
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PPUSH
8429: CALL_OW 69
8433: PUSH
8434: FOR_IN
8435: IFFALSE 9012
// if See ( 6 , unit ) then
8437: LD_INT 6
8439: PPUSH
8440: LD_VAR 0 2
8444: PPUSH
8445: CALL_OW 292
8449: IFFALSE 9010
// begin meetPlatonov = true ;
8451: LD_ADDR_EXP 7
8455: PUSH
8456: LD_INT 1
8458: ST_TO_ADDR
// InGameOn ;
8459: CALL_OW 8
// DialogueOn ;
8463: CALL_OW 6
// randomMaleSoldiers = UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) ;
8467: LD_ADDR_VAR 0 4
8471: PUSH
8472: LD_EXP 77
8476: PPUSH
8477: LD_INT 26
8479: PUSH
8480: LD_INT 1
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: PPUSH
8487: CALL_OW 72
8491: ST_TO_ADDR
// randomMaleSoldiers = randomMaleSoldiers ^ FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_empty ] ] ] ) ;
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 4
8501: PUSH
8502: LD_INT 8
8504: PPUSH
8505: LD_INT 22
8507: PUSH
8508: LD_INT 6
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 21
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 30
8527: PUSH
8528: LD_INT 31
8530: PUSH
8531: EMPTY
8532: LIST
8533: LIST
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: LD_INT 58
8540: PUSH
8541: EMPTY
8542: LIST
8543: PUSH
8544: EMPTY
8545: LIST
8546: LIST
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: PPUSH
8554: CALL_OW 70
8558: ADD
8559: ST_TO_ADDR
// nearRandom = NearestUnitToUnit ( randomMaleSoldiers , unit ) ;
8560: LD_ADDR_VAR 0 5
8564: PUSH
8565: LD_VAR 0 4
8569: PPUSH
8570: LD_VAR 0 2
8574: PPUSH
8575: CALL_OW 74
8579: ST_TO_ADDR
// if GetType ( nearRandom ) = unit_building then
8580: LD_VAR 0 5
8584: PPUSH
8585: CALL_OW 247
8589: PUSH
8590: LD_INT 3
8592: EQUAL
8593: IFFALSE 8614
// nearRandom = UnitsInside ( nearRandom ) [ 1 ] ;
8595: LD_ADDR_VAR 0 5
8599: PUSH
8600: LD_VAR 0 5
8604: PPUSH
8605: CALL_OW 313
8609: PUSH
8610: LD_INT 1
8612: ARRAY
8613: ST_TO_ADDR
// DialogRandom ( nearRandom , D2-RSol1-1 ,  , false ) ;
8614: LD_VAR 0 5
8618: PPUSH
8619: LD_STRING D2-RSol1-1
8621: PPUSH
8622: LD_STRING 
8624: PPUSH
8625: LD_INT 0
8627: PPUSH
8628: CALL 4209 0 4
// Say ( Burlak , D2-Bur-1 ) ;
8632: LD_EXP 62
8636: PPUSH
8637: LD_STRING D2-Bur-1
8639: PPUSH
8640: CALL_OW 88
// Say ( nearRandom , D2-RSol1-2 ) ;
8644: LD_VAR 0 5
8648: PPUSH
8649: LD_STRING D2-RSol1-2
8651: PPUSH
8652: CALL_OW 88
// DialogueOff ;
8656: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
8660: LD_ADDR_VAR 0 3
8664: PUSH
8665: LD_INT 22
8667: PUSH
8668: LD_INT 3
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 21
8677: PUSH
8678: LD_INT 1
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 50
8687: PUSH
8688: EMPTY
8689: LIST
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: LIST
8695: PPUSH
8696: CALL_OW 69
8700: ST_TO_ADDR
// for i := 1 to yourUnits do
8701: LD_ADDR_VAR 0 1
8705: PUSH
8706: DOUBLE
8707: LD_INT 1
8709: DEC
8710: ST_TO_ADDR
8711: LD_VAR 0 3
8715: PUSH
8716: FOR_TO
8717: IFFALSE 8786
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
8719: LD_VAR 0 3
8723: PUSH
8724: LD_VAR 0 1
8728: ARRAY
8729: PPUSH
8730: LD_EXP 53
8734: PUSH
8735: LD_VAR 0 1
8739: ARRAY
8740: PUSH
8741: LD_INT 1
8743: ARRAY
8744: PPUSH
8745: LD_EXP 53
8749: PUSH
8750: LD_VAR 0 1
8754: ARRAY
8755: PUSH
8756: LD_INT 2
8758: ARRAY
8759: PPUSH
8760: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
8764: LD_VAR 0 3
8768: PUSH
8769: LD_VAR 0 1
8773: ARRAY
8774: PPUSH
8775: LD_EXP 76
8779: PPUSH
8780: CALL_OW 179
// end ;
8784: GO 8716
8786: POP
8787: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8788: LD_EXP 62
8792: PPUSH
8793: CALL_OW 87
// wait ( 0 0$1 ) ;
8797: LD_INT 35
8799: PPUSH
8800: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8804: LD_EXP 62
8808: PPUSH
8809: LD_EXP 76
8813: PPUSH
8814: CALL_OW 296
8818: PUSH
8819: LD_INT 4
8821: LESS
8822: IFFALSE 8788
// ComTurnUnit ( Platonov , Burlak ) ;
8824: LD_EXP 76
8828: PPUSH
8829: LD_EXP 62
8833: PPUSH
8834: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8838: LD_EXP 76
8842: PPUSH
8843: LD_STRING D2-Pla-2
8845: PPUSH
8846: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8850: LD_EXP 62
8854: PPUSH
8855: LD_STRING D2-Bur-2
8857: PPUSH
8858: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8862: LD_EXP 76
8866: PPUSH
8867: LD_STRING D2-Pla-3
8869: PPUSH
8870: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8874: LD_EXP 62
8878: PPUSH
8879: LD_STRING D2-Bur-3
8881: PPUSH
8882: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8886: LD_EXP 76
8890: PPUSH
8891: LD_STRING D2-Pla-4
8893: PPUSH
8894: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8898: LD_EXP 62
8902: PPUSH
8903: LD_STRING D2-Bur-4
8905: PPUSH
8906: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8910: LD_EXP 76
8914: PPUSH
8915: LD_STRING D2-Pla-5
8917: PPUSH
8918: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8922: LD_INT 1
8924: PUSH
8925: LD_INT 2
8927: PUSH
8928: LD_INT 3
8930: PUSH
8931: LD_INT 4
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL 4542 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8944: LD_EXP 76
8948: PPUSH
8949: LD_STRING D3-Pla-1
8951: PPUSH
8952: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8956: LD_EXP 62
8960: PPUSH
8961: LD_STRING D3-Bur-1
8963: PPUSH
8964: CALL_OW 88
// InGameOff ;
8968: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8972: LD_STRING M2a
8974: PPUSH
8975: CALL_OW 337
// ComFree ( Platonov ) ;
8979: LD_EXP 76
8983: PPUSH
8984: CALL_OW 139
// SetSide ( beria , 3 ) ;
8988: LD_INT 106
8990: PPUSH
8991: LD_INT 3
8993: PPUSH
8994: CALL_OW 235
// canExitBase = false ;
8998: LD_ADDR_EXP 19
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// exit ;
9006: POP
9007: POP
9008: GO 9014
// end ;
9010: GO 8434
9012: POP
9013: POP
// end ;
9014: PPOPN 5
9016: END
// export function Dial_LabConstructed ; begin
9017: LD_INT 0
9019: PPUSH
// labConstructed = true ;
9020: LD_ADDR_EXP 8
9024: PUSH
9025: LD_INT 1
9027: ST_TO_ADDR
// DialogueOn ;
9028: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
9032: LD_EXP 62
9036: PPUSH
9037: LD_STRING D5a-Bur-1
9039: PPUSH
9040: CALL_OW 88
// if workshopConstructed then
9044: LD_EXP 9
9048: IFFALSE 9064
// Say ( Platonov , D5a-Pla-1 ) else
9050: LD_EXP 76
9054: PPUSH
9055: LD_STRING D5a-Pla-1
9057: PPUSH
9058: CALL_OW 88
9062: GO 9076
// Say ( Platonov , D5a-Pla-1a ) ;
9064: LD_EXP 76
9068: PPUSH
9069: LD_STRING D5a-Pla-1a
9071: PPUSH
9072: CALL_OW 88
// DialogueOff ;
9076: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
9080: LD_STRING M2b
9082: PPUSH
9083: CALL_OW 337
// end ;
9087: LD_VAR 0 1
9091: RET
// export function Dial_WorkshopConstructed ; begin
9092: LD_INT 0
9094: PPUSH
// workshopConstructed = true ;
9095: LD_ADDR_EXP 9
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// DialogueOn ;
9103: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
9107: LD_EXP 62
9111: PPUSH
9112: LD_STRING D5b-Bur-1
9114: PPUSH
9115: CALL_OW 88
// if labConstructed then
9119: LD_EXP 8
9123: IFFALSE 9139
// Say ( Platonov , D5b-Pla-1 ) else
9125: LD_EXP 76
9129: PPUSH
9130: LD_STRING D5b-Pla-1
9132: PPUSH
9133: CALL_OW 88
9137: GO 9151
// Say ( Platonov , D5b-Pla-1a ) ;
9139: LD_EXP 76
9143: PPUSH
9144: LD_STRING D5b-Pla-1a
9146: PPUSH
9147: CALL_OW 88
// DialogueOff ;
9151: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
9155: LD_STRING M2c
9157: PPUSH
9158: CALL_OW 337
// end ;
9162: LD_VAR 0 1
9166: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
9167: LD_INT 0
9169: PPUSH
// wait ( 0 0$1 ) ;
9170: LD_INT 35
9172: PPUSH
9173: CALL_OW 67
// CenterNowOnUnits ( building ) ;
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
9186: LD_INT 22
9188: PUSH
9189: LD_INT 3
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 21
9198: PUSH
9199: LD_INT 1
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PPUSH
9210: CALL_OW 69
9214: PPUSH
9215: CALL_OW 141
// DialogueOn ;
9219: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
9223: LD_EXP 76
9227: PPUSH
9228: LD_STRING D6-Pla-1
9230: PPUSH
9231: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9235: LD_EXP 62
9239: PPUSH
9240: LD_STRING D6-Bur-1
9242: PPUSH
9243: CALL_OW 88
// DialogueOff ;
9247: CALL_OW 7
// case GetBType ( building ) of b_lab :
9251: LD_VAR 0 1
9255: PPUSH
9256: CALL_OW 266
9260: PUSH
9261: LD_INT 6
9263: DOUBLE
9264: EQUAL
9265: IFTRUE 9269
9267: GO 9309
9269: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
9270: LD_INT 106
9272: PPUSH
9273: CALL_OW 274
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_INT 106
9283: PPUSH
9284: CALL_OW 274
9288: PPUSH
9289: LD_INT 1
9291: PPUSH
9292: CALL_OW 275
9296: PUSH
9297: LD_EXP 54
9301: PLUS
9302: PPUSH
9303: CALL_OW 277
9307: GO 9502
9309: LD_INT 2
9311: DOUBLE
9312: EQUAL
9313: IFTRUE 9317
9315: GO 9357
9317: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
9318: LD_INT 106
9320: PPUSH
9321: CALL_OW 274
9325: PPUSH
9326: LD_INT 1
9328: PPUSH
9329: LD_INT 106
9331: PPUSH
9332: CALL_OW 274
9336: PPUSH
9337: LD_INT 1
9339: PPUSH
9340: CALL_OW 275
9344: PUSH
9345: LD_EXP 55
9349: PLUS
9350: PPUSH
9351: CALL_OW 277
9355: GO 9502
9357: LD_INT 26
9359: DOUBLE
9360: EQUAL
9361: IFTRUE 9365
9363: GO 9405
9365: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
9366: LD_INT 106
9368: PPUSH
9369: CALL_OW 274
9373: PPUSH
9374: LD_INT 1
9376: PPUSH
9377: LD_INT 106
9379: PPUSH
9380: CALL_OW 274
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 275
9392: PUSH
9393: LD_EXP 56
9397: PLUS
9398: PPUSH
9399: CALL_OW 277
9403: GO 9502
9405: LD_INT 4
9407: DOUBLE
9408: EQUAL
9409: IFTRUE 9413
9411: GO 9453
9413: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
9414: LD_INT 106
9416: PPUSH
9417: CALL_OW 274
9421: PPUSH
9422: LD_INT 1
9424: PPUSH
9425: LD_INT 106
9427: PPUSH
9428: CALL_OW 274
9432: PPUSH
9433: LD_INT 1
9435: PPUSH
9436: CALL_OW 275
9440: PUSH
9441: LD_EXP 57
9445: PLUS
9446: PPUSH
9447: CALL_OW 277
9451: GO 9502
9453: LD_INT 31
9455: DOUBLE
9456: EQUAL
9457: IFTRUE 9461
9459: GO 9501
9461: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
9462: LD_INT 106
9464: PPUSH
9465: CALL_OW 274
9469: PPUSH
9470: LD_INT 1
9472: PPUSH
9473: LD_INT 106
9475: PPUSH
9476: CALL_OW 274
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 275
9488: PUSH
9489: LD_EXP 58
9493: PLUS
9494: PPUSH
9495: CALL_OW 277
9499: GO 9502
9501: POP
// RemoveUnit ( building ) ;
9502: LD_VAR 0 1
9506: PPUSH
9507: CALL_OW 64
// end ;
9511: LD_VAR 0 2
9515: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
9516: LD_EXP 9
9520: PUSH
9521: LD_EXP 8
9525: AND
9526: IFFALSE 9635
9528: GO 9530
9530: DISABLE
// begin DialogueOn ;
9531: CALL_OW 6
// if engineResearched then
9535: LD_EXP 10
9539: IFFALSE 9567
// begin Say ( Burlak , D7b-Bur-1 ) ;
9541: LD_EXP 62
9545: PPUSH
9546: LD_STRING D7b-Bur-1
9548: PPUSH
9549: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
9553: LD_EXP 76
9557: PPUSH
9558: LD_STRING D7b-Pla-1
9560: PPUSH
9561: CALL_OW 88
// end else
9565: GO 9591
// begin Say ( Burlak , D7a-Bur-1 ) ;
9567: LD_EXP 62
9571: PPUSH
9572: LD_STRING D7a-Bur-1
9574: PPUSH
9575: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
9579: LD_EXP 76
9583: PPUSH
9584: LD_STRING D7a-Pla-1
9586: PPUSH
9587: CALL_OW 88
// end ; DialogueOff ;
9591: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
9595: LD_STRING M2
9597: PPUSH
9598: CALL_OW 337
// CreateCratesXYR ( 3 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
9602: LD_INT 3
9604: PPUSH
9605: LD_EXP 76
9609: PPUSH
9610: CALL_OW 250
9614: PPUSH
9615: LD_EXP 76
9619: PPUSH
9620: CALL_OW 251
9624: PPUSH
9625: LD_INT 5
9627: PPUSH
9628: LD_INT 1
9630: PPUSH
9631: CALL_OW 56
// end ;
9635: END
// export function Dial_NewCrates ( x , y ) ; begin
9636: LD_INT 0
9638: PPUSH
// wait ( 0 0$18 ) ;
9639: LD_INT 630
9641: PPUSH
9642: CALL_OW 67
// if not spawnCrates then
9646: LD_EXP 21
9650: NOT
9651: IFFALSE 9655
// exit ;
9653: GO 9686
// ComMoveXY ( Platonov , x , y ) ;
9655: LD_EXP 76
9659: PPUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: LD_VAR 0 2
9669: PPUSH
9670: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
9674: LD_EXP 76
9678: PPUSH
9679: LD_STRING D4-Pla-1
9681: PPUSH
9682: CALL_OW 88
// end ;
9686: LD_VAR 0 3
9690: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
9691: LD_INT 0
9693: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9694: LD_ADDR_EXP 13
9698: PUSH
9699: LD_INT 22
9701: PUSH
9702: LD_INT 3
9704: PUSH
9705: EMPTY
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 21
9711: PUSH
9712: LD_INT 2
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: PPUSH
9723: CALL_OW 69
9727: PUSH
9728: LD_INT 1
9730: ARRAY
9731: ST_TO_ADDR
// constructedFirstVehicle = true ;
9732: LD_ADDR_EXP 12
9736: PUSH
9737: LD_INT 1
9739: ST_TO_ADDR
// InGameOn ;
9740: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 87
// wait ( 0 0$3 ) ;
9753: LD_INT 105
9755: PPUSH
9756: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9760: LD_EXP 62
9764: PPUSH
9765: LD_STRING D9-Bur-1
9767: PPUSH
9768: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
9772: LD_EXP 76
9776: PPUSH
9777: LD_EXP 13
9781: PPUSH
9782: CALL_OW 250
9786: PPUSH
9787: LD_EXP 13
9791: PPUSH
9792: CALL_OW 251
9796: PPUSH
9797: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9801: LD_INT 35
9803: PPUSH
9804: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9808: LD_EXP 76
9812: PPUSH
9813: LD_EXP 13
9817: PPUSH
9818: CALL_OW 296
9822: PUSH
9823: LD_INT 4
9825: LESS
9826: IFFALSE 9801
// ComTurnUnit ( Platonov , firstVeh ) ;
9828: LD_EXP 76
9832: PPUSH
9833: LD_EXP 13
9837: PPUSH
9838: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9842: LD_EXP 76
9846: PPUSH
9847: LD_STRING D9-Pla-1
9849: PPUSH
9850: CALL_OW 88
// InGameOff ;
9854: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9858: LD_STRING M3
9860: PPUSH
9861: CALL_OW 337
// canExitBase = true ;
9865: LD_ADDR_EXP 19
9869: PUSH
9870: LD_INT 1
9872: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9873: LD_EXP 76
9877: PPUSH
9878: LD_INT 112
9880: PPUSH
9881: LD_INT 97
9883: PPUSH
9884: CALL_OW 111
// end ;
9888: LD_VAR 0 2
9892: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9893: LD_EXP 13
9897: PPUSH
9898: LD_INT 9
9900: PPUSH
9901: CALL_OW 308
9905: PUSH
9906: LD_EXP 14
9910: NOT
9911: AND
9912: IFFALSE 10766
9914: GO 9916
9916: DISABLE
9917: LD_INT 0
9919: PPUSH
9920: PPUSH
9921: PPUSH
// begin vehicleForKurin = true ;
9922: LD_ADDR_EXP 14
9926: PUSH
9927: LD_INT 1
9929: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9930: LD_ADDR_VAR 0 2
9934: PUSH
9935: LD_EXP 69
9939: PPUSH
9940: LD_INT 25
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PPUSH
9950: CALL_OW 72
9954: PUSH
9955: LD_INT 1
9957: ARRAY
9958: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9959: LD_ADDR_VAR 0 3
9963: PUSH
9964: LD_EXP 69
9968: PPUSH
9969: LD_INT 25
9971: PUSH
9972: LD_INT 3
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PPUSH
9979: CALL_OW 72
9983: PUSH
9984: LD_INT 1
9986: ARRAY
9987: ST_TO_ADDR
// InGameOn ;
9988: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9992: LD_EXP 67
9996: PPUSH
9997: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10001: LD_EXP 13
10005: PPUSH
10006: LD_EXP 67
10010: PPUSH
10011: CALL_OW 250
10015: PPUSH
10016: LD_EXP 67
10020: PPUSH
10021: CALL_OW 251
10025: PPUSH
10026: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
10030: LD_EXP 67
10034: PPUSH
10035: LD_STRING D10-Kur-1
10037: PPUSH
10038: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
10049: LD_EXP 13
10053: PPUSH
10054: LD_EXP 67
10058: PPUSH
10059: CALL_OW 250
10063: PPUSH
10064: LD_EXP 67
10068: PPUSH
10069: CALL_OW 251
10073: PPUSH
10074: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
10078: LD_EXP 13
10082: PPUSH
10083: LD_EXP 67
10087: PPUSH
10088: CALL_OW 296
10092: PUSH
10093: LD_INT 9
10095: LESS
10096: IFFALSE 10042
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
10098: LD_EXP 13
10102: PPUSH
10103: CALL_OW 313
10107: PPUSH
10108: CALL_OW 121
// wait ( 0 0$1 ) ;
10112: LD_INT 35
10114: PPUSH
10115: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
10119: LD_EXP 13
10123: PPUSH
10124: CALL_OW 256
10128: PUSH
10129: LD_INT 1000
10131: LESS
10132: IFFALSE 10164
// begin ComExitBuilding ( mech ) ;
10134: LD_VAR 0 3
10138: PPUSH
10139: CALL_OW 122
// wait ( 0 0$1 ) ;
10143: LD_INT 35
10145: PPUSH
10146: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
10150: LD_VAR 0 3
10154: PPUSH
10155: LD_EXP 13
10159: PPUSH
10160: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
10164: LD_EXP 13
10168: PPUSH
10169: CALL_OW 261
10173: PUSH
10174: LD_INT 90
10176: LESS
10177: IFFALSE 10212
// begin ComExitBuilding ( eng ) ;
10179: LD_VAR 0 2
10183: PPUSH
10184: CALL_OW 122
// wait ( 0 0$1 ) ;
10188: LD_INT 35
10190: PPUSH
10191: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
10195: LD_VAR 0 2
10199: PPUSH
10200: LD_INT 71
10202: PPUSH
10203: LD_EXP 13
10207: PPUSH
10208: CALL 4780 0 3
// end ; repeat wait ( 0 0$1 ) ;
10212: LD_INT 35
10214: PPUSH
10215: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
10219: LD_EXP 13
10223: PPUSH
10224: CALL_OW 256
10228: PUSH
10229: LD_INT 1000
10231: EQUAL
10232: PUSH
10233: LD_EXP 13
10237: PPUSH
10238: CALL_OW 261
10242: PUSH
10243: LD_INT 90
10245: GREATER
10246: AND
10247: IFFALSE 10212
// if UnitsInside ( firstVeh ) then
10249: LD_EXP 13
10253: PPUSH
10254: CALL_OW 313
10258: IFFALSE 10278
// ComExitVehicle ( UnitsInside ( firstVeh ) [ 1 ] ) ;
10260: LD_EXP 13
10264: PPUSH
10265: CALL_OW 313
10269: PUSH
10270: LD_INT 1
10272: ARRAY
10273: PPUSH
10274: CALL_OW 121
// ComEnterUnit ( eng , kirov ) ;
10278: LD_VAR 0 2
10282: PPUSH
10283: LD_INT 71
10285: PPUSH
10286: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
10290: LD_EXP 13
10294: PPUSH
10295: LD_INT 6
10297: PPUSH
10298: CALL_OW 235
// if belkovReturn then
10302: LD_EXP 6
10306: IFFALSE 10392
// begin if IsInUnit ( Belkov ) then
10308: LD_EXP 64
10312: PPUSH
10313: CALL_OW 310
10317: IFFALSE 10328
// ComExitBuilding ( Belkov ) ;
10319: LD_EXP 64
10323: PPUSH
10324: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10328: LD_INT 35
10330: PPUSH
10331: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
10335: LD_EXP 64
10339: PPUSH
10340: LD_EXP 13
10344: PPUSH
10345: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
10349: LD_EXP 64
10353: PPUSH
10354: CALL_OW 310
10358: PUSH
10359: LD_EXP 13
10363: EQUAL
10364: IFFALSE 10328
// Say ( Belkov , D10-Bel-1 ) ;
10366: LD_EXP 64
10370: PPUSH
10371: LD_STRING D10-Bel-1
10373: PPUSH
10374: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
10378: LD_EXP 67
10382: PPUSH
10383: LD_STRING D10-Kur-2
10385: PPUSH
10386: CALL_OW 88
// end else
10390: GO 10518
// begin if IsInUnit ( Belkov2 ) then
10392: LD_EXP 68
10396: PPUSH
10397: CALL_OW 310
10401: IFFALSE 10412
// ComExitBuilding ( Belkov2 ) ;
10403: LD_EXP 68
10407: PPUSH
10408: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
10419: LD_EXP 68
10423: PPUSH
10424: LD_EXP 13
10428: PPUSH
10429: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
10433: LD_EXP 68
10437: PPUSH
10438: CALL_OW 310
10442: PUSH
10443: LD_EXP 13
10447: EQUAL
10448: IFFALSE 10412
// meetBelkovBrother = true ;
10450: LD_ADDR_EXP 4
10454: PUSH
10455: LD_INT 1
10457: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
10458: LD_EXP 68
10462: PPUSH
10463: LD_STRING D10-Bel-1
10465: PPUSH
10466: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
10470: LD_EXP 62
10474: PPUSH
10475: LD_STRING D10-Bur-1
10477: PPUSH
10478: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
10482: LD_EXP 68
10486: PPUSH
10487: LD_STRING D10-Bel-2
10489: PPUSH
10490: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10494: LD_EXP 62
10498: PPUSH
10499: LD_STRING D10-Bur-2
10501: PPUSH
10502: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10506: LD_EXP 67
10510: PPUSH
10511: LD_STRING D10-Kur-2a
10513: PPUSH
10514: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
10518: LD_ADDR_EXP 74
10522: PUSH
10523: EMPTY
10524: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
10525: LD_ADDR_EXP 75
10529: PUSH
10530: EMPTY
10531: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
10532: LD_ADDR_EXP 22
10536: PUSH
10537: LD_INT 1
10539: ST_TO_ADDR
// CreateBelkovTeam ;
10540: CALL 6219 0 0
// ComExitBuilding ( belkovTeam ) ;
10544: LD_EXP 73
10548: PPUSH
10549: CALL_OW 122
// wait ( 0 0$1 ) ;
10553: LD_INT 35
10555: PPUSH
10556: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
10560: LD_ADDR_EXP 72
10564: PUSH
10565: LD_INT 22
10567: PUSH
10568: LD_INT 6
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 21
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PPUSH
10589: CALL_OW 69
10593: PUSH
10594: LD_INT 1
10596: ARRAY
10597: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
10598: LD_ADDR_EXP 73
10602: PUSH
10603: LD_EXP 73
10607: PUSH
10608: LD_EXP 72
10612: ADD
10613: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
10614: LD_EXP 73
10618: PPUSH
10619: LD_INT 147
10621: PPUSH
10622: LD_INT 102
10624: PPUSH
10625: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
10629: LD_EXP 73
10633: PPUSH
10634: LD_INT 133
10636: PPUSH
10637: LD_INT 94
10639: PPUSH
10640: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
10644: LD_EXP 73
10648: PPUSH
10649: LD_INT 123
10651: PPUSH
10652: LD_INT 74
10654: PPUSH
10655: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
10659: LD_EXP 73
10663: PPUSH
10664: LD_INT 111
10666: PPUSH
10667: LD_INT 48
10669: PPUSH
10670: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
10674: LD_EXP 73
10678: PPUSH
10679: LD_INT 122
10681: PPUSH
10682: LD_INT 43
10684: PPUSH
10685: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
10689: LD_EXP 73
10693: PPUSH
10694: LD_INT 129
10696: PPUSH
10697: LD_INT 32
10699: PPUSH
10700: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
10704: LD_EXP 73
10708: PPUSH
10709: LD_INT 132
10711: PPUSH
10712: LD_INT 22
10714: PPUSH
10715: CALL_OW 171
// wait ( 0 0$8 ) ;
10719: LD_INT 280
10721: PPUSH
10722: CALL_OW 67
// CenterNowOnUnits ( Kurin ) ;
10726: LD_EXP 67
10730: PPUSH
10731: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
10735: LD_EXP 67
10739: PPUSH
10740: LD_STRING D10-Kur-2b
10742: PPUSH
10743: CALL_OW 88
// InGameOff ;
10747: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
10751: LD_STRING M4
10753: PPUSH
10754: CALL_OW 337
// backToBeria1 = true ;
10758: LD_ADDR_EXP 15
10762: PUSH
10763: LD_INT 1
10765: ST_TO_ADDR
// end ;
10766: PPOPN 3
10768: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
10769: LD_INT 9
10771: PPUSH
10772: LD_INT 22
10774: PUSH
10775: LD_INT 3
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 21
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PPUSH
10796: CALL_OW 70
10800: PUSH
10801: LD_EXP 14
10805: AND
10806: IFFALSE 10823
10808: GO 10810
10810: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10811: LD_EXP 67
10815: PPUSH
10816: LD_STRING D1a-Kur-1a
10818: PPUSH
10819: CALL_OW 88
10823: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10824: LD_EXP 22
10828: IFFALSE 11231
10830: GO 10832
10832: DISABLE
10833: LD_INT 0
10835: PPUSH
10836: PPUSH
// begin enable ;
10837: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10838: LD_INT 10
10840: PPUSH
10841: LD_INT 22
10843: PUSH
10844: LD_INT 6
10846: PUSH
10847: EMPTY
10848: LIST
10849: LIST
10850: PPUSH
10851: CALL_OW 70
10855: PUSH
10856: LD_INT 0
10858: EQUAL
10859: IFFALSE 10863
// exit ;
10861: GO 11231
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10863: LD_ADDR_VAR 0 1
10867: PUSH
10868: LD_INT 10
10870: PPUSH
10871: LD_INT 22
10873: PUSH
10874: LD_INT 6
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PPUSH
10881: CALL_OW 70
10885: PUSH
10886: FOR_IN
10887: IFFALSE 11217
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10889: LD_VAR 0 1
10893: PPUSH
10894: CALL_OW 247
10898: PUSH
10899: LD_INT 1
10901: EQUAL
10902: PUSH
10903: LD_VAR 0 1
10907: PUSH
10908: LD_EXP 64
10912: EQUAL
10913: NOT
10914: PUSH
10915: LD_VAR 0 1
10919: PUSH
10920: LD_EXP 68
10924: EQUAL
10925: NOT
10926: AND
10927: PUSH
10928: LD_VAR 0 1
10932: PUSH
10933: LD_EXP 65
10937: EQUAL
10938: NOT
10939: AND
10940: AND
10941: IFFALSE 10982
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10943: LD_ADDR_EXP 23
10947: PUSH
10948: LD_EXP 23
10952: PUSH
10953: LD_INT 1
10955: PLUS
10956: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10957: LD_ADDR_EXP 74
10961: PUSH
10962: LD_EXP 74
10966: PUSH
10967: LD_VAR 0 1
10971: ADD
10972: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10973: LD_VAR 0 1
10977: PPUSH
10978: CALL_OW 64
// end ; if unit = Kirilenkova then
10982: LD_VAR 0 1
10986: PUSH
10987: LD_EXP 65
10991: EQUAL
10992: IFFALSE 11015
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10994: LD_EXP 65
10998: PPUSH
10999: LD_STRING 02_TmpKirilenkova
11001: PPUSH
11002: CALL_OW 38
// RemoveUnit ( unit ) ;
11006: LD_VAR 0 1
11010: PPUSH
11011: CALL_OW 64
// end ; if unit = Belkov2 then
11015: LD_VAR 0 1
11019: PUSH
11020: LD_EXP 68
11024: EQUAL
11025: IFFALSE 11048
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11027: LD_EXP 68
11031: PPUSH
11032: LD_STRING 02_TmpBelkov2
11034: PPUSH
11035: CALL_OW 38
// RemoveUnit ( unit ) ;
11039: LD_VAR 0 1
11043: PPUSH
11044: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
11048: LD_VAR 0 1
11052: PPUSH
11053: CALL_OW 247
11057: PUSH
11058: LD_INT 2
11060: EQUAL
11061: IFFALSE 11215
// begin driver = UnitsInside ( unit ) ;
11063: LD_ADDR_VAR 0 2
11067: PUSH
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 313
11077: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
11078: LD_VAR 0 2
11082: PUSH
11083: LD_INT 1
11085: ARRAY
11086: PUSH
11087: LD_EXP 64
11091: EQUAL
11092: IFFALSE 11117
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
11094: LD_EXP 64
11098: PPUSH
11099: LD_STRING 02_TmpBelkov
11101: PPUSH
11102: CALL_OW 38
// RemoveUnit ( unit ) ;
11106: LD_VAR 0 1
11110: PPUSH
11111: CALL_OW 64
// end else
11115: GO 11138
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
11117: LD_EXP 68
11121: PPUSH
11122: LD_STRING 02_TmpBelkov2
11124: PPUSH
11125: CALL_OW 38
// RemoveUnit ( unit ) ;
11129: LD_VAR 0 1
11133: PPUSH
11134: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
11138: LD_ADDR_EXP 75
11142: PUSH
11143: LD_EXP 75
11147: PUSH
11148: LD_VAR 0 1
11152: PPUSH
11153: CALL_OW 265
11157: PUSH
11158: LD_VAR 0 1
11162: PPUSH
11163: CALL_OW 262
11167: PUSH
11168: LD_VAR 0 1
11172: PPUSH
11173: CALL_OW 263
11177: PUSH
11178: LD_VAR 0 1
11182: PPUSH
11183: CALL_OW 264
11187: PUSH
11188: LD_VAR 0 1
11192: PPUSH
11193: CALL_OW 261
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: ADD
11205: ST_TO_ADDR
// RemoveUnit ( unit ) ;
11206: LD_VAR 0 1
11210: PPUSH
11211: CALL_OW 64
// end ; end ;
11215: GO 10886
11217: POP
11218: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
11219: LD_EXP 74
11223: PPUSH
11224: LD_STRING 02_TmpBelkovTeam
11226: PPUSH
11227: CALL_OW 38
// end ;
11231: PPOPN 2
11233: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
11234: LD_INT 8
11236: PPUSH
11237: LD_INT 22
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 21
11249: PUSH
11250: LD_INT 1
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 71
11265: PUSH
11266: LD_INT 0
11268: EQUAL
11269: PUSH
11270: LD_EXP 15
11274: AND
11275: IFFALSE 11482
11277: GO 11279
11279: DISABLE
11280: LD_INT 0
11282: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
11283: LD_ADDR_VAR 0 1
11287: PUSH
11288: LD_EXP 69
11292: PPUSH
11293: LD_INT 25
11295: PUSH
11296: LD_INT 2
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: PPUSH
11303: CALL_OW 72
11307: ST_TO_ADDR
// backToBeria1 = false ;
11308: LD_ADDR_EXP 15
11312: PUSH
11313: LD_INT 0
11315: ST_TO_ADDR
// canExitBase = false ;
11316: LD_ADDR_EXP 19
11320: PUSH
11321: LD_INT 0
11323: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
11324: LD_EXP 76
11328: PPUSH
11329: LD_STRING D11-Pla-1
11331: PPUSH
11332: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
11336: LD_INT 22
11338: PUSH
11339: LD_INT 3
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: PUSH
11346: LD_INT 21
11348: PUSH
11349: LD_INT 1
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 69
11364: PUSH
11365: LD_INT 1
11367: GREATER
11368: IFFALSE 11384
// Say ( Burlak , D11-Bur-1a ) else
11370: LD_EXP 62
11374: PPUSH
11375: LD_STRING D11-Bur-1a
11377: PPUSH
11378: CALL_OW 88
11382: GO 11396
// Say ( Burlak , D11-Bur-1 ) ;
11384: LD_EXP 62
11388: PPUSH
11389: LD_STRING D11-Bur-1
11391: PPUSH
11392: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
11396: LD_STRING M5
11398: PPUSH
11399: CALL_OW 337
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
11403: LD_INT 1
11405: PPUSH
11406: LD_INT 5
11408: PPUSH
11409: CALL_OW 12
11413: PPUSH
11414: LD_INT 26
11416: PPUSH
11417: LD_INT 1
11419: PPUSH
11420: CALL_OW 55
// construcMoreVehicles = true ;
11424: LD_ADDR_EXP 17
11428: PUSH
11429: LD_INT 1
11431: ST_TO_ADDR
// spawnCrates = true ;
11432: LD_ADDR_EXP 21
11436: PUSH
11437: LD_INT 1
11439: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
11449: LD_VAR 0 1
11453: PPUSH
11454: LD_INT 2
11456: PPUSH
11457: LD_INT 159
11459: PPUSH
11460: LD_INT 112
11462: PPUSH
11463: LD_INT 0
11465: PPUSH
11466: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
11470: LD_VAR 0 1
11474: PPUSH
11475: LD_INT 71
11477: PPUSH
11478: CALL_OW 180
// end ;
11482: PPOPN 1
11484: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
11485: LD_EXP 18
11489: PUSH
11490: LD_INT 22
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 21
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PPUSH
11514: CALL_OW 69
11518: GREATEREQUAL
11519: IFFALSE 12647
11521: GO 11523
11523: DISABLE
11524: LD_INT 0
11526: PPUSH
11527: PPUSH
// begin canRemoveBelkovUnits = false ;
11528: LD_ADDR_EXP 22
11532: PUSH
11533: LD_INT 0
11535: ST_TO_ADDR
// spawnCrates = false ;
11536: LD_ADDR_EXP 21
11540: PUSH
11541: LD_INT 0
11543: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
11544: LD_INT 22
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: LD_INT 21
11559: PUSH
11560: LD_INT 1
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 21
11569: PUSH
11570: LD_INT 2
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: PPUSH
11591: CALL_OW 141
// InGameOn ;
11595: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
11599: LD_EXP 76
11603: PPUSH
11604: CALL_OW 85
// DialogueOn ;
11608: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
11612: LD_EXP 62
11616: PPUSH
11617: LD_STRING D12-Bur-1
11619: PPUSH
11620: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
11624: LD_EXP 76
11628: PPUSH
11629: LD_STRING D12-Pla-1
11631: PPUSH
11632: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
11636: LD_EXP 62
11640: PPUSH
11641: LD_STRING D12-Bur-2
11643: PPUSH
11644: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
11648: LD_EXP 76
11652: PPUSH
11653: LD_STRING D12-Pla-2
11655: PPUSH
11656: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
11660: LD_EXP 62
11664: PPUSH
11665: LD_STRING D12-Bur-3
11667: PPUSH
11668: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
11672: LD_EXP 76
11676: PPUSH
11677: LD_STRING D12-Pla-3
11679: PPUSH
11680: CALL_OW 88
// DialogueOff ;
11684: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 1
11693: PPUSH
11694: LD_INT 1
11696: PPUSH
11697: LD_INT 1
11699: PPUSH
11700: CALL_OW 80
// PrepareAmerican ;
11704: CALL 2906 0 0
// PrepareBelkovReturnTeam ;
11708: CALL 1159 0 0
// if IsOK ( Belkov ) then
11712: LD_EXP 64
11716: PPUSH
11717: CALL_OW 302
11721: IFFALSE 11735
// tmpBelkov = Belkov else
11723: LD_ADDR_VAR 0 1
11727: PUSH
11728: LD_EXP 64
11732: ST_TO_ADDR
11733: GO 11745
// tmpBelkov = Belkov2 ;
11735: LD_ADDR_VAR 0 1
11739: PUSH
11740: LD_EXP 68
11744: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
11745: LD_EXP 72
11749: PPUSH
11750: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
11754: LD_EXP 80
11758: PPUSH
11759: LD_STRING D13-Sol1-1
11761: PPUSH
11762: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
11766: LD_VAR 0 1
11770: PPUSH
11771: LD_STRING D13-Bel-1
11773: PPUSH
11774: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
11778: LD_EXP 67
11782: PPUSH
11783: LD_STRING D13-Kur-1
11785: PPUSH
11786: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
11790: LD_VAR 0 1
11794: PPUSH
11795: LD_STRING D13-Bel-2
11797: PPUSH
11798: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11802: LD_EXP 73
11806: PPUSH
11807: LD_INT 121
11809: PPUSH
11810: LD_INT 29
11812: PPUSH
11813: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11817: LD_INT 35
11819: PPUSH
11820: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
11824: LD_EXP 72
11828: PPUSH
11829: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
11833: LD_ADDR_VAR 0 2
11837: PUSH
11838: LD_EXP 73
11842: PPUSH
11843: LD_INT 21
11845: PUSH
11846: LD_INT 1
11848: PUSH
11849: EMPTY
11850: LIST
11851: LIST
11852: PUSH
11853: LD_INT 56
11855: PUSH
11856: EMPTY
11857: LIST
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PPUSH
11863: CALL_OW 72
11867: PPUSH
11868: LD_EXP 72
11872: PPUSH
11873: CALL_OW 74
11877: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11878: LD_EXP 72
11882: PPUSH
11883: LD_VAR 0 2
11887: PPUSH
11888: CALL_OW 296
11892: PUSH
11893: LD_INT 5
11895: LESS
11896: IFFALSE 11909
// ComStop ( kirovVehicle ) else
11898: LD_EXP 72
11902: PPUSH
11903: CALL_OW 141
11907: GO 11924
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11909: LD_EXP 73
11913: PPUSH
11914: LD_INT 121
11916: PPUSH
11917: LD_INT 29
11919: PPUSH
11920: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11924: LD_EXP 73
11928: PPUSH
11929: LD_EXP 80
11933: PPUSH
11934: CALL_OW 74
11938: PPUSH
11939: LD_EXP 80
11943: PPUSH
11944: CALL_OW 296
11948: PUSH
11949: LD_INT 5
11951: LESS
11952: IFFALSE 11817
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11954: LD_EXP 72
11958: PUSH
11959: LD_EXP 80
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PPUSH
11968: CALL_OW 87
// ComWalk ( trapTeam ) ;
11972: LD_EXP 81
11976: PPUSH
11977: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11981: LD_EXP 81
11985: PPUSH
11986: LD_EXP 72
11990: PPUSH
11991: CALL_OW 179
// ComStop ( belkovTeam ) ;
11995: LD_EXP 73
11999: PPUSH
12000: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
12004: LD_EXP 73
12008: PPUSH
12009: LD_EXP 80
12013: PPUSH
12014: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
12018: LD_INT 25
12020: PPUSH
12021: LD_INT 22
12023: PUSH
12024: LD_INT 1
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 21
12033: PUSH
12034: LD_INT 1
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: PPUSH
12045: CALL_OW 70
12049: PPUSH
12050: LD_INT 111
12052: PPUSH
12053: LD_INT 13
12055: PPUSH
12056: CALL_OW 171
// music_class = music_combat ;
12060: LD_ADDR_OWVAR 72
12064: PUSH
12065: LD_INT 1
12067: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12068: LD_INT 35
12070: PPUSH
12071: CALL_OW 67
// DialogueOn ;
12075: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
12079: LD_EXP 80
12083: PPUSH
12084: LD_STRING D14-Sol1-1
12086: PPUSH
12087: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
12091: LD_VAR 0 1
12095: PPUSH
12096: LD_STRING D14-Bel-1
12098: PPUSH
12099: CALL_OW 88
// DialogueOff ;
12103: CALL_OW 7
// immortalBelkovTeam = true ;
12107: LD_ADDR_EXP 24
12111: PUSH
12112: LD_INT 1
12114: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
12115: LD_INT 6
12117: PPUSH
12118: LD_INT 1
12120: PPUSH
12121: LD_INT 2
12123: PPUSH
12124: LD_INT 1
12126: PPUSH
12127: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
12131: LD_EXP 73
12135: PPUSH
12136: LD_INT 107
12138: PPUSH
12139: LD_INT 5
12141: PPUSH
12142: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
12146: LD_EXP 72
12150: PPUSH
12151: LD_INT 107
12153: PPUSH
12154: LD_INT 5
12156: PPUSH
12157: CALL_OW 111
// wait ( 0 0$2 ) ;
12161: LD_INT 70
12163: PPUSH
12164: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
12168: LD_EXP 73
12172: PPUSH
12173: LD_INT 101
12175: PPUSH
12176: LD_INT 19
12178: PPUSH
12179: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
12183: LD_EXP 72
12187: PPUSH
12188: LD_INT 101
12190: PPUSH
12191: LD_INT 19
12193: PPUSH
12194: CALL_OW 111
// wait ( 0 0$2 ) ;
12198: LD_INT 70
12200: PPUSH
12201: CALL_OW 67
// immortalVehLive = 400 ;
12205: LD_ADDR_EXP 25
12209: PUSH
12210: LD_INT 400
12212: ST_TO_ADDR
// SetLives ( kirovVehicle , 500 ) ;
12213: LD_EXP 72
12217: PPUSH
12218: LD_INT 500
12220: PPUSH
12221: CALL_OW 234
// wait ( 0 0$3 ) ;
12225: LD_INT 105
12227: PPUSH
12228: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
12232: LD_VAR 0 1
12236: PPUSH
12237: CALL_OW 121
// wait ( 0 0$1 ) ;
12241: LD_INT 35
12243: PPUSH
12244: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
12248: LD_EXP 80
12252: PPUSH
12253: LD_EXP 72
12257: PPUSH
12258: CALL_OW 120
// AddComHold ( trapTeam ) ;
12262: LD_EXP 81
12266: PPUSH
12267: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
12271: LD_EXP 73
12275: PPUSH
12276: LD_INT 88
12278: PPUSH
12279: LD_INT 18
12281: PPUSH
12282: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
12286: LD_INT 35
12288: PPUSH
12289: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
12302: LD_VAR 0 1
12306: PPUSH
12307: LD_INT 15
12309: PPUSH
12310: CALL_OW 308
12314: IFFALSE 12286
// amVeh = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
12316: LD_ADDR_EXP 88
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_INT 1
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 21
12333: PUSH
12334: LD_INT 2
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PPUSH
12345: CALL_OW 69
12349: PUSH
12350: LD_INT 1
12352: ARRAY
12353: ST_TO_ADDR
// ComMoveXY ( FilterUnitsInArea ( NearHillArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 113 , 29 ) ;
12354: LD_INT 28
12356: PPUSH
12357: LD_INT 22
12359: PUSH
12360: LD_INT 1
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 21
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 70
12385: PPUSH
12386: LD_INT 113
12388: PPUSH
12389: LD_INT 29
12391: PPUSH
12392: CALL_OW 111
// ComMoveXY ( amVeh , 118 , 25 ) ;
12396: LD_EXP 88
12400: PPUSH
12401: LD_INT 118
12403: PPUSH
12404: LD_INT 25
12406: PPUSH
12407: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
12411: LD_VAR 0 1
12415: PPUSH
12416: LD_STRING D14-Bel-1a
12418: PPUSH
12419: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
12423: LD_EXP 67
12427: PPUSH
12428: LD_STRING D14-Kur-1
12430: PPUSH
12431: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
12435: LD_VAR 0 1
12439: PPUSH
12440: LD_STRING D14-Bel-2
12442: PPUSH
12443: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
12447: LD_EXP 67
12451: PPUSH
12452: LD_STRING D14-Kur-2
12454: PPUSH
12455: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
12459: LD_EXP 76
12463: PPUSH
12464: CALL_OW 85
// wait ( 0 0$2 ) ;
12468: LD_INT 70
12470: PPUSH
12471: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
12475: LD_EXP 62
12479: PPUSH
12480: LD_STRING D14a-Bur-1
12482: PPUSH
12483: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
12487: LD_EXP 76
12491: PPUSH
12492: LD_STRING D14a-Pla-1
12494: PPUSH
12495: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
12499: LD_EXP 62
12503: PPUSH
12504: LD_STRING D14a-Bur-2
12506: PPUSH
12507: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
12511: LD_EXP 76
12515: PPUSH
12516: LD_STRING D14a-Pla-2
12518: PPUSH
12519: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
12523: LD_EXP 62
12527: PPUSH
12528: LD_STRING D14a-Bur-3
12530: PPUSH
12531: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
12535: LD_EXP 76
12539: PPUSH
12540: LD_STRING D14a-Pla-3
12542: PPUSH
12543: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
12547: LD_EXP 62
12551: PPUSH
12552: LD_STRING D14a-Bur-4
12554: PPUSH
12555: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
12559: LD_EXP 76
12563: PPUSH
12564: LD_STRING D14a-Pla-4
12566: PPUSH
12567: CALL_OW 88
// InGameOff ;
12571: CALL_OW 9
// immortalBelkovTeam = false ;
12575: LD_ADDR_EXP 24
12579: PUSH
12580: LD_INT 0
12582: ST_TO_ADDR
// activateAMAI = true ;
12583: LD_ADDR_EXP 27
12587: PUSH
12588: LD_INT 1
12590: ST_TO_ADDR
// canExitBase = true ;
12591: LD_ADDR_EXP 19
12595: PUSH
12596: LD_INT 1
12598: ST_TO_ADDR
// canExploreMap = true ;
12599: LD_ADDR_EXP 20
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// construcMoreVehicles = false ;
12607: LD_ADDR_EXP 17
12611: PUSH
12612: LD_INT 0
12614: ST_TO_ADDR
// activateBelkovAI = true ;
12615: LD_ADDR_EXP 28
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
12623: LD_STRING M6
12625: PPUSH
12626: CALL_OW 337
// music_class = 0 ;
12630: LD_ADDR_OWVAR 72
12634: PUSH
12635: LD_INT 0
12637: ST_TO_ADDR
// ComFree ( trapTeam ) ;
12638: LD_EXP 81
12642: PPUSH
12643: CALL_OW 139
// end ;
12647: PPOPN 2
12649: END
// every 0 0$1 trigger GetDistUnitXY ( amVeh , 118 , 25 ) < 6 do
12650: LD_EXP 88
12654: PPUSH
12655: LD_INT 118
12657: PPUSH
12658: LD_INT 25
12660: PPUSH
12661: CALL_OW 297
12665: PUSH
12666: LD_INT 6
12668: LESS
12669: IFFALSE 12764
12671: GO 12673
12673: DISABLE
// begin ComExitVehicle ( trapCommander ) ;
12674: LD_EXP 80
12678: PPUSH
12679: CALL_OW 121
// uc_side = 1 ;
12683: LD_ADDR_OWVAR 20
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// uc_nation = 1 ;
12691: LD_ADDR_OWVAR 21
12695: PUSH
12696: LD_INT 1
12698: ST_TO_ADDR
// PrepareMechanic ( 0 , enemySkillLevel ) ;
12699: LD_INT 0
12701: PPUSH
12702: LD_EXP 59
12706: PPUSH
12707: CALL_OW 383
// amMech = CreateHuman ;
12711: LD_ADDR_EXP 89
12715: PUSH
12716: CALL_OW 44
12720: ST_TO_ADDR
// PlaceUnitArea ( amMech , AmMechSpawnArea , false ) ;
12721: LD_EXP 89
12725: PPUSH
12726: LD_INT 27
12728: PPUSH
12729: LD_INT 0
12731: PPUSH
12732: CALL_OW 49
// ComRepairVehicle ( amMech , amVeh ) ;
12736: LD_EXP 89
12740: PPUSH
12741: LD_EXP 88
12745: PPUSH
12746: CALL_OW 129
// AddComEnterUnit ( amMech , amVeh ) ;
12750: LD_EXP 89
12754: PPUSH
12755: LD_EXP 88
12759: PPUSH
12760: CALL_OW 180
// end ;
12764: END
// every 0 0$1 trigger IsOK ( amMech ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) do var nearUnit ;
12765: LD_EXP 89
12769: PPUSH
12770: CALL_OW 302
12774: PUSH
12775: LD_INT 22
12777: PUSH
12778: LD_INT 1
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 2
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 50
12797: PUSH
12798: EMPTY
12799: LIST
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: PPUSH
12806: CALL_OW 69
12810: AND
12811: IFFALSE 13064
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
// begin enable ;
12819: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) , amMech ) ;
12820: LD_ADDR_VAR 0 1
12824: PUSH
12825: LD_INT 22
12827: PUSH
12828: LD_INT 3
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 21
12850: PUSH
12851: LD_INT 2
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: PPUSH
12872: LD_EXP 89
12876: PPUSH
12877: CALL_OW 74
12881: ST_TO_ADDR
// if GetDistUnits ( nearUnit , amMech ) < 13 then
12882: LD_VAR 0 1
12886: PPUSH
12887: LD_EXP 89
12891: PPUSH
12892: CALL_OW 296
12896: PUSH
12897: LD_INT 13
12899: LESS
12900: IFFALSE 12953
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) else
12902: LD_EXP 89
12906: PPUSH
12907: LD_INT 22
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 21
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: LD_INT 50
12929: PUSH
12930: EMPTY
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 69
12942: PUSH
12943: LD_INT 1
12945: ARRAY
12946: PPUSH
12947: CALL_OW 120
12951: GO 13064
// begin if GetLives ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) = 1000 and not IsInUnit ( amMech ) then
12953: LD_INT 22
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: PUSH
12963: LD_INT 21
12965: PUSH
12966: LD_INT 2
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 50
12975: PUSH
12976: EMPTY
12977: LIST
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: LIST
12983: PPUSH
12984: CALL_OW 69
12988: PUSH
12989: LD_INT 1
12991: ARRAY
12992: PPUSH
12993: CALL_OW 256
12997: PUSH
12998: LD_INT 1000
13000: EQUAL
13001: PUSH
13002: LD_EXP 89
13006: PPUSH
13007: CALL_OW 310
13011: NOT
13012: AND
13013: IFFALSE 13064
// ComEnterUnit ( amMech , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) [ 1 ] ) ;
13015: LD_EXP 89
13019: PPUSH
13020: LD_INT 22
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 21
13032: PUSH
13033: LD_INT 2
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: PUSH
13040: LD_INT 50
13042: PUSH
13043: EMPTY
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: LD_INT 1
13058: ARRAY
13059: PPUSH
13060: CALL_OW 120
// end ; end ;
13064: PPOPN 1
13066: END
// every 0 0$1 trigger immortalBelkovTeam do
13067: LD_EXP 24
13071: IFFALSE 13158
13073: GO 13075
13075: DISABLE
// begin enable ;
13076: ENABLE
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_human ] ) , 1000 ) ;
13077: LD_EXP 73
13081: PPUSH
13082: LD_INT 21
13084: PUSH
13085: LD_INT 1
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 72
13096: PPUSH
13097: LD_INT 1000
13099: PPUSH
13100: CALL_OW 234
// if UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) then
13104: LD_EXP 73
13108: PPUSH
13109: LD_INT 21
13111: PUSH
13112: LD_INT 2
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 72
13123: IFFALSE 13158
// SetLives ( UnitFilter ( belkovTeam , [ f_type , unit_vehicle ] ) [ 1 ] , immortalVehLive ) ;
13125: LD_EXP 73
13129: PPUSH
13130: LD_INT 21
13132: PUSH
13133: LD_INT 2
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: PPUSH
13140: CALL_OW 72
13144: PUSH
13145: LD_INT 1
13147: ARRAY
13148: PPUSH
13149: LD_EXP 25
13153: PPUSH
13154: CALL_OW 234
// end ;
13158: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
13159: LD_EXP 20
13163: PUSH
13164: LD_EXP 37
13168: NOT
13169: AND
13170: PUSH
13171: LD_EXP 61
13175: PUSH
13176: LD_INT 0
13178: GREATER
13179: AND
13180: IFFALSE 13200
13182: GO 13184
13184: DISABLE
// begin enable ;
13185: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
13186: LD_ADDR_EXP 61
13190: PUSH
13191: LD_EXP 61
13195: PUSH
13196: LD_INT 35
13198: MINUS
13199: ST_TO_ADDR
// end ;
13200: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
13201: LD_EXP 20
13205: IFFALSE 13289
13207: GO 13209
13209: DISABLE
13210: LD_INT 0
13212: PPUSH
13213: PPUSH
// begin tmp = trapTeam ;
13214: LD_ADDR_VAR 0 2
13218: PUSH
13219: LD_EXP 81
13223: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
13224: LD_ADDR_VAR 0 2
13228: PUSH
13229: LD_VAR 0 2
13233: PUSH
13234: LD_EXP 80
13238: DIFF
13239: ST_TO_ADDR
// for i := 1 to rand ( 2 , 3 ) do
13240: LD_ADDR_VAR 0 1
13244: PUSH
13245: DOUBLE
13246: LD_INT 1
13248: DEC
13249: ST_TO_ADDR
13250: LD_INT 2
13252: PPUSH
13253: LD_INT 3
13255: PPUSH
13256: CALL_OW 12
13260: PUSH
13261: FOR_TO
13262: IFFALSE 13287
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
13264: LD_VAR 0 2
13268: PUSH
13269: LD_VAR 0 1
13273: ARRAY
13274: PPUSH
13275: LD_INT 87
13277: PPUSH
13278: LD_INT 18
13280: PPUSH
13281: CALL_OW 114
13285: GO 13261
13287: POP
13288: POP
// end ;
13289: PPOPN 2
13291: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
13292: LD_EXP 61
13296: PUSH
13297: LD_INT 70
13299: LESS
13300: PUSH
13301: LD_EXP 81
13305: AND
13306: IFFALSE 13335
13308: GO 13310
13310: DISABLE
// begin enable ;
13311: ENABLE
// activateBelkovAI = false ;
13312: LD_ADDR_EXP 28
13316: PUSH
13317: LD_INT 0
13319: ST_TO_ADDR
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
13320: LD_EXP 73
13324: PPUSH
13325: LD_INT 120
13327: PPUSH
13328: LD_INT 28
13330: PPUSH
13331: CALL_OW 114
// end ;
13335: END
// every 0 0$1 trigger ( not sawLeftBunker or not sawRightBunker ) and canExploreMap do var bunker ;
13336: LD_EXP 29
13340: NOT
13341: PUSH
13342: LD_EXP 30
13346: NOT
13347: OR
13348: PUSH
13349: LD_EXP 20
13353: AND
13354: IFFALSE 13816
13356: GO 13358
13358: DISABLE
13359: LD_INT 0
13361: PPUSH
// begin enable ;
13362: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
13363: LD_ADDR_VAR 0 1
13367: PUSH
13368: LD_INT 22
13370: PUSH
13371: LD_INT 1
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 21
13380: PUSH
13381: LD_INT 3
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 30
13390: PUSH
13391: LD_INT 31
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PUSH
13408: FOR_IN
13409: IFFALSE 13814
// begin if See ( 3 , bunker ) then
13411: LD_INT 3
13413: PPUSH
13414: LD_VAR 0 1
13418: PPUSH
13419: CALL_OW 292
13423: IFFALSE 13812
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
13425: LD_VAR 0 1
13429: PUSH
13430: LD_EXP 82
13434: IN
13435: PUSH
13436: LD_EXP 29
13440: NOT
13441: AND
13442: PUSH
13443: LD_INT 18
13445: PPUSH
13446: LD_INT 22
13448: PUSH
13449: LD_INT 3
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: PPUSH
13459: CALL_OW 70
13463: NOT
13464: AND
13465: IFFALSE 13658
// begin sawLeftBunker = true ;
13467: LD_ADDR_EXP 29
13471: PUSH
13472: LD_INT 1
13474: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13475: LD_VAR 0 1
13479: PPUSH
13480: CALL_OW 85
// DialogueOn ;
13484: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
13488: LD_EXP 62
13492: PPUSH
13493: LD_STRING D15-Bur-1
13495: PPUSH
13496: CALL_OW 88
// if IsOK ( Gnyevko ) or IsOK ( Kovalyuk ) then
13500: LD_EXP 63
13504: PPUSH
13505: CALL_OW 302
13509: PUSH
13510: LD_EXP 70
13514: PPUSH
13515: CALL_OW 302
13519: OR
13520: IFFALSE 13615
// begin if IsOK ( Gnyevko ) then
13522: LD_EXP 63
13526: PPUSH
13527: CALL_OW 302
13531: IFFALSE 13545
// Say ( Gnyevko , D15-Gny-1 ) ;
13533: LD_EXP 63
13537: PPUSH
13538: LD_STRING D15-Gny-1
13540: PPUSH
13541: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13545: LD_EXP 70
13549: PPUSH
13550: CALL_OW 302
13554: IFFALSE 13568
// Say ( Kovalyuk , D15-Kov-1 ) ;
13556: LD_EXP 70
13560: PPUSH
13561: LD_STRING D15-Kov-1
13563: PPUSH
13564: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
13568: LD_EXP 62
13572: PPUSH
13573: LD_STRING D15-Bur-2
13575: PPUSH
13576: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13580: LD_EXP 70
13584: PPUSH
13585: CALL_OW 302
13589: IFFALSE 13603
// Say ( Kovalyuk , D15-Kov-2 ) ;
13591: LD_EXP 70
13595: PPUSH
13596: LD_STRING D15-Kov-2
13598: PPUSH
13599: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13603: LD_EXP 62
13607: PPUSH
13608: LD_STRING D15-Bur-3
13610: PPUSH
13611: CALL_OW 88
// end ; DialogueOff ;
13615: CALL_OW 7
// if raportForPlatonov = 2 then
13619: LD_EXP 39
13623: PUSH
13624: LD_INT 2
13626: EQUAL
13627: IFFALSE 13639
// raportForPlatonov = 1 else
13629: LD_ADDR_EXP 39
13633: PUSH
13634: LD_INT 1
13636: ST_TO_ADDR
13637: GO 13647
// raportForPlatonov = 3 ;
13639: LD_ADDR_EXP 39
13643: PUSH
13644: LD_INT 3
13646: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13647: LD_STRING M7
13649: PPUSH
13650: CALL_OW 337
// exit ;
13654: POP
13655: POP
13656: GO 13816
// end ; if bunker in rightBunkers and not sawRightBunker then
13658: LD_VAR 0 1
13662: PUSH
13663: LD_EXP 83
13667: IN
13668: PUSH
13669: LD_EXP 30
13673: NOT
13674: AND
13675: IFFALSE 13812
// begin sawRightBunker = true ;
13677: LD_ADDR_EXP 30
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
13685: LD_VAR 0 1
13689: PPUSH
13690: CALL_OW 85
// DialogueOn ;
13694: CALL_OW 6
// if IsOK ( Kovalyuk ) then
13698: LD_EXP 70
13702: PPUSH
13703: CALL_OW 302
13707: IFFALSE 13776
// begin if sawLeftBunker then
13709: LD_EXP 29
13713: IFFALSE 13729
// Say ( Kovalyuk , D16-Kov-1a ) else
13715: LD_EXP 70
13719: PPUSH
13720: LD_STRING D16-Kov-1a
13722: PPUSH
13723: CALL_OW 88
13727: GO 13741
// Say ( Kovalyuk , D16-Kov-1 ) ;
13729: LD_EXP 70
13733: PPUSH
13734: LD_STRING D16-Kov-1
13736: PPUSH
13737: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13741: LD_EXP 62
13745: PPUSH
13746: LD_STRING D16-Bur-1
13748: PPUSH
13749: CALL_OW 88
// if IsOK ( Gnyevko ) then
13753: LD_EXP 63
13757: PPUSH
13758: CALL_OW 302
13762: IFFALSE 13776
// Say ( Gnyevko , D16-Gny-1 ) ;
13764: LD_EXP 63
13768: PPUSH
13769: LD_STRING D16-Gny-1
13771: PPUSH
13772: CALL_OW 88
// end ; DialogueOff ;
13776: CALL_OW 7
// if raportForPlatonov = 3 then
13780: LD_EXP 39
13784: PUSH
13785: LD_INT 3
13787: EQUAL
13788: IFFALSE 13800
// raportForPlatonov = 1 else
13790: LD_ADDR_EXP 39
13794: PUSH
13795: LD_INT 1
13797: ST_TO_ADDR
13798: GO 13808
// raportForPlatonov = 2 ;
13800: LD_ADDR_EXP 39
13804: PUSH
13805: LD_INT 2
13807: ST_TO_ADDR
// exit ;
13808: POP
13809: POP
13810: GO 13816
// end ; end ; end ;
13812: GO 13408
13814: POP
13815: POP
// end ;
13816: PPOPN 1
13818: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and canExploreMap and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13819: LD_EXP 32
13823: NOT
13824: PUSH
13825: LD_EXP 83
13829: AND
13830: PUSH
13831: LD_EXP 20
13835: AND
13836: PUSH
13837: LD_EXP 70
13841: PPUSH
13842: CALL_OW 302
13846: PUSH
13847: LD_EXP 63
13851: PPUSH
13852: CALL_OW 302
13856: OR
13857: AND
13858: IFFALSE 14046
13860: GO 13862
13862: DISABLE
13863: LD_INT 0
13865: PPUSH
// begin enable ;
13866: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13867: LD_ADDR_VAR 0 1
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 2
13884: PUSH
13885: LD_INT 21
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 21
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: PUSH
13919: FOR_IN
13920: IFFALSE 14044
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
13922: LD_VAR 0 1
13926: PPUSH
13927: CALL_OW 320
13931: PUSH
13932: LD_EXP 83
13936: PUSH
13937: LD_INT 1
13939: ARRAY
13940: EQUAL
13941: PUSH
13942: LD_VAR 0 1
13946: PPUSH
13947: CALL_OW 320
13951: PUSH
13952: LD_EXP 83
13956: PUSH
13957: LD_INT 2
13959: ARRAY
13960: EQUAL
13961: OR
13962: IFFALSE 14042
// begin dialogAttackRightBunkers = true ;
13964: LD_ADDR_EXP 32
13968: PUSH
13969: LD_INT 1
13971: ST_TO_ADDR
// DialogueOn ;
13972: CALL_OW 6
// if IsOK ( Gnyevko ) then
13976: LD_EXP 63
13980: PPUSH
13981: CALL_OW 302
13985: IFFALSE 13999
// Say ( Gnyevko , D16A-Gny-1 ) ;
13987: LD_EXP 63
13991: PPUSH
13992: LD_STRING D16A-Gny-1
13994: PPUSH
13995: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13999: LD_EXP 70
14003: PPUSH
14004: CALL_OW 302
14008: IFFALSE 14022
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14010: LD_EXP 70
14014: PPUSH
14015: LD_STRING D16A-Kov-1
14017: PPUSH
14018: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14022: LD_EXP 62
14026: PPUSH
14027: LD_STRING D16A-Bur-1
14029: PPUSH
14030: CALL_OW 88
// DialogueOff ;
14034: CALL_OW 7
// exit ;
14038: POP
14039: POP
14040: GO 14046
// end ; end ;
14042: GO 13919
14044: POP
14045: POP
// end ;
14046: PPOPN 1
14048: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
14049: LD_INT 18
14051: PPUSH
14052: LD_INT 22
14054: PUSH
14055: LD_INT 3
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: PUSH
14062: EMPTY
14063: LIST
14064: PPUSH
14065: CALL_OW 70
14069: PUSH
14070: LD_EXP 29
14074: NOT
14075: AND
14076: IFFALSE 14459
14078: GO 14080
14080: DISABLE
14081: LD_INT 0
14083: PPUSH
// begin sawLeftBunker = true ;
14084: LD_ADDR_EXP 29
14088: PUSH
14089: LD_INT 1
14091: ST_TO_ADDR
// if playerGetSupport then
14092: LD_EXP 34
14096: IFFALSE 14115
// decsToChoose = [ 1 , 3 ] else
14098: LD_ADDR_VAR 0 1
14102: PUSH
14103: LD_INT 1
14105: PUSH
14106: LD_INT 3
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: ST_TO_ADDR
14113: GO 14134
// decsToChoose = [ 1 , 2 , 3 ] ;
14115: LD_ADDR_VAR 0 1
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: LD_INT 2
14125: PUSH
14126: LD_INT 3
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
14134: LD_STRING QAttackBw
14136: PPUSH
14137: LD_VAR 0 1
14141: PPUSH
14142: CALL_OW 98
14146: PUSH
14147: LD_INT 1
14149: DOUBLE
14150: EQUAL
14151: IFTRUE 14155
14153: GO 14248
14155: POP
// begin DialogueOn ;
14156: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
14160: LD_EXP 62
14164: PPUSH
14165: LD_STRING D17-Bur-1
14167: PPUSH
14168: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
14172: LD_EXP 76
14176: PPUSH
14177: LD_STRING D17-Pla-1
14179: PPUSH
14180: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
14184: LD_EXP 62
14188: PPUSH
14189: LD_STRING D17-Bur-2
14191: PPUSH
14192: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
14196: LD_EXP 76
14200: PPUSH
14201: LD_STRING D17-Pla-2
14203: PPUSH
14204: CALL_OW 94
// DialogueOff ;
14208: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
14212: LD_EXP 42
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: LD_INT 3
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: IN
14227: NOT
14228: IFFALSE 14246
// begin initiative = 1 ;
14230: LD_ADDR_EXP 42
14234: PUSH
14235: LD_INT 1
14237: ST_TO_ADDR
// platonovOpinion = 2 ;
14238: LD_ADDR_EXP 5
14242: PUSH
14243: LD_INT 2
14245: ST_TO_ADDR
// end ; end ; 2 :
14246: GO 14389
14248: LD_INT 2
14250: DOUBLE
14251: EQUAL
14252: IFTRUE 14256
14254: GO 14361
14256: POP
// begin DialogueOn ;
14257: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
14261: LD_EXP 62
14265: PPUSH
14266: LD_STRING D18-Bur-1
14268: PPUSH
14269: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
14273: LD_EXP 76
14277: PPUSH
14278: LD_STRING D18-Pla-1
14280: PPUSH
14281: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
14285: LD_EXP 62
14289: PPUSH
14290: LD_STRING D18-Bur-2
14292: PPUSH
14293: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
14297: LD_EXP 76
14301: PPUSH
14302: LD_STRING D18-Pla-2
14304: PPUSH
14305: CALL_OW 94
// DialogueOff ;
14309: CALL_OW 7
// playerGetSupport = true ;
14313: LD_ADDR_EXP 34
14317: PUSH
14318: LD_INT 1
14320: ST_TO_ADDR
// medalForGetSupport = false ;
14321: LD_ADDR_EXP 40
14325: PUSH
14326: LD_INT 0
14328: ST_TO_ADDR
// PlatonovSendSupport ;
14329: CALL 6675 0 0
// if initiative <> 3 then
14333: LD_EXP 42
14337: PUSH
14338: LD_INT 3
14340: NONEQUAL
14341: IFFALSE 14359
// begin initiative = 1 ;
14343: LD_ADDR_EXP 42
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// platonovOpinion = 2 ;
14351: LD_ADDR_EXP 5
14355: PUSH
14356: LD_INT 2
14358: ST_TO_ADDR
// end ; end ; 3 :
14359: GO 14389
14361: LD_INT 3
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14388
14369: POP
// begin initiative = 3 ;
14370: LD_ADDR_EXP 42
14374: PUSH
14375: LD_INT 3
14377: ST_TO_ADDR
// platonovOpinion = 0 ;
14378: LD_ADDR_EXP 5
14382: PUSH
14383: LD_INT 0
14385: ST_TO_ADDR
// end ; end ;
14386: GO 14389
14388: POP
// if IsOK ( Gnyevko ) then
14389: LD_EXP 63
14393: PPUSH
14394: CALL_OW 302
14398: IFFALSE 14424
// begin Say ( Gnyevko , D19-Gny-1 ) ;
14400: LD_EXP 63
14404: PPUSH
14405: LD_STRING D19-Gny-1
14407: PPUSH
14408: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
14412: LD_EXP 62
14416: PPUSH
14417: LD_STRING D19-Bur-1
14419: PPUSH
14420: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
14424: LD_EXP 70
14428: PPUSH
14429: CALL_OW 302
14433: IFFALSE 14459
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
14435: LD_EXP 70
14439: PPUSH
14440: LD_STRING D19-Kov-1
14442: PPUSH
14443: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
14447: LD_EXP 62
14451: PPUSH
14452: LD_STRING D19-Bur-2
14454: PPUSH
14455: CALL_OW 88
// end ; end ;
14459: PPOPN 1
14461: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and canExploreMap and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
14462: LD_EXP 31
14466: NOT
14467: PUSH
14468: LD_EXP 82
14472: AND
14473: PUSH
14474: LD_EXP 20
14478: AND
14479: PUSH
14480: LD_INT 18
14482: PPUSH
14483: LD_INT 22
14485: PUSH
14486: LD_INT 3
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PUSH
14493: EMPTY
14494: LIST
14495: PPUSH
14496: CALL_OW 70
14500: PUSH
14501: LD_INT 0
14503: EQUAL
14504: AND
14505: PUSH
14506: LD_EXP 70
14510: PPUSH
14511: CALL_OW 302
14515: PUSH
14516: LD_EXP 63
14520: PPUSH
14521: CALL_OW 302
14525: OR
14526: AND
14527: IFFALSE 14715
14529: GO 14531
14531: DISABLE
14532: LD_INT 0
14534: PPUSH
// begin enable ;
14535: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14536: LD_ADDR_VAR 0 1
14540: PUSH
14541: LD_INT 22
14543: PUSH
14544: LD_INT 3
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 2
14553: PUSH
14554: LD_INT 21
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: EMPTY
14571: LIST
14572: LIST
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PPUSH
14583: CALL_OW 69
14587: PUSH
14588: FOR_IN
14589: IFFALSE 14713
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
14591: LD_VAR 0 1
14595: PPUSH
14596: CALL_OW 320
14600: PUSH
14601: LD_EXP 82
14605: PUSH
14606: LD_INT 1
14608: ARRAY
14609: EQUAL
14610: PUSH
14611: LD_VAR 0 1
14615: PPUSH
14616: CALL_OW 320
14620: PUSH
14621: LD_EXP 82
14625: PUSH
14626: LD_INT 2
14628: ARRAY
14629: EQUAL
14630: OR
14631: IFFALSE 14711
// begin dialogAttackLeftBunkers = true ;
14633: LD_ADDR_EXP 31
14637: PUSH
14638: LD_INT 1
14640: ST_TO_ADDR
// DialogueOn ;
14641: CALL_OW 6
// if IsOK ( Gnyevko ) then
14645: LD_EXP 63
14649: PPUSH
14650: CALL_OW 302
14654: IFFALSE 14668
// Say ( Gnyevko , D19A-Gny-1 ) ;
14656: LD_EXP 63
14660: PPUSH
14661: LD_STRING D19A-Gny-1
14663: PPUSH
14664: CALL_OW 88
// if IsOK ( Kovalyuk ) then
14668: LD_EXP 70
14672: PPUSH
14673: CALL_OW 302
14677: IFFALSE 14691
// Say ( Kovalyuk , D19A-Kov-1 ) ;
14679: LD_EXP 70
14683: PPUSH
14684: LD_STRING D19A-Kov-1
14686: PPUSH
14687: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
14691: LD_EXP 62
14695: PPUSH
14696: LD_STRING D16A-Bur-1
14698: PPUSH
14699: CALL_OW 88
// DialogueOff ;
14703: CALL_OW 7
// exit ;
14707: POP
14708: POP
14709: GO 14715
// end ; end ;
14711: GO 14588
14713: POP
14714: POP
// end ;
14715: PPOPN 1
14717: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14718: LD_EXP 82
14722: NOT
14723: PUSH
14724: LD_INT 17
14726: PPUSH
14727: LD_INT 22
14729: PUSH
14730: LD_INT 1
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: PUSH
14737: LD_INT 21
14739: PUSH
14740: LD_INT 3
14742: PUSH
14743: EMPTY
14744: LIST
14745: LIST
14746: PUSH
14747: LD_INT 30
14749: PUSH
14750: LD_INT 31
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: PUSH
14757: LD_INT 50
14759: PUSH
14760: EMPTY
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 70
14773: PUSH
14774: LD_INT 0
14776: EQUAL
14777: OR
14778: PUSH
14779: LD_EXP 20
14783: AND
14784: IFFALSE 14835
14786: GO 14788
14788: DISABLE
// begin leftBunkers = [ ] ;
14789: LD_ADDR_EXP 82
14793: PUSH
14794: EMPTY
14795: ST_TO_ADDR
// DialogueOn ;
14796: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
14800: LD_EXP 62
14804: PPUSH
14805: LD_STRING D20-Bur-1
14807: PPUSH
14808: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
14812: LD_EXP 76
14816: PPUSH
14817: LD_STRING D20-Pla-1
14819: PPUSH
14820: CALL_OW 88
// DialogueOff ;
14824: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
14828: LD_STRING M8
14830: PPUSH
14831: CALL_OW 337
// end ;
14835: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
14836: LD_EXP 83
14840: NOT
14841: PUSH
14842: LD_INT 16
14844: PPUSH
14845: LD_INT 22
14847: PUSH
14848: LD_INT 1
14850: PUSH
14851: EMPTY
14852: LIST
14853: LIST
14854: PUSH
14855: LD_INT 21
14857: PUSH
14858: LD_INT 3
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: LD_INT 30
14867: PUSH
14868: LD_INT 31
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 50
14877: PUSH
14878: EMPTY
14879: LIST
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: PPUSH
14887: CALL_OW 70
14891: PUSH
14892: LD_INT 0
14894: EQUAL
14895: OR
14896: PUSH
14897: LD_EXP 20
14901: AND
14902: IFFALSE 14946
14904: GO 14906
14906: DISABLE
// begin rightBunkers = [ ] ;
14907: LD_ADDR_EXP 83
14911: PUSH
14912: EMPTY
14913: ST_TO_ADDR
// DialogueOn ;
14914: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
14918: LD_EXP 62
14922: PPUSH
14923: LD_STRING D20a-Bur-1
14925: PPUSH
14926: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
14930: LD_EXP 76
14934: PPUSH
14935: LD_STRING D20a-Pla-1
14937: PPUSH
14938: CALL_OW 88
// DialogueOff ;
14942: CALL_OW 7
// end ;
14946: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
14947: LD_EXP 35
14951: NOT
14952: PUSH
14953: LD_EXP 73
14957: AND
14958: IFFALSE 15453
14960: GO 14962
14962: DISABLE
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
14967: PPUSH
// begin enable ;
14968: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
14969: LD_ADDR_VAR 0 1
14973: PUSH
14974: LD_INT 22
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 2
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 21
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PPUSH
15016: CALL_OW 69
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15451
// for trapUnit in trapTeam do
15024: LD_ADDR_VAR 0 2
15028: PUSH
15029: LD_EXP 81
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15447
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
15037: LD_VAR 0 1
15041: PPUSH
15042: LD_VAR 0 2
15046: PPUSH
15047: CALL_OW 296
15051: PUSH
15052: LD_INT 16
15054: LESS
15055: IFFALSE 15445
// begin saveBelkovDecision = true ;
15057: LD_ADDR_EXP 35
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// if playerGetSupport then
15065: LD_EXP 34
15069: IFFALSE 15088
// decsToChoose = [ 1 , 3 ] else
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_INT 1
15078: PUSH
15079: LD_INT 3
15081: PUSH
15082: EMPTY
15083: LIST
15084: LIST
15085: ST_TO_ADDR
15086: GO 15107
// decsToChoose = [ 1 , 2 , 3 ] ;
15088: LD_ADDR_VAR 0 3
15092: PUSH
15093: LD_INT 1
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
15107: LD_STRING QAttackAm
15109: PPUSH
15110: LD_VAR 0 3
15114: PPUSH
15115: CALL_OW 98
15119: PUSH
15120: LD_INT 1
15122: DOUBLE
15123: EQUAL
15124: IFTRUE 15128
15126: GO 15197
15128: POP
// begin DialogueOn ;
15129: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
15133: LD_EXP 62
15137: PPUSH
15138: LD_STRING D21-Bur-1
15140: PPUSH
15141: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
15145: LD_EXP 76
15149: PPUSH
15150: LD_STRING D21-Pla-1
15152: PPUSH
15153: CALL_OW 94
// DialogueOff ;
15157: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
15161: LD_EXP 42
15165: PUSH
15166: LD_INT 2
15168: PUSH
15169: LD_INT 3
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: IN
15176: NOT
15177: IFFALSE 15195
// begin initiative = 1 ;
15179: LD_ADDR_EXP 42
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// platonovOpinion = 2 ;
15187: LD_ADDR_EXP 5
15191: PUSH
15192: LD_INT 2
15194: ST_TO_ADDR
// end ; end ; 2 :
15195: GO 15389
15197: LD_INT 2
15199: DOUBLE
15200: EQUAL
15201: IFTRUE 15205
15203: GO 15361
15205: POP
// begin DialogueOn ;
15206: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
15210: LD_EXP 62
15214: PPUSH
15215: LD_STRING D22-Bur-1
15217: PPUSH
15218: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
15222: LD_EXP 34
15226: PUSH
15227: LD_EXP 82
15231: PUSH
15232: LD_INT 0
15234: EQUAL
15235: PUSH
15236: LD_EXP 83
15240: PUSH
15241: LD_INT 0
15243: EQUAL
15244: OR
15245: AND
15246: IFFALSE 15260
// Say ( Platonov , D22-Pla-1b ) ;
15248: LD_EXP 76
15252: PPUSH
15253: LD_STRING D22-Pla-1b
15255: PPUSH
15256: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
15260: LD_EXP 34
15264: PUSH
15265: LD_EXP 82
15269: PUSH
15270: LD_EXP 83
15274: OR
15275: AND
15276: IFFALSE 15290
// Say ( Platonov , D22-Pla-1a ) ;
15278: LD_EXP 76
15282: PPUSH
15283: LD_STRING D22-Pla-1a
15285: PPUSH
15286: CALL_OW 88
// if not playerGetSupport then
15290: LD_EXP 34
15294: NOT
15295: IFFALSE 15329
// begin Say ( Platonov , D22-Pla-1 ) ;
15297: LD_EXP 76
15301: PPUSH
15302: LD_STRING D22-Pla-1
15304: PPUSH
15305: CALL_OW 88
// playerGetSupport = true ;
15309: LD_ADDR_EXP 34
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// medalForGetSupport = false ;
15317: LD_ADDR_EXP 40
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// PlatonovSendSupport ;
15325: CALL 6675 0 0
// end ; DialogueOff ;
15329: CALL_OW 7
// if initiative <> 3 then
15333: LD_EXP 42
15337: PUSH
15338: LD_INT 3
15340: NONEQUAL
15341: IFFALSE 15359
// begin initiative = 2 ;
15343: LD_ADDR_EXP 42
15347: PUSH
15348: LD_INT 2
15350: ST_TO_ADDR
// platonovOpinion = 1 ;
15351: LD_ADDR_EXP 5
15355: PUSH
15356: LD_INT 1
15358: ST_TO_ADDR
// end ; end ; 3 :
15359: GO 15389
15361: LD_INT 3
15363: DOUBLE
15364: EQUAL
15365: IFTRUE 15369
15367: GO 15388
15369: POP
// begin initiative = 3 ;
15370: LD_ADDR_EXP 42
15374: PUSH
15375: LD_INT 3
15377: ST_TO_ADDR
// platonovOpinion = 0 ;
15378: LD_ADDR_EXP 5
15382: PUSH
15383: LD_INT 0
15385: ST_TO_ADDR
// end ; end ;
15386: GO 15389
15388: POP
// if IsOK ( Gnyevko ) then
15389: LD_EXP 63
15393: PPUSH
15394: CALL_OW 302
15398: IFFALSE 15424
// begin Say ( Gnyevko , D23-Gny-1 ) ;
15400: LD_EXP 63
15404: PPUSH
15405: LD_STRING D23-Gny-1
15407: PPUSH
15408: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
15412: LD_EXP 62
15416: PPUSH
15417: LD_STRING D23-Bur-1
15419: PPUSH
15420: CALL_OW 88
// end ; saveBelkovObjective = true ;
15424: LD_ADDR_EXP 36
15428: PUSH
15429: LD_INT 1
15431: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
15432: LD_STRING M9
15434: PPUSH
15435: CALL_OW 337
// exit ;
15439: POP
15440: POP
15441: POP
15442: POP
15443: GO 15453
// end ;
15445: GO 15034
15447: POP
15448: POP
15449: GO 15021
15451: POP
15452: POP
// end ;
15453: PPOPN 3
15455: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
15456: LD_EXP 20
15460: PUSH
15461: LD_EXP 81
15465: NOT
15466: AND
15467: PUSH
15468: LD_EXP 37
15472: NOT
15473: AND
15474: IFFALSE 15514
15476: GO 15478
15478: DISABLE
// begin belkovSaved = true ;
15479: LD_ADDR_EXP 37
15483: PUSH
15484: LD_INT 1
15486: ST_TO_ADDR
// activateBelkovAI = false ;
15487: LD_ADDR_EXP 28
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
15495: LD_EXP 73
15499: PPUSH
15500: LD_INT 3
15502: PPUSH
15503: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
15507: LD_STRING M9a
15509: PPUSH
15510: CALL_OW 337
// end ;
15514: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
15515: LD_EXP 35
15519: PUSH
15520: LD_EXP 64
15524: PPUSH
15525: CALL_OW 301
15529: PUSH
15530: LD_EXP 68
15534: PPUSH
15535: CALL_OW 301
15539: PUSH
15540: LD_EXP 64
15544: PPUSH
15545: CALL_OW 255
15549: PUSH
15550: LD_INT 6
15552: EQUAL
15553: PUSH
15554: LD_EXP 68
15558: PPUSH
15559: CALL_OW 255
15563: PUSH
15564: LD_INT 6
15566: EQUAL
15567: OR
15568: AND
15569: OR
15570: AND
15571: IFFALSE 15591
15573: GO 15575
15575: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
15576: LD_STRING M9a
15578: PPUSH
15579: CALL_OW 337
// saveBelkovObjective = false ;
15583: LD_ADDR_EXP 36
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// end ;
15591: END
// every 0 0$5 trigger belkovSaved and ( ( GetDistUnits ( Burlak , Belkov ) < 14 and belkovReturn ) or ( GetDistUnits ( Burlak , Belkov2 ) < 14 and not belkovReturn ) ) do
15592: LD_EXP 37
15596: PUSH
15597: LD_EXP 62
15601: PPUSH
15602: LD_EXP 64
15606: PPUSH
15607: CALL_OW 296
15611: PUSH
15612: LD_INT 14
15614: LESS
15615: PUSH
15616: LD_EXP 6
15620: AND
15621: PUSH
15622: LD_EXP 62
15626: PPUSH
15627: LD_EXP 68
15631: PPUSH
15632: CALL_OW 296
15636: PUSH
15637: LD_INT 14
15639: LESS
15640: PUSH
15641: LD_EXP 6
15645: NOT
15646: AND
15647: OR
15648: AND
15649: IFFALSE 15945
15651: GO 15653
15653: DISABLE
// begin InGameOn ;
15654: CALL_OW 8
// if IsOk ( Belkov ) and belkovReturn then
15658: LD_EXP 64
15662: PPUSH
15663: CALL_OW 302
15667: PUSH
15668: LD_EXP 6
15672: AND
15673: IFFALSE 15769
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
15675: LD_EXP 62
15679: PUSH
15680: LD_EXP 64
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PPUSH
15689: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
15693: LD_EXP 62
15697: PPUSH
15698: LD_EXP 64
15702: PPUSH
15703: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
15707: LD_EXP 64
15711: PPUSH
15712: LD_EXP 62
15716: PPUSH
15717: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
15721: LD_EXP 64
15725: PPUSH
15726: LD_STRING D24-Bel-1
15728: PPUSH
15729: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15733: LD_EXP 62
15737: PPUSH
15738: LD_STRING D24-Bur-1
15740: PPUSH
15741: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
15745: LD_EXP 64
15749: PPUSH
15750: LD_STRING D24-Bel-2
15752: PPUSH
15753: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15757: LD_EXP 62
15761: PPUSH
15762: LD_STRING D24-Bur-2
15764: PPUSH
15765: CALL_OW 88
// end ; if IsOk ( Belkov2 ) and not belkovReturn then
15769: LD_EXP 68
15773: PPUSH
15774: CALL_OW 302
15778: PUSH
15779: LD_EXP 6
15783: NOT
15784: AND
15785: IFFALSE 15893
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
15787: LD_EXP 62
15791: PUSH
15792: LD_EXP 68
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PPUSH
15801: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
15805: LD_EXP 62
15809: PPUSH
15810: LD_EXP 68
15814: PPUSH
15815: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
15819: LD_EXP 68
15823: PPUSH
15824: LD_EXP 62
15828: PPUSH
15829: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
15833: LD_EXP 68
15837: PPUSH
15838: LD_STRING D24-Bel-1
15840: PPUSH
15841: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
15845: LD_EXP 62
15849: PPUSH
15850: LD_STRING D24-Bur-1
15852: PPUSH
15853: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
15857: LD_EXP 62
15861: PPUSH
15862: LD_STRING D24-Bur-1a
15864: PPUSH
15865: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
15869: LD_EXP 68
15873: PPUSH
15874: LD_STRING D24-Bel-2
15876: PPUSH
15877: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
15881: LD_EXP 62
15885: PPUSH
15886: LD_STRING D24-Bur-2
15888: PPUSH
15889: CALL_OW 88
// end ; if captureBelkovVehicle then
15893: LD_EXP 38
15897: IFFALSE 15911
// Say ( Burlak , D24-Bur-2a ) ;
15899: LD_EXP 62
15903: PPUSH
15904: LD_STRING D24-Bur-2a
15906: PPUSH
15907: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
15911: LD_EXP 76
15915: PPUSH
15916: LD_STRING D24-Pla-2
15918: PPUSH
15919: CALL_OW 94
// if leftBunkers then
15923: LD_EXP 82
15927: IFFALSE 15941
// SayRadio ( Platonov , D24-Pla-2a ) ;
15929: LD_EXP 76
15933: PPUSH
15934: LD_STRING D24-Pla-2a
15936: PPUSH
15937: CALL_OW 94
// InGameOff ;
15941: CALL_OW 9
// end ;
15945: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
15946: LD_INT 22
15948: PPUSH
15949: LD_INT 22
15951: PUSH
15952: LD_INT 3
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 21
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PPUSH
15973: CALL_OW 70
15977: PUSH
15978: LD_EXP 70
15982: PPUSH
15983: CALL_OW 302
15987: PUSH
15988: LD_EXP 63
15992: PPUSH
15993: CALL_OW 302
15997: OR
15998: AND
15999: IFFALSE 16082
16001: GO 16003
16003: DISABLE
// begin DialogueOn ;
16004: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
16008: LD_EXP 62
16012: PPUSH
16013: LD_STRING D26-Bur-1
16015: PPUSH
16016: CALL_OW 88
// if IsOk ( Kovalyuk ) then
16020: LD_EXP 70
16024: PPUSH
16025: CALL_OW 302
16029: IFFALSE 16043
// Say ( Kovalyuk , D26-Kov-1 ) ;
16031: LD_EXP 70
16035: PPUSH
16036: LD_STRING D26-Kov-1
16038: PPUSH
16039: CALL_OW 88
// if IsOk ( Gnyevko ) then
16043: LD_EXP 63
16047: PPUSH
16048: CALL_OW 302
16052: IFFALSE 16066
// Say ( Gnyevko , D26-Gny-1 ) ;
16054: LD_EXP 63
16058: PPUSH
16059: LD_STRING D26-Gny-1
16061: PPUSH
16062: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
16066: LD_EXP 62
16070: PPUSH
16071: LD_STRING D26-Bur-2
16073: PPUSH
16074: CALL_OW 88
// DialogueOff ;
16078: CALL_OW 7
// end ;
16082: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
16083: LD_EXP 20
16087: PUSH
16088: LD_EXP 62
16092: PPUSH
16093: LD_INT 8
16095: PPUSH
16096: CALL_OW 308
16100: NOT
16101: PUSH
16102: LD_EXP 62
16106: PPUSH
16107: CALL_OW 310
16111: PPUSH
16112: CALL_OW 310
16116: PPUSH
16117: LD_INT 8
16119: PPUSH
16120: CALL_OW 308
16124: NOT
16125: AND
16126: AND
16127: PUSH
16128: LD_EXP 39
16132: PUSH
16133: LD_INT 1
16135: NEG
16136: EQUAL
16137: AND
16138: IFFALSE 16152
16140: GO 16142
16142: DISABLE
// begin enable ;
16143: ENABLE
// raportForPlatonov = 0 ;
16144: LD_ADDR_EXP 39
16148: PUSH
16149: LD_INT 0
16151: ST_TO_ADDR
// end ;
16152: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
16153: LD_EXP 20
16157: PUSH
16158: LD_EXP 39
16162: PUSH
16163: LD_INT 0
16165: GREATEREQUAL
16166: AND
16167: PUSH
16168: LD_EXP 16
16172: NOT
16173: AND
16174: PUSH
16175: LD_EXP 62
16179: PPUSH
16180: LD_INT 8
16182: PPUSH
16183: CALL_OW 308
16187: PUSH
16188: LD_EXP 62
16192: PPUSH
16193: CALL_OW 310
16197: PPUSH
16198: CALL_OW 310
16202: PPUSH
16203: LD_INT 8
16205: PPUSH
16206: CALL_OW 308
16210: PUSH
16211: LD_EXP 16
16215: NOT
16216: AND
16217: OR
16218: AND
16219: IFFALSE 16510
16221: GO 16223
16223: DISABLE
// begin enable ;
16224: ENABLE
// DialogueOn ;
16225: CALL_OW 6
// case raportForPlatonov of 0 :
16229: LD_EXP 39
16233: PUSH
16234: LD_INT 0
16236: DOUBLE
16237: EQUAL
16238: IFTRUE 16242
16240: GO 16269
16242: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
16243: LD_EXP 76
16247: PPUSH
16248: LD_STRING D25a-Pla-1
16250: PPUSH
16251: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
16255: LD_EXP 62
16259: PPUSH
16260: LD_STRING D25a-Bur-1
16262: PPUSH
16263: CALL_OW 88
// end ; 1 :
16267: GO 16485
16269: LD_INT 1
16271: DOUBLE
16272: EQUAL
16273: IFTRUE 16277
16275: GO 16340
16277: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16278: LD_EXP 76
16282: PPUSH
16283: LD_STRING D25-Pla-1
16285: PPUSH
16286: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
16290: LD_EXP 62
16294: PPUSH
16295: LD_STRING D25-Bur-1
16297: PPUSH
16298: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16302: LD_EXP 62
16306: PPUSH
16307: LD_STRING D25b-Bur-1
16309: PPUSH
16310: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16314: LD_EXP 76
16318: PPUSH
16319: LD_STRING D25b-Pla-1
16321: PPUSH
16322: CALL_OW 88
// playerGetSupport = true ;
16326: LD_ADDR_EXP 34
16330: PUSH
16331: LD_INT 1
16333: ST_TO_ADDR
// PlatonovSendSupport ;
16334: CALL 6675 0 0
// end ; 2 :
16338: GO 16485
16340: LD_INT 2
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16394
16348: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16349: LD_EXP 76
16353: PPUSH
16354: LD_STRING D25-Pla-1
16356: PPUSH
16357: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
16361: LD_EXP 62
16365: PPUSH
16366: LD_STRING D25-Bur-1a
16368: PPUSH
16369: CALL_OW 88
// if not sawLeftBunker then
16373: LD_EXP 29
16377: NOT
16378: IFFALSE 16392
// Say ( Platonov , D25c-Pla-1 ) ;
16380: LD_EXP 76
16384: PPUSH
16385: LD_STRING D25c-Pla-1
16387: PPUSH
16388: CALL_OW 88
// end ; 3 :
16392: GO 16485
16394: LD_INT 3
16396: DOUBLE
16397: EQUAL
16398: IFTRUE 16402
16400: GO 16484
16402: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
16403: LD_EXP 76
16407: PPUSH
16408: LD_STRING D25-Pla-1
16410: PPUSH
16411: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
16415: LD_EXP 62
16419: PPUSH
16420: LD_STRING D25a-Bur-1b
16422: PPUSH
16423: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
16427: LD_EXP 62
16431: PPUSH
16432: LD_STRING D25b-Bur-1
16434: PPUSH
16435: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
16439: LD_EXP 76
16443: PPUSH
16444: LD_STRING D25b-Pla-1
16446: PPUSH
16447: CALL_OW 88
// playerGetSupport = true ;
16451: LD_ADDR_EXP 34
16455: PUSH
16456: LD_INT 1
16458: ST_TO_ADDR
// PlatonovSendSupport ;
16459: CALL 6675 0 0
// if not sawRightBunker then
16463: LD_EXP 30
16467: NOT
16468: IFFALSE 16482
// Say ( Platonov , D25c-Pla-1 ) ;
16470: LD_EXP 76
16474: PPUSH
16475: LD_STRING D25c-Pla-1
16477: PPUSH
16478: CALL_OW 88
// end ; end ;
16482: GO 16485
16484: POP
// raportForPlatonov = - 1 ;
16485: LD_ADDR_EXP 39
16489: PUSH
16490: LD_INT 1
16492: NEG
16493: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
16494: LD_EXP 76
16498: PPUSH
16499: LD_STRING D25c-Pla-1a
16501: PPUSH
16502: CALL_OW 88
// DialogueOff ;
16506: CALL_OW 7
// end ;
16510: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
16511: LD_INT 19
16513: PPUSH
16514: LD_INT 22
16516: PUSH
16517: LD_INT 3
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: PPUSH
16527: CALL_OW 70
16531: PUSH
16532: LD_INT 0
16534: GREATER
16535: IFFALSE 16555
16537: GO 16539
16539: DISABLE
// begin northMapExplored = true ;
16540: LD_ADDR_EXP 41
16544: PUSH
16545: LD_INT 1
16547: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
16548: LD_STRING M10
16550: PPUSH
16551: CALL_OW 337
// end ;
16555: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
16556: LD_EXP 82
16560: NOT
16561: PUSH
16562: LD_EXP 41
16566: AND
16567: PUSH
16568: LD_EXP 37
16572: PUSH
16573: LD_EXP 36
16577: NOT
16578: OR
16579: AND
16580: IFFALSE 16600
16582: GO 16584
16584: DISABLE
// begin backToBeria2 = true ;
16585: LD_ADDR_EXP 16
16589: PUSH
16590: LD_INT 1
16592: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
16593: LD_STRING M10a
16595: PPUSH
16596: CALL_OW 337
// end ;
16600: END
// every 0 0$1 do
16601: GO 16603
16603: DISABLE
// begin enable ;
16604: ENABLE
// SetLives ( [ Kurin , Platonov ] , 1000 ) ;
16605: LD_EXP 67
16609: PUSH
16610: LD_EXP 76
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: LD_INT 1000
16621: PPUSH
16622: CALL_OW 234
// end ; end_of_file
16626: END
// export function CreateNature ; var i , un ; begin
16627: LD_INT 0
16629: PPUSH
16630: PPUSH
16631: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
16632: LD_ADDR_VAR 0 2
16636: PUSH
16637: DOUBLE
16638: LD_INT 1
16640: DEC
16641: ST_TO_ADDR
16642: LD_EXP 45
16646: PUSH
16647: LD_INT 1
16649: ARRAY
16650: PUSH
16651: FOR_TO
16652: IFFALSE 16762
// begin uc_side = 0 ;
16654: LD_ADDR_OWVAR 20
16658: PUSH
16659: LD_INT 0
16661: ST_TO_ADDR
// uc_nation = nation_nature ;
16662: LD_ADDR_OWVAR 21
16666: PUSH
16667: LD_INT 0
16669: ST_TO_ADDR
// hc_class = class_apeman ;
16670: LD_ADDR_OWVAR 28
16674: PUSH
16675: LD_INT 12
16677: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16678: LD_ADDR_OWVAR 31
16682: PUSH
16683: LD_EXP 46
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PUSH
16692: LD_EXP 46
16696: PUSH
16697: LD_INT 2
16699: ARRAY
16700: PUSH
16701: LD_EXP 46
16705: PUSH
16706: LD_INT 3
16708: ARRAY
16709: PUSH
16710: LD_EXP 46
16714: PUSH
16715: LD_INT 4
16717: ARRAY
16718: PUSH
16719: EMPTY
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16725: LD_ADDR_OWVAR 35
16729: PUSH
16730: LD_EXP 47
16734: ST_TO_ADDR
// un = CreateHuman ;
16735: LD_ADDR_VAR 0 3
16739: PUSH
16740: CALL_OW 44
16744: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16745: LD_VAR 0 3
16749: PPUSH
16750: LD_INT 21
16752: PPUSH
16753: LD_INT 0
16755: PPUSH
16756: CALL_OW 49
// end ;
16760: GO 16651
16762: POP
16763: POP
// for i := 1 to animalsAmount [ 2 ] do
16764: LD_ADDR_VAR 0 2
16768: PUSH
16769: DOUBLE
16770: LD_INT 1
16772: DEC
16773: ST_TO_ADDR
16774: LD_EXP 45
16778: PUSH
16779: LD_INT 2
16781: ARRAY
16782: PUSH
16783: FOR_TO
16784: IFFALSE 16894
// begin uc_side = 0 ;
16786: LD_ADDR_OWVAR 20
16790: PUSH
16791: LD_INT 0
16793: ST_TO_ADDR
// uc_nation = nation_nature ;
16794: LD_ADDR_OWVAR 21
16798: PUSH
16799: LD_INT 0
16801: ST_TO_ADDR
// hc_class = class_phororhacos ;
16802: LD_ADDR_OWVAR 28
16806: PUSH
16807: LD_INT 18
16809: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16810: LD_ADDR_OWVAR 31
16814: PUSH
16815: LD_EXP 46
16819: PUSH
16820: LD_INT 1
16822: ARRAY
16823: PUSH
16824: LD_EXP 46
16828: PUSH
16829: LD_INT 2
16831: ARRAY
16832: PUSH
16833: LD_EXP 46
16837: PUSH
16838: LD_INT 3
16840: ARRAY
16841: PUSH
16842: LD_EXP 46
16846: PUSH
16847: LD_INT 4
16849: ARRAY
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16857: LD_ADDR_OWVAR 35
16861: PUSH
16862: LD_EXP 47
16866: ST_TO_ADDR
// un = CreateHuman ;
16867: LD_ADDR_VAR 0 3
16871: PUSH
16872: CALL_OW 44
16876: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16877: LD_VAR 0 3
16881: PPUSH
16882: LD_INT 21
16884: PPUSH
16885: LD_INT 0
16887: PPUSH
16888: CALL_OW 49
// end ;
16892: GO 16783
16894: POP
16895: POP
// for i := 1 to animalsAmount [ 3 ] do
16896: LD_ADDR_VAR 0 2
16900: PUSH
16901: DOUBLE
16902: LD_INT 1
16904: DEC
16905: ST_TO_ADDR
16906: LD_EXP 45
16910: PUSH
16911: LD_INT 3
16913: ARRAY
16914: PUSH
16915: FOR_TO
16916: IFFALSE 17026
// begin uc_side = 0 ;
16918: LD_ADDR_OWVAR 20
16922: PUSH
16923: LD_INT 0
16925: ST_TO_ADDR
// uc_nation = nation_nature ;
16926: LD_ADDR_OWVAR 21
16930: PUSH
16931: LD_INT 0
16933: ST_TO_ADDR
// hc_class = class_tiger ;
16934: LD_ADDR_OWVAR 28
16938: PUSH
16939: LD_INT 14
16941: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
16942: LD_ADDR_OWVAR 31
16946: PUSH
16947: LD_EXP 46
16951: PUSH
16952: LD_INT 1
16954: ARRAY
16955: PUSH
16956: LD_EXP 46
16960: PUSH
16961: LD_INT 2
16963: ARRAY
16964: PUSH
16965: LD_EXP 46
16969: PUSH
16970: LD_INT 3
16972: ARRAY
16973: PUSH
16974: LD_EXP 46
16978: PUSH
16979: LD_INT 4
16981: ARRAY
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
16989: LD_ADDR_OWVAR 35
16993: PUSH
16994: LD_EXP 47
16998: ST_TO_ADDR
// un = CreateHuman ;
16999: LD_ADDR_VAR 0 3
17003: PUSH
17004: CALL_OW 44
17008: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17009: LD_VAR 0 3
17013: PPUSH
17014: LD_INT 21
17016: PPUSH
17017: LD_INT 0
17019: PPUSH
17020: CALL_OW 49
// end ;
17024: GO 16915
17026: POP
17027: POP
// for i := 1 to animalsAmount [ 4 ] do
17028: LD_ADDR_VAR 0 2
17032: PUSH
17033: DOUBLE
17034: LD_INT 1
17036: DEC
17037: ST_TO_ADDR
17038: LD_EXP 45
17042: PUSH
17043: LD_INT 4
17045: ARRAY
17046: PUSH
17047: FOR_TO
17048: IFFALSE 17158
// begin uc_side = 0 ;
17050: LD_ADDR_OWVAR 20
17054: PUSH
17055: LD_INT 0
17057: ST_TO_ADDR
// uc_nation = nation_nature ;
17058: LD_ADDR_OWVAR 21
17062: PUSH
17063: LD_INT 0
17065: ST_TO_ADDR
// hc_class = 21 ;
17066: LD_ADDR_OWVAR 28
17070: PUSH
17071: LD_INT 21
17073: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
17074: LD_ADDR_OWVAR 31
17078: PUSH
17079: LD_EXP 46
17083: PUSH
17084: LD_INT 1
17086: ARRAY
17087: PUSH
17088: LD_EXP 46
17092: PUSH
17093: LD_INT 2
17095: ARRAY
17096: PUSH
17097: LD_EXP 46
17101: PUSH
17102: LD_INT 3
17104: ARRAY
17105: PUSH
17106: LD_EXP 46
17110: PUSH
17111: LD_INT 4
17113: ARRAY
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
17121: LD_ADDR_OWVAR 35
17125: PUSH
17126: LD_EXP 47
17130: ST_TO_ADDR
// un = CreateHuman ;
17131: LD_ADDR_VAR 0 3
17135: PUSH
17136: CALL_OW 44
17140: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
17141: LD_VAR 0 3
17145: PPUSH
17146: LD_INT 21
17148: PPUSH
17149: LD_INT 0
17151: PPUSH
17152: CALL_OW 49
// end ;
17156: GO 17047
17158: POP
17159: POP
// end ; end_of_file
17160: LD_VAR 0 1
17164: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
17165: LD_EXP 21
17169: IFFALSE 17398
17171: GO 17173
17173: DISABLE
17174: LD_INT 0
17176: PPUSH
17177: PPUSH
17178: PPUSH
17179: PPUSH
17180: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
17181: LD_ADDR_VAR 0 4
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 3
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 21
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 25
17208: PUSH
17209: LD_INT 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: ST_TO_ADDR
// wait ( 0 0$20 ) ;
17226: LD_INT 700
17228: PPUSH
17229: CALL_OW 67
// carryCratesEngs = 0 ;
17233: LD_ADDR_VAR 0 3
17237: PUSH
17238: LD_INT 0
17240: ST_TO_ADDR
// for unit in playerEngs do
17241: LD_ADDR_VAR 0 2
17245: PUSH
17246: LD_VAR 0 4
17250: PUSH
17251: FOR_IN
17252: IFFALSE 17280
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
17254: LD_ADDR_VAR 0 3
17258: PUSH
17259: LD_VAR 0 3
17263: PUSH
17264: LD_VAR 0 2
17268: PPUSH
17269: LD_INT 1
17271: PPUSH
17272: CALL_OW 289
17276: PLUS
17277: ST_TO_ADDR
17278: GO 17251
17280: POP
17281: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
17282: LD_INT 106
17284: PPUSH
17285: CALL_OW 274
17289: PPUSH
17290: LD_INT 1
17292: PPUSH
17293: CALL_OW 275
17297: PUSH
17298: LD_INT 50
17300: LESS
17301: PUSH
17302: LD_INT 8
17304: PPUSH
17305: LD_INT 1
17307: PPUSH
17308: CALL_OW 287
17312: PUSH
17313: LD_INT 10
17315: MUL
17316: PUSH
17317: LD_INT 106
17319: PPUSH
17320: CALL_OW 274
17324: PPUSH
17325: LD_INT 1
17327: PPUSH
17328: CALL_OW 275
17332: PLUS
17333: PUSH
17334: LD_VAR 0 3
17338: PLUS
17339: PUSH
17340: LD_INT 50
17342: LESS
17343: AND
17344: IFFALSE 17356
// spawnNextCrates = true else
17346: LD_ADDR_VAR 0 5
17350: PUSH
17351: LD_INT 1
17353: ST_TO_ADDR
17354: GO 17364
// spawnNextCrates = false ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_INT 0
17363: ST_TO_ADDR
// if spawnNextCrates then
17364: LD_VAR 0 5
17368: IFFALSE 17391
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
17370: LD_INT 1
17372: PPUSH
17373: LD_INT 5
17375: PPUSH
17376: CALL_OW 12
17380: PPUSH
17381: LD_INT 26
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: CALL_OW 55
// until not spawnCrates ;
17391: LD_EXP 21
17395: NOT
17396: IFFALSE 17181
// end ; end_of_file
17398: PPOPN 5
17400: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
17401: LD_VAR 0 1
17405: PPUSH
17406: CALL_OW 266
17410: PUSH
17411: LD_INT 6
17413: EQUAL
17414: PUSH
17415: LD_INT 22
17417: PUSH
17418: LD_INT 3
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 30
17427: PUSH
17428: LD_INT 6
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PPUSH
17439: CALL_OW 69
17443: PUSH
17444: LD_INT 1
17446: GREATER
17447: AND
17448: PUSH
17449: LD_EXP 11
17453: NOT
17454: AND
17455: IFFALSE 17466
// Dial_StopConstructAgainSameBuilding ( building ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: CALL 9167 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
17466: LD_VAR 0 1
17470: PPUSH
17471: CALL_OW 266
17475: PUSH
17476: LD_INT 2
17478: EQUAL
17479: PUSH
17480: LD_INT 22
17482: PUSH
17483: LD_INT 3
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 2
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: PUSH
17509: LD_INT 1
17511: GREATER
17512: AND
17513: PUSH
17514: LD_EXP 11
17518: NOT
17519: AND
17520: IFFALSE 17531
// Dial_StopConstructAgainSameBuilding ( building ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: CALL 9167 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
17531: LD_VAR 0 1
17535: PPUSH
17536: CALL_OW 255
17540: PUSH
17541: LD_INT 3
17543: EQUAL
17544: PUSH
17545: LD_VAR 0 1
17549: PPUSH
17550: CALL_OW 266
17554: PUSH
17555: LD_INT 26
17557: PUSH
17558: LD_INT 4
17560: PUSH
17561: LD_INT 31
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: IN
17569: AND
17570: PUSH
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_INT 8
17578: PPUSH
17579: CALL_OW 308
17583: AND
17584: IFFALSE 17595
// Dial_StopConstructAgainSameBuilding ( building ) ;
17586: LD_VAR 0 1
17590: PPUSH
17591: CALL 9167 0 1
// end ;
17595: PPOPN 2
17597: END
// on BuildingComplete ( building ) do var sold , platSold ;
17598: LD_INT 0
17600: PPUSH
17601: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
17602: LD_VAR 0 1
17606: PPUSH
17607: CALL_OW 255
17611: PUSH
17612: LD_INT 3
17614: EQUAL
17615: PUSH
17616: LD_VAR 0 1
17620: PPUSH
17621: CALL_OW 266
17625: PUSH
17626: LD_INT 6
17628: EQUAL
17629: AND
17630: PUSH
17631: LD_EXP 8
17635: NOT
17636: AND
17637: IFFALSE 17643
// Dial_LabConstructed ;
17639: CALL 9017 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
17643: LD_VAR 0 1
17647: PPUSH
17648: CALL_OW 255
17652: PUSH
17653: LD_INT 3
17655: EQUAL
17656: PUSH
17657: LD_VAR 0 1
17661: PPUSH
17662: CALL_OW 266
17666: PUSH
17667: LD_INT 2
17669: EQUAL
17670: AND
17671: PUSH
17672: LD_EXP 9
17676: NOT
17677: AND
17678: IFFALSE 17684
// Dial_WorkshopConstructed ;
17680: CALL 9092 0 0
// if GetSide ( building ) = 6 then
17684: LD_VAR 0 1
17688: PPUSH
17689: CALL_OW 255
17693: PUSH
17694: LD_INT 6
17696: EQUAL
17697: IFFALSE 17908
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 266
17708: PUSH
17709: LD_INT 31
17711: EQUAL
17712: PUSH
17713: LD_VAR 0 1
17717: PPUSH
17718: LD_INT 9
17720: PPUSH
17721: CALL_OW 308
17725: AND
17726: IFFALSE 17777
// begin if UnitsInside ( ru2_arm2 ) then
17728: LD_INT 209
17730: PPUSH
17731: CALL_OW 313
17735: IFFALSE 17777
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
17737: LD_ADDR_VAR 0 2
17741: PUSH
17742: LD_INT 209
17744: PPUSH
17745: CALL_OW 313
17749: PUSH
17750: LD_INT 1
17752: ARRAY
17753: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
17754: LD_VAR 0 2
17758: PPUSH
17759: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: LD_VAR 0 1
17772: PPUSH
17773: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
17777: LD_VAR 0 1
17781: PPUSH
17782: CALL_OW 266
17786: PUSH
17787: LD_INT 31
17789: EQUAL
17790: PUSH
17791: LD_VAR 0 1
17795: PPUSH
17796: LD_INT 8
17798: PPUSH
17799: CALL_OW 308
17803: AND
17804: IFFALSE 17840
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_EXP 77
17815: PPUSH
17816: LD_VAR 0 1
17820: PPUSH
17821: CALL_OW 74
17825: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
17826: LD_VAR 0 2
17830: PPUSH
17831: LD_VAR 0 1
17835: PPUSH
17836: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
17840: LD_VAR 0 1
17844: PPUSH
17845: CALL_OW 266
17849: PUSH
17850: LD_INT 2
17852: EQUAL
17853: IFFALSE 17908
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
17855: LD_EXP 69
17859: PPUSH
17860: LD_INT 25
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PPUSH
17870: CALL_OW 72
17874: PPUSH
17875: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
17879: LD_EXP 69
17883: PPUSH
17884: LD_INT 25
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 72
17898: PPUSH
17899: LD_VAR 0 1
17903: PPUSH
17904: CALL_OW 180
// end ; end ; end ;
17908: PPOPN 3
17910: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
17911: LD_VAR 0 1
17915: PUSH
17916: LD_INT 47
17918: EQUAL
17919: PUSH
17920: LD_VAR 0 2
17924: PPUSH
17925: CALL_OW 255
17929: PUSH
17930: LD_INT 3
17932: EQUAL
17933: AND
17934: IFFALSE 17944
// engineResearched = true ;
17936: LD_ADDR_EXP 10
17940: PUSH
17941: LD_INT 1
17943: ST_TO_ADDR
// if tech = tech_Tech1 then
17944: LD_VAR 0 1
17948: PUSH
17949: LD_INT 48
17951: EQUAL
17952: IFFALSE 17974
// begin wait ( 0 0$5 ) ;
17954: LD_INT 175
17956: PPUSH
17957: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
17961: LD_INT 83
17963: PPUSH
17964: LD_INT 1500
17966: PPUSH
17967: LD_INT 0
17969: PPUSH
17970: CALL_OW 486
// end ; end ;
17974: PPOPN 2
17976: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
17977: LD_VAR 0 2
17981: PPUSH
17982: CALL_OW 255
17986: PUSH
17987: LD_OWVAR 2
17991: EQUAL
17992: PUSH
17993: LD_VAR 0 2
17997: PPUSH
17998: CALL_OW 302
18002: AND
18003: PUSH
18004: LD_EXP 12
18008: NOT
18009: AND
18010: PUSH
18011: LD_EXP 17
18015: NOT
18016: AND
18017: IFFALSE 18028
// Dial_FirstVehConstructed ( factory ) ;
18019: LD_VAR 0 2
18023: PPUSH
18024: CALL 9691 0 1
// if GetSide ( factory ) = your_side and not vehicleForKurin and not IsOK ( firstVeh ) then
18028: LD_VAR 0 2
18032: PPUSH
18033: CALL_OW 255
18037: PUSH
18038: LD_OWVAR 2
18042: EQUAL
18043: PUSH
18044: LD_EXP 14
18048: NOT
18049: AND
18050: PUSH
18051: LD_EXP 13
18055: PPUSH
18056: CALL_OW 302
18060: NOT
18061: AND
18062: IFFALSE 18074
// firstVeh = vehicle ;
18064: LD_ADDR_EXP 13
18068: PUSH
18069: LD_VAR 0 1
18073: ST_TO_ADDR
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
18074: LD_VAR 0 2
18078: PPUSH
18079: CALL_OW 255
18083: PUSH
18084: LD_OWVAR 2
18088: EQUAL
18089: PUSH
18090: LD_VAR 0 2
18094: PPUSH
18095: CALL_OW 302
18099: AND
18100: PUSH
18101: LD_EXP 17
18105: AND
18106: IFFALSE 18122
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
18108: LD_ADDR_EXP 18
18112: PUSH
18113: LD_EXP 18
18117: PUSH
18118: LD_INT 1
18120: PLUS
18121: ST_TO_ADDR
// if GetSide ( factory ) = your_side and GetNation ( factory ) = nation_russian then
18122: LD_VAR 0 2
18126: PPUSH
18127: CALL_OW 255
18131: PUSH
18132: LD_OWVAR 2
18136: EQUAL
18137: PUSH
18138: LD_VAR 0 2
18142: PPUSH
18143: CALL_OW 248
18147: PUSH
18148: LD_INT 3
18150: EQUAL
18151: AND
18152: IFFALSE 18168
// achievement_ConstructVehicles = achievement_ConstructVehicles + 1 ;
18154: LD_ADDR_EXP 44
18158: PUSH
18159: LD_EXP 44
18163: PUSH
18164: LD_INT 1
18166: PLUS
18167: ST_TO_ADDR
// end ;
18168: PPOPN 2
18170: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
18171: LD_EXP 19
18175: NOT
18176: PUSH
18177: LD_VAR 0 5
18181: PUSH
18182: LD_INT 1
18184: EQUAL
18185: AND
18186: IFFALSE 18202
// Dial_NewCrates ( x , y ) ;
18188: LD_VAR 0 2
18192: PPUSH
18193: LD_VAR 0 3
18197: PPUSH
18198: CALL 9636 0 2
// end ;
18202: PPOPN 5
18204: END
// on Command ( com ) do var i , j , temp , order , destiny ;
18205: LD_INT 0
18207: PPUSH
18208: PPUSH
18209: PPUSH
18210: PPUSH
18211: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
18212: LD_ADDR_VAR 0 2
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_INT 3
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: LD_INT 21
18229: PUSH
18230: LD_INT 1
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: PUSH
18246: FOR_IN
18247: IFFALSE 18440
// if GetTaskList ( i ) > 0 then
18249: LD_VAR 0 2
18253: PPUSH
18254: CALL_OW 437
18258: PUSH
18259: LD_INT 0
18261: GREATER
18262: IFFALSE 18438
// for j = 1 to GetTaskList ( i ) do
18264: LD_ADDR_VAR 0 3
18268: PUSH
18269: DOUBLE
18270: LD_INT 1
18272: DEC
18273: ST_TO_ADDR
18274: LD_VAR 0 2
18278: PPUSH
18279: CALL_OW 437
18283: PUSH
18284: FOR_TO
18285: IFFALSE 18436
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
18287: LD_ADDR_VAR 0 4
18291: PUSH
18292: LD_VAR 0 2
18296: PPUSH
18297: CALL_OW 437
18301: PUSH
18302: LD_VAR 0 3
18306: ARRAY
18307: PUSH
18308: LD_INT 4
18310: ARRAY
18311: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
18312: LD_VAR 0 4
18316: PUSH
18317: LD_INT 71
18319: EQUAL
18320: PUSH
18321: LD_VAR 0 4
18325: PPUSH
18326: CALL_OW 255
18330: PUSH
18331: LD_INT 6
18333: EQUAL
18334: PUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: CALL_OW 437
18344: PUSH
18345: LD_VAR 0 3
18349: ARRAY
18350: PUSH
18351: LD_INT 1
18353: ARRAY
18354: PUSH
18355: LD_STRING e
18357: EQUAL
18358: AND
18359: PUSH
18360: LD_VAR 0 4
18364: PPUSH
18365: CALL_OW 247
18369: PUSH
18370: LD_INT 2
18372: EQUAL
18373: AND
18374: OR
18375: IFFALSE 18388
// SetTaskList ( i , [ ] ) ;
18377: LD_VAR 0 2
18381: PPUSH
18382: EMPTY
18383: PPUSH
18384: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
18388: LD_VAR 0 4
18392: PUSH
18393: LD_INT 106
18395: EQUAL
18396: PUSH
18397: LD_VAR 0 2
18401: PPUSH
18402: CALL_OW 437
18406: PUSH
18407: LD_VAR 0 3
18411: ARRAY
18412: PUSH
18413: LD_INT 1
18415: ARRAY
18416: PUSH
18417: LD_STRING Y
18419: EQUAL
18420: AND
18421: IFFALSE 18434
// SetTaskList ( i , [ ] ) ;
18423: LD_VAR 0 2
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 446
// end ;
18434: GO 18284
18436: POP
18437: POP
18438: GO 18246
18440: POP
18441: POP
// end ;
18442: PPOPN 6
18444: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18445: LD_VAR 0 1
18449: PPUSH
18450: CALL_OW 255
18454: PUSH
18455: LD_INT 1
18457: EQUAL
18458: PUSH
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 247
18468: PUSH
18469: LD_INT 1
18471: EQUAL
18472: AND
18473: IFFALSE 18531
// begin if unit in amLeftEngs then
18475: LD_VAR 0 1
18479: PUSH
18480: LD_EXP 86
18484: IN
18485: IFFALSE 18503
// amLeftEngs = amLeftEngs diff unit ;
18487: LD_ADDR_EXP 86
18491: PUSH
18492: LD_EXP 86
18496: PUSH
18497: LD_VAR 0 1
18501: DIFF
18502: ST_TO_ADDR
// if unit in amRightEngs then
18503: LD_VAR 0 1
18507: PUSH
18508: LD_EXP 87
18512: IN
18513: IFFALSE 18531
// amRightEngs = amRightEngs diff unit ;
18515: LD_ADDR_EXP 87
18519: PUSH
18520: LD_EXP 87
18524: PUSH
18525: LD_VAR 0 1
18529: DIFF
18530: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
18531: LD_VAR 0 1
18535: PPUSH
18536: CALL_OW 255
18540: PUSH
18541: LD_INT 6
18543: EQUAL
18544: PUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 247
18554: PUSH
18555: LD_INT 1
18557: EQUAL
18558: AND
18559: IFFALSE 18589
// if unit in belkovTeam then
18561: LD_VAR 0 1
18565: PUSH
18566: LD_EXP 73
18570: IN
18571: IFFALSE 18589
// belkovTeam = belkovTeam diff unit ;
18573: LD_ADDR_EXP 73
18577: PUSH
18578: LD_EXP 73
18582: PUSH
18583: LD_VAR 0 1
18587: DIFF
18588: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
18589: LD_VAR 0 1
18593: PPUSH
18594: CALL_OW 255
18598: PUSH
18599: LD_INT 3
18601: EQUAL
18602: PUSH
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 247
18612: PUSH
18613: LD_INT 1
18615: EQUAL
18616: AND
18617: IFFALSE 18633
// lostComradesCounter = lostComradesCounter + 1 ;
18619: LD_ADDR_EXP 43
18623: PUSH
18624: LD_EXP 43
18628: PUSH
18629: LD_INT 1
18631: PLUS
18632: ST_TO_ADDR
// if unit = Burlak then
18633: LD_VAR 0 1
18637: PUSH
18638: LD_EXP 62
18642: EQUAL
18643: IFFALSE 18649
// BurlakIsDead ;
18645: CALL 19960 0 0
// if unit = Beria then
18649: LD_VAR 0 1
18653: PUSH
18654: LD_INT 106
18656: EQUAL
18657: IFFALSE 18663
// BaseDestroyed ;
18659: CALL 19990 0 0
// if unit in platSoldiers then
18663: LD_VAR 0 1
18667: PUSH
18668: LD_EXP 77
18672: IN
18673: IFFALSE 18691
// platSoldiers = platSoldiers diff unit ;
18675: LD_ADDR_EXP 77
18679: PUSH
18680: LD_EXP 77
18684: PUSH
18685: LD_VAR 0 1
18689: DIFF
18690: ST_TO_ADDR
// end ;
18691: PPOPN 1
18693: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 255
18703: PUSH
18704: LD_INT 1
18706: EQUAL
18707: PUSH
18708: LD_VAR 0 1
18712: PPUSH
18713: CALL_OW 247
18717: PUSH
18718: LD_INT 3
18720: EQUAL
18721: AND
18722: IFFALSE 18780
// begin if unit in leftBunkers then
18724: LD_VAR 0 1
18728: PUSH
18729: LD_EXP 82
18733: IN
18734: IFFALSE 18752
// leftBunkers = leftBunkers diff unit ;
18736: LD_ADDR_EXP 82
18740: PUSH
18741: LD_EXP 82
18745: PUSH
18746: LD_VAR 0 1
18750: DIFF
18751: ST_TO_ADDR
// if unit in rightBunkers then
18752: LD_VAR 0 1
18756: PUSH
18757: LD_EXP 83
18761: IN
18762: IFFALSE 18780
// rightBunkers = rightBunkers diff unit ;
18764: LD_ADDR_EXP 83
18768: PUSH
18769: LD_EXP 83
18773: PUSH
18774: LD_VAR 0 1
18778: DIFF
18779: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 255
18789: PUSH
18790: LD_INT 1
18792: EQUAL
18793: PUSH
18794: LD_VAR 0 1
18798: PPUSH
18799: CALL_OW 247
18803: PUSH
18804: LD_INT 1
18806: EQUAL
18807: AND
18808: IFFALSE 18838
// if unit in trapTeam then
18810: LD_VAR 0 1
18814: PUSH
18815: LD_EXP 81
18819: IN
18820: IFFALSE 18838
// trapTeam = trapTeam diff unit ;
18822: LD_ADDR_EXP 81
18826: PUSH
18827: LD_EXP 81
18831: PUSH
18832: LD_VAR 0 1
18836: DIFF
18837: ST_TO_ADDR
// end ;
18838: PPOPN 1
18840: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
18841: LD_VAR 0 3
18845: PUSH
18846: LD_INT 1
18848: EQUAL
18849: IFFALSE 18859
// captureBelkovVehicle = true ;
18851: LD_ADDR_EXP 38
18855: PUSH
18856: LD_INT 1
18858: ST_TO_ADDR
// if original_side = 6 then
18859: LD_VAR 0 3
18863: PUSH
18864: LD_INT 6
18866: EQUAL
18867: IFFALSE 18911
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
18869: LD_VAR 0 1
18873: PUSH
18874: LD_VAR 0 2
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: PPUSH
18883: LD_INT 118
18885: PPUSH
18886: LD_INT 25
18888: PPUSH
18889: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
18893: LD_VAR 0 1
18897: PUSH
18898: LD_VAR 0 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PPUSH
18907: CALL_OW 139
// end ; end ;
18911: PPOPN 4
18913: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
18914: LD_VAR 0 1
18918: PUSH
18919: LD_INT 3
18921: EQUAL
18922: PUSH
18923: LD_VAR 0 2
18927: PUSH
18928: LD_INT 6
18930: EQUAL
18931: AND
18932: IFFALSE 18938
// AttackComrades ;
18934: CALL 19975 0 0
// end ;
18938: PPOPN 2
18940: END
// on BuildingCaptured ( building , side , human ) do begin if side = 6 then
18941: LD_VAR 0 2
18945: PUSH
18946: LD_INT 6
18948: EQUAL
18949: IFFALSE 18963
// SetSide ( building , 3 ) ;
18951: LD_VAR 0 1
18955: PPUSH
18956: LD_INT 3
18958: PPUSH
18959: CALL_OW 235
// end ; end_of_file
18963: PPOPN 3
18965: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
18966: LD_EXP 16
18970: PUSH
18971: LD_INT 8
18973: PPUSH
18974: LD_INT 22
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: EMPTY
18995: LIST
18996: LIST
18997: PPUSH
18998: CALL_OW 71
19002: PUSH
19003: LD_INT 0
19005: EQUAL
19006: AND
19007: IFFALSE 19108
19009: GO 19011
19011: DISABLE
// begin enable ;
19012: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
19013: LD_EXP 36
19017: NOT
19018: PUSH
19019: LD_EXP 64
19023: PPUSH
19024: CALL_OW 302
19028: PUSH
19029: LD_EXP 68
19033: PPUSH
19034: CALL_OW 302
19038: OR
19039: AND
19040: IFFALSE 19087
// begin case Query ( QContMission ) of 1 :
19042: LD_STRING QContMission
19044: PPUSH
19045: CALL_OW 97
19049: PUSH
19050: LD_INT 1
19052: DOUBLE
19053: EQUAL
19054: IFTRUE 19058
19056: GO 19065
19058: POP
// begin FinishMission ;
19059: CALL 19109 0 0
// end ; 2 :
19063: GO 19085
19065: LD_INT 2
19067: DOUBLE
19068: EQUAL
19069: IFTRUE 19073
19071: GO 19084
19073: POP
// begin saveBelkovObjective = true ;
19074: LD_ADDR_EXP 36
19078: PUSH
19079: LD_INT 1
19081: ST_TO_ADDR
// end ; end ;
19082: GO 19085
19084: POP
// end else
19085: GO 19098
// if not belkovSaved then
19087: LD_EXP 37
19091: NOT
19092: IFFALSE 19098
// FinishMission ;
19094: CALL 19109 0 0
// if belkovSaved then
19098: LD_EXP 37
19102: IFFALSE 19108
// FinishMission ;
19104: CALL 19109 0 0
// end ;
19108: END
// function FinishMission ; begin
19109: LD_INT 0
19111: PPUSH
// SetRewards ;
19112: CALL 19133 0 0
// SavePlayerCharacters ;
19116: CALL 19423 0 0
// SaveGlobalVariables ;
19120: CALL 19640 0 0
// YouWin ;
19124: CALL_OW 103
// end ;
19128: LD_VAR 0 1
19132: RET
// function SetRewards ; begin
19133: LD_INT 0
19135: PPUSH
// case initiative of 1 :
19136: LD_EXP 42
19140: PUSH
19141: LD_INT 1
19143: DOUBLE
19144: EQUAL
19145: IFTRUE 19149
19147: GO 19162
19149: POP
// AddMedal ( Initiative , 1 ) ; 2 :
19150: LD_STRING Initiative
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: CALL_OW 101
19160: GO 19207
19162: LD_INT 2
19164: DOUBLE
19165: EQUAL
19166: IFTRUE 19170
19168: GO 19184
19170: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
19171: LD_STRING Initiative
19173: PPUSH
19174: LD_INT 2
19176: NEG
19177: PPUSH
19178: CALL_OW 101
19182: GO 19207
19184: LD_INT 3
19186: DOUBLE
19187: EQUAL
19188: IFTRUE 19192
19190: GO 19206
19192: POP
// AddMedal ( Initiative , - 1 ) ; end ;
19193: LD_STRING Initiative
19195: PPUSH
19196: LD_INT 1
19198: NEG
19199: PPUSH
19200: CALL_OW 101
19204: GO 19207
19206: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
19207: LD_EXP 37
19211: PUSH
19212: LD_EXP 64
19216: PPUSH
19217: CALL_OW 302
19221: PUSH
19222: LD_EXP 68
19226: PPUSH
19227: CALL_OW 302
19231: OR
19232: AND
19233: IFFALSE 19245
// AddMedal ( Belkov , 1 ) ;
19235: LD_STRING Belkov
19237: PPUSH
19238: LD_INT 1
19240: PPUSH
19241: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
19245: LD_EXP 37
19249: NOT
19250: PUSH
19251: LD_EXP 36
19255: NOT
19256: AND
19257: IFFALSE 19270
// AddMedal ( Belkov , - 1 ) ;
19259: LD_STRING Belkov
19261: PPUSH
19262: LD_INT 1
19264: NEG
19265: PPUSH
19266: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
19270: LD_EXP 37
19274: NOT
19275: PUSH
19276: LD_EXP 36
19280: AND
19281: IFFALSE 19294
// AddMedal ( Belkov , - 2 ) ;
19283: LD_STRING Belkov
19285: PPUSH
19286: LD_INT 2
19288: NEG
19289: PPUSH
19290: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
19294: LD_EXP 37
19298: PUSH
19299: LD_EXP 6
19303: PUSH
19304: LD_EXP 64
19308: PPUSH
19309: CALL_OW 301
19313: AND
19314: AND
19315: PUSH
19316: LD_EXP 6
19320: NOT
19321: PUSH
19322: LD_EXP 68
19326: PPUSH
19327: CALL_OW 301
19331: AND
19332: OR
19333: IFFALSE 19346
// AddMedal ( Belkov , - 2 ) ;
19335: LD_STRING Belkov
19337: PPUSH
19338: LD_INT 2
19340: NEG
19341: PPUSH
19342: CALL_OW 101
// if lostComradesCounter = 0 then
19346: LD_EXP 43
19350: PUSH
19351: LD_INT 0
19353: EQUAL
19354: IFFALSE 19368
// AddMedal ( NoLosses , 1 ) else
19356: LD_STRING NoLosses
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: CALL_OW 101
19366: GO 19378
// AddMedal ( NoLosses , 0 ) ;
19368: LD_STRING NoLosses
19370: PPUSH
19371: LD_INT 0
19373: PPUSH
19374: CALL_OW 101
// GiveMedals ( Main ) ;
19378: LD_STRING Main
19380: PPUSH
19381: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19385: LD_INT 22
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: EMPTY
19392: LIST
19393: LIST
19394: PUSH
19395: LD_INT 21
19397: PUSH
19398: LD_INT 1
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PPUSH
19409: CALL_OW 69
19413: PPUSH
19414: CALL_OW 43
// end ;
19418: LD_VAR 0 1
19422: RET
// function SavePlayerCharacters ; var othersYour ; begin
19423: LD_INT 0
19425: PPUSH
19426: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19427: LD_EXP 62
19431: PPUSH
19432: LD_STRING Burlak
19434: PPUSH
19435: LD_INT 3
19437: PPUSH
19438: CALL 4388 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
19442: LD_EXP 63
19446: PPUSH
19447: LD_STRING Gnyevko
19449: PPUSH
19450: LD_INT 3
19452: PPUSH
19453: CALL 4388 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
19457: LD_EXP 70
19461: PPUSH
19462: LD_STRING Kovalyuk
19464: PPUSH
19465: LD_INT 3
19467: PPUSH
19468: CALL 4388 0 3
// ExtSaveCharacter ( Belkov , Belkov , 3 ) ;
19472: LD_EXP 64
19476: PPUSH
19477: LD_STRING Belkov
19479: PPUSH
19480: LD_INT 3
19482: PPUSH
19483: CALL 4388 0 3
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
19487: LD_EXP 68
19491: PPUSH
19492: LD_STRING Belkov2
19494: PPUSH
19495: LD_INT 3
19497: PPUSH
19498: CALL 4388 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
19502: LD_EXP 65
19506: PPUSH
19507: LD_STRING Kirilenkova
19509: PPUSH
19510: LD_INT 3
19512: PPUSH
19513: CALL 4388 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
19517: LD_ADDR_VAR 0 2
19521: PUSH
19522: LD_INT 22
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: LD_INT 21
19534: PUSH
19535: LD_INT 1
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PPUSH
19546: CALL_OW 69
19550: PUSH
19551: LD_EXP 62
19555: PUSH
19556: LD_EXP 63
19560: PUSH
19561: LD_EXP 64
19565: PUSH
19566: LD_EXP 68
19570: PUSH
19571: LD_EXP 70
19575: PUSH
19576: LD_EXP 65
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: DIFF
19589: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
19590: LD_VAR 0 2
19594: PPUSH
19595: LD_STRING other_survivors
19597: PPUSH
19598: LD_INT 3
19600: PPUSH
19601: CALL 4444 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
19605: LD_EXP 77
19609: PPUSH
19610: LD_STRING other_beria
19612: PPUSH
19613: LD_INT 6
19615: PPUSH
19616: CALL 4444 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
19620: LD_EXP 69
19624: PPUSH
19625: LD_STRING other_kirov
19627: PPUSH
19628: LD_INT 6
19630: PPUSH
19631: CALL 4444 0 3
// end ;
19635: LD_VAR 0 1
19639: RET
// function SaveGlobalVariables ; var vehicles ; begin
19640: LD_INT 0
19642: PPUSH
19643: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
19644: LD_ADDR_VAR 0 2
19648: PUSH
19649: LD_INT 22
19651: PUSH
19652: LD_INT 3
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 2
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PUSH
19669: LD_INT 50
19671: PUSH
19672: EMPTY
19673: LIST
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: LIST
19679: PPUSH
19680: CALL_OW 69
19684: ST_TO_ADDR
// if vehicles then
19685: LD_VAR 0 2
19689: IFFALSE 19703
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
19691: LD_VAR 0 2
19695: PPUSH
19696: LD_STRING 02_Vehicles_1
19698: PPUSH
19699: CALL 5475 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
19703: LD_INT 8
19705: PPUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: PPUSH
19719: CALL_OW 70
19723: PPUSH
19724: LD_STRING 02_BeriaBase_2
19726: PPUSH
19727: CALL 5618 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
19731: LD_INT 9
19733: PPUSH
19734: LD_INT 22
19736: PUSH
19737: LD_INT 6
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 21
19746: PUSH
19747: LD_INT 3
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 70
19762: PPUSH
19763: LD_STRING 02_KirovBase_3
19765: PPUSH
19766: CALL 5618 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
19770: LD_INT 22
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: LD_INT 21
19782: PUSH
19783: LD_INT 3
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: PUSH
19790: LD_INT 50
19792: PUSH
19793: EMPTY
19794: LIST
19795: PUSH
19796: LD_INT 3
19798: PUSH
19799: LD_INT 95
19801: PUSH
19802: LD_INT 8
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: PPUSH
19824: LD_STRING 02_OtherBuildings_4
19826: PPUSH
19827: CALL 5618 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
19831: LD_INT 22
19833: PUSH
19834: LD_INT 1
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: LD_INT 21
19843: PUSH
19844: LD_INT 3
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 50
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: LD_INT 23
19859: PUSH
19860: LD_INT 1
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: PPUSH
19873: CALL_OW 69
19877: PPUSH
19878: LD_STRING 02_AmericanBuildings_5
19880: PPUSH
19881: CALL 5618 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
19885: LD_EXP 4
19889: PPUSH
19890: LD_STRING 02_MeetBelkovBrother_6
19892: PPUSH
19893: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
19897: LD_INT 106
19899: PPUSH
19900: CALL_OW 274
19904: PPUSH
19905: LD_INT 1
19907: PPUSH
19908: CALL_OW 275
19912: PPUSH
19913: LD_STRING 02_BeriaResourceCrates_7
19915: PPUSH
19916: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
19920: LD_INT 106
19922: PPUSH
19923: CALL_OW 274
19927: PPUSH
19928: LD_INT 2
19930: PPUSH
19931: CALL_OW 275
19935: PPUSH
19936: LD_STRING 02_BeriaResourceOil_8
19938: PPUSH
19939: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
19943: LD_EXP 5
19947: PPUSH
19948: LD_STRING 02_PlatonovOpinion_9
19950: PPUSH
19951: CALL_OW 39
// end ; end_of_file
19955: LD_VAR 0 1
19959: RET
// export function BurlakIsDead ; begin
19960: LD_INT 0
19962: PPUSH
// YouLost ( Burlak ) ;
19963: LD_STRING Burlak
19965: PPUSH
19966: CALL_OW 104
// end ;
19970: LD_VAR 0 1
19974: RET
// export function AttackComrades ; begin
19975: LD_INT 0
19977: PPUSH
// YouLost ( SelfAttack ) ;
19978: LD_STRING SelfAttack
19980: PPUSH
19981: CALL_OW 104
// end ;
19985: LD_VAR 0 1
19989: RET
// export function BaseDestroyed ; begin
19990: LD_INT 0
19992: PPUSH
// YouLost ( Base ) ;
19993: LD_STRING Base
19995: PPUSH
19996: CALL_OW 104
// end ; end_of_file
20000: LD_VAR 0 1
20004: RET
// every 0 0$1 do var engs ;
20005: GO 20007
20007: DISABLE
20008: LD_INT 0
20010: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
20011: LD_ADDR_VAR 0 1
20015: PUSH
20016: LD_EXP 69
20020: PPUSH
20021: LD_INT 25
20023: PUSH
20024: LD_INT 2
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 72
20035: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
20036: LD_VAR 0 1
20040: PPUSH
20041: CALL_OW 122
// wait ( 0 0$1 ) ;
20045: LD_INT 35
20047: PPUSH
20048: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
20052: LD_VAR 0 1
20056: PPUSH
20057: LD_INT 31
20059: PPUSH
20060: LD_INT 146
20062: PPUSH
20063: LD_INT 107
20065: PPUSH
20066: LD_INT 1
20068: PPUSH
20069: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
20073: LD_VAR 0 1
20077: PPUSH
20078: LD_INT 31
20080: PPUSH
20081: LD_INT 176
20083: PPUSH
20084: LD_INT 123
20086: PPUSH
20087: LD_INT 5
20089: PPUSH
20090: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
20094: LD_VAR 0 1
20098: PPUSH
20099: LD_INT 31
20101: PPUSH
20102: LD_INT 170
20104: PPUSH
20105: LD_INT 102
20107: PPUSH
20108: LD_INT 4
20110: PPUSH
20111: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_INT 31
20122: PPUSH
20123: LD_INT 173
20125: PPUSH
20126: LD_INT 105
20128: PPUSH
20129: LD_INT 4
20131: PPUSH
20132: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_INT 71
20143: PPUSH
20144: CALL_OW 180
// end ;
20148: PPOPN 1
20150: END
// every 0 0$1 trigger activateAMAI do
20151: LD_EXP 27
20155: IFFALSE 20179
20157: GO 20159
20159: DISABLE
// begin enable ;
20160: ENABLE
// RepairDamageLeftBunkers ;
20161: CALL 20180 0 0
// if Difficulty >= 3 then
20165: LD_OWVAR 67
20169: PUSH
20170: LD_INT 3
20172: GREATEREQUAL
20173: IFFALSE 20179
// RepairDamageRightBunkers ;
20175: CALL 20388 0 0
// end ;
20179: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
20180: LD_INT 0
20182: PPUSH
20183: PPUSH
20184: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20185: LD_EXP 86
20189: NOT
20190: PUSH
20191: LD_INT 17
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 3
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: LD_INT 30
20216: PUSH
20217: LD_INT 31
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: PUSH
20224: LD_INT 3
20226: PUSH
20227: LD_INT 24
20229: PUSH
20230: LD_INT 1000
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: LIST
20245: LIST
20246: PPUSH
20247: CALL_OW 70
20251: PUSH
20252: LD_INT 0
20254: EQUAL
20255: OR
20256: IFFALSE 20260
// exit ;
20258: GO 20383
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
20260: LD_EXP 86
20264: PPUSH
20265: LD_INT 3
20267: PUSH
20268: LD_INT 60
20270: PUSH
20271: EMPTY
20272: LIST
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 72
20282: PPUSH
20283: CALL_OW 122
// for bunker in leftBunkers do
20287: LD_ADDR_VAR 0 3
20291: PUSH
20292: LD_EXP 82
20296: PUSH
20297: FOR_IN
20298: IFFALSE 20349
// if GetLives ( bunker ) < 1000 then
20300: LD_VAR 0 3
20304: PPUSH
20305: CALL_OW 256
20309: PUSH
20310: LD_INT 1000
20312: LESS
20313: IFFALSE 20347
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20315: LD_EXP 86
20319: PPUSH
20320: LD_INT 3
20322: PUSH
20323: LD_INT 60
20325: PUSH
20326: EMPTY
20327: LIST
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PPUSH
20333: CALL_OW 72
20337: PPUSH
20338: LD_VAR 0 3
20342: PPUSH
20343: CALL_OW 190
20347: GO 20297
20349: POP
20350: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
20351: LD_EXP 86
20355: PPUSH
20356: LD_INT 3
20358: PUSH
20359: LD_INT 60
20361: PUSH
20362: EMPTY
20363: LIST
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PPUSH
20369: CALL_OW 72
20373: PPUSH
20374: LD_EXP 84
20378: PPUSH
20379: CALL_OW 180
// end ;
20383: LD_VAR 0 1
20387: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
20388: LD_INT 0
20390: PPUSH
20391: PPUSH
20392: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
20393: LD_EXP 87
20397: NOT
20398: PUSH
20399: LD_INT 16
20401: PPUSH
20402: LD_INT 22
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: LD_INT 21
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 31
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: LD_INT 3
20434: PUSH
20435: LD_INT 24
20437: PUSH
20438: LD_INT 1000
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: LIST
20453: LIST
20454: PPUSH
20455: CALL_OW 70
20459: PUSH
20460: LD_INT 0
20462: EQUAL
20463: OR
20464: IFFALSE 20468
// exit ;
20466: GO 20591
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
20468: LD_EXP 87
20472: PPUSH
20473: LD_INT 3
20475: PUSH
20476: LD_INT 60
20478: PUSH
20479: EMPTY
20480: LIST
20481: PUSH
20482: EMPTY
20483: LIST
20484: LIST
20485: PPUSH
20486: CALL_OW 72
20490: PPUSH
20491: CALL_OW 122
// for bunker in rightBunkers do
20495: LD_ADDR_VAR 0 3
20499: PUSH
20500: LD_EXP 83
20504: PUSH
20505: FOR_IN
20506: IFFALSE 20557
// if GetLives ( bunker ) < 1000 then
20508: LD_VAR 0 3
20512: PPUSH
20513: CALL_OW 256
20517: PUSH
20518: LD_INT 1000
20520: LESS
20521: IFFALSE 20555
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
20523: LD_EXP 87
20527: PPUSH
20528: LD_INT 3
20530: PUSH
20531: LD_INT 60
20533: PUSH
20534: EMPTY
20535: LIST
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PPUSH
20541: CALL_OW 72
20545: PPUSH
20546: LD_VAR 0 3
20550: PPUSH
20551: CALL_OW 190
20555: GO 20505
20557: POP
20558: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
20559: LD_EXP 87
20563: PPUSH
20564: LD_INT 3
20566: PUSH
20567: LD_INT 60
20569: PUSH
20570: EMPTY
20571: LIST
20572: PUSH
20573: EMPTY
20574: LIST
20575: LIST
20576: PPUSH
20577: CALL_OW 72
20581: PPUSH
20582: LD_EXP 85
20586: PPUSH
20587: CALL_OW 180
// end ;
20591: LD_VAR 0 1
20595: RET
// every 0 0$1 trigger activateBelkovAI and belkovTeam do var unit , med , damaged ;
20596: LD_EXP 28
20600: PUSH
20601: LD_EXP 73
20605: AND
20606: IFFALSE 20743
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
20615: PPUSH
// begin enable ;
20616: ENABLE
// med = UnitFilter ( belkovTeam , [ f_class , class_scientistic ] ) ;
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: LD_EXP 73
20626: PPUSH
20627: LD_INT 25
20629: PUSH
20630: LD_INT 4
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 72
20641: ST_TO_ADDR
// damaged = UnitFilter ( belkovTeam , [ f_not , [ f_lives , 650 ] ] ) ;
20642: LD_ADDR_VAR 0 3
20646: PUSH
20647: LD_EXP 73
20651: PPUSH
20652: LD_INT 3
20654: PUSH
20655: LD_INT 24
20657: PUSH
20658: LD_INT 650
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PPUSH
20669: CALL_OW 72
20673: ST_TO_ADDR
// if not damaged and med then
20674: LD_VAR 0 3
20678: NOT
20679: PUSH
20680: LD_VAR 0 2
20684: AND
20685: IFFALSE 20704
// ComMoveXY ( med , 83 , 17 ) else
20687: LD_VAR 0 2
20691: PPUSH
20692: LD_INT 83
20694: PPUSH
20695: LD_INT 17
20697: PPUSH
20698: CALL_OW 111
20702: GO 20743
// if med then
20704: LD_VAR 0 2
20708: IFFALSE 20743
// begin ComMoveXY ( damaged , 83 , 17 ) ;
20710: LD_VAR 0 3
20714: PPUSH
20715: LD_INT 83
20717: PPUSH
20718: LD_INT 17
20720: PPUSH
20721: CALL_OW 111
// ComHeal ( med , damaged [ 1 ] ) ;
20725: LD_VAR 0 2
20729: PPUSH
20730: LD_VAR 0 3
20734: PUSH
20735: LD_INT 1
20737: ARRAY
20738: PPUSH
20739: CALL_OW 128
// end ; end ; end_of_file
20743: PPOPN 3
20745: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_american ] , [ f_btype , b_depot ] ] ) = 2 do
20746: LD_INT 22
20748: PUSH
20749: LD_INT 3
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PUSH
20756: LD_INT 23
20758: PUSH
20759: LD_INT 1
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 0
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PPUSH
20781: CALL_OW 69
20785: PUSH
20786: LD_INT 2
20788: EQUAL
20789: IFFALSE 20801
20791: GO 20793
20793: DISABLE
// SetAchievement ( ACH_DEPOT ) ;
20794: LD_STRING ACH_DEPOT
20796: PPUSH
20797: CALL_OW 543
20801: END
// every 1 trigger achievement_ConstructVehicles = 5 do
20802: LD_EXP 44
20806: PUSH
20807: LD_INT 5
20809: EQUAL
20810: IFFALSE 20822
20812: GO 20814
20814: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
20815: LD_STRING ACH_WORKSHOP
20817: PPUSH
20818: CALL_OW 543
20822: END
// every 1 trigger captureBelkovVehicle do
20823: LD_EXP 38
20827: IFFALSE 20839
20829: GO 20831
20831: DISABLE
// SetAchievement ( ACH_RETAKE ) ; end_of_file
20832: LD_STRING ACH_RETAKE
20834: PPUSH
20835: CALL_OW 543
20839: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20840: LD_INT 0
20842: PPUSH
// if p2 = 100 then
20843: LD_VAR 0 2
20847: PUSH
20848: LD_INT 100
20850: EQUAL
20851: IFFALSE 21854
// begin if not StreamModeActive then
20853: LD_EXP 90
20857: NOT
20858: IFFALSE 20868
// StreamModeActive := true ;
20860: LD_ADDR_EXP 90
20864: PUSH
20865: LD_INT 1
20867: ST_TO_ADDR
// if p3 = 0 then
20868: LD_VAR 0 3
20872: PUSH
20873: LD_INT 0
20875: EQUAL
20876: IFFALSE 20882
// InitStreamMode ;
20878: CALL 22014 0 0
// if p3 = 1 then
20882: LD_VAR 0 3
20886: PUSH
20887: LD_INT 1
20889: EQUAL
20890: IFFALSE 20900
// sRocket := true ;
20892: LD_ADDR_EXP 95
20896: PUSH
20897: LD_INT 1
20899: ST_TO_ADDR
// if p3 = 2 then
20900: LD_VAR 0 3
20904: PUSH
20905: LD_INT 2
20907: EQUAL
20908: IFFALSE 20918
// sSpeed := true ;
20910: LD_ADDR_EXP 94
20914: PUSH
20915: LD_INT 1
20917: ST_TO_ADDR
// if p3 = 3 then
20918: LD_VAR 0 3
20922: PUSH
20923: LD_INT 3
20925: EQUAL
20926: IFFALSE 20936
// sEngine := true ;
20928: LD_ADDR_EXP 96
20932: PUSH
20933: LD_INT 1
20935: ST_TO_ADDR
// if p3 = 4 then
20936: LD_VAR 0 3
20940: PUSH
20941: LD_INT 4
20943: EQUAL
20944: IFFALSE 20954
// sSpec := true ;
20946: LD_ADDR_EXP 93
20950: PUSH
20951: LD_INT 1
20953: ST_TO_ADDR
// if p3 = 5 then
20954: LD_VAR 0 3
20958: PUSH
20959: LD_INT 5
20961: EQUAL
20962: IFFALSE 20972
// sLevel := true ;
20964: LD_ADDR_EXP 97
20968: PUSH
20969: LD_INT 1
20971: ST_TO_ADDR
// if p3 = 6 then
20972: LD_VAR 0 3
20976: PUSH
20977: LD_INT 6
20979: EQUAL
20980: IFFALSE 20990
// sArmoury := true ;
20982: LD_ADDR_EXP 98
20986: PUSH
20987: LD_INT 1
20989: ST_TO_ADDR
// if p3 = 7 then
20990: LD_VAR 0 3
20994: PUSH
20995: LD_INT 7
20997: EQUAL
20998: IFFALSE 21008
// sRadar := true ;
21000: LD_ADDR_EXP 99
21004: PUSH
21005: LD_INT 1
21007: ST_TO_ADDR
// if p3 = 8 then
21008: LD_VAR 0 3
21012: PUSH
21013: LD_INT 8
21015: EQUAL
21016: IFFALSE 21026
// sBunker := true ;
21018: LD_ADDR_EXP 100
21022: PUSH
21023: LD_INT 1
21025: ST_TO_ADDR
// if p3 = 9 then
21026: LD_VAR 0 3
21030: PUSH
21031: LD_INT 9
21033: EQUAL
21034: IFFALSE 21044
// sHack := true ;
21036: LD_ADDR_EXP 101
21040: PUSH
21041: LD_INT 1
21043: ST_TO_ADDR
// if p3 = 10 then
21044: LD_VAR 0 3
21048: PUSH
21049: LD_INT 10
21051: EQUAL
21052: IFFALSE 21062
// sFire := true ;
21054: LD_ADDR_EXP 102
21058: PUSH
21059: LD_INT 1
21061: ST_TO_ADDR
// if p3 = 11 then
21062: LD_VAR 0 3
21066: PUSH
21067: LD_INT 11
21069: EQUAL
21070: IFFALSE 21080
// sRefresh := true ;
21072: LD_ADDR_EXP 103
21076: PUSH
21077: LD_INT 1
21079: ST_TO_ADDR
// if p3 = 12 then
21080: LD_VAR 0 3
21084: PUSH
21085: LD_INT 12
21087: EQUAL
21088: IFFALSE 21098
// sExp := true ;
21090: LD_ADDR_EXP 104
21094: PUSH
21095: LD_INT 1
21097: ST_TO_ADDR
// if p3 = 13 then
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 13
21105: EQUAL
21106: IFFALSE 21116
// sDepot := true ;
21108: LD_ADDR_EXP 105
21112: PUSH
21113: LD_INT 1
21115: ST_TO_ADDR
// if p3 = 14 then
21116: LD_VAR 0 3
21120: PUSH
21121: LD_INT 14
21123: EQUAL
21124: IFFALSE 21134
// sFlag := true ;
21126: LD_ADDR_EXP 106
21130: PUSH
21131: LD_INT 1
21133: ST_TO_ADDR
// if p3 = 15 then
21134: LD_VAR 0 3
21138: PUSH
21139: LD_INT 15
21141: EQUAL
21142: IFFALSE 21152
// sKamikadze := true ;
21144: LD_ADDR_EXP 114
21148: PUSH
21149: LD_INT 1
21151: ST_TO_ADDR
// if p3 = 16 then
21152: LD_VAR 0 3
21156: PUSH
21157: LD_INT 16
21159: EQUAL
21160: IFFALSE 21170
// sTroll := true ;
21162: LD_ADDR_EXP 115
21166: PUSH
21167: LD_INT 1
21169: ST_TO_ADDR
// if p3 = 17 then
21170: LD_VAR 0 3
21174: PUSH
21175: LD_INT 17
21177: EQUAL
21178: IFFALSE 21188
// sSlow := true ;
21180: LD_ADDR_EXP 116
21184: PUSH
21185: LD_INT 1
21187: ST_TO_ADDR
// if p3 = 18 then
21188: LD_VAR 0 3
21192: PUSH
21193: LD_INT 18
21195: EQUAL
21196: IFFALSE 21206
// sLack := true ;
21198: LD_ADDR_EXP 117
21202: PUSH
21203: LD_INT 1
21205: ST_TO_ADDR
// if p3 = 19 then
21206: LD_VAR 0 3
21210: PUSH
21211: LD_INT 19
21213: EQUAL
21214: IFFALSE 21224
// sTank := true ;
21216: LD_ADDR_EXP 119
21220: PUSH
21221: LD_INT 1
21223: ST_TO_ADDR
// if p3 = 20 then
21224: LD_VAR 0 3
21228: PUSH
21229: LD_INT 20
21231: EQUAL
21232: IFFALSE 21242
// sRemote := true ;
21234: LD_ADDR_EXP 120
21238: PUSH
21239: LD_INT 1
21241: ST_TO_ADDR
// if p3 = 21 then
21242: LD_VAR 0 3
21246: PUSH
21247: LD_INT 21
21249: EQUAL
21250: IFFALSE 21260
// sPowell := true ;
21252: LD_ADDR_EXP 121
21256: PUSH
21257: LD_INT 1
21259: ST_TO_ADDR
// if p3 = 22 then
21260: LD_VAR 0 3
21264: PUSH
21265: LD_INT 22
21267: EQUAL
21268: IFFALSE 21278
// sTeleport := true ;
21270: LD_ADDR_EXP 124
21274: PUSH
21275: LD_INT 1
21277: ST_TO_ADDR
// if p3 = 23 then
21278: LD_VAR 0 3
21282: PUSH
21283: LD_INT 23
21285: EQUAL
21286: IFFALSE 21296
// sOilTower := true ;
21288: LD_ADDR_EXP 126
21292: PUSH
21293: LD_INT 1
21295: ST_TO_ADDR
// if p3 = 24 then
21296: LD_VAR 0 3
21300: PUSH
21301: LD_INT 24
21303: EQUAL
21304: IFFALSE 21314
// sShovel := true ;
21306: LD_ADDR_EXP 127
21310: PUSH
21311: LD_INT 1
21313: ST_TO_ADDR
// if p3 = 25 then
21314: LD_VAR 0 3
21318: PUSH
21319: LD_INT 25
21321: EQUAL
21322: IFFALSE 21332
// sSheik := true ;
21324: LD_ADDR_EXP 128
21328: PUSH
21329: LD_INT 1
21331: ST_TO_ADDR
// if p3 = 26 then
21332: LD_VAR 0 3
21336: PUSH
21337: LD_INT 26
21339: EQUAL
21340: IFFALSE 21350
// sEarthquake := true ;
21342: LD_ADDR_EXP 130
21346: PUSH
21347: LD_INT 1
21349: ST_TO_ADDR
// if p3 = 27 then
21350: LD_VAR 0 3
21354: PUSH
21355: LD_INT 27
21357: EQUAL
21358: IFFALSE 21368
// sAI := true ;
21360: LD_ADDR_EXP 131
21364: PUSH
21365: LD_INT 1
21367: ST_TO_ADDR
// if p3 = 28 then
21368: LD_VAR 0 3
21372: PUSH
21373: LD_INT 28
21375: EQUAL
21376: IFFALSE 21386
// sCargo := true ;
21378: LD_ADDR_EXP 134
21382: PUSH
21383: LD_INT 1
21385: ST_TO_ADDR
// if p3 = 29 then
21386: LD_VAR 0 3
21390: PUSH
21391: LD_INT 29
21393: EQUAL
21394: IFFALSE 21404
// sDLaser := true ;
21396: LD_ADDR_EXP 135
21400: PUSH
21401: LD_INT 1
21403: ST_TO_ADDR
// if p3 = 30 then
21404: LD_VAR 0 3
21408: PUSH
21409: LD_INT 30
21411: EQUAL
21412: IFFALSE 21422
// sExchange := true ;
21414: LD_ADDR_EXP 136
21418: PUSH
21419: LD_INT 1
21421: ST_TO_ADDR
// if p3 = 31 then
21422: LD_VAR 0 3
21426: PUSH
21427: LD_INT 31
21429: EQUAL
21430: IFFALSE 21440
// sFac := true ;
21432: LD_ADDR_EXP 137
21436: PUSH
21437: LD_INT 1
21439: ST_TO_ADDR
// if p3 = 32 then
21440: LD_VAR 0 3
21444: PUSH
21445: LD_INT 32
21447: EQUAL
21448: IFFALSE 21458
// sPower := true ;
21450: LD_ADDR_EXP 138
21454: PUSH
21455: LD_INT 1
21457: ST_TO_ADDR
// if p3 = 33 then
21458: LD_VAR 0 3
21462: PUSH
21463: LD_INT 33
21465: EQUAL
21466: IFFALSE 21476
// sRandom := true ;
21468: LD_ADDR_EXP 139
21472: PUSH
21473: LD_INT 1
21475: ST_TO_ADDR
// if p3 = 34 then
21476: LD_VAR 0 3
21480: PUSH
21481: LD_INT 34
21483: EQUAL
21484: IFFALSE 21494
// sShield := true ;
21486: LD_ADDR_EXP 140
21490: PUSH
21491: LD_INT 1
21493: ST_TO_ADDR
// if p3 = 35 then
21494: LD_VAR 0 3
21498: PUSH
21499: LD_INT 35
21501: EQUAL
21502: IFFALSE 21512
// sTime := true ;
21504: LD_ADDR_EXP 141
21508: PUSH
21509: LD_INT 1
21511: ST_TO_ADDR
// if p3 = 36 then
21512: LD_VAR 0 3
21516: PUSH
21517: LD_INT 36
21519: EQUAL
21520: IFFALSE 21530
// sTools := true ;
21522: LD_ADDR_EXP 142
21526: PUSH
21527: LD_INT 1
21529: ST_TO_ADDR
// if p3 = 101 then
21530: LD_VAR 0 3
21534: PUSH
21535: LD_INT 101
21537: EQUAL
21538: IFFALSE 21548
// sSold := true ;
21540: LD_ADDR_EXP 107
21544: PUSH
21545: LD_INT 1
21547: ST_TO_ADDR
// if p3 = 102 then
21548: LD_VAR 0 3
21552: PUSH
21553: LD_INT 102
21555: EQUAL
21556: IFFALSE 21566
// sDiff := true ;
21558: LD_ADDR_EXP 108
21562: PUSH
21563: LD_INT 1
21565: ST_TO_ADDR
// if p3 = 103 then
21566: LD_VAR 0 3
21570: PUSH
21571: LD_INT 103
21573: EQUAL
21574: IFFALSE 21584
// sFog := true ;
21576: LD_ADDR_EXP 111
21580: PUSH
21581: LD_INT 1
21583: ST_TO_ADDR
// if p3 = 104 then
21584: LD_VAR 0 3
21588: PUSH
21589: LD_INT 104
21591: EQUAL
21592: IFFALSE 21602
// sReset := true ;
21594: LD_ADDR_EXP 112
21598: PUSH
21599: LD_INT 1
21601: ST_TO_ADDR
// if p3 = 105 then
21602: LD_VAR 0 3
21606: PUSH
21607: LD_INT 105
21609: EQUAL
21610: IFFALSE 21620
// sSun := true ;
21612: LD_ADDR_EXP 113
21616: PUSH
21617: LD_INT 1
21619: ST_TO_ADDR
// if p3 = 106 then
21620: LD_VAR 0 3
21624: PUSH
21625: LD_INT 106
21627: EQUAL
21628: IFFALSE 21638
// sTiger := true ;
21630: LD_ADDR_EXP 109
21634: PUSH
21635: LD_INT 1
21637: ST_TO_ADDR
// if p3 = 107 then
21638: LD_VAR 0 3
21642: PUSH
21643: LD_INT 107
21645: EQUAL
21646: IFFALSE 21656
// sBomb := true ;
21648: LD_ADDR_EXP 110
21652: PUSH
21653: LD_INT 1
21655: ST_TO_ADDR
// if p3 = 108 then
21656: LD_VAR 0 3
21660: PUSH
21661: LD_INT 108
21663: EQUAL
21664: IFFALSE 21674
// sWound := true ;
21666: LD_ADDR_EXP 118
21670: PUSH
21671: LD_INT 1
21673: ST_TO_ADDR
// if p3 = 109 then
21674: LD_VAR 0 3
21678: PUSH
21679: LD_INT 109
21681: EQUAL
21682: IFFALSE 21692
// sBetray := true ;
21684: LD_ADDR_EXP 122
21688: PUSH
21689: LD_INT 1
21691: ST_TO_ADDR
// if p3 = 110 then
21692: LD_VAR 0 3
21696: PUSH
21697: LD_INT 110
21699: EQUAL
21700: IFFALSE 21710
// sContamin := true ;
21702: LD_ADDR_EXP 123
21706: PUSH
21707: LD_INT 1
21709: ST_TO_ADDR
// if p3 = 111 then
21710: LD_VAR 0 3
21714: PUSH
21715: LD_INT 111
21717: EQUAL
21718: IFFALSE 21728
// sOil := true ;
21720: LD_ADDR_EXP 125
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// if p3 = 112 then
21728: LD_VAR 0 3
21732: PUSH
21733: LD_INT 112
21735: EQUAL
21736: IFFALSE 21746
// sStu := true ;
21738: LD_ADDR_EXP 129
21742: PUSH
21743: LD_INT 1
21745: ST_TO_ADDR
// if p3 = 113 then
21746: LD_VAR 0 3
21750: PUSH
21751: LD_INT 113
21753: EQUAL
21754: IFFALSE 21764
// sBazooka := true ;
21756: LD_ADDR_EXP 132
21760: PUSH
21761: LD_INT 1
21763: ST_TO_ADDR
// if p3 = 114 then
21764: LD_VAR 0 3
21768: PUSH
21769: LD_INT 114
21771: EQUAL
21772: IFFALSE 21782
// sMortar := true ;
21774: LD_ADDR_EXP 133
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// if p3 = 115 then
21782: LD_VAR 0 3
21786: PUSH
21787: LD_INT 115
21789: EQUAL
21790: IFFALSE 21800
// sRanger := true ;
21792: LD_ADDR_EXP 143
21796: PUSH
21797: LD_INT 1
21799: ST_TO_ADDR
// if p3 = 116 then
21800: LD_VAR 0 3
21804: PUSH
21805: LD_INT 116
21807: EQUAL
21808: IFFALSE 21818
// sComputer := true ;
21810: LD_ADDR_EXP 144
21814: PUSH
21815: LD_INT 1
21817: ST_TO_ADDR
// if p3 = 117 then
21818: LD_VAR 0 3
21822: PUSH
21823: LD_INT 117
21825: EQUAL
21826: IFFALSE 21836
// s30 := true ;
21828: LD_ADDR_EXP 145
21832: PUSH
21833: LD_INT 1
21835: ST_TO_ADDR
// if p3 = 118 then
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 118
21843: EQUAL
21844: IFFALSE 21854
// s60 := true ;
21846: LD_ADDR_EXP 146
21850: PUSH
21851: LD_INT 1
21853: ST_TO_ADDR
// end ; if p2 = 101 then
21854: LD_VAR 0 2
21858: PUSH
21859: LD_INT 101
21861: EQUAL
21862: IFFALSE 21990
// begin case p3 of 1 :
21864: LD_VAR 0 3
21868: PUSH
21869: LD_INT 1
21871: DOUBLE
21872: EQUAL
21873: IFTRUE 21877
21875: GO 21884
21877: POP
// hHackUnlimitedResources ; 2 :
21878: CALL 33586 0 0
21882: GO 21990
21884: LD_INT 2
21886: DOUBLE
21887: EQUAL
21888: IFTRUE 21892
21890: GO 21899
21892: POP
// hHackSetLevel10 ; 3 :
21893: CALL 33719 0 0
21897: GO 21990
21899: LD_INT 3
21901: DOUBLE
21902: EQUAL
21903: IFTRUE 21907
21905: GO 21914
21907: POP
// hHackSetLevel10YourUnits ; 4 :
21908: CALL 33804 0 0
21912: GO 21990
21914: LD_INT 4
21916: DOUBLE
21917: EQUAL
21918: IFTRUE 21922
21920: GO 21929
21922: POP
// hHackInvincible ; 5 :
21923: CALL 34252 0 0
21927: GO 21990
21929: LD_INT 5
21931: DOUBLE
21932: EQUAL
21933: IFTRUE 21937
21935: GO 21944
21937: POP
// hHackInvisible ; 6 :
21938: CALL 34363 0 0
21942: GO 21990
21944: LD_INT 6
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 21959
21952: POP
// hHackChangeYourSide ; 7 :
21953: CALL 34420 0 0
21957: GO 21990
21959: LD_INT 7
21961: DOUBLE
21962: EQUAL
21963: IFTRUE 21967
21965: GO 21974
21967: POP
// hHackChangeUnitSide ; 8 :
21968: CALL 34462 0 0
21972: GO 21990
21974: LD_INT 8
21976: DOUBLE
21977: EQUAL
21978: IFTRUE 21982
21980: GO 21989
21982: POP
// hHackFog ; end ;
21983: CALL 34563 0 0
21987: GO 21990
21989: POP
// end ; end ;
21990: LD_VAR 0 7
21994: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
21995: GO 21997
21997: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
21998: LD_STRING initStreamRollete();
22000: PPUSH
22001: CALL_OW 559
// InitStreamMode ;
22005: CALL 22014 0 0
// DefineStreamItems ( ) ;
22009: CALL 22478 0 0
// end ;
22013: END
// function InitStreamMode ; begin
22014: LD_INT 0
22016: PPUSH
// streamModeActive := false ;
22017: LD_ADDR_EXP 90
22021: PUSH
22022: LD_INT 0
22024: ST_TO_ADDR
// normalCounter := 36 ;
22025: LD_ADDR_EXP 91
22029: PUSH
22030: LD_INT 36
22032: ST_TO_ADDR
// hardcoreCounter := 16 ;
22033: LD_ADDR_EXP 92
22037: PUSH
22038: LD_INT 16
22040: ST_TO_ADDR
// sRocket := false ;
22041: LD_ADDR_EXP 95
22045: PUSH
22046: LD_INT 0
22048: ST_TO_ADDR
// sSpeed := false ;
22049: LD_ADDR_EXP 94
22053: PUSH
22054: LD_INT 0
22056: ST_TO_ADDR
// sEngine := false ;
22057: LD_ADDR_EXP 96
22061: PUSH
22062: LD_INT 0
22064: ST_TO_ADDR
// sSpec := false ;
22065: LD_ADDR_EXP 93
22069: PUSH
22070: LD_INT 0
22072: ST_TO_ADDR
// sLevel := false ;
22073: LD_ADDR_EXP 97
22077: PUSH
22078: LD_INT 0
22080: ST_TO_ADDR
// sArmoury := false ;
22081: LD_ADDR_EXP 98
22085: PUSH
22086: LD_INT 0
22088: ST_TO_ADDR
// sRadar := false ;
22089: LD_ADDR_EXP 99
22093: PUSH
22094: LD_INT 0
22096: ST_TO_ADDR
// sBunker := false ;
22097: LD_ADDR_EXP 100
22101: PUSH
22102: LD_INT 0
22104: ST_TO_ADDR
// sHack := false ;
22105: LD_ADDR_EXP 101
22109: PUSH
22110: LD_INT 0
22112: ST_TO_ADDR
// sFire := false ;
22113: LD_ADDR_EXP 102
22117: PUSH
22118: LD_INT 0
22120: ST_TO_ADDR
// sRefresh := false ;
22121: LD_ADDR_EXP 103
22125: PUSH
22126: LD_INT 0
22128: ST_TO_ADDR
// sExp := false ;
22129: LD_ADDR_EXP 104
22133: PUSH
22134: LD_INT 0
22136: ST_TO_ADDR
// sDepot := false ;
22137: LD_ADDR_EXP 105
22141: PUSH
22142: LD_INT 0
22144: ST_TO_ADDR
// sFlag := false ;
22145: LD_ADDR_EXP 106
22149: PUSH
22150: LD_INT 0
22152: ST_TO_ADDR
// sKamikadze := false ;
22153: LD_ADDR_EXP 114
22157: PUSH
22158: LD_INT 0
22160: ST_TO_ADDR
// sTroll := false ;
22161: LD_ADDR_EXP 115
22165: PUSH
22166: LD_INT 0
22168: ST_TO_ADDR
// sSlow := false ;
22169: LD_ADDR_EXP 116
22173: PUSH
22174: LD_INT 0
22176: ST_TO_ADDR
// sLack := false ;
22177: LD_ADDR_EXP 117
22181: PUSH
22182: LD_INT 0
22184: ST_TO_ADDR
// sTank := false ;
22185: LD_ADDR_EXP 119
22189: PUSH
22190: LD_INT 0
22192: ST_TO_ADDR
// sRemote := false ;
22193: LD_ADDR_EXP 120
22197: PUSH
22198: LD_INT 0
22200: ST_TO_ADDR
// sPowell := false ;
22201: LD_ADDR_EXP 121
22205: PUSH
22206: LD_INT 0
22208: ST_TO_ADDR
// sTeleport := false ;
22209: LD_ADDR_EXP 124
22213: PUSH
22214: LD_INT 0
22216: ST_TO_ADDR
// sOilTower := false ;
22217: LD_ADDR_EXP 126
22221: PUSH
22222: LD_INT 0
22224: ST_TO_ADDR
// sShovel := false ;
22225: LD_ADDR_EXP 127
22229: PUSH
22230: LD_INT 0
22232: ST_TO_ADDR
// sSheik := false ;
22233: LD_ADDR_EXP 128
22237: PUSH
22238: LD_INT 0
22240: ST_TO_ADDR
// sEarthquake := false ;
22241: LD_ADDR_EXP 130
22245: PUSH
22246: LD_INT 0
22248: ST_TO_ADDR
// sAI := false ;
22249: LD_ADDR_EXP 131
22253: PUSH
22254: LD_INT 0
22256: ST_TO_ADDR
// sCargo := false ;
22257: LD_ADDR_EXP 134
22261: PUSH
22262: LD_INT 0
22264: ST_TO_ADDR
// sDLaser := false ;
22265: LD_ADDR_EXP 135
22269: PUSH
22270: LD_INT 0
22272: ST_TO_ADDR
// sExchange := false ;
22273: LD_ADDR_EXP 136
22277: PUSH
22278: LD_INT 0
22280: ST_TO_ADDR
// sFac := false ;
22281: LD_ADDR_EXP 137
22285: PUSH
22286: LD_INT 0
22288: ST_TO_ADDR
// sPower := false ;
22289: LD_ADDR_EXP 138
22293: PUSH
22294: LD_INT 0
22296: ST_TO_ADDR
// sRandom := false ;
22297: LD_ADDR_EXP 139
22301: PUSH
22302: LD_INT 0
22304: ST_TO_ADDR
// sShield := false ;
22305: LD_ADDR_EXP 140
22309: PUSH
22310: LD_INT 0
22312: ST_TO_ADDR
// sTime := false ;
22313: LD_ADDR_EXP 141
22317: PUSH
22318: LD_INT 0
22320: ST_TO_ADDR
// sTools := false ;
22321: LD_ADDR_EXP 142
22325: PUSH
22326: LD_INT 0
22328: ST_TO_ADDR
// sSold := false ;
22329: LD_ADDR_EXP 107
22333: PUSH
22334: LD_INT 0
22336: ST_TO_ADDR
// sDiff := false ;
22337: LD_ADDR_EXP 108
22341: PUSH
22342: LD_INT 0
22344: ST_TO_ADDR
// sFog := false ;
22345: LD_ADDR_EXP 111
22349: PUSH
22350: LD_INT 0
22352: ST_TO_ADDR
// sReset := false ;
22353: LD_ADDR_EXP 112
22357: PUSH
22358: LD_INT 0
22360: ST_TO_ADDR
// sSun := false ;
22361: LD_ADDR_EXP 113
22365: PUSH
22366: LD_INT 0
22368: ST_TO_ADDR
// sTiger := false ;
22369: LD_ADDR_EXP 109
22373: PUSH
22374: LD_INT 0
22376: ST_TO_ADDR
// sBomb := false ;
22377: LD_ADDR_EXP 110
22381: PUSH
22382: LD_INT 0
22384: ST_TO_ADDR
// sWound := false ;
22385: LD_ADDR_EXP 118
22389: PUSH
22390: LD_INT 0
22392: ST_TO_ADDR
// sBetray := false ;
22393: LD_ADDR_EXP 122
22397: PUSH
22398: LD_INT 0
22400: ST_TO_ADDR
// sContamin := false ;
22401: LD_ADDR_EXP 123
22405: PUSH
22406: LD_INT 0
22408: ST_TO_ADDR
// sOil := false ;
22409: LD_ADDR_EXP 125
22413: PUSH
22414: LD_INT 0
22416: ST_TO_ADDR
// sStu := false ;
22417: LD_ADDR_EXP 129
22421: PUSH
22422: LD_INT 0
22424: ST_TO_ADDR
// sBazooka := false ;
22425: LD_ADDR_EXP 132
22429: PUSH
22430: LD_INT 0
22432: ST_TO_ADDR
// sMortar := false ;
22433: LD_ADDR_EXP 133
22437: PUSH
22438: LD_INT 0
22440: ST_TO_ADDR
// sRanger := false ;
22441: LD_ADDR_EXP 143
22445: PUSH
22446: LD_INT 0
22448: ST_TO_ADDR
// sComputer := false ;
22449: LD_ADDR_EXP 144
22453: PUSH
22454: LD_INT 0
22456: ST_TO_ADDR
// s30 := false ;
22457: LD_ADDR_EXP 145
22461: PUSH
22462: LD_INT 0
22464: ST_TO_ADDR
// s60 := false ;
22465: LD_ADDR_EXP 146
22469: PUSH
22470: LD_INT 0
22472: ST_TO_ADDR
// end ;
22473: LD_VAR 0 1
22477: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
22478: LD_INT 0
22480: PPUSH
22481: PPUSH
22482: PPUSH
22483: PPUSH
22484: PPUSH
// result := [ ] ;
22485: LD_ADDR_VAR 0 1
22489: PUSH
22490: EMPTY
22491: ST_TO_ADDR
// if campaign_id = 1 then
22492: LD_OWVAR 69
22496: PUSH
22497: LD_INT 1
22499: EQUAL
22500: IFFALSE 25666
// begin case mission_number of 1 :
22502: LD_OWVAR 70
22506: PUSH
22507: LD_INT 1
22509: DOUBLE
22510: EQUAL
22511: IFTRUE 22515
22513: GO 22591
22515: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
22516: LD_ADDR_VAR 0 1
22520: PUSH
22521: LD_INT 2
22523: PUSH
22524: LD_INT 4
22526: PUSH
22527: LD_INT 11
22529: PUSH
22530: LD_INT 12
22532: PUSH
22533: LD_INT 15
22535: PUSH
22536: LD_INT 16
22538: PUSH
22539: LD_INT 22
22541: PUSH
22542: LD_INT 23
22544: PUSH
22545: LD_INT 26
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: PUSH
22559: LD_INT 101
22561: PUSH
22562: LD_INT 102
22564: PUSH
22565: LD_INT 106
22567: PUSH
22568: LD_INT 116
22570: PUSH
22571: LD_INT 117
22573: PUSH
22574: LD_INT 118
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: ST_TO_ADDR
22589: GO 25664
22591: LD_INT 2
22593: DOUBLE
22594: EQUAL
22595: IFTRUE 22599
22597: GO 22683
22599: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
22600: LD_ADDR_VAR 0 1
22604: PUSH
22605: LD_INT 2
22607: PUSH
22608: LD_INT 4
22610: PUSH
22611: LD_INT 11
22613: PUSH
22614: LD_INT 12
22616: PUSH
22617: LD_INT 15
22619: PUSH
22620: LD_INT 16
22622: PUSH
22623: LD_INT 22
22625: PUSH
22626: LD_INT 23
22628: PUSH
22629: LD_INT 26
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: LIST
22642: PUSH
22643: LD_INT 101
22645: PUSH
22646: LD_INT 102
22648: PUSH
22649: LD_INT 105
22651: PUSH
22652: LD_INT 106
22654: PUSH
22655: LD_INT 108
22657: PUSH
22658: LD_INT 116
22660: PUSH
22661: LD_INT 117
22663: PUSH
22664: LD_INT 118
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: ST_TO_ADDR
22681: GO 25664
22683: LD_INT 3
22685: DOUBLE
22686: EQUAL
22687: IFTRUE 22691
22689: GO 22779
22691: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
22692: LD_ADDR_VAR 0 1
22696: PUSH
22697: LD_INT 2
22699: PUSH
22700: LD_INT 4
22702: PUSH
22703: LD_INT 5
22705: PUSH
22706: LD_INT 11
22708: PUSH
22709: LD_INT 12
22711: PUSH
22712: LD_INT 15
22714: PUSH
22715: LD_INT 16
22717: PUSH
22718: LD_INT 22
22720: PUSH
22721: LD_INT 26
22723: PUSH
22724: LD_INT 36
22726: PUSH
22727: EMPTY
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 101
22741: PUSH
22742: LD_INT 102
22744: PUSH
22745: LD_INT 105
22747: PUSH
22748: LD_INT 106
22750: PUSH
22751: LD_INT 108
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: ST_TO_ADDR
22777: GO 25664
22779: LD_INT 4
22781: DOUBLE
22782: EQUAL
22783: IFTRUE 22787
22785: GO 22883
22787: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
22788: LD_ADDR_VAR 0 1
22792: PUSH
22793: LD_INT 2
22795: PUSH
22796: LD_INT 4
22798: PUSH
22799: LD_INT 5
22801: PUSH
22802: LD_INT 8
22804: PUSH
22805: LD_INT 11
22807: PUSH
22808: LD_INT 12
22810: PUSH
22811: LD_INT 15
22813: PUSH
22814: LD_INT 16
22816: PUSH
22817: LD_INT 22
22819: PUSH
22820: LD_INT 23
22822: PUSH
22823: LD_INT 26
22825: PUSH
22826: LD_INT 36
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 101
22845: PUSH
22846: LD_INT 102
22848: PUSH
22849: LD_INT 105
22851: PUSH
22852: LD_INT 106
22854: PUSH
22855: LD_INT 108
22857: PUSH
22858: LD_INT 116
22860: PUSH
22861: LD_INT 117
22863: PUSH
22864: LD_INT 118
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: ST_TO_ADDR
22881: GO 25664
22883: LD_INT 5
22885: DOUBLE
22886: EQUAL
22887: IFTRUE 22891
22889: GO 23003
22891: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
22892: LD_ADDR_VAR 0 1
22896: PUSH
22897: LD_INT 2
22899: PUSH
22900: LD_INT 4
22902: PUSH
22903: LD_INT 5
22905: PUSH
22906: LD_INT 6
22908: PUSH
22909: LD_INT 8
22911: PUSH
22912: LD_INT 11
22914: PUSH
22915: LD_INT 12
22917: PUSH
22918: LD_INT 15
22920: PUSH
22921: LD_INT 16
22923: PUSH
22924: LD_INT 22
22926: PUSH
22927: LD_INT 23
22929: PUSH
22930: LD_INT 25
22932: PUSH
22933: LD_INT 26
22935: PUSH
22936: LD_INT 36
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 101
22957: PUSH
22958: LD_INT 102
22960: PUSH
22961: LD_INT 105
22963: PUSH
22964: LD_INT 106
22966: PUSH
22967: LD_INT 108
22969: PUSH
22970: LD_INT 109
22972: PUSH
22973: LD_INT 112
22975: PUSH
22976: LD_INT 116
22978: PUSH
22979: LD_INT 117
22981: PUSH
22982: LD_INT 118
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: ST_TO_ADDR
23001: GO 25664
23003: LD_INT 6
23005: DOUBLE
23006: EQUAL
23007: IFTRUE 23011
23009: GO 23143
23011: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
23012: LD_ADDR_VAR 0 1
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 4
23022: PUSH
23023: LD_INT 5
23025: PUSH
23026: LD_INT 6
23028: PUSH
23029: LD_INT 8
23031: PUSH
23032: LD_INT 11
23034: PUSH
23035: LD_INT 12
23037: PUSH
23038: LD_INT 15
23040: PUSH
23041: LD_INT 16
23043: PUSH
23044: LD_INT 20
23046: PUSH
23047: LD_INT 21
23049: PUSH
23050: LD_INT 22
23052: PUSH
23053: LD_INT 23
23055: PUSH
23056: LD_INT 25
23058: PUSH
23059: LD_INT 26
23061: PUSH
23062: LD_INT 30
23064: PUSH
23065: LD_INT 31
23067: PUSH
23068: LD_INT 32
23070: PUSH
23071: LD_INT 36
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: LIST
23094: PUSH
23095: LD_INT 101
23097: PUSH
23098: LD_INT 102
23100: PUSH
23101: LD_INT 105
23103: PUSH
23104: LD_INT 106
23106: PUSH
23107: LD_INT 108
23109: PUSH
23110: LD_INT 109
23112: PUSH
23113: LD_INT 112
23115: PUSH
23116: LD_INT 116
23118: PUSH
23119: LD_INT 117
23121: PUSH
23122: LD_INT 118
23124: PUSH
23125: EMPTY
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: ST_TO_ADDR
23141: GO 25664
23143: LD_INT 7
23145: DOUBLE
23146: EQUAL
23147: IFTRUE 23151
23149: GO 23263
23151: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
23152: LD_ADDR_VAR 0 1
23156: PUSH
23157: LD_INT 2
23159: PUSH
23160: LD_INT 4
23162: PUSH
23163: LD_INT 5
23165: PUSH
23166: LD_INT 7
23168: PUSH
23169: LD_INT 11
23171: PUSH
23172: LD_INT 12
23174: PUSH
23175: LD_INT 15
23177: PUSH
23178: LD_INT 16
23180: PUSH
23181: LD_INT 20
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 22
23189: PUSH
23190: LD_INT 23
23192: PUSH
23193: LD_INT 25
23195: PUSH
23196: LD_INT 26
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: LD_INT 101
23217: PUSH
23218: LD_INT 102
23220: PUSH
23221: LD_INT 103
23223: PUSH
23224: LD_INT 105
23226: PUSH
23227: LD_INT 106
23229: PUSH
23230: LD_INT 108
23232: PUSH
23233: LD_INT 112
23235: PUSH
23236: LD_INT 116
23238: PUSH
23239: LD_INT 117
23241: PUSH
23242: LD_INT 118
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: ST_TO_ADDR
23261: GO 25664
23263: LD_INT 8
23265: DOUBLE
23266: EQUAL
23267: IFTRUE 23271
23269: GO 23411
23271: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
23272: LD_ADDR_VAR 0 1
23276: PUSH
23277: LD_INT 2
23279: PUSH
23280: LD_INT 4
23282: PUSH
23283: LD_INT 5
23285: PUSH
23286: LD_INT 6
23288: PUSH
23289: LD_INT 7
23291: PUSH
23292: LD_INT 8
23294: PUSH
23295: LD_INT 11
23297: PUSH
23298: LD_INT 12
23300: PUSH
23301: LD_INT 15
23303: PUSH
23304: LD_INT 16
23306: PUSH
23307: LD_INT 20
23309: PUSH
23310: LD_INT 21
23312: PUSH
23313: LD_INT 22
23315: PUSH
23316: LD_INT 23
23318: PUSH
23319: LD_INT 25
23321: PUSH
23322: LD_INT 26
23324: PUSH
23325: LD_INT 30
23327: PUSH
23328: LD_INT 31
23330: PUSH
23331: LD_INT 32
23333: PUSH
23334: LD_INT 36
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: PUSH
23359: LD_INT 101
23361: PUSH
23362: LD_INT 102
23364: PUSH
23365: LD_INT 103
23367: PUSH
23368: LD_INT 105
23370: PUSH
23371: LD_INT 106
23373: PUSH
23374: LD_INT 108
23376: PUSH
23377: LD_INT 109
23379: PUSH
23380: LD_INT 112
23382: PUSH
23383: LD_INT 116
23385: PUSH
23386: LD_INT 117
23388: PUSH
23389: LD_INT 118
23391: PUSH
23392: EMPTY
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: ST_TO_ADDR
23409: GO 25664
23411: LD_INT 9
23413: DOUBLE
23414: EQUAL
23415: IFTRUE 23419
23417: GO 23567
23419: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_INT 2
23427: PUSH
23428: LD_INT 4
23430: PUSH
23431: LD_INT 5
23433: PUSH
23434: LD_INT 6
23436: PUSH
23437: LD_INT 7
23439: PUSH
23440: LD_INT 8
23442: PUSH
23443: LD_INT 11
23445: PUSH
23446: LD_INT 12
23448: PUSH
23449: LD_INT 15
23451: PUSH
23452: LD_INT 16
23454: PUSH
23455: LD_INT 20
23457: PUSH
23458: LD_INT 21
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_INT 23
23466: PUSH
23467: LD_INT 25
23469: PUSH
23470: LD_INT 26
23472: PUSH
23473: LD_INT 28
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 31
23481: PUSH
23482: LD_INT 32
23484: PUSH
23485: LD_INT 36
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: LIST
23499: LIST
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PUSH
23511: LD_INT 101
23513: PUSH
23514: LD_INT 102
23516: PUSH
23517: LD_INT 103
23519: PUSH
23520: LD_INT 105
23522: PUSH
23523: LD_INT 106
23525: PUSH
23526: LD_INT 108
23528: PUSH
23529: LD_INT 109
23531: PUSH
23532: LD_INT 112
23534: PUSH
23535: LD_INT 114
23537: PUSH
23538: LD_INT 116
23540: PUSH
23541: LD_INT 117
23543: PUSH
23544: LD_INT 118
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: ST_TO_ADDR
23565: GO 25664
23567: LD_INT 10
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23771
23575: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
23576: LD_ADDR_VAR 0 1
23580: PUSH
23581: LD_INT 2
23583: PUSH
23584: LD_INT 4
23586: PUSH
23587: LD_INT 5
23589: PUSH
23590: LD_INT 6
23592: PUSH
23593: LD_INT 7
23595: PUSH
23596: LD_INT 8
23598: PUSH
23599: LD_INT 9
23601: PUSH
23602: LD_INT 10
23604: PUSH
23605: LD_INT 11
23607: PUSH
23608: LD_INT 12
23610: PUSH
23611: LD_INT 13
23613: PUSH
23614: LD_INT 14
23616: PUSH
23617: LD_INT 15
23619: PUSH
23620: LD_INT 16
23622: PUSH
23623: LD_INT 17
23625: PUSH
23626: LD_INT 18
23628: PUSH
23629: LD_INT 19
23631: PUSH
23632: LD_INT 20
23634: PUSH
23635: LD_INT 21
23637: PUSH
23638: LD_INT 22
23640: PUSH
23641: LD_INT 23
23643: PUSH
23644: LD_INT 24
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 26
23652: PUSH
23653: LD_INT 28
23655: PUSH
23656: LD_INT 30
23658: PUSH
23659: LD_INT 31
23661: PUSH
23662: LD_INT 32
23664: PUSH
23665: LD_INT 36
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: LIST
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 101
23701: PUSH
23702: LD_INT 102
23704: PUSH
23705: LD_INT 103
23707: PUSH
23708: LD_INT 104
23710: PUSH
23711: LD_INT 105
23713: PUSH
23714: LD_INT 106
23716: PUSH
23717: LD_INT 107
23719: PUSH
23720: LD_INT 108
23722: PUSH
23723: LD_INT 109
23725: PUSH
23726: LD_INT 110
23728: PUSH
23729: LD_INT 111
23731: PUSH
23732: LD_INT 112
23734: PUSH
23735: LD_INT 114
23737: PUSH
23738: LD_INT 116
23740: PUSH
23741: LD_INT 117
23743: PUSH
23744: LD_INT 118
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: ST_TO_ADDR
23769: GO 25664
23771: LD_INT 11
23773: DOUBLE
23774: EQUAL
23775: IFTRUE 23779
23777: GO 23983
23779: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
23780: LD_ADDR_VAR 0 1
23784: PUSH
23785: LD_INT 2
23787: PUSH
23788: LD_INT 3
23790: PUSH
23791: LD_INT 4
23793: PUSH
23794: LD_INT 5
23796: PUSH
23797: LD_INT 6
23799: PUSH
23800: LD_INT 7
23802: PUSH
23803: LD_INT 8
23805: PUSH
23806: LD_INT 9
23808: PUSH
23809: LD_INT 10
23811: PUSH
23812: LD_INT 11
23814: PUSH
23815: LD_INT 12
23817: PUSH
23818: LD_INT 13
23820: PUSH
23821: LD_INT 14
23823: PUSH
23824: LD_INT 15
23826: PUSH
23827: LD_INT 16
23829: PUSH
23830: LD_INT 17
23832: PUSH
23833: LD_INT 18
23835: PUSH
23836: LD_INT 19
23838: PUSH
23839: LD_INT 20
23841: PUSH
23842: LD_INT 21
23844: PUSH
23845: LD_INT 22
23847: PUSH
23848: LD_INT 23
23850: PUSH
23851: LD_INT 24
23853: PUSH
23854: LD_INT 25
23856: PUSH
23857: LD_INT 26
23859: PUSH
23860: LD_INT 28
23862: PUSH
23863: LD_INT 30
23865: PUSH
23866: LD_INT 31
23868: PUSH
23869: LD_INT 32
23871: PUSH
23872: LD_INT 34
23874: PUSH
23875: LD_INT 36
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: LIST
23882: LIST
23883: LIST
23884: LIST
23885: LIST
23886: LIST
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: LIST
23895: LIST
23896: LIST
23897: LIST
23898: LIST
23899: LIST
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 101
23913: PUSH
23914: LD_INT 102
23916: PUSH
23917: LD_INT 103
23919: PUSH
23920: LD_INT 104
23922: PUSH
23923: LD_INT 105
23925: PUSH
23926: LD_INT 106
23928: PUSH
23929: LD_INT 107
23931: PUSH
23932: LD_INT 108
23934: PUSH
23935: LD_INT 109
23937: PUSH
23938: LD_INT 110
23940: PUSH
23941: LD_INT 111
23943: PUSH
23944: LD_INT 112
23946: PUSH
23947: LD_INT 114
23949: PUSH
23950: LD_INT 116
23952: PUSH
23953: LD_INT 117
23955: PUSH
23956: LD_INT 118
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: ST_TO_ADDR
23981: GO 25664
23983: LD_INT 12
23985: DOUBLE
23986: EQUAL
23987: IFTRUE 23991
23989: GO 24211
23991: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
23992: LD_ADDR_VAR 0 1
23996: PUSH
23997: LD_INT 1
23999: PUSH
24000: LD_INT 2
24002: PUSH
24003: LD_INT 3
24005: PUSH
24006: LD_INT 4
24008: PUSH
24009: LD_INT 5
24011: PUSH
24012: LD_INT 6
24014: PUSH
24015: LD_INT 7
24017: PUSH
24018: LD_INT 8
24020: PUSH
24021: LD_INT 9
24023: PUSH
24024: LD_INT 10
24026: PUSH
24027: LD_INT 11
24029: PUSH
24030: LD_INT 12
24032: PUSH
24033: LD_INT 13
24035: PUSH
24036: LD_INT 14
24038: PUSH
24039: LD_INT 15
24041: PUSH
24042: LD_INT 16
24044: PUSH
24045: LD_INT 17
24047: PUSH
24048: LD_INT 18
24050: PUSH
24051: LD_INT 19
24053: PUSH
24054: LD_INT 20
24056: PUSH
24057: LD_INT 21
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_INT 23
24065: PUSH
24066: LD_INT 24
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: LD_INT 26
24074: PUSH
24075: LD_INT 27
24077: PUSH
24078: LD_INT 28
24080: PUSH
24081: LD_INT 30
24083: PUSH
24084: LD_INT 31
24086: PUSH
24087: LD_INT 32
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 34
24095: PUSH
24096: LD_INT 36
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: LIST
24132: LIST
24133: LIST
24134: PUSH
24135: LD_INT 101
24137: PUSH
24138: LD_INT 102
24140: PUSH
24141: LD_INT 103
24143: PUSH
24144: LD_INT 104
24146: PUSH
24147: LD_INT 105
24149: PUSH
24150: LD_INT 106
24152: PUSH
24153: LD_INT 107
24155: PUSH
24156: LD_INT 108
24158: PUSH
24159: LD_INT 109
24161: PUSH
24162: LD_INT 110
24164: PUSH
24165: LD_INT 111
24167: PUSH
24168: LD_INT 112
24170: PUSH
24171: LD_INT 113
24173: PUSH
24174: LD_INT 114
24176: PUSH
24177: LD_INT 116
24179: PUSH
24180: LD_INT 117
24182: PUSH
24183: LD_INT 118
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: PUSH
24205: EMPTY
24206: LIST
24207: LIST
24208: ST_TO_ADDR
24209: GO 25664
24211: LD_INT 13
24213: DOUBLE
24214: EQUAL
24215: IFTRUE 24219
24217: GO 24427
24219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
24220: LD_ADDR_VAR 0 1
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 3
24233: PUSH
24234: LD_INT 4
24236: PUSH
24237: LD_INT 5
24239: PUSH
24240: LD_INT 8
24242: PUSH
24243: LD_INT 9
24245: PUSH
24246: LD_INT 10
24248: PUSH
24249: LD_INT 11
24251: PUSH
24252: LD_INT 12
24254: PUSH
24255: LD_INT 14
24257: PUSH
24258: LD_INT 15
24260: PUSH
24261: LD_INT 16
24263: PUSH
24264: LD_INT 17
24266: PUSH
24267: LD_INT 18
24269: PUSH
24270: LD_INT 19
24272: PUSH
24273: LD_INT 20
24275: PUSH
24276: LD_INT 21
24278: PUSH
24279: LD_INT 22
24281: PUSH
24282: LD_INT 23
24284: PUSH
24285: LD_INT 24
24287: PUSH
24288: LD_INT 25
24290: PUSH
24291: LD_INT 26
24293: PUSH
24294: LD_INT 27
24296: PUSH
24297: LD_INT 28
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 31
24305: PUSH
24306: LD_INT 32
24308: PUSH
24309: LD_INT 33
24311: PUSH
24312: LD_INT 34
24314: PUSH
24315: LD_INT 36
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: LIST
24330: LIST
24331: LIST
24332: LIST
24333: LIST
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: PUSH
24351: LD_INT 101
24353: PUSH
24354: LD_INT 102
24356: PUSH
24357: LD_INT 103
24359: PUSH
24360: LD_INT 104
24362: PUSH
24363: LD_INT 105
24365: PUSH
24366: LD_INT 106
24368: PUSH
24369: LD_INT 107
24371: PUSH
24372: LD_INT 108
24374: PUSH
24375: LD_INT 109
24377: PUSH
24378: LD_INT 110
24380: PUSH
24381: LD_INT 111
24383: PUSH
24384: LD_INT 112
24386: PUSH
24387: LD_INT 113
24389: PUSH
24390: LD_INT 114
24392: PUSH
24393: LD_INT 116
24395: PUSH
24396: LD_INT 117
24398: PUSH
24399: LD_INT 118
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: ST_TO_ADDR
24425: GO 25664
24427: LD_INT 14
24429: DOUBLE
24430: EQUAL
24431: IFTRUE 24435
24433: GO 24659
24435: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
24436: LD_ADDR_VAR 0 1
24440: PUSH
24441: LD_INT 1
24443: PUSH
24444: LD_INT 2
24446: PUSH
24447: LD_INT 3
24449: PUSH
24450: LD_INT 4
24452: PUSH
24453: LD_INT 5
24455: PUSH
24456: LD_INT 6
24458: PUSH
24459: LD_INT 7
24461: PUSH
24462: LD_INT 8
24464: PUSH
24465: LD_INT 9
24467: PUSH
24468: LD_INT 10
24470: PUSH
24471: LD_INT 11
24473: PUSH
24474: LD_INT 12
24476: PUSH
24477: LD_INT 13
24479: PUSH
24480: LD_INT 14
24482: PUSH
24483: LD_INT 15
24485: PUSH
24486: LD_INT 16
24488: PUSH
24489: LD_INT 17
24491: PUSH
24492: LD_INT 18
24494: PUSH
24495: LD_INT 19
24497: PUSH
24498: LD_INT 20
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 22
24506: PUSH
24507: LD_INT 23
24509: PUSH
24510: LD_INT 24
24512: PUSH
24513: LD_INT 25
24515: PUSH
24516: LD_INT 26
24518: PUSH
24519: LD_INT 27
24521: PUSH
24522: LD_INT 28
24524: PUSH
24525: LD_INT 29
24527: PUSH
24528: LD_INT 30
24530: PUSH
24531: LD_INT 31
24533: PUSH
24534: LD_INT 32
24536: PUSH
24537: LD_INT 33
24539: PUSH
24540: LD_INT 34
24542: PUSH
24543: LD_INT 36
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: PUSH
24583: LD_INT 101
24585: PUSH
24586: LD_INT 102
24588: PUSH
24589: LD_INT 103
24591: PUSH
24592: LD_INT 104
24594: PUSH
24595: LD_INT 105
24597: PUSH
24598: LD_INT 106
24600: PUSH
24601: LD_INT 107
24603: PUSH
24604: LD_INT 108
24606: PUSH
24607: LD_INT 109
24609: PUSH
24610: LD_INT 110
24612: PUSH
24613: LD_INT 111
24615: PUSH
24616: LD_INT 112
24618: PUSH
24619: LD_INT 113
24621: PUSH
24622: LD_INT 114
24624: PUSH
24625: LD_INT 116
24627: PUSH
24628: LD_INT 117
24630: PUSH
24631: LD_INT 118
24633: PUSH
24634: EMPTY
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: PUSH
24653: EMPTY
24654: LIST
24655: LIST
24656: ST_TO_ADDR
24657: GO 25664
24659: LD_INT 15
24661: DOUBLE
24662: EQUAL
24663: IFTRUE 24667
24665: GO 24891
24667: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
24668: LD_ADDR_VAR 0 1
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: LD_INT 2
24678: PUSH
24679: LD_INT 3
24681: PUSH
24682: LD_INT 4
24684: PUSH
24685: LD_INT 5
24687: PUSH
24688: LD_INT 6
24690: PUSH
24691: LD_INT 7
24693: PUSH
24694: LD_INT 8
24696: PUSH
24697: LD_INT 9
24699: PUSH
24700: LD_INT 10
24702: PUSH
24703: LD_INT 11
24705: PUSH
24706: LD_INT 12
24708: PUSH
24709: LD_INT 13
24711: PUSH
24712: LD_INT 14
24714: PUSH
24715: LD_INT 15
24717: PUSH
24718: LD_INT 16
24720: PUSH
24721: LD_INT 17
24723: PUSH
24724: LD_INT 18
24726: PUSH
24727: LD_INT 19
24729: PUSH
24730: LD_INT 20
24732: PUSH
24733: LD_INT 21
24735: PUSH
24736: LD_INT 22
24738: PUSH
24739: LD_INT 23
24741: PUSH
24742: LD_INT 24
24744: PUSH
24745: LD_INT 25
24747: PUSH
24748: LD_INT 26
24750: PUSH
24751: LD_INT 27
24753: PUSH
24754: LD_INT 28
24756: PUSH
24757: LD_INT 29
24759: PUSH
24760: LD_INT 30
24762: PUSH
24763: LD_INT 31
24765: PUSH
24766: LD_INT 32
24768: PUSH
24769: LD_INT 33
24771: PUSH
24772: LD_INT 34
24774: PUSH
24775: LD_INT 36
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: LIST
24792: LIST
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: LIST
24808: LIST
24809: LIST
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 101
24817: PUSH
24818: LD_INT 102
24820: PUSH
24821: LD_INT 103
24823: PUSH
24824: LD_INT 104
24826: PUSH
24827: LD_INT 105
24829: PUSH
24830: LD_INT 106
24832: PUSH
24833: LD_INT 107
24835: PUSH
24836: LD_INT 108
24838: PUSH
24839: LD_INT 109
24841: PUSH
24842: LD_INT 110
24844: PUSH
24845: LD_INT 111
24847: PUSH
24848: LD_INT 112
24850: PUSH
24851: LD_INT 113
24853: PUSH
24854: LD_INT 114
24856: PUSH
24857: LD_INT 116
24859: PUSH
24860: LD_INT 117
24862: PUSH
24863: LD_INT 118
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: ST_TO_ADDR
24889: GO 25664
24891: LD_INT 16
24893: DOUBLE
24894: EQUAL
24895: IFTRUE 24899
24897: GO 25035
24899: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
24900: LD_ADDR_VAR 0 1
24904: PUSH
24905: LD_INT 2
24907: PUSH
24908: LD_INT 4
24910: PUSH
24911: LD_INT 5
24913: PUSH
24914: LD_INT 7
24916: PUSH
24917: LD_INT 11
24919: PUSH
24920: LD_INT 12
24922: PUSH
24923: LD_INT 15
24925: PUSH
24926: LD_INT 16
24928: PUSH
24929: LD_INT 20
24931: PUSH
24932: LD_INT 21
24934: PUSH
24935: LD_INT 22
24937: PUSH
24938: LD_INT 23
24940: PUSH
24941: LD_INT 25
24943: PUSH
24944: LD_INT 26
24946: PUSH
24947: LD_INT 30
24949: PUSH
24950: LD_INT 31
24952: PUSH
24953: LD_INT 32
24955: PUSH
24956: LD_INT 33
24958: PUSH
24959: LD_INT 34
24961: PUSH
24962: EMPTY
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: PUSH
24983: LD_INT 101
24985: PUSH
24986: LD_INT 102
24988: PUSH
24989: LD_INT 103
24991: PUSH
24992: LD_INT 106
24994: PUSH
24995: LD_INT 108
24997: PUSH
24998: LD_INT 112
25000: PUSH
25001: LD_INT 113
25003: PUSH
25004: LD_INT 114
25006: PUSH
25007: LD_INT 116
25009: PUSH
25010: LD_INT 117
25012: PUSH
25013: LD_INT 118
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: LIST
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: ST_TO_ADDR
25033: GO 25664
25035: LD_INT 17
25037: DOUBLE
25038: EQUAL
25039: IFTRUE 25043
25041: GO 25267
25043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
25044: LD_ADDR_VAR 0 1
25048: PUSH
25049: LD_INT 1
25051: PUSH
25052: LD_INT 2
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: LD_INT 4
25060: PUSH
25061: LD_INT 5
25063: PUSH
25064: LD_INT 6
25066: PUSH
25067: LD_INT 7
25069: PUSH
25070: LD_INT 8
25072: PUSH
25073: LD_INT 9
25075: PUSH
25076: LD_INT 10
25078: PUSH
25079: LD_INT 11
25081: PUSH
25082: LD_INT 12
25084: PUSH
25085: LD_INT 13
25087: PUSH
25088: LD_INT 14
25090: PUSH
25091: LD_INT 15
25093: PUSH
25094: LD_INT 16
25096: PUSH
25097: LD_INT 17
25099: PUSH
25100: LD_INT 18
25102: PUSH
25103: LD_INT 19
25105: PUSH
25106: LD_INT 20
25108: PUSH
25109: LD_INT 21
25111: PUSH
25112: LD_INT 22
25114: PUSH
25115: LD_INT 23
25117: PUSH
25118: LD_INT 24
25120: PUSH
25121: LD_INT 25
25123: PUSH
25124: LD_INT 26
25126: PUSH
25127: LD_INT 27
25129: PUSH
25130: LD_INT 28
25132: PUSH
25133: LD_INT 29
25135: PUSH
25136: LD_INT 30
25138: PUSH
25139: LD_INT 31
25141: PUSH
25142: LD_INT 32
25144: PUSH
25145: LD_INT 33
25147: PUSH
25148: LD_INT 34
25150: PUSH
25151: LD_INT 36
25153: PUSH
25154: EMPTY
25155: LIST
25156: LIST
25157: LIST
25158: LIST
25159: LIST
25160: LIST
25161: LIST
25162: LIST
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: LIST
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: PUSH
25191: LD_INT 101
25193: PUSH
25194: LD_INT 102
25196: PUSH
25197: LD_INT 103
25199: PUSH
25200: LD_INT 104
25202: PUSH
25203: LD_INT 105
25205: PUSH
25206: LD_INT 106
25208: PUSH
25209: LD_INT 107
25211: PUSH
25212: LD_INT 108
25214: PUSH
25215: LD_INT 109
25217: PUSH
25218: LD_INT 110
25220: PUSH
25221: LD_INT 111
25223: PUSH
25224: LD_INT 112
25226: PUSH
25227: LD_INT 113
25229: PUSH
25230: LD_INT 114
25232: PUSH
25233: LD_INT 116
25235: PUSH
25236: LD_INT 117
25238: PUSH
25239: LD_INT 118
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: LIST
25247: LIST
25248: LIST
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: ST_TO_ADDR
25265: GO 25664
25267: LD_INT 18
25269: DOUBLE
25270: EQUAL
25271: IFTRUE 25275
25273: GO 25423
25275: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
25276: LD_ADDR_VAR 0 1
25280: PUSH
25281: LD_INT 2
25283: PUSH
25284: LD_INT 4
25286: PUSH
25287: LD_INT 5
25289: PUSH
25290: LD_INT 7
25292: PUSH
25293: LD_INT 11
25295: PUSH
25296: LD_INT 12
25298: PUSH
25299: LD_INT 15
25301: PUSH
25302: LD_INT 16
25304: PUSH
25305: LD_INT 20
25307: PUSH
25308: LD_INT 21
25310: PUSH
25311: LD_INT 22
25313: PUSH
25314: LD_INT 23
25316: PUSH
25317: LD_INT 25
25319: PUSH
25320: LD_INT 26
25322: PUSH
25323: LD_INT 30
25325: PUSH
25326: LD_INT 31
25328: PUSH
25329: LD_INT 32
25331: PUSH
25332: LD_INT 33
25334: PUSH
25335: LD_INT 34
25337: PUSH
25338: LD_INT 35
25340: PUSH
25341: LD_INT 36
25343: PUSH
25344: EMPTY
25345: LIST
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: LIST
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: PUSH
25367: LD_INT 101
25369: PUSH
25370: LD_INT 102
25372: PUSH
25373: LD_INT 103
25375: PUSH
25376: LD_INT 106
25378: PUSH
25379: LD_INT 108
25381: PUSH
25382: LD_INT 112
25384: PUSH
25385: LD_INT 113
25387: PUSH
25388: LD_INT 114
25390: PUSH
25391: LD_INT 115
25393: PUSH
25394: LD_INT 116
25396: PUSH
25397: LD_INT 117
25399: PUSH
25400: LD_INT 118
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: LIST
25407: LIST
25408: LIST
25409: LIST
25410: LIST
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: ST_TO_ADDR
25421: GO 25664
25423: LD_INT 19
25425: DOUBLE
25426: EQUAL
25427: IFTRUE 25431
25429: GO 25663
25431: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
25432: LD_ADDR_VAR 0 1
25436: PUSH
25437: LD_INT 1
25439: PUSH
25440: LD_INT 2
25442: PUSH
25443: LD_INT 3
25445: PUSH
25446: LD_INT 4
25448: PUSH
25449: LD_INT 5
25451: PUSH
25452: LD_INT 6
25454: PUSH
25455: LD_INT 7
25457: PUSH
25458: LD_INT 8
25460: PUSH
25461: LD_INT 9
25463: PUSH
25464: LD_INT 10
25466: PUSH
25467: LD_INT 11
25469: PUSH
25470: LD_INT 12
25472: PUSH
25473: LD_INT 13
25475: PUSH
25476: LD_INT 14
25478: PUSH
25479: LD_INT 15
25481: PUSH
25482: LD_INT 16
25484: PUSH
25485: LD_INT 17
25487: PUSH
25488: LD_INT 18
25490: PUSH
25491: LD_INT 19
25493: PUSH
25494: LD_INT 20
25496: PUSH
25497: LD_INT 21
25499: PUSH
25500: LD_INT 22
25502: PUSH
25503: LD_INT 23
25505: PUSH
25506: LD_INT 24
25508: PUSH
25509: LD_INT 25
25511: PUSH
25512: LD_INT 26
25514: PUSH
25515: LD_INT 27
25517: PUSH
25518: LD_INT 28
25520: PUSH
25521: LD_INT 29
25523: PUSH
25524: LD_INT 30
25526: PUSH
25527: LD_INT 31
25529: PUSH
25530: LD_INT 32
25532: PUSH
25533: LD_INT 33
25535: PUSH
25536: LD_INT 34
25538: PUSH
25539: LD_INT 35
25541: PUSH
25542: LD_INT 36
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: LIST
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: LIST
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: LIST
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: PUSH
25583: LD_INT 101
25585: PUSH
25586: LD_INT 102
25588: PUSH
25589: LD_INT 103
25591: PUSH
25592: LD_INT 104
25594: PUSH
25595: LD_INT 105
25597: PUSH
25598: LD_INT 106
25600: PUSH
25601: LD_INT 107
25603: PUSH
25604: LD_INT 108
25606: PUSH
25607: LD_INT 109
25609: PUSH
25610: LD_INT 110
25612: PUSH
25613: LD_INT 111
25615: PUSH
25616: LD_INT 112
25618: PUSH
25619: LD_INT 113
25621: PUSH
25622: LD_INT 114
25624: PUSH
25625: LD_INT 115
25627: PUSH
25628: LD_INT 116
25630: PUSH
25631: LD_INT 117
25633: PUSH
25634: LD_INT 118
25636: PUSH
25637: EMPTY
25638: LIST
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: LIST
25644: LIST
25645: LIST
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: ST_TO_ADDR
25661: GO 25664
25663: POP
// end else
25664: GO 25895
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
25666: LD_ADDR_VAR 0 1
25670: PUSH
25671: LD_INT 1
25673: PUSH
25674: LD_INT 2
25676: PUSH
25677: LD_INT 3
25679: PUSH
25680: LD_INT 4
25682: PUSH
25683: LD_INT 5
25685: PUSH
25686: LD_INT 6
25688: PUSH
25689: LD_INT 7
25691: PUSH
25692: LD_INT 8
25694: PUSH
25695: LD_INT 9
25697: PUSH
25698: LD_INT 10
25700: PUSH
25701: LD_INT 11
25703: PUSH
25704: LD_INT 12
25706: PUSH
25707: LD_INT 13
25709: PUSH
25710: LD_INT 14
25712: PUSH
25713: LD_INT 15
25715: PUSH
25716: LD_INT 16
25718: PUSH
25719: LD_INT 17
25721: PUSH
25722: LD_INT 18
25724: PUSH
25725: LD_INT 19
25727: PUSH
25728: LD_INT 20
25730: PUSH
25731: LD_INT 21
25733: PUSH
25734: LD_INT 22
25736: PUSH
25737: LD_INT 23
25739: PUSH
25740: LD_INT 24
25742: PUSH
25743: LD_INT 25
25745: PUSH
25746: LD_INT 26
25748: PUSH
25749: LD_INT 27
25751: PUSH
25752: LD_INT 28
25754: PUSH
25755: LD_INT 29
25757: PUSH
25758: LD_INT 30
25760: PUSH
25761: LD_INT 31
25763: PUSH
25764: LD_INT 32
25766: PUSH
25767: LD_INT 33
25769: PUSH
25770: LD_INT 34
25772: PUSH
25773: LD_INT 35
25775: PUSH
25776: LD_INT 36
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: LIST
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: LIST
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: LIST
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: LIST
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: LIST
25810: LIST
25811: LIST
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: PUSH
25817: LD_INT 101
25819: PUSH
25820: LD_INT 102
25822: PUSH
25823: LD_INT 103
25825: PUSH
25826: LD_INT 104
25828: PUSH
25829: LD_INT 105
25831: PUSH
25832: LD_INT 106
25834: PUSH
25835: LD_INT 107
25837: PUSH
25838: LD_INT 108
25840: PUSH
25841: LD_INT 109
25843: PUSH
25844: LD_INT 110
25846: PUSH
25847: LD_INT 111
25849: PUSH
25850: LD_INT 112
25852: PUSH
25853: LD_INT 113
25855: PUSH
25856: LD_INT 114
25858: PUSH
25859: LD_INT 115
25861: PUSH
25862: LD_INT 116
25864: PUSH
25865: LD_INT 117
25867: PUSH
25868: LD_INT 118
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: LIST
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: ST_TO_ADDR
// if result then
25895: LD_VAR 0 1
25899: IFFALSE 26188
// begin normal :=  ;
25901: LD_ADDR_VAR 0 3
25905: PUSH
25906: LD_STRING 
25908: ST_TO_ADDR
// hardcore :=  ;
25909: LD_ADDR_VAR 0 4
25913: PUSH
25914: LD_STRING 
25916: ST_TO_ADDR
// for i = 1 to normalCounter do
25917: LD_ADDR_VAR 0 5
25921: PUSH
25922: DOUBLE
25923: LD_INT 1
25925: DEC
25926: ST_TO_ADDR
25927: LD_EXP 91
25931: PUSH
25932: FOR_TO
25933: IFFALSE 26034
// begin tmp := 0 ;
25935: LD_ADDR_VAR 0 2
25939: PUSH
25940: LD_STRING 0
25942: ST_TO_ADDR
// if result [ 1 ] then
25943: LD_VAR 0 1
25947: PUSH
25948: LD_INT 1
25950: ARRAY
25951: IFFALSE 26016
// if result [ 1 ] [ 1 ] = i then
25953: LD_VAR 0 1
25957: PUSH
25958: LD_INT 1
25960: ARRAY
25961: PUSH
25962: LD_INT 1
25964: ARRAY
25965: PUSH
25966: LD_VAR 0 5
25970: EQUAL
25971: IFFALSE 26016
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_VAR 0 1
25982: PPUSH
25983: LD_INT 1
25985: PPUSH
25986: LD_VAR 0 1
25990: PUSH
25991: LD_INT 1
25993: ARRAY
25994: PPUSH
25995: LD_INT 1
25997: PPUSH
25998: CALL_OW 3
26002: PPUSH
26003: CALL_OW 1
26007: ST_TO_ADDR
// tmp := 1 ;
26008: LD_ADDR_VAR 0 2
26012: PUSH
26013: LD_STRING 1
26015: ST_TO_ADDR
// end ; normal := normal & tmp ;
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_VAR 0 3
26025: PUSH
26026: LD_VAR 0 2
26030: STR
26031: ST_TO_ADDR
// end ;
26032: GO 25932
26034: POP
26035: POP
// for i = 1 to hardcoreCounter do
26036: LD_ADDR_VAR 0 5
26040: PUSH
26041: DOUBLE
26042: LD_INT 1
26044: DEC
26045: ST_TO_ADDR
26046: LD_EXP 92
26050: PUSH
26051: FOR_TO
26052: IFFALSE 26157
// begin tmp := 0 ;
26054: LD_ADDR_VAR 0 2
26058: PUSH
26059: LD_STRING 0
26061: ST_TO_ADDR
// if result [ 2 ] then
26062: LD_VAR 0 1
26066: PUSH
26067: LD_INT 2
26069: ARRAY
26070: IFFALSE 26139
// if result [ 2 ] [ 1 ] = 100 + i then
26072: LD_VAR 0 1
26076: PUSH
26077: LD_INT 2
26079: ARRAY
26080: PUSH
26081: LD_INT 1
26083: ARRAY
26084: PUSH
26085: LD_INT 100
26087: PUSH
26088: LD_VAR 0 5
26092: PLUS
26093: EQUAL
26094: IFFALSE 26139
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
26096: LD_ADDR_VAR 0 1
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: LD_INT 2
26108: PPUSH
26109: LD_VAR 0 1
26113: PUSH
26114: LD_INT 2
26116: ARRAY
26117: PPUSH
26118: LD_INT 1
26120: PPUSH
26121: CALL_OW 3
26125: PPUSH
26126: CALL_OW 1
26130: ST_TO_ADDR
// tmp := 1 ;
26131: LD_ADDR_VAR 0 2
26135: PUSH
26136: LD_STRING 1
26138: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
26139: LD_ADDR_VAR 0 4
26143: PUSH
26144: LD_VAR 0 4
26148: PUSH
26149: LD_VAR 0 2
26153: STR
26154: ST_TO_ADDR
// end ;
26155: GO 26051
26157: POP
26158: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
26159: LD_STRING getStreamItemsFromMission("
26161: PUSH
26162: LD_VAR 0 3
26166: STR
26167: PUSH
26168: LD_STRING ","
26170: STR
26171: PUSH
26172: LD_VAR 0 4
26176: STR
26177: PUSH
26178: LD_STRING ")
26180: STR
26181: PPUSH
26182: CALL_OW 559
// end else
26186: GO 26195
// ToLua ( getStreamItemsFromMission("","") ) ;
26188: LD_STRING getStreamItemsFromMission("","")
26190: PPUSH
26191: CALL_OW 559
// end ;
26195: LD_VAR 0 1
26199: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
26200: LD_EXP 90
26204: PUSH
26205: LD_EXP 95
26209: AND
26210: IFFALSE 26334
26212: GO 26214
26214: DISABLE
26215: LD_INT 0
26217: PPUSH
26218: PPUSH
// begin enable ;
26219: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
26220: LD_ADDR_VAR 0 2
26224: PUSH
26225: LD_INT 22
26227: PUSH
26228: LD_OWVAR 2
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: PUSH
26237: LD_INT 2
26239: PUSH
26240: LD_INT 34
26242: PUSH
26243: LD_INT 7
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 34
26252: PUSH
26253: LD_INT 45
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: LD_INT 34
26262: PUSH
26263: LD_INT 28
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 34
26272: PUSH
26273: LD_INT 47
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PPUSH
26291: CALL_OW 69
26295: ST_TO_ADDR
// if not tmp then
26296: LD_VAR 0 2
26300: NOT
26301: IFFALSE 26305
// exit ;
26303: GO 26334
// for i in tmp do
26305: LD_ADDR_VAR 0 1
26309: PUSH
26310: LD_VAR 0 2
26314: PUSH
26315: FOR_IN
26316: IFFALSE 26332
// begin SetLives ( i , 0 ) ;
26318: LD_VAR 0 1
26322: PPUSH
26323: LD_INT 0
26325: PPUSH
26326: CALL_OW 234
// end ;
26330: GO 26315
26332: POP
26333: POP
// end ;
26334: PPOPN 2
26336: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
26337: LD_EXP 90
26341: PUSH
26342: LD_EXP 96
26346: AND
26347: IFFALSE 26431
26349: GO 26351
26351: DISABLE
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
// begin enable ;
26356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
26357: LD_ADDR_VAR 0 2
26361: PUSH
26362: LD_INT 22
26364: PUSH
26365: LD_OWVAR 2
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 32
26376: PUSH
26377: LD_INT 3
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PPUSH
26388: CALL_OW 69
26392: ST_TO_ADDR
// if not tmp then
26393: LD_VAR 0 2
26397: NOT
26398: IFFALSE 26402
// exit ;
26400: GO 26431
// for i in tmp do
26402: LD_ADDR_VAR 0 1
26406: PUSH
26407: LD_VAR 0 2
26411: PUSH
26412: FOR_IN
26413: IFFALSE 26429
// begin SetLives ( i , 0 ) ;
26415: LD_VAR 0 1
26419: PPUSH
26420: LD_INT 0
26422: PPUSH
26423: CALL_OW 234
// end ;
26427: GO 26412
26429: POP
26430: POP
// end ;
26431: PPOPN 2
26433: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
26434: LD_EXP 90
26438: PUSH
26439: LD_EXP 93
26443: AND
26444: IFFALSE 26537
26446: GO 26448
26448: DISABLE
26449: LD_INT 0
26451: PPUSH
// begin enable ;
26452: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
26453: LD_ADDR_VAR 0 1
26457: PUSH
26458: LD_INT 22
26460: PUSH
26461: LD_OWVAR 2
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: LD_INT 25
26475: PUSH
26476: LD_INT 5
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 25
26485: PUSH
26486: LD_INT 9
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 25
26495: PUSH
26496: LD_INT 8
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PPUSH
26513: CALL_OW 69
26517: PUSH
26518: FOR_IN
26519: IFFALSE 26535
// begin SetClass ( i , 1 ) ;
26521: LD_VAR 0 1
26525: PPUSH
26526: LD_INT 1
26528: PPUSH
26529: CALL_OW 336
// end ;
26533: GO 26518
26535: POP
26536: POP
// end ;
26537: PPOPN 1
26539: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
26540: LD_EXP 90
26544: PUSH
26545: LD_EXP 94
26549: AND
26550: PUSH
26551: LD_OWVAR 65
26555: PUSH
26556: LD_INT 7
26558: LESS
26559: AND
26560: IFFALSE 26574
26562: GO 26564
26564: DISABLE
// begin enable ;
26565: ENABLE
// game_speed := 7 ;
26566: LD_ADDR_OWVAR 65
26570: PUSH
26571: LD_INT 7
26573: ST_TO_ADDR
// end ;
26574: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
26575: LD_EXP 90
26579: PUSH
26580: LD_EXP 97
26584: AND
26585: IFFALSE 26787
26587: GO 26589
26589: DISABLE
26590: LD_INT 0
26592: PPUSH
26593: PPUSH
26594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26595: LD_ADDR_VAR 0 3
26599: PUSH
26600: LD_INT 81
26602: PUSH
26603: LD_OWVAR 2
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 21
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: ST_TO_ADDR
// if not tmp then
26631: LD_VAR 0 3
26635: NOT
26636: IFFALSE 26640
// exit ;
26638: GO 26787
// if tmp > 5 then
26640: LD_VAR 0 3
26644: PUSH
26645: LD_INT 5
26647: GREATER
26648: IFFALSE 26660
// k := 5 else
26650: LD_ADDR_VAR 0 2
26654: PUSH
26655: LD_INT 5
26657: ST_TO_ADDR
26658: GO 26670
// k := tmp ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_VAR 0 3
26669: ST_TO_ADDR
// for i := 1 to k do
26670: LD_ADDR_VAR 0 1
26674: PUSH
26675: DOUBLE
26676: LD_INT 1
26678: DEC
26679: ST_TO_ADDR
26680: LD_VAR 0 2
26684: PUSH
26685: FOR_TO
26686: IFFALSE 26785
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26688: LD_VAR 0 3
26692: PUSH
26693: LD_VAR 0 1
26697: ARRAY
26698: PPUSH
26699: LD_VAR 0 1
26703: PUSH
26704: LD_INT 4
26706: MOD
26707: PUSH
26708: LD_INT 1
26710: PLUS
26711: PPUSH
26712: CALL_OW 259
26716: PUSH
26717: LD_INT 10
26719: LESS
26720: IFFALSE 26783
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26722: LD_VAR 0 3
26726: PUSH
26727: LD_VAR 0 1
26731: ARRAY
26732: PPUSH
26733: LD_VAR 0 1
26737: PUSH
26738: LD_INT 4
26740: MOD
26741: PUSH
26742: LD_INT 1
26744: PLUS
26745: PPUSH
26746: LD_VAR 0 3
26750: PUSH
26751: LD_VAR 0 1
26755: ARRAY
26756: PPUSH
26757: LD_VAR 0 1
26761: PUSH
26762: LD_INT 4
26764: MOD
26765: PUSH
26766: LD_INT 1
26768: PLUS
26769: PPUSH
26770: CALL_OW 259
26774: PUSH
26775: LD_INT 1
26777: PLUS
26778: PPUSH
26779: CALL_OW 237
26783: GO 26685
26785: POP
26786: POP
// end ;
26787: PPOPN 3
26789: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26790: LD_EXP 90
26794: PUSH
26795: LD_EXP 98
26799: AND
26800: IFFALSE 26820
26802: GO 26804
26804: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26805: LD_INT 4
26807: PPUSH
26808: LD_OWVAR 2
26812: PPUSH
26813: LD_INT 0
26815: PPUSH
26816: CALL_OW 324
26820: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26821: LD_EXP 90
26825: PUSH
26826: LD_EXP 127
26830: AND
26831: IFFALSE 26851
26833: GO 26835
26835: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26836: LD_INT 19
26838: PPUSH
26839: LD_OWVAR 2
26843: PPUSH
26844: LD_INT 0
26846: PPUSH
26847: CALL_OW 324
26851: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26852: LD_EXP 90
26856: PUSH
26857: LD_EXP 99
26861: AND
26862: IFFALSE 26964
26864: GO 26866
26866: DISABLE
26867: LD_INT 0
26869: PPUSH
26870: PPUSH
// begin enable ;
26871: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26872: LD_ADDR_VAR 0 2
26876: PUSH
26877: LD_INT 22
26879: PUSH
26880: LD_OWVAR 2
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 2
26891: PUSH
26892: LD_INT 34
26894: PUSH
26895: LD_INT 11
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PUSH
26902: LD_INT 34
26904: PUSH
26905: LD_INT 30
26907: PUSH
26908: EMPTY
26909: LIST
26910: LIST
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PPUSH
26921: CALL_OW 69
26925: ST_TO_ADDR
// if not tmp then
26926: LD_VAR 0 2
26930: NOT
26931: IFFALSE 26935
// exit ;
26933: GO 26964
// for i in tmp do
26935: LD_ADDR_VAR 0 1
26939: PUSH
26940: LD_VAR 0 2
26944: PUSH
26945: FOR_IN
26946: IFFALSE 26962
// begin SetLives ( i , 0 ) ;
26948: LD_VAR 0 1
26952: PPUSH
26953: LD_INT 0
26955: PPUSH
26956: CALL_OW 234
// end ;
26960: GO 26945
26962: POP
26963: POP
// end ;
26964: PPOPN 2
26966: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26967: LD_EXP 90
26971: PUSH
26972: LD_EXP 100
26976: AND
26977: IFFALSE 26997
26979: GO 26981
26981: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26982: LD_INT 32
26984: PPUSH
26985: LD_OWVAR 2
26989: PPUSH
26990: LD_INT 0
26992: PPUSH
26993: CALL_OW 324
26997: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26998: LD_EXP 90
27002: PUSH
27003: LD_EXP 101
27007: AND
27008: IFFALSE 27189
27010: GO 27012
27012: DISABLE
27013: LD_INT 0
27015: PPUSH
27016: PPUSH
27017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
27018: LD_ADDR_VAR 0 2
27022: PUSH
27023: LD_INT 22
27025: PUSH
27026: LD_OWVAR 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 33
27037: PUSH
27038: LD_INT 3
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: ST_TO_ADDR
// if not tmp then
27054: LD_VAR 0 2
27058: NOT
27059: IFFALSE 27063
// exit ;
27061: GO 27189
// side := 0 ;
27063: LD_ADDR_VAR 0 3
27067: PUSH
27068: LD_INT 0
27070: ST_TO_ADDR
// for i := 1 to 8 do
27071: LD_ADDR_VAR 0 1
27075: PUSH
27076: DOUBLE
27077: LD_INT 1
27079: DEC
27080: ST_TO_ADDR
27081: LD_INT 8
27083: PUSH
27084: FOR_TO
27085: IFFALSE 27133
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
27087: LD_OWVAR 2
27091: PUSH
27092: LD_VAR 0 1
27096: NONEQUAL
27097: PUSH
27098: LD_OWVAR 2
27102: PPUSH
27103: LD_VAR 0 1
27107: PPUSH
27108: CALL_OW 81
27112: PUSH
27113: LD_INT 2
27115: EQUAL
27116: AND
27117: IFFALSE 27131
// begin side := i ;
27119: LD_ADDR_VAR 0 3
27123: PUSH
27124: LD_VAR 0 1
27128: ST_TO_ADDR
// break ;
27129: GO 27133
// end ;
27131: GO 27084
27133: POP
27134: POP
// if not side then
27135: LD_VAR 0 3
27139: NOT
27140: IFFALSE 27144
// exit ;
27142: GO 27189
// for i := 1 to tmp do
27144: LD_ADDR_VAR 0 1
27148: PUSH
27149: DOUBLE
27150: LD_INT 1
27152: DEC
27153: ST_TO_ADDR
27154: LD_VAR 0 2
27158: PUSH
27159: FOR_TO
27160: IFFALSE 27187
// if Prob ( 60 ) then
27162: LD_INT 60
27164: PPUSH
27165: CALL_OW 13
27169: IFFALSE 27185
// SetSide ( i , side ) ;
27171: LD_VAR 0 1
27175: PPUSH
27176: LD_VAR 0 3
27180: PPUSH
27181: CALL_OW 235
27185: GO 27159
27187: POP
27188: POP
// end ;
27189: PPOPN 3
27191: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
27192: LD_EXP 90
27196: PUSH
27197: LD_EXP 103
27201: AND
27202: IFFALSE 27321
27204: GO 27206
27206: DISABLE
27207: LD_INT 0
27209: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
27210: LD_ADDR_VAR 0 1
27214: PUSH
27215: LD_INT 22
27217: PUSH
27218: LD_OWVAR 2
27222: PUSH
27223: EMPTY
27224: LIST
27225: LIST
27226: PUSH
27227: LD_INT 21
27229: PUSH
27230: LD_INT 1
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: PUSH
27237: LD_INT 3
27239: PUSH
27240: LD_INT 23
27242: PUSH
27243: LD_INT 0
27245: PUSH
27246: EMPTY
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: LIST
27258: PPUSH
27259: CALL_OW 69
27263: PUSH
27264: FOR_IN
27265: IFFALSE 27319
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 257
27276: PUSH
27277: LD_INT 1
27279: PUSH
27280: LD_INT 2
27282: PUSH
27283: LD_INT 3
27285: PUSH
27286: LD_INT 4
27288: PUSH
27289: EMPTY
27290: LIST
27291: LIST
27292: LIST
27293: LIST
27294: IN
27295: IFFALSE 27317
// SetClass ( un , rand ( 1 , 4 ) ) ;
27297: LD_VAR 0 1
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: LD_INT 4
27307: PPUSH
27308: CALL_OW 12
27312: PPUSH
27313: CALL_OW 336
27317: GO 27264
27319: POP
27320: POP
// end ;
27321: PPOPN 1
27323: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
27324: LD_EXP 90
27328: PUSH
27329: LD_EXP 102
27333: AND
27334: IFFALSE 27413
27336: GO 27338
27338: DISABLE
27339: LD_INT 0
27341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27342: LD_ADDR_VAR 0 1
27346: PUSH
27347: LD_INT 22
27349: PUSH
27350: LD_OWVAR 2
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: PUSH
27359: LD_INT 21
27361: PUSH
27362: LD_INT 3
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PPUSH
27373: CALL_OW 69
27377: ST_TO_ADDR
// if not tmp then
27378: LD_VAR 0 1
27382: NOT
27383: IFFALSE 27387
// exit ;
27385: GO 27413
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
27387: LD_VAR 0 1
27391: PUSH
27392: LD_INT 1
27394: PPUSH
27395: LD_VAR 0 1
27399: PPUSH
27400: CALL_OW 12
27404: ARRAY
27405: PPUSH
27406: LD_INT 100
27408: PPUSH
27409: CALL_OW 234
// end ;
27413: PPOPN 1
27415: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
27416: LD_EXP 90
27420: PUSH
27421: LD_EXP 104
27425: AND
27426: IFFALSE 27524
27428: GO 27430
27430: DISABLE
27431: LD_INT 0
27433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27434: LD_ADDR_VAR 0 1
27438: PUSH
27439: LD_INT 22
27441: PUSH
27442: LD_OWVAR 2
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: PUSH
27451: LD_INT 21
27453: PUSH
27454: LD_INT 1
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PPUSH
27465: CALL_OW 69
27469: ST_TO_ADDR
// if not tmp then
27470: LD_VAR 0 1
27474: NOT
27475: IFFALSE 27479
// exit ;
27477: GO 27524
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
27479: LD_VAR 0 1
27483: PUSH
27484: LD_INT 1
27486: PPUSH
27487: LD_VAR 0 1
27491: PPUSH
27492: CALL_OW 12
27496: ARRAY
27497: PPUSH
27498: LD_INT 1
27500: PPUSH
27501: LD_INT 4
27503: PPUSH
27504: CALL_OW 12
27508: PPUSH
27509: LD_INT 3000
27511: PPUSH
27512: LD_INT 9000
27514: PPUSH
27515: CALL_OW 12
27519: PPUSH
27520: CALL_OW 492
// end ;
27524: PPOPN 1
27526: END
// every 0 0$1 trigger StreamModeActive and sDepot do
27527: LD_EXP 90
27531: PUSH
27532: LD_EXP 105
27536: AND
27537: IFFALSE 27557
27539: GO 27541
27541: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
27542: LD_INT 1
27544: PPUSH
27545: LD_OWVAR 2
27549: PPUSH
27550: LD_INT 0
27552: PPUSH
27553: CALL_OW 324
27557: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
27558: LD_EXP 90
27562: PUSH
27563: LD_EXP 106
27567: AND
27568: IFFALSE 27651
27570: GO 27572
27572: DISABLE
27573: LD_INT 0
27575: PPUSH
27576: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
27577: LD_ADDR_VAR 0 2
27581: PUSH
27582: LD_INT 22
27584: PUSH
27585: LD_OWVAR 2
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_INT 21
27596: PUSH
27597: LD_INT 3
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PPUSH
27608: CALL_OW 69
27612: ST_TO_ADDR
// if not tmp then
27613: LD_VAR 0 2
27617: NOT
27618: IFFALSE 27622
// exit ;
27620: GO 27651
// for i in tmp do
27622: LD_ADDR_VAR 0 1
27626: PUSH
27627: LD_VAR 0 2
27631: PUSH
27632: FOR_IN
27633: IFFALSE 27649
// SetBLevel ( i , 10 ) ;
27635: LD_VAR 0 1
27639: PPUSH
27640: LD_INT 10
27642: PPUSH
27643: CALL_OW 241
27647: GO 27632
27649: POP
27650: POP
// end ;
27651: PPOPN 2
27653: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
27654: LD_EXP 90
27658: PUSH
27659: LD_EXP 107
27663: AND
27664: IFFALSE 27775
27666: GO 27668
27668: DISABLE
27669: LD_INT 0
27671: PPUSH
27672: PPUSH
27673: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27674: LD_ADDR_VAR 0 3
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_OWVAR 2
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 25
27693: PUSH
27694: LD_INT 1
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PPUSH
27705: CALL_OW 69
27709: ST_TO_ADDR
// if not tmp then
27710: LD_VAR 0 3
27714: NOT
27715: IFFALSE 27719
// exit ;
27717: GO 27775
// un := tmp [ rand ( 1 , tmp ) ] ;
27719: LD_ADDR_VAR 0 2
27723: PUSH
27724: LD_VAR 0 3
27728: PUSH
27729: LD_INT 1
27731: PPUSH
27732: LD_VAR 0 3
27736: PPUSH
27737: CALL_OW 12
27741: ARRAY
27742: ST_TO_ADDR
// if Crawls ( un ) then
27743: LD_VAR 0 2
27747: PPUSH
27748: CALL_OW 318
27752: IFFALSE 27763
// ComWalk ( un ) ;
27754: LD_VAR 0 2
27758: PPUSH
27759: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27763: LD_VAR 0 2
27767: PPUSH
27768: LD_INT 5
27770: PPUSH
27771: CALL_OW 336
// end ;
27775: PPOPN 3
27777: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27778: LD_EXP 90
27782: PUSH
27783: LD_EXP 108
27787: AND
27788: PUSH
27789: LD_OWVAR 67
27793: PUSH
27794: LD_INT 4
27796: LESS
27797: AND
27798: IFFALSE 27817
27800: GO 27802
27802: DISABLE
// begin Difficulty := Difficulty + 1 ;
27803: LD_ADDR_OWVAR 67
27807: PUSH
27808: LD_OWVAR 67
27812: PUSH
27813: LD_INT 1
27815: PLUS
27816: ST_TO_ADDR
// end ;
27817: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27818: LD_EXP 90
27822: PUSH
27823: LD_EXP 109
27827: AND
27828: IFFALSE 27931
27830: GO 27832
27832: DISABLE
27833: LD_INT 0
27835: PPUSH
// begin for i := 1 to 5 do
27836: LD_ADDR_VAR 0 1
27840: PUSH
27841: DOUBLE
27842: LD_INT 1
27844: DEC
27845: ST_TO_ADDR
27846: LD_INT 5
27848: PUSH
27849: FOR_TO
27850: IFFALSE 27929
// begin uc_nation := nation_nature ;
27852: LD_ADDR_OWVAR 21
27856: PUSH
27857: LD_INT 0
27859: ST_TO_ADDR
// uc_side := 0 ;
27860: LD_ADDR_OWVAR 20
27864: PUSH
27865: LD_INT 0
27867: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27868: LD_ADDR_OWVAR 29
27872: PUSH
27873: LD_INT 12
27875: PUSH
27876: LD_INT 12
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: ST_TO_ADDR
// hc_agressivity := 20 ;
27883: LD_ADDR_OWVAR 35
27887: PUSH
27888: LD_INT 20
27890: ST_TO_ADDR
// hc_class := class_tiger ;
27891: LD_ADDR_OWVAR 28
27895: PUSH
27896: LD_INT 14
27898: ST_TO_ADDR
// hc_gallery :=  ;
27899: LD_ADDR_OWVAR 33
27903: PUSH
27904: LD_STRING 
27906: ST_TO_ADDR
// hc_name :=  ;
27907: LD_ADDR_OWVAR 26
27911: PUSH
27912: LD_STRING 
27914: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27915: CALL_OW 44
27919: PPUSH
27920: LD_INT 0
27922: PPUSH
27923: CALL_OW 51
// end ;
27927: GO 27849
27929: POP
27930: POP
// end ;
27931: PPOPN 1
27933: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27934: LD_EXP 90
27938: PUSH
27939: LD_EXP 110
27943: AND
27944: IFFALSE 27953
27946: GO 27948
27948: DISABLE
// StreamSibBomb ;
27949: CALL 27954 0 0
27953: END
// export function StreamSibBomb ; var i , x , y ; begin
27954: LD_INT 0
27956: PPUSH
27957: PPUSH
27958: PPUSH
27959: PPUSH
// result := false ;
27960: LD_ADDR_VAR 0 1
27964: PUSH
27965: LD_INT 0
27967: ST_TO_ADDR
// for i := 1 to 16 do
27968: LD_ADDR_VAR 0 2
27972: PUSH
27973: DOUBLE
27974: LD_INT 1
27976: DEC
27977: ST_TO_ADDR
27978: LD_INT 16
27980: PUSH
27981: FOR_TO
27982: IFFALSE 28181
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27984: LD_ADDR_VAR 0 3
27988: PUSH
27989: LD_INT 10
27991: PUSH
27992: LD_INT 20
27994: PUSH
27995: LD_INT 30
27997: PUSH
27998: LD_INT 40
28000: PUSH
28001: LD_INT 50
28003: PUSH
28004: LD_INT 60
28006: PUSH
28007: LD_INT 70
28009: PUSH
28010: LD_INT 80
28012: PUSH
28013: LD_INT 90
28015: PUSH
28016: LD_INT 100
28018: PUSH
28019: LD_INT 110
28021: PUSH
28022: LD_INT 120
28024: PUSH
28025: LD_INT 130
28027: PUSH
28028: LD_INT 140
28030: PUSH
28031: LD_INT 150
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 1
28053: PPUSH
28054: LD_INT 15
28056: PPUSH
28057: CALL_OW 12
28061: ARRAY
28062: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
28063: LD_ADDR_VAR 0 4
28067: PUSH
28068: LD_INT 10
28070: PUSH
28071: LD_INT 20
28073: PUSH
28074: LD_INT 30
28076: PUSH
28077: LD_INT 40
28079: PUSH
28080: LD_INT 50
28082: PUSH
28083: LD_INT 60
28085: PUSH
28086: LD_INT 70
28088: PUSH
28089: LD_INT 80
28091: PUSH
28092: LD_INT 90
28094: PUSH
28095: LD_INT 100
28097: PUSH
28098: LD_INT 110
28100: PUSH
28101: LD_INT 120
28103: PUSH
28104: LD_INT 130
28106: PUSH
28107: LD_INT 140
28109: PUSH
28110: LD_INT 150
28112: PUSH
28113: EMPTY
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: PUSH
28130: LD_INT 1
28132: PPUSH
28133: LD_INT 15
28135: PPUSH
28136: CALL_OW 12
28140: ARRAY
28141: ST_TO_ADDR
// if ValidHex ( x , y ) then
28142: LD_VAR 0 3
28146: PPUSH
28147: LD_VAR 0 4
28151: PPUSH
28152: CALL_OW 488
28156: IFFALSE 28179
// begin result := [ x , y ] ;
28158: LD_ADDR_VAR 0 1
28162: PUSH
28163: LD_VAR 0 3
28167: PUSH
28168: LD_VAR 0 4
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: ST_TO_ADDR
// break ;
28177: GO 28181
// end ; end ;
28179: GO 27981
28181: POP
28182: POP
// if result then
28183: LD_VAR 0 1
28187: IFFALSE 28247
// begin ToLua ( playSibBomb() ) ;
28189: LD_STRING playSibBomb()
28191: PPUSH
28192: CALL_OW 559
// wait ( 0 0$14 ) ;
28196: LD_INT 490
28198: PPUSH
28199: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
28203: LD_VAR 0 1
28207: PUSH
28208: LD_INT 1
28210: ARRAY
28211: PPUSH
28212: LD_VAR 0 1
28216: PUSH
28217: LD_INT 2
28219: ARRAY
28220: PPUSH
28221: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
28225: LD_VAR 0 1
28229: PUSH
28230: LD_INT 1
28232: ARRAY
28233: PPUSH
28234: LD_VAR 0 1
28238: PUSH
28239: LD_INT 2
28241: ARRAY
28242: PPUSH
28243: CALL_OW 429
// end ; end ;
28247: LD_VAR 0 1
28251: RET
// every 0 0$1 trigger StreamModeActive and sReset do
28252: LD_EXP 90
28256: PUSH
28257: LD_EXP 112
28261: AND
28262: IFFALSE 28274
28264: GO 28266
28266: DISABLE
// YouLost (  ) ;
28267: LD_STRING 
28269: PPUSH
28270: CALL_OW 104
28274: END
// every 0 0$1 trigger StreamModeActive and sFog do
28275: LD_EXP 90
28279: PUSH
28280: LD_EXP 111
28284: AND
28285: IFFALSE 28299
28287: GO 28289
28289: DISABLE
// FogOff ( your_side ) ;
28290: LD_OWVAR 2
28294: PPUSH
28295: CALL_OW 344
28299: END
// every 0 0$1 trigger StreamModeActive and sSun do
28300: LD_EXP 90
28304: PUSH
28305: LD_EXP 113
28309: AND
28310: IFFALSE 28338
28312: GO 28314
28314: DISABLE
// begin solar_recharge_percent := 0 ;
28315: LD_ADDR_OWVAR 79
28319: PUSH
28320: LD_INT 0
28322: ST_TO_ADDR
// wait ( 5 5$00 ) ;
28323: LD_INT 10500
28325: PPUSH
28326: CALL_OW 67
// solar_recharge_percent := 100 ;
28330: LD_ADDR_OWVAR 79
28334: PUSH
28335: LD_INT 100
28337: ST_TO_ADDR
// end ;
28338: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
28339: LD_EXP 90
28343: PUSH
28344: LD_EXP 114
28348: AND
28349: IFFALSE 28588
28351: GO 28353
28353: DISABLE
28354: LD_INT 0
28356: PPUSH
28357: PPUSH
28358: PPUSH
// begin tmp := [ ] ;
28359: LD_ADDR_VAR 0 3
28363: PUSH
28364: EMPTY
28365: ST_TO_ADDR
// for i := 1 to 6 do
28366: LD_ADDR_VAR 0 1
28370: PUSH
28371: DOUBLE
28372: LD_INT 1
28374: DEC
28375: ST_TO_ADDR
28376: LD_INT 6
28378: PUSH
28379: FOR_TO
28380: IFFALSE 28485
// begin uc_nation := nation_nature ;
28382: LD_ADDR_OWVAR 21
28386: PUSH
28387: LD_INT 0
28389: ST_TO_ADDR
// uc_side := 0 ;
28390: LD_ADDR_OWVAR 20
28394: PUSH
28395: LD_INT 0
28397: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
28398: LD_ADDR_OWVAR 29
28402: PUSH
28403: LD_INT 12
28405: PUSH
28406: LD_INT 12
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: ST_TO_ADDR
// hc_agressivity := 20 ;
28413: LD_ADDR_OWVAR 35
28417: PUSH
28418: LD_INT 20
28420: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
28421: LD_ADDR_OWVAR 28
28425: PUSH
28426: LD_INT 17
28428: ST_TO_ADDR
// hc_gallery :=  ;
28429: LD_ADDR_OWVAR 33
28433: PUSH
28434: LD_STRING 
28436: ST_TO_ADDR
// hc_name :=  ;
28437: LD_ADDR_OWVAR 26
28441: PUSH
28442: LD_STRING 
28444: ST_TO_ADDR
// un := CreateHuman ;
28445: LD_ADDR_VAR 0 2
28449: PUSH
28450: CALL_OW 44
28454: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
28455: LD_VAR 0 2
28459: PPUSH
28460: LD_INT 1
28462: PPUSH
28463: CALL_OW 51
// tmp := tmp ^ un ;
28467: LD_ADDR_VAR 0 3
28471: PUSH
28472: LD_VAR 0 3
28476: PUSH
28477: LD_VAR 0 2
28481: ADD
28482: ST_TO_ADDR
// end ;
28483: GO 28379
28485: POP
28486: POP
// repeat wait ( 0 0$1 ) ;
28487: LD_INT 35
28489: PPUSH
28490: CALL_OW 67
// for un in tmp do
28494: LD_ADDR_VAR 0 2
28498: PUSH
28499: LD_VAR 0 3
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28579
// begin if IsDead ( un ) then
28507: LD_VAR 0 2
28511: PPUSH
28512: CALL_OW 301
28516: IFFALSE 28536
// begin tmp := tmp diff un ;
28518: LD_ADDR_VAR 0 3
28522: PUSH
28523: LD_VAR 0 3
28527: PUSH
28528: LD_VAR 0 2
28532: DIFF
28533: ST_TO_ADDR
// continue ;
28534: GO 28504
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
28536: LD_VAR 0 2
28540: PPUSH
28541: LD_INT 3
28543: PUSH
28544: LD_INT 22
28546: PUSH
28547: LD_INT 0
28549: PUSH
28550: EMPTY
28551: LIST
28552: LIST
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PPUSH
28558: CALL_OW 69
28562: PPUSH
28563: LD_VAR 0 2
28567: PPUSH
28568: CALL_OW 74
28572: PPUSH
28573: CALL_OW 115
// end ;
28577: GO 28504
28579: POP
28580: POP
// until not tmp ;
28581: LD_VAR 0 3
28585: NOT
28586: IFFALSE 28487
// end ;
28588: PPOPN 3
28590: END
// every 0 0$1 trigger StreamModeActive and sTroll do
28591: LD_EXP 90
28595: PUSH
28596: LD_EXP 115
28600: AND
28601: IFFALSE 28655
28603: GO 28605
28605: DISABLE
// begin ToLua ( displayTroll(); ) ;
28606: LD_STRING displayTroll();
28608: PPUSH
28609: CALL_OW 559
// wait ( 3 3$00 ) ;
28613: LD_INT 6300
28615: PPUSH
28616: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28620: LD_STRING hideTroll();
28622: PPUSH
28623: CALL_OW 559
// wait ( 1 1$00 ) ;
28627: LD_INT 2100
28629: PPUSH
28630: CALL_OW 67
// ToLua ( displayTroll(); ) ;
28634: LD_STRING displayTroll();
28636: PPUSH
28637: CALL_OW 559
// wait ( 1 1$00 ) ;
28641: LD_INT 2100
28643: PPUSH
28644: CALL_OW 67
// ToLua ( hideTroll(); ) ;
28648: LD_STRING hideTroll();
28650: PPUSH
28651: CALL_OW 559
// end ;
28655: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
28656: LD_EXP 90
28660: PUSH
28661: LD_EXP 116
28665: AND
28666: IFFALSE 28729
28668: GO 28670
28670: DISABLE
28671: LD_INT 0
28673: PPUSH
// begin p := 0 ;
28674: LD_ADDR_VAR 0 1
28678: PUSH
28679: LD_INT 0
28681: ST_TO_ADDR
// repeat game_speed := 1 ;
28682: LD_ADDR_OWVAR 65
28686: PUSH
28687: LD_INT 1
28689: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28690: LD_INT 35
28692: PPUSH
28693: CALL_OW 67
// p := p + 1 ;
28697: LD_ADDR_VAR 0 1
28701: PUSH
28702: LD_VAR 0 1
28706: PUSH
28707: LD_INT 1
28709: PLUS
28710: ST_TO_ADDR
// until p >= 60 ;
28711: LD_VAR 0 1
28715: PUSH
28716: LD_INT 60
28718: GREATEREQUAL
28719: IFFALSE 28682
// game_speed := 4 ;
28721: LD_ADDR_OWVAR 65
28725: PUSH
28726: LD_INT 4
28728: ST_TO_ADDR
// end ;
28729: PPOPN 1
28731: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28732: LD_EXP 90
28736: PUSH
28737: LD_EXP 117
28741: AND
28742: IFFALSE 28888
28744: GO 28746
28746: DISABLE
28747: LD_INT 0
28749: PPUSH
28750: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28751: LD_ADDR_VAR 0 1
28755: PUSH
28756: LD_INT 22
28758: PUSH
28759: LD_OWVAR 2
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: LD_INT 30
28773: PUSH
28774: LD_INT 0
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 30
28783: PUSH
28784: LD_INT 1
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PPUSH
28800: CALL_OW 69
28804: ST_TO_ADDR
// if not depot then
28805: LD_VAR 0 1
28809: NOT
28810: IFFALSE 28814
// exit ;
28812: GO 28888
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28814: LD_ADDR_VAR 0 2
28818: PUSH
28819: LD_VAR 0 1
28823: PUSH
28824: LD_INT 1
28826: PPUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: CALL_OW 12
28836: ARRAY
28837: PPUSH
28838: CALL_OW 274
28842: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28843: LD_VAR 0 2
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: LD_INT 0
28853: PPUSH
28854: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28858: LD_VAR 0 2
28862: PPUSH
28863: LD_INT 2
28865: PPUSH
28866: LD_INT 0
28868: PPUSH
28869: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28873: LD_VAR 0 2
28877: PPUSH
28878: LD_INT 3
28880: PPUSH
28881: LD_INT 0
28883: PPUSH
28884: CALL_OW 277
// end ;
28888: PPOPN 2
28890: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28891: LD_EXP 90
28895: PUSH
28896: LD_EXP 118
28900: AND
28901: IFFALSE 28998
28903: GO 28905
28905: DISABLE
28906: LD_INT 0
28908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28909: LD_ADDR_VAR 0 1
28913: PUSH
28914: LD_INT 22
28916: PUSH
28917: LD_OWVAR 2
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: LD_INT 21
28928: PUSH
28929: LD_INT 1
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 3
28938: PUSH
28939: LD_INT 23
28941: PUSH
28942: LD_INT 0
28944: PUSH
28945: EMPTY
28946: LIST
28947: LIST
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: EMPTY
28954: LIST
28955: LIST
28956: LIST
28957: PPUSH
28958: CALL_OW 69
28962: ST_TO_ADDR
// if not tmp then
28963: LD_VAR 0 1
28967: NOT
28968: IFFALSE 28972
// exit ;
28970: GO 28998
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28972: LD_VAR 0 1
28976: PUSH
28977: LD_INT 1
28979: PPUSH
28980: LD_VAR 0 1
28984: PPUSH
28985: CALL_OW 12
28989: ARRAY
28990: PPUSH
28991: LD_INT 200
28993: PPUSH
28994: CALL_OW 234
// end ;
28998: PPOPN 1
29000: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
29001: LD_EXP 90
29005: PUSH
29006: LD_EXP 119
29010: AND
29011: IFFALSE 29090
29013: GO 29015
29015: DISABLE
29016: LD_INT 0
29018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
29019: LD_ADDR_VAR 0 1
29023: PUSH
29024: LD_INT 22
29026: PUSH
29027: LD_OWVAR 2
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 21
29038: PUSH
29039: LD_INT 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: EMPTY
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 69
29054: ST_TO_ADDR
// if not tmp then
29055: LD_VAR 0 1
29059: NOT
29060: IFFALSE 29064
// exit ;
29062: GO 29090
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
29064: LD_VAR 0 1
29068: PUSH
29069: LD_INT 1
29071: PPUSH
29072: LD_VAR 0 1
29076: PPUSH
29077: CALL_OW 12
29081: ARRAY
29082: PPUSH
29083: LD_INT 60
29085: PPUSH
29086: CALL_OW 234
// end ;
29090: PPOPN 1
29092: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
29093: LD_EXP 90
29097: PUSH
29098: LD_EXP 120
29102: AND
29103: IFFALSE 29202
29105: GO 29107
29107: DISABLE
29108: LD_INT 0
29110: PPUSH
29111: PPUSH
// begin enable ;
29112: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
29113: LD_ADDR_VAR 0 1
29117: PUSH
29118: LD_INT 22
29120: PUSH
29121: LD_OWVAR 2
29125: PUSH
29126: EMPTY
29127: LIST
29128: LIST
29129: PUSH
29130: LD_INT 61
29132: PUSH
29133: EMPTY
29134: LIST
29135: PUSH
29136: LD_INT 33
29138: PUSH
29139: LD_INT 2
29141: PUSH
29142: EMPTY
29143: LIST
29144: LIST
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: PPUSH
29151: CALL_OW 69
29155: ST_TO_ADDR
// if not tmp then
29156: LD_VAR 0 1
29160: NOT
29161: IFFALSE 29165
// exit ;
29163: GO 29202
// for i in tmp do
29165: LD_ADDR_VAR 0 2
29169: PUSH
29170: LD_VAR 0 1
29174: PUSH
29175: FOR_IN
29176: IFFALSE 29200
// if IsControledBy ( i ) then
29178: LD_VAR 0 2
29182: PPUSH
29183: CALL_OW 312
29187: IFFALSE 29198
// ComUnlink ( i ) ;
29189: LD_VAR 0 2
29193: PPUSH
29194: CALL_OW 136
29198: GO 29175
29200: POP
29201: POP
// end ;
29202: PPOPN 2
29204: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
29205: LD_EXP 90
29209: PUSH
29210: LD_EXP 121
29214: AND
29215: IFFALSE 29355
29217: GO 29219
29219: DISABLE
29220: LD_INT 0
29222: PPUSH
29223: PPUSH
// begin ToLua ( displayPowell(); ) ;
29224: LD_STRING displayPowell();
29226: PPUSH
29227: CALL_OW 559
// uc_side := 0 ;
29231: LD_ADDR_OWVAR 20
29235: PUSH
29236: LD_INT 0
29238: ST_TO_ADDR
// uc_nation := 2 ;
29239: LD_ADDR_OWVAR 21
29243: PUSH
29244: LD_INT 2
29246: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
29247: LD_ADDR_OWVAR 37
29251: PUSH
29252: LD_INT 14
29254: ST_TO_ADDR
// vc_engine := engine_siberite ;
29255: LD_ADDR_OWVAR 39
29259: PUSH
29260: LD_INT 3
29262: ST_TO_ADDR
// vc_control := control_apeman ;
29263: LD_ADDR_OWVAR 38
29267: PUSH
29268: LD_INT 5
29270: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
29271: LD_ADDR_OWVAR 40
29275: PUSH
29276: LD_INT 29
29278: ST_TO_ADDR
// un := CreateVehicle ;
29279: LD_ADDR_VAR 0 2
29283: PUSH
29284: CALL_OW 45
29288: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29289: LD_VAR 0 2
29293: PPUSH
29294: LD_INT 1
29296: PPUSH
29297: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29301: LD_INT 35
29303: PPUSH
29304: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29308: LD_VAR 0 2
29312: PPUSH
29313: LD_INT 22
29315: PUSH
29316: LD_OWVAR 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 69
29329: PPUSH
29330: LD_VAR 0 2
29334: PPUSH
29335: CALL_OW 74
29339: PPUSH
29340: CALL_OW 115
// until IsDead ( un ) ;
29344: LD_VAR 0 2
29348: PPUSH
29349: CALL_OW 301
29353: IFFALSE 29301
// end ;
29355: PPOPN 2
29357: END
// every 0 0$1 trigger StreamModeActive and sStu do
29358: LD_EXP 90
29362: PUSH
29363: LD_EXP 129
29367: AND
29368: IFFALSE 29384
29370: GO 29372
29372: DISABLE
// begin ToLua ( displayStucuk(); ) ;
29373: LD_STRING displayStucuk();
29375: PPUSH
29376: CALL_OW 559
// ResetFog ;
29380: CALL_OW 335
// end ;
29384: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
29385: LD_EXP 90
29389: PUSH
29390: LD_EXP 122
29394: AND
29395: IFFALSE 29536
29397: GO 29399
29399: DISABLE
29400: LD_INT 0
29402: PPUSH
29403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29404: LD_ADDR_VAR 0 2
29408: PUSH
29409: LD_INT 22
29411: PUSH
29412: LD_OWVAR 2
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: PPUSH
29435: CALL_OW 69
29439: ST_TO_ADDR
// if not tmp then
29440: LD_VAR 0 2
29444: NOT
29445: IFFALSE 29449
// exit ;
29447: GO 29536
// un := tmp [ rand ( 1 , tmp ) ] ;
29449: LD_ADDR_VAR 0 1
29453: PUSH
29454: LD_VAR 0 2
29458: PUSH
29459: LD_INT 1
29461: PPUSH
29462: LD_VAR 0 2
29466: PPUSH
29467: CALL_OW 12
29471: ARRAY
29472: ST_TO_ADDR
// SetSide ( un , 0 ) ;
29473: LD_VAR 0 1
29477: PPUSH
29478: LD_INT 0
29480: PPUSH
29481: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
29485: LD_VAR 0 1
29489: PPUSH
29490: LD_OWVAR 3
29494: PUSH
29495: LD_VAR 0 1
29499: DIFF
29500: PPUSH
29501: LD_VAR 0 1
29505: PPUSH
29506: CALL_OW 74
29510: PPUSH
29511: CALL_OW 115
// wait ( 0 0$20 ) ;
29515: LD_INT 700
29517: PPUSH
29518: CALL_OW 67
// SetSide ( un , your_side ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_OWVAR 2
29531: PPUSH
29532: CALL_OW 235
// end ;
29536: PPOPN 2
29538: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
29539: LD_EXP 90
29543: PUSH
29544: LD_EXP 123
29548: AND
29549: IFFALSE 29655
29551: GO 29553
29553: DISABLE
29554: LD_INT 0
29556: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29557: LD_ADDR_VAR 0 1
29561: PUSH
29562: LD_INT 22
29564: PUSH
29565: LD_OWVAR 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 30
29579: PUSH
29580: LD_INT 0
29582: PUSH
29583: EMPTY
29584: LIST
29585: LIST
29586: PUSH
29587: LD_INT 30
29589: PUSH
29590: LD_INT 1
29592: PUSH
29593: EMPTY
29594: LIST
29595: LIST
29596: PUSH
29597: EMPTY
29598: LIST
29599: LIST
29600: LIST
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PPUSH
29606: CALL_OW 69
29610: ST_TO_ADDR
// if not depot then
29611: LD_VAR 0 1
29615: NOT
29616: IFFALSE 29620
// exit ;
29618: GO 29655
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
29620: LD_VAR 0 1
29624: PUSH
29625: LD_INT 1
29627: ARRAY
29628: PPUSH
29629: CALL_OW 250
29633: PPUSH
29634: LD_VAR 0 1
29638: PUSH
29639: LD_INT 1
29641: ARRAY
29642: PPUSH
29643: CALL_OW 251
29647: PPUSH
29648: LD_INT 70
29650: PPUSH
29651: CALL_OW 495
// end ;
29655: PPOPN 1
29657: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
29658: LD_EXP 90
29662: PUSH
29663: LD_EXP 124
29667: AND
29668: IFFALSE 29879
29670: GO 29672
29672: DISABLE
29673: LD_INT 0
29675: PPUSH
29676: PPUSH
29677: PPUSH
29678: PPUSH
29679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29680: LD_ADDR_VAR 0 5
29684: PUSH
29685: LD_INT 22
29687: PUSH
29688: LD_OWVAR 2
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PUSH
29697: LD_INT 21
29699: PUSH
29700: LD_INT 1
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PPUSH
29711: CALL_OW 69
29715: ST_TO_ADDR
// if not tmp then
29716: LD_VAR 0 5
29720: NOT
29721: IFFALSE 29725
// exit ;
29723: GO 29879
// for i in tmp do
29725: LD_ADDR_VAR 0 1
29729: PUSH
29730: LD_VAR 0 5
29734: PUSH
29735: FOR_IN
29736: IFFALSE 29877
// begin d := rand ( 0 , 5 ) ;
29738: LD_ADDR_VAR 0 4
29742: PUSH
29743: LD_INT 0
29745: PPUSH
29746: LD_INT 5
29748: PPUSH
29749: CALL_OW 12
29753: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29754: LD_ADDR_VAR 0 2
29758: PUSH
29759: LD_VAR 0 1
29763: PPUSH
29764: CALL_OW 250
29768: PPUSH
29769: LD_VAR 0 4
29773: PPUSH
29774: LD_INT 3
29776: PPUSH
29777: LD_INT 12
29779: PPUSH
29780: CALL_OW 12
29784: PPUSH
29785: CALL_OW 272
29789: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29790: LD_ADDR_VAR 0 3
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 251
29804: PPUSH
29805: LD_VAR 0 4
29809: PPUSH
29810: LD_INT 3
29812: PPUSH
29813: LD_INT 12
29815: PPUSH
29816: CALL_OW 12
29820: PPUSH
29821: CALL_OW 273
29825: ST_TO_ADDR
// if ValidHex ( x , y ) then
29826: LD_VAR 0 2
29830: PPUSH
29831: LD_VAR 0 3
29835: PPUSH
29836: CALL_OW 488
29840: IFFALSE 29875
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29842: LD_VAR 0 1
29846: PPUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: LD_VAR 0 3
29856: PPUSH
29857: LD_INT 3
29859: PPUSH
29860: LD_INT 6
29862: PPUSH
29863: CALL_OW 12
29867: PPUSH
29868: LD_INT 1
29870: PPUSH
29871: CALL_OW 483
// end ;
29875: GO 29735
29877: POP
29878: POP
// end ;
29879: PPOPN 5
29881: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29882: LD_EXP 90
29886: PUSH
29887: LD_EXP 125
29891: AND
29892: IFFALSE 29986
29894: GO 29896
29896: DISABLE
29897: LD_INT 0
29899: PPUSH
29900: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29901: LD_ADDR_VAR 0 2
29905: PUSH
29906: LD_INT 22
29908: PUSH
29909: LD_OWVAR 2
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 32
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: LD_INT 21
29930: PUSH
29931: LD_INT 2
29933: PUSH
29934: EMPTY
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: PPUSH
29943: CALL_OW 69
29947: ST_TO_ADDR
// if not tmp then
29948: LD_VAR 0 2
29952: NOT
29953: IFFALSE 29957
// exit ;
29955: GO 29986
// for i in tmp do
29957: LD_ADDR_VAR 0 1
29961: PUSH
29962: LD_VAR 0 2
29966: PUSH
29967: FOR_IN
29968: IFFALSE 29984
// SetFuel ( i , 0 ) ;
29970: LD_VAR 0 1
29974: PPUSH
29975: LD_INT 0
29977: PPUSH
29978: CALL_OW 240
29982: GO 29967
29984: POP
29985: POP
// end ;
29986: PPOPN 2
29988: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29989: LD_EXP 90
29993: PUSH
29994: LD_EXP 126
29998: AND
29999: IFFALSE 30065
30001: GO 30003
30003: DISABLE
30004: LD_INT 0
30006: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30007: LD_ADDR_VAR 0 1
30011: PUSH
30012: LD_INT 22
30014: PUSH
30015: LD_OWVAR 2
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 30
30026: PUSH
30027: LD_INT 29
30029: PUSH
30030: EMPTY
30031: LIST
30032: LIST
30033: PUSH
30034: EMPTY
30035: LIST
30036: LIST
30037: PPUSH
30038: CALL_OW 69
30042: ST_TO_ADDR
// if not tmp then
30043: LD_VAR 0 1
30047: NOT
30048: IFFALSE 30052
// exit ;
30050: GO 30065
// DestroyUnit ( tmp [ 1 ] ) ;
30052: LD_VAR 0 1
30056: PUSH
30057: LD_INT 1
30059: ARRAY
30060: PPUSH
30061: CALL_OW 65
// end ;
30065: PPOPN 1
30067: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
30068: LD_EXP 90
30072: PUSH
30073: LD_EXP 128
30077: AND
30078: IFFALSE 30207
30080: GO 30082
30082: DISABLE
30083: LD_INT 0
30085: PPUSH
// begin uc_side := 0 ;
30086: LD_ADDR_OWVAR 20
30090: PUSH
30091: LD_INT 0
30093: ST_TO_ADDR
// uc_nation := nation_arabian ;
30094: LD_ADDR_OWVAR 21
30098: PUSH
30099: LD_INT 2
30101: ST_TO_ADDR
// hc_gallery :=  ;
30102: LD_ADDR_OWVAR 33
30106: PUSH
30107: LD_STRING 
30109: ST_TO_ADDR
// hc_name :=  ;
30110: LD_ADDR_OWVAR 26
30114: PUSH
30115: LD_STRING 
30117: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
30118: LD_INT 1
30120: PPUSH
30121: LD_INT 11
30123: PPUSH
30124: LD_INT 10
30126: PPUSH
30127: CALL_OW 380
// un := CreateHuman ;
30131: LD_ADDR_VAR 0 1
30135: PUSH
30136: CALL_OW 44
30140: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30141: LD_VAR 0 1
30145: PPUSH
30146: LD_INT 1
30148: PPUSH
30149: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
30153: LD_INT 35
30155: PPUSH
30156: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
30160: LD_VAR 0 1
30164: PPUSH
30165: LD_INT 22
30167: PUSH
30168: LD_OWVAR 2
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PPUSH
30177: CALL_OW 69
30181: PPUSH
30182: LD_VAR 0 1
30186: PPUSH
30187: CALL_OW 74
30191: PPUSH
30192: CALL_OW 115
// until IsDead ( un ) ;
30196: LD_VAR 0 1
30200: PPUSH
30201: CALL_OW 301
30205: IFFALSE 30153
// end ;
30207: PPOPN 1
30209: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
30210: LD_EXP 90
30214: PUSH
30215: LD_EXP 130
30219: AND
30220: IFFALSE 30232
30222: GO 30224
30224: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
30225: LD_STRING earthquake(getX(game), 0, 32)
30227: PPUSH
30228: CALL_OW 559
30232: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
30233: LD_EXP 90
30237: PUSH
30238: LD_EXP 131
30242: AND
30243: IFFALSE 30334
30245: GO 30247
30247: DISABLE
30248: LD_INT 0
30250: PPUSH
// begin enable ;
30251: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
30252: LD_ADDR_VAR 0 1
30256: PUSH
30257: LD_INT 22
30259: PUSH
30260: LD_OWVAR 2
30264: PUSH
30265: EMPTY
30266: LIST
30267: LIST
30268: PUSH
30269: LD_INT 21
30271: PUSH
30272: LD_INT 2
30274: PUSH
30275: EMPTY
30276: LIST
30277: LIST
30278: PUSH
30279: LD_INT 33
30281: PUSH
30282: LD_INT 3
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: LIST
30293: PPUSH
30294: CALL_OW 69
30298: ST_TO_ADDR
// if not tmp then
30299: LD_VAR 0 1
30303: NOT
30304: IFFALSE 30308
// exit ;
30306: GO 30334
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30308: LD_VAR 0 1
30312: PUSH
30313: LD_INT 1
30315: PPUSH
30316: LD_VAR 0 1
30320: PPUSH
30321: CALL_OW 12
30325: ARRAY
30326: PPUSH
30327: LD_INT 1
30329: PPUSH
30330: CALL_OW 234
// end ;
30334: PPOPN 1
30336: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
30337: LD_EXP 90
30341: PUSH
30342: LD_EXP 132
30346: AND
30347: IFFALSE 30488
30349: GO 30351
30351: DISABLE
30352: LD_INT 0
30354: PPUSH
30355: PPUSH
30356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30357: LD_ADDR_VAR 0 3
30361: PUSH
30362: LD_INT 22
30364: PUSH
30365: LD_OWVAR 2
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: PUSH
30374: LD_INT 25
30376: PUSH
30377: LD_INT 1
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PPUSH
30388: CALL_OW 69
30392: ST_TO_ADDR
// if not tmp then
30393: LD_VAR 0 3
30397: NOT
30398: IFFALSE 30402
// exit ;
30400: GO 30488
// un := tmp [ rand ( 1 , tmp ) ] ;
30402: LD_ADDR_VAR 0 2
30406: PUSH
30407: LD_VAR 0 3
30411: PUSH
30412: LD_INT 1
30414: PPUSH
30415: LD_VAR 0 3
30419: PPUSH
30420: CALL_OW 12
30424: ARRAY
30425: ST_TO_ADDR
// if Crawls ( un ) then
30426: LD_VAR 0 2
30430: PPUSH
30431: CALL_OW 318
30435: IFFALSE 30446
// ComWalk ( un ) ;
30437: LD_VAR 0 2
30441: PPUSH
30442: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
30446: LD_VAR 0 2
30450: PPUSH
30451: LD_INT 9
30453: PPUSH
30454: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
30458: LD_INT 28
30460: PPUSH
30461: LD_OWVAR 2
30465: PPUSH
30466: LD_INT 2
30468: PPUSH
30469: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
30473: LD_INT 29
30475: PPUSH
30476: LD_OWVAR 2
30480: PPUSH
30481: LD_INT 2
30483: PPUSH
30484: CALL_OW 322
// end ;
30488: PPOPN 3
30490: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
30491: LD_EXP 90
30495: PUSH
30496: LD_EXP 133
30500: AND
30501: IFFALSE 30612
30503: GO 30505
30505: DISABLE
30506: LD_INT 0
30508: PPUSH
30509: PPUSH
30510: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30511: LD_ADDR_VAR 0 3
30515: PUSH
30516: LD_INT 22
30518: PUSH
30519: LD_OWVAR 2
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 25
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: PPUSH
30542: CALL_OW 69
30546: ST_TO_ADDR
// if not tmp then
30547: LD_VAR 0 3
30551: NOT
30552: IFFALSE 30556
// exit ;
30554: GO 30612
// un := tmp [ rand ( 1 , tmp ) ] ;
30556: LD_ADDR_VAR 0 2
30560: PUSH
30561: LD_VAR 0 3
30565: PUSH
30566: LD_INT 1
30568: PPUSH
30569: LD_VAR 0 3
30573: PPUSH
30574: CALL_OW 12
30578: ARRAY
30579: ST_TO_ADDR
// if Crawls ( un ) then
30580: LD_VAR 0 2
30584: PPUSH
30585: CALL_OW 318
30589: IFFALSE 30600
// ComWalk ( un ) ;
30591: LD_VAR 0 2
30595: PPUSH
30596: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30600: LD_VAR 0 2
30604: PPUSH
30605: LD_INT 8
30607: PPUSH
30608: CALL_OW 336
// end ;
30612: PPOPN 3
30614: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
30615: LD_EXP 90
30619: PUSH
30620: LD_EXP 134
30624: AND
30625: IFFALSE 30769
30627: GO 30629
30629: DISABLE
30630: LD_INT 0
30632: PPUSH
30633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
30634: LD_ADDR_VAR 0 2
30638: PUSH
30639: LD_INT 22
30641: PUSH
30642: LD_OWVAR 2
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: LD_INT 21
30653: PUSH
30654: LD_INT 2
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: PUSH
30661: LD_INT 2
30663: PUSH
30664: LD_INT 34
30666: PUSH
30667: LD_INT 12
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 34
30676: PUSH
30677: LD_INT 51
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: PUSH
30684: LD_INT 34
30686: PUSH
30687: LD_INT 32
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: PPUSH
30705: CALL_OW 69
30709: ST_TO_ADDR
// if not tmp then
30710: LD_VAR 0 2
30714: NOT
30715: IFFALSE 30719
// exit ;
30717: GO 30769
// for i in tmp do
30719: LD_ADDR_VAR 0 1
30723: PUSH
30724: LD_VAR 0 2
30728: PUSH
30729: FOR_IN
30730: IFFALSE 30767
// if GetCargo ( i , mat_artifact ) = 0 then
30732: LD_VAR 0 1
30736: PPUSH
30737: LD_INT 4
30739: PPUSH
30740: CALL_OW 289
30744: PUSH
30745: LD_INT 0
30747: EQUAL
30748: IFFALSE 30765
// SetCargo ( i , mat_siberit , 100 ) ;
30750: LD_VAR 0 1
30754: PPUSH
30755: LD_INT 3
30757: PPUSH
30758: LD_INT 100
30760: PPUSH
30761: CALL_OW 290
30765: GO 30729
30767: POP
30768: POP
// end ;
30769: PPOPN 2
30771: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30772: LD_EXP 90
30776: PUSH
30777: LD_EXP 135
30781: AND
30782: IFFALSE 30965
30784: GO 30786
30786: DISABLE
30787: LD_INT 0
30789: PPUSH
30790: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30791: LD_ADDR_VAR 0 2
30795: PUSH
30796: LD_INT 22
30798: PUSH
30799: LD_OWVAR 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 69
30812: ST_TO_ADDR
// if not tmp then
30813: LD_VAR 0 2
30817: NOT
30818: IFFALSE 30822
// exit ;
30820: GO 30965
// for i := 1 to 2 do
30822: LD_ADDR_VAR 0 1
30826: PUSH
30827: DOUBLE
30828: LD_INT 1
30830: DEC
30831: ST_TO_ADDR
30832: LD_INT 2
30834: PUSH
30835: FOR_TO
30836: IFFALSE 30963
// begin uc_side := your_side ;
30838: LD_ADDR_OWVAR 20
30842: PUSH
30843: LD_OWVAR 2
30847: ST_TO_ADDR
// uc_nation := nation_american ;
30848: LD_ADDR_OWVAR 21
30852: PUSH
30853: LD_INT 1
30855: ST_TO_ADDR
// vc_chassis := us_morphling ;
30856: LD_ADDR_OWVAR 37
30860: PUSH
30861: LD_INT 5
30863: ST_TO_ADDR
// vc_engine := engine_siberite ;
30864: LD_ADDR_OWVAR 39
30868: PUSH
30869: LD_INT 3
30871: ST_TO_ADDR
// vc_control := control_computer ;
30872: LD_ADDR_OWVAR 38
30876: PUSH
30877: LD_INT 3
30879: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30880: LD_ADDR_OWVAR 40
30884: PUSH
30885: LD_INT 10
30887: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30888: LD_VAR 0 2
30892: PUSH
30893: LD_INT 1
30895: ARRAY
30896: PPUSH
30897: CALL_OW 310
30901: NOT
30902: IFFALSE 30949
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30904: CALL_OW 45
30908: PPUSH
30909: LD_VAR 0 2
30913: PUSH
30914: LD_INT 1
30916: ARRAY
30917: PPUSH
30918: CALL_OW 250
30922: PPUSH
30923: LD_VAR 0 2
30927: PUSH
30928: LD_INT 1
30930: ARRAY
30931: PPUSH
30932: CALL_OW 251
30936: PPUSH
30937: LD_INT 12
30939: PPUSH
30940: LD_INT 1
30942: PPUSH
30943: CALL_OW 50
30947: GO 30961
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30949: CALL_OW 45
30953: PPUSH
30954: LD_INT 1
30956: PPUSH
30957: CALL_OW 51
// end ;
30961: GO 30835
30963: POP
30964: POP
// end ;
30965: PPOPN 2
30967: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30968: LD_EXP 90
30972: PUSH
30973: LD_EXP 136
30977: AND
30978: IFFALSE 31200
30980: GO 30982
30982: DISABLE
30983: LD_INT 0
30985: PPUSH
30986: PPUSH
30987: PPUSH
30988: PPUSH
30989: PPUSH
30990: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30991: LD_ADDR_VAR 0 6
30995: PUSH
30996: LD_INT 22
30998: PUSH
30999: LD_OWVAR 2
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 21
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: LD_INT 3
31020: PUSH
31021: LD_INT 23
31023: PUSH
31024: LD_INT 0
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: PPUSH
31040: CALL_OW 69
31044: ST_TO_ADDR
// if not tmp then
31045: LD_VAR 0 6
31049: NOT
31050: IFFALSE 31054
// exit ;
31052: GO 31200
// s1 := rand ( 1 , 4 ) ;
31054: LD_ADDR_VAR 0 2
31058: PUSH
31059: LD_INT 1
31061: PPUSH
31062: LD_INT 4
31064: PPUSH
31065: CALL_OW 12
31069: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
31070: LD_ADDR_VAR 0 4
31074: PUSH
31075: LD_VAR 0 6
31079: PUSH
31080: LD_INT 1
31082: ARRAY
31083: PPUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: CALL_OW 259
31093: ST_TO_ADDR
// if s1 = 1 then
31094: LD_VAR 0 2
31098: PUSH
31099: LD_INT 1
31101: EQUAL
31102: IFFALSE 31122
// s2 := rand ( 2 , 4 ) else
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 2
31111: PPUSH
31112: LD_INT 4
31114: PPUSH
31115: CALL_OW 12
31119: ST_TO_ADDR
31120: GO 31130
// s2 := 1 ;
31122: LD_ADDR_VAR 0 3
31126: PUSH
31127: LD_INT 1
31129: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
31130: LD_ADDR_VAR 0 5
31134: PUSH
31135: LD_VAR 0 6
31139: PUSH
31140: LD_INT 1
31142: ARRAY
31143: PPUSH
31144: LD_VAR 0 3
31148: PPUSH
31149: CALL_OW 259
31153: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
31154: LD_VAR 0 6
31158: PUSH
31159: LD_INT 1
31161: ARRAY
31162: PPUSH
31163: LD_VAR 0 2
31167: PPUSH
31168: LD_VAR 0 5
31172: PPUSH
31173: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
31177: LD_VAR 0 6
31181: PUSH
31182: LD_INT 1
31184: ARRAY
31185: PPUSH
31186: LD_VAR 0 3
31190: PPUSH
31191: LD_VAR 0 4
31195: PPUSH
31196: CALL_OW 237
// end ;
31200: PPOPN 6
31202: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
31203: LD_EXP 90
31207: PUSH
31208: LD_EXP 137
31212: AND
31213: IFFALSE 31292
31215: GO 31217
31217: DISABLE
31218: LD_INT 0
31220: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
31221: LD_ADDR_VAR 0 1
31225: PUSH
31226: LD_INT 22
31228: PUSH
31229: LD_OWVAR 2
31233: PUSH
31234: EMPTY
31235: LIST
31236: LIST
31237: PUSH
31238: LD_INT 30
31240: PUSH
31241: LD_INT 3
31243: PUSH
31244: EMPTY
31245: LIST
31246: LIST
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PPUSH
31252: CALL_OW 69
31256: ST_TO_ADDR
// if not tmp then
31257: LD_VAR 0 1
31261: NOT
31262: IFFALSE 31266
// exit ;
31264: GO 31292
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
31266: LD_VAR 0 1
31270: PUSH
31271: LD_INT 1
31273: PPUSH
31274: LD_VAR 0 1
31278: PPUSH
31279: CALL_OW 12
31283: ARRAY
31284: PPUSH
31285: LD_INT 1
31287: PPUSH
31288: CALL_OW 234
// end ;
31292: PPOPN 1
31294: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
31295: LD_EXP 90
31299: PUSH
31300: LD_EXP 138
31304: AND
31305: IFFALSE 31417
31307: GO 31309
31309: DISABLE
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
31314: LD_ADDR_VAR 0 2
31318: PUSH
31319: LD_INT 22
31321: PUSH
31322: LD_OWVAR 2
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 2
31333: PUSH
31334: LD_INT 30
31336: PUSH
31337: LD_INT 27
31339: PUSH
31340: EMPTY
31341: LIST
31342: LIST
31343: PUSH
31344: LD_INT 30
31346: PUSH
31347: LD_INT 26
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 30
31356: PUSH
31357: LD_INT 28
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: EMPTY
31365: LIST
31366: LIST
31367: LIST
31368: LIST
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PPUSH
31374: CALL_OW 69
31378: ST_TO_ADDR
// if not tmp then
31379: LD_VAR 0 2
31383: NOT
31384: IFFALSE 31388
// exit ;
31386: GO 31417
// for i in tmp do
31388: LD_ADDR_VAR 0 1
31392: PUSH
31393: LD_VAR 0 2
31397: PUSH
31398: FOR_IN
31399: IFFALSE 31415
// SetLives ( i , 1 ) ;
31401: LD_VAR 0 1
31405: PPUSH
31406: LD_INT 1
31408: PPUSH
31409: CALL_OW 234
31413: GO 31398
31415: POP
31416: POP
// end ;
31417: PPOPN 2
31419: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
31420: LD_EXP 90
31424: PUSH
31425: LD_EXP 139
31429: AND
31430: IFFALSE 31717
31432: GO 31434
31434: DISABLE
31435: LD_INT 0
31437: PPUSH
31438: PPUSH
31439: PPUSH
// begin i := rand ( 1 , 7 ) ;
31440: LD_ADDR_VAR 0 1
31444: PUSH
31445: LD_INT 1
31447: PPUSH
31448: LD_INT 7
31450: PPUSH
31451: CALL_OW 12
31455: ST_TO_ADDR
// case i of 1 :
31456: LD_VAR 0 1
31460: PUSH
31461: LD_INT 1
31463: DOUBLE
31464: EQUAL
31465: IFTRUE 31469
31467: GO 31479
31469: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
31470: LD_STRING earthquake(getX(game), 0, 32)
31472: PPUSH
31473: CALL_OW 559
31477: GO 31717
31479: LD_INT 2
31481: DOUBLE
31482: EQUAL
31483: IFTRUE 31487
31485: GO 31501
31487: POP
// begin ToLua ( displayStucuk(); ) ;
31488: LD_STRING displayStucuk();
31490: PPUSH
31491: CALL_OW 559
// ResetFog ;
31495: CALL_OW 335
// end ; 3 :
31499: GO 31717
31501: LD_INT 3
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31613
31509: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31510: LD_ADDR_VAR 0 2
31514: PUSH
31515: LD_INT 22
31517: PUSH
31518: LD_OWVAR 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: PUSH
31527: LD_INT 25
31529: PUSH
31530: LD_INT 1
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PPUSH
31541: CALL_OW 69
31545: ST_TO_ADDR
// if not tmp then
31546: LD_VAR 0 2
31550: NOT
31551: IFFALSE 31555
// exit ;
31553: GO 31717
// un := tmp [ rand ( 1 , tmp ) ] ;
31555: LD_ADDR_VAR 0 3
31559: PUSH
31560: LD_VAR 0 2
31564: PUSH
31565: LD_INT 1
31567: PPUSH
31568: LD_VAR 0 2
31572: PPUSH
31573: CALL_OW 12
31577: ARRAY
31578: ST_TO_ADDR
// if Crawls ( un ) then
31579: LD_VAR 0 3
31583: PPUSH
31584: CALL_OW 318
31588: IFFALSE 31599
// ComWalk ( un ) ;
31590: LD_VAR 0 3
31594: PPUSH
31595: CALL_OW 138
// SetClass ( un , class_mortar ) ;
31599: LD_VAR 0 3
31603: PPUSH
31604: LD_INT 8
31606: PPUSH
31607: CALL_OW 336
// end ; 4 :
31611: GO 31717
31613: LD_INT 4
31615: DOUBLE
31616: EQUAL
31617: IFTRUE 31621
31619: GO 31695
31621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
31622: LD_ADDR_VAR 0 2
31626: PUSH
31627: LD_INT 22
31629: PUSH
31630: LD_OWVAR 2
31634: PUSH
31635: EMPTY
31636: LIST
31637: LIST
31638: PUSH
31639: LD_INT 30
31641: PUSH
31642: LD_INT 29
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: EMPTY
31650: LIST
31651: LIST
31652: PPUSH
31653: CALL_OW 69
31657: ST_TO_ADDR
// if not tmp then
31658: LD_VAR 0 2
31662: NOT
31663: IFFALSE 31667
// exit ;
31665: GO 31717
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31667: LD_VAR 0 2
31671: PUSH
31672: LD_INT 1
31674: ARRAY
31675: PPUSH
31676: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31680: LD_VAR 0 2
31684: PUSH
31685: LD_INT 1
31687: ARRAY
31688: PPUSH
31689: CALL_OW 65
// end ; 5 .. 7 :
31693: GO 31717
31695: LD_INT 5
31697: DOUBLE
31698: GREATEREQUAL
31699: IFFALSE 31707
31701: LD_INT 7
31703: DOUBLE
31704: LESSEQUAL
31705: IFTRUE 31709
31707: GO 31716
31709: POP
// StreamSibBomb ; end ;
31710: CALL 27954 0 0
31714: GO 31717
31716: POP
// end ;
31717: PPOPN 3
31719: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31720: LD_EXP 90
31724: PUSH
31725: LD_EXP 140
31729: AND
31730: IFFALSE 31886
31732: GO 31734
31734: DISABLE
31735: LD_INT 0
31737: PPUSH
31738: PPUSH
31739: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31740: LD_ADDR_VAR 0 2
31744: PUSH
31745: LD_INT 81
31747: PUSH
31748: LD_OWVAR 2
31752: PUSH
31753: EMPTY
31754: LIST
31755: LIST
31756: PUSH
31757: LD_INT 2
31759: PUSH
31760: LD_INT 21
31762: PUSH
31763: LD_INT 1
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 21
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: LIST
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PPUSH
31789: CALL_OW 69
31793: ST_TO_ADDR
// if not tmp then
31794: LD_VAR 0 2
31798: NOT
31799: IFFALSE 31803
// exit ;
31801: GO 31886
// p := 0 ;
31803: LD_ADDR_VAR 0 3
31807: PUSH
31808: LD_INT 0
31810: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31811: LD_INT 35
31813: PPUSH
31814: CALL_OW 67
// p := p + 1 ;
31818: LD_ADDR_VAR 0 3
31822: PUSH
31823: LD_VAR 0 3
31827: PUSH
31828: LD_INT 1
31830: PLUS
31831: ST_TO_ADDR
// for i in tmp do
31832: LD_ADDR_VAR 0 1
31836: PUSH
31837: LD_VAR 0 2
31841: PUSH
31842: FOR_IN
31843: IFFALSE 31874
// if GetLives ( i ) < 1000 then
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 256
31854: PUSH
31855: LD_INT 1000
31857: LESS
31858: IFFALSE 31872
// SetLives ( i , 1000 ) ;
31860: LD_VAR 0 1
31864: PPUSH
31865: LD_INT 1000
31867: PPUSH
31868: CALL_OW 234
31872: GO 31842
31874: POP
31875: POP
// until p > 20 ;
31876: LD_VAR 0 3
31880: PUSH
31881: LD_INT 20
31883: GREATER
31884: IFFALSE 31811
// end ;
31886: PPOPN 3
31888: END
// every 0 0$1 trigger StreamModeActive and sTime do
31889: LD_EXP 90
31893: PUSH
31894: LD_EXP 141
31898: AND
31899: IFFALSE 31934
31901: GO 31903
31903: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31904: LD_INT 28
31906: PPUSH
31907: LD_OWVAR 2
31911: PPUSH
31912: LD_INT 2
31914: PPUSH
31915: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31919: LD_INT 30
31921: PPUSH
31922: LD_OWVAR 2
31926: PPUSH
31927: LD_INT 2
31929: PPUSH
31930: CALL_OW 322
// end ;
31934: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31935: LD_EXP 90
31939: PUSH
31940: LD_EXP 142
31944: AND
31945: IFFALSE 32066
31947: GO 31949
31949: DISABLE
31950: LD_INT 0
31952: PPUSH
31953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31954: LD_ADDR_VAR 0 2
31958: PUSH
31959: LD_INT 22
31961: PUSH
31962: LD_OWVAR 2
31966: PUSH
31967: EMPTY
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 21
31973: PUSH
31974: LD_INT 1
31976: PUSH
31977: EMPTY
31978: LIST
31979: LIST
31980: PUSH
31981: LD_INT 3
31983: PUSH
31984: LD_INT 23
31986: PUSH
31987: LD_INT 0
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: LIST
32002: PPUSH
32003: CALL_OW 69
32007: ST_TO_ADDR
// if not tmp then
32008: LD_VAR 0 2
32012: NOT
32013: IFFALSE 32017
// exit ;
32015: GO 32066
// for i in tmp do
32017: LD_ADDR_VAR 0 1
32021: PUSH
32022: LD_VAR 0 2
32026: PUSH
32027: FOR_IN
32028: IFFALSE 32064
// begin if Crawls ( i ) then
32030: LD_VAR 0 1
32034: PPUSH
32035: CALL_OW 318
32039: IFFALSE 32050
// ComWalk ( i ) ;
32041: LD_VAR 0 1
32045: PPUSH
32046: CALL_OW 138
// SetClass ( i , 2 ) ;
32050: LD_VAR 0 1
32054: PPUSH
32055: LD_INT 2
32057: PPUSH
32058: CALL_OW 336
// end ;
32062: GO 32027
32064: POP
32065: POP
// end ;
32066: PPOPN 2
32068: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
32069: LD_EXP 90
32073: PUSH
32074: LD_EXP 143
32078: AND
32079: IFFALSE 32367
32081: GO 32083
32083: DISABLE
32084: LD_INT 0
32086: PPUSH
32087: PPUSH
32088: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
32089: LD_OWVAR 2
32093: PPUSH
32094: LD_INT 9
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: LD_INT 1
32102: PPUSH
32103: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
32107: LD_INT 9
32109: PPUSH
32110: LD_OWVAR 2
32114: PPUSH
32115: CALL_OW 343
// uc_side := 9 ;
32119: LD_ADDR_OWVAR 20
32123: PUSH
32124: LD_INT 9
32126: ST_TO_ADDR
// uc_nation := 2 ;
32127: LD_ADDR_OWVAR 21
32131: PUSH
32132: LD_INT 2
32134: ST_TO_ADDR
// hc_name := Dark Warrior ;
32135: LD_ADDR_OWVAR 26
32139: PUSH
32140: LD_STRING Dark Warrior
32142: ST_TO_ADDR
// hc_gallery :=  ;
32143: LD_ADDR_OWVAR 33
32147: PUSH
32148: LD_STRING 
32150: ST_TO_ADDR
// hc_noskilllimit := true ;
32151: LD_ADDR_OWVAR 76
32155: PUSH
32156: LD_INT 1
32158: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
32159: LD_ADDR_OWVAR 31
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: LD_INT 30
32172: PUSH
32173: LD_INT 30
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: ST_TO_ADDR
// un := CreateHuman ;
32182: LD_ADDR_VAR 0 3
32186: PUSH
32187: CALL_OW 44
32191: ST_TO_ADDR
// hc_noskilllimit := false ;
32192: LD_ADDR_OWVAR 76
32196: PUSH
32197: LD_INT 0
32199: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
32200: LD_VAR 0 3
32204: PPUSH
32205: LD_INT 1
32207: PPUSH
32208: CALL_OW 51
// ToLua ( playRanger() ) ;
32212: LD_STRING playRanger()
32214: PPUSH
32215: CALL_OW 559
// p := 0 ;
32219: LD_ADDR_VAR 0 2
32223: PUSH
32224: LD_INT 0
32226: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
32227: LD_INT 35
32229: PPUSH
32230: CALL_OW 67
// p := p + 1 ;
32234: LD_ADDR_VAR 0 2
32238: PUSH
32239: LD_VAR 0 2
32243: PUSH
32244: LD_INT 1
32246: PLUS
32247: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
32248: LD_VAR 0 3
32252: PPUSH
32253: CALL_OW 256
32257: PUSH
32258: LD_INT 1000
32260: LESS
32261: IFFALSE 32275
// SetLives ( un , 1000 ) ;
32263: LD_VAR 0 3
32267: PPUSH
32268: LD_INT 1000
32270: PPUSH
32271: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
32275: LD_VAR 0 3
32279: PPUSH
32280: LD_INT 81
32282: PUSH
32283: LD_OWVAR 2
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: PUSH
32292: LD_INT 91
32294: PUSH
32295: LD_VAR 0 3
32299: PUSH
32300: LD_INT 30
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PPUSH
32312: CALL_OW 69
32316: PPUSH
32317: LD_VAR 0 3
32321: PPUSH
32322: CALL_OW 74
32326: PPUSH
32327: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
32331: LD_VAR 0 2
32335: PUSH
32336: LD_INT 80
32338: GREATER
32339: PUSH
32340: LD_VAR 0 3
32344: PPUSH
32345: CALL_OW 301
32349: OR
32350: IFFALSE 32227
// if un then
32352: LD_VAR 0 3
32356: IFFALSE 32367
// RemoveUnit ( un ) ;
32358: LD_VAR 0 3
32362: PPUSH
32363: CALL_OW 64
// end ;
32367: PPOPN 3
32369: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
32370: LD_EXP 144
32374: IFFALSE 32490
32376: GO 32378
32378: DISABLE
32379: LD_INT 0
32381: PPUSH
32382: PPUSH
32383: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
32384: LD_ADDR_VAR 0 2
32388: PUSH
32389: LD_INT 81
32391: PUSH
32392: LD_OWVAR 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PPUSH
32415: CALL_OW 69
32419: ST_TO_ADDR
// ToLua ( playComputer() ) ;
32420: LD_STRING playComputer()
32422: PPUSH
32423: CALL_OW 559
// if not tmp then
32427: LD_VAR 0 2
32431: NOT
32432: IFFALSE 32436
// exit ;
32434: GO 32490
// for i in tmp do
32436: LD_ADDR_VAR 0 1
32440: PUSH
32441: LD_VAR 0 2
32445: PUSH
32446: FOR_IN
32447: IFFALSE 32488
// for j := 1 to 4 do
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_INT 4
32461: PUSH
32462: FOR_TO
32463: IFFALSE 32484
// SetSkill ( i , j , 10 ) ;
32465: LD_VAR 0 1
32469: PPUSH
32470: LD_VAR 0 3
32474: PPUSH
32475: LD_INT 10
32477: PPUSH
32478: CALL_OW 237
32482: GO 32462
32484: POP
32485: POP
32486: GO 32446
32488: POP
32489: POP
// end ;
32490: PPOPN 3
32492: END
// every 0 0$1 trigger s30 do var i , tmp ;
32493: LD_EXP 145
32497: IFFALSE 32566
32499: GO 32501
32501: DISABLE
32502: LD_INT 0
32504: PPUSH
32505: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32506: LD_ADDR_VAR 0 2
32510: PUSH
32511: LD_INT 22
32513: PUSH
32514: LD_OWVAR 2
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PPUSH
32523: CALL_OW 69
32527: ST_TO_ADDR
// if not tmp then
32528: LD_VAR 0 2
32532: NOT
32533: IFFALSE 32537
// exit ;
32535: GO 32566
// for i in tmp do
32537: LD_ADDR_VAR 0 1
32541: PUSH
32542: LD_VAR 0 2
32546: PUSH
32547: FOR_IN
32548: IFFALSE 32564
// SetLives ( i , 300 ) ;
32550: LD_VAR 0 1
32554: PPUSH
32555: LD_INT 300
32557: PPUSH
32558: CALL_OW 234
32562: GO 32547
32564: POP
32565: POP
// end ;
32566: PPOPN 2
32568: END
// every 0 0$1 trigger s60 do var i , tmp ;
32569: LD_EXP 146
32573: IFFALSE 32642
32575: GO 32577
32577: DISABLE
32578: LD_INT 0
32580: PPUSH
32581: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
32582: LD_ADDR_VAR 0 2
32586: PUSH
32587: LD_INT 22
32589: PUSH
32590: LD_OWVAR 2
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PPUSH
32599: CALL_OW 69
32603: ST_TO_ADDR
// if not tmp then
32604: LD_VAR 0 2
32608: NOT
32609: IFFALSE 32613
// exit ;
32611: GO 32642
// for i in tmp do
32613: LD_ADDR_VAR 0 1
32617: PUSH
32618: LD_VAR 0 2
32622: PUSH
32623: FOR_IN
32624: IFFALSE 32640
// SetLives ( i , 600 ) ;
32626: LD_VAR 0 1
32630: PPUSH
32631: LD_INT 600
32633: PPUSH
32634: CALL_OW 234
32638: GO 32623
32640: POP
32641: POP
// end ;
32642: PPOPN 2
32644: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
32645: LD_INT 0
32647: PPUSH
// case cmd of 301 :
32648: LD_VAR 0 1
32652: PUSH
32653: LD_INT 301
32655: DOUBLE
32656: EQUAL
32657: IFTRUE 32661
32659: GO 32693
32661: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
32662: LD_VAR 0 6
32666: PPUSH
32667: LD_VAR 0 7
32671: PPUSH
32672: LD_VAR 0 8
32676: PPUSH
32677: LD_VAR 0 4
32681: PPUSH
32682: LD_VAR 0 5
32686: PPUSH
32687: CALL 33894 0 5
32691: GO 32814
32693: LD_INT 302
32695: DOUBLE
32696: EQUAL
32697: IFTRUE 32701
32699: GO 32738
32701: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32702: LD_VAR 0 6
32706: PPUSH
32707: LD_VAR 0 7
32711: PPUSH
32712: LD_VAR 0 8
32716: PPUSH
32717: LD_VAR 0 9
32721: PPUSH
32722: LD_VAR 0 4
32726: PPUSH
32727: LD_VAR 0 5
32731: PPUSH
32732: CALL 33985 0 6
32736: GO 32814
32738: LD_INT 303
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32783
32746: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32747: LD_VAR 0 6
32751: PPUSH
32752: LD_VAR 0 7
32756: PPUSH
32757: LD_VAR 0 8
32761: PPUSH
32762: LD_VAR 0 9
32766: PPUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_VAR 0 5
32776: PPUSH
32777: CALL 32819 0 6
32781: GO 32814
32783: LD_INT 304
32785: DOUBLE
32786: EQUAL
32787: IFTRUE 32791
32789: GO 32813
32791: POP
// hHackTeleport ( unit , x , y ) ; end ;
32792: LD_VAR 0 2
32796: PPUSH
32797: LD_VAR 0 4
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL 34578 0 3
32811: GO 32814
32813: POP
// end ;
32814: LD_VAR 0 12
32818: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32819: LD_INT 0
32821: PPUSH
32822: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32823: LD_VAR 0 1
32827: PUSH
32828: LD_INT 1
32830: LESS
32831: PUSH
32832: LD_VAR 0 1
32836: PUSH
32837: LD_INT 3
32839: GREATER
32840: OR
32841: PUSH
32842: LD_VAR 0 5
32846: PPUSH
32847: LD_VAR 0 6
32851: PPUSH
32852: CALL_OW 428
32856: OR
32857: IFFALSE 32861
// exit ;
32859: GO 33581
// uc_side := your_side ;
32861: LD_ADDR_OWVAR 20
32865: PUSH
32866: LD_OWVAR 2
32870: ST_TO_ADDR
// uc_nation := nation ;
32871: LD_ADDR_OWVAR 21
32875: PUSH
32876: LD_VAR 0 1
32880: ST_TO_ADDR
// bc_level = 1 ;
32881: LD_ADDR_OWVAR 43
32885: PUSH
32886: LD_INT 1
32888: ST_TO_ADDR
// case btype of 1 :
32889: LD_VAR 0 2
32893: PUSH
32894: LD_INT 1
32896: DOUBLE
32897: EQUAL
32898: IFTRUE 32902
32900: GO 32913
32902: POP
// bc_type := b_depot ; 2 :
32903: LD_ADDR_OWVAR 42
32907: PUSH
32908: LD_INT 0
32910: ST_TO_ADDR
32911: GO 33525
32913: LD_INT 2
32915: DOUBLE
32916: EQUAL
32917: IFTRUE 32921
32919: GO 32932
32921: POP
// bc_type := b_warehouse ; 3 :
32922: LD_ADDR_OWVAR 42
32926: PUSH
32927: LD_INT 1
32929: ST_TO_ADDR
32930: GO 33525
32932: LD_INT 3
32934: DOUBLE
32935: EQUAL
32936: IFTRUE 32940
32938: GO 32951
32940: POP
// bc_type := b_lab ; 4 .. 9 :
32941: LD_ADDR_OWVAR 42
32945: PUSH
32946: LD_INT 6
32948: ST_TO_ADDR
32949: GO 33525
32951: LD_INT 4
32953: DOUBLE
32954: GREATEREQUAL
32955: IFFALSE 32963
32957: LD_INT 9
32959: DOUBLE
32960: LESSEQUAL
32961: IFTRUE 32965
32963: GO 33017
32965: POP
// begin bc_type := b_lab_half ;
32966: LD_ADDR_OWVAR 42
32970: PUSH
32971: LD_INT 7
32973: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32974: LD_ADDR_OWVAR 44
32978: PUSH
32979: LD_INT 10
32981: PUSH
32982: LD_INT 11
32984: PUSH
32985: LD_INT 12
32987: PUSH
32988: LD_INT 15
32990: PUSH
32991: LD_INT 14
32993: PUSH
32994: LD_INT 13
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: LIST
33001: LIST
33002: LIST
33003: LIST
33004: PUSH
33005: LD_VAR 0 2
33009: PUSH
33010: LD_INT 3
33012: MINUS
33013: ARRAY
33014: ST_TO_ADDR
// end ; 10 .. 13 :
33015: GO 33525
33017: LD_INT 10
33019: DOUBLE
33020: GREATEREQUAL
33021: IFFALSE 33029
33023: LD_INT 13
33025: DOUBLE
33026: LESSEQUAL
33027: IFTRUE 33031
33029: GO 33108
33031: POP
// begin bc_type := b_lab_full ;
33032: LD_ADDR_OWVAR 42
33036: PUSH
33037: LD_INT 8
33039: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
33040: LD_ADDR_OWVAR 44
33044: PUSH
33045: LD_INT 10
33047: PUSH
33048: LD_INT 12
33050: PUSH
33051: LD_INT 14
33053: PUSH
33054: LD_INT 13
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: PUSH
33063: LD_VAR 0 2
33067: PUSH
33068: LD_INT 9
33070: MINUS
33071: ARRAY
33072: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
33073: LD_ADDR_OWVAR 45
33077: PUSH
33078: LD_INT 11
33080: PUSH
33081: LD_INT 15
33083: PUSH
33084: LD_INT 12
33086: PUSH
33087: LD_INT 15
33089: PUSH
33090: EMPTY
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: PUSH
33096: LD_VAR 0 2
33100: PUSH
33101: LD_INT 9
33103: MINUS
33104: ARRAY
33105: ST_TO_ADDR
// end ; 14 :
33106: GO 33525
33108: LD_INT 14
33110: DOUBLE
33111: EQUAL
33112: IFTRUE 33116
33114: GO 33127
33116: POP
// bc_type := b_workshop ; 15 :
33117: LD_ADDR_OWVAR 42
33121: PUSH
33122: LD_INT 2
33124: ST_TO_ADDR
33125: GO 33525
33127: LD_INT 15
33129: DOUBLE
33130: EQUAL
33131: IFTRUE 33135
33133: GO 33146
33135: POP
// bc_type := b_factory ; 16 :
33136: LD_ADDR_OWVAR 42
33140: PUSH
33141: LD_INT 3
33143: ST_TO_ADDR
33144: GO 33525
33146: LD_INT 16
33148: DOUBLE
33149: EQUAL
33150: IFTRUE 33154
33152: GO 33165
33154: POP
// bc_type := b_ext_gun ; 17 :
33155: LD_ADDR_OWVAR 42
33159: PUSH
33160: LD_INT 17
33162: ST_TO_ADDR
33163: GO 33525
33165: LD_INT 17
33167: DOUBLE
33168: EQUAL
33169: IFTRUE 33173
33171: GO 33201
33173: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
33174: LD_ADDR_OWVAR 42
33178: PUSH
33179: LD_INT 19
33181: PUSH
33182: LD_INT 23
33184: PUSH
33185: LD_INT 19
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PUSH
33193: LD_VAR 0 1
33197: ARRAY
33198: ST_TO_ADDR
33199: GO 33525
33201: LD_INT 18
33203: DOUBLE
33204: EQUAL
33205: IFTRUE 33209
33207: GO 33220
33209: POP
// bc_type := b_ext_radar ; 19 :
33210: LD_ADDR_OWVAR 42
33214: PUSH
33215: LD_INT 20
33217: ST_TO_ADDR
33218: GO 33525
33220: LD_INT 19
33222: DOUBLE
33223: EQUAL
33224: IFTRUE 33228
33226: GO 33239
33228: POP
// bc_type := b_ext_radio ; 20 :
33229: LD_ADDR_OWVAR 42
33233: PUSH
33234: LD_INT 22
33236: ST_TO_ADDR
33237: GO 33525
33239: LD_INT 20
33241: DOUBLE
33242: EQUAL
33243: IFTRUE 33247
33245: GO 33258
33247: POP
// bc_type := b_ext_siberium ; 21 :
33248: LD_ADDR_OWVAR 42
33252: PUSH
33253: LD_INT 21
33255: ST_TO_ADDR
33256: GO 33525
33258: LD_INT 21
33260: DOUBLE
33261: EQUAL
33262: IFTRUE 33266
33264: GO 33277
33266: POP
// bc_type := b_ext_computer ; 22 :
33267: LD_ADDR_OWVAR 42
33271: PUSH
33272: LD_INT 24
33274: ST_TO_ADDR
33275: GO 33525
33277: LD_INT 22
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33296
33285: POP
// bc_type := b_ext_track ; 23 :
33286: LD_ADDR_OWVAR 42
33290: PUSH
33291: LD_INT 16
33293: ST_TO_ADDR
33294: GO 33525
33296: LD_INT 23
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33315
33304: POP
// bc_type := b_ext_laser ; 24 :
33305: LD_ADDR_OWVAR 42
33309: PUSH
33310: LD_INT 25
33312: ST_TO_ADDR
33313: GO 33525
33315: LD_INT 24
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33334
33323: POP
// bc_type := b_control_tower ; 25 :
33324: LD_ADDR_OWVAR 42
33328: PUSH
33329: LD_INT 36
33331: ST_TO_ADDR
33332: GO 33525
33334: LD_INT 25
33336: DOUBLE
33337: EQUAL
33338: IFTRUE 33342
33340: GO 33353
33342: POP
// bc_type := b_breastwork ; 26 :
33343: LD_ADDR_OWVAR 42
33347: PUSH
33348: LD_INT 31
33350: ST_TO_ADDR
33351: GO 33525
33353: LD_INT 26
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33372
33361: POP
// bc_type := b_bunker ; 27 :
33362: LD_ADDR_OWVAR 42
33366: PUSH
33367: LD_INT 32
33369: ST_TO_ADDR
33370: GO 33525
33372: LD_INT 27
33374: DOUBLE
33375: EQUAL
33376: IFTRUE 33380
33378: GO 33391
33380: POP
// bc_type := b_turret ; 28 :
33381: LD_ADDR_OWVAR 42
33385: PUSH
33386: LD_INT 33
33388: ST_TO_ADDR
33389: GO 33525
33391: LD_INT 28
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33410
33399: POP
// bc_type := b_armoury ; 29 :
33400: LD_ADDR_OWVAR 42
33404: PUSH
33405: LD_INT 4
33407: ST_TO_ADDR
33408: GO 33525
33410: LD_INT 29
33412: DOUBLE
33413: EQUAL
33414: IFTRUE 33418
33416: GO 33429
33418: POP
// bc_type := b_barracks ; 30 :
33419: LD_ADDR_OWVAR 42
33423: PUSH
33424: LD_INT 5
33426: ST_TO_ADDR
33427: GO 33525
33429: LD_INT 30
33431: DOUBLE
33432: EQUAL
33433: IFTRUE 33437
33435: GO 33448
33437: POP
// bc_type := b_solar_power ; 31 :
33438: LD_ADDR_OWVAR 42
33442: PUSH
33443: LD_INT 27
33445: ST_TO_ADDR
33446: GO 33525
33448: LD_INT 31
33450: DOUBLE
33451: EQUAL
33452: IFTRUE 33456
33454: GO 33467
33456: POP
// bc_type := b_oil_power ; 32 :
33457: LD_ADDR_OWVAR 42
33461: PUSH
33462: LD_INT 26
33464: ST_TO_ADDR
33465: GO 33525
33467: LD_INT 32
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33486
33475: POP
// bc_type := b_siberite_power ; 33 :
33476: LD_ADDR_OWVAR 42
33480: PUSH
33481: LD_INT 28
33483: ST_TO_ADDR
33484: GO 33525
33486: LD_INT 33
33488: DOUBLE
33489: EQUAL
33490: IFTRUE 33494
33492: GO 33505
33494: POP
// bc_type := b_oil_mine ; 34 :
33495: LD_ADDR_OWVAR 42
33499: PUSH
33500: LD_INT 29
33502: ST_TO_ADDR
33503: GO 33525
33505: LD_INT 34
33507: DOUBLE
33508: EQUAL
33509: IFTRUE 33513
33511: GO 33524
33513: POP
// bc_type := b_siberite_mine ; end ;
33514: LD_ADDR_OWVAR 42
33518: PUSH
33519: LD_INT 30
33521: ST_TO_ADDR
33522: GO 33525
33524: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
33525: LD_ADDR_VAR 0 8
33529: PUSH
33530: LD_VAR 0 5
33534: PPUSH
33535: LD_VAR 0 6
33539: PPUSH
33540: LD_VAR 0 3
33544: PPUSH
33545: CALL_OW 47
33549: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
33550: LD_OWVAR 42
33554: PUSH
33555: LD_INT 32
33557: PUSH
33558: LD_INT 33
33560: PUSH
33561: EMPTY
33562: LIST
33563: LIST
33564: IN
33565: IFFALSE 33581
// PlaceWeaponTurret ( b , weapon ) ;
33567: LD_VAR 0 8
33571: PPUSH
33572: LD_VAR 0 4
33576: PPUSH
33577: CALL_OW 431
// end ;
33581: LD_VAR 0 7
33585: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
33586: LD_INT 0
33588: PPUSH
33589: PPUSH
33590: PPUSH
33591: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33592: LD_ADDR_VAR 0 4
33596: PUSH
33597: LD_INT 22
33599: PUSH
33600: LD_OWVAR 2
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: LD_INT 2
33611: PUSH
33612: LD_INT 30
33614: PUSH
33615: LD_INT 0
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 30
33624: PUSH
33625: LD_INT 1
33627: PUSH
33628: EMPTY
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: LIST
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PPUSH
33641: CALL_OW 69
33645: ST_TO_ADDR
// if not tmp then
33646: LD_VAR 0 4
33650: NOT
33651: IFFALSE 33655
// exit ;
33653: GO 33714
// for i in tmp do
33655: LD_ADDR_VAR 0 2
33659: PUSH
33660: LD_VAR 0 4
33664: PUSH
33665: FOR_IN
33666: IFFALSE 33712
// for j = 1 to 3 do
33668: LD_ADDR_VAR 0 3
33672: PUSH
33673: DOUBLE
33674: LD_INT 1
33676: DEC
33677: ST_TO_ADDR
33678: LD_INT 3
33680: PUSH
33681: FOR_TO
33682: IFFALSE 33708
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33684: LD_VAR 0 2
33688: PPUSH
33689: CALL_OW 274
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: LD_INT 99999
33701: PPUSH
33702: CALL_OW 277
33706: GO 33681
33708: POP
33709: POP
33710: GO 33665
33712: POP
33713: POP
// end ;
33714: LD_VAR 0 1
33718: RET
// export function hHackSetLevel10 ; var i , j ; begin
33719: LD_INT 0
33721: PPUSH
33722: PPUSH
33723: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33724: LD_ADDR_VAR 0 2
33728: PUSH
33729: LD_INT 21
33731: PUSH
33732: LD_INT 1
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: PPUSH
33739: CALL_OW 69
33743: PUSH
33744: FOR_IN
33745: IFFALSE 33797
// if IsSelected ( i ) then
33747: LD_VAR 0 2
33751: PPUSH
33752: CALL_OW 306
33756: IFFALSE 33795
// begin for j := 1 to 4 do
33758: LD_ADDR_VAR 0 3
33762: PUSH
33763: DOUBLE
33764: LD_INT 1
33766: DEC
33767: ST_TO_ADDR
33768: LD_INT 4
33770: PUSH
33771: FOR_TO
33772: IFFALSE 33793
// SetSkill ( i , j , 10 ) ;
33774: LD_VAR 0 2
33778: PPUSH
33779: LD_VAR 0 3
33783: PPUSH
33784: LD_INT 10
33786: PPUSH
33787: CALL_OW 237
33791: GO 33771
33793: POP
33794: POP
// end ;
33795: GO 33744
33797: POP
33798: POP
// end ;
33799: LD_VAR 0 1
33803: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33804: LD_INT 0
33806: PPUSH
33807: PPUSH
33808: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33809: LD_ADDR_VAR 0 2
33813: PUSH
33814: LD_INT 22
33816: PUSH
33817: LD_OWVAR 2
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 21
33828: PUSH
33829: LD_INT 1
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: PUSH
33836: EMPTY
33837: LIST
33838: LIST
33839: PPUSH
33840: CALL_OW 69
33844: PUSH
33845: FOR_IN
33846: IFFALSE 33887
// begin for j := 1 to 4 do
33848: LD_ADDR_VAR 0 3
33852: PUSH
33853: DOUBLE
33854: LD_INT 1
33856: DEC
33857: ST_TO_ADDR
33858: LD_INT 4
33860: PUSH
33861: FOR_TO
33862: IFFALSE 33883
// SetSkill ( i , j , 10 ) ;
33864: LD_VAR 0 2
33868: PPUSH
33869: LD_VAR 0 3
33873: PPUSH
33874: LD_INT 10
33876: PPUSH
33877: CALL_OW 237
33881: GO 33861
33883: POP
33884: POP
// end ;
33885: GO 33845
33887: POP
33888: POP
// end ;
33889: LD_VAR 0 1
33893: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33894: LD_INT 0
33896: PPUSH
// uc_side := your_side ;
33897: LD_ADDR_OWVAR 20
33901: PUSH
33902: LD_OWVAR 2
33906: ST_TO_ADDR
// uc_nation := nation ;
33907: LD_ADDR_OWVAR 21
33911: PUSH
33912: LD_VAR 0 1
33916: ST_TO_ADDR
// InitHc ;
33917: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33921: LD_INT 0
33923: PPUSH
33924: LD_VAR 0 2
33928: PPUSH
33929: LD_VAR 0 3
33933: PPUSH
33934: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33938: LD_VAR 0 4
33942: PPUSH
33943: LD_VAR 0 5
33947: PPUSH
33948: CALL_OW 428
33952: PUSH
33953: LD_INT 0
33955: EQUAL
33956: IFFALSE 33980
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33958: CALL_OW 44
33962: PPUSH
33963: LD_VAR 0 4
33967: PPUSH
33968: LD_VAR 0 5
33972: PPUSH
33973: LD_INT 1
33975: PPUSH
33976: CALL_OW 48
// end ;
33980: LD_VAR 0 6
33984: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33985: LD_INT 0
33987: PPUSH
33988: PPUSH
// uc_side := your_side ;
33989: LD_ADDR_OWVAR 20
33993: PUSH
33994: LD_OWVAR 2
33998: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33999: LD_VAR 0 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: LD_INT 2
34009: PUSH
34010: LD_INT 3
34012: PUSH
34013: LD_INT 4
34015: PUSH
34016: LD_INT 5
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: IN
34026: IFFALSE 34038
// uc_nation := nation_american else
34028: LD_ADDR_OWVAR 21
34032: PUSH
34033: LD_INT 1
34035: ST_TO_ADDR
34036: GO 34081
// if chassis in [ 11 , 12 , 13 , 14 ] then
34038: LD_VAR 0 1
34042: PUSH
34043: LD_INT 11
34045: PUSH
34046: LD_INT 12
34048: PUSH
34049: LD_INT 13
34051: PUSH
34052: LD_INT 14
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: IN
34061: IFFALSE 34073
// uc_nation := nation_arabian else
34063: LD_ADDR_OWVAR 21
34067: PUSH
34068: LD_INT 2
34070: ST_TO_ADDR
34071: GO 34081
// uc_nation := nation_russian ;
34073: LD_ADDR_OWVAR 21
34077: PUSH
34078: LD_INT 3
34080: ST_TO_ADDR
// vc_chassis := chassis ;
34081: LD_ADDR_OWVAR 37
34085: PUSH
34086: LD_VAR 0 1
34090: ST_TO_ADDR
// vc_engine := engine ;
34091: LD_ADDR_OWVAR 39
34095: PUSH
34096: LD_VAR 0 2
34100: ST_TO_ADDR
// vc_control := control ;
34101: LD_ADDR_OWVAR 38
34105: PUSH
34106: LD_VAR 0 3
34110: ST_TO_ADDR
// vc_weapon := weapon ;
34111: LD_ADDR_OWVAR 40
34115: PUSH
34116: LD_VAR 0 4
34120: ST_TO_ADDR
// un := CreateVehicle ;
34121: LD_ADDR_VAR 0 8
34125: PUSH
34126: CALL_OW 45
34130: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
34131: LD_VAR 0 8
34135: PPUSH
34136: LD_INT 0
34138: PPUSH
34139: LD_INT 5
34141: PPUSH
34142: CALL_OW 12
34146: PPUSH
34147: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
34151: LD_VAR 0 8
34155: PPUSH
34156: LD_VAR 0 5
34160: PPUSH
34161: LD_VAR 0 6
34165: PPUSH
34166: LD_INT 1
34168: PPUSH
34169: CALL_OW 48
// end ;
34173: LD_VAR 0 7
34177: RET
// export hInvincible ; every 1 do
34178: GO 34180
34180: DISABLE
// hInvincible := [ ] ;
34181: LD_ADDR_EXP 147
34185: PUSH
34186: EMPTY
34187: ST_TO_ADDR
34188: END
// every 10 do var i ;
34189: GO 34191
34191: DISABLE
34192: LD_INT 0
34194: PPUSH
// begin enable ;
34195: ENABLE
// if not hInvincible then
34196: LD_EXP 147
34200: NOT
34201: IFFALSE 34205
// exit ;
34203: GO 34249
// for i in hInvincible do
34205: LD_ADDR_VAR 0 1
34209: PUSH
34210: LD_EXP 147
34214: PUSH
34215: FOR_IN
34216: IFFALSE 34247
// if GetLives ( i ) < 1000 then
34218: LD_VAR 0 1
34222: PPUSH
34223: CALL_OW 256
34227: PUSH
34228: LD_INT 1000
34230: LESS
34231: IFFALSE 34245
// SetLives ( i , 1000 ) ;
34233: LD_VAR 0 1
34237: PPUSH
34238: LD_INT 1000
34240: PPUSH
34241: CALL_OW 234
34245: GO 34215
34247: POP
34248: POP
// end ;
34249: PPOPN 1
34251: END
// export function hHackInvincible ; var i ; begin
34252: LD_INT 0
34254: PPUSH
34255: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
34256: LD_ADDR_VAR 0 2
34260: PUSH
34261: LD_INT 2
34263: PUSH
34264: LD_INT 21
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 21
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: PPUSH
34289: CALL_OW 69
34293: PUSH
34294: FOR_IN
34295: IFFALSE 34356
// if IsSelected ( i ) then
34297: LD_VAR 0 2
34301: PPUSH
34302: CALL_OW 306
34306: IFFALSE 34354
// begin if i in hInvincible then
34308: LD_VAR 0 2
34312: PUSH
34313: LD_EXP 147
34317: IN
34318: IFFALSE 34338
// hInvincible := hInvincible diff i else
34320: LD_ADDR_EXP 147
34324: PUSH
34325: LD_EXP 147
34329: PUSH
34330: LD_VAR 0 2
34334: DIFF
34335: ST_TO_ADDR
34336: GO 34354
// hInvincible := hInvincible union i ;
34338: LD_ADDR_EXP 147
34342: PUSH
34343: LD_EXP 147
34347: PUSH
34348: LD_VAR 0 2
34352: UNION
34353: ST_TO_ADDR
// end ;
34354: GO 34294
34356: POP
34357: POP
// end ;
34358: LD_VAR 0 1
34362: RET
// export function hHackInvisible ; var i , j ; begin
34363: LD_INT 0
34365: PPUSH
34366: PPUSH
34367: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
34368: LD_ADDR_VAR 0 2
34372: PUSH
34373: LD_INT 21
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: PPUSH
34383: CALL_OW 69
34387: PUSH
34388: FOR_IN
34389: IFFALSE 34413
// if IsSelected ( i ) then
34391: LD_VAR 0 2
34395: PPUSH
34396: CALL_OW 306
34400: IFFALSE 34411
// ComForceInvisible ( i ) ;
34402: LD_VAR 0 2
34406: PPUSH
34407: CALL_OW 496
34411: GO 34388
34413: POP
34414: POP
// end ;
34415: LD_VAR 0 1
34419: RET
// export function hHackChangeYourSide ; begin
34420: LD_INT 0
34422: PPUSH
// if your_side = 8 then
34423: LD_OWVAR 2
34427: PUSH
34428: LD_INT 8
34430: EQUAL
34431: IFFALSE 34443
// your_side := 0 else
34433: LD_ADDR_OWVAR 2
34437: PUSH
34438: LD_INT 0
34440: ST_TO_ADDR
34441: GO 34457
// your_side := your_side + 1 ;
34443: LD_ADDR_OWVAR 2
34447: PUSH
34448: LD_OWVAR 2
34452: PUSH
34453: LD_INT 1
34455: PLUS
34456: ST_TO_ADDR
// end ;
34457: LD_VAR 0 1
34461: RET
// export function hHackChangeUnitSide ; var i , j ; begin
34462: LD_INT 0
34464: PPUSH
34465: PPUSH
34466: PPUSH
// for i in all_units do
34467: LD_ADDR_VAR 0 2
34471: PUSH
34472: LD_OWVAR 3
34476: PUSH
34477: FOR_IN
34478: IFFALSE 34556
// if IsSelected ( i ) then
34480: LD_VAR 0 2
34484: PPUSH
34485: CALL_OW 306
34489: IFFALSE 34554
// begin j := GetSide ( i ) ;
34491: LD_ADDR_VAR 0 3
34495: PUSH
34496: LD_VAR 0 2
34500: PPUSH
34501: CALL_OW 255
34505: ST_TO_ADDR
// if j = 8 then
34506: LD_VAR 0 3
34510: PUSH
34511: LD_INT 8
34513: EQUAL
34514: IFFALSE 34526
// j := 0 else
34516: LD_ADDR_VAR 0 3
34520: PUSH
34521: LD_INT 0
34523: ST_TO_ADDR
34524: GO 34540
// j := j + 1 ;
34526: LD_ADDR_VAR 0 3
34530: PUSH
34531: LD_VAR 0 3
34535: PUSH
34536: LD_INT 1
34538: PLUS
34539: ST_TO_ADDR
// SetSide ( i , j ) ;
34540: LD_VAR 0 2
34544: PPUSH
34545: LD_VAR 0 3
34549: PPUSH
34550: CALL_OW 235
// end ;
34554: GO 34477
34556: POP
34557: POP
// end ;
34558: LD_VAR 0 1
34562: RET
// export function hHackFog ; begin
34563: LD_INT 0
34565: PPUSH
// FogOff ( true ) ;
34566: LD_INT 1
34568: PPUSH
34569: CALL_OW 344
// end ;
34573: LD_VAR 0 1
34577: RET
// export function hHackTeleport ( unit , x , y ) ; begin
34578: LD_INT 0
34580: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
34581: LD_VAR 0 1
34585: PPUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_INT 1
34598: PPUSH
34599: LD_INT 1
34601: PPUSH
34602: CALL_OW 483
// CenterOnXY ( x , y ) ;
34606: LD_VAR 0 2
34610: PPUSH
34611: LD_VAR 0 3
34615: PPUSH
34616: CALL_OW 84
// end ; end_of_file
34620: LD_VAR 0 4
34624: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34625: LD_INT 0
34627: PPUSH
34628: PPUSH
34629: PPUSH
34630: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34631: LD_VAR 0 1
34635: PPUSH
34636: CALL_OW 264
34640: PUSH
34641: LD_EXP 164
34645: EQUAL
34646: IFFALSE 34718
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34648: LD_INT 68
34650: PPUSH
34651: LD_VAR 0 1
34655: PPUSH
34656: CALL_OW 255
34660: PPUSH
34661: CALL_OW 321
34665: PUSH
34666: LD_INT 2
34668: EQUAL
34669: IFFALSE 34681
// eff := 70 else
34671: LD_ADDR_VAR 0 4
34675: PUSH
34676: LD_INT 70
34678: ST_TO_ADDR
34679: GO 34689
// eff := 30 ;
34681: LD_ADDR_VAR 0 4
34685: PUSH
34686: LD_INT 30
34688: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34689: LD_VAR 0 1
34693: PPUSH
34694: CALL_OW 250
34698: PPUSH
34699: LD_VAR 0 1
34703: PPUSH
34704: CALL_OW 251
34708: PPUSH
34709: LD_VAR 0 4
34713: PPUSH
34714: CALL_OW 495
// end ; end ;
34718: LD_VAR 0 2
34722: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34723: LD_INT 0
34725: PPUSH
// end ;
34726: LD_VAR 0 4
34730: RET
// export function SOS_Command ( cmd ) ; begin
34731: LD_INT 0
34733: PPUSH
// end ;
34734: LD_VAR 0 2
34738: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34739: LD_INT 0
34741: PPUSH
// end ;
34742: LD_VAR 0 6
34746: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34747: LD_INT 0
34749: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34750: LD_VAR 0 1
34754: PUSH
34755: LD_INT 250
34757: EQUAL
34758: PUSH
34759: LD_VAR 0 2
34763: PPUSH
34764: CALL_OW 264
34768: PUSH
34769: LD_EXP 167
34773: EQUAL
34774: AND
34775: IFFALSE 34796
// MinerPlaceMine ( unit , x , y ) ;
34777: LD_VAR 0 2
34781: PPUSH
34782: LD_VAR 0 4
34786: PPUSH
34787: LD_VAR 0 5
34791: PPUSH
34792: CALL 37145 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34796: LD_VAR 0 1
34800: PUSH
34801: LD_INT 251
34803: EQUAL
34804: PUSH
34805: LD_VAR 0 2
34809: PPUSH
34810: CALL_OW 264
34814: PUSH
34815: LD_EXP 167
34819: EQUAL
34820: AND
34821: IFFALSE 34842
// MinerDetonateMine ( unit , x , y ) ;
34823: LD_VAR 0 2
34827: PPUSH
34828: LD_VAR 0 4
34832: PPUSH
34833: LD_VAR 0 5
34837: PPUSH
34838: CALL 37422 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34842: LD_VAR 0 1
34846: PUSH
34847: LD_INT 252
34849: EQUAL
34850: PUSH
34851: LD_VAR 0 2
34855: PPUSH
34856: CALL_OW 264
34860: PUSH
34861: LD_EXP 167
34865: EQUAL
34866: AND
34867: IFFALSE 34888
// MinerCreateMinefield ( unit , x , y ) ;
34869: LD_VAR 0 2
34873: PPUSH
34874: LD_VAR 0 4
34878: PPUSH
34879: LD_VAR 0 5
34883: PPUSH
34884: CALL 37839 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34888: LD_VAR 0 1
34892: PUSH
34893: LD_INT 253
34895: EQUAL
34896: PUSH
34897: LD_VAR 0 2
34901: PPUSH
34902: CALL_OW 257
34906: PUSH
34907: LD_INT 5
34909: EQUAL
34910: AND
34911: IFFALSE 34932
// ComBinocular ( unit , x , y ) ;
34913: LD_VAR 0 2
34917: PPUSH
34918: LD_VAR 0 4
34922: PPUSH
34923: LD_VAR 0 5
34927: PPUSH
34928: CALL 38210 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34932: LD_VAR 0 1
34936: PUSH
34937: LD_INT 254
34939: EQUAL
34940: PUSH
34941: LD_VAR 0 2
34945: PPUSH
34946: CALL_OW 264
34950: PUSH
34951: LD_EXP 162
34955: EQUAL
34956: AND
34957: PUSH
34958: LD_VAR 0 3
34962: PPUSH
34963: CALL_OW 263
34967: PUSH
34968: LD_INT 3
34970: EQUAL
34971: AND
34972: IFFALSE 34988
// HackDestroyVehicle ( unit , selectedUnit ) ;
34974: LD_VAR 0 2
34978: PPUSH
34979: LD_VAR 0 3
34983: PPUSH
34984: CALL 36505 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34988: LD_VAR 0 1
34992: PUSH
34993: LD_INT 255
34995: EQUAL
34996: PUSH
34997: LD_VAR 0 2
35001: PPUSH
35002: CALL_OW 264
35006: PUSH
35007: LD_INT 14
35009: PUSH
35010: LD_INT 53
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: IN
35017: AND
35018: PUSH
35019: LD_VAR 0 4
35023: PPUSH
35024: LD_VAR 0 5
35028: PPUSH
35029: CALL_OW 488
35033: AND
35034: IFFALSE 35058
// CutTreeXYR ( unit , x , y , 12 ) ;
35036: LD_VAR 0 2
35040: PPUSH
35041: LD_VAR 0 4
35045: PPUSH
35046: LD_VAR 0 5
35050: PPUSH
35051: LD_INT 12
35053: PPUSH
35054: CALL 35071 0 4
// end ;
35058: LD_VAR 0 6
35062: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
35063: LD_INT 0
35065: PPUSH
// end ;
35066: LD_VAR 0 4
35070: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35071: LD_INT 0
35073: PPUSH
35074: PPUSH
35075: PPUSH
35076: PPUSH
35077: PPUSH
35078: PPUSH
35079: PPUSH
35080: PPUSH
35081: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35082: LD_VAR 0 1
35086: NOT
35087: PUSH
35088: LD_VAR 0 2
35092: PPUSH
35093: LD_VAR 0 3
35097: PPUSH
35098: CALL_OW 488
35102: NOT
35103: OR
35104: PUSH
35105: LD_VAR 0 4
35109: NOT
35110: OR
35111: IFFALSE 35115
// exit ;
35113: GO 35455
// list := [ ] ;
35115: LD_ADDR_VAR 0 13
35119: PUSH
35120: EMPTY
35121: ST_TO_ADDR
// if x - r < 0 then
35122: LD_VAR 0 2
35126: PUSH
35127: LD_VAR 0 4
35131: MINUS
35132: PUSH
35133: LD_INT 0
35135: LESS
35136: IFFALSE 35148
// min_x := 0 else
35138: LD_ADDR_VAR 0 7
35142: PUSH
35143: LD_INT 0
35145: ST_TO_ADDR
35146: GO 35164
// min_x := x - r ;
35148: LD_ADDR_VAR 0 7
35152: PUSH
35153: LD_VAR 0 2
35157: PUSH
35158: LD_VAR 0 4
35162: MINUS
35163: ST_TO_ADDR
// if y - r < 0 then
35164: LD_VAR 0 3
35168: PUSH
35169: LD_VAR 0 4
35173: MINUS
35174: PUSH
35175: LD_INT 0
35177: LESS
35178: IFFALSE 35190
// min_y := 0 else
35180: LD_ADDR_VAR 0 8
35184: PUSH
35185: LD_INT 0
35187: ST_TO_ADDR
35188: GO 35206
// min_y := y - r ;
35190: LD_ADDR_VAR 0 8
35194: PUSH
35195: LD_VAR 0 3
35199: PUSH
35200: LD_VAR 0 4
35204: MINUS
35205: ST_TO_ADDR
// max_x := x + r ;
35206: LD_ADDR_VAR 0 9
35210: PUSH
35211: LD_VAR 0 2
35215: PUSH
35216: LD_VAR 0 4
35220: PLUS
35221: ST_TO_ADDR
// max_y := y + r ;
35222: LD_ADDR_VAR 0 10
35226: PUSH
35227: LD_VAR 0 3
35231: PUSH
35232: LD_VAR 0 4
35236: PLUS
35237: ST_TO_ADDR
// for _x = min_x to max_x do
35238: LD_ADDR_VAR 0 11
35242: PUSH
35243: DOUBLE
35244: LD_VAR 0 7
35248: DEC
35249: ST_TO_ADDR
35250: LD_VAR 0 9
35254: PUSH
35255: FOR_TO
35256: IFFALSE 35373
// for _y = min_y to max_y do
35258: LD_ADDR_VAR 0 12
35262: PUSH
35263: DOUBLE
35264: LD_VAR 0 8
35268: DEC
35269: ST_TO_ADDR
35270: LD_VAR 0 10
35274: PUSH
35275: FOR_TO
35276: IFFALSE 35369
// begin if not ValidHex ( _x , _y ) then
35278: LD_VAR 0 11
35282: PPUSH
35283: LD_VAR 0 12
35287: PPUSH
35288: CALL_OW 488
35292: NOT
35293: IFFALSE 35297
// continue ;
35295: GO 35275
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35297: LD_VAR 0 11
35301: PPUSH
35302: LD_VAR 0 12
35306: PPUSH
35307: CALL_OW 351
35311: PUSH
35312: LD_VAR 0 11
35316: PPUSH
35317: LD_VAR 0 12
35321: PPUSH
35322: CALL_OW 554
35326: AND
35327: IFFALSE 35367
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35329: LD_ADDR_VAR 0 13
35333: PUSH
35334: LD_VAR 0 13
35338: PPUSH
35339: LD_VAR 0 13
35343: PUSH
35344: LD_INT 1
35346: PLUS
35347: PPUSH
35348: LD_VAR 0 11
35352: PUSH
35353: LD_VAR 0 12
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PPUSH
35362: CALL_OW 2
35366: ST_TO_ADDR
// end ;
35367: GO 35275
35369: POP
35370: POP
35371: GO 35255
35373: POP
35374: POP
// if not list then
35375: LD_VAR 0 13
35379: NOT
35380: IFFALSE 35384
// exit ;
35382: GO 35455
// for i in list do
35384: LD_ADDR_VAR 0 6
35388: PUSH
35389: LD_VAR 0 13
35393: PUSH
35394: FOR_IN
35395: IFFALSE 35453
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35397: LD_VAR 0 1
35401: PPUSH
35402: LD_STRING M
35404: PUSH
35405: LD_VAR 0 6
35409: PUSH
35410: LD_INT 1
35412: ARRAY
35413: PUSH
35414: LD_VAR 0 6
35418: PUSH
35419: LD_INT 2
35421: ARRAY
35422: PUSH
35423: LD_INT 0
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: LIST
35441: LIST
35442: LIST
35443: PUSH
35444: EMPTY
35445: LIST
35446: PPUSH
35447: CALL_OW 447
35451: GO 35394
35453: POP
35454: POP
// end ;
35455: LD_VAR 0 5
35459: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35460: LD_EXP 150
35464: NOT
35465: IFFALSE 35515
35467: GO 35469
35469: DISABLE
// begin initHack := true ;
35470: LD_ADDR_EXP 150
35474: PUSH
35475: LD_INT 1
35477: ST_TO_ADDR
// hackTanks := [ ] ;
35478: LD_ADDR_EXP 151
35482: PUSH
35483: EMPTY
35484: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35485: LD_ADDR_EXP 152
35489: PUSH
35490: EMPTY
35491: ST_TO_ADDR
// hackLimit := 3 ;
35492: LD_ADDR_EXP 153
35496: PUSH
35497: LD_INT 3
35499: ST_TO_ADDR
// hackDist := 12 ;
35500: LD_ADDR_EXP 154
35504: PUSH
35505: LD_INT 12
35507: ST_TO_ADDR
// hackCounter := [ ] ;
35508: LD_ADDR_EXP 155
35512: PUSH
35513: EMPTY
35514: ST_TO_ADDR
// end ;
35515: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35516: LD_EXP 150
35520: PUSH
35521: LD_INT 34
35523: PUSH
35524: LD_EXP 162
35528: PUSH
35529: EMPTY
35530: LIST
35531: LIST
35532: PPUSH
35533: CALL_OW 69
35537: AND
35538: IFFALSE 35793
35540: GO 35542
35542: DISABLE
35543: LD_INT 0
35545: PPUSH
35546: PPUSH
// begin enable ;
35547: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35548: LD_ADDR_VAR 0 1
35552: PUSH
35553: LD_INT 34
35555: PUSH
35556: LD_EXP 162
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PPUSH
35565: CALL_OW 69
35569: PUSH
35570: FOR_IN
35571: IFFALSE 35791
// begin if not i in hackTanks then
35573: LD_VAR 0 1
35577: PUSH
35578: LD_EXP 151
35582: IN
35583: NOT
35584: IFFALSE 35667
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35586: LD_ADDR_EXP 151
35590: PUSH
35591: LD_EXP 151
35595: PPUSH
35596: LD_EXP 151
35600: PUSH
35601: LD_INT 1
35603: PLUS
35604: PPUSH
35605: LD_VAR 0 1
35609: PPUSH
35610: CALL_OW 1
35614: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35615: LD_ADDR_EXP 152
35619: PUSH
35620: LD_EXP 152
35624: PPUSH
35625: LD_EXP 152
35629: PUSH
35630: LD_INT 1
35632: PLUS
35633: PPUSH
35634: EMPTY
35635: PPUSH
35636: CALL_OW 1
35640: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35641: LD_ADDR_EXP 155
35645: PUSH
35646: LD_EXP 155
35650: PPUSH
35651: LD_EXP 155
35655: PUSH
35656: LD_INT 1
35658: PLUS
35659: PPUSH
35660: EMPTY
35661: PPUSH
35662: CALL_OW 1
35666: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35667: LD_VAR 0 1
35671: PPUSH
35672: CALL_OW 302
35676: NOT
35677: IFFALSE 35690
// begin HackUnlinkAll ( i ) ;
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL 35796 0 1
// continue ;
35688: GO 35570
// end ; HackCheckCapturedStatus ( i ) ;
35690: LD_VAR 0 1
35694: PPUSH
35695: CALL 36239 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35699: LD_ADDR_VAR 0 2
35703: PUSH
35704: LD_INT 81
35706: PUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 255
35716: PUSH
35717: EMPTY
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 33
35723: PUSH
35724: LD_INT 3
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 91
35733: PUSH
35734: LD_VAR 0 1
35738: PUSH
35739: LD_EXP 154
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 50
35751: PUSH
35752: EMPTY
35753: LIST
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: LIST
35759: LIST
35760: PPUSH
35761: CALL_OW 69
35765: ST_TO_ADDR
// if not tmp then
35766: LD_VAR 0 2
35770: NOT
35771: IFFALSE 35775
// continue ;
35773: GO 35570
// HackLink ( i , tmp ) ;
35775: LD_VAR 0 1
35779: PPUSH
35780: LD_VAR 0 2
35784: PPUSH
35785: CALL 35932 0 2
// end ;
35789: GO 35570
35791: POP
35792: POP
// end ;
35793: PPOPN 2
35795: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35796: LD_INT 0
35798: PPUSH
35799: PPUSH
35800: PPUSH
// if not hack in hackTanks then
35801: LD_VAR 0 1
35805: PUSH
35806: LD_EXP 151
35810: IN
35811: NOT
35812: IFFALSE 35816
// exit ;
35814: GO 35927
// index := GetElementIndex ( hackTanks , hack ) ;
35816: LD_ADDR_VAR 0 4
35820: PUSH
35821: LD_EXP 151
35825: PPUSH
35826: LD_VAR 0 1
35830: PPUSH
35831: CALL 43569 0 2
35835: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35836: LD_EXP 152
35840: PUSH
35841: LD_VAR 0 4
35845: ARRAY
35846: IFFALSE 35927
// begin for i in hackTanksCaptured [ index ] do
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_EXP 152
35857: PUSH
35858: LD_VAR 0 4
35862: ARRAY
35863: PUSH
35864: FOR_IN
35865: IFFALSE 35891
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35867: LD_VAR 0 3
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: PPUSH
35876: LD_VAR 0 3
35880: PUSH
35881: LD_INT 2
35883: ARRAY
35884: PPUSH
35885: CALL_OW 235
35889: GO 35864
35891: POP
35892: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35893: LD_ADDR_EXP 152
35897: PUSH
35898: LD_EXP 152
35902: PPUSH
35903: LD_VAR 0 4
35907: PPUSH
35908: EMPTY
35909: PPUSH
35910: CALL_OW 1
35914: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35915: LD_VAR 0 1
35919: PPUSH
35920: LD_INT 0
35922: PPUSH
35923: CALL_OW 505
// end ; end ;
35927: LD_VAR 0 2
35931: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
35936: PPUSH
// if not hack in hackTanks or not vehicles then
35937: LD_VAR 0 1
35941: PUSH
35942: LD_EXP 151
35946: IN
35947: NOT
35948: PUSH
35949: LD_VAR 0 2
35953: NOT
35954: OR
35955: IFFALSE 35959
// exit ;
35957: GO 36234
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35959: LD_ADDR_VAR 0 2
35963: PUSH
35964: LD_VAR 0 1
35968: PPUSH
35969: LD_VAR 0 2
35973: PPUSH
35974: LD_INT 1
35976: PPUSH
35977: LD_INT 1
35979: PPUSH
35980: CALL 44219 0 4
35984: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35985: LD_ADDR_VAR 0 5
35989: PUSH
35990: LD_EXP 151
35994: PPUSH
35995: LD_VAR 0 1
35999: PPUSH
36000: CALL 43569 0 2
36004: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36005: LD_EXP 152
36009: PUSH
36010: LD_VAR 0 5
36014: ARRAY
36015: PUSH
36016: LD_EXP 153
36020: LESS
36021: IFFALSE 36210
// begin for i := 1 to vehicles do
36023: LD_ADDR_VAR 0 4
36027: PUSH
36028: DOUBLE
36029: LD_INT 1
36031: DEC
36032: ST_TO_ADDR
36033: LD_VAR 0 2
36037: PUSH
36038: FOR_TO
36039: IFFALSE 36208
// begin if hackTanksCaptured [ index ] = hackLimit then
36041: LD_EXP 152
36045: PUSH
36046: LD_VAR 0 5
36050: ARRAY
36051: PUSH
36052: LD_EXP 153
36056: EQUAL
36057: IFFALSE 36061
// break ;
36059: GO 36208
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36061: LD_ADDR_EXP 155
36065: PUSH
36066: LD_EXP 155
36070: PPUSH
36071: LD_VAR 0 5
36075: PPUSH
36076: LD_EXP 155
36080: PUSH
36081: LD_VAR 0 5
36085: ARRAY
36086: PUSH
36087: LD_INT 1
36089: PLUS
36090: PPUSH
36091: CALL_OW 1
36095: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36096: LD_ADDR_EXP 152
36100: PUSH
36101: LD_EXP 152
36105: PPUSH
36106: LD_VAR 0 5
36110: PUSH
36111: LD_EXP 152
36115: PUSH
36116: LD_VAR 0 5
36120: ARRAY
36121: PUSH
36122: LD_INT 1
36124: PLUS
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PPUSH
36130: LD_VAR 0 2
36134: PUSH
36135: LD_VAR 0 4
36139: ARRAY
36140: PUSH
36141: LD_VAR 0 2
36145: PUSH
36146: LD_VAR 0 4
36150: ARRAY
36151: PPUSH
36152: CALL_OW 255
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PPUSH
36161: CALL 43784 0 3
36165: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36166: LD_VAR 0 2
36170: PUSH
36171: LD_VAR 0 4
36175: ARRAY
36176: PPUSH
36177: LD_VAR 0 1
36181: PPUSH
36182: CALL_OW 255
36186: PPUSH
36187: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36191: LD_VAR 0 2
36195: PUSH
36196: LD_VAR 0 4
36200: ARRAY
36201: PPUSH
36202: CALL_OW 141
// end ;
36206: GO 36038
36208: POP
36209: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36210: LD_VAR 0 1
36214: PPUSH
36215: LD_EXP 152
36219: PUSH
36220: LD_VAR 0 5
36224: ARRAY
36225: PUSH
36226: LD_INT 0
36228: PLUS
36229: PPUSH
36230: CALL_OW 505
// end ;
36234: LD_VAR 0 3
36238: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36239: LD_INT 0
36241: PPUSH
36242: PPUSH
36243: PPUSH
36244: PPUSH
// if not hack in hackTanks then
36245: LD_VAR 0 1
36249: PUSH
36250: LD_EXP 151
36254: IN
36255: NOT
36256: IFFALSE 36260
// exit ;
36258: GO 36500
// index := GetElementIndex ( hackTanks , hack ) ;
36260: LD_ADDR_VAR 0 4
36264: PUSH
36265: LD_EXP 151
36269: PPUSH
36270: LD_VAR 0 1
36274: PPUSH
36275: CALL 43569 0 2
36279: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36280: LD_ADDR_VAR 0 3
36284: PUSH
36285: DOUBLE
36286: LD_EXP 152
36290: PUSH
36291: LD_VAR 0 4
36295: ARRAY
36296: INC
36297: ST_TO_ADDR
36298: LD_INT 1
36300: PUSH
36301: FOR_DOWNTO
36302: IFFALSE 36474
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36304: LD_ADDR_VAR 0 5
36308: PUSH
36309: LD_EXP 152
36313: PUSH
36314: LD_VAR 0 4
36318: ARRAY
36319: PUSH
36320: LD_VAR 0 3
36324: ARRAY
36325: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36326: LD_VAR 0 5
36330: PUSH
36331: LD_INT 1
36333: ARRAY
36334: PPUSH
36335: CALL_OW 302
36339: NOT
36340: PUSH
36341: LD_VAR 0 5
36345: PUSH
36346: LD_INT 1
36348: ARRAY
36349: PPUSH
36350: CALL_OW 255
36354: PUSH
36355: LD_VAR 0 1
36359: PPUSH
36360: CALL_OW 255
36364: NONEQUAL
36365: OR
36366: IFFALSE 36472
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36368: LD_VAR 0 5
36372: PUSH
36373: LD_INT 1
36375: ARRAY
36376: PPUSH
36377: CALL_OW 305
36381: PUSH
36382: LD_VAR 0 5
36386: PUSH
36387: LD_INT 1
36389: ARRAY
36390: PPUSH
36391: CALL_OW 255
36395: PUSH
36396: LD_VAR 0 1
36400: PPUSH
36401: CALL_OW 255
36405: EQUAL
36406: AND
36407: IFFALSE 36431
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36409: LD_VAR 0 5
36413: PUSH
36414: LD_INT 1
36416: ARRAY
36417: PPUSH
36418: LD_VAR 0 5
36422: PUSH
36423: LD_INT 2
36425: ARRAY
36426: PPUSH
36427: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36431: LD_ADDR_EXP 152
36435: PUSH
36436: LD_EXP 152
36440: PPUSH
36441: LD_VAR 0 4
36445: PPUSH
36446: LD_EXP 152
36450: PUSH
36451: LD_VAR 0 4
36455: ARRAY
36456: PPUSH
36457: LD_VAR 0 3
36461: PPUSH
36462: CALL_OW 3
36466: PPUSH
36467: CALL_OW 1
36471: ST_TO_ADDR
// end ; end ;
36472: GO 36301
36474: POP
36475: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36476: LD_VAR 0 1
36480: PPUSH
36481: LD_EXP 152
36485: PUSH
36486: LD_VAR 0 4
36490: ARRAY
36491: PUSH
36492: LD_INT 0
36494: PLUS
36495: PPUSH
36496: CALL_OW 505
// end ;
36500: LD_VAR 0 2
36504: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36505: LD_INT 0
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
// if not hack in hackTanks then
36511: LD_VAR 0 1
36515: PUSH
36516: LD_EXP 151
36520: IN
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36611
// index := GetElementIndex ( hackTanks , hack ) ;
36526: LD_ADDR_VAR 0 5
36530: PUSH
36531: LD_EXP 151
36535: PPUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL 43569 0 2
36545: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36546: LD_ADDR_VAR 0 4
36550: PUSH
36551: DOUBLE
36552: LD_INT 1
36554: DEC
36555: ST_TO_ADDR
36556: LD_EXP 152
36560: PUSH
36561: LD_VAR 0 5
36565: ARRAY
36566: PUSH
36567: FOR_TO
36568: IFFALSE 36609
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36570: LD_EXP 152
36574: PUSH
36575: LD_VAR 0 5
36579: ARRAY
36580: PUSH
36581: LD_VAR 0 4
36585: ARRAY
36586: PUSH
36587: LD_INT 1
36589: ARRAY
36590: PUSH
36591: LD_VAR 0 2
36595: EQUAL
36596: IFFALSE 36607
// KillUnit ( vehicle ) ;
36598: LD_VAR 0 2
36602: PPUSH
36603: CALL_OW 66
36607: GO 36567
36609: POP
36610: POP
// end ;
36611: LD_VAR 0 3
36615: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36616: LD_EXP 156
36620: NOT
36621: IFFALSE 36656
36623: GO 36625
36625: DISABLE
// begin initMiner := true ;
36626: LD_ADDR_EXP 156
36630: PUSH
36631: LD_INT 1
36633: ST_TO_ADDR
// minersList := [ ] ;
36634: LD_ADDR_EXP 157
36638: PUSH
36639: EMPTY
36640: ST_TO_ADDR
// minerMinesList := [ ] ;
36641: LD_ADDR_EXP 158
36645: PUSH
36646: EMPTY
36647: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36648: LD_ADDR_EXP 159
36652: PUSH
36653: LD_INT 5
36655: ST_TO_ADDR
// end ;
36656: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36657: LD_EXP 156
36661: PUSH
36662: LD_INT 34
36664: PUSH
36665: LD_EXP 167
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PPUSH
36674: CALL_OW 69
36678: AND
36679: IFFALSE 37142
36681: GO 36683
36683: DISABLE
36684: LD_INT 0
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
// begin enable ;
36690: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36691: LD_ADDR_VAR 0 1
36695: PUSH
36696: LD_INT 34
36698: PUSH
36699: LD_EXP 167
36703: PUSH
36704: EMPTY
36705: LIST
36706: LIST
36707: PPUSH
36708: CALL_OW 69
36712: PUSH
36713: FOR_IN
36714: IFFALSE 36786
// begin if not i in minersList then
36716: LD_VAR 0 1
36720: PUSH
36721: LD_EXP 157
36725: IN
36726: NOT
36727: IFFALSE 36784
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36729: LD_ADDR_EXP 157
36733: PUSH
36734: LD_EXP 157
36738: PPUSH
36739: LD_EXP 157
36743: PUSH
36744: LD_INT 1
36746: PLUS
36747: PPUSH
36748: LD_VAR 0 1
36752: PPUSH
36753: CALL_OW 1
36757: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36758: LD_ADDR_EXP 158
36762: PUSH
36763: LD_EXP 158
36767: PPUSH
36768: LD_EXP 158
36772: PUSH
36773: LD_INT 1
36775: PLUS
36776: PPUSH
36777: EMPTY
36778: PPUSH
36779: CALL_OW 1
36783: ST_TO_ADDR
// end end ;
36784: GO 36713
36786: POP
36787: POP
// for i := minerMinesList downto 1 do
36788: LD_ADDR_VAR 0 1
36792: PUSH
36793: DOUBLE
36794: LD_EXP 158
36798: INC
36799: ST_TO_ADDR
36800: LD_INT 1
36802: PUSH
36803: FOR_DOWNTO
36804: IFFALSE 37140
// begin if IsLive ( minersList [ i ] ) then
36806: LD_EXP 157
36810: PUSH
36811: LD_VAR 0 1
36815: ARRAY
36816: PPUSH
36817: CALL_OW 300
36821: IFFALSE 36849
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36823: LD_EXP 157
36827: PUSH
36828: LD_VAR 0 1
36832: ARRAY
36833: PPUSH
36834: LD_EXP 158
36838: PUSH
36839: LD_VAR 0 1
36843: ARRAY
36844: PPUSH
36845: CALL_OW 505
// if not minerMinesList [ i ] then
36849: LD_EXP 158
36853: PUSH
36854: LD_VAR 0 1
36858: ARRAY
36859: NOT
36860: IFFALSE 36864
// continue ;
36862: GO 36803
// for j := minerMinesList [ i ] downto 1 do
36864: LD_ADDR_VAR 0 2
36868: PUSH
36869: DOUBLE
36870: LD_EXP 158
36874: PUSH
36875: LD_VAR 0 1
36879: ARRAY
36880: INC
36881: ST_TO_ADDR
36882: LD_INT 1
36884: PUSH
36885: FOR_DOWNTO
36886: IFFALSE 37136
// begin side := GetSide ( minersList [ i ] ) ;
36888: LD_ADDR_VAR 0 3
36892: PUSH
36893: LD_EXP 157
36897: PUSH
36898: LD_VAR 0 1
36902: ARRAY
36903: PPUSH
36904: CALL_OW 255
36908: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36909: LD_ADDR_VAR 0 4
36913: PUSH
36914: LD_EXP 158
36918: PUSH
36919: LD_VAR 0 1
36923: ARRAY
36924: PUSH
36925: LD_VAR 0 2
36929: ARRAY
36930: PUSH
36931: LD_INT 1
36933: ARRAY
36934: PPUSH
36935: LD_EXP 158
36939: PUSH
36940: LD_VAR 0 1
36944: ARRAY
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PUSH
36952: LD_INT 2
36954: ARRAY
36955: PPUSH
36956: CALL_OW 428
36960: ST_TO_ADDR
// if not tmp then
36961: LD_VAR 0 4
36965: NOT
36966: IFFALSE 36970
// continue ;
36968: GO 36885
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36970: LD_VAR 0 4
36974: PUSH
36975: LD_INT 81
36977: PUSH
36978: LD_VAR 0 3
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PPUSH
36987: CALL_OW 69
36991: IN
36992: PUSH
36993: LD_EXP 158
36997: PUSH
36998: LD_VAR 0 1
37002: ARRAY
37003: PUSH
37004: LD_VAR 0 2
37008: ARRAY
37009: PUSH
37010: LD_INT 1
37012: ARRAY
37013: PPUSH
37014: LD_EXP 158
37018: PUSH
37019: LD_VAR 0 1
37023: ARRAY
37024: PUSH
37025: LD_VAR 0 2
37029: ARRAY
37030: PUSH
37031: LD_INT 2
37033: ARRAY
37034: PPUSH
37035: CALL_OW 458
37039: AND
37040: IFFALSE 37134
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37042: LD_EXP 158
37046: PUSH
37047: LD_VAR 0 1
37051: ARRAY
37052: PUSH
37053: LD_VAR 0 2
37057: ARRAY
37058: PUSH
37059: LD_INT 1
37061: ARRAY
37062: PPUSH
37063: LD_EXP 158
37067: PUSH
37068: LD_VAR 0 1
37072: ARRAY
37073: PUSH
37074: LD_VAR 0 2
37078: ARRAY
37079: PUSH
37080: LD_INT 2
37082: ARRAY
37083: PPUSH
37084: LD_VAR 0 3
37088: PPUSH
37089: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37093: LD_ADDR_EXP 158
37097: PUSH
37098: LD_EXP 158
37102: PPUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: LD_EXP 158
37112: PUSH
37113: LD_VAR 0 1
37117: ARRAY
37118: PPUSH
37119: LD_VAR 0 2
37123: PPUSH
37124: CALL_OW 3
37128: PPUSH
37129: CALL_OW 1
37133: ST_TO_ADDR
// end ; end ;
37134: GO 36885
37136: POP
37137: POP
// end ;
37138: GO 36803
37140: POP
37141: POP
// end ;
37142: PPOPN 4
37144: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37145: LD_INT 0
37147: PPUSH
37148: PPUSH
// result := false ;
37149: LD_ADDR_VAR 0 4
37153: PUSH
37154: LD_INT 0
37156: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37157: LD_VAR 0 1
37161: PPUSH
37162: CALL_OW 264
37166: PUSH
37167: LD_EXP 167
37171: EQUAL
37172: NOT
37173: IFFALSE 37177
// exit ;
37175: GO 37417
// index := GetElementIndex ( minersList , unit ) ;
37177: LD_ADDR_VAR 0 5
37181: PUSH
37182: LD_EXP 157
37186: PPUSH
37187: LD_VAR 0 1
37191: PPUSH
37192: CALL 43569 0 2
37196: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37197: LD_EXP 158
37201: PUSH
37202: LD_VAR 0 5
37206: ARRAY
37207: PUSH
37208: LD_EXP 159
37212: GREATEREQUAL
37213: IFFALSE 37217
// exit ;
37215: GO 37417
// ComMoveXY ( unit , x , y ) ;
37217: LD_VAR 0 1
37221: PPUSH
37222: LD_VAR 0 2
37226: PPUSH
37227: LD_VAR 0 3
37231: PPUSH
37232: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37236: LD_INT 35
37238: PPUSH
37239: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37243: LD_VAR 0 1
37247: PPUSH
37248: LD_VAR 0 2
37252: PPUSH
37253: LD_VAR 0 3
37257: PPUSH
37258: CALL 74341 0 3
37262: NOT
37263: PUSH
37264: LD_VAR 0 1
37268: PPUSH
37269: CALL_OW 314
37273: AND
37274: IFFALSE 37278
// exit ;
37276: GO 37417
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37278: LD_VAR 0 2
37282: PPUSH
37283: LD_VAR 0 3
37287: PPUSH
37288: CALL_OW 428
37292: PUSH
37293: LD_VAR 0 1
37297: EQUAL
37298: PUSH
37299: LD_VAR 0 1
37303: PPUSH
37304: CALL_OW 314
37308: NOT
37309: AND
37310: IFFALSE 37236
// PlaySoundXY ( x , y , PlantMine ) ;
37312: LD_VAR 0 2
37316: PPUSH
37317: LD_VAR 0 3
37321: PPUSH
37322: LD_STRING PlantMine
37324: PPUSH
37325: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37329: LD_VAR 0 2
37333: PPUSH
37334: LD_VAR 0 3
37338: PPUSH
37339: LD_VAR 0 1
37343: PPUSH
37344: CALL_OW 255
37348: PPUSH
37349: LD_INT 0
37351: PPUSH
37352: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37356: LD_ADDR_EXP 158
37360: PUSH
37361: LD_EXP 158
37365: PPUSH
37366: LD_VAR 0 5
37370: PUSH
37371: LD_EXP 158
37375: PUSH
37376: LD_VAR 0 5
37380: ARRAY
37381: PUSH
37382: LD_INT 1
37384: PLUS
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PPUSH
37390: LD_VAR 0 2
37394: PUSH
37395: LD_VAR 0 3
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PPUSH
37404: CALL 43784 0 3
37408: ST_TO_ADDR
// result := true ;
37409: LD_ADDR_VAR 0 4
37413: PUSH
37414: LD_INT 1
37416: ST_TO_ADDR
// end ;
37417: LD_VAR 0 4
37421: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37422: LD_INT 0
37424: PPUSH
37425: PPUSH
37426: PPUSH
// if not unit in minersList then
37427: LD_VAR 0 1
37431: PUSH
37432: LD_EXP 157
37436: IN
37437: NOT
37438: IFFALSE 37442
// exit ;
37440: GO 37834
// index := GetElementIndex ( minersList , unit ) ;
37442: LD_ADDR_VAR 0 6
37446: PUSH
37447: LD_EXP 157
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: CALL 43569 0 2
37461: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37462: LD_ADDR_VAR 0 5
37466: PUSH
37467: DOUBLE
37468: LD_EXP 158
37472: PUSH
37473: LD_VAR 0 6
37477: ARRAY
37478: INC
37479: ST_TO_ADDR
37480: LD_INT 1
37482: PUSH
37483: FOR_DOWNTO
37484: IFFALSE 37645
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37486: LD_EXP 158
37490: PUSH
37491: LD_VAR 0 6
37495: ARRAY
37496: PUSH
37497: LD_VAR 0 5
37501: ARRAY
37502: PUSH
37503: LD_INT 1
37505: ARRAY
37506: PUSH
37507: LD_VAR 0 2
37511: EQUAL
37512: PUSH
37513: LD_EXP 158
37517: PUSH
37518: LD_VAR 0 6
37522: ARRAY
37523: PUSH
37524: LD_VAR 0 5
37528: ARRAY
37529: PUSH
37530: LD_INT 2
37532: ARRAY
37533: PUSH
37534: LD_VAR 0 3
37538: EQUAL
37539: AND
37540: IFFALSE 37643
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37542: LD_EXP 158
37546: PUSH
37547: LD_VAR 0 6
37551: ARRAY
37552: PUSH
37553: LD_VAR 0 5
37557: ARRAY
37558: PUSH
37559: LD_INT 1
37561: ARRAY
37562: PPUSH
37563: LD_EXP 158
37567: PUSH
37568: LD_VAR 0 6
37572: ARRAY
37573: PUSH
37574: LD_VAR 0 5
37578: ARRAY
37579: PUSH
37580: LD_INT 2
37582: ARRAY
37583: PPUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 255
37593: PPUSH
37594: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37598: LD_ADDR_EXP 158
37602: PUSH
37603: LD_EXP 158
37607: PPUSH
37608: LD_VAR 0 6
37612: PPUSH
37613: LD_EXP 158
37617: PUSH
37618: LD_VAR 0 6
37622: ARRAY
37623: PPUSH
37624: LD_VAR 0 5
37628: PPUSH
37629: CALL_OW 3
37633: PPUSH
37634: CALL_OW 1
37638: ST_TO_ADDR
// exit ;
37639: POP
37640: POP
37641: GO 37834
// end ; end ;
37643: GO 37483
37645: POP
37646: POP
// for i := minerMinesList [ index ] downto 1 do
37647: LD_ADDR_VAR 0 5
37651: PUSH
37652: DOUBLE
37653: LD_EXP 158
37657: PUSH
37658: LD_VAR 0 6
37662: ARRAY
37663: INC
37664: ST_TO_ADDR
37665: LD_INT 1
37667: PUSH
37668: FOR_DOWNTO
37669: IFFALSE 37832
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37671: LD_EXP 158
37675: PUSH
37676: LD_VAR 0 6
37680: ARRAY
37681: PUSH
37682: LD_VAR 0 5
37686: ARRAY
37687: PUSH
37688: LD_INT 1
37690: ARRAY
37691: PPUSH
37692: LD_EXP 158
37696: PUSH
37697: LD_VAR 0 6
37701: ARRAY
37702: PUSH
37703: LD_VAR 0 5
37707: ARRAY
37708: PUSH
37709: LD_INT 2
37711: ARRAY
37712: PPUSH
37713: LD_VAR 0 2
37717: PPUSH
37718: LD_VAR 0 3
37722: PPUSH
37723: CALL_OW 298
37727: PUSH
37728: LD_INT 6
37730: LESS
37731: IFFALSE 37830
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37733: LD_EXP 158
37737: PUSH
37738: LD_VAR 0 6
37742: ARRAY
37743: PUSH
37744: LD_VAR 0 5
37748: ARRAY
37749: PUSH
37750: LD_INT 1
37752: ARRAY
37753: PPUSH
37754: LD_EXP 158
37758: PUSH
37759: LD_VAR 0 6
37763: ARRAY
37764: PUSH
37765: LD_VAR 0 5
37769: ARRAY
37770: PUSH
37771: LD_INT 2
37773: ARRAY
37774: PPUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 255
37784: PPUSH
37785: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37789: LD_ADDR_EXP 158
37793: PUSH
37794: LD_EXP 158
37798: PPUSH
37799: LD_VAR 0 6
37803: PPUSH
37804: LD_EXP 158
37808: PUSH
37809: LD_VAR 0 6
37813: ARRAY
37814: PPUSH
37815: LD_VAR 0 5
37819: PPUSH
37820: CALL_OW 3
37824: PPUSH
37825: CALL_OW 1
37829: ST_TO_ADDR
// end ; end ;
37830: GO 37668
37832: POP
37833: POP
// end ;
37834: LD_VAR 0 4
37838: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37839: LD_INT 0
37841: PPUSH
37842: PPUSH
37843: PPUSH
37844: PPUSH
37845: PPUSH
37846: PPUSH
37847: PPUSH
37848: PPUSH
37849: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37850: LD_VAR 0 1
37854: PPUSH
37855: CALL_OW 264
37859: PUSH
37860: LD_EXP 167
37864: EQUAL
37865: NOT
37866: PUSH
37867: LD_VAR 0 1
37871: PUSH
37872: LD_EXP 157
37876: IN
37877: NOT
37878: OR
37879: IFFALSE 37883
// exit ;
37881: GO 38205
// index := GetElementIndex ( minersList , unit ) ;
37883: LD_ADDR_VAR 0 6
37887: PUSH
37888: LD_EXP 157
37892: PPUSH
37893: LD_VAR 0 1
37897: PPUSH
37898: CALL 43569 0 2
37902: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37903: LD_ADDR_VAR 0 8
37907: PUSH
37908: LD_EXP 159
37912: PUSH
37913: LD_EXP 158
37917: PUSH
37918: LD_VAR 0 6
37922: ARRAY
37923: MINUS
37924: ST_TO_ADDR
// if not minesFreeAmount then
37925: LD_VAR 0 8
37929: NOT
37930: IFFALSE 37934
// exit ;
37932: GO 38205
// tmp := [ ] ;
37934: LD_ADDR_VAR 0 7
37938: PUSH
37939: EMPTY
37940: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37941: LD_ADDR_VAR 0 5
37945: PUSH
37946: DOUBLE
37947: LD_INT 1
37949: DEC
37950: ST_TO_ADDR
37951: LD_VAR 0 8
37955: PUSH
37956: FOR_TO
37957: IFFALSE 38152
// begin _d := rand ( 0 , 5 ) ;
37959: LD_ADDR_VAR 0 11
37963: PUSH
37964: LD_INT 0
37966: PPUSH
37967: LD_INT 5
37969: PPUSH
37970: CALL_OW 12
37974: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37975: LD_ADDR_VAR 0 12
37979: PUSH
37980: LD_INT 2
37982: PPUSH
37983: LD_INT 6
37985: PPUSH
37986: CALL_OW 12
37990: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37991: LD_ADDR_VAR 0 9
37995: PUSH
37996: LD_VAR 0 2
38000: PPUSH
38001: LD_VAR 0 11
38005: PPUSH
38006: LD_VAR 0 12
38010: PPUSH
38011: CALL_OW 272
38015: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38016: LD_ADDR_VAR 0 10
38020: PUSH
38021: LD_VAR 0 3
38025: PPUSH
38026: LD_VAR 0 11
38030: PPUSH
38031: LD_VAR 0 12
38035: PPUSH
38036: CALL_OW 273
38040: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38041: LD_VAR 0 9
38045: PPUSH
38046: LD_VAR 0 10
38050: PPUSH
38051: CALL_OW 488
38055: PUSH
38056: LD_VAR 0 9
38060: PUSH
38061: LD_VAR 0 10
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_VAR 0 7
38074: IN
38075: NOT
38076: AND
38077: PUSH
38078: LD_VAR 0 9
38082: PPUSH
38083: LD_VAR 0 10
38087: PPUSH
38088: CALL_OW 458
38092: NOT
38093: AND
38094: IFFALSE 38136
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38096: LD_ADDR_VAR 0 7
38100: PUSH
38101: LD_VAR 0 7
38105: PPUSH
38106: LD_VAR 0 7
38110: PUSH
38111: LD_INT 1
38113: PLUS
38114: PPUSH
38115: LD_VAR 0 9
38119: PUSH
38120: LD_VAR 0 10
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PPUSH
38129: CALL_OW 1
38133: ST_TO_ADDR
38134: GO 38150
// i := i - 1 ;
38136: LD_ADDR_VAR 0 5
38140: PUSH
38141: LD_VAR 0 5
38145: PUSH
38146: LD_INT 1
38148: MINUS
38149: ST_TO_ADDR
// end ;
38150: GO 37956
38152: POP
38153: POP
// for i in tmp do
38154: LD_ADDR_VAR 0 5
38158: PUSH
38159: LD_VAR 0 7
38163: PUSH
38164: FOR_IN
38165: IFFALSE 38203
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38167: LD_VAR 0 1
38171: PPUSH
38172: LD_VAR 0 5
38176: PUSH
38177: LD_INT 1
38179: ARRAY
38180: PPUSH
38181: LD_VAR 0 5
38185: PUSH
38186: LD_INT 2
38188: ARRAY
38189: PPUSH
38190: CALL 37145 0 3
38194: NOT
38195: IFFALSE 38201
// exit ;
38197: POP
38198: POP
38199: GO 38205
38201: GO 38164
38203: POP
38204: POP
// end ;
38205: LD_VAR 0 4
38209: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38210: LD_INT 0
38212: PPUSH
38213: PPUSH
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
// if not GetClass ( unit ) = class_sniper then
38219: LD_VAR 0 1
38223: PPUSH
38224: CALL_OW 257
38228: PUSH
38229: LD_INT 5
38231: EQUAL
38232: NOT
38233: IFFALSE 38237
// exit ;
38235: GO 38625
// dist := 8 ;
38237: LD_ADDR_VAR 0 5
38241: PUSH
38242: LD_INT 8
38244: ST_TO_ADDR
// viewRange := 12 ;
38245: LD_ADDR_VAR 0 7
38249: PUSH
38250: LD_INT 12
38252: ST_TO_ADDR
// side := GetSide ( unit ) ;
38253: LD_ADDR_VAR 0 6
38257: PUSH
38258: LD_VAR 0 1
38262: PPUSH
38263: CALL_OW 255
38267: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38268: LD_INT 61
38270: PPUSH
38271: LD_VAR 0 6
38275: PPUSH
38276: CALL_OW 321
38280: PUSH
38281: LD_INT 2
38283: EQUAL
38284: IFFALSE 38294
// viewRange := 16 ;
38286: LD_ADDR_VAR 0 7
38290: PUSH
38291: LD_INT 16
38293: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38294: LD_VAR 0 1
38298: PPUSH
38299: LD_VAR 0 2
38303: PPUSH
38304: LD_VAR 0 3
38308: PPUSH
38309: CALL_OW 297
38313: PUSH
38314: LD_VAR 0 5
38318: GREATER
38319: IFFALSE 38398
// begin ComMoveXY ( unit , x , y ) ;
38321: LD_VAR 0 1
38325: PPUSH
38326: LD_VAR 0 2
38330: PPUSH
38331: LD_VAR 0 3
38335: PPUSH
38336: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38340: LD_INT 35
38342: PPUSH
38343: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38347: LD_VAR 0 1
38351: PPUSH
38352: LD_VAR 0 2
38356: PPUSH
38357: LD_VAR 0 3
38361: PPUSH
38362: CALL 74341 0 3
38366: NOT
38367: IFFALSE 38371
// exit ;
38369: GO 38625
// until GetDistUnitXY ( unit , x , y ) < dist ;
38371: LD_VAR 0 1
38375: PPUSH
38376: LD_VAR 0 2
38380: PPUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: CALL_OW 297
38390: PUSH
38391: LD_VAR 0 5
38395: LESS
38396: IFFALSE 38340
// end ; ComTurnXY ( unit , x , y ) ;
38398: LD_VAR 0 1
38402: PPUSH
38403: LD_VAR 0 2
38407: PPUSH
38408: LD_VAR 0 3
38412: PPUSH
38413: CALL_OW 118
// wait ( 5 ) ;
38417: LD_INT 5
38419: PPUSH
38420: CALL_OW 67
// _d := GetDir ( unit ) ;
38424: LD_ADDR_VAR 0 10
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 254
38438: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38439: LD_ADDR_VAR 0 8
38443: PUSH
38444: LD_VAR 0 1
38448: PPUSH
38449: CALL_OW 250
38453: PPUSH
38454: LD_VAR 0 10
38458: PPUSH
38459: LD_VAR 0 5
38463: PPUSH
38464: CALL_OW 272
38468: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38469: LD_ADDR_VAR 0 9
38473: PUSH
38474: LD_VAR 0 1
38478: PPUSH
38479: CALL_OW 251
38483: PPUSH
38484: LD_VAR 0 10
38488: PPUSH
38489: LD_VAR 0 5
38493: PPUSH
38494: CALL_OW 273
38498: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38499: LD_VAR 0 8
38503: PPUSH
38504: LD_VAR 0 9
38508: PPUSH
38509: CALL_OW 488
38513: NOT
38514: IFFALSE 38518
// exit ;
38516: GO 38625
// ComAnimCustom ( unit , 1 ) ;
38518: LD_VAR 0 1
38522: PPUSH
38523: LD_INT 1
38525: PPUSH
38526: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38530: LD_VAR 0 8
38534: PPUSH
38535: LD_VAR 0 9
38539: PPUSH
38540: LD_VAR 0 6
38544: PPUSH
38545: LD_VAR 0 7
38549: PPUSH
38550: CALL_OW 330
// repeat wait ( 1 ) ;
38554: LD_INT 1
38556: PPUSH
38557: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38561: LD_VAR 0 1
38565: PPUSH
38566: CALL_OW 316
38570: PUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL_OW 314
38580: OR
38581: PUSH
38582: LD_VAR 0 1
38586: PPUSH
38587: CALL_OW 302
38591: NOT
38592: OR
38593: PUSH
38594: LD_VAR 0 1
38598: PPUSH
38599: CALL_OW 301
38603: OR
38604: IFFALSE 38554
// RemoveSeeing ( _x , _y , side ) ;
38606: LD_VAR 0 8
38610: PPUSH
38611: LD_VAR 0 9
38615: PPUSH
38616: LD_VAR 0 6
38620: PPUSH
38621: CALL_OW 331
// end ; end_of_file
38625: LD_VAR 0 4
38629: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
38630: LD_INT 0
38632: PPUSH
// ar_miner := 81 ;
38633: LD_ADDR_EXP 167
38637: PUSH
38638: LD_INT 81
38640: ST_TO_ADDR
// ar_crane := 88 ;
38641: LD_ADDR_EXP 166
38645: PUSH
38646: LD_INT 88
38648: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
38649: LD_ADDR_EXP 161
38653: PUSH
38654: LD_INT 89
38656: ST_TO_ADDR
// us_hack := 99 ;
38657: LD_ADDR_EXP 162
38661: PUSH
38662: LD_INT 99
38664: ST_TO_ADDR
// us_artillery := 97 ;
38665: LD_ADDR_EXP 163
38669: PUSH
38670: LD_INT 97
38672: ST_TO_ADDR
// ar_bio_bomb := 91 ;
38673: LD_ADDR_EXP 164
38677: PUSH
38678: LD_INT 91
38680: ST_TO_ADDR
// ar_mortar := 92 ;
38681: LD_ADDR_EXP 165
38685: PUSH
38686: LD_INT 92
38688: ST_TO_ADDR
// ru_radar := 98 ;
38689: LD_ADDR_EXP 160
38693: PUSH
38694: LD_INT 98
38696: ST_TO_ADDR
// tech_Artillery := 80 ;
38697: LD_ADDR_EXP 168
38701: PUSH
38702: LD_INT 80
38704: ST_TO_ADDR
// tech_RadMat := 81 ;
38705: LD_ADDR_EXP 169
38709: PUSH
38710: LD_INT 81
38712: ST_TO_ADDR
// tech_BasicTools := 82 ;
38713: LD_ADDR_EXP 170
38717: PUSH
38718: LD_INT 82
38720: ST_TO_ADDR
// tech_Cargo := 83 ;
38721: LD_ADDR_EXP 171
38725: PUSH
38726: LD_INT 83
38728: ST_TO_ADDR
// tech_Track := 84 ;
38729: LD_ADDR_EXP 172
38733: PUSH
38734: LD_INT 84
38736: ST_TO_ADDR
// tech_Crane := 85 ;
38737: LD_ADDR_EXP 173
38741: PUSH
38742: LD_INT 85
38744: ST_TO_ADDR
// tech_Bulldozer := 86 ;
38745: LD_ADDR_EXP 174
38749: PUSH
38750: LD_INT 86
38752: ST_TO_ADDR
// tech_Hovercraft := 87 ;
38753: LD_ADDR_EXP 175
38757: PUSH
38758: LD_INT 87
38760: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
38761: LD_ADDR_EXP 176
38765: PUSH
38766: LD_INT 88
38768: ST_TO_ADDR
// class_mastodont := 31 ;
38769: LD_ADDR_EXP 177
38773: PUSH
38774: LD_INT 31
38776: ST_TO_ADDR
// class_horse := 21 ;
38777: LD_ADDR_EXP 178
38781: PUSH
38782: LD_INT 21
38784: ST_TO_ADDR
// end ;
38785: LD_VAR 0 1
38789: RET
// every 1 do
38790: GO 38792
38792: DISABLE
// InitGlobalVariables ; end_of_file
38793: CALL 38630 0 0
38797: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38798: LD_INT 0
38800: PPUSH
38801: PPUSH
// if exist_mode then
38802: LD_VAR 0 2
38806: IFFALSE 38831
// unit := CreateCharacter ( prefix & ident ) else
38808: LD_ADDR_VAR 0 5
38812: PUSH
38813: LD_VAR 0 3
38817: PUSH
38818: LD_VAR 0 1
38822: STR
38823: PPUSH
38824: CALL_OW 34
38828: ST_TO_ADDR
38829: GO 38846
// unit := NewCharacter ( ident ) ;
38831: LD_ADDR_VAR 0 5
38835: PUSH
38836: LD_VAR 0 1
38840: PPUSH
38841: CALL_OW 25
38845: ST_TO_ADDR
// result := unit ;
38846: LD_ADDR_VAR 0 4
38850: PUSH
38851: LD_VAR 0 5
38855: ST_TO_ADDR
// end ;
38856: LD_VAR 0 4
38860: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38861: LD_INT 0
38863: PPUSH
38864: PPUSH
// if not side or not nation then
38865: LD_VAR 0 1
38869: NOT
38870: PUSH
38871: LD_VAR 0 2
38875: NOT
38876: OR
38877: IFFALSE 38881
// exit ;
38879: GO 39649
// case nation of nation_american :
38881: LD_VAR 0 2
38885: PUSH
38886: LD_INT 1
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38894
38892: GO 39108
38894: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38895: LD_ADDR_VAR 0 4
38899: PUSH
38900: LD_INT 35
38902: PUSH
38903: LD_INT 45
38905: PUSH
38906: LD_INT 46
38908: PUSH
38909: LD_INT 47
38911: PUSH
38912: LD_INT 82
38914: PUSH
38915: LD_INT 83
38917: PUSH
38918: LD_INT 84
38920: PUSH
38921: LD_INT 85
38923: PUSH
38924: LD_INT 86
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: LD_INT 2
38932: PUSH
38933: LD_INT 6
38935: PUSH
38936: LD_INT 15
38938: PUSH
38939: LD_INT 16
38941: PUSH
38942: LD_INT 7
38944: PUSH
38945: LD_INT 12
38947: PUSH
38948: LD_INT 13
38950: PUSH
38951: LD_INT 10
38953: PUSH
38954: LD_INT 14
38956: PUSH
38957: LD_INT 20
38959: PUSH
38960: LD_INT 21
38962: PUSH
38963: LD_INT 22
38965: PUSH
38966: LD_INT 25
38968: PUSH
38969: LD_INT 32
38971: PUSH
38972: LD_INT 27
38974: PUSH
38975: LD_INT 36
38977: PUSH
38978: LD_INT 69
38980: PUSH
38981: LD_INT 39
38983: PUSH
38984: LD_INT 34
38986: PUSH
38987: LD_INT 40
38989: PUSH
38990: LD_INT 48
38992: PUSH
38993: LD_INT 49
38995: PUSH
38996: LD_INT 50
38998: PUSH
38999: LD_INT 51
39001: PUSH
39002: LD_INT 52
39004: PUSH
39005: LD_INT 53
39007: PUSH
39008: LD_INT 54
39010: PUSH
39011: LD_INT 55
39013: PUSH
39014: LD_INT 56
39016: PUSH
39017: LD_INT 57
39019: PUSH
39020: LD_INT 58
39022: PUSH
39023: LD_INT 59
39025: PUSH
39026: LD_INT 60
39028: PUSH
39029: LD_INT 61
39031: PUSH
39032: LD_INT 62
39034: PUSH
39035: LD_INT 80
39037: PUSH
39038: LD_INT 82
39040: PUSH
39041: LD_INT 83
39043: PUSH
39044: LD_INT 84
39046: PUSH
39047: LD_INT 85
39049: PUSH
39050: LD_INT 86
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: ST_TO_ADDR
39106: GO 39573
39108: LD_INT 2
39110: DOUBLE
39111: EQUAL
39112: IFTRUE 39116
39114: GO 39342
39116: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39117: LD_ADDR_VAR 0 4
39121: PUSH
39122: LD_INT 35
39124: PUSH
39125: LD_INT 45
39127: PUSH
39128: LD_INT 46
39130: PUSH
39131: LD_INT 47
39133: PUSH
39134: LD_INT 82
39136: PUSH
39137: LD_INT 83
39139: PUSH
39140: LD_INT 84
39142: PUSH
39143: LD_INT 85
39145: PUSH
39146: LD_INT 87
39148: PUSH
39149: LD_INT 70
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: LD_INT 11
39157: PUSH
39158: LD_INT 3
39160: PUSH
39161: LD_INT 4
39163: PUSH
39164: LD_INT 5
39166: PUSH
39167: LD_INT 6
39169: PUSH
39170: LD_INT 15
39172: PUSH
39173: LD_INT 18
39175: PUSH
39176: LD_INT 7
39178: PUSH
39179: LD_INT 17
39181: PUSH
39182: LD_INT 8
39184: PUSH
39185: LD_INT 20
39187: PUSH
39188: LD_INT 21
39190: PUSH
39191: LD_INT 22
39193: PUSH
39194: LD_INT 72
39196: PUSH
39197: LD_INT 26
39199: PUSH
39200: LD_INT 69
39202: PUSH
39203: LD_INT 39
39205: PUSH
39206: LD_INT 40
39208: PUSH
39209: LD_INT 41
39211: PUSH
39212: LD_INT 42
39214: PUSH
39215: LD_INT 43
39217: PUSH
39218: LD_INT 48
39220: PUSH
39221: LD_INT 49
39223: PUSH
39224: LD_INT 50
39226: PUSH
39227: LD_INT 51
39229: PUSH
39230: LD_INT 52
39232: PUSH
39233: LD_INT 53
39235: PUSH
39236: LD_INT 54
39238: PUSH
39239: LD_INT 55
39241: PUSH
39242: LD_INT 56
39244: PUSH
39245: LD_INT 60
39247: PUSH
39248: LD_INT 61
39250: PUSH
39251: LD_INT 62
39253: PUSH
39254: LD_INT 66
39256: PUSH
39257: LD_INT 67
39259: PUSH
39260: LD_INT 68
39262: PUSH
39263: LD_INT 81
39265: PUSH
39266: LD_INT 82
39268: PUSH
39269: LD_INT 83
39271: PUSH
39272: LD_INT 84
39274: PUSH
39275: LD_INT 85
39277: PUSH
39278: LD_INT 87
39280: PUSH
39281: LD_INT 88
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: LIST
39306: LIST
39307: LIST
39308: LIST
39309: LIST
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
39340: GO 39573
39342: LD_INT 3
39344: DOUBLE
39345: EQUAL
39346: IFTRUE 39350
39348: GO 39572
39350: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39351: LD_ADDR_VAR 0 4
39355: PUSH
39356: LD_INT 46
39358: PUSH
39359: LD_INT 47
39361: PUSH
39362: LD_INT 1
39364: PUSH
39365: LD_INT 2
39367: PUSH
39368: LD_INT 82
39370: PUSH
39371: LD_INT 83
39373: PUSH
39374: LD_INT 84
39376: PUSH
39377: LD_INT 85
39379: PUSH
39380: LD_INT 86
39382: PUSH
39383: LD_INT 11
39385: PUSH
39386: LD_INT 9
39388: PUSH
39389: LD_INT 20
39391: PUSH
39392: LD_INT 19
39394: PUSH
39395: LD_INT 21
39397: PUSH
39398: LD_INT 24
39400: PUSH
39401: LD_INT 22
39403: PUSH
39404: LD_INT 25
39406: PUSH
39407: LD_INT 28
39409: PUSH
39410: LD_INT 29
39412: PUSH
39413: LD_INT 30
39415: PUSH
39416: LD_INT 31
39418: PUSH
39419: LD_INT 37
39421: PUSH
39422: LD_INT 38
39424: PUSH
39425: LD_INT 32
39427: PUSH
39428: LD_INT 27
39430: PUSH
39431: LD_INT 33
39433: PUSH
39434: LD_INT 69
39436: PUSH
39437: LD_INT 39
39439: PUSH
39440: LD_INT 34
39442: PUSH
39443: LD_INT 40
39445: PUSH
39446: LD_INT 71
39448: PUSH
39449: LD_INT 23
39451: PUSH
39452: LD_INT 44
39454: PUSH
39455: LD_INT 48
39457: PUSH
39458: LD_INT 49
39460: PUSH
39461: LD_INT 50
39463: PUSH
39464: LD_INT 51
39466: PUSH
39467: LD_INT 52
39469: PUSH
39470: LD_INT 53
39472: PUSH
39473: LD_INT 54
39475: PUSH
39476: LD_INT 55
39478: PUSH
39479: LD_INT 56
39481: PUSH
39482: LD_INT 57
39484: PUSH
39485: LD_INT 58
39487: PUSH
39488: LD_INT 59
39490: PUSH
39491: LD_INT 63
39493: PUSH
39494: LD_INT 64
39496: PUSH
39497: LD_INT 65
39499: PUSH
39500: LD_INT 82
39502: PUSH
39503: LD_INT 83
39505: PUSH
39506: LD_INT 84
39508: PUSH
39509: LD_INT 85
39511: PUSH
39512: LD_INT 86
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: LIST
39569: ST_TO_ADDR
39570: GO 39573
39572: POP
// if state > - 1 and state < 3 then
39573: LD_VAR 0 3
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: GREATER
39582: PUSH
39583: LD_VAR 0 3
39587: PUSH
39588: LD_INT 3
39590: LESS
39591: AND
39592: IFFALSE 39649
// for i in result do
39594: LD_ADDR_VAR 0 5
39598: PUSH
39599: LD_VAR 0 4
39603: PUSH
39604: FOR_IN
39605: IFFALSE 39647
// if GetTech ( i , side ) <> state then
39607: LD_VAR 0 5
39611: PPUSH
39612: LD_VAR 0 1
39616: PPUSH
39617: CALL_OW 321
39621: PUSH
39622: LD_VAR 0 3
39626: NONEQUAL
39627: IFFALSE 39645
// result := result diff i ;
39629: LD_ADDR_VAR 0 4
39633: PUSH
39634: LD_VAR 0 4
39638: PUSH
39639: LD_VAR 0 5
39643: DIFF
39644: ST_TO_ADDR
39645: GO 39604
39647: POP
39648: POP
// end ;
39649: LD_VAR 0 4
39653: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
39658: PPUSH
// result := true ;
39659: LD_ADDR_VAR 0 3
39663: PUSH
39664: LD_INT 1
39666: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39667: LD_ADDR_VAR 0 5
39671: PUSH
39672: LD_VAR 0 2
39676: PPUSH
39677: CALL_OW 480
39681: ST_TO_ADDR
// if not tmp then
39682: LD_VAR 0 5
39686: NOT
39687: IFFALSE 39691
// exit ;
39689: GO 39740
// for i in tmp do
39691: LD_ADDR_VAR 0 4
39695: PUSH
39696: LD_VAR 0 5
39700: PUSH
39701: FOR_IN
39702: IFFALSE 39738
// if GetTech ( i , side ) <> state_researched then
39704: LD_VAR 0 4
39708: PPUSH
39709: LD_VAR 0 1
39713: PPUSH
39714: CALL_OW 321
39718: PUSH
39719: LD_INT 2
39721: NONEQUAL
39722: IFFALSE 39736
// begin result := false ;
39724: LD_ADDR_VAR 0 3
39728: PUSH
39729: LD_INT 0
39731: ST_TO_ADDR
// exit ;
39732: POP
39733: POP
39734: GO 39740
// end ;
39736: GO 39701
39738: POP
39739: POP
// end ;
39740: LD_VAR 0 3
39744: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39745: LD_INT 0
39747: PPUSH
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
39753: PPUSH
39754: PPUSH
39755: PPUSH
39756: PPUSH
39757: PPUSH
39758: PPUSH
39759: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39760: LD_VAR 0 1
39764: NOT
39765: PUSH
39766: LD_VAR 0 1
39770: PPUSH
39771: CALL_OW 257
39775: PUSH
39776: LD_INT 9
39778: NONEQUAL
39779: OR
39780: IFFALSE 39784
// exit ;
39782: GO 40357
// side := GetSide ( unit ) ;
39784: LD_ADDR_VAR 0 9
39788: PUSH
39789: LD_VAR 0 1
39793: PPUSH
39794: CALL_OW 255
39798: ST_TO_ADDR
// tech_space := tech_spacanom ;
39799: LD_ADDR_VAR 0 12
39803: PUSH
39804: LD_INT 29
39806: ST_TO_ADDR
// tech_time := tech_taurad ;
39807: LD_ADDR_VAR 0 13
39811: PUSH
39812: LD_INT 28
39814: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39815: LD_ADDR_VAR 0 11
39819: PUSH
39820: LD_VAR 0 1
39824: PPUSH
39825: CALL_OW 310
39829: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39830: LD_VAR 0 11
39834: PPUSH
39835: CALL_OW 247
39839: PUSH
39840: LD_INT 2
39842: EQUAL
39843: IFFALSE 39847
// exit ;
39845: GO 40357
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39847: LD_ADDR_VAR 0 8
39851: PUSH
39852: LD_INT 81
39854: PUSH
39855: LD_VAR 0 9
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 3
39866: PUSH
39867: LD_INT 21
39869: PUSH
39870: LD_INT 3
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: EMPTY
39878: LIST
39879: LIST
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PPUSH
39885: CALL_OW 69
39889: ST_TO_ADDR
// if not tmp then
39890: LD_VAR 0 8
39894: NOT
39895: IFFALSE 39899
// exit ;
39897: GO 40357
// if in_unit then
39899: LD_VAR 0 11
39903: IFFALSE 39927
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39905: LD_ADDR_VAR 0 10
39909: PUSH
39910: LD_VAR 0 8
39914: PPUSH
39915: LD_VAR 0 11
39919: PPUSH
39920: CALL_OW 74
39924: ST_TO_ADDR
39925: GO 39947
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39927: LD_ADDR_VAR 0 10
39931: PUSH
39932: LD_VAR 0 8
39936: PPUSH
39937: LD_VAR 0 1
39941: PPUSH
39942: CALL_OW 74
39946: ST_TO_ADDR
// if not enemy then
39947: LD_VAR 0 10
39951: NOT
39952: IFFALSE 39956
// exit ;
39954: GO 40357
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39956: LD_VAR 0 11
39960: PUSH
39961: LD_VAR 0 11
39965: PPUSH
39966: LD_VAR 0 10
39970: PPUSH
39971: CALL_OW 296
39975: PUSH
39976: LD_INT 13
39978: GREATER
39979: AND
39980: PUSH
39981: LD_VAR 0 1
39985: PPUSH
39986: LD_VAR 0 10
39990: PPUSH
39991: CALL_OW 296
39995: PUSH
39996: LD_INT 12
39998: GREATER
39999: OR
40000: IFFALSE 40004
// exit ;
40002: GO 40357
// missile := [ 1 ] ;
40004: LD_ADDR_VAR 0 14
40008: PUSH
40009: LD_INT 1
40011: PUSH
40012: EMPTY
40013: LIST
40014: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40015: LD_VAR 0 9
40019: PPUSH
40020: LD_VAR 0 12
40024: PPUSH
40025: CALL_OW 325
40029: IFFALSE 40058
// missile := Insert ( missile , missile + 1 , 2 ) ;
40031: LD_ADDR_VAR 0 14
40035: PUSH
40036: LD_VAR 0 14
40040: PPUSH
40041: LD_VAR 0 14
40045: PUSH
40046: LD_INT 1
40048: PLUS
40049: PPUSH
40050: LD_INT 2
40052: PPUSH
40053: CALL_OW 2
40057: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40058: LD_VAR 0 9
40062: PPUSH
40063: LD_VAR 0 13
40067: PPUSH
40068: CALL_OW 325
40072: PUSH
40073: LD_VAR 0 10
40077: PPUSH
40078: CALL_OW 255
40082: PPUSH
40083: LD_VAR 0 13
40087: PPUSH
40088: CALL_OW 325
40092: NOT
40093: AND
40094: IFFALSE 40123
// missile := Insert ( missile , missile + 1 , 3 ) ;
40096: LD_ADDR_VAR 0 14
40100: PUSH
40101: LD_VAR 0 14
40105: PPUSH
40106: LD_VAR 0 14
40110: PUSH
40111: LD_INT 1
40113: PLUS
40114: PPUSH
40115: LD_INT 3
40117: PPUSH
40118: CALL_OW 2
40122: ST_TO_ADDR
// if missile < 2 then
40123: LD_VAR 0 14
40127: PUSH
40128: LD_INT 2
40130: LESS
40131: IFFALSE 40135
// exit ;
40133: GO 40357
// x := GetX ( enemy ) ;
40135: LD_ADDR_VAR 0 4
40139: PUSH
40140: LD_VAR 0 10
40144: PPUSH
40145: CALL_OW 250
40149: ST_TO_ADDR
// y := GetY ( enemy ) ;
40150: LD_ADDR_VAR 0 5
40154: PUSH
40155: LD_VAR 0 10
40159: PPUSH
40160: CALL_OW 251
40164: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40165: LD_ADDR_VAR 0 6
40169: PUSH
40170: LD_VAR 0 4
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PPUSH
40179: LD_INT 1
40181: PPUSH
40182: CALL_OW 12
40186: PLUS
40187: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40188: LD_ADDR_VAR 0 7
40192: PUSH
40193: LD_VAR 0 5
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PPUSH
40202: LD_INT 1
40204: PPUSH
40205: CALL_OW 12
40209: PLUS
40210: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40211: LD_VAR 0 6
40215: PPUSH
40216: LD_VAR 0 7
40220: PPUSH
40221: CALL_OW 488
40225: NOT
40226: IFFALSE 40248
// begin _x := x ;
40228: LD_ADDR_VAR 0 6
40232: PUSH
40233: LD_VAR 0 4
40237: ST_TO_ADDR
// _y := y ;
40238: LD_ADDR_VAR 0 7
40242: PUSH
40243: LD_VAR 0 5
40247: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 1
40255: PPUSH
40256: LD_VAR 0 14
40260: PPUSH
40261: CALL_OW 12
40265: ST_TO_ADDR
// case i of 1 :
40266: LD_VAR 0 3
40270: PUSH
40271: LD_INT 1
40273: DOUBLE
40274: EQUAL
40275: IFTRUE 40279
40277: GO 40296
40279: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40280: LD_VAR 0 1
40284: PPUSH
40285: LD_VAR 0 10
40289: PPUSH
40290: CALL_OW 115
40294: GO 40357
40296: LD_INT 2
40298: DOUBLE
40299: EQUAL
40300: IFTRUE 40304
40302: GO 40326
40304: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40305: LD_VAR 0 1
40309: PPUSH
40310: LD_VAR 0 6
40314: PPUSH
40315: LD_VAR 0 7
40319: PPUSH
40320: CALL_OW 153
40324: GO 40357
40326: LD_INT 3
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40356
40334: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40335: LD_VAR 0 1
40339: PPUSH
40340: LD_VAR 0 6
40344: PPUSH
40345: LD_VAR 0 7
40349: PPUSH
40350: CALL_OW 154
40354: GO 40357
40356: POP
// end ;
40357: LD_VAR 0 2
40361: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40362: LD_INT 0
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
// if not unit or not building then
40370: LD_VAR 0 1
40374: NOT
40375: PUSH
40376: LD_VAR 0 2
40380: NOT
40381: OR
40382: IFFALSE 40386
// exit ;
40384: GO 40544
// x := GetX ( building ) ;
40386: LD_ADDR_VAR 0 5
40390: PUSH
40391: LD_VAR 0 2
40395: PPUSH
40396: CALL_OW 250
40400: ST_TO_ADDR
// y := GetY ( building ) ;
40401: LD_ADDR_VAR 0 6
40405: PUSH
40406: LD_VAR 0 2
40410: PPUSH
40411: CALL_OW 251
40415: ST_TO_ADDR
// for i = 0 to 5 do
40416: LD_ADDR_VAR 0 4
40420: PUSH
40421: DOUBLE
40422: LD_INT 0
40424: DEC
40425: ST_TO_ADDR
40426: LD_INT 5
40428: PUSH
40429: FOR_TO
40430: IFFALSE 40542
// begin _x := ShiftX ( x , i , 3 ) ;
40432: LD_ADDR_VAR 0 7
40436: PUSH
40437: LD_VAR 0 5
40441: PPUSH
40442: LD_VAR 0 4
40446: PPUSH
40447: LD_INT 3
40449: PPUSH
40450: CALL_OW 272
40454: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40455: LD_ADDR_VAR 0 8
40459: PUSH
40460: LD_VAR 0 6
40464: PPUSH
40465: LD_VAR 0 4
40469: PPUSH
40470: LD_INT 3
40472: PPUSH
40473: CALL_OW 273
40477: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40478: LD_VAR 0 7
40482: PPUSH
40483: LD_VAR 0 8
40487: PPUSH
40488: CALL_OW 488
40492: NOT
40493: IFFALSE 40497
// continue ;
40495: GO 40429
// if HexInfo ( _x , _y ) = 0 then
40497: LD_VAR 0 7
40501: PPUSH
40502: LD_VAR 0 8
40506: PPUSH
40507: CALL_OW 428
40511: PUSH
40512: LD_INT 0
40514: EQUAL
40515: IFFALSE 40540
// begin ComMoveXY ( unit , _x , _y ) ;
40517: LD_VAR 0 1
40521: PPUSH
40522: LD_VAR 0 7
40526: PPUSH
40527: LD_VAR 0 8
40531: PPUSH
40532: CALL_OW 111
// exit ;
40536: POP
40537: POP
40538: GO 40544
// end ; end ;
40540: GO 40429
40542: POP
40543: POP
// end ;
40544: LD_VAR 0 3
40548: RET
// export function ScanBase ( side , base_area ) ; begin
40549: LD_INT 0
40551: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40552: LD_ADDR_VAR 0 3
40556: PUSH
40557: LD_VAR 0 2
40561: PPUSH
40562: LD_INT 81
40564: PUSH
40565: LD_VAR 0 1
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PPUSH
40574: CALL_OW 70
40578: ST_TO_ADDR
// end ;
40579: LD_VAR 0 3
40583: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40584: LD_INT 0
40586: PPUSH
40587: PPUSH
40588: PPUSH
40589: PPUSH
// result := false ;
40590: LD_ADDR_VAR 0 2
40594: PUSH
40595: LD_INT 0
40597: ST_TO_ADDR
// side := GetSide ( unit ) ;
40598: LD_ADDR_VAR 0 3
40602: PUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 255
40612: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40613: LD_ADDR_VAR 0 4
40617: PUSH
40618: LD_VAR 0 1
40622: PPUSH
40623: CALL_OW 248
40627: ST_TO_ADDR
// case nat of 1 :
40628: LD_VAR 0 4
40632: PUSH
40633: LD_INT 1
40635: DOUBLE
40636: EQUAL
40637: IFTRUE 40641
40639: GO 40652
40641: POP
// tech := tech_lassight ; 2 :
40642: LD_ADDR_VAR 0 5
40646: PUSH
40647: LD_INT 12
40649: ST_TO_ADDR
40650: GO 40691
40652: LD_INT 2
40654: DOUBLE
40655: EQUAL
40656: IFTRUE 40660
40658: GO 40671
40660: POP
// tech := tech_mortar ; 3 :
40661: LD_ADDR_VAR 0 5
40665: PUSH
40666: LD_INT 41
40668: ST_TO_ADDR
40669: GO 40691
40671: LD_INT 3
40673: DOUBLE
40674: EQUAL
40675: IFTRUE 40679
40677: GO 40690
40679: POP
// tech := tech_bazooka ; end ;
40680: LD_ADDR_VAR 0 5
40684: PUSH
40685: LD_INT 44
40687: ST_TO_ADDR
40688: GO 40691
40690: POP
// if Researched ( side , tech ) then
40691: LD_VAR 0 3
40695: PPUSH
40696: LD_VAR 0 5
40700: PPUSH
40701: CALL_OW 325
40705: IFFALSE 40732
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 5
40714: PUSH
40715: LD_INT 8
40717: PUSH
40718: LD_INT 9
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: LIST
40725: PUSH
40726: LD_VAR 0 4
40730: ARRAY
40731: ST_TO_ADDR
// end ;
40732: LD_VAR 0 2
40736: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40737: LD_INT 0
40739: PPUSH
40740: PPUSH
40741: PPUSH
// if not mines then
40742: LD_VAR 0 2
40746: NOT
40747: IFFALSE 40751
// exit ;
40749: GO 40895
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40751: LD_ADDR_VAR 0 5
40755: PUSH
40756: LD_INT 81
40758: PUSH
40759: LD_VAR 0 1
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 3
40770: PUSH
40771: LD_INT 21
40773: PUSH
40774: LD_INT 3
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PPUSH
40789: CALL_OW 69
40793: ST_TO_ADDR
// for i in mines do
40794: LD_ADDR_VAR 0 4
40798: PUSH
40799: LD_VAR 0 2
40803: PUSH
40804: FOR_IN
40805: IFFALSE 40893
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40807: LD_VAR 0 4
40811: PUSH
40812: LD_INT 1
40814: ARRAY
40815: PPUSH
40816: LD_VAR 0 4
40820: PUSH
40821: LD_INT 2
40823: ARRAY
40824: PPUSH
40825: CALL_OW 458
40829: NOT
40830: IFFALSE 40834
// continue ;
40832: GO 40804
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40834: LD_VAR 0 4
40838: PUSH
40839: LD_INT 1
40841: ARRAY
40842: PPUSH
40843: LD_VAR 0 4
40847: PUSH
40848: LD_INT 2
40850: ARRAY
40851: PPUSH
40852: CALL_OW 428
40856: PUSH
40857: LD_VAR 0 5
40861: IN
40862: IFFALSE 40891
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40864: LD_VAR 0 4
40868: PUSH
40869: LD_INT 1
40871: ARRAY
40872: PPUSH
40873: LD_VAR 0 4
40877: PUSH
40878: LD_INT 2
40880: ARRAY
40881: PPUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 456
// end ;
40891: GO 40804
40893: POP
40894: POP
// end ;
40895: LD_VAR 0 3
40899: RET
// export function Count ( array ) ; var i ; begin
40900: LD_INT 0
40902: PPUSH
40903: PPUSH
// result := 0 ;
40904: LD_ADDR_VAR 0 2
40908: PUSH
40909: LD_INT 0
40911: ST_TO_ADDR
// for i in array do
40912: LD_ADDR_VAR 0 3
40916: PUSH
40917: LD_VAR 0 1
40921: PUSH
40922: FOR_IN
40923: IFFALSE 40947
// if i then
40925: LD_VAR 0 3
40929: IFFALSE 40945
// result := result + 1 ;
40931: LD_ADDR_VAR 0 2
40935: PUSH
40936: LD_VAR 0 2
40940: PUSH
40941: LD_INT 1
40943: PLUS
40944: ST_TO_ADDR
40945: GO 40922
40947: POP
40948: POP
// end ;
40949: LD_VAR 0 2
40953: RET
// export function IsEmpty ( building ) ; begin
40954: LD_INT 0
40956: PPUSH
// if not building then
40957: LD_VAR 0 1
40961: NOT
40962: IFFALSE 40966
// exit ;
40964: GO 41009
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40966: LD_ADDR_VAR 0 2
40970: PUSH
40971: LD_VAR 0 1
40975: PUSH
40976: LD_INT 22
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 255
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 58
40995: PUSH
40996: EMPTY
40997: LIST
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PPUSH
41003: CALL_OW 69
41007: IN
41008: ST_TO_ADDR
// end ;
41009: LD_VAR 0 2
41013: RET
// export function IsNotFull ( building ) ; begin
41014: LD_INT 0
41016: PPUSH
// if not building then
41017: LD_VAR 0 1
41021: NOT
41022: IFFALSE 41026
// exit ;
41024: GO 41045
// result := UnitsInside ( building ) < 6 ;
41026: LD_ADDR_VAR 0 2
41030: PUSH
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 313
41040: PUSH
41041: LD_INT 6
41043: LESS
41044: ST_TO_ADDR
// end ;
41045: LD_VAR 0 2
41049: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41050: LD_INT 0
41052: PPUSH
41053: PPUSH
41054: PPUSH
41055: PPUSH
// tmp := [ ] ;
41056: LD_ADDR_VAR 0 3
41060: PUSH
41061: EMPTY
41062: ST_TO_ADDR
// list := [ ] ;
41063: LD_ADDR_VAR 0 5
41067: PUSH
41068: EMPTY
41069: ST_TO_ADDR
// for i = 16 to 25 do
41070: LD_ADDR_VAR 0 4
41074: PUSH
41075: DOUBLE
41076: LD_INT 16
41078: DEC
41079: ST_TO_ADDR
41080: LD_INT 25
41082: PUSH
41083: FOR_TO
41084: IFFALSE 41157
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_VAR 0 3
41095: PUSH
41096: LD_INT 22
41098: PUSH
41099: LD_VAR 0 1
41103: PPUSH
41104: CALL_OW 255
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 91
41115: PUSH
41116: LD_VAR 0 1
41120: PUSH
41121: LD_INT 6
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 30
41131: PUSH
41132: LD_VAR 0 4
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: PPUSH
41149: CALL_OW 69
41153: ADD
41154: ST_TO_ADDR
41155: GO 41083
41157: POP
41158: POP
// for i = 1 to tmp do
41159: LD_ADDR_VAR 0 4
41163: PUSH
41164: DOUBLE
41165: LD_INT 1
41167: DEC
41168: ST_TO_ADDR
41169: LD_VAR 0 3
41173: PUSH
41174: FOR_TO
41175: IFFALSE 41263
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41177: LD_ADDR_VAR 0 5
41181: PUSH
41182: LD_VAR 0 5
41186: PUSH
41187: LD_VAR 0 3
41191: PUSH
41192: LD_VAR 0 4
41196: ARRAY
41197: PPUSH
41198: CALL_OW 266
41202: PUSH
41203: LD_VAR 0 3
41207: PUSH
41208: LD_VAR 0 4
41212: ARRAY
41213: PPUSH
41214: CALL_OW 250
41218: PUSH
41219: LD_VAR 0 3
41223: PUSH
41224: LD_VAR 0 4
41228: ARRAY
41229: PPUSH
41230: CALL_OW 251
41234: PUSH
41235: LD_VAR 0 3
41239: PUSH
41240: LD_VAR 0 4
41244: ARRAY
41245: PPUSH
41246: CALL_OW 254
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: PUSH
41257: EMPTY
41258: LIST
41259: ADD
41260: ST_TO_ADDR
41261: GO 41174
41263: POP
41264: POP
// result := list ;
41265: LD_ADDR_VAR 0 2
41269: PUSH
41270: LD_VAR 0 5
41274: ST_TO_ADDR
// end ;
41275: LD_VAR 0 2
41279: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41280: LD_INT 0
41282: PPUSH
41283: PPUSH
41284: PPUSH
41285: PPUSH
41286: PPUSH
41287: PPUSH
41288: PPUSH
// if not factory then
41289: LD_VAR 0 1
41293: NOT
41294: IFFALSE 41298
// exit ;
41296: GO 41891
// if control = control_apeman then
41298: LD_VAR 0 4
41302: PUSH
41303: LD_INT 5
41305: EQUAL
41306: IFFALSE 41415
// begin tmp := UnitsInside ( factory ) ;
41308: LD_ADDR_VAR 0 8
41312: PUSH
41313: LD_VAR 0 1
41317: PPUSH
41318: CALL_OW 313
41322: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41323: LD_VAR 0 8
41327: PPUSH
41328: LD_INT 25
41330: PUSH
41331: LD_INT 12
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PPUSH
41338: CALL_OW 72
41342: NOT
41343: IFFALSE 41353
// control := control_manual ;
41345: LD_ADDR_VAR 0 4
41349: PUSH
41350: LD_INT 1
41352: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41353: LD_ADDR_VAR 0 8
41357: PUSH
41358: LD_VAR 0 1
41362: PPUSH
41363: CALL 41050 0 1
41367: ST_TO_ADDR
// if tmp then
41368: LD_VAR 0 8
41372: IFFALSE 41415
// begin for i in tmp do
41374: LD_ADDR_VAR 0 7
41378: PUSH
41379: LD_VAR 0 8
41383: PUSH
41384: FOR_IN
41385: IFFALSE 41413
// if i [ 1 ] = b_ext_radio then
41387: LD_VAR 0 7
41391: PUSH
41392: LD_INT 1
41394: ARRAY
41395: PUSH
41396: LD_INT 22
41398: EQUAL
41399: IFFALSE 41411
// begin control := control_remote ;
41401: LD_ADDR_VAR 0 4
41405: PUSH
41406: LD_INT 2
41408: ST_TO_ADDR
// break ;
41409: GO 41413
// end ;
41411: GO 41384
41413: POP
41414: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41415: LD_VAR 0 1
41419: PPUSH
41420: LD_VAR 0 2
41424: PPUSH
41425: LD_VAR 0 3
41429: PPUSH
41430: LD_VAR 0 4
41434: PPUSH
41435: LD_VAR 0 5
41439: PPUSH
41440: CALL_OW 448
41444: IFFALSE 41479
// begin result := [ chassis , engine , control , weapon ] ;
41446: LD_ADDR_VAR 0 6
41450: PUSH
41451: LD_VAR 0 2
41455: PUSH
41456: LD_VAR 0 3
41460: PUSH
41461: LD_VAR 0 4
41465: PUSH
41466: LD_VAR 0 5
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: LIST
41475: LIST
41476: ST_TO_ADDR
// exit ;
41477: GO 41891
// end ; _chassis := AvailableChassisList ( factory ) ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: LD_VAR 0 1
41488: PPUSH
41489: CALL_OW 475
41493: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41494: LD_ADDR_VAR 0 11
41498: PUSH
41499: LD_VAR 0 1
41503: PPUSH
41504: CALL_OW 476
41508: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41509: LD_ADDR_VAR 0 12
41513: PUSH
41514: LD_VAR 0 1
41518: PPUSH
41519: CALL_OW 477
41523: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41524: LD_ADDR_VAR 0 10
41528: PUSH
41529: LD_VAR 0 1
41533: PPUSH
41534: CALL_OW 478
41538: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41539: LD_VAR 0 9
41543: NOT
41544: PUSH
41545: LD_VAR 0 11
41549: NOT
41550: OR
41551: PUSH
41552: LD_VAR 0 12
41556: NOT
41557: OR
41558: PUSH
41559: LD_VAR 0 10
41563: NOT
41564: OR
41565: IFFALSE 41600
// begin result := [ chassis , engine , control , weapon ] ;
41567: LD_ADDR_VAR 0 6
41571: PUSH
41572: LD_VAR 0 2
41576: PUSH
41577: LD_VAR 0 3
41581: PUSH
41582: LD_VAR 0 4
41586: PUSH
41587: LD_VAR 0 5
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: ST_TO_ADDR
// exit ;
41598: GO 41891
// end ; if not chassis in _chassis then
41600: LD_VAR 0 2
41604: PUSH
41605: LD_VAR 0 9
41609: IN
41610: NOT
41611: IFFALSE 41637
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41613: LD_ADDR_VAR 0 2
41617: PUSH
41618: LD_VAR 0 9
41622: PUSH
41623: LD_INT 1
41625: PPUSH
41626: LD_VAR 0 9
41630: PPUSH
41631: CALL_OW 12
41635: ARRAY
41636: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41637: LD_VAR 0 2
41641: PPUSH
41642: LD_VAR 0 3
41646: PPUSH
41647: CALL 41896 0 2
41651: NOT
41652: IFFALSE 41711
// repeat engine := _engine [ 1 ] ;
41654: LD_ADDR_VAR 0 3
41658: PUSH
41659: LD_VAR 0 11
41663: PUSH
41664: LD_INT 1
41666: ARRAY
41667: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41668: LD_ADDR_VAR 0 11
41672: PUSH
41673: LD_VAR 0 11
41677: PPUSH
41678: LD_INT 1
41680: PPUSH
41681: CALL_OW 3
41685: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41686: LD_VAR 0 2
41690: PPUSH
41691: LD_VAR 0 3
41695: PPUSH
41696: CALL 41896 0 2
41700: PUSH
41701: LD_VAR 0 11
41705: PUSH
41706: EMPTY
41707: EQUAL
41708: OR
41709: IFFALSE 41654
// if not control in _control then
41711: LD_VAR 0 4
41715: PUSH
41716: LD_VAR 0 12
41720: IN
41721: NOT
41722: IFFALSE 41748
// control := _control [ rand ( 1 , _control ) ] ;
41724: LD_ADDR_VAR 0 4
41728: PUSH
41729: LD_VAR 0 12
41733: PUSH
41734: LD_INT 1
41736: PPUSH
41737: LD_VAR 0 12
41741: PPUSH
41742: CALL_OW 12
41746: ARRAY
41747: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41748: LD_VAR 0 2
41752: PPUSH
41753: LD_VAR 0 5
41757: PPUSH
41758: CALL 42116 0 2
41762: NOT
41763: IFFALSE 41822
// repeat weapon := _weapon [ 1 ] ;
41765: LD_ADDR_VAR 0 5
41769: PUSH
41770: LD_VAR 0 10
41774: PUSH
41775: LD_INT 1
41777: ARRAY
41778: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41779: LD_ADDR_VAR 0 10
41783: PUSH
41784: LD_VAR 0 10
41788: PPUSH
41789: LD_INT 1
41791: PPUSH
41792: CALL_OW 3
41796: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41797: LD_VAR 0 2
41801: PPUSH
41802: LD_VAR 0 5
41806: PPUSH
41807: CALL 42116 0 2
41811: PUSH
41812: LD_VAR 0 10
41816: PUSH
41817: EMPTY
41818: EQUAL
41819: OR
41820: IFFALSE 41765
// result := [ ] ;
41822: LD_ADDR_VAR 0 6
41826: PUSH
41827: EMPTY
41828: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41829: LD_VAR 0 1
41833: PPUSH
41834: LD_VAR 0 2
41838: PPUSH
41839: LD_VAR 0 3
41843: PPUSH
41844: LD_VAR 0 4
41848: PPUSH
41849: LD_VAR 0 5
41853: PPUSH
41854: CALL_OW 448
41858: IFFALSE 41891
// result := [ chassis , engine , control , weapon ] ;
41860: LD_ADDR_VAR 0 6
41864: PUSH
41865: LD_VAR 0 2
41869: PUSH
41870: LD_VAR 0 3
41874: PUSH
41875: LD_VAR 0 4
41879: PUSH
41880: LD_VAR 0 5
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
// end ;
41891: LD_VAR 0 6
41895: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41896: LD_INT 0
41898: PPUSH
// if not chassis or not engine then
41899: LD_VAR 0 1
41903: NOT
41904: PUSH
41905: LD_VAR 0 2
41909: NOT
41910: OR
41911: IFFALSE 41915
// exit ;
41913: GO 42111
// case engine of engine_solar :
41915: LD_VAR 0 2
41919: PUSH
41920: LD_INT 2
41922: DOUBLE
41923: EQUAL
41924: IFTRUE 41928
41926: GO 41966
41928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41929: LD_ADDR_VAR 0 3
41933: PUSH
41934: LD_INT 11
41936: PUSH
41937: LD_INT 12
41939: PUSH
41940: LD_INT 13
41942: PUSH
41943: LD_INT 14
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 3
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: ST_TO_ADDR
41964: GO 42095
41966: LD_INT 1
41968: DOUBLE
41969: EQUAL
41970: IFTRUE 41974
41972: GO 42036
41974: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41975: LD_ADDR_VAR 0 3
41979: PUSH
41980: LD_INT 11
41982: PUSH
41983: LD_INT 12
41985: PUSH
41986: LD_INT 13
41988: PUSH
41989: LD_INT 14
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 3
42000: PUSH
42001: LD_INT 4
42003: PUSH
42004: LD_INT 5
42006: PUSH
42007: LD_INT 21
42009: PUSH
42010: LD_INT 23
42012: PUSH
42013: LD_INT 22
42015: PUSH
42016: LD_INT 24
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: ST_TO_ADDR
42034: GO 42095
42036: LD_INT 3
42038: DOUBLE
42039: EQUAL
42040: IFTRUE 42044
42042: GO 42094
42044: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42045: LD_ADDR_VAR 0 3
42049: PUSH
42050: LD_INT 13
42052: PUSH
42053: LD_INT 14
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: LD_INT 3
42061: PUSH
42062: LD_INT 4
42064: PUSH
42065: LD_INT 5
42067: PUSH
42068: LD_INT 21
42070: PUSH
42071: LD_INT 22
42073: PUSH
42074: LD_INT 23
42076: PUSH
42077: LD_INT 24
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: ST_TO_ADDR
42092: GO 42095
42094: POP
// result := ( chassis in result ) ;
42095: LD_ADDR_VAR 0 3
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: LD_VAR 0 3
42109: IN
42110: ST_TO_ADDR
// end ;
42111: LD_VAR 0 3
42115: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42116: LD_INT 0
42118: PPUSH
// if not chassis or not weapon then
42119: LD_VAR 0 1
42123: NOT
42124: PUSH
42125: LD_VAR 0 2
42129: NOT
42130: OR
42131: IFFALSE 42135
// exit ;
42133: GO 43197
// case weapon of us_machine_gun :
42135: LD_VAR 0 2
42139: PUSH
42140: LD_INT 2
42142: DOUBLE
42143: EQUAL
42144: IFTRUE 42148
42146: GO 42178
42148: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42149: LD_ADDR_VAR 0 3
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 3
42162: PUSH
42163: LD_INT 4
42165: PUSH
42166: LD_INT 5
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: ST_TO_ADDR
42176: GO 43181
42178: LD_INT 3
42180: DOUBLE
42181: EQUAL
42182: IFTRUE 42186
42184: GO 42216
42186: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42187: LD_ADDR_VAR 0 3
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: LD_INT 3
42200: PUSH
42201: LD_INT 4
42203: PUSH
42204: LD_INT 5
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: ST_TO_ADDR
42214: GO 43181
42216: LD_INT 11
42218: DOUBLE
42219: EQUAL
42220: IFTRUE 42224
42222: GO 42254
42224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42225: LD_ADDR_VAR 0 3
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 3
42238: PUSH
42239: LD_INT 4
42241: PUSH
42242: LD_INT 5
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
42252: GO 43181
42254: LD_INT 4
42256: DOUBLE
42257: EQUAL
42258: IFTRUE 42262
42260: GO 42288
42262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42263: LD_ADDR_VAR 0 3
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 3
42273: PUSH
42274: LD_INT 4
42276: PUSH
42277: LD_INT 5
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: ST_TO_ADDR
42286: GO 43181
42288: LD_INT 5
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42296
42294: GO 42322
42296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42297: LD_ADDR_VAR 0 3
42301: PUSH
42302: LD_INT 2
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 4
42310: PUSH
42311: LD_INT 5
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: LIST
42318: LIST
42319: ST_TO_ADDR
42320: GO 43181
42322: LD_INT 9
42324: DOUBLE
42325: EQUAL
42326: IFTRUE 42330
42328: GO 42356
42330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42331: LD_ADDR_VAR 0 3
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 3
42341: PUSH
42342: LD_INT 4
42344: PUSH
42345: LD_INT 5
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: ST_TO_ADDR
42354: GO 43181
42356: LD_INT 7
42358: DOUBLE
42359: EQUAL
42360: IFTRUE 42364
42362: GO 42390
42364: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42365: LD_ADDR_VAR 0 3
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: LD_INT 4
42378: PUSH
42379: LD_INT 5
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: ST_TO_ADDR
42388: GO 43181
42390: LD_INT 12
42392: DOUBLE
42393: EQUAL
42394: IFTRUE 42398
42396: GO 42424
42398: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42399: LD_ADDR_VAR 0 3
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: LD_INT 5
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: ST_TO_ADDR
42422: GO 43181
42424: LD_INT 13
42426: DOUBLE
42427: EQUAL
42428: IFTRUE 42432
42430: GO 42458
42432: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42433: LD_ADDR_VAR 0 3
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: LD_INT 4
42446: PUSH
42447: LD_INT 5
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
42456: GO 43181
42458: LD_INT 14
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42484
42466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: ST_TO_ADDR
42482: GO 43181
42484: LD_INT 6
42486: DOUBLE
42487: EQUAL
42488: IFTRUE 42492
42490: GO 42510
42492: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 4
42500: PUSH
42501: LD_INT 5
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: ST_TO_ADDR
42508: GO 43181
42510: LD_INT 10
42512: DOUBLE
42513: EQUAL
42514: IFTRUE 42518
42516: GO 42536
42518: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42519: LD_ADDR_VAR 0 3
42523: PUSH
42524: LD_INT 4
42526: PUSH
42527: LD_INT 5
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: ST_TO_ADDR
42534: GO 43181
42536: LD_INT 22
42538: DOUBLE
42539: EQUAL
42540: IFTRUE 42544
42542: GO 42570
42544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42545: LD_ADDR_VAR 0 3
42549: PUSH
42550: LD_INT 11
42552: PUSH
42553: LD_INT 12
42555: PUSH
42556: LD_INT 13
42558: PUSH
42559: LD_INT 14
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
42568: GO 43181
42570: LD_INT 23
42572: DOUBLE
42573: EQUAL
42574: IFTRUE 42578
42576: GO 42604
42578: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42579: LD_ADDR_VAR 0 3
42583: PUSH
42584: LD_INT 11
42586: PUSH
42587: LD_INT 12
42589: PUSH
42590: LD_INT 13
42592: PUSH
42593: LD_INT 14
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: ST_TO_ADDR
42602: GO 43181
42604: LD_INT 24
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42612
42610: GO 42638
42612: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42613: LD_ADDR_VAR 0 3
42617: PUSH
42618: LD_INT 11
42620: PUSH
42621: LD_INT 12
42623: PUSH
42624: LD_INT 13
42626: PUSH
42627: LD_INT 14
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: LIST
42634: LIST
42635: ST_TO_ADDR
42636: GO 43181
42638: LD_INT 30
42640: DOUBLE
42641: EQUAL
42642: IFTRUE 42646
42644: GO 42672
42646: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 11
42654: PUSH
42655: LD_INT 12
42657: PUSH
42658: LD_INT 13
42660: PUSH
42661: LD_INT 14
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: ST_TO_ADDR
42670: GO 43181
42672: LD_INT 25
42674: DOUBLE
42675: EQUAL
42676: IFTRUE 42680
42678: GO 42698
42680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42681: LD_ADDR_VAR 0 3
42685: PUSH
42686: LD_INT 13
42688: PUSH
42689: LD_INT 14
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: ST_TO_ADDR
42696: GO 43181
42698: LD_INT 27
42700: DOUBLE
42701: EQUAL
42702: IFTRUE 42706
42704: GO 42724
42706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42707: LD_ADDR_VAR 0 3
42711: PUSH
42712: LD_INT 13
42714: PUSH
42715: LD_INT 14
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: ST_TO_ADDR
42722: GO 43181
42724: LD_EXP 165
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42734
42732: GO 42760
42734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42735: LD_ADDR_VAR 0 3
42739: PUSH
42740: LD_INT 11
42742: PUSH
42743: LD_INT 12
42745: PUSH
42746: LD_INT 13
42748: PUSH
42749: LD_INT 14
42751: PUSH
42752: EMPTY
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: ST_TO_ADDR
42758: GO 43181
42760: LD_INT 28
42762: DOUBLE
42763: EQUAL
42764: IFTRUE 42768
42766: GO 42786
42768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42769: LD_ADDR_VAR 0 3
42773: PUSH
42774: LD_INT 13
42776: PUSH
42777: LD_INT 14
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: ST_TO_ADDR
42784: GO 43181
42786: LD_INT 29
42788: DOUBLE
42789: EQUAL
42790: IFTRUE 42794
42792: GO 42812
42794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42795: LD_ADDR_VAR 0 3
42799: PUSH
42800: LD_INT 13
42802: PUSH
42803: LD_INT 14
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: ST_TO_ADDR
42810: GO 43181
42812: LD_INT 31
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42838
42820: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42821: LD_ADDR_VAR 0 3
42825: PUSH
42826: LD_INT 13
42828: PUSH
42829: LD_INT 14
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: ST_TO_ADDR
42836: GO 43181
42838: LD_INT 26
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42864
42846: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 13
42854: PUSH
42855: LD_INT 14
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: ST_TO_ADDR
42862: GO 43181
42864: LD_INT 42
42866: DOUBLE
42867: EQUAL
42868: IFTRUE 42872
42870: GO 42898
42872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42873: LD_ADDR_VAR 0 3
42877: PUSH
42878: LD_INT 21
42880: PUSH
42881: LD_INT 22
42883: PUSH
42884: LD_INT 23
42886: PUSH
42887: LD_INT 24
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: ST_TO_ADDR
42896: GO 43181
42898: LD_INT 43
42900: DOUBLE
42901: EQUAL
42902: IFTRUE 42906
42904: GO 42932
42906: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42907: LD_ADDR_VAR 0 3
42911: PUSH
42912: LD_INT 21
42914: PUSH
42915: LD_INT 22
42917: PUSH
42918: LD_INT 23
42920: PUSH
42921: LD_INT 24
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: ST_TO_ADDR
42930: GO 43181
42932: LD_INT 44
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 42966
42940: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 21
42948: PUSH
42949: LD_INT 22
42951: PUSH
42952: LD_INT 23
42954: PUSH
42955: LD_INT 24
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: ST_TO_ADDR
42964: GO 43181
42966: LD_INT 45
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 43000
42974: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42975: LD_ADDR_VAR 0 3
42979: PUSH
42980: LD_INT 21
42982: PUSH
42983: LD_INT 22
42985: PUSH
42986: LD_INT 23
42988: PUSH
42989: LD_INT 24
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: LIST
42996: LIST
42997: ST_TO_ADDR
42998: GO 43181
43000: LD_INT 49
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43008
43006: GO 43034
43008: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43009: LD_ADDR_VAR 0 3
43013: PUSH
43014: LD_INT 21
43016: PUSH
43017: LD_INT 22
43019: PUSH
43020: LD_INT 23
43022: PUSH
43023: LD_INT 24
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: ST_TO_ADDR
43032: GO 43181
43034: LD_INT 51
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43068
43042: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43043: LD_ADDR_VAR 0 3
43047: PUSH
43048: LD_INT 21
43050: PUSH
43051: LD_INT 22
43053: PUSH
43054: LD_INT 23
43056: PUSH
43057: LD_INT 24
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: ST_TO_ADDR
43066: GO 43181
43068: LD_INT 52
43070: DOUBLE
43071: EQUAL
43072: IFTRUE 43076
43074: GO 43102
43076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43077: LD_ADDR_VAR 0 3
43081: PUSH
43082: LD_INT 21
43084: PUSH
43085: LD_INT 22
43087: PUSH
43088: LD_INT 23
43090: PUSH
43091: LD_INT 24
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
43100: GO 43181
43102: LD_INT 53
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43128
43110: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 23
43118: PUSH
43119: LD_INT 24
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: ST_TO_ADDR
43126: GO 43181
43128: LD_INT 46
43130: DOUBLE
43131: EQUAL
43132: IFTRUE 43136
43134: GO 43154
43136: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43137: LD_ADDR_VAR 0 3
43141: PUSH
43142: LD_INT 23
43144: PUSH
43145: LD_INT 24
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: ST_TO_ADDR
43152: GO 43181
43154: LD_INT 47
43156: DOUBLE
43157: EQUAL
43158: IFTRUE 43162
43160: GO 43180
43162: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43163: LD_ADDR_VAR 0 3
43167: PUSH
43168: LD_INT 23
43170: PUSH
43171: LD_INT 24
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: ST_TO_ADDR
43178: GO 43181
43180: POP
// result := ( chassis in result ) ;
43181: LD_ADDR_VAR 0 3
43185: PUSH
43186: LD_VAR 0 1
43190: PUSH
43191: LD_VAR 0 3
43195: IN
43196: ST_TO_ADDR
// end ;
43197: LD_VAR 0 3
43201: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43202: LD_INT 0
43204: PPUSH
43205: PPUSH
43206: PPUSH
43207: PPUSH
43208: PPUSH
43209: PPUSH
43210: PPUSH
// result := array ;
43211: LD_ADDR_VAR 0 5
43215: PUSH
43216: LD_VAR 0 1
43220: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43221: LD_VAR 0 1
43225: NOT
43226: PUSH
43227: LD_VAR 0 2
43231: NOT
43232: OR
43233: PUSH
43234: LD_VAR 0 3
43238: NOT
43239: OR
43240: PUSH
43241: LD_VAR 0 2
43245: PUSH
43246: LD_VAR 0 1
43250: GREATER
43251: OR
43252: PUSH
43253: LD_VAR 0 3
43257: PUSH
43258: LD_VAR 0 1
43262: GREATER
43263: OR
43264: IFFALSE 43268
// exit ;
43266: GO 43564
// if direction then
43268: LD_VAR 0 4
43272: IFFALSE 43336
// begin d := 1 ;
43274: LD_ADDR_VAR 0 9
43278: PUSH
43279: LD_INT 1
43281: ST_TO_ADDR
// if i_from > i_to then
43282: LD_VAR 0 2
43286: PUSH
43287: LD_VAR 0 3
43291: GREATER
43292: IFFALSE 43318
// length := ( array - i_from ) + i_to else
43294: LD_ADDR_VAR 0 11
43298: PUSH
43299: LD_VAR 0 1
43303: PUSH
43304: LD_VAR 0 2
43308: MINUS
43309: PUSH
43310: LD_VAR 0 3
43314: PLUS
43315: ST_TO_ADDR
43316: GO 43334
// length := i_to - i_from ;
43318: LD_ADDR_VAR 0 11
43322: PUSH
43323: LD_VAR 0 3
43327: PUSH
43328: LD_VAR 0 2
43332: MINUS
43333: ST_TO_ADDR
// end else
43334: GO 43397
// begin d := - 1 ;
43336: LD_ADDR_VAR 0 9
43340: PUSH
43341: LD_INT 1
43343: NEG
43344: ST_TO_ADDR
// if i_from > i_to then
43345: LD_VAR 0 2
43349: PUSH
43350: LD_VAR 0 3
43354: GREATER
43355: IFFALSE 43375
// length := i_from - i_to else
43357: LD_ADDR_VAR 0 11
43361: PUSH
43362: LD_VAR 0 2
43366: PUSH
43367: LD_VAR 0 3
43371: MINUS
43372: ST_TO_ADDR
43373: GO 43397
// length := ( array - i_to ) + i_from ;
43375: LD_ADDR_VAR 0 11
43379: PUSH
43380: LD_VAR 0 1
43384: PUSH
43385: LD_VAR 0 3
43389: MINUS
43390: PUSH
43391: LD_VAR 0 2
43395: PLUS
43396: ST_TO_ADDR
// end ; if not length then
43397: LD_VAR 0 11
43401: NOT
43402: IFFALSE 43406
// exit ;
43404: GO 43564
// tmp := array ;
43406: LD_ADDR_VAR 0 10
43410: PUSH
43411: LD_VAR 0 1
43415: ST_TO_ADDR
// for i = 1 to length do
43416: LD_ADDR_VAR 0 6
43420: PUSH
43421: DOUBLE
43422: LD_INT 1
43424: DEC
43425: ST_TO_ADDR
43426: LD_VAR 0 11
43430: PUSH
43431: FOR_TO
43432: IFFALSE 43552
// begin for j = 1 to array do
43434: LD_ADDR_VAR 0 7
43438: PUSH
43439: DOUBLE
43440: LD_INT 1
43442: DEC
43443: ST_TO_ADDR
43444: LD_VAR 0 1
43448: PUSH
43449: FOR_TO
43450: IFFALSE 43538
// begin k := j + d ;
43452: LD_ADDR_VAR 0 8
43456: PUSH
43457: LD_VAR 0 7
43461: PUSH
43462: LD_VAR 0 9
43466: PLUS
43467: ST_TO_ADDR
// if k > array then
43468: LD_VAR 0 8
43472: PUSH
43473: LD_VAR 0 1
43477: GREATER
43478: IFFALSE 43488
// k := 1 ;
43480: LD_ADDR_VAR 0 8
43484: PUSH
43485: LD_INT 1
43487: ST_TO_ADDR
// if not k then
43488: LD_VAR 0 8
43492: NOT
43493: IFFALSE 43505
// k := array ;
43495: LD_ADDR_VAR 0 8
43499: PUSH
43500: LD_VAR 0 1
43504: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43505: LD_ADDR_VAR 0 10
43509: PUSH
43510: LD_VAR 0 10
43514: PPUSH
43515: LD_VAR 0 8
43519: PPUSH
43520: LD_VAR 0 1
43524: PUSH
43525: LD_VAR 0 7
43529: ARRAY
43530: PPUSH
43531: CALL_OW 1
43535: ST_TO_ADDR
// end ;
43536: GO 43449
43538: POP
43539: POP
// array := tmp ;
43540: LD_ADDR_VAR 0 1
43544: PUSH
43545: LD_VAR 0 10
43549: ST_TO_ADDR
// end ;
43550: GO 43431
43552: POP
43553: POP
// result := array ;
43554: LD_ADDR_VAR 0 5
43558: PUSH
43559: LD_VAR 0 1
43563: ST_TO_ADDR
// end ;
43564: LD_VAR 0 5
43568: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43569: LD_INT 0
43571: PPUSH
43572: PPUSH
// result := 0 ;
43573: LD_ADDR_VAR 0 3
43577: PUSH
43578: LD_INT 0
43580: ST_TO_ADDR
// if not array or not value in array then
43581: LD_VAR 0 1
43585: NOT
43586: PUSH
43587: LD_VAR 0 2
43591: PUSH
43592: LD_VAR 0 1
43596: IN
43597: NOT
43598: OR
43599: IFFALSE 43603
// exit ;
43601: GO 43657
// for i = 1 to array do
43603: LD_ADDR_VAR 0 4
43607: PUSH
43608: DOUBLE
43609: LD_INT 1
43611: DEC
43612: ST_TO_ADDR
43613: LD_VAR 0 1
43617: PUSH
43618: FOR_TO
43619: IFFALSE 43655
// if value = array [ i ] then
43621: LD_VAR 0 2
43625: PUSH
43626: LD_VAR 0 1
43630: PUSH
43631: LD_VAR 0 4
43635: ARRAY
43636: EQUAL
43637: IFFALSE 43653
// begin result := i ;
43639: LD_ADDR_VAR 0 3
43643: PUSH
43644: LD_VAR 0 4
43648: ST_TO_ADDR
// exit ;
43649: POP
43650: POP
43651: GO 43657
// end ;
43653: GO 43618
43655: POP
43656: POP
// end ;
43657: LD_VAR 0 3
43661: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43662: LD_INT 0
43664: PPUSH
// vc_chassis := chassis ;
43665: LD_ADDR_OWVAR 37
43669: PUSH
43670: LD_VAR 0 1
43674: ST_TO_ADDR
// vc_engine := engine ;
43675: LD_ADDR_OWVAR 39
43679: PUSH
43680: LD_VAR 0 2
43684: ST_TO_ADDR
// vc_control := control ;
43685: LD_ADDR_OWVAR 38
43689: PUSH
43690: LD_VAR 0 3
43694: ST_TO_ADDR
// vc_weapon := weapon ;
43695: LD_ADDR_OWVAR 40
43699: PUSH
43700: LD_VAR 0 4
43704: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43705: LD_ADDR_OWVAR 41
43709: PUSH
43710: LD_VAR 0 5
43714: ST_TO_ADDR
// end ;
43715: LD_VAR 0 6
43719: RET
// export function WantPlant ( unit ) ; var task ; begin
43720: LD_INT 0
43722: PPUSH
43723: PPUSH
// result := false ;
43724: LD_ADDR_VAR 0 2
43728: PUSH
43729: LD_INT 0
43731: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43732: LD_ADDR_VAR 0 3
43736: PUSH
43737: LD_VAR 0 1
43741: PPUSH
43742: CALL_OW 437
43746: ST_TO_ADDR
// if task then
43747: LD_VAR 0 3
43751: IFFALSE 43779
// if task [ 1 ] [ 1 ] = p then
43753: LD_VAR 0 3
43757: PUSH
43758: LD_INT 1
43760: ARRAY
43761: PUSH
43762: LD_INT 1
43764: ARRAY
43765: PUSH
43766: LD_STRING p
43768: EQUAL
43769: IFFALSE 43779
// result := true ;
43771: LD_ADDR_VAR 0 2
43775: PUSH
43776: LD_INT 1
43778: ST_TO_ADDR
// end ;
43779: LD_VAR 0 2
43783: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43784: LD_INT 0
43786: PPUSH
43787: PPUSH
43788: PPUSH
43789: PPUSH
// if pos < 1 then
43790: LD_VAR 0 2
43794: PUSH
43795: LD_INT 1
43797: LESS
43798: IFFALSE 43802
// exit ;
43800: GO 44105
// if pos = 1 then
43802: LD_VAR 0 2
43806: PUSH
43807: LD_INT 1
43809: EQUAL
43810: IFFALSE 43843
// result := Replace ( arr , pos [ 1 ] , value ) else
43812: LD_ADDR_VAR 0 4
43816: PUSH
43817: LD_VAR 0 1
43821: PPUSH
43822: LD_VAR 0 2
43826: PUSH
43827: LD_INT 1
43829: ARRAY
43830: PPUSH
43831: LD_VAR 0 3
43835: PPUSH
43836: CALL_OW 1
43840: ST_TO_ADDR
43841: GO 44105
// begin tmp := arr ;
43843: LD_ADDR_VAR 0 6
43847: PUSH
43848: LD_VAR 0 1
43852: ST_TO_ADDR
// s_arr := [ tmp ] ;
43853: LD_ADDR_VAR 0 7
43857: PUSH
43858: LD_VAR 0 6
43862: PUSH
43863: EMPTY
43864: LIST
43865: ST_TO_ADDR
// for i = 1 to pos - 1 do
43866: LD_ADDR_VAR 0 5
43870: PUSH
43871: DOUBLE
43872: LD_INT 1
43874: DEC
43875: ST_TO_ADDR
43876: LD_VAR 0 2
43880: PUSH
43881: LD_INT 1
43883: MINUS
43884: PUSH
43885: FOR_TO
43886: IFFALSE 43931
// begin tmp := tmp [ pos [ i ] ] ;
43888: LD_ADDR_VAR 0 6
43892: PUSH
43893: LD_VAR 0 6
43897: PUSH
43898: LD_VAR 0 2
43902: PUSH
43903: LD_VAR 0 5
43907: ARRAY
43908: ARRAY
43909: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43910: LD_ADDR_VAR 0 7
43914: PUSH
43915: LD_VAR 0 7
43919: PUSH
43920: LD_VAR 0 6
43924: PUSH
43925: EMPTY
43926: LIST
43927: ADD
43928: ST_TO_ADDR
// end ;
43929: GO 43885
43931: POP
43932: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43933: LD_ADDR_VAR 0 6
43937: PUSH
43938: LD_VAR 0 6
43942: PPUSH
43943: LD_VAR 0 2
43947: PUSH
43948: LD_VAR 0 2
43952: ARRAY
43953: PPUSH
43954: LD_VAR 0 3
43958: PPUSH
43959: CALL_OW 1
43963: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43964: LD_ADDR_VAR 0 7
43968: PUSH
43969: LD_VAR 0 7
43973: PPUSH
43974: LD_VAR 0 7
43978: PPUSH
43979: LD_VAR 0 6
43983: PPUSH
43984: CALL_OW 1
43988: ST_TO_ADDR
// for i = s_arr downto 2 do
43989: LD_ADDR_VAR 0 5
43993: PUSH
43994: DOUBLE
43995: LD_VAR 0 7
43999: INC
44000: ST_TO_ADDR
44001: LD_INT 2
44003: PUSH
44004: FOR_DOWNTO
44005: IFFALSE 44089
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44007: LD_ADDR_VAR 0 6
44011: PUSH
44012: LD_VAR 0 7
44016: PUSH
44017: LD_VAR 0 5
44021: PUSH
44022: LD_INT 1
44024: MINUS
44025: ARRAY
44026: PPUSH
44027: LD_VAR 0 2
44031: PUSH
44032: LD_VAR 0 5
44036: PUSH
44037: LD_INT 1
44039: MINUS
44040: ARRAY
44041: PPUSH
44042: LD_VAR 0 7
44046: PUSH
44047: LD_VAR 0 5
44051: ARRAY
44052: PPUSH
44053: CALL_OW 1
44057: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44058: LD_ADDR_VAR 0 7
44062: PUSH
44063: LD_VAR 0 7
44067: PPUSH
44068: LD_VAR 0 5
44072: PUSH
44073: LD_INT 1
44075: MINUS
44076: PPUSH
44077: LD_VAR 0 6
44081: PPUSH
44082: CALL_OW 1
44086: ST_TO_ADDR
// end ;
44087: GO 44004
44089: POP
44090: POP
// result := s_arr [ 1 ] ;
44091: LD_ADDR_VAR 0 4
44095: PUSH
44096: LD_VAR 0 7
44100: PUSH
44101: LD_INT 1
44103: ARRAY
44104: ST_TO_ADDR
// end ; end ;
44105: LD_VAR 0 4
44109: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44110: LD_INT 0
44112: PPUSH
44113: PPUSH
// if not list then
44114: LD_VAR 0 1
44118: NOT
44119: IFFALSE 44123
// exit ;
44121: GO 44214
// i := list [ pos1 ] ;
44123: LD_ADDR_VAR 0 5
44127: PUSH
44128: LD_VAR 0 1
44132: PUSH
44133: LD_VAR 0 2
44137: ARRAY
44138: ST_TO_ADDR
// if not i then
44139: LD_VAR 0 5
44143: NOT
44144: IFFALSE 44148
// exit ;
44146: GO 44214
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44148: LD_ADDR_VAR 0 1
44152: PUSH
44153: LD_VAR 0 1
44157: PPUSH
44158: LD_VAR 0 2
44162: PPUSH
44163: LD_VAR 0 1
44167: PUSH
44168: LD_VAR 0 3
44172: ARRAY
44173: PPUSH
44174: CALL_OW 1
44178: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44179: LD_ADDR_VAR 0 1
44183: PUSH
44184: LD_VAR 0 1
44188: PPUSH
44189: LD_VAR 0 3
44193: PPUSH
44194: LD_VAR 0 5
44198: PPUSH
44199: CALL_OW 1
44203: ST_TO_ADDR
// result := list ;
44204: LD_ADDR_VAR 0 4
44208: PUSH
44209: LD_VAR 0 1
44213: ST_TO_ADDR
// end ;
44214: LD_VAR 0 4
44218: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44219: LD_INT 0
44221: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44222: LD_ADDR_VAR 0 5
44226: PUSH
44227: LD_VAR 0 1
44231: PPUSH
44232: CALL_OW 250
44236: PPUSH
44237: LD_VAR 0 1
44241: PPUSH
44242: CALL_OW 251
44246: PPUSH
44247: LD_VAR 0 2
44251: PPUSH
44252: LD_VAR 0 3
44256: PPUSH
44257: LD_VAR 0 4
44261: PPUSH
44262: CALL 44272 0 5
44266: ST_TO_ADDR
// end ;
44267: LD_VAR 0 5
44271: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44272: LD_INT 0
44274: PPUSH
44275: PPUSH
44276: PPUSH
44277: PPUSH
// if not list then
44278: LD_VAR 0 3
44282: NOT
44283: IFFALSE 44287
// exit ;
44285: GO 44675
// result := [ ] ;
44287: LD_ADDR_VAR 0 6
44291: PUSH
44292: EMPTY
44293: ST_TO_ADDR
// for i in list do
44294: LD_ADDR_VAR 0 7
44298: PUSH
44299: LD_VAR 0 3
44303: PUSH
44304: FOR_IN
44305: IFFALSE 44507
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44307: LD_ADDR_VAR 0 9
44311: PUSH
44312: LD_VAR 0 7
44316: PPUSH
44317: LD_VAR 0 1
44321: PPUSH
44322: LD_VAR 0 2
44326: PPUSH
44327: CALL_OW 297
44331: ST_TO_ADDR
// if not result then
44332: LD_VAR 0 6
44336: NOT
44337: IFFALSE 44363
// result := [ [ i , tmp ] ] else
44339: LD_ADDR_VAR 0 6
44343: PUSH
44344: LD_VAR 0 7
44348: PUSH
44349: LD_VAR 0 9
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: ST_TO_ADDR
44361: GO 44505
// begin if result [ result ] [ 2 ] < tmp then
44363: LD_VAR 0 6
44367: PUSH
44368: LD_VAR 0 6
44372: ARRAY
44373: PUSH
44374: LD_INT 2
44376: ARRAY
44377: PUSH
44378: LD_VAR 0 9
44382: LESS
44383: IFFALSE 44425
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44385: LD_ADDR_VAR 0 6
44389: PUSH
44390: LD_VAR 0 6
44394: PPUSH
44395: LD_VAR 0 6
44399: PUSH
44400: LD_INT 1
44402: PLUS
44403: PPUSH
44404: LD_VAR 0 7
44408: PUSH
44409: LD_VAR 0 9
44413: PUSH
44414: EMPTY
44415: LIST
44416: LIST
44417: PPUSH
44418: CALL_OW 2
44422: ST_TO_ADDR
44423: GO 44505
// for j = 1 to result do
44425: LD_ADDR_VAR 0 8
44429: PUSH
44430: DOUBLE
44431: LD_INT 1
44433: DEC
44434: ST_TO_ADDR
44435: LD_VAR 0 6
44439: PUSH
44440: FOR_TO
44441: IFFALSE 44503
// begin if tmp < result [ j ] [ 2 ] then
44443: LD_VAR 0 9
44447: PUSH
44448: LD_VAR 0 6
44452: PUSH
44453: LD_VAR 0 8
44457: ARRAY
44458: PUSH
44459: LD_INT 2
44461: ARRAY
44462: LESS
44463: IFFALSE 44501
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44465: LD_ADDR_VAR 0 6
44469: PUSH
44470: LD_VAR 0 6
44474: PPUSH
44475: LD_VAR 0 8
44479: PPUSH
44480: LD_VAR 0 7
44484: PUSH
44485: LD_VAR 0 9
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 2
44498: ST_TO_ADDR
// break ;
44499: GO 44503
// end ; end ;
44501: GO 44440
44503: POP
44504: POP
// end ; end ;
44505: GO 44304
44507: POP
44508: POP
// if result and not asc then
44509: LD_VAR 0 6
44513: PUSH
44514: LD_VAR 0 4
44518: NOT
44519: AND
44520: IFFALSE 44595
// begin tmp := result ;
44522: LD_ADDR_VAR 0 9
44526: PUSH
44527: LD_VAR 0 6
44531: ST_TO_ADDR
// for i = tmp downto 1 do
44532: LD_ADDR_VAR 0 7
44536: PUSH
44537: DOUBLE
44538: LD_VAR 0 9
44542: INC
44543: ST_TO_ADDR
44544: LD_INT 1
44546: PUSH
44547: FOR_DOWNTO
44548: IFFALSE 44593
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44550: LD_ADDR_VAR 0 6
44554: PUSH
44555: LD_VAR 0 6
44559: PPUSH
44560: LD_VAR 0 9
44564: PUSH
44565: LD_VAR 0 7
44569: MINUS
44570: PUSH
44571: LD_INT 1
44573: PLUS
44574: PPUSH
44575: LD_VAR 0 9
44579: PUSH
44580: LD_VAR 0 7
44584: ARRAY
44585: PPUSH
44586: CALL_OW 1
44590: ST_TO_ADDR
44591: GO 44547
44593: POP
44594: POP
// end ; tmp := [ ] ;
44595: LD_ADDR_VAR 0 9
44599: PUSH
44600: EMPTY
44601: ST_TO_ADDR
// if mode then
44602: LD_VAR 0 5
44606: IFFALSE 44675
// begin for i = 1 to result do
44608: LD_ADDR_VAR 0 7
44612: PUSH
44613: DOUBLE
44614: LD_INT 1
44616: DEC
44617: ST_TO_ADDR
44618: LD_VAR 0 6
44622: PUSH
44623: FOR_TO
44624: IFFALSE 44663
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44626: LD_ADDR_VAR 0 9
44630: PUSH
44631: LD_VAR 0 9
44635: PPUSH
44636: LD_VAR 0 7
44640: PPUSH
44641: LD_VAR 0 6
44645: PUSH
44646: LD_VAR 0 7
44650: ARRAY
44651: PUSH
44652: LD_INT 1
44654: ARRAY
44655: PPUSH
44656: CALL_OW 1
44660: ST_TO_ADDR
44661: GO 44623
44663: POP
44664: POP
// result := tmp ;
44665: LD_ADDR_VAR 0 6
44669: PUSH
44670: LD_VAR 0 9
44674: ST_TO_ADDR
// end ; end ;
44675: LD_VAR 0 6
44679: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44680: LD_INT 0
44682: PPUSH
44683: PPUSH
44684: PPUSH
44685: PPUSH
44686: PPUSH
44687: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44688: LD_ADDR_VAR 0 5
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: LD_INT 0
44701: PUSH
44702: EMPTY
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: ST_TO_ADDR
// if not x or not y then
44710: LD_VAR 0 2
44714: NOT
44715: PUSH
44716: LD_VAR 0 3
44720: NOT
44721: OR
44722: IFFALSE 44726
// exit ;
44724: GO 46378
// if not range then
44726: LD_VAR 0 4
44730: NOT
44731: IFFALSE 44741
// range := 10 ;
44733: LD_ADDR_VAR 0 4
44737: PUSH
44738: LD_INT 10
44740: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44741: LD_ADDR_VAR 0 8
44745: PUSH
44746: LD_INT 81
44748: PUSH
44749: LD_VAR 0 1
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 92
44760: PUSH
44761: LD_VAR 0 2
44765: PUSH
44766: LD_VAR 0 3
44770: PUSH
44771: LD_VAR 0 4
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 21
44787: PUSH
44788: LD_INT 3
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: PPUSH
44804: CALL_OW 69
44808: ST_TO_ADDR
// if not tmp then
44809: LD_VAR 0 8
44813: NOT
44814: IFFALSE 44818
// exit ;
44816: GO 46378
// for i in tmp do
44818: LD_ADDR_VAR 0 6
44822: PUSH
44823: LD_VAR 0 8
44827: PUSH
44828: FOR_IN
44829: IFFALSE 46353
// begin points := [ 0 , 0 , 0 ] ;
44831: LD_ADDR_VAR 0 9
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: ST_TO_ADDR
// bpoints := 1 ;
44850: LD_ADDR_VAR 0 10
44854: PUSH
44855: LD_INT 1
44857: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44858: LD_VAR 0 6
44862: PPUSH
44863: CALL_OW 247
44867: PUSH
44868: LD_INT 1
44870: DOUBLE
44871: EQUAL
44872: IFTRUE 44876
44874: GO 45454
44876: POP
// begin if GetClass ( i ) = 1 then
44877: LD_VAR 0 6
44881: PPUSH
44882: CALL_OW 257
44886: PUSH
44887: LD_INT 1
44889: EQUAL
44890: IFFALSE 44911
// points := [ 10 , 5 , 3 ] ;
44892: LD_ADDR_VAR 0 9
44896: PUSH
44897: LD_INT 10
44899: PUSH
44900: LD_INT 5
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44911: LD_VAR 0 6
44915: PPUSH
44916: CALL_OW 257
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: LD_INT 4
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: IN
44935: IFFALSE 44956
// points := [ 3 , 2 , 1 ] ;
44937: LD_ADDR_VAR 0 9
44941: PUSH
44942: LD_INT 3
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44956: LD_VAR 0 6
44960: PPUSH
44961: CALL_OW 257
44965: PUSH
44966: LD_INT 5
44968: EQUAL
44969: IFFALSE 44990
// points := [ 130 , 5 , 2 ] ;
44971: LD_ADDR_VAR 0 9
44975: PUSH
44976: LD_INT 130
44978: PUSH
44979: LD_INT 5
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: LIST
44989: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44990: LD_VAR 0 6
44994: PPUSH
44995: CALL_OW 257
44999: PUSH
45000: LD_INT 8
45002: EQUAL
45003: IFFALSE 45024
// points := [ 35 , 35 , 30 ] ;
45005: LD_ADDR_VAR 0 9
45009: PUSH
45010: LD_INT 35
45012: PUSH
45013: LD_INT 35
45015: PUSH
45016: LD_INT 30
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45024: LD_VAR 0 6
45028: PPUSH
45029: CALL_OW 257
45033: PUSH
45034: LD_INT 9
45036: EQUAL
45037: IFFALSE 45058
// points := [ 20 , 55 , 40 ] ;
45039: LD_ADDR_VAR 0 9
45043: PUSH
45044: LD_INT 20
45046: PUSH
45047: LD_INT 55
45049: PUSH
45050: LD_INT 40
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45058: LD_VAR 0 6
45062: PPUSH
45063: CALL_OW 257
45067: PUSH
45068: LD_INT 12
45070: PUSH
45071: LD_INT 16
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: IN
45078: IFFALSE 45099
// points := [ 5 , 3 , 2 ] ;
45080: LD_ADDR_VAR 0 9
45084: PUSH
45085: LD_INT 5
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45099: LD_VAR 0 6
45103: PPUSH
45104: CALL_OW 257
45108: PUSH
45109: LD_INT 17
45111: EQUAL
45112: IFFALSE 45133
// points := [ 100 , 50 , 75 ] ;
45114: LD_ADDR_VAR 0 9
45118: PUSH
45119: LD_INT 100
45121: PUSH
45122: LD_INT 50
45124: PUSH
45125: LD_INT 75
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45133: LD_VAR 0 6
45137: PPUSH
45138: CALL_OW 257
45142: PUSH
45143: LD_INT 15
45145: EQUAL
45146: IFFALSE 45167
// points := [ 10 , 5 , 3 ] ;
45148: LD_ADDR_VAR 0 9
45152: PUSH
45153: LD_INT 10
45155: PUSH
45156: LD_INT 5
45158: PUSH
45159: LD_INT 3
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: LIST
45166: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45167: LD_VAR 0 6
45171: PPUSH
45172: CALL_OW 257
45176: PUSH
45177: LD_INT 14
45179: EQUAL
45180: IFFALSE 45201
// points := [ 10 , 0 , 0 ] ;
45182: LD_ADDR_VAR 0 9
45186: PUSH
45187: LD_INT 10
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: LIST
45200: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45201: LD_VAR 0 6
45205: PPUSH
45206: CALL_OW 257
45210: PUSH
45211: LD_INT 11
45213: EQUAL
45214: IFFALSE 45235
// points := [ 30 , 10 , 5 ] ;
45216: LD_ADDR_VAR 0 9
45220: PUSH
45221: LD_INT 30
45223: PUSH
45224: LD_INT 10
45226: PUSH
45227: LD_INT 5
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45235: LD_VAR 0 1
45239: PPUSH
45240: LD_INT 5
45242: PPUSH
45243: CALL_OW 321
45247: PUSH
45248: LD_INT 2
45250: EQUAL
45251: IFFALSE 45268
// bpoints := bpoints * 1.8 ;
45253: LD_ADDR_VAR 0 10
45257: PUSH
45258: LD_VAR 0 10
45262: PUSH
45263: LD_REAL  1.80000000000000E+0000
45266: MUL
45267: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45268: LD_VAR 0 6
45272: PPUSH
45273: CALL_OW 257
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: LD_INT 4
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: IN
45296: PUSH
45297: LD_VAR 0 1
45301: PPUSH
45302: LD_INT 51
45304: PPUSH
45305: CALL_OW 321
45309: PUSH
45310: LD_INT 2
45312: EQUAL
45313: AND
45314: IFFALSE 45331
// bpoints := bpoints * 1.2 ;
45316: LD_ADDR_VAR 0 10
45320: PUSH
45321: LD_VAR 0 10
45325: PUSH
45326: LD_REAL  1.20000000000000E+0000
45329: MUL
45330: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45331: LD_VAR 0 6
45335: PPUSH
45336: CALL_OW 257
45340: PUSH
45341: LD_INT 5
45343: PUSH
45344: LD_INT 7
45346: PUSH
45347: LD_INT 9
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: IN
45355: PUSH
45356: LD_VAR 0 1
45360: PPUSH
45361: LD_INT 52
45363: PPUSH
45364: CALL_OW 321
45368: PUSH
45369: LD_INT 2
45371: EQUAL
45372: AND
45373: IFFALSE 45390
// bpoints := bpoints * 1.5 ;
45375: LD_ADDR_VAR 0 10
45379: PUSH
45380: LD_VAR 0 10
45384: PUSH
45385: LD_REAL  1.50000000000000E+0000
45388: MUL
45389: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45390: LD_VAR 0 1
45394: PPUSH
45395: LD_INT 66
45397: PPUSH
45398: CALL_OW 321
45402: PUSH
45403: LD_INT 2
45405: EQUAL
45406: IFFALSE 45423
// bpoints := bpoints * 1.1 ;
45408: LD_ADDR_VAR 0 10
45412: PUSH
45413: LD_VAR 0 10
45417: PUSH
45418: LD_REAL  1.10000000000000E+0000
45421: MUL
45422: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45423: LD_ADDR_VAR 0 10
45427: PUSH
45428: LD_VAR 0 10
45432: PUSH
45433: LD_VAR 0 6
45437: PPUSH
45438: LD_INT 1
45440: PPUSH
45441: CALL_OW 259
45445: PUSH
45446: LD_REAL  1.15000000000000E+0000
45449: MUL
45450: MUL
45451: ST_TO_ADDR
// end ; unit_vehicle :
45452: GO 46282
45454: LD_INT 2
45456: DOUBLE
45457: EQUAL
45458: IFTRUE 45462
45460: GO 46270
45462: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45463: LD_VAR 0 6
45467: PPUSH
45468: CALL_OW 264
45472: PUSH
45473: LD_INT 2
45475: PUSH
45476: LD_INT 42
45478: PUSH
45479: LD_INT 24
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: IN
45487: IFFALSE 45508
// points := [ 25 , 5 , 3 ] ;
45489: LD_ADDR_VAR 0 9
45493: PUSH
45494: LD_INT 25
45496: PUSH
45497: LD_INT 5
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45508: LD_VAR 0 6
45512: PPUSH
45513: CALL_OW 264
45517: PUSH
45518: LD_INT 4
45520: PUSH
45521: LD_INT 43
45523: PUSH
45524: LD_INT 25
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: LIST
45531: IN
45532: IFFALSE 45553
// points := [ 40 , 15 , 5 ] ;
45534: LD_ADDR_VAR 0 9
45538: PUSH
45539: LD_INT 40
45541: PUSH
45542: LD_INT 15
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: LIST
45552: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45553: LD_VAR 0 6
45557: PPUSH
45558: CALL_OW 264
45562: PUSH
45563: LD_INT 3
45565: PUSH
45566: LD_INT 23
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: IN
45573: IFFALSE 45594
// points := [ 7 , 25 , 8 ] ;
45575: LD_ADDR_VAR 0 9
45579: PUSH
45580: LD_INT 7
45582: PUSH
45583: LD_INT 25
45585: PUSH
45586: LD_INT 8
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45594: LD_VAR 0 6
45598: PPUSH
45599: CALL_OW 264
45603: PUSH
45604: LD_INT 5
45606: PUSH
45607: LD_INT 27
45609: PUSH
45610: LD_INT 44
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: LIST
45617: IN
45618: IFFALSE 45639
// points := [ 14 , 50 , 16 ] ;
45620: LD_ADDR_VAR 0 9
45624: PUSH
45625: LD_INT 14
45627: PUSH
45628: LD_INT 50
45630: PUSH
45631: LD_INT 16
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: LIST
45638: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45639: LD_VAR 0 6
45643: PPUSH
45644: CALL_OW 264
45648: PUSH
45649: LD_INT 6
45651: PUSH
45652: LD_INT 46
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: IN
45659: IFFALSE 45680
// points := [ 32 , 120 , 70 ] ;
45661: LD_ADDR_VAR 0 9
45665: PUSH
45666: LD_INT 32
45668: PUSH
45669: LD_INT 120
45671: PUSH
45672: LD_INT 70
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45680: LD_VAR 0 6
45684: PPUSH
45685: CALL_OW 264
45689: PUSH
45690: LD_INT 7
45692: PUSH
45693: LD_INT 28
45695: PUSH
45696: LD_INT 45
45698: PUSH
45699: LD_EXP 165
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: IN
45710: IFFALSE 45731
// points := [ 35 , 20 , 45 ] ;
45712: LD_ADDR_VAR 0 9
45716: PUSH
45717: LD_INT 35
45719: PUSH
45720: LD_INT 20
45722: PUSH
45723: LD_INT 45
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45731: LD_VAR 0 6
45735: PPUSH
45736: CALL_OW 264
45740: PUSH
45741: LD_INT 47
45743: PUSH
45744: EMPTY
45745: LIST
45746: IN
45747: IFFALSE 45768
// points := [ 67 , 45 , 75 ] ;
45749: LD_ADDR_VAR 0 9
45753: PUSH
45754: LD_INT 67
45756: PUSH
45757: LD_INT 45
45759: PUSH
45760: LD_INT 75
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: LIST
45767: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45768: LD_VAR 0 6
45772: PPUSH
45773: CALL_OW 264
45777: PUSH
45778: LD_INT 26
45780: PUSH
45781: EMPTY
45782: LIST
45783: IN
45784: IFFALSE 45805
// points := [ 120 , 30 , 80 ] ;
45786: LD_ADDR_VAR 0 9
45790: PUSH
45791: LD_INT 120
45793: PUSH
45794: LD_INT 30
45796: PUSH
45797: LD_INT 80
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: LIST
45804: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45805: LD_VAR 0 6
45809: PPUSH
45810: CALL_OW 264
45814: PUSH
45815: LD_INT 22
45817: PUSH
45818: EMPTY
45819: LIST
45820: IN
45821: IFFALSE 45842
// points := [ 40 , 1 , 1 ] ;
45823: LD_ADDR_VAR 0 9
45827: PUSH
45828: LD_INT 40
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: LD_INT 1
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: LIST
45841: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45842: LD_VAR 0 6
45846: PPUSH
45847: CALL_OW 264
45851: PUSH
45852: LD_INT 29
45854: PUSH
45855: EMPTY
45856: LIST
45857: IN
45858: IFFALSE 45879
// points := [ 70 , 200 , 400 ] ;
45860: LD_ADDR_VAR 0 9
45864: PUSH
45865: LD_INT 70
45867: PUSH
45868: LD_INT 200
45870: PUSH
45871: LD_INT 400
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45879: LD_VAR 0 6
45883: PPUSH
45884: CALL_OW 264
45888: PUSH
45889: LD_INT 14
45891: PUSH
45892: LD_INT 53
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: IN
45899: IFFALSE 45920
// points := [ 40 , 10 , 20 ] ;
45901: LD_ADDR_VAR 0 9
45905: PUSH
45906: LD_INT 40
45908: PUSH
45909: LD_INT 10
45911: PUSH
45912: LD_INT 20
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: LIST
45919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45920: LD_VAR 0 6
45924: PPUSH
45925: CALL_OW 264
45929: PUSH
45930: LD_INT 9
45932: PUSH
45933: EMPTY
45934: LIST
45935: IN
45936: IFFALSE 45957
// points := [ 5 , 70 , 20 ] ;
45938: LD_ADDR_VAR 0 9
45942: PUSH
45943: LD_INT 5
45945: PUSH
45946: LD_INT 70
45948: PUSH
45949: LD_INT 20
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45957: LD_VAR 0 6
45961: PPUSH
45962: CALL_OW 264
45966: PUSH
45967: LD_INT 10
45969: PUSH
45970: EMPTY
45971: LIST
45972: IN
45973: IFFALSE 45994
// points := [ 35 , 110 , 70 ] ;
45975: LD_ADDR_VAR 0 9
45979: PUSH
45980: LD_INT 35
45982: PUSH
45983: LD_INT 110
45985: PUSH
45986: LD_INT 70
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: LIST
45993: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45994: LD_VAR 0 6
45998: PPUSH
45999: CALL_OW 265
46003: PUSH
46004: LD_INT 25
46006: EQUAL
46007: IFFALSE 46028
// points := [ 80 , 65 , 100 ] ;
46009: LD_ADDR_VAR 0 9
46013: PUSH
46014: LD_INT 80
46016: PUSH
46017: LD_INT 65
46019: PUSH
46020: LD_INT 100
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46028: LD_VAR 0 6
46032: PPUSH
46033: CALL_OW 263
46037: PUSH
46038: LD_INT 1
46040: EQUAL
46041: IFFALSE 46076
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46043: LD_ADDR_VAR 0 10
46047: PUSH
46048: LD_VAR 0 10
46052: PUSH
46053: LD_VAR 0 6
46057: PPUSH
46058: CALL_OW 311
46062: PPUSH
46063: LD_INT 3
46065: PPUSH
46066: CALL_OW 259
46070: PUSH
46071: LD_INT 4
46073: MUL
46074: MUL
46075: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL_OW 263
46085: PUSH
46086: LD_INT 2
46088: EQUAL
46089: IFFALSE 46140
// begin j := IsControledBy ( i ) ;
46091: LD_ADDR_VAR 0 7
46095: PUSH
46096: LD_VAR 0 6
46100: PPUSH
46101: CALL_OW 312
46105: ST_TO_ADDR
// if j then
46106: LD_VAR 0 7
46110: IFFALSE 46140
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46112: LD_ADDR_VAR 0 10
46116: PUSH
46117: LD_VAR 0 10
46121: PUSH
46122: LD_VAR 0 7
46126: PPUSH
46127: LD_INT 3
46129: PPUSH
46130: CALL_OW 259
46134: PUSH
46135: LD_INT 3
46137: MUL
46138: MUL
46139: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46140: LD_VAR 0 6
46144: PPUSH
46145: CALL_OW 264
46149: PUSH
46150: LD_INT 5
46152: PUSH
46153: LD_INT 6
46155: PUSH
46156: LD_INT 46
46158: PUSH
46159: LD_INT 44
46161: PUSH
46162: LD_INT 47
46164: PUSH
46165: LD_INT 45
46167: PUSH
46168: LD_INT 28
46170: PUSH
46171: LD_INT 7
46173: PUSH
46174: LD_INT 27
46176: PUSH
46177: LD_INT 29
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: IN
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: LD_INT 52
46200: PPUSH
46201: CALL_OW 321
46205: PUSH
46206: LD_INT 2
46208: EQUAL
46209: AND
46210: IFFALSE 46227
// bpoints := bpoints * 1.2 ;
46212: LD_ADDR_VAR 0 10
46216: PUSH
46217: LD_VAR 0 10
46221: PUSH
46222: LD_REAL  1.20000000000000E+0000
46225: MUL
46226: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46227: LD_VAR 0 6
46231: PPUSH
46232: CALL_OW 264
46236: PUSH
46237: LD_INT 6
46239: PUSH
46240: LD_INT 46
46242: PUSH
46243: LD_INT 47
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: LIST
46250: IN
46251: IFFALSE 46268
// bpoints := bpoints * 1.2 ;
46253: LD_ADDR_VAR 0 10
46257: PUSH
46258: LD_VAR 0 10
46262: PUSH
46263: LD_REAL  1.20000000000000E+0000
46266: MUL
46267: ST_TO_ADDR
// end ; unit_building :
46268: GO 46282
46270: LD_INT 3
46272: DOUBLE
46273: EQUAL
46274: IFTRUE 46278
46276: GO 46281
46278: POP
// ; end ;
46279: GO 46282
46281: POP
// for j = 1 to 3 do
46282: LD_ADDR_VAR 0 7
46286: PUSH
46287: DOUBLE
46288: LD_INT 1
46290: DEC
46291: ST_TO_ADDR
46292: LD_INT 3
46294: PUSH
46295: FOR_TO
46296: IFFALSE 46349
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46298: LD_ADDR_VAR 0 5
46302: PUSH
46303: LD_VAR 0 5
46307: PPUSH
46308: LD_VAR 0 7
46312: PPUSH
46313: LD_VAR 0 5
46317: PUSH
46318: LD_VAR 0 7
46322: ARRAY
46323: PUSH
46324: LD_VAR 0 9
46328: PUSH
46329: LD_VAR 0 7
46333: ARRAY
46334: PUSH
46335: LD_VAR 0 10
46339: MUL
46340: PLUS
46341: PPUSH
46342: CALL_OW 1
46346: ST_TO_ADDR
46347: GO 46295
46349: POP
46350: POP
// end ;
46351: GO 44828
46353: POP
46354: POP
// result := Replace ( result , 4 , tmp ) ;
46355: LD_ADDR_VAR 0 5
46359: PUSH
46360: LD_VAR 0 5
46364: PPUSH
46365: LD_INT 4
46367: PPUSH
46368: LD_VAR 0 8
46372: PPUSH
46373: CALL_OW 1
46377: ST_TO_ADDR
// end ;
46378: LD_VAR 0 5
46382: RET
// export function DangerAtRange ( unit , range ) ; begin
46383: LD_INT 0
46385: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46386: LD_ADDR_VAR 0 3
46390: PUSH
46391: LD_VAR 0 1
46395: PPUSH
46396: CALL_OW 255
46400: PPUSH
46401: LD_VAR 0 1
46405: PPUSH
46406: CALL_OW 250
46410: PPUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: CALL_OW 251
46420: PPUSH
46421: LD_VAR 0 2
46425: PPUSH
46426: CALL 44680 0 4
46430: ST_TO_ADDR
// end ;
46431: LD_VAR 0 3
46435: RET
// export function DangerInArea ( side , area ) ; begin
46436: LD_INT 0
46438: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46439: LD_ADDR_VAR 0 3
46443: PUSH
46444: LD_VAR 0 2
46448: PPUSH
46449: LD_INT 81
46451: PUSH
46452: LD_VAR 0 1
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PPUSH
46461: CALL_OW 70
46465: ST_TO_ADDR
// end ;
46466: LD_VAR 0 3
46470: RET
// export function IsExtension ( b ) ; begin
46471: LD_INT 0
46473: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46474: LD_ADDR_VAR 0 2
46478: PUSH
46479: LD_VAR 0 1
46483: PUSH
46484: LD_INT 23
46486: PUSH
46487: LD_INT 20
46489: PUSH
46490: LD_INT 22
46492: PUSH
46493: LD_INT 17
46495: PUSH
46496: LD_INT 24
46498: PUSH
46499: LD_INT 21
46501: PUSH
46502: LD_INT 19
46504: PUSH
46505: LD_INT 16
46507: PUSH
46508: LD_INT 25
46510: PUSH
46511: LD_INT 18
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: IN
46526: ST_TO_ADDR
// end ;
46527: LD_VAR 0 2
46531: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46532: LD_INT 0
46534: PPUSH
46535: PPUSH
46536: PPUSH
// result := [ ] ;
46537: LD_ADDR_VAR 0 4
46541: PUSH
46542: EMPTY
46543: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46544: LD_ADDR_VAR 0 5
46548: PUSH
46549: LD_VAR 0 2
46553: PPUSH
46554: LD_INT 21
46556: PUSH
46557: LD_INT 3
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PPUSH
46564: CALL_OW 70
46568: ST_TO_ADDR
// if not tmp then
46569: LD_VAR 0 5
46573: NOT
46574: IFFALSE 46578
// exit ;
46576: GO 46642
// if checkLink then
46578: LD_VAR 0 3
46582: IFFALSE 46632
// begin for i in tmp do
46584: LD_ADDR_VAR 0 6
46588: PUSH
46589: LD_VAR 0 5
46593: PUSH
46594: FOR_IN
46595: IFFALSE 46630
// if GetBase ( i ) <> base then
46597: LD_VAR 0 6
46601: PPUSH
46602: CALL_OW 274
46606: PUSH
46607: LD_VAR 0 1
46611: NONEQUAL
46612: IFFALSE 46628
// ComLinkToBase ( base , i ) ;
46614: LD_VAR 0 1
46618: PPUSH
46619: LD_VAR 0 6
46623: PPUSH
46624: CALL_OW 169
46628: GO 46594
46630: POP
46631: POP
// end ; result := tmp ;
46632: LD_ADDR_VAR 0 4
46636: PUSH
46637: LD_VAR 0 5
46641: ST_TO_ADDR
// end ;
46642: LD_VAR 0 4
46646: RET
// export function ComComplete ( units , b ) ; var i ; begin
46647: LD_INT 0
46649: PPUSH
46650: PPUSH
// if not units then
46651: LD_VAR 0 1
46655: NOT
46656: IFFALSE 46660
// exit ;
46658: GO 46750
// for i in units do
46660: LD_ADDR_VAR 0 4
46664: PUSH
46665: LD_VAR 0 1
46669: PUSH
46670: FOR_IN
46671: IFFALSE 46748
// if BuildingStatus ( b ) = bs_build then
46673: LD_VAR 0 2
46677: PPUSH
46678: CALL_OW 461
46682: PUSH
46683: LD_INT 1
46685: EQUAL
46686: IFFALSE 46746
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46688: LD_VAR 0 4
46692: PPUSH
46693: LD_STRING h
46695: PUSH
46696: LD_VAR 0 2
46700: PPUSH
46701: CALL_OW 250
46705: PUSH
46706: LD_VAR 0 2
46710: PPUSH
46711: CALL_OW 251
46715: PUSH
46716: LD_VAR 0 2
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: LIST
46736: LIST
46737: LIST
46738: PUSH
46739: EMPTY
46740: LIST
46741: PPUSH
46742: CALL_OW 446
46746: GO 46670
46748: POP
46749: POP
// end ;
46750: LD_VAR 0 3
46754: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46755: LD_INT 0
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
46762: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46763: LD_VAR 0 1
46767: NOT
46768: PUSH
46769: LD_VAR 0 1
46773: PPUSH
46774: CALL_OW 263
46778: PUSH
46779: LD_INT 2
46781: NONEQUAL
46782: OR
46783: IFFALSE 46787
// exit ;
46785: GO 47103
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46787: LD_ADDR_VAR 0 6
46791: PUSH
46792: LD_INT 22
46794: PUSH
46795: LD_VAR 0 1
46799: PPUSH
46800: CALL_OW 255
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 30
46814: PUSH
46815: LD_INT 36
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 34
46824: PUSH
46825: LD_INT 31
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: PUSH
46837: EMPTY
46838: LIST
46839: LIST
46840: PPUSH
46841: CALL_OW 69
46845: ST_TO_ADDR
// if not tmp then
46846: LD_VAR 0 6
46850: NOT
46851: IFFALSE 46855
// exit ;
46853: GO 47103
// result := [ ] ;
46855: LD_ADDR_VAR 0 2
46859: PUSH
46860: EMPTY
46861: ST_TO_ADDR
// for i in tmp do
46862: LD_ADDR_VAR 0 3
46866: PUSH
46867: LD_VAR 0 6
46871: PUSH
46872: FOR_IN
46873: IFFALSE 46944
// begin t := UnitsInside ( i ) ;
46875: LD_ADDR_VAR 0 4
46879: PUSH
46880: LD_VAR 0 3
46884: PPUSH
46885: CALL_OW 313
46889: ST_TO_ADDR
// if t then
46890: LD_VAR 0 4
46894: IFFALSE 46942
// for j in t do
46896: LD_ADDR_VAR 0 7
46900: PUSH
46901: LD_VAR 0 4
46905: PUSH
46906: FOR_IN
46907: IFFALSE 46940
// result := Replace ( result , result + 1 , j ) ;
46909: LD_ADDR_VAR 0 2
46913: PUSH
46914: LD_VAR 0 2
46918: PPUSH
46919: LD_VAR 0 2
46923: PUSH
46924: LD_INT 1
46926: PLUS
46927: PPUSH
46928: LD_VAR 0 7
46932: PPUSH
46933: CALL_OW 1
46937: ST_TO_ADDR
46938: GO 46906
46940: POP
46941: POP
// end ;
46942: GO 46872
46944: POP
46945: POP
// if not result then
46946: LD_VAR 0 2
46950: NOT
46951: IFFALSE 46955
// exit ;
46953: GO 47103
// mech := result [ 1 ] ;
46955: LD_ADDR_VAR 0 5
46959: PUSH
46960: LD_VAR 0 2
46964: PUSH
46965: LD_INT 1
46967: ARRAY
46968: ST_TO_ADDR
// if result > 1 then
46969: LD_VAR 0 2
46973: PUSH
46974: LD_INT 1
46976: GREATER
46977: IFFALSE 47089
// begin for i = 2 to result do
46979: LD_ADDR_VAR 0 3
46983: PUSH
46984: DOUBLE
46985: LD_INT 2
46987: DEC
46988: ST_TO_ADDR
46989: LD_VAR 0 2
46993: PUSH
46994: FOR_TO
46995: IFFALSE 47087
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46997: LD_ADDR_VAR 0 4
47001: PUSH
47002: LD_VAR 0 2
47006: PUSH
47007: LD_VAR 0 3
47011: ARRAY
47012: PPUSH
47013: LD_INT 3
47015: PPUSH
47016: CALL_OW 259
47020: PUSH
47021: LD_VAR 0 2
47025: PUSH
47026: LD_VAR 0 3
47030: ARRAY
47031: PPUSH
47032: CALL_OW 432
47036: MINUS
47037: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47038: LD_VAR 0 4
47042: PUSH
47043: LD_VAR 0 5
47047: PPUSH
47048: LD_INT 3
47050: PPUSH
47051: CALL_OW 259
47055: PUSH
47056: LD_VAR 0 5
47060: PPUSH
47061: CALL_OW 432
47065: MINUS
47066: GREATEREQUAL
47067: IFFALSE 47085
// mech := result [ i ] ;
47069: LD_ADDR_VAR 0 5
47073: PUSH
47074: LD_VAR 0 2
47078: PUSH
47079: LD_VAR 0 3
47083: ARRAY
47084: ST_TO_ADDR
// end ;
47085: GO 46994
47087: POP
47088: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47089: LD_VAR 0 1
47093: PPUSH
47094: LD_VAR 0 5
47098: PPUSH
47099: CALL_OW 135
// end ;
47103: LD_VAR 0 2
47107: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47108: LD_INT 0
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
47117: PPUSH
47118: PPUSH
47119: PPUSH
47120: PPUSH
47121: PPUSH
47122: PPUSH
// result := [ ] ;
47123: LD_ADDR_VAR 0 7
47127: PUSH
47128: EMPTY
47129: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47130: LD_VAR 0 1
47134: PPUSH
47135: CALL_OW 266
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: IN
47150: NOT
47151: IFFALSE 47155
// exit ;
47153: GO 48789
// if name then
47155: LD_VAR 0 3
47159: IFFALSE 47175
// SetBName ( base_dep , name ) ;
47161: LD_VAR 0 1
47165: PPUSH
47166: LD_VAR 0 3
47170: PPUSH
47171: CALL_OW 500
// base := GetBase ( base_dep ) ;
47175: LD_ADDR_VAR 0 15
47179: PUSH
47180: LD_VAR 0 1
47184: PPUSH
47185: CALL_OW 274
47189: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47190: LD_ADDR_VAR 0 16
47194: PUSH
47195: LD_VAR 0 1
47199: PPUSH
47200: CALL_OW 255
47204: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47205: LD_ADDR_VAR 0 17
47209: PUSH
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 248
47219: ST_TO_ADDR
// if sources then
47220: LD_VAR 0 5
47224: IFFALSE 47271
// for i = 1 to 3 do
47226: LD_ADDR_VAR 0 8
47230: PUSH
47231: DOUBLE
47232: LD_INT 1
47234: DEC
47235: ST_TO_ADDR
47236: LD_INT 3
47238: PUSH
47239: FOR_TO
47240: IFFALSE 47269
// AddResourceType ( base , i , sources [ i ] ) ;
47242: LD_VAR 0 15
47246: PPUSH
47247: LD_VAR 0 8
47251: PPUSH
47252: LD_VAR 0 5
47256: PUSH
47257: LD_VAR 0 8
47261: ARRAY
47262: PPUSH
47263: CALL_OW 276
47267: GO 47239
47269: POP
47270: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47271: LD_ADDR_VAR 0 18
47275: PUSH
47276: LD_VAR 0 15
47280: PPUSH
47281: LD_VAR 0 2
47285: PPUSH
47286: LD_INT 1
47288: PPUSH
47289: CALL 46532 0 3
47293: ST_TO_ADDR
// InitHc ;
47294: CALL_OW 19
// InitUc ;
47298: CALL_OW 18
// uc_side := side ;
47302: LD_ADDR_OWVAR 20
47306: PUSH
47307: LD_VAR 0 16
47311: ST_TO_ADDR
// uc_nation := nation ;
47312: LD_ADDR_OWVAR 21
47316: PUSH
47317: LD_VAR 0 17
47321: ST_TO_ADDR
// if buildings then
47322: LD_VAR 0 18
47326: IFFALSE 48648
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47328: LD_ADDR_VAR 0 19
47332: PUSH
47333: LD_VAR 0 18
47337: PPUSH
47338: LD_INT 2
47340: PUSH
47341: LD_INT 30
47343: PUSH
47344: LD_INT 29
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 30
47353: PUSH
47354: LD_INT 30
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: LIST
47365: PPUSH
47366: CALL_OW 72
47370: ST_TO_ADDR
// if tmp then
47371: LD_VAR 0 19
47375: IFFALSE 47423
// for i in tmp do
47377: LD_ADDR_VAR 0 8
47381: PUSH
47382: LD_VAR 0 19
47386: PUSH
47387: FOR_IN
47388: IFFALSE 47421
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47390: LD_VAR 0 8
47394: PPUSH
47395: CALL_OW 250
47399: PPUSH
47400: LD_VAR 0 8
47404: PPUSH
47405: CALL_OW 251
47409: PPUSH
47410: LD_VAR 0 16
47414: PPUSH
47415: CALL_OW 441
47419: GO 47387
47421: POP
47422: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47423: LD_VAR 0 18
47427: PPUSH
47428: LD_INT 2
47430: PUSH
47431: LD_INT 30
47433: PUSH
47434: LD_INT 32
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 30
47443: PUSH
47444: LD_INT 33
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: LIST
47455: PPUSH
47456: CALL_OW 72
47460: IFFALSE 47548
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47462: LD_ADDR_VAR 0 8
47466: PUSH
47467: LD_VAR 0 18
47471: PPUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 30
47477: PUSH
47478: LD_INT 32
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 30
47487: PUSH
47488: LD_INT 33
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: PPUSH
47500: CALL_OW 72
47504: PUSH
47505: FOR_IN
47506: IFFALSE 47546
// begin if not GetBWeapon ( i ) then
47508: LD_VAR 0 8
47512: PPUSH
47513: CALL_OW 269
47517: NOT
47518: IFFALSE 47544
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47520: LD_VAR 0 8
47524: PPUSH
47525: LD_VAR 0 8
47529: PPUSH
47530: LD_VAR 0 2
47534: PPUSH
47535: CALL 48794 0 2
47539: PPUSH
47540: CALL_OW 431
// end ;
47544: GO 47505
47546: POP
47547: POP
// end ; for i = 1 to personel do
47548: LD_ADDR_VAR 0 8
47552: PUSH
47553: DOUBLE
47554: LD_INT 1
47556: DEC
47557: ST_TO_ADDR
47558: LD_VAR 0 6
47562: PUSH
47563: FOR_TO
47564: IFFALSE 48628
// begin if i > 4 then
47566: LD_VAR 0 8
47570: PUSH
47571: LD_INT 4
47573: GREATER
47574: IFFALSE 47578
// break ;
47576: GO 48628
// case i of 1 :
47578: LD_VAR 0 8
47582: PUSH
47583: LD_INT 1
47585: DOUBLE
47586: EQUAL
47587: IFTRUE 47591
47589: GO 47671
47591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47592: LD_ADDR_VAR 0 12
47596: PUSH
47597: LD_VAR 0 18
47601: PPUSH
47602: LD_INT 22
47604: PUSH
47605: LD_VAR 0 16
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 58
47616: PUSH
47617: EMPTY
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: PUSH
47623: LD_INT 30
47625: PUSH
47626: LD_INT 32
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 30
47635: PUSH
47636: LD_INT 4
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 30
47645: PUSH
47646: LD_INT 5
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: LIST
47657: LIST
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: LIST
47663: PPUSH
47664: CALL_OW 72
47668: ST_TO_ADDR
47669: GO 47893
47671: LD_INT 2
47673: DOUBLE
47674: EQUAL
47675: IFTRUE 47679
47677: GO 47741
47679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47680: LD_ADDR_VAR 0 12
47684: PUSH
47685: LD_VAR 0 18
47689: PPUSH
47690: LD_INT 22
47692: PUSH
47693: LD_VAR 0 16
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: PUSH
47705: LD_INT 30
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 30
47717: PUSH
47718: LD_INT 1
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PPUSH
47734: CALL_OW 72
47738: ST_TO_ADDR
47739: GO 47893
47741: LD_INT 3
47743: DOUBLE
47744: EQUAL
47745: IFTRUE 47749
47747: GO 47811
47749: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47750: LD_ADDR_VAR 0 12
47754: PUSH
47755: LD_VAR 0 18
47759: PPUSH
47760: LD_INT 22
47762: PUSH
47763: LD_VAR 0 16
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 2
47774: PUSH
47775: LD_INT 30
47777: PUSH
47778: LD_INT 2
47780: PUSH
47781: EMPTY
47782: LIST
47783: LIST
47784: PUSH
47785: LD_INT 30
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: LIST
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PPUSH
47804: CALL_OW 72
47808: ST_TO_ADDR
47809: GO 47893
47811: LD_INT 4
47813: DOUBLE
47814: EQUAL
47815: IFTRUE 47819
47817: GO 47892
47819: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47820: LD_ADDR_VAR 0 12
47824: PUSH
47825: LD_VAR 0 18
47829: PPUSH
47830: LD_INT 22
47832: PUSH
47833: LD_VAR 0 16
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 2
47844: PUSH
47845: LD_INT 30
47847: PUSH
47848: LD_INT 6
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 30
47857: PUSH
47858: LD_INT 7
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 30
47867: PUSH
47868: LD_INT 8
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PPUSH
47885: CALL_OW 72
47889: ST_TO_ADDR
47890: GO 47893
47892: POP
// if i = 1 then
47893: LD_VAR 0 8
47897: PUSH
47898: LD_INT 1
47900: EQUAL
47901: IFFALSE 48012
// begin tmp := [ ] ;
47903: LD_ADDR_VAR 0 19
47907: PUSH
47908: EMPTY
47909: ST_TO_ADDR
// for j in f do
47910: LD_ADDR_VAR 0 9
47914: PUSH
47915: LD_VAR 0 12
47919: PUSH
47920: FOR_IN
47921: IFFALSE 47994
// if GetBType ( j ) = b_bunker then
47923: LD_VAR 0 9
47927: PPUSH
47928: CALL_OW 266
47932: PUSH
47933: LD_INT 32
47935: EQUAL
47936: IFFALSE 47963
// tmp := Insert ( tmp , 1 , j ) else
47938: LD_ADDR_VAR 0 19
47942: PUSH
47943: LD_VAR 0 19
47947: PPUSH
47948: LD_INT 1
47950: PPUSH
47951: LD_VAR 0 9
47955: PPUSH
47956: CALL_OW 2
47960: ST_TO_ADDR
47961: GO 47992
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47963: LD_ADDR_VAR 0 19
47967: PUSH
47968: LD_VAR 0 19
47972: PPUSH
47973: LD_VAR 0 19
47977: PUSH
47978: LD_INT 1
47980: PLUS
47981: PPUSH
47982: LD_VAR 0 9
47986: PPUSH
47987: CALL_OW 2
47991: ST_TO_ADDR
47992: GO 47920
47994: POP
47995: POP
// if tmp then
47996: LD_VAR 0 19
48000: IFFALSE 48012
// f := tmp ;
48002: LD_ADDR_VAR 0 12
48006: PUSH
48007: LD_VAR 0 19
48011: ST_TO_ADDR
// end ; x := personel [ i ] ;
48012: LD_ADDR_VAR 0 13
48016: PUSH
48017: LD_VAR 0 6
48021: PUSH
48022: LD_VAR 0 8
48026: ARRAY
48027: ST_TO_ADDR
// if x = - 1 then
48028: LD_VAR 0 13
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: EQUAL
48037: IFFALSE 48246
// begin for j in f do
48039: LD_ADDR_VAR 0 9
48043: PUSH
48044: LD_VAR 0 12
48048: PUSH
48049: FOR_IN
48050: IFFALSE 48242
// repeat InitHc ;
48052: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48056: LD_VAR 0 9
48060: PPUSH
48061: CALL_OW 266
48065: PUSH
48066: LD_INT 5
48068: EQUAL
48069: IFFALSE 48139
// begin if UnitsInside ( j ) < 3 then
48071: LD_VAR 0 9
48075: PPUSH
48076: CALL_OW 313
48080: PUSH
48081: LD_INT 3
48083: LESS
48084: IFFALSE 48120
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48086: LD_INT 0
48088: PPUSH
48089: LD_INT 5
48091: PUSH
48092: LD_INT 8
48094: PUSH
48095: LD_INT 9
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: LIST
48102: PUSH
48103: LD_VAR 0 17
48107: ARRAY
48108: PPUSH
48109: LD_VAR 0 4
48113: PPUSH
48114: CALL_OW 380
48118: GO 48137
// PrepareHuman ( false , i , skill ) ;
48120: LD_INT 0
48122: PPUSH
48123: LD_VAR 0 8
48127: PPUSH
48128: LD_VAR 0 4
48132: PPUSH
48133: CALL_OW 380
// end else
48137: GO 48156
// PrepareHuman ( false , i , skill ) ;
48139: LD_INT 0
48141: PPUSH
48142: LD_VAR 0 8
48146: PPUSH
48147: LD_VAR 0 4
48151: PPUSH
48152: CALL_OW 380
// un := CreateHuman ;
48156: LD_ADDR_VAR 0 14
48160: PUSH
48161: CALL_OW 44
48165: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48166: LD_ADDR_VAR 0 7
48170: PUSH
48171: LD_VAR 0 7
48175: PPUSH
48176: LD_INT 1
48178: PPUSH
48179: LD_VAR 0 14
48183: PPUSH
48184: CALL_OW 2
48188: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48189: LD_VAR 0 14
48193: PPUSH
48194: LD_VAR 0 9
48198: PPUSH
48199: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48203: LD_VAR 0 9
48207: PPUSH
48208: CALL_OW 313
48212: PUSH
48213: LD_INT 6
48215: EQUAL
48216: PUSH
48217: LD_VAR 0 9
48221: PPUSH
48222: CALL_OW 266
48226: PUSH
48227: LD_INT 32
48229: PUSH
48230: LD_INT 31
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: IN
48237: OR
48238: IFFALSE 48052
48240: GO 48049
48242: POP
48243: POP
// end else
48244: GO 48626
// for j = 1 to x do
48246: LD_ADDR_VAR 0 9
48250: PUSH
48251: DOUBLE
48252: LD_INT 1
48254: DEC
48255: ST_TO_ADDR
48256: LD_VAR 0 13
48260: PUSH
48261: FOR_TO
48262: IFFALSE 48624
// begin InitHc ;
48264: CALL_OW 19
// if not f then
48268: LD_VAR 0 12
48272: NOT
48273: IFFALSE 48362
// begin PrepareHuman ( false , i , skill ) ;
48275: LD_INT 0
48277: PPUSH
48278: LD_VAR 0 8
48282: PPUSH
48283: LD_VAR 0 4
48287: PPUSH
48288: CALL_OW 380
// un := CreateHuman ;
48292: LD_ADDR_VAR 0 14
48296: PUSH
48297: CALL_OW 44
48301: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48302: LD_ADDR_VAR 0 7
48306: PUSH
48307: LD_VAR 0 7
48311: PPUSH
48312: LD_INT 1
48314: PPUSH
48315: LD_VAR 0 14
48319: PPUSH
48320: CALL_OW 2
48324: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48325: LD_VAR 0 14
48329: PPUSH
48330: LD_VAR 0 1
48334: PPUSH
48335: CALL_OW 250
48339: PPUSH
48340: LD_VAR 0 1
48344: PPUSH
48345: CALL_OW 251
48349: PPUSH
48350: LD_INT 10
48352: PPUSH
48353: LD_INT 0
48355: PPUSH
48356: CALL_OW 50
// continue ;
48360: GO 48261
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48362: LD_VAR 0 12
48366: PUSH
48367: LD_INT 1
48369: ARRAY
48370: PPUSH
48371: CALL_OW 313
48375: PUSH
48376: LD_VAR 0 12
48380: PUSH
48381: LD_INT 1
48383: ARRAY
48384: PPUSH
48385: CALL_OW 266
48389: PUSH
48390: LD_INT 32
48392: PUSH
48393: LD_INT 31
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: IN
48400: AND
48401: PUSH
48402: LD_VAR 0 12
48406: PUSH
48407: LD_INT 1
48409: ARRAY
48410: PPUSH
48411: CALL_OW 313
48415: PUSH
48416: LD_INT 6
48418: EQUAL
48419: OR
48420: IFFALSE 48440
// f := Delete ( f , 1 ) ;
48422: LD_ADDR_VAR 0 12
48426: PUSH
48427: LD_VAR 0 12
48431: PPUSH
48432: LD_INT 1
48434: PPUSH
48435: CALL_OW 3
48439: ST_TO_ADDR
// if not f then
48440: LD_VAR 0 12
48444: NOT
48445: IFFALSE 48463
// begin x := x + 2 ;
48447: LD_ADDR_VAR 0 13
48451: PUSH
48452: LD_VAR 0 13
48456: PUSH
48457: LD_INT 2
48459: PLUS
48460: ST_TO_ADDR
// continue ;
48461: GO 48261
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48463: LD_VAR 0 12
48467: PUSH
48468: LD_INT 1
48470: ARRAY
48471: PPUSH
48472: CALL_OW 266
48476: PUSH
48477: LD_INT 5
48479: EQUAL
48480: IFFALSE 48554
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48482: LD_VAR 0 12
48486: PUSH
48487: LD_INT 1
48489: ARRAY
48490: PPUSH
48491: CALL_OW 313
48495: PUSH
48496: LD_INT 3
48498: LESS
48499: IFFALSE 48535
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48501: LD_INT 0
48503: PPUSH
48504: LD_INT 5
48506: PUSH
48507: LD_INT 8
48509: PUSH
48510: LD_INT 9
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: LIST
48517: PUSH
48518: LD_VAR 0 17
48522: ARRAY
48523: PPUSH
48524: LD_VAR 0 4
48528: PPUSH
48529: CALL_OW 380
48533: GO 48552
// PrepareHuman ( false , i , skill ) ;
48535: LD_INT 0
48537: PPUSH
48538: LD_VAR 0 8
48542: PPUSH
48543: LD_VAR 0 4
48547: PPUSH
48548: CALL_OW 380
// end else
48552: GO 48571
// PrepareHuman ( false , i , skill ) ;
48554: LD_INT 0
48556: PPUSH
48557: LD_VAR 0 8
48561: PPUSH
48562: LD_VAR 0 4
48566: PPUSH
48567: CALL_OW 380
// un := CreateHuman ;
48571: LD_ADDR_VAR 0 14
48575: PUSH
48576: CALL_OW 44
48580: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48581: LD_ADDR_VAR 0 7
48585: PUSH
48586: LD_VAR 0 7
48590: PPUSH
48591: LD_INT 1
48593: PPUSH
48594: LD_VAR 0 14
48598: PPUSH
48599: CALL_OW 2
48603: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48604: LD_VAR 0 14
48608: PPUSH
48609: LD_VAR 0 12
48613: PUSH
48614: LD_INT 1
48616: ARRAY
48617: PPUSH
48618: CALL_OW 52
// end ;
48622: GO 48261
48624: POP
48625: POP
// end ;
48626: GO 47563
48628: POP
48629: POP
// result := result ^ buildings ;
48630: LD_ADDR_VAR 0 7
48634: PUSH
48635: LD_VAR 0 7
48639: PUSH
48640: LD_VAR 0 18
48644: ADD
48645: ST_TO_ADDR
// end else
48646: GO 48789
// begin for i = 1 to personel do
48648: LD_ADDR_VAR 0 8
48652: PUSH
48653: DOUBLE
48654: LD_INT 1
48656: DEC
48657: ST_TO_ADDR
48658: LD_VAR 0 6
48662: PUSH
48663: FOR_TO
48664: IFFALSE 48787
// begin if i > 4 then
48666: LD_VAR 0 8
48670: PUSH
48671: LD_INT 4
48673: GREATER
48674: IFFALSE 48678
// break ;
48676: GO 48787
// x := personel [ i ] ;
48678: LD_ADDR_VAR 0 13
48682: PUSH
48683: LD_VAR 0 6
48687: PUSH
48688: LD_VAR 0 8
48692: ARRAY
48693: ST_TO_ADDR
// if x = - 1 then
48694: LD_VAR 0 13
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: EQUAL
48703: IFFALSE 48707
// continue ;
48705: GO 48663
// PrepareHuman ( false , i , skill ) ;
48707: LD_INT 0
48709: PPUSH
48710: LD_VAR 0 8
48714: PPUSH
48715: LD_VAR 0 4
48719: PPUSH
48720: CALL_OW 380
// un := CreateHuman ;
48724: LD_ADDR_VAR 0 14
48728: PUSH
48729: CALL_OW 44
48733: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48734: LD_VAR 0 14
48738: PPUSH
48739: LD_VAR 0 1
48743: PPUSH
48744: CALL_OW 250
48748: PPUSH
48749: LD_VAR 0 1
48753: PPUSH
48754: CALL_OW 251
48758: PPUSH
48759: LD_INT 10
48761: PPUSH
48762: LD_INT 0
48764: PPUSH
48765: CALL_OW 50
// result := result ^ un ;
48769: LD_ADDR_VAR 0 7
48773: PUSH
48774: LD_VAR 0 7
48778: PUSH
48779: LD_VAR 0 14
48783: ADD
48784: ST_TO_ADDR
// end ;
48785: GO 48663
48787: POP
48788: POP
// end ; end ;
48789: LD_VAR 0 7
48793: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48794: LD_INT 0
48796: PPUSH
48797: PPUSH
48798: PPUSH
48799: PPUSH
48800: PPUSH
48801: PPUSH
48802: PPUSH
48803: PPUSH
48804: PPUSH
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
48810: PPUSH
48811: PPUSH
// result := false ;
48812: LD_ADDR_VAR 0 3
48816: PUSH
48817: LD_INT 0
48819: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48820: LD_VAR 0 1
48824: NOT
48825: PUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 266
48835: PUSH
48836: LD_INT 32
48838: PUSH
48839: LD_INT 33
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: IN
48846: NOT
48847: OR
48848: IFFALSE 48852
// exit ;
48850: GO 49961
// nat := GetNation ( tower ) ;
48852: LD_ADDR_VAR 0 12
48856: PUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: CALL_OW 248
48866: ST_TO_ADDR
// side := GetSide ( tower ) ;
48867: LD_ADDR_VAR 0 16
48871: PUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 255
48881: ST_TO_ADDR
// x := GetX ( tower ) ;
48882: LD_ADDR_VAR 0 10
48886: PUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 250
48896: ST_TO_ADDR
// y := GetY ( tower ) ;
48897: LD_ADDR_VAR 0 11
48901: PUSH
48902: LD_VAR 0 1
48906: PPUSH
48907: CALL_OW 251
48911: ST_TO_ADDR
// if not x or not y then
48912: LD_VAR 0 10
48916: NOT
48917: PUSH
48918: LD_VAR 0 11
48922: NOT
48923: OR
48924: IFFALSE 48928
// exit ;
48926: GO 49961
// weapon := 0 ;
48928: LD_ADDR_VAR 0 18
48932: PUSH
48933: LD_INT 0
48935: ST_TO_ADDR
// fac_list := [ ] ;
48936: LD_ADDR_VAR 0 17
48940: PUSH
48941: EMPTY
48942: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48943: LD_ADDR_VAR 0 6
48947: PUSH
48948: LD_VAR 0 1
48952: PPUSH
48953: CALL_OW 274
48957: PPUSH
48958: LD_VAR 0 2
48962: PPUSH
48963: LD_INT 0
48965: PPUSH
48966: CALL 46532 0 3
48970: PPUSH
48971: LD_INT 30
48973: PUSH
48974: LD_INT 3
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PPUSH
48981: CALL_OW 72
48985: ST_TO_ADDR
// if not factories then
48986: LD_VAR 0 6
48990: NOT
48991: IFFALSE 48995
// exit ;
48993: GO 49961
// for i in factories do
48995: LD_ADDR_VAR 0 8
48999: PUSH
49000: LD_VAR 0 6
49004: PUSH
49005: FOR_IN
49006: IFFALSE 49031
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49008: LD_ADDR_VAR 0 17
49012: PUSH
49013: LD_VAR 0 17
49017: PUSH
49018: LD_VAR 0 8
49022: PPUSH
49023: CALL_OW 478
49027: UNION
49028: ST_TO_ADDR
49029: GO 49005
49031: POP
49032: POP
// if not fac_list then
49033: LD_VAR 0 17
49037: NOT
49038: IFFALSE 49042
// exit ;
49040: GO 49961
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49042: LD_ADDR_VAR 0 5
49046: PUSH
49047: LD_INT 4
49049: PUSH
49050: LD_INT 5
49052: PUSH
49053: LD_INT 9
49055: PUSH
49056: LD_INT 10
49058: PUSH
49059: LD_INT 6
49061: PUSH
49062: LD_INT 7
49064: PUSH
49065: LD_INT 11
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 27
49079: PUSH
49080: LD_INT 28
49082: PUSH
49083: LD_INT 26
49085: PUSH
49086: LD_INT 30
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 43
49097: PUSH
49098: LD_INT 44
49100: PUSH
49101: LD_INT 46
49103: PUSH
49104: LD_INT 45
49106: PUSH
49107: LD_INT 47
49109: PUSH
49110: LD_INT 49
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: LIST
49125: PUSH
49126: LD_VAR 0 12
49130: ARRAY
49131: ST_TO_ADDR
// list := list isect fac_list ;
49132: LD_ADDR_VAR 0 5
49136: PUSH
49137: LD_VAR 0 5
49141: PUSH
49142: LD_VAR 0 17
49146: ISECT
49147: ST_TO_ADDR
// if not list then
49148: LD_VAR 0 5
49152: NOT
49153: IFFALSE 49157
// exit ;
49155: GO 49961
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49157: LD_VAR 0 12
49161: PUSH
49162: LD_INT 3
49164: EQUAL
49165: PUSH
49166: LD_INT 49
49168: PUSH
49169: LD_VAR 0 5
49173: IN
49174: AND
49175: PUSH
49176: LD_INT 31
49178: PPUSH
49179: LD_VAR 0 16
49183: PPUSH
49184: CALL_OW 321
49188: PUSH
49189: LD_INT 2
49191: EQUAL
49192: AND
49193: IFFALSE 49253
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49195: LD_INT 22
49197: PUSH
49198: LD_VAR 0 16
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 35
49209: PUSH
49210: LD_INT 49
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 91
49219: PUSH
49220: LD_VAR 0 1
49224: PUSH
49225: LD_INT 10
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: PPUSH
49238: CALL_OW 69
49242: NOT
49243: IFFALSE 49253
// weapon := ru_time_lapser ;
49245: LD_ADDR_VAR 0 18
49249: PUSH
49250: LD_INT 49
49252: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49253: LD_VAR 0 12
49257: PUSH
49258: LD_INT 1
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: IN
49268: PUSH
49269: LD_INT 11
49271: PUSH
49272: LD_VAR 0 5
49276: IN
49277: PUSH
49278: LD_INT 30
49280: PUSH
49281: LD_VAR 0 5
49285: IN
49286: OR
49287: AND
49288: PUSH
49289: LD_INT 6
49291: PPUSH
49292: LD_VAR 0 16
49296: PPUSH
49297: CALL_OW 321
49301: PUSH
49302: LD_INT 2
49304: EQUAL
49305: AND
49306: IFFALSE 49471
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49308: LD_INT 22
49310: PUSH
49311: LD_VAR 0 16
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 2
49322: PUSH
49323: LD_INT 35
49325: PUSH
49326: LD_INT 11
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 35
49335: PUSH
49336: LD_INT 30
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 91
49350: PUSH
49351: LD_VAR 0 1
49355: PUSH
49356: LD_INT 18
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: LIST
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: LIST
49368: PPUSH
49369: CALL_OW 69
49373: NOT
49374: PUSH
49375: LD_INT 22
49377: PUSH
49378: LD_VAR 0 16
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: LD_INT 30
49392: PUSH
49393: LD_INT 32
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 30
49402: PUSH
49403: LD_INT 33
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 91
49417: PUSH
49418: LD_VAR 0 1
49422: PUSH
49423: LD_INT 12
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: PUSH
49436: EMPTY
49437: LIST
49438: PPUSH
49439: CALL_OW 69
49443: PUSH
49444: LD_INT 2
49446: GREATER
49447: AND
49448: IFFALSE 49471
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49450: LD_ADDR_VAR 0 18
49454: PUSH
49455: LD_INT 11
49457: PUSH
49458: LD_INT 30
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_VAR 0 12
49469: ARRAY
49470: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49471: LD_VAR 0 18
49475: NOT
49476: PUSH
49477: LD_INT 40
49479: PPUSH
49480: LD_VAR 0 16
49484: PPUSH
49485: CALL_OW 321
49489: PUSH
49490: LD_INT 2
49492: EQUAL
49493: AND
49494: PUSH
49495: LD_INT 7
49497: PUSH
49498: LD_VAR 0 5
49502: IN
49503: PUSH
49504: LD_INT 28
49506: PUSH
49507: LD_VAR 0 5
49511: IN
49512: OR
49513: PUSH
49514: LD_INT 45
49516: PUSH
49517: LD_VAR 0 5
49521: IN
49522: OR
49523: AND
49524: IFFALSE 49778
// begin hex := GetHexInfo ( x , y ) ;
49526: LD_ADDR_VAR 0 4
49530: PUSH
49531: LD_VAR 0 10
49535: PPUSH
49536: LD_VAR 0 11
49540: PPUSH
49541: CALL_OW 546
49545: ST_TO_ADDR
// if hex [ 1 ] then
49546: LD_VAR 0 4
49550: PUSH
49551: LD_INT 1
49553: ARRAY
49554: IFFALSE 49558
// exit ;
49556: GO 49961
// height := hex [ 2 ] ;
49558: LD_ADDR_VAR 0 15
49562: PUSH
49563: LD_VAR 0 4
49567: PUSH
49568: LD_INT 2
49570: ARRAY
49571: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49572: LD_ADDR_VAR 0 14
49576: PUSH
49577: LD_INT 0
49579: PUSH
49580: LD_INT 2
49582: PUSH
49583: LD_INT 3
49585: PUSH
49586: LD_INT 5
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: ST_TO_ADDR
// for i in tmp do
49595: LD_ADDR_VAR 0 8
49599: PUSH
49600: LD_VAR 0 14
49604: PUSH
49605: FOR_IN
49606: IFFALSE 49776
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49608: LD_ADDR_VAR 0 9
49612: PUSH
49613: LD_VAR 0 10
49617: PPUSH
49618: LD_VAR 0 8
49622: PPUSH
49623: LD_INT 5
49625: PPUSH
49626: CALL_OW 272
49630: PUSH
49631: LD_VAR 0 11
49635: PPUSH
49636: LD_VAR 0 8
49640: PPUSH
49641: LD_INT 5
49643: PPUSH
49644: CALL_OW 273
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49653: LD_VAR 0 9
49657: PUSH
49658: LD_INT 1
49660: ARRAY
49661: PPUSH
49662: LD_VAR 0 9
49666: PUSH
49667: LD_INT 2
49669: ARRAY
49670: PPUSH
49671: CALL_OW 488
49675: IFFALSE 49774
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49677: LD_ADDR_VAR 0 4
49681: PUSH
49682: LD_VAR 0 9
49686: PUSH
49687: LD_INT 1
49689: ARRAY
49690: PPUSH
49691: LD_VAR 0 9
49695: PUSH
49696: LD_INT 2
49698: ARRAY
49699: PPUSH
49700: CALL_OW 546
49704: ST_TO_ADDR
// if hex [ 1 ] then
49705: LD_VAR 0 4
49709: PUSH
49710: LD_INT 1
49712: ARRAY
49713: IFFALSE 49717
// continue ;
49715: GO 49605
// h := hex [ 2 ] ;
49717: LD_ADDR_VAR 0 13
49721: PUSH
49722: LD_VAR 0 4
49726: PUSH
49727: LD_INT 2
49729: ARRAY
49730: ST_TO_ADDR
// if h + 7 < height then
49731: LD_VAR 0 13
49735: PUSH
49736: LD_INT 7
49738: PLUS
49739: PUSH
49740: LD_VAR 0 15
49744: LESS
49745: IFFALSE 49774
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49747: LD_ADDR_VAR 0 18
49751: PUSH
49752: LD_INT 7
49754: PUSH
49755: LD_INT 28
49757: PUSH
49758: LD_INT 45
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: LIST
49765: PUSH
49766: LD_VAR 0 12
49770: ARRAY
49771: ST_TO_ADDR
// break ;
49772: GO 49776
// end ; end ; end ;
49774: GO 49605
49776: POP
49777: POP
// end ; if not weapon then
49778: LD_VAR 0 18
49782: NOT
49783: IFFALSE 49843
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49785: LD_ADDR_VAR 0 5
49789: PUSH
49790: LD_VAR 0 5
49794: PUSH
49795: LD_INT 11
49797: PUSH
49798: LD_INT 30
49800: PUSH
49801: LD_INT 49
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: LIST
49808: DIFF
49809: ST_TO_ADDR
// if not list then
49810: LD_VAR 0 5
49814: NOT
49815: IFFALSE 49819
// exit ;
49817: GO 49961
// weapon := list [ rand ( 1 , list ) ] ;
49819: LD_ADDR_VAR 0 18
49823: PUSH
49824: LD_VAR 0 5
49828: PUSH
49829: LD_INT 1
49831: PPUSH
49832: LD_VAR 0 5
49836: PPUSH
49837: CALL_OW 12
49841: ARRAY
49842: ST_TO_ADDR
// end ; if weapon then
49843: LD_VAR 0 18
49847: IFFALSE 49961
// begin tmp := CostOfWeapon ( weapon ) ;
49849: LD_ADDR_VAR 0 14
49853: PUSH
49854: LD_VAR 0 18
49858: PPUSH
49859: CALL_OW 451
49863: ST_TO_ADDR
// j := GetBase ( tower ) ;
49864: LD_ADDR_VAR 0 9
49868: PUSH
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL_OW 274
49878: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49879: LD_VAR 0 9
49883: PPUSH
49884: LD_INT 1
49886: PPUSH
49887: CALL_OW 275
49891: PUSH
49892: LD_VAR 0 14
49896: PUSH
49897: LD_INT 1
49899: ARRAY
49900: GREATEREQUAL
49901: PUSH
49902: LD_VAR 0 9
49906: PPUSH
49907: LD_INT 2
49909: PPUSH
49910: CALL_OW 275
49914: PUSH
49915: LD_VAR 0 14
49919: PUSH
49920: LD_INT 2
49922: ARRAY
49923: GREATEREQUAL
49924: AND
49925: PUSH
49926: LD_VAR 0 9
49930: PPUSH
49931: LD_INT 3
49933: PPUSH
49934: CALL_OW 275
49938: PUSH
49939: LD_VAR 0 14
49943: PUSH
49944: LD_INT 3
49946: ARRAY
49947: GREATEREQUAL
49948: AND
49949: IFFALSE 49961
// result := weapon ;
49951: LD_ADDR_VAR 0 3
49955: PUSH
49956: LD_VAR 0 18
49960: ST_TO_ADDR
// end ; end ;
49961: LD_VAR 0 3
49965: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49966: LD_INT 0
49968: PPUSH
49969: PPUSH
// result := true ;
49970: LD_ADDR_VAR 0 3
49974: PUSH
49975: LD_INT 1
49977: ST_TO_ADDR
// if array1 = array2 then
49978: LD_VAR 0 1
49982: PUSH
49983: LD_VAR 0 2
49987: EQUAL
49988: IFFALSE 50048
// begin for i = 1 to array1 do
49990: LD_ADDR_VAR 0 4
49994: PUSH
49995: DOUBLE
49996: LD_INT 1
49998: DEC
49999: ST_TO_ADDR
50000: LD_VAR 0 1
50004: PUSH
50005: FOR_TO
50006: IFFALSE 50044
// if array1 [ i ] <> array2 [ i ] then
50008: LD_VAR 0 1
50012: PUSH
50013: LD_VAR 0 4
50017: ARRAY
50018: PUSH
50019: LD_VAR 0 2
50023: PUSH
50024: LD_VAR 0 4
50028: ARRAY
50029: NONEQUAL
50030: IFFALSE 50042
// begin result := false ;
50032: LD_ADDR_VAR 0 3
50036: PUSH
50037: LD_INT 0
50039: ST_TO_ADDR
// break ;
50040: GO 50044
// end ;
50042: GO 50005
50044: POP
50045: POP
// end else
50046: GO 50056
// result := false ;
50048: LD_ADDR_VAR 0 3
50052: PUSH
50053: LD_INT 0
50055: ST_TO_ADDR
// end ;
50056: LD_VAR 0 3
50060: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50061: LD_INT 0
50063: PPUSH
50064: PPUSH
// if not array1 or not array2 then
50065: LD_VAR 0 1
50069: NOT
50070: PUSH
50071: LD_VAR 0 2
50075: NOT
50076: OR
50077: IFFALSE 50081
// exit ;
50079: GO 50145
// result := true ;
50081: LD_ADDR_VAR 0 3
50085: PUSH
50086: LD_INT 1
50088: ST_TO_ADDR
// for i = 1 to array1 do
50089: LD_ADDR_VAR 0 4
50093: PUSH
50094: DOUBLE
50095: LD_INT 1
50097: DEC
50098: ST_TO_ADDR
50099: LD_VAR 0 1
50103: PUSH
50104: FOR_TO
50105: IFFALSE 50143
// if array1 [ i ] <> array2 [ i ] then
50107: LD_VAR 0 1
50111: PUSH
50112: LD_VAR 0 4
50116: ARRAY
50117: PUSH
50118: LD_VAR 0 2
50122: PUSH
50123: LD_VAR 0 4
50127: ARRAY
50128: NONEQUAL
50129: IFFALSE 50141
// begin result := false ;
50131: LD_ADDR_VAR 0 3
50135: PUSH
50136: LD_INT 0
50138: ST_TO_ADDR
// break ;
50139: GO 50143
// end ;
50141: GO 50104
50143: POP
50144: POP
// end ;
50145: LD_VAR 0 3
50149: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50150: LD_INT 0
50152: PPUSH
50153: PPUSH
50154: PPUSH
// pom := GetBase ( fac ) ;
50155: LD_ADDR_VAR 0 5
50159: PUSH
50160: LD_VAR 0 1
50164: PPUSH
50165: CALL_OW 274
50169: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50170: LD_ADDR_VAR 0 4
50174: PUSH
50175: LD_VAR 0 2
50179: PUSH
50180: LD_INT 1
50182: ARRAY
50183: PPUSH
50184: LD_VAR 0 2
50188: PUSH
50189: LD_INT 2
50191: ARRAY
50192: PPUSH
50193: LD_VAR 0 2
50197: PUSH
50198: LD_INT 3
50200: ARRAY
50201: PPUSH
50202: LD_VAR 0 2
50206: PUSH
50207: LD_INT 4
50209: ARRAY
50210: PPUSH
50211: CALL_OW 449
50215: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50216: LD_ADDR_VAR 0 3
50220: PUSH
50221: LD_VAR 0 5
50225: PPUSH
50226: LD_INT 1
50228: PPUSH
50229: CALL_OW 275
50233: PUSH
50234: LD_VAR 0 4
50238: PUSH
50239: LD_INT 1
50241: ARRAY
50242: GREATEREQUAL
50243: PUSH
50244: LD_VAR 0 5
50248: PPUSH
50249: LD_INT 2
50251: PPUSH
50252: CALL_OW 275
50256: PUSH
50257: LD_VAR 0 4
50261: PUSH
50262: LD_INT 2
50264: ARRAY
50265: GREATEREQUAL
50266: AND
50267: PUSH
50268: LD_VAR 0 5
50272: PPUSH
50273: LD_INT 3
50275: PPUSH
50276: CALL_OW 275
50280: PUSH
50281: LD_VAR 0 4
50285: PUSH
50286: LD_INT 3
50288: ARRAY
50289: GREATEREQUAL
50290: AND
50291: ST_TO_ADDR
// end ;
50292: LD_VAR 0 3
50296: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50297: LD_INT 0
50299: PPUSH
50300: PPUSH
50301: PPUSH
50302: PPUSH
// pom := GetBase ( building ) ;
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 274
50317: ST_TO_ADDR
// if not pom then
50318: LD_VAR 0 3
50322: NOT
50323: IFFALSE 50327
// exit ;
50325: GO 50497
// btype := GetBType ( building ) ;
50327: LD_ADDR_VAR 0 5
50331: PUSH
50332: LD_VAR 0 1
50336: PPUSH
50337: CALL_OW 266
50341: ST_TO_ADDR
// if btype = b_armoury then
50342: LD_VAR 0 5
50346: PUSH
50347: LD_INT 4
50349: EQUAL
50350: IFFALSE 50360
// btype := b_barracks ;
50352: LD_ADDR_VAR 0 5
50356: PUSH
50357: LD_INT 5
50359: ST_TO_ADDR
// if btype = b_depot then
50360: LD_VAR 0 5
50364: PUSH
50365: LD_INT 0
50367: EQUAL
50368: IFFALSE 50378
// btype := b_warehouse ;
50370: LD_ADDR_VAR 0 5
50374: PUSH
50375: LD_INT 1
50377: ST_TO_ADDR
// if btype = b_workshop then
50378: LD_VAR 0 5
50382: PUSH
50383: LD_INT 2
50385: EQUAL
50386: IFFALSE 50396
// btype := b_factory ;
50388: LD_ADDR_VAR 0 5
50392: PUSH
50393: LD_INT 3
50395: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50396: LD_ADDR_VAR 0 4
50400: PUSH
50401: LD_VAR 0 5
50405: PPUSH
50406: LD_VAR 0 1
50410: PPUSH
50411: CALL_OW 248
50415: PPUSH
50416: CALL_OW 450
50420: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50421: LD_ADDR_VAR 0 2
50425: PUSH
50426: LD_VAR 0 3
50430: PPUSH
50431: LD_INT 1
50433: PPUSH
50434: CALL_OW 275
50438: PUSH
50439: LD_VAR 0 4
50443: PUSH
50444: LD_INT 1
50446: ARRAY
50447: GREATEREQUAL
50448: PUSH
50449: LD_VAR 0 3
50453: PPUSH
50454: LD_INT 2
50456: PPUSH
50457: CALL_OW 275
50461: PUSH
50462: LD_VAR 0 4
50466: PUSH
50467: LD_INT 2
50469: ARRAY
50470: GREATEREQUAL
50471: AND
50472: PUSH
50473: LD_VAR 0 3
50477: PPUSH
50478: LD_INT 3
50480: PPUSH
50481: CALL_OW 275
50485: PUSH
50486: LD_VAR 0 4
50490: PUSH
50491: LD_INT 3
50493: ARRAY
50494: GREATEREQUAL
50495: AND
50496: ST_TO_ADDR
// end ;
50497: LD_VAR 0 2
50501: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50502: LD_INT 0
50504: PPUSH
50505: PPUSH
50506: PPUSH
// pom := GetBase ( building ) ;
50507: LD_ADDR_VAR 0 4
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 274
50521: ST_TO_ADDR
// if not pom then
50522: LD_VAR 0 4
50526: NOT
50527: IFFALSE 50531
// exit ;
50529: GO 50632
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: LD_VAR 0 2
50540: PPUSH
50541: LD_VAR 0 1
50545: PPUSH
50546: CALL_OW 248
50550: PPUSH
50551: CALL_OW 450
50555: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50556: LD_ADDR_VAR 0 3
50560: PUSH
50561: LD_VAR 0 4
50565: PPUSH
50566: LD_INT 1
50568: PPUSH
50569: CALL_OW 275
50573: PUSH
50574: LD_VAR 0 5
50578: PUSH
50579: LD_INT 1
50581: ARRAY
50582: GREATEREQUAL
50583: PUSH
50584: LD_VAR 0 4
50588: PPUSH
50589: LD_INT 2
50591: PPUSH
50592: CALL_OW 275
50596: PUSH
50597: LD_VAR 0 5
50601: PUSH
50602: LD_INT 2
50604: ARRAY
50605: GREATEREQUAL
50606: AND
50607: PUSH
50608: LD_VAR 0 4
50612: PPUSH
50613: LD_INT 3
50615: PPUSH
50616: CALL_OW 275
50620: PUSH
50621: LD_VAR 0 5
50625: PUSH
50626: LD_INT 3
50628: ARRAY
50629: GREATEREQUAL
50630: AND
50631: ST_TO_ADDR
// end ;
50632: LD_VAR 0 3
50636: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50637: LD_INT 0
50639: PPUSH
50640: PPUSH
50641: PPUSH
50642: PPUSH
50643: PPUSH
50644: PPUSH
50645: PPUSH
50646: PPUSH
50647: PPUSH
50648: PPUSH
50649: PPUSH
// result := false ;
50650: LD_ADDR_VAR 0 8
50654: PUSH
50655: LD_INT 0
50657: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50658: LD_VAR 0 5
50662: NOT
50663: PUSH
50664: LD_VAR 0 1
50668: NOT
50669: OR
50670: PUSH
50671: LD_VAR 0 2
50675: NOT
50676: OR
50677: PUSH
50678: LD_VAR 0 3
50682: NOT
50683: OR
50684: IFFALSE 50688
// exit ;
50686: GO 51502
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50688: LD_ADDR_VAR 0 14
50692: PUSH
50693: LD_VAR 0 1
50697: PPUSH
50698: LD_VAR 0 2
50702: PPUSH
50703: LD_VAR 0 3
50707: PPUSH
50708: LD_VAR 0 4
50712: PPUSH
50713: LD_VAR 0 5
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PPUSH
50722: CALL_OW 248
50726: PPUSH
50727: LD_INT 0
50729: PPUSH
50730: CALL 52739 0 6
50734: ST_TO_ADDR
// if not hexes then
50735: LD_VAR 0 14
50739: NOT
50740: IFFALSE 50744
// exit ;
50742: GO 51502
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50744: LD_ADDR_VAR 0 17
50748: PUSH
50749: LD_VAR 0 5
50753: PPUSH
50754: LD_INT 22
50756: PUSH
50757: LD_VAR 0 13
50761: PPUSH
50762: CALL_OW 255
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 2
50773: PUSH
50774: LD_INT 30
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 30
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PPUSH
50803: CALL_OW 72
50807: ST_TO_ADDR
// for i = 1 to hexes do
50808: LD_ADDR_VAR 0 9
50812: PUSH
50813: DOUBLE
50814: LD_INT 1
50816: DEC
50817: ST_TO_ADDR
50818: LD_VAR 0 14
50822: PUSH
50823: FOR_TO
50824: IFFALSE 51500
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50826: LD_ADDR_VAR 0 13
50830: PUSH
50831: LD_VAR 0 14
50835: PUSH
50836: LD_VAR 0 9
50840: ARRAY
50841: PUSH
50842: LD_INT 1
50844: ARRAY
50845: PPUSH
50846: LD_VAR 0 14
50850: PUSH
50851: LD_VAR 0 9
50855: ARRAY
50856: PUSH
50857: LD_INT 2
50859: ARRAY
50860: PPUSH
50861: CALL_OW 428
50865: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50866: LD_VAR 0 14
50870: PUSH
50871: LD_VAR 0 9
50875: ARRAY
50876: PUSH
50877: LD_INT 1
50879: ARRAY
50880: PPUSH
50881: LD_VAR 0 14
50885: PUSH
50886: LD_VAR 0 9
50890: ARRAY
50891: PUSH
50892: LD_INT 2
50894: ARRAY
50895: PPUSH
50896: CALL_OW 351
50900: PUSH
50901: LD_VAR 0 14
50905: PUSH
50906: LD_VAR 0 9
50910: ARRAY
50911: PUSH
50912: LD_INT 1
50914: ARRAY
50915: PPUSH
50916: LD_VAR 0 14
50920: PUSH
50921: LD_VAR 0 9
50925: ARRAY
50926: PUSH
50927: LD_INT 2
50929: ARRAY
50930: PPUSH
50931: CALL_OW 488
50935: NOT
50936: OR
50937: PUSH
50938: LD_VAR 0 13
50942: PPUSH
50943: CALL_OW 247
50947: PUSH
50948: LD_INT 3
50950: EQUAL
50951: OR
50952: IFFALSE 50958
// exit ;
50954: POP
50955: POP
50956: GO 51502
// if not tmp then
50958: LD_VAR 0 13
50962: NOT
50963: IFFALSE 50967
// continue ;
50965: GO 50823
// result := true ;
50967: LD_ADDR_VAR 0 8
50971: PUSH
50972: LD_INT 1
50974: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50975: LD_VAR 0 6
50979: PUSH
50980: LD_VAR 0 13
50984: PPUSH
50985: CALL_OW 247
50989: PUSH
50990: LD_INT 2
50992: EQUAL
50993: AND
50994: PUSH
50995: LD_VAR 0 13
50999: PPUSH
51000: CALL_OW 263
51004: PUSH
51005: LD_INT 1
51007: EQUAL
51008: AND
51009: IFFALSE 51173
// begin if IsDrivenBy ( tmp ) then
51011: LD_VAR 0 13
51015: PPUSH
51016: CALL_OW 311
51020: IFFALSE 51024
// continue ;
51022: GO 50823
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51024: LD_VAR 0 6
51028: PPUSH
51029: LD_INT 3
51031: PUSH
51032: LD_INT 60
51034: PUSH
51035: EMPTY
51036: LIST
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 3
51044: PUSH
51045: LD_INT 55
51047: PUSH
51048: EMPTY
51049: LIST
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PPUSH
51059: CALL_OW 72
51063: IFFALSE 51171
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51065: LD_ADDR_VAR 0 18
51069: PUSH
51070: LD_VAR 0 6
51074: PPUSH
51075: LD_INT 3
51077: PUSH
51078: LD_INT 60
51080: PUSH
51081: EMPTY
51082: LIST
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 3
51090: PUSH
51091: LD_INT 55
51093: PUSH
51094: EMPTY
51095: LIST
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PPUSH
51105: CALL_OW 72
51109: PUSH
51110: LD_INT 1
51112: ARRAY
51113: ST_TO_ADDR
// if IsInUnit ( driver ) then
51114: LD_VAR 0 18
51118: PPUSH
51119: CALL_OW 310
51123: IFFALSE 51134
// ComExit ( driver ) ;
51125: LD_VAR 0 18
51129: PPUSH
51130: CALL 75923 0 1
// AddComEnterUnit ( driver , tmp ) ;
51134: LD_VAR 0 18
51138: PPUSH
51139: LD_VAR 0 13
51143: PPUSH
51144: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51148: LD_VAR 0 18
51152: PPUSH
51153: LD_VAR 0 7
51157: PPUSH
51158: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51162: LD_VAR 0 18
51166: PPUSH
51167: CALL_OW 181
// end ; continue ;
51171: GO 50823
// end ; if not cleaners or not tmp in cleaners then
51173: LD_VAR 0 6
51177: NOT
51178: PUSH
51179: LD_VAR 0 13
51183: PUSH
51184: LD_VAR 0 6
51188: IN
51189: NOT
51190: OR
51191: IFFALSE 51498
// begin if dep then
51193: LD_VAR 0 17
51197: IFFALSE 51333
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51199: LD_ADDR_VAR 0 16
51203: PUSH
51204: LD_VAR 0 17
51208: PUSH
51209: LD_INT 1
51211: ARRAY
51212: PPUSH
51213: CALL_OW 250
51217: PPUSH
51218: LD_VAR 0 17
51222: PUSH
51223: LD_INT 1
51225: ARRAY
51226: PPUSH
51227: CALL_OW 254
51231: PPUSH
51232: LD_INT 5
51234: PPUSH
51235: CALL_OW 272
51239: PUSH
51240: LD_VAR 0 17
51244: PUSH
51245: LD_INT 1
51247: ARRAY
51248: PPUSH
51249: CALL_OW 251
51253: PPUSH
51254: LD_VAR 0 17
51258: PUSH
51259: LD_INT 1
51261: ARRAY
51262: PPUSH
51263: CALL_OW 254
51267: PPUSH
51268: LD_INT 5
51270: PPUSH
51271: CALL_OW 273
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51280: LD_VAR 0 16
51284: PUSH
51285: LD_INT 1
51287: ARRAY
51288: PPUSH
51289: LD_VAR 0 16
51293: PUSH
51294: LD_INT 2
51296: ARRAY
51297: PPUSH
51298: CALL_OW 488
51302: IFFALSE 51333
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51304: LD_VAR 0 13
51308: PPUSH
51309: LD_VAR 0 16
51313: PUSH
51314: LD_INT 1
51316: ARRAY
51317: PPUSH
51318: LD_VAR 0 16
51322: PUSH
51323: LD_INT 2
51325: ARRAY
51326: PPUSH
51327: CALL_OW 111
// continue ;
51331: GO 50823
// end ; end ; r := GetDir ( tmp ) ;
51333: LD_ADDR_VAR 0 15
51337: PUSH
51338: LD_VAR 0 13
51342: PPUSH
51343: CALL_OW 254
51347: ST_TO_ADDR
// if r = 5 then
51348: LD_VAR 0 15
51352: PUSH
51353: LD_INT 5
51355: EQUAL
51356: IFFALSE 51366
// r := 0 ;
51358: LD_ADDR_VAR 0 15
51362: PUSH
51363: LD_INT 0
51365: ST_TO_ADDR
// for j = r to 5 do
51366: LD_ADDR_VAR 0 10
51370: PUSH
51371: DOUBLE
51372: LD_VAR 0 15
51376: DEC
51377: ST_TO_ADDR
51378: LD_INT 5
51380: PUSH
51381: FOR_TO
51382: IFFALSE 51496
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51384: LD_ADDR_VAR 0 11
51388: PUSH
51389: LD_VAR 0 13
51393: PPUSH
51394: CALL_OW 250
51398: PPUSH
51399: LD_VAR 0 10
51403: PPUSH
51404: LD_INT 2
51406: PPUSH
51407: CALL_OW 272
51411: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51412: LD_ADDR_VAR 0 12
51416: PUSH
51417: LD_VAR 0 13
51421: PPUSH
51422: CALL_OW 251
51426: PPUSH
51427: LD_VAR 0 10
51431: PPUSH
51432: LD_INT 2
51434: PPUSH
51435: CALL_OW 273
51439: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51440: LD_VAR 0 11
51444: PPUSH
51445: LD_VAR 0 12
51449: PPUSH
51450: CALL_OW 488
51454: PUSH
51455: LD_VAR 0 11
51459: PPUSH
51460: LD_VAR 0 12
51464: PPUSH
51465: CALL_OW 428
51469: NOT
51470: AND
51471: IFFALSE 51494
// begin ComMoveXY ( tmp , _x , _y ) ;
51473: LD_VAR 0 13
51477: PPUSH
51478: LD_VAR 0 11
51482: PPUSH
51483: LD_VAR 0 12
51487: PPUSH
51488: CALL_OW 111
// break ;
51492: GO 51496
// end ; end ;
51494: GO 51381
51496: POP
51497: POP
// end ; end ;
51498: GO 50823
51500: POP
51501: POP
// end ;
51502: LD_VAR 0 8
51506: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51507: LD_INT 0
51509: PPUSH
// result := true ;
51510: LD_ADDR_VAR 0 3
51514: PUSH
51515: LD_INT 1
51517: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51518: LD_VAR 0 2
51522: PUSH
51523: LD_INT 24
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51537
51529: LD_INT 33
51531: DOUBLE
51532: EQUAL
51533: IFTRUE 51537
51535: GO 51562
51537: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51538: LD_ADDR_VAR 0 3
51542: PUSH
51543: LD_INT 32
51545: PPUSH
51546: LD_VAR 0 1
51550: PPUSH
51551: CALL_OW 321
51555: PUSH
51556: LD_INT 2
51558: EQUAL
51559: ST_TO_ADDR
51560: GO 51882
51562: LD_INT 20
51564: DOUBLE
51565: EQUAL
51566: IFTRUE 51570
51568: GO 51595
51570: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51571: LD_ADDR_VAR 0 3
51575: PUSH
51576: LD_INT 6
51578: PPUSH
51579: LD_VAR 0 1
51583: PPUSH
51584: CALL_OW 321
51588: PUSH
51589: LD_INT 2
51591: EQUAL
51592: ST_TO_ADDR
51593: GO 51882
51595: LD_INT 22
51597: DOUBLE
51598: EQUAL
51599: IFTRUE 51609
51601: LD_INT 36
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51609
51607: GO 51634
51609: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51610: LD_ADDR_VAR 0 3
51614: PUSH
51615: LD_INT 15
51617: PPUSH
51618: LD_VAR 0 1
51622: PPUSH
51623: CALL_OW 321
51627: PUSH
51628: LD_INT 2
51630: EQUAL
51631: ST_TO_ADDR
51632: GO 51882
51634: LD_INT 30
51636: DOUBLE
51637: EQUAL
51638: IFTRUE 51642
51640: GO 51667
51642: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51643: LD_ADDR_VAR 0 3
51647: PUSH
51648: LD_INT 20
51650: PPUSH
51651: LD_VAR 0 1
51655: PPUSH
51656: CALL_OW 321
51660: PUSH
51661: LD_INT 2
51663: EQUAL
51664: ST_TO_ADDR
51665: GO 51882
51667: LD_INT 28
51669: DOUBLE
51670: EQUAL
51671: IFTRUE 51681
51673: LD_INT 21
51675: DOUBLE
51676: EQUAL
51677: IFTRUE 51681
51679: GO 51706
51681: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51682: LD_ADDR_VAR 0 3
51686: PUSH
51687: LD_INT 21
51689: PPUSH
51690: LD_VAR 0 1
51694: PPUSH
51695: CALL_OW 321
51699: PUSH
51700: LD_INT 2
51702: EQUAL
51703: ST_TO_ADDR
51704: GO 51882
51706: LD_INT 16
51708: DOUBLE
51709: EQUAL
51710: IFTRUE 51714
51712: GO 51741
51714: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51715: LD_ADDR_VAR 0 3
51719: PUSH
51720: LD_EXP 172
51724: PPUSH
51725: LD_VAR 0 1
51729: PPUSH
51730: CALL_OW 321
51734: PUSH
51735: LD_INT 2
51737: EQUAL
51738: ST_TO_ADDR
51739: GO 51882
51741: LD_INT 19
51743: DOUBLE
51744: EQUAL
51745: IFTRUE 51755
51747: LD_INT 23
51749: DOUBLE
51750: EQUAL
51751: IFTRUE 51755
51753: GO 51782
51755: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51756: LD_ADDR_VAR 0 3
51760: PUSH
51761: LD_EXP 171
51765: PPUSH
51766: LD_VAR 0 1
51770: PPUSH
51771: CALL_OW 321
51775: PUSH
51776: LD_INT 2
51778: EQUAL
51779: ST_TO_ADDR
51780: GO 51882
51782: LD_INT 17
51784: DOUBLE
51785: EQUAL
51786: IFTRUE 51790
51788: GO 51815
51790: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51791: LD_ADDR_VAR 0 3
51795: PUSH
51796: LD_INT 39
51798: PPUSH
51799: LD_VAR 0 1
51803: PPUSH
51804: CALL_OW 321
51808: PUSH
51809: LD_INT 2
51811: EQUAL
51812: ST_TO_ADDR
51813: GO 51882
51815: LD_INT 18
51817: DOUBLE
51818: EQUAL
51819: IFTRUE 51823
51821: GO 51848
51823: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51824: LD_ADDR_VAR 0 3
51828: PUSH
51829: LD_INT 40
51831: PPUSH
51832: LD_VAR 0 1
51836: PPUSH
51837: CALL_OW 321
51841: PUSH
51842: LD_INT 2
51844: EQUAL
51845: ST_TO_ADDR
51846: GO 51882
51848: LD_INT 27
51850: DOUBLE
51851: EQUAL
51852: IFTRUE 51856
51854: GO 51881
51856: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51857: LD_ADDR_VAR 0 3
51861: PUSH
51862: LD_INT 35
51864: PPUSH
51865: LD_VAR 0 1
51869: PPUSH
51870: CALL_OW 321
51874: PUSH
51875: LD_INT 2
51877: EQUAL
51878: ST_TO_ADDR
51879: GO 51882
51881: POP
// end ;
51882: LD_VAR 0 3
51886: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51887: LD_INT 0
51889: PPUSH
51890: PPUSH
51891: PPUSH
51892: PPUSH
51893: PPUSH
51894: PPUSH
51895: PPUSH
51896: PPUSH
51897: PPUSH
51898: PPUSH
51899: PPUSH
// result := false ;
51900: LD_ADDR_VAR 0 6
51904: PUSH
51905: LD_INT 0
51907: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51908: LD_VAR 0 1
51912: NOT
51913: PUSH
51914: LD_VAR 0 1
51918: PPUSH
51919: CALL_OW 266
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: IN
51934: NOT
51935: OR
51936: PUSH
51937: LD_VAR 0 2
51941: NOT
51942: OR
51943: PUSH
51944: LD_VAR 0 5
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: PUSH
51955: LD_INT 2
51957: PUSH
51958: LD_INT 3
51960: PUSH
51961: LD_INT 4
51963: PUSH
51964: LD_INT 5
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: IN
51975: NOT
51976: OR
51977: PUSH
51978: LD_VAR 0 3
51982: PPUSH
51983: LD_VAR 0 4
51987: PPUSH
51988: CALL_OW 488
51992: NOT
51993: OR
51994: IFFALSE 51998
// exit ;
51996: GO 52734
// side := GetSide ( depot ) ;
51998: LD_ADDR_VAR 0 9
52002: PUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 255
52012: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52013: LD_VAR 0 9
52017: PPUSH
52018: LD_VAR 0 2
52022: PPUSH
52023: CALL 51507 0 2
52027: NOT
52028: IFFALSE 52032
// exit ;
52030: GO 52734
// pom := GetBase ( depot ) ;
52032: LD_ADDR_VAR 0 10
52036: PUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 274
52046: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52047: LD_ADDR_VAR 0 11
52051: PUSH
52052: LD_VAR 0 2
52056: PPUSH
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 248
52066: PPUSH
52067: CALL_OW 450
52071: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52072: LD_VAR 0 10
52076: PPUSH
52077: LD_INT 1
52079: PPUSH
52080: CALL_OW 275
52084: PUSH
52085: LD_VAR 0 11
52089: PUSH
52090: LD_INT 1
52092: ARRAY
52093: GREATEREQUAL
52094: PUSH
52095: LD_VAR 0 10
52099: PPUSH
52100: LD_INT 2
52102: PPUSH
52103: CALL_OW 275
52107: PUSH
52108: LD_VAR 0 11
52112: PUSH
52113: LD_INT 2
52115: ARRAY
52116: GREATEREQUAL
52117: AND
52118: PUSH
52119: LD_VAR 0 10
52123: PPUSH
52124: LD_INT 3
52126: PPUSH
52127: CALL_OW 275
52131: PUSH
52132: LD_VAR 0 11
52136: PUSH
52137: LD_INT 3
52139: ARRAY
52140: GREATEREQUAL
52141: AND
52142: NOT
52143: IFFALSE 52147
// exit ;
52145: GO 52734
// if GetBType ( depot ) = b_depot then
52147: LD_VAR 0 1
52151: PPUSH
52152: CALL_OW 266
52156: PUSH
52157: LD_INT 0
52159: EQUAL
52160: IFFALSE 52172
// dist := 28 else
52162: LD_ADDR_VAR 0 14
52166: PUSH
52167: LD_INT 28
52169: ST_TO_ADDR
52170: GO 52180
// dist := 36 ;
52172: LD_ADDR_VAR 0 14
52176: PUSH
52177: LD_INT 36
52179: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52180: LD_VAR 0 1
52184: PPUSH
52185: LD_VAR 0 3
52189: PPUSH
52190: LD_VAR 0 4
52194: PPUSH
52195: CALL_OW 297
52199: PUSH
52200: LD_VAR 0 14
52204: GREATER
52205: IFFALSE 52209
// exit ;
52207: GO 52734
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52209: LD_ADDR_VAR 0 12
52213: PUSH
52214: LD_VAR 0 2
52218: PPUSH
52219: LD_VAR 0 3
52223: PPUSH
52224: LD_VAR 0 4
52228: PPUSH
52229: LD_VAR 0 5
52233: PPUSH
52234: LD_VAR 0 1
52238: PPUSH
52239: CALL_OW 248
52243: PPUSH
52244: LD_INT 0
52246: PPUSH
52247: CALL 52739 0 6
52251: ST_TO_ADDR
// if not hexes then
52252: LD_VAR 0 12
52256: NOT
52257: IFFALSE 52261
// exit ;
52259: GO 52734
// hex := GetHexInfo ( x , y ) ;
52261: LD_ADDR_VAR 0 15
52265: PUSH
52266: LD_VAR 0 3
52270: PPUSH
52271: LD_VAR 0 4
52275: PPUSH
52276: CALL_OW 546
52280: ST_TO_ADDR
// if hex [ 1 ] then
52281: LD_VAR 0 15
52285: PUSH
52286: LD_INT 1
52288: ARRAY
52289: IFFALSE 52293
// exit ;
52291: GO 52734
// height := hex [ 2 ] ;
52293: LD_ADDR_VAR 0 13
52297: PUSH
52298: LD_VAR 0 15
52302: PUSH
52303: LD_INT 2
52305: ARRAY
52306: ST_TO_ADDR
// for i = 1 to hexes do
52307: LD_ADDR_VAR 0 7
52311: PUSH
52312: DOUBLE
52313: LD_INT 1
52315: DEC
52316: ST_TO_ADDR
52317: LD_VAR 0 12
52321: PUSH
52322: FOR_TO
52323: IFFALSE 52653
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52325: LD_VAR 0 12
52329: PUSH
52330: LD_VAR 0 7
52334: ARRAY
52335: PUSH
52336: LD_INT 1
52338: ARRAY
52339: PPUSH
52340: LD_VAR 0 12
52344: PUSH
52345: LD_VAR 0 7
52349: ARRAY
52350: PUSH
52351: LD_INT 2
52353: ARRAY
52354: PPUSH
52355: CALL_OW 488
52359: NOT
52360: PUSH
52361: LD_VAR 0 12
52365: PUSH
52366: LD_VAR 0 7
52370: ARRAY
52371: PUSH
52372: LD_INT 1
52374: ARRAY
52375: PPUSH
52376: LD_VAR 0 12
52380: PUSH
52381: LD_VAR 0 7
52385: ARRAY
52386: PUSH
52387: LD_INT 2
52389: ARRAY
52390: PPUSH
52391: CALL_OW 428
52395: PUSH
52396: LD_INT 0
52398: GREATER
52399: OR
52400: PUSH
52401: LD_VAR 0 12
52405: PUSH
52406: LD_VAR 0 7
52410: ARRAY
52411: PUSH
52412: LD_INT 1
52414: ARRAY
52415: PPUSH
52416: LD_VAR 0 12
52420: PUSH
52421: LD_VAR 0 7
52425: ARRAY
52426: PUSH
52427: LD_INT 2
52429: ARRAY
52430: PPUSH
52431: CALL_OW 351
52435: OR
52436: IFFALSE 52442
// exit ;
52438: POP
52439: POP
52440: GO 52734
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52442: LD_ADDR_VAR 0 8
52446: PUSH
52447: LD_VAR 0 12
52451: PUSH
52452: LD_VAR 0 7
52456: ARRAY
52457: PUSH
52458: LD_INT 1
52460: ARRAY
52461: PPUSH
52462: LD_VAR 0 12
52466: PUSH
52467: LD_VAR 0 7
52471: ARRAY
52472: PUSH
52473: LD_INT 2
52475: ARRAY
52476: PPUSH
52477: CALL_OW 546
52481: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52482: LD_VAR 0 8
52486: PUSH
52487: LD_INT 1
52489: ARRAY
52490: PUSH
52491: LD_VAR 0 8
52495: PUSH
52496: LD_INT 2
52498: ARRAY
52499: PUSH
52500: LD_VAR 0 13
52504: PUSH
52505: LD_INT 2
52507: PLUS
52508: GREATER
52509: OR
52510: PUSH
52511: LD_VAR 0 8
52515: PUSH
52516: LD_INT 2
52518: ARRAY
52519: PUSH
52520: LD_VAR 0 13
52524: PUSH
52525: LD_INT 2
52527: MINUS
52528: LESS
52529: OR
52530: PUSH
52531: LD_VAR 0 8
52535: PUSH
52536: LD_INT 3
52538: ARRAY
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: LD_INT 8
52545: PUSH
52546: LD_INT 9
52548: PUSH
52549: LD_INT 10
52551: PUSH
52552: LD_INT 11
52554: PUSH
52555: LD_INT 12
52557: PUSH
52558: LD_INT 13
52560: PUSH
52561: LD_INT 16
52563: PUSH
52564: LD_INT 17
52566: PUSH
52567: LD_INT 18
52569: PUSH
52570: LD_INT 19
52572: PUSH
52573: LD_INT 20
52575: PUSH
52576: LD_INT 21
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: IN
52594: NOT
52595: OR
52596: PUSH
52597: LD_VAR 0 8
52601: PUSH
52602: LD_INT 5
52604: ARRAY
52605: NOT
52606: OR
52607: PUSH
52608: LD_VAR 0 8
52612: PUSH
52613: LD_INT 6
52615: ARRAY
52616: PUSH
52617: LD_INT 1
52619: PUSH
52620: LD_INT 2
52622: PUSH
52623: LD_INT 7
52625: PUSH
52626: LD_INT 9
52628: PUSH
52629: LD_INT 10
52631: PUSH
52632: LD_INT 11
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: IN
52643: NOT
52644: OR
52645: IFFALSE 52651
// exit ;
52647: POP
52648: POP
52649: GO 52734
// end ;
52651: GO 52322
52653: POP
52654: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52655: LD_VAR 0 9
52659: PPUSH
52660: LD_VAR 0 3
52664: PPUSH
52665: LD_VAR 0 4
52669: PPUSH
52670: LD_INT 20
52672: PPUSH
52673: CALL 44680 0 4
52677: PUSH
52678: LD_INT 4
52680: ARRAY
52681: IFFALSE 52685
// exit ;
52683: GO 52734
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 29
52692: PUSH
52693: LD_INT 30
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: IN
52700: PUSH
52701: LD_VAR 0 3
52705: PPUSH
52706: LD_VAR 0 4
52710: PPUSH
52711: LD_VAR 0 9
52715: PPUSH
52716: CALL_OW 440
52720: NOT
52721: AND
52722: IFFALSE 52726
// exit ;
52724: GO 52734
// result := true ;
52726: LD_ADDR_VAR 0 6
52730: PUSH
52731: LD_INT 1
52733: ST_TO_ADDR
// end ;
52734: LD_VAR 0 6
52738: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52739: LD_INT 0
52741: PPUSH
52742: PPUSH
52743: PPUSH
52744: PPUSH
52745: PPUSH
52746: PPUSH
52747: PPUSH
52748: PPUSH
52749: PPUSH
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
52761: PPUSH
52762: PPUSH
52763: PPUSH
52764: PPUSH
52765: PPUSH
52766: PPUSH
52767: PPUSH
52768: PPUSH
52769: PPUSH
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
52776: PPUSH
52777: PPUSH
52778: PPUSH
52779: PPUSH
52780: PPUSH
52781: PPUSH
52782: PPUSH
52783: PPUSH
52784: PPUSH
52785: PPUSH
52786: PPUSH
52787: PPUSH
52788: PPUSH
52789: PPUSH
52790: PPUSH
52791: PPUSH
52792: PPUSH
52793: PPUSH
52794: PPUSH
52795: PPUSH
52796: PPUSH
52797: PPUSH
52798: PPUSH
// result = [ ] ;
52799: LD_ADDR_VAR 0 7
52803: PUSH
52804: EMPTY
52805: ST_TO_ADDR
// temp_list = [ ] ;
52806: LD_ADDR_VAR 0 9
52810: PUSH
52811: EMPTY
52812: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52813: LD_VAR 0 4
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 3
52829: PUSH
52830: LD_INT 4
52832: PUSH
52833: LD_INT 5
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: IN
52844: NOT
52845: PUSH
52846: LD_VAR 0 1
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 1
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: IN
52861: PUSH
52862: LD_VAR 0 5
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: LIST
52880: IN
52881: NOT
52882: AND
52883: OR
52884: IFFALSE 52888
// exit ;
52886: GO 71279
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52888: LD_VAR 0 1
52892: PUSH
52893: LD_INT 6
52895: PUSH
52896: LD_INT 7
52898: PUSH
52899: LD_INT 8
52901: PUSH
52902: LD_INT 13
52904: PUSH
52905: LD_INT 12
52907: PUSH
52908: LD_INT 15
52910: PUSH
52911: LD_INT 11
52913: PUSH
52914: LD_INT 14
52916: PUSH
52917: LD_INT 10
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: IN
52931: IFFALSE 52941
// btype = b_lab ;
52933: LD_ADDR_VAR 0 1
52937: PUSH
52938: LD_INT 6
52940: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52941: LD_VAR 0 6
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: LD_INT 2
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: LIST
52959: IN
52960: NOT
52961: PUSH
52962: LD_VAR 0 1
52966: PUSH
52967: LD_INT 0
52969: PUSH
52970: LD_INT 1
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: LD_INT 3
52978: PUSH
52979: LD_INT 6
52981: PUSH
52982: LD_INT 36
52984: PUSH
52985: LD_INT 4
52987: PUSH
52988: LD_INT 5
52990: PUSH
52991: LD_INT 31
52993: PUSH
52994: LD_INT 32
52996: PUSH
52997: LD_INT 33
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: IN
53013: NOT
53014: PUSH
53015: LD_VAR 0 6
53019: PUSH
53020: LD_INT 1
53022: EQUAL
53023: AND
53024: OR
53025: PUSH
53026: LD_VAR 0 1
53030: PUSH
53031: LD_INT 2
53033: PUSH
53034: LD_INT 3
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: IN
53041: NOT
53042: PUSH
53043: LD_VAR 0 6
53047: PUSH
53048: LD_INT 2
53050: EQUAL
53051: AND
53052: OR
53053: IFFALSE 53063
// mode = 0 ;
53055: LD_ADDR_VAR 0 6
53059: PUSH
53060: LD_INT 0
53062: ST_TO_ADDR
// case mode of 0 :
53063: LD_VAR 0 6
53067: PUSH
53068: LD_INT 0
53070: DOUBLE
53071: EQUAL
53072: IFTRUE 53076
53074: GO 64529
53076: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53077: LD_ADDR_VAR 0 11
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 0
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 0
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 1
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 0
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: LD_INT 2
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 0
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: LD_INT 1
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: LD_INT 2
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53270: LD_ADDR_VAR 0 12
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 2
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 2
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: LD_INT 1
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 2
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 3
53438: NEG
53439: PUSH
53440: LD_INT 1
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53466: LD_ADDR_VAR 0 13
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 0
53514: PUSH
53515: LD_INT 1
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 2
53551: NEG
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 2
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 2
53589: NEG
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 2
53601: NEG
53602: PUSH
53603: LD_INT 2
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 3
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53665: LD_ADDR_VAR 0 14
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: NEG
53747: PUSH
53748: LD_INT 2
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 0
53758: PUSH
53759: LD_INT 2
53761: NEG
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: LD_INT 0
53790: PUSH
53791: LD_INT 2
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 1
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 3
53815: NEG
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 0
53823: PUSH
53824: LD_INT 3
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 2
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53861: LD_ADDR_VAR 0 15
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 0
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: LD_INT 1
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: LD_INT 1
53930: NEG
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 2
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: LD_INT 1
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 0
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 2
53995: NEG
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 2
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 1
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54054: LD_ADDR_VAR 0 16
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 0
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: LD_INT 1
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 1
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 2
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 2
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 2
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: NEG
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 3
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54247: LD_ADDR_VAR 0 17
54251: PUSH
54252: LD_INT 0
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 1
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 1
54305: NEG
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 2
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: PUSH
54363: LD_INT 0
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 1
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 2
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: NEG
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: NEG
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 2
54446: NEG
54447: PUSH
54448: LD_INT 2
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: LIST
54464: LIST
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54477: LD_ADDR_VAR 0 18
54481: PUSH
54482: LD_INT 0
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 1
54550: NEG
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: LD_INT 2
54562: NEG
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 2
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 2
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 0
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: LD_INT 1
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 2
54653: NEG
54654: PUSH
54655: LD_INT 0
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 2
54664: NEG
54665: PUSH
54666: LD_INT 1
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 2
54676: NEG
54677: PUSH
54678: LD_INT 2
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54707: LD_ADDR_VAR 0 19
54711: PUSH
54712: LD_INT 0
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 1
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: LD_INT 1
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 2
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: LD_INT 0
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 2
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54937: LD_ADDR_VAR 0 20
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: LD_INT 2
55022: NEG
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 2
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 2
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 1
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: NEG
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: NEG
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55167: LD_ADDR_VAR 0 21
55171: PUSH
55172: LD_INT 0
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 1
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 1
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 0
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 1
55225: NEG
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 1
55236: NEG
55237: PUSH
55238: LD_INT 1
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: LD_INT 2
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 2
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 2
55282: PUSH
55283: LD_INT 0
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 2
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 1
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 2
55354: NEG
55355: PUSH
55356: LD_INT 1
55358: NEG
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: LD_INT 2
55370: NEG
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55397: LD_ADDR_VAR 0 22
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 0
55414: PUSH
55415: LD_INT 1
55417: NEG
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: LD_INT 0
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 0
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 1
55455: NEG
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: LD_INT 2
55482: NEG
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 2
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 2
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 2
55545: PUSH
55546: EMPTY
55547: LIST
55548: LIST
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: LD_INT 2
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: LD_INT 1
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: LD_INT 0
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 2
55584: NEG
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 2
55596: NEG
55597: PUSH
55598: LD_INT 2
55600: NEG
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55627: LD_ADDR_VAR 0 23
55631: PUSH
55632: LD_INT 0
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 0
55644: PUSH
55645: LD_INT 1
55647: NEG
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: LD_INT 0
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 1
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: NEG
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: LD_INT 2
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 2
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 1
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 2
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 2
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 0
55782: PUSH
55783: LD_INT 2
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 2
55803: NEG
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 2
55838: NEG
55839: PUSH
55840: LD_INT 3
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 3
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 2
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55907: LD_ADDR_VAR 0 24
55911: PUSH
55912: LD_INT 0
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 1
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 0
55955: PUSH
55956: LD_INT 1
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 1
55965: NEG
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: NEG
55977: PUSH
55978: LD_INT 1
55980: NEG
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 0
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 2
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: PUSH
56043: LD_INT 2
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 2
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 2
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 2
56094: NEG
56095: PUSH
56096: LD_INT 1
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 2
56106: NEG
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 1
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 3
56140: PUSH
56141: LD_INT 1
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 3
56150: PUSH
56151: LD_INT 2
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56183: LD_ADDR_VAR 0 25
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 0
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 1
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 0
56231: PUSH
56232: LD_INT 1
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 0
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: LD_INT 1
56256: NEG
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 0
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 2
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 1
56328: PUSH
56329: LD_INT 2
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 0
56338: PUSH
56339: LD_INT 2
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 1
56352: PUSH
56353: EMPTY
56354: LIST
56355: LIST
56356: PUSH
56357: LD_INT 2
56359: NEG
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: PUSH
56368: LD_INT 2
56370: NEG
56371: PUSH
56372: LD_INT 1
56374: NEG
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 2
56382: NEG
56383: PUSH
56384: LD_INT 2
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: PUSH
56395: LD_INT 1
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 3
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 3
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56457: LD_ADDR_VAR 0 26
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 0
56474: PUSH
56475: LD_INT 1
56477: NEG
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 1
56515: NEG
56516: PUSH
56517: LD_INT 0
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 1
56526: NEG
56527: PUSH
56528: LD_INT 1
56530: NEG
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: NEG
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 1
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 2
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 2
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: LD_INT 0
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 2
56656: NEG
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 3
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: LD_INT 3
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 1
56688: NEG
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 2
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56733: LD_ADDR_VAR 0 27
56737: PUSH
56738: LD_INT 0
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 0
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 0
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 1
56791: NEG
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 2
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 2
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 0
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 1
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 2
56909: NEG
56910: PUSH
56911: LD_INT 0
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 2
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: LD_INT 3
56978: NEG
56979: PUSH
56980: LD_INT 2
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57013: LD_ADDR_VAR 0 28
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 0
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 1
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 0
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 1
57094: NEG
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 2
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 2
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 1
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: NEG
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: NEG
57213: PUSH
57214: LD_INT 2
57216: NEG
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 3
57228: NEG
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 3
57248: NEG
57249: PUSH
57250: LD_INT 1
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 3
57260: NEG
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57295: LD_ADDR_VAR 0 29
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 2
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: NEG
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 2
57485: NEG
57486: PUSH
57487: LD_INT 3
57489: NEG
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: PUSH
57519: LD_INT 3
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: LIST
57559: LIST
57560: LIST
57561: LIST
57562: LIST
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57574: LD_ADDR_VAR 0 30
57578: PUSH
57579: LD_INT 0
57581: PUSH
57582: LD_INT 0
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 0
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 1
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: NEG
57633: PUSH
57634: LD_INT 0
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 1
57647: NEG
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: LD_INT 2
57659: NEG
57660: PUSH
57661: EMPTY
57662: LIST
57663: LIST
57664: PUSH
57665: LD_INT 0
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 1
57678: PUSH
57679: LD_INT 1
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 2
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 2
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 2
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: NEG
57741: PUSH
57742: LD_INT 0
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: NEG
57752: PUSH
57753: LD_INT 1
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 2
57778: NEG
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: LD_INT 2
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 2
57806: NEG
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 3
57817: NEG
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57852: LD_ADDR_VAR 0 31
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 2
57937: NEG
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: LD_INT 1
57948: NEG
57949: PUSH
57950: EMPTY
57951: LIST
57952: LIST
57953: PUSH
57954: LD_INT 2
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: LD_INT 1
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 2
57976: PUSH
57977: LD_INT 2
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 2
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 2
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 1
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: NEG
58030: PUSH
58031: LD_INT 2
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 2
58041: NEG
58042: PUSH
58043: LD_INT 3
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 2
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 3
58064: PUSH
58065: LD_INT 1
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 1
58074: PUSH
58075: LD_INT 3
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58130: LD_ADDR_VAR 0 32
58134: PUSH
58135: LD_INT 0
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: LD_INT 1
58150: NEG
58151: PUSH
58152: EMPTY
58153: LIST
58154: LIST
58155: PUSH
58156: LD_INT 1
58158: PUSH
58159: LD_INT 0
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 1
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: NEG
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: NEG
58212: PUSH
58213: LD_INT 2
58215: NEG
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: LD_INT 2
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 1
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 1
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: LD_INT 2
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 2
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 0
58275: PUSH
58276: LD_INT 2
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: LD_INT 1
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: NEG
58297: PUSH
58298: LD_INT 0
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PUSH
58305: LD_INT 2
58307: NEG
58308: PUSH
58309: LD_INT 1
58311: NEG
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 1
58319: NEG
58320: PUSH
58321: LD_INT 3
58323: NEG
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 1
58331: PUSH
58332: LD_INT 2
58334: NEG
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 3
58342: PUSH
58343: LD_INT 2
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 3
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: NEG
58363: PUSH
58364: LD_INT 1
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 3
58373: NEG
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: LIST
58389: LIST
58390: LIST
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58408: LD_ADDR_VAR 0 33
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: LD_INT 0
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 0
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 1
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 1
58446: PUSH
58447: LD_INT 1
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 0
58456: PUSH
58457: LD_INT 1
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 1
58466: NEG
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 1
58477: NEG
58478: PUSH
58479: LD_INT 1
58481: NEG
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 1
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: LD_INT 2
58512: PUSH
58513: LD_INT 0
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: EMPTY
58537: LIST
58538: LIST
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 0
58567: PUSH
58568: EMPTY
58569: LIST
58570: LIST
58571: PUSH
58572: LD_INT 2
58574: NEG
58575: PUSH
58576: LD_INT 1
58578: NEG
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 2
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 3
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: LD_INT 1
58613: NEG
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 3
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: PUSH
58632: LD_INT 3
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: LD_INT 2
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 3
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: NEG
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: LIST
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: LIST
58683: LIST
58684: LIST
58685: LIST
58686: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58687: LD_ADDR_VAR 0 34
58691: PUSH
58692: LD_INT 0
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: LD_INT 1
58728: PUSH
58729: EMPTY
58730: LIST
58731: LIST
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 0
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 1
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: PUSH
58803: LD_INT 1
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 2
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 2
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 1
58832: NEG
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: PUSH
58841: LD_INT 2
58843: NEG
58844: PUSH
58845: LD_INT 0
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 2
58854: NEG
58855: PUSH
58856: LD_INT 1
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: LD_INT 2
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 1
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 2
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 2
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 1
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: LD_INT 1
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: LIST
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58967: LD_ADDR_VAR 0 35
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 0
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: NEG
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: NEG
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: PUSH
59046: LD_INT 2
59048: PUSH
59049: LD_INT 1
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59079: LD_ADDR_VAR 0 36
59083: PUSH
59084: LD_INT 0
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 1
59117: PUSH
59118: LD_INT 1
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 1
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: LD_INT 1
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 1
59160: NEG
59161: PUSH
59162: LD_INT 2
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: LD_INT 2
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59191: LD_ADDR_VAR 0 37
59195: PUSH
59196: LD_INT 0
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 0
59208: PUSH
59209: LD_INT 1
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: LD_INT 0
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: PUSH
59230: LD_INT 1
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 0
59239: PUSH
59240: LD_INT 1
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 0
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 1
59260: NEG
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 1
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: PUSH
59281: LD_INT 1
59283: NEG
59284: PUSH
59285: LD_INT 1
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59303: LD_ADDR_VAR 0 38
59307: PUSH
59308: LD_INT 0
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: LD_INT 1
59323: NEG
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: LD_INT 0
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: PUSH
59342: LD_INT 1
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 0
59351: PUSH
59352: LD_INT 1
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 1
59361: NEG
59362: PUSH
59363: LD_INT 0
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: PUSH
59382: LD_INT 2
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_INT 2
59394: NEG
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: EMPTY
59401: LIST
59402: LIST
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59415: LD_ADDR_VAR 0 39
59419: PUSH
59420: LD_INT 0
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: LD_INT 0
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 1
59473: NEG
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: LD_INT 2
59500: NEG
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: LD_INT 2
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59527: LD_ADDR_VAR 0 40
59531: PUSH
59532: LD_INT 0
59534: PUSH
59535: LD_INT 0
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: EMPTY
59591: LIST
59592: LIST
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: LD_INT 1
59600: NEG
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: LD_INT 1
59611: NEG
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: NEG
59620: PUSH
59621: LD_INT 1
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59639: LD_ADDR_VAR 0 41
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 0
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: LD_INT 1
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 0
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: PUSH
59706: LD_INT 1
59708: NEG
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: NEG
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 1
59732: PUSH
59733: LD_INT 1
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 2
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 1
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 2
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 2
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 1
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: NEG
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 1
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 2
59817: NEG
59818: PUSH
59819: LD_INT 2
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 2
59829: NEG
59830: PUSH
59831: LD_INT 3
59833: NEG
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 2
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: LD_INT 3
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 1
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: LD_INT 3
59913: NEG
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 3
59924: NEG
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 3
59936: NEG
59937: PUSH
59938: LD_INT 2
59940: NEG
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 3
59948: NEG
59949: PUSH
59950: LD_INT 3
59952: NEG
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59989: LD_ADDR_VAR 0 42
59993: PUSH
59994: LD_INT 0
59996: PUSH
59997: LD_INT 0
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 1
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 1
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: LD_INT 2
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 1
60093: PUSH
60094: LD_INT 1
60096: NEG
60097: PUSH
60098: EMPTY
60099: LIST
60100: LIST
60101: PUSH
60102: LD_INT 2
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: LD_INT 2
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 2
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: LD_INT 1
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 2
60155: NEG
60156: PUSH
60157: LD_INT 1
60159: NEG
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 2
60167: NEG
60168: PUSH
60169: LD_INT 2
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 2
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: LD_INT 3
60195: NEG
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: LD_INT 3
60206: NEG
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 1
60214: PUSH
60215: LD_INT 2
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: LD_INT 2
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 3
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: EMPTY
60240: LIST
60241: LIST
60242: PUSH
60243: LD_INT 2
60245: PUSH
60246: LD_INT 3
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 0
60265: PUSH
60266: LD_INT 3
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: NEG
60287: PUSH
60288: LD_INT 2
60290: NEG
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 3
60298: NEG
60299: PUSH
60300: LD_INT 3
60302: NEG
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: LIST
60333: LIST
60334: LIST
60335: LIST
60336: LIST
60337: LIST
60338: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60339: LD_ADDR_VAR 0 43
60343: PUSH
60344: LD_INT 0
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 0
60356: PUSH
60357: LD_INT 1
60359: NEG
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: LD_INT 0
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: LD_INT 1
60408: NEG
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 2
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: LD_INT 0
60432: PUSH
60433: LD_INT 2
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 1
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 2
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 2
60464: PUSH
60465: LD_INT 1
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: LD_INT 2
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 0
60484: PUSH
60485: LD_INT 2
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 2
60505: NEG
60506: PUSH
60507: LD_INT 0
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: NEG
60517: PUSH
60518: LD_INT 1
60520: NEG
60521: PUSH
60522: EMPTY
60523: LIST
60524: LIST
60525: PUSH
60526: LD_INT 1
60528: NEG
60529: PUSH
60530: LD_INT 3
60532: NEG
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 0
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 1
60551: PUSH
60552: LD_INT 2
60554: NEG
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: LD_INT 3
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 3
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: LD_INT 2
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 2
60624: NEG
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: LD_INT 0
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 3
60646: NEG
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60687: LD_ADDR_VAR 0 44
60691: PUSH
60692: LD_INT 0
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 0
60704: PUSH
60705: LD_INT 1
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: LD_INT 0
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: LD_INT 1
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: LD_INT 0
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: NEG
60746: PUSH
60747: LD_INT 0
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 1
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 2
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: LD_INT 2
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 1
60821: PUSH
60822: LD_INT 2
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 1
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 2
60842: NEG
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: NEG
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: NEG
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 2
60877: NEG
60878: PUSH
60879: LD_INT 3
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 2
60889: PUSH
60890: LD_INT 1
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 3
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 3
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: LD_INT 2
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 3
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 3
60984: NEG
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 3
60996: NEG
60997: PUSH
60998: LD_INT 3
61000: NEG
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: LIST
61035: LIST
61036: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61037: LD_ADDR_VAR 0 45
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 0
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: PUSH
61076: LD_INT 1
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 0
61085: PUSH
61086: LD_INT 1
61088: PUSH
61089: EMPTY
61090: LIST
61091: LIST
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: LD_INT 0
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: LD_INT 1
61110: NEG
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: LD_INT 2
61122: NEG
61123: PUSH
61124: EMPTY
61125: LIST
61126: LIST
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 1
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: LD_INT 1
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: LD_INT 2
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: PUSH
61180: LD_INT 0
61182: PUSH
61183: LD_INT 2
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 2
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 2
61215: NEG
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 3
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 1
61239: NEG
61240: PUSH
61241: LD_INT 3
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 3
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 2
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 2
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 1
61303: PUSH
61304: LD_INT 3
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: NEG
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: NEG
61335: PUSH
61336: LD_INT 2
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 3
61346: NEG
61347: PUSH
61348: LD_INT 3
61350: NEG
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: LIST
61384: LIST
61385: LIST
61386: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61387: LD_ADDR_VAR 0 46
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 0
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: PUSH
61416: LD_INT 0
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: PUSH
61426: LD_INT 1
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 0
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: LD_INT 0
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 1
61468: NEG
61469: PUSH
61470: LD_INT 2
61472: NEG
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: PUSH
61503: LD_INT 0
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: LD_INT 2
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 1
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: NEG
61554: PUSH
61555: LD_INT 0
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 2
61564: NEG
61565: PUSH
61566: LD_INT 1
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 1
61576: NEG
61577: PUSH
61578: LD_INT 3
61580: NEG
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 1
61599: PUSH
61600: LD_INT 2
61602: NEG
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: PUSH
61611: LD_INT 1
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: LD_INT 0
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_INT 0
61651: PUSH
61652: LD_INT 3
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 1
61661: NEG
61662: PUSH
61663: LD_INT 2
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: NEG
61673: PUSH
61674: LD_INT 1
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 3
61683: NEG
61684: PUSH
61685: LD_INT 0
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: PUSH
61692: LD_INT 3
61694: NEG
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61735: LD_ADDR_VAR 0 47
61739: PUSH
61740: LD_INT 0
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: LD_INT 0
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: LD_INT 1
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 1
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 1
61793: NEG
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: LD_INT 1
61808: NEG
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 1
61816: NEG
61817: PUSH
61818: LD_INT 2
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 2
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PUSH
61840: LD_INT 1
61842: NEG
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 2
61850: NEG
61851: PUSH
61852: LD_INT 1
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 2
61862: NEG
61863: PUSH
61864: LD_INT 2
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61886: LD_ADDR_VAR 0 48
61890: PUSH
61891: LD_INT 0
61893: PUSH
61894: LD_INT 0
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 0
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: LD_INT 0
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 1
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: NEG
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: NEG
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: LD_INT 2
61982: NEG
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: LD_INT 1
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 0
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 2
62011: PUSH
62012: LD_INT 1
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62033: LD_ADDR_VAR 0 49
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 0
62050: PUSH
62051: LD_INT 1
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: PUSH
62072: LD_INT 1
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 0
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 1
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: LD_INT 2
62125: PUSH
62126: LD_INT 0
62128: PUSH
62129: EMPTY
62130: LIST
62131: LIST
62132: PUSH
62133: LD_INT 2
62135: PUSH
62136: LD_INT 1
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: PUSH
62146: LD_INT 2
62148: PUSH
62149: EMPTY
62150: LIST
62151: LIST
62152: PUSH
62153: LD_INT 1
62155: PUSH
62156: LD_INT 2
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62177: LD_ADDR_VAR 0 50
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 0
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: LD_INT 0
62225: PUSH
62226: LD_INT 1
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 1
62235: NEG
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 1
62246: NEG
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 2
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: LD_INT 2
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 2
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 0
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: EMPTY
62293: LIST
62294: LIST
62295: PUSH
62296: LD_INT 1
62298: NEG
62299: PUSH
62300: LD_INT 1
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62321: LD_ADDR_VAR 0 51
62325: PUSH
62326: LD_INT 0
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 0
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 1
62379: NEG
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: EMPTY
62385: LIST
62386: LIST
62387: PUSH
62388: LD_INT 1
62390: NEG
62391: PUSH
62392: LD_INT 1
62394: NEG
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 1
62402: PUSH
62403: LD_INT 2
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: NEG
62434: PUSH
62435: LD_INT 0
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 2
62444: NEG
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62468: LD_ADDR_VAR 0 52
62472: PUSH
62473: LD_INT 0
62475: PUSH
62476: LD_INT 0
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 1
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: LD_INT 0
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: LD_INT 1
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 1
62519: PUSH
62520: EMPTY
62521: LIST
62522: LIST
62523: PUSH
62524: LD_INT 1
62526: NEG
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 2
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: EMPTY
62602: LIST
62603: LIST
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62619: LD_ADDR_VAR 0 53
62623: PUSH
62624: LD_INT 0
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: EMPTY
62642: LIST
62643: LIST
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 1
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 1
62688: NEG
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: NEG
62701: PUSH
62702: LD_INT 2
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 2
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: LD_INT 0
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 1
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 1
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 0
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 1
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 0
62799: PUSH
62800: EMPTY
62801: LIST
62802: LIST
62803: PUSH
62804: LD_INT 2
62806: NEG
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: NEG
62819: PUSH
62820: LD_INT 2
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: EMPTY
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62849: LD_ADDR_VAR 0 54
62853: PUSH
62854: LD_INT 0
62856: PUSH
62857: LD_INT 0
62859: PUSH
62860: EMPTY
62861: LIST
62862: LIST
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 1
62869: NEG
62870: PUSH
62871: EMPTY
62872: LIST
62873: LIST
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: LD_INT 0
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 0
62942: PUSH
62943: LD_INT 2
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: LD_INT 2
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 1
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 0
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 2
63036: NEG
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 2
63048: NEG
63049: PUSH
63050: LD_INT 2
63052: NEG
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63079: LD_ADDR_VAR 0 55
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 0
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 1
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: LD_INT 0
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 1
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 0
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 1
63148: NEG
63149: PUSH
63150: LD_INT 1
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: LD_INT 2
63164: NEG
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 0
63172: PUSH
63173: LD_INT 2
63175: NEG
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: LD_INT 0
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 1
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 0
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: LD_INT 1
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 0
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 2
63266: NEG
63267: PUSH
63268: LD_INT 1
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 2
63278: NEG
63279: PUSH
63280: LD_INT 2
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: LIST
63296: LIST
63297: LIST
63298: LIST
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63309: LD_ADDR_VAR 0 56
63313: PUSH
63314: LD_INT 0
63316: PUSH
63317: LD_INT 0
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 1
63329: NEG
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 1
63337: PUSH
63338: LD_INT 0
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 1
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 0
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 1
63378: NEG
63379: PUSH
63380: LD_INT 1
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: LD_INT 2
63394: NEG
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 0
63402: PUSH
63403: LD_INT 2
63405: NEG
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: PUSH
63425: LD_INT 0
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 2
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 0
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 2
63485: NEG
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 2
63496: NEG
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 2
63508: NEG
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63539: LD_ADDR_VAR 0 57
63543: PUSH
63544: LD_INT 0
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: LD_INT 1
63567: PUSH
63568: LD_INT 0
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 1
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: LD_INT 2
63624: NEG
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 0
63632: PUSH
63633: LD_INT 2
63635: NEG
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 2
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 2
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 2
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 1
63684: PUSH
63685: LD_INT 2
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: PUSH
63698: EMPTY
63699: LIST
63700: LIST
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: LD_INT 1
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: LD_INT 2
63715: NEG
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: NEG
63727: PUSH
63728: LD_INT 1
63730: NEG
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 2
63738: NEG
63739: PUSH
63740: LD_INT 2
63742: NEG
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63769: LD_ADDR_VAR 0 58
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: LD_INT 0
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 0
63786: PUSH
63787: LD_INT 1
63789: NEG
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 1
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 1
63827: NEG
63828: PUSH
63829: LD_INT 0
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 1
63838: NEG
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: LD_INT 2
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 0
63862: PUSH
63863: LD_INT 2
63865: NEG
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: LD_INT 2
63884: PUSH
63885: LD_INT 0
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: PUSH
63905: LD_INT 2
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 2
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: LD_INT 2
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 2
63945: NEG
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: EMPTY
63951: LIST
63952: LIST
63953: PUSH
63954: LD_INT 2
63956: NEG
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 2
63968: NEG
63969: PUSH
63970: LD_INT 2
63972: NEG
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63999: LD_ADDR_VAR 0 59
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 0
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 1
64019: NEG
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 0
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 0
64047: PUSH
64048: LD_INT 1
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: NEG
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 1
64068: NEG
64069: PUSH
64070: LD_INT 1
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64087: LD_ADDR_VAR 0 60
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64175: LD_ADDR_VAR 0 61
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 1
64233: NEG
64234: PUSH
64235: LD_INT 0
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: LD_INT 1
64248: NEG
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: LIST
64258: LIST
64259: LIST
64260: LIST
64261: LIST
64262: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64263: LD_ADDR_VAR 0 62
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 0
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: NEG
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 1
64291: PUSH
64292: LD_INT 0
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: EMPTY
64316: LIST
64317: LIST
64318: PUSH
64319: LD_INT 1
64321: NEG
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: EMPTY
64327: LIST
64328: LIST
64329: PUSH
64330: LD_INT 1
64332: NEG
64333: PUSH
64334: LD_INT 1
64336: NEG
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64351: LD_ADDR_VAR 0 63
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 1
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 1
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: LD_INT 1
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 0
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 1
64409: NEG
64410: PUSH
64411: LD_INT 0
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 1
64420: NEG
64421: PUSH
64422: LD_INT 1
64424: NEG
64425: PUSH
64426: EMPTY
64427: LIST
64428: LIST
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64439: LD_ADDR_VAR 0 64
64443: PUSH
64444: LD_INT 0
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 1
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: EMPTY
64472: LIST
64473: LIST
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: LD_INT 1
64497: NEG
64498: PUSH
64499: LD_INT 0
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 1
64508: NEG
64509: PUSH
64510: LD_INT 1
64512: NEG
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: LIST
64522: LIST
64523: LIST
64524: LIST
64525: LIST
64526: ST_TO_ADDR
// end ; 1 :
64527: GO 70424
64529: LD_INT 1
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64537
64535: GO 67160
64537: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64538: LD_ADDR_VAR 0 11
64542: PUSH
64543: LD_INT 1
64545: NEG
64546: PUSH
64547: LD_INT 3
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 3
64560: NEG
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: LIST
64581: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64582: LD_ADDR_VAR 0 12
64586: PUSH
64587: LD_INT 2
64589: PUSH
64590: LD_INT 1
64592: NEG
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_INT 3
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 3
64610: PUSH
64611: LD_INT 1
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64623: LD_ADDR_VAR 0 13
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: LD_INT 2
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: PUSH
64638: LD_INT 3
64640: PUSH
64641: LD_INT 3
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 2
64650: PUSH
64651: LD_INT 3
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: LIST
64662: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64663: LD_ADDR_VAR 0 14
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: LD_INT 3
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: LD_INT 3
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: PUSH
64692: LD_INT 2
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64704: LD_ADDR_VAR 0 15
64708: PUSH
64709: LD_INT 2
64711: NEG
64712: PUSH
64713: LD_INT 1
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 3
64722: NEG
64723: PUSH
64724: LD_INT 0
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 3
64733: NEG
64734: PUSH
64735: LD_INT 1
64737: NEG
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: LIST
64747: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64748: LD_ADDR_VAR 0 16
64752: PUSH
64753: LD_INT 2
64755: NEG
64756: PUSH
64757: LD_INT 3
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: LD_INT 3
64767: NEG
64768: PUSH
64769: LD_INT 2
64771: NEG
64772: PUSH
64773: EMPTY
64774: LIST
64775: LIST
64776: PUSH
64777: LD_INT 3
64779: NEG
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: LIST
64793: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64794: LD_ADDR_VAR 0 17
64798: PUSH
64799: LD_INT 1
64801: NEG
64802: PUSH
64803: LD_INT 3
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 0
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 1
64824: PUSH
64825: LD_INT 2
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: LIST
64837: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64838: LD_ADDR_VAR 0 18
64842: PUSH
64843: LD_INT 2
64845: PUSH
64846: LD_INT 1
64848: NEG
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: LD_INT 0
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: LD_INT 3
64866: PUSH
64867: LD_INT 1
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: LIST
64878: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64879: LD_ADDR_VAR 0 19
64883: PUSH
64884: LD_INT 3
64886: PUSH
64887: LD_INT 2
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 3
64896: PUSH
64897: LD_INT 3
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 2
64906: PUSH
64907: LD_INT 3
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: LIST
64918: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64919: LD_ADDR_VAR 0 20
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: LD_INT 3
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: LD_INT 3
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: LIST
64959: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64960: LD_ADDR_VAR 0 21
64964: PUSH
64965: LD_INT 2
64967: NEG
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PUSH
64976: LD_INT 3
64978: NEG
64979: PUSH
64980: LD_INT 0
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 3
64989: NEG
64990: PUSH
64991: LD_INT 1
64993: NEG
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65004: LD_ADDR_VAR 0 22
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: LD_INT 3
65015: NEG
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 3
65023: NEG
65024: PUSH
65025: LD_INT 2
65027: NEG
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 3
65035: NEG
65036: PUSH
65037: LD_INT 3
65039: NEG
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: LIST
65049: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65050: LD_ADDR_VAR 0 23
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: LD_INT 3
65060: NEG
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 1
65068: NEG
65069: PUSH
65070: LD_INT 4
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: LIST
65093: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65094: LD_ADDR_VAR 0 24
65098: PUSH
65099: LD_INT 3
65101: PUSH
65102: LD_INT 0
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 3
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 4
65122: PUSH
65123: LD_INT 1
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: EMPTY
65131: LIST
65132: LIST
65133: LIST
65134: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65135: LD_ADDR_VAR 0 25
65139: PUSH
65140: LD_INT 3
65142: PUSH
65143: LD_INT 3
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 4
65152: PUSH
65153: LD_INT 3
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 3
65162: PUSH
65163: LD_INT 4
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: LIST
65174: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65175: LD_ADDR_VAR 0 26
65179: PUSH
65180: LD_INT 0
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: LD_INT 4
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: LD_INT 3
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: LIST
65215: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65216: LD_ADDR_VAR 0 27
65220: PUSH
65221: LD_INT 3
65223: NEG
65224: PUSH
65225: LD_INT 0
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 3
65234: NEG
65235: PUSH
65236: LD_INT 1
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 4
65245: NEG
65246: PUSH
65247: LD_INT 1
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: LIST
65259: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65260: LD_ADDR_VAR 0 28
65264: PUSH
65265: LD_INT 3
65267: NEG
65268: PUSH
65269: LD_INT 3
65271: NEG
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 3
65279: NEG
65280: PUSH
65281: LD_INT 4
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 4
65291: NEG
65292: PUSH
65293: LD_INT 3
65295: NEG
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: LIST
65305: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65306: LD_ADDR_VAR 0 29
65310: PUSH
65311: LD_INT 1
65313: NEG
65314: PUSH
65315: LD_INT 3
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: LD_INT 3
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 1
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: PUSH
65345: LD_INT 1
65347: NEG
65348: PUSH
65349: LD_INT 4
65351: NEG
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 0
65359: PUSH
65360: LD_INT 4
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: PUSH
65371: LD_INT 3
65373: NEG
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: LD_INT 5
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: LD_INT 5
65396: NEG
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: PUSH
65405: LD_INT 4
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: LD_INT 6
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: LD_INT 6
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: LD_INT 5
65441: NEG
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65461: LD_ADDR_VAR 0 30
65465: PUSH
65466: LD_INT 2
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 3
65479: PUSH
65480: LD_INT 0
65482: PUSH
65483: EMPTY
65484: LIST
65485: LIST
65486: PUSH
65487: LD_INT 3
65489: PUSH
65490: LD_INT 1
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 3
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: LD_INT 4
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 4
65520: PUSH
65521: LD_INT 1
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: LD_INT 1
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 5
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 5
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 5
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 6
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 6
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: LIST
65595: LIST
65596: LIST
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65604: LD_ADDR_VAR 0 31
65608: PUSH
65609: LD_INT 3
65611: PUSH
65612: LD_INT 2
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 3
65621: PUSH
65622: LD_INT 3
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 2
65631: PUSH
65632: LD_INT 3
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 4
65641: PUSH
65642: LD_INT 3
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 4
65651: PUSH
65652: LD_INT 4
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 5
65671: PUSH
65672: LD_INT 4
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 5
65681: PUSH
65682: LD_INT 5
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: LD_INT 4
65691: PUSH
65692: LD_INT 5
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: PUSH
65699: LD_INT 6
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 6
65711: PUSH
65712: LD_INT 6
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: PUSH
65719: LD_INT 5
65721: PUSH
65722: LD_INT 6
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65743: LD_ADDR_VAR 0 32
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 3
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: NEG
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: PUSH
65782: LD_INT 4
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 0
65791: PUSH
65792: LD_INT 4
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: LD_INT 3
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 5
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 5
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: LD_INT 4
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 1
65843: PUSH
65844: LD_INT 6
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 6
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 5
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65886: LD_ADDR_VAR 0 33
65890: PUSH
65891: LD_INT 2
65893: NEG
65894: PUSH
65895: LD_INT 1
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: LD_INT 0
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 3
65915: NEG
65916: PUSH
65917: LD_INT 1
65919: NEG
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: LD_INT 1
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 4
65949: NEG
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 4
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 5
65972: NEG
65973: PUSH
65974: LD_INT 0
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 5
65983: NEG
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 5
65995: NEG
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 6
66006: NEG
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 6
66017: NEG
66018: PUSH
66019: LD_INT 1
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66041: LD_ADDR_VAR 0 34
66045: PUSH
66046: LD_INT 2
66048: NEG
66049: PUSH
66050: LD_INT 3
66052: NEG
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 3
66060: NEG
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 3
66072: NEG
66073: PUSH
66074: LD_INT 3
66076: NEG
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 3
66084: NEG
66085: PUSH
66086: LD_INT 4
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 4
66096: NEG
66097: PUSH
66098: LD_INT 3
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 4
66108: NEG
66109: PUSH
66110: LD_INT 4
66112: NEG
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 4
66120: NEG
66121: PUSH
66122: LD_INT 5
66124: NEG
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 5
66132: NEG
66133: PUSH
66134: LD_INT 4
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 5
66144: NEG
66145: PUSH
66146: LD_INT 5
66148: NEG
66149: PUSH
66150: EMPTY
66151: LIST
66152: LIST
66153: PUSH
66154: LD_INT 5
66156: NEG
66157: PUSH
66158: LD_INT 6
66160: NEG
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 6
66168: NEG
66169: PUSH
66170: LD_INT 5
66172: NEG
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 6
66180: NEG
66181: PUSH
66182: LD_INT 6
66184: NEG
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66204: LD_ADDR_VAR 0 41
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: LD_INT 2
66214: NEG
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 1
66222: NEG
66223: PUSH
66224: LD_INT 3
66226: NEG
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: LIST
66247: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66248: LD_ADDR_VAR 0 42
66252: PUSH
66253: LD_INT 2
66255: PUSH
66256: LD_INT 0
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: LD_INT 1
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 3
66276: PUSH
66277: LD_INT 1
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: EMPTY
66285: LIST
66286: LIST
66287: LIST
66288: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66289: LD_ADDR_VAR 0 43
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: LD_INT 2
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 3
66306: PUSH
66307: LD_INT 2
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 2
66316: PUSH
66317: LD_INT 3
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: LIST
66328: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66329: LD_ADDR_VAR 0 44
66333: PUSH
66334: LD_INT 0
66336: PUSH
66337: LD_INT 2
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 1
66346: PUSH
66347: LD_INT 3
66349: PUSH
66350: EMPTY
66351: LIST
66352: LIST
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: LD_INT 2
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: LIST
66369: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66370: LD_ADDR_VAR 0 45
66374: PUSH
66375: LD_INT 2
66377: NEG
66378: PUSH
66379: LD_INT 0
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 2
66388: NEG
66389: PUSH
66390: LD_INT 1
66392: PUSH
66393: EMPTY
66394: LIST
66395: LIST
66396: PUSH
66397: LD_INT 3
66399: NEG
66400: PUSH
66401: LD_INT 1
66403: NEG
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: LIST
66413: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66414: LD_ADDR_VAR 0 46
66418: PUSH
66419: LD_INT 2
66421: NEG
66422: PUSH
66423: LD_INT 2
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: NEG
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 3
66445: NEG
66446: PUSH
66447: LD_INT 2
66449: NEG
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: LIST
66459: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66460: LD_ADDR_VAR 0 47
66464: PUSH
66465: LD_INT 2
66467: NEG
66468: PUSH
66469: LD_INT 3
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 1
66479: NEG
66480: PUSH
66481: LD_INT 3
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66493: LD_ADDR_VAR 0 48
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 2
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66524: LD_ADDR_VAR 0 49
66528: PUSH
66529: LD_INT 3
66531: PUSH
66532: LD_INT 1
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 3
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: EMPTY
66550: LIST
66551: LIST
66552: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66553: LD_ADDR_VAR 0 50
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 1
66570: PUSH
66571: LD_INT 3
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66582: LD_ADDR_VAR 0 51
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: LD_INT 2
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: LD_INT 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66613: LD_ADDR_VAR 0 52
66617: PUSH
66618: LD_INT 3
66620: NEG
66621: PUSH
66622: LD_INT 1
66624: NEG
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 3
66632: NEG
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66646: LD_ADDR_VAR 0 53
66650: PUSH
66651: LD_INT 1
66653: NEG
66654: PUSH
66655: LD_INT 3
66657: NEG
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 3
66668: NEG
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: LD_INT 2
66679: NEG
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: LIST
66689: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66690: LD_ADDR_VAR 0 54
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 3
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 3
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: EMPTY
66723: LIST
66724: LIST
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: LIST
66730: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66731: LD_ADDR_VAR 0 55
66735: PUSH
66736: LD_INT 3
66738: PUSH
66739: LD_INT 2
66741: PUSH
66742: EMPTY
66743: LIST
66744: LIST
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 3
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: LIST
66770: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66771: LD_ADDR_VAR 0 56
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 0
66788: PUSH
66789: LD_INT 3
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 1
66798: NEG
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66812: LD_ADDR_VAR 0 57
66816: PUSH
66817: LD_INT 2
66819: NEG
66820: PUSH
66821: LD_INT 1
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 3
66830: NEG
66831: PUSH
66832: LD_INT 0
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 3
66841: NEG
66842: PUSH
66843: LD_INT 1
66845: NEG
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66856: LD_ADDR_VAR 0 58
66860: PUSH
66861: LD_INT 2
66863: NEG
66864: PUSH
66865: LD_INT 3
66867: NEG
66868: PUSH
66869: EMPTY
66870: LIST
66871: LIST
66872: PUSH
66873: LD_INT 3
66875: NEG
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 3
66887: NEG
66888: PUSH
66889: LD_INT 3
66891: NEG
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: EMPTY
66898: LIST
66899: LIST
66900: LIST
66901: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66902: LD_ADDR_VAR 0 59
66906: PUSH
66907: LD_INT 1
66909: NEG
66910: PUSH
66911: LD_INT 2
66913: NEG
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: LD_INT 0
66921: PUSH
66922: LD_INT 2
66924: NEG
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: LD_INT 1
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66946: LD_ADDR_VAR 0 60
66950: PUSH
66951: LD_INT 1
66953: PUSH
66954: LD_INT 1
66956: NEG
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 2
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 2
66974: PUSH
66975: LD_INT 1
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66987: LD_ADDR_VAR 0 61
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: LIST
67026: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67027: LD_ADDR_VAR 0 62
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: LD_INT 2
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: LD_INT 2
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: PUSH
67052: LD_INT 1
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: PUSH
67059: EMPTY
67060: LIST
67061: LIST
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67068: LD_ADDR_VAR 0 63
67072: PUSH
67073: LD_INT 1
67075: NEG
67076: PUSH
67077: LD_INT 1
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 2
67086: NEG
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 2
67097: NEG
67098: PUSH
67099: LD_INT 1
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: LIST
67111: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67112: LD_ADDR_VAR 0 64
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: LD_INT 2
67123: NEG
67124: PUSH
67125: EMPTY
67126: LIST
67127: LIST
67128: PUSH
67129: LD_INT 2
67131: NEG
67132: PUSH
67133: LD_INT 1
67135: NEG
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 2
67143: NEG
67144: PUSH
67145: LD_INT 2
67147: NEG
67148: PUSH
67149: EMPTY
67150: LIST
67151: LIST
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: LIST
67157: ST_TO_ADDR
// end ; 2 :
67158: GO 70424
67160: LD_INT 2
67162: DOUBLE
67163: EQUAL
67164: IFTRUE 67168
67166: GO 70423
67168: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67169: LD_ADDR_VAR 0 29
67173: PUSH
67174: LD_INT 4
67176: PUSH
67177: LD_INT 0
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: LD_INT 1
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 5
67197: PUSH
67198: LD_INT 0
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 5
67207: PUSH
67208: LD_INT 1
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: LD_INT 1
67220: PUSH
67221: EMPTY
67222: LIST
67223: LIST
67224: PUSH
67225: LD_INT 3
67227: PUSH
67228: LD_INT 0
67230: PUSH
67231: EMPTY
67232: LIST
67233: LIST
67234: PUSH
67235: LD_INT 3
67237: PUSH
67238: LD_INT 1
67240: NEG
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 3
67248: PUSH
67249: LD_INT 2
67251: NEG
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 5
67259: PUSH
67260: LD_INT 2
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 3
67269: PUSH
67270: LD_INT 3
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 3
67279: PUSH
67280: LD_INT 2
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 4
67289: PUSH
67290: LD_INT 3
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 4
67299: PUSH
67300: LD_INT 4
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: PUSH
67310: LD_INT 4
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: LD_INT 2
67319: PUSH
67320: LD_INT 3
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 2
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 4
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 2
67349: PUSH
67350: LD_INT 4
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 0
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 0
67369: PUSH
67370: LD_INT 3
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 1
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: PUSH
67390: LD_INT 5
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 0
67399: PUSH
67400: LD_INT 5
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 1
67409: NEG
67410: PUSH
67411: LD_INT 4
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 1
67420: NEG
67421: PUSH
67422: LD_INT 3
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 2
67431: PUSH
67432: LD_INT 5
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 2
67441: NEG
67442: PUSH
67443: LD_INT 3
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: NEG
67453: PUSH
67454: LD_INT 0
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 3
67463: NEG
67464: PUSH
67465: LD_INT 1
67467: NEG
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: LD_INT 0
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 2
67486: NEG
67487: PUSH
67488: LD_INT 1
67490: PUSH
67491: EMPTY
67492: LIST
67493: LIST
67494: PUSH
67495: LD_INT 3
67497: NEG
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: LD_INT 4
67508: NEG
67509: PUSH
67510: LD_INT 0
67512: PUSH
67513: EMPTY
67514: LIST
67515: LIST
67516: PUSH
67517: LD_INT 4
67519: NEG
67520: PUSH
67521: LD_INT 1
67523: NEG
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 4
67531: NEG
67532: PUSH
67533: LD_INT 2
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: LD_INT 2
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 4
67554: NEG
67555: PUSH
67556: LD_INT 4
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 4
67566: NEG
67567: PUSH
67568: LD_INT 5
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: NEG
67579: PUSH
67580: LD_INT 4
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 3
67590: NEG
67591: PUSH
67592: LD_INT 3
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 4
67602: NEG
67603: PUSH
67604: LD_INT 3
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 5
67614: NEG
67615: PUSH
67616: LD_INT 4
67618: NEG
67619: PUSH
67620: EMPTY
67621: LIST
67622: LIST
67623: PUSH
67624: LD_INT 5
67626: NEG
67627: PUSH
67628: LD_INT 5
67630: NEG
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 3
67638: NEG
67639: PUSH
67640: LD_INT 5
67642: NEG
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 5
67650: NEG
67651: PUSH
67652: LD_INT 3
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: LIST
67664: LIST
67665: LIST
67666: LIST
67667: LIST
67668: LIST
67669: LIST
67670: LIST
67671: LIST
67672: LIST
67673: LIST
67674: LIST
67675: LIST
67676: LIST
67677: LIST
67678: LIST
67679: LIST
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: LIST
67703: LIST
67704: LIST
67705: LIST
67706: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67707: LD_ADDR_VAR 0 30
67711: PUSH
67712: LD_INT 4
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 4
67724: PUSH
67725: LD_INT 3
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 5
67734: PUSH
67735: LD_INT 4
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 5
67744: PUSH
67745: LD_INT 5
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 4
67754: PUSH
67755: LD_INT 5
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: LD_INT 3
67764: PUSH
67765: LD_INT 4
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 3
67774: PUSH
67775: LD_INT 3
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 5
67784: PUSH
67785: LD_INT 3
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: PUSH
67795: LD_INT 5
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 0
67804: PUSH
67805: LD_INT 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: LD_INT 2
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: LD_INT 3
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: PUSH
67832: LD_INT 1
67834: PUSH
67835: LD_INT 4
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: PUSH
67842: LD_INT 0
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 1
67865: NEG
67866: PUSH
67867: LD_INT 2
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: LD_INT 4
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: NEG
67887: PUSH
67888: LD_INT 2
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 4
67897: NEG
67898: PUSH
67899: LD_INT 0
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 4
67908: NEG
67909: PUSH
67910: LD_INT 1
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: NEG
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: NEG
67943: PUSH
67944: LD_INT 1
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 5
67953: NEG
67954: PUSH
67955: LD_INT 0
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: PUSH
67962: LD_INT 5
67964: NEG
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: PUSH
67974: LD_INT 5
67976: NEG
67977: PUSH
67978: LD_INT 2
67980: NEG
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 3
67988: NEG
67989: PUSH
67990: LD_INT 2
67992: PUSH
67993: EMPTY
67994: LIST
67995: LIST
67996: PUSH
67997: LD_INT 3
67999: NEG
68000: PUSH
68001: LD_INT 3
68003: NEG
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: NEG
68012: PUSH
68013: LD_INT 4
68015: NEG
68016: PUSH
68017: EMPTY
68018: LIST
68019: LIST
68020: PUSH
68021: LD_INT 2
68023: NEG
68024: PUSH
68025: LD_INT 3
68027: NEG
68028: PUSH
68029: EMPTY
68030: LIST
68031: LIST
68032: PUSH
68033: LD_INT 2
68035: NEG
68036: PUSH
68037: LD_INT 2
68039: NEG
68040: PUSH
68041: EMPTY
68042: LIST
68043: LIST
68044: PUSH
68045: LD_INT 3
68047: NEG
68048: PUSH
68049: LD_INT 2
68051: NEG
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 4
68059: NEG
68060: PUSH
68061: LD_INT 3
68063: NEG
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 4
68071: NEG
68072: PUSH
68073: LD_INT 4
68075: NEG
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: PUSH
68081: LD_INT 2
68083: NEG
68084: PUSH
68085: LD_INT 4
68087: NEG
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 4
68095: NEG
68096: PUSH
68097: LD_INT 2
68099: NEG
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 0
68107: PUSH
68108: LD_INT 4
68110: NEG
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 5
68121: NEG
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 1
68129: PUSH
68130: LD_INT 4
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 3
68143: NEG
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 0
68151: PUSH
68152: LD_INT 3
68154: NEG
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: PUSH
68160: LD_INT 1
68162: NEG
68163: PUSH
68164: LD_INT 4
68166: NEG
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: LD_INT 5
68178: NEG
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: PUSH
68184: LD_INT 2
68186: PUSH
68187: LD_INT 3
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 2
68197: NEG
68198: PUSH
68199: LD_INT 5
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: EMPTY
68208: LIST
68209: LIST
68210: LIST
68211: LIST
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: LIST
68217: LIST
68218: LIST
68219: LIST
68220: LIST
68221: LIST
68222: LIST
68223: LIST
68224: LIST
68225: LIST
68226: LIST
68227: LIST
68228: LIST
68229: LIST
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: LIST
68238: LIST
68239: LIST
68240: LIST
68241: LIST
68242: LIST
68243: LIST
68244: LIST
68245: LIST
68246: LIST
68247: LIST
68248: LIST
68249: LIST
68250: LIST
68251: LIST
68252: LIST
68253: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68254: LD_ADDR_VAR 0 31
68258: PUSH
68259: LD_INT 0
68261: PUSH
68262: LD_INT 4
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 0
68271: PUSH
68272: LD_INT 3
68274: PUSH
68275: EMPTY
68276: LIST
68277: LIST
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: LD_INT 4
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: LD_INT 5
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 0
68301: PUSH
68302: LD_INT 5
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 1
68311: NEG
68312: PUSH
68313: LD_INT 4
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 1
68322: NEG
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 2
68333: PUSH
68334: LD_INT 5
68336: PUSH
68337: EMPTY
68338: LIST
68339: LIST
68340: PUSH
68341: LD_INT 2
68343: NEG
68344: PUSH
68345: LD_INT 3
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 2
68377: NEG
68378: PUSH
68379: LD_INT 0
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: LD_INT 1
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 3
68399: NEG
68400: PUSH
68401: LD_INT 1
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 4
68421: NEG
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 4
68433: NEG
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 2
68445: NEG
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 4
68456: NEG
68457: PUSH
68458: LD_INT 4
68460: NEG
68461: PUSH
68462: EMPTY
68463: LIST
68464: LIST
68465: PUSH
68466: LD_INT 4
68468: NEG
68469: PUSH
68470: LD_INT 5
68472: NEG
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 3
68480: NEG
68481: PUSH
68482: LD_INT 4
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 3
68492: NEG
68493: PUSH
68494: LD_INT 3
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 4
68504: NEG
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 5
68516: NEG
68517: PUSH
68518: LD_INT 4
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 5
68528: NEG
68529: PUSH
68530: LD_INT 5
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: LD_INT 5
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 5
68552: NEG
68553: PUSH
68554: LD_INT 3
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 3
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 0
68575: PUSH
68576: LD_INT 4
68578: NEG
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: PUSH
68584: LD_INT 1
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: PUSH
68595: LD_INT 1
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 0
68608: PUSH
68609: LD_INT 2
68611: NEG
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 1
68619: NEG
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 1
68631: NEG
68632: PUSH
68633: LD_INT 4
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 2
68654: NEG
68655: PUSH
68656: LD_INT 4
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 4
68666: PUSH
68667: LD_INT 0
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 4
68676: PUSH
68677: LD_INT 1
68679: NEG
68680: PUSH
68681: EMPTY
68682: LIST
68683: LIST
68684: PUSH
68685: LD_INT 5
68687: PUSH
68688: LD_INT 0
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 5
68697: PUSH
68698: LD_INT 1
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 4
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 3
68738: PUSH
68739: LD_INT 2
68741: NEG
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: LD_INT 5
68749: PUSH
68750: LD_INT 2
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: LIST
68781: LIST
68782: LIST
68783: LIST
68784: LIST
68785: LIST
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68804: LD_ADDR_VAR 0 32
68808: PUSH
68809: LD_INT 4
68811: NEG
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 4
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 3
68834: NEG
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 3
68845: NEG
68846: PUSH
68847: LD_INT 1
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: LD_INT 4
68856: NEG
68857: PUSH
68858: LD_INT 1
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 5
68867: NEG
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 5
68878: NEG
68879: PUSH
68880: LD_INT 1
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 5
68890: NEG
68891: PUSH
68892: LD_INT 2
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: PUSH
68911: LD_INT 3
68913: NEG
68914: PUSH
68915: LD_INT 3
68917: NEG
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 3
68925: NEG
68926: PUSH
68927: LD_INT 4
68929: NEG
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 2
68937: NEG
68938: PUSH
68939: LD_INT 3
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 2
68949: NEG
68950: PUSH
68951: LD_INT 2
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 3
68961: NEG
68962: PUSH
68963: LD_INT 2
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 4
68973: NEG
68974: PUSH
68975: LD_INT 3
68977: NEG
68978: PUSH
68979: EMPTY
68980: LIST
68981: LIST
68982: PUSH
68983: LD_INT 4
68985: NEG
68986: PUSH
68987: LD_INT 4
68989: NEG
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 2
68997: NEG
68998: PUSH
68999: LD_INT 4
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 4
69009: NEG
69010: PUSH
69011: LD_INT 2
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 0
69021: PUSH
69022: LD_INT 4
69024: NEG
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: LD_INT 5
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: LD_INT 4
69046: NEG
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: PUSH
69052: LD_INT 1
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 1
69076: NEG
69077: PUSH
69078: LD_INT 4
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 1
69088: NEG
69089: PUSH
69090: LD_INT 5
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 2
69100: PUSH
69101: LD_INT 3
69103: NEG
69104: PUSH
69105: EMPTY
69106: LIST
69107: LIST
69108: PUSH
69109: LD_INT 2
69111: NEG
69112: PUSH
69113: LD_INT 5
69115: NEG
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 3
69123: PUSH
69124: LD_INT 0
69126: PUSH
69127: EMPTY
69128: LIST
69129: LIST
69130: PUSH
69131: LD_INT 3
69133: PUSH
69134: LD_INT 1
69136: NEG
69137: PUSH
69138: EMPTY
69139: LIST
69140: LIST
69141: PUSH
69142: LD_INT 4
69144: PUSH
69145: LD_INT 0
69147: PUSH
69148: EMPTY
69149: LIST
69150: LIST
69151: PUSH
69152: LD_INT 4
69154: PUSH
69155: LD_INT 1
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 3
69164: PUSH
69165: LD_INT 1
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 2
69174: PUSH
69175: LD_INT 0
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 2
69184: PUSH
69185: LD_INT 1
69187: NEG
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: PUSH
69193: LD_INT 2
69195: PUSH
69196: LD_INT 2
69198: NEG
69199: PUSH
69200: EMPTY
69201: LIST
69202: LIST
69203: PUSH
69204: LD_INT 4
69206: PUSH
69207: LD_INT 2
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 4
69216: PUSH
69217: LD_INT 4
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: PUSH
69224: LD_INT 4
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 5
69236: PUSH
69237: LD_INT 4
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 5
69246: PUSH
69247: LD_INT 5
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: PUSH
69257: LD_INT 5
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 3
69266: PUSH
69267: LD_INT 4
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 3
69276: PUSH
69277: LD_INT 3
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 5
69286: PUSH
69287: LD_INT 3
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: PUSH
69297: LD_INT 5
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: LIST
69324: LIST
69325: LIST
69326: LIST
69327: LIST
69328: LIST
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69351: LD_ADDR_VAR 0 33
69355: PUSH
69356: LD_INT 4
69358: NEG
69359: PUSH
69360: LD_INT 4
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 4
69370: NEG
69371: PUSH
69372: LD_INT 5
69374: NEG
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: LD_INT 4
69386: NEG
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 3
69394: NEG
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 4
69406: NEG
69407: PUSH
69408: LD_INT 3
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 5
69418: NEG
69419: PUSH
69420: LD_INT 4
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 5
69430: NEG
69431: PUSH
69432: LD_INT 5
69434: NEG
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 3
69442: NEG
69443: PUSH
69444: LD_INT 5
69446: NEG
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: PUSH
69452: LD_INT 5
69454: NEG
69455: PUSH
69456: LD_INT 3
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 3
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: LD_INT 2
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 1
69521: NEG
69522: PUSH
69523: LD_INT 3
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 1
69533: NEG
69534: PUSH
69535: LD_INT 4
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 2
69548: NEG
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: LD_INT 4
69560: NEG
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: PUSH
69566: LD_INT 4
69568: PUSH
69569: LD_INT 0
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: LD_INT 1
69581: NEG
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 5
69589: PUSH
69590: LD_INT 0
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 5
69599: PUSH
69600: LD_INT 1
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: LD_INT 1
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: LD_INT 0
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 3
69629: PUSH
69630: LD_INT 1
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: LD_INT 2
69643: NEG
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 5
69651: PUSH
69652: LD_INT 2
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: LD_INT 3
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 3
69671: PUSH
69672: LD_INT 2
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: LD_INT 3
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 4
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 4
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 2
69711: PUSH
69712: LD_INT 3
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 2
69721: PUSH
69722: LD_INT 2
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 4
69731: PUSH
69732: LD_INT 2
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: LD_INT 4
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: LD_INT 4
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 0
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 1
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 5
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 0
69791: PUSH
69792: LD_INT 5
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 1
69801: NEG
69802: PUSH
69803: LD_INT 4
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 1
69812: NEG
69813: PUSH
69814: LD_INT 3
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 2
69823: PUSH
69824: LD_INT 5
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 2
69833: NEG
69834: PUSH
69835: LD_INT 3
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: LIST
69882: LIST
69883: LIST
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69889: LD_ADDR_VAR 0 34
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: LD_INT 4
69899: NEG
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: LD_INT 5
69910: NEG
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: LD_INT 4
69921: NEG
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 1
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: PUSH
69938: LD_INT 0
69940: PUSH
69941: LD_INT 3
69943: NEG
69944: PUSH
69945: EMPTY
69946: LIST
69947: LIST
69948: PUSH
69949: LD_INT 1
69951: NEG
69952: PUSH
69953: LD_INT 4
69955: NEG
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: LD_INT 5
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 2
69975: PUSH
69976: LD_INT 3
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 2
69986: NEG
69987: PUSH
69988: LD_INT 5
69990: NEG
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 3
69998: PUSH
69999: LD_INT 0
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: LD_INT 1
70011: NEG
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 4
70019: PUSH
70020: LD_INT 0
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 4
70029: PUSH
70030: LD_INT 1
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 2
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: PUSH
70057: LD_INT 2
70059: PUSH
70060: LD_INT 1
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: LD_INT 2
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 4
70081: PUSH
70082: LD_INT 2
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 4
70091: PUSH
70092: LD_INT 4
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 4
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 5
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 5
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 4
70131: PUSH
70132: LD_INT 5
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 3
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: EMPTY
70146: LIST
70147: LIST
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: EMPTY
70166: LIST
70167: LIST
70168: PUSH
70169: LD_INT 3
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 0
70181: PUSH
70182: LD_INT 3
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 0
70191: PUSH
70192: LD_INT 2
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: LD_INT 3
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: PUSH
70212: LD_INT 4
70214: PUSH
70215: EMPTY
70216: LIST
70217: LIST
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: LD_INT 4
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 1
70231: NEG
70232: PUSH
70233: LD_INT 3
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 1
70242: NEG
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 4
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: NEG
70264: PUSH
70265: LD_INT 2
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 4
70274: NEG
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 4
70285: NEG
70286: PUSH
70287: LD_INT 1
70289: NEG
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 3
70297: NEG
70298: PUSH
70299: LD_INT 0
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: LD_INT 1
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 4
70319: NEG
70320: PUSH
70321: LD_INT 1
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 5
70330: NEG
70331: PUSH
70332: LD_INT 0
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 5
70341: NEG
70342: PUSH
70343: LD_INT 1
70345: NEG
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 5
70353: NEG
70354: PUSH
70355: LD_INT 2
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 3
70365: NEG
70366: PUSH
70367: LD_INT 2
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: LIST
70388: LIST
70389: LIST
70390: LIST
70391: LIST
70392: LIST
70393: LIST
70394: LIST
70395: LIST
70396: LIST
70397: LIST
70398: LIST
70399: LIST
70400: LIST
70401: LIST
70402: LIST
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: ST_TO_ADDR
// end ; end ;
70421: GO 70424
70423: POP
// case btype of b_depot , b_warehouse :
70424: LD_VAR 0 1
70428: PUSH
70429: LD_INT 0
70431: DOUBLE
70432: EQUAL
70433: IFTRUE 70443
70435: LD_INT 1
70437: DOUBLE
70438: EQUAL
70439: IFTRUE 70443
70441: GO 70644
70443: POP
// case nation of nation_american :
70444: LD_VAR 0 5
70448: PUSH
70449: LD_INT 1
70451: DOUBLE
70452: EQUAL
70453: IFTRUE 70457
70455: GO 70513
70457: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70458: LD_ADDR_VAR 0 9
70462: PUSH
70463: LD_VAR 0 11
70467: PUSH
70468: LD_VAR 0 12
70472: PUSH
70473: LD_VAR 0 13
70477: PUSH
70478: LD_VAR 0 14
70482: PUSH
70483: LD_VAR 0 15
70487: PUSH
70488: LD_VAR 0 16
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: PUSH
70501: LD_VAR 0 4
70505: PUSH
70506: LD_INT 1
70508: PLUS
70509: ARRAY
70510: ST_TO_ADDR
70511: GO 70642
70513: LD_INT 2
70515: DOUBLE
70516: EQUAL
70517: IFTRUE 70521
70519: GO 70577
70521: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70522: LD_ADDR_VAR 0 9
70526: PUSH
70527: LD_VAR 0 17
70531: PUSH
70532: LD_VAR 0 18
70536: PUSH
70537: LD_VAR 0 19
70541: PUSH
70542: LD_VAR 0 20
70546: PUSH
70547: LD_VAR 0 21
70551: PUSH
70552: LD_VAR 0 22
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: PUSH
70565: LD_VAR 0 4
70569: PUSH
70570: LD_INT 1
70572: PLUS
70573: ARRAY
70574: ST_TO_ADDR
70575: GO 70642
70577: LD_INT 3
70579: DOUBLE
70580: EQUAL
70581: IFTRUE 70585
70583: GO 70641
70585: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70586: LD_ADDR_VAR 0 9
70590: PUSH
70591: LD_VAR 0 23
70595: PUSH
70596: LD_VAR 0 24
70600: PUSH
70601: LD_VAR 0 25
70605: PUSH
70606: LD_VAR 0 26
70610: PUSH
70611: LD_VAR 0 27
70615: PUSH
70616: LD_VAR 0 28
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: PUSH
70629: LD_VAR 0 4
70633: PUSH
70634: LD_INT 1
70636: PLUS
70637: ARRAY
70638: ST_TO_ADDR
70639: GO 70642
70641: POP
70642: GO 71197
70644: LD_INT 2
70646: DOUBLE
70647: EQUAL
70648: IFTRUE 70658
70650: LD_INT 3
70652: DOUBLE
70653: EQUAL
70654: IFTRUE 70658
70656: GO 70714
70658: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70659: LD_ADDR_VAR 0 9
70663: PUSH
70664: LD_VAR 0 29
70668: PUSH
70669: LD_VAR 0 30
70673: PUSH
70674: LD_VAR 0 31
70678: PUSH
70679: LD_VAR 0 32
70683: PUSH
70684: LD_VAR 0 33
70688: PUSH
70689: LD_VAR 0 34
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: PUSH
70702: LD_VAR 0 4
70706: PUSH
70707: LD_INT 1
70709: PLUS
70710: ARRAY
70711: ST_TO_ADDR
70712: GO 71197
70714: LD_INT 16
70716: DOUBLE
70717: EQUAL
70718: IFTRUE 70776
70720: LD_INT 17
70722: DOUBLE
70723: EQUAL
70724: IFTRUE 70776
70726: LD_INT 18
70728: DOUBLE
70729: EQUAL
70730: IFTRUE 70776
70732: LD_INT 19
70734: DOUBLE
70735: EQUAL
70736: IFTRUE 70776
70738: LD_INT 22
70740: DOUBLE
70741: EQUAL
70742: IFTRUE 70776
70744: LD_INT 20
70746: DOUBLE
70747: EQUAL
70748: IFTRUE 70776
70750: LD_INT 21
70752: DOUBLE
70753: EQUAL
70754: IFTRUE 70776
70756: LD_INT 23
70758: DOUBLE
70759: EQUAL
70760: IFTRUE 70776
70762: LD_INT 24
70764: DOUBLE
70765: EQUAL
70766: IFTRUE 70776
70768: LD_INT 25
70770: DOUBLE
70771: EQUAL
70772: IFTRUE 70776
70774: GO 70832
70776: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70777: LD_ADDR_VAR 0 9
70781: PUSH
70782: LD_VAR 0 35
70786: PUSH
70787: LD_VAR 0 36
70791: PUSH
70792: LD_VAR 0 37
70796: PUSH
70797: LD_VAR 0 38
70801: PUSH
70802: LD_VAR 0 39
70806: PUSH
70807: LD_VAR 0 40
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: PUSH
70820: LD_VAR 0 4
70824: PUSH
70825: LD_INT 1
70827: PLUS
70828: ARRAY
70829: ST_TO_ADDR
70830: GO 71197
70832: LD_INT 6
70834: DOUBLE
70835: EQUAL
70836: IFTRUE 70888
70838: LD_INT 7
70840: DOUBLE
70841: EQUAL
70842: IFTRUE 70888
70844: LD_INT 8
70846: DOUBLE
70847: EQUAL
70848: IFTRUE 70888
70850: LD_INT 13
70852: DOUBLE
70853: EQUAL
70854: IFTRUE 70888
70856: LD_INT 12
70858: DOUBLE
70859: EQUAL
70860: IFTRUE 70888
70862: LD_INT 15
70864: DOUBLE
70865: EQUAL
70866: IFTRUE 70888
70868: LD_INT 11
70870: DOUBLE
70871: EQUAL
70872: IFTRUE 70888
70874: LD_INT 14
70876: DOUBLE
70877: EQUAL
70878: IFTRUE 70888
70880: LD_INT 10
70882: DOUBLE
70883: EQUAL
70884: IFTRUE 70888
70886: GO 70944
70888: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70889: LD_ADDR_VAR 0 9
70893: PUSH
70894: LD_VAR 0 41
70898: PUSH
70899: LD_VAR 0 42
70903: PUSH
70904: LD_VAR 0 43
70908: PUSH
70909: LD_VAR 0 44
70913: PUSH
70914: LD_VAR 0 45
70918: PUSH
70919: LD_VAR 0 46
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: LD_VAR 0 4
70936: PUSH
70937: LD_INT 1
70939: PLUS
70940: ARRAY
70941: ST_TO_ADDR
70942: GO 71197
70944: LD_INT 36
70946: DOUBLE
70947: EQUAL
70948: IFTRUE 70952
70950: GO 71008
70952: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70953: LD_ADDR_VAR 0 9
70957: PUSH
70958: LD_VAR 0 47
70962: PUSH
70963: LD_VAR 0 48
70967: PUSH
70968: LD_VAR 0 49
70972: PUSH
70973: LD_VAR 0 50
70977: PUSH
70978: LD_VAR 0 51
70982: PUSH
70983: LD_VAR 0 52
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: PUSH
70996: LD_VAR 0 4
71000: PUSH
71001: LD_INT 1
71003: PLUS
71004: ARRAY
71005: ST_TO_ADDR
71006: GO 71197
71008: LD_INT 4
71010: DOUBLE
71011: EQUAL
71012: IFTRUE 71034
71014: LD_INT 5
71016: DOUBLE
71017: EQUAL
71018: IFTRUE 71034
71020: LD_INT 34
71022: DOUBLE
71023: EQUAL
71024: IFTRUE 71034
71026: LD_INT 37
71028: DOUBLE
71029: EQUAL
71030: IFTRUE 71034
71032: GO 71090
71034: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71035: LD_ADDR_VAR 0 9
71039: PUSH
71040: LD_VAR 0 53
71044: PUSH
71045: LD_VAR 0 54
71049: PUSH
71050: LD_VAR 0 55
71054: PUSH
71055: LD_VAR 0 56
71059: PUSH
71060: LD_VAR 0 57
71064: PUSH
71065: LD_VAR 0 58
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: LIST
71077: PUSH
71078: LD_VAR 0 4
71082: PUSH
71083: LD_INT 1
71085: PLUS
71086: ARRAY
71087: ST_TO_ADDR
71088: GO 71197
71090: LD_INT 31
71092: DOUBLE
71093: EQUAL
71094: IFTRUE 71140
71096: LD_INT 32
71098: DOUBLE
71099: EQUAL
71100: IFTRUE 71140
71102: LD_INT 33
71104: DOUBLE
71105: EQUAL
71106: IFTRUE 71140
71108: LD_INT 27
71110: DOUBLE
71111: EQUAL
71112: IFTRUE 71140
71114: LD_INT 26
71116: DOUBLE
71117: EQUAL
71118: IFTRUE 71140
71120: LD_INT 28
71122: DOUBLE
71123: EQUAL
71124: IFTRUE 71140
71126: LD_INT 29
71128: DOUBLE
71129: EQUAL
71130: IFTRUE 71140
71132: LD_INT 30
71134: DOUBLE
71135: EQUAL
71136: IFTRUE 71140
71138: GO 71196
71140: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71141: LD_ADDR_VAR 0 9
71145: PUSH
71146: LD_VAR 0 59
71150: PUSH
71151: LD_VAR 0 60
71155: PUSH
71156: LD_VAR 0 61
71160: PUSH
71161: LD_VAR 0 62
71165: PUSH
71166: LD_VAR 0 63
71170: PUSH
71171: LD_VAR 0 64
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: PUSH
71184: LD_VAR 0 4
71188: PUSH
71189: LD_INT 1
71191: PLUS
71192: ARRAY
71193: ST_TO_ADDR
71194: GO 71197
71196: POP
// temp_list2 = [ ] ;
71197: LD_ADDR_VAR 0 10
71201: PUSH
71202: EMPTY
71203: ST_TO_ADDR
// for i in temp_list do
71204: LD_ADDR_VAR 0 8
71208: PUSH
71209: LD_VAR 0 9
71213: PUSH
71214: FOR_IN
71215: IFFALSE 71267
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71217: LD_ADDR_VAR 0 10
71221: PUSH
71222: LD_VAR 0 10
71226: PUSH
71227: LD_VAR 0 8
71231: PUSH
71232: LD_INT 1
71234: ARRAY
71235: PUSH
71236: LD_VAR 0 2
71240: PLUS
71241: PUSH
71242: LD_VAR 0 8
71246: PUSH
71247: LD_INT 2
71249: ARRAY
71250: PUSH
71251: LD_VAR 0 3
71255: PLUS
71256: PUSH
71257: EMPTY
71258: LIST
71259: LIST
71260: PUSH
71261: EMPTY
71262: LIST
71263: ADD
71264: ST_TO_ADDR
71265: GO 71214
71267: POP
71268: POP
// result = temp_list2 ;
71269: LD_ADDR_VAR 0 7
71273: PUSH
71274: LD_VAR 0 10
71278: ST_TO_ADDR
// end ;
71279: LD_VAR 0 7
71283: RET
// export function EnemyInRange ( unit , dist ) ; begin
71284: LD_INT 0
71286: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71287: LD_ADDR_VAR 0 3
71291: PUSH
71292: LD_VAR 0 1
71296: PPUSH
71297: CALL_OW 255
71301: PPUSH
71302: LD_VAR 0 1
71306: PPUSH
71307: CALL_OW 250
71311: PPUSH
71312: LD_VAR 0 1
71316: PPUSH
71317: CALL_OW 251
71321: PPUSH
71322: LD_VAR 0 2
71326: PPUSH
71327: CALL 44680 0 4
71331: PUSH
71332: LD_INT 4
71334: ARRAY
71335: ST_TO_ADDR
// end ;
71336: LD_VAR 0 3
71340: RET
// export function PlayerSeeMe ( unit ) ; begin
71341: LD_INT 0
71343: PPUSH
// result := See ( your_side , unit ) ;
71344: LD_ADDR_VAR 0 2
71348: PUSH
71349: LD_OWVAR 2
71353: PPUSH
71354: LD_VAR 0 1
71358: PPUSH
71359: CALL_OW 292
71363: ST_TO_ADDR
// end ;
71364: LD_VAR 0 2
71368: RET
// export function ReverseDir ( unit ) ; begin
71369: LD_INT 0
71371: PPUSH
// if not unit then
71372: LD_VAR 0 1
71376: NOT
71377: IFFALSE 71381
// exit ;
71379: GO 71404
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71381: LD_ADDR_VAR 0 2
71385: PUSH
71386: LD_VAR 0 1
71390: PPUSH
71391: CALL_OW 254
71395: PUSH
71396: LD_INT 3
71398: PLUS
71399: PUSH
71400: LD_INT 6
71402: MOD
71403: ST_TO_ADDR
// end ;
71404: LD_VAR 0 2
71408: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71409: LD_INT 0
71411: PPUSH
71412: PPUSH
71413: PPUSH
71414: PPUSH
71415: PPUSH
// if not hexes then
71416: LD_VAR 0 2
71420: NOT
71421: IFFALSE 71425
// exit ;
71423: GO 71573
// dist := 9999 ;
71425: LD_ADDR_VAR 0 5
71429: PUSH
71430: LD_INT 9999
71432: ST_TO_ADDR
// for i = 1 to hexes do
71433: LD_ADDR_VAR 0 4
71437: PUSH
71438: DOUBLE
71439: LD_INT 1
71441: DEC
71442: ST_TO_ADDR
71443: LD_VAR 0 2
71447: PUSH
71448: FOR_TO
71449: IFFALSE 71561
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_VAR 0 2
71460: PUSH
71461: LD_VAR 0 4
71465: ARRAY
71466: PUSH
71467: LD_INT 1
71469: ARRAY
71470: PPUSH
71471: LD_VAR 0 2
71475: PUSH
71476: LD_VAR 0 4
71480: ARRAY
71481: PUSH
71482: LD_INT 2
71484: ARRAY
71485: PPUSH
71486: CALL_OW 297
71490: PUSH
71491: LD_VAR 0 5
71495: LESS
71496: IFFALSE 71559
// begin hex := hexes [ i ] ;
71498: LD_ADDR_VAR 0 7
71502: PUSH
71503: LD_VAR 0 2
71507: PUSH
71508: LD_VAR 0 4
71512: ARRAY
71513: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71514: LD_ADDR_VAR 0 5
71518: PUSH
71519: LD_VAR 0 1
71523: PPUSH
71524: LD_VAR 0 2
71528: PUSH
71529: LD_VAR 0 4
71533: ARRAY
71534: PUSH
71535: LD_INT 1
71537: ARRAY
71538: PPUSH
71539: LD_VAR 0 2
71543: PUSH
71544: LD_VAR 0 4
71548: ARRAY
71549: PUSH
71550: LD_INT 2
71552: ARRAY
71553: PPUSH
71554: CALL_OW 297
71558: ST_TO_ADDR
// end ; end ;
71559: GO 71448
71561: POP
71562: POP
// result := hex ;
71563: LD_ADDR_VAR 0 3
71567: PUSH
71568: LD_VAR 0 7
71572: ST_TO_ADDR
// end ;
71573: LD_VAR 0 3
71577: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71578: LD_INT 0
71580: PPUSH
71581: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71582: LD_VAR 0 1
71586: NOT
71587: PUSH
71588: LD_VAR 0 1
71592: PUSH
71593: LD_INT 21
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: LD_INT 23
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PPUSH
71617: CALL_OW 69
71621: IN
71622: NOT
71623: OR
71624: IFFALSE 71628
// exit ;
71626: GO 71675
// for i = 1 to 3 do
71628: LD_ADDR_VAR 0 3
71632: PUSH
71633: DOUBLE
71634: LD_INT 1
71636: DEC
71637: ST_TO_ADDR
71638: LD_INT 3
71640: PUSH
71641: FOR_TO
71642: IFFALSE 71673
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71644: LD_VAR 0 1
71648: PPUSH
71649: CALL_OW 250
71653: PPUSH
71654: LD_VAR 0 1
71658: PPUSH
71659: CALL_OW 251
71663: PPUSH
71664: LD_INT 1
71666: PPUSH
71667: CALL_OW 453
71671: GO 71641
71673: POP
71674: POP
// end ;
71675: LD_VAR 0 2
71679: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71680: LD_INT 0
71682: PPUSH
71683: PPUSH
71684: PPUSH
71685: PPUSH
71686: PPUSH
71687: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71688: LD_VAR 0 1
71692: NOT
71693: PUSH
71694: LD_VAR 0 2
71698: NOT
71699: OR
71700: PUSH
71701: LD_VAR 0 1
71705: PPUSH
71706: CALL_OW 314
71710: OR
71711: IFFALSE 71715
// exit ;
71713: GO 72156
// x := GetX ( enemy_unit ) ;
71715: LD_ADDR_VAR 0 7
71719: PUSH
71720: LD_VAR 0 2
71724: PPUSH
71725: CALL_OW 250
71729: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71730: LD_ADDR_VAR 0 8
71734: PUSH
71735: LD_VAR 0 2
71739: PPUSH
71740: CALL_OW 251
71744: ST_TO_ADDR
// if not x or not y then
71745: LD_VAR 0 7
71749: NOT
71750: PUSH
71751: LD_VAR 0 8
71755: NOT
71756: OR
71757: IFFALSE 71761
// exit ;
71759: GO 72156
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71761: LD_ADDR_VAR 0 6
71765: PUSH
71766: LD_VAR 0 7
71770: PPUSH
71771: LD_INT 0
71773: PPUSH
71774: LD_INT 4
71776: PPUSH
71777: CALL_OW 272
71781: PUSH
71782: LD_VAR 0 8
71786: PPUSH
71787: LD_INT 0
71789: PPUSH
71790: LD_INT 4
71792: PPUSH
71793: CALL_OW 273
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_VAR 0 7
71806: PPUSH
71807: LD_INT 1
71809: PPUSH
71810: LD_INT 4
71812: PPUSH
71813: CALL_OW 272
71817: PUSH
71818: LD_VAR 0 8
71822: PPUSH
71823: LD_INT 1
71825: PPUSH
71826: LD_INT 4
71828: PPUSH
71829: CALL_OW 273
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_VAR 0 7
71842: PPUSH
71843: LD_INT 2
71845: PPUSH
71846: LD_INT 4
71848: PPUSH
71849: CALL_OW 272
71853: PUSH
71854: LD_VAR 0 8
71858: PPUSH
71859: LD_INT 2
71861: PPUSH
71862: LD_INT 4
71864: PPUSH
71865: CALL_OW 273
71869: PUSH
71870: EMPTY
71871: LIST
71872: LIST
71873: PUSH
71874: LD_VAR 0 7
71878: PPUSH
71879: LD_INT 3
71881: PPUSH
71882: LD_INT 4
71884: PPUSH
71885: CALL_OW 272
71889: PUSH
71890: LD_VAR 0 8
71894: PPUSH
71895: LD_INT 3
71897: PPUSH
71898: LD_INT 4
71900: PPUSH
71901: CALL_OW 273
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_VAR 0 7
71914: PPUSH
71915: LD_INT 4
71917: PPUSH
71918: LD_INT 4
71920: PPUSH
71921: CALL_OW 272
71925: PUSH
71926: LD_VAR 0 8
71930: PPUSH
71931: LD_INT 4
71933: PPUSH
71934: LD_INT 4
71936: PPUSH
71937: CALL_OW 273
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_VAR 0 7
71950: PPUSH
71951: LD_INT 5
71953: PPUSH
71954: LD_INT 4
71956: PPUSH
71957: CALL_OW 272
71961: PUSH
71962: LD_VAR 0 8
71966: PPUSH
71967: LD_INT 5
71969: PPUSH
71970: LD_INT 4
71972: PPUSH
71973: CALL_OW 273
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: LIST
71986: LIST
71987: LIST
71988: LIST
71989: ST_TO_ADDR
// for i = tmp downto 1 do
71990: LD_ADDR_VAR 0 4
71994: PUSH
71995: DOUBLE
71996: LD_VAR 0 6
72000: INC
72001: ST_TO_ADDR
72002: LD_INT 1
72004: PUSH
72005: FOR_DOWNTO
72006: IFFALSE 72107
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72008: LD_VAR 0 6
72012: PUSH
72013: LD_VAR 0 4
72017: ARRAY
72018: PUSH
72019: LD_INT 1
72021: ARRAY
72022: PPUSH
72023: LD_VAR 0 6
72027: PUSH
72028: LD_VAR 0 4
72032: ARRAY
72033: PUSH
72034: LD_INT 2
72036: ARRAY
72037: PPUSH
72038: CALL_OW 488
72042: NOT
72043: PUSH
72044: LD_VAR 0 6
72048: PUSH
72049: LD_VAR 0 4
72053: ARRAY
72054: PUSH
72055: LD_INT 1
72057: ARRAY
72058: PPUSH
72059: LD_VAR 0 6
72063: PUSH
72064: LD_VAR 0 4
72068: ARRAY
72069: PUSH
72070: LD_INT 2
72072: ARRAY
72073: PPUSH
72074: CALL_OW 428
72078: PUSH
72079: LD_INT 0
72081: NONEQUAL
72082: OR
72083: IFFALSE 72105
// tmp := Delete ( tmp , i ) ;
72085: LD_ADDR_VAR 0 6
72089: PUSH
72090: LD_VAR 0 6
72094: PPUSH
72095: LD_VAR 0 4
72099: PPUSH
72100: CALL_OW 3
72104: ST_TO_ADDR
72105: GO 72005
72107: POP
72108: POP
// j := GetClosestHex ( unit , tmp ) ;
72109: LD_ADDR_VAR 0 5
72113: PUSH
72114: LD_VAR 0 1
72118: PPUSH
72119: LD_VAR 0 6
72123: PPUSH
72124: CALL 71409 0 2
72128: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72129: LD_VAR 0 1
72133: PPUSH
72134: LD_VAR 0 5
72138: PUSH
72139: LD_INT 1
72141: ARRAY
72142: PPUSH
72143: LD_VAR 0 5
72147: PUSH
72148: LD_INT 2
72150: ARRAY
72151: PPUSH
72152: CALL_OW 111
// end ;
72156: LD_VAR 0 3
72160: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72161: LD_INT 0
72163: PPUSH
72164: PPUSH
72165: PPUSH
// uc_side = 0 ;
72166: LD_ADDR_OWVAR 20
72170: PUSH
72171: LD_INT 0
72173: ST_TO_ADDR
// uc_nation = 0 ;
72174: LD_ADDR_OWVAR 21
72178: PUSH
72179: LD_INT 0
72181: ST_TO_ADDR
// InitHc_All ( ) ;
72182: CALL_OW 584
// InitVc ;
72186: CALL_OW 20
// if mastodonts then
72190: LD_VAR 0 6
72194: IFFALSE 72261
// for i = 1 to mastodonts do
72196: LD_ADDR_VAR 0 11
72200: PUSH
72201: DOUBLE
72202: LD_INT 1
72204: DEC
72205: ST_TO_ADDR
72206: LD_VAR 0 6
72210: PUSH
72211: FOR_TO
72212: IFFALSE 72259
// begin vc_chassis := 31 ;
72214: LD_ADDR_OWVAR 37
72218: PUSH
72219: LD_INT 31
72221: ST_TO_ADDR
// vc_control := control_rider ;
72222: LD_ADDR_OWVAR 38
72226: PUSH
72227: LD_INT 4
72229: ST_TO_ADDR
// animal := CreateVehicle ;
72230: LD_ADDR_VAR 0 12
72234: PUSH
72235: CALL_OW 45
72239: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72240: LD_VAR 0 12
72244: PPUSH
72245: LD_VAR 0 8
72249: PPUSH
72250: LD_INT 0
72252: PPUSH
72253: CALL 74449 0 3
// end ;
72257: GO 72211
72259: POP
72260: POP
// if horses then
72261: LD_VAR 0 5
72265: IFFALSE 72332
// for i = 1 to horses do
72267: LD_ADDR_VAR 0 11
72271: PUSH
72272: DOUBLE
72273: LD_INT 1
72275: DEC
72276: ST_TO_ADDR
72277: LD_VAR 0 5
72281: PUSH
72282: FOR_TO
72283: IFFALSE 72330
// begin hc_class := 21 ;
72285: LD_ADDR_OWVAR 28
72289: PUSH
72290: LD_INT 21
72292: ST_TO_ADDR
// hc_gallery :=  ;
72293: LD_ADDR_OWVAR 33
72297: PUSH
72298: LD_STRING 
72300: ST_TO_ADDR
// animal := CreateHuman ;
72301: LD_ADDR_VAR 0 12
72305: PUSH
72306: CALL_OW 44
72310: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72311: LD_VAR 0 12
72315: PPUSH
72316: LD_VAR 0 8
72320: PPUSH
72321: LD_INT 0
72323: PPUSH
72324: CALL 74449 0 3
// end ;
72328: GO 72282
72330: POP
72331: POP
// if birds then
72332: LD_VAR 0 1
72336: IFFALSE 72403
// for i = 1 to birds do
72338: LD_ADDR_VAR 0 11
72342: PUSH
72343: DOUBLE
72344: LD_INT 1
72346: DEC
72347: ST_TO_ADDR
72348: LD_VAR 0 1
72352: PUSH
72353: FOR_TO
72354: IFFALSE 72401
// begin hc_class = 18 ;
72356: LD_ADDR_OWVAR 28
72360: PUSH
72361: LD_INT 18
72363: ST_TO_ADDR
// hc_gallery =  ;
72364: LD_ADDR_OWVAR 33
72368: PUSH
72369: LD_STRING 
72371: ST_TO_ADDR
// animal := CreateHuman ;
72372: LD_ADDR_VAR 0 12
72376: PUSH
72377: CALL_OW 44
72381: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72382: LD_VAR 0 12
72386: PPUSH
72387: LD_VAR 0 8
72391: PPUSH
72392: LD_INT 0
72394: PPUSH
72395: CALL 74449 0 3
// end ;
72399: GO 72353
72401: POP
72402: POP
// if tigers then
72403: LD_VAR 0 2
72407: IFFALSE 72491
// for i = 1 to tigers do
72409: LD_ADDR_VAR 0 11
72413: PUSH
72414: DOUBLE
72415: LD_INT 1
72417: DEC
72418: ST_TO_ADDR
72419: LD_VAR 0 2
72423: PUSH
72424: FOR_TO
72425: IFFALSE 72489
// begin hc_class = class_tiger ;
72427: LD_ADDR_OWVAR 28
72431: PUSH
72432: LD_INT 14
72434: ST_TO_ADDR
// hc_gallery =  ;
72435: LD_ADDR_OWVAR 33
72439: PUSH
72440: LD_STRING 
72442: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72443: LD_ADDR_OWVAR 35
72447: PUSH
72448: LD_INT 7
72450: NEG
72451: PPUSH
72452: LD_INT 7
72454: PPUSH
72455: CALL_OW 12
72459: ST_TO_ADDR
// animal := CreateHuman ;
72460: LD_ADDR_VAR 0 12
72464: PUSH
72465: CALL_OW 44
72469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72470: LD_VAR 0 12
72474: PPUSH
72475: LD_VAR 0 8
72479: PPUSH
72480: LD_INT 0
72482: PPUSH
72483: CALL 74449 0 3
// end ;
72487: GO 72424
72489: POP
72490: POP
// if apemans then
72491: LD_VAR 0 3
72495: IFFALSE 72618
// for i = 1 to apemans do
72497: LD_ADDR_VAR 0 11
72501: PUSH
72502: DOUBLE
72503: LD_INT 1
72505: DEC
72506: ST_TO_ADDR
72507: LD_VAR 0 3
72511: PUSH
72512: FOR_TO
72513: IFFALSE 72616
// begin hc_class = class_apeman ;
72515: LD_ADDR_OWVAR 28
72519: PUSH
72520: LD_INT 12
72522: ST_TO_ADDR
// hc_gallery =  ;
72523: LD_ADDR_OWVAR 33
72527: PUSH
72528: LD_STRING 
72530: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72531: LD_ADDR_OWVAR 35
72535: PUSH
72536: LD_INT 2
72538: NEG
72539: PPUSH
72540: LD_INT 2
72542: PPUSH
72543: CALL_OW 12
72547: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72548: LD_ADDR_OWVAR 31
72552: PUSH
72553: LD_INT 1
72555: PPUSH
72556: LD_INT 3
72558: PPUSH
72559: CALL_OW 12
72563: PUSH
72564: LD_INT 1
72566: PPUSH
72567: LD_INT 3
72569: PPUSH
72570: CALL_OW 12
72574: PUSH
72575: LD_INT 0
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: LIST
72586: ST_TO_ADDR
// animal := CreateHuman ;
72587: LD_ADDR_VAR 0 12
72591: PUSH
72592: CALL_OW 44
72596: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72597: LD_VAR 0 12
72601: PPUSH
72602: LD_VAR 0 8
72606: PPUSH
72607: LD_INT 0
72609: PPUSH
72610: CALL 74449 0 3
// end ;
72614: GO 72512
72616: POP
72617: POP
// if enchidnas then
72618: LD_VAR 0 4
72622: IFFALSE 72689
// for i = 1 to enchidnas do
72624: LD_ADDR_VAR 0 11
72628: PUSH
72629: DOUBLE
72630: LD_INT 1
72632: DEC
72633: ST_TO_ADDR
72634: LD_VAR 0 4
72638: PUSH
72639: FOR_TO
72640: IFFALSE 72687
// begin hc_class = 13 ;
72642: LD_ADDR_OWVAR 28
72646: PUSH
72647: LD_INT 13
72649: ST_TO_ADDR
// hc_gallery =  ;
72650: LD_ADDR_OWVAR 33
72654: PUSH
72655: LD_STRING 
72657: ST_TO_ADDR
// animal := CreateHuman ;
72658: LD_ADDR_VAR 0 12
72662: PUSH
72663: CALL_OW 44
72667: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72668: LD_VAR 0 12
72672: PPUSH
72673: LD_VAR 0 8
72677: PPUSH
72678: LD_INT 0
72680: PPUSH
72681: CALL 74449 0 3
// end ;
72685: GO 72639
72687: POP
72688: POP
// if fishes then
72689: LD_VAR 0 7
72693: IFFALSE 72760
// for i = 1 to fishes do
72695: LD_ADDR_VAR 0 11
72699: PUSH
72700: DOUBLE
72701: LD_INT 1
72703: DEC
72704: ST_TO_ADDR
72705: LD_VAR 0 7
72709: PUSH
72710: FOR_TO
72711: IFFALSE 72758
// begin hc_class = 20 ;
72713: LD_ADDR_OWVAR 28
72717: PUSH
72718: LD_INT 20
72720: ST_TO_ADDR
// hc_gallery =  ;
72721: LD_ADDR_OWVAR 33
72725: PUSH
72726: LD_STRING 
72728: ST_TO_ADDR
// animal := CreateHuman ;
72729: LD_ADDR_VAR 0 12
72733: PUSH
72734: CALL_OW 44
72738: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72739: LD_VAR 0 12
72743: PPUSH
72744: LD_VAR 0 9
72748: PPUSH
72749: LD_INT 0
72751: PPUSH
72752: CALL 74449 0 3
// end ;
72756: GO 72710
72758: POP
72759: POP
// end ;
72760: LD_VAR 0 10
72764: RET
// export function WantHeal ( sci , unit ) ; begin
72765: LD_INT 0
72767: PPUSH
// if GetTaskList ( sci ) > 0 then
72768: LD_VAR 0 1
72772: PPUSH
72773: CALL_OW 437
72777: PUSH
72778: LD_INT 0
72780: GREATER
72781: IFFALSE 72851
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72783: LD_VAR 0 1
72787: PPUSH
72788: CALL_OW 437
72792: PUSH
72793: LD_INT 1
72795: ARRAY
72796: PUSH
72797: LD_INT 1
72799: ARRAY
72800: PUSH
72801: LD_STRING l
72803: EQUAL
72804: PUSH
72805: LD_VAR 0 1
72809: PPUSH
72810: CALL_OW 437
72814: PUSH
72815: LD_INT 1
72817: ARRAY
72818: PUSH
72819: LD_INT 4
72821: ARRAY
72822: PUSH
72823: LD_VAR 0 2
72827: EQUAL
72828: AND
72829: IFFALSE 72841
// result := true else
72831: LD_ADDR_VAR 0 3
72835: PUSH
72836: LD_INT 1
72838: ST_TO_ADDR
72839: GO 72849
// result := false ;
72841: LD_ADDR_VAR 0 3
72845: PUSH
72846: LD_INT 0
72848: ST_TO_ADDR
// end else
72849: GO 72859
// result := false ;
72851: LD_ADDR_VAR 0 3
72855: PUSH
72856: LD_INT 0
72858: ST_TO_ADDR
// end ;
72859: LD_VAR 0 3
72863: RET
// export function HealTarget ( sci ) ; begin
72864: LD_INT 0
72866: PPUSH
// if not sci then
72867: LD_VAR 0 1
72871: NOT
72872: IFFALSE 72876
// exit ;
72874: GO 72941
// result := 0 ;
72876: LD_ADDR_VAR 0 2
72880: PUSH
72881: LD_INT 0
72883: ST_TO_ADDR
// if GetTaskList ( sci ) then
72884: LD_VAR 0 1
72888: PPUSH
72889: CALL_OW 437
72893: IFFALSE 72941
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72895: LD_VAR 0 1
72899: PPUSH
72900: CALL_OW 437
72904: PUSH
72905: LD_INT 1
72907: ARRAY
72908: PUSH
72909: LD_INT 1
72911: ARRAY
72912: PUSH
72913: LD_STRING l
72915: EQUAL
72916: IFFALSE 72941
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72918: LD_ADDR_VAR 0 2
72922: PUSH
72923: LD_VAR 0 1
72927: PPUSH
72928: CALL_OW 437
72932: PUSH
72933: LD_INT 1
72935: ARRAY
72936: PUSH
72937: LD_INT 4
72939: ARRAY
72940: ST_TO_ADDR
// end ;
72941: LD_VAR 0 2
72945: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72946: LD_INT 0
72948: PPUSH
72949: PPUSH
72950: PPUSH
72951: PPUSH
// if not base_units then
72952: LD_VAR 0 1
72956: NOT
72957: IFFALSE 72961
// exit ;
72959: GO 73048
// result := false ;
72961: LD_ADDR_VAR 0 2
72965: PUSH
72966: LD_INT 0
72968: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72969: LD_ADDR_VAR 0 5
72973: PUSH
72974: LD_VAR 0 1
72978: PPUSH
72979: LD_INT 21
72981: PUSH
72982: LD_INT 3
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PPUSH
72989: CALL_OW 72
72993: ST_TO_ADDR
// if not tmp then
72994: LD_VAR 0 5
72998: NOT
72999: IFFALSE 73003
// exit ;
73001: GO 73048
// for i in tmp do
73003: LD_ADDR_VAR 0 3
73007: PUSH
73008: LD_VAR 0 5
73012: PUSH
73013: FOR_IN
73014: IFFALSE 73046
// begin result := EnemyInRange ( i , 22 ) ;
73016: LD_ADDR_VAR 0 2
73020: PUSH
73021: LD_VAR 0 3
73025: PPUSH
73026: LD_INT 22
73028: PPUSH
73029: CALL 71284 0 2
73033: ST_TO_ADDR
// if result then
73034: LD_VAR 0 2
73038: IFFALSE 73044
// exit ;
73040: POP
73041: POP
73042: GO 73048
// end ;
73044: GO 73013
73046: POP
73047: POP
// end ;
73048: LD_VAR 0 2
73052: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
73053: LD_INT 0
73055: PPUSH
73056: PPUSH
// if not units then
73057: LD_VAR 0 1
73061: NOT
73062: IFFALSE 73066
// exit ;
73064: GO 73136
// result := [ ] ;
73066: LD_ADDR_VAR 0 3
73070: PUSH
73071: EMPTY
73072: ST_TO_ADDR
// for i in units do
73073: LD_ADDR_VAR 0 4
73077: PUSH
73078: LD_VAR 0 1
73082: PUSH
73083: FOR_IN
73084: IFFALSE 73134
// if GetTag ( i ) = tag then
73086: LD_VAR 0 4
73090: PPUSH
73091: CALL_OW 110
73095: PUSH
73096: LD_VAR 0 2
73100: EQUAL
73101: IFFALSE 73132
// result := Replace ( result , result + 1 , i ) ;
73103: LD_ADDR_VAR 0 3
73107: PUSH
73108: LD_VAR 0 3
73112: PPUSH
73113: LD_VAR 0 3
73117: PUSH
73118: LD_INT 1
73120: PLUS
73121: PPUSH
73122: LD_VAR 0 4
73126: PPUSH
73127: CALL_OW 1
73131: ST_TO_ADDR
73132: GO 73083
73134: POP
73135: POP
// end ;
73136: LD_VAR 0 3
73140: RET
// export function IsDriver ( un ) ; begin
73141: LD_INT 0
73143: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73144: LD_ADDR_VAR 0 2
73148: PUSH
73149: LD_VAR 0 1
73153: PUSH
73154: LD_INT 55
73156: PUSH
73157: EMPTY
73158: LIST
73159: PPUSH
73160: CALL_OW 69
73164: IN
73165: ST_TO_ADDR
// end ;
73166: LD_VAR 0 2
73170: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73171: LD_INT 0
73173: PPUSH
73174: PPUSH
// list := [ ] ;
73175: LD_ADDR_VAR 0 5
73179: PUSH
73180: EMPTY
73181: ST_TO_ADDR
// case d of 0 :
73182: LD_VAR 0 3
73186: PUSH
73187: LD_INT 0
73189: DOUBLE
73190: EQUAL
73191: IFTRUE 73195
73193: GO 73328
73195: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73196: LD_ADDR_VAR 0 5
73200: PUSH
73201: LD_VAR 0 1
73205: PUSH
73206: LD_INT 4
73208: MINUS
73209: PUSH
73210: LD_VAR 0 2
73214: PUSH
73215: LD_INT 4
73217: MINUS
73218: PUSH
73219: LD_INT 2
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: LIST
73226: PUSH
73227: LD_VAR 0 1
73231: PUSH
73232: LD_INT 3
73234: MINUS
73235: PUSH
73236: LD_VAR 0 2
73240: PUSH
73241: LD_INT 1
73243: PUSH
73244: EMPTY
73245: LIST
73246: LIST
73247: LIST
73248: PUSH
73249: LD_VAR 0 1
73253: PUSH
73254: LD_INT 4
73256: PLUS
73257: PUSH
73258: LD_VAR 0 2
73262: PUSH
73263: LD_INT 4
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: LIST
73270: PUSH
73271: LD_VAR 0 1
73275: PUSH
73276: LD_INT 3
73278: PLUS
73279: PUSH
73280: LD_VAR 0 2
73284: PUSH
73285: LD_INT 3
73287: PLUS
73288: PUSH
73289: LD_INT 5
73291: PUSH
73292: EMPTY
73293: LIST
73294: LIST
73295: LIST
73296: PUSH
73297: LD_VAR 0 1
73301: PUSH
73302: LD_VAR 0 2
73306: PUSH
73307: LD_INT 4
73309: PLUS
73310: PUSH
73311: LD_INT 0
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: LIST
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: ST_TO_ADDR
// end ; 1 :
73326: GO 74026
73328: LD_INT 1
73330: DOUBLE
73331: EQUAL
73332: IFTRUE 73336
73334: GO 73469
73336: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73337: LD_ADDR_VAR 0 5
73341: PUSH
73342: LD_VAR 0 1
73346: PUSH
73347: LD_VAR 0 2
73351: PUSH
73352: LD_INT 4
73354: MINUS
73355: PUSH
73356: LD_INT 3
73358: PUSH
73359: EMPTY
73360: LIST
73361: LIST
73362: LIST
73363: PUSH
73364: LD_VAR 0 1
73368: PUSH
73369: LD_INT 3
73371: MINUS
73372: PUSH
73373: LD_VAR 0 2
73377: PUSH
73378: LD_INT 3
73380: MINUS
73381: PUSH
73382: LD_INT 2
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: PUSH
73390: LD_VAR 0 1
73394: PUSH
73395: LD_INT 4
73397: MINUS
73398: PUSH
73399: LD_VAR 0 2
73403: PUSH
73404: LD_INT 1
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: LIST
73411: PUSH
73412: LD_VAR 0 1
73416: PUSH
73417: LD_VAR 0 2
73421: PUSH
73422: LD_INT 3
73424: PLUS
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: LIST
73433: PUSH
73434: LD_VAR 0 1
73438: PUSH
73439: LD_INT 4
73441: PLUS
73442: PUSH
73443: LD_VAR 0 2
73447: PUSH
73448: LD_INT 4
73450: PLUS
73451: PUSH
73452: LD_INT 5
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: LIST
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: ST_TO_ADDR
// end ; 2 :
73467: GO 74026
73469: LD_INT 2
73471: DOUBLE
73472: EQUAL
73473: IFTRUE 73477
73475: GO 73606
73477: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73478: LD_ADDR_VAR 0 5
73482: PUSH
73483: LD_VAR 0 1
73487: PUSH
73488: LD_VAR 0 2
73492: PUSH
73493: LD_INT 3
73495: MINUS
73496: PUSH
73497: LD_INT 3
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: LIST
73504: PUSH
73505: LD_VAR 0 1
73509: PUSH
73510: LD_INT 4
73512: PLUS
73513: PUSH
73514: LD_VAR 0 2
73518: PUSH
73519: LD_INT 4
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: LIST
73526: PUSH
73527: LD_VAR 0 1
73531: PUSH
73532: LD_VAR 0 2
73536: PUSH
73537: LD_INT 4
73539: PLUS
73540: PUSH
73541: LD_INT 0
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: LIST
73548: PUSH
73549: LD_VAR 0 1
73553: PUSH
73554: LD_INT 3
73556: MINUS
73557: PUSH
73558: LD_VAR 0 2
73562: PUSH
73563: LD_INT 1
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: PUSH
73571: LD_VAR 0 1
73575: PUSH
73576: LD_INT 4
73578: MINUS
73579: PUSH
73580: LD_VAR 0 2
73584: PUSH
73585: LD_INT 4
73587: MINUS
73588: PUSH
73589: LD_INT 2
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: LIST
73596: PUSH
73597: EMPTY
73598: LIST
73599: LIST
73600: LIST
73601: LIST
73602: LIST
73603: ST_TO_ADDR
// end ; 3 :
73604: GO 74026
73606: LD_INT 3
73608: DOUBLE
73609: EQUAL
73610: IFTRUE 73614
73612: GO 73747
73614: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73615: LD_ADDR_VAR 0 5
73619: PUSH
73620: LD_VAR 0 1
73624: PUSH
73625: LD_INT 3
73627: PLUS
73628: PUSH
73629: LD_VAR 0 2
73633: PUSH
73634: LD_INT 4
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: LIST
73641: PUSH
73642: LD_VAR 0 1
73646: PUSH
73647: LD_INT 4
73649: PLUS
73650: PUSH
73651: LD_VAR 0 2
73655: PUSH
73656: LD_INT 4
73658: PLUS
73659: PUSH
73660: LD_INT 5
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: LIST
73667: PUSH
73668: LD_VAR 0 1
73672: PUSH
73673: LD_INT 4
73675: MINUS
73676: PUSH
73677: LD_VAR 0 2
73681: PUSH
73682: LD_INT 1
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: LIST
73689: PUSH
73690: LD_VAR 0 1
73694: PUSH
73695: LD_VAR 0 2
73699: PUSH
73700: LD_INT 4
73702: MINUS
73703: PUSH
73704: LD_INT 3
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: LIST
73711: PUSH
73712: LD_VAR 0 1
73716: PUSH
73717: LD_INT 3
73719: MINUS
73720: PUSH
73721: LD_VAR 0 2
73725: PUSH
73726: LD_INT 3
73728: MINUS
73729: PUSH
73730: LD_INT 2
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: ST_TO_ADDR
// end ; 4 :
73745: GO 74026
73747: LD_INT 4
73749: DOUBLE
73750: EQUAL
73751: IFTRUE 73755
73753: GO 73888
73755: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73756: LD_ADDR_VAR 0 5
73760: PUSH
73761: LD_VAR 0 1
73765: PUSH
73766: LD_VAR 0 2
73770: PUSH
73771: LD_INT 4
73773: PLUS
73774: PUSH
73775: LD_INT 0
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: LIST
73782: PUSH
73783: LD_VAR 0 1
73787: PUSH
73788: LD_INT 3
73790: PLUS
73791: PUSH
73792: LD_VAR 0 2
73796: PUSH
73797: LD_INT 3
73799: PLUS
73800: PUSH
73801: LD_INT 5
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: LIST
73808: PUSH
73809: LD_VAR 0 1
73813: PUSH
73814: LD_INT 4
73816: PLUS
73817: PUSH
73818: LD_VAR 0 2
73822: PUSH
73823: LD_INT 4
73825: PUSH
73826: EMPTY
73827: LIST
73828: LIST
73829: LIST
73830: PUSH
73831: LD_VAR 0 1
73835: PUSH
73836: LD_VAR 0 2
73840: PUSH
73841: LD_INT 3
73843: MINUS
73844: PUSH
73845: LD_INT 3
73847: PUSH
73848: EMPTY
73849: LIST
73850: LIST
73851: LIST
73852: PUSH
73853: LD_VAR 0 1
73857: PUSH
73858: LD_INT 4
73860: MINUS
73861: PUSH
73862: LD_VAR 0 2
73866: PUSH
73867: LD_INT 4
73869: MINUS
73870: PUSH
73871: LD_INT 2
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: LIST
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: LIST
73883: LIST
73884: LIST
73885: ST_TO_ADDR
// end ; 5 :
73886: GO 74026
73888: LD_INT 5
73890: DOUBLE
73891: EQUAL
73892: IFTRUE 73896
73894: GO 74025
73896: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73897: LD_ADDR_VAR 0 5
73901: PUSH
73902: LD_VAR 0 1
73906: PUSH
73907: LD_INT 4
73909: MINUS
73910: PUSH
73911: LD_VAR 0 2
73915: PUSH
73916: LD_INT 1
73918: PUSH
73919: EMPTY
73920: LIST
73921: LIST
73922: LIST
73923: PUSH
73924: LD_VAR 0 1
73928: PUSH
73929: LD_VAR 0 2
73933: PUSH
73934: LD_INT 4
73936: MINUS
73937: PUSH
73938: LD_INT 3
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: LIST
73945: PUSH
73946: LD_VAR 0 1
73950: PUSH
73951: LD_INT 4
73953: PLUS
73954: PUSH
73955: LD_VAR 0 2
73959: PUSH
73960: LD_INT 4
73962: PLUS
73963: PUSH
73964: LD_INT 5
73966: PUSH
73967: EMPTY
73968: LIST
73969: LIST
73970: LIST
73971: PUSH
73972: LD_VAR 0 1
73976: PUSH
73977: LD_INT 3
73979: PLUS
73980: PUSH
73981: LD_VAR 0 2
73985: PUSH
73986: LD_INT 4
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: LIST
73993: PUSH
73994: LD_VAR 0 1
73998: PUSH
73999: LD_VAR 0 2
74003: PUSH
74004: LD_INT 3
74006: PLUS
74007: PUSH
74008: LD_INT 0
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: LIST
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: ST_TO_ADDR
// end ; end ;
74023: GO 74026
74025: POP
// result := list ;
74026: LD_ADDR_VAR 0 4
74030: PUSH
74031: LD_VAR 0 5
74035: ST_TO_ADDR
// end ;
74036: LD_VAR 0 4
74040: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74041: LD_INT 0
74043: PPUSH
74044: PPUSH
74045: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74046: LD_VAR 0 1
74050: NOT
74051: PUSH
74052: LD_VAR 0 2
74056: PUSH
74057: LD_INT 1
74059: PUSH
74060: LD_INT 2
74062: PUSH
74063: LD_INT 3
74065: PUSH
74066: LD_INT 4
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: IN
74075: NOT
74076: OR
74077: IFFALSE 74081
// exit ;
74079: GO 74173
// tmp := [ ] ;
74081: LD_ADDR_VAR 0 5
74085: PUSH
74086: EMPTY
74087: ST_TO_ADDR
// for i in units do
74088: LD_ADDR_VAR 0 4
74092: PUSH
74093: LD_VAR 0 1
74097: PUSH
74098: FOR_IN
74099: IFFALSE 74142
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74101: LD_ADDR_VAR 0 5
74105: PUSH
74106: LD_VAR 0 5
74110: PPUSH
74111: LD_VAR 0 5
74115: PUSH
74116: LD_INT 1
74118: PLUS
74119: PPUSH
74120: LD_VAR 0 4
74124: PPUSH
74125: LD_VAR 0 2
74129: PPUSH
74130: CALL_OW 259
74134: PPUSH
74135: CALL_OW 2
74139: ST_TO_ADDR
74140: GO 74098
74142: POP
74143: POP
// if not tmp then
74144: LD_VAR 0 5
74148: NOT
74149: IFFALSE 74153
// exit ;
74151: GO 74173
// result := SortListByListDesc ( units , tmp ) ;
74153: LD_ADDR_VAR 0 3
74157: PUSH
74158: LD_VAR 0 1
74162: PPUSH
74163: LD_VAR 0 5
74167: PPUSH
74168: CALL_OW 77
74172: ST_TO_ADDR
// end ;
74173: LD_VAR 0 3
74177: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74178: LD_INT 0
74180: PPUSH
74181: PPUSH
74182: PPUSH
// result := false ;
74183: LD_ADDR_VAR 0 3
74187: PUSH
74188: LD_INT 0
74190: ST_TO_ADDR
// x := GetX ( building ) ;
74191: LD_ADDR_VAR 0 4
74195: PUSH
74196: LD_VAR 0 2
74200: PPUSH
74201: CALL_OW 250
74205: ST_TO_ADDR
// y := GetY ( building ) ;
74206: LD_ADDR_VAR 0 5
74210: PUSH
74211: LD_VAR 0 2
74215: PPUSH
74216: CALL_OW 251
74220: ST_TO_ADDR
// if not building or not x or not y then
74221: LD_VAR 0 2
74225: NOT
74226: PUSH
74227: LD_VAR 0 4
74231: NOT
74232: OR
74233: PUSH
74234: LD_VAR 0 5
74238: NOT
74239: OR
74240: IFFALSE 74244
// exit ;
74242: GO 74336
// if GetTaskList ( unit ) then
74244: LD_VAR 0 1
74248: PPUSH
74249: CALL_OW 437
74253: IFFALSE 74336
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74255: LD_STRING e
74257: PUSH
74258: LD_VAR 0 1
74262: PPUSH
74263: CALL_OW 437
74267: PUSH
74268: LD_INT 1
74270: ARRAY
74271: PUSH
74272: LD_INT 1
74274: ARRAY
74275: EQUAL
74276: PUSH
74277: LD_VAR 0 4
74281: PUSH
74282: LD_VAR 0 1
74286: PPUSH
74287: CALL_OW 437
74291: PUSH
74292: LD_INT 1
74294: ARRAY
74295: PUSH
74296: LD_INT 2
74298: ARRAY
74299: EQUAL
74300: AND
74301: PUSH
74302: LD_VAR 0 5
74306: PUSH
74307: LD_VAR 0 1
74311: PPUSH
74312: CALL_OW 437
74316: PUSH
74317: LD_INT 1
74319: ARRAY
74320: PUSH
74321: LD_INT 3
74323: ARRAY
74324: EQUAL
74325: AND
74326: IFFALSE 74336
// result := true end ;
74328: LD_ADDR_VAR 0 3
74332: PUSH
74333: LD_INT 1
74335: ST_TO_ADDR
// end ;
74336: LD_VAR 0 3
74340: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74341: LD_INT 0
74343: PPUSH
// result := false ;
74344: LD_ADDR_VAR 0 4
74348: PUSH
74349: LD_INT 0
74351: ST_TO_ADDR
// if GetTaskList ( unit ) then
74352: LD_VAR 0 1
74356: PPUSH
74357: CALL_OW 437
74361: IFFALSE 74444
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74363: LD_STRING M
74365: PUSH
74366: LD_VAR 0 1
74370: PPUSH
74371: CALL_OW 437
74375: PUSH
74376: LD_INT 1
74378: ARRAY
74379: PUSH
74380: LD_INT 1
74382: ARRAY
74383: EQUAL
74384: PUSH
74385: LD_VAR 0 2
74389: PUSH
74390: LD_VAR 0 1
74394: PPUSH
74395: CALL_OW 437
74399: PUSH
74400: LD_INT 1
74402: ARRAY
74403: PUSH
74404: LD_INT 2
74406: ARRAY
74407: EQUAL
74408: AND
74409: PUSH
74410: LD_VAR 0 3
74414: PUSH
74415: LD_VAR 0 1
74419: PPUSH
74420: CALL_OW 437
74424: PUSH
74425: LD_INT 1
74427: ARRAY
74428: PUSH
74429: LD_INT 3
74431: ARRAY
74432: EQUAL
74433: AND
74434: IFFALSE 74444
// result := true ;
74436: LD_ADDR_VAR 0 4
74440: PUSH
74441: LD_INT 1
74443: ST_TO_ADDR
// end ; end ;
74444: LD_VAR 0 4
74448: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74449: LD_INT 0
74451: PPUSH
74452: PPUSH
74453: PPUSH
74454: PPUSH
// if not unit or not area then
74455: LD_VAR 0 1
74459: NOT
74460: PUSH
74461: LD_VAR 0 2
74465: NOT
74466: OR
74467: IFFALSE 74471
// exit ;
74469: GO 74635
// tmp := AreaToList ( area , i ) ;
74471: LD_ADDR_VAR 0 6
74475: PUSH
74476: LD_VAR 0 2
74480: PPUSH
74481: LD_VAR 0 5
74485: PPUSH
74486: CALL_OW 517
74490: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74491: LD_ADDR_VAR 0 5
74495: PUSH
74496: DOUBLE
74497: LD_INT 1
74499: DEC
74500: ST_TO_ADDR
74501: LD_VAR 0 6
74505: PUSH
74506: LD_INT 1
74508: ARRAY
74509: PUSH
74510: FOR_TO
74511: IFFALSE 74633
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74513: LD_ADDR_VAR 0 7
74517: PUSH
74518: LD_VAR 0 6
74522: PUSH
74523: LD_INT 1
74525: ARRAY
74526: PUSH
74527: LD_VAR 0 5
74531: ARRAY
74532: PUSH
74533: LD_VAR 0 6
74537: PUSH
74538: LD_INT 2
74540: ARRAY
74541: PUSH
74542: LD_VAR 0 5
74546: ARRAY
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74552: LD_VAR 0 7
74556: PUSH
74557: LD_INT 1
74559: ARRAY
74560: PPUSH
74561: LD_VAR 0 7
74565: PUSH
74566: LD_INT 2
74568: ARRAY
74569: PPUSH
74570: CALL_OW 428
74574: PUSH
74575: LD_INT 0
74577: EQUAL
74578: IFFALSE 74631
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74580: LD_VAR 0 1
74584: PPUSH
74585: LD_VAR 0 7
74589: PUSH
74590: LD_INT 1
74592: ARRAY
74593: PPUSH
74594: LD_VAR 0 7
74598: PUSH
74599: LD_INT 2
74601: ARRAY
74602: PPUSH
74603: LD_VAR 0 3
74607: PPUSH
74608: CALL_OW 48
// result := IsPlaced ( unit ) ;
74612: LD_ADDR_VAR 0 4
74616: PUSH
74617: LD_VAR 0 1
74621: PPUSH
74622: CALL_OW 305
74626: ST_TO_ADDR
// exit ;
74627: POP
74628: POP
74629: GO 74635
// end ; end ;
74631: GO 74510
74633: POP
74634: POP
// end ;
74635: LD_VAR 0 4
74639: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74640: LD_INT 0
74642: PPUSH
74643: PPUSH
74644: PPUSH
// if not side or side > 8 then
74645: LD_VAR 0 1
74649: NOT
74650: PUSH
74651: LD_VAR 0 1
74655: PUSH
74656: LD_INT 8
74658: GREATER
74659: OR
74660: IFFALSE 74664
// exit ;
74662: GO 74851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74664: LD_ADDR_VAR 0 4
74668: PUSH
74669: LD_INT 22
74671: PUSH
74672: LD_VAR 0 1
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 21
74683: PUSH
74684: LD_INT 3
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PPUSH
74695: CALL_OW 69
74699: ST_TO_ADDR
// if not tmp then
74700: LD_VAR 0 4
74704: NOT
74705: IFFALSE 74709
// exit ;
74707: GO 74851
// enable_addtolog := true ;
74709: LD_ADDR_OWVAR 81
74713: PUSH
74714: LD_INT 1
74716: ST_TO_ADDR
// AddToLog ( [ ) ;
74717: LD_STRING [
74719: PPUSH
74720: CALL_OW 561
// for i in tmp do
74724: LD_ADDR_VAR 0 3
74728: PUSH
74729: LD_VAR 0 4
74733: PUSH
74734: FOR_IN
74735: IFFALSE 74842
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74737: LD_STRING [
74739: PUSH
74740: LD_VAR 0 3
74744: PPUSH
74745: CALL_OW 266
74749: STR
74750: PUSH
74751: LD_STRING , 
74753: STR
74754: PUSH
74755: LD_VAR 0 3
74759: PPUSH
74760: CALL_OW 250
74764: STR
74765: PUSH
74766: LD_STRING , 
74768: STR
74769: PUSH
74770: LD_VAR 0 3
74774: PPUSH
74775: CALL_OW 251
74779: STR
74780: PUSH
74781: LD_STRING , 
74783: STR
74784: PUSH
74785: LD_VAR 0 3
74789: PPUSH
74790: CALL_OW 254
74794: STR
74795: PUSH
74796: LD_STRING , 
74798: STR
74799: PUSH
74800: LD_VAR 0 3
74804: PPUSH
74805: LD_INT 1
74807: PPUSH
74808: CALL_OW 268
74812: STR
74813: PUSH
74814: LD_STRING , 
74816: STR
74817: PUSH
74818: LD_VAR 0 3
74822: PPUSH
74823: LD_INT 2
74825: PPUSH
74826: CALL_OW 268
74830: STR
74831: PUSH
74832: LD_STRING ],
74834: STR
74835: PPUSH
74836: CALL_OW 561
// end ;
74840: GO 74734
74842: POP
74843: POP
// AddToLog ( ]; ) ;
74844: LD_STRING ];
74846: PPUSH
74847: CALL_OW 561
// end ;
74851: LD_VAR 0 2
74855: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74856: LD_INT 0
74858: PPUSH
74859: PPUSH
74860: PPUSH
74861: PPUSH
74862: PPUSH
// if not area or not rate or not max then
74863: LD_VAR 0 1
74867: NOT
74868: PUSH
74869: LD_VAR 0 2
74873: NOT
74874: OR
74875: PUSH
74876: LD_VAR 0 4
74880: NOT
74881: OR
74882: IFFALSE 74886
// exit ;
74884: GO 75078
// while 1 do
74886: LD_INT 1
74888: IFFALSE 75078
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74890: LD_ADDR_VAR 0 9
74894: PUSH
74895: LD_VAR 0 1
74899: PPUSH
74900: LD_INT 1
74902: PPUSH
74903: CALL_OW 287
74907: PUSH
74908: LD_INT 10
74910: MUL
74911: ST_TO_ADDR
// r := rate / 10 ;
74912: LD_ADDR_VAR 0 7
74916: PUSH
74917: LD_VAR 0 2
74921: PUSH
74922: LD_INT 10
74924: DIVREAL
74925: ST_TO_ADDR
// time := 1 1$00 ;
74926: LD_ADDR_VAR 0 8
74930: PUSH
74931: LD_INT 2100
74933: ST_TO_ADDR
// if amount < min then
74934: LD_VAR 0 9
74938: PUSH
74939: LD_VAR 0 3
74943: LESS
74944: IFFALSE 74962
// r := r * 2 else
74946: LD_ADDR_VAR 0 7
74950: PUSH
74951: LD_VAR 0 7
74955: PUSH
74956: LD_INT 2
74958: MUL
74959: ST_TO_ADDR
74960: GO 74988
// if amount > max then
74962: LD_VAR 0 9
74966: PUSH
74967: LD_VAR 0 4
74971: GREATER
74972: IFFALSE 74988
// r := r / 2 ;
74974: LD_ADDR_VAR 0 7
74978: PUSH
74979: LD_VAR 0 7
74983: PUSH
74984: LD_INT 2
74986: DIVREAL
74987: ST_TO_ADDR
// time := time / r ;
74988: LD_ADDR_VAR 0 8
74992: PUSH
74993: LD_VAR 0 8
74997: PUSH
74998: LD_VAR 0 7
75002: DIVREAL
75003: ST_TO_ADDR
// if time < 0 then
75004: LD_VAR 0 8
75008: PUSH
75009: LD_INT 0
75011: LESS
75012: IFFALSE 75029
// time := time * - 1 ;
75014: LD_ADDR_VAR 0 8
75018: PUSH
75019: LD_VAR 0 8
75023: PUSH
75024: LD_INT 1
75026: NEG
75027: MUL
75028: ST_TO_ADDR
// wait ( time ) ;
75029: LD_VAR 0 8
75033: PPUSH
75034: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
75038: LD_INT 35
75040: PPUSH
75041: LD_INT 875
75043: PPUSH
75044: CALL_OW 12
75048: PPUSH
75049: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75053: LD_INT 1
75055: PPUSH
75056: LD_INT 5
75058: PPUSH
75059: CALL_OW 12
75063: PPUSH
75064: LD_VAR 0 1
75068: PPUSH
75069: LD_INT 1
75071: PPUSH
75072: CALL_OW 55
// end ;
75076: GO 74886
// end ;
75078: LD_VAR 0 5
75082: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75083: LD_INT 0
75085: PPUSH
75086: PPUSH
75087: PPUSH
75088: PPUSH
75089: PPUSH
75090: PPUSH
75091: PPUSH
75092: PPUSH
// if not turrets or not factories then
75093: LD_VAR 0 1
75097: NOT
75098: PUSH
75099: LD_VAR 0 2
75103: NOT
75104: OR
75105: IFFALSE 75109
// exit ;
75107: GO 75416
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75109: LD_ADDR_VAR 0 10
75113: PUSH
75114: LD_INT 5
75116: PUSH
75117: LD_INT 6
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 2
75126: PUSH
75127: LD_INT 4
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 3
75136: PUSH
75137: LD_INT 5
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: LIST
75148: PUSH
75149: LD_INT 24
75151: PUSH
75152: LD_INT 25
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 23
75161: PUSH
75162: LD_INT 27
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: LD_INT 42
75175: PUSH
75176: LD_INT 43
75178: PUSH
75179: EMPTY
75180: LIST
75181: LIST
75182: PUSH
75183: LD_INT 44
75185: PUSH
75186: LD_INT 46
75188: PUSH
75189: EMPTY
75190: LIST
75191: LIST
75192: PUSH
75193: LD_INT 45
75195: PUSH
75196: LD_INT 47
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: LIST
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: ST_TO_ADDR
// result := [ ] ;
75213: LD_ADDR_VAR 0 3
75217: PUSH
75218: EMPTY
75219: ST_TO_ADDR
// for i in turrets do
75220: LD_ADDR_VAR 0 4
75224: PUSH
75225: LD_VAR 0 1
75229: PUSH
75230: FOR_IN
75231: IFFALSE 75414
// begin nat := GetNation ( i ) ;
75233: LD_ADDR_VAR 0 7
75237: PUSH
75238: LD_VAR 0 4
75242: PPUSH
75243: CALL_OW 248
75247: ST_TO_ADDR
// weapon := 0 ;
75248: LD_ADDR_VAR 0 8
75252: PUSH
75253: LD_INT 0
75255: ST_TO_ADDR
// if not nat then
75256: LD_VAR 0 7
75260: NOT
75261: IFFALSE 75265
// continue ;
75263: GO 75230
// for j in list [ nat ] do
75265: LD_ADDR_VAR 0 5
75269: PUSH
75270: LD_VAR 0 10
75274: PUSH
75275: LD_VAR 0 7
75279: ARRAY
75280: PUSH
75281: FOR_IN
75282: IFFALSE 75323
// if GetBWeapon ( i ) = j [ 1 ] then
75284: LD_VAR 0 4
75288: PPUSH
75289: CALL_OW 269
75293: PUSH
75294: LD_VAR 0 5
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: EQUAL
75303: IFFALSE 75321
// begin weapon := j [ 2 ] ;
75305: LD_ADDR_VAR 0 8
75309: PUSH
75310: LD_VAR 0 5
75314: PUSH
75315: LD_INT 2
75317: ARRAY
75318: ST_TO_ADDR
// break ;
75319: GO 75323
// end ;
75321: GO 75281
75323: POP
75324: POP
// if not weapon then
75325: LD_VAR 0 8
75329: NOT
75330: IFFALSE 75334
// continue ;
75332: GO 75230
// for k in factories do
75334: LD_ADDR_VAR 0 6
75338: PUSH
75339: LD_VAR 0 2
75343: PUSH
75344: FOR_IN
75345: IFFALSE 75410
// begin weapons := AvailableWeaponList ( k ) ;
75347: LD_ADDR_VAR 0 9
75351: PUSH
75352: LD_VAR 0 6
75356: PPUSH
75357: CALL_OW 478
75361: ST_TO_ADDR
// if not weapons then
75362: LD_VAR 0 9
75366: NOT
75367: IFFALSE 75371
// continue ;
75369: GO 75344
// if weapon in weapons then
75371: LD_VAR 0 8
75375: PUSH
75376: LD_VAR 0 9
75380: IN
75381: IFFALSE 75408
// begin result := [ i , weapon ] ;
75383: LD_ADDR_VAR 0 3
75387: PUSH
75388: LD_VAR 0 4
75392: PUSH
75393: LD_VAR 0 8
75397: PUSH
75398: EMPTY
75399: LIST
75400: LIST
75401: ST_TO_ADDR
// exit ;
75402: POP
75403: POP
75404: POP
75405: POP
75406: GO 75416
// end ; end ;
75408: GO 75344
75410: POP
75411: POP
// end ;
75412: GO 75230
75414: POP
75415: POP
// end ;
75416: LD_VAR 0 3
75420: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75421: LD_INT 0
75423: PPUSH
// if not side or side > 8 then
75424: LD_VAR 0 3
75428: NOT
75429: PUSH
75430: LD_VAR 0 3
75434: PUSH
75435: LD_INT 8
75437: GREATER
75438: OR
75439: IFFALSE 75443
// exit ;
75441: GO 75502
// if not range then
75443: LD_VAR 0 4
75447: NOT
75448: IFFALSE 75459
// range := - 12 ;
75450: LD_ADDR_VAR 0 4
75454: PUSH
75455: LD_INT 12
75457: NEG
75458: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75459: LD_VAR 0 1
75463: PPUSH
75464: LD_VAR 0 2
75468: PPUSH
75469: LD_VAR 0 3
75473: PPUSH
75474: LD_VAR 0 4
75478: PPUSH
75479: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75483: LD_VAR 0 1
75487: PPUSH
75488: LD_VAR 0 2
75492: PPUSH
75493: LD_VAR 0 3
75497: PPUSH
75498: CALL_OW 331
// end ;
75502: LD_VAR 0 5
75506: RET
// export function Video ( mode ) ; begin
75507: LD_INT 0
75509: PPUSH
// ingame_video = mode ;
75510: LD_ADDR_OWVAR 52
75514: PUSH
75515: LD_VAR 0 1
75519: ST_TO_ADDR
// interface_hidden = mode ;
75520: LD_ADDR_OWVAR 54
75524: PUSH
75525: LD_VAR 0 1
75529: ST_TO_ADDR
// end ;
75530: LD_VAR 0 2
75534: RET
// export function Join ( array , element ) ; begin
75535: LD_INT 0
75537: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75538: LD_ADDR_VAR 0 3
75542: PUSH
75543: LD_VAR 0 1
75547: PPUSH
75548: LD_VAR 0 1
75552: PUSH
75553: LD_INT 1
75555: PLUS
75556: PPUSH
75557: LD_VAR 0 2
75561: PPUSH
75562: CALL_OW 1
75566: ST_TO_ADDR
// end ;
75567: LD_VAR 0 3
75571: RET
// export function JoinUnion ( array , element ) ; begin
75572: LD_INT 0
75574: PPUSH
// result := array union element ;
75575: LD_ADDR_VAR 0 3
75579: PUSH
75580: LD_VAR 0 1
75584: PUSH
75585: LD_VAR 0 2
75589: UNION
75590: ST_TO_ADDR
// end ;
75591: LD_VAR 0 3
75595: RET
// export function GetBehemoths ( side ) ; begin
75596: LD_INT 0
75598: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75599: LD_ADDR_VAR 0 2
75603: PUSH
75604: LD_INT 22
75606: PUSH
75607: LD_VAR 0 1
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 31
75618: PUSH
75619: LD_INT 25
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PPUSH
75630: CALL_OW 69
75634: ST_TO_ADDR
// end ;
75635: LD_VAR 0 2
75639: RET
// export function Shuffle ( array ) ; var i , index ; begin
75640: LD_INT 0
75642: PPUSH
75643: PPUSH
75644: PPUSH
// result := [ ] ;
75645: LD_ADDR_VAR 0 2
75649: PUSH
75650: EMPTY
75651: ST_TO_ADDR
// if not array then
75652: LD_VAR 0 1
75656: NOT
75657: IFFALSE 75661
// exit ;
75659: GO 75760
// Randomize ;
75661: CALL_OW 10
// for i = array downto 1 do
75665: LD_ADDR_VAR 0 3
75669: PUSH
75670: DOUBLE
75671: LD_VAR 0 1
75675: INC
75676: ST_TO_ADDR
75677: LD_INT 1
75679: PUSH
75680: FOR_DOWNTO
75681: IFFALSE 75758
// begin index := rand ( 1 , array ) ;
75683: LD_ADDR_VAR 0 4
75687: PUSH
75688: LD_INT 1
75690: PPUSH
75691: LD_VAR 0 1
75695: PPUSH
75696: CALL_OW 12
75700: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75701: LD_ADDR_VAR 0 2
75705: PUSH
75706: LD_VAR 0 2
75710: PPUSH
75711: LD_VAR 0 2
75715: PUSH
75716: LD_INT 1
75718: PLUS
75719: PPUSH
75720: LD_VAR 0 1
75724: PUSH
75725: LD_VAR 0 4
75729: ARRAY
75730: PPUSH
75731: CALL_OW 2
75735: ST_TO_ADDR
// array := Delete ( array , index ) ;
75736: LD_ADDR_VAR 0 1
75740: PUSH
75741: LD_VAR 0 1
75745: PPUSH
75746: LD_VAR 0 4
75750: PPUSH
75751: CALL_OW 3
75755: ST_TO_ADDR
// end ;
75756: GO 75680
75758: POP
75759: POP
// end ;
75760: LD_VAR 0 2
75764: RET
// export function GetBaseMaterials ( base ) ; begin
75765: LD_INT 0
75767: PPUSH
// result := [ 0 , 0 , 0 ] ;
75768: LD_ADDR_VAR 0 2
75772: PUSH
75773: LD_INT 0
75775: PUSH
75776: LD_INT 0
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: LIST
75786: ST_TO_ADDR
// if not base then
75787: LD_VAR 0 1
75791: NOT
75792: IFFALSE 75796
// exit ;
75794: GO 75845
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75796: LD_ADDR_VAR 0 2
75800: PUSH
75801: LD_VAR 0 1
75805: PPUSH
75806: LD_INT 1
75808: PPUSH
75809: CALL_OW 275
75813: PUSH
75814: LD_VAR 0 1
75818: PPUSH
75819: LD_INT 2
75821: PPUSH
75822: CALL_OW 275
75826: PUSH
75827: LD_VAR 0 1
75831: PPUSH
75832: LD_INT 3
75834: PPUSH
75835: CALL_OW 275
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: LIST
75844: ST_TO_ADDR
// end ;
75845: LD_VAR 0 2
75849: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75850: LD_INT 0
75852: PPUSH
75853: PPUSH
// result := array ;
75854: LD_ADDR_VAR 0 3
75858: PUSH
75859: LD_VAR 0 1
75863: ST_TO_ADDR
// if size > 0 then
75864: LD_VAR 0 2
75868: PUSH
75869: LD_INT 0
75871: GREATER
75872: IFFALSE 75918
// for i := array downto size do
75874: LD_ADDR_VAR 0 4
75878: PUSH
75879: DOUBLE
75880: LD_VAR 0 1
75884: INC
75885: ST_TO_ADDR
75886: LD_VAR 0 2
75890: PUSH
75891: FOR_DOWNTO
75892: IFFALSE 75916
// result := Delete ( result , result ) ;
75894: LD_ADDR_VAR 0 3
75898: PUSH
75899: LD_VAR 0 3
75903: PPUSH
75904: LD_VAR 0 3
75908: PPUSH
75909: CALL_OW 3
75913: ST_TO_ADDR
75914: GO 75891
75916: POP
75917: POP
// end ;
75918: LD_VAR 0 3
75922: RET
// export function ComExit ( unit ) ; var tmp ; begin
75923: LD_INT 0
75925: PPUSH
75926: PPUSH
// if not IsInUnit ( unit ) then
75927: LD_VAR 0 1
75931: PPUSH
75932: CALL_OW 310
75936: NOT
75937: IFFALSE 75941
// exit ;
75939: GO 76001
// tmp := IsInUnit ( unit ) ;
75941: LD_ADDR_VAR 0 3
75945: PUSH
75946: LD_VAR 0 1
75950: PPUSH
75951: CALL_OW 310
75955: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75956: LD_VAR 0 3
75960: PPUSH
75961: CALL_OW 247
75965: PUSH
75966: LD_INT 2
75968: EQUAL
75969: IFFALSE 75982
// ComExitVehicle ( unit ) else
75971: LD_VAR 0 1
75975: PPUSH
75976: CALL_OW 121
75980: GO 75991
// ComExitBuilding ( unit ) ;
75982: LD_VAR 0 1
75986: PPUSH
75987: CALL_OW 122
// result := tmp ;
75991: LD_ADDR_VAR 0 2
75995: PUSH
75996: LD_VAR 0 3
76000: ST_TO_ADDR
// end ;
76001: LD_VAR 0 2
76005: RET
// export function ComExitAll ( units ) ; var i ; begin
76006: LD_INT 0
76008: PPUSH
76009: PPUSH
// if not units then
76010: LD_VAR 0 1
76014: NOT
76015: IFFALSE 76019
// exit ;
76017: GO 76045
// for i in units do
76019: LD_ADDR_VAR 0 3
76023: PUSH
76024: LD_VAR 0 1
76028: PUSH
76029: FOR_IN
76030: IFFALSE 76043
// ComExit ( i ) ;
76032: LD_VAR 0 3
76036: PPUSH
76037: CALL 75923 0 1
76041: GO 76029
76043: POP
76044: POP
// end ;
76045: LD_VAR 0 2
76049: RET
// export function ResetHc ; begin
76050: LD_INT 0
76052: PPUSH
// InitHc ;
76053: CALL_OW 19
// hc_importance := 0 ;
76057: LD_ADDR_OWVAR 32
76061: PUSH
76062: LD_INT 0
76064: ST_TO_ADDR
// end ;
76065: LD_VAR 0 1
76069: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76070: LD_INT 0
76072: PPUSH
76073: PPUSH
76074: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76075: LD_ADDR_VAR 0 6
76079: PUSH
76080: LD_VAR 0 1
76084: PUSH
76085: LD_VAR 0 3
76089: PLUS
76090: PUSH
76091: LD_INT 2
76093: DIV
76094: ST_TO_ADDR
// if _x < 0 then
76095: LD_VAR 0 6
76099: PUSH
76100: LD_INT 0
76102: LESS
76103: IFFALSE 76120
// _x := _x * - 1 ;
76105: LD_ADDR_VAR 0 6
76109: PUSH
76110: LD_VAR 0 6
76114: PUSH
76115: LD_INT 1
76117: NEG
76118: MUL
76119: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76120: LD_ADDR_VAR 0 7
76124: PUSH
76125: LD_VAR 0 2
76129: PUSH
76130: LD_VAR 0 4
76134: PLUS
76135: PUSH
76136: LD_INT 2
76138: DIV
76139: ST_TO_ADDR
// if _y < 0 then
76140: LD_VAR 0 7
76144: PUSH
76145: LD_INT 0
76147: LESS
76148: IFFALSE 76165
// _y := _y * - 1 ;
76150: LD_ADDR_VAR 0 7
76154: PUSH
76155: LD_VAR 0 7
76159: PUSH
76160: LD_INT 1
76162: NEG
76163: MUL
76164: ST_TO_ADDR
// result := [ _x , _y ] ;
76165: LD_ADDR_VAR 0 5
76169: PUSH
76170: LD_VAR 0 6
76174: PUSH
76175: LD_VAR 0 7
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: ST_TO_ADDR
// end ;
76184: LD_VAR 0 5
76188: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76189: LD_INT 0
76191: PPUSH
76192: PPUSH
76193: PPUSH
76194: PPUSH
// task := GetTaskList ( unit ) ;
76195: LD_ADDR_VAR 0 7
76199: PUSH
76200: LD_VAR 0 1
76204: PPUSH
76205: CALL_OW 437
76209: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76210: LD_VAR 0 7
76214: NOT
76215: PUSH
76216: LD_VAR 0 1
76220: PPUSH
76221: LD_VAR 0 2
76225: PPUSH
76226: CALL_OW 308
76230: NOT
76231: AND
76232: IFFALSE 76236
// exit ;
76234: GO 76354
// if IsInArea ( unit , area ) then
76236: LD_VAR 0 1
76240: PPUSH
76241: LD_VAR 0 2
76245: PPUSH
76246: CALL_OW 308
76250: IFFALSE 76268
// begin ComMoveToArea ( unit , goAway ) ;
76252: LD_VAR 0 1
76256: PPUSH
76257: LD_VAR 0 3
76261: PPUSH
76262: CALL_OW 113
// exit ;
76266: GO 76354
// end ; if task [ 1 ] [ 1 ] <> M then
76268: LD_VAR 0 7
76272: PUSH
76273: LD_INT 1
76275: ARRAY
76276: PUSH
76277: LD_INT 1
76279: ARRAY
76280: PUSH
76281: LD_STRING M
76283: NONEQUAL
76284: IFFALSE 76288
// exit ;
76286: GO 76354
// x := task [ 1 ] [ 2 ] ;
76288: LD_ADDR_VAR 0 5
76292: PUSH
76293: LD_VAR 0 7
76297: PUSH
76298: LD_INT 1
76300: ARRAY
76301: PUSH
76302: LD_INT 2
76304: ARRAY
76305: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76306: LD_ADDR_VAR 0 6
76310: PUSH
76311: LD_VAR 0 7
76315: PUSH
76316: LD_INT 1
76318: ARRAY
76319: PUSH
76320: LD_INT 3
76322: ARRAY
76323: ST_TO_ADDR
// if InArea ( x , y , area ) then
76324: LD_VAR 0 5
76328: PPUSH
76329: LD_VAR 0 6
76333: PPUSH
76334: LD_VAR 0 2
76338: PPUSH
76339: CALL_OW 309
76343: IFFALSE 76354
// ComStop ( unit ) ;
76345: LD_VAR 0 1
76349: PPUSH
76350: CALL_OW 141
// end ;
76354: LD_VAR 0 4
76358: RET
// export function Abs ( value ) ; begin
76359: LD_INT 0
76361: PPUSH
// result := value ;
76362: LD_ADDR_VAR 0 2
76366: PUSH
76367: LD_VAR 0 1
76371: ST_TO_ADDR
// if value < 0 then
76372: LD_VAR 0 1
76376: PUSH
76377: LD_INT 0
76379: LESS
76380: IFFALSE 76397
// result := value * - 1 ;
76382: LD_ADDR_VAR 0 2
76386: PUSH
76387: LD_VAR 0 1
76391: PUSH
76392: LD_INT 1
76394: NEG
76395: MUL
76396: ST_TO_ADDR
// end ;
76397: LD_VAR 0 2
76401: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76402: LD_INT 0
76404: PPUSH
76405: PPUSH
76406: PPUSH
76407: PPUSH
76408: PPUSH
76409: PPUSH
76410: PPUSH
76411: PPUSH
// if not unit or not building then
76412: LD_VAR 0 1
76416: NOT
76417: PUSH
76418: LD_VAR 0 2
76422: NOT
76423: OR
76424: IFFALSE 76428
// exit ;
76426: GO 76654
// x := GetX ( building ) ;
76428: LD_ADDR_VAR 0 4
76432: PUSH
76433: LD_VAR 0 2
76437: PPUSH
76438: CALL_OW 250
76442: ST_TO_ADDR
// y := GetY ( building ) ;
76443: LD_ADDR_VAR 0 6
76447: PUSH
76448: LD_VAR 0 2
76452: PPUSH
76453: CALL_OW 251
76457: ST_TO_ADDR
// d := GetDir ( building ) ;
76458: LD_ADDR_VAR 0 8
76462: PUSH
76463: LD_VAR 0 2
76467: PPUSH
76468: CALL_OW 254
76472: ST_TO_ADDR
// r := 4 ;
76473: LD_ADDR_VAR 0 9
76477: PUSH
76478: LD_INT 4
76480: ST_TO_ADDR
// for i := 1 to 5 do
76481: LD_ADDR_VAR 0 10
76485: PUSH
76486: DOUBLE
76487: LD_INT 1
76489: DEC
76490: ST_TO_ADDR
76491: LD_INT 5
76493: PUSH
76494: FOR_TO
76495: IFFALSE 76652
// begin _x := ShiftX ( x , d , r + i ) ;
76497: LD_ADDR_VAR 0 5
76501: PUSH
76502: LD_VAR 0 4
76506: PPUSH
76507: LD_VAR 0 8
76511: PPUSH
76512: LD_VAR 0 9
76516: PUSH
76517: LD_VAR 0 10
76521: PLUS
76522: PPUSH
76523: CALL_OW 272
76527: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76528: LD_ADDR_VAR 0 7
76532: PUSH
76533: LD_VAR 0 6
76537: PPUSH
76538: LD_VAR 0 8
76542: PPUSH
76543: LD_VAR 0 9
76547: PUSH
76548: LD_VAR 0 10
76552: PLUS
76553: PPUSH
76554: CALL_OW 273
76558: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76559: LD_VAR 0 5
76563: PPUSH
76564: LD_VAR 0 7
76568: PPUSH
76569: CALL_OW 488
76573: PUSH
76574: LD_VAR 0 5
76578: PPUSH
76579: LD_VAR 0 7
76583: PPUSH
76584: CALL_OW 428
76588: PPUSH
76589: CALL_OW 247
76593: PUSH
76594: LD_INT 3
76596: PUSH
76597: LD_INT 2
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: IN
76604: NOT
76605: AND
76606: IFFALSE 76650
// begin ComMoveXY ( unit , _x , _y ) ;
76608: LD_VAR 0 1
76612: PPUSH
76613: LD_VAR 0 5
76617: PPUSH
76618: LD_VAR 0 7
76622: PPUSH
76623: CALL_OW 111
// result := [ _x , _y ] ;
76627: LD_ADDR_VAR 0 3
76631: PUSH
76632: LD_VAR 0 5
76636: PUSH
76637: LD_VAR 0 7
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: ST_TO_ADDR
// exit ;
76646: POP
76647: POP
76648: GO 76654
// end ; end ;
76650: GO 76494
76652: POP
76653: POP
// end ;
76654: LD_VAR 0 3
76658: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76659: LD_INT 0
76661: PPUSH
76662: PPUSH
76663: PPUSH
// result := 0 ;
76664: LD_ADDR_VAR 0 3
76668: PUSH
76669: LD_INT 0
76671: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76672: LD_VAR 0 1
76676: PUSH
76677: LD_INT 0
76679: LESS
76680: PUSH
76681: LD_VAR 0 1
76685: PUSH
76686: LD_INT 8
76688: GREATER
76689: OR
76690: PUSH
76691: LD_VAR 0 2
76695: PUSH
76696: LD_INT 0
76698: LESS
76699: OR
76700: PUSH
76701: LD_VAR 0 2
76705: PUSH
76706: LD_INT 8
76708: GREATER
76709: OR
76710: IFFALSE 76714
// exit ;
76712: GO 76789
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76714: LD_ADDR_VAR 0 4
76718: PUSH
76719: LD_INT 22
76721: PUSH
76722: LD_VAR 0 2
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: PPUSH
76731: CALL_OW 69
76735: PUSH
76736: FOR_IN
76737: IFFALSE 76787
// begin un := UnitShoot ( i ) ;
76739: LD_ADDR_VAR 0 5
76743: PUSH
76744: LD_VAR 0 4
76748: PPUSH
76749: CALL_OW 504
76753: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76754: LD_VAR 0 5
76758: PPUSH
76759: CALL_OW 255
76763: PUSH
76764: LD_VAR 0 1
76768: EQUAL
76769: IFFALSE 76785
// begin result := un ;
76771: LD_ADDR_VAR 0 3
76775: PUSH
76776: LD_VAR 0 5
76780: ST_TO_ADDR
// exit ;
76781: POP
76782: POP
76783: GO 76789
// end ; end ;
76785: GO 76736
76787: POP
76788: POP
// end ;
76789: LD_VAR 0 3
76793: RET
// export function GetCargoBay ( units ) ; begin
76794: LD_INT 0
76796: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76797: LD_ADDR_VAR 0 2
76801: PUSH
76802: LD_VAR 0 1
76806: PPUSH
76807: LD_INT 2
76809: PUSH
76810: LD_INT 34
76812: PUSH
76813: LD_INT 12
76815: PUSH
76816: EMPTY
76817: LIST
76818: LIST
76819: PUSH
76820: LD_INT 34
76822: PUSH
76823: LD_INT 51
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 34
76832: PUSH
76833: LD_INT 32
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 34
76842: PUSH
76843: LD_EXP 161
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: PPUSH
76859: CALL_OW 72
76863: ST_TO_ADDR
// end ;
76864: LD_VAR 0 2
76868: RET
// export function Negate ( value ) ; begin
76869: LD_INT 0
76871: PPUSH
// result := not value ;
76872: LD_ADDR_VAR 0 2
76876: PUSH
76877: LD_VAR 0 1
76881: NOT
76882: ST_TO_ADDR
// end ;
76883: LD_VAR 0 2
76887: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
76888: LD_INT 0
76890: PPUSH
// if x1 = x2 then
76891: LD_VAR 0 1
76895: PUSH
76896: LD_VAR 0 3
76900: EQUAL
76901: IFFALSE 76935
// begin if y1 > y2 then
76903: LD_VAR 0 2
76907: PUSH
76908: LD_VAR 0 4
76912: GREATER
76913: IFFALSE 76925
// result := 0 else
76915: LD_ADDR_VAR 0 5
76919: PUSH
76920: LD_INT 0
76922: ST_TO_ADDR
76923: GO 76933
// result := 3 ;
76925: LD_ADDR_VAR 0 5
76929: PUSH
76930: LD_INT 3
76932: ST_TO_ADDR
// exit ;
76933: GO 77021
// end ; if y1 = y2 then
76935: LD_VAR 0 2
76939: PUSH
76940: LD_VAR 0 4
76944: EQUAL
76945: IFFALSE 76979
// begin if x1 > x2 then
76947: LD_VAR 0 1
76951: PUSH
76952: LD_VAR 0 3
76956: GREATER
76957: IFFALSE 76969
// result := 1 else
76959: LD_ADDR_VAR 0 5
76963: PUSH
76964: LD_INT 1
76966: ST_TO_ADDR
76967: GO 76977
// result := 4 ;
76969: LD_ADDR_VAR 0 5
76973: PUSH
76974: LD_INT 4
76976: ST_TO_ADDR
// exit ;
76977: GO 77021
// end ; if x1 > x2 and y1 > y2 then
76979: LD_VAR 0 1
76983: PUSH
76984: LD_VAR 0 3
76988: GREATER
76989: PUSH
76990: LD_VAR 0 2
76994: PUSH
76995: LD_VAR 0 4
76999: GREATER
77000: AND
77001: IFFALSE 77013
// result := 2 else
77003: LD_ADDR_VAR 0 5
77007: PUSH
77008: LD_INT 2
77010: ST_TO_ADDR
77011: GO 77021
// result := 5 ;
77013: LD_ADDR_VAR 0 5
77017: PUSH
77018: LD_INT 5
77020: ST_TO_ADDR
// end ;
77021: LD_VAR 0 5
77025: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77026: LD_INT 0
77028: PPUSH
77029: PPUSH
// if not driver or not IsInUnit ( driver ) then
77030: LD_VAR 0 1
77034: NOT
77035: PUSH
77036: LD_VAR 0 1
77040: PPUSH
77041: CALL_OW 310
77045: NOT
77046: OR
77047: IFFALSE 77051
// exit ;
77049: GO 77141
// vehicle := IsInUnit ( driver ) ;
77051: LD_ADDR_VAR 0 3
77055: PUSH
77056: LD_VAR 0 1
77060: PPUSH
77061: CALL_OW 310
77065: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77066: LD_VAR 0 1
77070: PPUSH
77071: LD_STRING \
77073: PUSH
77074: LD_INT 0
77076: PUSH
77077: LD_INT 0
77079: PUSH
77080: LD_INT 0
77082: PUSH
77083: LD_INT 0
77085: PUSH
77086: LD_INT 0
77088: PUSH
77089: LD_INT 0
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: PUSH
77101: LD_STRING E
77103: PUSH
77104: LD_INT 0
77106: PUSH
77107: LD_INT 0
77109: PUSH
77110: LD_VAR 0 3
77114: PUSH
77115: LD_INT 0
77117: PUSH
77118: LD_INT 0
77120: PUSH
77121: LD_INT 0
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: LIST
77128: LIST
77129: LIST
77130: LIST
77131: LIST
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: PPUSH
77137: CALL_OW 446
// end ;
77141: LD_VAR 0 2
77145: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77146: LD_INT 0
77148: PPUSH
77149: PPUSH
// if not driver or not IsInUnit ( driver ) then
77150: LD_VAR 0 1
77154: NOT
77155: PUSH
77156: LD_VAR 0 1
77160: PPUSH
77161: CALL_OW 310
77165: NOT
77166: OR
77167: IFFALSE 77171
// exit ;
77169: GO 77261
// vehicle := IsInUnit ( driver ) ;
77171: LD_ADDR_VAR 0 3
77175: PUSH
77176: LD_VAR 0 1
77180: PPUSH
77181: CALL_OW 310
77185: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77186: LD_VAR 0 1
77190: PPUSH
77191: LD_STRING \
77193: PUSH
77194: LD_INT 0
77196: PUSH
77197: LD_INT 0
77199: PUSH
77200: LD_INT 0
77202: PUSH
77203: LD_INT 0
77205: PUSH
77206: LD_INT 0
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: PUSH
77221: LD_STRING E
77223: PUSH
77224: LD_INT 0
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: LD_VAR 0 3
77234: PUSH
77235: LD_INT 0
77237: PUSH
77238: LD_INT 0
77240: PUSH
77241: LD_INT 0
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: LIST
77248: LIST
77249: LIST
77250: LIST
77251: LIST
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PPUSH
77257: CALL_OW 447
// end ;
77261: LD_VAR 0 2
77265: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77266: LD_INT 0
77268: PPUSH
77269: PPUSH
77270: PPUSH
// tmp := [ ] ;
77271: LD_ADDR_VAR 0 5
77275: PUSH
77276: EMPTY
77277: ST_TO_ADDR
// for i in units do
77278: LD_ADDR_VAR 0 4
77282: PUSH
77283: LD_VAR 0 1
77287: PUSH
77288: FOR_IN
77289: IFFALSE 77327
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77291: LD_ADDR_VAR 0 5
77295: PUSH
77296: LD_VAR 0 5
77300: PPUSH
77301: LD_VAR 0 5
77305: PUSH
77306: LD_INT 1
77308: PLUS
77309: PPUSH
77310: LD_VAR 0 4
77314: PPUSH
77315: CALL_OW 256
77319: PPUSH
77320: CALL_OW 2
77324: ST_TO_ADDR
77325: GO 77288
77327: POP
77328: POP
// if not tmp then
77329: LD_VAR 0 5
77333: NOT
77334: IFFALSE 77338
// exit ;
77336: GO 77386
// if asc then
77338: LD_VAR 0 2
77342: IFFALSE 77366
// result := SortListByListAsc ( units , tmp ) else
77344: LD_ADDR_VAR 0 3
77348: PUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: LD_VAR 0 5
77358: PPUSH
77359: CALL_OW 76
77363: ST_TO_ADDR
77364: GO 77386
// result := SortListByListDesc ( units , tmp ) ;
77366: LD_ADDR_VAR 0 3
77370: PUSH
77371: LD_VAR 0 1
77375: PPUSH
77376: LD_VAR 0 5
77380: PPUSH
77381: CALL_OW 77
77385: ST_TO_ADDR
// end ;
77386: LD_VAR 0 3
77390: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77391: LD_INT 0
77393: PPUSH
77394: PPUSH
// task := GetTaskList ( mech ) ;
77395: LD_ADDR_VAR 0 4
77399: PUSH
77400: LD_VAR 0 1
77404: PPUSH
77405: CALL_OW 437
77409: ST_TO_ADDR
// if not task then
77410: LD_VAR 0 4
77414: NOT
77415: IFFALSE 77419
// exit ;
77417: GO 77461
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77419: LD_ADDR_VAR 0 3
77423: PUSH
77424: LD_VAR 0 4
77428: PUSH
77429: LD_INT 1
77431: ARRAY
77432: PUSH
77433: LD_INT 1
77435: ARRAY
77436: PUSH
77437: LD_STRING r
77439: EQUAL
77440: PUSH
77441: LD_VAR 0 4
77445: PUSH
77446: LD_INT 1
77448: ARRAY
77449: PUSH
77450: LD_INT 4
77452: ARRAY
77453: PUSH
77454: LD_VAR 0 2
77458: EQUAL
77459: AND
77460: ST_TO_ADDR
// end ;
77461: LD_VAR 0 3
77465: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77466: LD_INT 0
77468: PPUSH
// SetDir ( unit , d ) ;
77469: LD_VAR 0 1
77473: PPUSH
77474: LD_VAR 0 4
77478: PPUSH
77479: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77483: LD_VAR 0 1
77487: PPUSH
77488: LD_VAR 0 2
77492: PPUSH
77493: LD_VAR 0 3
77497: PPUSH
77498: LD_VAR 0 5
77502: PPUSH
77503: CALL_OW 48
// end ;
77507: LD_VAR 0 6
77511: RET
// export function ToNaturalNumber ( number ) ; begin
77512: LD_INT 0
77514: PPUSH
// result := number div 1 ;
77515: LD_ADDR_VAR 0 2
77519: PUSH
77520: LD_VAR 0 1
77524: PUSH
77525: LD_INT 1
77527: DIV
77528: ST_TO_ADDR
// if number < 0 then
77529: LD_VAR 0 1
77533: PUSH
77534: LD_INT 0
77536: LESS
77537: IFFALSE 77547
// result := 0 ;
77539: LD_ADDR_VAR 0 2
77543: PUSH
77544: LD_INT 0
77546: ST_TO_ADDR
// end ;
77547: LD_VAR 0 2
77551: RET
// export function SortByClass ( units , class ) ; var un ; begin
77552: LD_INT 0
77554: PPUSH
77555: PPUSH
// if not units or not class then
77556: LD_VAR 0 1
77560: NOT
77561: PUSH
77562: LD_VAR 0 2
77566: NOT
77567: OR
77568: IFFALSE 77572
// exit ;
77570: GO 77667
// result := [ ] ;
77572: LD_ADDR_VAR 0 3
77576: PUSH
77577: EMPTY
77578: ST_TO_ADDR
// for un in units do
77579: LD_ADDR_VAR 0 4
77583: PUSH
77584: LD_VAR 0 1
77588: PUSH
77589: FOR_IN
77590: IFFALSE 77665
// if GetClass ( un ) = class then
77592: LD_VAR 0 4
77596: PPUSH
77597: CALL_OW 257
77601: PUSH
77602: LD_VAR 0 2
77606: EQUAL
77607: IFFALSE 77634
// result := Insert ( result , 1 , un ) else
77609: LD_ADDR_VAR 0 3
77613: PUSH
77614: LD_VAR 0 3
77618: PPUSH
77619: LD_INT 1
77621: PPUSH
77622: LD_VAR 0 4
77626: PPUSH
77627: CALL_OW 2
77631: ST_TO_ADDR
77632: GO 77663
// result := Replace ( result , result + 1 , un ) ;
77634: LD_ADDR_VAR 0 3
77638: PUSH
77639: LD_VAR 0 3
77643: PPUSH
77644: LD_VAR 0 3
77648: PUSH
77649: LD_INT 1
77651: PLUS
77652: PPUSH
77653: LD_VAR 0 4
77657: PPUSH
77658: CALL_OW 1
77662: ST_TO_ADDR
77663: GO 77589
77665: POP
77666: POP
// end ;
77667: LD_VAR 0 3
77671: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77672: LD_INT 0
77674: PPUSH
77675: PPUSH
77676: PPUSH
77677: PPUSH
77678: PPUSH
77679: PPUSH
77680: PPUSH
// result := [ ] ;
77681: LD_ADDR_VAR 0 4
77685: PUSH
77686: EMPTY
77687: ST_TO_ADDR
// if x - r < 0 then
77688: LD_VAR 0 1
77692: PUSH
77693: LD_VAR 0 3
77697: MINUS
77698: PUSH
77699: LD_INT 0
77701: LESS
77702: IFFALSE 77714
// min_x := 0 else
77704: LD_ADDR_VAR 0 8
77708: PUSH
77709: LD_INT 0
77711: ST_TO_ADDR
77712: GO 77730
// min_x := x - r ;
77714: LD_ADDR_VAR 0 8
77718: PUSH
77719: LD_VAR 0 1
77723: PUSH
77724: LD_VAR 0 3
77728: MINUS
77729: ST_TO_ADDR
// if y - r < 0 then
77730: LD_VAR 0 2
77734: PUSH
77735: LD_VAR 0 3
77739: MINUS
77740: PUSH
77741: LD_INT 0
77743: LESS
77744: IFFALSE 77756
// min_y := 0 else
77746: LD_ADDR_VAR 0 7
77750: PUSH
77751: LD_INT 0
77753: ST_TO_ADDR
77754: GO 77772
// min_y := y - r ;
77756: LD_ADDR_VAR 0 7
77760: PUSH
77761: LD_VAR 0 2
77765: PUSH
77766: LD_VAR 0 3
77770: MINUS
77771: ST_TO_ADDR
// max_x := x + r ;
77772: LD_ADDR_VAR 0 9
77776: PUSH
77777: LD_VAR 0 1
77781: PUSH
77782: LD_VAR 0 3
77786: PLUS
77787: ST_TO_ADDR
// max_y := y + r ;
77788: LD_ADDR_VAR 0 10
77792: PUSH
77793: LD_VAR 0 2
77797: PUSH
77798: LD_VAR 0 3
77802: PLUS
77803: ST_TO_ADDR
// for _x = min_x to max_x do
77804: LD_ADDR_VAR 0 5
77808: PUSH
77809: DOUBLE
77810: LD_VAR 0 8
77814: DEC
77815: ST_TO_ADDR
77816: LD_VAR 0 9
77820: PUSH
77821: FOR_TO
77822: IFFALSE 77923
// for _y = min_y to max_y do
77824: LD_ADDR_VAR 0 6
77828: PUSH
77829: DOUBLE
77830: LD_VAR 0 7
77834: DEC
77835: ST_TO_ADDR
77836: LD_VAR 0 10
77840: PUSH
77841: FOR_TO
77842: IFFALSE 77919
// begin if not ValidHex ( _x , _y ) then
77844: LD_VAR 0 5
77848: PPUSH
77849: LD_VAR 0 6
77853: PPUSH
77854: CALL_OW 488
77858: NOT
77859: IFFALSE 77863
// continue ;
77861: GO 77841
// if GetResourceTypeXY ( _x , _y ) then
77863: LD_VAR 0 5
77867: PPUSH
77868: LD_VAR 0 6
77872: PPUSH
77873: CALL_OW 283
77877: IFFALSE 77917
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77879: LD_ADDR_VAR 0 4
77883: PUSH
77884: LD_VAR 0 4
77888: PPUSH
77889: LD_VAR 0 4
77893: PUSH
77894: LD_INT 1
77896: PLUS
77897: PPUSH
77898: LD_VAR 0 5
77902: PUSH
77903: LD_VAR 0 6
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: PPUSH
77912: CALL_OW 1
77916: ST_TO_ADDR
// end ;
77917: GO 77841
77919: POP
77920: POP
77921: GO 77821
77923: POP
77924: POP
// end ;
77925: LD_VAR 0 4
77929: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
77930: LD_INT 0
77932: PPUSH
77933: PPUSH
77934: PPUSH
77935: PPUSH
77936: PPUSH
77937: PPUSH
// if not units then
77938: LD_VAR 0 1
77942: NOT
77943: IFFALSE 77947
// exit ;
77945: GO 78348
// result := UnitFilter ( units , [ f_ok ] ) ;
77947: LD_ADDR_VAR 0 3
77951: PUSH
77952: LD_VAR 0 1
77956: PPUSH
77957: LD_INT 50
77959: PUSH
77960: EMPTY
77961: LIST
77962: PPUSH
77963: CALL_OW 72
77967: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77968: LD_ADDR_VAR 0 7
77972: PUSH
77973: LD_VAR 0 1
77977: PUSH
77978: LD_INT 1
77980: ARRAY
77981: PPUSH
77982: CALL_OW 255
77986: ST_TO_ADDR
// if not result then
77987: LD_VAR 0 3
77991: NOT
77992: IFFALSE 77996
// exit ;
77994: GO 78348
// for i in result do
77996: LD_ADDR_VAR 0 4
78000: PUSH
78001: LD_VAR 0 3
78005: PUSH
78006: FOR_IN
78007: IFFALSE 78346
// begin tag := GetTag ( i ) + 1 ;
78009: LD_ADDR_VAR 0 8
78013: PUSH
78014: LD_VAR 0 4
78018: PPUSH
78019: CALL_OW 110
78023: PUSH
78024: LD_INT 1
78026: PLUS
78027: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78028: LD_ADDR_VAR 0 6
78032: PUSH
78033: LD_VAR 0 4
78037: PPUSH
78038: CALL_OW 250
78042: PPUSH
78043: LD_VAR 0 4
78047: PPUSH
78048: CALL_OW 251
78052: PPUSH
78053: LD_INT 6
78055: PPUSH
78056: CALL 77672 0 3
78060: ST_TO_ADDR
// if cr then
78061: LD_VAR 0 6
78065: IFFALSE 78104
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78067: LD_VAR 0 4
78071: PPUSH
78072: LD_VAR 0 6
78076: PUSH
78077: LD_INT 1
78079: ARRAY
78080: PUSH
78081: LD_INT 1
78083: ARRAY
78084: PPUSH
78085: LD_VAR 0 6
78089: PUSH
78090: LD_INT 1
78092: ARRAY
78093: PUSH
78094: LD_INT 2
78096: ARRAY
78097: PPUSH
78098: CALL_OW 116
78102: GO 78344
// if path > tag then
78104: LD_VAR 0 2
78108: PUSH
78109: LD_VAR 0 8
78113: GREATER
78114: IFFALSE 78292
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
78116: LD_ADDR_VAR 0 5
78120: PUSH
78121: LD_INT 81
78123: PUSH
78124: LD_VAR 0 7
78128: PUSH
78129: EMPTY
78130: LIST
78131: LIST
78132: PUSH
78133: LD_INT 91
78135: PUSH
78136: LD_VAR 0 4
78140: PUSH
78141: LD_INT 12
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: LIST
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PPUSH
78153: CALL_OW 69
78157: ST_TO_ADDR
// if enemy then
78158: LD_VAR 0 5
78162: IFFALSE 78190
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78164: LD_VAR 0 4
78168: PPUSH
78169: LD_VAR 0 5
78173: PPUSH
78174: LD_VAR 0 4
78178: PPUSH
78179: CALL_OW 74
78183: PPUSH
78184: CALL_OW 115
78188: GO 78290
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78190: LD_VAR 0 4
78194: PPUSH
78195: LD_VAR 0 2
78199: PUSH
78200: LD_VAR 0 8
78204: ARRAY
78205: PUSH
78206: LD_INT 1
78208: ARRAY
78209: PPUSH
78210: LD_VAR 0 2
78214: PUSH
78215: LD_VAR 0 8
78219: ARRAY
78220: PUSH
78221: LD_INT 2
78223: ARRAY
78224: PPUSH
78225: CALL_OW 297
78229: PUSH
78230: LD_INT 6
78232: GREATER
78233: IFFALSE 78276
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78235: LD_VAR 0 4
78239: PPUSH
78240: LD_VAR 0 2
78244: PUSH
78245: LD_VAR 0 8
78249: ARRAY
78250: PUSH
78251: LD_INT 1
78253: ARRAY
78254: PPUSH
78255: LD_VAR 0 2
78259: PUSH
78260: LD_VAR 0 8
78264: ARRAY
78265: PUSH
78266: LD_INT 2
78268: ARRAY
78269: PPUSH
78270: CALL_OW 114
78274: GO 78290
// SetTag ( i , tag ) ;
78276: LD_VAR 0 4
78280: PPUSH
78281: LD_VAR 0 8
78285: PPUSH
78286: CALL_OW 109
// end else
78290: GO 78344
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78292: LD_ADDR_VAR 0 5
78296: PUSH
78297: LD_INT 81
78299: PUSH
78300: LD_VAR 0 7
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: PPUSH
78309: CALL_OW 69
78313: ST_TO_ADDR
// if enemy then
78314: LD_VAR 0 5
78318: IFFALSE 78344
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78320: LD_VAR 0 4
78324: PPUSH
78325: LD_VAR 0 5
78329: PPUSH
78330: LD_VAR 0 4
78334: PPUSH
78335: CALL_OW 74
78339: PPUSH
78340: CALL_OW 115
// end ; end ;
78344: GO 78006
78346: POP
78347: POP
// end ; end_of_file
78348: LD_VAR 0 3
78352: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78353: LD_VAR 0 1
78357: PUSH
78358: LD_INT 200
78360: DOUBLE
78361: GREATEREQUAL
78362: IFFALSE 78370
78364: LD_INT 299
78366: DOUBLE
78367: LESSEQUAL
78368: IFTRUE 78372
78370: GO 78404
78372: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78373: LD_VAR 0 1
78377: PPUSH
78378: LD_VAR 0 2
78382: PPUSH
78383: LD_VAR 0 3
78387: PPUSH
78388: LD_VAR 0 4
78392: PPUSH
78393: LD_VAR 0 5
78397: PPUSH
78398: CALL 34747 0 5
78402: GO 78481
78404: LD_INT 300
78406: DOUBLE
78407: GREATEREQUAL
78408: IFFALSE 78416
78410: LD_INT 399
78412: DOUBLE
78413: LESSEQUAL
78414: IFTRUE 78418
78416: GO 78480
78418: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78419: LD_VAR 0 1
78423: PPUSH
78424: LD_VAR 0 2
78428: PPUSH
78429: LD_VAR 0 3
78433: PPUSH
78434: LD_VAR 0 4
78438: PPUSH
78439: LD_VAR 0 5
78443: PPUSH
78444: LD_VAR 0 6
78448: PPUSH
78449: LD_VAR 0 7
78453: PPUSH
78454: LD_VAR 0 8
78458: PPUSH
78459: LD_VAR 0 9
78463: PPUSH
78464: LD_VAR 0 10
78468: PPUSH
78469: LD_VAR 0 11
78473: PPUSH
78474: CALL 32645 0 11
78478: GO 78481
78480: POP
// end ;
78481: PPOPN 11
78483: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78484: LD_VAR 0 1
78488: PPUSH
78489: LD_VAR 0 2
78493: PPUSH
78494: LD_VAR 0 3
78498: PPUSH
78499: LD_VAR 0 4
78503: PPUSH
78504: LD_VAR 0 5
78508: PPUSH
78509: CALL 34739 0 5
// end ;
78513: PPOPN 5
78515: END
