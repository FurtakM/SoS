// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// RandomizeAll ;
   8: CALL_OW 11
// SetBName ( kirov , kirov ) ;
  12: LD_INT 71
  14: PPUSH
  15: LD_STRING kirov
  17: PPUSH
  18: CALL_OW 500
// SetBName ( beria , beria ) ;
  22: LD_INT 106
  24: PPUSH
  25: LD_STRING beria
  27: PPUSH
  28: CALL_OW 500
// InitMapConfig ;
  32: CALL 49 0 0
// PrepareRussian ;
  36: CALL 462 0 0
// MissionIntro ;
  40: CALL 1352 0 0
// end ; end_of_file
  44: LD_VAR 0 1
  48: RET
// export function InitMapConfig ; begin
  49: LD_INT 0
  51: PPUSH
// BaseMapConfig ;
  52: CALL 65 0 0
// MissionMapConfig ;
  56: CALL 151 0 0
// end ;
  60: LD_VAR 0 1
  64: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
  65: LD_INT 0
  67: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
  68: LD_ADDR_EXP 1
  72: PUSH
  73: LD_INT 5
  75: PUSH
  76: LD_INT 4
  78: PUSH
  79: LD_INT 2
  81: PUSH
  82: LD_INT 2
  84: PUSH
  85: EMPTY
  86: LIST
  87: LIST
  88: LIST
  89: LIST
  90: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
  91: LD_ADDR_EXP 2
  95: PUSH
  96: LD_INT 2
  98: PUSH
  99: LD_INT 2
 101: PUSH
 102: LD_INT 2
 104: PUSH
 105: LD_INT 2
 107: PUSH
 108: EMPTY
 109: LIST
 110: LIST
 111: LIST
 112: LIST
 113: ST_TO_ADDR
// animalsAgression = 0 ;
 114: LD_ADDR_EXP 3
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// debugMode = 0 ;
 122: LD_ADDR_EXP 6
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// missionPrefix = 02_ ;
 130: LD_ADDR_EXP 4
 134: PUSH
 135: LD_STRING 02_
 137: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 138: LD_ADDR_EXP 5
 142: PUSH
 143: LD_STRING 01_
 145: ST_TO_ADDR
// end ;
 146: LD_VAR 0 1
 150: RET
// export meetWithKurinPositions ; function MissionMapConfig ; begin
 151: LD_INT 0
 153: PPUSH
// meetWithKurinPositions = [ [ 165 , 111 ] , [ 166 , 111 ] , [ 167 , 111 ] , [ 168 , 111 ] , [ 166 , 112 ] , [ 167 , 112 ] , [ 168 , 112 ] ] ;
 154: LD_ADDR_EXP 7
 158: PUSH
 159: LD_INT 165
 161: PUSH
 162: LD_INT 111
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: PUSH
 169: LD_INT 166
 171: PUSH
 172: LD_INT 111
 174: PUSH
 175: EMPTY
 176: LIST
 177: LIST
 178: PUSH
 179: LD_INT 167
 181: PUSH
 182: LD_INT 111
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: PUSH
 189: LD_INT 168
 191: PUSH
 192: LD_INT 111
 194: PUSH
 195: EMPTY
 196: LIST
 197: LIST
 198: PUSH
 199: LD_INT 166
 201: PUSH
 202: LD_INT 112
 204: PUSH
 205: EMPTY
 206: LIST
 207: LIST
 208: PUSH
 209: LD_INT 167
 211: PUSH
 212: LD_INT 112
 214: PUSH
 215: EMPTY
 216: LIST
 217: LIST
 218: PUSH
 219: LD_INT 168
 221: PUSH
 222: LD_INT 112
 224: PUSH
 225: EMPTY
 226: LIST
 227: LIST
 228: PUSH
 229: EMPTY
 230: LIST
 231: LIST
 232: LIST
 233: LIST
 234: LIST
 235: LIST
 236: LIST
 237: ST_TO_ADDR
// end ;
 238: LD_VAR 0 1
 242: RET
// every 0 0$1 trigger debugMode do var i ;
 243: LD_EXP 6
 247: IFFALSE 459
 249: GO 251
 251: DISABLE
 252: LD_INT 0
 254: PPUSH
// begin enable ;
 255: ENABLE
// FogOff ( your_side ) ;
 256: LD_OWVAR 2
 260: PPUSH
 261: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 265: LD_ADDR_VAR 0 1
 269: PUSH
 270: LD_INT 22
 272: PUSH
 273: LD_OWVAR 2
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: LD_INT 2
 284: PUSH
 285: LD_INT 21
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 21
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: LIST
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PPUSH
 314: CALL_OW 69
 318: PUSH
 319: FOR_IN
 320: IFFALSE 336
// SetLives ( i , 1000 ) ;
 322: LD_VAR 0 1
 326: PPUSH
 327: LD_INT 1000
 329: PPUSH
 330: CALL_OW 234
 334: GO 319
 336: POP
 337: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 338: LD_ADDR_VAR 0 1
 342: PUSH
 343: LD_INT 22
 345: PUSH
 346: LD_OWVAR 2
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: LD_INT 2
 357: PUSH
 358: LD_INT 30
 360: PUSH
 361: LD_INT 0
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 30
 370: PUSH
 371: LD_INT 1
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: LIST
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: FOR_IN
 393: IFFALSE 457
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 395: LD_VAR 0 1
 399: PPUSH
 400: CALL_OW 274
 404: PPUSH
 405: LD_INT 1
 407: PPUSH
 408: LD_INT 9999
 410: PPUSH
 411: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 2
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 435: LD_VAR 0 1
 439: PPUSH
 440: CALL_OW 274
 444: PPUSH
 445: LD_INT 3
 447: PPUSH
 448: LD_INT 9999
 450: PPUSH
 451: CALL_OW 277
// end ;
 455: GO 392
 457: POP
 458: POP
// end ; end_of_file
 459: PPOPN 1
 461: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , otherKirovUnits ; export Kovalyuk , randomMech ; export function PrepareRussian ; begin
 462: LD_INT 0
 464: PPUSH
// PrepareCharactersFromPreviousMission ;
 465: CALL 478 0 0
// PrepareKirovBase ;
 469: CALL 664 0 0
// end ;
 473: LD_VAR 0 1
 477: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
 478: LD_INT 0
 480: PPUSH
 481: PPUSH
// uc_side = 3 ;
 482: LD_ADDR_OWVAR 20
 486: PUSH
 487: LD_INT 3
 489: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
 490: LD_ADDR_EXP 8
 494: PUSH
 495: LD_STRING Burlak
 497: PPUSH
 498: LD_INT 1
 500: PPUSH
 501: CALL 956 0 2
 505: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
 506: LD_ADDR_EXP 9
 510: PUSH
 511: LD_STRING Gnyevko
 513: PPUSH
 514: LD_INT 1
 516: PPUSH
 517: CALL 956 0 2
 521: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
 522: LD_ADDR_EXP 10
 526: PUSH
 527: LD_STRING Belkov
 529: PPUSH
 530: LD_INT 1
 532: PPUSH
 533: CALL 956 0 2
 537: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
 538: LD_ADDR_EXP 11
 542: PUSH
 543: LD_STRING Kirilenkova
 545: PPUSH
 546: LD_INT 1
 548: PPUSH
 549: CALL 956 0 2
 553: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
 554: LD_EXP 8
 558: PPUSH
 559: LD_INT 5
 561: PPUSH
 562: LD_INT 0
 564: PPUSH
 565: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
 569: LD_EXP 9
 573: PPUSH
 574: LD_INT 3
 576: PPUSH
 577: LD_INT 0
 579: PPUSH
 580: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
 584: LD_EXP 10
 588: PPUSH
 589: LD_INT 3
 591: PPUSH
 592: LD_INT 0
 594: PPUSH
 595: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
 599: LD_EXP 11
 603: PPUSH
 604: LD_INT 3
 606: PPUSH
 607: LD_INT 0
 609: PPUSH
 610: CALL_OW 49
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
 614: LD_ADDR_EXP 12
 618: PUSH
 619: LD_STRING 01_other_survivors
 621: PPUSH
 622: CALL_OW 31
 626: ST_TO_ADDR
// for i in other_survivors do
 627: LD_ADDR_VAR 0 2
 631: PUSH
 632: LD_EXP 12
 636: PUSH
 637: FOR_IN
 638: IFFALSE 657
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
 640: LD_VAR 0 2
 644: PPUSH
 645: LD_INT 3
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 49
 655: GO 637
 657: POP
 658: POP
// end ;
 659: LD_VAR 0 1
 663: RET
// function PrepareKirovBase ; var i , un ; begin
 664: LD_INT 0
 666: PPUSH
 667: PPUSH
 668: PPUSH
// uc_side = 6 ;
 669: LD_ADDR_OWVAR 20
 673: PUSH
 674: LD_INT 6
 676: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
 677: LD_ADDR_EXP 13
 681: PUSH
 682: LD_STRING Kurin
 684: PPUSH
 685: LD_INT 0
 687: PPUSH
 688: CALL 956 0 2
 692: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
 693: LD_ADDR_EXP 15
 697: PUSH
 698: LD_STRING Kovalyuk
 700: PPUSH
 701: LD_INT 0
 703: PPUSH
 704: CALL 956 0 2
 708: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
 709: LD_EXP 13
 713: PPUSH
 714: LD_INT 4
 716: PPUSH
 717: LD_INT 0
 719: PPUSH
 720: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
 724: LD_EXP 15
 728: PPUSH
 729: LD_INT 161
 731: PPUSH
 732: LD_INT 108
 734: PPUSH
 735: LD_INT 6
 737: PPUSH
 738: LD_INT 0
 740: PPUSH
 741: CALL_OW 50
// ComHold ( Kurin ) ;
 745: LD_EXP 13
 749: PPUSH
 750: CALL_OW 140
// otherKirovUnits = [ ] ;
 754: LD_ADDR_EXP 14
 758: PUSH
 759: EMPTY
 760: ST_TO_ADDR
// for i := 1 to 7 do
 761: LD_ADDR_VAR 0 2
 765: PUSH
 766: DOUBLE
 767: LD_INT 1
 769: DEC
 770: ST_TO_ADDR
 771: LD_INT 7
 773: PUSH
 774: FOR_TO
 775: IFFALSE 898
// begin uc_nation = 3 ;
 777: LD_ADDR_OWVAR 21
 781: PUSH
 782: LD_INT 3
 784: ST_TO_ADDR
// hc_gallery =  ;
 785: LD_ADDR_OWVAR 33
 789: PUSH
 790: LD_STRING 
 792: ST_TO_ADDR
// hc_name =  ;
 793: LD_ADDR_OWVAR 26
 797: PUSH
 798: LD_STRING 
 800: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 3 , 5 ) ) ;
 801: LD_INT 0
 803: PPUSH
 804: LD_INT 1
 806: PUSH
 807: LD_INT 2
 809: PUSH
 810: LD_INT 3
 812: PUSH
 813: LD_INT 4
 815: PUSH
 816: EMPTY
 817: LIST
 818: LIST
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 4
 827: PPUSH
 828: CALL_OW 12
 832: ARRAY
 833: PPUSH
 834: LD_INT 3
 836: PPUSH
 837: LD_INT 5
 839: PPUSH
 840: CALL_OW 12
 844: PPUSH
 845: CALL_OW 380
// un = CreateHuman ;
 849: LD_ADDR_VAR 0 3
 853: PUSH
 854: CALL_OW 44
 858: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
 859: LD_ADDR_EXP 14
 863: PUSH
 864: LD_EXP 14
 868: PUSH
 869: LD_VAR 0 3
 873: ADD
 874: ST_TO_ADDR
// PlaceUnitXYR ( un , 161 , 108 , 6 , false ) ;
 875: LD_VAR 0 3
 879: PPUSH
 880: LD_INT 161
 882: PPUSH
 883: LD_INT 108
 885: PPUSH
 886: LD_INT 6
 888: PPUSH
 889: LD_INT 0
 891: PPUSH
 892: CALL_OW 50
// end ;
 896: GO 774
 898: POP
 899: POP
// if not TestCharacters ( Gnyevko ) then
 900: LD_STRING Gnyevko
 902: PPUSH
 903: CALL_OW 28
 907: NOT
 908: IFFALSE 951
// begin PrepareMechanic ( sex_male , 3 ) ;
 910: LD_INT 1
 912: PPUSH
 913: LD_INT 3
 915: PPUSH
 916: CALL_OW 383
// randomMech = CreateHuman ;
 920: LD_ADDR_EXP 16
 924: PUSH
 925: CALL_OW 44
 929: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
 930: LD_EXP 16
 934: PPUSH
 935: LD_INT 161
 937: PPUSH
 938: LD_INT 108
 940: PPUSH
 941: LD_INT 6
 943: PPUSH
 944: LD_INT 0
 946: PPUSH
 947: CALL_OW 50
// end ; end ; end_of_file end_of_file
 951: LD_VAR 0 1
 955: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 956: LD_INT 0
 958: PPUSH
 959: PPUSH
// if exist_mode then
 960: LD_VAR 0 2
 964: IFFALSE 989
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
 966: LD_ADDR_VAR 0 4
 970: PUSH
 971: LD_EXP 5
 975: PUSH
 976: LD_VAR 0 1
 980: STR
 981: PPUSH
 982: CALL_OW 34
 986: ST_TO_ADDR
 987: GO 1004
// unit := NewCharacter ( ident ) ;
 989: LD_ADDR_VAR 0 4
 993: PUSH
 994: LD_VAR 0 1
 998: PPUSH
 999: CALL_OW 25
1003: ST_TO_ADDR
// result := unit ;
1004: LD_ADDR_VAR 0 3
1008: PUSH
1009: LD_VAR 0 4
1013: ST_TO_ADDR
// end ;
1014: LD_VAR 0 3
1018: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
1019: LD_INT 0
1021: PPUSH
1022: PPUSH
1023: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
1024: LD_ADDR_VAR 0 1
1028: PUSH
1029: LD_VAR 0 1
1033: PUSH
1034: LD_EXP 8
1038: PUSH
1039: LD_EXP 9
1043: PUSH
1044: LD_EXP 10
1048: PUSH
1049: LD_EXP 11
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: LIST
1058: LIST
1059: DIFF
1060: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
1061: LD_ADDR_VAR 0 7
1065: PUSH
1066: LD_VAR 0 1
1070: PUSH
1071: LD_INT 1
1073: PPUSH
1074: LD_VAR 0 1
1078: PPUSH
1079: CALL_OW 12
1083: ARRAY
1084: ST_TO_ADDR
// if radio then
1085: LD_VAR 0 4
1089: IFFALSE 1138
// begin if GetSex ( speaker ) = sex_male then
1091: LD_VAR 0 7
1095: PPUSH
1096: CALL_OW 258
1100: PUSH
1101: LD_INT 1
1103: EQUAL
1104: IFFALSE 1122
// SayRadio ( speaker , dialogMID ) else
1106: LD_VAR 0 7
1110: PPUSH
1111: LD_VAR 0 2
1115: PPUSH
1116: CALL_OW 94
1120: GO 1136
// SayRadio ( speaker , dialogFID ) ;
1122: LD_VAR 0 7
1126: PPUSH
1127: LD_VAR 0 3
1131: PPUSH
1132: CALL_OW 94
// end else
1136: GO 1183
// begin if GetSex ( speaker ) = sex_male then
1138: LD_VAR 0 7
1142: PPUSH
1143: CALL_OW 258
1147: PUSH
1148: LD_INT 1
1150: EQUAL
1151: IFFALSE 1169
// Say ( speaker , dialogMID ) else
1153: LD_VAR 0 7
1157: PPUSH
1158: LD_VAR 0 2
1162: PPUSH
1163: CALL_OW 88
1167: GO 1183
// Say ( speaker , dialogFID ) ;
1169: LD_VAR 0 7
1173: PPUSH
1174: LD_VAR 0 3
1178: PPUSH
1179: CALL_OW 88
// end ; result := speaker ;
1183: LD_ADDR_VAR 0 5
1187: PUSH
1188: LD_VAR 0 7
1192: ST_TO_ADDR
// end ;
1193: LD_VAR 0 5
1197: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
1198: LD_INT 0
1200: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
1201: LD_VAR 0 1
1205: PPUSH
1206: CALL_OW 255
1210: PUSH
1211: LD_OWVAR 2
1215: EQUAL
1216: PUSH
1217: LD_VAR 0 1
1221: PPUSH
1222: CALL_OW 302
1226: AND
1227: IFFALSE 1249
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
1229: LD_VAR 0 1
1233: PPUSH
1234: LD_EXP 4
1238: PUSH
1239: LD_VAR 0 2
1243: STR
1244: PPUSH
1245: CALL_OW 38
// end ;
1249: LD_VAR 0 3
1253: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
1254: LD_INT 0
1256: PPUSH
1257: PPUSH
1258: PPUSH
// resultCharactersToSave = [ ] ;
1259: LD_ADDR_VAR 0 5
1263: PUSH
1264: EMPTY
1265: ST_TO_ADDR
// for unit in characters do
1266: LD_ADDR_VAR 0 4
1270: PUSH
1271: LD_VAR 0 1
1275: PUSH
1276: FOR_IN
1277: IFFALSE 1325
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
1279: LD_VAR 0 4
1283: PPUSH
1284: CALL_OW 255
1288: PUSH
1289: LD_OWVAR 2
1293: EQUAL
1294: PUSH
1295: LD_VAR 0 4
1299: PPUSH
1300: CALL_OW 302
1304: AND
1305: IFFALSE 1323
// resultCharactersToSave = resultCharactersToSave ^ unit ;
1307: LD_ADDR_VAR 0 5
1311: PUSH
1312: LD_VAR 0 5
1316: PUSH
1317: LD_VAR 0 4
1321: ADD
1322: ST_TO_ADDR
1323: GO 1276
1325: POP
1326: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
1327: LD_VAR 0 5
1331: PPUSH
1332: LD_EXP 4
1336: PUSH
1337: LD_VAR 0 2
1341: STR
1342: PPUSH
1343: CALL_OW 38
// end ; end_of_file
1347: LD_VAR 0 3
1351: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
1352: LD_INT 0
1354: PPUSH
1355: PPUSH
1356: PPUSH
1357: PPUSH
// CenterNowOnUnits ( Burlak ) ;
1358: LD_EXP 8
1362: PPUSH
1363: CALL_OW 87
// ComMoveXY ( Burlak , 166 , 110 ) ;
1367: LD_EXP 8
1371: PPUSH
1372: LD_INT 166
1374: PPUSH
1375: LD_INT 110
1377: PPUSH
1378: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
1382: LD_EXP 8
1386: PPUSH
1387: LD_EXP 13
1391: PPUSH
1392: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
1396: LD_ADDR_VAR 0 2
1400: PUSH
1401: LD_INT 22
1403: PUSH
1404: LD_INT 3
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 21
1413: PUSH
1414: LD_INT 1
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: PPUSH
1425: CALL_OW 69
1429: PUSH
1430: LD_EXP 8
1434: DIFF
1435: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
1436: LD_ADDR_VAR 0 4
1440: PUSH
1441: DOUBLE
1442: LD_INT 1
1444: DEC
1445: ST_TO_ADDR
1446: LD_EXP 7
1450: PUSH
1451: FOR_TO
1452: IFFALSE 1570
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
1454: LD_ADDR_VAR 0 3
1458: PUSH
1459: LD_VAR 0 2
1463: PPUSH
1464: LD_EXP 7
1468: PUSH
1469: LD_VAR 0 4
1473: ARRAY
1474: PUSH
1475: LD_INT 1
1477: ARRAY
1478: PPUSH
1479: LD_EXP 7
1483: PUSH
1484: LD_VAR 0 4
1488: ARRAY
1489: PUSH
1490: LD_INT 2
1492: ARRAY
1493: PPUSH
1494: CALL_OW 73
1498: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
1499: LD_VAR 0 3
1503: PPUSH
1504: LD_EXP 7
1508: PUSH
1509: LD_VAR 0 4
1513: ARRAY
1514: PUSH
1515: LD_INT 1
1517: ARRAY
1518: PPUSH
1519: LD_EXP 7
1523: PUSH
1524: LD_VAR 0 4
1528: ARRAY
1529: PUSH
1530: LD_INT 2
1532: ARRAY
1533: PPUSH
1534: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
1538: LD_VAR 0 3
1542: PPUSH
1543: LD_EXP 13
1547: PPUSH
1548: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
1552: LD_ADDR_VAR 0 2
1556: PUSH
1557: LD_VAR 0 2
1561: PUSH
1562: LD_VAR 0 3
1566: DIFF
1567: ST_TO_ADDR
// end ;
1568: GO 1451
1570: POP
1571: POP
// repeat CenterNowOnUnits ( Burlak ) ;
1572: LD_EXP 8
1576: PPUSH
1577: CALL_OW 87
// wait ( 0 0$1 ) ;
1581: LD_INT 35
1583: PPUSH
1584: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
1588: LD_EXP 8
1592: PPUSH
1593: LD_EXP 13
1597: PPUSH
1598: CALL_OW 296
1602: PUSH
1603: LD_INT 4
1605: LESS
1606: IFFALSE 1572
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
1608: LD_EXP 8
1612: PUSH
1613: LD_EXP 13
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
1626: LD_EXP 13
1630: PPUSH
1631: LD_EXP 8
1635: PPUSH
1636: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
1640: LD_EXP 13
1644: PPUSH
1645: LD_STRING D1-Kur-1
1647: PPUSH
1648: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
1652: LD_EXP 8
1656: PPUSH
1657: LD_STRING D1-Bur-1
1659: PPUSH
1660: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
1664: LD_EXP 13
1668: PPUSH
1669: LD_STRING D1-Kur-2
1671: PPUSH
1672: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
1676: LD_EXP 8
1680: PPUSH
1681: LD_STRING D1-Bur-2
1683: PPUSH
1684: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
1688: LD_EXP 13
1692: PPUSH
1693: LD_STRING D1-Kur-3
1695: PPUSH
1696: CALL_OW 88
// if IsOK ( Gnyevko ) then
1700: LD_EXP 9
1704: PPUSH
1705: CALL_OW 302
1709: IFFALSE 1723
// Say ( Kurin , D1-Kur-3a ) ;
1711: LD_EXP 13
1715: PPUSH
1716: LD_STRING D1-Kur-3a
1718: PPUSH
1719: CALL_OW 88
// InGameOff ;
1723: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
1727: LD_INT 22
1729: PUSH
1730: LD_INT 3
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 21
1739: PUSH
1740: LD_INT 1
1742: PUSH
1743: EMPTY
1744: LIST
1745: LIST
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: PPUSH
1751: CALL_OW 69
1755: PUSH
1756: LD_EXP 8
1760: PUSH
1761: LD_EXP 9
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: DIFF
1770: PPUSH
1771: LD_INT 6
1773: PPUSH
1774: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
1778: LD_EXP 15
1782: PPUSH
1783: LD_INT 3
1785: PPUSH
1786: CALL_OW 235
// if not IsOK ( Gnyevko ) then
1790: LD_EXP 9
1794: PPUSH
1795: CALL_OW 302
1799: NOT
1800: IFFALSE 1814
// SetSide ( randomMech , 3 ) ;
1802: LD_EXP 16
1806: PPUSH
1807: LD_INT 3
1809: PPUSH
1810: CALL_OW 235
// end ;
1814: LD_VAR 0 1
1818: RET
