// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export playerVehicles ; export beriaBase ; export kirovBase ; export meetBelkovBrother ; export platonovOpinion ; export belkovReturn ; export meetPlatonov ; export labConstructed , workshopConstructed , engineResearched , canBuildSameBuilding ; export constructedFirstVehicle , firstVeh ; export vehicleForKurin ; export backToBeria1 , backToBeria2 ; export construcMoreVehicles , constructedVehiclesCounter ; export canExitBase , canExploreMap ; export spawnCrates ; export canRemoveBelkovUnits , removedBelkovUntis , immortalBelkovTeam ; export kirovConstructedBunkers ; export activateAMAI ; export sawLeftBunker , sawRightBunker ; export dialogAttackLeftBunkers , dialogAttackRightBunkers , dialogLoopBlocker ; export playerGetSupport ; export saveBelkovDecision ; export saveBelkovObjective , belkovSaved ; export captureBelkovVehicle ; export raportForPlatonov , medalForGetSupport ; export northMapExplored ; export initiative ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 349 0 0
// PrepareRussian ;
  24: CALL 1088 0 0
// PrepareNature ;
  28: CALL 15094 0 0
// playerVehicles = [ ] ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: EMPTY
  38: ST_TO_ADDR
// beriaBase = [ ] ;
  39: LD_ADDR_EXP 2
  43: PUSH
  44: EMPTY
  45: ST_TO_ADDR
// kirovBase = [ ] ;
  46: LD_ADDR_EXP 3
  50: PUSH
  51: EMPTY
  52: ST_TO_ADDR
// meetBelkovBrother = false ;
  53: LD_ADDR_EXP 4
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// platonovOpinion = - 1 ;
  61: LD_ADDR_EXP 5
  65: PUSH
  66: LD_INT 1
  68: NEG
  69: ST_TO_ADDR
// belkovReturn = TestCharacters ( 01_Belkov ) ;
  70: LD_ADDR_EXP 6
  74: PUSH
  75: LD_STRING 01_Belkov
  77: PPUSH
  78: CALL_OW 28
  82: ST_TO_ADDR
// meetPlatonov = false ;
  83: LD_ADDR_EXP 7
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// labConstructed = false ;
  91: LD_ADDR_EXP 8
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// workshopConstructed = false ;
  99: LD_ADDR_EXP 9
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// engineResearched = false ;
 107: LD_ADDR_EXP 10
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// canBuildSameBuilding = false ;
 115: LD_ADDR_EXP 11
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// constructedFirstVehicle = false ;
 123: LD_ADDR_EXP 12
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// vehicleForKurin = false ;
 131: LD_ADDR_EXP 14
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// backToBeria1 = false ;
 139: LD_ADDR_EXP 15
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// backToBeria2 = false ;
 147: LD_ADDR_EXP 16
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// construcMoreVehicles = false ;
 155: LD_ADDR_EXP 17
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// constructedVehiclesCounter = 0 ;
 163: LD_ADDR_EXP 18
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// spawnCrates = false ;
 171: LD_ADDR_EXP 21
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// canRemoveBelkovUnits = false ;
 179: LD_ADDR_EXP 22
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// removedBelkovUntis = 0 ;
 187: LD_ADDR_EXP 23
 191: PUSH
 192: LD_INT 0
 194: ST_TO_ADDR
// immortalBelkovTeam = false ;
 195: LD_ADDR_EXP 24
 199: PUSH
 200: LD_INT 0
 202: ST_TO_ADDR
// canExitBase = true ;
 203: LD_ADDR_EXP 19
 207: PUSH
 208: LD_INT 1
 210: ST_TO_ADDR
// canExploreMap = false ;
 211: LD_ADDR_EXP 20
 215: PUSH
 216: LD_INT 0
 218: ST_TO_ADDR
// sawLeftBunker = false ;
 219: LD_ADDR_EXP 27
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// sawRightBunker = false ;
 227: LD_ADDR_EXP 28
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// dialogLoopBlocker = false ;
 235: LD_ADDR_EXP 31
 239: PUSH
 240: LD_INT 0
 242: ST_TO_ADDR
// dialogAttackLeftBunkers = false ;
 243: LD_ADDR_EXP 29
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// dialogAttackRightBunkers = false ;
 251: LD_ADDR_EXP 30
 255: PUSH
 256: LD_INT 0
 258: ST_TO_ADDR
// playerGetSupport = false ;
 259: LD_ADDR_EXP 32
 263: PUSH
 264: LD_INT 0
 266: ST_TO_ADDR
// captureBelkovVehicle = false ;
 267: LD_ADDR_EXP 36
 271: PUSH
 272: LD_INT 0
 274: ST_TO_ADDR
// saveBelkovObjective = false ;
 275: LD_ADDR_EXP 34
 279: PUSH
 280: LD_INT 0
 282: ST_TO_ADDR
// medalForGetSupport = true ;
 283: LD_ADDR_EXP 38
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// raportForPlatonov = - 1 ;
 291: LD_ADDR_EXP 37
 295: PUSH
 296: LD_INT 1
 298: NEG
 299: ST_TO_ADDR
// initiative = 0 ;
 300: LD_ADDR_EXP 40
 304: PUSH
 305: LD_INT 0
 307: ST_TO_ADDR
// lostComradesCounter = 0 ;
 308: LD_ADDR_EXP 41
 312: PUSH
 313: LD_INT 0
 315: ST_TO_ADDR
// northMapExplored = false ;
 316: LD_ADDR_EXP 39
 320: PUSH
 321: LD_INT 0
 323: ST_TO_ADDR
// kirovConstructedBunkers = 0 ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 0
 331: ST_TO_ADDR
// activateAMAI = false ;
 332: LD_ADDR_EXP 26
 336: PUSH
 337: LD_INT 0
 339: ST_TO_ADDR
// MissionIntro ;
 340: CALL 6540 0 0
// end ; end_of_file
 344: LD_VAR 0 1
 348: RET
// export function InitMapConfig ; begin
 349: LD_INT 0
 351: PPUSH
// BaseMapConfig ;
 352: CALL 365 0 0
// MissionMapConfig ;
 356: CALL 451 0 0
// end ;
 360: LD_VAR 0 1
 364: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 365: LD_INT 0
 367: PPUSH
// animalsAmount = [ 2 , 4 , 1 , 0 ] ;
 368: LD_ADDR_EXP 42
 372: PUSH
 373: LD_INT 2
 375: PUSH
 376: LD_INT 4
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: LD_INT 0
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: LIST
 389: LIST
 390: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 391: LD_ADDR_EXP 43
 395: PUSH
 396: LD_INT 2
 398: PUSH
 399: LD_INT 2
 401: PUSH
 402: LD_INT 2
 404: PUSH
 405: LD_INT 2
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: LIST
 412: LIST
 413: ST_TO_ADDR
// animalsAgression = 0 ;
 414: LD_ADDR_EXP 44
 418: PUSH
 419: LD_INT 0
 421: ST_TO_ADDR
// debugMode = 0 ;
 422: LD_ADDR_EXP 47
 426: PUSH
 427: LD_INT 0
 429: ST_TO_ADDR
// missionPrefix = 02_ ;
 430: LD_ADDR_EXP 45
 434: PUSH
 435: LD_STRING 02_
 437: ST_TO_ADDR
// previousMissionPrefix = 01_ ;
 438: LD_ADDR_EXP 46
 442: PUSH
 443: LD_STRING 01_
 445: ST_TO_ADDR
// end ;
 446: LD_VAR 0 1
 450: RET
// export kirovAmountPeople ; export meetWithKurinPositions , meetWithPlatonovPositions ; export labCratesRefund , workshopCratesRefund , oilPowerCratesRefund , armouryCratesRefund , bunkerCratesRefund ; export enemySkillLevel ; export trapAmountPeople ; export belkovAttackTime ; function MissionMapConfig ; begin
 451: LD_INT 0
 453: PPUSH
// meetWithKurinPositions = [ [ 162 , 107 ] , [ 162 , 108 ] , [ 163 , 109 ] , [ 163 , 110 ] , [ 162 , 109 ] , [ 161 , 107 ] , [ 161 , 106 ] ] ;
 454: LD_ADDR_EXP 49
 458: PUSH
 459: LD_INT 162
 461: PUSH
 462: LD_INT 107
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: LD_INT 162
 471: PUSH
 472: LD_INT 108
 474: PUSH
 475: EMPTY
 476: LIST
 477: LIST
 478: PUSH
 479: LD_INT 163
 481: PUSH
 482: LD_INT 109
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: PUSH
 489: LD_INT 163
 491: PUSH
 492: LD_INT 110
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 162
 501: PUSH
 502: LD_INT 109
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: LD_INT 161
 511: PUSH
 512: LD_INT 107
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 161
 521: PUSH
 522: LD_INT 106
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: LIST
 534: LIST
 535: LIST
 536: LIST
 537: ST_TO_ADDR
// meetWithPlatonovPositions = [ [ 113 , 96 ] , [ 114 , 97 ] , [ 114 , 98 ] ] ;
 538: LD_ADDR_EXP 50
 542: PUSH
 543: LD_INT 113
 545: PUSH
 546: LD_INT 96
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: LD_INT 114
 555: PUSH
 556: LD_INT 97
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 114
 565: PUSH
 566: LD_INT 98
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: ST_TO_ADDR
// kirovAmountPeople = [ 10 , 1 , 2 , 1 ] ;
 578: LD_ADDR_EXP 48
 582: PUSH
 583: LD_INT 10
 585: PUSH
 586: LD_INT 1
 588: PUSH
 589: LD_INT 2
 591: PUSH
 592: LD_INT 1
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: LIST
 599: LIST
 600: ST_TO_ADDR
// labCratesRefund = 20 ;
 601: LD_ADDR_EXP 51
 605: PUSH
 606: LD_INT 20
 608: ST_TO_ADDR
// workshopCratesRefund = 40 ;
 609: LD_ADDR_EXP 52
 613: PUSH
 614: LD_INT 40
 616: ST_TO_ADDR
// oilPowerCratesRefund = 20 ;
 617: LD_ADDR_EXP 53
 621: PUSH
 622: LD_INT 20
 624: ST_TO_ADDR
// armouryCratesRefund = 30 ;
 625: LD_ADDR_EXP 54
 629: PUSH
 630: LD_INT 30
 632: ST_TO_ADDR
// bunkerCratesRefund = 10 ;
 633: LD_ADDR_EXP 55
 637: PUSH
 638: LD_INT 10
 640: ST_TO_ADDR
// enemySkillLevel = [ 1 , 2 , 2 ] [ Difficulty ] ;
 641: LD_ADDR_EXP 56
 645: PUSH
 646: LD_INT 1
 648: PUSH
 649: LD_INT 2
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: PUSH
 660: LD_OWVAR 67
 664: ARRAY
 665: ST_TO_ADDR
// trapAmountPeople = [ [ 2 , 2 , 2 , 2 ] , [ 3 , 3 , 2 , 3 ] , [ 4 , 4 , 3 , 3 ] ] [ Difficulty ] ;
 666: LD_ADDR_EXP 57
 670: PUSH
 671: LD_INT 2
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 2
 679: PUSH
 680: LD_INT 2
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: LIST
 687: LIST
 688: PUSH
 689: LD_INT 3
 691: PUSH
 692: LD_INT 3
 694: PUSH
 695: LD_INT 2
 697: PUSH
 698: LD_INT 3
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: PUSH
 707: LD_INT 4
 709: PUSH
 710: LD_INT 4
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: LIST
 723: LIST
 724: PUSH
 725: EMPTY
 726: LIST
 727: LIST
 728: LIST
 729: PUSH
 730: LD_OWVAR 67
 734: ARRAY
 735: ST_TO_ADDR
// belkovAttackTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 736: LD_ADDR_EXP 58
 740: PUSH
 741: LD_INT 21000
 743: PUSH
 744: LD_INT 16800
 746: PUSH
 747: LD_INT 12600
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: LIST
 754: PUSH
 755: LD_OWVAR 67
 759: ARRAY
 760: ST_TO_ADDR
// end ;
 761: LD_VAR 0 1
 765: RET
// every 0 0$1 trigger debugMode do var i ;
 766: LD_EXP 47
 770: IFFALSE 1085
 772: GO 774
 774: DISABLE
 775: LD_INT 0
 777: PPUSH
// begin enable ;
 778: ENABLE
// FogOff ( your_side ) ;
 779: LD_OWVAR 2
 783: PPUSH
 784: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 788: LD_ADDR_VAR 0 1
 792: PUSH
 793: LD_INT 22
 795: PUSH
 796: LD_OWVAR 2
 800: PUSH
 801: EMPTY
 802: LIST
 803: LIST
 804: PUSH
 805: LD_INT 2
 807: PUSH
 808: LD_INT 21
 810: PUSH
 811: LD_INT 1
 813: PUSH
 814: EMPTY
 815: LIST
 816: LIST
 817: PUSH
 818: LD_INT 21
 820: PUSH
 821: LD_INT 2
 823: PUSH
 824: EMPTY
 825: LIST
 826: LIST
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: LIST
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PPUSH
 837: CALL_OW 69
 841: PUSH
 842: FOR_IN
 843: IFFALSE 859
// SetLives ( i , 1000 ) ;
 845: LD_VAR 0 1
 849: PPUSH
 850: LD_INT 1000
 852: PPUSH
 853: CALL_OW 234
 857: GO 842
 859: POP
 860: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 861: LD_ADDR_VAR 0 1
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_OWVAR 2
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 21
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: PPUSH
 892: CALL_OW 69
 896: PUSH
 897: FOR_IN
 898: IFFALSE 962
// begin SetSkill ( i , skill_combat , 10 ) ;
 900: LD_VAR 0 1
 904: PPUSH
 905: LD_INT 1
 907: PPUSH
 908: LD_INT 10
 910: PPUSH
 911: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 915: LD_VAR 0 1
 919: PPUSH
 920: LD_INT 2
 922: PPUSH
 923: LD_INT 10
 925: PPUSH
 926: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 930: LD_VAR 0 1
 934: PPUSH
 935: LD_INT 3
 937: PPUSH
 938: LD_INT 10
 940: PPUSH
 941: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 945: LD_VAR 0 1
 949: PPUSH
 950: LD_INT 4
 952: PPUSH
 953: LD_INT 10
 955: PPUSH
 956: CALL_OW 237
// end ;
 960: GO 897
 962: POP
 963: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 964: LD_ADDR_VAR 0 1
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_OWVAR 2
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: LD_INT 2
 983: PUSH
 984: LD_INT 30
 986: PUSH
 987: LD_INT 0
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PUSH
 994: LD_INT 30
 996: PUSH
 997: LD_INT 1
 999: PUSH
1000: EMPTY
1001: LIST
1002: LIST
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: LIST
1008: PUSH
1009: EMPTY
1010: LIST
1011: LIST
1012: PPUSH
1013: CALL_OW 69
1017: PUSH
1018: FOR_IN
1019: IFFALSE 1083
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
1021: LD_VAR 0 1
1025: PPUSH
1026: CALL_OW 274
1030: PPUSH
1031: LD_INT 1
1033: PPUSH
1034: LD_INT 9999
1036: PPUSH
1037: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
1041: LD_VAR 0 1
1045: PPUSH
1046: CALL_OW 274
1050: PPUSH
1051: LD_INT 2
1053: PPUSH
1054: LD_INT 9999
1056: PPUSH
1057: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
1061: LD_VAR 0 1
1065: PPUSH
1066: CALL_OW 274
1070: PPUSH
1071: LD_INT 3
1073: PPUSH
1074: LD_INT 9999
1076: PPUSH
1077: CALL_OW 277
// end ;
1081: GO 1018
1083: POP
1084: POP
// end ; end_of_file
1085: PPOPN 1
1087: END
// export Burlak , Gnyevko , Belkov , Kirilenkova ; export other_survivors ; export Kurin , Belkov2 , otherKirovUnits ; export Kovalyuk , randomMech ; export kirovVehicle ; export belkovTeam ; export removedBelkovUntisSaved ; export removedBelkovVehicleSaved ; export Platonov , platSoldiers ; export Kuklajs , Benko ; export function PrepareRussian ; begin
1088: LD_INT 0
1090: PPUSH
// PrepareCharactersFromPreviousMission ;
1091: CALL 1476 0 0
// PrepareKirovBase ;
1095: CALL 1671 0 0
// PrepareBeriaBase ;
1099: CALL 2437 0 0
// end ;
1103: LD_VAR 0 1
1107: RET
// export function PrepareBelkovReturnTeam ; var unit , others , tmp ; begin
1108: LD_INT 0
1110: PPUSH
1111: PPUSH
1112: PPUSH
1113: PPUSH
// belkovTeam = [ ] ;
1114: LD_ADDR_EXP 70
1118: PUSH
1119: EMPTY
1120: ST_TO_ADDR
// uc_side = 6 ;
1121: LD_ADDR_OWVAR 20
1125: PUSH
1126: LD_INT 6
1128: ST_TO_ADDR
// uc_nation = nation_russian ;
1129: LD_ADDR_OWVAR 21
1133: PUSH
1134: LD_INT 3
1136: ST_TO_ADDR
// vc_chassis = removedBelkovVehicleSaved [ 1 ] ;
1137: LD_ADDR_OWVAR 37
1141: PUSH
1142: LD_EXP 72
1146: PUSH
1147: LD_INT 1
1149: ARRAY
1150: ST_TO_ADDR
// vc_engine = removedBelkovVehicleSaved [ 2 ] ;
1151: LD_ADDR_OWVAR 39
1155: PUSH
1156: LD_EXP 72
1160: PUSH
1161: LD_INT 2
1163: ARRAY
1164: ST_TO_ADDR
// vc_control = removedBelkovVehicleSaved [ 3 ] ;
1165: LD_ADDR_OWVAR 38
1169: PUSH
1170: LD_EXP 72
1174: PUSH
1175: LD_INT 3
1177: ARRAY
1178: ST_TO_ADDR
// vc_weapon = removedBelkovVehicleSaved [ 4 ] ;
1179: LD_ADDR_OWVAR 40
1183: PUSH
1184: LD_EXP 72
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: ST_TO_ADDR
// vc_fuel_battery = removedBelkovVehicleSaved [ 5 ] ;
1193: LD_ADDR_OWVAR 41
1197: PUSH
1198: LD_EXP 72
1202: PUSH
1203: LD_INT 5
1205: ARRAY
1206: ST_TO_ADDR
// kirovVehicle = CreateVehicle ;
1207: LD_ADDR_EXP 69
1211: PUSH
1212: CALL_OW 45
1216: ST_TO_ADDR
// SetDir ( kirovVehicle , 3 ) ;
1217: LD_EXP 69
1221: PPUSH
1222: LD_INT 3
1224: PPUSH
1225: CALL_OW 233
// PlaceUnitArea ( kirovVehicle , BelkovReturnArea , false ) ;
1229: LD_EXP 69
1233: PPUSH
1234: LD_INT 11
1236: PPUSH
1237: LD_INT 0
1239: PPUSH
1240: CALL_OW 49
// belkovTeam = belkovTeam ^ kirovVehicle ;
1244: LD_ADDR_EXP 70
1248: PUSH
1249: LD_EXP 70
1253: PUSH
1254: LD_EXP 69
1258: ADD
1259: ST_TO_ADDR
// if TestCharacters ( 02_TmpBelkov ) then
1260: LD_STRING 02_TmpBelkov
1262: PPUSH
1263: CALL_OW 28
1267: IFFALSE 1314
// begin Belkov = CreateCharacter ( 02_TmpBelkov ) ;
1269: LD_ADDR_EXP 61
1273: PUSH
1274: LD_STRING 02_TmpBelkov
1276: PPUSH
1277: CALL_OW 34
1281: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirovVehicle ) ;
1282: LD_EXP 61
1286: PPUSH
1287: LD_EXP 69
1291: PPUSH
1292: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov ;
1296: LD_ADDR_EXP 70
1300: PUSH
1301: LD_EXP 70
1305: PUSH
1306: LD_EXP 61
1310: ADD
1311: ST_TO_ADDR
// end else
1312: GO 1357
// begin Belkov2 = CreateCharacter ( 02_TmpBelkov2 ) ;
1314: LD_ADDR_EXP 65
1318: PUSH
1319: LD_STRING 02_TmpBelkov2
1321: PPUSH
1322: CALL_OW 34
1326: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov2 , kirovVehicle ) ;
1327: LD_EXP 65
1331: PPUSH
1332: LD_EXP 69
1336: PPUSH
1337: CALL_OW 52
// belkovTeam = belkovTeam ^ Belkov2 ;
1341: LD_ADDR_EXP 70
1345: PUSH
1346: LD_EXP 70
1350: PUSH
1351: LD_EXP 65
1355: ADD
1356: ST_TO_ADDR
// end ; if TestCharacters ( 02_TmpKirilenkova ) then
1357: LD_STRING 02_TmpKirilenkova
1359: PPUSH
1360: CALL_OW 28
1364: IFFALSE 1410
// begin Kirilenkova = CreateCharacter ( 02_TmpKirilenkova ) ;
1366: LD_ADDR_EXP 62
1370: PUSH
1371: LD_STRING 02_TmpKirilenkova
1373: PPUSH
1374: CALL_OW 34
1378: ST_TO_ADDR
// PlaceUnitArea ( Kirilenkova , BelkovReturnArea , false ) ;
1379: LD_EXP 62
1383: PPUSH
1384: LD_INT 11
1386: PPUSH
1387: LD_INT 0
1389: PPUSH
1390: CALL_OW 49
// belkovTeam = belkovTeam ^ Kirilenkova ;
1394: LD_ADDR_EXP 70
1398: PUSH
1399: LD_EXP 70
1403: PUSH
1404: LD_EXP 62
1408: ADD
1409: ST_TO_ADDR
// end ; others = CreateCharacterSet ( 02_TmpBelkovTeam ) ;
1410: LD_ADDR_VAR 0 3
1414: PUSH
1415: LD_STRING 02_TmpBelkovTeam
1417: PPUSH
1418: CALL_OW 31
1422: ST_TO_ADDR
// for unit in others do
1423: LD_ADDR_VAR 0 2
1427: PUSH
1428: LD_VAR 0 3
1432: PUSH
1433: FOR_IN
1434: IFFALSE 1469
// begin PlaceUnitArea ( unit , BelkovReturnArea , false ) ;
1436: LD_VAR 0 2
1440: PPUSH
1441: LD_INT 11
1443: PPUSH
1444: LD_INT 0
1446: PPUSH
1447: CALL_OW 49
// belkovTeam = belkovTeam ^ unit ;
1451: LD_ADDR_EXP 70
1455: PUSH
1456: LD_EXP 70
1460: PUSH
1461: LD_VAR 0 2
1465: ADD
1466: ST_TO_ADDR
// end ;
1467: GO 1433
1469: POP
1470: POP
// end ;
1471: LD_VAR 0 1
1475: RET
// function PrepareCharactersFromPreviousMission ; var i ; begin
1476: LD_INT 0
1478: PPUSH
1479: PPUSH
// uc_side = 3 ;
1480: LD_ADDR_OWVAR 20
1484: PUSH
1485: LD_INT 3
1487: ST_TO_ADDR
// Burlak = PrepareUnit ( Burlak , true ) ;
1488: LD_ADDR_EXP 59
1492: PUSH
1493: LD_STRING Burlak
1495: PPUSH
1496: LD_INT 1
1498: PPUSH
1499: CALL 3975 0 2
1503: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , true ) ;
1504: LD_ADDR_EXP 60
1508: PUSH
1509: LD_STRING Gnyevko
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL 3975 0 2
1519: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , true ) ;
1520: LD_ADDR_EXP 61
1524: PUSH
1525: LD_STRING Belkov
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL 3975 0 2
1535: ST_TO_ADDR
// Kirilenkova = PrepareUnit ( Kirilenkova , true ) ;
1536: LD_ADDR_EXP 62
1540: PUSH
1541: LD_STRING Kirilenkova
1543: PPUSH
1544: LD_INT 1
1546: PPUSH
1547: CALL 3975 0 2
1551: ST_TO_ADDR
// PlaceUnitArea ( Burlak , BurlakSpawnArea , false ) ;
1552: LD_EXP 59
1556: PPUSH
1557: LD_INT 5
1559: PPUSH
1560: LD_INT 0
1562: PPUSH
1563: CALL_OW 49
// PlaceUnitArea ( Gnyevko , BurlakTeamSpawnArea , false ) ;
1567: LD_EXP 60
1571: PPUSH
1572: LD_INT 3
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 49
// PlaceUnitArea ( Belkov , BurlakTeamSpawnArea , false ) ;
1582: LD_EXP 61
1586: PPUSH
1587: LD_INT 3
1589: PPUSH
1590: LD_INT 0
1592: PPUSH
1593: CALL_OW 49
// PlaceUnitArea ( Kirilenkova , BurlakTeamSpawnArea , false ) ;
1597: LD_EXP 62
1601: PPUSH
1602: LD_INT 3
1604: PPUSH
1605: LD_INT 0
1607: PPUSH
1608: CALL_OW 49
// CenterNowOnUnits ( Burlak ) ;
1612: LD_EXP 59
1616: PPUSH
1617: CALL_OW 87
// other_survivors = CreateCharacterSet ( 01_other_survivors ) ;
1621: LD_ADDR_EXP 63
1625: PUSH
1626: LD_STRING 01_other_survivors
1628: PPUSH
1629: CALL_OW 31
1633: ST_TO_ADDR
// for i in other_survivors do
1634: LD_ADDR_VAR 0 2
1638: PUSH
1639: LD_EXP 63
1643: PUSH
1644: FOR_IN
1645: IFFALSE 1664
// PlaceUnitArea ( i , BurlakTeamSpawnArea , false ) ;
1647: LD_VAR 0 2
1651: PPUSH
1652: LD_INT 3
1654: PPUSH
1655: LD_INT 0
1657: PPUSH
1658: CALL_OW 49
1662: GO 1644
1664: POP
1665: POP
// end ;
1666: LD_VAR 0 1
1670: RET
// function PrepareKirovBase ; var i , un ; begin
1671: LD_INT 0
1673: PPUSH
1674: PPUSH
1675: PPUSH
// SetBName ( kirov , kirov ) ;
1676: LD_INT 71
1678: PPUSH
1679: LD_STRING kirov
1681: PPUSH
1682: CALL_OW 500
// uc_side = 6 ;
1686: LD_ADDR_OWVAR 20
1690: PUSH
1691: LD_INT 6
1693: ST_TO_ADDR
// uc_nation = 3 ;
1694: LD_ADDR_OWVAR 21
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// hc_gallery =  ;
1702: LD_ADDR_OWVAR 33
1706: PUSH
1707: LD_STRING 
1709: ST_TO_ADDR
// hc_name =  ;
1710: LD_ADDR_OWVAR 26
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// Kurin = PrepareUnit ( Kurin , false ) ;
1718: LD_ADDR_EXP 64
1722: PUSH
1723: LD_STRING Kurin
1725: PPUSH
1726: LD_INT 0
1728: PPUSH
1729: CALL 3975 0 2
1733: ST_TO_ADDR
// Kovalyuk = PrepareUnit ( Kovalyuk , false ) ;
1734: LD_ADDR_EXP 67
1738: PUSH
1739: LD_STRING Kovalyuk
1741: PPUSH
1742: LD_INT 0
1744: PPUSH
1745: CALL 3975 0 2
1749: ST_TO_ADDR
// Belkov2 = PrepareUnit ( Belkov2 , false ) ;
1750: LD_ADDR_EXP 65
1754: PUSH
1755: LD_STRING Belkov2
1757: PPUSH
1758: LD_INT 0
1760: PPUSH
1761: CALL 3975 0 2
1765: ST_TO_ADDR
// PlaceUnitArea ( Kurin , KurinSpawnArea , false ) ;
1766: LD_EXP 64
1770: PPUSH
1771: LD_INT 4
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: CALL_OW 49
// PlaceUnitXYR ( Kovalyuk , 161 , 108 , 6 , false ) ;
1781: LD_EXP 67
1785: PPUSH
1786: LD_INT 161
1788: PPUSH
1789: LD_INT 108
1791: PPUSH
1792: LD_INT 6
1794: PPUSH
1795: LD_INT 0
1797: PPUSH
1798: CALL_OW 50
// ComHold ( Kurin ) ;
1802: LD_EXP 64
1806: PPUSH
1807: CALL_OW 140
// otherKirovUnits = [ ] ;
1811: LD_ADDR_EXP 66
1815: PUSH
1816: EMPTY
1817: ST_TO_ADDR
// kirovAmountPeople = Replace ( kirovAmountPeople , 1 , kirovAmountPeople [ 1 ] - UnitFilter ( other_survivors , [ f_class , class_soldier ] ) ) ;
1818: LD_ADDR_EXP 48
1822: PUSH
1823: LD_EXP 48
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_EXP 48
1835: PUSH
1836: LD_INT 1
1838: ARRAY
1839: PUSH
1840: LD_EXP 63
1844: PPUSH
1845: LD_INT 25
1847: PUSH
1848: LD_INT 1
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: PPUSH
1855: CALL_OW 72
1859: MINUS
1860: PPUSH
1861: CALL_OW 1
1865: ST_TO_ADDR
// for i := 1 to kirovAmountPeople [ 1 ] do
1866: LD_ADDR_VAR 0 2
1870: PUSH
1871: DOUBLE
1872: LD_INT 1
1874: DEC
1875: ST_TO_ADDR
1876: LD_EXP 48
1880: PUSH
1881: LD_INT 1
1883: ARRAY
1884: PUSH
1885: FOR_TO
1886: IFFALSE 2059
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
1888: LD_INT 0
1890: PPUSH
1891: LD_INT 1
1893: PPUSH
1894: LD_INT 1
1896: PPUSH
1897: LD_INT 3
1899: PPUSH
1900: CALL_OW 12
1904: PPUSH
1905: CALL_OW 380
// un = CreateHuman ;
1909: LD_ADDR_VAR 0 3
1913: PUSH
1914: CALL_OW 44
1918: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
1919: LD_ADDR_EXP 66
1923: PUSH
1924: LD_EXP 66
1928: PUSH
1929: LD_VAR 0 3
1933: ADD
1934: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
1935: LD_INT 22
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 21
1947: PUSH
1948: LD_INT 3
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: LD_INT 30
1957: PUSH
1958: LD_INT 31
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PUSH
1965: LD_INT 58
1967: PUSH
1968: EMPTY
1969: LIST
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: PPUSH
1977: CALL_OW 69
1981: IFFALSE 2045
// PlaceSolBun ( un , FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) else
1983: LD_VAR 0 3
1987: PPUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 6
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 3
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: LD_INT 30
2010: PUSH
2011: LD_INT 31
2013: PUSH
2014: EMPTY
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 58
2020: PUSH
2021: EMPTY
2022: LIST
2023: PUSH
2024: EMPTY
2025: LIST
2026: LIST
2027: LIST
2028: LIST
2029: PPUSH
2030: CALL_OW 69
2034: PUSH
2035: LD_INT 1
2037: ARRAY
2038: PPUSH
2039: CALL 5177 0 2
2043: GO 2057
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
2045: LD_VAR 0 3
2049: PPUSH
2050: LD_INT 209
2052: PPUSH
2053: CALL_OW 52
// end ;
2057: GO 1885
2059: POP
2060: POP
// PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2061: LD_INT 0
2063: PPUSH
2064: LD_INT 1
2066: PPUSH
2067: LD_INT 1
2069: PPUSH
2070: LD_INT 3
2072: PPUSH
2073: CALL_OW 12
2077: PPUSH
2078: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru2_arm2 ) ;
2082: CALL_OW 44
2086: PPUSH
2087: LD_INT 209
2089: PPUSH
2090: CALL_OW 52
// for i := 1 to kirovAmountPeople [ 2 ] do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: DOUBLE
2100: LD_INT 1
2102: DEC
2103: ST_TO_ADDR
2104: LD_EXP 48
2108: PUSH
2109: LD_INT 2
2111: ARRAY
2112: PUSH
2113: FOR_TO
2114: IFFALSE 2177
// begin PrepareHuman ( false , 2 , rand ( 1 , 3 ) ) ;
2116: LD_INT 0
2118: PPUSH
2119: LD_INT 2
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 3
2127: PPUSH
2128: CALL_OW 12
2132: PPUSH
2133: CALL_OW 380
// un = CreateHuman ;
2137: LD_ADDR_VAR 0 3
2141: PUSH
2142: CALL_OW 44
2146: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2147: LD_ADDR_EXP 66
2151: PUSH
2152: LD_EXP 66
2156: PUSH
2157: LD_VAR 0 3
2161: ADD
2162: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2163: LD_VAR 0 3
2167: PPUSH
2168: LD_INT 71
2170: PPUSH
2171: CALL_OW 52
// end ;
2175: GO 2113
2177: POP
2178: POP
// for i := 1 to kirovAmountPeople [ 3 ] do
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: DOUBLE
2185: LD_INT 1
2187: DEC
2188: ST_TO_ADDR
2189: LD_EXP 48
2193: PUSH
2194: LD_INT 3
2196: ARRAY
2197: PUSH
2198: FOR_TO
2199: IFFALSE 2262
// begin PrepareHuman ( false , 3 , rand ( 1 , 3 ) ) ;
2201: LD_INT 0
2203: PPUSH
2204: LD_INT 3
2206: PPUSH
2207: LD_INT 1
2209: PPUSH
2210: LD_INT 3
2212: PPUSH
2213: CALL_OW 12
2217: PPUSH
2218: CALL_OW 380
// un = CreateHuman ;
2222: LD_ADDR_VAR 0 3
2226: PUSH
2227: CALL_OW 44
2231: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2232: LD_ADDR_EXP 66
2236: PUSH
2237: LD_EXP 66
2241: PUSH
2242: LD_VAR 0 3
2246: ADD
2247: ST_TO_ADDR
// PlaceHumanInUnit ( un , kirov ) ;
2248: LD_VAR 0 3
2252: PPUSH
2253: LD_INT 71
2255: PPUSH
2256: CALL_OW 52
// end ;
2260: GO 2198
2262: POP
2263: POP
// for i := 1 to kirovAmountPeople [ 4 ] do
2264: LD_ADDR_VAR 0 2
2268: PUSH
2269: DOUBLE
2270: LD_INT 1
2272: DEC
2273: ST_TO_ADDR
2274: LD_EXP 48
2278: PUSH
2279: LD_INT 4
2281: ARRAY
2282: PUSH
2283: FOR_TO
2284: IFFALSE 2347
// begin PrepareHuman ( false , 4 , rand ( 1 , 3 ) ) ;
2286: LD_INT 0
2288: PPUSH
2289: LD_INT 4
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 3
2297: PPUSH
2298: CALL_OW 12
2302: PPUSH
2303: CALL_OW 380
// un = CreateHuman ;
2307: LD_ADDR_VAR 0 3
2311: PUSH
2312: CALL_OW 44
2316: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits ^ un ;
2317: LD_ADDR_EXP 66
2321: PUSH
2322: LD_EXP 66
2326: PUSH
2327: LD_VAR 0 3
2331: ADD
2332: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_lab ) ;
2333: LD_VAR 0 3
2337: PPUSH
2338: LD_INT 83
2340: PPUSH
2341: CALL_OW 52
// end ;
2345: GO 2283
2347: POP
2348: POP
// ResAllTechs ( 6 , ru_lab , 3 ) ;
2349: LD_INT 6
2351: PPUSH
2352: LD_INT 83
2354: PPUSH
2355: LD_INT 3
2357: PPUSH
2358: CALL 4790 0 3
// if not TestCharacters ( 01_Gnyevko ) then
2362: LD_STRING 01_Gnyevko
2364: PPUSH
2365: CALL_OW 28
2369: NOT
2370: IFFALSE 2413
// begin PrepareMechanic ( sex_male , 3 ) ;
2372: LD_INT 1
2374: PPUSH
2375: LD_INT 3
2377: PPUSH
2378: CALL_OW 383
// randomMech = CreateHuman ;
2382: LD_ADDR_EXP 68
2386: PUSH
2387: CALL_OW 44
2391: ST_TO_ADDR
// PlaceUnitXYR ( randomMech , 161 , 108 , 6 , false ) ;
2392: LD_EXP 68
2396: PPUSH
2397: LD_INT 161
2399: PPUSH
2400: LD_INT 108
2402: PPUSH
2403: LD_INT 6
2405: PPUSH
2406: LD_INT 0
2408: PPUSH
2409: CALL_OW 50
// end ; if not belkovReturn then
2413: LD_EXP 6
2417: NOT
2418: IFFALSE 2432
// PlaceHumanInUnit ( Belkov2 , ru2_arm1 ) ;
2420: LD_EXP 65
2424: PPUSH
2425: LD_INT 95
2427: PPUSH
2428: CALL_OW 52
// end ;
2432: LD_VAR 0 1
2436: RET
// function PrepareBeriaBase ; var i , un , unitsTemp , bunker ; begin
2437: LD_INT 0
2439: PPUSH
2440: PPUSH
2441: PPUSH
2442: PPUSH
2443: PPUSH
// SetBName ( beria , beria ) ;
2444: LD_INT 106
2446: PPUSH
2447: LD_STRING beria
2449: PPUSH
2450: CALL_OW 500
// uc_side = 6 ;
2454: LD_ADDR_OWVAR 20
2458: PUSH
2459: LD_INT 6
2461: ST_TO_ADDR
// uc_nation = 3 ;
2462: LD_ADDR_OWVAR 21
2466: PUSH
2467: LD_INT 3
2469: ST_TO_ADDR
// Platonov = PrepareUnit ( Platonov , false ) ;
2470: LD_ADDR_EXP 73
2474: PUSH
2475: LD_STRING Platonov
2477: PPUSH
2478: LD_INT 0
2480: PPUSH
2481: CALL 3975 0 2
2485: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 112 , 97 , false ) ;
2486: LD_EXP 73
2490: PPUSH
2491: LD_INT 112
2493: PPUSH
2494: LD_INT 97
2496: PPUSH
2497: LD_INT 0
2499: PPUSH
2500: CALL_OW 48
// ComHold ( Platonov ) ;
2504: LD_EXP 73
2508: PPUSH
2509: CALL_OW 140
// platSoldiers = [ ] ;
2513: LD_ADDR_EXP 74
2517: PUSH
2518: EMPTY
2519: ST_TO_ADDR
// unitsTemp = [ ] ;
2520: LD_ADDR_VAR 0 4
2524: PUSH
2525: EMPTY
2526: ST_TO_ADDR
// Kuklajs = PrepareUnit ( Kuklajs , false ) ;
2527: LD_ADDR_EXP 75
2531: PUSH
2532: LD_STRING Kuklajs
2534: PPUSH
2535: LD_INT 0
2537: PPUSH
2538: CALL 3975 0 2
2542: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Kuklajs ;
2543: LD_ADDR_EXP 74
2547: PUSH
2548: LD_EXP 74
2552: PUSH
2553: LD_EXP 75
2557: ADD
2558: ST_TO_ADDR
// PlaceUnitXYR ( Kuklajs , 110 , 97 , 6 , false ) ;
2559: LD_EXP 75
2563: PPUSH
2564: LD_INT 110
2566: PPUSH
2567: LD_INT 97
2569: PPUSH
2570: LD_INT 6
2572: PPUSH
2573: LD_INT 0
2575: PPUSH
2576: CALL_OW 50
// Benko = PrepareUnit ( Benko , false ) ;
2580: LD_ADDR_EXP 76
2584: PUSH
2585: LD_STRING Benko
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL 3975 0 2
2595: ST_TO_ADDR
// platSoldiers = platSoldiers ^ Benko ;
2596: LD_ADDR_EXP 74
2600: PUSH
2601: LD_EXP 74
2605: PUSH
2606: LD_EXP 76
2610: ADD
2611: ST_TO_ADDR
// unitsTemp = unitsTemp ^ Benko ;
2612: LD_ADDR_VAR 0 4
2616: PUSH
2617: LD_VAR 0 4
2621: PUSH
2622: LD_EXP 76
2626: ADD
2627: ST_TO_ADDR
// for i := 1 to 2 do
2628: LD_ADDR_VAR 0 2
2632: PUSH
2633: DOUBLE
2634: LD_INT 1
2636: DEC
2637: ST_TO_ADDR
2638: LD_INT 2
2640: PUSH
2641: FOR_TO
2642: IFFALSE 2709
// begin PrepareHuman ( false , 1 , rand ( 1 , 3 ) ) ;
2644: LD_INT 0
2646: PPUSH
2647: LD_INT 1
2649: PPUSH
2650: LD_INT 1
2652: PPUSH
2653: LD_INT 3
2655: PPUSH
2656: CALL_OW 12
2660: PPUSH
2661: CALL_OW 380
// un = CreateHuman ;
2665: LD_ADDR_VAR 0 3
2669: PUSH
2670: CALL_OW 44
2674: ST_TO_ADDR
// platSoldiers = platSoldiers ^ un ;
2675: LD_ADDR_EXP 74
2679: PUSH
2680: LD_EXP 74
2684: PUSH
2685: LD_VAR 0 3
2689: ADD
2690: ST_TO_ADDR
// unitsTemp = unitsTemp ^ un ;
2691: LD_ADDR_VAR 0 4
2695: PUSH
2696: LD_VAR 0 4
2700: PUSH
2701: LD_VAR 0 3
2705: ADD
2706: ST_TO_ADDR
// end ;
2707: GO 2641
2709: POP
2710: POP
// for i := 1 to unitsTemp do
2711: LD_ADDR_VAR 0 2
2715: PUSH
2716: DOUBLE
2717: LD_INT 1
2719: DEC
2720: ST_TO_ADDR
2721: LD_VAR 0 4
2725: PUSH
2726: FOR_TO
2727: IFFALSE 2815
// begin bunker = FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 6 ] , [ f_btype , b_breastwork ] ] ) [ i ] ;
2729: LD_ADDR_VAR 0 5
2733: PUSH
2734: LD_INT 8
2736: PPUSH
2737: LD_INT 22
2739: PUSH
2740: LD_INT 6
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: LD_INT 30
2749: PUSH
2750: LD_INT 31
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PPUSH
2761: CALL_OW 70
2765: PUSH
2766: LD_VAR 0 2
2770: ARRAY
2771: ST_TO_ADDR
// PlaceUnitXYR ( unitsTemp [ i ] , GetX ( bunker ) , GetY ( bunker ) , 2 , false ) ;
2772: LD_VAR 0 4
2776: PUSH
2777: LD_VAR 0 2
2781: ARRAY
2782: PPUSH
2783: LD_VAR 0 5
2787: PPUSH
2788: CALL_OW 250
2792: PPUSH
2793: LD_VAR 0 5
2797: PPUSH
2798: CALL_OW 251
2802: PPUSH
2803: LD_INT 2
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 50
// end ;
2813: GO 2726
2815: POP
2816: POP
// end ; end_of_file
2817: LD_VAR 0 1
2821: RET
// export trapCommander ; export trapTeam ; export leftBunkers , rightBunkers ; export amLeftDepot , amRightDepot ; export amLeftEngs , amRightEngs ; export function PrepareAmerican ; begin
2822: LD_INT 0
2824: PPUSH
// PrepareTrap ;
2825: CALL 2838 0 0
// PrepareBunkiers ;
2829: CALL 3430 0 0
// end ;
2833: LD_VAR 0 1
2837: RET
// function PrepareTrap ; var i , un ; begin
2838: LD_INT 0
2840: PPUSH
2841: PPUSH
2842: PPUSH
// trapTeam = [ ] ;
2843: LD_ADDR_EXP 78
2847: PUSH
2848: EMPTY
2849: ST_TO_ADDR
// uc_nation = 1 ;
2850: LD_ADDR_OWVAR 21
2854: PUSH
2855: LD_INT 1
2857: ST_TO_ADDR
// uc_side = 1 ;
2858: LD_ADDR_OWVAR 20
2862: PUSH
2863: LD_INT 1
2865: ST_TO_ADDR
// hc_gallery =  ;
2866: LD_ADDR_OWVAR 33
2870: PUSH
2871: LD_STRING 
2873: ST_TO_ADDR
// hc_name = profile_name ;
2874: LD_ADDR_OWVAR 26
2878: PUSH
2879: LD_OWVAR 78
2883: ST_TO_ADDR
// hc_importance = 100 ;
2884: LD_ADDR_OWVAR 32
2888: PUSH
2889: LD_INT 100
2891: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , enemySkillLevel + 1 ) ;
2892: LD_INT 1
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_EXP 56
2902: PUSH
2903: LD_INT 1
2905: PLUS
2906: PPUSH
2907: CALL_OW 380
// trapCommander = CreateHuman ;
2911: LD_ADDR_EXP 77
2915: PUSH
2916: CALL_OW 44
2920: ST_TO_ADDR
// PlaceUnitArea ( trapCommander , AmCommanderSpawn , false ) ;
2921: LD_EXP 77
2925: PPUSH
2926: LD_INT 13
2928: PPUSH
2929: LD_INT 0
2931: PPUSH
2932: CALL_OW 49
// ComCrawl ( trapCommander ) ;
2936: LD_EXP 77
2940: PPUSH
2941: CALL_OW 137
// trapTeam = trapTeam ^ trapCommander ;
2945: LD_ADDR_EXP 78
2949: PUSH
2950: LD_EXP 78
2954: PUSH
2955: LD_EXP 77
2959: ADD
2960: ST_TO_ADDR
// hc_importance = 0 ;
2961: LD_ADDR_OWVAR 32
2965: PUSH
2966: LD_INT 0
2968: ST_TO_ADDR
// for i := 1 to trapAmountPeople [ 1 ] do
2969: LD_ADDR_VAR 0 2
2973: PUSH
2974: DOUBLE
2975: LD_INT 1
2977: DEC
2978: ST_TO_ADDR
2979: LD_EXP 57
2983: PUSH
2984: LD_INT 1
2986: ARRAY
2987: PUSH
2988: FOR_TO
2989: IFFALSE 3081
// begin hc_name =  ;
2991: LD_ADDR_OWVAR 26
2995: PUSH
2996: LD_STRING 
2998: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
2999: LD_INT 0
3001: PPUSH
3002: LD_INT 1
3004: PPUSH
3005: LD_EXP 56
3009: PPUSH
3010: CALL_OW 380
// un = CreateHuman ;
3014: LD_ADDR_VAR 0 3
3018: PUSH
3019: CALL_OW 44
3023: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn1 , false ) ;
3024: LD_VAR 0 3
3028: PPUSH
3029: LD_INT 12
3031: PPUSH
3032: LD_INT 0
3034: PPUSH
3035: CALL_OW 49
// ComCrawl ( un ) ;
3039: LD_VAR 0 3
3043: PPUSH
3044: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3048: LD_VAR 0 3
3052: PPUSH
3053: LD_INT 116
3055: PPUSH
3056: LD_INT 21
3058: PPUSH
3059: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3063: LD_ADDR_EXP 78
3067: PUSH
3068: LD_EXP 78
3072: PUSH
3073: LD_VAR 0 3
3077: ADD
3078: ST_TO_ADDR
// end ;
3079: GO 2988
3081: POP
3082: POP
// for i := 1 to trapAmountPeople [ 2 ] do
3083: LD_ADDR_VAR 0 2
3087: PUSH
3088: DOUBLE
3089: LD_INT 1
3091: DEC
3092: ST_TO_ADDR
3093: LD_EXP 57
3097: PUSH
3098: LD_INT 2
3100: ARRAY
3101: PUSH
3102: FOR_TO
3103: IFFALSE 3195
// begin hc_name =  ;
3105: LD_ADDR_OWVAR 26
3109: PUSH
3110: LD_STRING 
3112: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3113: LD_INT 0
3115: PPUSH
3116: LD_INT 1
3118: PPUSH
3119: LD_EXP 56
3123: PPUSH
3124: CALL_OW 380
// un = CreateHuman ;
3128: LD_ADDR_VAR 0 3
3132: PUSH
3133: CALL_OW 44
3137: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn2 , false ) ;
3138: LD_VAR 0 3
3142: PPUSH
3143: LD_INT 14
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// ComCrawl ( un ) ;
3153: LD_VAR 0 3
3157: PPUSH
3158: CALL_OW 137
// AddComTurnXY ( un , 116 , 21 ) ;
3162: LD_VAR 0 3
3166: PPUSH
3167: LD_INT 116
3169: PPUSH
3170: LD_INT 21
3172: PPUSH
3173: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3177: LD_ADDR_EXP 78
3181: PUSH
3182: LD_EXP 78
3186: PUSH
3187: LD_VAR 0 3
3191: ADD
3192: ST_TO_ADDR
// end ;
3193: GO 3102
3195: POP
3196: POP
// for i := 1 to trapAmountPeople [ 3 ] do
3197: LD_ADDR_VAR 0 2
3201: PUSH
3202: DOUBLE
3203: LD_INT 1
3205: DEC
3206: ST_TO_ADDR
3207: LD_EXP 57
3211: PUSH
3212: LD_INT 3
3214: ARRAY
3215: PUSH
3216: FOR_TO
3217: IFFALSE 3309
// begin hc_name =  ;
3219: LD_ADDR_OWVAR 26
3223: PUSH
3224: LD_STRING 
3226: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3227: LD_INT 0
3229: PPUSH
3230: LD_INT 1
3232: PPUSH
3233: LD_EXP 56
3237: PPUSH
3238: CALL_OW 380
// un = CreateHuman ;
3242: LD_ADDR_VAR 0 3
3246: PUSH
3247: CALL_OW 44
3251: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn3 , false ) ;
3252: LD_VAR 0 3
3256: PPUSH
3257: LD_INT 23
3259: PPUSH
3260: LD_INT 0
3262: PPUSH
3263: CALL_OW 49
// ComCrawl ( un ) ;
3267: LD_VAR 0 3
3271: PPUSH
3272: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3276: LD_VAR 0 3
3280: PPUSH
3281: LD_INT 109
3283: PPUSH
3284: LD_INT 8
3286: PPUSH
3287: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3291: LD_ADDR_EXP 78
3295: PUSH
3296: LD_EXP 78
3300: PUSH
3301: LD_VAR 0 3
3305: ADD
3306: ST_TO_ADDR
// end ;
3307: GO 3216
3309: POP
3310: POP
// for i := 1 to trapAmountPeople [ 4 ] do
3311: LD_ADDR_VAR 0 2
3315: PUSH
3316: DOUBLE
3317: LD_INT 1
3319: DEC
3320: ST_TO_ADDR
3321: LD_EXP 57
3325: PUSH
3326: LD_INT 4
3328: ARRAY
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3423
// begin hc_name =  ;
3333: LD_ADDR_OWVAR 26
3337: PUSH
3338: LD_STRING 
3340: ST_TO_ADDR
// PrepareHuman ( false , 1 , enemySkillLevel ) ;
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 1
3346: PPUSH
3347: LD_EXP 56
3351: PPUSH
3352: CALL_OW 380
// un = CreateHuman ;
3356: LD_ADDR_VAR 0 3
3360: PUSH
3361: CALL_OW 44
3365: ST_TO_ADDR
// PlaceUnitArea ( un , AmTrapSpawn4 , false ) ;
3366: LD_VAR 0 3
3370: PPUSH
3371: LD_INT 24
3373: PPUSH
3374: LD_INT 0
3376: PPUSH
3377: CALL_OW 49
// ComCrawl ( un ) ;
3381: LD_VAR 0 3
3385: PPUSH
3386: CALL_OW 137
// AddComTurnXY ( un , 109 , 8 ) ;
3390: LD_VAR 0 3
3394: PPUSH
3395: LD_INT 109
3397: PPUSH
3398: LD_INT 8
3400: PPUSH
3401: CALL_OW 178
// trapTeam = trapTeam ^ un ;
3405: LD_ADDR_EXP 78
3409: PUSH
3410: LD_EXP 78
3414: PUSH
3415: LD_VAR 0 3
3419: ADD
3420: ST_TO_ADDR
// end ;
3421: GO 3330
3423: POP
3424: POP
// end ;
3425: LD_VAR 0 1
3429: RET
// function PrepareBunkiers ; var i , un , bunker ; begin
3430: LD_INT 0
3432: PPUSH
3433: PPUSH
3434: PPUSH
3435: PPUSH
// uc_side = 1 ;
3436: LD_ADDR_OWVAR 20
3440: PUSH
3441: LD_INT 1
3443: ST_TO_ADDR
// uc_nation = nation_american ;
3444: LD_ADDR_OWVAR 21
3448: PUSH
3449: LD_INT 1
3451: ST_TO_ADDR
// bc_level = 1 ;
3452: LD_ADDR_OWVAR 43
3456: PUSH
3457: LD_INT 1
3459: ST_TO_ADDR
// bc_type = b_breastwork ;
3460: LD_ADDR_OWVAR 42
3464: PUSH
3465: LD_INT 31
3467: ST_TO_ADDR
// bunker = CreateAndPlaceBuildingXYD ( 104 , 59 , 4 ) ;
3468: LD_ADDR_VAR 0 4
3472: PUSH
3473: LD_INT 104
3475: PPUSH
3476: LD_INT 59
3478: PPUSH
3479: LD_INT 4
3481: PPUSH
3482: CALL_OW 47
3486: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3487: LD_ADDR_EXP 79
3491: PUSH
3492: LD_EXP 79
3496: PUSH
3497: LD_VAR 0 4
3501: ADD
3502: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3503: LD_EXP 56
3507: PPUSH
3508: LD_VAR 0 4
3512: PPUSH
3513: CALL 5031 0 2
// bunker = CreateAndPlaceBuildingXYD ( 101 , 55 , 4 ) ;
3517: LD_ADDR_VAR 0 4
3521: PUSH
3522: LD_INT 101
3524: PPUSH
3525: LD_INT 55
3527: PPUSH
3528: LD_INT 4
3530: PPUSH
3531: CALL_OW 47
3535: ST_TO_ADDR
// leftBunkers = leftBunkers ^ bunker ;
3536: LD_ADDR_EXP 79
3540: PUSH
3541: LD_EXP 79
3545: PUSH
3546: LD_VAR 0 4
3550: ADD
3551: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3552: LD_EXP 56
3556: PPUSH
3557: LD_VAR 0 4
3561: PPUSH
3562: CALL 5031 0 2
// bunker = CreateAndPlaceBuildingXYD ( 132 , 62 , 1 ) ;
3566: LD_ADDR_VAR 0 4
3570: PUSH
3571: LD_INT 132
3573: PPUSH
3574: LD_INT 62
3576: PPUSH
3577: LD_INT 1
3579: PPUSH
3580: CALL_OW 47
3584: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3585: LD_ADDR_EXP 80
3589: PUSH
3590: LD_EXP 80
3594: PUSH
3595: LD_VAR 0 4
3599: ADD
3600: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3601: LD_EXP 56
3605: PPUSH
3606: LD_VAR 0 4
3610: PPUSH
3611: CALL 5031 0 2
// bunker = CreateAndPlaceBuildingXYD ( 134 , 66 , 1 ) ;
3615: LD_ADDR_VAR 0 4
3619: PUSH
3620: LD_INT 134
3622: PPUSH
3623: LD_INT 66
3625: PPUSH
3626: LD_INT 1
3628: PPUSH
3629: CALL_OW 47
3633: ST_TO_ADDR
// rightBunkers = rightBunkers ^ bunker ;
3634: LD_ADDR_EXP 80
3638: PUSH
3639: LD_EXP 80
3643: PUSH
3644: LD_VAR 0 4
3648: ADD
3649: ST_TO_ADDR
// PrepareSolBun ( enemySkillLevel , bunker ) ;
3650: LD_EXP 56
3654: PPUSH
3655: LD_VAR 0 4
3659: PPUSH
3660: CALL 5031 0 2
// bc_type = b_depot ;
3664: LD_ADDR_OWVAR 42
3668: PUSH
3669: LD_INT 0
3671: ST_TO_ADDR
// amLeftDepot = CreateAndPlaceBuildingXYD ( 92 , 51 , 2 ) ;
3672: LD_ADDR_EXP 81
3676: PUSH
3677: LD_INT 92
3679: PPUSH
3680: LD_INT 51
3682: PPUSH
3683: LD_INT 2
3685: PPUSH
3686: CALL_OW 47
3690: ST_TO_ADDR
// amRightDepot = am_dep1 ;
3691: LD_ADDR_EXP 82
3695: PUSH
3696: LD_INT 193
3698: ST_TO_ADDR
// amLeftEngs = [ ] ;
3699: LD_ADDR_EXP 83
3703: PUSH
3704: EMPTY
3705: ST_TO_ADDR
// for i := 1 to [ 1 , 1 , rand ( 1 , 2 ) ] [ Difficulty ] do
3706: LD_ADDR_VAR 0 2
3710: PUSH
3711: DOUBLE
3712: LD_INT 1
3714: DEC
3715: ST_TO_ADDR
3716: LD_INT 1
3718: PUSH
3719: LD_INT 1
3721: PUSH
3722: LD_INT 1
3724: PPUSH
3725: LD_INT 2
3727: PPUSH
3728: CALL_OW 12
3732: PUSH
3733: EMPTY
3734: LIST
3735: LIST
3736: LIST
3737: PUSH
3738: LD_OWVAR 67
3742: ARRAY
3743: PUSH
3744: FOR_TO
3745: IFFALSE 3836
// begin uc_nation = 1 ;
3747: LD_ADDR_OWVAR 21
3751: PUSH
3752: LD_INT 1
3754: ST_TO_ADDR
// uc_side = 1 ;
3755: LD_ADDR_OWVAR 20
3759: PUSH
3760: LD_INT 1
3762: ST_TO_ADDR
// hc_gallery =  ;
3763: LD_ADDR_OWVAR 33
3767: PUSH
3768: LD_STRING 
3770: ST_TO_ADDR
// hc_name =  ;
3771: LD_ADDR_OWVAR 26
3775: PUSH
3776: LD_STRING 
3778: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3779: LD_INT 0
3781: PPUSH
3782: LD_INT 2
3784: PPUSH
3785: LD_EXP 56
3789: PPUSH
3790: CALL_OW 380
// un = CreateHuman ;
3794: LD_ADDR_VAR 0 3
3798: PUSH
3799: CALL_OW 44
3803: ST_TO_ADDR
// amLeftEngs = amLeftEngs ^ un ;
3804: LD_ADDR_EXP 83
3808: PUSH
3809: LD_EXP 83
3813: PUSH
3814: LD_VAR 0 3
3818: ADD
3819: ST_TO_ADDR
// PlaceHumanInUnit ( un , amLeftDepot ) ;
3820: LD_VAR 0 3
3824: PPUSH
3825: LD_EXP 81
3829: PPUSH
3830: CALL_OW 52
// end ;
3834: GO 3744
3836: POP
3837: POP
// if Difficulty = 3 then
3838: LD_OWVAR 67
3842: PUSH
3843: LD_INT 3
3845: EQUAL
3846: IFFALSE 3970
// begin amRightEngs = [ ] ;
3848: LD_ADDR_EXP 84
3852: PUSH
3853: EMPTY
3854: ST_TO_ADDR
// for i := 1 to rand ( 1 , 2 ) do
3855: LD_ADDR_VAR 0 2
3859: PUSH
3860: DOUBLE
3861: LD_INT 1
3863: DEC
3864: ST_TO_ADDR
3865: LD_INT 1
3867: PPUSH
3868: LD_INT 2
3870: PPUSH
3871: CALL_OW 12
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3968
// begin uc_nation = 1 ;
3879: LD_ADDR_OWVAR 21
3883: PUSH
3884: LD_INT 1
3886: ST_TO_ADDR
// uc_side = 1 ;
3887: LD_ADDR_OWVAR 20
3891: PUSH
3892: LD_INT 1
3894: ST_TO_ADDR
// hc_gallery =  ;
3895: LD_ADDR_OWVAR 33
3899: PUSH
3900: LD_STRING 
3902: ST_TO_ADDR
// hc_name =  ;
3903: LD_ADDR_OWVAR 26
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// PrepareHuman ( false , 2 , enemySkillLevel ) ;
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 2
3916: PPUSH
3917: LD_EXP 56
3921: PPUSH
3922: CALL_OW 380
// un = CreateHuman ;
3926: LD_ADDR_VAR 0 3
3930: PUSH
3931: CALL_OW 44
3935: ST_TO_ADDR
// amRightEngs = amRightEngs ^ un ;
3936: LD_ADDR_EXP 84
3940: PUSH
3941: LD_EXP 84
3945: PUSH
3946: LD_VAR 0 3
3950: ADD
3951: ST_TO_ADDR
// PlaceHumanInUnit ( un , amRightDepot ) ;
3952: LD_VAR 0 3
3956: PPUSH
3957: LD_EXP 82
3961: PPUSH
3962: CALL_OW 52
// end ;
3966: GO 3876
3968: POP
3969: POP
// end ; end ; end_of_file
3970: LD_VAR 0 1
3974: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3975: LD_INT 0
3977: PPUSH
3978: PPUSH
// if exist_mode then
3979: LD_VAR 0 2
3983: IFFALSE 4008
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
3985: LD_ADDR_VAR 0 4
3989: PUSH
3990: LD_EXP 46
3994: PUSH
3995: LD_VAR 0 1
3999: STR
4000: PPUSH
4001: CALL_OW 34
4005: ST_TO_ADDR
4006: GO 4023
// unit := NewCharacter ( ident ) ;
4008: LD_ADDR_VAR 0 4
4012: PUSH
4013: LD_VAR 0 1
4017: PPUSH
4018: CALL_OW 25
4022: ST_TO_ADDR
// result := unit ;
4023: LD_ADDR_VAR 0 3
4027: PUSH
4028: LD_VAR 0 4
4032: ST_TO_ADDR
// end ;
4033: LD_VAR 0 3
4037: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
4038: LD_INT 0
4040: PPUSH
4041: PPUSH
4042: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
4043: LD_ADDR_VAR 0 1
4047: PUSH
4048: LD_VAR 0 1
4052: PUSH
4053: LD_EXP 59
4057: PUSH
4058: LD_EXP 60
4062: PUSH
4063: LD_EXP 61
4067: PUSH
4068: LD_EXP 62
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: LIST
4077: LIST
4078: DIFF
4079: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
4080: LD_ADDR_VAR 0 7
4084: PUSH
4085: LD_VAR 0 1
4089: PUSH
4090: LD_INT 1
4092: PPUSH
4093: LD_VAR 0 1
4097: PPUSH
4098: CALL_OW 12
4102: ARRAY
4103: ST_TO_ADDR
// if radio then
4104: LD_VAR 0 4
4108: IFFALSE 4157
// begin if GetSex ( speaker ) = sex_male then
4110: LD_VAR 0 7
4114: PPUSH
4115: CALL_OW 258
4119: PUSH
4120: LD_INT 1
4122: EQUAL
4123: IFFALSE 4141
// SayRadio ( speaker , dialogMID ) else
4125: LD_VAR 0 7
4129: PPUSH
4130: LD_VAR 0 2
4134: PPUSH
4135: CALL_OW 94
4139: GO 4155
// SayRadio ( speaker , dialogFID ) ;
4141: LD_VAR 0 7
4145: PPUSH
4146: LD_VAR 0 3
4150: PPUSH
4151: CALL_OW 94
// end else
4155: GO 4202
// begin if GetSex ( speaker ) = sex_male then
4157: LD_VAR 0 7
4161: PPUSH
4162: CALL_OW 258
4166: PUSH
4167: LD_INT 1
4169: EQUAL
4170: IFFALSE 4188
// Say ( speaker , dialogMID ) else
4172: LD_VAR 0 7
4176: PPUSH
4177: LD_VAR 0 2
4181: PPUSH
4182: CALL_OW 88
4186: GO 4202
// Say ( speaker , dialogFID ) ;
4188: LD_VAR 0 7
4192: PPUSH
4193: LD_VAR 0 3
4197: PPUSH
4198: CALL_OW 88
// end ; result := speaker ;
4202: LD_ADDR_VAR 0 5
4206: PUSH
4207: LD_VAR 0 7
4211: ST_TO_ADDR
// end ;
4212: LD_VAR 0 5
4216: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
4217: LD_INT 0
4219: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
4220: LD_VAR 0 1
4224: PPUSH
4225: CALL_OW 255
4229: PUSH
4230: LD_VAR 0 3
4234: EQUAL
4235: PUSH
4236: LD_VAR 0 1
4240: PPUSH
4241: CALL_OW 302
4245: AND
4246: IFFALSE 4268
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
4248: LD_VAR 0 1
4252: PPUSH
4253: LD_EXP 45
4257: PUSH
4258: LD_VAR 0 2
4262: STR
4263: PPUSH
4264: CALL_OW 38
// end ;
4268: LD_VAR 0 4
4272: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
4273: LD_INT 0
4275: PPUSH
4276: PPUSH
4277: PPUSH
// resultCharactersToSave = [ ] ;
4278: LD_ADDR_VAR 0 6
4282: PUSH
4283: EMPTY
4284: ST_TO_ADDR
// for unit in characters do
4285: LD_ADDR_VAR 0 5
4289: PUSH
4290: LD_VAR 0 1
4294: PUSH
4295: FOR_IN
4296: IFFALSE 4344
// if GetSide ( unit ) = side and IsOK ( unit ) then
4298: LD_VAR 0 5
4302: PPUSH
4303: CALL_OW 255
4307: PUSH
4308: LD_VAR 0 3
4312: EQUAL
4313: PUSH
4314: LD_VAR 0 5
4318: PPUSH
4319: CALL_OW 302
4323: AND
4324: IFFALSE 4342
// resultCharactersToSave = resultCharactersToSave ^ unit ;
4326: LD_ADDR_VAR 0 6
4330: PUSH
4331: LD_VAR 0 6
4335: PUSH
4336: LD_VAR 0 5
4340: ADD
4341: ST_TO_ADDR
4342: GO 4295
4344: POP
4345: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
4346: LD_VAR 0 6
4350: PPUSH
4351: LD_EXP 45
4355: PUSH
4356: LD_VAR 0 2
4360: STR
4361: PPUSH
4362: CALL_OW 38
// end ;
4366: LD_VAR 0 4
4370: RET
// export function Question1 ( q ) ; var dec , q1 ; begin
4371: LD_INT 0
4373: PPUSH
4374: PPUSH
4375: PPUSH
// dec = SelectiveQuery ( QMoreInfo , q ) ;
4376: LD_ADDR_VAR 0 3
4380: PUSH
4381: LD_STRING QMoreInfo
4383: PPUSH
4384: LD_VAR 0 1
4388: PPUSH
4389: CALL_OW 98
4393: ST_TO_ADDR
// case dec of 1 :
4394: LD_VAR 0 3
4398: PUSH
4399: LD_INT 1
4401: DOUBLE
4402: EQUAL
4403: IFTRUE 4407
4405: GO 4467
4407: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
4408: LD_EXP 59
4412: PPUSH
4413: LD_STRING D2a-Bur-1
4415: PPUSH
4416: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
4420: LD_EXP 73
4424: PPUSH
4425: LD_STRING D2a-Pla-1
4427: PPUSH
4428: CALL_OW 88
// q1 = q diff 1 ;
4432: LD_ADDR_VAR 0 4
4436: PUSH
4437: LD_VAR 0 1
4441: PUSH
4442: LD_INT 1
4444: DIFF
4445: ST_TO_ADDR
// if q1 >= 2 then
4446: LD_VAR 0 4
4450: PUSH
4451: LD_INT 2
4453: GREATEREQUAL
4454: IFFALSE 4465
// Question1 ( q1 ) ;
4456: LD_VAR 0 4
4460: PPUSH
4461: CALL 4371 0 1
// end ; 2 :
4465: GO 4604
4467: LD_INT 2
4469: DOUBLE
4470: EQUAL
4471: IFTRUE 4475
4473: GO 4535
4475: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
4476: LD_EXP 59
4480: PPUSH
4481: LD_STRING D2b-Bur-1
4483: PPUSH
4484: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
4488: LD_EXP 73
4492: PPUSH
4493: LD_STRING D2b-Pla-1
4495: PPUSH
4496: CALL_OW 88
// q1 = q diff 2 ;
4500: LD_ADDR_VAR 0 4
4504: PUSH
4505: LD_VAR 0 1
4509: PUSH
4510: LD_INT 2
4512: DIFF
4513: ST_TO_ADDR
// if q1 >= 2 then
4514: LD_VAR 0 4
4518: PUSH
4519: LD_INT 2
4521: GREATEREQUAL
4522: IFFALSE 4533
// Question1 ( q1 ) ;
4524: LD_VAR 0 4
4528: PPUSH
4529: CALL 4371 0 1
// end ; 3 :
4533: GO 4604
4535: LD_INT 3
4537: DOUBLE
4538: EQUAL
4539: IFTRUE 4543
4541: GO 4603
4543: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
4544: LD_EXP 59
4548: PPUSH
4549: LD_STRING D2c-Bur-1
4551: PPUSH
4552: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
4556: LD_EXP 73
4560: PPUSH
4561: LD_STRING D2c-Pla-1
4563: PPUSH
4564: CALL_OW 88
// q1 = q diff 3 ;
4568: LD_ADDR_VAR 0 4
4572: PUSH
4573: LD_VAR 0 1
4577: PUSH
4578: LD_INT 3
4580: DIFF
4581: ST_TO_ADDR
// if q1 >= 2 then
4582: LD_VAR 0 4
4586: PUSH
4587: LD_INT 2
4589: GREATEREQUAL
4590: IFFALSE 4601
// Question1 ( q1 ) ;
4592: LD_VAR 0 4
4596: PPUSH
4597: CALL 4371 0 1
// end ; end ;
4601: GO 4604
4603: POP
// end ;
4604: LD_VAR 0 2
4608: RET
// export function ExtAddComRefuel ( engineer , depot , vehicle ) ; var taskList ; begin
4609: LD_INT 0
4611: PPUSH
4612: PPUSH
// if not IsOK ( engineer ) or not IsOK ( depot ) or not IsOK ( vehicle ) or GetFuel ( vehicle ) = 100 then
4613: LD_VAR 0 1
4617: PPUSH
4618: CALL_OW 302
4622: NOT
4623: PUSH
4624: LD_VAR 0 2
4628: PPUSH
4629: CALL_OW 302
4633: NOT
4634: OR
4635: PUSH
4636: LD_VAR 0 3
4640: PPUSH
4641: CALL_OW 302
4645: NOT
4646: OR
4647: PUSH
4648: LD_VAR 0 3
4652: PPUSH
4653: CALL_OW 261
4657: PUSH
4658: LD_INT 100
4660: EQUAL
4661: OR
4662: IFFALSE 4666
// exit ;
4664: GO 4785
// AddComTransport ( engineer , depot , mat_oil ) ;
4666: LD_VAR 0 1
4670: PPUSH
4671: LD_VAR 0 2
4675: PPUSH
4676: LD_INT 2
4678: PPUSH
4679: CALL_OW 211
// repeat wait ( 0 0$1 ) ;
4683: LD_INT 35
4685: PPUSH
4686: CALL_OW 67
// until Carry ( engineer ) ;
4690: LD_VAR 0 1
4694: PPUSH
4695: CALL_OW 281
4699: IFFALSE 4683
// RemoveTasks ( engineer ) ;
4701: LD_VAR 0 1
4705: PPUSH
4706: CALL_OW 493
// SetTaskList ( engineer , [ [ O , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
4710: LD_VAR 0 1
4714: PPUSH
4715: LD_STRING O
4717: PUSH
4718: LD_INT 0
4720: PUSH
4721: LD_INT 0
4723: PUSH
4724: LD_VAR 0 3
4728: PUSH
4729: LD_INT 0
4731: PUSH
4732: LD_INT 0
4734: PUSH
4735: LD_INT 0
4737: PUSH
4738: EMPTY
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: PPUSH
4750: CALL_OW 446
// repeat wait ( 0 0$1 ) ;
4754: LD_INT 35
4756: PPUSH
4757: CALL_OW 67
// until not Carry ( engineer ) ;
4761: LD_VAR 0 1
4765: PPUSH
4766: CALL_OW 281
4770: NOT
4771: IFFALSE 4754
// SetFuel ( vehicle , 100 ) ;
4773: LD_VAR 0 3
4777: PPUSH
4778: LD_INT 100
4780: PPUSH
4781: CALL_OW 240
// end ;
4785: LD_VAR 0 4
4789: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
4790: LD_INT 0
4792: PPUSH
4793: PPUSH
4794: PPUSH
4795: PPUSH
4796: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
4797: LD_ADDR_VAR 0 8
4801: PUSH
4802: LD_INT 48
4804: PUSH
4805: LD_INT 49
4807: PUSH
4808: LD_INT 50
4810: PUSH
4811: LD_INT 20
4813: PUSH
4814: LD_INT 1
4816: PUSH
4817: LD_INT 51
4819: PUSH
4820: LD_INT 52
4822: PUSH
4823: LD_INT 69
4825: PUSH
4826: LD_INT 39
4828: PUSH
4829: LD_INT 34
4831: PUSH
4832: LD_INT 40
4834: PUSH
4835: LD_INT 53
4837: PUSH
4838: LD_INT 71
4840: PUSH
4841: LD_INT 57
4843: PUSH
4844: LD_INT 58
4846: PUSH
4847: LD_INT 44
4849: PUSH
4850: LD_INT 32
4852: PUSH
4853: LD_INT 27
4855: PUSH
4856: LD_INT 23
4858: PUSH
4859: LD_INT 33
4861: PUSH
4862: LD_INT 59
4864: PUSH
4865: LD_INT 54
4867: PUSH
4868: LD_INT 55
4870: PUSH
4871: LD_INT 56
4873: PUSH
4874: LD_INT 63
4876: PUSH
4877: LD_INT 64
4879: PUSH
4880: LD_INT 65
4882: PUSH
4883: LD_INT 30
4885: PUSH
4886: LD_INT 31
4888: PUSH
4889: LD_INT 21
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 25
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: LIST
4907: LIST
4908: LIST
4909: LIST
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: LIST
4918: LIST
4919: LIST
4920: LIST
4921: LIST
4922: LIST
4923: LIST
4924: LIST
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: LIST
4930: LIST
4931: ST_TO_ADDR
// for i = 1 to ru_tech_list do
4932: LD_ADDR_VAR 0 5
4936: PUSH
4937: DOUBLE
4938: LD_INT 1
4940: DEC
4941: ST_TO_ADDR
4942: LD_VAR 0 8
4946: PUSH
4947: FOR_TO
4948: IFFALSE 5024
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
4950: LD_VAR 0 8
4954: PUSH
4955: LD_VAR 0 5
4959: ARRAY
4960: PPUSH
4961: LD_VAR 0 1
4965: PPUSH
4966: CALL_OW 321
4970: PUSH
4971: LD_INT 1
4973: EQUAL
4974: PUSH
4975: LD_VAR 0 8
4979: PUSH
4980: LD_VAR 0 5
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PPUSH
4991: CALL_OW 482
4995: PUSH
4996: LD_INT 1
4998: EQUAL
4999: AND
5000: IFFALSE 5022
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
5002: LD_VAR 0 2
5006: PPUSH
5007: LD_VAR 0 8
5011: PUSH
5012: LD_VAR 0 5
5016: ARRAY
5017: PPUSH
5018: CALL_OW 184
5022: GO 4947
5024: POP
5025: POP
// end ;
5026: LD_VAR 0 4
5030: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
5031: LD_INT 0
5033: PPUSH
5034: PPUSH
5035: PPUSH
// uc_side := GetSide ( b ) ;
5036: LD_ADDR_OWVAR 20
5040: PUSH
5041: LD_VAR 0 2
5045: PPUSH
5046: CALL_OW 255
5050: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
5051: LD_ADDR_OWVAR 21
5055: PUSH
5056: LD_VAR 0 2
5060: PPUSH
5061: CALL_OW 248
5065: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5066: LD_INT 0
5068: PPUSH
5069: LD_INT 1
5071: PPUSH
5072: LD_VAR 0 1
5076: PPUSH
5077: CALL_OW 380
// un = CreateHuman ;
5081: LD_ADDR_VAR 0 4
5085: PUSH
5086: CALL_OW 44
5090: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
5091: LD_ADDR_VAR 0 5
5095: PUSH
5096: LD_VAR 0 2
5100: PPUSH
5101: CALL_OW 254
5105: PUSH
5106: LD_INT 3
5108: MINUS
5109: ST_TO_ADDR
// if dir < 0 then
5110: LD_VAR 0 5
5114: PUSH
5115: LD_INT 0
5117: LESS
5118: IFFALSE 5134
// dir := 6 + dir ;
5120: LD_ADDR_VAR 0 5
5124: PUSH
5125: LD_INT 6
5127: PUSH
5128: LD_VAR 0 5
5132: PLUS
5133: ST_TO_ADDR
// SetDir ( un , dir ) ;
5134: LD_VAR 0 4
5138: PPUSH
5139: LD_VAR 0 5
5143: PPUSH
5144: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5148: LD_VAR 0 4
5152: PPUSH
5153: LD_VAR 0 2
5157: PPUSH
5158: CALL_OW 52
// result = un ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_VAR 0 4
5171: ST_TO_ADDR
// end ;
5172: LD_VAR 0 3
5176: RET
// export function PlaceSolBun ( un , b ) ; var dir ; begin
5177: LD_INT 0
5179: PPUSH
5180: PPUSH
// dir := GetDir ( b ) - 3 ;
5181: LD_ADDR_VAR 0 4
5185: PUSH
5186: LD_VAR 0 2
5190: PPUSH
5191: CALL_OW 254
5195: PUSH
5196: LD_INT 3
5198: MINUS
5199: ST_TO_ADDR
// if dir < 0 then
5200: LD_VAR 0 4
5204: PUSH
5205: LD_INT 0
5207: LESS
5208: IFFALSE 5224
// dir := 6 + dir ;
5210: LD_ADDR_VAR 0 4
5214: PUSH
5215: LD_INT 6
5217: PUSH
5218: LD_VAR 0 4
5222: PLUS
5223: ST_TO_ADDR
// SetDir ( un , dir ) ;
5224: LD_VAR 0 1
5228: PPUSH
5229: LD_VAR 0 4
5233: PPUSH
5234: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
5238: LD_VAR 0 1
5242: PPUSH
5243: LD_VAR 0 2
5247: PPUSH
5248: CALL_OW 52
// result = un ;
5252: LD_ADDR_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ST_TO_ADDR
// end ;
5262: LD_VAR 0 3
5266: RET
// export function SaveVehicles ( vehicles , ident ) ; var i , tmp ; begin
5267: LD_INT 0
5269: PPUSH
5270: PPUSH
5271: PPUSH
// tmp = [ ] ;
5272: LD_ADDR_VAR 0 5
5276: PUSH
5277: EMPTY
5278: ST_TO_ADDR
// if not vehicles then
5279: LD_VAR 0 1
5283: NOT
5284: IFFALSE 5288
// exit ;
5286: GO 5405
// for i in vehicles do
5288: LD_ADDR_VAR 0 4
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: FOR_IN
5299: IFFALSE 5389
// tmp := Insert ( tmp , 1 , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , GetFuel ( i ) , GetLives ( i ) ] ) ;
5301: LD_ADDR_VAR 0 5
5305: PUSH
5306: LD_VAR 0 5
5310: PPUSH
5311: LD_INT 1
5313: PPUSH
5314: LD_VAR 0 4
5318: PPUSH
5319: CALL_OW 265
5323: PUSH
5324: LD_VAR 0 4
5328: PPUSH
5329: CALL_OW 262
5333: PUSH
5334: LD_VAR 0 4
5338: PPUSH
5339: CALL_OW 263
5343: PUSH
5344: LD_VAR 0 4
5348: PPUSH
5349: CALL_OW 264
5353: PUSH
5354: LD_VAR 0 4
5358: PPUSH
5359: CALL_OW 261
5363: PUSH
5364: LD_VAR 0 4
5368: PPUSH
5369: CALL_OW 256
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL_OW 2
5386: ST_TO_ADDR
5387: GO 5298
5389: POP
5390: POP
// SaveVariable ( tmp , ident ) ;
5391: LD_VAR 0 5
5395: PPUSH
5396: LD_VAR 0 2
5400: PPUSH
5401: CALL_OW 39
// end ;
5405: LD_VAR 0 3
5409: RET
// export function SaveBase ( buildings , ident ) ; var i , buildingsToSave ; begin
5410: LD_INT 0
5412: PPUSH
5413: PPUSH
5414: PPUSH
// buildingsToSave = [ ] ;
5415: LD_ADDR_VAR 0 5
5419: PUSH
5420: EMPTY
5421: ST_TO_ADDR
// if not buildings then
5422: LD_VAR 0 1
5426: NOT
5427: IFFALSE 5431
// exit ;
5429: GO 6006
// for i in buildings do
5431: LD_ADDR_VAR 0 4
5435: PUSH
5436: LD_VAR 0 1
5440: PUSH
5441: FOR_IN
5442: IFFALSE 5990
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
5444: LD_VAR 0 4
5448: PPUSH
5449: CALL_OW 266
5453: PUSH
5454: LD_INT 6
5456: PUSH
5457: LD_INT 7
5459: PUSH
5460: LD_INT 8
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: LIST
5467: IN
5468: IFFALSE 5593
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
5470: LD_ADDR_VAR 0 5
5474: PUSH
5475: LD_VAR 0 5
5479: PUSH
5480: LD_VAR 0 4
5484: PPUSH
5485: CALL_OW 266
5489: PUSH
5490: LD_VAR 0 4
5494: PPUSH
5495: CALL_OW 250
5499: PUSH
5500: LD_VAR 0 4
5504: PPUSH
5505: CALL_OW 251
5509: PUSH
5510: LD_VAR 0 4
5514: PPUSH
5515: CALL_OW 254
5519: PUSH
5520: LD_VAR 0 4
5524: PPUSH
5525: CALL_OW 267
5529: PUSH
5530: LD_VAR 0 4
5534: PPUSH
5535: CALL_OW 248
5539: PUSH
5540: LD_VAR 0 4
5544: PPUSH
5545: CALL_OW 256
5549: PUSH
5550: LD_VAR 0 4
5554: PPUSH
5555: LD_INT 1
5557: PPUSH
5558: CALL_OW 268
5562: PUSH
5563: LD_VAR 0 4
5567: PPUSH
5568: LD_INT 2
5570: PPUSH
5571: CALL_OW 268
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: LIST
5583: LIST
5584: LIST
5585: LIST
5586: PUSH
5587: EMPTY
5588: LIST
5589: ADD
5590: ST_TO_ADDR
5591: GO 5988
// if GetBType ( i ) in [ b_bunker , b_turret ] then
5593: LD_VAR 0 4
5597: PPUSH
5598: CALL_OW 266
5602: PUSH
5603: LD_INT 32
5605: PUSH
5606: LD_INT 33
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: IN
5613: IFFALSE 5721
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetBWeapon ( i ) ] ] else
5615: LD_ADDR_VAR 0 5
5619: PUSH
5620: LD_VAR 0 5
5624: PUSH
5625: LD_VAR 0 4
5629: PPUSH
5630: CALL_OW 266
5634: PUSH
5635: LD_VAR 0 4
5639: PPUSH
5640: CALL_OW 250
5644: PUSH
5645: LD_VAR 0 4
5649: PPUSH
5650: CALL_OW 251
5654: PUSH
5655: LD_VAR 0 4
5659: PPUSH
5660: CALL_OW 254
5664: PUSH
5665: LD_VAR 0 4
5669: PPUSH
5670: CALL_OW 267
5674: PUSH
5675: LD_VAR 0 4
5679: PPUSH
5680: CALL_OW 248
5684: PUSH
5685: LD_VAR 0 4
5689: PPUSH
5690: CALL_OW 256
5694: PUSH
5695: LD_VAR 0 4
5699: PPUSH
5700: CALL_OW 269
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PUSH
5715: EMPTY
5716: LIST
5717: ADD
5718: ST_TO_ADDR
5719: GO 5988
// if GetBType ( i ) in [ b_depot , b_warehouse ] then
5721: LD_VAR 0 4
5725: PPUSH
5726: CALL_OW 266
5730: PUSH
5731: LD_INT 0
5733: PUSH
5734: LD_INT 1
5736: PUSH
5737: EMPTY
5738: LIST
5739: LIST
5740: IN
5741: IFFALSE 5895
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) , GetResourceType ( GetBase ( i ) , mat_cans ) , GetResourceType ( GetBase ( i ) , mat_oil ) , GetResourceType ( GetBase ( i ) , mat_siberit ) ] ] else
5743: LD_ADDR_VAR 0 5
5747: PUSH
5748: LD_VAR 0 5
5752: PUSH
5753: LD_VAR 0 4
5757: PPUSH
5758: CALL_OW 266
5762: PUSH
5763: LD_VAR 0 4
5767: PPUSH
5768: CALL_OW 250
5772: PUSH
5773: LD_VAR 0 4
5777: PPUSH
5778: CALL_OW 251
5782: PUSH
5783: LD_VAR 0 4
5787: PPUSH
5788: CALL_OW 254
5792: PUSH
5793: LD_VAR 0 4
5797: PPUSH
5798: CALL_OW 267
5802: PUSH
5803: LD_VAR 0 4
5807: PPUSH
5808: CALL_OW 248
5812: PUSH
5813: LD_VAR 0 4
5817: PPUSH
5818: CALL_OW 256
5822: PUSH
5823: LD_VAR 0 4
5827: PPUSH
5828: CALL_OW 274
5832: PPUSH
5833: LD_INT 1
5835: PPUSH
5836: CALL_OW 275
5840: PUSH
5841: LD_VAR 0 4
5845: PPUSH
5846: CALL_OW 274
5850: PPUSH
5851: LD_INT 2
5853: PPUSH
5854: CALL_OW 275
5858: PUSH
5859: LD_VAR 0 4
5863: PPUSH
5864: CALL_OW 274
5868: PPUSH
5869: LD_INT 3
5871: PPUSH
5872: CALL_OW 275
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: PUSH
5889: EMPTY
5890: LIST
5891: ADD
5892: ST_TO_ADDR
5893: GO 5988
// buildingsToSave = buildingsToSave ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLives ( i ) ] ] ;
5895: LD_ADDR_VAR 0 5
5899: PUSH
5900: LD_VAR 0 5
5904: PUSH
5905: LD_VAR 0 4
5909: PPUSH
5910: CALL_OW 266
5914: PUSH
5915: LD_VAR 0 4
5919: PPUSH
5920: CALL_OW 250
5924: PUSH
5925: LD_VAR 0 4
5929: PPUSH
5930: CALL_OW 251
5934: PUSH
5935: LD_VAR 0 4
5939: PPUSH
5940: CALL_OW 254
5944: PUSH
5945: LD_VAR 0 4
5949: PPUSH
5950: CALL_OW 267
5954: PUSH
5955: LD_VAR 0 4
5959: PPUSH
5960: CALL_OW 248
5964: PUSH
5965: LD_VAR 0 4
5969: PPUSH
5970: CALL_OW 256
5974: PUSH
5975: EMPTY
5976: LIST
5977: LIST
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: LIST
5983: PUSH
5984: EMPTY
5985: LIST
5986: ADD
5987: ST_TO_ADDR
// end ;
5988: GO 5441
5990: POP
5991: POP
// SaveVariable ( buildingsToSave , ident ) ;
5992: LD_VAR 0 5
5996: PPUSH
5997: LD_VAR 0 2
6001: PPUSH
6002: CALL_OW 39
// end ;
6006: LD_VAR 0 3
6010: RET
// export function CreateBelkovTeam ; var i , unit , restRandSolds , tmp ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
6015: PPUSH
6016: PPUSH
6017: PPUSH
// belkovTeam = [ ] ;
6018: LD_ADDR_EXP 70
6022: PUSH
6023: EMPTY
6024: ST_TO_ADDR
// if belkovReturn then
6025: LD_EXP 6
6029: IFFALSE 6049
// belkovTeam = belkovTeam ^ Belkov else
6031: LD_ADDR_EXP 70
6035: PUSH
6036: LD_EXP 70
6040: PUSH
6041: LD_EXP 61
6045: ADD
6046: ST_TO_ADDR
6047: GO 6065
// belkovTeam = belkovTeam ^ Belkov2 ;
6049: LD_ADDR_EXP 70
6053: PUSH
6054: LD_EXP 70
6058: PUSH
6059: LD_EXP 65
6063: ADD
6064: ST_TO_ADDR
// for unit in other_survivors do
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_EXP 63
6074: PUSH
6075: FOR_IN
6076: IFFALSE 6117
// if IsOK ( unit ) and belkovTeam < 5 then
6078: LD_VAR 0 3
6082: PPUSH
6083: CALL_OW 302
6087: PUSH
6088: LD_EXP 70
6092: PUSH
6093: LD_INT 5
6095: LESS
6096: AND
6097: IFFALSE 6115
// belkovTeam = belkovTeam ^ unit ;
6099: LD_ADDR_EXP 70
6103: PUSH
6104: LD_EXP 70
6108: PUSH
6109: LD_VAR 0 3
6113: ADD
6114: ST_TO_ADDR
6115: GO 6075
6117: POP
6118: POP
// if belkovTeam < 5 then
6119: LD_EXP 70
6123: PUSH
6124: LD_INT 5
6126: LESS
6127: IFFALSE 6253
// begin restRandSolds = 5 - belkovTeam ;
6129: LD_ADDR_VAR 0 4
6133: PUSH
6134: LD_INT 5
6136: PUSH
6137: LD_EXP 70
6141: MINUS
6142: ST_TO_ADDR
// for i := 1 to restRandSolds do
6143: LD_ADDR_VAR 0 2
6147: PUSH
6148: DOUBLE
6149: LD_INT 1
6151: DEC
6152: ST_TO_ADDR
6153: LD_VAR 0 4
6157: PUSH
6158: FOR_TO
6159: IFFALSE 6251
// for unit in UnitFilter ( otherKirovUnits , [ [ f_class , class_soldier ] ] ) diff Kurin do
6161: LD_ADDR_VAR 0 3
6165: PUSH
6166: LD_EXP 66
6170: PPUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 1
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: EMPTY
6182: LIST
6183: PPUSH
6184: CALL_OW 72
6188: PUSH
6189: LD_EXP 64
6193: DIFF
6194: PUSH
6195: FOR_IN
6196: IFFALSE 6247
// if not unit in belkovTeam then
6198: LD_VAR 0 3
6202: PUSH
6203: LD_EXP 70
6207: IN
6208: NOT
6209: IFFALSE 6245
// begin belkovTeam = belkovTeam ^ unit ;
6211: LD_ADDR_EXP 70
6215: PUSH
6216: LD_EXP 70
6220: PUSH
6221: LD_VAR 0 3
6225: ADD
6226: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff unit ;
6227: LD_ADDR_EXP 66
6231: PUSH
6232: LD_EXP 66
6236: PUSH
6237: LD_VAR 0 3
6241: DIFF
6242: ST_TO_ADDR
// break ;
6243: GO 6247
// end ;
6245: GO 6195
6247: POP
6248: POP
6249: GO 6158
6251: POP
6252: POP
// end ; tmp = belkovTeam diff Belkov ;
6253: LD_ADDR_VAR 0 5
6257: PUSH
6258: LD_EXP 70
6262: PUSH
6263: LD_EXP 61
6267: DIFF
6268: ST_TO_ADDR
// if tmp < 4 then
6269: LD_VAR 0 5
6273: PUSH
6274: LD_INT 4
6276: LESS
6277: IFFALSE 6361
// begin for i := 1 to 4 - tmp do
6279: LD_ADDR_VAR 0 2
6283: PUSH
6284: DOUBLE
6285: LD_INT 1
6287: DEC
6288: ST_TO_ADDR
6289: LD_INT 4
6291: PUSH
6292: LD_VAR 0 5
6296: MINUS
6297: PUSH
6298: FOR_TO
6299: IFFALSE 6359
// begin PrepareSoldier ( false , rand ( 1 , 2 ) ) ;
6301: LD_INT 0
6303: PPUSH
6304: LD_INT 1
6306: PPUSH
6307: LD_INT 2
6309: PPUSH
6310: CALL_OW 12
6314: PPUSH
6315: CALL_OW 381
// unit = CreateHuman ;
6319: LD_ADDR_VAR 0 3
6323: PUSH
6324: CALL_OW 44
6328: ST_TO_ADDR
// belkovTeam = belkovTeam ^ unit ;
6329: LD_ADDR_EXP 70
6333: PUSH
6334: LD_EXP 70
6338: PUSH
6339: LD_VAR 0 3
6343: ADD
6344: ST_TO_ADDR
// PlaceHumanInUnit ( unit , ru2_arm2 ) ;
6345: LD_VAR 0 3
6349: PPUSH
6350: LD_INT 209
6352: PPUSH
6353: CALL_OW 52
// end ;
6357: GO 6298
6359: POP
6360: POP
// end ; if TestCharacters ( 01_Kirilenkova ) then
6361: LD_STRING 01_Kirilenkova
6363: PPUSH
6364: CALL_OW 28
6368: IFFALSE 6388
// belkovTeam = belkovTeam ^ Kirilenkova else
6370: LD_ADDR_EXP 70
6374: PUSH
6375: LD_EXP 70
6379: PUSH
6380: LD_EXP 62
6384: ADD
6385: ST_TO_ADDR
6386: GO 6464
// begin belkovTeam = belkovTeam ^ UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6388: LD_ADDR_EXP 70
6392: PUSH
6393: LD_EXP 70
6397: PUSH
6398: LD_EXP 66
6402: PPUSH
6403: LD_INT 25
6405: PUSH
6406: LD_INT 4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: PPUSH
6416: CALL_OW 72
6420: PUSH
6421: LD_INT 1
6423: ARRAY
6424: ADD
6425: ST_TO_ADDR
// otherKirovUnits = otherKirovUnits diff UnitFilter ( otherKirovUnits , [ [ f_class , class_scientistic ] ] ) [ 1 ] ;
6426: LD_ADDR_EXP 66
6430: PUSH
6431: LD_EXP 66
6435: PUSH
6436: LD_EXP 66
6440: PPUSH
6441: LD_INT 25
6443: PUSH
6444: LD_INT 4
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: PPUSH
6454: CALL_OW 72
6458: PUSH
6459: LD_INT 1
6461: ARRAY
6462: DIFF
6463: ST_TO_ADDR
// end ; end ;
6464: LD_VAR 0 1
6468: RET
// export function PlatonovSendSupport ; begin
6469: LD_INT 0
6471: PPUSH
// ComExitBuilding ( [ Kuklajs , Benko ] ) ;
6472: LD_EXP 75
6476: PUSH
6477: LD_EXP 76
6481: PUSH
6482: EMPTY
6483: LIST
6484: LIST
6485: PPUSH
6486: CALL_OW 122
// AddComMoveXY ( [ Kuklajs , Benko ] , 112 , 96 ) ;
6490: LD_EXP 75
6494: PUSH
6495: LD_EXP 76
6499: PUSH
6500: EMPTY
6501: LIST
6502: LIST
6503: PPUSH
6504: LD_INT 112
6506: PPUSH
6507: LD_INT 96
6509: PPUSH
6510: CALL_OW 171
// SetSide ( [ Kuklajs , Benko ] , 3 ) ;
6514: LD_EXP 75
6518: PUSH
6519: LD_EXP 76
6523: PUSH
6524: EMPTY
6525: LIST
6526: LIST
6527: PPUSH
6528: LD_INT 3
6530: PPUSH
6531: CALL_OW 235
// end ; end_of_file
6535: LD_VAR 0 1
6539: RET
// export function MissionIntro ; var yourSolds , nearUnit ; var i ; begin
6540: LD_INT 0
6542: PPUSH
6543: PPUSH
6544: PPUSH
6545: PPUSH
// CenterNowOnUnits ( Burlak ) ;
6546: LD_EXP 59
6550: PPUSH
6551: CALL_OW 87
// ComMoveXY ( Burlak , 163 , 108 ) ;
6555: LD_EXP 59
6559: PPUSH
6560: LD_INT 163
6562: PPUSH
6563: LD_INT 108
6565: PPUSH
6566: CALL_OW 111
// AddComTurnUnit ( Burlak , Kurin ) ;
6570: LD_EXP 59
6574: PPUSH
6575: LD_EXP 64
6579: PPUSH
6580: CALL_OW 179
// yourSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Burlak ;
6584: LD_ADDR_VAR 0 2
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_INT 3
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 21
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL_OW 69
6617: PUSH
6618: LD_EXP 59
6622: DIFF
6623: ST_TO_ADDR
// for i := 1 to meetWithKurinPositions do
6624: LD_ADDR_VAR 0 4
6628: PUSH
6629: DOUBLE
6630: LD_INT 1
6632: DEC
6633: ST_TO_ADDR
6634: LD_EXP 49
6638: PUSH
6639: FOR_TO
6640: IFFALSE 6758
// begin nearUnit = NearestUnitToXY ( yourSolds , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6642: LD_ADDR_VAR 0 3
6646: PUSH
6647: LD_VAR 0 2
6651: PPUSH
6652: LD_EXP 49
6656: PUSH
6657: LD_VAR 0 4
6661: ARRAY
6662: PUSH
6663: LD_INT 1
6665: ARRAY
6666: PPUSH
6667: LD_EXP 49
6671: PUSH
6672: LD_VAR 0 4
6676: ARRAY
6677: PUSH
6678: LD_INT 2
6680: ARRAY
6681: PPUSH
6682: CALL_OW 73
6686: ST_TO_ADDR
// ComMoveXY ( nearUnit , meetWithKurinPositions [ i ] [ 1 ] , meetWithKurinPositions [ i ] [ 2 ] ) ;
6687: LD_VAR 0 3
6691: PPUSH
6692: LD_EXP 49
6696: PUSH
6697: LD_VAR 0 4
6701: ARRAY
6702: PUSH
6703: LD_INT 1
6705: ARRAY
6706: PPUSH
6707: LD_EXP 49
6711: PUSH
6712: LD_VAR 0 4
6716: ARRAY
6717: PUSH
6718: LD_INT 2
6720: ARRAY
6721: PPUSH
6722: CALL_OW 111
// AddComTurnUnit ( nearUnit , Kurin ) ;
6726: LD_VAR 0 3
6730: PPUSH
6731: LD_EXP 64
6735: PPUSH
6736: CALL_OW 179
// yourSolds = yourSolds diff nearUnit ;
6740: LD_ADDR_VAR 0 2
6744: PUSH
6745: LD_VAR 0 2
6749: PUSH
6750: LD_VAR 0 3
6754: DIFF
6755: ST_TO_ADDR
// end ;
6756: GO 6639
6758: POP
6759: POP
// repeat CenterNowOnUnits ( Burlak ) ;
6760: LD_EXP 59
6764: PPUSH
6765: CALL_OW 87
// wait ( 0 0$1 ) ;
6769: LD_INT 35
6771: PPUSH
6772: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 4 ;
6776: LD_EXP 59
6780: PPUSH
6781: LD_EXP 64
6785: PPUSH
6786: CALL_OW 296
6790: PUSH
6791: LD_INT 4
6793: LESS
6794: IFFALSE 6760
// CenterNowOnUnits ( [ Burlak , Kurin ] ) ;
6796: LD_EXP 59
6800: PUSH
6801: LD_EXP 64
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL_OW 87
// ComTurnUnit ( Kurin , Burlak ) ;
6814: LD_EXP 64
6818: PPUSH
6819: LD_EXP 59
6823: PPUSH
6824: CALL_OW 119
// Say ( Kurin , D1-Kur-1 ) ;
6828: LD_EXP 64
6832: PPUSH
6833: LD_STRING D1-Kur-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6840: LD_EXP 59
6844: PPUSH
6845: LD_STRING D1-Bur-1
6847: PPUSH
6848: CALL_OW 88
// Say ( Kurin , D1-Kur-2 ) ;
6852: LD_EXP 64
6856: PPUSH
6857: LD_STRING D1-Kur-2
6859: PPUSH
6860: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
6864: LD_EXP 59
6868: PPUSH
6869: LD_STRING D1-Bur-2
6871: PPUSH
6872: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6876: LD_EXP 64
6880: PPUSH
6881: LD_STRING D1-Kur-3
6883: PPUSH
6884: CALL_OW 88
// if IsOK ( Gnyevko ) then
6888: LD_EXP 60
6892: PPUSH
6893: CALL_OW 302
6897: IFFALSE 6911
// Say ( Kurin , D1-Kur-3a ) ;
6899: LD_EXP 64
6903: PPUSH
6904: LD_STRING D1-Kur-3a
6906: PPUSH
6907: CALL_OW 88
// InGameOff ;
6911: CALL_OW 9
// SetSide ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , 6 ) ;
6915: LD_INT 22
6917: PUSH
6918: LD_INT 3
6920: PUSH
6921: EMPTY
6922: LIST
6923: LIST
6924: PUSH
6925: LD_INT 21
6927: PUSH
6928: LD_INT 1
6930: PUSH
6931: EMPTY
6932: LIST
6933: LIST
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PPUSH
6939: CALL_OW 69
6943: PUSH
6944: LD_EXP 59
6948: PUSH
6949: LD_EXP 60
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: DIFF
6958: PPUSH
6959: LD_INT 6
6961: PPUSH
6962: CALL_OW 235
// SetSide ( Kovalyuk , 3 ) ;
6966: LD_EXP 67
6970: PPUSH
6971: LD_INT 3
6973: PPUSH
6974: CALL_OW 235
// ComFree ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Kurin ) ;
6978: LD_INT 9
6980: PPUSH
6981: LD_INT 22
6983: PUSH
6984: LD_INT 6
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 21
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PPUSH
7005: CALL_OW 70
7009: PUSH
7010: LD_EXP 64
7014: DIFF
7015: PPUSH
7016: CALL_OW 139
// ComEnterUnit ( other_survivors , ru2_arm1 ) ;
7020: LD_EXP 63
7024: PPUSH
7025: LD_INT 95
7027: PPUSH
7028: CALL_OW 120
// ComEnterUnit ( Belkov , ru2_arm1 ) ;
7032: LD_EXP 61
7036: PPUSH
7037: LD_INT 95
7039: PPUSH
7040: CALL_OW 120
// if IsPlaced ( Kirilenkova ) then
7044: LD_EXP 62
7048: PPUSH
7049: CALL_OW 305
7053: IFFALSE 7067
// ComEnterUnit ( Kirilenkova , ru_lab ) ;
7055: LD_EXP 62
7059: PPUSH
7060: LD_INT 83
7062: PPUSH
7063: CALL_OW 120
// if not TestCharacters ( 01_Gnyevko ) then
7067: LD_STRING 01_Gnyevko
7069: PPUSH
7070: CALL_OW 28
7074: NOT
7075: IFFALSE 7089
// SetSide ( randomMech , 3 ) ;
7077: LD_EXP 68
7081: PPUSH
7082: LD_INT 3
7084: PPUSH
7085: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
7089: LD_STRING M1
7091: PPUSH
7092: CALL_OW 337
// HideArea ( 3 , AllMapArea ) ;
7096: LD_INT 3
7098: PPUSH
7099: LD_INT 6
7101: PPUSH
7102: CALL_OW 333
// ShowArea ( 3 , VisibleMapPartArea ) ;
7106: LD_INT 3
7108: PPUSH
7109: LD_INT 7
7111: PPUSH
7112: CALL_OW 334
// HideArea ( 6 , AllMapArea ) ;
7116: LD_INT 6
7118: PPUSH
7119: LD_INT 6
7121: PPUSH
7122: CALL_OW 333
// ShowArea ( 6 , VisibleMapPartArea ) ;
7126: LD_INT 6
7128: PPUSH
7129: LD_INT 7
7131: PPUSH
7132: CALL_OW 334
// SaveForQuickRestart ;
7136: CALL_OW 22
// end ;
7140: LD_VAR 0 1
7144: RET
// every 0 0$1 trigger not canExploreMap and FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7145: LD_EXP 20
7149: NOT
7150: PUSH
7151: LD_INT 20
7153: PPUSH
7154: LD_INT 22
7156: PUSH
7157: LD_INT 3
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: PUSH
7164: LD_INT 2
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 21
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PPUSH
7196: CALL_OW 70
7200: PUSH
7201: LD_INT 0
7203: GREATER
7204: AND
7205: IFFALSE 7426
7207: GO 7209
7209: DISABLE
7210: LD_INT 0
7212: PPUSH
// begin enable ;
7213: ENABLE
// for unit in FilterUnitsInArea ( NorthMoveLimitArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7214: LD_ADDR_VAR 0 1
7218: PUSH
7219: LD_INT 20
7221: PPUSH
7222: LD_INT 22
7224: PUSH
7225: LD_INT 3
7227: PUSH
7228: EMPTY
7229: LIST
7230: LIST
7231: PUSH
7232: LD_INT 2
7234: PUSH
7235: LD_INT 21
7237: PUSH
7238: LD_INT 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: PUSH
7260: EMPTY
7261: LIST
7262: LIST
7263: PPUSH
7264: CALL_OW 70
7268: PUSH
7269: FOR_IN
7270: IFFALSE 7409
// begin ComMoveXY ( unit , GetX ( unit ) , GetY ( unit ) + 5 ) ;
7272: LD_VAR 0 1
7276: PPUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL_OW 250
7286: PPUSH
7287: LD_VAR 0 1
7291: PPUSH
7292: CALL_OW 251
7296: PUSH
7297: LD_INT 5
7299: PLUS
7300: PPUSH
7301: CALL_OW 111
// if dialogLoopBlocker then
7305: LD_EXP 31
7309: IFFALSE 7315
// exit ;
7311: POP
7312: POP
7313: GO 7426
// dialogLoopBlocker = true ;
7315: LD_ADDR_EXP 31
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// if not meetPlatonov then
7323: LD_EXP 7
7327: NOT
7328: IFFALSE 7391
// begin if unit <> Burlak and IsOk ( Kovalyuk ) then
7330: LD_VAR 0 1
7334: PUSH
7335: LD_EXP 59
7339: NONEQUAL
7340: PUSH
7341: LD_EXP 67
7345: PPUSH
7346: CALL_OW 302
7350: AND
7351: IFFALSE 7365
// Say ( Kovalyuk , D1b-Kov-1 ) ;
7353: LD_EXP 67
7357: PPUSH
7358: LD_STRING D1b-Kov-1
7360: PPUSH
7361: CALL_OW 88
// if unit = Burlak then
7365: LD_VAR 0 1
7369: PUSH
7370: LD_EXP 59
7374: EQUAL
7375: IFFALSE 7389
// Say ( Burlak , D1b-Bur-1 ) ;
7377: LD_EXP 59
7381: PPUSH
7382: LD_STRING D1b-Bur-1
7384: PPUSH
7385: CALL_OW 88
// end else
7389: GO 7403
// Say ( Platonov , D8-Pla-1 ) ;
7391: LD_EXP 73
7395: PPUSH
7396: LD_STRING D8-Pla-1
7398: PPUSH
7399: CALL_OW 88
// exit ;
7403: POP
7404: POP
7405: GO 7426
// end ;
7407: GO 7269
7409: POP
7410: POP
// wait ( 0 0$5 ) ;
7411: LD_INT 175
7413: PPUSH
7414: CALL_OW 67
// dialogLoopBlocker = false ;
7418: LD_ADDR_EXP 31
7422: PUSH
7423: LD_INT 0
7425: ST_TO_ADDR
// end ;
7426: PPOPN 1
7428: END
// every 0 0$1 trigger not canExitBase and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
7429: LD_EXP 19
7433: NOT
7434: PUSH
7435: LD_INT 8
7437: PPUSH
7438: LD_INT 22
7440: PUSH
7441: LD_INT 3
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_INT 2
7450: PUSH
7451: LD_INT 21
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 21
7463: PUSH
7464: LD_INT 2
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PPUSH
7480: CALL_OW 71
7484: PUSH
7485: LD_INT 0
7487: GREATER
7488: AND
7489: IFFALSE 7624
7491: GO 7493
7493: DISABLE
7494: LD_INT 0
7496: PPUSH
// begin enable ;
7497: ENABLE
// for unit in FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
7498: LD_ADDR_VAR 0 1
7502: PUSH
7503: LD_INT 8
7505: PPUSH
7506: LD_INT 22
7508: PUSH
7509: LD_INT 3
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PUSH
7516: LD_INT 2
7518: PUSH
7519: LD_INT 21
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 71
7552: PUSH
7553: FOR_IN
7554: IFFALSE 7607
// begin ComMoveXY ( unit , 114 , 98 ) ;
7556: LD_VAR 0 1
7560: PPUSH
7561: LD_INT 114
7563: PPUSH
7564: LD_INT 98
7566: PPUSH
7567: CALL_OW 111
// if dialogLoopBlocker then
7571: LD_EXP 31
7575: IFFALSE 7581
// exit ;
7577: POP
7578: POP
7579: GO 7624
// dialogLoopBlocker = true ;
7581: LD_ADDR_EXP 31
7585: PUSH
7586: LD_INT 1
7588: ST_TO_ADDR
// Say ( Platonov , D8-Pla-1 ) ;
7589: LD_EXP 73
7593: PPUSH
7594: LD_STRING D8-Pla-1
7596: PPUSH
7597: CALL_OW 88
// exit ;
7601: POP
7602: POP
7603: GO 7624
// end ;
7605: GO 7553
7607: POP
7608: POP
// wait ( 0 0$5 ) ;
7609: LD_INT 175
7611: PPUSH
7612: CALL_OW 67
// dialogLoopBlocker = false ;
7616: LD_ADDR_EXP 31
7620: PUSH
7621: LD_INT 0
7623: ST_TO_ADDR
// end ;
7624: PPOPN 1
7626: END
// every 1 1$30 trigger not meetPlatonov and FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7627: LD_EXP 7
7631: NOT
7632: PUSH
7633: LD_INT 9
7635: PPUSH
7636: LD_INT 22
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 21
7648: PUSH
7649: LD_INT 1
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 70
7664: PUSH
7665: LD_INT 0
7667: GREATER
7668: AND
7669: IFFALSE 7686
7671: GO 7673
7673: DISABLE
// Say ( Kurin , D1a-Kur-1 ) ;
7674: LD_EXP 64
7678: PPUSH
7679: LD_STRING D1a-Kur-1
7681: PPUSH
7682: CALL_OW 88
7686: END
// every 0 0$1 trigger not meetPlatonov and IsOK ( Burlak ) and FilterUnitsInArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do var i , unit , yourUnits , randomMaleSoldier ;
7687: LD_EXP 7
7691: NOT
7692: PUSH
7693: LD_EXP 59
7697: PPUSH
7698: CALL_OW 302
7702: AND
7703: PUSH
7704: LD_INT 8
7706: PPUSH
7707: LD_INT 22
7709: PUSH
7710: LD_INT 3
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: LD_INT 21
7719: PUSH
7720: LD_INT 1
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PPUSH
7731: CALL_OW 70
7735: PUSH
7736: LD_INT 0
7738: GREATER
7739: AND
7740: IFFALSE 8240
7742: GO 7744
7744: DISABLE
7745: LD_INT 0
7747: PPUSH
7748: PPUSH
7749: PPUSH
7750: PPUSH
// begin enable ;
7751: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
7752: LD_ADDR_VAR 0 2
7756: PUSH
7757: LD_INT 22
7759: PUSH
7760: LD_INT 3
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 21
7769: PUSH
7770: LD_INT 1
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PPUSH
7781: CALL_OW 69
7785: PUSH
7786: FOR_IN
7787: IFFALSE 8238
// if See ( 6 , unit ) then
7789: LD_INT 6
7791: PPUSH
7792: LD_VAR 0 2
7796: PPUSH
7797: CALL_OW 292
7801: IFFALSE 8236
// begin meetPlatonov = true ;
7803: LD_ADDR_EXP 7
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// InGameOn ;
7811: CALL_OW 8
// DialogueOn ;
7815: CALL_OW 6
// randomMaleSoldier = DialogRandom ( UnitFilter ( platSoldiers , [ f_sex , sex_male ] ) , D2-RSol1-1 ,  , false ) ;
7819: LD_ADDR_VAR 0 4
7823: PUSH
7824: LD_EXP 74
7828: PPUSH
7829: LD_INT 26
7831: PUSH
7832: LD_INT 1
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PPUSH
7839: CALL_OW 72
7843: PPUSH
7844: LD_STRING D2-RSol1-1
7846: PPUSH
7847: LD_STRING 
7849: PPUSH
7850: LD_INT 0
7852: PPUSH
7853: CALL 4038 0 4
7857: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
7858: LD_EXP 59
7862: PPUSH
7863: LD_STRING D2-Bur-1
7865: PPUSH
7866: CALL_OW 88
// Say ( randomMaleSoldier , D2-RSol1-2 ) ;
7870: LD_VAR 0 4
7874: PPUSH
7875: LD_STRING D2-RSol1-2
7877: PPUSH
7878: CALL_OW 88
// DialogueOff ;
7882: CALL_OW 7
// yourUnits = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) ;
7886: LD_ADDR_VAR 0 3
7890: PUSH
7891: LD_INT 22
7893: PUSH
7894: LD_INT 3
7896: PUSH
7897: EMPTY
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 21
7903: PUSH
7904: LD_INT 1
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 50
7913: PUSH
7914: EMPTY
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: LIST
7921: PPUSH
7922: CALL_OW 69
7926: ST_TO_ADDR
// for i := 1 to yourUnits do
7927: LD_ADDR_VAR 0 1
7931: PUSH
7932: DOUBLE
7933: LD_INT 1
7935: DEC
7936: ST_TO_ADDR
7937: LD_VAR 0 3
7941: PUSH
7942: FOR_TO
7943: IFFALSE 8012
// begin ComMoveXY ( yourUnits [ i ] , meetWithPlatonovPositions [ i ] [ 1 ] , meetWithPlatonovPositions [ i ] [ 2 ] ) ;
7945: LD_VAR 0 3
7949: PUSH
7950: LD_VAR 0 1
7954: ARRAY
7955: PPUSH
7956: LD_EXP 50
7960: PUSH
7961: LD_VAR 0 1
7965: ARRAY
7966: PUSH
7967: LD_INT 1
7969: ARRAY
7970: PPUSH
7971: LD_EXP 50
7975: PUSH
7976: LD_VAR 0 1
7980: ARRAY
7981: PUSH
7982: LD_INT 2
7984: ARRAY
7985: PPUSH
7986: CALL_OW 111
// AddComTurnUnit ( yourUnits [ i ] , Platonov ) ;
7990: LD_VAR 0 3
7994: PUSH
7995: LD_VAR 0 1
7999: ARRAY
8000: PPUSH
8001: LD_EXP 73
8005: PPUSH
8006: CALL_OW 179
// end ;
8010: GO 7942
8012: POP
8013: POP
// repeat CenterNowOnUnits ( Burlak ) ;
8014: LD_EXP 59
8018: PPUSH
8019: CALL_OW 87
// wait ( 0 0$1 ) ;
8023: LD_INT 35
8025: PPUSH
8026: CALL_OW 67
// until GetDistUnits ( Burlak , Platonov ) < 4 ;
8030: LD_EXP 59
8034: PPUSH
8035: LD_EXP 73
8039: PPUSH
8040: CALL_OW 296
8044: PUSH
8045: LD_INT 4
8047: LESS
8048: IFFALSE 8014
// ComTurnUnit ( Platonov , Burlak ) ;
8050: LD_EXP 73
8054: PPUSH
8055: LD_EXP 59
8059: PPUSH
8060: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
8064: LD_EXP 73
8068: PPUSH
8069: LD_STRING D2-Pla-2
8071: PPUSH
8072: CALL_OW 88
// Say ( Burlak , D2-Bur-2 ) ;
8076: LD_EXP 59
8080: PPUSH
8081: LD_STRING D2-Bur-2
8083: PPUSH
8084: CALL_OW 88
// Say ( Platonov , D2-Pla-3 ) ;
8088: LD_EXP 73
8092: PPUSH
8093: LD_STRING D2-Pla-3
8095: PPUSH
8096: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
8100: LD_EXP 59
8104: PPUSH
8105: LD_STRING D2-Bur-3
8107: PPUSH
8108: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
8112: LD_EXP 73
8116: PPUSH
8117: LD_STRING D2-Pla-4
8119: PPUSH
8120: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
8124: LD_EXP 59
8128: PPUSH
8129: LD_STRING D2-Bur-4
8131: PPUSH
8132: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
8136: LD_EXP 73
8140: PPUSH
8141: LD_STRING D2-Pla-5
8143: PPUSH
8144: CALL_OW 88
// Question1 ( [ 1 , 2 , 3 , 4 ] ) ;
8148: LD_INT 1
8150: PUSH
8151: LD_INT 2
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: PPUSH
8166: CALL 4371 0 1
// Say ( Platonov , D3-Pla-1 ) ;
8170: LD_EXP 73
8174: PPUSH
8175: LD_STRING D3-Pla-1
8177: PPUSH
8178: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
8182: LD_EXP 59
8186: PPUSH
8187: LD_STRING D3-Bur-1
8189: PPUSH
8190: CALL_OW 88
// InGameOff ;
8194: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
8198: LD_STRING M2a
8200: PPUSH
8201: CALL_OW 337
// ComFree ( Platonov ) ;
8205: LD_EXP 73
8209: PPUSH
8210: CALL_OW 139
// SetSide ( beria , 3 ) ;
8214: LD_INT 106
8216: PPUSH
8217: LD_INT 3
8219: PPUSH
8220: CALL_OW 235
// canExitBase = false ;
8224: LD_ADDR_EXP 19
8228: PUSH
8229: LD_INT 0
8231: ST_TO_ADDR
// exit ;
8232: POP
8233: POP
8234: GO 8240
// end ;
8236: GO 7786
8238: POP
8239: POP
// end ;
8240: PPOPN 4
8242: END
// export function Dial_LabConstructed ; begin
8243: LD_INT 0
8245: PPUSH
// labConstructed = true ;
8246: LD_ADDR_EXP 8
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// DialogueOn ;
8254: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8258: LD_EXP 59
8262: PPUSH
8263: LD_STRING D5a-Bur-1
8265: PPUSH
8266: CALL_OW 88
// if workshopConstructed then
8270: LD_EXP 9
8274: IFFALSE 8290
// Say ( Platonov , D5a-Pla-1a ) else
8276: LD_EXP 73
8280: PPUSH
8281: LD_STRING D5a-Pla-1a
8283: PPUSH
8284: CALL_OW 88
8288: GO 8302
// Say ( Platonov , D5a-Pla-1a ) ;
8290: LD_EXP 73
8294: PPUSH
8295: LD_STRING D5a-Pla-1a
8297: PPUSH
8298: CALL_OW 88
// DialogueOff ;
8302: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8306: LD_STRING M2b
8308: PPUSH
8309: CALL_OW 337
// end ;
8313: LD_VAR 0 1
8317: RET
// export function Dial_WorkshopConstructed ; begin
8318: LD_INT 0
8320: PPUSH
// workshopConstructed = true ;
8321: LD_ADDR_EXP 9
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// DialogueOn ;
8329: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8333: LD_EXP 59
8337: PPUSH
8338: LD_STRING D5b-Bur-1
8340: PPUSH
8341: CALL_OW 88
// if labConstructed then
8345: LD_EXP 8
8349: IFFALSE 8365
// Say ( Platonov , D5b-Pla-1 ) else
8351: LD_EXP 73
8355: PPUSH
8356: LD_STRING D5b-Pla-1
8358: PPUSH
8359: CALL_OW 88
8363: GO 8377
// Say ( Platonov , D5b-Pla-1a ) ;
8365: LD_EXP 73
8369: PPUSH
8370: LD_STRING D5b-Pla-1a
8372: PPUSH
8373: CALL_OW 88
// DialogueOff ;
8377: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8381: LD_STRING M2c
8383: PPUSH
8384: CALL_OW 337
// end ;
8388: LD_VAR 0 1
8392: RET
// export function Dial_StopConstructAgainSameBuilding ( building ) ; begin
8393: LD_INT 0
8395: PPUSH
// wait ( 0 0$1 ) ;
8396: LD_INT 35
8398: PPUSH
8399: CALL_OW 67
// CenterNowOnUnits ( building ) ;
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 87
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8412: LD_INT 22
8414: PUSH
8415: LD_INT 3
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_INT 21
8424: PUSH
8425: LD_INT 1
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PPUSH
8436: CALL_OW 69
8440: PPUSH
8441: CALL_OW 141
// DialogueOn ;
8445: CALL_OW 6
// Say ( Platonov , D6-Pla-1 ) ;
8449: LD_EXP 73
8453: PPUSH
8454: LD_STRING D6-Pla-1
8456: PPUSH
8457: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8461: LD_EXP 59
8465: PPUSH
8466: LD_STRING D6-Bur-1
8468: PPUSH
8469: CALL_OW 88
// DialogueOff ;
8473: CALL_OW 7
// case GetBType ( building ) of b_lab :
8477: LD_VAR 0 1
8481: PPUSH
8482: CALL_OW 266
8486: PUSH
8487: LD_INT 6
8489: DOUBLE
8490: EQUAL
8491: IFTRUE 8495
8493: GO 8535
8495: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + labCratesRefund ) ; b_workshop :
8496: LD_INT 106
8498: PPUSH
8499: CALL_OW 274
8503: PPUSH
8504: LD_INT 1
8506: PPUSH
8507: LD_INT 106
8509: PPUSH
8510: CALL_OW 274
8514: PPUSH
8515: LD_INT 1
8517: PPUSH
8518: CALL_OW 275
8522: PUSH
8523: LD_EXP 51
8527: PLUS
8528: PPUSH
8529: CALL_OW 277
8533: GO 8728
8535: LD_INT 2
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8583
8543: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + workshopCratesRefund ) ; b_oil_power :
8544: LD_INT 106
8546: PPUSH
8547: CALL_OW 274
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: LD_INT 106
8557: PPUSH
8558: CALL_OW 274
8562: PPUSH
8563: LD_INT 1
8565: PPUSH
8566: CALL_OW 275
8570: PUSH
8571: LD_EXP 52
8575: PLUS
8576: PPUSH
8577: CALL_OW 277
8581: GO 8728
8583: LD_INT 26
8585: DOUBLE
8586: EQUAL
8587: IFTRUE 8591
8589: GO 8631
8591: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + oilPowerCratesRefund ) ; b_armoury :
8592: LD_INT 106
8594: PPUSH
8595: CALL_OW 274
8599: PPUSH
8600: LD_INT 1
8602: PPUSH
8603: LD_INT 106
8605: PPUSH
8606: CALL_OW 274
8610: PPUSH
8611: LD_INT 1
8613: PPUSH
8614: CALL_OW 275
8618: PUSH
8619: LD_EXP 53
8623: PLUS
8624: PPUSH
8625: CALL_OW 277
8629: GO 8728
8631: LD_INT 4
8633: DOUBLE
8634: EQUAL
8635: IFTRUE 8639
8637: GO 8679
8639: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + armouryCratesRefund ) ; b_breastwork :
8640: LD_INT 106
8642: PPUSH
8643: CALL_OW 274
8647: PPUSH
8648: LD_INT 1
8650: PPUSH
8651: LD_INT 106
8653: PPUSH
8654: CALL_OW 274
8658: PPUSH
8659: LD_INT 1
8661: PPUSH
8662: CALL_OW 275
8666: PUSH
8667: LD_EXP 54
8671: PLUS
8672: PPUSH
8673: CALL_OW 277
8677: GO 8728
8679: LD_INT 31
8681: DOUBLE
8682: EQUAL
8683: IFTRUE 8687
8685: GO 8727
8687: POP
// SetResourceType ( GetBase ( beria ) , mat_cans , GetResourceType ( GetBase ( beria ) , mat_cans ) + bunkerCratesRefund ) ; end ;
8688: LD_INT 106
8690: PPUSH
8691: CALL_OW 274
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_INT 106
8701: PPUSH
8702: CALL_OW 274
8706: PPUSH
8707: LD_INT 1
8709: PPUSH
8710: CALL_OW 275
8714: PUSH
8715: LD_EXP 55
8719: PLUS
8720: PPUSH
8721: CALL_OW 277
8725: GO 8728
8727: POP
// RemoveUnit ( building ) ;
8728: LD_VAR 0 1
8732: PPUSH
8733: CALL_OW 64
// end ;
8737: LD_VAR 0 2
8741: RET
// every 0 0$2 trigger workshopConstructed and labConstructed do
8742: LD_EXP 9
8746: PUSH
8747: LD_EXP 8
8751: AND
8752: IFFALSE 8861
8754: GO 8756
8756: DISABLE
// begin DialogueOn ;
8757: CALL_OW 6
// if engineResearched then
8761: LD_EXP 10
8765: IFFALSE 8793
// begin Say ( Burlak , D7b-Bur-1 ) ;
8767: LD_EXP 59
8771: PPUSH
8772: LD_STRING D7b-Bur-1
8774: PPUSH
8775: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8779: LD_EXP 73
8783: PPUSH
8784: LD_STRING D7b-Pla-1
8786: PPUSH
8787: CALL_OW 88
// end else
8791: GO 8817
// begin Say ( Burlak , D7a-Bur-1 ) ;
8793: LD_EXP 59
8797: PPUSH
8798: LD_STRING D7a-Bur-1
8800: PPUSH
8801: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8805: LD_EXP 73
8809: PPUSH
8810: LD_STRING D7a-Pla-1
8812: PPUSH
8813: CALL_OW 88
// end ; DialogueOff ;
8817: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8821: LD_STRING M2
8823: PPUSH
8824: CALL_OW 337
// CreateCratesXYR ( 5 , GetX ( Platonov ) , GetY ( Platonov ) , 5 , true ) ;
8828: LD_INT 5
8830: PPUSH
8831: LD_EXP 73
8835: PPUSH
8836: CALL_OW 250
8840: PPUSH
8841: LD_EXP 73
8845: PPUSH
8846: CALL_OW 251
8850: PPUSH
8851: LD_INT 5
8853: PPUSH
8854: LD_INT 1
8856: PPUSH
8857: CALL_OW 56
// end ;
8861: END
// export function Dial_NewCrates ( x , y ) ; begin
8862: LD_INT 0
8864: PPUSH
// wait ( 0 0$18 ) ;
8865: LD_INT 630
8867: PPUSH
8868: CALL_OW 67
// ComMoveXY ( Platonov , x , y ) ;
8872: LD_EXP 73
8876: PPUSH
8877: LD_VAR 0 1
8881: PPUSH
8882: LD_VAR 0 2
8886: PPUSH
8887: CALL_OW 111
// Say ( Platonov , D4-Pla-1 ) ;
8891: LD_EXP 73
8895: PPUSH
8896: LD_STRING D4-Pla-1
8898: PPUSH
8899: CALL_OW 88
// end ;
8903: LD_VAR 0 3
8907: RET
// export function Dial_FirstVehConstructed ( factory ) ; begin
8908: LD_INT 0
8910: PPUSH
// firstVeh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
8911: LD_ADDR_EXP 13
8915: PUSH
8916: LD_INT 22
8918: PUSH
8919: LD_INT 3
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 21
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 69
8944: PUSH
8945: LD_INT 1
8947: ARRAY
8948: ST_TO_ADDR
// constructedFirstVehicle = true ;
8949: LD_ADDR_EXP 12
8953: PUSH
8954: LD_INT 1
8956: ST_TO_ADDR
// InGameOn ;
8957: CALL_OW 8
// CenterNowOnUnits ( factory ) ;
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 87
// wait ( 0 0$3 ) ;
8970: LD_INT 105
8972: PPUSH
8973: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
8977: LD_EXP 59
8981: PPUSH
8982: LD_STRING D9-Bur-1
8984: PPUSH
8985: CALL_OW 88
// ComMoveXY ( Platonov , GetX ( firstVeh ) , GetY ( firstVeh ) ) ;
8989: LD_EXP 73
8993: PPUSH
8994: LD_EXP 13
8998: PPUSH
8999: CALL_OW 250
9003: PPUSH
9004: LD_EXP 13
9008: PPUSH
9009: CALL_OW 251
9013: PPUSH
9014: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
9018: LD_INT 35
9020: PPUSH
9021: CALL_OW 67
// until GetDistUnits ( Platonov , firstVeh ) < 4 ;
9025: LD_EXP 73
9029: PPUSH
9030: LD_EXP 13
9034: PPUSH
9035: CALL_OW 296
9039: PUSH
9040: LD_INT 4
9042: LESS
9043: IFFALSE 9018
// ComTurnUnit ( Platonov , firstVeh ) ;
9045: LD_EXP 73
9049: PPUSH
9050: LD_EXP 13
9054: PPUSH
9055: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9059: LD_EXP 73
9063: PPUSH
9064: LD_STRING D9-Pla-1
9066: PPUSH
9067: CALL_OW 88
// InGameOff ;
9071: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9075: LD_STRING M3
9077: PPUSH
9078: CALL_OW 337
// canExitBase = true ;
9082: LD_ADDR_EXP 19
9086: PUSH
9087: LD_INT 1
9089: ST_TO_ADDR
// ComMoveXY ( Platonov , 112 , 97 ) ;
9090: LD_EXP 73
9094: PPUSH
9095: LD_INT 112
9097: PPUSH
9098: LD_INT 97
9100: PPUSH
9101: CALL_OW 111
// end ;
9105: LD_VAR 0 2
9109: RET
// every 0 0$1 trigger IsInArea ( firstVeh , KirovBaseArea ) and not vehicleForKurin do var i , eng , mech ;
9110: LD_EXP 13
9114: PPUSH
9115: LD_INT 9
9117: PPUSH
9118: CALL_OW 308
9122: PUSH
9123: LD_EXP 14
9127: NOT
9128: AND
9129: IFFALSE 9981
9131: GO 9133
9133: DISABLE
9134: LD_INT 0
9136: PPUSH
9137: PPUSH
9138: PPUSH
// begin vehicleForKurin = true ;
9139: LD_ADDR_EXP 14
9143: PUSH
9144: LD_INT 1
9146: ST_TO_ADDR
// eng = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) [ 1 ] ;
9147: LD_ADDR_VAR 0 2
9151: PUSH
9152: LD_EXP 66
9156: PPUSH
9157: LD_INT 25
9159: PUSH
9160: LD_INT 2
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: PPUSH
9167: CALL_OW 72
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: ST_TO_ADDR
// mech = UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) [ 1 ] ;
9176: LD_ADDR_VAR 0 3
9180: PUSH
9181: LD_EXP 66
9185: PPUSH
9186: LD_INT 25
9188: PUSH
9189: LD_INT 3
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PPUSH
9196: CALL_OW 72
9200: PUSH
9201: LD_INT 1
9203: ARRAY
9204: ST_TO_ADDR
// InGameOn ;
9205: CALL_OW 8
// CenterNowOnUnits ( Kurin ) ;
9209: LD_EXP 64
9213: PPUSH
9214: CALL_OW 87
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9218: LD_EXP 13
9222: PPUSH
9223: LD_EXP 64
9227: PPUSH
9228: CALL_OW 250
9232: PPUSH
9233: LD_EXP 64
9237: PPUSH
9238: CALL_OW 251
9242: PPUSH
9243: CALL_OW 111
// Say ( Kurin , D10-Kur-1 ) ;
9247: LD_EXP 64
9251: PPUSH
9252: LD_STRING D10-Kur-1
9254: PPUSH
9255: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
9259: LD_INT 35
9261: PPUSH
9262: CALL_OW 67
// ComMoveXY ( firstVeh , GetX ( Kurin ) , GetY ( Kurin ) ) ;
9266: LD_EXP 13
9270: PPUSH
9271: LD_EXP 64
9275: PPUSH
9276: CALL_OW 250
9280: PPUSH
9281: LD_EXP 64
9285: PPUSH
9286: CALL_OW 251
9290: PPUSH
9291: CALL_OW 111
// until GetDistUnits ( firstVeh , Kurin ) < 9 ;
9295: LD_EXP 13
9299: PPUSH
9300: LD_EXP 64
9304: PPUSH
9305: CALL_OW 296
9309: PUSH
9310: LD_INT 9
9312: LESS
9313: IFFALSE 9259
// ComExitVehicle ( UnitsInside ( firstVeh ) ) ;
9315: LD_EXP 13
9319: PPUSH
9320: CALL_OW 313
9324: PPUSH
9325: CALL_OW 121
// wait ( 0 0$1 ) ;
9329: LD_INT 35
9331: PPUSH
9332: CALL_OW 67
// if GetLives ( firstVeh ) < 1000 then
9336: LD_EXP 13
9340: PPUSH
9341: CALL_OW 256
9345: PUSH
9346: LD_INT 1000
9348: LESS
9349: IFFALSE 9381
// begin ComExitBuilding ( mech ) ;
9351: LD_VAR 0 3
9355: PPUSH
9356: CALL_OW 122
// wait ( 0 0$1 ) ;
9360: LD_INT 35
9362: PPUSH
9363: CALL_OW 67
// AddComRepairVehicle ( mech , firstVeh ) ;
9367: LD_VAR 0 3
9371: PPUSH
9372: LD_EXP 13
9376: PPUSH
9377: CALL_OW 189
// end ; if GetFuel ( firstVeh ) < 90 then
9381: LD_EXP 13
9385: PPUSH
9386: CALL_OW 261
9390: PUSH
9391: LD_INT 90
9393: LESS
9394: IFFALSE 9429
// begin ComExitBuilding ( eng ) ;
9396: LD_VAR 0 2
9400: PPUSH
9401: CALL_OW 122
// wait ( 0 0$1 ) ;
9405: LD_INT 35
9407: PPUSH
9408: CALL_OW 67
// ExtAddComRefuel ( eng , kirov , firstVeh ) ;
9412: LD_VAR 0 2
9416: PPUSH
9417: LD_INT 71
9419: PPUSH
9420: LD_EXP 13
9424: PPUSH
9425: CALL 4609 0 3
// end ; repeat wait ( 0 0$1 ) ;
9429: LD_INT 35
9431: PPUSH
9432: CALL_OW 67
// until GetLives ( firstVeh ) = 1000 and GetFuel ( firstVeh ) > 90 ;
9436: LD_EXP 13
9440: PPUSH
9441: CALL_OW 256
9445: PUSH
9446: LD_INT 1000
9448: EQUAL
9449: PUSH
9450: LD_EXP 13
9454: PPUSH
9455: CALL_OW 261
9459: PUSH
9460: LD_INT 90
9462: GREATER
9463: AND
9464: IFFALSE 9429
// ComEnterUnit ( eng , kirov ) ;
9466: LD_VAR 0 2
9470: PPUSH
9471: LD_INT 71
9473: PPUSH
9474: CALL_OW 120
// SetSide ( firstVeh , 6 ) ;
9478: LD_EXP 13
9482: PPUSH
9483: LD_INT 6
9485: PPUSH
9486: CALL_OW 235
// if belkovReturn then
9490: LD_EXP 6
9494: IFFALSE 9580
// begin if IsInUnit ( Belkov ) then
9496: LD_EXP 61
9500: PPUSH
9501: CALL_OW 310
9505: IFFALSE 9516
// ComExitBuilding ( Belkov ) ;
9507: LD_EXP 61
9511: PPUSH
9512: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9516: LD_INT 35
9518: PPUSH
9519: CALL_OW 67
// AddComEnterUnit ( Belkov , firstVeh ) ;
9523: LD_EXP 61
9527: PPUSH
9528: LD_EXP 13
9532: PPUSH
9533: CALL_OW 180
// until IsInUnit ( Belkov ) = firstVeh ;
9537: LD_EXP 61
9541: PPUSH
9542: CALL_OW 310
9546: PUSH
9547: LD_EXP 13
9551: EQUAL
9552: IFFALSE 9516
// Say ( Belkov , D10-Bel-1 ) ;
9554: LD_EXP 61
9558: PPUSH
9559: LD_STRING D10-Bel-1
9561: PPUSH
9562: CALL_OW 88
// Say ( Kurin , D10-Kur-2 ) ;
9566: LD_EXP 64
9570: PPUSH
9571: LD_STRING D10-Kur-2
9573: PPUSH
9574: CALL_OW 88
// end else
9578: GO 9706
// begin if IsInUnit ( Belkov2 ) then
9580: LD_EXP 65
9584: PPUSH
9585: CALL_OW 310
9589: IFFALSE 9600
// ComExitBuilding ( Belkov2 ) ;
9591: LD_EXP 65
9595: PPUSH
9596: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
9600: LD_INT 35
9602: PPUSH
9603: CALL_OW 67
// AddComEnterUnit ( Belkov2 , firstVeh ) ;
9607: LD_EXP 65
9611: PPUSH
9612: LD_EXP 13
9616: PPUSH
9617: CALL_OW 180
// until IsInUnit ( Belkov2 ) = firstVeh ;
9621: LD_EXP 65
9625: PPUSH
9626: CALL_OW 310
9630: PUSH
9631: LD_EXP 13
9635: EQUAL
9636: IFFALSE 9600
// meetBelkovBrother = true ;
9638: LD_ADDR_EXP 4
9642: PUSH
9643: LD_INT 1
9645: ST_TO_ADDR
// Say ( Belkov2 , D10-Bel-1 ) ;
9646: LD_EXP 65
9650: PPUSH
9651: LD_STRING D10-Bel-1
9653: PPUSH
9654: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
9658: LD_EXP 59
9662: PPUSH
9663: LD_STRING D10-Bur-1
9665: PPUSH
9666: CALL_OW 88
// Say ( Belkov2 , D10-Bel-2 ) ;
9670: LD_EXP 65
9674: PPUSH
9675: LD_STRING D10-Bel-2
9677: PPUSH
9678: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
9682: LD_EXP 59
9686: PPUSH
9687: LD_STRING D10-Bur-2
9689: PPUSH
9690: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
9694: LD_EXP 64
9698: PPUSH
9699: LD_STRING D10-Kur-2a
9701: PPUSH
9702: CALL_OW 88
// end ; removedBelkovUntisSaved = [ ] ;
9706: LD_ADDR_EXP 71
9710: PUSH
9711: EMPTY
9712: ST_TO_ADDR
// removedBelkovVehicleSaved = [ ] ;
9713: LD_ADDR_EXP 72
9717: PUSH
9718: EMPTY
9719: ST_TO_ADDR
// canRemoveBelkovUnits = true ;
9720: LD_ADDR_EXP 22
9724: PUSH
9725: LD_INT 1
9727: ST_TO_ADDR
// CreateBelkovTeam ;
9728: CALL 6011 0 0
// ComExitBuilding ( belkovTeam ) ;
9732: LD_EXP 70
9736: PPUSH
9737: CALL_OW 122
// wait ( 0 0$1 ) ;
9741: LD_INT 35
9743: PPUSH
9744: CALL_OW 67
// kirovVehicle = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
9748: LD_ADDR_EXP 69
9752: PUSH
9753: LD_INT 22
9755: PUSH
9756: LD_INT 6
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 21
9765: PUSH
9766: LD_INT 2
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PPUSH
9777: CALL_OW 69
9781: PUSH
9782: LD_INT 1
9784: ARRAY
9785: ST_TO_ADDR
// belkovTeam = belkovTeam ^ kirovVehicle ;
9786: LD_ADDR_EXP 70
9790: PUSH
9791: LD_EXP 70
9795: PUSH
9796: LD_EXP 69
9800: ADD
9801: ST_TO_ADDR
// ComMoveXY ( belkovTeam , 147 , 102 ) ;
9802: LD_EXP 70
9806: PPUSH
9807: LD_INT 147
9809: PPUSH
9810: LD_INT 102
9812: PPUSH
9813: CALL_OW 111
// AddComMoveXY ( belkovTeam , 133 , 94 ) ;
9817: LD_EXP 70
9821: PPUSH
9822: LD_INT 133
9824: PPUSH
9825: LD_INT 94
9827: PPUSH
9828: CALL_OW 171
// AddComMoveXY ( belkovTeam , 123 , 74 ) ;
9832: LD_EXP 70
9836: PPUSH
9837: LD_INT 123
9839: PPUSH
9840: LD_INT 74
9842: PPUSH
9843: CALL_OW 171
// AddComMoveXY ( belkovTeam , 111 , 48 ) ;
9847: LD_EXP 70
9851: PPUSH
9852: LD_INT 111
9854: PPUSH
9855: LD_INT 48
9857: PPUSH
9858: CALL_OW 171
// AddComMoveXY ( belkovTeam , 122 , 43 ) ;
9862: LD_EXP 70
9866: PPUSH
9867: LD_INT 122
9869: PPUSH
9870: LD_INT 43
9872: PPUSH
9873: CALL_OW 171
// AddComMoveXY ( belkovTeam , 129 , 32 ) ;
9877: LD_EXP 70
9881: PPUSH
9882: LD_INT 129
9884: PPUSH
9885: LD_INT 32
9887: PPUSH
9888: CALL_OW 171
// AddComMoveXY ( belkovTeam , 132 , 22 ) ;
9892: LD_EXP 70
9896: PPUSH
9897: LD_INT 132
9899: PPUSH
9900: LD_INT 22
9902: PPUSH
9903: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
9907: LD_INT 35
9909: PPUSH
9910: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
9914: LD_EXP 69
9918: PPUSH
9919: CALL_OW 87
// until GetDistUnitArea ( kirovVehicle , belkovExitArea ) < 10 ;
9923: LD_EXP 69
9927: PPUSH
9928: LD_INT 10
9930: PPUSH
9931: CALL_OW 299
9935: PUSH
9936: LD_INT 10
9938: LESS
9939: IFFALSE 9907
// CenterNowOnUnits ( Kurin ) ;
9941: LD_EXP 64
9945: PPUSH
9946: CALL_OW 87
// Say ( Kurin , D10-Kur-2b ) ;
9950: LD_EXP 64
9954: PPUSH
9955: LD_STRING D10-Kur-2b
9957: PPUSH
9958: CALL_OW 88
// InGameOff ;
9962: CALL_OW 9
// ChangeMissionObjectives ( M4 ) ;
9966: LD_STRING M4
9968: PPUSH
9969: CALL_OW 337
// backToBeria1 = true ;
9973: LD_ADDR_EXP 15
9977: PUSH
9978: LD_INT 1
9980: ST_TO_ADDR
// end ;
9981: PPOPN 3
9983: END
// every 0 0$1 trigger FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and vehicleForKurin do
9984: LD_INT 9
9986: PPUSH
9987: LD_INT 22
9989: PUSH
9990: LD_INT 3
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 21
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PPUSH
10011: CALL_OW 70
10015: PUSH
10016: LD_EXP 14
10020: AND
10021: IFFALSE 10038
10023: GO 10025
10025: DISABLE
// Say ( Kurin , D1a-Kur-1a ) ;
10026: LD_EXP 64
10030: PPUSH
10031: LD_STRING D1a-Kur-1a
10033: PPUSH
10034: CALL_OW 88
10038: END
// every 1 trigger canRemoveBelkovUnits do var unit , driver ;
10039: LD_EXP 22
10043: IFFALSE 10413
10045: GO 10047
10047: DISABLE
10048: LD_INT 0
10050: PPUSH
10051: PPUSH
// begin enable ;
10052: ENABLE
// if FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) = 0 then
10053: LD_INT 10
10055: PPUSH
10056: LD_INT 22
10058: PUSH
10059: LD_INT 6
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PPUSH
10066: CALL_OW 70
10070: PUSH
10071: LD_INT 0
10073: EQUAL
10074: IFFALSE 10078
// exit ;
10076: GO 10413
// for unit in FilterUnitsInArea ( BelkovExitArea , [ f_side , 6 ] ) do
10078: LD_ADDR_VAR 0 1
10082: PUSH
10083: LD_INT 10
10085: PPUSH
10086: LD_INT 22
10088: PUSH
10089: LD_INT 6
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 70
10100: PUSH
10101: FOR_IN
10102: IFFALSE 10399
// begin if GetType ( unit ) = unit_human and ( not unit = Belkov and not unit = Belkov2 and not unit = Kirilenkova ) then
10104: LD_VAR 0 1
10108: PPUSH
10109: CALL_OW 247
10113: PUSH
10114: LD_INT 1
10116: EQUAL
10117: PUSH
10118: LD_VAR 0 1
10122: PUSH
10123: LD_EXP 61
10127: EQUAL
10128: NOT
10129: PUSH
10130: LD_VAR 0 1
10134: PUSH
10135: LD_EXP 65
10139: EQUAL
10140: NOT
10141: AND
10142: PUSH
10143: LD_VAR 0 1
10147: PUSH
10148: LD_EXP 62
10152: EQUAL
10153: NOT
10154: AND
10155: AND
10156: IFFALSE 10197
// begin removedBelkovUntis = removedBelkovUntis + 1 ;
10158: LD_ADDR_EXP 23
10162: PUSH
10163: LD_EXP 23
10167: PUSH
10168: LD_INT 1
10170: PLUS
10171: ST_TO_ADDR
// removedBelkovUntisSaved = removedBelkovUntisSaved ^ unit ;
10172: LD_ADDR_EXP 71
10176: PUSH
10177: LD_EXP 71
10181: PUSH
10182: LD_VAR 0 1
10186: ADD
10187: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10188: LD_VAR 0 1
10192: PPUSH
10193: CALL_OW 64
// end ; if unit = Kirilenkova then
10197: LD_VAR 0 1
10201: PUSH
10202: LD_EXP 62
10206: EQUAL
10207: IFFALSE 10230
// begin SaveCharacters ( Kirilenkova , 02_TmpKirilenkova ) ;
10209: LD_EXP 62
10213: PPUSH
10214: LD_STRING 02_TmpKirilenkova
10216: PPUSH
10217: CALL_OW 38
// RemoveUnit ( unit ) ;
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 64
// end ; if GetType ( unit ) = unit_vehicle then
10230: LD_VAR 0 1
10234: PPUSH
10235: CALL_OW 247
10239: PUSH
10240: LD_INT 2
10242: EQUAL
10243: IFFALSE 10397
// begin driver = UnitsInside ( unit ) ;
10245: LD_ADDR_VAR 0 2
10249: PUSH
10250: LD_VAR 0 1
10254: PPUSH
10255: CALL_OW 313
10259: ST_TO_ADDR
// if driver [ 1 ] = Belkov then
10260: LD_VAR 0 2
10264: PUSH
10265: LD_INT 1
10267: ARRAY
10268: PUSH
10269: LD_EXP 61
10273: EQUAL
10274: IFFALSE 10299
// begin SaveCharacters ( Belkov , 02_TmpBelkov ) ;
10276: LD_EXP 61
10280: PPUSH
10281: LD_STRING 02_TmpBelkov
10283: PPUSH
10284: CALL_OW 38
// RemoveUnit ( unit ) ;
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 64
// end else
10297: GO 10320
// begin SaveCharacters ( Belkov2 , 02_TmpBelkov2 ) ;
10299: LD_EXP 65
10303: PPUSH
10304: LD_STRING 02_TmpBelkov2
10306: PPUSH
10307: CALL_OW 38
// RemoveUnit ( unit ) ;
10311: LD_VAR 0 1
10315: PPUSH
10316: CALL_OW 64
// end ; removedBelkovVehicleSaved = removedBelkovVehicleSaved ^ [ GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) , GetFuel ( unit ) ] ;
10320: LD_ADDR_EXP 72
10324: PUSH
10325: LD_EXP 72
10329: PUSH
10330: LD_VAR 0 1
10334: PPUSH
10335: CALL_OW 265
10339: PUSH
10340: LD_VAR 0 1
10344: PPUSH
10345: CALL_OW 262
10349: PUSH
10350: LD_VAR 0 1
10354: PPUSH
10355: CALL_OW 263
10359: PUSH
10360: LD_VAR 0 1
10364: PPUSH
10365: CALL_OW 264
10369: PUSH
10370: LD_VAR 0 1
10374: PPUSH
10375: CALL_OW 261
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: ADD
10387: ST_TO_ADDR
// RemoveUnit ( unit ) ;
10388: LD_VAR 0 1
10392: PPUSH
10393: CALL_OW 64
// end ; end ;
10397: GO 10101
10399: POP
10400: POP
// SaveCharacters ( removedBelkovUntisSaved , 02_TmpBelkovTeam ) ;
10401: LD_EXP 71
10405: PPUSH
10406: LD_STRING 02_TmpBelkovTeam
10408: PPUSH
10409: CALL_OW 38
// end ;
10413: PPOPN 2
10415: END
// every 0 0$1 trigger FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and backToBeria1 do var engs ;
10416: LD_INT 8
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PUSH
10429: LD_INT 21
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: PPUSH
10443: CALL_OW 71
10447: PUSH
10448: LD_INT 0
10450: EQUAL
10451: PUSH
10452: LD_EXP 15
10456: AND
10457: IFFALSE 10643
10459: GO 10461
10461: DISABLE
10462: LD_INT 0
10464: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
10465: LD_ADDR_VAR 0 1
10469: PUSH
10470: LD_EXP 66
10474: PPUSH
10475: LD_INT 25
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PPUSH
10485: CALL_OW 72
10489: ST_TO_ADDR
// backToBeria1 = false ;
10490: LD_ADDR_EXP 15
10494: PUSH
10495: LD_INT 0
10497: ST_TO_ADDR
// canExitBase = false ;
10498: LD_ADDR_EXP 19
10502: PUSH
10503: LD_INT 0
10505: ST_TO_ADDR
// Say ( Platonov , D11-Pla-1 ) ;
10506: LD_EXP 73
10510: PPUSH
10511: LD_STRING D11-Pla-1
10513: PPUSH
10514: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10518: LD_INT 22
10520: PUSH
10521: LD_INT 3
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: LD_INT 21
10530: PUSH
10531: LD_INT 1
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PPUSH
10542: CALL_OW 69
10546: PUSH
10547: LD_INT 1
10549: GREATER
10550: IFFALSE 10566
// Say ( Burlak , D11-Bur-1a ) else
10552: LD_EXP 59
10556: PPUSH
10557: LD_STRING D11-Bur-1a
10559: PPUSH
10560: CALL_OW 88
10564: GO 10578
// Say ( Burlak , D11-Bur-1 ) ;
10566: LD_EXP 59
10570: PPUSH
10571: LD_STRING D11-Bur-1
10573: PPUSH
10574: CALL_OW 88
// ChangeMissionObjectives ( M5 ) ;
10578: LD_STRING M5
10580: PPUSH
10581: CALL_OW 337
// construcMoreVehicles = true ;
10585: LD_ADDR_EXP 17
10589: PUSH
10590: LD_INT 1
10592: ST_TO_ADDR
// spawnCrates = true ;
10593: LD_ADDR_EXP 21
10597: PUSH
10598: LD_INT 1
10600: ST_TO_ADDR
// AddComExitBuilding ( engs ) ;
10601: LD_VAR 0 1
10605: PPUSH
10606: CALL_OW 182
// AddComBuild ( engs , b_workshop , 159 , 112 , 0 ) ;
10610: LD_VAR 0 1
10614: PPUSH
10615: LD_INT 2
10617: PPUSH
10618: LD_INT 159
10620: PPUSH
10621: LD_INT 112
10623: PPUSH
10624: LD_INT 0
10626: PPUSH
10627: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
10631: LD_VAR 0 1
10635: PPUSH
10636: LD_INT 71
10638: PPUSH
10639: CALL_OW 180
// end ;
10643: PPOPN 1
10645: END
// every 0 0$1 trigger constructedVehiclesCounter >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do var tmpBelkov , nearRuUnit ;
10646: LD_EXP 18
10650: PUSH
10651: LD_INT 22
10653: PUSH
10654: LD_INT 3
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 21
10663: PUSH
10664: LD_INT 1
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: PUSH
10671: EMPTY
10672: LIST
10673: LIST
10674: PPUSH
10675: CALL_OW 69
10679: GREATEREQUAL
10680: IFFALSE 11717
10682: GO 10684
10684: DISABLE
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
// begin canRemoveBelkovUnits = false ;
10689: LD_ADDR_EXP 22
10693: PUSH
10694: LD_INT 0
10696: ST_TO_ADDR
// spawnCrates = false ;
10697: LD_ADDR_EXP 21
10701: PUSH
10702: LD_INT 0
10704: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ) ;
10705: LD_INT 22
10707: PUSH
10708: LD_INT 3
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 2
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 21
10730: PUSH
10731: LD_INT 2
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: LIST
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PPUSH
10747: CALL_OW 69
10751: PPUSH
10752: CALL_OW 141
// InGameOn ;
10756: CALL_OW 8
// CenterOnUnits ( Platonov ) ;
10760: LD_EXP 73
10764: PPUSH
10765: CALL_OW 85
// DialogueOn ;
10769: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
10773: LD_EXP 59
10777: PPUSH
10778: LD_STRING D12-Bur-1
10780: PPUSH
10781: CALL_OW 88
// Say ( Platonov , D12-Pla-1 ) ;
10785: LD_EXP 73
10789: PPUSH
10790: LD_STRING D12-Pla-1
10792: PPUSH
10793: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10797: LD_EXP 59
10801: PPUSH
10802: LD_STRING D12-Bur-2
10804: PPUSH
10805: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10809: LD_EXP 73
10813: PPUSH
10814: LD_STRING D12-Pla-2
10816: PPUSH
10817: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10821: LD_EXP 59
10825: PPUSH
10826: LD_STRING D12-Bur-3
10828: PPUSH
10829: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10833: LD_EXP 73
10837: PPUSH
10838: LD_STRING D12-Pla-3
10840: PPUSH
10841: CALL_OW 88
// DialogueOff ;
10845: CALL_OW 7
// SetAttitude ( 6 , 1 , att_friend , true ) ;
10849: LD_INT 6
10851: PPUSH
10852: LD_INT 1
10854: PPUSH
10855: LD_INT 1
10857: PPUSH
10858: LD_INT 1
10860: PPUSH
10861: CALL_OW 80
// PrepareAmerican ;
10865: CALL 2822 0 0
// PrepareBelkovReturnTeam ;
10869: CALL 1108 0 0
// if IsOK ( Belkov ) then
10873: LD_EXP 61
10877: PPUSH
10878: CALL_OW 302
10882: IFFALSE 10896
// tmpBelkov = Belkov else
10884: LD_ADDR_VAR 0 1
10888: PUSH
10889: LD_EXP 61
10893: ST_TO_ADDR
10894: GO 10906
// tmpBelkov = Belkov2 ;
10896: LD_ADDR_VAR 0 1
10900: PUSH
10901: LD_EXP 65
10905: ST_TO_ADDR
// CenterNowOnUnits ( kirovVehicle ) ;
10906: LD_EXP 69
10910: PPUSH
10911: CALL_OW 87
// SayRadio ( trapCommander , D13-Sol1-1 ) ;
10915: LD_EXP 77
10919: PPUSH
10920: LD_STRING D13-Sol1-1
10922: PPUSH
10923: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-1 ) ;
10927: LD_VAR 0 1
10931: PPUSH
10932: LD_STRING D13-Bel-1
10934: PPUSH
10935: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10939: LD_EXP 64
10943: PPUSH
10944: LD_STRING D13-Kur-1
10946: PPUSH
10947: CALL_OW 94
// SayRadio ( tmpBelkov , D13-Bel-2 ) ;
10951: LD_VAR 0 1
10955: PPUSH
10956: LD_STRING D13-Bel-2
10958: PPUSH
10959: CALL_OW 94
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
10963: LD_EXP 70
10967: PPUSH
10968: LD_INT 121
10970: PPUSH
10971: LD_INT 29
10973: PPUSH
10974: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
10978: LD_INT 35
10980: PPUSH
10981: CALL_OW 67
// CenterNowOnUnits ( kirovVehicle ) ;
10985: LD_EXP 69
10989: PPUSH
10990: CALL_OW 87
// nearRuUnit = NearestUnitToUnit ( UnitFilter ( belkovTeam , [ [ f_type , unit_human ] , [ f_outside ] ] ) , kirovVehicle ) ;
10994: LD_ADDR_VAR 0 2
10998: PUSH
10999: LD_EXP 70
11003: PPUSH
11004: LD_INT 21
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 56
11016: PUSH
11017: EMPTY
11018: LIST
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PPUSH
11024: CALL_OW 72
11028: PPUSH
11029: LD_EXP 69
11033: PPUSH
11034: CALL_OW 74
11038: ST_TO_ADDR
// if GetDistUnits ( kirovVehicle , nearRuUnit ) < 5 then
11039: LD_EXP 69
11043: PPUSH
11044: LD_VAR 0 2
11048: PPUSH
11049: CALL_OW 296
11053: PUSH
11054: LD_INT 5
11056: LESS
11057: IFFALSE 11070
// ComStop ( kirovVehicle ) else
11059: LD_EXP 69
11063: PPUSH
11064: CALL_OW 141
11068: GO 11085
// ComMoveXY ( belkovTeam , 121 , 29 ) ;
11070: LD_EXP 70
11074: PPUSH
11075: LD_INT 121
11077: PPUSH
11078: LD_INT 29
11080: PPUSH
11081: CALL_OW 111
// until GetDistUnits ( NearestUnitToUnit ( belkovTeam , trapCommander ) , trapCommander ) < 5 ;
11085: LD_EXP 70
11089: PPUSH
11090: LD_EXP 77
11094: PPUSH
11095: CALL_OW 74
11099: PPUSH
11100: LD_EXP 77
11104: PPUSH
11105: CALL_OW 296
11109: PUSH
11110: LD_INT 5
11112: LESS
11113: IFFALSE 10978
// CenterNowOnUnits ( [ kirovVehicle , trapCommander ] ) ;
11115: LD_EXP 69
11119: PUSH
11120: LD_EXP 77
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PPUSH
11129: CALL_OW 87
// ComWalk ( trapTeam ) ;
11133: LD_EXP 78
11137: PPUSH
11138: CALL_OW 138
// AddComTurnUnit ( trapTeam , kirovVehicle ) ;
11142: LD_EXP 78
11146: PPUSH
11147: LD_EXP 69
11151: PPUSH
11152: CALL_OW 179
// ComStop ( belkovTeam ) ;
11156: LD_EXP 70
11160: PPUSH
11161: CALL_OW 141
// AddComTurnUnit ( belkovTeam , trapCommander ) ;
11165: LD_EXP 70
11169: PPUSH
11170: LD_EXP 77
11174: PPUSH
11175: CALL_OW 179
// AddComMoveXY ( FilterUnitsInArea ( TrapNorthGroupArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 111 , 13 ) ;
11179: LD_INT 25
11181: PPUSH
11182: LD_INT 22
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 21
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 70
11210: PPUSH
11211: LD_INT 111
11213: PPUSH
11214: LD_INT 13
11216: PPUSH
11217: CALL_OW 171
// music_class = music_combat ;
11221: LD_ADDR_OWVAR 72
11225: PUSH
11226: LD_INT 1
11228: ST_TO_ADDR
// wait ( 0 0$1 ) ;
11229: LD_INT 35
11231: PPUSH
11232: CALL_OW 67
// DialogueOn ;
11236: CALL_OW 6
// Say ( trapCommander , D14-Sol1-1 ) ;
11240: LD_EXP 77
11244: PPUSH
11245: LD_STRING D14-Sol1-1
11247: PPUSH
11248: CALL_OW 88
// Say ( tmpBelkov , D14-Bel-1 ) ;
11252: LD_VAR 0 1
11256: PPUSH
11257: LD_STRING D14-Bel-1
11259: PPUSH
11260: CALL_OW 88
// DialogueOff ;
11264: CALL_OW 7
// immortalBelkovTeam = true ;
11268: LD_ADDR_EXP 24
11272: PUSH
11273: LD_INT 1
11275: ST_TO_ADDR
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
11276: LD_INT 6
11278: PPUSH
11279: LD_INT 1
11281: PPUSH
11282: LD_INT 2
11284: PPUSH
11285: LD_INT 1
11287: PPUSH
11288: CALL_OW 80
// ComMoveXY ( belkovTeam , 107 , 5 ) ;
11292: LD_EXP 70
11296: PPUSH
11297: LD_INT 107
11299: PPUSH
11300: LD_INT 5
11302: PPUSH
11303: CALL_OW 111
// ComMoveXY ( kirovVehicle , 107 , 5 ) ;
11307: LD_EXP 69
11311: PPUSH
11312: LD_INT 107
11314: PPUSH
11315: LD_INT 5
11317: PPUSH
11318: CALL_OW 111
// wait ( 0 0$2 ) ;
11322: LD_INT 70
11324: PPUSH
11325: CALL_OW 67
// ComMoveXY ( belkovTeam , 101 , 19 ) ;
11329: LD_EXP 70
11333: PPUSH
11334: LD_INT 101
11336: PPUSH
11337: LD_INT 19
11339: PPUSH
11340: CALL_OW 111
// ComMoveXY ( kirovVehicle , 101 , 19 ) ;
11344: LD_EXP 69
11348: PPUSH
11349: LD_INT 101
11351: PPUSH
11352: LD_INT 19
11354: PPUSH
11355: CALL_OW 111
// wait ( 0 0$5 ) ;
11359: LD_INT 175
11361: PPUSH
11362: CALL_OW 67
// ComExitVehicle ( tmpBelkov ) ;
11366: LD_VAR 0 1
11370: PPUSH
11371: CALL_OW 121
// wait ( 0 0$1 ) ;
11375: LD_INT 35
11377: PPUSH
11378: CALL_OW 67
// ComEnterUnit ( trapCommander , kirovVehicle ) ;
11382: LD_EXP 77
11386: PPUSH
11387: LD_EXP 69
11391: PPUSH
11392: CALL_OW 120
// AddComHold ( trapTeam ) ;
11396: LD_EXP 78
11400: PPUSH
11401: CALL_OW 200
// ComMoveXY ( belkovTeam , 88 , 18 ) ;
11405: LD_EXP 70
11409: PPUSH
11410: LD_INT 88
11412: PPUSH
11413: LD_INT 18
11415: PPUSH
11416: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
11420: LD_INT 35
11422: PPUSH
11423: CALL_OW 67
// CenterNowOnUnits ( tmpBelkov ) ;
11427: LD_VAR 0 1
11431: PPUSH
11432: CALL_OW 87
// until IsInArea ( tmpBelkov , BelkovRetreatArea ) ;
11436: LD_VAR 0 1
11440: PPUSH
11441: LD_INT 15
11443: PPUSH
11444: CALL_OW 308
11448: IFFALSE 11420
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 118 , 25 ) ;
11450: LD_INT 22
11452: PUSH
11453: LD_INT 1
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: PUSH
11460: LD_INT 21
11462: PUSH
11463: LD_INT 2
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PPUSH
11474: CALL_OW 69
11478: PPUSH
11479: LD_INT 118
11481: PPUSH
11482: LD_INT 25
11484: PPUSH
11485: CALL_OW 111
// SayRadio ( tmpBelkov , D14-Bel-1a ) ;
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_STRING D14-Bel-1a
11496: PPUSH
11497: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11501: LD_EXP 64
11505: PPUSH
11506: LD_STRING D14-Kur-1
11508: PPUSH
11509: CALL_OW 94
// SayRadio ( tmpBelkov , D14-Bel-2 ) ;
11513: LD_VAR 0 1
11517: PPUSH
11518: LD_STRING D14-Bel-2
11520: PPUSH
11521: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11525: LD_EXP 64
11529: PPUSH
11530: LD_STRING D14-Kur-2
11532: PPUSH
11533: CALL_OW 94
// CenterOnUnits ( Platonov ) ;
11537: LD_EXP 73
11541: PPUSH
11542: CALL_OW 85
// wait ( 0 0$2 ) ;
11546: LD_INT 70
11548: PPUSH
11549: CALL_OW 67
// Say ( Burlak , D14a-Bur-1 ) ;
11553: LD_EXP 59
11557: PPUSH
11558: LD_STRING D14a-Bur-1
11560: PPUSH
11561: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11565: LD_EXP 73
11569: PPUSH
11570: LD_STRING D14a-Pla-1
11572: PPUSH
11573: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11577: LD_EXP 59
11581: PPUSH
11582: LD_STRING D14a-Bur-2
11584: PPUSH
11585: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11589: LD_EXP 73
11593: PPUSH
11594: LD_STRING D14a-Pla-2
11596: PPUSH
11597: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11601: LD_EXP 59
11605: PPUSH
11606: LD_STRING D14a-Bur-3
11608: PPUSH
11609: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11613: LD_EXP 73
11617: PPUSH
11618: LD_STRING D14a-Pla-3
11620: PPUSH
11621: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11625: LD_EXP 59
11629: PPUSH
11630: LD_STRING D14a-Bur-4
11632: PPUSH
11633: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11637: LD_EXP 73
11641: PPUSH
11642: LD_STRING D14a-Pla-4
11644: PPUSH
11645: CALL_OW 88
// InGameOff ;
11649: CALL_OW 9
// immortalBelkovTeam = false ;
11653: LD_ADDR_EXP 24
11657: PUSH
11658: LD_INT 0
11660: ST_TO_ADDR
// activateAMAI = true ;
11661: LD_ADDR_EXP 26
11665: PUSH
11666: LD_INT 1
11668: ST_TO_ADDR
// canExitBase = true ;
11669: LD_ADDR_EXP 19
11673: PUSH
11674: LD_INT 1
11676: ST_TO_ADDR
// canExploreMap = true ;
11677: LD_ADDR_EXP 20
11681: PUSH
11682: LD_INT 1
11684: ST_TO_ADDR
// construcMoreVehicles = false ;
11685: LD_ADDR_EXP 17
11689: PUSH
11690: LD_INT 0
11692: ST_TO_ADDR
// ChangeMissionObjectives ( M6 ) ;
11693: LD_STRING M6
11695: PPUSH
11696: CALL_OW 337
// music_class = 0 ;
11700: LD_ADDR_OWVAR 72
11704: PUSH
11705: LD_INT 0
11707: ST_TO_ADDR
// ComFree ( trapTeam ) ;
11708: LD_EXP 78
11712: PPUSH
11713: CALL_OW 139
// end ;
11717: PPOPN 2
11719: END
// every 0 0$1 trigger immortalBelkovTeam do
11720: LD_EXP 24
11724: IFFALSE 11742
11726: GO 11728
11728: DISABLE
// begin enable ;
11729: ENABLE
// SetLives ( belkovTeam , 1000 ) ;
11730: LD_EXP 70
11734: PPUSH
11735: LD_INT 1000
11737: PPUSH
11738: CALL_OW 234
// end ;
11742: END
// every 0 0$1 trigger canExploreMap and not belkovSaved and belkovAttackTime > 0 0$00 do
11743: LD_EXP 20
11747: PUSH
11748: LD_EXP 35
11752: NOT
11753: AND
11754: PUSH
11755: LD_EXP 58
11759: PUSH
11760: LD_INT 0
11762: GREATER
11763: AND
11764: IFFALSE 11784
11766: GO 11768
11768: DISABLE
// begin enable ;
11769: ENABLE
// belkovAttackTime = belkovAttackTime - 0 0$01 ;
11770: LD_ADDR_EXP 58
11774: PUSH
11775: LD_EXP 58
11779: PUSH
11780: LD_INT 35
11782: MINUS
11783: ST_TO_ADDR
// end ;
11784: END
// every 0 0$15 trigger canExploreMap do var i , tmp ;
11785: LD_EXP 20
11789: IFFALSE 11873
11791: GO 11793
11793: DISABLE
11794: LD_INT 0
11796: PPUSH
11797: PPUSH
// begin tmp = trapTeam ;
11798: LD_ADDR_VAR 0 2
11802: PUSH
11803: LD_EXP 78
11807: ST_TO_ADDR
// tmp = tmp diff trapCommander ;
11808: LD_ADDR_VAR 0 2
11812: PUSH
11813: LD_VAR 0 2
11817: PUSH
11818: LD_EXP 77
11822: DIFF
11823: ST_TO_ADDR
// for i := 1 to rand ( 3 , 4 ) do
11824: LD_ADDR_VAR 0 1
11828: PUSH
11829: DOUBLE
11830: LD_INT 1
11832: DEC
11833: ST_TO_ADDR
11834: LD_INT 3
11836: PPUSH
11837: LD_INT 4
11839: PPUSH
11840: CALL_OW 12
11844: PUSH
11845: FOR_TO
11846: IFFALSE 11871
// ComAgressiveMove ( tmp [ i ] , 87 , 18 ) ;
11848: LD_VAR 0 2
11852: PUSH
11853: LD_VAR 0 1
11857: ARRAY
11858: PPUSH
11859: LD_INT 87
11861: PPUSH
11862: LD_INT 18
11864: PPUSH
11865: CALL_OW 114
11869: GO 11845
11871: POP
11872: POP
// end ;
11873: PPOPN 2
11875: END
// every 0 0$1 trigger belkovAttackTime < 0 0$02 and trapTeam do
11876: LD_EXP 58
11880: PUSH
11881: LD_INT 70
11883: LESS
11884: PUSH
11885: LD_EXP 78
11889: AND
11890: IFFALSE 11911
11892: GO 11894
11894: DISABLE
// begin enable ;
11895: ENABLE
// ComAgressiveMove ( belkovTeam , 120 , 28 ) ;
11896: LD_EXP 70
11900: PPUSH
11901: LD_INT 120
11903: PPUSH
11904: LD_INT 28
11906: PPUSH
11907: CALL_OW 114
// end ;
11911: END
// every 0 0$1 trigger not sawLeftBunker or not sawRightBunker do var bunker ;
11912: LD_EXP 27
11916: NOT
11917: PUSH
11918: LD_EXP 28
11922: NOT
11923: OR
11924: IFFALSE 12364
11926: GO 11928
11928: DISABLE
11929: LD_INT 0
11931: PPUSH
// begin enable ;
11932: ENABLE
// for bunker in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] ] ) do
11933: LD_ADDR_VAR 0 1
11937: PUSH
11938: LD_INT 22
11940: PUSH
11941: LD_INT 1
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: PUSH
11948: LD_INT 21
11950: PUSH
11951: LD_INT 3
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 30
11960: PUSH
11961: LD_INT 31
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: PPUSH
11973: CALL_OW 69
11977: PUSH
11978: FOR_IN
11979: IFFALSE 12362
// begin if See ( 3 , bunker ) then
11981: LD_INT 3
11983: PPUSH
11984: LD_VAR 0 1
11988: PPUSH
11989: CALL_OW 292
11993: IFFALSE 12360
// begin if bunker in leftBunkers and not sawLeftBunker and not FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) then
11995: LD_VAR 0 1
11999: PUSH
12000: LD_EXP 79
12004: IN
12005: PUSH
12006: LD_EXP 27
12010: NOT
12011: AND
12012: PUSH
12013: LD_INT 18
12015: PPUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: PPUSH
12029: CALL_OW 70
12033: NOT
12034: AND
12035: IFFALSE 12206
// begin sawLeftBunker = true ;
12037: LD_ADDR_EXP 27
12041: PUSH
12042: LD_INT 1
12044: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12045: LD_VAR 0 1
12049: PPUSH
12050: CALL_OW 85
// DialogueOn ;
12054: CALL_OW 6
// Say ( Burlak , D15-Bur-1 ) ;
12058: LD_EXP 59
12062: PPUSH
12063: LD_STRING D15-Bur-1
12065: PPUSH
12066: CALL_OW 88
// if IsOK ( Gnyevko ) then
12070: LD_EXP 60
12074: PPUSH
12075: CALL_OW 302
12079: IFFALSE 12093
// Say ( Gnyevko , D15-Gny-1 ) ;
12081: LD_EXP 60
12085: PPUSH
12086: LD_STRING D15-Gny-1
12088: PPUSH
12089: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12093: LD_EXP 67
12097: PPUSH
12098: CALL_OW 302
12102: IFFALSE 12116
// Say ( Kovalyuk , D15-Kov-1 ) ;
12104: LD_EXP 67
12108: PPUSH
12109: LD_STRING D15-Kov-1
12111: PPUSH
12112: CALL_OW 88
// Say ( Burlak , D15-Bur-2 ) ;
12116: LD_EXP 59
12120: PPUSH
12121: LD_STRING D15-Bur-2
12123: PPUSH
12124: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12128: LD_EXP 67
12132: PPUSH
12133: CALL_OW 302
12137: IFFALSE 12151
// Say ( Kovalyuk , D15-Kov-2 ) ;
12139: LD_EXP 67
12143: PPUSH
12144: LD_STRING D15-Kov-2
12146: PPUSH
12147: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
12151: LD_EXP 59
12155: PPUSH
12156: LD_STRING D15-Bur-3
12158: PPUSH
12159: CALL_OW 88
// DialogueOff ;
12163: CALL_OW 7
// if raportForPlatonov = 2 then
12167: LD_EXP 37
12171: PUSH
12172: LD_INT 2
12174: EQUAL
12175: IFFALSE 12187
// raportForPlatonov = 1 else
12177: LD_ADDR_EXP 37
12181: PUSH
12182: LD_INT 1
12184: ST_TO_ADDR
12185: GO 12195
// raportForPlatonov = 3 ;
12187: LD_ADDR_EXP 37
12191: PUSH
12192: LD_INT 3
12194: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
12195: LD_STRING M7
12197: PPUSH
12198: CALL_OW 337
// exit ;
12202: POP
12203: POP
12204: GO 12364
// end ; if bunker in rightBunkers and not sawRightBunker then
12206: LD_VAR 0 1
12210: PUSH
12211: LD_EXP 80
12215: IN
12216: PUSH
12217: LD_EXP 28
12221: NOT
12222: AND
12223: IFFALSE 12360
// begin sawRightBunker = true ;
12225: LD_ADDR_EXP 28
12229: PUSH
12230: LD_INT 1
12232: ST_TO_ADDR
// CenterOnUnits ( bunker ) ;
12233: LD_VAR 0 1
12237: PPUSH
12238: CALL_OW 85
// DialogueOn ;
12242: CALL_OW 6
// if IsOK ( Kovalyuk ) then
12246: LD_EXP 67
12250: PPUSH
12251: CALL_OW 302
12255: IFFALSE 12289
// begin if sawLeftBunker then
12257: LD_EXP 27
12261: IFFALSE 12277
// Say ( Kovalyuk , D16-Kov-1a ) else
12263: LD_EXP 67
12267: PPUSH
12268: LD_STRING D16-Kov-1a
12270: PPUSH
12271: CALL_OW 88
12275: GO 12289
// Say ( Kovalyuk , D16-Kov-1 ) ;
12277: LD_EXP 67
12281: PPUSH
12282: LD_STRING D16-Kov-1
12284: PPUSH
12285: CALL_OW 88
// end ; Say ( Burlak , D16-Bur-1 ) ;
12289: LD_EXP 59
12293: PPUSH
12294: LD_STRING D16-Bur-1
12296: PPUSH
12297: CALL_OW 88
// if IsOK ( Gnyevko ) then
12301: LD_EXP 60
12305: PPUSH
12306: CALL_OW 302
12310: IFFALSE 12324
// Say ( Gnyevko , D16-Gny-1 ) ;
12312: LD_EXP 60
12316: PPUSH
12317: LD_STRING D16-Gny-1
12319: PPUSH
12320: CALL_OW 88
// DialogueOff ;
12324: CALL_OW 7
// if raportForPlatonov = 3 then
12328: LD_EXP 37
12332: PUSH
12333: LD_INT 3
12335: EQUAL
12336: IFFALSE 12348
// raportForPlatonov = 1 else
12338: LD_ADDR_EXP 37
12342: PUSH
12343: LD_INT 1
12345: ST_TO_ADDR
12346: GO 12356
// raportForPlatonov = 2 ;
12348: LD_ADDR_EXP 37
12352: PUSH
12353: LD_INT 2
12355: ST_TO_ADDR
// exit ;
12356: POP
12357: POP
12358: GO 12364
// end ; end ; end ;
12360: GO 11978
12362: POP
12363: POP
// end ;
12364: PPOPN 1
12366: END
// every 0 0$2 trigger not dialogAttackRightBunkers and rightBunkers and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
12367: LD_EXP 30
12371: NOT
12372: PUSH
12373: LD_EXP 80
12377: AND
12378: PUSH
12379: LD_EXP 67
12383: PPUSH
12384: CALL_OW 302
12388: PUSH
12389: LD_EXP 60
12393: PPUSH
12394: CALL_OW 302
12398: OR
12399: AND
12400: IFFALSE 12588
12402: GO 12404
12404: DISABLE
12405: LD_INT 0
12407: PPUSH
// begin enable ;
12408: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
12409: LD_ADDR_VAR 0 1
12413: PUSH
12414: LD_INT 22
12416: PUSH
12417: LD_INT 3
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 2
12426: PUSH
12427: LD_INT 21
12429: PUSH
12430: LD_INT 1
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: PUSH
12437: LD_INT 21
12439: PUSH
12440: LD_INT 2
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: PUSH
12461: FOR_IN
12462: IFFALSE 12586
// begin if Attacks ( unit ) = rightBunkers [ 1 ] or Attacks ( unit ) = rightBunkers [ 2 ] then
12464: LD_VAR 0 1
12468: PPUSH
12469: CALL_OW 320
12473: PUSH
12474: LD_EXP 80
12478: PUSH
12479: LD_INT 1
12481: ARRAY
12482: EQUAL
12483: PUSH
12484: LD_VAR 0 1
12488: PPUSH
12489: CALL_OW 320
12493: PUSH
12494: LD_EXP 80
12498: PUSH
12499: LD_INT 2
12501: ARRAY
12502: EQUAL
12503: OR
12504: IFFALSE 12584
// begin dialogAttackRightBunkers = true ;
12506: LD_ADDR_EXP 30
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
// DialogueOn ;
12514: CALL_OW 6
// if IsOK ( Gnyevko ) then
12518: LD_EXP 60
12522: PPUSH
12523: CALL_OW 302
12527: IFFALSE 12541
// Say ( Gnyevko , D16A-Gny-1 ) ;
12529: LD_EXP 60
12533: PPUSH
12534: LD_STRING D16A-Gny-1
12536: PPUSH
12537: CALL_OW 88
// if IsOK ( Kovalyuk ) then
12541: LD_EXP 67
12545: PPUSH
12546: CALL_OW 302
12550: IFFALSE 12564
// Say ( Kovalyuk , D16A-Kov-1 ) ;
12552: LD_EXP 67
12556: PPUSH
12557: LD_STRING D16A-Kov-1
12559: PPUSH
12560: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
12564: LD_EXP 59
12568: PPUSH
12569: LD_STRING D16A-Bur-1
12571: PPUSH
12572: CALL_OW 88
// DialogueOff ;
12576: CALL_OW 7
// exit ;
12580: POP
12581: POP
12582: GO 12588
// end ; end ;
12584: GO 12461
12586: POP
12587: POP
// end ;
12588: PPOPN 1
12590: END
// every 0 0$3 trigger FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) and not sawLeftBunker do var decsToChoose ;
12591: LD_INT 18
12593: PPUSH
12594: LD_INT 22
12596: PUSH
12597: LD_INT 3
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: PUSH
12604: EMPTY
12605: LIST
12606: PPUSH
12607: CALL_OW 70
12611: PUSH
12612: LD_EXP 27
12616: NOT
12617: AND
12618: IFFALSE 13001
12620: GO 12622
12622: DISABLE
12623: LD_INT 0
12625: PPUSH
// begin sawLeftBunker = true ;
12626: LD_ADDR_EXP 27
12630: PUSH
12631: LD_INT 1
12633: ST_TO_ADDR
// if playerGetSupport then
12634: LD_EXP 32
12638: IFFALSE 12657
// decsToChoose = [ 1 , 3 ] else
12640: LD_ADDR_VAR 0 1
12644: PUSH
12645: LD_INT 1
12647: PUSH
12648: LD_INT 3
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: ST_TO_ADDR
12655: GO 12676
// decsToChoose = [ 1 , 2 , 3 ] ;
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_INT 1
12664: PUSH
12665: LD_INT 2
12667: PUSH
12668: LD_INT 3
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: ST_TO_ADDR
// case SelectiveQuery ( QAttackBw , decsToChoose ) of 1 :
12676: LD_STRING QAttackBw
12678: PPUSH
12679: LD_VAR 0 1
12683: PPUSH
12684: CALL_OW 98
12688: PUSH
12689: LD_INT 1
12691: DOUBLE
12692: EQUAL
12693: IFTRUE 12697
12695: GO 12790
12697: POP
// begin DialogueOn ;
12698: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12702: LD_EXP 59
12706: PPUSH
12707: LD_STRING D17-Bur-1
12709: PPUSH
12710: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12714: LD_EXP 73
12718: PPUSH
12719: LD_STRING D17-Pla-1
12721: PPUSH
12722: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12726: LD_EXP 59
12730: PPUSH
12731: LD_STRING D17-Bur-2
12733: PPUSH
12734: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12738: LD_EXP 73
12742: PPUSH
12743: LD_STRING D17-Pla-2
12745: PPUSH
12746: CALL_OW 94
// DialogueOff ;
12750: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
12754: LD_EXP 40
12758: PUSH
12759: LD_INT 2
12761: PUSH
12762: LD_INT 3
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: IN
12769: NOT
12770: IFFALSE 12788
// begin initiative = 1 ;
12772: LD_ADDR_EXP 40
12776: PUSH
12777: LD_INT 1
12779: ST_TO_ADDR
// platonovOpinion = 2 ;
12780: LD_ADDR_EXP 5
12784: PUSH
12785: LD_INT 2
12787: ST_TO_ADDR
// end ; end ; 2 :
12788: GO 12931
12790: LD_INT 2
12792: DOUBLE
12793: EQUAL
12794: IFTRUE 12798
12796: GO 12903
12798: POP
// begin DialogueOn ;
12799: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12803: LD_EXP 59
12807: PPUSH
12808: LD_STRING D18-Bur-1
12810: PPUSH
12811: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12815: LD_EXP 73
12819: PPUSH
12820: LD_STRING D18-Pla-1
12822: PPUSH
12823: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12827: LD_EXP 59
12831: PPUSH
12832: LD_STRING D18-Bur-2
12834: PPUSH
12835: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-2 ) ;
12839: LD_EXP 73
12843: PPUSH
12844: LD_STRING D18-Pla-2
12846: PPUSH
12847: CALL_OW 94
// DialogueOff ;
12851: CALL_OW 7
// playerGetSupport = true ;
12855: LD_ADDR_EXP 32
12859: PUSH
12860: LD_INT 1
12862: ST_TO_ADDR
// medalForGetSupport = false ;
12863: LD_ADDR_EXP 38
12867: PUSH
12868: LD_INT 0
12870: ST_TO_ADDR
// PlatonovSendSupport ;
12871: CALL 6469 0 0
// if initiative <> 3 then
12875: LD_EXP 40
12879: PUSH
12880: LD_INT 3
12882: NONEQUAL
12883: IFFALSE 12901
// begin initiative = 1 ;
12885: LD_ADDR_EXP 40
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// platonovOpinion = 2 ;
12893: LD_ADDR_EXP 5
12897: PUSH
12898: LD_INT 2
12900: ST_TO_ADDR
// end ; end ; 3 :
12901: GO 12931
12903: LD_INT 3
12905: DOUBLE
12906: EQUAL
12907: IFTRUE 12911
12909: GO 12930
12911: POP
// begin initiative = 3 ;
12912: LD_ADDR_EXP 40
12916: PUSH
12917: LD_INT 3
12919: ST_TO_ADDR
// platonovOpinion = 0 ;
12920: LD_ADDR_EXP 5
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// end ; end ;
12928: GO 12931
12930: POP
// if IsOK ( Gnyevko ) then
12931: LD_EXP 60
12935: PPUSH
12936: CALL_OW 302
12940: IFFALSE 12966
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12942: LD_EXP 60
12946: PPUSH
12947: LD_STRING D19-Gny-1
12949: PPUSH
12950: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12954: LD_EXP 59
12958: PPUSH
12959: LD_STRING D19-Bur-1
12961: PPUSH
12962: CALL_OW 88
// end ; if IsOK ( Kovalyuk ) then
12966: LD_EXP 67
12970: PPUSH
12971: CALL_OW 302
12975: IFFALSE 13001
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12977: LD_EXP 67
12981: PPUSH
12982: LD_STRING D19-Kov-1
12984: PPUSH
12985: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12989: LD_EXP 59
12993: PPUSH
12994: LD_STRING D19-Bur-2
12996: PPUSH
12997: CALL_OW 88
// end ; end ;
13001: PPOPN 1
13003: END
// every 0 0$2 trigger not dialogAttackLeftBunkers and leftBunkers and FilterUnitsInArea ( WeakPositionArea , [ [ f_side , 3 ] ] ) = 0 and ( IsOK ( Kovalyuk ) or IsOK ( Gnyevko ) ) do var unit ;
13004: LD_EXP 29
13008: NOT
13009: PUSH
13010: LD_EXP 79
13014: AND
13015: PUSH
13016: LD_INT 18
13018: PPUSH
13019: LD_INT 22
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: PPUSH
13032: CALL_OW 70
13036: PUSH
13037: LD_INT 0
13039: EQUAL
13040: AND
13041: PUSH
13042: LD_EXP 67
13046: PPUSH
13047: CALL_OW 302
13051: PUSH
13052: LD_EXP 60
13056: PPUSH
13057: CALL_OW 302
13061: OR
13062: AND
13063: IFFALSE 13251
13065: GO 13067
13067: DISABLE
13068: LD_INT 0
13070: PPUSH
// begin enable ;
13071: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13072: LD_ADDR_VAR 0 1
13076: PUSH
13077: LD_INT 22
13079: PUSH
13080: LD_INT 3
13082: PUSH
13083: EMPTY
13084: LIST
13085: LIST
13086: PUSH
13087: LD_INT 2
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: PPUSH
13119: CALL_OW 69
13123: PUSH
13124: FOR_IN
13125: IFFALSE 13249
// begin if Attacks ( unit ) = leftBunkers [ 1 ] or Attacks ( unit ) = leftBunkers [ 2 ] then
13127: LD_VAR 0 1
13131: PPUSH
13132: CALL_OW 320
13136: PUSH
13137: LD_EXP 79
13141: PUSH
13142: LD_INT 1
13144: ARRAY
13145: EQUAL
13146: PUSH
13147: LD_VAR 0 1
13151: PPUSH
13152: CALL_OW 320
13156: PUSH
13157: LD_EXP 79
13161: PUSH
13162: LD_INT 2
13164: ARRAY
13165: EQUAL
13166: OR
13167: IFFALSE 13247
// begin dialogAttackLeftBunkers = true ;
13169: LD_ADDR_EXP 29
13173: PUSH
13174: LD_INT 1
13176: ST_TO_ADDR
// DialogueOn ;
13177: CALL_OW 6
// if IsOK ( Gnyevko ) then
13181: LD_EXP 60
13185: PPUSH
13186: CALL_OW 302
13190: IFFALSE 13204
// Say ( Gnyevko , D19A-Gny-1 ) ;
13192: LD_EXP 60
13196: PPUSH
13197: LD_STRING D19A-Gny-1
13199: PPUSH
13200: CALL_OW 88
// if IsOK ( Kovalyuk ) then
13204: LD_EXP 67
13208: PPUSH
13209: CALL_OW 302
13213: IFFALSE 13227
// Say ( Kovalyuk , D19A-Kov-1 ) ;
13215: LD_EXP 67
13219: PPUSH
13220: LD_STRING D19A-Kov-1
13222: PPUSH
13223: CALL_OW 88
// Say ( Burlak , D16A-Bur-1 ) ;
13227: LD_EXP 59
13231: PPUSH
13232: LD_STRING D16A-Bur-1
13234: PPUSH
13235: CALL_OW 88
// DialogueOff ;
13239: CALL_OW 7
// exit ;
13243: POP
13244: POP
13245: GO 13251
// end ; end ;
13247: GO 13124
13249: POP
13250: POP
// end ;
13251: PPOPN 1
13253: END
// every 0 0$1 trigger ( not leftBunkers or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13254: LD_EXP 79
13258: NOT
13259: PUSH
13260: LD_INT 17
13262: PPUSH
13263: LD_INT 22
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 21
13275: PUSH
13276: LD_INT 3
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 30
13285: PUSH
13286: LD_INT 31
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 50
13295: PUSH
13296: EMPTY
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PPUSH
13305: CALL_OW 70
13309: PUSH
13310: LD_INT 0
13312: EQUAL
13313: OR
13314: PUSH
13315: LD_EXP 20
13319: AND
13320: IFFALSE 13371
13322: GO 13324
13324: DISABLE
// begin leftBunkers = [ ] ;
13325: LD_ADDR_EXP 79
13329: PUSH
13330: EMPTY
13331: ST_TO_ADDR
// DialogueOn ;
13332: CALL_OW 6
// Say ( Burlak , D20-Bur-1 ) ;
13336: LD_EXP 59
13340: PPUSH
13341: LD_STRING D20-Bur-1
13343: PPUSH
13344: CALL_OW 88
// Say ( Platonov , D20-Pla-1 ) ;
13348: LD_EXP 73
13352: PPUSH
13353: LD_STRING D20-Pla-1
13355: PPUSH
13356: CALL_OW 88
// DialogueOff ;
13360: CALL_OW 7
// ChangeMissionObjectives ( M8 ) ;
13364: LD_STRING M8
13366: PPUSH
13367: CALL_OW 337
// end ;
13371: END
// every 0 0$1 trigger ( not rightBunkers or FilterUnitsInArea ( rightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_ok ] ] ) = 0 ) and canExploreMap do
13372: LD_EXP 80
13376: NOT
13377: PUSH
13378: LD_INT 16
13380: PPUSH
13381: LD_INT 22
13383: PUSH
13384: LD_INT 1
13386: PUSH
13387: EMPTY
13388: LIST
13389: LIST
13390: PUSH
13391: LD_INT 21
13393: PUSH
13394: LD_INT 3
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 30
13403: PUSH
13404: LD_INT 31
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 50
13413: PUSH
13414: EMPTY
13415: LIST
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PPUSH
13423: CALL_OW 70
13427: PUSH
13428: LD_INT 0
13430: EQUAL
13431: OR
13432: PUSH
13433: LD_EXP 20
13437: AND
13438: IFFALSE 13482
13440: GO 13442
13442: DISABLE
// begin rightBunkers = [ ] ;
13443: LD_ADDR_EXP 80
13447: PUSH
13448: EMPTY
13449: ST_TO_ADDR
// DialogueOn ;
13450: CALL_OW 6
// Say ( Burlak , D20a-Bur-1 ) ;
13454: LD_EXP 59
13458: PPUSH
13459: LD_STRING D20a-Bur-1
13461: PPUSH
13462: CALL_OW 88
// Say ( Platonov , D20a-Pla-1 ) ;
13466: LD_EXP 73
13470: PPUSH
13471: LD_STRING D20a-Pla-1
13473: PPUSH
13474: CALL_OW 88
// DialogueOff ;
13478: CALL_OW 7
// end ;
13482: END
// every 0 0$1 trigger not saveBelkovDecision and belkovTeam do var yourUnit , trapUnit , decsToChoose ;
13483: LD_EXP 33
13487: NOT
13488: PUSH
13489: LD_EXP 70
13493: AND
13494: IFFALSE 13989
13496: GO 13498
13498: DISABLE
13499: LD_INT 0
13501: PPUSH
13502: PPUSH
13503: PPUSH
// begin enable ;
13504: ENABLE
// for yourUnit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
13505: LD_ADDR_VAR 0 1
13509: PUSH
13510: LD_INT 22
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 21
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 21
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PPUSH
13552: CALL_OW 69
13556: PUSH
13557: FOR_IN
13558: IFFALSE 13987
// for trapUnit in trapTeam do
13560: LD_ADDR_VAR 0 2
13564: PUSH
13565: LD_EXP 78
13569: PUSH
13570: FOR_IN
13571: IFFALSE 13983
// if GetDistUnits ( yourUnit , trapUnit ) < 16 then
13573: LD_VAR 0 1
13577: PPUSH
13578: LD_VAR 0 2
13582: PPUSH
13583: CALL_OW 296
13587: PUSH
13588: LD_INT 16
13590: LESS
13591: IFFALSE 13981
// begin saveBelkovDecision = true ;
13593: LD_ADDR_EXP 33
13597: PUSH
13598: LD_INT 1
13600: ST_TO_ADDR
// if playerGetSupport then
13601: LD_EXP 32
13605: IFFALSE 13624
// decsToChoose = [ 1 , 3 ] else
13607: LD_ADDR_VAR 0 3
13611: PUSH
13612: LD_INT 1
13614: PUSH
13615: LD_INT 3
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: ST_TO_ADDR
13622: GO 13643
// decsToChoose = [ 1 , 2 , 3 ] ;
13624: LD_ADDR_VAR 0 3
13628: PUSH
13629: LD_INT 1
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: ST_TO_ADDR
// case SelectiveQuery ( QAttackAm , decsToChoose ) of 1 :
13643: LD_STRING QAttackAm
13645: PPUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: CALL_OW 98
13655: PUSH
13656: LD_INT 1
13658: DOUBLE
13659: EQUAL
13660: IFTRUE 13664
13662: GO 13733
13664: POP
// begin DialogueOn ;
13665: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13669: LD_EXP 59
13673: PPUSH
13674: LD_STRING D21-Bur-1
13676: PPUSH
13677: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13681: LD_EXP 73
13685: PPUSH
13686: LD_STRING D21-Pla-1
13688: PPUSH
13689: CALL_OW 94
// DialogueOff ;
13693: CALL_OW 7
// if not ( initiative in [ 2 , 3 ] ) then
13697: LD_EXP 40
13701: PUSH
13702: LD_INT 2
13704: PUSH
13705: LD_INT 3
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: IN
13712: NOT
13713: IFFALSE 13731
// begin initiative = 1 ;
13715: LD_ADDR_EXP 40
13719: PUSH
13720: LD_INT 1
13722: ST_TO_ADDR
// platonovOpinion = 2 ;
13723: LD_ADDR_EXP 5
13727: PUSH
13728: LD_INT 2
13730: ST_TO_ADDR
// end ; end ; 2 :
13731: GO 13925
13733: LD_INT 2
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13897
13741: POP
// begin DialogueOn ;
13742: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13746: LD_EXP 59
13750: PPUSH
13751: LD_STRING D22-Bur-1
13753: PPUSH
13754: CALL_OW 88
// if playerGetSupport and ( leftBunkers = 0 or rightBunkers = 0 ) then
13758: LD_EXP 32
13762: PUSH
13763: LD_EXP 79
13767: PUSH
13768: LD_INT 0
13770: EQUAL
13771: PUSH
13772: LD_EXP 80
13776: PUSH
13777: LD_INT 0
13779: EQUAL
13780: OR
13781: AND
13782: IFFALSE 13796
// Say ( Platonov , D22-Pla-1b ) ;
13784: LD_EXP 73
13788: PPUSH
13789: LD_STRING D22-Pla-1b
13791: PPUSH
13792: CALL_OW 88
// if playerGetSupport and ( leftBunkers or rightBunkers ) then
13796: LD_EXP 32
13800: PUSH
13801: LD_EXP 79
13805: PUSH
13806: LD_EXP 80
13810: OR
13811: AND
13812: IFFALSE 13826
// Say ( Platonov , D22-Pla-1a ) ;
13814: LD_EXP 73
13818: PPUSH
13819: LD_STRING D22-Pla-1a
13821: PPUSH
13822: CALL_OW 88
// if not playerGetSupport then
13826: LD_EXP 32
13830: NOT
13831: IFFALSE 13865
// begin Say ( Platonov , D22-Pla-1 ) ;
13833: LD_EXP 73
13837: PPUSH
13838: LD_STRING D22-Pla-1
13840: PPUSH
13841: CALL_OW 88
// playerGetSupport = true ;
13845: LD_ADDR_EXP 32
13849: PUSH
13850: LD_INT 1
13852: ST_TO_ADDR
// medalForGetSupport = false ;
13853: LD_ADDR_EXP 38
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// PlatonovSendSupport ;
13861: CALL 6469 0 0
// end ; DialogueOff ;
13865: CALL_OW 7
// if initiative <> 3 then
13869: LD_EXP 40
13873: PUSH
13874: LD_INT 3
13876: NONEQUAL
13877: IFFALSE 13895
// begin initiative = 2 ;
13879: LD_ADDR_EXP 40
13883: PUSH
13884: LD_INT 2
13886: ST_TO_ADDR
// platonovOpinion = 1 ;
13887: LD_ADDR_EXP 5
13891: PUSH
13892: LD_INT 1
13894: ST_TO_ADDR
// end ; end ; 3 :
13895: GO 13925
13897: LD_INT 3
13899: DOUBLE
13900: EQUAL
13901: IFTRUE 13905
13903: GO 13924
13905: POP
// begin initiative = 3 ;
13906: LD_ADDR_EXP 40
13910: PUSH
13911: LD_INT 3
13913: ST_TO_ADDR
// platonovOpinion = 0 ;
13914: LD_ADDR_EXP 5
13918: PUSH
13919: LD_INT 0
13921: ST_TO_ADDR
// end ; end ;
13922: GO 13925
13924: POP
// if IsOK ( Gnyevko ) then
13925: LD_EXP 60
13929: PPUSH
13930: CALL_OW 302
13934: IFFALSE 13960
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13936: LD_EXP 60
13940: PPUSH
13941: LD_STRING D23-Gny-1
13943: PPUSH
13944: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13948: LD_EXP 59
13952: PPUSH
13953: LD_STRING D23-Bur-1
13955: PPUSH
13956: CALL_OW 88
// end ; saveBelkovObjective = true ;
13960: LD_ADDR_EXP 34
13964: PUSH
13965: LD_INT 1
13967: ST_TO_ADDR
// ChangeMissionObjectives ( M9 ) ;
13968: LD_STRING M9
13970: PPUSH
13971: CALL_OW 337
// exit ;
13975: POP
13976: POP
13977: POP
13978: POP
13979: GO 13989
// end ;
13981: GO 13570
13983: POP
13984: POP
13985: GO 13557
13987: POP
13988: POP
// end ;
13989: PPOPN 3
13991: END
// every 0 0$1 trigger canExploreMap and not trapTeam and not belkovSaved do
13992: LD_EXP 20
13996: PUSH
13997: LD_EXP 78
14001: NOT
14002: AND
14003: PUSH
14004: LD_EXP 35
14008: NOT
14009: AND
14010: IFFALSE 14042
14012: GO 14014
14014: DISABLE
// begin belkovSaved = true ;
14015: LD_ADDR_EXP 35
14019: PUSH
14020: LD_INT 1
14022: ST_TO_ADDR
// SetSide ( belkovTeam , 3 ) ;
14023: LD_EXP 70
14027: PPUSH
14028: LD_INT 3
14030: PPUSH
14031: CALL_OW 235
// ChangeMissionObjectives ( M9a ) ;
14035: LD_STRING M9a
14037: PPUSH
14038: CALL_OW 337
// end ;
14042: END
// every 0 0$1 trigger saveBelkovDecision and ( IsDead ( Belkov ) or IsDead ( Belkov2 ) and ( GetSide ( Belkov ) = 6 or GetSide ( Belkov2 ) = 6 ) ) do
14043: LD_EXP 33
14047: PUSH
14048: LD_EXP 61
14052: PPUSH
14053: CALL_OW 301
14057: PUSH
14058: LD_EXP 65
14062: PPUSH
14063: CALL_OW 301
14067: PUSH
14068: LD_EXP 61
14072: PPUSH
14073: CALL_OW 255
14077: PUSH
14078: LD_INT 6
14080: EQUAL
14081: PUSH
14082: LD_EXP 65
14086: PPUSH
14087: CALL_OW 255
14091: PUSH
14092: LD_INT 6
14094: EQUAL
14095: OR
14096: AND
14097: OR
14098: AND
14099: IFFALSE 14119
14101: GO 14103
14103: DISABLE
// begin ChangeMissionObjectives ( M9a ) ;
14104: LD_STRING M9a
14106: PPUSH
14107: CALL_OW 337
// saveBelkovObjective = false ;
14111: LD_ADDR_EXP 34
14115: PUSH
14116: LD_INT 0
14118: ST_TO_ADDR
// end ;
14119: END
// every 0 0$5 trigger belkovSaved and ( GetDistUnits ( Burlak , Belkov ) < 14 or GetDistUnits ( Burlak , Belkov2 ) < 14 ) do
14120: LD_EXP 35
14124: PUSH
14125: LD_EXP 59
14129: PPUSH
14130: LD_EXP 61
14134: PPUSH
14135: CALL_OW 296
14139: PUSH
14140: LD_INT 14
14142: LESS
14143: PUSH
14144: LD_EXP 59
14148: PPUSH
14149: LD_EXP 65
14153: PPUSH
14154: CALL_OW 296
14158: PUSH
14159: LD_INT 14
14161: LESS
14162: OR
14163: AND
14164: IFFALSE 14438
14166: GO 14168
14168: DISABLE
// begin InGameOn ;
14169: CALL_OW 8
// if IsOk ( Belkov ) then
14173: LD_EXP 61
14177: PPUSH
14178: CALL_OW 302
14182: IFFALSE 14280
// begin CenterNowOnUnits ( [ Burlak , Belkov ] ) ;
14184: LD_EXP 59
14188: PUSH
14189: LD_EXP 61
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PPUSH
14198: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov ) ;
14202: LD_EXP 59
14206: PPUSH
14207: LD_EXP 61
14211: PPUSH
14212: CALL_OW 119
// ComTurnUnit ( Belkov , Burlak ) ;
14216: LD_EXP 61
14220: PPUSH
14221: LD_EXP 59
14225: PPUSH
14226: CALL_OW 119
// Say ( Belkov , D24-Bel-1 ) ;
14230: LD_EXP 61
14234: PPUSH
14235: LD_STRING D24-Bel-1
14237: PPUSH
14238: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14242: LD_EXP 59
14246: PPUSH
14247: LD_STRING D24-Bur-1
14249: PPUSH
14250: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
14254: LD_EXP 61
14258: PPUSH
14259: LD_STRING D24-Bel-2
14261: PPUSH
14262: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14266: LD_EXP 59
14270: PPUSH
14271: LD_STRING D24-Bur-2
14273: PPUSH
14274: CALL_OW 88
// end else
14278: GO 14386
// begin CenterNowOnUnits ( [ Burlak , Belkov2 ] ) ;
14280: LD_EXP 59
14284: PUSH
14285: LD_EXP 65
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: PPUSH
14294: CALL_OW 87
// ComTurnUnit ( Burlak , Belkov2 ) ;
14298: LD_EXP 59
14302: PPUSH
14303: LD_EXP 65
14307: PPUSH
14308: CALL_OW 119
// ComTurnUnit ( Belkov2 , Burlak ) ;
14312: LD_EXP 65
14316: PPUSH
14317: LD_EXP 59
14321: PPUSH
14322: CALL_OW 119
// Say ( Belkov2 , D24-Bel-1 ) ;
14326: LD_EXP 65
14330: PPUSH
14331: LD_STRING D24-Bel-1
14333: PPUSH
14334: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
14338: LD_EXP 59
14342: PPUSH
14343: LD_STRING D24-Bur-1
14345: PPUSH
14346: CALL_OW 88
// Say ( Burlak , D24-Bur-1a ) ;
14350: LD_EXP 59
14354: PPUSH
14355: LD_STRING D24-Bur-1a
14357: PPUSH
14358: CALL_OW 88
// Say ( Belkov2 , D24-Bel-2 ) ;
14362: LD_EXP 65
14366: PPUSH
14367: LD_STRING D24-Bel-2
14369: PPUSH
14370: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
14374: LD_EXP 59
14378: PPUSH
14379: LD_STRING D24-Bur-2
14381: PPUSH
14382: CALL_OW 88
// end ; if captureBelkovVehicle then
14386: LD_EXP 36
14390: IFFALSE 14404
// Say ( Burlak , D24-Bur-2a ) ;
14392: LD_EXP 59
14396: PPUSH
14397: LD_STRING D24-Bur-2a
14399: PPUSH
14400: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
14404: LD_EXP 73
14408: PPUSH
14409: LD_STRING D24-Pla-2
14411: PPUSH
14412: CALL_OW 94
// if leftBunkers then
14416: LD_EXP 79
14420: IFFALSE 14434
// SayRadio ( Platonov , D24-Pla-2a ) ;
14422: LD_EXP 73
14426: PPUSH
14427: LD_STRING D24-Pla-2a
14429: PPUSH
14430: CALL_OW 94
// InGameOff ;
14434: CALL_OW 9
// end ;
14438: END
// every 0 0$1 trigger FilterUnitsInArea ( TrackDialogArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) and ( IsOk ( Kovalyuk ) or IsOK ( Gnyevko ) ) do
14439: LD_INT 22
14441: PPUSH
14442: LD_INT 22
14444: PUSH
14445: LD_INT 3
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 21
14454: PUSH
14455: LD_INT 2
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: PPUSH
14466: CALL_OW 70
14470: PUSH
14471: LD_EXP 67
14475: PPUSH
14476: CALL_OW 302
14480: PUSH
14481: LD_EXP 60
14485: PPUSH
14486: CALL_OW 302
14490: OR
14491: AND
14492: IFFALSE 14575
14494: GO 14496
14496: DISABLE
// begin DialogueOn ;
14497: CALL_OW 6
// Say ( Burlak , D26-Bur-1 ) ;
14501: LD_EXP 59
14505: PPUSH
14506: LD_STRING D26-Bur-1
14508: PPUSH
14509: CALL_OW 88
// if IsOk ( Kovalyuk ) then
14513: LD_EXP 67
14517: PPUSH
14518: CALL_OW 302
14522: IFFALSE 14536
// Say ( Kovalyuk , D26-Kov-1 ) ;
14524: LD_EXP 67
14528: PPUSH
14529: LD_STRING D26-Kov-1
14531: PPUSH
14532: CALL_OW 88
// if IsOk ( Gnyevko ) then
14536: LD_EXP 60
14540: PPUSH
14541: CALL_OW 302
14545: IFFALSE 14559
// Say ( Gnyevko , D26-Gny-1 ) ;
14547: LD_EXP 60
14551: PPUSH
14552: LD_STRING D26-Gny-1
14554: PPUSH
14555: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14559: LD_EXP 59
14563: PPUSH
14564: LD_STRING D26-Bur-2
14566: PPUSH
14567: CALL_OW 88
// DialogueOff ;
14571: CALL_OW 7
// end ;
14575: END
// every 0 0$1 trigger canExploreMap and ( not IsInArea ( Burlak , BeriaBaseArea ) and not IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) ) and raportForPlatonov = - 1 do
14576: LD_EXP 20
14580: PUSH
14581: LD_EXP 59
14585: PPUSH
14586: LD_INT 8
14588: PPUSH
14589: CALL_OW 308
14593: NOT
14594: PUSH
14595: LD_EXP 59
14599: PPUSH
14600: CALL_OW 310
14604: PPUSH
14605: CALL_OW 310
14609: PPUSH
14610: LD_INT 8
14612: PPUSH
14613: CALL_OW 308
14617: NOT
14618: AND
14619: AND
14620: PUSH
14621: LD_EXP 37
14625: PUSH
14626: LD_INT 1
14628: NEG
14629: EQUAL
14630: AND
14631: IFFALSE 14645
14633: GO 14635
14635: DISABLE
// begin enable ;
14636: ENABLE
// raportForPlatonov = 0 ;
14637: LD_ADDR_EXP 37
14641: PUSH
14642: LD_INT 0
14644: ST_TO_ADDR
// end ;
14645: END
// every 0 0$1 trigger canExploreMap and raportForPlatonov >= 0 and not backToBeria2 and ( IsInArea ( Burlak , BeriaBaseArea ) or IsInArea ( IsInUnit ( IsInUnit ( Burlak ) ) , BeriaBaseArea ) and not backToBeria2 ) do
14646: LD_EXP 20
14650: PUSH
14651: LD_EXP 37
14655: PUSH
14656: LD_INT 0
14658: GREATEREQUAL
14659: AND
14660: PUSH
14661: LD_EXP 16
14665: NOT
14666: AND
14667: PUSH
14668: LD_EXP 59
14672: PPUSH
14673: LD_INT 8
14675: PPUSH
14676: CALL_OW 308
14680: PUSH
14681: LD_EXP 59
14685: PPUSH
14686: CALL_OW 310
14690: PPUSH
14691: CALL_OW 310
14695: PPUSH
14696: LD_INT 8
14698: PPUSH
14699: CALL_OW 308
14703: PUSH
14704: LD_EXP 16
14708: NOT
14709: AND
14710: OR
14711: AND
14712: IFFALSE 15003
14714: GO 14716
14716: DISABLE
// begin enable ;
14717: ENABLE
// DialogueOn ;
14718: CALL_OW 6
// case raportForPlatonov of 0 :
14722: LD_EXP 37
14726: PUSH
14727: LD_INT 0
14729: DOUBLE
14730: EQUAL
14731: IFTRUE 14735
14733: GO 14762
14735: POP
// begin Say ( Platonov , D25a-Pla-1 ) ;
14736: LD_EXP 73
14740: PPUSH
14741: LD_STRING D25a-Pla-1
14743: PPUSH
14744: CALL_OW 88
// Say ( Burlak , D25a-Bur-1 ) ;
14748: LD_EXP 59
14752: PPUSH
14753: LD_STRING D25a-Bur-1
14755: PPUSH
14756: CALL_OW 88
// end ; 1 :
14760: GO 14978
14762: LD_INT 1
14764: DOUBLE
14765: EQUAL
14766: IFTRUE 14770
14768: GO 14833
14770: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14771: LD_EXP 73
14775: PPUSH
14776: LD_STRING D25-Pla-1
14778: PPUSH
14779: CALL_OW 88
// Say ( Burlak , D25-Bur-1 ) ;
14783: LD_EXP 59
14787: PPUSH
14788: LD_STRING D25-Bur-1
14790: PPUSH
14791: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14795: LD_EXP 59
14799: PPUSH
14800: LD_STRING D25b-Bur-1
14802: PPUSH
14803: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14807: LD_EXP 73
14811: PPUSH
14812: LD_STRING D25b-Pla-1
14814: PPUSH
14815: CALL_OW 88
// playerGetSupport = true ;
14819: LD_ADDR_EXP 32
14823: PUSH
14824: LD_INT 1
14826: ST_TO_ADDR
// PlatonovSendSupport ;
14827: CALL 6469 0 0
// end ; 2 :
14831: GO 14978
14833: LD_INT 2
14835: DOUBLE
14836: EQUAL
14837: IFTRUE 14841
14839: GO 14887
14841: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14842: LD_EXP 73
14846: PPUSH
14847: LD_STRING D25-Pla-1
14849: PPUSH
14850: CALL_OW 88
// Say ( Burlak , D25-Bur-1a ) ;
14854: LD_EXP 59
14858: PPUSH
14859: LD_STRING D25-Bur-1a
14861: PPUSH
14862: CALL_OW 88
// if not sawLeftBunker then
14866: LD_EXP 27
14870: NOT
14871: IFFALSE 14885
// Say ( Platonov , D25c-Pla-1 ) ;
14873: LD_EXP 73
14877: PPUSH
14878: LD_STRING D25c-Pla-1
14880: PPUSH
14881: CALL_OW 88
// end ; 3 :
14885: GO 14978
14887: LD_INT 3
14889: DOUBLE
14890: EQUAL
14891: IFTRUE 14895
14893: GO 14977
14895: POP
// begin Say ( Platonov , D25-Pla-1 ) ;
14896: LD_EXP 73
14900: PPUSH
14901: LD_STRING D25-Pla-1
14903: PPUSH
14904: CALL_OW 88
// Say ( Burlak , D25a-Bur-1b ) ;
14908: LD_EXP 59
14912: PPUSH
14913: LD_STRING D25a-Bur-1b
14915: PPUSH
14916: CALL_OW 88
// Say ( Burlak , D25b-Bur-1 ) ;
14920: LD_EXP 59
14924: PPUSH
14925: LD_STRING D25b-Bur-1
14927: PPUSH
14928: CALL_OW 88
// Say ( Platonov , D25b-Pla-1 ) ;
14932: LD_EXP 73
14936: PPUSH
14937: LD_STRING D25b-Pla-1
14939: PPUSH
14940: CALL_OW 88
// playerGetSupport = true ;
14944: LD_ADDR_EXP 32
14948: PUSH
14949: LD_INT 1
14951: ST_TO_ADDR
// PlatonovSendSupport ;
14952: CALL 6469 0 0
// if not sawRightBunker then
14956: LD_EXP 28
14960: NOT
14961: IFFALSE 14975
// Say ( Platonov , D25c-Pla-1 ) ;
14963: LD_EXP 73
14967: PPUSH
14968: LD_STRING D25c-Pla-1
14970: PPUSH
14971: CALL_OW 88
// end ; end ;
14975: GO 14978
14977: POP
// raportForPlatonov = - 1 ;
14978: LD_ADDR_EXP 37
14982: PUSH
14983: LD_INT 1
14985: NEG
14986: ST_TO_ADDR
// Say ( Platonov , D25c-Pla-1a ) ;
14987: LD_EXP 73
14991: PPUSH
14992: LD_STRING D25c-Pla-1a
14994: PPUSH
14995: CALL_OW 88
// DialogueOff ;
14999: CALL_OW 7
// end ;
15003: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthArea , [ [ f_side , 3 ] ] ) > 0 do
15004: LD_INT 19
15006: PPUSH
15007: LD_INT 22
15009: PUSH
15010: LD_INT 3
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: PPUSH
15020: CALL_OW 70
15024: PUSH
15025: LD_INT 0
15027: GREATER
15028: IFFALSE 15048
15030: GO 15032
15032: DISABLE
// begin northMapExplored = true ;
15033: LD_ADDR_EXP 39
15037: PUSH
15038: LD_INT 1
15040: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
15041: LD_STRING M10
15043: PPUSH
15044: CALL_OW 337
// end ;
15048: END
// every 0 0$1 trigger not leftBunkers and northMapExplored and ( belkovSaved or not saveBelkovObjective ) do
15049: LD_EXP 79
15053: NOT
15054: PUSH
15055: LD_EXP 39
15059: AND
15060: PUSH
15061: LD_EXP 35
15065: PUSH
15066: LD_EXP 34
15070: NOT
15071: OR
15072: AND
15073: IFFALSE 15093
15075: GO 15077
15077: DISABLE
// begin backToBeria2 = true ;
15078: LD_ADDR_EXP 16
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// ChangeMissionObjectives ( M10a ) ;
15086: LD_STRING M10a
15088: PPUSH
15089: CALL_OW 337
// end ; end_of_file
15093: END
// export function PrepareNature ; var i , un ; begin
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
15098: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
15099: LD_ADDR_VAR 0 2
15103: PUSH
15104: DOUBLE
15105: LD_INT 1
15107: DEC
15108: ST_TO_ADDR
15109: LD_EXP 42
15113: PUSH
15114: LD_INT 1
15116: ARRAY
15117: PUSH
15118: FOR_TO
15119: IFFALSE 15229
// begin uc_side = 0 ;
15121: LD_ADDR_OWVAR 20
15125: PUSH
15126: LD_INT 0
15128: ST_TO_ADDR
// uc_nation = nation_nature ;
15129: LD_ADDR_OWVAR 21
15133: PUSH
15134: LD_INT 0
15136: ST_TO_ADDR
// hc_class = class_apeman ;
15137: LD_ADDR_OWVAR 28
15141: PUSH
15142: LD_INT 12
15144: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15145: LD_ADDR_OWVAR 31
15149: PUSH
15150: LD_EXP 43
15154: PUSH
15155: LD_INT 1
15157: ARRAY
15158: PUSH
15159: LD_EXP 43
15163: PUSH
15164: LD_INT 2
15166: ARRAY
15167: PUSH
15168: LD_EXP 43
15172: PUSH
15173: LD_INT 3
15175: ARRAY
15176: PUSH
15177: LD_EXP 43
15181: PUSH
15182: LD_INT 4
15184: ARRAY
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15192: LD_ADDR_OWVAR 35
15196: PUSH
15197: LD_EXP 44
15201: ST_TO_ADDR
// un = CreateHuman ;
15202: LD_ADDR_VAR 0 3
15206: PUSH
15207: CALL_OW 44
15211: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15212: LD_VAR 0 3
15216: PPUSH
15217: LD_INT 21
15219: PPUSH
15220: LD_INT 0
15222: PPUSH
15223: CALL_OW 49
// end ;
15227: GO 15118
15229: POP
15230: POP
// for i := 1 to animalsAmount [ 2 ] do
15231: LD_ADDR_VAR 0 2
15235: PUSH
15236: DOUBLE
15237: LD_INT 1
15239: DEC
15240: ST_TO_ADDR
15241: LD_EXP 42
15245: PUSH
15246: LD_INT 2
15248: ARRAY
15249: PUSH
15250: FOR_TO
15251: IFFALSE 15361
// begin uc_side = 0 ;
15253: LD_ADDR_OWVAR 20
15257: PUSH
15258: LD_INT 0
15260: ST_TO_ADDR
// uc_nation = nation_nature ;
15261: LD_ADDR_OWVAR 21
15265: PUSH
15266: LD_INT 0
15268: ST_TO_ADDR
// hc_class = class_phororhacos ;
15269: LD_ADDR_OWVAR 28
15273: PUSH
15274: LD_INT 18
15276: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15277: LD_ADDR_OWVAR 31
15281: PUSH
15282: LD_EXP 43
15286: PUSH
15287: LD_INT 1
15289: ARRAY
15290: PUSH
15291: LD_EXP 43
15295: PUSH
15296: LD_INT 2
15298: ARRAY
15299: PUSH
15300: LD_EXP 43
15304: PUSH
15305: LD_INT 3
15307: ARRAY
15308: PUSH
15309: LD_EXP 43
15313: PUSH
15314: LD_INT 4
15316: ARRAY
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15324: LD_ADDR_OWVAR 35
15328: PUSH
15329: LD_EXP 44
15333: ST_TO_ADDR
// un = CreateHuman ;
15334: LD_ADDR_VAR 0 3
15338: PUSH
15339: CALL_OW 44
15343: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15344: LD_VAR 0 3
15348: PPUSH
15349: LD_INT 21
15351: PPUSH
15352: LD_INT 0
15354: PPUSH
15355: CALL_OW 49
// end ;
15359: GO 15250
15361: POP
15362: POP
// for i := 1 to animalsAmount [ 3 ] do
15363: LD_ADDR_VAR 0 2
15367: PUSH
15368: DOUBLE
15369: LD_INT 1
15371: DEC
15372: ST_TO_ADDR
15373: LD_EXP 42
15377: PUSH
15378: LD_INT 3
15380: ARRAY
15381: PUSH
15382: FOR_TO
15383: IFFALSE 15493
// begin uc_side = 0 ;
15385: LD_ADDR_OWVAR 20
15389: PUSH
15390: LD_INT 0
15392: ST_TO_ADDR
// uc_nation = nation_nature ;
15393: LD_ADDR_OWVAR 21
15397: PUSH
15398: LD_INT 0
15400: ST_TO_ADDR
// hc_class = class_tiger ;
15401: LD_ADDR_OWVAR 28
15405: PUSH
15406: LD_INT 14
15408: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15409: LD_ADDR_OWVAR 31
15413: PUSH
15414: LD_EXP 43
15418: PUSH
15419: LD_INT 1
15421: ARRAY
15422: PUSH
15423: LD_EXP 43
15427: PUSH
15428: LD_INT 2
15430: ARRAY
15431: PUSH
15432: LD_EXP 43
15436: PUSH
15437: LD_INT 3
15439: ARRAY
15440: PUSH
15441: LD_EXP 43
15445: PUSH
15446: LD_INT 4
15448: ARRAY
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: LIST
15455: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15456: LD_ADDR_OWVAR 35
15460: PUSH
15461: LD_EXP 44
15465: ST_TO_ADDR
// un = CreateHuman ;
15466: LD_ADDR_VAR 0 3
15470: PUSH
15471: CALL_OW 44
15475: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15476: LD_VAR 0 3
15480: PPUSH
15481: LD_INT 21
15483: PPUSH
15484: LD_INT 0
15486: PPUSH
15487: CALL_OW 49
// end ;
15491: GO 15382
15493: POP
15494: POP
// for i := 1 to animalsAmount [ 4 ] do
15495: LD_ADDR_VAR 0 2
15499: PUSH
15500: DOUBLE
15501: LD_INT 1
15503: DEC
15504: ST_TO_ADDR
15505: LD_EXP 42
15509: PUSH
15510: LD_INT 4
15512: ARRAY
15513: PUSH
15514: FOR_TO
15515: IFFALSE 15625
// begin uc_side = 0 ;
15517: LD_ADDR_OWVAR 20
15521: PUSH
15522: LD_INT 0
15524: ST_TO_ADDR
// uc_nation = nation_nature ;
15525: LD_ADDR_OWVAR 21
15529: PUSH
15530: LD_INT 0
15532: ST_TO_ADDR
// hc_class = 21 ;
15533: LD_ADDR_OWVAR 28
15537: PUSH
15538: LD_INT 21
15540: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
15541: LD_ADDR_OWVAR 31
15545: PUSH
15546: LD_EXP 43
15550: PUSH
15551: LD_INT 1
15553: ARRAY
15554: PUSH
15555: LD_EXP 43
15559: PUSH
15560: LD_INT 2
15562: ARRAY
15563: PUSH
15564: LD_EXP 43
15568: PUSH
15569: LD_INT 3
15571: ARRAY
15572: PUSH
15573: LD_EXP 43
15577: PUSH
15578: LD_INT 4
15580: ARRAY
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
15588: LD_ADDR_OWVAR 35
15592: PUSH
15593: LD_EXP 44
15597: ST_TO_ADDR
// un = CreateHuman ;
15598: LD_ADDR_VAR 0 3
15602: PUSH
15603: CALL_OW 44
15607: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15608: LD_VAR 0 3
15612: PPUSH
15613: LD_INT 21
15615: PPUSH
15616: LD_INT 0
15618: PPUSH
15619: CALL_OW 49
// end ;
15623: GO 15514
15625: POP
15626: POP
// end ; end_of_file
15627: LD_VAR 0 1
15631: RET
// every 0 0$1 trigger spawnCrates do var i , unit , carryCratesEngs , playerEngs , spawnNextCrates ;
15632: LD_EXP 21
15636: IFFALSE 15865
15638: GO 15640
15640: DISABLE
15641: LD_INT 0
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
// begin repeat playerEngs = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
15648: LD_ADDR_VAR 0 4
15652: PUSH
15653: LD_INT 22
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 21
15665: PUSH
15666: LD_INT 1
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 25
15675: PUSH
15676: LD_INT 2
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: PPUSH
15688: CALL_OW 69
15692: ST_TO_ADDR
// wait ( 0 0$40 ) ;
15693: LD_INT 1400
15695: PPUSH
15696: CALL_OW 67
// carryCratesEngs = 0 ;
15700: LD_ADDR_VAR 0 3
15704: PUSH
15705: LD_INT 0
15707: ST_TO_ADDR
// for unit in playerEngs do
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_VAR 0 4
15717: PUSH
15718: FOR_IN
15719: IFFALSE 15747
// carryCratesEngs = carryCratesEngs + GetCargo ( unit , mat_cans ) ;
15721: LD_ADDR_VAR 0 3
15725: PUSH
15726: LD_VAR 0 3
15730: PUSH
15731: LD_VAR 0 2
15735: PPUSH
15736: LD_INT 1
15738: PPUSH
15739: CALL_OW 289
15743: PLUS
15744: ST_TO_ADDR
15745: GO 15718
15747: POP
15748: POP
// if GetResourceType ( GetBase ( beria ) , mat_cans ) < 50 and ( GetResourceArea ( beriaBaseArea , mat_cans ) * 10 ) + GetResourceType ( GetBase ( beria ) , mat_cans ) + carryCratesEngs < 50 then
15749: LD_INT 106
15751: PPUSH
15752: CALL_OW 274
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 275
15764: PUSH
15765: LD_INT 50
15767: LESS
15768: PUSH
15769: LD_INT 8
15771: PPUSH
15772: LD_INT 1
15774: PPUSH
15775: CALL_OW 287
15779: PUSH
15780: LD_INT 10
15782: MUL
15783: PUSH
15784: LD_INT 106
15786: PPUSH
15787: CALL_OW 274
15791: PPUSH
15792: LD_INT 1
15794: PPUSH
15795: CALL_OW 275
15799: PLUS
15800: PUSH
15801: LD_VAR 0 3
15805: PLUS
15806: PUSH
15807: LD_INT 50
15809: LESS
15810: AND
15811: IFFALSE 15823
// spawnNextCrates = true else
15813: LD_ADDR_VAR 0 5
15817: PUSH
15818: LD_INT 1
15820: ST_TO_ADDR
15821: GO 15831
// spawnNextCrates = false ;
15823: LD_ADDR_VAR 0 5
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// if spawnNextCrates then
15831: LD_VAR 0 5
15835: IFFALSE 15858
// CreateCratesArea ( rand ( 1 , 5 ) , BeriaBaseArea , true ) ;
15837: LD_INT 1
15839: PPUSH
15840: LD_INT 5
15842: PPUSH
15843: CALL_OW 12
15847: PPUSH
15848: LD_INT 8
15850: PPUSH
15851: LD_INT 1
15853: PPUSH
15854: CALL_OW 55
// until not spawnCrates ;
15858: LD_EXP 21
15862: NOT
15863: IFFALSE 15648
// end ; end_of_file
15865: PPOPN 5
15867: END
// on BuildingStarted ( building , builder ) do begin if GetBType ( building ) = b_lab and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab ] ] ) > 1 and not canBuildSameBuilding then
15868: LD_VAR 0 1
15872: PPUSH
15873: CALL_OW 266
15877: PUSH
15878: LD_INT 6
15880: EQUAL
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_INT 3
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: LD_INT 30
15894: PUSH
15895: LD_INT 6
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PPUSH
15906: CALL_OW 69
15910: PUSH
15911: LD_INT 1
15913: GREATER
15914: AND
15915: PUSH
15916: LD_EXP 11
15920: NOT
15921: AND
15922: IFFALSE 15933
// Dial_StopConstructAgainSameBuilding ( building ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL 8393 0 1
// if GetBType ( building ) = b_workshop and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_workshop ] ] ) > 1 and not canBuildSameBuilding then
15933: LD_VAR 0 1
15937: PPUSH
15938: CALL_OW 266
15942: PUSH
15943: LD_INT 2
15945: EQUAL
15946: PUSH
15947: LD_INT 22
15949: PUSH
15950: LD_INT 3
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 30
15959: PUSH
15960: LD_INT 2
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PPUSH
15971: CALL_OW 69
15975: PUSH
15976: LD_INT 1
15978: GREATER
15979: AND
15980: PUSH
15981: LD_EXP 11
15985: NOT
15986: AND
15987: IFFALSE 15998
// Dial_StopConstructAgainSameBuilding ( building ) ;
15989: LD_VAR 0 1
15993: PPUSH
15994: CALL 8393 0 1
// if GetSide ( building ) = 3 and GetBType ( building ) in [ b_oil_power , b_armoury , b_breastwork ] and IsInArea ( building , BeriaBaseArea ) then
15998: LD_VAR 0 1
16002: PPUSH
16003: CALL_OW 255
16007: PUSH
16008: LD_INT 3
16010: EQUAL
16011: PUSH
16012: LD_VAR 0 1
16016: PPUSH
16017: CALL_OW 266
16021: PUSH
16022: LD_INT 26
16024: PUSH
16025: LD_INT 4
16027: PUSH
16028: LD_INT 31
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: LIST
16035: IN
16036: AND
16037: PUSH
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 8
16045: PPUSH
16046: CALL_OW 308
16050: AND
16051: IFFALSE 16062
// Dial_StopConstructAgainSameBuilding ( building ) ;
16053: LD_VAR 0 1
16057: PPUSH
16058: CALL 8393 0 1
// end ;
16062: PPOPN 2
16064: END
// on BuildingComplete ( building ) do var sold , platSold ;
16065: LD_INT 0
16067: PPUSH
16068: PPUSH
// begin if GetSide ( building ) = 3 and GetBType ( building ) = b_lab and not labConstructed then
16069: LD_VAR 0 1
16073: PPUSH
16074: CALL_OW 255
16078: PUSH
16079: LD_INT 3
16081: EQUAL
16082: PUSH
16083: LD_VAR 0 1
16087: PPUSH
16088: CALL_OW 266
16092: PUSH
16093: LD_INT 6
16095: EQUAL
16096: AND
16097: PUSH
16098: LD_EXP 8
16102: NOT
16103: AND
16104: IFFALSE 16110
// Dial_LabConstructed ;
16106: CALL 8243 0 0
// if GetSide ( building ) = 3 and GetBType ( building ) = b_workshop and not workshopConstructed then
16110: LD_VAR 0 1
16114: PPUSH
16115: CALL_OW 255
16119: PUSH
16120: LD_INT 3
16122: EQUAL
16123: PUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 266
16133: PUSH
16134: LD_INT 2
16136: EQUAL
16137: AND
16138: PUSH
16139: LD_EXP 9
16143: NOT
16144: AND
16145: IFFALSE 16151
// Dial_WorkshopConstructed ;
16147: CALL 8318 0 0
// if GetSide ( building ) = 6 then
16151: LD_VAR 0 1
16155: PPUSH
16156: CALL_OW 255
16160: PUSH
16161: LD_INT 6
16163: EQUAL
16164: IFFALSE 16375
// begin if GetBType ( building ) = b_breastwork and IsInArea ( building , KirovBaseArea ) then
16166: LD_VAR 0 1
16170: PPUSH
16171: CALL_OW 266
16175: PUSH
16176: LD_INT 31
16178: EQUAL
16179: PUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: LD_INT 9
16187: PPUSH
16188: CALL_OW 308
16192: AND
16193: IFFALSE 16244
// begin if UnitsInside ( ru2_arm2 ) then
16195: LD_INT 209
16197: PPUSH
16198: CALL_OW 313
16202: IFFALSE 16244
// begin sold = UnitsInside ( ru2_arm2 ) [ 1 ] ;
16204: LD_ADDR_VAR 0 2
16208: PUSH
16209: LD_INT 209
16211: PPUSH
16212: CALL_OW 313
16216: PUSH
16217: LD_INT 1
16219: ARRAY
16220: ST_TO_ADDR
// ComExitBuilding ( sold ) ;
16221: LD_VAR 0 2
16225: PPUSH
16226: CALL_OW 122
// AddComEnterUnit ( sold , building ) ;
16230: LD_VAR 0 2
16234: PPUSH
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 180
// end ; end ; if GetBType ( building ) = b_breastwork and IsInArea ( building , BeriaBaseArea ) then
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 266
16253: PUSH
16254: LD_INT 31
16256: EQUAL
16257: PUSH
16258: LD_VAR 0 1
16262: PPUSH
16263: LD_INT 8
16265: PPUSH
16266: CALL_OW 308
16270: AND
16271: IFFALSE 16307
// begin sold = NearestUnitToUnit ( platSoldiers , building ) ;
16273: LD_ADDR_VAR 0 2
16277: PUSH
16278: LD_EXP 74
16282: PPUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 74
16292: ST_TO_ADDR
// ComEnterUnit ( sold , building ) ;
16293: LD_VAR 0 2
16297: PPUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 120
// end ; if GetBType ( building ) = b_workshop then
16307: LD_VAR 0 1
16311: PPUSH
16312: CALL_OW 266
16316: PUSH
16317: LD_INT 2
16319: EQUAL
16320: IFFALSE 16375
// begin ComExitBuilding ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) ) ;
16322: LD_EXP 66
16326: PPUSH
16327: LD_INT 25
16329: PUSH
16330: LD_INT 3
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PPUSH
16337: CALL_OW 72
16341: PPUSH
16342: CALL_OW 122
// AddComEnterUnit ( UnitFilter ( otherKirovUnits , [ f_class , class_mechanic ] ) , building ) ;
16346: LD_EXP 66
16350: PPUSH
16351: LD_INT 25
16353: PUSH
16354: LD_INT 3
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: PPUSH
16361: CALL_OW 72
16365: PPUSH
16366: LD_VAR 0 1
16370: PPUSH
16371: CALL_OW 180
// end ; end ; end ;
16375: PPOPN 3
16377: END
// on ResearchComplete ( tech , building ) do begin if tech = tech_oilEng and GetSide ( building ) = 3 then
16378: LD_VAR 0 1
16382: PUSH
16383: LD_INT 47
16385: EQUAL
16386: PUSH
16387: LD_VAR 0 2
16391: PPUSH
16392: CALL_OW 255
16396: PUSH
16397: LD_INT 3
16399: EQUAL
16400: AND
16401: IFFALSE 16411
// engineResearched = true ;
16403: LD_ADDR_EXP 10
16407: PUSH
16408: LD_INT 1
16410: ST_TO_ADDR
// if tech = tech_Tech1 then
16411: LD_VAR 0 1
16415: PUSH
16416: LD_INT 48
16418: EQUAL
16419: IFFALSE 16441
// begin wait ( 0 0$5 ) ;
16421: LD_INT 175
16423: PPUSH
16424: CALL_OW 67
// SetSpecResearch ( ru_lab , 1500 , false ) ;
16428: LD_INT 83
16430: PPUSH
16431: LD_INT 1500
16433: PPUSH
16434: LD_INT 0
16436: PPUSH
16437: CALL_OW 486
// end ; end ;
16441: PPOPN 2
16443: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( factory ) = your_side and IsOK ( factory ) and not constructedFirstVehicle and not construcMoreVehicles then
16444: LD_VAR 0 2
16448: PPUSH
16449: CALL_OW 255
16453: PUSH
16454: LD_OWVAR 2
16458: EQUAL
16459: PUSH
16460: LD_VAR 0 2
16464: PPUSH
16465: CALL_OW 302
16469: AND
16470: PUSH
16471: LD_EXP 12
16475: NOT
16476: AND
16477: PUSH
16478: LD_EXP 17
16482: NOT
16483: AND
16484: IFFALSE 16495
// Dial_FirstVehConstructed ( factory ) ;
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL 8908 0 1
// if GetSide ( factory ) = your_side and IsOK ( factory ) and construcMoreVehicles then
16495: LD_VAR 0 2
16499: PPUSH
16500: CALL_OW 255
16504: PUSH
16505: LD_OWVAR 2
16509: EQUAL
16510: PUSH
16511: LD_VAR 0 2
16515: PPUSH
16516: CALL_OW 302
16520: AND
16521: PUSH
16522: LD_EXP 17
16526: AND
16527: IFFALSE 16543
// constructedVehiclesCounter = constructedVehiclesCounter + 1 ;
16529: LD_ADDR_EXP 18
16533: PUSH
16534: LD_EXP 18
16538: PUSH
16539: LD_INT 1
16541: PLUS
16542: ST_TO_ADDR
// end ;
16543: PPOPN 2
16545: END
// on CrateSpawn ( unit , x , y , amount , mode ) do begin if not canExitBase and mode = true then
16546: LD_EXP 19
16550: NOT
16551: PUSH
16552: LD_VAR 0 5
16556: PUSH
16557: LD_INT 1
16559: EQUAL
16560: AND
16561: IFFALSE 16577
// Dial_NewCrates ( x , y ) ;
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_VAR 0 3
16572: PPUSH
16573: CALL 8862 0 2
// end ;
16577: PPOPN 5
16579: END
// on Command ( com ) do var i , j , temp , order , destiny ;
16580: LD_INT 0
16582: PPUSH
16583: PPUSH
16584: PPUSH
16585: PPUSH
16586: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
16587: LD_ADDR_VAR 0 2
16591: PUSH
16592: LD_INT 22
16594: PUSH
16595: LD_INT 3
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 21
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PPUSH
16616: CALL_OW 69
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16815
// if GetTaskList ( i ) > 0 then
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 437
16633: PUSH
16634: LD_INT 0
16636: GREATER
16637: IFFALSE 16813
// for j = 1 to GetTaskList ( i ) do
16639: LD_ADDR_VAR 0 3
16643: PUSH
16644: DOUBLE
16645: LD_INT 1
16647: DEC
16648: ST_TO_ADDR
16649: LD_VAR 0 2
16653: PPUSH
16654: CALL_OW 437
16658: PUSH
16659: FOR_TO
16660: IFFALSE 16811
// begin temp = GetTaskList ( i ) [ j ] [ 4 ] ;
16662: LD_ADDR_VAR 0 4
16666: PUSH
16667: LD_VAR 0 2
16671: PPUSH
16672: CALL_OW 437
16676: PUSH
16677: LD_VAR 0 3
16681: ARRAY
16682: PUSH
16683: LD_INT 4
16685: ARRAY
16686: ST_TO_ADDR
// if temp = kirov or ( GetSide ( temp ) = 6 and GetTaskList ( i ) [ j ] [ 1 ] = e and GetType ( temp ) = unit_vehicle ) then
16687: LD_VAR 0 4
16691: PUSH
16692: LD_INT 71
16694: EQUAL
16695: PUSH
16696: LD_VAR 0 4
16700: PPUSH
16701: CALL_OW 255
16705: PUSH
16706: LD_INT 6
16708: EQUAL
16709: PUSH
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 437
16719: PUSH
16720: LD_VAR 0 3
16724: ARRAY
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PUSH
16730: LD_STRING e
16732: EQUAL
16733: AND
16734: PUSH
16735: LD_VAR 0 4
16739: PPUSH
16740: CALL_OW 247
16744: PUSH
16745: LD_INT 2
16747: EQUAL
16748: AND
16749: OR
16750: IFFALSE 16763
// SetTaskList ( i , [ ] ) ;
16752: LD_VAR 0 2
16756: PPUSH
16757: EMPTY
16758: PPUSH
16759: CALL_OW 446
// if temp = beria and GetTaskList ( i ) [ j ] [ 1 ] = Y then
16763: LD_VAR 0 4
16767: PUSH
16768: LD_INT 106
16770: EQUAL
16771: PUSH
16772: LD_VAR 0 2
16776: PPUSH
16777: CALL_OW 437
16781: PUSH
16782: LD_VAR 0 3
16786: ARRAY
16787: PUSH
16788: LD_INT 1
16790: ARRAY
16791: PUSH
16792: LD_STRING Y
16794: EQUAL
16795: AND
16796: IFFALSE 16809
// SetTaskList ( i , [ ] ) ;
16798: LD_VAR 0 2
16802: PPUSH
16803: EMPTY
16804: PPUSH
16805: CALL_OW 446
// end ;
16809: GO 16659
16811: POP
16812: POP
16813: GO 16621
16815: POP
16816: POP
// end ;
16817: PPOPN 6
16819: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
16820: LD_VAR 0 1
16824: PPUSH
16825: CALL_OW 255
16829: PUSH
16830: LD_INT 1
16832: EQUAL
16833: PUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 247
16843: PUSH
16844: LD_INT 1
16846: EQUAL
16847: AND
16848: IFFALSE 16906
// begin if unit in amLeftEngs then
16850: LD_VAR 0 1
16854: PUSH
16855: LD_EXP 83
16859: IN
16860: IFFALSE 16878
// amLeftEngs = amLeftEngs diff unit ;
16862: LD_ADDR_EXP 83
16866: PUSH
16867: LD_EXP 83
16871: PUSH
16872: LD_VAR 0 1
16876: DIFF
16877: ST_TO_ADDR
// if unit in amRightEngs then
16878: LD_VAR 0 1
16882: PUSH
16883: LD_EXP 84
16887: IN
16888: IFFALSE 16906
// amRightEngs = amRightEngs diff unit ;
16890: LD_ADDR_EXP 84
16894: PUSH
16895: LD_EXP 84
16899: PUSH
16900: LD_VAR 0 1
16904: DIFF
16905: ST_TO_ADDR
// end ; if GetSide ( unit ) = 6 and GetType ( unit ) = unit_human then
16906: LD_VAR 0 1
16910: PPUSH
16911: CALL_OW 255
16915: PUSH
16916: LD_INT 6
16918: EQUAL
16919: PUSH
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 247
16929: PUSH
16930: LD_INT 1
16932: EQUAL
16933: AND
16934: IFFALSE 16964
// if unit in belkovTeam then
16936: LD_VAR 0 1
16940: PUSH
16941: LD_EXP 70
16945: IN
16946: IFFALSE 16964
// belkovTeam = belkovTeam diff unit ;
16948: LD_ADDR_EXP 70
16952: PUSH
16953: LD_EXP 70
16957: PUSH
16958: LD_VAR 0 1
16962: DIFF
16963: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16964: LD_VAR 0 1
16968: PPUSH
16969: CALL_OW 255
16973: PUSH
16974: LD_INT 3
16976: EQUAL
16977: PUSH
16978: LD_VAR 0 1
16982: PPUSH
16983: CALL_OW 247
16987: PUSH
16988: LD_INT 1
16990: EQUAL
16991: AND
16992: IFFALSE 17008
// lostComradesCounter = lostComradesCounter + 1 ;
16994: LD_ADDR_EXP 41
16998: PUSH
16999: LD_EXP 41
17003: PUSH
17004: LD_INT 1
17006: PLUS
17007: ST_TO_ADDR
// if unit = Burlak then
17008: LD_VAR 0 1
17012: PUSH
17013: LD_EXP 59
17017: EQUAL
17018: IFFALSE 17024
// BurlakIsDead ;
17020: CALL 18304 0 0
// if unit in platSoldiers then
17024: LD_VAR 0 1
17028: PUSH
17029: LD_EXP 74
17033: IN
17034: IFFALSE 17052
// platSoldiers = platSoldiers diff unit ;
17036: LD_ADDR_EXP 74
17040: PUSH
17041: LD_EXP 74
17045: PUSH
17046: LD_VAR 0 1
17050: DIFF
17051: ST_TO_ADDR
// end ;
17052: PPOPN 1
17054: END
// on UnitGoesToRed ( unit ) do begin if GetSide ( unit ) = 1 and GetType ( unit ) = unit_building then
17055: LD_VAR 0 1
17059: PPUSH
17060: CALL_OW 255
17064: PUSH
17065: LD_INT 1
17067: EQUAL
17068: PUSH
17069: LD_VAR 0 1
17073: PPUSH
17074: CALL_OW 247
17078: PUSH
17079: LD_INT 3
17081: EQUAL
17082: AND
17083: IFFALSE 17141
// begin if unit in leftBunkers then
17085: LD_VAR 0 1
17089: PUSH
17090: LD_EXP 79
17094: IN
17095: IFFALSE 17113
// leftBunkers = leftBunkers diff unit ;
17097: LD_ADDR_EXP 79
17101: PUSH
17102: LD_EXP 79
17106: PUSH
17107: LD_VAR 0 1
17111: DIFF
17112: ST_TO_ADDR
// if unit in rightBunkers then
17113: LD_VAR 0 1
17117: PUSH
17118: LD_EXP 80
17122: IN
17123: IFFALSE 17141
// rightBunkers = rightBunkers diff unit ;
17125: LD_ADDR_EXP 80
17129: PUSH
17130: LD_EXP 80
17134: PUSH
17135: LD_VAR 0 1
17139: DIFF
17140: ST_TO_ADDR
// end ; if GetSide ( unit ) = 1 and GetType ( unit ) = unit_human then
17141: LD_VAR 0 1
17145: PPUSH
17146: CALL_OW 255
17150: PUSH
17151: LD_INT 1
17153: EQUAL
17154: PUSH
17155: LD_VAR 0 1
17159: PPUSH
17160: CALL_OW 247
17164: PUSH
17165: LD_INT 1
17167: EQUAL
17168: AND
17169: IFFALSE 17199
// if unit in trapTeam then
17171: LD_VAR 0 1
17175: PUSH
17176: LD_EXP 78
17180: IN
17181: IFFALSE 17199
// trapTeam = trapTeam diff unit ;
17183: LD_ADDR_EXP 78
17187: PUSH
17188: LD_EXP 78
17192: PUSH
17193: LD_VAR 0 1
17197: DIFF
17198: ST_TO_ADDR
// end ;
17199: PPOPN 1
17201: END
// on VehicleCaptured ( new_vehicle , old_vehicle , original_side , human ) do begin if original_side = 1 then
17202: LD_VAR 0 3
17206: PUSH
17207: LD_INT 1
17209: EQUAL
17210: IFFALSE 17220
// captureBelkovVehicle = true ;
17212: LD_ADDR_EXP 36
17216: PUSH
17217: LD_INT 1
17219: ST_TO_ADDR
// if original_side = 6 then
17220: LD_VAR 0 3
17224: PUSH
17225: LD_INT 6
17227: EQUAL
17228: IFFALSE 17272
// begin ComMoveXY ( [ new_vehicle , old_vehicle ] , 118 , 25 ) ;
17230: LD_VAR 0 1
17234: PUSH
17235: LD_VAR 0 2
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: LD_INT 118
17246: PPUSH
17247: LD_INT 25
17249: PPUSH
17250: CALL_OW 111
// ComFree ( [ new_vehicle , old_vehicle ] ) ;
17254: LD_VAR 0 1
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 139
// end ; end ;
17272: PPOPN 4
17274: END
// on Contact ( side1 , side2 ) do begin if side1 = 3 and side2 = 6 then
17275: LD_VAR 0 1
17279: PUSH
17280: LD_INT 3
17282: EQUAL
17283: PUSH
17284: LD_VAR 0 2
17288: PUSH
17289: LD_INT 6
17291: EQUAL
17292: AND
17293: IFFALSE 17299
// AttackComrades ;
17295: CALL 18319 0 0
// end ; end_of_file
17299: PPOPN 2
17301: END
// every 0 0$5 trigger backToBeria2 and FilterUnitsExceptArea ( BeriaBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
17302: LD_EXP 16
17306: PUSH
17307: LD_INT 8
17309: PPUSH
17310: LD_INT 22
17312: PUSH
17313: LD_INT 3
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 21
17322: PUSH
17323: LD_INT 1
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PPUSH
17334: CALL_OW 71
17338: PUSH
17339: LD_INT 0
17341: EQUAL
17342: AND
17343: IFFALSE 17444
17345: GO 17347
17347: DISABLE
// begin enable ;
17348: ENABLE
// if not saveBelkovObjective and ( IsOk ( Belkov ) or IsOk ( Belkov2 ) ) then
17349: LD_EXP 34
17353: NOT
17354: PUSH
17355: LD_EXP 61
17359: PPUSH
17360: CALL_OW 302
17364: PUSH
17365: LD_EXP 65
17369: PPUSH
17370: CALL_OW 302
17374: OR
17375: AND
17376: IFFALSE 17423
// begin case Query ( QContMission ) of 1 :
17378: LD_STRING QContMission
17380: PPUSH
17381: CALL_OW 97
17385: PUSH
17386: LD_INT 1
17388: DOUBLE
17389: EQUAL
17390: IFTRUE 17394
17392: GO 17401
17394: POP
// begin FinishMission ;
17395: CALL 17445 0 0
// end ; 2 :
17399: GO 17421
17401: LD_INT 2
17403: DOUBLE
17404: EQUAL
17405: IFTRUE 17409
17407: GO 17420
17409: POP
// begin saveBelkovObjective = true ;
17410: LD_ADDR_EXP 34
17414: PUSH
17415: LD_INT 1
17417: ST_TO_ADDR
// end ; end ;
17418: GO 17421
17420: POP
// end else
17421: GO 17434
// if not belkovSaved then
17423: LD_EXP 35
17427: NOT
17428: IFFALSE 17434
// FinishMission ;
17430: CALL 17445 0 0
// if belkovSaved then
17434: LD_EXP 35
17438: IFFALSE 17444
// FinishMission ;
17440: CALL 17445 0 0
// end ;
17444: END
// function FinishMission ; begin
17445: LD_INT 0
17447: PPUSH
// SetRewards ;
17448: CALL 17469 0 0
// SavePlayerCharacters ;
17452: CALL 17759 0 0
// SaveGlobalVariables ;
17456: CALL 17984 0 0
// YouWin ;
17460: CALL_OW 103
// end ;
17464: LD_VAR 0 1
17468: RET
// function SetRewards ; begin
17469: LD_INT 0
17471: PPUSH
// case initiative of 1 :
17472: LD_EXP 40
17476: PUSH
17477: LD_INT 1
17479: DOUBLE
17480: EQUAL
17481: IFTRUE 17485
17483: GO 17498
17485: POP
// AddMedal ( Initiative , 1 ) ; 2 :
17486: LD_STRING Initiative
17488: PPUSH
17489: LD_INT 1
17491: PPUSH
17492: CALL_OW 101
17496: GO 17543
17498: LD_INT 2
17500: DOUBLE
17501: EQUAL
17502: IFTRUE 17506
17504: GO 17520
17506: POP
// AddMedal ( Initiative , - 2 ) ; 3 :
17507: LD_STRING Initiative
17509: PPUSH
17510: LD_INT 2
17512: NEG
17513: PPUSH
17514: CALL_OW 101
17518: GO 17543
17520: LD_INT 3
17522: DOUBLE
17523: EQUAL
17524: IFTRUE 17528
17526: GO 17542
17528: POP
// AddMedal ( Initiative , - 1 ) ; end ;
17529: LD_STRING Initiative
17531: PPUSH
17532: LD_INT 1
17534: NEG
17535: PPUSH
17536: CALL_OW 101
17540: GO 17543
17542: POP
// if belkovSaved and ( IsOK ( Belkov ) or IsOK ( Belkov2 ) ) then
17543: LD_EXP 35
17547: PUSH
17548: LD_EXP 61
17552: PPUSH
17553: CALL_OW 302
17557: PUSH
17558: LD_EXP 65
17562: PPUSH
17563: CALL_OW 302
17567: OR
17568: AND
17569: IFFALSE 17581
// AddMedal ( Belkov , 1 ) ;
17571: LD_STRING Belkov
17573: PPUSH
17574: LD_INT 1
17576: PPUSH
17577: CALL_OW 101
// if not belkovSaved and not saveBelkovObjective then
17581: LD_EXP 35
17585: NOT
17586: PUSH
17587: LD_EXP 34
17591: NOT
17592: AND
17593: IFFALSE 17606
// AddMedal ( Belkov , - 1 ) ;
17595: LD_STRING Belkov
17597: PPUSH
17598: LD_INT 1
17600: NEG
17601: PPUSH
17602: CALL_OW 101
// if not belkovSaved and saveBelkovObjective then
17606: LD_EXP 35
17610: NOT
17611: PUSH
17612: LD_EXP 34
17616: AND
17617: IFFALSE 17630
// AddMedal ( Belkov , - 2 ) ;
17619: LD_STRING Belkov
17621: PPUSH
17622: LD_INT 2
17624: NEG
17625: PPUSH
17626: CALL_OW 101
// if belkovSaved and ( belkovReturn and IsDead ( Belkov ) ) or ( not belkovReturn and IsDead ( Belkov2 ) ) then
17630: LD_EXP 35
17634: PUSH
17635: LD_EXP 6
17639: PUSH
17640: LD_EXP 61
17644: PPUSH
17645: CALL_OW 301
17649: AND
17650: AND
17651: PUSH
17652: LD_EXP 6
17656: NOT
17657: PUSH
17658: LD_EXP 65
17662: PPUSH
17663: CALL_OW 301
17667: AND
17668: OR
17669: IFFALSE 17682
// AddMedal ( Belkov , - 2 ) ;
17671: LD_STRING Belkov
17673: PPUSH
17674: LD_INT 2
17676: NEG
17677: PPUSH
17678: CALL_OW 101
// if lostComradesCounter = 0 then
17682: LD_EXP 41
17686: PUSH
17687: LD_INT 0
17689: EQUAL
17690: IFFALSE 17704
// AddMedal ( NoLosses , 1 ) else
17692: LD_STRING NoLosses
17694: PPUSH
17695: LD_INT 1
17697: PPUSH
17698: CALL_OW 101
17702: GO 17714
// AddMedal ( NoLosses , 0 ) ;
17704: LD_STRING NoLosses
17706: PPUSH
17707: LD_INT 0
17709: PPUSH
17710: CALL_OW 101
// GiveMedals ( Main ) ;
17714: LD_STRING Main
17716: PPUSH
17717: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17721: LD_INT 22
17723: PUSH
17724: LD_INT 3
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: LD_INT 21
17733: PUSH
17734: LD_INT 1
17736: PUSH
17737: EMPTY
17738: LIST
17739: LIST
17740: PUSH
17741: EMPTY
17742: LIST
17743: LIST
17744: PPUSH
17745: CALL_OW 69
17749: PPUSH
17750: CALL_OW 43
// end ;
17754: LD_VAR 0 1
17758: RET
// function SavePlayerCharacters ; var othersYour ; begin
17759: LD_INT 0
17761: PPUSH
17762: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
17763: LD_EXP 59
17767: PPUSH
17768: LD_STRING Burlak
17770: PPUSH
17771: LD_INT 3
17773: PPUSH
17774: CALL 4217 0 3
// ExtSaveCharacter ( Gnyevko , Gnyevko , 3 ) ;
17778: LD_EXP 60
17782: PPUSH
17783: LD_STRING Gnyevko
17785: PPUSH
17786: LD_INT 3
17788: PPUSH
17789: CALL 4217 0 3
// ExtSaveCharacter ( Kovalyuk , Kovalyuk , 3 ) ;
17793: LD_EXP 67
17797: PPUSH
17798: LD_STRING Kovalyuk
17800: PPUSH
17801: LD_INT 3
17803: PPUSH
17804: CALL 4217 0 3
// if belkovReturn then
17808: LD_EXP 6
17812: IFFALSE 17831
// ExtSaveCharacter ( Belkov , Belkov , 3 ) else
17814: LD_EXP 61
17818: PPUSH
17819: LD_STRING Belkov
17821: PPUSH
17822: LD_INT 3
17824: PPUSH
17825: CALL 4217 0 3
17829: GO 17846
// ExtSaveCharacter ( Belkov2 , Belkov2 , 3 ) ;
17831: LD_EXP 65
17835: PPUSH
17836: LD_STRING Belkov2
17838: PPUSH
17839: LD_INT 3
17841: PPUSH
17842: CALL 4217 0 3
// ExtSaveCharacter ( Kirilenkova , Kirilenkova , 3 ) ;
17846: LD_EXP 62
17850: PPUSH
17851: LD_STRING Kirilenkova
17853: PPUSH
17854: LD_INT 3
17856: PPUSH
17857: CALL 4217 0 3
// othersYour = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Belkov2 , Kovalyuk , Kirilenkova ] ;
17861: LD_ADDR_VAR 0 2
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PUSH
17876: LD_INT 21
17878: PUSH
17879: LD_INT 1
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PPUSH
17890: CALL_OW 69
17894: PUSH
17895: LD_EXP 59
17899: PUSH
17900: LD_EXP 60
17904: PUSH
17905: LD_EXP 61
17909: PUSH
17910: LD_EXP 65
17914: PUSH
17915: LD_EXP 67
17919: PUSH
17920: LD_EXP 62
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: DIFF
17933: ST_TO_ADDR
// ExtSaveCharacters ( othersYour , other_survivors , 3 ) ;
17934: LD_VAR 0 2
17938: PPUSH
17939: LD_STRING other_survivors
17941: PPUSH
17942: LD_INT 3
17944: PPUSH
17945: CALL 4273 0 3
// ExtSaveCharacters ( platSoldiers , other_beria , 6 ) ;
17949: LD_EXP 74
17953: PPUSH
17954: LD_STRING other_beria
17956: PPUSH
17957: LD_INT 6
17959: PPUSH
17960: CALL 4273 0 3
// ExtSaveCharacters ( otherKirovUnits , other_kirov , 6 ) ;
17964: LD_EXP 66
17968: PPUSH
17969: LD_STRING other_kirov
17971: PPUSH
17972: LD_INT 6
17974: PPUSH
17975: CALL 4273 0 3
// end ;
17979: LD_VAR 0 1
17983: RET
// function SaveGlobalVariables ; var vehicles ; begin
17984: LD_INT 0
17986: PPUSH
17987: PPUSH
// vehicles = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ) ;
17988: LD_ADDR_VAR 0 2
17992: PUSH
17993: LD_INT 22
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 21
18005: PUSH
18006: LD_INT 2
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 50
18015: PUSH
18016: EMPTY
18017: LIST
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: LIST
18023: PPUSH
18024: CALL_OW 69
18028: ST_TO_ADDR
// if vehicles then
18029: LD_VAR 0 2
18033: IFFALSE 18047
// SaveVehicles ( vehicles , 02_Vehicles_1 ) ;
18035: LD_VAR 0 2
18039: PPUSH
18040: LD_STRING 02_Vehicles_1
18042: PPUSH
18043: CALL 5267 0 2
// SaveBase ( FilterUnitsInArea ( BeriaBaseArea , [ [ f_type , unit_building ] ] ) , 02_BeriaBase_2 ) ;
18047: LD_INT 8
18049: PPUSH
18050: LD_INT 21
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: EMPTY
18061: LIST
18062: PPUSH
18063: CALL_OW 70
18067: PPUSH
18068: LD_STRING 02_BeriaBase_2
18070: PPUSH
18071: CALL 5410 0 2
// SaveBase ( FilterUnitsInArea ( KirovBaseArea , [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) , 02_KirovBase_3 ) ;
18075: LD_INT 9
18077: PPUSH
18078: LD_INT 22
18080: PUSH
18081: LD_INT 6
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 21
18090: PUSH
18091: LD_INT 3
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 70
18106: PPUSH
18107: LD_STRING 02_KirovBase_3
18109: PPUSH
18110: CALL 5410 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_not , [ f_inarea , BeriaBaseArea ] ] ] ) , 02_OtherBuildings_4 ) ;
18114: LD_INT 22
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: LD_INT 21
18126: PUSH
18127: LD_INT 3
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: LD_INT 50
18136: PUSH
18137: EMPTY
18138: LIST
18139: PUSH
18140: LD_INT 3
18142: PUSH
18143: LD_INT 95
18145: PUSH
18146: LD_INT 8
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 69
18167: PPUSH
18168: LD_STRING 02_OtherBuildings_4
18170: PPUSH
18171: CALL 5410 0 2
// SaveBase ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] , [ f_nation , nation_american ] ] ) , 02_AmericanBuildings_5 ) ;
18175: LD_INT 22
18177: PUSH
18178: LD_INT 1
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: LD_INT 21
18187: PUSH
18188: LD_INT 3
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 50
18197: PUSH
18198: EMPTY
18199: LIST
18200: PUSH
18201: LD_INT 23
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: PPUSH
18217: CALL_OW 69
18221: PPUSH
18222: LD_STRING 02_AmericanBuildings_5
18224: PPUSH
18225: CALL 5410 0 2
// SaveVariable ( meetBelkovBrother , 02_MeetBelkovBrother_6 ) ;
18229: LD_EXP 4
18233: PPUSH
18234: LD_STRING 02_MeetBelkovBrother_6
18236: PPUSH
18237: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_cans ) , 02_BeriaResourceCrates_7 ) ;
18241: LD_INT 106
18243: PPUSH
18244: CALL_OW 274
18248: PPUSH
18249: LD_INT 1
18251: PPUSH
18252: CALL_OW 275
18256: PPUSH
18257: LD_STRING 02_BeriaResourceCrates_7
18259: PPUSH
18260: CALL_OW 39
// SaveVariable ( GetResourceType ( GetBase ( beria ) , mat_oil ) , 02_BeriaResourceOil_8 ) ;
18264: LD_INT 106
18266: PPUSH
18267: CALL_OW 274
18271: PPUSH
18272: LD_INT 2
18274: PPUSH
18275: CALL_OW 275
18279: PPUSH
18280: LD_STRING 02_BeriaResourceOil_8
18282: PPUSH
18283: CALL_OW 39
// SaveVariable ( platonovOpinion , 02_PlatonovOpinion_9 ) ;
18287: LD_EXP 5
18291: PPUSH
18292: LD_STRING 02_PlatonovOpinion_9
18294: PPUSH
18295: CALL_OW 39
// end ; end_of_file
18299: LD_VAR 0 1
18303: RET
// export function BurlakIsDead ; begin
18304: LD_INT 0
18306: PPUSH
// YouLost ( Burlak ) ;
18307: LD_STRING Burlak
18309: PPUSH
18310: CALL_OW 104
// end ;
18314: LD_VAR 0 1
18318: RET
// export function AttackComrades ; begin
18319: LD_INT 0
18321: PPUSH
// YouLost ( SelfAttack ) ;
18322: LD_STRING SelfAttack
18324: PPUSH
18325: CALL_OW 104
// end ; end_of_file
18329: LD_VAR 0 1
18333: RET
// every 0 0$1 do var engs ;
18334: GO 18336
18336: DISABLE
18337: LD_INT 0
18339: PPUSH
// begin engs = UnitFilter ( otherKirovUnits , [ f_class , class_engineer ] ) ;
18340: LD_ADDR_VAR 0 1
18344: PUSH
18345: LD_EXP 66
18349: PPUSH
18350: LD_INT 25
18352: PUSH
18353: LD_INT 2
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PPUSH
18360: CALL_OW 72
18364: ST_TO_ADDR
// ComExitBuilding ( engs ) ;
18365: LD_VAR 0 1
18369: PPUSH
18370: CALL_OW 122
// wait ( 0 0$1 ) ;
18374: LD_INT 35
18376: PPUSH
18377: CALL_OW 67
// AddComBuild ( engs , b_breastwork , 146 , 107 , 1 ) ;
18381: LD_VAR 0 1
18385: PPUSH
18386: LD_INT 31
18388: PPUSH
18389: LD_INT 146
18391: PPUSH
18392: LD_INT 107
18394: PPUSH
18395: LD_INT 1
18397: PPUSH
18398: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 176 , 123 , 5 ) ;
18402: LD_VAR 0 1
18406: PPUSH
18407: LD_INT 31
18409: PPUSH
18410: LD_INT 176
18412: PPUSH
18413: LD_INT 123
18415: PPUSH
18416: LD_INT 5
18418: PPUSH
18419: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 170 , 102 , 4 ) ;
18423: LD_VAR 0 1
18427: PPUSH
18428: LD_INT 31
18430: PPUSH
18431: LD_INT 170
18433: PPUSH
18434: LD_INT 102
18436: PPUSH
18437: LD_INT 4
18439: PPUSH
18440: CALL_OW 205
// AddComBuild ( engs , b_breastwork , 173 , 105 , 4 ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: LD_INT 31
18451: PPUSH
18452: LD_INT 173
18454: PPUSH
18455: LD_INT 105
18457: PPUSH
18458: LD_INT 4
18460: PPUSH
18461: CALL_OW 205
// AddComEnterUnit ( engs , kirov ) ;
18465: LD_VAR 0 1
18469: PPUSH
18470: LD_INT 71
18472: PPUSH
18473: CALL_OW 180
// end ;
18477: PPOPN 1
18479: END
// every 0 0$1 trigger activateAMAI do
18480: LD_EXP 26
18484: IFFALSE 18508
18486: GO 18488
18488: DISABLE
// begin enable ;
18489: ENABLE
// RepairDamageLeftBunkers ;
18490: CALL 18509 0 0
// if Difficulty = 3 then
18494: LD_OWVAR 67
18498: PUSH
18499: LD_INT 3
18501: EQUAL
18502: IFFALSE 18508
// RepairDamageRightBunkers ;
18504: CALL 18717 0 0
// end ;
18508: END
// function RepairDamageLeftBunkers ; var eng , bunker ; begin
18509: LD_INT 0
18511: PPUSH
18512: PPUSH
18513: PPUSH
// if not amLeftEngs or FilterUnitsInArea ( LeftHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
18514: LD_EXP 83
18518: NOT
18519: PUSH
18520: LD_INT 17
18522: PPUSH
18523: LD_INT 22
18525: PUSH
18526: LD_INT 1
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: LD_INT 21
18535: PUSH
18536: LD_INT 3
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 30
18545: PUSH
18546: LD_INT 31
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: LD_INT 24
18558: PUSH
18559: LD_INT 1000
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: EMPTY
18567: LIST
18568: LIST
18569: PUSH
18570: EMPTY
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: PPUSH
18576: CALL_OW 70
18580: PUSH
18581: LD_INT 0
18583: EQUAL
18584: OR
18585: IFFALSE 18589
// exit ;
18587: GO 18712
// ComExitBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) ) ;
18589: LD_EXP 83
18593: PPUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 60
18599: PUSH
18600: EMPTY
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 72
18611: PPUSH
18612: CALL_OW 122
// for bunker in leftBunkers do
18616: LD_ADDR_VAR 0 3
18620: PUSH
18621: LD_EXP 79
18625: PUSH
18626: FOR_IN
18627: IFFALSE 18678
// if GetLives ( bunker ) < 1000 then
18629: LD_VAR 0 3
18633: PPUSH
18634: CALL_OW 256
18638: PUSH
18639: LD_INT 1000
18641: LESS
18642: IFFALSE 18676
// AddComRepairBuilding ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18644: LD_EXP 83
18648: PPUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 60
18654: PUSH
18655: EMPTY
18656: LIST
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 72
18666: PPUSH
18667: LD_VAR 0 3
18671: PPUSH
18672: CALL_OW 190
18676: GO 18626
18678: POP
18679: POP
// AddComEnterUnit ( UnitFilter ( amLeftEngs , [ f_not , [ f_hastask ] ] ) , amLeftDepot ) ;
18680: LD_EXP 83
18684: PPUSH
18685: LD_INT 3
18687: PUSH
18688: LD_INT 60
18690: PUSH
18691: EMPTY
18692: LIST
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PPUSH
18698: CALL_OW 72
18702: PPUSH
18703: LD_EXP 81
18707: PPUSH
18708: CALL_OW 180
// end ;
18712: LD_VAR 0 1
18716: RET
// function RepairDamageRightBunkers ; var eng , bunker ; begin
18717: LD_INT 0
18719: PPUSH
18720: PPUSH
18721: PPUSH
// if not amRightEngs or FilterUnitsInArea ( RightHillArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_breastwork ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 then
18722: LD_EXP 84
18726: NOT
18727: PUSH
18728: LD_INT 16
18730: PPUSH
18731: LD_INT 22
18733: PUSH
18734: LD_INT 1
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 21
18743: PUSH
18744: LD_INT 3
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 30
18753: PUSH
18754: LD_INT 31
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: LD_INT 3
18763: PUSH
18764: LD_INT 24
18766: PUSH
18767: LD_INT 1000
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: EMPTY
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: PPUSH
18784: CALL_OW 70
18788: PUSH
18789: LD_INT 0
18791: EQUAL
18792: OR
18793: IFFALSE 18797
// exit ;
18795: GO 18920
// ComExitBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) ) ;
18797: LD_EXP 84
18801: PPUSH
18802: LD_INT 3
18804: PUSH
18805: LD_INT 60
18807: PUSH
18808: EMPTY
18809: LIST
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PPUSH
18815: CALL_OW 72
18819: PPUSH
18820: CALL_OW 122
// for bunker in rightBunkers do
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: LD_EXP 80
18833: PUSH
18834: FOR_IN
18835: IFFALSE 18886
// if GetLives ( bunker ) < 1000 then
18837: LD_VAR 0 3
18841: PPUSH
18842: CALL_OW 256
18846: PUSH
18847: LD_INT 1000
18849: LESS
18850: IFFALSE 18884
// AddComRepairBuilding ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , bunker ) ;
18852: LD_EXP 84
18856: PPUSH
18857: LD_INT 3
18859: PUSH
18860: LD_INT 60
18862: PUSH
18863: EMPTY
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 72
18874: PPUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: CALL_OW 190
18884: GO 18834
18886: POP
18887: POP
// AddComEnterUnit ( UnitFilter ( amRightEngs , [ f_not , [ f_hastask ] ] ) , amRightDepot ) ;
18888: LD_EXP 84
18892: PPUSH
18893: LD_INT 3
18895: PUSH
18896: LD_INT 60
18898: PUSH
18899: EMPTY
18900: LIST
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: PPUSH
18906: CALL_OW 72
18910: PPUSH
18911: LD_EXP 82
18915: PPUSH
18916: CALL_OW 180
// end ;
18920: LD_VAR 0 1
18924: RET
