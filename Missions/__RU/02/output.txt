// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 51367 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5840 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := 1 ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 57842 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 57842 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16999 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16999 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16999 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16999 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1670
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1670
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 55088 0 1
// for i := 1 to 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: DOUBLE
1508: LD_INT 1
1510: DEC
1511: ST_TO_ADDR
1512: LD_INT 2
1514: PUSH
1515: FOR_TO
1516: IFFALSE 1559
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1518: LD_VAR 0 1
1522: PPUSH
1523: LD_INT 71
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1533: LD_VAR 0 1
1537: PPUSH
1538: LD_INT 121
1540: PPUSH
1541: LD_INT 111
1543: PPUSH
1544: CALL_OW 171
// AddComUnload ( tmp ) ;
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 219
// end ;
1557: GO 1515
1559: POP
1560: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_INT 2
1568: PPUSH
1569: LD_INT 113
1571: PPUSH
1572: LD_INT 113
1574: PPUSH
1575: LD_INT 0
1577: PPUSH
1578: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1582: LD_INT 83
1584: PPUSH
1585: LD_INT 46
1587: PPUSH
1588: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1592: LD_INT 83
1594: PPUSH
1595: LD_INT 47
1597: PPUSH
1598: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1602: LD_INT 83
1604: PPUSH
1605: LD_INT 48
1607: PPUSH
1608: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1612: LD_VAR 0 1
1616: PPUSH
1617: LD_INT 26
1619: PPUSH
1620: LD_INT 116
1622: PPUSH
1623: LD_INT 98
1625: PPUSH
1626: LD_INT 0
1628: PPUSH
1629: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1633: LD_INT 35
1635: PPUSH
1636: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1640: LD_VAR 0 1
1644: PPUSH
1645: LD_INT 60
1647: PUSH
1648: EMPTY
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: NOT
1656: IFFALSE 1633
// ComEnterUnit ( tmp , kirov ) ;
1658: LD_VAR 0 1
1662: PPUSH
1663: LD_INT 71
1665: PPUSH
1666: CALL_OW 120
// end ;
1670: PPOPN 2
1672: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1673: LD_INT 0
1675: PPUSH
1676: PPUSH
1677: PPUSH
1678: PPUSH
1679: PPUSH
1680: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1681: LD_ADDR_VAR 0 3
1685: PUSH
1686: LD_INT 22
1688: PUSH
1689: LD_INT 6
1691: PUSH
1692: EMPTY
1693: LIST
1694: LIST
1695: PUSH
1696: LD_INT 21
1698: PUSH
1699: LD_INT 2
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: PPUSH
1710: CALL_OW 69
1714: ST_TO_ADDR
// if not belkovTank then
1715: LD_VAR 0 3
1719: NOT
1720: IFFALSE 1813
// begin uc_side := 6 ;
1722: LD_ADDR_OWVAR 20
1726: PUSH
1727: LD_INT 6
1729: ST_TO_ADDR
// uc_nation := 3 ;
1730: LD_ADDR_OWVAR 21
1734: PUSH
1735: LD_INT 3
1737: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1738: LD_INT 21
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 42
1749: PPUSH
1750: LD_INT 100
1752: PPUSH
1753: CALL 21839 0 5
// belkovTank := CreateVehicle ;
1757: LD_ADDR_VAR 0 3
1761: PUSH
1762: CALL_OW 45
1766: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1767: LD_VAR 0 3
1771: PPUSH
1772: LD_INT 5
1774: PPUSH
1775: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1779: LD_VAR 0 3
1783: PPUSH
1784: LD_INT 127
1786: PPUSH
1787: LD_INT 118
1789: PPUSH
1790: LD_INT 0
1792: PPUSH
1793: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1797: LD_EXP 36
1801: PPUSH
1802: LD_VAR 0 3
1806: PPUSH
1807: CALL_OW 120
// end else
1811: GO 1827
// begin belkovTank := belkovTank [ 1 ] ;
1813: LD_ADDR_VAR 0 3
1817: PUSH
1818: LD_VAR 0 3
1822: PUSH
1823: LD_INT 1
1825: ARRAY
1826: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1827: LD_VAR 0 3
1831: PPUSH
1832: LD_INT 71
1834: PPUSH
1835: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1839: LD_VAR 0 3
1843: PPUSH
1844: LD_INT 71
1846: PPUSH
1847: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1851: LD_VAR 0 3
1855: PPUSH
1856: CALL_OW 256
1860: PUSH
1861: LD_INT 1000
1863: LESS
1864: IFFALSE 1977
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1866: LD_ADDR_VAR 0 4
1870: PUSH
1871: LD_EXP 43
1875: PPUSH
1876: LD_INT 25
1878: PUSH
1879: LD_INT 3
1881: PUSH
1882: EMPTY
1883: LIST
1884: LIST
1885: PPUSH
1886: CALL_OW 72
1890: ST_TO_ADDR
// if not mech then
1891: LD_VAR 0 4
1895: NOT
1896: IFFALSE 1912
// SetLives ( belkovTank , 1000 ) else
1898: LD_VAR 0 3
1902: PPUSH
1903: LD_INT 1000
1905: PPUSH
1906: CALL_OW 234
1910: GO 1977
// begin ComExit ( mech ) ;
1912: LD_VAR 0 4
1916: PPUSH
1917: CALL 55088 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1921: LD_VAR 0 4
1925: PPUSH
1926: LD_VAR 0 3
1930: PPUSH
1931: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1935: LD_VAR 0 4
1939: PPUSH
1940: LD_INT 22
1942: PUSH
1943: LD_INT 6
1945: PUSH
1946: EMPTY
1947: LIST
1948: LIST
1949: PUSH
1950: LD_INT 30
1952: PUSH
1953: LD_INT 2
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: PPUSH
1964: CALL_OW 69
1968: PUSH
1969: LD_INT 1
1971: ARRAY
1972: PPUSH
1973: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1977: LD_INT 70
1979: PPUSH
1980: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1984: LD_VAR 0 3
1988: PPUSH
1989: CALL_OW 256
1993: PUSH
1994: LD_INT 1000
1996: EQUAL
1997: IFFALSE 1977
// if mech then
1999: LD_VAR 0 4
2003: IFFALSE 2047
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2005: LD_VAR 0 4
2009: PPUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 6
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 30
2022: PUSH
2023: LD_INT 2
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PUSH
2039: LD_INT 1
2041: ARRAY
2042: PPUSH
2043: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2047: LD_EXP 36
2051: PPUSH
2052: LD_INT 107
2054: PPUSH
2055: LD_INT 104
2057: PPUSH
2058: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2062: LD_EXP 36
2066: PPUSH
2067: LD_INT 95
2069: PPUSH
2070: LD_INT 101
2072: PPUSH
2073: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2077: LD_EXP 36
2081: PPUSH
2082: LD_INT 89
2084: PPUSH
2085: LD_INT 100
2087: PPUSH
2088: CALL_OW 171
// wait ( 0 0$2 ) ;
2092: LD_INT 70
2094: PPUSH
2095: CALL_OW 67
// for i in belkovTeam do
2099: LD_ADDR_VAR 0 2
2103: PUSH
2104: LD_EXP 45
2108: PUSH
2109: FOR_IN
2110: IFFALSE 2138
// begin ComExit ( i ) ;
2112: LD_VAR 0 2
2116: PPUSH
2117: CALL 55088 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2121: LD_VAR 0 2
2125: PPUSH
2126: LD_INT 89
2128: PPUSH
2129: LD_INT 100
2131: PPUSH
2132: CALL_OW 171
// end ;
2136: GO 2109
2138: POP
2139: POP
// tmp := Belkov union belkovTeam ;
2140: LD_ADDR_VAR 0 5
2144: PUSH
2145: LD_EXP 36
2149: PUSH
2150: LD_EXP 45
2154: UNION
2155: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2156: LD_INT 35
2158: PPUSH
2159: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2163: LD_VAR 0 5
2167: PPUSH
2168: LD_INT 60
2170: PUSH
2171: EMPTY
2172: LIST
2173: PPUSH
2174: CALL_OW 72
2178: NOT
2179: IFFALSE 2156
// ComMoveXY ( tmp , 71 , 65 ) ;
2181: LD_VAR 0 5
2185: PPUSH
2186: LD_INT 71
2188: PPUSH
2189: LD_INT 65
2191: PPUSH
2192: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2196: LD_VAR 0 5
2200: PPUSH
2201: LD_INT 61
2203: PPUSH
2204: LD_INT 37
2206: PPUSH
2207: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2211: LD_VAR 0 5
2215: PPUSH
2216: LD_INT 67
2218: PPUSH
2219: LD_INT 17
2221: PPUSH
2222: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2226: LD_VAR 0 5
2230: PPUSH
2231: LD_INT 70
2233: PPUSH
2234: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2238: LD_EXP 36
2242: PPUSH
2243: LD_INT 63
2245: PPUSH
2246: LD_INT 8
2248: PPUSH
2249: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2253: LD_EXP 36
2257: PPUSH
2258: LD_INT 105
2260: PPUSH
2261: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2265: LD_EXP 36
2269: PPUSH
2270: LD_INT 86
2272: PPUSH
2273: LD_INT 37
2275: PPUSH
2276: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2280: LD_EXP 36
2284: PPUSH
2285: LD_INT 105
2287: PPUSH
2288: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2292: LD_VAR 0 5
2296: PPUSH
2297: LD_INT 88
2299: PPUSH
2300: LD_INT 29
2302: PPUSH
2303: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2307: LD_INT 35
2309: PPUSH
2310: CALL_OW 67
// for i in tmp do
2314: LD_ADDR_VAR 0 2
2318: PUSH
2319: LD_VAR 0 5
2323: PUSH
2324: FOR_IN
2325: IFFALSE 2356
// if not HasTask ( i ) then
2327: LD_VAR 0 2
2331: PPUSH
2332: CALL_OW 314
2336: NOT
2337: IFFALSE 2354
// AddComMoveXY ( tmp , 88 , 29 ) ;
2339: LD_VAR 0 5
2343: PPUSH
2344: LD_INT 88
2346: PPUSH
2347: LD_INT 29
2349: PPUSH
2350: CALL_OW 171
2354: GO 2324
2356: POP
2357: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2358: LD_VAR 0 5
2362: PPUSH
2363: LD_INT 95
2365: PUSH
2366: LD_INT 6
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PPUSH
2373: CALL_OW 72
2377: IFFALSE 2471
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_VAR 0 5
2388: PPUSH
2389: LD_INT 95
2391: PUSH
2392: LD_INT 6
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PUSH
2404: FOR_IN
2405: IFFALSE 2469
// begin if i = Belkov then
2407: LD_VAR 0 2
2411: PUSH
2412: LD_EXP 36
2416: EQUAL
2417: IFFALSE 2458
// begin belkovTank := IsInUnit ( Belkov ) ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_EXP 36
2428: PPUSH
2429: CALL_OW 310
2433: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2434: LD_ADDR_VAR 0 6
2438: PUSH
2439: LD_VAR 0 3
2443: PPUSH
2444: CALL_OW 261
2448: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2449: LD_VAR 0 3
2453: PPUSH
2454: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: CALL_OW 64
// end ;
2467: GO 2404
2469: POP
2470: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2471: LD_VAR 0 5
2475: PPUSH
2476: LD_INT 52
2478: PUSH
2479: EMPTY
2480: LIST
2481: PPUSH
2482: CALL_OW 72
2486: NOT
2487: IFFALSE 2307
// wait ( 1 1$20 ) ;
2489: LD_INT 2800
2491: PPUSH
2492: CALL_OW 67
// if fuel < 50 then
2496: LD_VAR 0 6
2500: PUSH
2501: LD_INT 50
2503: LESS
2504: IFFALSE 2514
// fuel := 50 ;
2506: LD_ADDR_VAR 0 6
2510: PUSH
2511: LD_INT 50
2513: ST_TO_ADDR
// uc_side := 6 ;
2514: LD_ADDR_OWVAR 20
2518: PUSH
2519: LD_INT 6
2521: ST_TO_ADDR
// uc_nation := 3 ;
2522: LD_ADDR_OWVAR 21
2526: PUSH
2527: LD_INT 3
2529: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2530: LD_INT 21
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: LD_INT 42
2541: PPUSH
2542: LD_VAR 0 6
2546: PUSH
2547: LD_INT 5
2549: MINUS
2550: PPUSH
2551: CALL 21839 0 5
// belkovTank := CreateVehicle ;
2555: LD_ADDR_VAR 0 3
2559: PUSH
2560: CALL_OW 45
2564: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2565: LD_VAR 0 3
2569: PPUSH
2570: LD_INT 2
2572: PPUSH
2573: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2577: LD_VAR 0 3
2581: PPUSH
2582: LD_INT 60
2584: PPUSH
2585: LD_INT 3
2587: PPUSH
2588: LD_INT 0
2590: PPUSH
2591: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2595: LD_EXP 36
2599: PPUSH
2600: LD_VAR 0 3
2604: PPUSH
2605: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2609: LD_EXP 36
2613: PPUSH
2614: LD_INT 72
2616: PPUSH
2617: LD_INT 26
2619: PPUSH
2620: CALL_OW 111
// wait ( 0 0$2 ) ;
2624: LD_INT 70
2626: PPUSH
2627: CALL_OW 67
// for i in belkovTeam do
2631: LD_ADDR_VAR 0 2
2635: PUSH
2636: LD_EXP 45
2640: PUSH
2641: FOR_IN
2642: IFFALSE 2686
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2644: LD_VAR 0 2
2648: PPUSH
2649: LD_INT 60
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 0
2657: PPUSH
2658: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2662: LD_VAR 0 2
2666: PPUSH
2667: LD_INT 65
2669: PPUSH
2670: LD_INT 18
2672: PPUSH
2673: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2677: LD_INT 28
2679: PPUSH
2680: CALL_OW 67
// end ;
2684: GO 2641
2686: POP
2687: POP
// repeat wait ( 0 0$1 ) ;
2688: LD_INT 35
2690: PPUSH
2691: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2695: LD_EXP 14
2699: PUSH
2700: LD_EXP 45
2704: PPUSH
2705: LD_INT 60
2707: PUSH
2708: EMPTY
2709: LIST
2710: PPUSH
2711: CALL_OW 72
2715: NOT
2716: AND
2717: IFFALSE 2688
// americanTrap := true ;
2719: LD_ADDR_EXP 17
2723: PUSH
2724: LD_INT 1
2726: ST_TO_ADDR
// end ;
2727: LD_VAR 0 1
2731: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2732: LD_EXP 4
2736: PUSH
2737: LD_EXP 40
2741: PPUSH
2742: CALL_OW 302
2746: AND
2747: IFFALSE 3067
2749: GO 2751
2751: DISABLE
2752: LD_INT 0
2754: PPUSH
2755: PPUSH
2756: PPUSH
2757: PPUSH
// begin enable ;
2758: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2759: LD_EXP 8
2763: PUSH
2764: LD_INT 0
2766: GREATER
2767: PUSH
2768: LD_EXP 40
2772: PPUSH
2773: CALL_OW 314
2777: NOT
2778: AND
2779: IFFALSE 2948
// begin dir := rand ( 0 , 5 ) ;
2781: LD_ADDR_VAR 0 4
2785: PUSH
2786: LD_INT 0
2788: PPUSH
2789: LD_INT 5
2791: PPUSH
2792: CALL_OW 12
2796: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2797: LD_ADDR_VAR 0 1
2801: PUSH
2802: LD_EXP 40
2806: PPUSH
2807: CALL_OW 250
2811: PPUSH
2812: LD_VAR 0 4
2816: PPUSH
2817: LD_INT 5
2819: PPUSH
2820: CALL_OW 272
2824: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2825: LD_ADDR_VAR 0 2
2829: PUSH
2830: LD_EXP 40
2834: PPUSH
2835: CALL_OW 251
2839: PPUSH
2840: LD_VAR 0 4
2844: PPUSH
2845: LD_INT 5
2847: PPUSH
2848: CALL_OW 273
2852: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2853: LD_VAR 0 1
2857: PPUSH
2858: LD_VAR 0 2
2862: PPUSH
2863: CALL_OW 488
2867: PUSH
2868: LD_INT 106
2870: PPUSH
2871: LD_VAR 0 1
2875: PPUSH
2876: LD_VAR 0 2
2880: PPUSH
2881: CALL_OW 297
2885: PUSH
2886: LD_INT 26
2888: LESS
2889: AND
2890: IFFALSE 2913
// AddComMoveXY ( Platonov , x , y ) else
2892: LD_EXP 40
2896: PPUSH
2897: LD_VAR 0 1
2901: PPUSH
2902: LD_VAR 0 2
2906: PPUSH
2907: CALL_OW 171
2911: GO 2928
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2913: LD_EXP 40
2917: PPUSH
2918: LD_INT 64
2920: PPUSH
2921: LD_INT 96
2923: PPUSH
2924: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2928: LD_EXP 40
2932: PPUSH
2933: LD_INT 105
2935: PPUSH
2936: LD_INT 315
2938: PPUSH
2939: CALL_OW 12
2943: PPUSH
2944: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2948: LD_EXP 8
2952: PUSH
2953: LD_INT 0
2955: LESSEQUAL
2956: IFFALSE 3002
// begin if not IsAt ( Platonov , 64 , 96 ) then
2958: LD_EXP 40
2962: PPUSH
2963: LD_INT 64
2965: PPUSH
2966: LD_INT 96
2968: PPUSH
2969: CALL_OW 307
2973: NOT
2974: IFFALSE 3000
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2976: LD_EXP 40
2980: PPUSH
2981: LD_INT 64
2983: PPUSH
2984: LD_INT 96
2986: PPUSH
2987: CALL_OW 111
// AddComHold ( Platonov ) ;
2991: LD_EXP 40
2995: PPUSH
2996: CALL_OW 200
// end ; end else
3000: GO 3067
// if tick mod 0 0$75 = 0 0$00 then
3002: LD_OWVAR 1
3006: PUSH
3007: LD_INT 2625
3009: MOD
3010: PUSH
3011: LD_INT 0
3013: EQUAL
3014: IFFALSE 3067
// begin amount := rand ( 2 , 5 ) ;
3016: LD_ADDR_VAR 0 3
3020: PUSH
3021: LD_INT 2
3023: PPUSH
3024: LD_INT 5
3026: PPUSH
3027: CALL_OW 12
3031: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3032: LD_ADDR_EXP 8
3036: PUSH
3037: LD_EXP 8
3041: PUSH
3042: LD_VAR 0 3
3046: PUSH
3047: LD_INT 10
3049: MUL
3050: MINUS
3051: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3052: LD_VAR 0 3
3056: PPUSH
3057: LD_INT 5
3059: PPUSH
3060: LD_INT 1
3062: PPUSH
3063: CALL_OW 55
// end ; end ;
3067: PPOPN 4
3069: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3070: LD_INT 106
3072: PPUSH
3073: CALL_OW 274
3077: PPUSH
3078: LD_INT 2
3080: PPUSH
3081: CALL_OW 275
3085: PUSH
3086: LD_INT 30
3088: LESS
3089: IFFALSE 3299
3091: GO 3093
3093: DISABLE
3094: LD_INT 0
3096: PPUSH
3097: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3098: LD_ADDR_VAR 0 2
3102: PUSH
3103: LD_EXP 43
3107: PPUSH
3108: LD_INT 3
3110: PUSH
3111: LD_INT 60
3113: PUSH
3114: EMPTY
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PUSH
3121: LD_INT 25
3123: PUSH
3124: LD_INT 2
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: PPUSH
3135: CALL_OW 72
3139: ST_TO_ADDR
// if not eng then
3140: LD_VAR 0 2
3144: NOT
3145: IFFALSE 3149
// exit ;
3147: GO 3299
// ComExit ( eng ) ;
3149: LD_VAR 0 2
3153: PPUSH
3154: CALL 55088 0 1
// i := 5 ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 5
3165: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3166: LD_INT 35
3168: PPUSH
3169: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3173: LD_VAR 0 2
3177: PPUSH
3178: LD_INT 60
3180: PUSH
3181: EMPTY
3182: LIST
3183: PPUSH
3184: CALL_OW 72
3188: NOT
3189: PUSH
3190: LD_VAR 0 2
3194: AND
3195: IFFALSE 3265
// begin ComTransport ( eng , kirov , mat_oil ) ;
3197: LD_VAR 0 2
3201: PPUSH
3202: LD_INT 71
3204: PPUSH
3205: LD_INT 2
3207: PPUSH
3208: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3212: LD_VAR 0 2
3216: PPUSH
3217: LD_INT 67
3219: PPUSH
3220: LD_INT 99
3222: PPUSH
3223: CALL_OW 171
// AddComUnload ( eng ) ;
3227: LD_VAR 0 2
3231: PPUSH
3232: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3236: LD_VAR 0 2
3240: PPUSH
3241: LD_INT 107
3243: PPUSH
3244: LD_INT 104
3246: PPUSH
3247: CALL_OW 171
// i := i - 1 ;
3251: LD_ADDR_VAR 0 1
3255: PUSH
3256: LD_VAR 0 1
3260: PUSH
3261: LD_INT 1
3263: MINUS
3264: ST_TO_ADDR
// end ; until i = 0 ;
3265: LD_VAR 0 1
3269: PUSH
3270: LD_INT 0
3272: EQUAL
3273: IFFALSE 3166
// AddComMoveUnit ( eng , kirov ) ;
3275: LD_VAR 0 2
3279: PPUSH
3280: LD_INT 71
3282: PPUSH
3283: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3287: LD_VAR 0 2
3291: PPUSH
3292: LD_INT 71
3294: PPUSH
3295: CALL_OW 180
// end ;
3299: PPOPN 2
3301: END
// export function SendReinforcements ; var i ; begin
3302: LD_INT 0
3304: PPUSH
3305: PPUSH
// reinforcementsGained := true ;
3306: LD_ADDR_EXP 25
3310: PUSH
3311: LD_INT 1
3313: ST_TO_ADDR
// for i := 1 to 2 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 2
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3410
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3330: LD_EXP 44
3334: PUSH
3335: LD_VAR 0 2
3339: ARRAY
3340: PPUSH
3341: CALL 55088 0 1
3345: IFFALSE 3354
// wait ( 0 0$0.3 ) ;
3347: LD_INT 10
3349: PPUSH
3350: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3354: LD_EXP 44
3358: PUSH
3359: LD_VAR 0 2
3363: ARRAY
3364: PPUSH
3365: LD_INT 75
3367: PPUSH
3368: LD_INT 84
3370: PPUSH
3371: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3375: LD_EXP 44
3379: PUSH
3380: LD_VAR 0 2
3384: ARRAY
3385: PPUSH
3386: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3390: LD_EXP 44
3394: PUSH
3395: LD_VAR 0 2
3399: ARRAY
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: CALL_OW 235
// end ;
3408: GO 3327
3410: POP
3411: POP
// end ;
3412: LD_VAR 0 1
3416: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3417: LD_EXP 21
3421: PUSH
3422: LD_EXP 18
3426: AND
3427: PUSH
3428: LD_EXP 43
3432: PPUSH
3433: LD_INT 25
3435: PUSH
3436: LD_INT 3
3438: PUSH
3439: EMPTY
3440: LIST
3441: LIST
3442: PPUSH
3443: CALL_OW 72
3447: AND
3448: IFFALSE 3605
3450: GO 3452
3452: DISABLE
3453: LD_INT 0
3455: PPUSH
3456: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3457: LD_ADDR_VAR 0 1
3461: PUSH
3462: LD_EXP 43
3466: PPUSH
3467: LD_INT 25
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: EMPTY
3474: LIST
3475: LIST
3476: PPUSH
3477: CALL_OW 72
3481: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3482: LD_ADDR_VAR 0 2
3486: PUSH
3487: LD_INT 22
3489: PUSH
3490: LD_INT 6
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 2
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: PPUSH
3511: CALL_OW 69
3515: ST_TO_ADDR
// if not fac then
3516: LD_VAR 0 2
3520: NOT
3521: IFFALSE 3525
// exit ;
3523: GO 3605
// fac := fac [ 1 ] ;
3525: LD_ADDR_VAR 0 2
3529: PUSH
3530: LD_VAR 0 2
3534: PUSH
3535: LD_INT 1
3537: ARRAY
3538: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3539: LD_VAR 0 2
3543: PPUSH
3544: CALL_OW 313
3548: PUSH
3549: LD_INT 0
3551: EQUAL
3552: IFFALSE 3584
// begin ComExit ( mech ) ;
3554: LD_VAR 0 1
3558: PPUSH
3559: CALL 55088 0 1
// wait ( 3 ) ;
3563: LD_INT 3
3565: PPUSH
3566: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3570: LD_VAR 0 1
3574: PPUSH
3575: LD_VAR 0 2
3579: PPUSH
3580: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3584: LD_VAR 0 2
3588: PPUSH
3589: LD_INT 21
3591: PPUSH
3592: LD_INT 1
3594: PPUSH
3595: LD_INT 1
3597: PPUSH
3598: LD_INT 42
3600: PPUSH
3601: CALL_OW 125
// end ;
3605: PPOPN 2
3607: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3608: LD_INT 0
3610: PPUSH
3611: PPUSH
3612: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3613: LD_VAR 0 1
3617: PPUSH
3618: LD_INT 90
3620: PPUSH
3621: LD_INT 100
3623: PPUSH
3624: CALL_OW 111
// wait ( 0 0$10 ) ;
3628: LD_INT 350
3630: PPUSH
3631: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3635: LD_VAR 0 1
3639: PPUSH
3640: LD_INT 0
3642: PPUSH
3643: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3647: LD_INT 35
3649: PPUSH
3650: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3654: LD_ADDR_VAR 0 4
3658: PUSH
3659: LD_VAR 0 1
3663: PPUSH
3664: CALL_OW 110
3668: ST_TO_ADDR
// if tag = 0 then
3669: LD_VAR 0 4
3673: PUSH
3674: LD_INT 0
3676: EQUAL
3677: IFFALSE 3748
// begin if not HasTask ( vehicle ) then
3679: LD_VAR 0 1
3683: PPUSH
3684: CALL_OW 314
3688: NOT
3689: IFFALSE 3706
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3691: LD_VAR 0 1
3695: PPUSH
3696: LD_INT 83
3698: PPUSH
3699: LD_INT 68
3701: PPUSH
3702: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3706: LD_VAR 0 1
3710: PPUSH
3711: CALL_OW 256
3715: PUSH
3716: LD_INT 750
3718: LESS
3719: IFFALSE 3748
// begin SetTag ( vehicle , 1 ) ;
3721: LD_VAR 0 1
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3733: LD_VAR 0 1
3737: PPUSH
3738: LD_INT 93
3740: PPUSH
3741: LD_INT 102
3743: PPUSH
3744: CALL_OW 111
// end ; end ; if tag = 1 then
3748: LD_VAR 0 4
3752: PUSH
3753: LD_INT 1
3755: EQUAL
3756: IFFALSE 3846
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3758: LD_VAR 0 1
3762: PPUSH
3763: LD_INT 113
3765: PPUSH
3766: LD_INT 106
3768: PPUSH
3769: CALL_OW 307
3773: NOT
3774: PUSH
3775: LD_VAR 0 1
3779: PPUSH
3780: CALL_OW 314
3784: NOT
3785: AND
3786: IFFALSE 3803
// ComMoveXY ( vehicle , 113 , 106 ) ;
3788: LD_VAR 0 1
3792: PPUSH
3793: LD_INT 113
3795: PPUSH
3796: LD_INT 106
3798: PPUSH
3799: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3803: LD_VAR 0 1
3807: PPUSH
3808: LD_INT 113
3810: PPUSH
3811: LD_INT 106
3813: PPUSH
3814: CALL_OW 307
3818: IFFALSE 3846
// begin SetTag ( vehicle , 2 ) ;
3820: LD_VAR 0 1
3824: PPUSH
3825: LD_INT 2
3827: PPUSH
3828: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3832: LD_VAR 0 1
3836: PPUSH
3837: CALL_OW 311
3841: PPUSH
3842: CALL 56390 0 1
// end ; end ; if tag = 2 then
3846: LD_VAR 0 4
3850: PUSH
3851: LD_INT 2
3853: EQUAL
3854: IFFALSE 3918
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 256
3865: PUSH
3866: LD_INT 1000
3868: EQUAL
3869: PUSH
3870: LD_VAR 0 1
3874: PPUSH
3875: CALL_OW 311
3879: AND
3880: IFFALSE 3918
// begin ComMoveUnit ( vehicle , kirov ) ;
3882: LD_VAR 0 1
3886: PPUSH
3887: LD_INT 71
3889: PPUSH
3890: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3894: LD_VAR 0 1
3898: PPUSH
3899: LD_INT 71
3901: PPUSH
3902: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3906: LD_VAR 0 1
3910: PPUSH
3911: LD_INT 0
3913: PPUSH
3914: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3918: LD_VAR 0 1
3922: PPUSH
3923: CALL_OW 301
3927: PUSH
3928: LD_EXP 23
3932: OR
3933: IFFALSE 3647
// if eastOutpostDestroyed then
3935: LD_EXP 23
3939: IFFALSE 3956
// ComMoveXY ( vehicle , 111 , 105 ) ;
3941: LD_VAR 0 1
3945: PPUSH
3946: LD_INT 111
3948: PPUSH
3949: LD_INT 105
3951: PPUSH
3952: CALL_OW 111
// end ; end_of_file
3956: LD_VAR 0 2
3960: RET
// export usWestForces , usEastForces , usTrapForces , Dickens ; export function PrepareAmerican ; var i , un , tmp ; begin
3961: LD_INT 0
3963: PPUSH
3964: PPUSH
3965: PPUSH
3966: PPUSH
// uc_side := 1 ;
3967: LD_ADDR_OWVAR 20
3971: PUSH
3972: LD_INT 1
3974: ST_TO_ADDR
// uc_nation := 1 ;
3975: LD_ADDR_OWVAR 21
3979: PUSH
3980: LD_INT 1
3982: ST_TO_ADDR
// usWestForces := [ ] ;
3983: LD_ADDR_EXP 46
3987: PUSH
3988: EMPTY
3989: ST_TO_ADDR
// usEastForces := [ ] ;
3990: LD_ADDR_EXP 47
3994: PUSH
3995: EMPTY
3996: ST_TO_ADDR
// bc_type := b_depot ;
3997: LD_ADDR_OWVAR 42
4001: PUSH
4002: LD_INT 0
4004: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4005: LD_ADDR_OWVAR 43
4009: PUSH
4010: LD_OWVAR 67
4014: PUSH
4015: LD_INT 1
4017: MINUS
4018: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4019: LD_INT 48
4021: PPUSH
4022: LD_INT 54
4024: PPUSH
4025: LD_INT 2
4027: PPUSH
4028: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: LD_INT 55
4039: PUSH
4040: LD_INT 55
4042: PUSH
4043: LD_INT 4
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 59
4053: PUSH
4054: LD_INT 61
4056: PUSH
4057: LD_INT 4
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: ST_TO_ADDR
// if Difficulty > 1 then
4069: LD_OWVAR 67
4073: PUSH
4074: LD_INT 1
4076: GREATER
4077: IFFALSE 4113
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4079: LD_ADDR_VAR 0 4
4083: PUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_VAR 0 4
4093: PPUSH
4094: LD_INT 46
4096: PUSH
4097: LD_INT 64
4099: PUSH
4100: LD_INT 0
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: PPUSH
4108: CALL_OW 2
4112: ST_TO_ADDR
// if Difficulty > 2 then
4113: LD_OWVAR 67
4117: PUSH
4118: LD_INT 2
4120: GREATER
4121: IFFALSE 4157
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4123: LD_ADDR_VAR 0 4
4127: PUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_VAR 0 4
4137: PPUSH
4138: LD_INT 36
4140: PUSH
4141: LD_INT 48
4143: PUSH
4144: LD_INT 3
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 2
4156: ST_TO_ADDR
// bc_type := b_breastwork ;
4157: LD_ADDR_OWVAR 42
4161: PUSH
4162: LD_INT 31
4164: ST_TO_ADDR
// InitHC_All ( ) ;
4165: CALL_OW 584
// for i in tmp do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 4
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4324
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4182: LD_VAR 0 2
4186: PUSH
4187: LD_INT 1
4189: ARRAY
4190: PPUSH
4191: LD_VAR 0 2
4195: PUSH
4196: LD_INT 2
4198: ARRAY
4199: PPUSH
4200: LD_VAR 0 2
4204: PUSH
4205: LD_INT 3
4207: ARRAY
4208: PPUSH
4209: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_OWVAR 67
4220: PPUSH
4221: CALL_OW 381
// un := CreateHuman ;
4225: LD_ADDR_VAR 0 3
4229: PUSH
4230: CALL_OW 44
4234: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4235: LD_ADDR_EXP 46
4239: PUSH
4240: LD_EXP 46
4244: PPUSH
4245: LD_EXP 46
4249: PUSH
4250: LD_INT 1
4252: PLUS
4253: PPUSH
4254: LD_VAR 0 3
4258: PPUSH
4259: CALL_OW 1
4263: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4264: LD_VAR 0 3
4268: PPUSH
4269: LD_VAR 0 2
4273: PUSH
4274: LD_INT 3
4276: ARRAY
4277: PUSH
4278: LD_INT 3
4280: PLUS
4281: PUSH
4282: LD_INT 6
4284: MOD
4285: PPUSH
4286: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4290: LD_VAR 0 3
4294: PPUSH
4295: LD_VAR 0 2
4299: PUSH
4300: LD_INT 1
4302: ARRAY
4303: PPUSH
4304: LD_VAR 0 2
4308: PUSH
4309: LD_INT 2
4311: ARRAY
4312: PPUSH
4313: CALL_OW 428
4317: PPUSH
4318: CALL_OW 52
// end ;
4322: GO 4179
4324: POP
4325: POP
// for i := 1 to 2 do
4326: LD_ADDR_VAR 0 2
4330: PUSH
4331: DOUBLE
4332: LD_INT 1
4334: DEC
4335: ST_TO_ADDR
4336: LD_INT 2
4338: PUSH
4339: FOR_TO
4340: IFFALSE 4416
// begin PrepareEngineer ( false , Difficulty ) ;
4342: LD_INT 0
4344: PPUSH
4345: LD_OWVAR 67
4349: PPUSH
4350: CALL_OW 382
// un := CreateHuman ;
4354: LD_ADDR_VAR 0 3
4358: PUSH
4359: CALL_OW 44
4363: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4364: LD_ADDR_EXP 46
4368: PUSH
4369: LD_EXP 46
4373: PPUSH
4374: LD_EXP 46
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: LD_VAR 0 3
4387: PPUSH
4388: CALL_OW 1
4392: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4393: LD_VAR 0 3
4397: PPUSH
4398: LD_INT 54
4400: PPUSH
4401: LD_INT 58
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 50
// end ;
4414: GO 4339
4416: POP
4417: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4418: LD_ADDR_VAR 0 4
4422: PUSH
4423: LD_INT 87
4425: PUSH
4426: LD_INT 62
4428: PUSH
4429: LD_INT 1
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: PUSH
4437: LD_INT 89
4439: PUSH
4440: LD_INT 67
4442: PUSH
4443: LD_INT 1
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: ST_TO_ADDR
// if Difficulty > 2 then
4455: LD_OWVAR 67
4459: PUSH
4460: LD_INT 2
4462: GREATER
4463: IFFALSE 4499
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4465: LD_ADDR_VAR 0 4
4469: PUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_VAR 0 4
4479: PPUSH
4480: LD_INT 88
4482: PUSH
4483: LD_INT 53
4485: PUSH
4486: LD_INT 2
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: PPUSH
4494: CALL_OW 2
4498: ST_TO_ADDR
// bc_type := b_breastwork ;
4499: LD_ADDR_OWVAR 42
4503: PUSH
4504: LD_INT 31
4506: ST_TO_ADDR
// for i in tmp do
4507: LD_ADDR_VAR 0 2
4511: PUSH
4512: LD_VAR 0 4
4516: PUSH
4517: FOR_IN
4518: IFFALSE 4662
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4520: LD_VAR 0 2
4524: PUSH
4525: LD_INT 1
4527: ARRAY
4528: PPUSH
4529: LD_VAR 0 2
4533: PUSH
4534: LD_INT 2
4536: ARRAY
4537: PPUSH
4538: LD_VAR 0 2
4542: PUSH
4543: LD_INT 3
4545: ARRAY
4546: PPUSH
4547: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4551: LD_INT 0
4553: PPUSH
4554: LD_OWVAR 67
4558: PPUSH
4559: CALL_OW 381
// un := CreateHuman ;
4563: LD_ADDR_VAR 0 3
4567: PUSH
4568: CALL_OW 44
4572: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4573: LD_ADDR_EXP 47
4577: PUSH
4578: LD_EXP 47
4582: PPUSH
4583: LD_EXP 47
4587: PUSH
4588: LD_INT 1
4590: PLUS
4591: PPUSH
4592: LD_VAR 0 3
4596: PPUSH
4597: CALL_OW 1
4601: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_VAR 0 2
4611: PUSH
4612: LD_INT 3
4614: ARRAY
4615: PUSH
4616: LD_INT 3
4618: PLUS
4619: PUSH
4620: LD_INT 6
4622: MOD
4623: PPUSH
4624: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4628: LD_VAR 0 3
4632: PPUSH
4633: LD_VAR 0 2
4637: PUSH
4638: LD_INT 1
4640: ARRAY
4641: PPUSH
4642: LD_VAR 0 2
4646: PUSH
4647: LD_INT 2
4649: ARRAY
4650: PPUSH
4651: CALL_OW 428
4655: PPUSH
4656: CALL_OW 52
// end ;
4660: GO 4517
4662: POP
4663: POP
// for i := 1 to 2 do
4664: LD_ADDR_VAR 0 2
4668: PUSH
4669: DOUBLE
4670: LD_INT 1
4672: DEC
4673: ST_TO_ADDR
4674: LD_INT 2
4676: PUSH
4677: FOR_TO
4678: IFFALSE 4754
// begin PrepareEngineer ( false , Difficulty ) ;
4680: LD_INT 0
4682: PPUSH
4683: LD_OWVAR 67
4687: PPUSH
4688: CALL_OW 382
// un := CreateHuman ;
4692: LD_ADDR_VAR 0 3
4696: PUSH
4697: CALL_OW 44
4701: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4702: LD_ADDR_EXP 47
4706: PUSH
4707: LD_EXP 47
4711: PPUSH
4712: LD_EXP 47
4716: PUSH
4717: LD_INT 1
4719: PLUS
4720: PPUSH
4721: LD_VAR 0 3
4725: PPUSH
4726: CALL_OW 1
4730: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4731: LD_VAR 0 3
4735: PPUSH
4736: LD_INT 95
4738: PPUSH
4739: LD_INT 65
4741: PPUSH
4742: LD_INT 2
4744: PPUSH
4745: LD_INT 0
4747: PPUSH
4748: CALL_OW 50
// end ;
4752: GO 4677
4754: POP
4755: POP
// end ;
4756: LD_VAR 0 1
4760: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4761: LD_INT 0
4763: PPUSH
4764: PPUSH
4765: PPUSH
// usTrapForces := [ ] ;
4766: LD_ADDR_EXP 48
4770: PUSH
4771: EMPTY
4772: ST_TO_ADDR
// uc_side := 1 ;
4773: LD_ADDR_OWVAR 20
4777: PUSH
4778: LD_INT 1
4780: ST_TO_ADDR
// uc_nation := 1 ;
4781: LD_ADDR_OWVAR 21
4785: PUSH
4786: LD_INT 1
4788: ST_TO_ADDR
// InitHC_All ( ) ;
4789: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4793: LD_INT 1
4795: PPUSH
4796: LD_OWVAR 67
4800: PPUSH
4801: CALL_OW 381
// un := CreateHuman ;
4805: LD_ADDR_VAR 0 3
4809: PUSH
4810: CALL_OW 44
4814: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4815: LD_ADDR_EXP 48
4819: PUSH
4820: LD_EXP 48
4824: PPUSH
4825: LD_VAR 0 3
4829: PPUSH
4830: CALL 54690 0 2
4834: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4835: LD_ADDR_VAR 0 2
4839: PUSH
4840: DOUBLE
4841: LD_INT 1
4843: DEC
4844: ST_TO_ADDR
4845: LD_INT 5
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: LD_INT 7
4853: PUSH
4854: LD_INT 8
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: PUSH
4863: LD_OWVAR 67
4867: ARRAY
4868: PUSH
4869: FOR_TO
4870: IFFALSE 4916
// begin PrepareSoldier ( false , Difficulty ) ;
4872: LD_INT 0
4874: PPUSH
4875: LD_OWVAR 67
4879: PPUSH
4880: CALL_OW 381
// un := CreateHuman ;
4884: LD_ADDR_VAR 0 3
4888: PUSH
4889: CALL_OW 44
4893: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4894: LD_ADDR_EXP 48
4898: PUSH
4899: LD_EXP 48
4903: PPUSH
4904: LD_VAR 0 3
4908: PPUSH
4909: CALL 54690 0 2
4913: ST_TO_ADDR
// end ;
4914: GO 4869
4916: POP
4917: POP
// for i := 1 to 2 do
4918: LD_ADDR_VAR 0 2
4922: PUSH
4923: DOUBLE
4924: LD_INT 1
4926: DEC
4927: ST_TO_ADDR
4928: LD_INT 2
4930: PUSH
4931: FOR_TO
4932: IFFALSE 4978
// begin PrepareScientist ( false , Difficulty ) ;
4934: LD_INT 0
4936: PPUSH
4937: LD_OWVAR 67
4941: PPUSH
4942: CALL_OW 384
// un := CreateHuman ;
4946: LD_ADDR_VAR 0 3
4950: PUSH
4951: CALL_OW 44
4955: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4956: LD_ADDR_EXP 48
4960: PUSH
4961: LD_EXP 48
4965: PPUSH
4966: LD_VAR 0 3
4970: PPUSH
4971: CALL 54690 0 2
4975: ST_TO_ADDR
// end ;
4976: GO 4931
4978: POP
4979: POP
// end ;
4980: LD_VAR 0 1
4984: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4985: LD_EXP 46
4989: IFFALSE 5559
4991: GO 4993
4993: DISABLE
4994: LD_INT 0
4996: PPUSH
4997: PPUSH
4998: PPUSH
4999: PPUSH
5000: PPUSH
// begin enable ;
5001: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5002: LD_ADDR_VAR 0 3
5006: PUSH
5007: LD_INT 8
5009: PPUSH
5010: LD_INT 22
5012: PUSH
5013: LD_INT 1
5015: PUSH
5016: EMPTY
5017: LIST
5018: LIST
5019: PUSH
5020: LD_INT 21
5022: PUSH
5023: LD_INT 3
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PPUSH
5034: CALL_OW 70
5038: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5039: LD_ADDR_VAR 0 4
5043: PUSH
5044: LD_EXP 46
5048: PPUSH
5049: LD_INT 25
5051: PUSH
5052: LD_INT 2
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PPUSH
5059: CALL_OW 72
5063: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5064: LD_ADDR_VAR 0 5
5068: PUSH
5069: LD_EXP 46
5073: PPUSH
5074: LD_INT 25
5076: PUSH
5077: LD_INT 1
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PPUSH
5084: CALL_OW 72
5088: ST_TO_ADDR
// if eng then
5089: LD_VAR 0 4
5093: IFFALSE 5287
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5095: LD_VAR 0 3
5099: PPUSH
5100: LD_INT 3
5102: PUSH
5103: LD_INT 24
5105: PUSH
5106: LD_INT 1000
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 72
5121: IFFALSE 5233
// begin for i in eng do
5123: LD_ADDR_VAR 0 1
5127: PUSH
5128: LD_VAR 0 4
5132: PUSH
5133: FOR_IN
5134: IFFALSE 5229
// if IsInUnit ( i ) then
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 310
5145: IFFALSE 5158
// ComExit ( i ) else
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL 55088 0 1
5156: GO 5227
// if IsOk ( i ) and not HasTask ( i ) then
5158: LD_VAR 0 1
5162: PPUSH
5163: CALL_OW 302
5167: PUSH
5168: LD_VAR 0 1
5172: PPUSH
5173: CALL_OW 314
5177: NOT
5178: AND
5179: IFFALSE 5227
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5181: LD_VAR 0 1
5185: PPUSH
5186: LD_VAR 0 3
5190: PPUSH
5191: LD_INT 3
5193: PUSH
5194: LD_INT 24
5196: PUSH
5197: LD_INT 1000
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 72
5212: PPUSH
5213: LD_VAR 0 1
5217: PPUSH
5218: CALL_OW 74
5222: PPUSH
5223: CALL_OW 130
5227: GO 5133
5229: POP
5230: POP
// end else
5231: GO 5287
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5233: LD_VAR 0 3
5237: PPUSH
5238: LD_INT 30
5240: PUSH
5241: LD_INT 0
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PPUSH
5248: CALL_OW 72
5252: IFFALSE 5287
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5254: LD_VAR 0 4
5258: PPUSH
5259: LD_VAR 0 3
5263: PPUSH
5264: LD_INT 30
5266: PUSH
5267: LD_INT 0
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: CALL_OW 72
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5287: LD_VAR 0 5
5291: PPUSH
5292: LD_INT 50
5294: PUSH
5295: EMPTY
5296: LIST
5297: PPUSH
5298: CALL_OW 72
5302: PUSH
5303: LD_INT 18
5305: PPUSH
5306: LD_INT 81
5308: PUSH
5309: LD_INT 1
5311: PUSH
5312: EMPTY
5313: LIST
5314: LIST
5315: PPUSH
5316: CALL_OW 70
5320: PUSH
5321: LD_INT 1
5323: GREATER
5324: AND
5325: PUSH
5326: LD_INT 18
5328: PPUSH
5329: LD_INT 22
5331: PUSH
5332: LD_INT 1
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 70
5343: NOT
5344: AND
5345: IFFALSE 5399
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5347: LD_ADDR_VAR 0 1
5351: PUSH
5352: LD_VAR 0 5
5356: PPUSH
5357: LD_INT 50
5359: PUSH
5360: EMPTY
5361: LIST
5362: PPUSH
5363: CALL_OW 72
5367: PUSH
5368: FOR_IN
5369: IFFALSE 5397
// begin ComExit ( i ) ;
5371: LD_VAR 0 1
5375: PPUSH
5376: CALL 55088 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 46
5387: PPUSH
5388: LD_INT 62
5390: PPUSH
5391: CALL_OW 174
// end ;
5395: GO 5368
5397: POP
5398: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5399: LD_INT 18
5401: PPUSH
5402: LD_INT 81
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PPUSH
5412: CALL_OW 70
5416: NOT
5417: PUSH
5418: LD_VAR 0 5
5422: PPUSH
5423: LD_INT 3
5425: PUSH
5426: LD_INT 54
5428: PUSH
5429: EMPTY
5430: LIST
5431: PUSH
5432: EMPTY
5433: LIST
5434: LIST
5435: PUSH
5436: LD_INT 50
5438: PUSH
5439: EMPTY
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 72
5450: AND
5451: PUSH
5452: LD_VAR 0 3
5456: PPUSH
5457: LD_INT 30
5459: PUSH
5460: LD_INT 31
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PUSH
5467: LD_INT 58
5469: PUSH
5470: EMPTY
5471: LIST
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: PPUSH
5477: CALL_OW 72
5481: AND
5482: IFFALSE 5559
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5484: LD_VAR 0 5
5488: PPUSH
5489: LD_INT 3
5491: PUSH
5492: LD_INT 54
5494: PUSH
5495: EMPTY
5496: LIST
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: PUSH
5502: LD_INT 50
5504: PUSH
5505: EMPTY
5506: LIST
5507: PUSH
5508: EMPTY
5509: LIST
5510: LIST
5511: PPUSH
5512: CALL_OW 72
5516: PUSH
5517: LD_INT 1
5519: ARRAY
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 30
5528: PUSH
5529: LD_INT 31
5531: PUSH
5532: EMPTY
5533: LIST
5534: LIST
5535: PUSH
5536: LD_INT 58
5538: PUSH
5539: EMPTY
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PPUSH
5546: CALL_OW 72
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 120
// end ;
5559: PPOPN 5
5561: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5562: LD_EXP 47
5566: IFFALSE 5837
5568: GO 5570
5570: DISABLE
5571: LD_INT 0
5573: PPUSH
5574: PPUSH
5575: PPUSH
// begin enable ;
5576: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: LD_INT 15
5584: PPUSH
5585: LD_INT 22
5587: PUSH
5588: LD_INT 1
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: LD_INT 21
5597: PUSH
5598: LD_INT 3
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PPUSH
5609: CALL_OW 70
5613: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5614: LD_ADDR_VAR 0 3
5618: PUSH
5619: LD_EXP 47
5623: PPUSH
5624: LD_INT 25
5626: PUSH
5627: LD_INT 2
5629: PUSH
5630: EMPTY
5631: LIST
5632: LIST
5633: PPUSH
5634: CALL_OW 72
5638: ST_TO_ADDR
// if eng then
5639: LD_VAR 0 3
5643: IFFALSE 5837
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5645: LD_VAR 0 2
5649: PPUSH
5650: LD_INT 3
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 1000
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PPUSH
5667: CALL_OW 72
5671: IFFALSE 5783
// begin for i in eng do
5673: LD_ADDR_VAR 0 1
5677: PUSH
5678: LD_VAR 0 3
5682: PUSH
5683: FOR_IN
5684: IFFALSE 5779
// if IsInUnit ( i ) then
5686: LD_VAR 0 1
5690: PPUSH
5691: CALL_OW 310
5695: IFFALSE 5708
// ComExit ( i ) else
5697: LD_VAR 0 1
5701: PPUSH
5702: CALL 55088 0 1
5706: GO 5777
// if IsOk ( i ) and not HasTask ( i ) then
5708: LD_VAR 0 1
5712: PPUSH
5713: CALL_OW 302
5717: PUSH
5718: LD_VAR 0 1
5722: PPUSH
5723: CALL_OW 314
5727: NOT
5728: AND
5729: IFFALSE 5777
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_VAR 0 2
5740: PPUSH
5741: LD_INT 3
5743: PUSH
5744: LD_INT 24
5746: PUSH
5747: LD_INT 1000
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: PUSH
5754: EMPTY
5755: LIST
5756: LIST
5757: PPUSH
5758: CALL_OW 72
5762: PPUSH
5763: LD_VAR 0 1
5767: PPUSH
5768: CALL_OW 74
5772: PPUSH
5773: CALL_OW 130
5777: GO 5683
5779: POP
5780: POP
// end else
5781: GO 5837
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5783: LD_VAR 0 2
5787: PPUSH
5788: LD_INT 30
5790: PUSH
5791: LD_INT 0
5793: PUSH
5794: EMPTY
5795: LIST
5796: LIST
5797: PPUSH
5798: CALL_OW 72
5802: IFFALSE 5837
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5804: LD_VAR 0 3
5808: PPUSH
5809: LD_VAR 0 2
5813: PPUSH
5814: LD_INT 30
5816: PUSH
5817: LD_INT 0
5819: PUSH
5820: EMPTY
5821: LIST
5822: LIST
5823: PPUSH
5824: CALL_OW 72
5828: PUSH
5829: LD_INT 1
5831: ARRAY
5832: PPUSH
5833: CALL_OW 120
// end ; end_of_file
5837: PPOPN 3
5839: END
// export function Action ; var i , tmp ; begin
5840: LD_INT 0
5842: PPUSH
5843: PPUSH
5844: PPUSH
// InGameOn ;
5845: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5849: LD_INT 112
5851: PPUSH
5852: LD_INT 107
5854: PPUSH
5855: LD_INT 3
5857: PPUSH
5858: LD_INT 12
5860: NEG
5861: PPUSH
5862: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5866: LD_INT 121
5868: PPUSH
5869: LD_INT 113
5871: PPUSH
5872: CALL_OW 86
// tmp := PrepareBurlak ;
5876: LD_ADDR_VAR 0 3
5880: PUSH
5881: CALL 1244 0 0
5885: ST_TO_ADDR
// for i in tmp do
5886: LD_ADDR_VAR 0 2
5890: PUSH
5891: LD_VAR 0 3
5895: PUSH
5896: FOR_IN
5897: IFFALSE 5950
// begin SetDir ( i , 5 ) ;
5899: LD_VAR 0 2
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5911: LD_VAR 0 2
5915: PPUSH
5916: LD_INT 3
5918: PPUSH
5919: LD_INT 0
5921: PPUSH
5922: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_INT 121
5933: PPUSH
5934: LD_INT 111
5936: PPUSH
5937: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5941: LD_INT 28
5943: PPUSH
5944: CALL_OW 67
// end ;
5948: GO 5896
5950: POP
5951: POP
// CenterOnUnits ( Kurin ) ;
5952: LD_EXP 38
5956: PPUSH
5957: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5961: LD_EXP 34
5965: PPUSH
5966: LD_EXP 38
5970: PPUSH
5971: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5975: LD_INT 35
5977: PPUSH
5978: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5982: LD_EXP 34
5986: PPUSH
5987: LD_EXP 38
5991: PPUSH
5992: CALL_OW 296
5996: PUSH
5997: LD_INT 6
5999: LESS
6000: IFFALSE 5975
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
6002: LD_EXP 34
6006: PUSH
6007: LD_EXP 35
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PPUSH
6016: LD_EXP 38
6020: PPUSH
6021: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6025: LD_ADDR_VAR 0 2
6029: PUSH
6030: LD_VAR 0 3
6034: PUSH
6035: LD_EXP 34
6039: PUSH
6040: LD_EXP 35
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: DIFF
6049: PUSH
6050: FOR_IN
6051: IFFALSE 6117
// if GetClass ( i ) = class_soldier then
6053: LD_VAR 0 2
6057: PPUSH
6058: CALL_OW 257
6062: PUSH
6063: LD_INT 1
6065: EQUAL
6066: IFFALSE 6103
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 95
6075: PUSH
6076: LD_INT 209
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_VAR 0 2
6087: PUSH
6088: LD_INT 2
6090: MOD
6091: PUSH
6092: LD_INT 1
6094: PLUS
6095: ARRAY
6096: PPUSH
6097: CALL_OW 120
6101: GO 6115
// ComEnterUnit ( i , ru_lab ) ;
6103: LD_VAR 0 2
6107: PPUSH
6108: LD_INT 83
6110: PPUSH
6111: CALL_OW 120
6115: GO 6050
6117: POP
6118: POP
// Say ( Kurin , D1-Kur-1 ) ;
6119: LD_EXP 38
6123: PPUSH
6124: LD_STRING D1-Kur-1
6126: PPUSH
6127: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6131: LD_EXP 34
6135: PPUSH
6136: LD_STRING D1-Bur-1
6138: PPUSH
6139: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6143: LD_INT 10
6145: PPUSH
6146: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6150: LD_EXP 38
6154: PPUSH
6155: LD_STRING D1-Kur-2
6157: PPUSH
6158: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6162: LD_EXP 39
6166: PPUSH
6167: CALL 55088 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6171: LD_EXP 39
6175: PPUSH
6176: LD_INT 115
6178: PPUSH
6179: LD_INT 108
6181: PPUSH
6182: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6186: LD_EXP 39
6190: PPUSH
6191: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6195: LD_EXP 34
6199: PPUSH
6200: LD_STRING D1-Bur-2
6202: PPUSH
6203: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6207: LD_EXP 38
6211: PPUSH
6212: LD_STRING D1-Kur-3
6214: PPUSH
6215: CALL_OW 88
// if Gnyevko then
6219: LD_EXP 35
6223: IFFALSE 6237
// Say ( Kurin , D1-Kur-3a ) ;
6225: LD_EXP 38
6229: PPUSH
6230: LD_STRING D1-Kur-3a
6232: PPUSH
6233: CALL_OW 88
// InGameOff ;
6237: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6241: LD_STRING M1
6243: PPUSH
6244: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6248: LD_INT 112
6250: PPUSH
6251: LD_INT 107
6253: PPUSH
6254: LD_INT 3
6256: PPUSH
6257: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6261: LD_INT 66
6263: PPUSH
6264: LD_INT 99
6266: PPUSH
6267: LD_INT 3
6269: PPUSH
6270: LD_INT 7
6272: NEG
6273: PPUSH
6274: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6278: LD_INT 66
6280: PPUSH
6281: LD_INT 99
6283: PPUSH
6284: LD_INT 3
6286: PPUSH
6287: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6291: LD_EXP 39
6295: PPUSH
6296: LD_INT 3
6298: PPUSH
6299: CALL_OW 235
// if Gnyevko then
6303: LD_EXP 35
6307: IFFALSE 6321
// SetSide ( Gnyevko , 3 ) ;
6309: LD_EXP 35
6313: PPUSH
6314: LD_INT 3
6316: PPUSH
6317: CALL_OW 235
// SaveForQuickRestart ;
6321: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6325: LD_EXP 38
6329: PPUSH
6330: LD_INT 71
6332: PPUSH
6333: CALL_OW 120
// wait ( 0 0$2 ) ;
6337: LD_INT 70
6339: PPUSH
6340: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6344: LD_EXP 43
6348: PUSH
6349: LD_INT 2
6351: ARRAY
6352: PPUSH
6353: CALL 55088 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6357: LD_EXP 43
6361: PUSH
6362: LD_INT 2
6364: ARRAY
6365: PPUSH
6366: LD_INT 98
6368: PPUSH
6369: LD_INT 98
6371: PPUSH
6372: CALL_OW 428
6376: PPUSH
6377: CALL_OW 180
// wait ( 0 0$12 ) ;
6381: LD_INT 420
6383: PPUSH
6384: CALL_OW 67
// kurinDontWannaTalk := true ;
6388: LD_ADDR_EXP 5
6392: PUSH
6393: LD_INT 1
6395: ST_TO_ADDR
// end ;
6396: LD_VAR 0 1
6400: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6401: LD_EXP 5
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 3
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PUSH
6416: LD_INT 91
6418: PUSH
6419: LD_INT 71
6421: PUSH
6422: LD_INT 8
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: LIST
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PPUSH
6434: CALL_OW 69
6438: AND
6439: IFFALSE 6626
6441: GO 6443
6443: DISABLE
6444: LD_INT 0
6446: PPUSH
6447: PPUSH
// begin enable ;
6448: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_INT 22
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 91
6466: PUSH
6467: LD_INT 71
6469: PUSH
6470: LD_INT 14
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 69
6486: ST_TO_ADDR
// InGameOn ;
6487: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6491: LD_INT 116
6493: PPUSH
6494: LD_INT 107
6496: PPUSH
6497: LD_INT 3
6499: PPUSH
6500: LD_INT 3
6502: PPUSH
6503: CALL_OW 330
// ComExit ( Kurin ) ;
6507: LD_EXP 38
6511: PPUSH
6512: CALL 55088 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6516: LD_EXP 38
6520: PPUSH
6521: LD_VAR 0 2
6525: PUSH
6526: LD_INT 1
6528: ARRAY
6529: PPUSH
6530: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6534: LD_EXP 38
6538: PPUSH
6539: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6543: LD_VAR 0 2
6547: PPUSH
6548: LD_INT 87
6550: PPUSH
6551: LD_INT 99
6553: PPUSH
6554: CALL_OW 111
// if kirovHasTank then
6558: LD_EXP 6
6562: IFFALSE 6578
// Say ( Kurin , D1a-Kur-1a ) else
6564: LD_EXP 38
6568: PPUSH
6569: LD_STRING D1a-Kur-1a
6571: PPUSH
6572: CALL_OW 88
6576: GO 6590
// Say ( Kurin , D1a-Kur-1 ) ;
6578: LD_EXP 38
6582: PPUSH
6583: LD_STRING D1a-Kur-1
6585: PPUSH
6586: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6590: LD_EXP 38
6594: PPUSH
6595: LD_INT 71
6597: PPUSH
6598: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6602: LD_INT 116
6604: PPUSH
6605: LD_INT 107
6607: PPUSH
6608: LD_INT 3
6610: PPUSH
6611: CALL_OW 331
// wait ( 0 0$3 ) ;
6615: LD_INT 105
6617: PPUSH
6618: CALL_OW 67
// InGameOff ;
6622: CALL_OW 9
// end ;
6626: PPOPN 2
6628: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6629: LD_INT 22
6631: PUSH
6632: LD_INT 3
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: PUSH
6639: LD_INT 95
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_EXP 7
6662: AND
6663: IFFALSE 7002
6665: GO 6667
6667: DISABLE
6668: LD_INT 0
6670: PPUSH
6671: PPUSH
6672: PPUSH
6673: PPUSH
6674: PPUSH
// begin enable ;
6675: ENABLE
// blockNorth := false ;
6676: LD_ADDR_EXP 7
6680: PUSH
6681: LD_INT 0
6683: ST_TO_ADDR
// InGameOn ;
6684: CALL_OW 8
// DialogueOn ;
6688: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6692: LD_ADDR_VAR 0 2
6696: PUSH
6697: LD_INT 22
6699: PUSH
6700: LD_INT 3
6702: PUSH
6703: EMPTY
6704: LIST
6705: LIST
6706: PUSH
6707: LD_INT 95
6709: PUSH
6710: LD_INT 4
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6726: LD_EXP 39
6730: PUSH
6731: LD_VAR 0 2
6735: IN
6736: PUSH
6737: LD_EXP 39
6741: PPUSH
6742: CALL_OW 302
6746: AND
6747: IFFALSE 6763
// Say ( Kovalyuk , D1b-Kov-1 ) else
6749: LD_EXP 39
6753: PPUSH
6754: LD_STRING D1b-Kov-1
6756: PPUSH
6757: CALL_OW 88
6761: GO 6798
// if Burlak in tmp and IsOk ( Burlak ) then
6763: LD_EXP 34
6767: PUSH
6768: LD_VAR 0 2
6772: IN
6773: PUSH
6774: LD_EXP 34
6778: PPUSH
6779: CALL_OW 302
6783: AND
6784: IFFALSE 6798
// Say ( Burlak , D1b-Bur-1 ) ;
6786: LD_EXP 34
6790: PPUSH
6791: LD_STRING D1b-Bur-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 21
6817: PUSH
6818: LD_INT 3
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PPUSH
6838: CALL_OW 141
// for i in tmp do
6842: LD_ADDR_VAR 0 1
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: FOR_IN
6853: IFFALSE 6981
// begin d := rand ( 2 , 3 ) ;
6855: LD_ADDR_VAR 0 5
6859: PUSH
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 3
6865: PPUSH
6866: CALL_OW 12
6870: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6871: LD_ADDR_VAR 0 3
6875: PUSH
6876: LD_VAR 0 1
6880: PPUSH
6881: CALL_OW 250
6885: PPUSH
6886: LD_VAR 0 5
6890: PPUSH
6891: LD_INT 6
6893: PPUSH
6894: CALL_OW 272
6898: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6899: LD_ADDR_VAR 0 4
6903: PUSH
6904: LD_VAR 0 1
6908: PPUSH
6909: CALL_OW 251
6913: PPUSH
6914: LD_VAR 0 5
6918: PPUSH
6919: LD_INT 6
6921: PPUSH
6922: CALL_OW 273
6926: ST_TO_ADDR
// if ValidHex ( x , y ) then
6927: LD_VAR 0 3
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL_OW 488
6941: IFFALSE 6964
// ComMoveXY ( i , x , y ) else
6943: LD_VAR 0 1
6947: PPUSH
6948: LD_VAR 0 3
6952: PPUSH
6953: LD_VAR 0 4
6957: PPUSH
6958: CALL_OW 111
6962: GO 6979
// ComMoveXY ( i , 79 , 85 ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_INT 79
6971: PPUSH
6972: LD_INT 85
6974: PPUSH
6975: CALL_OW 111
// end ;
6979: GO 6852
6981: POP
6982: POP
// wait ( 0 0$5 ) ;
6983: LD_INT 175
6985: PPUSH
6986: CALL_OW 67
// InGameOff ;
6990: CALL_OW 9
// blockNorth := true ;
6994: LD_ADDR_EXP 7
6998: PUSH
6999: LD_INT 1
7001: ST_TO_ADDR
// end ;
7002: PPOPN 5
7004: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7005: LD_EXP 44
7009: PPUSH
7010: LD_INT 101
7012: PUSH
7013: LD_INT 3
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PPUSH
7020: CALL_OW 72
7024: PUSH
7025: LD_EXP 4
7029: NOT
7030: AND
7031: IFFALSE 7433
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
7039: PPUSH
7040: PPUSH
7041: PPUSH
7042: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7043: LD_ADDR_VAR 0 5
7047: PUSH
7048: LD_EXP 44
7052: PPUSH
7053: LD_EXP 34
7057: PPUSH
7058: CALL_OW 74
7062: ST_TO_ADDR
// InGameOn ;
7063: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7067: LD_VAR 0 5
7071: PPUSH
7072: CALL_OW 250
7076: PPUSH
7077: LD_VAR 0 5
7081: PPUSH
7082: CALL_OW 251
7086: PPUSH
7087: LD_INT 3
7089: PPUSH
7090: LD_INT 6
7092: PPUSH
7093: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7097: LD_VAR 0 5
7101: PPUSH
7102: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7106: LD_VAR 0 5
7110: PPUSH
7111: LD_EXP 34
7115: PPUSH
7116: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7120: LD_VAR 0 5
7124: PPUSH
7125: LD_STRING D2-RSol1-1
7127: PPUSH
7128: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7132: LD_ADDR_VAR 0 3
7136: PUSH
7137: LD_VAR 0 5
7141: PPUSH
7142: CALL_OW 250
7146: PPUSH
7147: LD_VAR 0 5
7151: PPUSH
7152: CALL_OW 254
7156: PPUSH
7157: LD_INT 3
7159: PPUSH
7160: CALL_OW 272
7164: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7165: LD_ADDR_VAR 0 4
7169: PUSH
7170: LD_VAR 0 5
7174: PPUSH
7175: CALL_OW 251
7179: PPUSH
7180: LD_VAR 0 5
7184: PPUSH
7185: CALL_OW 254
7189: PPUSH
7190: LD_INT 3
7192: PPUSH
7193: CALL_OW 273
7197: ST_TO_ADDR
// if ValidHex ( x , y ) then
7198: LD_VAR 0 3
7202: PPUSH
7203: LD_VAR 0 4
7207: PPUSH
7208: CALL_OW 488
7212: IFFALSE 7244
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7214: LD_EXP 35
7218: PUSH
7219: LD_EXP 39
7223: PUSH
7224: EMPTY
7225: LIST
7226: LIST
7227: PPUSH
7228: LD_VAR 0 3
7232: PPUSH
7233: LD_VAR 0 4
7237: PPUSH
7238: CALL_OW 111
7242: GO 7267
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7244: LD_EXP 35
7248: PUSH
7249: LD_EXP 39
7253: PUSH
7254: EMPTY
7255: LIST
7256: LIST
7257: PPUSH
7258: LD_VAR 0 5
7262: PPUSH
7263: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7267: LD_EXP 34
7271: PPUSH
7272: LD_VAR 0 5
7276: PPUSH
7277: CALL_OW 112
// p := 0 ;
7281: LD_ADDR_VAR 0 2
7285: PUSH
7286: LD_INT 0
7288: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7289: LD_INT 35
7291: PPUSH
7292: CALL_OW 67
// p := p + 1 ;
7296: LD_ADDR_VAR 0 2
7300: PUSH
7301: LD_VAR 0 2
7305: PUSH
7306: LD_INT 1
7308: PLUS
7309: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7310: LD_VAR 0 2
7314: PUSH
7315: LD_INT 10
7317: GREATER
7318: PUSH
7319: LD_EXP 34
7323: PPUSH
7324: LD_VAR 0 5
7328: PPUSH
7329: CALL_OW 296
7333: PUSH
7334: LD_INT 6
7336: LESS
7337: OR
7338: IFFALSE 7289
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7340: LD_EXP 34
7344: PUSH
7345: LD_EXP 35
7349: PUSH
7350: LD_EXP 39
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: LIST
7359: PPUSH
7360: LD_VAR 0 5
7364: PPUSH
7365: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7369: LD_EXP 34
7373: PPUSH
7374: LD_STRING D2-Bur-1
7376: PPUSH
7377: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_STRING D2-RSol1-2
7388: PPUSH
7389: CALL_OW 88
// ComHold ( nearestGuard ) ;
7393: LD_VAR 0 5
7397: PPUSH
7398: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7402: LD_VAR 0 5
7406: PPUSH
7407: CALL_OW 250
7411: PPUSH
7412: LD_VAR 0 5
7416: PPUSH
7417: CALL_OW 251
7421: PPUSH
7422: LD_INT 3
7424: PPUSH
7425: CALL_OW 331
// InGameOff ;
7429: CALL_OW 9
// end ;
7433: PPOPN 5
7435: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7436: LD_EXP 34
7440: PPUSH
7441: LD_EXP 40
7445: PPUSH
7446: CALL_OW 296
7450: PUSH
7451: LD_INT 10
7453: LESS
7454: PUSH
7455: LD_INT 3
7457: PPUSH
7458: LD_EXP 40
7462: PPUSH
7463: CALL_OW 292
7467: AND
7468: IFFALSE 7824
7470: GO 7472
7472: DISABLE
7473: LD_INT 0
7475: PPUSH
// begin InGameOn ;
7476: CALL_OW 8
// beriaVisited := true ;
7480: LD_ADDR_EXP 4
7484: PUSH
7485: LD_INT 1
7487: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7488: LD_EXP 34
7492: PPUSH
7493: LD_EXP 40
7497: PPUSH
7498: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7502: LD_EXP 35
7506: PUSH
7507: LD_EXP 39
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: PPUSH
7516: LD_INT 68
7518: PPUSH
7519: LD_INT 99
7521: PPUSH
7522: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7526: LD_EXP 40
7530: PPUSH
7531: LD_EXP 34
7535: PPUSH
7536: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7540: LD_EXP 40
7544: PPUSH
7545: LD_STRING D2-Pla-2
7547: PPUSH
7548: CALL_OW 88
// p := 0 ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 0
7559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7560: LD_INT 35
7562: PPUSH
7563: CALL_OW 67
// p := p + 1 ;
7567: LD_ADDR_VAR 0 1
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: PLUS
7580: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7581: LD_EXP 34
7585: PPUSH
7586: LD_EXP 40
7590: PPUSH
7591: CALL_OW 296
7595: PUSH
7596: LD_INT 6
7598: LESS
7599: PUSH
7600: LD_VAR 0 1
7604: PUSH
7605: LD_INT 8
7607: GREATER
7608: OR
7609: IFFALSE 7560
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7611: LD_EXP 34
7615: PUSH
7616: LD_EXP 35
7620: PUSH
7621: LD_EXP 39
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: LIST
7630: PPUSH
7631: LD_EXP 40
7635: PPUSH
7636: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7640: LD_EXP 34
7644: PPUSH
7645: LD_STRING D2-Bur-2
7647: PPUSH
7648: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7652: LD_INT 6
7654: PPUSH
7655: LD_INT 3
7657: PPUSH
7658: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7662: LD_EXP 40
7666: PPUSH
7667: LD_STRING D2-Pla-3
7669: PPUSH
7670: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7674: LD_EXP 34
7678: PPUSH
7679: LD_STRING D2-Bur-3
7681: PPUSH
7682: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7686: LD_EXP 40
7690: PPUSH
7691: LD_STRING D2-Pla-4
7693: PPUSH
7694: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7698: LD_EXP 34
7702: PPUSH
7703: LD_STRING D2-Bur-4
7705: PPUSH
7706: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7710: LD_EXP 40
7714: PPUSH
7715: LD_STRING D2-Pla-5
7717: PPUSH
7718: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7722: LD_INT 1
7724: PUSH
7725: LD_INT 2
7727: PUSH
7728: LD_INT 3
7730: PUSH
7731: LD_INT 4
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: LIST
7738: LIST
7739: PPUSH
7740: CALL 7827 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7744: LD_EXP 40
7748: PPUSH
7749: LD_STRING D3-Pla-1
7751: PPUSH
7752: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7756: LD_EXP 34
7760: PPUSH
7761: LD_STRING D3-Bur-1
7763: PPUSH
7764: CALL_OW 88
// InGameOff ;
7768: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7772: LD_STRING M2a
7774: PPUSH
7775: CALL_OW 337
// SetSide ( beria , 3 ) ;
7779: LD_INT 106
7781: PPUSH
7782: LD_INT 3
7784: PPUSH
7785: CALL_OW 235
// if not Gnyevko then
7789: LD_EXP 35
7793: NOT
7794: IFFALSE 7815
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7796: LD_INT 106
7798: PPUSH
7799: CALL_OW 313
7803: PUSH
7804: LD_INT 1
7806: ARRAY
7807: PPUSH
7808: LD_INT 3
7810: PPUSH
7811: CALL_OW 235
// ComFree ( Platonov ) ;
7815: LD_EXP 40
7819: PPUSH
7820: CALL_OW 139
// end ;
7824: PPOPN 1
7826: END
// function AskPlatonov ( questions ) ; var q ; begin
7827: LD_INT 0
7829: PPUSH
7830: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7831: LD_ADDR_VAR 0 3
7835: PUSH
7836: LD_STRING QMoreInfo
7838: PPUSH
7839: LD_VAR 0 1
7843: PPUSH
7844: CALL_OW 98
7848: ST_TO_ADDR
// case q of 1 :
7849: LD_VAR 0 3
7853: PUSH
7854: LD_INT 1
7856: DOUBLE
7857: EQUAL
7858: IFTRUE 7862
7860: GO 7889
7862: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7863: LD_EXP 34
7867: PPUSH
7868: LD_STRING D2a-Bur-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7875: LD_EXP 40
7879: PPUSH
7880: LD_STRING D2a-Pla-1
7882: PPUSH
7883: CALL_OW 88
// end ; 2 :
7887: GO 7960
7889: LD_INT 2
7891: DOUBLE
7892: EQUAL
7893: IFTRUE 7897
7895: GO 7924
7897: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7898: LD_EXP 34
7902: PPUSH
7903: LD_STRING D2b-Bur-1
7905: PPUSH
7906: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7910: LD_EXP 40
7914: PPUSH
7915: LD_STRING D2b-Pla-1
7917: PPUSH
7918: CALL_OW 88
// end ; 3 :
7922: GO 7960
7924: LD_INT 3
7926: DOUBLE
7927: EQUAL
7928: IFTRUE 7932
7930: GO 7959
7932: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7933: LD_EXP 34
7937: PPUSH
7938: LD_STRING D2c-Bur-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7945: LD_EXP 40
7949: PPUSH
7950: LD_STRING D2c-Pla-1
7952: PPUSH
7953: CALL_OW 88
// end ; end ;
7957: GO 7960
7959: POP
// if q < 4 and questions > 2 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 4
7967: LESS
7968: PUSH
7969: LD_VAR 0 1
7973: PUSH
7974: LD_INT 2
7976: GREATER
7977: AND
7978: IFFALSE 7995
// AskPlatonov ( questions diff q ) ;
7980: LD_VAR 0 1
7984: PUSH
7985: LD_VAR 0 3
7989: DIFF
7990: PPUSH
7991: CALL 7827 0 1
// end ;
7995: LD_VAR 0 2
7999: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
8000: LD_INT 0
8002: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
8003: LD_EXP 40
8007: PPUSH
8008: LD_VAR 0 1
8012: PPUSH
8013: LD_VAR 0 2
8017: PPUSH
8018: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8022: LD_INT 35
8024: PPUSH
8025: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8029: LD_EXP 40
8033: PPUSH
8034: LD_VAR 0 1
8038: PPUSH
8039: LD_VAR 0 2
8043: PPUSH
8044: CALL_OW 297
8048: PUSH
8049: LD_INT 5
8051: LESS
8052: PUSH
8053: LD_VAR 0 1
8057: PPUSH
8058: LD_VAR 0 2
8062: PPUSH
8063: CALL_OW 283
8067: PUSH
8068: LD_INT 1
8070: EQUAL
8071: AND
8072: IFFALSE 8022
// ComStop ( Platonov ) ;
8074: LD_EXP 40
8078: PPUSH
8079: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8083: LD_EXP 40
8087: PPUSH
8088: LD_STRING D4-Pla-1
8090: PPUSH
8091: CALL_OW 88
// end ;
8095: LD_VAR 0 3
8099: RET
// every 0 0$2 trigger hasLab do
8100: LD_EXP 9
8104: IFFALSE 8168
8106: GO 8108
8108: DISABLE
// begin DialogueOn ;
8109: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8113: LD_EXP 34
8117: PPUSH
8118: LD_STRING D5a-Bur-1
8120: PPUSH
8121: CALL_OW 88
// if hasWorkshop then
8125: LD_EXP 10
8129: IFFALSE 8145
// Say ( Platonov , D5a-Pla-1 ) else
8131: LD_EXP 40
8135: PPUSH
8136: LD_STRING D5a-Pla-1
8138: PPUSH
8139: CALL_OW 88
8143: GO 8157
// Say ( Platonov , D5a-Pla-1a ) ;
8145: LD_EXP 40
8149: PPUSH
8150: LD_STRING D5a-Pla-1a
8152: PPUSH
8153: CALL_OW 88
// DialogueOff ;
8157: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8161: LD_STRING M2b
8163: PPUSH
8164: CALL_OW 337
// end ;
8168: END
// every 0 0$2 trigger hasWorkshop do
8169: LD_EXP 10
8173: IFFALSE 8237
8175: GO 8177
8177: DISABLE
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8182: LD_EXP 34
8186: PPUSH
8187: LD_STRING D5b-Bur-1
8189: PPUSH
8190: CALL_OW 88
// if hasLab then
8194: LD_EXP 9
8198: IFFALSE 8214
// Say ( Platonov , D5b-Pla-1 ) else
8200: LD_EXP 40
8204: PPUSH
8205: LD_STRING D5b-Pla-1
8207: PPUSH
8208: CALL_OW 88
8212: GO 8226
// Say ( Platonov , D5b-Pla-1a ) ;
8214: LD_EXP 40
8218: PPUSH
8219: LD_STRING D5b-Pla-1a
8221: PPUSH
8222: CALL_OW 88
// DialogueOff ;
8226: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8230: LD_STRING M2c
8232: PPUSH
8233: CALL_OW 337
// end ;
8237: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8238: LD_EXP 9
8242: PUSH
8243: LD_EXP 10
8247: AND
8248: IFFALSE 8342
8250: GO 8252
8252: DISABLE
// begin DialogueOn ;
8253: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8257: LD_INT 47
8259: PPUSH
8260: LD_INT 3
8262: PPUSH
8263: CALL_OW 321
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8299
// begin Say ( Burlak , D7b-Bur-1 ) ;
8273: LD_EXP 34
8277: PPUSH
8278: LD_STRING D7b-Bur-1
8280: PPUSH
8281: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8285: LD_EXP 40
8289: PPUSH
8290: LD_STRING D7b-Pla-1
8292: PPUSH
8293: CALL_OW 88
// end else
8297: GO 8323
// begin Say ( Burlak , D7a-Bur-1 ) ;
8299: LD_EXP 34
8303: PPUSH
8304: LD_STRING D7a-Bur-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8311: LD_EXP 40
8315: PPUSH
8316: LD_STRING D7a-Pla-1
8318: PPUSH
8319: CALL_OW 88
// end ; DialogueOff ;
8323: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8327: LD_STRING M2
8329: PPUSH
8330: CALL_OW 337
// hasToBuildTank := true ;
8334: LD_ADDR_EXP 11
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ;
8342: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8343: LD_EXP 4
8347: PUSH
8348: LD_EXP 9
8352: NOT
8353: PUSH
8354: LD_EXP 10
8358: NOT
8359: OR
8360: PUSH
8361: LD_EXP 11
8365: OR
8366: AND
8367: PUSH
8368: LD_INT 22
8370: PUSH
8371: LD_INT 3
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 3
8380: PUSH
8381: LD_INT 91
8383: PUSH
8384: LD_INT 106
8386: PUSH
8387: LD_INT 32
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: LIST
8394: PUSH
8395: EMPTY
8396: LIST
8397: LIST
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 69
8407: AND
8408: IFFALSE 8517
8410: GO 8412
8412: DISABLE
8413: LD_INT 0
8415: PPUSH
// begin enable ;
8416: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8417: LD_ADDR_VAR 0 1
8421: PUSH
8422: LD_INT 22
8424: PUSH
8425: LD_INT 3
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: LD_INT 3
8434: PUSH
8435: LD_INT 91
8437: PUSH
8438: LD_INT 106
8440: PUSH
8441: LD_INT 32
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: PUSH
8449: EMPTY
8450: LIST
8451: LIST
8452: PUSH
8453: EMPTY
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: ST_TO_ADDR
// InGameOn ;
8462: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8466: LD_VAR 0 1
8470: PUSH
8471: LD_INT 1
8473: ARRAY
8474: PPUSH
8475: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8479: LD_VAR 0 1
8483: PPUSH
8484: LD_INT 66
8486: PPUSH
8487: LD_INT 99
8489: PPUSH
8490: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8494: LD_EXP 40
8498: PPUSH
8499: LD_STRING D8-Pla-1
8501: PPUSH
8502: CALL_OW 88
// wait ( 0 0$3 ) ;
8506: LD_INT 105
8508: PPUSH
8509: CALL_OW 67
// InGameOff ;
8513: CALL_OW 9
// end ;
8517: PPOPN 1
8519: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8520: LD_INT 21
8522: PPUSH
8523: LD_INT 22
8525: PUSH
8526: LD_INT 3
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 23
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 2
8545: PUSH
8546: LD_INT 30
8548: PUSH
8549: LD_INT 4
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 30
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 70
8580: PUSH
8581: LD_EXP 31
8585: NOT
8586: AND
8587: IFFALSE 8819
8589: GO 8591
8591: DISABLE
8592: LD_INT 0
8594: PPUSH
// begin enable ;
8595: ENABLE
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8596: LD_ADDR_VAR 0 1
8600: PUSH
8601: LD_INT 21
8603: PPUSH
8604: LD_INT 22
8606: PUSH
8607: LD_INT 3
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: PUSH
8614: LD_INT 23
8616: PUSH
8617: LD_INT 3
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: PUSH
8624: LD_INT 2
8626: PUSH
8627: LD_INT 30
8629: PUSH
8630: LD_INT 4
8632: PUSH
8633: EMPTY
8634: LIST
8635: LIST
8636: PUSH
8637: LD_INT 30
8639: PUSH
8640: LD_INT 31
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 70
8661: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8662: LD_EXP 40
8666: PPUSH
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8676: LD_INT 35
8678: PPUSH
8679: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8683: LD_EXP 40
8687: PPUSH
8688: LD_VAR 0 1
8692: PPUSH
8693: CALL_OW 296
8697: PUSH
8698: LD_INT 6
8700: LESS
8701: IFFALSE 8676
// InGameOn ;
8703: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8707: LD_EXP 40
8711: PPUSH
8712: LD_VAR 0 1
8716: PPUSH
8717: CALL_OW 119
// Say ( Platonov , D6-Pla-1 ) ;
8721: LD_EXP 40
8725: PPUSH
8726: LD_STRING D6-Pla-1
8728: PPUSH
8729: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8733: LD_EXP 34
8737: PPUSH
8738: LD_STRING D6-Bur-1
8740: PPUSH
8741: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8745: LD_VAR 0 1
8749: PUSH
8750: LD_INT 1
8752: ARRAY
8753: PPUSH
8754: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8758: LD_VAR 0 1
8762: PUSH
8763: LD_INT 1
8765: ARRAY
8766: PPUSH
8767: CALL_OW 266
8771: PUSH
8772: LD_INT 31
8774: EQUAL
8775: IFFALSE 8797
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8777: LD_INT 106
8779: PPUSH
8780: CALL_OW 274
8784: PPUSH
8785: LD_INT 1
8787: PPUSH
8788: LD_INT 10
8790: PPUSH
8791: CALL_OW 276
8795: GO 8815
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8797: LD_INT 106
8799: PPUSH
8800: CALL_OW 274
8804: PPUSH
8805: LD_INT 1
8807: PPUSH
8808: LD_INT 30
8810: PPUSH
8811: CALL_OW 276
// InGameOff ;
8815: CALL_OW 9
// end ;
8819: PPOPN 1
8821: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8822: LD_EXP 4
8826: PUSH
8827: LD_INT 21
8829: PPUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 23
8842: PUSH
8843: LD_INT 3
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 21
8852: PUSH
8853: LD_INT 3
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: PPUSH
8865: CALL_OW 71
8869: AND
8870: IFFALSE 9168
8872: GO 8874
8874: DISABLE
8875: LD_INT 0
8877: PPUSH
8878: PPUSH
// begin enable ;
8879: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8880: LD_ADDR_VAR 0 1
8884: PUSH
8885: LD_INT 21
8887: PPUSH
8888: LD_INT 22
8890: PUSH
8891: LD_INT 3
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PUSH
8898: LD_INT 23
8900: PUSH
8901: LD_INT 3
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PUSH
8908: LD_INT 21
8910: PUSH
8911: LD_INT 3
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: PPUSH
8923: CALL_OW 71
8927: PUSH
8928: LD_INT 1
8930: ARRAY
8931: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp ) ;
8932: LD_EXP 40
8936: PPUSH
8937: LD_VAR 0 1
8941: PPUSH
8942: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// until GetDistUnits ( Platonov , tmp ) < 6 ;
8953: LD_EXP 40
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 296
8967: PUSH
8968: LD_INT 6
8970: LESS
8971: IFFALSE 8946
// InGameOn ;
8973: CALL_OW 8
// ComTurnUnit ( Platonov , tmp ) ;
8977: LD_EXP 40
8981: PPUSH
8982: LD_VAR 0 1
8986: PPUSH
8987: CALL_OW 119
// Say ( Platonov , DPlatAngry ) ;
8991: LD_EXP 40
8995: PPUSH
8996: LD_STRING DPlatAngry
8998: PPUSH
8999: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
9003: LD_EXP 34
9007: PPUSH
9008: LD_STRING D6-Bur-1
9010: PPUSH
9011: CALL_OW 88
// RemoveUnit ( tmp ) ;
9015: LD_VAR 0 1
9019: PPUSH
9020: CALL_OW 64
// InGameOff ;
9024: CALL_OW 9
// amount := 0 ;
9028: LD_ADDR_VAR 0 2
9032: PUSH
9033: LD_INT 0
9035: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
9036: LD_VAR 0 1
9040: PPUSH
9041: CALL_OW 266
9045: PUSH
9046: LD_INT 31
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9065
9054: POP
// amount := 10 ; b_lab :
9055: LD_ADDR_VAR 0 2
9059: PUSH
9060: LD_INT 10
9062: ST_TO_ADDR
9063: GO 9142
9065: LD_INT 6
9067: DOUBLE
9068: EQUAL
9069: IFTRUE 9073
9071: GO 9084
9073: POP
// amount := 20 ; b_armoury :
9074: LD_ADDR_VAR 0 2
9078: PUSH
9079: LD_INT 20
9081: ST_TO_ADDR
9082: GO 9142
9084: LD_INT 4
9086: DOUBLE
9087: EQUAL
9088: IFTRUE 9092
9090: GO 9103
9092: POP
// amount := 30 ; b_workshop :
9093: LD_ADDR_VAR 0 2
9097: PUSH
9098: LD_INT 30
9100: ST_TO_ADDR
9101: GO 9142
9103: LD_INT 2
9105: DOUBLE
9106: EQUAL
9107: IFTRUE 9111
9109: GO 9122
9111: POP
// amount := 40 ; b_oil_power :
9112: LD_ADDR_VAR 0 2
9116: PUSH
9117: LD_INT 40
9119: ST_TO_ADDR
9120: GO 9142
9122: LD_INT 26
9124: DOUBLE
9125: EQUAL
9126: IFTRUE 9130
9128: GO 9141
9130: POP
// amount := 20 ; end ;
9131: LD_ADDR_VAR 0 2
9135: PUSH
9136: LD_INT 20
9138: ST_TO_ADDR
9139: GO 9142
9141: POP
// if amount then
9142: LD_VAR 0 2
9146: IFFALSE 9168
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9148: LD_INT 106
9150: PPUSH
9151: CALL_OW 274
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: LD_VAR 0 2
9163: PPUSH
9164: CALL_OW 276
// end ;
9168: PPOPN 2
9170: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do
9171: LD_INT 22
9173: PUSH
9174: LD_INT 3
9176: PUSH
9177: EMPTY
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 92
9183: PUSH
9184: LD_INT 112
9186: PUSH
9187: LD_INT 155
9189: PUSH
9190: LD_INT 8
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: PUSH
9199: EMPTY
9200: LIST
9201: LIST
9202: PPUSH
9203: CALL_OW 69
9207: PUSH
9208: LD_INT 2
9210: LESS
9211: PUSH
9212: LD_EXP 34
9216: PPUSH
9217: LD_INT 112
9219: PPUSH
9220: LD_INT 155
9222: PPUSH
9223: CALL_OW 297
9227: PUSH
9228: LD_INT 8
9230: LESS
9231: AND
9232: IFFALSE 9445
9234: GO 9236
9236: DISABLE
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9237: LD_INT 112
9239: PPUSH
9240: LD_INT 155
9242: PPUSH
9243: LD_INT 3
9245: PPUSH
9246: LD_INT 4
9248: NEG
9249: PPUSH
9250: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9254: LD_INT 1
9256: PPUSH
9257: LD_EXP 34
9261: PPUSH
9262: CALL_OW 471
// uc_side := 1 ;
9266: LD_ADDR_OWVAR 20
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// uc_nation := 1 ;
9274: LD_ADDR_OWVAR 21
9278: PUSH
9279: LD_INT 1
9281: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9282: LD_ADDR_EXP 49
9286: PUSH
9287: LD_STRING Dickens
9289: PPUSH
9290: CALL_OW 25
9294: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9295: LD_EXP 49
9299: PPUSH
9300: LD_INT 112
9302: PPUSH
9303: LD_INT 155
9305: PPUSH
9306: LD_INT 1
9308: PPUSH
9309: CALL_OW 48
// wait ( 0 0$2 ) ;
9313: LD_INT 70
9315: PPUSH
9316: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9320: LD_EXP 49
9324: PPUSH
9325: LD_EXP 34
9329: PPUSH
9330: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9334: LD_EXP 49
9338: PPUSH
9339: LD_STRING DUsSpawnSol
9341: PPUSH
9342: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9346: LD_INT 1
9348: PPUSH
9349: LD_EXP 34
9353: PPUSH
9354: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9358: LD_INT 112
9360: PPUSH
9361: LD_INT 155
9363: PPUSH
9364: LD_INT 3
9366: PPUSH
9367: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9371: LD_EXP 49
9375: PPUSH
9376: LD_INT 77
9378: PPUSH
9379: LD_INT 152
9381: PPUSH
9382: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9393: LD_EXP 49
9397: PPUSH
9398: CALL_OW 302
9402: NOT
9403: PUSH
9404: LD_EXP 49
9408: PPUSH
9409: LD_INT 77
9411: PPUSH
9412: LD_INT 152
9414: PPUSH
9415: CALL_OW 307
9419: OR
9420: IFFALSE 9386
// if not IsOk ( Dickens ) then
9422: LD_EXP 49
9426: PPUSH
9427: CALL_OW 302
9431: NOT
9432: IFFALSE 9436
// exit ;
9434: GO 9445
// RemoveUnit ( Dickens ) ;
9436: LD_EXP 49
9440: PPUSH
9441: CALL_OW 64
// end ;
9445: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9446: LD_EXP 34
9450: PPUSH
9451: CALL_OW 256
9455: PUSH
9456: LD_INT 600
9458: LESS
9459: IFFALSE 9476
9461: GO 9463
9463: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9464: LD_EXP 34
9468: PPUSH
9469: LD_STRING DUsSpawnBur
9471: PPUSH
9472: CALL_OW 88
9476: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9477: LD_EXP 12
9481: IFFALSE 10543
9483: GO 9485
9485: DISABLE
9486: LD_INT 0
9488: PPUSH
9489: PPUSH
9490: PPUSH
9491: PPUSH
// begin hasToBuildTank := false ;
9492: LD_ADDR_EXP 11
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9500: LD_ADDR_EXP 5
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9508: LD_ADDR_VAR 0 2
9512: PUSH
9513: LD_INT 22
9515: PUSH
9516: LD_INT 3
9518: PUSH
9519: EMPTY
9520: LIST
9521: LIST
9522: PUSH
9523: LD_INT 21
9525: PUSH
9526: LD_INT 2
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: PPUSH
9537: CALL_OW 69
9541: ST_TO_ADDR
// InGameOn ;
9542: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9546: LD_VAR 0 2
9550: PUSH
9551: LD_INT 1
9553: ARRAY
9554: PPUSH
9555: CALL_OW 85
// wait ( 0 0$1 ) ;
9559: LD_INT 35
9561: PPUSH
9562: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9566: LD_EXP 34
9570: PPUSH
9571: LD_STRING D9-Bur-1
9573: PPUSH
9574: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9578: LD_EXP 40
9582: PPUSH
9583: LD_VAR 0 2
9587: PUSH
9588: LD_INT 1
9590: ARRAY
9591: PPUSH
9592: CALL_OW 112
// p := 0 ;
9596: LD_ADDR_VAR 0 3
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9604: LD_INT 35
9606: PPUSH
9607: CALL_OW 67
// p := p + 1 ;
9611: LD_ADDR_VAR 0 3
9615: PUSH
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 1
9623: PLUS
9624: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9625: LD_EXP 40
9629: PPUSH
9630: LD_VAR 0 2
9634: PUSH
9635: LD_INT 1
9637: ARRAY
9638: PPUSH
9639: CALL_OW 296
9643: PUSH
9644: LD_INT 8
9646: LESS
9647: PUSH
9648: LD_VAR 0 3
9652: PUSH
9653: LD_INT 8
9655: GREATER
9656: OR
9657: IFFALSE 9604
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9659: LD_EXP 40
9663: PPUSH
9664: LD_VAR 0 2
9668: PUSH
9669: LD_INT 1
9671: ARRAY
9672: PPUSH
9673: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9677: LD_EXP 40
9681: PPUSH
9682: LD_STRING D9-Pla-1
9684: PPUSH
9685: CALL_OW 88
// ComFree ( Platonov ) ;
9689: LD_EXP 40
9693: PPUSH
9694: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9698: LD_EXP 40
9702: PPUSH
9703: LD_INT 64
9705: PPUSH
9706: LD_INT 98
9708: PPUSH
9709: CALL_OW 171
// InGameOff ;
9713: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9717: LD_STRING M3
9719: PPUSH
9720: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9724: LD_EXP 41
9728: PPUSH
9729: LD_INT 70
9731: PPUSH
9732: LD_INT 108
9734: PPUSH
9735: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9739: LD_EXP 41
9743: PPUSH
9744: CALL_OW 200
// wait ( 1 ) ;
9748: LD_INT 1
9750: PPUSH
9751: CALL_OW 67
// ComExit ( Belkov ) ;
9755: LD_EXP 36
9759: PPUSH
9760: CALL 55088 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9764: LD_EXP 36
9768: PPUSH
9769: LD_INT 113
9771: PPUSH
9772: LD_INT 104
9774: PPUSH
9775: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9779: LD_EXP 36
9783: PPUSH
9784: LD_INT 116
9786: PPUSH
9787: LD_INT 108
9789: PPUSH
9790: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 21
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 91
9823: PUSH
9824: LD_INT 71
9826: PUSH
9827: LD_INT 8
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PPUSH
9840: CALL_OW 69
9844: IFFALSE 9794
// InGameOn ;
9846: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9850: LD_ADDR_VAR 0 2
9854: PUSH
9855: LD_INT 22
9857: PUSH
9858: LD_INT 3
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: LD_INT 21
9867: PUSH
9868: LD_INT 2
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PUSH
9875: LD_INT 91
9877: PUSH
9878: LD_INT 71
9880: PUSH
9881: LD_INT 8
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 69
9898: ST_TO_ADDR
// if belkovTeam < 3 then
9899: LD_EXP 45
9903: PUSH
9904: LD_INT 3
9906: LESS
9907: IFFALSE 9992
// begin for i := belkovTeam to 3 do
9909: LD_ADDR_VAR 0 1
9913: PUSH
9914: DOUBLE
9915: LD_EXP 45
9919: DEC
9920: ST_TO_ADDR
9921: LD_INT 3
9923: PUSH
9924: FOR_TO
9925: IFFALSE 9990
// begin un := kirovBaseSquad [ 1 ] ;
9927: LD_ADDR_VAR 0 4
9931: PUSH
9932: LD_EXP 43
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9941: LD_ADDR_EXP 43
9945: PUSH
9946: LD_EXP 43
9950: PPUSH
9951: LD_INT 1
9953: PPUSH
9954: CALL_OW 3
9958: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9959: LD_ADDR_EXP 45
9963: PUSH
9964: LD_EXP 45
9968: PPUSH
9969: LD_EXP 45
9973: PUSH
9974: LD_INT 1
9976: PLUS
9977: PPUSH
9978: LD_VAR 0 4
9982: PPUSH
9983: CALL_OW 1
9987: ST_TO_ADDR
// end ;
9988: GO 9924
9990: POP
9991: POP
// end ; if Kirilenkova then
9992: LD_EXP 37
9996: IFFALSE 10020
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9998: LD_ADDR_EXP 45
10002: PUSH
10003: LD_EXP 45
10007: PPUSH
10008: LD_EXP 37
10012: PPUSH
10013: CALL 54690 0 2
10017: ST_TO_ADDR
10018: GO 10059
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
10020: LD_ADDR_EXP 45
10024: PUSH
10025: LD_EXP 45
10029: PPUSH
10030: LD_EXP 43
10034: PPUSH
10035: LD_INT 25
10037: PUSH
10038: LD_INT 4
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 72
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: CALL 54690 0 2
10058: ST_TO_ADDR
// ComExit ( Kurin ) ;
10059: LD_EXP 38
10063: PPUSH
10064: CALL 55088 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10068: LD_EXP 38
10072: PPUSH
10073: LD_VAR 0 2
10077: PUSH
10078: LD_INT 1
10080: ARRAY
10081: PPUSH
10082: CALL_OW 179
// wait ( 0 0$1 ) ;
10086: LD_INT 35
10088: PPUSH
10089: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10093: LD_VAR 0 2
10097: PUSH
10098: LD_INT 1
10100: ARRAY
10101: PPUSH
10102: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10106: LD_ADDR_VAR 0 4
10110: PUSH
10111: LD_VAR 0 2
10115: PUSH
10116: LD_INT 1
10118: ARRAY
10119: PPUSH
10120: CALL_OW 311
10124: ST_TO_ADDR
// ComExit ( un ) ;
10125: LD_VAR 0 4
10129: PPUSH
10130: CALL 55088 0 1
// wait ( 0 0$1 ) ;
10134: LD_INT 35
10136: PPUSH
10137: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10141: LD_VAR 0 4
10145: PPUSH
10146: LD_EXP 38
10150: PPUSH
10151: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10155: LD_EXP 36
10159: PPUSH
10160: LD_VAR 0 2
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10173: LD_INT 10
10175: PPUSH
10176: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10180: LD_EXP 38
10184: PPUSH
10185: LD_STRING D10-Kur-1
10187: PPUSH
10188: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10192: LD_EXP 36
10196: PPUSH
10197: LD_INT 122
10199: PPUSH
10200: LD_INT 112
10202: PPUSH
10203: CALL_OW 176
// wait ( 0 0$2 ) ;
10207: LD_INT 70
10209: PPUSH
10210: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10214: LD_EXP 36
10218: PPUSH
10219: LD_STRING D10-Bel-1
10221: PPUSH
10222: CALL_OW 88
// if belkovBrother then
10226: LD_EXP 32
10230: IFFALSE 10282
// begin Say ( Burlak , D10-Bur-1 ) ;
10232: LD_EXP 34
10236: PPUSH
10237: LD_STRING D10-Bur-1
10239: PPUSH
10240: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10244: LD_EXP 36
10248: PPUSH
10249: LD_STRING D10-Bel-2
10251: PPUSH
10252: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10256: LD_EXP 34
10260: PPUSH
10261: LD_STRING D10-Bur-2
10263: PPUSH
10264: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10268: LD_EXP 38
10272: PPUSH
10273: LD_STRING D10-Kur-2a
10275: PPUSH
10276: CALL_OW 88
// end else
10280: GO 10294
// begin Say ( Kurin , D10-Kur-2 ) end ;
10282: LD_EXP 38
10286: PPUSH
10287: LD_STRING D10-Kur-2
10289: PPUSH
10290: CALL_OW 88
// wait ( 0 0$2 ) ;
10294: LD_INT 70
10296: PPUSH
10297: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10301: LD_EXP 38
10305: PPUSH
10306: LD_STRING D10-Kur-2b
10308: PPUSH
10309: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10313: LD_VAR 0 4
10317: PPUSH
10318: LD_INT 66
10320: PPUSH
10321: LD_INT 97
10323: PPUSH
10324: CALL_OW 111
// wait ( 0 0$5 ) ;
10328: LD_INT 175
10330: PPUSH
10331: CALL_OW 67
// InGameOff ;
10335: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10339: LD_EXP 33
10343: PPUSH
10344: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10348: LD_STRING M4
10350: PPUSH
10351: CALL_OW 337
// wait ( 0 0$6 ) ;
10355: LD_INT 210
10357: PPUSH
10358: CALL_OW 67
// kurinDontWannaTalk := true ;
10362: LD_ADDR_EXP 5
10366: PUSH
10367: LD_INT 1
10369: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10370: LD_INT 140
10372: PPUSH
10373: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10377: LD_INT 35
10379: PPUSH
10380: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10384: LD_EXP 34
10388: PPUSH
10389: CALL_OW 310
10393: PUSH
10394: LD_EXP 34
10398: PPUSH
10399: LD_INT 106
10401: PPUSH
10402: CALL_OW 296
10406: PUSH
10407: LD_INT 12
10409: LESS
10410: OR
10411: IFFALSE 10377
// DialogueOn ;
10413: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10417: LD_EXP 40
10421: PPUSH
10422: LD_STRING D11-Pla-1
10424: PPUSH
10425: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10429: LD_EXP 34
10433: PPUSH
10434: LD_STRING D11-Bur-1
10436: PPUSH
10437: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10441: LD_INT 22
10443: PUSH
10444: LD_INT 3
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 21
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 69
10469: PUSH
10470: LD_INT 1
10472: GREATER
10473: IFFALSE 10487
// Say ( Burlak , D11-Bur-1a ) ;
10475: LD_EXP 34
10479: PPUSH
10480: LD_STRING D11-Bur-1a
10482: PPUSH
10483: CALL_OW 88
// DialogueOff ;
10487: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10491: LD_ADDR_EXP 8
10495: PUSH
10496: LD_INT 160
10498: PUSH
10499: LD_INT 150
10501: PUSH
10502: LD_INT 140
10504: PUSH
10505: LD_INT 120
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: PUSH
10514: LD_OWVAR 67
10518: ARRAY
10519: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10520: LD_STRING M5
10522: PPUSH
10523: CALL_OW 337
// kirovHasTank := true ;
10527: LD_ADDR_EXP 6
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// hasToBuildTank := true ;
10535: LD_ADDR_EXP 11
10539: PUSH
10540: LD_INT 1
10542: ST_TO_ADDR
// end ;
10543: PPOPN 4
10545: END
// every 0 0$2 trigger allianceAttacked do
10546: LD_EXP 13
10550: IFFALSE 10589
10552: GO 10554
10554: DISABLE
// begin DialogueOn ;
10555: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10559: LD_EXP 38
10563: PPUSH
10564: LD_STRING DArestKur
10566: PPUSH
10567: CALL_OW 88
// dwait ( 0 0$1 ) ;
10571: LD_INT 35
10573: PPUSH
10574: CALL_OW 68
// YouLost ( SelfAttack ) ;
10578: LD_STRING SelfAttack
10580: PPUSH
10581: CALL_OW 104
// DialogueOff ;
10585: CALL_OW 7
// end ;
10589: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10590: LD_INT 22
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 2
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PPUSH
10614: CALL_OW 69
10618: PUSH
10619: LD_INT 22
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: GREATEREQUAL
10648: PUSH
10649: LD_EXP 6
10653: AND
10654: IFFALSE 10824
10656: GO 10658
10658: DISABLE
// begin hasToBuildTank := false ;
10659: LD_ADDR_EXP 11
10663: PUSH
10664: LD_INT 0
10666: ST_TO_ADDR
// blockNorth := false ;
10667: LD_ADDR_EXP 7
10671: PUSH
10672: LD_INT 0
10674: ST_TO_ADDR
// InGameOn ;
10675: CALL_OW 8
// wait ( 0 0$2 ) ;
10679: LD_INT 70
10681: PPUSH
10682: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10686: LD_INT 106
10688: PPUSH
10689: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10693: LD_EXP 40
10697: PPUSH
10698: LD_INT 65
10700: PPUSH
10701: LD_INT 97
10703: PPUSH
10704: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10708: LD_EXP 40
10712: PPUSH
10713: LD_EXP 34
10717: PPUSH
10718: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10722: LD_EXP 34
10726: PPUSH
10727: LD_STRING D12-Bur-1
10729: PPUSH
10730: CALL_OW 88
// wait ( 0 0$1 ) ;
10734: LD_INT 35
10736: PPUSH
10737: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10741: LD_EXP 40
10745: PPUSH
10746: LD_STRING D12-Pla-1
10748: PPUSH
10749: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10753: LD_EXP 34
10757: PPUSH
10758: LD_STRING D12-Bur-2
10760: PPUSH
10761: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10765: LD_EXP 40
10769: PPUSH
10770: LD_STRING D12-Pla-2
10772: PPUSH
10773: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10777: LD_EXP 34
10781: PPUSH
10782: LD_STRING D12-Bur-3
10784: PPUSH
10785: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10789: LD_EXP 40
10793: PPUSH
10794: LD_STRING D12-Pla-3
10796: PPUSH
10797: CALL_OW 88
// hasAllTanks := true ;
10801: LD_ADDR_EXP 14
10805: PUSH
10806: LD_INT 1
10808: ST_TO_ADDR
// InGameOff ;
10809: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10813: LD_STRING M6
10815: PPUSH
10816: CALL_OW 337
// PrepareAmerican ;
10820: CALL 3961 0 0
// end ;
10824: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10825: LD_EXP 17
10829: IFFALSE 12593
10831: GO 10833
10833: DISABLE
10834: LD_INT 0
10836: PPUSH
10837: PPUSH
10838: PPUSH
10839: PPUSH
10840: PPUSH
10841: PPUSH
10842: PPUSH
// begin PrepareAmericanTrap ;
10843: CALL 4761 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10847: LD_ADDR_VAR 0 2
10851: PUSH
10852: LD_EXP 48
10856: PPUSH
10857: LD_INT 26
10859: PUSH
10860: LD_INT 1
10862: PUSH
10863: EMPTY
10864: LIST
10865: LIST
10866: PPUSH
10867: CALL_OW 72
10871: PUSH
10872: LD_INT 1
10874: ARRAY
10875: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10876: LD_INT 22
10878: PUSH
10879: LD_INT 3
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: LD_INT 21
10891: PUSH
10892: LD_INT 3
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: PUSH
10903: LD_INT 60
10905: PUSH
10906: EMPTY
10907: LIST
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: PPUSH
10914: CALL_OW 69
10918: PPUSH
10919: CALL_OW 141
// InGameOn ;
10923: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10927: LD_INT 69
10929: PPUSH
10930: LD_INT 22
10932: PPUSH
10933: CALL_OW 86
// wait ( 0 0$1 ) ;
10937: LD_INT 35
10939: PPUSH
10940: CALL_OW 67
// DialogueOn ;
10944: CALL_OW 6
// game_speed := 4 ;
10948: LD_ADDR_OWVAR 65
10952: PUSH
10953: LD_INT 4
10955: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10956: LD_VAR 0 2
10960: PPUSH
10961: LD_STRING D13-Sol1-1
10963: PPUSH
10964: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10968: LD_EXP 36
10972: PPUSH
10973: LD_STRING D13-Bel-1
10975: PPUSH
10976: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10980: LD_EXP 38
10984: PPUSH
10985: LD_STRING D13-Kur-1
10987: PPUSH
10988: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10992: LD_INT 10
10994: PPUSH
10995: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10999: LD_EXP 36
11003: PPUSH
11004: LD_STRING D13-Bel-2
11006: PPUSH
11007: CALL_OW 94
// DialogueOff ;
11011: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
11015: LD_EXP 36
11019: PPUSH
11020: LD_INT 76
11022: PPUSH
11023: LD_INT 20
11025: PPUSH
11026: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
11030: LD_EXP 45
11034: PPUSH
11035: LD_INT 72
11037: PPUSH
11038: LD_INT 20
11040: PPUSH
11041: CALL_OW 111
// wait ( 0 0$2 ) ;
11045: LD_INT 70
11047: PPUSH
11048: CALL_OW 67
// for i in usTrapForces do
11052: LD_ADDR_VAR 0 1
11056: PUSH
11057: LD_EXP 48
11061: PUSH
11062: FOR_IN
11063: IFFALSE 11096
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11065: LD_VAR 0 1
11069: PPUSH
11070: LD_INT 7
11072: PPUSH
11073: LD_INT 0
11075: PPUSH
11076: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11080: LD_VAR 0 1
11084: PPUSH
11085: LD_EXP 36
11089: PPUSH
11090: CALL_OW 119
// end ;
11094: GO 11062
11096: POP
11097: POP
// wait ( 0 0$0.3 ) ;
11098: LD_INT 10
11100: PPUSH
11101: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11105: LD_EXP 48
11109: PPUSH
11110: LD_INT 65
11112: PPUSH
11113: LD_INT 18
11115: PPUSH
11116: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11120: LD_INT 70
11122: PPUSH
11123: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11127: LD_EXP 48
11131: PPUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: EMPTY
11139: LIST
11140: LIST
11141: PPUSH
11142: CALL_OW 72
11146: PUSH
11147: LD_INT 3
11149: GREATER
11150: IFFALSE 11120
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11152: LD_INT 65
11154: PPUSH
11155: LD_INT 18
11157: PPUSH
11158: LD_INT 3
11160: PPUSH
11161: LD_INT 26
11163: NEG
11164: PPUSH
11165: CALL_OW 330
// DialogueOn ;
11169: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: LD_STRING D14-Sol1-1
11180: PPUSH
11181: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11185: LD_EXP 36
11189: PPUSH
11190: LD_STRING D14-Bel-1
11192: PPUSH
11193: CALL_OW 88
// DialogueOff ;
11197: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11201: LD_INT 65
11203: PPUSH
11204: LD_INT 18
11206: PPUSH
11207: LD_INT 3
11209: PPUSH
11210: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11214: LD_EXP 45
11218: PPUSH
11219: LD_INT 31
11221: PPUSH
11222: LD_INT 9
11224: PPUSH
11225: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11229: LD_EXP 48
11233: PPUSH
11234: LD_INT 50
11236: PPUSH
11237: LD_INT 16
11239: PPUSH
11240: CALL_OW 174
// wait ( 0 0$2 ) ;
11244: LD_INT 70
11246: PPUSH
11247: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11251: LD_ADDR_VAR 0 6
11255: PUSH
11256: LD_EXP 36
11260: PPUSH
11261: CALL_OW 310
11265: ST_TO_ADDR
// if not belkovTank then
11266: LD_VAR 0 6
11270: NOT
11271: IFFALSE 11311
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11273: LD_ADDR_VAR 0 6
11277: PUSH
11278: LD_INT 22
11280: PUSH
11281: LD_INT 6
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PUSH
11288: LD_INT 21
11290: PUSH
11291: LD_INT 2
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: PPUSH
11302: CALL_OW 69
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11311: LD_EXP 36
11315: PPUSH
11316: LD_INT 58
11318: PPUSH
11319: LD_INT 21
11321: PPUSH
11322: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11326: LD_EXP 36
11330: PPUSH
11331: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11335: LD_EXP 36
11339: PPUSH
11340: LD_INT 53
11342: PPUSH
11343: LD_INT 18
11345: PPUSH
11346: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11350: LD_EXP 36
11354: PPUSH
11355: LD_INT 31
11357: PPUSH
11358: LD_INT 9
11360: PPUSH
11361: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11365: LD_INT 35
11367: PPUSH
11368: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11372: LD_ADDR_VAR 0 1
11376: PUSH
11377: LD_EXP 36
11381: PUSH
11382: LD_EXP 45
11386: UNION
11387: PUSH
11388: LD_VAR 0 6
11392: UNION
11393: PUSH
11394: FOR_IN
11395: IFFALSE 11426
// if GetLives ( i ) < 800 then
11397: LD_VAR 0 1
11401: PPUSH
11402: CALL_OW 256
11406: PUSH
11407: LD_INT 800
11409: LESS
11410: IFFALSE 11424
// SetLives ( i , 800 ) ;
11412: LD_VAR 0 1
11416: PPUSH
11417: LD_INT 800
11419: PPUSH
11420: CALL_OW 234
11424: GO 11394
11426: POP
11427: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11428: LD_EXP 36
11432: PPUSH
11433: LD_INT 31
11435: PPUSH
11436: LD_INT 9
11438: PPUSH
11439: CALL_OW 297
11443: PUSH
11444: LD_INT 4
11446: LESS
11447: IFFALSE 11365
// for i := 1 to Difficulty do
11449: LD_ADDR_VAR 0 1
11453: PUSH
11454: DOUBLE
11455: LD_INT 1
11457: DEC
11458: ST_TO_ADDR
11459: LD_OWVAR 67
11463: PUSH
11464: FOR_TO
11465: IFFALSE 11507
// if i <= belkovTeam then
11467: LD_VAR 0 1
11471: PUSH
11472: LD_EXP 45
11476: LESSEQUAL
11477: IFFALSE 11505
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11479: LD_EXP 45
11483: PUSH
11484: LD_VAR 0 1
11488: ARRAY
11489: PPUSH
11490: LD_INT 600
11492: PPUSH
11493: LD_INT 800
11495: PPUSH
11496: CALL_OW 12
11500: PPUSH
11501: CALL_OW 234
11505: GO 11464
11507: POP
11508: POP
// SetLives ( Belkov , 820 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_INT 820
11516: PPUSH
11517: CALL_OW 234
// InGameOff ;
11521: CALL_OW 9
// DialogueOn ;
11525: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11529: LD_EXP 36
11533: PPUSH
11534: LD_STRING D14-Bel-1a
11536: PPUSH
11537: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11541: LD_EXP 38
11545: PPUSH
11546: LD_STRING D14-Kur-1
11548: PPUSH
11549: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11553: LD_EXP 36
11557: PPUSH
11558: LD_STRING D14-Bel-2
11560: PPUSH
11561: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11565: LD_EXP 38
11569: PPUSH
11570: LD_STRING D14-Kur-2
11572: PPUSH
11573: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11577: LD_EXP 34
11581: PPUSH
11582: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11586: LD_EXP 34
11590: PPUSH
11591: LD_STRING D14a-Bur-1
11593: PPUSH
11594: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11598: LD_EXP 40
11602: PPUSH
11603: LD_STRING D14a-Pla-1
11605: PPUSH
11606: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11610: LD_EXP 34
11614: PPUSH
11615: LD_STRING D14a-Bur-2
11617: PPUSH
11618: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11622: LD_EXP 40
11626: PPUSH
11627: LD_STRING D14a-Pla-2
11629: PPUSH
11630: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_STRING D14a-Bur-3
11641: PPUSH
11642: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11646: LD_EXP 40
11650: PPUSH
11651: LD_STRING D14a-Pla-3
11653: PPUSH
11654: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11658: LD_EXP 34
11662: PPUSH
11663: LD_STRING D14a-Bur-4
11665: PPUSH
11666: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11670: LD_EXP 40
11674: PPUSH
11675: LD_STRING D14a-Pla-4
11677: PPUSH
11678: CALL_OW 88
// DialogueOff ;
11682: CALL_OW 7
// belkovTrapped := true ;
11686: LD_ADDR_EXP 18
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11694: LD_EXP 48
11698: PPUSH
11699: LD_INT 68
11701: PPUSH
11702: LD_INT 16
11704: PPUSH
11705: CALL_OW 111
// if belkovTank then
11709: LD_VAR 0 6
11713: IFFALSE 11752
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11715: LD_EXP 48
11719: PUSH
11720: LD_INT 1
11722: ARRAY
11723: PPUSH
11724: LD_VAR 0 6
11728: PPUSH
11729: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11733: LD_EXP 48
11737: PUSH
11738: LD_INT 1
11740: ARRAY
11741: PPUSH
11742: LD_INT 69
11744: PPUSH
11745: LD_INT 20
11747: PPUSH
11748: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11752: LD_EXP 36
11756: PPUSH
11757: LD_INT 40
11759: PPUSH
11760: LD_INT 17
11762: PPUSH
11763: CALL_OW 111
// AddComHold ( Belkov ) ;
11767: LD_EXP 36
11771: PPUSH
11772: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: LD_INT 44
11783: PUSH
11784: LD_INT 18
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 42
11793: PUSH
11794: LD_INT 16
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 40
11803: PUSH
11804: LD_INT 15
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 44
11813: PUSH
11814: LD_INT 20
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 42
11823: PUSH
11824: LD_INT 20
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 42
11833: PUSH
11834: LD_INT 12
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 42
11843: PUSH
11844: LD_INT 8
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_EXP 45
11869: PPUSH
11870: LD_INT 25
11872: PUSH
11873: LD_INT 1
11875: PUSH
11876: EMPTY
11877: LIST
11878: LIST
11879: PPUSH
11880: CALL_OW 72
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11952
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11888: LD_VAR 0 1
11892: PPUSH
11893: LD_VAR 0 3
11897: PUSH
11898: LD_INT 1
11900: ARRAY
11901: PUSH
11902: LD_INT 1
11904: ARRAY
11905: PPUSH
11906: LD_VAR 0 3
11910: PUSH
11911: LD_INT 1
11913: ARRAY
11914: PUSH
11915: LD_INT 2
11917: ARRAY
11918: PPUSH
11919: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11923: LD_ADDR_VAR 0 3
11927: PUSH
11928: LD_VAR 0 3
11932: PPUSH
11933: LD_INT 1
11935: PPUSH
11936: CALL_OW 3
11940: ST_TO_ADDR
// AddComCrawl ( i ) ;
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 197
// end ;
11950: GO 11885
11952: POP
11953: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11954: LD_EXP 45
11958: PPUSH
11959: LD_INT 25
11961: PUSH
11962: LD_INT 4
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PPUSH
11969: CALL_OW 72
11973: IFFALSE 12005
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11975: LD_EXP 45
11979: PPUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 4
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: PPUSH
11990: CALL_OW 72
11994: PPUSH
11995: LD_INT 38
11997: PPUSH
11998: LD_INT 18
12000: PPUSH
12001: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
12005: LD_ADDR_VAR 0 7
12009: PUSH
12010: LD_INT 9450
12012: PUSH
12013: LD_INT 8400
12015: PUSH
12016: LD_INT 6650
12018: PUSH
12019: LD_INT 5250
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_OWVAR 67
12032: ARRAY
12033: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
12034: LD_INT 35
12036: PPUSH
12037: CALL_OW 67
// timer := timer - 0 0$1 ;
12041: LD_ADDR_VAR 0 7
12045: PUSH
12046: LD_VAR 0 7
12050: PUSH
12051: LD_INT 35
12053: MINUS
12054: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12055: LD_INT 19
12057: PPUSH
12058: LD_INT 22
12060: PUSH
12061: LD_INT 3
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 70
12072: IFFALSE 12082
// timer := 0 0$0 ;
12074: LD_ADDR_VAR 0 7
12078: PUSH
12079: LD_INT 0
12081: ST_TO_ADDR
// until timer <= 0 ;
12082: LD_VAR 0 7
12086: PUSH
12087: LD_INT 0
12089: LESSEQUAL
12090: IFFALSE 12034
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12092: LD_EXP 48
12096: PPUSH
12097: LD_INT 50
12099: PUSH
12100: EMPTY
12101: LIST
12102: PPUSH
12103: CALL_OW 72
12107: NOT
12108: IFFALSE 12112
// exit ;
12110: GO 12593
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_EXP 48
12121: PPUSH
12122: LD_INT 25
12124: PUSH
12125: LD_INT 1
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 3
12134: PUSH
12135: LD_INT 54
12137: PUSH
12138: EMPTY
12139: LIST
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 72
12153: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12154: LD_ADDR_VAR 0 5
12158: PUSH
12159: LD_EXP 48
12163: PPUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 4
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 54
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PPUSH
12191: CALL_OW 72
12195: ST_TO_ADDR
// for i in sol do
12196: LD_ADDR_VAR 0 1
12200: PUSH
12201: LD_VAR 0 4
12205: PUSH
12206: FOR_IN
12207: IFFALSE 12223
// SetTag ( i , 0 ) ;
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 0
12216: PPUSH
12217: CALL_OW 109
12221: GO 12206
12223: POP
12224: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12225: LD_VAR 0 5
12229: PPUSH
12230: LD_INT 60
12232: PPUSH
12233: LD_INT 8
12235: PPUSH
12236: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12240: LD_INT 22
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PUSH
12250: LD_INT 21
12252: PUSH
12253: LD_INT 2
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PPUSH
12264: CALL_OW 69
12268: IFFALSE 12309
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12270: LD_INT 22
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 2
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PPUSH
12294: CALL_OW 69
12298: PPUSH
12299: LD_INT 53
12301: PPUSH
12302: LD_INT 24
12304: PPUSH
12305: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12309: LD_INT 18
12311: PPUSH
12312: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: LD_EXP 48
12325: PPUSH
12326: LD_INT 25
12328: PUSH
12329: LD_INT 1
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: LD_INT 50
12338: PUSH
12339: EMPTY
12340: LIST
12341: PUSH
12342: LD_INT 3
12344: PUSH
12345: LD_INT 54
12347: PUSH
12348: EMPTY
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 72
12364: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12365: LD_VAR 0 4
12369: PPUSH
12370: LD_INT 0
12372: PPUSH
12373: CALL 52259 0 2
12377: PUSH
12378: LD_VAR 0 4
12382: EQUAL
12383: IFFALSE 12422
// begin wait ( 0 0$3 ) ;
12385: LD_INT 105
12387: PPUSH
12388: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12392: LD_VAR 0 4
12396: PPUSH
12397: LD_INT 41
12399: PPUSH
12400: LD_INT 18
12402: PPUSH
12403: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12407: LD_VAR 0 5
12411: PPUSH
12412: LD_INT 60
12414: PPUSH
12415: LD_INT 8
12417: PPUSH
12418: CALL_OW 111
// end ; for i in sol do
12422: LD_ADDR_VAR 0 1
12426: PUSH
12427: LD_VAR 0 4
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12508
// if GetLives ( i ) < 800 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 800
12447: LESS
12448: IFFALSE 12479
// begin SetTag ( i , 1 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 1
12457: PPUSH
12458: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12462: LD_VAR 0 1
12466: PPUSH
12467: LD_INT 60
12469: PPUSH
12470: LD_INT 8
12472: PPUSH
12473: CALL_OW 111
// end else
12477: GO 12506
// if GetLives ( i ) = 1000 then
12479: LD_VAR 0 1
12483: PPUSH
12484: CALL_OW 256
12488: PUSH
12489: LD_INT 1000
12491: EQUAL
12492: IFFALSE 12506
// SetTag ( i , 0 ) ;
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_INT 0
12501: PPUSH
12502: CALL_OW 109
12506: GO 12432
12508: POP
12509: POP
// until belkovDied or not sol ;
12510: LD_EXP 19
12514: PUSH
12515: LD_VAR 0 4
12519: NOT
12520: OR
12521: IFFALSE 12309
// if not sol then
12523: LD_VAR 0 4
12527: NOT
12528: IFFALSE 12532
// exit ;
12530: GO 12593
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12532: LD_VAR 0 4
12536: PUSH
12537: LD_VAR 0 5
12541: ADD
12542: PPUSH
12543: LD_INT 56
12545: PPUSH
12546: LD_INT 25
12548: PPUSH
12549: CALL_OW 111
// wait ( 0 0$30 ) ;
12553: LD_INT 1050
12555: PPUSH
12556: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12560: LD_EXP 48
12564: PPUSH
12565: LD_INT 66
12567: PPUSH
12568: LD_INT 96
12570: PPUSH
12571: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12575: LD_VAR 0 5
12579: PPUSH
12580: LD_VAR 0 4
12584: PUSH
12585: LD_INT 1
12587: ARRAY
12588: PPUSH
12589: CALL_OW 112
// end ;
12593: PPOPN 7
12595: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12596: LD_EXP 18
12600: PUSH
12601: LD_EXP 19
12605: NOT
12606: AND
12607: PUSH
12608: LD_INT 9
12610: PPUSH
12611: LD_INT 22
12613: PUSH
12614: LD_INT 3
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PPUSH
12621: CALL_OW 70
12625: AND
12626: IFFALSE 12946
12628: GO 12630
12630: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12631: LD_STRING QAttackAm
12633: PPUSH
12634: CALL_OW 97
12638: PUSH
12639: LD_INT 1
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12714
12647: POP
// begin initiative := true ;
12648: LD_ADDR_EXP 31
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// DialogueOn ;
12656: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12660: LD_EXP 34
12664: PPUSH
12665: LD_STRING D17-Bur-1
12667: PPUSH
12668: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12672: LD_EXP 40
12676: PPUSH
12677: LD_STRING D17-Pla-1
12679: PPUSH
12680: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12684: LD_EXP 34
12688: PPUSH
12689: LD_STRING D17-Bur-2
12691: PPUSH
12692: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12696: LD_EXP 40
12700: PPUSH
12701: LD_STRING D17-Pla-2
12703: PPUSH
12704: CALL_OW 94
// DialogueOff ;
12708: CALL_OW 7
// end ; 2 :
12712: GO 12876
12714: LD_INT 2
12716: DOUBLE
12717: EQUAL
12718: IFTRUE 12722
12720: GO 12814
12722: POP
// begin initiative := true ;
12723: LD_ADDR_EXP 31
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// DialogueOn ;
12731: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12735: LD_EXP 34
12739: PPUSH
12740: LD_STRING D18-Bur-1
12742: PPUSH
12743: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12747: LD_EXP 40
12751: PPUSH
12752: LD_STRING D18-Pla-1
12754: PPUSH
12755: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12759: LD_EXP 34
12763: PPUSH
12764: LD_STRING D18-Bur-2
12766: PPUSH
12767: CALL_OW 88
// if not reinforcementsGained then
12771: LD_EXP 25
12775: NOT
12776: IFFALSE 12796
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12778: LD_EXP 40
12782: PPUSH
12783: LD_STRING D18-Pla-2
12785: PPUSH
12786: CALL_OW 94
// SendReinforcements ;
12790: CALL 3302 0 0
// end else
12794: GO 12808
// SayRadio ( Platonov , D22-Pla-1b ) ;
12796: LD_EXP 40
12800: PPUSH
12801: LD_STRING D22-Pla-1b
12803: PPUSH
12804: CALL_OW 94
// DialogueOff ;
12808: CALL_OW 7
// end ; 3 :
12812: GO 12876
12814: LD_INT 3
12816: DOUBLE
12817: EQUAL
12818: IFTRUE 12822
12820: GO 12875
12822: POP
// begin if IsOk ( Gnyevko ) then
12823: LD_EXP 35
12827: PPUSH
12828: CALL_OW 302
12832: IFFALSE 12848
// Say ( Gnyevko , D19A-Gny-1 ) else
12834: LD_EXP 35
12838: PPUSH
12839: LD_STRING D19A-Gny-1
12841: PPUSH
12842: CALL_OW 88
12846: GO 12871
// if IsOk ( Kovalyuk ) then
12848: LD_EXP 39
12852: PPUSH
12853: CALL_OW 302
12857: IFFALSE 12871
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12859: LD_EXP 39
12863: PPUSH
12864: LD_STRING D19A-Kov-1
12866: PPUSH
12867: CALL_OW 88
// exit ;
12871: GO 12946
// end ; end ;
12873: GO 12876
12875: POP
// if IsOk ( Gnyevko ) then
12876: LD_EXP 35
12880: PPUSH
12881: CALL_OW 302
12885: IFFALSE 12911
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12887: LD_EXP 35
12891: PPUSH
12892: LD_STRING D19-Gny-1
12894: PPUSH
12895: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12899: LD_EXP 34
12903: PPUSH
12904: LD_STRING D19-Bur-1
12906: PPUSH
12907: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12911: LD_EXP 39
12915: PPUSH
12916: CALL_OW 302
12920: IFFALSE 12946
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12922: LD_EXP 39
12926: PPUSH
12927: LD_STRING D19-Kov-1
12929: PPUSH
12930: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12934: LD_EXP 34
12938: PPUSH
12939: LD_STRING D19-Bur-2
12941: PPUSH
12942: CALL_OW 88
// end ; end ;
12946: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12947: LD_EXP 18
12951: PUSH
12952: LD_EXP 19
12956: NOT
12957: AND
12958: PUSH
12959: LD_INT 16
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_INT 3
12967: PUSH
12968: EMPTY
12969: LIST
12970: LIST
12971: PPUSH
12972: CALL_OW 70
12976: AND
12977: IFFALSE 13205
12979: GO 12981
12981: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12982: LD_STRING QAttackBw
12984: PPUSH
12985: CALL_OW 97
12989: PUSH
12990: LD_INT 1
12992: DOUBLE
12993: EQUAL
12994: IFTRUE 12998
12996: GO 13041
12998: POP
// begin initiative := true ;
12999: LD_ADDR_EXP 31
13003: PUSH
13004: LD_INT 1
13006: ST_TO_ADDR
// DialogueOn ;
13007: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
13011: LD_EXP 34
13015: PPUSH
13016: LD_STRING D21-Bur-1
13018: PPUSH
13019: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
13023: LD_EXP 40
13027: PPUSH
13028: LD_STRING D21-Pla-1
13030: PPUSH
13031: CALL_OW 94
// DialogueOff ;
13035: CALL_OW 7
// end ; 2 :
13039: GO 13156
13041: LD_INT 2
13043: DOUBLE
13044: EQUAL
13045: IFTRUE 13049
13047: GO 13144
13049: POP
// begin initiative := true ;
13050: LD_ADDR_EXP 31
13054: PUSH
13055: LD_INT 1
13057: ST_TO_ADDR
// DialogueOn ;
13058: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13062: LD_EXP 34
13066: PPUSH
13067: LD_STRING D22-Bur-1
13069: PPUSH
13070: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13074: LD_EXP 25
13078: NOT
13079: PUSH
13080: LD_EXP 22
13084: AND
13085: IFFALSE 13105
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13087: LD_EXP 40
13091: PPUSH
13092: LD_STRING D22-Pla-1
13094: PPUSH
13095: CALL_OW 94
// SendReinforcements ;
13099: CALL 3302 0 0
// end else
13103: GO 13138
// if not westOutpostDestroyed then
13105: LD_EXP 22
13109: NOT
13110: IFFALSE 13126
// SayRadio ( Platonov , D22-Pla-1a ) else
13112: LD_EXP 40
13116: PPUSH
13117: LD_STRING D22-Pla-1a
13119: PPUSH
13120: CALL_OW 94
13124: GO 13138
// SayRadio ( Platonov , D22-Pla-1b ) ;
13126: LD_EXP 40
13130: PPUSH
13131: LD_STRING D22-Pla-1b
13133: PPUSH
13134: CALL_OW 94
// DialogueOff ;
13138: CALL_OW 7
// end ; 3 :
13142: GO 13156
13144: LD_INT 3
13146: DOUBLE
13147: EQUAL
13148: IFTRUE 13152
13150: GO 13155
13152: POP
// begin end ; end ;
13153: GO 13156
13155: POP
// ChangeMissionObjectives ( M9 ) ;
13156: LD_STRING M9
13158: PPUSH
13159: CALL_OW 337
// wait ( 0 0$1 ) ;
13163: LD_INT 35
13165: PPUSH
13166: CALL_OW 67
// if IsOk ( Gnyevko ) then
13170: LD_EXP 35
13174: PPUSH
13175: CALL_OW 302
13179: IFFALSE 13205
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13181: LD_EXP 35
13185: PPUSH
13186: LD_STRING D23-Gny-1
13188: PPUSH
13189: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13193: LD_EXP 34
13197: PPUSH
13198: LD_STRING D23-Bur-1
13200: PPUSH
13201: CALL_OW 88
// end ; end ;
13205: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13206: LD_EXP 18
13210: PUSH
13211: LD_EXP 19
13215: AND
13216: PUSH
13217: LD_EXP 28
13221: NOT
13222: AND
13223: PUSH
13224: LD_EXP 45
13228: PPUSH
13229: LD_INT 91
13231: PUSH
13232: LD_EXP 34
13236: PUSH
13237: LD_INT 8
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: LIST
13244: PPUSH
13245: CALL_OW 72
13249: AND
13250: IFFALSE 13294
13252: GO 13254
13254: DISABLE
13255: LD_INT 0
13257: PPUSH
// begin for i in belkovTeam do
13258: LD_ADDR_VAR 0 1
13262: PUSH
13263: LD_EXP 45
13267: PUSH
13268: FOR_IN
13269: IFFALSE 13285
// SetSide ( i , 3 ) ;
13271: LD_VAR 0 1
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: CALL_OW 235
13283: GO 13268
13285: POP
13286: POP
// ChangeMissionObjectives ( M9a ) ;
13287: LD_STRING M9a
13289: PPUSH
13290: CALL_OW 337
// end ;
13294: PPOPN 1
13296: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13297: LD_EXP 34
13301: PPUSH
13302: LD_EXP 36
13306: PPUSH
13307: CALL_OW 296
13311: PUSH
13312: LD_INT 6
13314: LESS
13315: PUSH
13316: LD_EXP 18
13320: AND
13321: PUSH
13322: LD_EXP 36
13326: PPUSH
13327: CALL_OW 302
13331: AND
13332: PUSH
13333: LD_INT 3
13335: PPUSH
13336: CALL_OW 463
13340: NOT
13341: AND
13342: IFFALSE 13657
13344: GO 13346
13346: DISABLE
13347: LD_INT 0
13349: PPUSH
13350: PPUSH
// begin InGameOn ;
13351: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13355: LD_EXP 34
13359: PPUSH
13360: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13364: LD_EXP 34
13368: PPUSH
13369: LD_INT 37
13371: PPUSH
13372: LD_INT 17
13374: PPUSH
13375: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13379: LD_EXP 34
13383: PPUSH
13384: LD_EXP 36
13388: PPUSH
13389: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13393: LD_EXP 36
13397: PPUSH
13398: LD_EXP 34
13402: PPUSH
13403: CALL_OW 119
// p := 0 ;
13407: LD_ADDR_VAR 0 2
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13415: LD_INT 35
13417: PPUSH
13418: CALL_OW 67
// p := p + 1 ;
13422: LD_ADDR_VAR 0 2
13426: PUSH
13427: LD_VAR 0 2
13431: PUSH
13432: LD_INT 1
13434: PLUS
13435: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13436: LD_EXP 34
13440: PPUSH
13441: LD_EXP 36
13445: PPUSH
13446: CALL_OW 296
13450: PUSH
13451: LD_INT 4
13453: LESS
13454: PUSH
13455: LD_VAR 0 2
13459: PUSH
13460: LD_INT 6
13462: GREATER
13463: OR
13464: IFFALSE 13415
// ComTurnUnit ( Burlak , Belkov ) ;
13466: LD_EXP 34
13470: PPUSH
13471: LD_EXP 36
13475: PPUSH
13476: CALL_OW 119
// DialogueOn ;
13480: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13484: LD_EXP 36
13488: PPUSH
13489: LD_STRING D24-Bel-1
13491: PPUSH
13492: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13496: LD_EXP 34
13500: PPUSH
13501: LD_STRING D24-Bur-1
13503: PPUSH
13504: CALL_OW 88
// if belkovBrother then
13508: LD_EXP 32
13512: IFFALSE 13526
// Say ( Burlak , D24-Bur-1a ) ;
13514: LD_EXP 34
13518: PPUSH
13519: LD_STRING D24-Bur-1a
13521: PPUSH
13522: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13526: LD_EXP 36
13530: PPUSH
13531: LD_STRING D24-Bel-2
13533: PPUSH
13534: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13538: LD_EXP 34
13542: PPUSH
13543: LD_STRING D24-Bur-2
13545: PPUSH
13546: CALL_OW 88
// if vehCaptured then
13550: LD_EXP 16
13554: IFFALSE 13568
// Say ( Burlak , D24-Bur-2a ) ;
13556: LD_EXP 34
13560: PPUSH
13561: LD_STRING D24-Bur-2a
13563: PPUSH
13564: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13568: LD_EXP 40
13572: PPUSH
13573: LD_STRING D24-Pla-2
13575: PPUSH
13576: CALL_OW 94
// if not westOutpostDestroyed then
13580: LD_EXP 22
13584: NOT
13585: IFFALSE 13599
// SayRadio ( Platonov , D24-Pla-2a ) ;
13587: LD_EXP 40
13591: PPUSH
13592: LD_STRING D24-Pla-2a
13594: PPUSH
13595: CALL_OW 94
// DialogueOff ;
13599: CALL_OW 7
// InGameOff ;
13603: CALL_OW 9
// belkovSaved := true ;
13607: LD_ADDR_EXP 28
13611: PUSH
13612: LD_INT 1
13614: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13615: LD_ADDR_VAR 0 1
13619: PUSH
13620: LD_EXP 45
13624: PUSH
13625: LD_EXP 36
13629: UNION
13630: PUSH
13631: FOR_IN
13632: IFFALSE 13648
// SetSide ( i , 3 ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_INT 3
13641: PPUSH
13642: CALL_OW 235
13646: GO 13631
13648: POP
13649: POP
// ChangeMissionObjectives ( M9a ) ;
13650: LD_STRING M9a
13652: PPUSH
13653: CALL_OW 337
// end ;
13657: PPOPN 2
13659: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13660: LD_INT 3
13662: PPUSH
13663: LD_INT 22
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 95
13675: PUSH
13676: LD_INT 8
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 69
13691: PPUSH
13692: CALL 57963 0 2
13696: IFFALSE 13881
13698: GO 13700
13700: DISABLE
// begin DialogueOn ;
13701: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13705: LD_INT 49
13707: PPUSH
13708: LD_INT 57
13710: PPUSH
13711: LD_INT 3
13713: PPUSH
13714: LD_INT 12
13716: NEG
13717: PPUSH
13718: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13722: LD_INT 49
13724: PPUSH
13725: LD_INT 57
13727: PPUSH
13728: LD_INT 3
13730: PPUSH
13731: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13735: LD_INT 49
13737: PPUSH
13738: LD_INT 57
13740: PPUSH
13741: CALL_OW 84
// if not eastOutpostDiscovered then
13745: LD_EXP 21
13749: NOT
13750: IFFALSE 13790
// begin Say ( Burlak , D15-Bur-1 ) ;
13752: LD_EXP 34
13756: PPUSH
13757: LD_STRING D15-Bur-1
13759: PPUSH
13760: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13764: LD_EXP 35
13768: PPUSH
13769: LD_STRING D15-Gny-1
13771: PPUSH
13772: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13776: LD_EXP 39
13780: PPUSH
13781: LD_STRING D15-Kov-1
13783: PPUSH
13784: CALL_OW 88
// end else
13788: GO 13826
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13790: LD_EXP 39
13794: PPUSH
13795: LD_STRING D16-Kov-1
13797: PPUSH
13798: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13802: LD_EXP 34
13806: PPUSH
13807: LD_STRING D16-Bur-1
13809: PPUSH
13810: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13814: LD_EXP 35
13818: PPUSH
13819: LD_STRING D16-Gny-1
13821: PPUSH
13822: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13826: LD_EXP 34
13830: PPUSH
13831: LD_STRING D15-Bur-2
13833: PPUSH
13834: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13838: LD_EXP 39
13842: PPUSH
13843: LD_STRING D15-Kov-2
13845: PPUSH
13846: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13850: LD_EXP 34
13854: PPUSH
13855: LD_STRING D15-Bur-3
13857: PPUSH
13858: CALL_OW 88
// DialogueOff ;
13862: CALL_OW 7
// westOutpostDiscovered := true ;
13866: LD_ADDR_EXP 20
13870: PUSH
13871: LD_INT 1
13873: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13874: LD_STRING M7
13876: PPUSH
13877: CALL_OW 337
// end ;
13881: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13882: LD_INT 3
13884: PPUSH
13885: LD_INT 22
13887: PUSH
13888: LD_INT 1
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 95
13897: PUSH
13898: LD_INT 15
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: PPUSH
13914: CALL 57963 0 2
13918: IFFALSE 14059
13920: GO 13922
13922: DISABLE
// begin DialogueOn ;
13923: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13927: LD_INT 95
13929: PPUSH
13930: LD_INT 65
13932: PPUSH
13933: LD_INT 3
13935: PPUSH
13936: LD_INT 12
13938: NEG
13939: PPUSH
13940: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13944: LD_INT 95
13946: PPUSH
13947: LD_INT 65
13949: PPUSH
13950: LD_INT 3
13952: PPUSH
13953: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13957: LD_INT 95
13959: PPUSH
13960: LD_INT 65
13962: PPUSH
13963: CALL_OW 84
// if westOutpostDiscovered then
13967: LD_EXP 20
13971: IFFALSE 14011
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13973: LD_EXP 39
13977: PPUSH
13978: LD_STRING D16-Kov-1
13980: PPUSH
13981: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13985: LD_EXP 34
13989: PPUSH
13990: LD_STRING D16-Bur-1
13992: PPUSH
13993: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13997: LD_EXP 35
14001: PPUSH
14002: LD_STRING D16-Gny-1
14004: PPUSH
14005: CALL_OW 88
// end else
14009: GO 14047
// begin Say ( Burlak , D15-Bur-1 ) ;
14011: LD_EXP 34
14015: PPUSH
14016: LD_STRING D15-Bur-1
14018: PPUSH
14019: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
14023: LD_EXP 35
14027: PPUSH
14028: LD_STRING D15-Gny-1
14030: PPUSH
14031: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
14035: LD_EXP 39
14039: PPUSH
14040: LD_STRING D15-Kov-1
14042: PPUSH
14043: CALL_OW 88
// end ; DialogueOff ;
14047: CALL_OW 7
// eastOutpostDiscovered := true ;
14051: LD_ADDR_EXP 21
14055: PUSH
14056: LD_INT 1
14058: ST_TO_ADDR
// end ;
14059: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14060: LD_INT 8
14062: PPUSH
14063: LD_INT 22
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 50
14075: PUSH
14076: EMPTY
14077: LIST
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PPUSH
14083: CALL_OW 70
14087: PUSH
14088: LD_INT 0
14090: EQUAL
14091: PUSH
14092: LD_EXP 20
14096: AND
14097: IFFALSE 14141
14099: GO 14101
14101: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14102: LD_EXP 34
14106: PPUSH
14107: LD_STRING D20-Bur-1
14109: PPUSH
14110: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14114: LD_EXP 40
14118: PPUSH
14119: LD_STRING D20-Pla-1
14121: PPUSH
14122: CALL_OW 94
// westOutpostDestroyed := true ;
14126: LD_ADDR_EXP 22
14130: PUSH
14131: LD_INT 1
14133: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14134: LD_STRING M8
14136: PPUSH
14137: CALL_OW 337
// end ;
14141: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14142: LD_INT 15
14144: PPUSH
14145: LD_INT 22
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 50
14157: PUSH
14158: EMPTY
14159: LIST
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PPUSH
14165: CALL_OW 70
14169: PUSH
14170: LD_INT 0
14172: EQUAL
14173: PUSH
14174: LD_EXP 21
14178: AND
14179: IFFALSE 14309
14181: GO 14183
14183: DISABLE
14184: LD_INT 0
14186: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14187: LD_EXP 34
14191: PPUSH
14192: LD_STRING D20-Bur-1
14194: PPUSH
14195: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14199: LD_EXP 40
14203: PPUSH
14204: LD_STRING D20-Pla-1
14206: PPUSH
14207: CALL_OW 94
// eastOutpostDestroyed := true ;
14211: LD_ADDR_EXP 23
14215: PUSH
14216: LD_INT 1
14218: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14219: LD_INT 35
14221: PPUSH
14222: CALL_OW 67
// stop_talking := true ;
14226: LD_ADDR_OWVAR 56
14230: PUSH
14231: LD_INT 1
14233: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 22
14241: PUSH
14242: LD_INT 3
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 23
14251: PUSH
14252: LD_INT 3
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 21
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: PUSH
14279: FOR_IN
14280: IFFALSE 14299
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14282: LD_VAR 0 1
14286: PPUSH
14287: LD_INT 1
14289: PPUSH
14290: LD_INT 1500
14292: PPUSH
14293: CALL_OW 591
14297: GO 14279
14299: POP
14300: POP
// stop_talking := false ;
14301: LD_ADDR_OWVAR 56
14305: PUSH
14306: LD_INT 0
14308: ST_TO_ADDR
// end ;
14309: PPOPN 1
14311: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14312: LD_INT 19
14314: PPUSH
14315: LD_INT 22
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 21
14327: PUSH
14328: LD_INT 2
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PPUSH
14339: CALL_OW 70
14343: IFFALSE 14451
14345: GO 14347
14347: DISABLE
// begin DialogueOn ;
14348: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14352: LD_INT 19
14354: PPUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 3
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 2
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PPUSH
14379: CALL_OW 70
14383: PPUSH
14384: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14388: LD_EXP 34
14392: PPUSH
14393: LD_STRING D26-Bur-1
14395: PPUSH
14396: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14400: LD_EXP 39
14404: PPUSH
14405: LD_STRING D26-Kov-1
14407: PPUSH
14408: CALL_OW 88
// if IsOk ( Gnyevko ) then
14412: LD_EXP 35
14416: PPUSH
14417: CALL_OW 302
14421: IFFALSE 14447
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14423: LD_EXP 35
14427: PPUSH
14428: LD_STRING D26-Gny-1
14430: PPUSH
14431: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14435: LD_EXP 34
14439: PPUSH
14440: LD_STRING D26-Bur-2
14442: PPUSH
14443: CALL_OW 88
// end ; DialogueOff ;
14447: CALL_OW 7
// end ;
14451: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14452: LD_EXP 21
14456: PUSH
14457: LD_EXP 23
14461: NOT
14462: AND
14463: PUSH
14464: LD_INT 17
14466: PPUSH
14467: LD_INT 22
14469: PUSH
14470: LD_INT 3
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: LD_INT 1000
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: EMPTY
14495: LIST
14496: LIST
14497: PPUSH
14498: CALL_OW 70
14502: PUSH
14503: LD_INT 1
14505: GREATER
14506: AND
14507: IFFALSE 14570
14509: GO 14511
14511: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14512: LD_EXP 35
14516: PPUSH
14517: LD_STRING D16A-Gny-1
14519: PPUSH
14520: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14524: LD_EXP 39
14528: PPUSH
14529: LD_STRING D16A-Kov-1
14531: PPUSH
14532: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14536: LD_EXP 35
14540: PPUSH
14541: CALL_OW 302
14545: PUSH
14546: LD_EXP 39
14550: PPUSH
14551: CALL_OW 302
14555: OR
14556: IFFALSE 14570
// Say ( Burlak , D16A-Bur-1 ) ;
14558: LD_EXP 34
14562: PPUSH
14563: LD_STRING D16A-Bur-1
14565: PPUSH
14566: CALL_OW 88
// end ;
14570: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14571: LD_INT 3
14573: PPUSH
14574: LD_INT 9
14576: PPUSH
14577: CALL_OW 294
14581: IFFALSE 14594
14583: GO 14585
14585: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14586: LD_ADDR_EXP 24
14590: PUSH
14591: LD_INT 1
14593: ST_TO_ADDR
// end ;
14594: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14595: LD_INT 3
14597: PPUSH
14598: LD_INT 10
14600: PPUSH
14601: CALL_OW 294
14605: IFFALSE 14625
14607: GO 14609
14609: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14610: LD_ADDR_EXP 27
14614: PUSH
14615: LD_EXP 27
14619: PPUSH
14620: CALL 56051 0 1
14624: ST_TO_ADDR
14625: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 11
14631: PPUSH
14632: CALL_OW 294
14636: IFFALSE 14656
14638: GO 14640
14640: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14641: LD_ADDR_EXP 27
14645: PUSH
14646: LD_EXP 27
14650: PPUSH
14651: CALL 56051 0 1
14655: ST_TO_ADDR
14656: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14657: LD_INT 3
14659: PPUSH
14660: LD_INT 12
14662: PPUSH
14663: CALL_OW 294
14667: IFFALSE 14687
14669: GO 14671
14671: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14672: LD_ADDR_EXP 27
14676: PUSH
14677: LD_EXP 27
14681: PPUSH
14682: CALL 56051 0 1
14686: ST_TO_ADDR
14687: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14688: LD_INT 3
14690: PPUSH
14691: LD_INT 13
14693: PPUSH
14694: CALL_OW 294
14698: IFFALSE 14718
14700: GO 14702
14702: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14703: LD_ADDR_EXP 27
14707: PUSH
14708: LD_EXP 27
14712: PPUSH
14713: CALL 56051 0 1
14717: ST_TO_ADDR
14718: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14719: LD_INT 3
14721: PPUSH
14722: LD_INT 14
14724: PPUSH
14725: CALL_OW 294
14729: IFFALSE 14749
14731: GO 14733
14733: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14734: LD_ADDR_EXP 27
14738: PUSH
14739: LD_EXP 27
14743: PPUSH
14744: CALL 56051 0 1
14748: ST_TO_ADDR
14749: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14750: LD_EXP 27
14754: PUSH
14755: LD_INT 5
14757: GREATEREQUAL
14758: PUSH
14759: LD_EXP 14
14763: AND
14764: IFFALSE 14784
14766: GO 14768
14768: DISABLE
// begin allMapPointsSpotted := true ;
14769: LD_ADDR_EXP 26
14773: PUSH
14774: LD_INT 1
14776: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14777: LD_STRING M10
14779: PPUSH
14780: CALL_OW 337
// end ;
14784: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14785: LD_EXP 26
14789: PUSH
14790: LD_EXP 22
14794: AND
14795: IFFALSE 14807
14797: GO 14799
14799: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14800: LD_STRING M10a
14802: PPUSH
14803: CALL_OW 337
// end ;
14807: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14808: LD_EXP 14
14812: IFFALSE 15445
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
// begin wasOutsideBeria := false ;
14824: LD_ADDR_VAR 0 3
14828: PUSH
14829: LD_INT 0
14831: ST_TO_ADDR
// wantToTalk := false ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 0
14839: ST_TO_ADDR
// westOutpostReported := false ;
14840: LD_ADDR_VAR 0 4
14844: PUSH
14845: LD_INT 0
14847: ST_TO_ADDR
// eastOutpostReported := false ;
14848: LD_ADDR_VAR 0 5
14852: PUSH
14853: LD_INT 0
14855: ST_TO_ADDR
// timer := 0 0$0 ;
14856: LD_ADDR_VAR 0 1
14860: PUSH
14861: LD_INT 0
14863: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14864: LD_INT 70
14866: PPUSH
14867: CALL_OW 67
// timer := timer + 0 0$2 ;
14871: LD_ADDR_VAR 0 1
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: LD_INT 70
14883: PLUS
14884: ST_TO_ADDR
// if timer >= 0 0$30 then
14885: LD_VAR 0 1
14889: PUSH
14890: LD_INT 1050
14892: GREATEREQUAL
14893: IFFALSE 14903
// wantToTalk := true ;
14895: LD_ADDR_VAR 0 2
14899: PUSH
14900: LD_INT 1
14902: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14903: LD_EXP 34
14907: PPUSH
14908: LD_EXP 40
14912: PPUSH
14913: CALL_OW 296
14917: PUSH
14918: LD_INT 9
14920: GREATER
14921: IFFALSE 14931
// wasOutsideBeria := true ;
14923: LD_ADDR_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14931: LD_VAR 0 2
14935: PUSH
14936: LD_VAR 0 3
14940: AND
14941: PUSH
14942: LD_EXP 34
14946: PPUSH
14947: LD_EXP 40
14951: PPUSH
14952: CALL_OW 296
14956: PUSH
14957: LD_INT 8
14959: LESS
14960: PUSH
14961: LD_EXP 34
14965: PPUSH
14966: CALL_OW 310
14970: PPUSH
14971: LD_EXP 40
14975: PPUSH
14976: CALL_OW 296
14980: PUSH
14981: LD_INT 8
14983: LESS
14984: OR
14985: AND
14986: IFFALSE 15334
// begin timer := 0 0$0 ;
14988: LD_ADDR_VAR 0 1
14992: PUSH
14993: LD_INT 0
14995: ST_TO_ADDR
// wantToTalk := false ;
14996: LD_ADDR_VAR 0 2
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// wasOutsideBeria := false ;
15004: LD_ADDR_VAR 0 3
15008: PUSH
15009: LD_INT 0
15011: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
15012: LD_EXP 40
15016: PPUSH
15017: CALL_OW 87
// DialogueOn ;
15021: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
15025: LD_EXP 40
15029: PPUSH
15030: LD_STRING D25-Pla-1
15032: PPUSH
15033: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
15037: LD_VAR 0 4
15041: NOT
15042: PUSH
15043: LD_VAR 0 5
15047: NOT
15048: AND
15049: PUSH
15050: LD_EXP 20
15054: AND
15055: PUSH
15056: LD_EXP 21
15060: AND
15061: IFFALSE 15141
// begin westOutpostReported := true ;
15063: LD_ADDR_VAR 0 4
15067: PUSH
15068: LD_INT 1
15070: ST_TO_ADDR
// eastOutpostReported := true ;
15071: LD_ADDR_VAR 0 5
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15079: LD_EXP 34
15083: PPUSH
15084: LD_STRING D25-Bur-1
15086: PPUSH
15087: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15091: LD_EXP 24
15095: PUSH
15096: LD_EXP 22
15100: NOT
15101: AND
15102: IFFALSE 15139
// begin Say ( Burlak , D25b-Bur-1 ) ;
15104: LD_EXP 34
15108: PPUSH
15109: LD_STRING D25b-Bur-1
15111: PPUSH
15112: CALL_OW 88
// if not reinforcementsGained then
15116: LD_EXP 25
15120: NOT
15121: IFFALSE 15139
// begin Say ( Platonov , D25b-Pla-1 ) ;
15123: LD_EXP 40
15127: PPUSH
15128: LD_STRING D25b-Pla-1
15130: PPUSH
15131: CALL_OW 88
// SendReinforcements ( ) ;
15135: CALL 3302 0 0
// end ; end ; end else
15139: GO 15330
// if not westOutpostReported and westOutpostDiscovered then
15141: LD_VAR 0 4
15145: NOT
15146: PUSH
15147: LD_EXP 20
15151: AND
15152: IFFALSE 15224
// begin westOutpostReported := true ;
15154: LD_ADDR_VAR 0 4
15158: PUSH
15159: LD_INT 1
15161: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15162: LD_EXP 34
15166: PPUSH
15167: LD_STRING D25a-Bur-1b
15169: PPUSH
15170: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15174: LD_EXP 24
15178: PUSH
15179: LD_EXP 22
15183: NOT
15184: AND
15185: IFFALSE 15222
// begin Say ( Burlak , D25b-Bur-1 ) ;
15187: LD_EXP 34
15191: PPUSH
15192: LD_STRING D25b-Bur-1
15194: PPUSH
15195: CALL_OW 88
// if not reinforcementsGained then
15199: LD_EXP 25
15203: NOT
15204: IFFALSE 15222
// begin Say ( Platonov , D25b-Pla-1 ) ;
15206: LD_EXP 40
15210: PPUSH
15211: LD_STRING D25b-Pla-1
15213: PPUSH
15214: CALL_OW 88
// SendReinforcements ( ) ;
15218: CALL 3302 0 0
// end ; end ; end else
15222: GO 15330
// if not eastOutpostReported and eastOutpostDiscovered then
15224: LD_VAR 0 5
15228: NOT
15229: PUSH
15230: LD_EXP 21
15234: AND
15235: IFFALSE 15259
// begin eastOutpostReported := true ;
15237: LD_ADDR_VAR 0 5
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15245: LD_EXP 34
15249: PPUSH
15250: LD_STRING D25a-Bur-1a
15252: PPUSH
15253: CALL_OW 88
// end else
15257: GO 15330
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15259: LD_EXP 20
15263: NOT
15264: PUSH
15265: LD_EXP 21
15269: NOT
15270: OR
15271: IFFALSE 15299
// begin Say ( Burlak , D25a-Bur-1 ) ;
15273: LD_EXP 34
15277: PPUSH
15278: LD_STRING D25a-Bur-1
15280: PPUSH
15281: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15285: LD_EXP 40
15289: PPUSH
15290: LD_STRING D25c-Pla-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15330
// if not allMapPointsSpotted then
15299: LD_EXP 26
15303: NOT
15304: IFFALSE 15330
// begin Say ( Burlak , D25a-Bur-1 ) ;
15306: LD_EXP 34
15310: PPUSH
15311: LD_STRING D25a-Bur-1
15313: PPUSH
15314: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15318: LD_EXP 40
15322: PPUSH
15323: LD_STRING D25c-Pla-1a
15325: PPUSH
15326: CALL_OW 88
// end ; DialogueOff ;
15330: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15334: LD_EXP 26
15338: PUSH
15339: LD_EXP 22
15343: AND
15344: IFFALSE 14864
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15346: LD_INT 22
15348: PUSH
15349: LD_INT 3
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 21
15358: PUSH
15359: LD_INT 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 91
15368: PUSH
15369: LD_EXP 40
15373: PUSH
15374: LD_INT 10
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: EMPTY
15383: LIST
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: IFFALSE 15434
// begin if not belkovDied and not belkovSaved then
15393: LD_EXP 19
15397: NOT
15398: PUSH
15399: LD_EXP 28
15403: NOT
15404: AND
15405: IFFALSE 15428
// begin if Query ( QContMission ) = 1 then
15407: LD_STRING QContMission
15409: PPUSH
15410: CALL_OW 97
15414: PUSH
15415: LD_INT 1
15417: EQUAL
15418: IFFALSE 15426
// begin EndMission ;
15420: CALL 15448 0 0
// exit ;
15424: GO 15445
// end ; end else
15426: GO 15434
// begin EndMission ;
15428: CALL 15448 0 0
// exit ;
15432: GO 15445
// end ; end ; wait ( 0 0$10 ) ;
15434: LD_INT 350
15436: PPUSH
15437: CALL_OW 67
// until false ;
15441: LD_INT 0
15443: IFFALSE 15346
// end ;
15445: PPOPN 5
15447: END
// function EndMission ; var i , tmp ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
// if initiative then
15453: LD_EXP 31
15457: IFFALSE 15471
// AddMedal ( Initiative , 1 ) else
15459: LD_STRING Initiative
15461: PPUSH
15462: LD_INT 1
15464: PPUSH
15465: CALL_OW 101
15469: GO 15502
// if not eastOutpostDestroyed then
15471: LD_EXP 23
15475: NOT
15476: IFFALSE 15491
// AddMedal ( Initiative , - 2 ) else
15478: LD_STRING Initiative
15480: PPUSH
15481: LD_INT 2
15483: NEG
15484: PPUSH
15485: CALL_OW 101
15489: GO 15502
// AddMedal ( Initiative , - 1 ) ;
15491: LD_STRING Initiative
15493: PPUSH
15494: LD_INT 1
15496: NEG
15497: PPUSH
15498: CALL_OW 101
// if not belkovDied and belkovSaved then
15502: LD_EXP 19
15506: NOT
15507: PUSH
15508: LD_EXP 28
15512: AND
15513: IFFALSE 15527
// AddMedal ( Belkov , 1 ) else
15515: LD_STRING Belkov
15517: PPUSH
15518: LD_INT 1
15520: PPUSH
15521: CALL_OW 101
15525: GO 15622
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15527: LD_EXP 45
15531: PPUSH
15532: LD_INT 22
15534: PUSH
15535: LD_INT 3
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PPUSH
15542: CALL_OW 72
15546: IFFALSE 15560
// AddMedal ( Belkov , 2 ) else
15548: LD_STRING Belkov
15550: PPUSH
15551: LD_INT 2
15553: PPUSH
15554: CALL_OW 101
15558: GO 15622
// if belkovDied then
15560: LD_EXP 19
15564: IFFALSE 15579
// AddMedal ( Belkov , - 1 ) else
15566: LD_STRING Belkov
15568: PPUSH
15569: LD_INT 1
15571: NEG
15572: PPUSH
15573: CALL_OW 101
15577: GO 15622
// if not belkovSaved then
15579: LD_EXP 28
15583: NOT
15584: IFFALSE 15599
// AddMedal ( Belkov , - 2 ) else
15586: LD_STRING Belkov
15588: PPUSH
15589: LD_INT 2
15591: NEG
15592: PPUSH
15593: CALL_OW 101
15597: GO 15622
// if belkovDied and belkovSaved then
15599: LD_EXP 19
15603: PUSH
15604: LD_EXP 28
15608: AND
15609: IFFALSE 15622
// AddMedal ( Belkov , - 3 ) ;
15611: LD_STRING Belkov
15613: PPUSH
15614: LD_INT 3
15616: NEG
15617: PPUSH
15618: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15622: LD_EXP 30
15626: PUSH
15627: LD_INT 0
15629: EQUAL
15630: IFFALSE 15644
// AddMedal ( NoLosses , 1 ) else
15632: LD_STRING NoLosses
15634: PPUSH
15635: LD_INT 1
15637: PPUSH
15638: CALL_OW 101
15642: GO 15655
// AddMedal ( NoLosses , - 1 ) ;
15644: LD_STRING NoLosses
15646: PPUSH
15647: LD_INT 1
15649: NEG
15650: PPUSH
15651: CALL_OW 101
// GiveMedals ( Main ) ;
15655: LD_STRING Main
15657: PPUSH
15658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15662: LD_INT 22
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: LD_INT 23
15674: PUSH
15675: LD_INT 3
15677: PUSH
15678: EMPTY
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 21
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: LIST
15696: PPUSH
15697: CALL_OW 69
15701: PPUSH
15702: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15706: LD_EXP 34
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING Burlak
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if IsLive ( Gnyevko ) then
15724: LD_EXP 35
15728: PPUSH
15729: CALL_OW 300
15733: IFFALSE 15753
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15735: LD_EXP 35
15739: PPUSH
15740: LD_EXP 3
15744: PUSH
15745: LD_STRING Gnyevko
15747: STR
15748: PPUSH
15749: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15753: LD_EXP 39
15757: PPUSH
15758: CALL_OW 300
15762: IFFALSE 15782
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15764: LD_EXP 39
15768: PPUSH
15769: LD_EXP 3
15773: PUSH
15774: LD_STRING Kovalyuk
15776: STR
15777: PPUSH
15778: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15782: LD_EXP 36
15786: PPUSH
15787: CALL_OW 300
15791: PUSH
15792: LD_EXP 28
15796: AND
15797: IFFALSE 15817
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15799: LD_EXP 36
15803: PPUSH
15804: LD_EXP 3
15808: PUSH
15809: LD_STRING Belkov
15811: STR
15812: PPUSH
15813: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15817: LD_EXP 37
15821: PPUSH
15822: CALL_OW 300
15826: IFFALSE 15846
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15828: LD_EXP 37
15832: PPUSH
15833: LD_EXP 3
15837: PUSH
15838: LD_STRING Kirilenkova
15840: STR
15841: PPUSH
15842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15846: LD_INT 22
15848: PUSH
15849: LD_INT 3
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: LD_INT 23
15858: PUSH
15859: LD_INT 3
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: LD_INT 21
15868: PUSH
15869: LD_INT 1
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: PPUSH
15881: CALL_OW 69
15885: PUSH
15886: LD_EXP 34
15890: PUSH
15891: LD_EXP 35
15895: PUSH
15896: LD_EXP 39
15900: PUSH
15901: LD_EXP 36
15905: PUSH
15906: LD_EXP 37
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: DIFF
15918: PPUSH
15919: LD_EXP 3
15923: PUSH
15924: LD_STRING burlakTeam
15926: STR
15927: PPUSH
15928: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15932: LD_INT 22
15934: PUSH
15935: LD_INT 6
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 23
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 21
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: LIST
15966: PPUSH
15967: CALL_OW 69
15971: PUSH
15972: LD_EXP 40
15976: PUSH
15977: LD_EXP 38
15981: PUSH
15982: LD_EXP 36
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: LIST
15991: PUSH
15992: LD_EXP 45
15996: UNION
15997: DIFF
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING kirovTeam
16006: STR
16007: PPUSH
16008: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
16012: LD_EXP 23
16016: PPUSH
16017: LD_STRING 02_EasternOutpostDestroyed
16019: PPUSH
16020: CALL_OW 39
// tmp := [ ] ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: EMPTY
16030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
16031: LD_ADDR_VAR 0 2
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 3
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: PUSH
16046: LD_INT 21
16048: PUSH
16049: LD_INT 3
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: EMPTY
16057: LIST
16058: LIST
16059: PPUSH
16060: CALL_OW 69
16064: PUSH
16065: FOR_IN
16066: IFFALSE 16142
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16068: LD_ADDR_VAR 0 3
16072: PUSH
16073: LD_VAR 0 3
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 266
16087: PUSH
16088: LD_VAR 0 2
16092: PPUSH
16093: CALL_OW 267
16097: PUSH
16098: LD_VAR 0 2
16102: PPUSH
16103: CALL_OW 250
16107: PUSH
16108: LD_VAR 0 2
16112: PPUSH
16113: CALL_OW 251
16117: PUSH
16118: LD_VAR 0 2
16122: PPUSH
16123: CALL_OW 254
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: PPUSH
16135: CALL 54690 0 2
16139: ST_TO_ADDR
16140: GO 16065
16142: POP
16143: POP
// SaveVariable ( tmp , 02_Beria ) ;
16144: LD_VAR 0 3
16148: PPUSH
16149: LD_STRING 02_Beria
16151: PPUSH
16152: CALL_OW 39
// tmp := [ ] ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: EMPTY
16162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 6
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PPUSH
16192: CALL_OW 69
16196: PUSH
16197: FOR_IN
16198: IFFALSE 16274
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_VAR 0 3
16209: PPUSH
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 266
16219: PUSH
16220: LD_VAR 0 2
16224: PPUSH
16225: CALL_OW 267
16229: PUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 250
16239: PUSH
16240: LD_VAR 0 2
16244: PPUSH
16245: CALL_OW 251
16249: PUSH
16250: LD_VAR 0 2
16254: PPUSH
16255: CALL_OW 254
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: PPUSH
16267: CALL 54690 0 2
16271: ST_TO_ADDR
16272: GO 16197
16274: POP
16275: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16276: LD_VAR 0 3
16280: PPUSH
16281: LD_STRING 02_Kirov
16283: PPUSH
16284: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16288: LD_INT 22
16290: PUSH
16291: LD_INT 3
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: PUSH
16298: LD_INT 21
16300: PUSH
16301: LD_INT 2
16303: PUSH
16304: EMPTY
16305: LIST
16306: LIST
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PPUSH
16312: CALL_OW 69
16316: PPUSH
16317: CALL 19101 0 1
16321: PPUSH
16322: LD_STRING 02_VehiclesCount
16324: PPUSH
16325: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16329: LD_INT 22
16331: PUSH
16332: LD_INT 6
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 21
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: PPUSH
16358: CALL 19101 0 1
16362: PPUSH
16363: LD_STRING 02_KirovVehiclesCount
16365: PPUSH
16366: CALL_OW 39
// YouWin ;
16370: CALL_OW 103
// end ; end_of_file
16374: LD_VAR 0 1
16378: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16379: LD_INT 420
16381: PPUSH
16382: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: CALL 8000 0 2
// end ;
16400: PPOPN 5
16402: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: CALL 75811 0 1
// if un = Burlak then
16412: LD_VAR 0 1
16416: PUSH
16417: LD_EXP 34
16421: EQUAL
16422: IFFALSE 16431
// YouLost ( Burlak ) ;
16424: LD_STRING Burlak
16426: PPUSH
16427: CALL_OW 104
// if un = Platonov then
16431: LD_VAR 0 1
16435: PUSH
16436: LD_EXP 40
16440: EQUAL
16441: IFFALSE 16450
// YouLost ( Platonov ) ;
16443: LD_STRING Platonov
16445: PPUSH
16446: CALL_OW 104
// if un = Kurin then
16450: LD_VAR 0 1
16454: PUSH
16455: LD_EXP 38
16459: EQUAL
16460: IFFALSE 16469
// YouLost ( Kurin ) ;
16462: LD_STRING Kurin
16464: PPUSH
16465: CALL_OW 104
// if un = Belkov then
16469: LD_VAR 0 1
16473: PUSH
16474: LD_EXP 36
16478: EQUAL
16479: IFFALSE 16489
// belkovDied := true ;
16481: LD_ADDR_EXP 19
16485: PUSH
16486: LD_INT 1
16488: ST_TO_ADDR
// if un in belkovTeam then
16489: LD_VAR 0 1
16493: PUSH
16494: LD_EXP 45
16498: IN
16499: IFFALSE 16532
// begin belkovTeam := belkovTeam diff un ;
16501: LD_ADDR_EXP 45
16505: PUSH
16506: LD_EXP 45
16510: PUSH
16511: LD_VAR 0 1
16515: DIFF
16516: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16517: LD_ADDR_EXP 29
16521: PUSH
16522: LD_EXP 29
16526: PPUSH
16527: CALL 56051 0 1
16531: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16532: LD_VAR 0 1
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 3
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 1
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 23
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: LIST
16571: PPUSH
16572: CALL_OW 69
16576: IN
16577: IFFALSE 16594
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16579: LD_ADDR_EXP 30
16583: PUSH
16584: LD_EXP 30
16588: PPUSH
16589: CALL 56051 0 1
16593: ST_TO_ADDR
// if un in usWestForces then
16594: LD_VAR 0 1
16598: PUSH
16599: LD_EXP 46
16603: IN
16604: IFFALSE 16622
// usWestForces := usWestForces diff un ;
16606: LD_ADDR_EXP 46
16610: PUSH
16611: LD_EXP 46
16615: PUSH
16616: LD_VAR 0 1
16620: DIFF
16621: ST_TO_ADDR
// if un in usEastForces then
16622: LD_VAR 0 1
16626: PUSH
16627: LD_EXP 47
16631: IN
16632: IFFALSE 16650
// usEastForces := usEastForces diff un ;
16634: LD_ADDR_EXP 47
16638: PUSH
16639: LD_EXP 47
16643: PUSH
16644: LD_VAR 0 1
16648: DIFF
16649: ST_TO_ADDR
// if un = Dickens then
16650: LD_VAR 0 1
16654: PUSH
16655: LD_EXP 49
16659: EQUAL
16660: IFFALSE 16678
// SaveVariable ( 1 , currentMissionPrefix & DickensKilled ) ;
16662: LD_INT 1
16664: PPUSH
16665: LD_EXP 3
16669: PUSH
16670: LD_STRING DickensKilled
16672: STR
16673: PPUSH
16674: CALL_OW 39
// end ;
16678: PPOPN 1
16680: END
// on BuildingComplete ( b ) do var mech ;
16681: LD_INT 0
16683: PPUSH
// begin if GetSide ( b ) = 3 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 3
16696: EQUAL
16697: IFFALSE 16756
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 6
16711: PUSH
16712: LD_INT 7
16714: PUSH
16715: LD_INT 8
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: LIST
16722: IN
16723: IFFALSE 16733
// hasLab := true ;
16725: LD_ADDR_EXP 9
16729: PUSH
16730: LD_INT 1
16732: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16733: LD_VAR 0 1
16737: PPUSH
16738: CALL_OW 266
16742: PUSH
16743: LD_INT 2
16745: EQUAL
16746: IFFALSE 16756
// hasWorkshop := true ;
16748: LD_ADDR_EXP 10
16752: PUSH
16753: LD_INT 1
16755: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 255
16765: PUSH
16766: LD_INT 6
16768: EQUAL
16769: IFFALSE 16843
// begin if GetBType ( b ) = b_workshop then
16771: LD_VAR 0 1
16775: PPUSH
16776: CALL_OW 266
16780: PUSH
16781: LD_INT 2
16783: EQUAL
16784: IFFALSE 16843
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16786: LD_ADDR_VAR 0 2
16790: PUSH
16791: LD_EXP 43
16795: PPUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 3
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PPUSH
16806: CALL_OW 72
16810: ST_TO_ADDR
// if not mech then
16811: LD_VAR 0 2
16815: NOT
16816: IFFALSE 16820
// exit ;
16818: GO 16843
// ComExit ( mech ) ;
16820: LD_VAR 0 2
16824: PPUSH
16825: CALL 55088 0 1
// AddComEnterUnit ( mech , b ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_VAR 0 1
16838: PPUSH
16839: CALL_OW 180
// end ; end ; end ;
16843: PPOPN 2
16845: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL 75931 0 2
// if GetSide ( vehicle ) = 3 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 255
16869: PUSH
16870: LD_INT 3
16872: EQUAL
16873: IFFALSE 16898
// begin hasTank := true ;
16875: LD_ADDR_EXP 12
16879: PUSH
16880: LD_INT 1
16882: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16883: LD_ADDR_EXP 15
16887: PUSH
16888: LD_EXP 15
16892: PPUSH
16893: CALL 56051 0 1
16897: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL_OW 255
16907: PUSH
16908: LD_INT 6
16910: EQUAL
16911: IFFALSE 16922
// KirovAttack ( vehicle ) ;
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL 3608 0 1
// end ;
16922: PPOPN 2
16924: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16925: LD_VAR 0 1
16929: PUSH
16930: LD_EXP 33
16934: EQUAL
16935: IFFALSE 16941
// BelkovAttackScript ;
16937: CALL 1673 0 0
// end ;
16941: PPOPN 1
16943: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16944: LD_INT 0
16946: PPUSH
// begin if side = 1 then
16947: LD_VAR 0 3
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: IFFALSE 16965
// vehCaptured := true ;
16957: LD_ADDR_EXP 16
16961: PUSH
16962: LD_INT 1
16964: ST_TO_ADDR
// end ;
16965: PPOPN 5
16967: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16968: LD_VAR 0 1
16972: PUSH
16973: LD_INT 3
16975: EQUAL
16976: PUSH
16977: LD_VAR 0 2
16981: PUSH
16982: LD_INT 6
16984: EQUAL
16985: AND
16986: IFFALSE 16996
// allianceAttacked := true ;
16988: LD_ADDR_EXP 13
16992: PUSH
16993: LD_INT 1
16995: ST_TO_ADDR
// end ; end_of_file
16996: PPOPN 2
16998: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16999: LD_INT 0
17001: PPUSH
17002: PPUSH
// if exist_mode then
17003: LD_VAR 0 2
17007: IFFALSE 17032
// unit := CreateCharacter ( prefix & ident ) else
17009: LD_ADDR_VAR 0 5
17013: PUSH
17014: LD_VAR 0 3
17018: PUSH
17019: LD_VAR 0 1
17023: STR
17024: PPUSH
17025: CALL_OW 34
17029: ST_TO_ADDR
17030: GO 17047
// unit := NewCharacter ( ident ) ;
17032: LD_ADDR_VAR 0 5
17036: PUSH
17037: LD_VAR 0 1
17041: PPUSH
17042: CALL_OW 25
17046: ST_TO_ADDR
// result := unit ;
17047: LD_ADDR_VAR 0 4
17051: PUSH
17052: LD_VAR 0 5
17056: ST_TO_ADDR
// end ;
17057: LD_VAR 0 4
17061: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
17062: LD_INT 0
17064: PPUSH
17065: PPUSH
// if not side or not nation then
17066: LD_VAR 0 1
17070: NOT
17071: PUSH
17072: LD_VAR 0 2
17076: NOT
17077: OR
17078: IFFALSE 17082
// exit ;
17080: GO 17850
// case nation of nation_american :
17082: LD_VAR 0 2
17086: PUSH
17087: LD_INT 1
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17309
17095: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17096: LD_ADDR_VAR 0 4
17100: PUSH
17101: LD_INT 35
17103: PUSH
17104: LD_INT 45
17106: PUSH
17107: LD_INT 46
17109: PUSH
17110: LD_INT 47
17112: PUSH
17113: LD_INT 82
17115: PUSH
17116: LD_INT 83
17118: PUSH
17119: LD_INT 84
17121: PUSH
17122: LD_INT 85
17124: PUSH
17125: LD_INT 86
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: LD_INT 6
17136: PUSH
17137: LD_INT 15
17139: PUSH
17140: LD_INT 16
17142: PUSH
17143: LD_INT 7
17145: PUSH
17146: LD_INT 12
17148: PUSH
17149: LD_INT 13
17151: PUSH
17152: LD_INT 10
17154: PUSH
17155: LD_INT 14
17157: PUSH
17158: LD_INT 20
17160: PUSH
17161: LD_INT 21
17163: PUSH
17164: LD_INT 22
17166: PUSH
17167: LD_INT 25
17169: PUSH
17170: LD_INT 32
17172: PUSH
17173: LD_INT 27
17175: PUSH
17176: LD_INT 36
17178: PUSH
17179: LD_INT 69
17181: PUSH
17182: LD_INT 39
17184: PUSH
17185: LD_INT 34
17187: PUSH
17188: LD_INT 40
17190: PUSH
17191: LD_INT 48
17193: PUSH
17194: LD_INT 49
17196: PUSH
17197: LD_INT 50
17199: PUSH
17200: LD_INT 51
17202: PUSH
17203: LD_INT 52
17205: PUSH
17206: LD_INT 53
17208: PUSH
17209: LD_INT 54
17211: PUSH
17212: LD_INT 55
17214: PUSH
17215: LD_INT 56
17217: PUSH
17218: LD_INT 57
17220: PUSH
17221: LD_INT 58
17223: PUSH
17224: LD_INT 59
17226: PUSH
17227: LD_INT 60
17229: PUSH
17230: LD_INT 61
17232: PUSH
17233: LD_INT 62
17235: PUSH
17236: LD_INT 80
17238: PUSH
17239: LD_INT 82
17241: PUSH
17242: LD_INT 83
17244: PUSH
17245: LD_INT 84
17247: PUSH
17248: LD_INT 85
17250: PUSH
17251: LD_INT 86
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: LIST
17291: LIST
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 17774
17309: LD_INT 2
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17543
17317: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17318: LD_ADDR_VAR 0 4
17322: PUSH
17323: LD_INT 35
17325: PUSH
17326: LD_INT 45
17328: PUSH
17329: LD_INT 46
17331: PUSH
17332: LD_INT 47
17334: PUSH
17335: LD_INT 82
17337: PUSH
17338: LD_INT 83
17340: PUSH
17341: LD_INT 84
17343: PUSH
17344: LD_INT 85
17346: PUSH
17347: LD_INT 87
17349: PUSH
17350: LD_INT 70
17352: PUSH
17353: LD_INT 1
17355: PUSH
17356: LD_INT 11
17358: PUSH
17359: LD_INT 3
17361: PUSH
17362: LD_INT 4
17364: PUSH
17365: LD_INT 5
17367: PUSH
17368: LD_INT 6
17370: PUSH
17371: LD_INT 15
17373: PUSH
17374: LD_INT 18
17376: PUSH
17377: LD_INT 7
17379: PUSH
17380: LD_INT 17
17382: PUSH
17383: LD_INT 8
17385: PUSH
17386: LD_INT 20
17388: PUSH
17389: LD_INT 21
17391: PUSH
17392: LD_INT 22
17394: PUSH
17395: LD_INT 72
17397: PUSH
17398: LD_INT 26
17400: PUSH
17401: LD_INT 69
17403: PUSH
17404: LD_INT 39
17406: PUSH
17407: LD_INT 40
17409: PUSH
17410: LD_INT 41
17412: PUSH
17413: LD_INT 42
17415: PUSH
17416: LD_INT 43
17418: PUSH
17419: LD_INT 48
17421: PUSH
17422: LD_INT 49
17424: PUSH
17425: LD_INT 50
17427: PUSH
17428: LD_INT 51
17430: PUSH
17431: LD_INT 52
17433: PUSH
17434: LD_INT 53
17436: PUSH
17437: LD_INT 54
17439: PUSH
17440: LD_INT 55
17442: PUSH
17443: LD_INT 56
17445: PUSH
17446: LD_INT 60
17448: PUSH
17449: LD_INT 61
17451: PUSH
17452: LD_INT 62
17454: PUSH
17455: LD_INT 66
17457: PUSH
17458: LD_INT 67
17460: PUSH
17461: LD_INT 68
17463: PUSH
17464: LD_INT 81
17466: PUSH
17467: LD_INT 82
17469: PUSH
17470: LD_INT 83
17472: PUSH
17473: LD_INT 84
17475: PUSH
17476: LD_INT 85
17478: PUSH
17479: LD_INT 87
17481: PUSH
17482: LD_INT 88
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: ST_TO_ADDR
17541: GO 17774
17543: LD_INT 3
17545: DOUBLE
17546: EQUAL
17547: IFTRUE 17551
17549: GO 17773
17551: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17552: LD_ADDR_VAR 0 4
17556: PUSH
17557: LD_INT 46
17559: PUSH
17560: LD_INT 47
17562: PUSH
17563: LD_INT 1
17565: PUSH
17566: LD_INT 2
17568: PUSH
17569: LD_INT 82
17571: PUSH
17572: LD_INT 83
17574: PUSH
17575: LD_INT 84
17577: PUSH
17578: LD_INT 85
17580: PUSH
17581: LD_INT 86
17583: PUSH
17584: LD_INT 11
17586: PUSH
17587: LD_INT 9
17589: PUSH
17590: LD_INT 20
17592: PUSH
17593: LD_INT 19
17595: PUSH
17596: LD_INT 21
17598: PUSH
17599: LD_INT 24
17601: PUSH
17602: LD_INT 22
17604: PUSH
17605: LD_INT 25
17607: PUSH
17608: LD_INT 28
17610: PUSH
17611: LD_INT 29
17613: PUSH
17614: LD_INT 30
17616: PUSH
17617: LD_INT 31
17619: PUSH
17620: LD_INT 37
17622: PUSH
17623: LD_INT 38
17625: PUSH
17626: LD_INT 32
17628: PUSH
17629: LD_INT 27
17631: PUSH
17632: LD_INT 33
17634: PUSH
17635: LD_INT 69
17637: PUSH
17638: LD_INT 39
17640: PUSH
17641: LD_INT 34
17643: PUSH
17644: LD_INT 40
17646: PUSH
17647: LD_INT 71
17649: PUSH
17650: LD_INT 23
17652: PUSH
17653: LD_INT 44
17655: PUSH
17656: LD_INT 48
17658: PUSH
17659: LD_INT 49
17661: PUSH
17662: LD_INT 50
17664: PUSH
17665: LD_INT 51
17667: PUSH
17668: LD_INT 52
17670: PUSH
17671: LD_INT 53
17673: PUSH
17674: LD_INT 54
17676: PUSH
17677: LD_INT 55
17679: PUSH
17680: LD_INT 56
17682: PUSH
17683: LD_INT 57
17685: PUSH
17686: LD_INT 58
17688: PUSH
17689: LD_INT 59
17691: PUSH
17692: LD_INT 63
17694: PUSH
17695: LD_INT 64
17697: PUSH
17698: LD_INT 65
17700: PUSH
17701: LD_INT 82
17703: PUSH
17704: LD_INT 83
17706: PUSH
17707: LD_INT 84
17709: PUSH
17710: LD_INT 85
17712: PUSH
17713: LD_INT 86
17715: PUSH
17716: EMPTY
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
17771: GO 17774
17773: POP
// if state > - 1 and state < 3 then
17774: LD_VAR 0 3
17778: PUSH
17779: LD_INT 1
17781: NEG
17782: GREATER
17783: PUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 3
17791: LESS
17792: AND
17793: IFFALSE 17850
// for i in result do
17795: LD_ADDR_VAR 0 5
17799: PUSH
17800: LD_VAR 0 4
17804: PUSH
17805: FOR_IN
17806: IFFALSE 17848
// if GetTech ( i , side ) <> state then
17808: LD_VAR 0 5
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 321
17822: PUSH
17823: LD_VAR 0 3
17827: NONEQUAL
17828: IFFALSE 17846
// result := result diff i ;
17830: LD_ADDR_VAR 0 4
17834: PUSH
17835: LD_VAR 0 4
17839: PUSH
17840: LD_VAR 0 5
17844: DIFF
17845: ST_TO_ADDR
17846: GO 17805
17848: POP
17849: POP
// end ;
17850: LD_VAR 0 4
17854: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17855: LD_INT 0
17857: PPUSH
17858: PPUSH
17859: PPUSH
// result := true ;
17860: LD_ADDR_VAR 0 3
17864: PUSH
17865: LD_INT 1
17867: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17868: LD_ADDR_VAR 0 5
17872: PUSH
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 480
17882: ST_TO_ADDR
// if not tmp then
17883: LD_VAR 0 5
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 17941
// for i in tmp do
17892: LD_ADDR_VAR 0 4
17896: PUSH
17897: LD_VAR 0 5
17901: PUSH
17902: FOR_IN
17903: IFFALSE 17939
// if GetTech ( i , side ) <> state_researched then
17905: LD_VAR 0 4
17909: PPUSH
17910: LD_VAR 0 1
17914: PPUSH
17915: CALL_OW 321
17919: PUSH
17920: LD_INT 2
17922: NONEQUAL
17923: IFFALSE 17937
// begin result := false ;
17925: LD_ADDR_VAR 0 3
17929: PUSH
17930: LD_INT 0
17932: ST_TO_ADDR
// exit ;
17933: POP
17934: POP
17935: GO 17941
// end ;
17937: GO 17902
17939: POP
17940: POP
// end ;
17941: LD_VAR 0 3
17945: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17946: LD_INT 0
17948: PPUSH
17949: PPUSH
17950: PPUSH
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
17955: PPUSH
17956: PPUSH
17957: PPUSH
17958: PPUSH
17959: PPUSH
17960: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17961: LD_VAR 0 1
17965: NOT
17966: PUSH
17967: LD_VAR 0 1
17971: PPUSH
17972: CALL_OW 257
17976: PUSH
17977: LD_INT 9
17979: NONEQUAL
17980: OR
17981: IFFALSE 17985
// exit ;
17983: GO 18558
// side := GetSide ( unit ) ;
17985: LD_ADDR_VAR 0 9
17989: PUSH
17990: LD_VAR 0 1
17994: PPUSH
17995: CALL_OW 255
17999: ST_TO_ADDR
// tech_space := tech_spacanom ;
18000: LD_ADDR_VAR 0 12
18004: PUSH
18005: LD_INT 29
18007: ST_TO_ADDR
// tech_time := tech_taurad ;
18008: LD_ADDR_VAR 0 13
18012: PUSH
18013: LD_INT 28
18015: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
18016: LD_ADDR_VAR 0 11
18020: PUSH
18021: LD_VAR 0 1
18025: PPUSH
18026: CALL_OW 310
18030: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
18031: LD_VAR 0 11
18035: PPUSH
18036: CALL_OW 247
18040: PUSH
18041: LD_INT 2
18043: EQUAL
18044: IFFALSE 18048
// exit ;
18046: GO 18558
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18048: LD_ADDR_VAR 0 8
18052: PUSH
18053: LD_INT 81
18055: PUSH
18056: LD_VAR 0 9
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 3
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: EMPTY
18075: LIST
18076: LIST
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PPUSH
18086: CALL_OW 69
18090: ST_TO_ADDR
// if not tmp then
18091: LD_VAR 0 8
18095: NOT
18096: IFFALSE 18100
// exit ;
18098: GO 18558
// if in_unit then
18100: LD_VAR 0 11
18104: IFFALSE 18128
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18106: LD_ADDR_VAR 0 10
18110: PUSH
18111: LD_VAR 0 8
18115: PPUSH
18116: LD_VAR 0 11
18120: PPUSH
18121: CALL_OW 74
18125: ST_TO_ADDR
18126: GO 18148
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18128: LD_ADDR_VAR 0 10
18132: PUSH
18133: LD_VAR 0 8
18137: PPUSH
18138: LD_VAR 0 1
18142: PPUSH
18143: CALL_OW 74
18147: ST_TO_ADDR
// if not enemy then
18148: LD_VAR 0 10
18152: NOT
18153: IFFALSE 18157
// exit ;
18155: GO 18558
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18157: LD_VAR 0 11
18161: PUSH
18162: LD_VAR 0 11
18166: PPUSH
18167: LD_VAR 0 10
18171: PPUSH
18172: CALL_OW 296
18176: PUSH
18177: LD_INT 13
18179: GREATER
18180: AND
18181: PUSH
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_VAR 0 10
18191: PPUSH
18192: CALL_OW 296
18196: PUSH
18197: LD_INT 12
18199: GREATER
18200: OR
18201: IFFALSE 18205
// exit ;
18203: GO 18558
// missile := [ 1 ] ;
18205: LD_ADDR_VAR 0 14
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18216: LD_VAR 0 9
18220: PPUSH
18221: LD_VAR 0 12
18225: PPUSH
18226: CALL_OW 325
18230: IFFALSE 18259
// missile := Replace ( missile , missile + 1 , 2 ) ;
18232: LD_ADDR_VAR 0 14
18236: PUSH
18237: LD_VAR 0 14
18241: PPUSH
18242: LD_VAR 0 14
18246: PUSH
18247: LD_INT 1
18249: PLUS
18250: PPUSH
18251: LD_INT 2
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18259: LD_VAR 0 9
18263: PPUSH
18264: LD_VAR 0 13
18268: PPUSH
18269: CALL_OW 325
18273: PUSH
18274: LD_VAR 0 10
18278: PPUSH
18279: CALL_OW 255
18283: PPUSH
18284: LD_VAR 0 13
18288: PPUSH
18289: CALL_OW 325
18293: NOT
18294: AND
18295: IFFALSE 18324
// missile := Replace ( missile , missile + 1 , 3 ) ;
18297: LD_ADDR_VAR 0 14
18301: PUSH
18302: LD_VAR 0 14
18306: PPUSH
18307: LD_VAR 0 14
18311: PUSH
18312: LD_INT 1
18314: PLUS
18315: PPUSH
18316: LD_INT 3
18318: PPUSH
18319: CALL_OW 1
18323: ST_TO_ADDR
// if missile < 2 then
18324: LD_VAR 0 14
18328: PUSH
18329: LD_INT 2
18331: LESS
18332: IFFALSE 18336
// exit ;
18334: GO 18558
// x := GetX ( enemy ) ;
18336: LD_ADDR_VAR 0 4
18340: PUSH
18341: LD_VAR 0 10
18345: PPUSH
18346: CALL_OW 250
18350: ST_TO_ADDR
// y := GetY ( enemy ) ;
18351: LD_ADDR_VAR 0 5
18355: PUSH
18356: LD_VAR 0 10
18360: PPUSH
18361: CALL_OW 251
18365: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18366: LD_ADDR_VAR 0 6
18370: PUSH
18371: LD_VAR 0 4
18375: PUSH
18376: LD_INT 1
18378: NEG
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: CALL_OW 12
18387: PLUS
18388: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18389: LD_ADDR_VAR 0 7
18393: PUSH
18394: LD_VAR 0 5
18398: PUSH
18399: LD_INT 1
18401: NEG
18402: PPUSH
18403: LD_INT 1
18405: PPUSH
18406: CALL_OW 12
18410: PLUS
18411: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18412: LD_VAR 0 6
18416: PPUSH
18417: LD_VAR 0 7
18421: PPUSH
18422: CALL_OW 488
18426: NOT
18427: IFFALSE 18449
// begin _x := x ;
18429: LD_ADDR_VAR 0 6
18433: PUSH
18434: LD_VAR 0 4
18438: ST_TO_ADDR
// _y := y ;
18439: LD_ADDR_VAR 0 7
18443: PUSH
18444: LD_VAR 0 5
18448: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18449: LD_ADDR_VAR 0 3
18453: PUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_VAR 0 14
18461: PPUSH
18462: CALL_OW 12
18466: ST_TO_ADDR
// case i of 1 :
18467: LD_VAR 0 3
18471: PUSH
18472: LD_INT 1
18474: DOUBLE
18475: EQUAL
18476: IFTRUE 18480
18478: GO 18497
18480: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18481: LD_VAR 0 1
18485: PPUSH
18486: LD_VAR 0 10
18490: PPUSH
18491: CALL_OW 115
18495: GO 18558
18497: LD_INT 2
18499: DOUBLE
18500: EQUAL
18501: IFTRUE 18505
18503: GO 18527
18505: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18506: LD_VAR 0 1
18510: PPUSH
18511: LD_VAR 0 6
18515: PPUSH
18516: LD_VAR 0 7
18520: PPUSH
18521: CALL_OW 153
18525: GO 18558
18527: LD_INT 3
18529: DOUBLE
18530: EQUAL
18531: IFTRUE 18535
18533: GO 18557
18535: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18536: LD_VAR 0 1
18540: PPUSH
18541: LD_VAR 0 6
18545: PPUSH
18546: LD_VAR 0 7
18550: PPUSH
18551: CALL_OW 154
18555: GO 18558
18557: POP
// end ;
18558: LD_VAR 0 2
18562: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18563: LD_INT 0
18565: PPUSH
18566: PPUSH
18567: PPUSH
18568: PPUSH
18569: PPUSH
18570: PPUSH
// if not unit or not building then
18571: LD_VAR 0 1
18575: NOT
18576: PUSH
18577: LD_VAR 0 2
18581: NOT
18582: OR
18583: IFFALSE 18587
// exit ;
18585: GO 18745
// x := GetX ( building ) ;
18587: LD_ADDR_VAR 0 5
18591: PUSH
18592: LD_VAR 0 2
18596: PPUSH
18597: CALL_OW 250
18601: ST_TO_ADDR
// y := GetY ( building ) ;
18602: LD_ADDR_VAR 0 6
18606: PUSH
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 251
18616: ST_TO_ADDR
// for i = 0 to 5 do
18617: LD_ADDR_VAR 0 4
18621: PUSH
18622: DOUBLE
18623: LD_INT 0
18625: DEC
18626: ST_TO_ADDR
18627: LD_INT 5
18629: PUSH
18630: FOR_TO
18631: IFFALSE 18743
// begin _x := ShiftX ( x , i , 3 ) ;
18633: LD_ADDR_VAR 0 7
18637: PUSH
18638: LD_VAR 0 5
18642: PPUSH
18643: LD_VAR 0 4
18647: PPUSH
18648: LD_INT 3
18650: PPUSH
18651: CALL_OW 272
18655: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18656: LD_ADDR_VAR 0 8
18660: PUSH
18661: LD_VAR 0 6
18665: PPUSH
18666: LD_VAR 0 4
18670: PPUSH
18671: LD_INT 3
18673: PPUSH
18674: CALL_OW 273
18678: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18679: LD_VAR 0 7
18683: PPUSH
18684: LD_VAR 0 8
18688: PPUSH
18689: CALL_OW 488
18693: NOT
18694: IFFALSE 18698
// continue ;
18696: GO 18630
// if HexInfo ( _x , _y ) = 0 then
18698: LD_VAR 0 7
18702: PPUSH
18703: LD_VAR 0 8
18707: PPUSH
18708: CALL_OW 428
18712: PUSH
18713: LD_INT 0
18715: EQUAL
18716: IFFALSE 18741
// begin ComMoveXY ( unit , _x , _y ) ;
18718: LD_VAR 0 1
18722: PPUSH
18723: LD_VAR 0 7
18727: PPUSH
18728: LD_VAR 0 8
18732: PPUSH
18733: CALL_OW 111
// exit ;
18737: POP
18738: POP
18739: GO 18745
// end ; end ;
18741: GO 18630
18743: POP
18744: POP
// end ;
18745: LD_VAR 0 3
18749: RET
// export function ScanBase ( side , base_area ) ; begin
18750: LD_INT 0
18752: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18753: LD_ADDR_VAR 0 3
18757: PUSH
18758: LD_VAR 0 2
18762: PPUSH
18763: LD_INT 81
18765: PUSH
18766: LD_VAR 0 1
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PPUSH
18775: CALL_OW 70
18779: ST_TO_ADDR
// end ;
18780: LD_VAR 0 3
18784: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18785: LD_INT 0
18787: PPUSH
18788: PPUSH
18789: PPUSH
18790: PPUSH
// result := false ;
18791: LD_ADDR_VAR 0 2
18795: PUSH
18796: LD_INT 0
18798: ST_TO_ADDR
// side := GetSide ( unit ) ;
18799: LD_ADDR_VAR 0 3
18803: PUSH
18804: LD_VAR 0 1
18808: PPUSH
18809: CALL_OW 255
18813: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18814: LD_ADDR_VAR 0 4
18818: PUSH
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 248
18828: ST_TO_ADDR
// case nat of 1 :
18829: LD_VAR 0 4
18833: PUSH
18834: LD_INT 1
18836: DOUBLE
18837: EQUAL
18838: IFTRUE 18842
18840: GO 18853
18842: POP
// tech := tech_lassight ; 2 :
18843: LD_ADDR_VAR 0 5
18847: PUSH
18848: LD_INT 12
18850: ST_TO_ADDR
18851: GO 18892
18853: LD_INT 2
18855: DOUBLE
18856: EQUAL
18857: IFTRUE 18861
18859: GO 18872
18861: POP
// tech := tech_mortar ; 3 :
18862: LD_ADDR_VAR 0 5
18866: PUSH
18867: LD_INT 41
18869: ST_TO_ADDR
18870: GO 18892
18872: LD_INT 3
18874: DOUBLE
18875: EQUAL
18876: IFTRUE 18880
18878: GO 18891
18880: POP
// tech := tech_bazooka ; end ;
18881: LD_ADDR_VAR 0 5
18885: PUSH
18886: LD_INT 44
18888: ST_TO_ADDR
18889: GO 18892
18891: POP
// if Researched ( side , tech ) then
18892: LD_VAR 0 3
18896: PPUSH
18897: LD_VAR 0 5
18901: PPUSH
18902: CALL_OW 325
18906: IFFALSE 18933
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: LD_INT 5
18915: PUSH
18916: LD_INT 8
18918: PUSH
18919: LD_INT 9
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: LIST
18926: PUSH
18927: LD_VAR 0 4
18931: ARRAY
18932: ST_TO_ADDR
// end ;
18933: LD_VAR 0 2
18937: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18938: LD_INT 0
18940: PPUSH
18941: PPUSH
18942: PPUSH
// if not mines then
18943: LD_VAR 0 2
18947: NOT
18948: IFFALSE 18952
// exit ;
18950: GO 19096
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18952: LD_ADDR_VAR 0 5
18956: PUSH
18957: LD_INT 81
18959: PUSH
18960: LD_VAR 0 1
18964: PUSH
18965: EMPTY
18966: LIST
18967: LIST
18968: PUSH
18969: LD_INT 3
18971: PUSH
18972: LD_INT 21
18974: PUSH
18975: LD_INT 3
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PPUSH
18990: CALL_OW 69
18994: ST_TO_ADDR
// for i in mines do
18995: LD_ADDR_VAR 0 4
18999: PUSH
19000: LD_VAR 0 2
19004: PUSH
19005: FOR_IN
19006: IFFALSE 19094
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
19008: LD_VAR 0 4
19012: PUSH
19013: LD_INT 1
19015: ARRAY
19016: PPUSH
19017: LD_VAR 0 4
19021: PUSH
19022: LD_INT 2
19024: ARRAY
19025: PPUSH
19026: CALL_OW 458
19030: NOT
19031: IFFALSE 19035
// continue ;
19033: GO 19005
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
19035: LD_VAR 0 4
19039: PUSH
19040: LD_INT 1
19042: ARRAY
19043: PPUSH
19044: LD_VAR 0 4
19048: PUSH
19049: LD_INT 2
19051: ARRAY
19052: PPUSH
19053: CALL_OW 428
19057: PUSH
19058: LD_VAR 0 5
19062: IN
19063: IFFALSE 19092
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
19065: LD_VAR 0 4
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: LD_VAR 0 4
19078: PUSH
19079: LD_INT 2
19081: ARRAY
19082: PPUSH
19083: LD_VAR 0 1
19087: PPUSH
19088: CALL_OW 456
// end ;
19092: GO 19005
19094: POP
19095: POP
// end ;
19096: LD_VAR 0 3
19100: RET
// export function Count ( array ) ; begin
19101: LD_INT 0
19103: PPUSH
// result := array + 0 ;
19104: LD_ADDR_VAR 0 2
19108: PUSH
19109: LD_VAR 0 1
19113: PUSH
19114: LD_INT 0
19116: PLUS
19117: ST_TO_ADDR
// end ;
19118: LD_VAR 0 2
19122: RET
// export function IsEmpty ( building ) ; begin
19123: LD_INT 0
19125: PPUSH
// if not building then
19126: LD_VAR 0 1
19130: NOT
19131: IFFALSE 19135
// exit ;
19133: GO 19178
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19135: LD_ADDR_VAR 0 2
19139: PUSH
19140: LD_VAR 0 1
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_VAR 0 1
19152: PPUSH
19153: CALL_OW 255
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: PUSH
19162: LD_INT 58
19164: PUSH
19165: EMPTY
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: IN
19177: ST_TO_ADDR
// end ;
19178: LD_VAR 0 2
19182: RET
// export function IsNotFull ( building ) ; var places ; begin
19183: LD_INT 0
19185: PPUSH
19186: PPUSH
// if not building then
19187: LD_VAR 0 1
19191: NOT
19192: IFFALSE 19196
// exit ;
19194: GO 19224
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
19196: LD_ADDR_VAR 0 2
19200: PUSH
19201: LD_VAR 0 1
19205: PPUSH
19206: LD_INT 3
19208: PUSH
19209: LD_INT 62
19211: PUSH
19212: EMPTY
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PPUSH
19219: CALL_OW 72
19223: ST_TO_ADDR
// end ;
19224: LD_VAR 0 2
19228: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19229: LD_INT 0
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
// tmp := [ ] ;
19235: LD_ADDR_VAR 0 3
19239: PUSH
19240: EMPTY
19241: ST_TO_ADDR
// list := [ ] ;
19242: LD_ADDR_VAR 0 5
19246: PUSH
19247: EMPTY
19248: ST_TO_ADDR
// for i = 16 to 25 do
19249: LD_ADDR_VAR 0 4
19253: PUSH
19254: DOUBLE
19255: LD_INT 16
19257: DEC
19258: ST_TO_ADDR
19259: LD_INT 25
19261: PUSH
19262: FOR_TO
19263: IFFALSE 19336
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19265: LD_ADDR_VAR 0 3
19269: PUSH
19270: LD_VAR 0 3
19274: PUSH
19275: LD_INT 22
19277: PUSH
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 255
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: LD_INT 91
19294: PUSH
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 6
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 30
19310: PUSH
19311: LD_VAR 0 4
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: PUSH
19325: EMPTY
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: ADD
19333: ST_TO_ADDR
19334: GO 19262
19336: POP
19337: POP
// for i = 1 to tmp do
19338: LD_ADDR_VAR 0 4
19342: PUSH
19343: DOUBLE
19344: LD_INT 1
19346: DEC
19347: ST_TO_ADDR
19348: LD_VAR 0 3
19352: PUSH
19353: FOR_TO
19354: IFFALSE 19442
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19356: LD_ADDR_VAR 0 5
19360: PUSH
19361: LD_VAR 0 5
19365: PUSH
19366: LD_VAR 0 3
19370: PUSH
19371: LD_VAR 0 4
19375: ARRAY
19376: PPUSH
19377: CALL_OW 266
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_VAR 0 4
19391: ARRAY
19392: PPUSH
19393: CALL_OW 250
19397: PUSH
19398: LD_VAR 0 3
19402: PUSH
19403: LD_VAR 0 4
19407: ARRAY
19408: PPUSH
19409: CALL_OW 251
19413: PUSH
19414: LD_VAR 0 3
19418: PUSH
19419: LD_VAR 0 4
19423: ARRAY
19424: PPUSH
19425: CALL_OW 254
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: PUSH
19436: EMPTY
19437: LIST
19438: ADD
19439: ST_TO_ADDR
19440: GO 19353
19442: POP
19443: POP
// result := list ;
19444: LD_ADDR_VAR 0 2
19448: PUSH
19449: LD_VAR 0 5
19453: ST_TO_ADDR
// end ;
19454: LD_VAR 0 2
19458: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
// if not factory then
19468: LD_VAR 0 1
19472: NOT
19473: IFFALSE 19477
// exit ;
19475: GO 20070
// if control = control_apeman then
19477: LD_VAR 0 4
19481: PUSH
19482: LD_INT 5
19484: EQUAL
19485: IFFALSE 19594
// begin tmp := UnitsInside ( factory ) ;
19487: LD_ADDR_VAR 0 8
19491: PUSH
19492: LD_VAR 0 1
19496: PPUSH
19497: CALL_OW 313
19501: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19502: LD_VAR 0 8
19506: PPUSH
19507: LD_INT 25
19509: PUSH
19510: LD_INT 12
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PPUSH
19517: CALL_OW 72
19521: NOT
19522: IFFALSE 19532
// control := control_manual ;
19524: LD_ADDR_VAR 0 4
19528: PUSH
19529: LD_INT 1
19531: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19532: LD_ADDR_VAR 0 8
19536: PUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL 19229 0 1
19546: ST_TO_ADDR
// if tmp then
19547: LD_VAR 0 8
19551: IFFALSE 19594
// begin for i in tmp do
19553: LD_ADDR_VAR 0 7
19557: PUSH
19558: LD_VAR 0 8
19562: PUSH
19563: FOR_IN
19564: IFFALSE 19592
// if i [ 1 ] = b_ext_radio then
19566: LD_VAR 0 7
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PUSH
19575: LD_INT 22
19577: EQUAL
19578: IFFALSE 19590
// begin control := control_remote ;
19580: LD_ADDR_VAR 0 4
19584: PUSH
19585: LD_INT 2
19587: ST_TO_ADDR
// break ;
19588: GO 19592
// end ;
19590: GO 19563
19592: POP
19593: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19594: LD_VAR 0 1
19598: PPUSH
19599: LD_VAR 0 2
19603: PPUSH
19604: LD_VAR 0 3
19608: PPUSH
19609: LD_VAR 0 4
19613: PPUSH
19614: LD_VAR 0 5
19618: PPUSH
19619: CALL_OW 448
19623: IFFALSE 19658
// begin result := [ chassis , engine , control , weapon ] ;
19625: LD_ADDR_VAR 0 6
19629: PUSH
19630: LD_VAR 0 2
19634: PUSH
19635: LD_VAR 0 3
19639: PUSH
19640: LD_VAR 0 4
19644: PUSH
19645: LD_VAR 0 5
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: LIST
19654: LIST
19655: ST_TO_ADDR
// exit ;
19656: GO 20070
// end ; _chassis := AvailableChassisList ( factory ) ;
19658: LD_ADDR_VAR 0 9
19662: PUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL_OW 475
19672: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19673: LD_ADDR_VAR 0 11
19677: PUSH
19678: LD_VAR 0 1
19682: PPUSH
19683: CALL_OW 476
19687: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19688: LD_ADDR_VAR 0 12
19692: PUSH
19693: LD_VAR 0 1
19697: PPUSH
19698: CALL_OW 477
19702: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19703: LD_ADDR_VAR 0 10
19707: PUSH
19708: LD_VAR 0 1
19712: PPUSH
19713: CALL_OW 478
19717: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19718: LD_VAR 0 9
19722: NOT
19723: PUSH
19724: LD_VAR 0 11
19728: NOT
19729: OR
19730: PUSH
19731: LD_VAR 0 12
19735: NOT
19736: OR
19737: PUSH
19738: LD_VAR 0 10
19742: NOT
19743: OR
19744: IFFALSE 19779
// begin result := [ chassis , engine , control , weapon ] ;
19746: LD_ADDR_VAR 0 6
19750: PUSH
19751: LD_VAR 0 2
19755: PUSH
19756: LD_VAR 0 3
19760: PUSH
19761: LD_VAR 0 4
19765: PUSH
19766: LD_VAR 0 5
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: ST_TO_ADDR
// exit ;
19777: GO 20070
// end ; if not chassis in _chassis then
19779: LD_VAR 0 2
19783: PUSH
19784: LD_VAR 0 9
19788: IN
19789: NOT
19790: IFFALSE 19816
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19792: LD_ADDR_VAR 0 2
19796: PUSH
19797: LD_VAR 0 9
19801: PUSH
19802: LD_INT 1
19804: PPUSH
19805: LD_VAR 0 9
19809: PPUSH
19810: CALL_OW 12
19814: ARRAY
19815: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19816: LD_VAR 0 2
19820: PPUSH
19821: LD_VAR 0 3
19825: PPUSH
19826: CALL 20075 0 2
19830: NOT
19831: IFFALSE 19890
// repeat engine := _engine [ 1 ] ;
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_VAR 0 11
19842: PUSH
19843: LD_INT 1
19845: ARRAY
19846: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19847: LD_ADDR_VAR 0 11
19851: PUSH
19852: LD_VAR 0 11
19856: PPUSH
19857: LD_INT 1
19859: PPUSH
19860: CALL_OW 3
19864: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 3
19874: PPUSH
19875: CALL 20075 0 2
19879: PUSH
19880: LD_VAR 0 11
19884: PUSH
19885: EMPTY
19886: EQUAL
19887: OR
19888: IFFALSE 19833
// if not control in _control then
19890: LD_VAR 0 4
19894: PUSH
19895: LD_VAR 0 12
19899: IN
19900: NOT
19901: IFFALSE 19927
// control := _control [ rand ( 1 , _control ) ] ;
19903: LD_ADDR_VAR 0 4
19907: PUSH
19908: LD_VAR 0 12
19912: PUSH
19913: LD_INT 1
19915: PPUSH
19916: LD_VAR 0 12
19920: PPUSH
19921: CALL_OW 12
19925: ARRAY
19926: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_VAR 0 5
19936: PPUSH
19937: CALL 20295 0 2
19941: NOT
19942: IFFALSE 20001
// repeat weapon := _weapon [ 1 ] ;
19944: LD_ADDR_VAR 0 5
19948: PUSH
19949: LD_VAR 0 10
19953: PUSH
19954: LD_INT 1
19956: ARRAY
19957: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19958: LD_ADDR_VAR 0 10
19962: PUSH
19963: LD_VAR 0 10
19967: PPUSH
19968: LD_INT 1
19970: PPUSH
19971: CALL_OW 3
19975: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19976: LD_VAR 0 2
19980: PPUSH
19981: LD_VAR 0 5
19985: PPUSH
19986: CALL 20295 0 2
19990: PUSH
19991: LD_VAR 0 10
19995: PUSH
19996: EMPTY
19997: EQUAL
19998: OR
19999: IFFALSE 19944
// result := [ ] ;
20001: LD_ADDR_VAR 0 6
20005: PUSH
20006: EMPTY
20007: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: LD_VAR 0 3
20022: PPUSH
20023: LD_VAR 0 4
20027: PPUSH
20028: LD_VAR 0 5
20032: PPUSH
20033: CALL_OW 448
20037: IFFALSE 20070
// result := [ chassis , engine , control , weapon ] ;
20039: LD_ADDR_VAR 0 6
20043: PUSH
20044: LD_VAR 0 2
20048: PUSH
20049: LD_VAR 0 3
20053: PUSH
20054: LD_VAR 0 4
20058: PUSH
20059: LD_VAR 0 5
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: ST_TO_ADDR
// end ;
20070: LD_VAR 0 6
20074: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20075: LD_INT 0
20077: PPUSH
// if not chassis or not engine then
20078: LD_VAR 0 1
20082: NOT
20083: PUSH
20084: LD_VAR 0 2
20088: NOT
20089: OR
20090: IFFALSE 20094
// exit ;
20092: GO 20290
// case engine of engine_solar :
20094: LD_VAR 0 2
20098: PUSH
20099: LD_INT 2
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20145
20107: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_INT 11
20115: PUSH
20116: LD_INT 12
20118: PUSH
20119: LD_INT 13
20121: PUSH
20122: LD_INT 14
20124: PUSH
20125: LD_INT 1
20127: PUSH
20128: LD_INT 2
20130: PUSH
20131: LD_INT 3
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: ST_TO_ADDR
20143: GO 20274
20145: LD_INT 1
20147: DOUBLE
20148: EQUAL
20149: IFTRUE 20153
20151: GO 20215
20153: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20154: LD_ADDR_VAR 0 3
20158: PUSH
20159: LD_INT 11
20161: PUSH
20162: LD_INT 12
20164: PUSH
20165: LD_INT 13
20167: PUSH
20168: LD_INT 14
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 3
20179: PUSH
20180: LD_INT 4
20182: PUSH
20183: LD_INT 5
20185: PUSH
20186: LD_INT 21
20188: PUSH
20189: LD_INT 23
20191: PUSH
20192: LD_INT 22
20194: PUSH
20195: LD_INT 24
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: LIST
20202: LIST
20203: LIST
20204: LIST
20205: LIST
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: ST_TO_ADDR
20213: GO 20274
20215: LD_INT 3
20217: DOUBLE
20218: EQUAL
20219: IFTRUE 20223
20221: GO 20273
20223: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_INT 13
20231: PUSH
20232: LD_INT 14
20234: PUSH
20235: LD_INT 2
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: LD_INT 4
20243: PUSH
20244: LD_INT 5
20246: PUSH
20247: LD_INT 21
20249: PUSH
20250: LD_INT 22
20252: PUSH
20253: LD_INT 23
20255: PUSH
20256: LD_INT 24
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: LIST
20263: LIST
20264: LIST
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: ST_TO_ADDR
20271: GO 20274
20273: POP
// result := ( chassis in result ) ;
20274: LD_ADDR_VAR 0 3
20278: PUSH
20279: LD_VAR 0 1
20283: PUSH
20284: LD_VAR 0 3
20288: IN
20289: ST_TO_ADDR
// end ;
20290: LD_VAR 0 3
20294: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20295: LD_INT 0
20297: PPUSH
// if not chassis or not weapon then
20298: LD_VAR 0 1
20302: NOT
20303: PUSH
20304: LD_VAR 0 2
20308: NOT
20309: OR
20310: IFFALSE 20314
// exit ;
20312: GO 21374
// case weapon of us_machine_gun :
20314: LD_VAR 0 2
20318: PUSH
20319: LD_INT 2
20321: DOUBLE
20322: EQUAL
20323: IFTRUE 20327
20325: GO 20357
20327: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20328: LD_ADDR_VAR 0 3
20332: PUSH
20333: LD_INT 1
20335: PUSH
20336: LD_INT 2
20338: PUSH
20339: LD_INT 3
20341: PUSH
20342: LD_INT 4
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: LIST
20352: LIST
20353: LIST
20354: ST_TO_ADDR
20355: GO 21358
20357: LD_INT 3
20359: DOUBLE
20360: EQUAL
20361: IFTRUE 20365
20363: GO 20395
20365: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20366: LD_ADDR_VAR 0 3
20370: PUSH
20371: LD_INT 1
20373: PUSH
20374: LD_INT 2
20376: PUSH
20377: LD_INT 3
20379: PUSH
20380: LD_INT 4
20382: PUSH
20383: LD_INT 5
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: ST_TO_ADDR
20393: GO 21358
20395: LD_INT 11
20397: DOUBLE
20398: EQUAL
20399: IFTRUE 20403
20401: GO 20433
20403: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20404: LD_ADDR_VAR 0 3
20408: PUSH
20409: LD_INT 1
20411: PUSH
20412: LD_INT 2
20414: PUSH
20415: LD_INT 3
20417: PUSH
20418: LD_INT 4
20420: PUSH
20421: LD_INT 5
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: ST_TO_ADDR
20431: GO 21358
20433: LD_INT 4
20435: DOUBLE
20436: EQUAL
20437: IFTRUE 20441
20439: GO 20467
20441: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_INT 2
20449: PUSH
20450: LD_INT 3
20452: PUSH
20453: LD_INT 4
20455: PUSH
20456: LD_INT 5
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: ST_TO_ADDR
20465: GO 21358
20467: LD_INT 5
20469: DOUBLE
20470: EQUAL
20471: IFTRUE 20475
20473: GO 20501
20475: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20476: LD_ADDR_VAR 0 3
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: LD_INT 3
20486: PUSH
20487: LD_INT 4
20489: PUSH
20490: LD_INT 5
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: ST_TO_ADDR
20499: GO 21358
20501: LD_INT 9
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20535
20509: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_INT 2
20517: PUSH
20518: LD_INT 3
20520: PUSH
20521: LD_INT 4
20523: PUSH
20524: LD_INT 5
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: ST_TO_ADDR
20533: GO 21358
20535: LD_INT 7
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20569
20543: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20544: LD_ADDR_VAR 0 3
20548: PUSH
20549: LD_INT 2
20551: PUSH
20552: LD_INT 3
20554: PUSH
20555: LD_INT 4
20557: PUSH
20558: LD_INT 5
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: LIST
20565: LIST
20566: ST_TO_ADDR
20567: GO 21358
20569: LD_INT 12
20571: DOUBLE
20572: EQUAL
20573: IFTRUE 20577
20575: GO 20603
20577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20578: LD_ADDR_VAR 0 3
20582: PUSH
20583: LD_INT 2
20585: PUSH
20586: LD_INT 3
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: EMPTY
20596: LIST
20597: LIST
20598: LIST
20599: LIST
20600: ST_TO_ADDR
20601: GO 21358
20603: LD_INT 13
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20637
20611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20612: LD_ADDR_VAR 0 3
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 3
20622: PUSH
20623: LD_INT 4
20625: PUSH
20626: LD_INT 5
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: ST_TO_ADDR
20635: GO 21358
20637: LD_INT 14
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20663
20645: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20646: LD_ADDR_VAR 0 3
20650: PUSH
20651: LD_INT 4
20653: PUSH
20654: LD_INT 5
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: ST_TO_ADDR
20661: GO 21358
20663: LD_INT 6
20665: DOUBLE
20666: EQUAL
20667: IFTRUE 20671
20669: GO 20689
20671: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20672: LD_ADDR_VAR 0 3
20676: PUSH
20677: LD_INT 4
20679: PUSH
20680: LD_INT 5
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: ST_TO_ADDR
20687: GO 21358
20689: LD_INT 10
20691: DOUBLE
20692: EQUAL
20693: IFTRUE 20697
20695: GO 20715
20697: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20698: LD_ADDR_VAR 0 3
20702: PUSH
20703: LD_INT 4
20705: PUSH
20706: LD_INT 5
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: ST_TO_ADDR
20713: GO 21358
20715: LD_INT 22
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20749
20723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20724: LD_ADDR_VAR 0 3
20728: PUSH
20729: LD_INT 11
20731: PUSH
20732: LD_INT 12
20734: PUSH
20735: LD_INT 13
20737: PUSH
20738: LD_INT 14
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: LIST
20745: LIST
20746: ST_TO_ADDR
20747: GO 21358
20749: LD_INT 23
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20783
20757: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20758: LD_ADDR_VAR 0 3
20762: PUSH
20763: LD_INT 11
20765: PUSH
20766: LD_INT 12
20768: PUSH
20769: LD_INT 13
20771: PUSH
20772: LD_INT 14
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: ST_TO_ADDR
20781: GO 21358
20783: LD_INT 24
20785: DOUBLE
20786: EQUAL
20787: IFTRUE 20791
20789: GO 20817
20791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20792: LD_ADDR_VAR 0 3
20796: PUSH
20797: LD_INT 11
20799: PUSH
20800: LD_INT 12
20802: PUSH
20803: LD_INT 13
20805: PUSH
20806: LD_INT 14
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: ST_TO_ADDR
20815: GO 21358
20817: LD_INT 30
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20851
20825: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20826: LD_ADDR_VAR 0 3
20830: PUSH
20831: LD_INT 11
20833: PUSH
20834: LD_INT 12
20836: PUSH
20837: LD_INT 13
20839: PUSH
20840: LD_INT 14
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: ST_TO_ADDR
20849: GO 21358
20851: LD_INT 25
20853: DOUBLE
20854: EQUAL
20855: IFTRUE 20859
20857: GO 20877
20859: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20860: LD_ADDR_VAR 0 3
20864: PUSH
20865: LD_INT 13
20867: PUSH
20868: LD_INT 14
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: ST_TO_ADDR
20875: GO 21358
20877: LD_INT 27
20879: DOUBLE
20880: EQUAL
20881: IFTRUE 20885
20883: GO 20903
20885: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20886: LD_ADDR_VAR 0 3
20890: PUSH
20891: LD_INT 13
20893: PUSH
20894: LD_INT 14
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: ST_TO_ADDR
20901: GO 21358
20903: LD_INT 92
20905: DOUBLE
20906: EQUAL
20907: IFTRUE 20911
20909: GO 20937
20911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20912: LD_ADDR_VAR 0 3
20916: PUSH
20917: LD_INT 11
20919: PUSH
20920: LD_INT 12
20922: PUSH
20923: LD_INT 13
20925: PUSH
20926: LD_INT 14
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: ST_TO_ADDR
20935: GO 21358
20937: LD_INT 28
20939: DOUBLE
20940: EQUAL
20941: IFTRUE 20945
20943: GO 20963
20945: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20946: LD_ADDR_VAR 0 3
20950: PUSH
20951: LD_INT 13
20953: PUSH
20954: LD_INT 14
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: ST_TO_ADDR
20961: GO 21358
20963: LD_INT 29
20965: DOUBLE
20966: EQUAL
20967: IFTRUE 20971
20969: GO 20989
20971: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20972: LD_ADDR_VAR 0 3
20976: PUSH
20977: LD_INT 13
20979: PUSH
20980: LD_INT 14
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: ST_TO_ADDR
20987: GO 21358
20989: LD_INT 31
20991: DOUBLE
20992: EQUAL
20993: IFTRUE 20997
20995: GO 21015
20997: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20998: LD_ADDR_VAR 0 3
21002: PUSH
21003: LD_INT 13
21005: PUSH
21006: LD_INT 14
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: ST_TO_ADDR
21013: GO 21358
21015: LD_INT 26
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21041
21023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
21024: LD_ADDR_VAR 0 3
21028: PUSH
21029: LD_INT 13
21031: PUSH
21032: LD_INT 14
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: ST_TO_ADDR
21039: GO 21358
21041: LD_INT 42
21043: DOUBLE
21044: EQUAL
21045: IFTRUE 21049
21047: GO 21075
21049: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21050: LD_ADDR_VAR 0 3
21054: PUSH
21055: LD_INT 21
21057: PUSH
21058: LD_INT 22
21060: PUSH
21061: LD_INT 23
21063: PUSH
21064: LD_INT 24
21066: PUSH
21067: EMPTY
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: ST_TO_ADDR
21073: GO 21358
21075: LD_INT 43
21077: DOUBLE
21078: EQUAL
21079: IFTRUE 21083
21081: GO 21109
21083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 21
21091: PUSH
21092: LD_INT 22
21094: PUSH
21095: LD_INT 23
21097: PUSH
21098: LD_INT 24
21100: PUSH
21101: EMPTY
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: ST_TO_ADDR
21107: GO 21358
21109: LD_INT 44
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21143
21117: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21118: LD_ADDR_VAR 0 3
21122: PUSH
21123: LD_INT 21
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_INT 23
21131: PUSH
21132: LD_INT 24
21134: PUSH
21135: EMPTY
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: ST_TO_ADDR
21141: GO 21358
21143: LD_INT 45
21145: DOUBLE
21146: EQUAL
21147: IFTRUE 21151
21149: GO 21177
21151: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21152: LD_ADDR_VAR 0 3
21156: PUSH
21157: LD_INT 21
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 23
21165: PUSH
21166: LD_INT 24
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 21358
21177: LD_INT 49
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21211
21185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21186: LD_ADDR_VAR 0 3
21190: PUSH
21191: LD_INT 21
21193: PUSH
21194: LD_INT 22
21196: PUSH
21197: LD_INT 23
21199: PUSH
21200: LD_INT 24
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: ST_TO_ADDR
21209: GO 21358
21211: LD_INT 51
21213: DOUBLE
21214: EQUAL
21215: IFTRUE 21219
21217: GO 21245
21219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21220: LD_ADDR_VAR 0 3
21224: PUSH
21225: LD_INT 21
21227: PUSH
21228: LD_INT 22
21230: PUSH
21231: LD_INT 23
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: EMPTY
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: ST_TO_ADDR
21243: GO 21358
21245: LD_INT 52
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21279
21253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21254: LD_ADDR_VAR 0 3
21258: PUSH
21259: LD_INT 21
21261: PUSH
21262: LD_INT 22
21264: PUSH
21265: LD_INT 23
21267: PUSH
21268: LD_INT 24
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: ST_TO_ADDR
21277: GO 21358
21279: LD_INT 53
21281: DOUBLE
21282: EQUAL
21283: IFTRUE 21287
21285: GO 21305
21287: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21288: LD_ADDR_VAR 0 3
21292: PUSH
21293: LD_INT 23
21295: PUSH
21296: LD_INT 24
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: ST_TO_ADDR
21303: GO 21358
21305: LD_INT 46
21307: DOUBLE
21308: EQUAL
21309: IFTRUE 21313
21311: GO 21331
21313: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21314: LD_ADDR_VAR 0 3
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 24
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: ST_TO_ADDR
21329: GO 21358
21331: LD_INT 47
21333: DOUBLE
21334: EQUAL
21335: IFTRUE 21339
21337: GO 21357
21339: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21340: LD_ADDR_VAR 0 3
21344: PUSH
21345: LD_INT 23
21347: PUSH
21348: LD_INT 24
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: ST_TO_ADDR
21355: GO 21358
21357: POP
// result := ( chassis in result ) ;
21358: LD_ADDR_VAR 0 3
21362: PUSH
21363: LD_VAR 0 1
21367: PUSH
21368: LD_VAR 0 3
21372: IN
21373: ST_TO_ADDR
// end ;
21374: LD_VAR 0 3
21378: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21379: LD_INT 0
21381: PPUSH
21382: PPUSH
21383: PPUSH
21384: PPUSH
21385: PPUSH
21386: PPUSH
21387: PPUSH
// result := array ;
21388: LD_ADDR_VAR 0 5
21392: PUSH
21393: LD_VAR 0 1
21397: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21398: LD_VAR 0 1
21402: NOT
21403: PUSH
21404: LD_VAR 0 2
21408: NOT
21409: OR
21410: PUSH
21411: LD_VAR 0 3
21415: NOT
21416: OR
21417: PUSH
21418: LD_VAR 0 2
21422: PUSH
21423: LD_VAR 0 1
21427: GREATER
21428: OR
21429: PUSH
21430: LD_VAR 0 3
21434: PUSH
21435: LD_VAR 0 1
21439: GREATER
21440: OR
21441: IFFALSE 21445
// exit ;
21443: GO 21741
// if direction then
21445: LD_VAR 0 4
21449: IFFALSE 21513
// begin d := 1 ;
21451: LD_ADDR_VAR 0 9
21455: PUSH
21456: LD_INT 1
21458: ST_TO_ADDR
// if i_from > i_to then
21459: LD_VAR 0 2
21463: PUSH
21464: LD_VAR 0 3
21468: GREATER
21469: IFFALSE 21495
// length := ( array - i_from ) + i_to else
21471: LD_ADDR_VAR 0 11
21475: PUSH
21476: LD_VAR 0 1
21480: PUSH
21481: LD_VAR 0 2
21485: MINUS
21486: PUSH
21487: LD_VAR 0 3
21491: PLUS
21492: ST_TO_ADDR
21493: GO 21511
// length := i_to - i_from ;
21495: LD_ADDR_VAR 0 11
21499: PUSH
21500: LD_VAR 0 3
21504: PUSH
21505: LD_VAR 0 2
21509: MINUS
21510: ST_TO_ADDR
// end else
21511: GO 21574
// begin d := - 1 ;
21513: LD_ADDR_VAR 0 9
21517: PUSH
21518: LD_INT 1
21520: NEG
21521: ST_TO_ADDR
// if i_from > i_to then
21522: LD_VAR 0 2
21526: PUSH
21527: LD_VAR 0 3
21531: GREATER
21532: IFFALSE 21552
// length := i_from - i_to else
21534: LD_ADDR_VAR 0 11
21538: PUSH
21539: LD_VAR 0 2
21543: PUSH
21544: LD_VAR 0 3
21548: MINUS
21549: ST_TO_ADDR
21550: GO 21574
// length := ( array - i_to ) + i_from ;
21552: LD_ADDR_VAR 0 11
21556: PUSH
21557: LD_VAR 0 1
21561: PUSH
21562: LD_VAR 0 3
21566: MINUS
21567: PUSH
21568: LD_VAR 0 2
21572: PLUS
21573: ST_TO_ADDR
// end ; if not length then
21574: LD_VAR 0 11
21578: NOT
21579: IFFALSE 21583
// exit ;
21581: GO 21741
// tmp := array ;
21583: LD_ADDR_VAR 0 10
21587: PUSH
21588: LD_VAR 0 1
21592: ST_TO_ADDR
// for i = 1 to length do
21593: LD_ADDR_VAR 0 6
21597: PUSH
21598: DOUBLE
21599: LD_INT 1
21601: DEC
21602: ST_TO_ADDR
21603: LD_VAR 0 11
21607: PUSH
21608: FOR_TO
21609: IFFALSE 21729
// begin for j = 1 to array do
21611: LD_ADDR_VAR 0 7
21615: PUSH
21616: DOUBLE
21617: LD_INT 1
21619: DEC
21620: ST_TO_ADDR
21621: LD_VAR 0 1
21625: PUSH
21626: FOR_TO
21627: IFFALSE 21715
// begin k := j + d ;
21629: LD_ADDR_VAR 0 8
21633: PUSH
21634: LD_VAR 0 7
21638: PUSH
21639: LD_VAR 0 9
21643: PLUS
21644: ST_TO_ADDR
// if k > array then
21645: LD_VAR 0 8
21649: PUSH
21650: LD_VAR 0 1
21654: GREATER
21655: IFFALSE 21665
// k := 1 ;
21657: LD_ADDR_VAR 0 8
21661: PUSH
21662: LD_INT 1
21664: ST_TO_ADDR
// if not k then
21665: LD_VAR 0 8
21669: NOT
21670: IFFALSE 21682
// k := array ;
21672: LD_ADDR_VAR 0 8
21676: PUSH
21677: LD_VAR 0 1
21681: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21682: LD_ADDR_VAR 0 10
21686: PUSH
21687: LD_VAR 0 10
21691: PPUSH
21692: LD_VAR 0 8
21696: PPUSH
21697: LD_VAR 0 1
21701: PUSH
21702: LD_VAR 0 7
21706: ARRAY
21707: PPUSH
21708: CALL_OW 1
21712: ST_TO_ADDR
// end ;
21713: GO 21626
21715: POP
21716: POP
// array := tmp ;
21717: LD_ADDR_VAR 0 1
21721: PUSH
21722: LD_VAR 0 10
21726: ST_TO_ADDR
// end ;
21727: GO 21608
21729: POP
21730: POP
// result := array ;
21731: LD_ADDR_VAR 0 5
21735: PUSH
21736: LD_VAR 0 1
21740: ST_TO_ADDR
// end ;
21741: LD_VAR 0 5
21745: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21746: LD_INT 0
21748: PPUSH
21749: PPUSH
// result := 0 ;
21750: LD_ADDR_VAR 0 3
21754: PUSH
21755: LD_INT 0
21757: ST_TO_ADDR
// if not array or not value in array then
21758: LD_VAR 0 1
21762: NOT
21763: PUSH
21764: LD_VAR 0 2
21768: PUSH
21769: LD_VAR 0 1
21773: IN
21774: NOT
21775: OR
21776: IFFALSE 21780
// exit ;
21778: GO 21834
// for i = 1 to array do
21780: LD_ADDR_VAR 0 4
21784: PUSH
21785: DOUBLE
21786: LD_INT 1
21788: DEC
21789: ST_TO_ADDR
21790: LD_VAR 0 1
21794: PUSH
21795: FOR_TO
21796: IFFALSE 21832
// if value = array [ i ] then
21798: LD_VAR 0 2
21802: PUSH
21803: LD_VAR 0 1
21807: PUSH
21808: LD_VAR 0 4
21812: ARRAY
21813: EQUAL
21814: IFFALSE 21830
// begin result := i ;
21816: LD_ADDR_VAR 0 3
21820: PUSH
21821: LD_VAR 0 4
21825: ST_TO_ADDR
// exit ;
21826: POP
21827: POP
21828: GO 21834
// end ;
21830: GO 21795
21832: POP
21833: POP
// end ;
21834: LD_VAR 0 3
21838: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21839: LD_INT 0
21841: PPUSH
// vc_chassis := chassis ;
21842: LD_ADDR_OWVAR 37
21846: PUSH
21847: LD_VAR 0 1
21851: ST_TO_ADDR
// vc_engine := engine ;
21852: LD_ADDR_OWVAR 39
21856: PUSH
21857: LD_VAR 0 2
21861: ST_TO_ADDR
// vc_control := control ;
21862: LD_ADDR_OWVAR 38
21866: PUSH
21867: LD_VAR 0 3
21871: ST_TO_ADDR
// vc_weapon := weapon ;
21872: LD_ADDR_OWVAR 40
21876: PUSH
21877: LD_VAR 0 4
21881: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21882: LD_ADDR_OWVAR 41
21886: PUSH
21887: LD_VAR 0 5
21891: ST_TO_ADDR
// end ;
21892: LD_VAR 0 6
21896: RET
// export function WantPlant ( unit ) ; var task ; begin
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
// result := false ;
21901: LD_ADDR_VAR 0 2
21905: PUSH
21906: LD_INT 0
21908: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21909: LD_ADDR_VAR 0 3
21913: PUSH
21914: LD_VAR 0 1
21918: PPUSH
21919: CALL_OW 437
21923: ST_TO_ADDR
// if task then
21924: LD_VAR 0 3
21928: IFFALSE 21956
// if task [ 1 ] [ 1 ] = p then
21930: LD_VAR 0 3
21934: PUSH
21935: LD_INT 1
21937: ARRAY
21938: PUSH
21939: LD_INT 1
21941: ARRAY
21942: PUSH
21943: LD_STRING p
21945: EQUAL
21946: IFFALSE 21956
// result := true ;
21948: LD_ADDR_VAR 0 2
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// end ;
21956: LD_VAR 0 2
21960: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21961: LD_INT 0
21963: PPUSH
21964: PPUSH
21965: PPUSH
21966: PPUSH
// if pos < 1 then
21967: LD_VAR 0 2
21971: PUSH
21972: LD_INT 1
21974: LESS
21975: IFFALSE 21979
// exit ;
21977: GO 22282
// if pos = 1 then
21979: LD_VAR 0 2
21983: PUSH
21984: LD_INT 1
21986: EQUAL
21987: IFFALSE 22020
// result := Replace ( arr , pos [ 1 ] , value ) else
21989: LD_ADDR_VAR 0 4
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: LD_VAR 0 2
22003: PUSH
22004: LD_INT 1
22006: ARRAY
22007: PPUSH
22008: LD_VAR 0 3
22012: PPUSH
22013: CALL_OW 1
22017: ST_TO_ADDR
22018: GO 22282
// begin tmp := arr ;
22020: LD_ADDR_VAR 0 6
22024: PUSH
22025: LD_VAR 0 1
22029: ST_TO_ADDR
// s_arr := [ tmp ] ;
22030: LD_ADDR_VAR 0 7
22034: PUSH
22035: LD_VAR 0 6
22039: PUSH
22040: EMPTY
22041: LIST
22042: ST_TO_ADDR
// for i = 1 to pos - 1 do
22043: LD_ADDR_VAR 0 5
22047: PUSH
22048: DOUBLE
22049: LD_INT 1
22051: DEC
22052: ST_TO_ADDR
22053: LD_VAR 0 2
22057: PUSH
22058: LD_INT 1
22060: MINUS
22061: PUSH
22062: FOR_TO
22063: IFFALSE 22108
// begin tmp := tmp [ pos [ i ] ] ;
22065: LD_ADDR_VAR 0 6
22069: PUSH
22070: LD_VAR 0 6
22074: PUSH
22075: LD_VAR 0 2
22079: PUSH
22080: LD_VAR 0 5
22084: ARRAY
22085: ARRAY
22086: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22087: LD_ADDR_VAR 0 7
22091: PUSH
22092: LD_VAR 0 7
22096: PUSH
22097: LD_VAR 0 6
22101: PUSH
22102: EMPTY
22103: LIST
22104: ADD
22105: ST_TO_ADDR
// end ;
22106: GO 22062
22108: POP
22109: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22110: LD_ADDR_VAR 0 6
22114: PUSH
22115: LD_VAR 0 6
22119: PPUSH
22120: LD_VAR 0 2
22124: PUSH
22125: LD_VAR 0 2
22129: ARRAY
22130: PPUSH
22131: LD_VAR 0 3
22135: PPUSH
22136: CALL_OW 1
22140: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22141: LD_ADDR_VAR 0 7
22145: PUSH
22146: LD_VAR 0 7
22150: PPUSH
22151: LD_VAR 0 7
22155: PPUSH
22156: LD_VAR 0 6
22160: PPUSH
22161: CALL_OW 1
22165: ST_TO_ADDR
// for i = s_arr downto 2 do
22166: LD_ADDR_VAR 0 5
22170: PUSH
22171: DOUBLE
22172: LD_VAR 0 7
22176: INC
22177: ST_TO_ADDR
22178: LD_INT 2
22180: PUSH
22181: FOR_DOWNTO
22182: IFFALSE 22266
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22184: LD_ADDR_VAR 0 6
22188: PUSH
22189: LD_VAR 0 7
22193: PUSH
22194: LD_VAR 0 5
22198: PUSH
22199: LD_INT 1
22201: MINUS
22202: ARRAY
22203: PPUSH
22204: LD_VAR 0 2
22208: PUSH
22209: LD_VAR 0 5
22213: PUSH
22214: LD_INT 1
22216: MINUS
22217: ARRAY
22218: PPUSH
22219: LD_VAR 0 7
22223: PUSH
22224: LD_VAR 0 5
22228: ARRAY
22229: PPUSH
22230: CALL_OW 1
22234: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22235: LD_ADDR_VAR 0 7
22239: PUSH
22240: LD_VAR 0 7
22244: PPUSH
22245: LD_VAR 0 5
22249: PUSH
22250: LD_INT 1
22252: MINUS
22253: PPUSH
22254: LD_VAR 0 6
22258: PPUSH
22259: CALL_OW 1
22263: ST_TO_ADDR
// end ;
22264: GO 22181
22266: POP
22267: POP
// result := s_arr [ 1 ] ;
22268: LD_ADDR_VAR 0 4
22272: PUSH
22273: LD_VAR 0 7
22277: PUSH
22278: LD_INT 1
22280: ARRAY
22281: ST_TO_ADDR
// end ; end ;
22282: LD_VAR 0 4
22286: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22287: LD_INT 0
22289: PPUSH
22290: PPUSH
// if not list then
22291: LD_VAR 0 1
22295: NOT
22296: IFFALSE 22300
// exit ;
22298: GO 22391
// i := list [ pos1 ] ;
22300: LD_ADDR_VAR 0 5
22304: PUSH
22305: LD_VAR 0 1
22309: PUSH
22310: LD_VAR 0 2
22314: ARRAY
22315: ST_TO_ADDR
// if not i then
22316: LD_VAR 0 5
22320: NOT
22321: IFFALSE 22325
// exit ;
22323: GO 22391
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22325: LD_ADDR_VAR 0 1
22329: PUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: LD_VAR 0 2
22339: PPUSH
22340: LD_VAR 0 1
22344: PUSH
22345: LD_VAR 0 3
22349: ARRAY
22350: PPUSH
22351: CALL_OW 1
22355: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22356: LD_ADDR_VAR 0 1
22360: PUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: LD_VAR 0 3
22370: PPUSH
22371: LD_VAR 0 5
22375: PPUSH
22376: CALL_OW 1
22380: ST_TO_ADDR
// result := list ;
22381: LD_ADDR_VAR 0 4
22385: PUSH
22386: LD_VAR 0 1
22390: ST_TO_ADDR
// end ;
22391: LD_VAR 0 4
22395: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22396: LD_INT 0
22398: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22399: LD_ADDR_VAR 0 5
22403: PUSH
22404: LD_VAR 0 1
22408: PPUSH
22409: CALL_OW 250
22413: PPUSH
22414: LD_VAR 0 1
22418: PPUSH
22419: CALL_OW 251
22423: PPUSH
22424: LD_VAR 0 2
22428: PPUSH
22429: LD_VAR 0 3
22433: PPUSH
22434: LD_VAR 0 4
22438: PPUSH
22439: CALL 22817 0 5
22443: ST_TO_ADDR
// end ;
22444: LD_VAR 0 5
22448: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
22449: LD_INT 0
22451: PPUSH
22452: PPUSH
22453: PPUSH
22454: PPUSH
// if not list or not unit then
22455: LD_VAR 0 2
22459: NOT
22460: PUSH
22461: LD_VAR 0 1
22465: NOT
22466: OR
22467: IFFALSE 22471
// exit ;
22469: GO 22812
// result := [ ] ;
22471: LD_ADDR_VAR 0 5
22475: PUSH
22476: EMPTY
22477: ST_TO_ADDR
// for i in list do
22478: LD_ADDR_VAR 0 6
22482: PUSH
22483: LD_VAR 0 2
22487: PUSH
22488: FOR_IN
22489: IFFALSE 22707
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
22491: LD_ADDR_VAR 0 8
22495: PUSH
22496: LD_VAR 0 1
22500: PPUSH
22501: LD_VAR 0 6
22505: PUSH
22506: LD_INT 1
22508: ARRAY
22509: PPUSH
22510: LD_VAR 0 6
22514: PUSH
22515: LD_INT 2
22517: ARRAY
22518: PPUSH
22519: CALL_OW 297
22523: ST_TO_ADDR
// if not Count ( result ) then
22524: LD_VAR 0 5
22528: PPUSH
22529: CALL 19101 0 1
22533: NOT
22534: IFFALSE 22567
// begin result := Join ( result , [ i , tmp ] ) ;
22536: LD_ADDR_VAR 0 5
22540: PUSH
22541: LD_VAR 0 5
22545: PPUSH
22546: LD_VAR 0 6
22550: PUSH
22551: LD_VAR 0 8
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PPUSH
22560: CALL 54690 0 2
22564: ST_TO_ADDR
// continue ;
22565: GO 22488
// end ; if result [ result ] [ 2 ] <= tmp then
22567: LD_VAR 0 5
22571: PUSH
22572: LD_VAR 0 5
22576: ARRAY
22577: PUSH
22578: LD_INT 2
22580: ARRAY
22581: PUSH
22582: LD_VAR 0 8
22586: LESSEQUAL
22587: IFFALSE 22620
// result := Join ( result , [ i , tmp ] ) else
22589: LD_ADDR_VAR 0 5
22593: PUSH
22594: LD_VAR 0 5
22598: PPUSH
22599: LD_VAR 0 6
22603: PUSH
22604: LD_VAR 0 8
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PPUSH
22613: CALL 54690 0 2
22617: ST_TO_ADDR
22618: GO 22705
// begin for j := 1 to Count ( result ) do
22620: LD_ADDR_VAR 0 7
22624: PUSH
22625: DOUBLE
22626: LD_INT 1
22628: DEC
22629: ST_TO_ADDR
22630: LD_VAR 0 5
22634: PPUSH
22635: CALL 19101 0 1
22639: PUSH
22640: FOR_TO
22641: IFFALSE 22703
// begin if tmp < result [ j ] [ 2 ] then
22643: LD_VAR 0 8
22647: PUSH
22648: LD_VAR 0 5
22652: PUSH
22653: LD_VAR 0 7
22657: ARRAY
22658: PUSH
22659: LD_INT 2
22661: ARRAY
22662: LESS
22663: IFFALSE 22701
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22665: LD_ADDR_VAR 0 5
22669: PUSH
22670: LD_VAR 0 5
22674: PPUSH
22675: LD_VAR 0 7
22679: PPUSH
22680: LD_VAR 0 6
22684: PUSH
22685: LD_VAR 0 8
22689: PUSH
22690: EMPTY
22691: LIST
22692: LIST
22693: PPUSH
22694: CALL_OW 2
22698: ST_TO_ADDR
// break ;
22699: GO 22703
// end ; end ;
22701: GO 22640
22703: POP
22704: POP
// end ; end ;
22705: GO 22488
22707: POP
22708: POP
// if result and not asc then
22709: LD_VAR 0 5
22713: PUSH
22714: LD_VAR 0 3
22718: NOT
22719: AND
22720: IFFALSE 22737
// result := ReverseArray ( result ) ;
22722: LD_ADDR_VAR 0 5
22726: PUSH
22727: LD_VAR 0 5
22731: PPUSH
22732: CALL 49977 0 1
22736: ST_TO_ADDR
// tmp := [ ] ;
22737: LD_ADDR_VAR 0 8
22741: PUSH
22742: EMPTY
22743: ST_TO_ADDR
// if mode then
22744: LD_VAR 0 4
22748: IFFALSE 22812
// begin for i := 1 to result do
22750: LD_ADDR_VAR 0 6
22754: PUSH
22755: DOUBLE
22756: LD_INT 1
22758: DEC
22759: ST_TO_ADDR
22760: LD_VAR 0 5
22764: PUSH
22765: FOR_TO
22766: IFFALSE 22800
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
22768: LD_ADDR_VAR 0 8
22772: PUSH
22773: LD_VAR 0 8
22777: PPUSH
22778: LD_VAR 0 5
22782: PUSH
22783: LD_VAR 0 6
22787: ARRAY
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: CALL 54690 0 2
22797: ST_TO_ADDR
22798: GO 22765
22800: POP
22801: POP
// result := tmp ;
22802: LD_ADDR_VAR 0 5
22806: PUSH
22807: LD_VAR 0 8
22811: ST_TO_ADDR
// end ; end ;
22812: LD_VAR 0 5
22816: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22817: LD_INT 0
22819: PPUSH
22820: PPUSH
22821: PPUSH
22822: PPUSH
// if not list then
22823: LD_VAR 0 3
22827: NOT
22828: IFFALSE 22832
// exit ;
22830: GO 23220
// result := [ ] ;
22832: LD_ADDR_VAR 0 6
22836: PUSH
22837: EMPTY
22838: ST_TO_ADDR
// for i in list do
22839: LD_ADDR_VAR 0 7
22843: PUSH
22844: LD_VAR 0 3
22848: PUSH
22849: FOR_IN
22850: IFFALSE 23052
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22852: LD_ADDR_VAR 0 9
22856: PUSH
22857: LD_VAR 0 7
22861: PPUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_VAR 0 2
22871: PPUSH
22872: CALL_OW 297
22876: ST_TO_ADDR
// if not result then
22877: LD_VAR 0 6
22881: NOT
22882: IFFALSE 22908
// result := [ [ i , tmp ] ] else
22884: LD_ADDR_VAR 0 6
22888: PUSH
22889: LD_VAR 0 7
22893: PUSH
22894: LD_VAR 0 9
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: ST_TO_ADDR
22906: GO 23050
// begin if result [ result ] [ 2 ] < tmp then
22908: LD_VAR 0 6
22912: PUSH
22913: LD_VAR 0 6
22917: ARRAY
22918: PUSH
22919: LD_INT 2
22921: ARRAY
22922: PUSH
22923: LD_VAR 0 9
22927: LESS
22928: IFFALSE 22970
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22930: LD_ADDR_VAR 0 6
22934: PUSH
22935: LD_VAR 0 6
22939: PPUSH
22940: LD_VAR 0 6
22944: PUSH
22945: LD_INT 1
22947: PLUS
22948: PPUSH
22949: LD_VAR 0 7
22953: PUSH
22954: LD_VAR 0 9
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PPUSH
22963: CALL_OW 2
22967: ST_TO_ADDR
22968: GO 23050
// for j = 1 to result do
22970: LD_ADDR_VAR 0 8
22974: PUSH
22975: DOUBLE
22976: LD_INT 1
22978: DEC
22979: ST_TO_ADDR
22980: LD_VAR 0 6
22984: PUSH
22985: FOR_TO
22986: IFFALSE 23048
// begin if tmp < result [ j ] [ 2 ] then
22988: LD_VAR 0 9
22992: PUSH
22993: LD_VAR 0 6
22997: PUSH
22998: LD_VAR 0 8
23002: ARRAY
23003: PUSH
23004: LD_INT 2
23006: ARRAY
23007: LESS
23008: IFFALSE 23046
// begin result := Insert ( result , j , [ i , tmp ] ) ;
23010: LD_ADDR_VAR 0 6
23014: PUSH
23015: LD_VAR 0 6
23019: PPUSH
23020: LD_VAR 0 8
23024: PPUSH
23025: LD_VAR 0 7
23029: PUSH
23030: LD_VAR 0 9
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PPUSH
23039: CALL_OW 2
23043: ST_TO_ADDR
// break ;
23044: GO 23048
// end ; end ;
23046: GO 22985
23048: POP
23049: POP
// end ; end ;
23050: GO 22849
23052: POP
23053: POP
// if result and not asc then
23054: LD_VAR 0 6
23058: PUSH
23059: LD_VAR 0 4
23063: NOT
23064: AND
23065: IFFALSE 23140
// begin tmp := result ;
23067: LD_ADDR_VAR 0 9
23071: PUSH
23072: LD_VAR 0 6
23076: ST_TO_ADDR
// for i = tmp downto 1 do
23077: LD_ADDR_VAR 0 7
23081: PUSH
23082: DOUBLE
23083: LD_VAR 0 9
23087: INC
23088: ST_TO_ADDR
23089: LD_INT 1
23091: PUSH
23092: FOR_DOWNTO
23093: IFFALSE 23138
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
23095: LD_ADDR_VAR 0 6
23099: PUSH
23100: LD_VAR 0 6
23104: PPUSH
23105: LD_VAR 0 9
23109: PUSH
23110: LD_VAR 0 7
23114: MINUS
23115: PUSH
23116: LD_INT 1
23118: PLUS
23119: PPUSH
23120: LD_VAR 0 9
23124: PUSH
23125: LD_VAR 0 7
23129: ARRAY
23130: PPUSH
23131: CALL_OW 1
23135: ST_TO_ADDR
23136: GO 23092
23138: POP
23139: POP
// end ; tmp := [ ] ;
23140: LD_ADDR_VAR 0 9
23144: PUSH
23145: EMPTY
23146: ST_TO_ADDR
// if mode then
23147: LD_VAR 0 5
23151: IFFALSE 23220
// begin for i = 1 to result do
23153: LD_ADDR_VAR 0 7
23157: PUSH
23158: DOUBLE
23159: LD_INT 1
23161: DEC
23162: ST_TO_ADDR
23163: LD_VAR 0 6
23167: PUSH
23168: FOR_TO
23169: IFFALSE 23208
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
23171: LD_ADDR_VAR 0 9
23175: PUSH
23176: LD_VAR 0 9
23180: PPUSH
23181: LD_VAR 0 7
23185: PPUSH
23186: LD_VAR 0 6
23190: PUSH
23191: LD_VAR 0 7
23195: ARRAY
23196: PUSH
23197: LD_INT 1
23199: ARRAY
23200: PPUSH
23201: CALL_OW 1
23205: ST_TO_ADDR
23206: GO 23168
23208: POP
23209: POP
// result := tmp ;
23210: LD_ADDR_VAR 0 6
23214: PUSH
23215: LD_VAR 0 9
23219: ST_TO_ADDR
// end ; end ;
23220: LD_VAR 0 6
23224: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
23225: LD_INT 0
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
23233: LD_ADDR_VAR 0 5
23237: PUSH
23238: LD_INT 0
23240: PUSH
23241: LD_INT 0
23243: PUSH
23244: LD_INT 0
23246: PUSH
23247: EMPTY
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: ST_TO_ADDR
// if not x or not y then
23255: LD_VAR 0 2
23259: NOT
23260: PUSH
23261: LD_VAR 0 3
23265: NOT
23266: OR
23267: IFFALSE 23271
// exit ;
23269: GO 24921
// if not range then
23271: LD_VAR 0 4
23275: NOT
23276: IFFALSE 23286
// range := 10 ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_INT 10
23285: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23286: LD_ADDR_VAR 0 8
23290: PUSH
23291: LD_INT 81
23293: PUSH
23294: LD_VAR 0 1
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: LD_INT 92
23305: PUSH
23306: LD_VAR 0 2
23310: PUSH
23311: LD_VAR 0 3
23315: PUSH
23316: LD_VAR 0 4
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: LIST
23325: LIST
23326: PUSH
23327: LD_INT 3
23329: PUSH
23330: LD_INT 21
23332: PUSH
23333: LD_INT 3
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PUSH
23344: EMPTY
23345: LIST
23346: LIST
23347: LIST
23348: PPUSH
23349: CALL_OW 69
23353: ST_TO_ADDR
// if not tmp then
23354: LD_VAR 0 8
23358: NOT
23359: IFFALSE 23363
// exit ;
23361: GO 24921
// for i in tmp do
23363: LD_ADDR_VAR 0 6
23367: PUSH
23368: LD_VAR 0 8
23372: PUSH
23373: FOR_IN
23374: IFFALSE 24896
// begin points := [ 0 , 0 , 0 ] ;
23376: LD_ADDR_VAR 0 9
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: LIST
23394: ST_TO_ADDR
// bpoints := 1 ;
23395: LD_ADDR_VAR 0 10
23399: PUSH
23400: LD_INT 1
23402: ST_TO_ADDR
// case GetType ( i ) of unit_human :
23403: LD_VAR 0 6
23407: PPUSH
23408: CALL_OW 247
23412: PUSH
23413: LD_INT 1
23415: DOUBLE
23416: EQUAL
23417: IFTRUE 23421
23419: GO 23999
23421: POP
// begin if GetClass ( i ) = 1 then
23422: LD_VAR 0 6
23426: PPUSH
23427: CALL_OW 257
23431: PUSH
23432: LD_INT 1
23434: EQUAL
23435: IFFALSE 23456
// points := [ 10 , 5 , 3 ] ;
23437: LD_ADDR_VAR 0 9
23441: PUSH
23442: LD_INT 10
23444: PUSH
23445: LD_INT 5
23447: PUSH
23448: LD_INT 3
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: LIST
23455: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23456: LD_VAR 0 6
23460: PPUSH
23461: CALL_OW 257
23465: PUSH
23466: LD_INT 2
23468: PUSH
23469: LD_INT 3
23471: PUSH
23472: LD_INT 4
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: LIST
23479: IN
23480: IFFALSE 23501
// points := [ 3 , 2 , 1 ] ;
23482: LD_ADDR_VAR 0 9
23486: PUSH
23487: LD_INT 3
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 1
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23501: LD_VAR 0 6
23505: PPUSH
23506: CALL_OW 257
23510: PUSH
23511: LD_INT 5
23513: EQUAL
23514: IFFALSE 23535
// points := [ 130 , 5 , 2 ] ;
23516: LD_ADDR_VAR 0 9
23520: PUSH
23521: LD_INT 130
23523: PUSH
23524: LD_INT 5
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: LIST
23534: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23535: LD_VAR 0 6
23539: PPUSH
23540: CALL_OW 257
23544: PUSH
23545: LD_INT 8
23547: EQUAL
23548: IFFALSE 23569
// points := [ 35 , 35 , 30 ] ;
23550: LD_ADDR_VAR 0 9
23554: PUSH
23555: LD_INT 35
23557: PUSH
23558: LD_INT 35
23560: PUSH
23561: LD_INT 30
23563: PUSH
23564: EMPTY
23565: LIST
23566: LIST
23567: LIST
23568: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23569: LD_VAR 0 6
23573: PPUSH
23574: CALL_OW 257
23578: PUSH
23579: LD_INT 9
23581: EQUAL
23582: IFFALSE 23603
// points := [ 20 , 55 , 40 ] ;
23584: LD_ADDR_VAR 0 9
23588: PUSH
23589: LD_INT 20
23591: PUSH
23592: LD_INT 55
23594: PUSH
23595: LD_INT 40
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: LIST
23602: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23603: LD_VAR 0 6
23607: PPUSH
23608: CALL_OW 257
23612: PUSH
23613: LD_INT 12
23615: PUSH
23616: LD_INT 16
23618: PUSH
23619: EMPTY
23620: LIST
23621: LIST
23622: IN
23623: IFFALSE 23644
// points := [ 5 , 3 , 2 ] ;
23625: LD_ADDR_VAR 0 9
23629: PUSH
23630: LD_INT 5
23632: PUSH
23633: LD_INT 3
23635: PUSH
23636: LD_INT 2
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: LIST
23643: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23644: LD_VAR 0 6
23648: PPUSH
23649: CALL_OW 257
23653: PUSH
23654: LD_INT 17
23656: EQUAL
23657: IFFALSE 23678
// points := [ 100 , 50 , 75 ] ;
23659: LD_ADDR_VAR 0 9
23663: PUSH
23664: LD_INT 100
23666: PUSH
23667: LD_INT 50
23669: PUSH
23670: LD_INT 75
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: LIST
23677: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23678: LD_VAR 0 6
23682: PPUSH
23683: CALL_OW 257
23687: PUSH
23688: LD_INT 15
23690: EQUAL
23691: IFFALSE 23712
// points := [ 10 , 5 , 3 ] ;
23693: LD_ADDR_VAR 0 9
23697: PUSH
23698: LD_INT 10
23700: PUSH
23701: LD_INT 5
23703: PUSH
23704: LD_INT 3
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: LIST
23711: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23712: LD_VAR 0 6
23716: PPUSH
23717: CALL_OW 257
23721: PUSH
23722: LD_INT 14
23724: EQUAL
23725: IFFALSE 23746
// points := [ 10 , 0 , 0 ] ;
23727: LD_ADDR_VAR 0 9
23731: PUSH
23732: LD_INT 10
23734: PUSH
23735: LD_INT 0
23737: PUSH
23738: LD_INT 0
23740: PUSH
23741: EMPTY
23742: LIST
23743: LIST
23744: LIST
23745: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23746: LD_VAR 0 6
23750: PPUSH
23751: CALL_OW 257
23755: PUSH
23756: LD_INT 11
23758: EQUAL
23759: IFFALSE 23780
// points := [ 30 , 10 , 5 ] ;
23761: LD_ADDR_VAR 0 9
23765: PUSH
23766: LD_INT 30
23768: PUSH
23769: LD_INT 10
23771: PUSH
23772: LD_INT 5
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: LIST
23779: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23780: LD_VAR 0 1
23784: PPUSH
23785: LD_INT 5
23787: PPUSH
23788: CALL_OW 321
23792: PUSH
23793: LD_INT 2
23795: EQUAL
23796: IFFALSE 23813
// bpoints := bpoints * 1.8 ;
23798: LD_ADDR_VAR 0 10
23802: PUSH
23803: LD_VAR 0 10
23807: PUSH
23808: LD_REAL  1.80000000000000E+0000
23811: MUL
23812: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23813: LD_VAR 0 6
23817: PPUSH
23818: CALL_OW 257
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: LD_INT 3
23831: PUSH
23832: LD_INT 4
23834: PUSH
23835: EMPTY
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: IN
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: LD_INT 51
23849: PPUSH
23850: CALL_OW 321
23854: PUSH
23855: LD_INT 2
23857: EQUAL
23858: AND
23859: IFFALSE 23876
// bpoints := bpoints * 1.2 ;
23861: LD_ADDR_VAR 0 10
23865: PUSH
23866: LD_VAR 0 10
23870: PUSH
23871: LD_REAL  1.20000000000000E+0000
23874: MUL
23875: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23876: LD_VAR 0 6
23880: PPUSH
23881: CALL_OW 257
23885: PUSH
23886: LD_INT 5
23888: PUSH
23889: LD_INT 7
23891: PUSH
23892: LD_INT 9
23894: PUSH
23895: EMPTY
23896: LIST
23897: LIST
23898: LIST
23899: IN
23900: PUSH
23901: LD_VAR 0 1
23905: PPUSH
23906: LD_INT 52
23908: PPUSH
23909: CALL_OW 321
23913: PUSH
23914: LD_INT 2
23916: EQUAL
23917: AND
23918: IFFALSE 23935
// bpoints := bpoints * 1.5 ;
23920: LD_ADDR_VAR 0 10
23924: PUSH
23925: LD_VAR 0 10
23929: PUSH
23930: LD_REAL  1.50000000000000E+0000
23933: MUL
23934: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23935: LD_VAR 0 1
23939: PPUSH
23940: LD_INT 66
23942: PPUSH
23943: CALL_OW 321
23947: PUSH
23948: LD_INT 2
23950: EQUAL
23951: IFFALSE 23968
// bpoints := bpoints * 1.1 ;
23953: LD_ADDR_VAR 0 10
23957: PUSH
23958: LD_VAR 0 10
23962: PUSH
23963: LD_REAL  1.10000000000000E+0000
23966: MUL
23967: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23968: LD_ADDR_VAR 0 10
23972: PUSH
23973: LD_VAR 0 10
23977: PUSH
23978: LD_VAR 0 6
23982: PPUSH
23983: LD_INT 1
23985: PPUSH
23986: CALL_OW 259
23990: PUSH
23991: LD_REAL  1.15000000000000E+0000
23994: MUL
23995: MUL
23996: ST_TO_ADDR
// end ; unit_vehicle :
23997: GO 24825
23999: LD_INT 2
24001: DOUBLE
24002: EQUAL
24003: IFTRUE 24007
24005: GO 24813
24007: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
24008: LD_VAR 0 6
24012: PPUSH
24013: CALL_OW 264
24017: PUSH
24018: LD_INT 2
24020: PUSH
24021: LD_INT 42
24023: PUSH
24024: LD_INT 24
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: IN
24032: IFFALSE 24053
// points := [ 25 , 5 , 3 ] ;
24034: LD_ADDR_VAR 0 9
24038: PUSH
24039: LD_INT 25
24041: PUSH
24042: LD_INT 5
24044: PUSH
24045: LD_INT 3
24047: PUSH
24048: EMPTY
24049: LIST
24050: LIST
24051: LIST
24052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
24053: LD_VAR 0 6
24057: PPUSH
24058: CALL_OW 264
24062: PUSH
24063: LD_INT 4
24065: PUSH
24066: LD_INT 43
24068: PUSH
24069: LD_INT 25
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: IN
24077: IFFALSE 24098
// points := [ 40 , 15 , 5 ] ;
24079: LD_ADDR_VAR 0 9
24083: PUSH
24084: LD_INT 40
24086: PUSH
24087: LD_INT 15
24089: PUSH
24090: LD_INT 5
24092: PUSH
24093: EMPTY
24094: LIST
24095: LIST
24096: LIST
24097: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
24098: LD_VAR 0 6
24102: PPUSH
24103: CALL_OW 264
24107: PUSH
24108: LD_INT 3
24110: PUSH
24111: LD_INT 23
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: IN
24118: IFFALSE 24139
// points := [ 7 , 25 , 8 ] ;
24120: LD_ADDR_VAR 0 9
24124: PUSH
24125: LD_INT 7
24127: PUSH
24128: LD_INT 25
24130: PUSH
24131: LD_INT 8
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
24139: LD_VAR 0 6
24143: PPUSH
24144: CALL_OW 264
24148: PUSH
24149: LD_INT 5
24151: PUSH
24152: LD_INT 27
24154: PUSH
24155: LD_INT 44
24157: PUSH
24158: EMPTY
24159: LIST
24160: LIST
24161: LIST
24162: IN
24163: IFFALSE 24184
// points := [ 14 , 50 , 16 ] ;
24165: LD_ADDR_VAR 0 9
24169: PUSH
24170: LD_INT 14
24172: PUSH
24173: LD_INT 50
24175: PUSH
24176: LD_INT 16
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
24184: LD_VAR 0 6
24188: PPUSH
24189: CALL_OW 264
24193: PUSH
24194: LD_INT 6
24196: PUSH
24197: LD_INT 46
24199: PUSH
24200: EMPTY
24201: LIST
24202: LIST
24203: IN
24204: IFFALSE 24225
// points := [ 32 , 120 , 70 ] ;
24206: LD_ADDR_VAR 0 9
24210: PUSH
24211: LD_INT 32
24213: PUSH
24214: LD_INT 120
24216: PUSH
24217: LD_INT 70
24219: PUSH
24220: EMPTY
24221: LIST
24222: LIST
24223: LIST
24224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
24225: LD_VAR 0 6
24229: PPUSH
24230: CALL_OW 264
24234: PUSH
24235: LD_INT 7
24237: PUSH
24238: LD_INT 28
24240: PUSH
24241: LD_INT 45
24243: PUSH
24244: LD_INT 92
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: IN
24253: IFFALSE 24274
// points := [ 35 , 20 , 45 ] ;
24255: LD_ADDR_VAR 0 9
24259: PUSH
24260: LD_INT 35
24262: PUSH
24263: LD_INT 20
24265: PUSH
24266: LD_INT 45
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
24274: LD_VAR 0 6
24278: PPUSH
24279: CALL_OW 264
24283: PUSH
24284: LD_INT 47
24286: PUSH
24287: EMPTY
24288: LIST
24289: IN
24290: IFFALSE 24311
// points := [ 67 , 45 , 75 ] ;
24292: LD_ADDR_VAR 0 9
24296: PUSH
24297: LD_INT 67
24299: PUSH
24300: LD_INT 45
24302: PUSH
24303: LD_INT 75
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: LIST
24310: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
24311: LD_VAR 0 6
24315: PPUSH
24316: CALL_OW 264
24320: PUSH
24321: LD_INT 26
24323: PUSH
24324: EMPTY
24325: LIST
24326: IN
24327: IFFALSE 24348
// points := [ 120 , 30 , 80 ] ;
24329: LD_ADDR_VAR 0 9
24333: PUSH
24334: LD_INT 120
24336: PUSH
24337: LD_INT 30
24339: PUSH
24340: LD_INT 80
24342: PUSH
24343: EMPTY
24344: LIST
24345: LIST
24346: LIST
24347: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
24348: LD_VAR 0 6
24352: PPUSH
24353: CALL_OW 264
24357: PUSH
24358: LD_INT 22
24360: PUSH
24361: EMPTY
24362: LIST
24363: IN
24364: IFFALSE 24385
// points := [ 40 , 1 , 1 ] ;
24366: LD_ADDR_VAR 0 9
24370: PUSH
24371: LD_INT 40
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 1
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
24385: LD_VAR 0 6
24389: PPUSH
24390: CALL_OW 264
24394: PUSH
24395: LD_INT 29
24397: PUSH
24398: EMPTY
24399: LIST
24400: IN
24401: IFFALSE 24422
// points := [ 70 , 200 , 400 ] ;
24403: LD_ADDR_VAR 0 9
24407: PUSH
24408: LD_INT 70
24410: PUSH
24411: LD_INT 200
24413: PUSH
24414: LD_INT 400
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: LIST
24421: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24422: LD_VAR 0 6
24426: PPUSH
24427: CALL_OW 264
24431: PUSH
24432: LD_INT 14
24434: PUSH
24435: LD_INT 53
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: IN
24442: IFFALSE 24463
// points := [ 40 , 10 , 20 ] ;
24444: LD_ADDR_VAR 0 9
24448: PUSH
24449: LD_INT 40
24451: PUSH
24452: LD_INT 10
24454: PUSH
24455: LD_INT 20
24457: PUSH
24458: EMPTY
24459: LIST
24460: LIST
24461: LIST
24462: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24463: LD_VAR 0 6
24467: PPUSH
24468: CALL_OW 264
24472: PUSH
24473: LD_INT 9
24475: PUSH
24476: EMPTY
24477: LIST
24478: IN
24479: IFFALSE 24500
// points := [ 5 , 70 , 20 ] ;
24481: LD_ADDR_VAR 0 9
24485: PUSH
24486: LD_INT 5
24488: PUSH
24489: LD_INT 70
24491: PUSH
24492: LD_INT 20
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24500: LD_VAR 0 6
24504: PPUSH
24505: CALL_OW 264
24509: PUSH
24510: LD_INT 10
24512: PUSH
24513: EMPTY
24514: LIST
24515: IN
24516: IFFALSE 24537
// points := [ 35 , 110 , 70 ] ;
24518: LD_ADDR_VAR 0 9
24522: PUSH
24523: LD_INT 35
24525: PUSH
24526: LD_INT 110
24528: PUSH
24529: LD_INT 70
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: LIST
24536: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24537: LD_VAR 0 6
24541: PPUSH
24542: CALL_OW 265
24546: PUSH
24547: LD_INT 25
24549: EQUAL
24550: IFFALSE 24571
// points := [ 80 , 65 , 100 ] ;
24552: LD_ADDR_VAR 0 9
24556: PUSH
24557: LD_INT 80
24559: PUSH
24560: LD_INT 65
24562: PUSH
24563: LD_INT 100
24565: PUSH
24566: EMPTY
24567: LIST
24568: LIST
24569: LIST
24570: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24571: LD_VAR 0 6
24575: PPUSH
24576: CALL_OW 263
24580: PUSH
24581: LD_INT 1
24583: EQUAL
24584: IFFALSE 24619
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24586: LD_ADDR_VAR 0 10
24590: PUSH
24591: LD_VAR 0 10
24595: PUSH
24596: LD_VAR 0 6
24600: PPUSH
24601: CALL_OW 311
24605: PPUSH
24606: LD_INT 3
24608: PPUSH
24609: CALL_OW 259
24613: PUSH
24614: LD_INT 4
24616: MUL
24617: MUL
24618: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24619: LD_VAR 0 6
24623: PPUSH
24624: CALL_OW 263
24628: PUSH
24629: LD_INT 2
24631: EQUAL
24632: IFFALSE 24683
// begin j := IsControledBy ( i ) ;
24634: LD_ADDR_VAR 0 7
24638: PUSH
24639: LD_VAR 0 6
24643: PPUSH
24644: CALL_OW 312
24648: ST_TO_ADDR
// if j then
24649: LD_VAR 0 7
24653: IFFALSE 24683
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24655: LD_ADDR_VAR 0 10
24659: PUSH
24660: LD_VAR 0 10
24664: PUSH
24665: LD_VAR 0 7
24669: PPUSH
24670: LD_INT 3
24672: PPUSH
24673: CALL_OW 259
24677: PUSH
24678: LD_INT 3
24680: MUL
24681: MUL
24682: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24683: LD_VAR 0 6
24687: PPUSH
24688: CALL_OW 264
24692: PUSH
24693: LD_INT 5
24695: PUSH
24696: LD_INT 6
24698: PUSH
24699: LD_INT 46
24701: PUSH
24702: LD_INT 44
24704: PUSH
24705: LD_INT 47
24707: PUSH
24708: LD_INT 45
24710: PUSH
24711: LD_INT 28
24713: PUSH
24714: LD_INT 7
24716: PUSH
24717: LD_INT 27
24719: PUSH
24720: LD_INT 29
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: IN
24735: PUSH
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 52
24743: PPUSH
24744: CALL_OW 321
24748: PUSH
24749: LD_INT 2
24751: EQUAL
24752: AND
24753: IFFALSE 24770
// bpoints := bpoints * 1.2 ;
24755: LD_ADDR_VAR 0 10
24759: PUSH
24760: LD_VAR 0 10
24764: PUSH
24765: LD_REAL  1.20000000000000E+0000
24768: MUL
24769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24770: LD_VAR 0 6
24774: PPUSH
24775: CALL_OW 264
24779: PUSH
24780: LD_INT 6
24782: PUSH
24783: LD_INT 46
24785: PUSH
24786: LD_INT 47
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: LIST
24793: IN
24794: IFFALSE 24811
// bpoints := bpoints * 1.2 ;
24796: LD_ADDR_VAR 0 10
24800: PUSH
24801: LD_VAR 0 10
24805: PUSH
24806: LD_REAL  1.20000000000000E+0000
24809: MUL
24810: ST_TO_ADDR
// end ; unit_building :
24811: GO 24825
24813: LD_INT 3
24815: DOUBLE
24816: EQUAL
24817: IFTRUE 24821
24819: GO 24824
24821: POP
// ; end ;
24822: GO 24825
24824: POP
// for j = 1 to 3 do
24825: LD_ADDR_VAR 0 7
24829: PUSH
24830: DOUBLE
24831: LD_INT 1
24833: DEC
24834: ST_TO_ADDR
24835: LD_INT 3
24837: PUSH
24838: FOR_TO
24839: IFFALSE 24892
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24841: LD_ADDR_VAR 0 5
24845: PUSH
24846: LD_VAR 0 5
24850: PPUSH
24851: LD_VAR 0 7
24855: PPUSH
24856: LD_VAR 0 5
24860: PUSH
24861: LD_VAR 0 7
24865: ARRAY
24866: PUSH
24867: LD_VAR 0 9
24871: PUSH
24872: LD_VAR 0 7
24876: ARRAY
24877: PUSH
24878: LD_VAR 0 10
24882: MUL
24883: PLUS
24884: PPUSH
24885: CALL_OW 1
24889: ST_TO_ADDR
24890: GO 24838
24892: POP
24893: POP
// end ;
24894: GO 23373
24896: POP
24897: POP
// result := Replace ( result , 4 , tmp ) ;
24898: LD_ADDR_VAR 0 5
24902: PUSH
24903: LD_VAR 0 5
24907: PPUSH
24908: LD_INT 4
24910: PPUSH
24911: LD_VAR 0 8
24915: PPUSH
24916: CALL_OW 1
24920: ST_TO_ADDR
// end ;
24921: LD_VAR 0 5
24925: RET
// export function DangerAtRange ( unit , range ) ; begin
24926: LD_INT 0
24928: PPUSH
// if not unit then
24929: LD_VAR 0 1
24933: NOT
24934: IFFALSE 24938
// exit ;
24936: GO 24983
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24938: LD_ADDR_VAR 0 3
24942: PUSH
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 255
24952: PPUSH
24953: LD_VAR 0 1
24957: PPUSH
24958: CALL_OW 250
24962: PPUSH
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 251
24972: PPUSH
24973: LD_VAR 0 2
24977: PPUSH
24978: CALL 23225 0 4
24982: ST_TO_ADDR
// end ;
24983: LD_VAR 0 3
24987: RET
// export function DangerInArea ( side , area ) ; begin
24988: LD_INT 0
24990: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24991: LD_ADDR_VAR 0 3
24995: PUSH
24996: LD_VAR 0 2
25000: PPUSH
25001: LD_INT 81
25003: PUSH
25004: LD_VAR 0 1
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PPUSH
25013: CALL_OW 70
25017: ST_TO_ADDR
// end ;
25018: LD_VAR 0 3
25022: RET
// export function IsExtension ( b ) ; begin
25023: LD_INT 0
25025: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
25026: LD_ADDR_VAR 0 2
25030: PUSH
25031: LD_VAR 0 1
25035: PUSH
25036: LD_INT 23
25038: PUSH
25039: LD_INT 20
25041: PUSH
25042: LD_INT 22
25044: PUSH
25045: LD_INT 17
25047: PUSH
25048: LD_INT 24
25050: PUSH
25051: LD_INT 21
25053: PUSH
25054: LD_INT 19
25056: PUSH
25057: LD_INT 16
25059: PUSH
25060: LD_INT 25
25062: PUSH
25063: LD_INT 18
25065: PUSH
25066: EMPTY
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: IN
25078: ST_TO_ADDR
// end ;
25079: LD_VAR 0 2
25083: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
25084: LD_INT 0
25086: PPUSH
25087: PPUSH
25088: PPUSH
// result := [ ] ;
25089: LD_ADDR_VAR 0 4
25093: PUSH
25094: EMPTY
25095: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
25096: LD_ADDR_VAR 0 5
25100: PUSH
25101: LD_VAR 0 2
25105: PPUSH
25106: LD_INT 21
25108: PUSH
25109: LD_INT 3
25111: PUSH
25112: EMPTY
25113: LIST
25114: LIST
25115: PPUSH
25116: CALL_OW 70
25120: ST_TO_ADDR
// if not tmp then
25121: LD_VAR 0 5
25125: NOT
25126: IFFALSE 25130
// exit ;
25128: GO 25194
// if checkLink then
25130: LD_VAR 0 3
25134: IFFALSE 25184
// begin for i in tmp do
25136: LD_ADDR_VAR 0 6
25140: PUSH
25141: LD_VAR 0 5
25145: PUSH
25146: FOR_IN
25147: IFFALSE 25182
// if GetBase ( i ) <> base then
25149: LD_VAR 0 6
25153: PPUSH
25154: CALL_OW 274
25158: PUSH
25159: LD_VAR 0 1
25163: NONEQUAL
25164: IFFALSE 25180
// ComLinkToBase ( base , i ) ;
25166: LD_VAR 0 1
25170: PPUSH
25171: LD_VAR 0 6
25175: PPUSH
25176: CALL_OW 169
25180: GO 25146
25182: POP
25183: POP
// end ; result := tmp ;
25184: LD_ADDR_VAR 0 4
25188: PUSH
25189: LD_VAR 0 5
25193: ST_TO_ADDR
// end ;
25194: LD_VAR 0 4
25198: RET
// export function ComComplete ( units , b ) ; var i ; begin
25199: LD_INT 0
25201: PPUSH
25202: PPUSH
// if not units then
25203: LD_VAR 0 1
25207: NOT
25208: IFFALSE 25212
// exit ;
25210: GO 25302
// for i in units do
25212: LD_ADDR_VAR 0 4
25216: PUSH
25217: LD_VAR 0 1
25221: PUSH
25222: FOR_IN
25223: IFFALSE 25300
// if BuildingStatus ( b ) = bs_build then
25225: LD_VAR 0 2
25229: PPUSH
25230: CALL_OW 461
25234: PUSH
25235: LD_INT 1
25237: EQUAL
25238: IFFALSE 25298
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
25240: LD_VAR 0 4
25244: PPUSH
25245: LD_STRING h
25247: PUSH
25248: LD_VAR 0 2
25252: PPUSH
25253: CALL_OW 250
25257: PUSH
25258: LD_VAR 0 2
25262: PPUSH
25263: CALL_OW 251
25267: PUSH
25268: LD_VAR 0 2
25272: PUSH
25273: LD_INT 0
25275: PUSH
25276: LD_INT 0
25278: PUSH
25279: LD_INT 0
25281: PUSH
25282: EMPTY
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: PUSH
25291: EMPTY
25292: LIST
25293: PPUSH
25294: CALL_OW 446
25298: GO 25222
25300: POP
25301: POP
// end ;
25302: LD_VAR 0 3
25306: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
25307: LD_INT 0
25309: PPUSH
25310: PPUSH
25311: PPUSH
25312: PPUSH
25313: PPUSH
25314: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
25315: LD_VAR 0 1
25319: NOT
25320: PUSH
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 263
25330: PUSH
25331: LD_INT 2
25333: NONEQUAL
25334: OR
25335: IFFALSE 25339
// exit ;
25337: GO 25655
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
25339: LD_ADDR_VAR 0 6
25343: PUSH
25344: LD_INT 22
25346: PUSH
25347: LD_VAR 0 1
25351: PPUSH
25352: CALL_OW 255
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 2
25363: PUSH
25364: LD_INT 30
25366: PUSH
25367: LD_INT 36
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 34
25376: PUSH
25377: LD_INT 31
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: PUSH
25389: EMPTY
25390: LIST
25391: LIST
25392: PPUSH
25393: CALL_OW 69
25397: ST_TO_ADDR
// if not tmp then
25398: LD_VAR 0 6
25402: NOT
25403: IFFALSE 25407
// exit ;
25405: GO 25655
// result := [ ] ;
25407: LD_ADDR_VAR 0 2
25411: PUSH
25412: EMPTY
25413: ST_TO_ADDR
// for i in tmp do
25414: LD_ADDR_VAR 0 3
25418: PUSH
25419: LD_VAR 0 6
25423: PUSH
25424: FOR_IN
25425: IFFALSE 25496
// begin t := UnitsInside ( i ) ;
25427: LD_ADDR_VAR 0 4
25431: PUSH
25432: LD_VAR 0 3
25436: PPUSH
25437: CALL_OW 313
25441: ST_TO_ADDR
// if t then
25442: LD_VAR 0 4
25446: IFFALSE 25494
// for j in t do
25448: LD_ADDR_VAR 0 7
25452: PUSH
25453: LD_VAR 0 4
25457: PUSH
25458: FOR_IN
25459: IFFALSE 25492
// result := Replace ( result , result + 1 , j ) ;
25461: LD_ADDR_VAR 0 2
25465: PUSH
25466: LD_VAR 0 2
25470: PPUSH
25471: LD_VAR 0 2
25475: PUSH
25476: LD_INT 1
25478: PLUS
25479: PPUSH
25480: LD_VAR 0 7
25484: PPUSH
25485: CALL_OW 1
25489: ST_TO_ADDR
25490: GO 25458
25492: POP
25493: POP
// end ;
25494: GO 25424
25496: POP
25497: POP
// if not result then
25498: LD_VAR 0 2
25502: NOT
25503: IFFALSE 25507
// exit ;
25505: GO 25655
// mech := result [ 1 ] ;
25507: LD_ADDR_VAR 0 5
25511: PUSH
25512: LD_VAR 0 2
25516: PUSH
25517: LD_INT 1
25519: ARRAY
25520: ST_TO_ADDR
// if result > 1 then
25521: LD_VAR 0 2
25525: PUSH
25526: LD_INT 1
25528: GREATER
25529: IFFALSE 25641
// begin for i = 2 to result do
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: DOUBLE
25537: LD_INT 2
25539: DEC
25540: ST_TO_ADDR
25541: LD_VAR 0 2
25545: PUSH
25546: FOR_TO
25547: IFFALSE 25639
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25549: LD_ADDR_VAR 0 4
25553: PUSH
25554: LD_VAR 0 2
25558: PUSH
25559: LD_VAR 0 3
25563: ARRAY
25564: PPUSH
25565: LD_INT 3
25567: PPUSH
25568: CALL_OW 259
25572: PUSH
25573: LD_VAR 0 2
25577: PUSH
25578: LD_VAR 0 3
25582: ARRAY
25583: PPUSH
25584: CALL_OW 432
25588: MINUS
25589: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25590: LD_VAR 0 4
25594: PUSH
25595: LD_VAR 0 5
25599: PPUSH
25600: LD_INT 3
25602: PPUSH
25603: CALL_OW 259
25607: PUSH
25608: LD_VAR 0 5
25612: PPUSH
25613: CALL_OW 432
25617: MINUS
25618: GREATEREQUAL
25619: IFFALSE 25637
// mech := result [ i ] ;
25621: LD_ADDR_VAR 0 5
25625: PUSH
25626: LD_VAR 0 2
25630: PUSH
25631: LD_VAR 0 3
25635: ARRAY
25636: ST_TO_ADDR
// end ;
25637: GO 25546
25639: POP
25640: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25641: LD_VAR 0 1
25645: PPUSH
25646: LD_VAR 0 5
25650: PPUSH
25651: CALL_OW 135
// end ;
25655: LD_VAR 0 2
25659: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25660: LD_INT 0
25662: PPUSH
25663: PPUSH
25664: PPUSH
25665: PPUSH
25666: PPUSH
25667: PPUSH
25668: PPUSH
25669: PPUSH
25670: PPUSH
25671: PPUSH
25672: PPUSH
25673: PPUSH
25674: PPUSH
// result := [ ] ;
25675: LD_ADDR_VAR 0 7
25679: PUSH
25680: EMPTY
25681: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25682: LD_VAR 0 1
25686: PPUSH
25687: CALL_OW 266
25691: PUSH
25692: LD_INT 0
25694: PUSH
25695: LD_INT 1
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: IN
25702: NOT
25703: IFFALSE 25707
// exit ;
25705: GO 27341
// if name then
25707: LD_VAR 0 3
25711: IFFALSE 25727
// SetBName ( base_dep , name ) ;
25713: LD_VAR 0 1
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: CALL_OW 500
// base := GetBase ( base_dep ) ;
25727: LD_ADDR_VAR 0 15
25731: PUSH
25732: LD_VAR 0 1
25736: PPUSH
25737: CALL_OW 274
25741: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25742: LD_ADDR_VAR 0 16
25746: PUSH
25747: LD_VAR 0 1
25751: PPUSH
25752: CALL_OW 255
25756: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25757: LD_ADDR_VAR 0 17
25761: PUSH
25762: LD_VAR 0 1
25766: PPUSH
25767: CALL_OW 248
25771: ST_TO_ADDR
// if sources then
25772: LD_VAR 0 5
25776: IFFALSE 25823
// for i = 1 to 3 do
25778: LD_ADDR_VAR 0 8
25782: PUSH
25783: DOUBLE
25784: LD_INT 1
25786: DEC
25787: ST_TO_ADDR
25788: LD_INT 3
25790: PUSH
25791: FOR_TO
25792: IFFALSE 25821
// AddResourceType ( base , i , sources [ i ] ) ;
25794: LD_VAR 0 15
25798: PPUSH
25799: LD_VAR 0 8
25803: PPUSH
25804: LD_VAR 0 5
25808: PUSH
25809: LD_VAR 0 8
25813: ARRAY
25814: PPUSH
25815: CALL_OW 276
25819: GO 25791
25821: POP
25822: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25823: LD_ADDR_VAR 0 18
25827: PUSH
25828: LD_VAR 0 15
25832: PPUSH
25833: LD_VAR 0 2
25837: PPUSH
25838: LD_INT 1
25840: PPUSH
25841: CALL 25084 0 3
25845: ST_TO_ADDR
// InitHc ;
25846: CALL_OW 19
// InitUc ;
25850: CALL_OW 18
// uc_side := side ;
25854: LD_ADDR_OWVAR 20
25858: PUSH
25859: LD_VAR 0 16
25863: ST_TO_ADDR
// uc_nation := nation ;
25864: LD_ADDR_OWVAR 21
25868: PUSH
25869: LD_VAR 0 17
25873: ST_TO_ADDR
// if buildings then
25874: LD_VAR 0 18
25878: IFFALSE 27200
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25880: LD_ADDR_VAR 0 19
25884: PUSH
25885: LD_VAR 0 18
25889: PPUSH
25890: LD_INT 2
25892: PUSH
25893: LD_INT 30
25895: PUSH
25896: LD_INT 29
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 30
25905: PUSH
25906: LD_INT 30
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: PPUSH
25918: CALL_OW 72
25922: ST_TO_ADDR
// if tmp then
25923: LD_VAR 0 19
25927: IFFALSE 25975
// for i in tmp do
25929: LD_ADDR_VAR 0 8
25933: PUSH
25934: LD_VAR 0 19
25938: PUSH
25939: FOR_IN
25940: IFFALSE 25973
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25942: LD_VAR 0 8
25946: PPUSH
25947: CALL_OW 250
25951: PPUSH
25952: LD_VAR 0 8
25956: PPUSH
25957: CALL_OW 251
25961: PPUSH
25962: LD_VAR 0 16
25966: PPUSH
25967: CALL_OW 441
25971: GO 25939
25973: POP
25974: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25975: LD_VAR 0 18
25979: PPUSH
25980: LD_INT 2
25982: PUSH
25983: LD_INT 30
25985: PUSH
25986: LD_INT 32
25988: PUSH
25989: EMPTY
25990: LIST
25991: LIST
25992: PUSH
25993: LD_INT 30
25995: PUSH
25996: LD_INT 33
25998: PUSH
25999: EMPTY
26000: LIST
26001: LIST
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: PPUSH
26008: CALL_OW 72
26012: IFFALSE 26100
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
26014: LD_ADDR_VAR 0 8
26018: PUSH
26019: LD_VAR 0 18
26023: PPUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 30
26029: PUSH
26030: LD_INT 32
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 30
26039: PUSH
26040: LD_INT 33
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: PPUSH
26052: CALL_OW 72
26056: PUSH
26057: FOR_IN
26058: IFFALSE 26098
// begin if not GetBWeapon ( i ) then
26060: LD_VAR 0 8
26064: PPUSH
26065: CALL_OW 269
26069: NOT
26070: IFFALSE 26096
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
26072: LD_VAR 0 8
26076: PPUSH
26077: LD_VAR 0 8
26081: PPUSH
26082: LD_VAR 0 2
26086: PPUSH
26087: CALL 27346 0 2
26091: PPUSH
26092: CALL_OW 431
// end ;
26096: GO 26057
26098: POP
26099: POP
// end ; for i = 1 to personel do
26100: LD_ADDR_VAR 0 8
26104: PUSH
26105: DOUBLE
26106: LD_INT 1
26108: DEC
26109: ST_TO_ADDR
26110: LD_VAR 0 6
26114: PUSH
26115: FOR_TO
26116: IFFALSE 27180
// begin if i > 4 then
26118: LD_VAR 0 8
26122: PUSH
26123: LD_INT 4
26125: GREATER
26126: IFFALSE 26130
// break ;
26128: GO 27180
// case i of 1 :
26130: LD_VAR 0 8
26134: PUSH
26135: LD_INT 1
26137: DOUBLE
26138: EQUAL
26139: IFTRUE 26143
26141: GO 26223
26143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
26144: LD_ADDR_VAR 0 12
26148: PUSH
26149: LD_VAR 0 18
26153: PPUSH
26154: LD_INT 22
26156: PUSH
26157: LD_VAR 0 16
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: PUSH
26166: LD_INT 58
26168: PUSH
26169: EMPTY
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 30
26177: PUSH
26178: LD_INT 32
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 30
26187: PUSH
26188: LD_INT 4
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 30
26197: PUSH
26198: LD_INT 5
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: EMPTY
26206: LIST
26207: LIST
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: PPUSH
26216: CALL_OW 72
26220: ST_TO_ADDR
26221: GO 26445
26223: LD_INT 2
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26293
26231: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
26232: LD_ADDR_VAR 0 12
26236: PUSH
26237: LD_VAR 0 18
26241: PPUSH
26242: LD_INT 22
26244: PUSH
26245: LD_VAR 0 16
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: PUSH
26254: LD_INT 2
26256: PUSH
26257: LD_INT 30
26259: PUSH
26260: LD_INT 0
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PUSH
26267: LD_INT 30
26269: PUSH
26270: LD_INT 1
26272: PUSH
26273: EMPTY
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PPUSH
26286: CALL_OW 72
26290: ST_TO_ADDR
26291: GO 26445
26293: LD_INT 3
26295: DOUBLE
26296: EQUAL
26297: IFTRUE 26301
26299: GO 26363
26301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
26302: LD_ADDR_VAR 0 12
26306: PUSH
26307: LD_VAR 0 18
26311: PPUSH
26312: LD_INT 22
26314: PUSH
26315: LD_VAR 0 16
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: PUSH
26324: LD_INT 2
26326: PUSH
26327: LD_INT 30
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 30
26339: PUSH
26340: LD_INT 3
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: LIST
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PPUSH
26356: CALL_OW 72
26360: ST_TO_ADDR
26361: GO 26445
26363: LD_INT 4
26365: DOUBLE
26366: EQUAL
26367: IFTRUE 26371
26369: GO 26444
26371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
26372: LD_ADDR_VAR 0 12
26376: PUSH
26377: LD_VAR 0 18
26381: PPUSH
26382: LD_INT 22
26384: PUSH
26385: LD_VAR 0 16
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 30
26399: PUSH
26400: LD_INT 6
26402: PUSH
26403: EMPTY
26404: LIST
26405: LIST
26406: PUSH
26407: LD_INT 30
26409: PUSH
26410: LD_INT 7
26412: PUSH
26413: EMPTY
26414: LIST
26415: LIST
26416: PUSH
26417: LD_INT 30
26419: PUSH
26420: LD_INT 8
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PPUSH
26437: CALL_OW 72
26441: ST_TO_ADDR
26442: GO 26445
26444: POP
// if i = 1 then
26445: LD_VAR 0 8
26449: PUSH
26450: LD_INT 1
26452: EQUAL
26453: IFFALSE 26564
// begin tmp := [ ] ;
26455: LD_ADDR_VAR 0 19
26459: PUSH
26460: EMPTY
26461: ST_TO_ADDR
// for j in f do
26462: LD_ADDR_VAR 0 9
26466: PUSH
26467: LD_VAR 0 12
26471: PUSH
26472: FOR_IN
26473: IFFALSE 26546
// if GetBType ( j ) = b_bunker then
26475: LD_VAR 0 9
26479: PPUSH
26480: CALL_OW 266
26484: PUSH
26485: LD_INT 32
26487: EQUAL
26488: IFFALSE 26515
// tmp := Insert ( tmp , 1 , j ) else
26490: LD_ADDR_VAR 0 19
26494: PUSH
26495: LD_VAR 0 19
26499: PPUSH
26500: LD_INT 1
26502: PPUSH
26503: LD_VAR 0 9
26507: PPUSH
26508: CALL_OW 2
26512: ST_TO_ADDR
26513: GO 26544
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26515: LD_ADDR_VAR 0 19
26519: PUSH
26520: LD_VAR 0 19
26524: PPUSH
26525: LD_VAR 0 19
26529: PUSH
26530: LD_INT 1
26532: PLUS
26533: PPUSH
26534: LD_VAR 0 9
26538: PPUSH
26539: CALL_OW 2
26543: ST_TO_ADDR
26544: GO 26472
26546: POP
26547: POP
// if tmp then
26548: LD_VAR 0 19
26552: IFFALSE 26564
// f := tmp ;
26554: LD_ADDR_VAR 0 12
26558: PUSH
26559: LD_VAR 0 19
26563: ST_TO_ADDR
// end ; x := personel [ i ] ;
26564: LD_ADDR_VAR 0 13
26568: PUSH
26569: LD_VAR 0 6
26573: PUSH
26574: LD_VAR 0 8
26578: ARRAY
26579: ST_TO_ADDR
// if x = - 1 then
26580: LD_VAR 0 13
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: EQUAL
26589: IFFALSE 26798
// begin for j in f do
26591: LD_ADDR_VAR 0 9
26595: PUSH
26596: LD_VAR 0 12
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26794
// repeat InitHc ;
26604: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26608: LD_VAR 0 9
26612: PPUSH
26613: CALL_OW 266
26617: PUSH
26618: LD_INT 5
26620: EQUAL
26621: IFFALSE 26691
// begin if UnitsInside ( j ) < 3 then
26623: LD_VAR 0 9
26627: PPUSH
26628: CALL_OW 313
26632: PUSH
26633: LD_INT 3
26635: LESS
26636: IFFALSE 26672
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26638: LD_INT 0
26640: PPUSH
26641: LD_INT 5
26643: PUSH
26644: LD_INT 8
26646: PUSH
26647: LD_INT 9
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: LIST
26654: PUSH
26655: LD_VAR 0 17
26659: ARRAY
26660: PPUSH
26661: LD_VAR 0 4
26665: PPUSH
26666: CALL_OW 380
26670: GO 26689
// PrepareHuman ( false , i , skill ) ;
26672: LD_INT 0
26674: PPUSH
26675: LD_VAR 0 8
26679: PPUSH
26680: LD_VAR 0 4
26684: PPUSH
26685: CALL_OW 380
// end else
26689: GO 26708
// PrepareHuman ( false , i , skill ) ;
26691: LD_INT 0
26693: PPUSH
26694: LD_VAR 0 8
26698: PPUSH
26699: LD_VAR 0 4
26703: PPUSH
26704: CALL_OW 380
// un := CreateHuman ;
26708: LD_ADDR_VAR 0 14
26712: PUSH
26713: CALL_OW 44
26717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26718: LD_ADDR_VAR 0 7
26722: PUSH
26723: LD_VAR 0 7
26727: PPUSH
26728: LD_INT 1
26730: PPUSH
26731: LD_VAR 0 14
26735: PPUSH
26736: CALL_OW 2
26740: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26741: LD_VAR 0 14
26745: PPUSH
26746: LD_VAR 0 9
26750: PPUSH
26751: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26755: LD_VAR 0 9
26759: PPUSH
26760: CALL_OW 313
26764: PUSH
26765: LD_INT 6
26767: EQUAL
26768: PUSH
26769: LD_VAR 0 9
26773: PPUSH
26774: CALL_OW 266
26778: PUSH
26779: LD_INT 32
26781: PUSH
26782: LD_INT 31
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: IN
26789: OR
26790: IFFALSE 26604
26792: GO 26601
26794: POP
26795: POP
// end else
26796: GO 27178
// for j = 1 to x do
26798: LD_ADDR_VAR 0 9
26802: PUSH
26803: DOUBLE
26804: LD_INT 1
26806: DEC
26807: ST_TO_ADDR
26808: LD_VAR 0 13
26812: PUSH
26813: FOR_TO
26814: IFFALSE 27176
// begin InitHc ;
26816: CALL_OW 19
// if not f then
26820: LD_VAR 0 12
26824: NOT
26825: IFFALSE 26914
// begin PrepareHuman ( false , i , skill ) ;
26827: LD_INT 0
26829: PPUSH
26830: LD_VAR 0 8
26834: PPUSH
26835: LD_VAR 0 4
26839: PPUSH
26840: CALL_OW 380
// un := CreateHuman ;
26844: LD_ADDR_VAR 0 14
26848: PUSH
26849: CALL_OW 44
26853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26854: LD_ADDR_VAR 0 7
26858: PUSH
26859: LD_VAR 0 7
26863: PPUSH
26864: LD_INT 1
26866: PPUSH
26867: LD_VAR 0 14
26871: PPUSH
26872: CALL_OW 2
26876: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26877: LD_VAR 0 14
26881: PPUSH
26882: LD_VAR 0 1
26886: PPUSH
26887: CALL_OW 250
26891: PPUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 251
26901: PPUSH
26902: LD_INT 10
26904: PPUSH
26905: LD_INT 0
26907: PPUSH
26908: CALL_OW 50
// continue ;
26912: GO 26813
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26914: LD_VAR 0 12
26918: PUSH
26919: LD_INT 1
26921: ARRAY
26922: PPUSH
26923: CALL_OW 313
26927: PUSH
26928: LD_VAR 0 12
26932: PUSH
26933: LD_INT 1
26935: ARRAY
26936: PPUSH
26937: CALL_OW 266
26941: PUSH
26942: LD_INT 32
26944: PUSH
26945: LD_INT 31
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: IN
26952: AND
26953: PUSH
26954: LD_VAR 0 12
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: CALL_OW 313
26967: PUSH
26968: LD_INT 6
26970: EQUAL
26971: OR
26972: IFFALSE 26992
// f := Delete ( f , 1 ) ;
26974: LD_ADDR_VAR 0 12
26978: PUSH
26979: LD_VAR 0 12
26983: PPUSH
26984: LD_INT 1
26986: PPUSH
26987: CALL_OW 3
26991: ST_TO_ADDR
// if not f then
26992: LD_VAR 0 12
26996: NOT
26997: IFFALSE 27015
// begin x := x + 2 ;
26999: LD_ADDR_VAR 0 13
27003: PUSH
27004: LD_VAR 0 13
27008: PUSH
27009: LD_INT 2
27011: PLUS
27012: ST_TO_ADDR
// continue ;
27013: GO 26813
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
27015: LD_VAR 0 12
27019: PUSH
27020: LD_INT 1
27022: ARRAY
27023: PPUSH
27024: CALL_OW 266
27028: PUSH
27029: LD_INT 5
27031: EQUAL
27032: IFFALSE 27106
// begin if UnitsInside ( f [ 1 ] ) < 3 then
27034: LD_VAR 0 12
27038: PUSH
27039: LD_INT 1
27041: ARRAY
27042: PPUSH
27043: CALL_OW 313
27047: PUSH
27048: LD_INT 3
27050: LESS
27051: IFFALSE 27087
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
27053: LD_INT 0
27055: PPUSH
27056: LD_INT 5
27058: PUSH
27059: LD_INT 8
27061: PUSH
27062: LD_INT 9
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: LIST
27069: PUSH
27070: LD_VAR 0 17
27074: ARRAY
27075: PPUSH
27076: LD_VAR 0 4
27080: PPUSH
27081: CALL_OW 380
27085: GO 27104
// PrepareHuman ( false , i , skill ) ;
27087: LD_INT 0
27089: PPUSH
27090: LD_VAR 0 8
27094: PPUSH
27095: LD_VAR 0 4
27099: PPUSH
27100: CALL_OW 380
// end else
27104: GO 27123
// PrepareHuman ( false , i , skill ) ;
27106: LD_INT 0
27108: PPUSH
27109: LD_VAR 0 8
27113: PPUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: CALL_OW 380
// un := CreateHuman ;
27123: LD_ADDR_VAR 0 14
27127: PUSH
27128: CALL_OW 44
27132: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
27133: LD_ADDR_VAR 0 7
27137: PUSH
27138: LD_VAR 0 7
27142: PPUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_VAR 0 14
27150: PPUSH
27151: CALL_OW 2
27155: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
27156: LD_VAR 0 14
27160: PPUSH
27161: LD_VAR 0 12
27165: PUSH
27166: LD_INT 1
27168: ARRAY
27169: PPUSH
27170: CALL_OW 52
// end ;
27174: GO 26813
27176: POP
27177: POP
// end ;
27178: GO 26115
27180: POP
27181: POP
// result := result ^ buildings ;
27182: LD_ADDR_VAR 0 7
27186: PUSH
27187: LD_VAR 0 7
27191: PUSH
27192: LD_VAR 0 18
27196: ADD
27197: ST_TO_ADDR
// end else
27198: GO 27341
// begin for i = 1 to personel do
27200: LD_ADDR_VAR 0 8
27204: PUSH
27205: DOUBLE
27206: LD_INT 1
27208: DEC
27209: ST_TO_ADDR
27210: LD_VAR 0 6
27214: PUSH
27215: FOR_TO
27216: IFFALSE 27339
// begin if i > 4 then
27218: LD_VAR 0 8
27222: PUSH
27223: LD_INT 4
27225: GREATER
27226: IFFALSE 27230
// break ;
27228: GO 27339
// x := personel [ i ] ;
27230: LD_ADDR_VAR 0 13
27234: PUSH
27235: LD_VAR 0 6
27239: PUSH
27240: LD_VAR 0 8
27244: ARRAY
27245: ST_TO_ADDR
// if x = - 1 then
27246: LD_VAR 0 13
27250: PUSH
27251: LD_INT 1
27253: NEG
27254: EQUAL
27255: IFFALSE 27259
// continue ;
27257: GO 27215
// PrepareHuman ( false , i , skill ) ;
27259: LD_INT 0
27261: PPUSH
27262: LD_VAR 0 8
27266: PPUSH
27267: LD_VAR 0 4
27271: PPUSH
27272: CALL_OW 380
// un := CreateHuman ;
27276: LD_ADDR_VAR 0 14
27280: PUSH
27281: CALL_OW 44
27285: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
27286: LD_VAR 0 14
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 250
27300: PPUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 251
27310: PPUSH
27311: LD_INT 10
27313: PPUSH
27314: LD_INT 0
27316: PPUSH
27317: CALL_OW 50
// result := result ^ un ;
27321: LD_ADDR_VAR 0 7
27325: PUSH
27326: LD_VAR 0 7
27330: PUSH
27331: LD_VAR 0 14
27335: ADD
27336: ST_TO_ADDR
// end ;
27337: GO 27215
27339: POP
27340: POP
// end ; end ;
27341: LD_VAR 0 7
27345: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
27357: PPUSH
27358: PPUSH
27359: PPUSH
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
// result := false ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_INT 0
27371: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
27372: LD_VAR 0 1
27376: NOT
27377: PUSH
27378: LD_VAR 0 1
27382: PPUSH
27383: CALL_OW 266
27387: PUSH
27388: LD_INT 32
27390: PUSH
27391: LD_INT 33
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: IN
27398: NOT
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 28513
// nat := GetNation ( tower ) ;
27404: LD_ADDR_VAR 0 12
27408: PUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: CALL_OW 248
27418: ST_TO_ADDR
// side := GetSide ( tower ) ;
27419: LD_ADDR_VAR 0 16
27423: PUSH
27424: LD_VAR 0 1
27428: PPUSH
27429: CALL_OW 255
27433: ST_TO_ADDR
// x := GetX ( tower ) ;
27434: LD_ADDR_VAR 0 10
27438: PUSH
27439: LD_VAR 0 1
27443: PPUSH
27444: CALL_OW 250
27448: ST_TO_ADDR
// y := GetY ( tower ) ;
27449: LD_ADDR_VAR 0 11
27453: PUSH
27454: LD_VAR 0 1
27458: PPUSH
27459: CALL_OW 251
27463: ST_TO_ADDR
// if not x or not y then
27464: LD_VAR 0 10
27468: NOT
27469: PUSH
27470: LD_VAR 0 11
27474: NOT
27475: OR
27476: IFFALSE 27480
// exit ;
27478: GO 28513
// weapon := 0 ;
27480: LD_ADDR_VAR 0 18
27484: PUSH
27485: LD_INT 0
27487: ST_TO_ADDR
// fac_list := [ ] ;
27488: LD_ADDR_VAR 0 17
27492: PUSH
27493: EMPTY
27494: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27495: LD_ADDR_VAR 0 6
27499: PUSH
27500: LD_VAR 0 1
27504: PPUSH
27505: CALL_OW 274
27509: PPUSH
27510: LD_VAR 0 2
27514: PPUSH
27515: LD_INT 0
27517: PPUSH
27518: CALL 25084 0 3
27522: PPUSH
27523: LD_INT 30
27525: PUSH
27526: LD_INT 3
27528: PUSH
27529: EMPTY
27530: LIST
27531: LIST
27532: PPUSH
27533: CALL_OW 72
27537: ST_TO_ADDR
// if not factories then
27538: LD_VAR 0 6
27542: NOT
27543: IFFALSE 27547
// exit ;
27545: GO 28513
// for i in factories do
27547: LD_ADDR_VAR 0 8
27551: PUSH
27552: LD_VAR 0 6
27556: PUSH
27557: FOR_IN
27558: IFFALSE 27583
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27560: LD_ADDR_VAR 0 17
27564: PUSH
27565: LD_VAR 0 17
27569: PUSH
27570: LD_VAR 0 8
27574: PPUSH
27575: CALL_OW 478
27579: UNION
27580: ST_TO_ADDR
27581: GO 27557
27583: POP
27584: POP
// if not fac_list then
27585: LD_VAR 0 17
27589: NOT
27590: IFFALSE 27594
// exit ;
27592: GO 28513
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27594: LD_ADDR_VAR 0 5
27598: PUSH
27599: LD_INT 4
27601: PUSH
27602: LD_INT 5
27604: PUSH
27605: LD_INT 9
27607: PUSH
27608: LD_INT 10
27610: PUSH
27611: LD_INT 6
27613: PUSH
27614: LD_INT 7
27616: PUSH
27617: LD_INT 11
27619: PUSH
27620: EMPTY
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 27
27631: PUSH
27632: LD_INT 28
27634: PUSH
27635: LD_INT 26
27637: PUSH
27638: LD_INT 30
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 43
27649: PUSH
27650: LD_INT 44
27652: PUSH
27653: LD_INT 46
27655: PUSH
27656: LD_INT 45
27658: PUSH
27659: LD_INT 47
27661: PUSH
27662: LD_INT 49
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: LIST
27677: PUSH
27678: LD_VAR 0 12
27682: ARRAY
27683: ST_TO_ADDR
// list := list isect fac_list ;
27684: LD_ADDR_VAR 0 5
27688: PUSH
27689: LD_VAR 0 5
27693: PUSH
27694: LD_VAR 0 17
27698: ISECT
27699: ST_TO_ADDR
// if not list then
27700: LD_VAR 0 5
27704: NOT
27705: IFFALSE 27709
// exit ;
27707: GO 28513
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27709: LD_VAR 0 12
27713: PUSH
27714: LD_INT 3
27716: EQUAL
27717: PUSH
27718: LD_INT 49
27720: PUSH
27721: LD_VAR 0 5
27725: IN
27726: AND
27727: PUSH
27728: LD_INT 31
27730: PPUSH
27731: LD_VAR 0 16
27735: PPUSH
27736: CALL_OW 321
27740: PUSH
27741: LD_INT 2
27743: EQUAL
27744: AND
27745: IFFALSE 27805
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27747: LD_INT 22
27749: PUSH
27750: LD_VAR 0 16
27754: PUSH
27755: EMPTY
27756: LIST
27757: LIST
27758: PUSH
27759: LD_INT 35
27761: PUSH
27762: LD_INT 49
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 91
27771: PUSH
27772: LD_VAR 0 1
27776: PUSH
27777: LD_INT 10
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: PUSH
27785: EMPTY
27786: LIST
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: NOT
27795: IFFALSE 27805
// weapon := ru_time_lapser ;
27797: LD_ADDR_VAR 0 18
27801: PUSH
27802: LD_INT 49
27804: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27805: LD_VAR 0 12
27809: PUSH
27810: LD_INT 1
27812: PUSH
27813: LD_INT 2
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: IN
27820: PUSH
27821: LD_INT 11
27823: PUSH
27824: LD_VAR 0 5
27828: IN
27829: PUSH
27830: LD_INT 30
27832: PUSH
27833: LD_VAR 0 5
27837: IN
27838: OR
27839: AND
27840: PUSH
27841: LD_INT 6
27843: PPUSH
27844: LD_VAR 0 16
27848: PPUSH
27849: CALL_OW 321
27853: PUSH
27854: LD_INT 2
27856: EQUAL
27857: AND
27858: IFFALSE 28023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27860: LD_INT 22
27862: PUSH
27863: LD_VAR 0 16
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 2
27874: PUSH
27875: LD_INT 35
27877: PUSH
27878: LD_INT 11
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 35
27887: PUSH
27888: LD_INT 30
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 91
27902: PUSH
27903: LD_VAR 0 1
27907: PUSH
27908: LD_INT 18
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: LIST
27920: PPUSH
27921: CALL_OW 69
27925: NOT
27926: PUSH
27927: LD_INT 22
27929: PUSH
27930: LD_VAR 0 16
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: PUSH
27939: LD_INT 2
27941: PUSH
27942: LD_INT 30
27944: PUSH
27945: LD_INT 32
27947: PUSH
27948: EMPTY
27949: LIST
27950: LIST
27951: PUSH
27952: LD_INT 30
27954: PUSH
27955: LD_INT 33
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: LIST
27966: PUSH
27967: LD_INT 91
27969: PUSH
27970: LD_VAR 0 1
27974: PUSH
27975: LD_INT 12
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: LIST
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: LIST
27987: PUSH
27988: EMPTY
27989: LIST
27990: PPUSH
27991: CALL_OW 69
27995: PUSH
27996: LD_INT 2
27998: GREATER
27999: AND
28000: IFFALSE 28023
// weapon := [ us_radar , ar_radar ] [ nat ] ;
28002: LD_ADDR_VAR 0 18
28006: PUSH
28007: LD_INT 11
28009: PUSH
28010: LD_INT 30
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PUSH
28017: LD_VAR 0 12
28021: ARRAY
28022: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
28023: LD_VAR 0 18
28027: NOT
28028: PUSH
28029: LD_INT 40
28031: PPUSH
28032: LD_VAR 0 16
28036: PPUSH
28037: CALL_OW 321
28041: PUSH
28042: LD_INT 2
28044: EQUAL
28045: AND
28046: PUSH
28047: LD_INT 7
28049: PUSH
28050: LD_VAR 0 5
28054: IN
28055: PUSH
28056: LD_INT 28
28058: PUSH
28059: LD_VAR 0 5
28063: IN
28064: OR
28065: PUSH
28066: LD_INT 45
28068: PUSH
28069: LD_VAR 0 5
28073: IN
28074: OR
28075: AND
28076: IFFALSE 28330
// begin hex := GetHexInfo ( x , y ) ;
28078: LD_ADDR_VAR 0 4
28082: PUSH
28083: LD_VAR 0 10
28087: PPUSH
28088: LD_VAR 0 11
28092: PPUSH
28093: CALL_OW 546
28097: ST_TO_ADDR
// if hex [ 1 ] then
28098: LD_VAR 0 4
28102: PUSH
28103: LD_INT 1
28105: ARRAY
28106: IFFALSE 28110
// exit ;
28108: GO 28513
// height := hex [ 2 ] ;
28110: LD_ADDR_VAR 0 15
28114: PUSH
28115: LD_VAR 0 4
28119: PUSH
28120: LD_INT 2
28122: ARRAY
28123: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
28124: LD_ADDR_VAR 0 14
28128: PUSH
28129: LD_INT 0
28131: PUSH
28132: LD_INT 2
28134: PUSH
28135: LD_INT 3
28137: PUSH
28138: LD_INT 5
28140: PUSH
28141: EMPTY
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: ST_TO_ADDR
// for i in tmp do
28147: LD_ADDR_VAR 0 8
28151: PUSH
28152: LD_VAR 0 14
28156: PUSH
28157: FOR_IN
28158: IFFALSE 28328
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
28160: LD_ADDR_VAR 0 9
28164: PUSH
28165: LD_VAR 0 10
28169: PPUSH
28170: LD_VAR 0 8
28174: PPUSH
28175: LD_INT 5
28177: PPUSH
28178: CALL_OW 272
28182: PUSH
28183: LD_VAR 0 11
28187: PPUSH
28188: LD_VAR 0 8
28192: PPUSH
28193: LD_INT 5
28195: PPUSH
28196: CALL_OW 273
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
28205: LD_VAR 0 9
28209: PUSH
28210: LD_INT 1
28212: ARRAY
28213: PPUSH
28214: LD_VAR 0 9
28218: PUSH
28219: LD_INT 2
28221: ARRAY
28222: PPUSH
28223: CALL_OW 488
28227: IFFALSE 28326
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
28229: LD_ADDR_VAR 0 4
28233: PUSH
28234: LD_VAR 0 9
28238: PUSH
28239: LD_INT 1
28241: ARRAY
28242: PPUSH
28243: LD_VAR 0 9
28247: PUSH
28248: LD_INT 2
28250: ARRAY
28251: PPUSH
28252: CALL_OW 546
28256: ST_TO_ADDR
// if hex [ 1 ] then
28257: LD_VAR 0 4
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: IFFALSE 28269
// continue ;
28267: GO 28157
// h := hex [ 2 ] ;
28269: LD_ADDR_VAR 0 13
28273: PUSH
28274: LD_VAR 0 4
28278: PUSH
28279: LD_INT 2
28281: ARRAY
28282: ST_TO_ADDR
// if h + 7 < height then
28283: LD_VAR 0 13
28287: PUSH
28288: LD_INT 7
28290: PLUS
28291: PUSH
28292: LD_VAR 0 15
28296: LESS
28297: IFFALSE 28326
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
28299: LD_ADDR_VAR 0 18
28303: PUSH
28304: LD_INT 7
28306: PUSH
28307: LD_INT 28
28309: PUSH
28310: LD_INT 45
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: LIST
28317: PUSH
28318: LD_VAR 0 12
28322: ARRAY
28323: ST_TO_ADDR
// break ;
28324: GO 28328
// end ; end ; end ;
28326: GO 28157
28328: POP
28329: POP
// end ; if not weapon then
28330: LD_VAR 0 18
28334: NOT
28335: IFFALSE 28395
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
28337: LD_ADDR_VAR 0 5
28341: PUSH
28342: LD_VAR 0 5
28346: PUSH
28347: LD_INT 11
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 49
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: DIFF
28361: ST_TO_ADDR
// if not list then
28362: LD_VAR 0 5
28366: NOT
28367: IFFALSE 28371
// exit ;
28369: GO 28513
// weapon := list [ rand ( 1 , list ) ] ;
28371: LD_ADDR_VAR 0 18
28375: PUSH
28376: LD_VAR 0 5
28380: PUSH
28381: LD_INT 1
28383: PPUSH
28384: LD_VAR 0 5
28388: PPUSH
28389: CALL_OW 12
28393: ARRAY
28394: ST_TO_ADDR
// end ; if weapon then
28395: LD_VAR 0 18
28399: IFFALSE 28513
// begin tmp := CostOfWeapon ( weapon ) ;
28401: LD_ADDR_VAR 0 14
28405: PUSH
28406: LD_VAR 0 18
28410: PPUSH
28411: CALL_OW 451
28415: ST_TO_ADDR
// j := GetBase ( tower ) ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_VAR 0 1
28425: PPUSH
28426: CALL_OW 274
28430: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28431: LD_VAR 0 9
28435: PPUSH
28436: LD_INT 1
28438: PPUSH
28439: CALL_OW 275
28443: PUSH
28444: LD_VAR 0 14
28448: PUSH
28449: LD_INT 1
28451: ARRAY
28452: GREATEREQUAL
28453: PUSH
28454: LD_VAR 0 9
28458: PPUSH
28459: LD_INT 2
28461: PPUSH
28462: CALL_OW 275
28466: PUSH
28467: LD_VAR 0 14
28471: PUSH
28472: LD_INT 2
28474: ARRAY
28475: GREATEREQUAL
28476: AND
28477: PUSH
28478: LD_VAR 0 9
28482: PPUSH
28483: LD_INT 3
28485: PPUSH
28486: CALL_OW 275
28490: PUSH
28491: LD_VAR 0 14
28495: PUSH
28496: LD_INT 3
28498: ARRAY
28499: GREATEREQUAL
28500: AND
28501: IFFALSE 28513
// result := weapon ;
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_VAR 0 18
28512: ST_TO_ADDR
// end ; end ;
28513: LD_VAR 0 3
28517: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28518: LD_INT 0
28520: PPUSH
28521: PPUSH
// result := true ;
28522: LD_ADDR_VAR 0 3
28526: PUSH
28527: LD_INT 1
28529: ST_TO_ADDR
// if array1 = array2 then
28530: LD_VAR 0 1
28534: PUSH
28535: LD_VAR 0 2
28539: EQUAL
28540: IFFALSE 28600
// begin for i = 1 to array1 do
28542: LD_ADDR_VAR 0 4
28546: PUSH
28547: DOUBLE
28548: LD_INT 1
28550: DEC
28551: ST_TO_ADDR
28552: LD_VAR 0 1
28556: PUSH
28557: FOR_TO
28558: IFFALSE 28596
// if array1 [ i ] <> array2 [ i ] then
28560: LD_VAR 0 1
28564: PUSH
28565: LD_VAR 0 4
28569: ARRAY
28570: PUSH
28571: LD_VAR 0 2
28575: PUSH
28576: LD_VAR 0 4
28580: ARRAY
28581: NONEQUAL
28582: IFFALSE 28594
// begin result := false ;
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 0
28591: ST_TO_ADDR
// break ;
28592: GO 28596
// end ;
28594: GO 28557
28596: POP
28597: POP
// end else
28598: GO 28608
// result := false ;
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 0
28607: ST_TO_ADDR
// end ;
28608: LD_VAR 0 3
28612: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
// if not array1 or not array2 then
28617: LD_VAR 0 1
28621: NOT
28622: PUSH
28623: LD_VAR 0 2
28627: NOT
28628: OR
28629: IFFALSE 28633
// exit ;
28631: GO 28697
// result := true ;
28633: LD_ADDR_VAR 0 3
28637: PUSH
28638: LD_INT 1
28640: ST_TO_ADDR
// for i = 1 to array1 do
28641: LD_ADDR_VAR 0 4
28645: PUSH
28646: DOUBLE
28647: LD_INT 1
28649: DEC
28650: ST_TO_ADDR
28651: LD_VAR 0 1
28655: PUSH
28656: FOR_TO
28657: IFFALSE 28695
// if array1 [ i ] <> array2 [ i ] then
28659: LD_VAR 0 1
28663: PUSH
28664: LD_VAR 0 4
28668: ARRAY
28669: PUSH
28670: LD_VAR 0 2
28674: PUSH
28675: LD_VAR 0 4
28679: ARRAY
28680: NONEQUAL
28681: IFFALSE 28693
// begin result := false ;
28683: LD_ADDR_VAR 0 3
28687: PUSH
28688: LD_INT 0
28690: ST_TO_ADDR
// break ;
28691: GO 28695
// end ;
28693: GO 28656
28695: POP
28696: POP
// end ;
28697: LD_VAR 0 3
28701: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28702: LD_INT 0
28704: PPUSH
28705: PPUSH
28706: PPUSH
// pom := GetBase ( fac ) ;
28707: LD_ADDR_VAR 0 5
28711: PUSH
28712: LD_VAR 0 1
28716: PPUSH
28717: CALL_OW 274
28721: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28722: LD_ADDR_VAR 0 4
28726: PUSH
28727: LD_VAR 0 2
28731: PUSH
28732: LD_INT 1
28734: ARRAY
28735: PPUSH
28736: LD_VAR 0 2
28740: PUSH
28741: LD_INT 2
28743: ARRAY
28744: PPUSH
28745: LD_VAR 0 2
28749: PUSH
28750: LD_INT 3
28752: ARRAY
28753: PPUSH
28754: LD_VAR 0 2
28758: PUSH
28759: LD_INT 4
28761: ARRAY
28762: PPUSH
28763: CALL_OW 449
28767: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28768: LD_ADDR_VAR 0 3
28772: PUSH
28773: LD_VAR 0 5
28777: PPUSH
28778: LD_INT 1
28780: PPUSH
28781: CALL_OW 275
28785: PUSH
28786: LD_VAR 0 4
28790: PUSH
28791: LD_INT 1
28793: ARRAY
28794: GREATEREQUAL
28795: PUSH
28796: LD_VAR 0 5
28800: PPUSH
28801: LD_INT 2
28803: PPUSH
28804: CALL_OW 275
28808: PUSH
28809: LD_VAR 0 4
28813: PUSH
28814: LD_INT 2
28816: ARRAY
28817: GREATEREQUAL
28818: AND
28819: PUSH
28820: LD_VAR 0 5
28824: PPUSH
28825: LD_INT 3
28827: PPUSH
28828: CALL_OW 275
28832: PUSH
28833: LD_VAR 0 4
28837: PUSH
28838: LD_INT 3
28840: ARRAY
28841: GREATEREQUAL
28842: AND
28843: ST_TO_ADDR
// end ;
28844: LD_VAR 0 3
28848: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28849: LD_INT 0
28851: PPUSH
28852: PPUSH
28853: PPUSH
28854: PPUSH
// pom := GetBase ( building ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_VAR 0 1
28864: PPUSH
28865: CALL_OW 274
28869: ST_TO_ADDR
// if not pom then
28870: LD_VAR 0 3
28874: NOT
28875: IFFALSE 28879
// exit ;
28877: GO 29049
// btype := GetBType ( building ) ;
28879: LD_ADDR_VAR 0 5
28883: PUSH
28884: LD_VAR 0 1
28888: PPUSH
28889: CALL_OW 266
28893: ST_TO_ADDR
// if btype = b_armoury then
28894: LD_VAR 0 5
28898: PUSH
28899: LD_INT 4
28901: EQUAL
28902: IFFALSE 28912
// btype := b_barracks ;
28904: LD_ADDR_VAR 0 5
28908: PUSH
28909: LD_INT 5
28911: ST_TO_ADDR
// if btype = b_depot then
28912: LD_VAR 0 5
28916: PUSH
28917: LD_INT 0
28919: EQUAL
28920: IFFALSE 28930
// btype := b_warehouse ;
28922: LD_ADDR_VAR 0 5
28926: PUSH
28927: LD_INT 1
28929: ST_TO_ADDR
// if btype = b_workshop then
28930: LD_VAR 0 5
28934: PUSH
28935: LD_INT 2
28937: EQUAL
28938: IFFALSE 28948
// btype := b_factory ;
28940: LD_ADDR_VAR 0 5
28944: PUSH
28945: LD_INT 3
28947: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28948: LD_ADDR_VAR 0 4
28952: PUSH
28953: LD_VAR 0 5
28957: PPUSH
28958: LD_VAR 0 1
28962: PPUSH
28963: CALL_OW 248
28967: PPUSH
28968: CALL_OW 450
28972: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28973: LD_ADDR_VAR 0 2
28977: PUSH
28978: LD_VAR 0 3
28982: PPUSH
28983: LD_INT 1
28985: PPUSH
28986: CALL_OW 275
28990: PUSH
28991: LD_VAR 0 4
28995: PUSH
28996: LD_INT 1
28998: ARRAY
28999: GREATEREQUAL
29000: PUSH
29001: LD_VAR 0 3
29005: PPUSH
29006: LD_INT 2
29008: PPUSH
29009: CALL_OW 275
29013: PUSH
29014: LD_VAR 0 4
29018: PUSH
29019: LD_INT 2
29021: ARRAY
29022: GREATEREQUAL
29023: AND
29024: PUSH
29025: LD_VAR 0 3
29029: PPUSH
29030: LD_INT 3
29032: PPUSH
29033: CALL_OW 275
29037: PUSH
29038: LD_VAR 0 4
29042: PUSH
29043: LD_INT 3
29045: ARRAY
29046: GREATEREQUAL
29047: AND
29048: ST_TO_ADDR
// end ;
29049: LD_VAR 0 2
29053: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
29054: LD_INT 0
29056: PPUSH
29057: PPUSH
29058: PPUSH
// pom := GetBase ( building ) ;
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: LD_VAR 0 1
29068: PPUSH
29069: CALL_OW 274
29073: ST_TO_ADDR
// if not pom then
29074: LD_VAR 0 4
29078: NOT
29079: IFFALSE 29083
// exit ;
29081: GO 29184
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
29083: LD_ADDR_VAR 0 5
29087: PUSH
29088: LD_VAR 0 2
29092: PPUSH
29093: LD_VAR 0 1
29097: PPUSH
29098: CALL_OW 248
29102: PPUSH
29103: CALL_OW 450
29107: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
29108: LD_ADDR_VAR 0 3
29112: PUSH
29113: LD_VAR 0 4
29117: PPUSH
29118: LD_INT 1
29120: PPUSH
29121: CALL_OW 275
29125: PUSH
29126: LD_VAR 0 5
29130: PUSH
29131: LD_INT 1
29133: ARRAY
29134: GREATEREQUAL
29135: PUSH
29136: LD_VAR 0 4
29140: PPUSH
29141: LD_INT 2
29143: PPUSH
29144: CALL_OW 275
29148: PUSH
29149: LD_VAR 0 5
29153: PUSH
29154: LD_INT 2
29156: ARRAY
29157: GREATEREQUAL
29158: AND
29159: PUSH
29160: LD_VAR 0 4
29164: PPUSH
29165: LD_INT 3
29167: PPUSH
29168: CALL_OW 275
29172: PUSH
29173: LD_VAR 0 5
29177: PUSH
29178: LD_INT 3
29180: ARRAY
29181: GREATEREQUAL
29182: AND
29183: ST_TO_ADDR
// end ;
29184: LD_VAR 0 3
29188: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
29189: LD_INT 0
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
29197: PPUSH
29198: PPUSH
29199: PPUSH
29200: PPUSH
29201: PPUSH
// result := false ;
29202: LD_ADDR_VAR 0 8
29206: PUSH
29207: LD_INT 0
29209: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
29210: LD_VAR 0 5
29214: NOT
29215: PUSH
29216: LD_VAR 0 1
29220: NOT
29221: OR
29222: PUSH
29223: LD_VAR 0 2
29227: NOT
29228: OR
29229: PUSH
29230: LD_VAR 0 3
29234: NOT
29235: OR
29236: IFFALSE 29240
// exit ;
29238: GO 30054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
29240: LD_ADDR_VAR 0 14
29244: PUSH
29245: LD_VAR 0 1
29249: PPUSH
29250: LD_VAR 0 2
29254: PPUSH
29255: LD_VAR 0 3
29259: PPUSH
29260: LD_VAR 0 4
29264: PPUSH
29265: LD_VAR 0 5
29269: PUSH
29270: LD_INT 1
29272: ARRAY
29273: PPUSH
29274: CALL_OW 248
29278: PPUSH
29279: LD_INT 0
29281: PPUSH
29282: CALL 31307 0 6
29286: ST_TO_ADDR
// if not hexes then
29287: LD_VAR 0 14
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 30054
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
29296: LD_ADDR_VAR 0 17
29300: PUSH
29301: LD_VAR 0 5
29305: PPUSH
29306: LD_INT 22
29308: PUSH
29309: LD_VAR 0 13
29313: PPUSH
29314: CALL_OW 255
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 2
29325: PUSH
29326: LD_INT 30
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 30
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: LIST
29350: PUSH
29351: EMPTY
29352: LIST
29353: LIST
29354: PPUSH
29355: CALL_OW 72
29359: ST_TO_ADDR
// for i = 1 to hexes do
29360: LD_ADDR_VAR 0 9
29364: PUSH
29365: DOUBLE
29366: LD_INT 1
29368: DEC
29369: ST_TO_ADDR
29370: LD_VAR 0 14
29374: PUSH
29375: FOR_TO
29376: IFFALSE 30052
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29378: LD_ADDR_VAR 0 13
29382: PUSH
29383: LD_VAR 0 14
29387: PUSH
29388: LD_VAR 0 9
29392: ARRAY
29393: PUSH
29394: LD_INT 1
29396: ARRAY
29397: PPUSH
29398: LD_VAR 0 14
29402: PUSH
29403: LD_VAR 0 9
29407: ARRAY
29408: PUSH
29409: LD_INT 2
29411: ARRAY
29412: PPUSH
29413: CALL_OW 428
29417: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
29418: LD_VAR 0 14
29422: PUSH
29423: LD_VAR 0 9
29427: ARRAY
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 14
29437: PUSH
29438: LD_VAR 0 9
29442: ARRAY
29443: PUSH
29444: LD_INT 2
29446: ARRAY
29447: PPUSH
29448: CALL_OW 351
29452: PUSH
29453: LD_VAR 0 14
29457: PUSH
29458: LD_VAR 0 9
29462: ARRAY
29463: PUSH
29464: LD_INT 1
29466: ARRAY
29467: PPUSH
29468: LD_VAR 0 14
29472: PUSH
29473: LD_VAR 0 9
29477: ARRAY
29478: PUSH
29479: LD_INT 2
29481: ARRAY
29482: PPUSH
29483: CALL_OW 488
29487: NOT
29488: OR
29489: PUSH
29490: LD_VAR 0 13
29494: PPUSH
29495: CALL_OW 247
29499: PUSH
29500: LD_INT 3
29502: EQUAL
29503: OR
29504: IFFALSE 29510
// exit ;
29506: POP
29507: POP
29508: GO 30054
// if not tmp then
29510: LD_VAR 0 13
29514: NOT
29515: IFFALSE 29519
// continue ;
29517: GO 29375
// result := true ;
29519: LD_ADDR_VAR 0 8
29523: PUSH
29524: LD_INT 1
29526: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29527: LD_VAR 0 6
29531: PUSH
29532: LD_VAR 0 13
29536: PPUSH
29537: CALL_OW 247
29541: PUSH
29542: LD_INT 2
29544: EQUAL
29545: AND
29546: PUSH
29547: LD_VAR 0 13
29551: PPUSH
29552: CALL_OW 263
29556: PUSH
29557: LD_INT 1
29559: EQUAL
29560: AND
29561: IFFALSE 29725
// begin if IsDrivenBy ( tmp ) then
29563: LD_VAR 0 13
29567: PPUSH
29568: CALL_OW 311
29572: IFFALSE 29576
// continue ;
29574: GO 29375
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29576: LD_VAR 0 6
29580: PPUSH
29581: LD_INT 3
29583: PUSH
29584: LD_INT 60
29586: PUSH
29587: EMPTY
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: LD_INT 3
29596: PUSH
29597: LD_INT 55
29599: PUSH
29600: EMPTY
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PPUSH
29611: CALL_OW 72
29615: IFFALSE 29723
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29617: LD_ADDR_VAR 0 18
29621: PUSH
29622: LD_VAR 0 6
29626: PPUSH
29627: LD_INT 3
29629: PUSH
29630: LD_INT 60
29632: PUSH
29633: EMPTY
29634: LIST
29635: PUSH
29636: EMPTY
29637: LIST
29638: LIST
29639: PUSH
29640: LD_INT 3
29642: PUSH
29643: LD_INT 55
29645: PUSH
29646: EMPTY
29647: LIST
29648: PUSH
29649: EMPTY
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PPUSH
29657: CALL_OW 72
29661: PUSH
29662: LD_INT 1
29664: ARRAY
29665: ST_TO_ADDR
// if IsInUnit ( driver ) then
29666: LD_VAR 0 18
29670: PPUSH
29671: CALL_OW 310
29675: IFFALSE 29686
// ComExit ( driver ) ;
29677: LD_VAR 0 18
29681: PPUSH
29682: CALL 55088 0 1
// AddComEnterUnit ( driver , tmp ) ;
29686: LD_VAR 0 18
29690: PPUSH
29691: LD_VAR 0 13
29695: PPUSH
29696: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29700: LD_VAR 0 18
29704: PPUSH
29705: LD_VAR 0 7
29709: PPUSH
29710: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29714: LD_VAR 0 18
29718: PPUSH
29719: CALL_OW 181
// end ; continue ;
29723: GO 29375
// end ; if not cleaners or not tmp in cleaners then
29725: LD_VAR 0 6
29729: NOT
29730: PUSH
29731: LD_VAR 0 13
29735: PUSH
29736: LD_VAR 0 6
29740: IN
29741: NOT
29742: OR
29743: IFFALSE 30050
// begin if dep then
29745: LD_VAR 0 17
29749: IFFALSE 29885
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29751: LD_ADDR_VAR 0 16
29755: PUSH
29756: LD_VAR 0 17
29760: PUSH
29761: LD_INT 1
29763: ARRAY
29764: PPUSH
29765: CALL_OW 250
29769: PPUSH
29770: LD_VAR 0 17
29774: PUSH
29775: LD_INT 1
29777: ARRAY
29778: PPUSH
29779: CALL_OW 254
29783: PPUSH
29784: LD_INT 5
29786: PPUSH
29787: CALL_OW 272
29791: PUSH
29792: LD_VAR 0 17
29796: PUSH
29797: LD_INT 1
29799: ARRAY
29800: PPUSH
29801: CALL_OW 251
29805: PPUSH
29806: LD_VAR 0 17
29810: PUSH
29811: LD_INT 1
29813: ARRAY
29814: PPUSH
29815: CALL_OW 254
29819: PPUSH
29820: LD_INT 5
29822: PPUSH
29823: CALL_OW 273
29827: PUSH
29828: EMPTY
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29832: LD_VAR 0 16
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: LD_VAR 0 16
29845: PUSH
29846: LD_INT 2
29848: ARRAY
29849: PPUSH
29850: CALL_OW 488
29854: IFFALSE 29885
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29856: LD_VAR 0 13
29860: PPUSH
29861: LD_VAR 0 16
29865: PUSH
29866: LD_INT 1
29868: ARRAY
29869: PPUSH
29870: LD_VAR 0 16
29874: PUSH
29875: LD_INT 2
29877: ARRAY
29878: PPUSH
29879: CALL_OW 111
// continue ;
29883: GO 29375
// end ; end ; r := GetDir ( tmp ) ;
29885: LD_ADDR_VAR 0 15
29889: PUSH
29890: LD_VAR 0 13
29894: PPUSH
29895: CALL_OW 254
29899: ST_TO_ADDR
// if r = 5 then
29900: LD_VAR 0 15
29904: PUSH
29905: LD_INT 5
29907: EQUAL
29908: IFFALSE 29918
// r := 0 ;
29910: LD_ADDR_VAR 0 15
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// for j = r to 5 do
29918: LD_ADDR_VAR 0 10
29922: PUSH
29923: DOUBLE
29924: LD_VAR 0 15
29928: DEC
29929: ST_TO_ADDR
29930: LD_INT 5
29932: PUSH
29933: FOR_TO
29934: IFFALSE 30048
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29936: LD_ADDR_VAR 0 11
29940: PUSH
29941: LD_VAR 0 13
29945: PPUSH
29946: CALL_OW 250
29950: PPUSH
29951: LD_VAR 0 10
29955: PPUSH
29956: LD_INT 2
29958: PPUSH
29959: CALL_OW 272
29963: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29964: LD_ADDR_VAR 0 12
29968: PUSH
29969: LD_VAR 0 13
29973: PPUSH
29974: CALL_OW 251
29978: PPUSH
29979: LD_VAR 0 10
29983: PPUSH
29984: LD_INT 2
29986: PPUSH
29987: CALL_OW 273
29991: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29992: LD_VAR 0 11
29996: PPUSH
29997: LD_VAR 0 12
30001: PPUSH
30002: CALL_OW 488
30006: PUSH
30007: LD_VAR 0 11
30011: PPUSH
30012: LD_VAR 0 12
30016: PPUSH
30017: CALL_OW 428
30021: NOT
30022: AND
30023: IFFALSE 30046
// begin ComMoveXY ( tmp , _x , _y ) ;
30025: LD_VAR 0 13
30029: PPUSH
30030: LD_VAR 0 11
30034: PPUSH
30035: LD_VAR 0 12
30039: PPUSH
30040: CALL_OW 111
// break ;
30044: GO 30048
// end ; end ;
30046: GO 29933
30048: POP
30049: POP
// end ; end ;
30050: GO 29375
30052: POP
30053: POP
// end ;
30054: LD_VAR 0 8
30058: RET
// export function BuildingTechInvented ( side , btype ) ; begin
30059: LD_INT 0
30061: PPUSH
// result := true ;
30062: LD_ADDR_VAR 0 3
30066: PUSH
30067: LD_INT 1
30069: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
30070: LD_VAR 0 2
30074: PUSH
30075: LD_INT 24
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30089
30081: LD_INT 33
30083: DOUBLE
30084: EQUAL
30085: IFTRUE 30089
30087: GO 30114
30089: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
30090: LD_ADDR_VAR 0 3
30094: PUSH
30095: LD_INT 32
30097: PPUSH
30098: LD_VAR 0 1
30102: PPUSH
30103: CALL_OW 321
30107: PUSH
30108: LD_INT 2
30110: EQUAL
30111: ST_TO_ADDR
30112: GO 30430
30114: LD_INT 20
30116: DOUBLE
30117: EQUAL
30118: IFTRUE 30122
30120: GO 30147
30122: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
30123: LD_ADDR_VAR 0 3
30127: PUSH
30128: LD_INT 6
30130: PPUSH
30131: LD_VAR 0 1
30135: PPUSH
30136: CALL_OW 321
30140: PUSH
30141: LD_INT 2
30143: EQUAL
30144: ST_TO_ADDR
30145: GO 30430
30147: LD_INT 22
30149: DOUBLE
30150: EQUAL
30151: IFTRUE 30161
30153: LD_INT 36
30155: DOUBLE
30156: EQUAL
30157: IFTRUE 30161
30159: GO 30186
30161: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
30162: LD_ADDR_VAR 0 3
30166: PUSH
30167: LD_INT 15
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 321
30179: PUSH
30180: LD_INT 2
30182: EQUAL
30183: ST_TO_ADDR
30184: GO 30430
30186: LD_INT 30
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30219
30194: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 20
30202: PPUSH
30203: LD_VAR 0 1
30207: PPUSH
30208: CALL_OW 321
30212: PUSH
30213: LD_INT 2
30215: EQUAL
30216: ST_TO_ADDR
30217: GO 30430
30219: LD_INT 28
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30233
30225: LD_INT 21
30227: DOUBLE
30228: EQUAL
30229: IFTRUE 30233
30231: GO 30258
30233: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
30234: LD_ADDR_VAR 0 3
30238: PUSH
30239: LD_INT 21
30241: PPUSH
30242: LD_VAR 0 1
30246: PPUSH
30247: CALL_OW 321
30251: PUSH
30252: LD_INT 2
30254: EQUAL
30255: ST_TO_ADDR
30256: GO 30430
30258: LD_INT 16
30260: DOUBLE
30261: EQUAL
30262: IFTRUE 30266
30264: GO 30291
30266: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 84
30274: PPUSH
30275: LD_VAR 0 1
30279: PPUSH
30280: CALL_OW 321
30284: PUSH
30285: LD_INT 2
30287: EQUAL
30288: ST_TO_ADDR
30289: GO 30430
30291: LD_INT 19
30293: DOUBLE
30294: EQUAL
30295: IFTRUE 30305
30297: LD_INT 23
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30330
30305: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
30306: LD_ADDR_VAR 0 3
30310: PUSH
30311: LD_INT 83
30313: PPUSH
30314: LD_VAR 0 1
30318: PPUSH
30319: CALL_OW 321
30323: PUSH
30324: LD_INT 2
30326: EQUAL
30327: ST_TO_ADDR
30328: GO 30430
30330: LD_INT 17
30332: DOUBLE
30333: EQUAL
30334: IFTRUE 30338
30336: GO 30363
30338: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
30339: LD_ADDR_VAR 0 3
30343: PUSH
30344: LD_INT 39
30346: PPUSH
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 321
30356: PUSH
30357: LD_INT 2
30359: EQUAL
30360: ST_TO_ADDR
30361: GO 30430
30363: LD_INT 18
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30396
30371: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
30372: LD_ADDR_VAR 0 3
30376: PUSH
30377: LD_INT 40
30379: PPUSH
30380: LD_VAR 0 1
30384: PPUSH
30385: CALL_OW 321
30389: PUSH
30390: LD_INT 2
30392: EQUAL
30393: ST_TO_ADDR
30394: GO 30430
30396: LD_INT 27
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30429
30404: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 35
30412: PPUSH
30413: LD_VAR 0 1
30417: PPUSH
30418: CALL_OW 321
30422: PUSH
30423: LD_INT 2
30425: EQUAL
30426: ST_TO_ADDR
30427: GO 30430
30429: POP
// end ;
30430: LD_VAR 0 3
30434: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30435: LD_INT 0
30437: PPUSH
30438: PPUSH
30439: PPUSH
30440: PPUSH
30441: PPUSH
30442: PPUSH
30443: PPUSH
30444: PPUSH
30445: PPUSH
30446: PPUSH
30447: PPUSH
// result := false ;
30448: LD_ADDR_VAR 0 6
30452: PUSH
30453: LD_INT 0
30455: ST_TO_ADDR
// if btype = b_depot then
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 0
30463: EQUAL
30464: IFFALSE 30476
// begin result := true ;
30466: LD_ADDR_VAR 0 6
30470: PUSH
30471: LD_INT 1
30473: ST_TO_ADDR
// exit ;
30474: GO 31302
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30476: LD_VAR 0 1
30480: NOT
30481: PUSH
30482: LD_VAR 0 1
30486: PPUSH
30487: CALL_OW 266
30491: PUSH
30492: LD_INT 0
30494: PUSH
30495: LD_INT 1
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: IN
30502: NOT
30503: OR
30504: PUSH
30505: LD_VAR 0 2
30509: NOT
30510: OR
30511: PUSH
30512: LD_VAR 0 5
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: LD_INT 1
30522: PUSH
30523: LD_INT 2
30525: PUSH
30526: LD_INT 3
30528: PUSH
30529: LD_INT 4
30531: PUSH
30532: LD_INT 5
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: LIST
30539: LIST
30540: LIST
30541: LIST
30542: IN
30543: NOT
30544: OR
30545: PUSH
30546: LD_VAR 0 3
30550: PPUSH
30551: LD_VAR 0 4
30555: PPUSH
30556: CALL_OW 488
30560: NOT
30561: OR
30562: IFFALSE 30566
// exit ;
30564: GO 31302
// side := GetSide ( depot ) ;
30566: LD_ADDR_VAR 0 9
30570: PUSH
30571: LD_VAR 0 1
30575: PPUSH
30576: CALL_OW 255
30580: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30581: LD_VAR 0 9
30585: PPUSH
30586: LD_VAR 0 2
30590: PPUSH
30591: CALL 30059 0 2
30595: NOT
30596: IFFALSE 30600
// exit ;
30598: GO 31302
// pom := GetBase ( depot ) ;
30600: LD_ADDR_VAR 0 10
30604: PUSH
30605: LD_VAR 0 1
30609: PPUSH
30610: CALL_OW 274
30614: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30615: LD_ADDR_VAR 0 11
30619: PUSH
30620: LD_VAR 0 2
30624: PPUSH
30625: LD_VAR 0 1
30629: PPUSH
30630: CALL_OW 248
30634: PPUSH
30635: CALL_OW 450
30639: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30640: LD_VAR 0 10
30644: PPUSH
30645: LD_INT 1
30647: PPUSH
30648: CALL_OW 275
30652: PUSH
30653: LD_VAR 0 11
30657: PUSH
30658: LD_INT 1
30660: ARRAY
30661: GREATEREQUAL
30662: PUSH
30663: LD_VAR 0 10
30667: PPUSH
30668: LD_INT 2
30670: PPUSH
30671: CALL_OW 275
30675: PUSH
30676: LD_VAR 0 11
30680: PUSH
30681: LD_INT 2
30683: ARRAY
30684: GREATEREQUAL
30685: AND
30686: PUSH
30687: LD_VAR 0 10
30691: PPUSH
30692: LD_INT 3
30694: PPUSH
30695: CALL_OW 275
30699: PUSH
30700: LD_VAR 0 11
30704: PUSH
30705: LD_INT 3
30707: ARRAY
30708: GREATEREQUAL
30709: AND
30710: NOT
30711: IFFALSE 30715
// exit ;
30713: GO 31302
// if GetBType ( depot ) = b_depot then
30715: LD_VAR 0 1
30719: PPUSH
30720: CALL_OW 266
30724: PUSH
30725: LD_INT 0
30727: EQUAL
30728: IFFALSE 30740
// dist := 28 else
30730: LD_ADDR_VAR 0 14
30734: PUSH
30735: LD_INT 28
30737: ST_TO_ADDR
30738: GO 30748
// dist := 36 ;
30740: LD_ADDR_VAR 0 14
30744: PUSH
30745: LD_INT 36
30747: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30748: LD_VAR 0 1
30752: PPUSH
30753: LD_VAR 0 3
30757: PPUSH
30758: LD_VAR 0 4
30762: PPUSH
30763: CALL_OW 297
30767: PUSH
30768: LD_VAR 0 14
30772: GREATER
30773: IFFALSE 30777
// exit ;
30775: GO 31302
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30777: LD_ADDR_VAR 0 12
30781: PUSH
30782: LD_VAR 0 2
30786: PPUSH
30787: LD_VAR 0 3
30791: PPUSH
30792: LD_VAR 0 4
30796: PPUSH
30797: LD_VAR 0 5
30801: PPUSH
30802: LD_VAR 0 1
30806: PPUSH
30807: CALL_OW 248
30811: PPUSH
30812: LD_INT 0
30814: PPUSH
30815: CALL 31307 0 6
30819: ST_TO_ADDR
// if not hexes then
30820: LD_VAR 0 12
30824: NOT
30825: IFFALSE 30829
// exit ;
30827: GO 31302
// hex := GetHexInfo ( x , y ) ;
30829: LD_ADDR_VAR 0 15
30833: PUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: LD_VAR 0 4
30843: PPUSH
30844: CALL_OW 546
30848: ST_TO_ADDR
// if hex [ 1 ] then
30849: LD_VAR 0 15
30853: PUSH
30854: LD_INT 1
30856: ARRAY
30857: IFFALSE 30861
// exit ;
30859: GO 31302
// height := hex [ 2 ] ;
30861: LD_ADDR_VAR 0 13
30865: PUSH
30866: LD_VAR 0 15
30870: PUSH
30871: LD_INT 2
30873: ARRAY
30874: ST_TO_ADDR
// for i = 1 to hexes do
30875: LD_ADDR_VAR 0 7
30879: PUSH
30880: DOUBLE
30881: LD_INT 1
30883: DEC
30884: ST_TO_ADDR
30885: LD_VAR 0 12
30889: PUSH
30890: FOR_TO
30891: IFFALSE 31221
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30893: LD_VAR 0 12
30897: PUSH
30898: LD_VAR 0 7
30902: ARRAY
30903: PUSH
30904: LD_INT 1
30906: ARRAY
30907: PPUSH
30908: LD_VAR 0 12
30912: PUSH
30913: LD_VAR 0 7
30917: ARRAY
30918: PUSH
30919: LD_INT 2
30921: ARRAY
30922: PPUSH
30923: CALL_OW 488
30927: NOT
30928: PUSH
30929: LD_VAR 0 12
30933: PUSH
30934: LD_VAR 0 7
30938: ARRAY
30939: PUSH
30940: LD_INT 1
30942: ARRAY
30943: PPUSH
30944: LD_VAR 0 12
30948: PUSH
30949: LD_VAR 0 7
30953: ARRAY
30954: PUSH
30955: LD_INT 2
30957: ARRAY
30958: PPUSH
30959: CALL_OW 428
30963: PUSH
30964: LD_INT 0
30966: GREATER
30967: OR
30968: PUSH
30969: LD_VAR 0 12
30973: PUSH
30974: LD_VAR 0 7
30978: ARRAY
30979: PUSH
30980: LD_INT 1
30982: ARRAY
30983: PPUSH
30984: LD_VAR 0 12
30988: PUSH
30989: LD_VAR 0 7
30993: ARRAY
30994: PUSH
30995: LD_INT 2
30997: ARRAY
30998: PPUSH
30999: CALL_OW 351
31003: OR
31004: IFFALSE 31010
// exit ;
31006: POP
31007: POP
31008: GO 31302
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31010: LD_ADDR_VAR 0 8
31014: PUSH
31015: LD_VAR 0 12
31019: PUSH
31020: LD_VAR 0 7
31024: ARRAY
31025: PUSH
31026: LD_INT 1
31028: ARRAY
31029: PPUSH
31030: LD_VAR 0 12
31034: PUSH
31035: LD_VAR 0 7
31039: ARRAY
31040: PUSH
31041: LD_INT 2
31043: ARRAY
31044: PPUSH
31045: CALL_OW 546
31049: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
31050: LD_VAR 0 8
31054: PUSH
31055: LD_INT 1
31057: ARRAY
31058: PUSH
31059: LD_VAR 0 8
31063: PUSH
31064: LD_INT 2
31066: ARRAY
31067: PUSH
31068: LD_VAR 0 13
31072: PUSH
31073: LD_INT 2
31075: PLUS
31076: GREATER
31077: OR
31078: PUSH
31079: LD_VAR 0 8
31083: PUSH
31084: LD_INT 2
31086: ARRAY
31087: PUSH
31088: LD_VAR 0 13
31092: PUSH
31093: LD_INT 2
31095: MINUS
31096: LESS
31097: OR
31098: PUSH
31099: LD_VAR 0 8
31103: PUSH
31104: LD_INT 3
31106: ARRAY
31107: PUSH
31108: LD_INT 0
31110: PUSH
31111: LD_INT 8
31113: PUSH
31114: LD_INT 9
31116: PUSH
31117: LD_INT 10
31119: PUSH
31120: LD_INT 11
31122: PUSH
31123: LD_INT 12
31125: PUSH
31126: LD_INT 13
31128: PUSH
31129: LD_INT 16
31131: PUSH
31132: LD_INT 17
31134: PUSH
31135: LD_INT 18
31137: PUSH
31138: LD_INT 19
31140: PUSH
31141: LD_INT 20
31143: PUSH
31144: LD_INT 21
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: IN
31162: NOT
31163: OR
31164: PUSH
31165: LD_VAR 0 8
31169: PUSH
31170: LD_INT 5
31172: ARRAY
31173: NOT
31174: OR
31175: PUSH
31176: LD_VAR 0 8
31180: PUSH
31181: LD_INT 6
31183: ARRAY
31184: PUSH
31185: LD_INT 1
31187: PUSH
31188: LD_INT 2
31190: PUSH
31191: LD_INT 7
31193: PUSH
31194: LD_INT 9
31196: PUSH
31197: LD_INT 10
31199: PUSH
31200: LD_INT 11
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: LIST
31207: LIST
31208: LIST
31209: LIST
31210: IN
31211: NOT
31212: OR
31213: IFFALSE 31219
// exit ;
31215: POP
31216: POP
31217: GO 31302
// end ;
31219: GO 30890
31221: POP
31222: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
31223: LD_VAR 0 9
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: LD_VAR 0 4
31237: PPUSH
31238: LD_INT 20
31240: PPUSH
31241: CALL 23225 0 4
31245: PUSH
31246: LD_INT 4
31248: ARRAY
31249: IFFALSE 31253
// exit ;
31251: GO 31302
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
31253: LD_VAR 0 2
31257: PUSH
31258: LD_INT 29
31260: PUSH
31261: LD_INT 30
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: IN
31268: PUSH
31269: LD_VAR 0 3
31273: PPUSH
31274: LD_VAR 0 4
31278: PPUSH
31279: LD_VAR 0 9
31283: PPUSH
31284: CALL_OW 440
31288: NOT
31289: AND
31290: IFFALSE 31294
// exit ;
31292: GO 31302
// result := true ;
31294: LD_ADDR_VAR 0 6
31298: PUSH
31299: LD_INT 1
31301: ST_TO_ADDR
// end ;
31302: LD_VAR 0 6
31306: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
31307: LD_INT 0
31309: PPUSH
31310: PPUSH
31311: PPUSH
31312: PPUSH
31313: PPUSH
31314: PPUSH
31315: PPUSH
31316: PPUSH
31317: PPUSH
31318: PPUSH
31319: PPUSH
31320: PPUSH
31321: PPUSH
31322: PPUSH
31323: PPUSH
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
31329: PPUSH
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
31346: PPUSH
31347: PPUSH
31348: PPUSH
31349: PPUSH
31350: PPUSH
31351: PPUSH
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
// result = [ ] ;
31367: LD_ADDR_VAR 0 7
31371: PUSH
31372: EMPTY
31373: ST_TO_ADDR
// temp_list = [ ] ;
31374: LD_ADDR_VAR 0 9
31378: PUSH
31379: EMPTY
31380: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
31381: LD_VAR 0 4
31385: PUSH
31386: LD_INT 0
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: LD_INT 2
31394: PUSH
31395: LD_INT 3
31397: PUSH
31398: LD_INT 4
31400: PUSH
31401: LD_INT 5
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: IN
31412: NOT
31413: PUSH
31414: LD_VAR 0 1
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 1
31424: PUSH
31425: EMPTY
31426: LIST
31427: LIST
31428: IN
31429: PUSH
31430: LD_VAR 0 5
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 2
31440: PUSH
31441: LD_INT 3
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: LIST
31448: IN
31449: NOT
31450: AND
31451: OR
31452: IFFALSE 31456
// exit ;
31454: GO 49847
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31456: LD_VAR 0 1
31460: PUSH
31461: LD_INT 6
31463: PUSH
31464: LD_INT 7
31466: PUSH
31467: LD_INT 8
31469: PUSH
31470: LD_INT 13
31472: PUSH
31473: LD_INT 12
31475: PUSH
31476: LD_INT 15
31478: PUSH
31479: LD_INT 11
31481: PUSH
31482: LD_INT 14
31484: PUSH
31485: LD_INT 10
31487: PUSH
31488: EMPTY
31489: LIST
31490: LIST
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: LIST
31497: LIST
31498: IN
31499: IFFALSE 31509
// btype = b_lab ;
31501: LD_ADDR_VAR 0 1
31505: PUSH
31506: LD_INT 6
31508: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31509: LD_VAR 0 6
31513: PUSH
31514: LD_INT 0
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: LD_INT 2
31522: PUSH
31523: EMPTY
31524: LIST
31525: LIST
31526: LIST
31527: IN
31528: NOT
31529: PUSH
31530: LD_VAR 0 1
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 2
31543: PUSH
31544: LD_INT 3
31546: PUSH
31547: LD_INT 6
31549: PUSH
31550: LD_INT 36
31552: PUSH
31553: LD_INT 4
31555: PUSH
31556: LD_INT 5
31558: PUSH
31559: LD_INT 31
31561: PUSH
31562: LD_INT 32
31564: PUSH
31565: LD_INT 33
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: LIST
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: IN
31581: NOT
31582: PUSH
31583: LD_VAR 0 6
31587: PUSH
31588: LD_INT 1
31590: EQUAL
31591: AND
31592: OR
31593: PUSH
31594: LD_VAR 0 1
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: LD_INT 3
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: IN
31609: NOT
31610: PUSH
31611: LD_VAR 0 6
31615: PUSH
31616: LD_INT 2
31618: EQUAL
31619: AND
31620: OR
31621: IFFALSE 31631
// mode = 0 ;
31623: LD_ADDR_VAR 0 6
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// case mode of 0 :
31631: LD_VAR 0 6
31635: PUSH
31636: LD_INT 0
31638: DOUBLE
31639: EQUAL
31640: IFTRUE 31644
31642: GO 43097
31644: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31645: LD_ADDR_VAR 0 11
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: LD_INT 0
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 0
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 1
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: LD_INT 1
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: LD_INT 0
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 1
31714: NEG
31715: PUSH
31716: LD_INT 1
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 1
31726: NEG
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: LD_INT 2
31741: NEG
31742: PUSH
31743: EMPTY
31744: LIST
31745: LIST
31746: PUSH
31747: LD_INT 1
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: PUSH
31761: LD_INT 2
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: PUSH
31768: LD_INT 0
31770: PUSH
31771: LD_INT 2
31773: PUSH
31774: EMPTY
31775: LIST
31776: LIST
31777: PUSH
31778: LD_INT 1
31780: NEG
31781: PUSH
31782: LD_INT 1
31784: PUSH
31785: EMPTY
31786: LIST
31787: LIST
31788: PUSH
31789: LD_INT 1
31791: PUSH
31792: LD_INT 3
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 3
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 1
31811: NEG
31812: PUSH
31813: LD_INT 2
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: LIST
31826: LIST
31827: LIST
31828: LIST
31829: LIST
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31838: LD_ADDR_VAR 0 12
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: LD_INT 0
31848: PUSH
31849: EMPTY
31850: LIST
31851: LIST
31852: PUSH
31853: LD_INT 0
31855: PUSH
31856: LD_INT 1
31858: NEG
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: PUSH
31864: LD_INT 1
31866: PUSH
31867: LD_INT 0
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: PUSH
31880: EMPTY
31881: LIST
31882: LIST
31883: PUSH
31884: LD_INT 0
31886: PUSH
31887: LD_INT 1
31889: PUSH
31890: EMPTY
31891: LIST
31892: LIST
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: PUSH
31898: LD_INT 0
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: NEG
31908: PUSH
31909: LD_INT 1
31911: NEG
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 1
31919: PUSH
31920: LD_INT 1
31922: NEG
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: PUSH
31928: LD_INT 2
31930: PUSH
31931: LD_INT 0
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 2
31940: PUSH
31941: LD_INT 1
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: PUSH
31948: LD_INT 1
31950: NEG
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 2
31961: NEG
31962: PUSH
31963: LD_INT 0
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: PUSH
31970: LD_INT 2
31972: NEG
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: EMPTY
31979: LIST
31980: LIST
31981: PUSH
31982: LD_INT 2
31984: NEG
31985: PUSH
31986: LD_INT 1
31988: PUSH
31989: EMPTY
31990: LIST
31991: LIST
31992: PUSH
31993: LD_INT 3
31995: NEG
31996: PUSH
31997: LD_INT 0
31999: PUSH
32000: EMPTY
32001: LIST
32002: LIST
32003: PUSH
32004: LD_INT 3
32006: NEG
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32034: LD_ADDR_VAR 0 13
32038: PUSH
32039: LD_INT 0
32041: PUSH
32042: LD_INT 0
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 0
32051: PUSH
32052: LD_INT 1
32054: NEG
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 1
32062: PUSH
32063: LD_INT 0
32065: PUSH
32066: EMPTY
32067: LIST
32068: LIST
32069: PUSH
32070: LD_INT 1
32072: PUSH
32073: LD_INT 1
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 1
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 1
32092: NEG
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: LD_INT 1
32107: NEG
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: PUSH
32113: LD_INT 1
32115: NEG
32116: PUSH
32117: LD_INT 2
32119: NEG
32120: PUSH
32121: EMPTY
32122: LIST
32123: LIST
32124: PUSH
32125: LD_INT 2
32127: PUSH
32128: LD_INT 1
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 2
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 1
32147: PUSH
32148: LD_INT 2
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 2
32157: NEG
32158: PUSH
32159: LD_INT 1
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 2
32169: NEG
32170: PUSH
32171: LD_INT 2
32173: NEG
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 2
32181: NEG
32182: PUSH
32183: LD_INT 3
32185: NEG
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: LD_INT 2
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 3
32205: NEG
32206: PUSH
32207: LD_INT 3
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
32233: LD_ADDR_VAR 0 14
32237: PUSH
32238: LD_INT 0
32240: PUSH
32241: LD_INT 0
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PUSH
32248: LD_INT 0
32250: PUSH
32251: LD_INT 1
32253: NEG
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 1
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: EMPTY
32266: LIST
32267: LIST
32268: PUSH
32269: LD_INT 1
32271: PUSH
32272: LD_INT 1
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 1
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: LD_INT 0
32295: PUSH
32296: EMPTY
32297: LIST
32298: LIST
32299: PUSH
32300: LD_INT 1
32302: NEG
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 1
32314: NEG
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 0
32326: PUSH
32327: LD_INT 2
32329: NEG
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: LD_INT 1
32340: NEG
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 1
32348: PUSH
32349: LD_INT 2
32351: PUSH
32352: EMPTY
32353: LIST
32354: LIST
32355: PUSH
32356: LD_INT 0
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: EMPTY
32363: LIST
32364: LIST
32365: PUSH
32366: LD_INT 1
32368: NEG
32369: PUSH
32370: LD_INT 1
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 1
32379: NEG
32380: PUSH
32381: LD_INT 3
32383: NEG
32384: PUSH
32385: EMPTY
32386: LIST
32387: LIST
32388: PUSH
32389: LD_INT 0
32391: PUSH
32392: LD_INT 3
32394: NEG
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: LD_INT 2
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
32429: LD_ADDR_VAR 0 15
32433: PUSH
32434: LD_INT 0
32436: PUSH
32437: LD_INT 0
32439: PUSH
32440: EMPTY
32441: LIST
32442: LIST
32443: PUSH
32444: LD_INT 0
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: PUSH
32458: LD_INT 0
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: PUSH
32465: LD_INT 1
32467: PUSH
32468: LD_INT 1
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PUSH
32475: LD_INT 0
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: EMPTY
32482: LIST
32483: LIST
32484: PUSH
32485: LD_INT 1
32487: NEG
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: EMPTY
32493: LIST
32494: LIST
32495: PUSH
32496: LD_INT 1
32498: NEG
32499: PUSH
32500: LD_INT 1
32502: NEG
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 1
32510: PUSH
32511: LD_INT 1
32513: NEG
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 2
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 2
32531: PUSH
32532: LD_INT 1
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: PUSH
32576: LD_INT 1
32578: NEG
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: LD_INT 0
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 3
32596: PUSH
32597: LD_INT 1
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32622: LD_ADDR_VAR 0 16
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: LD_INT 1
32642: NEG
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 1
32650: PUSH
32651: LD_INT 0
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 1
32660: PUSH
32661: LD_INT 1
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 0
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 1
32691: NEG
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 2
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: PUSH
32716: LD_INT 1
32718: PUSH
32719: EMPTY
32720: LIST
32721: LIST
32722: PUSH
32723: LD_INT 2
32725: PUSH
32726: LD_INT 2
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: LD_INT 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 2
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: NEG
32758: PUSH
32759: LD_INT 2
32761: NEG
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: PUSH
32767: LD_INT 3
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 3
32779: PUSH
32780: LD_INT 3
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: PUSH
32787: LD_INT 2
32789: PUSH
32790: LD_INT 3
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: EMPTY
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32815: LD_ADDR_VAR 0 17
32819: PUSH
32820: LD_INT 0
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 0
32832: PUSH
32833: LD_INT 1
32835: NEG
32836: PUSH
32837: EMPTY
32838: LIST
32839: LIST
32840: PUSH
32841: LD_INT 1
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 1
32853: PUSH
32854: LD_INT 1
32856: PUSH
32857: EMPTY
32858: LIST
32859: LIST
32860: PUSH
32861: LD_INT 0
32863: PUSH
32864: LD_INT 1
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 0
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 1
32884: NEG
32885: PUSH
32886: LD_INT 1
32888: NEG
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 1
32896: NEG
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 2
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 1
32919: PUSH
32920: LD_INT 1
32922: NEG
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 0
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 2
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: PUSH
32948: LD_INT 2
32950: PUSH
32951: LD_INT 2
32953: PUSH
32954: EMPTY
32955: LIST
32956: LIST
32957: PUSH
32958: LD_INT 1
32960: PUSH
32961: LD_INT 2
32963: PUSH
32964: EMPTY
32965: LIST
32966: LIST
32967: PUSH
32968: LD_INT 0
32970: PUSH
32971: LD_INT 2
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 1
32980: NEG
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 0
32995: PUSH
32996: EMPTY
32997: LIST
32998: LIST
32999: PUSH
33000: LD_INT 2
33002: NEG
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 2
33014: NEG
33015: PUSH
33016: LD_INT 2
33018: NEG
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: EMPTY
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33045: LD_ADDR_VAR 0 18
33049: PUSH
33050: LD_INT 0
33052: PUSH
33053: LD_INT 0
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: LD_INT 1
33065: NEG
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 1
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 1
33083: PUSH
33084: LD_INT 1
33086: PUSH
33087: EMPTY
33088: LIST
33089: LIST
33090: PUSH
33091: LD_INT 0
33093: PUSH
33094: LD_INT 1
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: LD_INT 1
33103: NEG
33104: PUSH
33105: LD_INT 0
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 1
33114: NEG
33115: PUSH
33116: LD_INT 1
33118: NEG
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 1
33126: NEG
33127: PUSH
33128: LD_INT 2
33130: NEG
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 0
33138: PUSH
33139: LD_INT 2
33141: NEG
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: LD_INT 1
33152: NEG
33153: PUSH
33154: EMPTY
33155: LIST
33156: LIST
33157: PUSH
33158: LD_INT 2
33160: PUSH
33161: LD_INT 0
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 1
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 0
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: LD_INT 1
33210: NEG
33211: PUSH
33212: LD_INT 1
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 2
33221: NEG
33222: PUSH
33223: LD_INT 0
33225: PUSH
33226: EMPTY
33227: LIST
33228: LIST
33229: PUSH
33230: LD_INT 2
33232: NEG
33233: PUSH
33234: LD_INT 1
33236: NEG
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 2
33244: NEG
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: EMPTY
33251: LIST
33252: LIST
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33275: LD_ADDR_VAR 0 19
33279: PUSH
33280: LD_INT 0
33282: PUSH
33283: LD_INT 0
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 1
33295: NEG
33296: PUSH
33297: EMPTY
33298: LIST
33299: LIST
33300: PUSH
33301: LD_INT 1
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 1
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: PUSH
33321: LD_INT 0
33323: PUSH
33324: LD_INT 1
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: NEG
33334: PUSH
33335: LD_INT 0
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 1
33344: NEG
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: PUSH
33354: LD_INT 1
33356: NEG
33357: PUSH
33358: LD_INT 2
33360: NEG
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PUSH
33366: LD_INT 0
33368: PUSH
33369: LD_INT 2
33371: NEG
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 1
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: PUSH
33391: LD_INT 0
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 1
33403: PUSH
33404: EMPTY
33405: LIST
33406: LIST
33407: PUSH
33408: LD_INT 2
33410: PUSH
33411: LD_INT 2
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 1
33420: PUSH
33421: LD_INT 2
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 0
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: NEG
33441: PUSH
33442: LD_INT 1
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 2
33451: NEG
33452: PUSH
33453: LD_INT 0
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: PUSH
33460: LD_INT 2
33462: NEG
33463: PUSH
33464: LD_INT 1
33466: NEG
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: PUSH
33472: LD_INT 2
33474: NEG
33475: PUSH
33476: LD_INT 2
33478: NEG
33479: PUSH
33480: EMPTY
33481: LIST
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33505: LD_ADDR_VAR 0 20
33509: PUSH
33510: LD_INT 0
33512: PUSH
33513: LD_INT 0
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: PUSH
33520: LD_INT 0
33522: PUSH
33523: LD_INT 1
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: LD_INT 1
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 0
33553: PUSH
33554: LD_INT 1
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: PUSH
33561: LD_INT 1
33563: NEG
33564: PUSH
33565: LD_INT 0
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 1
33574: NEG
33575: PUSH
33576: LD_INT 1
33578: NEG
33579: PUSH
33580: EMPTY
33581: LIST
33582: LIST
33583: PUSH
33584: LD_INT 1
33586: NEG
33587: PUSH
33588: LD_INT 2
33590: NEG
33591: PUSH
33592: EMPTY
33593: LIST
33594: LIST
33595: PUSH
33596: LD_INT 0
33598: PUSH
33599: LD_INT 2
33601: NEG
33602: PUSH
33603: EMPTY
33604: LIST
33605: LIST
33606: PUSH
33607: LD_INT 1
33609: PUSH
33610: LD_INT 1
33612: NEG
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 2
33620: PUSH
33621: LD_INT 0
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 2
33630: PUSH
33631: LD_INT 1
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 2
33640: PUSH
33641: LD_INT 2
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 2
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 1
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 2
33681: NEG
33682: PUSH
33683: LD_INT 0
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 2
33692: NEG
33693: PUSH
33694: LD_INT 1
33696: NEG
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: PUSH
33702: LD_INT 2
33704: NEG
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33735: LD_ADDR_VAR 0 21
33739: PUSH
33740: LD_INT 0
33742: PUSH
33743: LD_INT 0
33745: PUSH
33746: EMPTY
33747: LIST
33748: LIST
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: LD_INT 1
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 1
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 1
33773: PUSH
33774: LD_INT 1
33776: PUSH
33777: EMPTY
33778: LIST
33779: LIST
33780: PUSH
33781: LD_INT 0
33783: PUSH
33784: LD_INT 1
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: PUSH
33791: LD_INT 1
33793: NEG
33794: PUSH
33795: LD_INT 0
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 1
33804: NEG
33805: PUSH
33806: LD_INT 1
33808: NEG
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: NEG
33817: PUSH
33818: LD_INT 2
33820: NEG
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 0
33828: PUSH
33829: LD_INT 2
33831: NEG
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: PUSH
33837: LD_INT 1
33839: PUSH
33840: LD_INT 1
33842: NEG
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: LD_INT 2
33850: PUSH
33851: LD_INT 0
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 2
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: PUSH
33868: LD_INT 2
33870: PUSH
33871: LD_INT 2
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: PUSH
33878: LD_INT 1
33880: PUSH
33881: LD_INT 2
33883: PUSH
33884: EMPTY
33885: LIST
33886: LIST
33887: PUSH
33888: LD_INT 0
33890: PUSH
33891: LD_INT 2
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: PUSH
33898: LD_INT 1
33900: NEG
33901: PUSH
33902: LD_INT 1
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 2
33911: NEG
33912: PUSH
33913: LD_INT 0
33915: PUSH
33916: EMPTY
33917: LIST
33918: LIST
33919: PUSH
33920: LD_INT 2
33922: NEG
33923: PUSH
33924: LD_INT 1
33926: NEG
33927: PUSH
33928: EMPTY
33929: LIST
33930: LIST
33931: PUSH
33932: LD_INT 2
33934: NEG
33935: PUSH
33936: LD_INT 2
33938: NEG
33939: PUSH
33940: EMPTY
33941: LIST
33942: LIST
33943: PUSH
33944: EMPTY
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33965: LD_ADDR_VAR 0 22
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: LD_INT 0
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 0
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: EMPTY
33988: LIST
33989: LIST
33990: PUSH
33991: LD_INT 1
33993: PUSH
33994: LD_INT 0
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 1
34003: PUSH
34004: LD_INT 1
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: LD_INT 1
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: LD_INT 0
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: PUSH
34032: LD_INT 1
34034: NEG
34035: PUSH
34036: LD_INT 1
34038: NEG
34039: PUSH
34040: EMPTY
34041: LIST
34042: LIST
34043: PUSH
34044: LD_INT 1
34046: NEG
34047: PUSH
34048: LD_INT 2
34050: NEG
34051: PUSH
34052: EMPTY
34053: LIST
34054: LIST
34055: PUSH
34056: LD_INT 0
34058: PUSH
34059: LD_INT 2
34061: NEG
34062: PUSH
34063: EMPTY
34064: LIST
34065: LIST
34066: PUSH
34067: LD_INT 1
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: EMPTY
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 2
34080: PUSH
34081: LD_INT 0
34083: PUSH
34084: EMPTY
34085: LIST
34086: LIST
34087: PUSH
34088: LD_INT 2
34090: PUSH
34091: LD_INT 1
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: PUSH
34098: LD_INT 2
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: EMPTY
34105: LIST
34106: LIST
34107: PUSH
34108: LD_INT 1
34110: PUSH
34111: LD_INT 2
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PUSH
34118: LD_INT 0
34120: PUSH
34121: LD_INT 2
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: PUSH
34135: EMPTY
34136: LIST
34137: LIST
34138: PUSH
34139: LD_INT 2
34141: NEG
34142: PUSH
34143: LD_INT 0
34145: PUSH
34146: EMPTY
34147: LIST
34148: LIST
34149: PUSH
34150: LD_INT 2
34152: NEG
34153: PUSH
34154: LD_INT 1
34156: NEG
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: LD_INT 2
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: EMPTY
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
34195: LD_ADDR_VAR 0 23
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 0
34350: PUSH
34351: LD_INT 2
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 1
34360: NEG
34361: PUSH
34362: LD_INT 1
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: NEG
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 2
34382: NEG
34383: PUSH
34384: LD_INT 1
34386: NEG
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 2
34394: NEG
34395: PUSH
34396: LD_INT 2
34398: NEG
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 2
34406: NEG
34407: PUSH
34408: LD_INT 3
34410: NEG
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: LD_INT 3
34422: NEG
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: PUSH
34428: LD_INT 1
34430: PUSH
34431: LD_INT 2
34433: NEG
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 1
34444: NEG
34445: PUSH
34446: EMPTY
34447: LIST
34448: LIST
34449: PUSH
34450: EMPTY
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34475: LD_ADDR_VAR 0 24
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: LD_INT 1
34495: NEG
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: LD_INT 1
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 0
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 1
34533: NEG
34534: PUSH
34535: LD_INT 0
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 1
34544: NEG
34545: PUSH
34546: LD_INT 1
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 2
34560: NEG
34561: PUSH
34562: EMPTY
34563: LIST
34564: LIST
34565: PUSH
34566: LD_INT 0
34568: PUSH
34569: LD_INT 2
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 1
34582: NEG
34583: PUSH
34584: EMPTY
34585: LIST
34586: LIST
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: LD_INT 2
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: PUSH
34618: LD_INT 1
34620: PUSH
34621: LD_INT 2
34623: PUSH
34624: EMPTY
34625: LIST
34626: LIST
34627: PUSH
34628: LD_INT 0
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 1
34640: NEG
34641: PUSH
34642: LD_INT 1
34644: PUSH
34645: EMPTY
34646: LIST
34647: LIST
34648: PUSH
34649: LD_INT 2
34651: NEG
34652: PUSH
34653: LD_INT 0
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 1
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: NEG
34675: PUSH
34676: LD_INT 2
34678: NEG
34679: PUSH
34680: EMPTY
34681: LIST
34682: LIST
34683: PUSH
34684: LD_INT 1
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: PUSH
34695: LD_INT 2
34697: PUSH
34698: LD_INT 1
34700: NEG
34701: PUSH
34702: EMPTY
34703: LIST
34704: LIST
34705: PUSH
34706: LD_INT 3
34708: PUSH
34709: LD_INT 1
34711: PUSH
34712: EMPTY
34713: LIST
34714: LIST
34715: PUSH
34716: LD_INT 3
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34751: LD_ADDR_VAR 0 25
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 1
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 2
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 1
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 0
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: PUSH
34914: LD_INT 1
34916: NEG
34917: PUSH
34918: LD_INT 1
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PUSH
34925: LD_INT 2
34927: NEG
34928: PUSH
34929: LD_INT 0
34931: PUSH
34932: EMPTY
34933: LIST
34934: LIST
34935: PUSH
34936: LD_INT 2
34938: NEG
34939: PUSH
34940: LD_INT 1
34942: NEG
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 2
34950: NEG
34951: PUSH
34952: LD_INT 2
34954: NEG
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: LD_INT 3
34962: PUSH
34963: LD_INT 1
34965: PUSH
34966: EMPTY
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 3
34972: PUSH
34973: LD_INT 2
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: PUSH
34980: LD_INT 2
34982: PUSH
34983: LD_INT 3
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 1
34992: PUSH
34993: LD_INT 3
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
35025: LD_ADDR_VAR 0 26
35029: PUSH
35030: LD_INT 0
35032: PUSH
35033: LD_INT 0
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 1
35045: NEG
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: PUSH
35051: LD_INT 1
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 0
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 1
35083: NEG
35084: PUSH
35085: LD_INT 0
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 1
35094: NEG
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 1
35106: NEG
35107: PUSH
35108: LD_INT 2
35110: NEG
35111: PUSH
35112: EMPTY
35113: LIST
35114: LIST
35115: PUSH
35116: LD_INT 0
35118: PUSH
35119: LD_INT 2
35121: NEG
35122: PUSH
35123: EMPTY
35124: LIST
35125: LIST
35126: PUSH
35127: LD_INT 1
35129: PUSH
35130: LD_INT 1
35132: NEG
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PUSH
35138: LD_INT 2
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 2
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 0
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: LD_INT 1
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 2
35201: NEG
35202: PUSH
35203: LD_INT 0
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: PUSH
35210: LD_INT 2
35212: NEG
35213: PUSH
35214: LD_INT 1
35216: NEG
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: LD_INT 2
35224: NEG
35225: PUSH
35226: LD_INT 2
35228: NEG
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PUSH
35234: LD_INT 2
35236: PUSH
35237: LD_INT 3
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 3
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: NEG
35257: PUSH
35258: LD_INT 2
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: NEG
35268: PUSH
35269: LD_INT 1
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: LIST
35283: LIST
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35301: LD_ADDR_VAR 0 27
35305: PUSH
35306: LD_INT 0
35308: PUSH
35309: LD_INT 0
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: LD_INT 1
35321: NEG
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 1
35329: PUSH
35330: LD_INT 0
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: PUSH
35340: LD_INT 1
35342: PUSH
35343: EMPTY
35344: LIST
35345: LIST
35346: PUSH
35347: LD_INT 0
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: LIST
35356: PUSH
35357: LD_INT 1
35359: NEG
35360: PUSH
35361: LD_INT 0
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 1
35374: NEG
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: PUSH
35380: LD_INT 1
35382: NEG
35383: PUSH
35384: LD_INT 2
35386: NEG
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: PUSH
35392: LD_INT 0
35394: PUSH
35395: LD_INT 2
35397: NEG
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 2
35416: PUSH
35417: LD_INT 0
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 2
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: LD_INT 1
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: LD_INT 0
35456: PUSH
35457: LD_INT 2
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 2
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: NEG
35501: PUSH
35502: LD_INT 2
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 2
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 1
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 3
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35581: LD_ADDR_VAR 0 28
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 0
35591: PUSH
35592: EMPTY
35593: LIST
35594: LIST
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: LD_INT 1
35601: NEG
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 1
35609: PUSH
35610: LD_INT 0
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 1
35619: PUSH
35620: LD_INT 1
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 0
35629: PUSH
35630: LD_INT 1
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: NEG
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 2
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 0
35674: PUSH
35675: LD_INT 2
35677: NEG
35678: PUSH
35679: EMPTY
35680: LIST
35681: LIST
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 1
35688: NEG
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 0
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 2
35706: PUSH
35707: LD_INT 1
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 2
35757: NEG
35758: PUSH
35759: LD_INT 0
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: LD_INT 2
35784: NEG
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 2
35792: NEG
35793: PUSH
35794: LD_INT 3
35796: NEG
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 1
35804: NEG
35805: PUSH
35806: LD_INT 3
35808: NEG
35809: PUSH
35810: EMPTY
35811: LIST
35812: LIST
35813: PUSH
35814: LD_INT 3
35816: NEG
35817: PUSH
35818: LD_INT 1
35820: NEG
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 3
35828: NEG
35829: PUSH
35830: LD_INT 2
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: EMPTY
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35863: LD_ADDR_VAR 0 29
35867: PUSH
35868: LD_INT 0
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: LD_INT 1
35883: NEG
35884: PUSH
35885: EMPTY
35886: LIST
35887: LIST
35888: PUSH
35889: LD_INT 1
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: LD_INT 1
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 1
35932: NEG
35933: PUSH
35934: LD_INT 1
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: LD_INT 2
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 0
35956: PUSH
35957: LD_INT 2
35959: NEG
35960: PUSH
35961: EMPTY
35962: LIST
35963: LIST
35964: PUSH
35965: LD_INT 1
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 2
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 2
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 1
35998: PUSH
35999: LD_INT 2
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 0
36008: PUSH
36009: LD_INT 2
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 1
36018: NEG
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: EMPTY
36036: LIST
36037: LIST
36038: PUSH
36039: LD_INT 2
36041: NEG
36042: PUSH
36043: LD_INT 2
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 2
36053: NEG
36054: PUSH
36055: LD_INT 3
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 2
36065: PUSH
36066: LD_INT 1
36068: NEG
36069: PUSH
36070: EMPTY
36071: LIST
36072: LIST
36073: PUSH
36074: LD_INT 3
36076: PUSH
36077: LD_INT 1
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 1
36086: PUSH
36087: LD_INT 3
36089: PUSH
36090: EMPTY
36091: LIST
36092: LIST
36093: PUSH
36094: LD_INT 1
36096: NEG
36097: PUSH
36098: LD_INT 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 3
36107: NEG
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: LIST
36127: LIST
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36142: LD_ADDR_VAR 0 30
36146: PUSH
36147: LD_INT 0
36149: PUSH
36150: LD_INT 0
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 0
36159: PUSH
36160: LD_INT 1
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 0
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 1
36180: PUSH
36181: LD_INT 1
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 0
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 1
36200: NEG
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 1
36211: NEG
36212: PUSH
36213: LD_INT 1
36215: NEG
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 2
36227: NEG
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: PUSH
36233: LD_INT 0
36235: PUSH
36236: LD_INT 2
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 2
36257: PUSH
36258: LD_INT 0
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: LD_INT 2
36267: PUSH
36268: LD_INT 1
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 2
36277: PUSH
36278: LD_INT 2
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: NEG
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 2
36308: NEG
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: NEG
36320: PUSH
36321: LD_INT 1
36323: NEG
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 3
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: PUSH
36344: LD_INT 2
36346: NEG
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 3
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: LD_INT 3
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: NEG
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: LD_INT 3
36385: NEG
36386: PUSH
36387: LD_INT 1
36389: NEG
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36420: LD_ADDR_VAR 0 31
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: LD_INT 0
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: PUSH
36449: LD_INT 0
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: LD_INT 1
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PUSH
36466: LD_INT 0
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: PUSH
36480: LD_INT 0
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 2
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: LD_INT 2
36524: PUSH
36525: LD_INT 0
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 2
36534: PUSH
36535: LD_INT 1
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 2
36544: PUSH
36545: LD_INT 2
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 2
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 0
36564: PUSH
36565: LD_INT 2
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 2
36585: NEG
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PUSH
36595: LD_INT 2
36597: NEG
36598: PUSH
36599: LD_INT 2
36601: NEG
36602: PUSH
36603: EMPTY
36604: LIST
36605: LIST
36606: PUSH
36607: LD_INT 2
36609: NEG
36610: PUSH
36611: LD_INT 3
36613: NEG
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 2
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 3
36632: PUSH
36633: LD_INT 1
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: LD_INT 2
36656: PUSH
36657: EMPTY
36658: LIST
36659: LIST
36660: PUSH
36661: LD_INT 3
36663: NEG
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: EMPTY
36670: LIST
36671: LIST
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36698: LD_ADDR_VAR 0 32
36702: PUSH
36703: LD_INT 0
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 0
36715: PUSH
36716: LD_INT 1
36718: NEG
36719: PUSH
36720: EMPTY
36721: LIST
36722: LIST
36723: PUSH
36724: LD_INT 1
36726: PUSH
36727: LD_INT 0
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PUSH
36737: LD_INT 1
36739: PUSH
36740: EMPTY
36741: LIST
36742: LIST
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: PUSH
36754: LD_INT 1
36756: NEG
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: LD_INT 1
36771: NEG
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 1
36779: NEG
36780: PUSH
36781: LD_INT 2
36783: NEG
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: LD_INT 2
36794: NEG
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: LD_INT 1
36802: PUSH
36803: LD_INT 1
36805: NEG
36806: PUSH
36807: EMPTY
36808: LIST
36809: LIST
36810: PUSH
36811: LD_INT 2
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: LD_INT 2
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: LD_INT 2
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: LD_INT 2
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 1
36853: NEG
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 0
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: LD_INT 2
36875: NEG
36876: PUSH
36877: LD_INT 1
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: LD_INT 3
36910: PUSH
36911: LD_INT 2
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 3
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: NEG
36942: PUSH
36943: LD_INT 1
36945: NEG
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36976: LD_ADDR_VAR 0 33
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: LD_INT 1
36996: NEG
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: PUSH
37002: LD_INT 1
37004: PUSH
37005: LD_INT 0
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: LD_INT 1
37014: PUSH
37015: LD_INT 1
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 0
37024: PUSH
37025: LD_INT 1
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: LD_INT 1
37034: NEG
37035: PUSH
37036: LD_INT 0
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: LD_INT 1
37045: NEG
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: EMPTY
37052: LIST
37053: LIST
37054: PUSH
37055: LD_INT 1
37057: NEG
37058: PUSH
37059: LD_INT 2
37061: NEG
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 1
37072: NEG
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 0
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: PUSH
37088: LD_INT 2
37090: PUSH
37091: LD_INT 1
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: LD_INT 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 1
37120: NEG
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 2
37131: NEG
37132: PUSH
37133: LD_INT 0
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: NEG
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 2
37154: NEG
37155: PUSH
37156: LD_INT 2
37158: NEG
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 2
37166: NEG
37167: PUSH
37168: LD_INT 3
37170: NEG
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 2
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 3
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: LD_INT 3
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: NEG
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 3
37220: NEG
37221: PUSH
37222: LD_INT 2
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37255: LD_ADDR_VAR 0 34
37259: PUSH
37260: LD_INT 0
37262: PUSH
37263: LD_INT 0
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: LD_INT 1
37275: NEG
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: LD_INT 0
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: PUSH
37291: LD_INT 1
37293: PUSH
37294: LD_INT 1
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: LD_INT 1
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 1
37313: NEG
37314: PUSH
37315: LD_INT 0
37317: PUSH
37318: EMPTY
37319: LIST
37320: LIST
37321: PUSH
37322: LD_INT 1
37324: NEG
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: LD_INT 2
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 0
37348: PUSH
37349: LD_INT 2
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: LD_INT 1
37362: NEG
37363: PUSH
37364: EMPTY
37365: LIST
37366: LIST
37367: PUSH
37368: LD_INT 2
37370: PUSH
37371: LD_INT 1
37373: PUSH
37374: EMPTY
37375: LIST
37376: LIST
37377: PUSH
37378: LD_INT 2
37380: PUSH
37381: LD_INT 2
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: LD_INT 2
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: LD_INT 1
37400: NEG
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 2
37411: NEG
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: NEG
37423: PUSH
37424: LD_INT 1
37426: NEG
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 2
37434: NEG
37435: PUSH
37436: LD_INT 2
37438: NEG
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: PUSH
37444: LD_INT 1
37446: NEG
37447: PUSH
37448: LD_INT 3
37450: NEG
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 1
37458: PUSH
37459: LD_INT 2
37461: NEG
37462: PUSH
37463: EMPTY
37464: LIST
37465: LIST
37466: PUSH
37467: LD_INT 3
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 2
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: PUSH
37487: LD_INT 2
37489: NEG
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 3
37500: NEG
37501: PUSH
37502: LD_INT 1
37504: NEG
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37535: LD_ADDR_VAR 0 35
37539: PUSH
37540: LD_INT 0
37542: PUSH
37543: LD_INT 0
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 1
37555: NEG
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 0
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 0
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: NEG
37605: PUSH
37606: LD_INT 1
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 1
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 2
37626: NEG
37627: PUSH
37628: LD_INT 1
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37647: LD_ADDR_VAR 0 36
37651: PUSH
37652: LD_INT 0
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 1
37667: NEG
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 1
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: PUSH
37686: LD_INT 1
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 1
37705: NEG
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 1
37720: NEG
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 1
37740: PUSH
37741: LD_INT 2
37743: PUSH
37744: EMPTY
37745: LIST
37746: LIST
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37759: LD_ADDR_VAR 0 37
37763: PUSH
37764: LD_INT 0
37766: PUSH
37767: LD_INT 0
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: NEG
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: LD_INT 1
37800: PUSH
37801: EMPTY
37802: LIST
37803: LIST
37804: PUSH
37805: LD_INT 0
37807: PUSH
37808: LD_INT 1
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: NEG
37852: PUSH
37853: LD_INT 1
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37871: LD_ADDR_VAR 0 38
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 1
37891: NEG
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 0
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 1
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 0
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 1
37929: NEG
37930: PUSH
37931: LD_INT 0
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 1
37940: NEG
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PUSH
37950: LD_INT 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 2
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37983: LD_ADDR_VAR 0 39
37987: PUSH
37988: LD_INT 0
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 0
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: LD_INT 0
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: PUSH
38022: LD_INT 1
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 0
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 1
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: NEG
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
38095: LD_ADDR_VAR 0 40
38099: PUSH
38100: LD_INT 0
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 0
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 1
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 0
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: NEG
38154: PUSH
38155: LD_INT 0
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: LD_INT 1
38164: NEG
38165: PUSH
38166: LD_INT 1
38168: NEG
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: LD_INT 1
38179: NEG
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: PUSH
38192: EMPTY
38193: LIST
38194: LIST
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38207: LD_ADDR_VAR 0 41
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: LD_INT 0
38217: PUSH
38218: EMPTY
38219: LIST
38220: LIST
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: LD_INT 1
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 1
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 0
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: LD_INT 1
38280: NEG
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: LD_INT 2
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 1
38300: PUSH
38301: LD_INT 1
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 2
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 1
38341: PUSH
38342: LD_INT 2
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: NEG
38374: PUSH
38375: LD_INT 1
38377: NEG
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 2
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 2
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: PUSH
38431: LD_INT 1
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: LD_INT 2
38443: PUSH
38444: EMPTY
38445: LIST
38446: LIST
38447: PUSH
38448: LD_INT 3
38450: PUSH
38451: LD_INT 3
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 2
38460: PUSH
38461: LD_INT 3
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 2
38470: NEG
38471: PUSH
38472: LD_INT 1
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: LD_INT 1
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: LD_INT 3
38504: NEG
38505: PUSH
38506: LD_INT 2
38508: NEG
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 3
38516: NEG
38517: PUSH
38518: LD_INT 3
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: LIST
38541: LIST
38542: LIST
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38557: LD_ADDR_VAR 0 42
38561: PUSH
38562: LD_INT 0
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 0
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: PUSH
38586: LD_INT 0
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 1
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 0
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 0
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 1
38626: NEG
38627: PUSH
38628: LD_INT 1
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: NEG
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 2
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: PUSH
38662: LD_INT 1
38664: NEG
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 2
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 2
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 2
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 2
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 2
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: LD_INT 3
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 0
38771: PUSH
38772: LD_INT 3
38774: NEG
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: PUSH
38783: LD_INT 2
38785: NEG
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 3
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 3
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 3
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 3
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: LD_INT 2
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 3
38854: NEG
38855: PUSH
38856: LD_INT 2
38858: NEG
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 3
38866: NEG
38867: PUSH
38868: LD_INT 3
38870: NEG
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38907: LD_ADDR_VAR 0 43
38911: PUSH
38912: LD_INT 0
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 0
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: PUSH
38933: LD_INT 1
38935: PUSH
38936: LD_INT 0
38938: PUSH
38939: EMPTY
38940: LIST
38941: LIST
38942: PUSH
38943: LD_INT 1
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 0
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PUSH
38963: LD_INT 1
38965: NEG
38966: PUSH
38967: LD_INT 0
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 1
38980: NEG
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 1
38988: NEG
38989: PUSH
38990: LD_INT 2
38992: NEG
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 0
39000: PUSH
39001: LD_INT 2
39003: NEG
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 1
39014: NEG
39015: PUSH
39016: EMPTY
39017: LIST
39018: LIST
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 2
39073: NEG
39074: PUSH
39075: LD_INT 0
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 2
39084: NEG
39085: PUSH
39086: LD_INT 1
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: NEG
39097: PUSH
39098: LD_INT 3
39100: NEG
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: PUSH
39106: LD_INT 0
39108: PUSH
39109: LD_INT 3
39111: NEG
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 2
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 2
39130: PUSH
39131: LD_INT 1
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 3
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: PUSH
39149: LD_INT 3
39151: PUSH
39152: LD_INT 1
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: LD_INT 3
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 3
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: NEG
39182: PUSH
39183: LD_INT 2
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 3
39203: NEG
39204: PUSH
39205: LD_INT 0
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 3
39214: NEG
39215: PUSH
39216: LD_INT 1
39218: NEG
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39255: LD_ADDR_VAR 0 44
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 0
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 1
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 1
39293: PUSH
39294: LD_INT 1
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: NEG
39325: PUSH
39326: LD_INT 1
39328: NEG
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 2
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: EMPTY
39354: LIST
39355: LIST
39356: PUSH
39357: LD_INT 2
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 2
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 1
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: PUSH
39408: LD_INT 2
39410: NEG
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: NEG
39422: PUSH
39423: LD_INT 1
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 2
39433: NEG
39434: PUSH
39435: LD_INT 2
39437: NEG
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 2
39445: NEG
39446: PUSH
39447: LD_INT 3
39449: NEG
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: LD_INT 1
39460: NEG
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 3
39468: PUSH
39469: LD_INT 0
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 3
39478: PUSH
39479: LD_INT 1
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 3
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 3
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: LD_INT 1
39522: PUSH
39523: EMPTY
39524: LIST
39525: LIST
39526: PUSH
39527: LD_INT 3
39529: NEG
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 3
39540: NEG
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 3
39552: NEG
39553: PUSH
39554: LD_INT 2
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 3
39564: NEG
39565: PUSH
39566: LD_INT 3
39568: NEG
39569: PUSH
39570: EMPTY
39571: LIST
39572: LIST
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39605: LD_ADDR_VAR 0 45
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: LD_INT 2
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 1
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: LD_INT 1
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 2
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 1
39740: PUSH
39741: LD_INT 2
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 0
39750: PUSH
39751: LD_INT 2
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: LD_INT 1
39764: PUSH
39765: EMPTY
39766: LIST
39767: LIST
39768: PUSH
39769: LD_INT 2
39771: NEG
39772: PUSH
39773: LD_INT 1
39775: NEG
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 2
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 3
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: LD_INT 3
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: LD_INT 3
39822: NEG
39823: PUSH
39824: EMPTY
39825: LIST
39826: LIST
39827: PUSH
39828: LD_INT 1
39830: PUSH
39831: LD_INT 2
39833: NEG
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 3
39841: PUSH
39842: LD_INT 2
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: PUSH
39849: LD_INT 3
39851: PUSH
39852: LD_INT 3
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 3
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 3
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 3
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 2
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 3
39902: NEG
39903: PUSH
39904: LD_INT 2
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 3
39914: NEG
39915: PUSH
39916: LD_INT 3
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39955: LD_ADDR_VAR 0 46
39959: PUSH
39960: LD_INT 0
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 0
39972: PUSH
39973: LD_INT 1
39975: NEG
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 1
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 1
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 0
40003: PUSH
40004: LD_INT 1
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 1
40013: NEG
40014: PUSH
40015: LD_INT 0
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: NEG
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 1
40036: NEG
40037: PUSH
40038: LD_INT 2
40040: NEG
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: LD_INT 2
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 1
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: LD_INT 2
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 2
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 0
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 1
40110: NEG
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 2
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 2
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 3
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 3
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 3
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 3
40212: PUSH
40213: EMPTY
40214: LIST
40215: LIST
40216: PUSH
40217: LD_INT 0
40219: PUSH
40220: LD_INT 3
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: NEG
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 3
40251: NEG
40252: PUSH
40253: LD_INT 0
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 3
40262: NEG
40263: PUSH
40264: LD_INT 1
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40303: LD_ADDR_VAR 0 47
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: LD_INT 1
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 1
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 1
40372: NEG
40373: PUSH
40374: LD_INT 1
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 1
40384: NEG
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: LD_INT 2
40399: NEG
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: NEG
40419: PUSH
40420: LD_INT 1
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 2
40430: NEG
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40454: LD_ADDR_VAR 0 48
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: LD_INT 2
40539: NEG
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: PUSH
40545: LD_INT 0
40547: PUSH
40548: LD_INT 2
40550: NEG
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 1
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40601: LD_ADDR_VAR 0 49
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 0
40618: PUSH
40619: LD_INT 1
40621: NEG
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 1
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 1
40639: PUSH
40640: LD_INT 1
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: LD_INT 1
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 2
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: PUSH
40714: LD_INT 2
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 1
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40745: LD_ADDR_VAR 0 50
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: LD_INT 1
40765: NEG
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 1
40773: PUSH
40774: LD_INT 0
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 1
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PUSH
40791: LD_INT 0
40793: PUSH
40794: LD_INT 1
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: PUSH
40801: LD_INT 1
40803: NEG
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 1
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 2
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: NEG
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40889: LD_ADDR_VAR 0 51
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: LD_INT 0
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: LD_INT 0
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 1
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: LD_INT 2
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 2
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41036: LD_ADDR_VAR 0 52
41040: PUSH
41041: LD_INT 0
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 0
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 1
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 1
41074: PUSH
41075: LD_INT 1
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 1
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: NEG
41106: PUSH
41107: LD_INT 1
41109: NEG
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 2
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: LIST
41177: LIST
41178: LIST
41179: LIST
41180: LIST
41181: LIST
41182: LIST
41183: LIST
41184: LIST
41185: LIST
41186: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41187: LD_ADDR_VAR 0 53
41191: PUSH
41192: LD_INT 0
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 1
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 0
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: NEG
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 1
41256: NEG
41257: PUSH
41258: LD_INT 1
41260: NEG
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: NEG
41269: PUSH
41270: LD_INT 2
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: LD_INT 2
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 2
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: PUSH
41323: LD_INT 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: LD_INT 2
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 2
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 1
41352: NEG
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 2
41363: NEG
41364: PUSH
41365: LD_INT 0
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: NEG
41375: PUSH
41376: LD_INT 1
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: NEG
41387: PUSH
41388: LD_INT 2
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41417: LD_ADDR_VAR 0 54
41421: PUSH
41422: LD_INT 0
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 1
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 1
41498: NEG
41499: PUSH
41500: LD_INT 2
41502: NEG
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: LD_INT 2
41513: NEG
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 1
41521: PUSH
41522: LD_INT 1
41524: NEG
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: PUSH
41530: LD_INT 2
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 1
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 2
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 2
41616: NEG
41617: PUSH
41618: LD_INT 2
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41647: LD_ADDR_VAR 0 55
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: LD_INT 1
41667: NEG
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 1
41685: PUSH
41686: LD_INT 1
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 0
41695: PUSH
41696: LD_INT 1
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 1
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 2
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 0
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 1
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 2
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: PUSH
41793: LD_INT 2
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 2
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 1
41812: NEG
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: NEG
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: LD_INT 2
41850: NEG
41851: PUSH
41852: EMPTY
41853: LIST
41854: LIST
41855: PUSH
41856: EMPTY
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: LIST
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41877: LD_ADDR_VAR 0 56
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 1
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: LD_INT 1
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 1
41935: NEG
41936: PUSH
41937: LD_INT 0
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: NEG
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: LD_INT 2
41962: NEG
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 0
41970: PUSH
41971: LD_INT 2
41973: NEG
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: NEG
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: LD_INT 0
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 2
42012: PUSH
42013: LD_INT 2
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: LD_INT 2
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 0
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: LD_INT 2
42080: NEG
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PUSH
42086: EMPTY
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42107: LD_ADDR_VAR 0 57
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 1
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 1
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 0
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 1
42165: NEG
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: NEG
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: EMPTY
42183: LIST
42184: LIST
42185: PUSH
42186: LD_INT 1
42188: NEG
42189: PUSH
42190: LD_INT 2
42192: NEG
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 0
42200: PUSH
42201: LD_INT 2
42203: NEG
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 2
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 2
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 1
42272: NEG
42273: PUSH
42274: LD_INT 1
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 2
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: LIST
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42337: LD_ADDR_VAR 0 58
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 0
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 1
42410: NEG
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 1
42418: NEG
42419: PUSH
42420: LD_INT 2
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 0
42430: PUSH
42431: LD_INT 2
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 1
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: PUSH
42473: LD_INT 2
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 2
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 1
42502: NEG
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: LD_INT 1
42528: NEG
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 2
42536: NEG
42537: PUSH
42538: LD_INT 2
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42567: LD_ADDR_VAR 0 59
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: LD_INT 0
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 0
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: NEG
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42655: LD_ADDR_VAR 0 60
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 0
42672: PUSH
42673: LD_INT 1
42675: NEG
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 1
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: LD_INT 1
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 1
42713: NEG
42714: PUSH
42715: LD_INT 0
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 1
42728: NEG
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42743: LD_ADDR_VAR 0 61
42747: PUSH
42748: LD_INT 0
42750: PUSH
42751: LD_INT 0
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: LD_INT 1
42763: NEG
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 1
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 1
42781: PUSH
42782: LD_INT 1
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42831: LD_ADDR_VAR 0 62
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 0
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: NEG
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42919: LD_ADDR_VAR 0 63
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: LIST
43002: LIST
43003: LIST
43004: LIST
43005: LIST
43006: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
43007: LD_ADDR_VAR 0 64
43011: PUSH
43012: LD_INT 0
43014: PUSH
43015: LD_INT 0
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 0
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 1
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 0
43055: PUSH
43056: LD_INT 1
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: NEG
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 1
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: ST_TO_ADDR
// end ; 1 :
43095: GO 48992
43097: LD_INT 1
43099: DOUBLE
43100: EQUAL
43101: IFTRUE 43105
43103: GO 45728
43105: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43106: LD_ADDR_VAR 0 11
43110: PUSH
43111: LD_INT 1
43113: NEG
43114: PUSH
43115: LD_INT 3
43117: NEG
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 3
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43150: LD_ADDR_VAR 0 12
43154: PUSH
43155: LD_INT 2
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 3
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 3
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: LIST
43190: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43191: LD_ADDR_VAR 0 13
43195: PUSH
43196: LD_INT 3
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 3
43208: PUSH
43209: LD_INT 3
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: PUSH
43219: LD_INT 3
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: LIST
43230: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43231: LD_ADDR_VAR 0 14
43235: PUSH
43236: LD_INT 1
43238: PUSH
43239: LD_INT 3
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: LD_INT 3
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 1
43258: NEG
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: LIST
43271: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43272: LD_ADDR_VAR 0 15
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: NEG
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 3
43301: NEG
43302: PUSH
43303: LD_INT 1
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43316: LD_ADDR_VAR 0 16
43320: PUSH
43321: LD_INT 2
43323: NEG
43324: PUSH
43325: LD_INT 3
43327: NEG
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 3
43335: NEG
43336: PUSH
43337: LD_INT 2
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 3
43347: NEG
43348: PUSH
43349: LD_INT 3
43351: NEG
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: LIST
43361: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43362: LD_ADDR_VAR 0 17
43366: PUSH
43367: LD_INT 1
43369: NEG
43370: PUSH
43371: LD_INT 3
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 0
43381: PUSH
43382: LD_INT 3
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 1
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43406: LD_ADDR_VAR 0 18
43410: PUSH
43411: LD_INT 2
43413: PUSH
43414: LD_INT 1
43416: NEG
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 3
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43447: LD_ADDR_VAR 0 19
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: LIST
43486: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43487: LD_ADDR_VAR 0 20
43491: PUSH
43492: LD_INT 1
43494: PUSH
43495: LD_INT 3
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 0
43504: PUSH
43505: LD_INT 3
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: NEG
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43528: LD_ADDR_VAR 0 21
43532: PUSH
43533: LD_INT 2
43535: NEG
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: LD_INT 0
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 3
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: NEG
43562: PUSH
43563: EMPTY
43564: LIST
43565: LIST
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: LIST
43571: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43572: LD_ADDR_VAR 0 22
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 3
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 2
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: LD_INT 3
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: LIST
43617: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43618: LD_ADDR_VAR 0 23
43622: PUSH
43623: LD_INT 0
43625: PUSH
43626: LD_INT 3
43628: NEG
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 4
43640: NEG
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 3
43651: NEG
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: LIST
43661: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43662: LD_ADDR_VAR 0 24
43666: PUSH
43667: LD_INT 3
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 3
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 4
43690: PUSH
43691: LD_INT 1
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: LIST
43702: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43703: LD_ADDR_VAR 0 25
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 3
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 4
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 3
43730: PUSH
43731: LD_INT 4
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43743: LD_ADDR_VAR 0 26
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: PUSH
43761: LD_INT 4
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: NEG
43771: PUSH
43772: LD_INT 3
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43784: LD_ADDR_VAR 0 27
43788: PUSH
43789: LD_INT 3
43791: NEG
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 3
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 4
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43828: LD_ADDR_VAR 0 28
43832: PUSH
43833: LD_INT 3
43835: NEG
43836: PUSH
43837: LD_INT 3
43839: NEG
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 3
43847: NEG
43848: PUSH
43849: LD_INT 4
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 4
43859: NEG
43860: PUSH
43861: LD_INT 3
43863: NEG
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: LIST
43873: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43874: LD_ADDR_VAR 0 29
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: LD_INT 3
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: LD_INT 2
43907: NEG
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 4
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 0
43927: PUSH
43928: LD_INT 4
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 3
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 5
43953: NEG
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: LD_INT 5
43964: NEG
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 4
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 6
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 6
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 5
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
44029: LD_ADDR_VAR 0 30
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 1
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 3
44047: PUSH
44048: LD_INT 0
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 3
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 3
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 4
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 4
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 5
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 5
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 5
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 6
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 6
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
44172: LD_ADDR_VAR 0 31
44176: PUSH
44177: LD_INT 3
44179: PUSH
44180: LD_INT 2
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: PUSH
44190: LD_INT 3
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 3
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 4
44209: PUSH
44210: LD_INT 3
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 4
44219: PUSH
44220: LD_INT 4
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 3
44229: PUSH
44230: LD_INT 4
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 5
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: LD_INT 5
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 4
44259: PUSH
44260: LD_INT 5
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 6
44269: PUSH
44270: LD_INT 5
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 6
44279: PUSH
44280: LD_INT 6
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 5
44289: PUSH
44290: LD_INT 6
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
44311: LD_ADDR_VAR 0 32
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 3
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 0
44328: PUSH
44329: LD_INT 3
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 4
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 4
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: PUSH
44381: LD_INT 5
44383: PUSH
44384: EMPTY
44385: LIST
44386: LIST
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 5
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 4
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 6
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: LD_INT 6
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: LD_INT 5
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44454: LD_ADDR_VAR 0 33
44458: PUSH
44459: LD_INT 2
44461: NEG
44462: PUSH
44463: LD_INT 1
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 3
44472: NEG
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 3
44495: NEG
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 4
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 4
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 4
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 5
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 5
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 5
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 6
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 6
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: LIST
44603: LIST
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44609: LD_ADDR_VAR 0 34
44613: PUSH
44614: LD_INT 2
44616: NEG
44617: PUSH
44618: LD_INT 3
44620: NEG
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 3
44628: NEG
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 3
44640: NEG
44641: PUSH
44642: LD_INT 3
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 3
44652: NEG
44653: PUSH
44654: LD_INT 4
44656: NEG
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 4
44664: NEG
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 4
44676: NEG
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 4
44688: NEG
44689: PUSH
44690: LD_INT 5
44692: NEG
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 5
44700: NEG
44701: PUSH
44702: LD_INT 4
44704: NEG
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 5
44712: NEG
44713: PUSH
44714: LD_INT 5
44716: NEG
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 5
44724: NEG
44725: PUSH
44726: LD_INT 6
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 6
44736: NEG
44737: PUSH
44738: LD_INT 5
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 6
44748: NEG
44749: PUSH
44750: LD_INT 6
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44772: LD_ADDR_VAR 0 41
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: LD_INT 2
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: LIST
44815: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44816: LD_ADDR_VAR 0 42
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: LD_INT 0
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 1
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 3
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44857: LD_ADDR_VAR 0 43
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: LD_INT 2
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: LIST
44896: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44897: LD_ADDR_VAR 0 44
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 2
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: LIST
44937: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44938: LD_ADDR_VAR 0 45
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: LIST
44981: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44982: LD_ADDR_VAR 0 46
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 2
44993: NEG
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 2
45001: NEG
45002: PUSH
45003: LD_INT 3
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 3
45013: NEG
45014: PUSH
45015: LD_INT 2
45017: NEG
45018: PUSH
45019: EMPTY
45020: LIST
45021: LIST
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: LIST
45027: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
45028: LD_ADDR_VAR 0 47
45032: PUSH
45033: LD_INT 2
45035: NEG
45036: PUSH
45037: LD_INT 3
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 3
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45061: LD_ADDR_VAR 0 48
45065: PUSH
45066: LD_INT 1
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
45092: LD_ADDR_VAR 0 49
45096: PUSH
45097: LD_INT 3
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: LD_INT 2
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
45121: LD_ADDR_VAR 0 50
45125: PUSH
45126: LD_INT 2
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 3
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45150: LD_ADDR_VAR 0 51
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: NEG
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45181: LD_ADDR_VAR 0 52
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: LD_INT 1
45192: NEG
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 3
45200: NEG
45201: PUSH
45202: LD_INT 2
45204: NEG
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45214: LD_ADDR_VAR 0 53
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: LD_INT 3
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 3
45236: NEG
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 2
45247: NEG
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45258: LD_ADDR_VAR 0 54
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 0
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 3
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45299: LD_ADDR_VAR 0 55
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: LD_INT 2
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 3
45316: PUSH
45317: LD_INT 3
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: PUSH
45327: LD_INT 3
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: LIST
45338: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45339: LD_ADDR_VAR 0 56
45343: PUSH
45344: LD_INT 1
45346: PUSH
45347: LD_INT 3
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: LD_INT 2
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: LIST
45379: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45380: LD_ADDR_VAR 0 57
45384: PUSH
45385: LD_INT 2
45387: NEG
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: NEG
45399: PUSH
45400: LD_INT 0
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: LIST
45423: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45424: LD_ADDR_VAR 0 58
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: LD_INT 3
45435: NEG
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 3
45443: NEG
45444: PUSH
45445: LD_INT 2
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 3
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45470: LD_ADDR_VAR 0 59
45474: PUSH
45475: LD_INT 1
45477: NEG
45478: PUSH
45479: LD_INT 2
45481: NEG
45482: PUSH
45483: EMPTY
45484: LIST
45485: LIST
45486: PUSH
45487: LD_INT 0
45489: PUSH
45490: LD_INT 2
45492: NEG
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45514: LD_ADDR_VAR 0 60
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: LD_INT 1
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: LIST
45554: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45555: LD_ADDR_VAR 0 61
45559: PUSH
45560: LD_INT 2
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: LD_INT 2
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 1
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45595: LD_ADDR_VAR 0 62
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 0
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45636: LD_ADDR_VAR 0 63
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: LD_INT 0
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: NEG
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: LIST
45679: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45680: LD_ADDR_VAR 0 64
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: LD_INT 2
45691: NEG
45692: PUSH
45693: EMPTY
45694: LIST
45695: LIST
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: LD_INT 1
45703: NEG
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: PUSH
45709: LD_INT 2
45711: NEG
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: LIST
45725: ST_TO_ADDR
// end ; 2 :
45726: GO 48992
45728: LD_INT 2
45730: DOUBLE
45731: EQUAL
45732: IFTRUE 45736
45734: GO 48991
45736: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45737: LD_ADDR_VAR 0 29
45741: PUSH
45742: LD_INT 4
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 4
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 5
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 5
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 4
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 3
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 3
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 5
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 3
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 3
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 4
45857: PUSH
45858: LD_INT 3
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 4
45867: PUSH
45868: LD_INT 4
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 3
45877: PUSH
45878: LD_INT 4
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: PUSH
45888: LD_INT 3
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 4
45907: PUSH
45908: LD_INT 2
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: PUSH
45918: LD_INT 4
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: LD_INT 4
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 3
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 4
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: LD_INT 5
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 0
45967: PUSH
45968: LD_INT 5
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 4
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 3
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 5
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 3
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 3
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 4
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 4
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 4
46099: NEG
46100: PUSH
46101: LD_INT 2
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 4
46122: NEG
46123: PUSH
46124: LD_INT 4
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 4
46134: NEG
46135: PUSH
46136: LD_INT 5
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: LD_INT 4
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 3
46158: NEG
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 4
46170: NEG
46171: PUSH
46172: LD_INT 3
46174: NEG
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 5
46182: NEG
46183: PUSH
46184: LD_INT 4
46186: NEG
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 5
46194: NEG
46195: PUSH
46196: LD_INT 5
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: LD_INT 5
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 5
46218: NEG
46219: PUSH
46220: LD_INT 3
46222: NEG
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
46275: LD_ADDR_VAR 0 30
46279: PUSH
46280: LD_INT 4
46282: PUSH
46283: LD_INT 4
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 4
46292: PUSH
46293: LD_INT 3
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 5
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 5
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 4
46322: PUSH
46323: LD_INT 5
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 3
46332: PUSH
46333: LD_INT 4
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 5
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 3
46362: PUSH
46363: LD_INT 5
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 3
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 4
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 4
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 4
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 4
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 4
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 3
46488: NEG
46489: PUSH
46490: LD_INT 0
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 3
46499: NEG
46500: PUSH
46501: LD_INT 1
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 4
46510: NEG
46511: PUSH
46512: LD_INT 1
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 5
46521: NEG
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 5
46532: NEG
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: PUSH
46542: LD_INT 5
46544: NEG
46545: PUSH
46546: LD_INT 2
46548: NEG
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 3
46556: NEG
46557: PUSH
46558: LD_INT 2
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: NEG
46568: PUSH
46569: LD_INT 3
46571: NEG
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 3
46579: NEG
46580: PUSH
46581: LD_INT 4
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 2
46591: NEG
46592: PUSH
46593: LD_INT 3
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 2
46603: NEG
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 3
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 4
46627: NEG
46628: PUSH
46629: LD_INT 3
46631: NEG
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 4
46639: NEG
46640: PUSH
46641: LD_INT 4
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 2
46651: NEG
46652: PUSH
46653: LD_INT 4
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 4
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 4
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: LD_INT 5
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: LD_INT 4
46700: NEG
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 3
46711: NEG
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 3
46722: NEG
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 4
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 5
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: PUSH
46755: LD_INT 3
46757: NEG
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: LD_INT 5
46769: NEG
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46822: LD_ADDR_VAR 0 31
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 4
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: LD_INT 3
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 4
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: LD_INT 5
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 0
46869: PUSH
46870: LD_INT 5
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 1
46879: NEG
46880: PUSH
46881: LD_INT 4
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 3
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 2
46901: PUSH
46902: LD_INT 5
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: PUSH
46920: LD_INT 3
46922: NEG
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 3
46933: NEG
46934: PUSH
46935: LD_INT 1
46937: NEG
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: LD_INT 0
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: LD_INT 1
46960: PUSH
46961: EMPTY
46962: LIST
46963: LIST
46964: PUSH
46965: LD_INT 3
46967: NEG
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 4
46978: NEG
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 4
46989: NEG
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 4
47001: NEG
47002: PUSH
47003: LD_INT 2
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 2
47013: NEG
47014: PUSH
47015: LD_INT 2
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 4
47024: NEG
47025: PUSH
47026: LD_INT 4
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 4
47036: NEG
47037: PUSH
47038: LD_INT 5
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 3
47048: NEG
47049: PUSH
47050: LD_INT 4
47052: NEG
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 3
47060: NEG
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 4
47072: NEG
47073: PUSH
47074: LD_INT 3
47076: NEG
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: LD_INT 5
47084: NEG
47085: PUSH
47086: LD_INT 4
47088: NEG
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: LD_INT 5
47096: NEG
47097: PUSH
47098: LD_INT 5
47100: NEG
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: NEG
47109: PUSH
47110: LD_INT 5
47112: NEG
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 5
47120: NEG
47121: PUSH
47122: LD_INT 3
47124: NEG
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 3
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: LD_INT 4
47146: NEG
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: PUSH
47155: LD_INT 3
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: NEG
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 2
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 3
47191: NEG
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 4
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: LD_INT 2
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 4
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 4
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 4
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 5
47255: PUSH
47256: LD_INT 0
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 5
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 4
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 3
47306: PUSH
47307: LD_INT 2
47309: NEG
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 5
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
47372: LD_ADDR_VAR 0 32
47376: PUSH
47377: LD_INT 4
47379: NEG
47380: PUSH
47381: LD_INT 0
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 4
47390: NEG
47391: PUSH
47392: LD_INT 1
47394: NEG
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 3
47413: NEG
47414: PUSH
47415: LD_INT 1
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 4
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 5
47435: NEG
47436: PUSH
47437: LD_INT 0
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 5
47446: NEG
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 5
47458: NEG
47459: PUSH
47460: LD_INT 2
47462: NEG
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 3
47470: NEG
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 3
47481: NEG
47482: PUSH
47483: LD_INT 3
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 3
47493: NEG
47494: PUSH
47495: LD_INT 4
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 3
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 3
47529: NEG
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 4
47541: NEG
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 4
47553: NEG
47554: PUSH
47555: LD_INT 4
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: LD_INT 4
47569: NEG
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 4
47577: NEG
47578: PUSH
47579: LD_INT 2
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 4
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 5
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 4
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 3
47625: NEG
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: LD_INT 3
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 4
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 1
47656: NEG
47657: PUSH
47658: LD_INT 5
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 3
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: LD_INT 5
47683: NEG
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: LD_INT 1
47704: NEG
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 4
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 4
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 3
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 2
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 4
47774: PUSH
47775: LD_INT 2
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 4
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 4
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 5
47804: PUSH
47805: LD_INT 4
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 5
47814: PUSH
47815: LD_INT 5
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 4
47824: PUSH
47825: LD_INT 5
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 3
47834: PUSH
47835: LD_INT 4
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 3
47844: PUSH
47845: LD_INT 3
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 5
47854: PUSH
47855: LD_INT 3
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 3
47864: PUSH
47865: LD_INT 5
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47919: LD_ADDR_VAR 0 33
47923: PUSH
47924: LD_INT 4
47926: NEG
47927: PUSH
47928: LD_INT 4
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 4
47938: NEG
47939: PUSH
47940: LD_INT 5
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 3
47950: NEG
47951: PUSH
47952: LD_INT 4
47954: NEG
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 3
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 4
47974: NEG
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 5
47986: NEG
47987: PUSH
47988: LD_INT 4
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 5
47998: NEG
47999: PUSH
48000: LD_INT 5
48002: NEG
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: LD_INT 5
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 5
48022: NEG
48023: PUSH
48024: LD_INT 3
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 3
48037: NEG
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: LD_INT 4
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 3
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: LD_INT 2
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 3
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 1
48101: NEG
48102: PUSH
48103: LD_INT 4
48105: NEG
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 2
48116: NEG
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 2
48124: NEG
48125: PUSH
48126: LD_INT 4
48128: NEG
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 4
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 4
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 5
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 5
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 4
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: PUSH
48188: LD_INT 0
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 3
48197: PUSH
48198: LD_INT 1
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 5
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: PUSH
48230: LD_INT 3
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 3
48239: PUSH
48240: LD_INT 2
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: LD_INT 4
48249: PUSH
48250: LD_INT 3
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 4
48259: PUSH
48260: LD_INT 4
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 3
48269: PUSH
48270: LD_INT 4
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 3
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 4
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 2
48309: PUSH
48310: LD_INT 4
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 4
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 3
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: LD_INT 4
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: PUSH
48350: LD_INT 5
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: LD_INT 5
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: LD_INT 5
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: LD_INT 3
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48457: LD_ADDR_VAR 0 34
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: LD_INT 4
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 5
48478: NEG
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: LD_INT 4
48489: NEG
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: LD_INT 3
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: LD_INT 3
48511: NEG
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 4
48523: NEG
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 1
48531: NEG
48532: PUSH
48533: LD_INT 5
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 2
48554: NEG
48555: PUSH
48556: LD_INT 5
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 3
48576: PUSH
48577: LD_INT 1
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 4
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 4
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 3
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 2
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 4
48649: PUSH
48650: LD_INT 2
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 4
48659: PUSH
48660: LD_INT 4
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 4
48669: PUSH
48670: LD_INT 3
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 5
48679: PUSH
48680: LD_INT 4
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 5
48689: PUSH
48690: LD_INT 5
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 4
48699: PUSH
48700: LD_INT 5
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 4
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 5
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 3
48739: PUSH
48740: LD_INT 5
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: LD_INT 3
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: LD_INT 3
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: LD_INT 4
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 4
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: NEG
48800: PUSH
48801: LD_INT 3
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: NEG
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 4
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: NEG
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: NEG
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: LD_INT 4
48853: NEG
48854: PUSH
48855: LD_INT 1
48857: NEG
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 3
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 4
48887: NEG
48888: PUSH
48889: LD_INT 1
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 5
48898: NEG
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 5
48909: NEG
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: LD_INT 5
48921: NEG
48922: PUSH
48923: LD_INT 2
48925: NEG
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: LD_INT 2
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// end ; end ;
48989: GO 48992
48991: POP
// case btype of b_depot , b_warehouse :
48992: LD_VAR 0 1
48996: PUSH
48997: LD_INT 0
48999: DOUBLE
49000: EQUAL
49001: IFTRUE 49011
49003: LD_INT 1
49005: DOUBLE
49006: EQUAL
49007: IFTRUE 49011
49009: GO 49212
49011: POP
// case nation of nation_american :
49012: LD_VAR 0 5
49016: PUSH
49017: LD_INT 1
49019: DOUBLE
49020: EQUAL
49021: IFTRUE 49025
49023: GO 49081
49025: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
49026: LD_ADDR_VAR 0 9
49030: PUSH
49031: LD_VAR 0 11
49035: PUSH
49036: LD_VAR 0 12
49040: PUSH
49041: LD_VAR 0 13
49045: PUSH
49046: LD_VAR 0 14
49050: PUSH
49051: LD_VAR 0 15
49055: PUSH
49056: LD_VAR 0 16
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: PUSH
49069: LD_VAR 0 4
49073: PUSH
49074: LD_INT 1
49076: PLUS
49077: ARRAY
49078: ST_TO_ADDR
49079: GO 49210
49081: LD_INT 2
49083: DOUBLE
49084: EQUAL
49085: IFTRUE 49089
49087: GO 49145
49089: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
49090: LD_ADDR_VAR 0 9
49094: PUSH
49095: LD_VAR 0 17
49099: PUSH
49100: LD_VAR 0 18
49104: PUSH
49105: LD_VAR 0 19
49109: PUSH
49110: LD_VAR 0 20
49114: PUSH
49115: LD_VAR 0 21
49119: PUSH
49120: LD_VAR 0 22
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: PUSH
49133: LD_VAR 0 4
49137: PUSH
49138: LD_INT 1
49140: PLUS
49141: ARRAY
49142: ST_TO_ADDR
49143: GO 49210
49145: LD_INT 3
49147: DOUBLE
49148: EQUAL
49149: IFTRUE 49153
49151: GO 49209
49153: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
49154: LD_ADDR_VAR 0 9
49158: PUSH
49159: LD_VAR 0 23
49163: PUSH
49164: LD_VAR 0 24
49168: PUSH
49169: LD_VAR 0 25
49173: PUSH
49174: LD_VAR 0 26
49178: PUSH
49179: LD_VAR 0 27
49183: PUSH
49184: LD_VAR 0 28
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: PUSH
49197: LD_VAR 0 4
49201: PUSH
49202: LD_INT 1
49204: PLUS
49205: ARRAY
49206: ST_TO_ADDR
49207: GO 49210
49209: POP
49210: GO 49765
49212: LD_INT 2
49214: DOUBLE
49215: EQUAL
49216: IFTRUE 49226
49218: LD_INT 3
49220: DOUBLE
49221: EQUAL
49222: IFTRUE 49226
49224: GO 49282
49226: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_VAR 0 29
49236: PUSH
49237: LD_VAR 0 30
49241: PUSH
49242: LD_VAR 0 31
49246: PUSH
49247: LD_VAR 0 32
49251: PUSH
49252: LD_VAR 0 33
49256: PUSH
49257: LD_VAR 0 34
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: PUSH
49270: LD_VAR 0 4
49274: PUSH
49275: LD_INT 1
49277: PLUS
49278: ARRAY
49279: ST_TO_ADDR
49280: GO 49765
49282: LD_INT 16
49284: DOUBLE
49285: EQUAL
49286: IFTRUE 49344
49288: LD_INT 17
49290: DOUBLE
49291: EQUAL
49292: IFTRUE 49344
49294: LD_INT 18
49296: DOUBLE
49297: EQUAL
49298: IFTRUE 49344
49300: LD_INT 19
49302: DOUBLE
49303: EQUAL
49304: IFTRUE 49344
49306: LD_INT 22
49308: DOUBLE
49309: EQUAL
49310: IFTRUE 49344
49312: LD_INT 20
49314: DOUBLE
49315: EQUAL
49316: IFTRUE 49344
49318: LD_INT 21
49320: DOUBLE
49321: EQUAL
49322: IFTRUE 49344
49324: LD_INT 23
49326: DOUBLE
49327: EQUAL
49328: IFTRUE 49344
49330: LD_INT 24
49332: DOUBLE
49333: EQUAL
49334: IFTRUE 49344
49336: LD_INT 25
49338: DOUBLE
49339: EQUAL
49340: IFTRUE 49344
49342: GO 49400
49344: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
49345: LD_ADDR_VAR 0 9
49349: PUSH
49350: LD_VAR 0 35
49354: PUSH
49355: LD_VAR 0 36
49359: PUSH
49360: LD_VAR 0 37
49364: PUSH
49365: LD_VAR 0 38
49369: PUSH
49370: LD_VAR 0 39
49374: PUSH
49375: LD_VAR 0 40
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: PUSH
49388: LD_VAR 0 4
49392: PUSH
49393: LD_INT 1
49395: PLUS
49396: ARRAY
49397: ST_TO_ADDR
49398: GO 49765
49400: LD_INT 6
49402: DOUBLE
49403: EQUAL
49404: IFTRUE 49456
49406: LD_INT 7
49408: DOUBLE
49409: EQUAL
49410: IFTRUE 49456
49412: LD_INT 8
49414: DOUBLE
49415: EQUAL
49416: IFTRUE 49456
49418: LD_INT 13
49420: DOUBLE
49421: EQUAL
49422: IFTRUE 49456
49424: LD_INT 12
49426: DOUBLE
49427: EQUAL
49428: IFTRUE 49456
49430: LD_INT 15
49432: DOUBLE
49433: EQUAL
49434: IFTRUE 49456
49436: LD_INT 11
49438: DOUBLE
49439: EQUAL
49440: IFTRUE 49456
49442: LD_INT 14
49444: DOUBLE
49445: EQUAL
49446: IFTRUE 49456
49448: LD_INT 10
49450: DOUBLE
49451: EQUAL
49452: IFTRUE 49456
49454: GO 49512
49456: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49457: LD_ADDR_VAR 0 9
49461: PUSH
49462: LD_VAR 0 41
49466: PUSH
49467: LD_VAR 0 42
49471: PUSH
49472: LD_VAR 0 43
49476: PUSH
49477: LD_VAR 0 44
49481: PUSH
49482: LD_VAR 0 45
49486: PUSH
49487: LD_VAR 0 46
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: LIST
49497: LIST
49498: LIST
49499: PUSH
49500: LD_VAR 0 4
49504: PUSH
49505: LD_INT 1
49507: PLUS
49508: ARRAY
49509: ST_TO_ADDR
49510: GO 49765
49512: LD_INT 36
49514: DOUBLE
49515: EQUAL
49516: IFTRUE 49520
49518: GO 49576
49520: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49521: LD_ADDR_VAR 0 9
49525: PUSH
49526: LD_VAR 0 47
49530: PUSH
49531: LD_VAR 0 48
49535: PUSH
49536: LD_VAR 0 49
49540: PUSH
49541: LD_VAR 0 50
49545: PUSH
49546: LD_VAR 0 51
49550: PUSH
49551: LD_VAR 0 52
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: LIST
49561: LIST
49562: LIST
49563: PUSH
49564: LD_VAR 0 4
49568: PUSH
49569: LD_INT 1
49571: PLUS
49572: ARRAY
49573: ST_TO_ADDR
49574: GO 49765
49576: LD_INT 4
49578: DOUBLE
49579: EQUAL
49580: IFTRUE 49602
49582: LD_INT 5
49584: DOUBLE
49585: EQUAL
49586: IFTRUE 49602
49588: LD_INT 34
49590: DOUBLE
49591: EQUAL
49592: IFTRUE 49602
49594: LD_INT 37
49596: DOUBLE
49597: EQUAL
49598: IFTRUE 49602
49600: GO 49658
49602: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49603: LD_ADDR_VAR 0 9
49607: PUSH
49608: LD_VAR 0 53
49612: PUSH
49613: LD_VAR 0 54
49617: PUSH
49618: LD_VAR 0 55
49622: PUSH
49623: LD_VAR 0 56
49627: PUSH
49628: LD_VAR 0 57
49632: PUSH
49633: LD_VAR 0 58
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: PUSH
49646: LD_VAR 0 4
49650: PUSH
49651: LD_INT 1
49653: PLUS
49654: ARRAY
49655: ST_TO_ADDR
49656: GO 49765
49658: LD_INT 31
49660: DOUBLE
49661: EQUAL
49662: IFTRUE 49708
49664: LD_INT 32
49666: DOUBLE
49667: EQUAL
49668: IFTRUE 49708
49670: LD_INT 33
49672: DOUBLE
49673: EQUAL
49674: IFTRUE 49708
49676: LD_INT 27
49678: DOUBLE
49679: EQUAL
49680: IFTRUE 49708
49682: LD_INT 26
49684: DOUBLE
49685: EQUAL
49686: IFTRUE 49708
49688: LD_INT 28
49690: DOUBLE
49691: EQUAL
49692: IFTRUE 49708
49694: LD_INT 29
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49708
49700: LD_INT 30
49702: DOUBLE
49703: EQUAL
49704: IFTRUE 49708
49706: GO 49764
49708: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49709: LD_ADDR_VAR 0 9
49713: PUSH
49714: LD_VAR 0 59
49718: PUSH
49719: LD_VAR 0 60
49723: PUSH
49724: LD_VAR 0 61
49728: PUSH
49729: LD_VAR 0 62
49733: PUSH
49734: LD_VAR 0 63
49738: PUSH
49739: LD_VAR 0 64
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: PUSH
49752: LD_VAR 0 4
49756: PUSH
49757: LD_INT 1
49759: PLUS
49760: ARRAY
49761: ST_TO_ADDR
49762: GO 49765
49764: POP
// temp_list2 = [ ] ;
49765: LD_ADDR_VAR 0 10
49769: PUSH
49770: EMPTY
49771: ST_TO_ADDR
// for i in temp_list do
49772: LD_ADDR_VAR 0 8
49776: PUSH
49777: LD_VAR 0 9
49781: PUSH
49782: FOR_IN
49783: IFFALSE 49835
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49785: LD_ADDR_VAR 0 10
49789: PUSH
49790: LD_VAR 0 10
49794: PUSH
49795: LD_VAR 0 8
49799: PUSH
49800: LD_INT 1
49802: ARRAY
49803: PUSH
49804: LD_VAR 0 2
49808: PLUS
49809: PUSH
49810: LD_VAR 0 8
49814: PUSH
49815: LD_INT 2
49817: ARRAY
49818: PUSH
49819: LD_VAR 0 3
49823: PLUS
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: ADD
49832: ST_TO_ADDR
49833: GO 49782
49835: POP
49836: POP
// result = temp_list2 ;
49837: LD_ADDR_VAR 0 7
49841: PUSH
49842: LD_VAR 0 10
49846: ST_TO_ADDR
// end ;
49847: LD_VAR 0 7
49851: RET
// export function EnemyInRange ( unit , dist ) ; begin
49852: LD_INT 0
49854: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_VAR 0 1
49864: PPUSH
49865: CALL_OW 255
49869: PPUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 250
49879: PPUSH
49880: LD_VAR 0 1
49884: PPUSH
49885: CALL_OW 251
49889: PPUSH
49890: LD_VAR 0 2
49894: PPUSH
49895: CALL 23225 0 4
49899: PUSH
49900: LD_INT 4
49902: ARRAY
49903: ST_TO_ADDR
// end ;
49904: LD_VAR 0 3
49908: RET
// export function PlayerSeeMe ( unit ) ; begin
49909: LD_INT 0
49911: PPUSH
// result := See ( your_side , unit ) ;
49912: LD_ADDR_VAR 0 2
49916: PUSH
49917: LD_OWVAR 2
49921: PPUSH
49922: LD_VAR 0 1
49926: PPUSH
49927: CALL_OW 292
49931: ST_TO_ADDR
// end ;
49932: LD_VAR 0 2
49936: RET
// export function ReverseDir ( unit ) ; begin
49937: LD_INT 0
49939: PPUSH
// if not unit then
49940: LD_VAR 0 1
49944: NOT
49945: IFFALSE 49949
// exit ;
49947: GO 49972
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49949: LD_ADDR_VAR 0 2
49953: PUSH
49954: LD_VAR 0 1
49958: PPUSH
49959: CALL_OW 254
49963: PUSH
49964: LD_INT 3
49966: PLUS
49967: PUSH
49968: LD_INT 6
49970: MOD
49971: ST_TO_ADDR
// end ;
49972: LD_VAR 0 2
49976: RET
// export function ReverseArray ( array ) ; var i ; begin
49977: LD_INT 0
49979: PPUSH
49980: PPUSH
// if not array then
49981: LD_VAR 0 1
49985: NOT
49986: IFFALSE 49990
// exit ;
49988: GO 50045
// result := [ ] ;
49990: LD_ADDR_VAR 0 2
49994: PUSH
49995: EMPTY
49996: ST_TO_ADDR
// for i := array downto 1 do
49997: LD_ADDR_VAR 0 3
50001: PUSH
50002: DOUBLE
50003: LD_VAR 0 1
50007: INC
50008: ST_TO_ADDR
50009: LD_INT 1
50011: PUSH
50012: FOR_DOWNTO
50013: IFFALSE 50043
// result := Join ( result , array [ i ] ) ;
50015: LD_ADDR_VAR 0 2
50019: PUSH
50020: LD_VAR 0 2
50024: PPUSH
50025: LD_VAR 0 1
50029: PUSH
50030: LD_VAR 0 3
50034: ARRAY
50035: PPUSH
50036: CALL 54690 0 2
50040: ST_TO_ADDR
50041: GO 50012
50043: POP
50044: POP
// end ;
50045: LD_VAR 0 2
50049: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
50050: LD_INT 0
50052: PPUSH
50053: PPUSH
50054: PPUSH
50055: PPUSH
50056: PPUSH
50057: PPUSH
// if not unit or not hexes then
50058: LD_VAR 0 1
50062: NOT
50063: PUSH
50064: LD_VAR 0 2
50068: NOT
50069: OR
50070: IFFALSE 50074
// exit ;
50072: GO 50197
// dist := 9999 ;
50074: LD_ADDR_VAR 0 5
50078: PUSH
50079: LD_INT 9999
50081: ST_TO_ADDR
// for i = 1 to hexes do
50082: LD_ADDR_VAR 0 4
50086: PUSH
50087: DOUBLE
50088: LD_INT 1
50090: DEC
50091: ST_TO_ADDR
50092: LD_VAR 0 2
50096: PUSH
50097: FOR_TO
50098: IFFALSE 50185
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50100: LD_ADDR_VAR 0 6
50104: PUSH
50105: LD_VAR 0 1
50109: PPUSH
50110: LD_VAR 0 2
50114: PUSH
50115: LD_VAR 0 4
50119: ARRAY
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PPUSH
50125: LD_VAR 0 2
50129: PUSH
50130: LD_VAR 0 4
50134: ARRAY
50135: PUSH
50136: LD_INT 2
50138: ARRAY
50139: PPUSH
50140: CALL_OW 297
50144: ST_TO_ADDR
// if tdist < dist then
50145: LD_VAR 0 6
50149: PUSH
50150: LD_VAR 0 5
50154: LESS
50155: IFFALSE 50183
// begin hex := hexes [ i ] ;
50157: LD_ADDR_VAR 0 8
50161: PUSH
50162: LD_VAR 0 2
50166: PUSH
50167: LD_VAR 0 4
50171: ARRAY
50172: ST_TO_ADDR
// dist := tdist ;
50173: LD_ADDR_VAR 0 5
50177: PUSH
50178: LD_VAR 0 6
50182: ST_TO_ADDR
// end ; end ;
50183: GO 50097
50185: POP
50186: POP
// result := hex ;
50187: LD_ADDR_VAR 0 3
50191: PUSH
50192: LD_VAR 0 8
50196: ST_TO_ADDR
// end ;
50197: LD_VAR 0 3
50201: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
50202: LD_INT 0
50204: PPUSH
50205: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
50206: LD_VAR 0 1
50210: NOT
50211: PUSH
50212: LD_VAR 0 1
50216: PUSH
50217: LD_INT 21
50219: PUSH
50220: LD_INT 2
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 23
50229: PUSH
50230: LD_INT 2
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PPUSH
50241: CALL_OW 69
50245: IN
50246: NOT
50247: OR
50248: IFFALSE 50252
// exit ;
50250: GO 50299
// for i = 1 to 3 do
50252: LD_ADDR_VAR 0 3
50256: PUSH
50257: DOUBLE
50258: LD_INT 1
50260: DEC
50261: ST_TO_ADDR
50262: LD_INT 3
50264: PUSH
50265: FOR_TO
50266: IFFALSE 50297
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
50268: LD_VAR 0 1
50272: PPUSH
50273: CALL_OW 250
50277: PPUSH
50278: LD_VAR 0 1
50282: PPUSH
50283: CALL_OW 251
50287: PPUSH
50288: LD_INT 1
50290: PPUSH
50291: CALL_OW 453
50295: GO 50265
50297: POP
50298: POP
// end ;
50299: LD_VAR 0 2
50303: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
50304: LD_INT 0
50306: PPUSH
50307: PPUSH
50308: PPUSH
50309: PPUSH
50310: PPUSH
50311: PPUSH
// if not unit or not enemy_unit then
50312: LD_VAR 0 1
50316: NOT
50317: PUSH
50318: LD_VAR 0 2
50322: NOT
50323: OR
50324: IFFALSE 50328
// exit ;
50326: GO 50795
// if GetLives ( i ) < 250 then
50328: LD_VAR 0 4
50332: PPUSH
50333: CALL_OW 256
50337: PUSH
50338: LD_INT 250
50340: LESS
50341: IFFALSE 50354
// begin ComAutodestruct ( i ) ;
50343: LD_VAR 0 4
50347: PPUSH
50348: CALL 50202 0 1
// exit ;
50352: GO 50795
// end ; x := GetX ( enemy_unit ) ;
50354: LD_ADDR_VAR 0 7
50358: PUSH
50359: LD_VAR 0 2
50363: PPUSH
50364: CALL_OW 250
50368: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
50369: LD_ADDR_VAR 0 8
50373: PUSH
50374: LD_VAR 0 2
50378: PPUSH
50379: CALL_OW 251
50383: ST_TO_ADDR
// if not x or not y then
50384: LD_VAR 0 7
50388: NOT
50389: PUSH
50390: LD_VAR 0 8
50394: NOT
50395: OR
50396: IFFALSE 50400
// exit ;
50398: GO 50795
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
50400: LD_ADDR_VAR 0 6
50404: PUSH
50405: LD_VAR 0 7
50409: PPUSH
50410: LD_INT 0
50412: PPUSH
50413: LD_INT 4
50415: PPUSH
50416: CALL_OW 272
50420: PUSH
50421: LD_VAR 0 8
50425: PPUSH
50426: LD_INT 0
50428: PPUSH
50429: LD_INT 4
50431: PPUSH
50432: CALL_OW 273
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_VAR 0 7
50445: PPUSH
50446: LD_INT 1
50448: PPUSH
50449: LD_INT 4
50451: PPUSH
50452: CALL_OW 272
50456: PUSH
50457: LD_VAR 0 8
50461: PPUSH
50462: LD_INT 1
50464: PPUSH
50465: LD_INT 4
50467: PPUSH
50468: CALL_OW 273
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_VAR 0 7
50481: PPUSH
50482: LD_INT 2
50484: PPUSH
50485: LD_INT 4
50487: PPUSH
50488: CALL_OW 272
50492: PUSH
50493: LD_VAR 0 8
50497: PPUSH
50498: LD_INT 2
50500: PPUSH
50501: LD_INT 4
50503: PPUSH
50504: CALL_OW 273
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_VAR 0 7
50517: PPUSH
50518: LD_INT 3
50520: PPUSH
50521: LD_INT 4
50523: PPUSH
50524: CALL_OW 272
50528: PUSH
50529: LD_VAR 0 8
50533: PPUSH
50534: LD_INT 3
50536: PPUSH
50537: LD_INT 4
50539: PPUSH
50540: CALL_OW 273
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_VAR 0 7
50553: PPUSH
50554: LD_INT 4
50556: PPUSH
50557: LD_INT 4
50559: PPUSH
50560: CALL_OW 272
50564: PUSH
50565: LD_VAR 0 8
50569: PPUSH
50570: LD_INT 4
50572: PPUSH
50573: LD_INT 4
50575: PPUSH
50576: CALL_OW 273
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_VAR 0 7
50589: PPUSH
50590: LD_INT 5
50592: PPUSH
50593: LD_INT 4
50595: PPUSH
50596: CALL_OW 272
50600: PUSH
50601: LD_VAR 0 8
50605: PPUSH
50606: LD_INT 5
50608: PPUSH
50609: LD_INT 4
50611: PPUSH
50612: CALL_OW 273
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// for i = tmp downto 1 do
50629: LD_ADDR_VAR 0 4
50633: PUSH
50634: DOUBLE
50635: LD_VAR 0 6
50639: INC
50640: ST_TO_ADDR
50641: LD_INT 1
50643: PUSH
50644: FOR_DOWNTO
50645: IFFALSE 50746
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50647: LD_VAR 0 6
50651: PUSH
50652: LD_VAR 0 4
50656: ARRAY
50657: PUSH
50658: LD_INT 1
50660: ARRAY
50661: PPUSH
50662: LD_VAR 0 6
50666: PUSH
50667: LD_VAR 0 4
50671: ARRAY
50672: PUSH
50673: LD_INT 2
50675: ARRAY
50676: PPUSH
50677: CALL_OW 488
50681: NOT
50682: PUSH
50683: LD_VAR 0 6
50687: PUSH
50688: LD_VAR 0 4
50692: ARRAY
50693: PUSH
50694: LD_INT 1
50696: ARRAY
50697: PPUSH
50698: LD_VAR 0 6
50702: PUSH
50703: LD_VAR 0 4
50707: ARRAY
50708: PUSH
50709: LD_INT 2
50711: ARRAY
50712: PPUSH
50713: CALL_OW 428
50717: PUSH
50718: LD_INT 0
50720: NONEQUAL
50721: OR
50722: IFFALSE 50744
// tmp := Delete ( tmp , i ) ;
50724: LD_ADDR_VAR 0 6
50728: PUSH
50729: LD_VAR 0 6
50733: PPUSH
50734: LD_VAR 0 4
50738: PPUSH
50739: CALL_OW 3
50743: ST_TO_ADDR
50744: GO 50644
50746: POP
50747: POP
// j := GetClosestHex ( unit , tmp ) ;
50748: LD_ADDR_VAR 0 5
50752: PUSH
50753: LD_VAR 0 1
50757: PPUSH
50758: LD_VAR 0 6
50762: PPUSH
50763: CALL 50050 0 2
50767: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50768: LD_VAR 0 1
50772: PPUSH
50773: LD_VAR 0 5
50777: PUSH
50778: LD_INT 1
50780: ARRAY
50781: PPUSH
50782: LD_VAR 0 5
50786: PUSH
50787: LD_INT 2
50789: ARRAY
50790: PPUSH
50791: CALL_OW 111
// end ;
50795: LD_VAR 0 3
50799: RET
// export function PrepareApemanSoldier ( ) ; begin
50800: LD_INT 0
50802: PPUSH
// uc_nation := 0 ;
50803: LD_ADDR_OWVAR 21
50807: PUSH
50808: LD_INT 0
50810: ST_TO_ADDR
// hc_sex := sex_male ;
50811: LD_ADDR_OWVAR 27
50815: PUSH
50816: LD_INT 1
50818: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
50819: LD_ADDR_OWVAR 28
50823: PUSH
50824: LD_INT 15
50826: ST_TO_ADDR
// hc_gallery :=  ;
50827: LD_ADDR_OWVAR 33
50831: PUSH
50832: LD_STRING 
50834: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50835: LD_ADDR_OWVAR 31
50839: PUSH
50840: LD_INT 0
50842: PPUSH
50843: LD_INT 3
50845: PPUSH
50846: CALL_OW 12
50850: PUSH
50851: LD_INT 0
50853: PPUSH
50854: LD_INT 3
50856: PPUSH
50857: CALL_OW 12
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: ST_TO_ADDR
// end ;
50874: LD_VAR 0 1
50878: RET
// export function PrepareApemanEngineer ( ) ; begin
50879: LD_INT 0
50881: PPUSH
// uc_nation := 0 ;
50882: LD_ADDR_OWVAR 21
50886: PUSH
50887: LD_INT 0
50889: ST_TO_ADDR
// hc_sex := sex_male ;
50890: LD_ADDR_OWVAR 27
50894: PUSH
50895: LD_INT 1
50897: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
50898: LD_ADDR_OWVAR 28
50902: PUSH
50903: LD_INT 16
50905: ST_TO_ADDR
// hc_gallery :=  ;
50906: LD_ADDR_OWVAR 33
50910: PUSH
50911: LD_STRING 
50913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
50914: LD_ADDR_OWVAR 31
50918: PUSH
50919: LD_INT 0
50921: PPUSH
50922: LD_INT 3
50924: PPUSH
50925: CALL_OW 12
50929: PUSH
50930: LD_INT 0
50932: PPUSH
50933: LD_INT 3
50935: PPUSH
50936: CALL_OW 12
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// end ;
50953: LD_VAR 0 1
50957: RET
// export function PrepareApeman ( agressivity ) ; begin
50958: LD_INT 0
50960: PPUSH
// uc_side := 0 ;
50961: LD_ADDR_OWVAR 20
50965: PUSH
50966: LD_INT 0
50968: ST_TO_ADDR
// uc_nation := 0 ;
50969: LD_ADDR_OWVAR 21
50973: PUSH
50974: LD_INT 0
50976: ST_TO_ADDR
// hc_sex := sex_male ;
50977: LD_ADDR_OWVAR 27
50981: PUSH
50982: LD_INT 1
50984: ST_TO_ADDR
// hc_class := class_apeman ;
50985: LD_ADDR_OWVAR 28
50989: PUSH
50990: LD_INT 12
50992: ST_TO_ADDR
// hc_gallery :=  ;
50993: LD_ADDR_OWVAR 33
50997: PUSH
50998: LD_STRING 
51000: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51001: LD_ADDR_OWVAR 35
51005: PUSH
51006: LD_VAR 0 1
51010: NEG
51011: PPUSH
51012: LD_VAR 0 1
51016: PPUSH
51017: CALL_OW 12
51021: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
51022: LD_ADDR_OWVAR 31
51026: PUSH
51027: LD_INT 0
51029: PPUSH
51030: LD_INT 3
51032: PPUSH
51033: CALL_OW 12
51037: PUSH
51038: LD_INT 0
51040: PPUSH
51041: LD_INT 3
51043: PPUSH
51044: CALL_OW 12
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: ST_TO_ADDR
// end ;
51061: LD_VAR 0 2
51065: RET
// export function PrepareTiger ( agressivity ) ; begin
51066: LD_INT 0
51068: PPUSH
// uc_side := 0 ;
51069: LD_ADDR_OWVAR 20
51073: PUSH
51074: LD_INT 0
51076: ST_TO_ADDR
// uc_nation := 0 ;
51077: LD_ADDR_OWVAR 21
51081: PUSH
51082: LD_INT 0
51084: ST_TO_ADDR
// hc_class := class_tiger ;
51085: LD_ADDR_OWVAR 28
51089: PUSH
51090: LD_INT 14
51092: ST_TO_ADDR
// hc_gallery :=  ;
51093: LD_ADDR_OWVAR 33
51097: PUSH
51098: LD_STRING 
51100: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
51101: LD_ADDR_OWVAR 35
51105: PUSH
51106: LD_VAR 0 1
51110: NEG
51111: PPUSH
51112: LD_VAR 0 1
51116: PPUSH
51117: CALL_OW 12
51121: ST_TO_ADDR
// end ;
51122: LD_VAR 0 2
51126: RET
// export function PrepareEnchidna ( ) ; begin
51127: LD_INT 0
51129: PPUSH
// uc_side := 0 ;
51130: LD_ADDR_OWVAR 20
51134: PUSH
51135: LD_INT 0
51137: ST_TO_ADDR
// uc_nation := 0 ;
51138: LD_ADDR_OWVAR 21
51142: PUSH
51143: LD_INT 0
51145: ST_TO_ADDR
// hc_class := class_baggie ;
51146: LD_ADDR_OWVAR 28
51150: PUSH
51151: LD_INT 13
51153: ST_TO_ADDR
// hc_gallery :=  ;
51154: LD_ADDR_OWVAR 33
51158: PUSH
51159: LD_STRING 
51161: ST_TO_ADDR
// end ;
51162: LD_VAR 0 1
51166: RET
// export function PrepareFrog ( ) ; begin
51167: LD_INT 0
51169: PPUSH
// uc_side := 0 ;
51170: LD_ADDR_OWVAR 20
51174: PUSH
51175: LD_INT 0
51177: ST_TO_ADDR
// uc_nation := 0 ;
51178: LD_ADDR_OWVAR 21
51182: PUSH
51183: LD_INT 0
51185: ST_TO_ADDR
// hc_class := class_frog ;
51186: LD_ADDR_OWVAR 28
51190: PUSH
51191: LD_INT 19
51193: ST_TO_ADDR
// hc_gallery :=  ;
51194: LD_ADDR_OWVAR 33
51198: PUSH
51199: LD_STRING 
51201: ST_TO_ADDR
// end ;
51202: LD_VAR 0 1
51206: RET
// export function PrepareFish ( ) ; begin
51207: LD_INT 0
51209: PPUSH
// uc_side := 0 ;
51210: LD_ADDR_OWVAR 20
51214: PUSH
51215: LD_INT 0
51217: ST_TO_ADDR
// uc_nation := 0 ;
51218: LD_ADDR_OWVAR 21
51222: PUSH
51223: LD_INT 0
51225: ST_TO_ADDR
// hc_class := class_fish ;
51226: LD_ADDR_OWVAR 28
51230: PUSH
51231: LD_INT 20
51233: ST_TO_ADDR
// hc_gallery :=  ;
51234: LD_ADDR_OWVAR 33
51238: PUSH
51239: LD_STRING 
51241: ST_TO_ADDR
// end ;
51242: LD_VAR 0 1
51246: RET
// export function PrepareBird ( ) ; begin
51247: LD_INT 0
51249: PPUSH
// uc_side := 0 ;
51250: LD_ADDR_OWVAR 20
51254: PUSH
51255: LD_INT 0
51257: ST_TO_ADDR
// uc_nation := 0 ;
51258: LD_ADDR_OWVAR 21
51262: PUSH
51263: LD_INT 0
51265: ST_TO_ADDR
// hc_class := class_phororhacos ;
51266: LD_ADDR_OWVAR 28
51270: PUSH
51271: LD_INT 18
51273: ST_TO_ADDR
// hc_gallery :=  ;
51274: LD_ADDR_OWVAR 33
51278: PUSH
51279: LD_STRING 
51281: ST_TO_ADDR
// end ;
51282: LD_VAR 0 1
51286: RET
// export function PrepareHorse ( ) ; begin
51287: LD_INT 0
51289: PPUSH
// uc_side := 0 ;
51290: LD_ADDR_OWVAR 20
51294: PUSH
51295: LD_INT 0
51297: ST_TO_ADDR
// uc_nation := 0 ;
51298: LD_ADDR_OWVAR 21
51302: PUSH
51303: LD_INT 0
51305: ST_TO_ADDR
// hc_class := class_horse ;
51306: LD_ADDR_OWVAR 28
51310: PUSH
51311: LD_INT 21
51313: ST_TO_ADDR
// hc_gallery :=  ;
51314: LD_ADDR_OWVAR 33
51318: PUSH
51319: LD_STRING 
51321: ST_TO_ADDR
// end ;
51322: LD_VAR 0 1
51326: RET
// export function PrepareMastodont ( ) ; begin
51327: LD_INT 0
51329: PPUSH
// uc_side := 0 ;
51330: LD_ADDR_OWVAR 20
51334: PUSH
51335: LD_INT 0
51337: ST_TO_ADDR
// uc_nation := 0 ;
51338: LD_ADDR_OWVAR 21
51342: PUSH
51343: LD_INT 0
51345: ST_TO_ADDR
// vc_chassis := class_mastodont ;
51346: LD_ADDR_OWVAR 37
51350: PUSH
51351: LD_INT 31
51353: ST_TO_ADDR
// vc_control := control_rider ;
51354: LD_ADDR_OWVAR 38
51358: PUSH
51359: LD_INT 4
51361: ST_TO_ADDR
// end ;
51362: LD_VAR 0 1
51366: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
51367: LD_INT 0
51369: PPUSH
51370: PPUSH
51371: PPUSH
// uc_side = 0 ;
51372: LD_ADDR_OWVAR 20
51376: PUSH
51377: LD_INT 0
51379: ST_TO_ADDR
// uc_nation = 0 ;
51380: LD_ADDR_OWVAR 21
51384: PUSH
51385: LD_INT 0
51387: ST_TO_ADDR
// InitHc_All ( ) ;
51388: CALL_OW 584
// InitVc ;
51392: CALL_OW 20
// if mastodonts then
51396: LD_VAR 0 6
51400: IFFALSE 51467
// for i = 1 to mastodonts do
51402: LD_ADDR_VAR 0 11
51406: PUSH
51407: DOUBLE
51408: LD_INT 1
51410: DEC
51411: ST_TO_ADDR
51412: LD_VAR 0 6
51416: PUSH
51417: FOR_TO
51418: IFFALSE 51465
// begin vc_chassis := 31 ;
51420: LD_ADDR_OWVAR 37
51424: PUSH
51425: LD_INT 31
51427: ST_TO_ADDR
// vc_control := control_rider ;
51428: LD_ADDR_OWVAR 38
51432: PUSH
51433: LD_INT 4
51435: ST_TO_ADDR
// animal := CreateVehicle ;
51436: LD_ADDR_VAR 0 12
51440: PUSH
51441: CALL_OW 45
51445: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51446: LD_VAR 0 12
51450: PPUSH
51451: LD_VAR 0 8
51455: PPUSH
51456: LD_INT 0
51458: PPUSH
51459: CALL 53595 0 3
// end ;
51463: GO 51417
51465: POP
51466: POP
// if horses then
51467: LD_VAR 0 5
51471: IFFALSE 51538
// for i = 1 to horses do
51473: LD_ADDR_VAR 0 11
51477: PUSH
51478: DOUBLE
51479: LD_INT 1
51481: DEC
51482: ST_TO_ADDR
51483: LD_VAR 0 5
51487: PUSH
51488: FOR_TO
51489: IFFALSE 51536
// begin hc_class := 21 ;
51491: LD_ADDR_OWVAR 28
51495: PUSH
51496: LD_INT 21
51498: ST_TO_ADDR
// hc_gallery :=  ;
51499: LD_ADDR_OWVAR 33
51503: PUSH
51504: LD_STRING 
51506: ST_TO_ADDR
// animal := CreateHuman ;
51507: LD_ADDR_VAR 0 12
51511: PUSH
51512: CALL_OW 44
51516: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51517: LD_VAR 0 12
51521: PPUSH
51522: LD_VAR 0 8
51526: PPUSH
51527: LD_INT 0
51529: PPUSH
51530: CALL 53595 0 3
// end ;
51534: GO 51488
51536: POP
51537: POP
// if birds then
51538: LD_VAR 0 1
51542: IFFALSE 51609
// for i = 1 to birds do
51544: LD_ADDR_VAR 0 11
51548: PUSH
51549: DOUBLE
51550: LD_INT 1
51552: DEC
51553: ST_TO_ADDR
51554: LD_VAR 0 1
51558: PUSH
51559: FOR_TO
51560: IFFALSE 51607
// begin hc_class := 18 ;
51562: LD_ADDR_OWVAR 28
51566: PUSH
51567: LD_INT 18
51569: ST_TO_ADDR
// hc_gallery =  ;
51570: LD_ADDR_OWVAR 33
51574: PUSH
51575: LD_STRING 
51577: ST_TO_ADDR
// animal := CreateHuman ;
51578: LD_ADDR_VAR 0 12
51582: PUSH
51583: CALL_OW 44
51587: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51588: LD_VAR 0 12
51592: PPUSH
51593: LD_VAR 0 8
51597: PPUSH
51598: LD_INT 0
51600: PPUSH
51601: CALL 53595 0 3
// end ;
51605: GO 51559
51607: POP
51608: POP
// if tigers then
51609: LD_VAR 0 2
51613: IFFALSE 51697
// for i = 1 to tigers do
51615: LD_ADDR_VAR 0 11
51619: PUSH
51620: DOUBLE
51621: LD_INT 1
51623: DEC
51624: ST_TO_ADDR
51625: LD_VAR 0 2
51629: PUSH
51630: FOR_TO
51631: IFFALSE 51695
// begin hc_class = class_tiger ;
51633: LD_ADDR_OWVAR 28
51637: PUSH
51638: LD_INT 14
51640: ST_TO_ADDR
// hc_gallery =  ;
51641: LD_ADDR_OWVAR 33
51645: PUSH
51646: LD_STRING 
51648: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
51649: LD_ADDR_OWVAR 35
51653: PUSH
51654: LD_INT 7
51656: NEG
51657: PPUSH
51658: LD_INT 7
51660: PPUSH
51661: CALL_OW 12
51665: ST_TO_ADDR
// animal := CreateHuman ;
51666: LD_ADDR_VAR 0 12
51670: PUSH
51671: CALL_OW 44
51675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51676: LD_VAR 0 12
51680: PPUSH
51681: LD_VAR 0 8
51685: PPUSH
51686: LD_INT 0
51688: PPUSH
51689: CALL 53595 0 3
// end ;
51693: GO 51630
51695: POP
51696: POP
// if apemans then
51697: LD_VAR 0 3
51701: IFFALSE 51824
// for i = 1 to apemans do
51703: LD_ADDR_VAR 0 11
51707: PUSH
51708: DOUBLE
51709: LD_INT 1
51711: DEC
51712: ST_TO_ADDR
51713: LD_VAR 0 3
51717: PUSH
51718: FOR_TO
51719: IFFALSE 51822
// begin hc_class = class_apeman ;
51721: LD_ADDR_OWVAR 28
51725: PUSH
51726: LD_INT 12
51728: ST_TO_ADDR
// hc_gallery =  ;
51729: LD_ADDR_OWVAR 33
51733: PUSH
51734: LD_STRING 
51736: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
51737: LD_ADDR_OWVAR 35
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PPUSH
51746: LD_INT 2
51748: PPUSH
51749: CALL_OW 12
51753: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
51754: LD_ADDR_OWVAR 31
51758: PUSH
51759: LD_INT 1
51761: PPUSH
51762: LD_INT 3
51764: PPUSH
51765: CALL_OW 12
51769: PUSH
51770: LD_INT 1
51772: PPUSH
51773: LD_INT 3
51775: PPUSH
51776: CALL_OW 12
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: LD_INT 0
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: ST_TO_ADDR
// animal := CreateHuman ;
51793: LD_ADDR_VAR 0 12
51797: PUSH
51798: CALL_OW 44
51802: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51803: LD_VAR 0 12
51807: PPUSH
51808: LD_VAR 0 8
51812: PPUSH
51813: LD_INT 0
51815: PPUSH
51816: CALL 53595 0 3
// end ;
51820: GO 51718
51822: POP
51823: POP
// if enchidnas then
51824: LD_VAR 0 4
51828: IFFALSE 51895
// for i = 1 to enchidnas do
51830: LD_ADDR_VAR 0 11
51834: PUSH
51835: DOUBLE
51836: LD_INT 1
51838: DEC
51839: ST_TO_ADDR
51840: LD_VAR 0 4
51844: PUSH
51845: FOR_TO
51846: IFFALSE 51893
// begin hc_class = 13 ;
51848: LD_ADDR_OWVAR 28
51852: PUSH
51853: LD_INT 13
51855: ST_TO_ADDR
// hc_gallery =  ;
51856: LD_ADDR_OWVAR 33
51860: PUSH
51861: LD_STRING 
51863: ST_TO_ADDR
// animal := CreateHuman ;
51864: LD_ADDR_VAR 0 12
51868: PUSH
51869: CALL_OW 44
51873: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
51874: LD_VAR 0 12
51878: PPUSH
51879: LD_VAR 0 8
51883: PPUSH
51884: LD_INT 0
51886: PPUSH
51887: CALL 53595 0 3
// end ;
51891: GO 51845
51893: POP
51894: POP
// if fishes then
51895: LD_VAR 0 7
51899: IFFALSE 51966
// for i = 1 to fishes do
51901: LD_ADDR_VAR 0 11
51905: PUSH
51906: DOUBLE
51907: LD_INT 1
51909: DEC
51910: ST_TO_ADDR
51911: LD_VAR 0 7
51915: PUSH
51916: FOR_TO
51917: IFFALSE 51964
// begin hc_class = 20 ;
51919: LD_ADDR_OWVAR 28
51923: PUSH
51924: LD_INT 20
51926: ST_TO_ADDR
// hc_gallery =  ;
51927: LD_ADDR_OWVAR 33
51931: PUSH
51932: LD_STRING 
51934: ST_TO_ADDR
// animal := CreateHuman ;
51935: LD_ADDR_VAR 0 12
51939: PUSH
51940: CALL_OW 44
51944: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
51945: LD_VAR 0 12
51949: PPUSH
51950: LD_VAR 0 9
51954: PPUSH
51955: LD_INT 0
51957: PPUSH
51958: CALL 53595 0 3
// end ;
51962: GO 51916
51964: POP
51965: POP
// end ;
51966: LD_VAR 0 10
51970: RET
// export function WantHeal ( sci , unit ) ; begin
51971: LD_INT 0
51973: PPUSH
// if GetTaskList ( sci ) > 0 then
51974: LD_VAR 0 1
51978: PPUSH
51979: CALL_OW 437
51983: PUSH
51984: LD_INT 0
51986: GREATER
51987: IFFALSE 52057
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
51989: LD_VAR 0 1
51993: PPUSH
51994: CALL_OW 437
51998: PUSH
51999: LD_INT 1
52001: ARRAY
52002: PUSH
52003: LD_INT 1
52005: ARRAY
52006: PUSH
52007: LD_STRING l
52009: EQUAL
52010: PUSH
52011: LD_VAR 0 1
52015: PPUSH
52016: CALL_OW 437
52020: PUSH
52021: LD_INT 1
52023: ARRAY
52024: PUSH
52025: LD_INT 4
52027: ARRAY
52028: PUSH
52029: LD_VAR 0 2
52033: EQUAL
52034: AND
52035: IFFALSE 52047
// result := true else
52037: LD_ADDR_VAR 0 3
52041: PUSH
52042: LD_INT 1
52044: ST_TO_ADDR
52045: GO 52055
// result := false ;
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_INT 0
52054: ST_TO_ADDR
// end else
52055: GO 52065
// result := false ;
52057: LD_ADDR_VAR 0 3
52061: PUSH
52062: LD_INT 0
52064: ST_TO_ADDR
// end ;
52065: LD_VAR 0 3
52069: RET
// export function HealTarget ( sci ) ; begin
52070: LD_INT 0
52072: PPUSH
// if not sci then
52073: LD_VAR 0 1
52077: NOT
52078: IFFALSE 52082
// exit ;
52080: GO 52147
// result := 0 ;
52082: LD_ADDR_VAR 0 2
52086: PUSH
52087: LD_INT 0
52089: ST_TO_ADDR
// if GetTaskList ( sci ) then
52090: LD_VAR 0 1
52094: PPUSH
52095: CALL_OW 437
52099: IFFALSE 52147
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL_OW 437
52110: PUSH
52111: LD_INT 1
52113: ARRAY
52114: PUSH
52115: LD_INT 1
52117: ARRAY
52118: PUSH
52119: LD_STRING l
52121: EQUAL
52122: IFFALSE 52147
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
52124: LD_ADDR_VAR 0 2
52128: PUSH
52129: LD_VAR 0 1
52133: PPUSH
52134: CALL_OW 437
52138: PUSH
52139: LD_INT 1
52141: ARRAY
52142: PUSH
52143: LD_INT 4
52145: ARRAY
52146: ST_TO_ADDR
// end ;
52147: LD_VAR 0 2
52151: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
52152: LD_INT 0
52154: PPUSH
52155: PPUSH
52156: PPUSH
52157: PPUSH
// if not base_units then
52158: LD_VAR 0 1
52162: NOT
52163: IFFALSE 52167
// exit ;
52165: GO 52254
// result := false ;
52167: LD_ADDR_VAR 0 2
52171: PUSH
52172: LD_INT 0
52174: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
52175: LD_ADDR_VAR 0 5
52179: PUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: LD_INT 21
52187: PUSH
52188: LD_INT 3
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PPUSH
52195: CALL_OW 72
52199: ST_TO_ADDR
// if not tmp then
52200: LD_VAR 0 5
52204: NOT
52205: IFFALSE 52209
// exit ;
52207: GO 52254
// for i in tmp do
52209: LD_ADDR_VAR 0 3
52213: PUSH
52214: LD_VAR 0 5
52218: PUSH
52219: FOR_IN
52220: IFFALSE 52252
// begin result := EnemyInRange ( i , 22 ) ;
52222: LD_ADDR_VAR 0 2
52226: PUSH
52227: LD_VAR 0 3
52231: PPUSH
52232: LD_INT 22
52234: PPUSH
52235: CALL 49852 0 2
52239: ST_TO_ADDR
// if result then
52240: LD_VAR 0 2
52244: IFFALSE 52250
// exit ;
52246: POP
52247: POP
52248: GO 52254
// end ;
52250: GO 52219
52252: POP
52253: POP
// end ;
52254: LD_VAR 0 2
52258: RET
// export function FilterByTag ( units , tag ) ; begin
52259: LD_INT 0
52261: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
52262: LD_ADDR_VAR 0 3
52266: PUSH
52267: LD_VAR 0 1
52271: PPUSH
52272: LD_INT 120
52274: PUSH
52275: LD_VAR 0 2
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PPUSH
52284: CALL_OW 72
52288: ST_TO_ADDR
// end ;
52289: LD_VAR 0 3
52293: RET
// export function IsDriver ( un ) ; begin
52294: LD_INT 0
52296: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
52297: LD_ADDR_VAR 0 2
52301: PUSH
52302: LD_VAR 0 1
52306: PUSH
52307: LD_INT 55
52309: PUSH
52310: EMPTY
52311: LIST
52312: PPUSH
52313: CALL_OW 69
52317: IN
52318: ST_TO_ADDR
// end ;
52319: LD_VAR 0 2
52323: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
52324: LD_INT 0
52326: PPUSH
52327: PPUSH
// list := [ ] ;
52328: LD_ADDR_VAR 0 5
52332: PUSH
52333: EMPTY
52334: ST_TO_ADDR
// case d of 0 :
52335: LD_VAR 0 3
52339: PUSH
52340: LD_INT 0
52342: DOUBLE
52343: EQUAL
52344: IFTRUE 52348
52346: GO 52481
52348: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
52349: LD_ADDR_VAR 0 5
52353: PUSH
52354: LD_VAR 0 1
52358: PUSH
52359: LD_INT 4
52361: MINUS
52362: PUSH
52363: LD_VAR 0 2
52367: PUSH
52368: LD_INT 4
52370: MINUS
52371: PUSH
52372: LD_INT 2
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: LIST
52379: PUSH
52380: LD_VAR 0 1
52384: PUSH
52385: LD_INT 3
52387: MINUS
52388: PUSH
52389: LD_VAR 0 2
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: LIST
52401: PUSH
52402: LD_VAR 0 1
52406: PUSH
52407: LD_INT 4
52409: PLUS
52410: PUSH
52411: LD_VAR 0 2
52415: PUSH
52416: LD_INT 4
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: LIST
52423: PUSH
52424: LD_VAR 0 1
52428: PUSH
52429: LD_INT 3
52431: PLUS
52432: PUSH
52433: LD_VAR 0 2
52437: PUSH
52438: LD_INT 3
52440: PLUS
52441: PUSH
52442: LD_INT 5
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: LIST
52449: PUSH
52450: LD_VAR 0 1
52454: PUSH
52455: LD_VAR 0 2
52459: PUSH
52460: LD_INT 4
52462: PLUS
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: LIST
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: ST_TO_ADDR
// end ; 1 :
52479: GO 53179
52481: LD_INT 1
52483: DOUBLE
52484: EQUAL
52485: IFTRUE 52489
52487: GO 52622
52489: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
52490: LD_ADDR_VAR 0 5
52494: PUSH
52495: LD_VAR 0 1
52499: PUSH
52500: LD_VAR 0 2
52504: PUSH
52505: LD_INT 4
52507: MINUS
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: LIST
52516: PUSH
52517: LD_VAR 0 1
52521: PUSH
52522: LD_INT 3
52524: MINUS
52525: PUSH
52526: LD_VAR 0 2
52530: PUSH
52531: LD_INT 3
52533: MINUS
52534: PUSH
52535: LD_INT 2
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: PUSH
52543: LD_VAR 0 1
52547: PUSH
52548: LD_INT 4
52550: MINUS
52551: PUSH
52552: LD_VAR 0 2
52556: PUSH
52557: LD_INT 1
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: LIST
52564: PUSH
52565: LD_VAR 0 1
52569: PUSH
52570: LD_VAR 0 2
52574: PUSH
52575: LD_INT 3
52577: PLUS
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: LIST
52586: PUSH
52587: LD_VAR 0 1
52591: PUSH
52592: LD_INT 4
52594: PLUS
52595: PUSH
52596: LD_VAR 0 2
52600: PUSH
52601: LD_INT 4
52603: PLUS
52604: PUSH
52605: LD_INT 5
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: ST_TO_ADDR
// end ; 2 :
52620: GO 53179
52622: LD_INT 2
52624: DOUBLE
52625: EQUAL
52626: IFTRUE 52630
52628: GO 52759
52630: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
52631: LD_ADDR_VAR 0 5
52635: PUSH
52636: LD_VAR 0 1
52640: PUSH
52641: LD_VAR 0 2
52645: PUSH
52646: LD_INT 3
52648: MINUS
52649: PUSH
52650: LD_INT 3
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: LIST
52657: PUSH
52658: LD_VAR 0 1
52662: PUSH
52663: LD_INT 4
52665: PLUS
52666: PUSH
52667: LD_VAR 0 2
52671: PUSH
52672: LD_INT 4
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: LIST
52679: PUSH
52680: LD_VAR 0 1
52684: PUSH
52685: LD_VAR 0 2
52689: PUSH
52690: LD_INT 4
52692: PLUS
52693: PUSH
52694: LD_INT 0
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: LIST
52701: PUSH
52702: LD_VAR 0 1
52706: PUSH
52707: LD_INT 3
52709: MINUS
52710: PUSH
52711: LD_VAR 0 2
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: PUSH
52724: LD_VAR 0 1
52728: PUSH
52729: LD_INT 4
52731: MINUS
52732: PUSH
52733: LD_VAR 0 2
52737: PUSH
52738: LD_INT 4
52740: MINUS
52741: PUSH
52742: LD_INT 2
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// end ; 3 :
52757: GO 53179
52759: LD_INT 3
52761: DOUBLE
52762: EQUAL
52763: IFTRUE 52767
52765: GO 52900
52767: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
52768: LD_ADDR_VAR 0 5
52772: PUSH
52773: LD_VAR 0 1
52777: PUSH
52778: LD_INT 3
52780: PLUS
52781: PUSH
52782: LD_VAR 0 2
52786: PUSH
52787: LD_INT 4
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: LIST
52794: PUSH
52795: LD_VAR 0 1
52799: PUSH
52800: LD_INT 4
52802: PLUS
52803: PUSH
52804: LD_VAR 0 2
52808: PUSH
52809: LD_INT 4
52811: PLUS
52812: PUSH
52813: LD_INT 5
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: PUSH
52821: LD_VAR 0 1
52825: PUSH
52826: LD_INT 4
52828: MINUS
52829: PUSH
52830: LD_VAR 0 2
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: PUSH
52843: LD_VAR 0 1
52847: PUSH
52848: LD_VAR 0 2
52852: PUSH
52853: LD_INT 4
52855: MINUS
52856: PUSH
52857: LD_INT 3
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: LIST
52864: PUSH
52865: LD_VAR 0 1
52869: PUSH
52870: LD_INT 3
52872: MINUS
52873: PUSH
52874: LD_VAR 0 2
52878: PUSH
52879: LD_INT 3
52881: MINUS
52882: PUSH
52883: LD_INT 2
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: ST_TO_ADDR
// end ; 4 :
52898: GO 53179
52900: LD_INT 4
52902: DOUBLE
52903: EQUAL
52904: IFTRUE 52908
52906: GO 53041
52908: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
52909: LD_ADDR_VAR 0 5
52913: PUSH
52914: LD_VAR 0 1
52918: PUSH
52919: LD_VAR 0 2
52923: PUSH
52924: LD_INT 4
52926: PLUS
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: LIST
52935: PUSH
52936: LD_VAR 0 1
52940: PUSH
52941: LD_INT 3
52943: PLUS
52944: PUSH
52945: LD_VAR 0 2
52949: PUSH
52950: LD_INT 3
52952: PLUS
52953: PUSH
52954: LD_INT 5
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: LIST
52961: PUSH
52962: LD_VAR 0 1
52966: PUSH
52967: LD_INT 4
52969: PLUS
52970: PUSH
52971: LD_VAR 0 2
52975: PUSH
52976: LD_INT 4
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: LIST
52983: PUSH
52984: LD_VAR 0 1
52988: PUSH
52989: LD_VAR 0 2
52993: PUSH
52994: LD_INT 3
52996: MINUS
52997: PUSH
52998: LD_INT 3
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: PUSH
53006: LD_VAR 0 1
53010: PUSH
53011: LD_INT 4
53013: MINUS
53014: PUSH
53015: LD_VAR 0 2
53019: PUSH
53020: LD_INT 4
53022: MINUS
53023: PUSH
53024: LD_INT 2
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: ST_TO_ADDR
// end ; 5 :
53039: GO 53179
53041: LD_INT 5
53043: DOUBLE
53044: EQUAL
53045: IFTRUE 53049
53047: GO 53178
53049: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
53050: LD_ADDR_VAR 0 5
53054: PUSH
53055: LD_VAR 0 1
53059: PUSH
53060: LD_INT 4
53062: MINUS
53063: PUSH
53064: LD_VAR 0 2
53068: PUSH
53069: LD_INT 1
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: LIST
53076: PUSH
53077: LD_VAR 0 1
53081: PUSH
53082: LD_VAR 0 2
53086: PUSH
53087: LD_INT 4
53089: MINUS
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 1
53103: PUSH
53104: LD_INT 4
53106: PLUS
53107: PUSH
53108: LD_VAR 0 2
53112: PUSH
53113: LD_INT 4
53115: PLUS
53116: PUSH
53117: LD_INT 5
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: LIST
53124: PUSH
53125: LD_VAR 0 1
53129: PUSH
53130: LD_INT 3
53132: PLUS
53133: PUSH
53134: LD_VAR 0 2
53138: PUSH
53139: LD_INT 4
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: LIST
53146: PUSH
53147: LD_VAR 0 1
53151: PUSH
53152: LD_VAR 0 2
53156: PUSH
53157: LD_INT 3
53159: PLUS
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// end ; end ;
53176: GO 53179
53178: POP
// result := list ;
53179: LD_ADDR_VAR 0 4
53183: PUSH
53184: LD_VAR 0 5
53188: ST_TO_ADDR
// end ;
53189: LD_VAR 0 4
53193: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
53194: LD_INT 0
53196: PPUSH
53197: PPUSH
53198: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
53199: LD_VAR 0 1
53203: NOT
53204: PUSH
53205: LD_VAR 0 2
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 2
53215: PUSH
53216: LD_INT 3
53218: PUSH
53219: LD_INT 4
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: IN
53228: NOT
53229: OR
53230: IFFALSE 53234
// exit ;
53232: GO 53317
// tmp := [ ] ;
53234: LD_ADDR_VAR 0 5
53238: PUSH
53239: EMPTY
53240: ST_TO_ADDR
// for i in units do
53241: LD_ADDR_VAR 0 4
53245: PUSH
53246: LD_VAR 0 1
53250: PUSH
53251: FOR_IN
53252: IFFALSE 53286
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
53254: LD_ADDR_VAR 0 5
53258: PUSH
53259: LD_VAR 0 5
53263: PPUSH
53264: LD_VAR 0 4
53268: PPUSH
53269: LD_VAR 0 2
53273: PPUSH
53274: CALL_OW 259
53278: PPUSH
53279: CALL 54690 0 2
53283: ST_TO_ADDR
53284: GO 53251
53286: POP
53287: POP
// if not tmp then
53288: LD_VAR 0 5
53292: NOT
53293: IFFALSE 53297
// exit ;
53295: GO 53317
// result := SortListByListDesc ( units , tmp ) ;
53297: LD_ADDR_VAR 0 3
53301: PUSH
53302: LD_VAR 0 1
53306: PPUSH
53307: LD_VAR 0 5
53311: PPUSH
53312: CALL_OW 77
53316: ST_TO_ADDR
// end ;
53317: LD_VAR 0 3
53321: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
53322: LD_INT 0
53324: PPUSH
53325: PPUSH
53326: PPUSH
// result := false ;
53327: LD_ADDR_VAR 0 3
53331: PUSH
53332: LD_INT 0
53334: ST_TO_ADDR
// if not building then
53335: LD_VAR 0 2
53339: NOT
53340: IFFALSE 53344
// exit ;
53342: GO 53482
// x := GetX ( building ) ;
53344: LD_ADDR_VAR 0 4
53348: PUSH
53349: LD_VAR 0 2
53353: PPUSH
53354: CALL_OW 250
53358: ST_TO_ADDR
// y := GetY ( building ) ;
53359: LD_ADDR_VAR 0 5
53363: PUSH
53364: LD_VAR 0 2
53368: PPUSH
53369: CALL_OW 251
53373: ST_TO_ADDR
// if not x or not y then
53374: LD_VAR 0 4
53378: NOT
53379: PUSH
53380: LD_VAR 0 5
53384: NOT
53385: OR
53386: IFFALSE 53390
// exit ;
53388: GO 53482
// if GetTaskList ( unit ) then
53390: LD_VAR 0 1
53394: PPUSH
53395: CALL_OW 437
53399: IFFALSE 53482
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53401: LD_STRING e
53403: PUSH
53404: LD_VAR 0 1
53408: PPUSH
53409: CALL_OW 437
53413: PUSH
53414: LD_INT 1
53416: ARRAY
53417: PUSH
53418: LD_INT 1
53420: ARRAY
53421: EQUAL
53422: PUSH
53423: LD_VAR 0 4
53427: PUSH
53428: LD_VAR 0 1
53432: PPUSH
53433: CALL_OW 437
53437: PUSH
53438: LD_INT 1
53440: ARRAY
53441: PUSH
53442: LD_INT 2
53444: ARRAY
53445: EQUAL
53446: AND
53447: PUSH
53448: LD_VAR 0 5
53452: PUSH
53453: LD_VAR 0 1
53457: PPUSH
53458: CALL_OW 437
53462: PUSH
53463: LD_INT 1
53465: ARRAY
53466: PUSH
53467: LD_INT 3
53469: ARRAY
53470: EQUAL
53471: AND
53472: IFFALSE 53482
// result := true end ;
53474: LD_ADDR_VAR 0 3
53478: PUSH
53479: LD_INT 1
53481: ST_TO_ADDR
// end ;
53482: LD_VAR 0 3
53486: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
53487: LD_INT 0
53489: PPUSH
// result := false ;
53490: LD_ADDR_VAR 0 4
53494: PUSH
53495: LD_INT 0
53497: ST_TO_ADDR
// if GetTaskList ( unit ) then
53498: LD_VAR 0 1
53502: PPUSH
53503: CALL_OW 437
53507: IFFALSE 53590
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
53509: LD_STRING M
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 437
53521: PUSH
53522: LD_INT 1
53524: ARRAY
53525: PUSH
53526: LD_INT 1
53528: ARRAY
53529: EQUAL
53530: PUSH
53531: LD_VAR 0 2
53535: PUSH
53536: LD_VAR 0 1
53540: PPUSH
53541: CALL_OW 437
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PUSH
53550: LD_INT 2
53552: ARRAY
53553: EQUAL
53554: AND
53555: PUSH
53556: LD_VAR 0 3
53560: PUSH
53561: LD_VAR 0 1
53565: PPUSH
53566: CALL_OW 437
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PUSH
53575: LD_INT 3
53577: ARRAY
53578: EQUAL
53579: AND
53580: IFFALSE 53590
// result := true ;
53582: LD_ADDR_VAR 0 4
53586: PUSH
53587: LD_INT 1
53589: ST_TO_ADDR
// end ; end ;
53590: LD_VAR 0 4
53594: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
53595: LD_INT 0
53597: PPUSH
53598: PPUSH
53599: PPUSH
53600: PPUSH
// if not unit or not area then
53601: LD_VAR 0 1
53605: NOT
53606: PUSH
53607: LD_VAR 0 2
53611: NOT
53612: OR
53613: IFFALSE 53617
// exit ;
53615: GO 53793
// tmp := AreaToList ( area , i ) ;
53617: LD_ADDR_VAR 0 6
53621: PUSH
53622: LD_VAR 0 2
53626: PPUSH
53627: LD_VAR 0 5
53631: PPUSH
53632: CALL_OW 517
53636: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
53637: LD_ADDR_VAR 0 5
53641: PUSH
53642: DOUBLE
53643: LD_INT 1
53645: DEC
53646: ST_TO_ADDR
53647: LD_VAR 0 6
53651: PUSH
53652: LD_INT 1
53654: ARRAY
53655: PUSH
53656: FOR_TO
53657: IFFALSE 53791
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
53659: LD_ADDR_VAR 0 7
53663: PUSH
53664: LD_VAR 0 6
53668: PUSH
53669: LD_INT 1
53671: ARRAY
53672: PUSH
53673: LD_VAR 0 5
53677: ARRAY
53678: PUSH
53679: LD_VAR 0 6
53683: PUSH
53684: LD_INT 2
53686: ARRAY
53687: PUSH
53688: LD_VAR 0 5
53692: ARRAY
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
53698: LD_INT 92
53700: PUSH
53701: LD_VAR 0 7
53705: PUSH
53706: LD_INT 1
53708: ARRAY
53709: PUSH
53710: LD_VAR 0 7
53714: PUSH
53715: LD_INT 2
53717: ARRAY
53718: PUSH
53719: LD_INT 2
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: PPUSH
53728: CALL_OW 69
53732: PUSH
53733: LD_INT 0
53735: EQUAL
53736: IFFALSE 53789
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
53738: LD_VAR 0 1
53742: PPUSH
53743: LD_VAR 0 7
53747: PUSH
53748: LD_INT 1
53750: ARRAY
53751: PPUSH
53752: LD_VAR 0 7
53756: PUSH
53757: LD_INT 2
53759: ARRAY
53760: PPUSH
53761: LD_VAR 0 3
53765: PPUSH
53766: CALL_OW 48
// result := IsPlaced ( unit ) ;
53770: LD_ADDR_VAR 0 4
53774: PUSH
53775: LD_VAR 0 1
53779: PPUSH
53780: CALL_OW 305
53784: ST_TO_ADDR
// exit ;
53785: POP
53786: POP
53787: GO 53793
// end ; end ;
53789: GO 53656
53791: POP
53792: POP
// end ;
53793: LD_VAR 0 4
53797: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
53798: LD_INT 0
53800: PPUSH
53801: PPUSH
53802: PPUSH
// if not side or side > 8 then
53803: LD_VAR 0 1
53807: NOT
53808: PUSH
53809: LD_VAR 0 1
53813: PUSH
53814: LD_INT 8
53816: GREATER
53817: OR
53818: IFFALSE 53822
// exit ;
53820: GO 54009
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
53822: LD_ADDR_VAR 0 4
53826: PUSH
53827: LD_INT 22
53829: PUSH
53830: LD_VAR 0 1
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 21
53841: PUSH
53842: LD_INT 3
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PPUSH
53853: CALL_OW 69
53857: ST_TO_ADDR
// if not tmp then
53858: LD_VAR 0 4
53862: NOT
53863: IFFALSE 53867
// exit ;
53865: GO 54009
// enable_addtolog := true ;
53867: LD_ADDR_OWVAR 81
53871: PUSH
53872: LD_INT 1
53874: ST_TO_ADDR
// AddToLog ( [ ) ;
53875: LD_STRING [
53877: PPUSH
53878: CALL_OW 561
// for i in tmp do
53882: LD_ADDR_VAR 0 3
53886: PUSH
53887: LD_VAR 0 4
53891: PUSH
53892: FOR_IN
53893: IFFALSE 54000
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
53895: LD_STRING [
53897: PUSH
53898: LD_VAR 0 3
53902: PPUSH
53903: CALL_OW 266
53907: STR
53908: PUSH
53909: LD_STRING , 
53911: STR
53912: PUSH
53913: LD_VAR 0 3
53917: PPUSH
53918: CALL_OW 250
53922: STR
53923: PUSH
53924: LD_STRING , 
53926: STR
53927: PUSH
53928: LD_VAR 0 3
53932: PPUSH
53933: CALL_OW 251
53937: STR
53938: PUSH
53939: LD_STRING , 
53941: STR
53942: PUSH
53943: LD_VAR 0 3
53947: PPUSH
53948: CALL_OW 254
53952: STR
53953: PUSH
53954: LD_STRING , 
53956: STR
53957: PUSH
53958: LD_VAR 0 3
53962: PPUSH
53963: LD_INT 1
53965: PPUSH
53966: CALL_OW 268
53970: STR
53971: PUSH
53972: LD_STRING , 
53974: STR
53975: PUSH
53976: LD_VAR 0 3
53980: PPUSH
53981: LD_INT 2
53983: PPUSH
53984: CALL_OW 268
53988: STR
53989: PUSH
53990: LD_STRING ],
53992: STR
53993: PPUSH
53994: CALL_OW 561
// end ;
53998: GO 53892
54000: POP
54001: POP
// AddToLog ( ]; ) ;
54002: LD_STRING ];
54004: PPUSH
54005: CALL_OW 561
// end ;
54009: LD_VAR 0 2
54013: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
54014: LD_INT 0
54016: PPUSH
54017: PPUSH
54018: PPUSH
54019: PPUSH
54020: PPUSH
// if not area or not rate or not max then
54021: LD_VAR 0 1
54025: NOT
54026: PUSH
54027: LD_VAR 0 2
54031: NOT
54032: OR
54033: PUSH
54034: LD_VAR 0 4
54038: NOT
54039: OR
54040: IFFALSE 54044
// exit ;
54042: GO 54233
// while 1 do
54044: LD_INT 1
54046: IFFALSE 54233
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
54048: LD_ADDR_VAR 0 9
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: LD_INT 1
54060: PPUSH
54061: CALL_OW 287
54065: PUSH
54066: LD_INT 10
54068: MUL
54069: ST_TO_ADDR
// r := rate / 10 ;
54070: LD_ADDR_VAR 0 7
54074: PUSH
54075: LD_VAR 0 2
54079: PUSH
54080: LD_INT 10
54082: DIVREAL
54083: ST_TO_ADDR
// time := 1 1$00 ;
54084: LD_ADDR_VAR 0 8
54088: PUSH
54089: LD_INT 2100
54091: ST_TO_ADDR
// if amount < min then
54092: LD_VAR 0 9
54096: PUSH
54097: LD_VAR 0 3
54101: LESS
54102: IFFALSE 54120
// r := r * 2 else
54104: LD_ADDR_VAR 0 7
54108: PUSH
54109: LD_VAR 0 7
54113: PUSH
54114: LD_INT 2
54116: MUL
54117: ST_TO_ADDR
54118: GO 54146
// if amount > max then
54120: LD_VAR 0 9
54124: PUSH
54125: LD_VAR 0 4
54129: GREATER
54130: IFFALSE 54146
// r := r / 2 ;
54132: LD_ADDR_VAR 0 7
54136: PUSH
54137: LD_VAR 0 7
54141: PUSH
54142: LD_INT 2
54144: DIVREAL
54145: ST_TO_ADDR
// time := time / r ;
54146: LD_ADDR_VAR 0 8
54150: PUSH
54151: LD_VAR 0 8
54155: PUSH
54156: LD_VAR 0 7
54160: DIVREAL
54161: ST_TO_ADDR
// if time < 0 then
54162: LD_VAR 0 8
54166: PUSH
54167: LD_INT 0
54169: LESS
54170: IFFALSE 54187
// time := time * - 1 ;
54172: LD_ADDR_VAR 0 8
54176: PUSH
54177: LD_VAR 0 8
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: MUL
54186: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
54187: LD_VAR 0 8
54191: PUSH
54192: LD_INT 35
54194: PPUSH
54195: LD_INT 875
54197: PPUSH
54198: CALL_OW 12
54202: PLUS
54203: PPUSH
54204: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
54208: LD_INT 1
54210: PPUSH
54211: LD_INT 5
54213: PPUSH
54214: CALL_OW 12
54218: PPUSH
54219: LD_VAR 0 1
54223: PPUSH
54224: LD_INT 1
54226: PPUSH
54227: CALL_OW 55
// end ;
54231: GO 54044
// end ;
54233: LD_VAR 0 5
54237: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
54238: LD_INT 0
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
54244: PPUSH
54245: PPUSH
54246: PPUSH
54247: PPUSH
// if not turrets or not factories then
54248: LD_VAR 0 1
54252: NOT
54253: PUSH
54254: LD_VAR 0 2
54258: NOT
54259: OR
54260: IFFALSE 54264
// exit ;
54262: GO 54571
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
54264: LD_ADDR_VAR 0 10
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: LD_INT 6
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 2
54281: PUSH
54282: LD_INT 4
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 3
54291: PUSH
54292: LD_INT 5
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 24
54306: PUSH
54307: LD_INT 25
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 23
54316: PUSH
54317: LD_INT 27
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 42
54330: PUSH
54331: LD_INT 43
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 44
54340: PUSH
54341: LD_INT 46
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 45
54350: PUSH
54351: LD_INT 47
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: LIST
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
// result := [ ] ;
54368: LD_ADDR_VAR 0 3
54372: PUSH
54373: EMPTY
54374: ST_TO_ADDR
// for i in turrets do
54375: LD_ADDR_VAR 0 4
54379: PUSH
54380: LD_VAR 0 1
54384: PUSH
54385: FOR_IN
54386: IFFALSE 54569
// begin nat := GetNation ( i ) ;
54388: LD_ADDR_VAR 0 7
54392: PUSH
54393: LD_VAR 0 4
54397: PPUSH
54398: CALL_OW 248
54402: ST_TO_ADDR
// weapon := 0 ;
54403: LD_ADDR_VAR 0 8
54407: PUSH
54408: LD_INT 0
54410: ST_TO_ADDR
// if not nat then
54411: LD_VAR 0 7
54415: NOT
54416: IFFALSE 54420
// continue ;
54418: GO 54385
// for j in list [ nat ] do
54420: LD_ADDR_VAR 0 5
54424: PUSH
54425: LD_VAR 0 10
54429: PUSH
54430: LD_VAR 0 7
54434: ARRAY
54435: PUSH
54436: FOR_IN
54437: IFFALSE 54478
// if GetBWeapon ( i ) = j [ 1 ] then
54439: LD_VAR 0 4
54443: PPUSH
54444: CALL_OW 269
54448: PUSH
54449: LD_VAR 0 5
54453: PUSH
54454: LD_INT 1
54456: ARRAY
54457: EQUAL
54458: IFFALSE 54476
// begin weapon := j [ 2 ] ;
54460: LD_ADDR_VAR 0 8
54464: PUSH
54465: LD_VAR 0 5
54469: PUSH
54470: LD_INT 2
54472: ARRAY
54473: ST_TO_ADDR
// break ;
54474: GO 54478
// end ;
54476: GO 54436
54478: POP
54479: POP
// if not weapon then
54480: LD_VAR 0 8
54484: NOT
54485: IFFALSE 54489
// continue ;
54487: GO 54385
// for k in factories do
54489: LD_ADDR_VAR 0 6
54493: PUSH
54494: LD_VAR 0 2
54498: PUSH
54499: FOR_IN
54500: IFFALSE 54565
// begin weapons := AvailableWeaponList ( k ) ;
54502: LD_ADDR_VAR 0 9
54506: PUSH
54507: LD_VAR 0 6
54511: PPUSH
54512: CALL_OW 478
54516: ST_TO_ADDR
// if not weapons then
54517: LD_VAR 0 9
54521: NOT
54522: IFFALSE 54526
// continue ;
54524: GO 54499
// if weapon in weapons then
54526: LD_VAR 0 8
54530: PUSH
54531: LD_VAR 0 9
54535: IN
54536: IFFALSE 54563
// begin result := [ i , weapon ] ;
54538: LD_ADDR_VAR 0 3
54542: PUSH
54543: LD_VAR 0 4
54547: PUSH
54548: LD_VAR 0 8
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: ST_TO_ADDR
// exit ;
54557: POP
54558: POP
54559: POP
54560: POP
54561: GO 54571
// end ; end ;
54563: GO 54499
54565: POP
54566: POP
// end ;
54567: GO 54385
54569: POP
54570: POP
// end ;
54571: LD_VAR 0 3
54575: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
54576: LD_INT 0
54578: PPUSH
// if not side or side > 8 then
54579: LD_VAR 0 3
54583: NOT
54584: PUSH
54585: LD_VAR 0 3
54589: PUSH
54590: LD_INT 8
54592: GREATER
54593: OR
54594: IFFALSE 54598
// exit ;
54596: GO 54657
// if not range then
54598: LD_VAR 0 4
54602: NOT
54603: IFFALSE 54614
// range := - 12 ;
54605: LD_ADDR_VAR 0 4
54609: PUSH
54610: LD_INT 12
54612: NEG
54613: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
54614: LD_VAR 0 1
54618: PPUSH
54619: LD_VAR 0 2
54623: PPUSH
54624: LD_VAR 0 3
54628: PPUSH
54629: LD_VAR 0 4
54633: PPUSH
54634: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
54638: LD_VAR 0 1
54642: PPUSH
54643: LD_VAR 0 2
54647: PPUSH
54648: LD_VAR 0 3
54652: PPUSH
54653: CALL_OW 331
// end ;
54657: LD_VAR 0 5
54661: RET
// export function Video ( mode ) ; begin
54662: LD_INT 0
54664: PPUSH
// ingame_video = mode ;
54665: LD_ADDR_OWVAR 52
54669: PUSH
54670: LD_VAR 0 1
54674: ST_TO_ADDR
// interface_hidden = mode ;
54675: LD_ADDR_OWVAR 54
54679: PUSH
54680: LD_VAR 0 1
54684: ST_TO_ADDR
// end ;
54685: LD_VAR 0 2
54689: RET
// export function Join ( array , element ) ; begin
54690: LD_INT 0
54692: PPUSH
// result := Replace ( array , array + 1 , element ) ;
54693: LD_ADDR_VAR 0 3
54697: PUSH
54698: LD_VAR 0 1
54702: PPUSH
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 1
54710: PLUS
54711: PPUSH
54712: LD_VAR 0 2
54716: PPUSH
54717: CALL_OW 1
54721: ST_TO_ADDR
// end ;
54722: LD_VAR 0 3
54726: RET
// export function JoinUnion ( array , element ) ; begin
54727: LD_INT 0
54729: PPUSH
// result := array union element ;
54730: LD_ADDR_VAR 0 3
54734: PUSH
54735: LD_VAR 0 1
54739: PUSH
54740: LD_VAR 0 2
54744: UNION
54745: ST_TO_ADDR
// end ;
54746: LD_VAR 0 3
54750: RET
// export function GetBehemoths ( side ) ; begin
54751: LD_INT 0
54753: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
54754: LD_ADDR_VAR 0 2
54758: PUSH
54759: LD_INT 22
54761: PUSH
54762: LD_VAR 0 1
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 31
54773: PUSH
54774: LD_INT 25
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PPUSH
54785: CALL_OW 69
54789: ST_TO_ADDR
// end ;
54790: LD_VAR 0 2
54794: RET
// export function Shuffle ( array ) ; var i , index ; begin
54795: LD_INT 0
54797: PPUSH
54798: PPUSH
54799: PPUSH
// result := [ ] ;
54800: LD_ADDR_VAR 0 2
54804: PUSH
54805: EMPTY
54806: ST_TO_ADDR
// if not array then
54807: LD_VAR 0 1
54811: NOT
54812: IFFALSE 54816
// exit ;
54814: GO 54915
// Randomize ;
54816: CALL_OW 10
// for i = array downto 1 do
54820: LD_ADDR_VAR 0 3
54824: PUSH
54825: DOUBLE
54826: LD_VAR 0 1
54830: INC
54831: ST_TO_ADDR
54832: LD_INT 1
54834: PUSH
54835: FOR_DOWNTO
54836: IFFALSE 54913
// begin index := rand ( 1 , array ) ;
54838: LD_ADDR_VAR 0 4
54842: PUSH
54843: LD_INT 1
54845: PPUSH
54846: LD_VAR 0 1
54850: PPUSH
54851: CALL_OW 12
54855: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
54856: LD_ADDR_VAR 0 2
54860: PUSH
54861: LD_VAR 0 2
54865: PPUSH
54866: LD_VAR 0 2
54870: PUSH
54871: LD_INT 1
54873: PLUS
54874: PPUSH
54875: LD_VAR 0 1
54879: PUSH
54880: LD_VAR 0 4
54884: ARRAY
54885: PPUSH
54886: CALL_OW 2
54890: ST_TO_ADDR
// array := Delete ( array , index ) ;
54891: LD_ADDR_VAR 0 1
54895: PUSH
54896: LD_VAR 0 1
54900: PPUSH
54901: LD_VAR 0 4
54905: PPUSH
54906: CALL_OW 3
54910: ST_TO_ADDR
// end ;
54911: GO 54835
54913: POP
54914: POP
// end ;
54915: LD_VAR 0 2
54919: RET
// export function GetBaseMaterials ( base ) ; begin
54920: LD_INT 0
54922: PPUSH
// result := [ 0 , 0 , 0 ] ;
54923: LD_ADDR_VAR 0 2
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: LD_INT 0
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: LIST
54941: ST_TO_ADDR
// if not base then
54942: LD_VAR 0 1
54946: NOT
54947: IFFALSE 54951
// exit ;
54949: GO 55000
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
54951: LD_ADDR_VAR 0 2
54955: PUSH
54956: LD_VAR 0 1
54960: PPUSH
54961: LD_INT 1
54963: PPUSH
54964: CALL_OW 275
54968: PUSH
54969: LD_VAR 0 1
54973: PPUSH
54974: LD_INT 2
54976: PPUSH
54977: CALL_OW 275
54981: PUSH
54982: LD_VAR 0 1
54986: PPUSH
54987: LD_INT 3
54989: PPUSH
54990: CALL_OW 275
54994: PUSH
54995: EMPTY
54996: LIST
54997: LIST
54998: LIST
54999: ST_TO_ADDR
// end ;
55000: LD_VAR 0 2
55004: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
55005: LD_INT 0
55007: PPUSH
55008: PPUSH
// result := array ;
55009: LD_ADDR_VAR 0 3
55013: PUSH
55014: LD_VAR 0 1
55018: ST_TO_ADDR
// if size >= result then
55019: LD_VAR 0 2
55023: PUSH
55024: LD_VAR 0 3
55028: GREATEREQUAL
55029: IFFALSE 55033
// exit ;
55031: GO 55083
// if size then
55033: LD_VAR 0 2
55037: IFFALSE 55083
// for i := array downto size do
55039: LD_ADDR_VAR 0 4
55043: PUSH
55044: DOUBLE
55045: LD_VAR 0 1
55049: INC
55050: ST_TO_ADDR
55051: LD_VAR 0 2
55055: PUSH
55056: FOR_DOWNTO
55057: IFFALSE 55081
// result := Delete ( result , result ) ;
55059: LD_ADDR_VAR 0 3
55063: PUSH
55064: LD_VAR 0 3
55068: PPUSH
55069: LD_VAR 0 3
55073: PPUSH
55074: CALL_OW 3
55078: ST_TO_ADDR
55079: GO 55056
55081: POP
55082: POP
// end ;
55083: LD_VAR 0 3
55087: RET
// export function ComExit ( unit ) ; var tmp ; begin
55088: LD_INT 0
55090: PPUSH
55091: PPUSH
// if not IsInUnit ( unit ) then
55092: LD_VAR 0 1
55096: PPUSH
55097: CALL_OW 310
55101: NOT
55102: IFFALSE 55106
// exit ;
55104: GO 55166
// tmp := IsInUnit ( unit ) ;
55106: LD_ADDR_VAR 0 3
55110: PUSH
55111: LD_VAR 0 1
55115: PPUSH
55116: CALL_OW 310
55120: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
55121: LD_VAR 0 3
55125: PPUSH
55126: CALL_OW 247
55130: PUSH
55131: LD_INT 2
55133: EQUAL
55134: IFFALSE 55147
// ComExitVehicle ( unit ) else
55136: LD_VAR 0 1
55140: PPUSH
55141: CALL_OW 121
55145: GO 55156
// ComExitBuilding ( unit ) ;
55147: LD_VAR 0 1
55151: PPUSH
55152: CALL_OW 122
// result := tmp ;
55156: LD_ADDR_VAR 0 2
55160: PUSH
55161: LD_VAR 0 3
55165: ST_TO_ADDR
// end ;
55166: LD_VAR 0 2
55170: RET
// export function ComExitAll ( units ) ; var i ; begin
55171: LD_INT 0
55173: PPUSH
55174: PPUSH
// if not units then
55175: LD_VAR 0 1
55179: NOT
55180: IFFALSE 55184
// exit ;
55182: GO 55210
// for i in units do
55184: LD_ADDR_VAR 0 3
55188: PUSH
55189: LD_VAR 0 1
55193: PUSH
55194: FOR_IN
55195: IFFALSE 55208
// ComExit ( i ) ;
55197: LD_VAR 0 3
55201: PPUSH
55202: CALL 55088 0 1
55206: GO 55194
55208: POP
55209: POP
// end ;
55210: LD_VAR 0 2
55214: RET
// export function ResetHc ; begin
55215: LD_INT 0
55217: PPUSH
// InitHc ;
55218: CALL_OW 19
// hc_importance := 0 ;
55222: LD_ADDR_OWVAR 32
55226: PUSH
55227: LD_INT 0
55229: ST_TO_ADDR
// end ;
55230: LD_VAR 0 1
55234: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
55235: LD_INT 0
55237: PPUSH
55238: PPUSH
55239: PPUSH
// _x := ( x1 + x2 ) div 2 ;
55240: LD_ADDR_VAR 0 6
55244: PUSH
55245: LD_VAR 0 1
55249: PUSH
55250: LD_VAR 0 3
55254: PLUS
55255: PUSH
55256: LD_INT 2
55258: DIV
55259: ST_TO_ADDR
// if _x < 0 then
55260: LD_VAR 0 6
55264: PUSH
55265: LD_INT 0
55267: LESS
55268: IFFALSE 55285
// _x := _x * - 1 ;
55270: LD_ADDR_VAR 0 6
55274: PUSH
55275: LD_VAR 0 6
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: MUL
55284: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
55285: LD_ADDR_VAR 0 7
55289: PUSH
55290: LD_VAR 0 2
55294: PUSH
55295: LD_VAR 0 4
55299: PLUS
55300: PUSH
55301: LD_INT 2
55303: DIV
55304: ST_TO_ADDR
// if _y < 0 then
55305: LD_VAR 0 7
55309: PUSH
55310: LD_INT 0
55312: LESS
55313: IFFALSE 55330
// _y := _y * - 1 ;
55315: LD_ADDR_VAR 0 7
55319: PUSH
55320: LD_VAR 0 7
55324: PUSH
55325: LD_INT 1
55327: NEG
55328: MUL
55329: ST_TO_ADDR
// result := [ _x , _y ] ;
55330: LD_ADDR_VAR 0 5
55334: PUSH
55335: LD_VAR 0 6
55339: PUSH
55340: LD_VAR 0 7
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: ST_TO_ADDR
// end ;
55349: LD_VAR 0 5
55353: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
55354: LD_INT 0
55356: PPUSH
55357: PPUSH
55358: PPUSH
55359: PPUSH
// task := GetTaskList ( unit ) ;
55360: LD_ADDR_VAR 0 7
55364: PUSH
55365: LD_VAR 0 1
55369: PPUSH
55370: CALL_OW 437
55374: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
55375: LD_VAR 0 7
55379: NOT
55380: PUSH
55381: LD_VAR 0 1
55385: PPUSH
55386: LD_VAR 0 2
55390: PPUSH
55391: CALL_OW 308
55395: NOT
55396: AND
55397: IFFALSE 55401
// exit ;
55399: GO 55519
// if IsInArea ( unit , area ) then
55401: LD_VAR 0 1
55405: PPUSH
55406: LD_VAR 0 2
55410: PPUSH
55411: CALL_OW 308
55415: IFFALSE 55433
// begin ComMoveToArea ( unit , goAway ) ;
55417: LD_VAR 0 1
55421: PPUSH
55422: LD_VAR 0 3
55426: PPUSH
55427: CALL_OW 113
// exit ;
55431: GO 55519
// end ; if task [ 1 ] [ 1 ] <> M then
55433: LD_VAR 0 7
55437: PUSH
55438: LD_INT 1
55440: ARRAY
55441: PUSH
55442: LD_INT 1
55444: ARRAY
55445: PUSH
55446: LD_STRING M
55448: NONEQUAL
55449: IFFALSE 55453
// exit ;
55451: GO 55519
// x := task [ 1 ] [ 2 ] ;
55453: LD_ADDR_VAR 0 5
55457: PUSH
55458: LD_VAR 0 7
55462: PUSH
55463: LD_INT 1
55465: ARRAY
55466: PUSH
55467: LD_INT 2
55469: ARRAY
55470: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
55471: LD_ADDR_VAR 0 6
55475: PUSH
55476: LD_VAR 0 7
55480: PUSH
55481: LD_INT 1
55483: ARRAY
55484: PUSH
55485: LD_INT 3
55487: ARRAY
55488: ST_TO_ADDR
// if InArea ( x , y , area ) then
55489: LD_VAR 0 5
55493: PPUSH
55494: LD_VAR 0 6
55498: PPUSH
55499: LD_VAR 0 2
55503: PPUSH
55504: CALL_OW 309
55508: IFFALSE 55519
// ComStop ( unit ) ;
55510: LD_VAR 0 1
55514: PPUSH
55515: CALL_OW 141
// end ;
55519: LD_VAR 0 4
55523: RET
// export function Abs ( value ) ; begin
55524: LD_INT 0
55526: PPUSH
// result := value ;
55527: LD_ADDR_VAR 0 2
55531: PUSH
55532: LD_VAR 0 1
55536: ST_TO_ADDR
// if value < 0 then
55537: LD_VAR 0 1
55541: PUSH
55542: LD_INT 0
55544: LESS
55545: IFFALSE 55562
// result := value * - 1 ;
55547: LD_ADDR_VAR 0 2
55551: PUSH
55552: LD_VAR 0 1
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: MUL
55561: ST_TO_ADDR
// end ;
55562: LD_VAR 0 2
55566: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
55567: LD_INT 0
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
// if not unit or not building then
55577: LD_VAR 0 1
55581: NOT
55582: PUSH
55583: LD_VAR 0 2
55587: NOT
55588: OR
55589: IFFALSE 55593
// exit ;
55591: GO 55819
// x := GetX ( building ) ;
55593: LD_ADDR_VAR 0 4
55597: PUSH
55598: LD_VAR 0 2
55602: PPUSH
55603: CALL_OW 250
55607: ST_TO_ADDR
// y := GetY ( building ) ;
55608: LD_ADDR_VAR 0 6
55612: PUSH
55613: LD_VAR 0 2
55617: PPUSH
55618: CALL_OW 251
55622: ST_TO_ADDR
// d := GetDir ( building ) ;
55623: LD_ADDR_VAR 0 8
55627: PUSH
55628: LD_VAR 0 2
55632: PPUSH
55633: CALL_OW 254
55637: ST_TO_ADDR
// r := 4 ;
55638: LD_ADDR_VAR 0 9
55642: PUSH
55643: LD_INT 4
55645: ST_TO_ADDR
// for i := 1 to 5 do
55646: LD_ADDR_VAR 0 10
55650: PUSH
55651: DOUBLE
55652: LD_INT 1
55654: DEC
55655: ST_TO_ADDR
55656: LD_INT 5
55658: PUSH
55659: FOR_TO
55660: IFFALSE 55817
// begin _x := ShiftX ( x , d , r + i ) ;
55662: LD_ADDR_VAR 0 5
55666: PUSH
55667: LD_VAR 0 4
55671: PPUSH
55672: LD_VAR 0 8
55676: PPUSH
55677: LD_VAR 0 9
55681: PUSH
55682: LD_VAR 0 10
55686: PLUS
55687: PPUSH
55688: CALL_OW 272
55692: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
55693: LD_ADDR_VAR 0 7
55697: PUSH
55698: LD_VAR 0 6
55702: PPUSH
55703: LD_VAR 0 8
55707: PPUSH
55708: LD_VAR 0 9
55712: PUSH
55713: LD_VAR 0 10
55717: PLUS
55718: PPUSH
55719: CALL_OW 273
55723: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
55724: LD_VAR 0 5
55728: PPUSH
55729: LD_VAR 0 7
55733: PPUSH
55734: CALL_OW 488
55738: PUSH
55739: LD_VAR 0 5
55743: PPUSH
55744: LD_VAR 0 7
55748: PPUSH
55749: CALL_OW 428
55753: PPUSH
55754: CALL_OW 247
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 2
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: IN
55769: NOT
55770: AND
55771: IFFALSE 55815
// begin ComMoveXY ( unit , _x , _y ) ;
55773: LD_VAR 0 1
55777: PPUSH
55778: LD_VAR 0 5
55782: PPUSH
55783: LD_VAR 0 7
55787: PPUSH
55788: CALL_OW 111
// result := [ _x , _y ] ;
55792: LD_ADDR_VAR 0 3
55796: PUSH
55797: LD_VAR 0 5
55801: PUSH
55802: LD_VAR 0 7
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: ST_TO_ADDR
// exit ;
55811: POP
55812: POP
55813: GO 55819
// end ; end ;
55815: GO 55659
55817: POP
55818: POP
// end ;
55819: LD_VAR 0 3
55823: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
55824: LD_INT 0
55826: PPUSH
55827: PPUSH
55828: PPUSH
// result := 0 ;
55829: LD_ADDR_VAR 0 3
55833: PUSH
55834: LD_INT 0
55836: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
55837: LD_VAR 0 1
55841: PUSH
55842: LD_INT 0
55844: LESS
55845: PUSH
55846: LD_VAR 0 1
55850: PUSH
55851: LD_INT 8
55853: GREATER
55854: OR
55855: PUSH
55856: LD_VAR 0 2
55860: PUSH
55861: LD_INT 0
55863: LESS
55864: OR
55865: PUSH
55866: LD_VAR 0 2
55870: PUSH
55871: LD_INT 8
55873: GREATER
55874: OR
55875: IFFALSE 55879
// exit ;
55877: GO 55954
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
55879: LD_ADDR_VAR 0 4
55883: PUSH
55884: LD_INT 22
55886: PUSH
55887: LD_VAR 0 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PPUSH
55896: CALL_OW 69
55900: PUSH
55901: FOR_IN
55902: IFFALSE 55952
// begin un := UnitShoot ( i ) ;
55904: LD_ADDR_VAR 0 5
55908: PUSH
55909: LD_VAR 0 4
55913: PPUSH
55914: CALL_OW 504
55918: ST_TO_ADDR
// if GetSide ( un ) = side1 then
55919: LD_VAR 0 5
55923: PPUSH
55924: CALL_OW 255
55928: PUSH
55929: LD_VAR 0 1
55933: EQUAL
55934: IFFALSE 55950
// begin result := un ;
55936: LD_ADDR_VAR 0 3
55940: PUSH
55941: LD_VAR 0 5
55945: ST_TO_ADDR
// exit ;
55946: POP
55947: POP
55948: GO 55954
// end ; end ;
55950: GO 55901
55952: POP
55953: POP
// end ;
55954: LD_VAR 0 3
55958: RET
// export function GetCargoBay ( units ) ; begin
55959: LD_INT 0
55961: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
55962: LD_ADDR_VAR 0 2
55966: PUSH
55967: LD_VAR 0 1
55971: PPUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 34
55977: PUSH
55978: LD_INT 12
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 34
55987: PUSH
55988: LD_INT 51
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 34
55997: PUSH
55998: LD_INT 32
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 34
56007: PUSH
56008: LD_INT 89
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: PPUSH
56022: CALL_OW 72
56026: ST_TO_ADDR
// end ;
56027: LD_VAR 0 2
56031: RET
// export function Negate ( value ) ; begin
56032: LD_INT 0
56034: PPUSH
// result := not value ;
56035: LD_ADDR_VAR 0 2
56039: PUSH
56040: LD_VAR 0 1
56044: NOT
56045: ST_TO_ADDR
// end ;
56046: LD_VAR 0 2
56050: RET
// export function Inc ( value ) ; begin
56051: LD_INT 0
56053: PPUSH
// result := value + 1 ;
56054: LD_ADDR_VAR 0 2
56058: PUSH
56059: LD_VAR 0 1
56063: PUSH
56064: LD_INT 1
56066: PLUS
56067: ST_TO_ADDR
// end ;
56068: LD_VAR 0 2
56072: RET
// export function Dec ( value ) ; begin
56073: LD_INT 0
56075: PPUSH
// result := value - 1 ;
56076: LD_ADDR_VAR 0 2
56080: PUSH
56081: LD_VAR 0 1
56085: PUSH
56086: LD_INT 1
56088: MINUS
56089: ST_TO_ADDR
// end ;
56090: LD_VAR 0 2
56094: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
56095: LD_INT 0
56097: PPUSH
56098: PPUSH
56099: PPUSH
56100: PPUSH
56101: PPUSH
56102: PPUSH
56103: PPUSH
56104: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
56105: LD_VAR 0 1
56109: PPUSH
56110: LD_VAR 0 2
56114: PPUSH
56115: CALL_OW 488
56119: NOT
56120: PUSH
56121: LD_VAR 0 3
56125: PPUSH
56126: LD_VAR 0 4
56130: PPUSH
56131: CALL_OW 488
56135: NOT
56136: OR
56137: IFFALSE 56150
// begin result := - 1 ;
56139: LD_ADDR_VAR 0 5
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: ST_TO_ADDR
// exit ;
56148: GO 56385
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
56150: LD_ADDR_VAR 0 12
56154: PUSH
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_VAR 0 2
56164: PPUSH
56165: LD_VAR 0 3
56169: PPUSH
56170: LD_VAR 0 4
56174: PPUSH
56175: CALL 55235 0 4
56179: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
56180: LD_ADDR_VAR 0 11
56184: PUSH
56185: LD_VAR 0 1
56189: PPUSH
56190: LD_VAR 0 2
56194: PPUSH
56195: LD_VAR 0 12
56199: PUSH
56200: LD_INT 1
56202: ARRAY
56203: PPUSH
56204: LD_VAR 0 12
56208: PUSH
56209: LD_INT 2
56211: ARRAY
56212: PPUSH
56213: CALL_OW 298
56217: ST_TO_ADDR
// distance := 9999 ;
56218: LD_ADDR_VAR 0 10
56222: PUSH
56223: LD_INT 9999
56225: ST_TO_ADDR
// for i := 0 to 5 do
56226: LD_ADDR_VAR 0 6
56230: PUSH
56231: DOUBLE
56232: LD_INT 0
56234: DEC
56235: ST_TO_ADDR
56236: LD_INT 5
56238: PUSH
56239: FOR_TO
56240: IFFALSE 56383
// begin _x := ShiftX ( x1 , i , centerDist ) ;
56242: LD_ADDR_VAR 0 7
56246: PUSH
56247: LD_VAR 0 1
56251: PPUSH
56252: LD_VAR 0 6
56256: PPUSH
56257: LD_VAR 0 11
56261: PPUSH
56262: CALL_OW 272
56266: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
56267: LD_ADDR_VAR 0 8
56271: PUSH
56272: LD_VAR 0 2
56276: PPUSH
56277: LD_VAR 0 6
56281: PPUSH
56282: LD_VAR 0 11
56286: PPUSH
56287: CALL_OW 273
56291: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56292: LD_VAR 0 7
56296: PPUSH
56297: LD_VAR 0 8
56301: PPUSH
56302: CALL_OW 488
56306: NOT
56307: IFFALSE 56311
// continue ;
56309: GO 56239
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
56311: LD_ADDR_VAR 0 9
56315: PUSH
56316: LD_VAR 0 12
56320: PUSH
56321: LD_INT 1
56323: ARRAY
56324: PPUSH
56325: LD_VAR 0 12
56329: PUSH
56330: LD_INT 2
56332: ARRAY
56333: PPUSH
56334: LD_VAR 0 7
56338: PPUSH
56339: LD_VAR 0 8
56343: PPUSH
56344: CALL_OW 298
56348: ST_TO_ADDR
// if tmp < distance then
56349: LD_VAR 0 9
56353: PUSH
56354: LD_VAR 0 10
56358: LESS
56359: IFFALSE 56381
// begin result := i ;
56361: LD_ADDR_VAR 0 5
56365: PUSH
56366: LD_VAR 0 6
56370: ST_TO_ADDR
// distance := tmp ;
56371: LD_ADDR_VAR 0 10
56375: PUSH
56376: LD_VAR 0 9
56380: ST_TO_ADDR
// end ; end ;
56381: GO 56239
56383: POP
56384: POP
// end ;
56385: LD_VAR 0 5
56389: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56390: LD_INT 0
56392: PPUSH
56393: PPUSH
// if not driver or not IsInUnit ( driver ) then
56394: LD_VAR 0 1
56398: NOT
56399: PUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: CALL_OW 310
56409: NOT
56410: OR
56411: IFFALSE 56415
// exit ;
56413: GO 56505
// vehicle := IsInUnit ( driver ) ;
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 310
56429: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56430: LD_VAR 0 1
56434: PPUSH
56435: LD_STRING \
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: LD_INT 0
56452: PUSH
56453: LD_INT 0
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: PUSH
56465: LD_STRING E
56467: PUSH
56468: LD_INT 0
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: LD_VAR 0 3
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PPUSH
56501: CALL_OW 446
// end ;
56505: LD_VAR 0 2
56509: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
56510: LD_INT 0
56512: PPUSH
56513: PPUSH
// if not driver or not IsInUnit ( driver ) then
56514: LD_VAR 0 1
56518: NOT
56519: PUSH
56520: LD_VAR 0 1
56524: PPUSH
56525: CALL_OW 310
56529: NOT
56530: OR
56531: IFFALSE 56535
// exit ;
56533: GO 56625
// vehicle := IsInUnit ( driver ) ;
56535: LD_ADDR_VAR 0 3
56539: PUSH
56540: LD_VAR 0 1
56544: PPUSH
56545: CALL_OW 310
56549: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
56550: LD_VAR 0 1
56554: PPUSH
56555: LD_STRING \
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: LD_INT 0
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: LD_INT 0
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: PUSH
56585: LD_STRING E
56587: PUSH
56588: LD_INT 0
56590: PUSH
56591: LD_INT 0
56593: PUSH
56594: LD_VAR 0 3
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: LD_INT 0
56604: PUSH
56605: LD_INT 0
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PPUSH
56621: CALL_OW 447
// end ;
56625: LD_VAR 0 2
56629: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
56630: LD_INT 0
56632: PPUSH
56633: PPUSH
56634: PPUSH
// tmp := [ ] ;
56635: LD_ADDR_VAR 0 5
56639: PUSH
56640: EMPTY
56641: ST_TO_ADDR
// for i in units do
56642: LD_ADDR_VAR 0 4
56646: PUSH
56647: LD_VAR 0 1
56651: PUSH
56652: FOR_IN
56653: IFFALSE 56691
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
56655: LD_ADDR_VAR 0 5
56659: PUSH
56660: LD_VAR 0 5
56664: PPUSH
56665: LD_VAR 0 5
56669: PUSH
56670: LD_INT 1
56672: PLUS
56673: PPUSH
56674: LD_VAR 0 4
56678: PPUSH
56679: CALL_OW 256
56683: PPUSH
56684: CALL_OW 2
56688: ST_TO_ADDR
56689: GO 56652
56691: POP
56692: POP
// if not tmp then
56693: LD_VAR 0 5
56697: NOT
56698: IFFALSE 56702
// exit ;
56700: GO 56750
// if asc then
56702: LD_VAR 0 2
56706: IFFALSE 56730
// result := SortListByListAsc ( units , tmp ) else
56708: LD_ADDR_VAR 0 3
56712: PUSH
56713: LD_VAR 0 1
56717: PPUSH
56718: LD_VAR 0 5
56722: PPUSH
56723: CALL_OW 76
56727: ST_TO_ADDR
56728: GO 56750
// result := SortListByListDesc ( units , tmp ) ;
56730: LD_ADDR_VAR 0 3
56734: PUSH
56735: LD_VAR 0 1
56739: PPUSH
56740: LD_VAR 0 5
56744: PPUSH
56745: CALL_OW 77
56749: ST_TO_ADDR
// end ;
56750: LD_VAR 0 3
56754: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
56755: LD_INT 0
56757: PPUSH
56758: PPUSH
// task := GetTaskList ( mech ) ;
56759: LD_ADDR_VAR 0 4
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 437
56773: ST_TO_ADDR
// if not task then
56774: LD_VAR 0 4
56778: NOT
56779: IFFALSE 56783
// exit ;
56781: GO 56825
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_VAR 0 4
56792: PUSH
56793: LD_INT 1
56795: ARRAY
56796: PUSH
56797: LD_INT 1
56799: ARRAY
56800: PUSH
56801: LD_STRING r
56803: EQUAL
56804: PUSH
56805: LD_VAR 0 4
56809: PUSH
56810: LD_INT 1
56812: ARRAY
56813: PUSH
56814: LD_INT 4
56816: ARRAY
56817: PUSH
56818: LD_VAR 0 2
56822: EQUAL
56823: AND
56824: ST_TO_ADDR
// end ;
56825: LD_VAR 0 3
56829: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
56830: LD_INT 0
56832: PPUSH
// SetDir ( unit , d ) ;
56833: LD_VAR 0 1
56837: PPUSH
56838: LD_VAR 0 4
56842: PPUSH
56843: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
56847: LD_VAR 0 1
56851: PPUSH
56852: LD_VAR 0 2
56856: PPUSH
56857: LD_VAR 0 3
56861: PPUSH
56862: LD_VAR 0 5
56866: PPUSH
56867: CALL_OW 48
// end ;
56871: LD_VAR 0 6
56875: RET
// export function ToNaturalNumber ( number ) ; begin
56876: LD_INT 0
56878: PPUSH
// result := number div 1 ;
56879: LD_ADDR_VAR 0 2
56883: PUSH
56884: LD_VAR 0 1
56888: PUSH
56889: LD_INT 1
56891: DIV
56892: ST_TO_ADDR
// if number < 0 then
56893: LD_VAR 0 1
56897: PUSH
56898: LD_INT 0
56900: LESS
56901: IFFALSE 56911
// result := 0 ;
56903: LD_ADDR_VAR 0 2
56907: PUSH
56908: LD_INT 0
56910: ST_TO_ADDR
// end ;
56911: LD_VAR 0 2
56915: RET
// export function SortByClass ( units , class ) ; var un ; begin
56916: LD_INT 0
56918: PPUSH
56919: PPUSH
// if not units or not class then
56920: LD_VAR 0 1
56924: NOT
56925: PUSH
56926: LD_VAR 0 2
56930: NOT
56931: OR
56932: IFFALSE 56936
// exit ;
56934: GO 57031
// result := [ ] ;
56936: LD_ADDR_VAR 0 3
56940: PUSH
56941: EMPTY
56942: ST_TO_ADDR
// for un in units do
56943: LD_ADDR_VAR 0 4
56947: PUSH
56948: LD_VAR 0 1
56952: PUSH
56953: FOR_IN
56954: IFFALSE 57029
// if GetClass ( un ) = class then
56956: LD_VAR 0 4
56960: PPUSH
56961: CALL_OW 257
56965: PUSH
56966: LD_VAR 0 2
56970: EQUAL
56971: IFFALSE 56998
// result := Insert ( result , 1 , un ) else
56973: LD_ADDR_VAR 0 3
56977: PUSH
56978: LD_VAR 0 3
56982: PPUSH
56983: LD_INT 1
56985: PPUSH
56986: LD_VAR 0 4
56990: PPUSH
56991: CALL_OW 2
56995: ST_TO_ADDR
56996: GO 57027
// result := Replace ( result , result + 1 , un ) ;
56998: LD_ADDR_VAR 0 3
57002: PUSH
57003: LD_VAR 0 3
57007: PPUSH
57008: LD_VAR 0 3
57012: PUSH
57013: LD_INT 1
57015: PLUS
57016: PPUSH
57017: LD_VAR 0 4
57021: PPUSH
57022: CALL_OW 1
57026: ST_TO_ADDR
57027: GO 56953
57029: POP
57030: POP
// end ;
57031: LD_VAR 0 3
57035: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
57036: LD_INT 0
57038: PPUSH
57039: PPUSH
57040: PPUSH
57041: PPUSH
57042: PPUSH
57043: PPUSH
57044: PPUSH
// result := [ ] ;
57045: LD_ADDR_VAR 0 4
57049: PUSH
57050: EMPTY
57051: ST_TO_ADDR
// if x - r < 0 then
57052: LD_VAR 0 1
57056: PUSH
57057: LD_VAR 0 3
57061: MINUS
57062: PUSH
57063: LD_INT 0
57065: LESS
57066: IFFALSE 57078
// min_x := 0 else
57068: LD_ADDR_VAR 0 8
57072: PUSH
57073: LD_INT 0
57075: ST_TO_ADDR
57076: GO 57094
// min_x := x - r ;
57078: LD_ADDR_VAR 0 8
57082: PUSH
57083: LD_VAR 0 1
57087: PUSH
57088: LD_VAR 0 3
57092: MINUS
57093: ST_TO_ADDR
// if y - r < 0 then
57094: LD_VAR 0 2
57098: PUSH
57099: LD_VAR 0 3
57103: MINUS
57104: PUSH
57105: LD_INT 0
57107: LESS
57108: IFFALSE 57120
// min_y := 0 else
57110: LD_ADDR_VAR 0 7
57114: PUSH
57115: LD_INT 0
57117: ST_TO_ADDR
57118: GO 57136
// min_y := y - r ;
57120: LD_ADDR_VAR 0 7
57124: PUSH
57125: LD_VAR 0 2
57129: PUSH
57130: LD_VAR 0 3
57134: MINUS
57135: ST_TO_ADDR
// max_x := x + r ;
57136: LD_ADDR_VAR 0 9
57140: PUSH
57141: LD_VAR 0 1
57145: PUSH
57146: LD_VAR 0 3
57150: PLUS
57151: ST_TO_ADDR
// max_y := y + r ;
57152: LD_ADDR_VAR 0 10
57156: PUSH
57157: LD_VAR 0 2
57161: PUSH
57162: LD_VAR 0 3
57166: PLUS
57167: ST_TO_ADDR
// for _x = min_x to max_x do
57168: LD_ADDR_VAR 0 5
57172: PUSH
57173: DOUBLE
57174: LD_VAR 0 8
57178: DEC
57179: ST_TO_ADDR
57180: LD_VAR 0 9
57184: PUSH
57185: FOR_TO
57186: IFFALSE 57287
// for _y = min_y to max_y do
57188: LD_ADDR_VAR 0 6
57192: PUSH
57193: DOUBLE
57194: LD_VAR 0 7
57198: DEC
57199: ST_TO_ADDR
57200: LD_VAR 0 10
57204: PUSH
57205: FOR_TO
57206: IFFALSE 57283
// begin if not ValidHex ( _x , _y ) then
57208: LD_VAR 0 5
57212: PPUSH
57213: LD_VAR 0 6
57217: PPUSH
57218: CALL_OW 488
57222: NOT
57223: IFFALSE 57227
// continue ;
57225: GO 57205
// if GetResourceTypeXY ( _x , _y ) then
57227: LD_VAR 0 5
57231: PPUSH
57232: LD_VAR 0 6
57236: PPUSH
57237: CALL_OW 283
57241: IFFALSE 57281
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
57243: LD_ADDR_VAR 0 4
57247: PUSH
57248: LD_VAR 0 4
57252: PPUSH
57253: LD_VAR 0 4
57257: PUSH
57258: LD_INT 1
57260: PLUS
57261: PPUSH
57262: LD_VAR 0 5
57266: PUSH
57267: LD_VAR 0 6
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: PPUSH
57276: CALL_OW 1
57280: ST_TO_ADDR
// end ;
57281: GO 57205
57283: POP
57284: POP
57285: GO 57185
57287: POP
57288: POP
// end ;
57289: LD_VAR 0 4
57293: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
57294: LD_INT 0
57296: PPUSH
57297: PPUSH
57298: PPUSH
57299: PPUSH
57300: PPUSH
57301: PPUSH
57302: PPUSH
57303: PPUSH
// if not units then
57304: LD_VAR 0 1
57308: NOT
57309: IFFALSE 57313
// exit ;
57311: GO 57837
// result := UnitFilter ( units , [ f_ok ] ) ;
57313: LD_ADDR_VAR 0 3
57317: PUSH
57318: LD_VAR 0 1
57322: PPUSH
57323: LD_INT 50
57325: PUSH
57326: EMPTY
57327: LIST
57328: PPUSH
57329: CALL_OW 72
57333: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
57334: LD_ADDR_VAR 0 8
57338: PUSH
57339: LD_VAR 0 1
57343: PUSH
57344: LD_INT 1
57346: ARRAY
57347: PPUSH
57348: CALL_OW 255
57352: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
57353: LD_ADDR_VAR 0 10
57357: PUSH
57358: LD_INT 29
57360: PUSH
57361: LD_INT 91
57363: PUSH
57364: LD_INT 49
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: LIST
57371: ST_TO_ADDR
// if not result then
57372: LD_VAR 0 3
57376: NOT
57377: IFFALSE 57381
// exit ;
57379: GO 57837
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
57381: LD_ADDR_VAR 0 5
57385: PUSH
57386: LD_INT 81
57388: PUSH
57389: LD_VAR 0 8
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PPUSH
57398: CALL_OW 69
57402: ST_TO_ADDR
// for i in result do
57403: LD_ADDR_VAR 0 4
57407: PUSH
57408: LD_VAR 0 3
57412: PUSH
57413: FOR_IN
57414: IFFALSE 57835
// begin tag := GetTag ( i ) + 1 ;
57416: LD_ADDR_VAR 0 9
57420: PUSH
57421: LD_VAR 0 4
57425: PPUSH
57426: CALL_OW 110
57430: PUSH
57431: LD_INT 1
57433: PLUS
57434: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
57435: LD_ADDR_VAR 0 7
57439: PUSH
57440: LD_VAR 0 4
57444: PPUSH
57445: CALL_OW 250
57449: PPUSH
57450: LD_VAR 0 4
57454: PPUSH
57455: CALL_OW 251
57459: PPUSH
57460: LD_INT 6
57462: PPUSH
57463: CALL 57036 0 3
57467: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
57468: LD_VAR 0 4
57472: PPUSH
57473: CALL_OW 247
57477: PUSH
57478: LD_INT 2
57480: EQUAL
57481: PUSH
57482: LD_VAR 0 7
57486: AND
57487: PUSH
57488: LD_VAR 0 4
57492: PPUSH
57493: CALL_OW 264
57497: PUSH
57498: LD_VAR 0 10
57502: IN
57503: NOT
57504: AND
57505: IFFALSE 57544
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
57507: LD_VAR 0 4
57511: PPUSH
57512: LD_VAR 0 7
57516: PUSH
57517: LD_INT 1
57519: ARRAY
57520: PUSH
57521: LD_INT 1
57523: ARRAY
57524: PPUSH
57525: LD_VAR 0 7
57529: PUSH
57530: LD_INT 1
57532: ARRAY
57533: PUSH
57534: LD_INT 2
57536: ARRAY
57537: PPUSH
57538: CALL_OW 116
57542: GO 57833
// if path > tag then
57544: LD_VAR 0 2
57548: PUSH
57549: LD_VAR 0 9
57553: GREATER
57554: IFFALSE 57762
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
57556: LD_ADDR_VAR 0 6
57560: PUSH
57561: LD_VAR 0 5
57565: PPUSH
57566: LD_INT 91
57568: PUSH
57569: LD_VAR 0 4
57573: PUSH
57574: LD_INT 8
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: LIST
57581: PPUSH
57582: CALL_OW 72
57586: ST_TO_ADDR
// if nearEnemy then
57587: LD_VAR 0 6
57591: IFFALSE 57660
// begin if GetWeapon ( i ) = ru_time_lapser then
57593: LD_VAR 0 4
57597: PPUSH
57598: CALL_OW 264
57602: PUSH
57603: LD_INT 49
57605: EQUAL
57606: IFFALSE 57634
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
57608: LD_VAR 0 4
57612: PPUSH
57613: LD_VAR 0 6
57617: PPUSH
57618: LD_VAR 0 4
57622: PPUSH
57623: CALL_OW 74
57627: PPUSH
57628: CALL_OW 112
57632: GO 57658
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
57634: LD_VAR 0 4
57638: PPUSH
57639: LD_VAR 0 6
57643: PPUSH
57644: LD_VAR 0 4
57648: PPUSH
57649: CALL_OW 74
57653: PPUSH
57654: CALL 58762 0 2
// end else
57658: GO 57760
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
57660: LD_VAR 0 4
57664: PPUSH
57665: LD_VAR 0 2
57669: PUSH
57670: LD_VAR 0 9
57674: ARRAY
57675: PUSH
57676: LD_INT 1
57678: ARRAY
57679: PPUSH
57680: LD_VAR 0 2
57684: PUSH
57685: LD_VAR 0 9
57689: ARRAY
57690: PUSH
57691: LD_INT 2
57693: ARRAY
57694: PPUSH
57695: CALL_OW 297
57699: PUSH
57700: LD_INT 6
57702: GREATER
57703: IFFALSE 57746
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
57705: LD_VAR 0 4
57709: PPUSH
57710: LD_VAR 0 2
57714: PUSH
57715: LD_VAR 0 9
57719: ARRAY
57720: PUSH
57721: LD_INT 1
57723: ARRAY
57724: PPUSH
57725: LD_VAR 0 2
57729: PUSH
57730: LD_VAR 0 9
57734: ARRAY
57735: PUSH
57736: LD_INT 2
57738: ARRAY
57739: PPUSH
57740: CALL_OW 114
57744: GO 57760
// SetTag ( i , tag ) ;
57746: LD_VAR 0 4
57750: PPUSH
57751: LD_VAR 0 9
57755: PPUSH
57756: CALL_OW 109
// end else
57760: GO 57833
// if enemy then
57762: LD_VAR 0 5
57766: IFFALSE 57833
// begin if GetWeapon ( i ) = ru_time_lapser then
57768: LD_VAR 0 4
57772: PPUSH
57773: CALL_OW 264
57777: PUSH
57778: LD_INT 49
57780: EQUAL
57781: IFFALSE 57809
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
57783: LD_VAR 0 4
57787: PPUSH
57788: LD_VAR 0 5
57792: PPUSH
57793: LD_VAR 0 4
57797: PPUSH
57798: CALL_OW 74
57802: PPUSH
57803: CALL_OW 112
57807: GO 57833
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
57809: LD_VAR 0 4
57813: PPUSH
57814: LD_VAR 0 5
57818: PPUSH
57819: LD_VAR 0 4
57823: PPUSH
57824: CALL_OW 74
57828: PPUSH
57829: CALL 58762 0 2
// end ; end ;
57833: GO 57413
57835: POP
57836: POP
// end ;
57837: LD_VAR 0 3
57841: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
57842: LD_INT 0
57844: PPUSH
57845: PPUSH
57846: PPUSH
// if not unit or IsInUnit ( unit ) then
57847: LD_VAR 0 1
57851: NOT
57852: PUSH
57853: LD_VAR 0 1
57857: PPUSH
57858: CALL_OW 310
57862: OR
57863: IFFALSE 57867
// exit ;
57865: GO 57958
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
57867: LD_ADDR_VAR 0 4
57871: PUSH
57872: LD_VAR 0 1
57876: PPUSH
57877: CALL_OW 250
57881: PPUSH
57882: LD_VAR 0 2
57886: PPUSH
57887: LD_INT 1
57889: PPUSH
57890: CALL_OW 272
57894: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
57895: LD_ADDR_VAR 0 5
57899: PUSH
57900: LD_VAR 0 1
57904: PPUSH
57905: CALL_OW 251
57909: PPUSH
57910: LD_VAR 0 2
57914: PPUSH
57915: LD_INT 1
57917: PPUSH
57918: CALL_OW 273
57922: ST_TO_ADDR
// if ValidHex ( x , y ) then
57923: LD_VAR 0 4
57927: PPUSH
57928: LD_VAR 0 5
57932: PPUSH
57933: CALL_OW 488
57937: IFFALSE 57958
// ComTurnXY ( unit , x , y ) ;
57939: LD_VAR 0 1
57943: PPUSH
57944: LD_VAR 0 4
57948: PPUSH
57949: LD_VAR 0 5
57953: PPUSH
57954: CALL_OW 118
// end ;
57958: LD_VAR 0 3
57962: RET
// export function SeeUnits ( side , units ) ; var i ; begin
57963: LD_INT 0
57965: PPUSH
57966: PPUSH
// result := false ;
57967: LD_ADDR_VAR 0 3
57971: PUSH
57972: LD_INT 0
57974: ST_TO_ADDR
// if not units then
57975: LD_VAR 0 2
57979: NOT
57980: IFFALSE 57984
// exit ;
57982: GO 58029
// for i in units do
57984: LD_ADDR_VAR 0 4
57988: PUSH
57989: LD_VAR 0 2
57993: PUSH
57994: FOR_IN
57995: IFFALSE 58027
// if See ( side , i ) then
57997: LD_VAR 0 1
58001: PPUSH
58002: LD_VAR 0 4
58006: PPUSH
58007: CALL_OW 292
58011: IFFALSE 58025
// begin result := true ;
58013: LD_ADDR_VAR 0 3
58017: PUSH
58018: LD_INT 1
58020: ST_TO_ADDR
// exit ;
58021: POP
58022: POP
58023: GO 58029
// end ;
58025: GO 57994
58027: POP
58028: POP
// end ;
58029: LD_VAR 0 3
58033: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
58034: LD_INT 0
58036: PPUSH
58037: PPUSH
58038: PPUSH
58039: PPUSH
// if not unit or not points then
58040: LD_VAR 0 1
58044: NOT
58045: PUSH
58046: LD_VAR 0 2
58050: NOT
58051: OR
58052: IFFALSE 58056
// exit ;
58054: GO 58146
// dist := 99999 ;
58056: LD_ADDR_VAR 0 5
58060: PUSH
58061: LD_INT 99999
58063: ST_TO_ADDR
// for i in points do
58064: LD_ADDR_VAR 0 4
58068: PUSH
58069: LD_VAR 0 2
58073: PUSH
58074: FOR_IN
58075: IFFALSE 58144
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
58077: LD_ADDR_VAR 0 6
58081: PUSH
58082: LD_VAR 0 1
58086: PPUSH
58087: LD_VAR 0 4
58091: PUSH
58092: LD_INT 1
58094: ARRAY
58095: PPUSH
58096: LD_VAR 0 4
58100: PUSH
58101: LD_INT 2
58103: ARRAY
58104: PPUSH
58105: CALL_OW 297
58109: ST_TO_ADDR
// if tmpDist < dist then
58110: LD_VAR 0 6
58114: PUSH
58115: LD_VAR 0 5
58119: LESS
58120: IFFALSE 58142
// begin result := i ;
58122: LD_ADDR_VAR 0 3
58126: PUSH
58127: LD_VAR 0 4
58131: ST_TO_ADDR
// dist := tmpDist ;
58132: LD_ADDR_VAR 0 5
58136: PUSH
58137: LD_VAR 0 6
58141: ST_TO_ADDR
// end ; end ;
58142: GO 58074
58144: POP
58145: POP
// end ;
58146: LD_VAR 0 3
58150: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
58151: LD_INT 0
58153: PPUSH
// uc_side := side ;
58154: LD_ADDR_OWVAR 20
58158: PUSH
58159: LD_VAR 0 1
58163: ST_TO_ADDR
// uc_nation := 3 ;
58164: LD_ADDR_OWVAR 21
58168: PUSH
58169: LD_INT 3
58171: ST_TO_ADDR
// vc_chassis := 25 ;
58172: LD_ADDR_OWVAR 37
58176: PUSH
58177: LD_INT 25
58179: ST_TO_ADDR
// vc_engine := engine_siberite ;
58180: LD_ADDR_OWVAR 39
58184: PUSH
58185: LD_INT 3
58187: ST_TO_ADDR
// vc_control := control_computer ;
58188: LD_ADDR_OWVAR 38
58192: PUSH
58193: LD_INT 3
58195: ST_TO_ADDR
// vc_weapon := 59 ;
58196: LD_ADDR_OWVAR 40
58200: PUSH
58201: LD_INT 59
58203: ST_TO_ADDR
// result := CreateVehicle ;
58204: LD_ADDR_VAR 0 5
58208: PUSH
58209: CALL_OW 45
58213: ST_TO_ADDR
// SetDir ( result , d ) ;
58214: LD_VAR 0 5
58218: PPUSH
58219: LD_VAR 0 4
58223: PPUSH
58224: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
58228: LD_VAR 0 5
58232: PPUSH
58233: LD_VAR 0 2
58237: PPUSH
58238: LD_VAR 0 3
58242: PPUSH
58243: LD_INT 0
58245: PPUSH
58246: CALL_OW 48
// end ;
58250: LD_VAR 0 5
58254: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
58255: LD_INT 0
58257: PPUSH
58258: PPUSH
58259: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
58260: LD_ADDR_VAR 0 2
58264: PUSH
58265: LD_INT 0
58267: PUSH
58268: LD_INT 0
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
58283: LD_VAR 0 1
58287: NOT
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: CALL_OW 264
58298: PUSH
58299: LD_INT 12
58301: PUSH
58302: LD_INT 51
58304: PUSH
58305: LD_INT 32
58307: PUSH
58308: LD_INT 89
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: IN
58317: NOT
58318: OR
58319: IFFALSE 58323
// exit ;
58321: GO 58421
// for i := 1 to 3 do
58323: LD_ADDR_VAR 0 3
58327: PUSH
58328: DOUBLE
58329: LD_INT 1
58331: DEC
58332: ST_TO_ADDR
58333: LD_INT 3
58335: PUSH
58336: FOR_TO
58337: IFFALSE 58419
// begin tmp := GetCargo ( cargo , i ) ;
58339: LD_ADDR_VAR 0 4
58343: PUSH
58344: LD_VAR 0 1
58348: PPUSH
58349: LD_VAR 0 3
58353: PPUSH
58354: CALL_OW 289
58358: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
58359: LD_ADDR_VAR 0 2
58363: PUSH
58364: LD_VAR 0 2
58368: PPUSH
58369: LD_VAR 0 3
58373: PPUSH
58374: LD_VAR 0 4
58378: PPUSH
58379: CALL_OW 1
58383: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
58384: LD_ADDR_VAR 0 2
58388: PUSH
58389: LD_VAR 0 2
58393: PPUSH
58394: LD_INT 4
58396: PPUSH
58397: LD_VAR 0 2
58401: PUSH
58402: LD_INT 4
58404: ARRAY
58405: PUSH
58406: LD_VAR 0 4
58410: PLUS
58411: PPUSH
58412: CALL_OW 1
58416: ST_TO_ADDR
// end ;
58417: GO 58336
58419: POP
58420: POP
// end ;
58421: LD_VAR 0 2
58425: RET
// export function Length ( array ) ; begin
58426: LD_INT 0
58428: PPUSH
// result := array + 0 ;
58429: LD_ADDR_VAR 0 2
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_INT 0
58441: PLUS
58442: ST_TO_ADDR
// end ;
58443: LD_VAR 0 2
58447: RET
// export function PrepareArray ( array ) ; begin
58448: LD_INT 0
58450: PPUSH
// result := array diff 0 ;
58451: LD_ADDR_VAR 0 2
58455: PUSH
58456: LD_VAR 0 1
58460: PUSH
58461: LD_INT 0
58463: DIFF
58464: ST_TO_ADDR
// if not result [ 1 ] then
58465: LD_VAR 0 2
58469: PUSH
58470: LD_INT 1
58472: ARRAY
58473: NOT
58474: IFFALSE 58494
// result := Delete ( result , 1 ) ;
58476: LD_ADDR_VAR 0 2
58480: PUSH
58481: LD_VAR 0 2
58485: PPUSH
58486: LD_INT 1
58488: PPUSH
58489: CALL_OW 3
58493: ST_TO_ADDR
// end ;
58494: LD_VAR 0 2
58498: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
58503: PPUSH
58504: PPUSH
// sibRocketRange := 25 ;
58505: LD_ADDR_VAR 0 6
58509: PUSH
58510: LD_INT 25
58512: ST_TO_ADDR
// result := false ;
58513: LD_ADDR_VAR 0 4
58517: PUSH
58518: LD_INT 0
58520: ST_TO_ADDR
// for i := 0 to 5 do
58521: LD_ADDR_VAR 0 5
58525: PUSH
58526: DOUBLE
58527: LD_INT 0
58529: DEC
58530: ST_TO_ADDR
58531: LD_INT 5
58533: PUSH
58534: FOR_TO
58535: IFFALSE 58602
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
58537: LD_VAR 0 1
58541: PPUSH
58542: LD_VAR 0 5
58546: PPUSH
58547: LD_VAR 0 6
58551: PPUSH
58552: CALL_OW 272
58556: PPUSH
58557: LD_VAR 0 2
58561: PPUSH
58562: LD_VAR 0 5
58566: PPUSH
58567: LD_VAR 0 6
58571: PPUSH
58572: CALL_OW 273
58576: PPUSH
58577: LD_VAR 0 3
58581: PPUSH
58582: CALL_OW 309
58586: IFFALSE 58600
// begin result := true ;
58588: LD_ADDR_VAR 0 4
58592: PUSH
58593: LD_INT 1
58595: ST_TO_ADDR
// exit ;
58596: POP
58597: POP
58598: GO 58604
// end ;
58600: GO 58534
58602: POP
58603: POP
// end ;
58604: LD_VAR 0 4
58608: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
58609: LD_INT 0
58611: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
58612: LD_VAR 0 1
58616: PPUSH
58617: LD_VAR 0 2
58621: PPUSH
58622: LD_INT 0
58624: PPUSH
58625: LD_INT 0
58627: PPUSH
58628: LD_INT 1
58630: PPUSH
58631: LD_INT 0
58633: PPUSH
58634: CALL_OW 587
// end ;
58638: LD_VAR 0 3
58642: RET
// export function CenterOnNow ( unit ) ; begin
58643: LD_INT 0
58645: PPUSH
// result := IsInUnit ( unit ) ;
58646: LD_ADDR_VAR 0 2
58650: PUSH
58651: LD_VAR 0 1
58655: PPUSH
58656: CALL_OW 310
58660: ST_TO_ADDR
// if not result then
58661: LD_VAR 0 2
58665: NOT
58666: IFFALSE 58678
// result := unit ;
58668: LD_ADDR_VAR 0 2
58672: PUSH
58673: LD_VAR 0 1
58677: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
58678: LD_VAR 0 1
58682: PPUSH
58683: CALL_OW 87
// end ;
58687: LD_VAR 0 2
58691: RET
// export function ComMoveHex ( unit , hex ) ; begin
58692: LD_INT 0
58694: PPUSH
// if not hex then
58695: LD_VAR 0 2
58699: NOT
58700: IFFALSE 58704
// exit ;
58702: GO 58757
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
58704: LD_VAR 0 2
58708: PUSH
58709: LD_INT 1
58711: ARRAY
58712: PPUSH
58713: LD_VAR 0 2
58717: PUSH
58718: LD_INT 2
58720: ARRAY
58721: PPUSH
58722: CALL_OW 428
58726: IFFALSE 58730
// exit ;
58728: GO 58757
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
58730: LD_VAR 0 1
58734: PPUSH
58735: LD_VAR 0 2
58739: PUSH
58740: LD_INT 1
58742: ARRAY
58743: PPUSH
58744: LD_VAR 0 2
58748: PUSH
58749: LD_INT 2
58751: ARRAY
58752: PPUSH
58753: CALL_OW 111
// end ;
58757: LD_VAR 0 3
58761: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
58762: LD_INT 0
58764: PPUSH
58765: PPUSH
58766: PPUSH
// if not unit or not enemy then
58767: LD_VAR 0 1
58771: NOT
58772: PUSH
58773: LD_VAR 0 2
58777: NOT
58778: OR
58779: IFFALSE 58783
// exit ;
58781: GO 58907
// x := GetX ( enemy ) ;
58783: LD_ADDR_VAR 0 4
58787: PUSH
58788: LD_VAR 0 2
58792: PPUSH
58793: CALL_OW 250
58797: ST_TO_ADDR
// y := GetY ( enemy ) ;
58798: LD_ADDR_VAR 0 5
58802: PUSH
58803: LD_VAR 0 2
58807: PPUSH
58808: CALL_OW 251
58812: ST_TO_ADDR
// if ValidHex ( x , y ) then
58813: LD_VAR 0 4
58817: PPUSH
58818: LD_VAR 0 5
58822: PPUSH
58823: CALL_OW 488
58827: IFFALSE 58907
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
58829: LD_VAR 0 2
58833: PPUSH
58834: CALL_OW 247
58838: PUSH
58839: LD_INT 3
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: IN
58849: PUSH
58850: LD_VAR 0 1
58854: PPUSH
58855: CALL_OW 255
58859: PPUSH
58860: LD_VAR 0 2
58864: PPUSH
58865: CALL_OW 292
58869: OR
58870: IFFALSE 58888
// ComAttackUnit ( unit , enemy ) else
58872: LD_VAR 0 1
58876: PPUSH
58877: LD_VAR 0 2
58881: PPUSH
58882: CALL_OW 115
58886: GO 58907
// ComAgressiveMove ( unit , x , y ) ;
58888: LD_VAR 0 1
58892: PPUSH
58893: LD_VAR 0 4
58897: PPUSH
58898: LD_VAR 0 5
58902: PPUSH
58903: CALL_OW 114
// end ;
58907: LD_VAR 0 3
58911: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
58912: LD_INT 0
58914: PPUSH
58915: PPUSH
58916: PPUSH
// list := AreaToList ( area , 0 ) ;
58917: LD_ADDR_VAR 0 5
58921: PUSH
58922: LD_VAR 0 1
58926: PPUSH
58927: LD_INT 0
58929: PPUSH
58930: CALL_OW 517
58934: ST_TO_ADDR
// if not list then
58935: LD_VAR 0 5
58939: NOT
58940: IFFALSE 58944
// exit ;
58942: GO 59074
// if all then
58944: LD_VAR 0 2
58948: IFFALSE 59036
// begin for i := 1 to list [ 1 ] do
58950: LD_ADDR_VAR 0 4
58954: PUSH
58955: DOUBLE
58956: LD_INT 1
58958: DEC
58959: ST_TO_ADDR
58960: LD_VAR 0 5
58964: PUSH
58965: LD_INT 1
58967: ARRAY
58968: PUSH
58969: FOR_TO
58970: IFFALSE 59032
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
58972: LD_ADDR_VAR 0 3
58976: PUSH
58977: LD_VAR 0 3
58981: PPUSH
58982: LD_VAR 0 3
58986: PUSH
58987: LD_INT 1
58989: PLUS
58990: PPUSH
58991: LD_VAR 0 5
58995: PUSH
58996: LD_INT 1
58998: ARRAY
58999: PUSH
59000: LD_VAR 0 4
59004: ARRAY
59005: PUSH
59006: LD_VAR 0 5
59010: PUSH
59011: LD_INT 2
59013: ARRAY
59014: PUSH
59015: LD_VAR 0 4
59019: ARRAY
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PPUSH
59025: CALL_OW 1
59029: ST_TO_ADDR
59030: GO 58969
59032: POP
59033: POP
// exit ;
59034: GO 59074
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
59036: LD_ADDR_VAR 0 3
59040: PUSH
59041: LD_VAR 0 5
59045: PUSH
59046: LD_INT 1
59048: ARRAY
59049: PUSH
59050: LD_INT 1
59052: ARRAY
59053: PUSH
59054: LD_VAR 0 5
59058: PUSH
59059: LD_INT 2
59061: ARRAY
59062: PUSH
59063: LD_INT 1
59065: ARRAY
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: EMPTY
59072: LIST
59073: ST_TO_ADDR
// end ;
59074: LD_VAR 0 3
59078: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
59079: LD_INT 0
59081: PPUSH
59082: PPUSH
// list := AreaToList ( area , 0 ) ;
59083: LD_ADDR_VAR 0 4
59087: PUSH
59088: LD_VAR 0 1
59092: PPUSH
59093: LD_INT 0
59095: PPUSH
59096: CALL_OW 517
59100: ST_TO_ADDR
// if not list then
59101: LD_VAR 0 4
59105: NOT
59106: IFFALSE 59110
// exit ;
59108: GO 59151
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
59110: LD_ADDR_VAR 0 3
59114: PUSH
59115: LD_VAR 0 4
59119: PUSH
59120: LD_INT 1
59122: ARRAY
59123: PUSH
59124: LD_INT 1
59126: ARRAY
59127: PUSH
59128: LD_VAR 0 4
59132: PUSH
59133: LD_INT 2
59135: ARRAY
59136: PUSH
59137: LD_INT 1
59139: ARRAY
59140: PUSH
59141: LD_VAR 0 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: ST_TO_ADDR
// end ;
59151: LD_VAR 0 3
59155: RET
// export function First ( array ) ; begin
59156: LD_INT 0
59158: PPUSH
// if not array then
59159: LD_VAR 0 1
59163: NOT
59164: IFFALSE 59168
// exit ;
59166: GO 59182
// result := array [ 1 ] ;
59168: LD_ADDR_VAR 0 2
59172: PUSH
59173: LD_VAR 0 1
59177: PUSH
59178: LD_INT 1
59180: ARRAY
59181: ST_TO_ADDR
// end ;
59182: LD_VAR 0 2
59186: RET
// export function Last ( array ) ; begin
59187: LD_INT 0
59189: PPUSH
// if not array then
59190: LD_VAR 0 1
59194: NOT
59195: IFFALSE 59199
// exit ;
59197: GO 59215
// result := array [ array ] ;
59199: LD_ADDR_VAR 0 2
59203: PUSH
59204: LD_VAR 0 1
59208: PUSH
59209: LD_VAR 0 1
59213: ARRAY
59214: ST_TO_ADDR
// end ;
59215: LD_VAR 0 2
59219: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
59220: LD_INT 0
59222: PPUSH
59223: PPUSH
// result := [ ] ;
59224: LD_ADDR_VAR 0 5
59228: PUSH
59229: EMPTY
59230: ST_TO_ADDR
// if not array then
59231: LD_VAR 0 1
59235: NOT
59236: IFFALSE 59240
// exit ;
59238: GO 59352
// for i := 1 to array do
59240: LD_ADDR_VAR 0 6
59244: PUSH
59245: DOUBLE
59246: LD_INT 1
59248: DEC
59249: ST_TO_ADDR
59250: LD_VAR 0 1
59254: PUSH
59255: FOR_TO
59256: IFFALSE 59350
// if array [ i ] [ index ] = value then
59258: LD_VAR 0 1
59262: PUSH
59263: LD_VAR 0 6
59267: ARRAY
59268: PUSH
59269: LD_VAR 0 2
59273: ARRAY
59274: PUSH
59275: LD_VAR 0 3
59279: EQUAL
59280: IFFALSE 59348
// begin if indexColumn then
59282: LD_VAR 0 4
59286: IFFALSE 59322
// result := Join ( result , array [ i ] [ indexColumn ] ) else
59288: LD_ADDR_VAR 0 5
59292: PUSH
59293: LD_VAR 0 5
59297: PPUSH
59298: LD_VAR 0 1
59302: PUSH
59303: LD_VAR 0 6
59307: ARRAY
59308: PUSH
59309: LD_VAR 0 4
59313: ARRAY
59314: PPUSH
59315: CALL 54690 0 2
59319: ST_TO_ADDR
59320: GO 59348
// result := Join ( result , array [ i ] ) ;
59322: LD_ADDR_VAR 0 5
59326: PUSH
59327: LD_VAR 0 5
59331: PPUSH
59332: LD_VAR 0 1
59336: PUSH
59337: LD_VAR 0 6
59341: ARRAY
59342: PPUSH
59343: CALL 54690 0 2
59347: ST_TO_ADDR
// end ;
59348: GO 59255
59350: POP
59351: POP
// end ;
59352: LD_VAR 0 5
59356: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
59357: LD_INT 0
59359: PPUSH
59360: PPUSH
59361: PPUSH
// if btype = b_depot then
59362: LD_VAR 0 2
59366: PUSH
59367: LD_INT 0
59369: EQUAL
59370: IFFALSE 59382
// begin result := true ;
59372: LD_ADDR_VAR 0 3
59376: PUSH
59377: LD_INT 1
59379: ST_TO_ADDR
// exit ;
59380: GO 59498
// end ; pom := GetBase ( depot ) ;
59382: LD_ADDR_VAR 0 4
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: CALL_OW 274
59396: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59397: LD_ADDR_VAR 0 5
59401: PUSH
59402: LD_VAR 0 2
59406: PPUSH
59407: LD_VAR 0 1
59411: PPUSH
59412: CALL_OW 248
59416: PPUSH
59417: CALL_OW 450
59421: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
59422: LD_ADDR_VAR 0 3
59426: PUSH
59427: LD_VAR 0 4
59431: PPUSH
59432: LD_INT 1
59434: PPUSH
59435: CALL_OW 275
59439: PUSH
59440: LD_VAR 0 5
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: GREATEREQUAL
59449: PUSH
59450: LD_VAR 0 4
59454: PPUSH
59455: LD_INT 2
59457: PPUSH
59458: CALL_OW 275
59462: PUSH
59463: LD_VAR 0 5
59467: PUSH
59468: LD_INT 2
59470: ARRAY
59471: GREATEREQUAL
59472: AND
59473: PUSH
59474: LD_VAR 0 4
59478: PPUSH
59479: LD_INT 3
59481: PPUSH
59482: CALL_OW 275
59486: PUSH
59487: LD_VAR 0 5
59491: PUSH
59492: LD_INT 3
59494: ARRAY
59495: GREATEREQUAL
59496: AND
59497: ST_TO_ADDR
// end ;
59498: LD_VAR 0 3
59502: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
59503: LD_INT 0
59505: PPUSH
// if not vehicles or not parkingPoint then
59506: LD_VAR 0 1
59510: NOT
59511: PUSH
59512: LD_VAR 0 2
59516: NOT
59517: OR
59518: IFFALSE 59522
// exit ;
59520: GO 59620
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
59522: LD_ADDR_VAR 0 1
59526: PUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: LD_INT 50
59534: PUSH
59535: EMPTY
59536: LIST
59537: PUSH
59538: LD_INT 3
59540: PUSH
59541: LD_INT 92
59543: PUSH
59544: LD_VAR 0 2
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_VAR 0 2
59557: PUSH
59558: LD_INT 2
59560: ARRAY
59561: PUSH
59562: LD_INT 8
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PPUSH
59579: CALL_OW 72
59583: ST_TO_ADDR
// if not vehicles then
59584: LD_VAR 0 1
59588: NOT
59589: IFFALSE 59593
// exit ;
59591: GO 59620
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
59593: LD_VAR 0 1
59597: PPUSH
59598: LD_VAR 0 2
59602: PUSH
59603: LD_INT 1
59605: ARRAY
59606: PPUSH
59607: LD_VAR 0 2
59611: PUSH
59612: LD_INT 2
59614: ARRAY
59615: PPUSH
59616: CALL_OW 111
// end ;
59620: LD_VAR 0 3
59624: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
59625: LD_INT 0
59627: PPUSH
59628: PPUSH
59629: PPUSH
// if not side or not area then
59630: LD_VAR 0 1
59634: NOT
59635: PUSH
59636: LD_VAR 0 2
59640: NOT
59641: OR
59642: IFFALSE 59646
// exit ;
59644: GO 59765
// tmp := AreaToList ( area , 0 ) ;
59646: LD_ADDR_VAR 0 5
59650: PUSH
59651: LD_VAR 0 2
59655: PPUSH
59656: LD_INT 0
59658: PPUSH
59659: CALL_OW 517
59663: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
59664: LD_ADDR_VAR 0 4
59668: PUSH
59669: DOUBLE
59670: LD_INT 1
59672: DEC
59673: ST_TO_ADDR
59674: LD_VAR 0 5
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: FOR_TO
59684: IFFALSE 59763
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
59686: LD_VAR 0 5
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PUSH
59695: LD_VAR 0 4
59699: ARRAY
59700: PPUSH
59701: LD_VAR 0 5
59705: PUSH
59706: LD_INT 2
59708: ARRAY
59709: PUSH
59710: LD_VAR 0 4
59714: ARRAY
59715: PPUSH
59716: CALL_OW 351
59720: IFFALSE 59761
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
59722: LD_VAR 0 5
59726: PUSH
59727: LD_INT 1
59729: ARRAY
59730: PUSH
59731: LD_VAR 0 4
59735: ARRAY
59736: PPUSH
59737: LD_VAR 0 5
59741: PUSH
59742: LD_INT 2
59744: ARRAY
59745: PUSH
59746: LD_VAR 0 4
59750: ARRAY
59751: PPUSH
59752: LD_VAR 0 1
59756: PPUSH
59757: CALL_OW 244
// end ;
59761: GO 59683
59763: POP
59764: POP
// end ; end_of_file
59765: LD_VAR 0 3
59769: RET
// export globalGameSaveCounter ; every 0 0$1 do
59770: GO 59772
59772: DISABLE
// begin enable ;
59773: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
59774: LD_STRING updateTimer(
59776: PUSH
59777: LD_OWVAR 1
59781: STR
59782: PUSH
59783: LD_STRING );
59785: STR
59786: PPUSH
59787: CALL_OW 559
// end ;
59791: END
// every 0 0$1 do
59792: GO 59794
59794: DISABLE
// begin globalGameSaveCounter := 0 ;
59795: LD_ADDR_EXP 50
59799: PUSH
59800: LD_INT 0
59802: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
59803: LD_STRING setGameSaveCounter(0)
59805: PPUSH
59806: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
59810: LD_STRING initStreamRollete();
59812: PPUSH
59813: CALL_OW 559
// InitStreamMode ;
59817: CALL 61160 0 0
// DefineStreamItems ( false ) ;
59821: LD_INT 0
59823: PPUSH
59824: CALL 61624 0 1
// end ;
59828: END
// export function SOS_MapStart ( ) ; begin
59829: LD_INT 0
59831: PPUSH
// if streamModeActive then
59832: LD_EXP 51
59836: IFFALSE 59845
// DefineStreamItems ( true ) ;
59838: LD_INT 1
59840: PPUSH
59841: CALL 61624 0 1
// UpdateLuaVariables ( ) ;
59845: CALL 59862 0 0
// UpdateFactoryWaypoints ( ) ;
59849: CALL 74493 0 0
// UpdateWarehouseGatheringPoints ( ) ;
59853: CALL 74750 0 0
// end ;
59857: LD_VAR 0 1
59861: RET
// function UpdateLuaVariables ( ) ; begin
59862: LD_INT 0
59864: PPUSH
// if globalGameSaveCounter then
59865: LD_EXP 50
59869: IFFALSE 59903
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
59871: LD_ADDR_EXP 50
59875: PUSH
59876: LD_EXP 50
59880: PPUSH
59881: CALL 56051 0 1
59885: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
59886: LD_STRING setGameSaveCounter(
59888: PUSH
59889: LD_EXP 50
59893: STR
59894: PUSH
59895: LD_STRING )
59897: STR
59898: PPUSH
59899: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
59903: LD_STRING setGameDifficulty(
59905: PUSH
59906: LD_OWVAR 67
59910: STR
59911: PUSH
59912: LD_STRING )
59914: STR
59915: PPUSH
59916: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
59920: LD_STRING displayDifficulty(
59922: PUSH
59923: LD_OWVAR 67
59927: STR
59928: PUSH
59929: LD_STRING )
59931: STR
59932: PPUSH
59933: CALL_OW 559
// end ;
59937: LD_VAR 0 1
59941: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
59942: LD_INT 0
59944: PPUSH
// if p2 = stream_mode then
59945: LD_VAR 0 2
59949: PUSH
59950: LD_INT 100
59952: EQUAL
59953: IFFALSE 60956
// begin if not StreamModeActive then
59955: LD_EXP 51
59959: NOT
59960: IFFALSE 59970
// StreamModeActive := true ;
59962: LD_ADDR_EXP 51
59966: PUSH
59967: LD_INT 1
59969: ST_TO_ADDR
// if p3 = 0 then
59970: LD_VAR 0 3
59974: PUSH
59975: LD_INT 0
59977: EQUAL
59978: IFFALSE 59984
// InitStreamMode ;
59980: CALL 61160 0 0
// if p3 = 1 then
59984: LD_VAR 0 3
59988: PUSH
59989: LD_INT 1
59991: EQUAL
59992: IFFALSE 60002
// sRocket := true ;
59994: LD_ADDR_EXP 56
59998: PUSH
59999: LD_INT 1
60001: ST_TO_ADDR
// if p3 = 2 then
60002: LD_VAR 0 3
60006: PUSH
60007: LD_INT 2
60009: EQUAL
60010: IFFALSE 60020
// sSpeed := true ;
60012: LD_ADDR_EXP 55
60016: PUSH
60017: LD_INT 1
60019: ST_TO_ADDR
// if p3 = 3 then
60020: LD_VAR 0 3
60024: PUSH
60025: LD_INT 3
60027: EQUAL
60028: IFFALSE 60038
// sEngine := true ;
60030: LD_ADDR_EXP 57
60034: PUSH
60035: LD_INT 1
60037: ST_TO_ADDR
// if p3 = 4 then
60038: LD_VAR 0 3
60042: PUSH
60043: LD_INT 4
60045: EQUAL
60046: IFFALSE 60056
// sSpec := true ;
60048: LD_ADDR_EXP 54
60052: PUSH
60053: LD_INT 1
60055: ST_TO_ADDR
// if p3 = 5 then
60056: LD_VAR 0 3
60060: PUSH
60061: LD_INT 5
60063: EQUAL
60064: IFFALSE 60074
// sLevel := true ;
60066: LD_ADDR_EXP 58
60070: PUSH
60071: LD_INT 1
60073: ST_TO_ADDR
// if p3 = 6 then
60074: LD_VAR 0 3
60078: PUSH
60079: LD_INT 6
60081: EQUAL
60082: IFFALSE 60092
// sArmoury := true ;
60084: LD_ADDR_EXP 59
60088: PUSH
60089: LD_INT 1
60091: ST_TO_ADDR
// if p3 = 7 then
60092: LD_VAR 0 3
60096: PUSH
60097: LD_INT 7
60099: EQUAL
60100: IFFALSE 60110
// sRadar := true ;
60102: LD_ADDR_EXP 60
60106: PUSH
60107: LD_INT 1
60109: ST_TO_ADDR
// if p3 = 8 then
60110: LD_VAR 0 3
60114: PUSH
60115: LD_INT 8
60117: EQUAL
60118: IFFALSE 60128
// sBunker := true ;
60120: LD_ADDR_EXP 61
60124: PUSH
60125: LD_INT 1
60127: ST_TO_ADDR
// if p3 = 9 then
60128: LD_VAR 0 3
60132: PUSH
60133: LD_INT 9
60135: EQUAL
60136: IFFALSE 60146
// sHack := true ;
60138: LD_ADDR_EXP 62
60142: PUSH
60143: LD_INT 1
60145: ST_TO_ADDR
// if p3 = 10 then
60146: LD_VAR 0 3
60150: PUSH
60151: LD_INT 10
60153: EQUAL
60154: IFFALSE 60164
// sFire := true ;
60156: LD_ADDR_EXP 63
60160: PUSH
60161: LD_INT 1
60163: ST_TO_ADDR
// if p3 = 11 then
60164: LD_VAR 0 3
60168: PUSH
60169: LD_INT 11
60171: EQUAL
60172: IFFALSE 60182
// sRefresh := true ;
60174: LD_ADDR_EXP 64
60178: PUSH
60179: LD_INT 1
60181: ST_TO_ADDR
// if p3 = 12 then
60182: LD_VAR 0 3
60186: PUSH
60187: LD_INT 12
60189: EQUAL
60190: IFFALSE 60200
// sExp := true ;
60192: LD_ADDR_EXP 65
60196: PUSH
60197: LD_INT 1
60199: ST_TO_ADDR
// if p3 = 13 then
60200: LD_VAR 0 3
60204: PUSH
60205: LD_INT 13
60207: EQUAL
60208: IFFALSE 60218
// sDepot := true ;
60210: LD_ADDR_EXP 66
60214: PUSH
60215: LD_INT 1
60217: ST_TO_ADDR
// if p3 = 14 then
60218: LD_VAR 0 3
60222: PUSH
60223: LD_INT 14
60225: EQUAL
60226: IFFALSE 60236
// sFlag := true ;
60228: LD_ADDR_EXP 67
60232: PUSH
60233: LD_INT 1
60235: ST_TO_ADDR
// if p3 = 15 then
60236: LD_VAR 0 3
60240: PUSH
60241: LD_INT 15
60243: EQUAL
60244: IFFALSE 60254
// sKamikadze := true ;
60246: LD_ADDR_EXP 75
60250: PUSH
60251: LD_INT 1
60253: ST_TO_ADDR
// if p3 = 16 then
60254: LD_VAR 0 3
60258: PUSH
60259: LD_INT 16
60261: EQUAL
60262: IFFALSE 60272
// sTroll := true ;
60264: LD_ADDR_EXP 76
60268: PUSH
60269: LD_INT 1
60271: ST_TO_ADDR
// if p3 = 17 then
60272: LD_VAR 0 3
60276: PUSH
60277: LD_INT 17
60279: EQUAL
60280: IFFALSE 60290
// sSlow := true ;
60282: LD_ADDR_EXP 77
60286: PUSH
60287: LD_INT 1
60289: ST_TO_ADDR
// if p3 = 18 then
60290: LD_VAR 0 3
60294: PUSH
60295: LD_INT 18
60297: EQUAL
60298: IFFALSE 60308
// sLack := true ;
60300: LD_ADDR_EXP 78
60304: PUSH
60305: LD_INT 1
60307: ST_TO_ADDR
// if p3 = 19 then
60308: LD_VAR 0 3
60312: PUSH
60313: LD_INT 19
60315: EQUAL
60316: IFFALSE 60326
// sTank := true ;
60318: LD_ADDR_EXP 80
60322: PUSH
60323: LD_INT 1
60325: ST_TO_ADDR
// if p3 = 20 then
60326: LD_VAR 0 3
60330: PUSH
60331: LD_INT 20
60333: EQUAL
60334: IFFALSE 60344
// sRemote := true ;
60336: LD_ADDR_EXP 81
60340: PUSH
60341: LD_INT 1
60343: ST_TO_ADDR
// if p3 = 21 then
60344: LD_VAR 0 3
60348: PUSH
60349: LD_INT 21
60351: EQUAL
60352: IFFALSE 60362
// sPowell := true ;
60354: LD_ADDR_EXP 82
60358: PUSH
60359: LD_INT 1
60361: ST_TO_ADDR
// if p3 = 22 then
60362: LD_VAR 0 3
60366: PUSH
60367: LD_INT 22
60369: EQUAL
60370: IFFALSE 60380
// sTeleport := true ;
60372: LD_ADDR_EXP 85
60376: PUSH
60377: LD_INT 1
60379: ST_TO_ADDR
// if p3 = 23 then
60380: LD_VAR 0 3
60384: PUSH
60385: LD_INT 23
60387: EQUAL
60388: IFFALSE 60398
// sOilTower := true ;
60390: LD_ADDR_EXP 87
60394: PUSH
60395: LD_INT 1
60397: ST_TO_ADDR
// if p3 = 24 then
60398: LD_VAR 0 3
60402: PUSH
60403: LD_INT 24
60405: EQUAL
60406: IFFALSE 60416
// sShovel := true ;
60408: LD_ADDR_EXP 88
60412: PUSH
60413: LD_INT 1
60415: ST_TO_ADDR
// if p3 = 25 then
60416: LD_VAR 0 3
60420: PUSH
60421: LD_INT 25
60423: EQUAL
60424: IFFALSE 60434
// sSheik := true ;
60426: LD_ADDR_EXP 89
60430: PUSH
60431: LD_INT 1
60433: ST_TO_ADDR
// if p3 = 26 then
60434: LD_VAR 0 3
60438: PUSH
60439: LD_INT 26
60441: EQUAL
60442: IFFALSE 60452
// sEarthquake := true ;
60444: LD_ADDR_EXP 91
60448: PUSH
60449: LD_INT 1
60451: ST_TO_ADDR
// if p3 = 27 then
60452: LD_VAR 0 3
60456: PUSH
60457: LD_INT 27
60459: EQUAL
60460: IFFALSE 60470
// sAI := true ;
60462: LD_ADDR_EXP 92
60466: PUSH
60467: LD_INT 1
60469: ST_TO_ADDR
// if p3 = 28 then
60470: LD_VAR 0 3
60474: PUSH
60475: LD_INT 28
60477: EQUAL
60478: IFFALSE 60488
// sCargo := true ;
60480: LD_ADDR_EXP 95
60484: PUSH
60485: LD_INT 1
60487: ST_TO_ADDR
// if p3 = 29 then
60488: LD_VAR 0 3
60492: PUSH
60493: LD_INT 29
60495: EQUAL
60496: IFFALSE 60506
// sDLaser := true ;
60498: LD_ADDR_EXP 96
60502: PUSH
60503: LD_INT 1
60505: ST_TO_ADDR
// if p3 = 30 then
60506: LD_VAR 0 3
60510: PUSH
60511: LD_INT 30
60513: EQUAL
60514: IFFALSE 60524
// sExchange := true ;
60516: LD_ADDR_EXP 97
60520: PUSH
60521: LD_INT 1
60523: ST_TO_ADDR
// if p3 = 31 then
60524: LD_VAR 0 3
60528: PUSH
60529: LD_INT 31
60531: EQUAL
60532: IFFALSE 60542
// sFac := true ;
60534: LD_ADDR_EXP 98
60538: PUSH
60539: LD_INT 1
60541: ST_TO_ADDR
// if p3 = 32 then
60542: LD_VAR 0 3
60546: PUSH
60547: LD_INT 32
60549: EQUAL
60550: IFFALSE 60560
// sPower := true ;
60552: LD_ADDR_EXP 99
60556: PUSH
60557: LD_INT 1
60559: ST_TO_ADDR
// if p3 = 33 then
60560: LD_VAR 0 3
60564: PUSH
60565: LD_INT 33
60567: EQUAL
60568: IFFALSE 60578
// sRandom := true ;
60570: LD_ADDR_EXP 100
60574: PUSH
60575: LD_INT 1
60577: ST_TO_ADDR
// if p3 = 34 then
60578: LD_VAR 0 3
60582: PUSH
60583: LD_INT 34
60585: EQUAL
60586: IFFALSE 60596
// sShield := true ;
60588: LD_ADDR_EXP 101
60592: PUSH
60593: LD_INT 1
60595: ST_TO_ADDR
// if p3 = 35 then
60596: LD_VAR 0 3
60600: PUSH
60601: LD_INT 35
60603: EQUAL
60604: IFFALSE 60614
// sTime := true ;
60606: LD_ADDR_EXP 102
60610: PUSH
60611: LD_INT 1
60613: ST_TO_ADDR
// if p3 = 36 then
60614: LD_VAR 0 3
60618: PUSH
60619: LD_INT 36
60621: EQUAL
60622: IFFALSE 60632
// sTools := true ;
60624: LD_ADDR_EXP 103
60628: PUSH
60629: LD_INT 1
60631: ST_TO_ADDR
// if p3 = 101 then
60632: LD_VAR 0 3
60636: PUSH
60637: LD_INT 101
60639: EQUAL
60640: IFFALSE 60650
// sSold := true ;
60642: LD_ADDR_EXP 68
60646: PUSH
60647: LD_INT 1
60649: ST_TO_ADDR
// if p3 = 102 then
60650: LD_VAR 0 3
60654: PUSH
60655: LD_INT 102
60657: EQUAL
60658: IFFALSE 60668
// sDiff := true ;
60660: LD_ADDR_EXP 69
60664: PUSH
60665: LD_INT 1
60667: ST_TO_ADDR
// if p3 = 103 then
60668: LD_VAR 0 3
60672: PUSH
60673: LD_INT 103
60675: EQUAL
60676: IFFALSE 60686
// sFog := true ;
60678: LD_ADDR_EXP 72
60682: PUSH
60683: LD_INT 1
60685: ST_TO_ADDR
// if p3 = 104 then
60686: LD_VAR 0 3
60690: PUSH
60691: LD_INT 104
60693: EQUAL
60694: IFFALSE 60704
// sReset := true ;
60696: LD_ADDR_EXP 73
60700: PUSH
60701: LD_INT 1
60703: ST_TO_ADDR
// if p3 = 105 then
60704: LD_VAR 0 3
60708: PUSH
60709: LD_INT 105
60711: EQUAL
60712: IFFALSE 60722
// sSun := true ;
60714: LD_ADDR_EXP 74
60718: PUSH
60719: LD_INT 1
60721: ST_TO_ADDR
// if p3 = 106 then
60722: LD_VAR 0 3
60726: PUSH
60727: LD_INT 106
60729: EQUAL
60730: IFFALSE 60740
// sTiger := true ;
60732: LD_ADDR_EXP 70
60736: PUSH
60737: LD_INT 1
60739: ST_TO_ADDR
// if p3 = 107 then
60740: LD_VAR 0 3
60744: PUSH
60745: LD_INT 107
60747: EQUAL
60748: IFFALSE 60758
// sBomb := true ;
60750: LD_ADDR_EXP 71
60754: PUSH
60755: LD_INT 1
60757: ST_TO_ADDR
// if p3 = 108 then
60758: LD_VAR 0 3
60762: PUSH
60763: LD_INT 108
60765: EQUAL
60766: IFFALSE 60776
// sWound := true ;
60768: LD_ADDR_EXP 79
60772: PUSH
60773: LD_INT 1
60775: ST_TO_ADDR
// if p3 = 109 then
60776: LD_VAR 0 3
60780: PUSH
60781: LD_INT 109
60783: EQUAL
60784: IFFALSE 60794
// sBetray := true ;
60786: LD_ADDR_EXP 83
60790: PUSH
60791: LD_INT 1
60793: ST_TO_ADDR
// if p3 = 110 then
60794: LD_VAR 0 3
60798: PUSH
60799: LD_INT 110
60801: EQUAL
60802: IFFALSE 60812
// sContamin := true ;
60804: LD_ADDR_EXP 84
60808: PUSH
60809: LD_INT 1
60811: ST_TO_ADDR
// if p3 = 111 then
60812: LD_VAR 0 3
60816: PUSH
60817: LD_INT 111
60819: EQUAL
60820: IFFALSE 60830
// sOil := true ;
60822: LD_ADDR_EXP 86
60826: PUSH
60827: LD_INT 1
60829: ST_TO_ADDR
// if p3 = 112 then
60830: LD_VAR 0 3
60834: PUSH
60835: LD_INT 112
60837: EQUAL
60838: IFFALSE 60848
// sStu := true ;
60840: LD_ADDR_EXP 90
60844: PUSH
60845: LD_INT 1
60847: ST_TO_ADDR
// if p3 = 113 then
60848: LD_VAR 0 3
60852: PUSH
60853: LD_INT 113
60855: EQUAL
60856: IFFALSE 60866
// sBazooka := true ;
60858: LD_ADDR_EXP 93
60862: PUSH
60863: LD_INT 1
60865: ST_TO_ADDR
// if p3 = 114 then
60866: LD_VAR 0 3
60870: PUSH
60871: LD_INT 114
60873: EQUAL
60874: IFFALSE 60884
// sMortar := true ;
60876: LD_ADDR_EXP 94
60880: PUSH
60881: LD_INT 1
60883: ST_TO_ADDR
// if p3 = 115 then
60884: LD_VAR 0 3
60888: PUSH
60889: LD_INT 115
60891: EQUAL
60892: IFFALSE 60902
// sRanger := true ;
60894: LD_ADDR_EXP 104
60898: PUSH
60899: LD_INT 1
60901: ST_TO_ADDR
// if p3 = 116 then
60902: LD_VAR 0 3
60906: PUSH
60907: LD_INT 116
60909: EQUAL
60910: IFFALSE 60920
// sComputer := true ;
60912: LD_ADDR_EXP 105
60916: PUSH
60917: LD_INT 1
60919: ST_TO_ADDR
// if p3 = 117 then
60920: LD_VAR 0 3
60924: PUSH
60925: LD_INT 117
60927: EQUAL
60928: IFFALSE 60938
// s30 := true ;
60930: LD_ADDR_EXP 106
60934: PUSH
60935: LD_INT 1
60937: ST_TO_ADDR
// if p3 = 118 then
60938: LD_VAR 0 3
60942: PUSH
60943: LD_INT 118
60945: EQUAL
60946: IFFALSE 60956
// s60 := true ;
60948: LD_ADDR_EXP 107
60952: PUSH
60953: LD_INT 1
60955: ST_TO_ADDR
// end ; if p2 = hack_mode then
60956: LD_VAR 0 2
60960: PUSH
60961: LD_INT 101
60963: EQUAL
60964: IFFALSE 61092
// begin case p3 of 1 :
60966: LD_VAR 0 3
60970: PUSH
60971: LD_INT 1
60973: DOUBLE
60974: EQUAL
60975: IFTRUE 60979
60977: GO 60986
60979: POP
// hHackUnlimitedResources ; 2 :
60980: CALL 73239 0 0
60984: GO 61092
60986: LD_INT 2
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 60994
60992: GO 61001
60994: POP
// hHackSetLevel10 ; 3 :
60995: CALL 73372 0 0
60999: GO 61092
61001: LD_INT 3
61003: DOUBLE
61004: EQUAL
61005: IFTRUE 61009
61007: GO 61016
61009: POP
// hHackSetLevel10YourUnits ; 4 :
61010: CALL 73457 0 0
61014: GO 61092
61016: LD_INT 4
61018: DOUBLE
61019: EQUAL
61020: IFTRUE 61024
61022: GO 61031
61024: POP
// hHackInvincible ; 5 :
61025: CALL 73905 0 0
61029: GO 61092
61031: LD_INT 5
61033: DOUBLE
61034: EQUAL
61035: IFTRUE 61039
61037: GO 61046
61039: POP
// hHackInvisible ; 6 :
61040: CALL 74016 0 0
61044: GO 61092
61046: LD_INT 6
61048: DOUBLE
61049: EQUAL
61050: IFTRUE 61054
61052: GO 61061
61054: POP
// hHackChangeYourSide ; 7 :
61055: CALL 74073 0 0
61059: GO 61092
61061: LD_INT 7
61063: DOUBLE
61064: EQUAL
61065: IFTRUE 61069
61067: GO 61076
61069: POP
// hHackChangeUnitSide ; 8 :
61070: CALL 74115 0 0
61074: GO 61092
61076: LD_INT 8
61078: DOUBLE
61079: EQUAL
61080: IFTRUE 61084
61082: GO 61091
61084: POP
// hHackFog ; end ;
61085: CALL 74216 0 0
61089: GO 61092
61091: POP
// end ; if p2 = game_save_mode then
61092: LD_VAR 0 2
61096: PUSH
61097: LD_INT 102
61099: EQUAL
61100: IFFALSE 61155
// begin if p3 = 1 then
61102: LD_VAR 0 3
61106: PUSH
61107: LD_INT 1
61109: EQUAL
61110: IFFALSE 61122
// globalGameSaveCounter := p4 ;
61112: LD_ADDR_EXP 50
61116: PUSH
61117: LD_VAR 0 4
61121: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
61122: LD_VAR 0 3
61126: PUSH
61127: LD_INT 2
61129: EQUAL
61130: PUSH
61131: LD_EXP 50
61135: AND
61136: IFFALSE 61155
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
61138: LD_STRING setGameSaveCounter(
61140: PUSH
61141: LD_EXP 50
61145: STR
61146: PUSH
61147: LD_STRING )
61149: STR
61150: PPUSH
61151: CALL_OW 559
// end ; end ;
61155: LD_VAR 0 7
61159: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
61160: LD_INT 0
61162: PPUSH
// streamModeActive := false ;
61163: LD_ADDR_EXP 51
61167: PUSH
61168: LD_INT 0
61170: ST_TO_ADDR
// normalCounter := 36 ;
61171: LD_ADDR_EXP 52
61175: PUSH
61176: LD_INT 36
61178: ST_TO_ADDR
// hardcoreCounter := 18 ;
61179: LD_ADDR_EXP 53
61183: PUSH
61184: LD_INT 18
61186: ST_TO_ADDR
// sRocket := false ;
61187: LD_ADDR_EXP 56
61191: PUSH
61192: LD_INT 0
61194: ST_TO_ADDR
// sSpeed := false ;
61195: LD_ADDR_EXP 55
61199: PUSH
61200: LD_INT 0
61202: ST_TO_ADDR
// sEngine := false ;
61203: LD_ADDR_EXP 57
61207: PUSH
61208: LD_INT 0
61210: ST_TO_ADDR
// sSpec := false ;
61211: LD_ADDR_EXP 54
61215: PUSH
61216: LD_INT 0
61218: ST_TO_ADDR
// sLevel := false ;
61219: LD_ADDR_EXP 58
61223: PUSH
61224: LD_INT 0
61226: ST_TO_ADDR
// sArmoury := false ;
61227: LD_ADDR_EXP 59
61231: PUSH
61232: LD_INT 0
61234: ST_TO_ADDR
// sRadar := false ;
61235: LD_ADDR_EXP 60
61239: PUSH
61240: LD_INT 0
61242: ST_TO_ADDR
// sBunker := false ;
61243: LD_ADDR_EXP 61
61247: PUSH
61248: LD_INT 0
61250: ST_TO_ADDR
// sHack := false ;
61251: LD_ADDR_EXP 62
61255: PUSH
61256: LD_INT 0
61258: ST_TO_ADDR
// sFire := false ;
61259: LD_ADDR_EXP 63
61263: PUSH
61264: LD_INT 0
61266: ST_TO_ADDR
// sRefresh := false ;
61267: LD_ADDR_EXP 64
61271: PUSH
61272: LD_INT 0
61274: ST_TO_ADDR
// sExp := false ;
61275: LD_ADDR_EXP 65
61279: PUSH
61280: LD_INT 0
61282: ST_TO_ADDR
// sDepot := false ;
61283: LD_ADDR_EXP 66
61287: PUSH
61288: LD_INT 0
61290: ST_TO_ADDR
// sFlag := false ;
61291: LD_ADDR_EXP 67
61295: PUSH
61296: LD_INT 0
61298: ST_TO_ADDR
// sKamikadze := false ;
61299: LD_ADDR_EXP 75
61303: PUSH
61304: LD_INT 0
61306: ST_TO_ADDR
// sTroll := false ;
61307: LD_ADDR_EXP 76
61311: PUSH
61312: LD_INT 0
61314: ST_TO_ADDR
// sSlow := false ;
61315: LD_ADDR_EXP 77
61319: PUSH
61320: LD_INT 0
61322: ST_TO_ADDR
// sLack := false ;
61323: LD_ADDR_EXP 78
61327: PUSH
61328: LD_INT 0
61330: ST_TO_ADDR
// sTank := false ;
61331: LD_ADDR_EXP 80
61335: PUSH
61336: LD_INT 0
61338: ST_TO_ADDR
// sRemote := false ;
61339: LD_ADDR_EXP 81
61343: PUSH
61344: LD_INT 0
61346: ST_TO_ADDR
// sPowell := false ;
61347: LD_ADDR_EXP 82
61351: PUSH
61352: LD_INT 0
61354: ST_TO_ADDR
// sTeleport := false ;
61355: LD_ADDR_EXP 85
61359: PUSH
61360: LD_INT 0
61362: ST_TO_ADDR
// sOilTower := false ;
61363: LD_ADDR_EXP 87
61367: PUSH
61368: LD_INT 0
61370: ST_TO_ADDR
// sShovel := false ;
61371: LD_ADDR_EXP 88
61375: PUSH
61376: LD_INT 0
61378: ST_TO_ADDR
// sSheik := false ;
61379: LD_ADDR_EXP 89
61383: PUSH
61384: LD_INT 0
61386: ST_TO_ADDR
// sEarthquake := false ;
61387: LD_ADDR_EXP 91
61391: PUSH
61392: LD_INT 0
61394: ST_TO_ADDR
// sAI := false ;
61395: LD_ADDR_EXP 92
61399: PUSH
61400: LD_INT 0
61402: ST_TO_ADDR
// sCargo := false ;
61403: LD_ADDR_EXP 95
61407: PUSH
61408: LD_INT 0
61410: ST_TO_ADDR
// sDLaser := false ;
61411: LD_ADDR_EXP 96
61415: PUSH
61416: LD_INT 0
61418: ST_TO_ADDR
// sExchange := false ;
61419: LD_ADDR_EXP 97
61423: PUSH
61424: LD_INT 0
61426: ST_TO_ADDR
// sFac := false ;
61427: LD_ADDR_EXP 98
61431: PUSH
61432: LD_INT 0
61434: ST_TO_ADDR
// sPower := false ;
61435: LD_ADDR_EXP 99
61439: PUSH
61440: LD_INT 0
61442: ST_TO_ADDR
// sRandom := false ;
61443: LD_ADDR_EXP 100
61447: PUSH
61448: LD_INT 0
61450: ST_TO_ADDR
// sShield := false ;
61451: LD_ADDR_EXP 101
61455: PUSH
61456: LD_INT 0
61458: ST_TO_ADDR
// sTime := false ;
61459: LD_ADDR_EXP 102
61463: PUSH
61464: LD_INT 0
61466: ST_TO_ADDR
// sTools := false ;
61467: LD_ADDR_EXP 103
61471: PUSH
61472: LD_INT 0
61474: ST_TO_ADDR
// sSold := false ;
61475: LD_ADDR_EXP 68
61479: PUSH
61480: LD_INT 0
61482: ST_TO_ADDR
// sDiff := false ;
61483: LD_ADDR_EXP 69
61487: PUSH
61488: LD_INT 0
61490: ST_TO_ADDR
// sFog := false ;
61491: LD_ADDR_EXP 72
61495: PUSH
61496: LD_INT 0
61498: ST_TO_ADDR
// sReset := false ;
61499: LD_ADDR_EXP 73
61503: PUSH
61504: LD_INT 0
61506: ST_TO_ADDR
// sSun := false ;
61507: LD_ADDR_EXP 74
61511: PUSH
61512: LD_INT 0
61514: ST_TO_ADDR
// sTiger := false ;
61515: LD_ADDR_EXP 70
61519: PUSH
61520: LD_INT 0
61522: ST_TO_ADDR
// sBomb := false ;
61523: LD_ADDR_EXP 71
61527: PUSH
61528: LD_INT 0
61530: ST_TO_ADDR
// sWound := false ;
61531: LD_ADDR_EXP 79
61535: PUSH
61536: LD_INT 0
61538: ST_TO_ADDR
// sBetray := false ;
61539: LD_ADDR_EXP 83
61543: PUSH
61544: LD_INT 0
61546: ST_TO_ADDR
// sContamin := false ;
61547: LD_ADDR_EXP 84
61551: PUSH
61552: LD_INT 0
61554: ST_TO_ADDR
// sOil := false ;
61555: LD_ADDR_EXP 86
61559: PUSH
61560: LD_INT 0
61562: ST_TO_ADDR
// sStu := false ;
61563: LD_ADDR_EXP 90
61567: PUSH
61568: LD_INT 0
61570: ST_TO_ADDR
// sBazooka := false ;
61571: LD_ADDR_EXP 93
61575: PUSH
61576: LD_INT 0
61578: ST_TO_ADDR
// sMortar := false ;
61579: LD_ADDR_EXP 94
61583: PUSH
61584: LD_INT 0
61586: ST_TO_ADDR
// sRanger := false ;
61587: LD_ADDR_EXP 104
61591: PUSH
61592: LD_INT 0
61594: ST_TO_ADDR
// sComputer := false ;
61595: LD_ADDR_EXP 105
61599: PUSH
61600: LD_INT 0
61602: ST_TO_ADDR
// s30 := false ;
61603: LD_ADDR_EXP 106
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// s60 := false ;
61611: LD_ADDR_EXP 107
61615: PUSH
61616: LD_INT 0
61618: ST_TO_ADDR
// end ;
61619: LD_VAR 0 1
61623: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
61624: LD_INT 0
61626: PPUSH
61627: PPUSH
61628: PPUSH
61629: PPUSH
61630: PPUSH
61631: PPUSH
61632: PPUSH
// result := [ ] ;
61633: LD_ADDR_VAR 0 2
61637: PUSH
61638: EMPTY
61639: ST_TO_ADDR
// if campaign_id = 1 then
61640: LD_OWVAR 69
61644: PUSH
61645: LD_INT 1
61647: EQUAL
61648: IFFALSE 64814
// begin case mission_number of 1 :
61650: LD_OWVAR 70
61654: PUSH
61655: LD_INT 1
61657: DOUBLE
61658: EQUAL
61659: IFTRUE 61663
61661: GO 61739
61663: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
61664: LD_ADDR_VAR 0 2
61668: PUSH
61669: LD_INT 2
61671: PUSH
61672: LD_INT 4
61674: PUSH
61675: LD_INT 11
61677: PUSH
61678: LD_INT 12
61680: PUSH
61681: LD_INT 15
61683: PUSH
61684: LD_INT 16
61686: PUSH
61687: LD_INT 22
61689: PUSH
61690: LD_INT 23
61692: PUSH
61693: LD_INT 26
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 101
61709: PUSH
61710: LD_INT 102
61712: PUSH
61713: LD_INT 106
61715: PUSH
61716: LD_INT 116
61718: PUSH
61719: LD_INT 117
61721: PUSH
61722: LD_INT 118
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: ST_TO_ADDR
61737: GO 64812
61739: LD_INT 2
61741: DOUBLE
61742: EQUAL
61743: IFTRUE 61747
61745: GO 61831
61747: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
61748: LD_ADDR_VAR 0 2
61752: PUSH
61753: LD_INT 2
61755: PUSH
61756: LD_INT 4
61758: PUSH
61759: LD_INT 11
61761: PUSH
61762: LD_INT 12
61764: PUSH
61765: LD_INT 15
61767: PUSH
61768: LD_INT 16
61770: PUSH
61771: LD_INT 22
61773: PUSH
61774: LD_INT 23
61776: PUSH
61777: LD_INT 26
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 101
61793: PUSH
61794: LD_INT 102
61796: PUSH
61797: LD_INT 105
61799: PUSH
61800: LD_INT 106
61802: PUSH
61803: LD_INT 108
61805: PUSH
61806: LD_INT 116
61808: PUSH
61809: LD_INT 117
61811: PUSH
61812: LD_INT 118
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: LIST
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: ST_TO_ADDR
61829: GO 64812
61831: LD_INT 3
61833: DOUBLE
61834: EQUAL
61835: IFTRUE 61839
61837: GO 61927
61839: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
61840: LD_ADDR_VAR 0 2
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: LD_INT 5
61853: PUSH
61854: LD_INT 11
61856: PUSH
61857: LD_INT 12
61859: PUSH
61860: LD_INT 15
61862: PUSH
61863: LD_INT 16
61865: PUSH
61866: LD_INT 22
61868: PUSH
61869: LD_INT 26
61871: PUSH
61872: LD_INT 36
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 101
61889: PUSH
61890: LD_INT 102
61892: PUSH
61893: LD_INT 105
61895: PUSH
61896: LD_INT 106
61898: PUSH
61899: LD_INT 108
61901: PUSH
61902: LD_INT 116
61904: PUSH
61905: LD_INT 117
61907: PUSH
61908: LD_INT 118
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: PUSH
61921: EMPTY
61922: LIST
61923: LIST
61924: ST_TO_ADDR
61925: GO 64812
61927: LD_INT 4
61929: DOUBLE
61930: EQUAL
61931: IFTRUE 61935
61933: GO 62031
61935: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
61936: LD_ADDR_VAR 0 2
61940: PUSH
61941: LD_INT 2
61943: PUSH
61944: LD_INT 4
61946: PUSH
61947: LD_INT 5
61949: PUSH
61950: LD_INT 8
61952: PUSH
61953: LD_INT 11
61955: PUSH
61956: LD_INT 12
61958: PUSH
61959: LD_INT 15
61961: PUSH
61962: LD_INT 16
61964: PUSH
61965: LD_INT 22
61967: PUSH
61968: LD_INT 23
61970: PUSH
61971: LD_INT 26
61973: PUSH
61974: LD_INT 36
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 101
61993: PUSH
61994: LD_INT 102
61996: PUSH
61997: LD_INT 105
61999: PUSH
62000: LD_INT 106
62002: PUSH
62003: LD_INT 108
62005: PUSH
62006: LD_INT 116
62008: PUSH
62009: LD_INT 117
62011: PUSH
62012: LD_INT 118
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: ST_TO_ADDR
62029: GO 64812
62031: LD_INT 5
62033: DOUBLE
62034: EQUAL
62035: IFTRUE 62039
62037: GO 62151
62039: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
62040: LD_ADDR_VAR 0 2
62044: PUSH
62045: LD_INT 2
62047: PUSH
62048: LD_INT 4
62050: PUSH
62051: LD_INT 5
62053: PUSH
62054: LD_INT 6
62056: PUSH
62057: LD_INT 8
62059: PUSH
62060: LD_INT 11
62062: PUSH
62063: LD_INT 12
62065: PUSH
62066: LD_INT 15
62068: PUSH
62069: LD_INT 16
62071: PUSH
62072: LD_INT 22
62074: PUSH
62075: LD_INT 23
62077: PUSH
62078: LD_INT 25
62080: PUSH
62081: LD_INT 26
62083: PUSH
62084: LD_INT 36
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 101
62105: PUSH
62106: LD_INT 102
62108: PUSH
62109: LD_INT 105
62111: PUSH
62112: LD_INT 106
62114: PUSH
62115: LD_INT 108
62117: PUSH
62118: LD_INT 109
62120: PUSH
62121: LD_INT 112
62123: PUSH
62124: LD_INT 116
62126: PUSH
62127: LD_INT 117
62129: PUSH
62130: LD_INT 118
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: ST_TO_ADDR
62149: GO 64812
62151: LD_INT 6
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62159
62157: GO 62291
62159: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
62160: LD_ADDR_VAR 0 2
62164: PUSH
62165: LD_INT 2
62167: PUSH
62168: LD_INT 4
62170: PUSH
62171: LD_INT 5
62173: PUSH
62174: LD_INT 6
62176: PUSH
62177: LD_INT 8
62179: PUSH
62180: LD_INT 11
62182: PUSH
62183: LD_INT 12
62185: PUSH
62186: LD_INT 15
62188: PUSH
62189: LD_INT 16
62191: PUSH
62192: LD_INT 20
62194: PUSH
62195: LD_INT 21
62197: PUSH
62198: LD_INT 22
62200: PUSH
62201: LD_INT 23
62203: PUSH
62204: LD_INT 25
62206: PUSH
62207: LD_INT 26
62209: PUSH
62210: LD_INT 30
62212: PUSH
62213: LD_INT 31
62215: PUSH
62216: LD_INT 32
62218: PUSH
62219: LD_INT 36
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 101
62245: PUSH
62246: LD_INT 102
62248: PUSH
62249: LD_INT 105
62251: PUSH
62252: LD_INT 106
62254: PUSH
62255: LD_INT 108
62257: PUSH
62258: LD_INT 109
62260: PUSH
62261: LD_INT 112
62263: PUSH
62264: LD_INT 116
62266: PUSH
62267: LD_INT 117
62269: PUSH
62270: LD_INT 118
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: ST_TO_ADDR
62289: GO 64812
62291: LD_INT 7
62293: DOUBLE
62294: EQUAL
62295: IFTRUE 62299
62297: GO 62411
62299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
62300: LD_ADDR_VAR 0 2
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: LD_INT 4
62310: PUSH
62311: LD_INT 5
62313: PUSH
62314: LD_INT 7
62316: PUSH
62317: LD_INT 11
62319: PUSH
62320: LD_INT 12
62322: PUSH
62323: LD_INT 15
62325: PUSH
62326: LD_INT 16
62328: PUSH
62329: LD_INT 20
62331: PUSH
62332: LD_INT 21
62334: PUSH
62335: LD_INT 22
62337: PUSH
62338: LD_INT 23
62340: PUSH
62341: LD_INT 25
62343: PUSH
62344: LD_INT 26
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 101
62365: PUSH
62366: LD_INT 102
62368: PUSH
62369: LD_INT 103
62371: PUSH
62372: LD_INT 105
62374: PUSH
62375: LD_INT 106
62377: PUSH
62378: LD_INT 108
62380: PUSH
62381: LD_INT 112
62383: PUSH
62384: LD_INT 116
62386: PUSH
62387: LD_INT 117
62389: PUSH
62390: LD_INT 118
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: ST_TO_ADDR
62409: GO 64812
62411: LD_INT 8
62413: DOUBLE
62414: EQUAL
62415: IFTRUE 62419
62417: GO 62559
62419: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
62420: LD_ADDR_VAR 0 2
62424: PUSH
62425: LD_INT 2
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: LD_INT 5
62433: PUSH
62434: LD_INT 6
62436: PUSH
62437: LD_INT 7
62439: PUSH
62440: LD_INT 8
62442: PUSH
62443: LD_INT 11
62445: PUSH
62446: LD_INT 12
62448: PUSH
62449: LD_INT 15
62451: PUSH
62452: LD_INT 16
62454: PUSH
62455: LD_INT 20
62457: PUSH
62458: LD_INT 21
62460: PUSH
62461: LD_INT 22
62463: PUSH
62464: LD_INT 23
62466: PUSH
62467: LD_INT 25
62469: PUSH
62470: LD_INT 26
62472: PUSH
62473: LD_INT 30
62475: PUSH
62476: LD_INT 31
62478: PUSH
62479: LD_INT 32
62481: PUSH
62482: LD_INT 36
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 101
62509: PUSH
62510: LD_INT 102
62512: PUSH
62513: LD_INT 103
62515: PUSH
62516: LD_INT 105
62518: PUSH
62519: LD_INT 106
62521: PUSH
62522: LD_INT 108
62524: PUSH
62525: LD_INT 109
62527: PUSH
62528: LD_INT 112
62530: PUSH
62531: LD_INT 116
62533: PUSH
62534: LD_INT 117
62536: PUSH
62537: LD_INT 118
62539: PUSH
62540: EMPTY
62541: LIST
62542: LIST
62543: LIST
62544: LIST
62545: LIST
62546: LIST
62547: LIST
62548: LIST
62549: LIST
62550: LIST
62551: LIST
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: ST_TO_ADDR
62557: GO 64812
62559: LD_INT 9
62561: DOUBLE
62562: EQUAL
62563: IFTRUE 62567
62565: GO 62715
62567: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
62568: LD_ADDR_VAR 0 2
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: LD_INT 4
62578: PUSH
62579: LD_INT 5
62581: PUSH
62582: LD_INT 6
62584: PUSH
62585: LD_INT 7
62587: PUSH
62588: LD_INT 8
62590: PUSH
62591: LD_INT 11
62593: PUSH
62594: LD_INT 12
62596: PUSH
62597: LD_INT 15
62599: PUSH
62600: LD_INT 16
62602: PUSH
62603: LD_INT 20
62605: PUSH
62606: LD_INT 21
62608: PUSH
62609: LD_INT 22
62611: PUSH
62612: LD_INT 23
62614: PUSH
62615: LD_INT 25
62617: PUSH
62618: LD_INT 26
62620: PUSH
62621: LD_INT 28
62623: PUSH
62624: LD_INT 30
62626: PUSH
62627: LD_INT 31
62629: PUSH
62630: LD_INT 32
62632: PUSH
62633: LD_INT 36
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 101
62661: PUSH
62662: LD_INT 102
62664: PUSH
62665: LD_INT 103
62667: PUSH
62668: LD_INT 105
62670: PUSH
62671: LD_INT 106
62673: PUSH
62674: LD_INT 108
62676: PUSH
62677: LD_INT 109
62679: PUSH
62680: LD_INT 112
62682: PUSH
62683: LD_INT 114
62685: PUSH
62686: LD_INT 116
62688: PUSH
62689: LD_INT 117
62691: PUSH
62692: LD_INT 118
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: ST_TO_ADDR
62713: GO 64812
62715: LD_INT 10
62717: DOUBLE
62718: EQUAL
62719: IFTRUE 62723
62721: GO 62919
62723: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
62724: LD_ADDR_VAR 0 2
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 4
62734: PUSH
62735: LD_INT 5
62737: PUSH
62738: LD_INT 6
62740: PUSH
62741: LD_INT 7
62743: PUSH
62744: LD_INT 8
62746: PUSH
62747: LD_INT 9
62749: PUSH
62750: LD_INT 10
62752: PUSH
62753: LD_INT 11
62755: PUSH
62756: LD_INT 12
62758: PUSH
62759: LD_INT 13
62761: PUSH
62762: LD_INT 14
62764: PUSH
62765: LD_INT 15
62767: PUSH
62768: LD_INT 16
62770: PUSH
62771: LD_INT 17
62773: PUSH
62774: LD_INT 18
62776: PUSH
62777: LD_INT 19
62779: PUSH
62780: LD_INT 20
62782: PUSH
62783: LD_INT 21
62785: PUSH
62786: LD_INT 22
62788: PUSH
62789: LD_INT 23
62791: PUSH
62792: LD_INT 24
62794: PUSH
62795: LD_INT 25
62797: PUSH
62798: LD_INT 26
62800: PUSH
62801: LD_INT 28
62803: PUSH
62804: LD_INT 30
62806: PUSH
62807: LD_INT 31
62809: PUSH
62810: LD_INT 32
62812: PUSH
62813: LD_INT 36
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 101
62849: PUSH
62850: LD_INT 102
62852: PUSH
62853: LD_INT 103
62855: PUSH
62856: LD_INT 104
62858: PUSH
62859: LD_INT 105
62861: PUSH
62862: LD_INT 106
62864: PUSH
62865: LD_INT 107
62867: PUSH
62868: LD_INT 108
62870: PUSH
62871: LD_INT 109
62873: PUSH
62874: LD_INT 110
62876: PUSH
62877: LD_INT 111
62879: PUSH
62880: LD_INT 112
62882: PUSH
62883: LD_INT 114
62885: PUSH
62886: LD_INT 116
62888: PUSH
62889: LD_INT 117
62891: PUSH
62892: LD_INT 118
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: ST_TO_ADDR
62917: GO 64812
62919: LD_INT 11
62921: DOUBLE
62922: EQUAL
62923: IFTRUE 62927
62925: GO 63131
62927: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
62928: LD_ADDR_VAR 0 2
62932: PUSH
62933: LD_INT 2
62935: PUSH
62936: LD_INT 3
62938: PUSH
62939: LD_INT 4
62941: PUSH
62942: LD_INT 5
62944: PUSH
62945: LD_INT 6
62947: PUSH
62948: LD_INT 7
62950: PUSH
62951: LD_INT 8
62953: PUSH
62954: LD_INT 9
62956: PUSH
62957: LD_INT 10
62959: PUSH
62960: LD_INT 11
62962: PUSH
62963: LD_INT 12
62965: PUSH
62966: LD_INT 13
62968: PUSH
62969: LD_INT 14
62971: PUSH
62972: LD_INT 15
62974: PUSH
62975: LD_INT 16
62977: PUSH
62978: LD_INT 17
62980: PUSH
62981: LD_INT 18
62983: PUSH
62984: LD_INT 19
62986: PUSH
62987: LD_INT 20
62989: PUSH
62990: LD_INT 21
62992: PUSH
62993: LD_INT 22
62995: PUSH
62996: LD_INT 23
62998: PUSH
62999: LD_INT 24
63001: PUSH
63002: LD_INT 25
63004: PUSH
63005: LD_INT 26
63007: PUSH
63008: LD_INT 28
63010: PUSH
63011: LD_INT 30
63013: PUSH
63014: LD_INT 31
63016: PUSH
63017: LD_INT 32
63019: PUSH
63020: LD_INT 34
63022: PUSH
63023: LD_INT 36
63025: PUSH
63026: EMPTY
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 101
63061: PUSH
63062: LD_INT 102
63064: PUSH
63065: LD_INT 103
63067: PUSH
63068: LD_INT 104
63070: PUSH
63071: LD_INT 105
63073: PUSH
63074: LD_INT 106
63076: PUSH
63077: LD_INT 107
63079: PUSH
63080: LD_INT 108
63082: PUSH
63083: LD_INT 109
63085: PUSH
63086: LD_INT 110
63088: PUSH
63089: LD_INT 111
63091: PUSH
63092: LD_INT 112
63094: PUSH
63095: LD_INT 114
63097: PUSH
63098: LD_INT 116
63100: PUSH
63101: LD_INT 117
63103: PUSH
63104: LD_INT 118
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: ST_TO_ADDR
63129: GO 64812
63131: LD_INT 12
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63139
63137: GO 63359
63139: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
63140: LD_ADDR_VAR 0 2
63144: PUSH
63145: LD_INT 1
63147: PUSH
63148: LD_INT 2
63150: PUSH
63151: LD_INT 3
63153: PUSH
63154: LD_INT 4
63156: PUSH
63157: LD_INT 5
63159: PUSH
63160: LD_INT 6
63162: PUSH
63163: LD_INT 7
63165: PUSH
63166: LD_INT 8
63168: PUSH
63169: LD_INT 9
63171: PUSH
63172: LD_INT 10
63174: PUSH
63175: LD_INT 11
63177: PUSH
63178: LD_INT 12
63180: PUSH
63181: LD_INT 13
63183: PUSH
63184: LD_INT 14
63186: PUSH
63187: LD_INT 15
63189: PUSH
63190: LD_INT 16
63192: PUSH
63193: LD_INT 17
63195: PUSH
63196: LD_INT 18
63198: PUSH
63199: LD_INT 19
63201: PUSH
63202: LD_INT 20
63204: PUSH
63205: LD_INT 21
63207: PUSH
63208: LD_INT 22
63210: PUSH
63211: LD_INT 23
63213: PUSH
63214: LD_INT 24
63216: PUSH
63217: LD_INT 25
63219: PUSH
63220: LD_INT 26
63222: PUSH
63223: LD_INT 27
63225: PUSH
63226: LD_INT 28
63228: PUSH
63229: LD_INT 30
63231: PUSH
63232: LD_INT 31
63234: PUSH
63235: LD_INT 32
63237: PUSH
63238: LD_INT 33
63240: PUSH
63241: LD_INT 34
63243: PUSH
63244: LD_INT 36
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: LIST
63261: LIST
63262: LIST
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: PUSH
63283: LD_INT 101
63285: PUSH
63286: LD_INT 102
63288: PUSH
63289: LD_INT 103
63291: PUSH
63292: LD_INT 104
63294: PUSH
63295: LD_INT 105
63297: PUSH
63298: LD_INT 106
63300: PUSH
63301: LD_INT 107
63303: PUSH
63304: LD_INT 108
63306: PUSH
63307: LD_INT 109
63309: PUSH
63310: LD_INT 110
63312: PUSH
63313: LD_INT 111
63315: PUSH
63316: LD_INT 112
63318: PUSH
63319: LD_INT 113
63321: PUSH
63322: LD_INT 114
63324: PUSH
63325: LD_INT 116
63327: PUSH
63328: LD_INT 117
63330: PUSH
63331: LD_INT 118
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: ST_TO_ADDR
63357: GO 64812
63359: LD_INT 13
63361: DOUBLE
63362: EQUAL
63363: IFTRUE 63367
63365: GO 63575
63367: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
63368: LD_ADDR_VAR 0 2
63372: PUSH
63373: LD_INT 1
63375: PUSH
63376: LD_INT 2
63378: PUSH
63379: LD_INT 3
63381: PUSH
63382: LD_INT 4
63384: PUSH
63385: LD_INT 5
63387: PUSH
63388: LD_INT 8
63390: PUSH
63391: LD_INT 9
63393: PUSH
63394: LD_INT 10
63396: PUSH
63397: LD_INT 11
63399: PUSH
63400: LD_INT 12
63402: PUSH
63403: LD_INT 14
63405: PUSH
63406: LD_INT 15
63408: PUSH
63409: LD_INT 16
63411: PUSH
63412: LD_INT 17
63414: PUSH
63415: LD_INT 18
63417: PUSH
63418: LD_INT 19
63420: PUSH
63421: LD_INT 20
63423: PUSH
63424: LD_INT 21
63426: PUSH
63427: LD_INT 22
63429: PUSH
63430: LD_INT 23
63432: PUSH
63433: LD_INT 24
63435: PUSH
63436: LD_INT 25
63438: PUSH
63439: LD_INT 26
63441: PUSH
63442: LD_INT 27
63444: PUSH
63445: LD_INT 28
63447: PUSH
63448: LD_INT 30
63450: PUSH
63451: LD_INT 31
63453: PUSH
63454: LD_INT 32
63456: PUSH
63457: LD_INT 33
63459: PUSH
63460: LD_INT 34
63462: PUSH
63463: LD_INT 36
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: LIST
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 101
63501: PUSH
63502: LD_INT 102
63504: PUSH
63505: LD_INT 103
63507: PUSH
63508: LD_INT 104
63510: PUSH
63511: LD_INT 105
63513: PUSH
63514: LD_INT 106
63516: PUSH
63517: LD_INT 107
63519: PUSH
63520: LD_INT 108
63522: PUSH
63523: LD_INT 109
63525: PUSH
63526: LD_INT 110
63528: PUSH
63529: LD_INT 111
63531: PUSH
63532: LD_INT 112
63534: PUSH
63535: LD_INT 113
63537: PUSH
63538: LD_INT 114
63540: PUSH
63541: LD_INT 116
63543: PUSH
63544: LD_INT 117
63546: PUSH
63547: LD_INT 118
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: ST_TO_ADDR
63573: GO 64812
63575: LD_INT 14
63577: DOUBLE
63578: EQUAL
63579: IFTRUE 63583
63581: GO 63807
63583: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
63584: LD_ADDR_VAR 0 2
63588: PUSH
63589: LD_INT 1
63591: PUSH
63592: LD_INT 2
63594: PUSH
63595: LD_INT 3
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: LD_INT 5
63603: PUSH
63604: LD_INT 6
63606: PUSH
63607: LD_INT 7
63609: PUSH
63610: LD_INT 8
63612: PUSH
63613: LD_INT 9
63615: PUSH
63616: LD_INT 10
63618: PUSH
63619: LD_INT 11
63621: PUSH
63622: LD_INT 12
63624: PUSH
63625: LD_INT 13
63627: PUSH
63628: LD_INT 14
63630: PUSH
63631: LD_INT 15
63633: PUSH
63634: LD_INT 16
63636: PUSH
63637: LD_INT 17
63639: PUSH
63640: LD_INT 18
63642: PUSH
63643: LD_INT 19
63645: PUSH
63646: LD_INT 20
63648: PUSH
63649: LD_INT 21
63651: PUSH
63652: LD_INT 22
63654: PUSH
63655: LD_INT 23
63657: PUSH
63658: LD_INT 24
63660: PUSH
63661: LD_INT 25
63663: PUSH
63664: LD_INT 26
63666: PUSH
63667: LD_INT 27
63669: PUSH
63670: LD_INT 28
63672: PUSH
63673: LD_INT 29
63675: PUSH
63676: LD_INT 30
63678: PUSH
63679: LD_INT 31
63681: PUSH
63682: LD_INT 32
63684: PUSH
63685: LD_INT 33
63687: PUSH
63688: LD_INT 34
63690: PUSH
63691: LD_INT 36
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: LIST
63704: LIST
63705: LIST
63706: LIST
63707: LIST
63708: LIST
63709: LIST
63710: LIST
63711: LIST
63712: LIST
63713: LIST
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 101
63733: PUSH
63734: LD_INT 102
63736: PUSH
63737: LD_INT 103
63739: PUSH
63740: LD_INT 104
63742: PUSH
63743: LD_INT 105
63745: PUSH
63746: LD_INT 106
63748: PUSH
63749: LD_INT 107
63751: PUSH
63752: LD_INT 108
63754: PUSH
63755: LD_INT 109
63757: PUSH
63758: LD_INT 110
63760: PUSH
63761: LD_INT 111
63763: PUSH
63764: LD_INT 112
63766: PUSH
63767: LD_INT 113
63769: PUSH
63770: LD_INT 114
63772: PUSH
63773: LD_INT 116
63775: PUSH
63776: LD_INT 117
63778: PUSH
63779: LD_INT 118
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: ST_TO_ADDR
63805: GO 64812
63807: LD_INT 15
63809: DOUBLE
63810: EQUAL
63811: IFTRUE 63815
63813: GO 64039
63815: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
63816: LD_ADDR_VAR 0 2
63820: PUSH
63821: LD_INT 1
63823: PUSH
63824: LD_INT 2
63826: PUSH
63827: LD_INT 3
63829: PUSH
63830: LD_INT 4
63832: PUSH
63833: LD_INT 5
63835: PUSH
63836: LD_INT 6
63838: PUSH
63839: LD_INT 7
63841: PUSH
63842: LD_INT 8
63844: PUSH
63845: LD_INT 9
63847: PUSH
63848: LD_INT 10
63850: PUSH
63851: LD_INT 11
63853: PUSH
63854: LD_INT 12
63856: PUSH
63857: LD_INT 13
63859: PUSH
63860: LD_INT 14
63862: PUSH
63863: LD_INT 15
63865: PUSH
63866: LD_INT 16
63868: PUSH
63869: LD_INT 17
63871: PUSH
63872: LD_INT 18
63874: PUSH
63875: LD_INT 19
63877: PUSH
63878: LD_INT 20
63880: PUSH
63881: LD_INT 21
63883: PUSH
63884: LD_INT 22
63886: PUSH
63887: LD_INT 23
63889: PUSH
63890: LD_INT 24
63892: PUSH
63893: LD_INT 25
63895: PUSH
63896: LD_INT 26
63898: PUSH
63899: LD_INT 27
63901: PUSH
63902: LD_INT 28
63904: PUSH
63905: LD_INT 29
63907: PUSH
63908: LD_INT 30
63910: PUSH
63911: LD_INT 31
63913: PUSH
63914: LD_INT 32
63916: PUSH
63917: LD_INT 33
63919: PUSH
63920: LD_INT 34
63922: PUSH
63923: LD_INT 36
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 101
63965: PUSH
63966: LD_INT 102
63968: PUSH
63969: LD_INT 103
63971: PUSH
63972: LD_INT 104
63974: PUSH
63975: LD_INT 105
63977: PUSH
63978: LD_INT 106
63980: PUSH
63981: LD_INT 107
63983: PUSH
63984: LD_INT 108
63986: PUSH
63987: LD_INT 109
63989: PUSH
63990: LD_INT 110
63992: PUSH
63993: LD_INT 111
63995: PUSH
63996: LD_INT 112
63998: PUSH
63999: LD_INT 113
64001: PUSH
64002: LD_INT 114
64004: PUSH
64005: LD_INT 116
64007: PUSH
64008: LD_INT 117
64010: PUSH
64011: LD_INT 118
64013: PUSH
64014: EMPTY
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: ST_TO_ADDR
64037: GO 64812
64039: LD_INT 16
64041: DOUBLE
64042: EQUAL
64043: IFTRUE 64047
64045: GO 64183
64047: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
64048: LD_ADDR_VAR 0 2
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: LD_INT 4
64058: PUSH
64059: LD_INT 5
64061: PUSH
64062: LD_INT 7
64064: PUSH
64065: LD_INT 11
64067: PUSH
64068: LD_INT 12
64070: PUSH
64071: LD_INT 15
64073: PUSH
64074: LD_INT 16
64076: PUSH
64077: LD_INT 20
64079: PUSH
64080: LD_INT 21
64082: PUSH
64083: LD_INT 22
64085: PUSH
64086: LD_INT 23
64088: PUSH
64089: LD_INT 25
64091: PUSH
64092: LD_INT 26
64094: PUSH
64095: LD_INT 30
64097: PUSH
64098: LD_INT 31
64100: PUSH
64101: LD_INT 32
64103: PUSH
64104: LD_INT 33
64106: PUSH
64107: LD_INT 34
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: PUSH
64131: LD_INT 101
64133: PUSH
64134: LD_INT 102
64136: PUSH
64137: LD_INT 103
64139: PUSH
64140: LD_INT 106
64142: PUSH
64143: LD_INT 108
64145: PUSH
64146: LD_INT 112
64148: PUSH
64149: LD_INT 113
64151: PUSH
64152: LD_INT 114
64154: PUSH
64155: LD_INT 116
64157: PUSH
64158: LD_INT 117
64160: PUSH
64161: LD_INT 118
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: ST_TO_ADDR
64181: GO 64812
64183: LD_INT 17
64185: DOUBLE
64186: EQUAL
64187: IFTRUE 64191
64189: GO 64415
64191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
64192: LD_ADDR_VAR 0 2
64196: PUSH
64197: LD_INT 1
64199: PUSH
64200: LD_INT 2
64202: PUSH
64203: LD_INT 3
64205: PUSH
64206: LD_INT 4
64208: PUSH
64209: LD_INT 5
64211: PUSH
64212: LD_INT 6
64214: PUSH
64215: LD_INT 7
64217: PUSH
64218: LD_INT 8
64220: PUSH
64221: LD_INT 9
64223: PUSH
64224: LD_INT 10
64226: PUSH
64227: LD_INT 11
64229: PUSH
64230: LD_INT 12
64232: PUSH
64233: LD_INT 13
64235: PUSH
64236: LD_INT 14
64238: PUSH
64239: LD_INT 15
64241: PUSH
64242: LD_INT 16
64244: PUSH
64245: LD_INT 17
64247: PUSH
64248: LD_INT 18
64250: PUSH
64251: LD_INT 19
64253: PUSH
64254: LD_INT 20
64256: PUSH
64257: LD_INT 21
64259: PUSH
64260: LD_INT 22
64262: PUSH
64263: LD_INT 23
64265: PUSH
64266: LD_INT 24
64268: PUSH
64269: LD_INT 25
64271: PUSH
64272: LD_INT 26
64274: PUSH
64275: LD_INT 27
64277: PUSH
64278: LD_INT 28
64280: PUSH
64281: LD_INT 29
64283: PUSH
64284: LD_INT 30
64286: PUSH
64287: LD_INT 31
64289: PUSH
64290: LD_INT 32
64292: PUSH
64293: LD_INT 33
64295: PUSH
64296: LD_INT 34
64298: PUSH
64299: LD_INT 36
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: LIST
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: LIST
64334: LIST
64335: LIST
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 101
64341: PUSH
64342: LD_INT 102
64344: PUSH
64345: LD_INT 103
64347: PUSH
64348: LD_INT 104
64350: PUSH
64351: LD_INT 105
64353: PUSH
64354: LD_INT 106
64356: PUSH
64357: LD_INT 107
64359: PUSH
64360: LD_INT 108
64362: PUSH
64363: LD_INT 109
64365: PUSH
64366: LD_INT 110
64368: PUSH
64369: LD_INT 111
64371: PUSH
64372: LD_INT 112
64374: PUSH
64375: LD_INT 113
64377: PUSH
64378: LD_INT 114
64380: PUSH
64381: LD_INT 116
64383: PUSH
64384: LD_INT 117
64386: PUSH
64387: LD_INT 118
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: LIST
64403: LIST
64404: LIST
64405: LIST
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: ST_TO_ADDR
64413: GO 64812
64415: LD_INT 18
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64423
64421: GO 64571
64423: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
64424: LD_ADDR_VAR 0 2
64428: PUSH
64429: LD_INT 2
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: LD_INT 5
64437: PUSH
64438: LD_INT 7
64440: PUSH
64441: LD_INT 11
64443: PUSH
64444: LD_INT 12
64446: PUSH
64447: LD_INT 15
64449: PUSH
64450: LD_INT 16
64452: PUSH
64453: LD_INT 20
64455: PUSH
64456: LD_INT 21
64458: PUSH
64459: LD_INT 22
64461: PUSH
64462: LD_INT 23
64464: PUSH
64465: LD_INT 25
64467: PUSH
64468: LD_INT 26
64470: PUSH
64471: LD_INT 30
64473: PUSH
64474: LD_INT 31
64476: PUSH
64477: LD_INT 32
64479: PUSH
64480: LD_INT 33
64482: PUSH
64483: LD_INT 34
64485: PUSH
64486: LD_INT 35
64488: PUSH
64489: LD_INT 36
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: LIST
64496: LIST
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: LIST
64511: LIST
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 101
64517: PUSH
64518: LD_INT 102
64520: PUSH
64521: LD_INT 103
64523: PUSH
64524: LD_INT 106
64526: PUSH
64527: LD_INT 108
64529: PUSH
64530: LD_INT 112
64532: PUSH
64533: LD_INT 113
64535: PUSH
64536: LD_INT 114
64538: PUSH
64539: LD_INT 115
64541: PUSH
64542: LD_INT 116
64544: PUSH
64545: LD_INT 117
64547: PUSH
64548: LD_INT 118
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: ST_TO_ADDR
64569: GO 64812
64571: LD_INT 19
64573: DOUBLE
64574: EQUAL
64575: IFTRUE 64579
64577: GO 64811
64579: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
64580: LD_ADDR_VAR 0 2
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: LD_INT 3
64593: PUSH
64594: LD_INT 4
64596: PUSH
64597: LD_INT 5
64599: PUSH
64600: LD_INT 6
64602: PUSH
64603: LD_INT 7
64605: PUSH
64606: LD_INT 8
64608: PUSH
64609: LD_INT 9
64611: PUSH
64612: LD_INT 10
64614: PUSH
64615: LD_INT 11
64617: PUSH
64618: LD_INT 12
64620: PUSH
64621: LD_INT 13
64623: PUSH
64624: LD_INT 14
64626: PUSH
64627: LD_INT 15
64629: PUSH
64630: LD_INT 16
64632: PUSH
64633: LD_INT 17
64635: PUSH
64636: LD_INT 18
64638: PUSH
64639: LD_INT 19
64641: PUSH
64642: LD_INT 20
64644: PUSH
64645: LD_INT 21
64647: PUSH
64648: LD_INT 22
64650: PUSH
64651: LD_INT 23
64653: PUSH
64654: LD_INT 24
64656: PUSH
64657: LD_INT 25
64659: PUSH
64660: LD_INT 26
64662: PUSH
64663: LD_INT 27
64665: PUSH
64666: LD_INT 28
64668: PUSH
64669: LD_INT 29
64671: PUSH
64672: LD_INT 30
64674: PUSH
64675: LD_INT 31
64677: PUSH
64678: LD_INT 32
64680: PUSH
64681: LD_INT 33
64683: PUSH
64684: LD_INT 34
64686: PUSH
64687: LD_INT 35
64689: PUSH
64690: LD_INT 36
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 101
64733: PUSH
64734: LD_INT 102
64736: PUSH
64737: LD_INT 103
64739: PUSH
64740: LD_INT 104
64742: PUSH
64743: LD_INT 105
64745: PUSH
64746: LD_INT 106
64748: PUSH
64749: LD_INT 107
64751: PUSH
64752: LD_INT 108
64754: PUSH
64755: LD_INT 109
64757: PUSH
64758: LD_INT 110
64760: PUSH
64761: LD_INT 111
64763: PUSH
64764: LD_INT 112
64766: PUSH
64767: LD_INT 113
64769: PUSH
64770: LD_INT 114
64772: PUSH
64773: LD_INT 115
64775: PUSH
64776: LD_INT 116
64778: PUSH
64779: LD_INT 117
64781: PUSH
64782: LD_INT 118
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: LIST
64789: LIST
64790: LIST
64791: LIST
64792: LIST
64793: LIST
64794: LIST
64795: LIST
64796: LIST
64797: LIST
64798: LIST
64799: LIST
64800: LIST
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: ST_TO_ADDR
64809: GO 64812
64811: POP
// end else
64812: GO 65043
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
64814: LD_ADDR_VAR 0 2
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: LD_INT 3
64827: PUSH
64828: LD_INT 4
64830: PUSH
64831: LD_INT 5
64833: PUSH
64834: LD_INT 6
64836: PUSH
64837: LD_INT 7
64839: PUSH
64840: LD_INT 8
64842: PUSH
64843: LD_INT 9
64845: PUSH
64846: LD_INT 10
64848: PUSH
64849: LD_INT 11
64851: PUSH
64852: LD_INT 12
64854: PUSH
64855: LD_INT 13
64857: PUSH
64858: LD_INT 14
64860: PUSH
64861: LD_INT 15
64863: PUSH
64864: LD_INT 16
64866: PUSH
64867: LD_INT 17
64869: PUSH
64870: LD_INT 18
64872: PUSH
64873: LD_INT 19
64875: PUSH
64876: LD_INT 20
64878: PUSH
64879: LD_INT 21
64881: PUSH
64882: LD_INT 22
64884: PUSH
64885: LD_INT 23
64887: PUSH
64888: LD_INT 24
64890: PUSH
64891: LD_INT 25
64893: PUSH
64894: LD_INT 26
64896: PUSH
64897: LD_INT 27
64899: PUSH
64900: LD_INT 28
64902: PUSH
64903: LD_INT 29
64905: PUSH
64906: LD_INT 30
64908: PUSH
64909: LD_INT 31
64911: PUSH
64912: LD_INT 32
64914: PUSH
64915: LD_INT 33
64917: PUSH
64918: LD_INT 34
64920: PUSH
64921: LD_INT 35
64923: PUSH
64924: LD_INT 36
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: LIST
64950: LIST
64951: LIST
64952: LIST
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: PUSH
64965: LD_INT 101
64967: PUSH
64968: LD_INT 102
64970: PUSH
64971: LD_INT 103
64973: PUSH
64974: LD_INT 104
64976: PUSH
64977: LD_INT 105
64979: PUSH
64980: LD_INT 106
64982: PUSH
64983: LD_INT 107
64985: PUSH
64986: LD_INT 108
64988: PUSH
64989: LD_INT 109
64991: PUSH
64992: LD_INT 110
64994: PUSH
64995: LD_INT 111
64997: PUSH
64998: LD_INT 112
65000: PUSH
65001: LD_INT 113
65003: PUSH
65004: LD_INT 114
65006: PUSH
65007: LD_INT 115
65009: PUSH
65010: LD_INT 116
65012: PUSH
65013: LD_INT 117
65015: PUSH
65016: LD_INT 118
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: LIST
65033: LIST
65034: LIST
65035: LIST
65036: LIST
65037: LIST
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: ST_TO_ADDR
// if result then
65043: LD_VAR 0 2
65047: IFFALSE 65833
// begin normal :=  ;
65049: LD_ADDR_VAR 0 5
65053: PUSH
65054: LD_STRING 
65056: ST_TO_ADDR
// hardcore :=  ;
65057: LD_ADDR_VAR 0 6
65061: PUSH
65062: LD_STRING 
65064: ST_TO_ADDR
// active :=  ;
65065: LD_ADDR_VAR 0 7
65069: PUSH
65070: LD_STRING 
65072: ST_TO_ADDR
// for i = 1 to normalCounter do
65073: LD_ADDR_VAR 0 8
65077: PUSH
65078: DOUBLE
65079: LD_INT 1
65081: DEC
65082: ST_TO_ADDR
65083: LD_EXP 52
65087: PUSH
65088: FOR_TO
65089: IFFALSE 65190
// begin tmp := 0 ;
65091: LD_ADDR_VAR 0 3
65095: PUSH
65096: LD_STRING 0
65098: ST_TO_ADDR
// if result [ 1 ] then
65099: LD_VAR 0 2
65103: PUSH
65104: LD_INT 1
65106: ARRAY
65107: IFFALSE 65172
// if result [ 1 ] [ 1 ] = i then
65109: LD_VAR 0 2
65113: PUSH
65114: LD_INT 1
65116: ARRAY
65117: PUSH
65118: LD_INT 1
65120: ARRAY
65121: PUSH
65122: LD_VAR 0 8
65126: EQUAL
65127: IFFALSE 65172
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
65129: LD_ADDR_VAR 0 2
65133: PUSH
65134: LD_VAR 0 2
65138: PPUSH
65139: LD_INT 1
65141: PPUSH
65142: LD_VAR 0 2
65146: PUSH
65147: LD_INT 1
65149: ARRAY
65150: PPUSH
65151: LD_INT 1
65153: PPUSH
65154: CALL_OW 3
65158: PPUSH
65159: CALL_OW 1
65163: ST_TO_ADDR
// tmp := 1 ;
65164: LD_ADDR_VAR 0 3
65168: PUSH
65169: LD_STRING 1
65171: ST_TO_ADDR
// end ; normal := normal & tmp ;
65172: LD_ADDR_VAR 0 5
65176: PUSH
65177: LD_VAR 0 5
65181: PUSH
65182: LD_VAR 0 3
65186: STR
65187: ST_TO_ADDR
// end ;
65188: GO 65088
65190: POP
65191: POP
// for i = 1 to hardcoreCounter do
65192: LD_ADDR_VAR 0 8
65196: PUSH
65197: DOUBLE
65198: LD_INT 1
65200: DEC
65201: ST_TO_ADDR
65202: LD_EXP 53
65206: PUSH
65207: FOR_TO
65208: IFFALSE 65313
// begin tmp := 0 ;
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_STRING 0
65217: ST_TO_ADDR
// if result [ 2 ] then
65218: LD_VAR 0 2
65222: PUSH
65223: LD_INT 2
65225: ARRAY
65226: IFFALSE 65295
// if result [ 2 ] [ 1 ] = 100 + i then
65228: LD_VAR 0 2
65232: PUSH
65233: LD_INT 2
65235: ARRAY
65236: PUSH
65237: LD_INT 1
65239: ARRAY
65240: PUSH
65241: LD_INT 100
65243: PUSH
65244: LD_VAR 0 8
65248: PLUS
65249: EQUAL
65250: IFFALSE 65295
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
65252: LD_ADDR_VAR 0 2
65256: PUSH
65257: LD_VAR 0 2
65261: PPUSH
65262: LD_INT 2
65264: PPUSH
65265: LD_VAR 0 2
65269: PUSH
65270: LD_INT 2
65272: ARRAY
65273: PPUSH
65274: LD_INT 1
65276: PPUSH
65277: CALL_OW 3
65281: PPUSH
65282: CALL_OW 1
65286: ST_TO_ADDR
// tmp := 1 ;
65287: LD_ADDR_VAR 0 3
65291: PUSH
65292: LD_STRING 1
65294: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
65295: LD_ADDR_VAR 0 6
65299: PUSH
65300: LD_VAR 0 6
65304: PUSH
65305: LD_VAR 0 3
65309: STR
65310: ST_TO_ADDR
// end ;
65311: GO 65207
65313: POP
65314: POP
// if isGameLoad then
65315: LD_VAR 0 1
65319: IFFALSE 65794
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
65321: LD_ADDR_VAR 0 4
65325: PUSH
65326: LD_EXP 56
65330: PUSH
65331: LD_EXP 55
65335: PUSH
65336: LD_EXP 57
65340: PUSH
65341: LD_EXP 54
65345: PUSH
65346: LD_EXP 58
65350: PUSH
65351: LD_EXP 59
65355: PUSH
65356: LD_EXP 60
65360: PUSH
65361: LD_EXP 61
65365: PUSH
65366: LD_EXP 62
65370: PUSH
65371: LD_EXP 63
65375: PUSH
65376: LD_EXP 64
65380: PUSH
65381: LD_EXP 65
65385: PUSH
65386: LD_EXP 66
65390: PUSH
65391: LD_EXP 67
65395: PUSH
65396: LD_EXP 75
65400: PUSH
65401: LD_EXP 76
65405: PUSH
65406: LD_EXP 77
65410: PUSH
65411: LD_EXP 78
65415: PUSH
65416: LD_EXP 80
65420: PUSH
65421: LD_EXP 81
65425: PUSH
65426: LD_EXP 82
65430: PUSH
65431: LD_EXP 85
65435: PUSH
65436: LD_EXP 87
65440: PUSH
65441: LD_EXP 88
65445: PUSH
65446: LD_EXP 89
65450: PUSH
65451: LD_EXP 91
65455: PUSH
65456: LD_EXP 92
65460: PUSH
65461: LD_EXP 95
65465: PUSH
65466: LD_EXP 96
65470: PUSH
65471: LD_EXP 97
65475: PUSH
65476: LD_EXP 98
65480: PUSH
65481: LD_EXP 99
65485: PUSH
65486: LD_EXP 100
65490: PUSH
65491: LD_EXP 101
65495: PUSH
65496: LD_EXP 102
65500: PUSH
65501: LD_EXP 103
65505: PUSH
65506: LD_EXP 68
65510: PUSH
65511: LD_EXP 69
65515: PUSH
65516: LD_EXP 72
65520: PUSH
65521: LD_EXP 73
65525: PUSH
65526: LD_EXP 74
65530: PUSH
65531: LD_EXP 70
65535: PUSH
65536: LD_EXP 71
65540: PUSH
65541: LD_EXP 79
65545: PUSH
65546: LD_EXP 83
65550: PUSH
65551: LD_EXP 84
65555: PUSH
65556: LD_EXP 86
65560: PUSH
65561: LD_EXP 90
65565: PUSH
65566: LD_EXP 93
65570: PUSH
65571: LD_EXP 94
65575: PUSH
65576: LD_EXP 104
65580: PUSH
65581: LD_EXP 105
65585: PUSH
65586: LD_EXP 106
65590: PUSH
65591: LD_EXP 107
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: LIST
65600: LIST
65601: LIST
65602: LIST
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: LIST
65623: LIST
65624: LIST
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: ST_TO_ADDR
// tmp :=  ;
65652: LD_ADDR_VAR 0 3
65656: PUSH
65657: LD_STRING 
65659: ST_TO_ADDR
// for i = 1 to normalCounter do
65660: LD_ADDR_VAR 0 8
65664: PUSH
65665: DOUBLE
65666: LD_INT 1
65668: DEC
65669: ST_TO_ADDR
65670: LD_EXP 52
65674: PUSH
65675: FOR_TO
65676: IFFALSE 65712
// begin if flags [ i ] then
65678: LD_VAR 0 4
65682: PUSH
65683: LD_VAR 0 8
65687: ARRAY
65688: IFFALSE 65710
// tmp := tmp & i & ; ;
65690: LD_ADDR_VAR 0 3
65694: PUSH
65695: LD_VAR 0 3
65699: PUSH
65700: LD_VAR 0 8
65704: STR
65705: PUSH
65706: LD_STRING ;
65708: STR
65709: ST_TO_ADDR
// end ;
65710: GO 65675
65712: POP
65713: POP
// for i = 1 to hardcoreCounter do
65714: LD_ADDR_VAR 0 8
65718: PUSH
65719: DOUBLE
65720: LD_INT 1
65722: DEC
65723: ST_TO_ADDR
65724: LD_EXP 53
65728: PUSH
65729: FOR_TO
65730: IFFALSE 65776
// begin if flags [ normalCounter + i ] then
65732: LD_VAR 0 4
65736: PUSH
65737: LD_EXP 52
65741: PUSH
65742: LD_VAR 0 8
65746: PLUS
65747: ARRAY
65748: IFFALSE 65774
// tmp := tmp & ( 100 + i ) & ; ;
65750: LD_ADDR_VAR 0 3
65754: PUSH
65755: LD_VAR 0 3
65759: PUSH
65760: LD_INT 100
65762: PUSH
65763: LD_VAR 0 8
65767: PLUS
65768: STR
65769: PUSH
65770: LD_STRING ;
65772: STR
65773: ST_TO_ADDR
// end ;
65774: GO 65729
65776: POP
65777: POP
// if tmp then
65778: LD_VAR 0 3
65782: IFFALSE 65794
// active := tmp ;
65784: LD_ADDR_VAR 0 7
65788: PUSH
65789: LD_VAR 0 3
65793: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
65794: LD_STRING getStreamItemsFromMission("
65796: PUSH
65797: LD_VAR 0 5
65801: STR
65802: PUSH
65803: LD_STRING ","
65805: STR
65806: PUSH
65807: LD_VAR 0 6
65811: STR
65812: PUSH
65813: LD_STRING ","
65815: STR
65816: PUSH
65817: LD_VAR 0 7
65821: STR
65822: PUSH
65823: LD_STRING ")
65825: STR
65826: PPUSH
65827: CALL_OW 559
// end else
65831: GO 65840
// ToLua ( getStreamItemsFromMission("","","") ) ;
65833: LD_STRING getStreamItemsFromMission("","","")
65835: PPUSH
65836: CALL_OW 559
// end ;
65840: LD_VAR 0 2
65844: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
65845: LD_EXP 51
65849: PUSH
65850: LD_EXP 56
65854: AND
65855: IFFALSE 65979
65857: GO 65859
65859: DISABLE
65860: LD_INT 0
65862: PPUSH
65863: PPUSH
// begin enable ;
65864: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
65865: LD_ADDR_VAR 0 2
65869: PUSH
65870: LD_INT 22
65872: PUSH
65873: LD_OWVAR 2
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 2
65884: PUSH
65885: LD_INT 34
65887: PUSH
65888: LD_INT 7
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 34
65897: PUSH
65898: LD_INT 45
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 34
65907: PUSH
65908: LD_INT 28
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 34
65917: PUSH
65918: LD_INT 47
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PPUSH
65936: CALL_OW 69
65940: ST_TO_ADDR
// if not tmp then
65941: LD_VAR 0 2
65945: NOT
65946: IFFALSE 65950
// exit ;
65948: GO 65979
// for i in tmp do
65950: LD_ADDR_VAR 0 1
65954: PUSH
65955: LD_VAR 0 2
65959: PUSH
65960: FOR_IN
65961: IFFALSE 65977
// begin SetLives ( i , 0 ) ;
65963: LD_VAR 0 1
65967: PPUSH
65968: LD_INT 0
65970: PPUSH
65971: CALL_OW 234
// end ;
65975: GO 65960
65977: POP
65978: POP
// end ;
65979: PPOPN 2
65981: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
65982: LD_EXP 51
65986: PUSH
65987: LD_EXP 57
65991: AND
65992: IFFALSE 66076
65994: GO 65996
65996: DISABLE
65997: LD_INT 0
65999: PPUSH
66000: PPUSH
// begin enable ;
66001: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
66002: LD_ADDR_VAR 0 2
66006: PUSH
66007: LD_INT 22
66009: PUSH
66010: LD_OWVAR 2
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 32
66021: PUSH
66022: LD_INT 3
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PPUSH
66033: CALL_OW 69
66037: ST_TO_ADDR
// if not tmp then
66038: LD_VAR 0 2
66042: NOT
66043: IFFALSE 66047
// exit ;
66045: GO 66076
// for i in tmp do
66047: LD_ADDR_VAR 0 1
66051: PUSH
66052: LD_VAR 0 2
66056: PUSH
66057: FOR_IN
66058: IFFALSE 66074
// begin SetLives ( i , 0 ) ;
66060: LD_VAR 0 1
66064: PPUSH
66065: LD_INT 0
66067: PPUSH
66068: CALL_OW 234
// end ;
66072: GO 66057
66074: POP
66075: POP
// end ;
66076: PPOPN 2
66078: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
66079: LD_EXP 51
66083: PUSH
66084: LD_EXP 54
66088: AND
66089: IFFALSE 66182
66091: GO 66093
66093: DISABLE
66094: LD_INT 0
66096: PPUSH
// begin enable ;
66097: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
66098: LD_ADDR_VAR 0 1
66102: PUSH
66103: LD_INT 22
66105: PUSH
66106: LD_OWVAR 2
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 2
66117: PUSH
66118: LD_INT 25
66120: PUSH
66121: LD_INT 5
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: LD_INT 25
66130: PUSH
66131: LD_INT 9
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 25
66140: PUSH
66141: LD_INT 8
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PPUSH
66158: CALL_OW 69
66162: PUSH
66163: FOR_IN
66164: IFFALSE 66180
// begin SetClass ( i , 1 ) ;
66166: LD_VAR 0 1
66170: PPUSH
66171: LD_INT 1
66173: PPUSH
66174: CALL_OW 336
// end ;
66178: GO 66163
66180: POP
66181: POP
// end ;
66182: PPOPN 1
66184: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
66185: LD_EXP 51
66189: PUSH
66190: LD_EXP 55
66194: AND
66195: PUSH
66196: LD_OWVAR 65
66200: PUSH
66201: LD_INT 7
66203: LESS
66204: AND
66205: IFFALSE 66219
66207: GO 66209
66209: DISABLE
// begin enable ;
66210: ENABLE
// game_speed := 7 ;
66211: LD_ADDR_OWVAR 65
66215: PUSH
66216: LD_INT 7
66218: ST_TO_ADDR
// end ;
66219: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
66220: LD_EXP 51
66224: PUSH
66225: LD_EXP 58
66229: AND
66230: IFFALSE 66432
66232: GO 66234
66234: DISABLE
66235: LD_INT 0
66237: PPUSH
66238: PPUSH
66239: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66240: LD_ADDR_VAR 0 3
66244: PUSH
66245: LD_INT 81
66247: PUSH
66248: LD_OWVAR 2
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 21
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PPUSH
66271: CALL_OW 69
66275: ST_TO_ADDR
// if not tmp then
66276: LD_VAR 0 3
66280: NOT
66281: IFFALSE 66285
// exit ;
66283: GO 66432
// if tmp > 5 then
66285: LD_VAR 0 3
66289: PUSH
66290: LD_INT 5
66292: GREATER
66293: IFFALSE 66305
// k := 5 else
66295: LD_ADDR_VAR 0 2
66299: PUSH
66300: LD_INT 5
66302: ST_TO_ADDR
66303: GO 66315
// k := tmp ;
66305: LD_ADDR_VAR 0 2
66309: PUSH
66310: LD_VAR 0 3
66314: ST_TO_ADDR
// for i := 1 to k do
66315: LD_ADDR_VAR 0 1
66319: PUSH
66320: DOUBLE
66321: LD_INT 1
66323: DEC
66324: ST_TO_ADDR
66325: LD_VAR 0 2
66329: PUSH
66330: FOR_TO
66331: IFFALSE 66430
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
66333: LD_VAR 0 3
66337: PUSH
66338: LD_VAR 0 1
66342: ARRAY
66343: PPUSH
66344: LD_VAR 0 1
66348: PUSH
66349: LD_INT 4
66351: MOD
66352: PUSH
66353: LD_INT 1
66355: PLUS
66356: PPUSH
66357: CALL_OW 259
66361: PUSH
66362: LD_INT 10
66364: LESS
66365: IFFALSE 66428
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
66367: LD_VAR 0 3
66371: PUSH
66372: LD_VAR 0 1
66376: ARRAY
66377: PPUSH
66378: LD_VAR 0 1
66382: PUSH
66383: LD_INT 4
66385: MOD
66386: PUSH
66387: LD_INT 1
66389: PLUS
66390: PPUSH
66391: LD_VAR 0 3
66395: PUSH
66396: LD_VAR 0 1
66400: ARRAY
66401: PPUSH
66402: LD_VAR 0 1
66406: PUSH
66407: LD_INT 4
66409: MOD
66410: PUSH
66411: LD_INT 1
66413: PLUS
66414: PPUSH
66415: CALL_OW 259
66419: PUSH
66420: LD_INT 1
66422: PLUS
66423: PPUSH
66424: CALL_OW 237
66428: GO 66330
66430: POP
66431: POP
// end ;
66432: PPOPN 3
66434: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
66435: LD_EXP 51
66439: PUSH
66440: LD_EXP 59
66444: AND
66445: IFFALSE 66465
66447: GO 66449
66449: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
66450: LD_INT 4
66452: PPUSH
66453: LD_OWVAR 2
66457: PPUSH
66458: LD_INT 0
66460: PPUSH
66461: CALL_OW 324
66465: END
// every 0 0$1 trigger StreamModeActive and sShovel do
66466: LD_EXP 51
66470: PUSH
66471: LD_EXP 88
66475: AND
66476: IFFALSE 66496
66478: GO 66480
66480: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
66481: LD_INT 19
66483: PPUSH
66484: LD_OWVAR 2
66488: PPUSH
66489: LD_INT 0
66491: PPUSH
66492: CALL_OW 324
66496: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
66497: LD_EXP 51
66501: PUSH
66502: LD_EXP 60
66506: AND
66507: IFFALSE 66609
66509: GO 66511
66511: DISABLE
66512: LD_INT 0
66514: PPUSH
66515: PPUSH
// begin enable ;
66516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
66517: LD_ADDR_VAR 0 2
66521: PUSH
66522: LD_INT 22
66524: PUSH
66525: LD_OWVAR 2
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 2
66536: PUSH
66537: LD_INT 34
66539: PUSH
66540: LD_INT 11
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 34
66549: PUSH
66550: LD_INT 30
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: EMPTY
66563: LIST
66564: LIST
66565: PPUSH
66566: CALL_OW 69
66570: ST_TO_ADDR
// if not tmp then
66571: LD_VAR 0 2
66575: NOT
66576: IFFALSE 66580
// exit ;
66578: GO 66609
// for i in tmp do
66580: LD_ADDR_VAR 0 1
66584: PUSH
66585: LD_VAR 0 2
66589: PUSH
66590: FOR_IN
66591: IFFALSE 66607
// begin SetLives ( i , 0 ) ;
66593: LD_VAR 0 1
66597: PPUSH
66598: LD_INT 0
66600: PPUSH
66601: CALL_OW 234
// end ;
66605: GO 66590
66607: POP
66608: POP
// end ;
66609: PPOPN 2
66611: END
// every 0 0$1 trigger StreamModeActive and sBunker do
66612: LD_EXP 51
66616: PUSH
66617: LD_EXP 61
66621: AND
66622: IFFALSE 66642
66624: GO 66626
66626: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
66627: LD_INT 32
66629: PPUSH
66630: LD_OWVAR 2
66634: PPUSH
66635: LD_INT 0
66637: PPUSH
66638: CALL_OW 324
66642: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
66643: LD_EXP 51
66647: PUSH
66648: LD_EXP 62
66652: AND
66653: IFFALSE 66834
66655: GO 66657
66657: DISABLE
66658: LD_INT 0
66660: PPUSH
66661: PPUSH
66662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
66663: LD_ADDR_VAR 0 2
66667: PUSH
66668: LD_INT 22
66670: PUSH
66671: LD_OWVAR 2
66675: PUSH
66676: EMPTY
66677: LIST
66678: LIST
66679: PUSH
66680: LD_INT 33
66682: PUSH
66683: LD_INT 3
66685: PUSH
66686: EMPTY
66687: LIST
66688: LIST
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PPUSH
66694: CALL_OW 69
66698: ST_TO_ADDR
// if not tmp then
66699: LD_VAR 0 2
66703: NOT
66704: IFFALSE 66708
// exit ;
66706: GO 66834
// side := 0 ;
66708: LD_ADDR_VAR 0 3
66712: PUSH
66713: LD_INT 0
66715: ST_TO_ADDR
// for i := 1 to 8 do
66716: LD_ADDR_VAR 0 1
66720: PUSH
66721: DOUBLE
66722: LD_INT 1
66724: DEC
66725: ST_TO_ADDR
66726: LD_INT 8
66728: PUSH
66729: FOR_TO
66730: IFFALSE 66778
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
66732: LD_OWVAR 2
66736: PUSH
66737: LD_VAR 0 1
66741: NONEQUAL
66742: PUSH
66743: LD_OWVAR 2
66747: PPUSH
66748: LD_VAR 0 1
66752: PPUSH
66753: CALL_OW 81
66757: PUSH
66758: LD_INT 2
66760: EQUAL
66761: AND
66762: IFFALSE 66776
// begin side := i ;
66764: LD_ADDR_VAR 0 3
66768: PUSH
66769: LD_VAR 0 1
66773: ST_TO_ADDR
// break ;
66774: GO 66778
// end ;
66776: GO 66729
66778: POP
66779: POP
// if not side then
66780: LD_VAR 0 3
66784: NOT
66785: IFFALSE 66789
// exit ;
66787: GO 66834
// for i := 1 to tmp do
66789: LD_ADDR_VAR 0 1
66793: PUSH
66794: DOUBLE
66795: LD_INT 1
66797: DEC
66798: ST_TO_ADDR
66799: LD_VAR 0 2
66803: PUSH
66804: FOR_TO
66805: IFFALSE 66832
// if Prob ( 60 ) then
66807: LD_INT 60
66809: PPUSH
66810: CALL_OW 13
66814: IFFALSE 66830
// SetSide ( i , side ) ;
66816: LD_VAR 0 1
66820: PPUSH
66821: LD_VAR 0 3
66825: PPUSH
66826: CALL_OW 235
66830: GO 66804
66832: POP
66833: POP
// end ;
66834: PPOPN 3
66836: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
66837: LD_EXP 51
66841: PUSH
66842: LD_EXP 64
66846: AND
66847: IFFALSE 66966
66849: GO 66851
66851: DISABLE
66852: LD_INT 0
66854: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
66855: LD_ADDR_VAR 0 1
66859: PUSH
66860: LD_INT 22
66862: PUSH
66863: LD_OWVAR 2
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 21
66874: PUSH
66875: LD_INT 1
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: PUSH
66882: LD_INT 3
66884: PUSH
66885: LD_INT 23
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: LIST
66903: PPUSH
66904: CALL_OW 69
66908: PUSH
66909: FOR_IN
66910: IFFALSE 66964
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
66912: LD_VAR 0 1
66916: PPUSH
66917: CALL_OW 257
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 3
66930: PUSH
66931: LD_INT 4
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: IN
66940: IFFALSE 66962
// SetClass ( un , rand ( 1 , 4 ) ) ;
66942: LD_VAR 0 1
66946: PPUSH
66947: LD_INT 1
66949: PPUSH
66950: LD_INT 4
66952: PPUSH
66953: CALL_OW 12
66957: PPUSH
66958: CALL_OW 336
66962: GO 66909
66964: POP
66965: POP
// end ;
66966: PPOPN 1
66968: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
66969: LD_EXP 51
66973: PUSH
66974: LD_EXP 63
66978: AND
66979: IFFALSE 67058
66981: GO 66983
66983: DISABLE
66984: LD_INT 0
66986: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
66987: LD_ADDR_VAR 0 1
66991: PUSH
66992: LD_INT 22
66994: PUSH
66995: LD_OWVAR 2
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 21
67006: PUSH
67007: LD_INT 3
67009: PUSH
67010: EMPTY
67011: LIST
67012: LIST
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PPUSH
67018: CALL_OW 69
67022: ST_TO_ADDR
// if not tmp then
67023: LD_VAR 0 1
67027: NOT
67028: IFFALSE 67032
// exit ;
67030: GO 67058
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
67032: LD_VAR 0 1
67036: PUSH
67037: LD_INT 1
67039: PPUSH
67040: LD_VAR 0 1
67044: PPUSH
67045: CALL_OW 12
67049: ARRAY
67050: PPUSH
67051: LD_INT 100
67053: PPUSH
67054: CALL_OW 234
// end ;
67058: PPOPN 1
67060: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
67061: LD_EXP 51
67065: PUSH
67066: LD_EXP 65
67070: AND
67071: IFFALSE 67169
67073: GO 67075
67075: DISABLE
67076: LD_INT 0
67078: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
67079: LD_ADDR_VAR 0 1
67083: PUSH
67084: LD_INT 22
67086: PUSH
67087: LD_OWVAR 2
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 21
67098: PUSH
67099: LD_INT 1
67101: PUSH
67102: EMPTY
67103: LIST
67104: LIST
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PPUSH
67110: CALL_OW 69
67114: ST_TO_ADDR
// if not tmp then
67115: LD_VAR 0 1
67119: NOT
67120: IFFALSE 67124
// exit ;
67122: GO 67169
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
67124: LD_VAR 0 1
67128: PUSH
67129: LD_INT 1
67131: PPUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: CALL_OW 12
67141: ARRAY
67142: PPUSH
67143: LD_INT 1
67145: PPUSH
67146: LD_INT 4
67148: PPUSH
67149: CALL_OW 12
67153: PPUSH
67154: LD_INT 3000
67156: PPUSH
67157: LD_INT 9000
67159: PPUSH
67160: CALL_OW 12
67164: PPUSH
67165: CALL_OW 492
// end ;
67169: PPOPN 1
67171: END
// every 0 0$1 trigger StreamModeActive and sDepot do
67172: LD_EXP 51
67176: PUSH
67177: LD_EXP 66
67181: AND
67182: IFFALSE 67202
67184: GO 67186
67186: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
67187: LD_INT 1
67189: PPUSH
67190: LD_OWVAR 2
67194: PPUSH
67195: LD_INT 0
67197: PPUSH
67198: CALL_OW 324
67202: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
67203: LD_EXP 51
67207: PUSH
67208: LD_EXP 67
67212: AND
67213: IFFALSE 67296
67215: GO 67217
67217: DISABLE
67218: LD_INT 0
67220: PPUSH
67221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
67222: LD_ADDR_VAR 0 2
67226: PUSH
67227: LD_INT 22
67229: PUSH
67230: LD_OWVAR 2
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 21
67241: PUSH
67242: LD_INT 3
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PPUSH
67253: CALL_OW 69
67257: ST_TO_ADDR
// if not tmp then
67258: LD_VAR 0 2
67262: NOT
67263: IFFALSE 67267
// exit ;
67265: GO 67296
// for i in tmp do
67267: LD_ADDR_VAR 0 1
67271: PUSH
67272: LD_VAR 0 2
67276: PUSH
67277: FOR_IN
67278: IFFALSE 67294
// SetBLevel ( i , 10 ) ;
67280: LD_VAR 0 1
67284: PPUSH
67285: LD_INT 10
67287: PPUSH
67288: CALL_OW 241
67292: GO 67277
67294: POP
67295: POP
// end ;
67296: PPOPN 2
67298: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
67299: LD_EXP 51
67303: PUSH
67304: LD_EXP 68
67308: AND
67309: IFFALSE 67420
67311: GO 67313
67313: DISABLE
67314: LD_INT 0
67316: PPUSH
67317: PPUSH
67318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67319: LD_ADDR_VAR 0 3
67323: PUSH
67324: LD_INT 22
67326: PUSH
67327: LD_OWVAR 2
67331: PUSH
67332: EMPTY
67333: LIST
67334: LIST
67335: PUSH
67336: LD_INT 25
67338: PUSH
67339: LD_INT 1
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 69
67354: ST_TO_ADDR
// if not tmp then
67355: LD_VAR 0 3
67359: NOT
67360: IFFALSE 67364
// exit ;
67362: GO 67420
// un := tmp [ rand ( 1 , tmp ) ] ;
67364: LD_ADDR_VAR 0 2
67368: PUSH
67369: LD_VAR 0 3
67373: PUSH
67374: LD_INT 1
67376: PPUSH
67377: LD_VAR 0 3
67381: PPUSH
67382: CALL_OW 12
67386: ARRAY
67387: ST_TO_ADDR
// if Crawls ( un ) then
67388: LD_VAR 0 2
67392: PPUSH
67393: CALL_OW 318
67397: IFFALSE 67408
// ComWalk ( un ) ;
67399: LD_VAR 0 2
67403: PPUSH
67404: CALL_OW 138
// SetClass ( un , class_sniper ) ;
67408: LD_VAR 0 2
67412: PPUSH
67413: LD_INT 5
67415: PPUSH
67416: CALL_OW 336
// end ;
67420: PPOPN 3
67422: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
67423: LD_EXP 51
67427: PUSH
67428: LD_EXP 69
67432: AND
67433: PUSH
67434: LD_OWVAR 67
67438: PUSH
67439: LD_INT 4
67441: LESS
67442: AND
67443: IFFALSE 67462
67445: GO 67447
67447: DISABLE
// begin Difficulty := Difficulty + 1 ;
67448: LD_ADDR_OWVAR 67
67452: PUSH
67453: LD_OWVAR 67
67457: PUSH
67458: LD_INT 1
67460: PLUS
67461: ST_TO_ADDR
// end ;
67462: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
67463: LD_EXP 51
67467: PUSH
67468: LD_EXP 70
67472: AND
67473: IFFALSE 67576
67475: GO 67477
67477: DISABLE
67478: LD_INT 0
67480: PPUSH
// begin for i := 1 to 5 do
67481: LD_ADDR_VAR 0 1
67485: PUSH
67486: DOUBLE
67487: LD_INT 1
67489: DEC
67490: ST_TO_ADDR
67491: LD_INT 5
67493: PUSH
67494: FOR_TO
67495: IFFALSE 67574
// begin uc_nation := nation_nature ;
67497: LD_ADDR_OWVAR 21
67501: PUSH
67502: LD_INT 0
67504: ST_TO_ADDR
// uc_side := 0 ;
67505: LD_ADDR_OWVAR 20
67509: PUSH
67510: LD_INT 0
67512: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
67513: LD_ADDR_OWVAR 29
67517: PUSH
67518: LD_INT 12
67520: PUSH
67521: LD_INT 12
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: ST_TO_ADDR
// hc_agressivity := 20 ;
67528: LD_ADDR_OWVAR 35
67532: PUSH
67533: LD_INT 20
67535: ST_TO_ADDR
// hc_class := class_tiger ;
67536: LD_ADDR_OWVAR 28
67540: PUSH
67541: LD_INT 14
67543: ST_TO_ADDR
// hc_gallery :=  ;
67544: LD_ADDR_OWVAR 33
67548: PUSH
67549: LD_STRING 
67551: ST_TO_ADDR
// hc_name :=  ;
67552: LD_ADDR_OWVAR 26
67556: PUSH
67557: LD_STRING 
67559: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
67560: CALL_OW 44
67564: PPUSH
67565: LD_INT 0
67567: PPUSH
67568: CALL_OW 51
// end ;
67572: GO 67494
67574: POP
67575: POP
// end ;
67576: PPOPN 1
67578: END
// every 0 0$1 trigger StreamModeActive and sBomb do
67579: LD_EXP 51
67583: PUSH
67584: LD_EXP 71
67588: AND
67589: IFFALSE 67598
67591: GO 67593
67593: DISABLE
// StreamSibBomb ;
67594: CALL 67599 0 0
67598: END
// export function StreamSibBomb ; var i , x , y ; begin
67599: LD_INT 0
67601: PPUSH
67602: PPUSH
67603: PPUSH
67604: PPUSH
// result := false ;
67605: LD_ADDR_VAR 0 1
67609: PUSH
67610: LD_INT 0
67612: ST_TO_ADDR
// for i := 1 to 16 do
67613: LD_ADDR_VAR 0 2
67617: PUSH
67618: DOUBLE
67619: LD_INT 1
67621: DEC
67622: ST_TO_ADDR
67623: LD_INT 16
67625: PUSH
67626: FOR_TO
67627: IFFALSE 67826
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67629: LD_ADDR_VAR 0 3
67633: PUSH
67634: LD_INT 10
67636: PUSH
67637: LD_INT 20
67639: PUSH
67640: LD_INT 30
67642: PUSH
67643: LD_INT 40
67645: PUSH
67646: LD_INT 50
67648: PUSH
67649: LD_INT 60
67651: PUSH
67652: LD_INT 70
67654: PUSH
67655: LD_INT 80
67657: PUSH
67658: LD_INT 90
67660: PUSH
67661: LD_INT 100
67663: PUSH
67664: LD_INT 110
67666: PUSH
67667: LD_INT 120
67669: PUSH
67670: LD_INT 130
67672: PUSH
67673: LD_INT 140
67675: PUSH
67676: LD_INT 150
67678: PUSH
67679: EMPTY
67680: LIST
67681: LIST
67682: LIST
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: PUSH
67696: LD_INT 1
67698: PPUSH
67699: LD_INT 15
67701: PPUSH
67702: CALL_OW 12
67706: ARRAY
67707: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
67708: LD_ADDR_VAR 0 4
67712: PUSH
67713: LD_INT 10
67715: PUSH
67716: LD_INT 20
67718: PUSH
67719: LD_INT 30
67721: PUSH
67722: LD_INT 40
67724: PUSH
67725: LD_INT 50
67727: PUSH
67728: LD_INT 60
67730: PUSH
67731: LD_INT 70
67733: PUSH
67734: LD_INT 80
67736: PUSH
67737: LD_INT 90
67739: PUSH
67740: LD_INT 100
67742: PUSH
67743: LD_INT 110
67745: PUSH
67746: LD_INT 120
67748: PUSH
67749: LD_INT 130
67751: PUSH
67752: LD_INT 140
67754: PUSH
67755: LD_INT 150
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: PUSH
67775: LD_INT 1
67777: PPUSH
67778: LD_INT 15
67780: PPUSH
67781: CALL_OW 12
67785: ARRAY
67786: ST_TO_ADDR
// if ValidHex ( x , y ) then
67787: LD_VAR 0 3
67791: PPUSH
67792: LD_VAR 0 4
67796: PPUSH
67797: CALL_OW 488
67801: IFFALSE 67824
// begin result := [ x , y ] ;
67803: LD_ADDR_VAR 0 1
67807: PUSH
67808: LD_VAR 0 3
67812: PUSH
67813: LD_VAR 0 4
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// break ;
67822: GO 67826
// end ; end ;
67824: GO 67626
67826: POP
67827: POP
// if result then
67828: LD_VAR 0 1
67832: IFFALSE 67892
// begin ToLua ( playSibBomb() ) ;
67834: LD_STRING playSibBomb()
67836: PPUSH
67837: CALL_OW 559
// wait ( 0 0$14 ) ;
67841: LD_INT 490
67843: PPUSH
67844: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
67848: LD_VAR 0 1
67852: PUSH
67853: LD_INT 1
67855: ARRAY
67856: PPUSH
67857: LD_VAR 0 1
67861: PUSH
67862: LD_INT 2
67864: ARRAY
67865: PPUSH
67866: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
67870: LD_VAR 0 1
67874: PUSH
67875: LD_INT 1
67877: ARRAY
67878: PPUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_INT 2
67886: ARRAY
67887: PPUSH
67888: CALL_OW 429
// end ; end ;
67892: LD_VAR 0 1
67896: RET
// every 0 0$1 trigger StreamModeActive and sReset do
67897: LD_EXP 51
67901: PUSH
67902: LD_EXP 73
67906: AND
67907: IFFALSE 67919
67909: GO 67911
67911: DISABLE
// YouLost (  ) ;
67912: LD_STRING 
67914: PPUSH
67915: CALL_OW 104
67919: END
// every 0 0$1 trigger StreamModeActive and sFog do
67920: LD_EXP 51
67924: PUSH
67925: LD_EXP 72
67929: AND
67930: IFFALSE 67944
67932: GO 67934
67934: DISABLE
// FogOff ( your_side ) ;
67935: LD_OWVAR 2
67939: PPUSH
67940: CALL_OW 344
67944: END
// every 0 0$1 trigger StreamModeActive and sSun do
67945: LD_EXP 51
67949: PUSH
67950: LD_EXP 74
67954: AND
67955: IFFALSE 67983
67957: GO 67959
67959: DISABLE
// begin solar_recharge_percent := 0 ;
67960: LD_ADDR_OWVAR 79
67964: PUSH
67965: LD_INT 0
67967: ST_TO_ADDR
// wait ( 5 5$00 ) ;
67968: LD_INT 10500
67970: PPUSH
67971: CALL_OW 67
// solar_recharge_percent := 100 ;
67975: LD_ADDR_OWVAR 79
67979: PUSH
67980: LD_INT 100
67982: ST_TO_ADDR
// end ;
67983: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
67984: LD_EXP 51
67988: PUSH
67989: LD_EXP 75
67993: AND
67994: IFFALSE 68233
67996: GO 67998
67998: DISABLE
67999: LD_INT 0
68001: PPUSH
68002: PPUSH
68003: PPUSH
// begin tmp := [ ] ;
68004: LD_ADDR_VAR 0 3
68008: PUSH
68009: EMPTY
68010: ST_TO_ADDR
// for i := 1 to 6 do
68011: LD_ADDR_VAR 0 1
68015: PUSH
68016: DOUBLE
68017: LD_INT 1
68019: DEC
68020: ST_TO_ADDR
68021: LD_INT 6
68023: PUSH
68024: FOR_TO
68025: IFFALSE 68130
// begin uc_nation := nation_nature ;
68027: LD_ADDR_OWVAR 21
68031: PUSH
68032: LD_INT 0
68034: ST_TO_ADDR
// uc_side := 0 ;
68035: LD_ADDR_OWVAR 20
68039: PUSH
68040: LD_INT 0
68042: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
68043: LD_ADDR_OWVAR 29
68047: PUSH
68048: LD_INT 12
68050: PUSH
68051: LD_INT 12
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// hc_agressivity := 20 ;
68058: LD_ADDR_OWVAR 35
68062: PUSH
68063: LD_INT 20
68065: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
68066: LD_ADDR_OWVAR 28
68070: PUSH
68071: LD_INT 17
68073: ST_TO_ADDR
// hc_gallery :=  ;
68074: LD_ADDR_OWVAR 33
68078: PUSH
68079: LD_STRING 
68081: ST_TO_ADDR
// hc_name :=  ;
68082: LD_ADDR_OWVAR 26
68086: PUSH
68087: LD_STRING 
68089: ST_TO_ADDR
// un := CreateHuman ;
68090: LD_ADDR_VAR 0 2
68094: PUSH
68095: CALL_OW 44
68099: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
68100: LD_VAR 0 2
68104: PPUSH
68105: LD_INT 1
68107: PPUSH
68108: CALL_OW 51
// tmp := tmp ^ un ;
68112: LD_ADDR_VAR 0 3
68116: PUSH
68117: LD_VAR 0 3
68121: PUSH
68122: LD_VAR 0 2
68126: ADD
68127: ST_TO_ADDR
// end ;
68128: GO 68024
68130: POP
68131: POP
// repeat wait ( 0 0$1 ) ;
68132: LD_INT 35
68134: PPUSH
68135: CALL_OW 67
// for un in tmp do
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_VAR 0 3
68148: PUSH
68149: FOR_IN
68150: IFFALSE 68224
// begin if IsDead ( un ) then
68152: LD_VAR 0 2
68156: PPUSH
68157: CALL_OW 301
68161: IFFALSE 68181
// begin tmp := tmp diff un ;
68163: LD_ADDR_VAR 0 3
68167: PUSH
68168: LD_VAR 0 3
68172: PUSH
68173: LD_VAR 0 2
68177: DIFF
68178: ST_TO_ADDR
// continue ;
68179: GO 68149
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
68181: LD_VAR 0 2
68185: PPUSH
68186: LD_INT 3
68188: PUSH
68189: LD_INT 22
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: EMPTY
68200: LIST
68201: LIST
68202: PPUSH
68203: CALL_OW 69
68207: PPUSH
68208: LD_VAR 0 2
68212: PPUSH
68213: CALL_OW 74
68217: PPUSH
68218: CALL_OW 115
// end ;
68222: GO 68149
68224: POP
68225: POP
// until not tmp ;
68226: LD_VAR 0 3
68230: NOT
68231: IFFALSE 68132
// end ;
68233: PPOPN 3
68235: END
// every 0 0$1 trigger StreamModeActive and sTroll do
68236: LD_EXP 51
68240: PUSH
68241: LD_EXP 76
68245: AND
68246: IFFALSE 68300
68248: GO 68250
68250: DISABLE
// begin ToLua ( displayTroll(); ) ;
68251: LD_STRING displayTroll();
68253: PPUSH
68254: CALL_OW 559
// wait ( 3 3$00 ) ;
68258: LD_INT 6300
68260: PPUSH
68261: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68265: LD_STRING hideTroll();
68267: PPUSH
68268: CALL_OW 559
// wait ( 1 1$00 ) ;
68272: LD_INT 2100
68274: PPUSH
68275: CALL_OW 67
// ToLua ( displayTroll(); ) ;
68279: LD_STRING displayTroll();
68281: PPUSH
68282: CALL_OW 559
// wait ( 1 1$00 ) ;
68286: LD_INT 2100
68288: PPUSH
68289: CALL_OW 67
// ToLua ( hideTroll(); ) ;
68293: LD_STRING hideTroll();
68295: PPUSH
68296: CALL_OW 559
// end ;
68300: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
68301: LD_EXP 51
68305: PUSH
68306: LD_EXP 77
68310: AND
68311: IFFALSE 68374
68313: GO 68315
68315: DISABLE
68316: LD_INT 0
68318: PPUSH
// begin p := 0 ;
68319: LD_ADDR_VAR 0 1
68323: PUSH
68324: LD_INT 0
68326: ST_TO_ADDR
// repeat game_speed := 1 ;
68327: LD_ADDR_OWVAR 65
68331: PUSH
68332: LD_INT 1
68334: ST_TO_ADDR
// wait ( 0 0$1 ) ;
68335: LD_INT 35
68337: PPUSH
68338: CALL_OW 67
// p := p + 1 ;
68342: LD_ADDR_VAR 0 1
68346: PUSH
68347: LD_VAR 0 1
68351: PUSH
68352: LD_INT 1
68354: PLUS
68355: ST_TO_ADDR
// until p >= 60 ;
68356: LD_VAR 0 1
68360: PUSH
68361: LD_INT 60
68363: GREATEREQUAL
68364: IFFALSE 68327
// game_speed := 4 ;
68366: LD_ADDR_OWVAR 65
68370: PUSH
68371: LD_INT 4
68373: ST_TO_ADDR
// end ;
68374: PPOPN 1
68376: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
68377: LD_EXP 51
68381: PUSH
68382: LD_EXP 78
68386: AND
68387: IFFALSE 68533
68389: GO 68391
68391: DISABLE
68392: LD_INT 0
68394: PPUSH
68395: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68396: LD_ADDR_VAR 0 1
68400: PUSH
68401: LD_INT 22
68403: PUSH
68404: LD_OWVAR 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: PUSH
68416: LD_INT 30
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 30
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: LIST
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PPUSH
68445: CALL_OW 69
68449: ST_TO_ADDR
// if not depot then
68450: LD_VAR 0 1
68454: NOT
68455: IFFALSE 68459
// exit ;
68457: GO 68533
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
68459: LD_ADDR_VAR 0 2
68463: PUSH
68464: LD_VAR 0 1
68468: PUSH
68469: LD_INT 1
68471: PPUSH
68472: LD_VAR 0 1
68476: PPUSH
68477: CALL_OW 12
68481: ARRAY
68482: PPUSH
68483: CALL_OW 274
68487: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
68488: LD_VAR 0 2
68492: PPUSH
68493: LD_INT 1
68495: PPUSH
68496: LD_INT 0
68498: PPUSH
68499: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
68503: LD_VAR 0 2
68507: PPUSH
68508: LD_INT 2
68510: PPUSH
68511: LD_INT 0
68513: PPUSH
68514: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
68518: LD_VAR 0 2
68522: PPUSH
68523: LD_INT 3
68525: PPUSH
68526: LD_INT 0
68528: PPUSH
68529: CALL_OW 277
// end ;
68533: PPOPN 2
68535: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
68536: LD_EXP 51
68540: PUSH
68541: LD_EXP 79
68545: AND
68546: IFFALSE 68643
68548: GO 68550
68550: DISABLE
68551: LD_INT 0
68553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68554: LD_ADDR_VAR 0 1
68558: PUSH
68559: LD_INT 22
68561: PUSH
68562: LD_OWVAR 2
68566: PUSH
68567: EMPTY
68568: LIST
68569: LIST
68570: PUSH
68571: LD_INT 21
68573: PUSH
68574: LD_INT 1
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: PUSH
68584: LD_INT 23
68586: PUSH
68587: LD_INT 0
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: LIST
68602: PPUSH
68603: CALL_OW 69
68607: ST_TO_ADDR
// if not tmp then
68608: LD_VAR 0 1
68612: NOT
68613: IFFALSE 68617
// exit ;
68615: GO 68643
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
68617: LD_VAR 0 1
68621: PUSH
68622: LD_INT 1
68624: PPUSH
68625: LD_VAR 0 1
68629: PPUSH
68630: CALL_OW 12
68634: ARRAY
68635: PPUSH
68636: LD_INT 200
68638: PPUSH
68639: CALL_OW 234
// end ;
68643: PPOPN 1
68645: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
68646: LD_EXP 51
68650: PUSH
68651: LD_EXP 80
68655: AND
68656: IFFALSE 68735
68658: GO 68660
68660: DISABLE
68661: LD_INT 0
68663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
68664: LD_ADDR_VAR 0 1
68668: PUSH
68669: LD_INT 22
68671: PUSH
68672: LD_OWVAR 2
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 21
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PPUSH
68695: CALL_OW 69
68699: ST_TO_ADDR
// if not tmp then
68700: LD_VAR 0 1
68704: NOT
68705: IFFALSE 68709
// exit ;
68707: GO 68735
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
68709: LD_VAR 0 1
68713: PUSH
68714: LD_INT 1
68716: PPUSH
68717: LD_VAR 0 1
68721: PPUSH
68722: CALL_OW 12
68726: ARRAY
68727: PPUSH
68728: LD_INT 60
68730: PPUSH
68731: CALL_OW 234
// end ;
68735: PPOPN 1
68737: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
68738: LD_EXP 51
68742: PUSH
68743: LD_EXP 81
68747: AND
68748: IFFALSE 68847
68750: GO 68752
68752: DISABLE
68753: LD_INT 0
68755: PPUSH
68756: PPUSH
// begin enable ;
68757: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
68758: LD_ADDR_VAR 0 1
68762: PUSH
68763: LD_INT 22
68765: PUSH
68766: LD_OWVAR 2
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 61
68777: PUSH
68778: EMPTY
68779: LIST
68780: PUSH
68781: LD_INT 33
68783: PUSH
68784: LD_INT 2
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: EMPTY
68792: LIST
68793: LIST
68794: LIST
68795: PPUSH
68796: CALL_OW 69
68800: ST_TO_ADDR
// if not tmp then
68801: LD_VAR 0 1
68805: NOT
68806: IFFALSE 68810
// exit ;
68808: GO 68847
// for i in tmp do
68810: LD_ADDR_VAR 0 2
68814: PUSH
68815: LD_VAR 0 1
68819: PUSH
68820: FOR_IN
68821: IFFALSE 68845
// if IsControledBy ( i ) then
68823: LD_VAR 0 2
68827: PPUSH
68828: CALL_OW 312
68832: IFFALSE 68843
// ComUnlink ( i ) ;
68834: LD_VAR 0 2
68838: PPUSH
68839: CALL_OW 136
68843: GO 68820
68845: POP
68846: POP
// end ;
68847: PPOPN 2
68849: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
68850: LD_EXP 51
68854: PUSH
68855: LD_EXP 82
68859: AND
68860: IFFALSE 69000
68862: GO 68864
68864: DISABLE
68865: LD_INT 0
68867: PPUSH
68868: PPUSH
// begin ToLua ( displayPowell(); ) ;
68869: LD_STRING displayPowell();
68871: PPUSH
68872: CALL_OW 559
// uc_side := 0 ;
68876: LD_ADDR_OWVAR 20
68880: PUSH
68881: LD_INT 0
68883: ST_TO_ADDR
// uc_nation := 2 ;
68884: LD_ADDR_OWVAR 21
68888: PUSH
68889: LD_INT 2
68891: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
68892: LD_ADDR_OWVAR 37
68896: PUSH
68897: LD_INT 14
68899: ST_TO_ADDR
// vc_engine := engine_siberite ;
68900: LD_ADDR_OWVAR 39
68904: PUSH
68905: LD_INT 3
68907: ST_TO_ADDR
// vc_control := control_apeman ;
68908: LD_ADDR_OWVAR 38
68912: PUSH
68913: LD_INT 5
68915: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
68916: LD_ADDR_OWVAR 40
68920: PUSH
68921: LD_INT 29
68923: ST_TO_ADDR
// un := CreateVehicle ;
68924: LD_ADDR_VAR 0 2
68928: PUSH
68929: CALL_OW 45
68933: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
68934: LD_VAR 0 2
68938: PPUSH
68939: LD_INT 1
68941: PPUSH
68942: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
68946: LD_INT 35
68948: PPUSH
68949: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
68953: LD_VAR 0 2
68957: PPUSH
68958: LD_INT 22
68960: PUSH
68961: LD_OWVAR 2
68965: PUSH
68966: EMPTY
68967: LIST
68968: LIST
68969: PPUSH
68970: CALL_OW 69
68974: PPUSH
68975: LD_VAR 0 2
68979: PPUSH
68980: CALL_OW 74
68984: PPUSH
68985: CALL_OW 115
// until IsDead ( un ) ;
68989: LD_VAR 0 2
68993: PPUSH
68994: CALL_OW 301
68998: IFFALSE 68946
// end ;
69000: PPOPN 2
69002: END
// every 0 0$1 trigger StreamModeActive and sStu do
69003: LD_EXP 51
69007: PUSH
69008: LD_EXP 90
69012: AND
69013: IFFALSE 69029
69015: GO 69017
69017: DISABLE
// begin ToLua ( displayStucuk(); ) ;
69018: LD_STRING displayStucuk();
69020: PPUSH
69021: CALL_OW 559
// ResetFog ;
69025: CALL_OW 335
// end ;
69029: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
69030: LD_EXP 51
69034: PUSH
69035: LD_EXP 83
69039: AND
69040: IFFALSE 69181
69042: GO 69044
69044: DISABLE
69045: LD_INT 0
69047: PPUSH
69048: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69049: LD_ADDR_VAR 0 2
69053: PUSH
69054: LD_INT 22
69056: PUSH
69057: LD_OWVAR 2
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 21
69068: PUSH
69069: LD_INT 1
69071: PUSH
69072: EMPTY
69073: LIST
69074: LIST
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PPUSH
69080: CALL_OW 69
69084: ST_TO_ADDR
// if not tmp then
69085: LD_VAR 0 2
69089: NOT
69090: IFFALSE 69094
// exit ;
69092: GO 69181
// un := tmp [ rand ( 1 , tmp ) ] ;
69094: LD_ADDR_VAR 0 1
69098: PUSH
69099: LD_VAR 0 2
69103: PUSH
69104: LD_INT 1
69106: PPUSH
69107: LD_VAR 0 2
69111: PPUSH
69112: CALL_OW 12
69116: ARRAY
69117: ST_TO_ADDR
// SetSide ( un , 0 ) ;
69118: LD_VAR 0 1
69122: PPUSH
69123: LD_INT 0
69125: PPUSH
69126: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
69130: LD_VAR 0 1
69134: PPUSH
69135: LD_OWVAR 3
69139: PUSH
69140: LD_VAR 0 1
69144: DIFF
69145: PPUSH
69146: LD_VAR 0 1
69150: PPUSH
69151: CALL_OW 74
69155: PPUSH
69156: CALL_OW 115
// wait ( 0 0$20 ) ;
69160: LD_INT 700
69162: PPUSH
69163: CALL_OW 67
// SetSide ( un , your_side ) ;
69167: LD_VAR 0 1
69171: PPUSH
69172: LD_OWVAR 2
69176: PPUSH
69177: CALL_OW 235
// end ;
69181: PPOPN 2
69183: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
69184: LD_EXP 51
69188: PUSH
69189: LD_EXP 84
69193: AND
69194: IFFALSE 69300
69196: GO 69198
69198: DISABLE
69199: LD_INT 0
69201: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69202: LD_ADDR_VAR 0 1
69206: PUSH
69207: LD_INT 22
69209: PUSH
69210: LD_OWVAR 2
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 2
69221: PUSH
69222: LD_INT 30
69224: PUSH
69225: LD_INT 0
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 30
69234: PUSH
69235: LD_INT 1
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: LIST
69246: PUSH
69247: EMPTY
69248: LIST
69249: LIST
69250: PPUSH
69251: CALL_OW 69
69255: ST_TO_ADDR
// if not depot then
69256: LD_VAR 0 1
69260: NOT
69261: IFFALSE 69265
// exit ;
69263: GO 69300
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
69265: LD_VAR 0 1
69269: PUSH
69270: LD_INT 1
69272: ARRAY
69273: PPUSH
69274: CALL_OW 250
69278: PPUSH
69279: LD_VAR 0 1
69283: PUSH
69284: LD_INT 1
69286: ARRAY
69287: PPUSH
69288: CALL_OW 251
69292: PPUSH
69293: LD_INT 70
69295: PPUSH
69296: CALL_OW 495
// end ;
69300: PPOPN 1
69302: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
69303: LD_EXP 51
69307: PUSH
69308: LD_EXP 85
69312: AND
69313: IFFALSE 69524
69315: GO 69317
69317: DISABLE
69318: LD_INT 0
69320: PPUSH
69321: PPUSH
69322: PPUSH
69323: PPUSH
69324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
69325: LD_ADDR_VAR 0 5
69329: PUSH
69330: LD_INT 22
69332: PUSH
69333: LD_OWVAR 2
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 21
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PPUSH
69356: CALL_OW 69
69360: ST_TO_ADDR
// if not tmp then
69361: LD_VAR 0 5
69365: NOT
69366: IFFALSE 69370
// exit ;
69368: GO 69524
// for i in tmp do
69370: LD_ADDR_VAR 0 1
69374: PUSH
69375: LD_VAR 0 5
69379: PUSH
69380: FOR_IN
69381: IFFALSE 69522
// begin d := rand ( 0 , 5 ) ;
69383: LD_ADDR_VAR 0 4
69387: PUSH
69388: LD_INT 0
69390: PPUSH
69391: LD_INT 5
69393: PPUSH
69394: CALL_OW 12
69398: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
69399: LD_ADDR_VAR 0 2
69403: PUSH
69404: LD_VAR 0 1
69408: PPUSH
69409: CALL_OW 250
69413: PPUSH
69414: LD_VAR 0 4
69418: PPUSH
69419: LD_INT 3
69421: PPUSH
69422: LD_INT 12
69424: PPUSH
69425: CALL_OW 12
69429: PPUSH
69430: CALL_OW 272
69434: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
69435: LD_ADDR_VAR 0 3
69439: PUSH
69440: LD_VAR 0 1
69444: PPUSH
69445: CALL_OW 251
69449: PPUSH
69450: LD_VAR 0 4
69454: PPUSH
69455: LD_INT 3
69457: PPUSH
69458: LD_INT 12
69460: PPUSH
69461: CALL_OW 12
69465: PPUSH
69466: CALL_OW 273
69470: ST_TO_ADDR
// if ValidHex ( x , y ) then
69471: LD_VAR 0 2
69475: PPUSH
69476: LD_VAR 0 3
69480: PPUSH
69481: CALL_OW 488
69485: IFFALSE 69520
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
69487: LD_VAR 0 1
69491: PPUSH
69492: LD_VAR 0 2
69496: PPUSH
69497: LD_VAR 0 3
69501: PPUSH
69502: LD_INT 3
69504: PPUSH
69505: LD_INT 6
69507: PPUSH
69508: CALL_OW 12
69512: PPUSH
69513: LD_INT 1
69515: PPUSH
69516: CALL_OW 483
// end ;
69520: GO 69380
69522: POP
69523: POP
// end ;
69524: PPOPN 5
69526: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
69527: LD_EXP 51
69531: PUSH
69532: LD_EXP 86
69536: AND
69537: IFFALSE 69631
69539: GO 69541
69541: DISABLE
69542: LD_INT 0
69544: PPUSH
69545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
69546: LD_ADDR_VAR 0 2
69550: PUSH
69551: LD_INT 22
69553: PUSH
69554: LD_OWVAR 2
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 32
69565: PUSH
69566: LD_INT 1
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 21
69575: PUSH
69576: LD_INT 2
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: LIST
69587: PPUSH
69588: CALL_OW 69
69592: ST_TO_ADDR
// if not tmp then
69593: LD_VAR 0 2
69597: NOT
69598: IFFALSE 69602
// exit ;
69600: GO 69631
// for i in tmp do
69602: LD_ADDR_VAR 0 1
69606: PUSH
69607: LD_VAR 0 2
69611: PUSH
69612: FOR_IN
69613: IFFALSE 69629
// SetFuel ( i , 0 ) ;
69615: LD_VAR 0 1
69619: PPUSH
69620: LD_INT 0
69622: PPUSH
69623: CALL_OW 240
69627: GO 69612
69629: POP
69630: POP
// end ;
69631: PPOPN 2
69633: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
69634: LD_EXP 51
69638: PUSH
69639: LD_EXP 87
69643: AND
69644: IFFALSE 69710
69646: GO 69648
69648: DISABLE
69649: LD_INT 0
69651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
69652: LD_ADDR_VAR 0 1
69656: PUSH
69657: LD_INT 22
69659: PUSH
69660: LD_OWVAR 2
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 30
69671: PUSH
69672: LD_INT 29
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: EMPTY
69680: LIST
69681: LIST
69682: PPUSH
69683: CALL_OW 69
69687: ST_TO_ADDR
// if not tmp then
69688: LD_VAR 0 1
69692: NOT
69693: IFFALSE 69697
// exit ;
69695: GO 69710
// DestroyUnit ( tmp [ 1 ] ) ;
69697: LD_VAR 0 1
69701: PUSH
69702: LD_INT 1
69704: ARRAY
69705: PPUSH
69706: CALL_OW 65
// end ;
69710: PPOPN 1
69712: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
69713: LD_EXP 51
69717: PUSH
69718: LD_EXP 89
69722: AND
69723: IFFALSE 69852
69725: GO 69727
69727: DISABLE
69728: LD_INT 0
69730: PPUSH
// begin uc_side := 0 ;
69731: LD_ADDR_OWVAR 20
69735: PUSH
69736: LD_INT 0
69738: ST_TO_ADDR
// uc_nation := nation_arabian ;
69739: LD_ADDR_OWVAR 21
69743: PUSH
69744: LD_INT 2
69746: ST_TO_ADDR
// hc_gallery :=  ;
69747: LD_ADDR_OWVAR 33
69751: PUSH
69752: LD_STRING 
69754: ST_TO_ADDR
// hc_name :=  ;
69755: LD_ADDR_OWVAR 26
69759: PUSH
69760: LD_STRING 
69762: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
69763: LD_INT 1
69765: PPUSH
69766: LD_INT 11
69768: PPUSH
69769: LD_INT 10
69771: PPUSH
69772: CALL_OW 380
// un := CreateHuman ;
69776: LD_ADDR_VAR 0 1
69780: PUSH
69781: CALL_OW 44
69785: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69786: LD_VAR 0 1
69790: PPUSH
69791: LD_INT 1
69793: PPUSH
69794: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
69798: LD_INT 35
69800: PPUSH
69801: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
69805: LD_VAR 0 1
69809: PPUSH
69810: LD_INT 22
69812: PUSH
69813: LD_OWVAR 2
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PPUSH
69822: CALL_OW 69
69826: PPUSH
69827: LD_VAR 0 1
69831: PPUSH
69832: CALL_OW 74
69836: PPUSH
69837: CALL_OW 115
// until IsDead ( un ) ;
69841: LD_VAR 0 1
69845: PPUSH
69846: CALL_OW 301
69850: IFFALSE 69798
// end ;
69852: PPOPN 1
69854: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
69855: LD_EXP 51
69859: PUSH
69860: LD_EXP 91
69864: AND
69865: IFFALSE 69877
69867: GO 69869
69869: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
69870: LD_STRING earthquake(getX(game), 0, 32)
69872: PPUSH
69873: CALL_OW 559
69877: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
69878: LD_EXP 51
69882: PUSH
69883: LD_EXP 92
69887: AND
69888: IFFALSE 69979
69890: GO 69892
69892: DISABLE
69893: LD_INT 0
69895: PPUSH
// begin enable ;
69896: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
69897: LD_ADDR_VAR 0 1
69901: PUSH
69902: LD_INT 22
69904: PUSH
69905: LD_OWVAR 2
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 21
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 33
69926: PUSH
69927: LD_INT 3
69929: PUSH
69930: EMPTY
69931: LIST
69932: LIST
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: LIST
69938: PPUSH
69939: CALL_OW 69
69943: ST_TO_ADDR
// if not tmp then
69944: LD_VAR 0 1
69948: NOT
69949: IFFALSE 69953
// exit ;
69951: GO 69979
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
69953: LD_VAR 0 1
69957: PUSH
69958: LD_INT 1
69960: PPUSH
69961: LD_VAR 0 1
69965: PPUSH
69966: CALL_OW 12
69970: ARRAY
69971: PPUSH
69972: LD_INT 1
69974: PPUSH
69975: CALL_OW 234
// end ;
69979: PPOPN 1
69981: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
69982: LD_EXP 51
69986: PUSH
69987: LD_EXP 93
69991: AND
69992: IFFALSE 70133
69994: GO 69996
69996: DISABLE
69997: LD_INT 0
69999: PPUSH
70000: PPUSH
70001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70002: LD_ADDR_VAR 0 3
70006: PUSH
70007: LD_INT 22
70009: PUSH
70010: LD_OWVAR 2
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 25
70021: PUSH
70022: LD_INT 1
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PPUSH
70033: CALL_OW 69
70037: ST_TO_ADDR
// if not tmp then
70038: LD_VAR 0 3
70042: NOT
70043: IFFALSE 70047
// exit ;
70045: GO 70133
// un := tmp [ rand ( 1 , tmp ) ] ;
70047: LD_ADDR_VAR 0 2
70051: PUSH
70052: LD_VAR 0 3
70056: PUSH
70057: LD_INT 1
70059: PPUSH
70060: LD_VAR 0 3
70064: PPUSH
70065: CALL_OW 12
70069: ARRAY
70070: ST_TO_ADDR
// if Crawls ( un ) then
70071: LD_VAR 0 2
70075: PPUSH
70076: CALL_OW 318
70080: IFFALSE 70091
// ComWalk ( un ) ;
70082: LD_VAR 0 2
70086: PPUSH
70087: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_INT 9
70098: PPUSH
70099: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
70103: LD_INT 28
70105: PPUSH
70106: LD_OWVAR 2
70110: PPUSH
70111: LD_INT 2
70113: PPUSH
70114: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
70118: LD_INT 29
70120: PPUSH
70121: LD_OWVAR 2
70125: PPUSH
70126: LD_INT 2
70128: PPUSH
70129: CALL_OW 322
// end ;
70133: PPOPN 3
70135: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
70136: LD_EXP 51
70140: PUSH
70141: LD_EXP 94
70145: AND
70146: IFFALSE 70257
70148: GO 70150
70150: DISABLE
70151: LD_INT 0
70153: PPUSH
70154: PPUSH
70155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
70156: LD_ADDR_VAR 0 3
70160: PUSH
70161: LD_INT 22
70163: PUSH
70164: LD_OWVAR 2
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 25
70175: PUSH
70176: LD_INT 1
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: EMPTY
70184: LIST
70185: LIST
70186: PPUSH
70187: CALL_OW 69
70191: ST_TO_ADDR
// if not tmp then
70192: LD_VAR 0 3
70196: NOT
70197: IFFALSE 70201
// exit ;
70199: GO 70257
// un := tmp [ rand ( 1 , tmp ) ] ;
70201: LD_ADDR_VAR 0 2
70205: PUSH
70206: LD_VAR 0 3
70210: PUSH
70211: LD_INT 1
70213: PPUSH
70214: LD_VAR 0 3
70218: PPUSH
70219: CALL_OW 12
70223: ARRAY
70224: ST_TO_ADDR
// if Crawls ( un ) then
70225: LD_VAR 0 2
70229: PPUSH
70230: CALL_OW 318
70234: IFFALSE 70245
// ComWalk ( un ) ;
70236: LD_VAR 0 2
70240: PPUSH
70241: CALL_OW 138
// SetClass ( un , class_mortar ) ;
70245: LD_VAR 0 2
70249: PPUSH
70250: LD_INT 8
70252: PPUSH
70253: CALL_OW 336
// end ;
70257: PPOPN 3
70259: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
70260: LD_EXP 51
70264: PUSH
70265: LD_EXP 95
70269: AND
70270: IFFALSE 70414
70272: GO 70274
70274: DISABLE
70275: LD_INT 0
70277: PPUSH
70278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
70279: LD_ADDR_VAR 0 2
70283: PUSH
70284: LD_INT 22
70286: PUSH
70287: LD_OWVAR 2
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 21
70298: PUSH
70299: LD_INT 2
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 2
70308: PUSH
70309: LD_INT 34
70311: PUSH
70312: LD_INT 12
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 34
70321: PUSH
70322: LD_INT 51
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 34
70331: PUSH
70332: LD_INT 32
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: PPUSH
70350: CALL_OW 69
70354: ST_TO_ADDR
// if not tmp then
70355: LD_VAR 0 2
70359: NOT
70360: IFFALSE 70364
// exit ;
70362: GO 70414
// for i in tmp do
70364: LD_ADDR_VAR 0 1
70368: PUSH
70369: LD_VAR 0 2
70373: PUSH
70374: FOR_IN
70375: IFFALSE 70412
// if GetCargo ( i , mat_artifact ) = 0 then
70377: LD_VAR 0 1
70381: PPUSH
70382: LD_INT 4
70384: PPUSH
70385: CALL_OW 289
70389: PUSH
70390: LD_INT 0
70392: EQUAL
70393: IFFALSE 70410
// SetCargo ( i , mat_siberit , 100 ) ;
70395: LD_VAR 0 1
70399: PPUSH
70400: LD_INT 3
70402: PPUSH
70403: LD_INT 100
70405: PPUSH
70406: CALL_OW 290
70410: GO 70374
70412: POP
70413: POP
// end ;
70414: PPOPN 2
70416: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
70417: LD_EXP 51
70421: PUSH
70422: LD_EXP 96
70426: AND
70427: IFFALSE 70610
70429: GO 70431
70431: DISABLE
70432: LD_INT 0
70434: PPUSH
70435: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
70436: LD_ADDR_VAR 0 2
70440: PUSH
70441: LD_INT 22
70443: PUSH
70444: LD_OWVAR 2
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PPUSH
70453: CALL_OW 69
70457: ST_TO_ADDR
// if not tmp then
70458: LD_VAR 0 2
70462: NOT
70463: IFFALSE 70467
// exit ;
70465: GO 70610
// for i := 1 to 2 do
70467: LD_ADDR_VAR 0 1
70471: PUSH
70472: DOUBLE
70473: LD_INT 1
70475: DEC
70476: ST_TO_ADDR
70477: LD_INT 2
70479: PUSH
70480: FOR_TO
70481: IFFALSE 70608
// begin uc_side := your_side ;
70483: LD_ADDR_OWVAR 20
70487: PUSH
70488: LD_OWVAR 2
70492: ST_TO_ADDR
// uc_nation := nation_american ;
70493: LD_ADDR_OWVAR 21
70497: PUSH
70498: LD_INT 1
70500: ST_TO_ADDR
// vc_chassis := us_morphling ;
70501: LD_ADDR_OWVAR 37
70505: PUSH
70506: LD_INT 5
70508: ST_TO_ADDR
// vc_engine := engine_siberite ;
70509: LD_ADDR_OWVAR 39
70513: PUSH
70514: LD_INT 3
70516: ST_TO_ADDR
// vc_control := control_computer ;
70517: LD_ADDR_OWVAR 38
70521: PUSH
70522: LD_INT 3
70524: ST_TO_ADDR
// vc_weapon := us_double_laser ;
70525: LD_ADDR_OWVAR 40
70529: PUSH
70530: LD_INT 10
70532: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
70533: LD_VAR 0 2
70537: PUSH
70538: LD_INT 1
70540: ARRAY
70541: PPUSH
70542: CALL_OW 310
70546: NOT
70547: IFFALSE 70594
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
70549: CALL_OW 45
70553: PPUSH
70554: LD_VAR 0 2
70558: PUSH
70559: LD_INT 1
70561: ARRAY
70562: PPUSH
70563: CALL_OW 250
70567: PPUSH
70568: LD_VAR 0 2
70572: PUSH
70573: LD_INT 1
70575: ARRAY
70576: PPUSH
70577: CALL_OW 251
70581: PPUSH
70582: LD_INT 12
70584: PPUSH
70585: LD_INT 1
70587: PPUSH
70588: CALL_OW 50
70592: GO 70606
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
70594: CALL_OW 45
70598: PPUSH
70599: LD_INT 1
70601: PPUSH
70602: CALL_OW 51
// end ;
70606: GO 70480
70608: POP
70609: POP
// end ;
70610: PPOPN 2
70612: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
70613: LD_EXP 51
70617: PUSH
70618: LD_EXP 97
70622: AND
70623: IFFALSE 70845
70625: GO 70627
70627: DISABLE
70628: LD_INT 0
70630: PPUSH
70631: PPUSH
70632: PPUSH
70633: PPUSH
70634: PPUSH
70635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
70636: LD_ADDR_VAR 0 6
70640: PUSH
70641: LD_INT 22
70643: PUSH
70644: LD_OWVAR 2
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 21
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 3
70665: PUSH
70666: LD_INT 23
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: LIST
70684: PPUSH
70685: CALL_OW 69
70689: ST_TO_ADDR
// if not tmp then
70690: LD_VAR 0 6
70694: NOT
70695: IFFALSE 70699
// exit ;
70697: GO 70845
// s1 := rand ( 1 , 4 ) ;
70699: LD_ADDR_VAR 0 2
70703: PUSH
70704: LD_INT 1
70706: PPUSH
70707: LD_INT 4
70709: PPUSH
70710: CALL_OW 12
70714: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
70715: LD_ADDR_VAR 0 4
70719: PUSH
70720: LD_VAR 0 6
70724: PUSH
70725: LD_INT 1
70727: ARRAY
70728: PPUSH
70729: LD_VAR 0 2
70733: PPUSH
70734: CALL_OW 259
70738: ST_TO_ADDR
// if s1 = 1 then
70739: LD_VAR 0 2
70743: PUSH
70744: LD_INT 1
70746: EQUAL
70747: IFFALSE 70767
// s2 := rand ( 2 , 4 ) else
70749: LD_ADDR_VAR 0 3
70753: PUSH
70754: LD_INT 2
70756: PPUSH
70757: LD_INT 4
70759: PPUSH
70760: CALL_OW 12
70764: ST_TO_ADDR
70765: GO 70775
// s2 := 1 ;
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: LD_INT 1
70774: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
70775: LD_ADDR_VAR 0 5
70779: PUSH
70780: LD_VAR 0 6
70784: PUSH
70785: LD_INT 1
70787: ARRAY
70788: PPUSH
70789: LD_VAR 0 3
70793: PPUSH
70794: CALL_OW 259
70798: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
70799: LD_VAR 0 6
70803: PUSH
70804: LD_INT 1
70806: ARRAY
70807: PPUSH
70808: LD_VAR 0 2
70812: PPUSH
70813: LD_VAR 0 5
70817: PPUSH
70818: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
70822: LD_VAR 0 6
70826: PUSH
70827: LD_INT 1
70829: ARRAY
70830: PPUSH
70831: LD_VAR 0 3
70835: PPUSH
70836: LD_VAR 0 4
70840: PPUSH
70841: CALL_OW 237
// end ;
70845: PPOPN 6
70847: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
70848: LD_EXP 51
70852: PUSH
70853: LD_EXP 98
70857: AND
70858: IFFALSE 70937
70860: GO 70862
70862: DISABLE
70863: LD_INT 0
70865: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
70866: LD_ADDR_VAR 0 1
70870: PUSH
70871: LD_INT 22
70873: PUSH
70874: LD_OWVAR 2
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 30
70885: PUSH
70886: LD_INT 3
70888: PUSH
70889: EMPTY
70890: LIST
70891: LIST
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PPUSH
70897: CALL_OW 69
70901: ST_TO_ADDR
// if not tmp then
70902: LD_VAR 0 1
70906: NOT
70907: IFFALSE 70911
// exit ;
70909: GO 70937
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
70911: LD_VAR 0 1
70915: PUSH
70916: LD_INT 1
70918: PPUSH
70919: LD_VAR 0 1
70923: PPUSH
70924: CALL_OW 12
70928: ARRAY
70929: PPUSH
70930: LD_INT 1
70932: PPUSH
70933: CALL_OW 234
// end ;
70937: PPOPN 1
70939: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
70940: LD_EXP 51
70944: PUSH
70945: LD_EXP 99
70949: AND
70950: IFFALSE 71062
70952: GO 70954
70954: DISABLE
70955: LD_INT 0
70957: PPUSH
70958: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
70959: LD_ADDR_VAR 0 2
70963: PUSH
70964: LD_INT 22
70966: PUSH
70967: LD_OWVAR 2
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: LD_INT 30
70981: PUSH
70982: LD_INT 27
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: PUSH
70989: LD_INT 30
70991: PUSH
70992: LD_INT 26
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: PUSH
70999: LD_INT 30
71001: PUSH
71002: LD_INT 28
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PPUSH
71019: CALL_OW 69
71023: ST_TO_ADDR
// if not tmp then
71024: LD_VAR 0 2
71028: NOT
71029: IFFALSE 71033
// exit ;
71031: GO 71062
// for i in tmp do
71033: LD_ADDR_VAR 0 1
71037: PUSH
71038: LD_VAR 0 2
71042: PUSH
71043: FOR_IN
71044: IFFALSE 71060
// SetLives ( i , 1 ) ;
71046: LD_VAR 0 1
71050: PPUSH
71051: LD_INT 1
71053: PPUSH
71054: CALL_OW 234
71058: GO 71043
71060: POP
71061: POP
// end ;
71062: PPOPN 2
71064: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
71065: LD_EXP 51
71069: PUSH
71070: LD_EXP 100
71074: AND
71075: IFFALSE 71362
71077: GO 71079
71079: DISABLE
71080: LD_INT 0
71082: PPUSH
71083: PPUSH
71084: PPUSH
// begin i := rand ( 1 , 7 ) ;
71085: LD_ADDR_VAR 0 1
71089: PUSH
71090: LD_INT 1
71092: PPUSH
71093: LD_INT 7
71095: PPUSH
71096: CALL_OW 12
71100: ST_TO_ADDR
// case i of 1 :
71101: LD_VAR 0 1
71105: PUSH
71106: LD_INT 1
71108: DOUBLE
71109: EQUAL
71110: IFTRUE 71114
71112: GO 71124
71114: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
71115: LD_STRING earthquake(getX(game), 0, 32)
71117: PPUSH
71118: CALL_OW 559
71122: GO 71362
71124: LD_INT 2
71126: DOUBLE
71127: EQUAL
71128: IFTRUE 71132
71130: GO 71146
71132: POP
// begin ToLua ( displayStucuk(); ) ;
71133: LD_STRING displayStucuk();
71135: PPUSH
71136: CALL_OW 559
// ResetFog ;
71140: CALL_OW 335
// end ; 3 :
71144: GO 71362
71146: LD_INT 3
71148: DOUBLE
71149: EQUAL
71150: IFTRUE 71154
71152: GO 71258
71154: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
71155: LD_ADDR_VAR 0 2
71159: PUSH
71160: LD_INT 22
71162: PUSH
71163: LD_OWVAR 2
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 25
71174: PUSH
71175: LD_INT 1
71177: PUSH
71178: EMPTY
71179: LIST
71180: LIST
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PPUSH
71186: CALL_OW 69
71190: ST_TO_ADDR
// if not tmp then
71191: LD_VAR 0 2
71195: NOT
71196: IFFALSE 71200
// exit ;
71198: GO 71362
// un := tmp [ rand ( 1 , tmp ) ] ;
71200: LD_ADDR_VAR 0 3
71204: PUSH
71205: LD_VAR 0 2
71209: PUSH
71210: LD_INT 1
71212: PPUSH
71213: LD_VAR 0 2
71217: PPUSH
71218: CALL_OW 12
71222: ARRAY
71223: ST_TO_ADDR
// if Crawls ( un ) then
71224: LD_VAR 0 3
71228: PPUSH
71229: CALL_OW 318
71233: IFFALSE 71244
// ComWalk ( un ) ;
71235: LD_VAR 0 3
71239: PPUSH
71240: CALL_OW 138
// SetClass ( un , class_mortar ) ;
71244: LD_VAR 0 3
71248: PPUSH
71249: LD_INT 8
71251: PPUSH
71252: CALL_OW 336
// end ; 4 :
71256: GO 71362
71258: LD_INT 4
71260: DOUBLE
71261: EQUAL
71262: IFTRUE 71266
71264: GO 71340
71266: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
71267: LD_ADDR_VAR 0 2
71271: PUSH
71272: LD_INT 22
71274: PUSH
71275: LD_OWVAR 2
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 30
71286: PUSH
71287: LD_INT 29
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: EMPTY
71295: LIST
71296: LIST
71297: PPUSH
71298: CALL_OW 69
71302: ST_TO_ADDR
// if not tmp then
71303: LD_VAR 0 2
71307: NOT
71308: IFFALSE 71312
// exit ;
71310: GO 71362
// CenterNowOnUnits ( tmp [ 1 ] ) ;
71312: LD_VAR 0 2
71316: PUSH
71317: LD_INT 1
71319: ARRAY
71320: PPUSH
71321: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
71325: LD_VAR 0 2
71329: PUSH
71330: LD_INT 1
71332: ARRAY
71333: PPUSH
71334: CALL_OW 65
// end ; 5 .. 7 :
71338: GO 71362
71340: LD_INT 5
71342: DOUBLE
71343: GREATEREQUAL
71344: IFFALSE 71352
71346: LD_INT 7
71348: DOUBLE
71349: LESSEQUAL
71350: IFTRUE 71354
71352: GO 71361
71354: POP
// StreamSibBomb ; end ;
71355: CALL 67599 0 0
71359: GO 71362
71361: POP
// end ;
71362: PPOPN 3
71364: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
71365: LD_EXP 51
71369: PUSH
71370: LD_EXP 101
71374: AND
71375: IFFALSE 71531
71377: GO 71379
71379: DISABLE
71380: LD_INT 0
71382: PPUSH
71383: PPUSH
71384: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
71385: LD_ADDR_VAR 0 2
71389: PUSH
71390: LD_INT 81
71392: PUSH
71393: LD_OWVAR 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: LD_INT 21
71407: PUSH
71408: LD_INT 1
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 21
71417: PUSH
71418: LD_INT 2
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: EMPTY
71426: LIST
71427: LIST
71428: LIST
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: PPUSH
71434: CALL_OW 69
71438: ST_TO_ADDR
// if not tmp then
71439: LD_VAR 0 2
71443: NOT
71444: IFFALSE 71448
// exit ;
71446: GO 71531
// p := 0 ;
71448: LD_ADDR_VAR 0 3
71452: PUSH
71453: LD_INT 0
71455: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71456: LD_INT 35
71458: PPUSH
71459: CALL_OW 67
// p := p + 1 ;
71463: LD_ADDR_VAR 0 3
71467: PUSH
71468: LD_VAR 0 3
71472: PUSH
71473: LD_INT 1
71475: PLUS
71476: ST_TO_ADDR
// for i in tmp do
71477: LD_ADDR_VAR 0 1
71481: PUSH
71482: LD_VAR 0 2
71486: PUSH
71487: FOR_IN
71488: IFFALSE 71519
// if GetLives ( i ) < 1000 then
71490: LD_VAR 0 1
71494: PPUSH
71495: CALL_OW 256
71499: PUSH
71500: LD_INT 1000
71502: LESS
71503: IFFALSE 71517
// SetLives ( i , 1000 ) ;
71505: LD_VAR 0 1
71509: PPUSH
71510: LD_INT 1000
71512: PPUSH
71513: CALL_OW 234
71517: GO 71487
71519: POP
71520: POP
// until p > 20 ;
71521: LD_VAR 0 3
71525: PUSH
71526: LD_INT 20
71528: GREATER
71529: IFFALSE 71456
// end ;
71531: PPOPN 3
71533: END
// every 0 0$1 trigger StreamModeActive and sTime do
71534: LD_EXP 51
71538: PUSH
71539: LD_EXP 102
71543: AND
71544: IFFALSE 71579
71546: GO 71548
71548: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
71549: LD_INT 28
71551: PPUSH
71552: LD_OWVAR 2
71556: PPUSH
71557: LD_INT 2
71559: PPUSH
71560: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
71564: LD_INT 30
71566: PPUSH
71567: LD_OWVAR 2
71571: PPUSH
71572: LD_INT 2
71574: PPUSH
71575: CALL_OW 322
// end ;
71579: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
71580: LD_EXP 51
71584: PUSH
71585: LD_EXP 103
71589: AND
71590: IFFALSE 71711
71592: GO 71594
71594: DISABLE
71595: LD_INT 0
71597: PPUSH
71598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
71599: LD_ADDR_VAR 0 2
71603: PUSH
71604: LD_INT 22
71606: PUSH
71607: LD_OWVAR 2
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 21
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 3
71628: PUSH
71629: LD_INT 23
71631: PUSH
71632: LD_INT 0
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: LIST
71647: PPUSH
71648: CALL_OW 69
71652: ST_TO_ADDR
// if not tmp then
71653: LD_VAR 0 2
71657: NOT
71658: IFFALSE 71662
// exit ;
71660: GO 71711
// for i in tmp do
71662: LD_ADDR_VAR 0 1
71666: PUSH
71667: LD_VAR 0 2
71671: PUSH
71672: FOR_IN
71673: IFFALSE 71709
// begin if Crawls ( i ) then
71675: LD_VAR 0 1
71679: PPUSH
71680: CALL_OW 318
71684: IFFALSE 71695
// ComWalk ( i ) ;
71686: LD_VAR 0 1
71690: PPUSH
71691: CALL_OW 138
// SetClass ( i , 2 ) ;
71695: LD_VAR 0 1
71699: PPUSH
71700: LD_INT 2
71702: PPUSH
71703: CALL_OW 336
// end ;
71707: GO 71672
71709: POP
71710: POP
// end ;
71711: PPOPN 2
71713: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
71714: LD_EXP 51
71718: PUSH
71719: LD_EXP 104
71723: AND
71724: IFFALSE 72012
71726: GO 71728
71728: DISABLE
71729: LD_INT 0
71731: PPUSH
71732: PPUSH
71733: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
71734: LD_OWVAR 2
71738: PPUSH
71739: LD_INT 9
71741: PPUSH
71742: LD_INT 1
71744: PPUSH
71745: LD_INT 1
71747: PPUSH
71748: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
71752: LD_INT 9
71754: PPUSH
71755: LD_OWVAR 2
71759: PPUSH
71760: CALL_OW 343
// uc_side := 9 ;
71764: LD_ADDR_OWVAR 20
71768: PUSH
71769: LD_INT 9
71771: ST_TO_ADDR
// uc_nation := 2 ;
71772: LD_ADDR_OWVAR 21
71776: PUSH
71777: LD_INT 2
71779: ST_TO_ADDR
// hc_name := Dark Warrior ;
71780: LD_ADDR_OWVAR 26
71784: PUSH
71785: LD_STRING Dark Warrior
71787: ST_TO_ADDR
// hc_gallery :=  ;
71788: LD_ADDR_OWVAR 33
71792: PUSH
71793: LD_STRING 
71795: ST_TO_ADDR
// hc_noskilllimit := true ;
71796: LD_ADDR_OWVAR 76
71800: PUSH
71801: LD_INT 1
71803: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
71804: LD_ADDR_OWVAR 31
71808: PUSH
71809: LD_INT 30
71811: PUSH
71812: LD_INT 30
71814: PUSH
71815: LD_INT 30
71817: PUSH
71818: LD_INT 30
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: LIST
71825: LIST
71826: ST_TO_ADDR
// un := CreateHuman ;
71827: LD_ADDR_VAR 0 3
71831: PUSH
71832: CALL_OW 44
71836: ST_TO_ADDR
// hc_noskilllimit := false ;
71837: LD_ADDR_OWVAR 76
71841: PUSH
71842: LD_INT 0
71844: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
71845: LD_VAR 0 3
71849: PPUSH
71850: LD_INT 1
71852: PPUSH
71853: CALL_OW 51
// ToLua ( playRanger() ) ;
71857: LD_STRING playRanger()
71859: PPUSH
71860: CALL_OW 559
// p := 0 ;
71864: LD_ADDR_VAR 0 2
71868: PUSH
71869: LD_INT 0
71871: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
71872: LD_INT 35
71874: PPUSH
71875: CALL_OW 67
// p := p + 1 ;
71879: LD_ADDR_VAR 0 2
71883: PUSH
71884: LD_VAR 0 2
71888: PUSH
71889: LD_INT 1
71891: PLUS
71892: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
71893: LD_VAR 0 3
71897: PPUSH
71898: CALL_OW 256
71902: PUSH
71903: LD_INT 1000
71905: LESS
71906: IFFALSE 71920
// SetLives ( un , 1000 ) ;
71908: LD_VAR 0 3
71912: PPUSH
71913: LD_INT 1000
71915: PPUSH
71916: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
71920: LD_VAR 0 3
71924: PPUSH
71925: LD_INT 81
71927: PUSH
71928: LD_OWVAR 2
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 91
71939: PUSH
71940: LD_VAR 0 3
71944: PUSH
71945: LD_INT 30
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PPUSH
71957: CALL_OW 69
71961: PPUSH
71962: LD_VAR 0 3
71966: PPUSH
71967: CALL_OW 74
71971: PPUSH
71972: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
71976: LD_VAR 0 2
71980: PUSH
71981: LD_INT 80
71983: GREATER
71984: PUSH
71985: LD_VAR 0 3
71989: PPUSH
71990: CALL_OW 301
71994: OR
71995: IFFALSE 71872
// if un then
71997: LD_VAR 0 3
72001: IFFALSE 72012
// RemoveUnit ( un ) ;
72003: LD_VAR 0 3
72007: PPUSH
72008: CALL_OW 64
// end ;
72012: PPOPN 3
72014: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
72015: LD_EXP 105
72019: IFFALSE 72135
72021: GO 72023
72023: DISABLE
72024: LD_INT 0
72026: PPUSH
72027: PPUSH
72028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72029: LD_ADDR_VAR 0 2
72033: PUSH
72034: LD_INT 81
72036: PUSH
72037: LD_OWVAR 2
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 21
72048: PUSH
72049: LD_INT 1
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: EMPTY
72057: LIST
72058: LIST
72059: PPUSH
72060: CALL_OW 69
72064: ST_TO_ADDR
// ToLua ( playComputer() ) ;
72065: LD_STRING playComputer()
72067: PPUSH
72068: CALL_OW 559
// if not tmp then
72072: LD_VAR 0 2
72076: NOT
72077: IFFALSE 72081
// exit ;
72079: GO 72135
// for i in tmp do
72081: LD_ADDR_VAR 0 1
72085: PUSH
72086: LD_VAR 0 2
72090: PUSH
72091: FOR_IN
72092: IFFALSE 72133
// for j := 1 to 4 do
72094: LD_ADDR_VAR 0 3
72098: PUSH
72099: DOUBLE
72100: LD_INT 1
72102: DEC
72103: ST_TO_ADDR
72104: LD_INT 4
72106: PUSH
72107: FOR_TO
72108: IFFALSE 72129
// SetSkill ( i , j , 10 ) ;
72110: LD_VAR 0 1
72114: PPUSH
72115: LD_VAR 0 3
72119: PPUSH
72120: LD_INT 10
72122: PPUSH
72123: CALL_OW 237
72127: GO 72107
72129: POP
72130: POP
72131: GO 72091
72133: POP
72134: POP
// end ;
72135: PPOPN 3
72137: END
// every 0 0$1 trigger s30 do var i , tmp ;
72138: LD_EXP 106
72142: IFFALSE 72211
72144: GO 72146
72146: DISABLE
72147: LD_INT 0
72149: PPUSH
72150: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72151: LD_ADDR_VAR 0 2
72155: PUSH
72156: LD_INT 22
72158: PUSH
72159: LD_OWVAR 2
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PPUSH
72168: CALL_OW 69
72172: ST_TO_ADDR
// if not tmp then
72173: LD_VAR 0 2
72177: NOT
72178: IFFALSE 72182
// exit ;
72180: GO 72211
// for i in tmp do
72182: LD_ADDR_VAR 0 1
72186: PUSH
72187: LD_VAR 0 2
72191: PUSH
72192: FOR_IN
72193: IFFALSE 72209
// SetLives ( i , 300 ) ;
72195: LD_VAR 0 1
72199: PPUSH
72200: LD_INT 300
72202: PPUSH
72203: CALL_OW 234
72207: GO 72192
72209: POP
72210: POP
// end ;
72211: PPOPN 2
72213: END
// every 0 0$1 trigger s60 do var i , tmp ;
72214: LD_EXP 107
72218: IFFALSE 72287
72220: GO 72222
72222: DISABLE
72223: LD_INT 0
72225: PPUSH
72226: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
72227: LD_ADDR_VAR 0 2
72231: PUSH
72232: LD_INT 22
72234: PUSH
72235: LD_OWVAR 2
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PPUSH
72244: CALL_OW 69
72248: ST_TO_ADDR
// if not tmp then
72249: LD_VAR 0 2
72253: NOT
72254: IFFALSE 72258
// exit ;
72256: GO 72287
// for i in tmp do
72258: LD_ADDR_VAR 0 1
72262: PUSH
72263: LD_VAR 0 2
72267: PUSH
72268: FOR_IN
72269: IFFALSE 72285
// SetLives ( i , 600 ) ;
72271: LD_VAR 0 1
72275: PPUSH
72276: LD_INT 600
72278: PPUSH
72279: CALL_OW 234
72283: GO 72268
72285: POP
72286: POP
// end ;
72287: PPOPN 2
72289: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
72290: LD_INT 0
72292: PPUSH
// case cmd of 301 :
72293: LD_VAR 0 1
72297: PUSH
72298: LD_INT 301
72300: DOUBLE
72301: EQUAL
72302: IFTRUE 72306
72304: GO 72338
72306: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
72307: LD_VAR 0 6
72311: PPUSH
72312: LD_VAR 0 7
72316: PPUSH
72317: LD_VAR 0 8
72321: PPUSH
72322: LD_VAR 0 4
72326: PPUSH
72327: LD_VAR 0 5
72331: PPUSH
72332: CALL 73547 0 5
72336: GO 72459
72338: LD_INT 302
72340: DOUBLE
72341: EQUAL
72342: IFTRUE 72346
72344: GO 72383
72346: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
72347: LD_VAR 0 6
72351: PPUSH
72352: LD_VAR 0 7
72356: PPUSH
72357: LD_VAR 0 8
72361: PPUSH
72362: LD_VAR 0 9
72366: PPUSH
72367: LD_VAR 0 4
72371: PPUSH
72372: LD_VAR 0 5
72376: PPUSH
72377: CALL 73638 0 6
72381: GO 72459
72383: LD_INT 303
72385: DOUBLE
72386: EQUAL
72387: IFTRUE 72391
72389: GO 72428
72391: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
72392: LD_VAR 0 6
72396: PPUSH
72397: LD_VAR 0 7
72401: PPUSH
72402: LD_VAR 0 8
72406: PPUSH
72407: LD_VAR 0 9
72411: PPUSH
72412: LD_VAR 0 4
72416: PPUSH
72417: LD_VAR 0 5
72421: PPUSH
72422: CALL 72464 0 6
72426: GO 72459
72428: LD_INT 304
72430: DOUBLE
72431: EQUAL
72432: IFTRUE 72436
72434: GO 72458
72436: POP
// hHackTeleport ( unit , x , y ) ; end ;
72437: LD_VAR 0 2
72441: PPUSH
72442: LD_VAR 0 4
72446: PPUSH
72447: LD_VAR 0 5
72451: PPUSH
72452: CALL 74231 0 3
72456: GO 72459
72458: POP
// end ;
72459: LD_VAR 0 12
72463: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
72464: LD_INT 0
72466: PPUSH
72467: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
72468: LD_VAR 0 1
72472: PUSH
72473: LD_INT 1
72475: LESS
72476: PUSH
72477: LD_VAR 0 1
72481: PUSH
72482: LD_INT 3
72484: GREATER
72485: OR
72486: PUSH
72487: LD_VAR 0 5
72491: PPUSH
72492: LD_VAR 0 6
72496: PPUSH
72497: CALL_OW 428
72501: OR
72502: IFFALSE 72506
// exit ;
72504: GO 73234
// uc_side := your_side ;
72506: LD_ADDR_OWVAR 20
72510: PUSH
72511: LD_OWVAR 2
72515: ST_TO_ADDR
// uc_nation := nation ;
72516: LD_ADDR_OWVAR 21
72520: PUSH
72521: LD_VAR 0 1
72525: ST_TO_ADDR
// bc_level = 1 ;
72526: LD_ADDR_OWVAR 43
72530: PUSH
72531: LD_INT 1
72533: ST_TO_ADDR
// case btype of 1 :
72534: LD_VAR 0 2
72538: PUSH
72539: LD_INT 1
72541: DOUBLE
72542: EQUAL
72543: IFTRUE 72547
72545: GO 72558
72547: POP
// bc_type := b_depot ; 2 :
72548: LD_ADDR_OWVAR 42
72552: PUSH
72553: LD_INT 0
72555: ST_TO_ADDR
72556: GO 73178
72558: LD_INT 2
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72566
72564: GO 72577
72566: POP
// bc_type := b_warehouse ; 3 :
72567: LD_ADDR_OWVAR 42
72571: PUSH
72572: LD_INT 1
72574: ST_TO_ADDR
72575: GO 73178
72577: LD_INT 3
72579: DOUBLE
72580: EQUAL
72581: IFTRUE 72585
72583: GO 72596
72585: POP
// bc_type := b_lab ; 4 .. 9 :
72586: LD_ADDR_OWVAR 42
72590: PUSH
72591: LD_INT 6
72593: ST_TO_ADDR
72594: GO 73178
72596: LD_INT 4
72598: DOUBLE
72599: GREATEREQUAL
72600: IFFALSE 72608
72602: LD_INT 9
72604: DOUBLE
72605: LESSEQUAL
72606: IFTRUE 72610
72608: GO 72670
72610: POP
// begin bc_type := b_lab_half ;
72611: LD_ADDR_OWVAR 42
72615: PUSH
72616: LD_INT 7
72618: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
72619: LD_ADDR_OWVAR 44
72623: PUSH
72624: LD_INT 10
72626: PUSH
72627: LD_INT 11
72629: PUSH
72630: LD_INT 12
72632: PUSH
72633: LD_INT 15
72635: PUSH
72636: LD_INT 14
72638: PUSH
72639: LD_INT 13
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: PUSH
72650: LD_VAR 0 2
72654: PUSH
72655: LD_INT 3
72657: MINUS
72658: ARRAY
72659: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
72660: LD_ADDR_OWVAR 45
72664: PUSH
72665: LD_INT 9
72667: ST_TO_ADDR
// end ; 10 .. 13 :
72668: GO 73178
72670: LD_INT 10
72672: DOUBLE
72673: GREATEREQUAL
72674: IFFALSE 72682
72676: LD_INT 13
72678: DOUBLE
72679: LESSEQUAL
72680: IFTRUE 72684
72682: GO 72761
72684: POP
// begin bc_type := b_lab_full ;
72685: LD_ADDR_OWVAR 42
72689: PUSH
72690: LD_INT 8
72692: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
72693: LD_ADDR_OWVAR 44
72697: PUSH
72698: LD_INT 10
72700: PUSH
72701: LD_INT 12
72703: PUSH
72704: LD_INT 14
72706: PUSH
72707: LD_INT 13
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: LIST
72714: LIST
72715: PUSH
72716: LD_VAR 0 2
72720: PUSH
72721: LD_INT 9
72723: MINUS
72724: ARRAY
72725: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
72726: LD_ADDR_OWVAR 45
72730: PUSH
72731: LD_INT 11
72733: PUSH
72734: LD_INT 15
72736: PUSH
72737: LD_INT 12
72739: PUSH
72740: LD_INT 15
72742: PUSH
72743: EMPTY
72744: LIST
72745: LIST
72746: LIST
72747: LIST
72748: PUSH
72749: LD_VAR 0 2
72753: PUSH
72754: LD_INT 9
72756: MINUS
72757: ARRAY
72758: ST_TO_ADDR
// end ; 14 :
72759: GO 73178
72761: LD_INT 14
72763: DOUBLE
72764: EQUAL
72765: IFTRUE 72769
72767: GO 72780
72769: POP
// bc_type := b_workshop ; 15 :
72770: LD_ADDR_OWVAR 42
72774: PUSH
72775: LD_INT 2
72777: ST_TO_ADDR
72778: GO 73178
72780: LD_INT 15
72782: DOUBLE
72783: EQUAL
72784: IFTRUE 72788
72786: GO 72799
72788: POP
// bc_type := b_factory ; 16 :
72789: LD_ADDR_OWVAR 42
72793: PUSH
72794: LD_INT 3
72796: ST_TO_ADDR
72797: GO 73178
72799: LD_INT 16
72801: DOUBLE
72802: EQUAL
72803: IFTRUE 72807
72805: GO 72818
72807: POP
// bc_type := b_ext_gun ; 17 :
72808: LD_ADDR_OWVAR 42
72812: PUSH
72813: LD_INT 17
72815: ST_TO_ADDR
72816: GO 73178
72818: LD_INT 17
72820: DOUBLE
72821: EQUAL
72822: IFTRUE 72826
72824: GO 72854
72826: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
72827: LD_ADDR_OWVAR 42
72831: PUSH
72832: LD_INT 19
72834: PUSH
72835: LD_INT 23
72837: PUSH
72838: LD_INT 19
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: LIST
72845: PUSH
72846: LD_VAR 0 1
72850: ARRAY
72851: ST_TO_ADDR
72852: GO 73178
72854: LD_INT 18
72856: DOUBLE
72857: EQUAL
72858: IFTRUE 72862
72860: GO 72873
72862: POP
// bc_type := b_ext_radar ; 19 :
72863: LD_ADDR_OWVAR 42
72867: PUSH
72868: LD_INT 20
72870: ST_TO_ADDR
72871: GO 73178
72873: LD_INT 19
72875: DOUBLE
72876: EQUAL
72877: IFTRUE 72881
72879: GO 72892
72881: POP
// bc_type := b_ext_radio ; 20 :
72882: LD_ADDR_OWVAR 42
72886: PUSH
72887: LD_INT 22
72889: ST_TO_ADDR
72890: GO 73178
72892: LD_INT 20
72894: DOUBLE
72895: EQUAL
72896: IFTRUE 72900
72898: GO 72911
72900: POP
// bc_type := b_ext_siberium ; 21 :
72901: LD_ADDR_OWVAR 42
72905: PUSH
72906: LD_INT 21
72908: ST_TO_ADDR
72909: GO 73178
72911: LD_INT 21
72913: DOUBLE
72914: EQUAL
72915: IFTRUE 72919
72917: GO 72930
72919: POP
// bc_type := b_ext_computer ; 22 :
72920: LD_ADDR_OWVAR 42
72924: PUSH
72925: LD_INT 24
72927: ST_TO_ADDR
72928: GO 73178
72930: LD_INT 22
72932: DOUBLE
72933: EQUAL
72934: IFTRUE 72938
72936: GO 72949
72938: POP
// bc_type := b_ext_track ; 23 :
72939: LD_ADDR_OWVAR 42
72943: PUSH
72944: LD_INT 16
72946: ST_TO_ADDR
72947: GO 73178
72949: LD_INT 23
72951: DOUBLE
72952: EQUAL
72953: IFTRUE 72957
72955: GO 72968
72957: POP
// bc_type := b_ext_laser ; 24 :
72958: LD_ADDR_OWVAR 42
72962: PUSH
72963: LD_INT 25
72965: ST_TO_ADDR
72966: GO 73178
72968: LD_INT 24
72970: DOUBLE
72971: EQUAL
72972: IFTRUE 72976
72974: GO 72987
72976: POP
// bc_type := b_control_tower ; 25 :
72977: LD_ADDR_OWVAR 42
72981: PUSH
72982: LD_INT 36
72984: ST_TO_ADDR
72985: GO 73178
72987: LD_INT 25
72989: DOUBLE
72990: EQUAL
72991: IFTRUE 72995
72993: GO 73006
72995: POP
// bc_type := b_breastwork ; 26 :
72996: LD_ADDR_OWVAR 42
73000: PUSH
73001: LD_INT 31
73003: ST_TO_ADDR
73004: GO 73178
73006: LD_INT 26
73008: DOUBLE
73009: EQUAL
73010: IFTRUE 73014
73012: GO 73025
73014: POP
// bc_type := b_bunker ; 27 :
73015: LD_ADDR_OWVAR 42
73019: PUSH
73020: LD_INT 32
73022: ST_TO_ADDR
73023: GO 73178
73025: LD_INT 27
73027: DOUBLE
73028: EQUAL
73029: IFTRUE 73033
73031: GO 73044
73033: POP
// bc_type := b_turret ; 28 :
73034: LD_ADDR_OWVAR 42
73038: PUSH
73039: LD_INT 33
73041: ST_TO_ADDR
73042: GO 73178
73044: LD_INT 28
73046: DOUBLE
73047: EQUAL
73048: IFTRUE 73052
73050: GO 73063
73052: POP
// bc_type := b_armoury ; 29 :
73053: LD_ADDR_OWVAR 42
73057: PUSH
73058: LD_INT 4
73060: ST_TO_ADDR
73061: GO 73178
73063: LD_INT 29
73065: DOUBLE
73066: EQUAL
73067: IFTRUE 73071
73069: GO 73082
73071: POP
// bc_type := b_barracks ; 30 :
73072: LD_ADDR_OWVAR 42
73076: PUSH
73077: LD_INT 5
73079: ST_TO_ADDR
73080: GO 73178
73082: LD_INT 30
73084: DOUBLE
73085: EQUAL
73086: IFTRUE 73090
73088: GO 73101
73090: POP
// bc_type := b_solar_power ; 31 :
73091: LD_ADDR_OWVAR 42
73095: PUSH
73096: LD_INT 27
73098: ST_TO_ADDR
73099: GO 73178
73101: LD_INT 31
73103: DOUBLE
73104: EQUAL
73105: IFTRUE 73109
73107: GO 73120
73109: POP
// bc_type := b_oil_power ; 32 :
73110: LD_ADDR_OWVAR 42
73114: PUSH
73115: LD_INT 26
73117: ST_TO_ADDR
73118: GO 73178
73120: LD_INT 32
73122: DOUBLE
73123: EQUAL
73124: IFTRUE 73128
73126: GO 73139
73128: POP
// bc_type := b_siberite_power ; 33 :
73129: LD_ADDR_OWVAR 42
73133: PUSH
73134: LD_INT 28
73136: ST_TO_ADDR
73137: GO 73178
73139: LD_INT 33
73141: DOUBLE
73142: EQUAL
73143: IFTRUE 73147
73145: GO 73158
73147: POP
// bc_type := b_oil_mine ; 34 :
73148: LD_ADDR_OWVAR 42
73152: PUSH
73153: LD_INT 29
73155: ST_TO_ADDR
73156: GO 73178
73158: LD_INT 34
73160: DOUBLE
73161: EQUAL
73162: IFTRUE 73166
73164: GO 73177
73166: POP
// bc_type := b_siberite_mine ; end ;
73167: LD_ADDR_OWVAR 42
73171: PUSH
73172: LD_INT 30
73174: ST_TO_ADDR
73175: GO 73178
73177: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
73178: LD_ADDR_VAR 0 8
73182: PUSH
73183: LD_VAR 0 5
73187: PPUSH
73188: LD_VAR 0 6
73192: PPUSH
73193: LD_VAR 0 3
73197: PPUSH
73198: CALL_OW 47
73202: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
73203: LD_OWVAR 42
73207: PUSH
73208: LD_INT 32
73210: PUSH
73211: LD_INT 33
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: IN
73218: IFFALSE 73234
// PlaceWeaponTurret ( b , weapon ) ;
73220: LD_VAR 0 8
73224: PPUSH
73225: LD_VAR 0 4
73229: PPUSH
73230: CALL_OW 431
// end ;
73234: LD_VAR 0 7
73238: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
73239: LD_INT 0
73241: PPUSH
73242: PPUSH
73243: PPUSH
73244: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
73245: LD_ADDR_VAR 0 4
73249: PUSH
73250: LD_INT 22
73252: PUSH
73253: LD_OWVAR 2
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 2
73264: PUSH
73265: LD_INT 30
73267: PUSH
73268: LD_INT 0
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: LD_INT 30
73277: PUSH
73278: LD_INT 1
73280: PUSH
73281: EMPTY
73282: LIST
73283: LIST
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: LIST
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PPUSH
73294: CALL_OW 69
73298: ST_TO_ADDR
// if not tmp then
73299: LD_VAR 0 4
73303: NOT
73304: IFFALSE 73308
// exit ;
73306: GO 73367
// for i in tmp do
73308: LD_ADDR_VAR 0 2
73312: PUSH
73313: LD_VAR 0 4
73317: PUSH
73318: FOR_IN
73319: IFFALSE 73365
// for j = 1 to 3 do
73321: LD_ADDR_VAR 0 3
73325: PUSH
73326: DOUBLE
73327: LD_INT 1
73329: DEC
73330: ST_TO_ADDR
73331: LD_INT 3
73333: PUSH
73334: FOR_TO
73335: IFFALSE 73361
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
73337: LD_VAR 0 2
73341: PPUSH
73342: CALL_OW 274
73346: PPUSH
73347: LD_VAR 0 3
73351: PPUSH
73352: LD_INT 99999
73354: PPUSH
73355: CALL_OW 277
73359: GO 73334
73361: POP
73362: POP
73363: GO 73318
73365: POP
73366: POP
// end ;
73367: LD_VAR 0 1
73371: RET
// export function hHackSetLevel10 ; var i , j ; begin
73372: LD_INT 0
73374: PPUSH
73375: PPUSH
73376: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
73377: LD_ADDR_VAR 0 2
73381: PUSH
73382: LD_INT 21
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PPUSH
73392: CALL_OW 69
73396: PUSH
73397: FOR_IN
73398: IFFALSE 73450
// if IsSelected ( i ) then
73400: LD_VAR 0 2
73404: PPUSH
73405: CALL_OW 306
73409: IFFALSE 73448
// begin for j := 1 to 4 do
73411: LD_ADDR_VAR 0 3
73415: PUSH
73416: DOUBLE
73417: LD_INT 1
73419: DEC
73420: ST_TO_ADDR
73421: LD_INT 4
73423: PUSH
73424: FOR_TO
73425: IFFALSE 73446
// SetSkill ( i , j , 10 ) ;
73427: LD_VAR 0 2
73431: PPUSH
73432: LD_VAR 0 3
73436: PPUSH
73437: LD_INT 10
73439: PPUSH
73440: CALL_OW 237
73444: GO 73424
73446: POP
73447: POP
// end ;
73448: GO 73397
73450: POP
73451: POP
// end ;
73452: LD_VAR 0 1
73456: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
73457: LD_INT 0
73459: PPUSH
73460: PPUSH
73461: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
73462: LD_ADDR_VAR 0 2
73466: PUSH
73467: LD_INT 22
73469: PUSH
73470: LD_OWVAR 2
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 21
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: EMPTY
73486: LIST
73487: LIST
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PPUSH
73493: CALL_OW 69
73497: PUSH
73498: FOR_IN
73499: IFFALSE 73540
// begin for j := 1 to 4 do
73501: LD_ADDR_VAR 0 3
73505: PUSH
73506: DOUBLE
73507: LD_INT 1
73509: DEC
73510: ST_TO_ADDR
73511: LD_INT 4
73513: PUSH
73514: FOR_TO
73515: IFFALSE 73536
// SetSkill ( i , j , 10 ) ;
73517: LD_VAR 0 2
73521: PPUSH
73522: LD_VAR 0 3
73526: PPUSH
73527: LD_INT 10
73529: PPUSH
73530: CALL_OW 237
73534: GO 73514
73536: POP
73537: POP
// end ;
73538: GO 73498
73540: POP
73541: POP
// end ;
73542: LD_VAR 0 1
73546: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
73547: LD_INT 0
73549: PPUSH
// uc_side := your_side ;
73550: LD_ADDR_OWVAR 20
73554: PUSH
73555: LD_OWVAR 2
73559: ST_TO_ADDR
// uc_nation := nation ;
73560: LD_ADDR_OWVAR 21
73564: PUSH
73565: LD_VAR 0 1
73569: ST_TO_ADDR
// InitHc ;
73570: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
73574: LD_INT 0
73576: PPUSH
73577: LD_VAR 0 2
73581: PPUSH
73582: LD_VAR 0 3
73586: PPUSH
73587: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
73591: LD_VAR 0 4
73595: PPUSH
73596: LD_VAR 0 5
73600: PPUSH
73601: CALL_OW 428
73605: PUSH
73606: LD_INT 0
73608: EQUAL
73609: IFFALSE 73633
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
73611: CALL_OW 44
73615: PPUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: LD_VAR 0 5
73625: PPUSH
73626: LD_INT 1
73628: PPUSH
73629: CALL_OW 48
// end ;
73633: LD_VAR 0 6
73637: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
// uc_side := your_side ;
73642: LD_ADDR_OWVAR 20
73646: PUSH
73647: LD_OWVAR 2
73651: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
73652: LD_VAR 0 1
73656: PUSH
73657: LD_INT 1
73659: PUSH
73660: LD_INT 2
73662: PUSH
73663: LD_INT 3
73665: PUSH
73666: LD_INT 4
73668: PUSH
73669: LD_INT 5
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: LIST
73678: IN
73679: IFFALSE 73691
// uc_nation := nation_american else
73681: LD_ADDR_OWVAR 21
73685: PUSH
73686: LD_INT 1
73688: ST_TO_ADDR
73689: GO 73734
// if chassis in [ 11 , 12 , 13 , 14 ] then
73691: LD_VAR 0 1
73695: PUSH
73696: LD_INT 11
73698: PUSH
73699: LD_INT 12
73701: PUSH
73702: LD_INT 13
73704: PUSH
73705: LD_INT 14
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: IN
73714: IFFALSE 73726
// uc_nation := nation_arabian else
73716: LD_ADDR_OWVAR 21
73720: PUSH
73721: LD_INT 2
73723: ST_TO_ADDR
73724: GO 73734
// uc_nation := nation_russian ;
73726: LD_ADDR_OWVAR 21
73730: PUSH
73731: LD_INT 3
73733: ST_TO_ADDR
// vc_chassis := chassis ;
73734: LD_ADDR_OWVAR 37
73738: PUSH
73739: LD_VAR 0 1
73743: ST_TO_ADDR
// vc_engine := engine ;
73744: LD_ADDR_OWVAR 39
73748: PUSH
73749: LD_VAR 0 2
73753: ST_TO_ADDR
// vc_control := control ;
73754: LD_ADDR_OWVAR 38
73758: PUSH
73759: LD_VAR 0 3
73763: ST_TO_ADDR
// vc_weapon := weapon ;
73764: LD_ADDR_OWVAR 40
73768: PUSH
73769: LD_VAR 0 4
73773: ST_TO_ADDR
// un := CreateVehicle ;
73774: LD_ADDR_VAR 0 8
73778: PUSH
73779: CALL_OW 45
73783: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
73784: LD_VAR 0 8
73788: PPUSH
73789: LD_INT 0
73791: PPUSH
73792: LD_INT 5
73794: PPUSH
73795: CALL_OW 12
73799: PPUSH
73800: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
73804: LD_VAR 0 8
73808: PPUSH
73809: LD_VAR 0 5
73813: PPUSH
73814: LD_VAR 0 6
73818: PPUSH
73819: LD_INT 1
73821: PPUSH
73822: CALL_OW 48
// end ;
73826: LD_VAR 0 7
73830: RET
// export hInvincible ; every 1 do
73831: GO 73833
73833: DISABLE
// hInvincible := [ ] ;
73834: LD_ADDR_EXP 108
73838: PUSH
73839: EMPTY
73840: ST_TO_ADDR
73841: END
// every 10 do var i ;
73842: GO 73844
73844: DISABLE
73845: LD_INT 0
73847: PPUSH
// begin enable ;
73848: ENABLE
// if not hInvincible then
73849: LD_EXP 108
73853: NOT
73854: IFFALSE 73858
// exit ;
73856: GO 73902
// for i in hInvincible do
73858: LD_ADDR_VAR 0 1
73862: PUSH
73863: LD_EXP 108
73867: PUSH
73868: FOR_IN
73869: IFFALSE 73900
// if GetLives ( i ) < 1000 then
73871: LD_VAR 0 1
73875: PPUSH
73876: CALL_OW 256
73880: PUSH
73881: LD_INT 1000
73883: LESS
73884: IFFALSE 73898
// SetLives ( i , 1000 ) ;
73886: LD_VAR 0 1
73890: PPUSH
73891: LD_INT 1000
73893: PPUSH
73894: CALL_OW 234
73898: GO 73868
73900: POP
73901: POP
// end ;
73902: PPOPN 1
73904: END
// export function hHackInvincible ; var i ; begin
73905: LD_INT 0
73907: PPUSH
73908: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
73909: LD_ADDR_VAR 0 2
73913: PUSH
73914: LD_INT 2
73916: PUSH
73917: LD_INT 21
73919: PUSH
73920: LD_INT 1
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 21
73929: PUSH
73930: LD_INT 2
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: PPUSH
73942: CALL_OW 69
73946: PUSH
73947: FOR_IN
73948: IFFALSE 74009
// if IsSelected ( i ) then
73950: LD_VAR 0 2
73954: PPUSH
73955: CALL_OW 306
73959: IFFALSE 74007
// begin if i in hInvincible then
73961: LD_VAR 0 2
73965: PUSH
73966: LD_EXP 108
73970: IN
73971: IFFALSE 73991
// hInvincible := hInvincible diff i else
73973: LD_ADDR_EXP 108
73977: PUSH
73978: LD_EXP 108
73982: PUSH
73983: LD_VAR 0 2
73987: DIFF
73988: ST_TO_ADDR
73989: GO 74007
// hInvincible := hInvincible union i ;
73991: LD_ADDR_EXP 108
73995: PUSH
73996: LD_EXP 108
74000: PUSH
74001: LD_VAR 0 2
74005: UNION
74006: ST_TO_ADDR
// end ;
74007: GO 73947
74009: POP
74010: POP
// end ;
74011: LD_VAR 0 1
74015: RET
// export function hHackInvisible ; var i , j ; begin
74016: LD_INT 0
74018: PPUSH
74019: PPUSH
74020: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
74021: LD_ADDR_VAR 0 2
74025: PUSH
74026: LD_INT 21
74028: PUSH
74029: LD_INT 1
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PPUSH
74036: CALL_OW 69
74040: PUSH
74041: FOR_IN
74042: IFFALSE 74066
// if IsSelected ( i ) then
74044: LD_VAR 0 2
74048: PPUSH
74049: CALL_OW 306
74053: IFFALSE 74064
// ComForceInvisible ( i ) ;
74055: LD_VAR 0 2
74059: PPUSH
74060: CALL_OW 496
74064: GO 74041
74066: POP
74067: POP
// end ;
74068: LD_VAR 0 1
74072: RET
// export function hHackChangeYourSide ; begin
74073: LD_INT 0
74075: PPUSH
// if your_side = 8 then
74076: LD_OWVAR 2
74080: PUSH
74081: LD_INT 8
74083: EQUAL
74084: IFFALSE 74096
// your_side := 0 else
74086: LD_ADDR_OWVAR 2
74090: PUSH
74091: LD_INT 0
74093: ST_TO_ADDR
74094: GO 74110
// your_side := your_side + 1 ;
74096: LD_ADDR_OWVAR 2
74100: PUSH
74101: LD_OWVAR 2
74105: PUSH
74106: LD_INT 1
74108: PLUS
74109: ST_TO_ADDR
// end ;
74110: LD_VAR 0 1
74114: RET
// export function hHackChangeUnitSide ; var i , j ; begin
74115: LD_INT 0
74117: PPUSH
74118: PPUSH
74119: PPUSH
// for i in all_units do
74120: LD_ADDR_VAR 0 2
74124: PUSH
74125: LD_OWVAR 3
74129: PUSH
74130: FOR_IN
74131: IFFALSE 74209
// if IsSelected ( i ) then
74133: LD_VAR 0 2
74137: PPUSH
74138: CALL_OW 306
74142: IFFALSE 74207
// begin j := GetSide ( i ) ;
74144: LD_ADDR_VAR 0 3
74148: PUSH
74149: LD_VAR 0 2
74153: PPUSH
74154: CALL_OW 255
74158: ST_TO_ADDR
// if j = 8 then
74159: LD_VAR 0 3
74163: PUSH
74164: LD_INT 8
74166: EQUAL
74167: IFFALSE 74179
// j := 0 else
74169: LD_ADDR_VAR 0 3
74173: PUSH
74174: LD_INT 0
74176: ST_TO_ADDR
74177: GO 74193
// j := j + 1 ;
74179: LD_ADDR_VAR 0 3
74183: PUSH
74184: LD_VAR 0 3
74188: PUSH
74189: LD_INT 1
74191: PLUS
74192: ST_TO_ADDR
// SetSide ( i , j ) ;
74193: LD_VAR 0 2
74197: PPUSH
74198: LD_VAR 0 3
74202: PPUSH
74203: CALL_OW 235
// end ;
74207: GO 74130
74209: POP
74210: POP
// end ;
74211: LD_VAR 0 1
74215: RET
// export function hHackFog ; begin
74216: LD_INT 0
74218: PPUSH
// FogOff ( true ) ;
74219: LD_INT 1
74221: PPUSH
74222: CALL_OW 344
// end ;
74226: LD_VAR 0 1
74230: RET
// export function hHackTeleport ( unit , x , y ) ; begin
74231: LD_INT 0
74233: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
74234: LD_VAR 0 1
74238: PPUSH
74239: LD_VAR 0 2
74243: PPUSH
74244: LD_VAR 0 3
74248: PPUSH
74249: LD_INT 1
74251: PPUSH
74252: LD_INT 1
74254: PPUSH
74255: CALL_OW 483
// CenterOnXY ( x , y ) ;
74259: LD_VAR 0 2
74263: PPUSH
74264: LD_VAR 0 3
74268: PPUSH
74269: CALL_OW 84
// end ;
74273: LD_VAR 0 4
74277: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
74278: LD_INT 0
74280: PPUSH
74281: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
74282: LD_VAR 0 1
74286: NOT
74287: PUSH
74288: LD_VAR 0 2
74292: PPUSH
74293: LD_VAR 0 3
74297: PPUSH
74298: CALL_OW 488
74302: NOT
74303: OR
74304: PUSH
74305: LD_VAR 0 1
74309: PPUSH
74310: CALL_OW 266
74314: PUSH
74315: LD_INT 3
74317: NONEQUAL
74318: PUSH
74319: LD_VAR 0 1
74323: PPUSH
74324: CALL_OW 247
74328: PUSH
74329: LD_INT 1
74331: EQUAL
74332: NOT
74333: AND
74334: OR
74335: IFFALSE 74339
// exit ;
74337: GO 74488
// if GetType ( factory ) = unit_human then
74339: LD_VAR 0 1
74343: PPUSH
74344: CALL_OW 247
74348: PUSH
74349: LD_INT 1
74351: EQUAL
74352: IFFALSE 74369
// factory := IsInUnit ( factory ) ;
74354: LD_ADDR_VAR 0 1
74358: PUSH
74359: LD_VAR 0 1
74363: PPUSH
74364: CALL_OW 310
74368: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
74369: LD_VAR 0 1
74373: PPUSH
74374: CALL_OW 266
74378: PUSH
74379: LD_INT 3
74381: NONEQUAL
74382: IFFALSE 74386
// exit ;
74384: GO 74488
// if HexInfo ( x , y ) = factory then
74386: LD_VAR 0 2
74390: PPUSH
74391: LD_VAR 0 3
74395: PPUSH
74396: CALL_OW 428
74400: PUSH
74401: LD_VAR 0 1
74405: EQUAL
74406: IFFALSE 74433
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
74408: LD_ADDR_EXP 109
74412: PUSH
74413: LD_EXP 109
74417: PPUSH
74418: LD_VAR 0 1
74422: PPUSH
74423: LD_INT 0
74425: PPUSH
74426: CALL_OW 1
74430: ST_TO_ADDR
74431: GO 74484
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
74433: LD_ADDR_EXP 109
74437: PUSH
74438: LD_EXP 109
74442: PPUSH
74443: LD_VAR 0 1
74447: PPUSH
74448: LD_VAR 0 1
74452: PPUSH
74453: CALL_OW 255
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_VAR 0 3
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: PPUSH
74479: CALL_OW 1
74483: ST_TO_ADDR
// UpdateFactoryWaypoints ;
74484: CALL 74493 0 0
// end ;
74488: LD_VAR 0 4
74492: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
74493: LD_INT 0
74495: PPUSH
74496: PPUSH
74497: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
74498: LD_STRING resetFactoryWaypoint();
74500: PPUSH
74501: CALL_OW 559
// if factoryWaypoints then
74505: LD_EXP 109
74509: IFFALSE 74635
// begin list := PrepareArray ( factoryWaypoints ) ;
74511: LD_ADDR_VAR 0 3
74515: PUSH
74516: LD_EXP 109
74520: PPUSH
74521: CALL 58448 0 1
74525: ST_TO_ADDR
// for i := 1 to list do
74526: LD_ADDR_VAR 0 2
74530: PUSH
74531: DOUBLE
74532: LD_INT 1
74534: DEC
74535: ST_TO_ADDR
74536: LD_VAR 0 3
74540: PUSH
74541: FOR_TO
74542: IFFALSE 74633
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74544: LD_STRING setFactoryWaypointXY(
74546: PUSH
74547: LD_VAR 0 3
74551: PUSH
74552: LD_VAR 0 2
74556: ARRAY
74557: PUSH
74558: LD_INT 1
74560: ARRAY
74561: STR
74562: PUSH
74563: LD_STRING ,
74565: STR
74566: PUSH
74567: LD_VAR 0 3
74571: PUSH
74572: LD_VAR 0 2
74576: ARRAY
74577: PUSH
74578: LD_INT 2
74580: ARRAY
74581: STR
74582: PUSH
74583: LD_STRING ,
74585: STR
74586: PUSH
74587: LD_VAR 0 3
74591: PUSH
74592: LD_VAR 0 2
74596: ARRAY
74597: PUSH
74598: LD_INT 3
74600: ARRAY
74601: STR
74602: PUSH
74603: LD_STRING ,
74605: STR
74606: PUSH
74607: LD_VAR 0 3
74611: PUSH
74612: LD_VAR 0 2
74616: ARRAY
74617: PUSH
74618: LD_INT 4
74620: ARRAY
74621: STR
74622: PUSH
74623: LD_STRING )
74625: STR
74626: PPUSH
74627: CALL_OW 559
74631: GO 74541
74633: POP
74634: POP
// end ; end ;
74635: LD_VAR 0 1
74639: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
74640: LD_INT 0
74642: PPUSH
// if HexInfo ( x , y ) = warehouse then
74643: LD_VAR 0 2
74647: PPUSH
74648: LD_VAR 0 3
74652: PPUSH
74653: CALL_OW 428
74657: PUSH
74658: LD_VAR 0 1
74662: EQUAL
74663: IFFALSE 74690
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
74665: LD_ADDR_EXP 110
74669: PUSH
74670: LD_EXP 110
74674: PPUSH
74675: LD_VAR 0 1
74679: PPUSH
74680: LD_INT 0
74682: PPUSH
74683: CALL_OW 1
74687: ST_TO_ADDR
74688: GO 74741
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
74690: LD_ADDR_EXP 110
74694: PUSH
74695: LD_EXP 110
74699: PPUSH
74700: LD_VAR 0 1
74704: PPUSH
74705: LD_VAR 0 1
74709: PPUSH
74710: CALL_OW 255
74714: PUSH
74715: LD_VAR 0 1
74719: PUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_VAR 0 3
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: LIST
74734: LIST
74735: PPUSH
74736: CALL_OW 1
74740: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
74741: CALL 74750 0 0
// end ;
74745: LD_VAR 0 4
74749: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
74750: LD_INT 0
74752: PPUSH
74753: PPUSH
74754: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
74755: LD_STRING resetWarehouseGatheringPoints();
74757: PPUSH
74758: CALL_OW 559
// if warehouseGatheringPoints then
74762: LD_EXP 110
74766: IFFALSE 74892
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
74768: LD_ADDR_VAR 0 3
74772: PUSH
74773: LD_EXP 110
74777: PPUSH
74778: CALL 58448 0 1
74782: ST_TO_ADDR
// for i := 1 to list do
74783: LD_ADDR_VAR 0 2
74787: PUSH
74788: DOUBLE
74789: LD_INT 1
74791: DEC
74792: ST_TO_ADDR
74793: LD_VAR 0 3
74797: PUSH
74798: FOR_TO
74799: IFFALSE 74890
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
74801: LD_STRING setWarehouseGatheringPointXY(
74803: PUSH
74804: LD_VAR 0 3
74808: PUSH
74809: LD_VAR 0 2
74813: ARRAY
74814: PUSH
74815: LD_INT 1
74817: ARRAY
74818: STR
74819: PUSH
74820: LD_STRING ,
74822: STR
74823: PUSH
74824: LD_VAR 0 3
74828: PUSH
74829: LD_VAR 0 2
74833: ARRAY
74834: PUSH
74835: LD_INT 2
74837: ARRAY
74838: STR
74839: PUSH
74840: LD_STRING ,
74842: STR
74843: PUSH
74844: LD_VAR 0 3
74848: PUSH
74849: LD_VAR 0 2
74853: ARRAY
74854: PUSH
74855: LD_INT 3
74857: ARRAY
74858: STR
74859: PUSH
74860: LD_STRING ,
74862: STR
74863: PUSH
74864: LD_VAR 0 3
74868: PUSH
74869: LD_VAR 0 2
74873: ARRAY
74874: PUSH
74875: LD_INT 4
74877: ARRAY
74878: STR
74879: PUSH
74880: LD_STRING )
74882: STR
74883: PPUSH
74884: CALL_OW 559
74888: GO 74798
74890: POP
74891: POP
// end ; end ;
74892: LD_VAR 0 1
74896: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
74897: LD_EXP 110
74901: IFFALSE 75586
74903: GO 74905
74905: DISABLE
74906: LD_INT 0
74908: PPUSH
74909: PPUSH
74910: PPUSH
74911: PPUSH
74912: PPUSH
74913: PPUSH
74914: PPUSH
74915: PPUSH
74916: PPUSH
// begin enable ;
74917: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
74918: LD_ADDR_VAR 0 3
74922: PUSH
74923: LD_EXP 110
74927: PPUSH
74928: CALL 58448 0 1
74932: ST_TO_ADDR
// if not list then
74933: LD_VAR 0 3
74937: NOT
74938: IFFALSE 74942
// exit ;
74940: GO 75586
// for i := 1 to list do
74942: LD_ADDR_VAR 0 1
74946: PUSH
74947: DOUBLE
74948: LD_INT 1
74950: DEC
74951: ST_TO_ADDR
74952: LD_VAR 0 3
74956: PUSH
74957: FOR_TO
74958: IFFALSE 75584
// begin depot := list [ i ] [ 2 ] ;
74960: LD_ADDR_VAR 0 8
74964: PUSH
74965: LD_VAR 0 3
74969: PUSH
74970: LD_VAR 0 1
74974: ARRAY
74975: PUSH
74976: LD_INT 2
74978: ARRAY
74979: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
74980: LD_ADDR_VAR 0 5
74984: PUSH
74985: LD_VAR 0 3
74989: PUSH
74990: LD_VAR 0 1
74994: ARRAY
74995: PUSH
74996: LD_INT 1
74998: ARRAY
74999: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
75000: LD_VAR 0 8
75004: PPUSH
75005: CALL_OW 301
75009: PUSH
75010: LD_VAR 0 5
75014: PUSH
75015: LD_VAR 0 8
75019: PPUSH
75020: CALL_OW 255
75024: NONEQUAL
75025: OR
75026: IFFALSE 75055
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
75028: LD_ADDR_EXP 110
75032: PUSH
75033: LD_EXP 110
75037: PPUSH
75038: LD_VAR 0 8
75042: PPUSH
75043: LD_INT 0
75045: PPUSH
75046: CALL_OW 1
75050: ST_TO_ADDR
// exit ;
75051: POP
75052: POP
75053: GO 75586
// end ; x := list [ i ] [ 3 ] ;
75055: LD_ADDR_VAR 0 6
75059: PUSH
75060: LD_VAR 0 3
75064: PUSH
75065: LD_VAR 0 1
75069: ARRAY
75070: PUSH
75071: LD_INT 3
75073: ARRAY
75074: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
75075: LD_ADDR_VAR 0 7
75079: PUSH
75080: LD_VAR 0 3
75084: PUSH
75085: LD_VAR 0 1
75089: ARRAY
75090: PUSH
75091: LD_INT 4
75093: ARRAY
75094: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
75095: LD_ADDR_VAR 0 9
75099: PUSH
75100: LD_VAR 0 6
75104: PPUSH
75105: LD_VAR 0 7
75109: PPUSH
75110: LD_INT 16
75112: PPUSH
75113: CALL 57036 0 3
75117: ST_TO_ADDR
// if not cratesNearbyPoint then
75118: LD_VAR 0 9
75122: NOT
75123: IFFALSE 75129
// exit ;
75125: POP
75126: POP
75127: GO 75586
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
75129: LD_ADDR_VAR 0 4
75133: PUSH
75134: LD_INT 22
75136: PUSH
75137: LD_VAR 0 5
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 3
75148: PUSH
75149: LD_INT 60
75151: PUSH
75152: EMPTY
75153: LIST
75154: PUSH
75155: EMPTY
75156: LIST
75157: LIST
75158: PUSH
75159: LD_INT 91
75161: PUSH
75162: LD_VAR 0 8
75166: PUSH
75167: LD_INT 6
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 2
75177: PUSH
75178: LD_INT 25
75180: PUSH
75181: LD_INT 2
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 25
75190: PUSH
75191: LD_INT 16
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: LIST
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: LIST
75207: LIST
75208: PPUSH
75209: CALL_OW 69
75213: PUSH
75214: LD_VAR 0 8
75218: PPUSH
75219: CALL_OW 313
75223: PPUSH
75224: LD_INT 3
75226: PUSH
75227: LD_INT 60
75229: PUSH
75230: EMPTY
75231: LIST
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_INT 2
75239: PUSH
75240: LD_INT 25
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 25
75252: PUSH
75253: LD_INT 16
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: EMPTY
75261: LIST
75262: LIST
75263: LIST
75264: PUSH
75265: EMPTY
75266: LIST
75267: LIST
75268: PPUSH
75269: CALL_OW 72
75273: UNION
75274: ST_TO_ADDR
// if tmp then
75275: LD_VAR 0 4
75279: IFFALSE 75359
// begin tmp := ShrinkArray ( tmp , 3 ) ;
75281: LD_ADDR_VAR 0 4
75285: PUSH
75286: LD_VAR 0 4
75290: PPUSH
75291: LD_INT 3
75293: PPUSH
75294: CALL 55005 0 2
75298: ST_TO_ADDR
// for j in tmp do
75299: LD_ADDR_VAR 0 2
75303: PUSH
75304: LD_VAR 0 4
75308: PUSH
75309: FOR_IN
75310: IFFALSE 75353
// begin if IsInUnit ( j ) then
75312: LD_VAR 0 2
75316: PPUSH
75317: CALL_OW 310
75321: IFFALSE 75332
// ComExit ( j ) ;
75323: LD_VAR 0 2
75327: PPUSH
75328: CALL 55088 0 1
// AddComCollect ( j , x , y ) ;
75332: LD_VAR 0 2
75336: PPUSH
75337: LD_VAR 0 6
75341: PPUSH
75342: LD_VAR 0 7
75346: PPUSH
75347: CALL_OW 177
// end ;
75351: GO 75309
75353: POP
75354: POP
// exit ;
75355: POP
75356: POP
75357: GO 75586
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
75359: LD_ADDR_VAR 0 4
75363: PUSH
75364: LD_INT 22
75366: PUSH
75367: LD_VAR 0 5
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 91
75378: PUSH
75379: LD_VAR 0 8
75383: PUSH
75384: LD_INT 8
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 2
75394: PUSH
75395: LD_INT 34
75397: PUSH
75398: LD_INT 12
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 34
75407: PUSH
75408: LD_INT 51
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 34
75417: PUSH
75418: LD_INT 32
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 34
75427: PUSH
75428: LD_INT 89
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: EMPTY
75436: LIST
75437: LIST
75438: LIST
75439: LIST
75440: LIST
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: LIST
75446: PPUSH
75447: CALL_OW 69
75451: ST_TO_ADDR
// if tmp then
75452: LD_VAR 0 4
75456: IFFALSE 75582
// begin for j in tmp do
75458: LD_ADDR_VAR 0 2
75462: PUSH
75463: LD_VAR 0 4
75467: PUSH
75468: FOR_IN
75469: IFFALSE 75580
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
75471: LD_VAR 0 2
75475: PPUSH
75476: CALL_OW 262
75480: PUSH
75481: LD_INT 3
75483: EQUAL
75484: PUSH
75485: LD_VAR 0 2
75489: PPUSH
75490: CALL_OW 261
75494: PUSH
75495: LD_INT 20
75497: GREATER
75498: OR
75499: PUSH
75500: LD_VAR 0 2
75504: PPUSH
75505: CALL_OW 314
75509: NOT
75510: AND
75511: PUSH
75512: LD_VAR 0 2
75516: PPUSH
75517: CALL_OW 263
75521: PUSH
75522: LD_INT 1
75524: NONEQUAL
75525: PUSH
75526: LD_VAR 0 2
75530: PPUSH
75531: CALL_OW 311
75535: OR
75536: AND
75537: IFFALSE 75578
// begin ComCollect ( j , x , y ) ;
75539: LD_VAR 0 2
75543: PPUSH
75544: LD_VAR 0 6
75548: PPUSH
75549: LD_VAR 0 7
75553: PPUSH
75554: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
75558: LD_VAR 0 2
75562: PPUSH
75563: LD_VAR 0 8
75567: PPUSH
75568: CALL_OW 172
// exit ;
75572: POP
75573: POP
75574: POP
75575: POP
75576: GO 75586
// end ;
75578: GO 75468
75580: POP
75581: POP
// end ; end ;
75582: GO 74957
75584: POP
75585: POP
// end ; end_of_file
75586: PPOPN 9
75588: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75589: LD_VAR 0 1
75593: PPUSH
75594: LD_VAR 0 2
75598: PPUSH
75599: LD_VAR 0 3
75603: PPUSH
75604: LD_VAR 0 4
75608: PPUSH
75609: LD_VAR 0 5
75613: PPUSH
75614: LD_VAR 0 6
75618: PPUSH
75619: CALL 59942 0 6
// end ;
75623: PPOPN 6
75625: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75626: LD_INT 0
75628: PPUSH
// begin if not units then
75629: LD_VAR 0 1
75633: NOT
75634: IFFALSE 75638
// exit ;
75636: GO 75638
// end ;
75638: PPOPN 7
75640: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75641: CALL 59829 0 0
// end ; end_of_file
75645: PPOPN 1
75647: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75648: LD_VAR 0 1
75652: PUSH
75653: LD_INT 200
75655: DOUBLE
75656: GREATEREQUAL
75657: IFFALSE 75665
75659: LD_INT 299
75661: DOUBLE
75662: LESSEQUAL
75663: IFTRUE 75667
75665: GO 75699
75667: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75668: LD_VAR 0 1
75672: PPUSH
75673: LD_VAR 0 2
75677: PPUSH
75678: LD_VAR 0 3
75682: PPUSH
75683: LD_VAR 0 4
75687: PPUSH
75688: LD_VAR 0 5
75692: PPUSH
75693: CALL 76187 0 5
75697: GO 75776
75699: LD_INT 300
75701: DOUBLE
75702: GREATEREQUAL
75703: IFFALSE 75711
75705: LD_INT 399
75707: DOUBLE
75708: LESSEQUAL
75709: IFTRUE 75713
75711: GO 75775
75713: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75714: LD_VAR 0 1
75718: PPUSH
75719: LD_VAR 0 2
75723: PPUSH
75724: LD_VAR 0 3
75728: PPUSH
75729: LD_VAR 0 4
75733: PPUSH
75734: LD_VAR 0 5
75738: PPUSH
75739: LD_VAR 0 6
75743: PPUSH
75744: LD_VAR 0 7
75748: PPUSH
75749: LD_VAR 0 8
75753: PPUSH
75754: LD_VAR 0 9
75758: PPUSH
75759: LD_VAR 0 10
75763: PPUSH
75764: LD_VAR 0 11
75768: PPUSH
75769: CALL 72290 0 11
75773: GO 75776
75775: POP
// end ;
75776: PPOPN 11
75778: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75779: LD_VAR 0 1
75783: PPUSH
75784: LD_VAR 0 2
75788: PPUSH
75789: LD_VAR 0 3
75793: PPUSH
75794: LD_VAR 0 4
75798: PPUSH
75799: LD_VAR 0 5
75803: PPUSH
75804: CALL 75923 0 5
// end ; end_of_file
75808: PPOPN 5
75810: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
75811: LD_INT 0
75813: PPUSH
75814: PPUSH
75815: PPUSH
75816: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
75817: LD_VAR 0 1
75821: PPUSH
75822: CALL_OW 264
75826: PUSH
75827: LD_INT 91
75829: EQUAL
75830: IFFALSE 75902
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
75832: LD_INT 68
75834: PPUSH
75835: LD_VAR 0 1
75839: PPUSH
75840: CALL_OW 255
75844: PPUSH
75845: CALL_OW 321
75849: PUSH
75850: LD_INT 2
75852: EQUAL
75853: IFFALSE 75865
// eff := 70 else
75855: LD_ADDR_VAR 0 4
75859: PUSH
75860: LD_INT 70
75862: ST_TO_ADDR
75863: GO 75873
// eff := 30 ;
75865: LD_ADDR_VAR 0 4
75869: PUSH
75870: LD_INT 30
75872: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
75873: LD_VAR 0 1
75877: PPUSH
75878: CALL_OW 250
75882: PPUSH
75883: LD_VAR 0 1
75887: PPUSH
75888: CALL_OW 251
75892: PPUSH
75893: LD_VAR 0 4
75897: PPUSH
75898: CALL_OW 495
// end ; end ;
75902: LD_VAR 0 2
75906: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
75907: LD_INT 0
75909: PPUSH
// end ;
75910: LD_VAR 0 4
75914: RET
// export function SOS_Command ( cmd ) ; begin
75915: LD_INT 0
75917: PPUSH
// end ;
75918: LD_VAR 0 2
75922: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
75923: LD_INT 0
75925: PPUSH
// end ;
75926: LD_VAR 0 6
75930: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
75931: LD_INT 0
75933: PPUSH
75934: PPUSH
// if not vehicle or not factory then
75935: LD_VAR 0 1
75939: NOT
75940: PUSH
75941: LD_VAR 0 2
75945: NOT
75946: OR
75947: IFFALSE 75951
// exit ;
75949: GO 76182
// if factoryWaypoints >= factory then
75951: LD_EXP 109
75955: PUSH
75956: LD_VAR 0 2
75960: GREATEREQUAL
75961: IFFALSE 76182
// if factoryWaypoints [ factory ] then
75963: LD_EXP 109
75967: PUSH
75968: LD_VAR 0 2
75972: ARRAY
75973: IFFALSE 76182
// begin if GetControl ( vehicle ) = control_manual then
75975: LD_VAR 0 1
75979: PPUSH
75980: CALL_OW 263
75984: PUSH
75985: LD_INT 1
75987: EQUAL
75988: IFFALSE 76069
// begin driver := IsDrivenBy ( vehicle ) ;
75990: LD_ADDR_VAR 0 4
75994: PUSH
75995: LD_VAR 0 1
75999: PPUSH
76000: CALL_OW 311
76004: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
76005: LD_VAR 0 4
76009: PPUSH
76010: LD_EXP 109
76014: PUSH
76015: LD_VAR 0 2
76019: ARRAY
76020: PUSH
76021: LD_INT 3
76023: ARRAY
76024: PPUSH
76025: LD_EXP 109
76029: PUSH
76030: LD_VAR 0 2
76034: ARRAY
76035: PUSH
76036: LD_INT 4
76038: ARRAY
76039: PPUSH
76040: CALL_OW 171
// AddComExitVehicle ( driver ) ;
76044: LD_VAR 0 4
76048: PPUSH
76049: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
76053: LD_VAR 0 4
76057: PPUSH
76058: LD_VAR 0 2
76062: PPUSH
76063: CALL_OW 180
// end else
76067: GO 76182
// if GetControl ( vehicle ) = control_remote then
76069: LD_VAR 0 1
76073: PPUSH
76074: CALL_OW 263
76078: PUSH
76079: LD_INT 2
76081: EQUAL
76082: IFFALSE 76143
// begin wait ( 0 0$2 ) ;
76084: LD_INT 70
76086: PPUSH
76087: CALL_OW 67
// if Connect ( vehicle ) then
76091: LD_VAR 0 1
76095: PPUSH
76096: CALL 25307 0 1
76100: IFFALSE 76141
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
76102: LD_VAR 0 1
76106: PPUSH
76107: LD_EXP 109
76111: PUSH
76112: LD_VAR 0 2
76116: ARRAY
76117: PUSH
76118: LD_INT 3
76120: ARRAY
76121: PPUSH
76122: LD_EXP 109
76126: PUSH
76127: LD_VAR 0 2
76131: ARRAY
76132: PUSH
76133: LD_INT 4
76135: ARRAY
76136: PPUSH
76137: CALL_OW 171
// end else
76141: GO 76182
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
76143: LD_VAR 0 1
76147: PPUSH
76148: LD_EXP 109
76152: PUSH
76153: LD_VAR 0 2
76157: ARRAY
76158: PUSH
76159: LD_INT 3
76161: ARRAY
76162: PPUSH
76163: LD_EXP 109
76167: PUSH
76168: LD_VAR 0 2
76172: ARRAY
76173: PUSH
76174: LD_INT 4
76176: ARRAY
76177: PPUSH
76178: CALL_OW 171
// end ; end ;
76182: LD_VAR 0 3
76186: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
76187: LD_INT 0
76189: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
76190: LD_VAR 0 1
76194: PUSH
76195: LD_INT 250
76197: EQUAL
76198: PUSH
76199: LD_VAR 0 2
76203: PPUSH
76204: CALL_OW 264
76208: PUSH
76209: LD_INT 81
76211: EQUAL
76212: AND
76213: IFFALSE 76234
// MinerPlaceMine ( unit , x , y ) ;
76215: LD_VAR 0 2
76219: PPUSH
76220: LD_VAR 0 4
76224: PPUSH
76225: LD_VAR 0 5
76229: PPUSH
76230: CALL 79224 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
76234: LD_VAR 0 1
76238: PUSH
76239: LD_INT 251
76241: EQUAL
76242: PUSH
76243: LD_VAR 0 2
76247: PPUSH
76248: CALL_OW 264
76252: PUSH
76253: LD_INT 81
76255: EQUAL
76256: AND
76257: IFFALSE 76278
// MinerDetonateMine ( unit , x , y ) ;
76259: LD_VAR 0 2
76263: PPUSH
76264: LD_VAR 0 4
76268: PPUSH
76269: LD_VAR 0 5
76273: PPUSH
76274: CALL 79499 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
76278: LD_VAR 0 1
76282: PUSH
76283: LD_INT 252
76285: EQUAL
76286: PUSH
76287: LD_VAR 0 2
76291: PPUSH
76292: CALL_OW 264
76296: PUSH
76297: LD_INT 81
76299: EQUAL
76300: AND
76301: IFFALSE 76322
// MinerCreateMinefield ( unit , x , y ) ;
76303: LD_VAR 0 2
76307: PPUSH
76308: LD_VAR 0 4
76312: PPUSH
76313: LD_VAR 0 5
76317: PPUSH
76318: CALL 79916 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
76322: LD_VAR 0 1
76326: PUSH
76327: LD_INT 253
76329: EQUAL
76330: PUSH
76331: LD_VAR 0 2
76335: PPUSH
76336: CALL_OW 257
76340: PUSH
76341: LD_INT 5
76343: EQUAL
76344: AND
76345: IFFALSE 76366
// ComBinocular ( unit , x , y ) ;
76347: LD_VAR 0 2
76351: PPUSH
76352: LD_VAR 0 4
76356: PPUSH
76357: LD_VAR 0 5
76361: PPUSH
76362: CALL 80285 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
76366: LD_VAR 0 1
76370: PUSH
76371: LD_INT 254
76373: EQUAL
76374: PUSH
76375: LD_VAR 0 2
76379: PPUSH
76380: CALL_OW 264
76384: PUSH
76385: LD_INT 99
76387: EQUAL
76388: AND
76389: PUSH
76390: LD_VAR 0 3
76394: PPUSH
76395: CALL_OW 263
76399: PUSH
76400: LD_INT 3
76402: EQUAL
76403: AND
76404: IFFALSE 76420
// HackDestroyVehicle ( unit , selectedUnit ) ;
76406: LD_VAR 0 2
76410: PPUSH
76411: LD_VAR 0 3
76415: PPUSH
76416: CALL 78588 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
76420: LD_VAR 0 1
76424: PUSH
76425: LD_INT 255
76427: EQUAL
76428: PUSH
76429: LD_VAR 0 2
76433: PPUSH
76434: CALL_OW 264
76438: PUSH
76439: LD_INT 14
76441: PUSH
76442: LD_INT 53
76444: PUSH
76445: EMPTY
76446: LIST
76447: LIST
76448: IN
76449: AND
76450: PUSH
76451: LD_VAR 0 4
76455: PPUSH
76456: LD_VAR 0 5
76460: PPUSH
76461: CALL_OW 488
76465: AND
76466: IFFALSE 76490
// CutTreeXYR ( unit , x , y , 12 ) ;
76468: LD_VAR 0 2
76472: PPUSH
76473: LD_VAR 0 4
76477: PPUSH
76478: LD_VAR 0 5
76482: PPUSH
76483: LD_INT 12
76485: PPUSH
76486: CALL 76585 0 4
// if cmd = 256 then
76490: LD_VAR 0 1
76494: PUSH
76495: LD_INT 256
76497: EQUAL
76498: IFFALSE 76519
// SetFactoryWaypoint ( unit , x , y ) ;
76500: LD_VAR 0 2
76504: PPUSH
76505: LD_VAR 0 4
76509: PPUSH
76510: LD_VAR 0 5
76514: PPUSH
76515: CALL 74278 0 3
// if cmd = 257 then
76519: LD_VAR 0 1
76523: PUSH
76524: LD_INT 257
76526: EQUAL
76527: IFFALSE 76548
// SetWarehouseGatheringPoint ( unit , x , y ) ;
76529: LD_VAR 0 2
76533: PPUSH
76534: LD_VAR 0 4
76538: PPUSH
76539: LD_VAR 0 5
76543: PPUSH
76544: CALL 74640 0 3
// if cmd = 258 then
76548: LD_VAR 0 1
76552: PUSH
76553: LD_INT 258
76555: EQUAL
76556: IFFALSE 76580
// BurnTreeXYR ( unit , x , y , 8 ) ;
76558: LD_VAR 0 2
76562: PPUSH
76563: LD_VAR 0 4
76567: PPUSH
76568: LD_VAR 0 5
76572: PPUSH
76573: LD_INT 8
76575: PPUSH
76576: CALL 76979 0 4
// end ;
76580: LD_VAR 0 6
76584: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
76585: LD_INT 0
76587: PPUSH
76588: PPUSH
76589: PPUSH
76590: PPUSH
76591: PPUSH
76592: PPUSH
76593: PPUSH
76594: PPUSH
76595: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
76596: LD_VAR 0 1
76600: PPUSH
76601: CALL_OW 302
76605: NOT
76606: PUSH
76607: LD_VAR 0 2
76611: PPUSH
76612: LD_VAR 0 3
76616: PPUSH
76617: CALL_OW 488
76621: NOT
76622: OR
76623: PUSH
76624: LD_VAR 0 4
76628: NOT
76629: OR
76630: IFFALSE 76634
// exit ;
76632: GO 76974
// list := [ ] ;
76634: LD_ADDR_VAR 0 13
76638: PUSH
76639: EMPTY
76640: ST_TO_ADDR
// if x - r < 0 then
76641: LD_VAR 0 2
76645: PUSH
76646: LD_VAR 0 4
76650: MINUS
76651: PUSH
76652: LD_INT 0
76654: LESS
76655: IFFALSE 76667
// min_x := 0 else
76657: LD_ADDR_VAR 0 7
76661: PUSH
76662: LD_INT 0
76664: ST_TO_ADDR
76665: GO 76683
// min_x := x - r ;
76667: LD_ADDR_VAR 0 7
76671: PUSH
76672: LD_VAR 0 2
76676: PUSH
76677: LD_VAR 0 4
76681: MINUS
76682: ST_TO_ADDR
// if y - r < 0 then
76683: LD_VAR 0 3
76687: PUSH
76688: LD_VAR 0 4
76692: MINUS
76693: PUSH
76694: LD_INT 0
76696: LESS
76697: IFFALSE 76709
// min_y := 0 else
76699: LD_ADDR_VAR 0 8
76703: PUSH
76704: LD_INT 0
76706: ST_TO_ADDR
76707: GO 76725
// min_y := y - r ;
76709: LD_ADDR_VAR 0 8
76713: PUSH
76714: LD_VAR 0 3
76718: PUSH
76719: LD_VAR 0 4
76723: MINUS
76724: ST_TO_ADDR
// max_x := x + r ;
76725: LD_ADDR_VAR 0 9
76729: PUSH
76730: LD_VAR 0 2
76734: PUSH
76735: LD_VAR 0 4
76739: PLUS
76740: ST_TO_ADDR
// max_y := y + r ;
76741: LD_ADDR_VAR 0 10
76745: PUSH
76746: LD_VAR 0 3
76750: PUSH
76751: LD_VAR 0 4
76755: PLUS
76756: ST_TO_ADDR
// for _x = min_x to max_x do
76757: LD_ADDR_VAR 0 11
76761: PUSH
76762: DOUBLE
76763: LD_VAR 0 7
76767: DEC
76768: ST_TO_ADDR
76769: LD_VAR 0 9
76773: PUSH
76774: FOR_TO
76775: IFFALSE 76892
// for _y = min_y to max_y do
76777: LD_ADDR_VAR 0 12
76781: PUSH
76782: DOUBLE
76783: LD_VAR 0 8
76787: DEC
76788: ST_TO_ADDR
76789: LD_VAR 0 10
76793: PUSH
76794: FOR_TO
76795: IFFALSE 76888
// begin if not ValidHex ( _x , _y ) then
76797: LD_VAR 0 11
76801: PPUSH
76802: LD_VAR 0 12
76806: PPUSH
76807: CALL_OW 488
76811: NOT
76812: IFFALSE 76816
// continue ;
76814: GO 76794
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
76816: LD_VAR 0 11
76820: PPUSH
76821: LD_VAR 0 12
76825: PPUSH
76826: CALL_OW 351
76830: PUSH
76831: LD_VAR 0 11
76835: PPUSH
76836: LD_VAR 0 12
76840: PPUSH
76841: CALL_OW 554
76845: AND
76846: IFFALSE 76886
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
76848: LD_ADDR_VAR 0 13
76852: PUSH
76853: LD_VAR 0 13
76857: PPUSH
76858: LD_VAR 0 13
76862: PUSH
76863: LD_INT 1
76865: PLUS
76866: PPUSH
76867: LD_VAR 0 11
76871: PUSH
76872: LD_VAR 0 12
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PPUSH
76881: CALL_OW 2
76885: ST_TO_ADDR
// end ;
76886: GO 76794
76888: POP
76889: POP
76890: GO 76774
76892: POP
76893: POP
// if not list then
76894: LD_VAR 0 13
76898: NOT
76899: IFFALSE 76903
// exit ;
76901: GO 76974
// for i in list do
76903: LD_ADDR_VAR 0 6
76907: PUSH
76908: LD_VAR 0 13
76912: PUSH
76913: FOR_IN
76914: IFFALSE 76972
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
76916: LD_VAR 0 1
76920: PPUSH
76921: LD_STRING M
76923: PUSH
76924: LD_VAR 0 6
76928: PUSH
76929: LD_INT 1
76931: ARRAY
76932: PUSH
76933: LD_VAR 0 6
76937: PUSH
76938: LD_INT 2
76940: ARRAY
76941: PUSH
76942: LD_INT 0
76944: PUSH
76945: LD_INT 0
76947: PUSH
76948: LD_INT 0
76950: PUSH
76951: LD_INT 0
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: LIST
76958: LIST
76959: LIST
76960: LIST
76961: LIST
76962: PUSH
76963: EMPTY
76964: LIST
76965: PPUSH
76966: CALL_OW 447
76970: GO 76913
76972: POP
76973: POP
// end ;
76974: LD_VAR 0 5
76978: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
76979: LD_INT 0
76981: PPUSH
76982: PPUSH
76983: PPUSH
76984: PPUSH
76985: PPUSH
76986: PPUSH
76987: PPUSH
76988: PPUSH
76989: PPUSH
76990: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
76991: LD_VAR 0 1
76995: PPUSH
76996: CALL_OW 302
77000: NOT
77001: PUSH
77002: LD_VAR 0 2
77006: PPUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 488
77016: NOT
77017: OR
77018: PUSH
77019: LD_VAR 0 4
77023: NOT
77024: OR
77025: IFFALSE 77029
// exit ;
77027: GO 77542
// list := [ ] ;
77029: LD_ADDR_VAR 0 13
77033: PUSH
77034: EMPTY
77035: ST_TO_ADDR
// if x - r < 0 then
77036: LD_VAR 0 2
77040: PUSH
77041: LD_VAR 0 4
77045: MINUS
77046: PUSH
77047: LD_INT 0
77049: LESS
77050: IFFALSE 77062
// min_x := 0 else
77052: LD_ADDR_VAR 0 7
77056: PUSH
77057: LD_INT 0
77059: ST_TO_ADDR
77060: GO 77078
// min_x := x - r ;
77062: LD_ADDR_VAR 0 7
77066: PUSH
77067: LD_VAR 0 2
77071: PUSH
77072: LD_VAR 0 4
77076: MINUS
77077: ST_TO_ADDR
// if y - r < 0 then
77078: LD_VAR 0 3
77082: PUSH
77083: LD_VAR 0 4
77087: MINUS
77088: PUSH
77089: LD_INT 0
77091: LESS
77092: IFFALSE 77104
// min_y := 0 else
77094: LD_ADDR_VAR 0 8
77098: PUSH
77099: LD_INT 0
77101: ST_TO_ADDR
77102: GO 77120
// min_y := y - r ;
77104: LD_ADDR_VAR 0 8
77108: PUSH
77109: LD_VAR 0 3
77113: PUSH
77114: LD_VAR 0 4
77118: MINUS
77119: ST_TO_ADDR
// max_x := x + r ;
77120: LD_ADDR_VAR 0 9
77124: PUSH
77125: LD_VAR 0 2
77129: PUSH
77130: LD_VAR 0 4
77134: PLUS
77135: ST_TO_ADDR
// max_y := y + r ;
77136: LD_ADDR_VAR 0 10
77140: PUSH
77141: LD_VAR 0 3
77145: PUSH
77146: LD_VAR 0 4
77150: PLUS
77151: ST_TO_ADDR
// for _x = min_x to max_x do
77152: LD_ADDR_VAR 0 11
77156: PUSH
77157: DOUBLE
77158: LD_VAR 0 7
77162: DEC
77163: ST_TO_ADDR
77164: LD_VAR 0 9
77168: PUSH
77169: FOR_TO
77170: IFFALSE 77287
// for _y = min_y to max_y do
77172: LD_ADDR_VAR 0 12
77176: PUSH
77177: DOUBLE
77178: LD_VAR 0 8
77182: DEC
77183: ST_TO_ADDR
77184: LD_VAR 0 10
77188: PUSH
77189: FOR_TO
77190: IFFALSE 77283
// begin if not ValidHex ( _x , _y ) then
77192: LD_VAR 0 11
77196: PPUSH
77197: LD_VAR 0 12
77201: PPUSH
77202: CALL_OW 488
77206: NOT
77207: IFFALSE 77211
// continue ;
77209: GO 77189
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
77211: LD_VAR 0 11
77215: PPUSH
77216: LD_VAR 0 12
77220: PPUSH
77221: CALL_OW 351
77225: PUSH
77226: LD_VAR 0 11
77230: PPUSH
77231: LD_VAR 0 12
77235: PPUSH
77236: CALL_OW 554
77240: AND
77241: IFFALSE 77281
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
77243: LD_ADDR_VAR 0 13
77247: PUSH
77248: LD_VAR 0 13
77252: PPUSH
77253: LD_VAR 0 13
77257: PUSH
77258: LD_INT 1
77260: PLUS
77261: PPUSH
77262: LD_VAR 0 11
77266: PUSH
77267: LD_VAR 0 12
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PPUSH
77276: CALL_OW 2
77280: ST_TO_ADDR
// end ;
77281: GO 77189
77283: POP
77284: POP
77285: GO 77169
77287: POP
77288: POP
// if not list then
77289: LD_VAR 0 13
77293: NOT
77294: IFFALSE 77298
// exit ;
77296: GO 77542
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
77298: LD_ADDR_VAR 0 13
77302: PUSH
77303: LD_VAR 0 1
77307: PPUSH
77308: LD_VAR 0 13
77312: PPUSH
77313: LD_INT 1
77315: PPUSH
77316: LD_INT 1
77318: PPUSH
77319: CALL 22449 0 4
77323: ST_TO_ADDR
// ComStop ( flame ) ;
77324: LD_VAR 0 1
77328: PPUSH
77329: CALL_OW 141
// for i in list do
77333: LD_ADDR_VAR 0 6
77337: PUSH
77338: LD_VAR 0 13
77342: PUSH
77343: FOR_IN
77344: IFFALSE 77375
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
77346: LD_VAR 0 1
77350: PPUSH
77351: LD_VAR 0 6
77355: PUSH
77356: LD_INT 1
77358: ARRAY
77359: PPUSH
77360: LD_VAR 0 6
77364: PUSH
77365: LD_INT 2
77367: ARRAY
77368: PPUSH
77369: CALL_OW 176
77373: GO 77343
77375: POP
77376: POP
// repeat wait ( 0 0$1 ) ;
77377: LD_INT 35
77379: PPUSH
77380: CALL_OW 67
// task := GetTaskList ( flame ) ;
77384: LD_ADDR_VAR 0 14
77388: PUSH
77389: LD_VAR 0 1
77393: PPUSH
77394: CALL_OW 437
77398: ST_TO_ADDR
// if not task then
77399: LD_VAR 0 14
77403: NOT
77404: IFFALSE 77408
// exit ;
77406: GO 77542
// if task [ 1 ] [ 1 ] <> | then
77408: LD_VAR 0 14
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PUSH
77417: LD_INT 1
77419: ARRAY
77420: PUSH
77421: LD_STRING |
77423: NONEQUAL
77424: IFFALSE 77428
// exit ;
77426: GO 77542
// _x := task [ 1 ] [ 2 ] ;
77428: LD_ADDR_VAR 0 11
77432: PUSH
77433: LD_VAR 0 14
77437: PUSH
77438: LD_INT 1
77440: ARRAY
77441: PUSH
77442: LD_INT 2
77444: ARRAY
77445: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
77446: LD_ADDR_VAR 0 12
77450: PUSH
77451: LD_VAR 0 14
77455: PUSH
77456: LD_INT 1
77458: ARRAY
77459: PUSH
77460: LD_INT 3
77462: ARRAY
77463: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
77464: LD_VAR 0 11
77468: PPUSH
77469: LD_VAR 0 12
77473: PPUSH
77474: CALL_OW 351
77478: NOT
77479: PUSH
77480: LD_VAR 0 11
77484: PPUSH
77485: LD_VAR 0 12
77489: PPUSH
77490: CALL_OW 554
77494: NOT
77495: OR
77496: IFFALSE 77530
// begin task := Delete ( task , 1 ) ;
77498: LD_ADDR_VAR 0 14
77502: PUSH
77503: LD_VAR 0 14
77507: PPUSH
77508: LD_INT 1
77510: PPUSH
77511: CALL_OW 3
77515: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
77516: LD_VAR 0 1
77520: PPUSH
77521: LD_VAR 0 14
77525: PPUSH
77526: CALL_OW 446
// end ; until not HasTask ( flame ) ;
77530: LD_VAR 0 1
77534: PPUSH
77535: CALL_OW 314
77539: NOT
77540: IFFALSE 77377
// end ;
77542: LD_VAR 0 5
77546: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
77547: LD_EXP 112
77551: NOT
77552: IFFALSE 77602
77554: GO 77556
77556: DISABLE
// begin initHack := true ;
77557: LD_ADDR_EXP 112
77561: PUSH
77562: LD_INT 1
77564: ST_TO_ADDR
// hackTanks := [ ] ;
77565: LD_ADDR_EXP 113
77569: PUSH
77570: EMPTY
77571: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
77572: LD_ADDR_EXP 114
77576: PUSH
77577: EMPTY
77578: ST_TO_ADDR
// hackLimit := 3 ;
77579: LD_ADDR_EXP 115
77583: PUSH
77584: LD_INT 3
77586: ST_TO_ADDR
// hackDist := 12 ;
77587: LD_ADDR_EXP 116
77591: PUSH
77592: LD_INT 12
77594: ST_TO_ADDR
// hackCounter := [ ] ;
77595: LD_ADDR_EXP 117
77599: PUSH
77600: EMPTY
77601: ST_TO_ADDR
// end ;
77602: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
77603: LD_EXP 112
77607: PUSH
77608: LD_INT 34
77610: PUSH
77611: LD_INT 99
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PPUSH
77618: CALL_OW 69
77622: AND
77623: IFFALSE 77876
77625: GO 77627
77627: DISABLE
77628: LD_INT 0
77630: PPUSH
77631: PPUSH
// begin enable ;
77632: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
77633: LD_ADDR_VAR 0 1
77637: PUSH
77638: LD_INT 34
77640: PUSH
77641: LD_INT 99
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PPUSH
77648: CALL_OW 69
77652: PUSH
77653: FOR_IN
77654: IFFALSE 77874
// begin if not i in hackTanks then
77656: LD_VAR 0 1
77660: PUSH
77661: LD_EXP 113
77665: IN
77666: NOT
77667: IFFALSE 77750
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
77669: LD_ADDR_EXP 113
77673: PUSH
77674: LD_EXP 113
77678: PPUSH
77679: LD_EXP 113
77683: PUSH
77684: LD_INT 1
77686: PLUS
77687: PPUSH
77688: LD_VAR 0 1
77692: PPUSH
77693: CALL_OW 1
77697: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
77698: LD_ADDR_EXP 114
77702: PUSH
77703: LD_EXP 114
77707: PPUSH
77708: LD_EXP 114
77712: PUSH
77713: LD_INT 1
77715: PLUS
77716: PPUSH
77717: EMPTY
77718: PPUSH
77719: CALL_OW 1
77723: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
77724: LD_ADDR_EXP 117
77728: PUSH
77729: LD_EXP 117
77733: PPUSH
77734: LD_EXP 117
77738: PUSH
77739: LD_INT 1
77741: PLUS
77742: PPUSH
77743: EMPTY
77744: PPUSH
77745: CALL_OW 1
77749: ST_TO_ADDR
// end ; if not IsOk ( i ) then
77750: LD_VAR 0 1
77754: PPUSH
77755: CALL_OW 302
77759: NOT
77760: IFFALSE 77773
// begin HackUnlinkAll ( i ) ;
77762: LD_VAR 0 1
77766: PPUSH
77767: CALL 77879 0 1
// continue ;
77771: GO 77653
// end ; HackCheckCapturedStatus ( i ) ;
77773: LD_VAR 0 1
77777: PPUSH
77778: CALL 78322 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
77782: LD_ADDR_VAR 0 2
77786: PUSH
77787: LD_INT 81
77789: PUSH
77790: LD_VAR 0 1
77794: PPUSH
77795: CALL_OW 255
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 33
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 91
77816: PUSH
77817: LD_VAR 0 1
77821: PUSH
77822: LD_EXP 116
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: LIST
77831: PUSH
77832: LD_INT 50
77834: PUSH
77835: EMPTY
77836: LIST
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: PPUSH
77844: CALL_OW 69
77848: ST_TO_ADDR
// if not tmp then
77849: LD_VAR 0 2
77853: NOT
77854: IFFALSE 77858
// continue ;
77856: GO 77653
// HackLink ( i , tmp ) ;
77858: LD_VAR 0 1
77862: PPUSH
77863: LD_VAR 0 2
77867: PPUSH
77868: CALL 78015 0 2
// end ;
77872: GO 77653
77874: POP
77875: POP
// end ;
77876: PPOPN 2
77878: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
77879: LD_INT 0
77881: PPUSH
77882: PPUSH
77883: PPUSH
// if not hack in hackTanks then
77884: LD_VAR 0 1
77888: PUSH
77889: LD_EXP 113
77893: IN
77894: NOT
77895: IFFALSE 77899
// exit ;
77897: GO 78010
// index := GetElementIndex ( hackTanks , hack ) ;
77899: LD_ADDR_VAR 0 4
77903: PUSH
77904: LD_EXP 113
77908: PPUSH
77909: LD_VAR 0 1
77913: PPUSH
77914: CALL 21746 0 2
77918: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
77919: LD_EXP 114
77923: PUSH
77924: LD_VAR 0 4
77928: ARRAY
77929: IFFALSE 78010
// begin for i in hackTanksCaptured [ index ] do
77931: LD_ADDR_VAR 0 3
77935: PUSH
77936: LD_EXP 114
77940: PUSH
77941: LD_VAR 0 4
77945: ARRAY
77946: PUSH
77947: FOR_IN
77948: IFFALSE 77974
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
77950: LD_VAR 0 3
77954: PUSH
77955: LD_INT 1
77957: ARRAY
77958: PPUSH
77959: LD_VAR 0 3
77963: PUSH
77964: LD_INT 2
77966: ARRAY
77967: PPUSH
77968: CALL_OW 235
77972: GO 77947
77974: POP
77975: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
77976: LD_ADDR_EXP 114
77980: PUSH
77981: LD_EXP 114
77985: PPUSH
77986: LD_VAR 0 4
77990: PPUSH
77991: EMPTY
77992: PPUSH
77993: CALL_OW 1
77997: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
77998: LD_VAR 0 1
78002: PPUSH
78003: LD_INT 0
78005: PPUSH
78006: CALL_OW 505
// end ; end ;
78010: LD_VAR 0 2
78014: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
78015: LD_INT 0
78017: PPUSH
78018: PPUSH
78019: PPUSH
// if not hack in hackTanks or not vehicles then
78020: LD_VAR 0 1
78024: PUSH
78025: LD_EXP 113
78029: IN
78030: NOT
78031: PUSH
78032: LD_VAR 0 2
78036: NOT
78037: OR
78038: IFFALSE 78042
// exit ;
78040: GO 78317
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
78042: LD_ADDR_VAR 0 2
78046: PUSH
78047: LD_VAR 0 1
78051: PPUSH
78052: LD_VAR 0 2
78056: PPUSH
78057: LD_INT 1
78059: PPUSH
78060: LD_INT 1
78062: PPUSH
78063: CALL 22396 0 4
78067: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
78068: LD_ADDR_VAR 0 5
78072: PUSH
78073: LD_EXP 113
78077: PPUSH
78078: LD_VAR 0 1
78082: PPUSH
78083: CALL 21746 0 2
78087: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
78088: LD_EXP 114
78092: PUSH
78093: LD_VAR 0 5
78097: ARRAY
78098: PUSH
78099: LD_EXP 115
78103: LESS
78104: IFFALSE 78293
// begin for i := 1 to vehicles do
78106: LD_ADDR_VAR 0 4
78110: PUSH
78111: DOUBLE
78112: LD_INT 1
78114: DEC
78115: ST_TO_ADDR
78116: LD_VAR 0 2
78120: PUSH
78121: FOR_TO
78122: IFFALSE 78291
// begin if hackTanksCaptured [ index ] = hackLimit then
78124: LD_EXP 114
78128: PUSH
78129: LD_VAR 0 5
78133: ARRAY
78134: PUSH
78135: LD_EXP 115
78139: EQUAL
78140: IFFALSE 78144
// break ;
78142: GO 78291
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
78144: LD_ADDR_EXP 117
78148: PUSH
78149: LD_EXP 117
78153: PPUSH
78154: LD_VAR 0 5
78158: PPUSH
78159: LD_EXP 117
78163: PUSH
78164: LD_VAR 0 5
78168: ARRAY
78169: PUSH
78170: LD_INT 1
78172: PLUS
78173: PPUSH
78174: CALL_OW 1
78178: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
78179: LD_ADDR_EXP 114
78183: PUSH
78184: LD_EXP 114
78188: PPUSH
78189: LD_VAR 0 5
78193: PUSH
78194: LD_EXP 114
78198: PUSH
78199: LD_VAR 0 5
78203: ARRAY
78204: PUSH
78205: LD_INT 1
78207: PLUS
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PPUSH
78213: LD_VAR 0 2
78217: PUSH
78218: LD_VAR 0 4
78222: ARRAY
78223: PUSH
78224: LD_VAR 0 2
78228: PUSH
78229: LD_VAR 0 4
78233: ARRAY
78234: PPUSH
78235: CALL_OW 255
78239: PUSH
78240: EMPTY
78241: LIST
78242: LIST
78243: PPUSH
78244: CALL 21961 0 3
78248: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
78249: LD_VAR 0 2
78253: PUSH
78254: LD_VAR 0 4
78258: ARRAY
78259: PPUSH
78260: LD_VAR 0 1
78264: PPUSH
78265: CALL_OW 255
78269: PPUSH
78270: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
78274: LD_VAR 0 2
78278: PUSH
78279: LD_VAR 0 4
78283: ARRAY
78284: PPUSH
78285: CALL_OW 141
// end ;
78289: GO 78121
78291: POP
78292: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78293: LD_VAR 0 1
78297: PPUSH
78298: LD_EXP 114
78302: PUSH
78303: LD_VAR 0 5
78307: ARRAY
78308: PUSH
78309: LD_INT 0
78311: PLUS
78312: PPUSH
78313: CALL_OW 505
// end ;
78317: LD_VAR 0 3
78321: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
78322: LD_INT 0
78324: PPUSH
78325: PPUSH
78326: PPUSH
78327: PPUSH
// if not hack in hackTanks then
78328: LD_VAR 0 1
78332: PUSH
78333: LD_EXP 113
78337: IN
78338: NOT
78339: IFFALSE 78343
// exit ;
78341: GO 78583
// index := GetElementIndex ( hackTanks , hack ) ;
78343: LD_ADDR_VAR 0 4
78347: PUSH
78348: LD_EXP 113
78352: PPUSH
78353: LD_VAR 0 1
78357: PPUSH
78358: CALL 21746 0 2
78362: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
78363: LD_ADDR_VAR 0 3
78367: PUSH
78368: DOUBLE
78369: LD_EXP 114
78373: PUSH
78374: LD_VAR 0 4
78378: ARRAY
78379: INC
78380: ST_TO_ADDR
78381: LD_INT 1
78383: PUSH
78384: FOR_DOWNTO
78385: IFFALSE 78557
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
78387: LD_ADDR_VAR 0 5
78391: PUSH
78392: LD_EXP 114
78396: PUSH
78397: LD_VAR 0 4
78401: ARRAY
78402: PUSH
78403: LD_VAR 0 3
78407: ARRAY
78408: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
78409: LD_VAR 0 5
78413: PUSH
78414: LD_INT 1
78416: ARRAY
78417: PPUSH
78418: CALL_OW 302
78422: NOT
78423: PUSH
78424: LD_VAR 0 5
78428: PUSH
78429: LD_INT 1
78431: ARRAY
78432: PPUSH
78433: CALL_OW 255
78437: PUSH
78438: LD_VAR 0 1
78442: PPUSH
78443: CALL_OW 255
78447: NONEQUAL
78448: OR
78449: IFFALSE 78555
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
78451: LD_VAR 0 5
78455: PUSH
78456: LD_INT 1
78458: ARRAY
78459: PPUSH
78460: CALL_OW 305
78464: PUSH
78465: LD_VAR 0 5
78469: PUSH
78470: LD_INT 1
78472: ARRAY
78473: PPUSH
78474: CALL_OW 255
78478: PUSH
78479: LD_VAR 0 1
78483: PPUSH
78484: CALL_OW 255
78488: EQUAL
78489: AND
78490: IFFALSE 78514
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
78492: LD_VAR 0 5
78496: PUSH
78497: LD_INT 1
78499: ARRAY
78500: PPUSH
78501: LD_VAR 0 5
78505: PUSH
78506: LD_INT 2
78508: ARRAY
78509: PPUSH
78510: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
78514: LD_ADDR_EXP 114
78518: PUSH
78519: LD_EXP 114
78523: PPUSH
78524: LD_VAR 0 4
78528: PPUSH
78529: LD_EXP 114
78533: PUSH
78534: LD_VAR 0 4
78538: ARRAY
78539: PPUSH
78540: LD_VAR 0 3
78544: PPUSH
78545: CALL_OW 3
78549: PPUSH
78550: CALL_OW 1
78554: ST_TO_ADDR
// end ; end ;
78555: GO 78384
78557: POP
78558: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
78559: LD_VAR 0 1
78563: PPUSH
78564: LD_EXP 114
78568: PUSH
78569: LD_VAR 0 4
78573: ARRAY
78574: PUSH
78575: LD_INT 0
78577: PLUS
78578: PPUSH
78579: CALL_OW 505
// end ;
78583: LD_VAR 0 2
78587: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
78588: LD_INT 0
78590: PPUSH
78591: PPUSH
78592: PPUSH
78593: PPUSH
// if not hack in hackTanks then
78594: LD_VAR 0 1
78598: PUSH
78599: LD_EXP 113
78603: IN
78604: NOT
78605: IFFALSE 78609
// exit ;
78607: GO 78694
// index := GetElementIndex ( hackTanks , hack ) ;
78609: LD_ADDR_VAR 0 5
78613: PUSH
78614: LD_EXP 113
78618: PPUSH
78619: LD_VAR 0 1
78623: PPUSH
78624: CALL 21746 0 2
78628: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
78629: LD_ADDR_VAR 0 4
78633: PUSH
78634: DOUBLE
78635: LD_INT 1
78637: DEC
78638: ST_TO_ADDR
78639: LD_EXP 114
78643: PUSH
78644: LD_VAR 0 5
78648: ARRAY
78649: PUSH
78650: FOR_TO
78651: IFFALSE 78692
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
78653: LD_EXP 114
78657: PUSH
78658: LD_VAR 0 5
78662: ARRAY
78663: PUSH
78664: LD_VAR 0 4
78668: ARRAY
78669: PUSH
78670: LD_INT 1
78672: ARRAY
78673: PUSH
78674: LD_VAR 0 2
78678: EQUAL
78679: IFFALSE 78690
// KillUnit ( vehicle ) ;
78681: LD_VAR 0 2
78685: PPUSH
78686: CALL_OW 66
78690: GO 78650
78692: POP
78693: POP
// end ;
78694: LD_VAR 0 3
78698: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
78699: LD_EXP 118
78703: NOT
78704: IFFALSE 78739
78706: GO 78708
78708: DISABLE
// begin initMiner := true ;
78709: LD_ADDR_EXP 118
78713: PUSH
78714: LD_INT 1
78716: ST_TO_ADDR
// minersList := [ ] ;
78717: LD_ADDR_EXP 119
78721: PUSH
78722: EMPTY
78723: ST_TO_ADDR
// minerMinesList := [ ] ;
78724: LD_ADDR_EXP 120
78728: PUSH
78729: EMPTY
78730: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
78731: LD_ADDR_EXP 121
78735: PUSH
78736: LD_INT 5
78738: ST_TO_ADDR
// end ;
78739: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
78740: LD_EXP 118
78744: PUSH
78745: LD_INT 34
78747: PUSH
78748: LD_INT 81
78750: PUSH
78751: EMPTY
78752: LIST
78753: LIST
78754: PPUSH
78755: CALL_OW 69
78759: AND
78760: IFFALSE 79221
78762: GO 78764
78764: DISABLE
78765: LD_INT 0
78767: PPUSH
78768: PPUSH
78769: PPUSH
78770: PPUSH
// begin enable ;
78771: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
78772: LD_ADDR_VAR 0 1
78776: PUSH
78777: LD_INT 34
78779: PUSH
78780: LD_INT 81
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PPUSH
78787: CALL_OW 69
78791: PUSH
78792: FOR_IN
78793: IFFALSE 78865
// begin if not i in minersList then
78795: LD_VAR 0 1
78799: PUSH
78800: LD_EXP 119
78804: IN
78805: NOT
78806: IFFALSE 78863
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
78808: LD_ADDR_EXP 119
78812: PUSH
78813: LD_EXP 119
78817: PPUSH
78818: LD_EXP 119
78822: PUSH
78823: LD_INT 1
78825: PLUS
78826: PPUSH
78827: LD_VAR 0 1
78831: PPUSH
78832: CALL_OW 1
78836: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
78837: LD_ADDR_EXP 120
78841: PUSH
78842: LD_EXP 120
78846: PPUSH
78847: LD_EXP 120
78851: PUSH
78852: LD_INT 1
78854: PLUS
78855: PPUSH
78856: EMPTY
78857: PPUSH
78858: CALL_OW 1
78862: ST_TO_ADDR
// end end ;
78863: GO 78792
78865: POP
78866: POP
// for i := minerMinesList downto 1 do
78867: LD_ADDR_VAR 0 1
78871: PUSH
78872: DOUBLE
78873: LD_EXP 120
78877: INC
78878: ST_TO_ADDR
78879: LD_INT 1
78881: PUSH
78882: FOR_DOWNTO
78883: IFFALSE 79219
// begin if IsLive ( minersList [ i ] ) then
78885: LD_EXP 119
78889: PUSH
78890: LD_VAR 0 1
78894: ARRAY
78895: PPUSH
78896: CALL_OW 300
78900: IFFALSE 78928
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
78902: LD_EXP 119
78906: PUSH
78907: LD_VAR 0 1
78911: ARRAY
78912: PPUSH
78913: LD_EXP 120
78917: PUSH
78918: LD_VAR 0 1
78922: ARRAY
78923: PPUSH
78924: CALL_OW 505
// if not minerMinesList [ i ] then
78928: LD_EXP 120
78932: PUSH
78933: LD_VAR 0 1
78937: ARRAY
78938: NOT
78939: IFFALSE 78943
// continue ;
78941: GO 78882
// for j := minerMinesList [ i ] downto 1 do
78943: LD_ADDR_VAR 0 2
78947: PUSH
78948: DOUBLE
78949: LD_EXP 120
78953: PUSH
78954: LD_VAR 0 1
78958: ARRAY
78959: INC
78960: ST_TO_ADDR
78961: LD_INT 1
78963: PUSH
78964: FOR_DOWNTO
78965: IFFALSE 79215
// begin side := GetSide ( minersList [ i ] ) ;
78967: LD_ADDR_VAR 0 3
78971: PUSH
78972: LD_EXP 119
78976: PUSH
78977: LD_VAR 0 1
78981: ARRAY
78982: PPUSH
78983: CALL_OW 255
78987: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
78988: LD_ADDR_VAR 0 4
78992: PUSH
78993: LD_EXP 120
78997: PUSH
78998: LD_VAR 0 1
79002: ARRAY
79003: PUSH
79004: LD_VAR 0 2
79008: ARRAY
79009: PUSH
79010: LD_INT 1
79012: ARRAY
79013: PPUSH
79014: LD_EXP 120
79018: PUSH
79019: LD_VAR 0 1
79023: ARRAY
79024: PUSH
79025: LD_VAR 0 2
79029: ARRAY
79030: PUSH
79031: LD_INT 2
79033: ARRAY
79034: PPUSH
79035: CALL_OW 428
79039: ST_TO_ADDR
// if not tmp then
79040: LD_VAR 0 4
79044: NOT
79045: IFFALSE 79049
// continue ;
79047: GO 78964
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
79049: LD_VAR 0 4
79053: PUSH
79054: LD_INT 81
79056: PUSH
79057: LD_VAR 0 3
79061: PUSH
79062: EMPTY
79063: LIST
79064: LIST
79065: PPUSH
79066: CALL_OW 69
79070: IN
79071: PUSH
79072: LD_EXP 120
79076: PUSH
79077: LD_VAR 0 1
79081: ARRAY
79082: PUSH
79083: LD_VAR 0 2
79087: ARRAY
79088: PUSH
79089: LD_INT 1
79091: ARRAY
79092: PPUSH
79093: LD_EXP 120
79097: PUSH
79098: LD_VAR 0 1
79102: ARRAY
79103: PUSH
79104: LD_VAR 0 2
79108: ARRAY
79109: PUSH
79110: LD_INT 2
79112: ARRAY
79113: PPUSH
79114: CALL_OW 458
79118: AND
79119: IFFALSE 79213
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
79121: LD_EXP 120
79125: PUSH
79126: LD_VAR 0 1
79130: ARRAY
79131: PUSH
79132: LD_VAR 0 2
79136: ARRAY
79137: PUSH
79138: LD_INT 1
79140: ARRAY
79141: PPUSH
79142: LD_EXP 120
79146: PUSH
79147: LD_VAR 0 1
79151: ARRAY
79152: PUSH
79153: LD_VAR 0 2
79157: ARRAY
79158: PUSH
79159: LD_INT 2
79161: ARRAY
79162: PPUSH
79163: LD_VAR 0 3
79167: PPUSH
79168: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
79172: LD_ADDR_EXP 120
79176: PUSH
79177: LD_EXP 120
79181: PPUSH
79182: LD_VAR 0 1
79186: PPUSH
79187: LD_EXP 120
79191: PUSH
79192: LD_VAR 0 1
79196: ARRAY
79197: PPUSH
79198: LD_VAR 0 2
79202: PPUSH
79203: CALL_OW 3
79207: PPUSH
79208: CALL_OW 1
79212: ST_TO_ADDR
// end ; end ;
79213: GO 78964
79215: POP
79216: POP
// end ;
79217: GO 78882
79219: POP
79220: POP
// end ;
79221: PPOPN 4
79223: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
79224: LD_INT 0
79226: PPUSH
79227: PPUSH
// result := false ;
79228: LD_ADDR_VAR 0 4
79232: PUSH
79233: LD_INT 0
79235: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
79236: LD_VAR 0 1
79240: PPUSH
79241: CALL_OW 264
79245: PUSH
79246: LD_INT 81
79248: EQUAL
79249: NOT
79250: IFFALSE 79254
// exit ;
79252: GO 79494
// index := GetElementIndex ( minersList , unit ) ;
79254: LD_ADDR_VAR 0 5
79258: PUSH
79259: LD_EXP 119
79263: PPUSH
79264: LD_VAR 0 1
79268: PPUSH
79269: CALL 21746 0 2
79273: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
79274: LD_EXP 120
79278: PUSH
79279: LD_VAR 0 5
79283: ARRAY
79284: PUSH
79285: LD_EXP 121
79289: GREATEREQUAL
79290: IFFALSE 79294
// exit ;
79292: GO 79494
// ComMoveXY ( unit , x , y ) ;
79294: LD_VAR 0 1
79298: PPUSH
79299: LD_VAR 0 2
79303: PPUSH
79304: LD_VAR 0 3
79308: PPUSH
79309: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
79313: LD_INT 35
79315: PPUSH
79316: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
79320: LD_VAR 0 1
79324: PPUSH
79325: LD_VAR 0 2
79329: PPUSH
79330: LD_VAR 0 3
79334: PPUSH
79335: CALL 53487 0 3
79339: NOT
79340: PUSH
79341: LD_VAR 0 1
79345: PPUSH
79346: CALL_OW 314
79350: AND
79351: IFFALSE 79355
// exit ;
79353: GO 79494
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
79355: LD_VAR 0 2
79359: PPUSH
79360: LD_VAR 0 3
79364: PPUSH
79365: CALL_OW 428
79369: PUSH
79370: LD_VAR 0 1
79374: EQUAL
79375: PUSH
79376: LD_VAR 0 1
79380: PPUSH
79381: CALL_OW 314
79385: NOT
79386: AND
79387: IFFALSE 79313
// PlaySoundXY ( x , y , PlantMine ) ;
79389: LD_VAR 0 2
79393: PPUSH
79394: LD_VAR 0 3
79398: PPUSH
79399: LD_STRING PlantMine
79401: PPUSH
79402: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
79406: LD_VAR 0 2
79410: PPUSH
79411: LD_VAR 0 3
79415: PPUSH
79416: LD_VAR 0 1
79420: PPUSH
79421: CALL_OW 255
79425: PPUSH
79426: LD_INT 0
79428: PPUSH
79429: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
79433: LD_ADDR_EXP 120
79437: PUSH
79438: LD_EXP 120
79442: PPUSH
79443: LD_VAR 0 5
79447: PUSH
79448: LD_EXP 120
79452: PUSH
79453: LD_VAR 0 5
79457: ARRAY
79458: PUSH
79459: LD_INT 1
79461: PLUS
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PPUSH
79467: LD_VAR 0 2
79471: PUSH
79472: LD_VAR 0 3
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PPUSH
79481: CALL 21961 0 3
79485: ST_TO_ADDR
// result := true ;
79486: LD_ADDR_VAR 0 4
79490: PUSH
79491: LD_INT 1
79493: ST_TO_ADDR
// end ;
79494: LD_VAR 0 4
79498: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
79499: LD_INT 0
79501: PPUSH
79502: PPUSH
79503: PPUSH
// if not unit in minersList then
79504: LD_VAR 0 1
79508: PUSH
79509: LD_EXP 119
79513: IN
79514: NOT
79515: IFFALSE 79519
// exit ;
79517: GO 79911
// index := GetElementIndex ( minersList , unit ) ;
79519: LD_ADDR_VAR 0 6
79523: PUSH
79524: LD_EXP 119
79528: PPUSH
79529: LD_VAR 0 1
79533: PPUSH
79534: CALL 21746 0 2
79538: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
79539: LD_ADDR_VAR 0 5
79543: PUSH
79544: DOUBLE
79545: LD_EXP 120
79549: PUSH
79550: LD_VAR 0 6
79554: ARRAY
79555: INC
79556: ST_TO_ADDR
79557: LD_INT 1
79559: PUSH
79560: FOR_DOWNTO
79561: IFFALSE 79722
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
79563: LD_EXP 120
79567: PUSH
79568: LD_VAR 0 6
79572: ARRAY
79573: PUSH
79574: LD_VAR 0 5
79578: ARRAY
79579: PUSH
79580: LD_INT 1
79582: ARRAY
79583: PUSH
79584: LD_VAR 0 2
79588: EQUAL
79589: PUSH
79590: LD_EXP 120
79594: PUSH
79595: LD_VAR 0 6
79599: ARRAY
79600: PUSH
79601: LD_VAR 0 5
79605: ARRAY
79606: PUSH
79607: LD_INT 2
79609: ARRAY
79610: PUSH
79611: LD_VAR 0 3
79615: EQUAL
79616: AND
79617: IFFALSE 79720
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79619: LD_EXP 120
79623: PUSH
79624: LD_VAR 0 6
79628: ARRAY
79629: PUSH
79630: LD_VAR 0 5
79634: ARRAY
79635: PUSH
79636: LD_INT 1
79638: ARRAY
79639: PPUSH
79640: LD_EXP 120
79644: PUSH
79645: LD_VAR 0 6
79649: ARRAY
79650: PUSH
79651: LD_VAR 0 5
79655: ARRAY
79656: PUSH
79657: LD_INT 2
79659: ARRAY
79660: PPUSH
79661: LD_VAR 0 1
79665: PPUSH
79666: CALL_OW 255
79670: PPUSH
79671: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79675: LD_ADDR_EXP 120
79679: PUSH
79680: LD_EXP 120
79684: PPUSH
79685: LD_VAR 0 6
79689: PPUSH
79690: LD_EXP 120
79694: PUSH
79695: LD_VAR 0 6
79699: ARRAY
79700: PPUSH
79701: LD_VAR 0 5
79705: PPUSH
79706: CALL_OW 3
79710: PPUSH
79711: CALL_OW 1
79715: ST_TO_ADDR
// exit ;
79716: POP
79717: POP
79718: GO 79911
// end ; end ;
79720: GO 79560
79722: POP
79723: POP
// for i := minerMinesList [ index ] downto 1 do
79724: LD_ADDR_VAR 0 5
79728: PUSH
79729: DOUBLE
79730: LD_EXP 120
79734: PUSH
79735: LD_VAR 0 6
79739: ARRAY
79740: INC
79741: ST_TO_ADDR
79742: LD_INT 1
79744: PUSH
79745: FOR_DOWNTO
79746: IFFALSE 79909
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
79748: LD_EXP 120
79752: PUSH
79753: LD_VAR 0 6
79757: ARRAY
79758: PUSH
79759: LD_VAR 0 5
79763: ARRAY
79764: PUSH
79765: LD_INT 1
79767: ARRAY
79768: PPUSH
79769: LD_EXP 120
79773: PUSH
79774: LD_VAR 0 6
79778: ARRAY
79779: PUSH
79780: LD_VAR 0 5
79784: ARRAY
79785: PUSH
79786: LD_INT 2
79788: ARRAY
79789: PPUSH
79790: LD_VAR 0 2
79794: PPUSH
79795: LD_VAR 0 3
79799: PPUSH
79800: CALL_OW 298
79804: PUSH
79805: LD_INT 6
79807: LESS
79808: IFFALSE 79907
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
79810: LD_EXP 120
79814: PUSH
79815: LD_VAR 0 6
79819: ARRAY
79820: PUSH
79821: LD_VAR 0 5
79825: ARRAY
79826: PUSH
79827: LD_INT 1
79829: ARRAY
79830: PPUSH
79831: LD_EXP 120
79835: PUSH
79836: LD_VAR 0 6
79840: ARRAY
79841: PUSH
79842: LD_VAR 0 5
79846: ARRAY
79847: PUSH
79848: LD_INT 2
79850: ARRAY
79851: PPUSH
79852: LD_VAR 0 1
79856: PPUSH
79857: CALL_OW 255
79861: PPUSH
79862: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
79866: LD_ADDR_EXP 120
79870: PUSH
79871: LD_EXP 120
79875: PPUSH
79876: LD_VAR 0 6
79880: PPUSH
79881: LD_EXP 120
79885: PUSH
79886: LD_VAR 0 6
79890: ARRAY
79891: PPUSH
79892: LD_VAR 0 5
79896: PPUSH
79897: CALL_OW 3
79901: PPUSH
79902: CALL_OW 1
79906: ST_TO_ADDR
// end ; end ;
79907: GO 79745
79909: POP
79910: POP
// end ;
79911: LD_VAR 0 4
79915: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
79916: LD_INT 0
79918: PPUSH
79919: PPUSH
79920: PPUSH
79921: PPUSH
79922: PPUSH
79923: PPUSH
79924: PPUSH
79925: PPUSH
79926: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
79927: LD_VAR 0 1
79931: PPUSH
79932: CALL_OW 264
79936: PUSH
79937: LD_INT 81
79939: EQUAL
79940: NOT
79941: PUSH
79942: LD_VAR 0 1
79946: PUSH
79947: LD_EXP 119
79951: IN
79952: NOT
79953: OR
79954: IFFALSE 79958
// exit ;
79956: GO 80280
// index := GetElementIndex ( minersList , unit ) ;
79958: LD_ADDR_VAR 0 6
79962: PUSH
79963: LD_EXP 119
79967: PPUSH
79968: LD_VAR 0 1
79972: PPUSH
79973: CALL 21746 0 2
79977: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
79978: LD_ADDR_VAR 0 8
79982: PUSH
79983: LD_EXP 121
79987: PUSH
79988: LD_EXP 120
79992: PUSH
79993: LD_VAR 0 6
79997: ARRAY
79998: MINUS
79999: ST_TO_ADDR
// if not minesFreeAmount then
80000: LD_VAR 0 8
80004: NOT
80005: IFFALSE 80009
// exit ;
80007: GO 80280
// tmp := [ ] ;
80009: LD_ADDR_VAR 0 7
80013: PUSH
80014: EMPTY
80015: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
80016: LD_ADDR_VAR 0 5
80020: PUSH
80021: DOUBLE
80022: LD_INT 1
80024: DEC
80025: ST_TO_ADDR
80026: LD_VAR 0 8
80030: PUSH
80031: FOR_TO
80032: IFFALSE 80227
// begin _d := rand ( 0 , 5 ) ;
80034: LD_ADDR_VAR 0 11
80038: PUSH
80039: LD_INT 0
80041: PPUSH
80042: LD_INT 5
80044: PPUSH
80045: CALL_OW 12
80049: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
80050: LD_ADDR_VAR 0 12
80054: PUSH
80055: LD_INT 2
80057: PPUSH
80058: LD_INT 6
80060: PPUSH
80061: CALL_OW 12
80065: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
80066: LD_ADDR_VAR 0 9
80070: PUSH
80071: LD_VAR 0 2
80075: PPUSH
80076: LD_VAR 0 11
80080: PPUSH
80081: LD_VAR 0 12
80085: PPUSH
80086: CALL_OW 272
80090: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
80091: LD_ADDR_VAR 0 10
80095: PUSH
80096: LD_VAR 0 3
80100: PPUSH
80101: LD_VAR 0 11
80105: PPUSH
80106: LD_VAR 0 12
80110: PPUSH
80111: CALL_OW 273
80115: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
80116: LD_VAR 0 9
80120: PPUSH
80121: LD_VAR 0 10
80125: PPUSH
80126: CALL_OW 488
80130: PUSH
80131: LD_VAR 0 9
80135: PUSH
80136: LD_VAR 0 10
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_VAR 0 7
80149: IN
80150: NOT
80151: AND
80152: PUSH
80153: LD_VAR 0 9
80157: PPUSH
80158: LD_VAR 0 10
80162: PPUSH
80163: CALL_OW 458
80167: NOT
80168: AND
80169: IFFALSE 80211
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
80171: LD_ADDR_VAR 0 7
80175: PUSH
80176: LD_VAR 0 7
80180: PPUSH
80181: LD_VAR 0 7
80185: PUSH
80186: LD_INT 1
80188: PLUS
80189: PPUSH
80190: LD_VAR 0 9
80194: PUSH
80195: LD_VAR 0 10
80199: PUSH
80200: EMPTY
80201: LIST
80202: LIST
80203: PPUSH
80204: CALL_OW 1
80208: ST_TO_ADDR
80209: GO 80225
// i := i - 1 ;
80211: LD_ADDR_VAR 0 5
80215: PUSH
80216: LD_VAR 0 5
80220: PUSH
80221: LD_INT 1
80223: MINUS
80224: ST_TO_ADDR
// end ;
80225: GO 80031
80227: POP
80228: POP
// for i in tmp do
80229: LD_ADDR_VAR 0 5
80233: PUSH
80234: LD_VAR 0 7
80238: PUSH
80239: FOR_IN
80240: IFFALSE 80278
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
80242: LD_VAR 0 1
80246: PPUSH
80247: LD_VAR 0 5
80251: PUSH
80252: LD_INT 1
80254: ARRAY
80255: PPUSH
80256: LD_VAR 0 5
80260: PUSH
80261: LD_INT 2
80263: ARRAY
80264: PPUSH
80265: CALL 79224 0 3
80269: NOT
80270: IFFALSE 80276
// exit ;
80272: POP
80273: POP
80274: GO 80280
80276: GO 80239
80278: POP
80279: POP
// end ;
80280: LD_VAR 0 4
80284: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
80285: LD_INT 0
80287: PPUSH
80288: PPUSH
80289: PPUSH
80290: PPUSH
80291: PPUSH
80292: PPUSH
80293: PPUSH
// if not GetClass ( unit ) = class_sniper then
80294: LD_VAR 0 1
80298: PPUSH
80299: CALL_OW 257
80303: PUSH
80304: LD_INT 5
80306: EQUAL
80307: NOT
80308: IFFALSE 80312
// exit ;
80310: GO 80700
// dist := 8 ;
80312: LD_ADDR_VAR 0 5
80316: PUSH
80317: LD_INT 8
80319: ST_TO_ADDR
// viewRange := 12 ;
80320: LD_ADDR_VAR 0 7
80324: PUSH
80325: LD_INT 12
80327: ST_TO_ADDR
// side := GetSide ( unit ) ;
80328: LD_ADDR_VAR 0 6
80332: PUSH
80333: LD_VAR 0 1
80337: PPUSH
80338: CALL_OW 255
80342: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
80343: LD_INT 61
80345: PPUSH
80346: LD_VAR 0 6
80350: PPUSH
80351: CALL_OW 321
80355: PUSH
80356: LD_INT 2
80358: EQUAL
80359: IFFALSE 80369
// viewRange := 16 ;
80361: LD_ADDR_VAR 0 7
80365: PUSH
80366: LD_INT 16
80368: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
80369: LD_VAR 0 1
80373: PPUSH
80374: LD_VAR 0 2
80378: PPUSH
80379: LD_VAR 0 3
80383: PPUSH
80384: CALL_OW 297
80388: PUSH
80389: LD_VAR 0 5
80393: GREATER
80394: IFFALSE 80473
// begin ComMoveXY ( unit , x , y ) ;
80396: LD_VAR 0 1
80400: PPUSH
80401: LD_VAR 0 2
80405: PPUSH
80406: LD_VAR 0 3
80410: PPUSH
80411: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
80415: LD_INT 35
80417: PPUSH
80418: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
80422: LD_VAR 0 1
80426: PPUSH
80427: LD_VAR 0 2
80431: PPUSH
80432: LD_VAR 0 3
80436: PPUSH
80437: CALL 53487 0 3
80441: NOT
80442: IFFALSE 80446
// exit ;
80444: GO 80700
// until GetDistUnitXY ( unit , x , y ) < dist ;
80446: LD_VAR 0 1
80450: PPUSH
80451: LD_VAR 0 2
80455: PPUSH
80456: LD_VAR 0 3
80460: PPUSH
80461: CALL_OW 297
80465: PUSH
80466: LD_VAR 0 5
80470: LESS
80471: IFFALSE 80415
// end ; ComTurnXY ( unit , x , y ) ;
80473: LD_VAR 0 1
80477: PPUSH
80478: LD_VAR 0 2
80482: PPUSH
80483: LD_VAR 0 3
80487: PPUSH
80488: CALL_OW 118
// wait ( 5 ) ;
80492: LD_INT 5
80494: PPUSH
80495: CALL_OW 67
// _d := GetDir ( unit ) ;
80499: LD_ADDR_VAR 0 10
80503: PUSH
80504: LD_VAR 0 1
80508: PPUSH
80509: CALL_OW 254
80513: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
80514: LD_ADDR_VAR 0 8
80518: PUSH
80519: LD_VAR 0 1
80523: PPUSH
80524: CALL_OW 250
80528: PPUSH
80529: LD_VAR 0 10
80533: PPUSH
80534: LD_VAR 0 5
80538: PPUSH
80539: CALL_OW 272
80543: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
80544: LD_ADDR_VAR 0 9
80548: PUSH
80549: LD_VAR 0 1
80553: PPUSH
80554: CALL_OW 251
80558: PPUSH
80559: LD_VAR 0 10
80563: PPUSH
80564: LD_VAR 0 5
80568: PPUSH
80569: CALL_OW 273
80573: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80574: LD_VAR 0 8
80578: PPUSH
80579: LD_VAR 0 9
80583: PPUSH
80584: CALL_OW 488
80588: NOT
80589: IFFALSE 80593
// exit ;
80591: GO 80700
// ComAnimCustom ( unit , 1 ) ;
80593: LD_VAR 0 1
80597: PPUSH
80598: LD_INT 1
80600: PPUSH
80601: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
80605: LD_VAR 0 8
80609: PPUSH
80610: LD_VAR 0 9
80614: PPUSH
80615: LD_VAR 0 6
80619: PPUSH
80620: LD_VAR 0 7
80624: PPUSH
80625: CALL_OW 330
// repeat wait ( 1 ) ;
80629: LD_INT 1
80631: PPUSH
80632: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
80636: LD_VAR 0 1
80640: PPUSH
80641: CALL_OW 316
80645: PUSH
80646: LD_VAR 0 1
80650: PPUSH
80651: CALL_OW 314
80655: OR
80656: PUSH
80657: LD_VAR 0 1
80661: PPUSH
80662: CALL_OW 302
80666: NOT
80667: OR
80668: PUSH
80669: LD_VAR 0 1
80673: PPUSH
80674: CALL_OW 301
80678: OR
80679: IFFALSE 80629
// RemoveSeeing ( _x , _y , side ) ;
80681: LD_VAR 0 8
80685: PPUSH
80686: LD_VAR 0 9
80690: PPUSH
80691: LD_VAR 0 6
80695: PPUSH
80696: CALL_OW 331
// end ; end_of_file
80700: LD_VAR 0 4
80704: RET
