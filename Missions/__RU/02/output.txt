// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 52 0 0
// RandomizeAll ;
   8: CALL_OW 11
// PrepareNature ( 4 , 3 , 4 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  12: LD_INT 4
  14: PPUSH
  15: LD_INT 3
  17: PPUSH
  18: LD_INT 4
  20: PPUSH
  21: LD_INT 5
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 0
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 20
  35: PPUSH
  36: LD_INT 0
  38: PPUSH
  39: CALL 50290 0 9
// PrepareRussian ;
  43: CALL 382 0 0
// Action ;
  47: CALL 5835 0 0
// end ;
  51: END
// export debug , prevMissionPrefix , currentMissionPrefix ; export beriaVisited , kurinDontWannaTalk , kirovHasTank , blockNorth , cratesSpawnAmount , hasLab , hasWorkshop , hasToBuildTank , hasTank , allianceAttacked , hasAllTanks , vehCounter , vehCaptured , americanTrap , belkovTrapped , belkovDied , westOutpostDiscovered , eastOutpostDiscovered , westOutpostDestroyed , eastOutpostDestroyed , westOutpostWeakPointSpotted , reinforcementsGained , allMapPointsSpotted , mapSpotCounter , belkovSaved , belkovTeamDeadCounter , playerTeamDeadCounter , initiative , belkovBrother ; export eventBelkovAttack ; function Init ; begin
  52: LD_INT 0
  54: PPUSH
// debug := false ;
  55: LD_ADDR_EXP 1
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// prevMissionPrefix := 01_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 01_
  70: ST_TO_ADDR
// currentMissionPrefix := 02_ ;
  71: LD_ADDR_EXP 3
  75: PUSH
  76: LD_STRING 02_
  78: ST_TO_ADDR
// beriaVisited := false ;
  79: LD_ADDR_EXP 4
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// kurinDontWannaTalk := false ;
  87: LD_ADDR_EXP 5
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// kirovHasTank := false ;
  95: LD_ADDR_EXP 6
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// blockNorth := true ;
 103: LD_ADDR_EXP 7
 107: PUSH
 108: LD_INT 1
 110: ST_TO_ADDR
// hasLab := false ;
 111: LD_ADDR_EXP 9
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// hasWorkshop := false ;
 119: LD_ADDR_EXP 10
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// hasToBuildTank := false ;
 127: LD_ADDR_EXP 11
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// hasTank := false ;
 135: LD_ADDR_EXP 12
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawnAmount := 60 ;
 143: LD_ADDR_EXP 8
 147: PUSH
 148: LD_INT 60
 150: ST_TO_ADDR
// allianceAttacked := false ;
 151: LD_ADDR_EXP 13
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// hasAllTanks := false ;
 159: LD_ADDR_EXP 14
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// vehCounter := 0 ;
 167: LD_ADDR_EXP 15
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// vehCaptured := false ;
 175: LD_ADDR_EXP 16
 179: PUSH
 180: LD_INT 0
 182: ST_TO_ADDR
// americanTrap := false ;
 183: LD_ADDR_EXP 17
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// belkovTrapped := false ;
 191: LD_ADDR_EXP 18
 195: PUSH
 196: LD_INT 0
 198: ST_TO_ADDR
// belkovDied := false ;
 199: LD_ADDR_EXP 19
 203: PUSH
 204: LD_INT 0
 206: ST_TO_ADDR
// belkovSaved := false ;
 207: LD_ADDR_EXP 28
 211: PUSH
 212: LD_INT 0
 214: ST_TO_ADDR
// westOutpostDiscovered := false ;
 215: LD_ADDR_EXP 20
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// eastOutpostDiscovered := false ;
 223: LD_ADDR_EXP 21
 227: PUSH
 228: LD_INT 0
 230: ST_TO_ADDR
// westOutpostDestroyed := false ;
 231: LD_ADDR_EXP 22
 235: PUSH
 236: LD_INT 0
 238: ST_TO_ADDR
// eastOutpostDestroyed := false ;
 239: LD_ADDR_EXP 23
 243: PUSH
 244: LD_INT 0
 246: ST_TO_ADDR
// westOutpostWeakPointSpotted := false ;
 247: LD_ADDR_EXP 24
 251: PUSH
 252: LD_INT 0
 254: ST_TO_ADDR
// reinforcementsGained := false ;
 255: LD_ADDR_EXP 25
 259: PUSH
 260: LD_INT 0
 262: ST_TO_ADDR
// allMapPointsSpotted := false ;
 263: LD_ADDR_EXP 26
 267: PUSH
 268: LD_INT 0
 270: ST_TO_ADDR
// mapSpotCounter := 0 ;
 271: LD_ADDR_EXP 27
 275: PUSH
 276: LD_INT 0
 278: ST_TO_ADDR
// belkovTeamDeadCounter := 0 ;
 279: LD_ADDR_EXP 29
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// playerTeamDeadCounter := 0 ;
 287: LD_ADDR_EXP 30
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// initiative := false ;
 295: LD_ADDR_EXP 31
 299: PUSH
 300: LD_INT 0
 302: ST_TO_ADDR
// belkovBrother := false ;
 303: LD_ADDR_EXP 32
 307: PUSH
 308: LD_INT 0
 310: ST_TO_ADDR
// eventBelkovAttack := 1 ;
 311: LD_ADDR_EXP 33
 315: PUSH
 316: LD_INT 1
 318: ST_TO_ADDR
// end ;
 319: LD_VAR 0 1
 323: RET
// every 0 0$1 trigger vehCounter >= 5 do
 324: LD_EXP 15
 328: PUSH
 329: LD_INT 5
 331: GREATEREQUAL
 332: IFFALSE 344
 334: GO 336
 336: DISABLE
// SetAchievement ( ACH_WORKSHOP ) ;
 337: LD_STRING ACH_WORKSHOP
 339: PPUSH
 340: CALL_OW 543
 344: END
// every 0 0$1 trigger vehCaptured do
 345: LD_EXP 16
 349: IFFALSE 361
 351: GO 353
 353: DISABLE
// SetAchievement ( ACH_RETAKE ) ;
 354: LD_STRING ACH_RETAKE
 356: PPUSH
 357: CALL_OW 543
 361: END
// every 0 0$1 trigger IsDead ( am_dep1 ) do
 362: LD_INT 193
 364: PPUSH
 365: CALL_OW 301
 369: IFFALSE 381
 371: GO 373
 373: DISABLE
// SetAchievement ( ACH_DEPOT ) ; end_of_file
 374: LD_STRING ACH_DEPOT
 376: PPUSH
 377: CALL_OW 543
 381: END
// export Burlak , Gnyevko , Belkov , Kirilenkova , Kurin , Kovalyuk , Platonov , Kuklajs , Benko ; export kirovBaseSquad , beriaBaseSquad , belkovTeam ; export function PrepareRussian ; var i , j , tmp , un ; begin
 382: LD_INT 0
 384: PPUSH
 385: PPUSH
 386: PPUSH
 387: PPUSH
 388: PPUSH
// uc_side := 6 ;
 389: LD_ADDR_OWVAR 20
 393: PUSH
 394: LD_INT 6
 396: ST_TO_ADDR
// uc_nation := 3 ;
 397: LD_ADDR_OWVAR 21
 401: PUSH
 402: LD_INT 3
 404: ST_TO_ADDR
// SetBName ( kirov , kirov ) ;
 405: LD_INT 71
 407: PPUSH
 408: LD_STRING kirov
 410: PPUSH
 411: CALL_OW 500
// Kurin := NewCharacter ( Kurin ) ;
 415: LD_ADDR_EXP 38
 419: PUSH
 420: LD_STRING Kurin
 422: PPUSH
 423: CALL_OW 25
 427: ST_TO_ADDR
// PlaceUnitXY ( Kurin , 117 , 108 , false ) ;
 428: LD_EXP 38
 432: PPUSH
 433: LD_INT 117
 435: PPUSH
 436: LD_INT 108
 438: PPUSH
 439: LD_INT 0
 441: PPUSH
 442: CALL_OW 48
// ComLookAtDir ( Kurin , 2 ) ;
 446: LD_EXP 38
 450: PPUSH
 451: LD_INT 2
 453: PPUSH
 454: CALL 56739 0 2
// Kovalyuk := NewCharacter ( Kovalyuk ) ;
 458: LD_ADDR_EXP 39
 462: PUSH
 463: LD_STRING Kovalyuk
 465: PPUSH
 466: CALL_OW 25
 470: ST_TO_ADDR
// PlaceHumanInUnit ( Kovalyuk , kirov ) ;
 471: LD_EXP 39
 475: PPUSH
 476: LD_INT 71
 478: PPUSH
 479: CALL_OW 52
// tmp := [ [ ru2_arm1 , class_soldier , 2 ] , [ ru2_arm2 , class_soldier , 2 ] , [ ru_lab , class_scientistic , 2 ] , [ kirov , class_engineer , 2 ] , [ kirov , class_mechanic , 1 ] ] ;
 483: LD_ADDR_VAR 0 4
 487: PUSH
 488: LD_INT 95
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 209
 504: PUSH
 505: LD_INT 1
 507: PUSH
 508: LD_INT 2
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: LIST
 515: PUSH
 516: LD_INT 83
 518: PUSH
 519: LD_INT 4
 521: PUSH
 522: LD_INT 2
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 71
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 2
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: LIST
 543: PUSH
 544: LD_INT 71
 546: PUSH
 547: LD_INT 3
 549: PUSH
 550: LD_INT 1
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: LIST
 562: LIST
 563: LIST
 564: ST_TO_ADDR
// InitHC_All ( ) ;
 565: CALL_OW 584
// belkovBrother := false ;
 569: LD_ADDR_EXP 32
 573: PUSH
 574: LD_INT 0
 576: ST_TO_ADDR
// if not TestCharacters ( prevMissionPrefix & Belkov ) and not debug then
 577: LD_EXP 2
 581: PUSH
 582: LD_STRING Belkov
 584: STR
 585: PPUSH
 586: CALL_OW 28
 590: NOT
 591: PUSH
 592: LD_EXP 1
 596: NOT
 597: AND
 598: IFFALSE 635
// begin Belkov := NewCharacter ( Belkov2 ) ;
 600: LD_ADDR_EXP 36
 604: PUSH
 605: LD_STRING Belkov2
 607: PPUSH
 608: CALL_OW 25
 612: ST_TO_ADDR
// PlaceHumanInUnit ( Belkov , kirov ) ;
 613: LD_EXP 36
 617: PPUSH
 618: LD_INT 71
 620: PPUSH
 621: CALL_OW 52
// belkovBrother := true ;
 625: LD_ADDR_EXP 32
 629: PUSH
 630: LD_INT 1
 632: ST_TO_ADDR
// end else
 633: GO 689
// begin un := NewCharacter ( Belkov2 ) ;
 635: LD_ADDR_VAR 0 5
 639: PUSH
 640: LD_STRING Belkov2
 642: PPUSH
 643: CALL_OW 25
 647: ST_TO_ADDR
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 648: LD_ADDR_EXP 43
 652: PUSH
 653: LD_EXP 43
 657: PPUSH
 658: LD_EXP 43
 662: PUSH
 663: LD_INT 1
 665: PLUS
 666: PPUSH
 667: LD_VAR 0 5
 671: PPUSH
 672: CALL_OW 1
 676: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru2_arm2 ) ;
 677: LD_VAR 0 5
 681: PPUSH
 682: LD_INT 209
 684: PPUSH
 685: CALL_OW 52
// end ; for i in tmp do
 689: LD_ADDR_VAR 0 2
 693: PUSH
 694: LD_VAR 0 4
 698: PUSH
 699: FOR_IN
 700: IFFALSE 806
// for j := 1 to i [ 3 ] do
 702: LD_ADDR_VAR 0 3
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_VAR 0 2
 716: PUSH
 717: LD_INT 3
 719: ARRAY
 720: PUSH
 721: FOR_TO
 722: IFFALSE 802
// begin PrepareHuman ( false , i [ 2 ] , 2 ) ;
 724: LD_INT 0
 726: PPUSH
 727: LD_VAR 0 2
 731: PUSH
 732: LD_INT 2
 734: ARRAY
 735: PPUSH
 736: LD_INT 2
 738: PPUSH
 739: CALL_OW 380
// un := CreateHuman ;
 743: LD_ADDR_VAR 0 5
 747: PUSH
 748: CALL_OW 44
 752: ST_TO_ADDR
// PlaceHumanInUnit ( un , i [ 1 ] ) ;
 753: LD_VAR 0 5
 757: PPUSH
 758: LD_VAR 0 2
 762: PUSH
 763: LD_INT 1
 765: ARRAY
 766: PPUSH
 767: CALL_OW 52
// kirovBaseSquad := Replace ( kirovBaseSquad , kirovBaseSquad + 1 , un ) ;
 771: LD_ADDR_EXP 43
 775: PUSH
 776: LD_EXP 43
 780: PPUSH
 781: LD_EXP 43
 785: PUSH
 786: LD_INT 1
 788: PLUS
 789: PPUSH
 790: LD_VAR 0 5
 794: PPUSH
 795: CALL_OW 1
 799: ST_TO_ADDR
// end ;
 800: GO 721
 802: POP
 803: POP
 804: GO 699
 806: POP
 807: POP
// SetBName ( beria , beria ) ;
 808: LD_INT 106
 810: PPUSH
 811: LD_STRING beria
 813: PPUSH
 814: CALL_OW 500
// Platonov := NewCharacter ( Platonov ) ;
 818: LD_ADDR_EXP 40
 822: PUSH
 823: LD_STRING Platonov
 825: PPUSH
 826: CALL_OW 25
 830: ST_TO_ADDR
// PlaceUnitXY ( Platonov , 66 , 99 , false ) ;
 831: LD_EXP 40
 835: PPUSH
 836: LD_INT 66
 838: PPUSH
 839: LD_INT 99
 841: PPUSH
 842: LD_INT 0
 844: PPUSH
 845: CALL_OW 48
// ComLookAtDir ( Platonov , 0 ) ;
 849: LD_EXP 40
 853: PPUSH
 854: LD_INT 0
 856: PPUSH
 857: CALL 56739 0 2
// Kuklajs := NewCharacter ( Kuklajs ) ;
 861: LD_ADDR_EXP 41
 865: PUSH
 866: LD_STRING Kuklajs
 868: PPUSH
 869: CALL_OW 25
 873: ST_TO_ADDR
// Benko := NewCharacter ( Benko ) ;
 874: LD_ADDR_EXP 42
 878: PUSH
 879: LD_STRING Benko
 881: PPUSH
 882: CALL_OW 25
 886: ST_TO_ADDR
// PlaceUnitXY ( Kuklajs , 76 , 99 , false ) ;
 887: LD_EXP 41
 891: PPUSH
 892: LD_INT 76
 894: PPUSH
 895: LD_INT 99
 897: PPUSH
 898: LD_INT 0
 900: PPUSH
 901: CALL_OW 48
// PlaceUnitXY ( Benko , 68 , 88 , false ) ;
 905: LD_EXP 42
 909: PPUSH
 910: LD_INT 68
 912: PPUSH
 913: LD_INT 88
 915: PPUSH
 916: LD_INT 0
 918: PPUSH
 919: CALL_OW 48
// ComHold ( [ Kuklajs , Benko ] ) ;
 923: LD_EXP 41
 927: PUSH
 928: LD_EXP 42
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PPUSH
 937: CALL_OW 140
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Kuklajs ) ;
 941: LD_ADDR_EXP 44
 945: PUSH
 946: LD_EXP 44
 950: PPUSH
 951: LD_EXP 44
 955: PUSH
 956: LD_INT 1
 958: PLUS
 959: PPUSH
 960: LD_EXP 41
 964: PPUSH
 965: CALL_OW 1
 969: ST_TO_ADDR
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , Benko ) ;
 970: LD_ADDR_EXP 44
 974: PUSH
 975: LD_EXP 44
 979: PPUSH
 980: LD_EXP 44
 984: PUSH
 985: LD_INT 1
 987: PLUS
 988: PPUSH
 989: LD_EXP 42
 993: PPUSH
 994: CALL_OW 1
 998: ST_TO_ADDR
// tmp := [ [ 63 , 86 , 0 ] , [ 74 , 94 , 1 ] , [ 77 , 103 , 1 ] ] ;
 999: LD_ADDR_VAR 0 4
1003: PUSH
1004: LD_INT 63
1006: PUSH
1007: LD_INT 86
1009: PUSH
1010: LD_INT 0
1012: PUSH
1013: EMPTY
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 74
1020: PUSH
1021: LD_INT 94
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: LIST
1031: PUSH
1032: LD_INT 77
1034: PUSH
1035: LD_INT 103
1037: PUSH
1038: LD_INT 1
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: ST_TO_ADDR
// for i in tmp do
1051: LD_ADDR_VAR 0 2
1055: PUSH
1056: LD_VAR 0 4
1060: PUSH
1061: FOR_IN
1062: IFFALSE 1189
// begin PrepareHuman ( false , class_soldier , [ 3 , 2 , 2 , 1 ] [ Difficulty ] ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: LD_INT 3
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: LD_INT 2
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: LD_OWVAR 67
1092: ARRAY
1093: PPUSH
1094: CALL_OW 380
// un := CreateHuman ;
1098: LD_ADDR_VAR 0 5
1102: PUSH
1103: CALL_OW 44
1107: ST_TO_ADDR
// SetDir ( un , i [ 3 ] ) ;
1108: LD_VAR 0 5
1112: PPUSH
1113: LD_VAR 0 2
1117: PUSH
1118: LD_INT 3
1120: ARRAY
1121: PPUSH
1122: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
1126: LD_VAR 0 5
1130: PPUSH
1131: LD_VAR 0 2
1135: PUSH
1136: LD_INT 1
1138: ARRAY
1139: PPUSH
1140: LD_VAR 0 2
1144: PUSH
1145: LD_INT 2
1147: ARRAY
1148: PPUSH
1149: CALL_OW 428
1153: PPUSH
1154: CALL_OW 52
// beriaBaseSquad := Replace ( beriaBaseSquad , beriaBaseSquad + 1 , un ) ;
1158: LD_ADDR_EXP 44
1162: PUSH
1163: LD_EXP 44
1167: PPUSH
1168: LD_EXP 44
1172: PUSH
1173: LD_INT 1
1175: PLUS
1176: PPUSH
1177: LD_VAR 0 5
1181: PPUSH
1182: CALL_OW 1
1186: ST_TO_ADDR
// end ;
1187: GO 1061
1189: POP
1190: POP
// if not TestCharacters ( prevMissionPrefix & Gnyevko ) and not debug then
1191: LD_EXP 2
1195: PUSH
1196: LD_STRING Gnyevko
1198: STR
1199: PPUSH
1200: CALL_OW 28
1204: NOT
1205: PUSH
1206: LD_EXP 1
1210: NOT
1211: AND
1212: IFFALSE 1239
// begin PrepareHuman ( sex_male , class_engineer , 1 ) ;
1214: LD_INT 1
1216: PPUSH
1217: LD_INT 2
1219: PPUSH
1220: LD_INT 1
1222: PPUSH
1223: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , beria ) ;
1227: CALL_OW 44
1231: PPUSH
1232: LD_INT 106
1234: PPUSH
1235: CALL_OW 52
// end ; end ;
1239: LD_VAR 0 1
1243: RET
// export function PrepareBurlak ; var i ; begin
1244: LD_INT 0
1246: PPUSH
1247: PPUSH
// uc_side := 3 ;
1248: LD_ADDR_OWVAR 20
1252: PUSH
1253: LD_INT 3
1255: ST_TO_ADDR
// uc_nation := 3 ;
1256: LD_ADDR_OWVAR 21
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , prevMissionPrefix ) ;
1264: LD_ADDR_EXP 34
1268: PUSH
1269: LD_STRING Burlak
1271: PPUSH
1272: LD_EXP 1
1276: NOT
1277: PPUSH
1278: LD_EXP 2
1282: PPUSH
1283: CALL 16927 0 3
1287: ST_TO_ADDR
// uc_side := 6 ;
1288: LD_ADDR_OWVAR 20
1292: PUSH
1293: LD_INT 6
1295: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , ( not debug ) , prevMissionPrefix ) ;
1296: LD_ADDR_EXP 35
1300: PUSH
1301: LD_STRING Gnyevko
1303: PPUSH
1304: LD_EXP 1
1308: NOT
1309: PPUSH
1310: LD_EXP 2
1314: PPUSH
1315: CALL 16927 0 3
1319: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , prevMissionPrefix ) ;
1320: LD_ADDR_EXP 37
1324: PUSH
1325: LD_STRING Kirilenkova
1327: PPUSH
1328: LD_EXP 1
1332: NOT
1333: PPUSH
1334: LD_EXP 2
1338: PPUSH
1339: CALL 16927 0 3
1343: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , ( not debug ) , prevMissionPrefix ) ;
1344: LD_ADDR_EXP 36
1348: PUSH
1349: LD_STRING Belkov
1351: PPUSH
1352: LD_EXP 1
1356: NOT
1357: PPUSH
1358: LD_EXP 2
1362: PPUSH
1363: CALL 16927 0 3
1367: ST_TO_ADDR
// belkovTeam := CreateCharacterSet ( 01_OtherSurvivors ) ;
1368: LD_ADDR_EXP 45
1372: PUSH
1373: LD_STRING 01_OtherSurvivors
1375: PPUSH
1376: CALL_OW 31
1380: ST_TO_ADDR
// result := [ Burlak , Gnyevko , Kirilenkova , Belkov ] union belkovTeam ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_EXP 34
1390: PUSH
1391: LD_EXP 35
1395: PUSH
1396: LD_EXP 37
1400: PUSH
1401: LD_EXP 36
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: LIST
1410: LIST
1411: PUSH
1412: LD_EXP 45
1416: UNION
1417: ST_TO_ADDR
// end ;
1418: LD_VAR 0 1
1422: RET
// every 0 0$2 trigger beriaVisited and GetTech ( tech_oileng , 3 ) = state_researched do var tmp , i ;
1423: LD_EXP 4
1427: PUSH
1428: LD_INT 47
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL_OW 321
1438: PUSH
1439: LD_INT 2
1441: EQUAL
1442: AND
1443: IFFALSE 1665
1445: GO 1447
1447: DISABLE
1448: LD_INT 0
1450: PPUSH
1451: PPUSH
// begin tmp := UnitFilter ( kirovBaseSquad , [ f_class , 2 ] ) ;
1452: LD_ADDR_VAR 0 1
1456: PUSH
1457: LD_EXP 43
1461: PPUSH
1462: LD_INT 25
1464: PUSH
1465: LD_INT 2
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PPUSH
1472: CALL_OW 72
1476: ST_TO_ADDR
// if not tmp then
1477: LD_VAR 0 1
1481: NOT
1482: IFFALSE 1486
// exit ;
1484: GO 1665
// wait ( 0 0$5 ) ;
1486: LD_INT 175
1488: PPUSH
1489: CALL_OW 67
// ComExit ( tmp ) ;
1493: LD_VAR 0 1
1497: PPUSH
1498: CALL 53996 0 1
// for i in 2 do
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 2
1509: PUSH
1510: FOR_IN
1511: IFFALSE 1554
// begin AddComTransport ( tmp , kirov , mat_oil ) ;
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 71
1520: PPUSH
1521: LD_INT 2
1523: PPUSH
1524: CALL_OW 211
// AddComMoveXY ( tmp , 121 , 111 ) ;
1528: LD_VAR 0 1
1532: PPUSH
1533: LD_INT 121
1535: PPUSH
1536: LD_INT 111
1538: PPUSH
1539: CALL_OW 171
// AddComUnload ( tmp ) ;
1543: LD_VAR 0 1
1547: PPUSH
1548: CALL_OW 219
// end ;
1552: GO 1510
1554: POP
1555: POP
// AddComBuild ( tmp , b_workshop , 113 , 113 , 0 ) ;
1556: LD_VAR 0 1
1560: PPUSH
1561: LD_INT 2
1563: PPUSH
1564: LD_INT 113
1566: PPUSH
1567: LD_INT 113
1569: PPUSH
1570: LD_INT 0
1572: PPUSH
1573: CALL_OW 205
// ComResearch ( ru_lab , tech_oilpow ) ;
1577: LD_INT 83
1579: PPUSH
1580: LD_INT 46
1582: PPUSH
1583: CALL_OW 124
// AddComResearch ( ru_lab , tech_oileng ) ;
1587: LD_INT 83
1589: PPUSH
1590: LD_INT 47
1592: PPUSH
1593: CALL_OW 184
// AddComResearch ( ru_lab , tech_tech1 ) ;
1597: LD_INT 83
1599: PPUSH
1600: LD_INT 48
1602: PPUSH
1603: CALL_OW 184
// AddComBuild ( tmp , b_oil_power , 116 , 98 , 0 ) ;
1607: LD_VAR 0 1
1611: PPUSH
1612: LD_INT 26
1614: PPUSH
1615: LD_INT 116
1617: PPUSH
1618: LD_INT 98
1620: PPUSH
1621: LD_INT 0
1623: PPUSH
1624: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
1628: LD_INT 35
1630: PPUSH
1631: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 60
1642: PUSH
1643: EMPTY
1644: LIST
1645: PPUSH
1646: CALL_OW 72
1650: NOT
1651: IFFALSE 1628
// ComEnterUnit ( tmp , kirov ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 71
1660: PPUSH
1661: CALL_OW 120
// end ;
1665: PPOPN 2
1667: END
// export function BelkovAttackScript ; var i , belkovTank , mech , tmp , fuel ; begin
1668: LD_INT 0
1670: PPUSH
1671: PPUSH
1672: PPUSH
1673: PPUSH
1674: PPUSH
1675: PPUSH
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ;
1676: LD_ADDR_VAR 0 3
1680: PUSH
1681: LD_INT 22
1683: PUSH
1684: LD_INT 6
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 21
1693: PUSH
1694: LD_INT 2
1696: PUSH
1697: EMPTY
1698: LIST
1699: LIST
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: PPUSH
1705: CALL_OW 69
1709: ST_TO_ADDR
// if not belkovTank then
1710: LD_VAR 0 3
1714: NOT
1715: IFFALSE 1808
// begin uc_side := 6 ;
1717: LD_ADDR_OWVAR 20
1721: PUSH
1722: LD_INT 6
1724: ST_TO_ADDR
// uc_nation := 3 ;
1725: LD_ADDR_OWVAR 21
1729: PUSH
1730: LD_INT 3
1732: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , 100 ) ;
1733: LD_INT 21
1735: PPUSH
1736: LD_INT 1
1738: PPUSH
1739: LD_INT 1
1741: PPUSH
1742: LD_INT 42
1744: PPUSH
1745: LD_INT 100
1747: PPUSH
1748: CALL 21791 0 5
// belkovTank := CreateVehicle ;
1752: LD_ADDR_VAR 0 3
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// SetDir ( belkovTank , 5 ) ;
1762: LD_VAR 0 3
1766: PPUSH
1767: LD_INT 5
1769: PPUSH
1770: CALL_OW 233
// PlaceUnitXY ( belkovTank , 127 , 118 , false ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 127
1781: PPUSH
1782: LD_INT 118
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 48
// ComEnterUnit ( Belkov , belkovTank ) ;
1792: LD_EXP 36
1796: PPUSH
1797: LD_VAR 0 3
1801: PPUSH
1802: CALL_OW 120
// end else
1806: GO 1822
// begin belkovTank := belkovTank [ 1 ] ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: LD_VAR 0 3
1817: PUSH
1818: LD_INT 1
1820: ARRAY
1821: ST_TO_ADDR
// end ; ComMoveUnit ( belkovTank , kirov ) ;
1822: LD_VAR 0 3
1826: PPUSH
1827: LD_INT 71
1829: PPUSH
1830: CALL_OW 112
// AddComRefuel ( belkovTank , kirov ) ;
1834: LD_VAR 0 3
1838: PPUSH
1839: LD_INT 71
1841: PPUSH
1842: CALL_OW 210
// if GetLives ( belkovTank ) < 1000 then
1846: LD_VAR 0 3
1850: PPUSH
1851: CALL_OW 256
1855: PUSH
1856: LD_INT 1000
1858: LESS
1859: IFFALSE 1972
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
1861: LD_ADDR_VAR 0 4
1865: PUSH
1866: LD_EXP 43
1870: PPUSH
1871: LD_INT 25
1873: PUSH
1874: LD_INT 3
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PPUSH
1881: CALL_OW 72
1885: ST_TO_ADDR
// if not mech then
1886: LD_VAR 0 4
1890: NOT
1891: IFFALSE 1907
// SetLives ( belkovTank , 1000 ) else
1893: LD_VAR 0 3
1897: PPUSH
1898: LD_INT 1000
1900: PPUSH
1901: CALL_OW 234
1905: GO 1972
// begin ComExit ( mech ) ;
1907: LD_VAR 0 4
1911: PPUSH
1912: CALL 53996 0 1
// AddComRepairVehicle ( mech , belkovTank ) ;
1916: LD_VAR 0 4
1920: PPUSH
1921: LD_VAR 0 3
1925: PPUSH
1926: CALL_OW 189
// AddComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 22
1937: PUSH
1938: LD_INT 6
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PUSH
1945: LD_INT 30
1947: PUSH
1948: LD_INT 2
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PPUSH
1959: CALL_OW 69
1963: PUSH
1964: LD_INT 1
1966: ARRAY
1967: PPUSH
1968: CALL_OW 180
// end ; end ; repeat wait ( 0 0$2 ) ;
1972: LD_INT 70
1974: PPUSH
1975: CALL_OW 67
// until GetLives ( belkovTank ) = 1000 ;
1979: LD_VAR 0 3
1983: PPUSH
1984: CALL_OW 256
1988: PUSH
1989: LD_INT 1000
1991: EQUAL
1992: IFFALSE 1972
// if mech then
1994: LD_VAR 0 4
1998: IFFALSE 2042
// ComEnterUnit ( mech , FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) [ 1 ] ) ;
2000: LD_VAR 0 4
2004: PPUSH
2005: LD_INT 22
2007: PUSH
2008: LD_INT 6
2010: PUSH
2011: EMPTY
2012: LIST
2013: LIST
2014: PUSH
2015: LD_INT 30
2017: PUSH
2018: LD_INT 2
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PUSH
2025: EMPTY
2026: LIST
2027: LIST
2028: PPUSH
2029: CALL_OW 69
2033: PUSH
2034: LD_INT 1
2036: ARRAY
2037: PPUSH
2038: CALL_OW 120
// AddComMoveXY ( Belkov , 107 , 104 ) ;
2042: LD_EXP 36
2046: PPUSH
2047: LD_INT 107
2049: PPUSH
2050: LD_INT 104
2052: PPUSH
2053: CALL_OW 171
// AddComMoveXY ( Belkov , 95 , 101 ) ;
2057: LD_EXP 36
2061: PPUSH
2062: LD_INT 95
2064: PPUSH
2065: LD_INT 101
2067: PPUSH
2068: CALL_OW 171
// AddComMoveXY ( Belkov , 89 , 100 ) ;
2072: LD_EXP 36
2076: PPUSH
2077: LD_INT 89
2079: PPUSH
2080: LD_INT 100
2082: PPUSH
2083: CALL_OW 171
// wait ( 0 0$2 ) ;
2087: LD_INT 70
2089: PPUSH
2090: CALL_OW 67
// for i in belkovTeam do
2094: LD_ADDR_VAR 0 2
2098: PUSH
2099: LD_EXP 45
2103: PUSH
2104: FOR_IN
2105: IFFALSE 2133
// begin ComExit ( i ) ;
2107: LD_VAR 0 2
2111: PPUSH
2112: CALL 53996 0 1
// AddComMoveXY ( i , 89 , 100 ) ;
2116: LD_VAR 0 2
2120: PPUSH
2121: LD_INT 89
2123: PPUSH
2124: LD_INT 100
2126: PPUSH
2127: CALL_OW 171
// end ;
2131: GO 2104
2133: POP
2134: POP
// tmp := Belkov union belkovTeam ;
2135: LD_ADDR_VAR 0 5
2139: PUSH
2140: LD_EXP 36
2144: PUSH
2145: LD_EXP 45
2149: UNION
2150: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2151: LD_INT 35
2153: PPUSH
2154: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
2158: LD_VAR 0 5
2162: PPUSH
2163: LD_INT 60
2165: PUSH
2166: EMPTY
2167: LIST
2168: PPUSH
2169: CALL_OW 72
2173: NOT
2174: IFFALSE 2151
// ComMoveXY ( tmp , 71 , 65 ) ;
2176: LD_VAR 0 5
2180: PPUSH
2181: LD_INT 71
2183: PPUSH
2184: LD_INT 65
2186: PPUSH
2187: CALL_OW 111
// AddComMoveXY ( tmp , 61 , 37 ) ;
2191: LD_VAR 0 5
2195: PPUSH
2196: LD_INT 61
2198: PPUSH
2199: LD_INT 37
2201: PPUSH
2202: CALL_OW 171
// AddComMoveXY ( tmp , 67 , 17 ) ;
2206: LD_VAR 0 5
2210: PPUSH
2211: LD_INT 67
2213: PPUSH
2214: LD_INT 17
2216: PPUSH
2217: CALL_OW 171
// AddComWait ( tmp , 0 0$2 ) ;
2221: LD_VAR 0 5
2225: PPUSH
2226: LD_INT 70
2228: PPUSH
2229: CALL_OW 202
// AddComMoveXY ( Belkov , 63 , 8 ) ;
2233: LD_EXP 36
2237: PPUSH
2238: LD_INT 63
2240: PPUSH
2241: LD_INT 8
2243: PPUSH
2244: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2248: LD_EXP 36
2252: PPUSH
2253: LD_INT 105
2255: PPUSH
2256: CALL_OW 202
// AddComMoveXY ( Belkov , 86 , 37 ) ;
2260: LD_EXP 36
2264: PPUSH
2265: LD_INT 86
2267: PPUSH
2268: LD_INT 37
2270: PPUSH
2271: CALL_OW 171
// AddComWait ( Belkov , 0 0$3 ) ;
2275: LD_EXP 36
2279: PPUSH
2280: LD_INT 105
2282: PPUSH
2283: CALL_OW 202
// AddComMoveXY ( tmp , 88 , 29 ) ;
2287: LD_VAR 0 5
2291: PPUSH
2292: LD_INT 88
2294: PPUSH
2295: LD_INT 29
2297: PPUSH
2298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
2302: LD_INT 35
2304: PPUSH
2305: CALL_OW 67
// for i in tmp do
2309: LD_ADDR_VAR 0 2
2313: PUSH
2314: LD_VAR 0 5
2318: PUSH
2319: FOR_IN
2320: IFFALSE 2351
// if not HasTask ( i ) then
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL_OW 314
2331: NOT
2332: IFFALSE 2349
// AddComMoveXY ( tmp , 88 , 29 ) ;
2334: LD_VAR 0 5
2338: PPUSH
2339: LD_INT 88
2341: PPUSH
2342: LD_INT 29
2344: PPUSH
2345: CALL_OW 171
2349: GO 2319
2351: POP
2352: POP
// if UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) then
2353: LD_VAR 0 5
2357: PPUSH
2358: LD_INT 95
2360: PUSH
2361: LD_INT 6
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: PPUSH
2368: CALL_OW 72
2372: IFFALSE 2466
// for i in UnitFilter ( tmp , [ f_inarea , belkovOutArea ] ) do
2374: LD_ADDR_VAR 0 2
2378: PUSH
2379: LD_VAR 0 5
2383: PPUSH
2384: LD_INT 95
2386: PUSH
2387: LD_INT 6
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PPUSH
2394: CALL_OW 72
2398: PUSH
2399: FOR_IN
2400: IFFALSE 2464
// begin if i = Belkov then
2402: LD_VAR 0 2
2406: PUSH
2407: LD_EXP 36
2411: EQUAL
2412: IFFALSE 2453
// begin belkovTank := IsInUnit ( Belkov ) ;
2414: LD_ADDR_VAR 0 3
2418: PUSH
2419: LD_EXP 36
2423: PPUSH
2424: CALL_OW 310
2428: ST_TO_ADDR
// fuel := GetFuel ( belkovTank ) ;
2429: LD_ADDR_VAR 0 6
2433: PUSH
2434: LD_VAR 0 3
2438: PPUSH
2439: CALL_OW 261
2443: ST_TO_ADDR
// RemoveUnit ( belkovTank ) ;
2444: LD_VAR 0 3
2448: PPUSH
2449: CALL_OW 64
// end ; RemoveUnit ( i ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: CALL_OW 64
// end ;
2462: GO 2399
2464: POP
2465: POP
// until not UnitFilter ( tmp , [ f_placed ] ) ;
2466: LD_VAR 0 5
2470: PPUSH
2471: LD_INT 52
2473: PUSH
2474: EMPTY
2475: LIST
2476: PPUSH
2477: CALL_OW 72
2481: NOT
2482: IFFALSE 2302
// wait ( 1 1$20 ) ;
2484: LD_INT 2800
2486: PPUSH
2487: CALL_OW 67
// if fuel < 50 then
2491: LD_VAR 0 6
2495: PUSH
2496: LD_INT 50
2498: LESS
2499: IFFALSE 2509
// fuel := 50 ;
2501: LD_ADDR_VAR 0 6
2505: PUSH
2506: LD_INT 50
2508: ST_TO_ADDR
// uc_side := 6 ;
2509: LD_ADDR_OWVAR 20
2513: PUSH
2514: LD_INT 6
2516: ST_TO_ADDR
// uc_nation := 3 ;
2517: LD_ADDR_OWVAR 21
2521: PUSH
2522: LD_INT 3
2524: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun , fuel - 5 ) ;
2525: LD_INT 21
2527: PPUSH
2528: LD_INT 1
2530: PPUSH
2531: LD_INT 1
2533: PPUSH
2534: LD_INT 42
2536: PPUSH
2537: LD_VAR 0 6
2541: PUSH
2542: LD_INT 5
2544: MINUS
2545: PPUSH
2546: CALL 21791 0 5
// belkovTank := CreateVehicle ;
2550: LD_ADDR_VAR 0 3
2554: PUSH
2555: CALL_OW 45
2559: ST_TO_ADDR
// SetDir ( belkovTank , 2 ) ;
2560: LD_VAR 0 3
2564: PPUSH
2565: LD_INT 2
2567: PPUSH
2568: CALL_OW 233
// PlaceUnitXY ( belkovTank , 60 , 3 , false ) ;
2572: LD_VAR 0 3
2576: PPUSH
2577: LD_INT 60
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 48
// PlaceHumanInUnit ( Belkov , belkovTank ) ;
2590: LD_EXP 36
2594: PPUSH
2595: LD_VAR 0 3
2599: PPUSH
2600: CALL_OW 52
// ComMoveXY ( Belkov , 72 , 26 ) ;
2604: LD_EXP 36
2608: PPUSH
2609: LD_INT 72
2611: PPUSH
2612: LD_INT 26
2614: PPUSH
2615: CALL_OW 111
// wait ( 0 0$2 ) ;
2619: LD_INT 70
2621: PPUSH
2622: CALL_OW 67
// for i in belkovTeam do
2626: LD_ADDR_VAR 0 2
2630: PUSH
2631: LD_EXP 45
2635: PUSH
2636: FOR_IN
2637: IFFALSE 2681
// begin PlaceUnitXY ( i , 60 , 3 , false ) ;
2639: LD_VAR 0 2
2643: PPUSH
2644: LD_INT 60
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL_OW 48
// ComMoveXY ( i , 65 , 18 ) ;
2657: LD_VAR 0 2
2661: PPUSH
2662: LD_INT 65
2664: PPUSH
2665: LD_INT 18
2667: PPUSH
2668: CALL_OW 111
// wait ( 0 0$0.8 ) ;
2672: LD_INT 28
2674: PPUSH
2675: CALL_OW 67
// end ;
2679: GO 2636
2681: POP
2682: POP
// repeat wait ( 0 0$1 ) ;
2683: LD_INT 35
2685: PPUSH
2686: CALL_OW 67
// until hasAllTanks and not UnitFilter ( belkovTeam , [ f_hastask ] ) ;
2690: LD_EXP 14
2694: PUSH
2695: LD_EXP 45
2699: PPUSH
2700: LD_INT 60
2702: PUSH
2703: EMPTY
2704: LIST
2705: PPUSH
2706: CALL_OW 72
2710: NOT
2711: AND
2712: IFFALSE 2683
// americanTrap := true ;
2714: LD_ADDR_EXP 17
2718: PUSH
2719: LD_INT 1
2721: ST_TO_ADDR
// end ;
2722: LD_VAR 0 1
2726: RET
// every 0 0$25 trigger beriaVisited and IsOk ( Platonov ) do var x , y , amount , dir ;
2727: LD_EXP 4
2731: PUSH
2732: LD_EXP 40
2736: PPUSH
2737: CALL_OW 302
2741: AND
2742: IFFALSE 3062
2744: GO 2746
2746: DISABLE
2747: LD_INT 0
2749: PPUSH
2750: PPUSH
2751: PPUSH
2752: PPUSH
// begin enable ;
2753: ENABLE
// if cratesSpawnAmount > 0 and not HasTask ( Platonov ) then
2754: LD_EXP 8
2758: PUSH
2759: LD_INT 0
2761: GREATER
2762: PUSH
2763: LD_EXP 40
2767: PPUSH
2768: CALL_OW 314
2772: NOT
2773: AND
2774: IFFALSE 2943
// begin dir := rand ( 0 , 5 ) ;
2776: LD_ADDR_VAR 0 4
2780: PUSH
2781: LD_INT 0
2783: PPUSH
2784: LD_INT 5
2786: PPUSH
2787: CALL_OW 12
2791: ST_TO_ADDR
// x := ShiftX ( GetX ( Platonov ) , dir , 5 ) ;
2792: LD_ADDR_VAR 0 1
2796: PUSH
2797: LD_EXP 40
2801: PPUSH
2802: CALL_OW 250
2806: PPUSH
2807: LD_VAR 0 4
2811: PPUSH
2812: LD_INT 5
2814: PPUSH
2815: CALL_OW 272
2819: ST_TO_ADDR
// y := ShiftY ( GetY ( Platonov ) , dir , 5 ) ;
2820: LD_ADDR_VAR 0 2
2824: PUSH
2825: LD_EXP 40
2829: PPUSH
2830: CALL_OW 251
2834: PPUSH
2835: LD_VAR 0 4
2839: PPUSH
2840: LD_INT 5
2842: PPUSH
2843: CALL_OW 273
2847: ST_TO_ADDR
// if ValidHex ( x , y ) and GetDistUnitXY ( beria , x , y ) < 26 then
2848: LD_VAR 0 1
2852: PPUSH
2853: LD_VAR 0 2
2857: PPUSH
2858: CALL_OW 488
2862: PUSH
2863: LD_INT 106
2865: PPUSH
2866: LD_VAR 0 1
2870: PPUSH
2871: LD_VAR 0 2
2875: PPUSH
2876: CALL_OW 297
2880: PUSH
2881: LD_INT 26
2883: LESS
2884: AND
2885: IFFALSE 2908
// AddComMoveXY ( Platonov , x , y ) else
2887: LD_EXP 40
2891: PPUSH
2892: LD_VAR 0 1
2896: PPUSH
2897: LD_VAR 0 2
2901: PPUSH
2902: CALL_OW 171
2906: GO 2923
// AddComMoveXY ( Platonov , 64 , 96 ) ;
2908: LD_EXP 40
2912: PPUSH
2913: LD_INT 64
2915: PPUSH
2916: LD_INT 96
2918: PPUSH
2919: CALL_OW 171
// AddComWait ( Platonov , rand ( 0 0$3 , 0 0$9 ) ) ;
2923: LD_EXP 40
2927: PPUSH
2928: LD_INT 105
2930: PPUSH
2931: LD_INT 315
2933: PPUSH
2934: CALL_OW 12
2938: PPUSH
2939: CALL_OW 202
// end ; if cratesSpawnAmount <= 0 then
2943: LD_EXP 8
2947: PUSH
2948: LD_INT 0
2950: LESSEQUAL
2951: IFFALSE 2997
// begin if not IsAt ( Platonov , 64 , 96 ) then
2953: LD_EXP 40
2957: PPUSH
2958: LD_INT 64
2960: PPUSH
2961: LD_INT 96
2963: PPUSH
2964: CALL_OW 307
2968: NOT
2969: IFFALSE 2995
// begin ComMoveXY ( Platonov , 64 , 96 ) ;
2971: LD_EXP 40
2975: PPUSH
2976: LD_INT 64
2978: PPUSH
2979: LD_INT 96
2981: PPUSH
2982: CALL_OW 111
// AddComHold ( Platonov ) ;
2986: LD_EXP 40
2990: PPUSH
2991: CALL_OW 200
// end ; end else
2995: GO 3062
// if tick mod 0 0$75 = 0 0$00 then
2997: LD_OWVAR 1
3001: PUSH
3002: LD_INT 2625
3004: MOD
3005: PUSH
3006: LD_INT 0
3008: EQUAL
3009: IFFALSE 3062
// begin amount := rand ( 2 , 5 ) ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: LD_INT 2
3018: PPUSH
3019: LD_INT 5
3021: PPUSH
3022: CALL_OW 12
3026: ST_TO_ADDR
// cratesSpawnAmount := cratesSpawnAmount - ( amount * 10 ) ;
3027: LD_ADDR_EXP 8
3031: PUSH
3032: LD_EXP 8
3036: PUSH
3037: LD_VAR 0 3
3041: PUSH
3042: LD_INT 10
3044: MUL
3045: MINUS
3046: ST_TO_ADDR
// CreateCratesArea ( amount , cratesArea , true ) ;
3047: LD_VAR 0 3
3051: PPUSH
3052: LD_INT 5
3054: PPUSH
3055: LD_INT 1
3057: PPUSH
3058: CALL_OW 55
// end ; end ;
3062: PPOPN 4
3064: END
// every 0 0$3 trigger GetResourceType ( GetBase ( beria ) , mat_oil ) < 30 do var i , eng ;
3065: LD_INT 106
3067: PPUSH
3068: CALL_OW 274
3072: PPUSH
3073: LD_INT 2
3075: PPUSH
3076: CALL_OW 275
3080: PUSH
3081: LD_INT 30
3083: LESS
3084: IFFALSE 3294
3086: GO 3088
3088: DISABLE
3089: LD_INT 0
3091: PPUSH
3092: PPUSH
// begin eng := UnitFilter ( kirovBaseSquad , [ [ f_not , [ f_hastask ] ] , [ f_class , 2 ] ] ) ;
3093: LD_ADDR_VAR 0 2
3097: PUSH
3098: LD_EXP 43
3102: PPUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 60
3108: PUSH
3109: EMPTY
3110: LIST
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: PUSH
3116: LD_INT 25
3118: PUSH
3119: LD_INT 2
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: PPUSH
3130: CALL_OW 72
3134: ST_TO_ADDR
// if not eng then
3135: LD_VAR 0 2
3139: NOT
3140: IFFALSE 3144
// exit ;
3142: GO 3294
// ComExit ( eng ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: CALL 53996 0 1
// i := 5 ;
3153: LD_ADDR_VAR 0 1
3157: PUSH
3158: LD_INT 5
3160: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3161: LD_INT 35
3163: PPUSH
3164: CALL_OW 67
// if not UnitFilter ( eng , [ f_hastask ] ) and eng then
3168: LD_VAR 0 2
3172: PPUSH
3173: LD_INT 60
3175: PUSH
3176: EMPTY
3177: LIST
3178: PPUSH
3179: CALL_OW 72
3183: NOT
3184: PUSH
3185: LD_VAR 0 2
3189: AND
3190: IFFALSE 3260
// begin ComTransport ( eng , kirov , mat_oil ) ;
3192: LD_VAR 0 2
3196: PPUSH
3197: LD_INT 71
3199: PPUSH
3200: LD_INT 2
3202: PPUSH
3203: CALL_OW 151
// AddComMoveXY ( eng , 67 , 99 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 67
3214: PPUSH
3215: LD_INT 99
3217: PPUSH
3218: CALL_OW 171
// AddComUnload ( eng ) ;
3222: LD_VAR 0 2
3226: PPUSH
3227: CALL_OW 219
// AddComMoveXY ( eng , 107 , 104 ) ;
3231: LD_VAR 0 2
3235: PPUSH
3236: LD_INT 107
3238: PPUSH
3239: LD_INT 104
3241: PPUSH
3242: CALL_OW 171
// i := i - 1 ;
3246: LD_ADDR_VAR 0 1
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: LD_INT 1
3258: MINUS
3259: ST_TO_ADDR
// end ; until i = 0 ;
3260: LD_VAR 0 1
3264: PUSH
3265: LD_INT 0
3267: EQUAL
3268: IFFALSE 3161
// AddComMoveUnit ( eng , kirov ) ;
3270: LD_VAR 0 2
3274: PPUSH
3275: LD_INT 71
3277: PPUSH
3278: CALL_OW 172
// AddComEnterUnit ( eng , kirov ) ;
3282: LD_VAR 0 2
3286: PPUSH
3287: LD_INT 71
3289: PPUSH
3290: CALL_OW 180
// end ;
3294: PPOPN 2
3296: END
// export function SendReinforcements ; var i ; begin
3297: LD_INT 0
3299: PPUSH
3300: PPUSH
// reinforcementsGained := true ;
3301: LD_ADDR_EXP 25
3305: PUSH
3306: LD_INT 1
3308: ST_TO_ADDR
// for i := 1 to 2 do
3309: LD_ADDR_VAR 0 2
3313: PUSH
3314: DOUBLE
3315: LD_INT 1
3317: DEC
3318: ST_TO_ADDR
3319: LD_INT 2
3321: PUSH
3322: FOR_TO
3323: IFFALSE 3405
// begin if ComExit ( beriaBaseSquad [ i ] ) then
3325: LD_EXP 44
3329: PUSH
3330: LD_VAR 0 2
3334: ARRAY
3335: PPUSH
3336: CALL 53996 0 1
3340: IFFALSE 3349
// wait ( 0 0$0.3 ) ;
3342: LD_INT 10
3344: PPUSH
3345: CALL_OW 67
// AddComMoveXY ( beriaBaseSquad [ i ] , 75 , 84 ) ;
3349: LD_EXP 44
3353: PUSH
3354: LD_VAR 0 2
3358: ARRAY
3359: PPUSH
3360: LD_INT 75
3362: PPUSH
3363: LD_INT 84
3365: PPUSH
3366: CALL_OW 171
// AddComHold ( beriaBaseSquad [ i ] ) ;
3370: LD_EXP 44
3374: PUSH
3375: LD_VAR 0 2
3379: ARRAY
3380: PPUSH
3381: CALL_OW 200
// SetSide ( beriaBaseSquad [ i ] , 3 ) ;
3385: LD_EXP 44
3389: PUSH
3390: LD_VAR 0 2
3394: ARRAY
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: CALL_OW 235
// end ;
3403: GO 3322
3405: POP
3406: POP
// end ;
3407: LD_VAR 0 1
3411: RET
// every 0 0$10 trigger eastOutpostDiscovered and belkovTrapped and UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) do var mech , fac ;
3412: LD_EXP 21
3416: PUSH
3417: LD_EXP 18
3421: AND
3422: PUSH
3423: LD_EXP 43
3427: PPUSH
3428: LD_INT 25
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: EMPTY
3435: LIST
3436: LIST
3437: PPUSH
3438: CALL_OW 72
3442: AND
3443: IFFALSE 3600
3445: GO 3447
3447: DISABLE
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , 3 ] ) ;
3452: LD_ADDR_VAR 0 1
3456: PUSH
3457: LD_EXP 43
3461: PPUSH
3462: LD_INT 25
3464: PUSH
3465: LD_INT 3
3467: PUSH
3468: EMPTY
3469: LIST
3470: LIST
3471: PPUSH
3472: CALL_OW 72
3476: ST_TO_ADDR
// fac := FilterAllUnits ( [ [ f_side , 6 ] , [ f_btype , b_workshop ] ] ) ;
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 30
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: ST_TO_ADDR
// if not fac then
3511: LD_VAR 0 2
3515: NOT
3516: IFFALSE 3520
// exit ;
3518: GO 3600
// fac := fac [ 1 ] ;
3520: LD_ADDR_VAR 0 2
3524: PUSH
3525: LD_VAR 0 2
3529: PUSH
3530: LD_INT 1
3532: ARRAY
3533: ST_TO_ADDR
// if UnitsInside ( fac ) = 0 then
3534: LD_VAR 0 2
3538: PPUSH
3539: CALL_OW 313
3543: PUSH
3544: LD_INT 0
3546: EQUAL
3547: IFFALSE 3579
// begin ComExit ( mech ) ;
3549: LD_VAR 0 1
3553: PPUSH
3554: CALL 53996 0 1
// wait ( 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: CALL_OW 67
// AddComEnterUnit ( mech , fac ) ;
3565: LD_VAR 0 1
3569: PPUSH
3570: LD_VAR 0 2
3574: PPUSH
3575: CALL_OW 180
// end ; ComConstruct ( fac , ru_medium_wheeled , engine_combustion , control_manual , ru_heavy_machine_gun ) ;
3579: LD_VAR 0 2
3583: PPUSH
3584: LD_INT 21
3586: PPUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 1
3592: PPUSH
3593: LD_INT 42
3595: PPUSH
3596: CALL_OW 125
// end ;
3600: PPOPN 2
3602: END
// export function KirovAttack ( vehicle ) ; var i , tag ; begin
3603: LD_INT 0
3605: PPUSH
3606: PPUSH
3607: PPUSH
// ComMoveXY ( vehicle , 90 , 100 ) ;
3608: LD_VAR 0 1
3612: PPUSH
3613: LD_INT 90
3615: PPUSH
3616: LD_INT 100
3618: PPUSH
3619: CALL_OW 111
// wait ( 0 0$10 ) ;
3623: LD_INT 350
3625: PPUSH
3626: CALL_OW 67
// SetTag ( vehicle , 0 ) ;
3630: LD_VAR 0 1
3634: PPUSH
3635: LD_INT 0
3637: PPUSH
3638: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
3642: LD_INT 35
3644: PPUSH
3645: CALL_OW 67
// tag := GetTag ( vehicle ) ;
3649: LD_ADDR_VAR 0 4
3653: PUSH
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL_OW 110
3663: ST_TO_ADDR
// if tag = 0 then
3664: LD_VAR 0 4
3668: PUSH
3669: LD_INT 0
3671: EQUAL
3672: IFFALSE 3743
// begin if not HasTask ( vehicle ) then
3674: LD_VAR 0 1
3678: PPUSH
3679: CALL_OW 314
3683: NOT
3684: IFFALSE 3701
// ComAgressiveMove ( vehicle , 83 , 68 ) ;
3686: LD_VAR 0 1
3690: PPUSH
3691: LD_INT 83
3693: PPUSH
3694: LD_INT 68
3696: PPUSH
3697: CALL_OW 114
// if GetLives ( vehicle ) < 750 then
3701: LD_VAR 0 1
3705: PPUSH
3706: CALL_OW 256
3710: PUSH
3711: LD_INT 750
3713: LESS
3714: IFFALSE 3743
// begin SetTag ( vehicle , 1 ) ;
3716: LD_VAR 0 1
3720: PPUSH
3721: LD_INT 1
3723: PPUSH
3724: CALL_OW 109
// ComMoveXY ( vehicle , 93 , 102 ) ;
3728: LD_VAR 0 1
3732: PPUSH
3733: LD_INT 93
3735: PPUSH
3736: LD_INT 102
3738: PPUSH
3739: CALL_OW 111
// end ; end ; if tag = 1 then
3743: LD_VAR 0 4
3747: PUSH
3748: LD_INT 1
3750: EQUAL
3751: IFFALSE 3841
// begin if not IsAt ( vehicle , 113 , 106 ) and not HasTask ( vehicle ) then
3753: LD_VAR 0 1
3757: PPUSH
3758: LD_INT 113
3760: PPUSH
3761: LD_INT 106
3763: PPUSH
3764: CALL_OW 307
3768: NOT
3769: PUSH
3770: LD_VAR 0 1
3774: PPUSH
3775: CALL_OW 314
3779: NOT
3780: AND
3781: IFFALSE 3798
// ComMoveXY ( vehicle , 113 , 106 ) ;
3783: LD_VAR 0 1
3787: PPUSH
3788: LD_INT 113
3790: PPUSH
3791: LD_INT 106
3793: PPUSH
3794: CALL_OW 111
// if IsAt ( vehicle , 113 , 106 ) then
3798: LD_VAR 0 1
3802: PPUSH
3803: LD_INT 113
3805: PPUSH
3806: LD_INT 106
3808: PPUSH
3809: CALL_OW 307
3813: IFFALSE 3841
// begin SetTag ( vehicle , 2 ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: LD_INT 2
3822: PPUSH
3823: CALL_OW 109
// ComRepairVehicleAndReturn ( IsDrivenBy ( vehicle ) ) ;
3827: LD_VAR 0 1
3831: PPUSH
3832: CALL_OW 311
3836: PPUSH
3837: CALL 55300 0 1
// end ; end ; if tag = 2 then
3841: LD_VAR 0 4
3845: PUSH
3846: LD_INT 2
3848: EQUAL
3849: IFFALSE 3913
// begin if GetLives ( vehicle ) = 1000 and IsDrivenBy ( vehicle ) then
3851: LD_VAR 0 1
3855: PPUSH
3856: CALL_OW 256
3860: PUSH
3861: LD_INT 1000
3863: EQUAL
3864: PUSH
3865: LD_VAR 0 1
3869: PPUSH
3870: CALL_OW 311
3874: AND
3875: IFFALSE 3913
// begin ComMoveUnit ( vehicle , kirov ) ;
3877: LD_VAR 0 1
3881: PPUSH
3882: LD_INT 71
3884: PPUSH
3885: CALL_OW 112
// AddComRefuel ( vehicle , kirov ) ;
3889: LD_VAR 0 1
3893: PPUSH
3894: LD_INT 71
3896: PPUSH
3897: CALL_OW 210
// SetTag ( vehicle , 0 ) ;
3901: LD_VAR 0 1
3905: PPUSH
3906: LD_INT 0
3908: PPUSH
3909: CALL_OW 109
// end ; end ; until IsDead ( vehicle ) or eastOutpostDestroyed ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 301
3922: PUSH
3923: LD_EXP 23
3927: OR
3928: IFFALSE 3642
// if eastOutpostDestroyed then
3930: LD_EXP 23
3934: IFFALSE 3951
// ComMoveXY ( vehicle , 111 , 105 ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: LD_INT 111
3943: PPUSH
3944: LD_INT 105
3946: PPUSH
3947: CALL_OW 111
// end ; end_of_file
3951: LD_VAR 0 2
3955: RET
// export usWestForces , usEastForces , usTrapForces ; export function PrepareAmerican ; var i , un , tmp ; begin
3956: LD_INT 0
3958: PPUSH
3959: PPUSH
3960: PPUSH
3961: PPUSH
// uc_side := 1 ;
3962: LD_ADDR_OWVAR 20
3966: PUSH
3967: LD_INT 1
3969: ST_TO_ADDR
// uc_nation := 1 ;
3970: LD_ADDR_OWVAR 21
3974: PUSH
3975: LD_INT 1
3977: ST_TO_ADDR
// usWestForces := [ ] ;
3978: LD_ADDR_EXP 46
3982: PUSH
3983: EMPTY
3984: ST_TO_ADDR
// usEastForces := [ ] ;
3985: LD_ADDR_EXP 47
3989: PUSH
3990: EMPTY
3991: ST_TO_ADDR
// bc_type := b_depot ;
3992: LD_ADDR_OWVAR 42
3996: PUSH
3997: LD_INT 0
3999: ST_TO_ADDR
// bc_level := Difficulty - 1 ;
4000: LD_ADDR_OWVAR 43
4004: PUSH
4005: LD_OWVAR 67
4009: PUSH
4010: LD_INT 1
4012: MINUS
4013: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 48 , 54 , 2 ) ;
4014: LD_INT 48
4016: PPUSH
4017: LD_INT 54
4019: PPUSH
4020: LD_INT 2
4022: PPUSH
4023: CALL_OW 47
// tmp := [ [ 55 , 55 , 4 ] , [ 59 , 61 , 4 ] ] ;
4027: LD_ADDR_VAR 0 4
4031: PUSH
4032: LD_INT 55
4034: PUSH
4035: LD_INT 55
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 59
4048: PUSH
4049: LD_INT 61
4051: PUSH
4052: LD_INT 4
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: ST_TO_ADDR
// if Difficulty > 1 then
4064: LD_OWVAR 67
4068: PUSH
4069: LD_INT 1
4071: GREATER
4072: IFFALSE 4108
// tmp := Insert ( tmp , tmp , [ 46 , 64 , 0 ] ) ;
4074: LD_ADDR_VAR 0 4
4078: PUSH
4079: LD_VAR 0 4
4083: PPUSH
4084: LD_VAR 0 4
4088: PPUSH
4089: LD_INT 46
4091: PUSH
4092: LD_INT 64
4094: PUSH
4095: LD_INT 0
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: PPUSH
4103: CALL_OW 2
4107: ST_TO_ADDR
// if Difficulty > 2 then
4108: LD_OWVAR 67
4112: PUSH
4113: LD_INT 2
4115: GREATER
4116: IFFALSE 4152
// tmp := Insert ( tmp , tmp , [ 36 , 48 , 3 ] ) ;
4118: LD_ADDR_VAR 0 4
4122: PUSH
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_VAR 0 4
4132: PPUSH
4133: LD_INT 36
4135: PUSH
4136: LD_INT 48
4138: PUSH
4139: LD_INT 3
4141: PUSH
4142: EMPTY
4143: LIST
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 2
4151: ST_TO_ADDR
// bc_type := b_breastwork ;
4152: LD_ADDR_OWVAR 42
4156: PUSH
4157: LD_INT 31
4159: ST_TO_ADDR
// InitHC_All ( ) ;
4160: CALL_OW 584
// for i in tmp do
4164: LD_ADDR_VAR 0 2
4168: PUSH
4169: LD_VAR 0 4
4173: PUSH
4174: FOR_IN
4175: IFFALSE 4319
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4177: LD_VAR 0 2
4181: PUSH
4182: LD_INT 1
4184: ARRAY
4185: PPUSH
4186: LD_VAR 0 2
4190: PUSH
4191: LD_INT 2
4193: ARRAY
4194: PPUSH
4195: LD_VAR 0 2
4199: PUSH
4200: LD_INT 3
4202: ARRAY
4203: PPUSH
4204: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4208: LD_INT 0
4210: PPUSH
4211: LD_OWVAR 67
4215: PPUSH
4216: CALL_OW 381
// un := CreateHuman ;
4220: LD_ADDR_VAR 0 3
4224: PUSH
4225: CALL_OW 44
4229: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4230: LD_ADDR_EXP 46
4234: PUSH
4235: LD_EXP 46
4239: PPUSH
4240: LD_EXP 46
4244: PUSH
4245: LD_INT 1
4247: PLUS
4248: PPUSH
4249: LD_VAR 0 3
4253: PPUSH
4254: CALL_OW 1
4258: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4259: LD_VAR 0 3
4263: PPUSH
4264: LD_VAR 0 2
4268: PUSH
4269: LD_INT 3
4271: ARRAY
4272: PUSH
4273: LD_INT 3
4275: PLUS
4276: PUSH
4277: LD_INT 6
4279: MOD
4280: PPUSH
4281: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4285: LD_VAR 0 3
4289: PPUSH
4290: LD_VAR 0 2
4294: PUSH
4295: LD_INT 1
4297: ARRAY
4298: PPUSH
4299: LD_VAR 0 2
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: PPUSH
4308: CALL_OW 428
4312: PPUSH
4313: CALL_OW 52
// end ;
4317: GO 4174
4319: POP
4320: POP
// for i := 1 to 2 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 2
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4411
// begin PrepareEngineer ( false , Difficulty ) ;
4337: LD_INT 0
4339: PPUSH
4340: LD_OWVAR 67
4344: PPUSH
4345: CALL_OW 382
// un := CreateHuman ;
4349: LD_ADDR_VAR 0 3
4353: PUSH
4354: CALL_OW 44
4358: ST_TO_ADDR
// usWestForces := Replace ( usWestForces , usWestForces + 1 , un ) ;
4359: LD_ADDR_EXP 46
4363: PUSH
4364: LD_EXP 46
4368: PPUSH
4369: LD_EXP 46
4373: PUSH
4374: LD_INT 1
4376: PLUS
4377: PPUSH
4378: LD_VAR 0 3
4382: PPUSH
4383: CALL_OW 1
4387: ST_TO_ADDR
// PlaceUnitXYR ( un , 54 , 58 , 2 , false ) ;
4388: LD_VAR 0 3
4392: PPUSH
4393: LD_INT 54
4395: PPUSH
4396: LD_INT 58
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 0
4404: PPUSH
4405: CALL_OW 50
// end ;
4409: GO 4334
4411: POP
4412: POP
// tmp := [ [ 87 , 62 , 1 ] , [ 89 , 67 , 1 ] ] ;
4413: LD_ADDR_VAR 0 4
4417: PUSH
4418: LD_INT 87
4420: PUSH
4421: LD_INT 62
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: PUSH
4432: LD_INT 89
4434: PUSH
4435: LD_INT 67
4437: PUSH
4438: LD_INT 1
4440: PUSH
4441: EMPTY
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: ST_TO_ADDR
// if Difficulty > 2 then
4450: LD_OWVAR 67
4454: PUSH
4455: LD_INT 2
4457: GREATER
4458: IFFALSE 4494
// tmp := Insert ( tmp , tmp , [ 88 , 53 , 2 ] ) ;
4460: LD_ADDR_VAR 0 4
4464: PUSH
4465: LD_VAR 0 4
4469: PPUSH
4470: LD_VAR 0 4
4474: PPUSH
4475: LD_INT 88
4477: PUSH
4478: LD_INT 53
4480: PUSH
4481: LD_INT 2
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: LIST
4488: PPUSH
4489: CALL_OW 2
4493: ST_TO_ADDR
// bc_type := b_breastwork ;
4494: LD_ADDR_OWVAR 42
4498: PUSH
4499: LD_INT 31
4501: ST_TO_ADDR
// for i in tmp do
4502: LD_ADDR_VAR 0 2
4506: PUSH
4507: LD_VAR 0 4
4511: PUSH
4512: FOR_IN
4513: IFFALSE 4657
// begin CreateAndPlaceBuildingXYD ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
4515: LD_VAR 0 2
4519: PUSH
4520: LD_INT 1
4522: ARRAY
4523: PPUSH
4524: LD_VAR 0 2
4528: PUSH
4529: LD_INT 2
4531: ARRAY
4532: PPUSH
4533: LD_VAR 0 2
4537: PUSH
4538: LD_INT 3
4540: ARRAY
4541: PPUSH
4542: CALL_OW 47
// PrepareSoldier ( false , Difficulty ) ;
4546: LD_INT 0
4548: PPUSH
4549: LD_OWVAR 67
4553: PPUSH
4554: CALL_OW 381
// un := CreateHuman ;
4558: LD_ADDR_VAR 0 3
4562: PUSH
4563: CALL_OW 44
4567: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4568: LD_ADDR_EXP 47
4572: PUSH
4573: LD_EXP 47
4577: PPUSH
4578: LD_EXP 47
4582: PUSH
4583: LD_INT 1
4585: PLUS
4586: PPUSH
4587: LD_VAR 0 3
4591: PPUSH
4592: CALL_OW 1
4596: ST_TO_ADDR
// SetDir ( un , ( i [ 3 ] + 3 ) mod 6 ) ;
4597: LD_VAR 0 3
4601: PPUSH
4602: LD_VAR 0 2
4606: PUSH
4607: LD_INT 3
4609: ARRAY
4610: PUSH
4611: LD_INT 3
4613: PLUS
4614: PUSH
4615: LD_INT 6
4617: MOD
4618: PPUSH
4619: CALL_OW 233
// PlaceHumanInUnit ( un , HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
4623: LD_VAR 0 3
4627: PPUSH
4628: LD_VAR 0 2
4632: PUSH
4633: LD_INT 1
4635: ARRAY
4636: PPUSH
4637: LD_VAR 0 2
4641: PUSH
4642: LD_INT 2
4644: ARRAY
4645: PPUSH
4646: CALL_OW 428
4650: PPUSH
4651: CALL_OW 52
// end ;
4655: GO 4512
4657: POP
4658: POP
// for i := 1 to 2 do
4659: LD_ADDR_VAR 0 2
4663: PUSH
4664: DOUBLE
4665: LD_INT 1
4667: DEC
4668: ST_TO_ADDR
4669: LD_INT 2
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4749
// begin PrepareEngineer ( false , Difficulty ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_OWVAR 67
4682: PPUSH
4683: CALL_OW 382
// un := CreateHuman ;
4687: LD_ADDR_VAR 0 3
4691: PUSH
4692: CALL_OW 44
4696: ST_TO_ADDR
// usEastForces := Replace ( usEastForces , usEastForces + 1 , un ) ;
4697: LD_ADDR_EXP 47
4701: PUSH
4702: LD_EXP 47
4706: PPUSH
4707: LD_EXP 47
4711: PUSH
4712: LD_INT 1
4714: PLUS
4715: PPUSH
4716: LD_VAR 0 3
4720: PPUSH
4721: CALL_OW 1
4725: ST_TO_ADDR
// PlaceUnitXYR ( un , 95 , 65 , 2 , false ) ;
4726: LD_VAR 0 3
4730: PPUSH
4731: LD_INT 95
4733: PPUSH
4734: LD_INT 65
4736: PPUSH
4737: LD_INT 2
4739: PPUSH
4740: LD_INT 0
4742: PPUSH
4743: CALL_OW 50
// end ;
4747: GO 4672
4749: POP
4750: POP
// end ;
4751: LD_VAR 0 1
4755: RET
// export function PrepareAmericanTrap ; var i , un ; begin
4756: LD_INT 0
4758: PPUSH
4759: PPUSH
4760: PPUSH
// usTrapForces := [ ] ;
4761: LD_ADDR_EXP 48
4765: PUSH
4766: EMPTY
4767: ST_TO_ADDR
// uc_side := 1 ;
4768: LD_ADDR_OWVAR 20
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// uc_nation := 1 ;
4776: LD_ADDR_OWVAR 21
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// InitHC_All ( ) ;
4784: CALL_OW 584
// PrepareSoldier ( sex_male , Difficulty ) ;
4788: LD_INT 1
4790: PPUSH
4791: LD_OWVAR 67
4795: PPUSH
4796: CALL_OW 381
// un := CreateHuman ;
4800: LD_ADDR_VAR 0 3
4804: PUSH
4805: CALL_OW 44
4809: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4810: LD_ADDR_EXP 48
4814: PUSH
4815: LD_EXP 48
4819: PPUSH
4820: LD_VAR 0 3
4824: PPUSH
4825: CALL 53608 0 2
4829: ST_TO_ADDR
// for i := 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4830: LD_ADDR_VAR 0 2
4834: PUSH
4835: DOUBLE
4836: LD_INT 1
4838: DEC
4839: ST_TO_ADDR
4840: LD_INT 5
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: LD_INT 8
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: PUSH
4858: LD_OWVAR 67
4862: ARRAY
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4911
// begin PrepareSoldier ( false , Difficulty ) ;
4867: LD_INT 0
4869: PPUSH
4870: LD_OWVAR 67
4874: PPUSH
4875: CALL_OW 381
// un := CreateHuman ;
4879: LD_ADDR_VAR 0 3
4883: PUSH
4884: CALL_OW 44
4888: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4889: LD_ADDR_EXP 48
4893: PUSH
4894: LD_EXP 48
4898: PPUSH
4899: LD_VAR 0 3
4903: PPUSH
4904: CALL 53608 0 2
4908: ST_TO_ADDR
// end ;
4909: GO 4864
4911: POP
4912: POP
// for i := 1 to 2 do
4913: LD_ADDR_VAR 0 2
4917: PUSH
4918: DOUBLE
4919: LD_INT 1
4921: DEC
4922: ST_TO_ADDR
4923: LD_INT 2
4925: PUSH
4926: FOR_TO
4927: IFFALSE 4973
// begin PrepareScientist ( false , Difficulty ) ;
4929: LD_INT 0
4931: PPUSH
4932: LD_OWVAR 67
4936: PPUSH
4937: CALL_OW 384
// un := CreateHuman ;
4941: LD_ADDR_VAR 0 3
4945: PUSH
4946: CALL_OW 44
4950: ST_TO_ADDR
// usTrapForces := Join ( usTrapForces , un ) ;
4951: LD_ADDR_EXP 48
4955: PUSH
4956: LD_EXP 48
4960: PPUSH
4961: LD_VAR 0 3
4965: PPUSH
4966: CALL 53608 0 2
4970: ST_TO_ADDR
// end ;
4971: GO 4926
4973: POP
4974: POP
// end ;
4975: LD_VAR 0 1
4979: RET
// every 0 0$2 trigger usWestForces do var i , tmp , base , eng , sol ;
4980: LD_EXP 46
4984: IFFALSE 5554
4986: GO 4988
4988: DISABLE
4989: LD_INT 0
4991: PPUSH
4992: PPUSH
4993: PPUSH
4994: PPUSH
4995: PPUSH
// begin enable ;
4996: ENABLE
// base := FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
4997: LD_ADDR_VAR 0 3
5001: PUSH
5002: LD_INT 8
5004: PPUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PUSH
5015: LD_INT 21
5017: PUSH
5018: LD_INT 3
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 70
5033: ST_TO_ADDR
// eng := UnitFilter ( usWestForces , [ f_class , class_engineer ] ) ;
5034: LD_ADDR_VAR 0 4
5038: PUSH
5039: LD_EXP 46
5043: PPUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 2
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PPUSH
5054: CALL_OW 72
5058: ST_TO_ADDR
// sol := UnitFilter ( usWestForces , [ f_class , class_soldier ] ) ;
5059: LD_ADDR_VAR 0 5
5063: PUSH
5064: LD_EXP 46
5068: PPUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 1
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PPUSH
5079: CALL_OW 72
5083: ST_TO_ADDR
// if eng then
5084: LD_VAR 0 4
5088: IFFALSE 5282
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5090: LD_VAR 0 3
5094: PPUSH
5095: LD_INT 3
5097: PUSH
5098: LD_INT 24
5100: PUSH
5101: LD_INT 1000
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: PPUSH
5112: CALL_OW 72
5116: IFFALSE 5228
// begin for i in eng do
5118: LD_ADDR_VAR 0 1
5122: PUSH
5123: LD_VAR 0 4
5127: PUSH
5128: FOR_IN
5129: IFFALSE 5224
// if IsInUnit ( i ) then
5131: LD_VAR 0 1
5135: PPUSH
5136: CALL_OW 310
5140: IFFALSE 5153
// ComExit ( i ) else
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL 53996 0 1
5151: GO 5222
// if IsOk ( i ) and not HasTask ( i ) then
5153: LD_VAR 0 1
5157: PPUSH
5158: CALL_OW 302
5162: PUSH
5163: LD_VAR 0 1
5167: PPUSH
5168: CALL_OW 314
5172: NOT
5173: AND
5174: IFFALSE 5222
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5176: LD_VAR 0 1
5180: PPUSH
5181: LD_VAR 0 3
5185: PPUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 24
5191: PUSH
5192: LD_INT 1000
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 72
5207: PPUSH
5208: LD_VAR 0 1
5212: PPUSH
5213: CALL_OW 74
5217: PPUSH
5218: CALL_OW 130
5222: GO 5128
5224: POP
5225: POP
// end else
5226: GO 5282
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5228: LD_VAR 0 3
5232: PPUSH
5233: LD_INT 30
5235: PUSH
5236: LD_INT 0
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PPUSH
5243: CALL_OW 72
5247: IFFALSE 5282
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5249: LD_VAR 0 4
5253: PPUSH
5254: LD_VAR 0 3
5258: PPUSH
5259: LD_INT 30
5261: PUSH
5262: LD_INT 0
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PPUSH
5269: CALL_OW 72
5273: PUSH
5274: LD_INT 1
5276: ARRAY
5277: PPUSH
5278: CALL_OW 120
// if UnitFilter ( sol , [ f_ok ] ) and FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) > 1 and not FilterUnitsInArea ( westWeakPointArea2 , [ f_side , 1 ] ) then
5282: LD_VAR 0 5
5286: PPUSH
5287: LD_INT 50
5289: PUSH
5290: EMPTY
5291: LIST
5292: PPUSH
5293: CALL_OW 72
5297: PUSH
5298: LD_INT 18
5300: PPUSH
5301: LD_INT 81
5303: PUSH
5304: LD_INT 1
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: PPUSH
5311: CALL_OW 70
5315: PUSH
5316: LD_INT 1
5318: GREATER
5319: AND
5320: PUSH
5321: LD_INT 18
5323: PPUSH
5324: LD_INT 22
5326: PUSH
5327: LD_INT 1
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: PPUSH
5334: CALL_OW 70
5338: NOT
5339: AND
5340: IFFALSE 5394
// begin for i in UnitFilter ( sol , [ f_ok ] ) do
5342: LD_ADDR_VAR 0 1
5346: PUSH
5347: LD_VAR 0 5
5351: PPUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PPUSH
5358: CALL_OW 72
5362: PUSH
5363: FOR_IN
5364: IFFALSE 5392
// begin ComExit ( i ) ;
5366: LD_VAR 0 1
5370: PPUSH
5371: CALL 53996 0 1
// AddComAgressiveMove ( i , 46 , 62 ) ;
5375: LD_VAR 0 1
5379: PPUSH
5380: LD_INT 46
5382: PPUSH
5383: LD_INT 62
5385: PPUSH
5386: CALL_OW 174
// end ;
5390: GO 5363
5392: POP
5393: POP
// end ; if not FilterUnitsInArea ( westWeakPointArea2 , [ f_enemy , 1 ] ) and UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) and UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) then
5394: LD_INT 18
5396: PPUSH
5397: LD_INT 81
5399: PUSH
5400: LD_INT 1
5402: PUSH
5403: EMPTY
5404: LIST
5405: LIST
5406: PPUSH
5407: CALL_OW 70
5411: NOT
5412: PUSH
5413: LD_VAR 0 5
5417: PPUSH
5418: LD_INT 3
5420: PUSH
5421: LD_INT 54
5423: PUSH
5424: EMPTY
5425: LIST
5426: PUSH
5427: EMPTY
5428: LIST
5429: LIST
5430: PUSH
5431: LD_INT 50
5433: PUSH
5434: EMPTY
5435: LIST
5436: PUSH
5437: EMPTY
5438: LIST
5439: LIST
5440: PPUSH
5441: CALL_OW 72
5445: AND
5446: PUSH
5447: LD_VAR 0 3
5451: PPUSH
5452: LD_INT 30
5454: PUSH
5455: LD_INT 31
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: LD_INT 58
5464: PUSH
5465: EMPTY
5466: LIST
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PPUSH
5472: CALL_OW 72
5476: AND
5477: IFFALSE 5554
// ComEnterUnit ( UnitFilter ( sol , [ [ f_not , [ f_inside ] ] , [ f_ok ] ] ) [ 1 ] , UnitFilter ( base , [ [ f_btype , b_breastwork ] , [ f_empty ] ] ) [ 1 ] ) ;
5479: LD_VAR 0 5
5483: PPUSH
5484: LD_INT 3
5486: PUSH
5487: LD_INT 54
5489: PUSH
5490: EMPTY
5491: LIST
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 50
5499: PUSH
5500: EMPTY
5501: LIST
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PPUSH
5507: CALL_OW 72
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PPUSH
5516: LD_VAR 0 3
5520: PPUSH
5521: LD_INT 30
5523: PUSH
5524: LD_INT 31
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 58
5533: PUSH
5534: EMPTY
5535: LIST
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: PPUSH
5541: CALL_OW 72
5545: PUSH
5546: LD_INT 1
5548: ARRAY
5549: PPUSH
5550: CALL_OW 120
// end ;
5554: PPOPN 5
5556: END
// every 0 0$2 trigger usEastForces do var i , base , eng ;
5557: LD_EXP 47
5561: IFFALSE 5832
5563: GO 5565
5565: DISABLE
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
// begin enable ;
5571: ENABLE
// base := FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) ;
5572: LD_ADDR_VAR 0 2
5576: PUSH
5577: LD_INT 15
5579: PPUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 21
5592: PUSH
5593: LD_INT 3
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PPUSH
5604: CALL_OW 70
5608: ST_TO_ADDR
// eng := UnitFilter ( usEastForces , [ f_class , class_engineer ] ) ;
5609: LD_ADDR_VAR 0 3
5613: PUSH
5614: LD_EXP 47
5618: PPUSH
5619: LD_INT 25
5621: PUSH
5622: LD_INT 2
5624: PUSH
5625: EMPTY
5626: LIST
5627: LIST
5628: PPUSH
5629: CALL_OW 72
5633: ST_TO_ADDR
// if eng then
5634: LD_VAR 0 3
5638: IFFALSE 5832
// if UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) then
5640: LD_VAR 0 2
5644: PPUSH
5645: LD_INT 3
5647: PUSH
5648: LD_INT 24
5650: PUSH
5651: LD_INT 1000
5653: PUSH
5654: EMPTY
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: PPUSH
5662: CALL_OW 72
5666: IFFALSE 5778
// begin for i in eng do
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_VAR 0 3
5677: PUSH
5678: FOR_IN
5679: IFFALSE 5774
// if IsInUnit ( i ) then
5681: LD_VAR 0 1
5685: PPUSH
5686: CALL_OW 310
5690: IFFALSE 5703
// ComExit ( i ) else
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL 53996 0 1
5701: GO 5772
// if IsOk ( i ) and not HasTask ( i ) then
5703: LD_VAR 0 1
5707: PPUSH
5708: CALL_OW 302
5712: PUSH
5713: LD_VAR 0 1
5717: PPUSH
5718: CALL_OW 314
5722: NOT
5723: AND
5724: IFFALSE 5772
// ComRepairBuilding ( i , NearestUnitToUnit ( UnitFilter ( base , [ f_not , [ f_lives , 1000 ] ] ) , i ) ) ;
5726: LD_VAR 0 1
5730: PPUSH
5731: LD_VAR 0 2
5735: PPUSH
5736: LD_INT 3
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 1000
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PPUSH
5753: CALL_OW 72
5757: PPUSH
5758: LD_VAR 0 1
5762: PPUSH
5763: CALL_OW 74
5767: PPUSH
5768: CALL_OW 130
5772: GO 5678
5774: POP
5775: POP
// end else
5776: GO 5832
// if UnitFilter ( base , [ f_btype , b_depot ] ) then
5778: LD_VAR 0 2
5782: PPUSH
5783: LD_INT 30
5785: PUSH
5786: LD_INT 0
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PPUSH
5793: CALL_OW 72
5797: IFFALSE 5832
// ComEnterUnit ( eng , UnitFilter ( base , [ f_btype , b_depot ] ) [ 1 ] ) ;
5799: LD_VAR 0 3
5803: PPUSH
5804: LD_VAR 0 2
5808: PPUSH
5809: LD_INT 30
5811: PUSH
5812: LD_INT 0
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: CALL_OW 72
5823: PUSH
5824: LD_INT 1
5826: ARRAY
5827: PPUSH
5828: CALL_OW 120
// end ; end_of_file
5832: PPOPN 3
5834: END
// export function Action ; var i , tmp ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
5839: PPUSH
// InGameOn ;
5840: CALL_OW 8
// PlaceSeeing ( 112 , 107 , 3 , - 12 ) ;
5844: LD_INT 112
5846: PPUSH
5847: LD_INT 107
5849: PPUSH
5850: LD_INT 3
5852: PPUSH
5853: LD_INT 12
5855: NEG
5856: PPUSH
5857: CALL_OW 330
// CenterNowOnXY ( 121 , 113 ) ;
5861: LD_INT 121
5863: PPUSH
5864: LD_INT 113
5866: PPUSH
5867: CALL_OW 86
// tmp := PrepareBurlak ;
5871: LD_ADDR_VAR 0 3
5875: PUSH
5876: CALL 1244 0 0
5880: ST_TO_ADDR
// for i in tmp do
5881: LD_ADDR_VAR 0 2
5885: PUSH
5886: LD_VAR 0 3
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5945
// begin SetDir ( i , 5 ) ;
5894: LD_VAR 0 2
5898: PPUSH
5899: LD_INT 5
5901: PPUSH
5902: CALL_OW 233
// PlaceUnitArea ( i , startArea , false ) ;
5906: LD_VAR 0 2
5910: PPUSH
5911: LD_INT 3
5913: PPUSH
5914: LD_INT 0
5916: PPUSH
5917: CALL_OW 49
// ComMoveXY ( i , 121 , 111 ) ;
5921: LD_VAR 0 2
5925: PPUSH
5926: LD_INT 121
5928: PPUSH
5929: LD_INT 111
5931: PPUSH
5932: CALL_OW 111
// wait ( 0 0$0.8 ) ;
5936: LD_INT 28
5938: PPUSH
5939: CALL_OW 67
// end ;
5943: GO 5891
5945: POP
5946: POP
// CenterOnUnits ( Kurin ) ;
5947: LD_EXP 38
5951: PPUSH
5952: CALL_OW 85
// ComMoveUnit ( Burlak , Kurin ) ;
5956: LD_EXP 34
5960: PPUSH
5961: LD_EXP 38
5965: PPUSH
5966: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5970: LD_INT 35
5972: PPUSH
5973: CALL_OW 67
// until GetDistUnits ( Burlak , Kurin ) < 6 ;
5977: LD_EXP 34
5981: PPUSH
5982: LD_EXP 38
5986: PPUSH
5987: CALL_OW 296
5991: PUSH
5992: LD_INT 6
5994: LESS
5995: IFFALSE 5970
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Kurin ) ;
5997: LD_EXP 34
6001: PUSH
6002: LD_EXP 35
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PPUSH
6011: LD_EXP 38
6015: PPUSH
6016: CALL_OW 179
// for i in tmp diff [ Burlak , Gnyevko ] do
6020: LD_ADDR_VAR 0 2
6024: PUSH
6025: LD_VAR 0 3
6029: PUSH
6030: LD_EXP 34
6034: PUSH
6035: LD_EXP 35
6039: PUSH
6040: EMPTY
6041: LIST
6042: LIST
6043: DIFF
6044: PUSH
6045: FOR_IN
6046: IFFALSE 6112
// if GetClass ( i ) = class_soldier then
6048: LD_VAR 0 2
6052: PPUSH
6053: CALL_OW 257
6057: PUSH
6058: LD_INT 1
6060: EQUAL
6061: IFFALSE 6098
// ComEnterUnit ( i , [ ru2_arm1 , ru2_arm2 ] [ i mod 2 + 1 ] ) else
6063: LD_VAR 0 2
6067: PPUSH
6068: LD_INT 95
6070: PUSH
6071: LD_INT 209
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: LD_VAR 0 2
6082: PUSH
6083: LD_INT 2
6085: MOD
6086: PUSH
6087: LD_INT 1
6089: PLUS
6090: ARRAY
6091: PPUSH
6092: CALL_OW 120
6096: GO 6110
// ComEnterUnit ( i , ru_lab ) ;
6098: LD_VAR 0 2
6102: PPUSH
6103: LD_INT 83
6105: PPUSH
6106: CALL_OW 120
6110: GO 6045
6112: POP
6113: POP
// Say ( Kurin , D1-Kur-1 ) ;
6114: LD_EXP 38
6118: PPUSH
6119: LD_STRING D1-Kur-1
6121: PPUSH
6122: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
6126: LD_EXP 34
6130: PPUSH
6131: LD_STRING D1-Bur-1
6133: PPUSH
6134: CALL_OW 88
// wait ( 0 0$0.3 ) ;
6138: LD_INT 10
6140: PPUSH
6141: CALL_OW 67
// Say ( Kurin , D1-Kur-2 ) ;
6145: LD_EXP 38
6149: PPUSH
6150: LD_STRING D1-Kur-2
6152: PPUSH
6153: CALL_OW 88
// ComExit ( Kovalyuk ) ;
6157: LD_EXP 39
6161: PPUSH
6162: CALL 53996 0 1
// AddComMoveXY ( Kovalyuk , 115 , 108 ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_INT 115
6173: PPUSH
6174: LD_INT 108
6176: PPUSH
6177: CALL_OW 171
// AddComHold ( Kovalyuk ) ;
6181: LD_EXP 39
6185: PPUSH
6186: CALL_OW 200
// Say ( Burlak , D1-Bur-2 ) ;
6190: LD_EXP 34
6194: PPUSH
6195: LD_STRING D1-Bur-2
6197: PPUSH
6198: CALL_OW 88
// Say ( Kurin , D1-Kur-3 ) ;
6202: LD_EXP 38
6206: PPUSH
6207: LD_STRING D1-Kur-3
6209: PPUSH
6210: CALL_OW 88
// if Gnyevko then
6214: LD_EXP 35
6218: IFFALSE 6232
// Say ( Kurin , D1-Kur-3a ) ;
6220: LD_EXP 38
6224: PPUSH
6225: LD_STRING D1-Kur-3a
6227: PPUSH
6228: CALL_OW 88
// InGameOff ;
6232: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
6236: LD_STRING M1
6238: PPUSH
6239: CALL_OW 337
// RemoveSeeing ( 112 , 107 , 3 ) ;
6243: LD_INT 112
6245: PPUSH
6246: LD_INT 107
6248: PPUSH
6249: LD_INT 3
6251: PPUSH
6252: CALL_OW 331
// PlaceSeeing ( 66 , 99 , 3 , - 7 ) ;
6256: LD_INT 66
6258: PPUSH
6259: LD_INT 99
6261: PPUSH
6262: LD_INT 3
6264: PPUSH
6265: LD_INT 7
6267: NEG
6268: PPUSH
6269: CALL_OW 330
// RemoveSeeing ( 66 , 99 , 3 ) ;
6273: LD_INT 66
6275: PPUSH
6276: LD_INT 99
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 331
// SetSide ( Kovalyuk , 3 ) ;
6286: LD_EXP 39
6290: PPUSH
6291: LD_INT 3
6293: PPUSH
6294: CALL_OW 235
// if Gnyevko then
6298: LD_EXP 35
6302: IFFALSE 6316
// SetSide ( Gnyevko , 3 ) ;
6304: LD_EXP 35
6308: PPUSH
6309: LD_INT 3
6311: PPUSH
6312: CALL_OW 235
// SaveForQuickRestart ;
6316: CALL_OW 22
// ComEnterUnit ( Kurin , kirov ) ;
6320: LD_EXP 38
6324: PPUSH
6325: LD_INT 71
6327: PPUSH
6328: CALL_OW 120
// wait ( 0 0$2 ) ;
6332: LD_INT 70
6334: PPUSH
6335: CALL_OW 67
// ComExit ( kirovBaseSquad [ 2 ] ) ;
6339: LD_EXP 43
6343: PUSH
6344: LD_INT 2
6346: ARRAY
6347: PPUSH
6348: CALL 53996 0 1
// AddComEnterUnit ( kirovBaseSquad [ 2 ] , HexInfo ( 98 , 98 ) ) ;
6352: LD_EXP 43
6356: PUSH
6357: LD_INT 2
6359: ARRAY
6360: PPUSH
6361: LD_INT 98
6363: PPUSH
6364: LD_INT 98
6366: PPUSH
6367: CALL_OW 428
6371: PPUSH
6372: CALL_OW 180
// wait ( 0 0$12 ) ;
6376: LD_INT 420
6378: PPUSH
6379: CALL_OW 67
// kurinDontWannaTalk := true ;
6383: LD_ADDR_EXP 5
6387: PUSH
6388: LD_INT 1
6390: ST_TO_ADDR
// end ;
6391: LD_VAR 0 1
6395: RET
// every 0 0$5 trigger kurinDontWannaTalk and FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 8 ] ] ) do var i , tmp ;
6396: LD_EXP 5
6400: PUSH
6401: LD_INT 22
6403: PUSH
6404: LD_INT 3
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 91
6413: PUSH
6414: LD_INT 71
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: PUSH
6425: EMPTY
6426: LIST
6427: LIST
6428: PPUSH
6429: CALL_OW 69
6433: AND
6434: IFFALSE 6621
6436: GO 6438
6438: DISABLE
6439: LD_INT 0
6441: PPUSH
6442: PPUSH
// begin enable ;
6443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , kirov , 14 ] ] ) ;
6444: LD_ADDR_VAR 0 2
6448: PUSH
6449: LD_INT 22
6451: PUSH
6452: LD_INT 3
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PUSH
6459: LD_INT 91
6461: PUSH
6462: LD_INT 71
6464: PUSH
6465: LD_INT 14
6467: PUSH
6468: EMPTY
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: CALL_OW 69
6481: ST_TO_ADDR
// InGameOn ;
6482: CALL_OW 8
// PlaceSeeing ( 116 , 107 , 3 , 3 ) ;
6486: LD_INT 116
6488: PPUSH
6489: LD_INT 107
6491: PPUSH
6492: LD_INT 3
6494: PPUSH
6495: LD_INT 3
6497: PPUSH
6498: CALL_OW 330
// ComExit ( Kurin ) ;
6502: LD_EXP 38
6506: PPUSH
6507: CALL 53996 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
6511: LD_EXP 38
6515: PPUSH
6516: LD_VAR 0 2
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: PPUSH
6525: CALL_OW 179
// CenterNowOnUnits ( Kurin ) ;
6529: LD_EXP 38
6533: PPUSH
6534: CALL_OW 87
// ComMoveXY ( tmp , 87 , 99 ) ;
6538: LD_VAR 0 2
6542: PPUSH
6543: LD_INT 87
6545: PPUSH
6546: LD_INT 99
6548: PPUSH
6549: CALL_OW 111
// if kirovHasTank then
6553: LD_EXP 6
6557: IFFALSE 6573
// Say ( Kurin , D1a-Kur-1a ) else
6559: LD_EXP 38
6563: PPUSH
6564: LD_STRING D1a-Kur-1a
6566: PPUSH
6567: CALL_OW 88
6571: GO 6585
// Say ( Kurin , D1a-Kur-1 ) ;
6573: LD_EXP 38
6577: PPUSH
6578: LD_STRING D1a-Kur-1
6580: PPUSH
6581: CALL_OW 88
// ComEnterUnit ( Kurin , kirov ) ;
6585: LD_EXP 38
6589: PPUSH
6590: LD_INT 71
6592: PPUSH
6593: CALL_OW 120
// RemoveSeeing ( 116 , 107 , 3 ) ;
6597: LD_INT 116
6599: PPUSH
6600: LD_INT 107
6602: PPUSH
6603: LD_INT 3
6605: PPUSH
6606: CALL_OW 331
// wait ( 0 0$3 ) ;
6610: LD_INT 105
6612: PPUSH
6613: CALL_OW 67
// InGameOff ;
6617: CALL_OW 9
// end ;
6621: PPOPN 2
6623: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) and blockNorth do var i , tmp , x , y , d ;
6624: LD_INT 22
6626: PUSH
6627: LD_INT 3
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 95
6636: PUSH
6637: LD_INT 4
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PPUSH
6648: CALL_OW 69
6652: PUSH
6653: LD_EXP 7
6657: AND
6658: IFFALSE 6997
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
6666: PPUSH
6667: PPUSH
6668: PPUSH
6669: PPUSH
// begin enable ;
6670: ENABLE
// blockNorth := false ;
6671: LD_ADDR_EXP 7
6675: PUSH
6676: LD_INT 0
6678: ST_TO_ADDR
// InGameOn ;
6679: CALL_OW 8
// DialogueOn ;
6683: CALL_OW 6
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_inarea , northBlockArea ] ] ) ;
6687: LD_ADDR_VAR 0 2
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 95
6704: PUSH
6705: LD_INT 4
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: ST_TO_ADDR
// if Kovalyuk in tmp and IsOk ( Kovalyuk ) then
6721: LD_EXP 39
6725: PUSH
6726: LD_VAR 0 2
6730: IN
6731: PUSH
6732: LD_EXP 39
6736: PPUSH
6737: CALL_OW 302
6741: AND
6742: IFFALSE 6758
// Say ( Kovalyuk , D1b-Kov-1 ) else
6744: LD_EXP 39
6748: PPUSH
6749: LD_STRING D1b-Kov-1
6751: PPUSH
6752: CALL_OW 88
6756: GO 6793
// if Burlak in tmp and IsOk ( Burlak ) then
6758: LD_EXP 34
6762: PUSH
6763: LD_VAR 0 2
6767: IN
6768: PUSH
6769: LD_EXP 34
6773: PPUSH
6774: CALL_OW 302
6778: AND
6779: IFFALSE 6793
// Say ( Burlak , D1b-Bur-1 ) ;
6781: LD_EXP 34
6785: PPUSH
6786: LD_STRING D1b-Bur-1
6788: PPUSH
6789: CALL_OW 88
// DialogueOff ;
6793: CALL_OW 7
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] ] ) ) ;
6797: LD_INT 22
6799: PUSH
6800: LD_INT 3
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 3
6809: PUSH
6810: LD_INT 21
6812: PUSH
6813: LD_INT 3
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PPUSH
6828: CALL_OW 69
6832: PPUSH
6833: CALL_OW 141
// for i in tmp do
6837: LD_ADDR_VAR 0 1
6841: PUSH
6842: LD_VAR 0 2
6846: PUSH
6847: FOR_IN
6848: IFFALSE 6976
// begin d := rand ( 2 , 3 ) ;
6850: LD_ADDR_VAR 0 5
6854: PUSH
6855: LD_INT 2
6857: PPUSH
6858: LD_INT 3
6860: PPUSH
6861: CALL_OW 12
6865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , 6 ) ;
6866: LD_ADDR_VAR 0 3
6870: PUSH
6871: LD_VAR 0 1
6875: PPUSH
6876: CALL_OW 250
6880: PPUSH
6881: LD_VAR 0 5
6885: PPUSH
6886: LD_INT 6
6888: PPUSH
6889: CALL_OW 272
6893: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , 6 ) ;
6894: LD_ADDR_VAR 0 4
6898: PUSH
6899: LD_VAR 0 1
6903: PPUSH
6904: CALL_OW 251
6908: PPUSH
6909: LD_VAR 0 5
6913: PPUSH
6914: LD_INT 6
6916: PPUSH
6917: CALL_OW 273
6921: ST_TO_ADDR
// if ValidHex ( x , y ) then
6922: LD_VAR 0 3
6926: PPUSH
6927: LD_VAR 0 4
6931: PPUSH
6932: CALL_OW 488
6936: IFFALSE 6959
// ComMoveXY ( i , x , y ) else
6938: LD_VAR 0 1
6942: PPUSH
6943: LD_VAR 0 3
6947: PPUSH
6948: LD_VAR 0 4
6952: PPUSH
6953: CALL_OW 111
6957: GO 6974
// ComMoveXY ( i , 79 , 85 ) ;
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 79
6966: PPUSH
6967: LD_INT 85
6969: PPUSH
6970: CALL_OW 111
// end ;
6974: GO 6847
6976: POP
6977: POP
// wait ( 0 0$5 ) ;
6978: LD_INT 175
6980: PPUSH
6981: CALL_OW 67
// InGameOff ;
6985: CALL_OW 9
// blockNorth := true ;
6989: LD_ADDR_EXP 7
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// end ;
6997: PPOPN 5
6999: END
// every 0 0$2 trigger UnitFilter ( beriaBaseSquad , [ f_see , 3 ] ) and not beriaVisited do var i , p , x , y , nearestGuard ;
7000: LD_EXP 44
7004: PPUSH
7005: LD_INT 101
7007: PUSH
7008: LD_INT 3
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PPUSH
7015: CALL_OW 72
7019: PUSH
7020: LD_EXP 4
7024: NOT
7025: AND
7026: IFFALSE 7428
7028: GO 7030
7030: DISABLE
7031: LD_INT 0
7033: PPUSH
7034: PPUSH
7035: PPUSH
7036: PPUSH
7037: PPUSH
// begin nearestGuard := NearestUnitToUnit ( beriaBaseSquad , Burlak ) ;
7038: LD_ADDR_VAR 0 5
7042: PUSH
7043: LD_EXP 44
7047: PPUSH
7048: LD_EXP 34
7052: PPUSH
7053: CALL_OW 74
7057: ST_TO_ADDR
// InGameOn ;
7058: CALL_OW 8
// PlaceSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 , 6 ) ;
7062: LD_VAR 0 5
7066: PPUSH
7067: CALL_OW 250
7071: PPUSH
7072: LD_VAR 0 5
7076: PPUSH
7077: CALL_OW 251
7081: PPUSH
7082: LD_INT 3
7084: PPUSH
7085: LD_INT 6
7087: PPUSH
7088: CALL_OW 330
// CenterNowOnUnits ( nearestGuard ) ;
7092: LD_VAR 0 5
7096: PPUSH
7097: CALL_OW 87
// ComTurnUnit ( nearestGuard , Burlak ) ;
7101: LD_VAR 0 5
7105: PPUSH
7106: LD_EXP 34
7110: PPUSH
7111: CALL_OW 119
// Say ( nearestGuard , D2-RSol1-1 ) ;
7115: LD_VAR 0 5
7119: PPUSH
7120: LD_STRING D2-RSol1-1
7122: PPUSH
7123: CALL_OW 88
// x := ShiftX ( GetX ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7127: LD_ADDR_VAR 0 3
7131: PUSH
7132: LD_VAR 0 5
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_VAR 0 5
7146: PPUSH
7147: CALL_OW 254
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 272
7159: ST_TO_ADDR
// y := ShiftY ( GetY ( nearestGuard ) , GetDir ( nearestGuard ) , 3 ) ;
7160: LD_ADDR_VAR 0 4
7164: PUSH
7165: LD_VAR 0 5
7169: PPUSH
7170: CALL_OW 251
7174: PPUSH
7175: LD_VAR 0 5
7179: PPUSH
7180: CALL_OW 254
7184: PPUSH
7185: LD_INT 3
7187: PPUSH
7188: CALL_OW 273
7192: ST_TO_ADDR
// if ValidHex ( x , y ) then
7193: LD_VAR 0 3
7197: PPUSH
7198: LD_VAR 0 4
7202: PPUSH
7203: CALL_OW 488
7207: IFFALSE 7239
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , x , y ) else
7209: LD_EXP 35
7213: PUSH
7214: LD_EXP 39
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PPUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 111
7237: GO 7262
// ComMoveUnit ( [ Gnyevko , Kovalyuk ] , nearestGuard ) ;
7239: LD_EXP 35
7243: PUSH
7244: LD_EXP 39
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PPUSH
7253: LD_VAR 0 5
7257: PPUSH
7258: CALL_OW 112
// ComMoveUnit ( Burlak , nearestGuard ) ;
7262: LD_EXP 34
7266: PPUSH
7267: LD_VAR 0 5
7271: PPUSH
7272: CALL_OW 112
// p := 0 ;
7276: LD_ADDR_VAR 0 2
7280: PUSH
7281: LD_INT 0
7283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7284: LD_INT 35
7286: PPUSH
7287: CALL_OW 67
// p := p + 1 ;
7291: LD_ADDR_VAR 0 2
7295: PUSH
7296: LD_VAR 0 2
7300: PUSH
7301: LD_INT 1
7303: PLUS
7304: ST_TO_ADDR
// until p > 10 or GetDistUnits ( Burlak , nearestGuard ) < 6 ;
7305: LD_VAR 0 2
7309: PUSH
7310: LD_INT 10
7312: GREATER
7313: PUSH
7314: LD_EXP 34
7318: PPUSH
7319: LD_VAR 0 5
7323: PPUSH
7324: CALL_OW 296
7328: PUSH
7329: LD_INT 6
7331: LESS
7332: OR
7333: IFFALSE 7284
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , nearestGuard ) ;
7335: LD_EXP 34
7339: PUSH
7340: LD_EXP 35
7344: PUSH
7345: LD_EXP 39
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: LIST
7354: PPUSH
7355: LD_VAR 0 5
7359: PPUSH
7360: CALL_OW 119
// Say ( Burlak , D2-Bur-1 ) ;
7364: LD_EXP 34
7368: PPUSH
7369: LD_STRING D2-Bur-1
7371: PPUSH
7372: CALL_OW 88
// Say ( nearestGuard , D2-RSol1-2 ) ;
7376: LD_VAR 0 5
7380: PPUSH
7381: LD_STRING D2-RSol1-2
7383: PPUSH
7384: CALL_OW 88
// ComHold ( nearestGuard ) ;
7388: LD_VAR 0 5
7392: PPUSH
7393: CALL_OW 140
// RemoveSeeing ( GetX ( nearestGuard ) , GetY ( nearestGuard ) , 3 ) ;
7397: LD_VAR 0 5
7401: PPUSH
7402: CALL_OW 250
7406: PPUSH
7407: LD_VAR 0 5
7411: PPUSH
7412: CALL_OW 251
7416: PPUSH
7417: LD_INT 3
7419: PPUSH
7420: CALL_OW 331
// InGameOff ;
7424: CALL_OW 9
// end ;
7428: PPOPN 5
7430: END
// every 0 0$2 trigger GetDistUnits ( Burlak , Platonov ) < 10 and See ( 3 , Platonov ) do var p ;
7431: LD_EXP 34
7435: PPUSH
7436: LD_EXP 40
7440: PPUSH
7441: CALL_OW 296
7445: PUSH
7446: LD_INT 10
7448: LESS
7449: PUSH
7450: LD_INT 3
7452: PPUSH
7453: LD_EXP 40
7457: PPUSH
7458: CALL_OW 292
7462: AND
7463: IFFALSE 7819
7465: GO 7467
7467: DISABLE
7468: LD_INT 0
7470: PPUSH
// begin InGameOn ;
7471: CALL_OW 8
// beriaVisited := true ;
7475: LD_ADDR_EXP 4
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// ComMoveUnit ( Burlak , Platonov ) ;
7483: LD_EXP 34
7487: PPUSH
7488: LD_EXP 40
7492: PPUSH
7493: CALL_OW 112
// ComMoveXY ( [ Gnyevko , Kovalyuk ] , 68 , 99 ) ;
7497: LD_EXP 35
7501: PUSH
7502: LD_EXP 39
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PPUSH
7511: LD_INT 68
7513: PPUSH
7514: LD_INT 99
7516: PPUSH
7517: CALL_OW 111
// ComTurnUnit ( Platonov , Burlak ) ;
7521: LD_EXP 40
7525: PPUSH
7526: LD_EXP 34
7530: PPUSH
7531: CALL_OW 119
// Say ( Platonov , D2-Pla-2 ) ;
7535: LD_EXP 40
7539: PPUSH
7540: LD_STRING D2-Pla-2
7542: PPUSH
7543: CALL_OW 88
// p := 0 ;
7547: LD_ADDR_VAR 0 1
7551: PUSH
7552: LD_INT 0
7554: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
7555: LD_INT 35
7557: PPUSH
7558: CALL_OW 67
// p := p + 1 ;
7562: LD_ADDR_VAR 0 1
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: LD_INT 1
7574: PLUS
7575: ST_TO_ADDR
// until GetDistUnits ( Burlak , Platonov ) < 6 or p > 8 ;
7576: LD_EXP 34
7580: PPUSH
7581: LD_EXP 40
7585: PPUSH
7586: CALL_OW 296
7590: PUSH
7591: LD_INT 6
7593: LESS
7594: PUSH
7595: LD_VAR 0 1
7599: PUSH
7600: LD_INT 8
7602: GREATER
7603: OR
7604: IFFALSE 7555
// ComTurnUnit ( [ Burlak , Gnyevko , Kovalyuk ] , Platonov ) ;
7606: LD_EXP 34
7610: PUSH
7611: LD_EXP 35
7615: PUSH
7616: LD_EXP 39
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: LIST
7625: PPUSH
7626: LD_EXP 40
7630: PPUSH
7631: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
7635: LD_EXP 34
7639: PPUSH
7640: LD_STRING D2-Bur-2
7642: PPUSH
7643: CALL_OW 88
// ChangeSideFog ( 6 , 3 ) ;
7647: LD_INT 6
7649: PPUSH
7650: LD_INT 3
7652: PPUSH
7653: CALL_OW 343
// Say ( Platonov , D2-Pla-3 ) ;
7657: LD_EXP 40
7661: PPUSH
7662: LD_STRING D2-Pla-3
7664: PPUSH
7665: CALL_OW 88
// Say ( Burlak , D2-Bur-3 ) ;
7669: LD_EXP 34
7673: PPUSH
7674: LD_STRING D2-Bur-3
7676: PPUSH
7677: CALL_OW 88
// Say ( Platonov , D2-Pla-4 ) ;
7681: LD_EXP 40
7685: PPUSH
7686: LD_STRING D2-Pla-4
7688: PPUSH
7689: CALL_OW 88
// Say ( Burlak , D2-Bur-4 ) ;
7693: LD_EXP 34
7697: PPUSH
7698: LD_STRING D2-Bur-4
7700: PPUSH
7701: CALL_OW 88
// Say ( Platonov , D2-Pla-5 ) ;
7705: LD_EXP 40
7709: PPUSH
7710: LD_STRING D2-Pla-5
7712: PPUSH
7713: CALL_OW 88
// AskPlatonov ( [ 1 , 2 , 3 , 4 ] ) ;
7717: LD_INT 1
7719: PUSH
7720: LD_INT 2
7722: PUSH
7723: LD_INT 3
7725: PUSH
7726: LD_INT 4
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: LIST
7733: LIST
7734: PPUSH
7735: CALL 7822 0 1
// Say ( Platonov , D3-Pla-1 ) ;
7739: LD_EXP 40
7743: PPUSH
7744: LD_STRING D3-Pla-1
7746: PPUSH
7747: CALL_OW 88
// Say ( Burlak , D3-Bur-1 ) ;
7751: LD_EXP 34
7755: PPUSH
7756: LD_STRING D3-Bur-1
7758: PPUSH
7759: CALL_OW 88
// InGameOff ;
7763: CALL_OW 9
// ChangeMissionObjectives ( M2a ) ;
7767: LD_STRING M2a
7769: PPUSH
7770: CALL_OW 337
// SetSide ( beria , 3 ) ;
7774: LD_INT 106
7776: PPUSH
7777: LD_INT 3
7779: PPUSH
7780: CALL_OW 235
// if not Gnyevko then
7784: LD_EXP 35
7788: NOT
7789: IFFALSE 7810
// SetSide ( UnitsInside ( beria ) [ 1 ] , 3 ) ;
7791: LD_INT 106
7793: PPUSH
7794: CALL_OW 313
7798: PUSH
7799: LD_INT 1
7801: ARRAY
7802: PPUSH
7803: LD_INT 3
7805: PPUSH
7806: CALL_OW 235
// ComFree ( Platonov ) ;
7810: LD_EXP 40
7814: PPUSH
7815: CALL_OW 139
// end ;
7819: PPOPN 1
7821: END
// function AskPlatonov ( questions ) ; var q ; begin
7822: LD_INT 0
7824: PPUSH
7825: PPUSH
// q := SelectiveQuery ( QMoreInfo , questions ) ;
7826: LD_ADDR_VAR 0 3
7830: PUSH
7831: LD_STRING QMoreInfo
7833: PPUSH
7834: LD_VAR 0 1
7838: PPUSH
7839: CALL_OW 98
7843: ST_TO_ADDR
// case q of 1 :
7844: LD_VAR 0 3
7848: PUSH
7849: LD_INT 1
7851: DOUBLE
7852: EQUAL
7853: IFTRUE 7857
7855: GO 7884
7857: POP
// begin Say ( Burlak , D2a-Bur-1 ) ;
7858: LD_EXP 34
7862: PPUSH
7863: LD_STRING D2a-Bur-1
7865: PPUSH
7866: CALL_OW 88
// Say ( Platonov , D2a-Pla-1 ) ;
7870: LD_EXP 40
7874: PPUSH
7875: LD_STRING D2a-Pla-1
7877: PPUSH
7878: CALL_OW 88
// end ; 2 :
7882: GO 7955
7884: LD_INT 2
7886: DOUBLE
7887: EQUAL
7888: IFTRUE 7892
7890: GO 7919
7892: POP
// begin Say ( Burlak , D2b-Bur-1 ) ;
7893: LD_EXP 34
7897: PPUSH
7898: LD_STRING D2b-Bur-1
7900: PPUSH
7901: CALL_OW 88
// Say ( Platonov , D2b-Pla-1 ) ;
7905: LD_EXP 40
7909: PPUSH
7910: LD_STRING D2b-Pla-1
7912: PPUSH
7913: CALL_OW 88
// end ; 3 :
7917: GO 7955
7919: LD_INT 3
7921: DOUBLE
7922: EQUAL
7923: IFTRUE 7927
7925: GO 7954
7927: POP
// begin Say ( Burlak , D2c-Bur-1 ) ;
7928: LD_EXP 34
7932: PPUSH
7933: LD_STRING D2c-Bur-1
7935: PPUSH
7936: CALL_OW 88
// Say ( Platonov , D2c-Pla-1 ) ;
7940: LD_EXP 40
7944: PPUSH
7945: LD_STRING D2c-Pla-1
7947: PPUSH
7948: CALL_OW 88
// end ; end ;
7952: GO 7955
7954: POP
// if q < 4 and questions > 2 then
7955: LD_VAR 0 3
7959: PUSH
7960: LD_INT 4
7962: LESS
7963: PUSH
7964: LD_VAR 0 1
7968: PUSH
7969: LD_INT 2
7971: GREATER
7972: AND
7973: IFFALSE 7990
// AskPlatonov ( questions diff q ) ;
7975: LD_VAR 0 1
7979: PUSH
7980: LD_VAR 0 3
7984: DIFF
7985: PPUSH
7986: CALL 7822 0 1
// end ;
7990: LD_VAR 0 2
7994: RET
// export function PlatonovFoundCrates ( x , y ) ; begin
7995: LD_INT 0
7997: PPUSH
// ComMoveXY ( Platonov , x , y ) ;
7998: LD_EXP 40
8002: PPUSH
8003: LD_VAR 0 1
8007: PPUSH
8008: LD_VAR 0 2
8012: PPUSH
8013: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8017: LD_INT 35
8019: PPUSH
8020: CALL_OW 67
// until GetDistUnitXY ( Platonov , x , y ) < 5 and GetResourceTypeXY ( x , y ) = mat_cans ;
8024: LD_EXP 40
8028: PPUSH
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_VAR 0 2
8038: PPUSH
8039: CALL_OW 297
8043: PUSH
8044: LD_INT 5
8046: LESS
8047: PUSH
8048: LD_VAR 0 1
8052: PPUSH
8053: LD_VAR 0 2
8057: PPUSH
8058: CALL_OW 283
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: AND
8067: IFFALSE 8017
// ComStop ( Platonov ) ;
8069: LD_EXP 40
8073: PPUSH
8074: CALL_OW 141
// Say ( Platonov , D4-Pla-1 ) ;
8078: LD_EXP 40
8082: PPUSH
8083: LD_STRING D4-Pla-1
8085: PPUSH
8086: CALL_OW 88
// end ;
8090: LD_VAR 0 3
8094: RET
// every 0 0$2 trigger hasLab do
8095: LD_EXP 9
8099: IFFALSE 8163
8101: GO 8103
8103: DISABLE
// begin DialogueOn ;
8104: CALL_OW 6
// Say ( Burlak , D5a-Bur-1 ) ;
8108: LD_EXP 34
8112: PPUSH
8113: LD_STRING D5a-Bur-1
8115: PPUSH
8116: CALL_OW 88
// if hasWorkshop then
8120: LD_EXP 10
8124: IFFALSE 8140
// Say ( Platonov , D5a-Pla-1 ) else
8126: LD_EXP 40
8130: PPUSH
8131: LD_STRING D5a-Pla-1
8133: PPUSH
8134: CALL_OW 88
8138: GO 8152
// Say ( Platonov , D5a-Pla-1a ) ;
8140: LD_EXP 40
8144: PPUSH
8145: LD_STRING D5a-Pla-1a
8147: PPUSH
8148: CALL_OW 88
// DialogueOff ;
8152: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
8156: LD_STRING M2b
8158: PPUSH
8159: CALL_OW 337
// end ;
8163: END
// every 0 0$2 trigger hasWorkshop do
8164: LD_EXP 10
8168: IFFALSE 8232
8170: GO 8172
8172: DISABLE
// begin DialogueOn ;
8173: CALL_OW 6
// Say ( Burlak , D5b-Bur-1 ) ;
8177: LD_EXP 34
8181: PPUSH
8182: LD_STRING D5b-Bur-1
8184: PPUSH
8185: CALL_OW 88
// if hasLab then
8189: LD_EXP 9
8193: IFFALSE 8209
// Say ( Platonov , D5b-Pla-1 ) else
8195: LD_EXP 40
8199: PPUSH
8200: LD_STRING D5b-Pla-1
8202: PPUSH
8203: CALL_OW 88
8207: GO 8221
// Say ( Platonov , D5b-Pla-1a ) ;
8209: LD_EXP 40
8213: PPUSH
8214: LD_STRING D5b-Pla-1a
8216: PPUSH
8217: CALL_OW 88
// DialogueOff ;
8221: CALL_OW 7
// ChangeMissionObjectives ( M2c ) ;
8225: LD_STRING M2c
8227: PPUSH
8228: CALL_OW 337
// end ;
8232: END
// every 0 0$4 trigger hasLab and hasWorkshop do
8233: LD_EXP 9
8237: PUSH
8238: LD_EXP 10
8242: AND
8243: IFFALSE 8337
8245: GO 8247
8247: DISABLE
// begin DialogueOn ;
8248: CALL_OW 6
// if GetTech ( tech_oileng , 3 ) = state_researched then
8252: LD_INT 47
8254: PPUSH
8255: LD_INT 3
8257: PPUSH
8258: CALL_OW 321
8262: PUSH
8263: LD_INT 2
8265: EQUAL
8266: IFFALSE 8294
// begin Say ( Burlak , D7b-Bur-1 ) ;
8268: LD_EXP 34
8272: PPUSH
8273: LD_STRING D7b-Bur-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Platonov , D7b-Pla-1 ) ;
8280: LD_EXP 40
8284: PPUSH
8285: LD_STRING D7b-Pla-1
8287: PPUSH
8288: CALL_OW 88
// end else
8292: GO 8318
// begin Say ( Burlak , D7a-Bur-1 ) ;
8294: LD_EXP 34
8298: PPUSH
8299: LD_STRING D7a-Bur-1
8301: PPUSH
8302: CALL_OW 88
// Say ( Platonov , D7a-Pla-1 ) ;
8306: LD_EXP 40
8310: PPUSH
8311: LD_STRING D7a-Pla-1
8313: PPUSH
8314: CALL_OW 88
// end ; DialogueOff ;
8318: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
8322: LD_STRING M2
8324: PPUSH
8325: CALL_OW 337
// hasToBuildTank := true ;
8329: LD_ADDR_EXP 11
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// end ;
8337: END
// every 0 0$5 + 0 0$10 trigger beriaVisited and ( not hasLab or not hasWorkshop or hasToBuildTank ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) do var tmp ;
8338: LD_EXP 4
8342: PUSH
8343: LD_EXP 9
8347: NOT
8348: PUSH
8349: LD_EXP 10
8353: NOT
8354: OR
8355: PUSH
8356: LD_EXP 11
8360: OR
8361: AND
8362: PUSH
8363: LD_INT 22
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 3
8375: PUSH
8376: LD_INT 91
8378: PUSH
8379: LD_INT 106
8381: PUSH
8382: LD_INT 32
8384: PUSH
8385: EMPTY
8386: LIST
8387: LIST
8388: LIST
8389: PUSH
8390: EMPTY
8391: LIST
8392: LIST
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PPUSH
8398: CALL_OW 69
8402: AND
8403: IFFALSE 8512
8405: GO 8407
8407: DISABLE
8408: LD_INT 0
8410: PPUSH
// begin enable ;
8411: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_dist , beria , 32 ] ] ] ) ;
8412: LD_ADDR_VAR 0 1
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: LD_INT 91
8432: PUSH
8433: LD_INT 106
8435: PUSH
8436: LD_INT 32
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PPUSH
8452: CALL_OW 69
8456: ST_TO_ADDR
// InGameOn ;
8457: CALL_OW 8
// CenterNowOnUnits ( tmp [ 1 ] ) ;
8461: LD_VAR 0 1
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: CALL_OW 87
// ComMoveXY ( tmp , 66 , 99 ) ;
8474: LD_VAR 0 1
8478: PPUSH
8479: LD_INT 66
8481: PPUSH
8482: LD_INT 99
8484: PPUSH
8485: CALL_OW 111
// Say ( Platonov , D8-Pla-1 ) ;
8489: LD_EXP 40
8493: PPUSH
8494: LD_STRING D8-Pla-1
8496: PPUSH
8497: CALL_OW 88
// wait ( 0 0$3 ) ;
8501: LD_INT 105
8503: PPUSH
8504: CALL_OW 67
// InGameOff ;
8508: CALL_OW 9
// end ;
8512: PPOPN 1
8514: END
// every 0 0$3 trigger FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) and not initiative do var tmp ;
8515: LD_INT 21
8517: PPUSH
8518: LD_INT 22
8520: PUSH
8521: LD_INT 3
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: LD_INT 23
8530: PUSH
8531: LD_INT 3
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PUSH
8538: LD_INT 2
8540: PUSH
8541: LD_INT 30
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 30
8553: PUSH
8554: LD_INT 31
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: LIST
8570: PPUSH
8571: CALL_OW 70
8575: PUSH
8576: LD_EXP 31
8580: NOT
8581: AND
8582: IFFALSE 8793
8584: GO 8586
8586: DISABLE
8587: LD_INT 0
8589: PPUSH
// begin enable ;
8590: ENABLE
// InGameOn ;
8591: CALL_OW 8
// tmp := FilterUnitsInArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: LD_INT 21
8602: PPUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 23
8615: PUSH
8616: LD_INT 3
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 30
8628: PUSH
8629: LD_INT 4
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: LD_INT 30
8638: PUSH
8639: LD_INT 31
8641: PUSH
8642: EMPTY
8643: LIST
8644: LIST
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: PPUSH
8656: CALL_OW 70
8660: ST_TO_ADDR
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
8661: LD_EXP 40
8665: PPUSH
8666: LD_VAR 0 1
8670: PUSH
8671: LD_INT 1
8673: ARRAY
8674: PPUSH
8675: CALL_OW 112
// wait ( 0 0$2 ) ;
8679: LD_INT 70
8681: PPUSH
8682: CALL_OW 67
// ComHold ( Platonov ) ;
8686: LD_EXP 40
8690: PPUSH
8691: CALL_OW 140
// Say ( Platonov , D6-Pla-1 ) ;
8695: LD_EXP 40
8699: PPUSH
8700: LD_STRING D6-Pla-1
8702: PPUSH
8703: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8707: LD_EXP 34
8711: PPUSH
8712: LD_STRING D6-Bur-1
8714: PPUSH
8715: CALL_OW 88
// RemoveUnit ( tmp [ 1 ] ) ;
8719: LD_VAR 0 1
8723: PUSH
8724: LD_INT 1
8726: ARRAY
8727: PPUSH
8728: CALL_OW 64
// if GetBType ( tmp [ 1 ] ) = b_breastwork then
8732: LD_VAR 0 1
8736: PUSH
8737: LD_INT 1
8739: ARRAY
8740: PPUSH
8741: CALL_OW 266
8745: PUSH
8746: LD_INT 31
8748: EQUAL
8749: IFFALSE 8771
// AddResourceType ( GetBase ( beria ) , mat_cans , 10 ) else
8751: LD_INT 106
8753: PPUSH
8754: CALL_OW 274
8758: PPUSH
8759: LD_INT 1
8761: PPUSH
8762: LD_INT 10
8764: PPUSH
8765: CALL_OW 276
8769: GO 8789
// AddResourceType ( GetBase ( beria ) , mat_cans , 30 ) ;
8771: LD_INT 106
8773: PPUSH
8774: CALL_OW 274
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_INT 30
8784: PPUSH
8785: CALL_OW 276
// InGameOff ;
8789: CALL_OW 9
// end ;
8793: PPOPN 1
8795: END
// every 0 0$1 trigger beriaVisited and FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) do var tmp , amount ;
8796: LD_EXP 4
8800: PUSH
8801: LD_INT 21
8803: PPUSH
8804: LD_INT 22
8806: PUSH
8807: LD_INT 3
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: LD_INT 23
8816: PUSH
8817: LD_INT 3
8819: PUSH
8820: EMPTY
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 21
8826: PUSH
8827: LD_INT 3
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 71
8843: AND
8844: IFFALSE 9101
8846: GO 8848
8848: DISABLE
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
// begin enable ;
8853: ENABLE
// tmp := FilterUnitsExceptArea ( beriaArea , [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_building ] ] ) [ 1 ] ;
8854: LD_ADDR_VAR 0 1
8858: PUSH
8859: LD_INT 21
8861: PPUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 23
8874: PUSH
8875: LD_INT 3
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 21
8884: PUSH
8885: LD_INT 3
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: PPUSH
8897: CALL_OW 71
8901: PUSH
8902: LD_INT 1
8904: ARRAY
8905: ST_TO_ADDR
// InGameOn ;
8906: CALL_OW 8
// ComMoveUnit ( Platonov , tmp ) ;
8910: LD_EXP 40
8914: PPUSH
8915: LD_VAR 0 1
8919: PPUSH
8920: CALL_OW 112
// Say ( Platonov , DPlatAngry ) ;
8924: LD_EXP 40
8928: PPUSH
8929: LD_STRING DPlatAngry
8931: PPUSH
8932: CALL_OW 88
// Say ( Burlak , D6-Bur-1 ) ;
8936: LD_EXP 34
8940: PPUSH
8941: LD_STRING D6-Bur-1
8943: PPUSH
8944: CALL_OW 88
// RemoveUnit ( tmp ) ;
8948: LD_VAR 0 1
8952: PPUSH
8953: CALL_OW 64
// InGameOff ;
8957: CALL_OW 9
// amount := 0 ;
8961: LD_ADDR_VAR 0 2
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// case GetBType ( tmp ) of b_breastwork :
8969: LD_VAR 0 1
8973: PPUSH
8974: CALL_OW 266
8978: PUSH
8979: LD_INT 31
8981: DOUBLE
8982: EQUAL
8983: IFTRUE 8987
8985: GO 8998
8987: POP
// amount := 10 ; b_lab :
8988: LD_ADDR_VAR 0 2
8992: PUSH
8993: LD_INT 10
8995: ST_TO_ADDR
8996: GO 9075
8998: LD_INT 6
9000: DOUBLE
9001: EQUAL
9002: IFTRUE 9006
9004: GO 9017
9006: POP
// amount := 20 ; b_armoury :
9007: LD_ADDR_VAR 0 2
9011: PUSH
9012: LD_INT 20
9014: ST_TO_ADDR
9015: GO 9075
9017: LD_INT 4
9019: DOUBLE
9020: EQUAL
9021: IFTRUE 9025
9023: GO 9036
9025: POP
// amount := 30 ; b_workshop :
9026: LD_ADDR_VAR 0 2
9030: PUSH
9031: LD_INT 30
9033: ST_TO_ADDR
9034: GO 9075
9036: LD_INT 2
9038: DOUBLE
9039: EQUAL
9040: IFTRUE 9044
9042: GO 9055
9044: POP
// amount := 40 ; b_oil_power :
9045: LD_ADDR_VAR 0 2
9049: PUSH
9050: LD_INT 40
9052: ST_TO_ADDR
9053: GO 9075
9055: LD_INT 26
9057: DOUBLE
9058: EQUAL
9059: IFTRUE 9063
9061: GO 9074
9063: POP
// amount := 20 ; end ;
9064: LD_ADDR_VAR 0 2
9068: PUSH
9069: LD_INT 20
9071: ST_TO_ADDR
9072: GO 9075
9074: POP
// if amount then
9075: LD_VAR 0 2
9079: IFFALSE 9101
// AddResourceType ( GetBase ( beria ) , mat_cans , amount ) ;
9081: LD_INT 106
9083: PPUSH
9084: CALL_OW 274
9088: PPUSH
9089: LD_INT 1
9091: PPUSH
9092: LD_VAR 0 2
9096: PPUSH
9097: CALL_OW 276
// end ;
9101: PPOPN 2
9103: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 112 , 155 , 8 ] ] ) < 2 and GetDistUnitXY ( Burlak , 112 , 155 ) < 8 do var Dickens ;
9104: LD_INT 22
9106: PUSH
9107: LD_INT 3
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 92
9116: PUSH
9117: LD_INT 112
9119: PUSH
9120: LD_INT 155
9122: PUSH
9123: LD_INT 8
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PPUSH
9136: CALL_OW 69
9140: PUSH
9141: LD_INT 2
9143: LESS
9144: PUSH
9145: LD_EXP 34
9149: PPUSH
9150: LD_INT 112
9152: PPUSH
9153: LD_INT 155
9155: PPUSH
9156: CALL_OW 297
9160: PUSH
9161: LD_INT 8
9163: LESS
9164: AND
9165: IFFALSE 9399
9167: GO 9169
9169: DISABLE
9170: LD_INT 0
9172: PPUSH
// begin PlaceSeeing ( 112 , 155 , 3 , - 4 ) ;
9173: LD_INT 112
9175: PPUSH
9176: LD_INT 155
9178: PPUSH
9179: LD_INT 3
9181: PPUSH
9182: LD_INT 4
9184: NEG
9185: PPUSH
9186: CALL_OW 330
// DoNotAttack ( 1 , Burlak ) ;
9190: LD_INT 1
9192: PPUSH
9193: LD_EXP 34
9197: PPUSH
9198: CALL_OW 471
// uc_side := 1 ;
9202: LD_ADDR_OWVAR 20
9206: PUSH
9207: LD_INT 1
9209: ST_TO_ADDR
// uc_nation := 1 ;
9210: LD_ADDR_OWVAR 21
9214: PUSH
9215: LD_INT 1
9217: ST_TO_ADDR
// Dickens := NewCharacter ( Dickens ) ;
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_STRING Dickens
9225: PPUSH
9226: CALL_OW 25
9230: ST_TO_ADDR
// PlaceUnitXY ( Dickens , 112 , 155 , true ) ;
9231: LD_VAR 0 1
9235: PPUSH
9236: LD_INT 112
9238: PPUSH
9239: LD_INT 155
9241: PPUSH
9242: LD_INT 1
9244: PPUSH
9245: CALL_OW 48
// wait ( 0 0$2 ) ;
9249: LD_INT 70
9251: PPUSH
9252: CALL_OW 67
// ComTurnUnit ( Dickens , Burlak ) ;
9256: LD_VAR 0 1
9260: PPUSH
9261: LD_EXP 34
9265: PPUSH
9266: CALL_OW 119
// Say ( Dickens , DUsSpawnSol ) ;
9270: LD_VAR 0 1
9274: PPUSH
9275: LD_STRING DUsSpawnSol
9277: PPUSH
9278: CALL_OW 88
// NormalAttack ( 1 , Burlak ) ;
9282: LD_INT 1
9284: PPUSH
9285: LD_EXP 34
9289: PPUSH
9290: CALL_OW 472
// RemoveSeeing ( 112 , 155 , 3 ) ;
9294: LD_INT 112
9296: PPUSH
9297: LD_INT 155
9299: PPUSH
9300: LD_INT 3
9302: PPUSH
9303: CALL_OW 331
// ComAgressiveMove ( Dickens , 77 , 152 ) ;
9307: LD_VAR 0 1
9311: PPUSH
9312: LD_INT 77
9314: PPUSH
9315: LD_INT 152
9317: PPUSH
9318: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
9322: LD_INT 35
9324: PPUSH
9325: CALL_OW 67
// until not IsOk ( Dickens ) or IsAt ( Dickens , 77 , 152 ) ;
9329: LD_VAR 0 1
9333: PPUSH
9334: CALL_OW 302
9338: NOT
9339: PUSH
9340: LD_VAR 0 1
9344: PPUSH
9345: LD_INT 77
9347: PPUSH
9348: LD_INT 152
9350: PPUSH
9351: CALL_OW 307
9355: OR
9356: IFFALSE 9322
// if not IsOk ( Dickens ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: CALL_OW 302
9367: NOT
9368: IFFALSE 9372
// exit ;
9370: GO 9399
// RemoveUnit ( Dickens ) ;
9372: LD_VAR 0 1
9376: PPUSH
9377: CALL_OW 64
// SaveCharacters ( Dickens , currentMissionPrefix & Dickens ) ;
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_EXP 3
9390: PUSH
9391: LD_STRING Dickens
9393: STR
9394: PPUSH
9395: CALL_OW 38
// end ;
9399: PPOPN 1
9401: END
// every 0 0$2 trigger GetLives ( Burlak ) < 600 do
9402: LD_EXP 34
9406: PPUSH
9407: CALL_OW 256
9411: PUSH
9412: LD_INT 600
9414: LESS
9415: IFFALSE 9432
9417: GO 9419
9419: DISABLE
// Say ( Burlak , DUsSpawnBur ) ;
9420: LD_EXP 34
9424: PPUSH
9425: LD_STRING DUsSpawnBur
9427: PPUSH
9428: CALL_OW 88
9432: END
// every 0 0$2 trigger hasTank do var i , tmp , p , un ;
9433: LD_EXP 12
9437: IFFALSE 10499
9439: GO 9441
9441: DISABLE
9442: LD_INT 0
9444: PPUSH
9445: PPUSH
9446: PPUSH
9447: PPUSH
// begin hasToBuildTank := false ;
9448: LD_ADDR_EXP 11
9452: PUSH
9453: LD_INT 0
9455: ST_TO_ADDR
// kurinDontWannaTalk := false ;
9456: LD_ADDR_EXP 5
9460: PUSH
9461: LD_INT 0
9463: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9464: LD_ADDR_VAR 0 2
9468: PUSH
9469: LD_INT 22
9471: PUSH
9472: LD_INT 3
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 21
9481: PUSH
9482: LD_INT 2
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: EMPTY
9490: LIST
9491: LIST
9492: PPUSH
9493: CALL_OW 69
9497: ST_TO_ADDR
// InGameOn ;
9498: CALL_OW 8
// CenterOnUnits ( tmp [ 1 ] ) ;
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: CALL_OW 85
// wait ( 0 0$1 ) ;
9515: LD_INT 35
9517: PPUSH
9518: CALL_OW 67
// Say ( Burlak , D9-Bur-1 ) ;
9522: LD_EXP 34
9526: PPUSH
9527: LD_STRING D9-Bur-1
9529: PPUSH
9530: CALL_OW 88
// ComMoveUnit ( Platonov , tmp [ 1 ] ) ;
9534: LD_EXP 40
9538: PPUSH
9539: LD_VAR 0 2
9543: PUSH
9544: LD_INT 1
9546: ARRAY
9547: PPUSH
9548: CALL_OW 112
// p := 0 ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_INT 0
9559: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9560: LD_INT 35
9562: PPUSH
9563: CALL_OW 67
// p := p + 1 ;
9567: LD_ADDR_VAR 0 3
9571: PUSH
9572: LD_VAR 0 3
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: ST_TO_ADDR
// until GetDistUnits ( Platonov , tmp [ 1 ] ) < 8 or p > 8 ;
9581: LD_EXP 40
9585: PPUSH
9586: LD_VAR 0 2
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: CALL_OW 296
9599: PUSH
9600: LD_INT 8
9602: LESS
9603: PUSH
9604: LD_VAR 0 3
9608: PUSH
9609: LD_INT 8
9611: GREATER
9612: OR
9613: IFFALSE 9560
// ComTurnUnit ( Platonov , tmp [ 1 ] ) ;
9615: LD_EXP 40
9619: PPUSH
9620: LD_VAR 0 2
9624: PUSH
9625: LD_INT 1
9627: ARRAY
9628: PPUSH
9629: CALL_OW 119
// Say ( Platonov , D9-Pla-1 ) ;
9633: LD_EXP 40
9637: PPUSH
9638: LD_STRING D9-Pla-1
9640: PPUSH
9641: CALL_OW 88
// ComFree ( Platonov ) ;
9645: LD_EXP 40
9649: PPUSH
9650: CALL_OW 139
// AddComMoveXY ( Platonov , 64 , 98 ) ;
9654: LD_EXP 40
9658: PPUSH
9659: LD_INT 64
9661: PPUSH
9662: LD_INT 98
9664: PPUSH
9665: CALL_OW 171
// InGameOff ;
9669: CALL_OW 9
// ChangeMissionObjectives ( M3 ) ;
9673: LD_STRING M3
9675: PPUSH
9676: CALL_OW 337
// ComMoveXY ( Kuklajs , 70 , 108 ) ;
9680: LD_EXP 41
9684: PPUSH
9685: LD_INT 70
9687: PPUSH
9688: LD_INT 108
9690: PPUSH
9691: CALL_OW 111
// AddComHold ( Kuklajs ) ;
9695: LD_EXP 41
9699: PPUSH
9700: CALL_OW 200
// wait ( 1 ) ;
9704: LD_INT 1
9706: PPUSH
9707: CALL_OW 67
// ComExit ( Belkov ) ;
9711: LD_EXP 36
9715: PPUSH
9716: CALL 53996 0 1
// AddComMoveXY ( Belkov , 113 , 104 ) ;
9720: LD_EXP 36
9724: PPUSH
9725: LD_INT 113
9727: PPUSH
9728: LD_INT 104
9730: PPUSH
9731: CALL_OW 171
// AddComTurnXY ( Belkov , 116 , 108 ) ;
9735: LD_EXP 36
9739: PPUSH
9740: LD_INT 116
9742: PPUSH
9743: LD_INT 108
9745: PPUSH
9746: CALL_OW 178
// repeat wait ( 0 0$1 ) ;
9750: LD_INT 35
9752: PPUSH
9753: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9757: LD_INT 22
9759: PUSH
9760: LD_INT 3
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PUSH
9767: LD_INT 21
9769: PUSH
9770: LD_INT 2
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 91
9779: PUSH
9780: LD_INT 71
9782: PUSH
9783: LD_INT 8
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: EMPTY
9792: LIST
9793: LIST
9794: LIST
9795: PPUSH
9796: CALL_OW 69
9800: IFFALSE 9750
// InGameOn ;
9802: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_dist , kirov , 8 ] ] ) ;
9806: LD_ADDR_VAR 0 2
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_INT 3
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: LD_INT 21
9823: PUSH
9824: LD_INT 2
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PUSH
9831: LD_INT 91
9833: PUSH
9834: LD_INT 71
9836: PUSH
9837: LD_INT 8
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: EMPTY
9846: LIST
9847: LIST
9848: LIST
9849: PPUSH
9850: CALL_OW 69
9854: ST_TO_ADDR
// if belkovTeam < 3 then
9855: LD_EXP 45
9859: PUSH
9860: LD_INT 3
9862: LESS
9863: IFFALSE 9948
// begin for i := belkovTeam to 3 do
9865: LD_ADDR_VAR 0 1
9869: PUSH
9870: DOUBLE
9871: LD_EXP 45
9875: DEC
9876: ST_TO_ADDR
9877: LD_INT 3
9879: PUSH
9880: FOR_TO
9881: IFFALSE 9946
// begin un := kirovBaseSquad [ 1 ] ;
9883: LD_ADDR_VAR 0 4
9887: PUSH
9888: LD_EXP 43
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: ST_TO_ADDR
// kirovBaseSquad := Delete ( kirovBaseSquad , 1 ) ;
9897: LD_ADDR_EXP 43
9901: PUSH
9902: LD_EXP 43
9906: PPUSH
9907: LD_INT 1
9909: PPUSH
9910: CALL_OW 3
9914: ST_TO_ADDR
// belkovTeam := Replace ( belkovTeam , belkovTeam + 1 , un ) ;
9915: LD_ADDR_EXP 45
9919: PUSH
9920: LD_EXP 45
9924: PPUSH
9925: LD_EXP 45
9929: PUSH
9930: LD_INT 1
9932: PLUS
9933: PPUSH
9934: LD_VAR 0 4
9938: PPUSH
9939: CALL_OW 1
9943: ST_TO_ADDR
// end ;
9944: GO 9880
9946: POP
9947: POP
// end ; if Kirilenkova then
9948: LD_EXP 37
9952: IFFALSE 9976
// belkovTeam := Join ( belkovTeam , Kirilenkova ) else
9954: LD_ADDR_EXP 45
9958: PUSH
9959: LD_EXP 45
9963: PPUSH
9964: LD_EXP 37
9968: PPUSH
9969: CALL 53608 0 2
9973: ST_TO_ADDR
9974: GO 10015
// belkovTeam := Join ( belkovTeam , UnitFilter ( kirovBaseSquad , [ f_class , 4 ] ) [ 1 ] ) ;
9976: LD_ADDR_EXP 45
9980: PUSH
9981: LD_EXP 45
9985: PPUSH
9986: LD_EXP 43
9990: PPUSH
9991: LD_INT 25
9993: PUSH
9994: LD_INT 4
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PPUSH
10001: CALL_OW 72
10005: PUSH
10006: LD_INT 1
10008: ARRAY
10009: PPUSH
10010: CALL 53608 0 2
10014: ST_TO_ADDR
// ComExit ( Kurin ) ;
10015: LD_EXP 38
10019: PPUSH
10020: CALL 53996 0 1
// AddComTurnUnit ( Kurin , tmp [ 1 ] ) ;
10024: LD_EXP 38
10028: PPUSH
10029: LD_VAR 0 2
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PPUSH
10038: CALL_OW 179
// wait ( 0 0$1 ) ;
10042: LD_INT 35
10044: PPUSH
10045: CALL_OW 67
// ComStop ( tmp [ 1 ] ) ;
10049: LD_VAR 0 2
10053: PUSH
10054: LD_INT 1
10056: ARRAY
10057: PPUSH
10058: CALL_OW 141
// un := IsDrivenBy ( tmp [ 1 ] ) ;
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: LD_VAR 0 2
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PPUSH
10076: CALL_OW 311
10080: ST_TO_ADDR
// ComExit ( un ) ;
10081: LD_VAR 0 4
10085: PPUSH
10086: CALL 53996 0 1
// wait ( 0 0$1 ) ;
10090: LD_INT 35
10092: PPUSH
10093: CALL_OW 67
// AddComTurnUnit ( un , Kurin ) ;
10097: LD_VAR 0 4
10101: PPUSH
10102: LD_EXP 38
10106: PPUSH
10107: CALL_OW 179
// AddComEnterUnit ( Belkov , tmp [ 1 ] ) ;
10111: LD_EXP 36
10115: PPUSH
10116: LD_VAR 0 2
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: CALL_OW 180
// wait ( 0 0$0.3 ) ;
10129: LD_INT 10
10131: PPUSH
10132: CALL_OW 67
// Say ( Kurin , D10-Kur-1 ) ;
10136: LD_EXP 38
10140: PPUSH
10141: LD_STRING D10-Kur-1
10143: PPUSH
10144: CALL_OW 88
// AddComAttackPlace ( Belkov , 122 , 112 ) ;
10148: LD_EXP 36
10152: PPUSH
10153: LD_INT 122
10155: PPUSH
10156: LD_INT 112
10158: PPUSH
10159: CALL_OW 176
// wait ( 0 0$2 ) ;
10163: LD_INT 70
10165: PPUSH
10166: CALL_OW 67
// Say ( Belkov , D10-Bel-1 ) ;
10170: LD_EXP 36
10174: PPUSH
10175: LD_STRING D10-Bel-1
10177: PPUSH
10178: CALL_OW 88
// if belkovBrother then
10182: LD_EXP 32
10186: IFFALSE 10238
// begin Say ( Burlak , D10-Bur-1 ) ;
10188: LD_EXP 34
10192: PPUSH
10193: LD_STRING D10-Bur-1
10195: PPUSH
10196: CALL_OW 88
// Say ( Belkov , D10-Bel-2 ) ;
10200: LD_EXP 36
10204: PPUSH
10205: LD_STRING D10-Bel-2
10207: PPUSH
10208: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
10212: LD_EXP 34
10216: PPUSH
10217: LD_STRING D10-Bur-2
10219: PPUSH
10220: CALL_OW 88
// Say ( Kurin , D10-Kur-2a ) ;
10224: LD_EXP 38
10228: PPUSH
10229: LD_STRING D10-Kur-2a
10231: PPUSH
10232: CALL_OW 88
// end else
10236: GO 10250
// begin Say ( Kurin , D10-Kur-2 ) end ;
10238: LD_EXP 38
10242: PPUSH
10243: LD_STRING D10-Kur-2
10245: PPUSH
10246: CALL_OW 88
// wait ( 0 0$2 ) ;
10250: LD_INT 70
10252: PPUSH
10253: CALL_OW 67
// Say ( Kurin , D10-Kur-2b ) ;
10257: LD_EXP 38
10261: PPUSH
10262: LD_STRING D10-Kur-2b
10264: PPUSH
10265: CALL_OW 88
// ComMoveXY ( un , 66 , 97 ) ;
10269: LD_VAR 0 4
10273: PPUSH
10274: LD_INT 66
10276: PPUSH
10277: LD_INT 97
10279: PPUSH
10280: CALL_OW 111
// wait ( 0 0$5 ) ;
10284: LD_INT 175
10286: PPUSH
10287: CALL_OW 67
// InGameOff ;
10291: CALL_OW 9
// RaiseSailEvent ( eventBelkovAttack ) ;
10295: LD_EXP 33
10299: PPUSH
10300: CALL_OW 427
// ChangeMissionObjectives ( M4 ) ;
10304: LD_STRING M4
10306: PPUSH
10307: CALL_OW 337
// wait ( 0 0$6 ) ;
10311: LD_INT 210
10313: PPUSH
10314: CALL_OW 67
// kurinDontWannaTalk := true ;
10318: LD_ADDR_EXP 5
10322: PUSH
10323: LD_INT 1
10325: ST_TO_ADDR
// wait ( 0 0$4 ) ;
10326: LD_INT 140
10328: PPUSH
10329: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
10333: LD_INT 35
10335: PPUSH
10336: CALL_OW 67
// until IsInUnit ( Burlak ) or GetDistUnits ( Burlak , beria ) < 12 ;
10340: LD_EXP 34
10344: PPUSH
10345: CALL_OW 310
10349: PUSH
10350: LD_EXP 34
10354: PPUSH
10355: LD_INT 106
10357: PPUSH
10358: CALL_OW 296
10362: PUSH
10363: LD_INT 12
10365: LESS
10366: OR
10367: IFFALSE 10333
// DialogueOn ;
10369: CALL_OW 6
// Say ( Platonov , D11-Pla-1 ) ;
10373: LD_EXP 40
10377: PPUSH
10378: LD_STRING D11-Pla-1
10380: PPUSH
10381: CALL_OW 88
// Say ( Burlak , D11-Bur-1 ) ;
10385: LD_EXP 34
10389: PPUSH
10390: LD_STRING D11-Bur-1
10392: PPUSH
10393: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 then
10397: LD_INT 22
10399: PUSH
10400: LD_INT 3
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 1
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PPUSH
10421: CALL_OW 69
10425: PUSH
10426: LD_INT 1
10428: GREATER
10429: IFFALSE 10443
// Say ( Burlak , D11-Bur-1a ) ;
10431: LD_EXP 34
10435: PPUSH
10436: LD_STRING D11-Bur-1a
10438: PPUSH
10439: CALL_OW 88
// DialogueOff ;
10443: CALL_OW 7
// cratesSpawnAmount := [ 160 , 150 , 140 , 120 ] [ Difficulty ] ;
10447: LD_ADDR_EXP 8
10451: PUSH
10452: LD_INT 160
10454: PUSH
10455: LD_INT 150
10457: PUSH
10458: LD_INT 140
10460: PUSH
10461: LD_INT 120
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_OWVAR 67
10474: ARRAY
10475: ST_TO_ADDR
// ChangeMissionObjectives ( M5 ) ;
10476: LD_STRING M5
10478: PPUSH
10479: CALL_OW 337
// kirovHasTank := true ;
10483: LD_ADDR_EXP 6
10487: PUSH
10488: LD_INT 1
10490: ST_TO_ADDR
// hasToBuildTank := true ;
10491: LD_ADDR_EXP 11
10495: PUSH
10496: LD_INT 1
10498: ST_TO_ADDR
// end ;
10499: PPOPN 4
10501: END
// every 0 0$2 trigger allianceAttacked do
10502: LD_EXP 13
10506: IFFALSE 10545
10508: GO 10510
10510: DISABLE
// begin DialogueOn ;
10511: CALL_OW 6
// Say ( Kurin , DArestKur ) ;
10515: LD_EXP 38
10519: PPUSH
10520: LD_STRING DArestKur
10522: PPUSH
10523: CALL_OW 88
// dwait ( 0 0$1 ) ;
10527: LD_INT 35
10529: PPUSH
10530: CALL_OW 68
// YouLost ( SelfAttack ) ;
10534: LD_STRING SelfAttack
10536: PPUSH
10537: CALL_OW 104
// DialogueOff ;
10541: CALL_OW 7
// end ;
10545: END
// every 0 0$3 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) and kirovHasTank do
10546: LD_INT 22
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 21
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: EMPTY
10567: LIST
10568: LIST
10569: PPUSH
10570: CALL_OW 69
10574: PUSH
10575: LD_INT 22
10577: PUSH
10578: LD_INT 3
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 21
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PPUSH
10599: CALL_OW 69
10603: GREATEREQUAL
10604: PUSH
10605: LD_EXP 6
10609: AND
10610: IFFALSE 10780
10612: GO 10614
10614: DISABLE
// begin hasToBuildTank := false ;
10615: LD_ADDR_EXP 11
10619: PUSH
10620: LD_INT 0
10622: ST_TO_ADDR
// blockNorth := false ;
10623: LD_ADDR_EXP 7
10627: PUSH
10628: LD_INT 0
10630: ST_TO_ADDR
// InGameOn ;
10631: CALL_OW 8
// wait ( 0 0$2 ) ;
10635: LD_INT 70
10637: PPUSH
10638: CALL_OW 67
// CenterNowOnUnits ( beria ) ;
10642: LD_INT 106
10644: PPUSH
10645: CALL_OW 87
// ComMoveXY ( Platonov , 65 , 97 ) ;
10649: LD_EXP 40
10653: PPUSH
10654: LD_INT 65
10656: PPUSH
10657: LD_INT 97
10659: PPUSH
10660: CALL_OW 111
// AddComTurnUnit ( Platonov , Burlak ) ;
10664: LD_EXP 40
10668: PPUSH
10669: LD_EXP 34
10673: PPUSH
10674: CALL_OW 179
// Say ( Burlak , D12-Bur-1 ) ;
10678: LD_EXP 34
10682: PPUSH
10683: LD_STRING D12-Bur-1
10685: PPUSH
10686: CALL_OW 88
// wait ( 0 0$1 ) ;
10690: LD_INT 35
10692: PPUSH
10693: CALL_OW 67
// Say ( Platonov , D12-Pla-1 ) ;
10697: LD_EXP 40
10701: PPUSH
10702: LD_STRING D12-Pla-1
10704: PPUSH
10705: CALL_OW 88
// Say ( Burlak , D12-Bur-2 ) ;
10709: LD_EXP 34
10713: PPUSH
10714: LD_STRING D12-Bur-2
10716: PPUSH
10717: CALL_OW 88
// Say ( Platonov , D12-Pla-2 ) ;
10721: LD_EXP 40
10725: PPUSH
10726: LD_STRING D12-Pla-2
10728: PPUSH
10729: CALL_OW 88
// Say ( Burlak , D12-Bur-3 ) ;
10733: LD_EXP 34
10737: PPUSH
10738: LD_STRING D12-Bur-3
10740: PPUSH
10741: CALL_OW 88
// Say ( Platonov , D12-Pla-3 ) ;
10745: LD_EXP 40
10749: PPUSH
10750: LD_STRING D12-Pla-3
10752: PPUSH
10753: CALL_OW 88
// hasAllTanks := true ;
10757: LD_ADDR_EXP 14
10761: PUSH
10762: LD_INT 1
10764: ST_TO_ADDR
// InGameOff ;
10765: CALL_OW 9
// ChangeMissionObjectives ( M6 ) ;
10769: LD_STRING M6
10771: PPUSH
10772: CALL_OW 337
// PrepareAmerican ;
10776: CALL 3956 0 0
// end ;
10780: END
// every 0 0$1 trigger americanTrap do var i , usSol , tmp , sol , sci , belkovTank , timer ;
10781: LD_EXP 17
10785: IFFALSE 12549
10787: GO 10789
10789: DISABLE
10790: LD_INT 0
10792: PPUSH
10793: PPUSH
10794: PPUSH
10795: PPUSH
10796: PPUSH
10797: PPUSH
10798: PPUSH
// begin PrepareAmericanTrap ;
10799: CALL 4756 0 0
// usSol := UnitFilter ( usTrapForces , [ f_sex , sex_male ] ) [ 1 ] ;
10803: LD_ADDR_VAR 0 2
10807: PUSH
10808: LD_EXP 48
10812: PPUSH
10813: LD_INT 26
10815: PUSH
10816: LD_INT 1
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: PPUSH
10823: CALL_OW 72
10827: PUSH
10828: LD_INT 1
10830: ARRAY
10831: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_type , unit_building ] ] , [ f_hastask ] ] ) ) ;
10832: LD_INT 22
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 3
10844: PUSH
10845: LD_INT 21
10847: PUSH
10848: LD_INT 3
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 60
10861: PUSH
10862: EMPTY
10863: LIST
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: LIST
10869: PPUSH
10870: CALL_OW 69
10874: PPUSH
10875: CALL_OW 141
// InGameOn ;
10879: CALL_OW 8
// CenterNowOnXY ( 69 , 22 ) ;
10883: LD_INT 69
10885: PPUSH
10886: LD_INT 22
10888: PPUSH
10889: CALL_OW 86
// wait ( 0 0$1 ) ;
10893: LD_INT 35
10895: PPUSH
10896: CALL_OW 67
// DialogueOn ;
10900: CALL_OW 6
// game_speed := 4 ;
10904: LD_ADDR_OWVAR 65
10908: PUSH
10909: LD_INT 4
10911: ST_TO_ADDR
// SayRadioNoFace ( usSol , D13-Sol1-1 ) ;
10912: LD_VAR 0 2
10916: PPUSH
10917: LD_STRING D13-Sol1-1
10919: PPUSH
10920: CALL_OW 586
// SayRadio ( Belkov , D13-Bel-1 ) ;
10924: LD_EXP 36
10928: PPUSH
10929: LD_STRING D13-Bel-1
10931: PPUSH
10932: CALL_OW 94
// SayRadio ( Kurin , D13-Kur-1 ) ;
10936: LD_EXP 38
10940: PPUSH
10941: LD_STRING D13-Kur-1
10943: PPUSH
10944: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
10948: LD_INT 10
10950: PPUSH
10951: CALL_OW 68
// SayRadio ( Belkov , D13-Bel-2 ) ;
10955: LD_EXP 36
10959: PPUSH
10960: LD_STRING D13-Bel-2
10962: PPUSH
10963: CALL_OW 94
// DialogueOff ;
10967: CALL_OW 7
// ComMoveXY ( Belkov , 76 , 20 ) ;
10971: LD_EXP 36
10975: PPUSH
10976: LD_INT 76
10978: PPUSH
10979: LD_INT 20
10981: PPUSH
10982: CALL_OW 111
// ComMoveXY ( belkovTeam , 72 , 20 ) ;
10986: LD_EXP 45
10990: PPUSH
10991: LD_INT 72
10993: PPUSH
10994: LD_INT 20
10996: PPUSH
10997: CALL_OW 111
// wait ( 0 0$2 ) ;
11001: LD_INT 70
11003: PPUSH
11004: CALL_OW 67
// for i in usTrapForces do
11008: LD_ADDR_VAR 0 1
11012: PUSH
11013: LD_EXP 48
11017: PUSH
11018: FOR_IN
11019: IFFALSE 11052
// begin PlaceUnitArea ( i , usTrapArea , false ) ;
11021: LD_VAR 0 1
11025: PPUSH
11026: LD_INT 7
11028: PPUSH
11029: LD_INT 0
11031: PPUSH
11032: CALL_OW 49
// ComTurnUnit ( i , Belkov ) ;
11036: LD_VAR 0 1
11040: PPUSH
11041: LD_EXP 36
11045: PPUSH
11046: CALL_OW 119
// end ;
11050: GO 11018
11052: POP
11053: POP
// wait ( 0 0$0.3 ) ;
11054: LD_INT 10
11056: PPUSH
11057: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 65 , 18 ) ;
11061: LD_EXP 48
11065: PPUSH
11066: LD_INT 65
11068: PPUSH
11069: LD_INT 18
11071: PPUSH
11072: CALL_OW 174
// repeat wait ( 0 0$02 ) ;
11076: LD_INT 70
11078: PPUSH
11079: CALL_OW 67
// until UnitFilter ( usTrapForces , [ f_see , 3 ] ) > 3 ;
11083: LD_EXP 48
11087: PPUSH
11088: LD_INT 101
11090: PUSH
11091: LD_INT 3
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: PPUSH
11098: CALL_OW 72
11102: PUSH
11103: LD_INT 3
11105: GREATER
11106: IFFALSE 11076
// PlaceSeeing ( 65 , 18 , 3 , - 26 ) ;
11108: LD_INT 65
11110: PPUSH
11111: LD_INT 18
11113: PPUSH
11114: LD_INT 3
11116: PPUSH
11117: LD_INT 26
11119: NEG
11120: PPUSH
11121: CALL_OW 330
// DialogueOn ;
11125: CALL_OW 6
// SayNoName ( usSol , D14-Sol1-1 ) ;
11129: LD_VAR 0 2
11133: PPUSH
11134: LD_STRING D14-Sol1-1
11136: PPUSH
11137: CALL_OW 90
// Say ( Belkov , D14-Bel-1 ) ;
11141: LD_EXP 36
11145: PPUSH
11146: LD_STRING D14-Bel-1
11148: PPUSH
11149: CALL_OW 88
// DialogueOff ;
11153: CALL_OW 7
// RemoveSeeing ( 65 , 18 , 3 ) ;
11157: LD_INT 65
11159: PPUSH
11160: LD_INT 18
11162: PPUSH
11163: LD_INT 3
11165: PPUSH
11166: CALL_OW 331
// ComMoveXY ( belkovTeam , 31 , 9 ) ;
11170: LD_EXP 45
11174: PPUSH
11175: LD_INT 31
11177: PPUSH
11178: LD_INT 9
11180: PPUSH
11181: CALL_OW 111
// AddComAgressiveMove ( usTrapForces , 50 , 16 ) ;
11185: LD_EXP 48
11189: PPUSH
11190: LD_INT 50
11192: PPUSH
11193: LD_INT 16
11195: PPUSH
11196: CALL_OW 174
// wait ( 0 0$2 ) ;
11200: LD_INT 70
11202: PPUSH
11203: CALL_OW 67
// belkovTank := IsInUnit ( Belkov ) ;
11207: LD_ADDR_VAR 0 6
11211: PUSH
11212: LD_EXP 36
11216: PPUSH
11217: CALL_OW 310
11221: ST_TO_ADDR
// if not belkovTank then
11222: LD_VAR 0 6
11226: NOT
11227: IFFALSE 11267
// belkovTank := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ;
11229: LD_ADDR_VAR 0 6
11233: PUSH
11234: LD_INT 22
11236: PUSH
11237: LD_INT 6
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 21
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 69
11262: PUSH
11263: LD_INT 1
11265: ARRAY
11266: ST_TO_ADDR
// ComMoveXY ( Belkov , 58 , 21 ) ;
11267: LD_EXP 36
11271: PPUSH
11272: LD_INT 58
11274: PPUSH
11275: LD_INT 21
11277: PPUSH
11278: CALL_OW 111
// AddComExitVehicle ( Belkov ) ;
11282: LD_EXP 36
11286: PPUSH
11287: CALL_OW 181
// AddComMoveXY ( Belkov , 53 , 18 ) ;
11291: LD_EXP 36
11295: PPUSH
11296: LD_INT 53
11298: PPUSH
11299: LD_INT 18
11301: PPUSH
11302: CALL_OW 171
// AddComMoveXY ( Belkov , 31 , 9 ) ;
11306: LD_EXP 36
11310: PPUSH
11311: LD_INT 31
11313: PPUSH
11314: LD_INT 9
11316: PPUSH
11317: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11321: LD_INT 35
11323: PPUSH
11324: CALL_OW 67
// for i in Belkov union belkovTeam union belkovTank do
11328: LD_ADDR_VAR 0 1
11332: PUSH
11333: LD_EXP 36
11337: PUSH
11338: LD_EXP 45
11342: UNION
11343: PUSH
11344: LD_VAR 0 6
11348: UNION
11349: PUSH
11350: FOR_IN
11351: IFFALSE 11382
// if GetLives ( i ) < 800 then
11353: LD_VAR 0 1
11357: PPUSH
11358: CALL_OW 256
11362: PUSH
11363: LD_INT 800
11365: LESS
11366: IFFALSE 11380
// SetLives ( i , 800 ) ;
11368: LD_VAR 0 1
11372: PPUSH
11373: LD_INT 800
11375: PPUSH
11376: CALL_OW 234
11380: GO 11350
11382: POP
11383: POP
// until GetDistUnitXY ( Belkov , 31 , 9 ) < 4 ;
11384: LD_EXP 36
11388: PPUSH
11389: LD_INT 31
11391: PPUSH
11392: LD_INT 9
11394: PPUSH
11395: CALL_OW 297
11399: PUSH
11400: LD_INT 4
11402: LESS
11403: IFFALSE 11321
// for i := 1 to Difficulty do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: DOUBLE
11411: LD_INT 1
11413: DEC
11414: ST_TO_ADDR
11415: LD_OWVAR 67
11419: PUSH
11420: FOR_TO
11421: IFFALSE 11463
// if i <= belkovTeam then
11423: LD_VAR 0 1
11427: PUSH
11428: LD_EXP 45
11432: LESSEQUAL
11433: IFFALSE 11461
// SetLives ( belkovTeam [ i ] , rand ( 600 , 800 ) ) ;
11435: LD_EXP 45
11439: PUSH
11440: LD_VAR 0 1
11444: ARRAY
11445: PPUSH
11446: LD_INT 600
11448: PPUSH
11449: LD_INT 800
11451: PPUSH
11452: CALL_OW 12
11456: PPUSH
11457: CALL_OW 234
11461: GO 11420
11463: POP
11464: POP
// SetLives ( Belkov , 820 ) ;
11465: LD_EXP 36
11469: PPUSH
11470: LD_INT 820
11472: PPUSH
11473: CALL_OW 234
// InGameOff ;
11477: CALL_OW 9
// DialogueOn ;
11481: CALL_OW 6
// SayRadio ( Belkov , D14-Bel-1a ) ;
11485: LD_EXP 36
11489: PPUSH
11490: LD_STRING D14-Bel-1a
11492: PPUSH
11493: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-1 ) ;
11497: LD_EXP 38
11501: PPUSH
11502: LD_STRING D14-Kur-1
11504: PPUSH
11505: CALL_OW 94
// SayRadio ( Belkov , D14-Bel-2 ) ;
11509: LD_EXP 36
11513: PPUSH
11514: LD_STRING D14-Bel-2
11516: PPUSH
11517: CALL_OW 94
// SayRadio ( Kurin , D14-Kur-2 ) ;
11521: LD_EXP 38
11525: PPUSH
11526: LD_STRING D14-Kur-2
11528: PPUSH
11529: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
11533: LD_EXP 34
11537: PPUSH
11538: CALL_OW 87
// Say ( Burlak , D14a-Bur-1 ) ;
11542: LD_EXP 34
11546: PPUSH
11547: LD_STRING D14a-Bur-1
11549: PPUSH
11550: CALL_OW 88
// Say ( Platonov , D14a-Pla-1 ) ;
11554: LD_EXP 40
11558: PPUSH
11559: LD_STRING D14a-Pla-1
11561: PPUSH
11562: CALL_OW 88
// Say ( Burlak , D14a-Bur-2 ) ;
11566: LD_EXP 34
11570: PPUSH
11571: LD_STRING D14a-Bur-2
11573: PPUSH
11574: CALL_OW 88
// Say ( Platonov , D14a-Pla-2 ) ;
11578: LD_EXP 40
11582: PPUSH
11583: LD_STRING D14a-Pla-2
11585: PPUSH
11586: CALL_OW 88
// Say ( Burlak , D14a-Bur-3 ) ;
11590: LD_EXP 34
11594: PPUSH
11595: LD_STRING D14a-Bur-3
11597: PPUSH
11598: CALL_OW 88
// Say ( Platonov , D14a-Pla-3 ) ;
11602: LD_EXP 40
11606: PPUSH
11607: LD_STRING D14a-Pla-3
11609: PPUSH
11610: CALL_OW 88
// Say ( Burlak , D14a-Bur-4 ) ;
11614: LD_EXP 34
11618: PPUSH
11619: LD_STRING D14a-Bur-4
11621: PPUSH
11622: CALL_OW 88
// Say ( Platonov , D14a-Pla-4 ) ;
11626: LD_EXP 40
11630: PPUSH
11631: LD_STRING D14a-Pla-4
11633: PPUSH
11634: CALL_OW 88
// DialogueOff ;
11638: CALL_OW 7
// belkovTrapped := true ;
11642: LD_ADDR_EXP 18
11646: PUSH
11647: LD_INT 1
11649: ST_TO_ADDR
// ComMoveXY ( usTrapForces , 68 , 16 ) ;
11650: LD_EXP 48
11654: PPUSH
11655: LD_INT 68
11657: PPUSH
11658: LD_INT 16
11660: PPUSH
11661: CALL_OW 111
// if belkovTank then
11665: LD_VAR 0 6
11669: IFFALSE 11708
// begin ComEnterUnit ( usTrapForces [ 1 ] , belkovTank ) ;
11671: LD_EXP 48
11675: PUSH
11676: LD_INT 1
11678: ARRAY
11679: PPUSH
11680: LD_VAR 0 6
11684: PPUSH
11685: CALL_OW 120
// AddComMoveXY ( usTrapForces [ 1 ] , 69 , 20 ) ;
11689: LD_EXP 48
11693: PUSH
11694: LD_INT 1
11696: ARRAY
11697: PPUSH
11698: LD_INT 69
11700: PPUSH
11701: LD_INT 20
11703: PPUSH
11704: CALL_OW 171
// end ; ComMoveXY ( Belkov , 40 , 17 ) ;
11708: LD_EXP 36
11712: PPUSH
11713: LD_INT 40
11715: PPUSH
11716: LD_INT 17
11718: PPUSH
11719: CALL_OW 111
// AddComHold ( Belkov ) ;
11723: LD_EXP 36
11727: PPUSH
11728: CALL_OW 200
// tmp := [ [ 44 , 18 ] , [ 42 , 16 ] , [ 40 , 15 ] , [ 44 , 20 ] , [ 42 , 20 ] , [ 42 , 12 ] , [ 42 , 8 ] ] ;
11732: LD_ADDR_VAR 0 3
11736: PUSH
11737: LD_INT 44
11739: PUSH
11740: LD_INT 18
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 42
11749: PUSH
11750: LD_INT 16
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 40
11759: PUSH
11760: LD_INT 15
11762: PUSH
11763: EMPTY
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 44
11769: PUSH
11770: LD_INT 20
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: LD_INT 42
11779: PUSH
11780: LD_INT 20
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 42
11789: PUSH
11790: LD_INT 12
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 42
11799: PUSH
11800: LD_INT 8
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: ST_TO_ADDR
// for i in UnitFilter ( belkovTeam , [ f_class , 1 ] ) do
11816: LD_ADDR_VAR 0 1
11820: PUSH
11821: LD_EXP 45
11825: PPUSH
11826: LD_INT 25
11828: PUSH
11829: LD_INT 1
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PPUSH
11836: CALL_OW 72
11840: PUSH
11841: FOR_IN
11842: IFFALSE 11908
// begin ComMoveXY ( i , tmp [ 1 ] [ 1 ] , tmp [ 1 ] [ 2 ] ) ;
11844: LD_VAR 0 1
11848: PPUSH
11849: LD_VAR 0 3
11853: PUSH
11854: LD_INT 1
11856: ARRAY
11857: PUSH
11858: LD_INT 1
11860: ARRAY
11861: PPUSH
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PUSH
11871: LD_INT 2
11873: ARRAY
11874: PPUSH
11875: CALL_OW 111
// tmp := Delete ( tmp , 1 ) ;
11879: LD_ADDR_VAR 0 3
11883: PUSH
11884: LD_VAR 0 3
11888: PPUSH
11889: LD_INT 1
11891: PPUSH
11892: CALL_OW 3
11896: ST_TO_ADDR
// AddComCrawl ( i ) ;
11897: LD_VAR 0 1
11901: PPUSH
11902: CALL_OW 197
// end ;
11906: GO 11841
11908: POP
11909: POP
// if UnitFilter ( belkovTeam , [ f_class , 4 ] ) then
11910: LD_EXP 45
11914: PPUSH
11915: LD_INT 25
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 72
11929: IFFALSE 11961
// ComMoveXY ( UnitFilter ( belkovTeam , [ f_class , 4 ] ) , 38 , 18 ) ;
11931: LD_EXP 45
11935: PPUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 4
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PPUSH
11946: CALL_OW 72
11950: PPUSH
11951: LD_INT 38
11953: PPUSH
11954: LD_INT 18
11956: PPUSH
11957: CALL_OW 111
// timer := [ 4 4$30 , 4 4$00 , 3 3$10 , 2 2$30 ] [ Difficulty ] ;
11961: LD_ADDR_VAR 0 7
11965: PUSH
11966: LD_INT 9450
11968: PUSH
11969: LD_INT 8400
11971: PUSH
11972: LD_INT 6650
11974: PUSH
11975: LD_INT 5250
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: PUSH
11984: LD_OWVAR 67
11988: ARRAY
11989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11990: LD_INT 35
11992: PPUSH
11993: CALL_OW 67
// timer := timer - 0 0$1 ;
11997: LD_ADDR_VAR 0 7
12001: PUSH
12002: LD_VAR 0 7
12006: PUSH
12007: LD_INT 35
12009: MINUS
12010: ST_TO_ADDR
// if FilterUnitsInArea ( hillTrackArea , [ f_side , 3 ] ) then
12011: LD_INT 19
12013: PPUSH
12014: LD_INT 22
12016: PUSH
12017: LD_INT 3
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PPUSH
12024: CALL_OW 70
12028: IFFALSE 12038
// timer := 0 0$0 ;
12030: LD_ADDR_VAR 0 7
12034: PUSH
12035: LD_INT 0
12037: ST_TO_ADDR
// until timer <= 0 ;
12038: LD_VAR 0 7
12042: PUSH
12043: LD_INT 0
12045: LESSEQUAL
12046: IFFALSE 11990
// if not UnitFilter ( usTrapForces , [ f_ok ] ) then
12048: LD_EXP 48
12052: PPUSH
12053: LD_INT 50
12055: PUSH
12056: EMPTY
12057: LIST
12058: PPUSH
12059: CALL_OW 72
12063: NOT
12064: IFFALSE 12068
// exit ;
12066: GO 12549
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
12068: LD_ADDR_VAR 0 4
12072: PUSH
12073: LD_EXP 48
12077: PPUSH
12078: LD_INT 25
12080: PUSH
12081: LD_INT 1
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: LD_INT 54
12093: PUSH
12094: EMPTY
12095: LIST
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PPUSH
12105: CALL_OW 72
12109: ST_TO_ADDR
// sci := UnitFilter ( usTrapForces , [ [ f_class , 4 ] , [ f_not , [ f_inside ] ] ] ) ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_EXP 48
12119: PPUSH
12120: LD_INT 25
12122: PUSH
12123: LD_INT 4
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 3
12132: PUSH
12133: LD_INT 54
12135: PUSH
12136: EMPTY
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PPUSH
12147: CALL_OW 72
12151: ST_TO_ADDR
// for i in sol do
12152: LD_ADDR_VAR 0 1
12156: PUSH
12157: LD_VAR 0 4
12161: PUSH
12162: FOR_IN
12163: IFFALSE 12179
// SetTag ( i , 0 ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 0
12172: PPUSH
12173: CALL_OW 109
12177: GO 12162
12179: POP
12180: POP
// ComMoveXY ( sci , 60 , 8 ) ;
12181: LD_VAR 0 5
12185: PPUSH
12186: LD_INT 60
12188: PPUSH
12189: LD_INT 8
12191: PPUSH
12192: CALL_OW 111
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) then
12196: LD_INT 22
12198: PUSH
12199: LD_INT 1
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 21
12208: PUSH
12209: LD_INT 2
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PPUSH
12220: CALL_OW 69
12224: IFFALSE 12265
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 53 , 24 ) ;
12226: LD_INT 22
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: PUSH
12236: LD_INT 21
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: PPUSH
12250: CALL_OW 69
12254: PPUSH
12255: LD_INT 53
12257: PPUSH
12258: LD_INT 24
12260: PPUSH
12261: CALL_OW 114
// repeat wait ( 0 0$0.5 ) ;
12265: LD_INT 18
12267: PPUSH
12268: CALL_OW 67
// sol := UnitFilter ( usTrapForces , [ [ f_class , 1 ] , [ f_ok ] , [ f_not , [ f_inside ] ] ] ) ;
12272: LD_ADDR_VAR 0 4
12276: PUSH
12277: LD_EXP 48
12281: PPUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 50
12294: PUSH
12295: EMPTY
12296: LIST
12297: PUSH
12298: LD_INT 3
12300: PUSH
12301: LD_INT 54
12303: PUSH
12304: EMPTY
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 72
12320: ST_TO_ADDR
// if FilterByTag ( sol , 0 ) = sol then
12321: LD_VAR 0 4
12325: PPUSH
12326: LD_INT 0
12328: PPUSH
12329: CALL 51182 0 2
12333: PUSH
12334: LD_VAR 0 4
12338: EQUAL
12339: IFFALSE 12378
// begin wait ( 0 0$3 ) ;
12341: LD_INT 105
12343: PPUSH
12344: CALL_OW 67
// ComAgressiveMove ( sol , 41 , 18 ) ;
12348: LD_VAR 0 4
12352: PPUSH
12353: LD_INT 41
12355: PPUSH
12356: LD_INT 18
12358: PPUSH
12359: CALL_OW 114
// ComMoveXY ( sci , 60 , 8 ) ;
12363: LD_VAR 0 5
12367: PPUSH
12368: LD_INT 60
12370: PPUSH
12371: LD_INT 8
12373: PPUSH
12374: CALL_OW 111
// end ; for i in sol do
12378: LD_ADDR_VAR 0 1
12382: PUSH
12383: LD_VAR 0 4
12387: PUSH
12388: FOR_IN
12389: IFFALSE 12464
// if GetLives ( i ) < 800 then
12391: LD_VAR 0 1
12395: PPUSH
12396: CALL_OW 256
12400: PUSH
12401: LD_INT 800
12403: LESS
12404: IFFALSE 12435
// begin SetTag ( i , 1 ) ;
12406: LD_VAR 0 1
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 109
// ComMoveXY ( i , 60 , 8 ) ;
12418: LD_VAR 0 1
12422: PPUSH
12423: LD_INT 60
12425: PPUSH
12426: LD_INT 8
12428: PPUSH
12429: CALL_OW 111
// end else
12433: GO 12462
// if GetLives ( i ) = 1000 then
12435: LD_VAR 0 1
12439: PPUSH
12440: CALL_OW 256
12444: PUSH
12445: LD_INT 1000
12447: EQUAL
12448: IFFALSE 12462
// SetTag ( i , 0 ) ;
12450: LD_VAR 0 1
12454: PPUSH
12455: LD_INT 0
12457: PPUSH
12458: CALL_OW 109
12462: GO 12388
12464: POP
12465: POP
// until belkovDied or not sol ;
12466: LD_EXP 19
12470: PUSH
12471: LD_VAR 0 4
12475: NOT
12476: OR
12477: IFFALSE 12265
// if not sol then
12479: LD_VAR 0 4
12483: NOT
12484: IFFALSE 12488
// exit ;
12486: GO 12549
// ComMoveXY ( sol ^ sci , 56 , 25 ) ;
12488: LD_VAR 0 4
12492: PUSH
12493: LD_VAR 0 5
12497: ADD
12498: PPUSH
12499: LD_INT 56
12501: PPUSH
12502: LD_INT 25
12504: PPUSH
12505: CALL_OW 111
// wait ( 0 0$30 ) ;
12509: LD_INT 1050
12511: PPUSH
12512: CALL_OW 67
// AddComAgressiveMove ( usTrapForces , 66 , 96 ) ;
12516: LD_EXP 48
12520: PPUSH
12521: LD_INT 66
12523: PPUSH
12524: LD_INT 96
12526: PPUSH
12527: CALL_OW 174
// ComMoveUnit ( sci , sol [ 1 ] ) ;
12531: LD_VAR 0 5
12535: PPUSH
12536: LD_VAR 0 4
12540: PUSH
12541: LD_INT 1
12543: ARRAY
12544: PPUSH
12545: CALL_OW 112
// end ;
12549: PPOPN 7
12551: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( westWeakPointArea , [ f_side , 3 ] ) do
12552: LD_EXP 18
12556: PUSH
12557: LD_EXP 19
12561: NOT
12562: AND
12563: PUSH
12564: LD_INT 9
12566: PPUSH
12567: LD_INT 22
12569: PUSH
12570: LD_INT 3
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: PPUSH
12577: CALL_OW 70
12581: AND
12582: IFFALSE 12902
12584: GO 12586
12586: DISABLE
// begin case Query ( QAttackAm ) of 1 :
12587: LD_STRING QAttackAm
12589: PPUSH
12590: CALL_OW 97
12594: PUSH
12595: LD_INT 1
12597: DOUBLE
12598: EQUAL
12599: IFTRUE 12603
12601: GO 12670
12603: POP
// begin initiative := true ;
12604: LD_ADDR_EXP 31
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// DialogueOn ;
12612: CALL_OW 6
// Say ( Burlak , D17-Bur-1 ) ;
12616: LD_EXP 34
12620: PPUSH
12621: LD_STRING D17-Bur-1
12623: PPUSH
12624: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-1 ) ;
12628: LD_EXP 40
12632: PPUSH
12633: LD_STRING D17-Pla-1
12635: PPUSH
12636: CALL_OW 94
// Say ( Burlak , D17-Bur-2 ) ;
12640: LD_EXP 34
12644: PPUSH
12645: LD_STRING D17-Bur-2
12647: PPUSH
12648: CALL_OW 88
// SayRadio ( Platonov , D17-Pla-2 ) ;
12652: LD_EXP 40
12656: PPUSH
12657: LD_STRING D17-Pla-2
12659: PPUSH
12660: CALL_OW 94
// DialogueOff ;
12664: CALL_OW 7
// end ; 2 :
12668: GO 12832
12670: LD_INT 2
12672: DOUBLE
12673: EQUAL
12674: IFTRUE 12678
12676: GO 12770
12678: POP
// begin initiative := true ;
12679: LD_ADDR_EXP 31
12683: PUSH
12684: LD_INT 1
12686: ST_TO_ADDR
// DialogueOn ;
12687: CALL_OW 6
// Say ( Burlak , D18-Bur-1 ) ;
12691: LD_EXP 34
12695: PPUSH
12696: LD_STRING D18-Bur-1
12698: PPUSH
12699: CALL_OW 88
// SayRadio ( Platonov , D18-Pla-1 ) ;
12703: LD_EXP 40
12707: PPUSH
12708: LD_STRING D18-Pla-1
12710: PPUSH
12711: CALL_OW 94
// Say ( Burlak , D18-Bur-2 ) ;
12715: LD_EXP 34
12719: PPUSH
12720: LD_STRING D18-Bur-2
12722: PPUSH
12723: CALL_OW 88
// if not reinforcementsGained then
12727: LD_EXP 25
12731: NOT
12732: IFFALSE 12752
// begin SayRadio ( Platonov , D18-Pla-2 ) ;
12734: LD_EXP 40
12738: PPUSH
12739: LD_STRING D18-Pla-2
12741: PPUSH
12742: CALL_OW 94
// SendReinforcements ;
12746: CALL 3297 0 0
// end else
12750: GO 12764
// SayRadio ( Platonov , D22-Pla-1b ) ;
12752: LD_EXP 40
12756: PPUSH
12757: LD_STRING D22-Pla-1b
12759: PPUSH
12760: CALL_OW 94
// DialogueOff ;
12764: CALL_OW 7
// end ; 3 :
12768: GO 12832
12770: LD_INT 3
12772: DOUBLE
12773: EQUAL
12774: IFTRUE 12778
12776: GO 12831
12778: POP
// begin if IsOk ( Gnyevko ) then
12779: LD_EXP 35
12783: PPUSH
12784: CALL_OW 302
12788: IFFALSE 12804
// Say ( Gnyevko , D19A-Gny-1 ) else
12790: LD_EXP 35
12794: PPUSH
12795: LD_STRING D19A-Gny-1
12797: PPUSH
12798: CALL_OW 88
12802: GO 12827
// if IsOk ( Kovalyuk ) then
12804: LD_EXP 39
12808: PPUSH
12809: CALL_OW 302
12813: IFFALSE 12827
// Say ( Kovalyuk , D19A-Kov-1 ) ;
12815: LD_EXP 39
12819: PPUSH
12820: LD_STRING D19A-Kov-1
12822: PPUSH
12823: CALL_OW 88
// exit ;
12827: GO 12902
// end ; end ;
12829: GO 12832
12831: POP
// if IsOk ( Gnyevko ) then
12832: LD_EXP 35
12836: PPUSH
12837: CALL_OW 302
12841: IFFALSE 12867
// begin Say ( Gnyevko , D19-Gny-1 ) ;
12843: LD_EXP 35
12847: PPUSH
12848: LD_STRING D19-Gny-1
12850: PPUSH
12851: CALL_OW 88
// Say ( Burlak , D19-Bur-1 ) ;
12855: LD_EXP 34
12859: PPUSH
12860: LD_STRING D19-Bur-1
12862: PPUSH
12863: CALL_OW 88
// end ; if IsOk ( Kovalyuk ) then
12867: LD_EXP 39
12871: PPUSH
12872: CALL_OW 302
12876: IFFALSE 12902
// begin Say ( Kovalyuk , D19-Kov-1 ) ;
12878: LD_EXP 39
12882: PPUSH
12883: LD_STRING D19-Kov-1
12885: PPUSH
12886: CALL_OW 88
// Say ( Burlak , D19-Bur-2 ) ;
12890: LD_EXP 34
12894: PPUSH
12895: LD_STRING D19-Bur-2
12897: PPUSH
12898: CALL_OW 88
// end ; end ;
12902: END
// every 0 0$2 trigger belkovTrapped and not belkovDied and FilterUnitsInArea ( belkovTrapArea , [ f_side , 3 ] ) do
12903: LD_EXP 18
12907: PUSH
12908: LD_EXP 19
12912: NOT
12913: AND
12914: PUSH
12915: LD_INT 16
12917: PPUSH
12918: LD_INT 22
12920: PUSH
12921: LD_INT 3
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PPUSH
12928: CALL_OW 70
12932: AND
12933: IFFALSE 13161
12935: GO 12937
12937: DISABLE
// begin case Query ( QAttackBw ) of 1 :
12938: LD_STRING QAttackBw
12940: PPUSH
12941: CALL_OW 97
12945: PUSH
12946: LD_INT 1
12948: DOUBLE
12949: EQUAL
12950: IFTRUE 12954
12952: GO 12997
12954: POP
// begin initiative := true ;
12955: LD_ADDR_EXP 31
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// DialogueOn ;
12963: CALL_OW 6
// Say ( Burlak , D21-Bur-1 ) ;
12967: LD_EXP 34
12971: PPUSH
12972: LD_STRING D21-Bur-1
12974: PPUSH
12975: CALL_OW 88
// SayRadio ( Platonov , D21-Pla-1 ) ;
12979: LD_EXP 40
12983: PPUSH
12984: LD_STRING D21-Pla-1
12986: PPUSH
12987: CALL_OW 94
// DialogueOff ;
12991: CALL_OW 7
// end ; 2 :
12995: GO 13112
12997: LD_INT 2
12999: DOUBLE
13000: EQUAL
13001: IFTRUE 13005
13003: GO 13100
13005: POP
// begin initiative := true ;
13006: LD_ADDR_EXP 31
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// DialogueOn ;
13014: CALL_OW 6
// Say ( Burlak , D22-Bur-1 ) ;
13018: LD_EXP 34
13022: PPUSH
13023: LD_STRING D22-Bur-1
13025: PPUSH
13026: CALL_OW 88
// if not reinforcementsGained and westOutpostDestroyed then
13030: LD_EXP 25
13034: NOT
13035: PUSH
13036: LD_EXP 22
13040: AND
13041: IFFALSE 13061
// begin SayRadio ( Platonov , D22-Pla-1 ) ;
13043: LD_EXP 40
13047: PPUSH
13048: LD_STRING D22-Pla-1
13050: PPUSH
13051: CALL_OW 94
// SendReinforcements ;
13055: CALL 3297 0 0
// end else
13059: GO 13094
// if not westOutpostDestroyed then
13061: LD_EXP 22
13065: NOT
13066: IFFALSE 13082
// SayRadio ( Platonov , D22-Pla-1a ) else
13068: LD_EXP 40
13072: PPUSH
13073: LD_STRING D22-Pla-1a
13075: PPUSH
13076: CALL_OW 94
13080: GO 13094
// SayRadio ( Platonov , D22-Pla-1b ) ;
13082: LD_EXP 40
13086: PPUSH
13087: LD_STRING D22-Pla-1b
13089: PPUSH
13090: CALL_OW 94
// DialogueOff ;
13094: CALL_OW 7
// end ; 3 :
13098: GO 13112
13100: LD_INT 3
13102: DOUBLE
13103: EQUAL
13104: IFTRUE 13108
13106: GO 13111
13108: POP
// begin end ; end ;
13109: GO 13112
13111: POP
// ChangeMissionObjectives ( M9 ) ;
13112: LD_STRING M9
13114: PPUSH
13115: CALL_OW 337
// wait ( 0 0$1 ) ;
13119: LD_INT 35
13121: PPUSH
13122: CALL_OW 67
// if IsOk ( Gnyevko ) then
13126: LD_EXP 35
13130: PPUSH
13131: CALL_OW 302
13135: IFFALSE 13161
// begin Say ( Gnyevko , D23-Gny-1 ) ;
13137: LD_EXP 35
13141: PPUSH
13142: LD_STRING D23-Gny-1
13144: PPUSH
13145: CALL_OW 88
// Say ( Burlak , D23-Bur-1 ) ;
13149: LD_EXP 34
13153: PPUSH
13154: LD_STRING D23-Bur-1
13156: PPUSH
13157: CALL_OW 88
// end ; end ;
13161: END
// every 0 0$1 trigger belkovTrapped and belkovDied and not belkovSaved and UnitFilter ( belkovTeam , [ f_dist , Burlak , 8 ] ) do var i ;
13162: LD_EXP 18
13166: PUSH
13167: LD_EXP 19
13171: AND
13172: PUSH
13173: LD_EXP 28
13177: NOT
13178: AND
13179: PUSH
13180: LD_EXP 45
13184: PPUSH
13185: LD_INT 91
13187: PUSH
13188: LD_EXP 34
13192: PUSH
13193: LD_INT 8
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: LIST
13200: PPUSH
13201: CALL_OW 72
13205: AND
13206: IFFALSE 13250
13208: GO 13210
13210: DISABLE
13211: LD_INT 0
13213: PPUSH
// begin for i in belkovTeam do
13214: LD_ADDR_VAR 0 1
13218: PUSH
13219: LD_EXP 45
13223: PUSH
13224: FOR_IN
13225: IFFALSE 13241
// SetSide ( i , 3 ) ;
13227: LD_VAR 0 1
13231: PPUSH
13232: LD_INT 3
13234: PPUSH
13235: CALL_OW 235
13239: GO 13224
13241: POP
13242: POP
// ChangeMissionObjectives ( M9a ) ;
13243: LD_STRING M9a
13245: PPUSH
13246: CALL_OW 337
// end ;
13250: PPOPN 1
13252: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Belkov ) < 6 and belkovTrapped and IsOk ( Belkov ) and not InBattle ( 3 ) do var i , p ;
13253: LD_EXP 34
13257: PPUSH
13258: LD_EXP 36
13262: PPUSH
13263: CALL_OW 296
13267: PUSH
13268: LD_INT 6
13270: LESS
13271: PUSH
13272: LD_EXP 18
13276: AND
13277: PUSH
13278: LD_EXP 36
13282: PPUSH
13283: CALL_OW 302
13287: AND
13288: PUSH
13289: LD_INT 3
13291: PPUSH
13292: CALL_OW 463
13296: NOT
13297: AND
13298: IFFALSE 13613
13300: GO 13302
13302: DISABLE
13303: LD_INT 0
13305: PPUSH
13306: PPUSH
// begin InGameOn ;
13307: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
13311: LD_EXP 34
13315: PPUSH
13316: CALL_OW 87
// ComMoveXY ( Burlak , 37 , 17 ) ;
13320: LD_EXP 34
13324: PPUSH
13325: LD_INT 37
13327: PPUSH
13328: LD_INT 17
13330: PPUSH
13331: CALL_OW 111
// AddComMoveUnit ( Burlak , Belkov ) ;
13335: LD_EXP 34
13339: PPUSH
13340: LD_EXP 36
13344: PPUSH
13345: CALL_OW 172
// ComTurnUnit ( Belkov , Burlak ) ;
13349: LD_EXP 36
13353: PPUSH
13354: LD_EXP 34
13358: PPUSH
13359: CALL_OW 119
// p := 0 ;
13363: LD_ADDR_VAR 0 2
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13371: LD_INT 35
13373: PPUSH
13374: CALL_OW 67
// p := p + 1 ;
13378: LD_ADDR_VAR 0 2
13382: PUSH
13383: LD_VAR 0 2
13387: PUSH
13388: LD_INT 1
13390: PLUS
13391: ST_TO_ADDR
// until GetDistUnits ( Burlak , Belkov ) < 4 or p > 6 ;
13392: LD_EXP 34
13396: PPUSH
13397: LD_EXP 36
13401: PPUSH
13402: CALL_OW 296
13406: PUSH
13407: LD_INT 4
13409: LESS
13410: PUSH
13411: LD_VAR 0 2
13415: PUSH
13416: LD_INT 6
13418: GREATER
13419: OR
13420: IFFALSE 13371
// ComTurnUnit ( Burlak , Belkov ) ;
13422: LD_EXP 34
13426: PPUSH
13427: LD_EXP 36
13431: PPUSH
13432: CALL_OW 119
// DialogueOn ;
13436: CALL_OW 6
// Say ( Belkov , D24-Bel-1 ) ;
13440: LD_EXP 36
13444: PPUSH
13445: LD_STRING D24-Bel-1
13447: PPUSH
13448: CALL_OW 88
// Say ( Burlak , D24-Bur-1 ) ;
13452: LD_EXP 34
13456: PPUSH
13457: LD_STRING D24-Bur-1
13459: PPUSH
13460: CALL_OW 88
// if belkovBrother then
13464: LD_EXP 32
13468: IFFALSE 13482
// Say ( Burlak , D24-Bur-1a ) ;
13470: LD_EXP 34
13474: PPUSH
13475: LD_STRING D24-Bur-1a
13477: PPUSH
13478: CALL_OW 88
// Say ( Belkov , D24-Bel-2 ) ;
13482: LD_EXP 36
13486: PPUSH
13487: LD_STRING D24-Bel-2
13489: PPUSH
13490: CALL_OW 88
// Say ( Burlak , D24-Bur-2 ) ;
13494: LD_EXP 34
13498: PPUSH
13499: LD_STRING D24-Bur-2
13501: PPUSH
13502: CALL_OW 88
// if vehCaptured then
13506: LD_EXP 16
13510: IFFALSE 13524
// Say ( Burlak , D24-Bur-2a ) ;
13512: LD_EXP 34
13516: PPUSH
13517: LD_STRING D24-Bur-2a
13519: PPUSH
13520: CALL_OW 88
// SayRadio ( Platonov , D24-Pla-2 ) ;
13524: LD_EXP 40
13528: PPUSH
13529: LD_STRING D24-Pla-2
13531: PPUSH
13532: CALL_OW 94
// if not westOutpostDestroyed then
13536: LD_EXP 22
13540: NOT
13541: IFFALSE 13555
// SayRadio ( Platonov , D24-Pla-2a ) ;
13543: LD_EXP 40
13547: PPUSH
13548: LD_STRING D24-Pla-2a
13550: PPUSH
13551: CALL_OW 94
// DialogueOff ;
13555: CALL_OW 7
// InGameOff ;
13559: CALL_OW 9
// belkovSaved := true ;
13563: LD_ADDR_EXP 28
13567: PUSH
13568: LD_INT 1
13570: ST_TO_ADDR
// for i in belkovTeam union Belkov do
13571: LD_ADDR_VAR 0 1
13575: PUSH
13576: LD_EXP 45
13580: PUSH
13581: LD_EXP 36
13585: UNION
13586: PUSH
13587: FOR_IN
13588: IFFALSE 13604
// SetSide ( i , 3 ) ;
13590: LD_VAR 0 1
13594: PPUSH
13595: LD_INT 3
13597: PPUSH
13598: CALL_OW 235
13602: GO 13587
13604: POP
13605: POP
// ChangeMissionObjectives ( M9a ) ;
13606: LD_STRING M9a
13608: PPUSH
13609: CALL_OW 337
// end ;
13613: PPOPN 2
13615: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usWestOutpostArea ] ] ) ) do
13616: LD_INT 3
13618: PPUSH
13619: LD_INT 22
13621: PUSH
13622: LD_INT 1
13624: PUSH
13625: EMPTY
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 95
13631: PUSH
13632: LD_INT 8
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 69
13647: PPUSH
13648: CALL 56860 0 2
13652: IFFALSE 13837
13654: GO 13656
13656: DISABLE
// begin DialogueOn ;
13657: CALL_OW 6
// PlaceSeeing ( 49 , 57 , 3 , - 12 ) ;
13661: LD_INT 49
13663: PPUSH
13664: LD_INT 57
13666: PPUSH
13667: LD_INT 3
13669: PPUSH
13670: LD_INT 12
13672: NEG
13673: PPUSH
13674: CALL_OW 330
// RemoveSeeing ( 49 , 57 , 3 ) ;
13678: LD_INT 49
13680: PPUSH
13681: LD_INT 57
13683: PPUSH
13684: LD_INT 3
13686: PPUSH
13687: CALL_OW 331
// CenterOnXY ( 49 , 57 ) ;
13691: LD_INT 49
13693: PPUSH
13694: LD_INT 57
13696: PPUSH
13697: CALL_OW 84
// if not eastOutpostDiscovered then
13701: LD_EXP 21
13705: NOT
13706: IFFALSE 13746
// begin Say ( Burlak , D15-Bur-1 ) ;
13708: LD_EXP 34
13712: PPUSH
13713: LD_STRING D15-Bur-1
13715: PPUSH
13716: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13720: LD_EXP 35
13724: PPUSH
13725: LD_STRING D15-Gny-1
13727: PPUSH
13728: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13732: LD_EXP 39
13736: PPUSH
13737: LD_STRING D15-Kov-1
13739: PPUSH
13740: CALL_OW 88
// end else
13744: GO 13782
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13746: LD_EXP 39
13750: PPUSH
13751: LD_STRING D16-Kov-1
13753: PPUSH
13754: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13758: LD_EXP 34
13762: PPUSH
13763: LD_STRING D16-Bur-1
13765: PPUSH
13766: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13770: LD_EXP 35
13774: PPUSH
13775: LD_STRING D16-Gny-1
13777: PPUSH
13778: CALL_OW 88
// end ; Say ( Burlak , D15-Bur-2 ) ;
13782: LD_EXP 34
13786: PPUSH
13787: LD_STRING D15-Bur-2
13789: PPUSH
13790: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-2 ) ;
13794: LD_EXP 39
13798: PPUSH
13799: LD_STRING D15-Kov-2
13801: PPUSH
13802: CALL_OW 88
// Say ( Burlak , D15-Bur-3 ) ;
13806: LD_EXP 34
13810: PPUSH
13811: LD_STRING D15-Bur-3
13813: PPUSH
13814: CALL_OW 88
// DialogueOff ;
13818: CALL_OW 7
// westOutpostDiscovered := true ;
13822: LD_ADDR_EXP 20
13826: PUSH
13827: LD_INT 1
13829: ST_TO_ADDR
// ChangeMissionObjectives ( M7 ) ;
13830: LD_STRING M7
13832: PPUSH
13833: CALL_OW 337
// end ;
13837: END
// every 0 0$2 trigger SeeUnits ( 3 , FilterAllUnits ( [ [ f_side , 1 ] , [ f_inarea , usEastOutpostArea ] ] ) ) do
13838: LD_INT 3
13840: PPUSH
13841: LD_INT 22
13843: PUSH
13844: LD_INT 1
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: PUSH
13851: LD_INT 95
13853: PUSH
13854: LD_INT 15
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PPUSH
13865: CALL_OW 69
13869: PPUSH
13870: CALL 56860 0 2
13874: IFFALSE 14015
13876: GO 13878
13878: DISABLE
// begin DialogueOn ;
13879: CALL_OW 6
// PlaceSeeing ( 95 , 65 , 3 , - 12 ) ;
13883: LD_INT 95
13885: PPUSH
13886: LD_INT 65
13888: PPUSH
13889: LD_INT 3
13891: PPUSH
13892: LD_INT 12
13894: NEG
13895: PPUSH
13896: CALL_OW 330
// RemoveSeeing ( 95 , 65 , 3 ) ;
13900: LD_INT 95
13902: PPUSH
13903: LD_INT 65
13905: PPUSH
13906: LD_INT 3
13908: PPUSH
13909: CALL_OW 331
// CenterOnXY ( 95 , 65 ) ;
13913: LD_INT 95
13915: PPUSH
13916: LD_INT 65
13918: PPUSH
13919: CALL_OW 84
// if westOutpostDiscovered then
13923: LD_EXP 20
13927: IFFALSE 13967
// begin Say ( Kovalyuk , D16-Kov-1 ) ;
13929: LD_EXP 39
13933: PPUSH
13934: LD_STRING D16-Kov-1
13936: PPUSH
13937: CALL_OW 88
// Say ( Burlak , D16-Bur-1 ) ;
13941: LD_EXP 34
13945: PPUSH
13946: LD_STRING D16-Bur-1
13948: PPUSH
13949: CALL_OW 88
// Say ( Gnyevko , D16-Gny-1 ) ;
13953: LD_EXP 35
13957: PPUSH
13958: LD_STRING D16-Gny-1
13960: PPUSH
13961: CALL_OW 88
// end else
13965: GO 14003
// begin Say ( Burlak , D15-Bur-1 ) ;
13967: LD_EXP 34
13971: PPUSH
13972: LD_STRING D15-Bur-1
13974: PPUSH
13975: CALL_OW 88
// Say ( Gnyevko , D15-Gny-1 ) ;
13979: LD_EXP 35
13983: PPUSH
13984: LD_STRING D15-Gny-1
13986: PPUSH
13987: CALL_OW 88
// Say ( Kovalyuk , D15-Kov-1 ) ;
13991: LD_EXP 39
13995: PPUSH
13996: LD_STRING D15-Kov-1
13998: PPUSH
13999: CALL_OW 88
// end ; DialogueOff ;
14003: CALL_OW 7
// eastOutpostDiscovered := true ;
14007: LD_ADDR_EXP 21
14011: PUSH
14012: LD_INT 1
14014: ST_TO_ADDR
// end ;
14015: END
// every 0 0$1 trigger FilterUnitsInArea ( usWestOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and westOutpostDiscovered do
14016: LD_INT 8
14018: PPUSH
14019: LD_INT 22
14021: PUSH
14022: LD_INT 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 50
14031: PUSH
14032: EMPTY
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 70
14043: PUSH
14044: LD_INT 0
14046: EQUAL
14047: PUSH
14048: LD_EXP 20
14052: AND
14053: IFFALSE 14097
14055: GO 14057
14057: DISABLE
// begin Say ( Burlak , D20-Bur-1 ) ;
14058: LD_EXP 34
14062: PPUSH
14063: LD_STRING D20-Bur-1
14065: PPUSH
14066: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14070: LD_EXP 40
14074: PPUSH
14075: LD_STRING D20-Pla-1
14077: PPUSH
14078: CALL_OW 94
// westOutpostDestroyed := true ;
14082: LD_ADDR_EXP 22
14086: PUSH
14087: LD_INT 1
14089: ST_TO_ADDR
// ChangeMissionObjectives ( M8 ) ;
14090: LD_STRING M8
14092: PPUSH
14093: CALL_OW 337
// end ;
14097: END
// every 0 0$1 trigger FilterUnitsInArea ( usEastOutpostArea , [ [ f_side , 1 ] , [ f_ok ] ] ) = 0 and eastOutpostDiscovered do var i ;
14098: LD_INT 15
14100: PPUSH
14101: LD_INT 22
14103: PUSH
14104: LD_INT 1
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 50
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 70
14125: PUSH
14126: LD_INT 0
14128: EQUAL
14129: PUSH
14130: LD_EXP 21
14134: AND
14135: IFFALSE 14265
14137: GO 14139
14139: DISABLE
14140: LD_INT 0
14142: PPUSH
// begin Say ( Burlak , D20-Bur-1 ) ;
14143: LD_EXP 34
14147: PPUSH
14148: LD_STRING D20-Bur-1
14150: PPUSH
14151: CALL_OW 88
// SayRadio ( Platonov , D20-Pla-1 ) ;
14155: LD_EXP 40
14159: PPUSH
14160: LD_STRING D20-Pla-1
14162: PPUSH
14163: CALL_OW 94
// eastOutpostDestroyed := true ;
14167: LD_ADDR_EXP 23
14171: PUSH
14172: LD_INT 1
14174: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14175: LD_INT 35
14177: PPUSH
14178: CALL_OW 67
// stop_talking := true ;
14182: LD_ADDR_OWVAR 56
14186: PUSH
14187: LD_INT 1
14189: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) do
14190: LD_ADDR_VAR 0 1
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_INT 3
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 23
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 21
14217: PUSH
14218: LD_INT 1
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: PPUSH
14230: CALL_OW 69
14234: PUSH
14235: FOR_IN
14236: IFFALSE 14255
// AddExperience_NoLimit ( i , skill_combat , 1500 ) ;
14238: LD_VAR 0 1
14242: PPUSH
14243: LD_INT 1
14245: PPUSH
14246: LD_INT 1500
14248: PPUSH
14249: CALL_OW 591
14253: GO 14235
14255: POP
14256: POP
// stop_talking := false ;
14257: LD_ADDR_OWVAR 56
14261: PUSH
14262: LD_INT 0
14264: ST_TO_ADDR
// end ;
14265: PPOPN 1
14267: END
// every 0 0$1 trigger FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do
14268: LD_INT 19
14270: PPUSH
14271: LD_INT 22
14273: PUSH
14274: LD_INT 3
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: PUSH
14281: LD_INT 21
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: EMPTY
14288: LIST
14289: LIST
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: PPUSH
14295: CALL_OW 70
14299: IFFALSE 14407
14301: GO 14303
14303: DISABLE
// begin DialogueOn ;
14304: CALL_OW 6
// CenterNowOnUnits ( FilterUnitsInArea ( hillTrackArea , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) ;
14308: LD_INT 19
14310: PPUSH
14311: LD_INT 22
14313: PUSH
14314: LD_INT 3
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: LD_INT 21
14323: PUSH
14324: LD_INT 2
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PPUSH
14335: CALL_OW 70
14339: PPUSH
14340: CALL_OW 87
// Say ( Burlak , D26-Bur-1 ) ;
14344: LD_EXP 34
14348: PPUSH
14349: LD_STRING D26-Bur-1
14351: PPUSH
14352: CALL_OW 88
// Say ( Kovalyuk , D26-Kov-1 ) ;
14356: LD_EXP 39
14360: PPUSH
14361: LD_STRING D26-Kov-1
14363: PPUSH
14364: CALL_OW 88
// if IsOk ( Gnyevko ) then
14368: LD_EXP 35
14372: PPUSH
14373: CALL_OW 302
14377: IFFALSE 14403
// begin Say ( Gnyevko , D26-Gny-1 ) ;
14379: LD_EXP 35
14383: PPUSH
14384: LD_STRING D26-Gny-1
14386: PPUSH
14387: CALL_OW 88
// Say ( Burlak , D26-Bur-2 ) ;
14391: LD_EXP 34
14395: PPUSH
14396: LD_STRING D26-Bur-2
14398: PPUSH
14399: CALL_OW 88
// end ; DialogueOff ;
14403: CALL_OW 7
// end ;
14407: END
// every 0 0$3 trigger eastOutpostDiscovered and not eastOutpostDestroyed and FilterUnitsInArea ( eastStrongPointArea , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] ] ) > 1 do
14408: LD_EXP 21
14412: PUSH
14413: LD_EXP 23
14417: NOT
14418: AND
14419: PUSH
14420: LD_INT 17
14422: PPUSH
14423: LD_INT 22
14425: PUSH
14426: LD_INT 3
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: LD_INT 3
14435: PUSH
14436: LD_INT 24
14438: PUSH
14439: LD_INT 1000
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 70
14458: PUSH
14459: LD_INT 1
14461: GREATER
14462: AND
14463: IFFALSE 14526
14465: GO 14467
14467: DISABLE
// begin Say ( Gnyevko , D16A-Gny-1 ) ;
14468: LD_EXP 35
14472: PPUSH
14473: LD_STRING D16A-Gny-1
14475: PPUSH
14476: CALL_OW 88
// Say ( Kovalyuk , D16A-Kov-1 ) ;
14480: LD_EXP 39
14484: PPUSH
14485: LD_STRING D16A-Kov-1
14487: PPUSH
14488: CALL_OW 88
// if IsOk ( Gnyevko ) or IsOk ( Kovalyuk ) then
14492: LD_EXP 35
14496: PPUSH
14497: CALL_OW 302
14501: PUSH
14502: LD_EXP 39
14506: PPUSH
14507: CALL_OW 302
14511: OR
14512: IFFALSE 14526
// Say ( Burlak , D16A-Bur-1 ) ;
14514: LD_EXP 34
14518: PPUSH
14519: LD_STRING D16A-Bur-1
14521: PPUSH
14522: CALL_OW 88
// end ;
14526: END
// every 0 0$1 trigger SeeArea ( 3 , westWeakPointArea ) do
14527: LD_INT 3
14529: PPUSH
14530: LD_INT 9
14532: PPUSH
14533: CALL_OW 294
14537: IFFALSE 14550
14539: GO 14541
14541: DISABLE
// begin westOutpostWeakPointSpotted := true ;
14542: LD_ADDR_EXP 24
14546: PUSH
14547: LD_INT 1
14549: ST_TO_ADDR
// end ;
14550: END
// every 0 0$1 trigger SeeArea ( 3 , spot1Area ) do
14551: LD_INT 3
14553: PPUSH
14554: LD_INT 10
14556: PPUSH
14557: CALL_OW 294
14561: IFFALSE 14581
14563: GO 14565
14565: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14566: LD_ADDR_EXP 27
14570: PUSH
14571: LD_EXP 27
14575: PPUSH
14576: CALL 54961 0 1
14580: ST_TO_ADDR
14581: END
// every 0 0$1 trigger SeeArea ( 3 , spot2Area ) do
14582: LD_INT 3
14584: PPUSH
14585: LD_INT 11
14587: PPUSH
14588: CALL_OW 294
14592: IFFALSE 14612
14594: GO 14596
14596: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14597: LD_ADDR_EXP 27
14601: PUSH
14602: LD_EXP 27
14606: PPUSH
14607: CALL 54961 0 1
14611: ST_TO_ADDR
14612: END
// every 0 0$1 trigger SeeArea ( 3 , spot3Area ) do
14613: LD_INT 3
14615: PPUSH
14616: LD_INT 12
14618: PPUSH
14619: CALL_OW 294
14623: IFFALSE 14643
14625: GO 14627
14627: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14628: LD_ADDR_EXP 27
14632: PUSH
14633: LD_EXP 27
14637: PPUSH
14638: CALL 54961 0 1
14642: ST_TO_ADDR
14643: END
// every 0 0$1 trigger SeeArea ( 3 , spot4Area ) do
14644: LD_INT 3
14646: PPUSH
14647: LD_INT 13
14649: PPUSH
14650: CALL_OW 294
14654: IFFALSE 14674
14656: GO 14658
14658: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14659: LD_ADDR_EXP 27
14663: PUSH
14664: LD_EXP 27
14668: PPUSH
14669: CALL 54961 0 1
14673: ST_TO_ADDR
14674: END
// every 0 0$1 trigger SeeArea ( 3 , spot5Area ) do
14675: LD_INT 3
14677: PPUSH
14678: LD_INT 14
14680: PPUSH
14681: CALL_OW 294
14685: IFFALSE 14705
14687: GO 14689
14689: DISABLE
// mapSpotCounter := Inc ( mapSpotCounter ) ;
14690: LD_ADDR_EXP 27
14694: PUSH
14695: LD_EXP 27
14699: PPUSH
14700: CALL 54961 0 1
14704: ST_TO_ADDR
14705: END
// every 0 0$1 trigger mapSpotCounter >= 5 and hasAllTanks do
14706: LD_EXP 27
14710: PUSH
14711: LD_INT 5
14713: GREATEREQUAL
14714: PUSH
14715: LD_EXP 14
14719: AND
14720: IFFALSE 14740
14722: GO 14724
14724: DISABLE
// begin allMapPointsSpotted := true ;
14725: LD_ADDR_EXP 26
14729: PUSH
14730: LD_INT 1
14732: ST_TO_ADDR
// ChangeMissionObjectives ( M10 ) ;
14733: LD_STRING M10
14735: PPUSH
14736: CALL_OW 337
// end ;
14740: END
// every 0 0$2 trigger allMapPointsSpotted and westOutpostDestroyed do
14741: LD_EXP 26
14745: PUSH
14746: LD_EXP 22
14750: AND
14751: IFFALSE 14763
14753: GO 14755
14755: DISABLE
// begin ChangeMissionObjectives ( M10a ) ;
14756: LD_STRING M10a
14758: PPUSH
14759: CALL_OW 337
// end ;
14763: END
// every 0 0$1 trigger hasAllTanks do var timer , wantToTalk , wasOutsideBeria , westOutpostReported , eastOutpostReported ;
14764: LD_EXP 14
14768: IFFALSE 15401
14770: GO 14772
14772: DISABLE
14773: LD_INT 0
14775: PPUSH
14776: PPUSH
14777: PPUSH
14778: PPUSH
14779: PPUSH
// begin wasOutsideBeria := false ;
14780: LD_ADDR_VAR 0 3
14784: PUSH
14785: LD_INT 0
14787: ST_TO_ADDR
// wantToTalk := false ;
14788: LD_ADDR_VAR 0 2
14792: PUSH
14793: LD_INT 0
14795: ST_TO_ADDR
// westOutpostReported := false ;
14796: LD_ADDR_VAR 0 4
14800: PUSH
14801: LD_INT 0
14803: ST_TO_ADDR
// eastOutpostReported := false ;
14804: LD_ADDR_VAR 0 5
14808: PUSH
14809: LD_INT 0
14811: ST_TO_ADDR
// timer := 0 0$0 ;
14812: LD_ADDR_VAR 0 1
14816: PUSH
14817: LD_INT 0
14819: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
14820: LD_INT 70
14822: PPUSH
14823: CALL_OW 67
// timer := timer + 0 0$2 ;
14827: LD_ADDR_VAR 0 1
14831: PUSH
14832: LD_VAR 0 1
14836: PUSH
14837: LD_INT 70
14839: PLUS
14840: ST_TO_ADDR
// if timer >= 0 0$30 then
14841: LD_VAR 0 1
14845: PUSH
14846: LD_INT 1050
14848: GREATEREQUAL
14849: IFFALSE 14859
// wantToTalk := true ;
14851: LD_ADDR_VAR 0 2
14855: PUSH
14856: LD_INT 1
14858: ST_TO_ADDR
// if GetDistUnits ( Burlak , Platonov ) > 9 then
14859: LD_EXP 34
14863: PPUSH
14864: LD_EXP 40
14868: PPUSH
14869: CALL_OW 296
14873: PUSH
14874: LD_INT 9
14876: GREATER
14877: IFFALSE 14887
// wasOutsideBeria := true ;
14879: LD_ADDR_VAR 0 3
14883: PUSH
14884: LD_INT 1
14886: ST_TO_ADDR
// if wantToTalk and wasOutsideBeria and ( GetDistUnits ( Burlak , Platonov ) < 8 or GetDistUnits ( IsInUnit ( Burlak ) , Platonov ) < 8 ) then
14887: LD_VAR 0 2
14891: PUSH
14892: LD_VAR 0 3
14896: AND
14897: PUSH
14898: LD_EXP 34
14902: PPUSH
14903: LD_EXP 40
14907: PPUSH
14908: CALL_OW 296
14912: PUSH
14913: LD_INT 8
14915: LESS
14916: PUSH
14917: LD_EXP 34
14921: PPUSH
14922: CALL_OW 310
14926: PPUSH
14927: LD_EXP 40
14931: PPUSH
14932: CALL_OW 296
14936: PUSH
14937: LD_INT 8
14939: LESS
14940: OR
14941: AND
14942: IFFALSE 15290
// begin timer := 0 0$0 ;
14944: LD_ADDR_VAR 0 1
14948: PUSH
14949: LD_INT 0
14951: ST_TO_ADDR
// wantToTalk := false ;
14952: LD_ADDR_VAR 0 2
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// wasOutsideBeria := false ;
14960: LD_ADDR_VAR 0 3
14964: PUSH
14965: LD_INT 0
14967: ST_TO_ADDR
// CenterNowOnUnits ( Platonov ) ;
14968: LD_EXP 40
14972: PPUSH
14973: CALL_OW 87
// DialogueOn ;
14977: CALL_OW 6
// Say ( Platonov , D25-Pla-1 ) ;
14981: LD_EXP 40
14985: PPUSH
14986: LD_STRING D25-Pla-1
14988: PPUSH
14989: CALL_OW 88
// if not westOutpostReported and not eastOutpostReported and westOutpostDiscovered and eastOutpostDiscovered then
14993: LD_VAR 0 4
14997: NOT
14998: PUSH
14999: LD_VAR 0 5
15003: NOT
15004: AND
15005: PUSH
15006: LD_EXP 20
15010: AND
15011: PUSH
15012: LD_EXP 21
15016: AND
15017: IFFALSE 15097
// begin westOutpostReported := true ;
15019: LD_ADDR_VAR 0 4
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// eastOutpostReported := true ;
15027: LD_ADDR_VAR 0 5
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// Say ( Burlak , D25-Bur-1 ) ;
15035: LD_EXP 34
15039: PPUSH
15040: LD_STRING D25-Bur-1
15042: PPUSH
15043: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15047: LD_EXP 24
15051: PUSH
15052: LD_EXP 22
15056: NOT
15057: AND
15058: IFFALSE 15095
// begin Say ( Burlak , D25b-Bur-1 ) ;
15060: LD_EXP 34
15064: PPUSH
15065: LD_STRING D25b-Bur-1
15067: PPUSH
15068: CALL_OW 88
// if not reinforcementsGained then
15072: LD_EXP 25
15076: NOT
15077: IFFALSE 15095
// begin Say ( Platonov , D25b-Pla-1 ) ;
15079: LD_EXP 40
15083: PPUSH
15084: LD_STRING D25b-Pla-1
15086: PPUSH
15087: CALL_OW 88
// SendReinforcements ( ) ;
15091: CALL 3297 0 0
// end ; end ; end else
15095: GO 15286
// if not westOutpostReported and westOutpostDiscovered then
15097: LD_VAR 0 4
15101: NOT
15102: PUSH
15103: LD_EXP 20
15107: AND
15108: IFFALSE 15180
// begin westOutpostReported := true ;
15110: LD_ADDR_VAR 0 4
15114: PUSH
15115: LD_INT 1
15117: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1b ) ;
15118: LD_EXP 34
15122: PPUSH
15123: LD_STRING D25a-Bur-1b
15125: PPUSH
15126: CALL_OW 88
// if westOutpostWeakPointSpotted and not westOutpostDestroyed then
15130: LD_EXP 24
15134: PUSH
15135: LD_EXP 22
15139: NOT
15140: AND
15141: IFFALSE 15178
// begin Say ( Burlak , D25b-Bur-1 ) ;
15143: LD_EXP 34
15147: PPUSH
15148: LD_STRING D25b-Bur-1
15150: PPUSH
15151: CALL_OW 88
// if not reinforcementsGained then
15155: LD_EXP 25
15159: NOT
15160: IFFALSE 15178
// begin Say ( Platonov , D25b-Pla-1 ) ;
15162: LD_EXP 40
15166: PPUSH
15167: LD_STRING D25b-Pla-1
15169: PPUSH
15170: CALL_OW 88
// SendReinforcements ( ) ;
15174: CALL 3297 0 0
// end ; end ; end else
15178: GO 15286
// if not eastOutpostReported and eastOutpostDiscovered then
15180: LD_VAR 0 5
15184: NOT
15185: PUSH
15186: LD_EXP 21
15190: AND
15191: IFFALSE 15215
// begin eastOutpostReported := true ;
15193: LD_ADDR_VAR 0 5
15197: PUSH
15198: LD_INT 1
15200: ST_TO_ADDR
// Say ( Burlak , D25a-Bur-1a ) ;
15201: LD_EXP 34
15205: PPUSH
15206: LD_STRING D25a-Bur-1a
15208: PPUSH
15209: CALL_OW 88
// end else
15213: GO 15286
// if not westOutpostDiscovered or not eastOutpostDiscovered then
15215: LD_EXP 20
15219: NOT
15220: PUSH
15221: LD_EXP 21
15225: NOT
15226: OR
15227: IFFALSE 15255
// begin Say ( Burlak , D25a-Bur-1 ) ;
15229: LD_EXP 34
15233: PPUSH
15234: LD_STRING D25a-Bur-1
15236: PPUSH
15237: CALL_OW 88
// Say ( Platonov , D25c-Pla-1 ) ;
15241: LD_EXP 40
15245: PPUSH
15246: LD_STRING D25c-Pla-1
15248: PPUSH
15249: CALL_OW 88
// end else
15253: GO 15286
// if not allMapPointsSpotted then
15255: LD_EXP 26
15259: NOT
15260: IFFALSE 15286
// begin Say ( Burlak , D25a-Bur-1 ) ;
15262: LD_EXP 34
15266: PPUSH
15267: LD_STRING D25a-Bur-1
15269: PPUSH
15270: CALL_OW 88
// Say ( Platonov , D25c-Pla-1a ) ;
15274: LD_EXP 40
15278: PPUSH
15279: LD_STRING D25c-Pla-1a
15281: PPUSH
15282: CALL_OW 88
// end ; DialogueOff ;
15286: CALL_OW 7
// end ; until allMapPointsSpotted and westOutpostDestroyed ;
15290: LD_EXP 26
15294: PUSH
15295: LD_EXP 22
15299: AND
15300: IFFALSE 14820
// repeat if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , Platonov , 10 ] ] ) then
15302: LD_INT 22
15304: PUSH
15305: LD_INT 3
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 21
15314: PUSH
15315: LD_INT 1
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 91
15324: PUSH
15325: LD_EXP 40
15329: PUSH
15330: LD_INT 10
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: IFFALSE 15390
// begin if not belkovDied and not belkovSaved then
15349: LD_EXP 19
15353: NOT
15354: PUSH
15355: LD_EXP 28
15359: NOT
15360: AND
15361: IFFALSE 15384
// begin if Query ( QContMission ) = 1 then
15363: LD_STRING QContMission
15365: PPUSH
15366: CALL_OW 97
15370: PUSH
15371: LD_INT 1
15373: EQUAL
15374: IFFALSE 15382
// begin EndMission ;
15376: CALL 15404 0 0
// exit ;
15380: GO 15401
// end ; end else
15382: GO 15390
// begin EndMission ;
15384: CALL 15404 0 0
// exit ;
15388: GO 15401
// end ; end ; wait ( 0 0$10 ) ;
15390: LD_INT 350
15392: PPUSH
15393: CALL_OW 67
// until false ;
15397: LD_INT 0
15399: IFFALSE 15302
// end ;
15401: PPOPN 5
15403: END
// function EndMission ; var i , tmp ; begin
15404: LD_INT 0
15406: PPUSH
15407: PPUSH
15408: PPUSH
// if initiative then
15409: LD_EXP 31
15413: IFFALSE 15427
// AddMedal ( Initiative , 1 ) else
15415: LD_STRING Initiative
15417: PPUSH
15418: LD_INT 1
15420: PPUSH
15421: CALL_OW 101
15425: GO 15458
// if not eastOutpostDestroyed then
15427: LD_EXP 23
15431: NOT
15432: IFFALSE 15447
// AddMedal ( Initiative , - 2 ) else
15434: LD_STRING Initiative
15436: PPUSH
15437: LD_INT 2
15439: NEG
15440: PPUSH
15441: CALL_OW 101
15445: GO 15458
// AddMedal ( Initiative , - 1 ) ;
15447: LD_STRING Initiative
15449: PPUSH
15450: LD_INT 1
15452: NEG
15453: PPUSH
15454: CALL_OW 101
// if not belkovDied and belkovSaved then
15458: LD_EXP 19
15462: NOT
15463: PUSH
15464: LD_EXP 28
15468: AND
15469: IFFALSE 15483
// AddMedal ( Belkov , 1 ) else
15471: LD_STRING Belkov
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 101
15481: GO 15578
// if UnitFilter ( belkovTeam , [ f_side , 3 ] ) then
15483: LD_EXP 45
15487: PPUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 3
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PPUSH
15498: CALL_OW 72
15502: IFFALSE 15516
// AddMedal ( Belkov , 2 ) else
15504: LD_STRING Belkov
15506: PPUSH
15507: LD_INT 2
15509: PPUSH
15510: CALL_OW 101
15514: GO 15578
// if belkovDied then
15516: LD_EXP 19
15520: IFFALSE 15535
// AddMedal ( Belkov , - 1 ) else
15522: LD_STRING Belkov
15524: PPUSH
15525: LD_INT 1
15527: NEG
15528: PPUSH
15529: CALL_OW 101
15533: GO 15578
// if not belkovSaved then
15535: LD_EXP 28
15539: NOT
15540: IFFALSE 15555
// AddMedal ( Belkov , - 2 ) else
15542: LD_STRING Belkov
15544: PPUSH
15545: LD_INT 2
15547: NEG
15548: PPUSH
15549: CALL_OW 101
15553: GO 15578
// if belkovDied and belkovSaved then
15555: LD_EXP 19
15559: PUSH
15560: LD_EXP 28
15564: AND
15565: IFFALSE 15578
// AddMedal ( Belkov , - 3 ) ;
15567: LD_STRING Belkov
15569: PPUSH
15570: LD_INT 3
15572: NEG
15573: PPUSH
15574: CALL_OW 101
// if playerTeamDeadCounter = 0 then
15578: LD_EXP 30
15582: PUSH
15583: LD_INT 0
15585: EQUAL
15586: IFFALSE 15600
// AddMedal ( NoLosses , 1 ) else
15588: LD_STRING NoLosses
15590: PPUSH
15591: LD_INT 1
15593: PPUSH
15594: CALL_OW 101
15598: GO 15611
// AddMedal ( NoLosses , - 1 ) ;
15600: LD_STRING NoLosses
15602: PPUSH
15603: LD_INT 1
15605: NEG
15606: PPUSH
15607: CALL_OW 101
// GiveMedals ( Main ) ;
15611: LD_STRING Main
15613: PPUSH
15614: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
15618: LD_INT 22
15620: PUSH
15621: LD_INT 3
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 23
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 21
15640: PUSH
15641: LD_INT 1
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: PPUSH
15658: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
15662: LD_EXP 34
15666: PPUSH
15667: LD_EXP 3
15671: PUSH
15672: LD_STRING Burlak
15674: STR
15675: PPUSH
15676: CALL_OW 38
// if IsLive ( Gnyevko ) then
15680: LD_EXP 35
15684: PPUSH
15685: CALL_OW 300
15689: IFFALSE 15709
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
15691: LD_EXP 35
15695: PPUSH
15696: LD_EXP 3
15700: PUSH
15701: LD_STRING Gnyevko
15703: STR
15704: PPUSH
15705: CALL_OW 38
// if IsLive ( Kovalyuk ) then
15709: LD_EXP 39
15713: PPUSH
15714: CALL_OW 300
15718: IFFALSE 15738
// SaveCharacters ( Kovalyuk , currentMissionPrefix & Kovalyuk ) ;
15720: LD_EXP 39
15724: PPUSH
15725: LD_EXP 3
15729: PUSH
15730: LD_STRING Kovalyuk
15732: STR
15733: PPUSH
15734: CALL_OW 38
// if IsLive ( Belkov ) and belkovSaved then
15738: LD_EXP 36
15742: PPUSH
15743: CALL_OW 300
15747: PUSH
15748: LD_EXP 28
15752: AND
15753: IFFALSE 15773
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
15755: LD_EXP 36
15759: PPUSH
15760: LD_EXP 3
15764: PUSH
15765: LD_STRING Belkov
15767: STR
15768: PPUSH
15769: CALL_OW 38
// if IsLive ( Kirilenkova ) then
15773: LD_EXP 37
15777: PPUSH
15778: CALL_OW 300
15782: IFFALSE 15802
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
15784: LD_EXP 37
15788: PPUSH
15789: LD_EXP 3
15793: PUSH
15794: LD_STRING Kirilenkova
15796: STR
15797: PPUSH
15798: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Kovalyuk , Belkov , Kirilenkova ] , currentMissionPrefix & burlakTeam ) ;
15802: LD_INT 22
15804: PUSH
15805: LD_INT 3
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 3
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: LD_INT 21
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PUSH
15832: EMPTY
15833: LIST
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: PUSH
15842: LD_EXP 34
15846: PUSH
15847: LD_EXP 35
15851: PUSH
15852: LD_EXP 39
15856: PUSH
15857: LD_EXP 36
15861: PUSH
15862: LD_EXP 37
15866: PUSH
15867: EMPTY
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: DIFF
15874: PPUSH
15875: LD_EXP 3
15879: PUSH
15880: LD_STRING burlakTeam
15882: STR
15883: PPUSH
15884: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) diff ( [ Platonov , Kurin , Belkov ] union belkovTeam ) , currentMissionPrefix & kirovTeam ) ;
15888: LD_INT 22
15890: PUSH
15891: LD_INT 6
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 23
15900: PUSH
15901: LD_INT 3
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: LD_INT 21
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: LIST
15922: PPUSH
15923: CALL_OW 69
15927: PUSH
15928: LD_EXP 40
15932: PUSH
15933: LD_EXP 38
15937: PUSH
15938: LD_EXP 36
15942: PUSH
15943: EMPTY
15944: LIST
15945: LIST
15946: LIST
15947: PUSH
15948: LD_EXP 45
15952: UNION
15953: DIFF
15954: PPUSH
15955: LD_EXP 3
15959: PUSH
15960: LD_STRING kirovTeam
15962: STR
15963: PPUSH
15964: CALL_OW 38
// SaveVariable ( eastOutpostDestroyed , 02_EasternOutpostDestroyed ) ;
15968: LD_EXP 23
15972: PPUSH
15973: LD_STRING 02_EasternOutpostDestroyed
15975: PPUSH
15976: CALL_OW 39
// tmp := [ ] ;
15980: LD_ADDR_VAR 0 3
15984: PUSH
15985: EMPTY
15986: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) do
15987: LD_ADDR_VAR 0 2
15991: PUSH
15992: LD_INT 22
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: LD_INT 21
16004: PUSH
16005: LD_INT 3
16007: PUSH
16008: EMPTY
16009: LIST
16010: LIST
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 69
16020: PUSH
16021: FOR_IN
16022: IFFALSE 16098
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16024: LD_ADDR_VAR 0 3
16028: PUSH
16029: LD_VAR 0 3
16033: PPUSH
16034: LD_VAR 0 2
16038: PPUSH
16039: CALL_OW 266
16043: PUSH
16044: LD_VAR 0 2
16048: PPUSH
16049: CALL_OW 267
16053: PUSH
16054: LD_VAR 0 2
16058: PPUSH
16059: CALL_OW 250
16063: PUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL_OW 251
16073: PUSH
16074: LD_VAR 0 2
16078: PPUSH
16079: CALL_OW 254
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: PPUSH
16091: CALL 53608 0 2
16095: ST_TO_ADDR
16096: GO 16021
16098: POP
16099: POP
// SaveVariable ( tmp , 02_Beria ) ;
16100: LD_VAR 0 3
16104: PPUSH
16105: LD_STRING 02_Beria
16107: PPUSH
16108: CALL_OW 39
// tmp := [ ] ;
16112: LD_ADDR_VAR 0 3
16116: PUSH
16117: EMPTY
16118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_building ] ] ) do
16119: LD_ADDR_VAR 0 2
16123: PUSH
16124: LD_INT 22
16126: PUSH
16127: LD_INT 6
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 21
16136: PUSH
16137: LD_INT 3
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PPUSH
16148: CALL_OW 69
16152: PUSH
16153: FOR_IN
16154: IFFALSE 16230
// tmp := Join ( tmp , [ GetBType ( i ) , GetBLevel ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) ] ) ;
16156: LD_ADDR_VAR 0 3
16160: PUSH
16161: LD_VAR 0 3
16165: PPUSH
16166: LD_VAR 0 2
16170: PPUSH
16171: CALL_OW 266
16175: PUSH
16176: LD_VAR 0 2
16180: PPUSH
16181: CALL_OW 267
16185: PUSH
16186: LD_VAR 0 2
16190: PPUSH
16191: CALL_OW 250
16195: PUSH
16196: LD_VAR 0 2
16200: PPUSH
16201: CALL_OW 251
16205: PUSH
16206: LD_VAR 0 2
16210: PPUSH
16211: CALL_OW 254
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: PPUSH
16223: CALL 53608 0 2
16227: ST_TO_ADDR
16228: GO 16153
16230: POP
16231: POP
// SaveVariable ( tmp , 02_Kirov ) ;
16232: LD_VAR 0 3
16236: PPUSH
16237: LD_STRING 02_Kirov
16239: PPUSH
16240: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ) , 02_VehiclesCount ) ;
16244: LD_INT 22
16246: PUSH
16247: LD_INT 3
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PUSH
16254: LD_INT 21
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: PPUSH
16273: CALL 19029 0 1
16277: PPUSH
16278: LD_STRING 02_VehiclesCount
16280: PPUSH
16281: CALL_OW 39
// SaveVariable ( Count ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] ] ) ) , 02_KirovVehiclesCount ) ;
16285: LD_INT 22
16287: PUSH
16288: LD_INT 6
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 21
16297: PUSH
16298: LD_INT 2
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: EMPTY
16306: LIST
16307: LIST
16308: PPUSH
16309: CALL_OW 69
16313: PPUSH
16314: CALL 19029 0 1
16318: PPUSH
16319: LD_STRING 02_KirovVehiclesCount
16321: PPUSH
16322: CALL_OW 39
// YouWin ;
16326: CALL_OW 103
// end ; end_of_file
16330: LD_VAR 0 1
16334: RET
// on CrateSpawn ( id , x , y , amount , mode ) do begin wait ( 0 0$12 ) ;
16335: LD_INT 420
16337: PPUSH
16338: CALL_OW 67
// PlatonovFoundCrates ( x , y ) ;
16342: LD_VAR 0 2
16346: PPUSH
16347: LD_VAR 0 3
16351: PPUSH
16352: CALL 7995 0 2
// end ;
16356: PPOPN 5
16358: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
16359: LD_VAR 0 1
16363: PPUSH
16364: CALL 72167 0 1
// if un = Burlak then
16368: LD_VAR 0 1
16372: PUSH
16373: LD_EXP 34
16377: EQUAL
16378: IFFALSE 16387
// YouLost ( Burlak ) ;
16380: LD_STRING Burlak
16382: PPUSH
16383: CALL_OW 104
// if un = Platonov then
16387: LD_VAR 0 1
16391: PUSH
16392: LD_EXP 40
16396: EQUAL
16397: IFFALSE 16406
// YouLost ( Platonov ) ;
16399: LD_STRING Platonov
16401: PPUSH
16402: CALL_OW 104
// if un = Kurin then
16406: LD_VAR 0 1
16410: PUSH
16411: LD_EXP 38
16415: EQUAL
16416: IFFALSE 16425
// YouLost ( Kurin ) ;
16418: LD_STRING Kurin
16420: PPUSH
16421: CALL_OW 104
// if un = Belkov then
16425: LD_VAR 0 1
16429: PUSH
16430: LD_EXP 36
16434: EQUAL
16435: IFFALSE 16445
// belkovDied := true ;
16437: LD_ADDR_EXP 19
16441: PUSH
16442: LD_INT 1
16444: ST_TO_ADDR
// if un in belkovTeam then
16445: LD_VAR 0 1
16449: PUSH
16450: LD_EXP 45
16454: IN
16455: IFFALSE 16488
// begin belkovTeam := belkovTeam diff un ;
16457: LD_ADDR_EXP 45
16461: PUSH
16462: LD_EXP 45
16466: PUSH
16467: LD_VAR 0 1
16471: DIFF
16472: ST_TO_ADDR
// belkovTeamDeadCounter := Inc ( belkovTeamDeadCounter ) ;
16473: LD_ADDR_EXP 29
16477: PUSH
16478: LD_EXP 29
16482: PPUSH
16483: CALL 54961 0 1
16487: ST_TO_ADDR
// end ; if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , nation_russian ] ] ) then
16488: LD_VAR 0 1
16492: PUSH
16493: LD_INT 22
16495: PUSH
16496: LD_INT 3
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 21
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 23
16515: PUSH
16516: LD_INT 3
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 69
16532: IN
16533: IFFALSE 16550
// playerTeamDeadCounter := Inc ( playerTeamDeadCounter ) ;
16535: LD_ADDR_EXP 30
16539: PUSH
16540: LD_EXP 30
16544: PPUSH
16545: CALL 54961 0 1
16549: ST_TO_ADDR
// if un in usWestForces then
16550: LD_VAR 0 1
16554: PUSH
16555: LD_EXP 46
16559: IN
16560: IFFALSE 16578
// usWestForces := usWestForces diff un ;
16562: LD_ADDR_EXP 46
16566: PUSH
16567: LD_EXP 46
16571: PUSH
16572: LD_VAR 0 1
16576: DIFF
16577: ST_TO_ADDR
// if un in usEastForces then
16578: LD_VAR 0 1
16582: PUSH
16583: LD_EXP 47
16587: IN
16588: IFFALSE 16606
// usEastForces := usEastForces diff un ;
16590: LD_ADDR_EXP 47
16594: PUSH
16595: LD_EXP 47
16599: PUSH
16600: LD_VAR 0 1
16604: DIFF
16605: ST_TO_ADDR
// end ;
16606: PPOPN 1
16608: END
// on BuildingComplete ( b ) do var mech ;
16609: LD_INT 0
16611: PPUSH
// begin if GetSide ( b ) = 3 then
16612: LD_VAR 0 1
16616: PPUSH
16617: CALL_OW 255
16621: PUSH
16622: LD_INT 3
16624: EQUAL
16625: IFFALSE 16684
// begin if GetBType ( b ) in [ b_lab , b_lab_half , b_lab_full ] then
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 6
16639: PUSH
16640: LD_INT 7
16642: PUSH
16643: LD_INT 8
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: LIST
16650: IN
16651: IFFALSE 16661
// hasLab := true ;
16653: LD_ADDR_EXP 9
16657: PUSH
16658: LD_INT 1
16660: ST_TO_ADDR
// if GetBType ( b ) = b_workshop then
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 266
16670: PUSH
16671: LD_INT 2
16673: EQUAL
16674: IFFALSE 16684
// hasWorkshop := true ;
16676: LD_ADDR_EXP 10
16680: PUSH
16681: LD_INT 1
16683: ST_TO_ADDR
// end ; if GetSide ( b ) = 6 then
16684: LD_VAR 0 1
16688: PPUSH
16689: CALL_OW 255
16693: PUSH
16694: LD_INT 6
16696: EQUAL
16697: IFFALSE 16771
// begin if GetBType ( b ) = b_workshop then
16699: LD_VAR 0 1
16703: PPUSH
16704: CALL_OW 266
16708: PUSH
16709: LD_INT 2
16711: EQUAL
16712: IFFALSE 16771
// begin mech := UnitFilter ( kirovBaseSquad , [ f_class , class_mechanic ] ) ;
16714: LD_ADDR_VAR 0 2
16718: PUSH
16719: LD_EXP 43
16723: PPUSH
16724: LD_INT 25
16726: PUSH
16727: LD_INT 3
16729: PUSH
16730: EMPTY
16731: LIST
16732: LIST
16733: PPUSH
16734: CALL_OW 72
16738: ST_TO_ADDR
// if not mech then
16739: LD_VAR 0 2
16743: NOT
16744: IFFALSE 16748
// exit ;
16746: GO 16771
// ComExit ( mech ) ;
16748: LD_VAR 0 2
16752: PPUSH
16753: CALL 53996 0 1
// AddComEnterUnit ( mech , b ) ;
16757: LD_VAR 0 2
16761: PPUSH
16762: LD_VAR 0 1
16766: PPUSH
16767: CALL_OW 180
// end ; end ; end ;
16771: PPOPN 2
16773: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_VAR 0 2
16783: PPUSH
16784: CALL 72289 0 2
// if GetSide ( vehicle ) = 3 then
16788: LD_VAR 0 1
16792: PPUSH
16793: CALL_OW 255
16797: PUSH
16798: LD_INT 3
16800: EQUAL
16801: IFFALSE 16826
// begin hasTank := true ;
16803: LD_ADDR_EXP 12
16807: PUSH
16808: LD_INT 1
16810: ST_TO_ADDR
// vehCounter := Inc ( vehCounter ) ;
16811: LD_ADDR_EXP 15
16815: PUSH
16816: LD_EXP 15
16820: PPUSH
16821: CALL 54961 0 1
16825: ST_TO_ADDR
// end ; if GetSide ( vehicle ) = 6 then
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 255
16835: PUSH
16836: LD_INT 6
16838: EQUAL
16839: IFFALSE 16850
// KirovAttack ( vehicle ) ;
16841: LD_VAR 0 1
16845: PPUSH
16846: CALL 3603 0 1
// end ;
16850: PPOPN 2
16852: END
// on SailEvent ( event ) do begin if event = eventBelkovAttack then
16853: LD_VAR 0 1
16857: PUSH
16858: LD_EXP 33
16862: EQUAL
16863: IFFALSE 16869
// BelkovAttackScript ;
16865: CALL 1668 0 0
// end ;
16869: PPOPN 1
16871: END
// on VehicleCaptured ( new , old , side , unit ) do var fac ;
16872: LD_INT 0
16874: PPUSH
// begin if side = 1 then
16875: LD_VAR 0 3
16879: PUSH
16880: LD_INT 1
16882: EQUAL
16883: IFFALSE 16893
// vehCaptured := true ;
16885: LD_ADDR_EXP 16
16889: PUSH
16890: LD_INT 1
16892: ST_TO_ADDR
// end ;
16893: PPOPN 5
16895: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
16896: LD_VAR 0 1
16900: PUSH
16901: LD_INT 3
16903: EQUAL
16904: PUSH
16905: LD_VAR 0 2
16909: PUSH
16910: LD_INT 6
16912: EQUAL
16913: AND
16914: IFFALSE 16924
// allianceAttacked := true ;
16916: LD_ADDR_EXP 13
16920: PUSH
16921: LD_INT 1
16923: ST_TO_ADDR
// end ; end_of_file
16924: PPOPN 2
16926: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16927: LD_INT 0
16929: PPUSH
16930: PPUSH
// if exist_mode then
16931: LD_VAR 0 2
16935: IFFALSE 16960
// unit := CreateCharacter ( prefix & ident ) else
16937: LD_ADDR_VAR 0 5
16941: PUSH
16942: LD_VAR 0 3
16946: PUSH
16947: LD_VAR 0 1
16951: STR
16952: PPUSH
16953: CALL_OW 34
16957: ST_TO_ADDR
16958: GO 16975
// unit := NewCharacter ( ident ) ;
16960: LD_ADDR_VAR 0 5
16964: PUSH
16965: LD_VAR 0 1
16969: PPUSH
16970: CALL_OW 25
16974: ST_TO_ADDR
// result := unit ;
16975: LD_ADDR_VAR 0 4
16979: PUSH
16980: LD_VAR 0 5
16984: ST_TO_ADDR
// end ;
16985: LD_VAR 0 4
16989: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16990: LD_INT 0
16992: PPUSH
16993: PPUSH
// if not side or not nation then
16994: LD_VAR 0 1
16998: NOT
16999: PUSH
17000: LD_VAR 0 2
17004: NOT
17005: OR
17006: IFFALSE 17010
// exit ;
17008: GO 17778
// case nation of nation_american :
17010: LD_VAR 0 2
17014: PUSH
17015: LD_INT 1
17017: DOUBLE
17018: EQUAL
17019: IFTRUE 17023
17021: GO 17237
17023: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
17024: LD_ADDR_VAR 0 4
17028: PUSH
17029: LD_INT 35
17031: PUSH
17032: LD_INT 45
17034: PUSH
17035: LD_INT 46
17037: PUSH
17038: LD_INT 47
17040: PUSH
17041: LD_INT 82
17043: PUSH
17044: LD_INT 83
17046: PUSH
17047: LD_INT 84
17049: PUSH
17050: LD_INT 85
17052: PUSH
17053: LD_INT 86
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: LD_INT 2
17061: PUSH
17062: LD_INT 6
17064: PUSH
17065: LD_INT 15
17067: PUSH
17068: LD_INT 16
17070: PUSH
17071: LD_INT 7
17073: PUSH
17074: LD_INT 12
17076: PUSH
17077: LD_INT 13
17079: PUSH
17080: LD_INT 10
17082: PUSH
17083: LD_INT 14
17085: PUSH
17086: LD_INT 20
17088: PUSH
17089: LD_INT 21
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 32
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 36
17106: PUSH
17107: LD_INT 69
17109: PUSH
17110: LD_INT 39
17112: PUSH
17113: LD_INT 34
17115: PUSH
17116: LD_INT 40
17118: PUSH
17119: LD_INT 48
17121: PUSH
17122: LD_INT 49
17124: PUSH
17125: LD_INT 50
17127: PUSH
17128: LD_INT 51
17130: PUSH
17131: LD_INT 52
17133: PUSH
17134: LD_INT 53
17136: PUSH
17137: LD_INT 54
17139: PUSH
17140: LD_INT 55
17142: PUSH
17143: LD_INT 56
17145: PUSH
17146: LD_INT 57
17148: PUSH
17149: LD_INT 58
17151: PUSH
17152: LD_INT 59
17154: PUSH
17155: LD_INT 60
17157: PUSH
17158: LD_INT 61
17160: PUSH
17161: LD_INT 62
17163: PUSH
17164: LD_INT 80
17166: PUSH
17167: LD_INT 82
17169: PUSH
17170: LD_INT 83
17172: PUSH
17173: LD_INT 84
17175: PUSH
17176: LD_INT 85
17178: PUSH
17179: LD_INT 86
17181: PUSH
17182: EMPTY
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: ST_TO_ADDR
17235: GO 17702
17237: LD_INT 2
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17471
17245: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
17246: LD_ADDR_VAR 0 4
17250: PUSH
17251: LD_INT 35
17253: PUSH
17254: LD_INT 45
17256: PUSH
17257: LD_INT 46
17259: PUSH
17260: LD_INT 47
17262: PUSH
17263: LD_INT 82
17265: PUSH
17266: LD_INT 83
17268: PUSH
17269: LD_INT 84
17271: PUSH
17272: LD_INT 85
17274: PUSH
17275: LD_INT 87
17277: PUSH
17278: LD_INT 70
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: LD_INT 11
17286: PUSH
17287: LD_INT 3
17289: PUSH
17290: LD_INT 4
17292: PUSH
17293: LD_INT 5
17295: PUSH
17296: LD_INT 6
17298: PUSH
17299: LD_INT 15
17301: PUSH
17302: LD_INT 18
17304: PUSH
17305: LD_INT 7
17307: PUSH
17308: LD_INT 17
17310: PUSH
17311: LD_INT 8
17313: PUSH
17314: LD_INT 20
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 22
17322: PUSH
17323: LD_INT 72
17325: PUSH
17326: LD_INT 26
17328: PUSH
17329: LD_INT 69
17331: PUSH
17332: LD_INT 39
17334: PUSH
17335: LD_INT 40
17337: PUSH
17338: LD_INT 41
17340: PUSH
17341: LD_INT 42
17343: PUSH
17344: LD_INT 43
17346: PUSH
17347: LD_INT 48
17349: PUSH
17350: LD_INT 49
17352: PUSH
17353: LD_INT 50
17355: PUSH
17356: LD_INT 51
17358: PUSH
17359: LD_INT 52
17361: PUSH
17362: LD_INT 53
17364: PUSH
17365: LD_INT 54
17367: PUSH
17368: LD_INT 55
17370: PUSH
17371: LD_INT 56
17373: PUSH
17374: LD_INT 60
17376: PUSH
17377: LD_INT 61
17379: PUSH
17380: LD_INT 62
17382: PUSH
17383: LD_INT 66
17385: PUSH
17386: LD_INT 67
17388: PUSH
17389: LD_INT 68
17391: PUSH
17392: LD_INT 81
17394: PUSH
17395: LD_INT 82
17397: PUSH
17398: LD_INT 83
17400: PUSH
17401: LD_INT 84
17403: PUSH
17404: LD_INT 85
17406: PUSH
17407: LD_INT 87
17409: PUSH
17410: LD_INT 88
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: LIST
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
17469: GO 17702
17471: LD_INT 3
17473: DOUBLE
17474: EQUAL
17475: IFTRUE 17479
17477: GO 17701
17479: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
17480: LD_ADDR_VAR 0 4
17484: PUSH
17485: LD_INT 46
17487: PUSH
17488: LD_INT 47
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: LD_INT 2
17496: PUSH
17497: LD_INT 82
17499: PUSH
17500: LD_INT 83
17502: PUSH
17503: LD_INT 84
17505: PUSH
17506: LD_INT 85
17508: PUSH
17509: LD_INT 86
17511: PUSH
17512: LD_INT 11
17514: PUSH
17515: LD_INT 9
17517: PUSH
17518: LD_INT 20
17520: PUSH
17521: LD_INT 19
17523: PUSH
17524: LD_INT 21
17526: PUSH
17527: LD_INT 24
17529: PUSH
17530: LD_INT 22
17532: PUSH
17533: LD_INT 25
17535: PUSH
17536: LD_INT 28
17538: PUSH
17539: LD_INT 29
17541: PUSH
17542: LD_INT 30
17544: PUSH
17545: LD_INT 31
17547: PUSH
17548: LD_INT 37
17550: PUSH
17551: LD_INT 38
17553: PUSH
17554: LD_INT 32
17556: PUSH
17557: LD_INT 27
17559: PUSH
17560: LD_INT 33
17562: PUSH
17563: LD_INT 69
17565: PUSH
17566: LD_INT 39
17568: PUSH
17569: LD_INT 34
17571: PUSH
17572: LD_INT 40
17574: PUSH
17575: LD_INT 71
17577: PUSH
17578: LD_INT 23
17580: PUSH
17581: LD_INT 44
17583: PUSH
17584: LD_INT 48
17586: PUSH
17587: LD_INT 49
17589: PUSH
17590: LD_INT 50
17592: PUSH
17593: LD_INT 51
17595: PUSH
17596: LD_INT 52
17598: PUSH
17599: LD_INT 53
17601: PUSH
17602: LD_INT 54
17604: PUSH
17605: LD_INT 55
17607: PUSH
17608: LD_INT 56
17610: PUSH
17611: LD_INT 57
17613: PUSH
17614: LD_INT 58
17616: PUSH
17617: LD_INT 59
17619: PUSH
17620: LD_INT 63
17622: PUSH
17623: LD_INT 64
17625: PUSH
17626: LD_INT 65
17628: PUSH
17629: LD_INT 82
17631: PUSH
17632: LD_INT 83
17634: PUSH
17635: LD_INT 84
17637: PUSH
17638: LD_INT 85
17640: PUSH
17641: LD_INT 86
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: LIST
17651: LIST
17652: LIST
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: LIST
17658: LIST
17659: LIST
17660: LIST
17661: LIST
17662: LIST
17663: LIST
17664: LIST
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: ST_TO_ADDR
17699: GO 17702
17701: POP
// if state > - 1 and state < 3 then
17702: LD_VAR 0 3
17706: PUSH
17707: LD_INT 1
17709: NEG
17710: GREATER
17711: PUSH
17712: LD_VAR 0 3
17716: PUSH
17717: LD_INT 3
17719: LESS
17720: AND
17721: IFFALSE 17778
// for i in result do
17723: LD_ADDR_VAR 0 5
17727: PUSH
17728: LD_VAR 0 4
17732: PUSH
17733: FOR_IN
17734: IFFALSE 17776
// if GetTech ( i , side ) <> state then
17736: LD_VAR 0 5
17740: PPUSH
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 321
17750: PUSH
17751: LD_VAR 0 3
17755: NONEQUAL
17756: IFFALSE 17774
// result := result diff i ;
17758: LD_ADDR_VAR 0 4
17762: PUSH
17763: LD_VAR 0 4
17767: PUSH
17768: LD_VAR 0 5
17772: DIFF
17773: ST_TO_ADDR
17774: GO 17733
17776: POP
17777: POP
// end ;
17778: LD_VAR 0 4
17782: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// result := true ;
17788: LD_ADDR_VAR 0 3
17792: PUSH
17793: LD_INT 1
17795: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17796: LD_ADDR_VAR 0 5
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 480
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 5
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17869
// for i in tmp do
17820: LD_ADDR_VAR 0 4
17824: PUSH
17825: LD_VAR 0 5
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17867
// if GetTech ( i , side ) <> state_researched then
17833: LD_VAR 0 4
17837: PPUSH
17838: LD_VAR 0 1
17842: PPUSH
17843: CALL_OW 321
17847: PUSH
17848: LD_INT 2
17850: NONEQUAL
17851: IFFALSE 17865
// begin result := false ;
17853: LD_ADDR_VAR 0 3
17857: PUSH
17858: LD_INT 0
17860: ST_TO_ADDR
// exit ;
17861: POP
17862: POP
17863: GO 17869
// end ;
17865: GO 17830
17867: POP
17868: POP
// end ;
17869: LD_VAR 0 3
17873: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
17878: PPUSH
17879: PPUSH
17880: PPUSH
17881: PPUSH
17882: PPUSH
17883: PPUSH
17884: PPUSH
17885: PPUSH
17886: PPUSH
17887: PPUSH
17888: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17889: LD_VAR 0 1
17893: NOT
17894: PUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: CALL_OW 257
17904: PUSH
17905: LD_INT 9
17907: NONEQUAL
17908: OR
17909: IFFALSE 17913
// exit ;
17911: GO 18486
// side := GetSide ( unit ) ;
17913: LD_ADDR_VAR 0 9
17917: PUSH
17918: LD_VAR 0 1
17922: PPUSH
17923: CALL_OW 255
17927: ST_TO_ADDR
// tech_space := tech_spacanom ;
17928: LD_ADDR_VAR 0 12
17932: PUSH
17933: LD_INT 29
17935: ST_TO_ADDR
// tech_time := tech_taurad ;
17936: LD_ADDR_VAR 0 13
17940: PUSH
17941: LD_INT 28
17943: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17944: LD_ADDR_VAR 0 11
17948: PUSH
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17959: LD_VAR 0 11
17963: PPUSH
17964: CALL_OW 247
17968: PUSH
17969: LD_INT 2
17971: EQUAL
17972: IFFALSE 17976
// exit ;
17974: GO 18486
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17976: LD_ADDR_VAR 0 8
17980: PUSH
17981: LD_INT 81
17983: PUSH
17984: LD_VAR 0 9
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 3
17995: PUSH
17996: LD_INT 21
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PPUSH
18014: CALL_OW 69
18018: ST_TO_ADDR
// if not tmp then
18019: LD_VAR 0 8
18023: NOT
18024: IFFALSE 18028
// exit ;
18026: GO 18486
// if in_unit then
18028: LD_VAR 0 11
18032: IFFALSE 18056
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
18034: LD_ADDR_VAR 0 10
18038: PUSH
18039: LD_VAR 0 8
18043: PPUSH
18044: LD_VAR 0 11
18048: PPUSH
18049: CALL_OW 74
18053: ST_TO_ADDR
18054: GO 18076
// enemy := NearestUnitToUnit ( tmp , unit ) ;
18056: LD_ADDR_VAR 0 10
18060: PUSH
18061: LD_VAR 0 8
18065: PPUSH
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 74
18075: ST_TO_ADDR
// if not enemy then
18076: LD_VAR 0 10
18080: NOT
18081: IFFALSE 18085
// exit ;
18083: GO 18486
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
18085: LD_VAR 0 11
18089: PUSH
18090: LD_VAR 0 11
18094: PPUSH
18095: LD_VAR 0 10
18099: PPUSH
18100: CALL_OW 296
18104: PUSH
18105: LD_INT 13
18107: GREATER
18108: AND
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_VAR 0 10
18119: PPUSH
18120: CALL_OW 296
18124: PUSH
18125: LD_INT 12
18127: GREATER
18128: OR
18129: IFFALSE 18133
// exit ;
18131: GO 18486
// missile := [ 1 ] ;
18133: LD_ADDR_VAR 0 14
18137: PUSH
18138: LD_INT 1
18140: PUSH
18141: EMPTY
18142: LIST
18143: ST_TO_ADDR
// if Researched ( side , tech_space ) then
18144: LD_VAR 0 9
18148: PPUSH
18149: LD_VAR 0 12
18153: PPUSH
18154: CALL_OW 325
18158: IFFALSE 18187
// missile := Replace ( missile , missile + 1 , 2 ) ;
18160: LD_ADDR_VAR 0 14
18164: PUSH
18165: LD_VAR 0 14
18169: PPUSH
18170: LD_VAR 0 14
18174: PUSH
18175: LD_INT 1
18177: PLUS
18178: PPUSH
18179: LD_INT 2
18181: PPUSH
18182: CALL_OW 1
18186: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
18187: LD_VAR 0 9
18191: PPUSH
18192: LD_VAR 0 13
18196: PPUSH
18197: CALL_OW 325
18201: PUSH
18202: LD_VAR 0 10
18206: PPUSH
18207: CALL_OW 255
18211: PPUSH
18212: LD_VAR 0 13
18216: PPUSH
18217: CALL_OW 325
18221: NOT
18222: AND
18223: IFFALSE 18252
// missile := Replace ( missile , missile + 1 , 3 ) ;
18225: LD_ADDR_VAR 0 14
18229: PUSH
18230: LD_VAR 0 14
18234: PPUSH
18235: LD_VAR 0 14
18239: PUSH
18240: LD_INT 1
18242: PLUS
18243: PPUSH
18244: LD_INT 3
18246: PPUSH
18247: CALL_OW 1
18251: ST_TO_ADDR
// if missile < 2 then
18252: LD_VAR 0 14
18256: PUSH
18257: LD_INT 2
18259: LESS
18260: IFFALSE 18264
// exit ;
18262: GO 18486
// x := GetX ( enemy ) ;
18264: LD_ADDR_VAR 0 4
18268: PUSH
18269: LD_VAR 0 10
18273: PPUSH
18274: CALL_OW 250
18278: ST_TO_ADDR
// y := GetY ( enemy ) ;
18279: LD_ADDR_VAR 0 5
18283: PUSH
18284: LD_VAR 0 10
18288: PPUSH
18289: CALL_OW 251
18293: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 4
18303: PUSH
18304: LD_INT 1
18306: NEG
18307: PPUSH
18308: LD_INT 1
18310: PPUSH
18311: CALL_OW 12
18315: PLUS
18316: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
18317: LD_ADDR_VAR 0 7
18321: PUSH
18322: LD_VAR 0 5
18326: PUSH
18327: LD_INT 1
18329: NEG
18330: PPUSH
18331: LD_INT 1
18333: PPUSH
18334: CALL_OW 12
18338: PLUS
18339: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18340: LD_VAR 0 6
18344: PPUSH
18345: LD_VAR 0 7
18349: PPUSH
18350: CALL_OW 488
18354: NOT
18355: IFFALSE 18377
// begin _x := x ;
18357: LD_ADDR_VAR 0 6
18361: PUSH
18362: LD_VAR 0 4
18366: ST_TO_ADDR
// _y := y ;
18367: LD_ADDR_VAR 0 7
18371: PUSH
18372: LD_VAR 0 5
18376: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
18377: LD_ADDR_VAR 0 3
18381: PUSH
18382: LD_INT 1
18384: PPUSH
18385: LD_VAR 0 14
18389: PPUSH
18390: CALL_OW 12
18394: ST_TO_ADDR
// case i of 1 :
18395: LD_VAR 0 3
18399: PUSH
18400: LD_INT 1
18402: DOUBLE
18403: EQUAL
18404: IFTRUE 18408
18406: GO 18425
18408: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
18409: LD_VAR 0 1
18413: PPUSH
18414: LD_VAR 0 10
18418: PPUSH
18419: CALL_OW 115
18423: GO 18486
18425: LD_INT 2
18427: DOUBLE
18428: EQUAL
18429: IFTRUE 18433
18431: GO 18455
18433: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
18434: LD_VAR 0 1
18438: PPUSH
18439: LD_VAR 0 6
18443: PPUSH
18444: LD_VAR 0 7
18448: PPUSH
18449: CALL_OW 153
18453: GO 18486
18455: LD_INT 3
18457: DOUBLE
18458: EQUAL
18459: IFTRUE 18463
18461: GO 18485
18463: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
18464: LD_VAR 0 1
18468: PPUSH
18469: LD_VAR 0 6
18473: PPUSH
18474: LD_VAR 0 7
18478: PPUSH
18479: CALL_OW 154
18483: GO 18486
18485: POP
// end ;
18486: LD_VAR 0 2
18490: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
18491: LD_INT 0
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
// if not unit or not building then
18499: LD_VAR 0 1
18503: NOT
18504: PUSH
18505: LD_VAR 0 2
18509: NOT
18510: OR
18511: IFFALSE 18515
// exit ;
18513: GO 18673
// x := GetX ( building ) ;
18515: LD_ADDR_VAR 0 5
18519: PUSH
18520: LD_VAR 0 2
18524: PPUSH
18525: CALL_OW 250
18529: ST_TO_ADDR
// y := GetY ( building ) ;
18530: LD_ADDR_VAR 0 6
18534: PUSH
18535: LD_VAR 0 2
18539: PPUSH
18540: CALL_OW 251
18544: ST_TO_ADDR
// for i = 0 to 5 do
18545: LD_ADDR_VAR 0 4
18549: PUSH
18550: DOUBLE
18551: LD_INT 0
18553: DEC
18554: ST_TO_ADDR
18555: LD_INT 5
18557: PUSH
18558: FOR_TO
18559: IFFALSE 18671
// begin _x := ShiftX ( x , i , 3 ) ;
18561: LD_ADDR_VAR 0 7
18565: PUSH
18566: LD_VAR 0 5
18570: PPUSH
18571: LD_VAR 0 4
18575: PPUSH
18576: LD_INT 3
18578: PPUSH
18579: CALL_OW 272
18583: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
18584: LD_ADDR_VAR 0 8
18588: PUSH
18589: LD_VAR 0 6
18593: PPUSH
18594: LD_VAR 0 4
18598: PPUSH
18599: LD_INT 3
18601: PPUSH
18602: CALL_OW 273
18606: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
18607: LD_VAR 0 7
18611: PPUSH
18612: LD_VAR 0 8
18616: PPUSH
18617: CALL_OW 488
18621: NOT
18622: IFFALSE 18626
// continue ;
18624: GO 18558
// if HexInfo ( _x , _y ) = 0 then
18626: LD_VAR 0 7
18630: PPUSH
18631: LD_VAR 0 8
18635: PPUSH
18636: CALL_OW 428
18640: PUSH
18641: LD_INT 0
18643: EQUAL
18644: IFFALSE 18669
// begin ComMoveXY ( unit , _x , _y ) ;
18646: LD_VAR 0 1
18650: PPUSH
18651: LD_VAR 0 7
18655: PPUSH
18656: LD_VAR 0 8
18660: PPUSH
18661: CALL_OW 111
// exit ;
18665: POP
18666: POP
18667: GO 18673
// end ; end ;
18669: GO 18558
18671: POP
18672: POP
// end ;
18673: LD_VAR 0 3
18677: RET
// export function ScanBase ( side , base_area ) ; begin
18678: LD_INT 0
18680: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
18681: LD_ADDR_VAR 0 3
18685: PUSH
18686: LD_VAR 0 2
18690: PPUSH
18691: LD_INT 81
18693: PUSH
18694: LD_VAR 0 1
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 70
18707: ST_TO_ADDR
// end ;
18708: LD_VAR 0 3
18712: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
18713: LD_INT 0
18715: PPUSH
18716: PPUSH
18717: PPUSH
18718: PPUSH
// result := false ;
18719: LD_ADDR_VAR 0 2
18723: PUSH
18724: LD_INT 0
18726: ST_TO_ADDR
// side := GetSide ( unit ) ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 255
18741: ST_TO_ADDR
// nat := GetNation ( unit ) ;
18742: LD_ADDR_VAR 0 4
18746: PUSH
18747: LD_VAR 0 1
18751: PPUSH
18752: CALL_OW 248
18756: ST_TO_ADDR
// case nat of 1 :
18757: LD_VAR 0 4
18761: PUSH
18762: LD_INT 1
18764: DOUBLE
18765: EQUAL
18766: IFTRUE 18770
18768: GO 18781
18770: POP
// tech := tech_lassight ; 2 :
18771: LD_ADDR_VAR 0 5
18775: PUSH
18776: LD_INT 12
18778: ST_TO_ADDR
18779: GO 18820
18781: LD_INT 2
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18800
18789: POP
// tech := tech_mortar ; 3 :
18790: LD_ADDR_VAR 0 5
18794: PUSH
18795: LD_INT 41
18797: ST_TO_ADDR
18798: GO 18820
18800: LD_INT 3
18802: DOUBLE
18803: EQUAL
18804: IFTRUE 18808
18806: GO 18819
18808: POP
// tech := tech_bazooka ; end ;
18809: LD_ADDR_VAR 0 5
18813: PUSH
18814: LD_INT 44
18816: ST_TO_ADDR
18817: GO 18820
18819: POP
// if Researched ( side , tech ) then
18820: LD_VAR 0 3
18824: PPUSH
18825: LD_VAR 0 5
18829: PPUSH
18830: CALL_OW 325
18834: IFFALSE 18861
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18836: LD_ADDR_VAR 0 2
18840: PUSH
18841: LD_INT 5
18843: PUSH
18844: LD_INT 8
18846: PUSH
18847: LD_INT 9
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: LIST
18854: PUSH
18855: LD_VAR 0 4
18859: ARRAY
18860: ST_TO_ADDR
// end ;
18861: LD_VAR 0 2
18865: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18866: LD_INT 0
18868: PPUSH
18869: PPUSH
18870: PPUSH
// if not mines then
18871: LD_VAR 0 2
18875: NOT
18876: IFFALSE 18880
// exit ;
18878: GO 19024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18880: LD_ADDR_VAR 0 5
18884: PUSH
18885: LD_INT 81
18887: PUSH
18888: LD_VAR 0 1
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: LD_INT 3
18899: PUSH
18900: LD_INT 21
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: EMPTY
18915: LIST
18916: LIST
18917: PPUSH
18918: CALL_OW 69
18922: ST_TO_ADDR
// for i in mines do
18923: LD_ADDR_VAR 0 4
18927: PUSH
18928: LD_VAR 0 2
18932: PUSH
18933: FOR_IN
18934: IFFALSE 19022
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18936: LD_VAR 0 4
18940: PUSH
18941: LD_INT 1
18943: ARRAY
18944: PPUSH
18945: LD_VAR 0 4
18949: PUSH
18950: LD_INT 2
18952: ARRAY
18953: PPUSH
18954: CALL_OW 458
18958: NOT
18959: IFFALSE 18963
// continue ;
18961: GO 18933
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18963: LD_VAR 0 4
18967: PUSH
18968: LD_INT 1
18970: ARRAY
18971: PPUSH
18972: LD_VAR 0 4
18976: PUSH
18977: LD_INT 2
18979: ARRAY
18980: PPUSH
18981: CALL_OW 428
18985: PUSH
18986: LD_VAR 0 5
18990: IN
18991: IFFALSE 19020
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18993: LD_VAR 0 4
18997: PUSH
18998: LD_INT 1
19000: ARRAY
19001: PPUSH
19002: LD_VAR 0 4
19006: PUSH
19007: LD_INT 2
19009: ARRAY
19010: PPUSH
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 456
// end ;
19020: GO 18933
19022: POP
19023: POP
// end ;
19024: LD_VAR 0 3
19028: RET
// export function Count ( array ) ; var i ; begin
19029: LD_INT 0
19031: PPUSH
19032: PPUSH
// result := 0 ;
19033: LD_ADDR_VAR 0 2
19037: PUSH
19038: LD_INT 0
19040: ST_TO_ADDR
// for i in array do
19041: LD_ADDR_VAR 0 3
19045: PUSH
19046: LD_VAR 0 1
19050: PUSH
19051: FOR_IN
19052: IFFALSE 19076
// if i then
19054: LD_VAR 0 3
19058: IFFALSE 19074
// result := result + 1 ;
19060: LD_ADDR_VAR 0 2
19064: PUSH
19065: LD_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: PLUS
19073: ST_TO_ADDR
19074: GO 19051
19076: POP
19077: POP
// end ;
19078: LD_VAR 0 2
19082: RET
// export function IsEmpty ( building ) ; begin
19083: LD_INT 0
19085: PPUSH
// if not building then
19086: LD_VAR 0 1
19090: NOT
19091: IFFALSE 19095
// exit ;
19093: GO 19138
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
19095: LD_ADDR_VAR 0 2
19099: PUSH
19100: LD_VAR 0 1
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_VAR 0 1
19112: PPUSH
19113: CALL_OW 255
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 58
19124: PUSH
19125: EMPTY
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: IN
19137: ST_TO_ADDR
// end ;
19138: LD_VAR 0 2
19142: RET
// export function IsNotFull ( building ) ; begin
19143: LD_INT 0
19145: PPUSH
// if not building then
19146: LD_VAR 0 1
19150: NOT
19151: IFFALSE 19155
// exit ;
19153: GO 19174
// result := UnitsInside ( building ) < 6 ;
19155: LD_ADDR_VAR 0 2
19159: PUSH
19160: LD_VAR 0 1
19164: PPUSH
19165: CALL_OW 313
19169: PUSH
19170: LD_INT 6
19172: LESS
19173: ST_TO_ADDR
// end ;
19174: LD_VAR 0 2
19178: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
19179: LD_INT 0
19181: PPUSH
19182: PPUSH
19183: PPUSH
19184: PPUSH
// tmp := [ ] ;
19185: LD_ADDR_VAR 0 3
19189: PUSH
19190: EMPTY
19191: ST_TO_ADDR
// list := [ ] ;
19192: LD_ADDR_VAR 0 5
19196: PUSH
19197: EMPTY
19198: ST_TO_ADDR
// for i = 16 to 25 do
19199: LD_ADDR_VAR 0 4
19203: PUSH
19204: DOUBLE
19205: LD_INT 16
19207: DEC
19208: ST_TO_ADDR
19209: LD_INT 25
19211: PUSH
19212: FOR_TO
19213: IFFALSE 19286
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
19215: LD_ADDR_VAR 0 3
19219: PUSH
19220: LD_VAR 0 3
19224: PUSH
19225: LD_INT 22
19227: PUSH
19228: LD_VAR 0 1
19232: PPUSH
19233: CALL_OW 255
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 91
19244: PUSH
19245: LD_VAR 0 1
19249: PUSH
19250: LD_INT 6
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 30
19260: PUSH
19261: LD_VAR 0 4
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: PPUSH
19278: CALL_OW 69
19282: ADD
19283: ST_TO_ADDR
19284: GO 19212
19286: POP
19287: POP
// for i = 1 to tmp do
19288: LD_ADDR_VAR 0 4
19292: PUSH
19293: DOUBLE
19294: LD_INT 1
19296: DEC
19297: ST_TO_ADDR
19298: LD_VAR 0 3
19302: PUSH
19303: FOR_TO
19304: IFFALSE 19392
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
19306: LD_ADDR_VAR 0 5
19310: PUSH
19311: LD_VAR 0 5
19315: PUSH
19316: LD_VAR 0 3
19320: PUSH
19321: LD_VAR 0 4
19325: ARRAY
19326: PPUSH
19327: CALL_OW 266
19331: PUSH
19332: LD_VAR 0 3
19336: PUSH
19337: LD_VAR 0 4
19341: ARRAY
19342: PPUSH
19343: CALL_OW 250
19347: PUSH
19348: LD_VAR 0 3
19352: PUSH
19353: LD_VAR 0 4
19357: ARRAY
19358: PPUSH
19359: CALL_OW 251
19363: PUSH
19364: LD_VAR 0 3
19368: PUSH
19369: LD_VAR 0 4
19373: ARRAY
19374: PPUSH
19375: CALL_OW 254
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: ADD
19389: ST_TO_ADDR
19390: GO 19303
19392: POP
19393: POP
// result := list ;
19394: LD_ADDR_VAR 0 2
19398: PUSH
19399: LD_VAR 0 5
19403: ST_TO_ADDR
// end ;
19404: LD_VAR 0 2
19408: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
19409: LD_INT 0
19411: PPUSH
19412: PPUSH
19413: PPUSH
19414: PPUSH
19415: PPUSH
19416: PPUSH
19417: PPUSH
// if not factory then
19418: LD_VAR 0 1
19422: NOT
19423: IFFALSE 19427
// exit ;
19425: GO 20020
// if control = control_apeman then
19427: LD_VAR 0 4
19431: PUSH
19432: LD_INT 5
19434: EQUAL
19435: IFFALSE 19544
// begin tmp := UnitsInside ( factory ) ;
19437: LD_ADDR_VAR 0 8
19441: PUSH
19442: LD_VAR 0 1
19446: PPUSH
19447: CALL_OW 313
19451: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
19452: LD_VAR 0 8
19456: PPUSH
19457: LD_INT 25
19459: PUSH
19460: LD_INT 12
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PPUSH
19467: CALL_OW 72
19471: NOT
19472: IFFALSE 19482
// control := control_manual ;
19474: LD_ADDR_VAR 0 4
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
19482: LD_ADDR_VAR 0 8
19486: PUSH
19487: LD_VAR 0 1
19491: PPUSH
19492: CALL 19179 0 1
19496: ST_TO_ADDR
// if tmp then
19497: LD_VAR 0 8
19501: IFFALSE 19544
// begin for i in tmp do
19503: LD_ADDR_VAR 0 7
19507: PUSH
19508: LD_VAR 0 8
19512: PUSH
19513: FOR_IN
19514: IFFALSE 19542
// if i [ 1 ] = b_ext_radio then
19516: LD_VAR 0 7
19520: PUSH
19521: LD_INT 1
19523: ARRAY
19524: PUSH
19525: LD_INT 22
19527: EQUAL
19528: IFFALSE 19540
// begin control := control_remote ;
19530: LD_ADDR_VAR 0 4
19534: PUSH
19535: LD_INT 2
19537: ST_TO_ADDR
// break ;
19538: GO 19542
// end ;
19540: GO 19513
19542: POP
19543: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19544: LD_VAR 0 1
19548: PPUSH
19549: LD_VAR 0 2
19553: PPUSH
19554: LD_VAR 0 3
19558: PPUSH
19559: LD_VAR 0 4
19563: PPUSH
19564: LD_VAR 0 5
19568: PPUSH
19569: CALL_OW 448
19573: IFFALSE 19608
// begin result := [ chassis , engine , control , weapon ] ;
19575: LD_ADDR_VAR 0 6
19579: PUSH
19580: LD_VAR 0 2
19584: PUSH
19585: LD_VAR 0 3
19589: PUSH
19590: LD_VAR 0 4
19594: PUSH
19595: LD_VAR 0 5
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: ST_TO_ADDR
// exit ;
19606: GO 20020
// end ; _chassis := AvailableChassisList ( factory ) ;
19608: LD_ADDR_VAR 0 9
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: CALL_OW 475
19622: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
19623: LD_ADDR_VAR 0 11
19627: PUSH
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 476
19637: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
19638: LD_ADDR_VAR 0 12
19642: PUSH
19643: LD_VAR 0 1
19647: PPUSH
19648: CALL_OW 477
19652: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
19653: LD_ADDR_VAR 0 10
19657: PUSH
19658: LD_VAR 0 1
19662: PPUSH
19663: CALL_OW 478
19667: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
19668: LD_VAR 0 9
19672: NOT
19673: PUSH
19674: LD_VAR 0 11
19678: NOT
19679: OR
19680: PUSH
19681: LD_VAR 0 12
19685: NOT
19686: OR
19687: PUSH
19688: LD_VAR 0 10
19692: NOT
19693: OR
19694: IFFALSE 19729
// begin result := [ chassis , engine , control , weapon ] ;
19696: LD_ADDR_VAR 0 6
19700: PUSH
19701: LD_VAR 0 2
19705: PUSH
19706: LD_VAR 0 3
19710: PUSH
19711: LD_VAR 0 4
19715: PUSH
19716: LD_VAR 0 5
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: LIST
19726: ST_TO_ADDR
// exit ;
19727: GO 20020
// end ; if not chassis in _chassis then
19729: LD_VAR 0 2
19733: PUSH
19734: LD_VAR 0 9
19738: IN
19739: NOT
19740: IFFALSE 19766
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
19742: LD_ADDR_VAR 0 2
19746: PUSH
19747: LD_VAR 0 9
19751: PUSH
19752: LD_INT 1
19754: PPUSH
19755: LD_VAR 0 9
19759: PPUSH
19760: CALL_OW 12
19764: ARRAY
19765: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19766: LD_VAR 0 2
19770: PPUSH
19771: LD_VAR 0 3
19775: PPUSH
19776: CALL 20025 0 2
19780: NOT
19781: IFFALSE 19840
// repeat engine := _engine [ 1 ] ;
19783: LD_ADDR_VAR 0 3
19787: PUSH
19788: LD_VAR 0 11
19792: PUSH
19793: LD_INT 1
19795: ARRAY
19796: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19797: LD_ADDR_VAR 0 11
19801: PUSH
19802: LD_VAR 0 11
19806: PPUSH
19807: LD_INT 1
19809: PPUSH
19810: CALL_OW 3
19814: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19815: LD_VAR 0 2
19819: PPUSH
19820: LD_VAR 0 3
19824: PPUSH
19825: CALL 20025 0 2
19829: PUSH
19830: LD_VAR 0 11
19834: PUSH
19835: EMPTY
19836: EQUAL
19837: OR
19838: IFFALSE 19783
// if not control in _control then
19840: LD_VAR 0 4
19844: PUSH
19845: LD_VAR 0 12
19849: IN
19850: NOT
19851: IFFALSE 19877
// control := _control [ rand ( 1 , _control ) ] ;
19853: LD_ADDR_VAR 0 4
19857: PUSH
19858: LD_VAR 0 12
19862: PUSH
19863: LD_INT 1
19865: PPUSH
19866: LD_VAR 0 12
19870: PPUSH
19871: CALL_OW 12
19875: ARRAY
19876: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19877: LD_VAR 0 2
19881: PPUSH
19882: LD_VAR 0 5
19886: PPUSH
19887: CALL 20245 0 2
19891: NOT
19892: IFFALSE 19951
// repeat weapon := _weapon [ 1 ] ;
19894: LD_ADDR_VAR 0 5
19898: PUSH
19899: LD_VAR 0 10
19903: PUSH
19904: LD_INT 1
19906: ARRAY
19907: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19908: LD_ADDR_VAR 0 10
19912: PUSH
19913: LD_VAR 0 10
19917: PPUSH
19918: LD_INT 1
19920: PPUSH
19921: CALL_OW 3
19925: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19926: LD_VAR 0 2
19930: PPUSH
19931: LD_VAR 0 5
19935: PPUSH
19936: CALL 20245 0 2
19940: PUSH
19941: LD_VAR 0 10
19945: PUSH
19946: EMPTY
19947: EQUAL
19948: OR
19949: IFFALSE 19894
// result := [ ] ;
19951: LD_ADDR_VAR 0 6
19955: PUSH
19956: EMPTY
19957: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19958: LD_VAR 0 1
19962: PPUSH
19963: LD_VAR 0 2
19967: PPUSH
19968: LD_VAR 0 3
19972: PPUSH
19973: LD_VAR 0 4
19977: PPUSH
19978: LD_VAR 0 5
19982: PPUSH
19983: CALL_OW 448
19987: IFFALSE 20020
// result := [ chassis , engine , control , weapon ] ;
19989: LD_ADDR_VAR 0 6
19993: PUSH
19994: LD_VAR 0 2
19998: PUSH
19999: LD_VAR 0 3
20003: PUSH
20004: LD_VAR 0 4
20008: PUSH
20009: LD_VAR 0 5
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: ST_TO_ADDR
// end ;
20020: LD_VAR 0 6
20024: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
20025: LD_INT 0
20027: PPUSH
// if not chassis or not engine then
20028: LD_VAR 0 1
20032: NOT
20033: PUSH
20034: LD_VAR 0 2
20038: NOT
20039: OR
20040: IFFALSE 20044
// exit ;
20042: GO 20240
// case engine of engine_solar :
20044: LD_VAR 0 2
20048: PUSH
20049: LD_INT 2
20051: DOUBLE
20052: EQUAL
20053: IFTRUE 20057
20055: GO 20095
20057: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
20058: LD_ADDR_VAR 0 3
20062: PUSH
20063: LD_INT 11
20065: PUSH
20066: LD_INT 12
20068: PUSH
20069: LD_INT 13
20071: PUSH
20072: LD_INT 14
20074: PUSH
20075: LD_INT 1
20077: PUSH
20078: LD_INT 2
20080: PUSH
20081: LD_INT 3
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: LIST
20092: ST_TO_ADDR
20093: GO 20224
20095: LD_INT 1
20097: DOUBLE
20098: EQUAL
20099: IFTRUE 20103
20101: GO 20165
20103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
20104: LD_ADDR_VAR 0 3
20108: PUSH
20109: LD_INT 11
20111: PUSH
20112: LD_INT 12
20114: PUSH
20115: LD_INT 13
20117: PUSH
20118: LD_INT 14
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: LD_INT 2
20126: PUSH
20127: LD_INT 3
20129: PUSH
20130: LD_INT 4
20132: PUSH
20133: LD_INT 5
20135: PUSH
20136: LD_INT 21
20138: PUSH
20139: LD_INT 23
20141: PUSH
20142: LD_INT 22
20144: PUSH
20145: LD_INT 24
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: ST_TO_ADDR
20163: GO 20224
20165: LD_INT 3
20167: DOUBLE
20168: EQUAL
20169: IFTRUE 20173
20171: GO 20223
20173: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20174: LD_ADDR_VAR 0 3
20178: PUSH
20179: LD_INT 13
20181: PUSH
20182: LD_INT 14
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: LD_INT 3
20190: PUSH
20191: LD_INT 4
20193: PUSH
20194: LD_INT 5
20196: PUSH
20197: LD_INT 21
20199: PUSH
20200: LD_INT 22
20202: PUSH
20203: LD_INT 23
20205: PUSH
20206: LD_INT 24
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: ST_TO_ADDR
20221: GO 20224
20223: POP
// result := ( chassis in result ) ;
20224: LD_ADDR_VAR 0 3
20228: PUSH
20229: LD_VAR 0 1
20233: PUSH
20234: LD_VAR 0 3
20238: IN
20239: ST_TO_ADDR
// end ;
20240: LD_VAR 0 3
20244: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
20245: LD_INT 0
20247: PPUSH
// if not chassis or not weapon then
20248: LD_VAR 0 1
20252: NOT
20253: PUSH
20254: LD_VAR 0 2
20258: NOT
20259: OR
20260: IFFALSE 20264
// exit ;
20262: GO 21326
// case weapon of us_machine_gun :
20264: LD_VAR 0 2
20268: PUSH
20269: LD_INT 2
20271: DOUBLE
20272: EQUAL
20273: IFTRUE 20277
20275: GO 20307
20277: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
20278: LD_ADDR_VAR 0 3
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: LD_INT 3
20291: PUSH
20292: LD_INT 4
20294: PUSH
20295: LD_INT 5
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: ST_TO_ADDR
20305: GO 21310
20307: LD_INT 3
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20345
20315: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: LD_INT 1
20323: PUSH
20324: LD_INT 2
20326: PUSH
20327: LD_INT 3
20329: PUSH
20330: LD_INT 4
20332: PUSH
20333: LD_INT 5
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: ST_TO_ADDR
20343: GO 21310
20345: LD_INT 11
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20383
20353: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
20354: LD_ADDR_VAR 0 3
20358: PUSH
20359: LD_INT 1
20361: PUSH
20362: LD_INT 2
20364: PUSH
20365: LD_INT 3
20367: PUSH
20368: LD_INT 4
20370: PUSH
20371: LD_INT 5
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: ST_TO_ADDR
20381: GO 21310
20383: LD_INT 4
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20417
20391: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
20392: LD_ADDR_VAR 0 3
20396: PUSH
20397: LD_INT 2
20399: PUSH
20400: LD_INT 3
20402: PUSH
20403: LD_INT 4
20405: PUSH
20406: LD_INT 5
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: ST_TO_ADDR
20415: GO 21310
20417: LD_INT 5
20419: DOUBLE
20420: EQUAL
20421: IFTRUE 20425
20423: GO 20451
20425: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 2
20433: PUSH
20434: LD_INT 3
20436: PUSH
20437: LD_INT 4
20439: PUSH
20440: LD_INT 5
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: LIST
20447: LIST
20448: ST_TO_ADDR
20449: GO 21310
20451: LD_INT 9
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20485
20459: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: LD_INT 2
20467: PUSH
20468: LD_INT 3
20470: PUSH
20471: LD_INT 4
20473: PUSH
20474: LD_INT 5
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: ST_TO_ADDR
20483: GO 21310
20485: LD_INT 7
20487: DOUBLE
20488: EQUAL
20489: IFTRUE 20493
20491: GO 20519
20493: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
20494: LD_ADDR_VAR 0 3
20498: PUSH
20499: LD_INT 2
20501: PUSH
20502: LD_INT 3
20504: PUSH
20505: LD_INT 4
20507: PUSH
20508: LD_INT 5
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: ST_TO_ADDR
20517: GO 21310
20519: LD_INT 12
20521: DOUBLE
20522: EQUAL
20523: IFTRUE 20527
20525: GO 20553
20527: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
20528: LD_ADDR_VAR 0 3
20532: PUSH
20533: LD_INT 2
20535: PUSH
20536: LD_INT 3
20538: PUSH
20539: LD_INT 4
20541: PUSH
20542: LD_INT 5
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: ST_TO_ADDR
20551: GO 21310
20553: LD_INT 13
20555: DOUBLE
20556: EQUAL
20557: IFTRUE 20561
20559: GO 20587
20561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
20562: LD_ADDR_VAR 0 3
20566: PUSH
20567: LD_INT 2
20569: PUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 4
20575: PUSH
20576: LD_INT 5
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: LIST
20583: LIST
20584: ST_TO_ADDR
20585: GO 21310
20587: LD_INT 14
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20613
20595: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
20596: LD_ADDR_VAR 0 3
20600: PUSH
20601: LD_INT 4
20603: PUSH
20604: LD_INT 5
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: ST_TO_ADDR
20611: GO 21310
20613: LD_INT 6
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20639
20621: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
20622: LD_ADDR_VAR 0 3
20626: PUSH
20627: LD_INT 4
20629: PUSH
20630: LD_INT 5
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: ST_TO_ADDR
20637: GO 21310
20639: LD_INT 10
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20665
20647: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_INT 4
20655: PUSH
20656: LD_INT 5
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: ST_TO_ADDR
20663: GO 21310
20665: LD_INT 22
20667: DOUBLE
20668: EQUAL
20669: IFTRUE 20673
20671: GO 20699
20673: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
20674: LD_ADDR_VAR 0 3
20678: PUSH
20679: LD_INT 11
20681: PUSH
20682: LD_INT 12
20684: PUSH
20685: LD_INT 13
20687: PUSH
20688: LD_INT 14
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: ST_TO_ADDR
20697: GO 21310
20699: LD_INT 23
20701: DOUBLE
20702: EQUAL
20703: IFTRUE 20707
20705: GO 20733
20707: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
20708: LD_ADDR_VAR 0 3
20712: PUSH
20713: LD_INT 11
20715: PUSH
20716: LD_INT 12
20718: PUSH
20719: LD_INT 13
20721: PUSH
20722: LD_INT 14
20724: PUSH
20725: EMPTY
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: ST_TO_ADDR
20731: GO 21310
20733: LD_INT 24
20735: DOUBLE
20736: EQUAL
20737: IFTRUE 20741
20739: GO 20767
20741: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
20742: LD_ADDR_VAR 0 3
20746: PUSH
20747: LD_INT 11
20749: PUSH
20750: LD_INT 12
20752: PUSH
20753: LD_INT 13
20755: PUSH
20756: LD_INT 14
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: ST_TO_ADDR
20765: GO 21310
20767: LD_INT 30
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20801
20775: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: LD_INT 11
20783: PUSH
20784: LD_INT 12
20786: PUSH
20787: LD_INT 13
20789: PUSH
20790: LD_INT 14
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: ST_TO_ADDR
20799: GO 21310
20801: LD_INT 25
20803: DOUBLE
20804: EQUAL
20805: IFTRUE 20809
20807: GO 20827
20809: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20810: LD_ADDR_VAR 0 3
20814: PUSH
20815: LD_INT 13
20817: PUSH
20818: LD_INT 14
20820: PUSH
20821: EMPTY
20822: LIST
20823: LIST
20824: ST_TO_ADDR
20825: GO 21310
20827: LD_INT 27
20829: DOUBLE
20830: EQUAL
20831: IFTRUE 20835
20833: GO 20853
20835: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
20836: LD_ADDR_VAR 0 3
20840: PUSH
20841: LD_INT 13
20843: PUSH
20844: LD_INT 14
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: ST_TO_ADDR
20851: GO 21310
20853: LD_EXP 112
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20889
20863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20864: LD_ADDR_VAR 0 3
20868: PUSH
20869: LD_INT 11
20871: PUSH
20872: LD_INT 12
20874: PUSH
20875: LD_INT 13
20877: PUSH
20878: LD_INT 14
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: LIST
20885: LIST
20886: ST_TO_ADDR
20887: GO 21310
20889: LD_INT 28
20891: DOUBLE
20892: EQUAL
20893: IFTRUE 20897
20895: GO 20915
20897: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20898: LD_ADDR_VAR 0 3
20902: PUSH
20903: LD_INT 13
20905: PUSH
20906: LD_INT 14
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: ST_TO_ADDR
20913: GO 21310
20915: LD_INT 29
20917: DOUBLE
20918: EQUAL
20919: IFTRUE 20923
20921: GO 20941
20923: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20924: LD_ADDR_VAR 0 3
20928: PUSH
20929: LD_INT 13
20931: PUSH
20932: LD_INT 14
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: ST_TO_ADDR
20939: GO 21310
20941: LD_INT 31
20943: DOUBLE
20944: EQUAL
20945: IFTRUE 20949
20947: GO 20967
20949: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20950: LD_ADDR_VAR 0 3
20954: PUSH
20955: LD_INT 13
20957: PUSH
20958: LD_INT 14
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: ST_TO_ADDR
20965: GO 21310
20967: LD_INT 26
20969: DOUBLE
20970: EQUAL
20971: IFTRUE 20975
20973: GO 20993
20975: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20976: LD_ADDR_VAR 0 3
20980: PUSH
20981: LD_INT 13
20983: PUSH
20984: LD_INT 14
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: ST_TO_ADDR
20991: GO 21310
20993: LD_INT 42
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21027
21001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
21002: LD_ADDR_VAR 0 3
21006: PUSH
21007: LD_INT 21
21009: PUSH
21010: LD_INT 22
21012: PUSH
21013: LD_INT 23
21015: PUSH
21016: LD_INT 24
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: ST_TO_ADDR
21025: GO 21310
21027: LD_INT 43
21029: DOUBLE
21030: EQUAL
21031: IFTRUE 21035
21033: GO 21061
21035: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
21036: LD_ADDR_VAR 0 3
21040: PUSH
21041: LD_INT 21
21043: PUSH
21044: LD_INT 22
21046: PUSH
21047: LD_INT 23
21049: PUSH
21050: LD_INT 24
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: LIST
21058: ST_TO_ADDR
21059: GO 21310
21061: LD_INT 44
21063: DOUBLE
21064: EQUAL
21065: IFTRUE 21069
21067: GO 21095
21069: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
21070: LD_ADDR_VAR 0 3
21074: PUSH
21075: LD_INT 21
21077: PUSH
21078: LD_INT 22
21080: PUSH
21081: LD_INT 23
21083: PUSH
21084: LD_INT 24
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: LIST
21092: ST_TO_ADDR
21093: GO 21310
21095: LD_INT 45
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21129
21103: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
21104: LD_ADDR_VAR 0 3
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_INT 23
21117: PUSH
21118: LD_INT 24
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: ST_TO_ADDR
21127: GO 21310
21129: LD_INT 49
21131: DOUBLE
21132: EQUAL
21133: IFTRUE 21137
21135: GO 21163
21137: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
21138: LD_ADDR_VAR 0 3
21142: PUSH
21143: LD_INT 21
21145: PUSH
21146: LD_INT 22
21148: PUSH
21149: LD_INT 23
21151: PUSH
21152: LD_INT 24
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: LIST
21160: ST_TO_ADDR
21161: GO 21310
21163: LD_INT 51
21165: DOUBLE
21166: EQUAL
21167: IFTRUE 21171
21169: GO 21197
21171: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
21172: LD_ADDR_VAR 0 3
21176: PUSH
21177: LD_INT 21
21179: PUSH
21180: LD_INT 22
21182: PUSH
21183: LD_INT 23
21185: PUSH
21186: LD_INT 24
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: ST_TO_ADDR
21195: GO 21310
21197: LD_INT 52
21199: DOUBLE
21200: EQUAL
21201: IFTRUE 21205
21203: GO 21231
21205: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
21206: LD_ADDR_VAR 0 3
21210: PUSH
21211: LD_INT 21
21213: PUSH
21214: LD_INT 22
21216: PUSH
21217: LD_INT 23
21219: PUSH
21220: LD_INT 24
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: ST_TO_ADDR
21229: GO 21310
21231: LD_INT 53
21233: DOUBLE
21234: EQUAL
21235: IFTRUE 21239
21237: GO 21257
21239: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
21240: LD_ADDR_VAR 0 3
21244: PUSH
21245: LD_INT 23
21247: PUSH
21248: LD_INT 24
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: ST_TO_ADDR
21255: GO 21310
21257: LD_INT 46
21259: DOUBLE
21260: EQUAL
21261: IFTRUE 21265
21263: GO 21283
21265: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
21266: LD_ADDR_VAR 0 3
21270: PUSH
21271: LD_INT 23
21273: PUSH
21274: LD_INT 24
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: ST_TO_ADDR
21281: GO 21310
21283: LD_INT 47
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21309
21291: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
21292: LD_ADDR_VAR 0 3
21296: PUSH
21297: LD_INT 23
21299: PUSH
21300: LD_INT 24
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: ST_TO_ADDR
21307: GO 21310
21309: POP
// result := ( chassis in result ) ;
21310: LD_ADDR_VAR 0 3
21314: PUSH
21315: LD_VAR 0 1
21319: PUSH
21320: LD_VAR 0 3
21324: IN
21325: ST_TO_ADDR
// end ;
21326: LD_VAR 0 3
21330: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
21331: LD_INT 0
21333: PPUSH
21334: PPUSH
21335: PPUSH
21336: PPUSH
21337: PPUSH
21338: PPUSH
21339: PPUSH
// result := array ;
21340: LD_ADDR_VAR 0 5
21344: PUSH
21345: LD_VAR 0 1
21349: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
21350: LD_VAR 0 1
21354: NOT
21355: PUSH
21356: LD_VAR 0 2
21360: NOT
21361: OR
21362: PUSH
21363: LD_VAR 0 3
21367: NOT
21368: OR
21369: PUSH
21370: LD_VAR 0 2
21374: PUSH
21375: LD_VAR 0 1
21379: GREATER
21380: OR
21381: PUSH
21382: LD_VAR 0 3
21386: PUSH
21387: LD_VAR 0 1
21391: GREATER
21392: OR
21393: IFFALSE 21397
// exit ;
21395: GO 21693
// if direction then
21397: LD_VAR 0 4
21401: IFFALSE 21465
// begin d := 1 ;
21403: LD_ADDR_VAR 0 9
21407: PUSH
21408: LD_INT 1
21410: ST_TO_ADDR
// if i_from > i_to then
21411: LD_VAR 0 2
21415: PUSH
21416: LD_VAR 0 3
21420: GREATER
21421: IFFALSE 21447
// length := ( array - i_from ) + i_to else
21423: LD_ADDR_VAR 0 11
21427: PUSH
21428: LD_VAR 0 1
21432: PUSH
21433: LD_VAR 0 2
21437: MINUS
21438: PUSH
21439: LD_VAR 0 3
21443: PLUS
21444: ST_TO_ADDR
21445: GO 21463
// length := i_to - i_from ;
21447: LD_ADDR_VAR 0 11
21451: PUSH
21452: LD_VAR 0 3
21456: PUSH
21457: LD_VAR 0 2
21461: MINUS
21462: ST_TO_ADDR
// end else
21463: GO 21526
// begin d := - 1 ;
21465: LD_ADDR_VAR 0 9
21469: PUSH
21470: LD_INT 1
21472: NEG
21473: ST_TO_ADDR
// if i_from > i_to then
21474: LD_VAR 0 2
21478: PUSH
21479: LD_VAR 0 3
21483: GREATER
21484: IFFALSE 21504
// length := i_from - i_to else
21486: LD_ADDR_VAR 0 11
21490: PUSH
21491: LD_VAR 0 2
21495: PUSH
21496: LD_VAR 0 3
21500: MINUS
21501: ST_TO_ADDR
21502: GO 21526
// length := ( array - i_to ) + i_from ;
21504: LD_ADDR_VAR 0 11
21508: PUSH
21509: LD_VAR 0 1
21513: PUSH
21514: LD_VAR 0 3
21518: MINUS
21519: PUSH
21520: LD_VAR 0 2
21524: PLUS
21525: ST_TO_ADDR
// end ; if not length then
21526: LD_VAR 0 11
21530: NOT
21531: IFFALSE 21535
// exit ;
21533: GO 21693
// tmp := array ;
21535: LD_ADDR_VAR 0 10
21539: PUSH
21540: LD_VAR 0 1
21544: ST_TO_ADDR
// for i = 1 to length do
21545: LD_ADDR_VAR 0 6
21549: PUSH
21550: DOUBLE
21551: LD_INT 1
21553: DEC
21554: ST_TO_ADDR
21555: LD_VAR 0 11
21559: PUSH
21560: FOR_TO
21561: IFFALSE 21681
// begin for j = 1 to array do
21563: LD_ADDR_VAR 0 7
21567: PUSH
21568: DOUBLE
21569: LD_INT 1
21571: DEC
21572: ST_TO_ADDR
21573: LD_VAR 0 1
21577: PUSH
21578: FOR_TO
21579: IFFALSE 21667
// begin k := j + d ;
21581: LD_ADDR_VAR 0 8
21585: PUSH
21586: LD_VAR 0 7
21590: PUSH
21591: LD_VAR 0 9
21595: PLUS
21596: ST_TO_ADDR
// if k > array then
21597: LD_VAR 0 8
21601: PUSH
21602: LD_VAR 0 1
21606: GREATER
21607: IFFALSE 21617
// k := 1 ;
21609: LD_ADDR_VAR 0 8
21613: PUSH
21614: LD_INT 1
21616: ST_TO_ADDR
// if not k then
21617: LD_VAR 0 8
21621: NOT
21622: IFFALSE 21634
// k := array ;
21624: LD_ADDR_VAR 0 8
21628: PUSH
21629: LD_VAR 0 1
21633: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
21634: LD_ADDR_VAR 0 10
21638: PUSH
21639: LD_VAR 0 10
21643: PPUSH
21644: LD_VAR 0 8
21648: PPUSH
21649: LD_VAR 0 1
21653: PUSH
21654: LD_VAR 0 7
21658: ARRAY
21659: PPUSH
21660: CALL_OW 1
21664: ST_TO_ADDR
// end ;
21665: GO 21578
21667: POP
21668: POP
// array := tmp ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_VAR 0 10
21678: ST_TO_ADDR
// end ;
21679: GO 21560
21681: POP
21682: POP
// result := array ;
21683: LD_ADDR_VAR 0 5
21687: PUSH
21688: LD_VAR 0 1
21692: ST_TO_ADDR
// end ;
21693: LD_VAR 0 5
21697: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
// result := 0 ;
21702: LD_ADDR_VAR 0 3
21706: PUSH
21707: LD_INT 0
21709: ST_TO_ADDR
// if not array or not value in array then
21710: LD_VAR 0 1
21714: NOT
21715: PUSH
21716: LD_VAR 0 2
21720: PUSH
21721: LD_VAR 0 1
21725: IN
21726: NOT
21727: OR
21728: IFFALSE 21732
// exit ;
21730: GO 21786
// for i = 1 to array do
21732: LD_ADDR_VAR 0 4
21736: PUSH
21737: DOUBLE
21738: LD_INT 1
21740: DEC
21741: ST_TO_ADDR
21742: LD_VAR 0 1
21746: PUSH
21747: FOR_TO
21748: IFFALSE 21784
// if value = array [ i ] then
21750: LD_VAR 0 2
21754: PUSH
21755: LD_VAR 0 1
21759: PUSH
21760: LD_VAR 0 4
21764: ARRAY
21765: EQUAL
21766: IFFALSE 21782
// begin result := i ;
21768: LD_ADDR_VAR 0 3
21772: PUSH
21773: LD_VAR 0 4
21777: ST_TO_ADDR
// exit ;
21778: POP
21779: POP
21780: GO 21786
// end ;
21782: GO 21747
21784: POP
21785: POP
// end ;
21786: LD_VAR 0 3
21790: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
21791: LD_INT 0
21793: PPUSH
// vc_chassis := chassis ;
21794: LD_ADDR_OWVAR 37
21798: PUSH
21799: LD_VAR 0 1
21803: ST_TO_ADDR
// vc_engine := engine ;
21804: LD_ADDR_OWVAR 39
21808: PUSH
21809: LD_VAR 0 2
21813: ST_TO_ADDR
// vc_control := control ;
21814: LD_ADDR_OWVAR 38
21818: PUSH
21819: LD_VAR 0 3
21823: ST_TO_ADDR
// vc_weapon := weapon ;
21824: LD_ADDR_OWVAR 40
21828: PUSH
21829: LD_VAR 0 4
21833: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21834: LD_ADDR_OWVAR 41
21838: PUSH
21839: LD_VAR 0 5
21843: ST_TO_ADDR
// end ;
21844: LD_VAR 0 6
21848: RET
// export function WantPlant ( unit ) ; var task ; begin
21849: LD_INT 0
21851: PPUSH
21852: PPUSH
// result := false ;
21853: LD_ADDR_VAR 0 2
21857: PUSH
21858: LD_INT 0
21860: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21861: LD_ADDR_VAR 0 3
21865: PUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 437
21875: ST_TO_ADDR
// if task then
21876: LD_VAR 0 3
21880: IFFALSE 21908
// if task [ 1 ] [ 1 ] = p then
21882: LD_VAR 0 3
21886: PUSH
21887: LD_INT 1
21889: ARRAY
21890: PUSH
21891: LD_INT 1
21893: ARRAY
21894: PUSH
21895: LD_STRING p
21897: EQUAL
21898: IFFALSE 21908
// result := true ;
21900: LD_ADDR_VAR 0 2
21904: PUSH
21905: LD_INT 1
21907: ST_TO_ADDR
// end ;
21908: LD_VAR 0 2
21912: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21913: LD_INT 0
21915: PPUSH
21916: PPUSH
21917: PPUSH
21918: PPUSH
// if pos < 1 then
21919: LD_VAR 0 2
21923: PUSH
21924: LD_INT 1
21926: LESS
21927: IFFALSE 21931
// exit ;
21929: GO 22234
// if pos = 1 then
21931: LD_VAR 0 2
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: IFFALSE 21972
// result := Replace ( arr , pos [ 1 ] , value ) else
21941: LD_ADDR_VAR 0 4
21945: PUSH
21946: LD_VAR 0 1
21950: PPUSH
21951: LD_VAR 0 2
21955: PUSH
21956: LD_INT 1
21958: ARRAY
21959: PPUSH
21960: LD_VAR 0 3
21964: PPUSH
21965: CALL_OW 1
21969: ST_TO_ADDR
21970: GO 22234
// begin tmp := arr ;
21972: LD_ADDR_VAR 0 6
21976: PUSH
21977: LD_VAR 0 1
21981: ST_TO_ADDR
// s_arr := [ tmp ] ;
21982: LD_ADDR_VAR 0 7
21986: PUSH
21987: LD_VAR 0 6
21991: PUSH
21992: EMPTY
21993: LIST
21994: ST_TO_ADDR
// for i = 1 to pos - 1 do
21995: LD_ADDR_VAR 0 5
21999: PUSH
22000: DOUBLE
22001: LD_INT 1
22003: DEC
22004: ST_TO_ADDR
22005: LD_VAR 0 2
22009: PUSH
22010: LD_INT 1
22012: MINUS
22013: PUSH
22014: FOR_TO
22015: IFFALSE 22060
// begin tmp := tmp [ pos [ i ] ] ;
22017: LD_ADDR_VAR 0 6
22021: PUSH
22022: LD_VAR 0 6
22026: PUSH
22027: LD_VAR 0 2
22031: PUSH
22032: LD_VAR 0 5
22036: ARRAY
22037: ARRAY
22038: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
22039: LD_ADDR_VAR 0 7
22043: PUSH
22044: LD_VAR 0 7
22048: PUSH
22049: LD_VAR 0 6
22053: PUSH
22054: EMPTY
22055: LIST
22056: ADD
22057: ST_TO_ADDR
// end ;
22058: GO 22014
22060: POP
22061: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
22062: LD_ADDR_VAR 0 6
22066: PUSH
22067: LD_VAR 0 6
22071: PPUSH
22072: LD_VAR 0 2
22076: PUSH
22077: LD_VAR 0 2
22081: ARRAY
22082: PPUSH
22083: LD_VAR 0 3
22087: PPUSH
22088: CALL_OW 1
22092: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
22093: LD_ADDR_VAR 0 7
22097: PUSH
22098: LD_VAR 0 7
22102: PPUSH
22103: LD_VAR 0 7
22107: PPUSH
22108: LD_VAR 0 6
22112: PPUSH
22113: CALL_OW 1
22117: ST_TO_ADDR
// for i = s_arr downto 2 do
22118: LD_ADDR_VAR 0 5
22122: PUSH
22123: DOUBLE
22124: LD_VAR 0 7
22128: INC
22129: ST_TO_ADDR
22130: LD_INT 2
22132: PUSH
22133: FOR_DOWNTO
22134: IFFALSE 22218
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
22136: LD_ADDR_VAR 0 6
22140: PUSH
22141: LD_VAR 0 7
22145: PUSH
22146: LD_VAR 0 5
22150: PUSH
22151: LD_INT 1
22153: MINUS
22154: ARRAY
22155: PPUSH
22156: LD_VAR 0 2
22160: PUSH
22161: LD_VAR 0 5
22165: PUSH
22166: LD_INT 1
22168: MINUS
22169: ARRAY
22170: PPUSH
22171: LD_VAR 0 7
22175: PUSH
22176: LD_VAR 0 5
22180: ARRAY
22181: PPUSH
22182: CALL_OW 1
22186: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
22187: LD_ADDR_VAR 0 7
22191: PUSH
22192: LD_VAR 0 7
22196: PPUSH
22197: LD_VAR 0 5
22201: PUSH
22202: LD_INT 1
22204: MINUS
22205: PPUSH
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 1
22215: ST_TO_ADDR
// end ;
22216: GO 22133
22218: POP
22219: POP
// result := s_arr [ 1 ] ;
22220: LD_ADDR_VAR 0 4
22224: PUSH
22225: LD_VAR 0 7
22229: PUSH
22230: LD_INT 1
22232: ARRAY
22233: ST_TO_ADDR
// end ; end ;
22234: LD_VAR 0 4
22238: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
22239: LD_INT 0
22241: PPUSH
22242: PPUSH
// if not list then
22243: LD_VAR 0 1
22247: NOT
22248: IFFALSE 22252
// exit ;
22250: GO 22343
// i := list [ pos1 ] ;
22252: LD_ADDR_VAR 0 5
22256: PUSH
22257: LD_VAR 0 1
22261: PUSH
22262: LD_VAR 0 2
22266: ARRAY
22267: ST_TO_ADDR
// if not i then
22268: LD_VAR 0 5
22272: NOT
22273: IFFALSE 22277
// exit ;
22275: GO 22343
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
22277: LD_ADDR_VAR 0 1
22281: PUSH
22282: LD_VAR 0 1
22286: PPUSH
22287: LD_VAR 0 2
22291: PPUSH
22292: LD_VAR 0 1
22296: PUSH
22297: LD_VAR 0 3
22301: ARRAY
22302: PPUSH
22303: CALL_OW 1
22307: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
22308: LD_ADDR_VAR 0 1
22312: PUSH
22313: LD_VAR 0 1
22317: PPUSH
22318: LD_VAR 0 3
22322: PPUSH
22323: LD_VAR 0 5
22327: PPUSH
22328: CALL_OW 1
22332: ST_TO_ADDR
// result := list ;
22333: LD_ADDR_VAR 0 4
22337: PUSH
22338: LD_VAR 0 1
22342: ST_TO_ADDR
// end ;
22343: LD_VAR 0 4
22347: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
22348: LD_INT 0
22350: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
22351: LD_ADDR_VAR 0 5
22355: PUSH
22356: LD_VAR 0 1
22360: PPUSH
22361: CALL_OW 250
22365: PPUSH
22366: LD_VAR 0 1
22370: PPUSH
22371: CALL_OW 251
22375: PPUSH
22376: LD_VAR 0 2
22380: PPUSH
22381: LD_VAR 0 3
22385: PPUSH
22386: LD_VAR 0 4
22390: PPUSH
22391: CALL 22401 0 5
22395: ST_TO_ADDR
// end ;
22396: LD_VAR 0 5
22400: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
22401: LD_INT 0
22403: PPUSH
22404: PPUSH
22405: PPUSH
22406: PPUSH
// if not list then
22407: LD_VAR 0 3
22411: NOT
22412: IFFALSE 22416
// exit ;
22414: GO 22804
// result := [ ] ;
22416: LD_ADDR_VAR 0 6
22420: PUSH
22421: EMPTY
22422: ST_TO_ADDR
// for i in list do
22423: LD_ADDR_VAR 0 7
22427: PUSH
22428: LD_VAR 0 3
22432: PUSH
22433: FOR_IN
22434: IFFALSE 22636
// begin tmp := GetDistUnitXY ( i , x , y ) ;
22436: LD_ADDR_VAR 0 9
22440: PUSH
22441: LD_VAR 0 7
22445: PPUSH
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_VAR 0 2
22455: PPUSH
22456: CALL_OW 297
22460: ST_TO_ADDR
// if not result then
22461: LD_VAR 0 6
22465: NOT
22466: IFFALSE 22492
// result := [ [ i , tmp ] ] else
22468: LD_ADDR_VAR 0 6
22472: PUSH
22473: LD_VAR 0 7
22477: PUSH
22478: LD_VAR 0 9
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: ST_TO_ADDR
22490: GO 22634
// begin if result [ result ] [ 2 ] < tmp then
22492: LD_VAR 0 6
22496: PUSH
22497: LD_VAR 0 6
22501: ARRAY
22502: PUSH
22503: LD_INT 2
22505: ARRAY
22506: PUSH
22507: LD_VAR 0 9
22511: LESS
22512: IFFALSE 22554
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
22514: LD_ADDR_VAR 0 6
22518: PUSH
22519: LD_VAR 0 6
22523: PPUSH
22524: LD_VAR 0 6
22528: PUSH
22529: LD_INT 1
22531: PLUS
22532: PPUSH
22533: LD_VAR 0 7
22537: PUSH
22538: LD_VAR 0 9
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PPUSH
22547: CALL_OW 2
22551: ST_TO_ADDR
22552: GO 22634
// for j = 1 to result do
22554: LD_ADDR_VAR 0 8
22558: PUSH
22559: DOUBLE
22560: LD_INT 1
22562: DEC
22563: ST_TO_ADDR
22564: LD_VAR 0 6
22568: PUSH
22569: FOR_TO
22570: IFFALSE 22632
// begin if tmp < result [ j ] [ 2 ] then
22572: LD_VAR 0 9
22576: PUSH
22577: LD_VAR 0 6
22581: PUSH
22582: LD_VAR 0 8
22586: ARRAY
22587: PUSH
22588: LD_INT 2
22590: ARRAY
22591: LESS
22592: IFFALSE 22630
// begin result := Insert ( result , j , [ i , tmp ] ) ;
22594: LD_ADDR_VAR 0 6
22598: PUSH
22599: LD_VAR 0 6
22603: PPUSH
22604: LD_VAR 0 8
22608: PPUSH
22609: LD_VAR 0 7
22613: PUSH
22614: LD_VAR 0 9
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PPUSH
22623: CALL_OW 2
22627: ST_TO_ADDR
// break ;
22628: GO 22632
// end ; end ;
22630: GO 22569
22632: POP
22633: POP
// end ; end ;
22634: GO 22433
22636: POP
22637: POP
// if result and not asc then
22638: LD_VAR 0 6
22642: PUSH
22643: LD_VAR 0 4
22647: NOT
22648: AND
22649: IFFALSE 22724
// begin tmp := result ;
22651: LD_ADDR_VAR 0 9
22655: PUSH
22656: LD_VAR 0 6
22660: ST_TO_ADDR
// for i = tmp downto 1 do
22661: LD_ADDR_VAR 0 7
22665: PUSH
22666: DOUBLE
22667: LD_VAR 0 9
22671: INC
22672: ST_TO_ADDR
22673: LD_INT 1
22675: PUSH
22676: FOR_DOWNTO
22677: IFFALSE 22722
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
22679: LD_ADDR_VAR 0 6
22683: PUSH
22684: LD_VAR 0 6
22688: PPUSH
22689: LD_VAR 0 9
22693: PUSH
22694: LD_VAR 0 7
22698: MINUS
22699: PUSH
22700: LD_INT 1
22702: PLUS
22703: PPUSH
22704: LD_VAR 0 9
22708: PUSH
22709: LD_VAR 0 7
22713: ARRAY
22714: PPUSH
22715: CALL_OW 1
22719: ST_TO_ADDR
22720: GO 22676
22722: POP
22723: POP
// end ; tmp := [ ] ;
22724: LD_ADDR_VAR 0 9
22728: PUSH
22729: EMPTY
22730: ST_TO_ADDR
// if mode then
22731: LD_VAR 0 5
22735: IFFALSE 22804
// begin for i = 1 to result do
22737: LD_ADDR_VAR 0 7
22741: PUSH
22742: DOUBLE
22743: LD_INT 1
22745: DEC
22746: ST_TO_ADDR
22747: LD_VAR 0 6
22751: PUSH
22752: FOR_TO
22753: IFFALSE 22792
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
22755: LD_ADDR_VAR 0 9
22759: PUSH
22760: LD_VAR 0 9
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: LD_VAR 0 6
22774: PUSH
22775: LD_VAR 0 7
22779: ARRAY
22780: PUSH
22781: LD_INT 1
22783: ARRAY
22784: PPUSH
22785: CALL_OW 1
22789: ST_TO_ADDR
22790: GO 22752
22792: POP
22793: POP
// result := tmp ;
22794: LD_ADDR_VAR 0 6
22798: PUSH
22799: LD_VAR 0 9
22803: ST_TO_ADDR
// end ; end ;
22804: LD_VAR 0 6
22808: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22809: LD_INT 0
22811: PPUSH
22812: PPUSH
22813: PPUSH
22814: PPUSH
22815: PPUSH
22816: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22817: LD_ADDR_VAR 0 5
22821: PUSH
22822: LD_INT 0
22824: PUSH
22825: LD_INT 0
22827: PUSH
22828: LD_INT 0
22830: PUSH
22831: EMPTY
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: ST_TO_ADDR
// if not x or not y then
22839: LD_VAR 0 2
22843: NOT
22844: PUSH
22845: LD_VAR 0 3
22849: NOT
22850: OR
22851: IFFALSE 22855
// exit ;
22853: GO 24507
// if not range then
22855: LD_VAR 0 4
22859: NOT
22860: IFFALSE 22870
// range := 10 ;
22862: LD_ADDR_VAR 0 4
22866: PUSH
22867: LD_INT 10
22869: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22870: LD_ADDR_VAR 0 8
22874: PUSH
22875: LD_INT 81
22877: PUSH
22878: LD_VAR 0 1
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: PUSH
22887: LD_INT 92
22889: PUSH
22890: LD_VAR 0 2
22894: PUSH
22895: LD_VAR 0 3
22899: PUSH
22900: LD_VAR 0 4
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 3
22913: PUSH
22914: LD_INT 21
22916: PUSH
22917: LD_INT 3
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: LIST
22932: PPUSH
22933: CALL_OW 69
22937: ST_TO_ADDR
// if not tmp then
22938: LD_VAR 0 8
22942: NOT
22943: IFFALSE 22947
// exit ;
22945: GO 24507
// for i in tmp do
22947: LD_ADDR_VAR 0 6
22951: PUSH
22952: LD_VAR 0 8
22956: PUSH
22957: FOR_IN
22958: IFFALSE 24482
// begin points := [ 0 , 0 , 0 ] ;
22960: LD_ADDR_VAR 0 9
22964: PUSH
22965: LD_INT 0
22967: PUSH
22968: LD_INT 0
22970: PUSH
22971: LD_INT 0
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: ST_TO_ADDR
// bpoints := 1 ;
22979: LD_ADDR_VAR 0 10
22983: PUSH
22984: LD_INT 1
22986: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22987: LD_VAR 0 6
22991: PPUSH
22992: CALL_OW 247
22996: PUSH
22997: LD_INT 1
22999: DOUBLE
23000: EQUAL
23001: IFTRUE 23005
23003: GO 23583
23005: POP
// begin if GetClass ( i ) = 1 then
23006: LD_VAR 0 6
23010: PPUSH
23011: CALL_OW 257
23015: PUSH
23016: LD_INT 1
23018: EQUAL
23019: IFFALSE 23040
// points := [ 10 , 5 , 3 ] ;
23021: LD_ADDR_VAR 0 9
23025: PUSH
23026: LD_INT 10
23028: PUSH
23029: LD_INT 5
23031: PUSH
23032: LD_INT 3
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: LIST
23039: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
23040: LD_VAR 0 6
23044: PPUSH
23045: CALL_OW 257
23049: PUSH
23050: LD_INT 2
23052: PUSH
23053: LD_INT 3
23055: PUSH
23056: LD_INT 4
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: LIST
23063: IN
23064: IFFALSE 23085
// points := [ 3 , 2 , 1 ] ;
23066: LD_ADDR_VAR 0 9
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: LD_INT 2
23076: PUSH
23077: LD_INT 1
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: LIST
23084: ST_TO_ADDR
// if GetClass ( i ) = 5 then
23085: LD_VAR 0 6
23089: PPUSH
23090: CALL_OW 257
23094: PUSH
23095: LD_INT 5
23097: EQUAL
23098: IFFALSE 23119
// points := [ 130 , 5 , 2 ] ;
23100: LD_ADDR_VAR 0 9
23104: PUSH
23105: LD_INT 130
23107: PUSH
23108: LD_INT 5
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: LIST
23118: ST_TO_ADDR
// if GetClass ( i ) = 8 then
23119: LD_VAR 0 6
23123: PPUSH
23124: CALL_OW 257
23128: PUSH
23129: LD_INT 8
23131: EQUAL
23132: IFFALSE 23153
// points := [ 35 , 35 , 30 ] ;
23134: LD_ADDR_VAR 0 9
23138: PUSH
23139: LD_INT 35
23141: PUSH
23142: LD_INT 35
23144: PUSH
23145: LD_INT 30
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: ST_TO_ADDR
// if GetClass ( i ) = 9 then
23153: LD_VAR 0 6
23157: PPUSH
23158: CALL_OW 257
23162: PUSH
23163: LD_INT 9
23165: EQUAL
23166: IFFALSE 23187
// points := [ 20 , 55 , 40 ] ;
23168: LD_ADDR_VAR 0 9
23172: PUSH
23173: LD_INT 20
23175: PUSH
23176: LD_INT 55
23178: PUSH
23179: LD_INT 40
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
23187: LD_VAR 0 6
23191: PPUSH
23192: CALL_OW 257
23196: PUSH
23197: LD_INT 12
23199: PUSH
23200: LD_INT 16
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: IN
23207: IFFALSE 23228
// points := [ 5 , 3 , 2 ] ;
23209: LD_ADDR_VAR 0 9
23213: PUSH
23214: LD_INT 5
23216: PUSH
23217: LD_INT 3
23219: PUSH
23220: LD_INT 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: LIST
23227: ST_TO_ADDR
// if GetClass ( i ) = 17 then
23228: LD_VAR 0 6
23232: PPUSH
23233: CALL_OW 257
23237: PUSH
23238: LD_INT 17
23240: EQUAL
23241: IFFALSE 23262
// points := [ 100 , 50 , 75 ] ;
23243: LD_ADDR_VAR 0 9
23247: PUSH
23248: LD_INT 100
23250: PUSH
23251: LD_INT 50
23253: PUSH
23254: LD_INT 75
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: ST_TO_ADDR
// if GetClass ( i ) = 15 then
23262: LD_VAR 0 6
23266: PPUSH
23267: CALL_OW 257
23271: PUSH
23272: LD_INT 15
23274: EQUAL
23275: IFFALSE 23296
// points := [ 10 , 5 , 3 ] ;
23277: LD_ADDR_VAR 0 9
23281: PUSH
23282: LD_INT 10
23284: PUSH
23285: LD_INT 5
23287: PUSH
23288: LD_INT 3
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: LIST
23295: ST_TO_ADDR
// if GetClass ( i ) = 14 then
23296: LD_VAR 0 6
23300: PPUSH
23301: CALL_OW 257
23305: PUSH
23306: LD_INT 14
23308: EQUAL
23309: IFFALSE 23330
// points := [ 10 , 0 , 0 ] ;
23311: LD_ADDR_VAR 0 9
23315: PUSH
23316: LD_INT 10
23318: PUSH
23319: LD_INT 0
23321: PUSH
23322: LD_INT 0
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: LIST
23329: ST_TO_ADDR
// if GetClass ( i ) = 11 then
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 257
23339: PUSH
23340: LD_INT 11
23342: EQUAL
23343: IFFALSE 23364
// points := [ 30 , 10 , 5 ] ;
23345: LD_ADDR_VAR 0 9
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 10
23355: PUSH
23356: LD_INT 5
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: LIST
23363: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
23364: LD_VAR 0 1
23368: PPUSH
23369: LD_INT 5
23371: PPUSH
23372: CALL_OW 321
23376: PUSH
23377: LD_INT 2
23379: EQUAL
23380: IFFALSE 23397
// bpoints := bpoints * 1.8 ;
23382: LD_ADDR_VAR 0 10
23386: PUSH
23387: LD_VAR 0 10
23391: PUSH
23392: LD_REAL  1.80000000000000E+0000
23395: MUL
23396: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
23397: LD_VAR 0 6
23401: PPUSH
23402: CALL_OW 257
23406: PUSH
23407: LD_INT 1
23409: PUSH
23410: LD_INT 2
23412: PUSH
23413: LD_INT 3
23415: PUSH
23416: LD_INT 4
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: IN
23425: PUSH
23426: LD_VAR 0 1
23430: PPUSH
23431: LD_INT 51
23433: PPUSH
23434: CALL_OW 321
23438: PUSH
23439: LD_INT 2
23441: EQUAL
23442: AND
23443: IFFALSE 23460
// bpoints := bpoints * 1.2 ;
23445: LD_ADDR_VAR 0 10
23449: PUSH
23450: LD_VAR 0 10
23454: PUSH
23455: LD_REAL  1.20000000000000E+0000
23458: MUL
23459: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
23460: LD_VAR 0 6
23464: PPUSH
23465: CALL_OW 257
23469: PUSH
23470: LD_INT 5
23472: PUSH
23473: LD_INT 7
23475: PUSH
23476: LD_INT 9
23478: PUSH
23479: EMPTY
23480: LIST
23481: LIST
23482: LIST
23483: IN
23484: PUSH
23485: LD_VAR 0 1
23489: PPUSH
23490: LD_INT 52
23492: PPUSH
23493: CALL_OW 321
23497: PUSH
23498: LD_INT 2
23500: EQUAL
23501: AND
23502: IFFALSE 23519
// bpoints := bpoints * 1.5 ;
23504: LD_ADDR_VAR 0 10
23508: PUSH
23509: LD_VAR 0 10
23513: PUSH
23514: LD_REAL  1.50000000000000E+0000
23517: MUL
23518: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
23519: LD_VAR 0 1
23523: PPUSH
23524: LD_INT 66
23526: PPUSH
23527: CALL_OW 321
23531: PUSH
23532: LD_INT 2
23534: EQUAL
23535: IFFALSE 23552
// bpoints := bpoints * 1.1 ;
23537: LD_ADDR_VAR 0 10
23541: PUSH
23542: LD_VAR 0 10
23546: PUSH
23547: LD_REAL  1.10000000000000E+0000
23550: MUL
23551: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
23552: LD_ADDR_VAR 0 10
23556: PUSH
23557: LD_VAR 0 10
23561: PUSH
23562: LD_VAR 0 6
23566: PPUSH
23567: LD_INT 1
23569: PPUSH
23570: CALL_OW 259
23574: PUSH
23575: LD_REAL  1.15000000000000E+0000
23578: MUL
23579: MUL
23580: ST_TO_ADDR
// end ; unit_vehicle :
23581: GO 24411
23583: LD_INT 2
23585: DOUBLE
23586: EQUAL
23587: IFTRUE 23591
23589: GO 24399
23591: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
23592: LD_VAR 0 6
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 42
23607: PUSH
23608: LD_INT 24
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: LIST
23615: IN
23616: IFFALSE 23637
// points := [ 25 , 5 , 3 ] ;
23618: LD_ADDR_VAR 0 9
23622: PUSH
23623: LD_INT 25
23625: PUSH
23626: LD_INT 5
23628: PUSH
23629: LD_INT 3
23631: PUSH
23632: EMPTY
23633: LIST
23634: LIST
23635: LIST
23636: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
23637: LD_VAR 0 6
23641: PPUSH
23642: CALL_OW 264
23646: PUSH
23647: LD_INT 4
23649: PUSH
23650: LD_INT 43
23652: PUSH
23653: LD_INT 25
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: LIST
23660: IN
23661: IFFALSE 23682
// points := [ 40 , 15 , 5 ] ;
23663: LD_ADDR_VAR 0 9
23667: PUSH
23668: LD_INT 40
23670: PUSH
23671: LD_INT 15
23673: PUSH
23674: LD_INT 5
23676: PUSH
23677: EMPTY
23678: LIST
23679: LIST
23680: LIST
23681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
23682: LD_VAR 0 6
23686: PPUSH
23687: CALL_OW 264
23691: PUSH
23692: LD_INT 3
23694: PUSH
23695: LD_INT 23
23697: PUSH
23698: EMPTY
23699: LIST
23700: LIST
23701: IN
23702: IFFALSE 23723
// points := [ 7 , 25 , 8 ] ;
23704: LD_ADDR_VAR 0 9
23708: PUSH
23709: LD_INT 7
23711: PUSH
23712: LD_INT 25
23714: PUSH
23715: LD_INT 8
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
23723: LD_VAR 0 6
23727: PPUSH
23728: CALL_OW 264
23732: PUSH
23733: LD_INT 5
23735: PUSH
23736: LD_INT 27
23738: PUSH
23739: LD_INT 44
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: LIST
23746: IN
23747: IFFALSE 23768
// points := [ 14 , 50 , 16 ] ;
23749: LD_ADDR_VAR 0 9
23753: PUSH
23754: LD_INT 14
23756: PUSH
23757: LD_INT 50
23759: PUSH
23760: LD_INT 16
23762: PUSH
23763: EMPTY
23764: LIST
23765: LIST
23766: LIST
23767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
23768: LD_VAR 0 6
23772: PPUSH
23773: CALL_OW 264
23777: PUSH
23778: LD_INT 6
23780: PUSH
23781: LD_INT 46
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: IN
23788: IFFALSE 23809
// points := [ 32 , 120 , 70 ] ;
23790: LD_ADDR_VAR 0 9
23794: PUSH
23795: LD_INT 32
23797: PUSH
23798: LD_INT 120
23800: PUSH
23801: LD_INT 70
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: LIST
23808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
23809: LD_VAR 0 6
23813: PPUSH
23814: CALL_OW 264
23818: PUSH
23819: LD_INT 7
23821: PUSH
23822: LD_INT 28
23824: PUSH
23825: LD_INT 45
23827: PUSH
23828: LD_EXP 112
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: IN
23839: IFFALSE 23860
// points := [ 35 , 20 , 45 ] ;
23841: LD_ADDR_VAR 0 9
23845: PUSH
23846: LD_INT 35
23848: PUSH
23849: LD_INT 20
23851: PUSH
23852: LD_INT 45
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: LIST
23859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23860: LD_VAR 0 6
23864: PPUSH
23865: CALL_OW 264
23869: PUSH
23870: LD_INT 47
23872: PUSH
23873: EMPTY
23874: LIST
23875: IN
23876: IFFALSE 23897
// points := [ 67 , 45 , 75 ] ;
23878: LD_ADDR_VAR 0 9
23882: PUSH
23883: LD_INT 67
23885: PUSH
23886: LD_INT 45
23888: PUSH
23889: LD_INT 75
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23897: LD_VAR 0 6
23901: PPUSH
23902: CALL_OW 264
23906: PUSH
23907: LD_INT 26
23909: PUSH
23910: EMPTY
23911: LIST
23912: IN
23913: IFFALSE 23934
// points := [ 120 , 30 , 80 ] ;
23915: LD_ADDR_VAR 0 9
23919: PUSH
23920: LD_INT 120
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 80
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23934: LD_VAR 0 6
23938: PPUSH
23939: CALL_OW 264
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: EMPTY
23948: LIST
23949: IN
23950: IFFALSE 23971
// points := [ 40 , 1 , 1 ] ;
23952: LD_ADDR_VAR 0 9
23956: PUSH
23957: LD_INT 40
23959: PUSH
23960: LD_INT 1
23962: PUSH
23963: LD_INT 1
23965: PUSH
23966: EMPTY
23967: LIST
23968: LIST
23969: LIST
23970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23971: LD_VAR 0 6
23975: PPUSH
23976: CALL_OW 264
23980: PUSH
23981: LD_INT 29
23983: PUSH
23984: EMPTY
23985: LIST
23986: IN
23987: IFFALSE 24008
// points := [ 70 , 200 , 400 ] ;
23989: LD_ADDR_VAR 0 9
23993: PUSH
23994: LD_INT 70
23996: PUSH
23997: LD_INT 200
23999: PUSH
24000: LD_INT 400
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: LIST
24007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
24008: LD_VAR 0 6
24012: PPUSH
24013: CALL_OW 264
24017: PUSH
24018: LD_INT 14
24020: PUSH
24021: LD_INT 53
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: IN
24028: IFFALSE 24049
// points := [ 40 , 10 , 20 ] ;
24030: LD_ADDR_VAR 0 9
24034: PUSH
24035: LD_INT 40
24037: PUSH
24038: LD_INT 10
24040: PUSH
24041: LD_INT 20
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: LIST
24048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
24049: LD_VAR 0 6
24053: PPUSH
24054: CALL_OW 264
24058: PUSH
24059: LD_INT 9
24061: PUSH
24062: EMPTY
24063: LIST
24064: IN
24065: IFFALSE 24086
// points := [ 5 , 70 , 20 ] ;
24067: LD_ADDR_VAR 0 9
24071: PUSH
24072: LD_INT 5
24074: PUSH
24075: LD_INT 70
24077: PUSH
24078: LD_INT 20
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
24086: LD_VAR 0 6
24090: PPUSH
24091: CALL_OW 264
24095: PUSH
24096: LD_INT 10
24098: PUSH
24099: EMPTY
24100: LIST
24101: IN
24102: IFFALSE 24123
// points := [ 35 , 110 , 70 ] ;
24104: LD_ADDR_VAR 0 9
24108: PUSH
24109: LD_INT 35
24111: PUSH
24112: LD_INT 110
24114: PUSH
24115: LD_INT 70
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: LIST
24122: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
24123: LD_VAR 0 6
24127: PPUSH
24128: CALL_OW 265
24132: PUSH
24133: LD_INT 25
24135: EQUAL
24136: IFFALSE 24157
// points := [ 80 , 65 , 100 ] ;
24138: LD_ADDR_VAR 0 9
24142: PUSH
24143: LD_INT 80
24145: PUSH
24146: LD_INT 65
24148: PUSH
24149: LD_INT 100
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
24157: LD_VAR 0 6
24161: PPUSH
24162: CALL_OW 263
24166: PUSH
24167: LD_INT 1
24169: EQUAL
24170: IFFALSE 24205
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
24172: LD_ADDR_VAR 0 10
24176: PUSH
24177: LD_VAR 0 10
24181: PUSH
24182: LD_VAR 0 6
24186: PPUSH
24187: CALL_OW 311
24191: PPUSH
24192: LD_INT 3
24194: PPUSH
24195: CALL_OW 259
24199: PUSH
24200: LD_INT 4
24202: MUL
24203: MUL
24204: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
24205: LD_VAR 0 6
24209: PPUSH
24210: CALL_OW 263
24214: PUSH
24215: LD_INT 2
24217: EQUAL
24218: IFFALSE 24269
// begin j := IsControledBy ( i ) ;
24220: LD_ADDR_VAR 0 7
24224: PUSH
24225: LD_VAR 0 6
24229: PPUSH
24230: CALL_OW 312
24234: ST_TO_ADDR
// if j then
24235: LD_VAR 0 7
24239: IFFALSE 24269
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
24241: LD_ADDR_VAR 0 10
24245: PUSH
24246: LD_VAR 0 10
24250: PUSH
24251: LD_VAR 0 7
24255: PPUSH
24256: LD_INT 3
24258: PPUSH
24259: CALL_OW 259
24263: PUSH
24264: LD_INT 3
24266: MUL
24267: MUL
24268: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
24269: LD_VAR 0 6
24273: PPUSH
24274: CALL_OW 264
24278: PUSH
24279: LD_INT 5
24281: PUSH
24282: LD_INT 6
24284: PUSH
24285: LD_INT 46
24287: PUSH
24288: LD_INT 44
24290: PUSH
24291: LD_INT 47
24293: PUSH
24294: LD_INT 45
24296: PUSH
24297: LD_INT 28
24299: PUSH
24300: LD_INT 7
24302: PUSH
24303: LD_INT 27
24305: PUSH
24306: LD_INT 29
24308: PUSH
24309: EMPTY
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: IN
24321: PUSH
24322: LD_VAR 0 1
24326: PPUSH
24327: LD_INT 52
24329: PPUSH
24330: CALL_OW 321
24334: PUSH
24335: LD_INT 2
24337: EQUAL
24338: AND
24339: IFFALSE 24356
// bpoints := bpoints * 1.2 ;
24341: LD_ADDR_VAR 0 10
24345: PUSH
24346: LD_VAR 0 10
24350: PUSH
24351: LD_REAL  1.20000000000000E+0000
24354: MUL
24355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
24356: LD_VAR 0 6
24360: PPUSH
24361: CALL_OW 264
24365: PUSH
24366: LD_INT 6
24368: PUSH
24369: LD_INT 46
24371: PUSH
24372: LD_INT 47
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: IN
24380: IFFALSE 24397
// bpoints := bpoints * 1.2 ;
24382: LD_ADDR_VAR 0 10
24386: PUSH
24387: LD_VAR 0 10
24391: PUSH
24392: LD_REAL  1.20000000000000E+0000
24395: MUL
24396: ST_TO_ADDR
// end ; unit_building :
24397: GO 24411
24399: LD_INT 3
24401: DOUBLE
24402: EQUAL
24403: IFTRUE 24407
24405: GO 24410
24407: POP
// ; end ;
24408: GO 24411
24410: POP
// for j = 1 to 3 do
24411: LD_ADDR_VAR 0 7
24415: PUSH
24416: DOUBLE
24417: LD_INT 1
24419: DEC
24420: ST_TO_ADDR
24421: LD_INT 3
24423: PUSH
24424: FOR_TO
24425: IFFALSE 24478
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
24427: LD_ADDR_VAR 0 5
24431: PUSH
24432: LD_VAR 0 5
24436: PPUSH
24437: LD_VAR 0 7
24441: PPUSH
24442: LD_VAR 0 5
24446: PUSH
24447: LD_VAR 0 7
24451: ARRAY
24452: PUSH
24453: LD_VAR 0 9
24457: PUSH
24458: LD_VAR 0 7
24462: ARRAY
24463: PUSH
24464: LD_VAR 0 10
24468: MUL
24469: PLUS
24470: PPUSH
24471: CALL_OW 1
24475: ST_TO_ADDR
24476: GO 24424
24478: POP
24479: POP
// end ;
24480: GO 22957
24482: POP
24483: POP
// result := Replace ( result , 4 , tmp ) ;
24484: LD_ADDR_VAR 0 5
24488: PUSH
24489: LD_VAR 0 5
24493: PPUSH
24494: LD_INT 4
24496: PPUSH
24497: LD_VAR 0 8
24501: PPUSH
24502: CALL_OW 1
24506: ST_TO_ADDR
// end ;
24507: LD_VAR 0 5
24511: RET
// export function DangerAtRange ( unit , range ) ; begin
24512: LD_INT 0
24514: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
24515: LD_ADDR_VAR 0 3
24519: PUSH
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL_OW 255
24529: PPUSH
24530: LD_VAR 0 1
24534: PPUSH
24535: CALL_OW 250
24539: PPUSH
24540: LD_VAR 0 1
24544: PPUSH
24545: CALL_OW 251
24549: PPUSH
24550: LD_VAR 0 2
24554: PPUSH
24555: CALL 22809 0 4
24559: ST_TO_ADDR
// end ;
24560: LD_VAR 0 3
24564: RET
// export function DangerInArea ( side , area ) ; begin
24565: LD_INT 0
24567: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
24568: LD_ADDR_VAR 0 3
24572: PUSH
24573: LD_VAR 0 2
24577: PPUSH
24578: LD_INT 81
24580: PUSH
24581: LD_VAR 0 1
24585: PUSH
24586: EMPTY
24587: LIST
24588: LIST
24589: PPUSH
24590: CALL_OW 70
24594: ST_TO_ADDR
// end ;
24595: LD_VAR 0 3
24599: RET
// export function IsExtension ( b ) ; begin
24600: LD_INT 0
24602: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
24603: LD_ADDR_VAR 0 2
24607: PUSH
24608: LD_VAR 0 1
24612: PUSH
24613: LD_INT 23
24615: PUSH
24616: LD_INT 20
24618: PUSH
24619: LD_INT 22
24621: PUSH
24622: LD_INT 17
24624: PUSH
24625: LD_INT 24
24627: PUSH
24628: LD_INT 21
24630: PUSH
24631: LD_INT 19
24633: PUSH
24634: LD_INT 16
24636: PUSH
24637: LD_INT 25
24639: PUSH
24640: LD_INT 18
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: IN
24655: ST_TO_ADDR
// end ;
24656: LD_VAR 0 2
24660: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
24661: LD_INT 0
24663: PPUSH
24664: PPUSH
24665: PPUSH
// result := [ ] ;
24666: LD_ADDR_VAR 0 4
24670: PUSH
24671: EMPTY
24672: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
24673: LD_ADDR_VAR 0 5
24677: PUSH
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_INT 21
24685: PUSH
24686: LD_INT 3
24688: PUSH
24689: EMPTY
24690: LIST
24691: LIST
24692: PPUSH
24693: CALL_OW 70
24697: ST_TO_ADDR
// if not tmp then
24698: LD_VAR 0 5
24702: NOT
24703: IFFALSE 24707
// exit ;
24705: GO 24771
// if checkLink then
24707: LD_VAR 0 3
24711: IFFALSE 24761
// begin for i in tmp do
24713: LD_ADDR_VAR 0 6
24717: PUSH
24718: LD_VAR 0 5
24722: PUSH
24723: FOR_IN
24724: IFFALSE 24759
// if GetBase ( i ) <> base then
24726: LD_VAR 0 6
24730: PPUSH
24731: CALL_OW 274
24735: PUSH
24736: LD_VAR 0 1
24740: NONEQUAL
24741: IFFALSE 24757
// ComLinkToBase ( base , i ) ;
24743: LD_VAR 0 1
24747: PPUSH
24748: LD_VAR 0 6
24752: PPUSH
24753: CALL_OW 169
24757: GO 24723
24759: POP
24760: POP
// end ; result := tmp ;
24761: LD_ADDR_VAR 0 4
24765: PUSH
24766: LD_VAR 0 5
24770: ST_TO_ADDR
// end ;
24771: LD_VAR 0 4
24775: RET
// export function ComComplete ( units , b ) ; var i ; begin
24776: LD_INT 0
24778: PPUSH
24779: PPUSH
// if not units then
24780: LD_VAR 0 1
24784: NOT
24785: IFFALSE 24789
// exit ;
24787: GO 24879
// for i in units do
24789: LD_ADDR_VAR 0 4
24793: PUSH
24794: LD_VAR 0 1
24798: PUSH
24799: FOR_IN
24800: IFFALSE 24877
// if BuildingStatus ( b ) = bs_build then
24802: LD_VAR 0 2
24806: PPUSH
24807: CALL_OW 461
24811: PUSH
24812: LD_INT 1
24814: EQUAL
24815: IFFALSE 24875
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
24817: LD_VAR 0 4
24821: PPUSH
24822: LD_STRING h
24824: PUSH
24825: LD_VAR 0 2
24829: PPUSH
24830: CALL_OW 250
24834: PUSH
24835: LD_VAR 0 2
24839: PPUSH
24840: CALL_OW 251
24844: PUSH
24845: LD_VAR 0 2
24849: PUSH
24850: LD_INT 0
24852: PUSH
24853: LD_INT 0
24855: PUSH
24856: LD_INT 0
24858: PUSH
24859: EMPTY
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: PUSH
24868: EMPTY
24869: LIST
24870: PPUSH
24871: CALL_OW 446
24875: GO 24799
24877: POP
24878: POP
// end ;
24879: LD_VAR 0 3
24883: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24884: LD_INT 0
24886: PPUSH
24887: PPUSH
24888: PPUSH
24889: PPUSH
24890: PPUSH
24891: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
24892: LD_VAR 0 1
24896: NOT
24897: PUSH
24898: LD_VAR 0 1
24902: PPUSH
24903: CALL_OW 263
24907: PUSH
24908: LD_INT 2
24910: NONEQUAL
24911: OR
24912: IFFALSE 24916
// exit ;
24914: GO 25232
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24916: LD_ADDR_VAR 0 6
24920: PUSH
24921: LD_INT 22
24923: PUSH
24924: LD_VAR 0 1
24928: PPUSH
24929: CALL_OW 255
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 30
24943: PUSH
24944: LD_INT 36
24946: PUSH
24947: EMPTY
24948: LIST
24949: LIST
24950: PUSH
24951: LD_INT 34
24953: PUSH
24954: LD_INT 31
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: LIST
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PPUSH
24970: CALL_OW 69
24974: ST_TO_ADDR
// if not tmp then
24975: LD_VAR 0 6
24979: NOT
24980: IFFALSE 24984
// exit ;
24982: GO 25232
// result := [ ] ;
24984: LD_ADDR_VAR 0 2
24988: PUSH
24989: EMPTY
24990: ST_TO_ADDR
// for i in tmp do
24991: LD_ADDR_VAR 0 3
24995: PUSH
24996: LD_VAR 0 6
25000: PUSH
25001: FOR_IN
25002: IFFALSE 25073
// begin t := UnitsInside ( i ) ;
25004: LD_ADDR_VAR 0 4
25008: PUSH
25009: LD_VAR 0 3
25013: PPUSH
25014: CALL_OW 313
25018: ST_TO_ADDR
// if t then
25019: LD_VAR 0 4
25023: IFFALSE 25071
// for j in t do
25025: LD_ADDR_VAR 0 7
25029: PUSH
25030: LD_VAR 0 4
25034: PUSH
25035: FOR_IN
25036: IFFALSE 25069
// result := Replace ( result , result + 1 , j ) ;
25038: LD_ADDR_VAR 0 2
25042: PUSH
25043: LD_VAR 0 2
25047: PPUSH
25048: LD_VAR 0 2
25052: PUSH
25053: LD_INT 1
25055: PLUS
25056: PPUSH
25057: LD_VAR 0 7
25061: PPUSH
25062: CALL_OW 1
25066: ST_TO_ADDR
25067: GO 25035
25069: POP
25070: POP
// end ;
25071: GO 25001
25073: POP
25074: POP
// if not result then
25075: LD_VAR 0 2
25079: NOT
25080: IFFALSE 25084
// exit ;
25082: GO 25232
// mech := result [ 1 ] ;
25084: LD_ADDR_VAR 0 5
25088: PUSH
25089: LD_VAR 0 2
25093: PUSH
25094: LD_INT 1
25096: ARRAY
25097: ST_TO_ADDR
// if result > 1 then
25098: LD_VAR 0 2
25102: PUSH
25103: LD_INT 1
25105: GREATER
25106: IFFALSE 25218
// begin for i = 2 to result do
25108: LD_ADDR_VAR 0 3
25112: PUSH
25113: DOUBLE
25114: LD_INT 2
25116: DEC
25117: ST_TO_ADDR
25118: LD_VAR 0 2
25122: PUSH
25123: FOR_TO
25124: IFFALSE 25216
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
25126: LD_ADDR_VAR 0 4
25130: PUSH
25131: LD_VAR 0 2
25135: PUSH
25136: LD_VAR 0 3
25140: ARRAY
25141: PPUSH
25142: LD_INT 3
25144: PPUSH
25145: CALL_OW 259
25149: PUSH
25150: LD_VAR 0 2
25154: PUSH
25155: LD_VAR 0 3
25159: ARRAY
25160: PPUSH
25161: CALL_OW 432
25165: MINUS
25166: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
25167: LD_VAR 0 4
25171: PUSH
25172: LD_VAR 0 5
25176: PPUSH
25177: LD_INT 3
25179: PPUSH
25180: CALL_OW 259
25184: PUSH
25185: LD_VAR 0 5
25189: PPUSH
25190: CALL_OW 432
25194: MINUS
25195: GREATEREQUAL
25196: IFFALSE 25214
// mech := result [ i ] ;
25198: LD_ADDR_VAR 0 5
25202: PUSH
25203: LD_VAR 0 2
25207: PUSH
25208: LD_VAR 0 3
25212: ARRAY
25213: ST_TO_ADDR
// end ;
25214: GO 25123
25216: POP
25217: POP
// end ; ComLinkTo ( vehicle , mech ) ;
25218: LD_VAR 0 1
25222: PPUSH
25223: LD_VAR 0 5
25227: PPUSH
25228: CALL_OW 135
// end ;
25232: LD_VAR 0 2
25236: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
25237: LD_INT 0
25239: PPUSH
25240: PPUSH
25241: PPUSH
25242: PPUSH
25243: PPUSH
25244: PPUSH
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
25250: PPUSH
25251: PPUSH
// result := [ ] ;
25252: LD_ADDR_VAR 0 7
25256: PUSH
25257: EMPTY
25258: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
25259: LD_VAR 0 1
25263: PPUSH
25264: CALL_OW 266
25268: PUSH
25269: LD_INT 0
25271: PUSH
25272: LD_INT 1
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: IN
25279: NOT
25280: IFFALSE 25284
// exit ;
25282: GO 26918
// if name then
25284: LD_VAR 0 3
25288: IFFALSE 25304
// SetBName ( base_dep , name ) ;
25290: LD_VAR 0 1
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 500
// base := GetBase ( base_dep ) ;
25304: LD_ADDR_VAR 0 15
25308: PUSH
25309: LD_VAR 0 1
25313: PPUSH
25314: CALL_OW 274
25318: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
25319: LD_ADDR_VAR 0 16
25323: PUSH
25324: LD_VAR 0 1
25328: PPUSH
25329: CALL_OW 255
25333: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
25334: LD_ADDR_VAR 0 17
25338: PUSH
25339: LD_VAR 0 1
25343: PPUSH
25344: CALL_OW 248
25348: ST_TO_ADDR
// if sources then
25349: LD_VAR 0 5
25353: IFFALSE 25400
// for i = 1 to 3 do
25355: LD_ADDR_VAR 0 8
25359: PUSH
25360: DOUBLE
25361: LD_INT 1
25363: DEC
25364: ST_TO_ADDR
25365: LD_INT 3
25367: PUSH
25368: FOR_TO
25369: IFFALSE 25398
// AddResourceType ( base , i , sources [ i ] ) ;
25371: LD_VAR 0 15
25375: PPUSH
25376: LD_VAR 0 8
25380: PPUSH
25381: LD_VAR 0 5
25385: PUSH
25386: LD_VAR 0 8
25390: ARRAY
25391: PPUSH
25392: CALL_OW 276
25396: GO 25368
25398: POP
25399: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
25400: LD_ADDR_VAR 0 18
25404: PUSH
25405: LD_VAR 0 15
25409: PPUSH
25410: LD_VAR 0 2
25414: PPUSH
25415: LD_INT 1
25417: PPUSH
25418: CALL 24661 0 3
25422: ST_TO_ADDR
// InitHc ;
25423: CALL_OW 19
// InitUc ;
25427: CALL_OW 18
// uc_side := side ;
25431: LD_ADDR_OWVAR 20
25435: PUSH
25436: LD_VAR 0 16
25440: ST_TO_ADDR
// uc_nation := nation ;
25441: LD_ADDR_OWVAR 21
25445: PUSH
25446: LD_VAR 0 17
25450: ST_TO_ADDR
// if buildings then
25451: LD_VAR 0 18
25455: IFFALSE 26777
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
25457: LD_ADDR_VAR 0 19
25461: PUSH
25462: LD_VAR 0 18
25466: PPUSH
25467: LD_INT 2
25469: PUSH
25470: LD_INT 30
25472: PUSH
25473: LD_INT 29
25475: PUSH
25476: EMPTY
25477: LIST
25478: LIST
25479: PUSH
25480: LD_INT 30
25482: PUSH
25483: LD_INT 30
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: EMPTY
25491: LIST
25492: LIST
25493: LIST
25494: PPUSH
25495: CALL_OW 72
25499: ST_TO_ADDR
// if tmp then
25500: LD_VAR 0 19
25504: IFFALSE 25552
// for i in tmp do
25506: LD_ADDR_VAR 0 8
25510: PUSH
25511: LD_VAR 0 19
25515: PUSH
25516: FOR_IN
25517: IFFALSE 25550
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
25519: LD_VAR 0 8
25523: PPUSH
25524: CALL_OW 250
25528: PPUSH
25529: LD_VAR 0 8
25533: PPUSH
25534: CALL_OW 251
25538: PPUSH
25539: LD_VAR 0 16
25543: PPUSH
25544: CALL_OW 441
25548: GO 25516
25550: POP
25551: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
25552: LD_VAR 0 18
25556: PPUSH
25557: LD_INT 2
25559: PUSH
25560: LD_INT 30
25562: PUSH
25563: LD_INT 32
25565: PUSH
25566: EMPTY
25567: LIST
25568: LIST
25569: PUSH
25570: LD_INT 30
25572: PUSH
25573: LD_INT 33
25575: PUSH
25576: EMPTY
25577: LIST
25578: LIST
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: LIST
25584: PPUSH
25585: CALL_OW 72
25589: IFFALSE 25677
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
25591: LD_ADDR_VAR 0 8
25595: PUSH
25596: LD_VAR 0 18
25600: PPUSH
25601: LD_INT 2
25603: PUSH
25604: LD_INT 30
25606: PUSH
25607: LD_INT 32
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PUSH
25614: LD_INT 30
25616: PUSH
25617: LD_INT 33
25619: PUSH
25620: EMPTY
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: LIST
25628: PPUSH
25629: CALL_OW 72
25633: PUSH
25634: FOR_IN
25635: IFFALSE 25675
// begin if not GetBWeapon ( i ) then
25637: LD_VAR 0 8
25641: PPUSH
25642: CALL_OW 269
25646: NOT
25647: IFFALSE 25673
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
25649: LD_VAR 0 8
25653: PPUSH
25654: LD_VAR 0 8
25658: PPUSH
25659: LD_VAR 0 2
25663: PPUSH
25664: CALL 26923 0 2
25668: PPUSH
25669: CALL_OW 431
// end ;
25673: GO 25634
25675: POP
25676: POP
// end ; for i = 1 to personel do
25677: LD_ADDR_VAR 0 8
25681: PUSH
25682: DOUBLE
25683: LD_INT 1
25685: DEC
25686: ST_TO_ADDR
25687: LD_VAR 0 6
25691: PUSH
25692: FOR_TO
25693: IFFALSE 26757
// begin if i > 4 then
25695: LD_VAR 0 8
25699: PUSH
25700: LD_INT 4
25702: GREATER
25703: IFFALSE 25707
// break ;
25705: GO 26757
// case i of 1 :
25707: LD_VAR 0 8
25711: PUSH
25712: LD_INT 1
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25720
25718: GO 25800
25720: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
25721: LD_ADDR_VAR 0 12
25725: PUSH
25726: LD_VAR 0 18
25730: PPUSH
25731: LD_INT 22
25733: PUSH
25734: LD_VAR 0 16
25738: PUSH
25739: EMPTY
25740: LIST
25741: LIST
25742: PUSH
25743: LD_INT 58
25745: PUSH
25746: EMPTY
25747: LIST
25748: PUSH
25749: LD_INT 2
25751: PUSH
25752: LD_INT 30
25754: PUSH
25755: LD_INT 32
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 30
25764: PUSH
25765: LD_INT 4
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: LD_INT 30
25774: PUSH
25775: LD_INT 5
25777: PUSH
25778: EMPTY
25779: LIST
25780: LIST
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: LIST
25786: LIST
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 72
25797: ST_TO_ADDR
25798: GO 26022
25800: LD_INT 2
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25870
25808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
25809: LD_ADDR_VAR 0 12
25813: PUSH
25814: LD_VAR 0 18
25818: PPUSH
25819: LD_INT 22
25821: PUSH
25822: LD_VAR 0 16
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: PUSH
25831: LD_INT 2
25833: PUSH
25834: LD_INT 30
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PUSH
25844: LD_INT 30
25846: PUSH
25847: LD_INT 1
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PPUSH
25863: CALL_OW 72
25867: ST_TO_ADDR
25868: GO 26022
25870: LD_INT 3
25872: DOUBLE
25873: EQUAL
25874: IFTRUE 25878
25876: GO 25940
25878: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25879: LD_ADDR_VAR 0 12
25883: PUSH
25884: LD_VAR 0 18
25888: PPUSH
25889: LD_INT 22
25891: PUSH
25892: LD_VAR 0 16
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: PUSH
25904: LD_INT 30
25906: PUSH
25907: LD_INT 2
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: PUSH
25914: LD_INT 30
25916: PUSH
25917: LD_INT 3
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: LIST
25928: PUSH
25929: EMPTY
25930: LIST
25931: LIST
25932: PPUSH
25933: CALL_OW 72
25937: ST_TO_ADDR
25938: GO 26022
25940: LD_INT 4
25942: DOUBLE
25943: EQUAL
25944: IFTRUE 25948
25946: GO 26021
25948: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25949: LD_ADDR_VAR 0 12
25953: PUSH
25954: LD_VAR 0 18
25958: PPUSH
25959: LD_INT 22
25961: PUSH
25962: LD_VAR 0 16
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: LD_INT 30
25976: PUSH
25977: LD_INT 6
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 30
25986: PUSH
25987: LD_INT 7
25989: PUSH
25990: EMPTY
25991: LIST
25992: LIST
25993: PUSH
25994: LD_INT 30
25996: PUSH
25997: LD_INT 8
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PUSH
26004: EMPTY
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: PUSH
26010: EMPTY
26011: LIST
26012: LIST
26013: PPUSH
26014: CALL_OW 72
26018: ST_TO_ADDR
26019: GO 26022
26021: POP
// if i = 1 then
26022: LD_VAR 0 8
26026: PUSH
26027: LD_INT 1
26029: EQUAL
26030: IFFALSE 26141
// begin tmp := [ ] ;
26032: LD_ADDR_VAR 0 19
26036: PUSH
26037: EMPTY
26038: ST_TO_ADDR
// for j in f do
26039: LD_ADDR_VAR 0 9
26043: PUSH
26044: LD_VAR 0 12
26048: PUSH
26049: FOR_IN
26050: IFFALSE 26123
// if GetBType ( j ) = b_bunker then
26052: LD_VAR 0 9
26056: PPUSH
26057: CALL_OW 266
26061: PUSH
26062: LD_INT 32
26064: EQUAL
26065: IFFALSE 26092
// tmp := Insert ( tmp , 1 , j ) else
26067: LD_ADDR_VAR 0 19
26071: PUSH
26072: LD_VAR 0 19
26076: PPUSH
26077: LD_INT 1
26079: PPUSH
26080: LD_VAR 0 9
26084: PPUSH
26085: CALL_OW 2
26089: ST_TO_ADDR
26090: GO 26121
// tmp := Insert ( tmp , tmp + 1 , j ) ;
26092: LD_ADDR_VAR 0 19
26096: PUSH
26097: LD_VAR 0 19
26101: PPUSH
26102: LD_VAR 0 19
26106: PUSH
26107: LD_INT 1
26109: PLUS
26110: PPUSH
26111: LD_VAR 0 9
26115: PPUSH
26116: CALL_OW 2
26120: ST_TO_ADDR
26121: GO 26049
26123: POP
26124: POP
// if tmp then
26125: LD_VAR 0 19
26129: IFFALSE 26141
// f := tmp ;
26131: LD_ADDR_VAR 0 12
26135: PUSH
26136: LD_VAR 0 19
26140: ST_TO_ADDR
// end ; x := personel [ i ] ;
26141: LD_ADDR_VAR 0 13
26145: PUSH
26146: LD_VAR 0 6
26150: PUSH
26151: LD_VAR 0 8
26155: ARRAY
26156: ST_TO_ADDR
// if x = - 1 then
26157: LD_VAR 0 13
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: EQUAL
26166: IFFALSE 26375
// begin for j in f do
26168: LD_ADDR_VAR 0 9
26172: PUSH
26173: LD_VAR 0 12
26177: PUSH
26178: FOR_IN
26179: IFFALSE 26371
// repeat InitHc ;
26181: CALL_OW 19
// if GetBType ( j ) = b_barracks then
26185: LD_VAR 0 9
26189: PPUSH
26190: CALL_OW 266
26194: PUSH
26195: LD_INT 5
26197: EQUAL
26198: IFFALSE 26268
// begin if UnitsInside ( j ) < 3 then
26200: LD_VAR 0 9
26204: PPUSH
26205: CALL_OW 313
26209: PUSH
26210: LD_INT 3
26212: LESS
26213: IFFALSE 26249
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26215: LD_INT 0
26217: PPUSH
26218: LD_INT 5
26220: PUSH
26221: LD_INT 8
26223: PUSH
26224: LD_INT 9
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: LIST
26231: PUSH
26232: LD_VAR 0 17
26236: ARRAY
26237: PPUSH
26238: LD_VAR 0 4
26242: PPUSH
26243: CALL_OW 380
26247: GO 26266
// PrepareHuman ( false , i , skill ) ;
26249: LD_INT 0
26251: PPUSH
26252: LD_VAR 0 8
26256: PPUSH
26257: LD_VAR 0 4
26261: PPUSH
26262: CALL_OW 380
// end else
26266: GO 26285
// PrepareHuman ( false , i , skill ) ;
26268: LD_INT 0
26270: PPUSH
26271: LD_VAR 0 8
26275: PPUSH
26276: LD_VAR 0 4
26280: PPUSH
26281: CALL_OW 380
// un := CreateHuman ;
26285: LD_ADDR_VAR 0 14
26289: PUSH
26290: CALL_OW 44
26294: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26295: LD_ADDR_VAR 0 7
26299: PUSH
26300: LD_VAR 0 7
26304: PPUSH
26305: LD_INT 1
26307: PPUSH
26308: LD_VAR 0 14
26312: PPUSH
26313: CALL_OW 2
26317: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
26318: LD_VAR 0 14
26322: PPUSH
26323: LD_VAR 0 9
26327: PPUSH
26328: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
26332: LD_VAR 0 9
26336: PPUSH
26337: CALL_OW 313
26341: PUSH
26342: LD_INT 6
26344: EQUAL
26345: PUSH
26346: LD_VAR 0 9
26350: PPUSH
26351: CALL_OW 266
26355: PUSH
26356: LD_INT 32
26358: PUSH
26359: LD_INT 31
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: IN
26366: OR
26367: IFFALSE 26181
26369: GO 26178
26371: POP
26372: POP
// end else
26373: GO 26755
// for j = 1 to x do
26375: LD_ADDR_VAR 0 9
26379: PUSH
26380: DOUBLE
26381: LD_INT 1
26383: DEC
26384: ST_TO_ADDR
26385: LD_VAR 0 13
26389: PUSH
26390: FOR_TO
26391: IFFALSE 26753
// begin InitHc ;
26393: CALL_OW 19
// if not f then
26397: LD_VAR 0 12
26401: NOT
26402: IFFALSE 26491
// begin PrepareHuman ( false , i , skill ) ;
26404: LD_INT 0
26406: PPUSH
26407: LD_VAR 0 8
26411: PPUSH
26412: LD_VAR 0 4
26416: PPUSH
26417: CALL_OW 380
// un := CreateHuman ;
26421: LD_ADDR_VAR 0 14
26425: PUSH
26426: CALL_OW 44
26430: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26431: LD_ADDR_VAR 0 7
26435: PUSH
26436: LD_VAR 0 7
26440: PPUSH
26441: LD_INT 1
26443: PPUSH
26444: LD_VAR 0 14
26448: PPUSH
26449: CALL_OW 2
26453: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26454: LD_VAR 0 14
26458: PPUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 250
26468: PPUSH
26469: LD_VAR 0 1
26473: PPUSH
26474: CALL_OW 251
26478: PPUSH
26479: LD_INT 10
26481: PPUSH
26482: LD_INT 0
26484: PPUSH
26485: CALL_OW 50
// continue ;
26489: GO 26390
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
26491: LD_VAR 0 12
26495: PUSH
26496: LD_INT 1
26498: ARRAY
26499: PPUSH
26500: CALL_OW 313
26504: PUSH
26505: LD_VAR 0 12
26509: PUSH
26510: LD_INT 1
26512: ARRAY
26513: PPUSH
26514: CALL_OW 266
26518: PUSH
26519: LD_INT 32
26521: PUSH
26522: LD_INT 31
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: IN
26529: AND
26530: PUSH
26531: LD_VAR 0 12
26535: PUSH
26536: LD_INT 1
26538: ARRAY
26539: PPUSH
26540: CALL_OW 313
26544: PUSH
26545: LD_INT 6
26547: EQUAL
26548: OR
26549: IFFALSE 26569
// f := Delete ( f , 1 ) ;
26551: LD_ADDR_VAR 0 12
26555: PUSH
26556: LD_VAR 0 12
26560: PPUSH
26561: LD_INT 1
26563: PPUSH
26564: CALL_OW 3
26568: ST_TO_ADDR
// if not f then
26569: LD_VAR 0 12
26573: NOT
26574: IFFALSE 26592
// begin x := x + 2 ;
26576: LD_ADDR_VAR 0 13
26580: PUSH
26581: LD_VAR 0 13
26585: PUSH
26586: LD_INT 2
26588: PLUS
26589: ST_TO_ADDR
// continue ;
26590: GO 26390
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
26592: LD_VAR 0 12
26596: PUSH
26597: LD_INT 1
26599: ARRAY
26600: PPUSH
26601: CALL_OW 266
26605: PUSH
26606: LD_INT 5
26608: EQUAL
26609: IFFALSE 26683
// begin if UnitsInside ( f [ 1 ] ) < 3 then
26611: LD_VAR 0 12
26615: PUSH
26616: LD_INT 1
26618: ARRAY
26619: PPUSH
26620: CALL_OW 313
26624: PUSH
26625: LD_INT 3
26627: LESS
26628: IFFALSE 26664
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
26630: LD_INT 0
26632: PPUSH
26633: LD_INT 5
26635: PUSH
26636: LD_INT 8
26638: PUSH
26639: LD_INT 9
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: PUSH
26647: LD_VAR 0 17
26651: ARRAY
26652: PPUSH
26653: LD_VAR 0 4
26657: PPUSH
26658: CALL_OW 380
26662: GO 26681
// PrepareHuman ( false , i , skill ) ;
26664: LD_INT 0
26666: PPUSH
26667: LD_VAR 0 8
26671: PPUSH
26672: LD_VAR 0 4
26676: PPUSH
26677: CALL_OW 380
// end else
26681: GO 26700
// PrepareHuman ( false , i , skill ) ;
26683: LD_INT 0
26685: PPUSH
26686: LD_VAR 0 8
26690: PPUSH
26691: LD_VAR 0 4
26695: PPUSH
26696: CALL_OW 380
// un := CreateHuman ;
26700: LD_ADDR_VAR 0 14
26704: PUSH
26705: CALL_OW 44
26709: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
26710: LD_ADDR_VAR 0 7
26714: PUSH
26715: LD_VAR 0 7
26719: PPUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_VAR 0 14
26727: PPUSH
26728: CALL_OW 2
26732: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
26733: LD_VAR 0 14
26737: PPUSH
26738: LD_VAR 0 12
26742: PUSH
26743: LD_INT 1
26745: ARRAY
26746: PPUSH
26747: CALL_OW 52
// end ;
26751: GO 26390
26753: POP
26754: POP
// end ;
26755: GO 25692
26757: POP
26758: POP
// result := result ^ buildings ;
26759: LD_ADDR_VAR 0 7
26763: PUSH
26764: LD_VAR 0 7
26768: PUSH
26769: LD_VAR 0 18
26773: ADD
26774: ST_TO_ADDR
// end else
26775: GO 26918
// begin for i = 1 to personel do
26777: LD_ADDR_VAR 0 8
26781: PUSH
26782: DOUBLE
26783: LD_INT 1
26785: DEC
26786: ST_TO_ADDR
26787: LD_VAR 0 6
26791: PUSH
26792: FOR_TO
26793: IFFALSE 26916
// begin if i > 4 then
26795: LD_VAR 0 8
26799: PUSH
26800: LD_INT 4
26802: GREATER
26803: IFFALSE 26807
// break ;
26805: GO 26916
// x := personel [ i ] ;
26807: LD_ADDR_VAR 0 13
26811: PUSH
26812: LD_VAR 0 6
26816: PUSH
26817: LD_VAR 0 8
26821: ARRAY
26822: ST_TO_ADDR
// if x = - 1 then
26823: LD_VAR 0 13
26827: PUSH
26828: LD_INT 1
26830: NEG
26831: EQUAL
26832: IFFALSE 26836
// continue ;
26834: GO 26792
// PrepareHuman ( false , i , skill ) ;
26836: LD_INT 0
26838: PPUSH
26839: LD_VAR 0 8
26843: PPUSH
26844: LD_VAR 0 4
26848: PPUSH
26849: CALL_OW 380
// un := CreateHuman ;
26853: LD_ADDR_VAR 0 14
26857: PUSH
26858: CALL_OW 44
26862: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26863: LD_VAR 0 14
26867: PPUSH
26868: LD_VAR 0 1
26872: PPUSH
26873: CALL_OW 250
26877: PPUSH
26878: LD_VAR 0 1
26882: PPUSH
26883: CALL_OW 251
26887: PPUSH
26888: LD_INT 10
26890: PPUSH
26891: LD_INT 0
26893: PPUSH
26894: CALL_OW 50
// result := result ^ un ;
26898: LD_ADDR_VAR 0 7
26902: PUSH
26903: LD_VAR 0 7
26907: PUSH
26908: LD_VAR 0 14
26912: ADD
26913: ST_TO_ADDR
// end ;
26914: GO 26792
26916: POP
26917: POP
// end ; end ;
26918: LD_VAR 0 7
26922: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26923: LD_INT 0
26925: PPUSH
26926: PPUSH
26927: PPUSH
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
26932: PPUSH
26933: PPUSH
26934: PPUSH
26935: PPUSH
26936: PPUSH
26937: PPUSH
26938: PPUSH
26939: PPUSH
26940: PPUSH
// result := false ;
26941: LD_ADDR_VAR 0 3
26945: PUSH
26946: LD_INT 0
26948: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26949: LD_VAR 0 1
26953: NOT
26954: PUSH
26955: LD_VAR 0 1
26959: PPUSH
26960: CALL_OW 266
26964: PUSH
26965: LD_INT 32
26967: PUSH
26968: LD_INT 33
26970: PUSH
26971: EMPTY
26972: LIST
26973: LIST
26974: IN
26975: NOT
26976: OR
26977: IFFALSE 26981
// exit ;
26979: GO 28090
// nat := GetNation ( tower ) ;
26981: LD_ADDR_VAR 0 12
26985: PUSH
26986: LD_VAR 0 1
26990: PPUSH
26991: CALL_OW 248
26995: ST_TO_ADDR
// side := GetSide ( tower ) ;
26996: LD_ADDR_VAR 0 16
27000: PUSH
27001: LD_VAR 0 1
27005: PPUSH
27006: CALL_OW 255
27010: ST_TO_ADDR
// x := GetX ( tower ) ;
27011: LD_ADDR_VAR 0 10
27015: PUSH
27016: LD_VAR 0 1
27020: PPUSH
27021: CALL_OW 250
27025: ST_TO_ADDR
// y := GetY ( tower ) ;
27026: LD_ADDR_VAR 0 11
27030: PUSH
27031: LD_VAR 0 1
27035: PPUSH
27036: CALL_OW 251
27040: ST_TO_ADDR
// if not x or not y then
27041: LD_VAR 0 10
27045: NOT
27046: PUSH
27047: LD_VAR 0 11
27051: NOT
27052: OR
27053: IFFALSE 27057
// exit ;
27055: GO 28090
// weapon := 0 ;
27057: LD_ADDR_VAR 0 18
27061: PUSH
27062: LD_INT 0
27064: ST_TO_ADDR
// fac_list := [ ] ;
27065: LD_ADDR_VAR 0 17
27069: PUSH
27070: EMPTY
27071: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
27072: LD_ADDR_VAR 0 6
27076: PUSH
27077: LD_VAR 0 1
27081: PPUSH
27082: CALL_OW 274
27086: PPUSH
27087: LD_VAR 0 2
27091: PPUSH
27092: LD_INT 0
27094: PPUSH
27095: CALL 24661 0 3
27099: PPUSH
27100: LD_INT 30
27102: PUSH
27103: LD_INT 3
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PPUSH
27110: CALL_OW 72
27114: ST_TO_ADDR
// if not factories then
27115: LD_VAR 0 6
27119: NOT
27120: IFFALSE 27124
// exit ;
27122: GO 28090
// for i in factories do
27124: LD_ADDR_VAR 0 8
27128: PUSH
27129: LD_VAR 0 6
27133: PUSH
27134: FOR_IN
27135: IFFALSE 27160
// fac_list := fac_list union AvailableWeaponList ( i ) ;
27137: LD_ADDR_VAR 0 17
27141: PUSH
27142: LD_VAR 0 17
27146: PUSH
27147: LD_VAR 0 8
27151: PPUSH
27152: CALL_OW 478
27156: UNION
27157: ST_TO_ADDR
27158: GO 27134
27160: POP
27161: POP
// if not fac_list then
27162: LD_VAR 0 17
27166: NOT
27167: IFFALSE 27171
// exit ;
27169: GO 28090
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
27171: LD_ADDR_VAR 0 5
27175: PUSH
27176: LD_INT 4
27178: PUSH
27179: LD_INT 5
27181: PUSH
27182: LD_INT 9
27184: PUSH
27185: LD_INT 10
27187: PUSH
27188: LD_INT 6
27190: PUSH
27191: LD_INT 7
27193: PUSH
27194: LD_INT 11
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: PUSH
27206: LD_INT 27
27208: PUSH
27209: LD_INT 28
27211: PUSH
27212: LD_INT 26
27214: PUSH
27215: LD_INT 30
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 43
27226: PUSH
27227: LD_INT 44
27229: PUSH
27230: LD_INT 46
27232: PUSH
27233: LD_INT 45
27235: PUSH
27236: LD_INT 47
27238: PUSH
27239: LD_INT 49
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: PUSH
27250: EMPTY
27251: LIST
27252: LIST
27253: LIST
27254: PUSH
27255: LD_VAR 0 12
27259: ARRAY
27260: ST_TO_ADDR
// list := list isect fac_list ;
27261: LD_ADDR_VAR 0 5
27265: PUSH
27266: LD_VAR 0 5
27270: PUSH
27271: LD_VAR 0 17
27275: ISECT
27276: ST_TO_ADDR
// if not list then
27277: LD_VAR 0 5
27281: NOT
27282: IFFALSE 27286
// exit ;
27284: GO 28090
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
27286: LD_VAR 0 12
27290: PUSH
27291: LD_INT 3
27293: EQUAL
27294: PUSH
27295: LD_INT 49
27297: PUSH
27298: LD_VAR 0 5
27302: IN
27303: AND
27304: PUSH
27305: LD_INT 31
27307: PPUSH
27308: LD_VAR 0 16
27312: PPUSH
27313: CALL_OW 321
27317: PUSH
27318: LD_INT 2
27320: EQUAL
27321: AND
27322: IFFALSE 27382
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
27324: LD_INT 22
27326: PUSH
27327: LD_VAR 0 16
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: PUSH
27336: LD_INT 35
27338: PUSH
27339: LD_INT 49
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: PUSH
27346: LD_INT 91
27348: PUSH
27349: LD_VAR 0 1
27353: PUSH
27354: LD_INT 10
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: PUSH
27362: EMPTY
27363: LIST
27364: LIST
27365: LIST
27366: PPUSH
27367: CALL_OW 69
27371: NOT
27372: IFFALSE 27382
// weapon := ru_time_lapser ;
27374: LD_ADDR_VAR 0 18
27378: PUSH
27379: LD_INT 49
27381: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
27382: LD_VAR 0 12
27386: PUSH
27387: LD_INT 1
27389: PUSH
27390: LD_INT 2
27392: PUSH
27393: EMPTY
27394: LIST
27395: LIST
27396: IN
27397: PUSH
27398: LD_INT 11
27400: PUSH
27401: LD_VAR 0 5
27405: IN
27406: PUSH
27407: LD_INT 30
27409: PUSH
27410: LD_VAR 0 5
27414: IN
27415: OR
27416: AND
27417: PUSH
27418: LD_INT 6
27420: PPUSH
27421: LD_VAR 0 16
27425: PPUSH
27426: CALL_OW 321
27430: PUSH
27431: LD_INT 2
27433: EQUAL
27434: AND
27435: IFFALSE 27600
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
27437: LD_INT 22
27439: PUSH
27440: LD_VAR 0 16
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: PUSH
27449: LD_INT 2
27451: PUSH
27452: LD_INT 35
27454: PUSH
27455: LD_INT 11
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: PUSH
27462: LD_INT 35
27464: PUSH
27465: LD_INT 30
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 91
27479: PUSH
27480: LD_VAR 0 1
27484: PUSH
27485: LD_INT 18
27487: PUSH
27488: EMPTY
27489: LIST
27490: LIST
27491: LIST
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: LIST
27497: PPUSH
27498: CALL_OW 69
27502: NOT
27503: PUSH
27504: LD_INT 22
27506: PUSH
27507: LD_VAR 0 16
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: LD_INT 30
27521: PUSH
27522: LD_INT 32
27524: PUSH
27525: EMPTY
27526: LIST
27527: LIST
27528: PUSH
27529: LD_INT 30
27531: PUSH
27532: LD_INT 33
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: EMPTY
27540: LIST
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 91
27546: PUSH
27547: LD_VAR 0 1
27551: PUSH
27552: LD_INT 12
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: LIST
27564: PUSH
27565: EMPTY
27566: LIST
27567: PPUSH
27568: CALL_OW 69
27572: PUSH
27573: LD_INT 2
27575: GREATER
27576: AND
27577: IFFALSE 27600
// weapon := [ us_radar , ar_radar ] [ nat ] ;
27579: LD_ADDR_VAR 0 18
27583: PUSH
27584: LD_INT 11
27586: PUSH
27587: LD_INT 30
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: PUSH
27594: LD_VAR 0 12
27598: ARRAY
27599: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
27600: LD_VAR 0 18
27604: NOT
27605: PUSH
27606: LD_INT 40
27608: PPUSH
27609: LD_VAR 0 16
27613: PPUSH
27614: CALL_OW 321
27618: PUSH
27619: LD_INT 2
27621: EQUAL
27622: AND
27623: PUSH
27624: LD_INT 7
27626: PUSH
27627: LD_VAR 0 5
27631: IN
27632: PUSH
27633: LD_INT 28
27635: PUSH
27636: LD_VAR 0 5
27640: IN
27641: OR
27642: PUSH
27643: LD_INT 45
27645: PUSH
27646: LD_VAR 0 5
27650: IN
27651: OR
27652: AND
27653: IFFALSE 27907
// begin hex := GetHexInfo ( x , y ) ;
27655: LD_ADDR_VAR 0 4
27659: PUSH
27660: LD_VAR 0 10
27664: PPUSH
27665: LD_VAR 0 11
27669: PPUSH
27670: CALL_OW 546
27674: ST_TO_ADDR
// if hex [ 1 ] then
27675: LD_VAR 0 4
27679: PUSH
27680: LD_INT 1
27682: ARRAY
27683: IFFALSE 27687
// exit ;
27685: GO 28090
// height := hex [ 2 ] ;
27687: LD_ADDR_VAR 0 15
27691: PUSH
27692: LD_VAR 0 4
27696: PUSH
27697: LD_INT 2
27699: ARRAY
27700: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
27701: LD_ADDR_VAR 0 14
27705: PUSH
27706: LD_INT 0
27708: PUSH
27709: LD_INT 2
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: LD_INT 5
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: LIST
27723: ST_TO_ADDR
// for i in tmp do
27724: LD_ADDR_VAR 0 8
27728: PUSH
27729: LD_VAR 0 14
27733: PUSH
27734: FOR_IN
27735: IFFALSE 27905
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_VAR 0 10
27746: PPUSH
27747: LD_VAR 0 8
27751: PPUSH
27752: LD_INT 5
27754: PPUSH
27755: CALL_OW 272
27759: PUSH
27760: LD_VAR 0 11
27764: PPUSH
27765: LD_VAR 0 8
27769: PPUSH
27770: LD_INT 5
27772: PPUSH
27773: CALL_OW 273
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
27782: LD_VAR 0 9
27786: PUSH
27787: LD_INT 1
27789: ARRAY
27790: PPUSH
27791: LD_VAR 0 9
27795: PUSH
27796: LD_INT 2
27798: ARRAY
27799: PPUSH
27800: CALL_OW 488
27804: IFFALSE 27903
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
27806: LD_ADDR_VAR 0 4
27810: PUSH
27811: LD_VAR 0 9
27815: PUSH
27816: LD_INT 1
27818: ARRAY
27819: PPUSH
27820: LD_VAR 0 9
27824: PUSH
27825: LD_INT 2
27827: ARRAY
27828: PPUSH
27829: CALL_OW 546
27833: ST_TO_ADDR
// if hex [ 1 ] then
27834: LD_VAR 0 4
27838: PUSH
27839: LD_INT 1
27841: ARRAY
27842: IFFALSE 27846
// continue ;
27844: GO 27734
// h := hex [ 2 ] ;
27846: LD_ADDR_VAR 0 13
27850: PUSH
27851: LD_VAR 0 4
27855: PUSH
27856: LD_INT 2
27858: ARRAY
27859: ST_TO_ADDR
// if h + 7 < height then
27860: LD_VAR 0 13
27864: PUSH
27865: LD_INT 7
27867: PLUS
27868: PUSH
27869: LD_VAR 0 15
27873: LESS
27874: IFFALSE 27903
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27876: LD_ADDR_VAR 0 18
27880: PUSH
27881: LD_INT 7
27883: PUSH
27884: LD_INT 28
27886: PUSH
27887: LD_INT 45
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: LIST
27894: PUSH
27895: LD_VAR 0 12
27899: ARRAY
27900: ST_TO_ADDR
// break ;
27901: GO 27905
// end ; end ; end ;
27903: GO 27734
27905: POP
27906: POP
// end ; if not weapon then
27907: LD_VAR 0 18
27911: NOT
27912: IFFALSE 27972
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27914: LD_ADDR_VAR 0 5
27918: PUSH
27919: LD_VAR 0 5
27923: PUSH
27924: LD_INT 11
27926: PUSH
27927: LD_INT 30
27929: PUSH
27930: LD_INT 49
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: LIST
27937: DIFF
27938: ST_TO_ADDR
// if not list then
27939: LD_VAR 0 5
27943: NOT
27944: IFFALSE 27948
// exit ;
27946: GO 28090
// weapon := list [ rand ( 1 , list ) ] ;
27948: LD_ADDR_VAR 0 18
27952: PUSH
27953: LD_VAR 0 5
27957: PUSH
27958: LD_INT 1
27960: PPUSH
27961: LD_VAR 0 5
27965: PPUSH
27966: CALL_OW 12
27970: ARRAY
27971: ST_TO_ADDR
// end ; if weapon then
27972: LD_VAR 0 18
27976: IFFALSE 28090
// begin tmp := CostOfWeapon ( weapon ) ;
27978: LD_ADDR_VAR 0 14
27982: PUSH
27983: LD_VAR 0 18
27987: PPUSH
27988: CALL_OW 451
27992: ST_TO_ADDR
// j := GetBase ( tower ) ;
27993: LD_ADDR_VAR 0 9
27997: PUSH
27998: LD_VAR 0 1
28002: PPUSH
28003: CALL_OW 274
28007: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
28008: LD_VAR 0 9
28012: PPUSH
28013: LD_INT 1
28015: PPUSH
28016: CALL_OW 275
28020: PUSH
28021: LD_VAR 0 14
28025: PUSH
28026: LD_INT 1
28028: ARRAY
28029: GREATEREQUAL
28030: PUSH
28031: LD_VAR 0 9
28035: PPUSH
28036: LD_INT 2
28038: PPUSH
28039: CALL_OW 275
28043: PUSH
28044: LD_VAR 0 14
28048: PUSH
28049: LD_INT 2
28051: ARRAY
28052: GREATEREQUAL
28053: AND
28054: PUSH
28055: LD_VAR 0 9
28059: PPUSH
28060: LD_INT 3
28062: PPUSH
28063: CALL_OW 275
28067: PUSH
28068: LD_VAR 0 14
28072: PUSH
28073: LD_INT 3
28075: ARRAY
28076: GREATEREQUAL
28077: AND
28078: IFFALSE 28090
// result := weapon ;
28080: LD_ADDR_VAR 0 3
28084: PUSH
28085: LD_VAR 0 18
28089: ST_TO_ADDR
// end ; end ;
28090: LD_VAR 0 3
28094: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
28095: LD_INT 0
28097: PPUSH
28098: PPUSH
// result := true ;
28099: LD_ADDR_VAR 0 3
28103: PUSH
28104: LD_INT 1
28106: ST_TO_ADDR
// if array1 = array2 then
28107: LD_VAR 0 1
28111: PUSH
28112: LD_VAR 0 2
28116: EQUAL
28117: IFFALSE 28177
// begin for i = 1 to array1 do
28119: LD_ADDR_VAR 0 4
28123: PUSH
28124: DOUBLE
28125: LD_INT 1
28127: DEC
28128: ST_TO_ADDR
28129: LD_VAR 0 1
28133: PUSH
28134: FOR_TO
28135: IFFALSE 28173
// if array1 [ i ] <> array2 [ i ] then
28137: LD_VAR 0 1
28141: PUSH
28142: LD_VAR 0 4
28146: ARRAY
28147: PUSH
28148: LD_VAR 0 2
28152: PUSH
28153: LD_VAR 0 4
28157: ARRAY
28158: NONEQUAL
28159: IFFALSE 28171
// begin result := false ;
28161: LD_ADDR_VAR 0 3
28165: PUSH
28166: LD_INT 0
28168: ST_TO_ADDR
// break ;
28169: GO 28173
// end ;
28171: GO 28134
28173: POP
28174: POP
// end else
28175: GO 28185
// result := false ;
28177: LD_ADDR_VAR 0 3
28181: PUSH
28182: LD_INT 0
28184: ST_TO_ADDR
// end ;
28185: LD_VAR 0 3
28189: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
28190: LD_INT 0
28192: PPUSH
28193: PPUSH
// if not array1 or not array2 then
28194: LD_VAR 0 1
28198: NOT
28199: PUSH
28200: LD_VAR 0 2
28204: NOT
28205: OR
28206: IFFALSE 28210
// exit ;
28208: GO 28274
// result := true ;
28210: LD_ADDR_VAR 0 3
28214: PUSH
28215: LD_INT 1
28217: ST_TO_ADDR
// for i = 1 to array1 do
28218: LD_ADDR_VAR 0 4
28222: PUSH
28223: DOUBLE
28224: LD_INT 1
28226: DEC
28227: ST_TO_ADDR
28228: LD_VAR 0 1
28232: PUSH
28233: FOR_TO
28234: IFFALSE 28272
// if array1 [ i ] <> array2 [ i ] then
28236: LD_VAR 0 1
28240: PUSH
28241: LD_VAR 0 4
28245: ARRAY
28246: PUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 4
28256: ARRAY
28257: NONEQUAL
28258: IFFALSE 28270
// begin result := false ;
28260: LD_ADDR_VAR 0 3
28264: PUSH
28265: LD_INT 0
28267: ST_TO_ADDR
// break ;
28268: GO 28272
// end ;
28270: GO 28233
28272: POP
28273: POP
// end ;
28274: LD_VAR 0 3
28278: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
28279: LD_INT 0
28281: PPUSH
28282: PPUSH
28283: PPUSH
// pom := GetBase ( fac ) ;
28284: LD_ADDR_VAR 0 5
28288: PUSH
28289: LD_VAR 0 1
28293: PPUSH
28294: CALL_OW 274
28298: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
28299: LD_ADDR_VAR 0 4
28303: PUSH
28304: LD_VAR 0 2
28308: PUSH
28309: LD_INT 1
28311: ARRAY
28312: PPUSH
28313: LD_VAR 0 2
28317: PUSH
28318: LD_INT 2
28320: ARRAY
28321: PPUSH
28322: LD_VAR 0 2
28326: PUSH
28327: LD_INT 3
28329: ARRAY
28330: PPUSH
28331: LD_VAR 0 2
28335: PUSH
28336: LD_INT 4
28338: ARRAY
28339: PPUSH
28340: CALL_OW 449
28344: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28345: LD_ADDR_VAR 0 3
28349: PUSH
28350: LD_VAR 0 5
28354: PPUSH
28355: LD_INT 1
28357: PPUSH
28358: CALL_OW 275
28362: PUSH
28363: LD_VAR 0 4
28367: PUSH
28368: LD_INT 1
28370: ARRAY
28371: GREATEREQUAL
28372: PUSH
28373: LD_VAR 0 5
28377: PPUSH
28378: LD_INT 2
28380: PPUSH
28381: CALL_OW 275
28385: PUSH
28386: LD_VAR 0 4
28390: PUSH
28391: LD_INT 2
28393: ARRAY
28394: GREATEREQUAL
28395: AND
28396: PUSH
28397: LD_VAR 0 5
28401: PPUSH
28402: LD_INT 3
28404: PPUSH
28405: CALL_OW 275
28409: PUSH
28410: LD_VAR 0 4
28414: PUSH
28415: LD_INT 3
28417: ARRAY
28418: GREATEREQUAL
28419: AND
28420: ST_TO_ADDR
// end ;
28421: LD_VAR 0 3
28425: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
28426: LD_INT 0
28428: PPUSH
28429: PPUSH
28430: PPUSH
28431: PPUSH
// pom := GetBase ( building ) ;
28432: LD_ADDR_VAR 0 3
28436: PUSH
28437: LD_VAR 0 1
28441: PPUSH
28442: CALL_OW 274
28446: ST_TO_ADDR
// if not pom then
28447: LD_VAR 0 3
28451: NOT
28452: IFFALSE 28456
// exit ;
28454: GO 28626
// btype := GetBType ( building ) ;
28456: LD_ADDR_VAR 0 5
28460: PUSH
28461: LD_VAR 0 1
28465: PPUSH
28466: CALL_OW 266
28470: ST_TO_ADDR
// if btype = b_armoury then
28471: LD_VAR 0 5
28475: PUSH
28476: LD_INT 4
28478: EQUAL
28479: IFFALSE 28489
// btype := b_barracks ;
28481: LD_ADDR_VAR 0 5
28485: PUSH
28486: LD_INT 5
28488: ST_TO_ADDR
// if btype = b_depot then
28489: LD_VAR 0 5
28493: PUSH
28494: LD_INT 0
28496: EQUAL
28497: IFFALSE 28507
// btype := b_warehouse ;
28499: LD_ADDR_VAR 0 5
28503: PUSH
28504: LD_INT 1
28506: ST_TO_ADDR
// if btype = b_workshop then
28507: LD_VAR 0 5
28511: PUSH
28512: LD_INT 2
28514: EQUAL
28515: IFFALSE 28525
// btype := b_factory ;
28517: LD_ADDR_VAR 0 5
28521: PUSH
28522: LD_INT 3
28524: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28525: LD_ADDR_VAR 0 4
28529: PUSH
28530: LD_VAR 0 5
28534: PPUSH
28535: LD_VAR 0 1
28539: PPUSH
28540: CALL_OW 248
28544: PPUSH
28545: CALL_OW 450
28549: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28550: LD_ADDR_VAR 0 2
28554: PUSH
28555: LD_VAR 0 3
28559: PPUSH
28560: LD_INT 1
28562: PPUSH
28563: CALL_OW 275
28567: PUSH
28568: LD_VAR 0 4
28572: PUSH
28573: LD_INT 1
28575: ARRAY
28576: GREATEREQUAL
28577: PUSH
28578: LD_VAR 0 3
28582: PPUSH
28583: LD_INT 2
28585: PPUSH
28586: CALL_OW 275
28590: PUSH
28591: LD_VAR 0 4
28595: PUSH
28596: LD_INT 2
28598: ARRAY
28599: GREATEREQUAL
28600: AND
28601: PUSH
28602: LD_VAR 0 3
28606: PPUSH
28607: LD_INT 3
28609: PPUSH
28610: CALL_OW 275
28614: PUSH
28615: LD_VAR 0 4
28619: PUSH
28620: LD_INT 3
28622: ARRAY
28623: GREATEREQUAL
28624: AND
28625: ST_TO_ADDR
// end ;
28626: LD_VAR 0 2
28630: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
28631: LD_INT 0
28633: PPUSH
28634: PPUSH
28635: PPUSH
// pom := GetBase ( building ) ;
28636: LD_ADDR_VAR 0 4
28640: PUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 274
28650: ST_TO_ADDR
// if not pom then
28651: LD_VAR 0 4
28655: NOT
28656: IFFALSE 28660
// exit ;
28658: GO 28761
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
28660: LD_ADDR_VAR 0 5
28664: PUSH
28665: LD_VAR 0 2
28669: PPUSH
28670: LD_VAR 0 1
28674: PPUSH
28675: CALL_OW 248
28679: PPUSH
28680: CALL_OW 450
28684: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
28685: LD_ADDR_VAR 0 3
28689: PUSH
28690: LD_VAR 0 4
28694: PPUSH
28695: LD_INT 1
28697: PPUSH
28698: CALL_OW 275
28702: PUSH
28703: LD_VAR 0 5
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: GREATEREQUAL
28712: PUSH
28713: LD_VAR 0 4
28717: PPUSH
28718: LD_INT 2
28720: PPUSH
28721: CALL_OW 275
28725: PUSH
28726: LD_VAR 0 5
28730: PUSH
28731: LD_INT 2
28733: ARRAY
28734: GREATEREQUAL
28735: AND
28736: PUSH
28737: LD_VAR 0 4
28741: PPUSH
28742: LD_INT 3
28744: PPUSH
28745: CALL_OW 275
28749: PUSH
28750: LD_VAR 0 5
28754: PUSH
28755: LD_INT 3
28757: ARRAY
28758: GREATEREQUAL
28759: AND
28760: ST_TO_ADDR
// end ;
28761: LD_VAR 0 3
28765: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
28766: LD_INT 0
28768: PPUSH
28769: PPUSH
28770: PPUSH
28771: PPUSH
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
28776: PPUSH
28777: PPUSH
28778: PPUSH
// result := false ;
28779: LD_ADDR_VAR 0 8
28783: PUSH
28784: LD_INT 0
28786: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
28787: LD_VAR 0 5
28791: NOT
28792: PUSH
28793: LD_VAR 0 1
28797: NOT
28798: OR
28799: PUSH
28800: LD_VAR 0 2
28804: NOT
28805: OR
28806: PUSH
28807: LD_VAR 0 3
28811: NOT
28812: OR
28813: IFFALSE 28817
// exit ;
28815: GO 29631
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
28817: LD_ADDR_VAR 0 14
28821: PUSH
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_VAR 0 2
28831: PPUSH
28832: LD_VAR 0 3
28836: PPUSH
28837: LD_VAR 0 4
28841: PPUSH
28842: LD_VAR 0 5
28846: PUSH
28847: LD_INT 1
28849: ARRAY
28850: PPUSH
28851: CALL_OW 248
28855: PPUSH
28856: LD_INT 0
28858: PPUSH
28859: CALL 30868 0 6
28863: ST_TO_ADDR
// if not hexes then
28864: LD_VAR 0 14
28868: NOT
28869: IFFALSE 28873
// exit ;
28871: GO 29631
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28873: LD_ADDR_VAR 0 17
28877: PUSH
28878: LD_VAR 0 5
28882: PPUSH
28883: LD_INT 22
28885: PUSH
28886: LD_VAR 0 13
28890: PPUSH
28891: CALL_OW 255
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PUSH
28900: LD_INT 2
28902: PUSH
28903: LD_INT 30
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 30
28915: PUSH
28916: LD_INT 1
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: LIST
28927: PUSH
28928: EMPTY
28929: LIST
28930: LIST
28931: PPUSH
28932: CALL_OW 72
28936: ST_TO_ADDR
// for i = 1 to hexes do
28937: LD_ADDR_VAR 0 9
28941: PUSH
28942: DOUBLE
28943: LD_INT 1
28945: DEC
28946: ST_TO_ADDR
28947: LD_VAR 0 14
28951: PUSH
28952: FOR_TO
28953: IFFALSE 29629
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
28955: LD_ADDR_VAR 0 13
28959: PUSH
28960: LD_VAR 0 14
28964: PUSH
28965: LD_VAR 0 9
28969: ARRAY
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: PPUSH
28975: LD_VAR 0 14
28979: PUSH
28980: LD_VAR 0 9
28984: ARRAY
28985: PUSH
28986: LD_INT 2
28988: ARRAY
28989: PPUSH
28990: CALL_OW 428
28994: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28995: LD_VAR 0 14
28999: PUSH
29000: LD_VAR 0 9
29004: ARRAY
29005: PUSH
29006: LD_INT 1
29008: ARRAY
29009: PPUSH
29010: LD_VAR 0 14
29014: PUSH
29015: LD_VAR 0 9
29019: ARRAY
29020: PUSH
29021: LD_INT 2
29023: ARRAY
29024: PPUSH
29025: CALL_OW 351
29029: PUSH
29030: LD_VAR 0 14
29034: PUSH
29035: LD_VAR 0 9
29039: ARRAY
29040: PUSH
29041: LD_INT 1
29043: ARRAY
29044: PPUSH
29045: LD_VAR 0 14
29049: PUSH
29050: LD_VAR 0 9
29054: ARRAY
29055: PUSH
29056: LD_INT 2
29058: ARRAY
29059: PPUSH
29060: CALL_OW 488
29064: NOT
29065: OR
29066: PUSH
29067: LD_VAR 0 13
29071: PPUSH
29072: CALL_OW 247
29076: PUSH
29077: LD_INT 3
29079: EQUAL
29080: OR
29081: IFFALSE 29087
// exit ;
29083: POP
29084: POP
29085: GO 29631
// if not tmp then
29087: LD_VAR 0 13
29091: NOT
29092: IFFALSE 29096
// continue ;
29094: GO 28952
// result := true ;
29096: LD_ADDR_VAR 0 8
29100: PUSH
29101: LD_INT 1
29103: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
29104: LD_VAR 0 6
29108: PUSH
29109: LD_VAR 0 13
29113: PPUSH
29114: CALL_OW 247
29118: PUSH
29119: LD_INT 2
29121: EQUAL
29122: AND
29123: PUSH
29124: LD_VAR 0 13
29128: PPUSH
29129: CALL_OW 263
29133: PUSH
29134: LD_INT 1
29136: EQUAL
29137: AND
29138: IFFALSE 29302
// begin if IsDrivenBy ( tmp ) then
29140: LD_VAR 0 13
29144: PPUSH
29145: CALL_OW 311
29149: IFFALSE 29153
// continue ;
29151: GO 28952
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
29153: LD_VAR 0 6
29157: PPUSH
29158: LD_INT 3
29160: PUSH
29161: LD_INT 60
29163: PUSH
29164: EMPTY
29165: LIST
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 3
29173: PUSH
29174: LD_INT 55
29176: PUSH
29177: EMPTY
29178: LIST
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PPUSH
29188: CALL_OW 72
29192: IFFALSE 29300
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
29194: LD_ADDR_VAR 0 18
29198: PUSH
29199: LD_VAR 0 6
29203: PPUSH
29204: LD_INT 3
29206: PUSH
29207: LD_INT 60
29209: PUSH
29210: EMPTY
29211: LIST
29212: PUSH
29213: EMPTY
29214: LIST
29215: LIST
29216: PUSH
29217: LD_INT 3
29219: PUSH
29220: LD_INT 55
29222: PUSH
29223: EMPTY
29224: LIST
29225: PUSH
29226: EMPTY
29227: LIST
29228: LIST
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PPUSH
29234: CALL_OW 72
29238: PUSH
29239: LD_INT 1
29241: ARRAY
29242: ST_TO_ADDR
// if IsInUnit ( driver ) then
29243: LD_VAR 0 18
29247: PPUSH
29248: CALL_OW 310
29252: IFFALSE 29263
// ComExit ( driver ) ;
29254: LD_VAR 0 18
29258: PPUSH
29259: CALL 53996 0 1
// AddComEnterUnit ( driver , tmp ) ;
29263: LD_VAR 0 18
29267: PPUSH
29268: LD_VAR 0 13
29272: PPUSH
29273: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
29277: LD_VAR 0 18
29281: PPUSH
29282: LD_VAR 0 7
29286: PPUSH
29287: CALL_OW 173
// AddComExitVehicle ( driver ) ;
29291: LD_VAR 0 18
29295: PPUSH
29296: CALL_OW 181
// end ; continue ;
29300: GO 28952
// end ; if not cleaners or not tmp in cleaners then
29302: LD_VAR 0 6
29306: NOT
29307: PUSH
29308: LD_VAR 0 13
29312: PUSH
29313: LD_VAR 0 6
29317: IN
29318: NOT
29319: OR
29320: IFFALSE 29627
// begin if dep then
29322: LD_VAR 0 17
29326: IFFALSE 29462
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
29328: LD_ADDR_VAR 0 16
29332: PUSH
29333: LD_VAR 0 17
29337: PUSH
29338: LD_INT 1
29340: ARRAY
29341: PPUSH
29342: CALL_OW 250
29346: PPUSH
29347: LD_VAR 0 17
29351: PUSH
29352: LD_INT 1
29354: ARRAY
29355: PPUSH
29356: CALL_OW 254
29360: PPUSH
29361: LD_INT 5
29363: PPUSH
29364: CALL_OW 272
29368: PUSH
29369: LD_VAR 0 17
29373: PUSH
29374: LD_INT 1
29376: ARRAY
29377: PPUSH
29378: CALL_OW 251
29382: PPUSH
29383: LD_VAR 0 17
29387: PUSH
29388: LD_INT 1
29390: ARRAY
29391: PPUSH
29392: CALL_OW 254
29396: PPUSH
29397: LD_INT 5
29399: PPUSH
29400: CALL_OW 273
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
29409: LD_VAR 0 16
29413: PUSH
29414: LD_INT 1
29416: ARRAY
29417: PPUSH
29418: LD_VAR 0 16
29422: PUSH
29423: LD_INT 2
29425: ARRAY
29426: PPUSH
29427: CALL_OW 488
29431: IFFALSE 29462
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
29433: LD_VAR 0 13
29437: PPUSH
29438: LD_VAR 0 16
29442: PUSH
29443: LD_INT 1
29445: ARRAY
29446: PPUSH
29447: LD_VAR 0 16
29451: PUSH
29452: LD_INT 2
29454: ARRAY
29455: PPUSH
29456: CALL_OW 111
// continue ;
29460: GO 28952
// end ; end ; r := GetDir ( tmp ) ;
29462: LD_ADDR_VAR 0 15
29466: PUSH
29467: LD_VAR 0 13
29471: PPUSH
29472: CALL_OW 254
29476: ST_TO_ADDR
// if r = 5 then
29477: LD_VAR 0 15
29481: PUSH
29482: LD_INT 5
29484: EQUAL
29485: IFFALSE 29495
// r := 0 ;
29487: LD_ADDR_VAR 0 15
29491: PUSH
29492: LD_INT 0
29494: ST_TO_ADDR
// for j = r to 5 do
29495: LD_ADDR_VAR 0 10
29499: PUSH
29500: DOUBLE
29501: LD_VAR 0 15
29505: DEC
29506: ST_TO_ADDR
29507: LD_INT 5
29509: PUSH
29510: FOR_TO
29511: IFFALSE 29625
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
29513: LD_ADDR_VAR 0 11
29517: PUSH
29518: LD_VAR 0 13
29522: PPUSH
29523: CALL_OW 250
29527: PPUSH
29528: LD_VAR 0 10
29532: PPUSH
29533: LD_INT 2
29535: PPUSH
29536: CALL_OW 272
29540: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
29541: LD_ADDR_VAR 0 12
29545: PUSH
29546: LD_VAR 0 13
29550: PPUSH
29551: CALL_OW 251
29555: PPUSH
29556: LD_VAR 0 10
29560: PPUSH
29561: LD_INT 2
29563: PPUSH
29564: CALL_OW 273
29568: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
29569: LD_VAR 0 11
29573: PPUSH
29574: LD_VAR 0 12
29578: PPUSH
29579: CALL_OW 488
29583: PUSH
29584: LD_VAR 0 11
29588: PPUSH
29589: LD_VAR 0 12
29593: PPUSH
29594: CALL_OW 428
29598: NOT
29599: AND
29600: IFFALSE 29623
// begin ComMoveXY ( tmp , _x , _y ) ;
29602: LD_VAR 0 13
29606: PPUSH
29607: LD_VAR 0 11
29611: PPUSH
29612: LD_VAR 0 12
29616: PPUSH
29617: CALL_OW 111
// break ;
29621: GO 29625
// end ; end ;
29623: GO 29510
29625: POP
29626: POP
// end ; end ;
29627: GO 28952
29629: POP
29630: POP
// end ;
29631: LD_VAR 0 8
29635: RET
// export function BuildingTechInvented ( side , btype ) ; begin
29636: LD_INT 0
29638: PPUSH
// result := true ;
29639: LD_ADDR_VAR 0 3
29643: PUSH
29644: LD_INT 1
29646: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
29647: LD_VAR 0 2
29651: PUSH
29652: LD_INT 24
29654: DOUBLE
29655: EQUAL
29656: IFTRUE 29666
29658: LD_INT 33
29660: DOUBLE
29661: EQUAL
29662: IFTRUE 29666
29664: GO 29691
29666: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
29667: LD_ADDR_VAR 0 3
29671: PUSH
29672: LD_INT 32
29674: PPUSH
29675: LD_VAR 0 1
29679: PPUSH
29680: CALL_OW 321
29684: PUSH
29685: LD_INT 2
29687: EQUAL
29688: ST_TO_ADDR
29689: GO 30011
29691: LD_INT 20
29693: DOUBLE
29694: EQUAL
29695: IFTRUE 29699
29697: GO 29724
29699: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
29700: LD_ADDR_VAR 0 3
29704: PUSH
29705: LD_INT 6
29707: PPUSH
29708: LD_VAR 0 1
29712: PPUSH
29713: CALL_OW 321
29717: PUSH
29718: LD_INT 2
29720: EQUAL
29721: ST_TO_ADDR
29722: GO 30011
29724: LD_INT 22
29726: DOUBLE
29727: EQUAL
29728: IFTRUE 29738
29730: LD_INT 36
29732: DOUBLE
29733: EQUAL
29734: IFTRUE 29738
29736: GO 29763
29738: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
29739: LD_ADDR_VAR 0 3
29743: PUSH
29744: LD_INT 15
29746: PPUSH
29747: LD_VAR 0 1
29751: PPUSH
29752: CALL_OW 321
29756: PUSH
29757: LD_INT 2
29759: EQUAL
29760: ST_TO_ADDR
29761: GO 30011
29763: LD_INT 30
29765: DOUBLE
29766: EQUAL
29767: IFTRUE 29771
29769: GO 29796
29771: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
29772: LD_ADDR_VAR 0 3
29776: PUSH
29777: LD_INT 20
29779: PPUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 321
29789: PUSH
29790: LD_INT 2
29792: EQUAL
29793: ST_TO_ADDR
29794: GO 30011
29796: LD_INT 28
29798: DOUBLE
29799: EQUAL
29800: IFTRUE 29810
29802: LD_INT 21
29804: DOUBLE
29805: EQUAL
29806: IFTRUE 29810
29808: GO 29835
29810: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
29811: LD_ADDR_VAR 0 3
29815: PUSH
29816: LD_INT 21
29818: PPUSH
29819: LD_VAR 0 1
29823: PPUSH
29824: CALL_OW 321
29828: PUSH
29829: LD_INT 2
29831: EQUAL
29832: ST_TO_ADDR
29833: GO 30011
29835: LD_INT 16
29837: DOUBLE
29838: EQUAL
29839: IFTRUE 29843
29841: GO 29870
29843: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
29844: LD_ADDR_VAR 0 3
29848: PUSH
29849: LD_EXP 120
29853: PPUSH
29854: LD_VAR 0 1
29858: PPUSH
29859: CALL_OW 321
29863: PUSH
29864: LD_INT 2
29866: EQUAL
29867: ST_TO_ADDR
29868: GO 30011
29870: LD_INT 19
29872: DOUBLE
29873: EQUAL
29874: IFTRUE 29884
29876: LD_INT 23
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 29911
29884: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_EXP 119
29894: PPUSH
29895: LD_VAR 0 1
29899: PPUSH
29900: CALL_OW 321
29904: PUSH
29905: LD_INT 2
29907: EQUAL
29908: ST_TO_ADDR
29909: GO 30011
29911: LD_INT 17
29913: DOUBLE
29914: EQUAL
29915: IFTRUE 29919
29917: GO 29944
29919: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
29920: LD_ADDR_VAR 0 3
29924: PUSH
29925: LD_INT 39
29927: PPUSH
29928: LD_VAR 0 1
29932: PPUSH
29933: CALL_OW 321
29937: PUSH
29938: LD_INT 2
29940: EQUAL
29941: ST_TO_ADDR
29942: GO 30011
29944: LD_INT 18
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29977
29952: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 40
29960: PPUSH
29961: LD_VAR 0 1
29965: PPUSH
29966: CALL_OW 321
29970: PUSH
29971: LD_INT 2
29973: EQUAL
29974: ST_TO_ADDR
29975: GO 30011
29977: LD_INT 27
29979: DOUBLE
29980: EQUAL
29981: IFTRUE 29985
29983: GO 30010
29985: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
29986: LD_ADDR_VAR 0 3
29990: PUSH
29991: LD_INT 35
29993: PPUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 321
30003: PUSH
30004: LD_INT 2
30006: EQUAL
30007: ST_TO_ADDR
30008: GO 30011
30010: POP
// end ;
30011: LD_VAR 0 3
30015: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
30020: PPUSH
30021: PPUSH
30022: PPUSH
30023: PPUSH
30024: PPUSH
30025: PPUSH
30026: PPUSH
30027: PPUSH
30028: PPUSH
// result := false ;
30029: LD_ADDR_VAR 0 6
30033: PUSH
30034: LD_INT 0
30036: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
30037: LD_VAR 0 1
30041: NOT
30042: PUSH
30043: LD_VAR 0 1
30047: PPUSH
30048: CALL_OW 266
30052: PUSH
30053: LD_INT 0
30055: PUSH
30056: LD_INT 1
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: IN
30063: NOT
30064: OR
30065: PUSH
30066: LD_VAR 0 2
30070: NOT
30071: OR
30072: PUSH
30073: LD_VAR 0 5
30077: PUSH
30078: LD_INT 0
30080: PUSH
30081: LD_INT 1
30083: PUSH
30084: LD_INT 2
30086: PUSH
30087: LD_INT 3
30089: PUSH
30090: LD_INT 4
30092: PUSH
30093: LD_INT 5
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: IN
30104: NOT
30105: OR
30106: PUSH
30107: LD_VAR 0 3
30111: PPUSH
30112: LD_VAR 0 4
30116: PPUSH
30117: CALL_OW 488
30121: NOT
30122: OR
30123: IFFALSE 30127
// exit ;
30125: GO 30863
// side := GetSide ( depot ) ;
30127: LD_ADDR_VAR 0 9
30131: PUSH
30132: LD_VAR 0 1
30136: PPUSH
30137: CALL_OW 255
30141: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
30142: LD_VAR 0 9
30146: PPUSH
30147: LD_VAR 0 2
30151: PPUSH
30152: CALL 29636 0 2
30156: NOT
30157: IFFALSE 30161
// exit ;
30159: GO 30863
// pom := GetBase ( depot ) ;
30161: LD_ADDR_VAR 0 10
30165: PUSH
30166: LD_VAR 0 1
30170: PPUSH
30171: CALL_OW 274
30175: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
30176: LD_ADDR_VAR 0 11
30180: PUSH
30181: LD_VAR 0 2
30185: PPUSH
30186: LD_VAR 0 1
30190: PPUSH
30191: CALL_OW 248
30195: PPUSH
30196: CALL_OW 450
30200: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
30201: LD_VAR 0 10
30205: PPUSH
30206: LD_INT 1
30208: PPUSH
30209: CALL_OW 275
30213: PUSH
30214: LD_VAR 0 11
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: GREATEREQUAL
30223: PUSH
30224: LD_VAR 0 10
30228: PPUSH
30229: LD_INT 2
30231: PPUSH
30232: CALL_OW 275
30236: PUSH
30237: LD_VAR 0 11
30241: PUSH
30242: LD_INT 2
30244: ARRAY
30245: GREATEREQUAL
30246: AND
30247: PUSH
30248: LD_VAR 0 10
30252: PPUSH
30253: LD_INT 3
30255: PPUSH
30256: CALL_OW 275
30260: PUSH
30261: LD_VAR 0 11
30265: PUSH
30266: LD_INT 3
30268: ARRAY
30269: GREATEREQUAL
30270: AND
30271: NOT
30272: IFFALSE 30276
// exit ;
30274: GO 30863
// if GetBType ( depot ) = b_depot then
30276: LD_VAR 0 1
30280: PPUSH
30281: CALL_OW 266
30285: PUSH
30286: LD_INT 0
30288: EQUAL
30289: IFFALSE 30301
// dist := 28 else
30291: LD_ADDR_VAR 0 14
30295: PUSH
30296: LD_INT 28
30298: ST_TO_ADDR
30299: GO 30309
// dist := 36 ;
30301: LD_ADDR_VAR 0 14
30305: PUSH
30306: LD_INT 36
30308: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
30309: LD_VAR 0 1
30313: PPUSH
30314: LD_VAR 0 3
30318: PPUSH
30319: LD_VAR 0 4
30323: PPUSH
30324: CALL_OW 297
30328: PUSH
30329: LD_VAR 0 14
30333: GREATER
30334: IFFALSE 30338
// exit ;
30336: GO 30863
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
30338: LD_ADDR_VAR 0 12
30342: PUSH
30343: LD_VAR 0 2
30347: PPUSH
30348: LD_VAR 0 3
30352: PPUSH
30353: LD_VAR 0 4
30357: PPUSH
30358: LD_VAR 0 5
30362: PPUSH
30363: LD_VAR 0 1
30367: PPUSH
30368: CALL_OW 248
30372: PPUSH
30373: LD_INT 0
30375: PPUSH
30376: CALL 30868 0 6
30380: ST_TO_ADDR
// if not hexes then
30381: LD_VAR 0 12
30385: NOT
30386: IFFALSE 30390
// exit ;
30388: GO 30863
// hex := GetHexInfo ( x , y ) ;
30390: LD_ADDR_VAR 0 15
30394: PUSH
30395: LD_VAR 0 3
30399: PPUSH
30400: LD_VAR 0 4
30404: PPUSH
30405: CALL_OW 546
30409: ST_TO_ADDR
// if hex [ 1 ] then
30410: LD_VAR 0 15
30414: PUSH
30415: LD_INT 1
30417: ARRAY
30418: IFFALSE 30422
// exit ;
30420: GO 30863
// height := hex [ 2 ] ;
30422: LD_ADDR_VAR 0 13
30426: PUSH
30427: LD_VAR 0 15
30431: PUSH
30432: LD_INT 2
30434: ARRAY
30435: ST_TO_ADDR
// for i = 1 to hexes do
30436: LD_ADDR_VAR 0 7
30440: PUSH
30441: DOUBLE
30442: LD_INT 1
30444: DEC
30445: ST_TO_ADDR
30446: LD_VAR 0 12
30450: PUSH
30451: FOR_TO
30452: IFFALSE 30782
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
30454: LD_VAR 0 12
30458: PUSH
30459: LD_VAR 0 7
30463: ARRAY
30464: PUSH
30465: LD_INT 1
30467: ARRAY
30468: PPUSH
30469: LD_VAR 0 12
30473: PUSH
30474: LD_VAR 0 7
30478: ARRAY
30479: PUSH
30480: LD_INT 2
30482: ARRAY
30483: PPUSH
30484: CALL_OW 488
30488: NOT
30489: PUSH
30490: LD_VAR 0 12
30494: PUSH
30495: LD_VAR 0 7
30499: ARRAY
30500: PUSH
30501: LD_INT 1
30503: ARRAY
30504: PPUSH
30505: LD_VAR 0 12
30509: PUSH
30510: LD_VAR 0 7
30514: ARRAY
30515: PUSH
30516: LD_INT 2
30518: ARRAY
30519: PPUSH
30520: CALL_OW 428
30524: PUSH
30525: LD_INT 0
30527: GREATER
30528: OR
30529: PUSH
30530: LD_VAR 0 12
30534: PUSH
30535: LD_VAR 0 7
30539: ARRAY
30540: PUSH
30541: LD_INT 1
30543: ARRAY
30544: PPUSH
30545: LD_VAR 0 12
30549: PUSH
30550: LD_VAR 0 7
30554: ARRAY
30555: PUSH
30556: LD_INT 2
30558: ARRAY
30559: PPUSH
30560: CALL_OW 351
30564: OR
30565: IFFALSE 30571
// exit ;
30567: POP
30568: POP
30569: GO 30863
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
30571: LD_ADDR_VAR 0 8
30575: PUSH
30576: LD_VAR 0 12
30580: PUSH
30581: LD_VAR 0 7
30585: ARRAY
30586: PUSH
30587: LD_INT 1
30589: ARRAY
30590: PPUSH
30591: LD_VAR 0 12
30595: PUSH
30596: LD_VAR 0 7
30600: ARRAY
30601: PUSH
30602: LD_INT 2
30604: ARRAY
30605: PPUSH
30606: CALL_OW 546
30610: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
30611: LD_VAR 0 8
30615: PUSH
30616: LD_INT 1
30618: ARRAY
30619: PUSH
30620: LD_VAR 0 8
30624: PUSH
30625: LD_INT 2
30627: ARRAY
30628: PUSH
30629: LD_VAR 0 13
30633: PUSH
30634: LD_INT 2
30636: PLUS
30637: GREATER
30638: OR
30639: PUSH
30640: LD_VAR 0 8
30644: PUSH
30645: LD_INT 2
30647: ARRAY
30648: PUSH
30649: LD_VAR 0 13
30653: PUSH
30654: LD_INT 2
30656: MINUS
30657: LESS
30658: OR
30659: PUSH
30660: LD_VAR 0 8
30664: PUSH
30665: LD_INT 3
30667: ARRAY
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 8
30674: PUSH
30675: LD_INT 9
30677: PUSH
30678: LD_INT 10
30680: PUSH
30681: LD_INT 11
30683: PUSH
30684: LD_INT 12
30686: PUSH
30687: LD_INT 13
30689: PUSH
30690: LD_INT 16
30692: PUSH
30693: LD_INT 17
30695: PUSH
30696: LD_INT 18
30698: PUSH
30699: LD_INT 19
30701: PUSH
30702: LD_INT 20
30704: PUSH
30705: LD_INT 21
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: LIST
30715: LIST
30716: LIST
30717: LIST
30718: LIST
30719: LIST
30720: LIST
30721: LIST
30722: IN
30723: NOT
30724: OR
30725: PUSH
30726: LD_VAR 0 8
30730: PUSH
30731: LD_INT 5
30733: ARRAY
30734: NOT
30735: OR
30736: PUSH
30737: LD_VAR 0 8
30741: PUSH
30742: LD_INT 6
30744: ARRAY
30745: PUSH
30746: LD_INT 1
30748: PUSH
30749: LD_INT 2
30751: PUSH
30752: LD_INT 7
30754: PUSH
30755: LD_INT 9
30757: PUSH
30758: LD_INT 10
30760: PUSH
30761: LD_INT 11
30763: PUSH
30764: EMPTY
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: IN
30772: NOT
30773: OR
30774: IFFALSE 30780
// exit ;
30776: POP
30777: POP
30778: GO 30863
// end ;
30780: GO 30451
30782: POP
30783: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
30784: LD_VAR 0 9
30788: PPUSH
30789: LD_VAR 0 3
30793: PPUSH
30794: LD_VAR 0 4
30798: PPUSH
30799: LD_INT 20
30801: PPUSH
30802: CALL 22809 0 4
30806: PUSH
30807: LD_INT 4
30809: ARRAY
30810: IFFALSE 30814
// exit ;
30812: GO 30863
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
30814: LD_VAR 0 2
30818: PUSH
30819: LD_INT 29
30821: PUSH
30822: LD_INT 30
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: IN
30829: PUSH
30830: LD_VAR 0 3
30834: PPUSH
30835: LD_VAR 0 4
30839: PPUSH
30840: LD_VAR 0 9
30844: PPUSH
30845: CALL_OW 440
30849: NOT
30850: AND
30851: IFFALSE 30855
// exit ;
30853: GO 30863
// result := true ;
30855: LD_ADDR_VAR 0 6
30859: PUSH
30860: LD_INT 1
30862: ST_TO_ADDR
// end ;
30863: LD_VAR 0 6
30867: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
30868: LD_INT 0
30870: PPUSH
30871: PPUSH
30872: PPUSH
30873: PPUSH
30874: PPUSH
30875: PPUSH
30876: PPUSH
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
30897: PPUSH
30898: PPUSH
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
30903: PPUSH
30904: PPUSH
30905: PPUSH
30906: PPUSH
30907: PPUSH
30908: PPUSH
30909: PPUSH
30910: PPUSH
30911: PPUSH
30912: PPUSH
30913: PPUSH
30914: PPUSH
30915: PPUSH
30916: PPUSH
30917: PPUSH
30918: PPUSH
30919: PPUSH
30920: PPUSH
30921: PPUSH
30922: PPUSH
30923: PPUSH
30924: PPUSH
30925: PPUSH
30926: PPUSH
30927: PPUSH
// result = [ ] ;
30928: LD_ADDR_VAR 0 7
30932: PUSH
30933: EMPTY
30934: ST_TO_ADDR
// temp_list = [ ] ;
30935: LD_ADDR_VAR 0 9
30939: PUSH
30940: EMPTY
30941: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
30942: LD_VAR 0 4
30946: PUSH
30947: LD_INT 0
30949: PUSH
30950: LD_INT 1
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 3
30958: PUSH
30959: LD_INT 4
30961: PUSH
30962: LD_INT 5
30964: PUSH
30965: EMPTY
30966: LIST
30967: LIST
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: IN
30973: NOT
30974: PUSH
30975: LD_VAR 0 1
30979: PUSH
30980: LD_INT 0
30982: PUSH
30983: LD_INT 1
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: IN
30990: PUSH
30991: LD_VAR 0 5
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 2
31001: PUSH
31002: LD_INT 3
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: LIST
31009: IN
31010: NOT
31011: AND
31012: OR
31013: IFFALSE 31017
// exit ;
31015: GO 49408
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
31017: LD_VAR 0 1
31021: PUSH
31022: LD_INT 6
31024: PUSH
31025: LD_INT 7
31027: PUSH
31028: LD_INT 8
31030: PUSH
31031: LD_INT 13
31033: PUSH
31034: LD_INT 12
31036: PUSH
31037: LD_INT 15
31039: PUSH
31040: LD_INT 11
31042: PUSH
31043: LD_INT 14
31045: PUSH
31046: LD_INT 10
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: IN
31060: IFFALSE 31070
// btype = b_lab ;
31062: LD_ADDR_VAR 0 1
31066: PUSH
31067: LD_INT 6
31069: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
31070: LD_VAR 0 6
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: IN
31089: NOT
31090: PUSH
31091: LD_VAR 0 1
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: LD_INT 1
31101: PUSH
31102: LD_INT 2
31104: PUSH
31105: LD_INT 3
31107: PUSH
31108: LD_INT 6
31110: PUSH
31111: LD_INT 36
31113: PUSH
31114: LD_INT 4
31116: PUSH
31117: LD_INT 5
31119: PUSH
31120: LD_INT 31
31122: PUSH
31123: LD_INT 32
31125: PUSH
31126: LD_INT 33
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: IN
31142: NOT
31143: PUSH
31144: LD_VAR 0 6
31148: PUSH
31149: LD_INT 1
31151: EQUAL
31152: AND
31153: OR
31154: PUSH
31155: LD_VAR 0 1
31159: PUSH
31160: LD_INT 2
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: IN
31170: NOT
31171: PUSH
31172: LD_VAR 0 6
31176: PUSH
31177: LD_INT 2
31179: EQUAL
31180: AND
31181: OR
31182: IFFALSE 31192
// mode = 0 ;
31184: LD_ADDR_VAR 0 6
31188: PUSH
31189: LD_INT 0
31191: ST_TO_ADDR
// case mode of 0 :
31192: LD_VAR 0 6
31196: PUSH
31197: LD_INT 0
31199: DOUBLE
31200: EQUAL
31201: IFTRUE 31205
31203: GO 42658
31205: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
31206: LD_ADDR_VAR 0 11
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 0
31223: PUSH
31224: LD_INT 1
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 0
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: PUSH
31245: LD_INT 1
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: PUSH
31252: LD_INT 0
31254: PUSH
31255: LD_INT 1
31257: PUSH
31258: EMPTY
31259: LIST
31260: LIST
31261: PUSH
31262: LD_INT 1
31264: NEG
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: LD_INT 1
31275: NEG
31276: PUSH
31277: LD_INT 1
31279: NEG
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: PUSH
31285: LD_INT 1
31287: NEG
31288: PUSH
31289: LD_INT 2
31291: NEG
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 0
31299: PUSH
31300: LD_INT 2
31302: NEG
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 1
31310: PUSH
31311: LD_INT 1
31313: NEG
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: PUSH
31319: LD_INT 1
31321: PUSH
31322: LD_INT 2
31324: PUSH
31325: EMPTY
31326: LIST
31327: LIST
31328: PUSH
31329: LD_INT 0
31331: PUSH
31332: LD_INT 2
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 1
31341: NEG
31342: PUSH
31343: LD_INT 1
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 3
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: LD_INT 3
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: LD_INT 2
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31399: LD_ADDR_VAR 0 12
31403: PUSH
31404: LD_INT 0
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 0
31416: PUSH
31417: LD_INT 1
31419: NEG
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PUSH
31425: LD_INT 1
31427: PUSH
31428: LD_INT 0
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: PUSH
31435: LD_INT 1
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 0
31447: PUSH
31448: LD_INT 1
31450: PUSH
31451: EMPTY
31452: LIST
31453: LIST
31454: PUSH
31455: LD_INT 1
31457: NEG
31458: PUSH
31459: LD_INT 0
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 1
31468: NEG
31469: PUSH
31470: LD_INT 1
31472: NEG
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: PUSH
31478: LD_INT 1
31480: PUSH
31481: LD_INT 1
31483: NEG
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: PUSH
31489: LD_INT 2
31491: PUSH
31492: LD_INT 0
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: PUSH
31499: LD_INT 2
31501: PUSH
31502: LD_INT 1
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: PUSH
31509: LD_INT 1
31511: NEG
31512: PUSH
31513: LD_INT 1
31515: PUSH
31516: EMPTY
31517: LIST
31518: LIST
31519: PUSH
31520: LD_INT 2
31522: NEG
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 2
31533: NEG
31534: PUSH
31535: LD_INT 1
31537: NEG
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: PUSH
31543: LD_INT 2
31545: NEG
31546: PUSH
31547: LD_INT 1
31549: PUSH
31550: EMPTY
31551: LIST
31552: LIST
31553: PUSH
31554: LD_INT 3
31556: NEG
31557: PUSH
31558: LD_INT 0
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 3
31567: NEG
31568: PUSH
31569: LD_INT 1
31571: NEG
31572: PUSH
31573: EMPTY
31574: LIST
31575: LIST
31576: PUSH
31577: EMPTY
31578: LIST
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31595: LD_ADDR_VAR 0 13
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: LD_INT 0
31605: PUSH
31606: EMPTY
31607: LIST
31608: LIST
31609: PUSH
31610: LD_INT 0
31612: PUSH
31613: LD_INT 1
31615: NEG
31616: PUSH
31617: EMPTY
31618: LIST
31619: LIST
31620: PUSH
31621: LD_INT 1
31623: PUSH
31624: LD_INT 0
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: PUSH
31631: LD_INT 1
31633: PUSH
31634: LD_INT 1
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: LD_INT 1
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 1
31653: NEG
31654: PUSH
31655: LD_INT 0
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 1
31664: NEG
31665: PUSH
31666: LD_INT 1
31668: NEG
31669: PUSH
31670: EMPTY
31671: LIST
31672: LIST
31673: PUSH
31674: LD_INT 1
31676: NEG
31677: PUSH
31678: LD_INT 2
31680: NEG
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PUSH
31686: LD_INT 2
31688: PUSH
31689: LD_INT 1
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: PUSH
31696: LD_INT 2
31698: PUSH
31699: LD_INT 2
31701: PUSH
31702: EMPTY
31703: LIST
31704: LIST
31705: PUSH
31706: LD_INT 1
31708: PUSH
31709: LD_INT 2
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 2
31730: NEG
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: EMPTY
31737: LIST
31738: LIST
31739: PUSH
31740: LD_INT 2
31742: NEG
31743: PUSH
31744: LD_INT 3
31746: NEG
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PUSH
31752: LD_INT 3
31754: NEG
31755: PUSH
31756: LD_INT 2
31758: NEG
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: PUSH
31764: LD_INT 3
31766: NEG
31767: PUSH
31768: LD_INT 3
31770: NEG
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
31794: LD_ADDR_VAR 0 14
31798: PUSH
31799: LD_INT 0
31801: PUSH
31802: LD_INT 0
31804: PUSH
31805: EMPTY
31806: LIST
31807: LIST
31808: PUSH
31809: LD_INT 0
31811: PUSH
31812: LD_INT 1
31814: NEG
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: PUSH
31823: LD_INT 0
31825: PUSH
31826: EMPTY
31827: LIST
31828: LIST
31829: PUSH
31830: LD_INT 1
31832: PUSH
31833: LD_INT 1
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 0
31842: PUSH
31843: LD_INT 1
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: NEG
31853: PUSH
31854: LD_INT 0
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PUSH
31861: LD_INT 1
31863: NEG
31864: PUSH
31865: LD_INT 1
31867: NEG
31868: PUSH
31869: EMPTY
31870: LIST
31871: LIST
31872: PUSH
31873: LD_INT 1
31875: NEG
31876: PUSH
31877: LD_INT 2
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 0
31887: PUSH
31888: LD_INT 2
31890: NEG
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: LD_INT 1
31898: PUSH
31899: LD_INT 1
31901: NEG
31902: PUSH
31903: EMPTY
31904: LIST
31905: LIST
31906: PUSH
31907: LD_INT 1
31909: PUSH
31910: LD_INT 2
31912: PUSH
31913: EMPTY
31914: LIST
31915: LIST
31916: PUSH
31917: LD_INT 0
31919: PUSH
31920: LD_INT 2
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 1
31929: NEG
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: NEG
31941: PUSH
31942: LD_INT 3
31944: NEG
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 0
31952: PUSH
31953: LD_INT 3
31955: NEG
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: PUSH
31961: LD_INT 1
31963: PUSH
31964: LD_INT 2
31966: NEG
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: LIST
31987: LIST
31988: LIST
31989: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
31990: LD_ADDR_VAR 0 15
31994: PUSH
31995: LD_INT 0
31997: PUSH
31998: LD_INT 0
32000: PUSH
32001: EMPTY
32002: LIST
32003: LIST
32004: PUSH
32005: LD_INT 0
32007: PUSH
32008: LD_INT 1
32010: NEG
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PUSH
32016: LD_INT 1
32018: PUSH
32019: LD_INT 0
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 1
32028: PUSH
32029: LD_INT 1
32031: PUSH
32032: EMPTY
32033: LIST
32034: LIST
32035: PUSH
32036: LD_INT 0
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: EMPTY
32043: LIST
32044: LIST
32045: PUSH
32046: LD_INT 1
32048: NEG
32049: PUSH
32050: LD_INT 0
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 1
32059: NEG
32060: PUSH
32061: LD_INT 1
32063: NEG
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: PUSH
32069: LD_INT 1
32071: PUSH
32072: LD_INT 1
32074: NEG
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 0
32085: PUSH
32086: EMPTY
32087: LIST
32088: LIST
32089: PUSH
32090: LD_INT 2
32092: PUSH
32093: LD_INT 1
32095: PUSH
32096: EMPTY
32097: LIST
32098: LIST
32099: PUSH
32100: LD_INT 1
32102: NEG
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 2
32113: NEG
32114: PUSH
32115: LD_INT 0
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 2
32124: NEG
32125: PUSH
32126: LD_INT 1
32128: NEG
32129: PUSH
32130: EMPTY
32131: LIST
32132: LIST
32133: PUSH
32134: LD_INT 2
32136: PUSH
32137: LD_INT 1
32139: NEG
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: EMPTY
32152: LIST
32153: LIST
32154: PUSH
32155: LD_INT 3
32157: PUSH
32158: LD_INT 1
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
32183: LD_ADDR_VAR 0 16
32187: PUSH
32188: LD_INT 0
32190: PUSH
32191: LD_INT 0
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 0
32200: PUSH
32201: LD_INT 1
32203: NEG
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: LD_INT 0
32214: PUSH
32215: EMPTY
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 1
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 0
32231: PUSH
32232: LD_INT 1
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 0
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 1
32252: NEG
32253: PUSH
32254: LD_INT 1
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: NEG
32265: PUSH
32266: LD_INT 2
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 2
32276: PUSH
32277: LD_INT 1
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 2
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 1
32296: PUSH
32297: LD_INT 2
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 2
32306: NEG
32307: PUSH
32308: LD_INT 1
32310: NEG
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 2
32318: NEG
32319: PUSH
32320: LD_INT 2
32322: NEG
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 3
32330: PUSH
32331: LD_INT 2
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 3
32340: PUSH
32341: LD_INT 3
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: PUSH
32351: LD_INT 3
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32376: LD_ADDR_VAR 0 17
32380: PUSH
32381: LD_INT 0
32383: PUSH
32384: LD_INT 0
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 0
32393: PUSH
32394: LD_INT 1
32396: NEG
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 1
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 1
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 0
32424: PUSH
32425: LD_INT 1
32427: PUSH
32428: EMPTY
32429: LIST
32430: LIST
32431: PUSH
32432: LD_INT 1
32434: NEG
32435: PUSH
32436: LD_INT 0
32438: PUSH
32439: EMPTY
32440: LIST
32441: LIST
32442: PUSH
32443: LD_INT 1
32445: NEG
32446: PUSH
32447: LD_INT 1
32449: NEG
32450: PUSH
32451: EMPTY
32452: LIST
32453: LIST
32454: PUSH
32455: LD_INT 1
32457: NEG
32458: PUSH
32459: LD_INT 2
32461: NEG
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 0
32469: PUSH
32470: LD_INT 2
32472: NEG
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 1
32480: PUSH
32481: LD_INT 1
32483: NEG
32484: PUSH
32485: EMPTY
32486: LIST
32487: LIST
32488: PUSH
32489: LD_INT 2
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: EMPTY
32496: LIST
32497: LIST
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: PUSH
32519: LD_INT 1
32521: PUSH
32522: LD_INT 2
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 2
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 1
32541: NEG
32542: PUSH
32543: LD_INT 1
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 2
32552: NEG
32553: PUSH
32554: LD_INT 0
32556: PUSH
32557: EMPTY
32558: LIST
32559: LIST
32560: PUSH
32561: LD_INT 2
32563: NEG
32564: PUSH
32565: LD_INT 1
32567: NEG
32568: PUSH
32569: EMPTY
32570: LIST
32571: LIST
32572: PUSH
32573: LD_INT 2
32575: NEG
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32606: LD_ADDR_VAR 0 18
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: LD_INT 0
32616: PUSH
32617: EMPTY
32618: LIST
32619: LIST
32620: PUSH
32621: LD_INT 0
32623: PUSH
32624: LD_INT 1
32626: NEG
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 1
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: LD_INT 1
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 0
32654: PUSH
32655: LD_INT 1
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: LD_INT 1
32664: NEG
32665: PUSH
32666: LD_INT 0
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 1
32675: NEG
32676: PUSH
32677: LD_INT 1
32679: NEG
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 1
32687: NEG
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: EMPTY
32694: LIST
32695: LIST
32696: PUSH
32697: LD_INT 0
32699: PUSH
32700: LD_INT 2
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: LD_INT 1
32713: NEG
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: PUSH
32719: LD_INT 2
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PUSH
32729: LD_INT 2
32731: PUSH
32732: LD_INT 1
32734: PUSH
32735: EMPTY
32736: LIST
32737: LIST
32738: PUSH
32739: LD_INT 2
32741: PUSH
32742: LD_INT 2
32744: PUSH
32745: EMPTY
32746: LIST
32747: LIST
32748: PUSH
32749: LD_INT 1
32751: PUSH
32752: LD_INT 2
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 0
32761: PUSH
32762: LD_INT 2
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: LD_INT 1
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: PUSH
32780: LD_INT 2
32782: NEG
32783: PUSH
32784: LD_INT 0
32786: PUSH
32787: EMPTY
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 2
32793: NEG
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: EMPTY
32800: LIST
32801: LIST
32802: PUSH
32803: LD_INT 2
32805: NEG
32806: PUSH
32807: LD_INT 2
32809: NEG
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32836: LD_ADDR_VAR 0 19
32840: PUSH
32841: LD_INT 0
32843: PUSH
32844: LD_INT 0
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: LD_INT 0
32853: PUSH
32854: LD_INT 1
32856: NEG
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 1
32864: PUSH
32865: LD_INT 0
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: LD_INT 1
32874: PUSH
32875: LD_INT 1
32877: PUSH
32878: EMPTY
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 0
32884: PUSH
32885: LD_INT 1
32887: PUSH
32888: EMPTY
32889: LIST
32890: LIST
32891: PUSH
32892: LD_INT 1
32894: NEG
32895: PUSH
32896: LD_INT 0
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 1
32905: NEG
32906: PUSH
32907: LD_INT 1
32909: NEG
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: PUSH
32915: LD_INT 1
32917: NEG
32918: PUSH
32919: LD_INT 2
32921: NEG
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 0
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: EMPTY
32935: LIST
32936: LIST
32937: PUSH
32938: LD_INT 1
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: EMPTY
32946: LIST
32947: LIST
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 2
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: LD_INT 2
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: PUSH
32979: LD_INT 1
32981: PUSH
32982: LD_INT 2
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: LD_INT 2
32994: PUSH
32995: EMPTY
32996: LIST
32997: LIST
32998: PUSH
32999: LD_INT 1
33001: NEG
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 2
33012: NEG
33013: PUSH
33014: LD_INT 0
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: PUSH
33021: LD_INT 2
33023: NEG
33024: PUSH
33025: LD_INT 1
33027: NEG
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: NEG
33036: PUSH
33037: LD_INT 2
33039: NEG
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: PUSH
33045: EMPTY
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33066: LD_ADDR_VAR 0 20
33070: PUSH
33071: LD_INT 0
33073: PUSH
33074: LD_INT 0
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: PUSH
33081: LD_INT 0
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: LD_INT 0
33097: PUSH
33098: EMPTY
33099: LIST
33100: LIST
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: LD_INT 1
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 1
33124: NEG
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 1
33135: NEG
33136: PUSH
33137: LD_INT 1
33139: NEG
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 2
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: LD_INT 2
33162: NEG
33163: PUSH
33164: EMPTY
33165: LIST
33166: LIST
33167: PUSH
33168: LD_INT 1
33170: PUSH
33171: LD_INT 1
33173: NEG
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 2
33181: PUSH
33182: LD_INT 0
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 1
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: PUSH
33199: LD_INT 2
33201: PUSH
33202: LD_INT 2
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 1
33211: PUSH
33212: LD_INT 2
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 0
33221: PUSH
33222: LD_INT 2
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 1
33231: NEG
33232: PUSH
33233: LD_INT 1
33235: PUSH
33236: EMPTY
33237: LIST
33238: LIST
33239: PUSH
33240: LD_INT 2
33242: NEG
33243: PUSH
33244: LD_INT 0
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: NEG
33254: PUSH
33255: LD_INT 1
33257: NEG
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 2
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33296: LD_ADDR_VAR 0 21
33300: PUSH
33301: LD_INT 0
33303: PUSH
33304: LD_INT 0
33306: PUSH
33307: EMPTY
33308: LIST
33309: LIST
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: LD_INT 1
33316: NEG
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: LD_INT 0
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: LD_INT 1
33334: PUSH
33335: LD_INT 1
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PUSH
33342: LD_INT 0
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: PUSH
33352: LD_INT 1
33354: NEG
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 1
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 1
33377: NEG
33378: PUSH
33379: LD_INT 2
33381: NEG
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: LD_INT 0
33389: PUSH
33390: LD_INT 2
33392: NEG
33393: PUSH
33394: EMPTY
33395: LIST
33396: LIST
33397: PUSH
33398: LD_INT 1
33400: PUSH
33401: LD_INT 1
33403: NEG
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 0
33414: PUSH
33415: EMPTY
33416: LIST
33417: LIST
33418: PUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 1
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 2
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 1
33441: PUSH
33442: LD_INT 2
33444: PUSH
33445: EMPTY
33446: LIST
33447: LIST
33448: PUSH
33449: LD_INT 0
33451: PUSH
33452: LD_INT 2
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: LD_INT 1
33465: PUSH
33466: EMPTY
33467: LIST
33468: LIST
33469: PUSH
33470: LD_INT 2
33472: NEG
33473: PUSH
33474: LD_INT 0
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 1
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 2
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33526: LD_ADDR_VAR 0 22
33530: PUSH
33531: LD_INT 0
33533: PUSH
33534: LD_INT 0
33536: PUSH
33537: EMPTY
33538: LIST
33539: LIST
33540: PUSH
33541: LD_INT 0
33543: PUSH
33544: LD_INT 1
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 1
33554: PUSH
33555: LD_INT 0
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 1
33564: PUSH
33565: LD_INT 1
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: PUSH
33572: LD_INT 0
33574: PUSH
33575: LD_INT 1
33577: PUSH
33578: EMPTY
33579: LIST
33580: LIST
33581: PUSH
33582: LD_INT 1
33584: NEG
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 1
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 1
33607: NEG
33608: PUSH
33609: LD_INT 2
33611: NEG
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 2
33622: NEG
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: PUSH
33628: LD_INT 1
33630: PUSH
33631: LD_INT 1
33633: NEG
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PUSH
33639: LD_INT 2
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 2
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: PUSH
33659: LD_INT 2
33661: PUSH
33662: LD_INT 2
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 1
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 0
33681: PUSH
33682: LD_INT 2
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: PUSH
33689: LD_INT 1
33691: NEG
33692: PUSH
33693: LD_INT 1
33695: PUSH
33696: EMPTY
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 2
33702: NEG
33703: PUSH
33704: LD_INT 0
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: LD_INT 2
33725: NEG
33726: PUSH
33727: LD_INT 2
33729: NEG
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: EMPTY
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
33756: LD_ADDR_VAR 0 23
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: LD_INT 1
33776: NEG
33777: PUSH
33778: EMPTY
33779: LIST
33780: LIST
33781: PUSH
33782: LD_INT 1
33784: PUSH
33785: LD_INT 0
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: PUSH
33792: LD_INT 1
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: EMPTY
33799: LIST
33800: LIST
33801: PUSH
33802: LD_INT 0
33804: PUSH
33805: LD_INT 1
33807: PUSH
33808: EMPTY
33809: LIST
33810: LIST
33811: PUSH
33812: LD_INT 1
33814: NEG
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 1
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 1
33837: NEG
33838: PUSH
33839: LD_INT 2
33841: NEG
33842: PUSH
33843: EMPTY
33844: LIST
33845: LIST
33846: PUSH
33847: LD_INT 0
33849: PUSH
33850: LD_INT 2
33852: NEG
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: LD_INT 1
33863: NEG
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 2
33881: PUSH
33882: LD_INT 1
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: LD_INT 2
33891: PUSH
33892: LD_INT 2
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 1
33901: PUSH
33902: LD_INT 2
33904: PUSH
33905: EMPTY
33906: LIST
33907: LIST
33908: PUSH
33909: LD_INT 0
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: EMPTY
33916: LIST
33917: LIST
33918: PUSH
33919: LD_INT 1
33921: NEG
33922: PUSH
33923: LD_INT 1
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: PUSH
33930: LD_INT 2
33932: NEG
33933: PUSH
33934: LD_INT 0
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 1
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: LD_INT 2
33955: NEG
33956: PUSH
33957: LD_INT 2
33959: NEG
33960: PUSH
33961: EMPTY
33962: LIST
33963: LIST
33964: PUSH
33965: LD_INT 2
33967: NEG
33968: PUSH
33969: LD_INT 3
33971: NEG
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 3
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: PUSH
33992: LD_INT 2
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 2
34002: PUSH
34003: LD_INT 1
34005: NEG
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
34036: LD_ADDR_VAR 0 24
34040: PUSH
34041: LD_INT 0
34043: PUSH
34044: LD_INT 0
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: PUSH
34051: LD_INT 0
34053: PUSH
34054: LD_INT 1
34056: NEG
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 1
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: PUSH
34072: LD_INT 1
34074: PUSH
34075: LD_INT 1
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 0
34084: PUSH
34085: LD_INT 1
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 1
34094: NEG
34095: PUSH
34096: LD_INT 0
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 1
34109: NEG
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_INT 1
34117: NEG
34118: PUSH
34119: LD_INT 2
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 2
34132: NEG
34133: PUSH
34134: EMPTY
34135: LIST
34136: LIST
34137: PUSH
34138: LD_INT 1
34140: PUSH
34141: LD_INT 1
34143: NEG
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 2
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: PUSH
34162: LD_INT 1
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 2
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PUSH
34179: LD_INT 1
34181: PUSH
34182: LD_INT 2
34184: PUSH
34185: EMPTY
34186: LIST
34187: LIST
34188: PUSH
34189: LD_INT 0
34191: PUSH
34192: LD_INT 2
34194: PUSH
34195: EMPTY
34196: LIST
34197: LIST
34198: PUSH
34199: LD_INT 1
34201: NEG
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 2
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 2
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 2
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 1
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 2
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 3
34269: PUSH
34270: LD_INT 1
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 3
34279: PUSH
34280: LD_INT 2
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: LIST
34304: LIST
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
34312: LD_ADDR_VAR 0 25
34316: PUSH
34317: LD_INT 0
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 0
34329: PUSH
34330: LD_INT 1
34332: NEG
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 0
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: PUSH
34351: LD_INT 1
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: PUSH
34358: LD_INT 0
34360: PUSH
34361: LD_INT 1
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 0
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PUSH
34379: LD_INT 1
34381: NEG
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PUSH
34395: LD_INT 2
34397: NEG
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: PUSH
34403: LD_INT 0
34405: PUSH
34406: LD_INT 2
34408: NEG
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: PUSH
34417: LD_INT 1
34419: NEG
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: PUSH
34428: LD_INT 0
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: LD_INT 1
34440: PUSH
34441: EMPTY
34442: LIST
34443: LIST
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 1
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 0
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 1
34477: NEG
34478: PUSH
34479: LD_INT 1
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 2
34488: NEG
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 2
34499: NEG
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 2
34511: NEG
34512: PUSH
34513: LD_INT 2
34515: NEG
34516: PUSH
34517: EMPTY
34518: LIST
34519: LIST
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: PUSH
34531: LD_INT 3
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: PUSH
34541: LD_INT 2
34543: PUSH
34544: LD_INT 3
34546: PUSH
34547: EMPTY
34548: LIST
34549: LIST
34550: PUSH
34551: LD_INT 1
34553: PUSH
34554: LD_INT 3
34556: PUSH
34557: EMPTY
34558: LIST
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
34586: LD_ADDR_VAR 0 26
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: NEG
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 0
34679: PUSH
34680: LD_INT 2
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: PUSH
34691: LD_INT 1
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 0
34704: PUSH
34705: EMPTY
34706: LIST
34707: LIST
34708: PUSH
34709: LD_INT 2
34711: PUSH
34712: LD_INT 1
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: PUSH
34719: LD_INT 2
34721: PUSH
34722: LD_INT 2
34724: PUSH
34725: EMPTY
34726: LIST
34727: LIST
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: LD_INT 0
34741: PUSH
34742: LD_INT 2
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 1
34751: NEG
34752: PUSH
34753: LD_INT 1
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 0
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: LD_INT 2
34773: NEG
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 2
34785: NEG
34786: PUSH
34787: LD_INT 2
34789: NEG
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: PUSH
34795: LD_INT 2
34797: PUSH
34798: LD_INT 3
34800: PUSH
34801: EMPTY
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 1
34807: PUSH
34808: LD_INT 3
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: LD_INT 2
34828: NEG
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: EMPTY
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
34862: LD_ADDR_VAR 0 27
34866: PUSH
34867: LD_INT 0
34869: PUSH
34870: LD_INT 0
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: NEG
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 1
34890: PUSH
34891: LD_INT 0
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 1
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: EMPTY
34905: LIST
34906: LIST
34907: PUSH
34908: LD_INT 0
34910: PUSH
34911: LD_INT 1
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 1
34920: NEG
34921: PUSH
34922: LD_INT 0
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: LD_INT 1
34931: NEG
34932: PUSH
34933: LD_INT 1
34935: NEG
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: LD_INT 1
34943: NEG
34944: PUSH
34945: LD_INT 2
34947: NEG
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 2
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 2
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 2
34997: PUSH
34998: LD_INT 2
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: PUSH
35008: LD_INT 2
35010: PUSH
35011: EMPTY
35012: LIST
35013: LIST
35014: PUSH
35015: LD_INT 0
35017: PUSH
35018: LD_INT 2
35020: PUSH
35021: EMPTY
35022: LIST
35023: LIST
35024: PUSH
35025: LD_INT 1
35027: NEG
35028: PUSH
35029: LD_INT 1
35031: PUSH
35032: EMPTY
35033: LIST
35034: LIST
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: PUSH
35047: LD_INT 2
35049: NEG
35050: PUSH
35051: LD_INT 1
35053: NEG
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 2
35061: NEG
35062: PUSH
35063: LD_INT 2
35065: NEG
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: NEG
35074: PUSH
35075: LD_INT 2
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_INT 2
35084: NEG
35085: PUSH
35086: LD_INT 1
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 3
35095: NEG
35096: PUSH
35097: LD_INT 1
35099: NEG
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 3
35107: NEG
35108: PUSH
35109: LD_INT 2
35111: NEG
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
35142: LD_ADDR_VAR 0 28
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: LD_INT 1
35246: PUSH
35247: LD_INT 1
35249: NEG
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: PUSH
35255: LD_INT 2
35257: PUSH
35258: LD_INT 0
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 2
35267: PUSH
35268: LD_INT 1
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: PUSH
35288: LD_INT 2
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 2
35300: PUSH
35301: EMPTY
35302: LIST
35303: LIST
35304: PUSH
35305: LD_INT 1
35307: NEG
35308: PUSH
35309: LD_INT 1
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PUSH
35316: LD_INT 2
35318: NEG
35319: PUSH
35320: LD_INT 0
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 2
35329: NEG
35330: PUSH
35331: LD_INT 1
35333: NEG
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 2
35341: NEG
35342: PUSH
35343: LD_INT 2
35345: NEG
35346: PUSH
35347: EMPTY
35348: LIST
35349: LIST
35350: PUSH
35351: LD_INT 2
35353: NEG
35354: PUSH
35355: LD_INT 3
35357: NEG
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 1
35365: NEG
35366: PUSH
35367: LD_INT 3
35369: NEG
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 3
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 3
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35424: LD_ADDR_VAR 0 29
35428: PUSH
35429: LD_INT 0
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 0
35441: PUSH
35442: LD_INT 1
35444: NEG
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: LD_INT 0
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 1
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 1
35482: NEG
35483: PUSH
35484: LD_INT 0
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: PUSH
35491: LD_INT 1
35493: NEG
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 1
35505: NEG
35506: PUSH
35507: LD_INT 2
35509: NEG
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: PUSH
35515: LD_INT 0
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: EMPTY
35523: LIST
35524: LIST
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 1
35531: NEG
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PUSH
35537: LD_INT 2
35539: PUSH
35540: LD_INT 0
35542: PUSH
35543: EMPTY
35544: LIST
35545: LIST
35546: PUSH
35547: LD_INT 2
35549: PUSH
35550: LD_INT 1
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: PUSH
35557: LD_INT 1
35559: PUSH
35560: LD_INT 2
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 0
35569: PUSH
35570: LD_INT 2
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: NEG
35580: PUSH
35581: LD_INT 1
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 2
35590: NEG
35591: PUSH
35592: LD_INT 1
35594: NEG
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 2
35602: NEG
35603: PUSH
35604: LD_INT 2
35606: NEG
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: PUSH
35612: LD_INT 2
35614: NEG
35615: PUSH
35616: LD_INT 3
35618: NEG
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 2
35626: PUSH
35627: LD_INT 1
35629: NEG
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: PUSH
35635: LD_INT 3
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: EMPTY
35642: LIST
35643: LIST
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: LD_INT 3
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 2
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: LD_INT 3
35668: NEG
35669: PUSH
35670: LD_INT 2
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: EMPTY
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35703: LD_ADDR_VAR 0 30
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: LD_INT 0
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 1
35723: NEG
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: PUSH
35732: LD_INT 0
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: LD_INT 1
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 1
35754: PUSH
35755: EMPTY
35756: LIST
35757: LIST
35758: PUSH
35759: LD_INT 1
35761: NEG
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 1
35776: NEG
35777: PUSH
35778: EMPTY
35779: LIST
35780: LIST
35781: PUSH
35782: LD_INT 1
35784: NEG
35785: PUSH
35786: LD_INT 2
35788: NEG
35789: PUSH
35790: EMPTY
35791: LIST
35792: LIST
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 1
35807: PUSH
35808: LD_INT 1
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 2
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: EMPTY
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 2
35828: PUSH
35829: LD_INT 1
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 2
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: LD_INT 2
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 1
35858: NEG
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: NEG
35870: PUSH
35871: LD_INT 0
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 1
35892: NEG
35893: PUSH
35894: LD_INT 3
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: PUSH
35905: LD_INT 2
35907: NEG
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 3
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 2
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: EMPTY
35930: LIST
35931: LIST
35932: PUSH
35933: LD_INT 2
35935: NEG
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 3
35946: NEG
35947: PUSH
35948: LD_INT 1
35950: NEG
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35981: LD_ADDR_VAR 0 31
35985: PUSH
35986: LD_INT 0
35988: PUSH
35989: LD_INT 0
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 1
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 1
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 1
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 1
36039: NEG
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: NEG
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: LD_INT 2
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: NEG
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 2
36085: PUSH
36086: LD_INT 0
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 2
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 2
36105: PUSH
36106: LD_INT 2
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 2
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 1
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 2
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: LD_INT 2
36158: NEG
36159: PUSH
36160: LD_INT 2
36162: NEG
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 2
36170: NEG
36171: PUSH
36172: LD_INT 3
36174: NEG
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 2
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 3
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 1
36213: NEG
36214: PUSH
36215: LD_INT 2
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 3
36224: NEG
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36259: LD_ADDR_VAR 0 32
36263: PUSH
36264: LD_INT 0
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: EMPTY
36271: LIST
36272: LIST
36273: PUSH
36274: LD_INT 0
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 1
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 1
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: LD_INT 0
36307: PUSH
36308: LD_INT 1
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PUSH
36315: LD_INT 1
36317: NEG
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: LD_INT 1
36332: NEG
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: LD_INT 2
36344: NEG
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 2
36355: NEG
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: LD_INT 1
36366: NEG
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 0
36404: PUSH
36405: LD_INT 2
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 1
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: NEG
36426: PUSH
36427: LD_INT 0
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 2
36436: NEG
36437: PUSH
36438: LD_INT 1
36440: NEG
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: LD_INT 3
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 1
36460: PUSH
36461: LD_INT 2
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 3
36471: PUSH
36472: LD_INT 2
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 2
36481: PUSH
36482: LD_INT 3
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 2
36491: NEG
36492: PUSH
36493: LD_INT 1
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 3
36502: NEG
36503: PUSH
36504: LD_INT 1
36506: NEG
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
36537: LD_ADDR_VAR 0 33
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: LD_INT 1
36557: NEG
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: LD_INT 0
36568: PUSH
36569: EMPTY
36570: LIST
36571: LIST
36572: PUSH
36573: LD_INT 1
36575: PUSH
36576: LD_INT 1
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 0
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 1
36606: NEG
36607: PUSH
36608: LD_INT 1
36610: NEG
36611: PUSH
36612: EMPTY
36613: LIST
36614: LIST
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: LD_INT 2
36622: NEG
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: EMPTY
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 2
36641: PUSH
36642: LD_INT 0
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 2
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: LD_INT 2
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 2
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 1
36681: NEG
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 2
36692: NEG
36693: PUSH
36694: LD_INT 0
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: NEG
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 2
36715: NEG
36716: PUSH
36717: LD_INT 2
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: LD_INT 3
36731: NEG
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 1
36742: NEG
36743: PUSH
36744: EMPTY
36745: LIST
36746: LIST
36747: PUSH
36748: LD_INT 3
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: EMPTY
36755: LIST
36756: LIST
36757: PUSH
36758: LD_INT 1
36760: PUSH
36761: LD_INT 3
36763: PUSH
36764: EMPTY
36765: LIST
36766: LIST
36767: PUSH
36768: LD_INT 1
36770: NEG
36771: PUSH
36772: LD_INT 2
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: PUSH
36779: LD_INT 3
36781: NEG
36782: PUSH
36783: LD_INT 2
36785: NEG
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: LIST
36803: LIST
36804: LIST
36805: LIST
36806: LIST
36807: LIST
36808: LIST
36809: LIST
36810: LIST
36811: LIST
36812: LIST
36813: LIST
36814: LIST
36815: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36816: LD_ADDR_VAR 0 34
36820: PUSH
36821: LD_INT 0
36823: PUSH
36824: LD_INT 0
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: LD_INT 1
36836: NEG
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: LD_INT 0
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: LD_INT 1
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 0
36864: PUSH
36865: LD_INT 1
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 1
36874: NEG
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: NEG
36886: PUSH
36887: LD_INT 1
36889: NEG
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: LD_INT 2
36901: NEG
36902: PUSH
36903: EMPTY
36904: LIST
36905: LIST
36906: PUSH
36907: LD_INT 0
36909: PUSH
36910: LD_INT 2
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: LD_INT 1
36920: PUSH
36921: LD_INT 1
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: LD_INT 2
36931: PUSH
36932: LD_INT 1
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 2
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: LD_INT 1
36951: PUSH
36952: LD_INT 2
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 1
36961: NEG
36962: PUSH
36963: LD_INT 1
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 2
36972: NEG
36973: PUSH
36974: LD_INT 0
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: NEG
36984: PUSH
36985: LD_INT 1
36987: NEG
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 2
36995: NEG
36996: PUSH
36997: LD_INT 2
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 3
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 1
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 2
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 2
37040: PUSH
37041: LD_INT 3
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 2
37050: NEG
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 3
37061: NEG
37062: PUSH
37063: LD_INT 1
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: EMPTY
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37096: LD_ADDR_VAR 0 35
37100: PUSH
37101: LD_INT 0
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 1
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 1
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: PUSH
37152: LD_INT 1
37154: NEG
37155: PUSH
37156: LD_INT 0
37158: PUSH
37159: EMPTY
37160: LIST
37161: LIST
37162: PUSH
37163: LD_INT 1
37165: NEG
37166: PUSH
37167: LD_INT 1
37169: NEG
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: PUSH
37175: LD_INT 2
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 1
37191: NEG
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: LIST
37203: LIST
37204: LIST
37205: LIST
37206: LIST
37207: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37208: LD_ADDR_VAR 0 36
37212: PUSH
37213: LD_INT 0
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 0
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 1
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 1
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 0
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: LD_INT 1
37266: NEG
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 1
37277: NEG
37278: PUSH
37279: LD_INT 1
37281: NEG
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: LD_INT 2
37293: NEG
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37320: LD_ADDR_VAR 0 37
37324: PUSH
37325: LD_INT 0
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 0
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PUSH
37356: LD_INT 1
37358: PUSH
37359: LD_INT 1
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: PUSH
37366: LD_INT 0
37368: PUSH
37369: LD_INT 1
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: LD_INT 0
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 1
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 1
37412: NEG
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
37432: LD_ADDR_VAR 0 38
37436: PUSH
37437: LD_INT 0
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 0
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: EMPTY
37475: LIST
37476: LIST
37477: PUSH
37478: LD_INT 0
37480: PUSH
37481: LD_INT 1
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: NEG
37491: PUSH
37492: LD_INT 0
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: LD_INT 1
37505: NEG
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 2
37513: PUSH
37514: LD_INT 1
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: LD_INT 2
37523: NEG
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
37544: LD_ADDR_VAR 0 39
37548: PUSH
37549: LD_INT 0
37551: PUSH
37552: LD_INT 0
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 0
37561: PUSH
37562: LD_INT 1
37564: NEG
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 1
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: PUSH
37583: LD_INT 1
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: PUSH
37590: LD_INT 0
37592: PUSH
37593: LD_INT 1
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: NEG
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: NEG
37614: PUSH
37615: LD_INT 1
37617: NEG
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PUSH
37623: LD_INT 1
37625: NEG
37626: PUSH
37627: LD_INT 2
37629: NEG
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 1
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
37656: LD_ADDR_VAR 0 40
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: LD_INT 0
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: LD_INT 1
37676: NEG
37677: PUSH
37678: EMPTY
37679: LIST
37680: LIST
37681: PUSH
37682: LD_INT 1
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: PUSH
37692: LD_INT 1
37694: PUSH
37695: LD_INT 1
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: LD_INT 1
37707: PUSH
37708: EMPTY
37709: LIST
37710: LIST
37711: PUSH
37712: LD_INT 1
37714: NEG
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: EMPTY
37720: LIST
37721: LIST
37722: PUSH
37723: LD_INT 1
37725: NEG
37726: PUSH
37727: LD_INT 1
37729: NEG
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: PUSH
37735: LD_INT 1
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: LIST
37767: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37768: LD_ADDR_VAR 0 41
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: LD_INT 1
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 1
37796: PUSH
37797: LD_INT 0
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 1
37806: PUSH
37807: LD_INT 1
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 1
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 1
37826: NEG
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: EMPTY
37832: LIST
37833: LIST
37834: PUSH
37835: LD_INT 1
37837: NEG
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: NEG
37850: PUSH
37851: LD_INT 2
37853: NEG
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 1
37861: PUSH
37862: LD_INT 1
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 2
37872: PUSH
37873: LD_INT 0
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: LD_INT 2
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: PUSH
37903: LD_INT 2
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: LD_INT 1
37912: NEG
37913: PUSH
37914: LD_INT 1
37916: PUSH
37917: EMPTY
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: LD_INT 0
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: LD_INT 1
37938: NEG
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: NEG
37947: PUSH
37948: LD_INT 2
37950: NEG
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: PUSH
37956: LD_INT 2
37958: NEG
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 3
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 3
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 3
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 3
38011: PUSH
38012: LD_INT 3
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 3
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: NEG
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 3
38042: NEG
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 3
38053: NEG
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 3
38065: NEG
38066: PUSH
38067: LD_INT 2
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: NEG
38078: PUSH
38079: LD_INT 3
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38118: LD_ADDR_VAR 0 42
38122: PUSH
38123: LD_INT 0
38125: PUSH
38126: LD_INT 0
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: LD_INT 1
38138: NEG
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: PUSH
38144: LD_INT 1
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: EMPTY
38151: LIST
38152: LIST
38153: PUSH
38154: LD_INT 1
38156: PUSH
38157: LD_INT 1
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 0
38166: PUSH
38167: LD_INT 1
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 1
38176: NEG
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 2
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 0
38211: PUSH
38212: LD_INT 2
38214: NEG
38215: PUSH
38216: EMPTY
38217: LIST
38218: LIST
38219: PUSH
38220: LD_INT 1
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: PUSH
38234: LD_INT 1
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 2
38243: PUSH
38244: LD_INT 2
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 0
38263: PUSH
38264: LD_INT 2
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: NEG
38274: PUSH
38275: LD_INT 1
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: LD_INT 1
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: NEG
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: NEG
38309: PUSH
38310: LD_INT 3
38312: NEG
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: LD_INT 1
38320: NEG
38321: PUSH
38322: LD_INT 3
38324: NEG
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: LD_INT 3
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: LD_INT 2
38346: NEG
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: LD_INT 3
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 3
38364: PUSH
38365: LD_INT 3
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PUSH
38372: LD_INT 2
38374: PUSH
38375: LD_INT 3
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 0
38394: PUSH
38395: LD_INT 3
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: LD_INT 2
38408: PUSH
38409: EMPTY
38410: LIST
38411: LIST
38412: PUSH
38413: LD_INT 3
38415: NEG
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: PUSH
38425: LD_INT 3
38427: NEG
38428: PUSH
38429: LD_INT 3
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38468: LD_ADDR_VAR 0 43
38472: PUSH
38473: LD_INT 0
38475: PUSH
38476: LD_INT 0
38478: PUSH
38479: EMPTY
38480: LIST
38481: LIST
38482: PUSH
38483: LD_INT 0
38485: PUSH
38486: LD_INT 1
38488: NEG
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: LD_INT 1
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: PUSH
38504: LD_INT 1
38506: PUSH
38507: LD_INT 1
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: PUSH
38514: LD_INT 0
38516: PUSH
38517: LD_INT 1
38519: PUSH
38520: EMPTY
38521: LIST
38522: LIST
38523: PUSH
38524: LD_INT 1
38526: NEG
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 1
38537: NEG
38538: PUSH
38539: LD_INT 1
38541: NEG
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 1
38549: NEG
38550: PUSH
38551: LD_INT 2
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 0
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: EMPTY
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 1
38572: PUSH
38573: LD_INT 1
38575: NEG
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 2
38583: PUSH
38584: LD_INT 0
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 2
38593: PUSH
38594: LD_INT 1
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: PUSH
38601: LD_INT 1
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 0
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: LD_INT 1
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: LD_INT 2
38634: NEG
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 1
38649: NEG
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: LD_INT 3
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 3
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 1
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 2
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 3
38702: PUSH
38703: LD_INT 0
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: LD_INT 3
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PUSH
38740: LD_INT 1
38742: NEG
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 2
38753: NEG
38754: PUSH
38755: LD_INT 1
38757: PUSH
38758: EMPTY
38759: LIST
38760: LIST
38761: PUSH
38762: LD_INT 3
38764: NEG
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 3
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: NEG
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: LIST
38798: LIST
38799: LIST
38800: LIST
38801: LIST
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38816: LD_ADDR_VAR 0 44
38820: PUSH
38821: LD_INT 0
38823: PUSH
38824: LD_INT 0
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 0
38833: PUSH
38834: LD_INT 1
38836: NEG
38837: PUSH
38838: EMPTY
38839: LIST
38840: LIST
38841: PUSH
38842: LD_INT 1
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 1
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 0
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 1
38874: NEG
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 1
38885: NEG
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 1
38897: NEG
38898: PUSH
38899: LD_INT 2
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: LD_INT 1
38912: NEG
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: LD_INT 1
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 2
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 1
38950: PUSH
38951: LD_INT 2
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 2
38971: NEG
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 2
38982: NEG
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 2
39006: NEG
39007: PUSH
39008: LD_INT 3
39010: NEG
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: LD_INT 0
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: LD_INT 2
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: LD_INT 3
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: LD_INT 3
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: LD_INT 0
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 3
39101: NEG
39102: PUSH
39103: LD_INT 1
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 3
39113: NEG
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 3
39125: NEG
39126: PUSH
39127: LD_INT 3
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39166: LD_ADDR_VAR 0 45
39170: PUSH
39171: LD_INT 0
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 0
39183: PUSH
39184: LD_INT 1
39186: NEG
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 1
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 0
39214: PUSH
39215: LD_INT 1
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 1
39235: NEG
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: LD_INT 2
39251: NEG
39252: PUSH
39253: EMPTY
39254: LIST
39255: LIST
39256: PUSH
39257: LD_INT 0
39259: PUSH
39260: LD_INT 2
39262: NEG
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: PUSH
39268: LD_INT 1
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: LD_INT 1
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: PUSH
39326: EMPTY
39327: LIST
39328: LIST
39329: PUSH
39330: LD_INT 2
39332: NEG
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 2
39344: NEG
39345: PUSH
39346: LD_INT 2
39348: NEG
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 3
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: NEG
39369: PUSH
39370: LD_INT 3
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 3
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: LD_INT 2
39394: NEG
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: LD_INT 3
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 2
39422: PUSH
39423: LD_INT 3
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 3
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 0
39442: PUSH
39443: LD_INT 3
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: PUSH
39450: LD_INT 1
39452: NEG
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 3
39463: NEG
39464: PUSH
39465: LD_INT 2
39467: NEG
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 3
39475: NEG
39476: PUSH
39477: LD_INT 3
39479: NEG
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39516: LD_ADDR_VAR 0 46
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 0
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: NEG
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 2
39693: NEG
39694: PUSH
39695: LD_INT 1
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: NEG
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 2
39731: NEG
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 2
39739: PUSH
39740: LD_INT 1
39742: NEG
39743: PUSH
39744: EMPTY
39745: LIST
39746: LIST
39747: PUSH
39748: LD_INT 3
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: LD_INT 3
39760: PUSH
39761: LD_INT 1
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: PUSH
39771: LD_INT 3
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: LD_INT 3
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 1
39790: NEG
39791: PUSH
39792: LD_INT 2
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 3
39812: NEG
39813: PUSH
39814: LD_INT 0
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 3
39823: NEG
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39864: LD_ADDR_VAR 0 47
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: EMPTY
39887: LIST
39888: LIST
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 1
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 1
39971: NEG
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 2
39979: NEG
39980: PUSH
39981: LD_INT 1
39983: NEG
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 2
39991: NEG
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
40015: LD_ADDR_VAR 0 48
40019: PUSH
40020: LD_INT 0
40022: PUSH
40023: LD_INT 0
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 1
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 1
40073: NEG
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: LD_INT 2
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 0
40108: PUSH
40109: LD_INT 2
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 2
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 2
40140: PUSH
40141: LD_INT 1
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
40162: LD_ADDR_VAR 0 49
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 1
40182: NEG
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 1
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 1
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 0
40210: PUSH
40211: LD_INT 1
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 1
40220: NEG
40221: PUSH
40222: LD_INT 0
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: NEG
40232: PUSH
40233: LD_INT 1
40235: NEG
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 2
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: PUSH
40275: LD_INT 2
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 2
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
40306: LD_ADDR_VAR 0 50
40310: PUSH
40311: LD_INT 0
40313: PUSH
40314: LD_INT 0
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 0
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: LD_INT 0
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 0
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 1
40375: NEG
40376: PUSH
40377: LD_INT 1
40379: NEG
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 1
40407: PUSH
40408: LD_INT 2
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 2
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
40450: LD_ADDR_VAR 0 51
40454: PUSH
40455: LD_INT 0
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 1
40478: PUSH
40479: LD_INT 0
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: LD_INT 1
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: LD_INT 0
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 1
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: NEG
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: LIST
40595: LIST
40596: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40597: LD_ADDR_VAR 0 52
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: LD_INT 0
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 1
40617: NEG
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: LD_INT 1
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: PUSH
40636: LD_INT 1
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 0
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 1
40655: NEG
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 1
40690: NEG
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 0
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40748: LD_ADDR_VAR 0 53
40752: PUSH
40753: LD_INT 0
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 0
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 1
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 0
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 0
40810: PUSH
40811: EMPTY
40812: LIST
40813: LIST
40814: PUSH
40815: LD_INT 1
40817: NEG
40818: PUSH
40819: LD_INT 1
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 1
40829: NEG
40830: PUSH
40831: LD_INT 2
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 2
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: NEG
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 2
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 2
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: LD_INT 2
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: LD_INT 2
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: LD_INT 0
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 2
40935: NEG
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 2
40951: NEG
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40978: LD_ADDR_VAR 0 54
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 1
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: LD_INT 1
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: NEG
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 1
41047: NEG
41048: PUSH
41049: LD_INT 1
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 1
41059: NEG
41060: PUSH
41061: LD_INT 2
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: LD_INT 2
41074: NEG
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: LD_INT 1
41082: PUSH
41083: LD_INT 1
41085: NEG
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 2
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 2
41103: PUSH
41104: LD_INT 1
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 2
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 0
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 2
41165: NEG
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 2
41177: NEG
41178: PUSH
41179: LD_INT 2
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: LIST
41191: LIST
41192: LIST
41193: LIST
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41208: LD_ADDR_VAR 0 55
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 0
41225: PUSH
41226: LD_INT 1
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: LD_INT 0
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: LD_INT 1
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PUSH
41254: LD_INT 0
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PUSH
41264: LD_INT 1
41266: NEG
41267: PUSH
41268: LD_INT 0
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: NEG
41290: PUSH
41291: LD_INT 2
41293: NEG
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: LD_INT 1
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 2
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 2
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: LD_INT 2
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: LD_INT 1
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 2
41384: NEG
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: EMPTY
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 2
41395: NEG
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 2
41407: NEG
41408: PUSH
41409: LD_INT 2
41411: NEG
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41438: LD_ADDR_VAR 0 56
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: LD_INT 0
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 0
41455: PUSH
41456: LD_INT 1
41458: NEG
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: LD_INT 0
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: LD_INT 1
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 0
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 1
41519: NEG
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 0
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: LD_INT 2
41553: PUSH
41554: LD_INT 0
41556: PUSH
41557: EMPTY
41558: LIST
41559: LIST
41560: PUSH
41561: LD_INT 2
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 2
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 2
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41668: LD_ADDR_VAR 0 57
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 1
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: LD_INT 0
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: LD_INT 1
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: PUSH
41724: LD_INT 1
41726: NEG
41727: PUSH
41728: LD_INT 0
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: NEG
41750: PUSH
41751: LD_INT 2
41753: NEG
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: PUSH
41759: LD_INT 0
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 2
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 2
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 2
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 2
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 2
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41898: LD_ADDR_VAR 0 58
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: LD_INT 0
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 0
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 1
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: NEG
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: NEG
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 1
41979: NEG
41980: PUSH
41981: LD_INT 2
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: LD_INT 1
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 2
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 2
42023: PUSH
42024: LD_INT 1
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: PUSH
42034: LD_INT 2
42036: PUSH
42037: EMPTY
42038: LIST
42039: LIST
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: LD_INT 2
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: LD_INT 2
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: LD_INT 1
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: LD_INT 2
42074: NEG
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 2
42085: NEG
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 2
42097: NEG
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42128: LD_ADDR_VAR 0 59
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: LD_INT 1
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 0
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 1
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42216: LD_ADDR_VAR 0 60
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 0
42233: PUSH
42234: LD_INT 1
42236: NEG
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PUSH
42283: LD_INT 1
42285: NEG
42286: PUSH
42287: LD_INT 1
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42304: LD_ADDR_VAR 0 61
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42392: LD_ADDR_VAR 0 62
42396: PUSH
42397: LD_INT 0
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: LD_INT 1
42412: NEG
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 0
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: LD_INT 1
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 0
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 1
42461: NEG
42462: PUSH
42463: LD_INT 1
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42480: LD_ADDR_VAR 0 63
42484: PUSH
42485: LD_INT 0
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 1
42508: PUSH
42509: LD_INT 0
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: LD_INT 1
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 1
42553: NEG
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
42568: LD_ADDR_VAR 0 64
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 0
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 1
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 0
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: LD_INT 1
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// end ; 1 :
42656: GO 48553
42658: LD_INT 1
42660: DOUBLE
42661: EQUAL
42662: IFTRUE 42666
42664: GO 45289
42666: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42667: LD_ADDR_VAR 0 11
42671: PUSH
42672: LD_INT 1
42674: NEG
42675: PUSH
42676: LD_INT 3
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 0
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: LIST
42710: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42711: LD_ADDR_VAR 0 12
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 1
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 3
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: LIST
42751: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42752: LD_ADDR_VAR 0 13
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42792: LD_ADDR_VAR 0 14
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 3
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: NEG
42820: PUSH
42821: LD_INT 2
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42833: LD_ADDR_VAR 0 15
42837: PUSH
42838: LD_INT 2
42840: NEG
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: NEG
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 3
42862: NEG
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42877: LD_ADDR_VAR 0 16
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: LD_INT 3
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 3
42896: NEG
42897: PUSH
42898: LD_INT 2
42900: NEG
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 3
42908: NEG
42909: PUSH
42910: LD_INT 3
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: LIST
42922: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42923: LD_ADDR_VAR 0 17
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 3
42934: NEG
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: LD_INT 3
42945: NEG
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: PUSH
42954: LD_INT 2
42956: NEG
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42967: LD_ADDR_VAR 0 18
42971: PUSH
42972: LD_INT 2
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 3
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 3
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: LIST
43007: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43008: LD_ADDR_VAR 0 19
43012: PUSH
43013: LD_INT 3
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: EMPTY
43020: LIST
43021: LIST
43022: PUSH
43023: LD_INT 3
43025: PUSH
43026: LD_INT 3
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 3
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: LIST
43047: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43048: LD_ADDR_VAR 0 20
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 3
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: LD_INT 2
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: LIST
43088: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43089: LD_ADDR_VAR 0 21
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: NEG
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: NEG
43119: PUSH
43120: LD_INT 1
43122: NEG
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43133: LD_ADDR_VAR 0 22
43137: PUSH
43138: LD_INT 2
43140: NEG
43141: PUSH
43142: LD_INT 3
43144: NEG
43145: PUSH
43146: EMPTY
43147: LIST
43148: LIST
43149: PUSH
43150: LD_INT 3
43152: NEG
43153: PUSH
43154: LD_INT 2
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: LD_INT 3
43168: NEG
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
43179: LD_ADDR_VAR 0 23
43183: PUSH
43184: LD_INT 0
43186: PUSH
43187: LD_INT 3
43189: NEG
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 4
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 3
43212: NEG
43213: PUSH
43214: EMPTY
43215: LIST
43216: LIST
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: LIST
43222: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
43223: LD_ADDR_VAR 0 24
43227: PUSH
43228: LD_INT 3
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 3
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 4
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: EMPTY
43256: LIST
43257: LIST
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: LIST
43263: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
43264: LD_ADDR_VAR 0 25
43268: PUSH
43269: LD_INT 3
43271: PUSH
43272: LD_INT 3
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 4
43281: PUSH
43282: LD_INT 3
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 3
43291: PUSH
43292: LD_INT 4
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
43304: LD_ADDR_VAR 0 26
43308: PUSH
43309: LD_INT 0
43311: PUSH
43312: LD_INT 3
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 4
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 1
43331: NEG
43332: PUSH
43333: LD_INT 3
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
43345: LD_ADDR_VAR 0 27
43349: PUSH
43350: LD_INT 3
43352: NEG
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 4
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
43389: LD_ADDR_VAR 0 28
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: LD_INT 3
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: LD_INT 4
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 4
43420: NEG
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: LIST
43434: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
43435: LD_ADDR_VAR 0 29
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 3
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: LD_INT 4
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: LD_INT 4
43491: NEG
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 5
43514: NEG
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: LD_INT 5
43525: NEG
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 4
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 6
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 6
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 5
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
43590: LD_ADDR_VAR 0 30
43594: PUSH
43595: LD_INT 2
43597: PUSH
43598: LD_INT 1
43600: NEG
43601: PUSH
43602: EMPTY
43603: LIST
43604: LIST
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: LD_INT 0
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 3
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: LD_INT 1
43631: NEG
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 4
43639: PUSH
43640: LD_INT 0
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 4
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 4
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 5
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 5
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 5
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 6
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 6
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
43733: LD_ADDR_VAR 0 31
43737: PUSH
43738: LD_INT 3
43740: PUSH
43741: LD_INT 2
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 3
43750: PUSH
43751: LD_INT 3
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 2
43760: PUSH
43761: LD_INT 3
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 4
43770: PUSH
43771: LD_INT 3
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 4
43780: PUSH
43781: LD_INT 4
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 3
43790: PUSH
43791: LD_INT 4
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 5
43800: PUSH
43801: LD_INT 4
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 5
43810: PUSH
43811: LD_INT 5
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PUSH
43818: LD_INT 4
43820: PUSH
43821: LD_INT 5
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 6
43830: PUSH
43831: LD_INT 5
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 6
43840: PUSH
43841: LD_INT 6
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 5
43850: PUSH
43851: LD_INT 6
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
43872: LD_ADDR_VAR 0 32
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: LD_INT 3
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 0
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 1
43899: NEG
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 4
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 4
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 3
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: PUSH
43942: LD_INT 5
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 5
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: LD_INT 4
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 6
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 6
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 5
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: LIST
44013: LIST
44014: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
44015: LD_ADDR_VAR 0 33
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: LD_INT 1
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 3
44033: NEG
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 3
44044: NEG
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 3
44056: NEG
44057: PUSH
44058: LD_INT 1
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 4
44067: NEG
44068: PUSH
44069: LD_INT 0
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 4
44078: NEG
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 4
44090: NEG
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: LD_INT 5
44101: NEG
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 5
44112: NEG
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 5
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 6
44135: NEG
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 6
44146: NEG
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
44170: LD_ADDR_VAR 0 34
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: LD_INT 3
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 3
44189: NEG
44190: PUSH
44191: LD_INT 2
44193: NEG
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: LD_INT 3
44205: NEG
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: PUSH
44211: LD_INT 3
44213: NEG
44214: PUSH
44215: LD_INT 4
44217: NEG
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 4
44225: NEG
44226: PUSH
44227: LD_INT 3
44229: NEG
44230: PUSH
44231: EMPTY
44232: LIST
44233: LIST
44234: PUSH
44235: LD_INT 4
44237: NEG
44238: PUSH
44239: LD_INT 4
44241: NEG
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 4
44249: NEG
44250: PUSH
44251: LD_INT 5
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 5
44261: NEG
44262: PUSH
44263: LD_INT 4
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 5
44273: NEG
44274: PUSH
44275: LD_INT 5
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 5
44285: NEG
44286: PUSH
44287: LD_INT 6
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 6
44297: NEG
44298: PUSH
44299: LD_INT 5
44301: NEG
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 6
44309: NEG
44310: PUSH
44311: LD_INT 6
44313: NEG
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
44333: LD_ADDR_VAR 0 41
44337: PUSH
44338: LD_INT 0
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 3
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: LIST
44376: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
44377: LD_ADDR_VAR 0 42
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 0
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: PUSH
44395: LD_INT 1
44397: NEG
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: PUSH
44406: LD_INT 1
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
44418: LD_ADDR_VAR 0 43
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 3
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: LIST
44457: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
44458: LD_ADDR_VAR 0 44
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 2
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: PUSH
44476: LD_INT 3
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: PUSH
44483: LD_INT 1
44485: NEG
44486: PUSH
44487: LD_INT 2
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: LIST
44498: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44499: LD_ADDR_VAR 0 45
44503: PUSH
44504: LD_INT 2
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 2
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 3
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
44543: LD_ADDR_VAR 0 46
44547: PUSH
44548: LD_INT 2
44550: NEG
44551: PUSH
44552: LD_INT 2
44554: NEG
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: LD_INT 3
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: NEG
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
44589: LD_ADDR_VAR 0 47
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 3
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 3
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44622: LD_ADDR_VAR 0 48
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 2
44632: NEG
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 2
44640: PUSH
44641: LD_INT 1
44643: NEG
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
44653: LD_ADDR_VAR 0 49
44657: PUSH
44658: LD_INT 3
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 3
44670: PUSH
44671: LD_INT 2
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
44682: LD_ADDR_VAR 0 50
44686: PUSH
44687: LD_INT 2
44689: PUSH
44690: LD_INT 3
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 3
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44711: LD_ADDR_VAR 0 51
44715: PUSH
44716: LD_INT 1
44718: NEG
44719: PUSH
44720: LD_INT 2
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44742: LD_ADDR_VAR 0 52
44746: PUSH
44747: LD_INT 3
44749: NEG
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44775: LD_ADDR_VAR 0 53
44779: PUSH
44780: LD_INT 1
44782: NEG
44783: PUSH
44784: LD_INT 3
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 3
44797: NEG
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: PUSH
44803: LD_INT 1
44805: PUSH
44806: LD_INT 2
44808: NEG
44809: PUSH
44810: EMPTY
44811: LIST
44812: LIST
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: LIST
44818: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44819: LD_ADDR_VAR 0 54
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 3
44837: PUSH
44838: LD_INT 0
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: PUSH
44845: LD_INT 3
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: LIST
44859: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44860: LD_ADDR_VAR 0 55
44864: PUSH
44865: LD_INT 3
44867: PUSH
44868: LD_INT 2
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 3
44877: PUSH
44878: LD_INT 3
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 3
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44900: LD_ADDR_VAR 0 56
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 3
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 3
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: LIST
44940: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44941: LD_ADDR_VAR 0 57
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 3
44959: NEG
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 3
44970: NEG
44971: PUSH
44972: LD_INT 1
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44985: LD_ADDR_VAR 0 58
44989: PUSH
44990: LD_INT 2
44992: NEG
44993: PUSH
44994: LD_INT 3
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: LD_INT 2
45008: NEG
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 3
45016: NEG
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: LIST
45030: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
45031: LD_ADDR_VAR 0 59
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: NEG
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: LD_INT 1
45064: NEG
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: EMPTY
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45075: LD_ADDR_VAR 0 60
45079: PUSH
45080: LD_INT 1
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 2
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 2
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: LIST
45115: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45116: LD_ADDR_VAR 0 61
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 2
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45156: LD_ADDR_VAR 0 62
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: LD_INT 2
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 1
45183: NEG
45184: PUSH
45185: LD_INT 1
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45197: LD_ADDR_VAR 0 63
45201: PUSH
45202: LD_INT 1
45204: NEG
45205: PUSH
45206: LD_INT 1
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: LD_INT 1
45230: NEG
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45241: LD_ADDR_VAR 0 64
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: LIST
45286: ST_TO_ADDR
// end ; 2 :
45287: GO 48553
45289: LD_INT 2
45291: DOUBLE
45292: EQUAL
45293: IFTRUE 45297
45295: GO 48552
45297: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
45298: LD_ADDR_VAR 0 29
45302: PUSH
45303: LD_INT 4
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 4
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 5
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 5
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 4
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 3
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 5
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PUSH
45396: LD_INT 3
45398: PUSH
45399: LD_INT 3
45401: PUSH
45402: EMPTY
45403: LIST
45404: LIST
45405: PUSH
45406: LD_INT 3
45408: PUSH
45409: LD_INT 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 4
45418: PUSH
45419: LD_INT 3
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 4
45428: PUSH
45429: LD_INT 4
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: LD_INT 4
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 3
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 4
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 2
45478: PUSH
45479: LD_INT 4
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 4
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 3
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 1
45518: PUSH
45519: LD_INT 5
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 0
45528: PUSH
45529: LD_INT 5
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: LD_INT 4
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 3
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 5
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 3
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 3
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 3
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 0
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: LD_INT 1
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 3
45626: NEG
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 4
45637: NEG
45638: PUSH
45639: LD_INT 0
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 4
45648: NEG
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: EMPTY
45655: LIST
45656: LIST
45657: PUSH
45658: LD_INT 4
45660: NEG
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 2
45672: NEG
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 4
45683: NEG
45684: PUSH
45685: LD_INT 4
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 4
45695: NEG
45696: PUSH
45697: LD_INT 5
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 3
45707: NEG
45708: PUSH
45709: LD_INT 4
45711: NEG
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: NEG
45720: PUSH
45721: LD_INT 3
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 4
45731: NEG
45732: PUSH
45733: LD_INT 3
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 5
45743: NEG
45744: PUSH
45745: LD_INT 4
45747: NEG
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 5
45755: NEG
45756: PUSH
45757: LD_INT 5
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 3
45767: NEG
45768: PUSH
45769: LD_INT 5
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 5
45779: NEG
45780: PUSH
45781: LD_INT 3
45783: NEG
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
45836: LD_ADDR_VAR 0 30
45840: PUSH
45841: LD_INT 4
45843: PUSH
45844: LD_INT 4
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 4
45853: PUSH
45854: LD_INT 3
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 5
45863: PUSH
45864: LD_INT 4
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 5
45873: PUSH
45874: LD_INT 5
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 4
45883: PUSH
45884: LD_INT 5
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 3
45893: PUSH
45894: LD_INT 4
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 3
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: LD_INT 3
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 3
45923: PUSH
45924: LD_INT 5
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 3
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 2
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: LD_INT 3
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: LD_INT 4
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: PUSH
45971: LD_INT 0
45973: PUSH
45974: LD_INT 4
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: NEG
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 2
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 4
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: NEG
46016: PUSH
46017: LD_INT 2
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 4
46026: NEG
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 4
46037: NEG
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 3
46049: NEG
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 3
46060: NEG
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 4
46071: NEG
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 5
46082: NEG
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 5
46093: NEG
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 5
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 3
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 3
46128: NEG
46129: PUSH
46130: LD_INT 3
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 3
46140: NEG
46141: PUSH
46142: LD_INT 4
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 4
46188: NEG
46189: PUSH
46190: LD_INT 3
46192: NEG
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 4
46200: NEG
46201: PUSH
46202: LD_INT 4
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 4
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 4
46224: NEG
46225: PUSH
46226: LD_INT 2
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: LD_INT 4
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 5
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 4
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: LD_INT 3
46283: NEG
46284: PUSH
46285: EMPTY
46286: LIST
46287: LIST
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: LD_INT 4
46295: NEG
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: LD_INT 5
46307: NEG
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: PUSH
46316: LD_INT 3
46318: NEG
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 5
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
46383: LD_ADDR_VAR 0 31
46387: PUSH
46388: LD_INT 0
46390: PUSH
46391: LD_INT 4
46393: PUSH
46394: EMPTY
46395: LIST
46396: LIST
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: PUSH
46408: LD_INT 1
46410: PUSH
46411: LD_INT 4
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 1
46420: PUSH
46421: LD_INT 5
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: LD_INT 5
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: LD_INT 4
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: EMPTY
46457: LIST
46458: LIST
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: LD_INT 5
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: NEG
46473: PUSH
46474: LD_INT 3
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 3
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 3
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 4
46539: NEG
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 4
46550: NEG
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 4
46562: NEG
46563: PUSH
46564: LD_INT 2
46566: NEG
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 2
46574: NEG
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 4
46585: NEG
46586: PUSH
46587: LD_INT 4
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 4
46597: NEG
46598: PUSH
46599: LD_INT 5
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 3
46609: NEG
46610: PUSH
46611: LD_INT 4
46613: NEG
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 3
46621: NEG
46622: PUSH
46623: LD_INT 3
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 4
46633: NEG
46634: PUSH
46635: LD_INT 3
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 5
46645: NEG
46646: PUSH
46647: LD_INT 4
46649: NEG
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 5
46657: NEG
46658: PUSH
46659: LD_INT 5
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 3
46669: NEG
46670: PUSH
46671: LD_INT 5
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 5
46681: NEG
46682: PUSH
46683: LD_INT 3
46685: NEG
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 0
46693: PUSH
46694: LD_INT 3
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 0
46704: PUSH
46705: LD_INT 4
46707: NEG
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: PUSH
46716: LD_INT 3
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 2
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: LD_INT 2
46740: NEG
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 3
46752: NEG
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: LD_INT 4
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 2
46783: NEG
46784: PUSH
46785: LD_INT 4
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 4
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 4
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: PUSH
46814: LD_INT 5
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 5
46826: PUSH
46827: LD_INT 1
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 4
46836: PUSH
46837: LD_INT 1
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: LD_INT 2
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 5
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: LIST
46891: LIST
46892: LIST
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: LIST
46907: LIST
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
46933: LD_ADDR_VAR 0 32
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 4
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 3
46963: NEG
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 3
46974: NEG
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 4
46985: NEG
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 5
46996: NEG
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 5
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 5
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 3
47031: NEG
47032: PUSH
47033: LD_INT 2
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: NEG
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: LD_INT 4
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 2
47066: NEG
47067: PUSH
47068: LD_INT 3
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 3
47090: NEG
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 4
47102: NEG
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 4
47114: NEG
47115: PUSH
47116: LD_INT 4
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 2
47126: NEG
47127: PUSH
47128: LD_INT 4
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: NEG
47139: PUSH
47140: LD_INT 2
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 4
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 5
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 4
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: LD_INT 3
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 0
47194: PUSH
47195: LD_INT 3
47197: NEG
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: NEG
47206: PUSH
47207: LD_INT 4
47209: NEG
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 5
47221: NEG
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 5
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 3
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 3
47262: PUSH
47263: LD_INT 1
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 4
47273: PUSH
47274: LD_INT 0
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 4
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: EMPTY
47288: LIST
47289: LIST
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 1
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 2
47303: PUSH
47304: LD_INT 0
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 2
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 4
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 4
47345: PUSH
47346: LD_INT 4
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 4
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 5
47365: PUSH
47366: LD_INT 4
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: PUSH
47373: LD_INT 5
47375: PUSH
47376: LD_INT 5
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 4
47385: PUSH
47386: LD_INT 5
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 3
47395: PUSH
47396: LD_INT 4
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: LD_INT 3
47405: PUSH
47406: LD_INT 3
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 5
47415: PUSH
47416: LD_INT 3
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 3
47425: PUSH
47426: LD_INT 5
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
47480: LD_ADDR_VAR 0 33
47484: PUSH
47485: LD_INT 4
47487: NEG
47488: PUSH
47489: LD_INT 4
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 4
47499: NEG
47500: PUSH
47501: LD_INT 5
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 3
47511: NEG
47512: PUSH
47513: LD_INT 4
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 3
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 4
47535: NEG
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 5
47547: NEG
47548: PUSH
47549: LD_INT 4
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 5
47559: NEG
47560: PUSH
47561: LD_INT 5
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: LD_INT 5
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 5
47583: NEG
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 0
47595: PUSH
47596: LD_INT 3
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: LD_INT 4
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 1
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 0
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 3
47654: NEG
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: LD_INT 1
47662: NEG
47663: PUSH
47664: LD_INT 4
47666: NEG
47667: PUSH
47668: EMPTY
47669: LIST
47670: LIST
47671: PUSH
47672: LD_INT 2
47674: PUSH
47675: LD_INT 2
47677: NEG
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: LD_INT 4
47689: NEG
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: PUSH
47695: LD_INT 4
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 4
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 5
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 5
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 4
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 3
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 3
47769: PUSH
47770: LD_INT 2
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 5
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 3
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 4
47810: PUSH
47811: LD_INT 3
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 4
47820: PUSH
47821: LD_INT 4
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: LD_INT 4
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 3
47843: PUSH
47844: EMPTY
47845: LIST
47846: LIST
47847: PUSH
47848: LD_INT 2
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 4
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 4
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: LD_INT 4
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 3
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 4
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 5
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 5
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 4
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 3
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 2
47952: PUSH
47953: LD_INT 5
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 3
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
48018: LD_ADDR_VAR 0 34
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 4
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 5
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 4
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: LD_INT 3
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 4
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 5
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 2
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 5
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 4
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 4
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: LD_INT 1
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: LD_INT 4
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: LD_INT 3
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 5
48250: PUSH
48251: LD_INT 5
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 4
48260: PUSH
48261: LD_INT 5
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 3
48270: PUSH
48271: LD_INT 4
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 3
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 5
48290: PUSH
48291: LD_INT 3
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 3
48300: PUSH
48301: LD_INT 5
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 0
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: LD_INT 3
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 4
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 4
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 3
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: NEG
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 4
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: NEG
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: LD_INT 4
48414: NEG
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 3
48426: NEG
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 3
48437: NEG
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 4
48448: NEG
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 5
48459: NEG
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 5
48470: NEG
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 5
48482: NEG
48483: PUSH
48484: LD_INT 2
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 3
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: ST_TO_ADDR
// end ; end ;
48550: GO 48553
48552: POP
// case btype of b_depot , b_warehouse :
48553: LD_VAR 0 1
48557: PUSH
48558: LD_INT 0
48560: DOUBLE
48561: EQUAL
48562: IFTRUE 48572
48564: LD_INT 1
48566: DOUBLE
48567: EQUAL
48568: IFTRUE 48572
48570: GO 48773
48572: POP
// case nation of nation_american :
48573: LD_VAR 0 5
48577: PUSH
48578: LD_INT 1
48580: DOUBLE
48581: EQUAL
48582: IFTRUE 48586
48584: GO 48642
48586: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
48587: LD_ADDR_VAR 0 9
48591: PUSH
48592: LD_VAR 0 11
48596: PUSH
48597: LD_VAR 0 12
48601: PUSH
48602: LD_VAR 0 13
48606: PUSH
48607: LD_VAR 0 14
48611: PUSH
48612: LD_VAR 0 15
48616: PUSH
48617: LD_VAR 0 16
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: PUSH
48630: LD_VAR 0 4
48634: PUSH
48635: LD_INT 1
48637: PLUS
48638: ARRAY
48639: ST_TO_ADDR
48640: GO 48771
48642: LD_INT 2
48644: DOUBLE
48645: EQUAL
48646: IFTRUE 48650
48648: GO 48706
48650: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
48651: LD_ADDR_VAR 0 9
48655: PUSH
48656: LD_VAR 0 17
48660: PUSH
48661: LD_VAR 0 18
48665: PUSH
48666: LD_VAR 0 19
48670: PUSH
48671: LD_VAR 0 20
48675: PUSH
48676: LD_VAR 0 21
48680: PUSH
48681: LD_VAR 0 22
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: PUSH
48694: LD_VAR 0 4
48698: PUSH
48699: LD_INT 1
48701: PLUS
48702: ARRAY
48703: ST_TO_ADDR
48704: GO 48771
48706: LD_INT 3
48708: DOUBLE
48709: EQUAL
48710: IFTRUE 48714
48712: GO 48770
48714: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
48715: LD_ADDR_VAR 0 9
48719: PUSH
48720: LD_VAR 0 23
48724: PUSH
48725: LD_VAR 0 24
48729: PUSH
48730: LD_VAR 0 25
48734: PUSH
48735: LD_VAR 0 26
48739: PUSH
48740: LD_VAR 0 27
48744: PUSH
48745: LD_VAR 0 28
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: PUSH
48758: LD_VAR 0 4
48762: PUSH
48763: LD_INT 1
48765: PLUS
48766: ARRAY
48767: ST_TO_ADDR
48768: GO 48771
48770: POP
48771: GO 49326
48773: LD_INT 2
48775: DOUBLE
48776: EQUAL
48777: IFTRUE 48787
48779: LD_INT 3
48781: DOUBLE
48782: EQUAL
48783: IFTRUE 48787
48785: GO 48843
48787: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
48788: LD_ADDR_VAR 0 9
48792: PUSH
48793: LD_VAR 0 29
48797: PUSH
48798: LD_VAR 0 30
48802: PUSH
48803: LD_VAR 0 31
48807: PUSH
48808: LD_VAR 0 32
48812: PUSH
48813: LD_VAR 0 33
48817: PUSH
48818: LD_VAR 0 34
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: PUSH
48831: LD_VAR 0 4
48835: PUSH
48836: LD_INT 1
48838: PLUS
48839: ARRAY
48840: ST_TO_ADDR
48841: GO 49326
48843: LD_INT 16
48845: DOUBLE
48846: EQUAL
48847: IFTRUE 48905
48849: LD_INT 17
48851: DOUBLE
48852: EQUAL
48853: IFTRUE 48905
48855: LD_INT 18
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48905
48861: LD_INT 19
48863: DOUBLE
48864: EQUAL
48865: IFTRUE 48905
48867: LD_INT 22
48869: DOUBLE
48870: EQUAL
48871: IFTRUE 48905
48873: LD_INT 20
48875: DOUBLE
48876: EQUAL
48877: IFTRUE 48905
48879: LD_INT 21
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48905
48885: LD_INT 23
48887: DOUBLE
48888: EQUAL
48889: IFTRUE 48905
48891: LD_INT 24
48893: DOUBLE
48894: EQUAL
48895: IFTRUE 48905
48897: LD_INT 25
48899: DOUBLE
48900: EQUAL
48901: IFTRUE 48905
48903: GO 48961
48905: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
48906: LD_ADDR_VAR 0 9
48910: PUSH
48911: LD_VAR 0 35
48915: PUSH
48916: LD_VAR 0 36
48920: PUSH
48921: LD_VAR 0 37
48925: PUSH
48926: LD_VAR 0 38
48930: PUSH
48931: LD_VAR 0 39
48935: PUSH
48936: LD_VAR 0 40
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: PUSH
48949: LD_VAR 0 4
48953: PUSH
48954: LD_INT 1
48956: PLUS
48957: ARRAY
48958: ST_TO_ADDR
48959: GO 49326
48961: LD_INT 6
48963: DOUBLE
48964: EQUAL
48965: IFTRUE 49017
48967: LD_INT 7
48969: DOUBLE
48970: EQUAL
48971: IFTRUE 49017
48973: LD_INT 8
48975: DOUBLE
48976: EQUAL
48977: IFTRUE 49017
48979: LD_INT 13
48981: DOUBLE
48982: EQUAL
48983: IFTRUE 49017
48985: LD_INT 12
48987: DOUBLE
48988: EQUAL
48989: IFTRUE 49017
48991: LD_INT 15
48993: DOUBLE
48994: EQUAL
48995: IFTRUE 49017
48997: LD_INT 11
48999: DOUBLE
49000: EQUAL
49001: IFTRUE 49017
49003: LD_INT 14
49005: DOUBLE
49006: EQUAL
49007: IFTRUE 49017
49009: LD_INT 10
49011: DOUBLE
49012: EQUAL
49013: IFTRUE 49017
49015: GO 49073
49017: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
49018: LD_ADDR_VAR 0 9
49022: PUSH
49023: LD_VAR 0 41
49027: PUSH
49028: LD_VAR 0 42
49032: PUSH
49033: LD_VAR 0 43
49037: PUSH
49038: LD_VAR 0 44
49042: PUSH
49043: LD_VAR 0 45
49047: PUSH
49048: LD_VAR 0 46
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: PUSH
49061: LD_VAR 0 4
49065: PUSH
49066: LD_INT 1
49068: PLUS
49069: ARRAY
49070: ST_TO_ADDR
49071: GO 49326
49073: LD_INT 36
49075: DOUBLE
49076: EQUAL
49077: IFTRUE 49081
49079: GO 49137
49081: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
49082: LD_ADDR_VAR 0 9
49086: PUSH
49087: LD_VAR 0 47
49091: PUSH
49092: LD_VAR 0 48
49096: PUSH
49097: LD_VAR 0 49
49101: PUSH
49102: LD_VAR 0 50
49106: PUSH
49107: LD_VAR 0 51
49111: PUSH
49112: LD_VAR 0 52
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: PUSH
49125: LD_VAR 0 4
49129: PUSH
49130: LD_INT 1
49132: PLUS
49133: ARRAY
49134: ST_TO_ADDR
49135: GO 49326
49137: LD_INT 4
49139: DOUBLE
49140: EQUAL
49141: IFTRUE 49163
49143: LD_INT 5
49145: DOUBLE
49146: EQUAL
49147: IFTRUE 49163
49149: LD_INT 34
49151: DOUBLE
49152: EQUAL
49153: IFTRUE 49163
49155: LD_INT 37
49157: DOUBLE
49158: EQUAL
49159: IFTRUE 49163
49161: GO 49219
49163: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
49164: LD_ADDR_VAR 0 9
49168: PUSH
49169: LD_VAR 0 53
49173: PUSH
49174: LD_VAR 0 54
49178: PUSH
49179: LD_VAR 0 55
49183: PUSH
49184: LD_VAR 0 56
49188: PUSH
49189: LD_VAR 0 57
49193: PUSH
49194: LD_VAR 0 58
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: PUSH
49207: LD_VAR 0 4
49211: PUSH
49212: LD_INT 1
49214: PLUS
49215: ARRAY
49216: ST_TO_ADDR
49217: GO 49326
49219: LD_INT 31
49221: DOUBLE
49222: EQUAL
49223: IFTRUE 49269
49225: LD_INT 32
49227: DOUBLE
49228: EQUAL
49229: IFTRUE 49269
49231: LD_INT 33
49233: DOUBLE
49234: EQUAL
49235: IFTRUE 49269
49237: LD_INT 27
49239: DOUBLE
49240: EQUAL
49241: IFTRUE 49269
49243: LD_INT 26
49245: DOUBLE
49246: EQUAL
49247: IFTRUE 49269
49249: LD_INT 28
49251: DOUBLE
49252: EQUAL
49253: IFTRUE 49269
49255: LD_INT 29
49257: DOUBLE
49258: EQUAL
49259: IFTRUE 49269
49261: LD_INT 30
49263: DOUBLE
49264: EQUAL
49265: IFTRUE 49269
49267: GO 49325
49269: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
49270: LD_ADDR_VAR 0 9
49274: PUSH
49275: LD_VAR 0 59
49279: PUSH
49280: LD_VAR 0 60
49284: PUSH
49285: LD_VAR 0 61
49289: PUSH
49290: LD_VAR 0 62
49294: PUSH
49295: LD_VAR 0 63
49299: PUSH
49300: LD_VAR 0 64
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: PUSH
49313: LD_VAR 0 4
49317: PUSH
49318: LD_INT 1
49320: PLUS
49321: ARRAY
49322: ST_TO_ADDR
49323: GO 49326
49325: POP
// temp_list2 = [ ] ;
49326: LD_ADDR_VAR 0 10
49330: PUSH
49331: EMPTY
49332: ST_TO_ADDR
// for i in temp_list do
49333: LD_ADDR_VAR 0 8
49337: PUSH
49338: LD_VAR 0 9
49342: PUSH
49343: FOR_IN
49344: IFFALSE 49396
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
49346: LD_ADDR_VAR 0 10
49350: PUSH
49351: LD_VAR 0 10
49355: PUSH
49356: LD_VAR 0 8
49360: PUSH
49361: LD_INT 1
49363: ARRAY
49364: PUSH
49365: LD_VAR 0 2
49369: PLUS
49370: PUSH
49371: LD_VAR 0 8
49375: PUSH
49376: LD_INT 2
49378: ARRAY
49379: PUSH
49380: LD_VAR 0 3
49384: PLUS
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: ADD
49393: ST_TO_ADDR
49394: GO 49343
49396: POP
49397: POP
// result = temp_list2 ;
49398: LD_ADDR_VAR 0 7
49402: PUSH
49403: LD_VAR 0 10
49407: ST_TO_ADDR
// end ;
49408: LD_VAR 0 7
49412: RET
// export function EnemyInRange ( unit , dist ) ; begin
49413: LD_INT 0
49415: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
49416: LD_ADDR_VAR 0 3
49420: PUSH
49421: LD_VAR 0 1
49425: PPUSH
49426: CALL_OW 255
49430: PPUSH
49431: LD_VAR 0 1
49435: PPUSH
49436: CALL_OW 250
49440: PPUSH
49441: LD_VAR 0 1
49445: PPUSH
49446: CALL_OW 251
49450: PPUSH
49451: LD_VAR 0 2
49455: PPUSH
49456: CALL 22809 0 4
49460: PUSH
49461: LD_INT 4
49463: ARRAY
49464: ST_TO_ADDR
// end ;
49465: LD_VAR 0 3
49469: RET
// export function PlayerSeeMe ( unit ) ; begin
49470: LD_INT 0
49472: PPUSH
// result := See ( your_side , unit ) ;
49473: LD_ADDR_VAR 0 2
49477: PUSH
49478: LD_OWVAR 2
49482: PPUSH
49483: LD_VAR 0 1
49487: PPUSH
49488: CALL_OW 292
49492: ST_TO_ADDR
// end ;
49493: LD_VAR 0 2
49497: RET
// export function ReverseDir ( unit ) ; begin
49498: LD_INT 0
49500: PPUSH
// if not unit then
49501: LD_VAR 0 1
49505: NOT
49506: IFFALSE 49510
// exit ;
49508: GO 49533
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
49510: LD_ADDR_VAR 0 2
49514: PUSH
49515: LD_VAR 0 1
49519: PPUSH
49520: CALL_OW 254
49524: PUSH
49525: LD_INT 3
49527: PLUS
49528: PUSH
49529: LD_INT 6
49531: MOD
49532: ST_TO_ADDR
// end ;
49533: LD_VAR 0 2
49537: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
49538: LD_INT 0
49540: PPUSH
49541: PPUSH
49542: PPUSH
49543: PPUSH
49544: PPUSH
// if not hexes then
49545: LD_VAR 0 2
49549: NOT
49550: IFFALSE 49554
// exit ;
49552: GO 49702
// dist := 9999 ;
49554: LD_ADDR_VAR 0 5
49558: PUSH
49559: LD_INT 9999
49561: ST_TO_ADDR
// for i = 1 to hexes do
49562: LD_ADDR_VAR 0 4
49566: PUSH
49567: DOUBLE
49568: LD_INT 1
49570: DEC
49571: ST_TO_ADDR
49572: LD_VAR 0 2
49576: PUSH
49577: FOR_TO
49578: IFFALSE 49690
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
49580: LD_VAR 0 1
49584: PPUSH
49585: LD_VAR 0 2
49589: PUSH
49590: LD_VAR 0 4
49594: ARRAY
49595: PUSH
49596: LD_INT 1
49598: ARRAY
49599: PPUSH
49600: LD_VAR 0 2
49604: PUSH
49605: LD_VAR 0 4
49609: ARRAY
49610: PUSH
49611: LD_INT 2
49613: ARRAY
49614: PPUSH
49615: CALL_OW 297
49619: PUSH
49620: LD_VAR 0 5
49624: LESS
49625: IFFALSE 49688
// begin hex := hexes [ i ] ;
49627: LD_ADDR_VAR 0 7
49631: PUSH
49632: LD_VAR 0 2
49636: PUSH
49637: LD_VAR 0 4
49641: ARRAY
49642: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
49643: LD_ADDR_VAR 0 5
49647: PUSH
49648: LD_VAR 0 1
49652: PPUSH
49653: LD_VAR 0 2
49657: PUSH
49658: LD_VAR 0 4
49662: ARRAY
49663: PUSH
49664: LD_INT 1
49666: ARRAY
49667: PPUSH
49668: LD_VAR 0 2
49672: PUSH
49673: LD_VAR 0 4
49677: ARRAY
49678: PUSH
49679: LD_INT 2
49681: ARRAY
49682: PPUSH
49683: CALL_OW 297
49687: ST_TO_ADDR
// end ; end ;
49688: GO 49577
49690: POP
49691: POP
// result := hex ;
49692: LD_ADDR_VAR 0 3
49696: PUSH
49697: LD_VAR 0 7
49701: ST_TO_ADDR
// end ;
49702: LD_VAR 0 3
49706: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
49707: LD_INT 0
49709: PPUSH
49710: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
49711: LD_VAR 0 1
49715: NOT
49716: PUSH
49717: LD_VAR 0 1
49721: PUSH
49722: LD_INT 21
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 23
49734: PUSH
49735: LD_INT 2
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PPUSH
49746: CALL_OW 69
49750: IN
49751: NOT
49752: OR
49753: IFFALSE 49757
// exit ;
49755: GO 49804
// for i = 1 to 3 do
49757: LD_ADDR_VAR 0 3
49761: PUSH
49762: DOUBLE
49763: LD_INT 1
49765: DEC
49766: ST_TO_ADDR
49767: LD_INT 3
49769: PUSH
49770: FOR_TO
49771: IFFALSE 49802
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
49773: LD_VAR 0 1
49777: PPUSH
49778: CALL_OW 250
49782: PPUSH
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 251
49792: PPUSH
49793: LD_INT 1
49795: PPUSH
49796: CALL_OW 453
49800: GO 49770
49802: POP
49803: POP
// end ;
49804: LD_VAR 0 2
49808: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
49809: LD_INT 0
49811: PPUSH
49812: PPUSH
49813: PPUSH
49814: PPUSH
49815: PPUSH
49816: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
49817: LD_VAR 0 1
49821: NOT
49822: PUSH
49823: LD_VAR 0 2
49827: NOT
49828: OR
49829: PUSH
49830: LD_VAR 0 1
49834: PPUSH
49835: CALL_OW 314
49839: OR
49840: IFFALSE 49844
// exit ;
49842: GO 50285
// x := GetX ( enemy_unit ) ;
49844: LD_ADDR_VAR 0 7
49848: PUSH
49849: LD_VAR 0 2
49853: PPUSH
49854: CALL_OW 250
49858: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
49859: LD_ADDR_VAR 0 8
49863: PUSH
49864: LD_VAR 0 2
49868: PPUSH
49869: CALL_OW 251
49873: ST_TO_ADDR
// if not x or not y then
49874: LD_VAR 0 7
49878: NOT
49879: PUSH
49880: LD_VAR 0 8
49884: NOT
49885: OR
49886: IFFALSE 49890
// exit ;
49888: GO 50285
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
49890: LD_ADDR_VAR 0 6
49894: PUSH
49895: LD_VAR 0 7
49899: PPUSH
49900: LD_INT 0
49902: PPUSH
49903: LD_INT 4
49905: PPUSH
49906: CALL_OW 272
49910: PUSH
49911: LD_VAR 0 8
49915: PPUSH
49916: LD_INT 0
49918: PPUSH
49919: LD_INT 4
49921: PPUSH
49922: CALL_OW 273
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_VAR 0 7
49935: PPUSH
49936: LD_INT 1
49938: PPUSH
49939: LD_INT 4
49941: PPUSH
49942: CALL_OW 272
49946: PUSH
49947: LD_VAR 0 8
49951: PPUSH
49952: LD_INT 1
49954: PPUSH
49955: LD_INT 4
49957: PPUSH
49958: CALL_OW 273
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_VAR 0 7
49971: PPUSH
49972: LD_INT 2
49974: PPUSH
49975: LD_INT 4
49977: PPUSH
49978: CALL_OW 272
49982: PUSH
49983: LD_VAR 0 8
49987: PPUSH
49988: LD_INT 2
49990: PPUSH
49991: LD_INT 4
49993: PPUSH
49994: CALL_OW 273
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_VAR 0 7
50007: PPUSH
50008: LD_INT 3
50010: PPUSH
50011: LD_INT 4
50013: PPUSH
50014: CALL_OW 272
50018: PUSH
50019: LD_VAR 0 8
50023: PPUSH
50024: LD_INT 3
50026: PPUSH
50027: LD_INT 4
50029: PPUSH
50030: CALL_OW 273
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_VAR 0 7
50043: PPUSH
50044: LD_INT 4
50046: PPUSH
50047: LD_INT 4
50049: PPUSH
50050: CALL_OW 272
50054: PUSH
50055: LD_VAR 0 8
50059: PPUSH
50060: LD_INT 4
50062: PPUSH
50063: LD_INT 4
50065: PPUSH
50066: CALL_OW 273
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_VAR 0 7
50079: PPUSH
50080: LD_INT 5
50082: PPUSH
50083: LD_INT 4
50085: PPUSH
50086: CALL_OW 272
50090: PUSH
50091: LD_VAR 0 8
50095: PPUSH
50096: LD_INT 5
50098: PPUSH
50099: LD_INT 4
50101: PPUSH
50102: CALL_OW 273
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: ST_TO_ADDR
// for i = tmp downto 1 do
50119: LD_ADDR_VAR 0 4
50123: PUSH
50124: DOUBLE
50125: LD_VAR 0 6
50129: INC
50130: ST_TO_ADDR
50131: LD_INT 1
50133: PUSH
50134: FOR_DOWNTO
50135: IFFALSE 50236
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
50137: LD_VAR 0 6
50141: PUSH
50142: LD_VAR 0 4
50146: ARRAY
50147: PUSH
50148: LD_INT 1
50150: ARRAY
50151: PPUSH
50152: LD_VAR 0 6
50156: PUSH
50157: LD_VAR 0 4
50161: ARRAY
50162: PUSH
50163: LD_INT 2
50165: ARRAY
50166: PPUSH
50167: CALL_OW 488
50171: NOT
50172: PUSH
50173: LD_VAR 0 6
50177: PUSH
50178: LD_VAR 0 4
50182: ARRAY
50183: PUSH
50184: LD_INT 1
50186: ARRAY
50187: PPUSH
50188: LD_VAR 0 6
50192: PUSH
50193: LD_VAR 0 4
50197: ARRAY
50198: PUSH
50199: LD_INT 2
50201: ARRAY
50202: PPUSH
50203: CALL_OW 428
50207: PUSH
50208: LD_INT 0
50210: NONEQUAL
50211: OR
50212: IFFALSE 50234
// tmp := Delete ( tmp , i ) ;
50214: LD_ADDR_VAR 0 6
50218: PUSH
50219: LD_VAR 0 6
50223: PPUSH
50224: LD_VAR 0 4
50228: PPUSH
50229: CALL_OW 3
50233: ST_TO_ADDR
50234: GO 50134
50236: POP
50237: POP
// j := GetClosestHex ( unit , tmp ) ;
50238: LD_ADDR_VAR 0 5
50242: PUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: LD_VAR 0 6
50252: PPUSH
50253: CALL 49538 0 2
50257: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
50258: LD_VAR 0 1
50262: PPUSH
50263: LD_VAR 0 5
50267: PUSH
50268: LD_INT 1
50270: ARRAY
50271: PPUSH
50272: LD_VAR 0 5
50276: PUSH
50277: LD_INT 2
50279: ARRAY
50280: PPUSH
50281: CALL_OW 111
// end ;
50285: LD_VAR 0 3
50289: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
50290: LD_INT 0
50292: PPUSH
50293: PPUSH
50294: PPUSH
// uc_side = 0 ;
50295: LD_ADDR_OWVAR 20
50299: PUSH
50300: LD_INT 0
50302: ST_TO_ADDR
// uc_nation = 0 ;
50303: LD_ADDR_OWVAR 21
50307: PUSH
50308: LD_INT 0
50310: ST_TO_ADDR
// InitHc_All ( ) ;
50311: CALL_OW 584
// InitVc ;
50315: CALL_OW 20
// if mastodonts then
50319: LD_VAR 0 6
50323: IFFALSE 50390
// for i = 1 to mastodonts do
50325: LD_ADDR_VAR 0 11
50329: PUSH
50330: DOUBLE
50331: LD_INT 1
50333: DEC
50334: ST_TO_ADDR
50335: LD_VAR 0 6
50339: PUSH
50340: FOR_TO
50341: IFFALSE 50388
// begin vc_chassis := 31 ;
50343: LD_ADDR_OWVAR 37
50347: PUSH
50348: LD_INT 31
50350: ST_TO_ADDR
// vc_control := control_rider ;
50351: LD_ADDR_OWVAR 38
50355: PUSH
50356: LD_INT 4
50358: ST_TO_ADDR
// animal := CreateVehicle ;
50359: LD_ADDR_VAR 0 12
50363: PUSH
50364: CALL_OW 45
50368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50369: LD_VAR 0 12
50373: PPUSH
50374: LD_VAR 0 8
50378: PPUSH
50379: LD_INT 0
50381: PPUSH
50382: CALL 52525 0 3
// end ;
50386: GO 50340
50388: POP
50389: POP
// if horses then
50390: LD_VAR 0 5
50394: IFFALSE 50461
// for i = 1 to horses do
50396: LD_ADDR_VAR 0 11
50400: PUSH
50401: DOUBLE
50402: LD_INT 1
50404: DEC
50405: ST_TO_ADDR
50406: LD_VAR 0 5
50410: PUSH
50411: FOR_TO
50412: IFFALSE 50459
// begin hc_class := 21 ;
50414: LD_ADDR_OWVAR 28
50418: PUSH
50419: LD_INT 21
50421: ST_TO_ADDR
// hc_gallery :=  ;
50422: LD_ADDR_OWVAR 33
50426: PUSH
50427: LD_STRING 
50429: ST_TO_ADDR
// animal := CreateHuman ;
50430: LD_ADDR_VAR 0 12
50434: PUSH
50435: CALL_OW 44
50439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50440: LD_VAR 0 12
50444: PPUSH
50445: LD_VAR 0 8
50449: PPUSH
50450: LD_INT 0
50452: PPUSH
50453: CALL 52525 0 3
// end ;
50457: GO 50411
50459: POP
50460: POP
// if birds then
50461: LD_VAR 0 1
50465: IFFALSE 50532
// for i = 1 to birds do
50467: LD_ADDR_VAR 0 11
50471: PUSH
50472: DOUBLE
50473: LD_INT 1
50475: DEC
50476: ST_TO_ADDR
50477: LD_VAR 0 1
50481: PUSH
50482: FOR_TO
50483: IFFALSE 50530
// begin hc_class = 18 ;
50485: LD_ADDR_OWVAR 28
50489: PUSH
50490: LD_INT 18
50492: ST_TO_ADDR
// hc_gallery =  ;
50493: LD_ADDR_OWVAR 33
50497: PUSH
50498: LD_STRING 
50500: ST_TO_ADDR
// animal := CreateHuman ;
50501: LD_ADDR_VAR 0 12
50505: PUSH
50506: CALL_OW 44
50510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50511: LD_VAR 0 12
50515: PPUSH
50516: LD_VAR 0 8
50520: PPUSH
50521: LD_INT 0
50523: PPUSH
50524: CALL 52525 0 3
// end ;
50528: GO 50482
50530: POP
50531: POP
// if tigers then
50532: LD_VAR 0 2
50536: IFFALSE 50620
// for i = 1 to tigers do
50538: LD_ADDR_VAR 0 11
50542: PUSH
50543: DOUBLE
50544: LD_INT 1
50546: DEC
50547: ST_TO_ADDR
50548: LD_VAR 0 2
50552: PUSH
50553: FOR_TO
50554: IFFALSE 50618
// begin hc_class = class_tiger ;
50556: LD_ADDR_OWVAR 28
50560: PUSH
50561: LD_INT 14
50563: ST_TO_ADDR
// hc_gallery =  ;
50564: LD_ADDR_OWVAR 33
50568: PUSH
50569: LD_STRING 
50571: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
50572: LD_ADDR_OWVAR 35
50576: PUSH
50577: LD_INT 7
50579: NEG
50580: PPUSH
50581: LD_INT 7
50583: PPUSH
50584: CALL_OW 12
50588: ST_TO_ADDR
// animal := CreateHuman ;
50589: LD_ADDR_VAR 0 12
50593: PUSH
50594: CALL_OW 44
50598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50599: LD_VAR 0 12
50603: PPUSH
50604: LD_VAR 0 8
50608: PPUSH
50609: LD_INT 0
50611: PPUSH
50612: CALL 52525 0 3
// end ;
50616: GO 50553
50618: POP
50619: POP
// if apemans then
50620: LD_VAR 0 3
50624: IFFALSE 50747
// for i = 1 to apemans do
50626: LD_ADDR_VAR 0 11
50630: PUSH
50631: DOUBLE
50632: LD_INT 1
50634: DEC
50635: ST_TO_ADDR
50636: LD_VAR 0 3
50640: PUSH
50641: FOR_TO
50642: IFFALSE 50745
// begin hc_class = class_apeman ;
50644: LD_ADDR_OWVAR 28
50648: PUSH
50649: LD_INT 12
50651: ST_TO_ADDR
// hc_gallery =  ;
50652: LD_ADDR_OWVAR 33
50656: PUSH
50657: LD_STRING 
50659: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
50660: LD_ADDR_OWVAR 35
50664: PUSH
50665: LD_INT 2
50667: NEG
50668: PPUSH
50669: LD_INT 2
50671: PPUSH
50672: CALL_OW 12
50676: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
50677: LD_ADDR_OWVAR 31
50681: PUSH
50682: LD_INT 1
50684: PPUSH
50685: LD_INT 3
50687: PPUSH
50688: CALL_OW 12
50692: PUSH
50693: LD_INT 1
50695: PPUSH
50696: LD_INT 3
50698: PPUSH
50699: CALL_OW 12
50703: PUSH
50704: LD_INT 0
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: ST_TO_ADDR
// animal := CreateHuman ;
50716: LD_ADDR_VAR 0 12
50720: PUSH
50721: CALL_OW 44
50725: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50726: LD_VAR 0 12
50730: PPUSH
50731: LD_VAR 0 8
50735: PPUSH
50736: LD_INT 0
50738: PPUSH
50739: CALL 52525 0 3
// end ;
50743: GO 50641
50745: POP
50746: POP
// if enchidnas then
50747: LD_VAR 0 4
50751: IFFALSE 50818
// for i = 1 to enchidnas do
50753: LD_ADDR_VAR 0 11
50757: PUSH
50758: DOUBLE
50759: LD_INT 1
50761: DEC
50762: ST_TO_ADDR
50763: LD_VAR 0 4
50767: PUSH
50768: FOR_TO
50769: IFFALSE 50816
// begin hc_class = 13 ;
50771: LD_ADDR_OWVAR 28
50775: PUSH
50776: LD_INT 13
50778: ST_TO_ADDR
// hc_gallery =  ;
50779: LD_ADDR_OWVAR 33
50783: PUSH
50784: LD_STRING 
50786: ST_TO_ADDR
// animal := CreateHuman ;
50787: LD_ADDR_VAR 0 12
50791: PUSH
50792: CALL_OW 44
50796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
50797: LD_VAR 0 12
50801: PPUSH
50802: LD_VAR 0 8
50806: PPUSH
50807: LD_INT 0
50809: PPUSH
50810: CALL 52525 0 3
// end ;
50814: GO 50768
50816: POP
50817: POP
// if fishes then
50818: LD_VAR 0 7
50822: IFFALSE 50889
// for i = 1 to fishes do
50824: LD_ADDR_VAR 0 11
50828: PUSH
50829: DOUBLE
50830: LD_INT 1
50832: DEC
50833: ST_TO_ADDR
50834: LD_VAR 0 7
50838: PUSH
50839: FOR_TO
50840: IFFALSE 50887
// begin hc_class = 20 ;
50842: LD_ADDR_OWVAR 28
50846: PUSH
50847: LD_INT 20
50849: ST_TO_ADDR
// hc_gallery =  ;
50850: LD_ADDR_OWVAR 33
50854: PUSH
50855: LD_STRING 
50857: ST_TO_ADDR
// animal := CreateHuman ;
50858: LD_ADDR_VAR 0 12
50862: PUSH
50863: CALL_OW 44
50867: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
50868: LD_VAR 0 12
50872: PPUSH
50873: LD_VAR 0 9
50877: PPUSH
50878: LD_INT 0
50880: PPUSH
50881: CALL 52525 0 3
// end ;
50885: GO 50839
50887: POP
50888: POP
// end ;
50889: LD_VAR 0 10
50893: RET
// export function WantHeal ( sci , unit ) ; begin
50894: LD_INT 0
50896: PPUSH
// if GetTaskList ( sci ) > 0 then
50897: LD_VAR 0 1
50901: PPUSH
50902: CALL_OW 437
50906: PUSH
50907: LD_INT 0
50909: GREATER
50910: IFFALSE 50980
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
50912: LD_VAR 0 1
50916: PPUSH
50917: CALL_OW 437
50921: PUSH
50922: LD_INT 1
50924: ARRAY
50925: PUSH
50926: LD_INT 1
50928: ARRAY
50929: PUSH
50930: LD_STRING l
50932: EQUAL
50933: PUSH
50934: LD_VAR 0 1
50938: PPUSH
50939: CALL_OW 437
50943: PUSH
50944: LD_INT 1
50946: ARRAY
50947: PUSH
50948: LD_INT 4
50950: ARRAY
50951: PUSH
50952: LD_VAR 0 2
50956: EQUAL
50957: AND
50958: IFFALSE 50970
// result := true else
50960: LD_ADDR_VAR 0 3
50964: PUSH
50965: LD_INT 1
50967: ST_TO_ADDR
50968: GO 50978
// result := false ;
50970: LD_ADDR_VAR 0 3
50974: PUSH
50975: LD_INT 0
50977: ST_TO_ADDR
// end else
50978: GO 50988
// result := false ;
50980: LD_ADDR_VAR 0 3
50984: PUSH
50985: LD_INT 0
50987: ST_TO_ADDR
// end ;
50988: LD_VAR 0 3
50992: RET
// export function HealTarget ( sci ) ; begin
50993: LD_INT 0
50995: PPUSH
// if not sci then
50996: LD_VAR 0 1
51000: NOT
51001: IFFALSE 51005
// exit ;
51003: GO 51070
// result := 0 ;
51005: LD_ADDR_VAR 0 2
51009: PUSH
51010: LD_INT 0
51012: ST_TO_ADDR
// if GetTaskList ( sci ) then
51013: LD_VAR 0 1
51017: PPUSH
51018: CALL_OW 437
51022: IFFALSE 51070
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
51024: LD_VAR 0 1
51028: PPUSH
51029: CALL_OW 437
51033: PUSH
51034: LD_INT 1
51036: ARRAY
51037: PUSH
51038: LD_INT 1
51040: ARRAY
51041: PUSH
51042: LD_STRING l
51044: EQUAL
51045: IFFALSE 51070
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
51047: LD_ADDR_VAR 0 2
51051: PUSH
51052: LD_VAR 0 1
51056: PPUSH
51057: CALL_OW 437
51061: PUSH
51062: LD_INT 1
51064: ARRAY
51065: PUSH
51066: LD_INT 4
51068: ARRAY
51069: ST_TO_ADDR
// end ;
51070: LD_VAR 0 2
51074: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
51075: LD_INT 0
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
// if not base_units then
51081: LD_VAR 0 1
51085: NOT
51086: IFFALSE 51090
// exit ;
51088: GO 51177
// result := false ;
51090: LD_ADDR_VAR 0 2
51094: PUSH
51095: LD_INT 0
51097: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
51098: LD_ADDR_VAR 0 5
51102: PUSH
51103: LD_VAR 0 1
51107: PPUSH
51108: LD_INT 21
51110: PUSH
51111: LD_INT 3
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PPUSH
51118: CALL_OW 72
51122: ST_TO_ADDR
// if not tmp then
51123: LD_VAR 0 5
51127: NOT
51128: IFFALSE 51132
// exit ;
51130: GO 51177
// for i in tmp do
51132: LD_ADDR_VAR 0 3
51136: PUSH
51137: LD_VAR 0 5
51141: PUSH
51142: FOR_IN
51143: IFFALSE 51175
// begin result := EnemyInRange ( i , 22 ) ;
51145: LD_ADDR_VAR 0 2
51149: PUSH
51150: LD_VAR 0 3
51154: PPUSH
51155: LD_INT 22
51157: PPUSH
51158: CALL 49413 0 2
51162: ST_TO_ADDR
// if result then
51163: LD_VAR 0 2
51167: IFFALSE 51173
// exit ;
51169: POP
51170: POP
51171: GO 51177
// end ;
51173: GO 51142
51175: POP
51176: POP
// end ;
51177: LD_VAR 0 2
51181: RET
// export function FilterByTag ( units , tag ) ; begin
51182: LD_INT 0
51184: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
51185: LD_ADDR_VAR 0 3
51189: PUSH
51190: LD_VAR 0 1
51194: PPUSH
51195: LD_INT 120
51197: PUSH
51198: LD_VAR 0 2
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PPUSH
51207: CALL_OW 72
51211: ST_TO_ADDR
// end ;
51212: LD_VAR 0 3
51216: RET
// export function IsDriver ( un ) ; begin
51217: LD_INT 0
51219: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
51220: LD_ADDR_VAR 0 2
51224: PUSH
51225: LD_VAR 0 1
51229: PUSH
51230: LD_INT 55
51232: PUSH
51233: EMPTY
51234: LIST
51235: PPUSH
51236: CALL_OW 69
51240: IN
51241: ST_TO_ADDR
// end ;
51242: LD_VAR 0 2
51246: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
51247: LD_INT 0
51249: PPUSH
51250: PPUSH
// list := [ ] ;
51251: LD_ADDR_VAR 0 5
51255: PUSH
51256: EMPTY
51257: ST_TO_ADDR
// case d of 0 :
51258: LD_VAR 0 3
51262: PUSH
51263: LD_INT 0
51265: DOUBLE
51266: EQUAL
51267: IFTRUE 51271
51269: GO 51404
51271: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
51272: LD_ADDR_VAR 0 5
51276: PUSH
51277: LD_VAR 0 1
51281: PUSH
51282: LD_INT 4
51284: MINUS
51285: PUSH
51286: LD_VAR 0 2
51290: PUSH
51291: LD_INT 4
51293: MINUS
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: PUSH
51303: LD_VAR 0 1
51307: PUSH
51308: LD_INT 3
51310: MINUS
51311: PUSH
51312: LD_VAR 0 2
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: LIST
51324: PUSH
51325: LD_VAR 0 1
51329: PUSH
51330: LD_INT 4
51332: PLUS
51333: PUSH
51334: LD_VAR 0 2
51338: PUSH
51339: LD_INT 4
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: PUSH
51347: LD_VAR 0 1
51351: PUSH
51352: LD_INT 3
51354: PLUS
51355: PUSH
51356: LD_VAR 0 2
51360: PUSH
51361: LD_INT 3
51363: PLUS
51364: PUSH
51365: LD_INT 5
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: LIST
51372: PUSH
51373: LD_VAR 0 1
51377: PUSH
51378: LD_VAR 0 2
51382: PUSH
51383: LD_INT 4
51385: PLUS
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: LIST
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: ST_TO_ADDR
// end ; 1 :
51402: GO 52102
51404: LD_INT 1
51406: DOUBLE
51407: EQUAL
51408: IFTRUE 51412
51410: GO 51545
51412: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
51413: LD_ADDR_VAR 0 5
51417: PUSH
51418: LD_VAR 0 1
51422: PUSH
51423: LD_VAR 0 2
51427: PUSH
51428: LD_INT 4
51430: MINUS
51431: PUSH
51432: LD_INT 3
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: LIST
51439: PUSH
51440: LD_VAR 0 1
51444: PUSH
51445: LD_INT 3
51447: MINUS
51448: PUSH
51449: LD_VAR 0 2
51453: PUSH
51454: LD_INT 3
51456: MINUS
51457: PUSH
51458: LD_INT 2
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: LIST
51465: PUSH
51466: LD_VAR 0 1
51470: PUSH
51471: LD_INT 4
51473: MINUS
51474: PUSH
51475: LD_VAR 0 2
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: LIST
51487: PUSH
51488: LD_VAR 0 1
51492: PUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_INT 3
51500: PLUS
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: PUSH
51510: LD_VAR 0 1
51514: PUSH
51515: LD_INT 4
51517: PLUS
51518: PUSH
51519: LD_VAR 0 2
51523: PUSH
51524: LD_INT 4
51526: PLUS
51527: PUSH
51528: LD_INT 5
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: LIST
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: ST_TO_ADDR
// end ; 2 :
51543: GO 52102
51545: LD_INT 2
51547: DOUBLE
51548: EQUAL
51549: IFTRUE 51553
51551: GO 51682
51553: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
51554: LD_ADDR_VAR 0 5
51558: PUSH
51559: LD_VAR 0 1
51563: PUSH
51564: LD_VAR 0 2
51568: PUSH
51569: LD_INT 3
51571: MINUS
51572: PUSH
51573: LD_INT 3
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: PUSH
51581: LD_VAR 0 1
51585: PUSH
51586: LD_INT 4
51588: PLUS
51589: PUSH
51590: LD_VAR 0 2
51594: PUSH
51595: LD_INT 4
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: LIST
51602: PUSH
51603: LD_VAR 0 1
51607: PUSH
51608: LD_VAR 0 2
51612: PUSH
51613: LD_INT 4
51615: PLUS
51616: PUSH
51617: LD_INT 0
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: LIST
51624: PUSH
51625: LD_VAR 0 1
51629: PUSH
51630: LD_INT 3
51632: MINUS
51633: PUSH
51634: LD_VAR 0 2
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: LIST
51646: PUSH
51647: LD_VAR 0 1
51651: PUSH
51652: LD_INT 4
51654: MINUS
51655: PUSH
51656: LD_VAR 0 2
51660: PUSH
51661: LD_INT 4
51663: MINUS
51664: PUSH
51665: LD_INT 2
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: LIST
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: LIST
51677: LIST
51678: LIST
51679: ST_TO_ADDR
// end ; 3 :
51680: GO 52102
51682: LD_INT 3
51684: DOUBLE
51685: EQUAL
51686: IFTRUE 51690
51688: GO 51823
51690: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
51691: LD_ADDR_VAR 0 5
51695: PUSH
51696: LD_VAR 0 1
51700: PUSH
51701: LD_INT 3
51703: PLUS
51704: PUSH
51705: LD_VAR 0 2
51709: PUSH
51710: LD_INT 4
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: LIST
51717: PUSH
51718: LD_VAR 0 1
51722: PUSH
51723: LD_INT 4
51725: PLUS
51726: PUSH
51727: LD_VAR 0 2
51731: PUSH
51732: LD_INT 4
51734: PLUS
51735: PUSH
51736: LD_INT 5
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: LIST
51743: PUSH
51744: LD_VAR 0 1
51748: PUSH
51749: LD_INT 4
51751: MINUS
51752: PUSH
51753: LD_VAR 0 2
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: LIST
51765: PUSH
51766: LD_VAR 0 1
51770: PUSH
51771: LD_VAR 0 2
51775: PUSH
51776: LD_INT 4
51778: MINUS
51779: PUSH
51780: LD_INT 3
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: LIST
51787: PUSH
51788: LD_VAR 0 1
51792: PUSH
51793: LD_INT 3
51795: MINUS
51796: PUSH
51797: LD_VAR 0 2
51801: PUSH
51802: LD_INT 3
51804: MINUS
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: LIST
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: ST_TO_ADDR
// end ; 4 :
51821: GO 52102
51823: LD_INT 4
51825: DOUBLE
51826: EQUAL
51827: IFTRUE 51831
51829: GO 51964
51831: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
51832: LD_ADDR_VAR 0 5
51836: PUSH
51837: LD_VAR 0 1
51841: PUSH
51842: LD_VAR 0 2
51846: PUSH
51847: LD_INT 4
51849: PLUS
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: LIST
51858: PUSH
51859: LD_VAR 0 1
51863: PUSH
51864: LD_INT 3
51866: PLUS
51867: PUSH
51868: LD_VAR 0 2
51872: PUSH
51873: LD_INT 3
51875: PLUS
51876: PUSH
51877: LD_INT 5
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: LIST
51884: PUSH
51885: LD_VAR 0 1
51889: PUSH
51890: LD_INT 4
51892: PLUS
51893: PUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: PUSH
51907: LD_VAR 0 1
51911: PUSH
51912: LD_VAR 0 2
51916: PUSH
51917: LD_INT 3
51919: MINUS
51920: PUSH
51921: LD_INT 3
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: PUSH
51929: LD_VAR 0 1
51933: PUSH
51934: LD_INT 4
51936: MINUS
51937: PUSH
51938: LD_VAR 0 2
51942: PUSH
51943: LD_INT 4
51945: MINUS
51946: PUSH
51947: LD_INT 2
51949: PUSH
51950: EMPTY
51951: LIST
51952: LIST
51953: LIST
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// end ; 5 :
51962: GO 52102
51964: LD_INT 5
51966: DOUBLE
51967: EQUAL
51968: IFTRUE 51972
51970: GO 52101
51972: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
51973: LD_ADDR_VAR 0 5
51977: PUSH
51978: LD_VAR 0 1
51982: PUSH
51983: LD_INT 4
51985: MINUS
51986: PUSH
51987: LD_VAR 0 2
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: LIST
51999: PUSH
52000: LD_VAR 0 1
52004: PUSH
52005: LD_VAR 0 2
52009: PUSH
52010: LD_INT 4
52012: MINUS
52013: PUSH
52014: LD_INT 3
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: LIST
52021: PUSH
52022: LD_VAR 0 1
52026: PUSH
52027: LD_INT 4
52029: PLUS
52030: PUSH
52031: LD_VAR 0 2
52035: PUSH
52036: LD_INT 4
52038: PLUS
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: PUSH
52048: LD_VAR 0 1
52052: PUSH
52053: LD_INT 3
52055: PLUS
52056: PUSH
52057: LD_VAR 0 2
52061: PUSH
52062: LD_INT 4
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: LIST
52069: PUSH
52070: LD_VAR 0 1
52074: PUSH
52075: LD_VAR 0 2
52079: PUSH
52080: LD_INT 3
52082: PLUS
52083: PUSH
52084: LD_INT 0
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: ST_TO_ADDR
// end ; end ;
52099: GO 52102
52101: POP
// result := list ;
52102: LD_ADDR_VAR 0 4
52106: PUSH
52107: LD_VAR 0 5
52111: ST_TO_ADDR
// end ;
52112: LD_VAR 0 4
52116: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
52117: LD_INT 0
52119: PPUSH
52120: PPUSH
52121: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
52122: LD_VAR 0 1
52126: NOT
52127: PUSH
52128: LD_VAR 0 2
52132: PUSH
52133: LD_INT 1
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 3
52141: PUSH
52142: LD_INT 4
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: IN
52151: NOT
52152: OR
52153: IFFALSE 52157
// exit ;
52155: GO 52249
// tmp := [ ] ;
52157: LD_ADDR_VAR 0 5
52161: PUSH
52162: EMPTY
52163: ST_TO_ADDR
// for i in units do
52164: LD_ADDR_VAR 0 4
52168: PUSH
52169: LD_VAR 0 1
52173: PUSH
52174: FOR_IN
52175: IFFALSE 52218
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
52177: LD_ADDR_VAR 0 5
52181: PUSH
52182: LD_VAR 0 5
52186: PPUSH
52187: LD_VAR 0 5
52191: PUSH
52192: LD_INT 1
52194: PLUS
52195: PPUSH
52196: LD_VAR 0 4
52200: PPUSH
52201: LD_VAR 0 2
52205: PPUSH
52206: CALL_OW 259
52210: PPUSH
52211: CALL_OW 2
52215: ST_TO_ADDR
52216: GO 52174
52218: POP
52219: POP
// if not tmp then
52220: LD_VAR 0 5
52224: NOT
52225: IFFALSE 52229
// exit ;
52227: GO 52249
// result := SortListByListDesc ( units , tmp ) ;
52229: LD_ADDR_VAR 0 3
52233: PUSH
52234: LD_VAR 0 1
52238: PPUSH
52239: LD_VAR 0 5
52243: PPUSH
52244: CALL_OW 77
52248: ST_TO_ADDR
// end ;
52249: LD_VAR 0 3
52253: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
52254: LD_INT 0
52256: PPUSH
52257: PPUSH
52258: PPUSH
// result := false ;
52259: LD_ADDR_VAR 0 3
52263: PUSH
52264: LD_INT 0
52266: ST_TO_ADDR
// x := GetX ( building ) ;
52267: LD_ADDR_VAR 0 4
52271: PUSH
52272: LD_VAR 0 2
52276: PPUSH
52277: CALL_OW 250
52281: ST_TO_ADDR
// y := GetY ( building ) ;
52282: LD_ADDR_VAR 0 5
52286: PUSH
52287: LD_VAR 0 2
52291: PPUSH
52292: CALL_OW 251
52296: ST_TO_ADDR
// if not building or not x or not y then
52297: LD_VAR 0 2
52301: NOT
52302: PUSH
52303: LD_VAR 0 4
52307: NOT
52308: OR
52309: PUSH
52310: LD_VAR 0 5
52314: NOT
52315: OR
52316: IFFALSE 52320
// exit ;
52318: GO 52412
// if GetTaskList ( unit ) then
52320: LD_VAR 0 1
52324: PPUSH
52325: CALL_OW 437
52329: IFFALSE 52412
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52331: LD_STRING e
52333: PUSH
52334: LD_VAR 0 1
52338: PPUSH
52339: CALL_OW 437
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: PUSH
52348: LD_INT 1
52350: ARRAY
52351: EQUAL
52352: PUSH
52353: LD_VAR 0 4
52357: PUSH
52358: LD_VAR 0 1
52362: PPUSH
52363: CALL_OW 437
52367: PUSH
52368: LD_INT 1
52370: ARRAY
52371: PUSH
52372: LD_INT 2
52374: ARRAY
52375: EQUAL
52376: AND
52377: PUSH
52378: LD_VAR 0 5
52382: PUSH
52383: LD_VAR 0 1
52387: PPUSH
52388: CALL_OW 437
52392: PUSH
52393: LD_INT 1
52395: ARRAY
52396: PUSH
52397: LD_INT 3
52399: ARRAY
52400: EQUAL
52401: AND
52402: IFFALSE 52412
// result := true end ;
52404: LD_ADDR_VAR 0 3
52408: PUSH
52409: LD_INT 1
52411: ST_TO_ADDR
// end ;
52412: LD_VAR 0 3
52416: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
52417: LD_INT 0
52419: PPUSH
// result := false ;
52420: LD_ADDR_VAR 0 4
52424: PUSH
52425: LD_INT 0
52427: ST_TO_ADDR
// if GetTaskList ( unit ) then
52428: LD_VAR 0 1
52432: PPUSH
52433: CALL_OW 437
52437: IFFALSE 52520
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
52439: LD_STRING M
52441: PUSH
52442: LD_VAR 0 1
52446: PPUSH
52447: CALL_OW 437
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PUSH
52456: LD_INT 1
52458: ARRAY
52459: EQUAL
52460: PUSH
52461: LD_VAR 0 2
52465: PUSH
52466: LD_VAR 0 1
52470: PPUSH
52471: CALL_OW 437
52475: PUSH
52476: LD_INT 1
52478: ARRAY
52479: PUSH
52480: LD_INT 2
52482: ARRAY
52483: EQUAL
52484: AND
52485: PUSH
52486: LD_VAR 0 3
52490: PUSH
52491: LD_VAR 0 1
52495: PPUSH
52496: CALL_OW 437
52500: PUSH
52501: LD_INT 1
52503: ARRAY
52504: PUSH
52505: LD_INT 3
52507: ARRAY
52508: EQUAL
52509: AND
52510: IFFALSE 52520
// result := true ;
52512: LD_ADDR_VAR 0 4
52516: PUSH
52517: LD_INT 1
52519: ST_TO_ADDR
// end ; end ;
52520: LD_VAR 0 4
52524: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
52525: LD_INT 0
52527: PPUSH
52528: PPUSH
52529: PPUSH
52530: PPUSH
// if not unit or not area then
52531: LD_VAR 0 1
52535: NOT
52536: PUSH
52537: LD_VAR 0 2
52541: NOT
52542: OR
52543: IFFALSE 52547
// exit ;
52545: GO 52711
// tmp := AreaToList ( area , i ) ;
52547: LD_ADDR_VAR 0 6
52551: PUSH
52552: LD_VAR 0 2
52556: PPUSH
52557: LD_VAR 0 5
52561: PPUSH
52562: CALL_OW 517
52566: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
52567: LD_ADDR_VAR 0 5
52571: PUSH
52572: DOUBLE
52573: LD_INT 1
52575: DEC
52576: ST_TO_ADDR
52577: LD_VAR 0 6
52581: PUSH
52582: LD_INT 1
52584: ARRAY
52585: PUSH
52586: FOR_TO
52587: IFFALSE 52709
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
52589: LD_ADDR_VAR 0 7
52593: PUSH
52594: LD_VAR 0 6
52598: PUSH
52599: LD_INT 1
52601: ARRAY
52602: PUSH
52603: LD_VAR 0 5
52607: ARRAY
52608: PUSH
52609: LD_VAR 0 6
52613: PUSH
52614: LD_INT 2
52616: ARRAY
52617: PUSH
52618: LD_VAR 0 5
52622: ARRAY
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
52628: LD_VAR 0 7
52632: PUSH
52633: LD_INT 1
52635: ARRAY
52636: PPUSH
52637: LD_VAR 0 7
52641: PUSH
52642: LD_INT 2
52644: ARRAY
52645: PPUSH
52646: CALL_OW 428
52650: PUSH
52651: LD_INT 0
52653: EQUAL
52654: IFFALSE 52707
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
52656: LD_VAR 0 1
52660: PPUSH
52661: LD_VAR 0 7
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: PPUSH
52670: LD_VAR 0 7
52674: PUSH
52675: LD_INT 2
52677: ARRAY
52678: PPUSH
52679: LD_VAR 0 3
52683: PPUSH
52684: CALL_OW 48
// result := IsPlaced ( unit ) ;
52688: LD_ADDR_VAR 0 4
52692: PUSH
52693: LD_VAR 0 1
52697: PPUSH
52698: CALL_OW 305
52702: ST_TO_ADDR
// exit ;
52703: POP
52704: POP
52705: GO 52711
// end ; end ;
52707: GO 52586
52709: POP
52710: POP
// end ;
52711: LD_VAR 0 4
52715: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
52716: LD_INT 0
52718: PPUSH
52719: PPUSH
52720: PPUSH
// if not side or side > 8 then
52721: LD_VAR 0 1
52725: NOT
52726: PUSH
52727: LD_VAR 0 1
52731: PUSH
52732: LD_INT 8
52734: GREATER
52735: OR
52736: IFFALSE 52740
// exit ;
52738: GO 52927
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
52740: LD_ADDR_VAR 0 4
52744: PUSH
52745: LD_INT 22
52747: PUSH
52748: LD_VAR 0 1
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 21
52759: PUSH
52760: LD_INT 3
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PPUSH
52771: CALL_OW 69
52775: ST_TO_ADDR
// if not tmp then
52776: LD_VAR 0 4
52780: NOT
52781: IFFALSE 52785
// exit ;
52783: GO 52927
// enable_addtolog := true ;
52785: LD_ADDR_OWVAR 81
52789: PUSH
52790: LD_INT 1
52792: ST_TO_ADDR
// AddToLog ( [ ) ;
52793: LD_STRING [
52795: PPUSH
52796: CALL_OW 561
// for i in tmp do
52800: LD_ADDR_VAR 0 3
52804: PUSH
52805: LD_VAR 0 4
52809: PUSH
52810: FOR_IN
52811: IFFALSE 52918
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
52813: LD_STRING [
52815: PUSH
52816: LD_VAR 0 3
52820: PPUSH
52821: CALL_OW 266
52825: STR
52826: PUSH
52827: LD_STRING , 
52829: STR
52830: PUSH
52831: LD_VAR 0 3
52835: PPUSH
52836: CALL_OW 250
52840: STR
52841: PUSH
52842: LD_STRING , 
52844: STR
52845: PUSH
52846: LD_VAR 0 3
52850: PPUSH
52851: CALL_OW 251
52855: STR
52856: PUSH
52857: LD_STRING , 
52859: STR
52860: PUSH
52861: LD_VAR 0 3
52865: PPUSH
52866: CALL_OW 254
52870: STR
52871: PUSH
52872: LD_STRING , 
52874: STR
52875: PUSH
52876: LD_VAR 0 3
52880: PPUSH
52881: LD_INT 1
52883: PPUSH
52884: CALL_OW 268
52888: STR
52889: PUSH
52890: LD_STRING , 
52892: STR
52893: PUSH
52894: LD_VAR 0 3
52898: PPUSH
52899: LD_INT 2
52901: PPUSH
52902: CALL_OW 268
52906: STR
52907: PUSH
52908: LD_STRING ],
52910: STR
52911: PPUSH
52912: CALL_OW 561
// end ;
52916: GO 52810
52918: POP
52919: POP
// AddToLog ( ]; ) ;
52920: LD_STRING ];
52922: PPUSH
52923: CALL_OW 561
// end ;
52927: LD_VAR 0 2
52931: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
52932: LD_INT 0
52934: PPUSH
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
// if not area or not rate or not max then
52939: LD_VAR 0 1
52943: NOT
52944: PUSH
52945: LD_VAR 0 2
52949: NOT
52950: OR
52951: PUSH
52952: LD_VAR 0 4
52956: NOT
52957: OR
52958: IFFALSE 52962
// exit ;
52960: GO 53151
// while 1 do
52962: LD_INT 1
52964: IFFALSE 53151
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
52966: LD_ADDR_VAR 0 9
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: LD_INT 1
52978: PPUSH
52979: CALL_OW 287
52983: PUSH
52984: LD_INT 10
52986: MUL
52987: ST_TO_ADDR
// r := rate / 10 ;
52988: LD_ADDR_VAR 0 7
52992: PUSH
52993: LD_VAR 0 2
52997: PUSH
52998: LD_INT 10
53000: DIVREAL
53001: ST_TO_ADDR
// time := 1 1$00 ;
53002: LD_ADDR_VAR 0 8
53006: PUSH
53007: LD_INT 2100
53009: ST_TO_ADDR
// if amount < min then
53010: LD_VAR 0 9
53014: PUSH
53015: LD_VAR 0 3
53019: LESS
53020: IFFALSE 53038
// r := r * 2 else
53022: LD_ADDR_VAR 0 7
53026: PUSH
53027: LD_VAR 0 7
53031: PUSH
53032: LD_INT 2
53034: MUL
53035: ST_TO_ADDR
53036: GO 53064
// if amount > max then
53038: LD_VAR 0 9
53042: PUSH
53043: LD_VAR 0 4
53047: GREATER
53048: IFFALSE 53064
// r := r / 2 ;
53050: LD_ADDR_VAR 0 7
53054: PUSH
53055: LD_VAR 0 7
53059: PUSH
53060: LD_INT 2
53062: DIVREAL
53063: ST_TO_ADDR
// time := time / r ;
53064: LD_ADDR_VAR 0 8
53068: PUSH
53069: LD_VAR 0 8
53073: PUSH
53074: LD_VAR 0 7
53078: DIVREAL
53079: ST_TO_ADDR
// if time < 0 then
53080: LD_VAR 0 8
53084: PUSH
53085: LD_INT 0
53087: LESS
53088: IFFALSE 53105
// time := time * - 1 ;
53090: LD_ADDR_VAR 0 8
53094: PUSH
53095: LD_VAR 0 8
53099: PUSH
53100: LD_INT 1
53102: NEG
53103: MUL
53104: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
53105: LD_VAR 0 8
53109: PUSH
53110: LD_INT 35
53112: PPUSH
53113: LD_INT 875
53115: PPUSH
53116: CALL_OW 12
53120: PLUS
53121: PPUSH
53122: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
53126: LD_INT 1
53128: PPUSH
53129: LD_INT 5
53131: PPUSH
53132: CALL_OW 12
53136: PPUSH
53137: LD_VAR 0 1
53141: PPUSH
53142: LD_INT 1
53144: PPUSH
53145: CALL_OW 55
// end ;
53149: GO 52962
// end ;
53151: LD_VAR 0 5
53155: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
53156: LD_INT 0
53158: PPUSH
53159: PPUSH
53160: PPUSH
53161: PPUSH
53162: PPUSH
53163: PPUSH
53164: PPUSH
53165: PPUSH
// if not turrets or not factories then
53166: LD_VAR 0 1
53170: NOT
53171: PUSH
53172: LD_VAR 0 2
53176: NOT
53177: OR
53178: IFFALSE 53182
// exit ;
53180: GO 53489
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
53182: LD_ADDR_VAR 0 10
53186: PUSH
53187: LD_INT 5
53189: PUSH
53190: LD_INT 6
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: LD_INT 4
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 3
53209: PUSH
53210: LD_INT 5
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 24
53224: PUSH
53225: LD_INT 25
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 23
53234: PUSH
53235: LD_INT 27
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 42
53248: PUSH
53249: LD_INT 43
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 44
53258: PUSH
53259: LD_INT 46
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 45
53268: PUSH
53269: LD_INT 47
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: LIST
53285: ST_TO_ADDR
// result := [ ] ;
53286: LD_ADDR_VAR 0 3
53290: PUSH
53291: EMPTY
53292: ST_TO_ADDR
// for i in turrets do
53293: LD_ADDR_VAR 0 4
53297: PUSH
53298: LD_VAR 0 1
53302: PUSH
53303: FOR_IN
53304: IFFALSE 53487
// begin nat := GetNation ( i ) ;
53306: LD_ADDR_VAR 0 7
53310: PUSH
53311: LD_VAR 0 4
53315: PPUSH
53316: CALL_OW 248
53320: ST_TO_ADDR
// weapon := 0 ;
53321: LD_ADDR_VAR 0 8
53325: PUSH
53326: LD_INT 0
53328: ST_TO_ADDR
// if not nat then
53329: LD_VAR 0 7
53333: NOT
53334: IFFALSE 53338
// continue ;
53336: GO 53303
// for j in list [ nat ] do
53338: LD_ADDR_VAR 0 5
53342: PUSH
53343: LD_VAR 0 10
53347: PUSH
53348: LD_VAR 0 7
53352: ARRAY
53353: PUSH
53354: FOR_IN
53355: IFFALSE 53396
// if GetBWeapon ( i ) = j [ 1 ] then
53357: LD_VAR 0 4
53361: PPUSH
53362: CALL_OW 269
53366: PUSH
53367: LD_VAR 0 5
53371: PUSH
53372: LD_INT 1
53374: ARRAY
53375: EQUAL
53376: IFFALSE 53394
// begin weapon := j [ 2 ] ;
53378: LD_ADDR_VAR 0 8
53382: PUSH
53383: LD_VAR 0 5
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: ST_TO_ADDR
// break ;
53392: GO 53396
// end ;
53394: GO 53354
53396: POP
53397: POP
// if not weapon then
53398: LD_VAR 0 8
53402: NOT
53403: IFFALSE 53407
// continue ;
53405: GO 53303
// for k in factories do
53407: LD_ADDR_VAR 0 6
53411: PUSH
53412: LD_VAR 0 2
53416: PUSH
53417: FOR_IN
53418: IFFALSE 53483
// begin weapons := AvailableWeaponList ( k ) ;
53420: LD_ADDR_VAR 0 9
53424: PUSH
53425: LD_VAR 0 6
53429: PPUSH
53430: CALL_OW 478
53434: ST_TO_ADDR
// if not weapons then
53435: LD_VAR 0 9
53439: NOT
53440: IFFALSE 53444
// continue ;
53442: GO 53417
// if weapon in weapons then
53444: LD_VAR 0 8
53448: PUSH
53449: LD_VAR 0 9
53453: IN
53454: IFFALSE 53481
// begin result := [ i , weapon ] ;
53456: LD_ADDR_VAR 0 3
53460: PUSH
53461: LD_VAR 0 4
53465: PUSH
53466: LD_VAR 0 8
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: ST_TO_ADDR
// exit ;
53475: POP
53476: POP
53477: POP
53478: POP
53479: GO 53489
// end ; end ;
53481: GO 53417
53483: POP
53484: POP
// end ;
53485: GO 53303
53487: POP
53488: POP
// end ;
53489: LD_VAR 0 3
53493: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
53494: LD_INT 0
53496: PPUSH
// if not side or side > 8 then
53497: LD_VAR 0 3
53501: NOT
53502: PUSH
53503: LD_VAR 0 3
53507: PUSH
53508: LD_INT 8
53510: GREATER
53511: OR
53512: IFFALSE 53516
// exit ;
53514: GO 53575
// if not range then
53516: LD_VAR 0 4
53520: NOT
53521: IFFALSE 53532
// range := - 12 ;
53523: LD_ADDR_VAR 0 4
53527: PUSH
53528: LD_INT 12
53530: NEG
53531: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
53532: LD_VAR 0 1
53536: PPUSH
53537: LD_VAR 0 2
53541: PPUSH
53542: LD_VAR 0 3
53546: PPUSH
53547: LD_VAR 0 4
53551: PPUSH
53552: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
53556: LD_VAR 0 1
53560: PPUSH
53561: LD_VAR 0 2
53565: PPUSH
53566: LD_VAR 0 3
53570: PPUSH
53571: CALL_OW 331
// end ;
53575: LD_VAR 0 5
53579: RET
// export function Video ( mode ) ; begin
53580: LD_INT 0
53582: PPUSH
// ingame_video = mode ;
53583: LD_ADDR_OWVAR 52
53587: PUSH
53588: LD_VAR 0 1
53592: ST_TO_ADDR
// interface_hidden = mode ;
53593: LD_ADDR_OWVAR 54
53597: PUSH
53598: LD_VAR 0 1
53602: ST_TO_ADDR
// end ;
53603: LD_VAR 0 2
53607: RET
// export function Join ( array , element ) ; begin
53608: LD_INT 0
53610: PPUSH
// result := Replace ( array , array + 1 , element ) ;
53611: LD_ADDR_VAR 0 3
53615: PUSH
53616: LD_VAR 0 1
53620: PPUSH
53621: LD_VAR 0 1
53625: PUSH
53626: LD_INT 1
53628: PLUS
53629: PPUSH
53630: LD_VAR 0 2
53634: PPUSH
53635: CALL_OW 1
53639: ST_TO_ADDR
// end ;
53640: LD_VAR 0 3
53644: RET
// export function JoinUnion ( array , element ) ; begin
53645: LD_INT 0
53647: PPUSH
// result := array union element ;
53648: LD_ADDR_VAR 0 3
53652: PUSH
53653: LD_VAR 0 1
53657: PUSH
53658: LD_VAR 0 2
53662: UNION
53663: ST_TO_ADDR
// end ;
53664: LD_VAR 0 3
53668: RET
// export function GetBehemoths ( side ) ; begin
53669: LD_INT 0
53671: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
53672: LD_ADDR_VAR 0 2
53676: PUSH
53677: LD_INT 22
53679: PUSH
53680: LD_VAR 0 1
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 31
53691: PUSH
53692: LD_INT 25
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PPUSH
53703: CALL_OW 69
53707: ST_TO_ADDR
// end ;
53708: LD_VAR 0 2
53712: RET
// export function Shuffle ( array ) ; var i , index ; begin
53713: LD_INT 0
53715: PPUSH
53716: PPUSH
53717: PPUSH
// result := [ ] ;
53718: LD_ADDR_VAR 0 2
53722: PUSH
53723: EMPTY
53724: ST_TO_ADDR
// if not array then
53725: LD_VAR 0 1
53729: NOT
53730: IFFALSE 53734
// exit ;
53732: GO 53833
// Randomize ;
53734: CALL_OW 10
// for i = array downto 1 do
53738: LD_ADDR_VAR 0 3
53742: PUSH
53743: DOUBLE
53744: LD_VAR 0 1
53748: INC
53749: ST_TO_ADDR
53750: LD_INT 1
53752: PUSH
53753: FOR_DOWNTO
53754: IFFALSE 53831
// begin index := rand ( 1 , array ) ;
53756: LD_ADDR_VAR 0 4
53760: PUSH
53761: LD_INT 1
53763: PPUSH
53764: LD_VAR 0 1
53768: PPUSH
53769: CALL_OW 12
53773: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
53774: LD_ADDR_VAR 0 2
53778: PUSH
53779: LD_VAR 0 2
53783: PPUSH
53784: LD_VAR 0 2
53788: PUSH
53789: LD_INT 1
53791: PLUS
53792: PPUSH
53793: LD_VAR 0 1
53797: PUSH
53798: LD_VAR 0 4
53802: ARRAY
53803: PPUSH
53804: CALL_OW 2
53808: ST_TO_ADDR
// array := Delete ( array , index ) ;
53809: LD_ADDR_VAR 0 1
53813: PUSH
53814: LD_VAR 0 1
53818: PPUSH
53819: LD_VAR 0 4
53823: PPUSH
53824: CALL_OW 3
53828: ST_TO_ADDR
// end ;
53829: GO 53753
53831: POP
53832: POP
// end ;
53833: LD_VAR 0 2
53837: RET
// export function GetBaseMaterials ( base ) ; begin
53838: LD_INT 0
53840: PPUSH
// result := [ 0 , 0 , 0 ] ;
53841: LD_ADDR_VAR 0 2
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 0
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
// if not base then
53860: LD_VAR 0 1
53864: NOT
53865: IFFALSE 53869
// exit ;
53867: GO 53918
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
53869: LD_ADDR_VAR 0 2
53873: PUSH
53874: LD_VAR 0 1
53878: PPUSH
53879: LD_INT 1
53881: PPUSH
53882: CALL_OW 275
53886: PUSH
53887: LD_VAR 0 1
53891: PPUSH
53892: LD_INT 2
53894: PPUSH
53895: CALL_OW 275
53899: PUSH
53900: LD_VAR 0 1
53904: PPUSH
53905: LD_INT 3
53907: PPUSH
53908: CALL_OW 275
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: ST_TO_ADDR
// end ;
53918: LD_VAR 0 2
53922: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
53923: LD_INT 0
53925: PPUSH
53926: PPUSH
// result := array ;
53927: LD_ADDR_VAR 0 3
53931: PUSH
53932: LD_VAR 0 1
53936: ST_TO_ADDR
// if size > 0 then
53937: LD_VAR 0 2
53941: PUSH
53942: LD_INT 0
53944: GREATER
53945: IFFALSE 53991
// for i := array downto size do
53947: LD_ADDR_VAR 0 4
53951: PUSH
53952: DOUBLE
53953: LD_VAR 0 1
53957: INC
53958: ST_TO_ADDR
53959: LD_VAR 0 2
53963: PUSH
53964: FOR_DOWNTO
53965: IFFALSE 53989
// result := Delete ( result , result ) ;
53967: LD_ADDR_VAR 0 3
53971: PUSH
53972: LD_VAR 0 3
53976: PPUSH
53977: LD_VAR 0 3
53981: PPUSH
53982: CALL_OW 3
53986: ST_TO_ADDR
53987: GO 53964
53989: POP
53990: POP
// end ;
53991: LD_VAR 0 3
53995: RET
// export function ComExit ( unit ) ; var tmp ; begin
53996: LD_INT 0
53998: PPUSH
53999: PPUSH
// if not IsInUnit ( unit ) then
54000: LD_VAR 0 1
54004: PPUSH
54005: CALL_OW 310
54009: NOT
54010: IFFALSE 54014
// exit ;
54012: GO 54074
// tmp := IsInUnit ( unit ) ;
54014: LD_ADDR_VAR 0 3
54018: PUSH
54019: LD_VAR 0 1
54023: PPUSH
54024: CALL_OW 310
54028: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
54029: LD_VAR 0 3
54033: PPUSH
54034: CALL_OW 247
54038: PUSH
54039: LD_INT 2
54041: EQUAL
54042: IFFALSE 54055
// ComExitVehicle ( unit ) else
54044: LD_VAR 0 1
54048: PPUSH
54049: CALL_OW 121
54053: GO 54064
// ComExitBuilding ( unit ) ;
54055: LD_VAR 0 1
54059: PPUSH
54060: CALL_OW 122
// result := tmp ;
54064: LD_ADDR_VAR 0 2
54068: PUSH
54069: LD_VAR 0 3
54073: ST_TO_ADDR
// end ;
54074: LD_VAR 0 2
54078: RET
// export function ComExitAll ( units ) ; var i ; begin
54079: LD_INT 0
54081: PPUSH
54082: PPUSH
// if not units then
54083: LD_VAR 0 1
54087: NOT
54088: IFFALSE 54092
// exit ;
54090: GO 54118
// for i in units do
54092: LD_ADDR_VAR 0 3
54096: PUSH
54097: LD_VAR 0 1
54101: PUSH
54102: FOR_IN
54103: IFFALSE 54116
// ComExit ( i ) ;
54105: LD_VAR 0 3
54109: PPUSH
54110: CALL 53996 0 1
54114: GO 54102
54116: POP
54117: POP
// end ;
54118: LD_VAR 0 2
54122: RET
// export function ResetHc ; begin
54123: LD_INT 0
54125: PPUSH
// InitHc ;
54126: CALL_OW 19
// hc_importance := 0 ;
54130: LD_ADDR_OWVAR 32
54134: PUSH
54135: LD_INT 0
54137: ST_TO_ADDR
// end ;
54138: LD_VAR 0 1
54142: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
54143: LD_INT 0
54145: PPUSH
54146: PPUSH
54147: PPUSH
// _x := ( x1 + x2 ) div 2 ;
54148: LD_ADDR_VAR 0 6
54152: PUSH
54153: LD_VAR 0 1
54157: PUSH
54158: LD_VAR 0 3
54162: PLUS
54163: PUSH
54164: LD_INT 2
54166: DIV
54167: ST_TO_ADDR
// if _x < 0 then
54168: LD_VAR 0 6
54172: PUSH
54173: LD_INT 0
54175: LESS
54176: IFFALSE 54193
// _x := _x * - 1 ;
54178: LD_ADDR_VAR 0 6
54182: PUSH
54183: LD_VAR 0 6
54187: PUSH
54188: LD_INT 1
54190: NEG
54191: MUL
54192: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
54193: LD_ADDR_VAR 0 7
54197: PUSH
54198: LD_VAR 0 2
54202: PUSH
54203: LD_VAR 0 4
54207: PLUS
54208: PUSH
54209: LD_INT 2
54211: DIV
54212: ST_TO_ADDR
// if _y < 0 then
54213: LD_VAR 0 7
54217: PUSH
54218: LD_INT 0
54220: LESS
54221: IFFALSE 54238
// _y := _y * - 1 ;
54223: LD_ADDR_VAR 0 7
54227: PUSH
54228: LD_VAR 0 7
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: MUL
54237: ST_TO_ADDR
// result := [ _x , _y ] ;
54238: LD_ADDR_VAR 0 5
54242: PUSH
54243: LD_VAR 0 6
54247: PUSH
54248: LD_VAR 0 7
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// end ;
54257: LD_VAR 0 5
54261: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
54262: LD_INT 0
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
// task := GetTaskList ( unit ) ;
54268: LD_ADDR_VAR 0 7
54272: PUSH
54273: LD_VAR 0 1
54277: PPUSH
54278: CALL_OW 437
54282: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
54283: LD_VAR 0 7
54287: NOT
54288: PUSH
54289: LD_VAR 0 1
54293: PPUSH
54294: LD_VAR 0 2
54298: PPUSH
54299: CALL_OW 308
54303: NOT
54304: AND
54305: IFFALSE 54309
// exit ;
54307: GO 54427
// if IsInArea ( unit , area ) then
54309: LD_VAR 0 1
54313: PPUSH
54314: LD_VAR 0 2
54318: PPUSH
54319: CALL_OW 308
54323: IFFALSE 54341
// begin ComMoveToArea ( unit , goAway ) ;
54325: LD_VAR 0 1
54329: PPUSH
54330: LD_VAR 0 3
54334: PPUSH
54335: CALL_OW 113
// exit ;
54339: GO 54427
// end ; if task [ 1 ] [ 1 ] <> M then
54341: LD_VAR 0 7
54345: PUSH
54346: LD_INT 1
54348: ARRAY
54349: PUSH
54350: LD_INT 1
54352: ARRAY
54353: PUSH
54354: LD_STRING M
54356: NONEQUAL
54357: IFFALSE 54361
// exit ;
54359: GO 54427
// x := task [ 1 ] [ 2 ] ;
54361: LD_ADDR_VAR 0 5
54365: PUSH
54366: LD_VAR 0 7
54370: PUSH
54371: LD_INT 1
54373: ARRAY
54374: PUSH
54375: LD_INT 2
54377: ARRAY
54378: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
54379: LD_ADDR_VAR 0 6
54383: PUSH
54384: LD_VAR 0 7
54388: PUSH
54389: LD_INT 1
54391: ARRAY
54392: PUSH
54393: LD_INT 3
54395: ARRAY
54396: ST_TO_ADDR
// if InArea ( x , y , area ) then
54397: LD_VAR 0 5
54401: PPUSH
54402: LD_VAR 0 6
54406: PPUSH
54407: LD_VAR 0 2
54411: PPUSH
54412: CALL_OW 309
54416: IFFALSE 54427
// ComStop ( unit ) ;
54418: LD_VAR 0 1
54422: PPUSH
54423: CALL_OW 141
// end ;
54427: LD_VAR 0 4
54431: RET
// export function Abs ( value ) ; begin
54432: LD_INT 0
54434: PPUSH
// result := value ;
54435: LD_ADDR_VAR 0 2
54439: PUSH
54440: LD_VAR 0 1
54444: ST_TO_ADDR
// if value < 0 then
54445: LD_VAR 0 1
54449: PUSH
54450: LD_INT 0
54452: LESS
54453: IFFALSE 54470
// result := value * - 1 ;
54455: LD_ADDR_VAR 0 2
54459: PUSH
54460: LD_VAR 0 1
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: MUL
54469: ST_TO_ADDR
// end ;
54470: LD_VAR 0 2
54474: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
54475: LD_INT 0
54477: PPUSH
54478: PPUSH
54479: PPUSH
54480: PPUSH
54481: PPUSH
54482: PPUSH
54483: PPUSH
54484: PPUSH
// if not unit or not building then
54485: LD_VAR 0 1
54489: NOT
54490: PUSH
54491: LD_VAR 0 2
54495: NOT
54496: OR
54497: IFFALSE 54501
// exit ;
54499: GO 54727
// x := GetX ( building ) ;
54501: LD_ADDR_VAR 0 4
54505: PUSH
54506: LD_VAR 0 2
54510: PPUSH
54511: CALL_OW 250
54515: ST_TO_ADDR
// y := GetY ( building ) ;
54516: LD_ADDR_VAR 0 6
54520: PUSH
54521: LD_VAR 0 2
54525: PPUSH
54526: CALL_OW 251
54530: ST_TO_ADDR
// d := GetDir ( building ) ;
54531: LD_ADDR_VAR 0 8
54535: PUSH
54536: LD_VAR 0 2
54540: PPUSH
54541: CALL_OW 254
54545: ST_TO_ADDR
// r := 4 ;
54546: LD_ADDR_VAR 0 9
54550: PUSH
54551: LD_INT 4
54553: ST_TO_ADDR
// for i := 1 to 5 do
54554: LD_ADDR_VAR 0 10
54558: PUSH
54559: DOUBLE
54560: LD_INT 1
54562: DEC
54563: ST_TO_ADDR
54564: LD_INT 5
54566: PUSH
54567: FOR_TO
54568: IFFALSE 54725
// begin _x := ShiftX ( x , d , r + i ) ;
54570: LD_ADDR_VAR 0 5
54574: PUSH
54575: LD_VAR 0 4
54579: PPUSH
54580: LD_VAR 0 8
54584: PPUSH
54585: LD_VAR 0 9
54589: PUSH
54590: LD_VAR 0 10
54594: PLUS
54595: PPUSH
54596: CALL_OW 272
54600: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
54601: LD_ADDR_VAR 0 7
54605: PUSH
54606: LD_VAR 0 6
54610: PPUSH
54611: LD_VAR 0 8
54615: PPUSH
54616: LD_VAR 0 9
54620: PUSH
54621: LD_VAR 0 10
54625: PLUS
54626: PPUSH
54627: CALL_OW 273
54631: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
54632: LD_VAR 0 5
54636: PPUSH
54637: LD_VAR 0 7
54641: PPUSH
54642: CALL_OW 488
54646: PUSH
54647: LD_VAR 0 5
54651: PPUSH
54652: LD_VAR 0 7
54656: PPUSH
54657: CALL_OW 428
54661: PPUSH
54662: CALL_OW 247
54666: PUSH
54667: LD_INT 3
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: IN
54677: NOT
54678: AND
54679: IFFALSE 54723
// begin ComMoveXY ( unit , _x , _y ) ;
54681: LD_VAR 0 1
54685: PPUSH
54686: LD_VAR 0 5
54690: PPUSH
54691: LD_VAR 0 7
54695: PPUSH
54696: CALL_OW 111
// result := [ _x , _y ] ;
54700: LD_ADDR_VAR 0 3
54704: PUSH
54705: LD_VAR 0 5
54709: PUSH
54710: LD_VAR 0 7
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: ST_TO_ADDR
// exit ;
54719: POP
54720: POP
54721: GO 54727
// end ; end ;
54723: GO 54567
54725: POP
54726: POP
// end ;
54727: LD_VAR 0 3
54731: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
54732: LD_INT 0
54734: PPUSH
54735: PPUSH
54736: PPUSH
// result := 0 ;
54737: LD_ADDR_VAR 0 3
54741: PUSH
54742: LD_INT 0
54744: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
54745: LD_VAR 0 1
54749: PUSH
54750: LD_INT 0
54752: LESS
54753: PUSH
54754: LD_VAR 0 1
54758: PUSH
54759: LD_INT 8
54761: GREATER
54762: OR
54763: PUSH
54764: LD_VAR 0 2
54768: PUSH
54769: LD_INT 0
54771: LESS
54772: OR
54773: PUSH
54774: LD_VAR 0 2
54778: PUSH
54779: LD_INT 8
54781: GREATER
54782: OR
54783: IFFALSE 54787
// exit ;
54785: GO 54862
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
54787: LD_ADDR_VAR 0 4
54791: PUSH
54792: LD_INT 22
54794: PUSH
54795: LD_VAR 0 2
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PPUSH
54804: CALL_OW 69
54808: PUSH
54809: FOR_IN
54810: IFFALSE 54860
// begin un := UnitShoot ( i ) ;
54812: LD_ADDR_VAR 0 5
54816: PUSH
54817: LD_VAR 0 4
54821: PPUSH
54822: CALL_OW 504
54826: ST_TO_ADDR
// if GetSide ( un ) = side1 then
54827: LD_VAR 0 5
54831: PPUSH
54832: CALL_OW 255
54836: PUSH
54837: LD_VAR 0 1
54841: EQUAL
54842: IFFALSE 54858
// begin result := un ;
54844: LD_ADDR_VAR 0 3
54848: PUSH
54849: LD_VAR 0 5
54853: ST_TO_ADDR
// exit ;
54854: POP
54855: POP
54856: GO 54862
// end ; end ;
54858: GO 54809
54860: POP
54861: POP
// end ;
54862: LD_VAR 0 3
54866: RET
// export function GetCargoBay ( units ) ; begin
54867: LD_INT 0
54869: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
54870: LD_ADDR_VAR 0 2
54874: PUSH
54875: LD_VAR 0 1
54879: PPUSH
54880: LD_INT 2
54882: PUSH
54883: LD_INT 34
54885: PUSH
54886: LD_INT 12
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 34
54895: PUSH
54896: LD_INT 51
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 34
54905: PUSH
54906: LD_INT 32
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 34
54915: PUSH
54916: LD_EXP 108
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: PPUSH
54932: CALL_OW 72
54936: ST_TO_ADDR
// end ;
54937: LD_VAR 0 2
54941: RET
// export function Negate ( value ) ; begin
54942: LD_INT 0
54944: PPUSH
// result := not value ;
54945: LD_ADDR_VAR 0 2
54949: PUSH
54950: LD_VAR 0 1
54954: NOT
54955: ST_TO_ADDR
// end ;
54956: LD_VAR 0 2
54960: RET
// export function Inc ( value ) ; begin
54961: LD_INT 0
54963: PPUSH
// result := value + 1 ;
54964: LD_ADDR_VAR 0 2
54968: PUSH
54969: LD_VAR 0 1
54973: PUSH
54974: LD_INT 1
54976: PLUS
54977: ST_TO_ADDR
// end ;
54978: LD_VAR 0 2
54982: RET
// export function Dec ( value ) ; begin
54983: LD_INT 0
54985: PPUSH
// result := value - 1 ;
54986: LD_ADDR_VAR 0 2
54990: PUSH
54991: LD_VAR 0 1
54995: PUSH
54996: LD_INT 1
54998: MINUS
54999: ST_TO_ADDR
// end ;
55000: LD_VAR 0 2
55004: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
55005: LD_INT 0
55007: PPUSH
55008: PPUSH
55009: PPUSH
55010: PPUSH
55011: PPUSH
55012: PPUSH
55013: PPUSH
55014: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
55015: LD_VAR 0 1
55019: PPUSH
55020: LD_VAR 0 2
55024: PPUSH
55025: CALL_OW 488
55029: NOT
55030: PUSH
55031: LD_VAR 0 3
55035: PPUSH
55036: LD_VAR 0 4
55040: PPUSH
55041: CALL_OW 488
55045: NOT
55046: OR
55047: IFFALSE 55060
// begin result := - 1 ;
55049: LD_ADDR_VAR 0 5
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: ST_TO_ADDR
// exit ;
55058: GO 55295
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
55060: LD_ADDR_VAR 0 12
55064: PUSH
55065: LD_VAR 0 1
55069: PPUSH
55070: LD_VAR 0 2
55074: PPUSH
55075: LD_VAR 0 3
55079: PPUSH
55080: LD_VAR 0 4
55084: PPUSH
55085: CALL 54143 0 4
55089: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
55090: LD_ADDR_VAR 0 11
55094: PUSH
55095: LD_VAR 0 1
55099: PPUSH
55100: LD_VAR 0 2
55104: PPUSH
55105: LD_VAR 0 12
55109: PUSH
55110: LD_INT 1
55112: ARRAY
55113: PPUSH
55114: LD_VAR 0 12
55118: PUSH
55119: LD_INT 2
55121: ARRAY
55122: PPUSH
55123: CALL_OW 298
55127: ST_TO_ADDR
// distance := 9999 ;
55128: LD_ADDR_VAR 0 10
55132: PUSH
55133: LD_INT 9999
55135: ST_TO_ADDR
// for i := 0 to 5 do
55136: LD_ADDR_VAR 0 6
55140: PUSH
55141: DOUBLE
55142: LD_INT 0
55144: DEC
55145: ST_TO_ADDR
55146: LD_INT 5
55148: PUSH
55149: FOR_TO
55150: IFFALSE 55293
// begin _x := ShiftX ( x1 , i , centerDist ) ;
55152: LD_ADDR_VAR 0 7
55156: PUSH
55157: LD_VAR 0 1
55161: PPUSH
55162: LD_VAR 0 6
55166: PPUSH
55167: LD_VAR 0 11
55171: PPUSH
55172: CALL_OW 272
55176: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
55177: LD_ADDR_VAR 0 8
55181: PUSH
55182: LD_VAR 0 2
55186: PPUSH
55187: LD_VAR 0 6
55191: PPUSH
55192: LD_VAR 0 11
55196: PPUSH
55197: CALL_OW 273
55201: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55202: LD_VAR 0 7
55206: PPUSH
55207: LD_VAR 0 8
55211: PPUSH
55212: CALL_OW 488
55216: NOT
55217: IFFALSE 55221
// continue ;
55219: GO 55149
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
55221: LD_ADDR_VAR 0 9
55225: PUSH
55226: LD_VAR 0 12
55230: PUSH
55231: LD_INT 1
55233: ARRAY
55234: PPUSH
55235: LD_VAR 0 12
55239: PUSH
55240: LD_INT 2
55242: ARRAY
55243: PPUSH
55244: LD_VAR 0 7
55248: PPUSH
55249: LD_VAR 0 8
55253: PPUSH
55254: CALL_OW 298
55258: ST_TO_ADDR
// if tmp < distance then
55259: LD_VAR 0 9
55263: PUSH
55264: LD_VAR 0 10
55268: LESS
55269: IFFALSE 55291
// begin result := i ;
55271: LD_ADDR_VAR 0 5
55275: PUSH
55276: LD_VAR 0 6
55280: ST_TO_ADDR
// distance := tmp ;
55281: LD_ADDR_VAR 0 10
55285: PUSH
55286: LD_VAR 0 9
55290: ST_TO_ADDR
// end ; end ;
55291: GO 55149
55293: POP
55294: POP
// end ;
55295: LD_VAR 0 5
55299: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55300: LD_INT 0
55302: PPUSH
55303: PPUSH
// if not driver or not IsInUnit ( driver ) then
55304: LD_VAR 0 1
55308: NOT
55309: PUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 310
55319: NOT
55320: OR
55321: IFFALSE 55325
// exit ;
55323: GO 55415
// vehicle := IsInUnit ( driver ) ;
55325: LD_ADDR_VAR 0 3
55329: PUSH
55330: LD_VAR 0 1
55334: PPUSH
55335: CALL_OW 310
55339: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55340: LD_VAR 0 1
55344: PPUSH
55345: LD_STRING \
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 0
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 0
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: PUSH
55375: LD_STRING E
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: LD_VAR 0 3
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PPUSH
55411: CALL_OW 446
// end ;
55415: LD_VAR 0 2
55419: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
55420: LD_INT 0
55422: PPUSH
55423: PPUSH
// if not driver or not IsInUnit ( driver ) then
55424: LD_VAR 0 1
55428: NOT
55429: PUSH
55430: LD_VAR 0 1
55434: PPUSH
55435: CALL_OW 310
55439: NOT
55440: OR
55441: IFFALSE 55445
// exit ;
55443: GO 55535
// vehicle := IsInUnit ( driver ) ;
55445: LD_ADDR_VAR 0 3
55449: PUSH
55450: LD_VAR 0 1
55454: PPUSH
55455: CALL_OW 310
55459: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
55460: LD_VAR 0 1
55464: PPUSH
55465: LD_STRING \
55467: PUSH
55468: LD_INT 0
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 0
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 0
55482: PUSH
55483: LD_INT 0
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: PUSH
55495: LD_STRING E
55497: PUSH
55498: LD_INT 0
55500: PUSH
55501: LD_INT 0
55503: PUSH
55504: LD_VAR 0 3
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 0
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PPUSH
55531: CALL_OW 447
// end ;
55535: LD_VAR 0 2
55539: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
55540: LD_INT 0
55542: PPUSH
55543: PPUSH
55544: PPUSH
// tmp := [ ] ;
55545: LD_ADDR_VAR 0 5
55549: PUSH
55550: EMPTY
55551: ST_TO_ADDR
// for i in units do
55552: LD_ADDR_VAR 0 4
55556: PUSH
55557: LD_VAR 0 1
55561: PUSH
55562: FOR_IN
55563: IFFALSE 55601
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
55565: LD_ADDR_VAR 0 5
55569: PUSH
55570: LD_VAR 0 5
55574: PPUSH
55575: LD_VAR 0 5
55579: PUSH
55580: LD_INT 1
55582: PLUS
55583: PPUSH
55584: LD_VAR 0 4
55588: PPUSH
55589: CALL_OW 256
55593: PPUSH
55594: CALL_OW 2
55598: ST_TO_ADDR
55599: GO 55562
55601: POP
55602: POP
// if not tmp then
55603: LD_VAR 0 5
55607: NOT
55608: IFFALSE 55612
// exit ;
55610: GO 55660
// if asc then
55612: LD_VAR 0 2
55616: IFFALSE 55640
// result := SortListByListAsc ( units , tmp ) else
55618: LD_ADDR_VAR 0 3
55622: PUSH
55623: LD_VAR 0 1
55627: PPUSH
55628: LD_VAR 0 5
55632: PPUSH
55633: CALL_OW 76
55637: ST_TO_ADDR
55638: GO 55660
// result := SortListByListDesc ( units , tmp ) ;
55640: LD_ADDR_VAR 0 3
55644: PUSH
55645: LD_VAR 0 1
55649: PPUSH
55650: LD_VAR 0 5
55654: PPUSH
55655: CALL_OW 77
55659: ST_TO_ADDR
// end ;
55660: LD_VAR 0 3
55664: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
55665: LD_INT 0
55667: PPUSH
55668: PPUSH
// task := GetTaskList ( mech ) ;
55669: LD_ADDR_VAR 0 4
55673: PUSH
55674: LD_VAR 0 1
55678: PPUSH
55679: CALL_OW 437
55683: ST_TO_ADDR
// if not task then
55684: LD_VAR 0 4
55688: NOT
55689: IFFALSE 55693
// exit ;
55691: GO 55735
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
55693: LD_ADDR_VAR 0 3
55697: PUSH
55698: LD_VAR 0 4
55702: PUSH
55703: LD_INT 1
55705: ARRAY
55706: PUSH
55707: LD_INT 1
55709: ARRAY
55710: PUSH
55711: LD_STRING r
55713: EQUAL
55714: PUSH
55715: LD_VAR 0 4
55719: PUSH
55720: LD_INT 1
55722: ARRAY
55723: PUSH
55724: LD_INT 4
55726: ARRAY
55727: PUSH
55728: LD_VAR 0 2
55732: EQUAL
55733: AND
55734: ST_TO_ADDR
// end ;
55735: LD_VAR 0 3
55739: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
55740: LD_INT 0
55742: PPUSH
// SetDir ( unit , d ) ;
55743: LD_VAR 0 1
55747: PPUSH
55748: LD_VAR 0 4
55752: PPUSH
55753: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
55757: LD_VAR 0 1
55761: PPUSH
55762: LD_VAR 0 2
55766: PPUSH
55767: LD_VAR 0 3
55771: PPUSH
55772: LD_VAR 0 5
55776: PPUSH
55777: CALL_OW 48
// end ;
55781: LD_VAR 0 6
55785: RET
// export function ToNaturalNumber ( number ) ; begin
55786: LD_INT 0
55788: PPUSH
// result := number div 1 ;
55789: LD_ADDR_VAR 0 2
55793: PUSH
55794: LD_VAR 0 1
55798: PUSH
55799: LD_INT 1
55801: DIV
55802: ST_TO_ADDR
// if number < 0 then
55803: LD_VAR 0 1
55807: PUSH
55808: LD_INT 0
55810: LESS
55811: IFFALSE 55821
// result := 0 ;
55813: LD_ADDR_VAR 0 2
55817: PUSH
55818: LD_INT 0
55820: ST_TO_ADDR
// end ;
55821: LD_VAR 0 2
55825: RET
// export function SortByClass ( units , class ) ; var un ; begin
55826: LD_INT 0
55828: PPUSH
55829: PPUSH
// if not units or not class then
55830: LD_VAR 0 1
55834: NOT
55835: PUSH
55836: LD_VAR 0 2
55840: NOT
55841: OR
55842: IFFALSE 55846
// exit ;
55844: GO 55941
// result := [ ] ;
55846: LD_ADDR_VAR 0 3
55850: PUSH
55851: EMPTY
55852: ST_TO_ADDR
// for un in units do
55853: LD_ADDR_VAR 0 4
55857: PUSH
55858: LD_VAR 0 1
55862: PUSH
55863: FOR_IN
55864: IFFALSE 55939
// if GetClass ( un ) = class then
55866: LD_VAR 0 4
55870: PPUSH
55871: CALL_OW 257
55875: PUSH
55876: LD_VAR 0 2
55880: EQUAL
55881: IFFALSE 55908
// result := Insert ( result , 1 , un ) else
55883: LD_ADDR_VAR 0 3
55887: PUSH
55888: LD_VAR 0 3
55892: PPUSH
55893: LD_INT 1
55895: PPUSH
55896: LD_VAR 0 4
55900: PPUSH
55901: CALL_OW 2
55905: ST_TO_ADDR
55906: GO 55937
// result := Replace ( result , result + 1 , un ) ;
55908: LD_ADDR_VAR 0 3
55912: PUSH
55913: LD_VAR 0 3
55917: PPUSH
55918: LD_VAR 0 3
55922: PUSH
55923: LD_INT 1
55925: PLUS
55926: PPUSH
55927: LD_VAR 0 4
55931: PPUSH
55932: CALL_OW 1
55936: ST_TO_ADDR
55937: GO 55863
55939: POP
55940: POP
// end ;
55941: LD_VAR 0 3
55945: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
55946: LD_INT 0
55948: PPUSH
55949: PPUSH
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
// result := [ ] ;
55955: LD_ADDR_VAR 0 4
55959: PUSH
55960: EMPTY
55961: ST_TO_ADDR
// if x - r < 0 then
55962: LD_VAR 0 1
55966: PUSH
55967: LD_VAR 0 3
55971: MINUS
55972: PUSH
55973: LD_INT 0
55975: LESS
55976: IFFALSE 55988
// min_x := 0 else
55978: LD_ADDR_VAR 0 8
55982: PUSH
55983: LD_INT 0
55985: ST_TO_ADDR
55986: GO 56004
// min_x := x - r ;
55988: LD_ADDR_VAR 0 8
55992: PUSH
55993: LD_VAR 0 1
55997: PUSH
55998: LD_VAR 0 3
56002: MINUS
56003: ST_TO_ADDR
// if y - r < 0 then
56004: LD_VAR 0 2
56008: PUSH
56009: LD_VAR 0 3
56013: MINUS
56014: PUSH
56015: LD_INT 0
56017: LESS
56018: IFFALSE 56030
// min_y := 0 else
56020: LD_ADDR_VAR 0 7
56024: PUSH
56025: LD_INT 0
56027: ST_TO_ADDR
56028: GO 56046
// min_y := y - r ;
56030: LD_ADDR_VAR 0 7
56034: PUSH
56035: LD_VAR 0 2
56039: PUSH
56040: LD_VAR 0 3
56044: MINUS
56045: ST_TO_ADDR
// max_x := x + r ;
56046: LD_ADDR_VAR 0 9
56050: PUSH
56051: LD_VAR 0 1
56055: PUSH
56056: LD_VAR 0 3
56060: PLUS
56061: ST_TO_ADDR
// max_y := y + r ;
56062: LD_ADDR_VAR 0 10
56066: PUSH
56067: LD_VAR 0 2
56071: PUSH
56072: LD_VAR 0 3
56076: PLUS
56077: ST_TO_ADDR
// for _x = min_x to max_x do
56078: LD_ADDR_VAR 0 5
56082: PUSH
56083: DOUBLE
56084: LD_VAR 0 8
56088: DEC
56089: ST_TO_ADDR
56090: LD_VAR 0 9
56094: PUSH
56095: FOR_TO
56096: IFFALSE 56197
// for _y = min_y to max_y do
56098: LD_ADDR_VAR 0 6
56102: PUSH
56103: DOUBLE
56104: LD_VAR 0 7
56108: DEC
56109: ST_TO_ADDR
56110: LD_VAR 0 10
56114: PUSH
56115: FOR_TO
56116: IFFALSE 56193
// begin if not ValidHex ( _x , _y ) then
56118: LD_VAR 0 5
56122: PPUSH
56123: LD_VAR 0 6
56127: PPUSH
56128: CALL_OW 488
56132: NOT
56133: IFFALSE 56137
// continue ;
56135: GO 56115
// if GetResourceTypeXY ( _x , _y ) then
56137: LD_VAR 0 5
56141: PPUSH
56142: LD_VAR 0 6
56146: PPUSH
56147: CALL_OW 283
56151: IFFALSE 56191
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
56153: LD_ADDR_VAR 0 4
56157: PUSH
56158: LD_VAR 0 4
56162: PPUSH
56163: LD_VAR 0 4
56167: PUSH
56168: LD_INT 1
56170: PLUS
56171: PPUSH
56172: LD_VAR 0 5
56176: PUSH
56177: LD_VAR 0 6
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PPUSH
56186: CALL_OW 1
56190: ST_TO_ADDR
// end ;
56191: GO 56115
56193: POP
56194: POP
56195: GO 56095
56197: POP
56198: POP
// end ;
56199: LD_VAR 0 4
56203: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
56204: LD_INT 0
56206: PPUSH
56207: PPUSH
56208: PPUSH
56209: PPUSH
56210: PPUSH
56211: PPUSH
56212: PPUSH
56213: PPUSH
// if not units then
56214: LD_VAR 0 1
56218: NOT
56219: IFFALSE 56223
// exit ;
56221: GO 56734
// result := UnitFilter ( units , [ f_ok ] ) ;
56223: LD_ADDR_VAR 0 3
56227: PUSH
56228: LD_VAR 0 1
56232: PPUSH
56233: LD_INT 50
56235: PUSH
56236: EMPTY
56237: LIST
56238: PPUSH
56239: CALL_OW 72
56243: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
56244: LD_ADDR_VAR 0 8
56248: PUSH
56249: LD_VAR 0 1
56253: PUSH
56254: LD_INT 1
56256: ARRAY
56257: PPUSH
56258: CALL_OW 255
56262: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
56263: LD_ADDR_VAR 0 10
56267: PUSH
56268: LD_INT 29
56270: PUSH
56271: LD_EXP 111
56275: PUSH
56276: LD_INT 49
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// if not result then
56284: LD_VAR 0 3
56288: NOT
56289: IFFALSE 56293
// exit ;
56291: GO 56734
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
56293: LD_ADDR_VAR 0 5
56297: PUSH
56298: LD_INT 81
56300: PUSH
56301: LD_VAR 0 8
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: PPUSH
56310: CALL_OW 69
56314: ST_TO_ADDR
// for i in result do
56315: LD_ADDR_VAR 0 4
56319: PUSH
56320: LD_VAR 0 3
56324: PUSH
56325: FOR_IN
56326: IFFALSE 56732
// begin tag := GetTag ( i ) + 1 ;
56328: LD_ADDR_VAR 0 9
56332: PUSH
56333: LD_VAR 0 4
56337: PPUSH
56338: CALL_OW 110
56342: PUSH
56343: LD_INT 1
56345: PLUS
56346: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
56347: LD_ADDR_VAR 0 7
56351: PUSH
56352: LD_VAR 0 4
56356: PPUSH
56357: CALL_OW 250
56361: PPUSH
56362: LD_VAR 0 4
56366: PPUSH
56367: CALL_OW 251
56371: PPUSH
56372: LD_INT 6
56374: PPUSH
56375: CALL 55946 0 3
56379: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
56380: LD_VAR 0 7
56384: PUSH
56385: LD_VAR 0 4
56389: PPUSH
56390: CALL_OW 264
56394: PUSH
56395: LD_VAR 0 10
56399: IN
56400: NOT
56401: AND
56402: IFFALSE 56441
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
56404: LD_VAR 0 4
56408: PPUSH
56409: LD_VAR 0 7
56413: PUSH
56414: LD_INT 1
56416: ARRAY
56417: PUSH
56418: LD_INT 1
56420: ARRAY
56421: PPUSH
56422: LD_VAR 0 7
56426: PUSH
56427: LD_INT 1
56429: ARRAY
56430: PUSH
56431: LD_INT 2
56433: ARRAY
56434: PPUSH
56435: CALL_OW 116
56439: GO 56730
// if path > tag then
56441: LD_VAR 0 2
56445: PUSH
56446: LD_VAR 0 9
56450: GREATER
56451: IFFALSE 56659
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
56453: LD_ADDR_VAR 0 6
56457: PUSH
56458: LD_VAR 0 5
56462: PPUSH
56463: LD_INT 91
56465: PUSH
56466: LD_VAR 0 4
56470: PUSH
56471: LD_INT 12
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: PPUSH
56479: CALL_OW 72
56483: ST_TO_ADDR
// if nearEnemy then
56484: LD_VAR 0 6
56488: IFFALSE 56557
// begin if GetWeapon ( i ) = ru_time_lapser then
56490: LD_VAR 0 4
56494: PPUSH
56495: CALL_OW 264
56499: PUSH
56500: LD_INT 49
56502: EQUAL
56503: IFFALSE 56531
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
56505: LD_VAR 0 4
56509: PPUSH
56510: LD_VAR 0 6
56514: PPUSH
56515: LD_VAR 0 4
56519: PPUSH
56520: CALL_OW 74
56524: PPUSH
56525: CALL_OW 112
56529: GO 56555
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
56531: LD_VAR 0 4
56535: PPUSH
56536: LD_VAR 0 6
56540: PPUSH
56541: LD_VAR 0 4
56545: PPUSH
56546: CALL_OW 74
56550: PPUSH
56551: CALL_OW 115
// end else
56555: GO 56657
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
56557: LD_VAR 0 4
56561: PPUSH
56562: LD_VAR 0 2
56566: PUSH
56567: LD_VAR 0 9
56571: ARRAY
56572: PUSH
56573: LD_INT 1
56575: ARRAY
56576: PPUSH
56577: LD_VAR 0 2
56581: PUSH
56582: LD_VAR 0 9
56586: ARRAY
56587: PUSH
56588: LD_INT 2
56590: ARRAY
56591: PPUSH
56592: CALL_OW 297
56596: PUSH
56597: LD_INT 6
56599: GREATER
56600: IFFALSE 56643
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
56602: LD_VAR 0 4
56606: PPUSH
56607: LD_VAR 0 2
56611: PUSH
56612: LD_VAR 0 9
56616: ARRAY
56617: PUSH
56618: LD_INT 1
56620: ARRAY
56621: PPUSH
56622: LD_VAR 0 2
56626: PUSH
56627: LD_VAR 0 9
56631: ARRAY
56632: PUSH
56633: LD_INT 2
56635: ARRAY
56636: PPUSH
56637: CALL_OW 114
56641: GO 56657
// SetTag ( i , tag ) ;
56643: LD_VAR 0 4
56647: PPUSH
56648: LD_VAR 0 9
56652: PPUSH
56653: CALL_OW 109
// end else
56657: GO 56730
// if enemy then
56659: LD_VAR 0 5
56663: IFFALSE 56730
// begin if GetWeapon ( i ) = ru_time_lapser then
56665: LD_VAR 0 4
56669: PPUSH
56670: CALL_OW 264
56674: PUSH
56675: LD_INT 49
56677: EQUAL
56678: IFFALSE 56706
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
56680: LD_VAR 0 4
56684: PPUSH
56685: LD_VAR 0 5
56689: PPUSH
56690: LD_VAR 0 4
56694: PPUSH
56695: CALL_OW 74
56699: PPUSH
56700: CALL_OW 112
56704: GO 56730
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
56706: LD_VAR 0 4
56710: PPUSH
56711: LD_VAR 0 5
56715: PPUSH
56716: LD_VAR 0 4
56720: PPUSH
56721: CALL_OW 74
56725: PPUSH
56726: CALL_OW 115
// end ; end ;
56730: GO 56325
56732: POP
56733: POP
// end ;
56734: LD_VAR 0 3
56738: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
56739: LD_INT 0
56741: PPUSH
56742: PPUSH
56743: PPUSH
// if not unit or IsInUnit ( unit ) then
56744: LD_VAR 0 1
56748: NOT
56749: PUSH
56750: LD_VAR 0 1
56754: PPUSH
56755: CALL_OW 310
56759: OR
56760: IFFALSE 56764
// exit ;
56762: GO 56855
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
56764: LD_ADDR_VAR 0 4
56768: PUSH
56769: LD_VAR 0 1
56773: PPUSH
56774: CALL_OW 250
56778: PPUSH
56779: LD_VAR 0 2
56783: PPUSH
56784: LD_INT 1
56786: PPUSH
56787: CALL_OW 272
56791: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
56792: LD_ADDR_VAR 0 5
56796: PUSH
56797: LD_VAR 0 1
56801: PPUSH
56802: CALL_OW 251
56806: PPUSH
56807: LD_VAR 0 2
56811: PPUSH
56812: LD_INT 1
56814: PPUSH
56815: CALL_OW 273
56819: ST_TO_ADDR
// if ValidHex ( x , y ) then
56820: LD_VAR 0 4
56824: PPUSH
56825: LD_VAR 0 5
56829: PPUSH
56830: CALL_OW 488
56834: IFFALSE 56855
// ComTurnXY ( unit , x , y ) ;
56836: LD_VAR 0 1
56840: PPUSH
56841: LD_VAR 0 4
56845: PPUSH
56846: LD_VAR 0 5
56850: PPUSH
56851: CALL_OW 118
// end ;
56855: LD_VAR 0 3
56859: RET
// export function SeeUnits ( side , units ) ; var i ; begin
56860: LD_INT 0
56862: PPUSH
56863: PPUSH
// result := false ;
56864: LD_ADDR_VAR 0 3
56868: PUSH
56869: LD_INT 0
56871: ST_TO_ADDR
// if not units then
56872: LD_VAR 0 2
56876: NOT
56877: IFFALSE 56881
// exit ;
56879: GO 56926
// for i in units do
56881: LD_ADDR_VAR 0 4
56885: PUSH
56886: LD_VAR 0 2
56890: PUSH
56891: FOR_IN
56892: IFFALSE 56924
// if See ( side , i ) then
56894: LD_VAR 0 1
56898: PPUSH
56899: LD_VAR 0 4
56903: PPUSH
56904: CALL_OW 292
56908: IFFALSE 56922
// begin result := true ;
56910: LD_ADDR_VAR 0 3
56914: PUSH
56915: LD_INT 1
56917: ST_TO_ADDR
// exit ;
56918: POP
56919: POP
56920: GO 56926
// end ;
56922: GO 56891
56924: POP
56925: POP
// end ;
56926: LD_VAR 0 3
56930: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
56931: LD_INT 0
56933: PPUSH
56934: PPUSH
56935: PPUSH
56936: PPUSH
// if not unit or not points then
56937: LD_VAR 0 1
56941: NOT
56942: PUSH
56943: LD_VAR 0 2
56947: NOT
56948: OR
56949: IFFALSE 56953
// exit ;
56951: GO 57043
// dist := 99999 ;
56953: LD_ADDR_VAR 0 5
56957: PUSH
56958: LD_INT 99999
56960: ST_TO_ADDR
// for i in points do
56961: LD_ADDR_VAR 0 4
56965: PUSH
56966: LD_VAR 0 2
56970: PUSH
56971: FOR_IN
56972: IFFALSE 57041
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
56974: LD_ADDR_VAR 0 6
56978: PUSH
56979: LD_VAR 0 1
56983: PPUSH
56984: LD_VAR 0 4
56988: PUSH
56989: LD_INT 1
56991: ARRAY
56992: PPUSH
56993: LD_VAR 0 4
56997: PUSH
56998: LD_INT 2
57000: ARRAY
57001: PPUSH
57002: CALL_OW 297
57006: ST_TO_ADDR
// if tmpDist < dist then
57007: LD_VAR 0 6
57011: PUSH
57012: LD_VAR 0 5
57016: LESS
57017: IFFALSE 57039
// begin result := i ;
57019: LD_ADDR_VAR 0 3
57023: PUSH
57024: LD_VAR 0 4
57028: ST_TO_ADDR
// dist := tmpDist ;
57029: LD_ADDR_VAR 0 5
57033: PUSH
57034: LD_VAR 0 6
57038: ST_TO_ADDR
// end ; end ;
57039: GO 56971
57041: POP
57042: POP
// end ;
57043: LD_VAR 0 3
57047: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
57048: LD_INT 0
57050: PPUSH
// uc_side := side ;
57051: LD_ADDR_OWVAR 20
57055: PUSH
57056: LD_VAR 0 1
57060: ST_TO_ADDR
// uc_nation := 3 ;
57061: LD_ADDR_OWVAR 21
57065: PUSH
57066: LD_INT 3
57068: ST_TO_ADDR
// vc_chassis := 25 ;
57069: LD_ADDR_OWVAR 37
57073: PUSH
57074: LD_INT 25
57076: ST_TO_ADDR
// vc_engine := engine_siberite ;
57077: LD_ADDR_OWVAR 39
57081: PUSH
57082: LD_INT 3
57084: ST_TO_ADDR
// vc_control := control_computer ;
57085: LD_ADDR_OWVAR 38
57089: PUSH
57090: LD_INT 3
57092: ST_TO_ADDR
// vc_weapon := 59 ;
57093: LD_ADDR_OWVAR 40
57097: PUSH
57098: LD_INT 59
57100: ST_TO_ADDR
// result := CreateVehicle ;
57101: LD_ADDR_VAR 0 5
57105: PUSH
57106: CALL_OW 45
57110: ST_TO_ADDR
// SetDir ( result , d ) ;
57111: LD_VAR 0 5
57115: PPUSH
57116: LD_VAR 0 4
57120: PPUSH
57121: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
57125: LD_VAR 0 5
57129: PPUSH
57130: LD_VAR 0 2
57134: PPUSH
57135: LD_VAR 0 3
57139: PPUSH
57140: LD_INT 0
57142: PPUSH
57143: CALL_OW 48
// end ;
57147: LD_VAR 0 5
57151: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
57152: LD_INT 0
57154: PPUSH
57155: PPUSH
57156: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
57157: LD_ADDR_VAR 0 2
57161: PUSH
57162: LD_INT 0
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: LD_INT 0
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
57180: LD_VAR 0 1
57184: NOT
57185: PUSH
57186: LD_VAR 0 1
57190: PPUSH
57191: CALL_OW 264
57195: PUSH
57196: LD_INT 12
57198: PUSH
57199: LD_INT 51
57201: PUSH
57202: LD_INT 32
57204: PUSH
57205: LD_EXP 108
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: IN
57216: NOT
57217: OR
57218: IFFALSE 57222
// exit ;
57220: GO 57320
// for i := 1 to 3 do
57222: LD_ADDR_VAR 0 3
57226: PUSH
57227: DOUBLE
57228: LD_INT 1
57230: DEC
57231: ST_TO_ADDR
57232: LD_INT 3
57234: PUSH
57235: FOR_TO
57236: IFFALSE 57318
// begin tmp := GetCargo ( cargo , i ) ;
57238: LD_ADDR_VAR 0 4
57242: PUSH
57243: LD_VAR 0 1
57247: PPUSH
57248: LD_VAR 0 3
57252: PPUSH
57253: CALL_OW 289
57257: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
57258: LD_ADDR_VAR 0 2
57262: PUSH
57263: LD_VAR 0 2
57267: PPUSH
57268: LD_VAR 0 3
57272: PPUSH
57273: LD_VAR 0 4
57277: PPUSH
57278: CALL_OW 1
57282: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_VAR 0 2
57292: PPUSH
57293: LD_INT 4
57295: PPUSH
57296: LD_VAR 0 2
57300: PUSH
57301: LD_INT 4
57303: ARRAY
57304: PUSH
57305: LD_VAR 0 4
57309: PLUS
57310: PPUSH
57311: CALL_OW 1
57315: ST_TO_ADDR
// end ;
57316: GO 57235
57318: POP
57319: POP
// end ;
57320: LD_VAR 0 2
57324: RET
// export function Length ( array ) ; begin
57325: LD_INT 0
57327: PPUSH
// result := array + 0 ;
57328: LD_ADDR_VAR 0 2
57332: PUSH
57333: LD_VAR 0 1
57337: PUSH
57338: LD_INT 0
57340: PLUS
57341: ST_TO_ADDR
// end ; end_of_file
57342: LD_VAR 0 2
57346: RET
// every 0 0$1 do
57347: GO 57349
57349: DISABLE
// begin enable ;
57350: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
57351: LD_STRING updateTimer(
57353: PUSH
57354: LD_OWVAR 1
57358: STR
57359: PUSH
57360: LD_STRING );
57362: STR
57363: PPUSH
57364: CALL_OW 559
// end ;
57368: END
// export function SOS_MapStart ( ) ; begin
57369: LD_INT 0
57371: PPUSH
// if streamModeActive then
57372: LD_EXP 49
57376: IFFALSE 57385
// DefineStreamItems ( true ) ;
57378: LD_INT 1
57380: PPUSH
57381: CALL 59035 0 1
// UpdateFactoryWaypoints ( ) ;
57385: CALL 73105 0 0
// end ;
57389: LD_VAR 0 1
57393: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
57394: LD_INT 0
57396: PPUSH
// if p2 = 100 then
57397: LD_VAR 0 2
57401: PUSH
57402: LD_INT 100
57404: EQUAL
57405: IFFALSE 58408
// begin if not StreamModeActive then
57407: LD_EXP 49
57411: NOT
57412: IFFALSE 57422
// StreamModeActive := true ;
57414: LD_ADDR_EXP 49
57418: PUSH
57419: LD_INT 1
57421: ST_TO_ADDR
// if p3 = 0 then
57422: LD_VAR 0 3
57426: PUSH
57427: LD_INT 0
57429: EQUAL
57430: IFFALSE 57436
// InitStreamMode ;
57432: CALL 58571 0 0
// if p3 = 1 then
57436: LD_VAR 0 3
57440: PUSH
57441: LD_INT 1
57443: EQUAL
57444: IFFALSE 57454
// sRocket := true ;
57446: LD_ADDR_EXP 54
57450: PUSH
57451: LD_INT 1
57453: ST_TO_ADDR
// if p3 = 2 then
57454: LD_VAR 0 3
57458: PUSH
57459: LD_INT 2
57461: EQUAL
57462: IFFALSE 57472
// sSpeed := true ;
57464: LD_ADDR_EXP 53
57468: PUSH
57469: LD_INT 1
57471: ST_TO_ADDR
// if p3 = 3 then
57472: LD_VAR 0 3
57476: PUSH
57477: LD_INT 3
57479: EQUAL
57480: IFFALSE 57490
// sEngine := true ;
57482: LD_ADDR_EXP 55
57486: PUSH
57487: LD_INT 1
57489: ST_TO_ADDR
// if p3 = 4 then
57490: LD_VAR 0 3
57494: PUSH
57495: LD_INT 4
57497: EQUAL
57498: IFFALSE 57508
// sSpec := true ;
57500: LD_ADDR_EXP 52
57504: PUSH
57505: LD_INT 1
57507: ST_TO_ADDR
// if p3 = 5 then
57508: LD_VAR 0 3
57512: PUSH
57513: LD_INT 5
57515: EQUAL
57516: IFFALSE 57526
// sLevel := true ;
57518: LD_ADDR_EXP 56
57522: PUSH
57523: LD_INT 1
57525: ST_TO_ADDR
// if p3 = 6 then
57526: LD_VAR 0 3
57530: PUSH
57531: LD_INT 6
57533: EQUAL
57534: IFFALSE 57544
// sArmoury := true ;
57536: LD_ADDR_EXP 57
57540: PUSH
57541: LD_INT 1
57543: ST_TO_ADDR
// if p3 = 7 then
57544: LD_VAR 0 3
57548: PUSH
57549: LD_INT 7
57551: EQUAL
57552: IFFALSE 57562
// sRadar := true ;
57554: LD_ADDR_EXP 58
57558: PUSH
57559: LD_INT 1
57561: ST_TO_ADDR
// if p3 = 8 then
57562: LD_VAR 0 3
57566: PUSH
57567: LD_INT 8
57569: EQUAL
57570: IFFALSE 57580
// sBunker := true ;
57572: LD_ADDR_EXP 59
57576: PUSH
57577: LD_INT 1
57579: ST_TO_ADDR
// if p3 = 9 then
57580: LD_VAR 0 3
57584: PUSH
57585: LD_INT 9
57587: EQUAL
57588: IFFALSE 57598
// sHack := true ;
57590: LD_ADDR_EXP 60
57594: PUSH
57595: LD_INT 1
57597: ST_TO_ADDR
// if p3 = 10 then
57598: LD_VAR 0 3
57602: PUSH
57603: LD_INT 10
57605: EQUAL
57606: IFFALSE 57616
// sFire := true ;
57608: LD_ADDR_EXP 61
57612: PUSH
57613: LD_INT 1
57615: ST_TO_ADDR
// if p3 = 11 then
57616: LD_VAR 0 3
57620: PUSH
57621: LD_INT 11
57623: EQUAL
57624: IFFALSE 57634
// sRefresh := true ;
57626: LD_ADDR_EXP 62
57630: PUSH
57631: LD_INT 1
57633: ST_TO_ADDR
// if p3 = 12 then
57634: LD_VAR 0 3
57638: PUSH
57639: LD_INT 12
57641: EQUAL
57642: IFFALSE 57652
// sExp := true ;
57644: LD_ADDR_EXP 63
57648: PUSH
57649: LD_INT 1
57651: ST_TO_ADDR
// if p3 = 13 then
57652: LD_VAR 0 3
57656: PUSH
57657: LD_INT 13
57659: EQUAL
57660: IFFALSE 57670
// sDepot := true ;
57662: LD_ADDR_EXP 64
57666: PUSH
57667: LD_INT 1
57669: ST_TO_ADDR
// if p3 = 14 then
57670: LD_VAR 0 3
57674: PUSH
57675: LD_INT 14
57677: EQUAL
57678: IFFALSE 57688
// sFlag := true ;
57680: LD_ADDR_EXP 65
57684: PUSH
57685: LD_INT 1
57687: ST_TO_ADDR
// if p3 = 15 then
57688: LD_VAR 0 3
57692: PUSH
57693: LD_INT 15
57695: EQUAL
57696: IFFALSE 57706
// sKamikadze := true ;
57698: LD_ADDR_EXP 73
57702: PUSH
57703: LD_INT 1
57705: ST_TO_ADDR
// if p3 = 16 then
57706: LD_VAR 0 3
57710: PUSH
57711: LD_INT 16
57713: EQUAL
57714: IFFALSE 57724
// sTroll := true ;
57716: LD_ADDR_EXP 74
57720: PUSH
57721: LD_INT 1
57723: ST_TO_ADDR
// if p3 = 17 then
57724: LD_VAR 0 3
57728: PUSH
57729: LD_INT 17
57731: EQUAL
57732: IFFALSE 57742
// sSlow := true ;
57734: LD_ADDR_EXP 75
57738: PUSH
57739: LD_INT 1
57741: ST_TO_ADDR
// if p3 = 18 then
57742: LD_VAR 0 3
57746: PUSH
57747: LD_INT 18
57749: EQUAL
57750: IFFALSE 57760
// sLack := true ;
57752: LD_ADDR_EXP 76
57756: PUSH
57757: LD_INT 1
57759: ST_TO_ADDR
// if p3 = 19 then
57760: LD_VAR 0 3
57764: PUSH
57765: LD_INT 19
57767: EQUAL
57768: IFFALSE 57778
// sTank := true ;
57770: LD_ADDR_EXP 78
57774: PUSH
57775: LD_INT 1
57777: ST_TO_ADDR
// if p3 = 20 then
57778: LD_VAR 0 3
57782: PUSH
57783: LD_INT 20
57785: EQUAL
57786: IFFALSE 57796
// sRemote := true ;
57788: LD_ADDR_EXP 79
57792: PUSH
57793: LD_INT 1
57795: ST_TO_ADDR
// if p3 = 21 then
57796: LD_VAR 0 3
57800: PUSH
57801: LD_INT 21
57803: EQUAL
57804: IFFALSE 57814
// sPowell := true ;
57806: LD_ADDR_EXP 80
57810: PUSH
57811: LD_INT 1
57813: ST_TO_ADDR
// if p3 = 22 then
57814: LD_VAR 0 3
57818: PUSH
57819: LD_INT 22
57821: EQUAL
57822: IFFALSE 57832
// sTeleport := true ;
57824: LD_ADDR_EXP 83
57828: PUSH
57829: LD_INT 1
57831: ST_TO_ADDR
// if p3 = 23 then
57832: LD_VAR 0 3
57836: PUSH
57837: LD_INT 23
57839: EQUAL
57840: IFFALSE 57850
// sOilTower := true ;
57842: LD_ADDR_EXP 85
57846: PUSH
57847: LD_INT 1
57849: ST_TO_ADDR
// if p3 = 24 then
57850: LD_VAR 0 3
57854: PUSH
57855: LD_INT 24
57857: EQUAL
57858: IFFALSE 57868
// sShovel := true ;
57860: LD_ADDR_EXP 86
57864: PUSH
57865: LD_INT 1
57867: ST_TO_ADDR
// if p3 = 25 then
57868: LD_VAR 0 3
57872: PUSH
57873: LD_INT 25
57875: EQUAL
57876: IFFALSE 57886
// sSheik := true ;
57878: LD_ADDR_EXP 87
57882: PUSH
57883: LD_INT 1
57885: ST_TO_ADDR
// if p3 = 26 then
57886: LD_VAR 0 3
57890: PUSH
57891: LD_INT 26
57893: EQUAL
57894: IFFALSE 57904
// sEarthquake := true ;
57896: LD_ADDR_EXP 89
57900: PUSH
57901: LD_INT 1
57903: ST_TO_ADDR
// if p3 = 27 then
57904: LD_VAR 0 3
57908: PUSH
57909: LD_INT 27
57911: EQUAL
57912: IFFALSE 57922
// sAI := true ;
57914: LD_ADDR_EXP 90
57918: PUSH
57919: LD_INT 1
57921: ST_TO_ADDR
// if p3 = 28 then
57922: LD_VAR 0 3
57926: PUSH
57927: LD_INT 28
57929: EQUAL
57930: IFFALSE 57940
// sCargo := true ;
57932: LD_ADDR_EXP 93
57936: PUSH
57937: LD_INT 1
57939: ST_TO_ADDR
// if p3 = 29 then
57940: LD_VAR 0 3
57944: PUSH
57945: LD_INT 29
57947: EQUAL
57948: IFFALSE 57958
// sDLaser := true ;
57950: LD_ADDR_EXP 94
57954: PUSH
57955: LD_INT 1
57957: ST_TO_ADDR
// if p3 = 30 then
57958: LD_VAR 0 3
57962: PUSH
57963: LD_INT 30
57965: EQUAL
57966: IFFALSE 57976
// sExchange := true ;
57968: LD_ADDR_EXP 95
57972: PUSH
57973: LD_INT 1
57975: ST_TO_ADDR
// if p3 = 31 then
57976: LD_VAR 0 3
57980: PUSH
57981: LD_INT 31
57983: EQUAL
57984: IFFALSE 57994
// sFac := true ;
57986: LD_ADDR_EXP 96
57990: PUSH
57991: LD_INT 1
57993: ST_TO_ADDR
// if p3 = 32 then
57994: LD_VAR 0 3
57998: PUSH
57999: LD_INT 32
58001: EQUAL
58002: IFFALSE 58012
// sPower := true ;
58004: LD_ADDR_EXP 97
58008: PUSH
58009: LD_INT 1
58011: ST_TO_ADDR
// if p3 = 33 then
58012: LD_VAR 0 3
58016: PUSH
58017: LD_INT 33
58019: EQUAL
58020: IFFALSE 58030
// sRandom := true ;
58022: LD_ADDR_EXP 98
58026: PUSH
58027: LD_INT 1
58029: ST_TO_ADDR
// if p3 = 34 then
58030: LD_VAR 0 3
58034: PUSH
58035: LD_INT 34
58037: EQUAL
58038: IFFALSE 58048
// sShield := true ;
58040: LD_ADDR_EXP 99
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
// if p3 = 35 then
58048: LD_VAR 0 3
58052: PUSH
58053: LD_INT 35
58055: EQUAL
58056: IFFALSE 58066
// sTime := true ;
58058: LD_ADDR_EXP 100
58062: PUSH
58063: LD_INT 1
58065: ST_TO_ADDR
// if p3 = 36 then
58066: LD_VAR 0 3
58070: PUSH
58071: LD_INT 36
58073: EQUAL
58074: IFFALSE 58084
// sTools := true ;
58076: LD_ADDR_EXP 101
58080: PUSH
58081: LD_INT 1
58083: ST_TO_ADDR
// if p3 = 101 then
58084: LD_VAR 0 3
58088: PUSH
58089: LD_INT 101
58091: EQUAL
58092: IFFALSE 58102
// sSold := true ;
58094: LD_ADDR_EXP 66
58098: PUSH
58099: LD_INT 1
58101: ST_TO_ADDR
// if p3 = 102 then
58102: LD_VAR 0 3
58106: PUSH
58107: LD_INT 102
58109: EQUAL
58110: IFFALSE 58120
// sDiff := true ;
58112: LD_ADDR_EXP 67
58116: PUSH
58117: LD_INT 1
58119: ST_TO_ADDR
// if p3 = 103 then
58120: LD_VAR 0 3
58124: PUSH
58125: LD_INT 103
58127: EQUAL
58128: IFFALSE 58138
// sFog := true ;
58130: LD_ADDR_EXP 70
58134: PUSH
58135: LD_INT 1
58137: ST_TO_ADDR
// if p3 = 104 then
58138: LD_VAR 0 3
58142: PUSH
58143: LD_INT 104
58145: EQUAL
58146: IFFALSE 58156
// sReset := true ;
58148: LD_ADDR_EXP 71
58152: PUSH
58153: LD_INT 1
58155: ST_TO_ADDR
// if p3 = 105 then
58156: LD_VAR 0 3
58160: PUSH
58161: LD_INT 105
58163: EQUAL
58164: IFFALSE 58174
// sSun := true ;
58166: LD_ADDR_EXP 72
58170: PUSH
58171: LD_INT 1
58173: ST_TO_ADDR
// if p3 = 106 then
58174: LD_VAR 0 3
58178: PUSH
58179: LD_INT 106
58181: EQUAL
58182: IFFALSE 58192
// sTiger := true ;
58184: LD_ADDR_EXP 68
58188: PUSH
58189: LD_INT 1
58191: ST_TO_ADDR
// if p3 = 107 then
58192: LD_VAR 0 3
58196: PUSH
58197: LD_INT 107
58199: EQUAL
58200: IFFALSE 58210
// sBomb := true ;
58202: LD_ADDR_EXP 69
58206: PUSH
58207: LD_INT 1
58209: ST_TO_ADDR
// if p3 = 108 then
58210: LD_VAR 0 3
58214: PUSH
58215: LD_INT 108
58217: EQUAL
58218: IFFALSE 58228
// sWound := true ;
58220: LD_ADDR_EXP 77
58224: PUSH
58225: LD_INT 1
58227: ST_TO_ADDR
// if p3 = 109 then
58228: LD_VAR 0 3
58232: PUSH
58233: LD_INT 109
58235: EQUAL
58236: IFFALSE 58246
// sBetray := true ;
58238: LD_ADDR_EXP 81
58242: PUSH
58243: LD_INT 1
58245: ST_TO_ADDR
// if p3 = 110 then
58246: LD_VAR 0 3
58250: PUSH
58251: LD_INT 110
58253: EQUAL
58254: IFFALSE 58264
// sContamin := true ;
58256: LD_ADDR_EXP 82
58260: PUSH
58261: LD_INT 1
58263: ST_TO_ADDR
// if p3 = 111 then
58264: LD_VAR 0 3
58268: PUSH
58269: LD_INT 111
58271: EQUAL
58272: IFFALSE 58282
// sOil := true ;
58274: LD_ADDR_EXP 84
58278: PUSH
58279: LD_INT 1
58281: ST_TO_ADDR
// if p3 = 112 then
58282: LD_VAR 0 3
58286: PUSH
58287: LD_INT 112
58289: EQUAL
58290: IFFALSE 58300
// sStu := true ;
58292: LD_ADDR_EXP 88
58296: PUSH
58297: LD_INT 1
58299: ST_TO_ADDR
// if p3 = 113 then
58300: LD_VAR 0 3
58304: PUSH
58305: LD_INT 113
58307: EQUAL
58308: IFFALSE 58318
// sBazooka := true ;
58310: LD_ADDR_EXP 91
58314: PUSH
58315: LD_INT 1
58317: ST_TO_ADDR
// if p3 = 114 then
58318: LD_VAR 0 3
58322: PUSH
58323: LD_INT 114
58325: EQUAL
58326: IFFALSE 58336
// sMortar := true ;
58328: LD_ADDR_EXP 92
58332: PUSH
58333: LD_INT 1
58335: ST_TO_ADDR
// if p3 = 115 then
58336: LD_VAR 0 3
58340: PUSH
58341: LD_INT 115
58343: EQUAL
58344: IFFALSE 58354
// sRanger := true ;
58346: LD_ADDR_EXP 102
58350: PUSH
58351: LD_INT 1
58353: ST_TO_ADDR
// if p3 = 116 then
58354: LD_VAR 0 3
58358: PUSH
58359: LD_INT 116
58361: EQUAL
58362: IFFALSE 58372
// sComputer := true ;
58364: LD_ADDR_EXP 103
58368: PUSH
58369: LD_INT 1
58371: ST_TO_ADDR
// if p3 = 117 then
58372: LD_VAR 0 3
58376: PUSH
58377: LD_INT 117
58379: EQUAL
58380: IFFALSE 58390
// s30 := true ;
58382: LD_ADDR_EXP 104
58386: PUSH
58387: LD_INT 1
58389: ST_TO_ADDR
// if p3 = 118 then
58390: LD_VAR 0 3
58394: PUSH
58395: LD_INT 118
58397: EQUAL
58398: IFFALSE 58408
// s60 := true ;
58400: LD_ADDR_EXP 105
58404: PUSH
58405: LD_INT 1
58407: ST_TO_ADDR
// end ; if p2 = 101 then
58408: LD_VAR 0 2
58412: PUSH
58413: LD_INT 101
58415: EQUAL
58416: IFFALSE 58544
// begin case p3 of 1 :
58418: LD_VAR 0 3
58422: PUSH
58423: LD_INT 1
58425: DOUBLE
58426: EQUAL
58427: IFTRUE 58431
58429: GO 58438
58431: POP
// hHackUnlimitedResources ; 2 :
58432: CALL 70642 0 0
58436: GO 58544
58438: LD_INT 2
58440: DOUBLE
58441: EQUAL
58442: IFTRUE 58446
58444: GO 58453
58446: POP
// hHackSetLevel10 ; 3 :
58447: CALL 70775 0 0
58451: GO 58544
58453: LD_INT 3
58455: DOUBLE
58456: EQUAL
58457: IFTRUE 58461
58459: GO 58468
58461: POP
// hHackSetLevel10YourUnits ; 4 :
58462: CALL 70860 0 0
58466: GO 58544
58468: LD_INT 4
58470: DOUBLE
58471: EQUAL
58472: IFTRUE 58476
58474: GO 58483
58476: POP
// hHackInvincible ; 5 :
58477: CALL 71308 0 0
58481: GO 58544
58483: LD_INT 5
58485: DOUBLE
58486: EQUAL
58487: IFTRUE 58491
58489: GO 58498
58491: POP
// hHackInvisible ; 6 :
58492: CALL 71419 0 0
58496: GO 58544
58498: LD_INT 6
58500: DOUBLE
58501: EQUAL
58502: IFTRUE 58506
58504: GO 58513
58506: POP
// hHackChangeYourSide ; 7 :
58507: CALL 71476 0 0
58511: GO 58544
58513: LD_INT 7
58515: DOUBLE
58516: EQUAL
58517: IFTRUE 58521
58519: GO 58528
58521: POP
// hHackChangeUnitSide ; 8 :
58522: CALL 71518 0 0
58526: GO 58544
58528: LD_INT 8
58530: DOUBLE
58531: EQUAL
58532: IFTRUE 58536
58534: GO 58543
58536: POP
// hHackFog ; end ;
58537: CALL 71619 0 0
58541: GO 58544
58543: POP
// end ; end ;
58544: LD_VAR 0 7
58548: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
58549: GO 58551
58551: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
58552: LD_STRING initStreamRollete();
58554: PPUSH
58555: CALL_OW 559
// InitStreamMode ;
58559: CALL 58571 0 0
// DefineStreamItems ( false ) ;
58563: LD_INT 0
58565: PPUSH
58566: CALL 59035 0 1
// end ;
58570: END
// function InitStreamMode ; begin
58571: LD_INT 0
58573: PPUSH
// streamModeActive := false ;
58574: LD_ADDR_EXP 49
58578: PUSH
58579: LD_INT 0
58581: ST_TO_ADDR
// normalCounter := 36 ;
58582: LD_ADDR_EXP 50
58586: PUSH
58587: LD_INT 36
58589: ST_TO_ADDR
// hardcoreCounter := 18 ;
58590: LD_ADDR_EXP 51
58594: PUSH
58595: LD_INT 18
58597: ST_TO_ADDR
// sRocket := false ;
58598: LD_ADDR_EXP 54
58602: PUSH
58603: LD_INT 0
58605: ST_TO_ADDR
// sSpeed := false ;
58606: LD_ADDR_EXP 53
58610: PUSH
58611: LD_INT 0
58613: ST_TO_ADDR
// sEngine := false ;
58614: LD_ADDR_EXP 55
58618: PUSH
58619: LD_INT 0
58621: ST_TO_ADDR
// sSpec := false ;
58622: LD_ADDR_EXP 52
58626: PUSH
58627: LD_INT 0
58629: ST_TO_ADDR
// sLevel := false ;
58630: LD_ADDR_EXP 56
58634: PUSH
58635: LD_INT 0
58637: ST_TO_ADDR
// sArmoury := false ;
58638: LD_ADDR_EXP 57
58642: PUSH
58643: LD_INT 0
58645: ST_TO_ADDR
// sRadar := false ;
58646: LD_ADDR_EXP 58
58650: PUSH
58651: LD_INT 0
58653: ST_TO_ADDR
// sBunker := false ;
58654: LD_ADDR_EXP 59
58658: PUSH
58659: LD_INT 0
58661: ST_TO_ADDR
// sHack := false ;
58662: LD_ADDR_EXP 60
58666: PUSH
58667: LD_INT 0
58669: ST_TO_ADDR
// sFire := false ;
58670: LD_ADDR_EXP 61
58674: PUSH
58675: LD_INT 0
58677: ST_TO_ADDR
// sRefresh := false ;
58678: LD_ADDR_EXP 62
58682: PUSH
58683: LD_INT 0
58685: ST_TO_ADDR
// sExp := false ;
58686: LD_ADDR_EXP 63
58690: PUSH
58691: LD_INT 0
58693: ST_TO_ADDR
// sDepot := false ;
58694: LD_ADDR_EXP 64
58698: PUSH
58699: LD_INT 0
58701: ST_TO_ADDR
// sFlag := false ;
58702: LD_ADDR_EXP 65
58706: PUSH
58707: LD_INT 0
58709: ST_TO_ADDR
// sKamikadze := false ;
58710: LD_ADDR_EXP 73
58714: PUSH
58715: LD_INT 0
58717: ST_TO_ADDR
// sTroll := false ;
58718: LD_ADDR_EXP 74
58722: PUSH
58723: LD_INT 0
58725: ST_TO_ADDR
// sSlow := false ;
58726: LD_ADDR_EXP 75
58730: PUSH
58731: LD_INT 0
58733: ST_TO_ADDR
// sLack := false ;
58734: LD_ADDR_EXP 76
58738: PUSH
58739: LD_INT 0
58741: ST_TO_ADDR
// sTank := false ;
58742: LD_ADDR_EXP 78
58746: PUSH
58747: LD_INT 0
58749: ST_TO_ADDR
// sRemote := false ;
58750: LD_ADDR_EXP 79
58754: PUSH
58755: LD_INT 0
58757: ST_TO_ADDR
// sPowell := false ;
58758: LD_ADDR_EXP 80
58762: PUSH
58763: LD_INT 0
58765: ST_TO_ADDR
// sTeleport := false ;
58766: LD_ADDR_EXP 83
58770: PUSH
58771: LD_INT 0
58773: ST_TO_ADDR
// sOilTower := false ;
58774: LD_ADDR_EXP 85
58778: PUSH
58779: LD_INT 0
58781: ST_TO_ADDR
// sShovel := false ;
58782: LD_ADDR_EXP 86
58786: PUSH
58787: LD_INT 0
58789: ST_TO_ADDR
// sSheik := false ;
58790: LD_ADDR_EXP 87
58794: PUSH
58795: LD_INT 0
58797: ST_TO_ADDR
// sEarthquake := false ;
58798: LD_ADDR_EXP 89
58802: PUSH
58803: LD_INT 0
58805: ST_TO_ADDR
// sAI := false ;
58806: LD_ADDR_EXP 90
58810: PUSH
58811: LD_INT 0
58813: ST_TO_ADDR
// sCargo := false ;
58814: LD_ADDR_EXP 93
58818: PUSH
58819: LD_INT 0
58821: ST_TO_ADDR
// sDLaser := false ;
58822: LD_ADDR_EXP 94
58826: PUSH
58827: LD_INT 0
58829: ST_TO_ADDR
// sExchange := false ;
58830: LD_ADDR_EXP 95
58834: PUSH
58835: LD_INT 0
58837: ST_TO_ADDR
// sFac := false ;
58838: LD_ADDR_EXP 96
58842: PUSH
58843: LD_INT 0
58845: ST_TO_ADDR
// sPower := false ;
58846: LD_ADDR_EXP 97
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
// sRandom := false ;
58854: LD_ADDR_EXP 98
58858: PUSH
58859: LD_INT 0
58861: ST_TO_ADDR
// sShield := false ;
58862: LD_ADDR_EXP 99
58866: PUSH
58867: LD_INT 0
58869: ST_TO_ADDR
// sTime := false ;
58870: LD_ADDR_EXP 100
58874: PUSH
58875: LD_INT 0
58877: ST_TO_ADDR
// sTools := false ;
58878: LD_ADDR_EXP 101
58882: PUSH
58883: LD_INT 0
58885: ST_TO_ADDR
// sSold := false ;
58886: LD_ADDR_EXP 66
58890: PUSH
58891: LD_INT 0
58893: ST_TO_ADDR
// sDiff := false ;
58894: LD_ADDR_EXP 67
58898: PUSH
58899: LD_INT 0
58901: ST_TO_ADDR
// sFog := false ;
58902: LD_ADDR_EXP 70
58906: PUSH
58907: LD_INT 0
58909: ST_TO_ADDR
// sReset := false ;
58910: LD_ADDR_EXP 71
58914: PUSH
58915: LD_INT 0
58917: ST_TO_ADDR
// sSun := false ;
58918: LD_ADDR_EXP 72
58922: PUSH
58923: LD_INT 0
58925: ST_TO_ADDR
// sTiger := false ;
58926: LD_ADDR_EXP 68
58930: PUSH
58931: LD_INT 0
58933: ST_TO_ADDR
// sBomb := false ;
58934: LD_ADDR_EXP 69
58938: PUSH
58939: LD_INT 0
58941: ST_TO_ADDR
// sWound := false ;
58942: LD_ADDR_EXP 77
58946: PUSH
58947: LD_INT 0
58949: ST_TO_ADDR
// sBetray := false ;
58950: LD_ADDR_EXP 81
58954: PUSH
58955: LD_INT 0
58957: ST_TO_ADDR
// sContamin := false ;
58958: LD_ADDR_EXP 82
58962: PUSH
58963: LD_INT 0
58965: ST_TO_ADDR
// sOil := false ;
58966: LD_ADDR_EXP 84
58970: PUSH
58971: LD_INT 0
58973: ST_TO_ADDR
// sStu := false ;
58974: LD_ADDR_EXP 88
58978: PUSH
58979: LD_INT 0
58981: ST_TO_ADDR
// sBazooka := false ;
58982: LD_ADDR_EXP 91
58986: PUSH
58987: LD_INT 0
58989: ST_TO_ADDR
// sMortar := false ;
58990: LD_ADDR_EXP 92
58994: PUSH
58995: LD_INT 0
58997: ST_TO_ADDR
// sRanger := false ;
58998: LD_ADDR_EXP 102
59002: PUSH
59003: LD_INT 0
59005: ST_TO_ADDR
// sComputer := false ;
59006: LD_ADDR_EXP 103
59010: PUSH
59011: LD_INT 0
59013: ST_TO_ADDR
// s30 := false ;
59014: LD_ADDR_EXP 104
59018: PUSH
59019: LD_INT 0
59021: ST_TO_ADDR
// s60 := false ;
59022: LD_ADDR_EXP 105
59026: PUSH
59027: LD_INT 0
59029: ST_TO_ADDR
// end ;
59030: LD_VAR 0 1
59034: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
59035: LD_INT 0
59037: PPUSH
59038: PPUSH
59039: PPUSH
59040: PPUSH
59041: PPUSH
59042: PPUSH
59043: PPUSH
// result := [ ] ;
59044: LD_ADDR_VAR 0 2
59048: PUSH
59049: EMPTY
59050: ST_TO_ADDR
// if campaign_id = 1 then
59051: LD_OWVAR 69
59055: PUSH
59056: LD_INT 1
59058: EQUAL
59059: IFFALSE 62225
// begin case mission_number of 1 :
59061: LD_OWVAR 70
59065: PUSH
59066: LD_INT 1
59068: DOUBLE
59069: EQUAL
59070: IFTRUE 59074
59072: GO 59150
59074: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
59075: LD_ADDR_VAR 0 2
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: LD_INT 4
59085: PUSH
59086: LD_INT 11
59088: PUSH
59089: LD_INT 12
59091: PUSH
59092: LD_INT 15
59094: PUSH
59095: LD_INT 16
59097: PUSH
59098: LD_INT 22
59100: PUSH
59101: LD_INT 23
59103: PUSH
59104: LD_INT 26
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 101
59120: PUSH
59121: LD_INT 102
59123: PUSH
59124: LD_INT 106
59126: PUSH
59127: LD_INT 116
59129: PUSH
59130: LD_INT 117
59132: PUSH
59133: LD_INT 118
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: ST_TO_ADDR
59148: GO 62223
59150: LD_INT 2
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59158
59156: GO 59242
59158: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
59159: LD_ADDR_VAR 0 2
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 4
59169: PUSH
59170: LD_INT 11
59172: PUSH
59173: LD_INT 12
59175: PUSH
59176: LD_INT 15
59178: PUSH
59179: LD_INT 16
59181: PUSH
59182: LD_INT 22
59184: PUSH
59185: LD_INT 23
59187: PUSH
59188: LD_INT 26
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: LIST
59195: LIST
59196: LIST
59197: LIST
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 101
59204: PUSH
59205: LD_INT 102
59207: PUSH
59208: LD_INT 105
59210: PUSH
59211: LD_INT 106
59213: PUSH
59214: LD_INT 108
59216: PUSH
59217: LD_INT 116
59219: PUSH
59220: LD_INT 117
59222: PUSH
59223: LD_INT 118
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: LIST
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: ST_TO_ADDR
59240: GO 62223
59242: LD_INT 3
59244: DOUBLE
59245: EQUAL
59246: IFTRUE 59250
59248: GO 59338
59250: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 4
59261: PUSH
59262: LD_INT 5
59264: PUSH
59265: LD_INT 11
59267: PUSH
59268: LD_INT 12
59270: PUSH
59271: LD_INT 15
59273: PUSH
59274: LD_INT 16
59276: PUSH
59277: LD_INT 22
59279: PUSH
59280: LD_INT 26
59282: PUSH
59283: LD_INT 36
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 101
59300: PUSH
59301: LD_INT 102
59303: PUSH
59304: LD_INT 105
59306: PUSH
59307: LD_INT 106
59309: PUSH
59310: LD_INT 108
59312: PUSH
59313: LD_INT 116
59315: PUSH
59316: LD_INT 117
59318: PUSH
59319: LD_INT 118
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: ST_TO_ADDR
59336: GO 62223
59338: LD_INT 4
59340: DOUBLE
59341: EQUAL
59342: IFTRUE 59346
59344: GO 59442
59346: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
59347: LD_ADDR_VAR 0 2
59351: PUSH
59352: LD_INT 2
59354: PUSH
59355: LD_INT 4
59357: PUSH
59358: LD_INT 5
59360: PUSH
59361: LD_INT 8
59363: PUSH
59364: LD_INT 11
59366: PUSH
59367: LD_INT 12
59369: PUSH
59370: LD_INT 15
59372: PUSH
59373: LD_INT 16
59375: PUSH
59376: LD_INT 22
59378: PUSH
59379: LD_INT 23
59381: PUSH
59382: LD_INT 26
59384: PUSH
59385: LD_INT 36
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: PUSH
59402: LD_INT 101
59404: PUSH
59405: LD_INT 102
59407: PUSH
59408: LD_INT 105
59410: PUSH
59411: LD_INT 106
59413: PUSH
59414: LD_INT 108
59416: PUSH
59417: LD_INT 116
59419: PUSH
59420: LD_INT 117
59422: PUSH
59423: LD_INT 118
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: ST_TO_ADDR
59440: GO 62223
59442: LD_INT 5
59444: DOUBLE
59445: EQUAL
59446: IFTRUE 59450
59448: GO 59562
59450: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
59451: LD_ADDR_VAR 0 2
59455: PUSH
59456: LD_INT 2
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: LD_INT 5
59464: PUSH
59465: LD_INT 6
59467: PUSH
59468: LD_INT 8
59470: PUSH
59471: LD_INT 11
59473: PUSH
59474: LD_INT 12
59476: PUSH
59477: LD_INT 15
59479: PUSH
59480: LD_INT 16
59482: PUSH
59483: LD_INT 22
59485: PUSH
59486: LD_INT 23
59488: PUSH
59489: LD_INT 25
59491: PUSH
59492: LD_INT 26
59494: PUSH
59495: LD_INT 36
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 101
59516: PUSH
59517: LD_INT 102
59519: PUSH
59520: LD_INT 105
59522: PUSH
59523: LD_INT 106
59525: PUSH
59526: LD_INT 108
59528: PUSH
59529: LD_INT 109
59531: PUSH
59532: LD_INT 112
59534: PUSH
59535: LD_INT 116
59537: PUSH
59538: LD_INT 117
59540: PUSH
59541: LD_INT 118
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: ST_TO_ADDR
59560: GO 62223
59562: LD_INT 6
59564: DOUBLE
59565: EQUAL
59566: IFTRUE 59570
59568: GO 59702
59570: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
59571: LD_ADDR_VAR 0 2
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: LD_INT 4
59581: PUSH
59582: LD_INT 5
59584: PUSH
59585: LD_INT 6
59587: PUSH
59588: LD_INT 8
59590: PUSH
59591: LD_INT 11
59593: PUSH
59594: LD_INT 12
59596: PUSH
59597: LD_INT 15
59599: PUSH
59600: LD_INT 16
59602: PUSH
59603: LD_INT 20
59605: PUSH
59606: LD_INT 21
59608: PUSH
59609: LD_INT 22
59611: PUSH
59612: LD_INT 23
59614: PUSH
59615: LD_INT 25
59617: PUSH
59618: LD_INT 26
59620: PUSH
59621: LD_INT 30
59623: PUSH
59624: LD_INT 31
59626: PUSH
59627: LD_INT 32
59629: PUSH
59630: LD_INT 36
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: LIST
59645: LIST
59646: LIST
59647: LIST
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 101
59656: PUSH
59657: LD_INT 102
59659: PUSH
59660: LD_INT 105
59662: PUSH
59663: LD_INT 106
59665: PUSH
59666: LD_INT 108
59668: PUSH
59669: LD_INT 109
59671: PUSH
59672: LD_INT 112
59674: PUSH
59675: LD_INT 116
59677: PUSH
59678: LD_INT 117
59680: PUSH
59681: LD_INT 118
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: ST_TO_ADDR
59700: GO 62223
59702: LD_INT 7
59704: DOUBLE
59705: EQUAL
59706: IFTRUE 59710
59708: GO 59822
59710: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
59711: LD_ADDR_VAR 0 2
59715: PUSH
59716: LD_INT 2
59718: PUSH
59719: LD_INT 4
59721: PUSH
59722: LD_INT 5
59724: PUSH
59725: LD_INT 7
59727: PUSH
59728: LD_INT 11
59730: PUSH
59731: LD_INT 12
59733: PUSH
59734: LD_INT 15
59736: PUSH
59737: LD_INT 16
59739: PUSH
59740: LD_INT 20
59742: PUSH
59743: LD_INT 21
59745: PUSH
59746: LD_INT 22
59748: PUSH
59749: LD_INT 23
59751: PUSH
59752: LD_INT 25
59754: PUSH
59755: LD_INT 26
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: PUSH
59774: LD_INT 101
59776: PUSH
59777: LD_INT 102
59779: PUSH
59780: LD_INT 103
59782: PUSH
59783: LD_INT 105
59785: PUSH
59786: LD_INT 106
59788: PUSH
59789: LD_INT 108
59791: PUSH
59792: LD_INT 112
59794: PUSH
59795: LD_INT 116
59797: PUSH
59798: LD_INT 117
59800: PUSH
59801: LD_INT 118
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: ST_TO_ADDR
59820: GO 62223
59822: LD_INT 8
59824: DOUBLE
59825: EQUAL
59826: IFTRUE 59830
59828: GO 59970
59830: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
59831: LD_ADDR_VAR 0 2
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 4
59841: PUSH
59842: LD_INT 5
59844: PUSH
59845: LD_INT 6
59847: PUSH
59848: LD_INT 7
59850: PUSH
59851: LD_INT 8
59853: PUSH
59854: LD_INT 11
59856: PUSH
59857: LD_INT 12
59859: PUSH
59860: LD_INT 15
59862: PUSH
59863: LD_INT 16
59865: PUSH
59866: LD_INT 20
59868: PUSH
59869: LD_INT 21
59871: PUSH
59872: LD_INT 22
59874: PUSH
59875: LD_INT 23
59877: PUSH
59878: LD_INT 25
59880: PUSH
59881: LD_INT 26
59883: PUSH
59884: LD_INT 30
59886: PUSH
59887: LD_INT 31
59889: PUSH
59890: LD_INT 32
59892: PUSH
59893: LD_INT 36
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 101
59920: PUSH
59921: LD_INT 102
59923: PUSH
59924: LD_INT 103
59926: PUSH
59927: LD_INT 105
59929: PUSH
59930: LD_INT 106
59932: PUSH
59933: LD_INT 108
59935: PUSH
59936: LD_INT 109
59938: PUSH
59939: LD_INT 112
59941: PUSH
59942: LD_INT 116
59944: PUSH
59945: LD_INT 117
59947: PUSH
59948: LD_INT 118
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: ST_TO_ADDR
59968: GO 62223
59970: LD_INT 9
59972: DOUBLE
59973: EQUAL
59974: IFTRUE 59978
59976: GO 60126
59978: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
59979: LD_ADDR_VAR 0 2
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: LD_INT 4
59989: PUSH
59990: LD_INT 5
59992: PUSH
59993: LD_INT 6
59995: PUSH
59996: LD_INT 7
59998: PUSH
59999: LD_INT 8
60001: PUSH
60002: LD_INT 11
60004: PUSH
60005: LD_INT 12
60007: PUSH
60008: LD_INT 15
60010: PUSH
60011: LD_INT 16
60013: PUSH
60014: LD_INT 20
60016: PUSH
60017: LD_INT 21
60019: PUSH
60020: LD_INT 22
60022: PUSH
60023: LD_INT 23
60025: PUSH
60026: LD_INT 25
60028: PUSH
60029: LD_INT 26
60031: PUSH
60032: LD_INT 28
60034: PUSH
60035: LD_INT 30
60037: PUSH
60038: LD_INT 31
60040: PUSH
60041: LD_INT 32
60043: PUSH
60044: LD_INT 36
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 101
60072: PUSH
60073: LD_INT 102
60075: PUSH
60076: LD_INT 103
60078: PUSH
60079: LD_INT 105
60081: PUSH
60082: LD_INT 106
60084: PUSH
60085: LD_INT 108
60087: PUSH
60088: LD_INT 109
60090: PUSH
60091: LD_INT 112
60093: PUSH
60094: LD_INT 114
60096: PUSH
60097: LD_INT 116
60099: PUSH
60100: LD_INT 117
60102: PUSH
60103: LD_INT 118
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: ST_TO_ADDR
60124: GO 62223
60126: LD_INT 10
60128: DOUBLE
60129: EQUAL
60130: IFTRUE 60134
60132: GO 60330
60134: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
60135: LD_ADDR_VAR 0 2
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 4
60145: PUSH
60146: LD_INT 5
60148: PUSH
60149: LD_INT 6
60151: PUSH
60152: LD_INT 7
60154: PUSH
60155: LD_INT 8
60157: PUSH
60158: LD_INT 9
60160: PUSH
60161: LD_INT 10
60163: PUSH
60164: LD_INT 11
60166: PUSH
60167: LD_INT 12
60169: PUSH
60170: LD_INT 13
60172: PUSH
60173: LD_INT 14
60175: PUSH
60176: LD_INT 15
60178: PUSH
60179: LD_INT 16
60181: PUSH
60182: LD_INT 17
60184: PUSH
60185: LD_INT 18
60187: PUSH
60188: LD_INT 19
60190: PUSH
60191: LD_INT 20
60193: PUSH
60194: LD_INT 21
60196: PUSH
60197: LD_INT 22
60199: PUSH
60200: LD_INT 23
60202: PUSH
60203: LD_INT 24
60205: PUSH
60206: LD_INT 25
60208: PUSH
60209: LD_INT 26
60211: PUSH
60212: LD_INT 28
60214: PUSH
60215: LD_INT 30
60217: PUSH
60218: LD_INT 31
60220: PUSH
60221: LD_INT 32
60223: PUSH
60224: LD_INT 36
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 101
60260: PUSH
60261: LD_INT 102
60263: PUSH
60264: LD_INT 103
60266: PUSH
60267: LD_INT 104
60269: PUSH
60270: LD_INT 105
60272: PUSH
60273: LD_INT 106
60275: PUSH
60276: LD_INT 107
60278: PUSH
60279: LD_INT 108
60281: PUSH
60282: LD_INT 109
60284: PUSH
60285: LD_INT 110
60287: PUSH
60288: LD_INT 111
60290: PUSH
60291: LD_INT 112
60293: PUSH
60294: LD_INT 114
60296: PUSH
60297: LD_INT 116
60299: PUSH
60300: LD_INT 117
60302: PUSH
60303: LD_INT 118
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: ST_TO_ADDR
60328: GO 62223
60330: LD_INT 11
60332: DOUBLE
60333: EQUAL
60334: IFTRUE 60338
60336: GO 60542
60338: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
60339: LD_ADDR_VAR 0 2
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: LD_INT 4
60352: PUSH
60353: LD_INT 5
60355: PUSH
60356: LD_INT 6
60358: PUSH
60359: LD_INT 7
60361: PUSH
60362: LD_INT 8
60364: PUSH
60365: LD_INT 9
60367: PUSH
60368: LD_INT 10
60370: PUSH
60371: LD_INT 11
60373: PUSH
60374: LD_INT 12
60376: PUSH
60377: LD_INT 13
60379: PUSH
60380: LD_INT 14
60382: PUSH
60383: LD_INT 15
60385: PUSH
60386: LD_INT 16
60388: PUSH
60389: LD_INT 17
60391: PUSH
60392: LD_INT 18
60394: PUSH
60395: LD_INT 19
60397: PUSH
60398: LD_INT 20
60400: PUSH
60401: LD_INT 21
60403: PUSH
60404: LD_INT 22
60406: PUSH
60407: LD_INT 23
60409: PUSH
60410: LD_INT 24
60412: PUSH
60413: LD_INT 25
60415: PUSH
60416: LD_INT 26
60418: PUSH
60419: LD_INT 28
60421: PUSH
60422: LD_INT 30
60424: PUSH
60425: LD_INT 31
60427: PUSH
60428: LD_INT 32
60430: PUSH
60431: LD_INT 34
60433: PUSH
60434: LD_INT 36
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: PUSH
60470: LD_INT 101
60472: PUSH
60473: LD_INT 102
60475: PUSH
60476: LD_INT 103
60478: PUSH
60479: LD_INT 104
60481: PUSH
60482: LD_INT 105
60484: PUSH
60485: LD_INT 106
60487: PUSH
60488: LD_INT 107
60490: PUSH
60491: LD_INT 108
60493: PUSH
60494: LD_INT 109
60496: PUSH
60497: LD_INT 110
60499: PUSH
60500: LD_INT 111
60502: PUSH
60503: LD_INT 112
60505: PUSH
60506: LD_INT 114
60508: PUSH
60509: LD_INT 116
60511: PUSH
60512: LD_INT 117
60514: PUSH
60515: LD_INT 118
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: ST_TO_ADDR
60540: GO 62223
60542: LD_INT 12
60544: DOUBLE
60545: EQUAL
60546: IFTRUE 60550
60548: GO 60770
60550: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
60551: LD_ADDR_VAR 0 2
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: LD_INT 3
60564: PUSH
60565: LD_INT 4
60567: PUSH
60568: LD_INT 5
60570: PUSH
60571: LD_INT 6
60573: PUSH
60574: LD_INT 7
60576: PUSH
60577: LD_INT 8
60579: PUSH
60580: LD_INT 9
60582: PUSH
60583: LD_INT 10
60585: PUSH
60586: LD_INT 11
60588: PUSH
60589: LD_INT 12
60591: PUSH
60592: LD_INT 13
60594: PUSH
60595: LD_INT 14
60597: PUSH
60598: LD_INT 15
60600: PUSH
60601: LD_INT 16
60603: PUSH
60604: LD_INT 17
60606: PUSH
60607: LD_INT 18
60609: PUSH
60610: LD_INT 19
60612: PUSH
60613: LD_INT 20
60615: PUSH
60616: LD_INT 21
60618: PUSH
60619: LD_INT 22
60621: PUSH
60622: LD_INT 23
60624: PUSH
60625: LD_INT 24
60627: PUSH
60628: LD_INT 25
60630: PUSH
60631: LD_INT 26
60633: PUSH
60634: LD_INT 27
60636: PUSH
60637: LD_INT 28
60639: PUSH
60640: LD_INT 30
60642: PUSH
60643: LD_INT 31
60645: PUSH
60646: LD_INT 32
60648: PUSH
60649: LD_INT 33
60651: PUSH
60652: LD_INT 34
60654: PUSH
60655: LD_INT 36
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 101
60696: PUSH
60697: LD_INT 102
60699: PUSH
60700: LD_INT 103
60702: PUSH
60703: LD_INT 104
60705: PUSH
60706: LD_INT 105
60708: PUSH
60709: LD_INT 106
60711: PUSH
60712: LD_INT 107
60714: PUSH
60715: LD_INT 108
60717: PUSH
60718: LD_INT 109
60720: PUSH
60721: LD_INT 110
60723: PUSH
60724: LD_INT 111
60726: PUSH
60727: LD_INT 112
60729: PUSH
60730: LD_INT 113
60732: PUSH
60733: LD_INT 114
60735: PUSH
60736: LD_INT 116
60738: PUSH
60739: LD_INT 117
60741: PUSH
60742: LD_INT 118
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: ST_TO_ADDR
60768: GO 62223
60770: LD_INT 13
60772: DOUBLE
60773: EQUAL
60774: IFTRUE 60778
60776: GO 60986
60778: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
60779: LD_ADDR_VAR 0 2
60783: PUSH
60784: LD_INT 1
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 3
60792: PUSH
60793: LD_INT 4
60795: PUSH
60796: LD_INT 5
60798: PUSH
60799: LD_INT 8
60801: PUSH
60802: LD_INT 9
60804: PUSH
60805: LD_INT 10
60807: PUSH
60808: LD_INT 11
60810: PUSH
60811: LD_INT 12
60813: PUSH
60814: LD_INT 14
60816: PUSH
60817: LD_INT 15
60819: PUSH
60820: LD_INT 16
60822: PUSH
60823: LD_INT 17
60825: PUSH
60826: LD_INT 18
60828: PUSH
60829: LD_INT 19
60831: PUSH
60832: LD_INT 20
60834: PUSH
60835: LD_INT 21
60837: PUSH
60838: LD_INT 22
60840: PUSH
60841: LD_INT 23
60843: PUSH
60844: LD_INT 24
60846: PUSH
60847: LD_INT 25
60849: PUSH
60850: LD_INT 26
60852: PUSH
60853: LD_INT 27
60855: PUSH
60856: LD_INT 28
60858: PUSH
60859: LD_INT 30
60861: PUSH
60862: LD_INT 31
60864: PUSH
60865: LD_INT 32
60867: PUSH
60868: LD_INT 33
60870: PUSH
60871: LD_INT 34
60873: PUSH
60874: LD_INT 36
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: LIST
60899: LIST
60900: LIST
60901: LIST
60902: LIST
60903: LIST
60904: LIST
60905: LIST
60906: LIST
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 101
60912: PUSH
60913: LD_INT 102
60915: PUSH
60916: LD_INT 103
60918: PUSH
60919: LD_INT 104
60921: PUSH
60922: LD_INT 105
60924: PUSH
60925: LD_INT 106
60927: PUSH
60928: LD_INT 107
60930: PUSH
60931: LD_INT 108
60933: PUSH
60934: LD_INT 109
60936: PUSH
60937: LD_INT 110
60939: PUSH
60940: LD_INT 111
60942: PUSH
60943: LD_INT 112
60945: PUSH
60946: LD_INT 113
60948: PUSH
60949: LD_INT 114
60951: PUSH
60952: LD_INT 116
60954: PUSH
60955: LD_INT 117
60957: PUSH
60958: LD_INT 118
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: ST_TO_ADDR
60984: GO 62223
60986: LD_INT 14
60988: DOUBLE
60989: EQUAL
60990: IFTRUE 60994
60992: GO 61218
60994: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
60995: LD_ADDR_VAR 0 2
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 3
61008: PUSH
61009: LD_INT 4
61011: PUSH
61012: LD_INT 5
61014: PUSH
61015: LD_INT 6
61017: PUSH
61018: LD_INT 7
61020: PUSH
61021: LD_INT 8
61023: PUSH
61024: LD_INT 9
61026: PUSH
61027: LD_INT 10
61029: PUSH
61030: LD_INT 11
61032: PUSH
61033: LD_INT 12
61035: PUSH
61036: LD_INT 13
61038: PUSH
61039: LD_INT 14
61041: PUSH
61042: LD_INT 15
61044: PUSH
61045: LD_INT 16
61047: PUSH
61048: LD_INT 17
61050: PUSH
61051: LD_INT 18
61053: PUSH
61054: LD_INT 19
61056: PUSH
61057: LD_INT 20
61059: PUSH
61060: LD_INT 21
61062: PUSH
61063: LD_INT 22
61065: PUSH
61066: LD_INT 23
61068: PUSH
61069: LD_INT 24
61071: PUSH
61072: LD_INT 25
61074: PUSH
61075: LD_INT 26
61077: PUSH
61078: LD_INT 27
61080: PUSH
61081: LD_INT 28
61083: PUSH
61084: LD_INT 29
61086: PUSH
61087: LD_INT 30
61089: PUSH
61090: LD_INT 31
61092: PUSH
61093: LD_INT 32
61095: PUSH
61096: LD_INT 33
61098: PUSH
61099: LD_INT 34
61101: PUSH
61102: LD_INT 36
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 101
61144: PUSH
61145: LD_INT 102
61147: PUSH
61148: LD_INT 103
61150: PUSH
61151: LD_INT 104
61153: PUSH
61154: LD_INT 105
61156: PUSH
61157: LD_INT 106
61159: PUSH
61160: LD_INT 107
61162: PUSH
61163: LD_INT 108
61165: PUSH
61166: LD_INT 109
61168: PUSH
61169: LD_INT 110
61171: PUSH
61172: LD_INT 111
61174: PUSH
61175: LD_INT 112
61177: PUSH
61178: LD_INT 113
61180: PUSH
61181: LD_INT 114
61183: PUSH
61184: LD_INT 116
61186: PUSH
61187: LD_INT 117
61189: PUSH
61190: LD_INT 118
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: ST_TO_ADDR
61216: GO 62223
61218: LD_INT 15
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61226
61224: GO 61450
61226: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
61227: LD_ADDR_VAR 0 2
61231: PUSH
61232: LD_INT 1
61234: PUSH
61235: LD_INT 2
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: LD_INT 5
61246: PUSH
61247: LD_INT 6
61249: PUSH
61250: LD_INT 7
61252: PUSH
61253: LD_INT 8
61255: PUSH
61256: LD_INT 9
61258: PUSH
61259: LD_INT 10
61261: PUSH
61262: LD_INT 11
61264: PUSH
61265: LD_INT 12
61267: PUSH
61268: LD_INT 13
61270: PUSH
61271: LD_INT 14
61273: PUSH
61274: LD_INT 15
61276: PUSH
61277: LD_INT 16
61279: PUSH
61280: LD_INT 17
61282: PUSH
61283: LD_INT 18
61285: PUSH
61286: LD_INT 19
61288: PUSH
61289: LD_INT 20
61291: PUSH
61292: LD_INT 21
61294: PUSH
61295: LD_INT 22
61297: PUSH
61298: LD_INT 23
61300: PUSH
61301: LD_INT 24
61303: PUSH
61304: LD_INT 25
61306: PUSH
61307: LD_INT 26
61309: PUSH
61310: LD_INT 27
61312: PUSH
61313: LD_INT 28
61315: PUSH
61316: LD_INT 29
61318: PUSH
61319: LD_INT 30
61321: PUSH
61322: LD_INT 31
61324: PUSH
61325: LD_INT 32
61327: PUSH
61328: LD_INT 33
61330: PUSH
61331: LD_INT 34
61333: PUSH
61334: LD_INT 36
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 101
61376: PUSH
61377: LD_INT 102
61379: PUSH
61380: LD_INT 103
61382: PUSH
61383: LD_INT 104
61385: PUSH
61386: LD_INT 105
61388: PUSH
61389: LD_INT 106
61391: PUSH
61392: LD_INT 107
61394: PUSH
61395: LD_INT 108
61397: PUSH
61398: LD_INT 109
61400: PUSH
61401: LD_INT 110
61403: PUSH
61404: LD_INT 111
61406: PUSH
61407: LD_INT 112
61409: PUSH
61410: LD_INT 113
61412: PUSH
61413: LD_INT 114
61415: PUSH
61416: LD_INT 116
61418: PUSH
61419: LD_INT 117
61421: PUSH
61422: LD_INT 118
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: LIST
61440: LIST
61441: LIST
61442: LIST
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: ST_TO_ADDR
61448: GO 62223
61450: LD_INT 16
61452: DOUBLE
61453: EQUAL
61454: IFTRUE 61458
61456: GO 61594
61458: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
61459: LD_ADDR_VAR 0 2
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: LD_INT 5
61472: PUSH
61473: LD_INT 7
61475: PUSH
61476: LD_INT 11
61478: PUSH
61479: LD_INT 12
61481: PUSH
61482: LD_INT 15
61484: PUSH
61485: LD_INT 16
61487: PUSH
61488: LD_INT 20
61490: PUSH
61491: LD_INT 21
61493: PUSH
61494: LD_INT 22
61496: PUSH
61497: LD_INT 23
61499: PUSH
61500: LD_INT 25
61502: PUSH
61503: LD_INT 26
61505: PUSH
61506: LD_INT 30
61508: PUSH
61509: LD_INT 31
61511: PUSH
61512: LD_INT 32
61514: PUSH
61515: LD_INT 33
61517: PUSH
61518: LD_INT 34
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 101
61544: PUSH
61545: LD_INT 102
61547: PUSH
61548: LD_INT 103
61550: PUSH
61551: LD_INT 106
61553: PUSH
61554: LD_INT 108
61556: PUSH
61557: LD_INT 112
61559: PUSH
61560: LD_INT 113
61562: PUSH
61563: LD_INT 114
61565: PUSH
61566: LD_INT 116
61568: PUSH
61569: LD_INT 117
61571: PUSH
61572: LD_INT 118
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: ST_TO_ADDR
61592: GO 62223
61594: LD_INT 17
61596: DOUBLE
61597: EQUAL
61598: IFTRUE 61602
61600: GO 61826
61602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
61603: LD_ADDR_VAR 0 2
61607: PUSH
61608: LD_INT 1
61610: PUSH
61611: LD_INT 2
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: LD_INT 4
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: LD_INT 6
61625: PUSH
61626: LD_INT 7
61628: PUSH
61629: LD_INT 8
61631: PUSH
61632: LD_INT 9
61634: PUSH
61635: LD_INT 10
61637: PUSH
61638: LD_INT 11
61640: PUSH
61641: LD_INT 12
61643: PUSH
61644: LD_INT 13
61646: PUSH
61647: LD_INT 14
61649: PUSH
61650: LD_INT 15
61652: PUSH
61653: LD_INT 16
61655: PUSH
61656: LD_INT 17
61658: PUSH
61659: LD_INT 18
61661: PUSH
61662: LD_INT 19
61664: PUSH
61665: LD_INT 20
61667: PUSH
61668: LD_INT 21
61670: PUSH
61671: LD_INT 22
61673: PUSH
61674: LD_INT 23
61676: PUSH
61677: LD_INT 24
61679: PUSH
61680: LD_INT 25
61682: PUSH
61683: LD_INT 26
61685: PUSH
61686: LD_INT 27
61688: PUSH
61689: LD_INT 28
61691: PUSH
61692: LD_INT 29
61694: PUSH
61695: LD_INT 30
61697: PUSH
61698: LD_INT 31
61700: PUSH
61701: LD_INT 32
61703: PUSH
61704: LD_INT 33
61706: PUSH
61707: LD_INT 34
61709: PUSH
61710: LD_INT 36
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 101
61752: PUSH
61753: LD_INT 102
61755: PUSH
61756: LD_INT 103
61758: PUSH
61759: LD_INT 104
61761: PUSH
61762: LD_INT 105
61764: PUSH
61765: LD_INT 106
61767: PUSH
61768: LD_INT 107
61770: PUSH
61771: LD_INT 108
61773: PUSH
61774: LD_INT 109
61776: PUSH
61777: LD_INT 110
61779: PUSH
61780: LD_INT 111
61782: PUSH
61783: LD_INT 112
61785: PUSH
61786: LD_INT 113
61788: PUSH
61789: LD_INT 114
61791: PUSH
61792: LD_INT 116
61794: PUSH
61795: LD_INT 117
61797: PUSH
61798: LD_INT 118
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: ST_TO_ADDR
61824: GO 62223
61826: LD_INT 18
61828: DOUBLE
61829: EQUAL
61830: IFTRUE 61834
61832: GO 61982
61834: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
61835: LD_ADDR_VAR 0 2
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 4
61845: PUSH
61846: LD_INT 5
61848: PUSH
61849: LD_INT 7
61851: PUSH
61852: LD_INT 11
61854: PUSH
61855: LD_INT 12
61857: PUSH
61858: LD_INT 15
61860: PUSH
61861: LD_INT 16
61863: PUSH
61864: LD_INT 20
61866: PUSH
61867: LD_INT 21
61869: PUSH
61870: LD_INT 22
61872: PUSH
61873: LD_INT 23
61875: PUSH
61876: LD_INT 25
61878: PUSH
61879: LD_INT 26
61881: PUSH
61882: LD_INT 30
61884: PUSH
61885: LD_INT 31
61887: PUSH
61888: LD_INT 32
61890: PUSH
61891: LD_INT 33
61893: PUSH
61894: LD_INT 34
61896: PUSH
61897: LD_INT 35
61899: PUSH
61900: LD_INT 36
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 101
61928: PUSH
61929: LD_INT 102
61931: PUSH
61932: LD_INT 103
61934: PUSH
61935: LD_INT 106
61937: PUSH
61938: LD_INT 108
61940: PUSH
61941: LD_INT 112
61943: PUSH
61944: LD_INT 113
61946: PUSH
61947: LD_INT 114
61949: PUSH
61950: LD_INT 115
61952: PUSH
61953: LD_INT 116
61955: PUSH
61956: LD_INT 117
61958: PUSH
61959: LD_INT 118
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: LIST
61966: LIST
61967: LIST
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: ST_TO_ADDR
61980: GO 62223
61982: LD_INT 19
61984: DOUBLE
61985: EQUAL
61986: IFTRUE 61990
61988: GO 62222
61990: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
61991: LD_ADDR_VAR 0 2
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: LD_INT 3
62004: PUSH
62005: LD_INT 4
62007: PUSH
62008: LD_INT 5
62010: PUSH
62011: LD_INT 6
62013: PUSH
62014: LD_INT 7
62016: PUSH
62017: LD_INT 8
62019: PUSH
62020: LD_INT 9
62022: PUSH
62023: LD_INT 10
62025: PUSH
62026: LD_INT 11
62028: PUSH
62029: LD_INT 12
62031: PUSH
62032: LD_INT 13
62034: PUSH
62035: LD_INT 14
62037: PUSH
62038: LD_INT 15
62040: PUSH
62041: LD_INT 16
62043: PUSH
62044: LD_INT 17
62046: PUSH
62047: LD_INT 18
62049: PUSH
62050: LD_INT 19
62052: PUSH
62053: LD_INT 20
62055: PUSH
62056: LD_INT 21
62058: PUSH
62059: LD_INT 22
62061: PUSH
62062: LD_INT 23
62064: PUSH
62065: LD_INT 24
62067: PUSH
62068: LD_INT 25
62070: PUSH
62071: LD_INT 26
62073: PUSH
62074: LD_INT 27
62076: PUSH
62077: LD_INT 28
62079: PUSH
62080: LD_INT 29
62082: PUSH
62083: LD_INT 30
62085: PUSH
62086: LD_INT 31
62088: PUSH
62089: LD_INT 32
62091: PUSH
62092: LD_INT 33
62094: PUSH
62095: LD_INT 34
62097: PUSH
62098: LD_INT 35
62100: PUSH
62101: LD_INT 36
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: LIST
62136: LIST
62137: LIST
62138: LIST
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 101
62144: PUSH
62145: LD_INT 102
62147: PUSH
62148: LD_INT 103
62150: PUSH
62151: LD_INT 104
62153: PUSH
62154: LD_INT 105
62156: PUSH
62157: LD_INT 106
62159: PUSH
62160: LD_INT 107
62162: PUSH
62163: LD_INT 108
62165: PUSH
62166: LD_INT 109
62168: PUSH
62169: LD_INT 110
62171: PUSH
62172: LD_INT 111
62174: PUSH
62175: LD_INT 112
62177: PUSH
62178: LD_INT 113
62180: PUSH
62181: LD_INT 114
62183: PUSH
62184: LD_INT 115
62186: PUSH
62187: LD_INT 116
62189: PUSH
62190: LD_INT 117
62192: PUSH
62193: LD_INT 118
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: ST_TO_ADDR
62220: GO 62223
62222: POP
// end else
62223: GO 62454
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
62225: LD_ADDR_VAR 0 2
62229: PUSH
62230: LD_INT 1
62232: PUSH
62233: LD_INT 2
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: LD_INT 4
62241: PUSH
62242: LD_INT 5
62244: PUSH
62245: LD_INT 6
62247: PUSH
62248: LD_INT 7
62250: PUSH
62251: LD_INT 8
62253: PUSH
62254: LD_INT 9
62256: PUSH
62257: LD_INT 10
62259: PUSH
62260: LD_INT 11
62262: PUSH
62263: LD_INT 12
62265: PUSH
62266: LD_INT 13
62268: PUSH
62269: LD_INT 14
62271: PUSH
62272: LD_INT 15
62274: PUSH
62275: LD_INT 16
62277: PUSH
62278: LD_INT 17
62280: PUSH
62281: LD_INT 18
62283: PUSH
62284: LD_INT 19
62286: PUSH
62287: LD_INT 20
62289: PUSH
62290: LD_INT 21
62292: PUSH
62293: LD_INT 22
62295: PUSH
62296: LD_INT 23
62298: PUSH
62299: LD_INT 24
62301: PUSH
62302: LD_INT 25
62304: PUSH
62305: LD_INT 26
62307: PUSH
62308: LD_INT 27
62310: PUSH
62311: LD_INT 28
62313: PUSH
62314: LD_INT 29
62316: PUSH
62317: LD_INT 30
62319: PUSH
62320: LD_INT 31
62322: PUSH
62323: LD_INT 32
62325: PUSH
62326: LD_INT 33
62328: PUSH
62329: LD_INT 34
62331: PUSH
62332: LD_INT 35
62334: PUSH
62335: LD_INT 36
62337: PUSH
62338: EMPTY
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 101
62378: PUSH
62379: LD_INT 102
62381: PUSH
62382: LD_INT 103
62384: PUSH
62385: LD_INT 104
62387: PUSH
62388: LD_INT 105
62390: PUSH
62391: LD_INT 106
62393: PUSH
62394: LD_INT 107
62396: PUSH
62397: LD_INT 108
62399: PUSH
62400: LD_INT 109
62402: PUSH
62403: LD_INT 110
62405: PUSH
62406: LD_INT 111
62408: PUSH
62409: LD_INT 112
62411: PUSH
62412: LD_INT 113
62414: PUSH
62415: LD_INT 114
62417: PUSH
62418: LD_INT 115
62420: PUSH
62421: LD_INT 116
62423: PUSH
62424: LD_INT 117
62426: PUSH
62427: LD_INT 118
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: PUSH
62450: EMPTY
62451: LIST
62452: LIST
62453: ST_TO_ADDR
// if result then
62454: LD_VAR 0 2
62458: IFFALSE 63244
// begin normal :=  ;
62460: LD_ADDR_VAR 0 5
62464: PUSH
62465: LD_STRING 
62467: ST_TO_ADDR
// hardcore :=  ;
62468: LD_ADDR_VAR 0 6
62472: PUSH
62473: LD_STRING 
62475: ST_TO_ADDR
// active :=  ;
62476: LD_ADDR_VAR 0 7
62480: PUSH
62481: LD_STRING 
62483: ST_TO_ADDR
// for i = 1 to normalCounter do
62484: LD_ADDR_VAR 0 8
62488: PUSH
62489: DOUBLE
62490: LD_INT 1
62492: DEC
62493: ST_TO_ADDR
62494: LD_EXP 50
62498: PUSH
62499: FOR_TO
62500: IFFALSE 62601
// begin tmp := 0 ;
62502: LD_ADDR_VAR 0 3
62506: PUSH
62507: LD_STRING 0
62509: ST_TO_ADDR
// if result [ 1 ] then
62510: LD_VAR 0 2
62514: PUSH
62515: LD_INT 1
62517: ARRAY
62518: IFFALSE 62583
// if result [ 1 ] [ 1 ] = i then
62520: LD_VAR 0 2
62524: PUSH
62525: LD_INT 1
62527: ARRAY
62528: PUSH
62529: LD_INT 1
62531: ARRAY
62532: PUSH
62533: LD_VAR 0 8
62537: EQUAL
62538: IFFALSE 62583
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
62540: LD_ADDR_VAR 0 2
62544: PUSH
62545: LD_VAR 0 2
62549: PPUSH
62550: LD_INT 1
62552: PPUSH
62553: LD_VAR 0 2
62557: PUSH
62558: LD_INT 1
62560: ARRAY
62561: PPUSH
62562: LD_INT 1
62564: PPUSH
62565: CALL_OW 3
62569: PPUSH
62570: CALL_OW 1
62574: ST_TO_ADDR
// tmp := 1 ;
62575: LD_ADDR_VAR 0 3
62579: PUSH
62580: LD_STRING 1
62582: ST_TO_ADDR
// end ; normal := normal & tmp ;
62583: LD_ADDR_VAR 0 5
62587: PUSH
62588: LD_VAR 0 5
62592: PUSH
62593: LD_VAR 0 3
62597: STR
62598: ST_TO_ADDR
// end ;
62599: GO 62499
62601: POP
62602: POP
// for i = 1 to hardcoreCounter do
62603: LD_ADDR_VAR 0 8
62607: PUSH
62608: DOUBLE
62609: LD_INT 1
62611: DEC
62612: ST_TO_ADDR
62613: LD_EXP 51
62617: PUSH
62618: FOR_TO
62619: IFFALSE 62724
// begin tmp := 0 ;
62621: LD_ADDR_VAR 0 3
62625: PUSH
62626: LD_STRING 0
62628: ST_TO_ADDR
// if result [ 2 ] then
62629: LD_VAR 0 2
62633: PUSH
62634: LD_INT 2
62636: ARRAY
62637: IFFALSE 62706
// if result [ 2 ] [ 1 ] = 100 + i then
62639: LD_VAR 0 2
62643: PUSH
62644: LD_INT 2
62646: ARRAY
62647: PUSH
62648: LD_INT 1
62650: ARRAY
62651: PUSH
62652: LD_INT 100
62654: PUSH
62655: LD_VAR 0 8
62659: PLUS
62660: EQUAL
62661: IFFALSE 62706
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
62663: LD_ADDR_VAR 0 2
62667: PUSH
62668: LD_VAR 0 2
62672: PPUSH
62673: LD_INT 2
62675: PPUSH
62676: LD_VAR 0 2
62680: PUSH
62681: LD_INT 2
62683: ARRAY
62684: PPUSH
62685: LD_INT 1
62687: PPUSH
62688: CALL_OW 3
62692: PPUSH
62693: CALL_OW 1
62697: ST_TO_ADDR
// tmp := 1 ;
62698: LD_ADDR_VAR 0 3
62702: PUSH
62703: LD_STRING 1
62705: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
62706: LD_ADDR_VAR 0 6
62710: PUSH
62711: LD_VAR 0 6
62715: PUSH
62716: LD_VAR 0 3
62720: STR
62721: ST_TO_ADDR
// end ;
62722: GO 62618
62724: POP
62725: POP
// if isGameLoad then
62726: LD_VAR 0 1
62730: IFFALSE 63205
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
62732: LD_ADDR_VAR 0 4
62736: PUSH
62737: LD_EXP 54
62741: PUSH
62742: LD_EXP 53
62746: PUSH
62747: LD_EXP 55
62751: PUSH
62752: LD_EXP 52
62756: PUSH
62757: LD_EXP 56
62761: PUSH
62762: LD_EXP 57
62766: PUSH
62767: LD_EXP 58
62771: PUSH
62772: LD_EXP 59
62776: PUSH
62777: LD_EXP 60
62781: PUSH
62782: LD_EXP 61
62786: PUSH
62787: LD_EXP 62
62791: PUSH
62792: LD_EXP 63
62796: PUSH
62797: LD_EXP 64
62801: PUSH
62802: LD_EXP 65
62806: PUSH
62807: LD_EXP 73
62811: PUSH
62812: LD_EXP 74
62816: PUSH
62817: LD_EXP 75
62821: PUSH
62822: LD_EXP 76
62826: PUSH
62827: LD_EXP 78
62831: PUSH
62832: LD_EXP 79
62836: PUSH
62837: LD_EXP 80
62841: PUSH
62842: LD_EXP 83
62846: PUSH
62847: LD_EXP 85
62851: PUSH
62852: LD_EXP 86
62856: PUSH
62857: LD_EXP 87
62861: PUSH
62862: LD_EXP 89
62866: PUSH
62867: LD_EXP 90
62871: PUSH
62872: LD_EXP 93
62876: PUSH
62877: LD_EXP 94
62881: PUSH
62882: LD_EXP 95
62886: PUSH
62887: LD_EXP 96
62891: PUSH
62892: LD_EXP 97
62896: PUSH
62897: LD_EXP 98
62901: PUSH
62902: LD_EXP 99
62906: PUSH
62907: LD_EXP 100
62911: PUSH
62912: LD_EXP 101
62916: PUSH
62917: LD_EXP 66
62921: PUSH
62922: LD_EXP 67
62926: PUSH
62927: LD_EXP 70
62931: PUSH
62932: LD_EXP 71
62936: PUSH
62937: LD_EXP 72
62941: PUSH
62942: LD_EXP 68
62946: PUSH
62947: LD_EXP 69
62951: PUSH
62952: LD_EXP 77
62956: PUSH
62957: LD_EXP 81
62961: PUSH
62962: LD_EXP 82
62966: PUSH
62967: LD_EXP 84
62971: PUSH
62972: LD_EXP 88
62976: PUSH
62977: LD_EXP 91
62981: PUSH
62982: LD_EXP 92
62986: PUSH
62987: LD_EXP 102
62991: PUSH
62992: LD_EXP 103
62996: PUSH
62997: LD_EXP 104
63001: PUSH
63002: LD_EXP 105
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: ST_TO_ADDR
// tmp :=  ;
63063: LD_ADDR_VAR 0 3
63067: PUSH
63068: LD_STRING 
63070: ST_TO_ADDR
// for i = 1 to normalCounter do
63071: LD_ADDR_VAR 0 8
63075: PUSH
63076: DOUBLE
63077: LD_INT 1
63079: DEC
63080: ST_TO_ADDR
63081: LD_EXP 50
63085: PUSH
63086: FOR_TO
63087: IFFALSE 63123
// begin if flags [ i ] then
63089: LD_VAR 0 4
63093: PUSH
63094: LD_VAR 0 8
63098: ARRAY
63099: IFFALSE 63121
// tmp := tmp & i & ; ;
63101: LD_ADDR_VAR 0 3
63105: PUSH
63106: LD_VAR 0 3
63110: PUSH
63111: LD_VAR 0 8
63115: STR
63116: PUSH
63117: LD_STRING ;
63119: STR
63120: ST_TO_ADDR
// end ;
63121: GO 63086
63123: POP
63124: POP
// for i = 1 to hardcoreCounter do
63125: LD_ADDR_VAR 0 8
63129: PUSH
63130: DOUBLE
63131: LD_INT 1
63133: DEC
63134: ST_TO_ADDR
63135: LD_EXP 51
63139: PUSH
63140: FOR_TO
63141: IFFALSE 63187
// begin if flags [ normalCounter + i ] then
63143: LD_VAR 0 4
63147: PUSH
63148: LD_EXP 50
63152: PUSH
63153: LD_VAR 0 8
63157: PLUS
63158: ARRAY
63159: IFFALSE 63185
// tmp := tmp & ( 100 + i ) & ; ;
63161: LD_ADDR_VAR 0 3
63165: PUSH
63166: LD_VAR 0 3
63170: PUSH
63171: LD_INT 100
63173: PUSH
63174: LD_VAR 0 8
63178: PLUS
63179: STR
63180: PUSH
63181: LD_STRING ;
63183: STR
63184: ST_TO_ADDR
// end ;
63185: GO 63140
63187: POP
63188: POP
// if tmp then
63189: LD_VAR 0 3
63193: IFFALSE 63205
// active := tmp ;
63195: LD_ADDR_VAR 0 7
63199: PUSH
63200: LD_VAR 0 3
63204: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
63205: LD_STRING getStreamItemsFromMission("
63207: PUSH
63208: LD_VAR 0 5
63212: STR
63213: PUSH
63214: LD_STRING ","
63216: STR
63217: PUSH
63218: LD_VAR 0 6
63222: STR
63223: PUSH
63224: LD_STRING ","
63226: STR
63227: PUSH
63228: LD_VAR 0 7
63232: STR
63233: PUSH
63234: LD_STRING ")
63236: STR
63237: PPUSH
63238: CALL_OW 559
// end else
63242: GO 63251
// ToLua ( getStreamItemsFromMission("","","") ) ;
63244: LD_STRING getStreamItemsFromMission("","","")
63246: PPUSH
63247: CALL_OW 559
// end ;
63251: LD_VAR 0 2
63255: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
63256: LD_EXP 49
63260: PUSH
63261: LD_EXP 54
63265: AND
63266: IFFALSE 63390
63268: GO 63270
63270: DISABLE
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
// begin enable ;
63275: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
63276: LD_ADDR_VAR 0 2
63280: PUSH
63281: LD_INT 22
63283: PUSH
63284: LD_OWVAR 2
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: LD_INT 34
63298: PUSH
63299: LD_INT 7
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: PUSH
63306: LD_INT 34
63308: PUSH
63309: LD_INT 45
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 34
63318: PUSH
63319: LD_INT 28
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 34
63328: PUSH
63329: LD_INT 47
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PPUSH
63347: CALL_OW 69
63351: ST_TO_ADDR
// if not tmp then
63352: LD_VAR 0 2
63356: NOT
63357: IFFALSE 63361
// exit ;
63359: GO 63390
// for i in tmp do
63361: LD_ADDR_VAR 0 1
63365: PUSH
63366: LD_VAR 0 2
63370: PUSH
63371: FOR_IN
63372: IFFALSE 63388
// begin SetLives ( i , 0 ) ;
63374: LD_VAR 0 1
63378: PPUSH
63379: LD_INT 0
63381: PPUSH
63382: CALL_OW 234
// end ;
63386: GO 63371
63388: POP
63389: POP
// end ;
63390: PPOPN 2
63392: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
63393: LD_EXP 49
63397: PUSH
63398: LD_EXP 55
63402: AND
63403: IFFALSE 63487
63405: GO 63407
63407: DISABLE
63408: LD_INT 0
63410: PPUSH
63411: PPUSH
// begin enable ;
63412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
63413: LD_ADDR_VAR 0 2
63417: PUSH
63418: LD_INT 22
63420: PUSH
63421: LD_OWVAR 2
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 32
63432: PUSH
63433: LD_INT 3
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PPUSH
63444: CALL_OW 69
63448: ST_TO_ADDR
// if not tmp then
63449: LD_VAR 0 2
63453: NOT
63454: IFFALSE 63458
// exit ;
63456: GO 63487
// for i in tmp do
63458: LD_ADDR_VAR 0 1
63462: PUSH
63463: LD_VAR 0 2
63467: PUSH
63468: FOR_IN
63469: IFFALSE 63485
// begin SetLives ( i , 0 ) ;
63471: LD_VAR 0 1
63475: PPUSH
63476: LD_INT 0
63478: PPUSH
63479: CALL_OW 234
// end ;
63483: GO 63468
63485: POP
63486: POP
// end ;
63487: PPOPN 2
63489: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
63490: LD_EXP 49
63494: PUSH
63495: LD_EXP 52
63499: AND
63500: IFFALSE 63593
63502: GO 63504
63504: DISABLE
63505: LD_INT 0
63507: PPUSH
// begin enable ;
63508: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
63509: LD_ADDR_VAR 0 1
63513: PUSH
63514: LD_INT 22
63516: PUSH
63517: LD_OWVAR 2
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 2
63528: PUSH
63529: LD_INT 25
63531: PUSH
63532: LD_INT 5
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 25
63541: PUSH
63542: LD_INT 9
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 25
63551: PUSH
63552: LD_INT 8
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PPUSH
63569: CALL_OW 69
63573: PUSH
63574: FOR_IN
63575: IFFALSE 63591
// begin SetClass ( i , 1 ) ;
63577: LD_VAR 0 1
63581: PPUSH
63582: LD_INT 1
63584: PPUSH
63585: CALL_OW 336
// end ;
63589: GO 63574
63591: POP
63592: POP
// end ;
63593: PPOPN 1
63595: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
63596: LD_EXP 49
63600: PUSH
63601: LD_EXP 53
63605: AND
63606: PUSH
63607: LD_OWVAR 65
63611: PUSH
63612: LD_INT 7
63614: LESS
63615: AND
63616: IFFALSE 63630
63618: GO 63620
63620: DISABLE
// begin enable ;
63621: ENABLE
// game_speed := 7 ;
63622: LD_ADDR_OWVAR 65
63626: PUSH
63627: LD_INT 7
63629: ST_TO_ADDR
// end ;
63630: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
63631: LD_EXP 49
63635: PUSH
63636: LD_EXP 56
63640: AND
63641: IFFALSE 63843
63643: GO 63645
63645: DISABLE
63646: LD_INT 0
63648: PPUSH
63649: PPUSH
63650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
63651: LD_ADDR_VAR 0 3
63655: PUSH
63656: LD_INT 81
63658: PUSH
63659: LD_OWVAR 2
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 21
63670: PUSH
63671: LD_INT 1
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PPUSH
63682: CALL_OW 69
63686: ST_TO_ADDR
// if not tmp then
63687: LD_VAR 0 3
63691: NOT
63692: IFFALSE 63696
// exit ;
63694: GO 63843
// if tmp > 5 then
63696: LD_VAR 0 3
63700: PUSH
63701: LD_INT 5
63703: GREATER
63704: IFFALSE 63716
// k := 5 else
63706: LD_ADDR_VAR 0 2
63710: PUSH
63711: LD_INT 5
63713: ST_TO_ADDR
63714: GO 63726
// k := tmp ;
63716: LD_ADDR_VAR 0 2
63720: PUSH
63721: LD_VAR 0 3
63725: ST_TO_ADDR
// for i := 1 to k do
63726: LD_ADDR_VAR 0 1
63730: PUSH
63731: DOUBLE
63732: LD_INT 1
63734: DEC
63735: ST_TO_ADDR
63736: LD_VAR 0 2
63740: PUSH
63741: FOR_TO
63742: IFFALSE 63841
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
63744: LD_VAR 0 3
63748: PUSH
63749: LD_VAR 0 1
63753: ARRAY
63754: PPUSH
63755: LD_VAR 0 1
63759: PUSH
63760: LD_INT 4
63762: MOD
63763: PUSH
63764: LD_INT 1
63766: PLUS
63767: PPUSH
63768: CALL_OW 259
63772: PUSH
63773: LD_INT 10
63775: LESS
63776: IFFALSE 63839
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
63778: LD_VAR 0 3
63782: PUSH
63783: LD_VAR 0 1
63787: ARRAY
63788: PPUSH
63789: LD_VAR 0 1
63793: PUSH
63794: LD_INT 4
63796: MOD
63797: PUSH
63798: LD_INT 1
63800: PLUS
63801: PPUSH
63802: LD_VAR 0 3
63806: PUSH
63807: LD_VAR 0 1
63811: ARRAY
63812: PPUSH
63813: LD_VAR 0 1
63817: PUSH
63818: LD_INT 4
63820: MOD
63821: PUSH
63822: LD_INT 1
63824: PLUS
63825: PPUSH
63826: CALL_OW 259
63830: PUSH
63831: LD_INT 1
63833: PLUS
63834: PPUSH
63835: CALL_OW 237
63839: GO 63741
63841: POP
63842: POP
// end ;
63843: PPOPN 3
63845: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
63846: LD_EXP 49
63850: PUSH
63851: LD_EXP 57
63855: AND
63856: IFFALSE 63876
63858: GO 63860
63860: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
63861: LD_INT 4
63863: PPUSH
63864: LD_OWVAR 2
63868: PPUSH
63869: LD_INT 0
63871: PPUSH
63872: CALL_OW 324
63876: END
// every 0 0$1 trigger StreamModeActive and sShovel do
63877: LD_EXP 49
63881: PUSH
63882: LD_EXP 86
63886: AND
63887: IFFALSE 63907
63889: GO 63891
63891: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
63892: LD_INT 19
63894: PPUSH
63895: LD_OWVAR 2
63899: PPUSH
63900: LD_INT 0
63902: PPUSH
63903: CALL_OW 324
63907: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
63908: LD_EXP 49
63912: PUSH
63913: LD_EXP 58
63917: AND
63918: IFFALSE 64020
63920: GO 63922
63922: DISABLE
63923: LD_INT 0
63925: PPUSH
63926: PPUSH
// begin enable ;
63927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
63928: LD_ADDR_VAR 0 2
63932: PUSH
63933: LD_INT 22
63935: PUSH
63936: LD_OWVAR 2
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PUSH
63945: LD_INT 2
63947: PUSH
63948: LD_INT 34
63950: PUSH
63951: LD_INT 11
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 34
63960: PUSH
63961: LD_INT 30
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PPUSH
63977: CALL_OW 69
63981: ST_TO_ADDR
// if not tmp then
63982: LD_VAR 0 2
63986: NOT
63987: IFFALSE 63991
// exit ;
63989: GO 64020
// for i in tmp do
63991: LD_ADDR_VAR 0 1
63995: PUSH
63996: LD_VAR 0 2
64000: PUSH
64001: FOR_IN
64002: IFFALSE 64018
// begin SetLives ( i , 0 ) ;
64004: LD_VAR 0 1
64008: PPUSH
64009: LD_INT 0
64011: PPUSH
64012: CALL_OW 234
// end ;
64016: GO 64001
64018: POP
64019: POP
// end ;
64020: PPOPN 2
64022: END
// every 0 0$1 trigger StreamModeActive and sBunker do
64023: LD_EXP 49
64027: PUSH
64028: LD_EXP 59
64032: AND
64033: IFFALSE 64053
64035: GO 64037
64037: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
64038: LD_INT 32
64040: PPUSH
64041: LD_OWVAR 2
64045: PPUSH
64046: LD_INT 0
64048: PPUSH
64049: CALL_OW 324
64053: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
64054: LD_EXP 49
64058: PUSH
64059: LD_EXP 60
64063: AND
64064: IFFALSE 64245
64066: GO 64068
64068: DISABLE
64069: LD_INT 0
64071: PPUSH
64072: PPUSH
64073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
64074: LD_ADDR_VAR 0 2
64078: PUSH
64079: LD_INT 22
64081: PUSH
64082: LD_OWVAR 2
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 33
64093: PUSH
64094: LD_INT 3
64096: PUSH
64097: EMPTY
64098: LIST
64099: LIST
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PPUSH
64105: CALL_OW 69
64109: ST_TO_ADDR
// if not tmp then
64110: LD_VAR 0 2
64114: NOT
64115: IFFALSE 64119
// exit ;
64117: GO 64245
// side := 0 ;
64119: LD_ADDR_VAR 0 3
64123: PUSH
64124: LD_INT 0
64126: ST_TO_ADDR
// for i := 1 to 8 do
64127: LD_ADDR_VAR 0 1
64131: PUSH
64132: DOUBLE
64133: LD_INT 1
64135: DEC
64136: ST_TO_ADDR
64137: LD_INT 8
64139: PUSH
64140: FOR_TO
64141: IFFALSE 64189
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
64143: LD_OWVAR 2
64147: PUSH
64148: LD_VAR 0 1
64152: NONEQUAL
64153: PUSH
64154: LD_OWVAR 2
64158: PPUSH
64159: LD_VAR 0 1
64163: PPUSH
64164: CALL_OW 81
64168: PUSH
64169: LD_INT 2
64171: EQUAL
64172: AND
64173: IFFALSE 64187
// begin side := i ;
64175: LD_ADDR_VAR 0 3
64179: PUSH
64180: LD_VAR 0 1
64184: ST_TO_ADDR
// break ;
64185: GO 64189
// end ;
64187: GO 64140
64189: POP
64190: POP
// if not side then
64191: LD_VAR 0 3
64195: NOT
64196: IFFALSE 64200
// exit ;
64198: GO 64245
// for i := 1 to tmp do
64200: LD_ADDR_VAR 0 1
64204: PUSH
64205: DOUBLE
64206: LD_INT 1
64208: DEC
64209: ST_TO_ADDR
64210: LD_VAR 0 2
64214: PUSH
64215: FOR_TO
64216: IFFALSE 64243
// if Prob ( 60 ) then
64218: LD_INT 60
64220: PPUSH
64221: CALL_OW 13
64225: IFFALSE 64241
// SetSide ( i , side ) ;
64227: LD_VAR 0 1
64231: PPUSH
64232: LD_VAR 0 3
64236: PPUSH
64237: CALL_OW 235
64241: GO 64215
64243: POP
64244: POP
// end ;
64245: PPOPN 3
64247: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
64248: LD_EXP 49
64252: PUSH
64253: LD_EXP 62
64257: AND
64258: IFFALSE 64377
64260: GO 64262
64262: DISABLE
64263: LD_INT 0
64265: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
64266: LD_ADDR_VAR 0 1
64270: PUSH
64271: LD_INT 22
64273: PUSH
64274: LD_OWVAR 2
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 21
64285: PUSH
64286: LD_INT 1
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 3
64295: PUSH
64296: LD_INT 23
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: PPUSH
64315: CALL_OW 69
64319: PUSH
64320: FOR_IN
64321: IFFALSE 64375
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
64323: LD_VAR 0 1
64327: PPUSH
64328: CALL_OW 257
64332: PUSH
64333: LD_INT 1
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: LD_INT 3
64341: PUSH
64342: LD_INT 4
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: IN
64351: IFFALSE 64373
// SetClass ( un , rand ( 1 , 4 ) ) ;
64353: LD_VAR 0 1
64357: PPUSH
64358: LD_INT 1
64360: PPUSH
64361: LD_INT 4
64363: PPUSH
64364: CALL_OW 12
64368: PPUSH
64369: CALL_OW 336
64373: GO 64320
64375: POP
64376: POP
// end ;
64377: PPOPN 1
64379: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
64380: LD_EXP 49
64384: PUSH
64385: LD_EXP 61
64389: AND
64390: IFFALSE 64469
64392: GO 64394
64394: DISABLE
64395: LD_INT 0
64397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64398: LD_ADDR_VAR 0 1
64402: PUSH
64403: LD_INT 22
64405: PUSH
64406: LD_OWVAR 2
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 21
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PPUSH
64429: CALL_OW 69
64433: ST_TO_ADDR
// if not tmp then
64434: LD_VAR 0 1
64438: NOT
64439: IFFALSE 64443
// exit ;
64441: GO 64469
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
64443: LD_VAR 0 1
64447: PUSH
64448: LD_INT 1
64450: PPUSH
64451: LD_VAR 0 1
64455: PPUSH
64456: CALL_OW 12
64460: ARRAY
64461: PPUSH
64462: LD_INT 100
64464: PPUSH
64465: CALL_OW 234
// end ;
64469: PPOPN 1
64471: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
64472: LD_EXP 49
64476: PUSH
64477: LD_EXP 63
64481: AND
64482: IFFALSE 64580
64484: GO 64486
64486: DISABLE
64487: LD_INT 0
64489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
64490: LD_ADDR_VAR 0 1
64494: PUSH
64495: LD_INT 22
64497: PUSH
64498: LD_OWVAR 2
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: LD_INT 21
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PPUSH
64521: CALL_OW 69
64525: ST_TO_ADDR
// if not tmp then
64526: LD_VAR 0 1
64530: NOT
64531: IFFALSE 64535
// exit ;
64533: GO 64580
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
64535: LD_VAR 0 1
64539: PUSH
64540: LD_INT 1
64542: PPUSH
64543: LD_VAR 0 1
64547: PPUSH
64548: CALL_OW 12
64552: ARRAY
64553: PPUSH
64554: LD_INT 1
64556: PPUSH
64557: LD_INT 4
64559: PPUSH
64560: CALL_OW 12
64564: PPUSH
64565: LD_INT 3000
64567: PPUSH
64568: LD_INT 9000
64570: PPUSH
64571: CALL_OW 12
64575: PPUSH
64576: CALL_OW 492
// end ;
64580: PPOPN 1
64582: END
// every 0 0$1 trigger StreamModeActive and sDepot do
64583: LD_EXP 49
64587: PUSH
64588: LD_EXP 64
64592: AND
64593: IFFALSE 64613
64595: GO 64597
64597: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
64598: LD_INT 1
64600: PPUSH
64601: LD_OWVAR 2
64605: PPUSH
64606: LD_INT 0
64608: PPUSH
64609: CALL_OW 324
64613: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
64614: LD_EXP 49
64618: PUSH
64619: LD_EXP 65
64623: AND
64624: IFFALSE 64707
64626: GO 64628
64628: DISABLE
64629: LD_INT 0
64631: PPUSH
64632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
64633: LD_ADDR_VAR 0 2
64637: PUSH
64638: LD_INT 22
64640: PUSH
64641: LD_OWVAR 2
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 21
64652: PUSH
64653: LD_INT 3
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PPUSH
64664: CALL_OW 69
64668: ST_TO_ADDR
// if not tmp then
64669: LD_VAR 0 2
64673: NOT
64674: IFFALSE 64678
// exit ;
64676: GO 64707
// for i in tmp do
64678: LD_ADDR_VAR 0 1
64682: PUSH
64683: LD_VAR 0 2
64687: PUSH
64688: FOR_IN
64689: IFFALSE 64705
// SetBLevel ( i , 10 ) ;
64691: LD_VAR 0 1
64695: PPUSH
64696: LD_INT 10
64698: PPUSH
64699: CALL_OW 241
64703: GO 64688
64705: POP
64706: POP
// end ;
64707: PPOPN 2
64709: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
64710: LD_EXP 49
64714: PUSH
64715: LD_EXP 66
64719: AND
64720: IFFALSE 64831
64722: GO 64724
64724: DISABLE
64725: LD_INT 0
64727: PPUSH
64728: PPUSH
64729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64730: LD_ADDR_VAR 0 3
64734: PUSH
64735: LD_INT 22
64737: PUSH
64738: LD_OWVAR 2
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 25
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PPUSH
64761: CALL_OW 69
64765: ST_TO_ADDR
// if not tmp then
64766: LD_VAR 0 3
64770: NOT
64771: IFFALSE 64775
// exit ;
64773: GO 64831
// un := tmp [ rand ( 1 , tmp ) ] ;
64775: LD_ADDR_VAR 0 2
64779: PUSH
64780: LD_VAR 0 3
64784: PUSH
64785: LD_INT 1
64787: PPUSH
64788: LD_VAR 0 3
64792: PPUSH
64793: CALL_OW 12
64797: ARRAY
64798: ST_TO_ADDR
// if Crawls ( un ) then
64799: LD_VAR 0 2
64803: PPUSH
64804: CALL_OW 318
64808: IFFALSE 64819
// ComWalk ( un ) ;
64810: LD_VAR 0 2
64814: PPUSH
64815: CALL_OW 138
// SetClass ( un , class_sniper ) ;
64819: LD_VAR 0 2
64823: PPUSH
64824: LD_INT 5
64826: PPUSH
64827: CALL_OW 336
// end ;
64831: PPOPN 3
64833: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
64834: LD_EXP 49
64838: PUSH
64839: LD_EXP 67
64843: AND
64844: PUSH
64845: LD_OWVAR 67
64849: PUSH
64850: LD_INT 4
64852: LESS
64853: AND
64854: IFFALSE 64873
64856: GO 64858
64858: DISABLE
// begin Difficulty := Difficulty + 1 ;
64859: LD_ADDR_OWVAR 67
64863: PUSH
64864: LD_OWVAR 67
64868: PUSH
64869: LD_INT 1
64871: PLUS
64872: ST_TO_ADDR
// end ;
64873: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
64874: LD_EXP 49
64878: PUSH
64879: LD_EXP 68
64883: AND
64884: IFFALSE 64987
64886: GO 64888
64888: DISABLE
64889: LD_INT 0
64891: PPUSH
// begin for i := 1 to 5 do
64892: LD_ADDR_VAR 0 1
64896: PUSH
64897: DOUBLE
64898: LD_INT 1
64900: DEC
64901: ST_TO_ADDR
64902: LD_INT 5
64904: PUSH
64905: FOR_TO
64906: IFFALSE 64985
// begin uc_nation := nation_nature ;
64908: LD_ADDR_OWVAR 21
64912: PUSH
64913: LD_INT 0
64915: ST_TO_ADDR
// uc_side := 0 ;
64916: LD_ADDR_OWVAR 20
64920: PUSH
64921: LD_INT 0
64923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
64924: LD_ADDR_OWVAR 29
64928: PUSH
64929: LD_INT 12
64931: PUSH
64932: LD_INT 12
64934: PUSH
64935: EMPTY
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// hc_agressivity := 20 ;
64939: LD_ADDR_OWVAR 35
64943: PUSH
64944: LD_INT 20
64946: ST_TO_ADDR
// hc_class := class_tiger ;
64947: LD_ADDR_OWVAR 28
64951: PUSH
64952: LD_INT 14
64954: ST_TO_ADDR
// hc_gallery :=  ;
64955: LD_ADDR_OWVAR 33
64959: PUSH
64960: LD_STRING 
64962: ST_TO_ADDR
// hc_name :=  ;
64963: LD_ADDR_OWVAR 26
64967: PUSH
64968: LD_STRING 
64970: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
64971: CALL_OW 44
64975: PPUSH
64976: LD_INT 0
64978: PPUSH
64979: CALL_OW 51
// end ;
64983: GO 64905
64985: POP
64986: POP
// end ;
64987: PPOPN 1
64989: END
// every 0 0$1 trigger StreamModeActive and sBomb do
64990: LD_EXP 49
64994: PUSH
64995: LD_EXP 69
64999: AND
65000: IFFALSE 65009
65002: GO 65004
65004: DISABLE
// StreamSibBomb ;
65005: CALL 65010 0 0
65009: END
// export function StreamSibBomb ; var i , x , y ; begin
65010: LD_INT 0
65012: PPUSH
65013: PPUSH
65014: PPUSH
65015: PPUSH
// result := false ;
65016: LD_ADDR_VAR 0 1
65020: PUSH
65021: LD_INT 0
65023: ST_TO_ADDR
// for i := 1 to 16 do
65024: LD_ADDR_VAR 0 2
65028: PUSH
65029: DOUBLE
65030: LD_INT 1
65032: DEC
65033: ST_TO_ADDR
65034: LD_INT 16
65036: PUSH
65037: FOR_TO
65038: IFFALSE 65237
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65040: LD_ADDR_VAR 0 3
65044: PUSH
65045: LD_INT 10
65047: PUSH
65048: LD_INT 20
65050: PUSH
65051: LD_INT 30
65053: PUSH
65054: LD_INT 40
65056: PUSH
65057: LD_INT 50
65059: PUSH
65060: LD_INT 60
65062: PUSH
65063: LD_INT 70
65065: PUSH
65066: LD_INT 80
65068: PUSH
65069: LD_INT 90
65071: PUSH
65072: LD_INT 100
65074: PUSH
65075: LD_INT 110
65077: PUSH
65078: LD_INT 120
65080: PUSH
65081: LD_INT 130
65083: PUSH
65084: LD_INT 140
65086: PUSH
65087: LD_INT 150
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 1
65109: PPUSH
65110: LD_INT 15
65112: PPUSH
65113: CALL_OW 12
65117: ARRAY
65118: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
65119: LD_ADDR_VAR 0 4
65123: PUSH
65124: LD_INT 10
65126: PUSH
65127: LD_INT 20
65129: PUSH
65130: LD_INT 30
65132: PUSH
65133: LD_INT 40
65135: PUSH
65136: LD_INT 50
65138: PUSH
65139: LD_INT 60
65141: PUSH
65142: LD_INT 70
65144: PUSH
65145: LD_INT 80
65147: PUSH
65148: LD_INT 90
65150: PUSH
65151: LD_INT 100
65153: PUSH
65154: LD_INT 110
65156: PUSH
65157: LD_INT 120
65159: PUSH
65160: LD_INT 130
65162: PUSH
65163: LD_INT 140
65165: PUSH
65166: LD_INT 150
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: LIST
65181: LIST
65182: LIST
65183: LIST
65184: LIST
65185: PUSH
65186: LD_INT 1
65188: PPUSH
65189: LD_INT 15
65191: PPUSH
65192: CALL_OW 12
65196: ARRAY
65197: ST_TO_ADDR
// if ValidHex ( x , y ) then
65198: LD_VAR 0 3
65202: PPUSH
65203: LD_VAR 0 4
65207: PPUSH
65208: CALL_OW 488
65212: IFFALSE 65235
// begin result := [ x , y ] ;
65214: LD_ADDR_VAR 0 1
65218: PUSH
65219: LD_VAR 0 3
65223: PUSH
65224: LD_VAR 0 4
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: ST_TO_ADDR
// break ;
65233: GO 65237
// end ; end ;
65235: GO 65037
65237: POP
65238: POP
// if result then
65239: LD_VAR 0 1
65243: IFFALSE 65303
// begin ToLua ( playSibBomb() ) ;
65245: LD_STRING playSibBomb()
65247: PPUSH
65248: CALL_OW 559
// wait ( 0 0$14 ) ;
65252: LD_INT 490
65254: PPUSH
65255: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
65259: LD_VAR 0 1
65263: PUSH
65264: LD_INT 1
65266: ARRAY
65267: PPUSH
65268: LD_VAR 0 1
65272: PUSH
65273: LD_INT 2
65275: ARRAY
65276: PPUSH
65277: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
65281: LD_VAR 0 1
65285: PUSH
65286: LD_INT 1
65288: ARRAY
65289: PPUSH
65290: LD_VAR 0 1
65294: PUSH
65295: LD_INT 2
65297: ARRAY
65298: PPUSH
65299: CALL_OW 429
// end ; end ;
65303: LD_VAR 0 1
65307: RET
// every 0 0$1 trigger StreamModeActive and sReset do
65308: LD_EXP 49
65312: PUSH
65313: LD_EXP 71
65317: AND
65318: IFFALSE 65330
65320: GO 65322
65322: DISABLE
// YouLost (  ) ;
65323: LD_STRING 
65325: PPUSH
65326: CALL_OW 104
65330: END
// every 0 0$1 trigger StreamModeActive and sFog do
65331: LD_EXP 49
65335: PUSH
65336: LD_EXP 70
65340: AND
65341: IFFALSE 65355
65343: GO 65345
65345: DISABLE
// FogOff ( your_side ) ;
65346: LD_OWVAR 2
65350: PPUSH
65351: CALL_OW 344
65355: END
// every 0 0$1 trigger StreamModeActive and sSun do
65356: LD_EXP 49
65360: PUSH
65361: LD_EXP 72
65365: AND
65366: IFFALSE 65394
65368: GO 65370
65370: DISABLE
// begin solar_recharge_percent := 0 ;
65371: LD_ADDR_OWVAR 79
65375: PUSH
65376: LD_INT 0
65378: ST_TO_ADDR
// wait ( 5 5$00 ) ;
65379: LD_INT 10500
65381: PPUSH
65382: CALL_OW 67
// solar_recharge_percent := 100 ;
65386: LD_ADDR_OWVAR 79
65390: PUSH
65391: LD_INT 100
65393: ST_TO_ADDR
// end ;
65394: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
65395: LD_EXP 49
65399: PUSH
65400: LD_EXP 73
65404: AND
65405: IFFALSE 65644
65407: GO 65409
65409: DISABLE
65410: LD_INT 0
65412: PPUSH
65413: PPUSH
65414: PPUSH
// begin tmp := [ ] ;
65415: LD_ADDR_VAR 0 3
65419: PUSH
65420: EMPTY
65421: ST_TO_ADDR
// for i := 1 to 6 do
65422: LD_ADDR_VAR 0 1
65426: PUSH
65427: DOUBLE
65428: LD_INT 1
65430: DEC
65431: ST_TO_ADDR
65432: LD_INT 6
65434: PUSH
65435: FOR_TO
65436: IFFALSE 65541
// begin uc_nation := nation_nature ;
65438: LD_ADDR_OWVAR 21
65442: PUSH
65443: LD_INT 0
65445: ST_TO_ADDR
// uc_side := 0 ;
65446: LD_ADDR_OWVAR 20
65450: PUSH
65451: LD_INT 0
65453: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
65454: LD_ADDR_OWVAR 29
65458: PUSH
65459: LD_INT 12
65461: PUSH
65462: LD_INT 12
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// hc_agressivity := 20 ;
65469: LD_ADDR_OWVAR 35
65473: PUSH
65474: LD_INT 20
65476: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
65477: LD_ADDR_OWVAR 28
65481: PUSH
65482: LD_INT 17
65484: ST_TO_ADDR
// hc_gallery :=  ;
65485: LD_ADDR_OWVAR 33
65489: PUSH
65490: LD_STRING 
65492: ST_TO_ADDR
// hc_name :=  ;
65493: LD_ADDR_OWVAR 26
65497: PUSH
65498: LD_STRING 
65500: ST_TO_ADDR
// un := CreateHuman ;
65501: LD_ADDR_VAR 0 2
65505: PUSH
65506: CALL_OW 44
65510: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
65511: LD_VAR 0 2
65515: PPUSH
65516: LD_INT 1
65518: PPUSH
65519: CALL_OW 51
// tmp := tmp ^ un ;
65523: LD_ADDR_VAR 0 3
65527: PUSH
65528: LD_VAR 0 3
65532: PUSH
65533: LD_VAR 0 2
65537: ADD
65538: ST_TO_ADDR
// end ;
65539: GO 65435
65541: POP
65542: POP
// repeat wait ( 0 0$1 ) ;
65543: LD_INT 35
65545: PPUSH
65546: CALL_OW 67
// for un in tmp do
65550: LD_ADDR_VAR 0 2
65554: PUSH
65555: LD_VAR 0 3
65559: PUSH
65560: FOR_IN
65561: IFFALSE 65635
// begin if IsDead ( un ) then
65563: LD_VAR 0 2
65567: PPUSH
65568: CALL_OW 301
65572: IFFALSE 65592
// begin tmp := tmp diff un ;
65574: LD_ADDR_VAR 0 3
65578: PUSH
65579: LD_VAR 0 3
65583: PUSH
65584: LD_VAR 0 2
65588: DIFF
65589: ST_TO_ADDR
// continue ;
65590: GO 65560
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
65592: LD_VAR 0 2
65596: PPUSH
65597: LD_INT 3
65599: PUSH
65600: LD_INT 22
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PPUSH
65614: CALL_OW 69
65618: PPUSH
65619: LD_VAR 0 2
65623: PPUSH
65624: CALL_OW 74
65628: PPUSH
65629: CALL_OW 115
// end ;
65633: GO 65560
65635: POP
65636: POP
// until not tmp ;
65637: LD_VAR 0 3
65641: NOT
65642: IFFALSE 65543
// end ;
65644: PPOPN 3
65646: END
// every 0 0$1 trigger StreamModeActive and sTroll do
65647: LD_EXP 49
65651: PUSH
65652: LD_EXP 74
65656: AND
65657: IFFALSE 65711
65659: GO 65661
65661: DISABLE
// begin ToLua ( displayTroll(); ) ;
65662: LD_STRING displayTroll();
65664: PPUSH
65665: CALL_OW 559
// wait ( 3 3$00 ) ;
65669: LD_INT 6300
65671: PPUSH
65672: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65676: LD_STRING hideTroll();
65678: PPUSH
65679: CALL_OW 559
// wait ( 1 1$00 ) ;
65683: LD_INT 2100
65685: PPUSH
65686: CALL_OW 67
// ToLua ( displayTroll(); ) ;
65690: LD_STRING displayTroll();
65692: PPUSH
65693: CALL_OW 559
// wait ( 1 1$00 ) ;
65697: LD_INT 2100
65699: PPUSH
65700: CALL_OW 67
// ToLua ( hideTroll(); ) ;
65704: LD_STRING hideTroll();
65706: PPUSH
65707: CALL_OW 559
// end ;
65711: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
65712: LD_EXP 49
65716: PUSH
65717: LD_EXP 75
65721: AND
65722: IFFALSE 65785
65724: GO 65726
65726: DISABLE
65727: LD_INT 0
65729: PPUSH
// begin p := 0 ;
65730: LD_ADDR_VAR 0 1
65734: PUSH
65735: LD_INT 0
65737: ST_TO_ADDR
// repeat game_speed := 1 ;
65738: LD_ADDR_OWVAR 65
65742: PUSH
65743: LD_INT 1
65745: ST_TO_ADDR
// wait ( 0 0$1 ) ;
65746: LD_INT 35
65748: PPUSH
65749: CALL_OW 67
// p := p + 1 ;
65753: LD_ADDR_VAR 0 1
65757: PUSH
65758: LD_VAR 0 1
65762: PUSH
65763: LD_INT 1
65765: PLUS
65766: ST_TO_ADDR
// until p >= 60 ;
65767: LD_VAR 0 1
65771: PUSH
65772: LD_INT 60
65774: GREATEREQUAL
65775: IFFALSE 65738
// game_speed := 4 ;
65777: LD_ADDR_OWVAR 65
65781: PUSH
65782: LD_INT 4
65784: ST_TO_ADDR
// end ;
65785: PPOPN 1
65787: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
65788: LD_EXP 49
65792: PUSH
65793: LD_EXP 76
65797: AND
65798: IFFALSE 65944
65800: GO 65802
65802: DISABLE
65803: LD_INT 0
65805: PPUSH
65806: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
65807: LD_ADDR_VAR 0 1
65811: PUSH
65812: LD_INT 22
65814: PUSH
65815: LD_OWVAR 2
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 2
65826: PUSH
65827: LD_INT 30
65829: PUSH
65830: LD_INT 0
65832: PUSH
65833: EMPTY
65834: LIST
65835: LIST
65836: PUSH
65837: LD_INT 30
65839: PUSH
65840: LD_INT 1
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: LIST
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: PPUSH
65856: CALL_OW 69
65860: ST_TO_ADDR
// if not depot then
65861: LD_VAR 0 1
65865: NOT
65866: IFFALSE 65870
// exit ;
65868: GO 65944
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
65870: LD_ADDR_VAR 0 2
65874: PUSH
65875: LD_VAR 0 1
65879: PUSH
65880: LD_INT 1
65882: PPUSH
65883: LD_VAR 0 1
65887: PPUSH
65888: CALL_OW 12
65892: ARRAY
65893: PPUSH
65894: CALL_OW 274
65898: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
65899: LD_VAR 0 2
65903: PPUSH
65904: LD_INT 1
65906: PPUSH
65907: LD_INT 0
65909: PPUSH
65910: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
65914: LD_VAR 0 2
65918: PPUSH
65919: LD_INT 2
65921: PPUSH
65922: LD_INT 0
65924: PPUSH
65925: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
65929: LD_VAR 0 2
65933: PPUSH
65934: LD_INT 3
65936: PPUSH
65937: LD_INT 0
65939: PPUSH
65940: CALL_OW 277
// end ;
65944: PPOPN 2
65946: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
65947: LD_EXP 49
65951: PUSH
65952: LD_EXP 77
65956: AND
65957: IFFALSE 66054
65959: GO 65961
65961: DISABLE
65962: LD_INT 0
65964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65965: LD_ADDR_VAR 0 1
65969: PUSH
65970: LD_INT 22
65972: PUSH
65973: LD_OWVAR 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 21
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: LD_INT 23
65997: PUSH
65998: LD_INT 0
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: LIST
66013: PPUSH
66014: CALL_OW 69
66018: ST_TO_ADDR
// if not tmp then
66019: LD_VAR 0 1
66023: NOT
66024: IFFALSE 66028
// exit ;
66026: GO 66054
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
66028: LD_VAR 0 1
66032: PUSH
66033: LD_INT 1
66035: PPUSH
66036: LD_VAR 0 1
66040: PPUSH
66041: CALL_OW 12
66045: ARRAY
66046: PPUSH
66047: LD_INT 200
66049: PPUSH
66050: CALL_OW 234
// end ;
66054: PPOPN 1
66056: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
66057: LD_EXP 49
66061: PUSH
66062: LD_EXP 78
66066: AND
66067: IFFALSE 66146
66069: GO 66071
66071: DISABLE
66072: LD_INT 0
66074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
66075: LD_ADDR_VAR 0 1
66079: PUSH
66080: LD_INT 22
66082: PUSH
66083: LD_OWVAR 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 21
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PPUSH
66106: CALL_OW 69
66110: ST_TO_ADDR
// if not tmp then
66111: LD_VAR 0 1
66115: NOT
66116: IFFALSE 66120
// exit ;
66118: GO 66146
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
66120: LD_VAR 0 1
66124: PUSH
66125: LD_INT 1
66127: PPUSH
66128: LD_VAR 0 1
66132: PPUSH
66133: CALL_OW 12
66137: ARRAY
66138: PPUSH
66139: LD_INT 60
66141: PPUSH
66142: CALL_OW 234
// end ;
66146: PPOPN 1
66148: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
66149: LD_EXP 49
66153: PUSH
66154: LD_EXP 79
66158: AND
66159: IFFALSE 66258
66161: GO 66163
66163: DISABLE
66164: LD_INT 0
66166: PPUSH
66167: PPUSH
// begin enable ;
66168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
66169: LD_ADDR_VAR 0 1
66173: PUSH
66174: LD_INT 22
66176: PUSH
66177: LD_OWVAR 2
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 61
66188: PUSH
66189: EMPTY
66190: LIST
66191: PUSH
66192: LD_INT 33
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: PPUSH
66207: CALL_OW 69
66211: ST_TO_ADDR
// if not tmp then
66212: LD_VAR 0 1
66216: NOT
66217: IFFALSE 66221
// exit ;
66219: GO 66258
// for i in tmp do
66221: LD_ADDR_VAR 0 2
66225: PUSH
66226: LD_VAR 0 1
66230: PUSH
66231: FOR_IN
66232: IFFALSE 66256
// if IsControledBy ( i ) then
66234: LD_VAR 0 2
66238: PPUSH
66239: CALL_OW 312
66243: IFFALSE 66254
// ComUnlink ( i ) ;
66245: LD_VAR 0 2
66249: PPUSH
66250: CALL_OW 136
66254: GO 66231
66256: POP
66257: POP
// end ;
66258: PPOPN 2
66260: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
66261: LD_EXP 49
66265: PUSH
66266: LD_EXP 80
66270: AND
66271: IFFALSE 66411
66273: GO 66275
66275: DISABLE
66276: LD_INT 0
66278: PPUSH
66279: PPUSH
// begin ToLua ( displayPowell(); ) ;
66280: LD_STRING displayPowell();
66282: PPUSH
66283: CALL_OW 559
// uc_side := 0 ;
66287: LD_ADDR_OWVAR 20
66291: PUSH
66292: LD_INT 0
66294: ST_TO_ADDR
// uc_nation := 2 ;
66295: LD_ADDR_OWVAR 21
66299: PUSH
66300: LD_INT 2
66302: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
66303: LD_ADDR_OWVAR 37
66307: PUSH
66308: LD_INT 14
66310: ST_TO_ADDR
// vc_engine := engine_siberite ;
66311: LD_ADDR_OWVAR 39
66315: PUSH
66316: LD_INT 3
66318: ST_TO_ADDR
// vc_control := control_apeman ;
66319: LD_ADDR_OWVAR 38
66323: PUSH
66324: LD_INT 5
66326: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
66327: LD_ADDR_OWVAR 40
66331: PUSH
66332: LD_INT 29
66334: ST_TO_ADDR
// un := CreateVehicle ;
66335: LD_ADDR_VAR 0 2
66339: PUSH
66340: CALL_OW 45
66344: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66345: LD_VAR 0 2
66349: PPUSH
66350: LD_INT 1
66352: PPUSH
66353: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
66357: LD_INT 35
66359: PPUSH
66360: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
66364: LD_VAR 0 2
66368: PPUSH
66369: LD_INT 22
66371: PUSH
66372: LD_OWVAR 2
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PPUSH
66381: CALL_OW 69
66385: PPUSH
66386: LD_VAR 0 2
66390: PPUSH
66391: CALL_OW 74
66395: PPUSH
66396: CALL_OW 115
// until IsDead ( un ) ;
66400: LD_VAR 0 2
66404: PPUSH
66405: CALL_OW 301
66409: IFFALSE 66357
// end ;
66411: PPOPN 2
66413: END
// every 0 0$1 trigger StreamModeActive and sStu do
66414: LD_EXP 49
66418: PUSH
66419: LD_EXP 88
66423: AND
66424: IFFALSE 66440
66426: GO 66428
66428: DISABLE
// begin ToLua ( displayStucuk(); ) ;
66429: LD_STRING displayStucuk();
66431: PPUSH
66432: CALL_OW 559
// ResetFog ;
66436: CALL_OW 335
// end ;
66440: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
66441: LD_EXP 49
66445: PUSH
66446: LD_EXP 81
66450: AND
66451: IFFALSE 66592
66453: GO 66455
66455: DISABLE
66456: LD_INT 0
66458: PPUSH
66459: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66460: LD_ADDR_VAR 0 2
66464: PUSH
66465: LD_INT 22
66467: PUSH
66468: LD_OWVAR 2
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 21
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PPUSH
66491: CALL_OW 69
66495: ST_TO_ADDR
// if not tmp then
66496: LD_VAR 0 2
66500: NOT
66501: IFFALSE 66505
// exit ;
66503: GO 66592
// un := tmp [ rand ( 1 , tmp ) ] ;
66505: LD_ADDR_VAR 0 1
66509: PUSH
66510: LD_VAR 0 2
66514: PUSH
66515: LD_INT 1
66517: PPUSH
66518: LD_VAR 0 2
66522: PPUSH
66523: CALL_OW 12
66527: ARRAY
66528: ST_TO_ADDR
// SetSide ( un , 0 ) ;
66529: LD_VAR 0 1
66533: PPUSH
66534: LD_INT 0
66536: PPUSH
66537: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
66541: LD_VAR 0 1
66545: PPUSH
66546: LD_OWVAR 3
66550: PUSH
66551: LD_VAR 0 1
66555: DIFF
66556: PPUSH
66557: LD_VAR 0 1
66561: PPUSH
66562: CALL_OW 74
66566: PPUSH
66567: CALL_OW 115
// wait ( 0 0$20 ) ;
66571: LD_INT 700
66573: PPUSH
66574: CALL_OW 67
// SetSide ( un , your_side ) ;
66578: LD_VAR 0 1
66582: PPUSH
66583: LD_OWVAR 2
66587: PPUSH
66588: CALL_OW 235
// end ;
66592: PPOPN 2
66594: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
66595: LD_EXP 49
66599: PUSH
66600: LD_EXP 82
66604: AND
66605: IFFALSE 66711
66607: GO 66609
66609: DISABLE
66610: LD_INT 0
66612: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66613: LD_ADDR_VAR 0 1
66617: PUSH
66618: LD_INT 22
66620: PUSH
66621: LD_OWVAR 2
66625: PUSH
66626: EMPTY
66627: LIST
66628: LIST
66629: PUSH
66630: LD_INT 2
66632: PUSH
66633: LD_INT 30
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 30
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PPUSH
66662: CALL_OW 69
66666: ST_TO_ADDR
// if not depot then
66667: LD_VAR 0 1
66671: NOT
66672: IFFALSE 66676
// exit ;
66674: GO 66711
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
66676: LD_VAR 0 1
66680: PUSH
66681: LD_INT 1
66683: ARRAY
66684: PPUSH
66685: CALL_OW 250
66689: PPUSH
66690: LD_VAR 0 1
66694: PUSH
66695: LD_INT 1
66697: ARRAY
66698: PPUSH
66699: CALL_OW 251
66703: PPUSH
66704: LD_INT 70
66706: PPUSH
66707: CALL_OW 495
// end ;
66711: PPOPN 1
66713: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
66714: LD_EXP 49
66718: PUSH
66719: LD_EXP 83
66723: AND
66724: IFFALSE 66935
66726: GO 66728
66728: DISABLE
66729: LD_INT 0
66731: PPUSH
66732: PPUSH
66733: PPUSH
66734: PPUSH
66735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
66736: LD_ADDR_VAR 0 5
66740: PUSH
66741: LD_INT 22
66743: PUSH
66744: LD_OWVAR 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 21
66755: PUSH
66756: LD_INT 1
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PPUSH
66767: CALL_OW 69
66771: ST_TO_ADDR
// if not tmp then
66772: LD_VAR 0 5
66776: NOT
66777: IFFALSE 66781
// exit ;
66779: GO 66935
// for i in tmp do
66781: LD_ADDR_VAR 0 1
66785: PUSH
66786: LD_VAR 0 5
66790: PUSH
66791: FOR_IN
66792: IFFALSE 66933
// begin d := rand ( 0 , 5 ) ;
66794: LD_ADDR_VAR 0 4
66798: PUSH
66799: LD_INT 0
66801: PPUSH
66802: LD_INT 5
66804: PPUSH
66805: CALL_OW 12
66809: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
66810: LD_ADDR_VAR 0 2
66814: PUSH
66815: LD_VAR 0 1
66819: PPUSH
66820: CALL_OW 250
66824: PPUSH
66825: LD_VAR 0 4
66829: PPUSH
66830: LD_INT 3
66832: PPUSH
66833: LD_INT 12
66835: PPUSH
66836: CALL_OW 12
66840: PPUSH
66841: CALL_OW 272
66845: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
66846: LD_ADDR_VAR 0 3
66850: PUSH
66851: LD_VAR 0 1
66855: PPUSH
66856: CALL_OW 251
66860: PPUSH
66861: LD_VAR 0 4
66865: PPUSH
66866: LD_INT 3
66868: PPUSH
66869: LD_INT 12
66871: PPUSH
66872: CALL_OW 12
66876: PPUSH
66877: CALL_OW 273
66881: ST_TO_ADDR
// if ValidHex ( x , y ) then
66882: LD_VAR 0 2
66886: PPUSH
66887: LD_VAR 0 3
66891: PPUSH
66892: CALL_OW 488
66896: IFFALSE 66931
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
66898: LD_VAR 0 1
66902: PPUSH
66903: LD_VAR 0 2
66907: PPUSH
66908: LD_VAR 0 3
66912: PPUSH
66913: LD_INT 3
66915: PPUSH
66916: LD_INT 6
66918: PPUSH
66919: CALL_OW 12
66923: PPUSH
66924: LD_INT 1
66926: PPUSH
66927: CALL_OW 483
// end ;
66931: GO 66791
66933: POP
66934: POP
// end ;
66935: PPOPN 5
66937: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
66938: LD_EXP 49
66942: PUSH
66943: LD_EXP 84
66947: AND
66948: IFFALSE 67042
66950: GO 66952
66952: DISABLE
66953: LD_INT 0
66955: PPUSH
66956: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
66957: LD_ADDR_VAR 0 2
66961: PUSH
66962: LD_INT 22
66964: PUSH
66965: LD_OWVAR 2
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 32
66976: PUSH
66977: LD_INT 1
66979: PUSH
66980: EMPTY
66981: LIST
66982: LIST
66983: PUSH
66984: LD_INT 21
66986: PUSH
66987: LD_INT 2
66989: PUSH
66990: EMPTY
66991: LIST
66992: LIST
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: LIST
66998: PPUSH
66999: CALL_OW 69
67003: ST_TO_ADDR
// if not tmp then
67004: LD_VAR 0 2
67008: NOT
67009: IFFALSE 67013
// exit ;
67011: GO 67042
// for i in tmp do
67013: LD_ADDR_VAR 0 1
67017: PUSH
67018: LD_VAR 0 2
67022: PUSH
67023: FOR_IN
67024: IFFALSE 67040
// SetFuel ( i , 0 ) ;
67026: LD_VAR 0 1
67030: PPUSH
67031: LD_INT 0
67033: PPUSH
67034: CALL_OW 240
67038: GO 67023
67040: POP
67041: POP
// end ;
67042: PPOPN 2
67044: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
67045: LD_EXP 49
67049: PUSH
67050: LD_EXP 85
67054: AND
67055: IFFALSE 67121
67057: GO 67059
67059: DISABLE
67060: LD_INT 0
67062: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
67063: LD_ADDR_VAR 0 1
67067: PUSH
67068: LD_INT 22
67070: PUSH
67071: LD_OWVAR 2
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 30
67082: PUSH
67083: LD_INT 29
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PPUSH
67094: CALL_OW 69
67098: ST_TO_ADDR
// if not tmp then
67099: LD_VAR 0 1
67103: NOT
67104: IFFALSE 67108
// exit ;
67106: GO 67121
// DestroyUnit ( tmp [ 1 ] ) ;
67108: LD_VAR 0 1
67112: PUSH
67113: LD_INT 1
67115: ARRAY
67116: PPUSH
67117: CALL_OW 65
// end ;
67121: PPOPN 1
67123: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
67124: LD_EXP 49
67128: PUSH
67129: LD_EXP 87
67133: AND
67134: IFFALSE 67263
67136: GO 67138
67138: DISABLE
67139: LD_INT 0
67141: PPUSH
// begin uc_side := 0 ;
67142: LD_ADDR_OWVAR 20
67146: PUSH
67147: LD_INT 0
67149: ST_TO_ADDR
// uc_nation := nation_arabian ;
67150: LD_ADDR_OWVAR 21
67154: PUSH
67155: LD_INT 2
67157: ST_TO_ADDR
// hc_gallery :=  ;
67158: LD_ADDR_OWVAR 33
67162: PUSH
67163: LD_STRING 
67165: ST_TO_ADDR
// hc_name :=  ;
67166: LD_ADDR_OWVAR 26
67170: PUSH
67171: LD_STRING 
67173: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
67174: LD_INT 1
67176: PPUSH
67177: LD_INT 11
67179: PPUSH
67180: LD_INT 10
67182: PPUSH
67183: CALL_OW 380
// un := CreateHuman ;
67187: LD_ADDR_VAR 0 1
67191: PUSH
67192: CALL_OW 44
67196: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
67197: LD_VAR 0 1
67201: PPUSH
67202: LD_INT 1
67204: PPUSH
67205: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
67209: LD_INT 35
67211: PPUSH
67212: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
67216: LD_VAR 0 1
67220: PPUSH
67221: LD_INT 22
67223: PUSH
67224: LD_OWVAR 2
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PPUSH
67233: CALL_OW 69
67237: PPUSH
67238: LD_VAR 0 1
67242: PPUSH
67243: CALL_OW 74
67247: PPUSH
67248: CALL_OW 115
// until IsDead ( un ) ;
67252: LD_VAR 0 1
67256: PPUSH
67257: CALL_OW 301
67261: IFFALSE 67209
// end ;
67263: PPOPN 1
67265: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
67266: LD_EXP 49
67270: PUSH
67271: LD_EXP 89
67275: AND
67276: IFFALSE 67288
67278: GO 67280
67280: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
67281: LD_STRING earthquake(getX(game), 0, 32)
67283: PPUSH
67284: CALL_OW 559
67288: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
67289: LD_EXP 49
67293: PUSH
67294: LD_EXP 90
67298: AND
67299: IFFALSE 67390
67301: GO 67303
67303: DISABLE
67304: LD_INT 0
67306: PPUSH
// begin enable ;
67307: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
67308: LD_ADDR_VAR 0 1
67312: PUSH
67313: LD_INT 22
67315: PUSH
67316: LD_OWVAR 2
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: LD_INT 21
67327: PUSH
67328: LD_INT 2
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 33
67337: PUSH
67338: LD_INT 3
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: PPUSH
67350: CALL_OW 69
67354: ST_TO_ADDR
// if not tmp then
67355: LD_VAR 0 1
67359: NOT
67360: IFFALSE 67364
// exit ;
67362: GO 67390
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
67364: LD_VAR 0 1
67368: PUSH
67369: LD_INT 1
67371: PPUSH
67372: LD_VAR 0 1
67376: PPUSH
67377: CALL_OW 12
67381: ARRAY
67382: PPUSH
67383: LD_INT 1
67385: PPUSH
67386: CALL_OW 234
// end ;
67390: PPOPN 1
67392: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
67393: LD_EXP 49
67397: PUSH
67398: LD_EXP 91
67402: AND
67403: IFFALSE 67544
67405: GO 67407
67407: DISABLE
67408: LD_INT 0
67410: PPUSH
67411: PPUSH
67412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67413: LD_ADDR_VAR 0 3
67417: PUSH
67418: LD_INT 22
67420: PUSH
67421: LD_OWVAR 2
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 25
67432: PUSH
67433: LD_INT 1
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PPUSH
67444: CALL_OW 69
67448: ST_TO_ADDR
// if not tmp then
67449: LD_VAR 0 3
67453: NOT
67454: IFFALSE 67458
// exit ;
67456: GO 67544
// un := tmp [ rand ( 1 , tmp ) ] ;
67458: LD_ADDR_VAR 0 2
67462: PUSH
67463: LD_VAR 0 3
67467: PUSH
67468: LD_INT 1
67470: PPUSH
67471: LD_VAR 0 3
67475: PPUSH
67476: CALL_OW 12
67480: ARRAY
67481: ST_TO_ADDR
// if Crawls ( un ) then
67482: LD_VAR 0 2
67486: PPUSH
67487: CALL_OW 318
67491: IFFALSE 67502
// ComWalk ( un ) ;
67493: LD_VAR 0 2
67497: PPUSH
67498: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
67502: LD_VAR 0 2
67506: PPUSH
67507: LD_INT 9
67509: PPUSH
67510: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
67514: LD_INT 28
67516: PPUSH
67517: LD_OWVAR 2
67521: PPUSH
67522: LD_INT 2
67524: PPUSH
67525: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
67529: LD_INT 29
67531: PPUSH
67532: LD_OWVAR 2
67536: PPUSH
67537: LD_INT 2
67539: PPUSH
67540: CALL_OW 322
// end ;
67544: PPOPN 3
67546: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
67547: LD_EXP 49
67551: PUSH
67552: LD_EXP 92
67556: AND
67557: IFFALSE 67668
67559: GO 67561
67561: DISABLE
67562: LD_INT 0
67564: PPUSH
67565: PPUSH
67566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
67567: LD_ADDR_VAR 0 3
67571: PUSH
67572: LD_INT 22
67574: PUSH
67575: LD_OWVAR 2
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: PUSH
67584: LD_INT 25
67586: PUSH
67587: LD_INT 1
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PPUSH
67598: CALL_OW 69
67602: ST_TO_ADDR
// if not tmp then
67603: LD_VAR 0 3
67607: NOT
67608: IFFALSE 67612
// exit ;
67610: GO 67668
// un := tmp [ rand ( 1 , tmp ) ] ;
67612: LD_ADDR_VAR 0 2
67616: PUSH
67617: LD_VAR 0 3
67621: PUSH
67622: LD_INT 1
67624: PPUSH
67625: LD_VAR 0 3
67629: PPUSH
67630: CALL_OW 12
67634: ARRAY
67635: ST_TO_ADDR
// if Crawls ( un ) then
67636: LD_VAR 0 2
67640: PPUSH
67641: CALL_OW 318
67645: IFFALSE 67656
// ComWalk ( un ) ;
67647: LD_VAR 0 2
67651: PPUSH
67652: CALL_OW 138
// SetClass ( un , class_mortar ) ;
67656: LD_VAR 0 2
67660: PPUSH
67661: LD_INT 8
67663: PPUSH
67664: CALL_OW 336
// end ;
67668: PPOPN 3
67670: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
67671: LD_EXP 49
67675: PUSH
67676: LD_EXP 93
67680: AND
67681: IFFALSE 67825
67683: GO 67685
67685: DISABLE
67686: LD_INT 0
67688: PPUSH
67689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
67690: LD_ADDR_VAR 0 2
67694: PUSH
67695: LD_INT 22
67697: PUSH
67698: LD_OWVAR 2
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 21
67709: PUSH
67710: LD_INT 2
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: LD_INT 34
67722: PUSH
67723: LD_INT 12
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 34
67732: PUSH
67733: LD_INT 51
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 34
67742: PUSH
67743: LD_INT 32
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: LIST
67760: PPUSH
67761: CALL_OW 69
67765: ST_TO_ADDR
// if not tmp then
67766: LD_VAR 0 2
67770: NOT
67771: IFFALSE 67775
// exit ;
67773: GO 67825
// for i in tmp do
67775: LD_ADDR_VAR 0 1
67779: PUSH
67780: LD_VAR 0 2
67784: PUSH
67785: FOR_IN
67786: IFFALSE 67823
// if GetCargo ( i , mat_artifact ) = 0 then
67788: LD_VAR 0 1
67792: PPUSH
67793: LD_INT 4
67795: PPUSH
67796: CALL_OW 289
67800: PUSH
67801: LD_INT 0
67803: EQUAL
67804: IFFALSE 67821
// SetCargo ( i , mat_siberit , 100 ) ;
67806: LD_VAR 0 1
67810: PPUSH
67811: LD_INT 3
67813: PPUSH
67814: LD_INT 100
67816: PPUSH
67817: CALL_OW 290
67821: GO 67785
67823: POP
67824: POP
// end ;
67825: PPOPN 2
67827: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
67828: LD_EXP 49
67832: PUSH
67833: LD_EXP 94
67837: AND
67838: IFFALSE 68021
67840: GO 67842
67842: DISABLE
67843: LD_INT 0
67845: PPUSH
67846: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
67847: LD_ADDR_VAR 0 2
67851: PUSH
67852: LD_INT 22
67854: PUSH
67855: LD_OWVAR 2
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PPUSH
67864: CALL_OW 69
67868: ST_TO_ADDR
// if not tmp then
67869: LD_VAR 0 2
67873: NOT
67874: IFFALSE 67878
// exit ;
67876: GO 68021
// for i := 1 to 2 do
67878: LD_ADDR_VAR 0 1
67882: PUSH
67883: DOUBLE
67884: LD_INT 1
67886: DEC
67887: ST_TO_ADDR
67888: LD_INT 2
67890: PUSH
67891: FOR_TO
67892: IFFALSE 68019
// begin uc_side := your_side ;
67894: LD_ADDR_OWVAR 20
67898: PUSH
67899: LD_OWVAR 2
67903: ST_TO_ADDR
// uc_nation := nation_american ;
67904: LD_ADDR_OWVAR 21
67908: PUSH
67909: LD_INT 1
67911: ST_TO_ADDR
// vc_chassis := us_morphling ;
67912: LD_ADDR_OWVAR 37
67916: PUSH
67917: LD_INT 5
67919: ST_TO_ADDR
// vc_engine := engine_siberite ;
67920: LD_ADDR_OWVAR 39
67924: PUSH
67925: LD_INT 3
67927: ST_TO_ADDR
// vc_control := control_computer ;
67928: LD_ADDR_OWVAR 38
67932: PUSH
67933: LD_INT 3
67935: ST_TO_ADDR
// vc_weapon := us_double_laser ;
67936: LD_ADDR_OWVAR 40
67940: PUSH
67941: LD_INT 10
67943: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
67944: LD_VAR 0 2
67948: PUSH
67949: LD_INT 1
67951: ARRAY
67952: PPUSH
67953: CALL_OW 310
67957: NOT
67958: IFFALSE 68005
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
67960: CALL_OW 45
67964: PPUSH
67965: LD_VAR 0 2
67969: PUSH
67970: LD_INT 1
67972: ARRAY
67973: PPUSH
67974: CALL_OW 250
67978: PPUSH
67979: LD_VAR 0 2
67983: PUSH
67984: LD_INT 1
67986: ARRAY
67987: PPUSH
67988: CALL_OW 251
67992: PPUSH
67993: LD_INT 12
67995: PPUSH
67996: LD_INT 1
67998: PPUSH
67999: CALL_OW 50
68003: GO 68017
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
68005: CALL_OW 45
68009: PPUSH
68010: LD_INT 1
68012: PPUSH
68013: CALL_OW 51
// end ;
68017: GO 67891
68019: POP
68020: POP
// end ;
68021: PPOPN 2
68023: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
68024: LD_EXP 49
68028: PUSH
68029: LD_EXP 95
68033: AND
68034: IFFALSE 68256
68036: GO 68038
68038: DISABLE
68039: LD_INT 0
68041: PPUSH
68042: PPUSH
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
68047: LD_ADDR_VAR 0 6
68051: PUSH
68052: LD_INT 22
68054: PUSH
68055: LD_OWVAR 2
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 21
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 3
68076: PUSH
68077: LD_INT 23
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: EMPTY
68092: LIST
68093: LIST
68094: LIST
68095: PPUSH
68096: CALL_OW 69
68100: ST_TO_ADDR
// if not tmp then
68101: LD_VAR 0 6
68105: NOT
68106: IFFALSE 68110
// exit ;
68108: GO 68256
// s1 := rand ( 1 , 4 ) ;
68110: LD_ADDR_VAR 0 2
68114: PUSH
68115: LD_INT 1
68117: PPUSH
68118: LD_INT 4
68120: PPUSH
68121: CALL_OW 12
68125: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
68126: LD_ADDR_VAR 0 4
68130: PUSH
68131: LD_VAR 0 6
68135: PUSH
68136: LD_INT 1
68138: ARRAY
68139: PPUSH
68140: LD_VAR 0 2
68144: PPUSH
68145: CALL_OW 259
68149: ST_TO_ADDR
// if s1 = 1 then
68150: LD_VAR 0 2
68154: PUSH
68155: LD_INT 1
68157: EQUAL
68158: IFFALSE 68178
// s2 := rand ( 2 , 4 ) else
68160: LD_ADDR_VAR 0 3
68164: PUSH
68165: LD_INT 2
68167: PPUSH
68168: LD_INT 4
68170: PPUSH
68171: CALL_OW 12
68175: ST_TO_ADDR
68176: GO 68186
// s2 := 1 ;
68178: LD_ADDR_VAR 0 3
68182: PUSH
68183: LD_INT 1
68185: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
68186: LD_ADDR_VAR 0 5
68190: PUSH
68191: LD_VAR 0 6
68195: PUSH
68196: LD_INT 1
68198: ARRAY
68199: PPUSH
68200: LD_VAR 0 3
68204: PPUSH
68205: CALL_OW 259
68209: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
68210: LD_VAR 0 6
68214: PUSH
68215: LD_INT 1
68217: ARRAY
68218: PPUSH
68219: LD_VAR 0 2
68223: PPUSH
68224: LD_VAR 0 5
68228: PPUSH
68229: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
68233: LD_VAR 0 6
68237: PUSH
68238: LD_INT 1
68240: ARRAY
68241: PPUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_VAR 0 4
68251: PPUSH
68252: CALL_OW 237
// end ;
68256: PPOPN 6
68258: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
68259: LD_EXP 49
68263: PUSH
68264: LD_EXP 96
68268: AND
68269: IFFALSE 68348
68271: GO 68273
68273: DISABLE
68274: LD_INT 0
68276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
68277: LD_ADDR_VAR 0 1
68281: PUSH
68282: LD_INT 22
68284: PUSH
68285: LD_OWVAR 2
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 30
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PPUSH
68308: CALL_OW 69
68312: ST_TO_ADDR
// if not tmp then
68313: LD_VAR 0 1
68317: NOT
68318: IFFALSE 68322
// exit ;
68320: GO 68348
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
68322: LD_VAR 0 1
68326: PUSH
68327: LD_INT 1
68329: PPUSH
68330: LD_VAR 0 1
68334: PPUSH
68335: CALL_OW 12
68339: ARRAY
68340: PPUSH
68341: LD_INT 1
68343: PPUSH
68344: CALL_OW 234
// end ;
68348: PPOPN 1
68350: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
68351: LD_EXP 49
68355: PUSH
68356: LD_EXP 97
68360: AND
68361: IFFALSE 68473
68363: GO 68365
68365: DISABLE
68366: LD_INT 0
68368: PPUSH
68369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
68370: LD_ADDR_VAR 0 2
68374: PUSH
68375: LD_INT 22
68377: PUSH
68378: LD_OWVAR 2
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: LD_INT 30
68392: PUSH
68393: LD_INT 27
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 30
68402: PUSH
68403: LD_INT 26
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 30
68412: PUSH
68413: LD_INT 28
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: PUSH
68426: EMPTY
68427: LIST
68428: LIST
68429: PPUSH
68430: CALL_OW 69
68434: ST_TO_ADDR
// if not tmp then
68435: LD_VAR 0 2
68439: NOT
68440: IFFALSE 68444
// exit ;
68442: GO 68473
// for i in tmp do
68444: LD_ADDR_VAR 0 1
68448: PUSH
68449: LD_VAR 0 2
68453: PUSH
68454: FOR_IN
68455: IFFALSE 68471
// SetLives ( i , 1 ) ;
68457: LD_VAR 0 1
68461: PPUSH
68462: LD_INT 1
68464: PPUSH
68465: CALL_OW 234
68469: GO 68454
68471: POP
68472: POP
// end ;
68473: PPOPN 2
68475: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
68476: LD_EXP 49
68480: PUSH
68481: LD_EXP 98
68485: AND
68486: IFFALSE 68773
68488: GO 68490
68490: DISABLE
68491: LD_INT 0
68493: PPUSH
68494: PPUSH
68495: PPUSH
// begin i := rand ( 1 , 7 ) ;
68496: LD_ADDR_VAR 0 1
68500: PUSH
68501: LD_INT 1
68503: PPUSH
68504: LD_INT 7
68506: PPUSH
68507: CALL_OW 12
68511: ST_TO_ADDR
// case i of 1 :
68512: LD_VAR 0 1
68516: PUSH
68517: LD_INT 1
68519: DOUBLE
68520: EQUAL
68521: IFTRUE 68525
68523: GO 68535
68525: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
68526: LD_STRING earthquake(getX(game), 0, 32)
68528: PPUSH
68529: CALL_OW 559
68533: GO 68773
68535: LD_INT 2
68537: DOUBLE
68538: EQUAL
68539: IFTRUE 68543
68541: GO 68557
68543: POP
// begin ToLua ( displayStucuk(); ) ;
68544: LD_STRING displayStucuk();
68546: PPUSH
68547: CALL_OW 559
// ResetFog ;
68551: CALL_OW 335
// end ; 3 :
68555: GO 68773
68557: LD_INT 3
68559: DOUBLE
68560: EQUAL
68561: IFTRUE 68565
68563: GO 68669
68565: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
68566: LD_ADDR_VAR 0 2
68570: PUSH
68571: LD_INT 22
68573: PUSH
68574: LD_OWVAR 2
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 25
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PPUSH
68597: CALL_OW 69
68601: ST_TO_ADDR
// if not tmp then
68602: LD_VAR 0 2
68606: NOT
68607: IFFALSE 68611
// exit ;
68609: GO 68773
// un := tmp [ rand ( 1 , tmp ) ] ;
68611: LD_ADDR_VAR 0 3
68615: PUSH
68616: LD_VAR 0 2
68620: PUSH
68621: LD_INT 1
68623: PPUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: CALL_OW 12
68633: ARRAY
68634: ST_TO_ADDR
// if Crawls ( un ) then
68635: LD_VAR 0 3
68639: PPUSH
68640: CALL_OW 318
68644: IFFALSE 68655
// ComWalk ( un ) ;
68646: LD_VAR 0 3
68650: PPUSH
68651: CALL_OW 138
// SetClass ( un , class_mortar ) ;
68655: LD_VAR 0 3
68659: PPUSH
68660: LD_INT 8
68662: PPUSH
68663: CALL_OW 336
// end ; 4 :
68667: GO 68773
68669: LD_INT 4
68671: DOUBLE
68672: EQUAL
68673: IFTRUE 68677
68675: GO 68751
68677: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
68678: LD_ADDR_VAR 0 2
68682: PUSH
68683: LD_INT 22
68685: PUSH
68686: LD_OWVAR 2
68690: PUSH
68691: EMPTY
68692: LIST
68693: LIST
68694: PUSH
68695: LD_INT 30
68697: PUSH
68698: LD_INT 29
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PPUSH
68709: CALL_OW 69
68713: ST_TO_ADDR
// if not tmp then
68714: LD_VAR 0 2
68718: NOT
68719: IFFALSE 68723
// exit ;
68721: GO 68773
// CenterNowOnUnits ( tmp [ 1 ] ) ;
68723: LD_VAR 0 2
68727: PUSH
68728: LD_INT 1
68730: ARRAY
68731: PPUSH
68732: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
68736: LD_VAR 0 2
68740: PUSH
68741: LD_INT 1
68743: ARRAY
68744: PPUSH
68745: CALL_OW 65
// end ; 5 .. 7 :
68749: GO 68773
68751: LD_INT 5
68753: DOUBLE
68754: GREATEREQUAL
68755: IFFALSE 68763
68757: LD_INT 7
68759: DOUBLE
68760: LESSEQUAL
68761: IFTRUE 68765
68763: GO 68772
68765: POP
// StreamSibBomb ; end ;
68766: CALL 65010 0 0
68770: GO 68773
68772: POP
// end ;
68773: PPOPN 3
68775: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
68776: LD_EXP 49
68780: PUSH
68781: LD_EXP 99
68785: AND
68786: IFFALSE 68942
68788: GO 68790
68790: DISABLE
68791: LD_INT 0
68793: PPUSH
68794: PPUSH
68795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
68796: LD_ADDR_VAR 0 2
68800: PUSH
68801: LD_INT 81
68803: PUSH
68804: LD_OWVAR 2
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 2
68815: PUSH
68816: LD_INT 21
68818: PUSH
68819: LD_INT 1
68821: PUSH
68822: EMPTY
68823: LIST
68824: LIST
68825: PUSH
68826: LD_INT 21
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: EMPTY
68833: LIST
68834: LIST
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: LIST
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PPUSH
68845: CALL_OW 69
68849: ST_TO_ADDR
// if not tmp then
68850: LD_VAR 0 2
68854: NOT
68855: IFFALSE 68859
// exit ;
68857: GO 68942
// p := 0 ;
68859: LD_ADDR_VAR 0 3
68863: PUSH
68864: LD_INT 0
68866: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
68867: LD_INT 35
68869: PPUSH
68870: CALL_OW 67
// p := p + 1 ;
68874: LD_ADDR_VAR 0 3
68878: PUSH
68879: LD_VAR 0 3
68883: PUSH
68884: LD_INT 1
68886: PLUS
68887: ST_TO_ADDR
// for i in tmp do
68888: LD_ADDR_VAR 0 1
68892: PUSH
68893: LD_VAR 0 2
68897: PUSH
68898: FOR_IN
68899: IFFALSE 68930
// if GetLives ( i ) < 1000 then
68901: LD_VAR 0 1
68905: PPUSH
68906: CALL_OW 256
68910: PUSH
68911: LD_INT 1000
68913: LESS
68914: IFFALSE 68928
// SetLives ( i , 1000 ) ;
68916: LD_VAR 0 1
68920: PPUSH
68921: LD_INT 1000
68923: PPUSH
68924: CALL_OW 234
68928: GO 68898
68930: POP
68931: POP
// until p > 20 ;
68932: LD_VAR 0 3
68936: PUSH
68937: LD_INT 20
68939: GREATER
68940: IFFALSE 68867
// end ;
68942: PPOPN 3
68944: END
// every 0 0$1 trigger StreamModeActive and sTime do
68945: LD_EXP 49
68949: PUSH
68950: LD_EXP 100
68954: AND
68955: IFFALSE 68990
68957: GO 68959
68959: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
68960: LD_INT 28
68962: PPUSH
68963: LD_OWVAR 2
68967: PPUSH
68968: LD_INT 2
68970: PPUSH
68971: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
68975: LD_INT 30
68977: PPUSH
68978: LD_OWVAR 2
68982: PPUSH
68983: LD_INT 2
68985: PPUSH
68986: CALL_OW 322
// end ;
68990: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
68991: LD_EXP 49
68995: PUSH
68996: LD_EXP 101
69000: AND
69001: IFFALSE 69122
69003: GO 69005
69005: DISABLE
69006: LD_INT 0
69008: PPUSH
69009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
69010: LD_ADDR_VAR 0 2
69014: PUSH
69015: LD_INT 22
69017: PUSH
69018: LD_OWVAR 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 21
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 3
69039: PUSH
69040: LD_INT 23
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: LIST
69058: PPUSH
69059: CALL_OW 69
69063: ST_TO_ADDR
// if not tmp then
69064: LD_VAR 0 2
69068: NOT
69069: IFFALSE 69073
// exit ;
69071: GO 69122
// for i in tmp do
69073: LD_ADDR_VAR 0 1
69077: PUSH
69078: LD_VAR 0 2
69082: PUSH
69083: FOR_IN
69084: IFFALSE 69120
// begin if Crawls ( i ) then
69086: LD_VAR 0 1
69090: PPUSH
69091: CALL_OW 318
69095: IFFALSE 69106
// ComWalk ( i ) ;
69097: LD_VAR 0 1
69101: PPUSH
69102: CALL_OW 138
// SetClass ( i , 2 ) ;
69106: LD_VAR 0 1
69110: PPUSH
69111: LD_INT 2
69113: PPUSH
69114: CALL_OW 336
// end ;
69118: GO 69083
69120: POP
69121: POP
// end ;
69122: PPOPN 2
69124: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
69125: LD_EXP 49
69129: PUSH
69130: LD_EXP 102
69134: AND
69135: IFFALSE 69423
69137: GO 69139
69139: DISABLE
69140: LD_INT 0
69142: PPUSH
69143: PPUSH
69144: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
69145: LD_OWVAR 2
69149: PPUSH
69150: LD_INT 9
69152: PPUSH
69153: LD_INT 1
69155: PPUSH
69156: LD_INT 1
69158: PPUSH
69159: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
69163: LD_INT 9
69165: PPUSH
69166: LD_OWVAR 2
69170: PPUSH
69171: CALL_OW 343
// uc_side := 9 ;
69175: LD_ADDR_OWVAR 20
69179: PUSH
69180: LD_INT 9
69182: ST_TO_ADDR
// uc_nation := 2 ;
69183: LD_ADDR_OWVAR 21
69187: PUSH
69188: LD_INT 2
69190: ST_TO_ADDR
// hc_name := Dark Warrior ;
69191: LD_ADDR_OWVAR 26
69195: PUSH
69196: LD_STRING Dark Warrior
69198: ST_TO_ADDR
// hc_gallery :=  ;
69199: LD_ADDR_OWVAR 33
69203: PUSH
69204: LD_STRING 
69206: ST_TO_ADDR
// hc_noskilllimit := true ;
69207: LD_ADDR_OWVAR 76
69211: PUSH
69212: LD_INT 1
69214: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
69215: LD_ADDR_OWVAR 31
69219: PUSH
69220: LD_INT 30
69222: PUSH
69223: LD_INT 30
69225: PUSH
69226: LD_INT 30
69228: PUSH
69229: LD_INT 30
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: ST_TO_ADDR
// un := CreateHuman ;
69238: LD_ADDR_VAR 0 3
69242: PUSH
69243: CALL_OW 44
69247: ST_TO_ADDR
// hc_noskilllimit := false ;
69248: LD_ADDR_OWVAR 76
69252: PUSH
69253: LD_INT 0
69255: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
69256: LD_VAR 0 3
69260: PPUSH
69261: LD_INT 1
69263: PPUSH
69264: CALL_OW 51
// ToLua ( playRanger() ) ;
69268: LD_STRING playRanger()
69270: PPUSH
69271: CALL_OW 559
// p := 0 ;
69275: LD_ADDR_VAR 0 2
69279: PUSH
69280: LD_INT 0
69282: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
69283: LD_INT 35
69285: PPUSH
69286: CALL_OW 67
// p := p + 1 ;
69290: LD_ADDR_VAR 0 2
69294: PUSH
69295: LD_VAR 0 2
69299: PUSH
69300: LD_INT 1
69302: PLUS
69303: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
69304: LD_VAR 0 3
69308: PPUSH
69309: CALL_OW 256
69313: PUSH
69314: LD_INT 1000
69316: LESS
69317: IFFALSE 69331
// SetLives ( un , 1000 ) ;
69319: LD_VAR 0 3
69323: PPUSH
69324: LD_INT 1000
69326: PPUSH
69327: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
69331: LD_VAR 0 3
69335: PPUSH
69336: LD_INT 81
69338: PUSH
69339: LD_OWVAR 2
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 91
69350: PUSH
69351: LD_VAR 0 3
69355: PUSH
69356: LD_INT 30
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: LIST
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PPUSH
69368: CALL_OW 69
69372: PPUSH
69373: LD_VAR 0 3
69377: PPUSH
69378: CALL_OW 74
69382: PPUSH
69383: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
69387: LD_VAR 0 2
69391: PUSH
69392: LD_INT 80
69394: GREATER
69395: PUSH
69396: LD_VAR 0 3
69400: PPUSH
69401: CALL_OW 301
69405: OR
69406: IFFALSE 69283
// if un then
69408: LD_VAR 0 3
69412: IFFALSE 69423
// RemoveUnit ( un ) ;
69414: LD_VAR 0 3
69418: PPUSH
69419: CALL_OW 64
// end ;
69423: PPOPN 3
69425: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
69426: LD_EXP 103
69430: IFFALSE 69546
69432: GO 69434
69434: DISABLE
69435: LD_INT 0
69437: PPUSH
69438: PPUSH
69439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
69440: LD_ADDR_VAR 0 2
69444: PUSH
69445: LD_INT 81
69447: PUSH
69448: LD_OWVAR 2
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 21
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: EMPTY
69468: LIST
69469: LIST
69470: PPUSH
69471: CALL_OW 69
69475: ST_TO_ADDR
// ToLua ( playComputer() ) ;
69476: LD_STRING playComputer()
69478: PPUSH
69479: CALL_OW 559
// if not tmp then
69483: LD_VAR 0 2
69487: NOT
69488: IFFALSE 69492
// exit ;
69490: GO 69546
// for i in tmp do
69492: LD_ADDR_VAR 0 1
69496: PUSH
69497: LD_VAR 0 2
69501: PUSH
69502: FOR_IN
69503: IFFALSE 69544
// for j := 1 to 4 do
69505: LD_ADDR_VAR 0 3
69509: PUSH
69510: DOUBLE
69511: LD_INT 1
69513: DEC
69514: ST_TO_ADDR
69515: LD_INT 4
69517: PUSH
69518: FOR_TO
69519: IFFALSE 69540
// SetSkill ( i , j , 10 ) ;
69521: LD_VAR 0 1
69525: PPUSH
69526: LD_VAR 0 3
69530: PPUSH
69531: LD_INT 10
69533: PPUSH
69534: CALL_OW 237
69538: GO 69518
69540: POP
69541: POP
69542: GO 69502
69544: POP
69545: POP
// end ;
69546: PPOPN 3
69548: END
// every 0 0$1 trigger s30 do var i , tmp ;
69549: LD_EXP 104
69553: IFFALSE 69622
69555: GO 69557
69557: DISABLE
69558: LD_INT 0
69560: PPUSH
69561: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69562: LD_ADDR_VAR 0 2
69566: PUSH
69567: LD_INT 22
69569: PUSH
69570: LD_OWVAR 2
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PPUSH
69579: CALL_OW 69
69583: ST_TO_ADDR
// if not tmp then
69584: LD_VAR 0 2
69588: NOT
69589: IFFALSE 69593
// exit ;
69591: GO 69622
// for i in tmp do
69593: LD_ADDR_VAR 0 1
69597: PUSH
69598: LD_VAR 0 2
69602: PUSH
69603: FOR_IN
69604: IFFALSE 69620
// SetLives ( i , 300 ) ;
69606: LD_VAR 0 1
69610: PPUSH
69611: LD_INT 300
69613: PPUSH
69614: CALL_OW 234
69618: GO 69603
69620: POP
69621: POP
// end ;
69622: PPOPN 2
69624: END
// every 0 0$1 trigger s60 do var i , tmp ;
69625: LD_EXP 105
69629: IFFALSE 69698
69631: GO 69633
69633: DISABLE
69634: LD_INT 0
69636: PPUSH
69637: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
69638: LD_ADDR_VAR 0 2
69642: PUSH
69643: LD_INT 22
69645: PUSH
69646: LD_OWVAR 2
69650: PUSH
69651: EMPTY
69652: LIST
69653: LIST
69654: PPUSH
69655: CALL_OW 69
69659: ST_TO_ADDR
// if not tmp then
69660: LD_VAR 0 2
69664: NOT
69665: IFFALSE 69669
// exit ;
69667: GO 69698
// for i in tmp do
69669: LD_ADDR_VAR 0 1
69673: PUSH
69674: LD_VAR 0 2
69678: PUSH
69679: FOR_IN
69680: IFFALSE 69696
// SetLives ( i , 600 ) ;
69682: LD_VAR 0 1
69686: PPUSH
69687: LD_INT 600
69689: PPUSH
69690: CALL_OW 234
69694: GO 69679
69696: POP
69697: POP
// end ;
69698: PPOPN 2
69700: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
69701: LD_INT 0
69703: PPUSH
// case cmd of 301 :
69704: LD_VAR 0 1
69708: PUSH
69709: LD_INT 301
69711: DOUBLE
69712: EQUAL
69713: IFTRUE 69717
69715: GO 69749
69717: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
69718: LD_VAR 0 6
69722: PPUSH
69723: LD_VAR 0 7
69727: PPUSH
69728: LD_VAR 0 8
69732: PPUSH
69733: LD_VAR 0 4
69737: PPUSH
69738: LD_VAR 0 5
69742: PPUSH
69743: CALL 70950 0 5
69747: GO 69870
69749: LD_INT 302
69751: DOUBLE
69752: EQUAL
69753: IFTRUE 69757
69755: GO 69794
69757: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
69758: LD_VAR 0 6
69762: PPUSH
69763: LD_VAR 0 7
69767: PPUSH
69768: LD_VAR 0 8
69772: PPUSH
69773: LD_VAR 0 9
69777: PPUSH
69778: LD_VAR 0 4
69782: PPUSH
69783: LD_VAR 0 5
69787: PPUSH
69788: CALL 71041 0 6
69792: GO 69870
69794: LD_INT 303
69796: DOUBLE
69797: EQUAL
69798: IFTRUE 69802
69800: GO 69839
69802: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
69803: LD_VAR 0 6
69807: PPUSH
69808: LD_VAR 0 7
69812: PPUSH
69813: LD_VAR 0 8
69817: PPUSH
69818: LD_VAR 0 9
69822: PPUSH
69823: LD_VAR 0 4
69827: PPUSH
69828: LD_VAR 0 5
69832: PPUSH
69833: CALL 69875 0 6
69837: GO 69870
69839: LD_INT 304
69841: DOUBLE
69842: EQUAL
69843: IFTRUE 69847
69845: GO 69869
69847: POP
// hHackTeleport ( unit , x , y ) ; end ;
69848: LD_VAR 0 2
69852: PPUSH
69853: LD_VAR 0 4
69857: PPUSH
69858: LD_VAR 0 5
69862: PPUSH
69863: CALL 71634 0 3
69867: GO 69870
69869: POP
// end ;
69870: LD_VAR 0 12
69874: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
69875: LD_INT 0
69877: PPUSH
69878: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
69879: LD_VAR 0 1
69883: PUSH
69884: LD_INT 1
69886: LESS
69887: PUSH
69888: LD_VAR 0 1
69892: PUSH
69893: LD_INT 3
69895: GREATER
69896: OR
69897: PUSH
69898: LD_VAR 0 5
69902: PPUSH
69903: LD_VAR 0 6
69907: PPUSH
69908: CALL_OW 428
69912: OR
69913: IFFALSE 69917
// exit ;
69915: GO 70637
// uc_side := your_side ;
69917: LD_ADDR_OWVAR 20
69921: PUSH
69922: LD_OWVAR 2
69926: ST_TO_ADDR
// uc_nation := nation ;
69927: LD_ADDR_OWVAR 21
69931: PUSH
69932: LD_VAR 0 1
69936: ST_TO_ADDR
// bc_level = 1 ;
69937: LD_ADDR_OWVAR 43
69941: PUSH
69942: LD_INT 1
69944: ST_TO_ADDR
// case btype of 1 :
69945: LD_VAR 0 2
69949: PUSH
69950: LD_INT 1
69952: DOUBLE
69953: EQUAL
69954: IFTRUE 69958
69956: GO 69969
69958: POP
// bc_type := b_depot ; 2 :
69959: LD_ADDR_OWVAR 42
69963: PUSH
69964: LD_INT 0
69966: ST_TO_ADDR
69967: GO 70581
69969: LD_INT 2
69971: DOUBLE
69972: EQUAL
69973: IFTRUE 69977
69975: GO 69988
69977: POP
// bc_type := b_warehouse ; 3 :
69978: LD_ADDR_OWVAR 42
69982: PUSH
69983: LD_INT 1
69985: ST_TO_ADDR
69986: GO 70581
69988: LD_INT 3
69990: DOUBLE
69991: EQUAL
69992: IFTRUE 69996
69994: GO 70007
69996: POP
// bc_type := b_lab ; 4 .. 9 :
69997: LD_ADDR_OWVAR 42
70001: PUSH
70002: LD_INT 6
70004: ST_TO_ADDR
70005: GO 70581
70007: LD_INT 4
70009: DOUBLE
70010: GREATEREQUAL
70011: IFFALSE 70019
70013: LD_INT 9
70015: DOUBLE
70016: LESSEQUAL
70017: IFTRUE 70021
70019: GO 70073
70021: POP
// begin bc_type := b_lab_half ;
70022: LD_ADDR_OWVAR 42
70026: PUSH
70027: LD_INT 7
70029: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
70030: LD_ADDR_OWVAR 44
70034: PUSH
70035: LD_INT 10
70037: PUSH
70038: LD_INT 11
70040: PUSH
70041: LD_INT 12
70043: PUSH
70044: LD_INT 15
70046: PUSH
70047: LD_INT 14
70049: PUSH
70050: LD_INT 13
70052: PUSH
70053: EMPTY
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: PUSH
70061: LD_VAR 0 2
70065: PUSH
70066: LD_INT 3
70068: MINUS
70069: ARRAY
70070: ST_TO_ADDR
// end ; 10 .. 13 :
70071: GO 70581
70073: LD_INT 10
70075: DOUBLE
70076: GREATEREQUAL
70077: IFFALSE 70085
70079: LD_INT 13
70081: DOUBLE
70082: LESSEQUAL
70083: IFTRUE 70087
70085: GO 70164
70087: POP
// begin bc_type := b_lab_full ;
70088: LD_ADDR_OWVAR 42
70092: PUSH
70093: LD_INT 8
70095: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
70096: LD_ADDR_OWVAR 44
70100: PUSH
70101: LD_INT 10
70103: PUSH
70104: LD_INT 12
70106: PUSH
70107: LD_INT 14
70109: PUSH
70110: LD_INT 13
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: PUSH
70119: LD_VAR 0 2
70123: PUSH
70124: LD_INT 9
70126: MINUS
70127: ARRAY
70128: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
70129: LD_ADDR_OWVAR 45
70133: PUSH
70134: LD_INT 11
70136: PUSH
70137: LD_INT 15
70139: PUSH
70140: LD_INT 12
70142: PUSH
70143: LD_INT 15
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: PUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_INT 9
70159: MINUS
70160: ARRAY
70161: ST_TO_ADDR
// end ; 14 :
70162: GO 70581
70164: LD_INT 14
70166: DOUBLE
70167: EQUAL
70168: IFTRUE 70172
70170: GO 70183
70172: POP
// bc_type := b_workshop ; 15 :
70173: LD_ADDR_OWVAR 42
70177: PUSH
70178: LD_INT 2
70180: ST_TO_ADDR
70181: GO 70581
70183: LD_INT 15
70185: DOUBLE
70186: EQUAL
70187: IFTRUE 70191
70189: GO 70202
70191: POP
// bc_type := b_factory ; 16 :
70192: LD_ADDR_OWVAR 42
70196: PUSH
70197: LD_INT 3
70199: ST_TO_ADDR
70200: GO 70581
70202: LD_INT 16
70204: DOUBLE
70205: EQUAL
70206: IFTRUE 70210
70208: GO 70221
70210: POP
// bc_type := b_ext_gun ; 17 :
70211: LD_ADDR_OWVAR 42
70215: PUSH
70216: LD_INT 17
70218: ST_TO_ADDR
70219: GO 70581
70221: LD_INT 17
70223: DOUBLE
70224: EQUAL
70225: IFTRUE 70229
70227: GO 70257
70229: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
70230: LD_ADDR_OWVAR 42
70234: PUSH
70235: LD_INT 19
70237: PUSH
70238: LD_INT 23
70240: PUSH
70241: LD_INT 19
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: PUSH
70249: LD_VAR 0 1
70253: ARRAY
70254: ST_TO_ADDR
70255: GO 70581
70257: LD_INT 18
70259: DOUBLE
70260: EQUAL
70261: IFTRUE 70265
70263: GO 70276
70265: POP
// bc_type := b_ext_radar ; 19 :
70266: LD_ADDR_OWVAR 42
70270: PUSH
70271: LD_INT 20
70273: ST_TO_ADDR
70274: GO 70581
70276: LD_INT 19
70278: DOUBLE
70279: EQUAL
70280: IFTRUE 70284
70282: GO 70295
70284: POP
// bc_type := b_ext_radio ; 20 :
70285: LD_ADDR_OWVAR 42
70289: PUSH
70290: LD_INT 22
70292: ST_TO_ADDR
70293: GO 70581
70295: LD_INT 20
70297: DOUBLE
70298: EQUAL
70299: IFTRUE 70303
70301: GO 70314
70303: POP
// bc_type := b_ext_siberium ; 21 :
70304: LD_ADDR_OWVAR 42
70308: PUSH
70309: LD_INT 21
70311: ST_TO_ADDR
70312: GO 70581
70314: LD_INT 21
70316: DOUBLE
70317: EQUAL
70318: IFTRUE 70322
70320: GO 70333
70322: POP
// bc_type := b_ext_computer ; 22 :
70323: LD_ADDR_OWVAR 42
70327: PUSH
70328: LD_INT 24
70330: ST_TO_ADDR
70331: GO 70581
70333: LD_INT 22
70335: DOUBLE
70336: EQUAL
70337: IFTRUE 70341
70339: GO 70352
70341: POP
// bc_type := b_ext_track ; 23 :
70342: LD_ADDR_OWVAR 42
70346: PUSH
70347: LD_INT 16
70349: ST_TO_ADDR
70350: GO 70581
70352: LD_INT 23
70354: DOUBLE
70355: EQUAL
70356: IFTRUE 70360
70358: GO 70371
70360: POP
// bc_type := b_ext_laser ; 24 :
70361: LD_ADDR_OWVAR 42
70365: PUSH
70366: LD_INT 25
70368: ST_TO_ADDR
70369: GO 70581
70371: LD_INT 24
70373: DOUBLE
70374: EQUAL
70375: IFTRUE 70379
70377: GO 70390
70379: POP
// bc_type := b_control_tower ; 25 :
70380: LD_ADDR_OWVAR 42
70384: PUSH
70385: LD_INT 36
70387: ST_TO_ADDR
70388: GO 70581
70390: LD_INT 25
70392: DOUBLE
70393: EQUAL
70394: IFTRUE 70398
70396: GO 70409
70398: POP
// bc_type := b_breastwork ; 26 :
70399: LD_ADDR_OWVAR 42
70403: PUSH
70404: LD_INT 31
70406: ST_TO_ADDR
70407: GO 70581
70409: LD_INT 26
70411: DOUBLE
70412: EQUAL
70413: IFTRUE 70417
70415: GO 70428
70417: POP
// bc_type := b_bunker ; 27 :
70418: LD_ADDR_OWVAR 42
70422: PUSH
70423: LD_INT 32
70425: ST_TO_ADDR
70426: GO 70581
70428: LD_INT 27
70430: DOUBLE
70431: EQUAL
70432: IFTRUE 70436
70434: GO 70447
70436: POP
// bc_type := b_turret ; 28 :
70437: LD_ADDR_OWVAR 42
70441: PUSH
70442: LD_INT 33
70444: ST_TO_ADDR
70445: GO 70581
70447: LD_INT 28
70449: DOUBLE
70450: EQUAL
70451: IFTRUE 70455
70453: GO 70466
70455: POP
// bc_type := b_armoury ; 29 :
70456: LD_ADDR_OWVAR 42
70460: PUSH
70461: LD_INT 4
70463: ST_TO_ADDR
70464: GO 70581
70466: LD_INT 29
70468: DOUBLE
70469: EQUAL
70470: IFTRUE 70474
70472: GO 70485
70474: POP
// bc_type := b_barracks ; 30 :
70475: LD_ADDR_OWVAR 42
70479: PUSH
70480: LD_INT 5
70482: ST_TO_ADDR
70483: GO 70581
70485: LD_INT 30
70487: DOUBLE
70488: EQUAL
70489: IFTRUE 70493
70491: GO 70504
70493: POP
// bc_type := b_solar_power ; 31 :
70494: LD_ADDR_OWVAR 42
70498: PUSH
70499: LD_INT 27
70501: ST_TO_ADDR
70502: GO 70581
70504: LD_INT 31
70506: DOUBLE
70507: EQUAL
70508: IFTRUE 70512
70510: GO 70523
70512: POP
// bc_type := b_oil_power ; 32 :
70513: LD_ADDR_OWVAR 42
70517: PUSH
70518: LD_INT 26
70520: ST_TO_ADDR
70521: GO 70581
70523: LD_INT 32
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70531
70529: GO 70542
70531: POP
// bc_type := b_siberite_power ; 33 :
70532: LD_ADDR_OWVAR 42
70536: PUSH
70537: LD_INT 28
70539: ST_TO_ADDR
70540: GO 70581
70542: LD_INT 33
70544: DOUBLE
70545: EQUAL
70546: IFTRUE 70550
70548: GO 70561
70550: POP
// bc_type := b_oil_mine ; 34 :
70551: LD_ADDR_OWVAR 42
70555: PUSH
70556: LD_INT 29
70558: ST_TO_ADDR
70559: GO 70581
70561: LD_INT 34
70563: DOUBLE
70564: EQUAL
70565: IFTRUE 70569
70567: GO 70580
70569: POP
// bc_type := b_siberite_mine ; end ;
70570: LD_ADDR_OWVAR 42
70574: PUSH
70575: LD_INT 30
70577: ST_TO_ADDR
70578: GO 70581
70580: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
70581: LD_ADDR_VAR 0 8
70585: PUSH
70586: LD_VAR 0 5
70590: PPUSH
70591: LD_VAR 0 6
70595: PPUSH
70596: LD_VAR 0 3
70600: PPUSH
70601: CALL_OW 47
70605: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
70606: LD_OWVAR 42
70610: PUSH
70611: LD_INT 32
70613: PUSH
70614: LD_INT 33
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: IN
70621: IFFALSE 70637
// PlaceWeaponTurret ( b , weapon ) ;
70623: LD_VAR 0 8
70627: PPUSH
70628: LD_VAR 0 4
70632: PPUSH
70633: CALL_OW 431
// end ;
70637: LD_VAR 0 7
70641: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
70642: LD_INT 0
70644: PPUSH
70645: PPUSH
70646: PPUSH
70647: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
70648: LD_ADDR_VAR 0 4
70652: PUSH
70653: LD_INT 22
70655: PUSH
70656: LD_OWVAR 2
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: PUSH
70668: LD_INT 30
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 30
70680: PUSH
70681: LD_INT 1
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: LIST
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PPUSH
70697: CALL_OW 69
70701: ST_TO_ADDR
// if not tmp then
70702: LD_VAR 0 4
70706: NOT
70707: IFFALSE 70711
// exit ;
70709: GO 70770
// for i in tmp do
70711: LD_ADDR_VAR 0 2
70715: PUSH
70716: LD_VAR 0 4
70720: PUSH
70721: FOR_IN
70722: IFFALSE 70768
// for j = 1 to 3 do
70724: LD_ADDR_VAR 0 3
70728: PUSH
70729: DOUBLE
70730: LD_INT 1
70732: DEC
70733: ST_TO_ADDR
70734: LD_INT 3
70736: PUSH
70737: FOR_TO
70738: IFFALSE 70764
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
70740: LD_VAR 0 2
70744: PPUSH
70745: CALL_OW 274
70749: PPUSH
70750: LD_VAR 0 3
70754: PPUSH
70755: LD_INT 99999
70757: PPUSH
70758: CALL_OW 277
70762: GO 70737
70764: POP
70765: POP
70766: GO 70721
70768: POP
70769: POP
// end ;
70770: LD_VAR 0 1
70774: RET
// export function hHackSetLevel10 ; var i , j ; begin
70775: LD_INT 0
70777: PPUSH
70778: PPUSH
70779: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
70780: LD_ADDR_VAR 0 2
70784: PUSH
70785: LD_INT 21
70787: PUSH
70788: LD_INT 1
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: PPUSH
70795: CALL_OW 69
70799: PUSH
70800: FOR_IN
70801: IFFALSE 70853
// if IsSelected ( i ) then
70803: LD_VAR 0 2
70807: PPUSH
70808: CALL_OW 306
70812: IFFALSE 70851
// begin for j := 1 to 4 do
70814: LD_ADDR_VAR 0 3
70818: PUSH
70819: DOUBLE
70820: LD_INT 1
70822: DEC
70823: ST_TO_ADDR
70824: LD_INT 4
70826: PUSH
70827: FOR_TO
70828: IFFALSE 70849
// SetSkill ( i , j , 10 ) ;
70830: LD_VAR 0 2
70834: PPUSH
70835: LD_VAR 0 3
70839: PPUSH
70840: LD_INT 10
70842: PPUSH
70843: CALL_OW 237
70847: GO 70827
70849: POP
70850: POP
// end ;
70851: GO 70800
70853: POP
70854: POP
// end ;
70855: LD_VAR 0 1
70859: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
70860: LD_INT 0
70862: PPUSH
70863: PPUSH
70864: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
70865: LD_ADDR_VAR 0 2
70869: PUSH
70870: LD_INT 22
70872: PUSH
70873: LD_OWVAR 2
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 21
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PPUSH
70896: CALL_OW 69
70900: PUSH
70901: FOR_IN
70902: IFFALSE 70943
// begin for j := 1 to 4 do
70904: LD_ADDR_VAR 0 3
70908: PUSH
70909: DOUBLE
70910: LD_INT 1
70912: DEC
70913: ST_TO_ADDR
70914: LD_INT 4
70916: PUSH
70917: FOR_TO
70918: IFFALSE 70939
// SetSkill ( i , j , 10 ) ;
70920: LD_VAR 0 2
70924: PPUSH
70925: LD_VAR 0 3
70929: PPUSH
70930: LD_INT 10
70932: PPUSH
70933: CALL_OW 237
70937: GO 70917
70939: POP
70940: POP
// end ;
70941: GO 70901
70943: POP
70944: POP
// end ;
70945: LD_VAR 0 1
70949: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
70950: LD_INT 0
70952: PPUSH
// uc_side := your_side ;
70953: LD_ADDR_OWVAR 20
70957: PUSH
70958: LD_OWVAR 2
70962: ST_TO_ADDR
// uc_nation := nation ;
70963: LD_ADDR_OWVAR 21
70967: PUSH
70968: LD_VAR 0 1
70972: ST_TO_ADDR
// InitHc ;
70973: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
70977: LD_INT 0
70979: PPUSH
70980: LD_VAR 0 2
70984: PPUSH
70985: LD_VAR 0 3
70989: PPUSH
70990: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
70994: LD_VAR 0 4
70998: PPUSH
70999: LD_VAR 0 5
71003: PPUSH
71004: CALL_OW 428
71008: PUSH
71009: LD_INT 0
71011: EQUAL
71012: IFFALSE 71036
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
71014: CALL_OW 44
71018: PPUSH
71019: LD_VAR 0 4
71023: PPUSH
71024: LD_VAR 0 5
71028: PPUSH
71029: LD_INT 1
71031: PPUSH
71032: CALL_OW 48
// end ;
71036: LD_VAR 0 6
71040: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
71041: LD_INT 0
71043: PPUSH
71044: PPUSH
// uc_side := your_side ;
71045: LD_ADDR_OWVAR 20
71049: PUSH
71050: LD_OWVAR 2
71054: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
71055: LD_VAR 0 1
71059: PUSH
71060: LD_INT 1
71062: PUSH
71063: LD_INT 2
71065: PUSH
71066: LD_INT 3
71068: PUSH
71069: LD_INT 4
71071: PUSH
71072: LD_INT 5
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: LIST
71079: LIST
71080: LIST
71081: IN
71082: IFFALSE 71094
// uc_nation := nation_american else
71084: LD_ADDR_OWVAR 21
71088: PUSH
71089: LD_INT 1
71091: ST_TO_ADDR
71092: GO 71137
// if chassis in [ 11 , 12 , 13 , 14 ] then
71094: LD_VAR 0 1
71098: PUSH
71099: LD_INT 11
71101: PUSH
71102: LD_INT 12
71104: PUSH
71105: LD_INT 13
71107: PUSH
71108: LD_INT 14
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: IN
71117: IFFALSE 71129
// uc_nation := nation_arabian else
71119: LD_ADDR_OWVAR 21
71123: PUSH
71124: LD_INT 2
71126: ST_TO_ADDR
71127: GO 71137
// uc_nation := nation_russian ;
71129: LD_ADDR_OWVAR 21
71133: PUSH
71134: LD_INT 3
71136: ST_TO_ADDR
// vc_chassis := chassis ;
71137: LD_ADDR_OWVAR 37
71141: PUSH
71142: LD_VAR 0 1
71146: ST_TO_ADDR
// vc_engine := engine ;
71147: LD_ADDR_OWVAR 39
71151: PUSH
71152: LD_VAR 0 2
71156: ST_TO_ADDR
// vc_control := control ;
71157: LD_ADDR_OWVAR 38
71161: PUSH
71162: LD_VAR 0 3
71166: ST_TO_ADDR
// vc_weapon := weapon ;
71167: LD_ADDR_OWVAR 40
71171: PUSH
71172: LD_VAR 0 4
71176: ST_TO_ADDR
// un := CreateVehicle ;
71177: LD_ADDR_VAR 0 8
71181: PUSH
71182: CALL_OW 45
71186: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
71187: LD_VAR 0 8
71191: PPUSH
71192: LD_INT 0
71194: PPUSH
71195: LD_INT 5
71197: PPUSH
71198: CALL_OW 12
71202: PPUSH
71203: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
71207: LD_VAR 0 8
71211: PPUSH
71212: LD_VAR 0 5
71216: PPUSH
71217: LD_VAR 0 6
71221: PPUSH
71222: LD_INT 1
71224: PPUSH
71225: CALL_OW 48
// end ;
71229: LD_VAR 0 7
71233: RET
// export hInvincible ; every 1 do
71234: GO 71236
71236: DISABLE
// hInvincible := [ ] ;
71237: LD_ADDR_EXP 106
71241: PUSH
71242: EMPTY
71243: ST_TO_ADDR
71244: END
// every 10 do var i ;
71245: GO 71247
71247: DISABLE
71248: LD_INT 0
71250: PPUSH
// begin enable ;
71251: ENABLE
// if not hInvincible then
71252: LD_EXP 106
71256: NOT
71257: IFFALSE 71261
// exit ;
71259: GO 71305
// for i in hInvincible do
71261: LD_ADDR_VAR 0 1
71265: PUSH
71266: LD_EXP 106
71270: PUSH
71271: FOR_IN
71272: IFFALSE 71303
// if GetLives ( i ) < 1000 then
71274: LD_VAR 0 1
71278: PPUSH
71279: CALL_OW 256
71283: PUSH
71284: LD_INT 1000
71286: LESS
71287: IFFALSE 71301
// SetLives ( i , 1000 ) ;
71289: LD_VAR 0 1
71293: PPUSH
71294: LD_INT 1000
71296: PPUSH
71297: CALL_OW 234
71301: GO 71271
71303: POP
71304: POP
// end ;
71305: PPOPN 1
71307: END
// export function hHackInvincible ; var i ; begin
71308: LD_INT 0
71310: PPUSH
71311: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
71312: LD_ADDR_VAR 0 2
71316: PUSH
71317: LD_INT 2
71319: PUSH
71320: LD_INT 21
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 21
71332: PUSH
71333: LD_INT 2
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: LIST
71344: PPUSH
71345: CALL_OW 69
71349: PUSH
71350: FOR_IN
71351: IFFALSE 71412
// if IsSelected ( i ) then
71353: LD_VAR 0 2
71357: PPUSH
71358: CALL_OW 306
71362: IFFALSE 71410
// begin if i in hInvincible then
71364: LD_VAR 0 2
71368: PUSH
71369: LD_EXP 106
71373: IN
71374: IFFALSE 71394
// hInvincible := hInvincible diff i else
71376: LD_ADDR_EXP 106
71380: PUSH
71381: LD_EXP 106
71385: PUSH
71386: LD_VAR 0 2
71390: DIFF
71391: ST_TO_ADDR
71392: GO 71410
// hInvincible := hInvincible union i ;
71394: LD_ADDR_EXP 106
71398: PUSH
71399: LD_EXP 106
71403: PUSH
71404: LD_VAR 0 2
71408: UNION
71409: ST_TO_ADDR
// end ;
71410: GO 71350
71412: POP
71413: POP
// end ;
71414: LD_VAR 0 1
71418: RET
// export function hHackInvisible ; var i , j ; begin
71419: LD_INT 0
71421: PPUSH
71422: PPUSH
71423: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
71424: LD_ADDR_VAR 0 2
71428: PUSH
71429: LD_INT 21
71431: PUSH
71432: LD_INT 1
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PPUSH
71439: CALL_OW 69
71443: PUSH
71444: FOR_IN
71445: IFFALSE 71469
// if IsSelected ( i ) then
71447: LD_VAR 0 2
71451: PPUSH
71452: CALL_OW 306
71456: IFFALSE 71467
// ComForceInvisible ( i ) ;
71458: LD_VAR 0 2
71462: PPUSH
71463: CALL_OW 496
71467: GO 71444
71469: POP
71470: POP
// end ;
71471: LD_VAR 0 1
71475: RET
// export function hHackChangeYourSide ; begin
71476: LD_INT 0
71478: PPUSH
// if your_side = 8 then
71479: LD_OWVAR 2
71483: PUSH
71484: LD_INT 8
71486: EQUAL
71487: IFFALSE 71499
// your_side := 0 else
71489: LD_ADDR_OWVAR 2
71493: PUSH
71494: LD_INT 0
71496: ST_TO_ADDR
71497: GO 71513
// your_side := your_side + 1 ;
71499: LD_ADDR_OWVAR 2
71503: PUSH
71504: LD_OWVAR 2
71508: PUSH
71509: LD_INT 1
71511: PLUS
71512: ST_TO_ADDR
// end ;
71513: LD_VAR 0 1
71517: RET
// export function hHackChangeUnitSide ; var i , j ; begin
71518: LD_INT 0
71520: PPUSH
71521: PPUSH
71522: PPUSH
// for i in all_units do
71523: LD_ADDR_VAR 0 2
71527: PUSH
71528: LD_OWVAR 3
71532: PUSH
71533: FOR_IN
71534: IFFALSE 71612
// if IsSelected ( i ) then
71536: LD_VAR 0 2
71540: PPUSH
71541: CALL_OW 306
71545: IFFALSE 71610
// begin j := GetSide ( i ) ;
71547: LD_ADDR_VAR 0 3
71551: PUSH
71552: LD_VAR 0 2
71556: PPUSH
71557: CALL_OW 255
71561: ST_TO_ADDR
// if j = 8 then
71562: LD_VAR 0 3
71566: PUSH
71567: LD_INT 8
71569: EQUAL
71570: IFFALSE 71582
// j := 0 else
71572: LD_ADDR_VAR 0 3
71576: PUSH
71577: LD_INT 0
71579: ST_TO_ADDR
71580: GO 71596
// j := j + 1 ;
71582: LD_ADDR_VAR 0 3
71586: PUSH
71587: LD_VAR 0 3
71591: PUSH
71592: LD_INT 1
71594: PLUS
71595: ST_TO_ADDR
// SetSide ( i , j ) ;
71596: LD_VAR 0 2
71600: PPUSH
71601: LD_VAR 0 3
71605: PPUSH
71606: CALL_OW 235
// end ;
71610: GO 71533
71612: POP
71613: POP
// end ;
71614: LD_VAR 0 1
71618: RET
// export function hHackFog ; begin
71619: LD_INT 0
71621: PPUSH
// FogOff ( true ) ;
71622: LD_INT 1
71624: PPUSH
71625: CALL_OW 344
// end ;
71629: LD_VAR 0 1
71633: RET
// export function hHackTeleport ( unit , x , y ) ; begin
71634: LD_INT 0
71636: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
71637: LD_VAR 0 1
71641: PPUSH
71642: LD_VAR 0 2
71646: PPUSH
71647: LD_VAR 0 3
71651: PPUSH
71652: LD_INT 1
71654: PPUSH
71655: LD_INT 1
71657: PPUSH
71658: CALL_OW 483
// CenterOnXY ( x , y ) ;
71662: LD_VAR 0 2
71666: PPUSH
71667: LD_VAR 0 3
71671: PPUSH
71672: CALL_OW 84
// end ; end_of_file
71676: LD_VAR 0 4
71680: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
71681: LD_INT 0
71683: PPUSH
// ar_miner := 81 ;
71684: LD_ADDR_EXP 114
71688: PUSH
71689: LD_INT 81
71691: ST_TO_ADDR
// ar_crane := 88 ;
71692: LD_ADDR_EXP 113
71696: PUSH
71697: LD_INT 88
71699: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
71700: LD_ADDR_EXP 108
71704: PUSH
71705: LD_INT 89
71707: ST_TO_ADDR
// us_hack := 99 ;
71708: LD_ADDR_EXP 109
71712: PUSH
71713: LD_INT 99
71715: ST_TO_ADDR
// us_artillery := 97 ;
71716: LD_ADDR_EXP 110
71720: PUSH
71721: LD_INT 97
71723: ST_TO_ADDR
// ar_bio_bomb := 91 ;
71724: LD_ADDR_EXP 111
71728: PUSH
71729: LD_INT 91
71731: ST_TO_ADDR
// ar_mortar := 92 ;
71732: LD_ADDR_EXP 112
71736: PUSH
71737: LD_INT 92
71739: ST_TO_ADDR
// ru_flamethrower := 93 ;
71740: LD_ADDR_EXP 115
71744: PUSH
71745: LD_INT 93
71747: ST_TO_ADDR
// ru_radar := 98 ;
71748: LD_ADDR_EXP 107
71752: PUSH
71753: LD_INT 98
71755: ST_TO_ADDR
// tech_Artillery := 80 ;
71756: LD_ADDR_EXP 116
71760: PUSH
71761: LD_INT 80
71763: ST_TO_ADDR
// tech_RadMat := 81 ;
71764: LD_ADDR_EXP 117
71768: PUSH
71769: LD_INT 81
71771: ST_TO_ADDR
// tech_BasicTools := 82 ;
71772: LD_ADDR_EXP 118
71776: PUSH
71777: LD_INT 82
71779: ST_TO_ADDR
// tech_Cargo := 83 ;
71780: LD_ADDR_EXP 119
71784: PUSH
71785: LD_INT 83
71787: ST_TO_ADDR
// tech_Track := 84 ;
71788: LD_ADDR_EXP 120
71792: PUSH
71793: LD_INT 84
71795: ST_TO_ADDR
// tech_Crane := 85 ;
71796: LD_ADDR_EXP 121
71800: PUSH
71801: LD_INT 85
71803: ST_TO_ADDR
// tech_Bulldozer := 86 ;
71804: LD_ADDR_EXP 122
71808: PUSH
71809: LD_INT 86
71811: ST_TO_ADDR
// tech_Hovercraft := 87 ;
71812: LD_ADDR_EXP 123
71816: PUSH
71817: LD_INT 87
71819: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
71820: LD_ADDR_EXP 124
71824: PUSH
71825: LD_INT 88
71827: ST_TO_ADDR
// class_mastodont := 31 ;
71828: LD_ADDR_EXP 125
71832: PUSH
71833: LD_INT 31
71835: ST_TO_ADDR
// class_horse := 21 ;
71836: LD_ADDR_EXP 126
71840: PUSH
71841: LD_INT 21
71843: ST_TO_ADDR
// end ;
71844: LD_VAR 0 1
71848: RET
// every 1 do
71849: GO 71851
71851: DISABLE
// InitGlobalVariables ; end_of_file
71852: CALL 71681 0 0
71856: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71857: LD_VAR 0 1
71861: PPUSH
71862: LD_VAR 0 2
71866: PPUSH
71867: LD_VAR 0 3
71871: PPUSH
71872: LD_VAR 0 4
71876: PPUSH
71877: LD_VAR 0 5
71881: PPUSH
71882: LD_VAR 0 6
71886: PPUSH
71887: CALL 57394 0 6
// end ;
71891: PPOPN 6
71893: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71894: LD_INT 0
71896: PPUSH
// begin if not units then
71897: LD_VAR 0 1
71901: NOT
71902: IFFALSE 71906
// exit ;
71904: GO 71994
// if p1 = 1 then
71906: LD_VAR 0 2
71910: PUSH
71911: LD_INT 1
71913: EQUAL
71914: IFFALSE 71994
// begin if p2 = 1 then
71916: LD_VAR 0 3
71920: PUSH
71921: LD_INT 1
71923: EQUAL
71924: IFFALSE 71955
// begin for i in units do
71926: LD_ADDR_VAR 0 7
71930: PUSH
71931: LD_VAR 0 1
71935: PUSH
71936: FOR_IN
71937: IFFALSE 71953
// begin SetUnitAttackType ( i , 3 ) ;
71939: LD_VAR 0 7
71943: PPUSH
71944: LD_INT 3
71946: PPUSH
71947: CALL_OW 603
// end ;
71951: GO 71936
71953: POP
71954: POP
// end ; if p2 = 2 then
71955: LD_VAR 0 3
71959: PUSH
71960: LD_INT 2
71962: EQUAL
71963: IFFALSE 71994
// begin for i in units do
71965: LD_ADDR_VAR 0 7
71969: PUSH
71970: LD_VAR 0 1
71974: PUSH
71975: FOR_IN
71976: IFFALSE 71992
// begin SetUnitAttackType ( i , 1 ) ;
71978: LD_VAR 0 7
71982: PPUSH
71983: LD_INT 1
71985: PPUSH
71986: CALL_OW 603
// end ;
71990: GO 71975
71992: POP
71993: POP
// end ; end ; end ;
71994: PPOPN 7
71996: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71997: CALL 57369 0 0
// end ; end_of_file
72001: PPOPN 1
72003: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
72004: LD_VAR 0 1
72008: PUSH
72009: LD_INT 200
72011: DOUBLE
72012: GREATEREQUAL
72013: IFFALSE 72021
72015: LD_INT 299
72017: DOUBLE
72018: LESSEQUAL
72019: IFTRUE 72023
72021: GO 72055
72023: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
72024: LD_VAR 0 1
72028: PPUSH
72029: LD_VAR 0 2
72033: PPUSH
72034: LD_VAR 0 3
72038: PPUSH
72039: LD_VAR 0 4
72043: PPUSH
72044: LD_VAR 0 5
72048: PPUSH
72049: CALL 72545 0 5
72053: GO 72132
72055: LD_INT 300
72057: DOUBLE
72058: GREATEREQUAL
72059: IFFALSE 72067
72061: LD_INT 399
72063: DOUBLE
72064: LESSEQUAL
72065: IFTRUE 72069
72067: GO 72131
72069: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
72070: LD_VAR 0 1
72074: PPUSH
72075: LD_VAR 0 2
72079: PPUSH
72080: LD_VAR 0 3
72084: PPUSH
72085: LD_VAR 0 4
72089: PPUSH
72090: LD_VAR 0 5
72094: PPUSH
72095: LD_VAR 0 6
72099: PPUSH
72100: LD_VAR 0 7
72104: PPUSH
72105: LD_VAR 0 8
72109: PPUSH
72110: LD_VAR 0 9
72114: PPUSH
72115: LD_VAR 0 10
72119: PPUSH
72120: LD_VAR 0 11
72124: PPUSH
72125: CALL 69701 0 11
72129: GO 72132
72131: POP
// end ;
72132: PPOPN 11
72134: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
72135: LD_VAR 0 1
72139: PPUSH
72140: LD_VAR 0 2
72144: PPUSH
72145: LD_VAR 0 3
72149: PPUSH
72150: LD_VAR 0 4
72154: PPUSH
72155: LD_VAR 0 5
72159: PPUSH
72160: CALL 72281 0 5
// end ; end_of_file
72164: PPOPN 5
72166: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
72167: LD_INT 0
72169: PPUSH
72170: PPUSH
72171: PPUSH
72172: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
72173: LD_VAR 0 1
72177: PPUSH
72178: CALL_OW 264
72182: PUSH
72183: LD_EXP 111
72187: EQUAL
72188: IFFALSE 72260
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
72190: LD_INT 68
72192: PPUSH
72193: LD_VAR 0 1
72197: PPUSH
72198: CALL_OW 255
72202: PPUSH
72203: CALL_OW 321
72207: PUSH
72208: LD_INT 2
72210: EQUAL
72211: IFFALSE 72223
// eff := 70 else
72213: LD_ADDR_VAR 0 4
72217: PUSH
72218: LD_INT 70
72220: ST_TO_ADDR
72221: GO 72231
// eff := 30 ;
72223: LD_ADDR_VAR 0 4
72227: PUSH
72228: LD_INT 30
72230: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
72231: LD_VAR 0 1
72235: PPUSH
72236: CALL_OW 250
72240: PPUSH
72241: LD_VAR 0 1
72245: PPUSH
72246: CALL_OW 251
72250: PPUSH
72251: LD_VAR 0 4
72255: PPUSH
72256: CALL_OW 495
// end ; end ;
72260: LD_VAR 0 2
72264: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
72265: LD_INT 0
72267: PPUSH
// end ;
72268: LD_VAR 0 4
72272: RET
// export function SOS_Command ( cmd ) ; begin
72273: LD_INT 0
72275: PPUSH
// end ;
72276: LD_VAR 0 2
72280: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
72281: LD_INT 0
72283: PPUSH
// end ;
72284: LD_VAR 0 6
72288: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
72289: LD_INT 0
72291: PPUSH
72292: PPUSH
// if not vehicle or not factory then
72293: LD_VAR 0 1
72297: NOT
72298: PUSH
72299: LD_VAR 0 2
72303: NOT
72304: OR
72305: IFFALSE 72309
// exit ;
72307: GO 72540
// if factoryWaypoints >= factory then
72309: LD_EXP 127
72313: PUSH
72314: LD_VAR 0 2
72318: GREATEREQUAL
72319: IFFALSE 72540
// if factoryWaypoints [ factory ] then
72321: LD_EXP 127
72325: PUSH
72326: LD_VAR 0 2
72330: ARRAY
72331: IFFALSE 72540
// begin if GetControl ( vehicle ) = control_manual then
72333: LD_VAR 0 1
72337: PPUSH
72338: CALL_OW 263
72342: PUSH
72343: LD_INT 1
72345: EQUAL
72346: IFFALSE 72427
// begin driver := IsDrivenBy ( vehicle ) ;
72348: LD_ADDR_VAR 0 4
72352: PUSH
72353: LD_VAR 0 1
72357: PPUSH
72358: CALL_OW 311
72362: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72363: LD_VAR 0 4
72367: PPUSH
72368: LD_EXP 127
72372: PUSH
72373: LD_VAR 0 2
72377: ARRAY
72378: PUSH
72379: LD_INT 3
72381: ARRAY
72382: PPUSH
72383: LD_EXP 127
72387: PUSH
72388: LD_VAR 0 2
72392: ARRAY
72393: PUSH
72394: LD_INT 4
72396: ARRAY
72397: PPUSH
72398: CALL_OW 171
// AddComExitVehicle ( driver ) ;
72402: LD_VAR 0 4
72406: PPUSH
72407: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
72411: LD_VAR 0 4
72415: PPUSH
72416: LD_VAR 0 2
72420: PPUSH
72421: CALL_OW 180
// end else
72425: GO 72540
// if GetControl ( vehicle ) = control_remote then
72427: LD_VAR 0 1
72431: PPUSH
72432: CALL_OW 263
72436: PUSH
72437: LD_INT 2
72439: EQUAL
72440: IFFALSE 72501
// begin wait ( 0 0$2 ) ;
72442: LD_INT 70
72444: PPUSH
72445: CALL_OW 67
// if Connect ( vehicle ) then
72449: LD_VAR 0 1
72453: PPUSH
72454: CALL 24884 0 1
72458: IFFALSE 72499
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72460: LD_VAR 0 1
72464: PPUSH
72465: LD_EXP 127
72469: PUSH
72470: LD_VAR 0 2
72474: ARRAY
72475: PUSH
72476: LD_INT 3
72478: ARRAY
72479: PPUSH
72480: LD_EXP 127
72484: PUSH
72485: LD_VAR 0 2
72489: ARRAY
72490: PUSH
72491: LD_INT 4
72493: ARRAY
72494: PPUSH
72495: CALL_OW 171
// end else
72499: GO 72540
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
72501: LD_VAR 0 1
72505: PPUSH
72506: LD_EXP 127
72510: PUSH
72511: LD_VAR 0 2
72515: ARRAY
72516: PUSH
72517: LD_INT 3
72519: ARRAY
72520: PPUSH
72521: LD_EXP 127
72525: PUSH
72526: LD_VAR 0 2
72530: ARRAY
72531: PUSH
72532: LD_INT 4
72534: ARRAY
72535: PPUSH
72536: CALL_OW 171
// end ; end ;
72540: LD_VAR 0 3
72544: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
72545: LD_INT 0
72547: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
72548: LD_VAR 0 1
72552: PUSH
72553: LD_INT 250
72555: EQUAL
72556: PUSH
72557: LD_VAR 0 2
72561: PPUSH
72562: CALL_OW 264
72566: PUSH
72567: LD_EXP 114
72571: EQUAL
72572: AND
72573: IFFALSE 72594
// MinerPlaceMine ( unit , x , y ) ;
72575: LD_VAR 0 2
72579: PPUSH
72580: LD_VAR 0 4
72584: PPUSH
72585: LD_VAR 0 5
72589: PPUSH
72590: CALL 75322 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
72594: LD_VAR 0 1
72598: PUSH
72599: LD_INT 251
72601: EQUAL
72602: PUSH
72603: LD_VAR 0 2
72607: PPUSH
72608: CALL_OW 264
72612: PUSH
72613: LD_EXP 114
72617: EQUAL
72618: AND
72619: IFFALSE 72640
// MinerDetonateMine ( unit , x , y ) ;
72621: LD_VAR 0 2
72625: PPUSH
72626: LD_VAR 0 4
72630: PPUSH
72631: LD_VAR 0 5
72635: PPUSH
72636: CALL 75599 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
72640: LD_VAR 0 1
72644: PUSH
72645: LD_INT 252
72647: EQUAL
72648: PUSH
72649: LD_VAR 0 2
72653: PPUSH
72654: CALL_OW 264
72658: PUSH
72659: LD_EXP 114
72663: EQUAL
72664: AND
72665: IFFALSE 72686
// MinerCreateMinefield ( unit , x , y ) ;
72667: LD_VAR 0 2
72671: PPUSH
72672: LD_VAR 0 4
72676: PPUSH
72677: LD_VAR 0 5
72681: PPUSH
72682: CALL 76016 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
72686: LD_VAR 0 1
72690: PUSH
72691: LD_INT 253
72693: EQUAL
72694: PUSH
72695: LD_VAR 0 2
72699: PPUSH
72700: CALL_OW 257
72704: PUSH
72705: LD_INT 5
72707: EQUAL
72708: AND
72709: IFFALSE 72730
// ComBinocular ( unit , x , y ) ;
72711: LD_VAR 0 2
72715: PPUSH
72716: LD_VAR 0 4
72720: PPUSH
72721: LD_VAR 0 5
72725: PPUSH
72726: CALL 76387 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
72730: LD_VAR 0 1
72734: PUSH
72735: LD_INT 254
72737: EQUAL
72738: PUSH
72739: LD_VAR 0 2
72743: PPUSH
72744: CALL_OW 264
72748: PUSH
72749: LD_EXP 109
72753: EQUAL
72754: AND
72755: PUSH
72756: LD_VAR 0 3
72760: PPUSH
72761: CALL_OW 263
72765: PUSH
72766: LD_INT 3
72768: EQUAL
72769: AND
72770: IFFALSE 72786
// HackDestroyVehicle ( unit , selectedUnit ) ;
72772: LD_VAR 0 2
72776: PPUSH
72777: LD_VAR 0 3
72781: PPUSH
72782: CALL 74682 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
72786: LD_VAR 0 1
72790: PUSH
72791: LD_INT 255
72793: EQUAL
72794: PUSH
72795: LD_VAR 0 2
72799: PPUSH
72800: CALL_OW 264
72804: PUSH
72805: LD_INT 14
72807: PUSH
72808: LD_INT 53
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: IN
72815: AND
72816: PUSH
72817: LD_VAR 0 4
72821: PPUSH
72822: LD_VAR 0 5
72826: PPUSH
72827: CALL_OW 488
72831: AND
72832: IFFALSE 72856
// CutTreeXYR ( unit , x , y , 12 ) ;
72834: LD_VAR 0 2
72838: PPUSH
72839: LD_VAR 0 4
72843: PPUSH
72844: LD_VAR 0 5
72848: PPUSH
72849: LD_INT 12
72851: PPUSH
72852: CALL 73248 0 4
// if cmd = 256 then
72856: LD_VAR 0 1
72860: PUSH
72861: LD_INT 256
72863: EQUAL
72864: IFFALSE 72885
// SetFactoryWaypoint ( unit , x , y ) ;
72866: LD_VAR 0 2
72870: PPUSH
72871: LD_VAR 0 4
72875: PPUSH
72876: LD_VAR 0 5
72880: PPUSH
72881: CALL 72890 0 3
// end ;
72885: LD_VAR 0 6
72889: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
72890: LD_INT 0
72892: PPUSH
72893: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
72894: LD_VAR 0 1
72898: NOT
72899: PUSH
72900: LD_VAR 0 2
72904: PPUSH
72905: LD_VAR 0 3
72909: PPUSH
72910: CALL_OW 488
72914: NOT
72915: OR
72916: PUSH
72917: LD_VAR 0 1
72921: PPUSH
72922: CALL_OW 266
72926: PUSH
72927: LD_INT 3
72929: NONEQUAL
72930: PUSH
72931: LD_VAR 0 1
72935: PPUSH
72936: CALL_OW 247
72940: PUSH
72941: LD_INT 1
72943: EQUAL
72944: NOT
72945: AND
72946: OR
72947: IFFALSE 72951
// exit ;
72949: GO 73100
// if GetType ( factory ) = unit_human then
72951: LD_VAR 0 1
72955: PPUSH
72956: CALL_OW 247
72960: PUSH
72961: LD_INT 1
72963: EQUAL
72964: IFFALSE 72981
// factory := IsInUnit ( factory ) ;
72966: LD_ADDR_VAR 0 1
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: CALL_OW 310
72980: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 266
72990: PUSH
72991: LD_INT 3
72993: NONEQUAL
72994: IFFALSE 72998
// exit ;
72996: GO 73100
// if HexInfo ( x , y ) = factory then
72998: LD_VAR 0 2
73002: PPUSH
73003: LD_VAR 0 3
73007: PPUSH
73008: CALL_OW 428
73012: PUSH
73013: LD_VAR 0 1
73017: EQUAL
73018: IFFALSE 73045
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
73020: LD_ADDR_EXP 127
73024: PUSH
73025: LD_EXP 127
73029: PPUSH
73030: LD_VAR 0 1
73034: PPUSH
73035: LD_INT 0
73037: PPUSH
73038: CALL_OW 1
73042: ST_TO_ADDR
73043: GO 73096
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
73045: LD_ADDR_EXP 127
73049: PUSH
73050: LD_EXP 127
73054: PPUSH
73055: LD_VAR 0 1
73059: PPUSH
73060: LD_VAR 0 1
73064: PPUSH
73065: CALL_OW 255
73069: PUSH
73070: LD_VAR 0 1
73074: PUSH
73075: LD_VAR 0 2
73079: PUSH
73080: LD_VAR 0 3
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: PPUSH
73091: CALL_OW 1
73095: ST_TO_ADDR
// UpdateFactoryWaypoints ;
73096: CALL 73105 0 0
// end ;
73100: LD_VAR 0 4
73104: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
73105: LD_INT 0
73107: PPUSH
73108: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
73109: LD_STRING resetFactoryWaypoint();
73111: PPUSH
73112: CALL_OW 559
// if factoryWaypoints then
73116: LD_EXP 127
73120: IFFALSE 73243
// begin for i := 1 to factoryWaypoints do
73122: LD_ADDR_VAR 0 2
73126: PUSH
73127: DOUBLE
73128: LD_INT 1
73130: DEC
73131: ST_TO_ADDR
73132: LD_EXP 127
73136: PUSH
73137: FOR_TO
73138: IFFALSE 73241
// if factoryWaypoints [ i ] then
73140: LD_EXP 127
73144: PUSH
73145: LD_VAR 0 2
73149: ARRAY
73150: IFFALSE 73239
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
73152: LD_STRING setFactoryWaypointXY(
73154: PUSH
73155: LD_EXP 127
73159: PUSH
73160: LD_VAR 0 2
73164: ARRAY
73165: PUSH
73166: LD_INT 1
73168: ARRAY
73169: STR
73170: PUSH
73171: LD_STRING ,
73173: STR
73174: PUSH
73175: LD_EXP 127
73179: PUSH
73180: LD_VAR 0 2
73184: ARRAY
73185: PUSH
73186: LD_INT 2
73188: ARRAY
73189: STR
73190: PUSH
73191: LD_STRING ,
73193: STR
73194: PUSH
73195: LD_EXP 127
73199: PUSH
73200: LD_VAR 0 2
73204: ARRAY
73205: PUSH
73206: LD_INT 3
73208: ARRAY
73209: STR
73210: PUSH
73211: LD_STRING ,
73213: STR
73214: PUSH
73215: LD_EXP 127
73219: PUSH
73220: LD_VAR 0 2
73224: ARRAY
73225: PUSH
73226: LD_INT 4
73228: ARRAY
73229: STR
73230: PUSH
73231: LD_STRING )
73233: STR
73234: PPUSH
73235: CALL_OW 559
73239: GO 73137
73241: POP
73242: POP
// end ; end ;
73243: LD_VAR 0 1
73247: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
73248: LD_INT 0
73250: PPUSH
73251: PPUSH
73252: PPUSH
73253: PPUSH
73254: PPUSH
73255: PPUSH
73256: PPUSH
73257: PPUSH
73258: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
73259: LD_VAR 0 1
73263: NOT
73264: PUSH
73265: LD_VAR 0 2
73269: PPUSH
73270: LD_VAR 0 3
73274: PPUSH
73275: CALL_OW 488
73279: NOT
73280: OR
73281: PUSH
73282: LD_VAR 0 4
73286: NOT
73287: OR
73288: IFFALSE 73292
// exit ;
73290: GO 73632
// list := [ ] ;
73292: LD_ADDR_VAR 0 13
73296: PUSH
73297: EMPTY
73298: ST_TO_ADDR
// if x - r < 0 then
73299: LD_VAR 0 2
73303: PUSH
73304: LD_VAR 0 4
73308: MINUS
73309: PUSH
73310: LD_INT 0
73312: LESS
73313: IFFALSE 73325
// min_x := 0 else
73315: LD_ADDR_VAR 0 7
73319: PUSH
73320: LD_INT 0
73322: ST_TO_ADDR
73323: GO 73341
// min_x := x - r ;
73325: LD_ADDR_VAR 0 7
73329: PUSH
73330: LD_VAR 0 2
73334: PUSH
73335: LD_VAR 0 4
73339: MINUS
73340: ST_TO_ADDR
// if y - r < 0 then
73341: LD_VAR 0 3
73345: PUSH
73346: LD_VAR 0 4
73350: MINUS
73351: PUSH
73352: LD_INT 0
73354: LESS
73355: IFFALSE 73367
// min_y := 0 else
73357: LD_ADDR_VAR 0 8
73361: PUSH
73362: LD_INT 0
73364: ST_TO_ADDR
73365: GO 73383
// min_y := y - r ;
73367: LD_ADDR_VAR 0 8
73371: PUSH
73372: LD_VAR 0 3
73376: PUSH
73377: LD_VAR 0 4
73381: MINUS
73382: ST_TO_ADDR
// max_x := x + r ;
73383: LD_ADDR_VAR 0 9
73387: PUSH
73388: LD_VAR 0 2
73392: PUSH
73393: LD_VAR 0 4
73397: PLUS
73398: ST_TO_ADDR
// max_y := y + r ;
73399: LD_ADDR_VAR 0 10
73403: PUSH
73404: LD_VAR 0 3
73408: PUSH
73409: LD_VAR 0 4
73413: PLUS
73414: ST_TO_ADDR
// for _x = min_x to max_x do
73415: LD_ADDR_VAR 0 11
73419: PUSH
73420: DOUBLE
73421: LD_VAR 0 7
73425: DEC
73426: ST_TO_ADDR
73427: LD_VAR 0 9
73431: PUSH
73432: FOR_TO
73433: IFFALSE 73550
// for _y = min_y to max_y do
73435: LD_ADDR_VAR 0 12
73439: PUSH
73440: DOUBLE
73441: LD_VAR 0 8
73445: DEC
73446: ST_TO_ADDR
73447: LD_VAR 0 10
73451: PUSH
73452: FOR_TO
73453: IFFALSE 73546
// begin if not ValidHex ( _x , _y ) then
73455: LD_VAR 0 11
73459: PPUSH
73460: LD_VAR 0 12
73464: PPUSH
73465: CALL_OW 488
73469: NOT
73470: IFFALSE 73474
// continue ;
73472: GO 73452
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
73474: LD_VAR 0 11
73478: PPUSH
73479: LD_VAR 0 12
73483: PPUSH
73484: CALL_OW 351
73488: PUSH
73489: LD_VAR 0 11
73493: PPUSH
73494: LD_VAR 0 12
73498: PPUSH
73499: CALL_OW 554
73503: AND
73504: IFFALSE 73544
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
73506: LD_ADDR_VAR 0 13
73510: PUSH
73511: LD_VAR 0 13
73515: PPUSH
73516: LD_VAR 0 13
73520: PUSH
73521: LD_INT 1
73523: PLUS
73524: PPUSH
73525: LD_VAR 0 11
73529: PUSH
73530: LD_VAR 0 12
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PPUSH
73539: CALL_OW 2
73543: ST_TO_ADDR
// end ;
73544: GO 73452
73546: POP
73547: POP
73548: GO 73432
73550: POP
73551: POP
// if not list then
73552: LD_VAR 0 13
73556: NOT
73557: IFFALSE 73561
// exit ;
73559: GO 73632
// for i in list do
73561: LD_ADDR_VAR 0 6
73565: PUSH
73566: LD_VAR 0 13
73570: PUSH
73571: FOR_IN
73572: IFFALSE 73630
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
73574: LD_VAR 0 1
73578: PPUSH
73579: LD_STRING M
73581: PUSH
73582: LD_VAR 0 6
73586: PUSH
73587: LD_INT 1
73589: ARRAY
73590: PUSH
73591: LD_VAR 0 6
73595: PUSH
73596: LD_INT 2
73598: ARRAY
73599: PUSH
73600: LD_INT 0
73602: PUSH
73603: LD_INT 0
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: LIST
73616: LIST
73617: LIST
73618: LIST
73619: LIST
73620: PUSH
73621: EMPTY
73622: LIST
73623: PPUSH
73624: CALL_OW 447
73628: GO 73571
73630: POP
73631: POP
// end ;
73632: LD_VAR 0 5
73636: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
73637: LD_EXP 128
73641: NOT
73642: IFFALSE 73692
73644: GO 73646
73646: DISABLE
// begin initHack := true ;
73647: LD_ADDR_EXP 128
73651: PUSH
73652: LD_INT 1
73654: ST_TO_ADDR
// hackTanks := [ ] ;
73655: LD_ADDR_EXP 129
73659: PUSH
73660: EMPTY
73661: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
73662: LD_ADDR_EXP 130
73666: PUSH
73667: EMPTY
73668: ST_TO_ADDR
// hackLimit := 3 ;
73669: LD_ADDR_EXP 131
73673: PUSH
73674: LD_INT 3
73676: ST_TO_ADDR
// hackDist := 12 ;
73677: LD_ADDR_EXP 132
73681: PUSH
73682: LD_INT 12
73684: ST_TO_ADDR
// hackCounter := [ ] ;
73685: LD_ADDR_EXP 133
73689: PUSH
73690: EMPTY
73691: ST_TO_ADDR
// end ;
73692: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
73693: LD_EXP 128
73697: PUSH
73698: LD_INT 34
73700: PUSH
73701: LD_EXP 109
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PPUSH
73710: CALL_OW 69
73714: AND
73715: IFFALSE 73970
73717: GO 73719
73719: DISABLE
73720: LD_INT 0
73722: PPUSH
73723: PPUSH
// begin enable ;
73724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
73725: LD_ADDR_VAR 0 1
73729: PUSH
73730: LD_INT 34
73732: PUSH
73733: LD_EXP 109
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PPUSH
73742: CALL_OW 69
73746: PUSH
73747: FOR_IN
73748: IFFALSE 73968
// begin if not i in hackTanks then
73750: LD_VAR 0 1
73754: PUSH
73755: LD_EXP 129
73759: IN
73760: NOT
73761: IFFALSE 73844
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
73763: LD_ADDR_EXP 129
73767: PUSH
73768: LD_EXP 129
73772: PPUSH
73773: LD_EXP 129
73777: PUSH
73778: LD_INT 1
73780: PLUS
73781: PPUSH
73782: LD_VAR 0 1
73786: PPUSH
73787: CALL_OW 1
73791: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
73792: LD_ADDR_EXP 130
73796: PUSH
73797: LD_EXP 130
73801: PPUSH
73802: LD_EXP 130
73806: PUSH
73807: LD_INT 1
73809: PLUS
73810: PPUSH
73811: EMPTY
73812: PPUSH
73813: CALL_OW 1
73817: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
73818: LD_ADDR_EXP 133
73822: PUSH
73823: LD_EXP 133
73827: PPUSH
73828: LD_EXP 133
73832: PUSH
73833: LD_INT 1
73835: PLUS
73836: PPUSH
73837: EMPTY
73838: PPUSH
73839: CALL_OW 1
73843: ST_TO_ADDR
// end ; if not IsOk ( i ) then
73844: LD_VAR 0 1
73848: PPUSH
73849: CALL_OW 302
73853: NOT
73854: IFFALSE 73867
// begin HackUnlinkAll ( i ) ;
73856: LD_VAR 0 1
73860: PPUSH
73861: CALL 73973 0 1
// continue ;
73865: GO 73747
// end ; HackCheckCapturedStatus ( i ) ;
73867: LD_VAR 0 1
73871: PPUSH
73872: CALL 74416 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
73876: LD_ADDR_VAR 0 2
73880: PUSH
73881: LD_INT 81
73883: PUSH
73884: LD_VAR 0 1
73888: PPUSH
73889: CALL_OW 255
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 33
73900: PUSH
73901: LD_INT 3
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 91
73910: PUSH
73911: LD_VAR 0 1
73915: PUSH
73916: LD_EXP 132
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: LIST
73925: PUSH
73926: LD_INT 50
73928: PUSH
73929: EMPTY
73930: LIST
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: PPUSH
73938: CALL_OW 69
73942: ST_TO_ADDR
// if not tmp then
73943: LD_VAR 0 2
73947: NOT
73948: IFFALSE 73952
// continue ;
73950: GO 73747
// HackLink ( i , tmp ) ;
73952: LD_VAR 0 1
73956: PPUSH
73957: LD_VAR 0 2
73961: PPUSH
73962: CALL 74109 0 2
// end ;
73966: GO 73747
73968: POP
73969: POP
// end ;
73970: PPOPN 2
73972: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
73973: LD_INT 0
73975: PPUSH
73976: PPUSH
73977: PPUSH
// if not hack in hackTanks then
73978: LD_VAR 0 1
73982: PUSH
73983: LD_EXP 129
73987: IN
73988: NOT
73989: IFFALSE 73993
// exit ;
73991: GO 74104
// index := GetElementIndex ( hackTanks , hack ) ;
73993: LD_ADDR_VAR 0 4
73997: PUSH
73998: LD_EXP 129
74002: PPUSH
74003: LD_VAR 0 1
74007: PPUSH
74008: CALL 21698 0 2
74012: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
74013: LD_EXP 130
74017: PUSH
74018: LD_VAR 0 4
74022: ARRAY
74023: IFFALSE 74104
// begin for i in hackTanksCaptured [ index ] do
74025: LD_ADDR_VAR 0 3
74029: PUSH
74030: LD_EXP 130
74034: PUSH
74035: LD_VAR 0 4
74039: ARRAY
74040: PUSH
74041: FOR_IN
74042: IFFALSE 74068
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
74044: LD_VAR 0 3
74048: PUSH
74049: LD_INT 1
74051: ARRAY
74052: PPUSH
74053: LD_VAR 0 3
74057: PUSH
74058: LD_INT 2
74060: ARRAY
74061: PPUSH
74062: CALL_OW 235
74066: GO 74041
74068: POP
74069: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
74070: LD_ADDR_EXP 130
74074: PUSH
74075: LD_EXP 130
74079: PPUSH
74080: LD_VAR 0 4
74084: PPUSH
74085: EMPTY
74086: PPUSH
74087: CALL_OW 1
74091: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
74092: LD_VAR 0 1
74096: PPUSH
74097: LD_INT 0
74099: PPUSH
74100: CALL_OW 505
// end ; end ;
74104: LD_VAR 0 2
74108: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
74109: LD_INT 0
74111: PPUSH
74112: PPUSH
74113: PPUSH
// if not hack in hackTanks or not vehicles then
74114: LD_VAR 0 1
74118: PUSH
74119: LD_EXP 129
74123: IN
74124: NOT
74125: PUSH
74126: LD_VAR 0 2
74130: NOT
74131: OR
74132: IFFALSE 74136
// exit ;
74134: GO 74411
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
74136: LD_ADDR_VAR 0 2
74140: PUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: LD_VAR 0 2
74150: PPUSH
74151: LD_INT 1
74153: PPUSH
74154: LD_INT 1
74156: PPUSH
74157: CALL 22348 0 4
74161: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
74162: LD_ADDR_VAR 0 5
74166: PUSH
74167: LD_EXP 129
74171: PPUSH
74172: LD_VAR 0 1
74176: PPUSH
74177: CALL 21698 0 2
74181: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
74182: LD_EXP 130
74186: PUSH
74187: LD_VAR 0 5
74191: ARRAY
74192: PUSH
74193: LD_EXP 131
74197: LESS
74198: IFFALSE 74387
// begin for i := 1 to vehicles do
74200: LD_ADDR_VAR 0 4
74204: PUSH
74205: DOUBLE
74206: LD_INT 1
74208: DEC
74209: ST_TO_ADDR
74210: LD_VAR 0 2
74214: PUSH
74215: FOR_TO
74216: IFFALSE 74385
// begin if hackTanksCaptured [ index ] = hackLimit then
74218: LD_EXP 130
74222: PUSH
74223: LD_VAR 0 5
74227: ARRAY
74228: PUSH
74229: LD_EXP 131
74233: EQUAL
74234: IFFALSE 74238
// break ;
74236: GO 74385
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
74238: LD_ADDR_EXP 133
74242: PUSH
74243: LD_EXP 133
74247: PPUSH
74248: LD_VAR 0 5
74252: PPUSH
74253: LD_EXP 133
74257: PUSH
74258: LD_VAR 0 5
74262: ARRAY
74263: PUSH
74264: LD_INT 1
74266: PLUS
74267: PPUSH
74268: CALL_OW 1
74272: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
74273: LD_ADDR_EXP 130
74277: PUSH
74278: LD_EXP 130
74282: PPUSH
74283: LD_VAR 0 5
74287: PUSH
74288: LD_EXP 130
74292: PUSH
74293: LD_VAR 0 5
74297: ARRAY
74298: PUSH
74299: LD_INT 1
74301: PLUS
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PPUSH
74307: LD_VAR 0 2
74311: PUSH
74312: LD_VAR 0 4
74316: ARRAY
74317: PUSH
74318: LD_VAR 0 2
74322: PUSH
74323: LD_VAR 0 4
74327: ARRAY
74328: PPUSH
74329: CALL_OW 255
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PPUSH
74338: CALL 21913 0 3
74342: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
74343: LD_VAR 0 2
74347: PUSH
74348: LD_VAR 0 4
74352: ARRAY
74353: PPUSH
74354: LD_VAR 0 1
74358: PPUSH
74359: CALL_OW 255
74363: PPUSH
74364: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
74368: LD_VAR 0 2
74372: PUSH
74373: LD_VAR 0 4
74377: ARRAY
74378: PPUSH
74379: CALL_OW 141
// end ;
74383: GO 74215
74385: POP
74386: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74387: LD_VAR 0 1
74391: PPUSH
74392: LD_EXP 130
74396: PUSH
74397: LD_VAR 0 5
74401: ARRAY
74402: PUSH
74403: LD_INT 0
74405: PLUS
74406: PPUSH
74407: CALL_OW 505
// end ;
74411: LD_VAR 0 3
74415: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
74416: LD_INT 0
74418: PPUSH
74419: PPUSH
74420: PPUSH
74421: PPUSH
// if not hack in hackTanks then
74422: LD_VAR 0 1
74426: PUSH
74427: LD_EXP 129
74431: IN
74432: NOT
74433: IFFALSE 74437
// exit ;
74435: GO 74677
// index := GetElementIndex ( hackTanks , hack ) ;
74437: LD_ADDR_VAR 0 4
74441: PUSH
74442: LD_EXP 129
74446: PPUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: CALL 21698 0 2
74456: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
74457: LD_ADDR_VAR 0 3
74461: PUSH
74462: DOUBLE
74463: LD_EXP 130
74467: PUSH
74468: LD_VAR 0 4
74472: ARRAY
74473: INC
74474: ST_TO_ADDR
74475: LD_INT 1
74477: PUSH
74478: FOR_DOWNTO
74479: IFFALSE 74651
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
74481: LD_ADDR_VAR 0 5
74485: PUSH
74486: LD_EXP 130
74490: PUSH
74491: LD_VAR 0 4
74495: ARRAY
74496: PUSH
74497: LD_VAR 0 3
74501: ARRAY
74502: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
74503: LD_VAR 0 5
74507: PUSH
74508: LD_INT 1
74510: ARRAY
74511: PPUSH
74512: CALL_OW 302
74516: NOT
74517: PUSH
74518: LD_VAR 0 5
74522: PUSH
74523: LD_INT 1
74525: ARRAY
74526: PPUSH
74527: CALL_OW 255
74531: PUSH
74532: LD_VAR 0 1
74536: PPUSH
74537: CALL_OW 255
74541: NONEQUAL
74542: OR
74543: IFFALSE 74649
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
74545: LD_VAR 0 5
74549: PUSH
74550: LD_INT 1
74552: ARRAY
74553: PPUSH
74554: CALL_OW 305
74558: PUSH
74559: LD_VAR 0 5
74563: PUSH
74564: LD_INT 1
74566: ARRAY
74567: PPUSH
74568: CALL_OW 255
74572: PUSH
74573: LD_VAR 0 1
74577: PPUSH
74578: CALL_OW 255
74582: EQUAL
74583: AND
74584: IFFALSE 74608
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
74586: LD_VAR 0 5
74590: PUSH
74591: LD_INT 1
74593: ARRAY
74594: PPUSH
74595: LD_VAR 0 5
74599: PUSH
74600: LD_INT 2
74602: ARRAY
74603: PPUSH
74604: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
74608: LD_ADDR_EXP 130
74612: PUSH
74613: LD_EXP 130
74617: PPUSH
74618: LD_VAR 0 4
74622: PPUSH
74623: LD_EXP 130
74627: PUSH
74628: LD_VAR 0 4
74632: ARRAY
74633: PPUSH
74634: LD_VAR 0 3
74638: PPUSH
74639: CALL_OW 3
74643: PPUSH
74644: CALL_OW 1
74648: ST_TO_ADDR
// end ; end ;
74649: GO 74478
74651: POP
74652: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
74653: LD_VAR 0 1
74657: PPUSH
74658: LD_EXP 130
74662: PUSH
74663: LD_VAR 0 4
74667: ARRAY
74668: PUSH
74669: LD_INT 0
74671: PLUS
74672: PPUSH
74673: CALL_OW 505
// end ;
74677: LD_VAR 0 2
74681: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
74682: LD_INT 0
74684: PPUSH
74685: PPUSH
74686: PPUSH
74687: PPUSH
// if not hack in hackTanks then
74688: LD_VAR 0 1
74692: PUSH
74693: LD_EXP 129
74697: IN
74698: NOT
74699: IFFALSE 74703
// exit ;
74701: GO 74788
// index := GetElementIndex ( hackTanks , hack ) ;
74703: LD_ADDR_VAR 0 5
74707: PUSH
74708: LD_EXP 129
74712: PPUSH
74713: LD_VAR 0 1
74717: PPUSH
74718: CALL 21698 0 2
74722: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
74723: LD_ADDR_VAR 0 4
74727: PUSH
74728: DOUBLE
74729: LD_INT 1
74731: DEC
74732: ST_TO_ADDR
74733: LD_EXP 130
74737: PUSH
74738: LD_VAR 0 5
74742: ARRAY
74743: PUSH
74744: FOR_TO
74745: IFFALSE 74786
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
74747: LD_EXP 130
74751: PUSH
74752: LD_VAR 0 5
74756: ARRAY
74757: PUSH
74758: LD_VAR 0 4
74762: ARRAY
74763: PUSH
74764: LD_INT 1
74766: ARRAY
74767: PUSH
74768: LD_VAR 0 2
74772: EQUAL
74773: IFFALSE 74784
// KillUnit ( vehicle ) ;
74775: LD_VAR 0 2
74779: PPUSH
74780: CALL_OW 66
74784: GO 74744
74786: POP
74787: POP
// end ;
74788: LD_VAR 0 3
74792: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
74793: LD_EXP 134
74797: NOT
74798: IFFALSE 74833
74800: GO 74802
74802: DISABLE
// begin initMiner := true ;
74803: LD_ADDR_EXP 134
74807: PUSH
74808: LD_INT 1
74810: ST_TO_ADDR
// minersList := [ ] ;
74811: LD_ADDR_EXP 135
74815: PUSH
74816: EMPTY
74817: ST_TO_ADDR
// minerMinesList := [ ] ;
74818: LD_ADDR_EXP 136
74822: PUSH
74823: EMPTY
74824: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
74825: LD_ADDR_EXP 137
74829: PUSH
74830: LD_INT 5
74832: ST_TO_ADDR
// end ;
74833: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
74834: LD_EXP 134
74838: PUSH
74839: LD_INT 34
74841: PUSH
74842: LD_EXP 114
74846: PUSH
74847: EMPTY
74848: LIST
74849: LIST
74850: PPUSH
74851: CALL_OW 69
74855: AND
74856: IFFALSE 75319
74858: GO 74860
74860: DISABLE
74861: LD_INT 0
74863: PPUSH
74864: PPUSH
74865: PPUSH
74866: PPUSH
// begin enable ;
74867: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
74868: LD_ADDR_VAR 0 1
74872: PUSH
74873: LD_INT 34
74875: PUSH
74876: LD_EXP 114
74880: PUSH
74881: EMPTY
74882: LIST
74883: LIST
74884: PPUSH
74885: CALL_OW 69
74889: PUSH
74890: FOR_IN
74891: IFFALSE 74963
// begin if not i in minersList then
74893: LD_VAR 0 1
74897: PUSH
74898: LD_EXP 135
74902: IN
74903: NOT
74904: IFFALSE 74961
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
74906: LD_ADDR_EXP 135
74910: PUSH
74911: LD_EXP 135
74915: PPUSH
74916: LD_EXP 135
74920: PUSH
74921: LD_INT 1
74923: PLUS
74924: PPUSH
74925: LD_VAR 0 1
74929: PPUSH
74930: CALL_OW 1
74934: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
74935: LD_ADDR_EXP 136
74939: PUSH
74940: LD_EXP 136
74944: PPUSH
74945: LD_EXP 136
74949: PUSH
74950: LD_INT 1
74952: PLUS
74953: PPUSH
74954: EMPTY
74955: PPUSH
74956: CALL_OW 1
74960: ST_TO_ADDR
// end end ;
74961: GO 74890
74963: POP
74964: POP
// for i := minerMinesList downto 1 do
74965: LD_ADDR_VAR 0 1
74969: PUSH
74970: DOUBLE
74971: LD_EXP 136
74975: INC
74976: ST_TO_ADDR
74977: LD_INT 1
74979: PUSH
74980: FOR_DOWNTO
74981: IFFALSE 75317
// begin if IsLive ( minersList [ i ] ) then
74983: LD_EXP 135
74987: PUSH
74988: LD_VAR 0 1
74992: ARRAY
74993: PPUSH
74994: CALL_OW 300
74998: IFFALSE 75026
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
75000: LD_EXP 135
75004: PUSH
75005: LD_VAR 0 1
75009: ARRAY
75010: PPUSH
75011: LD_EXP 136
75015: PUSH
75016: LD_VAR 0 1
75020: ARRAY
75021: PPUSH
75022: CALL_OW 505
// if not minerMinesList [ i ] then
75026: LD_EXP 136
75030: PUSH
75031: LD_VAR 0 1
75035: ARRAY
75036: NOT
75037: IFFALSE 75041
// continue ;
75039: GO 74980
// for j := minerMinesList [ i ] downto 1 do
75041: LD_ADDR_VAR 0 2
75045: PUSH
75046: DOUBLE
75047: LD_EXP 136
75051: PUSH
75052: LD_VAR 0 1
75056: ARRAY
75057: INC
75058: ST_TO_ADDR
75059: LD_INT 1
75061: PUSH
75062: FOR_DOWNTO
75063: IFFALSE 75313
// begin side := GetSide ( minersList [ i ] ) ;
75065: LD_ADDR_VAR 0 3
75069: PUSH
75070: LD_EXP 135
75074: PUSH
75075: LD_VAR 0 1
75079: ARRAY
75080: PPUSH
75081: CALL_OW 255
75085: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
75086: LD_ADDR_VAR 0 4
75090: PUSH
75091: LD_EXP 136
75095: PUSH
75096: LD_VAR 0 1
75100: ARRAY
75101: PUSH
75102: LD_VAR 0 2
75106: ARRAY
75107: PUSH
75108: LD_INT 1
75110: ARRAY
75111: PPUSH
75112: LD_EXP 136
75116: PUSH
75117: LD_VAR 0 1
75121: ARRAY
75122: PUSH
75123: LD_VAR 0 2
75127: ARRAY
75128: PUSH
75129: LD_INT 2
75131: ARRAY
75132: PPUSH
75133: CALL_OW 428
75137: ST_TO_ADDR
// if not tmp then
75138: LD_VAR 0 4
75142: NOT
75143: IFFALSE 75147
// continue ;
75145: GO 75062
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
75147: LD_VAR 0 4
75151: PUSH
75152: LD_INT 81
75154: PUSH
75155: LD_VAR 0 3
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PPUSH
75164: CALL_OW 69
75168: IN
75169: PUSH
75170: LD_EXP 136
75174: PUSH
75175: LD_VAR 0 1
75179: ARRAY
75180: PUSH
75181: LD_VAR 0 2
75185: ARRAY
75186: PUSH
75187: LD_INT 1
75189: ARRAY
75190: PPUSH
75191: LD_EXP 136
75195: PUSH
75196: LD_VAR 0 1
75200: ARRAY
75201: PUSH
75202: LD_VAR 0 2
75206: ARRAY
75207: PUSH
75208: LD_INT 2
75210: ARRAY
75211: PPUSH
75212: CALL_OW 458
75216: AND
75217: IFFALSE 75311
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
75219: LD_EXP 136
75223: PUSH
75224: LD_VAR 0 1
75228: ARRAY
75229: PUSH
75230: LD_VAR 0 2
75234: ARRAY
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PPUSH
75240: LD_EXP 136
75244: PUSH
75245: LD_VAR 0 1
75249: ARRAY
75250: PUSH
75251: LD_VAR 0 2
75255: ARRAY
75256: PUSH
75257: LD_INT 2
75259: ARRAY
75260: PPUSH
75261: LD_VAR 0 3
75265: PPUSH
75266: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
75270: LD_ADDR_EXP 136
75274: PUSH
75275: LD_EXP 136
75279: PPUSH
75280: LD_VAR 0 1
75284: PPUSH
75285: LD_EXP 136
75289: PUSH
75290: LD_VAR 0 1
75294: ARRAY
75295: PPUSH
75296: LD_VAR 0 2
75300: PPUSH
75301: CALL_OW 3
75305: PPUSH
75306: CALL_OW 1
75310: ST_TO_ADDR
// end ; end ;
75311: GO 75062
75313: POP
75314: POP
// end ;
75315: GO 74980
75317: POP
75318: POP
// end ;
75319: PPOPN 4
75321: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
75322: LD_INT 0
75324: PPUSH
75325: PPUSH
// result := false ;
75326: LD_ADDR_VAR 0 4
75330: PUSH
75331: LD_INT 0
75333: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 264
75343: PUSH
75344: LD_EXP 114
75348: EQUAL
75349: NOT
75350: IFFALSE 75354
// exit ;
75352: GO 75594
// index := GetElementIndex ( minersList , unit ) ;
75354: LD_ADDR_VAR 0 5
75358: PUSH
75359: LD_EXP 135
75363: PPUSH
75364: LD_VAR 0 1
75368: PPUSH
75369: CALL 21698 0 2
75373: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
75374: LD_EXP 136
75378: PUSH
75379: LD_VAR 0 5
75383: ARRAY
75384: PUSH
75385: LD_EXP 137
75389: GREATEREQUAL
75390: IFFALSE 75394
// exit ;
75392: GO 75594
// ComMoveXY ( unit , x , y ) ;
75394: LD_VAR 0 1
75398: PPUSH
75399: LD_VAR 0 2
75403: PPUSH
75404: LD_VAR 0 3
75408: PPUSH
75409: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75413: LD_INT 35
75415: PPUSH
75416: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
75420: LD_VAR 0 1
75424: PPUSH
75425: LD_VAR 0 2
75429: PPUSH
75430: LD_VAR 0 3
75434: PPUSH
75435: CALL 52417 0 3
75439: NOT
75440: PUSH
75441: LD_VAR 0 1
75445: PPUSH
75446: CALL_OW 314
75450: AND
75451: IFFALSE 75455
// exit ;
75453: GO 75594
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
75455: LD_VAR 0 2
75459: PPUSH
75460: LD_VAR 0 3
75464: PPUSH
75465: CALL_OW 428
75469: PUSH
75470: LD_VAR 0 1
75474: EQUAL
75475: PUSH
75476: LD_VAR 0 1
75480: PPUSH
75481: CALL_OW 314
75485: NOT
75486: AND
75487: IFFALSE 75413
// PlaySoundXY ( x , y , PlantMine ) ;
75489: LD_VAR 0 2
75493: PPUSH
75494: LD_VAR 0 3
75498: PPUSH
75499: LD_STRING PlantMine
75501: PPUSH
75502: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
75506: LD_VAR 0 2
75510: PPUSH
75511: LD_VAR 0 3
75515: PPUSH
75516: LD_VAR 0 1
75520: PPUSH
75521: CALL_OW 255
75525: PPUSH
75526: LD_INT 0
75528: PPUSH
75529: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
75533: LD_ADDR_EXP 136
75537: PUSH
75538: LD_EXP 136
75542: PPUSH
75543: LD_VAR 0 5
75547: PUSH
75548: LD_EXP 136
75552: PUSH
75553: LD_VAR 0 5
75557: ARRAY
75558: PUSH
75559: LD_INT 1
75561: PLUS
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PPUSH
75567: LD_VAR 0 2
75571: PUSH
75572: LD_VAR 0 3
75576: PUSH
75577: EMPTY
75578: LIST
75579: LIST
75580: PPUSH
75581: CALL 21913 0 3
75585: ST_TO_ADDR
// result := true ;
75586: LD_ADDR_VAR 0 4
75590: PUSH
75591: LD_INT 1
75593: ST_TO_ADDR
// end ;
75594: LD_VAR 0 4
75598: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
75599: LD_INT 0
75601: PPUSH
75602: PPUSH
75603: PPUSH
// if not unit in minersList then
75604: LD_VAR 0 1
75608: PUSH
75609: LD_EXP 135
75613: IN
75614: NOT
75615: IFFALSE 75619
// exit ;
75617: GO 76011
// index := GetElementIndex ( minersList , unit ) ;
75619: LD_ADDR_VAR 0 6
75623: PUSH
75624: LD_EXP 135
75628: PPUSH
75629: LD_VAR 0 1
75633: PPUSH
75634: CALL 21698 0 2
75638: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
75639: LD_ADDR_VAR 0 5
75643: PUSH
75644: DOUBLE
75645: LD_EXP 136
75649: PUSH
75650: LD_VAR 0 6
75654: ARRAY
75655: INC
75656: ST_TO_ADDR
75657: LD_INT 1
75659: PUSH
75660: FOR_DOWNTO
75661: IFFALSE 75822
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
75663: LD_EXP 136
75667: PUSH
75668: LD_VAR 0 6
75672: ARRAY
75673: PUSH
75674: LD_VAR 0 5
75678: ARRAY
75679: PUSH
75680: LD_INT 1
75682: ARRAY
75683: PUSH
75684: LD_VAR 0 2
75688: EQUAL
75689: PUSH
75690: LD_EXP 136
75694: PUSH
75695: LD_VAR 0 6
75699: ARRAY
75700: PUSH
75701: LD_VAR 0 5
75705: ARRAY
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: PUSH
75711: LD_VAR 0 3
75715: EQUAL
75716: AND
75717: IFFALSE 75820
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75719: LD_EXP 136
75723: PUSH
75724: LD_VAR 0 6
75728: ARRAY
75729: PUSH
75730: LD_VAR 0 5
75734: ARRAY
75735: PUSH
75736: LD_INT 1
75738: ARRAY
75739: PPUSH
75740: LD_EXP 136
75744: PUSH
75745: LD_VAR 0 6
75749: ARRAY
75750: PUSH
75751: LD_VAR 0 5
75755: ARRAY
75756: PUSH
75757: LD_INT 2
75759: ARRAY
75760: PPUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: CALL_OW 255
75770: PPUSH
75771: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75775: LD_ADDR_EXP 136
75779: PUSH
75780: LD_EXP 136
75784: PPUSH
75785: LD_VAR 0 6
75789: PPUSH
75790: LD_EXP 136
75794: PUSH
75795: LD_VAR 0 6
75799: ARRAY
75800: PPUSH
75801: LD_VAR 0 5
75805: PPUSH
75806: CALL_OW 3
75810: PPUSH
75811: CALL_OW 1
75815: ST_TO_ADDR
// exit ;
75816: POP
75817: POP
75818: GO 76011
// end ; end ;
75820: GO 75660
75822: POP
75823: POP
// for i := minerMinesList [ index ] downto 1 do
75824: LD_ADDR_VAR 0 5
75828: PUSH
75829: DOUBLE
75830: LD_EXP 136
75834: PUSH
75835: LD_VAR 0 6
75839: ARRAY
75840: INC
75841: ST_TO_ADDR
75842: LD_INT 1
75844: PUSH
75845: FOR_DOWNTO
75846: IFFALSE 76009
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
75848: LD_EXP 136
75852: PUSH
75853: LD_VAR 0 6
75857: ARRAY
75858: PUSH
75859: LD_VAR 0 5
75863: ARRAY
75864: PUSH
75865: LD_INT 1
75867: ARRAY
75868: PPUSH
75869: LD_EXP 136
75873: PUSH
75874: LD_VAR 0 6
75878: ARRAY
75879: PUSH
75880: LD_VAR 0 5
75884: ARRAY
75885: PUSH
75886: LD_INT 2
75888: ARRAY
75889: PPUSH
75890: LD_VAR 0 2
75894: PPUSH
75895: LD_VAR 0 3
75899: PPUSH
75900: CALL_OW 298
75904: PUSH
75905: LD_INT 6
75907: LESS
75908: IFFALSE 76007
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
75910: LD_EXP 136
75914: PUSH
75915: LD_VAR 0 6
75919: ARRAY
75920: PUSH
75921: LD_VAR 0 5
75925: ARRAY
75926: PUSH
75927: LD_INT 1
75929: ARRAY
75930: PPUSH
75931: LD_EXP 136
75935: PUSH
75936: LD_VAR 0 6
75940: ARRAY
75941: PUSH
75942: LD_VAR 0 5
75946: ARRAY
75947: PUSH
75948: LD_INT 2
75950: ARRAY
75951: PPUSH
75952: LD_VAR 0 1
75956: PPUSH
75957: CALL_OW 255
75961: PPUSH
75962: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75966: LD_ADDR_EXP 136
75970: PUSH
75971: LD_EXP 136
75975: PPUSH
75976: LD_VAR 0 6
75980: PPUSH
75981: LD_EXP 136
75985: PUSH
75986: LD_VAR 0 6
75990: ARRAY
75991: PPUSH
75992: LD_VAR 0 5
75996: PPUSH
75997: CALL_OW 3
76001: PPUSH
76002: CALL_OW 1
76006: ST_TO_ADDR
// end ; end ;
76007: GO 75845
76009: POP
76010: POP
// end ;
76011: LD_VAR 0 4
76015: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
76016: LD_INT 0
76018: PPUSH
76019: PPUSH
76020: PPUSH
76021: PPUSH
76022: PPUSH
76023: PPUSH
76024: PPUSH
76025: PPUSH
76026: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
76027: LD_VAR 0 1
76031: PPUSH
76032: CALL_OW 264
76036: PUSH
76037: LD_EXP 114
76041: EQUAL
76042: NOT
76043: PUSH
76044: LD_VAR 0 1
76048: PUSH
76049: LD_EXP 135
76053: IN
76054: NOT
76055: OR
76056: IFFALSE 76060
// exit ;
76058: GO 76382
// index := GetElementIndex ( minersList , unit ) ;
76060: LD_ADDR_VAR 0 6
76064: PUSH
76065: LD_EXP 135
76069: PPUSH
76070: LD_VAR 0 1
76074: PPUSH
76075: CALL 21698 0 2
76079: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
76080: LD_ADDR_VAR 0 8
76084: PUSH
76085: LD_EXP 137
76089: PUSH
76090: LD_EXP 136
76094: PUSH
76095: LD_VAR 0 6
76099: ARRAY
76100: MINUS
76101: ST_TO_ADDR
// if not minesFreeAmount then
76102: LD_VAR 0 8
76106: NOT
76107: IFFALSE 76111
// exit ;
76109: GO 76382
// tmp := [ ] ;
76111: LD_ADDR_VAR 0 7
76115: PUSH
76116: EMPTY
76117: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
76118: LD_ADDR_VAR 0 5
76122: PUSH
76123: DOUBLE
76124: LD_INT 1
76126: DEC
76127: ST_TO_ADDR
76128: LD_VAR 0 8
76132: PUSH
76133: FOR_TO
76134: IFFALSE 76329
// begin _d := rand ( 0 , 5 ) ;
76136: LD_ADDR_VAR 0 11
76140: PUSH
76141: LD_INT 0
76143: PPUSH
76144: LD_INT 5
76146: PPUSH
76147: CALL_OW 12
76151: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
76152: LD_ADDR_VAR 0 12
76156: PUSH
76157: LD_INT 2
76159: PPUSH
76160: LD_INT 6
76162: PPUSH
76163: CALL_OW 12
76167: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
76168: LD_ADDR_VAR 0 9
76172: PUSH
76173: LD_VAR 0 2
76177: PPUSH
76178: LD_VAR 0 11
76182: PPUSH
76183: LD_VAR 0 12
76187: PPUSH
76188: CALL_OW 272
76192: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
76193: LD_ADDR_VAR 0 10
76197: PUSH
76198: LD_VAR 0 3
76202: PPUSH
76203: LD_VAR 0 11
76207: PPUSH
76208: LD_VAR 0 12
76212: PPUSH
76213: CALL_OW 273
76217: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
76218: LD_VAR 0 9
76222: PPUSH
76223: LD_VAR 0 10
76227: PPUSH
76228: CALL_OW 488
76232: PUSH
76233: LD_VAR 0 9
76237: PUSH
76238: LD_VAR 0 10
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_VAR 0 7
76251: IN
76252: NOT
76253: AND
76254: PUSH
76255: LD_VAR 0 9
76259: PPUSH
76260: LD_VAR 0 10
76264: PPUSH
76265: CALL_OW 458
76269: NOT
76270: AND
76271: IFFALSE 76313
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
76273: LD_ADDR_VAR 0 7
76277: PUSH
76278: LD_VAR 0 7
76282: PPUSH
76283: LD_VAR 0 7
76287: PUSH
76288: LD_INT 1
76290: PLUS
76291: PPUSH
76292: LD_VAR 0 9
76296: PUSH
76297: LD_VAR 0 10
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PPUSH
76306: CALL_OW 1
76310: ST_TO_ADDR
76311: GO 76327
// i := i - 1 ;
76313: LD_ADDR_VAR 0 5
76317: PUSH
76318: LD_VAR 0 5
76322: PUSH
76323: LD_INT 1
76325: MINUS
76326: ST_TO_ADDR
// end ;
76327: GO 76133
76329: POP
76330: POP
// for i in tmp do
76331: LD_ADDR_VAR 0 5
76335: PUSH
76336: LD_VAR 0 7
76340: PUSH
76341: FOR_IN
76342: IFFALSE 76380
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
76344: LD_VAR 0 1
76348: PPUSH
76349: LD_VAR 0 5
76353: PUSH
76354: LD_INT 1
76356: ARRAY
76357: PPUSH
76358: LD_VAR 0 5
76362: PUSH
76363: LD_INT 2
76365: ARRAY
76366: PPUSH
76367: CALL 75322 0 3
76371: NOT
76372: IFFALSE 76378
// exit ;
76374: POP
76375: POP
76376: GO 76382
76378: GO 76341
76380: POP
76381: POP
// end ;
76382: LD_VAR 0 4
76386: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
76387: LD_INT 0
76389: PPUSH
76390: PPUSH
76391: PPUSH
76392: PPUSH
76393: PPUSH
76394: PPUSH
76395: PPUSH
// if not GetClass ( unit ) = class_sniper then
76396: LD_VAR 0 1
76400: PPUSH
76401: CALL_OW 257
76405: PUSH
76406: LD_INT 5
76408: EQUAL
76409: NOT
76410: IFFALSE 76414
// exit ;
76412: GO 76802
// dist := 8 ;
76414: LD_ADDR_VAR 0 5
76418: PUSH
76419: LD_INT 8
76421: ST_TO_ADDR
// viewRange := 12 ;
76422: LD_ADDR_VAR 0 7
76426: PUSH
76427: LD_INT 12
76429: ST_TO_ADDR
// side := GetSide ( unit ) ;
76430: LD_ADDR_VAR 0 6
76434: PUSH
76435: LD_VAR 0 1
76439: PPUSH
76440: CALL_OW 255
76444: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
76445: LD_INT 61
76447: PPUSH
76448: LD_VAR 0 6
76452: PPUSH
76453: CALL_OW 321
76457: PUSH
76458: LD_INT 2
76460: EQUAL
76461: IFFALSE 76471
// viewRange := 16 ;
76463: LD_ADDR_VAR 0 7
76467: PUSH
76468: LD_INT 16
76470: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
76471: LD_VAR 0 1
76475: PPUSH
76476: LD_VAR 0 2
76480: PPUSH
76481: LD_VAR 0 3
76485: PPUSH
76486: CALL_OW 297
76490: PUSH
76491: LD_VAR 0 5
76495: GREATER
76496: IFFALSE 76575
// begin ComMoveXY ( unit , x , y ) ;
76498: LD_VAR 0 1
76502: PPUSH
76503: LD_VAR 0 2
76507: PPUSH
76508: LD_VAR 0 3
76512: PPUSH
76513: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
76517: LD_INT 35
76519: PPUSH
76520: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
76524: LD_VAR 0 1
76528: PPUSH
76529: LD_VAR 0 2
76533: PPUSH
76534: LD_VAR 0 3
76538: PPUSH
76539: CALL 52417 0 3
76543: NOT
76544: IFFALSE 76548
// exit ;
76546: GO 76802
// until GetDistUnitXY ( unit , x , y ) < dist ;
76548: LD_VAR 0 1
76552: PPUSH
76553: LD_VAR 0 2
76557: PPUSH
76558: LD_VAR 0 3
76562: PPUSH
76563: CALL_OW 297
76567: PUSH
76568: LD_VAR 0 5
76572: LESS
76573: IFFALSE 76517
// end ; ComTurnXY ( unit , x , y ) ;
76575: LD_VAR 0 1
76579: PPUSH
76580: LD_VAR 0 2
76584: PPUSH
76585: LD_VAR 0 3
76589: PPUSH
76590: CALL_OW 118
// wait ( 5 ) ;
76594: LD_INT 5
76596: PPUSH
76597: CALL_OW 67
// _d := GetDir ( unit ) ;
76601: LD_ADDR_VAR 0 10
76605: PUSH
76606: LD_VAR 0 1
76610: PPUSH
76611: CALL_OW 254
76615: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
76616: LD_ADDR_VAR 0 8
76620: PUSH
76621: LD_VAR 0 1
76625: PPUSH
76626: CALL_OW 250
76630: PPUSH
76631: LD_VAR 0 10
76635: PPUSH
76636: LD_VAR 0 5
76640: PPUSH
76641: CALL_OW 272
76645: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
76646: LD_ADDR_VAR 0 9
76650: PUSH
76651: LD_VAR 0 1
76655: PPUSH
76656: CALL_OW 251
76660: PPUSH
76661: LD_VAR 0 10
76665: PPUSH
76666: LD_VAR 0 5
76670: PPUSH
76671: CALL_OW 273
76675: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76676: LD_VAR 0 8
76680: PPUSH
76681: LD_VAR 0 9
76685: PPUSH
76686: CALL_OW 488
76690: NOT
76691: IFFALSE 76695
// exit ;
76693: GO 76802
// ComAnimCustom ( unit , 1 ) ;
76695: LD_VAR 0 1
76699: PPUSH
76700: LD_INT 1
76702: PPUSH
76703: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
76707: LD_VAR 0 8
76711: PPUSH
76712: LD_VAR 0 9
76716: PPUSH
76717: LD_VAR 0 6
76721: PPUSH
76722: LD_VAR 0 7
76726: PPUSH
76727: CALL_OW 330
// repeat wait ( 1 ) ;
76731: LD_INT 1
76733: PPUSH
76734: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
76738: LD_VAR 0 1
76742: PPUSH
76743: CALL_OW 316
76747: PUSH
76748: LD_VAR 0 1
76752: PPUSH
76753: CALL_OW 314
76757: OR
76758: PUSH
76759: LD_VAR 0 1
76763: PPUSH
76764: CALL_OW 302
76768: NOT
76769: OR
76770: PUSH
76771: LD_VAR 0 1
76775: PPUSH
76776: CALL_OW 301
76780: OR
76781: IFFALSE 76731
// RemoveSeeing ( _x , _y , side ) ;
76783: LD_VAR 0 8
76787: PPUSH
76788: LD_VAR 0 9
76792: PPUSH
76793: LD_VAR 0 6
76797: PPUSH
76798: CALL_OW 331
// end ; end_of_file
76802: LD_VAR 0 4
76806: RET
